URL: ftp://garovix.ijs.si/pub/papers/bz/msc_thesis.ps.gz
Refering-URL: http://www-ai.ijs.si/BlazZupan/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: c COPYRIGHTED BY  
Author: Blaz Zupan 
Date: December, 1993  
Abstract-found: 0
Intro-found: 1
Reference: [BCM88] <author> J. C. Browne, A. M. K. Cheng, and A. K. Mok. </author> <title> Computer-aided design of real-time rule-based decision system. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Texas at Austin, </institution> <year> 1988. </year> <note> Also to appear in IEEE Trans. on Software Engineering. </note>
Reference-contexts: the real-time expert system is too complex to analyze, the system has to be resynthesized. 1 In this thesis, we propose a formal framework to a response-time optimization of the rule-based expert system given in the form of rule-based equational logic programs (EQL) as introduced by Browne et al. in <ref> [BCM88] </ref> and Cheng and Wang in [CW90]. Our method is based on the identification of the finite state transition system for the original rule-based program. Because of the nontrivial nature of expert systems, the combinatorial explosion of states may threaten the implementability of such an approach. <p> The synthesis method determines the tight response time bound of the new system. This makes the time-response analysis of constructed rule-based system as proposed in <ref> [BCM88, Che90, CC92] </ref> unnecessary. The optimized system is inherently stable and is guaranteed to compute correct results independent of the scheduling strategy and execution environment. 2 1.1 Ma jor Contributions The major contributions of this thesis include: 1. The formalization of the transition system for a rule-based equational program. 2. <p> The formalization of the transition system for a rule-based equational program. 2. The extension of the synthesis problem specification as given in <ref> [BCM88] </ref>. <p> system construction algorithms and evaluates the iterative improve ment method. * Chapter 5 presents some ideas for future work and concludes the thesis. 5 Chapter 2 Related Work Our work is strongly related to the research first done at the Real Time Lab at the University of Texas at Austin <ref> [BCM88, Che90, Wan90, CC92] </ref>, and later at the Real-Time Systems Group at the University of Houston, Texas [CC92]. <p> These aspects are important for real-time rule-based expert systems as well. The major difference between the two is that the later must react to the events in the external environment by performing the decision-intensive computations sufficiently fast to meet the timing constraints <ref> [OC85, BCM88] </ref> and we will here focus on this issue. <p> Throughout this thesis we will deal with the class of real-time programs introduced by Browne et al. <ref> [BCM88] </ref> and Cheng [Che90]: rule based EQL (Equational Logic) programs. An EQL program consist of a set of rules and variables. Each rule consists of conditional part (enabling condition) and assignment part. Evaluation of the conditional part determines if the rule is to be fired. <p> Note that this program uses just one assignment per rule, while in general we can have many assignments in each rule separating them by the "!" mark. 8 2.1.1 Analysis Problem The analysis problem is to decide whether a given real-time rule-based program meets the specified timing and integrity constraints <ref> [BCM88] </ref>. Verification of the integrity requirements has been more thoroughly studied, whereas there are fewer references in verification of timing requirements. In [CBMW93] Cheng et al. focus on the verification of the timing constraints of the system. <p> The algorithm includes also the program decomposition techniques, which allow partitioning of the rule-based system to independent rule sets that can be analyzed separately 1 . 2.1.2 Synthesis Problem The definition of the synthesis problem given by Browne et al. in <ref> [BCM88] </ref> is: "Given an equational rule-based program P that always reaches a safe fixed point in finite time but is not fast enough to meet the timing constraints under a fair scheduler, determine whether there exists an extension of P that meets both the timing and integrity constraints under some scheduler." <p> an equational rule-based program P that always reaches a safe fixed point in finite time but is not fast enough to meet the timing constraints under a fair scheduler, determine whether there exists an extension of P that meets both the timing and integrity constraints under some scheduler." In theory <ref> [BCM88] </ref>, a solution always exists for the synthesis problem of the programs with finite variables. Such solutions would have as many rules as there are launch states and for the specific launch state a single rule would be fired, leading the system to the fixed point. <p> This would further optimize the response time. 13 2.2 Transition Diagram Synthesis And Reduc- tion In <ref> [BCM88] </ref> Browne et al. gave the formal framework for the state-space representation of the real-time decision program. They show that the analysis problem is decidable if all the variables of the equational rule-based program range over finite domains. <p> value of T is followed (see also [DHC88]). 19 Chapter 3 Method The state space diagram approach for the analysis of equational rule-based system is potentially very complex because of the state explosion problem and was used so far just in the cases where other methods could not be applied <ref> [BCM88] </ref>. The reason for the state explosion is the potentially high number of states such systems may have, i.e. a system with N two-valued variables would have 2 N different states. A state-space diagram can be reduced by combining the equivalent states and corresponding transitions (see [Val91, BFH91]). <p> Finally, Sec.3.5 introduces the iterative optimization method that further improves the derived system and outlines the corresponding algorithm. 22 3.1 Prerequisites The class of real-time programs considered in this thesis are called equational rule-based EQL programs <ref> [BCM88] </ref>. <p> For two-valued programs, we propose a more specific method that and we outline it in Appendix D. 3.2 General Idea The ability of equational rule-based programs to meet the specified timing constraints has been extensively studied and analysis tools have been developed <ref> [BCM88, CW90] </ref>. Their response time depends mainly on the complexity of enabling conditions (matching time), complexity of rule assignments (rule execution time) and on 33 the number of rules to fire before reaching the fixed point. <p> () 1: read in the original EQL program P 2: construct HLD graph and identify independent rule-sets for P 3: forall independent rule-sets in P do 4: construct T R 5: synthesize EQL program P R from T R 6: output P R 7: end forall The synthesis method (see <ref> [BCM88] </ref>) takes an original rule-based expert system as input and derives a new optimized expert system. The method ensures the correctness of the derived expert system in terms of reaching the single accurate fixed point for each launch state and faster response time in terms of number of rule firings. <p> States are numbered rather than annotated with actual values of the variables. Transitions are marked with lower-case letters. There are two cycles (vertices f4; 5; 6g and f15; 16; 17; 18g and three fixed points (2, 13, 14). Following the definitions in <ref> [BCM88] </ref>, states 3, 4, 5, 6, 15, 16, 17, 18 are unstable, state 1 is potentially unstable 37 (taking the transition a brings the system to the fixed point while taking the tran-sition b would lead to a cycle). Other states are stable. <p> Namely, rules in each of the rule-sets in G (CON) should not introduce cycles and to prevent this, we can check if all the rules in each group belong to a specific special form (see <ref> [BCM88, Che90] </ref>). Elements of the set G (CON)s that do 43 not satisfy this constraint would then be divided into different groups of rules that would comply with both constraints. <p> The unoptimized and optimized programs will be compared using the metrics determined with two different methods. For the unoptimized program we do not have a corresponding transition system (it would be too complex to generate it) but rather use the General Analysis Tool <ref> [Che90, BCM88] </ref> (GAA) to determine its lower bound performance. For the optimized programs we determine the performance from its corresponding transition system and from the synthesized program itself. <p> We will constrain our set of test programs so that their rules would belong either to special form A or special form B <ref> [BCM88] </ref>. <p> Therefore, it can be used not only for synthesis but for analysis purposes as well. In particular, it would be much easier to verify functional correctness and integrity constraints using the reduced transition system rather than utilizing the whole (extended) state-space graph <ref> [BCM88] </ref>. Furthermore, the states of our transition systems are expressed in the form of logical assumptions, which is compatible with automatic verification tool for the finite-state systems introduced by Clarke, Emerson and Sistla in [CES86].
Reference: [BFH91] <author> A. Bouajjani, J.-C. Fernandez, and N. Halbwachs. </author> <title> Minimal model generation. </title> <editor> In E. M. Clarke and R. P. Kurshan, editors, </editor> <booktitle> Proc. of 2nd International Conference, CAV '90, </booktitle> <pages> pages 197-203, </pages> <address> New Brunswick, NJ, June 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Because of the nontrivial nature of expert systems, the combinatorial explosion of states may threaten the implementability of such an approach. To tackle the complexity problem, we make use of several different approaches, the most important of them being: (1) the minimal model generation method by Bouajjani et al. <ref> [BFH91] </ref>, (2) the stubborn attack on state explosion using the notion of concurrency by Valmari [Val91], and (3) the equational program decomposition method and concurrent rule execution algorithm by Cheng [Che93]. <p> Though this thesis' main interest are real-time rule based systems, the method introduced here originates from the research done in the field of model checking <ref> [BFH91] </ref> and automatic verification of concurrent systems [Val91]. Specifically, we have used some algorithms for the synthesis and reduction of the transition systems introduced by the researchers in those areas. Some methods introduced in this thesis use combinatorial optimization algorithms. <p> For the second approach, Bouajjani et al. <ref> [BFH91] </ref> proposes an algorithm for minimal model generation that can be used for building a state space graph of transition systems. The algorithm combines generation and reduction methods. <p> The reason for the state explosion is the potentially high number of states such systems may have, i.e. a system with N two-valued variables would have 2 N different states. A state-space diagram can be reduced by combining the equivalent states and corresponding transitions (see <ref> [Val91, BFH91] </ref>). The reduced diagram can be potentially much simpler and easier to analyze, but the problem of constructing the original state space diagram remains. <p> Note that the state assumptions are mutually exclusive. The type of determinism is achieved by constructing transition diagrams with single-rule transitions, i.e. 8 c ) : jcj = 1. We intentionally ignore the possibility to fire rules in parallel and use only the method based on Minimal Model Generation <ref> [BFH91] </ref> for reducing the size of the transition system. Thus, emphasizing the benefit of determinism, we sacrifice the potentially lower complexity of the transition system by exploiting the intra-ruleset parallelism.
Reference: [CBMW93] <author> A. M. K. Cheng, J. C. Browne, A. K. Mok, and R.-H. Wang. </author> <title> Analysis of real-time rule-based system with behavioral constraint assertions specified in Estella. </title> <journal> IEEE Trans. on Software Eng., </journal> 19(19) 863-885, September 1993. 
Reference-contexts: Verification of the integrity requirements has been more thoroughly studied, whereas there are fewer references in verification of timing requirements. In <ref> [CBMW93] </ref> Cheng et al. focus on the verification of the timing constraints of the system. <p> ! q := FALSE ! r:=TRUE IF a = TRUE [] p := TRUE ! r := TRUE IF NOT (a = TRUE) AND (b = TRUE AND c = FALSE) Although the above does not simplify the rules, the analysis using the above mentioned tools by Cheng at al. <ref> [CBMW93] </ref> would determine improved response-time of the new system (less rules to fire). The reason for this is the mutual exclusivity of the new rules. <p> Contrary to popular expert system languages such as OPS5 where the interpretation of the language is defined by the recognize-act cycle [For81], the basic interpretation cycle of EQL is defined by fixed point convergence <ref> [CBMW93] </ref>. Therefore, the response time for the EQL program can be related to the time it takes to converge to a fixed point rather than to the length of the recognize-act cycle. <p> We will use the following two metrics to measure the time EQL programs take to converge to a fixed point: Number of rules to fire. This metrics was introduced by Mok in [Mok89] and by Cheng et al. in <ref> [CBMW93] </ref> and is used as the most important time-performance metrics in the General Analysis Algorithm proposed by these authors. It determines the maximal number of rules to fire (in a sequence) for the system to reach the fixed point from any launch state. <p> The Integrated Status Assessment Expert System (ISA) was developed by Mitre for the planned NASA Space Station. The multi-valued EQL ISA program was analyzed in <ref> [CBMW93] </ref>. We used the two-valued EQL version with 35 rules and 58 variables. The Estella General Analysis Tool [CBMW93] was used to determine the stability of the system and discovered several cycles which led to a termination of the analysis. <p> The Integrated Status Assessment Expert System (ISA) was developed by Mitre for the planned NASA Space Station. The multi-valued EQL ISA program was analyzed in <ref> [CBMW93] </ref>. We used the two-valued EQL version with 35 rules and 58 variables. The Estella General Analysis Tool [CBMW93] was used to determine the stability of the system and discovered several cycles which led to a termination of the analysis. Thus, using Estella, the performance of the original system could not be determined. We used our method and optimized the ISA program. <p> We used our method and optimized the ISA program. The program consists of 17 independent rule-sets 1 . The inherently stable EQL program was derived from it with a precise upper bound of 24 rule-firings before reaching a fixed point. 1 Originally <ref> [CBMW93] </ref>, only 12 independent rule-sets were identified.
Reference: [CC92] <author> A. M. K. Cheng and C.-H. Chen. </author> <title> Efficient response time bound analysis of real-time rule-based systems. </title> <booktitle> In Proc. 7th Annual IEEE Conf. on Computer Assurance, </booktitle> <pages> pages 63-76, </pages> <publisher> NIST, </publisher> <address> Gaithersburg, Maryland, </address> <year> 1992. </year>
Reference-contexts: The synthesis method determines the tight response time bound of the new system. This makes the time-response analysis of constructed rule-based system as proposed in <ref> [BCM88, Che90, CC92] </ref> unnecessary. The optimized system is inherently stable and is guaranteed to compute correct results independent of the scheduling strategy and execution environment. 2 1.1 Ma jor Contributions The major contributions of this thesis include: 1. The formalization of the transition system for a rule-based equational program. 2. <p> system construction algorithms and evaluates the iterative improve ment method. * Chapter 5 presents some ideas for future work and concludes the thesis. 5 Chapter 2 Related Work Our work is strongly related to the research first done at the Real Time Lab at the University of Texas at Austin <ref> [BCM88, Che90, Wan90, CC92] </ref>, and later at the Real-Time Systems Group at the University of Houston, Texas [CC92]. <p> future work and concludes the thesis. 5 Chapter 2 Related Work Our work is strongly related to the research first done at the Real Time Lab at the University of Texas at Austin [BCM88, Che90, Wan90, CC92], and later at the Real-Time Systems Group at the University of Houston, Texas <ref> [CC92] </ref>. These serve as the foundation and this thesis is a logical continuation of the groups' endeavor to develop analysis and synthesis tools for real-time rule based expert systems, so that they can be used in the hard real-time environments. <p> A set of rules satisfying all behavioral constraint assertions of some special form is guaranteed to have a bounded response time. Cheng and Chen also developed an efficient algorithms for computing tight response time bounds for the rule sets with a bounded response time <ref> [CC92] </ref>. The limitation for these methods is that the 9 system will not derive a tight response time unless the rules are in one of the special forms.
Reference: [CES86] <author> E. M. Clarke, E. A. Emerson, and A. P. Sistla. </author> <title> Automatic verification of finite-state concurrent system using temporal logic specifications. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: In addition to checking for the timing constraints, they have used the state space graph for verifying the accordance with the integrity constraints employing a model checker for the temporal logic CTL <ref> [CES86] </ref>. The above approach can be used if the state space graph is reasonably small, but in the worst case may require exponential computation time. Mok showed that the computational complexity of the analysis problem restricted to finite graphs is PSPACE-complete [Mok89]. <p> Furthermore, the states of our transition systems are expressed in the form of logical assumptions, which is compatible with automatic verification tool for the finite-state systems introduced by Clarke, Emerson and Sistla in <ref> [CES86] </ref>. Their methods have been already used for real-time programs verification and could be utilized 84 in our case as well. * The algorithms described in this thesis have been implemented on the UNIX Workstation environment and we have constructed a prototype that was used for the evaluation purposes [ZC93].
Reference: [Che90] <author> A. M. K. Cheng. </author> <title> Analysis and synthesis of real-time rule-based decision systems. </title> <type> PhD dissertation, </type> <institution> Dept. of Computer Science, University of Texas at Austin, </institution> <year> 1990. </year>
Reference-contexts: The synthesis method determines the tight response time bound of the new system. This makes the time-response analysis of constructed rule-based system as proposed in <ref> [BCM88, Che90, CC92] </ref> unnecessary. The optimized system is inherently stable and is guaranteed to compute correct results independent of the scheduling strategy and execution environment. 2 1.1 Ma jor Contributions The major contributions of this thesis include: 1. The formalization of the transition system for a rule-based equational program. 2. <p> system construction algorithms and evaluates the iterative improve ment method. * Chapter 5 presents some ideas for future work and concludes the thesis. 5 Chapter 2 Related Work Our work is strongly related to the research first done at the Real Time Lab at the University of Texas at Austin <ref> [BCM88, Che90, Wan90, CC92] </ref>, and later at the Real-Time Systems Group at the University of Houston, Texas [CC92]. <p> Throughout this thesis we will deal with the class of real-time programs introduced by Browne et al. [BCM88] and Cheng <ref> [Che90] </ref>: rule based EQL (Equational Logic) programs. An EQL program consist of a set of rules and variables. Each rule consists of conditional part (enabling condition) and assignment part. Evaluation of the conditional part determines if the rule is to be fired. <p> The fixed point is reached when no variable's value changes. The required property of hard real-time rule-based system is reaching the fixed point before the next change of the values of input variables. Fig.2.1 shows a slightly modified example EQL program taken from <ref> [Che90] </ref>. <p> Their method is based on the identification of the special forms of rules based on a static analysis of the EQL program. An example of special form (called special form A) can be then given as (simplified from <ref> [Che90] </ref>): * only constant terms are assigned to a set of variables in a program, * all the rules are pairwise compatible, i.e. their enabling conditions are mutually exclusive or they assign the values to a different variables or they assign the same values to the same variables, and * variables <p> For such cases, the tool is accompanied by the state-derivation algorithm that generates the whole (potentially exhaustively big) state diagram and uses it to compute the (precise) response bound. The above methods have been combined in the General Analysis Algorithm <ref> [Che90] </ref>. <p> This computationally expensive synthesis method would also derive a very complex result (many rules with very complex enabling conditions) and thus is not feasible. Cheng proposes two general approaches to the solution of the synthesis problem <ref> [Che90] </ref>: 1 The same method is also useful for parallelization and the reader should refer to Sec.2.1.3 for references. 10 1. transforming the given equational rule-based program by adding, deleting and/ or changing the rules, and 2. optimizing the scheduler to select the rules to fire such that a fixed point <p> If the optimization technique maintains the assertion about fixed-point reacha-bility for every independent rule-set, each rule-set can be optimized independently. The above decomposition method was evaluated in [Che93] and the results encourage us to use this method to substantially reduce the complexity of the optimization process. Cheng <ref> [Che90] </ref> defines a potentially enable relationship so that it can be used for a multivalued equational programs. <p> Namely, rules in each of the rule-sets in G (CON) should not introduce cycles and to prevent this, we can check if all the rules in each group belong to a specific special form (see <ref> [BCM88, Che90] </ref>). Elements of the set G (CON)s that do 43 not satisfy this constraint would then be divided into different groups of rules that would comply with both constraints. <p> The unoptimized and optimized programs will be compared using the metrics determined with two different methods. For the unoptimized program we do not have a corresponding transition system (it would be too complex to generate it) but rather use the General Analysis Tool <ref> [Che90, BCM88] </ref> (GAA) to determine its lower bound performance. For the optimized programs we determine the performance from its corresponding transition system and from the synthesized program itself. <p> For the analysis of the unoptimized program we use the General Analysis Tool (GAA) <ref> [Che90] </ref>. This tool was primarily designed to test the fixed point reachability and later extended to derive a response time approximation in terms of the numbers of rules to fire to reach a fixed point. <p> Examples for this case are the Integrated Status Assessment Expert System (ISA) [Mar88] and the Crogenic Hydrogen Pressure Malfunction Procedure of the Space Shuttle Vehicle (SSV) Pressure Control System [Hel84], respectively. The EQL representation for both systems is given in <ref> [Che90] </ref>. This leads us to design a random generator of EQL programs. The EQL programs created using the generator have the following characteristics: 1. The number of rules in a rule-base and the complexity of both assignment and enabling condition part are defined by the user. 2.
Reference: [Che93] <author> A. M. K. Cheng. </author> <title> Parallel execution of real-time rule-based systems. </title> <booktitle> In Proc. of IEEE International Parallel Processing Symposium, </booktitle> <pages> pages 779-789, </pages> <address> NewPort Beach, CA, </address> <month> April </month> <year> 1993. </year> <month> 86 </month>
Reference-contexts: of several different approaches, the most important of them being: (1) the minimal model generation method by Bouajjani et al. [BFH91], (2) the stubborn attack on state explosion using the notion of concurrency by Valmari [Val91], and (3) the equational program decomposition method and concurrent rule execution algorithm by Cheng <ref> [Che93] </ref>. The optimization method introduced in the thesis is two phase and consists first of constructing the transition system of the rule-based program, and second of iteratively improving the transition system using the simulated annealing combinatorial optimization method. The new rule-based program is synthesized from the constructed transition system. <p> In this thesis we refer to an approach introduced by Kuo and Moldovan [KM91]. They use the notion of context, which groups the rules that interfere with each other. Several contexts can be executed in parallel if they are mutually independent. Cheng proposes similar parallel execution model <ref> [Che93] </ref>, providing also the means of determining the response time-bound for a system apart from only guaranteeing logical correctness of the method. He identifies two types of parallelism in 12 the rule-base system: * Inter-ruleset parallelism is a coarse grain parallelism. The system is decomposed into inter-dependent rule-sets. <p> For the notion of concurrency, his idea is combined with Cheng's notion of inter-ruleset parallelism (see Sec.2.1.3 and <ref> [Che93] </ref>). 16 the vertices represent the values of the program variables a, b and c. 2.3 Simulated Annealing Optimization Method For the final refinement of the optimized rule-based system as presented in Sec.3.5 we had to decide on the most suitable combinatorial optimization method. <p> The algorithms for the derivation of both D i (s) and O i (s) are described in detail in Appendix A. 3.1.3 Decomposition of EQL Program We refer to decomposition techniques for EQL programs as given in <ref> [Che93] </ref>, which are based on the rule independency and on the definition of inter-ruleset parallelism. Rule b is said to be independent from rule a if the following conditions hold: I1. L a " L b = ;, I2. rule a does not potentially enable rule b, and I3. <p> If the EQL program is guaranteed to reach the fixed point from every launch state, the above uniprocessor rule schedule will guarantee the program will reach a fixed point as well <ref> [Che93] </ref>. If the optimization technique maintains the assertion about fixed-point reacha-bility for every independent rule-set, each rule-set can be optimized independently. The above decomposition method was evaluated in [Che93] and the results encourage us to use this method to substantially reduce the complexity of the optimization process. <p> fixed point from every launch state, the above uniprocessor rule schedule will guarantee the program will reach a fixed point as well <ref> [Che93] </ref>. If the optimization technique maintains the assertion about fixed-point reacha-bility for every independent rule-set, each rule-set can be optimized independently. The above decomposition method was evaluated in [Che93] and the results encourage us to use this method to substantially reduce the complexity of the optimization process. Cheng [Che90] defines a potentially enable relationship so that it can be used for a multivalued equational programs. <p> L a " R b = ; and L b " R a = ;. D1 follows the idea of intra-ruleset parallelism <ref> [Che93] </ref> and D2 and D3 guarantee the independence of the results of two rules. These constraints are too strict, but speedup the G (CON) construction process. The main disadvantage is the potentially increased number of states in the constructed transition system. <p> This would additionally decrease the complexity of the synthesis, since the algorithm would only focus on the limited set of rules and variables. * The parallel execution of the rule-based program <ref> [Che93, KM91] </ref> is a relatively new trend and can radically decrease the response-time. The methods that determine if two rules can be fired in parallel consider the variables in the enabling condition and assignment part of the rule.
Reference: [CTF93] <author> F. P. Coyle, M. M. Tanik, and D. J. Frailey. </author> <title> Rule based programming for real-time knowledge-based system development. </title> <booktitle> In Proc. 5th International Conference on Software Engineering and Knowledge Engineering SEKE '93, </booktitle> <pages> pages 142-149, </pages> <address> San Francisco Bay, CA, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Furthermore, it optimizes only the number of rules to be fired to reach the fixed point. Such an optimization can result in increased complexity of rules (enabling conditions and action parts). 11 Coyle, Tanik and Frailey proposed a compilation technique that would replace the computationally intensive pattern matching <ref> [CTF93] </ref> for the propositional rules. Their algorithm combines and transforms the enabling condition of rules into a single decision-action tree data structure. As the execution engine checks for the values of the variables in the nodes in the decision-action tree it determines which rule is to be fired.
Reference: [CW90] <author> A. M. K. Cheng and C.-K. Wang. </author> <title> Fast static analysis of real-time rule-based systems to verify their fixed point convergence. </title> <booktitle> In Proc. 5th Annual IEEE Conf. on Computer Assurance, </booktitle> <pages> pages 197-203, </pages> <publisher> NIST, </publisher> <address> Gaithersburg, Maryland, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: complex to analyze, the system has to be resynthesized. 1 In this thesis, we propose a formal framework to a response-time optimization of the rule-based expert system given in the form of rule-based equational logic programs (EQL) as introduced by Browne et al. in [BCM88] and Cheng and Wang in <ref> [CW90] </ref>. Our method is based on the identification of the finite state transition system for the original rule-based program. Because of the nontrivial nature of expert systems, the combinatorial explosion of states may threaten the implementability of such an approach. <p> For two-valued programs, we propose a more specific method that and we outline it in Appendix D. 3.2 General Idea The ability of equational rule-based programs to meet the specified timing constraints has been extensively studied and analysis tools have been developed <ref> [BCM88, CW90] </ref>. Their response time depends mainly on the complexity of enabling conditions (matching time), complexity of rule assignments (rule execution time) and on 33 the number of rules to fire before reaching the fixed point. <p> is minimized, * using the information derived from T R , it is possible to reduce the matching time identifying the subset of rules possibly being fired in advance, and, if some additional constraints regarding the parallel rule firing are met, 35 * unlike most analysis tools for EQL programs <ref> [CW90] </ref>, at the end of the synthesis we can determine the precise upper bound of rule firings before the reaching of the fixed point can be determined, and * there is no need for resolving conflicts if more than one rule is enabled (any order of firing the enabled rules leads
Reference: [DHC88] <author> D.F.Wong, H.W.Leong, and C.L.Liu. </author> <title> Simulated Annealing for VLSI Design. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: Some methods introduced in this thesis use combinatorial optimization algorithms. We have selected the simulated annealing method as the most convenient one in our case (see below). This method has also proved to be appropriate in solving several combinatorially complex problems that at least resemble ours <ref> [DHC88] </ref>, and 6 this was also one of the reasons to use it. 2.1 Real-Time Rule Based Systems Validation and verification of expert systems is an emerging field and is becoming an important phase in the life cycle of an expert system [Eli92]. <p> They used an analogy between a combinatorial optimization problem and the problem of determining the lowest-energy ground state of a physical system with many interacting atoms. The generic simulated annealing procedure, as given in <ref> [DHC88] </ref>, is shown in Fig.2.4. The simulated annealing procedure randomizes the iterative improvement procedure and also allows occasional moves that worsen the current solution in an attempt to reduce the probability of being stuck at a locally optimal solution. <p> The theoretical analysis of simulated annealing [MRSV86] shows that this class of algorithms converges with probability 1 to a globally optimal solution, provided certain conditions on the number of iterations for each temperature T , and a certain rule for updating the value of T is followed (see also <ref> [DHC88] </ref>). 19 Chapter 3 Method The state space diagram approach for the analysis of equational rule-based system is potentially very complex because of the state explosion problem and was used so far just in the cases where other methods could not be applied [BCM88].
Reference: [Eli92] <author> L. B. Eliot. </author> <title> If it works, is it good? AI Expert, </title> <booktitle> 7(6) </booktitle> <pages> 9-11, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: combinatorially complex problems that at least resemble ours [DHC88], and 6 this was also one of the reasons to use it. 2.1 Real-Time Rule Based Systems Validation and verification of expert systems is an emerging field and is becoming an important phase in the life cycle of an expert system <ref> [Eli92] </ref>. This includes checking of the validity of rules, identifying the missing and inconsistent rules and testing for the presence of circular rules. These aspects are important for real-time rule-based expert systems as well.
Reference: [For81] <author> C. L. Forgy. </author> <title> OPS5 user's manual. </title> <type> Technical report cmu-cs-81-135, </type> <institution> Carnegie-Mellon University, Department of Computer Science, </institution> <year> 1981. </year>
Reference-contexts: We evaluate the rule-based system in terms that are independent of the hardware platform and the execution engine. Contrary to popular expert system languages such as OPS5 where the interpretation of the language is defined by the recognize-act cycle <ref> [For81] </ref>, the basic interpretation cycle of EQL is defined by fixed point convergence [CBMW93]. Therefore, the response time for the EQL program can be related to the time it takes to converge to a fixed point rather than to the length of the recognize-act cycle. <p> Average complexity of enabling conditions. It has been determined that 90% of execution time of rule-based system is spent for matching (see <ref> [For81] </ref>). Even if the EQL language is much simpler and the enabling conditions do not require matching but rather a simple evaluation of two-valued expression, this would still affect the response time. <p> While MRL syntactically resembles EQL (enabling conditions of rules are based on logical expressions), its expressive power is more extensive because of the use of first-order logic and in that resembles OPS5 <ref> [For81] </ref>. There are several methods proposed for the analysis of time-response properties of MRL programs [WM], but not much work has been done in the synthesis field.
Reference: [Gin88] <author> A. Ginsberg. </author> <title> Automatic Refinement of Expert System Knowledge Bases. </title> <booktitle> Research Notes in Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: Although refinement and optimization of an expert systems knowledge bases present a well established field (for an overview see <ref> [Gin88] </ref>), the techniques dealing with the analysis and optimization of response time are relatively new and not much research has been done in the area of real-time rule-based expert system [Mok89].
Reference: [Hel84] <author> J. J. Helly. </author> <title> Distributed Expert System for Space Shuttle Flight Control. </title> <type> PhD dissertation, </type> <institution> Department of Computer Science, UCLA, </institution> <year> 1984. </year> <note> [Int91] iPSC/2 and iPSC/860. User's guide, </note> <institution> Intel Supercomputer Systems Division, Beaverton, Oregon, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: Examples for this case are the Integrated Status Assessment Expert System (ISA) [Mar88] and the Crogenic Hydrogen Pressure Malfunction Procedure of the Space Shuttle Vehicle (SSV) Pressure Control System <ref> [Hel84] </ref>, respectively. The EQL representation for both systems is given in [Che90]. This leads us to design a random generator of EQL programs. The EQL programs created using the generator have the following characteristics: 1.
Reference: [KGV83] <author> S. Kirkpatrick, C. D. Gelatt, and M. P. Vecchi. </author> <title> Optimization by simulated annealing. </title> <journal> Science, </journal> <volume> 220 </volume> <pages> 671-680, </pages> <year> 1983. </year>
Reference-contexts: (not yet in equilibrium) do 5: S 0 := Some random neighboring solution of S 6: := C (S 0 ) C (S) 8: if random (0; 1) P rob then 9: S := S 0 11: end while 12: Update T 13: end while 14: Output best solution Vecci <ref> [KGV83] </ref>. They used an analogy between a combinatorial optimization problem and the problem of determining the lowest-energy ground state of a physical system with many interacting atoms. The generic simulated annealing procedure, as given in [DHC88], is shown in Fig.2.4. <p> For these reasons, we have constructed an algorithm for iterative refinement of the reduced transition system. It uses the derived transition system T R as an input and, by introducing new transitions and/or deleting old ones, tries to iteratively improve it. The second optimization phase uses the simulated annealing <ref> [KGV83] </ref> optimization method. It attempts to minimize the cost function, which is defined over both the transition system and its corresponding EQL program, thus combining the notion of number of rule firings to reach a fixed point and the complexity of enabling conditions. <p> We are consider the simulated annealing <ref> [KGV83] </ref> to be ap- propriate method to be used for the optimization. 3.5 Iterative Improvement of the Reduced Tran sition System and Its Corresponding EQL Program In the previous sections we have shown a hill climbing optimization method for constructing the transition system. <p> In each iteration, the method generates a new transition system from the old one and synthesizes the corresponding EQL program. It then compares the cost of both solutions, and if the acceptance criteria is satisfied accepts a new solution. Owing to its simplicity and potentially good performance (see <ref> [KGV83] </ref>) we use a simulated annealing optimization method scheme. 3.5.2 Method The algorithm is described by means of the definition of the solution space, the neighboring solutions, the cost function and the annealing schedule. These completely specify the simulated annealing method as introduced in Sec.2.3.
Reference: [KM91] <author> S. Kuo and D. Moldovan. </author> <title> Implementation of multiple rule firing production system on hypercube. </title> <journal> J. Parallel and Distr. Computing, </journal> <volume> 13(4) </volume> <pages> 383-394, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Our main interest is in the later, since it makes the divide and conquer approach feasible to lower the complexity of the analysis and synthesis of the system. In this thesis we refer to an approach introduced by Kuo and Moldovan <ref> [KM91] </ref>. They use the notion of context, which groups the rules that interfere with each other. Several contexts can be executed in parallel if they are mutually independent. <p> This would additionally decrease the complexity of the synthesis, since the algorithm would only focus on the limited set of rules and variables. * The parallel execution of the rule-based program <ref> [Che93, KM91] </ref> is a relatively new trend and can radically decrease the response-time. The methods that determine if two rules can be fired in parallel consider the variables in the enabling condition and assignment part of the rule.
Reference: [Lo93] <author> W. K. Lo. </author> <title> Optimal solution of synthesis problem of real-time equational rule-based system. </title> <type> To become master's thesis, </type> <institution> University of Houston, Department of Computer Science, </institution> <year> 1993. </year>
Reference-contexts: Unfortunately, it is hard to find any references for the above two solutions. In his thesis <ref> [Lo93] </ref>, Lo proposes a rule-modification method based on the static analysis of an EQL program. The improvement of the method depends on the redundancy introduced by a rule-base programmer.
Reference: [Mar88] <author> C. A. Marsh. </author> <title> The ISA expert system: A prototype system for failure diagnosis on the space station. </title> <type> MITRE report, </type> <institution> The MITRE Corporation, Houston, Texas, </institution> <year> 1988. </year> <month> 87 </month>
Reference-contexts: Furthermore, to penalize deep transition systems, the depth of the transition diagram can be included in the cost function. 68 Chapter 4 Experimental Results To demonstrate the applicability of our method, we used it to optimize an expert system from Mitre <ref> [Mar88] </ref> and several randomly generated EQL programs. In this section, we introduce the metrics used to evaluate the response time of the equational rule-based system, present a random EQL program generation method and evaluate the impact of each of the optimization phases using the example EQL programs. <p> The problem is that such available EQL programs either (1) contain cycles and GAA just reports their unstable behavior or (2) are too simple for the reason they contain just a few rules in strongly connected components. Examples for this case are the Integrated Status Assessment Expert System (ISA) <ref> [Mar88] </ref> and the Crogenic Hydrogen Pressure Malfunction Procedure of the Space Shuttle Vehicle (SSV) Pressure Control System [Hel84], respectively. The EQL representation for both systems is given in [Che90]. This leads us to design a random generator of EQL programs. <p> According to this all the rules in the test programs considered in the next Section belong to a single strongly component. 4.3 Evaluation of EQL Program Synthesis To demonstrate the applicability of the first phase of the optimization method, we used it to optimize the ISA expert system from Mitre <ref> [Mar88] </ref> and several randomly generated EQL programs. The Integrated Status Assessment Expert System (ISA) was developed by Mitre for the planned NASA Space Station. The multi-valued EQL ISA program was analyzed in [CBMW93]. We used the two-valued EQL version with 35 rules and 58 variables.
Reference: [Mir90] <author> D. P. Miranker. </author> <title> TREAT: A new and efficient match algorithm for AI production systems. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> London, </address> <year> 1990. </year>
Reference-contexts: It is though a question whether this should be done at the program-generation level or later on at the matching level. Namely, it is to be expected that the matching would not consist of evaluating the enabling conditions without trying to optimize the matching time (see <ref> [Mir90] </ref> for example).
Reference: [Mok89] <author> A. K. Mok. </author> <title> Formal analysis of real-time equational rule-based system. </title> <booktitle> In Proc. 10th Real-Time Systems Symposium (RTSS), </booktitle> <month> December </month> <year> 1989. </year>
Reference-contexts: Although refinement and optimization of an expert systems knowledge bases present a well established field (for an overview see [Gin88]), the techniques dealing with the analysis and optimization of response time are relatively new and not much research has been done in the area of real-time rule-based expert system <ref> [Mok89] </ref>. Throughout this thesis we will deal with the class of real-time programs introduced by Browne et al. [BCM88] and Cheng [Che90]: rule based EQL (Equational Logic) programs. An EQL program consist of a set of rules and variables. Each rule consists of conditional part (enabling condition) and assignment part. <p> The above approach can be used if the state space graph is reasonably small, but in the worst case may require exponential computation time. Mok showed that the computational complexity of the analysis problem restricted to finite graphs is PSPACE-complete <ref> [Mok89] </ref>. Thus, the computational cost for analyzing these programs is likely to be even worse than that of solving NP-complete decision problem in the worst case. <p> We will use the following two metrics to measure the time EQL programs take to converge to a fixed point: Number of rules to fire. This metrics was introduced by Mok in <ref> [Mok89] </ref> and by Cheng et al. in [CBMW93] and is used as the most important time-performance metrics in the General Analysis Algorithm proposed by these authors. It determines the maximal number of rules to fire (in a sequence) for the system to reach the fixed point from any launch state.
Reference: [MRSV86] <author> D. Mitra, F. Romeo, and A. Sangiovanni-Vincentelli. </author> <title> Convergence and finite-time behavior of simulated annealing. </title> <booktitle> Advances of Applied Probability, </booktitle> <volume> 18 </volume> <pages> 747-771, </pages> <year> 1986. </year>
Reference-contexts: The theoretical analysis of simulated annealing <ref> [MRSV86] </ref> shows that this class of algorithms converges with probability 1 to a globally optimal solution, provided certain conditions on the number of iterations for each temperature T , and a certain rule for updating the value of T is followed (see also [DHC88]). 19 Chapter 3 Method The state space
Reference: [OC85] <author> C. A. O'Reilly and A. S. Cromatry. </author> <title> "Fast" is not "real-time": Designing effective real-time AI system. </title> <editor> In John F. Gilmore, editor, </editor> <booktitle> Applications of Artificial Intelligence, volume 548 of SPIE, </booktitle> <pages> pages 249-257, </pages> <year> 1985. </year>
Reference-contexts: These aspects are important for real-time rule-based expert systems as well. The major difference between the two is that the later must react to the events in the external environment by performing the decision-intensive computations sufficiently fast to meet the timing constraints <ref> [OC85, BCM88] </ref> and we will here focus on this issue.
Reference: [Qui86] <author> J. Quinlan. </author> <title> Induction of decision trees. </title> <journal> Machine Learning, </journal> <volume> 1 </volume> <pages> 81-106, </pages> <year> 1986. </year>
Reference-contexts: The system can be further optimized. For example, a sequence of IF .. THEN statements in the same BEGIN .. END block, can be replaced by a decision tree generated using one of the known machine learning methods (for example using the ID-3 algorithm from <ref> [Qui86] </ref> or similar). This would decrease the matching time and thus improve the performance. It is though a question whether this should be done at the program-generation level or later on at the matching level.
Reference: [RK91] <author> E. Rich and K. Knight. </author> <booktitle> Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann Publishers, McGraw-Hill, </publisher> <address> New York, </address> <note> second edition, </note> <year> 1991. </year>
Reference-contexts: First, due to the huge complexity of the search space, we have decided to use the heuristic search techniques. Among the possible candidates like hill climbing, best first search, genetic algorithms (for a good survey see <ref> [RK91] </ref>) we have chosen simulated annealing. The main reasons were the simplicity of the algorithm, the need to store only one possible solution at a time and the ability of the method to be able to search globally instead of finding only locally optimal solutions.
Reference: [Sch89] <author> W. G. </author> <title> Schneeweiss. Boolean functions with engineering applications and computer programs. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: Another restriction we will adopt affects the enabling conditions and the expressions in the right-hand-side of assignments. They both have to be in the form of 23 disjunction of conjunctions of program variables. This also simplifies the minimiza-tion of two-valued expressions (see <ref> [Sch89] </ref>). Note that EQL programs that are not in this form and are using multivalued variables instead, can be easily (automatically) converted to it. <p> While current implementation uses two-valued function minimization which is a well know problem and many algorithms can be used to solve it (see <ref> [Sch89] </ref>), the problem of multi-logic minimization is much harder and the implementation of the algorithms are complex (a good survey and comparison of the most known algorithms is given in [TB88]). * The extension of an equational rule based language EQL is a macro rule-based language called MRL [Wan90].
Reference: [TB88] <author> P. Tirumalai and J. T. Butler. </author> <title> Analysis of minimization algorithms for multiple-valued programmable logic arrays. </title> <booktitle> IEEE Int'l Symp. On Multiple Valued-Logic, </booktitle> <pages> pages 226-236, </pages> <year> 1988. </year>
Reference-contexts: uses two-valued function minimization which is a well know problem and many algorithms can be used to solve it (see [Sch89]), the problem of multi-logic minimization is much harder and the implementation of the algorithms are complex (a good survey and comparison of the most known algorithms is given in <ref> [TB88] </ref>). * The extension of an equational rule based language EQL is a macro rule-based language called MRL [Wan90].
Reference: [Tha82] <author> A. Thayse. </author> <title> Synthesis and optimization of programs by means of p-functions. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-31(1):34-40, </volume> <month> January </month> <year> 1982. </year>
Reference-contexts: The method transforms the syntax of the rule-base but does not alter the semantics and it is therefore questionable whether we can classify it as a synthesis method. Also, other techniques, in particular for two-valued systems (for example see <ref> [Tha82] </ref>), are available that would have also to be considered for such optimization purposes and the matching algorithm itself may use such techniques.
Reference: [Val91] <author> A. Valmari. </author> <title> A stubborn attack on state explosion. </title> <editor> In E. M. Clarke and R. P. Kurshan, editors, </editor> <booktitle> Proc. of 2nd International Conference, CAV '90, </booktitle> <pages> pages 156-165, </pages> <address> New Brunswick, NJ, June 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: To tackle the complexity problem, we make use of several different approaches, the most important of them being: (1) the minimal model generation method by Bouajjani et al. [BFH91], (2) the stubborn attack on state explosion using the notion of concurrency by Valmari <ref> [Val91] </ref>, and (3) the equational program decomposition method and concurrent rule execution algorithm by Cheng [Che93]. <p> Though this thesis' main interest are real-time rule based systems, the method introduced here originates from the research done in the field of model checking [BFH91] and automatic verification of concurrent systems <ref> [Val91] </ref>. Specifically, we have used some algorithms for the synthesis and reduction of the transition systems introduced by the researchers in those areas. Some methods introduced in this thesis use combinatorial optimization algorithms. We have selected the simulated annealing method as the most convenient one in our case (see below). <p> Another assumption is that the method can determine the inclusion of classes. The authors claim that such a symbolic computation is achievable in the boolean case. A stubborn attack on state explosion by Valmari is another method for state reduction. In <ref> [Val91] </ref> he argues that concurrency is the major contributor to state explosion. <p> The reason for the state explosion is the potentially high number of states such systems may have, i.e. a system with N two-valued variables would have 2 N different states. A state-space diagram can be reduced by combining the equivalent states and corresponding transitions (see <ref> [Val91, BFH91] </ref>). The reduced diagram can be potentially much simpler and easier to analyze, but the problem of constructing the original state space diagram remains.
Reference: [Wan90] <author> C.-K. Wang. MRL: </author> <title> The language. </title> <type> Technical report, </type> <institution> University of Texas at Austin, Real-Time Lab, Department of Computer Sciences, </institution> <month> October </month> <year> 1990. </year>
Reference-contexts: system construction algorithms and evaluates the iterative improve ment method. * Chapter 5 presents some ideas for future work and concludes the thesis. 5 Chapter 2 Related Work Our work is strongly related to the research first done at the Real Time Lab at the University of Texas at Austin <ref> [BCM88, Che90, Wan90, CC92] </ref>, and later at the Real-Time Systems Group at the University of Houston, Texas [CC92]. <p> it (see [Sch89]), the problem of multi-logic minimization is much harder and the implementation of the algorithms are complex (a good survey and comparison of the most known algorithms is given in [TB88]). * The extension of an equational rule based language EQL is a macro rule-based language called MRL <ref> [Wan90] </ref>. While MRL syntactically resembles EQL (enabling conditions of rules are based on logical expressions), its expressive power is more extensive because of the use of first-order logic and in that resembles OPS5 [For81].
Reference: [WM] <author> C.-K. Wang and A. K. Mok. </author> <title> The analysis of MRL: A real time rule-based system. </title> <note> To appear in J. </note> <institution> of Real-Time Systems. </institution>
Reference-contexts: While MRL syntactically resembles EQL (enabling conditions of rules are based on logical expressions), its expressive power is more extensive because of the use of first-order logic and in that resembles OPS5 [For81]. There are several methods proposed for the analysis of time-response properties of MRL programs <ref> [WM] </ref>, but not much work has been done in the synthesis field. So far, the similarities of the two languages were already used for adopting some of the algorithms previously developed for the EQL for the use for the MRL programs [WMC90].
Reference: [WMC90] <author> C.-K. Wang, A. K. Mok, and A. M. K. Cheng. </author> <title> MRL a real-time rule-based production system. </title> <booktitle> In Proc. IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 267-276, </pages> <address> Lake Buena Vista, Florida, </address> <month> December </month> <year> 1990. </year> <month> 88 </month>
Reference-contexts: So far, the similarities of the two languages were already used for adopting some of the algorithms previously developed for the EQL for the use for the MRL programs <ref> [WMC90] </ref>. Therefore, we believe that it is possible to use the ideas proposed in this thesis and construct the set of tools for the optimization of MRL programs. * In his Dissertation Cheng outlines the idea for the synthesis algorithm based on 83 the rule transition program graph.
Reference: [XH91] <author> J. Xu and K. Hwang. </author> <title> Mapping rule-base systems onto multicomputers using simulated annealing. </title> <journal> J. Parallel and Distr. Computing, </journal> <volume> 13(4) </volume> <pages> 442-445, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Rules that are enabled at a state of the system and are mutually independent can be fired in parallel. For both of the methods mentioned above an interesting algorithm introduced by Xu and Hwang in <ref> [XH91] </ref> for mapping rule-based systems onto multicomputers may be used. The method is based on static load balancing using the simulated annealing optimization method. The approach balances the initial rule distribution to avoid higher communication demand among processor nodes at run time. <p> Our synthesis method changes the enabling condition and in the future we may consider also the effect this has on the later parallel implementability. Specifically, we refer to the rule placement issues <ref> [XH91] </ref> and one of the possibilities would be to modify the cost function of the second phase of our optimization to include the notion of the degree of parallelization. * The reduced assumption-based finite transition system includes all the basic properties of the original rule-based system to reproduce an equivalent stable
Reference: [ZC93] <author> B. Zupan and A. M. K. Cheng. </author> <title> Tools for optimization of EQL programs: an implementation. </title> <note> Technical report (in preparation), </note> <institution> University of Houston, Texas, Real-Time Lab, Department of Computer Sciences, </institution> <month> November </month> <year> 1993. </year> <month> 89 </month>
Reference-contexts: Despite the fact that checking whether the group of rules belongs to a certain special form is not a very complex operation, the current implementation (see <ref> [ZC93] </ref>) builds the CON graph which does not require the additional checking of rule-sets G (CON). Two vertices representing the rules a and b in such CON graph are connected, iff: D1. rule a and b do not potentially disable each other, D2. <p> Two edges c 1 and c 2 are equivalent if rules in c 1 and rules in c 2 do not disable each other. 1 In the actual implementation <ref> [ZC93] </ref> these two phases are combined. The two-phase algorithm is easier to understand but is time inefficient as well. 62 As an illustration of the derivation of neighboring solution the reader may refer to the Fig.3.20. The complete neighboring solution algorithm is given in Fig.3.22. <p> ECC is expressed as the average number of two-valued operations (AND, OR, NOT) to evaluate the enabling condition. Constants c are weights and depending on the type of the optimization preferred can be set accordingly. Annealing Schedule The simulation annealing method proposed in this thesis is implemented <ref> [ZC93] </ref>, but its usage is still in experimental phase and the appropriate temperature schedule is yet to be determined. <p> The number of strongly connected components, their average size (number of rules) and the standard deviation of size are defined by user. 3. The program generated is stable and all rules in the strongly connected components belong to a specific special form (under current implementation <ref> [ZC93] </ref>, this is either A or B). The generator of EQL programs first builds an initial rule-based system, where the enabling condition and assignment part are randomly generated. This complies only with the first characteristics above. <p> The cost function comprises the characteristics mentioned above. For a detailed description of the cost function, derivation of the neighboring solution and annealing used the reader is referred to <ref> [ZC93] </ref>. Our optimization method focuses on the rules in a single strongly connected component which is treated independently by GAA. <p> There were no substantial differences between the breadth-first and the greedy method. Since they depend on the set of example programs, a much larger set (possible of few 100s reasonably complex EQL programs) is needed statistically to determine which method is better in which cases. The current implementation <ref> [ZC93] </ref> favors the breadth-first approach because of better synthesis-time performance. Namely, the depth first search has to test potentially more states before it determines the next best case to expand the transition system. <p> should integrate both into the existent General Analysis Tool and the optimization should then become an interactive process between the system analyzer (user) and the optimization program. 78 4.4 Iterative Refinement of the Reduced Transi- tion System We have implemented the basic algorithms for the derivation of a neighboring solution <ref> [ZC93] </ref>. The implementation was tested on the example systems introduced above and the results show that: 1. It is trivial to find a neighboring solution of the transition system with multiple-rule transitions. <p> Their methods have been already used for real-time programs verification and could be utilized 84 in our case as well. * The algorithms described in this thesis have been implemented on the UNIX Workstation environment and we have constructed a prototype that was used for the evaluation purposes <ref> [ZC93] </ref>. Our aim is to integrate the method into the existent general analysis tool so that our optimization tool would become the standard module in the Estella X-windows application. * Further to improve the performance of the implementation, the parallel hardware platforms have to be used.
References-found: 33

