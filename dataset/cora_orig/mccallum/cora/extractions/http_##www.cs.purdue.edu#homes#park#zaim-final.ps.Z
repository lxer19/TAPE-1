URL: http://www.cs.purdue.edu/homes/park/zaim-final.ps.Z
Refering-URL: http://www.cs.purdue.edu/homes/park/publ_regular.html
Root-URL: http://www.cs.purdue.edu
Email: heddaya@cs.bu.edu  park@cs.purdue.edu  
Title: Congestion Control for Asynchronous Parallel Computing on Workstation Networks  
Author: Abdelsalam Heddaya Kihong Park 
Keyword: Distributed parallel computing, congestion control, parallel iterative algorithms, communication architecture.  
Note: This research was supported in part by NSF grants IRI-9041581 and CDA-8920936. This author was additionally supported by NSF grant CCR-9204284.  
Address: Boston, MA 02215  West Lafayette, IN 47907  
Affiliation: Computer Science Department Boston University  Department of Computer Sciences Purdue University  
Abstract: Asynchronous parallel computing can result in high message generation rates, thus triggering network congestion. This paper investigates the network congestion problem that can result from asynchronous parallel programs' high message generation rates. First, we characterize the communication requirements of a large class of supercomputing applications falling under the category of fixed-point problems amenable to solution by parallel iterative methods. In particular, we concentrate on asynchronous iterative algorithms whose communication/computation ratio is especially high resulting in degraded effective throughput if communication is not managed properly. Second, we show the effects of network contention and asynchrony on application performance in a local-area network environment and investigate methods of solution. Our approach is based on a congestion control algorithm called Warp Control whose adaptive properties are exploited to yield significant performance enhancements when network contention is high. Although tested in a LAN environment for experimental control purposes, our solution follows the end-to-end paradigm and refrains from exploiting special MAC-layer properties to achieve applicability to general WAN environments. Third, we provide a framework wherein efficient congestion control can be facilitated, encompassing methods acting at the application layer as well as the transport/network layer, with emphasis on application-driven control. We conclude with a discussion of our experimental results and special issues arising in high-bandwidth ATM networks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Bala, I. Cidon, and K. Sohraby. </author> <title> Congestion control for high speed packet switched networks. </title> <booktitle> In Proc. IEEE INFOCOM '90, </booktitle> <pages> pages 520-526, </pages> <year> 1990. </year>
Reference-contexts: Congestion control in heterogenous, high-speed networks is a difficult problem aggravated by the high bandwidth-delay product and quality of service (QoS) requirements of real-time, multimedia traffic <ref> [1, 9, 10, 25] </ref>. One of the advantages of asynchronous iterative algorithms is that they do not require reliable message transmission.
Reference: [2] <author> Gerard M. Baudet. </author> <title> Asynchronous iterative methods for multiprocessors. </title> <journal> Journal of the Association of Computing Machinery, </journal> <volume> 25(2) </volume> <pages> 226-244, </pages> <year> 1978. </year>
Reference-contexts: A large subclass of such applications falls under the category of fixed point problems, a class that is amenable to parallel iterative methods, synchronous or asynchronous. These include dynamic programming, systems of linear equations, network flow problems, genetic algorithms, and ordinary differential equations, to name a few <ref> [2, 3] </ref>. This paper deals with the issue of how to control network congestion when mapping such applications onto workstation clusters linked by local and wide-area networks. <p> Nonetheless, a large class of problems have been proven to be amenable to solution by asynchronous iterative methods [3]. For a comparative analysis of these two methods, see <ref> [2, 3] </ref>. The importance of asynchronous methods lies in the elimination of the synchronization penalty 4 which can be severe in large-scale implementations. <p> A parallel iterative algorithm to solve the above equation is given by the fixed-point iteration x i = a ii i1 X a ij x j + j=i+1 With a suitable bound on the spectral radius of A, this iteration can be shown to converge when run asynchronously <ref> [2, 3] </ref>. In the implementation, we use this particular example to demonstrate the efficacy of congestion control. 5 2.2 Parallel Asynchronous Iterative Algorithms Let m represent the problem size 1 , and let n denote the number of nodes.
Reference: [3] <author> D. Bertsekas and J. Tsitsiklis. </author> <title> Parallel and Distributed Computation: Numerical Methods. </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference-contexts: A large subclass of such applications falls under the category of fixed point problems, a class that is amenable to parallel iterative methods, synchronous or asynchronous. These include dynamic programming, systems of linear equations, network flow problems, genetic algorithms, and ordinary differential equations, to name a few <ref> [2, 3] </ref>. This paper deals with the issue of how to control network congestion when mapping such applications onto workstation clusters linked by local and wide-area networks. <p> As with classical iteration methods such as Jacobi and Gauss-Seidel [22], convergence may not be guaranteed, and when both converge, the asynchronous iterative method often converges faster than the synchronous one. Nonetheless, a large class of problems have been proven to be amenable to solution by asynchronous iterative methods <ref> [3] </ref>. For a comparative analysis of these two methods, see [2, 3]. The importance of asynchronous methods lies in the elimination of the synchronization penalty 4 which can be severe in large-scale implementations. <p> Nonetheless, a large class of problems have been proven to be amenable to solution by asynchronous iterative methods [3]. For a comparative analysis of these two methods, see <ref> [2, 3] </ref>. The importance of asynchronous methods lies in the elimination of the synchronization penalty 4 which can be severe in large-scale implementations. <p> Thus asynchronous iterative algorithms are able to execute more iterations resulting in faster convergence other things being equal. Under certain conditions it can be proved that this is indeed the case <ref> [3] </ref>. It is not always the case, however, that executing more updates based on outdated information benefits convergence. The reduction in synchronization penalty does not come for free. The main drawback of asynchronous iterative methods over their synchronous counterpart is the increase in message generation rate. <p> A parallel iterative algorithm to solve the above equation is given by the fixed-point iteration x i = a ii i1 X a ij x j + j=i+1 With a suitable bound on the spectral radius of A, this iteration can be shown to converge when run asynchronously <ref> [2, 3] </ref>. In the implementation, we use this particular example to demonstrate the efficacy of congestion control. 5 2.2 Parallel Asynchronous Iterative Algorithms Let m represent the problem size 1 , and let n denote the number of nodes.
Reference: [4] <author> Kenneth P. Birman. </author> <title> The process group approach to reliable distributed computing. </title> <journal> Comm. ACM, </journal> <volume> 36(12) 37-53 and 103, </volume> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: The version of Mermera used to obtain the main experimental results is built on top of version 2.2.5 of the Isis toolkit for group communication <ref> [4] </ref> which provides several multicast protocols that support different message ordering properties.
Reference: [5] <author> K.P. Birman and T. Clark. </author> <title> Performance of the Isis distributed computing system. </title> <type> Technical Report TR-94-1432, </type> <institution> Cornell Univ., Computer Science Dept., </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: represented by the abscissa labeled (INITIAL) BUFFER SIZE which is a static buffer flushing scheme corresponding to the dynamic (i.e., adaptive) method described in Section 4.2. 5.2 Congestion Effect Whereas Figure 3 (right) depicts the high communication penalty associated with insufficiently controlled network congestion (note that Isis' native congestion control <ref> [5] </ref> was still active), Fig 15 caused by excessive asynchrony. ure 4 shows the efficacy of Warp Control at regulating message generation rate achieving improved application performance approaching the level of the low network contention case.
Reference: [6] <author> D.R. Boggs, J.C. Mogul, and C.A. Kent. </author> <title> Measured capacity of an Ethernet: myths and reality. </title> <booktitle> In Proc. ACM SIGCOMM '88, </booktitle> <pages> pages 222-234, </pages> <year> 1988. </year>
Reference-contexts: We note that there are several schemes for implementing a rate-controlled congestion control, the above methods just being two. In the context of Ethernet and the CSMA/CD protocol, maximum throughput is achieved when Ethernet frames are large <ref> [6] </ref>. Our particular implementation of Warp Control represents a customization reflecting the underlying LAN data link technology. We will use "message generation rate" interchangeably with the aggregation mechanism effect described above, keeping in mind that in the Ethernet context they are only qualitatively related.
Reference: [7] <author> C. Cap and V. Strumpen. </author> <title> Efficient parallel computing in distributed workstation environments. </title> <journal> Parallel Computing, </journal> <volume> 19 </volume> <pages> 1221-1234, </pages> <year> 1993. </year>
Reference-contexts: In particular, we focus on asynchronous iterative methods that admit non-blocking, unreliable communication primitives thereby inducing a high communication/computation ratio which can result in increased susceptibility to network congestion. Performance studies of LAN-based <ref> [7, 8, 15, 24] </ref> and WAN-based systems [30] have shown the importance of controlling network delay and throughput for improving application performance. This is even more pronounced for parallel asynchronous iterative algorithms due to their high communication/computation ratio, leading to the flooding of network resources if not managed properly.
Reference: [8] <author> A. Cheung and A. Reeves. </author> <title> High performance computing on a cluster of workstations. </title> <booktitle> In Proc. First International Symp. on High-Performance Distributed Computing, </booktitle> <pages> pages 152-160, </pages> <year> 1992. </year>
Reference-contexts: In particular, we focus on asynchronous iterative methods that admit non-blocking, unreliable communication primitives thereby inducing a high communication/computation ratio which can result in increased susceptibility to network congestion. Performance studies of LAN-based <ref> [7, 8, 15, 24] </ref> and WAN-based systems [30] have shown the importance of controlling network delay and throughput for improving application performance. This is even more pronounced for parallel asynchronous iterative algorithms due to their high communication/computation ratio, leading to the flooding of network resources if not managed properly.
Reference: [9] <author> R. Dighe, C. J. May, and G. Ramamurthy. </author> <title> Congestion avoidance strategies in broadband packet networks. </title> <booktitle> In Proc. IEEE INFOCOM '91, </booktitle> <pages> pages 295-303, </pages> <year> 1991. </year>
Reference-contexts: Congestion control in heterogenous, high-speed networks is a difficult problem aggravated by the high bandwidth-delay product and quality of service (QoS) requirements of real-time, multimedia traffic <ref> [1, 9, 10, 25] </ref>. One of the advantages of asynchronous iterative algorithms is that they do not require reliable message transmission.
Reference: [10] <author> A. E. Eckberg. </author> <title> B-ISDN/ATM traffic and congestion control. </title> <journal> IEEE Network, </journal> <pages> pages 28-37, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Congestion control in heterogenous, high-speed networks is a difficult problem aggravated by the high bandwidth-delay product and quality of service (QoS) requirements of real-time, multimedia traffic <ref> [1, 9, 10, 25] </ref>. One of the advantages of asynchronous iterative algorithms is that they do not require reliable message transmission.
Reference: [11] <author> A. Geist, A. Beguelin, J. Dongarra, W. Jiang, R. Manchek, and V. Sunderam. </author> <title> PVM: Parallel Virtual Machine. </title> <publisher> The MIT Press, </publisher> <year> 1994. </year> <month> 24 </month>
Reference-contexts: The interface can be accessed by the application directly for message-passing-based communication, or it can be further encapsulated to provide a software shared-memory environment. The interface functionality and specification is modular and generic, and it can be straightforwardly incorporated into other distributed computing environments (e.g., PVM <ref> [11] </ref>). This paper is an extension of previous work [15, 13] where the benefit of congestion control for solving parallel applications across an Ethernet LAN environment has been shown.
Reference: [12] <author> M. Gerla and L. Kleinrock. </author> <title> Flow control: a comparative survey. </title> <journal> IEEE Trans. Commun., </journal> <volume> COM-28:553-574, </volume> <year> 1980. </year>
Reference-contexts: One way of modeling congestion phenomena is via a load-throughput 8 function which relates effective throughput to offered load Q <ref> [12, 25] </ref>. Treating the effective bandwidth of a network as a service process with mean rate , the service rate = (Q) can be viewed as a function of load Q possessing a unimodal shape capturing the congestion effect [25]. a certain level.
Reference: [13] <author> A. Heddaya and K. Park. </author> <title> Mapping parallel iterative algorithms onto workstation networks. </title> <booktitle> In Proc. 3rd IEEE International Symp. on High-Performance Distributed Computing, </booktitle> <pages> pages 211-218, </pages> <year> 1994. </year>
Reference-contexts: The interface functionality and specification is modular and generic, and it can be straightforwardly incorporated into other distributed computing environments (e.g., PVM [11]). This paper is an extension of previous work <ref> [15, 13] </ref> where the benefit of congestion control for solving parallel applications across an Ethernet LAN environment has been shown. We formalize, integrate, and extend the previous results, putting application-oriented congestion control on an implementation-independent platform applicable to both message-passing and shared-memory distributed systems.
Reference: [14] <author> A. Heddaya and K. Park. </author> <title> Parallel computing on high-speed wide-area networks: a pricing policy for its communication needs. </title> <booktitle> In Proc. 3rd IEEE Workshop on the Architecture and Implementation of High Performance Communication Subsystems, </booktitle> <pages> pages 188-191, </pages> <year> 1995. </year>
Reference-contexts: For synchronous algorithms, the average delay manifests itself as synchronization penalty which can be shown to be "exponentially sensitive" in the number of nodes participating in the computation <ref> [14] </ref>. For asynchronous algorithms, processors do not need to wait for each other to proceed with the next iteration, and outdatedness of the messages is the main factor which impedes convergence. <p> This can be achieved either by directly accessing QoS guaranteed VBR/CBR service or by implementing reliable service over ABR traffic through the use of higher level protocols such as TCP. A method for facilitating efficient, cost-effective communication channels via ABR service for parallel distributed computation is described in <ref> [14, 26] </ref>. In an ideal world, congestion control is applied at the network interface layer, providing pre-negotiated/default levels of service priority and fairness, achieving maximal transparency with respect to the application layer. This also allows for inter-application congestion control ensuring that all traffic flows remain well-behaved. <p> The importance of asynchronous methods lies in the elimination of the synchronization penalty 4 which can be severe in large-scale implementations. In fact, under simplifying assumptions on the delay terms, it can be shown that synchronization penalty is "exponentially sensitive" in the number of nodes participating in the computation <ref> [14] </ref>. Thus asynchronous iterative algorithms are able to execute more iterations resulting in faster convergence other things being equal. Under certain conditions it can be proved that this is indeed the case [3]. It is not always the case, however, that executing more updates based on outdated information benefits convergence.
Reference: [15] <author> A. Heddaya, K. Park, and H. Sinha. </author> <title> Using Warp to control network contention in Mermera. </title> <booktitle> In Proc. 27th Hawaii International Conference on System Sciences, Maui, Hawaii, </booktitle> <pages> pages 96-105, </pages> <year> 1994. </year>
Reference-contexts: In particular, we focus on asynchronous iterative methods that admit non-blocking, unreliable communication primitives thereby inducing a high communication/computation ratio which can result in increased susceptibility to network congestion. Performance studies of LAN-based <ref> [7, 8, 15, 24] </ref> and WAN-based systems [30] have shown the importance of controlling network delay and throughput for improving application performance. This is even more pronounced for parallel asynchronous iterative algorithms due to their high communication/computation ratio, leading to the flooding of network resources if not managed properly. <p> The interface functionality and specification is modular and generic, and it can be straightforwardly incorporated into other distributed computing environments (e.g., PVM [11]). This paper is an extension of previous work <ref> [15, 13] </ref> where the benefit of congestion control for solving parallel applications across an Ethernet LAN environment has been shown. We formalize, integrate, and extend the previous results, putting application-oriented congestion control on an implementation-independent platform applicable to both message-passing and shared-memory distributed systems. <p> The experiments were carried out in the context of a shared-memory environment called Mermera <ref> [15, 16] </ref> in which Warp Control was incorporated as part of the message passing interface. The application tested was a parallel iterative linear equation solver, both synchronous and asynchronous.
Reference: [16] <author> A. Heddaya and H. Sinha. </author> <title> An overview of Mermera: a system and formalism for non-coherent distributed parallel memory. </title> <booktitle> In Proc. 26th Hawaii International Conference on System Sciences, Maui, Hawaii, </booktitle> <pages> pages 164-173, </pages> <year> 1993. </year>
Reference-contexts: The experiments were carried out in the context of a shared-memory environment called Mermera <ref> [15, 16] </ref> in which Warp Control was incorporated as part of the message passing interface. The application tested was a parallel iterative linear equation solver, both synchronous and asynchronous. <p> The remaining five workstations were dedicated to running the parallel linear equation solver on top of Mermera and Warp Control. The traffic generators ran at near maximum rate producing cross-traffic which were not subjected to congestion control. 4.1 Mermera Mermera <ref> [16] </ref> is a software shared memory system that provides a general-purpose environment for parallel computing on workstation networks with special support for asynchronous iterative programs. Processes comprising a parallel program reside on a specified group of nodes and they communicate with each other via shared-memory read/write primitives provided by Mermera.
Reference: [17] <author> P.W. Hutto and M. Ahamad. </author> <title> Slow memory: weakening consistency to enhance concurrency in distributed shared memories. </title> <booktitle> In Proc. 10th IEEE Intl. Conference on Distributed Computing Systems, </booktitle> <address> Paris, France, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: Processes comprising a parallel program reside on a specified group of nodes and they communicate with each other via shared-memory read/write primitives provided by Mermera. Several types of memory behavior are supported, one coherent (equivalent to sequential consistency), and two non-coherent: Pipelined Random Access Memory [21] and Slow Memory <ref> [17] </ref>. Mermera provides one read operation and three types of write operations: co write, pram write, and slow write. The slow write and read primitives essentially provide for asynchronous, unreliable (or best-effort) communication. Our test application is implemented so that it can run synchronously or asynchronously.
Reference: [18] <author> Van Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> In Proc. ACM SIGCOMM '88, </booktitle> <pages> pages 314-329, </pages> <year> 1988. </year>
Reference-contexts: If, in addition, reliable transport is implemented at higher layers of the protocol stack (e.g., TCP), this may result in a positive feedback loop eventually leading to congestion collapse <ref> [18] </ref>. One way of modeling congestion phenomena is via a load-throughput 8 function which relates effective throughput to offered load Q [12, 25].
Reference: [19] <author> H. Kim and D. Farber. </author> <title> The failure of conservative congestion control in large bandwidth-delay product networks. </title> <booktitle> In Proc. </booktitle> <volume> INET '95, </volume> <year> 1995. </year>
Reference-contexts: ) C r # ) " ) congestion " The slow start component of TCP Reno is a congestion control feature that attempts to break this cycle by dampening the dependence of the message generation rate i on C r , but at the cost of overly conservative bandwidth utilization <ref> [19] </ref>. We note that there is an alternative approach to congestion control called link-based control which tries to achieve reliable packet transport at the link level through the use of credit tokens that conserve traffic flow in a hop-by-hop fashion [20].
Reference: [20] <author> H. T. Kung, Trevor Blackwell, and Alan Chapman. </author> <title> Credit-based flow control for ATM networks: credit update protocol, adaptive credit allocation, and statistical multiplexing. </title> <booktitle> In Proc. SIGCOMM '94, </booktitle> <pages> pages 101-114, </pages> <year> 1994. </year>
Reference-contexts: We note that there is an alternative approach to congestion control called link-based control which tries to achieve reliable packet transport at the link level through the use of credit tokens that conserve traffic flow in a hop-by-hop fashion <ref> [20] </ref>. This paper follows the rate-based framework with congestion control affected at the end points of the network connections. Under asynchronous, unreliable communication, congestion control throttles the arrival rate to the network by discarding excess traffic.
Reference: [21] <author> R.J. Lipton and J.S. Sandberg. </author> <title> PRAM: a scalable shared memory. </title> <type> Technical Report CS-TR-180-88, </type> <institution> Princeton Univ., Dept. of Computer Science, </institution> <month> Sep. </month> <year> 1988. </year>
Reference-contexts: Processes comprising a parallel program reside on a specified group of nodes and they communicate with each other via shared-memory read/write primitives provided by Mermera. Several types of memory behavior are supported, one coherent (equivalent to sequential consistency), and two non-coherent: Pipelined Random Access Memory <ref> [21] </ref> and Slow Memory [17]. Mermera provides one read operation and three types of write operations: co write, pram write, and slow write. The slow write and read primitives essentially provide for asynchronous, unreliable (or best-effort) communication. Our test application is implemented so that it can run synchronously or asynchronously.
Reference: [22] <author> Melvin J. Maron. </author> <title> Numerical Analysis: A Practical Approach. </title> <publisher> Macmillan, </publisher> <year> 1982. </year> <month> 25 </month>
Reference-contexts: Otherwise, it is said to define an asynchronous iterative algorithm for solving fixed-point problem F . The iteration of F behaves differently under synchronous and asynchronous methods. As with classical iteration methods such as Jacobi and Gauss-Seidel <ref> [22] </ref>, convergence may not be guaranteed, and when both converge, the asynchronous iterative method often converges faster than the synchronous one. Nonetheless, a large class of problems have been proven to be amenable to solution by asynchronous iterative methods [3].
Reference: [23] <author> A. Mukherjee and J. Strikwerda. </author> <title> Analysis of dynamic congestion control protocols a Fokker-Planck approximation. </title> <booktitle> In Proc. ACM SIGCOMM '91, </booktitle> <pages> pages 159-169, </pages> <year> 1991. </year>
Reference-contexts: The network is shared by applications distributed over the n nodes, and their message generation rates are reflected via 1 ; : : : ; n . Figure 2 (left) is a schematic depiction of the network model. There exist several characterizations of network congestion and its causes <ref> [23, 27] </ref>. In a packet-switched network, if the network is over-extended by the volume of incoming traffic, its resources become tied up in unproductive work servicing packets that may be ultimately dropped due to buffer overflow and time-outs.
Reference: [24] <author> M. Parashar, S. Hariri, A. Mohamed, and G. Fox. </author> <title> A requirement analysis for high performance distributed computing over LAN's. </title> <booktitle> In Proc. First International Symp. on High-Performance Distributed Computing, </booktitle> <pages> pages 142-151, </pages> <year> 1992. </year>
Reference-contexts: In particular, we focus on asynchronous iterative methods that admit non-blocking, unreliable communication primitives thereby inducing a high communication/computation ratio which can result in increased susceptibility to network congestion. Performance studies of LAN-based <ref> [7, 8, 15, 24] </ref> and WAN-based systems [30] have shown the importance of controlling network delay and throughput for improving application performance. This is even more pronounced for parallel asynchronous iterative algorithms due to their high communication/computation ratio, leading to the flooding of network resources if not managed properly.
Reference: [25] <author> Kihong Park. </author> <title> Warp control: a dynamically stable congestion protocol and its analysis. </title> <journal> Journal of High Speed Networks, </journal> <volume> 2(4) </volume> <pages> 373-404, </pages> <year> 1993. </year>
Reference-contexts: Congestion control in heterogenous, high-speed networks is a difficult problem aggravated by the high bandwidth-delay product and quality of service (QoS) requirements of real-time, multimedia traffic <ref> [1, 9, 10, 25] </ref>. One of the advantages of asynchronous iterative algorithms is that they do not require reliable message transmission. <p> nk = m: With broadcasting, M and C s change to M / k = n 1 The actual problem size may be a function of m as in the linear equation example (quadratic). 2 A scheme that achieves fair allocation of bandwidth given multiple competing sessions is described in <ref> [25] </ref>. 6 M / m=n represents the most optimistic scenario with respect to broadcast cost such as when all nodes are connected to a single Ethernet. For general routing networks, the broadcast cost will be greater than O (1) depending on the topology. <p> One way of modeling congestion phenomena is via a load-throughput 8 function which relates effective throughput to offered load Q <ref> [12, 25] </ref>. Treating the effective bandwidth of a network as a service process with mean rate , the service rate = (Q) can be viewed as a function of load Q possessing a unimodal shape capturing the congestion effect [25]. a certain level. <p> Treating the effective bandwidth of a network as a service process with mean rate , the service rate = (Q) can be viewed as a function of load Q possessing a unimodal shape capturing the congestion effect <ref> [25] </ref>. a certain level. Two tasks need to be accomplished by the congestion control algorithm to optimize overall system performance. First, in the short run, = P n i=1 i must be matched to to achieve high utilization. <p> Thus the system needs to "monitor" the overall load, throttling when Q approaches a critical level. These two mechanisms are denoted rate matching and load matching, respectively <ref> [25] </ref>. In a local area network consisting of few nodes, the store-and-forward feature of general packet-switched networks becomes diminished, and network state is more directly related to instantaneous total arrival rate (t). Thus load matching is directly tied to rate matching and its short-term effects. <p> In the absence of operating system support for inter-application congestion control, per session/application implementations must be sought. We will show that in spite of the high level at which control is applied, significant performance gains are nonetheless obtained. 3.2 Warp Control Warp Control <ref> [25] </ref> is a distributed, end-to-end congestion protocol that uses a time-stamp based scheme to throttle arrival rates for achieving optimal utilization. Let = = denote network utilization. The protocol itself, excluding the control law, consists of a pair of encoding/decoding procedures which are described as follows. <p> hist [j]:last in) = (m ij :time stamp hist [j]:last out). 2. hist [j]:last in := t 2 . 3. hist [j]:last out := m ij :time stamp. 10 It can be shown under simplifying assumptions on N that the quantity warp ij as used in MDP approximates network utilization <ref> [25] </ref>. Notice that warp ij is a function of both i and j. <p> The control law given by (2) is called rate adjustment protocol (RAP). It can be shown <ref> [25] </ref> that the system is asymptotically stable achieving maximum utilization if the following condition holds: 0 &lt; * &lt; t where t is the average network delay, is the mean service rate, and c &gt; 0 is a fixed constant. <p> Thus, if network delay is high, the rate parameter * has to be sufficiently small to maintain stability. For a detailed analysis and treatment of related issues including load matching and fairness, see <ref> [25] </ref>. 4 Experimental Set-up In this section, we describe performance measurements that capture the behavior of a representative parallel iterative application implemented synchronously and asynchronously on a workstation network. <p> We note that the distribution of data to the workstations during the initialization phase can be 4 Intuitively, the quantity warp (see Section 3.2) is a measure of the relative change in network delay. A more detailed discussion can be found in <ref> [25] </ref>. 16 Under high network contention (right), absence of adequate congestion control results in high fluctuation of warp values indicating that the network is ill-behaved, significant (20%-40%) depending on the degree of parallelism. We have approached the initial data loading problem in two ways.
Reference: [26] <author> Kihong Park. </author> <title> Self-organized multi-class QoS provision for ABR traffic in ATM networks. </title> <booktitle> In Proc. 15th IEEE International Phoenix Conference on Computers and Communications, </booktitle> <pages> pages 446-453, </pages> <year> 1996. </year>
Reference-contexts: This can be achieved either by directly accessing QoS guaranteed VBR/CBR service or by implementing reliable service over ABR traffic through the use of higher level protocols such as TCP. A method for facilitating efficient, cost-effective communication channels via ABR service for parallel distributed computation is described in <ref> [14, 26] </ref>. In an ideal world, congestion control is applied at the network interface layer, providing pre-negotiated/default levels of service priority and fairness, achieving maximal transparency with respect to the application layer. This also allows for inter-application congestion control ensuring that all traffic flows remain well-behaved.
Reference: [27] <author> G. Ramamurthy and R. S. Dighe. </author> <title> Distributed source control: a network access approach to integrated broadband packet networks. </title> <booktitle> In Proc. IEEE INFOCOM '90, </booktitle> <pages> pages 896-907, </pages> <year> 1990. </year>
Reference-contexts: The network is shared by applications distributed over the n nodes, and their message generation rates are reflected via 1 ; : : : ; n . Figure 2 (left) is a schematic depiction of the network model. There exist several characterizations of network congestion and its causes <ref> [23, 27] </ref>. In a packet-switched network, if the network is over-extended by the volume of incoming traffic, its resources become tied up in unproductive work servicing packets that may be ultimately dropped due to buffer overflow and time-outs.
Reference: [28] <author> Yu Shashkin. </author> <title> Fixed Points, </title> <booktitle> volume 2 of Mathematical World. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1991. </year>
Reference-contexts: We conclude with a discussion of issues related to high-speed ATM networks and the extrapolation of our results to many-node workstation clusters. 2 Parallel Iterative Algorithms 2.1 Fixed-point Problems Many problems in mathematics, science, and engineering can be formulated as fixed-point problems. As an example <ref> [28] </ref>, to solve the scalar equation f (x) = 0, it suffices to find the fixed point of F (x) = x where F (x) f (x) + x.
Reference: [29] <author> Himanshu Sinha. Mermera: </author> <title> Non-coherent Distributed Shared Memory for Parallel Computing. </title> <type> PhD thesis, </type> <institution> Boston University, Computer Science Department, </institution> <address> 111 Cummington Street, Boston, MA 02215, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Arif Bhatti implemented the UDP version of Mermera, and with Sulaiman Mirdad, participated in its design. Figure 9 is 7 In the simplest configurations (e.g., low fan-in/fan-out ATM switch), SONET frames may exert an aggregation effect. 23 derived from Himanshu Sinha's Ph.D. thesis <ref> [29] </ref>. Hewlett-Packard's Metrix Network Systems, Inc. provided us with free use of their NetMetrix software.
Reference: [30] <author> Volker Strumpen. </author> <title> Parallel molecular sequence analysis on workstations in the Internet. </title> <type> Technical Report 93.28, </type> <institution> Department of Computer Science, University of Zurich, </institution> <year> 1993. </year>
Reference-contexts: In particular, we focus on asynchronous iterative methods that admit non-blocking, unreliable communication primitives thereby inducing a high communication/computation ratio which can result in increased susceptibility to network congestion. Performance studies of LAN-based [7, 8, 15, 24] and WAN-based systems <ref> [30] </ref> have shown the importance of controlling network delay and throughput for improving application performance. This is even more pronounced for parallel asynchronous iterative algorithms due to their high communication/computation ratio, leading to the flooding of network resources if not managed properly.
Reference: [31] <author> M. Wernik, O. Aboul-Magd, and H. Gilbert. </author> <title> Traffic management for B-ISDN services. </title> <journal> IEEE Network, </journal> <pages> pages 10-19, </pages> <month> September </month> <year> 1992. </year> <month> 26 </month>
Reference-contexts: Hence, conditional on the severity of the packet loss rate, they may do without the access to reserved, high-priority connections advocated for constant bit rate (CBR) and variable bit rate (VBR) traffic in asynchronous transfer mode (ATM) networks <ref> [31] </ref>. Instead, access to best-effort or available bit rate (ABR) service of the ATM framework may suffice, very much like how it is today with IP. For synchronous iterative algorithms, reliable message transmission is a requirement.
References-found: 31

