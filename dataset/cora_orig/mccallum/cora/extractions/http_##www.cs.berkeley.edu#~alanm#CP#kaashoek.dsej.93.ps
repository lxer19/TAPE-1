URL: http://www.cs.berkeley.edu/~alanm/CP/kaashoek.dsej.93.ps
Refering-URL: http://www.cs.berkeley.edu/~alanm/CP/bib.html
Root-URL: 
Email: Email: kaashoek@lcs.mit.edu, ast@cs.vu.nl, and versto@cs.vu.nl.  
Title: GROUP COMMUNICATION IN AMOEBA AND ITS APPLICATIONS  
Author: M. Frans Kaashoek Andrew S. Tanenbaum Kees Verstoep 
Address: Cambridge, MA  Amsterdam, The Netherlands  
Affiliation: M.I.T. Laboratory for Computer Science  Dept. of Math. and Comp. Sci. Vrije Universiteit  
Abstract: Unlike many other operating systems, Amoeba is a distributed operating system that provides group communication (i.e., one-to-many communication). We will discuss design issues for group communication, Amoeba's group system calls, and the protocols to implement group communication. To demonstrate that group communication is a useful abstraction, we will describe a design and implementation of a fault-tolerant directory service. We discuss two versions of the directory service: one with NonVolatile RAM (NVRAM) and one without NVRAM. We will give performance figures for both implementa tions.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki, ``Transis: </author> <title> A Communication Sub-System for High Availability,'' </title> <booktitle> Proc. 22nd International Symposium on Fault-Tolerant Computing, </booktitle> <address> Boston, MA, </address> <pages> pp. </pages> <month> 76-84 (June </month> <year> 1992). </year>
Reference-contexts: Implementation of Group Communication In this section we will describe the Amoeba group communication protocol. Many other protocols exist which implement similar semantics <ref> [5, 8, 12, 30, 26, 29, 38, 39, 1] </ref>. A detailed comparison between these, our and other protocols with respect to ordering semantics, fault tolerance and performance can be found in [18].
Reference: 2. <author> M. Baker, S. Asami, E. Deprit, J. Ousterhout, and M. Seltzer, </author> <title> ``Non-Volatile Memory for Fast, Reliable File Systems,'' </title> <booktitle> Proc. Fifth Int. Conf. on Architectural Support for Programming Language and Operating Systems, </booktitle> <address> Boston, MA, </address> <pages> pp. </pages> <month> 10-22 (Oct. </month> <year> 1992). </year>
Reference-contexts: Recovery is based on the protocol described by Skeen [34]. The main purpose of this section is to describe a fault-tolerant service based on group communication. Other projects have implemented similar services <ref> [25, 33, 15, 27, 7, 24, 2] </ref>. The organization of the group directory service is depicted in Figure 3. The directory service is currently built out of three directory servers, each using its own Bullet file server and disk server. A Bullet server and a disk server share one disk.
Reference: 3. <author> H.E. Bal, </author> <title> Programming Distributed Systems, </title> <publisher> Silicon Press, Summit, </publisher> <address> NJ (1990). </address>
Reference-contexts: Thus, an increase in fault tolerance is paid for by a decrease in performance. The tradeoff chosen is up to the user. 5. An Application of Group Communication: a Fault-tolerant Directory Service The group communication primitives have been used in parallel applications <ref> [3, 37] </ref>, and in a fault-tolerant implementation of the Orca programming language [19]. In this section, we discuss a fault-tolerant design and implementation of Amoeba's directory service. The directory service exemplifies distributed services that provide high reliability and availability by replicating data.
Reference: 4. <author> K.P. Birman and T.A. Joseph, </author> <title> ``Reliable Communication in the Presence of Failures,'' </title> <journal> ACM Trans. Comp. Syst. </journal> <volume> 5(1), </volume> <pages> pp. </pages> <month> 47-76 (Feb. </month> <year> 1987). </year>
Reference-contexts: No guarantees about ordering are given. Group communication in the V system is unreliable. Users can, however, build their own group communication primitives with the basic primitives. They could, for example, implement a protocol with reliable communication and total ordering as a library package. In the Isis system <ref> [4] </ref>, messages are sent to a group identifier or to a list of addresses. When sending a message, a user specifies how many replies are expected. Messages can be totally-ordered, even for groups that overlap.
Reference: 5. <author> K.P. Birman, A. Schiper, and P. Stephenson, </author> <title> ``Lightweight Causal and Atomic Group Multicast,'' </title> <journal> ACM Trans. Comp. Syst. </journal> <volume> 9(3), </volume> <pages> pp. </pages> <month> 272-314 (Aug. </month> <year> 1991). </year>
Reference-contexts: Another important design decision in group communication is the ordering of messages sent to a group. Roughly speaking, there are 4 possible orderings: no ordering, FIFO ordering, causal ordering, and total ordering <ref> [5] </ref>. No ordering is easy to understand and implement, but unfortunately makes programming often harder. FIFO ordering guarantees that all messages from a member are delivered in the order in which they were sent. Causal ordering guarantees that all messages that are related are ordered. <p> Because these semantics are hard to implement efficiently, Isis also provides primitives that give weaker semantics, but better performance. It is up to the programmer to decide which primitive is required. Recently the protocols for Isis have been redesigned <ref> [5] </ref>. The system is now completely based on a broadcast primitive that provides causal ordering. The implementation of this primitive uses reliable point-to-point communication. The protocol for totally-ordered broadcast is based on causal broadcast. The new version of Isis no longer supports a total ordering for overlapping groups. 3. <p> Implementation of Group Communication In this section we will describe the Amoeba group communication protocol. Many other protocols exist which implement similar semantics <ref> [5, 8, 12, 30, 26, 29, 38, 39, 1] </ref>. A detailed comparison between these, our and other protocols with respect to ordering semantics, fault tolerance and performance can be found in [18].
Reference: 6. <author> A.D. Birrell and B.J. Nelson, </author> <title> ``Implementing Remote Procedure Calls,'' </title> <journal> ACM Trans. Comp. Syst. </journal> <volume> 2(1), </volume> <pages> pp. </pages> <month> 39-59 (Feb. </month> <year> 1984). </year>
Reference-contexts: 1. Introduction Most current distributed operating systems provide only Remote Procedure Call (RPC) <ref> [6] </ref>. The idea is to hide the message passing, and make the communication look like an ordinary procedure call (see Figure 1).
Reference: 7. <author> J.J. Bloch, D.S. Daniels, and A.Z. Spector, </author> <title> ``A Weighted Voting Algorithm for Replicated Directories,'' </title> <journal> Journal of the ACM 34(4), </journal> <pages> pp. </pages> <month> 859-909 (Oct. </month> <year> 1987). </year>
Reference-contexts: Recovery is based on the protocol described by Skeen [34]. The main purpose of this section is to describe a fault-tolerant service based on group communication. Other projects have implemented similar services <ref> [25, 33, 15, 27, 7, 24, 2] </ref>. The organization of the group directory service is depicted in Figure 3. The directory service is currently built out of three directory servers, each using its own Bullet file server and disk server. A Bullet server and a disk server share one disk.
Reference: 8. <author> J. Chang and N.F. Maxemchuk, </author> <title> ``Reliable Broadcast Protocols,'' </title> <journal> ACM Trans. Comp. Syst. </journal> <volume> 2(3), </volume> <pages> pp. </pages> <month> 251-273 (August </month> <year> 1984). </year>
Reference-contexts: Implementation of Group Communication In this section we will describe the Amoeba group communication protocol. Many other protocols exist which implement similar semantics <ref> [5, 8, 12, 30, 26, 29, 38, 39, 1] </ref>. A detailed comparison between these, our and other protocols with respect to ordering semantics, fault tolerance and performance can be found in [18].
Reference: 9. <author> D.R. Cheriton and W. Zwaenepoel, </author> <title> ``Distributed Process Groups in the V kernel,'' </title> <journal> ACM Trans. Comp. Syst. </journal> <volume> 3(2), </volume> <pages> pp. </pages> <month> 77-107 (May </month> <year> 1985). </year>
Reference-contexts: There are four broad categories of what the sender can expect: no responses, a single response, many responses, and all responses. Operating systems that integrate group communication and RPC completely support all four choices <ref> [9] </ref>. The last design decision specific to group communication is group structure. Groups can be either closed or open [23]. In a closed group, only members can send messages to the group. In an open group, nonmembers may also send messages to the group. <p> All choices discussed in this section (none, FIFO, causal, and total ordering) are possible. To make these design decisions more concrete, we briefly discuss two systems that support group communication. Both systems support open dynamic groups, but differ in their semantics for reliability and ordering. In the V system <ref> [9] </ref>, groups are identified with a group identifier. If two processes concurrently broadcast two messages, A and B, respectively, some of the members may receive A first and others may receive B first. No guarantees about ordering are given. Group communication in the V system is unreliable.
Reference: 10. <author> D.S. Daniels, A.Z. Spector, and D.S. Thompson, </author> <title> ``Distributed Logging for Transaction Processing,'' </title> <booktitle> Proc. ACM SIGMOD 1987 Annual Conference, </booktitle> <address> San Francisco, CA, </address> <pages> pp. </pages> <month> 82-96 (May </month> <year> 1987). </year>
Reference-contexts: Because NVRAM is a reliable medium, this implementation provides the same degree of fault tolerance as the other implementations, while the performance is much better. A similar optimization has been used in <ref> [10, 24, 14] </ref>. Using NVRAM, some sequences of directory operations do not require any disk operations at all. Consider the use of /tmp. A file written in /tmp is often deleted shortly after it is used.
Reference: 11. <author> A. El Abbadi, D. Skeen, and F. Cristian, </author> <title> ``An Efficient, Fault-Tolerant Algorithm for Replicated Data Management,'' </title> <booktitle> Proc. Fifth Symposium on Principles of Database Systems, </booktitle> <address> Portland, OR, </address> <pages> pp. </pages> <month> 215-229 (March </month> <year> 1985). </year>
Reference-contexts: The group directory service is triplicated (though four or more replicas are also possible, without changing the protocol) and uses active replication. Also, it allows network partitions. To keep the copies consistent, it uses a modified version of read-one write-all policy, called accessible copies <ref> [11] </ref>. Recovery is based on the protocol described by Skeen [34]. The main purpose of this section is to describe a fault-tolerant service based on group communication. Other projects have implemented similar services [25, 33, 15, 27, 7, 24, 2].
Reference: 12. <author> E.N. Elnozahy and W. Zwaenepoel, </author> <title> ``Replicated Distributed Processes in Manetho,'' </title> <booktitle> Proc. 22nd International Symposium on Fault-Tolerant Computing, </booktitle> <address> Boston, MA, </address> <pages> pp. </pages> <month> 18-27 (July </month> <year> 1992). </year>
Reference-contexts: Implementation of Group Communication In this section we will describe the Amoeba group communication protocol. Many other protocols exist which implement similar semantics <ref> [5, 8, 12, 30, 26, 29, 38, 39, 1] </ref>. A detailed comparison between these, our and other protocols with respect to ordering semantics, fault tolerance and performance can be found in [18].
Reference: 13. <author> R. Gueth, J. Kriz, and S. Zueger, </author> <title> ``Broadcasting Source-Addressed Messages,'' </title> <booktitle> Proc. Fifth International Conference on Distributed Computing Systems, </booktitle> <address> Denver, </address> <publisher> CO, </publisher> <pages> pp. </pages> <month> 108-115 </month> <year> (1985). </year>
Reference-contexts: A second method is to use a single address for the whole group. This method saves bandwidth and also allows a process to send a message without knowing which processes are members of the group. Two less common addressing methods are source addressing <ref> [13] </ref>, and functional addressing [16]. Using source addressing, a process accepts a message if the source is a member of the - 4 - group. Using functional addressing, a process accepts a message if a user-defined function on the message evaluates to true.
Reference: 14. <author> S. Hariri, A. Choudhary, and B. Sarikaya, </author> <title> ``Architectural Support for Designing Fault-Tolerant Open Distributed Systems,'' </title> <booktitle> IEEE Computer 25(6), </booktitle> <pages> pp. </pages> <month> 50-61 (July </month> <year> 1992). </year>
Reference-contexts: Because NVRAM is a reliable medium, this implementation provides the same degree of fault tolerance as the other implementations, while the performance is much better. A similar optimization has been used in <ref> [10, 24, 14] </ref>. Using NVRAM, some sequences of directory operations do not require any disk operations at all. Consider the use of /tmp. A file written in /tmp is often deleted shortly after it is used.
Reference: 15. <author> A. Hisgen, A.D. Birrell, C. Jerian, T. Mann, M. Schroeder, and C. Swart, </author> <title> ``Granularity and Semantic Level of Replication in the Echo Distributed File System,'' </title> <journal> IEEE TCOS Newsletter 4(3), </journal> <pages> pp. </pages> <month> 30-32 </month> <year> (1990). </year>
Reference-contexts: Recovery is based on the protocol described by Skeen [34]. The main purpose of this section is to describe a fault-tolerant service based on group communication. Other projects have implemented similar services <ref> [25, 33, 15, 27, 7, 24, 2] </ref>. The organization of the group directory service is depicted in Figure 3. The directory service is currently built out of three directory servers, each using its own Bullet file server and disk server. A Bullet server and a disk server share one disk.
Reference: 16. <author> L. Hughes, </author> <title> ``A Multicast Interface for UNIX 4.3,'' </title> <journal> Software Practice and Experience 18(1), </journal> <pages> pp. </pages> <month> 15-27 (Jan. </month> <year> 1988). </year>
Reference-contexts: A second method is to use a single address for the whole group. This method saves bandwidth and also allows a process to send a message without knowing which processes are members of the group. Two less common addressing methods are source addressing [13], and functional addressing <ref> [16] </ref>. Using source addressing, a process accepts a message if the source is a member of the - 4 - group. Using functional addressing, a process accepts a message if a user-defined function on the message evaluates to true.
Reference: 17. <author> L. Hughes, </author> <title> ``Multicast Response Handling Taxonomy,'' </title> <journal> Computer Communications 12(1), </journal> - <pages> 16 - pp. </pages> <month> 39-46 (Feb. </month> <year> 1989). </year>
Reference-contexts: With atomic delivery either all processes receive it or none do. For many applications atomic delivery is the ideal semantics, but is harder to implement if processors can fail. Item five, response semantics deals with what the sending process expects from the receiving processes <ref> [17] </ref>. There are four broad categories of what the sender can expect: no responses, a single response, many responses, and all responses. Operating systems that integrate group communication and RPC completely support all four choices [9]. The last design decision specific to group communication is group structure.
Reference: 18. <author> M.F. Kaashoek, </author> <title> ``Group Communication in Distributed Computer Systems,'' </title> <type> Ph.D. thesis, </type> <institution> Vrije Universiteit, </institution> <address> Amsterdam (Dec. </address> <year> 1992). </year>
Reference-contexts: Many other protocols exist which implement similar semantics [5, 8, 12, 30, 26, 29, 38, 39, 1]. A detailed comparison between these, our and other protocols with respect to ordering semantics, fault tolerance and performance can be found in <ref> [18] </ref>. The protocol to be described runs inside the kernel and is accessible through the primitives described in the previous section. It assumes that unreliable message passing between processes is possible; fragmentation, reassembly, and routing of messages are done at lower layers in the kernel [21]. <p> The only difference is that it is currently performing the sequencer function. Basic protocol A brief description of the protocol is as follows (a complete description is given in <ref> [18] </ref> ). When a group member calls SendToGroup to send a message, M, it hands the message to its kernel and is blocked. The kernel encapsulates M in an ordinary point-to-point message and sends it to the sequencer.
Reference: 19. <author> M.F. Kaashoek, R. Michiels, H.E. Bal, </author> <title> and A.S. Tanenbaum, ``Transparent Fault-tolerance in Parallel Orca Programs,'' </title> <booktitle> Proc. Symposium on Experiences with Distributed and Multiprocessor Systems III, </booktitle> <address> Newport Beach, CA, </address> <pages> pp. </pages> <month> 297-312 (March </month> <year> 1992). </year>
Reference-contexts: The tradeoff chosen is up to the user. 5. An Application of Group Communication: a Fault-tolerant Directory Service The group communication primitives have been used in parallel applications [3, 37], and in a fault-tolerant implementation of the Orca programming language <ref> [19] </ref>. In this section, we discuss a fault-tolerant design and implementation of Amoeba's directory service. The directory service exemplifies distributed services that provide high reliability and availability by replicating data. For example, Amoeba's Bullet file service [31], is currently also being made fault-tolerant using active replication and group communication.
Reference: 20. <author> M.F. Kaashoek, A.S. Tanenbaum, and K. Verstoep, </author> <title> ``An Experimental Comparison of Remote Procedure Call and Group Communication,'' </title> <booktitle> Proc. Fifth ACM SIGOPS European Workshop , Le Mont Saint-Michel, </booktitle> <address> France (Sept. </address> <year> 1992). </year>
Reference-contexts: We will now discuss the design and implementation of a directory service based on group communication. A comparison of the two directory services can be found in <ref> [20] </ref>. The group directory service is triplicated (though four or more replicas are also possible, without changing the protocol) and uses active replication. Also, it allows network partitions. To keep the copies consistent, it uses a modified version of read-one write-all policy, called accessible copies [11].
Reference: 21. <author> M.F. Kaashoek, R. van Renesse, H. van Staveren, </author> <title> and A.S. Tanenbaum, ``FLIP: an Inter-network Protocol for Supporting Distributed Systems,'' </title> <journal> ACM Trans. Comp. Syst. </journal> <month> (Feb. </month> <year> 1993). </year>
Reference-contexts: The protocol to be described runs inside the kernel and is accessible through the primitives described in the previous section. It assumes that unreliable message passing between processes is possible; fragmentation, reassembly, and routing of messages are done at lower layers in the kernel <ref> [21] </ref>. The protocol performs best on a network that supports hardware multicast. Lower layers, however, treat multicast as an optimization of sending point-to-point messages; if multi-cast is not available, then point-to-point communication will be used.
Reference: 22. <author> H.T. Kung, </author> <title> ``Gigabit Local Area Networks: a Systems Perspective,'' </title> <journal> IEEE Communications Magazine 30(4), </journal> <pages> pp. </pages> <month> 79-89 (April </month> <year> 1992). </year>
Reference-contexts: Using multi-cast communication, messages can be sent exactly to the group of processes that are interested in receiving them. Future networks, like Gigabit LANs, are also likely to implement broadcasting and/or multicasting to support high-performance applications such as multimedia <ref> [22] </ref>. The protocol presented in this paper for group communication uses the hardware multicast capability of a network, if one exists. Otherwise, it uses broadcast messages or point-to-point messages, depending on the size of the group and the availability of broadcast communication.
Reference: 23. <author> L. Liang, S.T. Chanson, and G.W. Neufeld, </author> <title> ``Process Groups and Group Communication: Classification and Requirements,'' </title> <journal> IEEE Computer 23(2) (Feb. </journal> <year> 1990). </year>
Reference-contexts: Operating systems that integrate group communication and RPC completely support all four choices [9]. The last design decision specific to group communication is group structure. Groups can be either closed or open <ref> [23] </ref>. In a closed group, only members can send messages to the group. In an open group, nonmembers may also send messages to the group. In addition, groups can be static or dynamic.
Reference: 24. <author> B. Liskov, S. Ghemawat, R. Gruber, P. Johnson, L. Shrira, and M. Williams, </author> <title> ``Replication in the Harp File System,'' </title> <booktitle> Proc. Thirteenth Symposium on Operating System Principles, </booktitle> <address> Pacific Grove, CA, </address> <pages> pp. </pages> <month> 226-238 (Oct. </month> <year> 1991). </year>
Reference-contexts: Recovery is based on the protocol described by Skeen [34]. The main purpose of this section is to describe a fault-tolerant service based on group communication. Other projects have implemented similar services <ref> [25, 33, 15, 27, 7, 24, 2] </ref>. The organization of the group directory service is depicted in Figure 3. The directory service is currently built out of three directory servers, each using its own Bullet file server and disk server. A Bullet server and a disk server share one disk. <p> Because NVRAM is a reliable medium, this implementation provides the same degree of fault tolerance as the other implementations, while the performance is much better. A similar optimization has been used in <ref> [10, 24, 14] </ref>. Using NVRAM, some sequences of directory operations do not require any disk operations at all. Consider the use of /tmp. A file written in /tmp is often deleted shortly after it is used.
Reference: 25. <author> K. Marzullo and F. Schmuck, </author> <title> ``Supplying High Availability with a Standard Network File System,'' </title> <booktitle> Proc. Eighth International Conference on Distributed Computing Systems, </booktitle> <address> San Jose, CA, </address> <pages> pp. </pages> <month> 447-453 (June </month> <year> 1988). </year>
Reference-contexts: Recovery is based on the protocol described by Skeen [34]. The main purpose of this section is to describe a fault-tolerant service based on group communication. Other projects have implemented similar services <ref> [25, 33, 15, 27, 7, 24, 2] </ref>. The organization of the group directory service is depicted in Figure 3. The directory service is currently built out of three directory servers, each using its own Bullet file server and disk server. A Bullet server and a disk server share one disk.
Reference: 26. <author> P.M. Melliar-Smith, L.E. Moser, and V. Agrawala, </author> <title> ``Broadcast Protocols for Distributed Systems,'' </title> <journal> IEEE Trans. Parallel and Distributed Systems 1(1), </journal> <pages> pp. </pages> <month> 17-25 (Jan. </month> <year> 1990). </year>
Reference-contexts: Implementation of Group Communication In this section we will describe the Amoeba group communication protocol. Many other protocols exist which implement similar semantics <ref> [5, 8, 12, 30, 26, 29, 38, 39, 1] </ref>. A detailed comparison between these, our and other protocols with respect to ordering semantics, fault tolerance and performance can be found in [18].
Reference: 27. <author> S. Mishra, L.L. Peterson, and R.D. Schlichting, </author> <title> ``Implementing Fault-Tolerant Replicated Objects Using Psync,'' </title> <booktitle> Proc. Eighth Symposium on Reliable Distributed Systems, </booktitle> <address> Seattle, WA (Oct. </address> <year> 1989). </year>
Reference-contexts: Recovery is based on the protocol described by Skeen [34]. The main purpose of this section is to describe a fault-tolerant service based on group communication. Other projects have implemented similar services <ref> [25, 33, 15, 27, 7, 24, 2] </ref>. The organization of the group directory service is depicted in Figure 3. The directory service is currently built out of three directory servers, each using its own Bullet file server and disk server. A Bullet server and a disk server share one disk.
Reference: 28. <author> S.J. Mullender, G. van Rossum, A.S. Tanenbaum, R. van Renesse, and H. van Staveren, </author> <title> ``Amoeba: A Distributed Operating System for the 1990s,'' </title> <booktitle> IEEE Computer 23(5), </booktitle> <pages> pp. </pages> <month> 44-53 (May </month> <year> 1990). </year>
Reference-contexts: The implementation of this primitive uses reliable point-to-point communication. The protocol for totally-ordered broadcast is based on causal broadcast. The new version of Isis no longer supports a total ordering for overlapping groups. 3. Group Communication in Amoeba Amoeba is a distributed operating system based on the client/server model <ref> [36, 28] </ref>. Services in Amoeba are addressed by ports, which are large random numbers. When a service is started, it generates a new port and registers the port with the directory service.
Reference: 29. <author> S. Navaratnam, S. Chanson, and G. Neufeld, </author> <title> ``Reliable Group Communication in Distributed Systems,'' </title> <booktitle> Proc. Eighth International Conference on Distributed Computing Systems, </booktitle> <address> San Jose, CA, </address> <pages> pp. </pages> <month> 439-446 (June </month> <year> 1988). </year>
Reference-contexts: Implementation of Group Communication In this section we will describe the Amoeba group communication protocol. Many other protocols exist which implement similar semantics <ref> [5, 8, 12, 30, 26, 29, 38, 39, 1] </ref>. A detailed comparison between these, our and other protocols with respect to ordering semantics, fault tolerance and performance can be found in [18].
Reference: 30. <author> L.L. Peterson, N.C. Buchholtz, and R.D. Schlichting, </author> <title> ``Preserving and Using Context Information in IPC,'' </title> <journal> ACM Trans. Comp. Syst. </journal> <volume> 7(3), </volume> <pages> pp. </pages> <month> 217-246 (Aug. </month> <year> 1989). </year>
Reference-contexts: Implementation of Group Communication In this section we will describe the Amoeba group communication protocol. Many other protocols exist which implement similar semantics <ref> [5, 8, 12, 30, 26, 29, 38, 39, 1] </ref>. A detailed comparison between these, our and other protocols with respect to ordering semantics, fault tolerance and performance can be found in [18].
Reference: 31. <author> R. van Renesse, A. S. Tanenbaum, and A. Wilschut, </author> <title> ``The Design of a High-Performance File Server,'' </title> <booktitle> Proc. Ninth International Conference on Distributed Computing Systems , Newport Beach, </booktitle> <address> CA, </address> <pages> pp. </pages> <month> 22-27 (June </month> <year> 1989). </year>
Reference-contexts: In this section, we discuss a fault-tolerant design and implementation of Amoeba's directory service. The directory service exemplifies distributed services that provide high reliability and availability by replicating data. For example, Amoeba's Bullet file service <ref> [31] </ref>, is currently also being made fault-tolerant using active replication and group communication. The directory service is a vital service in the Amoeba distributed operating system [32]. It provides among other things a mapping from ASCII names to capabilities.
Reference: 32. <author> R. van Renesse, </author> <title> ``The Functional Processing Model,'' </title> <type> Ph.D. Thesis, </type> <institution> Vrije Universiteit, </institution> <address> Amsterdam (1989). </address>
Reference-contexts: The directory service exemplifies distributed services that provide high reliability and availability by replicating data. For example, Amoeba's Bullet file service [31], is currently also being made fault-tolerant using active replication and group communication. The directory service is a vital service in the Amoeba distributed operating system <ref> [32] </ref>. It provides among other things a mapping from ASCII names to capabilities. In its simplest form a directory is basically a table with 2 columns: one storing the ASCII string and one storing the corresponding capability. Capabilities in Amoeba identify an object (e.g., a file). <p> The set of capabilities a user possesses determines which objects it can access and which not. The directory service allows the users to store these capabilities under ASCII names to make life easier for them. The previous design and implementation of the directory service is based on RPC <ref> [32] </ref>. The RPC directory service is duplicated and recovers therefore only from one processor failure. - 10 - Furthermore, it cannot tolerate network partitions. We will now discuss the design and implementation of a directory service based on group communication.
Reference: 33. <author> M. Satyanarayanan, </author> <title> ``Scalable, Secure, and Highly Available Distributed File Access,'' </title> <booktitle> IEEE Computer 23(5), </booktitle> <pages> pp. </pages> <month> 9-22 (May </month> <year> 1990). </year>
Reference-contexts: Recovery is based on the protocol described by Skeen [34]. The main purpose of this section is to describe a fault-tolerant service based on group communication. Other projects have implemented similar services <ref> [25, 33, 15, 27, 7, 24, 2] </ref>. The organization of the group directory service is depicted in Figure 3. The directory service is currently built out of three directory servers, each using its own Bullet file server and disk server. A Bullet server and a disk server share one disk.
Reference: 34. <author> D. Skeen, </author> <title> ``Determining the Last Process to Fail,'' </title> <journal> ACM Trans. Comp. Syst. </journal> <volume> 3(1), </volume> <pages> pp. </pages> <month> 15-30 (Feb. </month> <year> 1985). </year>
Reference-contexts: Also, it allows network partitions. To keep the copies consistent, it uses a modified version of read-one write-all policy, called accessible copies [11]. Recovery is based on the protocol described by Skeen <ref> [34] </ref>. The main purpose of this section is to describe a fault-tolerant service based on group communication. Other projects have implemented similar services [25, 33, 15, 27, 7, 24, 2]. The organization of the group directory service is depicted in Figure 3. <p> It is the latter requirement that makes recovery of the group service complicated. During recovery the servers need an algorithm to determine which servers failed last. Such an algorithm exists; it is due to Skeen <ref> [34] </ref> and it works as follows. Each server keeps a mourned set of servers that crashed before it. When a server starts recovering, it sets the new group to only itself. Then, it exchanges with all other alive servers its mourned set.
Reference: 35. <author> A.S. Tanenbaum, </author> <title> Computer Networks 2nd ed., </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ - 17 </address> - 
Reference-contexts: The problem of ordering is not restricted to point-to-point communication, however. Many network designers have realized that group communication is an important tool for building distributed applications; broadcast communication is provided by many networks, including LANs, geosynchronous satellites, and cellular radio systems <ref> [35] </ref>. Several commonly used LANs, such as Ethernet and some rings, even provide multicast communication. Using multi-cast communication, messages can be sent exactly to the group of processes that are interested in receiving them.
Reference: 36. <author> A.S. Tanenbaum, R. van Renesse, H. van Staveren, G. Sharp, S.J Mullender, A. Jansen, and G. van Rossum, </author> <title> ``Experiences with the Amoeba Distributed Operating System,'' </title> <booktitle> Com-mun. ACM 33(12), </booktitle> <pages> pp. </pages> <month> 46-63 (Dec. </month> <year> 1990). </year>
Reference-contexts: The implementation of this primitive uses reliable point-to-point communication. The protocol for totally-ordered broadcast is based on causal broadcast. The new version of Isis no longer supports a total ordering for overlapping groups. 3. Group Communication in Amoeba Amoeba is a distributed operating system based on the client/server model <ref> [36, 28] </ref>. Services in Amoeba are addressed by ports, which are large random numbers. When a service is started, it generates a new port and registers the port with the directory service.
Reference: 37. <author> A.S. Tanenbaum, M.F. Kaashoek, and H.E. Bal, </author> <title> ``Parallel Programming Using Shared Objects and Broadcasting,'' </title> <booktitle> IEEE Computer 25 (Aug. </booktitle> <year> 1992). </year>
Reference-contexts: Thus, an increase in fault tolerance is paid for by a decrease in performance. The tradeoff chosen is up to the user. 5. An Application of Group Communication: a Fault-tolerant Directory Service The group communication primitives have been used in parallel applications <ref> [3, 37] </ref>, and in a fault-tolerant implementation of the Orca programming language [19]. In this section, we discuss a fault-tolerant design and implementation of Amoeba's directory service. The directory service exemplifies distributed services that provide high reliability and availability by replicating data.
Reference: 38. <author> L.C.N. Tseung and K-C. Yu, </author> <title> ``The implementation of Guaranteed, Reliable, Secure Broadcast Networks,'' </title> <booktitle> 1990 ACM Eighteenth Annual Computer Science Conference , Washington D.C., </booktitle> <pages> pp. </pages> <month> 259-266 (Feb. </month> <year> 1990). </year>
Reference-contexts: Implementation of Group Communication In this section we will describe the Amoeba group communication protocol. Many other protocols exist which implement similar semantics <ref> [5, 8, 12, 30, 26, 29, 38, 39, 1] </ref>. A detailed comparison between these, our and other protocols with respect to ordering semantics, fault tolerance and performance can be found in [18].
Reference: 39. <author> P. Verissimo, L. Rodrigues, and M. Baptista, </author> <title> ``AMp: a Highly Parallel Atomic Multicast Protocol,'' </title> <booktitle> Proc. SIGCOMM 89, </booktitle> <address> Austin, TX, </address> <pages> pp. </pages> <month> 83-93 (Sept. </month> <year> 1989). </year>
Reference-contexts: Implementation of Group Communication In this section we will describe the Amoeba group communication protocol. Many other protocols exist which implement similar semantics <ref> [5, 8, 12, 30, 26, 29, 38, 39, 1] </ref>. A detailed comparison between these, our and other protocols with respect to ordering semantics, fault tolerance and performance can be found in [18].
References-found: 39

