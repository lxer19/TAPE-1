URL: http://www-cad.eecs.berkeley.edu/~shaz/cav98.mocha.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/~shaz/publications.html
Root-URL: http://www.cs.berkeley.edu
Email: alur@cis.upenn.edu  ftah,fmang,shaz,sriramr,serdarg@eecs.berkeley.edu  
Phone: 2  
Title: MOCHA: Modularity in Model Checking  
Author: R. Alur T.A. Henzinger F.Y.C. Mang S. Qadeer S.K. Rajamani and S. Tasiran 
Address: Philadelphia, PA 19104.  Murray Hill, NJ 07974.  Berkeley, CA 94720.  
Affiliation: 1 Computer Information Science Department, University of Pennsylvania,  Computing Science Research Center, Bell Laboratories,  Electrical Engineering Computer Sciences Department, University of California,  
Abstract-found: 0
Intro-found: 1
Reference: [AD94] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 126, </volume> <pages> pages 183235, </pages> <year> 1994. </year>
Reference-contexts: The reach-ability analysis of timed modules is performed by automatically synthesizing a monitor process that restricts the state exploration to only those trajectories that satisfy the timing constraints on the clock variables, as in the analysis of timed automata <ref> [AD94] </ref>.
Reference: [AH96] <author> R. Alur and T.A. Henzinger. </author> <title> Reactive modules. </title> <booktitle> In Proc. 11th IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 207218, </pages> <year> 1996. </year>
Reference-contexts: An assume-guarantee rule very similar to the one described above has been proved sound also for fair refinement checking <ref> [AH96] </ref>. Hence, our methodology applies to fair modules as well. 6 ATL Model Checking Alternating Temporal Logic (ATL) is a temporal logic designed for specifying requirements of open systems [AHK97]. Consider a set of agents that correspond to different components of a system and its environment.
Reference: [AH97] <author> R. Alur and T.A. Henzinger. </author> <title> Modularity for timed and hybrid systems. </title> <booktitle> In Proc. 8th International Conference on Concurrency Theory, </booktitle> <volume> LNCS 1243, </volume> <pages> pages 7488. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: believe that by being forced into playing a losing game, the user can be convinced that the model is incorrect and can be led to the error. 7 Real-time Modules MOCHA supports the reachability analysis of real-time systems that are described in the form of timed modules as defined in <ref> [AH97] </ref>. In addition to the discrete-valued variables of reactive modules, a timed module makes use of real-valued clock variables. All clock variables increase at the same rate, and keep track of the time elapsed since they have been assigned a value by a guarded command.
Reference: [AHK97] <author> R. Alur, T.A. Henzinger, and O. Kupferman. </author> <title> Alternating-time temporal logic. </title> <booktitle> In Proc. 38th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 100109, </pages> <year> 1997. </year>
Reference-contexts: An assume-guarantee rule very similar to the one described above has been proved sound also for fair refinement checking [AH96]. Hence, our methodology applies to fair modules as well. 6 ATL Model Checking Alternating Temporal Logic (ATL) is a temporal logic designed for specifying requirements of open systems <ref> [AHK97] </ref>. Consider a set of agents that correspond to different components of a system and its environment. Then, the logic ATL admits formulas of the form hhAii3p, where p is a state predicate and A is a subset of the agents.
Reference: [AHR98] <author> R. Alur, T.A. Henzinger, and S.K. Rajamani. </author> <title> Symbolic exploration of transition hierarchies. In TACAS 98: Tools and Algorithms for Construction and Analysis of Systems, </title> <publisher> LNCS 1384, </publisher> <pages> pages 330344, </pages> <year> 1998. </year>
Reference: [BCM92] <author> J.R. Burch and E.M. Clarke and K.L. McMillan and D.L. Dill and L.J. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <journal> Information and Computation, </journal> <volume> Vol 98, No 2, </volume> <pages> pages 142170, </pages> <year> 1992. </year>
Reference-contexts: The semantics of ATL is formalized by defining games such that the satisfaction of an ATL formula corresponds to the existence of a winning strategy. The model checking problem for ATL is to determine whether a given module satisfies a given ATL formula. The symbolic model-checking procedure for CTL <ref> [BCM92] </ref> generalizes nicely to yield a symbolic model-checking procedure for ATL.
Reference: [BG88] <author> G. Berry and G. Gonthier. </author> <title> The synchronous programming language ESTEREL: design, semantics, implementation. </title> <type> Technical Report 842, </type> <institution> INRIA, </institution> <year> 1988. </year>
Reference: [BHS + 96] <author> R. Brayton, G. Hachtel, A. Sangiovanni-Vincentelli, F. Somenzi, A. Aziz, S. Cheng, S. Ed-wards, S. Khatri, Y. Kukimoto, A. Pardo, S. Qadeer, R. Ranjan, S. Sarwary, T. Shiple, G. Swamy, and T. Villa. </author> <title> VIS: A system for verification and synthesis. </title> <booktitle> In Proc. 8th International Conference on Computer Aided Verification, </booktitle> <volume> LNCS 1102, </volume> <pages> pages 428432. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference: [Bry86] <author> R.E. Bryant. </author> <title> Graph-based algorithms for boolean-function manipulation. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-35(8), </volume> <year> 1986. </year>
Reference-contexts: For this purpose, we have implemented both symbolic and enumerative state-exploration algorithms: Symbolic. We represent the transition relation and the set of reached states of a reactive module as binary decision diagrams (BDDs) <ref> [Bry86] </ref>. We keep the transition relation of a reactive module in a conjunctively partitioned form. Each conjunct is the transition relation of an atom.
Reference: [CM88] <author> K.M. Chandy and J. Misra. </author> <title> Parallel program design: A foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988 </year>
Reference: [CE81] <author> E.M. Clarke and E.A. Emerson. </author> <title> Design and synthesis of synchronization skeletons using branching time temporal logic. </title> <booktitle> In Proc. Workshop on Logic of Programs, </booktitle> <volume> LNCS 131, </volume> <pages> pages 5271. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference: [Exp97] <institution> Expert Interface Technologies. Tix Home Page. </institution> <note> http://www.xpi.com/tix/index.html. </note>
Reference: [HQR98] <author> T.A. Henzinger, S. Qadeer, and S.K. Rajamani. You assume, </author> <title> we guarantee: Methodology and case studies. </title> <booktitle> In Proc. 10th International Conference on Computer Aided Verification. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1998. </year>
Reference-contexts: The module P refines another module Q, denoted P Q, if every trace of P is also a trace of Q (in addition to some technical side conditions). We have implemented a compositional methodology for refinement checking. The details of the method are explained in an accompanying paper <ref> [HQR98] </ref>. To illustrate the main aspects of our methodology that deal with the explosion of the imple-mentation state space, consider the refinement check P 1 kP 2 Q, where k denotes the parallel composition operation.
Reference: [Lyn96] <author> N.A. Lynch. </author> <title> Distributed Algorithms. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1996. </year>
Reference: [Pnu77] <author> A. Pnueli. </author> <title> The temporal logic of programs. </title> <booktitle> In Proc. 18th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 4677, </pages> <year> 1977. </year>
Reference: [RAP + 95] <author> R.K. Ranjan, A. Aziz, B. Plessier, C. Pixley, and R.K. Brayton. </author> <title> Efficient formal design verification: data structures + algorithms. </title> <booktitle> In Proc. International Workshop on Logic Synthesis, </booktitle> <year> 1995. </year>
Reference-contexts: We keep the transition relation of a reactive module in a conjunctively partitioned form. Each conjunct is the transition relation of an atom. The image computation routines have been leveraged off VIS, which provides a heuristic <ref> [RAP + 95] </ref> for image computation based on early quantification that has been shown useful in practice. Enumerative. The current implementation of the enumerative state-exploration routines is rather naive and does not perform any optimizations. It is used primarily by the simulator.
References-found: 16

