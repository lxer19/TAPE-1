URL: ftp://coast.cs.purdue.edu/pub/doc/cryptography/Crypto-File-System.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ12.html
Root-URL: http://www.cs.purdue.edu
Email: mab@research.att.com  
Title: A Cryptographic File System for Unix CFS under Unix. Encryption techniques for file system-level encryption
Author: Matt Blaze 
Note: This paper describes the design and implementation of  computing are discussed.  
Address: 101 Crawfords Corner Road, Room 4G-634 Holmdel, NJ 07733  
Affiliation: AT&T Bell Laboratories  
Abstract: Although cryptographic techniques are playing an increasingly important role in modern computing system security, user-level tools for encrypting file data are cumbersome and suffer from a number of inherent vulnerabilities. The Cryptographic File System (CFS) pushes encryption services into the file system itself. CFS supports secure storage at the system level through a standard Unix file system interface to encrypted files. Users associate a cryptographic key with the directories they wish to protect. Files in these directories (as well as their pathname components) are transparently encrypted and decrypted with the specified key without further user intervention; cleartext is never stored on a disk or sent to a remote file server. CFS can use any available file system for its underlying storage without modification, including remote file servers such as NFS. System management functions, such as file backup, work in a normal manner and without knowledge of the key. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Howard, J.H., Kazar, M.L., Menees, S.G., Nichols, D.A., Satyanaryanan, M. & Sidebotham, R.N. </author> <title> "Scale and Performance in Distributed File Systems." </title> <journal> ACM Trans. Com puting Systems, </journal> <volume> Vol. 6, No. 1, </volume> <month> (February), </month> <year> 1988. </year>
Reference-contexts: Such a design violates the principle that work should be shifted from the (shared, heavily loaded) file server to the (unshared, lightly loaded) client machine whenever possible <ref> [1] </ref>. Even if the cryptographic operations are themselves implemented in hardware, additional server software complexity is still required to support them. Several commercial and research systems incorporate cryptographic techniques for protecting file data against various kinds of attack. <p> The underlying encrypted directories can reside on any accessible file system, including remote file servers such as Sun NFS [8] and AFS <ref> [1] </ref>. No space needs to be preallocated to CFS directories. Users control CFS through a small suite of tools that create, attach, detach, and otherwise administer encrypted directories. Each directory is protected by set of cryptographic keys.
Reference: [2] <author> Kleiman, S.R., "Vnodes: </author> <title> An Architecture for Multiple File System Types in Sun UNIX." </title> <booktitle> Proc. USENIX, Summer, </booktitle> <year> 1986. </year>
Reference-contexts: It is instructive to compare the ow of data under CFS with that taken under the standard, unencrypted file system interface. application program and the ordinary Sun "vnode-based" Unix file system <ref> [2] </ref>. Each arrow between boxes represents data crossing a kernel, hardware, or network boundary; the diagram shows that data written from an application are first copied to the kernel and then to the (local or remote) file system. Figure 2 shows the architecture of the user-level CFS prototype.
Reference: [3] <author> Lacy, J., Mitchell, D., and Schell, W., "CryptoLib: </author> <title> A C Library of Routines for Cryptosystems." </title> <booktitle> Proc. Fourth USENIX Security Workshop, </booktitle> <month> October, </month> <year> 1993. </year>
Reference-contexts: Each copy carries with it considerable potential copying and context switch overhead. The DES encryption code itself, which is implemented in software <ref> [3] </ref>, dominates the cost of each file system request (although it is the fastest software DES implementation of which we are aware). CFS access could, based on worst case analysis of its components, take several times as long as the underlying storage. We measured CFS under a variety of workloads.
Reference: [4] <author> Lai, X. and Massey, J. </author> <title> "A Proposal for a New Block Encryption Standard." </title> <booktitle> Proc. EUROCRYPT 90, </booktitle> <pages> 389-404, </pages> <year> 1990. </year>
Reference-contexts: When properly implemented and appropriately applied, modern cipher This is a pre-print of a paper to be presented at the First ACM Conference on Communications and Computing Security, Fairfax, VA, November 3-5, 1993. algorithms (such as the Data Encryption Standard (DES)[5] and the more recent IDEA cipher <ref> [4] </ref>) are widely believed sufficiently strong to render encrypted data unavailable to virtually any adversary who cannot supply the correct key. However, routine use of these algorithms to protect file data is uncommon in current systems.
Reference: [5] <author> National Bureau of Standards, </author> <title> "Data Encryption Standard." </title> <note> FIPS Publication #46, NTIS, </note> <month> Apr. </month> <year> 1977. </year>
Reference: [6] <author> National Bureau of Standards, </author> <title> "Data Encryption Standard Modes of Operation." </title> <note> FIPS Publication #81, NTIS, </note> <month> Dec. </month> <year> 1980. </year>
Reference-contexts: We discuss possible attacks against our prototype implementation in Section 4, below. 3. File Encryption CFS uses DES to encrypt file data. DES has a number of standard modes of operation <ref> [6] </ref>, none of which is completely suitable for encrypting files on-line in a file system. In the simplest DES mode, ECB (electronic code book), each 8 byte block of a file is independently encrypted with the given key. Encryption and decryption can be performed randomly on any block boundary.
Reference: [7] <author> Reiher, P. et. al., </author> <title> "Security Issues in the Trufes File System." </title> <booktitle> Proc. PSRG Workshop on Network and Distributed System Security, </booktitle> <year> 1993. </year>
Reference-contexts: In larger-scale systems, cryptographic techniques are even less widely used, although a few systems do use encryption for protecting certain vulnerable interfaces. The Trufes system <ref> [7] </ref>, for example, uses a combination of cryptographic authentication and secret-key encryption to protect network access to widely distributed shared files. The files themselves, however, are stored at the server in clear form. In the following sections, we describe the alternative approach taken by the Cryptographic File System (CFS).
Reference: [8] <author> Sandberg, R., Goldberg, D., Kleiman, S., Walsh, D., & Lyon, B. </author> <title> "Design and Implementation of the Sun Network File System." </title> <booktitle> Proc. USENIX, Summer, </booktitle> <year> 1985. </year>
Reference-contexts: The underlying encrypted directories can reside on any accessible file system, including remote file servers such as Sun NFS <ref> [8] </ref> and AFS [1]. No space needs to be preallocated to CFS directories. Users control CFS through a small suite of tools that create, attach, detach, and otherwise administer encrypted directories. Each directory is protected by set of cryptographic keys.
References-found: 8

