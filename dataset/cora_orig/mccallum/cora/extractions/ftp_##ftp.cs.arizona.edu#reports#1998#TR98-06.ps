URL: ftp://ftp.cs.arizona.edu/reports/1998/TR98-06.ps
Refering-URL: http://www.cs.arizona.edu/research/reports.html
Root-URL: http://www.cs.arizona.edu
Title: Real-Time Dependable Channels: Customizing QoS Attributes for Distributed Systems  
Author: Matti A. Hiltunen Richard D. Schlichting Xiaonan Han Melvin M. Cardozo Rajsekhar Das 
Note: TR 98-06  
Abstract-found: 0
Intro-found: 1
Reference: [AS95] <author> F. Adelstein and M. Singhal. </author> <title> Real-time causal message ordering in multimedia systems. </title> <booktitle> In Proceedings of the 15th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 36-43, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Note also that these definitions are orthogonal to real-time and reliability. This means, for example, that the only guarantee for FIFO channels with P D &lt; 1:0 is that any messages delivered are in order, i.e., there may be gaps in the message delivery 3 sequence <ref> [AS95] </ref>. We can also design and implement variations of the ordering properties that enforce strict ordering in all cases even if it means that some messages may miss their deadlines.
Reference: [ASJS96] <author> T. Abdelzaher, A. Shaikh, F. Jahanian, and K. Shin. RTCAST: </author> <title> Lightweight multicast for real-time process groups. </title> <booktitle> In Proceedings of the IEEE Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 250-259, </pages> <month> Jun </month> <year> 1996. </year>
Reference-contexts: While suitable for their target application areas, the lack of support for configurability and customization in such systems typically limits their applicability to new areas. Two exceptions are <ref> [ASJS96] </ref> and [TMR96], which have adopted principles from the x-kernel to add coarse-grain modularity and a limited degree of configurability to certain real-time communication services. Real-time channel abstractions similar to RTD channels have been developed elsewhere as well. <p> The latest Tenet suite also provides multicast channels and resource sharing between related channels. An atomic real-time multicast protocol ensuring total ordering of messages is introduced in <ref> [ASJS96] </ref>. This protocol uses a logical token ring, and integrates multicast and membership services, but without explicitly introducing a real-time channel abstraction.
Reference: [BFM + 96] <author> A. Banerjea, D. Ferrari, B. Mah, M. Moran, D. Verma, and H. Zhang. </author> <title> The Tenet real-time protocol suite: Design, implementation, and experiences. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 4(1), </volume> <month> Feb </month> <year> 1996. </year>
Reference-contexts: Similarly, Tenet provides real-time channels over heterogeneous inter-networks, as well as a real-time network layer protocol RTIP and two real-time transport layer protocols RMTP and CMTP <ref> [BFM + 96] </ref>. The latest Tenet suite also provides multicast channels and resource sharing between related channels. An atomic real-time multicast protocol ensuring total ordering of messages is introduced in [ASJS96].
Reference: [BMK88] <author> D. Boggs, J. Mogul, and C. Kent. </author> <title> Measured capacity of an Ethernet: Myths and reality. </title> <booktitle> In Proceedings of SIGCOMM '88 Symposium on Communications Architectures and Protocols, </booktitle> <pages> pages 222-234, </pages> <month> Aug </month> <year> 1988. </year>
Reference-contexts: In the figure, the solid line represents the pdf when the system is lightly loaded and the dashed line one when the system is heavily loaded. This type of behavior has been documented for Ethernet networks <ref> [BMK88] </ref>. 13 Given the pdf of the system and the current load, it is possible to determine for any message transmission time t i the probability P (t i ) that an arbitrary message will reach its destination before t i .
Reference: [BS95] <author> N. Bhatti and R. Schlichting. </author> <title> A system for constructing configurable high-level protocols. </title> <booktitle> In Proceedings of SIGCOMM '95, </booktitle> <pages> pages 138-150, </pages> <address> Cambridge, MA, </address> <month> Aug </month> <year> 1995. </year>
Reference-contexts: CactusRT extends this model with a second level of composition by allowing internal structuring of x-kernel protocols as collections of micro-protocols. CactusRT has evolved from a previous system called Coyote, which has been used to construct highly-customizable versions of communication services without real-time constraints, including group RPC <ref> [HS95, BS95] </ref>, membership [HS98], and atomic multicast [GBB + 95]. Although CactusRT is linked with the x-kernel model, the concept of micro-protocols and the execution model supported by the system can be implemented using any number of different vehicles.
Reference: [BSS91] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: Other properties not considered here include bounded jitter, atomicity, stability [PBS89], security, and properties related to changes in the set of processes using the channel, such as virtual synchrony <ref> [BSS91] </ref> and safety [MMSA + 96]. All of these properties can be implemented in CactusRT using the same design principles as described in section 4. Real-time properties.
Reference: [CASD95] <author> F. Cristian, H. Aghili, R. Strong, and D. Dolev. </author> <title> Atomic broadcast: From simple message diffusion to Byzantine agreement. </title> <journal> Information and Computation, </journal> <volume> 118(1) </volume> <pages> 158-179, </pages> <year> 1995. </year>
Reference-contexts: Note that P D and P R are related in the sense that establishing a given deadline probability necessarily fixes a minimum reliability level. The reliability of a channel can be improved using redundancy, either in the form of redundant physical communication links (e.g., <ref> [KKG + 90, CASD95] </ref>) or message retransmissions. Naturally, the number of retransmissions or redundant links depends on the failure rates of the underlying networks. No fixed number of retransmissions or redundant communication links can guarantee a reliability of 1.0 in all cases.
Reference: [Cru91] <author> R. Cruz. </author> <title> A calculus for network delay, part I: Network elements in isolation. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 37(1) </volume> <pages> 114-131, </pages> <month> Jan </month> <year> 1991. </year> <month> 18 </month>
Reference-contexts: Currently, however, we are concentrating on performing admission control using the (; ) model from [WKZL96], where is the burstiness factor 14 and is the average traffic rate. With this model, the size of the traffic backlog at a server never exceeds given that the server works at rate <ref> [Cru91] </ref>. The server in our case is a channel composite protocol, is the message rate R (messages/second), and is the burst size B (number of messages). Other traffic models to be explored include the H-BIND model [Kni96], which allows statistical guarantees to be made concerning timeliness of communication. <p> For example, if the burstiness and rate at the sending site are B and R, and the maximum network delay is T n , then the burstiness at the receiving site will be B + T n R <ref> [Cru91] </ref>. Similarly, retransmissions increase both the message rate and the burst size. Finally, for multisource channels (including GM channels), the traffic model at the receiving site is the aggregation of the traffic models of the source sites. Capability Tests.
Reference: [GBB + 95] <author> D. Guedes, D. Bakken, N. Bhatti, M. Hiltunen, and R. Schlichting. </author> <title> A customized com-munication subsystem for FT-Linda. </title> <booktitle> In Proceedings of the 13th Brazilian Symposium on Computer Networks, </booktitle> <pages> pages 319-338, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: CactusRT has evolved from a previous system called Coyote, which has been used to construct highly-customizable versions of communication services without real-time constraints, including group RPC [HS95, BS95], membership [HS98], and atomic multicast <ref> [GBB + 95] </ref>. Although CactusRT is linked with the x-kernel model, the concept of micro-protocols and the execution model supported by the system can be implemented using any number of different vehicles.
Reference: [Her94] <author> A. Herbert. </author> <title> An ANSA overview. </title> <journal> IEEE Network, </journal> <volume> 8(1), </volume> <month> Jan </month> <year> 1994. </year>
Reference-contexts: The emphasis on integrating a range of QoS attributes and on providing a high degree of flexibility distinguishes CactusRT from other configurable systems that support a degree of customization <ref> [Her94, RBM96, SBS93, SVK93, TMR96] </ref>. Thus, in a larger context, RTD channels illustrate the feasibility of constructing customized abstractions that merge dependability and real time using CactusRT. This paper has several goals.
Reference: [HP91] <author> N. Hutchinson and L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: CactusRT is derived from the x-kernel model for building network subsystems in which the software is implemented as a graph of protocols (i.e., software modules) organized hierarchically <ref> [HP91] </ref>. CactusRT extends this model with a second level of composition by allowing internal structuring of x-kernel protocols as collections of micro-protocols. <p> These include jitter control, which reduces jitter in the stream of messages delivered, and flow control, which enforces sender compliance with the given traffic model. 5 Related Work A number of systems support configurability and customization in distributed systems, including Adaptive [SBS93], Horus [RBM96], and the x-kernel <ref> [HP91] </ref>. However, only Adaptive and the configurable control system in [SVK93] address issues related to real time. Adaptive introduces an approach to building protocols that employs a collection of reusable `building-block' protocol mechanisms that can be composed automatically based on functional specifications.
Reference: [HS95] <author> M. Hiltunen and R. Schlichting. </author> <title> Constructing a configurable group RPC service. </title> <booktitle> In Proceedings of the 15th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 288-295, </pages> <address> Vancouver, BC, Canada, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: CactusRT extends this model with a second level of composition by allowing internal structuring of x-kernel protocols as collections of micro-protocols. CactusRT has evolved from a previous system called Coyote, which has been used to construct highly-customizable versions of communication services without real-time constraints, including group RPC <ref> [HS95, BS95] </ref>, membership [HS98], and atomic multicast [GBB + 95]. Although CactusRT is linked with the x-kernel model, the concept of micro-protocols and the execution model supported by the system can be implemented using any number of different vehicles.
Reference: [HS98] <author> M. Hiltunen and R. Schlichting. </author> <title> A configurable membership service. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 47(5) </volume> <pages> 573-586, </pages> <month> May </month> <year> 1998. </year>
Reference-contexts: CactusRT has evolved from a previous system called Coyote, which has been used to construct highly-customizable versions of communication services without real-time constraints, including group RPC [HS95, BS95], membership <ref> [HS98] </ref>, and atomic multicast [GBB + 95]. Although CactusRT is linked with the x-kernel model, the concept of micro-protocols and the execution model supported by the system can be implemented using any number of different vehicles.
Reference: [JLT85] <author> D. Jensen, D. Locke, and H. Tokuda. </author> <title> A time-driven scheduling model for real-time operating systems. </title> <booktitle> In Proceedings of the Real-Time Systems Symposium, </booktitle> <pages> pages 112-122, </pages> <address> San Diego, CA, </address> <month> Dec </month> <year> 1985. </year>
Reference-contexts: However, for messages that have or will miss their deadlines, different policies are useful in different situations. These types of policies can be defined using a technique similar to the soft real-time value functions that determine the value of completing a soft real-time task after the deadline <ref> [JLT85] </ref>. In this case, a value function represents the value of delivering a message after its deadline. Typical alternatives include: * Zero. Delivering a message after its deadline does not have any value to the application (dotted line in figure 6).
Reference: [KDK + 89] <author> H. Kopetz, A. Damm, C. Koza, M. Mulazzani, W. Schwabl, C. Senft, and R. Zainlinger. </author> <title> Distributed fault-tolerant real-time systems: The Mars approach. </title> <booktitle> IEEE Micro, </booktitle> <pages> pages 25-40, </pages> <month> Feb </month> <year> 1989. </year>
Reference-contexts: As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera [SVK93], Delta-4 [Pow91], HARTS [KS91], Mars <ref> [KDK + 89] </ref>, MK [Rey95, TMR96], RT-Mach [TNR90], and TTP [KG94]. While suitable for their target application areas, the lack of support for configurability and customization in such systems typically limits their applicability to new areas.
Reference: [KG94] <author> H. Kopetz and G. Grunsteidl. </author> <title> TTP A protocol for fault-tolerant real-time systems. </title> <journal> Computer, </journal> <volume> 27(1) </volume> <pages> 14-23, </pages> <month> Jan </month> <year> 1994. </year>
Reference-contexts: As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera [SVK93], Delta-4 [Pow91], HARTS [KS91], Mars [KDK + 89], MK [Rey95, TMR96], RT-Mach [TNR90], and TTP <ref> [KG94] </ref>. While suitable for their target application areas, the lack of support for configurability and customization in such systems typically limits their applicability to new areas.
Reference: [KKG + 90] <author> H. Kopetz, H. Kantz, G. Gruensteidl, P. Puschner, and J. Reisinger. </author> <title> Tolerating transient faults in Mars. </title> <booktitle> In Proceedings of the 20th Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 466-473, </pages> <month> Jun </month> <year> 1990. </year>
Reference-contexts: Note that P D and P R are related in the sense that establishing a given deadline probability necessarily fixes a minimum reliability level. The reliability of a channel can be improved using redundancy, either in the form of redundant physical communication links (e.g., <ref> [KKG + 90, CASD95] </ref>) or message retransmissions. Naturally, the number of retransmissions or redundant links depends on the failure rates of the underlying networks. No fixed number of retransmissions or redundant communication links can guarantee a reliability of 1.0 in all cases.
Reference: [Kni96] <author> E. Knightly. H-BIND: </author> <title> A new approach to providing statistical performance guarantees to VBR traffic. </title> <booktitle> In Proceedings of IEEE INFOCOM '96, </booktitle> <pages> pages 1091-1099, </pages> <address> San Francisco, CA, </address> <month> Mar </month> <year> 1996. </year>
Reference-contexts: The server in our case is a channel composite protocol, is the message rate R (messages/second), and is the burst size B (number of messages). Other traffic models to be explored include the H-BIND model <ref> [Kni96] </ref>, which allows statistical guarantees to be made concerning timeliness of communication. While a necessary starting point, this model only describes the traffic originating from application processes sending on a given channel.
Reference: [KS91] <author> D. Kandlur and K. Shin. </author> <title> Design of a communication subsystem for HARTS. </title> <type> Technical Report CSE-TR-109-91, </type> <institution> University of Michigan, </institution> <month> Oct </month> <year> 1991. </year>
Reference-contexts: As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera [SVK93], Delta-4 [Pow91], HARTS <ref> [KS91] </ref>, Mars [KDK + 89], MK [Rey95, TMR96], RT-Mach [TNR90], and TTP [KG94]. While suitable for their target application areas, the lack of support for configurability and customization in such systems typically limits their applicability to new areas. <p> Real-time channel abstractions similar to RTD channels have been developed elsewhere as well. In some cases, these channels address real-time communication at the network level; for example, a type of real-time channel that is established across multiple point-to-point network links is introduced in <ref> [KS91, KSF94] </ref>. Similarly, Tenet provides real-time channels over heterogeneous inter-networks, as well as a real-time network layer protocol RTIP and two real-time transport layer protocols RMTP and CMTP [BFM + 96]. The latest Tenet suite also provides multicast channels and resource sharing between related channels.
Reference: [KSF94] <author> D. Kandlur, K. Shin, and D. Ferrari. </author> <title> Real-time communication in multi-hop networks. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <pages> pages 1044-1056, </pages> <month> Oct </month> <year> 1994. </year>
Reference-contexts: Note that this formula applies only to paths with a single traffic model for arriving messages; the formula becomes more complex when a path has more than one traffic model. This formula is used in conjunction with the D order procedure <ref> [KSF94] </ref> to determine a priority for the new path that is allocated as a result of the channel creation request. In essence, this step calculates the highest possible priority for the path that still allows all deadlines to be met. <p> Real-time channel abstractions similar to RTD channels have been developed elsewhere as well. In some cases, these channels address real-time communication at the network level; for example, a type of real-time channel that is established across multiple point-to-point network links is introduced in <ref> [KS91, KSF94] </ref>. Similarly, Tenet provides real-time channels over heterogeneous inter-networks, as well as a real-time network layer protocol RTIP and two real-time transport layer protocols RMTP and CMTP [BFM + 96]. The latest Tenet suite also provides multicast channels and resource sharing between related channels.
Reference: [LWF94] <author> J. Liebeherr, D. Wrege, and D. Ferrari. </author> <title> Exact admission control for networks with bounded delay services. </title> <type> Technical Report TR-94-033, </type> <institution> International Computer Science Institute, University of California at Berkeley, Berkeley, </institution> <address> CA, </address> <month> Aug </month> <year> 1994. </year>
Reference-contexts: Note that the delays at the sender and receiver can be adjusted to accommodate sites with different loads as long as the sum of delays is less or equal to the deadline. The worst case response times r s and r r are calculated using the algorithm described in <ref> [LWF94] </ref>. First, the existing paths on a site are sorted based on their priority, where path P i has the i th highest priority.
Reference: [MG95] <author> V. Murty and V. Garg. </author> <title> An algorithm for guaranteeing synchronous ordering of messages. </title> <booktitle> In Proceedings of the 2nd International Symposium on Autonomous Decentralized Systems, </booktitle> <pages> pages 208-214, </pages> <address> Phoenix, AZ, </address> <month> Apr </month> <year> 1995. </year>
Reference-contexts: Finally, in a totally ordered channel, all sites receiving any two messages m i and m j deliver them to the application in the same order. Numerous other ordering properties could also be defined, including timestamp-based temporal order [Ver94], semantic order [MPS89], and synchronous order <ref> [MG95] </ref>. Note also that these definitions are orthogonal to real-time and reliability. This means, for example, that the only guarantee for FIFO channels with P D &lt; 1:0 is that any messages delivered are in order, i.e., there may be gaps in the message delivery 3 sequence [AS95].
Reference: [MHCN96] <author> A. Mauthe, D. Hutchison, G. Coulson, and S. Namuye. </author> <title> Multimedia group communications: towards new services. </title> <journal> Distributed Systems Engineering, </journal> <volume> 3(3) </volume> <pages> 197-210, </pages> <month> Sep </month> <year> 1996. </year> <month> 19 </month>
Reference-contexts: For example, multimedia applications can often tolerate the loss of a few packets or missed deadlines, so P D and P R can be relatively lowon the order of 0.9 to 0.99 for audio and a minimum of 0.999 for video <ref> [MHCN96] </ref>. On the other hand, distributed financial systems such as automatic teller machines would likely require a value of P R very close to 1.0, but could tolerate a somewhat smaller value of P D . Ordering properties.
Reference: [MMM96] <author> C. Martel, W. Moh, and T.-S. Moh. </author> <title> Dynamic prioritized conflict resolution on multiple access broadcast networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 45(9) </volume> <pages> 1074-1079, </pages> <month> Sep </month> <year> 1996. </year>
Reference-contexts: For simplicity, we only consider schedulability tests for CPU time; approaches to network scheduling can be found elsewhere (e.g., <ref> [MMM96] </ref>). An application creating a new channel specifies a message deadline d, i.e., a message sent into the channel at time t must be delivered to all of its destinations by time t + d.
Reference: [MMSA + 96] <author> L. Moser, P. Melliar-Smith, D. Agarwal, R. Budhia, and C. Lingley-Papadopoulos. Totem: </author> <title> A fault-tolerant multicast group communication system. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 54-63, </pages> <month> Apr </month> <year> 1996. </year>
Reference-contexts: Other properties not considered here include bounded jitter, atomicity, stability [PBS89], security, and properties related to changes in the set of processes using the channel, such as virtual synchrony [BSS91] and safety <ref> [MMSA + 96] </ref>. All of these properties can be implemented in CactusRT using the same design principles as described in section 4. Real-time properties.
Reference: [MPS89] <author> S. Mishra, L. Peterson, and R. Schlichting. </author> <title> Implementing replicated objects using Psync. </title> <booktitle> In Proceedings of the 8th Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 42-52, </pages> <address> Seattle, Washington, </address> <month> Oct </month> <year> 1989. </year>
Reference-contexts: Finally, in a totally ordered channel, all sites receiving any two messages m i and m j deliver them to the application in the same order. Numerous other ordering properties could also be defined, including timestamp-based temporal order [Ver94], semantic order <ref> [MPS89] </ref>, and synchronous order [MG95]. Note also that these definitions are orthogonal to real-time and reliability.
Reference: [OMG98] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification (Revision 2.2), </title> <month> Feb </month> <year> 1998. </year>
Reference-contexts: For example, a second version of Cactus without support for real time is being constructed on Sun Solaris using C++ and CORBA <ref> [OMG98] </ref>. 3.2 Event-Driven Model The approach used in CactusRT is based on implementing different semantic properties and functional components of a service as separate modules that interact using an event-driven execution model.
Reference: [PBS89] <author> L. Peterson, N. Buchholz, and R. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> Aug </month> <year> 1989. </year>
Reference-contexts: Other properties not considered here include bounded jitter, atomicity, stability <ref> [PBS89] </ref>, security, and properties related to changes in the set of processes using the channel, such as virtual synchrony [BSS91] and safety [MMSA + 96]. All of these properties can be implemented in CactusRT using the same design principles as described in section 4. Real-time properties.
Reference: [Pow91] <editor> D. Powell, editor. Delta-4: </editor> <title> A Generic Architecture for Dependable Computing. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera [SVK93], Delta-4 <ref> [Pow91] </ref>, HARTS [KS91], Mars [KDK + 89], MK [Rey95, TMR96], RT-Mach [TNR90], and TTP [KG94]. While suitable for their target application areas, the lack of support for configurability and customization in such systems typically limits their applicability to new areas.
Reference: [RBM96] <author> R. van Renesse, K. Birman, and S Maffeis. Horus, </author> <title> a flexible group communication system. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 76-83, </pages> <month> Apr </month> <year> 1996. </year>
Reference-contexts: The emphasis on integrating a range of QoS attributes and on providing a high degree of flexibility distinguishes CactusRT from other configurable systems that support a degree of customization <ref> [Her94, RBM96, SBS93, SVK93, TMR96] </ref>. Thus, in a larger context, RTD channels illustrate the feasibility of constructing customized abstractions that merge dependability and real time using CactusRT. This paper has several goals. <p> These include jitter control, which reduces jitter in the stream of messages delivered, and flow control, which enforces sender compliance with the given traffic model. 5 Related Work A number of systems support configurability and customization in distributed systems, including Adaptive [SBS93], Horus <ref> [RBM96] </ref>, and the x-kernel [HP91]. However, only Adaptive and the configurable control system in [SVK93] address issues related to real time. Adaptive introduces an approach to building protocols that employs a collection of reusable `building-block' protocol mechanisms that can be composed automatically based on functional specifications.
Reference: [Rey95] <author> F. Reynolds. </author> <title> The OSF real-time micro-kernel. </title> <type> Technical report, </type> <institution> OSF Research Institute, </institution> <year> 1995. </year>
Reference-contexts: CactusRT is a system that supports the construction of middleware services with real-time constraints as composite protocols by combining finer-grain micro-protocol modules together with the CactusRT runtime system. Services built using CactusRT execute on a cluster of Pentium PCs running the Mach MK 7.3 real-time operating system from OpenGroup/RI <ref> [Rey95] </ref>. The emphasis on integrating a range of QoS attributes and on providing a high degree of flexibility distinguishes CactusRT from other configurable systems that support a degree of customization [Her94, RBM96, SBS93, SVK93, TMR96]. <p> As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera [SVK93], Delta-4 [Pow91], HARTS [KS91], Mars [KDK + 89], MK <ref> [Rey95, TMR96] </ref>, RT-Mach [TNR90], and TTP [KG94]. While suitable for their target application areas, the lack of support for configurability and customization in such systems typically limits their applicability to new areas.
Reference: [SBS93] <author> D. Schmidt, D. Box, and T. Suda. </author> <title> ADAPTIVE: A dynamically assembled protocol transformation, integration, and evaluation environment. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 5(4) </volume> <pages> 269-286, </pages> <month> Jun </month> <year> 1993. </year>
Reference-contexts: The emphasis on integrating a range of QoS attributes and on providing a high degree of flexibility distinguishes CactusRT from other configurable systems that support a degree of customization <ref> [Her94, RBM96, SBS93, SVK93, TMR96] </ref>. Thus, in a larger context, RTD channels illustrate the feasibility of constructing customized abstractions that merge dependability and real time using CactusRT. This paper has several goals. <p> These include jitter control, which reduces jitter in the stream of messages delivered, and flow control, which enforces sender compliance with the given traffic model. 5 Related Work A number of systems support configurability and customization in distributed systems, including Adaptive <ref> [SBS93] </ref>, Horus [RBM96], and the x-kernel [HP91]. However, only Adaptive and the configurable control system in [SVK93] address issues related to real time. Adaptive introduces an approach to building protocols that employs a collection of reusable `building-block' protocol mechanisms that can be composed automatically based on functional specifications.
Reference: [SRL90] <author> L. Sha, R. Rajkumar, and J. Lehoczky. </author> <title> Priority inheritance protocols: An approach to real-time synchronization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39 </volume> <pages> 1175-1185, </pages> <year> 1990. </year>
Reference-contexts: This priority inversion can become unbounded when interaction with threads in other protection domains is taken into account. Unbounded priority inversion due to synchronization is a classical problem in real-time systems and we use the standard solution of priority inheritance <ref> [SRL90] </ref> to solve the problem. CORDS version 7.3 supports the Posix-compliant pthreads package, which provides priority inheritance semaphores. We modified CORDS to use these semaphores for synchronizing access to protection domains, thereby avoiding unbounded priority inversion.
Reference: [SVK93] <author> D. Stewart, R. Volpe, and P. Khosla. </author> <title> Design of dynamically reconfigurable real-time software using port-based objects. </title> <type> Technical Report CMU-RI-TR-93-11, </type> <institution> Carnegie Mellon University, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: The emphasis on integrating a range of QoS attributes and on providing a high degree of flexibility distinguishes CactusRT from other configurable systems that support a degree of customization <ref> [Her94, RBM96, SBS93, SVK93, TMR96] </ref>. Thus, in a larger context, RTD channels illustrate the feasibility of constructing customized abstractions that merge dependability and real time using CactusRT. This paper has several goals. <p> However, only Adaptive and the configurable control system in <ref> [SVK93] </ref> address issues related to real time. Adaptive introduces an approach to building protocols that employs a collection of reusable `building-block' protocol mechanisms that can be composed automatically based on functional specifications. The objects are tightly coupled in the sense that interactions between objects are fixed a priori. <p> The objects are tightly coupled in the sense that interactions between objects are fixed a priori. Furthermore, although Adaptive targets multimedia applications, its runtime system appears to be designed to maximize performance rather than ensuring deadlines. A reconfigurable real-time software system is introduced in <ref> [SVK93] </ref>. The target application domain is sensor-based control systems, rather than real-time communication as is the case here. The port-based object model used in this system is suitable for combining existing software components, but lacks the degree of flexibility and fine-grain control found in the CactusRT approach. <p> As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera <ref> [SVK93] </ref>, Delta-4 [Pow91], HARTS [KS91], Mars [KDK + 89], MK [Rey95, TMR96], RT-Mach [TNR90], and TTP [KG94]. While suitable for their target application areas, the lack of support for configurability and customization in such systems typically limits their applicability to new areas.
Reference: [TMR96] <author> F. Travostino, E. Menze, and F. Reynolds. </author> <title> Paths: Programming with system resources in support of real-time distributed applications. </title> <booktitle> In Proceedings of the IEEE Workshop on Object-Oriented Real-Time Dependable Systems, </booktitle> <month> Feb </month> <year> 1996. </year>
Reference-contexts: The emphasis on integrating a range of QoS attributes and on providing a high degree of flexibility distinguishes CactusRT from other configurable systems that support a degree of customization <ref> [Her94, RBM96, SBS93, SVK93, TMR96] </ref>. Thus, in a larger context, RTD channels illustrate the feasibility of constructing customized abstractions that merge dependability and real time using CactusRT. This paper has several goals. <p> These issues are addressed further below. 3.3 Implementation The prototype implementation of CactusRT runs on the OpenGroup/RI MK 7.3 Mach operating system, which includes real-time support and the CORDS communication subsystem <ref> [TMR96] </ref>. CORDS is essentially identical to the x-kernel, but with an additional path abstraction to support reservation of resources such as buffers and threads. We utilize paths and the thread priorities provided by the system to assign priorities to channels. <p> As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera [SVK93], Delta-4 [Pow91], HARTS [KS91], Mars [KDK + 89], MK <ref> [Rey95, TMR96] </ref>, RT-Mach [TNR90], and TTP [KG94]. While suitable for their target application areas, the lack of support for configurability and customization in such systems typically limits their applicability to new areas. <p> While suitable for their target application areas, the lack of support for configurability and customization in such systems typically limits their applicability to new areas. Two exceptions are [ASJS96] and <ref> [TMR96] </ref>, which have adopted principles from the x-kernel to add coarse-grain modularity and a limited degree of configurability to certain real-time communication services. Real-time channel abstractions similar to RTD channels have been developed elsewhere as well.
Reference: [TNR90] <author> H. Tokuda, T. Nakajima, and P. Rao. </author> <title> Real-time Mach: Toward a predictable real-time system. </title> <booktitle> In Proceedings of USENIX Mach Workshop, </booktitle> <pages> pages 73-82, </pages> <month> Oct </month> <year> 1990. </year>
Reference-contexts: As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera [SVK93], Delta-4 [Pow91], HARTS [KS91], Mars [KDK + 89], MK [Rey95, TMR96], RT-Mach <ref> [TNR90] </ref>, and TTP [KG94]. While suitable for their target application areas, the lack of support for configurability and customization in such systems typically limits their applicability to new areas.
Reference: [Ver94] <author> P. Verissimo. </author> <title> Ordering and timeliness requirements of dependable real-time programs. </title> <booktitle> In Real-Time Systems, </booktitle> <pages> pages 105-128. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1994. </year>
Reference-contexts: Finally, in a totally ordered channel, all sites receiving any two messages m i and m j deliver them to the application in the same order. Numerous other ordering properties could also be defined, including timestamp-based temporal order <ref> [Ver94] </ref>, semantic order [MPS89], and synchronous order [MG95]. Note also that these definitions are orthogonal to real-time and reliability.
Reference: [WKZL96] <author> D. Wrege, E. Knightly, H. Zhang, and J. Liebeherr. </author> <title> Deterministic delay bounds for VBR video in packet-switching networks: Fundamental limits and practical tradeoffs. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <pages> pages 352-362, </pages> <month> Jun </month> <year> 1996. </year> <month> 20 </month>
Reference-contexts: Traffic models. Different types of real-time applications can have different communication patterns, so the system is designed to support different traffic models. Currently, however, we are concentrating on performing admission control using the (; ) model from <ref> [WKZL96] </ref>, where is the burstiness factor 14 and is the average traffic rate. With this model, the size of the traffic backlog at a server never exceeds given that the server works at rate [Cru91].
References-found: 38

