URL: http://www.isi.edu/~cengiz/csci402/ddd/ddd-paper.ps
Refering-URL: http://www.isi.edu/~cengiz/csci402/
Root-URL: http://www.isi.edu
Title: DDDA Free Graphical Front-End for UNIX Debuggers  
Author: Andreas Zeller and Dorothea L utkehaus 
Address: Gaustrae 17 D-38092 Braunschweig/Germany  
Affiliation: Institut fur Programmiersprachen und Informationssysteme Abteilung Softwaretechnologie Technische Universitat Braunschweig  
Note: Copyright c 1995  
Date: 7. August 1995  
Pubnum: Informatik-Bericht No. 95-07  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Centerline Software, Inc. </author> <title> CodeCenter Tutorial and User's Guide, </title> <type> version 4 ed. </type> <address> Cambridge, Mass., </address> <year> 1994. </year>
Reference-contexts: The original GDB command interface remains for experienced users and complex tasks. In the last few years, graphical debugging interfaces showed up another advantage, namely graphical data displays. The SoftBench program debugger [4] and the Code-Center environment <ref> [1] </ref> introduced facilities to display program data as graphs, allowing for simple exploration of complex data structures. Unfortunately, each of these debuggers comes with its own environment and, which is worse, with its own proprietary compiler. <p> This is done two lines later, which Lisa executes step-by-step by pressing the Next button. Each time the debugged program stops (or is stopped by GDB), the data display reflects the current variable values. Lisa focuses her interest on the second element, date ptrs <ref> [1] </ref>, and selects Dereference from the popup menu (figure 4). 2 The dereferenced element, *date ptrs [1], is shown in a dependent node (figure 5), a node referred from the originating node, date ptrs. <p> Each time the debugged program stops (or is stopped by GDB), the data display reflects the current variable values. Lisa focuses her interest on the second element, date ptrs <ref> [1] </ref>, and selects Dereference from the popup menu (figure 4). 2 The dereferenced element, *date ptrs [1], is shown in a dependent node (figure 5), a node referred from the originating node, date ptrs.
Reference: [2] <author> Cheung, P., and Willard, P. </author> <title> XXGDB - X Window System Interface to the GDB debugger, </title> <month> Nov. </month> <year> 1994. </year> <title> Distributed with XXGDB. </title>
Reference-contexts: Such users may fl Authors' current address: Technische Universitat Braunschweig, Abteilung Softwaretechnologie, Gaustr. 17, D-38092 Braunschweig, Germany. E-mail: ddd@ips.cs.tu-bs.de. prefer a graphical user interface, emphasizing the most frequently used commands and providing direct manipulation facilities. Various graphical user interfaces for GDB are available today, notably XXGDB <ref> [2] </ref>, TGDB [8] and GUI for GDB [3]. These GDB extensions provide separate windows for viewing the current source code location, manipulating breakpoints, and invoking frequently needed commands through push buttons. The original GDB command interface remains for experienced users and complex tasks.
Reference: [3] <author> Cygnus Support. </author> <title> A Graphical User Interface for the GNU Debugger. </title> <address> Mountain View, CA, </address> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: E-mail: ddd@ips.cs.tu-bs.de. prefer a graphical user interface, emphasizing the most frequently used commands and providing direct manipulation facilities. Various graphical user interfaces for GDB are available today, notably XXGDB [2], TGDB [8] and GUI for GDB <ref> [3] </ref>. These GDB extensions provide separate windows for viewing the current source code location, manipulating breakpoints, and invoking frequently needed commands through push buttons. The original GDB command interface remains for experienced users and complex tasks.
Reference: [4] <author> Hewlett-Packard, Inc. </author> <title> SoftBench Program Construction Toolsan Introduction. </title> <address> Palo Alto, CA, </address> <year> 1992. </year>
Reference-contexts: The original GDB command interface remains for experienced users and complex tasks. In the last few years, graphical debugging interfaces showed up another advantage, namely graphical data displays. The SoftBench program debugger <ref> [4] </ref> and the Code-Center environment [1] introduced facilities to display program data as graphs, allowing for simple exploration of complex data structures. Unfortunately, each of these debuggers comes with its own environment and, which is worse, with its own proprietary compiler.
Reference: [5] <author> Knuth, D. E. </author> <title> The T E Xbook. </title> <publisher> Addison Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1984. </year>
Reference-contexts: Each box has a size and an extent that determines how it fits into a larger surrounding space. Through construction of larger and larger boxes, DDD constructs a graph node from the GDB data structure in a similar way a typesetting system like T E X <ref> [5] </ref> builds words from letters and pages from paragraphs. In figure 8, we see how a framed text is built from five rectangular boxes. First, a horizontal alignment is built containing a vertical line, the text, and another vertical line.
Reference: [6] <author> L utkehaus, D. </author> <title> DDD - ein Debugger mit graphis-cher Datendarstellung. </title> <type> Master's thesis, </type> <institution> Technical University of Braunschweig, Germany, </institution> <month> Nov. </month> <year> 1994. </year> <note> In German. </note>
Reference-contexts: By reusing these packages, we found it feasible to develop a comfortable graphical user interface for GDB in less than ten man-months; to make it publicly available required another two man-months. The resulting product, called DDD for Data Display Debugger <ref> [6, 7] </ref> is a free full-fledged debugging environment with an estimated 15,000 to 20,000 users three months after its publication. 2 A Quick Glance at DDD Let us first take a look at DDD, as it presents itself to the user. In figure 1, we see three windows.
Reference: [7] <author> L utkehaus, D., and Zeller, A. </author> <title> DDD the Data Display Debugger, </title> <note> version 1.2 ed. </note> <institution> Technical University of Braunschweig, Germany, </institution> <month> May </month> <year> 1995. </year> <title> Distributed with DDD. </title>
Reference-contexts: By reusing these packages, we found it feasible to develop a comfortable graphical user interface for GDB in less than ten man-months; to make it publicly available required another two man-months. The resulting product, called DDD for Data Display Debugger <ref> [6, 7] </ref> is a free full-fledged debugging environment with an estimated 15,000 to 20,000 users three months after its publication. 2 A Quick Glance at DDD Let us first take a look at DDD, as it presents itself to the user. In figure 1, we see three windows.
Reference: [8] <author> Schumacher, M. TGDB, </author> <title> a graphical frontend to GDB, the GNU debugger. </title> <publisher> HighTec EDV-Systeme GmbH, </publisher> <address> St. Ingbert, Germany, </address> <year> 1994. </year> <title> Distributed with TGDB. </title>
Reference-contexts: Such users may fl Authors' current address: Technische Universitat Braunschweig, Abteilung Softwaretechnologie, Gaustr. 17, D-38092 Braunschweig, Germany. E-mail: ddd@ips.cs.tu-bs.de. prefer a graphical user interface, emphasizing the most frequently used commands and providing direct manipulation facilities. Various graphical user interfaces for GDB are available today, notably XXGDB [2], TGDB <ref> [8] </ref> and GUI for GDB [3]. These GDB extensions provide separate windows for viewing the current source code location, manipulating breakpoints, and invoking frequently needed commands through push buttons. The original GDB command interface remains for experienced users and complex tasks.
Reference: [9] <author> Stallman, R. M., and Pesch, R. H. </author> <title> Debugging with GDB, version 4.13 ed. Free Software Foundation, </title> <month> Jan. </month> <year> 1994. </year> <title> Distributed with GDB. </title>
Reference-contexts: Debuggers can be viewed as program interpreters; they provide support for inspecting the execution state in a symbolic way, and they allow for executing programs step-by-step or until a specific condition arises. In the UNIX world, the GNU debugger (GDB) <ref> [9] </ref> is one of the most popular debuggers. The basic GDB provides a large range of functionality for all debugging purposes.
Reference: [10] <author> Sun Microsystems, Inc. </author> <title> Debugging ToolsDBX, </title> <editor> SunOS 4.1.1 ed. </editor> <address> Mountain View, CA, </address> <month> Mar. </month> <year> 1990. </year>
Reference-contexts: The separation of GDB and DDD processes makes DDD run slower, due to the time needed to interpret GDB responses. However, this approach turned out to have several advantages. For instance, we could replace GDB by debuggers whose source code was not available, such as Sun's DBX <ref> [10] </ref>.

References-found: 10

