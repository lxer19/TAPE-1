URL: ftp://n1.sp.cs.cmu.edu/pub/hzhang/TON-96-Feb.ps.Z
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/hzhang/WWW/publications.html
Root-URL: 
Title: The Tenet Real-Time Protocol Suite: Design, Implementation, and Experiences 1 with mathematically provable performance guarantees).
Author: Anindo Banerjea, Domenico Ferrari, Bruce A. Mah, Mark Moran, Dinesh C. Verma, and Hui Zhang and 
Keyword: communication, per-channel admission control, channel rate control, and priority scheduling.  
Note: nections  This  
Address: Berkeley, CA 94720-1776  1947 Center St., Suite 600 Berkeley, CA 94704-1105  
Affiliation: The Tenet Group Computer Science Division University of California at Berkeley  The International Computer Science Institute  
Abstract: on throughput, delay, delay jitter, and reliability. To address this need, we have designed, simu and can coexist with the popular Internet protocol suite. We rely on the use of connection-oriented that can transfer real-time streams with guaranteed quality in packet-switching internetworks. We lated, and implemented a suite of network protocols to support real-time channels (network con
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Ferrari, </author> <title> Real-Time Communication in Packet Switching Wide Area Networks, </title> <booktitle> TR-89-022. International Computer Science Institute, </booktitle> <address> Berkeley, CA, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: The basic ideas underlying the scheme were the real-time channel abstraction itself, admission control, connection-oriented communication, channel rate control, and deadline-based scheduling for real-time packets <ref> [1] </ref>. He was later joined by the other authors in designing a protocol suite embodying the Tenet scheme. Several simplifications were made to facilitate the development of the first suite. <p> In this section, we 5 briey recall some of these principles. More details, as well as basic motivations, have been presented and discussed elsewhere <ref> [1] </ref> [2] [3] [4]. First, all layers in a networks architecture, in particular, the datalink layer, must be able to provide guaranteed-performance services. Datalink layers such as synchronous FDDI, ATM with a suitable signaling protocol and admission tests, and 100VG-AnyLAN meet this requirement. <p> In the forward pass, an establish_request message is sent, hop by hop, from the source to the destination of the channel. At each node along the path where RTIP runs, a local RCAP entity performs admission control tests <ref> [1] </ref> [3]. If the channel can be supported, the necessary resources are tentatively allocated and the establish_request message is forwarded to the next node. Once this message reaches the destination, an establish_accept message is sent hop by hop back from the destination to the source, backtracking along the path. <p> During establishment, the client must specify its performance requirements (the Quality of Service, or QoS, it needs) and a worst-case description of the traffic it will transmit over the new channel <ref> [1] </ref> [3]. The QoS parameters of the RCAP interface are listed in Table 2, the traffic parameters in Table 3. Note that two of the four QoS parameters in Table 2 are probabilities to support statistical bounds on delay and loss. <p> When an mbuf used by a channel is released, it is returned to the set of buffers reserved for that channel instead of to the system-wide buffer pool. A number of rate-based service disciplines [27] have been implemented in our suite: Delay-Earliest-Due-Date <ref> [1] </ref>, Jitter-Earliest-Due-Date [22] and Rate-Controlled Static Priority [28]. For the latter two, we implemented both rate-jitter and delay-jitter controlling regulators Device Drivers RTIP IP UDP TCPRMTP Socket Layer RCAP Application User Space Kernel Space IPC Layer Transport Layer Network Layer Network-Interface Layer FIGURE 5. Software structure of RMTP/RTIP.
Reference: [2] <author> D. Ferrari, A. Banerjea, and H. Zhang, </author> <title> Network Support for Multimedia: A Discussion of the Tenet Approach, Computer Networks and ISDN Systems 26, </title> <journal> special issue on Multimedia Networking, </journal> <year> 1994. </year>
Reference-contexts: However, the corresponding admission control algorithms have not yet been fully specified. 2 The Architecture of the Tenet Suite The Tenet scheme for real-time communication is based on some principles that dictated, or suggested, some of the architectural characteristics of our protocol suite <ref> [2] </ref>. In this section, we 5 briey recall some of these principles. More details, as well as basic motivations, have been presented and discussed elsewhere [1] [2] [3] [4]. First, all layers in a networks architecture, in particular, the datalink layer, must be able to provide guaranteed-performance services. <p> The Tenet scheme for real-time communication is based on some principles that dictated, or suggested, some of the architectural characteristics of our protocol suite <ref> [2] </ref>. In this section, we 5 briey recall some of these principles. More details, as well as basic motivations, have been presented and discussed elsewhere [1] [2] [3] [4]. First, all layers in a networks architecture, in particular, the datalink layer, must be able to provide guaranteed-performance services. Datalink layers such as synchronous FDDI, ATM with a suitable signaling protocol and admission tests, and 100VG-AnyLAN meet this requirement.
Reference: [3] <author> D. Ferrari and D. C. Verma, </author> <title> A Scheme for Real-Time Channel Establishment in Wide-Area Networks, </title> <journal> IEEE Journal on Selected Areas in Communications 8, </journal> <volume> 3, </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: In this section, we 5 briey recall some of these principles. More details, as well as basic motivations, have been presented and discussed elsewhere [1] [2] <ref> [3] </ref> [4]. First, all layers in a networks architecture, in particular, the datalink layer, must be able to provide guaranteed-performance services. Datalink layers such as synchronous FDDI, ATM with a suitable signaling protocol and admission tests, and 100VG-AnyLAN meet this requirement. <p> In the forward pass, an establish_request message is sent, hop by hop, from the source to the destination of the channel. At each node along the path where RTIP runs, a local RCAP entity performs admission control tests [1] <ref> [3] </ref>. If the channel can be supported, the necessary resources are tentatively allocated and the establish_request message is forwarded to the next node. Once this message reaches the destination, an establish_accept message is sent hop by hop back from the destination to the source, backtracking along the path. <p> During establishment, the client must specify its performance requirements (the Quality of Service, or QoS, it needs) and a worst-case description of the traffic it will transmit over the new channel [1] <ref> [3] </ref>. The QoS parameters of the RCAP interface are listed in Table 2, the traffic parameters in Table 3. Note that two of the four QoS parameters in Table 2 are probabilities to support statistical bounds on delay and loss. <p> Note that two of the four QoS parameters in Table 2 are probabilities to support statistical bounds on delay and loss. These services allow bandwidth and buffer space to be over-booked, appreciably increasing the utilization of these resources <ref> [3] </ref>. Establishment of a channel is analogous to the signing of a contract: the network guarantees the performance bounds requested by the application, provided that the application obeys its traffic description at all times and that there are no failures in the network during the channels lifetime [22] [23].
Reference: [4] <author> D. Ferrari, </author> <title> Real-Time Communication in an Internetwork, </title> <journal> Journal of High Speed Networks 1, </journal> <volume> 1, </volume> <year> 1992. </year>
Reference-contexts: In this section, we 5 briey recall some of these principles. More details, as well as basic motivations, have been presented and discussed elsewhere [1] [2] [3] <ref> [4] </ref>. First, all layers in a networks architecture, in particular, the datalink layer, must be able to provide guaranteed-performance services. Datalink layers such as synchronous FDDI, ATM with a suitable signaling protocol and admission tests, and 100VG-AnyLAN meet this requirement. <p> RCAP abstracts these network-specific bounds into network-independent bounds that can be used by the end-to-end establishment process. Such an approach allows RCAP to utilize the specific characteristics of an individual network in order to provide guarantees, yet hide the underlying details of that network whenever possible <ref> [4] </ref> [18]. 3.2 RTIP The Real-Time Internet Protocol (RTIP) is the network layer of the Tenet Suite. Its main function is to deliver packets to meet the channels real-time requirements. In contrast to the IP datagram service, RTIP is connection-oriented.
Reference: [5] <author> M. Moran and R. Gusella, </author> <title> System Support for Efficient Dynamically-Configurable Multi-Party Interactive Multimedia Applications, </title> <booktitle> Proc. Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> San Diego, CA, </address> <month> Novem-ber </month> <year> 1992. </year> <month> 26 </month>
Reference-contexts: Several simplifications were made to facilitate the development of the first suite. Most notably, we decided to provide only unicast real-time channels, and to introduce multicast capabilities in a later version of the suite after studying the service requirements of multi-party applications <ref> [5] </ref>. We also postponed the study of routing algorithms for real-time channels. By Summer 1991, the suite had been specified in all its details and extensively simulated. We subsequently implemented, and tested the protocols on a local-area FDDI network.
Reference: [6] <author> D. Ferrari, J. C. Pasquale, and G. Polyzos, </author> <title> Network Issues for Sequoia 2000, </title> <booktitle> Proc. </booktitle> <address> Comp-Con Spring92, San Francisco, CA, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: By Summer 1991, the suite had been specified in all its details and extensively simulated. We subsequently implemented, and tested the protocols on a local-area FDDI network. We then installed the Tenet protocols on the experimental wide-area network of Project Sequoia 2000 <ref> [6] </ref>, and performed various experiments and demonstrations with continuous-media loads.
Reference: [7] <author> A. Gupta, W. Heffner, M. Moran, and C. Szyperski, </author> <title> Network Support for Realtime Multi-Party Applications, </title> <booktitle> Proc. Fourth International Workshop on Network and Operating System Support for Digital Audio and Video (NOSSDAV 93), </booktitle> <address> Lancaster, England, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: We then installed the Tenet protocols on the experimental wide-area network of Project Sequoia 2000 [6], and performed various experiments and demonstrations with continuous-media loads. A second generation protocol suite (Suite 2) has been designed to support multi-party real-time communication (including multicast) and is currently being implemented <ref> [7] </ref>. 1.2 Related Work The literature on real-time communication contains many proposals for satisfying the requirements of continuous-media and other real-time applications. Most schemes, however, have not yet been used in designing real-time protocols. At best, paper designs of such protocols have been provided. <p> This problem is being solved in Suite 2 by providing multicast channels, resource sharing between related channels in the same conference [34], and higher-level abstractions to simplify connection setup for multi-party communication <ref> [7] </ref>. <p> The next generation scheme and suite (Scheme 2 and Suite 2, respectively) have been designed, as mentioned above; a prototype implementation is almost complete, and multicast channel establishment has already been demonstrated. Suite 2 supports multi-party communication, including routing and establishment of multicast connections and resource sharing <ref> [7] </ref>. A key difference between the resource sharing in Scheme 2 and other proposals is that Scheme 2 uses simple, application-specific hints to share resources among related connections while preserving the 25 mathematical guarantees of the Tenet approach [34].
Reference: [8] <author> C. Topolcic, </author> <title> Experimental Internet Stream Protocol, </title> <type> Version 2 (ST-II), Internet RFC 1190, </type> <month> October </month> <year> 1990. </year>
Reference-contexts: Most schemes, however, have not yet been used in designing real-time protocols. At best, paper designs of such protocols have been provided. So far, there have been very few implementations in this increasingly important area of networking research. ST-II <ref> [8] </ref> is a connection-oriented internetwork protocol that has been implemented in several versions (e.g., [9], [10]). Although the protocol specification includes a FlowSpec that indi 5. <p> This separation between setup and transfer suggests that establishment (and teardown) be done by a control protocol distinct from the data delivery stack. This solution is not universally preferred (as in the cases of ST-II <ref> [8] </ref> and SRP [17]), but it had the advantage of allowing us to develop, test, and maintain the control and data delivery protocols separately. Control functions in the Tenet Suite are provided by the Real-Time Channel Administration Protocol (RCAP) [18] [19].
Reference: [9] <author> C. Partridge and S. Pink, </author> <title> An Implementation of the Revised Internet Stream Protocol (ST-2), </title> <journal> Journal of Internetworking: Research and Experience 3, </journal> <volume> 1, </volume> <month> March </month> <year> 1992. </year>
Reference-contexts: At best, paper designs of such protocols have been provided. So far, there have been very few implementations in this increasingly important area of networking research. ST-II [8] is a connection-oriented internetwork protocol that has been implemented in several versions (e.g., <ref> [9] </ref>, [10]). Although the protocol specification includes a FlowSpec that indi 5.
Reference: [10] <author> L. Delgrossi, R. G. Herrtwich, and F. O. Hoffman, </author> <title> An Implementation of ST-II for the Heidelberg Transport System, </title> <journal> IBM ENC TR-43.9303, Journal of Internetworking: Research and Experience, </journal> <volume> 5, 2, </volume> <month> June </month> <year> 1994. </year>
Reference-contexts: At best, paper designs of such protocols have been provided. So far, there have been very few implementations in this increasingly important area of networking research. ST-II [8] is a connection-oriented internetwork protocol that has been implemented in several versions (e.g., [9], <ref> [10] </ref>). Although the protocol specification includes a FlowSpec that indi 5. In this paper, we define a real-time channel to be a simplex connection that provides mathematically provable deterministic or probabilistic performance guarantees on data delivery. 4 cates resource requirements, the algorithms for real-time admission control have not been specified. <p> To the best of our knowledge, the implementation by Delgrossi et al. <ref> [10] </ref> is the only one providing mathematically provable guarantees. It uses admission control algorithms based on the Tenet scheme over Token Ring and FDDI networks [11]. ST-II follows many of the same principles as the Tenet Suite; it is a very rich protocol and can support multicast streams. <p> It uses admission control algorithms based on the Tenet scheme over Token Ring and FDDI networks [11]. ST-II follows many of the same principles as the Tenet Suite; it is a very rich protocol and can support multicast streams. However, neither the protocol specification nor the implementation of <ref> [10] </ref> provide a mechanism for performing and encapsulating reservations on multi-hop subnetworks (e.g., ATM networks). More recently, RSVP has been designed as a protocol for exchanging reservation messages [12].
Reference: [11] <author> R. G. </author> <title> Herrtwich, </title> <type> personal communication, </type> <month> November </month> <year> 1992. </year>
Reference-contexts: To the best of our knowledge, the implementation by Delgrossi et al. [10] is the only one providing mathematically provable guarantees. It uses admission control algorithms based on the Tenet scheme over Token Ring and FDDI networks <ref> [11] </ref>. ST-II follows many of the same principles as the Tenet Suite; it is a very rich protocol and can support multicast streams. However, neither the protocol specification nor the implementation of [10] provide a mechanism for performing and encapsulating reservations on multi-hop subnetworks (e.g., ATM networks).
Reference: [12] <author> L. Zhang, S. Deering, D. Estrin, S. Shenker, and D. Zappala, RSVP: </author> <title> A New Resource ReSerVation Protocol, </title> <journal> IEEE Network, </journal> <month> September </month> <year> 1993. </year>
Reference-contexts: However, neither the protocol specification nor the implementation of [10] provide a mechanism for performing and encapsulating reservations on multi-hop subnetworks (e.g., ATM networks). More recently, RSVP has been designed as a protocol for exchanging reservation messages <ref> [12] </ref>. A subject of current work within the Internet Engineering Task Force, RSVP serves a role similar to, and shares many features with, our channel setup protocol. The major difference is that RSVP reservations are considered to be soft state, which must be periodically refreshed.
Reference: [13] <author> A. Banerjea, </author> <title> Fault Management for Realtime Networks, </title> <type> Ph.D. dissertation, </type> <institution> University of California at Berkeley, </institution> <month> December, </month> <year> 1994. </year>
Reference-contexts: In contrast, the Tenet suite uses hard state to provide consistent performance during normal operation and explicit recovery in case of network faults <ref> [13] </ref>. As the implementation of RSVP and associated admission control algorithms was in progress during this study, we could not compare its performance and utility to those of the Tenet Suite. Some real-time protocols have been implemented for specific networks (e.g., [14], [15]). <p> This protocol computes new routes and resource allocations in the event of network failures <ref> [13] </ref>. The suite that resulted from these considerations is shown in Figure 1, which represents our proposed architecture for an integrated services internetwork. At the time of this writing, CMTP has been almost entirely implemented, but has not been tested and integrated with the other protocols. <p> These mechanisms have been experimented with in the context of Suite 1 [21]. DCM has also been used and augmented to support fault tolerance and fault recovery <ref> [13] </ref> [37].
Reference: [14] <author> A. Lazar and C. Pacifici, </author> <title> Control of Resources in Broadband Networks with Quality of Service Guarantees, </title> <journal> IEEE Communication Magazine, </journal> <month> October </month> <year> 1991. </year>
Reference-contexts: As the implementation of RSVP and associated admission control algorithms was in progress during this study, we could not compare its performance and utility to those of the Tenet Suite. Some real-time protocols have been implemented for specific networks (e.g., <ref> [14] </ref>, [15]). To the best of our knowledge, these implementations are not applicable to heterogeneous internet-works. Standard signalling protocols for ATM networks can support mathematically provable performance guarantees [16].
Reference: [15] <author> I. Cidon, I. Gopal and R. Guerin, </author> <title> Bandwidth Management and Congestion Control in PlaNET, </title> <journal> IEEE Communication Magazine, </journal> <month> October </month> <year> 1991. </year>
Reference-contexts: As the implementation of RSVP and associated admission control algorithms was in progress during this study, we could not compare its performance and utility to those of the Tenet Suite. Some real-time protocols have been implemented for specific networks (e.g., [14], <ref> [15] </ref>). To the best of our knowledge, these implementations are not applicable to heterogeneous internet-works. Standard signalling protocols for ATM networks can support mathematically provable performance guarantees [16].
Reference: [16] <author> ATM Forum, </author> <title> ATM User-Network Interface Specification Version 3.0, </title> <month> September </month> <year> 1993. </year>
Reference-contexts: Some real-time protocols have been implemented for specific networks (e.g., [14], [15]). To the best of our knowledge, these implementations are not applicable to heterogeneous internet-works. Standard signalling protocols for ATM networks can support mathematically provable performance guarantees <ref> [16] </ref>. However, the corresponding admission control algorithms have not yet been fully specified. 2 The Architecture of the Tenet Suite The Tenet scheme for real-time communication is based on some principles that dictated, or suggested, some of the architectural characteristics of our protocol suite [2].
Reference: [17] <author> D. P. Anderson, R. G. Herrtwich, and C. Schaefer, SRP: </author> <title> A Resource Reservation Protocol for Guaranteed Performance Communication in the Internet, </title> <booktitle> TR-90-006, International Computer Science Institute, </booktitle> <address> Berkeley, CA, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: This separation between setup and transfer suggests that establishment (and teardown) be done by a control protocol distinct from the data delivery stack. This solution is not universally preferred (as in the cases of ST-II [8] and SRP <ref> [17] </ref>), but it had the advantage of allowing us to develop, test, and maintain the control and data delivery protocols separately. Control functions in the Tenet Suite are provided by the Real-Time Channel Administration Protocol (RCAP) [18] [19].
Reference: [18] <author> A. Banerjea and B. Mah, </author> <title> The Real-Time Channel Administration Protocol, </title> <booktitle> Proc. Second International Workshop on Network and Operating System Support for Digital Audio and Video (NOSSDAV 91), </booktitle> <address> Heidelberg, Germany, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: Control functions in the Tenet Suite are provided by the Real-Time Channel Administration Protocol (RCAP) <ref> [18] </ref> [19]. An important principle of the Tenet approach is that all real-time applications have requirements expressible by general performance or reliability parameters. Therefore, there is no need for media-specific protocols at the network or transport layers, as one general-purpose protocol at each layer will suffice. <p> RCAP abstracts these network-specific bounds into network-independent bounds that can be used by the end-to-end establishment process. Such an approach allows RCAP to utilize the specific characteristics of an individual network in order to provide guarantees, yet hide the underlying details of that network whenever possible [4] <ref> [18] </ref>. 3.2 RTIP The Real-Time Internet Protocol (RTIP) is the network layer of the Tenet Suite. Its main function is to deliver packets to meet the channels real-time requirements. In contrast to the IP datagram service, RTIP is connection-oriented.
Reference: [19] <author> B. Mah, </author> <title> A Mechanism for the Administration of Real-Time Channels, </title> <type> MS Report, </type> <institution> University of California at Berkeley, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Control functions in the Tenet Suite are provided by the Real-Time Channel Administration Protocol (RCAP) [18] <ref> [19] </ref>. An important principle of the Tenet approach is that all real-time applications have requirements expressible by general performance or reliability parameters. Therefore, there is no need for media-specific protocols at the network or transport layers, as one general-purpose protocol at each layer will suffice. <p> the first implementation of each of the currently-operational proto cols in the Tenet Suite (RCAP, RTIP, and RMTP). 4.1 RCAP The current RCAP implementation is divided into two parts: a library linked into each cli ent application and a daemon process that runs on each node, independent of the applications <ref> [19] </ref>. These components, and the relationships between them, are shown in Figure 4. This imple mentation is extremely portable, compiling without modification on nearly all UNIX-like opera tion systems. The RCAP library implements the network control API.
Reference: [20] <author> B. Wolfinger and M. Moran, </author> <title> A Continuous Media Data Transport Service and Protocol for Real-Time Communication in High Speed Networks, </title> <booktitle> Proc. Second International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> Heidelberg, Germany, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: At the time of this writing, CMTP has been almost entirely implemented, but has not been tested and integrated with the other protocols. Its design is described in <ref> [20] </ref>. 3 Design of the Tenet Protocols This section discusses the design of our signalling protocol (RCAP), our network layer protocol (RTIP), and one of our transport protocols (RMTP). 3.1 RCAP Signalling and control services are provided in the Tenet Suite by the Real-Time Channel Administration Protocol (RCAP).
Reference: [21] <author> C. Parris, H. Zhang, and D. Ferrari, </author> <title> A Dynamic Management Scheme for Real-Time Connections, </title> <booktitle> Proc. INFOCOM 94, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: The RCAP messages are shown in Table 1. Channel establishment is performed in a single round trip in order to keep the setup time small. More complex client negotiations and/or resource balancing may be added using a method similar to DCM <ref> [21] </ref>. In the forward pass, an establish_request message is sent, hop by hop, from the source to the destination of the channel. At each node along the path where RTIP runs, a local RCAP entity performs admission control tests [1] [3]. <p> Besides the already mentioned enhancements to the admission control tests, mechanisms for Dynamic Connection Management (DCM) have been developed to support dynamic adjustment of traffic and performance parameters and/or routes of existing connections. These mechanisms have been experimented with in the context of Suite 1 <ref> [21] </ref>. DCM has also been used and augmented to support fault tolerance and fault recovery [13] [37].
Reference: [22] <author> D. Ferrari, </author> <title> Distributed Delay Jitter Control in Packet-Switching Internetworks, </title> <journal> Journal of Internetworking: Research and Experience 4, </journal> <volume> 1, </volume> <year> 1993. </year> <month> 27 </month>
Reference-contexts: Establishment of a channel is analogous to the signing of a contract: the network guarantees the performance bounds requested by the application, provided that the application obeys its traffic description at all times and that there are no failures in the network during the channels lifetime <ref> [22] </ref> [23]. This contract is valid until the channel is torn down. Finally, either the source or the destination of a given channel can request that it be closed, using the close_request_forward and close_request_reverse messages. <p> In addition, each packet carries a timestamp, which indicates the time the packet was received by the RTIP module at the sending host, and is used by our distributed jitter-control mechanism <ref> [22] </ref>. RTIP includes a checksum for 6. Since RTIP was designed for experimentation under as few constraints as possible, we did not try to maintain IP compatibility, but merely ensured that the two protocols could co-exist. <p> Each RTIP entity contains a regulator and a scheduler. The regulator monitors the traffic on each connection and shapes it according to the traffic specification of that connection. The regulator also ensures that a connections delay jitter requirements are satisfied <ref> [22] </ref>. The scheduler ensures that no packet (or a bounded fraction of the packets) remain in the node longer than their local delay bounds. 3.3 RMTP RMTP provides a message-based abstraction on top of RTIP. An instance of RMTP is needed at both endpoints of a real-time channel. <p> When an mbuf used by a channel is released, it is returned to the set of buffers reserved for that channel instead of to the system-wide buffer pool. A number of rate-based service disciplines [27] have been implemented in our suite: Delay-Earliest-Due-Date [1], Jitter-Earliest-Due-Date <ref> [22] </ref> and Rate-Controlled Static Priority [28]. For the latter two, we implemented both rate-jitter and delay-jitter controlling regulators Device Drivers RTIP IP UDP TCPRMTP Socket Layer RCAP Application User Space Kernel Space IPC Layer Transport Layer Network Layer Network-Interface Layer FIGURE 5. Software structure of RMTP/RTIP.
Reference: [23] <author> D. C. Verma, </author> <title> Guaranteed Performance Communication in High Speed Networks, </title> <type> PhD dissertation, </type> <institution> University of California at Berkeley, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: Establishment of a channel is analogous to the signing of a contract: the network guarantees the performance bounds requested by the application, provided that the application obeys its traffic description at all times and that there are no failures in the network during the channels lifetime [22] <ref> [23] </ref>. This contract is valid until the channel is torn down. Finally, either the source or the destination of a given channel can request that it be closed, using the close_request_forward and close_request_reverse messages.
Reference: [24] <author> D. Ritchie and K. Thompson, </author> <title> The UNIX Time-Sharing System, </title> <journal> Communications of ACM 7, </journal> <volume> 7, </volume> <month> July </month> <year> 1974. </year>
Reference-contexts: RcapStatusRequest () Called by the source application to obtain the status of the channel at each of the intermediate nodes. RcapCloseRequest () Used by either sender or receiver to close a given real time channel and release its resources. TABLE 4. RCAP library exported procedures. 13 operating systems <ref> [24] </ref> with networking software derived from BSD UNIX [25] [26]. The software structure of the RMTP and RTIP implementations is shown in Figure 5. While RCAP is implemented in user space, RMTP and RTIP are implemented in the kernel.
Reference: [25] <author> S. J. Lefer, M. K. McKusick, M. J. Karels, and J. S. Quarterman, </author> <title> The Design and Implementation of the 4.3 BSD UNIX Operating System, </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: RcapCloseRequest () Used by either sender or receiver to close a given real time channel and release its resources. TABLE 4. RCAP library exported procedures. 13 operating systems [24] with networking software derived from BSD UNIX <ref> [25] </ref> [26]. The software structure of the RMTP and RTIP implementations is shown in Figure 5. While RCAP is implemented in user space, RMTP and RTIP are implemented in the kernel. A new type of socket, with protocol type IPPROTO_RMTP, is used by applications for sending and receiving data.
Reference: [26] <author> S. J. Lefer, W. N. Joy, R. S. Fabry, and M. J. Karels, </author> <title> Networking Implementation Notes: 4.3 BSD Edition, Unix System Managers Manual, </title> <booktitle> USENIX Association, </booktitle> <month> April </month> <year> 1986. </year>
Reference-contexts: RcapCloseRequest () Used by either sender or receiver to close a given real time channel and release its resources. TABLE 4. RCAP library exported procedures. 13 operating systems [24] with networking software derived from BSD UNIX [25] <ref> [26] </ref>. The software structure of the RMTP and RTIP implementations is shown in Figure 5. While RCAP is implemented in user space, RMTP and RTIP are implemented in the kernel. A new type of socket, with protocol type IPPROTO_RMTP, is used by applications for sending and receiving data.
Reference: [27] <author> H. Zhang and D. Ferrari, </author> <title> Rate-Controlled Service Disciplines, </title> <journal> Journal of High-Speed Networks 3, </journal> <volume> 4, </volume> <year> 1994. </year>
Reference-contexts: When an mbuf used by a channel is released, it is returned to the set of buffers reserved for that channel instead of to the system-wide buffer pool. A number of rate-based service disciplines <ref> [27] </ref> have been implemented in our suite: Delay-Earliest-Due-Date [1], Jitter-Earliest-Due-Date [22] and Rate-Controlled Static Priority [28]. <p> For the latter two, we implemented both rate-jitter and delay-jitter controlling regulators Device Drivers RTIP IP UDP TCPRMTP Socket Layer RCAP Application User Space Kernel Space IPC Layer Transport Layer Network Layer Network-Interface Layer FIGURE 5. Software structure of RMTP/RTIP. The Internet protocols co-exist with the Tenet Suite. 14 <ref> [27] </ref>. The implementation is modular, so that other regulators and schedulers can easily be used. The operation of a rate-controlled service discipline involves three tasks: calculating the eligibility time of each packet, holding the packet if necessary, and enqueueing and dequeueing packets at the scheduler. <p> The operation of a rate-controlled service discipline involves three tasks: calculating the eligibility time of each packet, holding the packet if necessary, and enqueueing and dequeueing packets at the scheduler. The eligibility time of each packet can be calculated using the formulae defined in <ref> [27] </ref> [29]. Packets can be held in a host by putting the transmitting process to sleep, and in a gateway router by using the UNIX timeout procedure. Finally, the implementation of the enqueue and dequeue operations depends on the scheduling policy.
Reference: [28] <author> H. Zhang and D. Ferrari, </author> <title> Rate-Controlled Static Priority Queueing, </title> <booktitle> Proc. IEEE INFO-COM93, </booktitle> <address> San Francisco, CA, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: When an mbuf used by a channel is released, it is returned to the set of buffers reserved for that channel instead of to the system-wide buffer pool. A number of rate-based service disciplines [27] have been implemented in our suite: Delay-Earliest-Due-Date [1], Jitter-Earliest-Due-Date [22] and Rate-Controlled Static Priority <ref> [28] </ref>. For the latter two, we implemented both rate-jitter and delay-jitter controlling regulators Device Drivers RTIP IP UDP TCPRMTP Socket Layer RCAP Application User Space Kernel Space IPC Layer Transport Layer Network Layer Network-Interface Layer FIGURE 5. Software structure of RMTP/RTIP.
Reference: [29] <author> H. Zhang, </author> <title> Service Disciplines for Integrated Services Packet-Switching Networks, </title> <type> PhD Dissertation, </type> <institution> UCB/CSD-94-788, University of California at Berkeley, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: The operation of a rate-controlled service discipline involves three tasks: calculating the eligibility time of each packet, holding the packet if necessary, and enqueueing and dequeueing packets at the scheduler. The eligibility time of each packet can be calculated using the formulae defined in [27] <ref> [29] </ref>. Packets can be held in a host by putting the transmitting process to sleep, and in a gateway router by using the UNIX timeout procedure. Finally, the implementation of the enqueue and dequeue operations depends on the scheduling policy.
Reference: [30] <author> H. Zhang and T. Fisher, </author> <title> Preliminary Measurement of the RMTP/RTIP, </title> <booktitle> Proc. Third International Workshop on Network and Operating System Support for Digital Audio and Video (NOSSDAV92), </booktitle> <address> San Diego, CA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: We also made no attempt to use realistic load patterns; the load was gener 15 ated by sending fixed-size packets in a tight loop. More details can be found in <ref> [30] </ref>. 5.1.1 Maximum Speed of RMTP/RTIP IP and UDP/IP. The experiment was performed with one process on theorem sending 10,000 packets of the same size in a tight loop to another process on faith, through lemma. The packet size was varied to obtain the curves shown.
Reference: [31] <author> A. Banerjea, E. Knightly, F. Templin, and H. Zhang, </author> <title> Experiments with the Tenet Real-Time Protocol Suite on the Sequoia 2000 Wide Area Network, </title> <booktitle> Proc. ACM Multimedia94, </booktitle> <address> San Francisco, CA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: We compared the performances of a video session using each of the protocols in experiments summarized in this section. Our Sequoia experiments are described in greater detail in <ref> [31] </ref>. X min X ave I FIGURE 10. Effect of rate control at source on an RMTP/RTIP channel.
Reference: [32] <author> H. Zhang and D. Ferrari, </author> <title> Improving Utilization for Deterministic Service in Multimedia Communication, </title> <booktitle> Proc. 1994 IEEE International Conference on Multimedia Computing and Systems, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Overly-pessimistic algorithms are undesirable because they reduce the real-time capacity of the network 9 . We now have more optimistic tests for both deterministic <ref> [32] </ref> and statistical [33] guarantees, and plan to experiment with them in Tenet Suite 2. Multi-party support is needed: As we expected, the absence of multi-party support has been a hindrance to even small multimedia conferences using Suite 1.
Reference: [33] <author> H. Zhang and E. Knightly, </author> <title> Providing End-to-End Statistical Guarantees Using Bounding Interval Dependent Stochastic Models, </title> <booktitle> Proc. ACM SIGMETRICS 94, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Overly-pessimistic algorithms are undesirable because they reduce the real-time capacity of the network 9 . We now have more optimistic tests for both deterministic [32] and statistical <ref> [33] </ref> guarantees, and plan to experiment with them in Tenet Suite 2. Multi-party support is needed: As we expected, the absence of multi-party support has been a hindrance to even small multimedia conferences using Suite 1.
Reference: [34] <author> A. Gupta, W. Howe, M. Moran, and Q. Nguyen, </author> <title> Scalable Resource Reservation for Multi-Party Real-Time Communication, </title> <booktitle> Proc. </booktitle> <address> INFOCOM95, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: This problem has two aspects: without multi-party support, connection setup for an N-way conference is cumbersome, and the amounts of resources reserved are high. This problem is being solved in Suite 2 by providing multicast channels, resource sharing between related channels in the same conference <ref> [34] </ref>, and higher-level abstractions to simplify connection setup for multi-party communication [7]. <p> A key difference between the resource sharing in Scheme 2 and other proposals is that Scheme 2 uses simple, application-specific hints to share resources among related connections while preserving the 25 mathematical guarantees of the Tenet approach <ref> [34] </ref>. Suite 2 also supports partitioning of network resources into independent virtual networks [35] and supports advance reservation of resources for future real-time channels [36]. In addition, several improvements have been made to the unicast scheme and suite.
Reference: [35] <author> D. Ferrari and A. Gupta, </author> <title> Resource Partitioning for Real-Time Communication, </title> <booktitle> Proc. IEEE Symposium on Global Data Networking, </booktitle> <address> Cairo, Egypt, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Suite 2 also supports partitioning of network resources into independent virtual networks <ref> [35] </ref> and supports advance reservation of resources for future real-time channels [36]. In addition, several improvements have been made to the unicast scheme and suite.
Reference: [36] <author> D. Ferrari, A. Gupta, and G. Ventre, </author> <title> Distributed Advance Reservation of Real-Time Connections, </title> <booktitle> Proc. Fifth International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> (NOSSDAV95), Durham, NH, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Suite 2 also supports partitioning of network resources into independent virtual networks [35] and supports advance reservation of resources for future real-time channels <ref> [36] </ref>. In addition, several improvements have been made to the unicast scheme and suite. Besides the already mentioned enhancements to the admission control tests, mechanisms for Dynamic Connection Management (DCM) have been developed to support dynamic adjustment of traffic and performance parameters and/or routes of existing connections.
Reference: [37] <author> A. Banerjea, C. Parris, and D. Ferrari, </author> <title> Recovering Guaranteed Performance Service Connections from Single and Multiple Faults, </title> <booktitle> Proc. </booktitle> <address> GLOBECOM94, San Francisco, CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: These mechanisms have been experimented with in the context of Suite 1 [21]. DCM has also been used and augmented to support fault tolerance and fault recovery [13] <ref> [37] </ref>.
References-found: 37

