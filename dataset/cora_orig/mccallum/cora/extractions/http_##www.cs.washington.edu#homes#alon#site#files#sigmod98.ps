URL: http://www.cs.washington.edu/homes/alon/site/files/sigmod98.ps
Refering-URL: http://www.cs.washington.edu/homes/alon/site/PaperAbstractPresentation_bib31.html
Root-URL: 
Email: mff@research.att.com  dana@rodin.inria.fr  kang@savera.com  alon@cs.washington.com  suciu@research.att.com  
Title: Catching the Boat with Strudel: Experiences with a Web-Site Management System  
Author: Mary Fernandez Daniela Florescu Jaewoo Kang Alon Levy Dan Suciu 
Address: Washington  
Affiliation: AT&T Labs  Inria Roquencourt  Savera Systems  Univ. of  AT&T Labs  
Abstract: The Strudel system applies concepts from database management systems to the process of building Web sites. Strudel's key idea is separating the management of the site's data, the creation and management of the site's structure, and the visual presentation of the site's pages. First, the site builder creates a uniform model of all data available at the site. Second, the builder uses this model to declaratively define the Web site's structure by applying a "site-definition query" to the underlying data. The result of evaluating this query is a "site graph", which represents both the site's content and structure. Third, the builder specifies the visual presentation of pages in Strudel's HTML-template language. The data model underlying Strudel is a semi-structured model of labeled directed graphs. We describe Strudel's key characteristics, report on our experiences using Strudel, and present the technical problems that arose from our experience. We describe our experience constructing several Web sites with Strudel and discuss the impact of potential users' requirements on Strudel's design. We address two main questions: (1) when does a declarative specification of site structure provide significant benefits, and (2) what are the main advantages provided by the semi-structured data model. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul. </author> <title> Querying semi-structured data. </title> <booktitle> In Proceedings of the ICDT, </booktitle> <year> 1997. </year>
Reference-contexts: In Strudel's mediator component, as in all of its other components, all external and internal data is modeled as a labeled directed graph, which is the model commonly used for semistructured data <ref> [1, 6] </ref>. A set of source-specific wrappers translates the external representation into the graph model. The integrated view of the data is called the data graph. Second, the site builder declaratively specifies the Web site's structure using a site-definition query in StruQL, Strudel's query language. <p> Strudel is based on a semistructured data model of labeled, directed graphs. This model was introduced to manage semistructured data, which is characterized as having few type constraints, irregular structure, and rapidly evolving or missing schema <ref> [1, 6] </ref>. This data model was appealing for Strudel, because Web sites are graphs with irregular structure and non-traditional schemas. Furthermore, semistructured data facilitates integration of data from multiple, non-traditional sources. Strudel provides several benefits.
Reference: [2] <author> S. Adali, K. Candan, Y. Papakonstantinou, and V. Sub-rahmanian. </author> <title> Query caching and optimization in distributed mediator systems. </title> <booktitle> In Proceedings of SIGMOD-96, </booktitle> <year> 1996. </year>
Reference-contexts: This simplified our implementation and sufficed for our applications, which have small databases. Strudel's architecture, however, can accommodate either approach. Recent research addresses the problem of specifying the relationship between the mediated view of the data and the external data sources. Global as view (GAV) <ref> [2, 9, 17, 19, 23] </ref> and Local as view (LAV) [11, 18, 21] are two techniques. In GAV, the relationship between the two relations is specified by a set of queries.
Reference: [3] <author> G. Arocena and A. Mendelzon. WebOQL: </author> <title> Restructuring documents, database and webs. </title> <booktitle> In Proceedings of International Conference on Data Engineering, </booktitle> <pages> pages 24-33, </pages> <year> 1998. </year>
Reference-contexts: Other recent research prototypes support the separation of the three tasks, but do not support declarative specification of content or structure [5, 22]. Other research projects support declarative specification, but merge the tasks <ref> [3, 10] </ref>. Commercial tools such as Vignette's StoryServer and those provided by major database vendors separate the management of the underlying data from its visual presentation. <p> Whereas Strudel's focus is on integrating data from various types of data sources and on generating new sites, other systems focus on extracting structure from existing Web pages and on producing a new view. Both the WebOQL <ref> [3] </ref> and Araneus [5] systems support querying of existing Web sites and can produce views of sites as restructured graphs. WebOQL is similar in spirit to Strudel. <p> Another benefit is that the query stage is independently extensible; for example, we could extend it to include grouping and aggregation. This separation also simplifies query optimization, because all where clauses can be evaluated by an optimizer at once. It should be noted that other languages (e.g., WebOQL <ref> [3] </ref>, UnQL [8]) do not separate selection and restructuring. StruQL's declarative semantics were also important. A site builder often designs related parts of a site's structure individually then links them together. The ability to specify link clauses in whatever order is natural makes this possible.
Reference: [4] <author> D. Atkins, T. Ball, M. Benedikt, G. Bruns, K. Cox, P. Mataga, and K. Rehor. </author> <title> Experience with a domain specific language for form-based services. </title> <booktitle> In Proceedings of Conference on Domain-Specific Languages, </booktitle> <pages> pages 37-49, </pages> <year> 1998. </year>
Reference-contexts: An open problem is how and where this state should be stored: in a client-side browser and/or a server-side query processor. To solve this problem, we expect to use existing systems and techniques that support stateful Web services <ref> [4] </ref>. Although adequate for a prototype, Strudel's warehousing mediator is inadequate for sites whose data sources are large or change frequently. To support large-scale sites, we need to solve the problem of incremental view updates for semistructured data, which is an open problem.
Reference: [5] <author> P. Atzeni, G. Mecca, and P. Merialdo. </author> <title> To weave the web. </title> <booktitle> In Proceedings of VLDB, </booktitle> <pages> pages 206-215, </pages> <year> 1997. </year>
Reference-contexts: Strudel clearly separates the three tasks of building Web sites and is the first system that supports declarative specification of a site's content and structure. Other recent research prototypes support the separation of the three tasks, but do not support declarative specification of content or structure <ref> [5, 22] </ref>. Other research projects support declarative specification, but merge the tasks [3, 10]. Commercial tools such as Vignette's StoryServer and those provided by major database vendors separate the management of the underlying data from its visual presentation. <p> Whereas Strudel's focus is on integrating data from various types of data sources and on generating new sites, other systems focus on extracting structure from existing Web pages and on producing a new view. Both the WebOQL [3] and Araneus <ref> [5] </ref> systems support querying of existing Web sites and can produce views of sites as restructured graphs. WebOQL is similar in spirit to Strudel.
Reference: [6] <author> P. Buneman. </author> <title> Semistructured data. </title> <booktitle> In Proceedings of the 16th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> Tucson, </address> <publisher> Ari-zona, </publisher> <pages> pages 117-121, </pages> <year> 1997. </year>
Reference-contexts: In Strudel's mediator component, as in all of its other components, all external and internal data is modeled as a labeled directed graph, which is the model commonly used for semistructured data <ref> [1, 6] </ref>. A set of source-specific wrappers translates the external representation into the graph model. The integrated view of the data is called the data graph. Second, the site builder declaratively specifies the Web site's structure using a site-definition query in StruQL, Strudel's query language. <p> Strudel is based on a semistructured data model of labeled, directed graphs. This model was introduced to manage semistructured data, which is characterized as having few type constraints, irregular structure, and rapidly evolving or missing schema <ref> [1, 6] </ref>. This data model was appealing for Strudel, because Web sites are graphs with irregular structure and non-traditional schemas. Furthermore, semistructured data facilitates integration of data from multiple, non-traditional sources. Strudel provides several benefits.
Reference: [7] <author> P. Buneman, S. Davidson, M. Fernandez, and D. Suciu. </author> <title> Adding structure to unstructured data. </title> <booktitle> In ICDT, </booktitle> <pages> pages 336-350, </pages> <address> Deplhi, Greece, 1997. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: To view a site's complete, abstract structure, we generate a site schema from the site's StruQL queries; site schemas are a refinement of graph schema <ref> [7] </ref>. Because StruQL's query and construction stages are separate, a simple analysis of the query can infer the site schema of the site graph.
Reference: [8] <author> P. Buneman, S. Davidson, G. Hillebrand, and D. Suciu. </author> <title> A query language and optimization techniques for unstructured data. </title> <booktitle> In Proceedings of SIGMOD-96, </booktitle> <pages> pages 505-516, </pages> <year> 1996. </year>
Reference-contexts: This separation also simplifies query optimization, because all where clauses can be evaluated by an optimizer at once. It should be noted that other languages (e.g., WebOQL [3], UnQL <ref> [8] </ref>) do not separate selection and restructuring. StruQL's declarative semantics were also important. A site builder often designs related parts of a site's structure individually then links them together. The ability to specify link clauses in whatever order is natural makes this possible.
Reference: [9] <author> S. Chawathe, H. Garcia-Molina, J. Hammer, K. Ireland, Y. Papakonstantinou, J. Ullman, and J. Widom. </author> <title> The TSIMMIS project: Integration of heterogenous information sources. </title> <booktitle> In proceedings of IPSJ, </booktitle> <address> Tokyo, Japan, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: in Fig. 1; rectangles depict processes and emboldened terms specify the inputs and outputs of the processes. 2.1 System Architecture Data model In every level of the Strudel system, the data model is a labeled, directed graph; this model is similar to OEM, which was developed in the TSIMMIS project <ref> [9] </ref>. The labeled graph model has been proposed for managing semistructured data, which often has few type constraints, a rapidly evolving schema, or missing schema. In this model, the database consists of objects connected by directed edges labeled with string-valued attribute names. <p> The repository's initial data may be obtained from wrappers that convert data in external sources into an internal format. Data is exchanged between the data repository and external sources in a common data definition language, which in the style of OEM's data definition language <ref> [9] </ref>. Strudel's data repository, unlike those in traditional relational or object-oriented systems, can store data that lack schema information. Traditional systems rely on schema information to physically organize the data on disk, but our data repository cannot. Without schema information, we fully index both the schema and the data. <p> This simplified our implementation and sufficed for our applications, which have small databases. Strudel's architecture, however, can accommodate either approach. Recent research addresses the problem of specifying the relationship between the mediated view of the data and the external data sources. Global as view (GAV) <ref> [2, 9, 17, 19, 23] </ref> and Local as view (LAV) [11, 18, 21] are two techniques. In GAV, the relationship between the two relations is specified by a set of queries.
Reference: [10] <author> S. Cluet, C. Delobel, J. Simeon, and K. Smaga. </author> <title> Your mediators need data conversion. </title> <note> In To appear in Proceedings of SIGMOD, </note> <year> 1998. </year>
Reference-contexts: Other recent research prototypes support the separation of the three tasks, but do not support declarative specification of content or structure [5, 22]. Other research projects support declarative specification, but merge the tasks <ref> [3, 10] </ref>. Commercial tools such as Vignette's StoryServer and those provided by major database vendors separate the management of the underlying data from its visual presentation.
Reference: [11] <author> O. M. Duschka and M. R. Genesereth. </author> <title> Answering recursive queries using views. </title> <booktitle> In Proceedings of the 16th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> Tucson, Arizona., </address> <year> 1997. </year>
Reference-contexts: Strudel's architecture, however, can accommodate either approach. Recent research addresses the problem of specifying the relationship between the mediated view of the data and the external data sources. Global as view (GAV) [2, 9, 17, 19, 23] and Local as view (LAV) <ref> [11, 18, 21] </ref> are two techniques. In GAV, the relationship between the two relations is specified by a set of queries. For each relation R in the mediated schema, a query over the source relations specifies how to obtain R's tuples from the sources.
Reference: [12] <author> M. Fernandez, D. Florescu, J. Kang, A. Levy, and D. Suciu. </author> <title> System demonstration strudel: A web-site management system. </title> <booktitle> In ACM SIGMOD Conference on Management of Data, </booktitle> <year> 1997. </year>
Reference-contexts: As a result, several important tasks, such as automatically updating a site, restructuring a site, or enforcing integrity constraints on a site's structure, are tedious to perform. To support these tasks naturally, we view the problem from a data management perspective. We have developed the Strudel system <ref> [12] </ref>, which applies concepts from database management systems to Web-site creation and management. In particular, Strudel supports declarative specification of a Web site's content and structure and automatically generates a browsable Web site from a specification. <p> We also require that edges are added from new nodes to new or existing nodes; existing nodes are immutable and cannot be extended. Strategies for efficient evaluation and optimization of StruQL queries are described elsewhere <ref> [12] </ref>. 2 This example is inspired by an inconsistency in the CNN Web site http://www.cnn.com. The site provides a link to a text-only version, but only for the root page.
Reference: [13] <author> M. Fernandez, D. Florescu, A. Levy, and D. Suciu. </author> <title> A query language for a web-site management system. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 26(3) </volume> <pages> 4-11, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: We use a common query and transformation language, StruQL (Site TRansformation Und Query Language) <ref> [13] </ref>, at both levels.
Reference: [14] <author> M. Fernandez, D. Florescu, A. Levy, and D. Suciu. </author> <title> Reasoning about Web-site structure, </title> <note> 1998. Submitted for publication. </note>
Reference-contexts: Site schemas allow the user to view the site's abstract structure during design. More importantly, they are the basis for an algorithm that verifies whether a given set of integrity constraints on a Strudel-generated site is guaranteed to be satisfied <ref> [14] </ref> and for an incremental-evaluation algorithm that converts one site-definition query into multiple queries that are evaluated dynamically when a user browses the site [15]. 2 The Strudel System Strudel's architecture is depicted in Fig. 1; rectangles depict processes and emboldened terms specify the inputs and outputs of the processes. 2.1 <p> serve as a visual summary of the site graph, which is valuable during the iterative definition of a Web site's structure and allows visual verification of a site's integrity constraints (e.g., connectedness, reachability of nodes.) They are also the basis for an algorithm that enforces integrity constraints on Strudel-generated sites <ref> [14] </ref> and for an incremental-evaluation algorithm that converts one site-definition query into multiple queries that are evaluated dynamically when a user browses the site [15]. We briefly outline their application to these problems.
Reference: [15] <author> M. Fernandez, D. Florescu, A. Levy, and D. Suciu. </author> <title> Warehousing and incremental evaluation for Web-site management, </title> <note> 1998. Submitted for publication. </note>
Reference-contexts: importantly, they are the basis for an algorithm that verifies whether a given set of integrity constraints on a Strudel-generated site is guaranteed to be satisfied [14] and for an incremental-evaluation algorithm that converts one site-definition query into multiple queries that are evaluated dynamically when a user browses the site <ref> [15] </ref>. 2 The Strudel System Strudel's architecture is depicted in Fig. 1; rectangles depict processes and emboldened terms specify the inputs and outputs of the processes. 2.1 System Architecture Data model In every level of the Strudel system, the data model is a labeled, directed graph; this model is similar to <p> verification of a site's integrity constraints (e.g., connectedness, reachability of nodes.) They are also the basis for an algorithm that enforces integrity constraints on Strudel-generated sites [14] and for an incremental-evaluation algorithm that converts one site-definition query into multiple queries that are evaluated dynamically when a user browses the site <ref> [15] </ref>. We briefly outline their application to these problems. Verification of integrity constraints Visual verification is adequate for simple constraints, but verifying arbitrary integrity constraints requires automation. We often want to enforce constraints that refer to the site graph, e.g., "All paper presentation pages are reachable from a category page".
Reference: [16] <author> D. Florescu, A. Levy, and D. Suciu. </author> <title> A query optimization algorithm for semistructured data. </title> <type> Technical report, </type> <institution> AT&T Labs, </institution> <year> 1997. </year>
Reference-contexts: In Strudel's first implemen 1 Extending the LAV approach to our context would require solving the problem of rewriting queries using views for the StruQL language. tation, we built a simple heuristic-based optimizer. Later, we developed a more comprehensive cost-based optimization algorithm <ref> [16] </ref>. The new optimizer can enumerate plans that exploit indexes on the data and the schema in order to choose the best plan. The optimizer is also well suited for accessing data in external sources when only limited access patterns are supported.
Reference: [17] <author> D. Florescu, L. Raschid, and P. Valduriez. </author> <title> A methodology for query reformulation in CIS using semantic knowledge. </title> <journal> Int. Journal of Intelligent & Cooperative Information Systems, special issue on Formal Methods in Cooperative Information Systems, </journal> <volume> 5(4), </volume> <year> 1996. </year>
Reference-contexts: This simplified our implementation and sufficed for our applications, which have small databases. Strudel's architecture, however, can accommodate either approach. Recent research addresses the problem of specifying the relationship between the mediated view of the data and the external data sources. Global as view (GAV) <ref> [2, 9, 17, 19, 23] </ref> and Local as view (LAV) [11, 18, 21] are two techniques. In GAV, the relationship between the two relations is specified by a set of queries.
Reference: [18] <author> M. Friedman and D. Weld. </author> <title> Efficient execution of information gathering plans. </title> <booktitle> In Proceedings of IJCAI, </booktitle> <year> 1997. </year>
Reference-contexts: Strudel's architecture, however, can accommodate either approach. Recent research addresses the problem of specifying the relationship between the mediated view of the data and the external data sources. Global as view (GAV) [2, 9, 17, 19, 23] and Local as view (LAV) <ref> [11, 18, 21] </ref> are two techniques. In GAV, the relationship between the two relations is specified by a set of queries. For each relation R in the mediated schema, a query over the source relations specifies how to obtain R's tuples from the sources.
Reference: [19] <author> L. Haas, D. Kossmann, E. Wimmers, and J. Yang. </author> <title> Optimizing queries across diverse data sources. </title> <booktitle> In Proceedings of the 23rd VLDB Conference, </booktitle> <address> Athens, Greece, </address> <year> 1997. </year>
Reference-contexts: This simplified our implementation and sufficed for our applications, which have small databases. Strudel's architecture, however, can accommodate either approach. Recent research addresses the problem of specifying the relationship between the mediated view of the data and the external data sources. Global as view (GAV) <ref> [2, 9, 17, 19, 23] </ref> and Local as view (LAV) [11, 18, 21] are two techniques. In GAV, the relationship between the two relations is specified by a set of queries.
Reference: [20] <author> R. Hull. </author> <title> Managing semantic heterogeneity in databases: A theoretical perspective. </title> <booktitle> In Proceedings of the 16th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> Tucson, Arizona, </address> <pages> pages 51-61, </pages> <year> 1997. </year>
Reference-contexts: Mediator Strudel's mediator supports data integration by providing a uniform view of all underlying data, irrespective of where it is stored. When designing the mediator, we addressed two problems: whether to warehouse data from external sources or to access the external sources on demand at query time (see <ref> [20] </ref> for a comparison); and how to specify the relationship between the attributes and collections in the mediated schema and those in the data sources (see [24] for a discussion of possible approaches). In Strudel's prototype, we implemented warehousing; the result of data integration is stored in Strudel's data repository.
Reference: [21] <author> A. Y. Levy, A. Rajaraman, and J. J. Ordille. </author> <title> Querying heterogeneous information sources using source descriptions. </title> <booktitle> In Proceedings of the 22nd VLDB Conference, </booktitle> <address> Bombay, India., </address> <year> 1996. </year>
Reference-contexts: Strudel's architecture, however, can accommodate either approach. Recent research addresses the problem of specifying the relationship between the mediated view of the data and the external data sources. Global as view (GAV) [2, 9, 17, 19, 23] and Local as view (LAV) <ref> [11, 18, 21] </ref> are two techniques. In GAV, the relationship between the two relations is specified by a set of queries. For each relation R in the mediated schema, a query over the source relations specifies how to obtain R's tuples from the sources.
Reference: [22] <author> P. Paolini and P. Fraternali. </author> <title> A conceptual model and a tool environment for developing more scalable, dynamic, and customizable web applications. </title> <booktitle> In Proceedings of EDBT Conference, </booktitle> <address> Valencia, Spain, </address> <year> 1998. </year>
Reference-contexts: Strudel clearly separates the three tasks of building Web sites and is the first system that supports declarative specification of a site's content and structure. Other recent research prototypes support the separation of the three tasks, but do not support declarative specification of content or structure <ref> [5, 22] </ref>. Other research projects support declarative specification, but merge the tasks [3, 10]. Commercial tools such as Vignette's StoryServer and those provided by major database vendors separate the management of the underlying data from its visual presentation. <p> Like Strudel, Araneus separates data integration, site definition, and visual presentation, but it requires two data models, its page schemes must be specified explicitly, and its two query languages cannot be composed naturally. The Autoweb <ref> [22] </ref> system is based on the hypermedia design model (HDM), a design tool for hypermedia applications.
Reference: [23] <author> A. Tomasic, L. Raschid, and P. Valduriez. </author> <title> A data model and query processing techniques for scaling access to distributed heterogeneous databases in Disco. </title> <journal> IEEE Transactions on Computers, special issue on Distributed Computing Systems, </journal> <year> 1997. </year>
Reference-contexts: This simplified our implementation and sufficed for our applications, which have small databases. Strudel's architecture, however, can accommodate either approach. Recent research addresses the problem of specifying the relationship between the mediated view of the data and the external data sources. Global as view (GAV) <ref> [2, 9, 17, 19, 23] </ref> and Local as view (LAV) [11, 18, 21] are two techniques. In GAV, the relationship between the two relations is specified by a set of queries.
Reference: [24] <author> J. D. Ullman. </author> <title> Information integration using logical views. </title> <booktitle> In Proceedings of the International Conference on Database Theory, </booktitle> <year> 1997. </year>
Reference-contexts: mediator, we addressed two problems: whether to warehouse data from external sources or to access the external sources on demand at query time (see [20] for a comparison); and how to specify the relationship between the attributes and collections in the mediated schema and those in the data sources (see <ref> [24] </ref> for a discussion of possible approaches). In Strudel's prototype, we implemented warehousing; the result of data integration is stored in Strudel's data repository. This simplified our implementation and sufficed for our applications, which have small databases. Strudel's architecture, however, can accommodate either approach. <p> GAV provides finer control over how to combine the data from the sources; in contrast, LAV simplifies adding and deleting sources and accommodates sources with overlapping data <ref> [24] </ref>. We found the GAV approach was suitable for Strudel, because it was immediately extensible to StruQL 1 and because the number of data sources we integrated was small and did not change frequently, although the data in the sources may change frequently.
Reference: [25] <author> P. T. Wood. </author> <title> Queries on Graphs. </title> <type> PhD thesis, </type> <institution> University of Toronto, Toronto, Canada, M5S 1A1, </institution> <month> December </month> <year> 1988. </year> <note> Available as University of Toronto Technical Report CSRI-223. </note>
Reference-contexts: Clearly, a better interface is needed, probably in the spirit of Query By Example [26]. One research issue is what subset of StruQL can be expressed using a graphical interface. A similar issue has arisen for other graphical query languages such as Hy + <ref> [25] </ref>. Many commercial tools exist for Web-site creation and management. We do not presume that Strudel will replace all of them, therefore an important practical issue is how to integrate Strudel with existing tools.
Reference: [26] <author> M. Zloof. Query-by-Example: </author> <title> a data base language. </title> <journal> IBM Systems Journal, </journal> <volume> 16:4:324-343, </volume> <year> 1977. </year>
Reference-contexts: Several customers noted that a graphical interface for specifying StruQL queries in the spirit of Query By Example <ref> [26] </ref> would be necessary. 6 Evaluation We describe the lessons we learned from our experience using Strudel and evaluate its methodology, its query language, and its semistructured data model. 6 The versions of the CNN general and sports-only sites are at http://www.research.att.com/~mff/presentation/strudel-demo.html. 6.1 The Strudel Methodology Separating the management of the <p> Not surprisingly, many potential users of Strudel asked whether we can provide a friendly visual interface for specifying queries, instead of having to write StruQL queries by hand. Clearly, a better interface is needed, probably in the spirit of Query By Example <ref> [26] </ref>. One research issue is what subset of StruQL can be expressed using a graphical interface. A similar issue has arisen for other graphical query languages such as Hy + [25]. Many commercial tools exist for Web-site creation and management.
References-found: 26

