URL: http://choices.cs.uiuc.edu/2k/papers/MS-bridge.ps.gz
Refering-URL: http://choices.cs.uiuc.edu/2k/
Root-URL: http://www.cs.uiuc.edu
Title: Copyright by  
Author: Robert Byron Moore 
Date: 1998  
Abstract-found: 0
Intro-found: 1
Reference: [Box98] <author> Don Box. </author> <title> Essential Com . Addison-Wesley, </title> <address> Reading, Massachusetts. </address> <year> 1998. </year>
Reference-contexts: All e spouse a reusable binary component orientation versus merely an object orientation. The development of these object systems seems to be at least partially based in a d e-sire to overcome some of the limitations discovered in the C++ language <ref> [Box98] </ref>. Although C++ introduces many of the core concepts of objectoriented programming such as classes, encapsulation, polymorphism, user-defined types, etc. [Str97], certain highly desirable features are missing. A fundamental weakness of C++ is the lack of a binary standard for objects to allow true runtime component composition. <p> The remote (distributed) extension to COM is known as Distributed COM or DCOM. This technology was first introduced in 1993, and is still under active deve l-opment by Microsoft <ref> [Box98] </ref>. DCOM is very important to Microsoft, because it has 9 become the cornerstone of the companys vision of the future of computing. This vision includes incursions into the remaining areas of mainframe dominance such as robust, multi-tier commercial applications.
Reference: [Bra96] <author> T. Brando. </author> <title> Comparing CORBA & DCE . Object Magazine. </title> <month> March </month> <year> 1996. </year>
Reference-contexts: Although the Open Systems Foundations Distributed Compu t-ing Env ironment (DCE) is a distributed application environment, it is not truly object-oriented, and thus does not fit well into the definition of an object system <ref> [Bra96] </ref>. Object model implementations come under the term middleware since they are i m-plemented above the core operating system services, yet below the application level.
Reference: [Bro96] <author> Kraig Brockschmidt. </author> <title> What OLE Is Really About . Microsoft Corporation, </title> <note> www.microsoft.com/oledev/olecom/aboutole.htm. 1996. </note>
Reference: [CHY97] <author> P. Emerald Chung, Yennun Hu ang, Shalini Yajnik. </author> <title> DCOM and CORBA Side by Side, Step by Step, and Layer by Layer . September 3, </title> <year> 1997. </year>
Reference-contexts: The Microsoft DCOM archite c-ture is shown in Figure 3. The DCOM differs from CORBA in the areas of data types, naming, inheritance, number of interfaces per object, and the remoting protocol <ref> [CHY97] </ref>. However, arch i-tecturally, the similarity to the CORBA model is readily apparent. There are some m i-nor termino logy differences that should be noted - a COM IDL-generated Proxy is equivalent to a CORBA IDL Stub, and the COM IDL Stub is equivalent to the CORBA IDL Skeleton.
Reference: [Cur97] <author> David Curtis, </author> <title> Object Management Group. Java, RMI and CORBA. </title> <year> 1997. </year>
Reference-contexts: The CORBA object model is referred to as a computing infrastructure and an integration technology <ref> [Cur97] </ref>. In other words, CORBA provides the glue to integrate distributed applications across heterogeneous hardware, software, programming la n-guages, and operating systems. <p> RMI is not an integration technology as both CORBA and COM can be thought of, since it is so tightly coupled to a single language. In this sense, RMI is merely an exte n-sion to Java, not a fully featured transport or object system <ref> [Cur97] </ref>. It is not designed to solve the same types of distr ibution problems as COM and CORBA. Standalone Java or Java beans (without RMI) may be used to communicate with both COM and CORBA, since both of these object systems are designed to be language independent.
Reference: [EE98] <author> Guy Eddon, Henry Eddon. </author> <title> Understanding the DCOM Wire Protocol by Analyzing Network Data Packets. </title> <journal> Microsoft Systems Journal. </journal> <month> March </month> <year> 1998. </year>
Reference-contexts: The ORPC 19 is designed to run on top of many network protocols, including both UDP and TCP. Therefore, an implementation of ORPC must include support for packet retransmission as well <ref> [EE98] </ref>. A COM Service Control Manager (SCM) . This service manages object activations and the mapping from COM Class IDs to servers. A Class ID is a 128-bit number that uniquely identifies each COM class.
Reference: [Fla97] <author> David Flanagan. </author> <title> Java in a Nutshell . OReilly and Associates, </title> <address> Sebast o-pol, California. </address> <year> 1997. </year>
Reference-contexts: A Java bean is a class that defines and implements a standardized set of methods, properties and events. By adhering to this basic set of features, the bean may be integrated with a standard set of wrapper classes via custom integration tools <ref> [Fla97] </ref>. The JavaBeans model includes the notion of at least limited interoperability with other object models. A bean may provide a conversion bridge to a COM or CORBA object, while still maintaining the outward appearance of a normal bean [Fla97]. 2.2.3.2 Java Remote Method Invocation The object broker and transport that <p> with a standard set of wrapper classes via custom integration tools <ref> [Fla97] </ref>. The JavaBeans model includes the notion of at least limited interoperability with other object models. A bean may provide a conversion bridge to a COM or CORBA object, while still maintaining the outward appearance of a normal bean [Fla97]. 2.2.3.2 Java Remote Method Invocation The object broker and transport that is intended for use with Java, the Java Remote Method Invocation (RMI) is touted as a language dependent solution for distributed applications [SUN98]. In other words, RMI is targeted for Java-to-Java object comm u-nication only.
Reference: [ISG97] <author> International Systems Group. </author> <title> Middleware - The Essential Component for Enterprise Client/Server Applications. </title> <year> 1997. </year>
Reference-contexts: Middleware provides a more complete set of services beyond the basic operating system and network services to provide reliable, scalable, and transparent distributed applic a 5 tion support <ref> [ISG97] </ref>. Most implementations run either partially or completely in the application address space. This architecture employs the microkernel philosophy of moving services out of the operating system to the application space where possible in order to improve performance and simplify extension of the operating system.
Reference: [KSC+98] <author> Fabio Kon, Ashish Singhai, Roy H. Campbell, Dulcineia Carvalho, Robert Moore, and Franscisco J. Ballesteros. </author> <title> 2K: A Dynamic, Component-Based Operating System for Rapidly Changing Environments . ECOOP'98 Wor k-shop on Reflective ObjectOriented Programming and Systems July 1998. </title>
Reference-contexts: used somewhat interchangeably in the literature and product documentation, there is a distinct difference between them. 2.1 The 2K Operating System Project A project within the Universit y of Illinois Systems Software Research Group, the 2K operating system is envisioned as a distributed, architecturally aware, adaptable, reflective, and network-centric system <ref> [KSC+98] </ref>. When designing a new operating system in todays environment, architects are faced with compatibility issues at many points throughout the design process. For example, existing legacy operating systems must be considered when designing Application Pr o-gramming Interfaces (APIs), communication subsystems, and communication protocols.
Reference: [OMG97] <institution> Object Management Group. </institution> <note> COM-CORBA Interworking , Revision Tas k-force Report. OMG document orbos/97-09-07. </note> <month> November 19, </month> <year> 1997. </year>
Reference-contexts: This one-way interoperability is known as a mapping of one system onto the other. Interoperability that is achieved in both directions, i.e., each system can view objects in the other, is known as an interworking solution between the object systems <ref> [OMG97] </ref>. An example of bidirectional interworking is shown in Figure 4, where clients and ser v ers executing on both a DCOM system and a Java system are in communication with clients and servers executing on a CORBA system. <p> The solutions to these problems jointly comprise the interoperability arch itecture. 2.3.1 COM/CORBA Interoperability In the specific case of interoperability between Microsoft COM and OMG CORBA, there has been enough commercial interest in this subject for the OMG to define and publish an interoperability standard <ref> [OMG97] </ref>. This specification defines the mappings required to allow a COM object to view CORBA objects, and likewise for a CORBA object to view COM objects.
Reference: [OMG98] <author> Object Management Group. </author> <title> The Common Object Request Broker: A r-chitecture and Specification. Revision 2.2. </title> <month> February </month> <year> 1998. </year>
Reference-contexts: Domain interfaces are specific to particular appl i-cation domains. Application interfaces are nonstandard and specific to individual a p 7 plications. However, if a particular set of application interfaces becomes widely used, they may be standardized by the OMG <ref> [OMG98] </ref>. Figure 1 shows the relationship of the OMG architectural elements. Object Request Broker (ORB) Application Interfaces Domain Interfaces Common Facilities Object Services 2.2.1.1 Object Request Broker The Object Request Broker, otherwise known as an ORB, is the fundamental co m-ponent of the OMG architecture. <p> Interoperability has become such an important subject that the OMG has moved the interoperability specification into the full CORBA specification for CORBA Revision 2.2 <ref> [OMG98] </ref>. 2.3.2 Commercial Interoperability Solutions There are several commercial interoperabilit y packages currently available. Most of these appear to be based on the OMG interworking standard, have CORBA as the base object system, and implement the bridge architecture (see chapter 3).
Reference: [Ses98] <editor> Roger Sessions. COM and DCOM. </editor> <publisher> Wiley, </publisher> <address> New York, New York. </address> <year> 1998. </year>
Reference-contexts: This vision includes incursions into the remaining areas of mainframe dominance such as robust, multi-tier commercial applications. Microsofts strategy revolves around the use of high performance clusters of NT workstations and the DCOM and related technologies to replace mainframe hardware and sof tware <ref> [Ses98] </ref>. DCOM is the underlying foundation for many other Microsoft technologies, i n-cluding OLE (Object Embedding and Linking), Automation, ActiveX, DNA (Distributed InterNet Applications Architecture), Transaction Server, SQL Server, and others. OLE is a group of standardized interfaces that allow several applications to coordinate oper a-tions within a single document.
Reference: [SLM97] <author> Douglas C. Schmidt, David L. Levine, </author> <title> and Sumedh Mungee . The Design of the TAO Real-Time Object Request Broker . October 11, </title> <booktitle> 1997. </booktitle> <pages> 81 </pages>
Reference-contexts: For the initial implementation, the supported foreign object model is Microsoft COM. 5.1 The TAO Object Request Broker The ACE ORB (TAO) is a platform independent real-time Object Request Broker developed at Washington University <ref> [SLM97] </ref>. The Adaptive Communication Enviro n-ment (ACE) serves as the underlying portable support platform for TAO. TAO was chosen by the University of Illinois Systems Software Research Group as the basis for the 2K ORB.
Reference: [Sta98] <author> Michael Stal. </author> <title> COMmunication Everywhere: An Overview of Microsofts Distributed Component Object Model. </title> <journal> Object Magazine. </journal> <month> June </month> <year> 1998. </year>
Reference-contexts: It uses an object broker architecture in a manner similar to CORBA. The fundamental goals of both systems are approx i-mately the same, although COM/DCOM was originally developed more as an integr a 10 tion technology than a complete distributed computing architecture <ref> [Sta98] </ref>. The r emoting protocol used by DCOM is known as Object RPC (ORPC), and is derived from the Distributed Computing Environment (DCE) RPC. The Microsoft DCOM archite c-ture is shown in Figure 3.
Reference: [Str97] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language . Third edition. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts. </address> <year> 1997. </year>
Reference-contexts: The development of these object systems seems to be at least partially based in a d e-sire to overcome some of the limitations discovered in the C++ language [Box98]. Although C++ introduces many of the core concepts of objectoriented programming such as classes, encapsulation, polymorphism, user-defined types, etc. <ref> [Str97] </ref>, certain highly desirable features are missing. A fundamental weakness of C++ is the lack of a binary standard for objects to allow true runtime component composition.
Reference: [Sun98] <author> Sun Microsystems. </author> <title> Java RMI. A New Approach to Distributed Compu t-ing. </title> <address> java.sun.com/products/javaspaces/whitepapers. </address> <year> 1998. </year>
Reference-contexts: to a COM or CORBA object, while still maintaining the outward appearance of a normal bean [Fla97]. 2.2.3.2 Java Remote Method Invocation The object broker and transport that is intended for use with Java, the Java Remote Method Invocation (RMI) is touted as a language dependent solution for distributed applications <ref> [SUN98] </ref>. In other words, RMI is targeted for Java-to-Java object comm u-nication only. This is marketed as a desireable feature of the support. The RMI can be used for both Java bean classes and regular Java classes.
Reference: [Sut98] <author> Jeff Sutherland. </author> <title> Why I love the OMG: The Emergence of a Business O b-ject Component Architecture. </title> <year> 1998. </year>
Reference-contexts: Events. Support for asynchronous events and signaling. 2.2.1 OMG CORBA The Object Management Groups Common Object Request Broker Architecture (CORBA) is the oldest and most mature object system of those described here. The OMG was established in 1989 and now includes over 800 members <ref> [Sut98] </ref>. Although the official term for this architecture is the Object Management Architecture (OMA), the CORBA name (which is technically only the ORB architecture) has become the de facto name for the entire object system architecture. <p> This is the architecture proposed by the OMG in the Business Object Component Architecture (BOCA) as a more complete solution to the interoperability problem than the COM/CORBA interoperability standard <ref> [Sut98] </ref>. Figure 8 shows the common RPC architecture, including the super-ORB. The advantage of this approach is that since a common remoting protocol is used, only one RPC implementation is required, thus eliminating some of the issues related to the multiple RPC approach. <p> While many of the promised productivity increases remain to be realized, there is great confidence within the software community that time will bear out the value of this approach, and large software productivit y gains will eventually be seen <ref> [Sut98] </ref> With the growth in popularity of the component object system approach, several di f-ferent object models have appeared, and it is probably safe to assume that more will follow.
Reference: [Tem97] <author> Julian Templeman. </author> <title> Beginning MFC COM Programming. </title> <publisher> Wrox Press, </publisher> <address> Birmingham, UK. </address> <year> 1997. </year>
Reference-contexts: ActiveX is itself a group of related technologies that include Active Documents (embedding, drag-and-drop, data transfer, and linking), and Active Controls (events, notifications, properties). ActiveX was developed in response to and is targeted toward the Internet and World Wide Web browser market <ref> [Tem97] </ref>. Client Server IDL Proxy IDL Stub COM/DCOM Core Object RPC DCOM is similar in many respects to CORBA. It uses an object broker architecture in a manner similar to CORBA.
Reference: [Vin97] <author> Steve Vinoski. </author> <title> CORBA: Integrating Diverse Applications Within Distri b-uted Heterogeneous Environments. </title> <journal> IEEE Communications Magazine. </journal> <month> February, </month> <year> 1997. </year>
Reference-contexts: The Dynamic Skeleton Interface (DSI) corresponds to the DII on the client side. Object Adapters serve as the interface between the ORB core and the object i m-plementation, allowing the ORB to transfer control to the object implementation without knowing the exact interface <ref> [Vin97] </ref>. The specification for object transport and ORB interoperabilit y was introduced by the OMG in CORBA 2.0. The General Inter-ORB Protocol (GIOP) specifies the tran s-fer syntax and message format. The Internet Inter-ORB Protocol (IIOP) specifies how the GIOP is implemented on top of TCP/IP [Vin97]. <p> knowing the exact interface <ref> [Vin97] </ref>. The specification for object transport and ORB interoperabilit y was introduced by the OMG in CORBA 2.0. The General Inter-ORB Protocol (GIOP) specifies the tran s-fer syntax and message format. The Internet Inter-ORB Protocol (IIOP) specifies how the GIOP is implemented on top of TCP/IP [Vin97]. A transportable object reference is known as an Interoperable Object Reference (IOR). An IOR contains the information necessary to communicate with a remote object via a remoting protocol such as IIOP. <p> This feature allows a client to make requests on an object without having any compile-time knowledge of the objects interfaces <ref> [Vin97] </ref>. The CORBA model su p-ports what is known as the Dynamic Invocation Interface (DII) and the Dynamic Skel e-ton Interface (DSI). Microsoft COM supports the IDispatch interface, which if su p-ported by a given object, allows dynamic invocation on that object. <p> The CORBA DII interface allows direct access to the ORB request mechanisms. It is used to allow applications to make requests on objects without requiring an IDL stub for the object <ref> [Vin97] </ref>. The IDispatch interface is functionally equivalent, allowing scripting languages such as Visual Basic or JavaScript to make object requests without a priori knowledge of the interface. Support for dynamic invocation is not included in this initial implementation. Ho w-ever, this support can be added without any architectural changes.
References-found: 19

