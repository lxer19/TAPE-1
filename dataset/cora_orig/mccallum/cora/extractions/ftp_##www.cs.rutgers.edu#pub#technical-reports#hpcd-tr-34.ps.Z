URL: ftp://www.cs.rutgers.edu/pub/technical-reports/hpcd-tr-34.ps.Z
Refering-URL: http://www.cs.rutgers.edu/cobacode/
Root-URL: 
Email: gelsey@cs.rutgers.edu schwabac@cs.rutgers.edu dsmith@cs.rutgers.edu  
Title: Using Modeling Knowledge to Guide Design Space Search  
Author: Andrew Gelsey Mark Schwabacher Don Smith 
Date: June 1996  
Note: To appear: Artificial Intelligence in Design '96, Stanford, CA,  ftp://www.cs.rutgers.edu/pub/technical-reports/hpcd-tr-34.ps.Z  
Address: New Brunswick, NJ 08903 USA  
Affiliation: Computer Science Department Rutgers University  
Abstract: Automated search of a space of candidate designs seems an attractive way to improve the traditional engineering design process. To make this approach work, however, the automated design system must include both knowledge of the modeling limitations of the method used to evaluate candidate designs and also an effective way to use this knowledge to influence the search process. We suggest that a productive approach is to include this knowledge by implementing a set of model constraint functions which measure how much each modeling assumptions is violated, and to influence the search by using the values of these model constraint functions as constraint inputs to a standard constrained nonlinear optimization numerical method. We test this idea in the domain of conceptual design of supersonic transport aircraft, and our experiments indicate that our model constraint communication strategy can decrease the cost of design space search by one or more orders of magnitude. 
Abstract-found: 1
Intro-found: 1
Reference: [ Agogino and Almgren 1987 ] <author> A. M. Agogino and A. S. Almgren. </author> <title> Techniques for integrating qualitative reasoning and symbolic computing. </title> <journal> Engineering Optimization, </journal> <volume> 12 </volume> <pages> 117-135, </pages> <year> 1987. </year>
Reference: [ Bouchard et al. 1988 ] <author> E. E. Bouchard, G. H. Kidwell, and J. E. Rogan. </author> <title> The application of artificial intelligence technology to aeronautical system design. </title> <booktitle> In AIAA/AHS/ASEE Aircraft Design Systems and Operations Meeting, </booktitle> <address> Atlanta, Georgia, </address> <month> September </month> <year> 1988. </year> <month> AIAA-88-4426. </month>
Reference: [ Bouchard 1992 ] <author> E. E. Bouchard. </author> <title> Concepts for a future aircraft design environment. </title> <booktitle> In Proceedings, 1992 Aerospace Design Conference, </booktitle> <address> Irvine, CA, </address> <month> February </month> <year> 1992. </year> <month> AIAA-92-1188. </month>
Reference: [ Cerbone 1992 ] <author> G. Cerbone. </author> <title> Machine learning in engineering: Techniques to speed up numerical optimization. </title> <type> Technical Report 92-30-09, </type> <institution> Oregon State University Department of Computer Science, </institution> <year> 1992. </year> <type> Ph.D. Thesis. </type>
Reference: [ Dvorak and Kuipers 1991 ] <author> Daniel Dvorak and Benjamin Kuipers. </author> <title> Process monitoring and diagnosis. </title> <journal> IEEE Expert, </journal> <volume> 6(3) </volume> <pages> 67-74, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Other automated intelligent controllers for numerical simulators are described in [ Gelsey 1991, Gelsey 1995a, Sacks 1991, Yip 1991, Zhao 1994 ] , but these do not address the issue of model and simulation quality assurance. Intelligent monitoring for complex systems has received considerable attention (e.g., <ref> [ Dvorak and Kuipers 1991 ] </ref> ), but this work has focused on diagnosis of problems in dynamically changing physical systems as opposed to problems in the execution of computational algorithms which are attempting to simulate the behavior of physical systems.
Reference: [ Ellman et al. 1993 ] <author> T. Ellman, J. Keane, and M. Schwabacher. </author> <title> Intelligent model selection for hillclimbing search in computer-aided design. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <address> Washington, D.C., </address> <year> 1993. </year>
Reference: [ Forbus and Falkenhainer 1990 ] <author> Kenneth D. Forbus and Brian Falkenhainer. </author> <title> Self-explanatory simulations: An integration of qualitative and quantitative knowledge. </title> <booktitle> In 18 Proceedings, Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 380-387, </pages> <address> Boston, MA, </address> <year> 1990. </year>
Reference: [ Forbus and Falkenhainer 1992 ] <author> Kenneth D. Forbus and Brian Falkenhainer. </author> <title> Self-explanatory simulations: Scaling up to large models. </title> <booktitle> In Proceedings, Tenth National Conference on Artificial Intelligence, </booktitle> <address> San Jose, CA, </address> <year> 1992. </year>
Reference: [ Forbus and Falkenhainer 1995 ] <author> Kenneth D. Forbus and Brian Falkenhainer. </author> <title> Scaling up self-explanatory simulations: Polynomial-time compilation. </title> <booktitle> In Proceedings, Fourteenth Internationnal Joint Conference on Artificial Intelligence, </booktitle> <address> Montreal, Quebec, Canada, </address> <year> 1995. </year>
Reference: [ Gelsey and Smith 1995 ] <author> Andrew Gelsey and Don Smith. </author> <title> A search space toolkit. </title> <booktitle> In Proceedings, 11th IEEE Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 117-123, </pages> <address> Los Angeles, CA, </address> <month> February </month> <year> 1995. </year>
Reference-contexts: The software architecture in Figure 3 also includes a "search space toolkit" for determining the design space structure, which is described in <ref> [ Gelsey and Smith 1995, Gelsey et al. 1996 ] </ref> and therefore will not be discussed further in this paper.
Reference: [ Gelsey et al. 1996 ] <author> Andrew Gelsey, Don Smith, Mark Schwabacher, Khaled Rasheed, and Keith Miyake. </author> <title> A search space toolkit. Decision Support Systems, </title> <note> special issue on Unification of Artificial Intelligence with Optimization, 1996. To appear. </note>
Reference-contexts: The software architecture in Figure 3 also includes a "search space toolkit" for determining the design space structure, which is described in <ref> [ Gelsey and Smith 1995, Gelsey et al. 1996 ] </ref> and therefore will not be discussed further in this paper.
Reference: [ Gelsey 1991 ] <author> Andrew Gelsey. </author> <title> Using intelligently controlled simulation to predict a machine's long-term behavior. </title> <booktitle> In Proceedings, Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 880-887, </pages> <address> Cambridge, MA, </address> <month> July </month> <year> 1991. </year>
Reference: [ Gelsey 1995a ] <author> Andrew Gelsey. </author> <title> Automated reasoning about machines. </title> <journal> Artificial Intelligence, </journal> <volume> 74(1) </volume> <pages> 1-53, </pages> <month> March </month> <year> 1995. </year>
Reference: [ Gelsey 1995b ] <author> Andrew Gelsey. </author> <title> Intelligent automated quality control for computational simulation. </title> <journal> Artificial Intelligence for Engineering Design, Analysis and Manufacturing (AI EDAM), </journal> <volume> 9(5) </volume> <pages> 387-400, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: Furthermore, this meaningless value may appear better than the value for any physically realizable design, thus leading the search procedure to a worthless but apparently very good design. In our earlier work <ref> [ Gelsey 1995b ] </ref> , we have investigated the types of modeling knowledge that are needed so that a simulator can be reliably invoked by another program, and we have described algorithms for detecting assumption violations and other problems that might lead to low-quality or unreliable simulation results. <p> We performed the same set of experiments for this case, and the experimental data which appears in Figures 12, 13, 14, and 15 supports our previous conclusion that the model constraint communication strategy can cut search cost by an order of magnitude or more. 7 Related Work <ref> [ Gelsey 1995b ] </ref> examines the types of modeling knowledge that are needed so that a simulator can be reliably invoked by another program and describes algorithms for detecting assumption violations and other problems that might lead to low-quality or unreliable simulation results, but strategies for communicating information about modeling fail
Reference: [ Gill et al. 1981 ] <author> Philip E. Gill, Walter Murray, and Margaret H. Wright. </author> <title> Practical Optimization. </title> <publisher> Academic Press, </publisher> <address> London ; New York, </address> <year> 1981. </year>
Reference: [ Hoeltzel and Chieng 1987 ] <author> D. Hoeltzel and W. Chieng. </author> <title> Statistical machine learning for the cognitive selection of nonlinear programming algorithms in engineering design optimization. </title> <booktitle> In Advances in Design Automation, </booktitle> <address> Boston, MA, </address> <year> 1987. </year>
Reference: [ Lawrence et al. 1995 ] <author> C. Lawrence, J. Zhou, and A. </author> <title> Tits. User's guide for CFSQP version 2.3: A C code for solving (large scale) constrained nonlinear (minimax) optimization problems, generating iterates satisfying all inequality constraints. </title> <type> Technical Report TR-94-16r1, </type> <institution> Institute for Systems Research, University of Maryland, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: The numerical optimizer used in this paper is CFSQP <ref> [ Lawrence et al. 1995 ] </ref> , a state-of-the-art implementation of the Sequential Quadratic Programming method.
Reference: [ More and Wright 1993 ] <author> Jorge J. More and Stephen J. Wright. </author> <title> Optimization Software Guide. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1993. </year>
Reference: [ Papalambros and Wilde 1988 ] <author> P. Papalambros and J. Wilde. </author> <title> Principles of Optimal Design. </title> <publisher> Cambridge University Press, </publisher> <address> New York, NY, </address> <year> 1988. </year> <month> 19 </month>
Reference: [ Peressini et al. 1988 ] <author> Anthony L. Peressini, Francis E. Sullivan, and J. J. Uhl, Jr. </author> <title> The Mathematics of Nonlinear Programming. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1988. </year>
Reference: [ Powell 1990 ] <author> D. Powell. Inter-GEN: </author> <title> A hybrid approach to engineering design optimization. </title> <type> Technical report, </type> <institution> Rensselaer Polytechnic Institute Department of Computer Science, </institution> <month> December </month> <year> 1990. </year> <type> Ph.D. Thesis. </type>
Reference: [ Sacks 1991 ] <author> Elisha P. Sacks. </author> <title> Automatic analysis of one-parameter ordinary differential equations by intelligent numeric simulation. </title> <journal> Artificial Intelligence, </journal> <volume> 48(1) </volume> <pages> 27-56, </pages> <month> February </month> <year> 1991. </year>
Reference: [ Schwabacher and Gelsey 1996 ] <author> M. Schwabacher and A. Gelsey. </author> <title> Intelligent gradient-based search of incompletely defined design spaces. </title> <type> Technical Report HPCD-TR-38, </type> <institution> Department of Computer Science, Rutgers University, </institution> <address> New Brunswick, NJ, </address> <year> 1996. </year> <month> ftp://ftp.cs.rutgers.edu/pub/technical-reports/hpcd-tr-38.ps.Z. </month>
Reference-contexts: constraints strategy, 4% of the points encountered were unevaluable. (Note: the optimizer tends to avoid unevaluable points, so these percentages are considerably lower than the average density of unevaluable points in the search spaces, as indicated by the data presented later in this paper.) Knowledge-based gradients are further described in <ref> [ Schwabacher and Gelsey 1996 ] </ref> . 5 Model Constraints For the experiments in this paper, the MSA module in Figure 3 computes the following model constraint functions, which are 0 if a constraint is satisfied and positive otherwise: ETUB = &lt;maximum throttle required during mission simulation&gt; &lt;maximum throttle setting allowed
Reference: [ Schwabacher et al. 1994 ] <author> M. Schwabacher, H. Hirsh, and T. </author> <title> Ellman. Learning prototype-selection rules for case-based iterative design. </title> <booktitle> In Proceedings of the Tenth IEEE Conference on Artificial Intelligence for Applications, </booktitle> <address> San Antonio, Texas, </address> <year> 1994. </year>
Reference: [ Schwabacher et al. 1996 ] <author> M. Schwabacher, T. Ellman, H. Hirsh, and G. Richter. </author> <title> Learning to choose a reformulation for numerical optimization of engineering designs. </title> <booktitle> In Artificial Intelligence in Design Conference, </booktitle> <month> June </month> <year> 1996. </year> <note> To appear. </note>
Reference: [ Sobieszczanski-Sobieski et al. 1985 ] <author> J. Sobieszczanski-Sobieski, B. B. James, and A. R. Dovi. </author> <title> Structural optimization by multilevel decomposition. </title> <journal> AIAA Journal, </journal> <volume> 23(11) </volume> <pages> 1775-1782, </pages> <month> November </month> <year> 1985. </year>
Reference: [ Tong et al. 1992 ] <author> Siu Shing Tong, David Powell, and Sanjay Goel. </author> <title> Integration of artificial intelligence and numerical optimization techniques for the design of complex aerospace systems. </title> <booktitle> In Proceedings, 1992 Aerospace Design Conference, </booktitle> <address> Irvine, CA, </address> <month> February </month> <year> 1992. </year> <pages> AIAA. </pages>
Reference: [ Vanderplaats 1984 ] <author> Garret N. Vanderplaats. </author> <title> Numerical Optimization Techniques for Engineering Design : With Applications. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1984. </year>
Reference: [ Williams and Cagan 1994 ] <author> Brian C. Williams and Jonathan Cagan. </author> <title> Activity analysis: the qualitative analysis of stationary points for optimal reasoning. </title> <booktitle> In Proceedings, 12th National Conference on Artificial Intelligence, </booktitle> <pages> pages 1224-1230, </pages> <address> Seattle, Washington, </address> <month> August </month> <year> 1994. </year>
Reference: [ Yip 1991 ] <author> Kenneth Yip. </author> <title> Understanding complex dynamics by visual and symbolic reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 51(1-3):179-221, </volume> <month> October </month> <year> 1991. </year>
Reference: [ Zhao 1994 ] <author> Feng Zhao. </author> <title> Extracting and representing qualitative behaviors of complex systems in phase space. </title> <journal> Artificial Intelligence, </journal> <volume> 69(1-2):51-92, </volume> <year> 1994. </year> <month> 20 </month>
References-found: 31

