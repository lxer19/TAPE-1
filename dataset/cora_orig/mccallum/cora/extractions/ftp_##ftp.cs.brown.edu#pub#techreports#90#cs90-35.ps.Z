URL: ftp://ftp.cs.brown.edu/pub/techreports/90/cs90-35.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-90-35.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> F.N. Afrati, D.Q. Goldin, </author> <title> and P.C. Kanellakis, "Efficient Parallelism for Structured Data: Directed Reachability in S-P Dags," </title> <institution> Dept. Computer Science, Brown Univ., </institution> <type> Technical Report CS-88-07, </type> <year> 1988. </year>
Reference-contexts: An important application of dynamic expression trees is the dynamic maintenance of the maximum flow and shortest path in series-parallel digraphs. Such digraphs arise in a variety of problems such as scheduling [19], electrical networks (see, e.g., [30]), data-flow analysis [8], database logic programs <ref> [1] </ref>, and circuit layout [25]. Also, some problems that are NP-complete for general graphs admit linear-time solutions when restricted to series-parallel digraphs [26].
Reference: [2] <author> B. Alpern, R. Hoover, B. Rosen, P. Sweeney, and F.K. Zadeck, </author> <title> "Incremental Evaluation of Computational Circuits," </title> <booktitle> Proc. ACM-SIAM Symp. on Discrete Algorithms (1990), </booktitle> <pages> 32-42. </pages>
Reference: [3] <author> G. Ausiello, G.F. Italiano, A. Marchetti-Spaccamela, and U. Nanni, </author> <title> "Incremental Algorithms for Minimal Length Paths," </title> <booktitle> Proc. ACM-SIAM Symp. on Discrete Algorithms (1990), </booktitle> <pages> 12-21. </pages>
Reference: [4] <author> S.W. Bent, D.D. Sleator, and R.E. Tarjan, </author> <title> "Biased Search Trees," </title> <journal> SIAM J. Computing 14 (1985), </journal> <pages> 545-568. </pages>
Reference-contexts: First, we issue expose (). Next, we change the value of to x and re-evaluate the expression with Evaluate (), where is the root of the tree containing . Finally, we perform conceal () to restore the original solid and dashed edges. We use biased search trees <ref> [4] </ref> to represent the path-trees, where the weight of node of tree T is 1 if is a leaf of T , or one plus the sum of the weights of the children of that are connected through dashed edges. <p> Remove the edge from to its parent, thus separating the subtree rooted at . 8 By maintaining solid and dashed edges by using partitioning by weight [23], and repre-senting the path trees as globally biased binary trees <ref> [4] </ref>, we get: Theorem 1 Let S be a semiring with binary operators and .
Reference: [5] <author> A.M. Berman, M.C. Paull, and B.G. Ryder, </author> <title> "Proving Relative Lower Bounds for Incremental Algorithms," </title> <note> Acta Informatica (to appear). </note>
Reference: [6] <author> R.P. Brent, </author> <title> "The Parallel Evaluation of Arithmetic Expressions in Logarithmic Time," in Complexity of Sequential and Parallel Numerical Algorithms, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1973, </year> <pages> 83-102. </pages>
Reference-contexts: The dependence of the value y of an expression E from the value of variable x can be be expressed in the canonical form y = (a x) b, where a and b are elements of S <ref> [6] </ref>. In terms of the tree T representing E, this property extends immediately to the dependence of the value y of a node from the value x of one of its descendants . Hence, we can assign the pair (a; b) to the path of T from to -. <p> For example, if ff is the inverse of , the dependency of the value y of a node from the value x of a descendant of can be represented by the following canonical form <ref> [6] </ref>: y = ((a x) b) ff ((c x) d): Hence, we modify the data structure so that the internal nodes of the path trees store a quadruple (a; b; c; d).
Reference: [7] <author> R.P. Brent, </author> <title> "The Parallel Evaluation of General Arithmetic Expressions," </title> <editor> J. </editor> <booktitle> ACM 21 (1974), </booktitle> <pages> 201-206. </pages>
Reference: [8] <author> M.D. Carrol and B.G. Ryder, </author> <title> "Incremental Data Flow Analysis via Dominator and Attribute Updates," </title> <booktitle> Proc. 15th ACM Symp. on Principles of Programming Languages (1988), </booktitle> <pages> 274-284. </pages>
Reference-contexts: An important application of dynamic expression trees is the dynamic maintenance of the maximum flow and shortest path in series-parallel digraphs. Such digraphs arise in a variety of problems such as scheduling [19], electrical networks (see, e.g., [30]), data-flow analysis <ref> [8] </ref>, database logic programs [1], and circuit layout [25]. Also, some problems that are NP-complete for general graphs admit linear-time solutions when restricted to series-parallel digraphs [26].
Reference: [9] <author> N. Deo and C. Pang, </author> <title> "Shortest-Path Algorithms: Taxonomy and Annotations," </title> <booktitle> Networks 14 (1984), </booktitle> <pages> 275-323. </pages>
Reference: [10] <author> G. Di Battista and R. Tamassia, </author> <title> "Incremental Planarity Testing," </title> <booktitle> Proc. 30th IEEE Symp. on Foundations of Computer Science (1989), </booktitle> <pages> 436-441. </pages>
Reference-contexts: Each node is mapped to the source and sink of its pertinent digraph. Additionally, each S-node is the proper node of a unique vertex. The concepts of proper node and skeleton are analogous to the corresponding ones developed for planar st-graphs in <ref> [10] </ref>. We equip the tree T with a secondary data structure for maintaining the S-chains and their skeletons.
Reference: [11] <author> D. Eppstein, G.F. Italiano, R. Tamassia, R.E. Tarjan, J. Westbrook, and M. Yung, </author> <title> "Maintenance of a Minimum Spanning Forest in a Dynamic Planar Graph," </title> <booktitle> Proc. First ACM-SIAM Symp. on Discrete Algorithms (1990), </booktitle> <pages> 1-11. </pages>
Reference-contexts: The routing trees allows us to find in O (log m) time 13 the proper S-node of a vertex v and the first and last nodes of the S-chain containing a node . A similar technique of augmenting dynamic trees with balanced trees is described in <ref> [11] </ref>. Operations MakeDigraph and DeleteDigraph can be trivially implemented in O (1) time. Operations Attach and Detach correspond to Graft and Prune, respectively, and hence take O (log m) time. We perform operation Compose (X; 0 ; 00 ), with X = S or X = P , as follows.
Reference: [12] <author> S. Even and H. Gazit, </author> <title> "Updating Distances in Dynamic Graphs," </title> <booktitle> Methods of Operations Research 49 (1985), </booktitle> <pages> 371-387. </pages>
Reference: [13] <author> G. Gallo, M. Grigoriadis, and R.E. Tarjan, </author> <title> "A Fast Parametric Network Flow Algorithm," </title> <journal> SIAM J. on Computing 18 (1989), </journal> <pages> 30-55. </pages>
Reference: [14] <author> A.V. Goldberg, E. Tardos, and R.E. Tarjan, </author> <title> "Network Flow Algorithms," </title> <institution> Dept. of Computer Science, Stanford Univ., </institution> <type> Technical Report STAN-CS-89-1252, </type> <year> 1989. </year>
Reference: [15] <author> M.T. Goodrich, </author> <title> "Applying Parallel Processing Techniques to Classification Problems in Constructive Solid Geometry," </title> <booktitle> Proc. ACM-SIAM Symp. on Discrete Algorithms (1990), </booktitle> <pages> 118-128. </pages>
Reference-contexts: The resulting compound object is described by 18 a CSG-tree whose leaves are the primitive objects and whose internal nodes are set oper-ators. CSG representations are a fundamental tool in computer graphics. Several efficient algorithms are given in <ref> [15] </ref> for CSG classification problems, such as determining whether a query point is inside a compound object. We study a dynamic point inclusion problem where a collection of compound objects is modified by changing their primitive constituents and by update operations, such as link and cut, on their CSG-trees. <p> Queries consist of reporting whether a given compound object contains a fixed point p. By applying dynamic expression trees to the technique of <ref> [15] </ref>, we obtain: Theorem 4 The above dynamic point inclusion problem on a collection of compound objects defined by CSG-trees of total size n can be solved using an O (n)-space data structure that supports query and update operations in O (log n) worst-case time.
Reference: [16] <author> D. Gusfield and C. Martel, </author> <title> "A Fast Algorithm for the Generalized Parametric Minimum Cut Problem and Applications," </title> <institution> Dept. of Computer Science and Engineering, Univ. of California, Davis, </institution> <type> Technical Report CSE-89-21, </type> <year> 1989. </year>
Reference: [17] <author> G.F. Italiano, A. Marchetti-Spaccamela, and U. Nanni, </author> <title> "Dynamic Data Structures for Series-Parallel Graphs," </title> <booktitle> Proc. WADS' 89, LNCS 382 (1989), </booktitle> <pages> 352-372. </pages>
Reference: [18] <author> R.M. Karp and V. Ramachandran, </author> <title> "A Survey of Parallel Algorithms for Shared Memory Machines," </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <publisher> North Holland, </publisher> <year> 1990. </year>
Reference-contexts: We show how to combine these classical techniques to yield a powerful and versatile dynamic data structure. Related work has been focused on the use of parallelism in expression evaluation (see <ref> [18] </ref>). The most efficient parallel "tree-contraction" algorithms run in time O (log n) using an EREW PRAM with n= log n processors. An important application of dynamic expression trees is the dynamic maintenance of the maximum flow and shortest path in series-parallel digraphs. <p> For general circuits it is unlikely that an algorithm with poylogarithmic query and update times exists, since the related problem of parallel evaluation of circuits is P-complete <ref> [18] </ref>. However, efficient dynamic solutions may exist for special classes of circuits that include trees. Acknowledgement We would like to thank Ajit Agrawal, Giuseppe Di Battista and Giuseppe Italiano for useful discussions. 20
Reference: [19] <author> E.L. Lawler, </author> <title> "Sequencing Jobs to Minimize Total Weighted Completion Time Subject to Precedence Constraints," </title> <booktitle> Annals of Discrete Mathematics 2 (1978), </booktitle> <pages> 75-90. </pages>
Reference-contexts: An important application of dynamic expression trees is the dynamic maintenance of the maximum flow and shortest path in series-parallel digraphs. Such digraphs arise in a variety of problems such as scheduling <ref> [19] </ref>, electrical networks (see, e.g., [30]), data-flow analysis [8], database logic programs [1], and circuit layout [25]. Also, some problems that are NP-complete for general graphs admit linear-time solutions when restricted to series-parallel digraphs [26].
Reference: [20] <author> C.C. Lin and R.C. Chang, </author> <title> "On the Dynamic Shortest Path Problem," </title> <booktitle> Proc. Int. Workshop on Discrete Algorithms and Complexity (1989), </booktitle> <pages> 203-212. </pages>
Reference: [21] <author> W. Pugh and T. Teitelbaum, </author> <title> "Incremental Computation via Function Caching," </title> <booktitle> Proc. 16th ACM Symp. on Priciples of Programming Languages (1989), </booktitle> <pages> 315-328. </pages>
Reference: [22] <author> H. Rohnert, </author> <title> "A Dynamization of the All-Pairs Least Cost Problem," </title> <booktitle> Proc. STACS '85 (1985), </booktitle> <pages> 279-286. </pages>
Reference: [23] <author> D.D. Sleator and R.E. Tarjan, </author> <title> "A Data Structure for Dynamic Trees," </title> <editor> J. </editor> <booktitle> Computer Systems Sciences 24 (1983), </booktitle> <pages> 362-381. </pages>
Reference-contexts: However, the most advanced techniques previously developed, when applied to our problem, still yield O (n) worst-case time per update operation (see, e.g., [2,21]). Our dynamic expression trees are inspired by the dynamic trees of Sleator and Tarjan <ref> [23] </ref> and the expression restructuring scheme of Brent [6,7]. We show how to combine these classical techniques to yield a powerful and versatile dynamic data structure. Related work has been focused on the use of parallelism in expression evaluation (see [18]). <p> We show later (in the description of the join operation) how to find and maintain these values for a path between such nodes and -. We keep an expression-tree T in a data structure based on dynamic trees <ref> [23] </ref>. Edges of T are considered to be directed from the child to the parent. An edge (; -) of T is said to be solid if the subtree rooted at node has more than half of the nodes of the subtree rooted at its parent -. <p> This is done with the following operations, derived from dynamic trees <ref> [23] </ref>: * splice (path ) | This operation assumes that is a solid path ending at 6= . Convert the dashed edge leaving to solid and convert the solid edge (if it exists) entering the parent of to dashed. Let 0 be the solid path containing -. <p> Remove the edge from to its parent, thus separating the subtree rooted at . 8 By maintaining solid and dashed edges by using partitioning by weight <ref> [23] </ref>, and repre-senting the path trees as globally biased binary trees [4], we get: Theorem 1 Let S be a semiring with binary operators and .
Reference: [24] <author> P.M. Spira and A. Pan, </author> <title> "On Finding and Updating Spanning Trees and Shortest Paths," </title> <journal> SIAM J. Computing 4 (1975), </journal> <pages> 375-380. </pages>
Reference: [25] <author> L. Stockmeyer, </author> <title> "Optimal Orientation of Cells in Slicing Floorplan Design," </title> <booktitle> Information and Control 57 (1983), </booktitle> <pages> 91-101. </pages>
Reference-contexts: An important application of dynamic expression trees is the dynamic maintenance of the maximum flow and shortest path in series-parallel digraphs. Such digraphs arise in a variety of problems such as scheduling [19], electrical networks (see, e.g., [30]), data-flow analysis [8], database logic programs [1], and circuit layout <ref> [25] </ref>. Also, some problems that are NP-complete for general graphs admit linear-time solutions when restricted to series-parallel digraphs [26]. We define an extensive repertory of update operations for series-parallel digraphs, which includes insertion of vertices and edges, series and parallel composition of two series-parallel digraphs, and their respective inverses. <p> Dynamic expression trees have immediate application to the problem of compacting slicing floorplans, a layout technique widely used in VLSI (see, e.g., <ref> [25] </ref>). A slicing floorplan is either a rectangle (called basic rectangle), or is the union of two slicing floorplans that share a horizontal side (called horizontal slice) or a vertical side (called vertical slice). <p> This problem can be solved sequentially in O (n) time, n being the number of basic rectangles, by representing the floorplan with two expression-trees, T w and T h , where T w is used to find the minimum width and T h is used to find the minimum height <ref> [25] </ref>. Each leaf of T w represents a basic rectangle r and stores w r . Each internal node of T w represents a slice and stores operator "+" for a vertical slice, and operator "max" for a horizontal slice.
Reference: [26] <author> K. Takamizawa, T. Nishizeki, and N. Saito, </author> <title> "Linear Time Computability of Combinatorial Problems on Series Parallel Graphs," </title> <editor> J. </editor> <booktitle> ACM 29 (1982), </booktitle> <pages> 623-641. </pages>
Reference-contexts: Such digraphs arise in a variety of problems such as scheduling [19], electrical networks (see, e.g., [30]), data-flow analysis [8], database logic programs [1], and circuit layout [25]. Also, some problems that are NP-complete for general graphs admit linear-time solutions when restricted to series-parallel digraphs <ref> [26] </ref>. We define an extensive repertory of update operations for series-parallel digraphs, which includes insertion of vertices and edges, series and parallel composition of two series-parallel digraphs, and their respective inverses.
Reference: [27] <author> R. Tamassia and F.P. Preparata, </author> <title> "Dynamic Maintenance of Planar Digraphs, with Applications," </title> <booktitle> Algorithmica 5 (1990), </booktitle> <pages> 509-527. </pages>
Reference: [28] <author> R.E. Tarjan, </author> <title> "Data Structures and Network Algorithms," </title> <booktitle> CBMS-NSF Regional Conference Series in Applied Mathematics 44 (1983). </booktitle>
Reference-contexts: The value of f is given by P P e2In (t) f (e). The maximum flow problem consists of finding a flow for G with maximum value. It is well-known that the maximum flow value is equal to the total capacity of a minimum cut separating s from t <ref> [28] </ref>. For a series-parallel digraph G the problems of determining the value of a maximum flow and the length of a shortest st-path are closely related. Let T be the SPQ-tree of G.
Reference: [29] <author> J. Valdes, R.E. Tarjan, and E.L. Lawler, </author> <title> "The Recognition of Series Parallel Digraphs," </title> <journal> SIAM J. on Computing 11 (1982), </journal> <pages> 298-313. </pages>
Reference-contexts: It is possible to test in O (m) time whether a digraph is a series-parallel digraph <ref> [29] </ref>. It has been recently shown that the transitive closure of a series-parallel digraph can be dynamically maintained in O (log m) time per query or update operation using O (m) space [17,27]. 9 (c) Expression tree for computing the length of a shortest st-path in G. <p> The leaves of T are Q-nodes. The internal nodes are either P-nodes or S-nodes. If G has m edges, then T has m leaves and hence 2m 1 nodes. Tree T can be constructed in O (m) time using the recognition algorithm of <ref> [29] </ref>. Consider a digraph G with weighted edges, and let s and t be two vertices of G. Let e be an edge of G. For the shortest st-path problem, the weight of e represents the length of e, denoted length (e). <p> Proof: (If ) If v 0 and v 00 meet either condition in the lemma, then G is clearly a series-parallel digraph with an additional parallel composition. (Only If ) We use the property that a series-parallel digraph has no subgraph homeomorphic to the digraph W shown in Fig. 11 <ref> [29] </ref>. Suppose that v 0 and v 00 do not meet either condition of the lemma. Assume that T keeps the chain invariant. Let be the least common ancestor in T of the proper nodes of v 0 and v 00 , and be the chain containing .
Reference: [30] <author> L. Weinberg, </author> <title> "Linear Graphs: Theorems, Algorithms, and Applications," in Aspects of Network and System Theory, R.E. </title> <editor> Kalman and N. DeClaris, eds., Holt, Rinehart and Winston, </editor> <year> 1971. </year> <month> 22 </month>
Reference-contexts: An important application of dynamic expression trees is the dynamic maintenance of the maximum flow and shortest path in series-parallel digraphs. Such digraphs arise in a variety of problems such as scheduling [19], electrical networks (see, e.g., <ref> [30] </ref>), data-flow analysis [8], database logic programs [1], and circuit layout [25]. Also, some problems that are NP-complete for general graphs admit linear-time solutions when restricted to series-parallel digraphs [26].
References-found: 30

