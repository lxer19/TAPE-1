URL: http://www.cs.concordia.ca/~faculty/gregb/home/PS/softdocs-survey.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/gregb/home/paper.html
Root-URL: http://www.cs.concordia.ca
Title: Knowledge and the Recognition and Understanding of Software Documents formulae; the work on document management
Author: G. Butler, P. Grogono, R. Shinghal, I.A. Tjandra 
Note: the work on recognition of technical documents that include graphics, tables, and  
Address: Montreal, Quebec, H3G 1M8 Canada  
Affiliation: Concordia University, Department of Computer Science  
Abstract: We survey the work on the automatic recognition and understanding of software documents. In particular, we are concerned with the creation of formal models of the knowledge and information contained in software documents, and the uses that can be made of these models. This includes formal descriptions of the structure and layout of software documents, as well as the deeper semantics of a document's contents. We found only a few papers dealing specifically with the recognition and understanding of software documents. However, there are sources of information from which we can infer the state-of-the-art and the open research issues. Three sources are Current technology for document processing can handle several subtasks necessary for understanding software documents. The recognition and understanding of text from constrained domains, and of diagrams and tables are adequately handled in the state-of-the-art. These tasks would be improved if more contextual knowledge about document layouts, and domain standards were used. For the processing of text constrained to a particular domain of discourse, domain knowledge in the form of lexicons and grammars is vital. Mathematical formula and equations are not handled well. Deep understanding of documents is difficult. It has been handled on a case by case basis for a few individual document types, such as flow charts and circuit diagrams. Flexibility and robustness is added to document processing systems through a model-driven approach, thus separating processing from the models of the domain knowledge, such as document layouts and standards, and from algorithmic knowledge, such as image processing algorithms. The choice and representation of domain knowledge to enable deep understanding is a very difficult problem. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Allen, J. </author> <year> (1987). </year> <title> Natural Language Understanding. </title> <address> Benjamin/Cummings, Menlo Park, CA. </address>
Reference: <author> Arnell, A. </author> <year> (1982). </year> <title> Standard Grahical Symbols: A Comprehensive Guide for Use in Industry, </title> <booktitle> Engineering, and Science. </booktitle> <publisher> McGraw-Hill. </publisher>
Reference: <author> Babich, W. A. </author> <year> (1986). </year> <title> Software Configuration Management. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> Baird, H. </author> <year> (1992). </year> <title> Anatomy of a versatile page reader. </title> <booktitle> Proceedings of the IEEE, </booktitle> <address> 80(7):1059 - 1065. </address>
Reference: <author> Bandinelli, S. </author> <year> (1992). </year> <title> Process enactment in Spade. </title> <editor> In Derniame, J., editor, </editor> <booktitle> Software Process Technology. </booktitle> <publisher> Springer-Verlag, LNCS vol. </publisher> <pages> 635. </pages>
Reference-contexts: Hence, Aries like State-mate shows the advantage of a knowledge representation with the ability to drive inferences or executions. Spade Spade is an environment to design, analyse, and enact software process models <ref> (Bandinelli, 1992) </ref>. Slang, which is the language embedded in Spade, is based on high-level Petri nets. A process, which is specified by using Slang, is executable, in the sense that it can be used for verification purposes.
Reference: <author> Bates, M. </author> <year> (1978). </year> <title> The Theory and Practice of Augmented Transition Networks, </title> <booktitle> pages 191 - 259. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York. </address>
Reference-contexts: Pronouns. February 27, 1995 Page 16 conjunctions, prepositions, and articles are independent of the domain of the text. But nouns, verbs, adjectives, and adverbs are not so because they span the terminology prevalent in the domain. Augmented Transition Nets (ATNs) are commonly used to parse sentences <ref> (Bates, 1978) </ref>. ATNs represent the grammar under which the sentences in the text were written.
Reference: <author> Bayer, T. </author> <year> (1993). </year> <title> Understanding structured text documents by a model based document analysis system. </title> <booktitle> In Proceedings of the Second International Conference on Document Analysis and Recognition, </booktitle> <address> Tokyo, Japan, </address> <pages> pages 448 - 453. </pages> <publisher> IEEE Press. </publisher>
Reference: <author> Beffert, H. and Shinghal, R. </author> <year> (1989). </year> <title> Skeletonizing binary patterns on the homogeneous multiprocessor. </title> <journal> International Journal of Pattern Recognition and Artificial Intelligence, </journal> <volume> 3(2):207 - 216. </volume>
Reference-contexts: Nagy (1992) says that "OCR tasks require integrated treatment of entire documents and well-organized typographic domain-specific knowledge". During preprocessing, the character may be reduced to its skeleton, so that it retains its shape, but not the unnecessary thickness of its strokes <ref> (Beffert and Shinghal, 1989) </ref>. Recognition may be interleaved with feature extraction: a feature is extracted, a decision is made on the sub-group of characters to which the character being examined belongs, a second feature is extracted, and so on until the character is identified.
Reference: <author> Benjamin, D., Forgues, P., Gulko, E., Massicote, J., and Meubus, C. </author> <year> (1988). </year> <title> The use of high-level knowledge for enhanced entry of engineering drawings. </title> <booktitle> In Proceedings of 9th International Conference on Pattern Recognition, </booktitle> <pages> pages 119 - 124. </pages> <publisher> IEEE Press. </publisher>
Reference: <author> Berman, B. and Fateman, R. </author> <year> (1993). </year> <title> Optical character recognition for typeset mathematics. </title> <booktitle> In Proceedings of the International Symposium on Symbolic and Algebraic Computation, </booktitle> <address> July 20 - 22, Oxford, England, </address> <pages> pages 348 - 353. </pages> <publisher> ACM Press, </publisher> <address> New York. </address>
Reference: <author> Brachman, R. and Levesque, H., </author> <title> editors (1985). </title> <booktitle> Readings in Knowledge Representation. </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This implies that a representation formalism or a representation language <ref> (Brachman and Levesque, 1985) </ref> with a well-defined semantics is used for these purposes. Recently, knowledge representation formalisms, such as frames, semantic nets, logics, and production rules, have been used to represent a model of the semantic structure of a document.
Reference: <editor> Cercone, N. and G. McCalla (eds.) </editor> <year> (1992). </year> <title> A special issue on natural language processing. </title> <journal> Computational Intelligence: An International Journal, </journal> <volume> 8(2). </volume>
Reference: <author> Chen, P. </author> <year> (1976). </year> <title> The entity-relationship model toward a unified view of data. </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 1(1):9 - 36. </volume>
Reference-contexts: The dataflow diagram (see Figure 4) is a modeling tool which pictures a system as a network of functional processes. A dataflow diagram shows the flow of data through a system (Yourdon, 1989). The entity-relationship diagram <ref> (Chen, 1976) </ref> was introduced to define the logical relationships amongst data.
Reference: <author> Chikofsky, E. and Cross, J. </author> <year> (1990). </year> <title> Reverse engineering and design recovery: A taxonomy. </title> <journal> IEEE Software, </journal> <volume> 7(1):13 - 17. </volume>
Reference: <author> Cohen, E. </author> <month> (July, </month> <year> 1994). </year> <title> Computational theory for interpreting handwritten text in constrained domain. </title> <journal> Artificial Intelligence, </journal> <note> 67(1):1 - 31. February 27, 1995 Page 44 Conte, </note> <author> S. D., Dunsmore, H. E., and Shen, Y. E. </author> <year> (1986). </year> <title> Software Engineering Metrics and Models. </title> <publisher> Benjamin/Cummings. </publisher>
Reference-contexts: The information is written or printed in fields in the cheque. Understanding bank cheques is concerned with determining the information as written or printed in the cheque automatically. In <ref> (Cohen, 1994) </ref> a computational theory for interpreting handwritten text in constrained domains is presented. In (Dimaoro et al., 1993) a system for processing Italian bank cheques is presented. The major feature of the system is hand-writing recognition.
Reference: <author> Dengel, A., Bleisinger, R., Hoch, R., Fein, F., and Hones, F. </author> <year> (1992). </year> <title> From paper to office document standard representation. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 63 - 67. </pages>
Reference-contexts: A main component is the paper-computer interface which transforms the paper document into a standard symbolic representation. The international standard Office Document Architecture (ODA) (Horak, 1985) provides mechanisms to both generate and exchange electronic documents. A document understanding system <ref> (Dengel et al., 1992) </ref> usually performs the following tasks: optical scanning; layout extraction; logical labeling; and text recognition. See Figure 13. The paper document is described by two complementary tree structures: the layout structure and the logical structure. These are respectively the syntactic and semantic structures.
Reference: <author> Devanbu, P., Brachman, R., Selfridge, P., and Ballard, B. </author> <year> (1990). </year> <title> Lassie: A knowledge-based software information system. </title> <booktitle> In Proceedings of 12th International Conference on Software Engineering, </booktitle> <pages> pages 249 - 261. </pages> <publisher> IEEE Press. </publisher>
Reference: <author> Dimaoro, G., Grattagliano, M., Impedevo, S., and Pirlo, G. </author> <year> (1993). </year> <title> A system for a bankchecks processing. </title> <booktitle> In Proceedings of the Second International Conference on Document Analysis and Recognition, </booktitle> <address> Tokyo, Japan, </address> <pages> pages 454 - 459. </pages> <publisher> IEEE Press. </publisher>
Reference-contexts: The information is written or printed in fields in the cheque. Understanding bank cheques is concerned with determining the information as written or printed in the cheque automatically. In (Cohen, 1994) a computational theory for interpreting handwritten text in constrained domains is presented. In <ref> (Dimaoro et al., 1993) </ref> a system for processing Italian bank cheques is presented. The major feature of the system is hand-writing recognition.
Reference: <author> Forte, G. </author> <year> (1992). </year> <title> Tools fair: out of the lab, onto the shelf. </title> <journal> IEEE Software, </journal> <pages> pages 70-79. </pages>
Reference-contexts: All of these tools operate on either source code or compiled code, and consequently they provide support for only the late phases of software development. The term "CASE tool" <ref> (Forte, 1992) </ref>, in which CASE stands for "computer aided software engineering", however, is usually reserved for software that contributes to early phases of development, including the production and maintenance of on-line documents. These tools have been slow to emerge because automatic document processing is a field still in its infancy.
Reference: <author> Futrelle, R. </author> <year> (1991). </year> <title> Preprocessing and lexicon design for parsing technical text. </title> <booktitle> In Proc. Second Int'l Workshop on Parsing Technologies, </booktitle> <pages> pages 31 - 40. </pages> <publisher> Assoc. Computational Linguistics, </publisher> <address> Marristown, N.J. </address>
Reference-contexts: Document recognition and understanding | indeed deep understanding | is one means of knowledge acquisition being used. Issues of processing technical text and the use of domain-specific lexicons is discussed in <ref> (Futrelle, 1991) </ref>. The processing of scientific diagrams (Futrelle et al., 1992) is based on a graphics constraint grammar for each type of diagram. A grammar specifies the set of objects, the attributes of the objects, and the relation between the objects of a class of diagrams.
Reference: <author> Futrelle, R., Kakadiaris, A., Alexander, J., Carriero, C., and Nikolakis, N. </author> <year> (1992). </year> <title> Understanding diagrams in technical documents. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 75 -78. </pages>
Reference-contexts: Deeper understanding of journal articles would be necessary to support an automated scientist's assistant <ref> (Futrelle et al., 1992) </ref> in responding to a user's query about the state of scientific knowledge in a specific field. This includes a deep understanding of the diagrams and pictures, as well as the text in an article. Technical and scientific articles are more complex than office documents. <p> A block grammar is intended to interpret each subblock of a given block as a particular entity. The layout is represented in a data February 27, 1995 Page 21 structure called an X-Y tree. The Scientist's Assistant <ref> (Futrelle et al., 1992) </ref> is meant to acquire and process knowledge about a subfield of biology. Document recognition and understanding | indeed deep understanding | is one means of knowledge acquisition being used. Issues of processing technical text and the use of domain-specific lexicons is discussed in (Futrelle, 1991). <p> Document recognition and understanding | indeed deep understanding | is one means of knowledge acquisition being used. Issues of processing technical text and the use of domain-specific lexicons is discussed in (Futrelle, 1991). The processing of scientific diagrams <ref> (Futrelle et al., 1992) </ref> is based on a graphics constraint grammar for each type of diagram. A grammar specifies the set of objects, the attributes of the objects, and the relation between the objects of a class of diagrams.
Reference: <author> Ghezzi, C., Jazayeri, M., and Mandrioli, D. </author> <year> (1991). </year> <title> Fundamentals of Software Engineering. </title> <publisher> Prentice Hall. </publisher>
Reference-contexts: The cooperative development of a complex program is commonly called "software engineering". Software engineering projects, like the engineering projects on which they are based, make extensive use of documents. Indeed, the waterfall model of software development has been described as "document driven" <ref> (Ghezzi et al., 1991, p.368) </ref>.
Reference: <author> Harel, D., Lachover, H., Naamad, A., Pnueli, A., Politi, M., Sherman, R., and Shtul-Trauring, A. </author> <year> (1988). </year> <title> Statemate: A working environment for the development of complex reactive systems. </title> <booktitle> In Proceedings of 10th International Conference on Software Engineering, </booktitle> <pages> pages 396 - 406. </pages> <publisher> IEEE Press. </publisher>
Reference-contexts: February 27, 1995 Page 33 Statemate Statemate is a graphical working environment, intended for the specification, analysis, design, and documentation of large and complex reactive systems <ref> (Harel et al., 1988) </ref>.
Reference: <author> Helm, R. and Maarek, Y. </author> <year> (1991). </year> <title> Integrating information retrieval and domain specific approaches for browsing and retrieval in object-oriented class libraries. </title> <editor> In Paepcke, A., editor, </editor> <booktitle> OOPSLA'91, </booktitle> <pages> pages 47 - 61. </pages> <publisher> ACM. </publisher>
Reference: <author> Ho, T., Hull, J., and Srihari, S. </author> <year> (1994). </year> <title> Decision combination in multiple classifier systems. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 16(1):666 - 675. </volume>
Reference: <author> Horak, W. </author> <year> (1985). </year> <title> Office document architecture and office document interchange formats: Current status of international standardization. </title> <journal> IEEE Computer, </journal> <volume> 18(10):50 - 60. </volume>
Reference-contexts: A main component is the paper-computer interface which transforms the paper document into a standard symbolic representation. The international standard Office Document Architecture (ODA) <ref> (Horak, 1985) </ref> provides mechanisms to both generate and exchange electronic documents. A document understanding system (Dengel et al., 1992) usually performs the following tasks: optical scanning; layout extraction; logical labeling; and text recognition. See Figure 13.
Reference: <author> Humphrey, W. </author> <year> (1989). </year> <title> Managing the Software Process. </title> <publisher> Addison-Wesley Publishing Company. </publisher>
Reference-contexts: schema, the class layer is defined by a meta-schema, and the conceptual and retrieval models themselves described by a meta-meta-schema. 6 The Software Process and CASE Tools The term software process refers to the set of activities, methods, and practices that are used in the production and evolution of software <ref> (Humphrey, 1989) </ref>. As the software process is a complex and variable process, certain software process models have been introduced, for example the waterfall approach, explanatory programming, and incremental prototyping.
Reference: <author> Hurley, R. </author> <year> (1983). </year> <title> Decision Tables in Software Engineering. Van Nostrand Reinhold Company. IBM (1976). International Business Machines Corporation, Reference Manual, Flow Charting and Block Diagramming Techniques. Data Processing Division, </title> <address> 112 East Post Road, White Plains, N.Y. </address> <note> February 27, 1995 Page 45 Iliescu, </note> <author> S. and Shinghal, R. </author> <year> (1994). </year> <title> Noise removal from binary patterns using adjacency graphs. </title> <booktitle> In Proceedings of International Conference on System, Man, and Cybernetics, </booktitle> <address> San Antonio, Texas, </address> <pages> pages 79 - 84. </pages> <publisher> IEEE Press. </publisher>
Reference-contexts: Decision tables are particularly clearer than alternative approaches when the number of constituents is large, say three or more. Some system specifications consist entirely of a set of decision tables. Decision tables are used if the development must take some actions based upon complex decisions <ref> (Hurley, 1983) </ref>. In some cases, it may be appropriate to represent a software specification as a chart or a diagram. The dataflow diagram (see Figure 4) is a modeling tool which pictures a system as a network of functional processes.
Reference: <author> Johnson, W., Benner, K., and Harris, D. </author> <month> (August </month> <year> 1993). </year> <title> Developing formal specifications from informal requirements. </title> <journal> IEEE Expert, </journal> <pages> pages 82 - 90. </pages>
Reference-contexts: For example, identify what has changed between two versions of a system, or identify where a design and an implementation are not in conformance. A human-intensive task such as the extraction of formal specifications from informal requirements <ref> (Johnson et al., 1993) </ref> would query the model of the formal specification, even though that model would probably be incomplete. <p> Aries Aries, which stands for acquisition of requirements and incremental evolution of specifications, is a requirement and specification environment (for acquisition of requirements and incremental evolution of specification) which helps analysts evaluate system requirements and codify them into formal specifications <ref> (Johnson et al., 1993) </ref>. The system can present a description of a system component in a formal notation or in informal notation. Its modularized central KB uses a common underlying representation, enabling analysts to reuse and share various types of knowledge.
Reference: <author> Kaiser, G., Feiler, P., and Popovich, S. </author> <year> (1988). </year> <title> Intelligent assistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <pages> pages 40 -49. </pages>
Reference-contexts: Marvel Marvel is an integrated project support environment (IPSE) that handles early error checking and answers question about programs. Marvel has a certain understanding of the systems being developed and how to use tools to produce software <ref> (Kaiser et al., 1988) </ref>. It aids individual programmers and helps coordinate programmer teams. The Marvel's knowledge is represented in a model and achieves intelligence by interpreting the model. A database stores artifacts related to the software product.
Reference: <author> Karlsson, E., Ribot, D., Sindre, G., and Conradi, R. </author> <title> (to appear). Software reuse is knowledge reuse. </title> <editor> In Lepape, B. and Schlumberger, M., editors, </editor> <booktitle> From Knowledge Engineering to Software Engineering. </booktitle>
Reference: <author> Kasturi, R., Bow, S., El-Masri, W., Shah, J., Gattiker, J., and Mokate, U. </author> <year> (1994). </year> <title> A system for interpretation of line drawings. </title> <journal> IEEE Transaction on Pattern Analysis and Machine Intelligence, </journal> <volume> 12(10) </volume> <pages> 978-992. </pages>
Reference-contexts: A catalog of known shapes is used for identification of the graphics primitives. February 27, 1995 Page 17 The system does not produce a deep understanding of the semantics of the diagrams, since it is not domain-specific. The article <ref> (Kasturi et al., 1994) </ref> discusses each of the steps in detail and demonstrates that the system can recognize a wide range of line diagrams, including tables and diagrams similar to those in software documents. A test example they use is shown in Figure 12. <p> Their techniques also recognize tables, and extract embedded text from the line diagrams. However, they present no performance figures, nor a discussion of the limitations of their method. Recognition and understanding of line diagrams and tables is suitably handled <ref> (Kasturi et al., 1994) </ref>, but deep understanding of the various diagrammatic notations is not. Equations are problematic. <p> In present approaches, the knowledge is hard-wired into the algorithm (Suen and Radhakrishnan, 1976), given as a database of cases <ref> (Kasturi et al., 1994) </ref>, or described in grammars which are very time-consuming to develop. 5 Document processing emphasizing knowledge repre sentation In order to represent the semantic structure of a document, a formal semantics of the document is required.
Reference: <author> Kreich, J. </author> <year> (1993). </year> <title> Robust recognition of documents. </title> <booktitle> In Proceedings of the Second International Conference on Document Analysis and Recognition, </booktitle> <address> Tokyo, Japan, </address> <pages> pages 444 - 447. </pages> <publisher> IEEE Press. </publisher>
Reference: <author> Kreich, J., Luhn, A., and Maderlechner, G. </author> <year> (1991). </year> <title> An experimental environment for model based document analysis. </title> <booktitle> In Proceedings of 1st International Conference on Document Analysis and Recognition, </booktitle> <pages> pages 50 - 58. </pages>
Reference: <author> Krishnamoorthy, M., Nagy, G., Seth, S., and Viswanathan, M. </author> <year> (1993). </year> <title> Syntactic segmentation and labeling of digitized pages from technical journals. </title> <journal> IEEE Transaction on Pattern Analysis and Machine Intelligence, </journal> <volume> 15(7):737 - 747. </volume>
Reference-contexts: The major thrust of research in the recognition and understanding of these documents is segmentation in order to isolate the various regions and components in a document <ref> (Krishnamoorthy et al., 1993) </ref>. The Gobbledoc (Nagy et al., 1992) system deals with technical articles in a few journals. For each journal, a set of grammars are developed which describe the possible page layouts of articles in the journal.
Reference: <author> Lee, H. and Lee, M. </author> <year> (1994). </year> <title> Understanding mathematical expression using procedure-oriented transformation. </title> <journal> Pattern Recognition, </journal> <volume> 27(3):447 - 457. </volume>
Reference-contexts: Not much work has been done in the area. The most recent reported results <ref> (Lee and Lee, 1994) </ref> achieve about 80% recognition rate for a modest sub-domain of mathematical expressions. The work on office documents indicates that segmentation and the determination of the layout structure of documents is under active research, though not yet solved.
Reference: <author> Mills, H. D. and Dyson, P. B., </author> <title> editors (1990). </title> <journal> IEEE Software, volume 7. </journal> <note> Special issue on software metrics. </note>
Reference: <author> Murase, H. and Wakahara, T. </author> <year> (1986). </year> <title> Online hand-sketched figure recognition. </title> <journal> Pattern Recognition, </journal> <volume> 19(2):147 - 160. </volume>
Reference: <author> Nagy, G. </author> <year> (1992). </year> <title> At the frontier of ocr. </title> <booktitle> IEEE Proceedings, </booktitle> <pages> pages 1093 -1100. </pages>
Reference-contexts: A document understanding system for technical journals may improve the efficiency of searching particular journals in the library, or ease the overhead of browsing remotely over phone lines <ref> (Nagy et al., 1992) </ref>. For these purposes, text retrieval methods can be applied to an ASCII representation of the journal text to enable efficient search, and the transmission of regions of a page image or page skeleton can reduce the communication overhead of remote access. <p> The major thrust of research in the recognition and understanding of these documents is segmentation in order to isolate the various regions and components in a document (Krishnamoorthy et al., 1993). The Gobbledoc <ref> (Nagy et al., 1992) </ref> system deals with technical articles in a few journals. For each journal, a set of grammars are developed which describe the possible page layouts of articles in the journal. This is very time-consuming, and only provides a fuzzy specification against which a "best match" is selected.
Reference: <author> Nagy, G., Seth, S., and Viswanathan, M. </author> <year> (1992). </year> <title> A prototype document image analysis system for technical journals. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 10 -22. </pages>
Reference-contexts: A document understanding system for technical journals may improve the efficiency of searching particular journals in the library, or ease the overhead of browsing remotely over phone lines <ref> (Nagy et al., 1992) </ref>. For these purposes, text retrieval methods can be applied to an ASCII representation of the journal text to enable efficient search, and the transmission of regions of a page image or page skeleton can reduce the communication overhead of remote access. <p> The major thrust of research in the recognition and understanding of these documents is segmentation in order to isolate the various regions and components in a document (Krishnamoorthy et al., 1993). The Gobbledoc <ref> (Nagy et al., 1992) </ref> system deals with technical articles in a few journals. For each journal, a set of grammars are developed which describe the possible page layouts of articles in the journal. This is very time-consuming, and only provides a fuzzy specification against which a "best match" is selected.
Reference: <author> Nassi, I. and Shneiderman, B. </author> <year> (1973). </year> <title> Flowchart techniques for structured programming. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 8:12 - 26. </volume>
Reference-contexts: A rectangle represents a module or procedure. A circle represents a user input. A rounded box represents a file or database. A design tree is the fundamental component of a structure chart. The Nassi-Shneiderman chart <ref> (Nassi and Shneiderman, 1973) </ref>, or NS Chart, was designed to replace the traditional flow chart. Its main objective is to produce a more structured flow chart. It is used as a tool for detailed low-level design.
Reference: <author> O'Gorman, L. and Kasturi, R. </author> <year> (1992). </year> <title> Document image analysis systems. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 5 - 8. </pages> <note> February 27, 1995 Page 46 Ould, </note> <author> M. and Roberts, C. </author> <year> (1988). </year> <title> Defining formal models of the software development process. </title> <editor> In Brereton, P., editor, </editor> <booktitle> Software Engineering Environment. </booktitle> <publisher> Ellis Horwood. </publisher>
Reference: <editor> Periera, F. and B.J. Grosz (eds.) </editor> <year> (1993). </year> <title> A special issue on natural language processing. </title> <journal> Artificial Intelligence, </journal> <volume> 63(1 - 2). </volume>
Reference: <author> Polon, D., </author> <title> editor (1972). Dictionary of Computer and Control Systems Abbreviations: Signs, and Symbols. </title> <publisher> Odyssey Press. </publisher>
Reference: <author> Pozzi, S. and Celentano, A. </author> <year> (1993). </year> <title> Knowledge-based document filing. </title> <journal> IEEE Expert, </journal> <pages> pages 34 - 45. </pages>
Reference-contexts: In Fresco, knowledge about recognition, syntactic, and semantic structure of particular documents can be represented by means of an embedded language. The language is based on the notions of semantic nets and frames. February 27, 1995 Page 24 Kabiria <ref> (Pozzi and Celentano, 1993) </ref> is a knowledge-based document filing system designed to represent, maintain, and communicate document semantics in an office. It supports the classification, filing, and retrieval of office documents through several levels of knowledge representation. The representation formalism is mainly based on the framework of semantic nets. <p> Kabiria Kabiria is a filing and retrieval system designed to use knowledge that classifies the kind of documents which arise in a given domain, such as banking, and knowledge that defines the role of various documents in the procedural aspects of an organization <ref> (Pozzi and Celentano, 1993) </ref>. The prototype of Kabiria concentrates on classification and retrieval of documents, and assumes that its input is a (possibly incomplete) description of the layout and text of a document.
Reference: <author> Quirk, R., Greenbaum, S., Leech, G., </author> <title> and Svartvik (1985). A Comprehensive Grammar of the English language. </title> <publisher> Longman, </publisher> <address> London, U.K. </address>
Reference-contexts: Baird (1992) and Tsujhimoto and Asada (1992) describe details of text recognition systems. Before carrying out a syntactic analysis, one must delineate the grammar under which the sentences in the text are written. This may be the full English grammar <ref> (Quirk et al., 1985) </ref>, or, as happens most often, only a part of it. Using the full grammar makes processing difficult as ambiguity is introduced when a sentence can be parsed more than one way.
Reference: <author> Reisig, W. </author> <year> (1984). </year> <title> A Petri Net Primer. </title> <booktitle> EATCS Monograph on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In particular, a meta-model and meta-process describe the evolution of a software process model. The documents used to model the software process are a combination of graphical and textual descriptions. A graphical description may consist of a Petri net <ref> (Reisig, 1984) </ref> to describe a set of activities and their dependencies; for example, see Figure 24. Some Software Environments This section presents some software environments, with an emphasis on knowledge representation and the role of knowledge.
Reference: <author> Rocha, J. and Pavlidis, T. </author> <year> (1994). </year> <title> A shape analysis model with applications to a character recognition system. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 16(4):393 - 404. </volume>
Reference: <author> Schurmann, J., Bartneck, N., Bayer, T., Franke, J., Mandler, E., and Oberlander, M. </author> <year> (1992). </year> <title> Document analysis from pixels to contents. </title> <booktitle> IEEE Proceedings, </booktitle> <pages> pages 1101 - 1119. </pages>
Reference-contexts: -&gt; nat; declare s: stack; n: nat; axioms isNewStack (newStack) = true; isNewStack (push (s,n)) = false; pop (newStack) = newStack; pop (push (s,n)) = s; top (newStack) = zero; top (push (s,n)) = n February 27, 1995 Page 11 February 27, 1995 Page 12 4 Document Processing Document processing <ref> (Schurmann et al., 1992) </ref> in general aims to transform any information on paper into an equivalent symbolic representation that can be stored in a computer information system.
Reference: <author> Shinghal, R. </author> <year> (1982). </year> <title> A hybrid algorithm for contextual text recognition. </title> <journal> Pattern Recognition, </journal> <volume> 16(2):261 - 267. </volume>
Reference-contexts: If not, a deeper analysis of the word is carried out <ref> (Shinghal, 1982) </ref> until it is recognized. Often, a word is recognized by assuming it is the nearest match in the lexicon. Baird (1992) and Tsujhimoto and Asada (1992) describe details of text recognition systems.
Reference: <author> Sommerville, I. </author> <year> (1992). </year> <title> Software Engineering. </title> <publisher> Addison-Wesley Publishing Co., 4th edition. </publisher>
Reference-contexts: Figure 5 illustrates an entity-relationship diagram that depicts a manager-employee relationship. The notation of structure charts was first introduced by Stevens, Meyers, and Constan-tine (Stevens et al., 1984) to specify the overall architecture of a system. A structure chart (see Figure 6 <ref> (Sommerville, 1992) </ref>) is a graphical means of visualizing the hierarchical composition of a system in terms of modules or procedures. A rectangle represents a module or procedure. A circle represents a user input. A rounded box represents a file or database.
Reference: <author> Stevens, W., Meyers, G., and Constantine, L. </author> <year> (1984). </year> <title> Structured designs. </title> <journal> IBM Systems Journal, </journal> <volume> 13(1):115 - 139. </volume>
Reference-contexts: Entities are objects that can be defined uniquely. Relationships are conceptual links that exist between objects. Figure 5 illustrates an entity-relationship diagram that depicts a manager-employee relationship. The notation of structure charts was first introduced by Stevens, Meyers, and Constan-tine <ref> (Stevens et al., 1984) </ref> to specify the overall architecture of a system. A structure chart (see Figure 6 (Sommerville, 1992)) is a graphical means of visualizing the hierarchical composition of a system in terms of modules or procedures. A rectangle represents a module or procedure.
Reference: <author> Suen, C. and Radhakrishnan, T. </author> <year> (1976). </year> <title> Recognition of hand-drawn flowchart. </title> <booktitle> In Proceedings of International Conference of Pattern Recognition, </booktitle> <pages> pages 424 - 428. </pages>
Reference-contexts: In present approaches, the knowledge is hard-wired into the algorithm <ref> (Suen and Radhakrishnan, 1976) </ref>, given as a database of cases (Kasturi et al., 1994), or described in grammars which are very time-consuming to develop. 5 Document processing emphasizing knowledge repre sentation In order to represent the semantic structure of a document, a formal semantics of the document is required.
Reference: <author> Tichy, W. F. </author> <year> (1989). </year> <title> Software configuration management. </title> <booktitle> In Tutorial Notes of 11th ICSE. </booktitle> <publisher> IEEE Computer Society Press. </publisher>
Reference: <author> Tombre, K. and Antoine, D. </author> <year> (1989). </year> <title> Analysis of technical documents using a priori knowledge. </title> <editor> In Mohr, R., Pavlidis, T., and Sanfeliu, A., editors, </editor> <booktitle> Structural Pattern Analysis, </booktitle> <pages> pages 229 - 241. </pages> <publisher> World Scientific Publ. Co. </publisher>
Reference: <author> Tombre, K. and Vaxiviere, P. </author> <year> (1991). </year> <title> Structure, syntax and semantics in technical document recognition. </title> <booktitle> In Proceedings of 1st International Conference on Document Analysis and Recognition, </booktitle> <pages> pages 61 - 69. </pages>
Reference-contexts: Furthermore, such a system may be able to treat vague and ambiguous information, such as ambiguity about the type of a document. General knowledge about the meaning of a document can be useful in the steps of document recognition in order to enhance the recognition rate <ref> (Tombre and Vaxiviere, 1991) </ref>. Here we mention some systems which make use of the (incomplete) semantic structure to achieve better recognition results. The work of Murase and Wakahara (1986) deals with an online recognition method that recognizes flow charts and logic circuit diagrams that are hand-sketched on a tablet. <p> This leads to a possibility to correct the recognition result. The use of such semantic rules improves the number of correctly recognized symbols. In recognizing engineering drawings the use of semantic structure is of great importance. The system Celesstin <ref> (Tombre and Vaxiviere, 1991) </ref> was designed to recognize mechanical engineering drawings and to create a formal model of the drawing. The input is a scanned mechanical engineering drawing, and the output is the analysis of the drawing in terms of entities described in a Computer-Aided Design (CAD) system. <p> This can be regarded as syntactic knowledge. The need for semantic knowledge, including standards in the application domain, is illustrated by the work on engineering drawings and the Celesstin system <ref> (Tombre and Vaxiviere, 1991) </ref>. This knowledge provides useful feedback to amend earlier stages of processing, such as the re-introduction of arrowheads into line-vector drawings. However, the difficulty of deciding which knowledge is useful, and how it can be represented, is also illustrated by the experiences of the Celesstin project.
Reference: <author> Tsujhimoto, S. and Asada, H. </author> <year> (1992). </year> <title> Major components of a complete text reading system. </title> <booktitle> In Proceedings of the IEEE 80(1), </booktitle> <pages> pages 1133 - 1149. </pages> <publisher> IEEE Press. </publisher> <month> February 27, </month> <note> 1995 Page 47 VanHorebeek, </note> <author> I. and Lewi, J. </author> <year> (1989). </year> <title> Algebraic Specifications in Software Engineering. </title> <publisher> Springer-Verlag. </publisher>
Reference: <author> Walters, R. and Chikofsky, E. </author> <year> (1994). </year> <title> Introduction: </title> <journal> Special issue on reverse engineering. CACM, </journal> <volume> 37(5) </volume> <pages> 22-24. </pages> <note> Special issue on reverse engineering. </note>
Reference: <author> Yourdon, E. </author> <year> (1989). </year> <title> Modern Structured Analysis. </title> <address> Englewood Cliffs, N.J., </address> <publisher> Yourdon Press. </publisher>
Reference-contexts: In some cases, it may be appropriate to represent a software specification as a chart or a diagram. The dataflow diagram (see Figure 4) is a modeling tool which pictures a system as a network of functional processes. A dataflow diagram shows the flow of data through a system <ref> (Yourdon, 1989) </ref>. The entity-relationship diagram (Chen, 1976) was introduced to define the logical relationships amongst data.
Reference: <author> Yu, C., Tang, Y., and Suen, C. </author> <year> (1993). </year> <title> Document architecture language (dal): Approach to document processing. </title> <booktitle> In Proceedings of the Second International Conference on Document Analysis and Recognition, </booktitle> <address> Tokyo, Japan, </address> <pages> pages 103 - 106. </pages> <publisher> IEEE Press. </publisher>
Reference-contexts: For example, the behaviour as described in the diagram can be matched against the behaviour as described in the text of a document. The form of an office document often determines its semantic structure. Understanding a cheque amounts to acquiring each component <ref> (Yu et al., 1993) </ref>: the name and the address of the financial institute, the issue date, the name of the payee; the amount of payment in numeric format, the amount of payment in alphabetic format, the authorized signature, and the logo of the financial institute.
References-found: 60

