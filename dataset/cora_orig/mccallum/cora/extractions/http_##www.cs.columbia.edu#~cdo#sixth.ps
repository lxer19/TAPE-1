URL: http://www.cs.columbia.edu/~cdo/sixth.ps
Refering-URL: http://www.cs.columbia.edu/~cdo/papers.html
Root-URL: http://www.cs.columbia.edu
Email: (e-mail: cokasaki@cs.cmu.edu)  
Title: F U N C T I O N A L P E A R L
Author: CHRIS OKASAKI 
Address: 5000 Forbes Avenue, Pittsburgh, Pennsylvania, USA 15213  
Affiliation: School of Computer Science, Carnegie Mellon University  
Note: J. Functional Programming To appear. c 1997 Cambridge University Press 1  
Abstract-found: 0
Intro-found: 1
Reference: <author> Burge, W. H. </author> <title> (1975) Recursive Programming Techniques. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> Hutton, G. </author> <title> (1992) Higher-order functions for parsing. </title> <journal> Journal of Functional Programming 2(3) </journal> <pages> 323-343. </pages> <note> Functional pearls 5 Hutton, </note> <author> G. and Meijer, E. </author> <title> (1996) Monadic Parsing Combinators. </title> <type> Tech. </type> <institution> rept. NOTTCS-TR-96-4. Department of Computer Science, University of Nottingham. </institution>
Reference-contexts: Combinator parsing is a classic application of functional programming, dating back to at least Burge (1975). Most combinator parsers are based on Wadler's list-of-successes technique (Wadler, 1985). Hutton popularized the idea in his excellent tutorial Higher-Order Functions for Parsing <ref> (Hutton, 1992) </ref>.
Reference: <author> Milner, R., Tofte, M. and Harper, R. </author> <title> (1990) The Definition of Standard ML. </title> <publisher> The MIT Press. </publisher>
Reference-contexts: C533, issued by ESC/ENS under Contract No. F19628-95-C-0050. 2 Chris Okasaki The laziness in the return value is essential for controlling backtracking. However, lazy lists are awkward in a strict language like SML <ref> (Milner et al., 1990) </ref>, so we will instead manage backtracking using explicit success and failure continuations. We sketch only those details that are relevant to illustrating higher-order functions.
Reference: <author> Wadler, P. </author> <title> (1985) How to replace failure by a list of successes. </title> <booktitle> Conference on Functional Programming Languages and Computer Architecture pp. </booktitle> <pages> 113-128. </pages>
Reference-contexts: Combinator parsing is a classic application of functional programming, dating back to at least Burge (1975). Most combinator parsers are based on Wadler's list-of-successes technique <ref> (Wadler, 1985) </ref>. Hutton popularized the idea in his excellent tutorial Higher-Order Functions for Parsing (Hutton, 1992).
Reference: <editor> Wadler, P. </editor> <booktitle> (1992) The essence of functional programming. ACM Symposium on Principles of Programming Languages pp. </booktitle> <pages> 1-14. </pages>
References-found: 5

