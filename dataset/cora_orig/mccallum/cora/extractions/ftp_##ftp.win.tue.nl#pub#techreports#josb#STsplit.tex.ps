URL: ftp://ftp.win.tue.nl/pub/techreports/josb/STsplit.tex.ps
Refering-URL: http://www.win.tue.nl/cs/fm/misc/pubbaeten.html
Root-URL: http://www.win.tue.nl
Email: josb@win.tue.nl,  janb@phil.ruu.nl,  
Phone: 8, 3584  
Title: Deadlock Behaviour in Split and ST Bisimulation Semantics  
Author: J.C.M. Baeten J.A. Bergstra 
Date: March 18, 1998  
Web: http://www.win.tue.nl/win/cs/fm/josb/  http://www.wins.uva.nl/research/prog/people/janb/  
Address: P .O. Box 513, 5600 MB Eindhoven, The Netherlands,  Kruislaan 403, 1098 SJ Amsterdam, The Netherlands  Heidelberglaan  Netherlands,  
Affiliation: Department of Mathematics and Computing Science, Eindhoven University of Technology,  Programming Research Group, University of Amsterdam,  and Department of Philosophy, Utrecht University,  CS Utrecht, The  
Abstract: We investigate split and ST bisimulation semantics, in particular the deadlock be-haviour of processes in these semantics. We deflne and axiomatise a variant of ACP, where atomic actions and durational actions coexist, and deflne split and ST bisimulation semantics on this theory. We exhibit a closed term that has a deadlock in split semantics, but not in ST bisimulation semantics, and vice versa: a closed term that has a deadlock in ST bisimulation semantics but not in split semantics. As an application, we investigate difierent versions of durational communication. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Global renaming operators in concrete process algebra. </title> <journal> Information and Computation, </journal> <volume> 78 </volume> <pages> 205-245, </pages> <year> 1988. </year>
Reference-contexts: In the sequel, we talk about the deadlock behaviour of processes. For our purposes, the following deflnition su-ces. 4 Deflnition 1 We deflne when a term has a deadlock. We give an operational deflnition and an equational deflnition. We refer to <ref> [1] </ref> for more information, and a proof that both notions coincide. Let t be a closed term. We say t has a deadlock if starting from t we can execute a number of steps to a process t 0 that cannot execute a step at all.
Reference: [2] <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> On sequential composition, action preflxes and process preflx. </title> <journal> Formal Aspects of Computing, </journal> <volume> 6(3) </volume> <pages> 250-268, </pages> <year> 1994. </year>
Reference-contexts: The signature of ACP contains the following ingredients: A given number of core atomic actions r; s; c; t; u; : : : . Core atomic actions were introduced in <ref> [2] </ref>. CA is the set of core atomic actions. All core atoms are atomic actions, CA A, where A is the set of all atomic actions a; b; d; : : : . Later, we will construct atomic actions that are not core atoms. A constant inaction denoted -. <p> In order to describe this, we need the early read and process preflx mechanisms of <ref> [2] </ref>. We briey recall this mechanism. For the sake of this discussion, we assume a flxed flnite set D of messages to be communicated. <p> The working of these can only be appreciated fully together with the process preflx operator ;. We display the axioms that we need, taken from <ref> [2] </ref>, in Table 7. In this table, we use the notation x [d=v] for the term x where all occurrences of v are substituted by d.
Reference: [3] <author> J.C.M. Baeten, J.A. Bergstra, and J.W. Klop. </author> <title> Syntax and deflning equations for an interrupt mechanism in process algebra. </title> <note> Fundamenta Informaticae, IX(2):127-168, </note> <year> 1986. </year>
Reference-contexts: To give an example, terms and ab + a- have a deadlock, and term a (b + -) does not have a deadlock. We will require two extra ingredients in the sequel: priorities, introduced in the ACP setting in <ref> [3] </ref>, and no exit iteration, introduced in [9] as a special case of the binary iteration operator of [6].
Reference: [4] <author> J.C.M. Baeten and C. Verhoef. </author> <title> Concrete process algebra. </title> <editor> In S. Abramsky, D.M. Gabbay, and T.S.E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 4, </volume> <pages> pages 149-269. </pages> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: The rules for communication in lines 6 and 7 only hold in case a j b is deflned to be an atomic action, so not equal to -. The rules are in the so-called path format, see e.g. <ref> [4] </ref>, from which we know that the semantics induced by the rules have some nice properties. We deflne (strong) bisimulation equivalence in the standard way, based on these rules. <p> We deflne (strong) bisimulation equivalence in the standard way, based on these rules. Since the rules are in path format, bisimulation is a congruence for all operators, and the set of closed terms modulo bisimulation turns into an algebra for the signature of ACP. From <ref> [4, 5] </ref> we quote the result that the axiomatisation of Table 1 is sound and complete the algebra of closed terms modulo bisimulation. a ! x ! x 0 a y ! y 0 a x ! x + y ! y ! x + y ! x ! x 0 <p> The deduction rules for priority use so-called negative premises. Nevertheless, the rules are well-deflned, and again induce an algebra of closed terms modulo bisimulation congruence. This result uses the fact that the rules are in so-called panth format, see <ref> [4] </ref>. In [4], we can also flnd the proof that the axioms for ACP plus priorities form a sound and complete axiomatisation for the model of closed terms modulo bisimulation equivalence. <p> The deduction rules for priority use so-called negative premises. Nevertheless, the rules are well-deflned, and again induce an algebra of closed terms modulo bisimulation congruence. This result uses the fact that the rules are in so-called panth format, see <ref> [4] </ref>. In [4], we can also flnd the proof that the axioms for ACP plus priorities form a sound and complete axiomatisation for the model of closed terms modulo bisimulation equivalence. <p> Again, the axiomatisation is sound and complete for the operational model. Proof For the second part, the proof of completeness of the axioms for ACP plus durational actions and history pointer shift for the bisimulation model induced by the operational rules of Table 6 follows the recipe of <ref> [4] </ref>. We outline the key elements of this proof. First, we deflne the set of basic terms. These are closed terms built with just alternative composition and preflx multiplication. <p> By using this elimination theorem, together with a general conservative extension theorem based on the path format of our deduction rules, the pro of reduces to the completeness proof of ACP (see <ref> [5, 4] </ref>). The remainder of the proof is straightforward, given the many examples in [4]. 4 Deadlock in Split but not in ST We prove that there exists a simple process, that deadlocks in split semantics, but not in ST semantics. <p> By using this elimination theorem, together with a general conservative extension theorem based on the path format of our deduction rules, the pro of reduces to the completeness proof of ACP (see [5, 4]). The remainder of the proof is straightforward, given the many examples in <ref> [4] </ref>. 4 Deadlock in Split but not in ST We prove that there exists a simple process, that deadlocks in split semantics, but not in ST semantics.
Reference: [5] <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <booktitle> Number 18 in Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: We consider a couple of alternatives modeled as durational actions, and flnd also here difiering deadlock behaviour. 2 ACP with Priorities and No Exit Iteration We start out from the well-known theory ACP <ref> [7, 5] </ref>. We apologize to the reader who has seen this many times before; he can skip the material until Deflnition 1. The signature of ACP contains the following ingredients: A given number of core atomic actions r; s; c; t; u; : : : . <p> We deflne (strong) bisimulation equivalence in the standard way, based on these rules. Since the rules are in path format, bisimulation is a congruence for all operators, and the set of closed terms modulo bisimulation turns into an algebra for the signature of ACP. From <ref> [4, 5] </ref> we quote the result that the axiomatisation of Table 1 is sound and complete the algebra of closed terms modulo bisimulation. a ! x ! x 0 a y ! y 0 a x ! x + y ! y ! x + y ! x ! x 0 <p> By using this elimination theorem, together with a general conservative extension theorem based on the path format of our deduction rules, the pro of reduces to the completeness proof of ACP (see <ref> [5, 4] </ref>). The remainder of the proof is straightforward, given the many examples in [4]. 4 Deadlock in Split but not in ST We prove that there exists a simple process, that deadlocks in split semantics, but not in ST semantics.
Reference: [6] <author> J.A. Bergstra, I. Bethke, and A. Ponse. </author> <title> Process algebra with iteration and nesting. </title> <journal> The Computer Journal, </journal> <volume> 37(4) </volume> <pages> 243-258, </pages> <year> 1994. </year>
Reference-contexts: We will require two extra ingredients in the sequel: priorities, introduced in the ACP setting in [3], and no exit iteration, introduced in [9] as a special case of the binary iteration operator of <ref> [6] </ref>. The priority operator is parametrized by a partial ordering on atomic actions, and in a choice context, summands that start with an atomic action of high priority will block summands starting with an atomic action of lower priority. The axiomatization uses an auxiliary operator / called unless.
Reference: [7] <author> J.A. Bergstra and J.W. Klop. </author> <title> Process algebra for synchronous communication. </title> <journal> Information and Control, </journal> 60(1/3):109-137, 1984. 
Reference-contexts: We consider a couple of alternatives modeled as durational actions, and flnd also here difiering deadlock behaviour. 2 ACP with Priorities and No Exit Iteration We start out from the well-known theory ACP <ref> [7, 5] </ref>. We apologize to the reader who has seen this many times before; he can skip the material until Deflnition 1. The signature of ACP contains the following ingredients: A given number of core atomic actions r; s; c; t; u; : : : .
Reference: [8] <editor> N. Busi, R.J. van Glabbeek, and R. Gorrieri. Axiomatising ST-bisimulation semantics. In E.-R. Olderog, editor, </editor> <booktitle> Proceedings of the IFIP TC2 Working Conference on Programming Concepts, Methods and Calculi (PROCOMET'94), number 56 in IFIP Transactions A, </booktitle> <pages> pages 169-188. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction From the literature, see e.g. [12], <ref> [8] </ref>, [11], we flnd that ST bisimulation semantics is a preferred non-interleaving semantics, due to several nice properties of this semantics. The axiomatisation of ST bisimulation semantics in [8] makes this semantics amenable for investigation in an axiomatically presented process algebra as ACP. <p> 1 Introduction From the literature, see e.g. [12], <ref> [8] </ref>, [11], we flnd that ST bisimulation semantics is a preferred non-interleaving semantics, due to several nice properties of this semantics. The axiomatisation of ST bisimulation semantics in [8] makes this semantics amenable for investigation in an axiomatically presented process algebra as ACP. This axiomatisation starts out by considering split semantics, another non-interleaving semantics. 1 In this article, we investigate split and ST bisimulation semantics in the setting of the process algebra ACP. <p> We obtain an algebra in which atomic actions (for which the interleaving paradigm holds) and durational actions (that allow concurrent behaviour) coexist. We propose notation and give an axiomatisation based on <ref> [8] </ref>. We stick to the viewpoint that the basic building blocks of the ACP process algebra are atomic actions. Atomic actions are truly atomic, i.e. (the observation of) the execution of an action is instantaneous. <p> For t + , we also write t 0 or simply t, and for t we can write t 1 . Adding either of these equations to ACP with durational actions gives us split semantics, as is well-known from [12], <ref> [8] </ref>, [11]. Let us deflne exactly what we mean by the term split bisimulation semantics. First, we give the standard deflnition for the non-interleaving semantics of old ACP-terms, originally due to [13], next we give a deflnition on terms that may involve durational actions. Deflnition 2 1. <p> If, on the other hand, we always want to be able to match an ending with the correct beginning, we have to employ additional machinery in order to do so. An axiomatisation doing this can be found in <ref> [8] </ref>. Here, we present an alternative to [8] that is easier to understand but basically follows the same intuition. 7 We add to the signature a unary operator hps, the history pointer shift, with auxiliary operators hps n for each n 0. <p> If, on the other hand, we always want to be able to match an ending with the correct beginning, we have to employ additional machinery in order to do so. An axiomatisation doing this can be found in <ref> [8] </ref>. Here, we present an alternative to [8] that is easier to understand but basically follows the same intuition. 7 We add to the signature a unary operator hps, the history pointer shift, with auxiliary operators hps n for each n 0.
Reference: [9] <author> W.J. Fokkink. </author> <title> Axiomatizations for the perpetual loop in process algebra. </title> <editor> In P. Degano, R. Gorrieri, and A. Marchetti-Spaccamela, editors, </editor> <booktitle> Proceedings ICALP'97, number 1256 in Lecture Notes in Computer Science, </booktitle> <pages> pages 571-581. </pages> <publisher> Springer Verlag, </publisher> <year> 1997. </year>
Reference-contexts: To give an example, terms and ab + a- have a deadlock, and term a (b + -) does not have a deadlock. We will require two extra ingredients in the sequel: priorities, introduced in the ACP setting in [3], and no exit iteration, introduced in <ref> [9] </ref> as a special case of the binary iteration operator of [6]. The priority operator is parametrized by a partial ordering on atomic actions, and in a choice context, summands that start with an atomic action of high priority will block summands starting with an atomic action of lower priority. <p> In [4], we can also flnd the proof that the axioms for ACP plus priorities form a sound and complete axiomatisation for the model of closed terms modulo bisimulation equivalence. In the case of no exit iteration, <ref> [9] </ref> proves the axioms given are sound for the model of closed terms modulo bisimulation equivalence. He also shows completeness for the restricted theory of BPA, that has no parallel composition or encapsulation.
Reference: [10] <author> R.J. van Glabbeek and F.W. Vaandrager. </author> <title> Petri net models for algebraic theories of concurrency. </title> <editor> In J.W. de Bakker, A.J. Nijman, and P.C. Treleaven, editors, </editor> <booktitle> Proceedings PARLE, Volume II, number 259 in Lecture Notes in Computer Science, </booktitle> <pages> pages 224-242. </pages> <publisher> Springer Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Now we have the following deflnition of ST bisimulation semantics, originally deflned in <ref> [10] </ref>. This follows the deflnition of split bisimulation semantics above. 8 Deflnition 3 1. Let x; y be two closed ACP-terms (not containing durational actions or history pointer).
Reference: [11] <author> R.J. van Glabbeek and F.W. Vaandrager. </author> <title> The difierence between splitting in n and n+1. </title> <type> Technical Report CS-R9553, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction From the literature, see e.g. [12], [8], <ref> [11] </ref>, we flnd that ST bisimulation semantics is a preferred non-interleaving semantics, due to several nice properties of this semantics. The axiomatisation of ST bisimulation semantics in [8] makes this semantics amenable for investigation in an axiomatically presented process algebra as ACP. <p> For t + , we also write t 0 or simply t, and for t we can write t 1 . Adding either of these equations to ACP with durational actions gives us split semantics, as is well-known from [12], [8], <ref> [11] </ref>. Let us deflne exactly what we mean by the term split bisimulation semantics. First, we give the standard deflnition for the non-interleaving semantics of old ACP-terms, originally due to [13], next we give a deflnition on terms that may involve durational actions. Deflnition 2 1.
Reference: [12] <author> R. Gorrieri and C. Laneve. </author> <title> Split and ST bisimulation semantics. </title> <journal> Information and Computation, </journal> <volume> 118 </volume> <pages> 272-288, </pages> <year> 1995. </year> <month> 15 </month>
Reference-contexts: 1 Introduction From the literature, see e.g. <ref> [12] </ref>, [8], [11], we flnd that ST bisimulation semantics is a preferred non-interleaving semantics, due to several nice properties of this semantics. The axiomatisation of ST bisimulation semantics in [8] makes this semantics amenable for investigation in an axiomatically presented process algebra as ACP. <p> For t + , we also write t 0 or simply t, and for t we can write t 1 . Adding either of these equations to ACP with durational actions gives us split semantics, as is well-known from <ref> [12] </ref>, [8], [11]. Let us deflne exactly what we mean by the term split bisimulation semantics. First, we give the standard deflnition for the non-interleaving semantics of old ACP-terms, originally due to [13], next we give a deflnition on terms that may involve durational actions. Deflnition 2 1.
Reference: [13] <author> M. Hennessy. </author> <title> Axiomatising flnite concurrent processes. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17 </volume> <pages> 997-1017, </pages> <year> 1988. </year>
Reference-contexts: Let us deflne exactly what we mean by the term split bisimulation semantics. First, we give the standard deflnition for the non-interleaving semantics of old ACP-terms, originally due to <ref> [13] </ref>, next we give a deflnition on terms that may involve durational actions. Deflnition 2 1. If x is a closed ACP-term over the set of core atomic actions CA, then bx is this term with each core atom t replaced by b t.
References-found: 13

