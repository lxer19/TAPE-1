URL: ftp://ftp.cs.brown.edu/pub/techreports/93/cs93-43.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-93-43.html
Root-URL: http://www.cs.brown.edu
Abstract-found: 0
Intro-found: 1
Reference: [AgE90] <author> D. Agarwal and A. El Abbadi, </author> <title> "The Tree Quorum Protocol: An Efficient Approach for Managing Replicated Data," </title> <booktitle> VLDB (1990). </booktitle>
Reference-contexts: Also, if data is replicated near the node where it is accessed, communication cost is greatly reduced. However, replicas incur space overhead and require special effort to maintain data consistency. Research in the recent past on replication has focussed mainly on the availability issue ([AhA89], [JaM90], [PaL88], [KRS93], <ref> [AgE90] </ref>) though the performance angle of replication has received attention earlier ([DoF82]). Improvements in technology have been mainly responsible for such changes in focus. When systems evolved from centralized to distributed systems, the network bandwidth was relatively very low. <p> function is different too- our model optimizes the number of messages involved in every read or write access whereas the [WoJ92a] model considers the number of edges involved. 3 Previous Work As mentioned before, there is a huge volume of research in replication for increasing availability ([AhA89], [JaM90], [PaL88], [KRS93], <ref> [AgE90] </ref> to name a few). There have been three main approaches to increasing performance using replication- static schemes, dynamic schemes and schemes which relax the consistency criterion by allowing controlled divergence within replicas.
Reference: [AhA89] <author> M. Ahmad and M. H. Ammar, </author> <title> "Performance Characterization of Quorum-Consensus Algorithms for Replicated Data ," IEEE Trans. </title> <journal> of Software Engg. </journal> <volume> 15(4) </volume> <month> 492-495 (April </month> <year> 1989). </year>
Reference: [ABM90] <author> R. Alonso, D. Barbara, and H. Garcia Molina, </author> <title> "Data Caching Issues in an information retrieval system," </title> <journal> ACM TODS 15:3 (1990). </journal>
Reference: [AlK93] <author> Rafael Alonso and Hank Korth, </author> <title> "Database System Issues in Nomadic Computing," </title> <booktitle> SIGMOD (1993). </booktitle>
Reference-contexts: Consequently, research in replication started to address issues of fault tolerance in replicated systems. But with the advent of mobile networks, the underlying assumption of high speed links will no longer be true <ref> [AlK93] </ref>. In such an environment, users will have the ability to move from one place to the other and yet be connected to their computer systems through a wireless link.
Reference: [BaI92] <author> B. R. Badrinath and T. Imielinski, </author> <title> "Replication and mobility," </title> <booktitle> 2nd IEEE Workshop on Management of Replicated Data (Nov. </booktitle> <year> 1992). </year>
Reference-contexts: Dynamic schemes on the other hand continually re-order the placement of data and thus automatically react to changes in access patterns in the network. The need for dynamic replication schemes in mobile networks has been pointed out in <ref> [BaI92] </ref> and [ImB93]. Earlier work in dynamic schemes have been theoretical in nature - [BFR92] presented competitive algorithms for the problem. But these were not strictly distributed in the sense that one processor had to be aware of all requests.
Reference: [BaM90] <author> D. Barbara and H. Garcia Molina, </author> <title> "The case for controlled inconsistency in replicated data," </title> <booktitle> IEEE Workshop on Management of Replicated Data (1990). </booktitle>
Reference-contexts: In our case, every node can make such decisions to grow or shrink the replication scheme. The third approach is to assume static replication but to relax the serializability criterion. Papers on quasi-copies ([ABM90], <ref> [BaM90] </ref>), lazy replication ([LLS88]), epsilon serializability ([PuL91]) and bounded ignorance ([KrB91]) fall in the category. The serializability relaxation can be done along two dimensions of time and space ([ShR90]).
Reference: [BFR92] <author> Y. Bartal, A. Fiat, and Y. Rabani, </author> <title> "Competitive Algorithms for Distributed Data Management," </title> <note> ACM STOC (May, </note> <year> 1992). </year>
Reference-contexts: The need for dynamic replication schemes in mobile networks has been pointed out in [BaI92] and [ImB93]. Earlier work in dynamic schemes have been theoretical in nature - <ref> [BFR92] </ref> presented competitive algorithms for the problem. But these were not strictly distributed in the sense that one processor had to be aware of all requests. Besides, unlike ours, their algorithm was not integrated. [WoJ92a] give an optimal algorithm for the tree network.
Reference: [CFL91] <author> M. C. Carey, M. J. Franklin, M. Linvy, and E. J. Shekita, </author> <title> "Data Caching Tradeoffs in Client-Server DBMS Architectures," </title> <booktitle> ACM SIGMOD (1991). </booktitle>
Reference-contexts: brought into a node it is held until such time that it becomes the least recently used object and is given up to bring in a new object (this is under the assumption that updates are propagated to all cached copies as in the ROWA protocol as opposed to invalidate <ref> [CFL91] </ref>). Even though only a small portion of the space is really necessary, an LRU technique would hang on to memory size number of objects incurring unnecessary messages. However, as in Fig 12, after the eight cycle, the memory at each node gradually gets completely full.
Reference: [DoF82] <author> D. Dowdy and D. Foster, </author> <title> "Comparitive Models of the File Assignment Problem," </title> <note> Computing Surveys 14(2) (June 1982). </note>
Reference: [Hay92] <author> D. Hayden, </author> <title> "The new age of wireless," Mobile Office (May 1992). </title>
Reference-contexts: For example, NCR's WaveLAN achieves 2Mbit/sec, a typical bandwidth over the air. Besides, data transmission over the air is monetarily expensive too <ref> [Hay92] </ref>. Consequently, for such a system to achieve a level of performance comparable to current static systems, it is very crucial how data in the network is distributed.
Reference: [HoU79] <author> J.E. Hopcroft and J.D. Ullman, </author> <title> Introduction to Automata Theory, </title> <booktitle> Languages, and Computation, </booktitle> <address> Addision-Wesley, </address> <year> 1979. </year> <month> 22 </month>
Reference-contexts: We use a simple deterministic finite state automaton <ref> [HoU79] </ref> to learn access sequences. The DFSA makes state transitions on two tokens- r and w- read and write to an object. The DFSA stores information which is used to make predictions.
Reference: [HuW93] <author> Yixiu Huang and Ouri Wolfson, </author> <title> "A Compet--itive Dynamic Data Replication Algorithm," </title> <month> ICDE </month> <year> (1993). </year>
Reference-contexts: They use a simple learning scheme, which in fact, it is a special case of our DFSA based scheme and can be reduced from it by choosing parameters appropriately. The tree topology restriction was lifted in [WoJ92b] and <ref> [HuW93] </ref> but the models still assumed infinite memory. Besides, in an arbitrary graph message routing is a very important issue which was not addressed. [HuW93] was based on the primary copy scheme which requires nodes without a copy of an object to read from the primary-copy node rather than the nearest <p> The tree topology restriction was lifted in [WoJ92b] and <ref> [HuW93] </ref> but the models still assumed infinite memory. Besides, in an arbitrary graph message routing is a very important issue which was not addressed. [HuW93] was based on the primary copy scheme which requires nodes without a copy of an object to read from the primary-copy node rather than the nearest neighbor. Firstly, this requires more messages than necessary.
Reference: [ImB93] <author> T. Imielinski and B. R. Badrinath, </author> <title> "Mobile Wireless Computing: Solutions and Challenges in Data Management," </title> <note> Draft (1993). </note>
Reference-contexts: Dynamic schemes on the other hand continually re-order the placement of data and thus automatically react to changes in access patterns in the network. The need for dynamic replication schemes in mobile networks has been pointed out in [BaI92] and <ref> [ImB93] </ref>. Earlier work in dynamic schemes have been theoretical in nature - [BFR92] presented competitive algorithms for the problem. But these were not strictly distributed in the sense that one processor had to be aware of all requests.
Reference: [JaM90] <author> S. Jajodia and D. Mutcher, </author> <title> "Dynamic Voting Algorithms for Maintaing the Consistency of a Replicated Database," </title> <note> ACM TODS 15(2) (June 1990). </note>
Reference-contexts: Also, if data is replicated near the node where it is accessed, communication cost is greatly reduced. However, replicas incur space overhead and require special effort to maintain data consistency. Research in the recent past on replication has focussed mainly on the availability issue ([AhA89], <ref> [JaM90] </ref>, [PaL88], [KRS93], [AgE90]) though the performance angle of replication has received attention earlier ([DoF82]). Improvements in technology have been mainly responsible for such changes in focus. When systems evolved from centralized to distributed systems, the network bandwidth was relatively very low. <p> * The cost function is different too- our model optimizes the number of messages involved in every read or write access whereas the [WoJ92a] model considers the number of edges involved. 3 Previous Work As mentioned before, there is a huge volume of research in replication for increasing availability ([AhA89], <ref> [JaM90] </ref>, [PaL88], [KRS93], [AgE90] to name a few). There have been three main approaches to increasing performance using replication- static schemes, dynamic schemes and schemes which relax the consistency criterion by allowing controlled divergence within replicas.
Reference: [KrB91] <author> N. Krishnakumar and Arthur Bernstein, </author> <title> "Bounded Ignorance in Replicated Systems," </title> <booktitle> ACM PODS (1991). </booktitle>
Reference: [KrV91] <author> P. Krishnan and J.S. Vitter, </author> <title> "Optimal Prefetching via Data Compression," </title> <booktitle> IEEE FOCS (Oct 1991). </booktitle>
Reference-contexts: Our objective function is reducing message traffic. A distributed system has to solve both these problems efficiently to perform well. Caching and prefetching is also one area where learning models are frequently used. These models 5 are often probabilistic <ref> [KrV91] </ref> , statistical [Sal91] or nearest-neighbor techniques [PaZ91]. As explained above, these models are just interested in predicting the next (few) object (s) accessed so as to be able to prefetch it (them).
Reference: [KRS93] <author> A. Kumar, M. Rabinovich, and R. K. Sinha, </author> <title> "A Performance Study of General Grid Structures for Replicated Data," </title> <month> ICDCS </month> <year> (1993). </year>
Reference-contexts: Also, if data is replicated near the node where it is accessed, communication cost is greatly reduced. However, replicas incur space overhead and require special effort to maintain data consistency. Research in the recent past on replication has focussed mainly on the availability issue ([AhA89], [JaM90], [PaL88], <ref> [KRS93] </ref>, [AgE90]) though the performance angle of replication has received attention earlier ([DoF82]). Improvements in technology have been mainly responsible for such changes in focus. When systems evolved from centralized to distributed systems, the network bandwidth was relatively very low. <p> cost function is different too- our model optimizes the number of messages involved in every read or write access whereas the [WoJ92a] model considers the number of edges involved. 3 Previous Work As mentioned before, there is a huge volume of research in replication for increasing availability ([AhA89], [JaM90], [PaL88], <ref> [KRS93] </ref>, [AgE90] to name a few). There have been three main approaches to increasing performance using replication- static schemes, dynamic schemes and schemes which relax the consistency criterion by allowing controlled divergence within replicas.
Reference: [LLS88] <author> R. Ladin, B. Liskov, and L. Shrira, </author> <title> "A technique for constructing highly available distributed services," </title> <note> Algorithmica 3 (1988). </note>
Reference: [PaZ91] <author> M. Palmer and S. Zdonik, </author> <title> "Fido: A Cache That Learns to Fetch," </title> <booktitle> VLDB (1991). </booktitle>
Reference-contexts: Our objective function is reducing message traffic. A distributed system has to solve both these problems efficiently to perform well. Caching and prefetching is also one area where learning models are frequently used. These models 5 are often probabilistic [KrV91] , statistical [Sal91] or nearest-neighbor techniques <ref> [PaZ91] </ref>. As explained above, these models are just interested in predicting the next (few) object (s) accessed so as to be able to prefetch it (them).
Reference: [PaL88] <author> J. F. Paris and D.E. </author> <title> Long, "Efficient Dynamic Voting Algorithms," </title> <booktitle> IEEE Intl. Conf. of Data Engineering (1988). </booktitle>
Reference-contexts: Also, if data is replicated near the node where it is accessed, communication cost is greatly reduced. However, replicas incur space overhead and require special effort to maintain data consistency. Research in the recent past on replication has focussed mainly on the availability issue ([AhA89], [JaM90], <ref> [PaL88] </ref>, [KRS93], [AgE90]) though the performance angle of replication has received attention earlier ([DoF82]). Improvements in technology have been mainly responsible for such changes in focus. When systems evolved from centralized to distributed systems, the network bandwidth was relatively very low. <p> The cost function is different too- our model optimizes the number of messages involved in every read or write access whereas the [WoJ92a] model considers the number of edges involved. 3 Previous Work As mentioned before, there is a huge volume of research in replication for increasing availability ([AhA89], [JaM90], <ref> [PaL88] </ref>, [KRS93], [AgE90] to name a few). There have been three main approaches to increasing performance using replication- static schemes, dynamic schemes and schemes which relax the consistency criterion by allowing controlled divergence within replicas.
Reference: [PuL91] <author> Calton Pu and Avraham Leff, </author> <title> "Replica control in Distributed System: An asynchronous approach," </title> <booktitle> ACM SIGMOD (1991). </booktitle>
Reference: [Sal91] <author> K. Salem, </author> <title> "Adaptive Prefetching for Disk Buffers," </title> <type> CESDIS, </type> <institution> Goddard Space Flight Center, TR-91-64, </institution> <month> Jan, </month> <year> 1991. </year>
Reference-contexts: Our objective function is reducing message traffic. A distributed system has to solve both these problems efficiently to perform well. Caching and prefetching is also one area where learning models are frequently used. These models 5 are often probabilistic [KrV91] , statistical <ref> [Sal91] </ref> or nearest-neighbor techniques [PaZ91]. As explained above, these models are just interested in predicting the next (few) object (s) accessed so as to be able to prefetch it (them).
Reference: [ShR90] <author> A. Sheth and M. Rusinkiewicz, </author> <title> "Management of interdependent data:Specifying dependency and consistency requirements," </title> <booktitle> IEEE Workshop on Management of Replicated Data (1990). </booktitle>
Reference: [WoJ92a] <author> O. Wolfson and S. Jajodia, </author> <title> "Distributed Algorithms for dynamic replication of data," </title> <booktitle> ACM PODS (1992). </booktitle>
Reference-contexts: A good replication scheme should thus be able to correctly trade-off between the two conflicting criteria based on the read-write pattern of the object. The algorithm we propose is adaptive, integrated <ref> [WoJ92a] </ref>, online and distributed in nature. It 1 A generic term could be an object, file, relation etc. 2 continually reorders the replication scheme, adapting to changes in access patterns of each object. <p> For simplicity, in this paper we assume = w = r . We do not presume any particular concurrency control algorithm; our scheme works for any algorithm preserving one copy-serializability. Our algorithm aims at optimizing the communication cost in terms of messages involved. Though our model is similar to <ref> [WoJ92a] </ref>, there are some major differences as follows : * Every node has a restriction on its memory size. The [WoJ92a] model assumes infinite memory. * The [WoJ92a] scheme restricted all nodes with copies of an object be contiguous. <p> Our algorithm aims at optimizing the communication cost in terms of messages involved. Though our model is similar to <ref> [WoJ92a] </ref>, there are some major differences as follows : * Every node has a restriction on its memory size. The [WoJ92a] model assumes infinite memory. * The [WoJ92a] scheme restricted all nodes with copies of an object be contiguous. <p> Our algorithm aims at optimizing the communication cost in terms of messages involved. Though our model is similar to <ref> [WoJ92a] </ref>, there are some major differences as follows : * Every node has a restriction on its memory size. The [WoJ92a] model assumes infinite memory. * The [WoJ92a] scheme restricted all nodes with copies of an object be contiguous. <p> thus nodes with copies could be disjointed with holes (i.e., nodes which are in the RS but not in the RRS, e.g., subtree C-D in Fig 1). * The cost function is different too- our model optimizes the number of messages involved in every read or write access whereas the <ref> [WoJ92a] </ref> model considers the number of edges involved. 3 Previous Work As mentioned before, there is a huge volume of research in replication for increasing availability ([AhA89], [JaM90], [PaL88], [KRS93], [AgE90] to name a few). <p> Earlier work in dynamic schemes have been theoretical in nature - [BFR92] presented competitive algorithms for the problem. But these were not strictly distributed in the sense that one processor had to be aware of all requests. Besides, unlike ours, their algorithm was not integrated. <ref> [WoJ92a] </ref> give an optimal algorithm for the tree network. However, they make the impractical assumption of no restriction on memory in each node of the network. Consequently, the problem of replacement of objects, akin to that in paging, albeit with a different cost function, does not arise in their model. <p> When space for a new object was needed at these nodes, the Coma object was deleted giving rise to the hole in the RS. Consequently, when B deleted its copy, the RS suddenly shrank to just three nodes. If there were infinite memory in each node as in the <ref> [WoJ92a] </ref> model, there would have been no need to replace the Coma objects at all and thus the replication scheme would have been a contiguous subtree. 7 The Learning Model In this section we explain our learning model, the data structures involved and how we use them to pre dict the <p> This is no more than what would be required for schemes where the replication scheme is contiguous without holes <ref> [WoJ92a] </ref> and thus, detecting the last copy is considerably easier. Being integrated, the algorithm has no superfluous messages except those satisfying read-write requests. 10 Simulation results Preliminary simulation studies were performed to analyze the performance of our algorithm. Unfortunately, we had two major drawbacks in our simulation.
Reference: [WoJ92b] <author> Ouri Wolfson and Sushil Jajodia, </author> <title> "An Algorithm for dynamic data distribution," </title> <booktitle> 2nd IEEE Workshop on Management of replicated data (Nov 1992). 23 the sequence. </booktitle> <volume> 24 25 </volume>
Reference-contexts: They use a simple learning scheme, which in fact, it is a special case of our DFSA based scheme and can be reduced from it by choosing parameters appropriately. The tree topology restriction was lifted in <ref> [WoJ92b] </ref> and [HuW93] but the models still assumed infinite memory.
References-found: 25

