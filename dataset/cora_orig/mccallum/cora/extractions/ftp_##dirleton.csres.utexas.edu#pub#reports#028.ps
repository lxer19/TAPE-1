URL: ftp://dirleton.csres.utexas.edu/pub/reports/028.ps
Refering-URL: http://www.cli.com/reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: (512) 322-9951  
Title: Kit: A Study in Operating System Verification  
Author: William R. Bevier 
Note: This research was supported in part by the U.S. Government. The views and conclusions contained in this document are those of the author and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government. This work was sponsored in part at Computational Logic, Inc. by the Defense Advanced Research Projects Agency, ARPA Orders 6082 and 9151, and at the University of Texas at Austin by the Defense Advanced Research Projects Agency, ARPA Order 5246, issued by the Space and Naval Warfare Systems Command under Contract N00039-85-K-0085.  
Address: 1717 W. 6th St. Suite 290 Austin, Texas 78703  
Affiliation: Computational Logic Inc.  
Date: 28 August, 1988  
Pubnum: Technical Report  
Abstract-found: 0
Intro-found: 1
Reference: [Bell 71] <author> C.G. Bell, A. Newell. </author> <title> Computer Structures: Readings and Examples. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1971. </year>
Reference-contexts: TM is capable of asynchronous character I/O. It communicates with 16 input devices and 16 output devices by an array of input ports and an array of output ports. Figure 5 gives a summary of the TM architecture in PMS notation <ref> [Bell 71] </ref>.
Reference: [Bell 75] <author> D.E. Bell, L.J. LaPadula. </author> <title> Secure Computer Systems: Unified Exposition and Multics Interpretation. </title> <type> Technical Report MTR-2997, </type> <institution> The Mitre Corporation, </institution> <month> July, </month> <year> 1975. </year>
Reference-contexts: In the early seventies the notion became current that a security policy should be implemented in the nucleus of an operating system, a security kernel. A number of efforts attempted to design, implement and verify a security kernel. A security policy given by Bell and LaPadula <ref> [Bell 75] </ref> was the first attempt to formalize a specification for a security kernel. Alternative formulations of security were given by Feiertag, Levitt and Robinson [Feiertag 77], and by Popek and Farber [Popek 78].
Reference: [Berson 79] <author> T.A. Berson, G.L. Barksdale, Jr. </author> <title> KSOS - Development Methodology for a Secure Operating System. </title> <booktitle> In AFIPS Conference Proceedings, </booktitle> <pages> pages 365-371. </pages> <year> 1979. </year>
Reference-contexts: Some projects were intended to complete only an initial portion of this sequence of goals. The goals were met with varying degrees of success. Many security kernel projects are reported in the literature: PSOS [Feiertag 79, Neumann 77], KSOS <ref> [McCauley 79, Berson 79] </ref>, UCLA Secure Unix project [Popek 79, Walker 80], KVM/370 [Gold 79], and SCOMP [Fraim 83]. The Secure Ada Target (SAT, now called LOCK) [Boebert 85] is an ongoing project at Honeywell. Landwehr [Landwehr 83] gives a useful summary of the state of the art circa 1983.
Reference: [Bevier 87] <author> W.R. </author> <month> Bevier. </month>
Reference-contexts: This is critical for considering process isolation which, after all, is concerned with what processes may not do. This paper is a summary of a longer report <ref> [Bevier 87] </ref>, which is itself a summary of the script of definitions and theorems which make up the specification, implementation and proof of Kit. <p> Section 2 explains how we state these definitions, and explains the form of the correctness theorem which relates two finite state machines. The remainder of the paper summarizes each of the points mentioned above. See <ref> [Bevier 87] </ref> for a more detailed discussion. The formalization of Kit is done in the Boyer-Moore logic, and all proofs are mechanically checked by the Boyer-Moore theorem prover [Boyer 88]. A brief summary of the logic can be found in Appendix A. The logic is very similar to pure Lisp.
References-found: 4

