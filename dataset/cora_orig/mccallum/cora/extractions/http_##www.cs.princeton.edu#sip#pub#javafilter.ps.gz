URL: http://www.cs.princeton.edu/sip/pub/javafilter.ps.gz
Refering-URL: http://www.cs.princeton.edu/sip/pub/javafilter.html
Root-URL: http://www.cs.princeton.edu
Email: balfanz@cs.princeton.edu  felten@cs.princeton.edu  
Title: A Java Filter  
Author: Dirk Balfanz Edward W. Felten 
Affiliation: Princeton University  Princeton University  
Abstract: Rogue Java applets are currently a major concern for big companies and private users alike. While the best protection against them is to turn off Java support in the WWW browser, this solution is unsatisfying: it deprives users of many of the advantages of the Java platform. Other mechanisms such as firewalls and code signing have been proposed to enhance security. In this paper we argue that these mechanisms cannot deliver the security they promise. As an alternative, we describe a simple yet effective way to prevent untrusted applets from entering the user's computer. At the same time, we allow trusted applets to execute in whatever sandbox the browser provides for them. Our technique works by modifying Java class loaders and can be extended to provide fine-grained access control for Java applets. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Microsoft Corporation. </author> <title> Proposal for authenticating code via the internet. </title> <address> http://www.microsoft. com/security/tech/authcode/ authcode-f.htm, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: The system must protect the user against programs that have hostile intentions. For example, the mobile programs must be prevented from reading personal information or altering the system's state. This is why mobile code technologies such as ActiveX <ref> [1] </ref> provide a line of defense: before downloading the mobile code, the user is asked whether or not she really wants to install the software in question. The code can be digitally signed to give the user some evidence as to who wrote (or endorsed) it.
Reference: [2] <author> Drew Dean. </author> <title> The security of static typing with dynamic linking. </title> <booktitle> In Fourth ACM Conference on Computer and 6 Communications Security, </booktitle> <address> Zurich, Switzerland, </address> <month> April </month> <year> 1997. </year>
Reference-contexts: Strengthening the sandbox means improving the design and implementation of the Java system, including formal work to increase assurance by proving the foundations of the system to be sound. While much valuable work (e.g. <ref> [4, 2] </ref>) follows this approach, it does not solve the problem for everybody. There are two reasons for this. First, while most users are comfortable with the current level of assurance, some are not.
Reference: [3] <author> Drew Dean, Edward Felten, and Dan Wallach. </author> <title> Java security: From HotJava to Netscape and beyond. </title> <booktitle> In Proceedings of 1996 IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, California, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Again, due to implementation errors, oversights, or design flaws, ways have been found to break Java security. The seriousness of possible attacks ranged from unauthorized network access to the ability to call any system call, thus completely exposing the system <ref> [3, 6] </ref>. All in all, there have been at least six flaws in various Java versions that would have allowed an attacker to completely defeat the security of the Java Virtual Machine.
Reference: [4] <author> S. Drossopoulou and S. Eisenbach. </author> <title> Java is type safe probably. </title> <booktitle> In Proceedings of the Eleventh European Conference on Object-Oriented Programming, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Strengthening the sandbox means improving the design and implementation of the Java system, including formal work to increase assurance by proving the foundations of the system to be sound. While much valuable work (e.g. <ref> [4, 2] </ref>) follows this approach, it does not solve the problem for everybody. There are two reasons for this. First, while most users are comfortable with the current level of assurance, some are not.
Reference: [5] <author> Li Gong and Roland Schemers. </author> <title> Implementing protection domains in the Java Development Kit 1.2. </title> <booktitle> In The Internet Society Symposium on Network and Distributed System Security, </booktitle> <address> San Diego, California, </address> <month> March </month> <year> 1998. </year> <institution> Internet Society. </institution>
Reference-contexts: This had the effect that Java applets would be executed in a sandbox which they could not leave. Recently, the security manager has been augmented with fine-grained access control mechanisms that allow it to make decisions based on who signed the applet and/or where it was loaded from <ref> [5, 9] </ref>. However, it is still the case that every security-relevant system call is routed through the security manager, and that the security manager may deny invocation of the respective system call.
Reference: [6] <author> Gary McGraw and Edward Felten. </author> <title> Java Security: Hostile Applets, Holes, and Antidotes. </title> <publisher> John Wiley and Sons, </publisher> <year> 1996. </year>
Reference-contexts: Again, due to implementation errors, oversights, or design flaws, ways have been found to break Java security. The seriousness of possible attacks ranged from unauthorized network access to the ability to call any system call, thus completely exposing the system <ref> [3, 6] </ref>. All in all, there have been at least six flaws in various Java versions that would have allowed an attacker to completely defeat the security of the Java Virtual Machine.
Reference: [7] <institution> Microsoft Corporation, Redmond, Washington. Mi-crosoft Security Management Architecture White Paper, </institution> <month> May </month> <year> 1997. </year> <note> http://www.microsoft.com/ ie/security/ie4security.htm. </note>
Reference-contexts: However, we also saw that these measures are either inconvenient or not effective. Mi-crosoft has recently included the notion of security zones in their Internet Explorer <ref> [7] </ref>. Depending on what security zone an applet comes from, it can run with more or less privileges. Unlike the systems that Netscape and Sun developed, the settings for a security zone can actually specify that Java code should not be downloaded at all.
Reference: [8] <institution> Finjan Software. </institution> <address> SurfinGate. http://www.finjan.com/ products/html/surfingate.html. </address>
Reference-contexts: It would be desirable to configure browsers so that they accept applets from the company's intranet, but refuse to load applets from the Internet. One way to achieve this goal is to filter applets out at the firewall (see Figure 1). Several firewall vendors ship Java filtering technology (e.g <ref> [8] </ref>) as part of their firewalls. Unfortunately, these products cannot guarantee full protection from unwanted applets as it is very hard to detect every applet that tries to sneak its way through the firewall.
Reference: [9] <author> D. S. Wallach, D. Balfanz, D. Dean, and E. W. Felten. </author> <title> Extensible security architectures for Java. </title> <booktitle> In Proceedings of the 16th ACM Symposium on Operating Systems Principles, </booktitle> <address> Saint-Malo, France, </address> <month> October </month> <year> 1997. </year> <month> 7 </month>
Reference-contexts: This had the effect that Java applets would be executed in a sandbox which they could not leave. Recently, the security manager has been augmented with fine-grained access control mechanisms that allow it to make decisions based on who signed the applet and/or where it was loaded from <ref> [5, 9] </ref>. However, it is still the case that every security-relevant system call is routed through the security manager, and that the security manager may deny invocation of the respective system call. <p> Instead of blocking the applet, we could (again, by using class loaders) block certain system classes from being linked against the applet, thus denying access to certain parts of the system. See <ref> [9] </ref> for details on this. 7 Conclusion We presented a simple, yet effective protection against untrusted Java applets that doesn't have many of the shortcomings of other possible approaches. We implemented the design and have made available a copy for public download.
References-found: 9

