URL: ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-93-19.ps.Z
Refering-URL: ftp://ftp.ics.hawaii.edu/pub/tr/INDEX.html
Root-URL: 
Title: Experiences with CSRS: An Instrumented Software Review Environment  
Author: Philip M. Johnson Danu Tjahjono Dadong Wan Robert S. Brewer 
Address: 2565 The Mall Honolulu, HI 96822 U.S.A.  
Affiliation: Department of Information and Computer Sciences University of Hawaii  
Abstract: 1 Presented at the Pacific Northwest Software Quality Conference, Portland, Oregon. October 1993. Introductory material in this paper appeared previously in "Improving Software Quality through Computer Supported Collaborative Review", in the Proceedings of the Third European Conference on Computer Supported Cooperative Work, Milan, Italy, 1993. Abstract Formal technical review (FTR) is a cornerstone of software quality assurance. However, the labor-intensive and manual nature of review, along with basic unresolved questions about its process and products, means that review is typically under-utilized or inefficiently applied within the software development process. This paper discusses our initial experiments using CSRS, an instrumented, computersupported cooperative work environment for software review that reduces the manual, labor-intensive nature of review activities and supports quantitative study of the process and products of review. Our results indicate that CSRS increases both the breadth and depth of information captured per person-hour of review time, and that its design captures interesting measures of review process, products, and effort. Biographical Information Philip Johnson is an Assistant Professor of Computer and Information Sciences at the University of Hawaii. Dr. Johnson is Director of the Collaborative Software Development Laboratory (CSDL), which performs research on tools and techniques for group-based software engineering, software quality assurance, and other collaborative activities. Danu Tjahjono and Dadong Wan are members of CSDL and doctoral candidates in the Communication and Information Sciences program at the University of Hawaii. Robert Brewer is a member of CSDL and a graduate student in the Computer and Information Sciences Department at the University of Hawaii. Address email correspondence to Johnson@Hawaii.Edu. 
Abstract-found: 1
Intro-found: 1
Reference: <author> L. Brothers, V. Sembugamoorthy, and M. </author> <title> Muller (1990): ICICLE: Groupware for code inspection. </title> <booktitle> In Proceedings of the Conference on ComputerSupported Cooperative Work 1990, </booktitle> <pages> pp. 169-181. </pages> <publisher> ACM Press. </publisher>
Reference-contexts: At this point, the reviewer has partially completed private review, as indicated by the fact that some of the source-nodes are reviewed, some have been read but have not been completely reviewed, and some have not yet even been seen. 2 Other researchers currently investigating this paradigm shift are <ref> (Brothers, 1990) </ref>, and (Gintell, 1993). 5 By mouse-clicking on a line or through menu operations, the reviewer can traverse the hypertext network from this screen to a node containing a source object under review, as illustrated in Figure 2. In this case, the object under review is the operation gi*nbuff*make.
Reference: <author> Lionel E. </author> <month> Deimel </month> <year> (1990): </year> <title> Scenes of Software Inspections: Video Dramatizations for the Classroom. </title> <institution> Software Engineering Institute, Carnegie Mellon University. </institution> <address> Robert Dunn (1990): </address> <booktitle> Software Quality: Concepts and Plans. </booktitle> <publisher> Prentice Hall. </publisher>
Reference: <author> Michael E. </author> <title> Fagan (1976): Design and code inspections to reduce errors in program development. </title> <journal> IBM System Journal, </journal> <volume> 15(3) </volume> <pages> 182-211. </pages>
Reference: <author> Michael E. </author> <title> Fagan (1986): Advances in software inspections. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(7), </volume> <pages> pp. 744-751. </pages>
Reference: <author> D. P. Freedman and G. M. </author> <title> Weinberg (1990): Handbook of Walkthroughs, Inspections and Technical Reviews. Little, </title> <publisher> Brown. </publisher>
Reference: <author> John Gintell, John Arnold, Michael Houde, Jacek Kruszelnicki, Roland McKenney, and Gerard Memmi (1993): Scrutiny: </author> <title> A Collaborative Inspection and Review System. </title> <booktitle> In Fourth European Software Engineering Conference, </booktitle> <address> Garwisch-Partenkirchen, Germany, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: Lack of automated support for this phase of CSRS-style review has not been a problem in practice, since such meetings are typically very short or avoided altogether.) <ref> (Johnson and Tjahjono, 1993) </ref> provides a detailed description of the data and process model used in CSRS. The next section reports on our experiences in the use of CSRS, and provides rationales and results from our design decisions. 3. <p> The process model is coupled with a data model that describes the set of node and link types that can be defined and the legal relationships between them. A detailed description of this representation appears in <ref> (Johnson and Tjahjono, 1993) </ref>. 3.2 CSRS I: Data-oriented instrumentation From the start, we viewed measurement and instrumentation as a fundamental part of the design of CSRS.
Reference: <author> Watts S. </author> <title> Humphrey (1989): Managing the Software Process. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> Philip M. </author> <title> Johnson (1992): Supporting exploratory CSCW with the EGRET framework. </title> <booktitle> In Proceedings of the Conference on ComputerSupported Cooperative Work 1992, </booktitle> <publisher> ACM Press. </publisher>
Reference: <author> Philip M. Johnson and Danu Tjahjono (1993): </author> <title> Improving Software Quality through Computer Supported Collaborative Review. </title> <booktitle> In the Third European Conference on Computer Supported Cooperative Work, </booktitle> <address> Milan, Italy, </address> <month> September, </month> <year> 1993. </year>
Reference: <author> Roger S. </author> <title> Pressman (1992): Software Engineering: A Practitioner's Approach. </title> <publisher> McGraw-Hill, Inc. </publisher>
Reference: <author> Glen W. </author> <title> Russel (1991): Experience with inspection in ultralarge-scale developments. </title> <journal> IEEE Software, </journal> <volume> (9)1. </volume>
Reference: <author> G. Gordon Schulmeyer and James I. </author> <title> McManus (1987): Handbook of Software Quality Assurance. </title> <publisher> Van Nostrand Reinhold. </publisher>
Reference: <author> U. Wiil and K. </author> <title> Osterbye (1990): Experiences with hyperbase-a multiuser back-end for hypertext applications with emphasis on collaboration support. </title> <type> Technical Report 90-38, </type> <institution> Department of Mathematics and Computer Science, University of Aalborg, Denmark. </institution> <note> Edward Yourdon (1989): Structured Walkthrough. Prentice-Hall, Fourth Edition. </note>
Reference-contexts: First, CSRS is implemented on top of EGRET, a multiuser, distributed, hypertext-based collaborative environment (Johnson, 1992) that provides computational support for the process and products of review and inspection. EGRET runs in a Unix/X window environment, providing a clientserver architecture with a custom hypertext database server back-end <ref> (Wiil, 1990) </ref> connected over an ethernet network to front-end EMACS-based clients. This platform allows an essentially "paperless" approach to review, supports important computational services, and facilitates integration with existing development environments. Our initial experiments indicate that CSRS effectively eliminates many of the manual, clerical tasks associated with traditional review.
References-found: 13

