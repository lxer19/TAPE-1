URL: http://www.research.att.com/library/trs/TRs/98/98.5/98.5.1.body.ps
Refering-URL: http://www.research.att.com/library/trs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fmab,mstraussg@research.att.com  
Title: Atomic Proxy Cryptography  
Author: Matt Blaze Martin Strauss 
Date: February 23, 1998  
Address: Florham Park, NJ 07932  
Affiliation: AT&T Labs Research  
Abstract: This paper introduces atomic proxy cryptography, in which an atomic proxy function, in conjunction with a public proxy key, converts ciphertext (messages in a public key encryption scheme or signatures in a digital signature scheme) for one key (k 1 ) into ciphertext for another (k 2 ). Proxy keys, once generated, may be made public and proxy functions applied in untrusted environments. Various kinds of proxy functions might exist; symmetric atomic proxy functions assume that the holder of k 2 unconditionally trusts the holder of k 1 , while asymmetric proxy functions do not. It is not clear whether proxy functions exist for previous public-key cryptosys-tems. Several new public-key cryptosystems with symmetric proxy functions are described: an encryption scheme, which is at least as secure as Diffie-Hellman, an identification scheme, which is at least as secure as the discrete log, and a signature scheme derived from the identification scheme via a hash function.
Abstract-found: 1
Intro-found: 1
Reference: [DeL84] <author> J. M. DeLaurentis. </author> <title> A further weakness in the common modulus protocol for the RSA cryptoalgorithm. </title> <journal> Cryptologia, </journal> <volume> 8 </volume> <pages> 235-239, </pages> <year> 1984. </year>
Reference: [ElG85] <author> Taher ElGamal. </author> <title> A public key cryptosystem and a signature scheme based on discrete logarithms. </title> <address> IT-31(4):469-472, </address> <month> July </month> <year> 1985. </year>
Reference-contexts: part because the cryptanalysis problem is random-self-reducibile|which allows one to assert mathematically that recovering m from the public information he a ; E (m; e a ); e b i is hard on average 1 David Wagner notes that our proxy scheme can be extended to work with standard ElGamal <ref> [ElG85] </ref> encryption. 3 if it is hard at worst. <p> This is not to say, of course, that proxy functions for existing systems do not exist, only that we have not discoverd them. We now describe a new secure discrete-log-based public-key cryptosystem that does have a simple proxy function. The scheme is similar in structure to ElGamal encryption <ref> [ElG85] </ref>, but with the parameters used differently and the inverse of the secret used to recover the message. (This approach has merit beyond proxy encryption; [Hug94] proposed a Diffie-Hellman-like key agreement protocol based on the inverse of the secret, which allows a message's sender to determine the key prior to identifying <p> Again, existing digital signature schemes such as RSA [RSA78], DSA [NIS91], ElGamal <ref> [ElG85] </ref>, etc. do not have obvious proxy functions (which, again, is not to say that such functions do not exist).
Reference: [Fei93] <author> Joan Feigenbaum. </author> <title> Locally random reductions in interactive complexity theory. </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <volume> 13 </volume> <pages> 73-98, </pages> <year> 1993. </year>
Reference-contexts: (g x ; g y ) = F 1 (g x ; F 1 (g; g y )) = F 1 (g x ; g 1=y ) = g xy : In fact, f is only guaranteed to recover m with probability * so we need to use the random-self-reducibility <ref> [Fei93] </ref> of the discrete log to achieve our objective.
Reference: [FFS88] <author> U. Feige, A. Fiat, and A. Shamir. </author> <title> Zero knowledge proofs of identity. </title> <journal> Journal of Cryptology, </journal> <volume> 1(2) </volume> <pages> 77-94, </pages> <year> 1988. </year>
Reference-contexts: This round is repeated as desired. As with existing protocols, there may be ways to perform several rounds in parallel for efficiency <ref> [FFS88] </ref>. 3.2 Symmetric proxy function for Y A symmetric proxy key is simply a=b. Proxy identification is useful as follows: Suppose Charlotte wants to run the protocol with g b instead of g a . <p> Proof. Without proxy keys published, this protocol is similar to others in the literature (see, e.g., <ref> [FFS88] </ref>). Note that if a prover could produce both k=a and k then the prover could produce a from g a (perhaps only with significant probability).
Reference: [FS86] <author> Amos Fiat and Adi Shamir. </author> <title> How to prove yourself: Practical solutions to identification and signature problems. </title> <editor> In A. M. Odlyzko, editor, </editor> <booktitle> Crypto 86, number 263 in LNCS, </booktitle> <pages> pages 186-194, </pages> <address> Santa Barbara, CA, USA, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: In particular, we do not know the relationship between Assumption 1 and assumptions about collision freedom or hardness to invert. 3 We note that this generic transformation of a protocol to a signature scheme has appeared in the literature <ref> [FS86] </ref>. We now analyze Assumption 1. Note that in order to produce a legitimate signature on m that verifies with g a , a signer needs to produce hg k i i and h (k i mfi i )=ai.
Reference: [Hug94] <author> Eric Hughes. </author> <title> An encrypted key transmission protocol. </title> <note> CRYPTO '94 Rump Session presentation, </note> <month> August </month> <year> 1994. </year>
Reference-contexts: The scheme is similar in structure to ElGamal encryption [ElG85], but with the parameters used differently and the inverse of the secret used to recover the message. (This approach has merit beyond proxy encryption; <ref> [Hug94] </ref> proposed a Diffie-Hellman-like key agreement protocol based on the inverse of the secret, which allows a message's sender to determine the key prior to identifying its recipient). 2 Note that Bob of this example may be a government mandating that Alice provide him with access to her key.
Reference: [MO97] <author> M. Mambo and E. Okamoto. </author> <title> Proxy cryptosystems: delegation of the power to decrypt ciphertexts. </title> <journal> IEICE Trans. Fundamentals, </journal> <volume> E80-A(1), </volume> <year> 1997. </year>
Reference-contexts: Previous work on delegating the power to decrypt has focused on developing efficient transformations that allow the original recipient to forward specific ciphertexts to another recipient. Mambo and Okamoto <ref> [MO97] </ref> develop this formulation and give efficient transforms (more efficient than decryption and re-encryption) for ElGamal and RSA. Mambo, Usuda and Okamoto [MUO96] apply a similar notion to signature schemes.
Reference: [MUO96] <author> M. Mambo, K. Usuda, and E. Okamoto. </author> <title> Proxy signatures: delegation of the power to sign messages. </title> <journal> IEICE Trans. Fundamentals, </journal> <volume> E79-A(9), </volume> <year> 1996. </year>
Reference-contexts: Mambo and Okamoto [MO97] develop this formulation and give efficient transforms (more efficient than decryption and re-encryption) for ElGamal and RSA. Mambo, Usuda and Okamoto <ref> [MUO96] </ref> apply a similar notion to signature schemes.
Reference: [NIS91] <author> NIST. </author> <title> A proposed federal information processing standard for digital signature standard (DSS). </title> <type> Draft Tech. Rep. FIPS PUB XXX, </type> <month> August </month> <year> 1991. </year>
Reference-contexts: Again, existing digital signature schemes such as RSA [RSA78], DSA <ref> [NIS91] </ref>, ElGamal [ElG85], etc. do not have obvious proxy functions (which, again, is not to say that such functions do not exist).
Reference: [RSA78] <author> Ron L. Rivest, Adi Shamir, and Leonard M. Adleman. </author> <title> A method for obtaining digital signatures and public-key cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <month> February </month> <year> 1978. </year>
Reference-contexts: RSA <ref> [RSA78] </ref> with a common modulus is an obvious candidate, but that scheme is known to be insecure [Sim83][DeL84]. Similarly, there do not appear to be obvious proxy functions for many of the previous discrete-log-based cryptosystems. <p> Again, existing digital signature schemes such as RSA <ref> [RSA78] </ref>, DSA [NIS91], ElGamal [ElG85], etc. do not have obvious proxy functions (which, again, is not to say that such functions do not exist).
Reference: [Sim83] <author> G. J. Simmons. </author> <title> A "weak" privacy protocol using the RSA crypto algorithm. </title> <journal> Cryptologia, </journal> <volume> 7 </volume> <pages> 180-182, </pages> <year> 1983. </year>
References-found: 11

