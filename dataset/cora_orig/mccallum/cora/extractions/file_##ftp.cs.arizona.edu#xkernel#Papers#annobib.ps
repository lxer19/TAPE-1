URL: file://ftp.cs.arizona.edu/xkernel/Papers/annobib.ps
Refering-URL: http://www.cs.arizona.edu/xkernel/bibliography.html
Root-URL: http://www.cs.arizona.edu
Title: Network Systems Research Group: An Annotated Bibliography  
Author: Larry L. Peterson 
Address: Tucson, AZ 85721  
Affiliation: Department of Computer Science The University of Arizona  
Note: November  
Date: TR 94-21  1, 1996  
Abstract: This paper gives a brief overview of the research done by the Network Systems Research Group over the last three to four years, and references the principle papers published during that time. 
Abstract-found: 1
Intro-found: 1
Reference: [Abbo93a] <author> Abbott, M. B. and Peterson, L. L. </author> <title> Increasing network throughput by integrating protocol layers. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(5) </volume> <pages> 600-610, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: specific issues and techniques in more detail: [Page94] investigates the effectiveness of the data cache in handling network I/O; [Bail91] and [Drus94] consider the interactions between the network adaptor and the operating system; [Drus93c] proposes a new mechanism, called fast buffers (fbufs), for transferring network data across protection domains; and <ref> [Abbo93a] </ref> defines and evaluates a technique for using integrated layer processing (ILP) to reduce the number of loads and stores required to process network data. 2.3 Other Related Projects Motivated by our experiences with the x-kernel, we have also pursued several tangent avenues of research. These are summarized below.
Reference: [Abbo93b] <author> Abbott, M. B. and Peterson, L. L. </author> <title> A language-based approach to protocol implementation. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(1) </volume> <pages> 4-19, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Morpheous: A special-purpose programming language designed to implement communication protocols <ref> [Abbo93b] </ref>. Starting with the x-kernel model, Morpheus refines the base abstractions to the point that one can view them as language constructs.
Reference: [Bail91] <author> Bailey, M. L., Pagels, M. A., and Peterson, L. L. </author> <title> The x-chip: An experiment in hardware demultiplexing. </title> <booktitle> In Proceedings of the IEEE Workshop on High Performance Communications Subsystems, </booktitle> <month> February </month> <year> 1991. </year>
Reference-contexts: Follow-on papers then look at specific issues and techniques in more detail: [Page94] investigates the effectiveness of the data cache in handling network I/O; <ref> [Bail91] </ref> and [Drus94] consider the interactions between the network adaptor and the operating system; [Drus93c] proposes a new mechanism, called fast buffers (fbufs), for transferring network data across protection domains; and [Abbo93a] defines and evaluates a technique for using integrated layer processing (ILP) to reduce the number of loads and stores
Reference: [Brak94] <author> Brakmo, L. S., O'Malley, S. W., and Peterson, L. L. </author> <title> TCP Vegas: New techniques for congestion detection and avoidance. </title> <booktitle> In Proceedings of the SIGCOMM '94 Symposium, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: TCP Congestion Control: Vegas is a new implementation of TCP that achieves between 40 and 70% better throughput, with one-fifth to one-half the losses, as compared to the implementation of TCP in the Reno distribution of BSD Unix <ref> [Brak94] </ref>. This paper motivates and describes the three key techniques employed by Vegas, and presents the results of a comprehensive experimental performance studyusing both simulations and measurements of the actual Internetof the Vegas and Reno implementations of TCP.
Reference: [Drus92] <author> Druschel, P., Peterson, L. L., and Hutchinson, N. C. </author> <title> Beyond micro-kernel design: Decoupling modularity and protection in Lipto. </title> <booktitle> In Proceedings of the Twelfth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 512-520, </pages> <address> Yokohama, Japan., </address> <month> June </month> <year> 1992. </year>
Reference-contexts: These are summarized below. Note that in the case of Lipto, many of the ideas guide the implementation of the x-kernel in Mach described above. In the case of Scout, the project is just getting underway. Lipto: An operating system that explicitly decouples modules and protection domains <ref> [Drus92] </ref>. Starting with the premise that modular operating system design is a good idea, this paper argues that modularity and protection should be treated as orthogonal issues.
Reference: [Drus93a] <author> Druschel, P. </author> <title> Efficient support for incremental customization of OS services. </title> <booktitle> In Proceedings of the Third International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 186-190, </pages> <address> Asheville, NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: of OS services can be achieved using a two-fold strategy: an object-oriented architecture that relies on composition to facilitate code reuse and customization, and an OS structure that places a minimal set of trusted functions into the kernel, with all remaining services co-located with application code in user-level protection domains <ref> [Drus93a] </ref>. Morpheous: A special-purpose programming language designed to implement communication protocols [Abbo93b]. Starting with the x-kernel model, Morpheus refines the base abstractions to the point that one can view them as language constructs.
Reference: [Drus93b] <author> Druschel, P., Abbott, M. B., Pagels, M., and Peterson, L. L. </author> <title> Network subsystem design. </title> <journal> IEEE Network (Special Issue on End-System Support for High Speed Networks), </journal> <volume> 7(4) </volume> <pages> 8-17, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: In other words, we were attempting to demonstrate that it is possible to achieve high application bandwidth regardless of the structure of the OS. An overview of this effort can be found in <ref> [Drus93b] </ref>; this paper makes a case for limited memory bandwidth being the main problem in turning good network bandwidth into equally good application-to-application throughput, and outlines various techniques that can be employed to overcome this problem.
Reference: [Drus93c] <author> Druschel, P. and Peterson, L. L. Fbufs: </author> <title> A high-bandwidth cross-domain transfer facility. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 189-202, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Follow-on papers then look at specific issues and techniques in more detail: [Page94] investigates the effectiveness of the data cache in handling network I/O; [Bail91] and [Drus94] consider the interactions between the network adaptor and the operating system; <ref> [Drus93c] </ref> proposes a new mechanism, called fast buffers (fbufs), for transferring network data across protection domains; and [Abbo93a] defines and evaluates a technique for using integrated layer processing (ILP) to reduce the number of loads and stores required to process network data. 2.3 Other Related Projects Motivated by our experiences with
Reference: [Drus94] <author> Druschel, P., Peterson, L. L., and Davie, B. S. </author> <title> Experience with a high-speed network adaptor: A software perspective. </title> <booktitle> In Proceedings of the SIGCOMM '94 Symposium, </booktitle> <month> August </month> <year> 1994. </year> <month> 4 </month>
Reference-contexts: Follow-on papers then look at specific issues and techniques in more detail: [Page94] investigates the effectiveness of the data cache in handling network I/O; [Bail91] and <ref> [Drus94] </ref> consider the interactions between the network adaptor and the operating system; [Drus93c] proposes a new mechanism, called fast buffers (fbufs), for transferring network data across protection domains; and [Abbo93a] defines and evaluates a technique for using integrated layer processing (ILP) to reduce the number of loads and stores required to
Reference: [Engl94] <author> Engler, D. R. and Proebsting, T. A. </author> <title> DCG: An efficient, retargetable dynamic code generation system. </title> <booktitle> In Proceedings of the Sixth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: A white paper that gives an overview of Scout can be found in [Mont94]. In addition, two software tool being designed for Scout, the Universal Stub Compiler (USC) and the Dynamic Code Generator (DCG), are described in [O'Ma94] and <ref> [Engl94] </ref>, respectively. Finally, [Mosb94] describes Scout's approach to lock-free synchronization. 3 Protocol Design The second major thrust of our research is protocol design.
Reference: [Hutc91] <author> Hutchinson, N. C. and Peterson, L. L. </author> <title> The x-Kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Our main result was to show that one could implement protocols in a modular, highly structured way, without sacrificing performance. An initial paper <ref> [Hutc91] </ref> describes the x-kernel's basic architecture, and demonstrates how this architecture is general enough to implement a wide variety of existing protocols, such as TCP/IP and RPC.
Reference: [Mish93a] <author> Mishra, S., Peterson, L. L., and Schlichting, R. D. </author> <title> Experience with modularity in consul. </title> <journal> SoftwarePractice and Experience, </journal> <volume> 23(10) </volume> <pages> 1050-1075, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Reliable Multicast: We have built a suite of protocols that collectively provide a communication substrate for constructing fault-tolerant distributed programs based on replicated processing. On overview of the system, which we call Consul, is given in [Mish93b]. A second paper reports our experiences with modularity in Conul <ref> [Mish93a] </ref>. Consul includes a membership protocol, a set of message ordering protocols, a failure detection protocol, and a recovery protocol. All these protocols depend on a low-level multicast protocol, called Psync [Pete89], which preserves the causal ordering among messages.
Reference: [Mish93b] <author> Mishra, S., Peterson, L. L., and Schlichting, R. D. </author> <title> Consul: A communication substrate for fault-tolerant distributed programs. </title> <journal> Distributed Systems Engineering Journal, </journal> <volume> 1(2) </volume> <pages> 87-103, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Reliable Multicast: We have built a suite of protocols that collectively provide a communication substrate for constructing fault-tolerant distributed programs based on replicated processing. On overview of the system, which we call Consul, is given in <ref> [Mish93b] </ref>. A second paper reports our experiences with modularity in Conul [Mish93a]. Consul includes a membership protocol, a set of message ordering protocols, a failure detection protocol, and a recovery protocol. All these protocols depend on a low-level multicast protocol, called Psync [Pete89], which preserves the causal ordering among messages.
Reference: [Mont94] <author> Montz, A. B., Mosberger, D., O'Malley, S. W., Petersonand, L. L., Proebsting, T. A., and Hartman, J. H. </author> <title> Scout: A communications-oriented operating system. </title> <type> Technical Report 94-20, </type> <institution> Department of Computer Science, University of Arizona, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: A white paper that gives an overview of Scout can be found in <ref> [Mont94] </ref>. In addition, two software tool being designed for Scout, the Universal Stub Compiler (USC) and the Dynamic Code Generator (DCG), are described in [O'Ma94] and [Engl94], respectively. Finally, [Mosb94] describes Scout's approach to lock-free synchronization. 3 Protocol Design The second major thrust of our research is protocol design.
Reference: [Mosb94] <author> Mosberger, D., Druschel, P., and Peterson, L. L. </author> <title> Fast and general software solution to mutual exclusion on uniprocessors. </title> <type> Technical Report 94-07, </type> <institution> Department of Computer Science, University of Arizona, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: A white paper that gives an overview of Scout can be found in [Mont94]. In addition, two software tool being designed for Scout, the Universal Stub Compiler (USC) and the Dynamic Code Generator (DCG), are described in [O'Ma94] and [Engl94], respectively. Finally, <ref> [Mosb94] </ref> describes Scout's approach to lock-free synchronization. 3 Protocol Design The second major thrust of our research is protocol design.
Reference: [O'Ma91] <author> O'Malley, S. W. and Peterson, L. L. </author> <title> TCP extensions considered harmful. Request for Comments 1263, </title> <institution> University of Arizona, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: It also demonstrates that this architecture results in efficient network software. A follow-up paper describes how this architecture can be used to extend TCP for high-speed networks <ref> [O'Ma91] </ref>. 2.2 x-kernel: Phase 2 During a second phase, we encapsulated the communications-core of the x-kernel, and treated it as a portable framework that could be embedded in any operating system. We also began to experiment with the x-kernel on RISC workstations connected by high-speed ATM and FDDI networks.
Reference: [O'Ma92] <author> O'Malley, S. W. and Peterson, L. L. </author> <title> A dynamic network architecture. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(2) </volume> <pages> 110-143, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: It also reports that x-kernel implementations of these protocols perform as fast as (and often faster than) the same protocols implemented in their native operating system. A second paper <ref> [O'Ma92] </ref> then demonstrates how one can take modularity even farther. It observes that typical network architectures share three important properties: their protocol graphs are simple, the nodes of these graphs (protocols) encapsulate complex functionality, and the topologies of the graphs are relatively static.
Reference: [O'Ma94] <author> O'Malley, S. W., Proebsting, T. A., and Montz, A. B. </author> <title> Universal stub compiler. </title> <booktitle> In Proceedings of the SIGCOMM '94 Symposium, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: A white paper that gives an overview of Scout can be found in [Mont94]. In addition, two software tool being designed for Scout, the Universal Stub Compiler (USC) and the Dynamic Code Generator (DCG), are described in <ref> [O'Ma94] </ref> and [Engl94], respectively. Finally, [Mosb94] describes Scout's approach to lock-free synchronization. 3 Protocol Design The second major thrust of our research is protocol design.
Reference: [Orma93] <author> Orman, H., III, E. M., O'Malley, S., and Peterson, L. </author> <title> A fast and general implementation of Mach IPC in a network. </title> <booktitle> In Proceedings of the 3rd Usenix Mach Conference, </booktitle> <pages> pages 75-88, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: The result is that under some conditions, the cluster is faster on an absolute scale, and that on a relative, per-node scale, the cluster delivers superior performance in all cases. Mach NetIPC: This paper describes an implementation of the Mach IPC abstraction on a network <ref> [Orma93] </ref>. Our implementation, called NetIPC, is done in the context of the x-kernel, which provides a networking subsystem for Mach. The paper motivates the design choices we made, describes the x-kernel protocol graph that implements the design, and reports on the performance of the resulting system.
Reference: [Orma94] <author> Orman, H., O'Malley, S., Schroeppel, R., and Schwartz, D. </author> <title> Paving the road to network security, or the value of small cobblestones. </title> <booktitle> In Proceedings of the 1994 Internet Society Symposium on Network and Distributed System Security, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: Security: Software subsystems that implement cryptographic security features can be built from small modules using uniform interfaces. The methods demonstrated in this paper illustrate how configuration flexibility can be achieved and how complex services can be constructed, all using the same building block modules <ref> [Orma94] </ref>. These allow the configuration process to be independent of algorithm details, while the algorithms used in the subsystem are obvious. Reliable Multicast: We have built a suite of protocols that collectively provide a communication substrate for constructing fault-tolerant distributed programs based on replicated processing.
Reference: [Page94] <author> Pagels, M. A., Druschel, P., and Peterson, L. L. </author> <title> Analysis of cache and TLB effectiveness in processing network I/O. </title> <type> Technical Report 94-08, </type> <institution> Department of Computer Science, University of Arizona, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: Follow-on papers then look at specific issues and techniques in more detail: <ref> [Page94] </ref> investigates the effectiveness of the data cache in handling network I/O; [Bail91] and [Drus94] consider the interactions between the network adaptor and the operating system; [Drus93c] proposes a new mechanism, called fast buffers (fbufs), for transferring network data across protection domains; and [Abbo93a] defines and evaluates a technique for using
Reference: [Pete89] <author> Peterson, L. L., Buchholz, N., and Schlichting, R. D. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: A second paper reports our experiences with modularity in Conul [Mish93a]. Consul includes a membership protocol, a set of message ordering protocols, a failure detection protocol, and a recovery protocol. All these protocols depend on a low-level multicast protocol, called Psync <ref> [Pete89] </ref>, which preserves the causal ordering among messages. Image Transfer: We have studied the problem of image transfer from an end-to-end perspective.
Reference: [Turn92a] <author> Turner, C. J. and Peterson, L. L. </author> <title> The effects of transfer encoding on image quality. </title> <booktitle> In Proceedings of the 2nd IEEE International Conference on Image Processing, </booktitle> <pages> pages 63-67, </pages> <address> Singapore, </address> <month> September </month> <year> 1992. </year> <month> 5 </month>
Reference-contexts: It also includes an anaylsis of how different encoding algorithms effect image quality in the presence of unreliable computer networks <ref> [Turn92a] </ref>. Cluster Computing: With improved network technology, it is now feasible to build data parallel supercomputers using traditional RISC-based workstations connected by a high-speed network. This paper presents an in-depth look at the communication behavior of a suite of application programs implemented in the C fl data parallel language [Turn94].
Reference: [Turn92b] <author> Turner, C. J. and Peterson, L. L. </author> <title> Image transfer: An end-to-end design. </title> <booktitle> In Proceedings of the SIGCOMM '92 Symposium, </booktitle> <pages> pages 258-268, </pages> <address> Baltimore, Maryland, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: Image Transfer: We have studied the problem of image transfer from an end-to-end perspective. This includes a simple algorithm for encoding images into network packets in such a way that the receiver can recover from dropped packets without requiring the sender to retransmit them <ref> [Turn92b] </ref>. It also includes an anaylsis of how different encoding algorithms effect image quality in the presence of unreliable computer networks [Turn92a]. Cluster Computing: With improved network technology, it is now feasible to build data parallel supercomputers using traditional RISC-based workstations connected by a high-speed network.
Reference: [Turn94] <author> Turner, C. J., Mosberger, D., and Peterson, L. L. </author> <title> Cluster-C fl : Understanding the performance limits. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference, </booktitle> <month> May </month> <year> 1994. </year> <month> 6 </month>
Reference-contexts: Cluster Computing: With improved network technology, it is now feasible to build data parallel supercomputers using traditional RISC-based workstations connected by a high-speed network. This paper presents an in-depth look at the communication behavior of a suite of application programs implemented in the C fl data parallel language <ref> [Turn94] </ref>. It also compares the performance of these programs 3 on both a cluster of 8 HP 720 workstations and a 32 node (128 Vector Unit) CM-5.
References-found: 25

