URL: http://www.it.kth.se/docs/Reports/sim/DSA95.ps.gz
Refering-URL: http://www.it.kth.se/docs/Reports/sim/
Root-URL: http://www.it.kth.se
Email: vlad@it.kth.se  
Title: Virtual Shared Memory for PVM  
Author: Vladimir Vlassov, Hallo Ahmed and Lars-Erik Thorelli 
Address: Stockholm, Sweden  
Affiliation: Department of Teleinformatics Royal Institute of Technology (KTH)  
Abstract: This article presents mEDA-2, an extension to PVM which provides Virtual Shared Memory, VSM, for inter-task communication and synchronization. mEDA-2 consists of functions to access VSM and a daemon to manage parallel program termination. Access to VSM is based on the semantics of the EDA parallel programming model. The aim of developing mEDA-2 was to facilitate construction of parallel programs in PVM by providing a unified approach to message passing and shared memory models. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> O.A. McBryan, </author> <title> An Overview of Message Passing Environments, </title> <journal> Parallel Computing, </journal> <volume> Vol. 20, No. 4, </volume> <pages> pp. 417-444, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Most of the parallel programming environments, such as: PVM, P4, PARMACS, EXPRESS, MPI, etc., support the distributed memory programming model and are based on the message passing communication technique <ref> [1] </ref>. An alternative is the shared memory model which is character-ised by its flexibility and ease of programming. In this article we present mEDA-2, an extension library for the Parallel Virtual Machine, PVM [2], which provides Virtual Shared Memory, VSM.
Reference: [2] <author> A. Geist, et al., </author> <title> PVM3 Users Guide and Reference Manual. </title> <institution> ORNL/TM-12187, Oak Ridge National Lab. </institution> <month> Septem-ber </month> <year> 1994. </year>
Reference-contexts: An alternative is the shared memory model which is character-ised by its flexibility and ease of programming. In this article we present mEDA-2, an extension library for the Parallel Virtual Machine, PVM <ref> [2] </ref>, which provides Virtual Shared Memory, VSM. This is a dynamic set of shared variables used for inter-task communication and synchronization.
Reference: [3] <author> H. Wu, </author> <title> Extension of Data-Flow Principles for Multiprocessing, </title> <type> TRITA-TCS-9004 (Ph D thesis), </type> <institution> The Royal Institute of Technology (KTH), Stockholm, Sweden, </institution> <year> 1990. </year>
Reference-contexts: This is a dynamic set of shared variables used for inter-task communication and synchronization. Access to VSM is based on the semantics of the Extended Dataflow Actor model, EDA, which was developed at the Royal Institute of Technology, KTH, during the last few years <ref> [3, 4, 5, 6, 7, 8] </ref>. 2 The EDA Multiprocessing Model EDA provides a unified approach to communication and synchronization using distributed shared memory. A formal description of EDA and its first programming implementation can be found in [7, 8].
Reference: [4] <author> J. Milewski, H. Wu, L.-E. Thorelli, </author> <title> Specification of EDA0: An Extended Dataflow Actor model, </title> <address> TRITA-TCS-EDA-9208-R, </address> <month> KTH </month> <year> 1992. </year>
Reference-contexts: This is a dynamic set of shared variables used for inter-task communication and synchronization. Access to VSM is based on the semantics of the Extended Dataflow Actor model, EDA, which was developed at the Royal Institute of Technology, KTH, during the last few years <ref> [3, 4, 5, 6, 7, 8] </ref>. 2 The EDA Multiprocessing Model EDA provides a unified approach to communication and synchronization using distributed shared memory. A formal description of EDA and its first programming implementation can be found in [7, 8].
Reference: [5] <author> H. Wu, J. Milewski, L.-E. Thorelli, </author> <title> Sharing Data in an Actor Model, </title> <booktitle> Proc. 1992 Int. Conf. on Parallel and Distributed Systems, Taiwan, </booktitle> <pages> 245-250, </pages> <year> 1992. </year>
Reference-contexts: This is a dynamic set of shared variables used for inter-task communication and synchronization. Access to VSM is based on the semantics of the Extended Dataflow Actor model, EDA, which was developed at the Royal Institute of Technology, KTH, during the last few years <ref> [3, 4, 5, 6, 7, 8] </ref>. 2 The EDA Multiprocessing Model EDA provides a unified approach to communication and synchronization using distributed shared memory. A formal description of EDA and its first programming implementation can be found in [7, 8].
Reference: [6] <author> H. Wu, L.-E. Thorelli, J. Milewski, </author> <title> A Parallel Programming Model for Distributed Real-Time Computing, </title> <booktitle> Proc. Int. Workshop on Mechatronic Computer Systems for Perception and Action, </booktitle> <address> Halmstad, 301-308,1993. </address>
Reference-contexts: This is a dynamic set of shared variables used for inter-task communication and synchronization. Access to VSM is based on the semantics of the Extended Dataflow Actor model, EDA, which was developed at the Royal Institute of Technology, KTH, during the last few years <ref> [3, 4, 5, 6, 7, 8] </ref>. 2 The EDA Multiprocessing Model EDA provides a unified approach to communication and synchronization using distributed shared memory. A formal description of EDA and its first programming implementation can be found in [7, 8].
Reference: [7] <author> L.-E. Thorelli, </author> <title> The EDA Multiprocessing Model. </title> <type> Technical Report TRITA-IT-R 94:28, </type> <institution> CSLab, Dept. of Telein-formatics, KTH. </institution> <year> 1994. </year>
Reference-contexts: This is a dynamic set of shared variables used for inter-task communication and synchronization. Access to VSM is based on the semantics of the Extended Dataflow Actor model, EDA, which was developed at the Royal Institute of Technology, KTH, during the last few years <ref> [3, 4, 5, 6, 7, 8] </ref>. 2 The EDA Multiprocessing Model EDA provides a unified approach to communication and synchronization using distributed shared memory. A formal description of EDA and its first programming implementation can be found in [7, 8]. <p> A formal description of EDA and its first programming implementation can be found in <ref> [7, 8] </ref>. EDA objects are the executing units of an EDA program, which are realized in mEDA-2 as PVM tasks. Shared variables are distributed between objects where they can be accessed using synchronization rules defined in terms of fetch and store operations.
Reference: [8] <author> V Vlassov, L-E Thorelli and H Ahmed, Multi-EDA: </author> <title> A Programming Environment for Parallel Computations. </title> <type> Technical Report TRITA-IT-R 94:29, </type> <institution> CSLab, Dept. of Tel-einformatics, KTH. </institution> <year> 1994. </year>
Reference-contexts: This is a dynamic set of shared variables used for inter-task communication and synchronization. Access to VSM is based on the semantics of the Extended Dataflow Actor model, EDA, which was developed at the Royal Institute of Technology, KTH, during the last few years <ref> [3, 4, 5, 6, 7, 8] </ref>. 2 The EDA Multiprocessing Model EDA provides a unified approach to communication and synchronization using distributed shared memory. A formal description of EDA and its first programming implementation can be found in [7, 8]. <p> A formal description of EDA and its first programming implementation can be found in <ref> [7, 8] </ref>. EDA objects are the executing units of an EDA program, which are realized in mEDA-2 as PVM tasks. Shared variables are distributed between objects where they can be accessed using synchronization rules defined in terms of fetch and store operations.
References-found: 8

