URL: http://www.cs.ucla.edu/~rennels/prfts97.ps
Refering-URL: http://www.cs.ucla.edu/~rennels/
Root-URL: http://www.cs.ucla.edu
Title: Abstract  
Abstract: This paper presents a design approach for implementing a fault-tolerant embedded computing node based on the use of low-cost commodity microcontrollers. A combination of software and relatively simple external logic is used to implement fault-tolerance in a redundant set of micro-controllers. A node can be protected with different amounts of redundancy (duplex, triplex, hybrid) depending upon the needs of its host subsystem, and is intended to be interconnected with other nodes into a modular distributed network. The structure of the node, and fault detection and recovery algorithms are described, along with a descrip tion of an experimental testbed that is being implemented. 1
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> 8XC196Kx, 8XC196Jx, </author> <title> 87C196CA Microcontroller Family Users Manual, </title> <publisher> Intel Corporation, </publisher> <month> June </month> <year> 1995. </year>
Reference-contexts: 1. Introduction Microcontrollers are highly integrated computer systems on a single chip, containing processor, RAM, ROM, and I/O including A/D converters and bus controllers <ref> [1] </ref>. These very inexpensive commodity devices can form the basis for modular distributed networks, but they lack fault-tolerance features required for highly reliable systems. Thus fault-tolerance must be added using redundant micro-controllers and additional supporting circuitry.
Reference: 2. <author> Frison, S. G., and J. H. Wensley, </author> <title> Interactive Consistency and Its Impact on TMR Systems, </title> <booktitle> Dig. Int. Symp. Fault Tolerant Computing, </booktitle> <address> FTCS-12, </address> <month> June </month> <year> 1982, </year> <pages> pp. 228-233. </pages>
Reference-contexts: Some of these design problems include: Interactive consistency - The microcontrollers may sample slightly different values of some input sig nals (e.g. analog inputs). Thus special message exchanges are required for agreement <ref> [2] </ref>. Bounding Error Latency - With very little internal checking in microcontrollers, periodic internal test ing must be interleaved with normal operation. Circuit Isolation - Protection must be supplied against shorts and babbling modules to prevent sin gle points of failure.
Reference: 3. <author> Harper, R.. E., J. H. Lala, and J. J. Deyst, </author> <title> Fault-Tolerant Parallel Processor Overview, </title> <booktitle> Dig. Int. Symp. Fault Tolerant Computing, </booktitle> <address> FTCS-18, </address> <month> June </month> <year> 1988, </year> <pages> pp. 252-257. </pages>
Reference-contexts: Symp. on Fault-Tolerant Systems (PRFTS), Dec 15-16, 1997, Taipei. the massively redundant intercommunication schemes between modules that guarantee Byzantine resilience, but instead rely upon a multilevel recovery approach that provides restarts with diagnosis in the unlikely event that the normal recovery algorithms become confounded <ref> [3] </ref>. 2.1 Operation of a Microcontroller Node A fault-tolerant node consists of two or more redundant microcontroller modules. Each microcontroller module (hereafter described as "modules) can be assigned one of three operating states: (1) Master, (2) Slave, and (3) OffLine.
Reference: 4. <author> Kopetz, H., et. al., </author> <title> Distributed Fault-Tolerant Real-Time Systems: The MARS Approach, </title> <booktitle> IEEE Micro, </booktitle> <month> February </month> <year> 1989. </year>
Reference-contexts: Each microcontroller module (hereafter described as "modules) can be assigned one of three operating states: (1) Master, (2) Slave, and (3) OffLine. The Master and Slave modules, designated active modules, execute identical applications programs scheduled by a timedriven operating system on the basis of a common real-time interrupt (RTI) <ref> [4] </ref>. The applications programs execute at approximately the same time - bounded by the frequency skew of their clocks within an RTI interval and slight differences in operating system functions in Master and Slaves.
Reference: 5. <author> Avizienis, A. A., et. al., </author> <title> The STAR (Self-Testing and Repairing) Computer: An Investigation of the Theory and Practice of Fault-Tolerant Computer Design, </title> <booktitle> Dig. Int. Symp. Fault Tolerant Computing, </booktitle> <address> FTCS-1, </address> <month> June </month> <year> 1970, </year> <pages> pp. 92-96. </pages>
Reference-contexts: Inputs are protected by series resistors and outputs are protected with series diodes with passive pull down resistors on the common output lines. This approach dates all the way back to the JPL-STAR Computer <ref> [5] </ref>. The resistors can be implemented directly in an MCM substrate, but the diodes require additional circuit packages.
Reference: 6. <author> Arlat, J., Y. Crouzet and J.C. Laprie, </author> <title> Fault Injection for Dependability Validation of Fault-Tolerant Computing Systems, </title> <booktitle> Dig. Int. Symp. Fault Tolerant Computing, </booktitle> <address> FTCS-19, </address> <month> June </month> <year> 1989, </year> <pages> pp. 348-355. </pages>
Reference-contexts: By inducing faults into the running system and observing its response, we will obtain a good understanding of the levels of coverage that can be attained <ref> [6] </ref>. The structure of the testbed is similar to Figure 2. A PC will be used to generate inputs and sample outputs and the data on the fault-tol erance channels.
References-found: 6

