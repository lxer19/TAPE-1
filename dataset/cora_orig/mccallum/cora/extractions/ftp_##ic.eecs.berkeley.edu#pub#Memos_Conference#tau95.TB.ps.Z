URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/tau95.TB.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/serdar/publications/index.html
Root-URL: 
Email: Email: fserdar, braytong@ic.eecs.berkeley.edu  
Title: On Iterative Verification with Timed Automata  
Author: Serdar Ta~sran Robert K. Brayton 
Address: Berkeley  
Affiliation: Department of Electrical Engineering and Computer Sciences, University of California,  
Abstract: A timed automaton is said to have the simple path property (SPP) if any given sequence of states is traversable if and only if it is traversable by a simple path. With this restriction it becomes simpler to do iterative timing verification and the problem of language emptiness becomes decidable regardless of the form of the timing constraints (e.g., non-linear inequalities among multiple clocks are allowed). Unfortunately, it is hard to determine if an automaton has the SPP, and the SPP may not be preserved upon composition of automata. In this study, we present an algorithm that makes full use of the SPP without needing to determine if the automaton possesses this property. No restrictions are posed on the form of the timing constraints. If the automaton does not have the SPP, our algorithm is still a complete decision procedure in all cases where iterative algorithms exist. Otherwise, it becomes a semi-decision procedure. The iterative timing verification algorithms in the literature use an untimed language containment tool to obtain an error trace, and proceed by restricting the system to eliminate that trace if it is found to be inconsistent with the timing constraints. Typically, the language containment tool computes enough information to obtain more than one error trace each time it is run. We propose a method that makes use of all of these traces. This offers a new trade-off: the time spent in each iteration is increased, but, in return, the number of iterations is decreased. Since checking language containment is usually the most time consuming part of the verification process, fewer iterations can reduce run time significantly.
Abstract-found: 1
Intro-found: 1
Reference: [Wu94] <author> Ephrem C. Wu. </author> <title> Formal Timing Verification With Simple-Path Timed Automata. M.S. </title> <type> Thesis, </type> <institution> University of California, Berkeley, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: Unfortunately, it is hard to determine if an automaton has the SPP, and the SPP may not be preserved upon composition of automata <ref> [Wu94] </ref>. In this study, we present an algorithm that makes full use of the SPP without needing to determine if the automaton possesses this property. No restrictions are posed on the form of the timing constraints. <p> The verification problem is then posed as the language emptiness of the product of the system and the monitor, i.e., one tries to prove that the final states are not reachable from the initial states. We will use the train gate controller of <ref> [Wu94] </ref> and [AIKY92], depicted in Figure 1 as an illustrative example in the rest of the paper. This example consists of three modules: a train, a gate and a controller. When the train approaches, the controller lowers the gate, and raises it after the train has exited. <p> Further restrictions (often too prohibitive) need to be imposed on the placement of timing constraints on the automaton to ensure the SPP upon composition <ref> [Wu94] </ref>. On the other hand, SPP enables the use of arbitrary timing constraints (such as inequalities involving multiple clocks) as queries on edges; an advantage over other existing approaches. 3.2 Our Approach The following observation inspires a method that overcomes the problems with having to check for SPP.
Reference: [AIKY92] <author> R. Alur, A. Itai, R. P. Kurshan, and M. Yannakakis. </author> <title> Timing Verification by Successive Approximation. </title> <booktitle> In Proc. of International Conference on Computer Aided Verification, </booktitle> <year> 1992. </year>
Reference-contexts: The verification problem is then posed as the language emptiness of the product of the system and the monitor, i.e., one tries to prove that the final states are not reachable from the initial states. We will use the train gate controller of [Wu94] and <ref> [AIKY92] </ref>, depicted in Figure 1 as an illustrative example in the rest of the paper. This example consists of three modules: a train, a gate and a controller. When the train approaches, the controller lowers the gate, and raises it after the train has exited.
Reference: [LB93] <author> W. K. C. Lam and R. K. Brayton. </author> <title> Alternating RQ Timed Automata. </title> <booktitle> In Proc. of International Conference on Computer Aided Verification, </booktitle> <year> 1993. </year>
Reference-contexts: In most cases, verification with timed automata is complex. Iterative methods have been used to alleviate this complexity in cases where only a part of the timing information from the system is necessary to prove the property desired ([AIKY92], <ref> [LB93] </ref>, [Bal95]). A timed automaton is said to have the simple path property (SPP) if any given sequence of states is traversable if and only if it is traversable by a simple path [LB93], where "traversable" means that there is a timing consistent path that visits each state in the sequence <p> a part of the timing information from the system is necessary to prove the property desired ([AIKY92], <ref> [LB93] </ref>, [Bal95]). A timed automaton is said to have the simple path property (SPP) if any given sequence of states is traversable if and only if it is traversable by a simple path [LB93], where "traversable" means that there is a timing consistent path that visits each state in the sequence in order. SPP can be viewed as a restriction on where the timing constraints can be placed.
Reference: [HBK93] <author> R. Hojati, R. K. Brayton, R. P. Kurshan. </author> <title> BDD-Based Debugging of Designs Using Language Containment and Fair CTL. </title> <booktitle> In Proc. of International Conference on Computer Aided Verification, </booktitle> <year> 1993. </year>
Reference: [LB94] <author> W. K. C. Lam and R. K. Brayton. </author> <title> Criteria for the Simple Path Property in Timed Automata. </title> <booktitle> In Proc. of International Conference on Computer Aided Verification, </booktitle> <year> 1994. </year>
Reference-contexts: SPP can be viewed as a restriction on where the timing constraints can be placed. With this restriction it becomes simpler to do iterative timing verification <ref> [LB94] </ref> and the problem of language emptiness becomes decidable fl Supported by SRC under contract 95-DC-324-026 1 regardless of the form of the timing constraints (e.g., non-linear inequalities among multiple clocks are allowed). <p> in the case that an ordered set of states = s 0 s 1 s 2 :::s n is traversable if and only if there is a traversable simple path (possibly including states outside ) that goes through s 0 s 1 s 2 :::s n in the given order. <ref> [LB94] </ref> gives the following characterization for the SPP. Theorem 5 If the queries in a timed automaton can refer to an arbitrary subset of the clocks, then the automaton has the SPP iff the RQ order of each simple path is preserved under cycle expansion. <p> the queries in a timed automaton can refer to an arbitrary subset of the clocks, and will make use of Theorem 5 without mention. 4 3 SPP and Iterative Timing Verification 3.1 Previous Approach In the following, we describe how the SPP has previously been exploited for iterative timing verification <ref> [LB94] </ref>. Let be a path and fi = 0 ::: n its effective RQ sequence. Let t ij be the time elapsed from i to j . fi implies two set of inequalities on the variables t ij : (i) Those associated with queries. <p> These are conditions on t lm , where l contains the effective reset for a clock queried on m , (ii) Those indicating the ordering of the 's: t ij &gt; 0 iff i j . In <ref> [LB94] </ref> the following theorem was proven. Theorem 6 Let fi 1 and fi 2 be effective RQ sequences such that fi 1 dominates fi 2 . Then the set of inequalities I 2 induced by 2 is a superset of I 1 .
Reference: [HSIS94] <author> A. Aziz, F. Balarin, R. K. Brayton, S.-T. Cheng, R. Hojati, T. Kam, S. C. Krishnan, R. K. Ranjan A. L. Sangiovanni-Vincentelli T. R. Shiple V. Singhal, S. Ta~sran, H.-Y. Wang. HSIS: </author> <title> A BDD-Based Environment for Formal Verification. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: Usually it computes sufficient information to obtain a set of error traces. In this section, we address the problem of using all these traces for the particular case of the Berkeley verification tool HSIS <ref> [HSIS94] </ref>. Starting from the initial states, HSIS computes the wavefronts depicted in Figure 3, where the nth wavefront corresponds to the set of states reachable in at least n transitions.
Reference: [Bal95] <author> F. Balarin. </author> <title> Iterative Methods for Formal Verification of Digital Systems. </title> <type> Ph.D. Thesis, </type> <institution> University of California, Berkeley, </institution> <note> Memorandum No. UCB/ERL M95/1, January 1995. 12 </note>
Reference-contexts: In most cases, verification with timed automata is complex. Iterative methods have been used to alleviate this complexity in cases where only a part of the timing information from the system is necessary to prove the property desired ([AIKY92], [LB93], <ref> [Bal95] </ref>). <p> We have an initial implementation of this procedure in HSIS. The performance of the implementation is actually better than the previous one that assumed the SPP and, on the basis of the few examples we considered, is competitive with the tool of <ref> [Bal95] </ref>, also implemented on the HSIS platform. The scale of the examples in [Bal95] can therefore be taken as a rough measure of the limits of the algorithm presented. 4 Elimination of a Set of Traces in One Iteration The untimed language emptiness tool used by an iterative timing verifier returns <p> The performance of the implementation is actually better than the previous one that assumed the SPP and, on the basis of the few examples we considered, is competitive with the tool of <ref> [Bal95] </ref>, also implemented on the HSIS platform. The scale of the examples in [Bal95] can therefore be taken as a rough measure of the limits of the algorithm presented. 4 Elimination of a Set of Traces in One Iteration The untimed language emptiness tool used by an iterative timing verifier returns an error trace if language emptiness does not hold.
References-found: 7

