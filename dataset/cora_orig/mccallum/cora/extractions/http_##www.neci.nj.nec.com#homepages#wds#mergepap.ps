URL: http://www.neci.nj.nec.com/homepages/wds/mergepap.ps
Refering-URL: http://www.neci.nj.nec.com/homepages/wds/works.html
Root-URL: 
Email: fwds,keving@research.NJ.NEC.COM  
Title: Merging function  Values of the merging function and algorithm design as a game  
Author: Warren D. Smith Kevin J. Lang 
Keyword: Computer game-playing, optimal algorithms, minimum comparison merging, iterative widening, algorithm design  
Address: 4 Independence Way, Princeton, NJ 08540  
Affiliation: NEC,  
Date: June 29, 1994  
Note: typeset 687 Jun 29, 1994 Smith Lang  as a game.  
Abstract: Finding algorithms that are optimal for worst case input is equivalent to solving a 2-player game of perfect information. The merging game arises when finding the minimum number M(m; n) of comparisons needed to merge two sorted lists of cardi-nalities m and n. We devised a computer program capable of determining any value of M(m; n) 20. It was based on standard game solving techniques (alpha-beta search, transposition table) plus bounding, "fuzzy trans table," and "partitioning" ideas specific to the merging game. Thanks to a new idea called "iterative widening," our game solver can also determine strong upper bounds (but not lower bounds) on M(m; n) in a much larger region. The widening/shrinking idea may have other applications in computer game playing. We present a large table of bounds on M(m; n) which were obtained by combining our new results with previous bounds on M(m; n) (which we survey). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T.D. Bui and Mai Thanh: </author> <title> Significant improvements to the Ford-Johnson algorothm for sorting, </title> <note> BIT 25 (1985) 70-75 </note>
Reference-contexts: The game solver also has confirmed every miscellaneous value of M (m; n) given in the papers we've cited except that, unfortunately, the game solver found that M (7; 12) = 17, which contradicts two independent (?) statements in the literature [2] <ref> [1] </ref> that M (7; 12) = 18. This led to considerable worry on the part of the first author (Smith) that the game solver had a bug, but: * Neither of these two papers that claimed M (7; 12) = 18 included a proof. <p> By merging A with the even numbered elements of B first, we see that M (a; b) M (a; bb=2c) + a: (17) Two successive merges show that M (a; b + c) M (a; b) + M (a; c): (18) Some other merging algorithms have been proposed in <ref> [1] </ref>, but they do not appear to yield any new results in the range 0 &lt; a b 100. 4.3 Lower bounds We have already mentioned the information theoretic lower bound (EQ 1).
Reference: [2] <author> C. Christen: </author> <title> Improving the bounds on optimal merging, </title> <booktitle> Proc 19th IEEE conf on the foundations of computer science ["FOCS"] 259-266. </booktitle>
Reference-contexts: The game solver also has confirmed every miscellaneous value of M (m; n) given in the papers we've cited except that, unfortunately, the game solver found that M (7; 12) = 17, which contradicts two independent (?) statements in the literature <ref> [2] </ref> [1] that M (7; 12) = 18. This led to considerable worry on the part of the first author (Smith) that the game solver had a bug, but: * Neither of these two papers that claimed M (7; 12) = 18 included a proof. <p> This shows that M (m; n) m + n 1: (5) Christen <ref> [2] </ref> observes as his "lemma 0" that Lemma 5 (Christen 1978) Suppose A i &lt; B i+3 is already known for 1 i m; then at most 2m more comparisons are needed to complete the merging. Proof. Compare A m with B m+1 . <p> One of the simplest, but still rather effective, such counterstrategies is the "splitting" strategy mentioned in <ref> [2] </ref>. The idea here is that after Max tells Min that A i &lt; B j , Max splits the merging problem into two subproblems A 1::h &B 1::k and A h+1::m &B k+1::n , where h i and k &lt; j. <p> it is easier to analyse, because the splitting automatically ensures the consistency of Max's later answers and also leads to a simple recurrence relation: M (m; n) min min max 1+M (h; k)+M (mh; nk) where "P " is P (i h m and 0 k &lt; j) or Christen <ref> [2] </ref> was able to show that the lower bounds from a set of inequalities realted to this one meet the upper bounds from (EQ 7) or (EQ 11) when 5m 3 n 7m.
Reference: [3] <author> G.B. Dantzig: </author> <title> Linear programming and extensions, </title> <publisher> Princeton University Press 1963. </publisher>
Reference: [4] <author> L.R.Ford Jr. and S.B. Johnson: </author> <title> A tournament problem, </title> <journal> Amer. Math. </journal> <note> Monthly 66,5 (1959) 387-389. </note>
Reference: [5] <author> R.L. Graham: </author> <title> On sorting by comparisons, </title> <note> pp. 263-269 in Computers in Number theory (Academic Press London 1971) A.O.Atkin and B.J. Birch eds. </note>
Reference-contexts: Otherwise, M2 [a][b][c] = 1 + min ( (2) 1x&lt;c maxfM2 [a x][b x][c x]; M2 [a][b][x]g; min maxfM2 [x][b][c]; M2 [a][x][c]g): In particular, M (2; a) = M2 [a][0][a + 1]. Graham <ref> [5] </ref> (see also [9]) has found a closed form for the M2 function, although it is sufficiently complicated that we prefer simply solving the recurrences above. <p> A few sporadic choices were also explored outside these regions. 4 Other bounds on M (m; n) 4.1 Results for small values of m Binary search shows that M (1; n) = dlg (n + 1)e: (4) Hwang and Lin [8] (see also Graham <ref> [5] </ref>) showed that Theorem 1 (Hwang and Lin 1971) T 2 (2n + 1) = b12N=7c 1, T 2 (2n + 2) = b17N=7c 1, where n 0 and N = 2 n .
Reference: [6] <author> F.K. Hwang: </author> <title> Optimal merging of 3 elements with N elements, </title> <note> SIAM J Computing 9 (1980) 298-320 </note>
Reference-contexts: We believe it is correct. Some evidence for this is that our program confirmed all the values of M (m; n) for max (m; n) 10 tabulated by Knuth [9] upper left of page 203. Also, we mention that Hwang <ref> [6] </ref> managed to find the values of M (3; n) in closed form by an extremely complicated argument, see theorem 2. <p> Equivalently, M (2; n) = dlg 7 (n + 1)=12e + dlg 14 (n + 1)=17e when n 3. Hwang <ref> [6] </ref> showed (we write some of his results in a form due to Monting) Theorem 2 (Hwang 1980) 1. T 3 (1) = 0, T 3 (2) = T 3 (3) = 1, T 3 (4) = 2; 2.
Reference: [7] <author> F.K. Hwang and D.N. Deutsch: </author> <title> A class of merging algorithms, </title> <journal> J. </journal> <note> ACM 20,1 (1973) 148-159 </note>
Reference-contexts: Christen actually has an infinite number of results of this type, each one proved with the aid of the previous ones. But in the range 3 &lt; a b 100 only the ones we have mentioned so far matter. A powerful upper bound (e.g. <ref> [7] </ref>) arises by considering first comparing A 1 with B x , and, if A 1 is larger, annexing B 1::x to reduce the problem to M (a; b x), while if A 1 is smaller, binary inserting A 1 among B 1 ::B x1 to reduce the problem to M
Reference: [8] <author> F.K. Hwang and S. Lin: </author> <title> An optimal algorithm for merging an ordered set of length two with another ordered set, </title> <note> Acta Informatica 1 (1971) 145-158. </note>
Reference-contexts: A few sporadic choices were also explored outside these regions. 4 Other bounds on M (m; n) 4.1 Results for small values of m Binary search shows that M (1; n) = dlg (n + 1)e: (4) Hwang and Lin <ref> [8] </ref> (see also Graham [5]) showed that Theorem 1 (Hwang and Lin 1971) T 2 (2n + 1) = b12N=7c 1, T 2 (2n + 2) = b17N=7c 1, where n 0 and N = 2 n . <p> n) (30) for 1 n 100, except for :Mn (2; 1) = 1, :Mn (2; 4) = 4, :Mn (2; 6) = 5 and =Mn (2; 1) = 0, =Mn (2; 2) = 2, (It is probably possible to remove the " 100" from this lemma by using techniques like <ref> [8] </ref>, but we have not done so.
Reference: [9] <author> D.E. Knuth: </author> <title> The art of computer programming vol 3, Sorting and Searching, </title> <publisher> Addison Wesley 1973. </publisher>
Reference-contexts: Otherwise, M2 [a][b][c] = 1 + min ( (2) 1x&lt;c maxfM2 [a x][b x][c x]; M2 [a][b][x]g; min maxfM2 [x][b][c]; M2 [a][x][c]g): In particular, M (2; a) = M2 [a][0][a + 1]. Graham [5] (see also <ref> [9] </ref>) has found a closed form for the M2 function, although it is sufficiently complicated that we prefer simply solving the recurrences above. In the event that, at any Max node in the search, this upper bound is ff, then an alpha cutoff may be taken without any further search. <p> We believe it is correct. Some evidence for this is that our program confirmed all the values of M (m; n) for max (m; n) 10 tabulated by Knuth <ref> [9] </ref> upper left of page 203. Also, we mention that Hwang [6] managed to find the values of M (3; n) in closed form by an extremely complicated argument, see theorem 2. <p> Knuth <ref> [9] </ref> devised a more complicated, but more powerful counterstrategy, which Christen calls "the full disjunctive counterstrategy." We will not describe it here in full, since Knuth gives a complete description, but we will describe the basic ideas behind it and the recurrences that result. <p> We point out that in this event, of course these improved values may be fed into Knuth's recurrences to produce additional improved lower bounds. No improvement is possible for rM (1; n), since, as was shown in <ref> [9] </ref>, =M n (1; n) = =M:(1; n) = M (1; n) for n 2. It is possible to compute the exact values of rM (2; n), by dynamic programming, and these can lead to improve ments over the bounds one would obtain merely by naive use of Knuth's recurrences. <p> The obvious one to examine next is sorting. Our mergegame solver (with our current hardware and software) can only solve for M (m; n) 20, although it has found new upper bounds as much as 40 comparisons deep. The first unknown cases in the sorting problem <ref> [9] </ref> involve more than 30 unknown comparisons.
Reference: [10] <author> D.E. Knuth and R.W. </author> <title> Moore; Analysis of alphabeta pruning, </title> <booktitle> Artificial Intelligence 6 (1975) 293-326 </booktitle>
Reference-contexts: The game may be solved via "alpha beta search" <ref> [10] </ref>, which is a considerably more efficient method for solving such games (due to "cutoffs") than naive methods. Perhaps the canonical algorithm problem is sorting. <p> The naive method for solving a game would be to generate the entire game tree in root-downwards pass, and then find the values of all the nodes in a leaves-upwards pass. The alpha-beta method <ref> [10] </ref> is functionally equivalent to the naive method (that is, it will always produce the same result for the root's value) but is usually much faster, and also is more flexible. The alpha-beta algorithm, in its barest form, is defined recursively as follows 2 .
Reference: [11] <author> Daphne Koller, Nimrod Megiddo, and Bern-hard von Stengel: </author> <title> Fast algorithms for finding randomized strategies in game trees, </title> <booktitle> 28th ACM Symposium of theory of computing ("STOC"), </booktitle> <year> 1994. </year> <note> DocNum 12 . 6. 0. 0 Merging function typeset 687 Jun 29, 1994 Smith & Lang </note>
Reference-contexts: This was observed by Yao [17]. Again the games are much more interesting for on-line algorithms. These games are much harder to solve than our kind of games <ref> [11] </ref>. The problem of finding the least expected cost algorithm where input is selected from a fixed, known, probability distribution, and the problem of finding the worst case of a specified algorithm, are 1-player games.
Reference: [12] <author> Jurgen Schulte Monting: </author> <title> Merging of 4 or 5 elements with n elements, </title> <note> Theoretical Computer Science 14 (1981) 19-37 </note>
Reference-contexts: In those cases we have simply truncated the tree at depth 6. The tree showing M (5; 42) = 22 is important because it allows one to sort 47 items in 200 comparisons <ref> [12] </ref>. Also, various other upper bounds follow from these by applying known bounds-combining methods in x4.2. See the table in x2. Frustratingly, the game solver was not able to establish any new lower bounds. <p> Still, since an exhaustive search was completed for the restricted width merging game at width 7, any 20-comparison merging algorithm must be rather difficult. Thus the game solver may be regarded as having partially confirmed Monting's <ref> [12] </ref> proof that M (4; 56) = 21. M 13 (5; 37) = 22: Knuth's theorem shows that if M (5; 37) = 21, then the initial comparison must be 2:11, 2:12, or 2:13. It suffices for Max to answer A 2 &lt; B 11 . <p> The game solver program has confirmed Hwang's values of M (3; n) up to n = 82. Nissenbaum was in error. Monting <ref> [12] </ref> (theorem 3 page 37) claims that Theorem 3 (Monting 1981) 1. T 4 (1) = T 4 (2) = 0, T 4 (3) = T 4 (4) = 1, T 4 (5) = 2, 2. T 4 (4n + 7) = b17N=7c + b59N=28c + b12N=7c 1; 3.
Reference: [13] <author> Jurgen Schulte Monting: </author> <title> Optimal merging of 3, 4 and 5 elements with n elements, </title> <note> Technical report at Universitat Tubingen 1978. </note>
Reference-contexts: Monting's proof is extremely complicated and in fact, the full details are apparently deferred to a technical report <ref> [13] </ref> and are not present in his paper. The game solver confirms Monting's values of M (4; n) for all n 80 except for n = 56 and n = 68, where it was unable to complete the exhaustive search.
Reference: [14] <author> Y. Nissenbaum: </author> <title> On merging N ordered elements with 3 elements, </title> <journal> SIGACT News 9,4 (1978) 14-16. </journal>
Reference-contexts: T 3 (3n + 5) = 2b17N=7c 1, except that T 3 (8) = 8; 3. T 3 (3n + 6) = b43N=7c 2 where n 0 and N = 2 n . Hwang's proof is extremely complicated. Also Nis-senbaum <ref> [14] </ref> claims to have independently established the same results as Hwang, except that Nissenbaum gave the slightly different formula T 3 (3n + 5) = b34N=7c 1. The game solver program has confirmed Hwang's values of M (3; n) up to n = 82. Nissenbaum was in error.
Reference: [15] <author> P.K. Stockmeyer and F.F. Yao: </author> <title> On the optimality of linear merge, </title> <note> SIAM J. Computing 9 (1980) 85-90 </note>
Reference-contexts: Thus 1 + min 1im min 1jn of (EQ 28) is a lower bound on rM (a; b), regardless of what Min does. The strongest combination of these inequalities may be deduced automatically by "dynamic programming." Stockmeyer and Yao <ref> [15] </ref> were able to show that Knuth's lower bound meets the upper bound (EQ 5) from straight merge when m n b3m=2c + 1.
Reference: [16] <author> Mai Thanh and T.D. Bui: </author> <title> An improvement of the binary merge algorithm, </title> <note> BIT 22 (1982) 454-462 </note>
Reference: [17] <author> A. C. Yao: </author> <title> Probababilistic computation: Towards a unified measure of complexity, </title> <booktitle> Proc. 18th FOCS (1977) 222-227. </booktitle> <volume> DocNum 13 . 6. 0. </volume> <pages> 0 </pages>
Reference-contexts: This was observed by Yao <ref> [17] </ref>. Again the games are much more interesting for on-line algorithms. These games are much harder to solve than our kind of games [11].
References-found: 17

