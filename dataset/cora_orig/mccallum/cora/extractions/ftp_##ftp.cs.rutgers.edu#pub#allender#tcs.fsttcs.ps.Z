URL: ftp://ftp.cs.rutgers.edu/pub/allender/tcs.fsttcs.ps.Z
Refering-URL: http://www.cs.rutgers.edu/~allender/publications/
Root-URL: http://www.cs.rutgers.edu
Email: allender@cs.rutgers.edu  JXJIAO@ualr.edu  meena@imsc.ernet.in  vinay@csa.iisc.ernet.in  
Title: Non-Commutative Arithmetic Circuits: Depth Reduction and Size Lower Bounds  
Author: Eric Allender Jia Jiao Meena Mahajan V Vinay 
Address: Piscataway, NJ 08855-1179, USA  Little Rock, AR 72204, USA  Madras 600 113, India  Bangalore 560 012, India  
Affiliation: Department of Computer Science Rutgers University  Department of Computer and Information Science University of Arkansas at Little Rock  The Institute of Mathematical Sciences,  Department of Computer Science and Automation, Indian Institute of Science,  
Abstract: fl The results in this paper were originally announced in papers in Proc. 25th ACM Symposium on Theory of Computing (1993) and in Proc. 14th Conference on Foundations of Software Technology and Theoretical Computer Science (1994), Lecture Notes in Computer Science 880. 
Abstract-found: 1
Intro-found: 1
Reference: [Ag94] <author> M. Agrawal, </author> <title> On the isomorphism problem for weak reducibilities, </title> <note> To appear in J. Computer Sys. Sci. For a preliminary version, see Proc. 9th Structure in Complexity Theory Conference (1994) pp. 338-355. </note>
Reference-contexts: While the Opt classes consist of functions from fl to fl , the Boolean classes map fl to 6 It is observed in <ref> [AG94] </ref> that this polynomial can be implemented via uniform constant-depth circuits. 16 f0; 1g. <p> Languages classes characterized by one-way acceptors have been the subject of study in much previous work. Notably, 1-NLOG has been studied in depth in e.g. <ref> [HM81, Ag94] </ref>, and 1-way AuxPDAs in [Bra77].
Reference: [AAD97] <author> M. Agrawal, E. Allender, and S. Datta, </author> <title> On TC 0 , AC 0 , and Arithmetic Circuits, </title> <booktitle> to appear in Proc. 12th IEEE Conference on Computational Complexity, </booktitle> <year> 1997. </year>
Reference-contexts: We note that other (less trivial) connections between TC 0 and classes of arithmetic circuits over finite fields are also known [RT92, BFS92]. (See also <ref> [AAD97] </ref>.) 2 That is, there is a logspace-computable g such that f (x) = determinant (g (x)). 12 In spite of Theorem 4.2, it is not known whether TC 1 or even AC 1 can be reduced to arithmetic circuits of polynomial size and degree (#SAC 1 ). 3 It is
Reference: [Al89] <author> E. Allender, </author> <title> P-uniform circuit complexity, </title> <journal> J. </journal> <note> ACM 36 (1989) 912-928. </note>
Reference-contexts: The rest of the construction is similar to the construction sketched above for 1-LOGCFL. (Related observations concerning AuxPDAs that have limits on the number of times they move their input heads are made in <ref> [Al89, ABP92] </ref>; providing a full proof is routine, using ideas presented there.) Corollary 7.4 A language L is accepted by an unambiguous 1-LOGCFL machine iff there is a polynomial-size, polynomial-degree circuit generating L unambiguously.
Reference: [ABP92] <author> E. Allender, D. Bruschi, and G. Pighizzini, </author> <title> The complexity of computing maximal word functions, </title> <note> Computational Complexity 3 (1993) 368-391. 46 </note>
Reference-contexts: f 2 B if the language L f = fhx; i; bi : the ith symbol of f (x) is bg is in B. 5.1 Relating Optimization Classes and (max,concat) Circuits It is shown in [AJ92] that OptL is contained in AC 1 (a later proof may be found in <ref> [ABP92] </ref>); it is also shown in [AJ92] that iterated matrix multiplication over ( fl ,max,concat) is complete for OptL. <p> Although we feel that a proof in this vein is instructive, the proof given below is extremely simple, and is very similar to the argument in <ref> [ABP92] </ref>. Further, the proof we give here explicitly uses the algorithm from [MRK88] to construct individual bits of the output; it thus follows from this construction (Lemma 5.5) that OptLOGCFL is in AC 1 . <p> The rest of the construction is similar to the construction sketched above for 1-LOGCFL. (Related observations concerning AuxPDAs that have limits on the number of times they move their input heads are made in <ref> [Al89, ABP92] </ref>; providing a full proof is routine, using ideas presented there.) Corollary 7.4 A language L is accepted by an unambiguous 1-LOGCFL machine iff there is a polynomial-size, polynomial-degree circuit generating L unambiguously.
Reference: [AG94] <author> E. Allender and V. Gore, </author> <title> A uniform circuit lower bound for the permanent, </title> <journal> SIAM J. Comput. </journal> <month> 23 </month> <year> (1994) </year> <month> 1026-1049. </month>
Reference-contexts: While the Opt classes consist of functions from fl to fl , the Boolean classes map fl to 6 It is observed in <ref> [AG94] </ref> that this polynomial can be implemented via uniform constant-depth circuits. 16 f0; 1g. <p> Languages classes characterized by one-way acceptors have been the subject of study in much previous work. Notably, 1-NLOG has been studied in depth in e.g. <ref> [HM81, Ag94] </ref>, and 1-way AuxPDAs in [Bra77].
Reference: [AH93] <author> E. Allender and U. Hertrampf, </author> <title> Depth reduction for circuits of unbounded fanin, </title> <note> Information and Computation 112 (1994) 217-238. </note>
Reference-contexts: Proof: First we need the following lemma, which follows directly from the results of [CRS93] and [IZ89]. (This improves earlier constructions in, for example, <ref> [VV86, To91, AH93, KVVY93] </ref>, which also showed how to simulate AND and OR by parity gates and ANDs of small fanin.
Reference: [AJ93a] <author> E. Allender and J. Jiao, </author> <title> Depth reduction for non-commutative arithmetic circuits, </title> <booktitle> in Proc. 25th Annual Symposium on Theory of Computing, </booktitle> <year> 1993, </year> <pages> pp. 515-522. </pages>
Reference-contexts: Now replace each AND by fi and each OR by +; the low-order bit of the answer is the answer we seek. The degree bound is easily seen to hold. 5 This improves a theorem of <ref> [AJ93a] </ref>, where a similar result for nonuniform circuits was proved. 13 uses O (log n) random bits.
Reference: [AJ92] <author> C. Alvarez and B. Jenner, </author> <title> A note on log space optimization, </title> <note> Computational Complexity 5 (1995) 155-166. </note>
Reference-contexts: However, this particular algebra is of interest for two reasons. * Concatenation is in some sense the canonical example of a non-commutative multipli cation operation. * Natural classes of optimization problems (in particular the classes OptL <ref> [AJ93, AJ92] </ref> and OptLOGCFL [Vi91]) can be characterized in terms of arithmetic circuits over (max,concat). It is important to note that we show only that over this algebra, arithmetic circuits of polynomial size and degree can be simulated by unbounded fanin circuits of logarithmic depth. <p> The analogous class OptL was defined in terms of logspace-bounded nondeterministic machines <ref> [AJ93, AJ92] </ref>. Vinay considered the analogous class defined in terms of LOGCFL machines. Since LOGCFL coincides with SAC 1 , he called this class OptSAC 1 . However, this notation is misleading, as will be illustrated in this section. So in this paper we refer to this class as OptLOGCFL. <p> optimizing function f belonging to a Boolean class of functions B in the following sense: f 2 B if the language L f = fhx; i; bi : the ith symbol of f (x) is bg is in B. 5.1 Relating Optimization Classes and (max,concat) Circuits It is shown in <ref> [AJ92] </ref> that OptL is contained in AC 1 (a later proof may be found in [ABP92]); it is also shown in [AJ92] that iterated matrix multiplication over ( fl ,max,concat) is complete for OptL. <p> L f = fhx; i; bi : the ith symbol of f (x) is bg is in B. 5.1 Relating Optimization Classes and (max,concat) Circuits It is shown in <ref> [AJ92] </ref> that OptL is contained in AC 1 (a later proof may be found in [ABP92]); it is also shown in [AJ92] that iterated matrix multiplication over ( fl ,max,concat) is complete for OptL.
Reference: [AJ93] <author> C. Alvarez and B. Jenner, </author> <title> A very hard log-space counting class, </title> <note> Theoretical Computer Science 107 (1993) 3-30. </note>
Reference-contexts: However, this particular algebra is of interest for two reasons. * Concatenation is in some sense the canonical example of a non-commutative multipli cation operation. * Natural classes of optimization problems (in particular the classes OptL <ref> [AJ93, AJ92] </ref> and OptLOGCFL [Vi91]) can be characterized in terms of arithmetic circuits over (max,concat). It is important to note that we show only that over this algebra, arithmetic circuits of polynomial size and degree can be simulated by unbounded fanin circuits of logarithmic depth. <p> The analogous class OptL was defined in terms of logspace-bounded nondeterministic machines <ref> [AJ93, AJ92] </ref>. Vinay considered the analogous class defined in terms of LOGCFL machines. Since LOGCFL coincides with SAC 1 , he called this class OptSAC 1 . However, this notation is misleading, as will be illustrated in this section. So in this paper we refer to this class as OptLOGCFL. <p> left-skew circuits have short-left-paths, it follows from Theorem 6.7 that all lan-guages in 1-NLOG have polynomial-size logarithmic-depth semi-unbounded generator circuits. (The reduced-depth circuit is no longer left-skew; in fact it is not even skew.) As an example of the computational power of left-skew circuits, we mention the by-now-standard example from <ref> [AJ93] </ref>: the set of all unsatisfying assignments of a 3SAT formula can be computed by the above circuits. This is because a 1-NLOG machine can recognize hF; ui, where u is an assignment that does not satisfy the 3SAT formula F . <p> skew [Ve92] LOGCFL (1) polynomial degree [Ru81] (2) logarithmic depth semi-unbounded (SAC 1 ) [Ve91] Counting Variant Arithmetic Circuits with + and fi gates #L skew #LOGCFL (1) polynomial degree [Vi91] (2) logarithmic depth semi-unbounded (#SAC 1 ) [Vi91] Optimization Variant Arithmetic Circuits with max and concat gates OptL skew <ref> [AJ93] </ref> R-OptLOGCFL (1) logarithmic depth semi-unbounded (OptSAC 1 ) (2) polynomial degree, short-left-paths (3) polynomial degree, short-right-paths OptLOGCFL polynomial degree Acknowledgments The first author thanks Shiyu Zhou and David Zuckerman for helpful discussions.
Reference: [AO94] <author> E. Allender and M. Ogihara, </author> <title> Relationships among PL, #L, and the determinant, </title> <booktitle> Proc. 9th IEEE Structure in Complexity Theory Conference, </booktitle> <year> 1994, </year> <pages> pp. 267-278. </pages>
Reference-contexts: Also, this class of functions is precisely the class computed by polynomial-size skew arithmetic circuits over the integers [To92]. For additional related results, see <ref> [AO94] </ref>. The question of the relationship between #L and #LOGCFL is thus exactly the question asked in [Va79], concerning the relationship between the determinant and circuits of polynomial size and degree.
Reference: [BCH86] <author> P. W. Beame, S. A. Cook, and H. J. </author> <title> Hoover, Log depth circuits for division and related problems, </title> <journal> SIAM J. Comput. </journal> <month> 15 </month> <year> (1986) </year> <month> 994-1003. </month>
Reference-contexts: Here, ffi is integer division, with the remainder discarded. Proof: Since unbounded-fanin +, and fi and ffi can be computed by TC 0 circuits [RT92], inclusion from right-to-left is straightforward. (This is true even for logspace-uniformity, since it follows from <ref> [BCH86] </ref> and [RT92] that division can be done in uniform TC 0 if the number N is given, where N is the product of the first n 2 primes.
Reference: [BT91] <author> R. Beigel and J. Tarui, </author> <booktitle> On ACC, Proc. 32nd FOCS (1991) 783-792. </booktitle>
Reference-contexts: The degree of this circuit is O (log n) O (log n) = n O (log log n) . 15 It remains to make the circuit deterministic. First we make use of the "Toda polynomials" introduced in [To91]. For example, there is an explicit construction in <ref> [BT91] </ref> of a polynomial P k of degree 2k 1 such that P k (y) mod 2 k = y mod 2. (A nice alternative construction is presented in [Ko94].) If we implement this polynomial in the obvious way 6 and apply it to the arithmetic circuit constructed in the preceding
Reference: [BFS92] <author> J. Boyar, G. Frandsen, and G. Sturtivant, </author> <title> An arithmetical model of computation equivalent to threshold circuits, </title> <note> Theoretical Computer Science 93 (1992) 303-319. </note>
Reference-contexts: We note that other (less trivial) connections between TC 0 and classes of arithmetic circuits over finite fields are also known <ref> [RT92, BFS92] </ref>. (See also [AAD97].) 2 That is, there is a logspace-computable g such that f (x) = determinant (g (x)). 12 In spite of Theorem 4.2, it is not known whether TC 1 or even AC 1 can be reduced to arithmetic circuits of polynomial size and degree (#SAC 1
Reference: [Bra77] <author> F.-J. Brandenberg, </author> <title> On one-way auxiliary pushdown automata, </title> <booktitle> In Proc. 3rd GI Conference, Lecture notes in Computer Science 48 Springer-Verlag, </booktitle> <year> 1977. </year> <pages> pp. 133-144. </pages>
Reference-contexts: Languages classes characterized by one-way acceptors have been the subject of study in much previous work. Notably, 1-NLOG has been studied in depth in e.g. [HM81, Ag94], and 1-way AuxPDAs in <ref> [Bra77] </ref>.
Reference: [Bur96] <author> H. J. </author> <month> Burtschick, </month> <institution> Berechnungs- und Beschreibunskomplexitat von Zahlfunctionen und Lindstromquantoren, Doctoral Dissertation, Technische Universitat Berlin, </institution> <year> 1996. </year>
Reference-contexts: This statement is erroneous. 43 Theorem 7.11 The class of languages generated unambiguously by polynomial-size clone--skew circuits is strictly contained in the class of languages generated by polynomial-size clone-skew circuits. Burtshick <ref> [Bur96] </ref> credits Dietzfelbinger with pointing out that the technique of [MS82] can be used to show that 1-ULOG is properly contained in 1-NLOG. (This was treated as an open question in [AJ93][Theorem 4.16].) Theorem 7.11 is only a slight generalization of this result, and the proof we have presented is quite <p> out that the technique of [MS82] can be used to show that 1-ULOG is properly contained in 1-NLOG. (This was treated as an open question in [AJ93][Theorem 4.16].) Theorem 7.11 is only a slight generalization of this result, and the proof we have presented is quite similar to that in <ref> [Bur96] </ref>. In contrast it does not seem to be known if unambiguous 1-LOGCFL or 1-AuxPDA machines are less powerful than the unrestricted versions of these machines.
Reference: [CRS93] <author> S. Chari, P. Rohatgi, and A. Srinivasan, </author> <title> Randomness-optimal unique element isolation, with applications to perfect matching and related problems, </title> <booktitle> Proc. 25th STOC (1993) 458-467. </booktitle> <pages> 47 </pages>
Reference-contexts: Proof: First we need the following lemma, which follows directly from the results of <ref> [CRS93] </ref> and [IZ89]. (This improves earlier constructions in, for example, [VV86, To91, AH93, KVVY93], which also showed how to simulate AND and OR by parity gates and ANDs of small fanin. It would also be possible to use constructions by [NRS94] or [Gu95], instead of the construction of [CRS93].) Lemma 4.4 <p> results of <ref> [CRS93] </ref> and [IZ89]. (This improves earlier constructions in, for example, [VV86, To91, AH93, KVVY93], which also showed how to simulate AND and OR by parity gates and ANDs of small fanin. It would also be possible to use constructions by [NRS94] or [Gu95], instead of the construction of [CRS93].) Lemma 4.4 For each l 2 N, there is a family of constant-depth, polynomial-size, probabilistic circuits consisting of unbounded-fanin PARITY gates, AND gates of fanin O (log n), and O (log n) probabilistic bits, computing the OR of n bits, with error probability &lt; 1=n l . <p> Proof: To see why the claim is true, first observe that the construction in <ref> [CRS93] </ref> gives a depth 5 probabilistic circuit that computes the NOR correctly with probability at least 1 2 and 3 In this context, when we say that a complexity class can be "reduced to" a class of functions, we mean that for every language A in the complexity class, there is <p> The degree bound is easily seen to hold. 5 This improves a theorem of [AJ93a], where a similar result for nonuniform circuits was proved. 13 uses O (log n) random bits. More precisely, using the terminology of <ref> [CRS93] </ref>, let m = dlog ne, let S = f1; : : : ; mg, and let F be the collection of subsets of S, such that A 2 F iff the bit string k of length m = dlog ne representing the characteristic sequence of A corresponds to a binary <p> That is, the OR of x 1 ; : : : ; x n evaluates to 1 iff F is not empty. The strategy of <ref> [CRS93] </ref> is to use probabilistic bits to define a way of assigning a "weight" to each set A k 2 F so that if F is not empty, then with high probability there is a unique element of F having minimum weight. The next paragraph explains how this is done. <p> Finally, define w i to be equal to P t1 j=0 b i;j r j . The weight of a set A is then P i2A w i . The analysis in Proposition 2 of <ref> [CRS93] </ref> shows that if F is not empty, then with probability at least .99, there is a unique minimal weight set in F . This paragraph explains how to implement this system as a uniform constant-depth circuit.
Reference: [Co71] <author> S. Cook, </author> <title> Characterization of pushdown machines in terms of time-bounded com-puters, </title> <journal> J. </journal> <note> ACM 18 (1971) 4-18. </note>
Reference-contexts: For the original definitions of "surface configuration" and "realizable pair," see <ref> [Co71] </ref>. Further details (standard notation and definitions) about LOGCFL may be found in [Co71, Ve91, Vi91]. 3 Depth Reduction in Commutative Rings It is known [VSBR83, MRK88] that polynomial-degree polynomial-size circuits over any commutative semi-ring have equivalent logarithmic-depth semi-unbounded-fanin polynomial-size circuits. <p> For the original definitions of "surface configuration" and "realizable pair," see [Co71]. Further details (standard notation and definitions) about LOGCFL may be found in <ref> [Co71, Ve91, Vi91] </ref>. 3 Depth Reduction in Commutative Rings It is known [VSBR83, MRK88] that polynomial-degree polynomial-size circuits over any commutative semi-ring have equivalent logarithmic-depth semi-unbounded-fanin polynomial-size circuits. However, the argument provided in [VSBR83] requires that the degree of each gate be known a priori.
Reference: [Da91] <author> C. Damm, </author> <title> DET = L #L ?, Informatik-Preprint 8, </title> <institution> Fachbereich Informatik der Humboldt-Universitat zu Berlin, </institution> <year> 1991. </year>
Reference-contexts: More specifically, f is logspace many-one reducible to the determinant 2 iff it is the difference of two #L functions (see <ref> [Vi91a, Da91, To91a] </ref>; an essentially equivalent result is also proved in [Va92, Theorem 2]). Also, this class of functions is precisely the class computed by polynomial-size skew arithmetic circuits over the integers [To92]. For additional related results, see [AO94].
Reference: [GG79] <author> O. Gabber and Z. Galil, </author> <title> Explicit constructions of linear size superconcentrators, </title> <booktitle> Proc. 20th FOCS (1979) 364-370. </booktitle>
Reference-contexts: Consider a graph with vertices for each of our O (log n)-bit probabilistic sequences, the edge relation is given by the construction of an expander graph presented in <ref> [GG79] </ref>, where each vertex has degree five. Inspection of [GG79] shows that there is a uniform circuit of PARITY gates and small-fanin AND gates of polynomial size and constant depth that takes as input one of our original probabilistic sequences r as well as a new probabilistic sequence s 2 f1; <p> Consider a graph with vertices for each of our O (log n)-bit probabilistic sequences, the edge relation is given by the construction of an expander graph presented in <ref> [GG79] </ref>, where each vertex has degree five. Inspection of [GG79] shows that there is a uniform circuit of PARITY gates and small-fanin AND gates of polynomial size and constant depth that takes as input one of our original probabilistic sequences r as well as a new probabilistic sequence s 2 f1; 2; 3; 4; 5g cl log n (for some
Reference: [Gu95] <author> S. Gupta, </author> <title> Isolating an odd number of elements and applications in complexity theory, </title> <note> to appear in Theory of Computing Systems (formerly Mathematical Systems Theory). </note>
Reference-contexts: It would also be possible to use constructions by [NRS94] or <ref> [Gu95] </ref>, instead of the construction of [CRS93].) Lemma 4.4 For each l 2 N, there is a family of constant-depth, polynomial-size, probabilistic circuits consisting of unbounded-fanin PARITY gates, AND gates of fanin O (log n), and O (log n) probabilistic bits, computing the OR of n bits, with error probability &lt;
Reference: [HM81] <author> J. Hartmanis and S. Mahaney, </author> <title> Languages simultaneously complete for one-way and two-way log-tape automata, </title> <journal> SIAM J. Comput. </journal> <month> 10 </month> <year> (1981) </year> <month> 383-390. </month>
Reference-contexts: Languages classes characterized by one-way acceptors have been the subject of study in much previous work. Notably, 1-NLOG has been studied in depth in e.g. <ref> [HM81, Ag94] </ref>, and 1-way AuxPDAs in [Bra77].
Reference: [Hu91] <author> D. Huynh, </author> <title> Efficient detectors and constructors for simple languages, </title> <note> Mathematical Systems Theory 23 (1991) 1-20. </note>
Reference-contexts: Note, however, that Huynh has shown that if all 1-LOGCFL languages (or even all 1-NLOG languages) are accepted by unambiguous 1-AuxPDA machines, then P = PP <ref> [Hu91] </ref>. It is not true in general that non-linear context-free languages require large skew circuits. For instance, let L 3 be the Dyck language of balanced parentheses, where 0 (1) is interpreted as an opening (closing) parenthesis.
Reference: [IL95] <author> Neil Immerman and Susan Landau, </author> <title> The Complexity of Iterated Multiplication, </title> <booktitle> Information and Computation 116, </booktitle> <year> (1995), </year> <pages> 103-116. </pages>
Reference-contexts: For additional related results, see [AO94]. The question of the relationship between #L and #LOGCFL is thus exactly the question asked in [Va79], concerning the relationship between the determinant and circuits of polynomial size and degree. It is worth mentioning that Immerman and Landau <ref> [IL95] </ref> have conjectured that TC 1 is exactly the class of sets reducible to #SAC 1 ; in fact they make the stronger conjecture that computing the determinant is hard for TC 1 .
Reference: [IZ89] <author> R. Impagliazzo and D. Zuckerman, </author> <title> How to recycle random bits, </title> <booktitle> Proc. 30th FOCS (1989) 248-253. </booktitle>
Reference-contexts: Proof: First we need the following lemma, which follows directly from the results of [CRS93] and <ref> [IZ89] </ref>. (This improves earlier constructions in, for example, [VV86, To91, AH93, KVVY93], which also showed how to simulate AND and OR by parity gates and ANDs of small fanin. <p> Thus we can construct a constant-depth circuit that computes the AND for all i cl log n of C (x; R (r; s [1::i])) (where s [1::i] denotes the prefix of s of length i, where r and s are probabilistically chosen. By Section 2 of <ref> [IZ89] </ref>, this circuit computes the NOR correctly with probability 1 1 n l . Adding a PARITY gate at the root allows us to compute the OR, as desired. This completes the proof of the lemma.
Reference: [Je93] <author> B. Jenner, </author> <type> personal communication. </type>
Reference-contexts: As was pointed out by Jenner <ref> [Je93] </ref>, it is not hard to use the techniques of [Ve92, To92] to show: Proposition 5.1 OptL is the class of functions computed by uniform families of left-skew arithmetic circuits over ( fl ; max,concat).
Reference: [JS82] <author> M. Jerrum and M. Snir, </author> <title> Some exact complexity results for straight-line computations over semirings, </title> <journal> J. </journal> <note> ACM 29 (1982) 874-897. </note>
Reference-contexts: gives us some intuition in choosing candidate languages to exhibit the limitations and the power of clone-skew circuits. 2 Preliminaries A semiring is an algebra over a set S with two operations +; fi satisfying the usual ring axioms, but not necessarily having additive inverses. (For more formal definitions see <ref> [JS82] </ref>.) There is an additive identity denoted ? and a multiplicative identity denoted (At times it will be more convenient to denote ? by 0, and to denote by 1.
Reference: [KVVY93] <author> R. Kannan, H. Venkateswaran, V. Vinay, and A. Yao, </author> <title> A circuit-based proof of Toda's theorem, </title> <note> Information and Computation 104 (1993) 271-276. </note>
Reference-contexts: Proof: First we need the following lemma, which follows directly from the results of [CRS93] and [IZ89]. (This improves earlier constructions in, for example, <ref> [VV86, To91, AH93, KVVY93] </ref>, which also showed how to simulate AND and OR by parity gates and ANDs of small fanin.
Reference: [Ko94] <author> J. Kobler, </author> <title> Extension of Toda's theorem to middle bit classes, </title> <booktitle> Proc. Workshop on Algebraic Methods in Complexity Theory (AMCoT), </booktitle> <month> December 11-13, </month> <year> 1994, </year> <institution> Institute of Mathematical Sciences, </institution> <type> Madras (Technical Report IMSc-94/51). 48 </type>
Reference-contexts: First we make use of the "Toda polynomials" introduced in [To91]. For example, there is an explicit construction in [BT91] of a polynomial P k of degree 2k 1 such that P k (y) mod 2 k = y mod 2. (A nice alternative construction is presented in <ref> [Ko94] </ref>.) If we implement this polynomial in the obvious way 6 and apply it to the arithmetic circuit constructed in the preceding paragraph, we obtain an arithmetic circuit of degree n O (log log n) and polynomial size, whose low order bit is the same as the output of the original
Reference: [Ko90] <author> S. R. Kosaraju, </author> <title> On the parallel evaluation of classes of circuits, </title> <booktitle> Proc. 10th FST&TCS, Lecture Notes in Computer Science 472 (1990) 232-237. </booktitle>
Reference-contexts: Motivated by this question, <ref> [Ko90] </ref> and [Ni91] showed that commutativity is crucial for the results of [VSBR83, MRK88]. <p> Motivated by this question, [Ko90] and [Ni91] showed that commutativity is crucial for the results of [VSBR83, MRK88]. Namely, it was shown in <ref> [Ko90, Theorem 1] </ref> that for the particular semiring over 2 fl with fi denoting set concatenation and + denoting union, there is a circuit with linear size and degree that is not equivalent to any circuit with sublinear depth. An essentially equivalent example is presented in [Ni91, Theorem 4]. <p> We investigate below the extent to which OptLOGCFL itself can be characterized in terms of circuits of small depth. No parallel algorithm for OptLOGCFL is presented in [Vi91a], and in fact this is explicitly listed as an open problem there; instead, attention is drawn to the negative results of <ref> [Ni91, Ko90] </ref> showing that depth reduction is not possible in general for non-commutative semirings. 5.2 Depth Reduction for (max,concat) Circuits In this section we show that (max,concat) circuits of polynomial size and degree can be simulated by (max,concat) circuits of polynomial size and logarithmic depth, when unbounded-fanin gates are allowed. <p> In the non-commutative case, we know of one semi-ring where this holds (the (max,concat) circuits, described in Section 5), and another where it does not (the (union,concat) circuit lower bounds from <ref> [Ko90, Ni91] </ref>; see Section 7). Where exactly does the proof of Theorem 3.1 break down in this setting? Let us say that a circuit is "right-lopsided" if at each fi gate, the degree of the left child does not exceed the degree of the right child. <p> Polynomial-size circuits of polynomial degree, with short-right-paths. 3. Polynomial-size semi-unbounded circuits of logarithmic depth. 22 (In particular, for left-skew or right-skew circuits, depth reduction is always possible. This cannot be extended to skew circuits, since the linear depth lower bound given by <ref> [Ko90, Ni91] </ref> is for a function with skew circuits.) The rest of this section is devoted to proving the above theorem. It is easy to see that for circuits of polynomial degree, right-lopsidedness implies short-left-paths, and left-lopsidedness implies short-right-paths. <p> In both cases, the equivalent depth-reduced circuits are nonuniform. This result cannot be further improved to circuits which have linear intertwining but sub-linear depth, because, referring back to the function cited in <ref> [Ko90, Ni91] </ref>, the corresponding skew circuit has O (n) intertwining depth. 33 6.4 A New Optimization Class and its Circuit Characterization Consider a restricted version of OptLOGCFL, where the underlying AuxPDA transducer's pushdown height is bounded by O (log n). (Recall that each stack symbol is assumed to be O (log <p> The reason we are interested in (union,concat) generators is that the only explicit depth lower bounds known for non-commutative computation have been shown for such generators <ref> [Ko90, Ni91] </ref>. In particular, in [Ko90] and [Ni91] it is shown that the language L 1 = fww R jw 2 f0; 1g fl g has no sub-linear-depth generator of any size. <p> The reason we are interested in (union,concat) generators is that the only explicit depth lower bounds known for non-commutative computation have been shown for such generators [Ko90, Ni91]. In particular, in <ref> [Ko90] </ref> and [Ni91] it is shown that the language L 1 = fww R jw 2 f0; 1g fl g has no sub-linear-depth generator of any size.
Reference: [Kr88] <author> M. Krentel, </author> <title> The complexity of optimization problems, </title> <note> JCSS 36 (1988) 490-509. </note>
Reference-contexts: Note that the bit c log n positions to the left of the low-order bit is exactly the majority vote of these circuits, and thus is equal to the output of the original circuit. 5 Optimization Classes The class OptP was defined by Krentel <ref> [Kr88] </ref> as the class of functions that can be defined as f (x) = maxfy : there is some path of M that outputs y on input xg, where M is a nondeterministic polynomial-time Turing machine. The analogous class OptL was defined in terms of logspace-bounded nondeterministic machines [AJ93, AJ92].
Reference: [MRK88] <author> G. Miller, V. Ramachandran, and E. Kaltofen, </author> <title> Efficient parallel evaluation of straight-line code and arithmetic circuits, </title> <journal> SIAM J. Comput. </journal> <month> 17 </month> <year> (1988) </year> <month> 687-695. </month>
Reference-contexts: The results of [VSBR83] were extended in <ref> [MRK88] </ref> by providing fast parallel algorithms for evaluating arithmetic circuits. However, these algorithms involve a component that is hard for NLOG, so no logspace uniform construction was known. One of the first uniform depth reductions was shown in [Ve91] (improving [Ru81]) for the Boolean ring. <p> show what can be viewed as essentially a degree-reduction result: every function in AC 1 can be reduced to a function computed by a polynomial-size arithmetic circuit of degree n O (log log n) over the natural numbers, improving the trivial degree upper bound of n O (log n) . <ref> [MRK88] </ref> also raised the question of whether analogous results could be proved in the presence of non-commutative multiplication. Motivated by this question, [Ko90] and [Ni91] showed that commutativity is crucial for the results of [VSBR83, MRK88]. <p> Motivated by this question, [Ko90] and [Ni91] showed that commutativity is crucial for the results of <ref> [VSBR83, MRK88] </ref>. Namely, it was shown in [Ko90, Theorem 1] that for the particular semiring over 2 fl with fi denoting set concatenation and + denoting union, there is a circuit with linear size and degree that is not equivalent to any circuit with sublinear depth. <p> For the original definitions of "surface configuration" and "realizable pair," see [Co71]. Further details (standard notation and definitions) about LOGCFL may be found in [Co71, Ve91, Vi91]. 3 Depth Reduction in Commutative Rings It is known <ref> [VSBR83, MRK88] </ref> that polynomial-degree polynomial-size circuits over any commutative semi-ring have equivalent logarithmic-depth semi-unbounded-fanin polynomial-size circuits. However, the argument provided in [VSBR83] requires that the degree of each gate be known a priori. <p> However, the argument provided in [VSBR83] requires that the degree of each gate be known a priori. Although this can be computed quickly in parallel <ref> [MRK88] </ref>, it is easy to see that this is hard for NLOG, and thus cannot be assumed in the logspace-uniform circuit model. For the particular case of the Boolean ring, a uniform depth-reduction result is proved in [Ve91], and for the integers it is proved in [Vi91]. <p> Although we feel that a proof in this vein is instructive, the proof given below is extremely simple, and is very similar to the argument in [ABP92]. Further, the proof we give here explicitly uses the algorithm from <ref> [MRK88] </ref> to construct individual bits of the output; it thus follows from this construction (Lemma 5.5) that OptLOGCFL is in AC 1 . <p> We then build an equivalent circuit over the (commutative) semiring (Z,max,plus), and evaluate this circuit using the <ref> [MRK88] </ref> algorithm (which in this setting can be implemented in AC 1 ). This is described in Lemma 5.5. Finally, we turn this AC 1 algorithm into a family of arithmetic circuits. <p> It is now easy to observe that the output of C 0 is the number whose binary representation is the value of the output gate of C. The individual bits of the output of circuit C 0 can be evaluated using the algorithm of <ref> [MRK88] </ref>, which consists of O (log n) applications of a routine called Phase. A single application of Phase consists of matrix multiplication over (Z,max,plus), and hence can be 7 Formally, it is necessary to include the element ? = 1 in order to make this structure a semiring.
Reference: [MT87] <author> G. Miller and S.-H. Teng, </author> <title> Dynamic parallel complexity of computational circuits, </title> <booktitle> Proc. 19th STOC (1987) 478-489. </booktitle>
Reference-contexts: An essentially equivalent example is presented in [Ni91, Theorem 4]. Although fast parallel algorithms were shown for certain 1 limited sorts of non-commutative algebras (e.g., finite semirings) in <ref> [MT87] </ref>, no examples were known of non-commutative semirings where depth reduction can be accomplished within the arithmetic circuit model.
Reference: [MV94] <author> M. Mahajan and V Vinay, </author> <title> Non-commutative computation, depth reduction and skew circuits, </title> <booktitle> Proc. 14th FST&TCS, Lecture Notes in Computer Science 880 (1994) 48-59. </booktitle>
Reference-contexts: Thus each configuration is either a Read configuration or a Move configuration. We further assume that Read configurations are deterministic. 8 These results improve results of <ref> [MV94] </ref>, where a one-way containment for deterministic and nondeterministic acceptors was shown. 36 The circuit C n has gates labeled by the possible configurations of M on inputs of length n; there are polynomially many of them. <p> The proposition now follows from Lemma 7.1. (All words of odd length are accepted.) Thus unambiguity is a proper restriction: 9 In <ref> [MV94] </ref>, Lemma 17 claims that L 2 also has polynomial-size non-skew unambiguous circuits. This statement is erroneous. 43 Theorem 7.11 The class of languages generated unambiguously by polynomial-size clone--skew circuits is strictly contained in the class of languages generated by polynomial-size clone-skew circuits.
Reference: [MS82] <author> K. Mehlhorn and E. Schmidt. </author> <title> Las Vegas is better than determinism in VLSI and distributed computing, </title> <booktitle> Proc. 14th STOC (1982) 330-337. </booktitle>
Reference-contexts: This statement is erroneous. 43 Theorem 7.11 The class of languages generated unambiguously by polynomial-size clone--skew circuits is strictly contained in the class of languages generated by polynomial-size clone-skew circuits. Burtshick [Bur96] credits Dietzfelbinger with pointing out that the technique of <ref> [MS82] </ref> can be used to show that 1-ULOG is properly contained in 1-NLOG. (This was treated as an open question in [AJ93][Theorem 4.16].) Theorem 7.11 is only a slight generalization of this result, and the proof we have presented is quite similar to that in [Bur96].
Reference: [NRS94] <author> A. Naik, K. Regan, and D. Sivakumar, </author> <title> Quasilinear time complexity theory, </title> <booktitle> Proc. 11th STACS, Lecture Notes in Computer Science 778 (1994) 289-300. </booktitle>
Reference-contexts: It would also be possible to use constructions by <ref> [NRS94] </ref> or [Gu95], instead of the construction of [CRS93].) Lemma 4.4 For each l 2 N, there is a family of constant-depth, polynomial-size, probabilistic circuits consisting of unbounded-fanin PARITY gates, AND gates of fanin O (log n), and O (log n) probabilistic bits, computing the OR of n bits, with error
Reference: [NR95] <author> R. Niedermeier and P. Rossmanith, </author> <title> Unambiguous auxiliary pushdown automata and semi-unbounded fanin circuits, </title> <note> Information and computation 118 (1995) 227-245. </note>
Reference-contexts: The proof crucially uses the fact that the given circuit may be simulated by a LOGCFL machine with small pushdown height. For further work in this direction, see <ref> [NR95] </ref>. In Section 3, we build on these techniques, to give a direct uniform depth reduction result over any commutative semi-ring, while staying within the circuit model. We show that any polynomial-size polynomial-degree circuit has an equivalent polynomial-size semi-unbounded logarithmic-depth circuit.
Reference: [Ni91] <author> N. Nisan, </author> <title> Lower bounds for non-commutative computation, </title> <booktitle> Proc. 23rd STOC (1991) 410-418. </booktitle>
Reference-contexts: Motivated by this question, [Ko90] and <ref> [Ni91] </ref> showed that commutativity is crucial for the results of [VSBR83, MRK88]. <p> An essentially equivalent example is presented in <ref> [Ni91, Theorem 4] </ref>. Although fast parallel algorithms were shown for certain 1 limited sorts of non-commutative algebras (e.g., finite semirings) in [MT87], no examples were known of non-commutative semirings where depth reduction can be accomplished within the arithmetic circuit model. <p> Skew circuits have been used to characterize NLOG [Ve92] as well as the complexity of the determinant [To92]. In <ref> [Ni91] </ref>, Nisan shows lower bounds on the size of left-skew circuits generating certain languages. (The lower bounds are proved for size of algebraic branching programs; it is easy to see that these programs correspond exactly to left-skew circuits.) However, there is no corresponding lower bound on circuit size, or even on <p> We investigate below the extent to which OptLOGCFL itself can be characterized in terms of circuits of small depth. No parallel algorithm for OptLOGCFL is presented in [Vi91a], and in fact this is explicitly listed as an open problem there; instead, attention is drawn to the negative results of <ref> [Ni91, Ko90] </ref> showing that depth reduction is not possible in general for non-commutative semirings. 5.2 Depth Reduction for (max,concat) Circuits In this section we show that (max,concat) circuits of polynomial size and degree can be simulated by (max,concat) circuits of polynomial size and logarithmic depth, when unbounded-fanin gates are allowed. <p> In the non-commutative case, we know of one semi-ring where this holds (the (max,concat) circuits, described in Section 5), and another where it does not (the (union,concat) circuit lower bounds from <ref> [Ko90, Ni91] </ref>; see Section 7). Where exactly does the proof of Theorem 3.1 break down in this setting? Let us say that a circuit is "right-lopsided" if at each fi gate, the degree of the left child does not exceed the degree of the right child. <p> Polynomial-size circuits of polynomial degree, with short-right-paths. 3. Polynomial-size semi-unbounded circuits of logarithmic depth. 22 (In particular, for left-skew or right-skew circuits, depth reduction is always possible. This cannot be extended to skew circuits, since the linear depth lower bound given by <ref> [Ko90, Ni91] </ref> is for a function with skew circuits.) The rest of this section is devoted to proving the above theorem. It is easy to see that for circuits of polynomial degree, right-lopsidedness implies short-left-paths, and left-lopsidedness implies short-right-paths. <p> In both cases, the equivalent depth-reduced circuits are nonuniform. This result cannot be further improved to circuits which have linear intertwining but sub-linear depth, because, referring back to the function cited in <ref> [Ko90, Ni91] </ref>, the corresponding skew circuit has O (n) intertwining depth. 33 6.4 A New Optimization Class and its Circuit Characterization Consider a restricted version of OptLOGCFL, where the underlying AuxPDA transducer's pushdown height is bounded by O (log n). (Recall that each stack symbol is assumed to be O (log <p> The reason we are interested in (union,concat) generators is that the only explicit depth lower bounds known for non-commutative computation have been shown for such generators <ref> [Ko90, Ni91] </ref>. In particular, in [Ko90] and [Ni91] it is shown that the language L 1 = fww R jw 2 f0; 1g fl g has no sub-linear-depth generator of any size. <p> The reason we are interested in (union,concat) generators is that the only explicit depth lower bounds known for non-commutative computation have been shown for such generators [Ko90, Ni91]. In particular, in [Ko90] and <ref> [Ni91] </ref> it is shown that the language L 1 = fww R jw 2 f0; 1g fl g has no sub-linear-depth generator of any size. <p> Given u and v as above, and sequence , we can splice u and v together to correctly construct m. Let us denote this by (u; v) = m. The results in this section extend Nisan's results on non-commutative computation <ref> [Ni91] </ref>, and thus it is necessary to express his framework using the circuit models we have used thus far in this paper. Nisan's work is motivated by the desire to understand the extent to which efficient computation of the permanent and determinant rely on commutativity. <p> Now we follow notation and definitions from <ref> [Ni91] </ref>. Definition 7.5 ([Ni91]) An Algebraic Branching Program (ABP) is a directed acyclic graph with one source and one sink. <p> Matrix M k; (f ) has rows indexed by monomials of degree k, and columns indexed by monomials of degree n k. The entry at hu; vi is the coefficient of the monomial (u; v) in f . The following lemma is an easy extension of Theorem 1 from <ref> [Ni91] </ref>. Lemma 7.6 The size of the smallest -clone-skew circuit generating L " n unambiguously is exactly n k=0 rank (M k; (f L )). It is worthwhile observing that we can strengthen Lemma 7.6 slightly by deleting the word "unambiguously". <p> Theorem 7.8 The class of languages generated unambiguously by left-skew circuits is strictly contained in the class of languages generated unambiguously by clone-skew circuits. 42 Proof: Consider the language L 1 = n o . In <ref> [Ni91, Theorem 4.2] </ref> it is shown that any left-skew circuit generating L 1 unambiguously must have exponential size. However it is easy to see that for = LRLRLR: : :, there is a linear size -clone-skew circuit generating L 1 . <p> For instance, let L 3 be the Dyck language of balanced parentheses, where 0 (1) is interpreted as an opening (closing) parenthesis. This set is easily seen to be in 1-DLOG, and thus has polynomial-size unambiguous left-skew circuits. 7.3 A Lower Bound for General Skew Circuits Lemma 2 of <ref> [Ni91] </ref> indicates that computing the permanent or determinant in a noncommutative setting via left-skew circuits requires at least exponential size. We show that this lower bound holds even if arbitrary skew circuits are allowed. <p> Consider any skew circuit computing the permanent. By treating the gates as commutative gates, the circuit can trivially be converted into a left-skew circuit of the same size. The function computed by such a circuit is clearly weakly equivalent to the permanent. By 44 Theorem 2 of <ref> [Ni91] </ref>, any function weakly equivalent to the permanent has exponential size. 8 Conclusions A large literature already exists, studying many aspects of arithmetic circuit complexity.
Reference: [RT92] <author> J. Reif and S. Tate, </author> <title> On threshold circuits and polynomial computation, </title> <journal> SIAM J. Comput. </journal> <month> 21 </month> <year> (1992) </year> <month> 896-908. </month>
Reference-contexts: Here, ffi is integer division, with the remainder discarded. Proof: Since unbounded-fanin +, and fi and ffi can be computed by TC 0 circuits <ref> [RT92] </ref>, inclusion from right-to-left is straightforward. (This is true even for logspace-uniformity, since it follows from [BCH86] and [RT92] that division can be done in uniform TC 0 if the number N is given, where N is the product of the first n 2 primes. <p> Here, ffi is integer division, with the remainder discarded. Proof: Since unbounded-fanin +, and fi and ffi can be computed by TC 0 circuits <ref> [RT92] </ref>, inclusion from right-to-left is straightforward. (This is true even for logspace-uniformity, since it follows from [BCH86] and [RT92] that division can be done in uniform TC 0 if the number N is given, where N is the product of the first n 2 primes. <p> We note that other (less trivial) connections between TC 0 and classes of arithmetic circuits over finite fields are also known <ref> [RT92, BFS92] </ref>. (See also [AAD97].) 2 That is, there is a logspace-computable g such that f (x) = determinant (g (x)). 12 In spite of Theorem 4.2, it is not known whether TC 1 or even AC 1 can be reduced to arithmetic circuits of polynomial size and degree (#SAC 1
Reference: [Ru81] <author> W. Ruzzo, </author> <title> On Uniform Circuit Complexity, </title> <journal> J. Comput. and System Sci. </journal> <month> 21 </month> <year> (1981) </year> <month> 365-383. </month>
Reference-contexts: The results of [VSBR83] were extended in [MRK88] by providing fast parallel algorithms for evaluating arithmetic circuits. However, these algorithms involve a component that is hard for NLOG, so no logspace uniform construction was known. One of the first uniform depth reductions was shown in [Ve91] (improving <ref> [Ru81] </ref>) for the Boolean ring. Vinay [Vi91] showed a similar result for circuits over integers, by using LOGCFL machines (that is, AuxPDA's running in polynomial time and logarithmic space [Su78]) to achieve depth reduction. <p> In the table below, we tabulate the known characterizations of some important classes. All circuits referred to here are of polynomial size. OptLOGCFL is contained in AC 1 ; #LOGCFL is contained in TC 1 . 45 Language Class Boolean Circuits NLOG skew [Ve92] LOGCFL (1) polynomial degree <ref> [Ru81] </ref> (2) logarithmic depth semi-unbounded (SAC 1 ) [Ve91] Counting Variant Arithmetic Circuits with + and fi gates #L skew #LOGCFL (1) polynomial degree [Vi91] (2) logarithmic depth semi-unbounded (#SAC 1 ) [Vi91] Optimization Variant Arithmetic Circuits with max and concat gates OptL skew [AJ93] R-OptLOGCFL (1) logarithmic depth semi-unbounded (OptSAC
Reference: [Su78] <author> I. H. Sudborough, </author> <title> On the tape complexity of deterministic context-free languages, </title> <journal> J. </journal> <note> ACM 25 (1978) 405-414. 49 </note>
Reference-contexts: One of the first uniform depth reductions was shown in [Ve91] (improving [Ru81]) for the Boolean ring. Vinay [Vi91] showed a similar result for circuits over integers, by using LOGCFL machines (that is, AuxPDA's running in polynomial time and logarithmic space <ref> [Su78] </ref>) to achieve depth reduction. The proof crucially uses the fact that the given circuit may be simulated by a LOGCFL machine with small pushdown height. For further work in this direction, see [NR95]. <p> LOGCFL is equal to SAC 1 [Ve91]. Another equivalent characterization of LOGCFL is as the class languages accepted by nondeterministic logspace-bounded auxiliary pushdown automata (AuxPDAs) running in polynomial time <ref> [Su78] </ref>.
Reference: [To91] <author> S. Toda, </author> <note> PP is as hard as the polynomial-time hierarchy SIAM J. Comput. 20 (1991) 865-877. </note>
Reference-contexts: Proof: First we need the following lemma, which follows directly from the results of [CRS93] and [IZ89]. (This improves earlier constructions in, for example, <ref> [VV86, To91, AH93, KVVY93] </ref>, which also showed how to simulate AND and OR by parity gates and ANDs of small fanin. <p> The degree of this circuit is O (log n) O (log n) = n O (log log n) . 15 It remains to make the circuit deterministic. First we make use of the "Toda polynomials" introduced in <ref> [To91] </ref>.
Reference: [To91a] <author> S. </author> <title> Toda, Counting problems computationally equivalent to the determinant, </title> <type> manuscript. </type>
Reference-contexts: More specifically, f is logspace many-one reducible to the determinant 2 iff it is the difference of two #L functions (see <ref> [Vi91a, Da91, To91a] </ref>; an essentially equivalent result is also proved in [Va92, Theorem 2]). Also, this class of functions is precisely the class computed by polynomial-size skew arithmetic circuits over the integers [To92]. For additional related results, see [AO94].
Reference: [To92] <author> S. </author> <title> Toda, Classes of arithmetic circuits capturing the complexity of computing the determinant, </title> <journal> IEICE Trans. Inf. and Syst., </journal> <volume> vol. </volume> <month> E75-D </month> <year> (1992) </year> <month> 116-124. </month>
Reference-contexts: Skew circuits have been used to characterize NLOG [Ve92] as well as the complexity of the determinant <ref> [To92] </ref>. <p> Also, this class of functions is precisely the class computed by polynomial-size skew arithmetic circuits over the integers <ref> [To92] </ref>. For additional related results, see [AO94]. The question of the relationship between #L and #LOGCFL is thus exactly the question asked in [Va79], concerning the relationship between the determinant and circuits of polynomial size and degree. <p> As was pointed out by Jenner [Je93], it is not hard to use the techniques of <ref> [Ve92, To92] </ref> to show: Proposition 5.1 OptL is the class of functions computed by uniform families of left-skew arithmetic circuits over ( fl ; max,concat). In [Vi91] it was claimed that OptLOGCFL coincides with OptSAC 1 , but this claim was later retracted [Vi91a].
Reference: [Va79] <author> L. Valiant, </author> <title> Completeness classes in algebra, </title> <booktitle> Proc. 11th STOC (1979) 249-261. </booktitle>
Reference-contexts: Also, this class of functions is precisely the class computed by polynomial-size skew arithmetic circuits over the integers [To92]. For additional related results, see [AO94]. The question of the relationship between #L and #LOGCFL is thus exactly the question asked in <ref> [Va79] </ref>, concerning the relationship between the determinant and circuits of polynomial size and degree.
Reference: [Va92] <author> L. Valiant, </author> <title> Why is Boolean complexity theory difficult? in Boolean Function Complexity, edited by M. </title> <editor> S. Paterson, </editor> <booktitle> London Mathematical Society Lecture Notes Series 169, </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: More specifically, f is logspace many-one reducible to the determinant 2 iff it is the difference of two #L functions (see [Vi91a, Da91, To91a]; an essentially equivalent result is also proved in <ref> [Va92, Theorem 2] </ref>). Also, this class of functions is precisely the class computed by polynomial-size skew arithmetic circuits over the integers [To92]. For additional related results, see [AO94].
Reference: [VSBR83] <author> L. Valiant, S. Skyum, S. Berkowitz, and C. Rackoff, </author> <title> Fast parallel computation of polynomials using few processors, </title> <journal> SIAM J. Comput. </journal> <month> 12 </month> <year> (1983) </year> <month> 641-644. </month>
Reference-contexts: 1 Introduction One of the most striking early results of arithmetic circuit complexity is the theorem of <ref> [VSBR83] </ref>, showing that any arithmetic circuit of polynomial size and polynomial algebraic degree, with + and fi gates defined over a commutative semiring, is equivalent to an arithmetic circuit of polynomial size having depth log 2 n. (In fact, if the + gates are allowed to have unbounded fanin, the depth <p> degree, with + and fi gates defined over a commutative semiring, is equivalent to an arithmetic circuit of polynomial size having depth log 2 n. (In fact, if the + gates are allowed to have unbounded fanin, the depth is logarithmic, as was observed in [Vi91].) Unfortunately, the construction in <ref> [VSBR83] </ref> is not uniform. The results of [VSBR83] were extended in [MRK88] by providing fast parallel algorithms for evaluating arithmetic circuits. However, these algorithms involve a component that is hard for NLOG, so no logspace uniform construction was known. <p> over a commutative semiring, is equivalent to an arithmetic circuit of polynomial size having depth log 2 n. (In fact, if the + gates are allowed to have unbounded fanin, the depth is logarithmic, as was observed in [Vi91].) Unfortunately, the construction in <ref> [VSBR83] </ref> is not uniform. The results of [VSBR83] were extended in [MRK88] by providing fast parallel algorithms for evaluating arithmetic circuits. However, these algorithms involve a component that is hard for NLOG, so no logspace uniform construction was known. One of the first uniform depth reductions was shown in [Ve91] (improving [Ru81]) for the Boolean ring. <p> Motivated by this question, [Ko90] and [Ni91] showed that commutativity is crucial for the results of <ref> [VSBR83, MRK88] </ref>. Namely, it was shown in [Ko90, Theorem 1] that for the particular semiring over 2 fl with fi denoting set concatenation and + denoting union, there is a circuit with linear size and degree that is not equivalent to any circuit with sublinear depth. <p> Several different notions of algebraic circuit have been considered in the literature; often the most important difference between models concerns the type of inputs to the circuits that are considered. One popular model (for instance, the model studied in <ref> [VSBR83] </ref>) allows a circuit with n input variables to compute a function defined on S n ; that is, an input variable can be assigned the value of any element from the semiring; and thus a single circuit may compute a function on an infinite domain. <p> For the original definitions of "surface configuration" and "realizable pair," see [Co71]. Further details (standard notation and definitions) about LOGCFL may be found in [Co71, Ve91, Vi91]. 3 Depth Reduction in Commutative Rings It is known <ref> [VSBR83, MRK88] </ref> that polynomial-degree polynomial-size circuits over any commutative semi-ring have equivalent logarithmic-depth semi-unbounded-fanin polynomial-size circuits. However, the argument provided in [VSBR83] requires that the degree of each gate be known a priori. <p> Further details (standard notation and definitions) about LOGCFL may be found in [Co71, Ve91, Vi91]. 3 Depth Reduction in Commutative Rings It is known [VSBR83, MRK88] that polynomial-degree polynomial-size circuits over any commutative semi-ring have equivalent logarithmic-depth semi-unbounded-fanin polynomial-size circuits. However, the argument provided in <ref> [VSBR83] </ref> requires that the degree of each gate be known a priori. Although this can be computed quickly in parallel [MRK88], it is easy to see that this is hard for NLOG, and thus cannot be assumed in the logspace-uniform circuit model.
Reference: [VV86] <author> L. Valiant and V. Vazirani, V, </author> <note> NP is as easy as detecting unique solutions Theoretical Computer Science 47 (1986) 85-93. </note>
Reference-contexts: Proof: First we need the following lemma, which follows directly from the results of [CRS93] and [IZ89]. (This improves earlier constructions in, for example, <ref> [VV86, To91, AH93, KVVY93] </ref>, which also showed how to simulate AND and OR by parity gates and ANDs of small fanin.
Reference: [Ve91] <author> H. Venkateswaran, </author> <title> Properties that characterize LOGCFL, </title> <note> JCSS 42 (1991) 380-404. </note>
Reference-contexts: The results of [VSBR83] were extended in [MRK88] by providing fast parallel algorithms for evaluating arithmetic circuits. However, these algorithms involve a component that is hard for NLOG, so no logspace uniform construction was known. One of the first uniform depth reductions was shown in <ref> [Ve91] </ref> (improving [Ru81]) for the Boolean ring. Vinay [Vi91] showed a similar result for circuits over integers, by using LOGCFL machines (that is, AuxPDA's running in polynomial time and logarithmic space [Su78]) to achieve depth reduction. <p> LOGCFL is equal to SAC 1 <ref> [Ve91] </ref>. Another equivalent characterization of LOGCFL is as the class languages accepted by nondeterministic logspace-bounded auxiliary pushdown automata (AuxPDAs) running in polynomial time [Su78]. <p> For the original definitions of "surface configuration" and "realizable pair," see [Co71]. Further details (standard notation and definitions) about LOGCFL may be found in <ref> [Co71, Ve91, Vi91] </ref>. 3 Depth Reduction in Commutative Rings It is known [VSBR83, MRK88] that polynomial-degree polynomial-size circuits over any commutative semi-ring have equivalent logarithmic-depth semi-unbounded-fanin polynomial-size circuits. However, the argument provided in [VSBR83] requires that the degree of each gate be known a priori. <p> Although this can be computed quickly in parallel [MRK88], it is easy to see that this is hard for NLOG, and thus cannot be assumed in the logspace-uniform circuit model. For the particular case of the Boolean ring, a uniform depth-reduction result is proved in <ref> [Ve91] </ref>, and for the integers it is proved in [Vi91]. We present here a uniform depth reduction algorithm for the case of general commutative semirings. Theorem 3.1 Let R be any commutative semiring. <p> In [Vi91] it was claimed that OptLOGCFL coincides with OptSAC 1 , but this claim was later retracted [Vi91a]. Instead, the following is easy to show (using the techniques of e.g., <ref> [Vi91, Ve91] </ref>): Proposition 5.2 OptLOGCFL is the class of functions computed by uniform families of arithmetic circuits of polynomial degree over ( fl ; max,concat). <p> for any term t R that does not contain 0, c t and c 000 t are equal. 28 6.2 The Generalized LOGCFL model In the case of the Boolean ring and computation over integers, SAC 1 circuits and LOGCFL machines (AuxPDAs) give rise to the same class of functions <ref> [Ve91, Vi91] </ref>. <p> All circuits referred to here are of polynomial size. OptLOGCFL is contained in AC 1 ; #LOGCFL is contained in TC 1 . 45 Language Class Boolean Circuits NLOG skew [Ve92] LOGCFL (1) polynomial degree [Ru81] (2) logarithmic depth semi-unbounded (SAC 1 ) <ref> [Ve91] </ref> Counting Variant Arithmetic Circuits with + and fi gates #L skew #LOGCFL (1) polynomial degree [Vi91] (2) logarithmic depth semi-unbounded (#SAC 1 ) [Vi91] Optimization Variant Arithmetic Circuits with max and concat gates OptL skew [AJ93] R-OptLOGCFL (1) logarithmic depth semi-unbounded (OptSAC 1 ) (2) polynomial degree, short-left-paths (3) polynomial
Reference: [Ve92] <author> H. Venkateswaran, </author> <title> Circuit definitions of nondeterministic complexity classes, </title> <journal> SIAM J. Comput. </journal> <month> 21 </month> <year> (1992) </year> <month> 655-670. </month>
Reference-contexts: Skew circuits have been used to characterize NLOG <ref> [Ve92] </ref> as well as the complexity of the determinant [To92]. <p> A circuit is skew if each fi gate has at most one non-leaf input. It is left-skew if the fi gates have bounded fanin and the left input of each fi gate is a leaf. By a proof tree of a circuit (see <ref> [Ve92] </ref> for more formal definitions) we mean a sub-circuit represented as a tree (duplicating gates if required) such that * The output gate of the circuit belongs to the sub-circuit. * Exactly one input of each + gate in the sub-circuit is present in the sub-circuit. 5 * All children of <p> As was pointed out by Jenner [Je93], it is not hard to use the techniques of <ref> [Ve92, To92] </ref> to show: Proposition 5.1 OptL is the class of functions computed by uniform families of left-skew arithmetic circuits over ( fl ; max,concat). In [Vi91] it was claimed that OptLOGCFL coincides with OptSAC 1 , but this claim was later retracted [Vi91a]. <p> In the table below, we tabulate the known characterizations of some important classes. All circuits referred to here are of polynomial size. OptLOGCFL is contained in AC 1 ; #LOGCFL is contained in TC 1 . 45 Language Class Boolean Circuits NLOG skew <ref> [Ve92] </ref> LOGCFL (1) polynomial degree [Ru81] (2) logarithmic depth semi-unbounded (SAC 1 ) [Ve91] Counting Variant Arithmetic Circuits with + and fi gates #L skew #LOGCFL (1) polynomial degree [Vi91] (2) logarithmic depth semi-unbounded (#SAC 1 ) [Vi91] Optimization Variant Arithmetic Circuits with max and concat gates OptL skew [AJ93] R-OptLOGCFL
Reference: [VT89] <author> H. Venkateswaran and M. Tompa, </author> <title> A new pebble game that characterizes parallel complexity classes, </title> <journal> SIAM J. Comput. </journal> <month> 18 </month> <year> (1989) </year> <month> 533-549. </month>
Reference-contexts: This is described in Lemma 5.5. Finally, we turn this AC 1 algorithm into a family of arithmetic circuits. The following definition is similar to the notion of a proof tree or "accepting subtree" studied in <ref> [VT89] </ref>, but is specific to circuits over the algebra ( fl ; max, concat): Let g be a max gate, and let h be an input to g, and consider the behavior of the circuit when given some input x.
Reference: [Vi91] <author> V. Vinay, </author> <title> Counting auxiliary pushdown automata and semi-unbounded arithmetic circuits, </title> <booktitle> Proc. 6th IEEE Structure in Complexity Theory Conference (1991) 270-284. </booktitle>
Reference-contexts: polynomial size and polynomial algebraic degree, with + and fi gates defined over a commutative semiring, is equivalent to an arithmetic circuit of polynomial size having depth log 2 n. (In fact, if the + gates are allowed to have unbounded fanin, the depth is logarithmic, as was observed in <ref> [Vi91] </ref>.) Unfortunately, the construction in [VSBR83] is not uniform. The results of [VSBR83] were extended in [MRK88] by providing fast parallel algorithms for evaluating arithmetic circuits. However, these algorithms involve a component that is hard for NLOG, so no logspace uniform construction was known. <p> However, these algorithms involve a component that is hard for NLOG, so no logspace uniform construction was known. One of the first uniform depth reductions was shown in [Ve91] (improving [Ru81]) for the Boolean ring. Vinay <ref> [Vi91] </ref> showed a similar result for circuits over integers, by using LOGCFL machines (that is, AuxPDA's running in polynomial time and logarithmic space [Su78]) to achieve depth reduction. The proof crucially uses the fact that the given circuit may be simulated by a LOGCFL machine with small pushdown height. <p> However, this particular algebra is of interest for two reasons. * Concatenation is in some sense the canonical example of a non-commutative multipli cation operation. * Natural classes of optimization problems (in particular the classes OptL [AJ93, AJ92] and OptLOGCFL <ref> [Vi91] </ref>) can be characterized in terms of arithmetic circuits over (max,concat). It is important to note that we show only that over this algebra, arithmetic circuits of polynomial size and degree can be simulated by unbounded fanin circuits of logarithmic depth. An optimal result would do this for semi-unbounded-fanin circuits. <p> For the original definitions of "surface configuration" and "realizable pair," see [Co71]. Further details (standard notation and definitions) about LOGCFL may be found in <ref> [Co71, Ve91, Vi91] </ref>. 3 Depth Reduction in Commutative Rings It is known [VSBR83, MRK88] that polynomial-degree polynomial-size circuits over any commutative semi-ring have equivalent logarithmic-depth semi-unbounded-fanin polynomial-size circuits. However, the argument provided in [VSBR83] requires that the degree of each gate be known a priori. <p> For the particular case of the Boolean ring, a uniform depth-reduction result is proved in [Ve91], and for the integers it is proved in <ref> [Vi91] </ref>. We present here a uniform depth reduction algorithm for the case of general commutative semirings. Theorem 3.1 Let R be any commutative semiring. <p> Vinay has shown (see <ref> [Vi91] </ref>) that #LOGCFL is precisely the class #SAC 1 , and is also precisely the class of functions computed by uniform polynomial-degree arithmetic circuits over the natural numbers. (An alternate proof is provided by Theorem 3.1.) 11 It is known that the complexity of the determinant is roughly determined by #L. <p> As was pointed out by Jenner [Je93], it is not hard to use the techniques of [Ve92, To92] to show: Proposition 5.1 OptL is the class of functions computed by uniform families of left-skew arithmetic circuits over ( fl ; max,concat). In <ref> [Vi91] </ref> it was claimed that OptLOGCFL coincides with OptSAC 1 , but this claim was later retracted [Vi91a]. <p> In [Vi91] it was claimed that OptLOGCFL coincides with OptSAC 1 , but this claim was later retracted [Vi91a]. Instead, the following is easy to show (using the techniques of e.g., <ref> [Vi91, Ve91] </ref>): Proposition 5.2 OptLOGCFL is the class of functions computed by uniform families of arithmetic circuits of polynomial degree over ( fl ; max,concat). <p> for any term t R that does not contain 0, c t and c 000 t are equal. 28 6.2 The Generalized LOGCFL model In the case of the Boolean ring and computation over integers, SAC 1 circuits and LOGCFL machines (AuxPDAs) give rise to the same class of functions <ref> [Ve91, Vi91] </ref>. <p> Thus effectively the stack holds O (log 2 n) bits.) We denote this class by R-OptLOGCFL. If we consider the Boolean or counting versions of LOGCFL, then restricting the pushdown to logarithmic depth does not make the class any weaker; see <ref> [Vi91, Lemma 3.1] </ref>. However for the optimizing functions it may make a difference. From the resource bounds on the transducers computing these optimizing functions, it is clear that OptL R-OptLOGCFL OptLOGCFL. <p> OptLOGCFL is contained in AC 1 ; #LOGCFL is contained in TC 1 . 45 Language Class Boolean Circuits NLOG skew [Ve92] LOGCFL (1) polynomial degree [Ru81] (2) logarithmic depth semi-unbounded (SAC 1 ) [Ve91] Counting Variant Arithmetic Circuits with + and fi gates #L skew #LOGCFL (1) polynomial degree <ref> [Vi91] </ref> (2) logarithmic depth semi-unbounded (#SAC 1 ) [Vi91] Optimization Variant Arithmetic Circuits with max and concat gates OptL skew [AJ93] R-OptLOGCFL (1) logarithmic depth semi-unbounded (OptSAC 1 ) (2) polynomial degree, short-left-paths (3) polynomial degree, short-right-paths OptLOGCFL polynomial degree Acknowledgments The first author thanks Shiyu Zhou and David Zuckerman for <p> is contained in TC 1 . 45 Language Class Boolean Circuits NLOG skew [Ve92] LOGCFL (1) polynomial degree [Ru81] (2) logarithmic depth semi-unbounded (SAC 1 ) [Ve91] Counting Variant Arithmetic Circuits with + and fi gates #L skew #LOGCFL (1) polynomial degree <ref> [Vi91] </ref> (2) logarithmic depth semi-unbounded (#SAC 1 ) [Vi91] Optimization Variant Arithmetic Circuits with max and concat gates OptL skew [AJ93] R-OptLOGCFL (1) logarithmic depth semi-unbounded (OptSAC 1 ) (2) polynomial degree, short-left-paths (3) polynomial degree, short-right-paths OptLOGCFL polynomial degree Acknowledgments The first author thanks Shiyu Zhou and David Zuckerman for helpful discussions.
Reference: [Vi91a] <author> V. Vinay, </author> <title> Semi-unboundedness and complexity classes, </title> <type> doctoral dissertation, </type> <institution> Indian Institute of Science, Bangalore, </institution> <month> July </month> <year> 1991. </year> <month> 50 </month>
Reference-contexts: More specifically, f is logspace many-one reducible to the determinant 2 iff it is the difference of two #L functions (see <ref> [Vi91a, Da91, To91a] </ref>; an essentially equivalent result is also proved in [Va92, Theorem 2]). Also, this class of functions is precisely the class computed by polynomial-size skew arithmetic circuits over the integers [To92]. For additional related results, see [AO94]. <p> In [Vi91] it was claimed that OptLOGCFL coincides with OptSAC 1 , but this claim was later retracted <ref> [Vi91a] </ref>. Instead, the following is easy to show (using the techniques of e.g., [Vi91, Ve91]): Proposition 5.2 OptLOGCFL is the class of functions computed by uniform families of arithmetic circuits of polynomial degree over ( fl ; max,concat). <p> Thus the entire running time is polynomial. Since OptSAC 1 has circuits of polynomial degree, it is contained in OptLOGCFL. We investigate below the extent to which OptLOGCFL itself can be characterized in terms of circuits of small depth. No parallel algorithm for OptLOGCFL is presented in <ref> [Vi91a] </ref>, and in fact this is explicitly listed as an open problem there; instead, attention is drawn to the negative results of [Ni91, Ko90] showing that depth reduction is not possible in general for non-commutative semirings. 5.2 Depth Reduction for (max,concat) Circuits In this section we show that (max,concat) circuits of
References-found: 52

