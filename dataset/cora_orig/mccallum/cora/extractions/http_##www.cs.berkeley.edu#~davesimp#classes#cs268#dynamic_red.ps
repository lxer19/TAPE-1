URL: http://www.cs.berkeley.edu/~davesimp/classes/cs268/dynamic_red.ps
Refering-URL: http://www.cs.berkeley.edu/~davesimp/classes/cs268/
Root-URL: http://www.cs.berkeley.edu
Email: fspencer, davesimpg@cs.berkeley.edu  
Title: Dynamic Queue-Size Estimation for RED Gateways  
Author: Spencer Kimball, David Simpson 
Date: May 16, 1997  
Address: Berkeley  
Affiliation: Computer Science Division University of California at  
Abstract: Random Early Detection (RED) gateways are used for congestion avoidance in packet-switched networks. RED gateways probabilistically notify connections of congestion. The determination of congestion is made by keeping an estimated average queue size for each output queue and comparing to congestion threshold settings. The weighting parameter (weight q ) which controls the responsiveness of the estimated average queue size to network traffic must be carefully set to avoid underutilization. However, weight q must be set before the gateway is placed in service, causing suboptimal gateway performance levels should network characteristics change sufficiently. Dynamic queue size estimators obviate the requirement of a static weight q parameter by setting it based on observed network characteristics. Two dynamic estimators are presented in this paper. The first involves a simple increase/decrease scheme reminiscent of TCP congestion avoidance [8]. The second takes a predictive approach, determining the value of weight q based on a number of average queue size estimators operating at different timescales. Simulations are presented for both methods which illustrate their performance in comparison to the conventional fixed-parameter RED gateways. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Keshav, S., </author> <title> "A Control-Theoretic Approach to Flow Control", </title> <booktitle> Proceedings of SIGCOMM '91, </booktitle> <month> September </month> <year> 1991, </year> <month> p.3-16. </month>
Reference-contexts: In addition, FIFO scheduling generally scales well and can be implemented efficiently. In [2], the authors recommend that gateways should only use schedulers requiring per-connection state, such as Fair Queueing <ref> [1] </ref> or hop-by-hop flow schemes [3], when other schedulers are clearly inadequate. RED gateways detect the beginning of congestion by computing the average queue size and notifying connections when the gateway becomes congested.
Reference: [2] <author> Floyd, S., and Jacobson, V., </author> <title> "Random Early Detection Gateways for Congestion Avoidance", </title> <journal> IEEE/ACM Transactions on Networking, </journal> <month> August </month> <year> 1993. </year>
Reference-contexts: Section 5 introduces our two estimators and also reports on their simulated performance. Sections 6 and 7 present future work and conclusions respectively. 1 2 Background Random Early Detection gateways are a mechanism for congestion avoidance in packet-switched networks. RED gateways were first introduced and evaluated in <ref> [2] </ref>. RED gateways cooperate with end-to-end congestion control protocols, such as TCP, to keep the gateway's average queue size low while allowing occasional bursts of packets to the queue. <p> RED gateways operate on the premise that FIFO scheduling will continue to be useful in network routers, either as the gateway's only scheduler or to schedule among a number of multiplexed connections. In addition, FIFO scheduling generally scales well and can be implemented efficiently. In <ref> [2] </ref>, the authors recommend that gateways should only use schedulers requiring per-connection state, such as Fair Queueing [1] or hop-by-hop flow schemes [3], when other schedulers are clearly inadequate. RED gateways detect the beginning of congestion by computing the average queue size and notifying connections when the gateway becomes congested. <p> In addition to evaluating the increase/decrease estimator under conditions of heavy network congestion, we have not yet shown that the new increase/decrease estimator is well behaved in situations involving bursty connections. In <ref> [2] </ref>, the authors performed simulations to show that standard RED gateways perform better than either Drop Tail or Random Drop gateways, in situations with bursty traffic. We repeat the same experiment to show that the increase/decrease estimator does not cause RED to treat bursty traffic unfairly. <p> This allows bursty senders a more equitable network resource allocation. If the instantaneous queue size is decreasing, simply use a standard weight value, such as 0:002, as suggested by Floyd and Jacobson in <ref> [2] </ref>. 12 technique. The predictive estimator raises concerns of a feedback problem. The predictors are calculated by analyzing network conditions, and the network conditions are then in turn influenced by the predictors. The issue arises as to whether the predictors are making self-fulfilling prophecies, but is difficult to resolve.
Reference: [3] <author> Mishra, P., and Kanakia, H., </author> <title> "A Hop by Hop Rate-based Congestion Control Scheme", </title> <booktitle> Proceedings of SIGCOMM '92, </booktitle> <month> August </month> <year> 1992, </year> <month> p.112-123. </month>
Reference-contexts: In addition, FIFO scheduling generally scales well and can be implemented efficiently. In [2], the authors recommend that gateways should only use schedulers requiring per-connection state, such as Fair Queueing [1] or hop-by-hop flow schemes <ref> [3] </ref>, when other schedulers are clearly inadequate. RED gateways detect the beginning of congestion by computing the average queue size and notifying connections when the gateway becomes congested. RED does this by dropping incoming packets with a certain probability when the average queue size exceeds a preset threshold.
Reference: [4] <author> Jain, R., and Ramakrishnan, K.K., </author> <title> Congestion Avoidance in Computer Networks with a Connectionless Network Layer: Concepts, Goals, and Methodology, </title> <booktitle> Proc. IEEE Comp. Networking Symp., </booktitle> <address> Washington, D.C., </address> <month> April </month> <year> 1988, </year> <month> pp.134-143. </month>
Reference-contexts: RED does this by dropping incoming packets with a certain probability when the average queue size exceeds a preset threshold. Alternatively, the gateway can mark the packet if that is the notification mechanism used by the end-to-end protocol (i.e, DECbit <ref> [4] </ref>). The exact probability of a packet drop is an increasing function of the average queue size. The dynamics of the RED algorithm ensure that the probability with which a particular sender is notified by the gateway is proportional to its share of the bandwidth through the gateway.
Reference: [5] <author> Hashem, E., </author> <title> "Analysis of random drop for gateway congestion control", </title> <type> Report LCS TR-465, </type> <institution> Laboratory for Computer Science, MIT, </institution> <address> Cambridge, MA, </address> <year> 1989, </year> <month> p.103. </month>
Reference-contexts: Likewise, when the queue fills, all active connections are notified at once, causing them to reduce their windows together, and leads to a period of underutilization and synchronization among the connections. The disadvantages of Drop Tail gateways are described by Hashem in <ref> [5] </ref>. RED gateways use a low-pass filter with an exponential weighted moving average (EWMA) to compute the average queue size. There are two thresholds to which the RED gateway compares the average queue size: thresh min and thresh max .
Reference: [6] <institution> MASH Research Group, UCB/LBNL Network Simulator, Computer Program, </institution> <year> 1997. </year>
Reference-contexts: network, we hope to improve the performance of 2 the RED algorithm in a variety of situations by increasing global network throughput and shortening the average delay of packets through the gateway. 3 Methodology We implemented the dynamic estimators by modifying the REDQueue object in the UCB/LBNL Network Simulator (ns) <ref> [6] </ref>. We gauged the performance of our designs using ns, and used the results to drive development. Three performance metrics are defined for evaluating performance and for comparing fixed parameter RED to our dynamic designs.
Reference: [7] <author> Grimmett, G.R., and Stirzaker, </author> <title> D.R., Probability and Random Processes, </title> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1994. </year>
Reference: [8] <author> Chiu, D.M., and Jain, R., </author> <title> "Analysis of the Increase and Decrease Algorithms for Congestion Avoidance in Computer Networks", </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> Vol. 17, </volume> <year> 1989, </year> <pages> pp. 1-14. </pages>
Reference-contexts: The increase/decrease estimator adjusts the weight q parameter in response to changing network conditions in order to find the best suited value to the current traffic characteristics. It does this by employing a strategy that has been successful in a variety of other networking domains, such as TCP <ref> [8] </ref> and RLM [9], in which parameters are adjusted with respect to network input signals and timeouts.
Reference: [9] <author> Floyd, S., Jacobson, V., Liu, C., McCanne, S., Zhang, L., </author> <title> "A Reliable Multicast Framework for Ligh-Weight Sessions and Application Level Framing". </title> <note> To appear in IEEE/ACM Transactions on Networking, </note> <year> 1997. </year>
Reference-contexts: It does this by employing a strategy that has been successful in a variety of other networking domains, such as TCP [8] and RLM <ref> [9] </ref>, in which parameters are adjusted with respect to network input signals and timeouts. The basic algorithm used by the increase/decrease estimator is described as follows: when the router begins to move into a congested state, multiplicatively decrease the weight parameter used by the EWMA to estimate the queue size.
Reference: [10] <author> V. Jacobson, </author> <title> "Congestion Avoidance and Control", </title> <booktitle> Proceedings of SIGCOMM '88, </booktitle> <address> Stan-ford, CA, </address> <month> August, </month> <year> 1988. </year> <month> 17 </month>
References-found: 10

