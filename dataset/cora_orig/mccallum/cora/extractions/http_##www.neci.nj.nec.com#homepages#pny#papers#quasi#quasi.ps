URL: http://www.neci.nj.nec.com/homepages/pny/papers/quasi/quasi.ps
Refering-URL: http://www.neci.nj.nec.com/homepages/pny/papers/quasi/main.html
Root-URL: 
Title: LINEAR AND O(N log N) TIME MINIMUM-COST MATCHING ALGORITHMS FOR QUASI-CONVEX TOURS  
Author: SAMUEL R. BUSS AND PETER N. YIANILOS 
Keyword: Key words. assignment problem, bipartite weighted matching, computational geometry, concave penalty function, convexity, linear time, Monge property, quadrangle inequality, string comparison  
Note: AMS subject classifications. 05C70, 05C85, 05C90, 52A37, 68Q20, 68R10, 68U15, 90C27  
Abstract: Let G be a complete, weighted, undirected, bipartite graph with n red nodes, n 0 blue nodes, and symmetric cost function c(x; y). A maximum matching for G consists of minfn; n 0 g edges from distinct red nodes to distinct blue nodes. Our objective is to find a minimum-cost maximum matching, i.e., one for which the sum of the edge costs has minimal value. This is the weighted bipartite matching problem; or as it is sometimes called, the assignment problem. We report a new and very fast algorithm for an abstract special case of this problem. Our first requirement is that the nodes of the graph are given as a `quasi-convex tour'. This means that they are provided circularly ordered as x 1 ; : : : ; x N where N = n + n 0 , and that for any x i ; x j ; x k ; x ` , not necessarily adjacent but in tour order, with x i ; x j of one color and x k ; x ` of the opposite color, the following inequality holds: If n = n 0 , our algorithm then finds a minimum-cost matching in O(N log N) time. Given an additional condition of `weak analyticity', the time complexity is reduced to O(N). In both cases only linear space is required. In the special case where the circular ordering is a line-like ordering, these results apply even if n 6= n 0 . Our algorithm is conceptually elegant, straightforward to implement, and free of large hidden constants. As such we expect that it may be of practical value in several problem areas. Many natural graphs satisfy the quasi-convexity condition. These include graphs which lie on a line or circle with the canonical tour ordering, and costs given by any concave-down function of arclength | or graphs whose nodes lie on an arbitrary convex planar figure with costs provided by Euclidean distance. The weak-analyticity condition applies to points lying on a circle with costs given by Euclidean distance, and we thus obtain the first linear-time algorithm for the minimum-cost matching problem in this setting (and also where costs are given by the L 1 or L 1 metrics). Given two symbol strings over the same alphabet, we may imagine one to be red and the other blue, and use our algorithms to compute string distances. In this formulation, the strings are embedded in the real line and multiple independent assignment problems are solved; one for each distinct alphabet symbol. While these examples are somewhat geometrical, it is important to remember that our conditions are purely abstract; hence, our algorithms may find application to problems in which no direct connection to geometry is evident. c(x i ; x ` ) + c(x j ; x k ) c(x i ; x k ) + c(x j ; x ` )
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal, A. Bar-Noy, S. Khuller, D. Kravets, and B. Schieber, </author> <title> Efficient minimum cost matching using quadrangle inequality, </title> <booktitle> in Proceedings of the 33th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1992, </year> <pages> pp. 583-592. </pages>
Reference-contexts: The matching problem for this arclength cost function has been studied by Karp-Li [14], Aggarwal et al. <ref> [1] </ref>, Werman et al. [23] and others, and is the `Skis and Skiers' problem of Lawler [18]. Karp-Li have given linear time algorithms for this matching problem; Aggarwal et al. have generalized the linear time algorithm to the transportation problem. <p> Prior work for examples 1 and 2 gave linear time matching algorithms only for the case where f (x) is a linear function <ref> [14, 1] </ref>. 2. Now let the points x 1 ; : : : ; x N lie on a smooth curve C which is homeomorphic to a circle, with the points listed in, say, counterclockwise order. <p> Proof. (Sketch) If a minimum-cost matching does have a pair of jumpers which cross, the quasi-convexity property allows them to be `uncrossed' without increasing the total cost. Repeatedly uncrossing jumpers will eventually yield a minimum-cost matching with no crossing jumpers. (See Lemma 1 of <ref> [1] </ref> for a detailed proof of this.) Lemma 2.2 is proved by noting that a minimum-cost matching with no crossing jumpers must respect the ~-equivalence classes.
Reference: [2] <author> A. Aggarwal and M. Klawe, </author> <title> Applications of generalized matrix searching to geometric algorithms, </title> <journal> Discrete Applied Mathematics, </journal> <volume> 27 (1990), </volume> <pages> pp. 3-23. </pages>
Reference: [3] <author> A. Aggarwal, M. Klawe, S. Moran, P. Shor, and R. Wilber, </author> <title> Geometric applications of a matrix-searching algorithm, </title> <journal> Algorithmica, </journal> <volume> 2 (1987), </volume> <pages> pp. 195-208. </pages>
Reference: [4] <author> A. Aggarwal and J. Park, </author> <title> Notes on searching in multidimensional monotone arrays, </title> <booktitle> in Proceedings of the 29th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1988, </year> <pages> pp. 497-512. </pages>
Reference-contexts: Fig. 1. The minimum cost matching for a 74 node graph on the the circle with Euclidean distance as the cost function. Our quasi-convex property is equivalent to the "inverse quadrangle inequality" used, for instance, by [8], but is weaker than the similar "inverse Monge property" of <ref> [4] </ref>. In fact, we show below that any Monge matching problem may be trivially transformed into a quasi-convex matching problem, but not vice-versa.
Reference: [5] <author> S. R. Buss, K. G. Kanzelberger, D. Robinson, and P. N. Yianilos, </author> <title> Solving the minimum-cost matching problem for quasi-convex tours: An efficient ANSI-C implementation, </title> <type> Tech. Rep. </type> <institution> CS94-370, U.C. </institution> <address> San Diego, </address> <year> 1994. </year>
Reference-contexts: Third, our algorithms are conceptually simpler than the divide-and-conquer methods used by Marcotte and Suri, and we expect that our algorithms are easier to implement. QUASI-CONVEX MATCHING 3 All of our algorithms have been implemented as reported in <ref> [5] </ref>; a brief overview of this implementation is given in section 3.4. We list some sample applications of our algorithms in Examples 1-8 below. One example of a matching problem solution is shown in Figure 1. <p> The Algorithm. In this section, we give the actual algorithm for the Main Theorems. The correctness of the algorithm follows from the development in section 2.2. With D. Robinson and K. Kanzelberger, we have developed efficient implementations in ANSI C of all the algorithms described below <ref> [5] </ref>. 4 3.1. Preliminaries. As mentioned above, the algorithm maintains three lists of nodes called deques (for "double ended queues", since we will have to access both ends of the lists). The three deques are the "main" deque M, and two "left" deques L 1 and L -1 . <p> An ANSI-C Implementation. An efficient and highly portable ANSI-C implementation of our algorithms is described in <ref> [5] </ref>, which includes complete source code, test programs for several interesting cases, benchmark results, and software to produce postscript graphical representations of the matchings found. <p> Figure 1 shows an example of a matching produced by our software. Benchmark results for a variety of RISC processors produced nearly identical results when normalized by clock rate. So timing results in <ref> [5] </ref> are given in units of RISC cycles. Graphs of up to 20; 000 nodes are included in this study. Recall that O (log N ) time is a worst case bound for generic .
Reference: [6] <author> S. R. Buss, P. N. Yianilos, </author> <title> A Bipartite Matching Approach to Approximate String Comparison and Search, </title> <type> Tech. Rep., </type> <institution> NEC Research Institute (1995), Princeton NJ. </institution> <note> (in preparation). </note>
Reference-contexts: Applications to String Matching . As a final topic we briefly discuss the application of our matching results to string comparison. A full treatment is beyond the scope of this paper, but additional details and related algorithms may be found in <ref> [6] </ref>. Given two symbol strings v = a 1 a 2 a n and w = b 1 b 2 b n , our goal is to measure a particular notion of distance between them. <p> A special form of our -distance measure in which f (x) = x, and the optimal matching is only approximated, was introduced earlier by the authors and shown to have a simple linear time algorithm [26, 27]. Its relationship to -distances is described in <ref> [6] </ref>. This earlier algorithm has been successfully used in commercial applications, especially for spelling correction in word processing software, typewriters, and hand-held dictionary devices (we estimate that that over 15,000,000 such software/hardware units have been sold by Proximity Technology, Franklin Electronic Publishers and their licensees).
Reference: [7] <author> D. Eppstein, </author> <title> Sequence comparison with mixed convex and concave costs, </title> <journal> Journal of Algorithms, </journal> <volume> 11 (1990), </volume> <pages> pp. 85-101. </pages>
Reference-contexts: As we discuss in section 5, the setting of example 1 above is precisely what is needed to allow (near) linear time string matching algorithms with concave-down cost functions. A number of authors, including <ref> [7, 8] </ref>, have studied concave down cost functions for string matching; their string matching algorithms are based on least-edit-distance and, in this regard, are quite different from ours.
Reference: [8] <author> Z. Galil and R. Giancarlo, </author> <title> Speeding up dynamic programming with applications to molecular biology, </title> <booktitle> Theoretical Computer Science, 64 (1989), </booktitle> <pages> pp. 107-118. </pages>
Reference-contexts: The edges shown form a minimum-cost matching. Fig. 1. The minimum cost matching for a 74 node graph on the the circle with Euclidean distance as the cost function. Our quasi-convex property is equivalent to the "inverse quadrangle inequality" used, for instance, by <ref> [8] </ref>, but is weaker than the similar "inverse Monge property" of [4]. In fact, we show below that any Monge matching problem may be trivially transformed into a quasi-convex matching problem, but not vice-versa. <p> As we discuss in section 5, the setting of example 1 above is precisely what is needed to allow (near) linear time string matching algorithms with concave-down cost functions. A number of authors, including <ref> [7, 8] </ref>, have studied concave down cost functions for string matching; their string matching algorithms are based on least-edit-distance and, in this regard, are quite different from ours. <p> The analyticity condition has been implicitly used by Hirschberg-Larmore [12] who defined a Bridge function which is similar to our function: they give a special case in which Bridge is constant-time computable and thus the analyticity condition holds. Later, Galil-Giancarlo <ref> [8] </ref> defined a "closest zero property" which is equivalent to our strong analyticity condition. 1 As we illustrated above, the analyticity and strong analyticity conditions rarely hold. <p> Our algorithms apply only to unbalanced tours only if they are line-like. This 1 The definition of the "closest zero property" is misstated in <ref> [8] </ref>: it should be defined as saying that it is possible to find the first r such that w (l; r) w (k; r) a 0 (note their w corresponds to our cost function c, and a is a real).
Reference: [9] <author> Z. Galil and K. Park, </author> <title> A linear-time algorithm for concave one-dimensional dynamic programming, </title> <journal> Inf. Process. Lett., </journal> <volume> 33 (1990), </volume> <pages> pp. 309-311. </pages>
Reference: [10] <author> P. Gilmore and R. Gomory, </author> <title> Sequencing a one state-variable machine: A solvable case of the traveling salesman problem, </title> <journal> Operations Research, </journal> <volume> 12 (1964), </volume> <pages> pp. 655-679. </pages>
Reference-contexts: Karp-Li have given linear time algorithms for this matching problem; Aggarwal et al. have generalized the linear time algorithm to the transportation problem. A more general version of the matching problem for graphs in line-like order has been studied by Gilmore-Gomory <ref> [10] </ref> (see [18]).
Reference: [11] <author> X. </author> <title> He, An efficient parallel algorithm for finding minimum weight matching for points on a convex polygon, </title> <journal> Inf. Process. Lett., </journal> <volume> 37 (1991), </volume> <pages> pp. 111-116. </pages>
Reference-contexts: The non-bipartite cases are discussed in section 4; the algorithms are simple modifications of the algorithms for the bipartite tours. It is apparent that our algorithms can be parallelized but we have not investigated the precise runtime and processor count that is needed for a parallel implementation. He <ref> [11] </ref> has given a PRAM implementation of Marcotte and Suri's algorithm which uses N processors and O (log 2 N ) time and it is clear that our algorithm can be computed with the same number of processors with the same time bounds using He's methods.
Reference: [12] <author> D. S. Hirschberg and L. L. Larmore, </author> <title> The least weight subsequence problem, </title> <journal> SIAM J. Com-put., </journal> <volume> 16 (1987), </volume> <pages> pp. 628-638. </pages>
Reference-contexts: For example, if the vertices of the convex polygon are known to lie on a polygon with a bounded number of sides, on an oval, or on a branch of a hyperbola, then the weak analyticity condition does hold. The analyticity condition has been implicitly used by Hirschberg-Larmore <ref> [12] </ref> who defined a Bridge function which is similar to our function: they give a special case in which Bridge is constant-time computable and thus the analyticity condition holds.
Reference: [13] <author> A. J. Hoffman, </author> <title> On simple linear programming problems, in Convexity: </title> <booktitle> Proceedings of the Seventh Symposium in Pure Mathematics of the AMS, </booktitle> <editor> V. Klee, ed., </editor> <publisher> American Mathematical Society, </publisher> <year> 1963, </year> <pages> pp. 317-327. </pages>
Reference-contexts: However, we have discovered no direct connection between our quasi-convex matching problem and the problems solved by these authors. The notion of a Monge array <ref> [13] </ref> is related to that of quasi-convexity, but the Monge condition is a stronger (i.e., quasi-convexity is strictly more general). Because of the similarity between the definitions of both properties, we take the time to illustrate this point in detail.
Reference: [14] <author> R. M. Karp and S.-Y. R. Li, </author> <title> Two special cases of the assignment problem, </title> <journal> Discrete Mathematics, </journal> <volume> 13 (1975), </volume> <pages> pp. 129-142. </pages>
Reference-contexts: The matching problem for this arclength cost function has been studied by Karp-Li <ref> [14] </ref>, Aggarwal et al. [1], Werman et al. [23] and others, and is the `Skis and Skiers' problem of Lawler [18]. Karp-Li have given linear time algorithms for this matching problem; Aggarwal et al. have generalized the linear time algorithm to the transportation problem. <p> Prior work for examples 1 and 2 gave linear time matching algorithms only for the case where f (x) is a linear function <ref> [14, 1] </ref>. 2. Now let the points x 1 ; : : : ; x N lie on a smooth curve C which is homeomorphic to a circle, with the points listed in, say, counterclockwise order.
Reference: [15] <author> M. M. Klawe and D. J. Kleitman, </author> <title> An almost linear time algorithm for generalized matrix searching, </title> <journal> SIAM J. Disc. Math., </journal> <volume> 3 (1990), </volume> <pages> pp. 81-97. </pages>
Reference: [16] <author> D. Kravets and J. K. Park, </author> <title> Selection and sorting in totally monotone arrays, </title> <journal> Mathematical Systems Theory, </journal> <volume> 24 (1991), </volume> <pages> pp. 201-220. </pages>
Reference: [17] <author> L. L. Larmore and B. Schieber, </author> <title> On-line dynamic programming with applications to the prediction of RNA secondary structure, </title> <journal> Journal of Algorithms, </journal> <volume> 12 (1991), </volume> <pages> pp. 490-515. </pages>
Reference: [18] <author> E. Lawler, </author> <title> Combinatorial Optimization: Networks and Matroids, </title> <publisher> Holt, Rinehart and Winston, </publisher> <year> 1976. </year>
Reference-contexts: The cost of a matching is the sum of the costs of its edges. The problem of finding a minimal-cost matching for a general bipartite graph is known to have an O (N 3 ) time algorithm (see Lawler <ref> [18] </ref> for this and other background on matching), and for graphs with nodes in the plane with the Euclidean distance as cost function, there is a O (N 2:5 log N ) time algorithm, due to Vaidya [22]. <p> The matching problem for this arclength cost function has been studied by Karp-Li [14], Aggarwal et al. [1], Werman et al. [23] and others, and is the `Skis and Skiers' problem of Lawler <ref> [18] </ref>. Karp-Li have given linear time algorithms for this matching problem; Aggarwal et al. have generalized the linear time algorithm to the transportation problem. A more general version of the matching problem for graphs in line-like order has been studied by Gilmore-Gomory [10] (see [18]). <p> `Skis and Skiers' problem of Lawler <ref> [18] </ref>. Karp-Li have given linear time algorithms for this matching problem; Aggarwal et al. have generalized the linear time algorithm to the transportation problem. A more general version of the matching problem for graphs in line-like order has been studied by Gilmore-Gomory [10] (see [18]).
Reference: [19] <author> Y. Mansour, J. K. Park, B. Schieber, and S. Sen, </author> <title> Improved selection in totally monotone arrays, </title> <booktitle> in Proceedings, 11th Conf. on Foundations of Software Technology and Theoretical Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991, </year> <pages> pp. 347-359. </pages>
Reference: [20] <author> O. Marcotte and S. Suri, </author> <title> Fast matching algorithms for points on a polygon, </title> <journal> SIAM J. Com-put., </journal> <volume> 20 (1991), </volume> <pages> pp. 405-422. </pages>
Reference-contexts: They give a linear time algorithm for the matching problem for (unbalanced) Monge graphs. In the prior work most closely related to this paper, Marcotte and Suri <ref> [20] </ref> consider the matching problem for a circularly ordered, balanced tour in which the nodes are the vertices of a convex polygon and the cost function is equal to Euclidean distance. <p> In this case, the weak analyticity condition always holds and Main Theorem 1.9 gives an O (N ) time algorithm. The best prior algorithm was O (N log N ) time <ref> [20] </ref>. 4. More generally, if x 1 ; : : : ; x N are the vertices of a convex polygon listed in, say, counterclockwise order, and if the cost function is equal to Euclidean distance, then the nodes form a quasi-convex tour. <p> The prior algorithm for this case was O (N log N ) time <ref> [20] </ref> and our algorithms are either O (N ) or O (N log N ) time depending on whether the weak analyticity condition holds. 5. Some non-convex polygons also have vertices which form a quasi-convex tour. <p> Non-bipartite, quasi-convex tours. In this section we show how the earlier algorithms can be applied to non-bipartite, quasi-convex tours. The principal observation is that non-bipartite tours may be made bipartite by the simple construction of making the nodes alternate in color. This is already observed by Marcotte-Suri <ref> [20] </ref> in a more restrictive setting; we repeat the construction here for the sake of completeness. First, it is apparent that the proof of Lemma 2.3 still works in the non-bipartite case, and thus any non-bipartite, quasi-convex tour has a minimum-cost matching in which no jumpers cross.
Reference: [21] <author> D. Sankoff and J. B. Kruskal, </author> <title> Time Warps, String Edits and Macromolecules: The Theory and Practice of Sequence Comparison, </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: Least-edit-distance string matching algorithms are widely used because they provide rich and flexible string comparison functions; on the other hand, the best general algorithms for computing least-edit-distance require O (N 2 ) time (see <ref> [21] </ref>). Our string matching algorithms are not as flexible, but can be tailored to work well for many applications: they have the advantage of being linear time computable. <p> A novel feature of our -distances is that distinct alphabet symbols are treated independently. This is in contrast to most prior work which has used `least edit distance' for string comparison (see <ref> [21] </ref> for a survey). As an illustration of the difference between our distance measure and the `edit distance' approach, consider comparing the word "abcde" with its mirror image "edcba".
Reference: [22] <author> P. M. Vaidya, </author> <title> Geometry helps in matching, </title> <journal> SIAM J. Comput., </journal> <volume> 18 (1989), </volume> <pages> pp. 1201-1225. </pages>
Reference-contexts: is known to have an O (N 3 ) time algorithm (see Lawler [18] for this and other background on matching), and for graphs with nodes in the plane with the Euclidean distance as cost function, there is a O (N 2:5 log N ) time algorithm, due to Vaidya <ref> [22] </ref>. The minimum-cost matching problem is substantially easier in the case where the nodes are in line-like order or are circularly ordered.
Reference: [23] <author> M. Werman, S. Peleg, R. Melter, and T. Kong, </author> <title> Bipartite graph matching for points on a line or a circle, </title> <journal> Journal of Algorithms, </journal> <volume> 7 (1986), </volume> <pages> pp. 277-284. </pages>
Reference-contexts: The matching problem for this arclength cost function has been studied by Karp-Li [14], Aggarwal et al. [1], Werman et al. <ref> [23] </ref> and others, and is the `Skis and Skiers' problem of Lawler [18]. Karp-Li have given linear time algorithms for this matching problem; Aggarwal et al. have generalized the linear time algorithm to the transportation problem.
Reference: [24] <author> R. Wilber, </author> <title> The concave least-weight subsequence problem revisited, </title> <journal> Journal of Algorithms, </journal> <volume> 9 (1988), </volume> <pages> pp. 418-425. </pages>
Reference: [25] <author> F. F. Yao, </author> <title> Speed-up in dynamic programming, </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 3 (1982), </volume> <pages> pp. 523-540. </pages>
Reference-contexts: Similarly, we do not know any linear or near-linear time algorithms for bipartite, quasi-convex tours which are neither balanced nor line-like. We conclude this section by mentioning a tantalizing connection between our work and the work of F. F. Yao <ref> [25] </ref>.
Reference: [26] <author> P. N. Yianilos, </author> <title> The definition, computation and application of symbol string similarity functions, </title> <type> Master's thesis, </type> <institution> Emory University, </institution> <note> 1978. </note> <author> 32 S. R. BUSS AND P. N. </author> <month> YIANILOS </month>
Reference-contexts: In string matching algorithms, the cost of shifting a character's position is specified as a function of the distance shifted. The authors have worked in the past on string matching algorithms <ref> [26, 27] </ref> in which the cost function is a linear function of distance. These prior algorithms have been quite successfully used in commercial applications, especially natural language search; and, we expect that the use of a concave down distance function will significantly improve the matching quality. <p> A special form of our -distance measure in which f (x) = x, and the optimal matching is only approximated, was introduced earlier by the authors and shown to have a simple linear time algorithm <ref> [26, 27] </ref>. Its relationship to -distances is described in [6].
Reference: [27] <author> P. N. Yianilos and S. R. Buss, </author> <title> Associative memory circuit system and method, continuation-in-part. </title> <type> U.S. Patent #4490811, </type> <month> December </month> <year> 1984. </year>
Reference-contexts: In string matching algorithms, the cost of shifting a character's position is specified as a function of the distance shifted. The authors have worked in the past on string matching algorithms <ref> [26, 27] </ref> in which the cost function is a linear function of distance. These prior algorithms have been quite successfully used in commercial applications, especially natural language search; and, we expect that the use of a concave down distance function will significantly improve the matching quality. <p> A special form of our -distance measure in which f (x) = x, and the optimal matching is only approximated, was introduced earlier by the authors and shown to have a simple linear time algorithm <ref> [26, 27] </ref>. Its relationship to -distances is described in [6].
References-found: 27

