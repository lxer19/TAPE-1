URL: ftp://ftp.cs.cmu.edu/project/mach/doc/unpublished/threads.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/project/mach/public/www/doc/publications.html
Root-URL: 
Title: C Threads  
Author: Eric C. Cooper Richard P. Draves 
Date: 11 September 1990  
Note: Draft of  This research was sponsored by the Defense Advanced Research Projects Agency (DoD), ARPA order 4864, monitored by the Space and Naval Warfare Systems Command under contract N00039-84-C-0467. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or of the U.S. Government.  
Address: Pittsburgh, Pennsylvania 15213  
Affiliation: Department of Computer Science Carnegie Mellon University  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice-Hall, </publisher> <year> 1978. </year>
Reference-contexts: 1. Introduction MACH provides a set of low-level, language-independent primitives for manipulating threads of control [3]. The C Threads package is a run-time library that provides a C language interface to these facilities <ref> [1] </ref>. The constructs provided are similar to those found in Mesa [4] and Modula-2+ [5]: forking and joining of threads, protection of critical regions with mutex variables, and synchronization by means of condition variables. 2.
Reference: [2] <author> C. A. R. Hoare. </author> <title> Monitors: An Operating System Structuring Concept. </title> <journal> Communications of the ACM 17(10) </journal> <pages> 549-557, </pages> <month> October, </month> <year> 1974. </year>
Reference-contexts: In general, these primitives are used to constrain the possible interleavings of threads' execution streams. They separate the two most common uses of Dijkstra's P () and V () operations into distinct facilities. This approach basically implements monitors <ref> [2, 4] </ref>, but without the syntactic sugar. Mutually exclusive access to mutable data is necessary to prevent corruption of data. As simple example, consider concurrent attempts to update a simple counter. <p> Examples The following example illustrates how the facilities described here can be used to program Hoare monitors <ref> [2] </ref>. The program would be compiled and linked by the command cc hoaremonitor.c -lthreads -lmach /* * Producer/consumer with bounded buffer. * * The producer reads characters from stdin * and puts them into the buffer. The consumer * gets characters from the buffer and writes them * to stdout.
Reference: [3] <author> Robert V. Baron, Richard F. Rashid, Ellen Siegel, Avadis Tevanian, and Michael W. Young. MACH-1: </author> <title> A Multiprocessor Oriented Operating System and Environment. </title> <editor> In Arthur Wouk (editor), </editor> <title> New Computing Environments: Parallel, Vector, and Symbolic. </title> <publisher> SIAM, </publisher> <year> 1986. </year>
Reference-contexts: 1. Introduction MACH provides a set of low-level, language-independent primitives for manipulating threads of control <ref> [3] </ref>. The C Threads package is a run-time library that provides a C language interface to these facilities [1].
Reference: [4] <author> Butler W. Lampson and David D. Redell. </author> <title> Experience with Processes and Monitors in Mesa. </title> <journal> Communications of the ACM 23(2) </journal> <pages> 105-117, </pages> <month> February, </month> <year> 1980. </year>
Reference-contexts: 1. Introduction MACH provides a set of low-level, language-independent primitives for manipulating threads of control [3]. The C Threads package is a run-time library that provides a C language interface to these facilities [1]. The constructs provided are similar to those found in Mesa <ref> [4] </ref> and Modula-2+ [5]: forking and joining of threads, protection of critical regions with mutex variables, and synchronization by means of condition variables. 2. Naming Conventions An attempt has been made to use a consistent style of naming for the abstractions implemented by the C Threads package. <p> In general, these primitives are used to constrain the possible interleavings of threads' execution streams. They separate the two most common uses of Dijkstra's P () and V () operations into distinct facilities. This approach basically implements monitors <ref> [2, 4] </ref>, but without the syntactic sugar. Mutually exclusive access to mutable data is necessary to prevent corruption of data. As simple example, consider concurrent attempts to update a simple counter.

References-found: 4

