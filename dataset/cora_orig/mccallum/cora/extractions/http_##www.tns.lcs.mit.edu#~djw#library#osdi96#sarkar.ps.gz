URL: http://www.tns.lcs.mit.edu/~djw/library/osdi96/sarkar.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/osdi96/index.html
Root-URL: 
Email: Email: office@usenix.org  
Title: Efficient Cooperative Caching using Hints  
Phone: 1. Phone: 510 528-8649 2. FAX: 510 548-5738 3.  4.  
Author: Prasenjit Sarkar and John Hartman 
Affiliation: University of Arizona  
Web: WWW URL: http://www.usenix.org  
Date: October 1996  
Note: The following paper was originally published in the Proceedings of the USENIX 2nd Symposium on Operating Systems Design and Implementation Seattle, Washington,  For more information about USENIX Association contact:  
Abstract-found: 0
Intro-found: 1
Reference: [Anderson95] <author> T. E. Anderson, Michael D. Dahlin, Jeanna M. Neefe, David A. Patterson, Drew S. Roselli, and Randolph Y. Wang. </author> <title> Serverless Network File Systems. </title> <booktitle> In Proceedings of the 15th Symposium on Operating System Principles, </booktitle> <pages> pages 109-126, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: The authors provided a partial refinement of the algorithm in the description of the xfs file system <ref> [Anderson95] </ref>. A subsequent paper by Fee-ley et al.[Feeley95] described the Global Memory Service (GMS) which provided better performance than N-chance as well as reduced overhead. This section discusses these two algorithms. <p> The N-chance and GMS simulators used in these simulations were derived from the simulators created by the systems' designers. The N-chance simulator was modified to incorporate additional functionality used in the xfs file system <ref> [Anderson95] </ref>. In the modified system, a manager preferentially forwards a request to the cooperative cache instead of a server, improving the cooperative cache hit rate and reducing the load on the servers. The GMS simulator was modified to add a file-based consistency mechanism.
Reference: [Baker91] <author> Mary G. Baker, John H. Hartman, Michael D. Kupfer, Ken W. Shirriff, and John K. Ousterhout. </author> <title> Measurements of a Distributed File System. </title> <booktitle> In Proceedingsof the 13th Symposium on Operating System Principles, </booktitle> <pages> pages 198-212, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Although the server cache is lower in the storage hierarchy than the client caches and therefore has a lower hit rate, studies have shown that the server cache is still effective at reducing server disk traffic and improving the performance of the file system <ref> [Baker91] </ref>. The benefits of a server cache are less apparent with cooperative caching because the vast majority of local cache misses are serviced by the cooperative cache. This raises the issue of what to do with the server memory. <p> One drawback is that file-based consistency does not handle concurrent write-sharing of a file by multiple clients as efficiently as block-based consistency, but this pattern of file access is rare in distributed file systems <ref> [Baker91] </ref>. 3 Previous Algorithms The original paper on cooperative caching by Dahlin et al.[Dahlin94] described a variety of different schemes for implementing cooperative caching, and settled on one called N-chance as providing the best performance with the lowest overhead. <p> We describe the simulation environment, the criteria for evaluating the algorithms, and the ideal algorithms against which the other algorithms are compared. 5.1 Simulation Environment The algorithms were evaluated using trace-driven simulation. The traces of the Sprite distributed file system <ref> [Baker91] </ref> were used to drive the simulator. These traces cover four two-day periods, and record file system accesses by user programs, such as opening and closing files, and seeking on file descriptors. Actual read and write events were not recorded, but can be inferred from file offsets in other records.
Reference: [Belady66] <author> L. A. Belady. </author> <title> A Study of Replacement Algorithms for a Virtual-Storage Computer. </title> <journal> IBM Systems Journal, </journal> <volume> 5(2) </volume> <pages> 78-101, </pages> <year> 1966. </year>
Reference-contexts: It has been shown that this replacement policy is optimal because it minimizes the number of cache misses <ref> [Belady66] </ref> and therefore has the lowest block access time. The Optimal replacement algorithm for a cooperative cache differs from that in a virtual memory system in that block location must be considered when determining which block to replace.
Reference: [Carter91] <author> J. B. Carter, J. K. Bennett, and W. Zwaenepoel. </author> <title> Implementation and Performance of Munin. </title> <booktitle> In Proceedingsof the 13th Symposium on Operating System Principles, </booktitle> <pages> pages 152-164, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: However, message costs are greater in distributed file systems than in multiprocessors and have a greater impact on performance. Thus there must be a concerted effort to reduce the number and size of messages required. This is one focus of research on distributed shared memory <ref> [Carter91] </ref>. The discard cache is similar in purpose to the victim cache proposed by Jouppi [Jouppi90]. A victim cache is a small fully-associative miss cache that is placed between a direct-mapped processor cache and the main memory system.
Reference: [Comer90] <author> Douglas E. Comer and J. Griffioen. </author> <title> A New Design for Distributed Systems: The Remote Memory Model. </title> <booktitle> In Proceedings of the Summer 1990 Usenix Conference, </booktitle> <pages> pages 127-135, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: The remaining algorithms all perform close to the optimal. 7 Related Work Cooperative caching for file systems developed from research involving remote memory usage. The idea of remote memory servers in distributed systems was first introduced by Comer and Griffioen in <ref> [Comer90] </ref>. Fel-ten and Zahorjan proposed the use of idle machines as remote memory servers in [Felten91]. Franklin et al. in [Franklin92] introduced the concept of remote client servers to extend the traditional client-server database architecture.
Reference: [Dahlin94] <author> Michael D. Dahlin, Randolph Y. Wang, Thomas E. Anderson, and David A. Patter-son. </author> <title> Cooperative Caching: Using Remote Client Memory to improve File System Performance. </title> <booktitle> In Proceedings of the 1st Symposium on Operating System Design and Implementation, </booktitle> <pages> pages 267-280, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: A solution is to add another level to the storage hierarchy, one that allows a client to access blocks cached by other clients. This technique is known as cooperative caching <ref> [Dahlin94] </ref> and it reduces the load on the server by allowing some local client cache misses to be handled by other clients.
Reference: [Feeley95] <author> Michael J. Feeley, William E. Morgan, Fred-eric H. Pighin, Anna R. Karlin, and Henry M. Levy. </author> <title> Implementing Global Memory Management in a Workstation Cluster. </title> <booktitle> In Proceedings of the 15th Symposium on Operating System Principles, </booktitle> <pages> pages 201-212, </pages> <month> December </month> <year> 1995. </year>
Reference: [Felten91] <author> Edward W. Felten and J. Zahorjan. </author> <title> Issues in the Implementation of a Remote Memory Paging System. </title> <type> Technical Report 91-03-09, </type> <institution> University of Washington, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: The idea of remote memory servers in distributed systems was first introduced by Comer and Griffioen in [Comer90]. Fel-ten and Zahorjan proposed the use of idle machines as remote memory servers in <ref> [Felten91] </ref>. Franklin et al. in [Franklin92] introduced the concept of remote client servers to extend the traditional client-server database architecture. Leff et al. in [Leff91] showed that memory must be dynamically partitioned between local and remote client needs to maximize hit rates.
Reference: [Franklin92] <author> Michael J. Franklin, Michael J. Carey, and Miron Livny. </author> <title> Global Memory Management in a Client-Server DBMS Architectures. </title> <booktitle> In Proceedings of the 18th VLDB Conference, </booktitle> <pages> pages 596-609, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: The idea of remote memory servers in distributed systems was first introduced by Comer and Griffioen in [Comer90]. Fel-ten and Zahorjan proposed the use of idle machines as remote memory servers in [Felten91]. Franklin et al. in <ref> [Franklin92] </ref> introduced the concept of remote client servers to extend the traditional client-server database architecture. Leff et al. in [Leff91] showed that memory must be dynamically partitioned between local and remote client needs to maximize hit rates.
Reference: [Howard88] <author> John H. Howard, Michael L. Kazar, Sherri G. Menees, David A. Nichols, M. Satyanarayanan, Robert N. Sidebotham, and Michael J. West. </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Transactions of Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Caching is a common technique for improving the performance of distributed file systems <ref> [Howard88, Nelson93, Sandberg85] </ref>. Client caches filter application I/O requests to avoid network and server traffic, while server caches filter client cache misses to reduce disk accesses.
Reference: [Jouppi90] <author> Norman P. Jouppi. </author> <title> Improving Direct-Mapped Cache Performance by the Addition of a Small Fully-Associative Cache and Prefetch Buffers. </title> <booktitle> In Proceedings of the 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 364-373, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Thus there must be a concerted effort to reduce the number and size of messages required. This is one focus of research on distributed shared memory [Carter91]. The discard cache is similar in purpose to the victim cache proposed by Jouppi <ref> [Jouppi90] </ref>. A victim cache is a small fully-associative miss cache that is placed between a direct-mapped processor cache and the main memory system. The victim cache is loaded with the victim of a cache miss rather than the missed cache line itself.
Reference: [Leff91] <author> Avraham Leff, Philip S. Yu, and Joel L. Wolf. </author> <title> Policies for Efficient Memory Utilization in a Remote Caching Architecture. </title> <booktitle> In Proceedings of the First International Conference on Parallel and Distributed Information Systems, </booktitle> <pages> pages 198-207, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Fel-ten and Zahorjan proposed the use of idle machines as remote memory servers in [Felten91]. Franklin et al. in [Franklin92] introduced the concept of remote client servers to extend the traditional client-server database architecture. Leff et al. in <ref> [Leff91] </ref> showed that memory must be dynamically partitioned between local and remote client needs to maximize hit rates. Our use of hints to perform block lookup is similar to the techniques used to perform page lookup in distributed shared memory systems that support parallel computation.
Reference: [Lenoski90] <author> D. Lenoski, J. Laudon, K. Gharachorloo, A. Gupta, and J. Hennessy. </author> <title> The Directory-based Cache Coherence Protocol for the DASH Multiprocessor. </title> <booktitle> In Proceedings of the 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 148-159, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The work of Li and Hudak relies on the virtual memory systems of the individual machines to swap pages to disk, rather than forwarding pages to other nodes. Cooperative caching is also related to multiprocessor caching in shared memory machines <ref> [Lenoski90] </ref>. However, message costs are greater in distributed file systems than in multiprocessors and have a greater impact on performance. Thus there must be a concerted effort to reduce the number and size of messages required. This is one focus of research on distributed shared memory [Carter91].
Reference: [Li89] <author> Kai Li and Paul Hudak. </author> <title> Memory Coherence in Shared Virtual Memory Systems. </title> <journal> ACM Transactions of Computer Systems, </journal> <volume> 7(4) </volume> <pages> 321-359, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Our use of hints to perform block lookup is similar to the techniques used to perform page lookup in distributed shared memory systems that support parallel computation. Li and Hudak describe several strategies for managing distributed shared pages <ref> [Li89] </ref>, including a dynamic distributed manager algorithm in which nodes send page requests to the probable owner of the page. If the target node does not have the page, it forwards the request to the node it believes to be the probable owner.
Reference: [Nelson93] <author> Michael N. Nelson, Brent B. Welch, and John K. Ousterhout. </author> <title> Caching in the Sprite Network File System. </title> <journal> ACM Transactions of Computer Systems, </journal> <volume> 11(2) </volume> <pages> 228-239, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Caching is a common technique for improving the performance of distributed file systems <ref> [Howard88, Nelson93, Sandberg85] </ref>. Client caches filter application I/O requests to avoid network and server traffic, while server caches filter client cache misses to reduce disk accesses.
Reference: [Sandberg85] <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and Implementation of the Sun Network File System. </title> <booktitle> In Proceedings of the Summer 1985 Usenix Conference, </booktitle> <pages> pages 119-130, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: 1 Introduction Caching is a common technique for improving the performance of distributed file systems <ref> [Howard88, Nelson93, Sandberg85] </ref>. Client caches filter application I/O requests to avoid network and server traffic, while server caches filter client cache misses to reduce disk accesses.
References-found: 16

