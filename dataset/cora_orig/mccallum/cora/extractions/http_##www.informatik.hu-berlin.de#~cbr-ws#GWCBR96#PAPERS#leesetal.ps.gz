URL: http://www.informatik.hu-berlin.de/~cbr-ws/GWCBR96/PAPERS/leesetal.ps.gz
Refering-URL: http://www.informatik.hu-berlin.de/~cbr-ws/GWCBR96/program.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: 1  
Title: Applying Case-Based Reasoning to Software Quality Management  
Author: B Lees M Hamza and C Irgens 
Keyword: case-based reasoning, quality function deployment, software quality  
Address: Paisley, Paisley PA1 2BE, Scotland UK  
Affiliation: University of  Department of Computing Information Systems 2 Department of Mechanical Manufacturing Engineering  
Abstract: An investigation is described into the application of quality function deployment (QFD) and case based reasoning (CBR) to software quality assessment. It is believed that the integration of CBR and QFD may be an effective means of supporting the development of quality software. The main aim in the research is to develop a CBR oriented software quality advisor to support the attainment of quality in software development, by reference to quality case histories using software modules from previous designs. A model linking CBR and QFD mechanisms is presented. Current work is centred on the development of a prototype system in the form of a shell incorporating an interface linking the user requirements, the QFD and CBR mechanisms, and supported by a dynamic library of case histories.
Abstract-found: 1
Intro-found: 1
Reference: <author> Akao, Y. (ed.). </author> <title> Quality Function Deployment: Integrating Customer Requirements into Product Design. </title> <publisher> Productivity Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: Quality function deployment (QFD) is a method for transforming user requirements into product and process characteristics with the aims of producing quality products that meet customer requirements and simultaneously satisfy other requirements <ref> (Akao, 1990) </ref>. This approach helps to ensure that customer needs and expectations directly influence the definition, design, implementation and deployment of products and services.
Reference: <author> Fenton, N.E. </author> <title> Software Metrics: A Rigorous Approach, </title> <publisher> Chapman and Hall, </publisher> <year> 1991. </year>
Reference-contexts: A many-to-many relationship exists among quality criteria and quality factors. The hierarchical model is based on the assumption that ...the extent to which a quality criterion is present in a product can be measured using quality metrics <ref> (Fenton, 1991) </ref>. quality factor quality factor quality quality quality quality criterion criterion criterion criterion quality quality quality quality metric metric metric metric Lees, Hamza and Irgens Applying CBR to QFD In McCall's model of software quality (McCall, 1978), which addresses product operation, product revision and product transition, the software factors are
Reference: <author> Garvin, D. </author> <title> What does product quality really mean? Sloan Management Review, </title> <booktitle> Fall 1984, </booktitle> <pages> pp. 25-45. </pages>
Reference-contexts: Software Quality Assessment With the aim of improving software quality, some software companies have taken a product-based approach, whilst others have concentrated on process. From a study of how quality is perceived in various domains, including philosophy, economics, marketing and operations management, <ref> (Garvin, 1984) </ref> concluded that ...quality is a complex and multifaceted concept, and that it may be prescribed from several different perspectives: transcendental view: something that can be recognised, but not defined, user view: fitness for purpose, manufacturing view: conformance to specifications, product view: tied to the inherent characteristics of the product,
Reference: <author> Gillies, A. </author> <title> Software Quality: Theory and Management, </title> <publisher> Chapman and Hall, </publisher> <year> 1992. </year>
Reference-contexts: Quality is built into a software product through a series of testing stages: unit testing; integration testing; system testing; acceptance testing. One approach to software quality measurement employs a hierarchical model <ref> (Gillies, 1992) </ref>. In this model, each quality factor is broken down into quality criteria, which are then subdivided into quality metrics, to assess the criteria (Figure 1). A software product is characterised by its quality factors. <p> 1991). quality factor quality factor quality quality quality quality criterion criterion criterion criterion quality quality quality quality metric metric metric metric Lees, Hamza and Irgens Applying CBR to QFD In McCall's model of software quality (McCall, 1978), which addresses product operation, product revision and product transition, the software factors are <ref> (Gillies, 1992) </ref>: useability (ease of use of the software) integrity (protection from unauthorised access) efficiency (use of resources) correctness (extent to which a program fulfills its specifications reliability (ability not to fail) maintainability (effort to locate and fix a fault) flexibility (ease by which changes may be made) portability (effort required
Reference: <author> Hamza, M., Lees, B. and Irgens, C. </author> <title> The Extension of Software Metrics in ObjectOriented Development, Procs. </title> <booktitle> SQM95: International Conference on Software Quality Management, Seville, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: To achieve the quality required, the quality attributes of the software system need to be quantified. The software metrics to be measured depend on the technique used in the development, e.g. whether it is a structured or an objectoriented technique <ref> (Hamza et al., 1995) </ref>. These metrics are determined by reference to stored knowledge which relates software metrics to particular types of software development, this having been established from experience obtained from previous software development.
Reference: <author> Hamza, M., Lees, B., Irgens, C. and El Gamal, Y. </author> <title> Quality function deployment for software development: an A.I. approach, Procs. </title> <address> TQM94, AMTA, Alexandria, Egypt, </address> <month> April </month> <year> 1994. </year> <title> IEEE Computer Society, Standards for a Software Quality Metrics Methodology, </title> <booktitle> 1989, </booktitle> <pages> pp 1061/D20. </pages>
Reference-contexts: The aim of the current investigation is to develop a case-based reasoning supported software quality advisor that may assist in the attainment of high quality software <ref> (Hamza et al., 1994) </ref>.
Reference: <author> Kolodner, J. </author> <title> Case-Based Reasoning, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: An alternative strategy is to make use of experience gained in previous designs. It is in this respect that the application of a case-based reasoning approach <ref> (Kolodner, 1993) </ref> would appear to offer a potentially promising approach to the solution of new software quality assessment problems, by adapting previously stored solutions that have been found to be effective in the solution of earlier problems.
Reference: <author> McCall, J.A., et al. </author> <title> Concepts and definitions of software quality: factors in software quality, </title> <journal> NTIS, </journal> <volume> vol. 1, </volume> <year> 1978. </year>
Reference-contexts: a quality criterion is present in a product can be measured using quality metrics (Fenton, 1991). quality factor quality factor quality quality quality quality criterion criterion criterion criterion quality quality quality quality metric metric metric metric Lees, Hamza and Irgens Applying CBR to QFD In McCall's model of software quality <ref> (McCall, 1978) </ref>, which addresses product operation, product revision and product transition, the software factors are (Gillies, 1992): useability (ease of use of the software) integrity (protection from unauthorised access) efficiency (use of resources) correctness (extent to which a program fulfills its specifications reliability (ability not to fail) maintainability (effort to locate
Reference: <author> Qiu, F. </author> <title> An expert system approach to modelling and planning software product assessment and certification, </title> <type> PhD Thesis, </type> <institution> Software Measurement Laboratory, Glasgow Caledonian University, </institution> <year> 1995. </year>
Reference-contexts: However, the application of artificial intelligence offers much potential for enhancing the support for quality assessment in software development. One strategy is to apply knowledge-based methods <ref> (Qiu, 1995) </ref>.
Reference: <author> Zairi, M. </author> <title> Quality Function Deployment: A Modern Competitive Tool, </title> <publisher> Technical Communications (Publishing) Ltd. </publisher> <address> U.K., </address> <year> 1993. </year>
Reference-contexts: Quality Function Deployment One of the promising techniques in current, customer-driven engineering is quality function deployment <ref> (Zairi, 1993) </ref>. Quality function deployment (QFD) is a method for transforming user requirements into product and process characteristics with the aims of producing quality products that meet customer requirements and simultaneously satisfy other requirements (Akao, 1990).
References-found: 10

