URL: ftp://ftp.cs.toronto.edu/pub/kbms/kr92.ps.Z
Refering-URL: ftp://ftp.cs.toronto.edu/pub/kbms/readme.html
Root-URL: 
Email: vinay@ai.toronto.edu  vassos@db.toronto.edu  jm@ai.toronto.edu  
Title: Concurrency Control for Knowledge Bases  
Author: Vinay K. Chaudhri Vassos Hadzilacos John Mylopoulos 
Address: Toronto, M5S 1A4, Ontario, CANADA  
Affiliation: Department of Computer Science, University of Toronto  
Abstract: As the demand for ever-larger knowledge bases grows, knowledge base management techniques assume paramount importance. In this paper we show that large, multi-user knowledge bases need concurrency control. We discuss known techniques from database concurrency control and explain their inadequacies in the context of knowledge bases. We offer a concurrency control algorithm, called the Dynamic Directed Graph (DDG) policy that addresses the specific needs of knowledge bases. The DDG policy exploits the rich structure of a knowledge base to support the interleaved, concurrent execution of several user requests, thereby improving overall system performance. We give a proof of correctness of the proposed concur-rency control algorithm and an analysis of its properties. We demonstrate that these results from concurrency control interact in interesting ways with knowledge base features and highlight the importance of performance-oriented tradeoffs in the design of knowledge based systems. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Allen, J. F. </author> <year> 1983. </year> <title> Maintaining Knowledge about Temporal Intervals. </title> <journal> Communications of the ACM, </journal> <volume> 26(11) </volume> <pages> 832-843. </pages>
Reference-contexts: Other examples of such potentially global knowledge base operations include truth maintenance systems (de Kleer 1986), temporal reasoning <ref> (Allen 1983) </ref> and recursive queries (Naqvi and Tsur 1989). In such situations, if we use 2PL, transactions will end up locking large portions of the knowledge base for long periods of time, thus significantly reducing concurrency.
Reference: <author> Berghouti, N. S. and Kaiser, G. E. </author> <year> 1991. </year> <title> Concur-rency Control in Advanced Database Applications. </title> <journal> Computing Surveys, </journal> <volume> 23(3) </volume> <pages> 269-318. </pages>
Reference-contexts: Neither of these papers addresses the problem that the large portions need to be locked in knowledge bases, and that the internal structure of a knowledge base may be used to do more efficient concurrency control. There is a flurry of work on flexible transaction models <ref> (Berghouti and Kaiser 1991) </ref> focusing on the problems that arise in domains such as software engineering and CAD. Multidatabase concurrency control looks at the situations when a transaction can span more than one system (Breitbart, Garcia-Molina and Silberschatz 1992).
Reference: <author> Bernstein, P. A., Hadzilacos, V., and Goodman, N. </author> <year> 1987. </year> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Welssley Publishing Company. </publisher>
Reference: <author> Bernstein, P. A., Rothnie, J. B. J., Goodman, N., and Papadimitriou, C. H. </author> <year> 1978. </year> <title> The Concur-rency Control Mechanism of SDD-1: A System for Distributed Databases (The Fully Redundant Case). </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 4(3) </volume> <pages> 154-168. </pages>
Reference: <author> Brachman, R. J. and Levesque, H. J., </author> <title> editors 1985. Readings in Knowledge Representation and Reasoning. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> Los Altos, CA. </address>
Reference-contexts: problems caused by arbitrary interleaving and the concurrency control problems that need to be solved for knowledge bases. 2.1 AN EXAMPLE KNOWLEDGE BASE For the purposes of this paper, 4 knowledge bases are assumed to support an object-oriented representational framework with an assertional sub-language 4 For an extensive survey, see <ref> (Brachman and Levesque 1985) </ref>. used for both deductive rules and constraints. Also, possibly, they might support facilities for representing special kinds of knowledge (for example, temporal knowledge, incomplete knowledge, etc.). <p> This suggests the existence of an expressiveness vs performance tradeoff meaning that good performance considerations dictate ruling out certain knowledge base designs (for example, a knowledge base with too many large cycles). The expressiveness vs performance tradeoff is analogous to the expressiveness vs tractability tradeoff <ref> (Levesque and Brachman 1985) </ref> where complexity considerations dictate ruling out certain knowledge base designs. Performance, measured in terms of throughput and response time (Lazowska et al. 1984), is a measure of desirability, similar and related to complexity | but may be of more pragmatic nature.
Reference: <author> Breitbart, Y., Garcia-Molina, H., and Silberschatz, A. </author> <year> 1992. </year> <title> Overview of Multidatabase Transaction Management. </title> <type> Technical Report STAN-CS-92-1432, </type> <institution> Stanford University. </institution>
Reference-contexts: There is a flurry of work on flexible transaction models (Berghouti and Kaiser 1991) focusing on the problems that arise in domains such as software engineering and CAD. Multidatabase concurrency control looks at the situations when a transaction can span more than one system <ref> (Breitbart, Garcia-Molina and Silberschatz 1992) </ref>.
Reference: <author> Brodie, M. L. </author> <year> 1989. </year> <title> Future Intelligent Information Systems: AI and Database Technologies Working Together. </title> <editor> In Mylopoulos, J. and Brodie, M. L., editors, </editor> <booktitle> Artificial Intelligence and Databases. </booktitle> <publisher> Morgan Kaufmann Publishers Inc., </publisher> <address> CA. </address>
Reference-contexts: This research will be useful for knowledge bases because we can easily visualize situations when a part of a 9 This condition is necessary to guarantee the safety of a locking policy (Yannakakis 1982a). transaction is executed in a knowledge base (inference) and a part in a database (data retrieval) <ref> (Brodie 1989) </ref>. We do not address the problem of multidatabase transactions in our research. According to our knowledge, concurrency control has not received the attention of AI community.
Reference: <author> Chaudhri, V. K., Hadzilacos, V., and Mylopoulos, J. </author> <year> 1992. </year> <title> Concurrency Control for Knowledge Bases. </title> <type> Technical Report Forthcoming, </type> <institution> University of Toronto. de Kleer, J. </institution> <year> 1986. </year> <title> An assumption-based TMS. </title> <journal> Artificial Intelligence An International Journal, </journal> <volume> 28(2) </volume> <pages> 127-162. </pages>
Reference-contexts: Therefore, we have adopted the locking class of methods for knowledge bases. In the rest of the paper, we will focus on locking algorithms. The discussion on the other methods can be found in <ref> (Chaudhri, Hadzilacos and Mylopoulos 1992) </ref>. We will describe here two well-known locking algorithms. The first, known as two phase locking, does not make any assumption about the structure of the underlying data. <p> S 0 is the serial execution of T 1 ; : : : ; T 0 k in this order. (3b) Furthermore, S 0 can be extended to a complete schedule, that is, can avoid deadlock. The details of the proof of this theorem can be found in <ref> (Chaudhri, Hadzilacos and Mylopoulos 1992) </ref>. fl Theorem 2 Dynamic Directed Graph policy is a safe policy. Proof Outline: Suppose it is not.
Reference: <author> Elkan, C. </author> <year> 1990. </year> <title> Independence of Logic Database Queries and Updates. </title> <booktitle> In Proceedings of the 1990 Principles of Database Systems Conference, </booktitle> <pages> pages 154-160. </pages>
Reference-contexts: Similar efforts have been made in (Filman 1989; Ishida, Yokoo and Gasser 1990; Schmolze and Goel 1990). (Garza and Kim 1988) studies concurrency control problem for object-oriented databases and proposes a locking method that has provisions for variable units of locking. <ref> (Elkan 1990) </ref> looks at deductive databases and proposes efficient algorithms for checking conflicts between transactions.
Reference: <author> Eswaran, K., Gray, J. N., Lorie, R. A., and Traiger, I. L. </author> <year> 1976. </year> <title> The Notions of Consistency and Predicate Locks in Database Systems. </title> <journal> Communications of the ACM, </journal> <volume> 19(9) </volume> <pages> 624-633. </pages>
Reference-contexts: We will describe here two well-known locking algorithms. The first, known as two phase locking, does not make any assumption about the structure of the underlying data. The second, known as the DAG policy, assumes that the underlying data is structured as a directed acyclic graph. Two-phase locking (2PL) <ref> (Eswaran et al. 1976) </ref> in simplified terms works as follows: TP1. Associated with each data item is a distinct "lock". A transaction must acquire a lock on a data item before accessing it. TP2.
Reference: <author> Filman, R. E. </author> <year> 1989. </year> <title> New Generation Knowledge System Development Tools. </title> <type> Technical Report DARPA Contract No. </type> <institution> F30602-85-C-0065, Intel-liCorp Inc. </institution>
Reference: <author> Forgy, C. L. </author> <year> 1982. </year> <title> Rete: A Fast Algorithm for the Many Pattern/Many Object Pattern Match Problem. </title> <journal> Artificial Intelligence An International Journal, </journal> <volume> 19(1) </volume> <pages> 17-37. </pages>
Reference-contexts: the DDG policy as our initial design. 4 RELATED WORK, CONCLUSIONS AND SUMMARY There has been very little work on concurrency control with a specific reference to knowledge bases. (Raschid, Sellis and Lin 1988) uses concurrency to improve the performance of rule execution in the context of the OPS5 system <ref> (Forgy 1982) </ref>. Their proposal is to paral-lelize the inference process of one user, whereas our focus is on parallelizing the operations of different users.
Reference: <author> Garza, J. F. and Kim, W. </author> <year> 1988. </year> <title> Transaction Management in an Object-Oriented Database Systems. </title> <booktitle> In Proceedings of the 1988 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 37-45, </pages> <address> Chicago, IL. </address>
Reference-contexts: Their proposal is to paral-lelize the inference process of one user, whereas our focus is on parallelizing the operations of different users. Similar efforts have been made in (Filman 1989; Ishida, Yokoo and Gasser 1990; Schmolze and Goel 1990). <ref> (Garza and Kim 1988) </ref> studies concurrency control problem for object-oriented databases and proposes a locking method that has provisions for variable units of locking. (Elkan 1990) looks at deductive databases and proposes efficient algorithms for checking conflicts between transactions.
Reference: <author> Genesereth, M. R. and Nilsson, N. J. </author> <year> 1987. </year> <booktitle> Logical Foundations of Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <address> Los Altos, CA. </address>
Reference-contexts: This has serious performance implications for the type of transactions likely to be applied to knowledge bases. For example, in the knowledge base KB 1 (Figure 3), while proving a goal through backward chaining <ref> (Genesereth and Nilsson 1987) </ref>, a transaction is likely to access all the items that are below that goal in the inference graph, potentially a set including all deductive rules.
Reference: <author> Gray, J. N. </author> <year> 1992. </year> <type> Personal Communication. </type>
Reference-contexts: to fit a large knowledge base such as CYC (Lenat and Guha 1989) in main memory. 2 Measured by the number of user requests executed on average per unit of time. 3 Concurrent processing can lead to arbitrary improvements in performance | sometimes of the order of one hundred times <ref> (Gray 1992) </ref>.
Reference: <author> Ishida, T., Yokoo, M., and Gasser, L. </author> <year> 1990. </year> <title> An Organizational Approach to Adaptive Production Systems. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 52-58, </pages> <address> Boston, MA. </address>
Reference: <author> Italiano, G. F. </author> <year> 1986. </year> <title> Amortized Efficiency of a Path Retrieval Data Structure. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 48(2,3):273-281. </address>
Reference: <author> Italiano, G. F. </author> <year> 1988. </year> <title> Finding Paths and Deleting Edges in Directed Acyclic Graphs. </title> <journal> Information Processing Letters, </journal> <volume> 28(1) </volume> <pages> 5-11. </pages>
Reference: <author> Lazowska, E. D., Zahorjan, J., Graham, G. S., and Sevcik, K. C. </author> <year> 1984. </year> <title> Quantitative System Performance: Computer System Analysis using Queueing Network Models. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Engle-wood Cliffs, NJ. </address>
Reference-contexts: Even when there are no disk waits, performance studies indicate that a round robin scheduling discipline that allows interleaved processing of user requests gives best overall performance <ref> (Lazowska et al. 1984) </ref>. (b)(a) Processing requests concurrentlyProcessing one request at a time Disk waits ConcurrencyNo Concurrency Time Reponse Number of Users Throughput Number of Users edge bases. We analyze its correctness and discuss how the interaction between the design of this algorithm and knowledge base features. <p> The expressiveness vs performance tradeoff is analogous to the expressiveness vs tractability tradeoff (Levesque and Brachman 1985) where complexity considerations dictate ruling out certain knowledge base designs. Performance, measured in terms of throughput and response time <ref> (Lazowska et al. 1984) </ref>, is a measure of desirability, similar and related to complexity | but may be of more pragmatic nature. Furthermore, the designs ruled out by the complexity considerations are not likely to be the same as those ruled out for performance reasons.
Reference: <author> Lenat, D. B. and Guha, R. </author> <year> 1989. </year> <title> Building Large Knowledge-based Systems: Representation and inference in the Cyc Project. </title> <address> Reading, </address> <publisher> Mass.:Addison-Wesley Publishing Co. </publisher>
Reference-contexts: In the present paper, we concentrate on the problem of concurrency control. We propose a concurrency control algorithm that suits the requirements of knowl 1 It will not be possible to fit a large knowledge base such as CYC <ref> (Lenat and Guha 1989) </ref> in main memory. 2 Measured by the number of user requests executed on average per unit of time. 3 Concurrent processing can lead to arbitrary improvements in performance | sometimes of the order of one hundred times (Gray 1992).
Reference: <author> Levesque, H. J. and Brachman, R. J. </author> <year> 1985. </year> <title> A Fundamental Tradeoff in Knowledge Representation and Reasoning. </title> <editor> In Brachman, R. J. and Levesque, H. J., editors, </editor> <booktitle> Readings in Knowledge Representation, </booktitle> <pages> pages 42-70. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> CA. </address>
Reference-contexts: problems caused by arbitrary interleaving and the concurrency control problems that need to be solved for knowledge bases. 2.1 AN EXAMPLE KNOWLEDGE BASE For the purposes of this paper, 4 knowledge bases are assumed to support an object-oriented representational framework with an assertional sub-language 4 For an extensive survey, see <ref> (Brachman and Levesque 1985) </ref>. used for both deductive rules and constraints. Also, possibly, they might support facilities for representing special kinds of knowledge (for example, temporal knowledge, incomplete knowledge, etc.). <p> This suggests the existence of an expressiveness vs performance tradeoff meaning that good performance considerations dictate ruling out certain knowledge base designs (for example, a knowledge base with too many large cycles). The expressiveness vs performance tradeoff is analogous to the expressiveness vs tractability tradeoff <ref> (Levesque and Brachman 1985) </ref> where complexity considerations dictate ruling out certain knowledge base designs. Performance, measured in terms of throughput and response time (Lazowska et al. 1984), is a measure of desirability, similar and related to complexity | but may be of more pragmatic nature.
Reference: <author> Mylopoulos, J., Borgida, A., Jarke, M., and Koubarakis, M. </author> <year> 1990. </year> <title> Telos: A Language for Representing Knowledge About Information Systems. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(4) </volume> <pages> 325-362. </pages>
Reference-contexts: T 1 and T 2 will perform these operations using UNTELL, TELL and ASK commands <ref> (Mylopoulos et al. 1990) </ref>. Consider the following interleaving of their operations: 1. T 1 executes an UNTELL removing DR1 from the knowledge base. 2. T 2 executes an ASK to find all WellPaid employees. Currently, the knowledge base contains only DR2.
Reference: <author> Naqvi, S. and Tsur, S. </author> <year> 1989. </year> <title> A Logical Language for Data and Knowledge Bases. </title> <publisher> Computer Science Press, </publisher> <address> New York. </address>
Reference-contexts: Other examples of such potentially global knowledge base operations include truth maintenance systems (de Kleer 1986), temporal reasoning (Allen 1983) and recursive queries <ref> (Naqvi and Tsur 1989) </ref>. In such situations, if we use 2PL, transactions will end up locking large portions of the knowledge base for long periods of time, thus significantly reducing concurrency.
Reference: <author> Nebel, B. </author> <year> 1988. </year> <title> Computational Complexity of Terminological Reasoning in BACK. </title> <journal> Artificial Intelligence An International Journal, </journal> <volume> 34(3) </volume> <pages> 371-383. </pages>
Reference: <author> Neches, R., Fikes, R., Finin, T., Gruber, T., Patil, R., Senator, T., and Swartout, W. </author> <year> 1991. </year> <title> Enabling Technology for Knowledge Sharing. </title> <journal> AI Magazine, </journal> <volume> 12(3) </volume> <pages> 36-56. </pages>
Reference-contexts: In addition to improving the performance of a system, concurrency promotes sharing of knowledge, which is expected to be increasingly important in the future <ref> (Neches et al. 1991) </ref>. In the present paper, we concentrate on the problem of concurrency control. <p> We believe that algorithms such as the ones presented in this paper constitute a modest contribution towards this direction and can provide an important enabling technology to the goal of knowledge sharing, as articulated in <ref> (Neches et al. 1991) </ref>. Acknowledgments This research was supported by the University of Toronto, the Information Technology Research Centre of Ontario, the Natural Science and Engineering Research Council of Canada and the Institute of Robotics and Intelligent Systems.
Reference: <author> Papadimitriou, C. </author> <year> 1979. </year> <title> Serializability of Concurrent Database Updates. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 26(4) </volume> <pages> 631-653. </pages>
Reference: <author> Papadimitriou, C. </author> <year> 1986. </year> <title> The Theory of Database Concurrency Control. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD. </address>
Reference-contexts: A partial schedule S of a transaction system t is a legal and a proper schedule of any prefixes of the transactions of t . In our model, the correctness of a schedule is equivalent to serializability. Serializability of a schedule can be easily decided as follows <ref> (Papadimitriou 1986) </ref>. Let e denote the set of nodes in an entity e (recall that an entity is a node or an edge).
Reference: <author> Raschid, L., Sellis, T., and Lin, C.-C. </author> <year> 1988. </year> <title> Exploiting Concurrency in a DBMS Implementation for Production Systems. </title> <booktitle> In Proceedings of the International Symposium on Databases in Parallel and Distributed Systems, </booktitle> <pages> pages 34-45, </pages> <address> Austin, TX. </address>
Reference-contexts: Based on these arguments, we have adopted the DDG policy as our initial design. 4 RELATED WORK, CONCLUSIONS AND SUMMARY There has been very little work on concurrency control with a specific reference to knowledge bases. <ref> (Raschid, Sellis and Lin 1988) </ref> uses concurrency to improve the performance of rule execution in the context of the OPS5 system (Forgy 1982). Their proposal is to paral-lelize the inference process of one user, whereas our focus is on parallelizing the operations of different users.
Reference: <author> Schmolze, J. G. and Goel, S. </author> <year> 1990. </year> <title> A Parallel Asyn-chronus Distributed Production System. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 65-71, </pages> <address> Boston, MA. </address>
Reference: <author> Silberschatz, A. and Kedem, Z. M. </author> <year> 1980. </year> <title> Consistency in Hierarchical Database Systems. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 27(1) </volume> <pages> 72-80. </pages>
Reference-contexts: Such deadlocks may be resolved by choosing one of the transactions, aborting it (i.e., undoing any effects it had on the knowledge base state), releasing its locks and restarting it at a later time. The DAG policy may be specified by the following rules <ref> (Silberschatz and Kedem 1980) </ref>: D1. A transaction may begin execution by locking any item. D2. Subsequently, it can lock an item if it has locked all the predecessors (i.e., parents) of that item in the past and is currently holding a lock on at least one of them. D3.
Reference: <author> Yannakakis, M. </author> <year> 1982a. </year> <title> A Theory of Safe Locking Policies in Database Systems. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 29(3) </volume> <pages> 718-740. </pages>
Reference-contexts: However, the DAG policy assumes that there are no cycles in the underlying structure and the structure does not undergo any change <ref> (Yannakakis 1982a) </ref>. Unfortunately, the structure of a knowledge base will contain cycles (e.g., in the inference graph generated for a collection of recursive rules) and will undergo change (e.g., when rule definitions are changed or rules are added or deleted). <p> All the locked transactions are well-formed in the sense that a transaction cannot perform any operation on an entity unless it holds a lock in it. It is possible to generalize our results to the case of non-well-formed policies <ref> (Yannakakis 1982a) </ref> but we make this assumption to keep the model simple and intuitive. <p> This research will be useful for knowledge bases because we can easily visualize situations when a part of a 9 This condition is necessary to guarantee the safety of a locking policy <ref> (Yannakakis 1982a) </ref>. transaction is executed in a knowledge base (inference) and a part in a database (data retrieval) (Brodie 1989). We do not address the problem of multidatabase transactions in our research. According to our knowledge, concurrency control has not received the attention of AI community.
Reference: <author> Yannakakis, M. </author> <year> 1982b. </year> <title> Freedom from Deadlock of Safe Locking Policies. </title> <journal> SIAM Journal of Computing, </journal> <volume> 11(2) </volume> <pages> 391-408. </pages>
Reference-contexts: It is easy to construct scenarios in which locks are acquired in such a manner that a deadlock arises <ref> (Yannakakis 1982b) </ref>: a cyclical sequence of transactions each waiting for the next to release a lock it must acquire.
References-found: 32

