URL: http://www.cl.cam.ac.uk:80/ftp/papers/reports/TR374-bs201-qos_updates.ps.gz
Refering-URL: http://www.cl.cam.ac.uk:80/ftp/papers/reports/
Root-URL: 
Email: E-Mail: Burkhard.Stiller@cl.cam.ac.uk  
Phone: Phone: +44 +1223 334476, FAX: +44 +1223 334678  
Title: A Framework for QoS Updates in a Networking Environment  Human Capital and Mobility Scheme  
Author: Burkhard Stiller 
Note: The author is currently on leave from  Germany, and is sponsored by the Commission of the European Communities as a Research Fellow under the  (RG 19327).  
Address: New Museums Site, Pembroke Street Cambridge, CB2 3QR, England, U.K.  Telematik, D-76128 Karlsruhe,  
Affiliation: University of Cambridge, Computer Laboratory  Universitat Karlsruhe, Institut fur  
Abstract: The support of sufficient Quality-of-Service (QoS) for applications residing in a distributed environment and running on top of high performance networks is a demanding issue. Currently, the areas to provide this support adequately include communication protocols, operating systems support, and offered network services. A configurable approach of communication protocols offers the needed protocol flexibility to react accordingly on various different requirements. Communication protocols and operating systems have to be parametrized using internal configuration parameters, such as window sizes, retry counters, or scheduling mechanisms, that rely closely on requested application-oriented or network-dependent QoS, such as bandwidth or delay. Moreover, these internal parameters have to be recalculated from time to time due to network changes (such as congestion or line break-down) or due to application-specific alterations (such as enhanced bandwidth requirements or increased reliability) to adjust a temporary or semi-permanent "out-of-tune" service behavior. Therefore, a rule-based evaluation and QoS updating framework for configuration parameters in a networking environment has been developed. The resulting "rulework" can be used within highly dynamic environments in a communication subsystem that offers the possibility to specify for every QoS parameter both a bounding interval of values and an average value. As an example, the framework has been integrated in the Function-based Communication Subsystem (F-CSS). Especially, an enhanced application service interface is offered, allowing for the specification of various QoS-parameters that are used to configure a sufficient application-tailored communication protocol. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ISO Standard, </author> <title> IS 7498, Information processing systems | Open Systems Interconnection | Basic Reference Model, </title> <year> 1985. </year>
Reference-contexts: 1 Introduction and Motivation As the variety of application requirements | often expressed in terms of Quality-of-Service (QoS) parameters | increases, the need for efficient end-system architectures becomes clear, since QoS requirements have to be supported efficiently. Traditional end-system architectures followed well-defined models (such as the ISO/OSI Basic Reference Model <ref> [1] </ref> or the Department of Defense Model [2]) and offered quite static services. Furthermore, corresponding service interfaces included only a very limited set of QoS parameters, which are not extensive, compared to currently required services.
Reference: [2] <author> D. Comer, </author> <title> Internetworking with TCP/IP Vol I: </title> <booktitle> Principles, Protocols, and Architecture, 2nd edition. </booktitle> <address> Englewood Cliffs, New Jersey, U.S.A.: </address> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Traditional end-system architectures followed well-defined models (such as the ISO/OSI Basic Reference Model [1] or the Department of Defense Model <ref> [2] </ref>) and offered quite static services. Furthermore, corresponding service interfaces included only a very limited set of QoS parameters, which are not extensive, compared to currently required services.
Reference: [3] <author> ISO Standard, </author> <title> IS 8072, Information processing systems | Open Systems Interconnection | Transport Service Definition, </title> <year> 1986. </year>
Reference-contexts: As an example, an isochronous service (such as audio or video) may be described by a delay jitter parameter, which is missing from the service specification of the Transport Protocol Number 4 (TP4) <ref> [3] </ref>, [4], while the Transmission Control Protocol (TCP) [5] does not support specific QoS parameters at all. Traditional protocols are not well suited for appropriate use on gigabit networks [6]. <p> In the ATM environment parameters such as "cell delay variation", "cell loss rate", or "peak cell rate" have been defined [14], [15]. Transport protocols use different parameters, e.g., "throughput", "delay", "residual error rate", or "priority" in TP 4 <ref> [3] </ref>, [4]. In the Function-based Communication Subsystem [7] the definition of quantitative (e.g., "jitter", "data loss", "data replication") and qualitative (e.g., "ordered delivery", or "intra-stream synchronization") QoS parameters has been proposed. Three different types of QoS values per quantitative QoS parameter are specified.
Reference: [4] <author> ISO Standard IS 8073, </author> <title> Information processing systems | Open Systems Interconnection | Trans port Protocol Definition, </title> <year> 1988. </year>
Reference-contexts: As an example, an isochronous service (such as audio or video) may be described by a delay jitter parameter, which is missing from the service specification of the Transport Protocol Number 4 (TP4) [3], <ref> [4] </ref>, while the Transmission Control Protocol (TCP) [5] does not support specific QoS parameters at all. Traditional protocols are not well suited for appropriate use on gigabit networks [6]. <p> In the ATM environment parameters such as "cell delay variation", "cell loss rate", or "peak cell rate" have been defined [14], [15]. Transport protocols use different parameters, e.g., "throughput", "delay", "residual error rate", or "priority" in TP 4 [3], <ref> [4] </ref>. In the Function-based Communication Subsystem [7] the definition of quantitative (e.g., "jitter", "data loss", "data replication") and qualitative (e.g., "ordered delivery", or "intra-stream synchronization") QoS parameters has been proposed. Three different types of QoS values per quantitative QoS parameter are specified.
Reference: [5] <author> DARPA, </author> <title> Transmission Control Protocol | DARPA Internet Protocol Specification, </title> <type> RFC 791, </type> <month> September </month> <year> 1981. </year>
Reference-contexts: As an example, an isochronous service (such as audio or video) may be described by a delay jitter parameter, which is missing from the service specification of the Transport Protocol Number 4 (TP4) [3], [4], while the Transmission Control Protocol (TCP) <ref> [5] </ref> does not support specific QoS parameters at all. Traditional protocols are not well suited for appropriate use on gigabit networks [6].
Reference: [6] <author> T. LaPorta and M. Schwartz, </author> <title> "Architectures, Features, and Implementation of High-Speed Trans port Protocols," </title> <journal> IEEE Network Magazine, </journal> <volume> vol. 5, </volume> <pages> pp. 14-22, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Traditional protocols are not well suited for appropriate use on gigabit networks <ref> [6] </ref>. Since established applications did not require various different services, former end-system architectures did and still do not offer the required service flexibilities, necessary for modern applications (such as tele-conferencing, tele-learning, virtual reality, or in general multimedia applications) and supported by configurable communication protocols.
Reference: [7] <author> M. Zitterbart, B. Stiller, and A. Tantawy, </author> <title> "A Model for High-Performance Communication Sub systems," </title> <journal> IEEE Journal on Selected Areas in Communication, </journal> <volume> vol. 11, </volume> <pages> pp. 507-518, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: A real-time video application requires different protocol functionality, e.g., jitter control and synchronization, than a reliable file-transfer, e.g., acknowledgements and checksumming, besides common functionality for both. Therefore, a suitable configuration of a communication protocol can be determined by QoS parameters specified by an application <ref> [7] </ref>. However in general, other areas of QoS-oriented work (such as modern protocols [8], new architectures [9], enhanced service interfaces [7], [10], and operating system support [11], [12]), which are taken up within the next Section 2, have to be regarded in an integrated manner, providing a suitable solution to QoS <p> Therefore, a suitable configuration of a communication protocol can be determined by QoS parameters specified by an application <ref> [7] </ref>. However in general, other areas of QoS-oriented work (such as modern protocols [8], new architectures [9], enhanced service interfaces [7], [10], and operating system support [11], [12]), which are taken up within the next Section 2, have to be regarded in an integrated manner, providing a suitable solution to QoS guarantees within a networking environment. <p> In the ATM environment parameters such as "cell delay variation", "cell loss rate", or "peak cell rate" have been defined [14], [15]. Transport protocols use different parameters, e.g., "throughput", "delay", "residual error rate", or "priority" in TP 4 [3], [4]. In the Function-based Communication Subsystem <ref> [7] </ref> the definition of quantitative (e.g., "jitter", "data loss", "data replication") and qualitative (e.g., "ordered delivery", or "intra-stream synchronization") QoS parameters has been proposed. Three different types of QoS values per quantitative QoS parameter are specified.
Reference: [8] <author> W. T. Strayer, B. J. Dempsey, and A. C. Weaver, XTP: </author> <title> The Xpress Transfer Protocol. </title> <address> Reading, Massachusetts, U.S.A.: </address> <publisher> Addison Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Therefore, a suitable configuration of a communication protocol can be determined by QoS parameters specified by an application [7]. However in general, other areas of QoS-oriented work (such as modern protocols <ref> [8] </ref>, new architectures [9], enhanced service interfaces [7], [10], and operating system support [11], [12]), which are taken up within the next Section 2, have to be regarded in an integrated manner, providing a suitable solution to QoS guarantees within a networking environment.
Reference: [9] <author> M. Zitterbart, </author> <title> "High-Speed Transport Components," </title> <journal> IEEE Network Magazine, </journal> <volume> vol. 5, </volume> <pages> pp. 54-63, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Therefore, a suitable configuration of a communication protocol can be determined by QoS parameters specified by an application [7]. However in general, other areas of QoS-oriented work (such as modern protocols [8], new architectures <ref> [9] </ref>, enhanced service interfaces [7], [10], and operating system support [11], [12]), which are taken up within the next Section 2, have to be regarded in an integrated manner, providing a suitable solution to QoS guarantees within a networking environment.
Reference: [10] <author> A. Danthine, </author> <title> The OSI'95 Transport Service with Multimedia Support | Research Reports ES PRIT, Project 5341, </title> <booktitle> Volume 1. </booktitle> <address> Berlin, Germany: </address> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: Therefore, a suitable configuration of a communication protocol can be determined by QoS parameters specified by an application [7]. However in general, other areas of QoS-oriented work (such as modern protocols [8], new architectures [9], enhanced service interfaces [7], <ref> [10] </ref>, and operating system support [11], [12]), which are taken up within the next Section 2, have to be regarded in an integrated manner, providing a suitable solution to QoS guarantees within a networking environment. <p> Finally, the useful value depicts a limit that bounds the usefulness of the QoS parameter for a specific application (such as minimal usable delay or maximum processable throughput). Each of these values may be utilized for different QoS enforcement strategies [16], [17]. Within the OSI'95 project <ref> [10] </ref> new QoS parameter definitions are included, e.g., for "transit delay", "transit delay jitter", and "throughput". Furthermore, two types of QoS negotiations are proposed.
Reference: [11] <author> E. A. Hyden, </author> <title> "Operating System Support for Quality-of-Service," </title> <type> Tech. Rep. 94-340, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <address> Cambridge CB2 3QG, England, U.K., </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Therefore, a suitable configuration of a communication protocol can be determined by QoS parameters specified by an application [7]. However in general, other areas of QoS-oriented work (such as modern protocols [8], new architectures [9], enhanced service interfaces [7], [10], and operating system support <ref> [11] </ref>, [12]), which are taken up within the next Section 2, have to be regarded in an integrated manner, providing a suitable solution to QoS guarantees within a networking environment. <p> One approach has been developed to integrate scheduling mechanisms, resource administration, and QoS parameter mapping [12]. Further operating system support is done for continuous media in a real-time environment <ref> [11] </ref> and within the PEGASUS project, to provide a kernel that allows for guarantees of processing and scheduling times for multimedia application streams [26].
Reference: [12] <author> R. Gopalakrishna and G. Parulkar, </author> <title> "Efficient Quality of Service Support in Multimedia Computer Operating Systems," </title> <type> Tech. Rep. </type> <institution> WUCS-94-26, Department of Computer Science, Washington University, </institution> <address> St. Louis, Missouri, U.S.A., 3. </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Therefore, a suitable configuration of a communication protocol can be determined by QoS parameters specified by an application [7]. However in general, other areas of QoS-oriented work (such as modern protocols [8], new architectures [9], enhanced service interfaces [7], [10], and operating system support [11], <ref> [12] </ref>), which are taken up within the next Section 2, have to be regarded in an integrated manner, providing a suitable solution to QoS guarantees within a networking environment. <p> In addition, resource models are developed to allow for the description of schedulable resources that have to be shared or exclusively used by different users. One approach has been developed to integrate scheduling mechanisms, resource administration, and QoS parameter mapping <ref> [12] </ref>. Further operating system support is done for continuous media in a real-time environment [11] and within the PEGASUS project, to provide a kernel that allows for guarantees of processing and scheduling times for multimedia application streams [26].
Reference: [13] <author> ITU-T Recommendation I.350, </author> <title> General aspects of quality of service and network performance in digital networks, including ISDN. </title> <address> Geneva, Switzerland, 6. </address> <month> April </month> <year> 1994. </year>
Reference-contexts: Furthermore, QoS management has been dealt with in networked 1 To be more precise, network characteristics are summarized in a set of so-called network performance parameters <ref> [13] </ref>, that are in terms of the parameter-value concept not distinctive from QoS parameters except for their area of application. 2 multimedia systems [23], where features of QoS negotiation, translation, and subsequently resource management are discussed. <p> Relevant parameters for their characterization vary according to the network. Some examples include features, such as "broadcast support", "bit corruption rate", or "packet loss rate". Network performance parameters, as defined in I.350 <ref> [13] </ref>, may be applied as well. Secondly, system resources define features of the end-system itself, such as "CPU performance", "net interface bandwidth", "memory", "buffer size", or "scheduling strategy", including operating system aspects. Thirdly, protocol resources describe atomic building blocks that are utilized to configure a communication protocol [27].
Reference: [14] <editor> ITU-T Draft Recommendation Q.2931, </editor> <title> Edinburgh TD 155, Broadband Integrated Services Digital Network (B-ISDN), Digital Subscriber Signalling System No.2, User Network Interface Layer 3 Specification for Basic Call/Connection Control. </title> <address> Geneva, Switzerland, 13. - 21. </address> <month> June </month> <year> 1994. </year>
Reference-contexts: In the ATM environment parameters such as "cell delay variation", "cell loss rate", or "peak cell rate" have been defined <ref> [14] </ref>, [15]. Transport protocols use different parameters, e.g., "throughput", "delay", "residual error rate", or "priority" in TP 4 [3], [4]. In the Function-based Communication Subsystem [7] the definition of quantitative (e.g., "jitter", "data loss", "data replication") and qualitative (e.g., "ordered delivery", or "intra-stream synchronization") QoS parameters has been proposed.
Reference: [15] <author> ATM-Forum, </author> <title> ATM User Network Interface Specification, Version 3.0. </title> <address> Englewood Cliffs, New Jersey, U.S.A.: </address> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: In the ATM environment parameters such as "cell delay variation", "cell loss rate", or "peak cell rate" have been defined [14], <ref> [15] </ref>. Transport protocols use different parameters, e.g., "throughput", "delay", "residual error rate", or "priority" in TP 4 [3], [4]. In the Function-based Communication Subsystem [7] the definition of quantitative (e.g., "jitter", "data loss", "data replication") and qualitative (e.g., "ordered delivery", or "intra-stream synchronization") QoS parameters has been proposed.
Reference: [16] <author> International Organization for Standardization, </author> <title> "Quality-of-Service | Basic Framework | CD Text," </title> <type> Tech. Rep. </type> <institution> ISO/IEC JTC1/SC21 N9309, ISO, </institution> <address> 9. - 13. </address> <month> January </month> <year> 1995. </year> <month> 17 </month>
Reference-contexts: Finally, the useful value depicts a limit that bounds the usefulness of the QoS parameter for a specific application (such as minimal usable delay or maximum processable throughput). Each of these values may be utilized for different QoS enforcement strategies <ref> [16] </ref>, [17]. Within the OSI'95 project [10] new QoS parameter definitions are included, e.g., for "transit delay", "transit delay jitter", and "throughput". Furthermore, two types of QoS negotiations are proposed. <p> The exploitation of QoS guidelines as proposed within the QoS basic framework is intended <ref> [16] </ref>. 3.5 Internal Design of Agents The calculation of a proposed CF parameter value update is done by an agent.
Reference: [17] <editor> B. Stiller, Flexible Protokollkonfiguration zur Unterstutzung eines diensteintegrierenden Kommu nikationssubsystems, </editor> <volume> vol. 10, no. </volume> <pages> 306. </pages> <address> Dusseldorf, Germany: </address> <publisher> VDI, </publisher> <address> 16. </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Finally, the useful value depicts a limit that bounds the usefulness of the QoS parameter for a specific application (such as minimal usable delay or maximum processable throughput). Each of these values may be utilized for different QoS enforcement strategies [16], <ref> [17] </ref>. Within the OSI'95 project [10] new QoS parameter definitions are included, e.g., for "transit delay", "transit delay jitter", and "throughput". Furthermore, two types of QoS negotiations are proposed.
Reference: [18] <author> T. Hutschenreuther, O. Kiese, J. Kretschmar, S. Kuhn, and A. Schill, "Modell zur qualitats gerechten Ubertragung von Medienstromen," </author> <booktitle> in Anwendungsunterstutzung fur heterogene Rech-nernetze, (Freiberg/Sachsen, Germany), </booktitle> <pages> pp. 69-78, 30. - 31. </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: A compulsory QoS parameter value is regarded as a value that has to be monitored and if the limit | negotiated in advance | is exceeded, the requested service has to be aborted. Further approaches comprise a system model providing an application programming interface <ref> [18] </ref>. A transport system including protocols, resource reservation schemes, and scheduling approaches, has been developed, e.g., in [19].
Reference: [19] <author> C. Vogt, R. Herrtwich, and R. Nagarajan, "HeiRAT: </author> <title> The Heidelberg Resource and Administra tion Technique, Design Philosophy and Goals," </title> <type> Tech. Rep. </type> <institution> IBM-ENC 43.9213, IBM European Networking Center, </institution> <address> Heidelberg, Germany, </address> <year> 1992. </year>
Reference-contexts: Further approaches comprise a system model providing an application programming interface [18]. A transport system including protocols, resource reservation schemes, and scheduling approaches, has been developed, e.g., in <ref> [19] </ref>. Finally, the multimedia communication system BERKOM contains an application-oriented service interface [20]. 2.2 Service and Resource Management A flowing transition into the area of service management can be observed, since certain QoS architectures and QoS management schemes inherently rely on well-defined service interfaces and QoS parameters.
Reference: [20] <author> M. Hofmann and C. Schmidt, "Das BerKom-II-Projekt MMT," </author> <note> in Klausurtagung des Institus fur Telematik, no. </note> <institution> Interner Bericht der Universitat Karlsruhe, Fakultat fur Informatik, </institution> <address> 22/95, </address> <publisher> (Oberuhldingen), </publisher> <pages> pp. 105-108, 11. - 13. </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Further approaches comprise a system model providing an application programming interface [18]. A transport system including protocols, resource reservation schemes, and scheduling approaches, has been developed, e.g., in [19]. Finally, the multimedia communication system BERKOM contains an application-oriented service interface <ref> [20] </ref>. 2.2 Service and Resource Management A flowing transition into the area of service management can be observed, since certain QoS architectures and QoS management schemes inherently rely on well-defined service interfaces and QoS parameters.
Reference: [21] <author> A. Campbell, G. Coulson, and D. Hutchison, </author> <title> "A Quality-of-Service Architecture," </title> <journal> ACM Com puter Communications Review, </journal> <volume> vol. 24, </volume> <pages> pp. 6-27, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Therefore, still ongoing work can be found in, e.g., <ref> [21] </ref>, defining a QoS architecture (QoS structures and QoS mapping on scheduling schemes) or as a QoS Management approach in [22].
Reference: [22] <author> C. Schmidt and M. Zitterbart, </author> <title> "Towards Integrated QoS Management," </title> <booktitle> in First International Workshop on High Performance Protocol Architectures, (Sophia-Antipolis, France), </booktitle> <pages> pp. </pages> <note> Session 5, Paper 14, 15.-16. </note> <month> December </month> <year> 1994. </year>
Reference-contexts: Therefore, still ongoing work can be found in, e.g., [21], defining a QoS architecture (QoS structures and QoS mapping on scheduling schemes) or as a QoS Management approach in <ref> [22] </ref>.
Reference: [23] <author> K. Nahrstedt and R. Steinmetz, </author> <title> "Resource Management in Networked Multimedia Systems," </title> <journal> IEEE Computer, </journal> <volume> vol. 29, </volume> <pages> pp. 52-63, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Furthermore, QoS management has been dealt with in networked 1 To be more precise, network characteristics are summarized in a set of so-called network performance parameters [13], that are in terms of the parameter-value concept not distinctive from QoS parameters except for their area of application. 2 multimedia systems <ref> [23] </ref>, where features of QoS negotiation, translation, and subsequently resource management are discussed. In [24] a QoS broker model is proposed that allows for the negotiation of QoS parameter values.
Reference: [24] <author> K. Nahrstedt and J. Smith, </author> <title> "An Application-driven Approach to Networked Multimedia Sys tems," </title> <booktitle> in 18th Conference on Local Computer Networks (LCN), </booktitle> <address> (Minneapolis, Minnesota, U.S.A.), </address> <pages> pp. 361-367, 19. - 22. </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: In <ref> [24] </ref> a QoS broker model is proposed that allows for the negotiation of QoS parameter values. Additionally, mapping functions between at least the application and the communication subsystem are important to allow for a sufficient and efficient support of applications within certain networks and end-system architectures.
Reference: [25] <author> T. Burkow, </author> <title> "Operating System Support for Distributed Multimedia Applications; A Survey of Current Research," </title> <type> Tech. Rep. </type> <institution> Memoranda Informatica 94-57, University of Twente, Faculty of Computer Science, Twente, Netherlands, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: An excellent overview of various projects and scheduling mechanisms may be found in <ref> [25] </ref>. Especially, the scheduling schemes applied to networking tasks are crucial for guaranteeing QoS parameter values. In addition, resource models are developed to allow for the description of schedulable resources that have to be shared or exclusively used by different users.
Reference: [26] <author> I. Leslie, D. McAuley, and S. Mullender, </author> <title> "Pegasus Operating Support for Distributed Multime dia Systems," </title> <type> Tech. Rep. TR 282/Pegagus-92-2, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: Further operating system support is done for continuous media in a real-time environment [11] and within the PEGASUS project, to provide a kernel that allows for guarantees of processing and scheduling times for multimedia application streams <ref> [26] </ref>. However, the focus of the work considered here is not on the operating system in particular, but takes conceptually into account a possible parametrization of scheduling mechanisms within the operating system. These parameters can be regarded as system resources (cf. <p> Obviously, this decision depends on tolerance features of the considered application. As solution 1, 6, and 7 can be implemented quite easily and solution 3, 4, and 5 are discussed elsewhere [27], [28], <ref> [26] </ref>, [29], the remainder is focussed on the pertinent framework to solution 2, the update of CF parameters.
Reference: [27] <author> B. Stiller, "PROCOM: </author> <title> A Protocol Configuration Manager in the Function-based Communica tion Subsystem," </title> <booktitle> in First International Workshop on High Performance Protocol Architectures, (Sophia-Antipolis, France), </booktitle> <pages> pp. </pages> <note> Session 3, Paper 9, 15.-16. </note> <month> December </month> <year> 1994. </year>
Reference-contexts: Secondly, system resources define features of the end-system itself, such as "CPU performance", "net interface bandwidth", "memory", "buffer size", or "scheduling strategy", including operating system aspects. Thirdly, protocol resources describe atomic building blocks that are utilized to configure a communication protocol <ref> [27] </ref>. They are hierarchically structured as protocol functions | examples include "acknowledge-ment", "checksumming", or "flow control" | and protocol mechanisms, such as a "selective acknowledgement" or a "cumulative acknowledgement", a "window-based flow control" or a "rate-based flow control". <p> This update stimulates the change of transport-related QoS, which in turn adjusts the overall behavior to the application-requested QoS if possible. If changes of these CF parameters do not achieve a proper behavior of the overall system, solution 3 may solve the problem, if (re-)configuration tools are available <ref> [27] </ref>, [28], [29], such as encountering a retransmission function, if the requested reliability drops below a defined limit. Otherwise solution 4 can be regarded as a coarse-grained reconfiguration task, e.g., exchanging TCP for UDP. Solution 5 deals with a rather end-system-oriented view, which proposes service only that currently available [30]. <p> Obviously, this decision depends on tolerance features of the considered application. As solution 1, 6, and 7 can be implemented quite easily and solution 3, 4, and 5 are discussed elsewhere <ref> [27] </ref>, [28], [26], [29], the remainder is focussed on the pertinent framework to solution 2, the update of CF parameters.
Reference: [28] <author> T. Plagemann, B. Plattner, M. Vogt, and T. Walter, </author> <title> "A Model for Dynamic Configuration of Light-Weight Protocols," </title> <booktitle> in IEEE 3rd Workshop on Future Trends of Distributed Systems, (Taipeh, Taiwan), </booktitle> <pages> pp. 100-106, 14. - 16. </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: This update stimulates the change of transport-related QoS, which in turn adjusts the overall behavior to the application-requested QoS if possible. If changes of these CF parameters do not achieve a proper behavior of the overall system, solution 3 may solve the problem, if (re-)configuration tools are available [27], <ref> [28] </ref>, [29], such as encountering a retransmission function, if the requested reliability drops below a defined limit. Otherwise solution 4 can be regarded as a coarse-grained reconfiguration task, e.g., exchanging TCP for UDP. Solution 5 deals with a rather end-system-oriented view, which proposes service only that currently available [30]. <p> Obviously, this decision depends on tolerance features of the considered application. As solution 1, 6, and 7 can be implemented quite easily and solution 3, 4, and 5 are discussed elsewhere [27], <ref> [28] </ref>, [26], [29], the remainder is focussed on the pertinent framework to solution 2, the update of CF parameters.
Reference: [29] <author> D. F. Box, D. C. Schmidt, and T. Suda, </author> <title> "ADAPTIVE: An Object-Oriented Framework for Flexi ble and Adaptive Communication Protocols," in High Performance Networking, </title> <booktitle> IV, </booktitle> <address> (Amsterdam, Netherlands), </address> <pages> pp. 367-382, </pages> <publisher> IFIP Transactions C-14, North Holland, </publisher> <year> 1993. </year>
Reference-contexts: If changes of these CF parameters do not achieve a proper behavior of the overall system, solution 3 may solve the problem, if (re-)configuration tools are available [27], [28], <ref> [29] </ref>, such as encountering a retransmission function, if the requested reliability drops below a defined limit. Otherwise solution 4 can be regarded as a coarse-grained reconfiguration task, e.g., exchanging TCP for UDP. Solution 5 deals with a rather end-system-oriented view, which proposes service only that currently available [30]. <p> Obviously, this decision depends on tolerance features of the considered application. As solution 1, 6, and 7 can be implemented quite easily and solution 3, 4, and 5 are discussed elsewhere [27], [28], [26], <ref> [29] </ref>, the remainder is focussed on the pertinent framework to solution 2, the update of CF parameters.
Reference: [30] <author> T. Roscoe, </author> <title> The Structure of a Multi-Service Operating System. </title> <institution> University of Cambridge, Com puter Laboratory, </institution> <address> England, U.K., </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Otherwise solution 4 can be regarded as a coarse-grained reconfiguration task, e.g., exchanging TCP for UDP. Solution 5 deals with a rather end-system-oriented view, which proposes service only that currently available <ref> [30] </ref>. Finally, if neither previously discussed solution succeeds, the service of the protocol and the data transfer may be kept as before (solution 6) or will be completely aborted (solution 7). Obviously, this decision depends on tolerance features of the considered application.
Reference: [31] <author> W. Janzen, </author> <title> "Entwurf und Realisierung dynamischer Eigenschaften von FuKSS zur Verwaltung von Protokollmaschinen," in Diplomarbeit: </title> <institution> Universitat Karlsruhe, Institut fur Telematik, Germany, </institution> <month> November </month> <year> 1994. </year> <month> 18 </month>
Reference-contexts: Issues, regarding the communication with the monitor, receiving application QoS, and finally transmitting the updated CF pa 13 rameter values to the protocol function or mechanism may be found in <ref> [31] </ref>. Processing times of reserving system and network resources, changing scheduling mechanism parameters, or other operating system dependent issues are not taken into account. However, the developed solution of QoS updates provides an experimental framework that allows for the processing of well-defined updates in a networking environment.
References-found: 31

