URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1994/tr-94-043.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1994.html
Root-URL: http://www.icsi.berkeley.edu
Title: On the Computational Complexity of Matching on Chordal and Strongly Chordal Graphs  
Author: Elias Dahlhaus Marek Karpinski 
Date: August, 1994  
Pubnum: TR-94-043  
Abstract: In this paper we study the computational complexity (both sequential and parallel) of the maximum matching problem for chordal and strongly chordal graphs. We show that there is a linear time greedy algorithm for a maximum matching in a strongly chordal graph provided a strongly perfect elimination ordering is known. This algorithm can be also turned into a parallel algorithm. The technique used can be also extended for the multidimensional matching for chordal and strongly chordal graphs yielding the first polynomial time algorithms for these classes of graphs (the multidimensional matching is NP complete in general). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Bunemann, </author> <title> A Characterization of Rigid Circuit Graphs, </title> <booktitle> Discrete Mathematics 9 (1974), </booktitle> <pages> pp. 205-212. </pages>
Reference-contexts: Sometimes they are also called triangulated or rigid circuit graphs. We remark that this notion is equivalent to the nonexistence of an induced cycle of length greater than 3. Independently Gavril [6] and Buneman <ref> [1] </ref> proved the following: Theorem 1 A graph is chordal iff it is the intersection graph of vertices of subtrees of a tree, i.e. the vertices of the chordal graph correspond to subtrees of a fixed tree and two vertices of the chordal graph are joined by an edge iff the
Reference: [2] <author> E. Dahlhaus, Chordale Graphen im besonderen Hinblick auf parallele Algorith-men, </author> <type> Habilitation Thesis, </type> <institution> University of Bonn, </institution> <year> 1991. </year>
Reference-contexts: But then t 0 u and xt form a defect in M . This is a contradiction. fl (lemma) fl (theorem) Remark: A strongly perfect elimination ordering of a strongly chordal graph can be computed in O (log 4 n) time with a linear processor number <ref> [2] </ref>.
Reference: [3] <author> M. Farber, </author> <title> Characterizations of Strongly Chordal Graphs, </title> <booktitle> Discrete Mathematics 43 (1983), </booktitle> <pages> pp. 173-189. </pages>
Reference-contexts: We call a graph chordal if every cycle of length greater than three has a chord, i.e. an edge that joins two non consecutive vertices of the cycle. Note that interval graphs are not only chordal but strongly chordal as defined in <ref> [3] </ref>. Strongly chordal graphs are just those chordal graphs having a so called strongly perfect elimination ordering. In this paper we consider the sequential and parallel complexity of the maximum matching problem in chordal and strongly chordal graphs. <p> Such an ordering is called a perfect elimination ordering. A graph G = (V; E) is called strongly chordal <ref> [3] </ref> iff there is an ordering &lt; on the vertices of V such that 1. for xy; xz 2 E, such that x &lt; y and x &lt; z, also yz 2 E, 2. for x 1 y 2 ; x 2 y 1 ; x 1 x 2 2 E,
Reference: [4] <author> D. Fulkerson, O. Gross, </author> <title> Incidence Matrices and Interval Graphs, </title> <note> Pacific Journal of Mathematics 15 (1965), pp.835-855. </note>
Reference-contexts: A path graph is the intersection graph of a collection of paths of a tree. We also can define chordal graphs by characteristic orderings. Theorem 2 <ref> [4] </ref> A graph G = (V; E) is chordal iff there is an ordering &lt; of V , such that with x &lt; y, x &lt; z, xy 2 E, and xz 2 E, we have yz 2 E. Such an ordering is called a perfect elimination ordering.
Reference: [5] <author> M. Garey, D. S. Johnson, </author> <title> Computers and Intractability, </title> <publisher> Freeman and Company, </publisher> <year> 1979. </year>
Reference-contexts: The random bits in the algorithm of [10] can be eliminated in the special case of strongly chordal graphs. We also will see that these techniques can be extended to multidimensional matching that is NP-complete in general (see for example <ref> [5] </ref>). On the other hand, we shall find out that matching restricted to chordal graphs (also restricted to path graphs) is of the same parallel complexity degree as bipartite matching. In section 2, we shall introduce the basic notation. <p> In general, even for k = 3, the problem is NP-complete (see for example <ref> [5] </ref>, [Exact Cover by Triangles]). For strongly chordal graphs, the following generalization of the perfect matching algorithm computes a multidimensional matching. input: G = (V; E), k, output: a multidimensional matching M . 1. V 0 := V ; M := ;; l := 0; d := ;; 2.
Reference: [6] <author> F. Gavril, </author> <title> The Intersection Graphs of Subtrees in Trees Are Exactly the Chordal Graphs, </title> <journal> Journal of Combinatorial Theory Series B, </journal> <volume> vol. 16(1974), </volume> <pages> pp. 47-56. </pages>
Reference-contexts: Sometimes they are also called triangulated or rigid circuit graphs. We remark that this notion is equivalent to the nonexistence of an induced cycle of length greater than 3. Independently Gavril <ref> [6] </ref> and Buneman [1] proved the following: Theorem 1 A graph is chordal iff it is the intersection graph of vertices of subtrees of a tree, i.e. the vertices of the chordal graph correspond to subtrees of a fixed tree and two vertices of the chordal graph are joined by an
Reference: [7] <author> P. Gilmore, A. Hoffman, </author> <title> A Characterization of Cocomparability Graphs and of Interval Graphs, </title> <journal> Canadian Journal of Mathematics 16 (1964), </journal> <pages> pp. 539-548. </pages>
Reference-contexts: It remains an intersting problem to find an optimal parallel perfect elimination algorithm for strongly chordal graphs. Finally we would like to remark that interval graphs are exactly the chordal graphs that are complements of comparability graphs <ref> [7] </ref>. It is known that the perfect matching problem restricted to complements of cocomparability graphs is equivalent to 2-processor scheduling, and this can be done in O (log 2 n) time with a polynomial processor bound [8].
Reference: [8] <author> D. Helmbold, E. Mayr, </author> <title> Two Processor Scheduling is in NC, in VLSI Algorithms and Architectures (F. </title> <editor> Makedon et al. ed.), </editor> <booktitle> LNCS 227 (1986), </booktitle> <pages> pp. 12-15. </pages>
Reference-contexts: It is known that the perfect matching problem restricted to complements of cocomparability graphs is equivalent to 2-processor scheduling, and this can be done in O (log 2 n) time with a polynomial processor bound <ref> [8] </ref>.
Reference: [9] <author> C. Lekkerkerker, J. Boland, </author> <title> Representation of a Finite Graph by a Set of Intervals on the Real Line, </title> <note> Fundamenta Mathematicae 51. </note>
Reference-contexts: 1 Introduction Chordal graphs became interesting as a generalization of interval graphs (see for example <ref> [9] </ref>). We call a graph chordal if every cycle of length greater than three has a chord, i.e. an edge that joins two non consecutive vertices of the cycle. Note that interval graphs are not only chordal but strongly chordal as defined in [3].
Reference: [10] <author> K. Mulmuley, U. Vazirani, V. Vazirani, </author> <title> Matching is as easy as matrix inversion, </title> <booktitle> Combinatorica 7 (1987), </booktitle> <pages> pp. 105-113. </pages>
Reference-contexts: This algorithm can be turned into a (non optimal) parallel algorithm. The random bits in the algorithm of <ref> [10] </ref> can be eliminated in the special case of strongly chordal graphs. We also will see that these techniques can be extended to multidimensional matching that is NP-complete in general (see for example [5]). <p> Proof: We prove that there is at most one defect free perfect matching. Since this is the perfect matching with the minimum sum of labels l uv = (u v) 2 , we get a perfect matching by the minimum perfect matching algorithm of <ref> [10] </ref> in O (log 2 n) time with a polynomial processor bound. Lemma 3 There exists at most one defect free perfect matching. Proof: Assume there are defect-free perfect matchings M and M 0 . Assume M and M 0 coincide in fuju &lt; xg but not in fuju xg.
Reference: [11] <author> M. Queyranne, F. Spieksma, F. Tardella, </author> <title> A General Class of Greedily Solvable Linear Programs, </title> <booktitle> 3 rd IPCO Conference, </booktitle> <editor> G. Rinaldi, L. Wolsey ed. </editor> <year> (1993), </year> <pages> pp. 385-399. </pages>
Reference-contexts: We claim that the following algorithm computes a maximum matching in a strongly chordal graph. The algorithm has a similar structure as the algorithm of Queyranne et al. <ref> [11] </ref> to solve special transport problems. 1. V 0 := V ; M := ;; 2.
References-found: 11

