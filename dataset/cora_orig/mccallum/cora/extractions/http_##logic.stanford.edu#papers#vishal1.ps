URL: http://logic.stanford.edu/papers/vishal1.ps
Refering-URL: http://logic.stanford.edu/papers/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fvishal, geneserethg@cs.stanford.edu  
Title: Integrating Specialized Procedures in Proof Systems  
Author: Vishal Sikka Michael Genesereth 
Note: Draft Do Not Distribute  
Address: Stanford, CA 94305  
Affiliation: Computer Science Department Stanford University  
Abstract: In this paper we present a methodology for integrating specialized reasoning procedures into general-purpose proof systems. Although this problem has been widely studied, existing approaches lack two desirable properties: flexibility and generality. Towards the end of overcoming these problems, we propose a first-order logic-based formalism in which specialized procedures are described to a general purpose proof system instead of being built-in. We describe the formal properties of our methodology and present a comparison with the integration techniques based on attachments. We also show some soundness and completeness results for our formalism and discuss extensions that we are investigating. The formalism described in this paper has been implemented in an automated reasoning system. The work described is part of the first author's Ph.D. thesis research at Stanford University's Computer Science Department 1 . 1 The research described in this paper was supported by a grant from Hewlett-Packard Laboratories. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> L. Aiello. </editor> <booktitle> Automatic generation of semantic attachments in FOL. In Proceedings of the First National Conference on Artificial Intelligence, </booktitle> <year> 1980. </year>
Reference-contexts: We maintain this distinction and implement translations etc. at the linguistic level, thereby keeping things clean. A notable aspect of the work on attachments has been the ability to automatically generate attachments for logical expressions by employing an algorithm that composes attachments from existing ones <ref> [1, 39] </ref>. Using our scheme, an axiomatic specification for such an algorithm can be provided instead to the same effect.
Reference: [2] <author> Ait-Kaci, and Nasr. </author> <note> LOGIN. </note>
Reference-contexts: Frisch and Scherl [33] provide an extensive bibliography of this work. Within hybrid systems exists a class of systems known as logic hybrids in which an important reasoning component is a deductive system of some kind. Gelernter's geometry machine, Krypton [9], ECoNet [52], LOGIN <ref> [2] </ref>, and Hyperproof [3, 4] are examples of such systems. Theory Resolution [60] and systems based on this technique can also be thought of a logic hybrids. 2.
Reference: [3] <author> J. Barwise, and J. Etchemendy. </author> <title> Visual Information and Valid Reasoning. </title>
Reference-contexts: widely recognized that if specialized procedures were to be integrated with a general-purpose problem-solver, so that the specialists could be used to solve specific problems and deductive reasoning could be used as a general-purpose fall-back method, overall efficiency as well as the conceptual clarity of problem-solving can be improved greatly <ref> [3, 33, 52, 60] </ref>. Within AI, several systems have been developed that are based on this general idea, for example KRYPTON [9], and ECoNet [52]. <p> Frisch and Scherl [33] provide an extensive bibliography of this work. Within hybrid systems exists a class of systems known as logic hybrids in which an important reasoning component is a deductive system of some kind. Gelernter's geometry machine, Krypton [9], ECoNet [52], LOGIN [2], and Hyperproof <ref> [3, 4] </ref> are examples of such systems. Theory Resolution [60] and systems based on this technique can also be thought of a logic hybrids. 2.
Reference: [4] <author> J. Barwise, and J. Etchemendy. Hyperproof: </author> <title> A system for incremental proof development. </title> <booktitle> In Proceedings of the AAAI Spring Symposium on Diagrammatic Reasoning. </booktitle> <publisher> AAAI Press, </publisher> <year> 1992. </year>
Reference-contexts: Frisch and Scherl [33] provide an extensive bibliography of this work. Within hybrid systems exists a class of systems known as logic hybrids in which an important reasoning component is a deductive system of some kind. Gelernter's geometry machine, Krypton [9], ECoNet [52], LOGIN [2], and Hyperproof <ref> [3, 4] </ref> are examples of such systems. Theory Resolution [60] and systems based on this technique can also be thought of a logic hybrids. 2.
Reference: [5] <editor> D. Basin, F. Giunchiglia, and M. Kaufmann (Eds.). </editor> <booktitle> Proceedings of the Workshop on Correctness and Metatheoretic Extensibility of Automated Reasoning Systems, </booktitle> <address> Nancy, France, </address> <year> 1994. </year> <title> Held in conjunction with CADE-12.. </title> <type> Also IRST Technical Report 9405-10, IRST, Trento, </type> <institution> Italy. </institution>
Reference: [6] <author> R.S.Boyer, and J.S.Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference: [7] <author> R.S.Boyer, and J.S.Moore. Metafunctions: </author> <title> Proving them correct and using them efficiently as new proof procedures. </title> <type> SRI Technical Report CSL-108, </type> <institution> Computer Science Laboratory, SRI International, </institution> <year> 1979. </year>
Reference-contexts: The use of procedural attachments is so prevalent that most existing theorem provers and logic programming languages build-in standard theories such as arithmetic and the theory of list structures into the deductive system. Boyer and Moore's metafunctions <ref> [7] </ref>, the use of attachments in MRS [18] and Epikit [20], and the work on meta theoretic extensibility by Davis and Schwartz [13], and foreign function interfaces in commercial Prolog implementations [50] are all examples of procedural attachment.
Reference: [8] <author> R.S.Boyer, and J.S.Moore. </author> <title> Integrating decision procedures into heuristic theorem provers: A case study with linear arithmetic. </title> <booktitle> In Machine Intelligence 11. </booktitle> <publisher> Oxford University Press, </publisher> <year> 1988. </year>
Reference-contexts: Lack of flexibility: Since procedures are built-in to a proof system, it's not easy to add or use new procedures flexibly. The question then arises as to how to overcome these limitations. There has been some study of this problem. In <ref> [8] </ref>, Boyer and Moore describe an attempt to integrate a linear arithmetic reasoner into NQTHM, the Boyer Moore theorem prover.
Reference: [9] <author> R. J. Brachman, R. E. Fikes, and H. Levesque. </author> <title> KRYPTON: A functional approach to knowledge representation. </title> <journal> IEEE Computer, </journal> <volume> 16(10) </volume> <pages> 67-74, </pages> <year> 1983. </year>
Reference-contexts: Within AI, several systems have been developed that are based on this general idea, for example KRYPTON <ref> [9] </ref>, and ECoNet [52]. Such integration techniques, however, are limited to using a few specialized procedures that are built-in to the system, and to using the specialized procedures in a limited number of ways. <p> The big switch is moved from specialist to specialist as the problem solver switches its attention from one problem to another. Integrating specialized reasoners into general-purpose deductive systems has been recognized as a good idea as well. Systems such as KRYPTON <ref> [9] </ref>, and ECoNet [52] are examples of this approach. Stickel's Theory Resolution [60] is a general-purpose theoretical framework for incorporating arbitrary decision procedures into theorem proving. <p> Frisch and Scherl [33] provide an extensive bibliography of this work. Within hybrid systems exists a class of systems known as logic hybrids in which an important reasoning component is a deductive system of some kind. Gelernter's geometry machine, Krypton <ref> [9] </ref>, ECoNet [52], LOGIN [2], and Hyperproof [3, 4] are examples of such systems. Theory Resolution [60] and systems based on this technique can also be thought of a logic hybrids. 2.
Reference: [10] <author> Chang, C., and R. C. </author> <title> Lee Symbolic Logic and Mechanical Theorem Proving, </title> <publisher> Academic Press, </publisher> <year> 1972. </year>
Reference-contexts: Closer inspection, however, reveals that these clauses are not really needed in the first place. This is so for two reasons: 1. The clauses M 4 and M 5 subsume clauses M 1 and M 2 respectively, and so any suitable subsumption strategy (such as those described in <ref> [10] </ref> will remove these clauses outright; however, and more importantly, 2. in this example we do not really need a sentence such as P _ Q , apply ( pq ) = "True", which expresses a strong relationship between the sentence P _ Q in L C and the procedure pq
Reference: [11] <author> R. L. Constable, et. al. </author> <title> Implementing mathematics with the Nuprl development system, </title> <publisher> Prentice-Hall, </publisher> <year> 1986. </year>
Reference-contexts: Logical Frameworks and General Logics There is a large body of work in the area of Logical Frameworks [29, 32, 46]; LF [29, 32], LCF [27], -Prolog, OMRS [24], FS 0 [16, 17], ISABELLE [47], IMPS [15], and Nuprl <ref> [11] </ref> are examples of systems embodying research in this area. Our work has also been compared to other work involving logics of description.
Reference: [12] <author> Cormen, et. al. </author> <title> Introduction to Algorithms, </title> <publisher> McGraw-Hill, </publisher> <year> 1990. </year>
Reference-contexts: Arithmetic using the Peano axioms, e.g. the axioms for addition below, 1 1. x + 0 = x is far more inefficient compared to using built-in arithmetic routines that are available to computer programs. The time complexity of presburger arithmetic is, in general exponential <ref> [12] </ref>, whereas carry-based adders that are often available to computer programs work in time linear in the size of the input. Attachment based techniques have been widely used in automated reasoning systems, and we discuss these in more detail in sections 3 and 4. <p> Specialized reasoning techniques also exist for such domains as set theory, e.g. the Quantity Lattice [59], orderings e.g. [stuff from the Theory Reasoning Workshop], lists, e.g. to determine list membership [40], computing transitive closures, e.g. using Warshall's algorithm <ref> [12] </ref>, and numerous specialized methods for arithmetic and algebra. We discuss some techniques for integrating such procedures in some detail in section 4. Integrating specialized reasoners into general-purpose proof systems has been addressed in sufficiently many ways that we can classify them in 3 major ways. 22 1.
Reference: [13] <author> M. Davis and J. T. Schwartz. </author> <title> Metamathematical extensibility for theorem verifiers and proof checkers. </title> <journal> Computers and Mathematics with Applications, </journal> <volume> 5, </volume> <year> 1979. </year>
Reference-contexts: Boyer and Moore's metafunctions [7], the use of attachments in MRS [18] and Epikit [20], and the work on meta theoretic extensibility by Davis and Schwartz <ref> [13] </ref>, and foreign function interfaces in commercial Prolog implementations [50] are all examples of procedural attachment. In his FOL work [63, 64], Weyhrauch extended the procedural attachment idea into a technique called semantic attachment.
Reference: [14] <author> H. Enderton. </author> <title> A Mathematical Introduction to Logic, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1972. </year> <month> 25 </month>
Reference-contexts: We first introduce our approach and then describe the syntax, semantics, and inference rules for a resolution [51] based proof system that is at the heart of our approach. 2.1 Syntax Our treatment of syntax follows that of Enderton <ref> [14] </ref>. We start with a standard first-order language L as described in [14]. L is a collection of countably many symbols arranged as follows: A. Logical Symbols. Parentheses (; ). Sentential connective symbols ); ,; :; ^; _. Variables x; y, etc. B. Parameters. Quantifier symbols 8; 9. <p> first introduce our approach and then describe the syntax, semantics, and inference rules for a resolution [51] based proof system that is at the heart of our approach. 2.1 Syntax Our treatment of syntax follows that of Enderton <ref> [14] </ref>. We start with a standard first-order language L as described in [14]. L is a collection of countably many symbols arranged as follows: A. Logical Symbols. Parentheses (; ). Sentential connective symbols ); ,; :; ^; _. Variables x; y, etc. B. Parameters. Quantifier symbols 8; 9. A countably large set of predicate symbols P . <p> a given procedure p 2 P the result ? signifies that the procedure is undefined for the given list of data structures. 2.3.2 Model Theory Our notion of an interpretation of expressions in L C is based on the standard notion of a structure for expressions in a first-order language <ref> [14] </ref>. Every expression in L C , that does not contain the function symbol apply has standard model-theoretic semantics.
Reference: [15] <author> W. M. Farmer, J.D.Guttman, and F.J.Thayer. IMPS: </author> <title> an interactive mathematical proof system. </title> <journal> Journal of Automated Reasoning, </journal> <year> 1993. </year>
Reference-contexts: Logical Frameworks and General Logics There is a large body of work in the area of Logical Frameworks [29, 32, 46]; LF [29, 32], LCF [27], -Prolog, OMRS [24], FS 0 [16, 17], ISABELLE [47], IMPS <ref> [15] </ref>, and Nuprl [11] are examples of systems embodying research in this area. Our work has also been compared to other work involving logics of description.
Reference: [16] <author> S. Feferman. </author> <title> Towards useful type-free theories. </title> <year> 1984. </year>
Reference-contexts: Theory Resolution [60] and systems based on this technique can also be thought of a logic hybrids. 2. Logical Frameworks and General Logics There is a large body of work in the area of Logical Frameworks [29, 32, 46]; LF [29, 32], LCF [27], -Prolog, OMRS [24], FS 0 <ref> [16, 17] </ref>, ISABELLE [47], IMPS [15], and Nuprl [11] are examples of systems embodying research in this area. Our work has also been compared to other work involving logics of description.
Reference: [17] <author> S. Feferman. </author> <title> Finitary inductively presented logics. </title> <booktitle> Logic Colloquium 88, </booktitle> <year> 1988. </year>
Reference-contexts: Theory Resolution [60] and systems based on this technique can also be thought of a logic hybrids. 2. Logical Frameworks and General Logics There is a large body of work in the area of Logical Frameworks [29, 32, 46]; LF [29, 32], LCF [27], -Prolog, OMRS [24], FS 0 <ref> [16, 17] </ref>, ISABELLE [47], IMPS [15], and Nuprl [11] are examples of systems embodying research in this area. Our work has also been compared to other work involving logics of description.
Reference: [18] <author> M. R. Genesereth. </author> <title> The MRS manual. </title> <type> Logic Group Technical Report. </type> <institution> Computer Science Department. Stanford University. </institution> <year> 1984. </year>
Reference-contexts: The use of procedural attachments is so prevalent that most existing theorem provers and logic programming languages build-in standard theories such as arithmetic and the theory of list structures into the deductive system. Boyer and Moore's metafunctions [7], the use of attachments in MRS <ref> [18] </ref> and Epikit [20], and the work on meta theoretic extensibility by Davis and Schwartz [13], and foreign function interfaces in commercial Prolog implementations [50] are all examples of procedural attachment. In his FOL work [63, 64], Weyhrauch extended the procedural attachment idea into a technique called semantic attachment.
Reference: [19] <author> M. R. Genesereth. </author> <title> Introspective Fidelity. In Meta-level Architectures and Reflection ed. </title> <editor> Pattie Maes, Daniele Nardi. </editor> <publisher> Elsevier Science Pub. Co., </publisher> <address> New York, N.Y. </address> <year> 1988. </year>
Reference: [20] <author> M. R. Genesereth. </author> <note> Epikit Manual. </note>
Reference-contexts: The use of procedural attachments is so prevalent that most existing theorem provers and logic programming languages build-in standard theories such as arithmetic and the theory of list structures into the deductive system. Boyer and Moore's metafunctions [7], the use of attachments in MRS [18] and Epikit <ref> [20] </ref>, and the work on meta theoretic extensibility by Davis and Schwartz [13], and foreign function interfaces in commercial Prolog implementations [50] are all examples of procedural attachment. In his FOL work [63, 64], Weyhrauch extended the procedural attachment idea into a technique called semantic attachment.
Reference: [21] <author> M. R. Genesereth, and J. Y-j. Hsu. </author> <title> Partial programs. In Proceedings of KR-91 ed. </title> <editor> Richard Fikes, and Erik Sandewall. </editor> <publisher> Morgan Kaufmann. </publisher> <year> 1991. </year>
Reference-contexts: More recently Jane Hsu has worked on incorporating some procedural information directly into a deductive problem-solver using what are called partial programs, i.e. logic programs that have a substantial procedural component, and that are capable of logically representing states of action in realistic worlds <ref> [21] </ref>. Waldinger and Manna's work on automatic program synthesis, and the recent work on reasoning from specifications are also significant bodies of work along similar lines [35]. 5 Conclusions and Future Work In this paper we have presented a methodology for integrating specialized reasoning procedures into general-purpose proof systems.
Reference: [22] <author> M. R. Genesereth, R. E. Fikes. </author> <title> The KIF Manual Version 2.0. ARPA Knowledge Sharing Effort. </title> <type> Logic Group Technical Report LOGIC-92-4. </type> <institution> Computer Science Department, Stanford University. </institution> <year> 1992. </year>
Reference-contexts: A set of constant symbols C. A countably large set of function symbols F . The language of our deductive calculus is L C , and it is an extension of L; it is based on the knowledge interchange standard KIF <ref> [22] </ref>. We add to L the following.
Reference: [23] <author> M. R. Genesereth, and O. Duschka. </author> <title> Axiom schemata as meta-level axioms. </title> <type> Logic Group Technical Report LOGIC-95-4. </type> <institution> Computer Science Department, Stanford University. </institution> <year> 1995. </year>
Reference-contexts: We are currently developing a scheme that allows us to sententially encode axiom schemata, thereby extending this calculus to the non-ground case. We have used the recent work on writing axiom schemata as meta-level axioms <ref> [23] </ref> in solving this problem, and we describe this research elsewhere [58]. In addition, when procedures in a programming environment are implementations of a provability relation in a (possibly restricted) deductive system, reasoning with sets of sentences is required and we extend our calculus with a suitable reflection rule.
Reference: [24] <author> F. Giunchiglia, P. Pecchiari, and C. Talcott. </author> <title> Reasoning theories: Towards an architecture for Open Mechanized Reasoning Systems. </title> <note> To be published. </note> <year> 1994. </year>
Reference-contexts: Theory Resolution [60] and systems based on this technique can also be thought of a logic hybrids. 2. Logical Frameworks and General Logics There is a large body of work in the area of Logical Frameworks [29, 32, 46]; LF [29, 32], LCF [27], -Prolog, OMRS <ref> [24] </ref>, FS 0 [16, 17], ISABELLE [47], IMPS [15], and Nuprl [11] are examples of systems embodying research in this area. Our work has also been compared to other work involving logics of description.
Reference: [25] <author> F. Giunchiglia. </author> <title> GETFOL Manual - GETFOL Version 1. </title> <type> Technical Report 92-0010, </type> <institution> DIST University of Genova, Genova, Italy, </institution> <year> 1992. </year>
Reference-contexts: Giunchiglia's research group at IRST, Italy has redesigned and reimplemented the FOL system into a system called GETFOL, which serves as a testbed for research in mechanized formal reasoning <ref> [25] </ref>. Myers' Universal Attachments [40] is thus far the most general attachment formalism available. Myers proposed building in attached computational objects in a way such that all the information pertinent to an attachment is provided.
Reference: [26] <author> J. A. Goguen, and R.M.Bustall. Institutions: </author> <title> Abstract model theory for specifications and programming. </title> <journal> Journal of the AM, </journal> <volume> 39(1) </volume> <pages> 95-146, </pages> <year> 1992. </year>
Reference-contexts: Our work has also been compared to other work involving logics of description. Meseguer's General Logics [38], Goguen and Burstall's Institutions <ref> [26] </ref>, Nelson and Oppen's Cooperating Decision Procedures [42], and Shostak's work on combining provers for specialized theories are all examples of this approach. Therein specialized procedures are (or are viewed as) inference systems for limited or specialized logics.
Reference: [27] <author> M. J. Gordon, A.J.Milner, and G. Plotkin. </author> <title> Edinburgh LCF: A mechanized logic of computation. Number 78, </title> <booktitle> Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference-contexts: Theory Resolution [60] and systems based on this technique can also be thought of a logic hybrids. 2. Logical Frameworks and General Logics There is a large body of work in the area of Logical Frameworks [29, 32, 46]; LF [29, 32], LCF <ref> [27] </ref>, -Prolog, OMRS [24], FS 0 [16, 17], ISABELLE [47], IMPS [15], and Nuprl [11] are examples of systems embodying research in this area. Our work has also been compared to other work involving logics of description.
Reference: [28] <author> C. Green. </author> <title> Application of theorem proving to problem-solving. </title> <booktitle> In Proceedings of the First International Joint Conference on Artificial Intelligence. </booktitle> <year> 1969. </year>
Reference-contexts: For example, tree structures are useful for representing taxonomic hierarchies. Various LISP ordering predicates combined with appropriate directed graph data structures are useful for representing transitive binary relations. The use of attachments in reasoning systems can be traced back to Green's predicate evaluation method <ref> [28] </ref>. In this method atomic functions and predicates in a logical language are attached directly to procedures in a programming environment. A symbol sharing assumption assures that the terms and expressions share their representation in the logical language with the objects i.e the data structures in the programming environment.
Reference: [29] <author> R. Harper, H. honsell, and G.Plotkin. </author> <title> A framework for defining logics. </title> <booktitle> In Second Annual Symposium on Logic in Computer Science. IEEE, </booktitle> <year> 1987. </year> <month> 26 </month>
Reference-contexts: Theory Resolution [60] and systems based on this technique can also be thought of a logic hybrids. 2. Logical Frameworks and General Logics There is a large body of work in the area of Logical Frameworks <ref> [29, 32, 46] </ref>; LF [29, 32], LCF [27], -Prolog, OMRS [24], FS 0 [16, 17], ISABELLE [47], IMPS [15], and Nuprl [11] are examples of systems embodying research in this area. Our work has also been compared to other work involving logics of description. <p> Theory Resolution [60] and systems based on this technique can also be thought of a logic hybrids. 2. Logical Frameworks and General Logics There is a large body of work in the area of Logical Frameworks [29, 32, 46]; LF <ref> [29, 32] </ref>, LCF [27], -Prolog, OMRS [24], FS 0 [16, 17], ISABELLE [47], IMPS [15], and Nuprl [11] are examples of systems embodying research in this area. Our work has also been compared to other work involving logics of description.
Reference: [30] <author> C. Hewitt. </author> <title> PLANNER. </title> <publisher> MIT Press, </publisher> <year> 1969. </year>
Reference-contexts: Approaches Based on Procedural Knowledge and Partial Programs Over the last two decades, there has been considerable research done within AI in the areas of procedural knowledge representation, and reasoning. This work started with the research on PLANNER <ref> [30] </ref>, and CONNIVER [61] at MIT, and continued with Winograd's proposals for integrating declarative and procedural reasoning in KRL [67]. Lansky's work on procedural knowledge and its applications to multi-agent domains is a recent survey of this work [34].
Reference: [31] <author> J. Y-j. Hsu. </author> <title> Partial Programming: A Framework for Problem-Solving Via Incremental Program Development, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Science, Stanford University, </institution> <year> 1991. </year>
Reference-contexts: We also prove some soundness and completeness results of our methodology. The ability to explicitly name and reason about procedures allows us to program agents by description; a property examined in the work on partial programming <ref> [31] </ref> and in planning with incomplete information. In addition, there are computational issues involved in deciding which procedure to choose in order to solve a given problem when more than one applicable procedure is available. Furthermore, there may be times when reasoning axiomatically may be more efficient than using procedures.
Reference: [32] <author> G. Huet, and G. Plotkin. </author> <title> Logical Frameworks. </title> <publisher> Cambridge University Press. </publisher> <address> Cambridge; New York, </address> <year> 1991. </year>
Reference-contexts: Theory Resolution [60] and systems based on this technique can also be thought of a logic hybrids. 2. Logical Frameworks and General Logics There is a large body of work in the area of Logical Frameworks <ref> [29, 32, 46] </ref>; LF [29, 32], LCF [27], -Prolog, OMRS [24], FS 0 [16, 17], ISABELLE [47], IMPS [15], and Nuprl [11] are examples of systems embodying research in this area. Our work has also been compared to other work involving logics of description. <p> Theory Resolution [60] and systems based on this technique can also be thought of a logic hybrids. 2. Logical Frameworks and General Logics There is a large body of work in the area of Logical Frameworks [29, 32, 46]; LF <ref> [29, 32] </ref>, LCF [27], -Prolog, OMRS [24], FS 0 [16, 17], ISABELLE [47], IMPS [15], and Nuprl [11] are examples of systems embodying research in this area. Our work has also been compared to other work involving logics of description.
Reference: [33] <institution> Principles of hybrid reasoning working notes. </institution> <year> 1988. </year>
Reference-contexts: widely recognized that if specialized procedures were to be integrated with a general-purpose problem-solver, so that the specialists could be used to solve specific problems and deductive reasoning could be used as a general-purpose fall-back method, overall efficiency as well as the conceptual clarity of problem-solving can be improved greatly <ref> [3, 33, 52, 60] </ref>. Within AI, several systems have been developed that are based on this general idea, for example KRYPTON [9], and ECoNet [52]. <p> Hybrid Systems There is a large amount of work in the area of hybrid systems, i.e. systems that employ several different types of representation and reasoning methods <ref> [33] </ref>. Frisch and Scherl [33] provide an extensive bibliography of this work. Within hybrid systems exists a class of systems known as logic hybrids in which an important reasoning component is a deductive system of some kind. <p> Hybrid Systems There is a large amount of work in the area of hybrid systems, i.e. systems that employ several different types of representation and reasoning methods <ref> [33] </ref>. Frisch and Scherl [33] provide an extensive bibliography of this work. Within hybrid systems exists a class of systems known as logic hybrids in which an important reasoning component is a deductive system of some kind.
Reference: [34] <author> A. Lansky. </author> <title> Procedural Knowledge. </title>
Reference-contexts: This work started with the research on PLANNER [30], and CONNIVER [61] at MIT, and continued with Winograd's proposals for integrating declarative and procedural reasoning in KRL [67]. Lansky's work on procedural knowledge and its applications to multi-agent domains is a recent survey of this work <ref> [34] </ref>. More recently Jane Hsu has worked on incorporating some procedural information directly into a deductive problem-solver using what are called partial programs, i.e. logic programs that have a substantial procedural component, and that are capable of logically representing states of action in realistic worlds [21].
Reference: [35] <author> Z. Manna, and R. Waldinger. </author> <title> Deductive synthesis of computer programs. </title>
Reference-contexts: Waldinger and Manna's work on automatic program synthesis, and the recent work on reasoning from specifications are also significant bodies of work along similar lines <ref> [35] </ref>. 5 Conclusions and Future Work In this paper we have presented a methodology for integrating specialized reasoning procedures into general-purpose proof systems. We discuss the motivations for and the merits of such an endeavor, the most notable of which is improving the efficiency of general-purpose reasoning.
Reference: [36] <author> J. C. McCarthy, J., </author> <title> Programs with Common Sense, </title> <booktitle> Mechanisation of Thought Processes: Proceedings of the Symposium of the National Physics Laboratory, </booktitle> <volume> Vol. </volume> <editor> I. </editor> <address> London, UK: Her Majesty's Stationary Office, </address> <year> 1958, </year> <pages> pp. 77-84. </pages> <note> (Also in Minsky, </note> <editor> M. (ed.), </editor> <booktitle> Semantic Information Processing. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <year> 1968, </year> <pages> pp. 403-410. </pages> <note> Also in Brach-man, </note> <editor> R. and Levesque, H. (eds.), </editor> <booktitle> Readings in Knowledge Representation. </booktitle> <address> Los Altos, CA: </address> <publisher> Morgan Kaufmann, </publisher> <year> 1985.) </year>
Reference: [37] <author> J. C. McCarthy. </author> <title> First-order theories of individual concepts and propositions. </title> <note> 1979. Available as a Stanford University Technical Report. </note>
Reference: [38] <author> J. Meseguer. </author> <title> General Logics. </title> <booktitle> In Logic Colloquium 87, </booktitle> <year> 1987. </year>
Reference-contexts: Our work has also been compared to other work involving logics of description. Meseguer's General Logics <ref> [38] </ref>, Goguen and Burstall's Institutions [26], Nelson and Oppen's Cooperating Decision Procedures [42], and Shostak's work on combining provers for specialized theories are all examples of this approach. Therein specialized procedures are (or are viewed as) inference systems for limited or specialized logics.
Reference: [39] <author> K. L. Myers. </author> <title> Automatically generating universal attachments through compilation. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: We maintain this distinction and implement translations etc. at the linguistic level, thereby keeping things clean. A notable aspect of the work on attachments has been the ability to automatically generate attachments for logical expressions by employing an algorithm that composes attachments from existing ones <ref> [1, 39] </ref>. Using our scheme, an axiomatic specification for such an algorithm can be provided instead to the same effect.
Reference: [40] <author> K. L. Myers. </author> <title> Universal Attachments: A Logical Framework for Hybrid Reasoning, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Science, Stanford University, </institution> <year> 1991. </year>
Reference-contexts: The completeness theorem, thus, follows trivially. 2 3 Comparison with Attachment Based Techniques In this section we present a comparative analysis of our methodology vis a vis the integration techniques based on attachments. We first introduce such techniques, and then describe the technique known as universal attachment <ref> [40] </ref>, which is the most general attachment based integration technique available. We next discuss the limitations of these techniques, show that our formalism overcomes these limitations, and finally present some results. 3.1 Background Attachment based techniques have been studied for a long time. <p> Giunchiglia's research group at IRST, Italy has redesigned and reimplemented the FOL system into a system called GETFOL, which serves as a testbed for research in mechanized formal reasoning [25]. Myers' Universal Attachments <ref> [40] </ref> is thus far the most general attachment formalism available. Myers proposed building in attached computational objects in a way such that all the information pertinent to an attachment is provided. <p> The element ? is the undefined, or error element. This treatment of the programming environment is akin to our treatment of a computation system defined in section 2.3.1. We next describe a universal attachment (UA) formally; the details are in <ref> [40, 41] </ref>. <p> The details are in <ref> [40] </ref>. 2 15 3.3 Formal Comparison Results Since L C has the expressive power of a first-order language, we can use it to express any constraints that can be expressed in F , the filter language that is used to express constraints on variables in expressions in L. <p> We describe two examples of this: incompleteness due to elimination, and combinational incompleteness; both of these examples are from <ref> [40, 41] </ref>. Example 11 (Incompleteness due to elimination) Consider a set a of sentences fP g. Further, suppose the expression :P is attached to a procedure 2 P in C, via the attachment h:P; fgi ! h ; id; idi, and that evaluates to true. <p> Clearly, b j= fg. The attachments, however, cannot be used to derive this result since there is no mechanism for reasoning about combinations of attachments <ref> [40] </ref>. In general, attachments for non-atomic expressions cannot be used to reason in conjunction with attachments for other expressions. Thus attachments for expressions such as P ^ Q cannot be used to reason about the truth of the individual expressions P and Q using the original attachment alone. <p> P (A), where A is a constant in L). As mentioned before, the syntactic nature of the attachment specification, and the built-in nature of inference in attachments leads to these limitations. Myers notes <ref> [40] </ref>: The general problem underlying all : : : examples of incompleteness is an inability to directly reason about the information stored in the attachments. <p> Systems that use universal attachment to build-in specialized procedures, employ a specialized filtering language to implement such sets. As noted in <ref> [40, 41] </ref>, the most commonly used filtering language is one called F fl that allows for the expression of conditions on individual terms in a logical language. <p> For example, if an expression P (x; y) has an attachment, then F fl allows this attachment to have filtering conditions such as fint (x); int (y)g on the variables x and y, i.e. that the bindings to both x and y be integers. However, as noted in <ref> [40, 41] </ref>, several useful types of constraints on bindings of variables are not expressible in F fl . <p> Stickel's Theory Resolution [60] is a general-purpose theoretical framework for incorporating arbitrary decision procedures into theorem proving. Specialized reasoning techniques also exist for such domains as set theory, e.g. the Quantity Lattice [59], orderings e.g. [stuff from the Theory Reasoning Workshop], lists, e.g. to determine list membership <ref> [40] </ref>, computing transitive closures, e.g. using Warshall's algorithm [12], and numerous specialized methods for arithmetic and algebra. We discuss some techniques for integrating such procedures in some detail in section 4.
Reference: [41] <author> K. L. Myers. </author> <title> Universal Attachments: A Logical Framework for Hybrid Reasoning. </title> <booktitle> In, Artificial Intelligence. </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: The element ? is the undefined, or error element. This treatment of the programming environment is akin to our treatment of a computation system defined in section 2.3.1. We next describe a universal attachment (UA) formally; the details are in <ref> [40, 41] </ref>. <p> We describe two examples of this: incompleteness due to elimination, and combinational incompleteness; both of these examples are from <ref> [40, 41] </ref>. Example 11 (Incompleteness due to elimination) Consider a set a of sentences fP g. Further, suppose the expression :P is attached to a procedure 2 P in C, via the attachment h:P; fgi ! h ; id; idi, and that evaluates to true. <p> Systems that use universal attachment to build-in specialized procedures, employ a specialized filtering language to implement such sets. As noted in <ref> [40, 41] </ref>, the most commonly used filtering language is one called F fl that allows for the expression of conditions on individual terms in a logical language. <p> For example, if an expression P (x; y) has an attachment, then F fl allows this attachment to have filtering conditions such as fint (x); int (y)g on the variables x and y, i.e. that the bindings to both x and y be integers. However, as noted in <ref> [40, 41] </ref>, several useful types of constraints on bindings of variables are not expressible in F fl .
Reference: [42] <author> Nelson and Oppen. </author> <title> Cooperating decision procedures. </title> <journal> journal of the ACM </journal>
Reference-contexts: Our work has also been compared to other work involving logics of description. Meseguer's General Logics [38], Goguen and Burstall's Institutions [26], Nelson and Oppen's Cooperating Decision Procedures <ref> [42] </ref>, and Shostak's work on combining provers for specialized theories are all examples of this approach. Therein specialized procedures are (or are viewed as) inference systems for limited or specialized logics. This is an appealing analogy but is not the focus of the present paper.
Reference: [43] <author> A. Newell. </author> <title> Big switch. </title> <year> 1966. </year>
Reference-contexts: As noted earlier, statement of composition of attached programs amounts simply to writing axioms using apply. 4 Related Work The idea of using specialists in general-purpose problem-solving is not a new one. Within AI, it can be traced back to Newell's Big Switch metaphor for problem-solving <ref> [43] </ref>. The idea was to have, at the service of a general-purpose problem-solver, a large number of specialized reasoners, i.e. reasoners designed to efficiently solve problems in specialized domains by utilizing the specific properties of these domains, or by employing computational models of a limited but suitable nature. <p> To quote Newell <ref> [43] </ref>: General problem solvers are too weak to be used as the basis for building high-performance systems. : : : Generality in problem-solving is achieved by arraying specialists at the terminal of a big switch.
Reference: [44] <author> N. J. </author> <title> Nilsson. </title> <journal> Logic and Artificial Intelligence. Artificial Intelligence Special Issue in Foundations of Artificial Intelligence. x y xx-yy. </journal> <year> 1991. </year> <month> 27 </month>
Reference-contexts: While Green's procedural attachment and Weyhrauch's Semantic Attachment were amongst the first of these approaches, Myers' Universal Attachment is a more recent and detailed treatment of the subject. In <ref> [44] </ref>, Nilsson notes: It is my guess that practical AI systems will use a combination of logical inference and attachment with the latter perhaps predominating in some applications and the former used as a fall-back method of great generality.
Reference: [45] <institution> Otter 2.1 User's Guide. Argonne National Laboratory. </institution> <note> Available by anonymous ftp from ftp.mcs.anl.gov. </note>
Reference-contexts: Our system extends resolution-style proofs systems 3 for first-order logic with equality in that we add one new rule of inference. This rule, called C-Substitution, allows for the derivation of sentences that contain the results of computations in a computation system. Formally, 3 Standard theorem-proving systems such as Otter <ref> [45] </ref> and SETHEO [53] are examples of systems based on resolution and paramodulation. 6 Definition 1 (C-substitution) For a clause : f 1 ; : : : ; ; : : : ; n g, where contains a ground apply term, we have f 1 ; : : : ; [: <p> Since specialized procedures are built-in to a proof system using an attachment, the resulting methodology suffers from inflexibility, in that new specialized procedures cannot easily be added into a prover; In Otter, for example, interfaces for new foreign functions are added by recompiling the entire Otter source code <ref> [45] </ref>. This also limits the flexibility with which the relationship between specialized procedures and logical terms and sentences can be expressed.
Reference: [46] <author> L. Paulson. </author> <title> Logic and Computation, </title> <publisher> Cambridge University Press, </publisher> <year> 1987. </year>
Reference-contexts: Theory Resolution [60] and systems based on this technique can also be thought of a logic hybrids. 2. Logical Frameworks and General Logics There is a large body of work in the area of Logical Frameworks <ref> [29, 32, 46] </ref>; LF [29, 32], LCF [27], -Prolog, OMRS [24], FS 0 [16, 17], ISABELLE [47], IMPS [15], and Nuprl [11] are examples of systems embodying research in this area. Our work has also been compared to other work involving logics of description.
Reference: [47] <author> L. Paulson. </author> <title> Isabelle: The next 700 theorem provers. </title> <editor> In P. Odifreddi, editor, </editor> <booktitle> Logic and Computer Science, </booktitle> <pages> pp. 361-385. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: Logical Frameworks and General Logics There is a large body of work in the area of Logical Frameworks [29, 32, 46]; LF [29, 32], LCF [27], -Prolog, OMRS [24], FS 0 [16, 17], ISABELLE <ref> [47] </ref>, IMPS [15], and Nuprl [11] are examples of systems embodying research in this area. Our work has also been compared to other work involving logics of description.
Reference: [48] <author> D. Perlis. </author> <title> Languages with self-reference I. Artificial Inelligence. x y xx-yy. </title> <year> 1985. </year>
Reference: [49] <author> D. Perlis. </author> <title> Meta in logic. In Meta-level Architectures and Reflection ed. </title> <editor> Pattie Maes, Daniele Nardi. </editor> <publisher> Elsevier Science Pub. Co., </publisher> <address> New York, N.Y. </address> <year> 1988. </year>
Reference: [50] <institution> Quintus Prolog. </institution>
Reference-contexts: Boyer and Moore's metafunctions [7], the use of attachments in MRS [18] and Epikit [20], and the work on meta theoretic extensibility by Davis and Schwartz [13], and foreign function interfaces in commercial Prolog implementations <ref> [50] </ref> are all examples of procedural attachment. In his FOL work [63, 64], Weyhrauch extended the procedural attachment idea into a technique called semantic attachment. This technique allowed for explicit computational representations of entities in a first-order language and the use of these representations in deduction.
Reference: [51] <author> J. A. Robinson. </author> <title> Resolution. </title> <journal> Journal of the ACM. </journal> <year> 1965. </year>
Reference-contexts: We first introduce our approach and then describe the syntax, semantics, and inference rules for a resolution <ref> [51] </ref> based proof system that is at the heart of our approach. 2.1 Syntax Our treatment of syntax follows that of Enderton [14]. We start with a standard first-order language L as described in [14]. L is a collection of countably many symbols arranged as follows: A. Logical Symbols.
Reference: [52] <author> L. E. Schubert. </author> <title> Using specialists to accelerate general-purpose deductive reasoning. </title> <editor> In N. Cercone and G. McCalla, editors, </editor> <booktitle> The Knowledge Frontier: Essays in the Representation of Knowledge. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: widely recognized that if specialized procedures were to be integrated with a general-purpose problem-solver, so that the specialists could be used to solve specific problems and deductive reasoning could be used as a general-purpose fall-back method, overall efficiency as well as the conceptual clarity of problem-solving can be improved greatly <ref> [3, 33, 52, 60] </ref>. Within AI, several systems have been developed that are based on this general idea, for example KRYPTON [9], and ECoNet [52]. <p> Within AI, several systems have been developed that are based on this general idea, for example KRYPTON [9], and ECoNet <ref> [52] </ref>. Such integration techniques, however, are limited to using a few specialized procedures that are built-in to the system, and to using the specialized procedures in a limited number of ways. <p> The big switch is moved from specialist to specialist as the problem solver switches its attention from one problem to another. Integrating specialized reasoners into general-purpose deductive systems has been recognized as a good idea as well. Systems such as KRYPTON [9], and ECoNet <ref> [52] </ref> are examples of this approach. Stickel's Theory Resolution [60] is a general-purpose theoretical framework for incorporating arbitrary decision procedures into theorem proving. <p> Frisch and Scherl [33] provide an extensive bibliography of this work. Within hybrid systems exists a class of systems known as logic hybrids in which an important reasoning component is a deductive system of some kind. Gelernter's geometry machine, Krypton [9], ECoNet <ref> [52] </ref>, LOGIN [2], and Hyperproof [3, 4] are examples of such systems. Theory Resolution [60] and systems based on this technique can also be thought of a logic hybrids. 2.
Reference: [53] <institution> SETHEO User's Guide. </institution>
Reference-contexts: This rule, called C-Substitution, allows for the derivation of sentences that contain the results of computations in a computation system. Formally, 3 Standard theorem-proving systems such as Otter [45] and SETHEO <ref> [53] </ref> are examples of systems based on resolution and paramodulation. 6 Definition 1 (C-substitution) For a clause : f 1 ; : : : ; ; : : : ; n g, where contains a ground apply term, we have f 1 ; : : : ; [: : : apply
Reference: [54] <author> R. Shostak. </author> <title> Deciding combinations of theories. </title> <type> Technical Report CSL-132, </type> <institution> SRI International, </institution> <year> 1982. </year>
Reference: [55] <author> V. Sikka, and Genesereth, M. R. </author> <year> 1994. </year> <title> Integrating specialized procedures in proof systems. </title> <editor> In D. Basin, F. Giunchiglia, and M. Kaufmann (Eds.), </editor> <booktitle> Proceedings of the Workshop on Correctness and Metatheoretic Extensibility of Automated Reasoning Systems, </booktitle> <address> Nancy, France, </address> <year> 1994. </year> <title> Held in conjunction with CADE-12.. </title> <type> Also IRST Technical Report 9405-10, IRST, Trento, </type> <institution> Italy. </institution>
Reference: [56] <author> V. Sikka. </author> <title> 1995 (Expected). Integrating specialized reasoning procedures into proof systems. </title> <type> Ph.D Thesis, </type> <institution> Computer Science Department, Stanford University. </institution>
Reference-contexts: Therein specialized procedures are (or are viewed as) inference systems for limited or specialized logics. This is an appealing analogy but is not the focus of the present paper. We discuss the relationship of our work to these other approaches in <ref> [56] </ref>. 3. Approaches Based on Procedural Knowledge and Partial Programs Over the last two decades, there has been considerable research done within AI in the areas of procedural knowledge representation, and reasoning. <p> In addition, when procedures in a programming environment are implementations of a provability relation in a (possibly restricted) deductive system, reasoning with sets of sentences is required and we extend our calculus with a suitable reflection rule. This work is addressed in <ref> [56, 58] </ref>. We also discuss the relationship between our work and the work on related areas mentioned in section 4, as well as the other issues mentioned here in [56, 58]. Acknowledgements The authors are thankful to Dr. <p> This work is addressed in <ref> [56, 58] </ref>. We also discuss the relationship between our work and the work on related areas mentioned in section 4, as well as the other issues mentioned here in [56, 58]. Acknowledgements The authors are thankful to Dr. Carolyn Talcott, Richard Waldinger, John Etchemendy, Reed Letsinger, Narinder Singh, Karen Myers, Andrew Kosoresow, Scott Roy, and the members of the Stanford Logic Group for help and useful commentary. 24
Reference: [57] <author> V. Sikka, and Genesereth, M. R. </author> <year> 1994. </year> <title> Integrating specialized reasoning procedures into proof systems. </title> <type> Logic Group Technical Report LOGIC-95-4, </type> <institution> Computer Science Department, Stanford University. </institution>
Reference: [58] <author> V. Sikka, and Genesereth, M. R. </author> <year> 1995. </year> <title> Using metatheoretic reasoning to integrate reasoning procedures into proof systems. </title> <type> Logic Group Technical Report LOGIC-95-4, </type> <institution> Computer Science Department, Stanford University. </institution> <month> 28 </month>
Reference-contexts: Proof: 2 In particular, there's a function PDA : A ! L C , such that PDA (A) 7! L . The following theorem is our main result. The proof is described in <ref> [58] </ref>. <p> We are currently developing a scheme that allows us to sententially encode axiom schemata, thereby extending this calculus to the non-ground case. We have used the recent work on writing axiom schemata as meta-level axioms [23] in solving this problem, and we describe this research elsewhere <ref> [58] </ref>. In addition, when procedures in a programming environment are implementations of a provability relation in a (possibly restricted) deductive system, reasoning with sets of sentences is required and we extend our calculus with a suitable reflection rule. This work is addressed in [56, 58]. <p> In addition, when procedures in a programming environment are implementations of a provability relation in a (possibly restricted) deductive system, reasoning with sets of sentences is required and we extend our calculus with a suitable reflection rule. This work is addressed in <ref> [56, 58] </ref>. We also discuss the relationship between our work and the work on related areas mentioned in section 4, as well as the other issues mentioned here in [56, 58]. Acknowledgements The authors are thankful to Dr. <p> This work is addressed in <ref> [56, 58] </ref>. We also discuss the relationship between our work and the work on related areas mentioned in section 4, as well as the other issues mentioned here in [56, 58]. Acknowledgements The authors are thankful to Dr. Carolyn Talcott, Richard Waldinger, John Etchemendy, Reed Letsinger, Narinder Singh, Karen Myers, Andrew Kosoresow, Scott Roy, and the members of the Stanford Logic Group for help and useful commentary. 24
Reference: [59] <author> R. Simmons. </author> <title> Quantity Lattice: A technique for reasoning about sets. </title> <booktitle> In proceedings of the 8th National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Systems such as KRYPTON [9], and ECoNet [52] are examples of this approach. Stickel's Theory Resolution [60] is a general-purpose theoretical framework for incorporating arbitrary decision procedures into theorem proving. Specialized reasoning techniques also exist for such domains as set theory, e.g. the Quantity Lattice <ref> [59] </ref>, orderings e.g. [stuff from the Theory Reasoning Workshop], lists, e.g. to determine list membership [40], computing transitive closures, e.g. using Warshall's algorithm [12], and numerous specialized methods for arithmetic and algebra. We discuss some techniques for integrating such procedures in some detail in section 4.
Reference: [60] <author> M. Stickel. </author> <title> Automated deduction by Theory Resolution. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 1(4), </volume> <year> 1985. </year>
Reference-contexts: widely recognized that if specialized procedures were to be integrated with a general-purpose problem-solver, so that the specialists could be used to solve specific problems and deductive reasoning could be used as a general-purpose fall-back method, overall efficiency as well as the conceptual clarity of problem-solving can be improved greatly <ref> [3, 33, 52, 60] </ref>. Within AI, several systems have been developed that are based on this general idea, for example KRYPTON [9], and ECoNet [52]. <p> Integrating specialized reasoners into general-purpose deductive systems has been recognized as a good idea as well. Systems such as KRYPTON [9], and ECoNet [52] are examples of this approach. Stickel's Theory Resolution <ref> [60] </ref> is a general-purpose theoretical framework for incorporating arbitrary decision procedures into theorem proving. <p> Within hybrid systems exists a class of systems known as logic hybrids in which an important reasoning component is a deductive system of some kind. Gelernter's geometry machine, Krypton [9], ECoNet [52], LOGIN [2], and Hyperproof [3, 4] are examples of such systems. Theory Resolution <ref> [60] </ref> and systems based on this technique can also be thought of a logic hybrids. 2.
Reference: [61] <author> Sussman, et. al. </author> <month> CONNIVER. </month>
Reference-contexts: Approaches Based on Procedural Knowledge and Partial Programs Over the last two decades, there has been considerable research done within AI in the areas of procedural knowledge representation, and reasoning. This work started with the research on PLANNER [30], and CONNIVER <ref> [61] </ref> at MIT, and continued with Winograd's proposals for integrating declarative and procedural reasoning in KRL [67]. Lansky's work on procedural knowledge and its applications to multi-agent domains is a recent survey of this work [34].
Reference: [62] <author> C. Talcott. </author> <title> Reasoning specialists should be logical services, not black boxes. </title> <booktitle> Proceedings of CADE-12 workshop on Theory Reasoning in Automated Deduction, </booktitle> <pages> pp. 1-6, </pages> <year> 1994. </year>
Reference-contexts: Their report casts a doubt on the use of techniques in which specialized reasoners are built-in to theorem provers as ways to achieve a flexible and general integration between specialized procedures and general-purpose theorem provers. More recently a similar observation has been made by Talcott <ref> [62] </ref>.
Reference: [63] <author> R. Weyhrauch. </author> <title> The FOL manual. </title> <institution> Computer Science Department. Stanford University. </institution> <year> 1980. </year>
Reference-contexts: Boyer and Moore's metafunctions [7], the use of attachments in MRS [18] and Epikit [20], and the work on meta theoretic extensibility by Davis and Schwartz [13], and foreign function interfaces in commercial Prolog implementations [50] are all examples of procedural attachment. In his FOL work <ref> [63, 64] </ref>, Weyhrauch extended the procedural attachment idea into a technique called semantic attachment. This technique allowed for explicit computational representations of entities in a first-order language and the use of these representations in deduction.
Reference: [64] <author> R. Weyhrauch. </author> <title> Prolegomena to a theory of mechanized formal reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13 </volume> <pages> 133-170, </pages> <year> 1980. </year>
Reference-contexts: Boyer and Moore's metafunctions [7], the use of attachments in MRS [18] and Epikit [20], and the work on meta theoretic extensibility by Davis and Schwartz [13], and foreign function interfaces in commercial Prolog implementations [50] are all examples of procedural attachment. In his FOL work <ref> [63, 64] </ref>, Weyhrauch extended the procedural attachment idea into a technique called semantic attachment. This technique allowed for explicit computational representations of entities in a first-order language and the use of these representations in deduction.
Reference: [65] <author> R. Weyhrauch, and C. Talcott. </author> <title> Towards a theory of mechanizable theories: FOl Contexts, and intensional view I. </title> <booktitle> In Proceedings of the IEEE symposium on Logic in Computer Science, </booktitle> <year> 1990. </year>
Reference-contexts: In addition, the semantic attachment provision in FOL included facilities for multiple representations to enable different computable objects to represent linguistic entities under different conditions. FOL's formal presentation for the computational notion of a model provided a significant advance over procedural attachments. In more recent work Weyhrauch and Talcott <ref> [65, 66] </ref> have been developing a formal treatment for the logic of FOL, including providing a formal treatment for their notion of a simulation structure which is a partially mechanizable presentation of a model.
Reference: [66] <author> R. Weyhrauch, and C. Talcott. </author> <title> The logic of FOL Based on set theory. </title> <note> To be published. </note>
Reference-contexts: In addition, the semantic attachment provision in FOL included facilities for multiple representations to enable different computable objects to represent linguistic entities under different conditions. FOL's formal presentation for the computational notion of a model provided a significant advance over procedural attachments. In more recent work Weyhrauch and Talcott <ref> [65, 66] </ref> have been developing a formal treatment for the logic of FOL, including providing a formal treatment for their notion of a simulation structure which is a partially mechanizable presentation of a model.
Reference: [67] <author> T. Winograd. </author> <title> Declarative/Procedural Paper. From Readings in Knowledge Representation, </title> <editor> Brachman, and Levesque, eds. </editor> <publisher> Morgan Kaufmann. </publisher> <pages> 29 </pages>
Reference-contexts: This work started with the research on PLANNER [30], and CONNIVER [61] at MIT, and continued with Winograd's proposals for integrating declarative and procedural reasoning in KRL <ref> [67] </ref>. Lansky's work on procedural knowledge and its applications to multi-agent domains is a recent survey of this work [34].
References-found: 67

