URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR93361.ps.gz
Refering-URL: http://www.crpc.rice.edu/CRPC/softlib/TRs_online.html
Root-URL: 
Title: D  
Author: YNAMIC S OFTWARE M ETRICES Erich Schikuta 
Address: P.O. Box 1892 Houston TX 77251-1892  
Affiliation: Center for Research on Parallel Computation Rice University  
Abstract: In this paper a dynamic approach to measure the coupling of software systems is proposed. The conventionally used static measures are only limited suitable for the evaluation and characterization of such systems. We extend the static methodology with a dynamic component and define new measures based on this approach. A model for system characterization based on varying execution profiles is given. The layout of an automated monitor system is presented, which can be directly integrated into a software development system. 
Abstract-found: 1
Intro-found: 1
Reference: [Card90] <author> Card, D.N., </author> <title> Measuring software design quality, </title> <publisher> Prentice Hall, </publisher> <year> 1990 </year>
Reference-contexts: The term coupling defines the strength of associations established by connections from one software module to another ([Stevens74]). In the literature many different static approaches to measure the coupling degree of software systems were proposed, as in [Myer76], [Yourdon79], <ref> [Card90] </ref>, [Henry81], [Fenton90], etc. In this paper we present a dynamic framework to measure the coupling of software systems. We introduce dynamic characteristics, program execution profiles and a program monitor system.
Reference: [Conte86] <author> Conte S.D., Dunsmore H.E., Shen V.Y., </author> <title> Software engineering metrics and models, </title> <publisher> Benjamin/Cummings Publ., </publisher> <year> 1986 </year>
Reference-contexts: This fact is easily recognizable with a dynamic analysis, but is very hard to find (after an excessive logical or semantic analysis only) by static measures. Static measures are influenced by the written program code. Therefore rather intuitive rules for static evaluation (see <ref> [Conte86] </ref>) are necessary. For example calculating the well known Halstead [Halstead77] measures variables have to be carefully exclude from the count that are not used in the actual but defined for a future program execution.
Reference: [Fenton90] <author> Fenton N., Melton A., </author> <title> "Deriving structurally based software measures", </title> <journal> Journal of Systems and Software, </journal> <volume> 12, </volume> <pages> pp. 177-187, </pages> <year> 1990 </year>
Reference-contexts: The term coupling defines the strength of associations established by connections from one software module to another ([Stevens74]). In the literature many different static approaches to measure the coupling degree of software systems were proposed, as in [Myer76], [Yourdon79], [Card90], [Henry81], <ref> [Fenton90] </ref>, etc. In this paper we present a dynamic framework to measure the coupling of software systems. We introduce dynamic characteristics, program execution profiles and a program monitor system. <p> The behavior has to be analyzed during the execution of the program and out of the behavior of a number of characteristic values a metrics for the coupling degree can be derived. Fenton defines in <ref> [Fenton90] </ref> three basic classes of entities of interest for software measurement. These classes are processes, products and resources. We argue to add to these classes a new class of dynamic behavior. <p> Dynamic pairwise coupling measure of Fenton In <ref> [Fenton90] </ref> a measure M (x, y) for the pairwise coupling of modules x and y is defined, which based on the rank of the maximum coupling type. <p> For a more information see <ref> [Fenton90] </ref>.
Reference: [Halstead77] <author> Halstead M.H., </author> <title> Elements of software science, </title> <publisher> Elsevier, </publisher> <year> 1977 </year>
Reference-contexts: Static measures are influenced by the written program code. Therefore rather intuitive rules for static evaluation (see [Conte86]) are necessary. For example calculating the well known Halstead <ref> [Halstead77] </ref> measures variables have to be carefully exclude from the count that are not used in the actual but defined for a future program execution. These variables can not be counted, because they do not affect the operational characteristics of the program or the difficulty of the development.
Reference: [Henry81] <author> Henry S., Kafura D., </author> <title> "Software structure metrics based on information flow", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 7, 5, </volume> <pages> pp. 510-518, </pages> <year> 1981 </year>
Reference-contexts: The term coupling defines the strength of associations established by connections from one software module to another ([Stevens74]). In the literature many different static approaches to measure the coupling degree of software systems were proposed, as in [Myer76], [Yourdon79], [Card90], <ref> [Henry81] </ref>, [Fenton90], etc. In this paper we present a dynamic framework to measure the coupling of software systems. We introduce dynamic characteristics, program execution profiles and a program monitor system. <p> This leads to the situation that programs are difficult to compare objectively. We want to prove this statements by a few examples. In <ref> [Henry81] </ref> with the analysis of the Unix program code the 'u' module in Unix was excluded of the static measurement calculations, because it didn't fit in the presented FAN-IN/FAN-OUT method. It delivered impressive numbers in the static analysis, but didn't reflect the program characteristics correctly. <p> Measures The dynamic measures can be defined analogous to the commonly known measures found in the literature. A few examples are give by FAN-IN/FAN-OUT (<ref> [Henry81] </ref>) length of the information stream (see Henry-Kafura metric [Henry81] storage locations references calls by name (binding of names to different (and changing) storage areas) calls by reference (references to variables outside the procedure storage area) 5 calls by value (copying of values to the procedure stack) ... (and many more) 3.2.1. <p> To express the standardization, we use the transformation function t (m). It is necessarily in this context not decided, which standardization is applied. The presented approach is easily extendible to all dynamic measures. 3.2.1.1. Dynamic FAN-IN/ FANOUT Henry and Kafura defined in <ref> [Henry81] </ref> the fan-in of a module A as the number of local flows into module A plus the number of data structures from which module A retrieves information.
Reference: [Kluwe91] <author> Kluwe R.H., Misiak C., Haider H., </author> <title> "The control of complex systems and performance in intelligence tests", </title> <editor> In H.A.H. Rowe (Ed.), </editor> <booktitle> Intelligence: Reconceptualization and Measurement, </booktitle> <publisher> Lawrence Erlbaum Ass., </publisher> <year> 1991 </year>
Reference: [Melton90] <author> Melton A.C., Gustafson D.A., Bieman J.M., Baker A.L., </author> <title> "A mathematical perspective for software measures research", </title> <journal> Software Engineering Journal, </journal> <pages> pp. 246-254, </pages> <month> Sept. </month> <year> 1990 </year>
Reference-contexts: The new dynamic measure for the coupling can be defined by the formula M x y i t n dyn dyn dyn ( ) = + Both FAN-IN/FAN-OUT dyn and the M dyn coefficient preserve the properties of a valid measure according to <ref> [Melton90] </ref>, where the properties of relations are used to describe orderings. <p> For more information and adjoining examples see <ref> [Melton90] </ref>. Obviously the FAN-IN/FAN-OUT dyn and M dyn measure show the same property as the original measures and are preorders. 7 4. Testenvironment 4.1.
Reference: [Myer76] <author> Myers G., </author> <title> Composite/Structured Design, </title> <publisher> Van Nostrand Reinhold Company, </publisher> <editor> 1976 [Sternberg82]Sternberg R., </editor> <title> "Reasoning, problem solving, and intelligence", </title> <editor> In R.J. Sternberg (Ed.) </editor> <booktitle> Handbook of Human Intelligence, </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1982 </year>
Reference-contexts: The term coupling defines the strength of associations established by connections from one software module to another ([Stevens74]). In the literature many different static approaches to measure the coupling degree of software systems were proposed, as in <ref> [Myer76] </ref>, [Yourdon79], [Card90], [Henry81], [Fenton90], etc. In this paper we present a dynamic framework to measure the coupling of software systems. We introduce dynamic characteristics, program execution profiles and a program monitor system.
Reference: [Stevens74] <author> Stevens W.P., Myers G.J., Connstantine L.L., </author> <title> "Structured Design", </title> <journal> IBM Systems Journal, </journal> <volume> 2, </volume> <year> 1974 </year>
Reference: [Troy81] <author> Troy D.A., Zweben S.H., </author> <title> "Measuring the quality of structured design", </title> <journal> Journal of Systems and Software 2, </journal> <pages> 113-120, </pages> <year> 1981 </year>
Reference-contexts: This leads to the conclusion that dynamic interconnections describe the coupling in a system better than their static counterparts. Static interconnections are described by the programming code only, but dynamic interconnections by the actual run time behavior of the code. Troy and Zweben <ref> [Troy81] </ref> specify different metrics, which are derivable from the structure of a module, and state that all contribute to coupling. This statement is hereby extended that the dynamic counts also describe the level of coupling.
Reference: [Walsh85] <author> Walsh W.B., Betz N.E., </author> <title> Test and Assessment, </title> <publisher> Prentice Hall, </publisher> <year> 1985 </year>
Reference: [Yourdon79] <author> Yourdon E., Constantine L.L., </author> <title> Structured Design, </title> <publisher> Prentice Hall, </publisher> <year> 1979 </year> <month> 10 </month>
Reference-contexts: The term coupling defines the strength of associations established by connections from one software module to another ([Stevens74]). In the literature many different static approaches to measure the coupling degree of software systems were proposed, as in [Myer76], <ref> [Yourdon79] </ref>, [Card90], [Henry81], [Fenton90], etc. In this paper we present a dynamic framework to measure the coupling of software systems. We introduce dynamic characteristics, program execution profiles and a program monitor system.
References-found: 12

