URL: http://www.research.microsoft.com/~dbwilson/det/det-soda.ps
Refering-URL: http://www.research.microsoft.com/~dbwilson/det/
Root-URL: http://www.research.microsoft.com
Email: dbwilson@cs.berkeley.edu  
Title: Determinant Algorithms for Random Planar Structures  
Author: David Bruce Wilson 
Abstract: Colbourn et al. developed a fast algorithm for generating random arborescences of a graph, using the fact that the determinant of a certain matrix enumerates these ar-borescenes. There are a variety of other combinatorial structures that can be enumerated by evaluating a determinant, structures of interest in both the physics and mathematical communities. Randomly generating such objects has been a useful tool in studying their properties, and has guided mathematicians by suggesting theorems that might be true. We show here how to adapt and extend the techniques used by Colbourn et al. to efficiently randomly generate such objects. These new algorithms offer significant improvements over previous algorithms in both their generality and their speed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1974. </year>
Reference-contexts: Addition and subtraction of O (n)-bit integers takes O (n) time, multiplication and integer division take O (n log n log log n) time, and computing greatest-common-divisors takes O (n log 2 n log log n) time <ref> [1] </ref>. Since arithmetic with O (n)-bit rationals is essentially arithmetic with O (n)-bit integers, the cost of each arithmetic operation when computing the LU -factorization of K is O (n log 2 n log log n). <p> Since this fixed-point approximation still has enough good bits, we can recover the exact fraction that it approximates in O (n log 2 n log log n) time making use of the HGCD procedure described in <ref> [1] </ref>. fl Once x is computed, to compute c we again have the task of computing an O (n)-bit rational by adding O (n)- bit rationals without having a priori bounds on the sizes of the partial sums, so we can use this same method.
Reference: [2] <author> A. C. Aitken. </author> <title> Determinants and Matrices. </title> <publisher> Oliver and Boyd Ltd., </publisher> <address> ninth edition, </address> <year> 1956. </year>
Reference-contexts: The algorithm for picking a random matching will need to compute the probabilities of many local events, and if it had to compute the determinant of a large sub-matrix of K each time, it would simply take too long. But Kenyon noticed that Jacobi's theorem (see e.g. <ref> [2] </ref>) allows us to compute these probabilities by instead eval uating the determinant of a small submatrix of K 1 .
Reference: [3] <author> D. J. Aldous. </author> <title> A random walk construction of uniform spanning trees and uniform labelled trees. </title> <journal> SIAM Journal of Discrete Mathematics, </journal> <volume> 3(4) </volume> <pages> 450-465, </pages> <year> 1990. </year>
Reference-contexts: We give the O (l 1:688 n) (arithmetic) time algorithm for the vertex-disjoint routing problem in x 5, 1 There are also a number of random tree generation algorithms based on random walks [6] <ref> [3] </ref> [28] [50] [49], and random perfect matchings of certain special graphs can be generated very quickly via a random spanning tree [46] [41], but it is the determinant-based random generation approach that is relevant to this paper. and then make some concluding remarks in x 6. 2 Kasteleyn Matrices Counting
Reference: [4] <author> N. Blum. </author> <title> A new approach to maximum matching in general graphs. Automata, </title> <booktitle> Languages and Programming, 17th International Colloquim, </booktitle> <pages> pages 586-597, </pages> <year> 1990. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <pages> #443. </pages>
Reference-contexts: We show here how to reduce the running time to O (n 1:5 ) arithmetic operations. The fastest algorithms for generating any (nonrandom) perfect matching in a graph take O (n 1:5 ) time for sparse graphs <ref> [4] </ref> [39] [48], and the technique for counting perfect matchings of planar graphs takes fi (n 1:5 ) arithmetic operations, so it would be difficult to reduce the time further. <p> But we can ensure that each of the appropriate submatrices is nonsingular if we have any arbitrary (nonrandom) perfect matching (v 1 ; v 2 ); (v 3 ; v 4 ); : : : ; (v n1 ; v n ). The Blum algorithm <ref> [4] </ref> and the Micali-Vazirani algorithm [39] [48] both return 2 When floating point arithmetic is used there are other potential problems, but we postpone discussion of numerical issues until the next section. 5 perfect mathcings in O ( p nm) time, where m is the number of edges of G.
Reference: [5] <author> B. Bollobas. </author> <title> Graph Theory: An Introductory Course. </title> <publisher> Springer-Verlag, </publisher> <year> 1979. </year> <note> Graduate texts in mathematics, #63. </note>
Reference-contexts: In combinatorics there is a wide variety of sets whose size can be determined by the evaluation of a determinant. These include the set of spanning arborescences of a graph (the Matrix Tree Theorem of Kirchoff <ref> [5] </ref>), the set of perfect matchings in a planar graph (Kasteleyn), and the set of nonintersecting lattice paths in a planar graph [17] [35]. For further examples see [24] and [45]. These determinant formulas provide a way to randomly generate combinatorial structures, often improving on existing algorithms.
Reference: [6] <author> A. Broder. </author> <title> Generating random spanning trees. </title> <booktitle> In Foundations of Computer Science, </booktitle> <pages> pages 442-447, </pages> <year> 1989. </year>
Reference-contexts: We give the O (l 1:688 n) (arithmetic) time algorithm for the vertex-disjoint routing problem in x 5, 1 There are also a number of random tree generation algorithms based on random walks <ref> [6] </ref> [3] [28] [50] [49], and random perfect matchings of certain special graphs can be generated very quickly via a random spanning tree [46] [41], but it is the determinant-based random generation approach that is relevant to this paper. and then make some concluding remarks in x 6. 2 Kasteleyn Matrices
Reference: [7] <author> N. Chiba, T. Nishizeki, S. Abe, and T. Ozawa. </author> <title> A linear algorithm for embedding planar graphs using P Q-trees. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 30 </volume> <pages> 54-76, </pages> <year> 1985. </year>
Reference-contexts: To compute an orientation of G satisfying Kasteleyn's rule, find a spanning tree of the faces of G, say by breadth-first-search. (One typically has access to a planar embedding of the graph, but given just the combinatorial structure, a planar embedding can be constructed in linear time <ref> [7] </ref>.) If two faces are separated by an edge of G but are not adjacent in the spanning tree, then arbitrarily assign either orientation to that edge. Any given face that is a leaf of the spanning tree is bordered by exactly one edge whose orientation has not been determined.
Reference: [8] <author> H. Cohn, N. Elkies, and J. Propp. </author> <title> Local statistics for random domino tilings of the Aztec diamond. </title> <journal> Duke Mathematical Journal, </journal> <volume> 85 </volume> <pages> 117-166, </pages> <year> 1996. </year>
Reference-contexts: A classic example is the so-called Arctic Circle Theorem [27]. Further examples of theorems that started out as conjectures based on observations of random matchings can be found in [9] and <ref> [8] </ref>. Most algorithms for randomly generating perfect matchings are based on Markov chains. Given a particular matching, one can repeatedly perform local randomizing moves.
Reference: [9] <author> H. Cohn, M. Larsen, and J. Propp. </author> <title> The shape of a typical boxed plane partition, </title> <note> 1996. http://www.math.harvard.edu/~cohn/clp.ps. </note>
Reference-contexts: A classic example is the so-called Arctic Circle Theorem [27]. Further examples of theorems that started out as conjectures based on observations of random matchings can be found in <ref> [9] </ref> and [8]. Most algorithms for randomly generating perfect matchings are based on Markov chains. Given a particular matching, one can repeatedly perform local randomizing moves.
Reference: [10] <author> C. J. Colbourn, W. J. Myrvold, and E. Neufeld. </author> <title> Two algorithms for unranking arborescences. </title> <journal> Journal of Algorithms, </journal> <volume> 20 </volume> <pages> 268-281, </pages> <year> 1996. </year>
Reference-contexts: In an 1 2 n-vertex graph there are O (n 2 ) edges, and computing determinants takes O (n 3 ) time, yielding an O (n 5 ) time algorithm. Remarkably, Colbourn, Myrvold, and Neufeld reduced the run time to the time needed to extract just a single determinant <ref> [10] </ref>: O (n 3 ), or O (n 2:376 ) using one of the more sophisticated determinant algorithms [11]. 1 The same techniques used in the Colbourn-Myrvold-Neufeld algorithm can be applied with little change to sample random perfect matchings in a planar bipartite graph with 2n vertices in O (n 2:376 <p> This time compares favorably with the Luby-Randall-Sinclair algorithm, which takes O (n 4 ) time, though a more fair comparison would take into account the cost of arithmetic operations. As noted in <ref> [10] </ref>, the numerical precision required to perform the comoputation could be significant, and no bounds on the precision were given for the random tree algorithm. We show here how to reduce the running time to O (n 1:5 ) arithmetic operations. <p> Since w 2 T , we have already computed the entries of A k+1 in step 7. As noted in <ref> [10] </ref>, L k+1 and U k+1 can be computed in O (k 2 ) time using A k+1 = A k c X 1 U k Y solving XU k = r and L k Y = c for 2 fi 2k submatrix X and 2k fi2 submatrix Y , and <p> The number of routings in the modified graph is the determinant of this modified matrix, so that the probability of x i going 9 to w in a random routing is the ratio of these determinants. A lemma in <ref> [10] </ref> shows that this ratio is just the dot-product of the new row i of A with column i of A 1 . Thus the time to determine along which edge to move source x i is O (dl), where d is the outdegree of x i . <p> After a source is moved forward and the matrix is updated from A to A 0 , given A 1 we could update it to get A 0 1 in fi (l 2 ) time using the Sherman-Morrison formula [44]. (The interested reader is refered to <ref> [10, Lemma 3.2] </ref>.) Since there may be fi (n) times that a source is moved forward, the algorithm would take (l 2 n) time. (The algorithm found by Randall uses this approach.) However, the Sherman-Morrison formula may be used to update a single column of A 1 in just fi (l) <p> However, the Sherman-Morrison formula may be used to update a single column of A 1 in just fi (l) time, which is what step 5b does. (This can be checked from scratch by doing row operations on A and the corresponding inverse column operations on A 1 .) As in <ref> [10] </ref>, division by 0 is not a problem, since if p r were 0, then A would be singular, and the probability is 0 that the algorithm makes a choice that results in A becoming singular.
Reference: [11] <author> D. Coppersmith and S. Winograd. </author> <title> Matrix multiplication via arithmetic progressions. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 9 </volume> <pages> 251-280, </pages> <year> 1990. </year>
Reference-contexts: Remarkably, Colbourn, Myrvold, and Neufeld reduced the run time to the time needed to extract just a single determinant [10]: O (n 3 ), or O (n 2:376 ) using one of the more sophisticated determinant algorithms <ref> [11] </ref>. 1 The same techniques used in the Colbourn-Myrvold-Neufeld algorithm can be applied with little change to sample random perfect matchings in a planar bipartite graph with 2n vertices in O (n 2:376 ) time.
Reference: [12] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press and McGraw-Hill Book Company, </publisher> <year> 1990. </year>
Reference-contexts: Using standard techniques for bounding the run time of divide-and conquer algorithms <ref> [12] </ref>, we obtain the following theorem: Theorem 2 The algorithm given above returns a random perfect matching of a planar graph using O (n 3=2 ) arithmetic operations. 4 Numerical Issues For any algorithm involving floating point arithmetic, especially algorithms involving matrices, it is important to address the issue of numerical <p> When the counter reaches a certain threshold ^c, it recomputes the inverse of A, stores the result in B, and resets the counter. With "v ! w" denoting that there is a directed edge from v to w, the algorithm proceeds as follows 1. Do a topological sort <ref> [12] </ref> on G, numbering the vertices 1 through n so that v ! w implies v &lt; w. O (m) time. 2.
Reference: [13] <author> M. E. Fisher. </author> <title> Statistical mechanics of dimers on a plane lattice. </title> <journal> Physical Review, </journal> <volume> 124(6) </volume> <pages> 1664-1672, </pages> <year> 1961. </year> <month> 10 </month>
Reference-contexts: 1 Introduction Random matchings in certain planar lattice graphs were originally studied in the physics community as a model for dimer systems <ref> [13] </ref> [31] [30] [22] [14]. More recently they have been studied by mathematicians because of their nice combinatorial properties. Randomly generating particular matchings of large regions has yielded some unexpected results, giving rise to conjectures that have been subsequently proven true.
Reference: [14] <author> M. E. Fisher and J. Stephenson. </author> <title> Statistical mechanics of dimers on a plane lattice. II. </title> <journal> Dimer correlations and monomers. Physical Review, </journal> <volume> 132(4) </volume> <pages> 1411-1431, </pages> <year> 1963. </year>
Reference-contexts: 1 Introduction Random matchings in certain planar lattice graphs were originally studied in the physics community as a model for dimer systems [13] [31] [30] [22] <ref> [14] </ref>. More recently they have been studied by mathematicians because of their nice combinatorial properties. Randomly generating particular matchings of large regions has yielded some unexpected results, giving rise to conjectures that have been subsequently proven true. A classic example is the so-called Arctic Circle Theorem [27].
Reference: [15] <author> A. George and J. W. H. Liu. </author> <title> Computer Solution of Large Sparse Positive Definite Systems. </title> <publisher> Prentice Hall, </publisher> <year> 1981. </year>
Reference-contexts: The Kasteleyn matrix is sparse, and the scientific computing community has developed many algorithms for efficiently manipulating sparse matrices (see e.g. <ref> [15] </ref>). It is important to permute to the rows and columns of the matrix, so that as we continue to manipulate it, it remains sparse. <p> Once we have c, a column of K 1 , we permute its entries to obtain a column of K 1 . Individual rows of K 1 can be computed in a similar fashion using L and U . For further discussion of sparse linear algebra see <ref> [15] </ref>. Since understanding the LU -factorization process is important for x 3.4 and x 4, we review it here. One way to find the LU -factorization of a matrix A is by Gaussian elimination. <p> They state their results for symmetric positive definite matrices, because it is well-known that such matrices are numerically stable <ref> [15] </ref>, but the nested dissection algorithm itself does not rely on this property. Less is known about the stability of skew-symmetric matrices, which is why we discuss numerical issues in x 4.
Reference: [16] <author> I. Gessel and G. Viennot. </author> <title> Binomial determinants, paths, and hook length formulae. </title> <booktitle> Advances in Mathematics, </booktitle> <volume> 58 </volume> <pages> 300-321, </pages> <year> 1985. </year>
Reference-contexts: A classic result of Gessel and Viennot <ref> [16] </ref> [17] and Lindstrom [35] shows how to compute the number of routings of G, provided that the sources and sinks are noncrossing. Define an lfil matrix A such that A i;j gives the number of paths from source s i to sink t j in G.
Reference: [17] <author> I. M. Gessel and X. G. Viennot. </author> <title> Determinants, paths, and plane partitions, 1989. </title> <type> Preprint. </type>
Reference-contexts: These include the set of spanning arborescences of a graph (the Matrix Tree Theorem of Kirchoff [5]), the set of perfect matchings in a planar graph (Kasteleyn), and the set of nonintersecting lattice paths in a planar graph <ref> [17] </ref> [35]. For further examples see [24] and [45]. These determinant formulas provide a way to randomly generate combinatorial structures, often improving on existing algorithms. <p> A classic result of Gessel and Viennot [16] <ref> [17] </ref> and Lindstrom [35] shows how to compute the number of routings of G, provided that the sources and sinks are noncrossing. Define an lfil matrix A such that A i;j gives the number of paths from source s i to sink t j in G.
Reference: [18] <author> B. Grunbaum and G. C. Shephard. </author> <title> Tilings and Patterns. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <year> 1987. </year>
Reference-contexts: In this paper we give a fast algorithm, based on linear algebra, for randomly generating perfect matchings of any planar graph. This extra generality (and speed) is useful because there is a large collection of planar lattices (see <ref> [18] </ref>), and recently mathematicians have been studying random matchings on subgraphs of some of these (e.g. [51] [40]) that were not considered in [38]. Nonbipartite graphs such as subgraphs of the triangular lattice remain largely unexplored due in part to a lack of exploratory tools.
Reference: [19] <author> A. Guenoche. </author> <title> Random spanning tree. </title> <journal> Journal of Algorithms, </journal> <volume> 4 </volume> <pages> 214-220, </pages> <year> 1983. </year> <note> In French. </note>
Reference-contexts: For further examples see [24] and [45]. These determinant formulas provide a way to randomly generate combinatorial structures, often improving on existing algorithms. The first random tree generation algorithm, due to Guenoche <ref> [19] </ref>, proceeded in a straightforward fashion: the algorithm would compare the number of trees that contain a particular edge with the total number of trees, and then based on that information, randomly decide whether or not to include that edge in the tree.
Reference: [20] <author> F. Harary, </author> <title> editor. Graph Theory and Theoretical Physics. </title> <publisher> Academic Press, </publisher> <year> 1967. </year> <title> Chapter "Graph Theory and Crystal Physics" by P. </title> <publisher> W. Kasteleyn. </publisher>
Reference-contexts: In this section we briefly introduce Kasteleyn matrices, which can be used to efficiently count perfect match-ings of planar graphs, and explain how to construct such matrices in linear time. The interested reader can find further background in <ref> [20] </ref>. Rather than directly count the number of perfect matchings of a planar graph G, the determinant of the Kasteleyn matrix counts ordered pairs of perfect match-ings. When two matchings of G are superimposed, the result is a collection of cycles, each having even size.
Reference: [21] <author> F. Harary. </author> <title> Graph Theory. </title> <publisher> Addison-Wesley, </publisher> <year> 1969. </year>
Reference-contexts: Since the number of edges in a planar graph is less than three times the number of its vertices (see e.g. <ref> [21] </ref>) the new graph can only be a constant factor larger than the original graph. 3.2 Computing probabilities Consider the probability that a random matching contains edges (v 1 ; v 2 ); : : : ; (v 2k1 ; v 2k ).
Reference: [22] <author> O. J. Heilmann and E. H. </author> <title> Lieb. </title> <journal> Theory of monomer-dimer systems. Communications in Mathematical Physics, </journal> <volume> 25 </volume> <pages> 190-232, </pages> <year> 1972. </year>
Reference-contexts: 1 Introduction Random matchings in certain planar lattice graphs were originally studied in the physics community as a model for dimer systems [13] [31] [30] <ref> [22] </ref> [14]. More recently they have been studied by mathematicians because of their nice combinatorial properties. Randomly generating particular matchings of large regions has yielded some unexpected results, giving rise to conjectures that have been subsequently proven true. A classic example is the so-called Arctic Circle Theorem [27].
Reference: [23] <author> B. Hendrickson and E. Rothberg. </author> <title> Improving the runtime and quality of nested dissection ordering, </title> <year> 1996. </year>
Reference-contexts: Less is known about the stability of skew-symmetric matrices, which is why we discuss numerical issues in x 4. In an implementation, one may use one of the more recent reordering library routines that do well in practice <ref> [23] </ref> [29]. 3.5 The random matching algorithm At this point we can outline the major steps of the algorithm for generating a random perfect matching of the graph: 1. Perform vertex-splitting if necessary to get a bounded-degree graph G. O (n) time. 2. Compute a Kasteleyn matrix of G.
Reference: [24] <author> D. M. Jackson and I. P. Goulden. </author> <title> A formal calculus for the enumerative system of sequences. I. Combinatorial theorems. </title> <journal> Studies in Applied Mathematics, </journal> <volume> 61 </volume> <pages> 141-178, </pages> <year> 1979. </year>
Reference-contexts: These include the set of spanning arborescences of a graph (the Matrix Tree Theorem of Kirchoff [5]), the set of perfect matchings in a planar graph (Kasteleyn), and the set of nonintersecting lattice paths in a planar graph [17] [35]. For further examples see <ref> [24] </ref> and [45]. These determinant formulas provide a way to randomly generate combinatorial structures, often improving on existing algorithms.
Reference: [25] <author> M. Jerrum and A. Sinclair. </author> <title> Approximating the permanent. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(6) </volume> <pages> 1149-1178, </pages> <year> 1989. </year>
Reference-contexts: Random generation can be used for approximate enumeration of sets (see e.g. <ref> [25] </ref>), and likewise, the ability to enumerate sets can be used in random generation algorithms. In combinatorics there is a wide variety of sets whose size can be determined by the evaluation of a determinant.
Reference: [26] <author> M. R. Jerrum, L. G. Valiant, and V. V. Vazirani. </author> <title> Random generation of combinatorial structures from a uniform distribution. </title> <journal> Theoretical Computer Science, </journal> <volume> 43 </volume> <pages> 169-188, </pages> <year> 1986. </year>
Reference-contexts: (Luby et al. also give a polynomial time algorithm for generating random Eule-rian orientations of the Cartesian lattice, an application which we do not treat here.) There is a close relationship between the problems of counting the elements of a finite set and randomly generating an element of that set <ref> [26] </ref> [33]. Random generation can be used for approximate enumeration of sets (see e.g. [25]), and likewise, the ability to enumerate sets can be used in random generation algorithms. In combinatorics there is a wide variety of sets whose size can be determined by the evaluation of a determinant.
Reference: [27] <author> W. Jockusch, J. Propp, and P. Shor. </author> <title> Random domino tilings and the arctic circle theorem, 1995. </title> <type> Preprint. </type>
Reference-contexts: More recently they have been studied by mathematicians because of their nice combinatorial properties. Randomly generating particular matchings of large regions has yielded some unexpected results, giving rise to conjectures that have been subsequently proven true. A classic example is the so-called Arctic Circle Theorem <ref> [27] </ref>. Further examples of theorems that started out as conjectures based on observations of random matchings can be found in [9] and [8]. Most algorithms for randomly generating perfect matchings are based on Markov chains. Given a particular matching, one can repeatedly perform local randomizing moves.
Reference: [28] <author> D. Kandel, Y. Matias, R. Unger, and P. Winkler. </author> <title> Shuffling biological sequences. </title> <note> Discrete Applied Mathematics, 1996. To appear in a special issue on computational molecular biology. </note>
Reference-contexts: We give the O (l 1:688 n) (arithmetic) time algorithm for the vertex-disjoint routing problem in x 5, 1 There are also a number of random tree generation algorithms based on random walks [6] [3] <ref> [28] </ref> [50] [49], and random perfect matchings of certain special graphs can be generated very quickly via a random spanning tree [46] [41], but it is the determinant-based random generation approach that is relevant to this paper. and then make some concluding remarks in x 6. 2 Kasteleyn Matrices Counting the
Reference: [29] <author> G. Karypis and V. Kumar. MeTiS: </author> <title> Unstructured graph partitioning and sparse matrix ordering system. </title> <type> Technical report, </type> <year> 1995. </year>
Reference-contexts: Less is known about the stability of skew-symmetric matrices, which is why we discuss numerical issues in x 4. In an implementation, one may use one of the more recent reordering library routines that do well in practice [23] <ref> [29] </ref>. 3.5 The random matching algorithm At this point we can outline the major steps of the algorithm for generating a random perfect matching of the graph: 1. Perform vertex-splitting if necessary to get a bounded-degree graph G. O (n) time. 2. Compute a Kasteleyn matrix of G.
Reference: [30] <author> P. W. Kasteleyn. </author> <title> The statistics of dimers on a lattice. I. The number of dimer arrangements on a quadratic lattice. </title> <journal> Physica, </journal> <volume> 27 </volume> <pages> 1209-1225, </pages> <year> 1961. </year>
Reference-contexts: 1 Introduction Random matchings in certain planar lattice graphs were originally studied in the physics community as a model for dimer systems [13] [31] <ref> [30] </ref> [22] [14]. More recently they have been studied by mathematicians because of their nice combinatorial properties. Randomly generating particular matchings of large regions has yielded some unexpected results, giving rise to conjectures that have been subsequently proven true. A classic example is the so-called Arctic Circle Theorem [27].
Reference: [31] <author> P. W. Kasteleyn. </author> <title> Dimer statistics and phase transitions. </title> <journal> Journal of Mathematical Physics, </journal> <volume> 4(2) </volume> <pages> 287-293, </pages> <year> 1963. </year>
Reference-contexts: 1 Introduction Random matchings in certain planar lattice graphs were originally studied in the physics community as a model for dimer systems [13] <ref> [31] </ref> [30] [22] [14]. More recently they have been studied by mathematicians because of their nice combinatorial properties. Randomly generating particular matchings of large regions has yielded some unexpected results, giving rise to conjectures that have been subsequently proven true. A classic example is the so-called Arctic Circle Theorem [27].
Reference: [32] <author> R. Kenyon. </author> <title> Local statistics of lattice dimers, </title> <note> 1996. http://umpa.ens-lyon.fr/~rkenyon/ match.ps.Z. </note>
Reference-contexts: ;r l where B is an l fi l matrix with B i;j = det A r i c j , or equivalently, det A r 1 ;::: ;r l r 1 ;::: ;r l : Kenyon used this characterization to compute placement probabilities in graphs with n = 1 <ref> [32] </ref>, we will use this formula to efficiently randomly pair up vertices of G that are contained in a small seperator. 3.3 Finding an LU -factorization We do not want to compute K 1 , because it would take too much time, O (n 2 ), just to write down the
Reference: [33] <author> V. G. Kulkarni. </author> <title> Generating random combinatorial objects. </title> <journal> Journal of Algorithms, </journal> <volume> 11(2) </volume> <pages> 185-207, </pages> <year> 1990. </year>
Reference-contexts: et al. also give a polynomial time algorithm for generating random Eule-rian orientations of the Cartesian lattice, an application which we do not treat here.) There is a close relationship between the problems of counting the elements of a finite set and randomly generating an element of that set [26] <ref> [33] </ref>. Random generation can be used for approximate enumeration of sets (see e.g. [25]), and likewise, the ability to enumerate sets can be used in random generation algorithms. In combinatorics there is a wide variety of sets whose size can be determined by the evaluation of a determinant.
Reference: [34] <author> G. Kuperberg, </author> <year> 1996. </year> <type> Personal communication. </type>
Reference-contexts: However, unless l = O (n 0:3 ), an even faster approach would be to reduce the nonintersecting paths problem to a perfect matching problem (this can be done in linear time <ref> [34] </ref>), and find a random perfect matching using the O (n 3=2 ) time algorithm given earlier. A classic result of Gessel and Viennot [16] [17] and Lindstrom [35] shows how to compute the number of routings of G, provided that the sources and sinks are noncrossing.
Reference: [35] <author> B. Lindstrom. </author> <title> On the vector representations of induced matroids. </title> <journal> The Bulletin of the London Mathematical Society, </journal> <volume> 5 </volume> <pages> 85-90, </pages> <year> 1973. </year>
Reference-contexts: These include the set of spanning arborescences of a graph (the Matrix Tree Theorem of Kirchoff [5]), the set of perfect matchings in a planar graph (Kasteleyn), and the set of nonintersecting lattice paths in a planar graph [17] <ref> [35] </ref>. For further examples see [24] and [45]. These determinant formulas provide a way to randomly generate combinatorial structures, often improving on existing algorithms. <p> A classic result of Gessel and Viennot [16] [17] and Lindstrom <ref> [35] </ref> shows how to compute the number of routings of G, provided that the sources and sinks are noncrossing. Define an lfil matrix A such that A i;j gives the number of paths from source s i to sink t j in G. The number of routings is det (A).
Reference: [36] <author> R. J. Lipton, D. J. Rose, and R. E. Tarjan. </author> <title> Generalized nested dissection. </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 16(2) </volume> <pages> 346-358, </pages> <year> 1979. </year>
Reference-contexts: The Lipton-Rose-Tarjan nested-dissection algorithm <ref> [36] </ref> uses the fact that planar graphs have small separators which can be found quickly [37] to reorder the nodes of G fl in O (n log n) time, so that computing the LU -factorization takes O (n 3=2 ) time, and so that the resulting factors have O (n log
Reference: [37] <author> R. J. Lipton and R. E. Tarjan. </author> <title> A separator theorem for planar graphs. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 36(2) </volume> <pages> 177-189, </pages> <year> 1979. </year>
Reference-contexts: We will take advantage of properties of the inverse of the Kasteleyn matrix, use these sparse matrix algorithms, and use the fact that planar graphs have small separators <ref> [37] </ref>, to develop a divide-and-conquer algorithm for generating random matchings in O (n 3=2 ) time. 3.1 Vertex splitting In almost all graphs of interest in either the physics or mathematical communities, the there is some small fixed bound on the degree of any vertex graph. <p> The Lipton-Rose-Tarjan nested-dissection algorithm [36] uses the fact that planar graphs have small separators which can be found quickly <ref> [37] </ref> to reorder the nodes of G fl in O (n log n) time, so that computing the LU -factorization takes O (n 3=2 ) time, and so that the resulting factors have O (n log n) nonzero entries.
Reference: [38] <author> M. Luby, D. Randall, and A. Sinclair. </author> <title> Markov chain algorithms for planar lattice structures (extended abstract). </title> <booktitle> In Foundations of Computer Science, </booktitle> <pages> pages 150-159, </pages> <year> 1995. </year>
Reference-contexts: Further examples of theorems that started out as conjectures based on observations of random matchings can be found in [9] and [8]. Most algorithms for randomly generating perfect matchings are based on Markov chains. Given a particular matching, one can repeatedly perform local randomizing moves. Luby, Randall, and Sinclair <ref> [38] </ref> gave several Markov chains that use non-local moves, and showed that the Markov chains converge to the uniform distribution in polynomial time. They gave a Markov chain for random perfect matchings of subgraphs of the square-lattice, and another for subgraphs of the hexagonal lattice. <p> This extra generality (and speed) is useful because there is a large collection of planar lattices (see [18]), and recently mathematicians have been studying random matchings on subgraphs of some of these (e.g. [51] [40]) that were not considered in <ref> [38] </ref>. Nonbipartite graphs such as subgraphs of the triangular lattice remain largely unexplored due in part to a lack of exploratory tools. There is a one-to-one correspondence between perfect matchings in subgraphs of the square (or hexagonal) lattice, and routings of vertex-disjoint paths in a related graph. <p> There is a one-to-one correspondence between perfect matchings in subgraphs of the square (or hexagonal) lattice, and routings of vertex-disjoint paths in a related graph. In fact, the algorithms in <ref> [38] </ref> work by first generating a random routing in these graphs, and then mapping the routing into a matching of the original graph. <p> This algorithm is closely related to an O (l 2 n) time algorithm that was independently found by Randall [43], which in turn compares favorably with the O (n 4 ) time algorithm in <ref> [38] </ref>. It seems likely that faster algorithms are possible, so we do not derive its bit complexity. In x 2 we give a brief introduction to Kasteleyn matrices | matrices whose entries are 0 or 1, mostly 0's, whose determinants give the number of perfect match-ings. <p> Figure 2 shows an example graph with a set of noncrossing sources and sinks. Other examples of graphs with noncrossing sources and sinks include the lozenge routing graphs and domino routing graphs that are described in <ref> [38] </ref>. In this section we show how to generate a random routing in O (l 1:688 n) time. The Markov chain algorithms in [38] generate routings for specific lattices, and in this 8 t 1 ; t 2 ; t 3 that are noncrossing. <p> Other examples of graphs with noncrossing sources and sinks include the lozenge routing graphs and domino routing graphs that are described in <ref> [38] </ref>. In this section we show how to generate a random routing in O (l 1:688 n) time. The Markov chain algorithms in [38] generate routings for specific lattices, and in this 8 t 1 ; t 2 ; t 3 that are noncrossing. <p> not preserve the noncross-ing property, but that moving either s 1 or s 3 along either of their outgoing edges will preserve the noncrossing property. (If we move s 1 down, there are no routings, so the sources and sinks are trivially noncrossing.) sense this algorithm is more general, but <ref> [38] </ref> also gives an algorithm for routings in the square lattice that may share vertices but not edges (for the Eulerian orientation application) which we do not treat here. <p> This algorithm is related to an O (l 2 n) time algorithm independently found by Randall [43], which in turn compares favorably with the O (n 4 ) time algorithms in <ref> [38] </ref>, as l &lt; n and typically l might be O ( p n).
Reference: [39] <author> S. Micali and V. V. Vazirani. </author> <title> An O( p jvjjEj) algorithm for finding maximum matching in general graphs. </title> <booktitle> In 21st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 17-27, </pages> <year> 1980. </year>
Reference-contexts: We show here how to reduce the running time to O (n 1:5 ) arithmetic operations. The fastest algorithms for generating any (nonrandom) perfect matching in a graph take O (n 1:5 ) time for sparse graphs [4] <ref> [39] </ref> [48], and the technique for counting perfect matchings of planar graphs takes fi (n 1:5 ) arithmetic operations, so it would be difficult to reduce the time further. <p> The Blum algorithm [4] and the Micali-Vazirani algorithm <ref> [39] </ref> [48] both return 2 When floating point arithmetic is used there are other potential problems, but we postpone discussion of numerical issues until the next section. 5 perfect mathcings in O ( p nm) time, where m is the number of edges of G.
Reference: [40] <author> J. Propp, </author> <year> 1996. </year> <type> Personal communication. </type>
Reference-contexts: This extra generality (and speed) is useful because there is a large collection of planar lattices (see [18]), and recently mathematicians have been studying random matchings on subgraphs of some of these (e.g. [51] <ref> [40] </ref>) that were not considered in [38]. Nonbipartite graphs such as subgraphs of the triangular lattice remain largely unexplored due in part to a lack of exploratory tools. <p> ! &lt; 3, so the last term is negligible, and the planarity of the graph implies m 3n, so the middle term is as well. fl 6 Concluding Remarks Another random perfect matching algorithm has recently been developed for bipartite graphs that can be compactly embedded in the square lattice <ref> [40] </ref>. The running time is (n 3=2 ) arithmetic operations, with small constant for graphs with compact embeddings. One advantage of it is that it also computes, for each edge, the probability of that edge being present in a random matching.
Reference: [41] <author> J. G. Propp and D. B. Wilson. </author> <title> Trees and matchings. </title> <type> Manuscript. </type>
Reference-contexts: (arithmetic) time algorithm for the vertex-disjoint routing problem in x 5, 1 There are also a number of random tree generation algorithms based on random walks [6] [3] [28] [50] [49], and random perfect matchings of certain special graphs can be generated very quickly via a random spanning tree [46] <ref> [41] </ref>, but it is the determinant-based random generation approach that is relevant to this paper. and then make some concluding remarks in x 6. 2 Kasteleyn Matrices Counting the number of perfect matchings of a graph is #P-complete, even if the graph has maximum degree 3 [47].
Reference: [42] <author> J. G. Propp and D. B. Wilson. </author> <title> Exact sampling with coupled Markov chains and applications to statistical mechanics. Random Structures and Algorithms, </title> <booktitle> 9 </booktitle> <pages> 223-252, </pages> <year> 1996. </year>
Reference-contexts: They gave a Markov chain for random perfect matchings of subgraphs of the square-lattice, and another for subgraphs of the hexagonal lattice. These Markov chains, and indeed all Markov chains that have been proposed for perfect matchings of bipartite planar graphs, can be run using monotone coupling-from-the-past <ref> [42] </ref> to obtain random samples in about the mixing time, even if no bounds on the mixing time are known or if those bounds that are known fl University of California, 387 Soda Hall, Berkeley, CA 94720-1776. Supported by an NSF-postdoctoral fellowship. are unduly pessimistic.
Reference: [43] <author> D. Randall, </author> <year> 1996. </year> <type> Personal communication. </type>
Reference-contexts: This algorithm is closely related to an O (l 2 n) time algorithm that was independently found by Randall <ref> [43] </ref>, which in turn compares favorably with the O (n 4 ) time algorithm in [38]. It seems likely that faster algorithms are possible, so we do not derive its bit complexity. <p> This algorithm is related to an O (l 2 n) time algorithm independently found by Randall <ref> [43] </ref>, which in turn compares favorably with the O (n 4 ) time algorithms in [38], as l &lt; n and typically l might be O ( p n).
Reference: [44] <author> J. Sherman and W. J. Morrison. </author> <title> Adjustment of an inverse matrix corresponding to changes in the elements of a given column or a given row of the original matrix. </title> <journal> The Annals of Mathematical Statistics, </journal> <volume> 20:621, </volume> <year> 1949. </year>
Reference-contexts: After a source is moved forward and the matrix is updated from A to A 0 , given A 1 we could update it to get A 0 1 in fi (l 2 ) time using the Sherman-Morrison formula <ref> [44] </ref>. (The interested reader is refered to [10, Lemma 3.2].) Since there may be fi (n) times that a source is moved forward, the algorithm would take (l 2 n) time. (The algorithm found by Randall uses this approach.) However, the Sherman-Morrison formula may be used to update a single column
Reference: [45] <author> R. P. Stanley. </author> <title> A matrix for counting paths in acyclic digraphs. </title> <journal> Journal of Combinatorial Theory, Series A, </journal> <volume> 74 </volume> <pages> 169-172, </pages> <year> 1996. </year>
Reference-contexts: These include the set of spanning arborescences of a graph (the Matrix Tree Theorem of Kirchoff [5]), the set of perfect matchings in a planar graph (Kasteleyn), and the set of nonintersecting lattice paths in a planar graph [17] [35]. For further examples see [24] and <ref> [45] </ref>. These determinant formulas provide a way to randomly generate combinatorial structures, often improving on existing algorithms.
Reference: [46] <author> H. N. V. Temperley. </author> <booktitle> In Combinatorics: Proceedings of the British Combinatorial Conference 1973, </booktitle> <pages> pages 202-204, </pages> <year> 1974. </year> <booktitle> London Mathematical Society Lecture Notes Series #13. </booktitle>
Reference-contexts: n) (arithmetic) time algorithm for the vertex-disjoint routing problem in x 5, 1 There are also a number of random tree generation algorithms based on random walks [6] [3] [28] [50] [49], and random perfect matchings of certain special graphs can be generated very quickly via a random spanning tree <ref> [46] </ref> [41], but it is the determinant-based random generation approach that is relevant to this paper. and then make some concluding remarks in x 6. 2 Kasteleyn Matrices Counting the number of perfect matchings of a graph is #P-complete, even if the graph has maximum degree 3 [47].
Reference: [47] <author> L. G. Valiant. </author> <title> The complexity of computing the permanent. </title> <journal> Theoretical Computer Science, </journal> <volume> 8 </volume> <pages> 189-201, </pages> <year> 1979. </year>
Reference-contexts: random spanning tree [46] [41], but it is the determinant-based random generation approach that is relevant to this paper. and then make some concluding remarks in x 6. 2 Kasteleyn Matrices Counting the number of perfect matchings of a graph is #P-complete, even if the graph has maximum degree 3 <ref> [47] </ref>. In this section we briefly introduce Kasteleyn matrices, which can be used to efficiently count perfect match-ings of planar graphs, and explain how to construct such matrices in linear time. The interested reader can find further background in [20].
Reference: [48] <author> V. V. Vazirani. </author> <title> A theory of alternating paths and blossoms for proving correctness of the O( p V E) general graph maximum matching algorithm. </title> <journal> Combinatorica, </journal> <volume> 14(1) </volume> <pages> 71-109, </pages> <year> 1994. </year>
Reference-contexts: We show here how to reduce the running time to O (n 1:5 ) arithmetic operations. The fastest algorithms for generating any (nonrandom) perfect matching in a graph take O (n 1:5 ) time for sparse graphs [4] [39] <ref> [48] </ref>, and the technique for counting perfect matchings of planar graphs takes fi (n 1:5 ) arithmetic operations, so it would be difficult to reduce the time further. We then bound the sizes of the numbers that are involved in the computation to bound the bit complexity of the algorithm. <p> The Blum algorithm [4] and the Micali-Vazirani algorithm [39] <ref> [48] </ref> both return 2 When floating point arithmetic is used there are other potential problems, but we postpone discussion of numerical issues until the next section. 5 perfect mathcings in O ( p nm) time, where m is the number of edges of G.
Reference: [49] <author> D. B. Wilson. </author> <title> Generating random spanning trees more quickly than the cover time. </title> <booktitle> In Symposium on the Theory of Computing, </booktitle> <pages> pages 296-303, </pages> <year> 1996. </year>
Reference-contexts: We give the O (l 1:688 n) (arithmetic) time algorithm for the vertex-disjoint routing problem in x 5, 1 There are also a number of random tree generation algorithms based on random walks [6] [3] [28] [50] <ref> [49] </ref>, and random perfect matchings of certain special graphs can be generated very quickly via a random spanning tree [46] [41], but it is the determinant-based random generation approach that is relevant to this paper. and then make some concluding remarks in x 6. 2 Kasteleyn Matrices Counting the number of
Reference: [50] <author> D. B. Wilson and J. G. Propp. </author> <title> How to get an exact sample from a generic Markov chain and sample a random spanning tree from a directed graph, both within the cover time. </title> <booktitle> In Symposium on Discrete Algorithms, </booktitle> <pages> pages 448-457, </pages> <year> 1996. </year>
Reference-contexts: We give the O (l 1:688 n) (arithmetic) time algorithm for the vertex-disjoint routing problem in x 5, 1 There are also a number of random tree generation algorithms based on random walks [6] [3] [28] <ref> [50] </ref> [49], and random perfect matchings of certain special graphs can be generated very quickly via a random spanning tree [46] [41], but it is the determinant-based random generation approach that is relevant to this paper. and then make some concluding remarks in x 6. 2 Kasteleyn Matrices Counting the number
Reference: [51] <author> B.-Y. Yang. </author> <title> Two Enumeration Problems About the Aztec Diamonds. </title> <type> PhD thesis, </type> <institution> MIT Math Department, </institution> <year> 1991. </year>
Reference-contexts: This extra generality (and speed) is useful because there is a large collection of planar lattices (see [18]), and recently mathematicians have been studying random matchings on subgraphs of some of these (e.g. <ref> [51] </ref> [40]) that were not considered in [38]. Nonbipartite graphs such as subgraphs of the triangular lattice remain largely unexplored due in part to a lack of exploratory tools.
References-found: 51

