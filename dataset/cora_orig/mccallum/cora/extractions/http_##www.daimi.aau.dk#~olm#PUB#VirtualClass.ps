URL: http://www.daimi.aau.dk/~olm/PUB/VirtualClass.ps
Refering-URL: http://www.daimi.aau.dk/~olm/PUB/
Root-URL: http://www.daimi.aau.dk
Email: E-mail: olmadsen@daimi.dk  E-mail: birger@nr.uninett.no  
Phone: Tlf.: +45 89 42 56 70  Tlf.: +47 2 45 35 00  
Title: Virtual Classes A powerful mechanism in object-oriented programming  
Author: Ole Lehrmann Madsen Birger Moller-Pedersen 
Date: October 1989  
Address: bogade 34, DK-8200 Aarhus N, Denmark  P.O. Box 114, Blindern, N-0314 Oslo 3, Norway  
Affiliation: Computer Science Department, Aarhus University  Norwegian Computing Center  
Abstract: In most object-oriented languages, the attributes of an object may be references to objects and (virtual) procedures. In Simula and BETA it is also possible to have class attributes. The power of class attributes has not yet been widely recognized. In BETA a class may also have virtual class attributes. This makes it possible to defer part of the specification of a class attribute to a subclass. In this sense virtual classes are analogous to virtual procedures. Virtual classes are mainly interesting within strongly typed languages where they 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ada Reference Manual: </author> <title> Proposed Standard Document. </title> <institution> United States Department of Defense, </institution> <month> July </month> <year> 1980. </year>
Reference: [2] <author> P. </author> <title> America: Inheritance and Subtyping in a Parallel Object-Oriented Language. </title> <booktitle> ECOOP'87, European Conference on Object-Oriented Programming, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 276, </volume> <publisher> Springer Verlag, </publisher> <year> 1987. </year>
Reference-contexts: This includes the notion of information hiding. Another aspect is the discussion of code sharing versus types. Subclassing is very often used for code sharing; the term inheritance underlines this. As pointed out in <ref> [2] </ref>, this usage of subclassing may be conflicting with defining types. We tend to agree with this. However, in BETA subclass-ing is intended for modelling types (or concepts).
Reference: [3] <author> A.H. Borning, D.H. Ingalls: </author> <title> A Type Declaration and Inference System for Smalltalk. </title> <institution> University of Washington, </institution> <month> August </month> <year> 1981. </year>
Reference-contexts: In addition an operation like V1 [] -&gt; C2.Plus would be valid. Instead of explicitly defining a virtual class like ThisClass, it would be more convenient to have a predefined name for this. In [7] the name # this Ring is used. In the Smalltalk proposal in <ref> [3] </ref> the name &lt;self&gt; is used and in Eiffel this would correspond to like current. 4.2 Functional definition of class Ring Even though a language is object-oriented there is no reason that it should not support the functional style of programming.
Reference: [4] <author> O.J. Dahl, B. Myrhaug, K. Nygaard: </author> <title> SIMULA 67 Common Base. </title> <institution> Norwe-gian Computing Center, Oslo, </institution> <year> 1968. </year>
Reference-contexts: In a subclass it is possible to specialize the general properties defined in the superclass. This can be done by adding references and/or procedures. However, it is also possible to modify the procedures defined in the super-class. Modification can take place in different ways. In Simula 67 <ref> [4] </ref> a procedure attribute may be declared virtual. A virtual procedure may then be redefined in a subclass. A non-virtual procedure cannot be redefined 1 . This is essentially the same scheme adapted by C++ [16] and Eiffel [13].
Reference: [5] <editor> H.P. Dahle, M. Lofgren, B. Magnusson, O.L. Madsen: </editor> <booktitle> The Mjolner Project. Software Tools 1987, Wembley, </booktitle> <month> June </month> <year> 1987. </year> <month> 17 </month>
Reference-contexts: Subclassing is very often used for code sharing; the term inheritance underlines this. As pointed out in [2], this usage of subclassing may be conflicting with defining types. We tend to agree with this. However, in BETA subclass-ing is intended for modelling types (or concepts). The Mjolner BETA System <ref> [5] </ref> includes facilities for separating a class definition from its implementation. 2 Classes and virtual procedures In this section the notation for classes, procedures and virtual procedures will be presented. 2.1 Class and subclasses A class definition has the form described in Figure 1.
Reference: [6] <author> A. Goldberg, D. Robson: </author> <title> Smalltalk-80: The Language and its Implemen--tation. </title> <publisher> Addison Wesley, </publisher> <year> 1984. </year>
Reference-contexts: In Simula 67 [4] a procedure attribute may be declared virtual. A virtual procedure may then be redefined in a subclass. A non-virtual procedure cannot be redefined 1 . This is essentially the same scheme adapted by C++ [16] and Eiffel [13]. In Smalltalk <ref> [6] </ref> any procedure is virtual in the sense that it can be redefined in a subclass, and even the parameters of a procedure may be redefined. In BETA [8] a virtual procedure cannot be redefined in a subclass, but it may be further defined by an extended definition.
Reference: [7] <author> B.B. Kristensen, O.L. Madsen, B. Moller-Pedersen, K. Nygaard: </author> <title> Abstraction Mechanisms in the BETA Programming Language. </title> <booktitle> Proceedings of the Tenth ACM Symposium on Principles of Programming Languages, </booktitle> <month> January 24-26 </month> <year> 1983, </year> <institution> Austin, Texas. </institution>
Reference-contexts: An explicit check will be needed to ensure that A refers to a Complex object. In addition an operation like V1 [] -&gt; C2.Plus would be valid. Instead of explicitly defining a virtual class like ThisClass, it would be more convenient to have a predefined name for this. In <ref> [7] </ref> the name # this Ring is used.
Reference: [8] <author> B.B. Kristensen, O.L. Madsen, B. Moller-Pedersen, K. Nygaard: </author> <title> The BETA Programming Language. In: B.D. </title> <editor> Shriver, P.Wegner (ed.), </editor> <booktitle> Research Directions in Object Oriented Programming, </booktitle> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: This is essentially the same scheme adapted by C++ [16] and Eiffel [13]. In Smalltalk [6] any procedure is virtual in the sense that it can be redefined in a subclass, and even the parameters of a procedure may be redefined. In BETA <ref> [8] </ref> a virtual procedure cannot be redefined in a subclass, but it may be further defined by an extended definition. The extended procedure is a "subprocedure" (in the same way as for subclass) of the procedure defined in the superclass. <p> The notion of virtual class has been developed as part of the BETA language. It is a consequence of the unification of classes, procedures, functions and types into one general abstraction mechanism, the pattern. The implications of this have been discussed elsewhere <ref> [8, 9] </ref>. As there is only one language mechanism for classes and procedures, the notion of subpattern applies equally well to classes and procedures. <p> A subprocedure will have enter/exit lists that are the concatenations of the lists from the superprocedure and the lists specified for the subprocedure. 3 In <ref> [8] </ref> it is described what is actually meant by "copy" 6 OpenRecord: proc (# ID: ^Text; R: ^Record enter ID [] do ID [] -&gt; theDataBase.Open -&gt; R []; INNER; R.Close #); OpenWritableRecord: proc OpenRecord (# do R.Lock; INNER; R.Free #); Foo: proc OpenWritableRecord (# do someData [] -&gt; R.put #) <p> The common template for patterns has the form shown in Figure 3 without the keyword 16 proc. From this it follows, that classes in BETA also have an action-part (enter In do Imp exit Out) like procedures. For a further discussion of this the reader is referred to <ref> [8] </ref>. As it may be seen, the notion of virtual pattern (class and procedure) captures the concept of virtual procedure as known from Simula, C++ and Eiffel. In addition it extends the possibilities for simulating genericity by means of subclassing.
Reference: [9] <author> B.B. Kristensen, O.L. Madsen, B. Moller-Pedersen, K. Nygaard: </author> <title> Classification of Actions or Inheritance also for Methods. </title> <booktitle> ECOOP'87, European Conference on Object-Oriented Programming, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 276, </volume> <publisher> Springer Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Behavioral compatibility can only be obtained by proving that the further definitions do not not violate the invariants of the superclass. For a more detailed discussion of virtual procedures in BETA see <ref> [9] </ref>. Simula and BETA are block-structured languages. This implies that classes and procedures can be arbitrarily nested. I.e. in Simula and BETA an object may have class attributes in addition to references and procedures. In [10] the usefulness of class attributes is discussed. <p> The notion of virtual class has been developed as part of the BETA language. It is a consequence of the unification of classes, procedures, functions and types into one general abstraction mechanism, the pattern. The implications of this have been discussed elsewhere <ref> [8, 9] </ref>. As there is only one language mechanism for classes and procedures, the notion of subpattern applies equally well to classes and procedures.
Reference: [10] <author> O.L. Madsen: </author> <title> Block Structure and Object Oriented Languages. In: B.D. </title> <editor> Shriver, P. Wegner (ed.): </editor> <booktitle> Research Directions in Object Oriented Programming, </booktitle> <publisher> MIT Press, </publisher> <year> 1987). </year>
Reference-contexts: For a more detailed discussion of virtual procedures in BETA see [9]. Simula and BETA are block-structured languages. This implies that classes and procedures can be arbitrarily nested. I.e. in Simula and BETA an object may have class attributes in addition to references and procedures. In <ref> [10] </ref> the usefulness of class attributes is discussed. The subject of this paper is the introduction of the notion of virtual class 2 . A virtual class is similar to a virtual procedure in the sense that it may be extended in a subclass. <p> Execution of P.Display will imply execution of Key.Display, Name.Display, Sex.Display, and possibly more since P is known to denote at least Person-objects. 2.4 Classes as attributes As mentioned above an object may have class-attributes. As an example of class attributes consider Figure 6 which is the grammar example from <ref> [10] </ref>. Class Grammar describes the structure of grammar objects. Part of the description of a grammar is the notion of symbol associated with a grammar. The class attribute Symbol describes the structure of symbols associated with a particular Grammar-instance. In the example two Grammar instances are declared: AdaGram and PascalGram.
Reference: [11] <author> O.L. Madsen, C. Norgaard: </author> <title> An Object-Oriented Metaprogramming System. </title> <booktitle> Hawaii International Conference on System Sciences - 21, </booktitle> <month> January 5-8, </month> <year> 1988. </year>
Reference-contexts: The usefulness of virtual procedures are well known. Class attributes and especially virtual class attributes are less well know. These concepts have been used for several years by BETA programmers and they have clearly demonstrated their usefulness in practice. For other examples see <ref> [11] </ref> and [15]. Acknowledgement. The notion of virtual class was developed as part of the BETA project, in which Bent Bruun Kristensen, Kristen Nygaard and the authors were involved. Part of this work has been supported by the Danish Natural Science Research Council, FTU Grant No. 5.17.5.1.25.
Reference: [12] <author> B. Meyer: </author> <title> Genericity versus Inheritance. OOPSLA'86, Object-Oriented Programming Systems, </title> <journal> Languages and Applications, Sigplan Notices, </journal> <month> September </month> <year> 1986. </year>
Reference-contexts: The meaning of fixed will be explained later. 4 Virtual classes and generics/packages The simple example above on a general set of objects or Record objects indicates the use of virtual classes as "type parameters" of the enclosing class. In <ref> [12] </ref> an interesting comparison between genericity and inheritance is given. It is shown that, in general, inheritance cannot be simulated by genericity. On the other hand it is shown that genericity can be simulated by inheritance.
Reference: [13] <author> B. Meyer: </author> <title> Object-oriented Software Construction. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: Modification can take place in different ways. In Simula 67 [4] a procedure attribute may be declared virtual. A virtual procedure may then be redefined in a subclass. A non-virtual procedure cannot be redefined 1 . This is essentially the same scheme adapted by C++ [16] and Eiffel <ref> [13] </ref>. In Smalltalk [6] any procedure is virtual in the sense that it can be redefined in a subclass, and even the parameters of a procedure may be redefined. <p> The source 5 PP: proc P (# Decl1; Decl2; ...; Decln enter In do Imp exit Out #) denotation is an example of a remote identifier used to identify attributes of objects. Remote identifiers are also used for denoting procedure and class attributes. As thoroughly discussed in <ref> [13] </ref>, the difference between "reference" and "value" semantics of assignment and equality is important. BETA has both forms. A value assignment has the form: aTextObject -&gt; aWindow.Label which describes that a "copy" 3 of the object aTextObject is assigned to aWindow.Label. <p> For this reason unconstrained genericity has been included in Eiffel. In this section it will be shown to what extent virtual classes can replace genericity. This will be done by giving definitions of a general class Ring <ref> [13] </ref> with attributes Zero, One, Plus and Mult. The class Ring is then used to define subclasses Complex and a general class Vector parameterized by Ring. The Vector class may in turn be used for defining a ComplexVector class.
Reference: [14] <author> P. Naur (ed.): </author> <title> Revised Report on The Algoritmic Language ALGOL 60. </title> <address> Regnecentralen. Copenhagen, </address> <year> 1962. </year>
Reference: [15] <author> C. Norgaard, E. Sandvad: </author> <title> Reusability and Tailorability in the Mjolner BETA System. </title> <institution> Computer Science Department, Aarhus University, </institution> <note> Draft March 1989. </note>
Reference-contexts: The usefulness of virtual procedures are well known. Class attributes and especially virtual class attributes are less well know. These concepts have been used for several years by BETA programmers and they have clearly demonstrated their usefulness in practice. For other examples see [11] and <ref> [15] </ref>. Acknowledgement. The notion of virtual class was developed as part of the BETA project, in which Bent Bruun Kristensen, Kristen Nygaard and the authors were involved. Part of this work has been supported by the Danish Natural Science Research Council, FTU Grant No. 5.17.5.1.25.
Reference: [16] <author> B. Stroustrup: </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: Modification can take place in different ways. In Simula 67 [4] a procedure attribute may be declared virtual. A virtual procedure may then be redefined in a subclass. A non-virtual procedure cannot be redefined 1 . This is essentially the same scheme adapted by C++ <ref> [16] </ref> and Eiffel [13]. In Smalltalk [6] any procedure is virtual in the sense that it can be redefined in a subclass, and even the parameters of a procedure may be redefined.
Reference: [17] <author> B. Stroustrup: </author> <title> Possible Directions for C++. </title> <booktitle> Proc. USENIX C++ Workshop Nov 1987. </booktitle> <pages> 18 </pages>
Reference-contexts: As there is only one language mechanism for classes and procedures, the notion of subpattern applies equally well to classes and procedures. The notion of virtual pattern 2 The notion of virtual class introduced here has nothing to do with the notion of virtual class defined in <ref> [17] </ref> 3 was developed as a generalization of the Simula notion of virtual procedure. Since a pattern may also be used as a class, this generalization was designed to include the notion of virtual class. The notion of virtual class is, in this paper, introduced as a general language mechanism.

References-found: 17

