URL: ftp://ftp.cs.concordia.ca/pub/laks/papers/fsttcs94.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/laks/papers.html
Root-URL: http://www.cs.concordia.ca
Email: email: laks@cs.concordia.ca  
Title: An Epistemic Foundation for Logic Programming with Uncertainty  
Author: Laks V.S. Lakshmanan 
Address: Montreal, Quebec  
Affiliation: Department of Computer Science Concordia University,  
Date: Dec. 1994.  
Note: Appears in: 14th Int. Conf. on Foundations of Software Technology Theoretical Computer Science,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J.F. Baldwin. </author> <title> Evidential support logic programming. </title> <journal> Journal of Fuzzy Sets and Systems, </journal> <volume> 24 </volume> <pages> 1-26, </pages> <year> 1987. </year>
Reference-contexts: (1) a form of fuzzy logic (programming) (e.g. van Emden's quantitative logic programming [19], and Fitting's logic programming with bilattices [6, 5]), (2) annotated logic programming (e.g. , see Blair and Subrahmanian [3], Kifer and Li [9], and Kifer and Subrahmanian [10]), (3) evidence theoretic logic programming (e.g. see Baldwin <ref> [1] </ref> which uses Dempster's theory as the basis), and (4) probabilistic logic programming (see below). Ng and Subrahmanian [15, 16] have recently proposed an interesting scheme for probabilistic logic programming. They developed fixpoint and model-theoretic semantics, and provided a sound and (weakly) complete proof procedure.
Reference: [2] <author> Colin Bell, Anil Nerode, Raymond T. Ng, and V. S. Subrahmanian. </author> <title> Implementing deductive databases by linear programming. </title> <type> Tech. Report, </type> <institution> University of Maryland, </institution> <year> 1991. </year>
Reference-contexts: The new linear program can now be used to calculate the belief and doubt probabilities to reflect the effect of the new piece of knowledge. Thus, the methodology is very flexible. We remark that techniques developed (see, e.g., Bell et. al. <ref> [2] </ref>) for minimizing redundancies in linear programs could be profitably employed in our context. A final note is that information about the probability distribution of the basic scenarios might be obtained from statistical technqiues. 6 Comparison with Related Work Logic (programming) with uncertainty management is an extensively researched area.
Reference: [3] <author> H. A. Blair and V. S. Subrahmanian. </author> <title> Paraconsistent foundations for logic programming. </title> <journal> Journal of Non-Classical Logic, </journal> <volume> 5(2) </volume> <pages> 45-73, </pages> <year> 1989. </year>
Reference-contexts: Most of the proposals in the literature employ one of the following formalisms: (1) a form of fuzzy logic (programming) (e.g. van Emden's quantitative logic programming [19], and Fitting's logic programming with bilattices [6, 5]), (2) annotated logic programming (e.g. , see Blair and Subrahmanian <ref> [3] </ref>, Kifer and Li [9], and Kifer and Subrahmanian [10]), (3) evidence theoretic logic programming (e.g. see Baldwin [1] which uses Dempster's theory as the basis), and (4) probabilistic logic programming (see below). Ng and Subrahmanian [15, 16] have recently proposed an interesting scheme for probabilistic logic programming.
Reference: [4] <author> R. Fagin, J. Halpern, and N. Meggido. </author> <title> A logic for reasoning about probabilities. </title> <booktitle> Information and Computation, </booktitle> <year> 1992. </year>
Reference-contexts: This framework allows for reasoning with facts and rules with associated ranges of probabilities indicating belief and doubt. Besides these works, a wealth of literature is available on probabilistic logic alone (e.g. , see Fagin et. al. <ref> [4] </ref>). A conceptually different approach to uncertainty management was proposed by Sadri [18] in the form of the so called information source tracking method.
Reference: [5] <author> M. C. </author> <title> Fitting. Logic programming on a topological bilattice. </title> <journal> Fundamenta Informaticae, </journal> <volume> 11 </volume> <pages> 209-218, </pages> <year> 1988. </year>
Reference-contexts: For brevity, we cite only representative works and those directly relevant to this paper. Most of the proposals in the literature employ one of the following formalisms: (1) a form of fuzzy logic (programming) (e.g. van Emden's quantitative logic programming [19], and Fitting's logic programming with bilattices <ref> [6, 5] </ref>), (2) annotated logic programming (e.g. , see Blair and Subrahmanian [3], Kifer and Li [9], and Kifer and Subrahmanian [10]), (3) evidence theoretic logic programming (e.g. see Baldwin [1] which uses Dempster's theory as the basis), and (4) probabilistic logic programming (see below). <p> Unlike [15], our framework can take advantage of any available knowledge about the nature of interaction between events, in that it does not force us to work in total ignorance about the scenarios. Our work is also related to Fitting <ref> [6, 5] </ref> and Lakshmanan and Sadri [12] in the sense that these papers have dealt with logic programming with belief and doubt, in different contexts.
Reference: [6] <author> M. C. </author> <title> Fitting. Bilattices and the semantics of logic programming. </title> <journal> Journal of Logic Programming, </journal> <volume> 11 </volume> <pages> 91-116, </pages> <year> 1991. </year>
Reference-contexts: This gives rise to a distributive bilattice in the sense of Fitting <ref> [6] </ref>. The following definition formalizes this construction. Definition 2.2 Let L m and L n be any situation lattices as defined above. <p> For brevity, we cite only representative works and those directly relevant to this paper. Most of the proposals in the literature employ one of the following formalisms: (1) a form of fuzzy logic (programming) (e.g. van Emden's quantitative logic programming [19], and Fitting's logic programming with bilattices <ref> [6, 5] </ref>), (2) annotated logic programming (e.g. , see Blair and Subrahmanian [3], Kifer and Li [9], and Kifer and Subrahmanian [10]), (3) evidence theoretic logic programming (e.g. see Baldwin [1] which uses Dempster's theory as the basis), and (4) probabilistic logic programming (see below). <p> Unlike [15], our framework can take advantage of any available knowledge about the nature of interaction between events, in that it does not force us to work in total ignorance about the scenarios. Our work is also related to Fitting <ref> [6, 5] </ref> and Lakshmanan and Sadri [12] in the sense that these papers have dealt with logic programming with belief and doubt, in different contexts.
Reference: [7] <author> U. Guntzer, W. Kieling, and H. Thone. </author> <title> New directions for uncertainty reasoning in deductive databases. </title> <booktitle> In Proc. ACM SIGMOD Conf., </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: Ng and Subrahmanian [15, 16] have recently proposed an interesting scheme for probabilistic logic programming. They developed fixpoint and model-theoretic semantics, and provided a sound and (weakly) complete proof procedure. Guntzer et. al. <ref> [7] </ref> have proposed a sound (propositional) probabilistic calculus based on conditional probabilities, for reasoning in the presence of incomplete information. Lakshmanan and Sadri [12] have recently proposed an approach to probabilistic deductive databases, based on the the tri-lattice of probabilistic truth values, an extension to bilattices.
Reference: [8] <author> G.E. Hughes and M.J. Cresswell. </author> <title> An Introduction to Modal Logic. </title> <publisher> Methuen and Co. Ltd., </publisher> <address> London, U.K., </address> <year> 1972. </year>
Reference-contexts: Note that each (ground) rule in P fl has a state associated with it. The appropriate model theoretic framework for programs in our framework is obtained by relating them to a version of the modal logic S4 <ref> [8] </ref>. Let P be an infinite set of propositions. A formula of the logic S4 is either a proposition or is of one of the following forms, where OE; are S4 formulas: OE _ , OE ^ , :OE, OE! , 2OE, 3OE. A partial S4 Kripke structure [8] is a <p> logic S4 <ref> [8] </ref>. Let P be an infinite set of propositions. A formula of the logic S4 is either a proposition or is of one of the following forms, where OE; are S4 formulas: OE _ , OE ^ , :OE, OE! , 2OE, 3OE. A partial S4 Kripke structure [8] is a 3-tuple M = hW; ; 7!i where (i) W is a non-empty set of worlds; (ii) : W ![P ; ftrue; falseg], is a function that maps each world to a partial function on the set of propositions: for w 2 W and A 2 P, whenever (w)(A)
Reference: [9] <author> M. Kifer and A. Li. </author> <title> On the semantics of rule-based expert systems with uncertainty. </title> <booktitle> In 2nd Intl. Conf. on Database Theory, </booktitle> <month> August </month> <year> 1988. </year>
Reference-contexts: Most of the proposals in the literature employ one of the following formalisms: (1) a form of fuzzy logic (programming) (e.g. van Emden's quantitative logic programming [19], and Fitting's logic programming with bilattices [6, 5]), (2) annotated logic programming (e.g. , see Blair and Subrahmanian [3], Kifer and Li <ref> [9] </ref>, and Kifer and Subrahmanian [10]), (3) evidence theoretic logic programming (e.g. see Baldwin [1] which uses Dempster's theory as the basis), and (4) probabilistic logic programming (see below). Ng and Subrahmanian [15, 16] have recently proposed an interesting scheme for probabilistic logic programming.
Reference: [10] <author> Michael Kifer and V. S. Subrahmanian. </author> <title> Theory of generalized annotated logic programming and its applications. </title> <journal> Journal of Logic Programming, </journal> <volume> 12 </volume> <pages> 335-367, </pages> <year> 1992. </year>
Reference-contexts: in the literature employ one of the following formalisms: (1) a form of fuzzy logic (programming) (e.g. van Emden's quantitative logic programming [19], and Fitting's logic programming with bilattices [6, 5]), (2) annotated logic programming (e.g. , see Blair and Subrahmanian [3], Kifer and Li [9], and Kifer and Subrahmanian <ref> [10] </ref>), (3) evidence theoretic logic programming (e.g. see Baldwin [1] which uses Dempster's theory as the basis), and (4) probabilistic logic programming (see below). Ng and Subrahmanian [15, 16] have recently proposed an interesting scheme for probabilistic logic programming.
Reference: [11] <author> Laks V.S. Lakshmanan. </author> <title> An epistemic foundation for logic programming with uncertainty. </title> <type> Tech. report, </type> <institution> Concordia University, Montreal, Canada, </institution> <year> 1994. </year>
Reference-contexts: Section 6 compares this work with similar works and brings out the novelty and originality of this approach. Section 7 discusses future research. For lack of space, proofs of results are omitted. The full paper <ref> [11] </ref> contains the proofs and complete details about the framework, a sound and complete proof procedure, and the complexity results on some fundamental query optimization problems in this framework. 2 A Model for Uncertainty Let T = f1; 1; ?g be any set. <p> Suppose - : fp 1 ; : : : ; p m ; q 1 ; : : : ; q n g![0; 1] is a probability distribu-tion function that associates with each basic scenario the probability of its occurrence (in the "real world"). In <ref> [11] </ref>, we give an algorithm for generating the belief and doubt probabilities associated with ground atoms, by capturing the constraints on the probabilities in the form of a linear program. Here, for lack of space, we only illustrate the method. Example 5.1 We revisit Example 1.1 again. <p> Indeed, efficient query processing and query optimization in logic systems with uncertainty is a very important topic for future study. Some results in the context of the framework of this paper appear in <ref> [11] </ref>. We are currently working on a generic programming environment for logic programming with uncertainty.
Reference: [12] <author> Laks V.S. Lakshmanan and F. Sadri. </author> <title> Probabilistic deductive databases. </title> <type> Tech. report, </type> <institution> Con-cordia University, Montreal, Canada, </institution> <year> 1994. </year>
Reference-contexts: They developed fixpoint and model-theoretic semantics, and provided a sound and (weakly) complete proof procedure. Guntzer et. al. [7] have proposed a sound (propositional) probabilistic calculus based on conditional probabilities, for reasoning in the presence of incomplete information. Lakshmanan and Sadri <ref> [12] </ref> have recently proposed an approach to probabilistic deductive databases, based on the the tri-lattice of probabilistic truth values, an extension to bilattices. This framework allows for reasoning with facts and rules with associated ranges of probabilities indicating belief and doubt. <p> Unlike [15], our framework can take advantage of any available knowledge about the nature of interaction between events, in that it does not force us to work in total ignorance about the scenarios. Our work is also related to Fitting [6, 5] and Lakshmanan and Sadri <ref> [12] </ref> in the sense that these papers have dealt with logic programming with belief and doubt, in different contexts.
Reference: [13] <author> V. S. Lakshmanan and F. Sadri. </author> <title> Modeling uncertainty in deductive databases. </title> <note> To appear in DEXA '94, </note> <institution> Athens, </institution> <address> Greece, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Mechanisms are developed whereby reliabilities associated with the contributing information sources can be used to calculate the reliability of answers to queries. This framework was extended to deductive databases by Lakshmanan and Sadri <ref> [13] </ref>. As mentioned in the introduction, the practical difficulty with directly associating specific numbers (indicating degrees of likelihood) with facts/rules has given rise to a serious criticism of probability based approaches to uncertainty [17]. <p> Calculation of probabilities is accomplished by compiling the belief and doubt information into a linear program and then using it to calculate bounds on belief and doubt probabilities. In this respect, the approach of this paper is similar in spirit to <ref> [15, 18, 13] </ref>. However, there are major differences with those works. Firstly, these earlier works do not capture the notions of belief and doubt. <p> In this respect, the approach of this paper is similar in spirit to [15, 18, 13]. However, there are major differences with those works. Firstly, these earlier works do not capture the notions of belief and doubt. Secondly, while <ref> [18, 13] </ref> make specific assumptions about the independence between information contributed by different sources, our approach is quite general, and does not need any a priori assumptions on the interrelationships among the basic scenarios.
Reference: [14] <author> J. W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer-Verlag, </publisher> <address> second edition, </address> <year> 1987. </year>
Reference-contexts: We say that P logically implies A : (B; D), denoted P j= A : (B; D), provided A : (B; D) is true in every model of P . We can prove the following analogue of the van Emden-Kowalski Theorem for classical logic programming (see Lloyd <ref> [14] </ref>). Theorem 3.1 Let P be a program and A : (B; D) be any annotated ground atom. Then P j= A : (B; D) iff M P j= A : (B; D). We illustrate the concepts introduced in this section with the following example.
Reference: [15] <author> R. Ng and V. S. Subrahmanian. </author> <title> Probabilistic logic programming. </title> <journal> Information and Computation, </journal> <volume> 101(2) </volume> <pages> 150-201, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: Ng and Subrahmanian <ref> [15, 16] </ref> have recently proposed an interesting scheme for probabilistic logic programming. They developed fixpoint and model-theoretic semantics, and provided a sound and (weakly) complete proof procedure. Guntzer et. al. [7] have proposed a sound (propositional) probabilistic calculus based on conditional probabilities, for reasoning in the presence of incomplete information. <p> Calculation of probabilities is accomplished by compiling the belief and doubt information into a linear program and then using it to calculate bounds on belief and doubt probabilities. In this respect, the approach of this paper is similar in spirit to <ref> [15, 18, 13] </ref>. However, there are major differences with those works. Firstly, these earlier works do not capture the notions of belief and doubt. <p> Secondly, while [18, 13] make specific assumptions about the independence between information contributed by different sources, our approach is quite general, and does not need any a priori assumptions on the interrelationships among the basic scenarios. Unlike <ref> [15] </ref>, our framework can take advantage of any available knowledge about the nature of interaction between events, in that it does not force us to work in total ignorance about the scenarios.
Reference: [16] <author> R. T. Ng and V. S. Subrahmanian. </author> <title> A semantical framework for supporting subjective and conditional probabilities in deductive databases. </title> <type> Tech. Report, </type> <institution> University of Maryland, </institution> <year> 1990. </year>
Reference-contexts: Ng and Subrahmanian <ref> [15, 16] </ref> have recently proposed an interesting scheme for probabilistic logic programming. They developed fixpoint and model-theoretic semantics, and provided a sound and (weakly) complete proof procedure. Guntzer et. al. [7] have proposed a sound (propositional) probabilistic calculus based on conditional probabilities, for reasoning in the presence of incomplete information.
Reference: [17] <author> Judea Pearl. </author> <title> Probabilistic reasoning in intelligence systems: networks of plausible inference. </title> <address> San Mateo California, </address> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: Numerous formalisms have been proposed for modeling uncertainty (see Section 6) and our concern in this paper is primarily with probabilistic extensions to logic programming and deductive databases. Substantial work has been done in this area (see Section 6 for a brief survey). One criticism (e.g. see <ref> [17] </ref>) leveled against probabilistic approaches for uncertainty management is how the probabilities representing degree of likelihood can be derived. We note, following Pearl [17], that when beliefs (and doubts) are formed by an agent, the agent must have had underlying scenarios or situations in the context of which the facts or <p> Substantial work has been done in this area (see Section 6 for a brief survey). One criticism (e.g. see <ref> [17] </ref>) leveled against probabilistic approaches for uncertainty management is how the probabilities representing degree of likelihood can be derived. We note, following Pearl [17], that when beliefs (and doubts) are formed by an agent, the agent must have had underlying scenarios or situations in the context of which the facts or rules are believed (or doubted). <p> This framework was extended to deductive databases by Lakshmanan and Sadri [13]. As mentioned in the introduction, the practical difficulty with directly associating specific numbers (indicating degrees of likelihood) with facts/rules has given rise to a serious criticism of probability based approaches to uncertainty <ref> [17] </ref>. The work presented in this paper is intended to provide a link between conceptual notions of likelihood in an expert's mind and quantitative measures of likelihood.
Reference: [18] <author> F. Sadri. </author> <title> Reliability of answers to queries in relational databases. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(2), </volume> <month> June </month> <year> 1991. </year>
Reference-contexts: This framework allows for reasoning with facts and rules with associated ranges of probabilities indicating belief and doubt. Besides these works, a wealth of literature is available on probabilistic logic alone (e.g. , see Fagin et. al. [4]). A conceptually different approach to uncertainty management was proposed by Sadri <ref> [18] </ref> in the form of the so called information source tracking method. This approach allows for the representation of the contributing sources of each piece of information in a database and allows this source information to be manipulated in query processing. <p> Calculation of probabilities is accomplished by compiling the belief and doubt information into a linear program and then using it to calculate bounds on belief and doubt probabilities. In this respect, the approach of this paper is similar in spirit to <ref> [15, 18, 13] </ref>. However, there are major differences with those works. Firstly, these earlier works do not capture the notions of belief and doubt. <p> In this respect, the approach of this paper is similar in spirit to [15, 18, 13]. However, there are major differences with those works. Firstly, these earlier works do not capture the notions of belief and doubt. Secondly, while <ref> [18, 13] </ref> make specific assumptions about the independence between information contributed by different sources, our approach is quite general, and does not need any a priori assumptions on the interrelationships among the basic scenarios.
Reference: [19] <author> M. H. van Emden. </author> <title> Quantitative deduction and its fixpoint theory. </title> <journal> Journal of Logic Programming, </journal> <volume> 4(1) </volume> <pages> 37-53, </pages> <year> 1986. </year>
Reference-contexts: For brevity, we cite only representative works and those directly relevant to this paper. Most of the proposals in the literature employ one of the following formalisms: (1) a form of fuzzy logic (programming) (e.g. van Emden's quantitative logic programming <ref> [19] </ref>, and Fitting's logic programming with bilattices [6, 5]), (2) annotated logic programming (e.g. , see Blair and Subrahmanian [3], Kifer and Li [9], and Kifer and Subrahmanian [10]), (3) evidence theoretic logic programming (e.g. see Baldwin [1] which uses Dempster's theory as the basis), and (4) probabilistic logic programming (see
References-found: 19

