URL: http://www-ee.technion.ac.il/~issy/papers/atomicity.ps.gz
Refering-URL: http://www-ee.technion.ac.il/~issy/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A 3-level Atomicity Model for Decentralized Workflow Management Systems  
Author: Israel Z. Ben-Shaul George T. Heineman Z. Ben-Shaul and George T. Heineman 
Keyword: workflow interoperability, transaction management, distributed systems, process modeling, software engineering environments  
Note: c fl1996, Israel  
Affiliation: Technion-Israel Institute of Technology Department of Electrical Engineering  Columbia University Department of Computer Science  
Abstract: A Workflow is a collection of tasks organized to accomplish some process. A work-flow model specifies the decomposition of tasks into component activities, and the dependencies between the activities. A workflow management systems (WFMS) employs a workflow manager (WM) to execute and automate the various activities within a workflow. Workflow activities access and update data stored in a database management system (DBMS) employed by the WM. To protect data in the face of concurrent access, the WM encapsulates each activity with a transaction that is submitted to the transaction manager (TM) of the DBMS. In conventional DBMSs, each transaction is a unit of correctness; often, within a workflow, a sequence of activities is necessary to maintain correctness. The WM must therefore be able to specify atomic units from the transactions it submits, and the TM is then responsible for the failure atomicity of atomic units. Decentralized WFMSs provide an architecture for multiple autonomous WFMSs to interoperate, but there is an inherent conflict between global atomicity and local autonomy of each WFMS. In this paper, we present a paradigm for modeling decentralized workflows that allows the WFMSs to forge Treaty agreements amongst themselves so that the autonomous TMs can cooperate if an atomic unit is split between multiple WFMSs. This paper describes a decentralized atomicity model that enables workflow administrators to specify the scope of multi-site atomicity based upon the desired semantics of multi-site tasks in the decentralized WFMS. We describe an architecture that realizes the DWFMS model and execution paradigm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gail E. Kaiser Andrew Z. Tong and Steven S. Popovich. </author> <title> A flexible rule-chaining engine for process-based software engineering. </title> <booktitle> In 9th Knowledge-Based Software Engineering Conference, </booktitle> <pages> pages 79-88, </pages> <address> Monterey CA, September 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Atomicity and automation chains are denoted by annotations made to predicates of rules. (We describe the annotation scheme as implemented more recently in the Extended MSL on top of the Amber <ref> [1] </ref> process server component of Oz, which supersedes older annotation schemes in Marvel and Oz.) For 15 example, line 14 in Figure 6 shows an atomicity effect of the setup review Summit rule that matches with the atomicity condition of the local review rule in line 19.
Reference: [2] <author> Naser S. Barghouti. </author> <title> Concurrency Control in Rule-Based Software Development Environments. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <month> February </month> <year> 1992. </year> <month> CUCS-001-92. </month>
Reference-contexts: Although targeted initially for software engineering environments, it has been used for other applications such as healthcare manage ment and document preparation. When not interoperating with other sites, the functionality of a local site resembles that of Marvel <ref> [4, 2] </ref>, the predecessor to Oz. Each local site in Oz is tailored by a local administrator who provides the data model, process model, and tool envelopes for its team. These definitions are translated into an internal format and then loaded into the environment.
Reference: [3] <author> Israel Ben-Shaul and Gail E. Kaiser. </author> <title> A Paradigm for Decentralized Process Modeling. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1995. </year>
Reference-contexts: Our atomicity model, presented in Section 3, assumes an underlying execution model and system architecture discussed in Section 2. Sections 4 and 5 describe the integration of the model in the workflow language and transaction manager components, respectively, and the realization at both levels in the Oz DWFMS <ref> [3] </ref> on top of its rule-based workflow modeling language and the Pern transaction component [15]. <p> Treaties are defined pairwise and require explicit and active participation of the involved sites with no global overseer. For more details on the Treaty mechanism, see <ref> [3] </ref>. A multi-site activity is always executed at the coordinating site of the multi-site task within which it operates. This is appropriate since arbitrary activities (i.e., printing a plane ticket, entering flight information) cannot simply be split into smaller sections that are executed at all participating sites. <p> In declarative languages with implicit and dynamically-determined control flow, as in rule-based languages, adding such support is less straightforward. Specifying atomicity units across sites (and workflows) seems even harder. However, declarative modeling paradigms that support implicit communication seem to be well-suited for interoperability (as evidenced in <ref> [3, 10] </ref>). Thus, we present here the realization of the multi-site atomicity model in the Oz DWFMS [3], using its declarative rule-based language. <p> Specifying atomicity units across sites (and workflows) seems even harder. However, declarative modeling paradigms that support implicit communication seem to be well-suited for interoperability (as evidenced in [3, 10]). Thus, we present here the realization of the multi-site atomicity model in the Oz DWFMS <ref> [3] </ref>, using its declarative rule-based language.
Reference: [4] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multi-user software development environments. </title> <journal> Computing Systems, The Journal of the USENIX Association, </journal> <volume> 6(2) </volume> <pages> 65-103, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: Although targeted initially for software engineering environments, it has been used for other applications such as healthcare manage ment and document preparation. When not interoperating with other sites, the functionality of a local site resembles that of Marvel <ref> [4, 2] </ref>, the predecessor to Oz. Each local site in Oz is tailored by a local administrator who provides the data model, process model, and tool envelopes for its team. These definitions are translated into an internal format and then loaded into the environment.
Reference: [5] <author> Philip A. Bernstein, Vassos Hadzilacos, and Nathan Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading MA, </address> <year> 1987. </year>
Reference-contexts: If the access request is granted, the remote TM creates a transaction, and a copy of the requested data item is transferred to the requesting WM. This is in contrast to conventional distributed database systems <ref> [5] </ref> that employ a global transaction manager that must process any request to access remote data. <p> Each TM expects full autonomy over its transactions, therefore the set of transactions for a multi-site activity poses a problem. If the multi-site activity expects to execute as an atomic unit, the commitment of the individual transactions must be synchronized, most likely using a simple two-phase commit protocol <ref> [5] </ref>. Each TM must then distinguish transactions for local activities from transactions that are part of a multi-site activity. The coordinating site that executes the multi-site activity coordinates the two-phase commit protocol.
Reference: [6] <author> Y. Breitbart, A. Deacon, H.-J. Schek, A. Sheth, and G. Weikum. </author> <title> Merging application-centric and data-centric approaches to support transaction-oriented multi-system work-flows. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 22(3) </volume> <pages> 23-30, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: This division of a multi-site activity into local transactions retains the autonomy of the individual TMs in the DWFMS. 6 The TMs are not involved in the details of workflow management and are only concerned with the dependencies between transactions (see <ref> [6] </ref>, for example, for a supporting view). The TMs can fulfill their responsibilities by supporting two types of dependencies: commit and abort. If T i has an abort dependency on T j , (T i AD T j ), then if T j aborts, T i must also abort. <p> as they are encountered, recursively, and Summit automation chains can also trigger atomicity Summits. 17 5 Realization of the Model at the Transaction Man- agement Level In recent years, there has been much interest in applying extended transaction models to the WFMS domain, basically to address issues of concurrency atomicity <ref> [6, 13] </ref>. As part of our work within the Oz DWFMS, we developed a TM component, called Pern, that provides the necessary extensible concurrency control needed to implement extended transaction models [15].
Reference: [7] <institution> Workflow Management Coalition. </institution> <note> http://www.aiai.ed.ac.uk/WfMC. 22 </note>
Reference-contexts: Recently, the WFMS community has started to explore these issues, as evidenced by the establishment of the Work-flow Coalition <ref> [7] </ref> that promotes, among other issues, standards for WFMS-interoperability. However, as indicated in [12], most state-of-the-art WFMS lack in two areas: (1) support for scalable and truly decentralized heterogeneous WFMSs; and (2) support for customized, semantics-based transaction management for both local and multi-site activities. <p> The second concern is addressed by the actual support for these transactional semantics by the underlying transaction managers as discussed in Section 2.2. Our generic DWFMS architecture, depicted in Figure 1, is compatible with the Workflow Coalition's reference architecture <ref> [7] </ref>. A DWFMS consists of a set of local WFMSs that share no resources and communicate via message passing. Each individual WFMS (or workflow engine, in [7]) consists of a local data manager (DM), local transaction manager (TM), and local workflow manager (WM). <p> Our generic DWFMS architecture, depicted in Figure 1, is compatible with the Workflow Coalition's reference architecture <ref> [7] </ref>. A DWFMS consists of a set of local WFMSs that share no resources and communicate via message passing. Each individual WFMS (or workflow engine, in [7]) consists of a local data manager (DM), local transaction manager (TM), and local workflow manager (WM). The WM enacts (i.e., interprets or executes) workflow specifications that are defined using a workflow formalism (e.g., rules, Petri nets, task graphs) and loaded to WM (interface 1 in the reference model).
Reference: [8] <author> W. Du, K. Elmagarmid, Y. Leu, and S. Ostermann. </author> <title> Effects of Local Autonomy on Global Concurrency Control in Heterogeneous Distributed Database Systems. </title> <booktitle> In Proc. of Second International Conference on Data and Knowledge Systems for manufacturing and Engineering, </booktitle> <address> Maryland, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: Such behavior, however, poses a complication. On one hand, a DWFMS must support the atomicity of multi-site activities, but on the other hand it may have to respect the autonomy of the local WFMSs regarding access to their data. These are conflicting goals, and as shown in <ref> [8, 22] </ref>, it is impossible in general to guarantee global atomicity on top of local autonomous transaction managers (TMs). We are concerned here mainly with failure atomicity as opposed to concurrency atomicity (as defined in [17]).
Reference: [9] <author> K. P. Eswaran, J. N. Gray, R. A. Lorie, and I. L. Traiger. </author> <title> The notions of consistency and predicate locks in a database system. </title> <journal> Communications of the ACM, </journal> 19(11) 624-632, November 1976. 
Reference-contexts: To support our atomicity model, the TM must then be able to flexibly group transactions together into atomic units. Many workflow researchers agree to this requirement [24, 13]. If we assume a pessimistic approach to concurrency control, such as locking <ref> [9] </ref>, the TM should follow the nested transaction model developed by Moss [19] to provide this support. Each nested transaction is a tree of subtransactions, each of which can be further subdivided into subtransactions.
Reference: [10] <author> Kenneth J. Goldman et al. </author> <title> The programmer's playground: I/O abstraction for user-configurable distributed applications. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(9) </volume> <pages> 735-746, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: In declarative languages with implicit and dynamically-determined control flow, as in rule-based languages, adding such support is less straightforward. Specifying atomicity units across sites (and workflows) seems even harder. However, declarative modeling paradigms that support implicit communication seem to be well-suited for interoperability (as evidenced in <ref> [3, 10] </ref>). Thus, we present here the realization of the multi-site atomicity model in the Oz DWFMS [3], using its declarative rule-based language.
Reference: [11] <author> Hector Garcia-Molina and Ken Salem. </author> <title> SAGAS. </title> <editor> In U. Dayal and I. Traiger, editors, </editor> <booktitle> ACM SIGMOD 1987 Annual Conference, </booktitle> <address> New York NY, </address> <month> May </month> <year> 1987. </year> <journal> ACM Press. SIGMOD Record, </journal> <volume> 16(3) </volume> <pages> 249-259. </pages>
Reference-contexts: Therefore, the atomicity of activity a i might be compromised in favor of retaining atomicity within a given site S j . Such inconsistencies are easily detected, and may either be tolerated, in cases where they make sense semantically, and/or fixed by a compensating operation (as in <ref> [11] </ref>). Global abort of a multi-site activity forces all local emanating transactions from the activity to abort immediately at all sites. GL assumes that each transaction T j i for each site S j for a multi-site activity a i commits according to a two-phase commit protocol.
Reference: [12] <author> Dimitrios Georgakopoulos, Mark Hornick, and Amit Sheth. </author> <title> An Overview of Workflow Management: From Process Modeling to Workflow Automation Infrastructure. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3 </volume> <pages> 119-153, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Workflow management is a broad and somewhat ambiguous term for a technology that supports the reengineering of business and information processes <ref> [12] </ref>. Workflow Management Systems (WFMSs) provide the ability to define, evolve, and automate workflows that involve multiple human users and various activities. Most WFMSs employ database technology to store diverse information accessed as a workflow progresses. <p> Recently, the WFMS community has started to explore these issues, as evidenced by the establishment of the Work-flow Coalition [7] that promotes, among other issues, standards for WFMS-interoperability. However, as indicated in <ref> [12] </ref>, most state-of-the-art WFMS lack in two areas: (1) support for scalable and truly decentralized heterogeneous WFMSs; and (2) support for customized, semantics-based transaction management for both local and multi-site activities. In a centralized WFMS, the workflow manager (WM) typically has full control over the activities and data it manages.
Reference: [13] <author> Dimitris Georgakopoulos, Mark Hornick, Piotr Krychniak, and Frank Manola. </author> <title> Specification and management of extended transactions in a programmable transaction environment. </title> <booktitle> In 10th International Conference on Data Engineering, </booktitle> <pages> pages 462-473, </pages> <address> Houston TX, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: as they are encountered, recursively, and Summit automation chains can also trigger atomicity Summits. 17 5 Realization of the Model at the Transaction Man- agement Level In recent years, there has been much interest in applying extended transaction models to the WFMS domain, basically to address issues of concurrency atomicity <ref> [6, 13] </ref>. As part of our work within the Oz DWFMS, we developed a TM component, called Pern, that provides the necessary extensible concurrency control needed to implement extended transaction models [15]. <p> To support our atomicity model, the TM must then be able to flexibly group transactions together into atomic units. Many workflow researchers agree to this requirement <ref> [24, 13] </ref>. If we assume a pessimistic approach to concurrency control, such as locking [9], the TM should follow the nested transaction model developed by Moss [19] to provide this support. Each nested transaction is a tree of subtransactions, each of which can be further subdivided into subtransactions.
Reference: [14] <author> Volker Gruhn and Rudiger Jegelka. </author> <title> An evaluation of FUNSOFT nets. </title> <editor> In J.C. Derni-ame, editor, </editor> <booktitle> Software Process Technology Second European Workshop, number 635 in Lecture Notes in Computer Science, </booktitle> <pages> pages 196-214. </pages> <publisher> Springer-Verlag, </publisher> <address> Trondheim, Nor-way, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: Each activity encapsulates a single step in the workflow that typically involves a user invoking some external tool, such as a spreadsheet application. Workflow formalisms typically guard activities with local constraints, as opposed to the global control flow imposed by the task. For example, FUNSOFT nets <ref> [14] </ref> (extended Petri nets) allow logical predicates to be attached to transitions (which are the equivalent of activities in our terminology), task graphs [18] provide predecessor and successor edges, and rules [16] provide pre- and post-conditions.
Reference: [15] <author> George T. Heineman and Gail E. Kaiser. </author> <title> An architecture for integrating concurrency control into environment frameworks. </title> <booktitle> In 17th International Conference on Software Engineering, </booktitle> <pages> pages 305-313, </pages> <address> Seattle WA, April 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Sections 4 and 5 describe the integration of the model in the workflow language and transaction manager components, respectively, and the realization at both levels in the Oz DWFMS [3] on top of its rule-based workflow modeling language and the Pern transaction component <ref> [15] </ref>. Section 6 summarizes the contributions of this paper and points to future directions. 2 A Decentralized Architecture and Execution Model In [21], Reed describes a method for combining programmed actions on data at multiple decentralized computers into coherent actions. <p> As part of our work within the Oz DWFMS, we developed a TM component, called Pern, that provides the necessary extensible concurrency control needed to implement extended transaction models <ref> [15] </ref>. Although the concerns of failure atomicity and concurrency atomicity are orthogonal, any TM that seeks to provide advanced concurrency atomicity support must nevertheless provide some basic model for failure atomicity. <p> Third, if any participating transaction aborts at any site, the abort-before mediator, two-phase commit #2, contacts the remote coordinating site (through CM) to abort the coordinating site, which ultimately leads to all other participating aborting. Further details can be found in <ref> [15] </ref>. This special-purpose code insulates the WM from the technical details of the two-phase commit protocol, thus keeping the components separate, as desired.
Reference: [16] <author> Gail E. Kaiser, Peter H. Feiler, and Steven S. Popovich. </author> <title> Intelligent assistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <volume> 5(3) </volume> <pages> 40-49, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: For example, FUNSOFT nets [14] (extended Petri nets) allow logical predicates to be attached to transitions (which are the equivalent of activities in our terminology), task graphs [18] provide predecessor and successor edges, and rules <ref> [16] </ref> provide pre- and post-conditions. An activity, a j , emanates from another activity, a i , when the results of executing a i satisfies the logical guard for a j . A decentralized workflow is constructed from the local workflow tasks and activities spread throughout sites.
Reference: [17] <author> Nancy A. Lynch. </author> <title> Multilevel atomicity | a new correctness criterion for database con-currency control. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(4) </volume> <pages> 484-502, </pages> <month> December </month> <year> 1983. </year>
Reference-contexts: These are conflicting goals, and as shown in [8, 22], it is impossible in general to guarantee global atomicity on top of local autonomous transaction managers (TMs). We are concerned here mainly with failure atomicity as opposed to concurrency atomicity (as defined in <ref> [17] </ref>). The conflict between local autonomy and global atomicity is particularly evident when a (long duration) global task consists of a combination of local and multi-site activities.
Reference: [18] <author> Peiwei Mi and Walt Scacchi. </author> <title> Process integration in CASE environments. </title> <journal> IEEE Software, </journal> <volume> 9(2) </volume> <pages> 45-53, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Workflow formalisms typically guard activities with local constraints, as opposed to the global control flow imposed by the task. For example, FUNSOFT nets [14] (extended Petri nets) allow logical predicates to be attached to transitions (which are the equivalent of activities in our terminology), task graphs <ref> [18] </ref> provide predecessor and successor edges, and rules [16] provide pre- and post-conditions. An activity, a j , emanates from another activity, a i , when the results of executing a i satisfies the logical guard for a j .
Reference: [19] <author> J. Eliot B. Moss. </author> <title> Nested Transactions: An Approach to Reliable Distributed Computing. Information Systems. </title> <publisher> The MIT Press, </publisher> <address> Cambridge MA, </address> <year> 1985. </year> <type> PhD Thesis, </type> <institution> MIT LCS TR-260, </institution> <month> April </month> <year> 1981. </year> <month> 23 </month>
Reference-contexts: Many workflow researchers agree to this requirement [24, 13]. If we assume a pessimistic approach to concurrency control, such as locking [9], the TM should follow the nested transaction model developed by Moss <ref> [19] </ref> to provide this support. Each nested transaction is a tree of subtransactions, each of which can be further subdivided into subtransactions. When a subtransaction commits, the results are only available to 18 its parent transaction; thus all subtransactions finally commit when the root transaction commits.
Reference: [20] <author> Maria H. Penedo. </author> <title> Life-cycle (sub) process scenario. In Carlo Ghezzi, editor, </title> <booktitle> 9th In--ternational Software Process Workshop, </booktitle> <pages> pages 141-143, </pages> <address> Airlie VA, October 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Figure 6 depicts two sample rules, one Treaty and one local, taken from the implementation of the "ISPW benchmark" 1 <ref> [20] </ref>. A rule can be fired either directly by a user, or indirectly, as a result of rule chaining. When a rule is fired, its condition is evaluated.
Reference: [21] <author> David P. Reed. </author> <title> Implementing atomic actions on decentralized data. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 1(1) </volume> <pages> 3-23, </pages> <month> February </month> <year> 1983. </year>
Reference-contexts: Section 6 summarizes the contributions of this paper and points to future directions. 2 A Decentralized Architecture and Execution Model In <ref> [21] </ref>, Reed describes a method for combining programmed actions on data at multiple decentralized computers into coherent actions. Since we face a similar problem, it is worthwhile returning to this important work to find requirements for our solution. The decentralized system in [21] consisted of a set of computer nodes each <p> 2 A Decentralized Architecture and Execution Model In <ref> [21] </ref>, Reed describes a method for combining programmed actions on data at multiple decentralized computers into coherent actions. Since we face a similar problem, it is worthwhile returning to this important work to find requirements for our solution. The decentralized system in [21] consisted of a set of computer nodes each with a processor, memory, and permanent storage, connected together by a communication network.
Reference: [22] <author> Nandit Soparkar, Henry F. Korth, and Abraham Silberschatz. </author> <title> Failure-resilient transaction management in multidatabases. </title> <journal> Computer, </journal> <volume> 24(12) </volume> <pages> 28-36, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Such behavior, however, poses a complication. On one hand, a DWFMS must support the atomicity of multi-site activities, but on the other hand it may have to respect the autonomy of the local WFMSs regarding access to their data. These are conflicting goals, and as shown in <ref> [8, 22] </ref>, it is impossible in general to guarantee global atomicity on top of local autonomous transaction managers (TMs). We are concerned here mainly with failure atomicity as opposed to concurrency atomicity (as defined in [17]). <p> We focus in this paper on operational autonomy (more specifically on execution and control autonomy as defined in <ref> [22] </ref>). Thus, while heterogeneity is supported at the individual workflow level, support for complete design autonomy (i.e., heterogeneous WFMSs) is beyond the scope of this work and we assume for the rest of this paper similar WM, TM, and DM components.
Reference: [23] <author> A. Z. Spector, R. Pausch, and G. Bruell. Camelot, </author> <title> a flexible, distributed transaction processing system. </title> <booktitle> In 33rd IEEE Computer Society International Conference, </booktitle> <pages> pages 432-437, </pages> <address> San Francisco, </address> <month> March </month> <year> 1988. </year>
Reference-contexts: A traditional distributed transaction facility that implements two-phase commit, such as Camelot <ref> [23] </ref>, would be inappropriate for managing multi-site activities. The main reason is that the distributed TM would prevent any weakening of the G-level atomicity, since once a distributed transaction is in progress, it is unlikely that a site would be allowed to "withdraw" its updates from the global transaction.
Reference: [24] <author> Darrell Woelk, Paul Attie, Phil Cannata, Greg Meredith, Amit Sheth, Munindar Singh, and Christine Tomlinson. </author> <title> Task scheduling using intertask dependencies in Carnot. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 22(2) </volume> <pages> 491-494, </pages> <month> June </month> <year> 1993. </year> <month> 24 </month>
Reference-contexts: To support our atomicity model, the TM must then be able to flexibly group transactions together into atomic units. Many workflow researchers agree to this requirement <ref> [24, 13] </ref>. If we assume a pessimistic approach to concurrency control, such as locking [9], the TM should follow the nested transaction model developed by Moss [19] to provide this support. Each nested transaction is a tree of subtransactions, each of which can be further subdivided into subtransactions.
References-found: 24

