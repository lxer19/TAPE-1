URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/puder.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/index.html
Root-URL: 
Email: fpuder,geihsg@informatik.uni-frankfurt.de  
Title: System Support for Knowledge-Based Trading in Open Service Markets  
Author: A. Puder and K. Geihs 
Keyword: Open distributed environments, type graphs, trading, service matching, service knowledge base, conceptual graphs.  
Date: July 8, 1996  
Address: D-60054 Frankfurt, Germany  
Affiliation: Department of Computer Science University of Frankfurt  
Abstract: An open distributed service environment can be perceived as a service market where services are freely offered and requested. Any infrastructure which seeks to provide appropriate mechanisms for such an environment has to include some mediator functionality to bring together matching service requests and service offers. The matching algorithm that the mediator must perform commonly builds upon an IDL-based type definition for service specification. We propose a type specification notation based upon conceptual graphs that supports the openness of the service environment, since it is more flexible than IDL-based definitions, and since it is closer to the cognitive domain of application users. In our framework, the trader implements a matching algorithm as well as a learning algorithm which are tailored to service trading in open environments. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ANSAware Release 4.1, </author> <title> Manual Set, </title> <month> February </month> <year> 1993. </year>
Reference-contexts: Therefore, an essential function of a supporting environment for an OSM is a service browsing and mediation function. The mediation is often called service trading, e.g. in the ANSA and in the ISO standardisation of Open Distributed Processing (ODP) (see <ref> [1] </ref> and [4]). In these approaches the notion of a service type is tightly coupled to an operational interface that is used to access the service. What is missing is conceptual information of the service semantics that complements the syntactic interface specification. <p> A trader matches service offers and requests based on service types. A type implies an abstract understanding of the behaviour of instances of the type. A service type is independent from a particular implementation. In popular distributed system architectures, such as ANSA, CORBA, DCE and ODP (see <ref> [1] </ref>, [6], [7] and [3]), a type denotes a specification of an operational interface, based on some interface definition language (IDL), and optional service attributes that provide additional information on the service properties.
Reference: [2] <author> F. Dupuy, G. Nilsson, and Y. Inoue. </author> <title> The TINA Consortium: Toward networking telecommunications information services. </title> <journal> IEEE Communications Magazine, </journal> <pages> pages 78-83, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: Three matching rules handle syntactic subtyping of IDLs according to the conventions defined by DCE, CORBA and ODP. The type specification based on conceptual graphs as described in this paper is being integrated currently into a TINA (see <ref> [2] </ref>) compatible distribution platform in a joint project with a large telecommunications company. We investigate its suitability as a trading platform for telecommunication services.
Reference: [3] <editor> ITU.TS Recommendation X.901 | ISO/IEC 10746-1: </editor> <title> Basic Reference Model of Open Distributed Processing Part 1: Overview and Guide to the use of the Reference Model, </title> <month> July </month> <year> 1994. </year>
Reference-contexts: A type implies an abstract understanding of the behaviour of instances of the type. A service type is independent from a particular implementation. In popular distributed system architectures, such as ANSA, CORBA, DCE and ODP (see [1], [6], [7] and <ref> [3] </ref>), a type denotes a specification of an operational interface, based on some interface definition language (IDL), and optional service attributes that provide additional information on the service properties.
Reference: [4] <institution> ODP Trading Function, ITU/ISO Committee Draft Standard ISO/IEC DIS13235 Rec. X.9tr, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Therefore, an essential function of a supporting environment for an OSM is a service browsing and mediation function. The mediation is often called service trading, e.g. in the ANSA and in the ISO standardisation of Open Distributed Processing (ODP) (see [1] and <ref> [4] </ref>). In these approaches the notion of a service type is tightly coupled to an operational interface that is used to access the service. What is missing is conceptual information of the service semantics that complements the syntactic interface specification. <p> As pointed out in section 3.1, there exist different IDLs as well as different subtyping rules. The first interface type we have used for the performance test | in the following called T 1 | is taken from Annex A of the ODP-Trader document (see <ref> [4] </ref>). T 1 denotes the operational interface of an ODP conformant trader written in CORBA-IDL. Interface type T 1 contains multiple interfaces and module definitions and makes extensive use of interface inheritance. The source file of T 1 is more than 600 lines of CORBA-IDL specification.
Reference: [5] <author> G.A. Miller et al. </author> <title> Five papers on WordNet. </title> <type> Technical Report CSL Report 43, </type> <institution> Cognitive Science Laboratory, Princeton University, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Thus, our knowledge-based trader can be accessed with any Java capable browser. The lexicographical database stores "every day knowledge" which is being used during the match of two conceptual graphs. We have converted the WordNet dictionary (see <ref> [5] </ref>) and extracted over 87.000 nouns from the English language with more than 95.000 relations between them. For example, the lexicographical database contains entries such as printer IS A hardware and love ANTONYM hate).
Reference: [6] <editor> Object Management Group (OMG), </editor> <title> The Common Object Request Broker: Architecure and Specification, Revision 1.1, </title> <month> December </month> <year> 1991. </year>
Reference-contexts: A trader matches service offers and requests based on service types. A type implies an abstract understanding of the behaviour of instances of the type. A service type is independent from a particular implementation. In popular distributed system architectures, such as ANSA, CORBA, DCE and ODP (see [1], <ref> [6] </ref>, [7] and [3]), a type denotes a specification of an operational interface, based on some interface definition language (IDL), and optional service attributes that provide additional information on the service properties.
Reference: [7] <author> Open Software Foundation. </author> <title> Introduction to DCE. Open Software Foundation, </title> <publisher> Inc., </publisher> <year> 1992. </year>
Reference-contexts: A trader matches service offers and requests based on service types. A type implies an abstract understanding of the behaviour of instances of the type. A service type is independent from a particular implementation. In popular distributed system architectures, such as ANSA, CORBA, DCE and ODP (see [1], [6], <ref> [7] </ref> and [3]), a type denotes a specification of an operational interface, based on some interface definition language (IDL), and optional service attributes that provide additional information on the service properties.
Reference: [8] <author> A. Puder. </author> <title> Introduction to the AI-Trader Project. </title> <address> http://www.vsb.informatik.uni-frankfurt.de/- projects/aitrader/intro.html, </address> <institution> Computer Science Department, University of Frankfurt, </institution> <year> 1995. </year>
Reference-contexts: In the scenario depicted in figure 3 export is done using CORBA-IDL, import is done with the DCE-IDL while the matching within the trader uses ODP's syntactic subtyping rule. 3.2 Tools and Applications A prototype of a knowledge-based trader has been implemented and placed in the public domain (see <ref> [8] </ref>). The prototype is used primarily to investigate the specification and matching methodology based on conceptual graphs, to design and test the required protocols, and to build and evaluate appropriate tool support that facilitates the user interactions with the trading system. <p> We have shown that the technique is upward compatible with existing trading systems, and that an efficient tool set can ease the handling substantially. The reader is invited to test the specification and matching methodology based on conceptual graphs by visiting our web-page (see <ref> [8] </ref>).
Reference: [9] <author> A. Puder, S. Markwitz, and F. Gudermann. </author> <title> Service Trading Using Conceptual Structures. </title> <booktitle> In 3rd International Conference on Conceptual Structures (ICCS'95), </booktitle> <institution> Santa Cruz, University of California, </institution> <address> 14-18 August 1995. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Within an open service market, it is likely that two application users develop different extensions (or views) for the same intension (see left side of figure 1). The knowledge-based trading scheme as described in [10] and <ref> [9] </ref> addresses the problem of abstract service type specifications supporting the cognitive domain of application users.
Reference: [10] <author> A. Puder, S. Markwitz, F. Gudermann, and K. Geihs. </author> <title> AI-based Trading in Open Distributed Environments. </title> <booktitle> In 3rd International IFIP TC6 Conference on Open Distributed Processing (ICODP'95), </booktitle> <address> Brisbane, Australia, 20-24 February 1995. </address> <publisher> Chapman and Hall. </publisher>
Reference-contexts: Within an open service market, it is likely that two application users develop different extensions (or views) for the same intension (see left side of figure 1). The knowledge-based trading scheme as described in <ref> [10] </ref> and [9] addresses the problem of abstract service type specifications supporting the cognitive domain of application users.
Reference: [11] <author> J.F. Sowa. </author> <title> Conceptual Structures, information processing mind and machine. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1984. </year>
Reference-contexts: The knowledge-based trading scheme as described in [10] and [9] addresses the problem of abstract service type specifications supporting the cognitive domain of application users. It introduces a type description language based on conceptual graphs and a machine learning algorithm which solves the problem of meta-trading (see <ref> [11] </ref>): in the knowledge-based trading framework various service descriptions are being learned over time and therefore cope with the individual views of users. Therefore a conceptual graph as an extension of a service type serves as an approximation of the type's intension.
References-found: 11

