URL: http://ballade.cs.ucla.edu:8080/~cong/papers/dac93_cbc.ps.Z
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Title: A Parallel Bottom-up Clustering Algorithm with Applications to Circuit Partitioning in VLSI Design  
Author: Jason Cong and M'Lissa Smith 
Address: Los Angeles Los Angeles, CA 90024  
Affiliation: Department of Computer Science University of California,  
Abstract: In this paper, we present a bottom-up clustering algorithm based on recursive collapsing of small cliques in a graph. The sizes of the small cliques are derived using random graph theory. This clustering algorithm leads to a natural parallel implementation in which multiple processors are used to identify clusters simultaneously. We also present a cluster-based partitioning method in which our clustering algorithm is used as a preprocessing step to both the bisection algorithm by Fiduccia and Mattheyses and a ratio-cut algorithm by Wei and Cheng. Our results show that cluster-based partitioning obtains cut sizes up to 49.6% smaller than the bisection algorithm, and obtains ratio cut sizes up to 66.8% smaller than the ratio-cut algorithm. Moreover, we show that cluster-based partitioning produces much stabler results than direct partitioning. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.L. Bagrodia and W. Liao. Maisie: </author> <title> A language and optimizing environment for distributed simulation. </title> <booktitle> In Proc. of 1990 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pages 205-210, </pages> <address> San Diego, CA, </address> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: The driver repeats the process of coordinating swaps until there is only one active processor left. The driver allows this processor to finish clustering and to perform the post-processing step. Implementation. The parallel clustering algorithm was implemented using Maisie <ref> [1] </ref>, a C-based parallel language that enables the algorithm to execute in parallel in a multi-processor environment. The driver and each processor are executed as processes by Maisie. A process is represented by an entity which is similar to a function in C. <p> We have applied our cluster-based partitioning approach to the bisection algorithm of Fiduccia and Mattheyses (the FM algorithm) [8] and to the ratio-cut algorithm of Wei and Cheng (the RFM algorithm) [17]. The clustering portion of the cluster-based partitioning method was implemented in Maisie a C-based parallel language <ref> [1] </ref> as described in Section 2.3. The FM and RFM partitioning algorithms were implemented in C as described in [8] and [17]. Experiments were executed on a network of Sun workstations. <p> Finally, a global refinement can be performed to further improve the placement solution. We believe that this cluster-based placement method can handle designs of very high complexity and produce high-quality placement solutions. Acknowledgment The Maisie programming language was developed by R. Bagrodia and W. Liao at UCLA <ref> [1] </ref>. The authors would like to thank them for valuable discussions during the development of this project.
Reference: [2] <author> B. Bollobas. </author> <title> Random Graphs. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1985. </year>
Reference-contexts: r 0 , computed by the following formula, such that X r 0 is much larger than one and X r 0 +1 is less than one. r 0 = 2 log b n 2 log b log b n + 2 log b 2 where b = 1 p <ref> [2] </ref>.
Reference: [3] <author> T. Bui, C. Heigham, C. Jones, and T. Leighton. </author> <title> Improving the Performance of the Kernighan-Lin and Simulated Annealing Graph Bisection Algorithms. </title> <booktitle> 26th ACM/IEEE DAC, </booktitle> <pages> pages 775-778, </pages> <year> 1989. </year>
Reference-contexts: However, many clustering and partitioning algorithms <ref> [3, 10, 14, 11, 6] </ref>, including the one presented in this paper, use a graph representation of the netlist rather than a hypergraph representation. An r-terminal net is represented by an r-clique in the graph representation. <p> In contrast to the top-down clustering approaches which are based on recursive partitioning, these bottom-up clustering algorithms repeatedly find locally strongly connected clusters. The Compaction Algorithm. This method <ref> [3] </ref> was developed to improve the results of partitioning algorithms such as the Kernighan-Lin algorithm [14] and simulated annealing [15]. Those partitioning algorithms tend to perform poorly on graphs with average degree less than or equal to three [3]. <p> The Compaction Algorithm. This method <ref> [3] </ref> was developed to improve the results of partitioning algorithms such as the Kernighan-Lin algorithm [14] and simulated annealing [15]. Those partitioning algorithms tend to perform poorly on graphs with average degree less than or equal to three [3]. The compaction heuristic increases the average degree of a graph by finding a maximal random matching on the graph. Each edge in the matching represents a cluster, and the two nodes connected by a matching edge are collapsed to form a single node in the compacted graph.
Reference: [4] <author> H.R. Charney and D.L. Plato. </author> <title> Efficient Partitioning of Components. </title> <booktitle> In Proc. of the 5th Annual Design Automation Workshop, </booktitle> <pages> pages 16-0 to 16-21, </pages> <year> 1968. </year>
Reference-contexts: The edges of the clique are usually weighted according to the size of the net. Several weighting functions have been proposed, including 2 r1 , 2 r 2 mod (r;2) <ref> [4, 13, 7] </ref>. In essence, these weighting functions assign smaller weights to edges in larger nets. Our clustering algorithm uses the weighting function 2 r for an r-terminal net.
Reference: [5] <author> J. Cong, L. Hagen, and A. B. Kahng. </author> <title> Random Walks for Circuit Clustering. </title> <booktitle> In Proc. IEEE Intl. Conf. on ASIC, </booktitle> <pages> pages 14.2.1-14.2.4, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: However, it is not obvious what values should be assigned to k and l for a given circuit. Degree/Separation. A more recent metric for determining the quality of clusters is the degree/separation (DS) metric <ref> [5, 12] </ref>. The cluster degree is the average number of nets incident to each component in the cluster. The cluster separation is the average length of a shortest path between two components in the cluster. Clusters with a higher DS value are of higher quality. <p> Moreover, when k and l are large, the computational complexity of the algorithm becomes prohibitive for large circuits. The Random Walk Algorithms. Two bottom-up clustering algorithms that depend on random walks have been developed <ref> [5, 12] </ref>. A random walk begins at one node in the graph and takes n 2 steps through the graph. The clusters are based on cycles in the node sequence of the random walk.
Reference: [6] <author> J. Cong, L. Hagen, and A. B. Kahng. </author> <title> Net Partitions Yield Better Module Partitions. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1992. </year>
Reference-contexts: However, many clustering and partitioning algorithms <ref> [3, 10, 14, 11, 6] </ref>, including the one presented in this paper, use a graph representation of the netlist rather than a hypergraph representation. An r-terminal net is represented by an r-clique in the graph representation.
Reference: [7] <author> W. E. Donath. </author> <title> Logic Partitioning. In Physical Design Automation of VLSI Systems, </title> <editor> B. Preas and M. Lorenzetti, editors, </editor> <address> pages 65-86. Benjamin/Cummings, </address> <year> 1988. </year>
Reference-contexts: The edges of the clique are usually weighted according to the size of the net. Several weighting functions have been proposed, including 2 r1 , 2 r 2 mod (r;2) <ref> [4, 13, 7] </ref>. In essence, these weighting functions assign smaller weights to edges in larger nets. Our clustering algorithm uses the weighting function 2 r for an r-terminal net.
Reference: [8] <author> C.M. Fiduccia and R.M. Mattheyses. </author> <title> A Linear-Time Heuristic for Improving Network Partitions. </title> <booktitle> In Proc. 19th Design Automation Conference, </booktitle> <pages> pages 175-181, </pages> <year> 1982. </year>
Reference-contexts: Many existing layout algorithms generate a circuit hierarchy based on recursive top-down partitioning [16]. Not only does the time and space required by partitioning algorithms increase as circuit sizes increase, but also the stability and quality of their results deteriorate. For example, iterative improvement based partitioning algorithms <ref> [14, 8, 17] </ref> do not perform well on very large circuits. These algorithms try to avoid local optima in the solution space by allowing the cut size to temporarily increase. <p> The collapsed node may be further clustered allowing clusters of arbitrary size to be formed. The parallel version of our algorithm allows cliques to be found simultaneously by multiple processors which reduces the time required for clustering. When applied to the FM partitioning algorithm <ref> [8] </ref> and a ratio-cut partitioning algorithm [17], our cluster-based partitioning algorithms give significantly better results. 2 The Clustering Algorithm 2.1 Theoretical Background In our clustering algorithm, clusters are based on recursive collapsing of small cliques in a graph. <p> Then, refinement is performed on the completely unclustered netlist. As the clusters gradually become smaller, the areas of the two partitions gradually become more balanced. We have applied our cluster-based partitioning approach to the bisection algorithm of Fiduccia and Mattheyses (the FM algorithm) <ref> [8] </ref> and to the ratio-cut algorithm of Wei and Cheng (the RFM algorithm) [17]. The clustering portion of the cluster-based partitioning method was implemented in Maisie a C-based parallel language [1] as described in Section 2.3. The FM and RFM partitioning algorithms were implemented in C as described in [8] and <p> algorithm) <ref> [8] </ref> and to the ratio-cut algorithm of Wei and Cheng (the RFM algorithm) [17]. The clustering portion of the cluster-based partitioning method was implemented in Maisie a C-based parallel language [1] as described in Section 2.3. The FM and RFM partitioning algorithms were implemented in C as described in [8] and [17]. Experiments were executed on a network of Sun workstations. We have compared the results obtained by our cluster based partitioning method to the results obtained using the partitioning algorithms directly on the 14 test circuits.
Reference: [9] <author> H. Gabow. </author> <title> Implementation of Algorithms for Maximum Matching on Nonbipartite Graphs. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1973. </year>
Reference-contexts: This helps to balance the sizes of the clusters and further reduce the number of nodes in the clustered graph. In this step, a weighted matching 3 <ref> [9] </ref> is performed on the clustered graph, and each qualified pair of matched nodes is collapsed into a single node in exactly the same way as a clique. To be qualified, the pair must still satisfy the same area, size, and density thresholds as a clique.
Reference: [10] <author> J. Garbers, H.J. Promel, and A. Steger. </author> <title> Finding Clusters in VLSI Circuits. </title> <booktitle> ICCAD'90, </booktitle> <pages> pages 520-523, </pages> <year> 1990. </year>
Reference-contexts: However, many clustering and partitioning algorithms <ref> [3, 10, 14, 11, 6] </ref>, including the one presented in this paper, use a graph representation of the netlist rather than a hypergraph representation. An r-terminal net is represented by an r-clique in the graph representation. <p> In a graph, two nodes are k-l connected if and only if there exist k edge-disjoint paths connecting them such that each path has length at most l <ref> [10] </ref>. The idea is that if two nodes are connected by many short paths, they are strongly connected. However, it is not obvious what values should be assigned to k and l for a given circuit. Degree/Separation. <p> This method does not attempt to find natural clusters which are very useful in VLSI design. The k-l-connectedness Algorithm. This is a constructive algorithm that forms clusters defined by the transitive closure of the k-l-connectedness relation <ref> [10] </ref>. For arbitrary k, the complexity of this algorithm is O (d 2l1 n) where d is the maximum degree of the nodes.
Reference: [11] <author> L. Hagen and A. B. Kahng. </author> <title> Fast Spectral Methods for Ratio Cut Partitioning and Clustering. </title> <booktitle> In Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 10-13, </pages> <year> 1991. </year>
Reference-contexts: However, many clustering and partitioning algorithms <ref> [3, 10, 14, 11, 6] </ref>, including the one presented in this paper, use a graph representation of the netlist rather than a hypergraph representation. An r-terminal net is represented by an r-clique in the graph representation.
Reference: [12] <author> L. Hagen and A. B. Kahng. </author> <title> A New Approach to Effective Circuit Clustering. </title> <booktitle> In Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <address> Santa Clara, </address> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: However, it is not obvious what values should be assigned to k and l for a given circuit. Degree/Separation. A more recent metric for determining the quality of clusters is the degree/separation (DS) metric <ref> [5, 12] </ref>. The cluster degree is the average number of nets incident to each component in the cluster. The cluster separation is the average length of a shortest path between two components in the cluster. Clusters with a higher DS value are of higher quality. <p> Moreover, when k and l are large, the computational complexity of the algorithm becomes prohibitive for large circuits. The Random Walk Algorithms. Two bottom-up clustering algorithms that depend on random walks have been developed <ref> [5, 12] </ref>. A random walk begins at one node in the graph and takes n 2 steps through the graph. The clusters are based on cycles in the node sequence of the random walk.
Reference: [13] <author> M. Hanan and J.M. Kurtzberg. </author> <title> A Review of the Placement and Quadratic Assignment Problems. </title> <journal> SIAM Review, </journal> <volume> 14 </volume> <pages> 324-342, </pages> <year> 1972. </year>
Reference-contexts: The edges of the clique are usually weighted according to the size of the net. Several weighting functions have been proposed, including 2 r1 , 2 r 2 mod (r;2) <ref> [4, 13, 7] </ref>. In essence, these weighting functions assign smaller weights to edges in larger nets. Our clustering algorithm uses the weighting function 2 r for an r-terminal net.
Reference: [14] <author> B.W. Kernighan and S. Lin. </author> <title> An Efficient Heuristic Procedure for Partitioning Graphs. </title> <journal> Bell System Technical Journal, </journal> <volume> 49 </volume> <pages> 291-307, </pages> <month> Feb. </month> <year> 1970. </year>
Reference-contexts: Many existing layout algorithms generate a circuit hierarchy based on recursive top-down partitioning [16]. Not only does the time and space required by partitioning algorithms increase as circuit sizes increase, but also the stability and quality of their results deteriorate. For example, iterative improvement based partitioning algorithms <ref> [14, 8, 17] </ref> do not perform well on very large circuits. These algorithms try to avoid local optima in the solution space by allowing the cut size to temporarily increase. <p> However, many clustering and partitioning algorithms <ref> [3, 10, 14, 11, 6] </ref>, including the one presented in this paper, use a graph representation of the netlist rather than a hypergraph representation. An r-terminal net is represented by an r-clique in the graph representation. <p> In contrast to the top-down clustering approaches which are based on recursive partitioning, these bottom-up clustering algorithms repeatedly find locally strongly connected clusters. The Compaction Algorithm. This method [3] was developed to improve the results of partitioning algorithms such as the Kernighan-Lin algorithm <ref> [14] </ref> and simulated annealing [15]. Those partitioning algorithms tend to perform poorly on graphs with average degree less than or equal to three [3]. The compaction heuristic increases the average degree of a graph by finding a maximal random matching on the graph.
Reference: [15] <author> S. Kirkpatrick, C. Gelatt Jr., and M. Vecchi. </author> <title> Optimization by Simulated Annealing. </title> <journal> Science, </journal> <volume> 220 </volume> <pages> 671-680, </pages> <month> May 13 </month> <year> 1983. </year>
Reference-contexts: In contrast to the top-down clustering approaches which are based on recursive partitioning, these bottom-up clustering algorithms repeatedly find locally strongly connected clusters. The Compaction Algorithm. This method [3] was developed to improve the results of partitioning algorithms such as the Kernighan-Lin algorithm [14] and simulated annealing <ref> [15] </ref>. Those partitioning algorithms tend to perform poorly on graphs with average degree less than or equal to three [3]. The compaction heuristic increases the average degree of a graph by finding a maximal random matching on the graph.
Reference: [16] <author> T. Lengauer. </author> <title> Combinatorial Algorithms for Integrated Circuit Layout. </title> <publisher> John Wiley & Sons, </publisher> <address> Chichester, </address> <year> 1990. </year>
Reference-contexts: The goal of clustering algorithms is to identify the clusters in a circuit. In VLSI layout design, clustering algorithms can be used to construct the natural hierarchy of the circuit. Many existing layout algorithms generate a circuit hierarchy based on recursive top-down partitioning <ref> [16] </ref>. Not only does the time and space required by partitioning algorithms increase as circuit sizes increase, but also the stability and quality of their results deteriorate. For example, iterative improvement based partitioning algorithms [14, 8, 17] do not perform well on very large circuits.
Reference: [17] <author> Y.C. Wei and C.K. Cheng. </author> <title> Towards Efficient Hierarchical Designs by Ratio Cut Partitioning. </title> <booktitle> In Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 298-301, </pages> <year> 1989. </year>
Reference-contexts: Many existing layout algorithms generate a circuit hierarchy based on recursive top-down partitioning [16]. Not only does the time and space required by partitioning algorithms increase as circuit sizes increase, but also the stability and quality of their results deteriorate. For example, iterative improvement based partitioning algorithms <ref> [14, 8, 17] </ref> do not perform well on very large circuits. These algorithms try to avoid local optima in the solution space by allowing the cut size to temporarily increase. <p> The parallel version of our algorithm allows cliques to be found simultaneously by multiple processors which reduces the time required for clustering. When applied to the FM partitioning algorithm [8] and a ratio-cut partitioning algorithm <ref> [17] </ref>, our cluster-based partitioning algorithms give significantly better results. 2 The Clustering Algorithm 2.1 Theoretical Background In our clustering algorithm, clusters are based on recursive collapsing of small cliques in a graph. <p> As the clusters gradually become smaller, the areas of the two partitions gradually become more balanced. We have applied our cluster-based partitioning approach to the bisection algorithm of Fiduccia and Mattheyses (the FM algorithm) [8] and to the ratio-cut algorithm of Wei and Cheng (the RFM algorithm) <ref> [17] </ref>. The clustering portion of the cluster-based partitioning method was implemented in Maisie a C-based parallel language [1] as described in Section 2.3. The FM and RFM partitioning algorithms were implemented in C as described in [8] and [17]. Experiments were executed on a network of Sun workstations. <p> and to the ratio-cut algorithm of Wei and Cheng (the RFM algorithm) <ref> [17] </ref>. The clustering portion of the cluster-based partitioning method was implemented in Maisie a C-based parallel language [1] as described in Section 2.3. The FM and RFM partitioning algorithms were implemented in C as described in [8] and [17]. Experiments were executed on a network of Sun workstations. We have compared the results obtained by our cluster based partitioning method to the results obtained using the partitioning algorithms directly on the 14 test circuits.
References-found: 17

