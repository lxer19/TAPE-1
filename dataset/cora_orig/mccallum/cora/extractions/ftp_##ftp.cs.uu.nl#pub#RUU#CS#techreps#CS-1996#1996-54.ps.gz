URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1996/1996-54.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Computing Constrained Minimum-Width Annuli of Point Sets  
Author: Mark de Berg Prosenjit Bose David Bremner Suneeta Ramaswami Gordon Wilfong k 
Date: November 29, 1996  
Abstract: We study the problem of determining whether a manufactured disc of certain radius r is within tolerance. More precisely, we present algorithms that, given a set of n probe points on the surface of the manufactured object, compute the thinnest annulus whose outer (or inner, or median) radius is r and that contains all the probe points. Our algorithms run in O(n log n) time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P.K. Agarwal, B. Aronov, and M. Sharir. </author> <title> Computing envelopes in four dimensions with applications. </title> <booktitle> In Proceedings of the 10th Annual ACM Symposium on Computational Geometry, </booktitle> <pages> pages 348-358, </pages> <year> 1994. </year>
Reference-contexts: In the case where the points are not random, the above characterization for the center of the minimum-width annulus has also been used to obtain algorithms with improved running times, by using Megiddo's parametric search [15] and other techniques. Agarwal et al. <ref> [1, 2, 3] </ref> obtain randomized algorithms with running times that are o (n 2 ). The best-known algorithm to date appears in [2] and has an expected running time of O (n 3=2+* ), where * &gt; 0 is an arbitrarily small constant.
Reference: [2] <author> P.K. Agarwal and M. Sharir. </author> <title> Efficient randomized algorithms for some geometric optimization problems. </title> <booktitle> In Proceedings of the 11th Annual ACM Symposium on Computational Geometry, </booktitle> <pages> pages 326-335, </pages> <year> 1995. </year>
Reference-contexts: In the case where the points are not random, the above characterization for the center of the minimum-width annulus has also been used to obtain algorithms with improved running times, by using Megiddo's parametric search [15] and other techniques. Agarwal et al. <ref> [1, 2, 3] </ref> obtain randomized algorithms with running times that are o (n 2 ). The best-known algorithm to date appears in [2] and has an expected running time of O (n 3=2+* ), where * &gt; 0 is an arbitrarily small constant. <p> Agarwal et al. [1, 2, 3] obtain randomized algorithms with running times that are o (n 2 ). The best-known algorithm to date appears in <ref> [2] </ref> and has an expected running time of O (n 3=2+* ), where * &gt; 0 is an arbitrarily small constant. Faster running times have been demonstrated for some special cases as well.
Reference: [3] <author> P.K. Agarwal, M. Sharir, and S. Toledo. </author> <title> Applications of parametric searching in geometric optimization. </title> <journal> Journal of Algorithms, </journal> <volume> 17 </volume> <pages> 292-318, </pages> <year> 1994. </year>
Reference-contexts: In the case where the points are not random, the above characterization for the center of the minimum-width annulus has also been used to obtain algorithms with improved running times, by using Megiddo's parametric search [15] and other techniques. Agarwal et al. <ref> [1, 2, 3] </ref> obtain randomized algorithms with running times that are o (n 2 ). The best-known algorithm to date appears in [2] and has an expected running time of O (n 3=2+* ), where * &gt; 0 is an arbitrarily small constant.
Reference: [4] <author> F. Aurenhammer. </author> <title> Improved algorithms for discs and balls using power diagrams. </title> <journal> Journal of Algorithms, </journal> <volume> 9 </volume> <pages> 151-161, </pages> <year> 1988. </year>
Reference-contexts: The edges of the boundary are arcs of circles of radius r and the vertices are the intersections of two or more arcs. Given a set of n open discs, the complement of their union can be computed in O (n log n) time <ref> [4, 6] </ref>. Therefore, the set F can be computed in O (n log n) time. <p> For more details on how to implement a plane sweep, refer to O'Rourke [16] or Preparata and Shamos [17]. Finally, each vertex of F is a candidate center. Thus, there are only O (n) such candidate centers and they can be generated in O (n log n) time <ref> [4, 6] </ref>. Once all of the O (n) candidates have been generated, computing the location of the center and the radius of the minimum spanning disc is simple. For each candidate center c i , we determine in which cell of the FPVD (S) it lies.
Reference: [5] <author> P. Bose and L. Devroye. </author> <title> Intersections with random geometric objects. </title> <type> Technical report, </type> <institution> McGill University, </institution> <year> 1996. </year>
Reference-contexts: In the worst case k can be fi (n 2 ), thus this algorithm has worst case running time of fi (n 2 ). This algorithm was re-discovered in the manufacturing community by Roy and Zhang in 1992 [19]. Recently, Bose and Devroye <ref> [5] </ref> have shown that the expected number of intersections between the furthest-point and nearest-point Voronoi diagram of a random point set is linear (the set of points is drawn from a density bounded from 0 and 1 on a convex compact set).
Reference: [6] <author> K. Q. Brown. </author> <title> Geometric transforms for fast geometric algorithms. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1980. </year>
Reference-contexts: Compute the nearest point Voronoi diagram of the set of points S in O (n log n) time (e.g. [8, 21]). 2. Compute the intersection F of the n discs D (s i ; r); s i 2 S in O (n log n) time <ref> [6] </ref>. 3. Identify the Voronoi vertices that lie in F and find the intersection points between NPVD (S) and F (refer Lemma 4). For each vertex of bd (F ), find the Voronoi region in which it lies, as described above. This takes O (n log n) time. 4. <p> There are O (n) edges in FPVD (S) [16, 17], which implies that there are only O (n) intersection points of an edge e of FPVD (S) and bd (F ) closest to the centroid of the two generators of e. Finally, F has O (n) vertices <ref> [6] </ref>. Therefore, there are O (n) candidate locations for the center of the thinnest annulus of S constrained to having a center in F . <p> The approach used to solve the problem is to verify each of the candidate positions for the center as shown in Lemma 6 and select the position yielding the smallest spanning disc. The complement of the union of n open discs has linear boundary complexity <ref> [6] </ref>. The edges of the boundary are arcs of circles of radius r and the vertices are the intersections of two or more arcs. Given a set of n open discs, the complement of their union can be computed in O (n log n) time [4, 6]. <p> The edges of the boundary are arcs of circles of radius r and the vertices are the intersections of two or more arcs. Given a set of n open discs, the complement of their union can be computed in O (n log n) time <ref> [4, 6] </ref>. Therefore, the set F can be computed in O (n log n) time. <p> For more details on how to implement a plane sweep, refer to O'Rourke [16] or Preparata and Shamos [17]. Finally, each vertex of F is a candidate center. Thus, there are only O (n) such candidate centers and they can be generated in O (n log n) time <ref> [4, 6] </ref>. Once all of the O (n) candidates have been generated, computing the location of the center and the radius of the minimum spanning disc is simple. For each candidate center c i , we determine in which cell of the FPVD (S) it lies. <p> The outline of our algorithm is as follows. 1. Compute F in O (n log n) time by divide and conquer <ref> [6] </ref>. 18 2. As in the previous section, we can compute the centers of the diameter of S in O (n log n) time. 3. Compute G in O (n log n) time by the algorithm of Yap [25]. 4.
Reference: [7] <author> H. Ebara, N. Fukuyama, H. Nakano, and Y. Nakanishi. </author> <title> Roundness algorithms using the Voronoi diagrams. </title> <booktitle> In Proceedings of the First Canadian Conference on Computational Geometry, </booktitle> <pages> page 41, </pages> <year> 1989. </year>
Reference-contexts: An algorithm for this problem was given by Ebara et al. <ref> [7] </ref> in 1989, where they give an O (n 2 ) time algorithm for the problem by computing the union of the nearest and furthest-point Voronoi diagrams of the input set of n points.
Reference: [8] <author> S. J. Fortune. </author> <title> A sweepline algorithm for Voronoi diagrams. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 153-174, </pages> <year> 1987. </year>
Reference-contexts: In summary, the outline of the algorithm to compute the minimum width annulus with outer radius r is as follows: 1. Compute the nearest point Voronoi diagram of the set of points S in O (n log n) time (e.g. <ref> [8, 21] </ref>). 2. Compute the intersection F of the n discs D (s i ; r); s i 2 S in O (n log n) time [6]. 3. Identify the Voronoi vertices that lie in F and find the intersection points between NPVD (S) and F (refer Lemma 4). <p> We need determine if a center of a diameter of S or a vertex of FPVD (S) is in F . To do this, we first compute in O (n log n) time the closest point Voronoi diagram of S, denote NPVD (S) <ref> [8, 16, 17] </ref>. We preprocess NPVD (S) for point location [12] (i.e. with O (n) preprocessing, we can locate the cell of NPVD (S) containing a query point in O (log n) time).
Reference: [9] <author> L. W. Foster. GEO-METRICS II: </author> <title> The application of geometric tolerancing techniques. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1982. </year>
Reference-contexts: See Figure 1 for an example of an annulus of a set of points. If the thickness of such an annulus is less than the specified tolerance, the manufactured object is acceptable. This is, in fact, the measure used by the American National Standards Institute (see Foster <ref> [9] </ref>, pp. 40-42) and the International Standards Office for testing roundness. 1.1 Previous Work The minimum width annulus problem has been well-studied.
Reference: [10] <author> J. Garc ia and P. A. Ramos. </author> <title> Circularity of a set of points. </title> <type> Technical Report 4, </type> <institution> De-partamento de Matematica Aplicada, E.U. Informatica, Universidad Politecnica de Madrid, </institution> <year> 1996. </year>
Reference-contexts: For the case when the input is a convex polygon, Swanson [23] gives a linear-time algorithm (even though the number of intersections between the medial axis and furthest neighbor Voronoi diagram of a convex polygon might still be as high as (n 2 )). Garc ia et al. <ref> [10] </ref> show that even when the input is a set of points in convex position, the minimum-width annulus can be found in linear time. 1.2 Our Results Suppose we would like to manufacture a disc of radius r.
Reference: [11] <author> L. J. Guibas and R. Seidel. </author> <title> Computing convolutions by reciprocal search. </title> <journal> Discrete Comput. Geom., </journal> <volume> 2 </volume> <pages> 175-193, </pages> <year> 1987. </year>
Reference-contexts: This algorithm can be improved to run in O (n log n + k) time by using the planar map overlay algorithm 3 due to Guibas and Seidel <ref> [11] </ref>, where k represents the number of intersection points between the nearest and furthest-point Voronoi diagrams. In the worst case k can be fi (n 2 ), thus this algorithm has worst case running time of fi (n 2 ). <p> We describe below a simple O (n log n) time algorithm to determine the intersection points between NPVD (S) and bd (F ). We would like to point out that it is possible to use Guibas and Seidel's output-sensitive planar-map overlay algorithm <ref> [11] </ref> to solve our problem within the same time bounds. However, we present here an extremely simple algorithm that is more practical than that implied by the more general algorithm in [11]. <p> We would like to point out that it is possible to use Guibas and Seidel's output-sensitive planar-map overlay algorithm <ref> [11] </ref> to solve our problem within the same time bounds. However, we present here an extremely simple algorithm that is more practical than that implied by the more general algorithm in [11]. Let `(c; ) be an oriented line, where c is a point on the line and 0 &lt; 2 is the angle the line makes with the positive x-axis.
Reference: [12] <author> D. G. Kirkpatrick. </author> <title> Optimal search in planar subdivisions. </title> <journal> SIAM J. Computing, </journal> <volume> 12 </volume> <pages> 28-35, </pages> <year> 1983. </year>
Reference-contexts: For each vertex of F , it is necessary to identify the Voronoi region in which it lies. This can be done in O (log n) time for each vertex, after a linear-time preprocessing step, by using a point location algorithm for planar subdivisions <ref> [12] </ref>. <p> To do this, we first compute in O (n log n) time the closest point Voronoi diagram of S, denote NPVD (S) [8, 16, 17]. We preprocess NPVD (S) for point location <ref> [12] </ref> (i.e. with O (n) preprocessing, we can locate the cell of NPVD (S) containing a query point in O (log n) time). <p> For each candidate center c i , we determine in which cell of the FPVD (S) it lies. This can be accomplished in O (log n) time per candidate with O (n) preprocessing time <ref> [12] </ref>. The distance between c i and the generator of the cell containing c i is the length of the radius of the spanning disc. We output the smallest spanning disc.
Reference: [13] <author> K. Lai and J. Wang. </author> <title> A computational geometry approach to geometric tol-erancing. </title> <booktitle> In 16th North American Manufacturing Research Conference, </booktitle> <pages> pages 376-379, </pages> <year> 1988. </year>
Reference-contexts: For the case when the input is not a set of points but a simple polygon P of n vertices, the boundary edges of P are required to be within the annulus. For this problem, Lai and Wang <ref> [13] </ref> gave an O (n log n + k) time algorithm, where k is the number of intersections between the medial axis of P and the furthest neighbor Voronoi diagram of P . An algorithm for this special case was also given in [14].
Reference: [14] <author> V.B. Le and D.T. Lee. </author> <title> Out-of-roundness problem revisited. </title> <journal> In IEEE Trans. Pattern Anal. Mach. Intell., </journal> <volume> volume PAMI-13, </volume> <pages> pages 217-223, </pages> <year> 1991. </year>
Reference-contexts: For this problem, Lai and Wang [13] gave an O (n log n + k) time algorithm, where k is the number of intersections between the medial axis of P and the furthest neighbor Voronoi diagram of P . An algorithm for this special case was also given in <ref> [14] </ref>. For the case when the input is a convex polygon, Swanson [23] gives a linear-time algorithm (even though the number of intersections between the medial axis and furthest neighbor Voronoi diagram of a convex polygon might still be as high as (n 2 )).
Reference: [15] <author> N. Megiddo. </author> <title> Applying parallel computation algorithms in the design of serial algorithms. </title> <journal> Journal of the ACM, </journal> <volume> 30 </volume> <pages> 852-865, </pages> <year> 1983. </year>
Reference-contexts: In the case where the points are not random, the above characterization for the center of the minimum-width annulus has also been used to obtain algorithms with improved running times, by using Megiddo's parametric search <ref> [15] </ref> and other techniques. Agarwal et al. [1, 2, 3] obtain randomized algorithms with running times that are o (n 2 ). The best-known algorithm to date appears in [2] and has an expected running time of O (n 3=2+* ), where * &gt; 0 is an arbitrarily small constant.
Reference: [16] <author> J. O'Rourke. </author> <title> Computational Geometry in C. </title> <publisher> Cambridge University Press, </publisher> <year> 1994. </year>
Reference-contexts: Moreover, they are fairly simple, and should present no real problems to an implementor. 2 Notation and Definitions In this section, we establish notation that will be used throughout the paper and also give the relevant geometric definitions. These definitions are standard; see O'Rourke <ref> [16] </ref> or Preparata and Shamos [17] for more details. The input set of points will always be denoted by S = fs 1 ; s 2 ; : : : ; s n g. <p> Therefore, the center lies in P3. There are O (n) midpoints of the diameter of S <ref> [16, 17] </ref>. There are O (n) vertices in FPVD (S) [16, 17]. There are O (n) edges in FPVD (S) [16, 17], which implies that there are only O (n) intersection points of an edge e of FPVD (S) and bd (F ) closest to the centroid of the two generators <p> Therefore, the center lies in P3. There are O (n) midpoints of the diameter of S <ref> [16, 17] </ref>. There are O (n) vertices in FPVD (S) [16, 17]. There are O (n) edges in FPVD (S) [16, 17], which implies that there are only O (n) intersection points of an edge e of FPVD (S) and bd (F ) closest to the centroid of the two generators of e. Finally, F has O (n) vertices [6]. <p> Therefore, the center lies in P3. There are O (n) midpoints of the diameter of S <ref> [16, 17] </ref>. There are O (n) vertices in FPVD (S) [16, 17]. There are O (n) edges in FPVD (S) [16, 17], which implies that there are only O (n) intersection points of an edge e of FPVD (S) and bd (F ) closest to the centroid of the two generators of e. Finally, F has O (n) vertices [6]. <p> We need determine if a center of a diameter of S or a vertex of FPVD (S) is in F . To do this, we first compute in O (n log n) time the closest point Voronoi diagram of S, denote NPVD (S) <ref> [8, 16, 17] </ref>. We preprocess NPVD (S) for point location [12] (i.e. with O (n) preprocessing, we can locate the cell of NPVD (S) containing a query point in O (log n) time). <p> Since there are only O (n) rays and the boundary of F has O (n) size, each of the two sweeps takes O (n log n) time to generate the O (n) candidate centers. For more details on how to implement a plane sweep, refer to O'Rourke <ref> [16] </ref> or Preparata and Shamos [17]. Finally, each vertex of F is a candidate center. Thus, there are only O (n) such candidate centers and they can be generated in O (n log n) time [4, 6].
Reference: [17] <author> F. Preparata and M. I. Shamos. </author> <title> Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Moreover, they are fairly simple, and should present no real problems to an implementor. 2 Notation and Definitions In this section, we establish notation that will be used throughout the paper and also give the relevant geometric definitions. These definitions are standard; see O'Rourke [16] or Preparata and Shamos <ref> [17] </ref> for more details. The input set of points will always be denoted by S = fs 1 ; s 2 ; : : : ; s n g. <p> Therefore, the center lies in P3. There are O (n) midpoints of the diameter of S <ref> [16, 17] </ref>. There are O (n) vertices in FPVD (S) [16, 17]. There are O (n) edges in FPVD (S) [16, 17], which implies that there are only O (n) intersection points of an edge e of FPVD (S) and bd (F ) closest to the centroid of the two generators <p> Therefore, the center lies in P3. There are O (n) midpoints of the diameter of S <ref> [16, 17] </ref>. There are O (n) vertices in FPVD (S) [16, 17]. There are O (n) edges in FPVD (S) [16, 17], which implies that there are only O (n) intersection points of an edge e of FPVD (S) and bd (F ) closest to the centroid of the two generators of e. Finally, F has O (n) vertices [6]. <p> Therefore, the center lies in P3. There are O (n) midpoints of the diameter of S <ref> [16, 17] </ref>. There are O (n) vertices in FPVD (S) [16, 17]. There are O (n) edges in FPVD (S) [16, 17], which implies that there are only O (n) intersection points of an edge e of FPVD (S) and bd (F ) closest to the centroid of the two generators of e. Finally, F has O (n) vertices [6]. <p> The total time taken to enumerate and test the candidate centers is O (n log n). First, the centers of the diameter d i of S can be computed in O (n log n) time <ref> [17] </ref>. Second, we compute all of the vertices of the FPVD (S). We need determine if a center of a diameter of S or a vertex of FPVD (S) is in F . <p> We need determine if a center of a diameter of S or a vertex of FPVD (S) is in F . To do this, we first compute in O (n log n) time the closest point Voronoi diagram of S, denote NPVD (S) <ref> [8, 16, 17] </ref>. We preprocess NPVD (S) for point location [12] (i.e. with O (n) preprocessing, we can locate the cell of NPVD (S) containing a query point in O (log n) time). <p> For more details on how to implement a plane sweep, refer to O'Rourke [16] or Preparata and Shamos <ref> [17] </ref>. Finally, each vertex of F is a candidate center. Thus, there are only O (n) such candidate centers and they can be generated in O (n log n) time [4, 6].
Reference: [18] <author> T. J. Rivlin. </author> <title> Approximation by circles. </title> <journal> Computing, </journal> <volume> 21 </volume> <pages> 93-104, </pages> <year> 1979. </year>
Reference-contexts: This is, in fact, the measure used by the American National Standards Institute (see Foster [9], pp. 40-42) and the International Standards Office for testing roundness. 1.1 Previous Work The minimum width annulus problem has been well-studied. Rivlin <ref> [18] </ref> first showed that the minimum width annulus of n points is either the width of the set (the width of a set of points is the thinnest strip that contains all the points) or must have two 2 points. points on the inner circle and two points on the outer
Reference: [19] <author> U. Roy and X. Zhang. </author> <title> Establishment of a pair of concentric circles with the minimum radial separation for assessing roundness errors. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(3) </volume> <pages> 161-168, </pages> <year> 1992. </year>
Reference-contexts: In the worst case k can be fi (n 2 ), thus this algorithm has worst case running time of fi (n 2 ). This algorithm was re-discovered in the manufacturing community by Roy and Zhang in 1992 <ref> [19] </ref>. Recently, Bose and Devroye [5] have shown that the expected number of intersections between the furthest-point and nearest-point Voronoi diagram of a random point set is linear (the set of points is drawn from a density bounded from 0 and 1 on a convex compact set).
Reference: [20] <author> M. I. Shamos. </author> <title> Computational Geometry. </title> <type> PhD thesis, </type> <institution> Yale University, </institution> <year> 1978. </year>
Reference-contexts: There are at most n combinatorially distinct pairs of parallel lines of support of P , which can be found in O (n) time using the well-known technique of rotating calipers <ref> [20, 24] </ref>. We thus obtain a list of supporting lines sorted by angle (with respect to the positive x-axis, say).
Reference: [21] <author> M.I. Shamos and D. Hoey. </author> <title> Closest-point problems. </title> <booktitle> In Proc. Sixteenth Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 151-162, </pages> <month> October </month> <year> 1975. </year>
Reference-contexts: In summary, the outline of the algorithm to compute the minimum width annulus with outer radius r is as follows: 1. Compute the nearest point Voronoi diagram of the set of points S in O (n log n) time (e.g. <ref> [8, 21] </ref>). 2. Compute the intersection F of the n discs D (s i ; r); s i 2 S in O (n log n) time [6]. 3. Identify the Voronoi vertices that lie in F and find the intersection points between NPVD (S) and F (refer Lemma 4).
Reference: [22] <author> M. Smid and R. Janardan. </author> <title> On the width and roundness of a set of points in the plane. </title> <booktitle> In Proceedings of the Seventh Canadian Conference on Computational Geometry, </booktitle> <pages> pages 193-198, </pages> <address> Quebec City, Quebec, </address> <month> August </month> <year> 1995. </year>
Reference: [23] <author> K. Swanson. </author> <title> An optimal algorithm for roundness determination on convex polygons. </title> <booktitle> In Proc. 3rd Workshop on Alg. and Data Structures, volume 709 of LNCS, </booktitle> <pages> pages 601-609, </pages> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: An algorithm for this special case was also given in [14]. For the case when the input is a convex polygon, Swanson <ref> [23] </ref> gives a linear-time algorithm (even though the number of intersections between the medial axis and furthest neighbor Voronoi diagram of a convex polygon might still be as high as (n 2 )).
Reference: [24] <author> G. Toussaint. </author> <title> Solving geometric problems with the "rotating calipers". </title> <booktitle> In Pro-ceedsings of IEEE MELECON, pages A10.02/1-4, </booktitle> <address> Athens, Greece, </address> <year> 1983. </year>
Reference-contexts: There are at most n combinatorially distinct pairs of parallel lines of support of P , which can be found in O (n) time using the well-known technique of rotating calipers <ref> [20, 24] </ref>. We thus obtain a list of supporting lines sorted by angle (with respect to the positive x-axis, say).
Reference: [25] <author> C.K. Yap. </author> <title> An O(n log n) algorithm for the Voronoi diagram of a set of simple curve segments. </title> <journal> Discrete Comput. Geom., </journal> <volume> 2 </volume> <pages> 365-393, </pages> <year> 1987. </year> <month> 21 </month>
Reference-contexts: As in the previous section, we can compute the centers of the diameter of S in O (n log n) time. 3. Compute G in O (n log n) time by the algorithm of Yap <ref> [25] </ref>. 4. Test each vertex of G, and each diameter center, as follows. (a) O (log n) time for point location to determine feasibility. (b) O (1) time to compute the width of the candidate annulus.
References-found: 25

