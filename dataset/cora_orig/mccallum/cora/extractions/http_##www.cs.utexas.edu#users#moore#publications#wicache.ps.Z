URL: http://www.cs.utexas.edu/users/moore/publications/wicache.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/moore/publications/write-invalidate-cache/index.html
Root-URL: 
Email: moore@cs.utexas.edu  
Title: An ACL2 Proof of Write Invalidate Cache Coherence  
Author: J Strother Moore 
Address: Austin, TX 78712-1188  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: As a pedagogical exercise in ACL2, we formalize and prove the correctness of a write invalidate cache scheme. In our formalization, an arbitrary number of processors, each with its own local cache, interact with a global memory via a bus which is snooped by the caches. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. Brock, M. Kaufmann, and J S. Moore. </author> <title> ACL2 Theorems about Commercial Microprocessors. </title> <booktitle> In Proceedings of Formal Methods in Computer-Aided Design (FM-CAD'96), </booktitle> <editor> M. Srivas and A. Camilleri (eds.), </editor> <publisher> Springer-Verlag, </publisher> <month> November, </month> <year> 1996, </year> <pages> pp. 275-293. </pages>
Reference-contexts: have been reported previously are the mechanical verification of the floating-point division microcode for the AMD-K5 TM [6], and the ACL2 modeling of the Motorola CAP digital signal processor and its use to prove that a pipeline hazard detection predicate was correct and that several DSP microcode applications were correct <ref> [1] </ref>. <p> Technically, the programming language is an extension of a subset of applicative Common Lisp. In addition, "ACL2" is the name we use for the implemented system <ref> [1] </ref>. The system provides an execution environment for the programming language and a theorem proving environment for the logic. The theorem prover's behavior is determined by rules in its data base. The rules are determined by the theorems the system has proved already.
Reference: 2. <author> D. A. Greve and M. M. </author> <title> Wilding Stack-based Java a back-to-future step", Electronic Engineering Times, </title> <journal> Jan. </journal> <volume> 12, </volume> <year> 1998, </year> <pages> pp. 92. </pages>
Reference-contexts: The bugs found by Russinoff's proofs were not uncovered by this extensive test suite. ACL2 is being used to model microprocessors at several industrial sites. For example, at Rockwell-Collins, Inc., ACL2 is being used experimentally to provide an executable model of JEM1, the world's first silicon Java Virtual Machine <ref> [2] </ref>. In addition, [9] describes an ACL2 model of a microprocessor with multiple, out-of-order instruction issue with a reorder buffer, speculative execution and exceptions. Proofs are being done to relate this model to a more conventional ISA model.
Reference: 3. <author> J. Hennessy and D. Paterson, </author> <title> Computer Architecture A Quantitative Approach, Second Edition, </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Francisco, </address> <year> 1996. </year>
Reference-contexts: Furthermore, at first sight, it may not seem to lend itself to Common Lisp modeling. By choosing this example, we hope to arose the reader's curiosity while illustrating ACL2. Our model is based on the discussion on page 658 of <ref> [3] </ref>. Our model includes an arbitrary number of processors, each with its own local cache connected via a bus to one global memory.
Reference: 4. <author> M. Kaufmann. </author> <title> ACL2 Support for Verification Projects. </title> <booktitle> In 15th International Conference on Automated Deduction (CADE) (to appear, </booktitle> <year> 1998). </year>
Reference-contexts: Matt Kaufmann, in <ref> [4] </ref>, describes how he used ACL2 to verify that certain rules were correct.
Reference: 5. <author> M. Kaufmann and J S. Moore. </author> <title> An Industrial Strength Theorem Prover for a Logic Based on Common Lisp. </title> <journal> In IEEE Transactions on Software Engineering 23(4), </journal> <month> April, </month> <year> 1997, </year> <pages> pp. 203-213. </pages>
Reference-contexts: describes an environment in ACL2 that can be used conveniently to verify newly proposed transformation rules and to simplify date manipulation expressions. 2 What is ACL2? "ACL2" stands for "A Computational Logic for Applicative Common Lisp." The logic is both an applicative programming language and a first order mathematical logic <ref> [5] </ref>. Technically, the programming language is an extension of a subset of applicative Common Lisp. In addition, "ACL2" is the name we use for the implemented system [1]. The system provides an execution environment for the programming language and a theorem proving environment for the logic.
Reference: 6. <author> J S. Moore, T. Lynch, and M. Kaufmann. </author> <title> A Mechanically Checked Proof of the Correctness of the Kernel of the AMD5 K 86 Floating-Point Division Algorithm, </title> <note> IEEE Transactions on Computers (to appear). See URL http://devil.ece.utexas .edu:80/~lynch/divide/divide.html for a preliminary draft. </note>
Reference-contexts: 1 Ongoing Industrial Applications of ACL2 The ACL2 theorem proving system is finding use in industrial-scale verification projects. Two significant projects which have been reported previously are the mechanical verification of the floating-point division microcode for the AMD-K5 TM <ref> [6] </ref>, and the ACL2 modeling of the Motorola CAP digital signal processor and its use to prove that a pipeline hazard detection predicate was correct and that several DSP microcode applications were correct [1].
Reference: 7. <author> J S. Moore. </author> <title> Symbolic Simulation: An ACL2 Approach. </title> <note> 1998. (submitted for publication) </note>
Reference: 8. <author> D. M. Russinoff. </author> <title> A Mechanically Checked Proof of IEEE Compliance of the Floating Point Multiplication, Division, and Square Root Algorithms of the AMD-K7 TM Processor URL http://www.onr.com/user/russ/david/k7-div-sqrt.html. </title>
Reference-contexts: This monumental work is reported in <ref> [8] </ref>. To corroborate the ACL2 RTL translation, AMD executed the ACL2 translation on a test suite of 80 million floating point problems and compared the results to their standard RTL simulation. The bugs found by Russinoff's proofs were not uncovered by this extensive test suite.
Reference: 9. <author> J. Sawada, W. Hunt, Jr., </author> <title> Processor Verification with Precise Exceptions and Speculative Execution, </title> <booktitle> Computer Aided Verification 1998, Lecture Notes in Computer Science, </booktitle> <address> Springer Verlag, </address> <note> 1998 (to appear). </note>
Reference-contexts: ACL2 is being used to model microprocessors at several industrial sites. For example, at Rockwell-Collins, Inc., ACL2 is being used experimentally to provide an executable model of JEM1, the world's first silicon Java Virtual Machine [2]. In addition, <ref> [9] </ref> describes an ACL2 model of a microprocessor with multiple, out-of-order instruction issue with a reorder buffer, speculative execution and exceptions. Proofs are being done to relate this model to a more conventional ISA model.
References-found: 9

