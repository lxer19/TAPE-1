URL: http://www.cs.utexas.edu/users/cpg/pub/95-ICSE.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/cpg/pub/abs.html
Root-URL: 
Title: A Framework for Evaluating Specification Methods for Reactive Systems Experience  
Author: Mark A. Ardis, John A. Chaves, Lalita Jategaonkar Jagadeesan, Peter Mataga, Carlos Puchol Mark G. Staskauskas, James Von Olnhausen 
Address: IL 60566-7013 (USA)  
Affiliation: AT&T Bell Laboratories Naperville,  
Date: April 1995)  
Note: (Proceedings of the International Conference on Software Engineering,  
Pubnum: Report  
Abstract: Numerous formal specification methods for reactive systems have been proposed in the literature. Because the significant differences between the methods are hard to determine, choosing the best method for a particular application can be difficult. We have applied several different methods, including Modechart, VFSM, ESTEREL, Basic LOTOS, Z, SDL and C, to an application problem encountered in the design of software for AT&T's 5ESS R fl telephone switching system. We have developed a set of criteria for evaluating and comparing the different specification methods. We argue that the evaluation of a method must take into account not only academic concerns, but also the maturity of the method, its compatibility with the existing software development process and system execution environment, and its suitability for the chosen application domain. 
Abstract-found: 1
Intro-found: 1
Reference: [AGE89] <institution> AGEL workshop manual version 3.0, </institution> <year> 1989. </year> <note> Produced by ILOG. </note>
Reference-contexts: Furthermore, it emits signals to the outside world indicating actions that should be taken on the lines, e.g. removal, restoral. The Agel development environment <ref> [AGE89] </ref> for ESTEREL provides an editor, compiler, simulator, debugger, and verifier; we found the environment to be quite useful in writing and debugging our implementation.
Reference: [Ard94] <author> M. Ardis. </author> <title> Lessons from using Basic LOTOS. </title> <booktitle> In 16th International Conference on Software Engineering, </booktitle> <pages> pages 5-14, </pages> <year> 1994. </year>
Reference-contexts: A process algebra paradigm is used, where each process is described in terms of legal sequences of events experienced by that process. The APS requirements table was first transcribed into a special finite-state machine dialect, called Primitive LOTOS <ref> [Ard94] </ref> . A compiler then translated this form into an executable subset of Basic LOTOS. Figure 4 shows one process description in elided form (arguments to processes have been omitted). The figure describes the transitions possible from the state where both lines are normal, and the working line is selected. <p> We have written an ESTEREL version of some alarms software in the 5ESS switch [JPVO95a] ; this feature was also written in Modechart. We have used LOTOS to specify various parts of telecommunications switching systems, including call processing and maintenance facilities <ref> [Ard94] </ref> . Many real-time switching protocols in 5ESS signaling and call processing applications have been written in SDL [Cha92] . We have written a Z specification of a set of 5ESS subscriber telephone features [MZ94] . Finally, we have written in C many features of the 5ESS switch.
Reference: [Bel91] <author> Bellcore. </author> <title> Synchronous optical network (SONET) transport systems: Common generic criteria. </title> <type> Technical Report TR-NWT-000253, Issue 2, </type> <institution> Bellcore, </institution> <year> 1991. </year>
Reference-contexts: We conclude in Section 6 with a summary of what we have learned from our study. 2 APS Problem In collaboration with a software development project we discovered a simple problem called Automatic Protection Switching (APS) <ref> [Bel91] </ref> described in terms of finite state machines. The idea is to provide more than one line for each communication channel. If a line degrades or fails, a backup line, called the protection line is used instead. The project chose 1+1 unidirectional non-revertive APS.
Reference: [BG92] <author> G. Berry and G. Gonthier. </author> <title> The ESTEREL synchronous programming language: design, semantics, </title> <booktitle> implementation. Science of Computer Programming, </booktitle> <volume> 19 </volume> <pages> 87-152, </pages> <year> 1992. </year>
Reference-contexts: For each of the specification methods studied, we attempted to specify the protocol requirements, construct an abstract algorithm in the method's modeling language, and then verify that the algorithm satisfies the re quirements. We selected for evaluation the specification methods Modechart [JM86] , VFSM [Wag92] , ESTEREL <ref> [BG92] </ref> , Basic LOTOS [ISO89] , Z [Spi92] , and SDL [IT93] , and the programming language C (the latter was chosen as a point of contrast, since it is the primary language in which the 5ESS software is implemented). <p> The validator will soon be enhanced to enable the checking of user-specified properties of an application, similar to those for the APS problem listed in Section 2. 3.3 ESTEREL ESTEREL <ref> [BG92] </ref> is a language designed for programming reactive systems. It is based on the synchrony hypothesis, which states that every reaction of a reactive system to a set of inputs is theoretically instantaneous.
Reference: [BL93] <author> R. Boumezbeur and L. Logrippo. </author> <title> Specifying telephone systems in LOTOS. </title> <journal> IEEE Communications, </journal> <pages> pages 38-45, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: verification PROCESS State_WNN [...]: NOEXIT := RMW; State_PON [...] [] RMP; State_WNO [...] [] FCP; State_PNN [...] [] CSP; State_PNN [...] [] DGW; State_PDN [...] [] DGP; State_WND [...] ENDPROC was performed entirely in ESTEREL itself. 3.4 LOTOS LOTOS [ISO89] was designed for protocol specification, especially within the telecommunication domain <ref> [BL93] </ref> . Basic LOTOS is that part of the language that describes interaction of processes in terms of shared events. A process algebra paradigm is used, where each process is described in terms of legal sequences of events experienced by that process.
Reference: [Cha92] <author> John A. Chaves. </author> <title> Formal methods at AT&T an industrial usage report. </title> <editor> In Parker and Rose, editors, </editor> <booktitle> Formal Description Techniques IV, </booktitle> <pages> pages 83-90. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1992. </year>
Reference-contexts: We have used LOTOS to specify various parts of telecommunications switching systems, including call processing and maintenance facilities [Ard94] . Many real-time switching protocols in 5ESS signaling and call processing applications have been written in SDL <ref> [Cha92] </ref> . We have written a Z specification of a set of 5ESS subscriber telephone features [MZ94] . Finally, we have written in C many features of the 5ESS switch. We emphasize that our evaluation of the languages and tools reflects our APS specifications as well as our previous experiences.
Reference: [CHLR93] <author> P.C. Clements, C. L. Heitmeyer, B. G. Labau, and A. T. Rose. </author> <title> MT: A toolset for specifying and analyzing real-time systems. </title> <booktitle> IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: Modechart adds absolute and relative timing semantics to Statecharts transitions. Its semantics is defined in terms of RTL (Real-Time Logic [JM86] ), which is a logic especially amenable to reasoning about the absolute timing of events. A set of tools has been developed <ref> [CHLR93] </ref> for the specification and analysis of real-time systems within this framework. Modechart specifications are made up of modes and transitions. Modes can be thought of as hierarchical partitions of the state space, and can be combined by using parallel or serial composition. The basic modes are called atomic modes.
Reference: [FHOS95] <author> A. R. Flora-Holmquist, J. D. O'Grady, and M. G. Staskauskas. </author> <title> Telecommunications software design using virtual finite state machines. </title> <booktitle> In Proc. Intl. Switching Symposium (ISS95), </booktitle> <address> Berlin, Germany, </address> <month> April </month> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: In earlier work, we had re-written larger portions of the 5ESS software in these languages. In particular, VFSM has been used in the design of many 5ESS software modules, including applications in call processing and signaling <ref> [FHOS95] </ref> . We have written an ESTEREL version of some alarms software in the 5ESS switch [JPVO95a] ; this feature was also written in Modechart. We have used LOTOS to specify various parts of telecommunications switching systems, including call processing and maintenance facilities [Ard94] .
Reference: [GCR94] <author> S. Gerhart, D. Craigen, and T. Ralston. </author> <title> Experience with formal methods in critical systems. </title> <journal> IEEE Software, </journal> <volume> 11(1) </volume> <pages> 21-28, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: In work related to ours, Gerhart et al. <ref> [GCR94] </ref> have put forth a set of criteria for evaluating formal methods in general, and Lewerentz and Lindner [LL94] have collected several case studies of the application of formal methods for reactive systems to the specification of a common design problem.
Reference: [Hal90] <author> A. Hall. </author> <title> Using Z as a specification calculus for object-oriented systems. </title> <editor> In D. Bjrner, C. A. R. Hoare, and H. Langmaack, editors, </editor> <booktitle> VDM and Z Formal Methods in Software Development, </booktitle> <pages> pages 290-318. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: To construct a description of the APS problem, we adopted certain structuring and naming conventions in addition to the meager conventional semantics of Z. A loosely object-oriented style of specification due to Hall <ref> [Hal90] </ref> , in which much of the necessary Z can be macro-generated, was followed. In addition, an event semantics suggested by the work of Zave and Jackson [ZJ94] was assumed.
Reference: [Har87] <author> D. Harel. Statecharts, </author> <title> a visual formalism for complex systems. </title> <type> Technical report, </type> <institution> The Weizmann Institute of Science, </institution> <month> July </month> <year> 1987. </year>
Reference-contexts: Although there were many similarities between solutions, there were also many differences. 3.1 Modechart The Modechart specification language [JLM88] is a language specifically designed for the specification of real-time systems. Modechart borrows from Statecharts <ref> [Har87] </ref> the use of hierarchical graphical formalisms to extend the conventional state-transition diagrams. Modechart adds absolute and relative timing semantics to Statecharts transitions. Its semantics is defined in terms of RTL (Real-Time Logic [JM86] ), which is a logic especially amenable to reasoning about the absolute timing of events.
Reference: [Hol92] <author> G.J. Holzmann. </author> <title> Practical methods for the formal validation of SDL specifications. </title> <journal> Computer Communications, </journal> <pages> pages 129-134, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Within each state-event three activities were performed sequentially: check for illegal request, determine and set changed line quality, determine and set new selected line. The SDL model was compiled into C code and validated. The required model properties were written in an SDL-like temporal logic. Our validator <ref> [Hol92] </ref> performs the most effective state space search possible given memory and time constraints.
Reference: [ISO89] <author> ISO. </author> <title> LOTOSA Formal Description Technique Based on the Temporal Ordering of Observational Behavior. ISO, 1989. International Standard ISO 8807. </title>
Reference-contexts: We selected for evaluation the specification methods Modechart [JM86] , VFSM [Wag92] , ESTEREL [BG92] , Basic LOTOS <ref> [ISO89] </ref> , Z [Spi92] , and SDL [IT93] , and the programming language C (the latter was chosen as a point of contrast, since it is the primary language in which the 5ESS software is implemented). <p> automatically formally verified all the properties given in Section 2; this verification PROCESS State_WNN [...]: NOEXIT := RMW; State_PON [...] [] RMP; State_WNO [...] [] FCP; State_PNN [...] [] CSP; State_PNN [...] [] DGW; State_PDN [...] [] DGP; State_WND [...] ENDPROC was performed entirely in ESTEREL itself. 3.4 LOTOS LOTOS <ref> [ISO89] </ref> was designed for protocol specification, especially within the telecommunication domain [BL93] . Basic LOTOS is that part of the language that describes interaction of processes in terms of shared events.
Reference: [IT92] <author> ITU-T. </author> <title> Message Sequence Chart. Recommendation Z.120, </title> <year> 1992. </year>
Reference-contexts: By conjoining these separate processes and running a simulator we could have detected potential deadlocks, which would have demonstrated inconsistency between the two descriptions. We found simulation to be useful in debugging the LOTOS specification. As part of simulation we generated traces of individual scenarios in Message Sequence Chart <ref> [IT92] </ref> form. These were useful in discussions with domain experts who reviewed the original project requirements.
Reference: [IT93] <author> ITU-T. </author> <title> Specification and Description Language SDL. Recommendation Z.100, </title> <year> 1993. </year>
Reference-contexts: We selected for evaluation the specification methods Modechart [JM86] , VFSM [Wag92] , ESTEREL [BG92] , Basic LOTOS [ISO89] , Z [Spi92] , and SDL <ref> [IT93] </ref> , and the programming language C (the latter was chosen as a point of contrast, since it is the primary language in which the 5ESS software is implemented).
Reference: [JLM88] <author> F. Jahanian, R. S. Lee, and A. Mok. </author> <title> Semantics of modechart in real-time logic. </title> <booktitle> In Proc. 21st Hawaii International Conference on Systems Science, </booktitle> <year> 1988. </year>
Reference-contexts: We also reviewed the solutions prepared by the project team as an aid in understanding the requirements. Although there were many similarities between solutions, there were also many differences. 3.1 Modechart The Modechart specification language <ref> [JLM88] </ref> is a language specifically designed for the specification of real-time systems. Modechart borrows from Statecharts [Har87] the use of hierarchical graphical formalisms to extend the conventional state-transition diagrams. Modechart adds absolute and relative timing semantics to Statecharts transitions.
Reference: [JM86] <author> F. Jahanian and A. Mok. </author> <title> Safety analysis of timing properties in real-time systems. </title> <journal> IEEE Transactions in Software Engineering, </journal> <volume> 9 </volume> <pages> 890-904, </pages> <year> 1986. </year>
Reference-contexts: For each of the specification methods studied, we attempted to specify the protocol requirements, construct an abstract algorithm in the method's modeling language, and then verify that the algorithm satisfies the re quirements. We selected for evaluation the specification methods Modechart <ref> [JM86] </ref> , VFSM [Wag92] , ESTEREL [BG92] , Basic LOTOS [ISO89] , Z [Spi92] , and SDL [IT93] , and the programming language C (the latter was chosen as a point of contrast, since it is the primary language in which the 5ESS software is implemented). <p> Modechart borrows from Statecharts [Har87] the use of hierarchical graphical formalisms to extend the conventional state-transition diagrams. Modechart adds absolute and relative timing semantics to Statecharts transitions. Its semantics is defined in terms of RTL (Real-Time Logic <ref> [JM86] </ref> ), which is a logic especially amenable to reasoning about the absolute timing of events. A set of tools has been developed [CHLR93] for the specification and analysis of real-time systems within this framework. Modechart specifications are made up of modes and transitions.
Reference: [JPVO95a] <author> L.J. Jagadeesan, C. Puchol, and J.E. Von Olnhausen. </author> <title> A formal approach to reactive systems software: A telecommunications application in ESTEREL. </title> <booktitle> In Proc. Workshop on Industrial-strength Formal Specification Techniques, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: In particular, VFSM has been used in the design of many 5ESS software modules, including applications in call processing and signaling [FHOS95] . We have written an ESTEREL version of some alarms software in the 5ESS switch <ref> [JPVO95a] </ref> ; this feature was also written in Modechart. We have used LOTOS to specify various parts of telecommunications switching systems, including call processing and maintenance facilities [Ard94] . Many real-time switching protocols in 5ESS signaling and call processing applications have been written in SDL [Cha92] .
Reference: [JPVO95b] <author> L.J. Jagadeesan, C. Puchol, and J.E. Von Olnhausen. </author> <title> Safety property verification of ESTEREL programs and applications to telecommunications software. </title> <booktitle> In Proc. Conference in Computer Aided Verification, </booktitle> <month> July </month> <year> 1995. </year>
Reference-contexts: The Agel development environment [AGE89] for ESTEREL provides an editor, compiler, simulator, debugger, and verifier; we found the environment to be quite useful in writing and debugging our implementation. Furthermore, using the technique developed in <ref> [JPVO95b] </ref> , we automatically formally verified all the properties given in Section 2; this verification PROCESS State_WNN [...]: NOEXIT := RMW; State_PON [...] [] RMP; State_WNO [...] [] FCP; State_PNN [...] [] CSP; State_PNN [...] [] DGW; State_PDN [...] [] DGP; State_WND [...] ENDPROC was performed entirely in ESTEREL itself. 3.4
Reference: [LL94] <author> C. Lewerentz and T. Lindner. </author> <title> Case study 'production cell': A comparative study in formal specification and verification. </title> <type> Technical report, </type> <institution> Forschungszentrum In-formatik, </institution> <year> 1994. </year>
Reference-contexts: In work related to ours, Gerhart et al. [GCR94] have put forth a set of criteria for evaluating formal methods in general, and Lewerentz and Lindner <ref> [LL94] </ref> have collected several case studies of the application of formal methods for reactive systems to the specification of a common design problem.
Reference: [MS85] <author> K.E. Martersteck and A.E. Spencer. </author> <title> Introduction to the 5ESS(TM) switching system. </title> <journal> AT&T Technical Journal, </journal> <volume> 64(6 part </volume> 2):1305-1314, July-August 1985. 
Reference-contexts: The work described here was performed while the author was visiting AT&T Bell Laboratories. Reactive systems are ubiquitous in the software for AT&T's 5ESS telephone switching system <ref> [MS85] </ref> . For example, the software for establishing and tearing down telephone calls must correctly handle each of the possible sequences of events that can be entered by the caller and callee in a telephone call.
Reference: [MZ94] <author> P. A. Mataga and P. Zave. </author> <title> Formal specification of telephone features. </title> <editor> In J. P. Bowen and J. A. Hall, editors, </editor> <booktitle> Z User Workshop, Cambridge 1994, </booktitle> <pages> pages 29-50. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Many real-time switching protocols in 5ESS signaling and call processing applications have been written in SDL [Cha92] . We have written a Z specification of a set of 5ESS subscriber telephone features <ref> [MZ94] </ref> . Finally, we have written in C many features of the 5ESS switch. We emphasize that our evaluation of the languages and tools reflects our APS specifications as well as our previous experiences. Our findings appear in Figure 7.
Reference: [Spi92] <author> J.M. Spivey. </author> <title> The Z Notation: A Reference Manual. </title> <publisher> Prentice Hall International, </publisher> <address> 2nd edition, </address> <year> 1992. </year>
Reference-contexts: We selected for evaluation the specification methods Modechart [JM86] , VFSM [Wag92] , ESTEREL [BG92] , Basic LOTOS [ISO89] , Z <ref> [Spi92] </ref> , and SDL [IT93] , and the programming language C (the latter was chosen as a point of contrast, since it is the primary language in which the 5ESS software is implemented). <p> As part of simulation we generated traces of individual scenarios in Message Sequence Chart [IT92] form. These were useful in discussions with domain experts who reviewed the original project requirements. In fact, most of the properties were originally expressed as scenarios by these reviewers. 3.5 Z The Z notation <ref> [Spi92] </ref> combines abstract data modeling and a mathematical toolkit based on set theory and first-order predicate logic.
Reference: [Wag92] <author> F. Wagner. </author> <title> VFSM executable specification. </title> <booktitle> In Com-pEuro92, </booktitle> <year> 1992. </year>
Reference-contexts: For each of the specification methods studied, we attempted to specify the protocol requirements, construct an abstract algorithm in the method's modeling language, and then verify that the algorithm satisfies the re quirements. We selected for evaluation the specification methods Modechart [JM86] , VFSM <ref> [Wag92] </ref> , ESTEREL [BG92] , Basic LOTOS [ISO89] , Z [Spi92] , and SDL [IT93] , and the programming language C (the latter was chosen as a point of contrast, since it is the primary language in which the 5ESS software is implemented). <p> that the system cannot be in the Unsafe state at any point in the computation graph for any amount of time, while the other properties have been formally proved by using the Modechart verifier with other predicates, such as mode exclusion. 3.2 VFSM The Virtual Finite State Machine (VFSM) notation <ref> [Wag92] </ref> allows the control behavior of a software design to be specified in terms of states, virtual inputs and virtual outputs. The term virtual refers to the fact that VFSM inputs and outputs are abstract names local to a VFSM, rather than physical messages in the implementation.
Reference: [ZJ94] <author> P. Zave and M. Jackson. </author> <title> Where do operations come from? A multiparadigm specification technique, </title> <note> 1994. Draft available from the authors. Page 10 </note>
Reference-contexts: A loosely object-oriented style of specification due to Hall [Hal90] , in which much of the necessary Z can be macro-generated, was followed. In addition, an event semantics suggested by the work of Zave and Jackson <ref> [ZJ94] </ref> was assumed. Though built up from simpler pieces (see Figure 5), each event was described by a separate schema, with preconditions guarding against illegal operations, and postconditions specifying the outcomes. The structure provided by the conventions adopted allows a natural specification of the behavior.
References-found: 25

