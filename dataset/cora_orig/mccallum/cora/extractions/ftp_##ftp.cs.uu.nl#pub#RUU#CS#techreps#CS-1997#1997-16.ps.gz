URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1997/1997-16.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: frogier, frankb, wiebe, jjg@cs.ruu.nl  
Phone: tel. +31302531454  
Title: A language for Modular Information-passing Agents  
Author: Rogier M. van Eijk, Frank S. de Boer, Wiebe van der Hoek and John-Jules Ch. Meyer 
Address: P.O. Box 80.089, 3508 TB Utrecht, The Netherlands  
Affiliation: Universiteit Utrecht, Department of Computer Science  
Abstract: For multi-agent systems, as for any complex system, a thorough theoretical foundation is indispensable. Hence, agent-oriented languages used for descriptions and implementations of multi-agent systems should be logically grounded and accompanied with a clear semantics. As a hopefully fruitful starting point towards such semantically well-founded languages, we propose a language of Modular Information-passing Agents. This language is designed for systems of agents inhabiting an environment on which they have a limited view or expertise, and hence in order to increase their knowledge, communicate on each other's expertises. We consider the syntax of the language and subsequently develop a structural operational semantics via a transition system.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J.A. Bergstra and J.W. Klop. </author> <title> Process algebra for synchronous communication. </title> <journal> Information and Control, </journal> <volume> 60:109 137, </volume> <year> 1984. </year>
Reference-contexts: In our development of a system of Modular Information-passing Agents, being a stripped version of a multi-agent system, we try to incorporate as many useful concepts from existing concurrent programming languages like Concurrent Constraint Programming (CCP) [14], Communicating Sequential Processes (CSP) [9] and Algebra of Communicating Processes (ACP) <ref> [1] </ref> as possible. Whenever necessary we adapt them according to our purposes. We emphasize that our method contrasts with most of the current approaches, as we aim to develop a theoretically well-founded algebraic description of multi-agent systems.
Reference: 2. <editor> C. Beyssade, P. Enjalbert, and C. Lefevre. </editor> <booktitle> Cooperating logical agents. In Proceedings of IJCAI'95 Workshop (ATAL), volume 1037 of LNAI, </booktitle> <pages> pages 299314. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Alternative approaches to bridge the gap are those that start with a general, well-understood and implemented programming language and aim to accommodate it to suit descriptions of multi-agent systems. The language Concurrent METATEM [17], the language described in <ref> [2] </ref>, as well as our language of Modular 2 Information-passing Agents serve as examples of the latter. The former two of these treatments are based on executable temporal logic and higher order logic, respectively, whereas our framework is underpinned by existing, well-understood concurrent programming languages.
Reference: 3. <author> A. Bonner and M. Kifer. </author> <title> Concurrency and communication in transaction logic. </title> <booktitle> In Proceedings of the Joint International Conference and Symposium on Logic Programming, </booktitle> <pages> pages 142156, </pages> <address> Bonn, 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: For instance, it is not immediately clear what kind of knowledge bases should be assigned to compound agent systems. 6 Related work In addition to some connections alluded to, we will lightly touch upon the relation with some other affined approaches. First of all, Concurrent Transaction Logic <ref> [3] </ref> is a well-founded programming language designed for entities updating the state of a global store (i.e. a relational database, a knowledge base, a collection of communication buffers and so on). The language principally focuses on the interaction between the entities and the global database.
Reference: 4. <author> F. Brazier, B. Dunin-Keplicz, N. Jennings, and J. Treur. </author> <title> Formal specification of multi-agent systems: a real-world case. </title> <booktitle> In Proceedings of ICMAS-95, </booktitle> <pages> pages 2532. </pages> <publisher> MIT Press, </publisher> <year> 1995. </year> <month> 16 </month>
Reference-contexts: In future research, we will hence aim to develop a compositional description constituting such a denotational model. We end our discussion by giving an example, which is adapted from an example implemented in the DESIRE <ref> [4] </ref> framework. 4 Example of cooperating agents Three basic agents A 1 , A 2 and A 3 explore a 3-dimensional grid, which is constituted by the orthogonal base vectors x, y and z. <p> A lifting rule ensures that if some specified formula j holds in a sub-context, the associated formula j 0 holds in the encompassing context. A lowering rule establishes the converse. The DESIRE <ref> [4] </ref> framework used to design and specify interacting and reasoning components, also propagates modularity. It supports the modeling of modular components, which interact with each other via the transport of information along interconnecting links.
Reference: 5. <author> P. Gardenfors. </author> <title> Knowledge in flux : Modelling the dynamics of epistemic states. </title> <publisher> Bradford Books, MIT press, </publisher> <address> Cambridge, </address> <year> 1988. </year>
Reference-contexts: We stress that this store is the representation of the external world; it is used for observations in the world as well as for establishments of new facts in it. We initially restrict ourselves to a workspace showing monotonic-increasing behaviour, thereby avoiding the problems of theory revision <ref> [5] </ref>. In future research, we will examine the implications of dropping this assumption. The framework incorporates agent systems that maintain the workspace. These agent systems are compound; they are composed of smaller agent systems.
Reference: 6. <author> M. Gaspari. </author> <title> Modelling interactions in agent system. </title> <booktitle> In Proceedings of the 4th Congres of the Italian Association for Artificial Intelligence, </booktitle> <pages> pages 426438. </pages> <publisher> LNAI 992, </publisher> <year> 1995. </year>
Reference-contexts: Secondly, whereas our approach concentrates on constraint languages, Transaction Logic leaves the underpinning language unspecified. The modeling of communication among agents by means of interactions between actors is described in <ref> [6] </ref>. The approach incorporates the actor model, which is a framework that facilitates the expression of attitudes towards incoming messages.
Reference: 7. <author> F. Giunchiglia, L. Serafini, E. Giunchiglia, and M. Frixione. </author> <title> Non-omniscient belief as context-based reasoning. </title> <booktitle> In IJCAI-93, </booktitle> <pages> pages 548554, </pages> <year> 1993. </year>
Reference-contexts: The fact that the inhabited environment is left implicit additionally contrasts with our framework. A logical treatment of modular agent systems; called a Logic of Contexts is described in <ref> [7] </ref>. Giunchiglia et al. have developed a formalism in which agent systems are hierarchies of logical theories, called contexts, connected by lifting and lowering bridge rules. A lifting rule ensures that if some specified formula j holds in a sub-context, the associated formula j 0 holds in the encompassing context.
Reference: 8. <author> K.V. Hindriks, F.S. de Boer, W. van der Hoek, and J.-J.Ch. Meyer. </author> <title> Formal semantics for an abstract agent programming language. </title> <type> Technical report, </type> <institution> Universiteit Utrecht, Department of Computer Science, </institution> <year> 1997. </year>
Reference-contexts: Additionally, as statements govern the be-haviours of agents, we should aim to get a hold on the implicit knowledge present in these statements. Related to this topic are the incorporation of goal-directed behaviour, as comprehensively examined in <ref> [8] </ref>, and meta-knowledge, which constitute two essential characteristics of agent-oriented systems. Finally, an interesting aspect for future examination concerns the inheritance of knowledge from agents to complex agent systems.
Reference: 9. <author> C.A.R. Hoare. </author> <title> Communicating sequential processes. </title> <journal> Communications of the ACM, </journal> <volume> 21(8):666677, </volume> <year> 1978. </year>
Reference-contexts: In our development of a system of Modular Information-passing Agents, being a stripped version of a multi-agent system, we try to incorporate as many useful concepts from existing concurrent programming languages like Concurrent Constraint Programming (CCP) [14], Communicating Sequential Processes (CSP) <ref> [9] </ref> and Algebra of Communicating Processes (ACP) [1] as possible. Whenever necessary we adapt them according to our purposes. We emphasize that our method contrasts with most of the current approaches, as we aim to develop a theoretically well-founded algebraic description of multi-agent systems.
Reference: 10. <author> Th. Huibers. </author> <title> An Axiomatic Theory for Information Retrieval. </title> <type> PhD thesis, </type> <institution> Universiteit Utrecht, </institution> <year> 1996. </year>
Reference-contexts: Example 7. (Information Retrieval) Information Retrieval techniques <ref> [10] </ref> aim to support, in very large collections of data, the search for documents that satisfy some relevance criteria. One of the criteria is called aboutness, which is used to evaluate documents on their bearing on some particular piece of information.
Reference: 11. <author> Y. Lesperance, H.J. Levesque, F. Lin, D. Marcu, R. Reiter, and R.B. Scherl. </author> <title> Foundations of a logical approach to agent programming. </title> <booktitle> In Proceedings of IJCAI'95 Workshop (ATAL), volume 1037 of LNAI, </booktitle> <pages> pages 331346. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: At the other end, specification languages for instance based on modal logics [16] or on the situation calculus <ref> [11] </ref> are located, which however cannot straightforwardly be implemented. As the development of agent-oriented languages that bridge the gap between these two extremes constitutes one of the current challenges, several alternative languages have been proposed. The development of the language CONGOLOG [11], which objective is the design of an executable version <p> on modal logics [16] or on the situation calculus <ref> [11] </ref> are located, which however cannot straightforwardly be implemented. As the development of agent-oriented languages that bridge the gap between these two extremes constitutes one of the current challenges, several alternative languages have been proposed. The development of the language CONGOLOG [11], which objective is the design of an executable version of an agent-oriented specification language, represents one way of decreasing the discrepancy.
Reference: 12. <author> R. Milner. </author> <title> A Calculus of Communicating Systems, </title> <booktitle> volume 92 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: The alternative label occurring in transitions is the label t from CCS <ref> [12] </ref> representing internal, non-communicative computation steps. As agent systems are defined inductively, their transitions are defined in terms of the transitions of their components.
Reference: 13. <author> G. Plotkin. </author> <title> A structured approach to operational semantics. </title> <type> Technical Report DAIMI FN-19, </type> <institution> Computer Science Department, Aarhus University, </institution> <year> 1981. </year>
Reference-contexts: The encapsulation operator d c when applied to the agent system A, defines the channel c to be local in A. 3 Transitions and operational semantics Computation steps of agent systems are represented by transitions <ref> [13] </ref>, which take systems from one configuration to subsequent ones. A configuration of an agent system A in a workspace s is denoted as hA; si.
Reference: 14. <author> V.A. Saraswat and M. Rinard. </author> <title> Concurrent constraint programming. </title> <booktitle> In Proceedings of Seventeenth ACM Symposium on Principles of Programming Languages, </booktitle> <year> 1990. </year>
Reference-contexts: In our development of a system of Modular Information-passing Agents, being a stripped version of a multi-agent system, we try to incorporate as many useful concepts from existing concurrent programming languages like Concurrent Constraint Programming (CCP) <ref> [14] </ref>, Communicating Sequential Processes (CSP) [9] and Algebra of Communicating Processes (ACP) [1] as possible. Whenever necessary we adapt them according to our purposes. We emphasize that our method contrasts with most of the current approaches, as we aim to develop a theoretically well-founded algebraic description of multi-agent systems.
Reference: 15. <author> Y. Shoham. </author> <title> Agent-oriented programming. </title> <journal> Artificial Intelligence, </journal> <volume> 60:5192, </volume> <year> 1993. </year>
Reference-contexts: The framework in perspective. Before we examine the framework of MI-Agents in greater detail, we will try to situate its position. We imagine a wide spectrum of agent-oriented languages; at one end of the spectrum languages like AGENT-0 <ref> [15] </ref> reside, which are implemented programming languages that however suffer from the lack of both a firm logical foundation and a clear semantics. At the other end, specification languages for instance based on modal logics [16] or on the situation calculus [11] are located, which however cannot straightforwardly be implemented.
Reference: 16. <author> B. van Linder, W. van der Hoek, and J.-J.Ch. Meyer. </author> <title> Communicating rational agents. </title> <booktitle> In KI-94: Advances in AI, volume 861 of LNCS, pages 202213. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: At the other end, specification languages for instance based on modal logics <ref> [16] </ref> or on the situation calculus [11] are located, which however cannot straightforwardly be implemented. As the development of agent-oriented languages that bridge the gap between these two extremes constitutes one of the current challenges, several alternative languages have been proposed. <p> For instance, we aim, given the operational semantics, to develop an equivalent denotational semantics. As such a denotational model provides a basis for the specification and verification of programs, we might subsequently investigate the link with logical specification languages (for instance, the one described in <ref> [16] </ref>). Alternatively, seen in the light of agent-oriented languages, the development of the framework of Modular Information-passing Agents is yet still in a preliminary phase. Many aspects of multi-agent systems need to be passed in review.
Reference: 17. <author> M. Wooldridge. </author> <title> A knowledge-theoretic semantics for concurrent METATEM. </title> <booktitle> In Proceedings of ECAI'96 Workshop (ATAL), volume 1193 of LNAI, </booktitle> <pages> pages 357374. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Alternative approaches to bridge the gap are those that start with a general, well-understood and implemented programming language and aim to accommodate it to suit descriptions of multi-agent systems. The language Concurrent METATEM <ref> [17] </ref>, the language described in [2], as well as our language of Modular 2 Information-passing Agents serve as examples of the latter. The former two of these treatments are based on executable temporal logic and higher order logic, respectively, whereas our framework is underpinned by existing, well-understood concurrent programming languages.
Reference: 18. <author> M. Wooldridge and N. Jennings. </author> <title> Intelligent agents: </title> <journal> theory and practice. The Knowledge Engineering Review, </journal> <volume> 10(2):115152, </volume> <year> 1995. </year>
Reference-contexts: Moreover, the meaning of a complex program can be understood by combining the meanings of its constituents. In this way a methodology for the top-down design of agent-oriented programs is obtained together with a mechanism for the specification and verification of these programs. Multi-agent systems. We view multi-agent systems <ref> [18] </ref> as systems composed of several interacting agents inhabiting an external environment. These agents are autonomous entities that are able to observe the world they inhabit and are capable of establishing changes in it. An additional interaction mechanism is provided by their ability to communicate with each other.
References-found: 18

