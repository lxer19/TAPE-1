URL: http://www.cs.kuleuven.ac.be/~marcd/papers/krnmr98.final.ps
Refering-URL: http://www.uni-koblenz.de/~dix/NMR7/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: email: marcd@cs.kuleuven.ac.be  
Phone: Phone: +32 16 327544 Fax: +32 16 327996  
Title: The Well-founded Semantics Is the Principle of Inductive Definition  
Author: Marc Denecker 
Address: Celestijnenlaan 200A, B-3001 Heverlee, Belgium.  
Affiliation: Department of Computer Science, K.U.Leuven,  
Abstract: Existing formalisations of (transfinite) inductive definitions in constructive mathematics are reviewed and strong correspondences with LP under least model and perfect model semantics become apparent. I point to fundamental restrictions of these existing formalisa-tions and argue that the well-founded semantics (wfs) overcomes these problems and hence, provides a superior formalisation of the principle of inductive definition. The contribution of this study for LP is that it (re-)introduces the knowledge theoretic interpretation of LP as a logic for representing definitional knowledge. I point to fundamental differences between this knowledge theoretic interpretation of LP and the more commonly known interpretations of LP as default theories or auto-epistemic theories. The relevance is that differences in knowledge theoretic interpretation have strong impact on knowledge representation methodology and on extensions of the LP formalism, for example for representing uncertainty. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Abiteboul, S.; Hull, R.; and Vianu, V. </author> <year> 1995. </year> <title> Foundations of Databases. </title> <publisher> Addusin-Wesley Publishing Company. </publisher>
Reference-contexts: Important work in this area includes (Feferman 1970; Martin-Lof 1971; Moschovakis 1974; Aczel 1977; Buchholz, Feferman, & Sieg 1981). An offspring of this research is fixpoint logic, currently used in databases <ref> (Abiteboul, Hull, & Vianu 1995) </ref>. Below is an overview of ideas proposed in the area of Inductive, Iterated Inductive Definitions (IID) and fixpoint logics. <p> However, the operator T i F [X;P ] (I) = I [ T F [X;P ] (I) is increasing (though not monotonic) and therefore a fixpoint can be constructed. This idea has been used in fixpoint logic with inflationary semantics <ref> (Abiteboul, Hull, & Vianu 1995) </ref>. Inflationary fixpoint logic is known to be expressive; however, it is not a natural formalisation of inductive definitions over a well-founded set, and therefore, this extension is not relevant in the context of this paper.
Reference: <author> Aczel, P. </author> <year> 1977. </year> <title> An Introduction to Inductive Definitions. </title> <editor> In Barwise, J., ed., </editor> <booktitle> Handbook of Mathematical Logic. </booktitle> <publisher> North-Holland Publishing Company. </publisher> <pages> 739-782. </pages>
Reference-contexts: In fixpoint logic, the relation p would be denoted F [X; ] (here p is replaced by a predicate variable ). <ref> (Aczel 1977) </ref> studies inductive definitions in a abstract representation with an obvious correspondence with definite logic programs. A definition on a domain D of propositional symbols is represented as a possibly infinite set D of rules p B with p 2 D; B D 4 . (Aczel 1977) gives an overview <p> a predicate variable ). <ref> (Aczel 1977) </ref> studies inductive definitions in a abstract representation with an obvious correspondence with definite logic programs. A definition on a domain D of propositional symbols is represented as a possibly infinite set D of rules p B with p 2 D; B D 4 . (Aczel 1977) gives an overview of three equivalent mathematical principles for describing the semantics of a (Positive) inductive definition. <p> In the presentation of <ref> (Aczel 1977) </ref>, inductive definitions are dually defined as monotonic T P -like operators. This is the common way in fix point logic (hence the name). * The model can be expressed also as the interpretation in which each atom has a proof tree. <p> LP, I present it here for a slightly extended version of the formalism of <ref> (Aczel 1977) </ref>. Let be given a symbol domain D, including a subset D o D which includes the truth values t; f, an interpretation M interpreting the symbols of D o such that M (t) = t; M (f) = f. <p> Iterated Inductive Definitions The logics of Iterated Inductive Definitions are or can be seen as attempts to formalise the mathematical principle of definition by (transfinite) induction on a well-founded order. Iterated Inductive definitions were first introduced in (Kreisel 1963) and later studied in (Feferman 1970) and (Martin-Lof 1971). <ref> (Aczel 1977) </ref> formulates the intuition of Iterated Inductive Definitions in the following way. Given a mathematical structure M fixing the interpretation of the interpreted predicates and function symbols, a positive inductive definition D prescribes the interpretation of the defined predicate (s). <p> Once the interpretation of the defined symbols p is fixed, M can be extended with these in terpretations, yielding a new interpretation M D 5 Allowing positive or negative open literals is an extension to the formalism of <ref> (Aczel 1977) </ref>. It does not introduce any complexity because the interpretation of these literals is given. This extension will facilitate the leap to inductive definitions with recursion over negation. top of this structure, again new predicates may be defined in the similar way as before. <p> The definition of this new predicates may depend negatively on the defined predicates p as these are interpreted in M D . This principle can be iterated in an arbitrary, even transfinite sequence of positive inductive definitions. In <ref> (Aczel 1977) </ref>, the abstract definition logic defined there is not explicitly extended with this idea, but given the above intuition, the extension with negation is straightforward. <p> Apparently this work stayed largely unnoticed, perhaps because, like the semantics in (Martin-Lof 1971), it is based on sequent calculus, which to some extend increases the mathematical complexity and obscures the simple intuitions underlying this semantics. Though the intuition of IID's as formulated in <ref> (Aczel 1977) </ref> is straightforward, it is not easy to see how this idea is implemented in IID logics such as those of (Fe-ferman 1970), (Buchholz, Feferman, & Sieg 1981) and also in (Martin-Lof 1971). The reason for this seems as follows. <p> &gt; &gt; : 9M:[N = M + 1 ^ 2 M ^ X = N ^ :h (M; M )]_ N = 0 ^ X = 0 ^ 9M:[ 2 M ^ h (M; M ) N = 1 ^ X = 1 ^ :h (0; 0) Inflationary Fixed-point Logic <ref> (Aczel 1977) </ref> proposes another extension of positive inductive definitions with negation. With an arbitrary formula F [X; P ] with negative occurrences of P allowed, the resulting T P -like operator T F [X;P ] is not monotonic and may not have a least fixpoint. <p> Note that in this view, u plays a similar role as null-values in databases: just as a null value, u is not a real truth value, it is a place holder for an (as yet) undefined truth value. <ref> (Aczel 1977) </ref> with negation; at the same time, it is an infinitary version of the propositional LP-formalism. Given is a domain D of propositional symbols.
Reference: <author> Apt, K.; Blair, H.; and Walker, A. </author> <year> 1988. </year> <title> Towards a theory of Declarative Knowledge. </title> <editor> In Minker, J., ed., </editor> <booktitle> Foundations of Deductive Databases and Logic Programming. </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Buchholz, W.; Feferman, S.; and Sieg, W. P. W. </author> <year> 1981. </year> <title> Iterated Inductive Definitions and Subsystems of Analysis: Recent Proof-Theoretical Studies. </title> <note> Springer-Verlag, Lecture Notes in Mathematics 897. </note>
Reference-contexts: Though the intuition of IID's as formulated in (Aczel 1977) is straightforward, it is not easy to see how this idea is implemented in IID logics such as those of (Fe-ferman 1970), <ref> (Buchholz, Feferman, & Sieg 1981) </ref> and also in (Martin-Lof 1971). The reason for this seems as follows. The goal of this research was to investigate theoretical expressivity of transfinite forms of IID's. As explained in (Buchholz, Feferman, & Sieg 1981), a definability study makes only sense in a finitely represented logic, <p> see how this idea is implemented in IID logics such as those of (Fe-ferman 1970), <ref> (Buchholz, Feferman, & Sieg 1981) </ref> and also in (Martin-Lof 1971). The reason for this seems as follows. The goal of this research was to investigate theoretical expressivity of transfinite forms of IID's. As explained in (Buchholz, Feferman, & Sieg 1981), a definability study makes only sense in a finitely represented logic, while transfinite IID's in the abstract setting above are per definition infinite objects. (Fefer-man 1970) investigates IID's encoded in an IID-form, a single FOL formula of the form F [N; X; P ], and expresses
Reference: <author> Clark, K. </author> <year> 1978. </year> <title> Negation as failure. </title> <editor> In Gallaire, H., and Minker, J., eds., </editor> <title> Logic and Databases. </title> <publisher> Plenum Press. </publisher> <pages> 293-322. </pages>
Reference-contexts: Introduction With the completion semantics <ref> (Clark 1978) </ref>, Clark aimed at formalising the meaning of a logic program as a set of definitions. To that aim, he maps a logic program to a set of First Order Logic (FOL) equivalences.
Reference: <author> Denecker, M., and De Schreye, D. </author> <year> 1992. </year> <title> Justification semantics: a unifying framework for the semantics of logic programs. </title> <type> Technical Report 157, </type> <institution> Department of Computer Science, K.U.Leuven. </institution>
Reference-contexts: This is the common way in fix point logic (hence the name). * The model can be expressed also as the interpretation in which each atom has a proof tree. Also this formalisation has been used in LP in <ref> (Denecker & De Schreye 1992) </ref>. Because it is less commonly used in 4 Definitions represented in the other style can be represented in this abstract way.
Reference: <author> Denecker, M., and De Schreye, D. </author> <year> 1997. </year> <title> SLDNFA: an abductive procedure for abductive logic programs. </title> <journal> Journal of Logic Programming 34(2) </journal> <pages> 111-167. </pages>
Reference-contexts: This recipe defines new instances of the relation in terms of the presence (and sometimes the absence) of other tuples of the relation. A broad class of human knowl-edges in many areas of human expertise, ranging from common sense knowledge situations to mathematics, is of constructive nature. In <ref> (Van Belleghem, Denecker, & Theseider Dupre 1997) </ref>, this is illustrated with a study of the ramification problem. We argue there that causality information is an example of constructive information. <p> In (Denecker 1995), this idea was elaborated in an extension of LP, called Open Logic Programming (OLP). I argued there that OLP provides a knowledge theoretic interpretation of Abductive Logic Programming as a definition logic and that abductive solvers (e.g. SLDNFA <ref> (Denecker & De Schreye 1997) </ref>) designed for this formalism can be seen as special purpose reasoners on definitions for abduction and deduction. A problem of this work is that it is based on comple-tion semantics; completion is not a good formalisation of induction.
Reference: <author> Denecker, M. </author> <year> 1995. </year> <title> A Terminological Interpretation of (Abductive) Logic Programming. </title> <editor> In Marek, V.; Nerode, A.; and Truszczynski, M., eds., </editor> <booktitle> International Conference on Logic Programming and Non-monotonic Reasoning, </booktitle> <pages> 15-29. </pages> <booktitle> Springer, Lecture notes in Artificial Intelligence 928. </booktitle>
Reference-contexts: In the definition view on standard LP, the problem is because all predicates are defined, have a (possibly empty) definition. Hence, the natural idea is to extend the logic with open predicates which have arbitrary interpretation. In <ref> (Denecker 1995) </ref>, this idea was elaborated in an extension of LP, called Open Logic Programming (OLP). I argued there that OLP provides a knowledge theoretic interpretation of Abductive Logic Programming as a definition logic and that abductive solvers (e.g. <p> The knowledge theoretic interpretation of LP as inductive definitions gives also insight on the relationship with a class of logics outside the area of NMR: definition logics. This class includes fixpoint logics and description logics. In <ref> (Van Belleghem, Denecker, & De Schreye 1995) </ref>, Van Belleghem et al. showed a strong correspondence between OLP-FOL and description logics. To large extend, description logic can be considered as a non-recursive subformalism of OLP-FOL.
Reference: <author> Feferman, S. </author> <year> 1970. </year> <title> Formal theories for transfinite iterations of generalised inductive definitions and some subsystems of analysis. </title> <editor> In Kino, A.; Myhill, J.; and Vesley, R., eds., </editor> <title> Intuitionism and Proof theory. </title> <publisher> North Holland. </publisher> <pages> 303-326. </pages>
Reference-contexts: Positive Inductive Definitions Positive Inductive Definitions have been formalised in various ways. In the style of <ref> (Feferman 1970) </ref>, an inductive definition on a given interpretation M is represented as a formula: p (X) F [X; p] where F [X; p] is a First Order Logic (FOL) formula with only positive occurrences of the defined symbol p but arbitrary occurrences of symbols interpreted in M . <p> They are equivalent with the way the least model semantics of definite logic programs can be defined (van Emden & Kowalski 1976). * The model can be defined as the least model of the implications. E.g., in <ref> (Feferman 1970) </ref>, this minimal model semantics is expressed through a circumscription-like axiom (expressing that p must be the least predicate rather than a minimal one). * The model can be expressed constructively as the least fixpoint of a T P -like operator associated with the definition. <p> Iterated Inductive Definitions The logics of Iterated Inductive Definitions are or can be seen as attempts to formalise the mathematical principle of definition by (transfinite) induction on a well-founded order. Iterated Inductive definitions were first introduced in (Kreisel 1963) and later studied in <ref> (Feferman 1970) </ref> and (Martin-Lof 1971). (Aczel 1977) formulates the intuition of Iterated Inductive Definitions in the following way. Given a mathematical structure M fixing the interpretation of the interpreted predicates and function symbols, a positive inductive definition D prescribes the interpretation of the defined predicate (s). <p> The result is an infinitary formula F [N; X; P ]. Here, N ranges over the ordinals ff &lt; ff D , X over atoms 6 In <ref> (Feferman 1970) </ref>, literals h (ff q ; q) are replaced by open formulas h (ff q ; q) ^ ff q &lt; N . <p> After one application of the inflationary fixpoint operator, the unintended fixpoint feven (n)jn 2 INg is obtained. A critique on Iterated Inductive Definitions The stratified IID formalisms provide a correct treatment of inductive definitions with negation. The IID-forms as defined in e.g. <ref> (Feferman 1970) </ref> was not intended for use for Knowledge Representation and is absolutely unsuitable for such purpose. But any strat ified formalism for inductive definitions with negation will pose certain fundamental problems. (1) A stratification of a definition does not provide any information about the defined relations.
Reference: <author> Fitting, M. </author> <year> 1985. </year> <title> A Kripke-Kleene Semantics for Logic Programs. </title> <journal> Journal of Logic Programming 2(4) </journal> <pages> 295-312. </pages>
Reference-contexts: The Positive Induction Operator is a monotonic operator w.r.t. the precision order p , the point-wise extension of u p f; u p t. Monotonic operators w.r.t. p have a least fixpoint <ref> (Fitting 1985) </ref>. Hence, each interpretation M of the non-defined symbols can be extended to a unique least fixpoint PI D " (M ). Definition 2 PI D " (M ) is the model M D The structural resemblance between positive induction in PID's and in PI D is apparent.
Reference: <author> Gelfond, M., and Lifschitz, V. </author> <year> 1988. </year> <title> The stable model semantics for logic programming. </title> <booktitle> In Proc. of the International Joint Conference and Symposium on Logic Programming, </booktitle> <pages> 1070-1080. </pages> <publisher> IEEE. </publisher>
Reference-contexts: Motivated by the research in Nonmonotonic Reasoning, logic programming is currently often seen as a default logic or auto-epistemic logic. In (Gelfond 1987), Gelfond proposes a semantics for stratified logic programs based on an auto-epistemic interpretation of the formalism. In <ref> (Gelfond & Lifschitz 1988) </ref>, Gelfond and Lifschitz motivate the stable semantics for logic programs from the perspective of logic programs as default and auto-epistemic theories. <p> To compare these readings, consider the program P 0 with unique rule: dead not alive P 0 is propositional and hierarchical; all common semantics of LP (completion / perfect (Apt, Blair, & Walker 1988; Przymusinski 1988) / stable <ref> (Gelfond & Lifschitz 1988) </ref> / wfs (Van Gelder, Ross, & Schlipf 1991)) agree; for the above example, the unique model is fdeadg.
Reference: <author> Gelfond, M., and Lifschitz, V. </author> <year> 1990. </year> <title> Logic Programs with Classical Negation. </title> <editor> In Warren, D., and Szeredi, P., eds., </editor> <booktitle> Proc. of the 7th International Conference on Logic Programming 90, </booktitle> <volume> 579. </volume> <publisher> MIT press. </publisher>
Reference-contexts: A simple illustration of the impact of the linguistic interpretation on knowledge methodology is as follows. The definition that dead means not alive, is naturally expressed in LP under the definition reading by the singleton definition: fdead :aliveg On the other hand, in Extended Logic Programming <ref> (Gelfond & Lifschitz 1990) </ref>, which is based on the default and AEL view, a correct representation would be: dead :alive :dead alive A knowledge theoretic study is also relevant for the design or extension of a logic. This is also well-illustrated in the case of LP. <p> This is also well-illustrated in the case of LP. With respect to knowledge representation, a major problem of LP under the default or auto-epistemic view is that no definite negative information can be represented. This led Gelfond and Lifschitz in <ref> (Gelfond & Lifschitz 1990) </ref> to extend the formalism and re-introduce a form of classical negation in Extended Logic Programming. In the definition view, a logic program entails plenty of definite negative information.
Reference: <author> Gelfond, M. </author> <year> 1987. </year> <title> On Stratified Autoepistemic Theories. </title> <booktitle> In Proc. of AAAI87, </booktitle> <pages> 207-211. </pages> <publisher> Morgan Kaufman. </publisher>
Reference-contexts: To that aim, he maps a logic program to a set of First Order Logic (FOL) equivalences. Motivated by the research in Nonmonotonic Reasoning, logic programming is currently often seen as a default logic or auto-epistemic logic. In <ref> (Gelfond 1987) </ref>, Gelfond proposes a semantics for stratified logic programs based on an auto-epistemic interpretation of the formalism. In (Gelfond & Lifschitz 1988), Gelfond and Lifschitz motivate the stable semantics for logic programs from the perspective of logic programs as default and auto-epistemic theories.
Reference: <author> Hagiya, M., and Sakurai, T. </author> <year> 1984. </year> <title> Foundation of Logic Programming Based on Inductive Definition. </title> <booktitle> New Generation Computing 2 </booktitle> <pages> 59-77. </pages>
Reference-contexts: There is an obvious correspondence between Iterated Inductive Definitions (IID's) and stratified logic programs under perfect model semantics (Apt, Blair, & Walker 1988; Przymusinska & Przymusinski 1988; Przymusinski 1988). Already in 84, <ref> (Hagiya & Saku-rai 1984) </ref> defines a semantics for stratified logic programs based on the Iterated Inductive Definition (IID) logic defined in (Martin-Lof 1971). To my knowledge, this was really the first time that the perfect model semantics for stratified logic programs was defined.
Reference: <author> Kreisel, G. </author> <year> 1963. </year> <title> Generalized inductive definitions. </title> <type> Technical report, </type> <institution> Stanford University. </institution>
Reference-contexts: The first attempt to formalise such a principle was in the context of Iterated Inductive Definitions. The study of inductive definitions in mathematics has started with Post (Post 1943), Spector (Spector 1961) and Kreisel <ref> (Kreisel 1963) </ref>. Important work in this area includes (Feferman 1970; Martin-Lof 1971; Moschovakis 1974; Aczel 1977; Buchholz, Feferman, & Sieg 1981). An offspring of this research is fixpoint logic, currently used in databases (Abiteboul, Hull, & Vianu 1995). <p> Iterated Inductive Definitions The logics of Iterated Inductive Definitions are or can be seen as attempts to formalise the mathematical principle of definition by (transfinite) induction on a well-founded order. Iterated Inductive definitions were first introduced in <ref> (Kreisel 1963) </ref> and later studied in (Feferman 1970) and (Martin-Lof 1971). (Aczel 1977) formulates the intuition of Iterated Inductive Definitions in the following way.
Reference: <author> Martin-Lof, P. </author> <year> 1971. </year> <title> Hauptsatz for the intuitionistic theory of iterated inductive definitions. </title> <editor> In Fenstad, J., ed., </editor> <booktitle> Proceedings of the Second Scandinavian Logic Symposium, </booktitle> <pages> 179-216. </pages>
Reference: <author> Moschovakis, Y. N. </author> <year> 1974. </year> <title> Elementary Induction on Abstract Structures. </title> <publisher> North-Holland Publishing Company, </publisher> <address> Amsterdam- New York. </address>
Reference: <author> Post, E. </author> <year> 1943. </year> <title> Formal reduction of the general combinatorial decision problem. </title> <journal> American Journal of Mathematics 65 </journal> <pages> 197-215. </pages>
Reference-contexts: The first attempt to formalise such a principle was in the context of Iterated Inductive Definitions. The study of inductive definitions in mathematics has started with Post <ref> (Post 1943) </ref>, Spector (Spector 1961) and Kreisel (Kreisel 1963). Important work in this area includes (Feferman 1970; Martin-Lof 1971; Moschovakis 1974; Aczel 1977; Buchholz, Feferman, & Sieg 1981). An offspring of this research is fixpoint logic, currently used in databases (Abiteboul, Hull, & Vianu 1995).
Reference: <author> Przymusinska, H., and Przymusinski, T. </author> <year> 1988. </year> <title> Weakly perfect model semantics for logic programs. </title>
Reference: <editor> In Kowalski, R., and Bowen, K., eds., </editor> <booktitle> Proc. of the fifth international conference and symposium on logic programming, </booktitle> <pages> 1106-1120. </pages> <publisher> the MIT press. </publisher>
Reference: <author> Przymusinski, T. </author> <year> 1988. </year> <title> On the semantics of Stratified Databases. </title> <editor> In Minker, J., ed., </editor> <booktitle> Foundations of Deductive Databases and Logic Programming. </booktitle> <publisher> Mor--gan Kaufman. </publisher>
Reference: <author> Przymusinski, T. </author> <year> 1990. </year> <title> Well founded semantics coincides with three valued Stable Models. </title> <note> Fundamenta Informaticae 13 445-463. </note>
Reference-contexts: There are some important properties. The first relates this semantics to WFS semantics of logic programs. Proposition 1 PI D and the 3-valued stable model operator <ref> (Przymusinski 1990) </ref> are identical. The well founded model of D is the model M D Second, this semantics provides a conservative extension of the IID-style semantics, as the WFS is known to generalise least model semantics and perfect model semantics of stratified logic programs.
Reference: <author> Spector, C. </author> <year> 1961. </year> <title> Inductively defined sets of natural numbers. </title> <booktitle> In Infinitistic Methods (Proc. 1959 Symposium on Foundation of Mathematis in Warsaw), </booktitle> <pages> 97-102. </pages> <publisher> Pergamon Press, Oxford. </publisher>
Reference-contexts: The first attempt to formalise such a principle was in the context of Iterated Inductive Definitions. The study of inductive definitions in mathematics has started with Post (Post 1943), Spector <ref> (Spector 1961) </ref> and Kreisel (Kreisel 1963). Important work in this area includes (Feferman 1970; Martin-Lof 1971; Moschovakis 1974; Aczel 1977; Buchholz, Feferman, & Sieg 1981). An offspring of this research is fixpoint logic, currently used in databases (Abiteboul, Hull, & Vianu 1995).
Reference: <author> Van Belleghem, K.; Denecker, M.; and De Schreye, D. </author> <year> 1995. </year> <title> A strong correspondence between concept languages and open logic programming. </title> <type> Draft, </type> <institution> K.U.Leuven. </institution>
Reference-contexts: The knowledge theoretic interpretation of LP as inductive definitions gives also insight on the relationship with a class of logics outside the area of NMR: definition logics. This class includes fixpoint logics and description logics. In <ref> (Van Belleghem, Denecker, & De Schreye 1995) </ref>, Van Belleghem et al. showed a strong correspondence between OLP-FOL and description logics. To large extend, description logic can be considered as a non-recursive subformalism of OLP-FOL.
Reference: <author> Van Belleghem, K.; Denecker, M.; and Theseider Dupre, D. </author> <year> 1997. </year> <title> Dependencies and ramifications in an event-based language. </title> <booktitle> In Proc. of the Ninth Dutch Artificial Intelligence Conference, </booktitle> <year> 1997. </year> <editor> van Emden, M., and Kowalski, R. </editor> <year> 1976. </year> <title> The semantics of Predicate Logic as a Programming Language. </title> <journal> Journal of the ACM 4(4) </journal> <pages> 733-742. </pages>
Reference-contexts: This recipe defines new instances of the relation in terms of the presence (and sometimes the absence) of other tuples of the relation. A broad class of human knowl-edges in many areas of human expertise, ranging from common sense knowledge situations to mathematics, is of constructive nature. In <ref> (Van Belleghem, Denecker, & Theseider Dupre 1997) </ref>, this is illustrated with a study of the ramification problem. We argue there that causality information is an example of constructive information.
Reference: <author> Van Gelder, A.; Ross, K.; and Schlipf, J. </author> <year> 1991. </year> <title> The Well-Founded Semantics for General Logic Programs. </title> <journal> Journal of the ACM 38(3) </journal> <pages> 620-650. </pages>
Reference-contexts: To compare these readings, consider the program P 0 with unique rule: dead not alive P 0 is propositional and hierarchical; all common semantics of LP (completion / perfect (Apt, Blair, & Walker 1988; Przymusinski 1988) / stable (Gelfond & Lifschitz 1988) / wfs <ref> (Van Gelder, Ross, & Schlipf 1991) </ref>) agree; for the above example, the unique model is fdeadg. <p> The need of an explicit stratification is unnecessary and unnatural. WFS: An improved Principle of Inductive Definition In this section, we argue that the mathematics of (a variant of) the well-founded semantics of logic programming <ref> (Van Gelder, Ross, & Schlipf 1991) </ref> provides an improved formalisation of the principle of inductive definition.
References-found: 26

