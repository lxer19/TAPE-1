URL: http://www.cs.wustl.edu/~schmidt/pattern-exp-wucs-97-34.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/resume.html
Root-URL: http://www.cs.wustl.edu
Email: (prechelt|unger@ira.uka.de, schmidt@cs.wustl.edu)  
Title: Replication of the first controlled experiment on the usefulness of design patterns: Detailed description and evaluation  
Author: Lutz Prechelt, Barbara Unger, Douglas C. Schmidt 
Address: St. Louis, MO 63130-4899  
Affiliation: Department of Computer Science Washington University,  
Abstract: Technical Report wucs-97-34 December 2, 1997 http://www.cs.wustl.edu/cs/techreports/1997/ Abstract Advocates of software design patterns claim that using design patterns improves communication between software developers. The controlled experiment that we describe in this report tests the hypotheses that software maintainers of well-structured, well-documented software containing design patterns can make changes (1) faster and (2) with less errors if the use of patterns is explicitly documented in the software. The experiment was performed with 22 participants of a university course on C ++ and design patterns; it is similar to a previous experiment performed in Karlsruhe. For one of the two experiment tasks the experiment finds that both hypotheses appear to be true. For the other task the results are inconclusive, presumably because the task was too difficult for the given experience level of the subjects. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Beck, J.O. Coplien, R. Crocker, L. Dominick, G. Meszaros, F. Paulisch, and J. Vlissides. </author> <title> Industrial experience with design patterns. </title> <booktitle> In 18th Intl. Conf. on Software Engineering, </booktitle> <pages> pages 103114, </pages> <address> Berlin, March 1996. </address> <publisher> IEEE CS press. </publisher>
Reference-contexts: A documentation format was developed and today a design pattern is a packaged description of a common software design problem, its context, appropriate terminology, one or several solutions, and their advantages, constraints, and other properties. According to practitioners <ref> [1, 6] </ref>, there are several advantages of design patterns: * Less experienced designers can produce better designs with patterns. * Design patterns encourage recording and reusing best practices even for experienced designers. * Design patterns can improve communication, both between designers and from designers to maintainers, by defining a common design <p> As often occurs in software engineering, the activities related to patterns are built on subjective beliefs, rather than empirically validated knowledge, that the developments are useful. Currently, these beliefs are grounded in intuitive judgement or anecdotal evidence reported by practitioners from the pattern community <ref> [1] </ref>. We believe that systematic tests of the purported advantages of patterns should be conducted to understand the mechanisms: e.g., whether, why, when, and to what extent these advantages exist. Such tests will also help avoid expensive developments in useless or less fruitful directions. <p> The only other reports available are experience reports and anecdotal evidence from researchers and practioners in the design pattern community <ref> [1] </ref>. 1 measured by the correctness of the solution and the time taken for constructing it. Washington University St.
Reference: [2] <author> Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, and Michael Stal. </author> <title> Pattern-Oriented Software Architecture A System of Patterns. </title> <publisher> John Wiley and Sons, </publisher> <address> Chichester, UK, </address> <year> 1996. </year>
Reference-contexts: other directions: Groups of patterns are presented as so-called pattern languages, pattern taxonomies are suggested, patterns on higher levels of abstraction (architectural patterns) or lower levels of abstraction (idioms) are collected, formalizations are sought, tools are built for discovering new patterns or for recovering known patterns from existing software etc. <ref> [2] </ref>. As often occurs in software engineering, the activities related to patterns are built on subjective beliefs, rather than empirically validated knowledge, that the developments are useful. Currently, these beliefs are grounded in intuitive judgement or anecdotal evidence reported by practitioners from the pattern community [1].
Reference: [3] <author> Larry B. Christensen. </author> <title> Experimental Methodology. </title> <publisher> Allyn and Bacon, </publisher> <address> Needham Heights, MA, 6th edition, </address> <year> 1994. </year>
Reference-contexts: We balanced across the subjects the order of the two programs, the order of having and not having PD, and the combination of both, i.e., we used a counterbalanced experiment design <ref> [3] </ref>; see Table 2.1. <p> The counter-balancing control is only partial for the following reason: While the experiment itself was counter-balanced, the data analysis and result interpretation partly ignores the results for 2 Definition from <ref> [3] </ref>: Internal validity refers to the extent to which we can accurately state that the independent variable produced the observed effect. Washington University St. Louis, Department of Computer Science 2.8 External Validity 19 the Tuple data (for reasons we will discuss in the results section).
Reference: [4] <author> Bradley Efron and Robert Tibshirani. </author> <title> An introduction to the Bootstrap. Monographs on statistics and applied probability 57. </title> <publisher> Chapman and Hall, </publisher> <address> New York, London, </address> <year> 1993. </year>
Reference-contexts: A nice introduction into resampling for statistical laymen is by Simon [11]. Readers with deeper statistical knowledge may prefer the more mathematical yet highly understandable text of Efron and Tibshirani <ref> [4] </ref>. The only other statistical test used is the O 2 test on a four field table for testing the significance of frequency differences of a binary attribute. The application is comparing the incidence of a certain event in two experimental groups.
Reference: [5] <author> Norman E. Fenton. </author> <title> Software Metrics: A Rigorous Approach. </title> <publisher> Chapman and Hall, </publisher> <address> London, </address> <year> 1991. </year>
Reference-contexts: We also study the learning effect from the first to the second task performed by each subject. 3.2.1 Metrics employed In the evaluation below, the following measurements and criteria will be used. Each class of them is described by the following terms <ref> [5] </ref>: A measurement can be either objective (and therefore in principle completely reproducible and out of question) or subjective (and therefore subject to debate); it can be either direct or be derived from other measurements; it can be on a nominal, ordinal, interval, cardinal, or absolute scale; it can have limited
Reference: [6] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference-contexts: A documentation format was developed and today a design pattern is a packaged description of a common software design problem, its context, appropriate terminology, one or several solutions, and their advantages, constraints, and other properties. According to practitioners <ref> [1, 6] </ref>, there are several advantages of design patterns: * Less experienced designers can produce better designs with patterns. * Design patterns encourage recording and reusing best practices even for experienced designers. * Design patterns can improve communication, both between designers and from designers to maintainers, by defining a common design <p> even for experienced designers. * Design patterns can improve communication, both between designers and from designers to maintainers, by defining a common design terminology. 4 1.2 Experiment Overview 5 The first large, orderly collection of design patterns was presented in 1995 as a book by Gamma, Helms, Johnson, and Vlissides <ref> [6] </ref>, often called the Gang of Four (GoF). The GoF book enjoyed great success and caused significant interest in design patterns. Currently the number of design patterns reported in the literature is rapidly increasing and there are several conferences on the topic [10].
Reference: [7] <author> Dewayne E. Perry and Alexander L. Wolf. </author> <title> Foundations for the study of software architecture. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <year> 1992. </year>
Reference-contexts: Our experiment attempts to investigate the situation of implementor-to-maintainer communication via the source code document. This is an important question, because maintenance is known to be a large cost factor in software engineering. In particular, the decay of software structure (architectural erosion <ref> [7] </ref>) during maintenance arises from the lack of design understanding. In our experiment we investigate the following question: Assume a program was built using design patterns, was thoroughly documented, and now needs to be maintained.
Reference: [8] <author> Lutz Prechelt. </author> <title> An experiment on the usefulness of design patterns: Detailed description and evaluation. </title> <type> Technical Report 9/1997, </type> <institution> Fakultat f ur Informatik, Universitat Karlsruhe, Germany, </institution> <month> June </month> <year> 1997. </year> <month> ftp.ira.uka.de. </month>
Reference-contexts: were based on two programs of 8 to 10 printed pages length; solutions had to be implemented on each subject's Unix workstation. 1.3 Differences to Karlsruhe Experiment The experiment described in the present report is based on another experiment that was conducted at the University of Karlsruhe in January 1997 <ref> [8, 9] </ref>. These are the most important differences of the present experiment compared to the former one (readers not familiar with the Karlsruhe experiment may want to skip this section): 1. The solutions were produced directly in the computer and could be compiled. <p> Therefore the participants knew more different design patterns than the Karlsruhe participants. 7. Here we had only 22 participants instead of 74 and all subjects were undergraduate students. The present report matches <ref> [8] </ref> as closely as possible with respect to its structure and style of presentation. 1.4 Related Work Except for the Karlsruhe experiment mentioned above, no scientific investigation of the assumptions underlying design patterns has yet been published as far as we know.
Reference: [9] <author> Lutz Prechelt, Barbara Unger, and Michael Philippsen. </author> <title> Documenting design patterns in code eases program maintenance. </title> <booktitle> In Proc. ICSE Workshop on Process Modeling and Empirical Studies of Software Evolution, </booktitle> <pages> pages 7276, </pages> <address> Boston, MA, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: were based on two programs of 8 to 10 printed pages length; solutions had to be implemented on each subject's Unix workstation. 1.3 Differences to Karlsruhe Experiment The experiment described in the present report is based on another experiment that was conducted at the University of Karlsruhe in January 1997 <ref> [8, 9] </ref>. These are the most important differences of the present experiment compared to the former one (readers not familiar with the Karlsruhe experiment may want to skip this section): 1. The solutions were produced directly in the computer and could be compiled.
Reference: [10] <author> Douglas Schmidt. </author> <title> Collected papers from the PLoP '96 and EuroPLoP '96 conferences. </title> <type> Technical Report wucs-97-07, </type> <institution> Washington University, Dept. of CS, St. Louis, </institution> <month> February </month> <year> 1997. </year> <booktitle> (Conference Pattern languages of programs). </booktitle>
Reference-contexts: The GoF book enjoyed great success and caused significant interest in design patterns. Currently the number of design patterns reported in the literature is rapidly increasing and there are several conferences on the topic <ref> [10] </ref>. Some newly documented design patterns are appealing, though many are variations of previously documented patterns.
Reference: [11] <author> Julien L. Simon. </author> <title> Resampling: The new statistics. </title> <publisher> Duxbury Press, </publisher> <address> Belmont, CA, </address> <year> 1992. </year> <note> http://www.statistics.com. 77 </note>
Reference-contexts: In contrast to classical statistical methods, resampling avoids distributional assumptions and allows for using the same procedure in all cases. A nice introduction into resampling for statistical laymen is by Simon <ref> [11] </ref>. Readers with deeper statistical knowledge may prefer the more mathematical yet highly understandable text of Efron and Tibshirani [4]. The only other statistical test used is the O 2 test on a four field table for testing the significance of frequency differences of a binary attribute.
References-found: 11

