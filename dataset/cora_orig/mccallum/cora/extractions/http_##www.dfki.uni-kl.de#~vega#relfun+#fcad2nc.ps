URL: http://www.dfki.uni-kl.de/~vega/relfun+/fcad2nc.ps
Refering-URL: http://www.dfki.uni-kl.de/~vega/relfun.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: boley@informatik.uni-kl.de  
Title: Transforming Workpiece Geometries into Lathe-NC Programs by Qualitative Simulation  
Author: Harold Boley, Markus Perling, Michael Sintek 
Address: Box 2080, D-67608 Kaiserslautern, Germany  
Affiliation: DFKI GmbH,  
Abstract: A knowledge-based process-planning system for generating workplans for idealized lathe CNC machines is discussed. It transforms CAD-like diagrams of rotational-symmetric workpieces into abstract NC programs. To simplify development and evolution, declarative representations are used for all processing stages and steps, including a qualitative simulation of lathe turning. The version presented here, 'CAD2NC, was written entirely in RELFUN, a functional-logic language integration. Actually, 'CAD2NC is a mostly functional program consisting of three principal transformation components. First, a flat term representation of the CAD-like geometrical raw data is parsed into a recursively classified workpiece representation, exhibiting production-relevant workpiece features (e.g. `shoulders' and `grooves') through nested subterms. From this, a skeletal production plan is created by mapping features to sequential, commutative, and alternative subplans (ultimately, lathe actions). Finally, the abstract NC program is generated as a list of actions via a qualitative simulation `executing' the plan in order to fix alternative subplans and sequentialize commutative ones.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ansgar Bernardi, Ralf Legleitner, and Christoph Klauck. </author> <title> PIM | Skeletal plan-based CAPP. </title> <booktitle> Computers in Industry, </booktitle> (23):87-97, 1993. 
Reference-contexts: In fact, this task, similarly studied in <ref> [1] </ref>, may become a kind of standard benchmark for AI and other information technologies in manufacturing: Workpiece processing is usually simple enough because of rotational symmetry (only requiring "2 1/2 dimensions"), yet can become rich enough through contours of arbitrary (in fact, unturnable) complexity.
Reference: [2] <author> H. Boley, P. Hanschke, K. Hinkelmann, and M. Meyer. COLAB: </author> <title> A hybrid knowledge representation and compilation laboratory. </title> <journal> Annals of Operations Research, </journal> <volume> 55 </volume> <pages> 11-79, </pages> <year> 1995. </year> <note> Preprinted as: DFKI Research Report RR-93-08, </note> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: 1 Introduction With the series of CAD2NC process-planning systems, from [4], <ref> [2] </ref>, and [7] to the current version, 'CAD2NC, we have been studying the following mechanical-engineering task: Given a CAD-like geometry of some rotational-symmetric workpiece, generate abstract NC macros for rough-turning the workpiece on an abstract CNC lathe machine. This involves the most interesting, knowledge-intensive phases of CAD-to-NC transformation. <p> To simplify development and evolution, declarative representations have been used for all processing stages of CAD2NC, including the qualitative simulation of lathe turning (in the logic-programming tradition of declarative graphics [6]). However, while the earlier CAD2NC version is implemented in the hybrid COLAB language <ref> [2] </ref>, the current mostly functional 'CAD2NC version is written in homogeneous RELFUN [3]. The evolution from CAD2NC, with COLAB containing an older version of RELFUN as one of its components, to 'CAD2NC, employing current RELFUN, has been supported by the declarativeness of all languages involved.
Reference: [3] <author> Harold Boley. </author> <title> Extended Logic-plus-Functional Programming. </title> <editor> In Lars-Henrik Eriksson, Lars Hallnas, and Peter Schroeder-Heister, editors, </editor> <booktitle> Proceedings of the 2nd International Workshop on Extensions of Logic Programming, ELP '91, Stockholm 1991, volume 596 of LNAI. </booktitle> <publisher> Springer, </publisher> <year> 1992. </year>
Reference-contexts: However, while the earlier CAD2NC version is implemented in the hybrid COLAB language [2], the current mostly functional 'CAD2NC version is written in homogeneous RELFUN <ref> [3] </ref>. The evolution from CAD2NC, with COLAB containing an older version of RELFUN as one of its components, to 'CAD2NC, employing current RELFUN, has been supported by the declarativeness of all languages involved.
Reference: [4] <author> Harold Boley, Philipp Hanschke, Martin Harm, Knut Hinkelmann, Thomas Labisch, Manfred Meyer, Joerg Mueller, Thomas Oltzen, Michael Sintek, Werner Stein, and Frank Steinle. CAD2NC: </author> <title> A declarative lathe-workplanning model transforming CAD-like geometries into abstract NC programs. Document D-91-15, </title> <institution> University of Kaiserslautern, DFKI, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: 1 Introduction With the series of CAD2NC process-planning systems, from <ref> [4] </ref>, [2], and [7] to the current version, 'CAD2NC, we have been studying the following mechanical-engineering task: Given a CAD-like geometry of some rotational-symmetric workpiece, generate abstract NC macros for rough-turning the workpiece on an abstract CNC lathe machine. This involves the most interesting, knowledge-intensive phases of CAD-to-NC transformation.
Reference: [5] <author> Markus Perling. </author> <title> RAWAM A Relfun Adapted WAM. </title> <type> Technical report, </type> <institution> Universitat Kaiserslautern, perling@dfki.uni-kl.de, </institution> <year> 1997. </year>
Reference-contexts: Algorithmic efficiency has been gained via functional-programming methods such as accumulator parameters, source-to-source pre-compilation, and our WAM compiler. Employing a WAM emulator realized in a fast COMMON LISP (GWAM [8]) or in C (RAWAM <ref> [5] </ref>) also results in good low-level efficiency of our declarative, high-level formulations. 2 The 'CAD2NC Architecture The input to the 'CAD2NC process planning system is a ring-oriented representation of rotational-symmetric workpieces, importable from a CAD system. First, the represented workpiece surfaces are classifed into a nested feature description.
Reference: [6] <author> D. Randell, P. Hammond, J. C. Davenport, and F. J. Fitzpatrick. </author> <title> Automatic Shape Description and Component Placement Using Declarative Graphics and Spatial Reasoning. </title> <booktitle> In Proceedings of the 2nd International Conference on The Practical Applications of Prolog, PAP '94, London, </booktitle> <pages> pages 407-422, </pages> <year> 1994. </year>
Reference-contexts: To simplify development and evolution, declarative representations have been used for all processing stages of CAD2NC, including the qualitative simulation of lathe turning (in the logic-programming tradition of declarative graphics <ref> [6] </ref>). However, while the earlier CAD2NC version is implemented in the hybrid COLAB language [2], the current mostly functional 'CAD2NC version is written in homogeneous RELFUN [3].
Reference: [7] <author> Michael Sintek. Monolinguistic CAD2NC: </author> <title> A Deterministic RELFUN Application Generating Abstract NC Programs from CAD-like Geometries. </title> <institution> DFKI Kaiserslautern, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: 1 Introduction With the series of CAD2NC process-planning systems, from [4], [2], and <ref> [7] </ref> to the current version, 'CAD2NC, we have been studying the following mechanical-engineering task: Given a CAD-like geometry of some rotational-symmetric workpiece, generate abstract NC macros for rough-turning the workpiece on an abstract CNC lathe machine. This involves the most interesting, knowledge-intensive phases of CAD-to-NC transformation.
Reference: [8] <author> Michael Sintek. </author> <title> FLIP: Functional-plus-logic programming on an integrated platform. </title> <type> Technical Memo TM-95-02, </type> <institution> DFKI GmbH, </institution> <month> May </month> <year> 1995. </year> <month> 6 </month>
Reference-contexts: Algorithmic efficiency has been gained via functional-programming methods such as accumulator parameters, source-to-source pre-compilation, and our WAM compiler. Employing a WAM emulator realized in a fast COMMON LISP (GWAM <ref> [8] </ref>) or in C (RAWAM [5]) also results in good low-level efficiency of our declarative, high-level formulations. 2 The 'CAD2NC Architecture The input to the 'CAD2NC process planning system is a ring-oriented representation of rotational-symmetric workpieces, importable from a CAD system.
References-found: 8

