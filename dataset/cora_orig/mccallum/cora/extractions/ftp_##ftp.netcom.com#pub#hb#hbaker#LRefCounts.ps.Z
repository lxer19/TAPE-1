URL: ftp://ftp.netcom.com/pub/hb/hbaker/LRefCounts.ps.Z
Refering-URL: ftp://ftp.netcom.com/pub/hb/hbaker/home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: 91436(818) 501-4956(818) 986-1360 (FAX)  
Title: Minimizing Reference Count Updating with Deferred and Anchored Pointers for Functional Data Structures pointers are
Author: Henry G. Baker 
Address: 16231 Meadow Ridge Way, Encino, CA  
Affiliation: Nimble Computer Corporation,  
Date: 29, 9 (September 1994), 38-43.  
Note: ACM Sigplan Notices  Copyright 1993 by Nimble Computer Corporation 1 12/6/94  This material is based upon work supported by the National Science Foundation under Grant No. III-9261682. Anchored  
Abstract: Reference counting can be an attractive form of dynamic storage management. It recovers storage promptly and (with a garbage stack instead of a free list) it can be made "real-time"i.e., all accesses can be performed in constant time. Its major drawbacks are its inability to reclaim cycles, its count storage, and its count update overhead. Update overhead is especially irritating for functional (read-only) data where updates may dirty pristine cache lines and pages. We show how reference count updating can be largely eliminated for functional data structures by using the "linear style" of programming that is inspired by Girard's linear logic, and by distinguishing normal pointers from anchored pointers, which indicate not only the object itself, but also the depth of the stack frame that anchors the object. An anchor for a pointer is essentially an enclosing data structure that is temporarily locked from being collected for the duration of the anchored pointer's existence by a deferred reference count. An anchored pointer thus implies a reference count increment that has been deferred until it is either cancelled or performed. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Abramsky, S. </author> <title> "Computational interpretations of linear logic". </title> <journal> Theor. Comp. Sci. </journal> <volume> 111 (1993), </volume> <pages> 3-57. </pages>
Reference: <author> Baker, H.G. </author> <title> "CONS Should not CONS its Arguments". </title> <journal> ACM Sigplan Not. 27,3 (March1992), </journal> <pages> 24-34. </pages>
Reference: <author> Baker, H.G. </author> <title> "The Treadmill: Real-Time Garbage Collection without Motion Sickness". </title> <journal> Sigplan Not. 27,3 (1992). ACM Sigplan Notices 29, </journal> <month> 9 (September </month> <year> 1994), </year> <pages> 38-43. </pages> <note> Copyright 1993 by Nimble Computer Corporation 5 12/6/94 Baker, </note> <author> H.G. </author> <title> "The Boyer Benchmark at Warp Speed". </title> <booktitle> ACM Lisp Pointers V,3 (July-Sept.1992), </booktitle> <pages> 13-14. </pages>
Reference: <author> Baker, H.G. </author> <title> "Lively Linear Lisp 'Look Ma, No Garbage!'". </title> <journal> ACM Sigplan Notices 27,8 (Aug.1992), </journal> <pages> 89-98. </pages>
Reference: <author> Baker, H.G. </author> <title> "Safe and Leakproof Resource Management using Ada83 Limited Types". </title> <journal> ACM Ada Letters XIII, </journal> <volume> 5 (Sep/Oct1993), </volume> <pages> 32-42. </pages>
Reference: <author> Baker, H.G. </author> <title> "Equal Rights for Functional Objects". </title> <journal> ACM OOPS Messenger 4,4 (Oct.1993), </journal> <pages> 2-27. </pages>
Reference: <author> Barth, J. </author> <title> "Shifting garbage collection overhead to compile time". </title> <journal> CACM 20, </journal> <volume> 7 (July1977),513-518. </volume>
Reference: <editor> Bekkers, Y., and Cohen, J., eds. </editor> <booktitle> Memory Management: Proc. </booktitle> <publisher> IWMM92 Springer LNCS 637, </publisher> <year> 1992. </year>
Reference: <author> Berry, G., and Boudol, G. </author> <title> "The chemical abstract machine". </title> <journal> Theor. Comp. Sci. </journal> <volume> 96 (1992), </volume> <pages> 217-248. </pages>
Reference: <author> Boehm, H.-J. </author> <title> "Simple GC-Safe Compilation". </title> <booktitle> GC Workshop at OOPSLA'91, </booktitle> <address> Phoenix, AZ, Oct. 6, </address> <year> 1991. </year>
Reference: <author> Chikayama, T., and Kimuar, Y. </author> <title> "Multiple Reference Management in Flat GHC". </title> <booktitle> Logic Programming, Proc. 4th Intl. Conf., </booktitle> <publisher> MIT Press, </publisher> <year> 1987, </year> <pages> 276-293. </pages>
Reference: <author> Chirimar, J., et al. </author> <title> "Proving Memory Management Invariants for a Language Based on Linear Logic". </title> <booktitle> Proc. ACM Conf. Lisp & Funct. Prog., </booktitle> <address> San Francisco, CA, </address> <month> June, </month> <year> 1992, </year> <note> also ACM Lisp Pointers V,1 (Jan.-Mar.1992), 139. </note>
Reference: <author> Collins, G.E. </author> <title> "A method for overlapping and erasure of lists". </title> <journal> CACM 3,12 (Dec.1960), </journal> <pages> 655-657. </pages>
Reference: <author> Deutsch, L.P., and Bobrow, D.G. </author> <title> "An efficient incremental automatic garbage collector". </title> <journal> CACM 19,9 (Sept.1976). </journal>
Reference: <author> Deutsch, </author> <title> L.P. "ByteLisp and its Alto Implementation". </title> <booktitle> Lisp Conf., </booktitle> <address> Stanford, CA, </address> <month> Aug. </month> <year> 1980, </year> <pages> 231-243. </pages>
Reference: <author> Diwan, A., et al. </author> <title> "Compiler support for garbage collection in a statically typed language". </title> <journal> ACM PLDI'92, Sigplan Not. 27,6 (June1992), </journal> <pages> 273-282. </pages>
Reference: <author> Edelson, </author> <title> D.R. "Smart pointers: They're smart but they're not pointers". </title> <booktitle> Proc. Usenix C++ Tech. Conf. </booktitle> <volume> 92, </volume> <pages> 1-19. </pages>
Reference: <author> Edelson, </author> <title> D.R. "Precompiling C++ for Garbage Collection". </title> <booktitle> In [Bekkers92], </booktitle> <pages> 299-314. </pages>
Reference: <author> Ellis, J.R., et al. </author> <title> "Real-time concurrent collection on stock multiprocessors". </title> <publisher> ACM PLDI'88. </publisher>
Reference: <author> Friedman, </author> <title> D.P., and Wise, D.S. "Aspects of applicative programming for parallel processing". </title> <journal> IEEE Trans. Comput. C-27,4 (Apr.1978), </journal> <pages> 289-296. </pages>
Reference: <author> Gabriel, </author> <title> R.P. Performance and Evaluation of Lisp Systems. </title> <publisher> MIT Press, Camb., </publisher> <address> MA 1985. </address>
Reference: <editor> Gelernter, H., et al. </editor> <title> "A Fortran-compiled list processing language". </title> <editor> J. </editor> <booktitle> ACM 7 (1960), </booktitle> <pages> 87-101. </pages>
Reference: <author> Girard, J.-Y. </author> <title> "Linear Logic". </title> <journal> Theoretical Computer Sci. </journal> <volume> 50 (1987),1-102. </volume>
Reference: <author> Goldberg, B. </author> <title> "Generational Reference Counting: A Reduced-Communication Distributed Storage Reclamation Scheme". </title> <journal> ACM PLDI'89, Sigplan Not. 24,7 (July1989), </journal> <pages> 313-321. </pages>
Reference: <author> Inamura, Y., et al. </author> <title> "Optimization Techniques Using the MRB and Their Evaluation on the Multi-PSI/V2". </title> <booktitle> Logic Programming, Proc. North American Conf., </booktitle> <publisher> MIT Press, </publisher> <year> 1989, </year> <pages> 907-921. </pages>
Reference: <author> Kieburtz, R.B. </author> <title> "Programming without pointer variables". </title> <booktitle> Proc. Conf. on Data: Abstraction, Definition and Structure, Sigplan Not. 11 (special issue 1976), </booktitle> <pages> 95-107. </pages>
Reference: <author> Lafont, Y. </author> <title> "The Linear Abstract Machine". </title> <journal> Theor. Comp. Sci. </journal> <volume> 59 (1988), </volume> <pages> 157-180. </pages>
Reference: <author> Lematre, M., et al. </author> <title> "Mechanisms for Efficient Multiprocessor Combinator Reduction". Lisp & Funct. </title> <publisher> Progr. 1986,. </publisher>
Reference: <author> Nilsen, K. </author> <title> "Garbage collection of strings and linked data structures in real time". </title> <address> SWPrac. & Exper. </address> <month> 18,7 </month> <year> (1988). </year>
Reference: <author> Nishida, K., et al. </author> <title> "Evaluation of MRB Garbage Collection on Parallel Logic Programming Architectures". </title> <booktitle> Logic Programming, Proc. 7th Intl. Conf., </booktitle> <publisher> MIT Press, </publisher> <year> 1990, </year> <pages> 83-95. </pages>
Reference: <author> Park, Y.G., and Goldberg, B. </author> <title> "Reference Escape Analysis: Optimizing Reference Counting based on the Lifetime of References". </title> <booktitle> Proc. </booktitle> <institution> PEPM'91, Yale Univ., </institution> <month> June, </month> <year> 1991, </year> <pages> 178-189. </pages>
Reference: <author> Shalit, A. </author> <title> Dylan: An objectoriented dynamic language. </title> <institution> Apple Computer, Camb., </institution> <address> MA, </address> <year> 1992. </year>
Reference: <author> Steele, G.L. </author> <title> "Fast Arithmetic in MacLisp". </title> <type> AI Memo 421, </type> <institution> MIT AI Lab., Camb., </institution> <address> MA, </address> <month> Sept. </month> <year> 1977. </year>
Reference: <author> Steele, G.L. </author> <title> Common Lisp, The Language; 2nd Ed. </title> <publisher> Digital Press, </publisher> <address> Bedford, MA, </address> <year> 1990. </year>
Reference: <editor> Stoye, W.R., et al. </editor> <title> "Some practical methods for rapid combinator reduction". Lisp & Funct. </title> <booktitle> Progr. Conf. </booktitle> <year> 1984. </year>
Reference: <author> Strom, R.E. </author> <title> "Mechanisms for Compile-Time Enforcement of Security". </title> <booktitle> Proc. ACM POPL 10, </booktitle> <month> Jan. </month> <year> 1983. </year>
Reference: <author> Strom, R.E., and Yemini, S. "Typestate: </author> <title> A Programming Language Concept for Enhancing Software Reliability". </title> <journal> IEEE Trans. SW Engrg. SE-12,1 (Jan.1986), </journal> <pages> 157-171. </pages>
Reference: <author> Wadler, P. </author> <title> "Is there a use for linear logic?". </title> <booktitle> Proc. ACM PEPM'91, </booktitle> <address> New Haven, </address> <month> June </month> <year> 1991, </year> <pages> 255-273. </pages>
Reference: <author> Wakeling, D., and Runciman, C. </author> <title> "Linearity and Laziness". </title> <journal> Proc. Funct. Progr. & Computer Arch., </journal> <volume> LNCS 523, </volume> <publisher> Springer-Verlag, </publisher> <month> Aug. </month> <year> 1991, </year> <pages> 215-240. </pages>
Reference: <author> Wise, D.S., and Friedman, </author> <title> D.P. "The one-bit reference count". </title> <journal> BIT 17,3 (Sept.1977), </journal> <pages> 351-359. </pages>
Reference: <author> Wise, </author> <title> D.S. "Stop-and-copy and One-bit Reference Counting". </title> <editor> TR-360, Indiana U., Bloomington, IN, </editor> <month> Oct. </month> <year> 1992. </year>

References-found: 41

