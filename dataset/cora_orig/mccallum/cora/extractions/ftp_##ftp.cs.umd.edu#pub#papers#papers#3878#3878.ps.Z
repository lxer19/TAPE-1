URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3878/3878.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: labrinid@cs.umd.edu nick@cs.umd.edu  
Title: Reduction of Materialized View Staleness Using Online Updates  
Author: Alexandros Labrinidis Nick Roussopoulos 
Date: February 1998  
Address: College Park, MD 20742  
Affiliation: Department of Computer Science, and Institute for Systems Research, University of Maryland  
Pubnum: CS-TR-3878  
Abstract: Updating the materialized views stored in data warehouses usually implies making the warehouse unavailable to users. We propose MAUVE , a new algorithm for online incremental view updates that uses timestamps and allows consistent read-only access to the warehouse while it being updated. The algorithm propagates the updates to the views more often than the typical once a day in order to reduce view staleness. We have implemented MAUVE on top of the Informix Universal Server and used a synthetic workload generator to experiment with various update workloads and different view update frequencies. Our results show that, all kinds of update streams benefit from more frequent view updates, instead of just once a day. However, there is a clear maximum for the view update frequency, for which view staleness is minimal.
Abstract-found: 1
Intro-found: 1
Reference: [AASY97] <author> Divyakant Agrawal, Amr El Abbadi, Ambuj K. Singh, and Tolga Yurek. </author> <title> Efficient View Maintenance at Data Warehouses. </title> <booktitle> In Proc. of the ACM SIGMOD Conference, </booktitle> <pages> pages 417427, </pages> <address> Tucson, Arizona, </address> <month> May </month> <year> 1997. </year>
Reference: [AGMK95] <author> Brad Adelberg, Hector Garcia-Molina, and Ben Kao. </author> <title> Applying Update Streams in a Soft Real-Time Database System. </title> <booktitle> In Proc. of the ACM SIGMOD Conference, </booktitle> <pages> pages 245-256, </pages> <address> San Jose, California, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Also, we improve on the deferredness of view updates, by introducing view staleness as a key metric to optimize in order to achieve a good view freshness/performance tradeoff. Data staleness is introduced in <ref> [AGMK95] </ref>, where they study various scheduling policies among update and query transactions in a soft real-time database system.
Reference: [BALT86] <author> Jos e A. Blakeley, Per Ake Larson, and Frank Wm. Tompa. </author> <title> Efficiently Updating Materialized Views. </title> <editor> In Carlo Zaniolo, editor, </editor> <booktitle> Proc. of the ACM SIGMOD Conference, </booktitle> <pages> pages 61-71, </pages> <address> Washington, D.C., </address> <month> May </month> <year> 1986. </year>
Reference: [CD97] <author> Surajit Chaudhuri and Umeshwar Dayal. </author> <title> An Overview of Data Warehousing and OLAP Technology. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 26(1) </volume> <pages> 65-74, </pages> <month> March </month> <year> 1997. </year>
Reference: [CGL + 96] <author> Latha S. Colby, Timothy Griffin, Leonid Libkin, Inderpal Singh Mumick, and Howard Trickey. </author> <title> Algorithms for Deferred View Maintenance. </title> <booktitle> In Proc. of the ACM SIGMOD Conference, </booktitle> <pages> pages 469-480, </pages> <address> Montreal, Canada, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Their approach has little overhead and can be implemented by query rewrite. MAUVE provides a natural extension to n versions, thus avoiding the session expiration problem when a reader overlaps with more than one maintenance transaction. Algorithms for deferred view maintenance that minimize downtime were presented in <ref> [CGL + 96] </ref>. They avoid the state bug where direct application of pre-update algorithms in the post-update state results in incorrect view change calculation. The use of timestamps in MAUVE allows us to access the pre-update phase of the tables, circumventing the state bug.
Reference: [CW91] <author> Stefano Ceri and Jennifer Widom. </author> <title> Deriving Production Rules for Incremental View Maintenance. </title> <booktitle> In Proc. of the Very Large Data Bases (VLDB) Conference, </booktitle> <pages> pages 577-589, </pages> <address> Barcelona, Catalonia, Spain, </address> <month> September </month> <year> 1991. </year>
Reference: [Dew93] <author> David J. Dewitt. </author> <title> The Wisconsin Benchmark: Past, Present, and Future. </title> <editor> In Jim Gray, editor, </editor> <title> The Benchmark Handbook for Database and Transaction Processing Systems, chapter 4. </title> <publisher> Morgan Kaufmann, </publisher> <address> 2 nd edition, </address> <year> 1993. </year>
Reference-contexts: The base table that we used in our experiments have the same tuple-size as the Wisconsin benchmark <ref> [Dew93] </ref> (plus the extra timestamp attributes), but we only provided explicit values for the join attribute. Genesis uses techniques from [GSE + 94] and [PTVF92] in order to generate values which follow different distribution functions.
Reference: [GL95] <author> Timothy Griffin and Leonid Libkin. </author> <title> Incremental Maintenance of Views with Duplicates. </title> <booktitle> In Proc. of the ACM SIGMOD Conference, </booktitle> <pages> pages 328-339, </pages> <address> San Jose, California, </address> <month> May </month> <year> 1995. </year>
Reference: [GLT97] <author> Timothy Griffin, Leonid Libkin, and Howard Trickey. </author> <title> An Improved Algorithm for the Incremental Recomputation of Active Relational Expressions. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 9(3) </volume> <pages> 508-511, </pages> <month> May </month> <year> 1997. </year>
Reference: [GM95] <author> Ashish Gupta and Inderpal Singh Mumick. </author> <title> Maintenance of Materialized Views: Problems, Techniques, </title> <journal> and Applications. Data Engineering Bulletin, </journal> <volume> 18(2) </volume> <pages> 3-18, </pages> <month> June </month> <year> 1995. </year>
Reference: [GMS93] <author> Ashish Gupta, Inderpal Singh Mumick, and V. S. Subrahmanian. </author> <title> Maintaining Views Incrementally. </title> <booktitle> In Proc. of the ACM SIGMOD Conference, </booktitle> <pages> pages 157-166, </pages> <address> Washington, D.C, </address> <month> May </month> <year> 1993. </year> <month> 18 </month>
Reference: [GSE + 94] <author> Jim Gray, Prakash Sundaresan, Susanne Englert, Kenneth Baclawski, and Peter J. Wein-berger. </author> <title> Quickly Generating Billion-Record Synthetic Databases. </title> <booktitle> In Proc. of the ACM SIGMOD Conference, </booktitle> <pages> pages 243-252, </pages> <address> Minneapolis, Minnesota, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The base table that we used in our experiments have the same tuple-size as the Wisconsin benchmark [Dew93] (plus the extra timestamp attributes), but we only provided explicit values for the join attribute. Genesis uses techniques from <ref> [GSE + 94] </ref> and [PTVF92] in order to generate values which follow different distribution functions. It was used to create update streams with many different data patterns and also various behaviors over time (e.g. slow or high speed streams).
Reference: [Huy97] <author> Nam Huyn. </author> <title> Multiple-View Self-Maintenance in Data Warehousing Environments. </title> <booktitle> In Proc. of the Very Large Data Bases (VLDB) Conference, </booktitle> <pages> pages 26-35, </pages> <address> Athens, Greece, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: Finding a solution in-between would be desirable in order to keep the data in the warehouse relatively fresh without too much overhead. The same problem applies to views that are self-maintainable ([QGMW96], <ref> [Huy97] </ref>). In that case, although there are no base tables, changes in base tables are mapped to changes in the view and the auxiliary views. This implies that we still need to strike a balance between propagating the updates to the target views frequently versus tolerating stale view data.
Reference: [HZ96a] <author> Richard Hull and Gang Zhou. </author> <title> A Framework for Supporting Data Integration Using the Materialized and Virtual Approaches. </title> <booktitle> In Proc. of the ACM SIGMOD Conference, </booktitle> <pages> pages 481-492, </pages> <address> Montreal, Canada, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: In the next section we propose a way on how to tune chunk size to optimize view staleness. 3 View Staleness We assume a warehouse that keeps complete replicas of the base tables, or at least a part of the base tables that hold all the relevant updates ([BALT86], <ref> [HZ96a] </ref>). In our environment, updates from the sources arrive at the warehouse and are being applied to the base tables. At some points, this process gets interrupted in order to propagate these updates to the view (s). <p> Nevertheless, all updates in their system are applied directly to the database tables without the need to propagate these updates to any derived data, as is the case with view staleness and materialized views in our work. The notion of view freshness also appears in <ref> [HZ96a] </ref> and [HZ96b] during the presentation of the 16 Squirrel integration mediators.
Reference: [HZ96b] <author> Richard Hull and Gang Zhou. </author> <title> Towards the Study of Performance Trade-offs Between Materialized and Virtual Integrated Views. </title> <booktitle> In Proc. of Workshop on Materialized Views: Techniques and Applications (VIEW 1996), </booktitle> <pages> pages 91-102, </pages> <address> Montreal, Canada, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Nevertheless, all updates in their system are applied directly to the database tables without the need to propagate these updates to any derived data, as is the case with view staleness and materialized views in our work. The notion of view freshness also appears in [HZ96a] and <ref> [HZ96b] </ref> during the presentation of the 16 Squirrel integration mediators.
Reference: [inf97] <institution> INFORMIX Universal Server DataBlade API, </institution> <month> June </month> <year> 1997. </year>
Reference: [PTVF92] <author> William H. Press, Saul A. Teukolsky, William T. Vetterling, and Brian P. Flannery. </author> <title> Numerical Recipes in C. </title> <publisher> Cambridge University Press, </publisher> <address> 2 nd edition, </address> <year> 1992. </year>
Reference-contexts: The base table that we used in our experiments have the same tuple-size as the Wisconsin benchmark [Dew93] (plus the extra timestamp attributes), but we only provided explicit values for the join attribute. Genesis uses techniques from [GSE + 94] and <ref> [PTVF92] </ref> in order to generate values which follow different distribution functions. It was used to create update streams with many different data patterns and also various behaviors over time (e.g. slow or high speed streams). In our experiments, the join attribute value for the base relations had a uniform distribution.
Reference: [QGMW96] <author> Dallan Quass, Ashish Gupta, Inderpal Singh Mumick, and Jennifer Widom. </author> <title> Making Views Self-Maintainable for Data Warehousing. </title> <booktitle> In Proc. of the Conference on Parallel and Distributed Information Systems (PDIS), </booktitle> <address> Miami Beach, Florida, </address> <year> 1996. </year>
Reference: [QW91] <author> Xiaolei Qian and Gio Wiederhold. </author> <title> Incremental Recomputation of Active Relational Expressions. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(3) </volume> <pages> 337-341, </pages> <month> September </month> <year> 1991. </year>
Reference: [QW97] <author> Dallan Quass and Jennifer Widom. </author> <title> On-Line Warehouse View Maintenance. </title> <booktitle> In Proc. of the ACM SIGMOD Conference, </booktitle> <pages> pages 393-404, </pages> <address> Tucson, Arizona, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: In other words, scaling the database size didn't seem to have any major impact on view staleness. 5 Related Work <ref> [QW97] </ref> proposes the 2VNL algorithm for online view maintenance where pre-update versions of updateable attributes are kept for readers to access while a maintenance transaction is active. Their approach has little overhead and can be implemented by query rewrite.
Reference: [RCK + 95] <author> Nick Roussopoulos, Chungmin Melvin Chen, Stephen Kelley, Alex Delis, and Yannis Papakonstantinou. </author> <title> The ADMS Project: Views R Us. </title> <journal> Data Engineering Bulletin, </journal> <volume> 18(2) </volume> <pages> 19-28, </pages> <month> June </month> <year> 1995. </year>
Reference: [RES93] <author> Nick Roussopoulos, Nikos Economou, and Antony Stamenas. ADMS: </author> <title> A Testbed for Incremental Access Methods. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 5(5) </volume> <pages> 762-774, </pages> <month> October </month> <year> 1993. </year>
Reference: [RK86] <author> Nick Roussopoulos and Hyunchul Kang. </author> <title> Preliminary Design of ADMS : A WorkstationMainframe Integrated Architecture for Database Management Systems. </title> <booktitle> In Proc. of the Very Large Data Bases (VLDB) Conference, </booktitle> <pages> pages 355-364, </pages> <address> Kyoto, Japan, </address> <month> August </month> <year> 1986. </year> <month> 19 </month>
Reference: [Rou82] <author> Nick Roussopoulos. </author> <title> View Indexing in Relational Databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 7(2) </volume> <pages> 258-290, </pages> <month> June </month> <year> 1982. </year>
Reference: [Rou91] <author> Nick Roussopoulos. </author> <title> An Incremental Access Method for ViewCache: Concept, Algorithms, and Cost Analysis. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 16(3) </volume> <pages> 535-563, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: R 0 and S 0 are the updated base tables R and S. I R , I S are the sets of insertions to R and S respectively, and D R , D S are the sets of deletions. MAUVE uses the formulas from <ref> [Rou91] </ref> to compute incremental updates to the view: V 0 = (R 1 S) (R 1 D S ) (D R 1 S) (D R 1 D S ) [ (I R 1 S) [ (I R 1 I S ) (I R 1 D S ) where fD R ;
Reference: [Rou98] <author> Nick Roussopoulos. </author> <title> Materialized Views and Data Warehouses. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 27(1), </volume> <month> March </month> <year> 1998. </year>
Reference: [SLSV95] <author> Dennis Shasha, Franois Llirbat, Eric Simon, and Patrick Valduriez. </author> <title> Transaction Chopping: Algorithms and Performance Studies. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 20(3):325363, </volume> <month> September </month> <year> 1995. </year>
Reference-contexts: However, their study is different from ours, as they study the tradeoffs between different view materialization approaches (fully materialized, partially materialized and fully virtual) under eager update processing, whereas we focus our study on the tradeoffs between different view update frequencies. The work in <ref> [SLSV95] </ref> contains algorithms for splitting up long transactions.
Reference: [Sta89] <author> Antonios G. Stamenas. </author> <title> High Performance Incremental Relational Databases. </title> <type> Technical report, </type> <institution> UMIACS-TR-89-49, CS-TR-2245, Department of Computer Science, University of Maryland, College Park, MD 20742, </institution> <month> May </month> <year> 1989. </year>
Reference: [Sto75] <author> Michael Stonebraker. </author> <title> Implementation of Integrity Constraints and Views by Query Modification. </title> <booktitle> In Proc. of the ACM SIGMOD Conference, </booktitle> <pages> pages 65-78, </pages> <address> San Jose, California, </address> <month> May </month> <year> 1975. </year>
Reference: [Sto87] <author> Michael Stonebraker. </author> <title> The Design of the POSTGRES Storage System.. </title> <booktitle> In Proc. of the Very Large Data Bases (VLDB) Conference, </booktitle> <pages> pages 289-300, </pages> <address> Brighton, England, </address> <month> September </month> <year> 1987. </year>
Reference: [Val87] <author> Patrick Valduriez. </author> <title> Join Indices. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(2) </volume> <pages> 218-246, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: The min, max values were different among experiments and were picked so that the join selectivity would result in a view with roughly the same size as each of the two base relations. The materialized view in our system was stored in the form of a View Index ([Rou82], <ref> [Val87] </ref>), as another table. MAUVE , our online view maintenance algorithm that uses timestamps, was implemented on top of the Informix Universal Server version 9.12 ([inf97]). It run as a separate client on the same machine where the server was running.
Reference: [Vis98] <author> Dimitra Vista. </author> <title> Incremental View Maintenance as an Optimization Problem. </title> <booktitle> In Proc. of the International Conference on Extending Database Technology (EDBT), </booktitle> <address> Valencia, Spain, </address> <month> March </month> <year> 1998. </year> <note> (to appear). </note>
Reference: [ZGMHW95] <author> Yue Zhuge, Hector Garcia-Molina, Joachim Hammer, and Jennifer Widom. </author> <title> View Maintenance in a Warehousing Environment. </title> <editor> In Michael J. Carey and Donovan A. Schneider, editors, </editor> <booktitle> Proc. of the ACM SIGMOD Conference, </booktitle> <pages> pages 316-327, </pages> <address> San Jose, California, </address> <month> May </month> <year> 1995. </year>
Reference: [ZGMW96] <author> Yue Zhuge, Hector Garcia-Molina, and Janet L. Wiener. </author> <title> The Strobe Algorithms for MultiSource Warehouse Consistency. </title> <booktitle> In Proc. of the Conference on Parallel and Distributed Information Systems (PDIS), </booktitle> <address> Miami Beach, Florida, </address> <month> December </month> <year> 1996. </year> <month> 20 </month>
References-found: 34

