URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1996/UM-CS-1996-081.ps
Refering-URL: http://dis.cs.umass.edu/~wagner/pubs.html
Root-URL: 
Email: Email: fwagner,lesserg@cs.umass.edu  
Title: Design-to-Criteria Scheduling for Intermittent Processing  
Author: Thomas A. Wagner and Victor Lesser 
Date: November 16, 1996  
Address: Amherst, MA 01003-4601  
Affiliation: Computer Science Department Lederle Graduate Research Center University of Massachusetts  UMass Computer Science  
Pubnum: Technical Report 1996-81  
Abstract: TMS is an abstract task modeling framework used to describe the major components of tasks and to reason about trade-offs between various possible approaches of performing tasks. To better model certain classes of tasks that arise in distributed environments, we have enhanced the model to more accurately portray two classes of intermittent processing activities those that contain embedded delays, such as embedded I/O, and those that are affected by external delays, e.g., slow propagation of results from a different location. The enhancements are important because they help identify situations where local processing resources are under utilized and possibly idle. Accordingly, we must modify the Design-to-Criteria scheduling process and leverage the enhanced model to produce more efficient schedules. Modifications include determining when it is possible to overlap actions that contain embedded delays, and the ramifications to their execution profiles, and deciding what actions may be performed during an external delay. fl This material is based upon work supported by the National Science Foundation under Grant No. IRI-9523419, the Department of the Navy, Office of the Chief of Naval Research, under Grant No. N00014-95-1-1198, and via a subcontract from Boeing Helicopter which is being supported by DARPA under the RaDEO program (contract number 70NANB6H0074). The content of the information does not necessarily reflect the position or the policy of the Government, National Science Foundation, or Boeing Helicopter and no official endorsement should be inferred. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Carver and V. Lesser. </author> <title> The dresun testbed for research in fa/c distributed situation assessment: Extensions to the model of external evidence. </title> <booktitle> In Proceedings of the International Conference on Multiagent Systems, </booktitle> <month> June, </month> <year> 1995. </year>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [13, 15] and Design-to-Criteria scheduling [20], and multi-agent [7, 6, 8, 2] coordination research, and are being used in Cooperative-Information-Gathering [18, 19, 10], collaborative distributed design [9], and distributed situation assessment <ref> [1] </ref> projects. Over the last few years TMS has been extended to increase its representational power for modeling "real world" problem solving systems. Most notable among these extensions are the additions of explicit representations of uncertainty [14] and multiple outcomes [16].
Reference: [2] <author> Keith S. Decker. </author> <title> Environment Centered Analysis and Design of Coordination Mechanisms. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <year> 1995. </year>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [13, 15] and Design-to-Criteria scheduling [20], and multi-agent <ref> [7, 6, 8, 2] </ref> coordination research, and are being used in Cooperative-Information-Gathering [18, 19, 10], collaborative distributed design [9], and distributed situation assessment [1] projects. Over the last few years TMS has been extended to increase its representational power for modeling "real world" problem solving systems.
Reference: [3] <author> Keith S. Decker. </author> <title> TMS: A framework for analysis and design of coordination mechanisms. </title> <editor> In G. O'Hare and N. Jennings, editors, </editor> <booktitle> Foundations of Distributed Artificial Intelligence, chapter 16. </booktitle> <publisher> Wiley Inter-Science, </publisher> <year> 1995. </year> <month> Forthcoming. </month>
Reference-contexts: 1 Introduction TMS (Task Analysis, Environment Modeling, and Simulation) <ref> [3, 4, 5] </ref> is a task modeling framework used to describe and reason about complex problem solving processes.
Reference: [4] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Quantitative modeling of complex computational task environments. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 217-224, </pages> <address> Washington, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: 1 Introduction TMS (Task Analysis, Environment Modeling, and Simulation) <ref> [3, 4, 5] </ref> is a task modeling framework used to describe and reason about complex problem solving processes.
Reference: [5] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Quantitative modeling of complex environments. </title> <journal> International Journal of Intelligent Systems in Accounting, Finance, and Management, </journal> <volume> 2(4) </volume> <pages> 215-234, </pages> <month> December </month> <year> 1993. </year> <title> Special issue on "Mathematical and Computational Models of Organizations: Models and Characteristics of Agent Behavior". </title> <type> 16 </type>
Reference-contexts: 1 Introduction TMS (Task Analysis, Environment Modeling, and Simulation) <ref> [3, 4, 5] </ref> is a task modeling framework used to describe and reason about complex problem solving processes.
Reference: [6] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Designing a family of coordination algorithms. </title> <booktitle> In Proceedings of the Thirteenth International Workshop on Distributed AI, </booktitle> <pages> pages 65-84, </pages> <address> Seattle, WA, </address> <month> July </month> <year> 1994. </year> <note> AAAI Press Technical Report WS-94-02. Also UMass CS-TR-94-14. </note> <editor> To appear, </editor> <booktitle> Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <address> San Francisco, </address> <publisher> AAAI Press, </publisher> <year> 1995. </year>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [13, 15] and Design-to-Criteria scheduling [20], and multi-agent <ref> [7, 6, 8, 2] </ref> coordination research, and are being used in Cooperative-Information-Gathering [18, 19, 10], collaborative distributed design [9], and distributed situation assessment [1] projects. Over the last few years TMS has been extended to increase its representational power for modeling "real world" problem solving systems.
Reference: [7] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Experimenting with a family of coordination algorithms. </title> <note> Submitted to IJCAI-95, </note> <year> 1994. </year>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [13, 15] and Design-to-Criteria scheduling [20], and multi-agent <ref> [7, 6, 8, 2] </ref> coordination research, and are being used in Cooperative-Information-Gathering [18, 19, 10], collaborative distributed design [9], and distributed situation assessment [1] projects. Over the last few years TMS has been extended to increase its representational power for modeling "real world" problem solving systems.
Reference: [8] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Task environment centered design of organizations. </title> <editor> In Ingemar Hulthage, editor, </editor> <booktitle> Computational Organization Design. AAAI Spring Symposium, </booktitle> <year> 1994. </year> <note> Working Notes. </note>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [13, 15] and Design-to-Criteria scheduling [20], and multi-agent <ref> [7, 6, 8, 2] </ref> coordination research, and are being used in Cooperative-Information-Gathering [18, 19, 10], collaborative distributed design [9], and distributed situation assessment [1] projects. Over the last few years TMS has been extended to increase its representational power for modeling "real world" problem solving systems.
Reference: [9] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Coordination assistance for mixed human and computational agent systems. </title> <booktitle> In Proceedings of Concurrent Engineering 95, </booktitle> <pages> pages 337-348, </pages> <address> McLean, VA, </address> <year> 1995. </year> <institution> Concurrent Technologies Corp. </institution> <note> Also available as UMASS CS TR-95-31. </note>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [13, 15] and Design-to-Criteria scheduling [20], and multi-agent [7, 6, 8, 2] coordination research, and are being used in Cooperative-Information-Gathering [18, 19, 10], collaborative distributed design <ref> [9] </ref>, and distributed situation assessment [1] projects. Over the last few years TMS has been extended to increase its representational power for modeling "real world" problem solving systems. Most notable among these extensions are the additions of explicit representations of uncertainty [14] and multiple outcomes [16].
Reference: [10] <author> K.S. Decker, V.R. Lesser, M.V. Nagendra Prasad, and T. Wagner. MACRON: </author> <title> an architecture for multi-agent cooperative information gathering. </title> <booktitle> In Proccedings of the CIKM-95 Workshop on Intelligent Information Agents, </booktitle> <address> Baltimore, MD, </address> <year> 1995. </year>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [13, 15] and Design-to-Criteria scheduling [20], and multi-agent [7, 6, 8, 2] coordination research, and are being used in Cooperative-Information-Gathering <ref> [18, 19, 10] </ref>, collaborative distributed design [9], and distributed situation assessment [1] projects. Over the last few years TMS has been extended to increase its representational power for modeling "real world" problem solving systems.
Reference: [11] <author> E. Durfee and V. Lesser. </author> <title> Predictability vs. responsiveness: Coordinating problem solvers in dynamic domains. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 66-71, </pages> <address> St. Paul, Minnesota, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: However, in situations where rescheduling is not appealing, the scheduler can create less efficient schedules that are more fault tolerant by making more conservative probabilistic assumptions about quality, cost, duration and uncertainty. This relates somewhat to previous work done by Durfee and Lesser <ref> [11] </ref> in which schedules are made "loose" by increasing duration expectations when building schedules, effectively creating a slack-time buffer between each action.
Reference: [12] <author> S. Fujita and V. Lesser. </author> <title> Cooperative tasks in coarse grain search problems. </title> <type> CS Technical Report 96-28, </type> <institution> Univ. of Massachusetts, </institution> <year> 1996. </year>
Reference-contexts: This "doubling up" of methods is different than the previous concurrent TMS related scheduling work <ref> [17, 12] </ref> in which schedules are constructed for multiple processors or multiple lines of control. The most important difference between the models is not the issues they must address, but rather their applicability to certain domains or certain classes of task structures.
Reference: [13] <author> Alan Garvey and Victor Lesser. </author> <title> Design-to-time real-time scheduling. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 23(6) </volume> <pages> 1491-1502, </pages> <year> 1993. </year>
Reference-contexts: The explicit representation of alternative approaches to performing tasks, and the statistical characterization of primitive actions, allow TMS users and tools to reason about the quality, cost, and duration trade-offs of different possible courses of action. TMS models are the grounding element and medium of exchange for Design-to-Time <ref> [13, 15] </ref> and Design-to-Criteria scheduling [20], and multi-agent [7, 6, 8, 2] coordination research, and are being used in Cooperative-Information-Gathering [18, 19, 10], collaborative distributed design [9], and distributed situation assessment [1] projects.
Reference: [14] <author> Alan Garvey and Victor Lesser. </author> <title> Design-to-time scheduling with uncertainty. </title> <type> CS Technical Report 95-03, </type> <institution> University of Massachusetts, </institution> <year> 1995. </year>
Reference-contexts: Over the last few years TMS has been extended to increase its representational power for modeling "real world" problem solving systems. Most notable among these extensions are the additions of explicit representations of uncertainty <ref> [14] </ref> and multiple outcomes [16]. The uncertainty enhancement entails representing and reasoning about actions and trade-offs using discrete probability distributions rather than simple expected values. The detail provided by the full uncertainty representation enables probabilistic reasoning about different aspects of each dimension.
Reference: [15] <author> Alan Garvey and Victor Lesser. </author> <title> Representing and scheduling satisficing tasks. In Swaminathan Natarajan, editor, </title> <journal> Imprecise and Approximate Computation, </journal> <pages> pages 23-34. </pages> <publisher> Kluwer Academic Publishers, Norwell, </publisher> <address> MA, </address> <year> 1995. </year>
Reference-contexts: The explicit representation of alternative approaches to performing tasks, and the statistical characterization of primitive actions, allow TMS users and tools to reason about the quality, cost, and duration trade-offs of different possible courses of action. TMS models are the grounding element and medium of exchange for Design-to-Time <ref> [13, 15] </ref> and Design-to-Criteria scheduling [20], and multi-agent [7, 6, 8, 2] coordination research, and are being used in Cooperative-Information-Gathering [18, 19, 10], collaborative distributed design [9], and distributed situation assessment [1] projects.
Reference: [16] <author> Alan Garvey and Victor Lesser. </author> <title> Issues in design-to-time real-time scheduling. </title> <booktitle> In AAAI Fall 1996 Symposium on Flexible Computation, </booktitle> <month> November </month> <year> 1996. </year>
Reference-contexts: Over the last few years TMS has been extended to increase its representational power for modeling "real world" problem solving systems. Most notable among these extensions are the additions of explicit representations of uncertainty [14] and multiple outcomes <ref> [16] </ref>. The uncertainty enhancement entails representing and reasoning about actions and trade-offs using discrete probability distributions rather than simple expected values. The detail provided by the full uncertainty representation enables probabilistic reasoning about different aspects of each dimension.
Reference: [17] <author> Qiegang Long and Victor Lesser. </author> <title> A heuristic real-time parallel scheduler based on task structures. </title> <type> CS technical report, </type> <institution> University of Massachusetts, </institution> <year> 1995. </year> <note> In preparation. </note>
Reference-contexts: This "doubling up" of methods is different than the previous concurrent TMS related scheduling work <ref> [17, 12] </ref> in which schedules are constructed for multiple processors or multiple lines of control. The most important difference between the models is not the issues they must address, but rather their applicability to certain domains or certain classes of task structures.
Reference: [18] <author> Tim Oates, M. V. Nagendra Prasad, and Victor R. Lesser. </author> <title> Cooperative information gathering: A distributed problem solving approach. </title> <type> Technical Report 94-66, </type> <institution> Department of Computer Science, University of Massachusetts, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [13, 15] and Design-to-Criteria scheduling [20], and multi-agent [7, 6, 8, 2] coordination research, and are being used in Cooperative-Information-Gathering <ref> [18, 19, 10] </ref>, collaborative distributed design [9], and distributed situation assessment [1] projects. Over the last few years TMS has been extended to increase its representational power for modeling "real world" problem solving systems.
Reference: [19] <author> Tim Oates, M. V. Nagendra Prasad, Victor R. Lesser, and Keith S. Decker. </author> <title> A distributed problem solving approach to cooperative information gathering. </title> <booktitle> In AAAI Spring Symposium on Information Gathering in Distributed Environments, </booktitle> <institution> Stanford University, </institution> <month> March </month> <year> 1995. </year> <month> 17 </month>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [13, 15] and Design-to-Criteria scheduling [20], and multi-agent [7, 6, 8, 2] coordination research, and are being used in Cooperative-Information-Gathering <ref> [18, 19, 10] </ref>, collaborative distributed design [9], and distributed situation assessment [1] projects. Over the last few years TMS has been extended to increase its representational power for modeling "real world" problem solving systems.
Reference: [20] <author> Thomas Wagner, Alan Garvey, and Victor Lesser. </author> <title> Satisficing evaluation functions: The heart of the new design-to-criteria paradigm. </title> <institution> In UMASS Department of Computer Science Technical Report TR-1996-82, </institution> <month> November, </month> <year> 1996. </year>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [13, 15] and Design-to-Criteria scheduling <ref> [20] </ref>, and multi-agent [7, 6, 8, 2] coordination research, and are being used in Cooperative-Information-Gathering [18, 19, 10], collaborative distributed design [9], and distributed situation assessment [1] projects. Over the last few years TMS has been extended to increase its representational power for modeling "real world" problem solving systems. <p> This will enable clients to specify things like "meeting commitment C is more important that anything else, including quality, cost, and duration." The satisficing approach will be similar to that used to handle satisficing at the alternative and schedule level with respect to quality, cost, duration, thresholds and uncertainty <ref> [20] </ref>. After each schedule is generated (all methods are added or discarded due to constraints) it is critiqued by a set of improvement heuristics that ascertain if adding other methods or alternatives to the schedule will improve its overall quality, cost, and duration characteristics.
Reference: [21] <author> Shlomo Zilberstein. </author> <title> Operational rationality through compilation of anytime algorithms. </title> <type> Ph.D. Dissertation, </type> <institution> Department of Computer Science, University of California at Berkeley, Berkeley, </institution> <address> CA, </address> <year> 1993. </year>
Reference-contexts: Schedules are then rated against the client's quality, cost, and duration criteria and the best one is returned for execution. This iterative process has an anytime <ref> [22, 21] </ref> flavor since generating the set of alternatives for the root task is relatively cheap complexity-wise and fast real-timewise, due to complexity control, compared to the process of building schedules.
Reference: [22] <author> Shlomo Zilberstein and Stuart J. Russell. </author> <title> Constructing utility-driven real-time systems using anytime algorithms. </title> <booktitle> In Proceedings of the IEEE Workshop on Imprecise and Approximate Computation, </booktitle> <pages> pages 6-10, </pages> <address> Phoenix, AZ, </address> <month> December </month> <year> 1992. </year> <month> 18 </month>
Reference-contexts: Schedules are then rated against the client's quality, cost, and duration criteria and the best one is returned for execution. This iterative process has an anytime <ref> [22, 21] </ref> flavor since generating the set of alternatives for the root task is relatively cheap complexity-wise and fast real-timewise, due to complexity control, compared to the process of building schedules.
References-found: 22

