URL: http://www.iiia.csic.es/~marco/pub/IIIA-96-06.ps.gz
Refering-URL: http://www.iiia.csic.es/Reports/1996/IIIA-RR-96.html
Root-URL: 
Email: E-mail: fmarco,agustig@iiia.csic.es  
Phone: Phone: +34-3-5809570, Fax: +34-3-5809661  
Title: Inclusional Theories in Declarative Programming  
Author: W. Marco Schorlemmer Jaume Agust 
Keyword: Inclusional Theories, Transitive Relations, Bi-rewriting, Chaining, Theorem Proving.  
Address: Campus UAB, 08193 Bellaterra, Catalonia (Spain)  
Affiliation: Institut d'Investigacio en Intelligencia Artificial Consejo Superior de Investigaciones Cientficas  
Abstract: When studying specific deduction techniques and strategies for operational semantics of logic programming languages special emphasis was put on the equality relation, due to its interest in a variety of different domains. But recently special emphasis has been put on partial order relations, and specifically on inclusions, as a basis for several different specification frameworks. It is therefore attractive to work towards a logic programming language which deals efficiently with inclusions, and which may be useful as a rapid prototyping tool. Term rewriting appears to be a suitable technique for theorem proving with inclusional theories, since it naturally applies to arbitrary (possibly non-symmetric) transitive relations, but turns out to be impractical in general. Therefore several restrictions need to be put on inclu-sional theories in order to improve the inference mechanism and to define efficient deduction strategies, which could be used in an operational semantics of an inclusional programming language. There is also a lack of specific methodologies for solving problems with inclusions. Restriction to specific algebraic structures, like lattices, seems to be a promising approach. Furthermore, evaluating functional expressions by reduction to normal forms is meaningless in this programming paradigm, and should be replaced by the notion of sort checking of sort expressions built with user-defined functions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. At-Kaci and A. </author> <title> Podelski. Towards a meaning of LIFE. </title> <journal> Journal of Logic Programming, </journal> <volume> 16 </volume> <pages> 195-234, </pages> <year> 1993. </year>
Reference-contexts: For example, At-Kaci and Podelski make use of order-sorted feature terms as basic data structure of the programming language LIFE <ref> [1] </ref>, generalising in this way the flat first-order terms normally used as unique data structure in logic programming.
Reference: [2] <author> L. Bachmair, N. Dershowitz, and J. Hsiang. </author> <title> Orderings for equational proofs. </title> <booktitle> In Symposium of Logic in Computer Science, </booktitle> <pages> pages 346-357, </pages> <year> 1986. </year> <month> 8 </month>
Reference-contexts: reflexivity, transitivity and monotonicity inference rules of the inclusion relation 4 actually it is a descision algorithm because of termination 5 this notation means that u is a subterm of term l 2 6 the definition of variable instance pairs also appears in the context of rewriting modulo a congruence <ref> [2] </ref> 4 Following the same ideas proposed by Knuth and Bendix, one can attempt to complete a non--convergent terminating bi-rewriting system, by means of adding divergent critical and variable instance pairs as new rewrite rules to the systems R 1 or R 2 .
Reference: [3] <author> L. Bachmair and H. Ganzinger. </author> <title> Ordered chaining for total orderings. </title> <editor> In A. Bundy, editor, </editor> <booktitle> Automated Deduction | CADE'12, volume 814 of LNAI, </booktitle> <pages> pages 435-450. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Another way to improve the efficiency of the inference system is by studying certain algebraic structures, which can help us to consider only certain cases of variable subterm chaining. It is known, e.g. that in dense total orderings without endpoints, variable chaining can be avoided completely <ref> [3] </ref>. 7 at least in those terms which are the greatest in a clause (with respect to the reduction ordering) 6 5.1 A programming language based on lattice structure This latter options appears to be more promising, since most of the specification frameworks based on partial orders mentioned in the introduction
Reference: [4] <author> L. Bachmair and H. Ganzinger. </author> <title> Rewrite-based equational theorem proving with selection and simplification. </title> <journal> Journal of Logic and Computation, </journal> <volume> 4(3) </volume> <pages> 1-31, </pages> <year> 1994. </year>
Reference-contexts: The desire to unify the programming paradigms based on Horn clause logic and equational logic in one unique framework have brought researchers to make efforts to apply term rewriting techniques to resolution-based theorem proving for first-order clauses with equality, which result in the paramodulation and superposition calculi <ref> [4] </ref>. But, since rewrite rules rewrite terms in one direction, it is not only in reasoning with the equality relation where these techniques naturally apply, but in reasoning with arbitrary, possibly non-symmetric, transitive relations.
Reference: [5] <author> L. Bachmair and H. Ganzinger. </author> <title> Rewrite techniques for transitive relations. </title> <booktitle> In Proc., Ninth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 384-393, </pages> <year> 1994. </year>
Reference-contexts: Levy and Agust [12] developed the so called bi-rewriting systems, and the generalization of bi-rewriting to theorem proving with full first-order clauses with arbitrary transitive relations has been made by Bachmair and Ganzinger <ref> [5] </ref>, who introduced the ordered chaining calculus, which generalizes the superposition calculus to arbitrary transitive relations. 3.1 Bi-rewriting systems Bi-rewriting systems attempt to provide a decision procedure for theories with inclusions (reflexive, transitive, monotonic, non-symmetric relations). <p> The result are the calculi based on ordered chaining <ref> [5] </ref>. The generation of new inclusions from critical or variable instance pairs can be seen as an ordered version of the chaining inference rule. In this context, as in the equational case, the process of completion, is known as saturation.
Reference: [6] <author> N. Dershowitz. </author> <title> Termination of rewriting. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 3 </volume> <pages> 69-116, </pages> <year> 1987. </year>
Reference-contexts: c) If we orient these inclusions, following e.g. a lexicographic path ordering based on the signature precedence f c b a 1 , we obtain the following two rewrite systems: R 1 = &lt; f (a; x) ! x 1 we refer to Dershowitz for a survey on termination orderings <ref> [6] </ref> 3 R 2 = f (a; c) ! b We say that these two rewrite systems form a bi-rewriting system B = hR 1 ; R 2 i.
Reference: [7] <author> B. Jayaraman, M. Osorio, and K. Moon. </author> <title> Partial order programming (revisited). </title> <booktitle> In Proc. Algebraic Methodology and Software Technology (AMAST), </booktitle> <pages> pages 561-575, </pages> <year> 1995. </year>
Reference-contexts: Also Jayaraman, Osorio and Moon base their partial order programming paradigm on a lattice structure, and are specially interested on the complete lattice of finite sets <ref> [7] </ref>. In their paradigm they pursue the aim to integrate sets into logic programming, and to consider them as basic data structure on which the paradigm relies.
Reference: [8] <author> J.-P. Jouannaud and H. Kirchner. </author> <title> Completion of a set of rules modulo a set of equations. </title> <journal> SIAM Journal of Computing, </journal> <volume> 15 </volume> <pages> 1155-1194, </pages> <year> 1986. </year>
Reference-contexts: We know from the completion of equational theories, that the process may fail to orient a critical pair with the given reduction ordering. There have been various variants of completion to overcome this situation <ref> [10, 17, 8] </ref>, which can also be generalized to bi-rewriting systems [13]. 3.2 Ordered chaining Like the use of rewrite techniques in resolution-based theorem proving has introduced ordering restrictions on the paramodulation inference leading to the superposition calculus (which in essence generalizes the critical pair computation of the unfailing variant of
Reference: [9] <author> D. E. Knuth and P. B. Bendix. </author> <title> Simple word problems in universal algebras. </title> <editor> In J. Leech, editor, </editor> <booktitle> Computational Problems in Abstract Algebra, </booktitle> <pages> pages 263-297. </pages> <publisher> Pergamon Press, </publisher> <year> 1970. </year>
Reference-contexts: But, like in the equational case, there exist necessary and sufficient conditions for a terminating bi-rewriting system to be Church-Rosser, which were stated by Levy and Agust adapting the original results of Knuth and Bendix <ref> [9] </ref>.
Reference: [10] <author> D. S. Lankford and A. Ballantyne. </author> <title> Decision procedures for simple equational theories with permutative axioms: Complete sets of permutative reductions. </title> <type> Technical Report ATP-37, </type> <institution> Department of Mathematics and Computer Science, University of Texas, </institution> <year> 1977. </year>
Reference-contexts: We know from the completion of equational theories, that the process may fail to orient a critical pair with the given reduction ordering. There have been various variants of completion to overcome this situation <ref> [10, 17, 8] </ref>, which can also be generalized to bi-rewriting systems [13]. 3.2 Ordered chaining Like the use of rewrite techniques in resolution-based theorem proving has introduced ordering restrictions on the paramodulation inference leading to the superposition calculus (which in essence generalizes the critical pair computation of the unfailing variant of
Reference: [11] <author> J. Levy. </author> <title> The Calculus of Refinements: a Formal Specification Model Based on Inclusions. </title> <type> PhD thesis, </type> <institution> Departament de Llenguatges i Sistemes Informatics, Universitat Politecnica de Catalunya, </institution> <year> 1994. </year>
Reference-contexts: This framework is based on a partial order of a distributive lattice with a bottom. Similar intuitions where followed by Levy and Agust, who proposed the calculus of refinements <ref> [11] </ref>, a formal specification model based on inclusions. Their fl This work was supported by the project DISCOR (TIC 94-0847-C02-01) funded by the CICYT, and a research fellowship funded by the CSIC 1 approach showed to be useful for the preliminary specification and further stepwise refinement of complex systems [18]. <p> Based on the idea of handling variable instance pairs with rule schemes, Levy proposed in his PhD thesis <ref> [11] </ref> to attack this problem by means of using second-order bi-rewriting systems in order to handle the contexts mentioned above as second-order variables. In this case the inference requires the unification of second-order terms. Levy studied the unification of linear second-order terms and proposes a semi-decision procedure for it. <p> They also are well suited for expressing polymorphic operators, generic data types and nondeterministic choice. Furthermore the fact that completion of the inclusional theory of free lattices to a convergent bi-rewriting system is possible <ref> [11] </ref>, suggests to consider the properties of this specific algebraic structure for improving the deduction with inclusions. However this approach is not useful enough for a practical use of inclusions, as we will see later.
Reference: [12] <author> J. Levy and J. Agust. Bi-rewriting, </author> <title> a term rewriting technique for monotonic order relations. </title> <editor> In C. Kirchner, editor, </editor> <booktitle> Rewriting Techniques and Applications, volume 690 of LNCS, </booktitle> <pages> pages 17-31. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Techniques of term rewriting can be used in order to define a deduction mechanism for theories with non-symmetric relations. This was first done by Levy and Agust <ref> [12] </ref>, who generalized to inclusional theories the notions of confluence and termination of term rewrite systems based on equational theories, by introducing the so called bi-rewriting systems. <p> Therefore rewrite systems may also be used in order to provide decision procedures for the word problems in theories expressed with arbitrary transitive relations. Levy and Agust <ref> [12] </ref> developed the so called bi-rewriting systems, and the generalization of bi-rewriting to theorem proving with full first-order clauses with arbitrary transitive relations has been made by Bachmair and Ganzinger [5], who introduced the ordered chaining calculus, which generalizes the superposition calculus to arbitrary transitive relations. 3.1 Bi-rewriting systems Bi-rewriting systems <p> A critical or variable instance pair is said to be convergent if it has a bi-rewrite proof, and divergent otherwise. Theorem 3.1 (Levy and Agust <ref> [12] </ref>) A terminating bi-rewriting system B is Church-Rosser (and thus, convergent) if and only if there are no divergent critical or variable instance pairs between the rules of R 1 and the rules of R 2 . 2 to be rigorous we only need quasi-termination [12], but for the sake of <p> Theorem 3.1 (Levy and Agust <ref> [12] </ref>) A terminating bi-rewriting system B is Church-Rosser (and thus, convergent) if and only if there are no divergent critical or variable instance pairs between the rules of R 1 and the rules of R 2 . 2 to be rigorous we only need quasi-termination [12], but for the sake of simplicity, termination is required 3 entailment defined by the reflexivity, transitivity and monotonicity inference rules of the inclusion relation 4 actually it is a descision algorithm because of termination 5 this notation means that u is a subterm of term l 2 6 the definition
Reference: [13] <author> J. Levy and J. </author> <title> Agust. </title> <journal> Bi-rewriting systems. Journal of Symbolic Computation, </journal> <note> 1996. To be published. </note>
Reference-contexts: We know from the completion of equational theories, that the process may fail to orient a critical pair with the given reduction ordering. There have been various variants of completion to overcome this situation [10, 17, 8], which can also be generalized to bi-rewriting systems <ref> [13] </ref>. 3.2 Ordered chaining Like the use of rewrite techniques in resolution-based theorem proving has introduced ordering restrictions on the paramodulation inference leading to the superposition calculus (which in essence generalizes the critical pair computation of the unfailing variant of the Knuth-Bendix completion procedure), so ordering restrictions on the chaining inference
Reference: [14] <author> D. McAllester, B. Givan, and T. Fatima. </author> <title> Taxonomic syntax for first order inference. </title> <booktitle> In Proc. of the First Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 289-300, </pages> <year> 1989. </year>
Reference-contexts: Furthermore sometimes it is also interesting to take into account specific non-standard notations of first-order sentences, which will serve both purposes, to facilitate readability of our logical assertions and improve the efficiency of logical deductions <ref> [14] </ref>. In this sense, one of the mainly used special deduction techniques is term rewriting, on which the operational semantics of functional and equational languages is based. Term rewriting techniques have turned out to be among the more successful approaches to equational theorem proving.
Reference: [15] <author> J. Meseguer. </author> <title> Conditional rewriting logic as a unified model of concurrency. </title> <journal> Journal of Theoretical Computer Science, </journal> <volume> 96 </volume> <pages> 73-155, </pages> <year> 1992. </year>
Reference-contexts: Their fl This work was supported by the project DISCOR (TIC 94-0847-C02-01) funded by the CICYT, and a research fellowship funded by the CSIC 1 approach showed to be useful for the preliminary specification and further stepwise refinement of complex systems [18]. Finally, Meseguer defined rewriting logic, <ref> [15] </ref>, based on rewrite relations, which turned out to be suitable as semantic framework for a variety of concurrent systems. Its embodiment in the language Maude may serve as a tool for the specification of such systems. <p> Furthermore we can use the rewrite relation as main concept in order to define a specific logic of rewriting, the rewriting logic of Meseguer <ref> [15] </ref>.
Reference: [16] <author> P. Mosses. </author> <title> Unified algebras and institutions. </title> <booktitle> In Principles of Programming Languages Conference, </booktitle> <pages> pages 304-312. </pages> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: Recently the interest of other relations besides equality, like partial orders, has emerged. Mosses introduced unified algebras <ref> [16] </ref>, a framework for the algebraic specification of abstract data types, where sorts are treated as values, so that operations may be applied to sorts as well as to the elements that they classify. This framework is based on a partial order of a distributive lattice with a bottom.
Reference: [17] <author> G. E. Peterson and M. E. Stickel. </author> <title> Complete sets of reductions for some equational theories. </title> <journal> Journal of the ACM, </journal> <volume> 28(2) </volume> <pages> 233-264, </pages> <year> 1981. </year>
Reference-contexts: We know from the completion of equational theories, that the process may fail to orient a critical pair with the given reduction ordering. There have been various variants of completion to overcome this situation <ref> [10, 17, 8] </ref>, which can also be generalized to bi-rewriting systems [13]. 3.2 Ordered chaining Like the use of rewrite techniques in resolution-based theorem proving has introduced ordering restrictions on the paramodulation inference leading to the superposition calculus (which in essence generalizes the critical pair computation of the unfailing variant of
Reference: [18] <author> D. Robertson, J. Agust, J. Hesketh, and J. Levy. </author> <title> Expressing program requirements using refinement lattices. </title> <journal> Fundamenta Informaticae, </journal> <volume> 21 </volume> <pages> 163-183, </pages> <year> 1994. </year>
Reference-contexts: Their fl This work was supported by the project DISCOR (TIC 94-0847-C02-01) funded by the CICYT, and a research fellowship funded by the CSIC 1 approach showed to be useful for the preliminary specification and further stepwise refinement of complex systems <ref> [18] </ref>. Finally, Meseguer defined rewriting logic, [15], based on rewrite relations, which turned out to be suitable as semantic framework for a variety of concurrent systems. Its embodiment in the language Maude may serve as a tool for the specification of such systems.
Reference: [19] <author> W. M. Schorlemmer and J. Agust. </author> <title> Theorem proving with transitive relations from a practical point of view. </title> <type> Technical Report IIIA 95/12, </type> <institution> Institut d'Investigacio en Intelligencia Artificial (CSIC), </institution> <year> 1995. </year>
Reference-contexts: Levy studied the unification of linear second-order terms and proposes a semi-decision procedure for it. The decidability of the unification of linear second-order terms remains an open problem. For a more extended survey on the state of the art of theorem proving with transitive relations we refer to <ref> [19] </ref>. 5 Towards Declarative Programming with Inclusions We have seen in the previous sections, that reasoning with transitive relations, and hence with inclusions, is well captured by term rewriting. The use of ordering restrictions on chaining based inferences has contributed to the improvement of theorem provers for inclusional theories.
Reference: [20] <author> J. R. Slagle. </author> <title> Automated theorem proving for theories with built-in theories including equality, partial orderings and sets. </title> <journal> Journal of the ACM, </journal> <volume> 19 </volume> <pages> 120-135, </pages> <year> 1972. </year> <month> 9 </month>
Reference-contexts: Slagle <ref> [20] </ref> was the first to propose an inference system for theories with equality, orderings and sets, based on the chaining inference rule, which essentially is the equivalent of the paramodulation rule for arbitrary transitive relations. <p> the use of rewrite techniques in resolution-based theorem proving has introduced ordering restrictions on the paramodulation inference leading to the superposition calculus (which in essence generalizes the critical pair computation of the unfailing variant of the Knuth-Bendix completion procedure), so ordering restrictions on the chaining inference rule introduced by Slagle <ref> [20] </ref> take the advantages of rewrite techniques resulting from bi-rewriting systems, and avoid generating the whole closure using bi-rewrite proofs to prove the validity of a transitive relation. The result are the calculi based on ordered chaining [5].
References-found: 20

