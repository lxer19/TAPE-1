URL: http://www.cis.upenn.edu/~switchware/papers/sigcom97.ps
Refering-URL: http://www.cis.upenn.edu/~switchware/home.html
Root-URL: 
Email: fsalex,marianne,nettles,jmsg@dsl.cis.upenn.edu  
Title: Active Bridging  
Author: D. Scott Alexander, Marianne Shaw, Scott M. Nettles and Jonathan M. Smith 
Note: This research was supported by DARPA under Contracts #N66001-96-C-852 and #DABT63-95-C-0073. Additional support was provided by the AT&T Foundation, the Hewlett-Packard Corporation and the Intel Corporation.  
Address: Pennsylvania  
Affiliation: CIS Department, University of  
Abstract: This paper describes the design, implementation, and performance of a new type of network element, an Active Bridge. The active bridge can be reprogrammed "on the fly", with loadable modules called switchlets. To demonstrate the use of the active property, we incrementally extend what is initially a programmable buffered repeater with switchlets into a self-learning bridge, and then a bridge supporting spanning tree algorithms. To demonstrate the agility that active networking gives, we show how it is possible to upgrade a network from an "old" protocol to a "new" protocol on-the-fly. Moreover, we are able to take advantage of information unavailable to the implementors of either protocol to validate the new protocol and fall back to the old protocol if an error is detected. This shows that the Active Bridge can protect itself from some algorithmic failures in loadable modules. Our approach to safety and security favors static checking and prevention over dynamic checks when possible. We rely on strong type checking in the Caml language for the loadable module infrastructure, and achieve respectable performance. The prototype implementation on a Pentium-based HP Netserver LS running Linux with 100 Mbps Ethernet LANS achieves ttcp throughput of 16 Mbps between two PCs running Linux, compared with 76 Mbps unbridged. Measured frame rates are in the neighborhood of 1800 frames per second. 
Abstract-found: 1
Intro-found: 1
Reference: [AM87] <author> A. W. Appel and D. B. MacQueen. </author> <title> A Standard ML Compiler. </title> <booktitle> In Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 301-324. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year> <booktitle> Volume 274 of Lecture Notes in Computer Science. </booktitle>
Reference-contexts: Dynamic linking provides the ability to add these switchlets to an executing program. Several recent networking efforts have also used dialects of ML. For example, Biagioni [Bia94] describes a TCP implementation based on Standard ML of New Jersey <ref> [AM87] </ref> and van Renesse [vR96] discusses a network stack implementation also based on Caml. 4 Network Bridges Network designers must trade off complexities of addressing and routing. Bridges 1 are data link layer network elements that interconnect LANs to make extended LANs (ELANs) [Per92].
Reference: [Bak78] <author> Henry G. Baker. </author> <title> List processing in real-time on a serial computer. </title> <journal> Communications of the ACM, </journal> <volume> 21(4) </volume> <pages> 280-94, </pages> <year> 1978. </year>
Reference-contexts: If measurements show that the collector is the bottle neck, then this is a likely source of improvement. Other concurrent collector technologies are available as well, many based on Baker's algorithm <ref> [Bak78] </ref>, and others on techniques that are especially well suited for ML [NO93, ON94]. We also built a very simple buffered repeater in C to try to determine the smallest overheads that a user mode program could expect to see.
Reference: [BCZ96] <author> Samrat Bhattacharjee, Ken Calvert, and Ellen W. Zegura. </author> <title> Implementation of an active network architecture. </title> <type> Technical report, </type> <institution> Geor-gia Institute of Technology, </institution> <month> July </month> <year> 1996. </year> <note> White paper presented at Gigabit Switch Technology Workshop, </note> <institution> Washington University. </institution>
Reference-contexts: Other work at MIT [WEK96] has demonstrated methods for loading network modules (Application-Specific Safe Handlers, or ASHs) into O.S. kernels. Like our work, ASHs rely on pre-module loading static analyses; we believe that the Caml approach offers a better long-term opportunity for formal verification. Zegura, et al. <ref> [BCZ96] </ref> have designed a similar IP-based system, which demultiplexes an arriving packet with the option flag, IPOPT AP, to a pre-loaded function under SunOS. This approach has two flaws from our perspective. First, it appears inflexible with respect to applications loading new functions on-the-fly.
Reference: [Bia94] <author> E. Biagioni. </author> <title> A structured TCP in Standard ML. </title> <booktitle> Proceedings, 1994 SIGCOMM Conference, </booktitle> <pages> pages 36-45, </pages> <year> 1994. </year>
Reference-contexts: The byte code format provided by Caml provides us with a machine independent format that is compact for transmitting switchlets over the network. Dynamic linking provides the ability to add these switchlets to an executing program. Several recent networking efforts have also used dialects of ML. For example, Biagioni <ref> [Bia94] </ref> describes a TCP implementation based on Standard ML of New Jersey [AM87] and van Renesse [vR96] discusses a network stack implementation also based on Caml. 4 Network Bridges Network designers must trade off complexities of addressing and routing.
Reference: [CJRS89] <author> D. Clark, V. Jacobson, J. Romkey, and H. Sal-wen. </author> <title> An analysis of tcp processing overhead. </title> <journal> IEEE Communications Magazine, </journal> <volume> 27(6) </volume> <pages> 23-29, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Latency in a bridge is additional delay incurred by passage through the logic and buffering of the bridge compared to an unbridged system. Bridge throughput will be affected by both per-packet costs and the per-byte costs <ref> [CJRS89] </ref>, or what Pasquale [KP93] has called data-touching costs and non-data-touching costs. Bridge throughput will vary across packet size mixes, for example, very small packets will incur almost all of their overhead as non-data-touching costs.
Reference: [CSZ92] <author> D. Clark, Scott Shenker, and L. Zhang. </author> <title> Supporting real-time applications in an integrated service packet network: Architecture and mechanism. </title> <booktitle> In Proceedings, 1992 SIGCOMM Conference, </booktitle> <pages> pages 14-26, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: Unfortunately, key parts of the network infrastructure evolve much more slowly, often taking more than half a decade to make their way from presentation at SIGCOMM to deployment by Internet Service Providers. For example, consider the five or more year time-line from RSVP conceptualization <ref> [CSZ92] </ref> to deployment [Pap96]. The existing network software infrastructure evolves slowly because of an important and fundamental design goal, the need for interoperability. Interoperability is achieved in the current Internet by using the hourglass model of networking shown in Figure 1.
Reference: [DL93] <author> Damien Doligez and Xavier Leroy. </author> <title> A concurrent generational garbage collector for a multi-threaded implementation of ML. </title> <booktitle> In Conference Record of the Twentieth Annual ACM Symposium on Principles of Programming Languages, ACM SIGPLAN Notices, </booktitle> <pages> pages 113-123. </pages> <publisher> ACM Press, </publisher> <month> January </month> <year> 1993. </year>
Reference-contexts: Caml does have a native code compiler, although some work will be needed to adapt it so that it can deal with dynamically loaded switchlets. The final possibility is that we are seeing interference from the garbage collector. The Caml collector is based on the concurrent collector described in <ref> [DL93] </ref>, but the released implementation does not use multiple threads to run the collector. If measurements show that the collector is the bottle neck, then this is a likely source of improvement.
Reference: [EBE + 86] <author> W. Edmond, S. Blumenthal, A. Echenique, S. Storch, T. Calderwood, and T. Rees. </author> <title> The butterfly(tm) satellite imp for the wideband packet satellite network. </title> <booktitle> In Proc. 1986 ACM SIGCOMM Conference, </booktitle> <pages> pages 194-203, </pages> <year> 1986. </year>
Reference-contexts: They allow protected user mode access to network devices which has reduced the boundary crossing costs. 7.4 Scalability Using a general-purpose multiprocessor as a switch is an established technique for experimental packet-switching networks <ref> [EBE + 86, KEM + 78] </ref>. The major performance limitations associated with such a platform are bus and memory bandwidth limitations inherent in an architecture not specialized for scaling or aggregation.
Reference: [FMS98] <author> D. C. Feldmeier, A. McAuley, and J. M. Smith. </author> <title> Protocol boosters. </title> <booktitle> IEEE JSAC Special Issue on Protocol Architectures for the 21st Century, </booktitle> <year> 1998. </year>
Reference-contexts: The goal in developing such networks is to greatly increase the flexibility and customizability of the network, and to thus accelerate the pace at which network software is deployed and evolves. Active Networks provide an infrastructure for implementing earlier approaches to evolving networks such as "Protocol Boosters" <ref> [FMS98] </ref>. SwitchWare [SFG + 96] is an experimental active networking project with the goal of using active networks to facilitate rapid network evolution. This effort must begin with an architecture for the nodes that comprise the active network.
Reference: [HKS84] <author> W. Hawe, A. Kirby, and B. Stewart. </author> <title> Transparent interconnection of local area networks with bridges. </title> <journal> Journal of Telecommunication Networks, </journal> <month> September </month> <year> 1984. </year>
Reference-contexts: When bridges interconnect broadcast LANs such as Ethernet, they must provide the illusion that the ELAN is a broadcast network. For LANs L 1 and L 2 , a "dumb" bridge would broadcast all frames seen on L 1 to L 2 and vice-versa. A self-learning bridge <ref> [HKS84] </ref> optimizes this behavior by tracking packet source addresses; if the destination of a frame lies on L 1 then frames destined for that host need 1 Throughout this paper, all bridges are transparent bridges, which are invisible to hosts, unlike the less common source routing bridges. not be forwarded to
Reference: [HMPP96] <author> John Hartman, Udi Manber, Larry Peterson, and Todd Proebsting. </author> <title> Liquid software: A new paradigm for networked systems. </title> <type> Technical Report TR 96-11, </type> <institution> University of Arizona, </institution> <month> June </month> <year> 1996. </year> <note> http://www.cs.arizona.edu/liquid/. </note>
Reference-contexts: First, it appears inflexible with respect to applications loading new functions on-the-fly. Second, to address this flexibility limitation with modifications to SunOS, there will be security risks unless languages and tools are used to validate loaded modules, as in our approach. Liquid Software <ref> [HMPP96] </ref> extends the capabilities of the Java language bytecodes as mobile code fragments. Major foci are technologies for fast compilation of mobile code (to ensure high packet processing rates) and runtime sup port using the Scout operating system as a basis.
Reference: [IEE93] <author> IEEE. </author> <title> Media access control (mac) bridges. </title> <type> Technical Report ISO/IEC 10038, </type> <institution> ISO/IEC, </institution> <year> 1993. </year>
Reference-contexts: The third and final switchlet implements the spanning tree functionality. This switchlet adds a function that registers with the demultiplexer requesting packets addressed to the All Bridges multicast address. All other packets continue to be sent to the learning function from the second switchlet. Based on the 802.1D protocol <ref> [IEE93] </ref>, this function takes part in the calculation of the spanning tree for the network. Then it uses access points in the previous switchlets to suppress the traffic from certain input and output ports.
Reference: [KEM + 78] <author> D. Katsuki, E. S. Elsam, W. F. Mann, E. S. Roberts, J. G. Robinson, F. S. Skowronski, and E. W. Wolf. Pluribus: </author> <title> An operational fault-tolerant multiprocessor. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 66(10) </volume> <pages> 1146-1159, </pages> <month> October </month> <year> 1978. </year>
Reference-contexts: They allow protected user mode access to network devices which has reduced the boundary crossing costs. 7.4 Scalability Using a general-purpose multiprocessor as a switch is an established technique for experimental packet-switching networks <ref> [EBE + 86, KEM + 78] </ref>. The major performance limitations associated with such a platform are bus and memory bandwidth limitations inherent in an architecture not specialized for scaling or aggregation.
Reference: [KP93] <author> Jonathan Kay and Joseph Pasquale. </author> <title> The importance of non-data touching processing overheads in tcp/ip. </title> <booktitle> In Proceedings ACM SIG-COMM Conference, </booktitle> <pages> pages 259-269, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Latency in a bridge is additional delay incurred by passage through the logic and buffering of the bridge compared to an unbridged system. Bridge throughput will be affected by both per-packet costs and the per-byte costs [CJRS89], or what Pasquale <ref> [KP93] </ref> has called data-touching costs and non-data-touching costs. Bridge throughput will vary across packet size mixes, for example, very small packets will incur almost all of their overhead as non-data-touching costs.
Reference: [Ler95] <author> Xavier Leroy. </author> <title> The Caml Special Light System (Release 1.10). </title> <institution> INRIA, France, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: We discuss why strong typing provides safety advantages in some detail in Section 5.1.2. Because ML [MTH90] is strongly typed, is well studied by programming language semanticists, and because we have some considerable local ML expertise, we have chosen to use Caml <ref> [Ler95] </ref>, an ML dialect, for our work. Caml also has two additional advantages for our work: byte codes and dynamic linking. The byte code format provided by Caml provides us with a machine independent format that is compact for transmitting switchlets over the network.
Reference: [LMB + 96] <author> I. M. Leslie, D. McAuley, R. Black, T. Roscoe, P. Barham, D. Evers, R. Fairbairns, and E. Hy-den. </author> <title> The design and implementation of an operating system to support distributed multimedia applications. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 14(7) </volume> <pages> 1280-1297, </pages> <month> Septem-ber </month> <year> 1996. </year>
Reference-contexts: Aspects of such a model have been examined in the context of the Nemesys operating system for multimedia applications <ref> [LMB + 96] </ref>, and in some sense by capability-based systems. If switchlets were written in a weakly typed language like C, a switchlet would be able to access any part of its address space.
Reference: [MTH90] <author> R. Milner, M. Tofte, and R. Harper. </author> <title> The Definition of Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: These advantages derive from the use of strong typing, supplemented by automatic storage management (garbage collection), and array bounds checking. We discuss why strong typing provides safety advantages in some detail in Section 5.1.2. Because ML <ref> [MTH90] </ref> is strongly typed, is well studied by programming language semanticists, and because we have some considerable local ML expertise, we have chosen to use Caml [Ler95], an ML dialect, for our work. Caml also has two additional advantages for our work: byte codes and dynamic linking. <p> The interaction between the Scout system and the Java API should provide some valuable lessons in the nature of a virtual machine that could support Active Nets. The choice of Java is a potential weakness, as a number of serious security problems have been discovered. Unlike ML <ref> [MTH90] </ref>, Java lacks a mathematical definition, making formal analysis of programs difficult. BBN's Smart Packets [PJ96] is focused on the efficient construction of the packet interpreting programming system for active networks. Smart Packets, like the capsules proposed in the MIT design, contain code in some form.
Reference: [NO93] <author> S. M. Nettles and J. W. O'Toole. </author> <title> Real-Time Replication Garbage Collection. </title> <booktitle> In SIG-PLAN Symposium on Programming Language Design and Implementation, </booktitle> <pages> pages 217-226. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1993. </year>
Reference-contexts: If measurements show that the collector is the bottle neck, then this is a likely source of improvement. Other concurrent collector technologies are available as well, many based on Baker's algorithm [Bak78], and others on techniques that are especially well suited for ML <ref> [NO93, ON94] </ref>. We also built a very simple buffered repeater in C to try to determine the smallest overheads that a user mode program could expect to see.
Reference: [ON94] <author> J. O'Toole and S. Nettles. </author> <title> Concurrent Replicating Garbage Collection. </title> <booktitle> In ACM Symposium on LISP and Functional Programming. </booktitle> <publisher> ACM Press, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: If measurements show that the collector is the bottle neck, then this is a likely source of improvement. Other concurrent collector technologies are available as well, many based on Baker's algorithm [Bak78], and others on techniques that are especially well suited for ML <ref> [NO93, ON94] </ref>. We also built a very simple buffered repeater in C to try to determine the smallest overheads that a user mode program could expect to see.
Reference: [Pap96] <author> D. Pappalardo. </author> <title> BBN to test RSVP. Network World, </title> <address> 13(50):1,14, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: Unfortunately, key parts of the network infrastructure evolve much more slowly, often taking more than half a decade to make their way from presentation at SIGCOMM to deployment by Internet Service Providers. For example, consider the five or more year time-line from RSVP conceptualization [CSZ92] to deployment <ref> [Pap96] </ref>. The existing network software infrastructure evolves slowly because of an important and fundamental design goal, the need for interoperability. Interoperability is achieved in the current Internet by using the hourglass model of networking shown in Figure 1.
Reference: [Per92] <author> Radia Perlman. </author> <title> Interconnections: Bridges and Routers. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Bridges 1 are data link layer network elements that interconnect LANs to make extended LANs (ELANs) <ref> [Per92] </ref>. Bridging is a less flexible interconnection solution than IP internetwork routing, but it offers cost/performance advantages in many settings and is widely used. When bridges interconnect broadcast LANs such as Ethernet, they must provide the illusion that the ELAN is a broadcast network. <p> Since bridge functionality is simple it is easily tested, and this simplicity is an asset during data analysis. Moreover, the ease of dividing a bridge into the three component functions previously discussed <ref> [Per92] </ref> make it ideal for a layered architecture such as our implementation. 5.1 The Switchlet Loader A central aspect of an active network is the ability to load executable code into the network elements.
Reference: [PJ96] <author> C. Partridge and A. Jackson. </author> <title> Smart packets. </title> <type> Technical report, </type> <institution> BBN, </institution> <year> 1996. </year> <note> http://www.net-tech.bbn.com-/smtpkts/smtpkts-index.html. </note>
Reference-contexts: The choice of Java is a potential weakness, as a number of serious security problems have been discovered. Unlike ML [MTH90], Java lacks a mathematical definition, making formal analysis of programs difficult. BBN's Smart Packets <ref> [PJ96] </ref> is focused on the efficient construction of the packet interpreting programming system for active networks. Smart Packets, like the capsules proposed in the MIT design, contain code in some form.
Reference: [Pos80] <author> Jon Postel. </author> <title> User datagram protocol. </title> <type> Technical report, </type> <institution> University of Southern California, Information Sciences Institute, Marina del Rey, </institution> <address> CA, USA, </address> <year> 1980. </year>
Reference-contexts: The next layer implements a minimal IP [Pos81] sufficient for our purposes. (It does not, for example, implement fragmentation.) The IP protocol identifier field is used to demultiplex these packets to other switchlets. The next layer implements a minimal UDP <ref> [Pos80] </ref> in a similar fashion. Finally, the highest layer in this stack implements a TFTP [Sol92] server. This server only services write requests in binary format.
Reference: [Pos81] <author> Jon Postel. </author> <title> INTERNET protocol. </title> <type> Technical report, </type> <institution> University of Southern California, Information Sciences Institute, Marina del Rey, </institution> <address> CA, USA, </address> <year> 1981. </year>
Reference-contexts: To overcome this limitation, we load a network loader. It consists of four layers. The lowest layer captures those Ethernet layer frames destined for an Ethernet card installed on this machines. It then demultiplexes these frames based on the Ethernet protocol identifier. The next layer implements a minimal IP <ref> [Pos81] </ref> sufficient for our purposes. (It does not, for example, implement fragmentation.) The IP protocol identifier field is used to demultiplex these packets to other switchlets. The next layer implements a minimal UDP [Pos80] in a similar fashion. Finally, the highest layer in this stack implements a TFTP [Sol92] server.
Reference: [Rou96] <author> Fran~cois Rouaix. </author> <title> A web navigator with applets in Caml. </title> <booktitle> Fifth WWW Conference, </booktitle> <month> May </month> <year> 1996. </year> <note> http://pauillac.inria.fr /mmm/papers/mmm.ps.gz. </note>
Reference-contexts: Controlling the execution environment allows us to exclude operations like opening disk files that are unnecessary for a switchlet and which may pose security risks. To produce the restricted environment we use a feature of Caml called module thinning <ref> [Rou96] </ref>. In Caml, groups of related functions, along with their supporting data structures and types, can be aggregated into a module. Each module has a signature that describes which values, types, and functions are known to external functions. <p> int -&gt; Safeunix.sockaddr -&gt; int val unbind_out: oport -&gt; unit val get_oport: unit -&gt; oport val ready_to_send_p_out: oport -&gt; bool (* Generic functions *) val iport_to_oport: iport -&gt; oport (* Debugging aids *) val debug_iport_to_string: iport -&gt; string val debug_oport_to_string: oport -&gt; string val debug_demux_num_devs: unit -&gt; int MMM browser <ref> [Rou96] </ref>. It provides a set of standard Caml functions ranging from integer operations to an implementation of hash tables. As the name implies, it has been thinned to only allow "safe" operations. Similarly, Safeunix is a very heavily thinned version of the Unix module from Caml. <p> Netscript [Yd96] provides a model for network programming, but is less focused on the construction of active network nodes than the MIT, Georgia Tech, Arizona and BBN efforts, and more on defining examples of network programming. MMM <ref> [Rou96] </ref> is a browser that uses Caml as its applet language. They also use the strongly typed features of the language for security, but are able to assume a model in which all applets cooperate. Further, their applets extend a browser rather than extending the functionality of a network switch.
Reference: [SC88] <author> W. David Sincoskie and Charles J. Cotton. </author> <title> Extended bridge algorithms for large networks. </title> <journal> IEEE Network, </journal> <volume> 2(1) </volume> <pages> 16-24, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: We started with a simple repeater, and extended it with switchlets to become self-learning, to run spanning tree protocols, and to adapt the choice of protocols using information encoded in the Ethernet frame. Advanced algorithms for scaling bridged LANs <ref> [SC88] </ref> using a multiplicity of spanning trees or LAN interworking functions [VP88] could be added as switchlets to the current system. Next, we plan to see what steps can be taken to minimize Linux overheads, increase concurrency, and to extend the ideas described here to an active router.
Reference: [SFG + 96] <author> J. M. Smith, D. J. Farber, C. A. Gunter, S. M Nettles, D. C. Feldmeier, and W. D. Sin-coskie. SwitchWare: </author> <title> Accelerating network evolution. </title> <type> Technical Report MS-CIS-96-38, </type> <institution> CIS Dept. University of Pennsylvania, </institution> <year> 1996. </year>
Reference-contexts: The goal in developing such networks is to greatly increase the flexibility and customizability of the network, and to thus accelerate the pace at which network software is deployed and evolves. Active Networks provide an infrastructure for implementing earlier approaches to evolving networks such as "Protocol Boosters" [FMS98]. SwitchWare <ref> [SFG + 96] </ref> is an experimental active networking project with the goal of using active networks to facilitate rapid network evolution. This effort must begin with an architecture for the nodes that comprise the active network.
Reference: [Sol92] <author> Karen R. Sollins. </author> <title> The TFTP protocol (revision 2). </title> <type> Technical report, </type> <institution> MIT, </institution> <year> 1992. </year>
Reference-contexts: The next layer implements a minimal UDP [Pos80] in a similar fashion. Finally, the highest layer in this stack implements a TFTP <ref> [Sol92] </ref> server. This server only services write requests in binary format. Any such file is taken to be a Caml byte code file and, upon successful receipt, an attempt is made to dynamically load and evaluate the file.
Reference: [TSS + 97] <author> D. L. Tennenhouse, J. M. Smith, W. D. Sin-coskie, D. J. Wetherall, and G. J. Minden. </author> <title> A survey of active network research. </title> <journal> IEEE Communications Magazine, </journal> <pages> pages 80-86, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: 1 Introduction "Active Networks" <ref> [TSS + 97] </ref> are packet-switched networks in which the network infrastructure is programmable and extensible, and where network behavior can be controlled on a per-packet, per-user, or other basis. For example, a packet might carry executable code [TSS+97] that extends the network infrastructure. <p> With this approach, network elements that were previously "store and forward" become "store, compute, and forward" elements. Programming can be accomplished out-of-band, through an administrative interface, or in-band, through packets that are "capsules," as proposed by Wether-all et al. <ref> [TSS + 97] </ref>. Each packet can contain both data and code that operates on the data. We call such packets "switchlets". This model allows advanced applications such as DNS proxies, self-directed multicast, etc. to be programmed by users or network implementors remotely. Switchlets must provide for safe and secure extensibility.
Reference: [vEBBV95] <author> T. von Eicken, A. Basu, V. Buch, and W. Vo-gels. U-net: </author> <title> A user-level network interface for parallel and distributed computing. </title> <booktitle> In Proceedings of the 15th SOSP. SIGOPS, </booktitle> <year> 1995. </year>
Reference-contexts: This gives some idea of the costs caused by bringing the data through the Linux kernel into user space. We intend to examine an approach like that used by the U-Net project <ref> [vEBBV95] </ref> in the future. They allow protected user mode access to network devices which has reduced the boundary crossing costs. 7.4 Scalability Using a general-purpose multiprocessor as a switch is an established technique for experimental packet-switching networks [EBE + 86, KEM + 78].
Reference: [VP88] <author> G. Varghese and R. Perlman. </author> <title> Transparent interconnection of incompatible local area networks using bridges. </title> <booktitle> In Proceedings, 1988 SIGCOMM Conference, </booktitle> <pages> pages 381-389, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Advanced algorithms for scaling bridged LANs [SC88] using a multiplicity of spanning trees or LAN interworking functions <ref> [VP88] </ref> could be added as switchlets to the current system. Next, we plan to see what steps can be taken to minimize Linux overheads, increase concurrency, and to extend the ideas described here to an active router.
Reference: [vR96] <author> Robbert van Renesse. </author> <title> Masking the overhead of protocol layering. </title> <booktitle> In Proceedings, 1996 ACM SIGCOMM Conference, </booktitle> <pages> pages 96-104, </pages> <address> Palo Alto, CA, </address> <year> 1996. </year> <pages> SIGCOMM. </pages>
Reference-contexts: Dynamic linking provides the ability to add these switchlets to an executing program. Several recent networking efforts have also used dialects of ML. For example, Biagioni [Bia94] describes a TCP implementation based on Standard ML of New Jersey [AM87] and van Renesse <ref> [vR96] </ref> discusses a network stack implementation also based on Caml. 4 Network Bridges Network designers must trade off complexities of addressing and routing. Bridges 1 are data link layer network elements that interconnect LANs to make extended LANs (ELANs) [Per92].
Reference: [WEK96] <author> D. A. Wallach, D. Engler, and M. F. Kaashoek. Ashs: </author> <title> Application-specific handlers for high-performance messaging. </title> <booktitle> In Proc. 1996 ACM SIGCOMM Conference, </booktitle> <year> 1996. </year>
Reference-contexts: Our research is concentrated on the design and construction of the programming environment for a robust extensible node, and would be as useful for capsule support as it is for adding bridge functionality. Other work at MIT <ref> [WEK96] </ref> has demonstrated methods for loading network modules (Application-Specific Safe Handlers, or ASHs) into O.S. kernels. Like our work, ASHs rely on pre-module loading static analyses; we believe that the Caml approach offers a better long-term opportunity for formal verification.
Reference: [WT96] <author> David J. Wetherall and David L. Tennenhouse. </author> <title> The ACTIVE IP option. </title> <booktitle> In 7th ACM SIGOPS European Workshop, </booktitle> <month> September </month> <year> 1996. </year> <note> http://www.tns.lcs.mit.edu /publications/sigops96ws.html. </note>
Reference-contexts: Thus, the active bridge's reconfiguration was much faster (&lt;0.1 second) than timeouts (accounting for the additional 30 seconds) built into the bridge protocols to ensure that temporary loops do not occur. 8 Related Work Wetherall and Tennenhouse <ref> [WT96] </ref> have constructed an Active Network node architecture that uses a TCL interpreter operating on the Linux operating system. The ACTIVE IP option is used to flag IP packets containing capsules, which are packets and data passed to the TCL interpreter.
Reference: [Yd96] <author> Y. Yemini and S. daSilva. </author> <title> Towards programmable networks. </title> <booktitle> In IFIP/IEEE International Workshop on Distributed Systems: Operations and Management, Oc-tober 1996. </booktitle> <address> http://www.cs.columbia.edu / dasilva/netscript.html. </address>
Reference-contexts: The initial effort seems targeted at efficient byte code (e.g., a refined Java or intermediate language) or even machine code in the packet. The intent is to ensure that loadable active technologies will be viable on even the highest-performance networks. Netscript <ref> [Yd96] </ref> provides a model for network programming, but is less focused on the construction of active network nodes than the MIT, Georgia Tech, Arizona and BBN efforts, and more on defining examples of network programming. MMM [Rou96] is a browser that uses Caml as its applet language.
References-found: 35

