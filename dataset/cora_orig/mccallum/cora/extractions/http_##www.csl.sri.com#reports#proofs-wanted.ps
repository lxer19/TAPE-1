URL: http://www.csl.sri.com/reports/proofs-wanted.ps
Refering-URL: http://www.csl.sri.com/reports/
Root-URL: 
Title: theorems  
Author: Lorge Parnas 
Address: Ontario (TRIO)  Hamilton, Ontario, Canada L8S 4K1  
Affiliation: Telecommunications Research Institute of  Communications Research Laboratory Department of Electrical and Computer Engineering McMaster University,  
Note: David  
Abstract: June 8, 1993 2:55 pm 1/6 D. L. Parnas Some Theorems We Should Prove ABSTRACT Mathematical techniques can be used to produce precise, provably complete documentation for computer systems. However, such documents are highly detailed and oversights and other errors are quite common. To detect the early errors in a document, one must attempt to prove certain simple theorems. This paper gives some examples of such theorems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Heninger, K.L., Kallander, J., Parnas, D.L., Shore, </author> <title> J.E., Software Requirements for the A-7E Aircraft, </title> <type> NRL Memorandum Report 3876, </type> <institution> United States Naval Research Laboratory, </institution> <address> Washington D.C., </address> <month> November </month> <year> 1978, </year> <pages> 523 pp. </pages>
Reference: [2] <author> Parnas, </author> <title> D.L., Predicate Logic for Software Engineering, </title> <type> CRL Report 241, </type> <institution> McMaster University, TRIO (Telecommunications Research Institute of Ontario), </institution> <month> February </month> <year> 1992, </year> <note> 8 pgs. To appear in IEEE Transactions on Software Engineering. </note>
Reference-contexts: L. Parnas formulae in Figures 7 and 8 to evaluate to true for any array B. . . It should be noted that the theorems in Figures 7 and 8 are not as obvious as they might appear. In the logic that we use (described in <ref> [2] </ref>), if both = and denote primitive relations, (i.e. one is not defined to be the complement of the other) they are not complementary. If i is not in the index set of B, both B [i] =x and B [i] x will be false.
Reference: [3] <author> D.L. Parnas, J. Madey, M. Iglewski, </author> <title> Formal Documentation of Well-Structured Programs, </title> <type> CRL Report 259, </type> <institution> McMaster University, TRIO (Telecommunications Research Institute of Ontario), </institution> <month> September </month> <year> 1992, </year> <note> 37 pgs. </note>
Reference-contexts: A complete discussion of these tabular expressions can be found in [6]. The most recent illustration of their use can be found in <ref> [3] </ref>. Our efforts have very pragmatic goals. We are not trying to provide mathematical proofs of program correctness; our goals are much more mundane. We wish to use mathematical methods to improve the quality of documentation in software systems.
Reference: [4] <author> D.L. Parnas, J. Madey, </author> <title> Functional Documentation for Computer Systems Engineering (Version 2), </title> <type> CRL Report 237, </type> <institution> McMaster University, Hamilton Canada, TRIO (Telecommunications Research Institute of Ontario), </institution> <month> September </month> <year> 1991,14 </year> <month> pgs. </month>
Reference-contexts: 1 Introduction In <ref> [4] </ref>, we have shown how the contents of key computer systems documents can be defined in terms of mathematical functions and relations.
Reference: [5] <author> Elliot Mendelson, </author> <title> Introduction to Mathematical Logic, Third Edition, </title> <publisher> Wadsworth and Brooks, </publisher> <address> Pacific Grove California (USA), </address> <year> 1987. </year>
Reference: [6] <author> D.L. Parnas, </author> <title> Tabular Representation of Relations, </title> <type> CRL Report 260, </type> <institution> McMaster University, TRIO (Telecommunications Research Institute of Ontario), </institution> <month> October </month> <year> 1992, </year> <note> 12 pgs. </note>
Reference-contexts: A complete discussion of these tabular expressions can be found in <ref> [6] </ref>. The most recent illustration of their use can be found in [3]. Our efforts have very pragmatic goals. We are not trying to provide mathematical proofs of program correctness; our goals are much more mundane.
Reference: [7] <author> D.L. Parnas, G.J.K. Asmis, J. Madey, </author> <title> Assessment of Safety-Critical Software in Nuclear Power Plants, </title> <journal> Nuclear Safety. </journal> <volume> vol. 32, no. 2, </volume> <month> April-June </month> <year> 1991, </year> <month> pgs. </month> <pages> 189-198. </pages>
Reference-contexts: Although we are not trying to prove programs correct, we do have a need for theorem provers. The formulae in our tabular expressions must satisfy certain mathematical conditions. When we have used these tables in practice (e.g. <ref> [7] </ref>), we have found that the documents submitted for review often fail to satisfy those conditions; as a result the reviewers spent much too much of their time and energy checking for simple, application-independent, properties. <p> However, they are more difficult than the majority of the theorems that arose in the documentation and inspection of the Darlington Nuclear Plant Shutdown Systems discussed in <ref> [7] </ref>. Most of the theorems that we had to check, were similar in nature to the ones discussed in Section 2. The scrupulously careful inspection resulted in about 40 kg. of such trivial tables.
References-found: 7

