URL: http://robotics.stanford.edu/~latombe/papers/romneydir/thesis.ps.gz
Refering-URL: http://robotics.stanford.edu/~latombe/projects/
Root-URL: http://www.cs.stanford.edu
Title: ON THE CONCURRENT DESIGN OF ASSEMBLY SEQUENCES AND FIXTURES  
Author: Bruce Romney 
Degree: a dissertation submitted to the department of electrical engineering and the committee on graduate studies of stanford university in partial fulfillment of the requirements for the degree of doctor of philosophy  
Date: March 1997  
Abstract-found: 0
Intro-found: 1
Reference: <author> wrench. </author> <title> A force and a torque together in the same vector: ~w = @ ~t A When parts can move independently (i.e., are not glued together), this notion is generalized to a series of forces and torques, acting on the different parts in the assembly: ~w = ~ F T 0 1 ~t T n1 ~t T i T (Section 6.7.1). WSCH. (Wrench-Space Convex Hull.) The open-ended convex hull of the fixel wrenches, bounded by planes passing through the origin. (Section 7.2; illustration, Fig. 6.13). Bibliography </title>
Reference: [1] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman. </author> <booktitle> Data Structures and Algorithms, </booktitle> <pages> pages 222-226. </pages> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1985. </year>
Reference-contexts: For example, in Fig. 3.16, parts P 0 and P 1a -P 1c are inseparable for vertical motions, so in the RDBG, a single node represents all four parts. (The algorithm used to identify the strongly-connected nodes comes from Aho et al. <ref> [1] </ref>.) The RDBG, which is acyclic, can then be examined to find the locally-removable subassemblies. These correspond to sets of nodes from which there are no outgoing arcs leading to other nodes.
Reference: [2] <author> E.M. Arkin, R.C. Connelly, and J.S.B. Mitchell. </author> <title> On monotone paths among obstacles, with applications to planning assemblies. </title> <booktitle> In Proc. Fifth Annual Symposium on Computational Geometry, </booktitle> <pages> pages 334-343, </pages> <address> Saarbrucken, West Germany, </address> <year> 1989. </year>
Reference-contexts: Not surprisingly, perhaps, the latter algorithm is quite slow (1 hour of CPU time for the example provided). Arkin et al. <ref> [2] </ref> devised a way to partition polygons into two sets which are separable by a single translation, by identifying the boundary line between them; however, the extension of this method to the three-dimensional case is not apparent.
Reference: [3] <author> H. </author> <title> Asada and A.B. By. Kinematic analysis of workpart fixturing for flexible assembly with automatically reconfigurable fixtures. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-1(2):86-94, </volume> <year> 1985. </year>
Reference-contexts: Many authors, such as <ref> [3, 7, 10, 58, 72, 74, 87] </ref>, neglect the stabilizing effects of friction for reasons of simplicity and conservatism, while others [21, 51, 60] do include friction. <p> PREVIOUS WORK which use only four fixture elements (as compared to the seven required for ordinary, first-order form closure [45]). One trend in the design of part fixtures has been the use of modular or reconfigurable fixture elements <ref> [3, 10, 67, 69, 77] </ref>. Because such elements can be re-used on many different parts, they are often more desirable than expensive custom fixtures, especially for low-volume products. Costs can be even further reduced if fixture is designed for robotic reconfiguration, as in [3, 69]. <p> Because such elements can be re-used on many different parts, they are often more desirable than expensive custom fixtures, especially for low-volume products. Costs can be even further reduced if fixture is designed for robotic reconfiguration, as in <ref> [3, 69] </ref>. Notable among the modular-fixturing algorithms is that of Brost and Goldberg [10], which designs a form-closing fixture for a planar part, using three locators and one clamp placed on a regular lattice of possible sites. <p> This is not an entirely new consideration; authors such as Asada and By <ref> [3] </ref> have looked at the question of part accessibility before. But for sequence/fixture co-design, the planner must, in effect, allow two (possibly 68 CHAPTER 5. KEY ISSUES IN SEQUENCE/FIXTURE CO-DESIGN distinct) paths for each part: one for its insertion, and one for its removal with the rest of the assembly.
Reference: [4] <author> D.F. Baldwin, T.E. Abell, M.-C.M. Lui, T.L. De Fazio, and D.E. Whitney. </author> <title> An integrated computer aid for generating and evaluating assembly sequences for mechanical products. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 7(1) </volume> <pages> 78-94, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: Since then, a number of methods and systems have been developed in which the geometric constraints on assembly are supplied as input, either through the CAD database or at run-time by the user <ref> [4, 43, 46] </ref>. These approaches set aside the key problem of deriving the geometric constraints, focusing instead on the efficient representation and processing of these constraints into assembly sequences. <p> Although they would be unsuitable for a CAD tool which quietly monitors a developing product's assemblability, these methods might well be suitable for other applications; for example, Baldwin et al. <ref> [4] </ref> described an interactive tool allowing a designer to examine and edit assembly sequences manually. The problem of automatically generating sequences from an assembly's geometry alone is, in its full generality, PSPACE-hard [59, 83].
Reference: [5] <author> D. Baraff. </author> <title> Issues in computing contact forces for non-penetrating rigid bodies. </title> <journal> Algorithmica, </journal> <volume> 10 </volume> <pages> 292-352, </pages> <year> 1993. </year>
Reference-contexts: If and only if such a solution exists, the assembly will be stable. A subtle but important premise here, established in <ref> [5, 17] </ref>, is that if there exists a set of fixel forces which can balance out the external wrench, then the external wrench will in fact be balanced out (although possibly by a different set of fixel forces).
Reference: [6] <author> D. Baraff, R. Mattikalli, and P. Khosla. </author> <title> Minimal fixturing of frictionless assemblies: complexity and algorithms. </title> <type> Technical Report CMU-RI-TR-94-08, </type> <institution> Carnegie Mellon University, Pittsburgh, </institution> <month> April </month> <year> 1994. </year> <note> To appear in Algorithmica, </note> <year> 1997. </year>
Reference-contexts: He also proposed several fixture-synthesis algorithms, including one which builds up a fixture one element at a time, choosing each element based on the orthogonality of its applied force and torque to those of the previously-selected elements. Baraff and Mattikalli <ref> [6] </ref> showed that finding the smallest set of fixture elements to stabilize an assembly under gravity (or any other given force) is NP-hard. 2.3 Sequencing and Fixturing Combined As useful as these results are, finding the optimal fixture for a single assembly is not necessarily the most desirable goal from a <p> Baraff and Mattikalli <ref> [6] </ref> showed that finding a minimal fixture to stabilize a single assembly under gravity is NP-hard. Finding the minimal fixture to stabilize a sequence of related subassemblies, under both gravity and insertion forces, seems at least as difficult.
Reference: [7] <author> J.J. Bausch and K. Youcef-Toumi. </author> <title> Kinematic methods for automated fixture reconfiguration planning. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 2, </volume> <pages> pages 1396-1401, </pages> <address> Cincinnati, OH, </address> <year> 1990. </year> <note> 149 150 BIBLIOGRAPHY </note>
Reference-contexts: Many authors, such as <ref> [3, 7, 10, 58, 72, 74, 87] </ref>, neglect the stabilizing effects of friction for reasons of simplicity and conservatism, while others [21, 51, 60] do include friction.
Reference: [8] <author> G. Boothroyd and P. Dewhurst. </author> <title> Design for Assembly. Boothroyd and Dewhurst, </title> <publisher> Inc., </publisher> <address> Wakefield, RI, </address> <year> 1983. </year>
Reference-contexts: Other approaches apply more general geometric reasoning to the overall shapes of the parts, producing assembly plans from physics-based criteria for collision avoidance and/or stability [10, 27, 56, 78, 80]. Still other methods, such as the well-known Boothroyd-Dewhurst design-for-assembly criteria <ref> [8] </ref>, estimate the product's assembly cost without generating an explicit assembly plan. <p> must be re-fixtured during assembly. (The search for a single-fixture solution in this dissertation could, in fact, be viewed as addressing the larger, more general problem, but assuming prohibitively high re-fixturing costs.) Alternatively, one might attempt to estimate the total assembly time, along the lines of Boothroyd and Dewhurst's work <ref> [8] </ref>, taking into account both sequencing and fixturing considerations. Of course, it is difficult to reproduce the judgment of a good manufacturing engineer in these estimates, and so the generation of accurate, 5.3. ASSEMBLY ORIENTATION 65 quantifiable guidelines would be a challenge in its own right.
Reference: [9] <author> A. Bourjault. </author> <title> Contribution a une approche methodologique de l'assemblage au-tomatise: elaboration automatique des sequences operatoires. </title> <type> Ph.D. thesis, </type> <institution> Fac-ulte des Sciences et des Techniques de l'Universite de Franche-Comte, France, </institution> <year> 1984. </year>
Reference-contexts: A glossary of the key terms used herein follows. Chapter 2 Previous Work 2.1 Assembly Sequencing Many of the early assembly-reasoning systems were interactive ones, querying the user for geometric-reasoning information and generating assembly sequences from the answers. The classic system of Bourjault <ref> [9] </ref> posed a large number of yes/no questions to the user; De Fazio and Whitney [19] later modified this approach to require a smaller number of questions with more complex answers.
Reference: [10] <author> R.C. Brost and K.Y. Goldberg. </author> <title> A complete algorithm for designing planar fixtures using modular components. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 12(1) </volume> <pages> 31-46, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: Other approaches apply more general geometric reasoning to the overall shapes of the parts, producing assembly plans from physics-based criteria for collision avoidance and/or stability <ref> [10, 27, 56, 78, 80] </ref>. Still other methods, such as the well-known Boothroyd-Dewhurst design-for-assembly criteria [8], estimate the product's assembly cost without generating an explicit assembly plan. <p> Many authors, such as <ref> [3, 7, 10, 58, 72, 74, 87] </ref>, neglect the stabilizing effects of friction for reasons of simplicity and conservatism, while others [21, 51, 60] do include friction. <p> PREVIOUS WORK which use only four fixture elements (as compared to the seven required for ordinary, first-order form closure [45]). One trend in the design of part fixtures has been the use of modular or reconfigurable fixture elements <ref> [3, 10, 67, 69, 77] </ref>. Because such elements can be re-used on many different parts, they are often more desirable than expensive custom fixtures, especially for low-volume products. Costs can be even further reduced if fixture is designed for robotic reconfiguration, as in [3, 69]. <p> Costs can be even further reduced if fixture is designed for robotic reconfiguration, as in [3, 69]. Notable among the modular-fixturing algorithms is that of Brost and Goldberg <ref> [10] </ref>, which designs a form-closing fixture for a planar part, using three locators and one clamp placed on a regular lattice of possible sites.
Reference: [11] <author> R.C. </author> <title> Brost and M.T. Mason. Graphical analysis of planar rigid-body dynamics with multiple frictional contacts. </title> <editor> In H. Miura and S. Arimoto, editors, </editor> <booktitle> Robotics Research: The Fifth International Symposium, </booktitle> <pages> pages 293-300. </pages> <publisher> MIT Press, </publisher> <address> Cam-bridge, MA, </address> <year> 1990. </year>
Reference-contexts: Graphically, this implies that each ~ W ext; j must be on or inside the "cone" of ~w i 's, as shown in Fig. 6.13. If one were to project the wrenches onto a unit sphere, as Brost and Mason did in <ref> [11] </ref>, the projected ~ W ext; j 's would have to lie 88 CHAPTER 6. A FAST SYSTEM FOR CO-DESIGN shown explicitly. (b) The dead-end situation that results from always deleting as few virtual fixels as possible. 6.9.
Reference: [12] <author> R.C. Brost and R.R. Peters. </author> <title> Automatic design of 3-d fixtures and assembly pallets. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 1, </volume> <pages> pages 495-502, </pages> <address> Minneapolis, MN, </address> <year> 1996. </year>
Reference-contexts: The algorithm is able to enumerate all possible form-closing fixtures of this type, and is therefore not only complete, but also able to find the globally optimum fixture, according to any metric supplied by the user. Possible figures of merit for fixtures are suggested in <ref> [12, 21, 51] </ref>, and might include the total reaction force required for a fixture to oppose a certain external force, the maximum reaction force by any one element, or the total or maximum reaction forces to any possible external force (of a known magnitude).
Reference: [13] <author> S. Chakrabarty and J. Wolter. </author> <title> A hierarchical approach to assembly planning. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 1, </volume> <pages> pages 258-263, </pages> <address> San Diego, </address> <year> 1994. </year>
Reference-contexts: Other methods do exist, such as that of Chakrabarty and Wolter <ref> [13] </ref>, which builds an assembly plan "bottom up" in terms of the subassembly hierarchy. However, the assembly-by-disassembly strategy is very widely used in the literature, and it is a strategy that will be employed in this dissertation, as well. <p> A number of systems have been developed to perform assembly sequencing using motions only along the major axes [31, 48, 57, 71] or along pre-specified trajectories <ref> [13, 32, 36, 54] </ref>. Hoffman [31, 32], in particular, created a system which handles curved surfaces as well as flat ones, and can move parts into intermediate rather than final relative positions when the latter are not immediately reachable (heuristics are used to choose these intermediate positions).
Reference: [14] <author> K.C. Chan, B. Benhabib, and M.Q. Dai. </author> <title> A reconfigurable fixturing system for robotic assembly. </title> <journal> Journal of Manufacturing Systems, </journal> <volume> 9(3) </volume> <pages> 206-221, </pages> <year> 1990. </year>
Reference-contexts: To be sure, in a realistic assembly environment, the actual shape of each element would pose a significant assembly constraint; and if there were, say, a library of predefined fixture elements available on a CAD system (such as those described in <ref> [14, 69] </ref>), these constraints could be carefully considered.
Reference: [15] <author> H. Chang and T.-Y. Li. </author> <title> Assembly maintainability study with motion planning. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 1, </volume> <pages> pages 1012-1019, </pages> <address> Nagoya, Japan, </address> <year> 1995. </year>
Reference-contexts: For example, the "off-line" system of Chang and Li <ref> [15] </ref> sometimes requires hours of CPU time, but in at least 1.6. CONTRIBUTIONS 9 one case was able to plan the removal of a complex engine part along a disassembly path previously unknown to the engine's designers. <p> Extensions to rotational and/or multi-step part motions remain a major direction for future research. The problem with arbitrary insertion paths is not so much the inability to generate them as the inability to generate them quickly. Chang and Li <ref> [15] </ref> have developed a system which can plan removal paths for complex-shaped parts along arbitrary 4.3. WHY CO-DESIGN? 57 trajectories, using the technique of Randomized Path Planning, or RPP; however, the computations take far too long to provide immediate feedback in a CAD tool.
Reference: [16] <author> Y.-C. Chou. </author> <title> A methodology for automatic layout of fixture elements based on machining forces considerations. </title> <editor> In P.H. Cohen and S.B. Joshi, editors, </editor> <booktitle> Advances BIBLIOGRAPHY 151 in Integrated Product Design and Manufacturing, </booktitle> <pages> pages 181-187. </pages> <publisher> ASME, </publisher> <address> New York, </address> <year> 1990. </year> <journal> ASME Production Engineering Division, </journal> <volume> volume 47. </volume>
Reference-contexts: Instead, one merely needs to establish stability against gravity and the part-on-part insertion forces (described below in Section 4.1), while still admitting free insertion paths for 2.2. FIXTURING 17 parts would be unstable moving alone. the parts. Fixturing against known external forces has been studied before <ref> [16, 50, 56, 58, 74] </ref>, especially in the context of fixturing for machining [16, 50]. Lee and Yi [49] even applied the concept of stability against part insertion forces in their analysis of multipart assemblies, although not in the context of a fixturing algorithm. <p> FIXTURING 17 parts would be unstable moving alone. the parts. Fixturing against known external forces has been studied before [16, 50, 56, 58, 74], especially in the context of fixturing for machining <ref> [16, 50] </ref>. Lee and Yi [49] even applied the concept of stability against part insertion forces in their analysis of multipart assemblies, although not in the context of a fixturing algorithm.
Reference: [17] <author> R. Cottle. </author> <title> On a problem in linear inequalities. </title> <journal> Journal of the London Mathematical Society, </journal> <volume> 43 </volume> <pages> 378-384, </pages> <year> 1968. </year>
Reference-contexts: If and only if such a solution exists, the assembly will be stable. A subtle but important premise here, established in <ref> [5, 17] </ref>, is that if there exists a set of fixel forces which can balance out the external wrench, then the external wrench will in fact be balanced out (although possibly by a different set of fixel forces).
Reference: [18] <author> G.B. Dantzig. </author> <title> Linear programming and extensions. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1963. </year>
Reference-contexts: = ~ 0; ff i 0 (6.1) [ ~w 0 ~w 1 ~w m1 ] B B B B ff 0 . . . 1 C C C A Atlas checks stability by seeking a solution fff i g to eqn. (6.2) with a linear program, using the Simplex method <ref> [18] </ref>. If and only if such a solution exists, the assembly will be stable. <p> The number of variables in this linear program is the number of active fixels, which is proportional to the number of vertices v e on the exterior of the subassembly. 3 Now, Atlas uses the Simplex linear-programming method <ref> [18] </ref>, which has linear running time in practice, although in contrived cases it has been shown to be exponential [42]. However, other methods exist to solve linear programs in worst-case polynomial time, such as the ellipsoid method of Khachiyan [41] and the interior shortcut method of Karmarkar [37].
Reference: [19] <author> T.L. De Fazio and D.E. Whitney. </author> <title> Simplified generation of all mechanical assembly sequences. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-3(6):640-658, </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: Chapter 2 Previous Work 2.1 Assembly Sequencing Many of the early assembly-reasoning systems were interactive ones, querying the user for geometric-reasoning information and generating assembly sequences from the answers. The classic system of Bourjault [9] posed a large number of yes/no questions to the user; De Fazio and Whitney <ref> [19] </ref> later modified this approach to require a smaller number of questions with more complex answers.
Reference: [20] <author> S.E. Fahlman. </author> <title> A planning system for robot construction tasks. </title> <journal> Artificial Intelligence, </journal> <volume> 5 </volume> <pages> 1-49, </pages> <year> 1974. </year>
Reference-contexts: Assembly Fixturing The field of assembly fixturing, in which all parts may move independently, is far less represented in the literature than that of part fixturing. Some early work was done by Fahlman <ref> [20] </ref> for structures of simple blocks. However, Fahlman himself acknowledged some of his stabilization techniques to be "a loose grouping of a very large number of essentially independent tricks". Some authors [68, 81] have handled assembly fixturing or stability based on the instability of individual parts moving alone.
Reference: [21] <author> C. Ferrari and J. Canny. </author> <title> Planning optimal grasps. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 3, </volume> <pages> pages 2290-2295, </pages> <address> Nice, France, </address> <year> 1992. </year>
Reference-contexts: Many authors, such as [3, 7, 10, 58, 72, 74, 87], neglect the stabilizing effects of friction for reasons of simplicity and conservatism, while others <ref> [21, 51, 60] </ref> do include friction. <p> The algorithm is able to enumerate all possible form-closing fixtures of this type, and is therefore not only complete, but also able to find the globally optimum fixture, according to any metric supplied by the user. Possible figures of merit for fixtures are suggested in <ref> [12, 21, 51] </ref>, and might include the total reaction force required for a fixture to oppose a certain external force, the maximum reaction force by any one element, or the total or maximum reaction forces to any possible external force (of a known magnitude).
Reference: [22] <author> E.A. Galperin. </author> <title> Linear time algorithms for linear programming. </title> <journal> Methods of Operations Research, </journal> <volume> 64 </volume> <pages> 3-12, </pages> <year> 1991. </year>
Reference-contexts: However, other methods exist to solve linear programs in worst-case polynomial time, such as the ellipsoid method of Khachiyan [41] and the interior shortcut method of Karmarkar [37]. Galperin <ref> [22] </ref> has even proposed a linear-time algorithm for "asymmetric" linear programs, of which eqn. (6.2) is an example. The implementation of these algorithms would therefore ensure worst-case linear or polynomial time for the gravitational stability check, with respect to the number of exterior vertices v e . 2.
Reference: [23] <author> K.Y. Goldberg and H. Moradi. </author> <title> Compiling assembly plans into hard automation. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 2, </volume> <pages> pages 1858-1863, </pages> <address> Minneapolis, MN, </address> <year> 1996. </year>
Reference-contexts: They also proposed a number of 14 CHAPTER 2. PREVIOUS WORK measures of assembly complexity; a CAD tool such as the one described in Chapter 1 could use such measures to quantify the difficulty of the assembly process. In <ref> [23] </ref>, Goldberg and Moradi used the NDBG to generate "vertical assembly" plans, consisting of vertical part insertions and assembly re-orientations, with the goal of producing plans which can be executed by a robotic assembly system.
Reference: [24] <author> P. Gu and X. Yan. </author> <title> CAD-directed automatic assembly sequence planning. </title> <journal> International Journal of Production Research, </journal> <volume> 33(11) </volume> <pages> 3069-3100, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: For example, some methods described in the literature identify specific assembly features, such as screw holes and slots, and generate sequences or fixtures by applying rules to the feature-based model <ref> [24, 67] </ref>. Other approaches apply more general geometric reasoning to the overall shapes of the parts, producing assembly plans from physics-based criteria for collision avoidance and/or stability [10, 27, 56, 78, 80].
Reference: [25] <author> L.J. Guibas, D. Halperin, H. Hirukawa, J.-C. Latombe, and R.H. Wilson. </author> <title> A simple and efficient procedure for polyhedral assembly partitioning under infinitesimal motions. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 3, </volume> <pages> pages 2553-2560, </pages> <address> Nagoya, Japan, </address> <year> 1995. </year> <note> 152 BIBLIOGRAPHY </note>
Reference-contexts: Several researchers have applied the larger concept of partitioning the space of part motions to encompass motions other than single-step translations. Guibas et al. <ref> [25] </ref>, for example, developed and implemented a complete and efficient method to identify 2.2. FIXTURING 15 infinitesimal generalized motions with which to partition an assembly, by identifying and examining only those directions of generalized motion (2 &lt; 6 ) that are relevant to the partitioning problem. <p> In STAAT, only the NDBG for single-step translations has been implemented, but other authors have recently reported promising results in implementing the extensions to infinitesimal generalized motions <ref> [25] </ref> and multi-step translations [26, 27]. As a practical matter, the NDBG can be computed reasonably efficiently only for relatively simple classes of motion such as these; however, the theoretical framework for this structure applies far more broadly. <p> Since these motions have six degrees of freedom, this NDBG is a five-dimensional sphere in six-dimensional space. It has not been implemented in STAAT, 32 CHAPTER 3. AN EFFICIENT ASSEMBLY-SEQUENCING SYSTEM 3.5. DISASSEMBLY SEQUENCING WITH THE NDBG 33 but Guibas et al. <ref> [25] </ref> have recently devised and implemented an algorithm which uses such an NDBG efficiently. This algorithm explores only selected regions of the hypersphere, without sacrificing completeness. <p> As noted earlier, other researchers in the Stanford CS Robotics Laboratory have recently been able to extend NDBG techniques to the cases of infinitesimal generalized motions <ref> [25] </ref> and multi-step translations [26, 27]. These algorithms run in polynomial time in the number of parts and contacts. Hoffman [31] has also reported some success in planning multi-step translational insertions.
Reference: [26] <author> D. Halperin and R.H. Wilson. </author> <title> Assembly partitioning with a constant number of translations. </title> <type> Technical Report SAND94-1819, </type> <institution> Sandia National Laboratories, </institution> <address> Albuquerque, NM, </address> <year> 1994. </year>
Reference-contexts: Lozano-Perez and Wilson et al. [53, 80] developed the concept of the interference diagram (related to the NDBG) to analyze arbitrary classes of part motions, later implementing it for the special cases of single-step translations and infinitesimal generalized motions. Finally, Halperin and Wilson <ref> [26, 27] </ref> applied the concepts of the NDBG and interference diagram to the problems of partitioning a planar assembly with two translations or with a constant number n of translations, producing algorithms which run in polynomial time with respect to the size of the assembly. 2.2 Fixturing Part Fixturing There is <p> In STAAT, only the NDBG for single-step translations has been implemented, but other authors have recently reported promising results in implementing the extensions to infinitesimal generalized motions [25] and multi-step translations <ref> [26, 27] </ref>. As a practical matter, the NDBG can be computed reasonably efficiently only for relatively simple classes of motion such as these; however, the theoretical framework for this structure applies far more broadly. <p> As noted earlier, other researchers in the Stanford CS Robotics Laboratory have recently been able to extend NDBG techniques to the cases of infinitesimal generalized motions [25] and multi-step translations <ref> [26, 27] </ref>. These algorithms run in polynomial time in the number of parts and contacts. Hoffman [31] has also reported some success in planning multi-step translational insertions.
Reference: [27] <author> D. Halperin and R.H. Wilson. </author> <title> Assembly partitioning along simple paths: the case of multiple translations. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 2, </volume> <pages> pages 1585-1592, </pages> <address> Nagoya, Japan, </address> <year> 1995. </year>
Reference-contexts: Other approaches apply more general geometric reasoning to the overall shapes of the parts, producing assembly plans from physics-based criteria for collision avoidance and/or stability <ref> [10, 27, 56, 78, 80] </ref>. Still other methods, such as the well-known Boothroyd-Dewhurst design-for-assembly criteria [8], estimate the product's assembly cost without generating an explicit assembly plan. <p> Lozano-Perez and Wilson et al. [53, 80] developed the concept of the interference diagram (related to the NDBG) to analyze arbitrary classes of part motions, later implementing it for the special cases of single-step translations and infinitesimal generalized motions. Finally, Halperin and Wilson <ref> [26, 27] </ref> applied the concepts of the NDBG and interference diagram to the problems of partitioning a planar assembly with two translations or with a constant number n of translations, producing algorithms which run in polynomial time with respect to the size of the assembly. 2.2 Fixturing Part Fixturing There is <p> In STAAT, only the NDBG for single-step translations has been implemented, but other authors have recently reported promising results in implementing the extensions to infinitesimal generalized motions [25] and multi-step translations <ref> [26, 27] </ref>. As a practical matter, the NDBG can be computed reasonably efficiently only for relatively simple classes of motion such as these; however, the theoretical framework for this structure applies far more broadly. <p> As noted earlier, other researchers in the Stanford CS Robotics Laboratory have recently been able to extend NDBG techniques to the cases of infinitesimal generalized motions [25] and multi-step translations <ref> [26, 27] </ref>. These algorithms run in polynomial time in the number of parts and contacts. Hoffman [31] has also reported some success in planning multi-step translational insertions.
Reference: [28] <author> S.K. Hargrove and A. Kusiak. </author> <title> Computer-aided fixture design: a review. </title> <journal> International Journal of Production Research, </journal> <volume> 32(4) </volume> <pages> 733-753, </pages> <year> 1994. </year>
Reference-contexts: with a constant number n of translations, producing algorithms which run in polynomial time with respect to the size of the assembly. 2.2 Fixturing Part Fixturing There is a great deal of literature on the fixturing or grasping of a single part, or "workpiece". (Literature surveys on this subject include <ref> [28, 29, 73] </ref>.) Much of this work focuses on establishing complete kinematic closure on a part | that is, the complete immobilization of that part | or testing an existing fixture for this condition.
Reference: [29] <author> F.B. Hazen and P.K. Wright. </author> <title> Workholding automation: innovations in analysis, design, and planning. </title> <journal> Manufacturing Review, </journal> <volume> 3(4) </volume> <pages> 224-237, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: with a constant number n of translations, producing algorithms which run in polynomial time with respect to the size of the assembly. 2.2 Fixturing Part Fixturing There is a great deal of literature on the fixturing or grasping of a single part, or "workpiece". (Literature surveys on this subject include <ref> [28, 29, 73] </ref>.) Much of this work focuses on establishing complete kinematic closure on a part | that is, the complete immobilization of that part | or testing an existing fixture for this condition.
Reference: [30] <author> H. Hirukawa, T. Matsui, and K. Takase. </author> <title> A general algorithm for derivation and analysis of constraint for motion of polyhedra in contact. </title> <booktitle> In Proceedings IROS '91. IEEE/RSJ International Workshop on Intelligent Robots and Systems '91. Intelligence for Mechanical Systems, </booktitle> <volume> volume 1, </volume> <pages> pages 38-43, </pages> <address> Osaka, Japan, </address> <year> 1991. </year>
Reference-contexts: In the three-dimensional case, the continuous fixture would be composed of two-dimensional "regions" rather than segments, and the virtual fixels would be at the corners of each region's convex hull <ref> [30] </ref>. 6.3. THE SEARCH SPACE 73 The continuous representation in conjunction with virtual fixels resembles somewhat Wolter and Trinkle's use of two fixels at continuously-variable locations along an edge (in the planar case) [85].
Reference: [31] <author> R. Hoffman. </author> <title> Automated assembly planning for B-rep products. </title> <booktitle> In Proc. IEEE International Conference on Systems Engineering, </booktitle> <pages> pages 391-394, </pages> <address> Pittsburgh, </address> <year> 1990. </year>
Reference-contexts: However, the assembly-by-disassembly strategy is very widely used in the literature, and it is a strategy that will be employed in this dissertation, as well. A number of systems have been developed to perform assembly sequencing using motions only along the major axes <ref> [31, 48, 57, 71] </ref> or along pre-specified trajectories [13, 32, 36, 54]. <p> A number of systems have been developed to perform assembly sequencing using motions only along the major axes [31, 48, 57, 71] or along pre-specified trajectories [13, 32, 36, 54]. Hoffman <ref> [31, 32] </ref>, in particular, created a system which handles curved surfaces as well as flat ones, and can move parts into intermediate rather than final relative positions when the latter are not immediately reachable (heuristics are used to choose these intermediate positions). <p> As noted earlier, other researchers in the Stanford CS Robotics Laboratory have recently been able to extend NDBG techniques to the cases of infinitesimal generalized motions [25] and multi-step translations [26, 27]. These algorithms run in polynomial time in the number of parts and contacts. Hoffman <ref> [31] </ref> has also reported some success in planning multi-step translational insertions. However, none of these algorithms for more general extended trajectories runs (or appears that it will run) in sufficiently short time to be practical in a user-interactive application.
Reference: [32] <author> R. Hoffman. </author> <title> A common sense approach to assembly sequence planning. In L.S. </title> <editor> Homem de Mello and S. Lee, editors, </editor> <booktitle> Computer-Aided Mechanical Assembly Planning, </booktitle> <pages> pages 289-313. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: A number of systems have been developed to perform assembly sequencing using motions only along the major axes [31, 48, 57, 71] or along pre-specified trajectories <ref> [13, 32, 36, 54] </ref>. Hoffman [31, 32], in particular, created a system which handles curved surfaces as well as flat ones, and can move parts into intermediate rather than final relative positions when the latter are not immediately reachable (heuristics are used to choose these intermediate positions). <p> A number of systems have been developed to perform assembly sequencing using motions only along the major axes [31, 48, 57, 71] or along pre-specified trajectories [13, 32, 36, 54]. Hoffman <ref> [31, 32] </ref>, in particular, created a system which handles curved surfaces as well as flat ones, and can move parts into intermediate rather than final relative positions when the latter are not immediately reachable (heuristics are used to choose these intermediate positions). <p> Although the assumption of monotonicity does preclude examples such as the latch assembly of Fig. 3.1, it is by and large a reasonable assumption, and one commonly seen in the assembly-planning literature (with a few exceptions <ref> [32, 75] </ref>). Single-Step Translations Parts are inserted along straight-line translational paths from infinity to their final locations in the subassembly. Extensions to rotational and/or multi-step part motions remain a major direction for future research.
Reference: [33] <author> L.S. Homem de Mello. </author> <title> Task Sequence Planning for Robotic Assembly. </title> <type> Ph.D. thesis, </type> <institution> Carnegie Mellon University, Pittsburgh, </institution> <year> 1989. </year>
Reference-contexts: Now, for sequences which insert one part at a time, such as those used in Chapters 6 and 7, building the full NDBG is not necessary. Instead, it suffices to consider the local translational freedom cone <ref> [33] </ref> or extended translational freedom cone [66] for each part. (These cones are, in fact, the basis elements from which NDBG's are constructed.) Krishnan and Sanderson [44] also use these cones in their disassembly analyses, but under a generate-and-test scheme to remove multi-part subassemblies. <p> An assembly for which a linear assembly sequence exists is called a linear assembly. (Section 3.1). LTF cone. (Local Translational Freedom cone.) The subset of directions, from the entire sphere of directions, over which a given part can translate an infinitesimal distance without colliding <ref> [33] </ref>. In some instances, as in Chapter 3, the LTF cone refers to collisions with another given part; in other instances, as in Chapter 6, it refers to collisions with the set of all other parts, collectively. (Section 3.4). monotone.
Reference: [34] <author> L.S. Homem de Mello and A.C. Sanderson. </author> <title> A correct and complete algorithm for the generation of mechanical assembly sequences. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 1, </volume> <pages> pages 56-61, </pages> <address> Scottsdale, AZ, </address> <year> 1989. </year> <note> BIBLIOGRAPHY 153 </note>
Reference-contexts: Arkin et al. [2] devised a way to partition polygons into two sets which are separable by a single translation, by identifying the boundary line between them; however, the extension of this method to the three-dimensional case is not apparent. Wolter [84], Homem de Mello and Sanderson <ref> [34] </ref>, and Lin and Chang [52] each used a basic approach similar to that of the STAAT system of Chapter 3. Directions of possible part removal are suggested by contact information between the parts (or sometimes by the types of parts, e.g., screws). <p> This is a much more efficient scheme than the "generate-and-test" approaches seen elsewhere in the literature <ref> [34, 44, 56] </ref>, which enumerate all possible subassemblies (of which there may be an exponential number), and check each one for removability. <p> It might even be possible to place virtual fixels adaptively during the course of the analysis, in response to specific external wrenches. Nonlinear Actions The simplest algorithms to perform disassembly sequencing with possibly nonlinear steps are the so-called "generate-and-test" methods <ref> [34, 44, 56] </ref>, which enumerate possible subassemblies, either exhaustively or heuristically, and then try to remove each subassembly. Unfortunately, the number of possible subassemblies is exponential in the number of parts, which makes this approach inadvisable.
Reference: [35] <author> L.S. Homem de Mello and A.C. Sanderson. </author> <title> AND/OR graph representation of assembly plans. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 6(2) </volume> <pages> 188-199, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Circuit boards, for example, often have stack assembly sequences. An assembly for which a stack assembly sequence exists is called a stack assembly. 3.1. PRELIMINARIES 21 Monotone assembly sequences can be represented using an AND/OR disassembly graph <ref> [35] </ref>. Each node in this graph represents a subassembly, and each AND'ed group of children for that node represents a set of smaller subassemblies into which the given subassembly can be decomposed. When there are multiple ways to break apart a subassembly, there are multiple sets of children OR'd together. <p> A graph representing the ways in which a product can be disassembled monotonically. For sequences which may be nonlinear (as in Chapter 3), this is an AND/OR graph <ref> [35] </ref>; for linear sequences (Chapters 4-7), it is a simple OR graph. (Sections 3.1, 5.1). enhanced overfixturing.
Reference: [36] <author> Y.F. Huang and C.S.G. Lee. </author> <title> An automatic assembly planning system. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 3, </volume> <pages> pages 1594-1599, </pages> <address> Cincinnati, OH, </address> <year> 1990. </year>
Reference-contexts: A number of systems have been developed to perform assembly sequencing using motions only along the major axes [31, 48, 57, 71] or along pre-specified trajectories <ref> [13, 32, 36, 54] </ref>. Hoffman [31, 32], in particular, created a system which handles curved surfaces as well as flat ones, and can move parts into intermediate rather than final relative positions when the latter are not immediately reachable (heuristics are used to choose these intermediate positions).
Reference: [37] <author> N. Karmarkar. </author> <title> A new polynomial-time algorithm for linear programming. </title> <journal> Com-binatorica, </journal> <volume> 4(4) </volume> <pages> 373-395, </pages> <year> 1984. </year>
Reference-contexts: However, other methods exist to solve linear programs in worst-case polynomial time, such as the ellipsoid method of Khachiyan [41] and the interior shortcut method of Karmarkar <ref> [37] </ref>. Galperin [22] has even proposed a linear-time algorithm for "asymmetric" linear programs, of which eqn. (6.2) is an example. The implementation of these algorithms would therefore ensure worst-case linear or polynomial time for the gravitational stability check, with respect to the number of exterior vertices v e . 2.
Reference: [38] <author> S.G. Kaufman, R.H. Wilson, R.E. Jones, T.L. Calton, and A.L. Ames. </author> <title> The Archimedes 2 mechanical assembly planning system. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 4, </volume> <pages> pages 3361-3368, </pages> <address> Minneapo-lis, MN, </address> <year> 1996. </year>
Reference-contexts: In [23], Goldberg and Moradi used the NDBG to generate "vertical assembly" plans, consisting of vertical part insertions and assembly re-orientations, with the goal of producing plans which can be executed by a robotic assembly system. Kaufman et al. <ref> [38] </ref> took this approach further and developed an impressive NDBG-based system which is able to take commercial CAD data describing a product, generate an assembly sequence for it, and translate that sequence into actual control code for robots to perform assembly.
Reference: [39] <author> L. Kavraki, J.-C. Latombe, and R.H. Wilson. </author> <title> On the complexity of assembly partitioning. </title> <journal> Information Processing Letters, </journal> <volume> 48(5) </volume> <pages> 229-235, </pages> <year> 1993. </year>
Reference-contexts: Even when every operation is constrained to move exactly two subassemblies into their final relative positions, the problem has still been found to be NP-complete in both the two-dimensional [40] and 11 12 CHAPTER 2. PREVIOUS WORK three-dimensional <ref> [39] </ref> cases. As a result, much of the past and present work in this area focuses on even more restricted variants of the problem.
Reference: [40] <author> L.E. Kavraki and M.N. Kolountzakis. </author> <title> Partitioning a planar assembly into two connected parts is NP-complete. </title> <journal> Information Processing Letters, </journal> <volume> 55(3) </volume> <pages> 159-165, </pages> <year> 1995. </year>
Reference-contexts: The problem of automatically generating sequences from an assembly's geometry alone is, in its full generality, PSPACE-hard [59, 83]. Even when every operation is constrained to move exactly two subassemblies into their final relative positions, the problem has still been found to be NP-complete in both the two-dimensional <ref> [40] </ref> and 11 12 CHAPTER 2. PREVIOUS WORK three-dimensional [39] cases. As a result, much of the past and present work in this area focuses on even more restricted variants of the problem.
Reference: [41] <author> L.G. Khachiyan. </author> <title> A polynomial algorithm in linear programming. </title> <journal> Soviet Mathematics Doklady, </journal> <volume> 20 </volume> <pages> 191-194, </pages> <year> 1979. </year> <journal> (Translated from Doklady Akademii Nauk SSSR, </journal> <volume> 224(5) </volume> <pages> 1093-1096, </pages> <year> 1979). </year>
Reference-contexts: However, other methods exist to solve linear programs in worst-case polynomial time, such as the ellipsoid method of Khachiyan <ref> [41] </ref> and the interior shortcut method of Karmarkar [37]. Galperin [22] has even proposed a linear-time algorithm for "asymmetric" linear programs, of which eqn. (6.2) is an example.
Reference: [42] <author> V. Klee and G.J. Minty. </author> <title> How good is the simplex algorithm? In O. </title> <editor> Shisha, editor, </editor> <booktitle> Inequalities III, </booktitle> <pages> pages 159-175. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1972. </year>
Reference-contexts: program is the number of active fixels, which is proportional to the number of vertices v e on the exterior of the subassembly. 3 Now, Atlas uses the Simplex linear-programming method [18], which has linear running time in practice, although in contrived cases it has been shown to be exponential <ref> [42] </ref>. However, other methods exist to solve linear programs in worst-case polynomial time, such as the ellipsoid method of Khachiyan [41] and the interior shortcut method of Karmarkar [37]. Galperin [22] has even proposed a linear-time algorithm for "asymmetric" linear programs, of which eqn. (6.2) is an example.
Reference: [43] <author> C.M. Klein and H.-K. Rhee. </author> <title> An assembly sequence generation procedure. </title> <journal> Computers and Industrial Engineering, </journal> <volume> 21 </volume> <pages> 63-66, </pages> <year> 1991. </year>
Reference-contexts: Since then, a number of methods and systems have been developed in which the geometric constraints on assembly are supplied as input, either through the CAD database or at run-time by the user <ref> [4, 43, 46] </ref>. These approaches set aside the key problem of deriving the geometric constraints, focusing instead on the efficient representation and processing of these constraints into assembly sequences.
Reference: [44] <author> S.S. Krishnan and A.C. Sanderson. </author> <title> Path planning algorithms for assembly sequence planning. </title> <booktitle> In Proc. of the International Symposium on Intelligent Robotics, </booktitle> <pages> pages 428-439, </pages> <address> Bangalore, India, </address> <year> 1991. </year> <booktitle> Proc. of the SPIE series, </booktitle> <volume> volume 1571. </volume> <pages> 154 BIBLIOGRAPHY </pages>
Reference-contexts: This is a much more efficient scheme than the "generate-and-test" approaches seen elsewhere in the literature <ref> [34, 44, 56] </ref>, which enumerate all possible subassemblies (of which there may be an exponential number), and check each one for removability. <p> Instead, it suffices to consider the local translational freedom cone [33] or extended translational freedom cone [66] for each part. (These cones are, in fact, the basis elements from which NDBG's are constructed.) Krishnan and Sanderson <ref> [44] </ref> also use these cones in their disassembly analyses, but under a generate-and-test scheme to remove multi-part subassemblies. Beyond the Basic NDBG Since the development of the NDBG, a number of publications have extended this concept to more general situations. <p> It might even be possible to place virtual fixels adaptively during the course of the analysis, in response to specific external wrenches. Nonlinear Actions The simplest algorithms to perform disassembly sequencing with possibly nonlinear steps are the so-called "generate-and-test" methods <ref> [34, 44, 56] </ref>, which enumerate possible subassemblies, either exhaustively or heuristically, and then try to remove each subassembly. Unfortunately, the number of possible subassemblies is exponential in the number of parts, which makes this approach inadvisable.
Reference: [45] <author> K. Lakshminarayana. </author> <title> Mechanics of form closure. </title> <type> ASME Paper 78-DET-32, </type> <year> 1978. </year>
Reference-contexts: Sudsang et al. [72] applied this less restrictive notion of immobility to the design of frictionless fixtures for polyhedra, 16 CHAPTER 2. PREVIOUS WORK which use only four fixture elements (as compared to the seven required for ordinary, first-order form closure <ref> [45] </ref>). One trend in the design of part fixtures has been the use of modular or reconfigurable fixture elements [3, 10, 67, 69, 77]. Because such elements can be re-used on many different parts, they are often more desirable than expensive custom fixtures, especially for low-volume products.
Reference: [46] <author> L. Laperriere and H.A. ElMaraghy. </author> <title> Assembly sequences planning for simultaneous engineering applications. </title> <journal> International Journal of Advanced Manufacturing Technology, </journal> <volume> 9(4) </volume> <pages> 231-244, </pages> <year> 1994. </year>
Reference-contexts: Since then, a number of methods and systems have been developed in which the geometric constraints on assembly are supplied as input, either through the CAD database or at run-time by the user <ref> [4, 43, 46] </ref>. These approaches set aside the key problem of deriving the geometric constraints, focusing instead on the efficient representation and processing of these constraints into assembly sequences.
Reference: [47] <author> J.-C. Latombe, R.H. Wilson, and F. Cazals. </author> <title> Assembly sequencing with toler-anced parts. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 29(2) </volume> <pages> 159-174, </pages> <month> February </month> <year> 1997. </year>
Reference-contexts: Beyond the Basic NDBG Since the development of the NDBG, a number of publications have extended this concept to more general situations. Latombe et al. <ref> [47] </ref>, for instance, applied the NDBG to the case of toleranced assemblies. They developed the notions of the strong and weak NDBG's, and presented a complete algorithm to generate an assembly sequence of single-step, infinite translations which successfully assembles the product under any instances of the part dimensions. <p> The assemblies on which it operates are polyhedral and defined by exact geometry, i.e., with no tolerances. (Recent results in assembly planning with tolerances are described by Latombe et al. in <ref> [47] </ref>.) Additionally, since STAAT's focus is on assembly sequencing, the parts are considered free-flying objects in space, and no consideration is given to fixturing, stability, or the other assembly-planning concerns described in Section 1.3. 3.2. <p> Latombe et al. <ref> [47] </ref>, however, have recently been able to adapt NDBG assembly-sequencing technology to toleranced assemblies.
Reference: [48] <author> S. Lee and Y.G. Shin. </author> <title> Assembly planning based on geometric reasoning. </title> <journal> Computers and Graphics, </journal> <volume> 14(2) </volume> <pages> 237-250, </pages> <year> 1990. </year>
Reference-contexts: However, the assembly-by-disassembly strategy is very widely used in the literature, and it is a strategy that will be employed in this dissertation, as well. A number of systems have been developed to perform assembly sequencing using motions only along the major axes <ref> [31, 48, 57, 71] </ref> or along pre-specified trajectories [13, 32, 36, 54].
Reference: [49] <author> S. Lee and C. Yi. </author> <title> Subassembly stability and reorientation. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 2, </volume> <pages> pages 521-526, </pages> <address> Atlanta, </address> <year> 1993. </year>
Reference-contexts: FIXTURING 17 parts would be unstable moving alone. the parts. Fixturing against known external forces has been studied before [16, 50, 56, 58, 74], especially in the context of fixturing for machining [16, 50]. Lee and Yi <ref> [49] </ref> even applied the concept of stability against part insertion forces in their analysis of multipart assemblies, although not in the context of a fixturing algorithm.
Reference: [50] <author> S.H. Lee and M.R. Cutkosky. </author> <title> Fixture planning with friction. </title> <journal> Journal of Engineering for Industry, Transactions of the ASME, </journal> <volume> 113(3) </volume> <pages> 320-327, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Instead, one merely needs to establish stability against gravity and the part-on-part insertion forces (described below in Section 4.1), while still admitting free insertion paths for 2.2. FIXTURING 17 parts would be unstable moving alone. the parts. Fixturing against known external forces has been studied before <ref> [16, 50, 56, 58, 74] </ref>, especially in the context of fixturing for machining [16, 50]. Lee and Yi [49] even applied the concept of stability against part insertion forces in their analysis of multipart assemblies, although not in the context of a fixturing algorithm. <p> FIXTURING 17 parts would be unstable moving alone. the parts. Fixturing against known external forces has been studied before [16, 50, 56, 58, 74], especially in the context of fixturing for machining <ref> [16, 50] </ref>. Lee and Yi [49] even applied the concept of stability against part insertion forces in their analysis of multipart assemblies, although not in the context of a fixturing algorithm. <p> Given the inherent uncertainty in these situations, the principle of conservatism in engineering dictates that they be treated as unstable. However, as Mattikalli points out, efficient methods for determining "guaranteed" stability currently remain elusive. Lee and Cutkosky <ref> [50] </ref> have considered the grasp of a part by active frictional elements (e.g., a clamp), and derived the minimum clamping force necessary to ensure stability against a given external force. However, no methods are known which are able to handle the case of purely passive elements.
Reference: [51] <author> Z. Li and S.S. Sastry. </author> <title> Task-oriented optimal grasping by multifingered robot hands. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> 4(1) </volume> <pages> 32-44, </pages> <year> 1988. </year>
Reference-contexts: Many authors, such as [3, 7, 10, 58, 72, 74, 87], neglect the stabilizing effects of friction for reasons of simplicity and conservatism, while others <ref> [21, 51, 60] </ref> do include friction. <p> The algorithm is able to enumerate all possible form-closing fixtures of this type, and is therefore not only complete, but also able to find the globally optimum fixture, according to any metric supplied by the user. Possible figures of merit for fixtures are suggested in <ref> [12, 21, 51] </ref>, and might include the total reaction force required for a fixture to oppose a certain external force, the maximum reaction force by any one element, or the total or maximum reaction forces to any possible external force (of a known magnitude).
Reference: [52] <author> A.C. Lin and T.-C. Chang. </author> <title> 3D MAPS: Three-dimensional mechanical assembly planning system. </title> <journal> Journal of Manufacturing Systems, </journal> <volume> 12(6) </volume> <pages> 437-456, </pages> <year> 1993. </year>
Reference-contexts: Wolter [84], Homem de Mello and Sanderson [34], and Lin and Chang <ref> [52] </ref> each used a basic approach similar to that of the STAAT system of Chapter 3. Directions of possible part removal are suggested by contact information between the parts (or sometimes by the types of parts, e.g., screws). <p> The running times shown also compare quite favorably to those reported by Lin and Chang <ref> [52] </ref> (~ 2 minutes for a 14-part assembly). 3.8 Motivation for the Next Step STAAT, then, is a very efficient system for performing assembly sequencing, given only a geometric description of the product.
Reference: [53] <author> T. Lozano-Perez and R.H. Wilson. </author> <title> Assembly sequencing for arbitrary motions. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 2, </volume> <pages> pages 527-532, </pages> <address> Atlanta, </address> <year> 1993. </year>
Reference-contexts: FIXTURING 15 infinitesimal generalized motions with which to partition an assembly, by identifying and examining only those directions of generalized motion (2 &lt; 6 ) that are relevant to the partitioning problem. Lozano-Perez and Wilson et al. <ref> [53, 80] </ref> developed the concept of the interference diagram (related to the NDBG) to analyze arbitrary classes of part motions, later implementing it for the special cases of single-step translations and infinitesimal generalized motions.
Reference: [54] <author> T. Lu, B. Zhang, and P. Jia. </author> <title> Assembly sequence planning based on graph redu-tion. </title> <booktitle> In Proc. TENCON '93: 1993 IEEE Region 10 Conference on "Computer, Communication, Control and Power Engineering", </booktitle> <volume> volume 4, </volume> <pages> pages 119-122, </pages> <address> Beijing, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: A number of systems have been developed to perform assembly sequencing using motions only along the major axes [31, 48, 57, 71] or along pre-specified trajectories <ref> [13, 32, 36, 54] </ref>. Hoffman [31, 32], in particular, created a system which handles curved surfaces as well as flat ones, and can move parts into intermediate rather than final relative positions when the latter are not immediately reachable (heuristics are used to choose these intermediate positions).
Reference: [55] <author> R. Mattikalli, P. Khosla, B. Repetto, and D. Baraff. </author> <title> Stability of assemblies. </title> <booktitle> In IROS '93. Proc. of the 1993 IEEE/RSJ International Conference on Intelligent BIBLIOGRAPHY 155 Robots and Systems. Intelligent Robots for Flexibility., </booktitle> <volume> volume 1, </volume> <pages> pages 652-661, </pages> <address> Yokohama, Japan, </address> <year> 1993. </year>
Reference-contexts: Based on the work of Palmer [61] and Trinkle [74], they presented two systems of linear inequalities called the velocity and force formulations, which are duals of each other in the linear-programming sense. The velocity formulation (also used by Mattikalli et al. in <ref> [55] </ref>) describes the simultaneous motion of the 18 CHAPTER 2. PREVIOUS WORK parts so as to lower overall potential energy without violating non-penetration constraints. The force formulation describes the balance of forces and torques between the fixture elements and a known external force (interacting through the part-part contacts). <p> position is defined to be that of its tip, and the presence of that fixel precludes any part from ever "sweeping across" that position. (The avoidance of part/fixel collisions is, in fact, one of the very constraints which make sequence/fixture co-design such an interesting problem.) Some authors in the literature <ref> [55, 70, 85] </ref> treat one part in the assembly as immovable, as a means of supporting the rest of the assembly.
Reference: [56] <author> R.S. Mattikalli. </author> <title> Mechanics Based Assembly Planning. </title> <type> Ph.D. thesis, </type> <institution> Carnegie Mellon University, Pittsburgh, </institution> <year> 1994. </year>
Reference-contexts: Other approaches apply more general geometric reasoning to the overall shapes of the parts, producing assembly plans from physics-based criteria for collision avoidance and/or stability <ref> [10, 27, 56, 78, 80] </ref>. Still other methods, such as the well-known Boothroyd-Dewhurst design-for-assembly criteria [8], estimate the product's assembly cost without generating an explicit assembly plan. <p> This is a much more efficient scheme than the "generate-and-test" approaches seen elsewhere in the literature <ref> [34, 44, 56] </ref>, which enumerate all possible subassemblies (of which there may be an exponential number), and check each one for removability. <p> Instead, one merely needs to establish stability against gravity and the part-on-part insertion forces (described below in Section 4.1), while still admitting free insertion paths for 2.2. FIXTURING 17 parts would be unstable moving alone. the parts. Fixturing against known external forces has been studied before <ref> [16, 50, 56, 58, 74] </ref>, especially in the context of fixturing for machining [16, 50]. Lee and Yi [49] even applied the concept of stability against part insertion forces in their analysis of multipart assemblies, although not in the context of a fixturing algorithm. <p> Based on this method, Wolter and Trinkle proposed a fixture-synthesis algorithm which scatters fixture elements all over the assembly and then eliminates those that turn out to be unnecessary. This algorithm was the inspiration for the fixturing algorithms presented in Chapters 6 and 7 of this dissertation. Mattikalli <ref> [56] </ref> extended this technique to characterize the set of all gravitationally-stable orientations of an assembly, under a given fixture. <p> But in a model which does not account for toleranced dimensions, the outcome is unknown. Another example of indeterminate stability, given by Mattikalli <ref> [56] </ref>, is illustrated in Fig. 4.7. In this example, the two center contacts have zero friction and the two outer contacts have high friction. The stability or instability of the block thus depends upon the distribution of the block's weight over the contacts, which is undetermined. <p> This decision will obviously have a great effect on tests for gravitational stability, so choosing one wisely is important. In <ref> [56] </ref>, Mattikalli described a way to find the set of all stable orientations for an assembly, by parameterizing the direction of gravity and finding the set of gravity vectors which satisfy the appropriate force-balancing equations. His method is both exact and efficient. <p> THE FIXTURE CONTINUUM 71 locations more completely than a discrete fixture (right). 6.2 The Fixture Continuum Atlas represents the candidate fixture as a continuum of possible fixel locations, rather than as a finite set of discrete fixels. (See Fig. 6.2.) Although a discrete representation, such as was used in <ref> [56] </ref>, is certainly valid, the continuous approach is a more complete representation of possible fixturing locations. For example, typically as the disassembly analysis progresses, certain regions of the assembly boundary will gradually be eliminated as fixturing locations by the sequencing constraints. <p> CLEARING A FINAL REMOVAL PATH 75 must be placed at its extremity points, a and b. If fixels are simply placed at regular intervals, as shown here, this is unlikely to be the case. Mattikalli <ref> [56] </ref>, in his fixturing algorithms for a single assembly, performed a similar operation with discrete fixture elements. His algorithm establishes a collection of available fixture elements at regular intervals on the outer surface of the assembly. <p> This implication is not true when friction is involved, as was illustrated previously in Fig. 4.6 (p. 54). In his thesis, Mattikalli <ref> [56] </ref> developed a useful, similar test for robust stability, which ensures that stability is maintained even if ~ W ext varies slightly. This avoids, for example, situations where an assembly is gravitationally stable only in a very precise orientation. <p> For more information on these formulations, the interested reader is referred to <ref> [85, 56] </ref>. The ability to check stability in the presence of multiple, independent external forces (such as gravity and insertion forces) derives from the following simple theorem. <p> For example, they could be added at regular intervals along a grid with an arbitrarily small spacing *, as was done by Mattikalli <ref> [56] </ref> with discrete fixels. Result 7.4 would still hold, but the applicability of its guarantee would be greatly expanded; that is, the "subfixture" condition which a hypothetical solution would have to meet in order to ensure success would be far easier to satisfy. I call this modification enhanced overfixturing. <p> It might even be possible to place virtual fixels adaptively during the course of the analysis, in response to specific external wrenches. Nonlinear Actions The simplest algorithms to perform disassembly sequencing with possibly nonlinear steps are the so-called "generate-and-test" methods <ref> [34, 44, 56] </ref>, which enumerate possible subassemblies, either exhaustively or heuristically, and then try to remove each subassembly. Unfortunately, the number of possible subassemblies is exponential in the number of parts, which makes this approach inadvisable.
Reference: [57] <author> J.M. Miller and R.L. Hoffman. </author> <title> Automatic assembly planning with fasteners. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 1, </volume> <pages> pages 69-74, </pages> <address> Scottsdale, AZ, </address> <year> 1989. </year>
Reference-contexts: However, the assembly-by-disassembly strategy is very widely used in the literature, and it is a strategy that will be employed in this dissertation, as well. A number of systems have been developed to perform assembly sequencing using motions only along the major axes <ref> [31, 48, 57, 71] </ref> or along pre-specified trajectories [13, 32, 36, 54].
Reference: [58] <author> B. Mishra, J.T. Schwartz, and M. Sharir. </author> <title> On the existence and synthesis of multifinger positive grips. </title> <journal> Algorithmica, </journal> <volume> 2(4) </volume> <pages> 541-558, </pages> <year> 1987. </year>
Reference-contexts: Many authors, such as <ref> [3, 7, 10, 58, 72, 74, 87] </ref>, neglect the stabilizing effects of friction for reasons of simplicity and conservatism, while others [21, 51, 60] do include friction. <p> In <ref> [58] </ref>, Mishra et al. derived upper bounds on the number of fixture elements required to hold a part in form closure, and presented linear-time algorithms to generate those elements' positions. Recently, Rimon and Burdick [64] described another fixturing condition based on second-order geometric effects. <p> Instead, one merely needs to establish stability against gravity and the part-on-part insertion forces (described below in Section 4.1), while still admitting free insertion paths for 2.2. FIXTURING 17 parts would be unstable moving alone. the parts. Fixturing against known external forces has been studied before <ref> [16, 50, 56, 58, 74] </ref>, especially in the context of fixturing for machining [16, 50]. Lee and Yi [49] even applied the concept of stability against part insertion forces in their analysis of multipart assemblies, although not in the context of a fixturing algorithm. <p> ~n i as ~n i;tr and ~n i;rot , respec tively: ~n i = @ ~n i;rot A (7.5) Then eqn. (7.4) becomes 1 Note that if the origin were in the interior of this ordinary convex hull, then form closure would be achieved, assuring stability against any external wrench <ref> [58] </ref>. However, this possibility is precluded by the previous creation of a final removal path for the assembly. 102 CHAPTER 7.
Reference: [59] <author> B. K. Natarajan. </author> <title> On planning assemblies. </title> <booktitle> In Proc. of the Fourth Annual Symposium on Computational Geometry, </booktitle> <pages> pages 299-308, </pages> <address> Urbana-Champaign, IL, </address> <year> 1988. </year>
Reference-contexts: The problem of automatically generating sequences from an assembly's geometry alone is, in its full generality, PSPACE-hard <ref> [59, 83] </ref>. Even when every operation is constrained to move exactly two subassemblies into their final relative positions, the problem has still been found to be NP-complete in both the two-dimensional [40] and 11 12 CHAPTER 2. PREVIOUS WORK three-dimensional [39] cases.
Reference: [60] <author> V.-D. Nguyen. </author> <title> Constructing force-closure grasps. </title> <journal> International Journal of Robotics Research, </journal> <volume> 7(3) </volume> <pages> 3-16, </pages> <year> 1988. </year>
Reference-contexts: Many authors, such as [3, 7, 10, 58, 72, 74, 87], neglect the stabilizing effects of friction for reasons of simplicity and conservatism, while others <ref> [21, 51, 60] </ref> do include friction. <p> Nguyen <ref> [60] </ref> devised a grasp-synthesis algorithm which specifies grasps as independent regions on the part's boundary, such that grasping `fingers' can be placed anywhere in those regions and always establish form or force closure.
Reference: [61] <author> R.S. Palmer. </author> <title> Computational complexity of motion and stability of polygons. </title> <type> Ph.D. thesis, </type> <institution> Cornell University, </institution> <address> Ithaca, NY, </address> <year> 1987. </year>
Reference-contexts: The first systematic method to fixture an assembly for true stability was developed by Wolter and Trinkle [85]. Based on the work of Palmer <ref> [61] </ref> and Trinkle [74], they presented two systems of linear inequalities called the velocity and force formulations, which are duals of each other in the linear-programming sense. The velocity formulation (also used by Mattikalli et al. in [55]) describes the simultaneous motion of the 18 CHAPTER 2.
Reference: [62] <author> R. Pollack, M. Sharir, and S. Sifrony. </author> <title> Separating two simple polygons by a sequence of translations. </title> <journal> Discrete and Computational Geometry, </journal> <volume> 3(2) </volume> <pages> 123-136, </pages> <year> 1988. </year>
Reference-contexts: However, it is still possible to generate an assembly sequence by working backwards from the completed product. (See Section 4.1.) 2.1. ASSEMBLY SEQUENCING 13 Using computational-geometry approaches, Pollack et al. <ref> [62] </ref> wrote an algorithm to separate two polygons by a sequence of translations; and Valade [76] wrote one to separate two three-dimensional polyhedra by multiple translations. Not surprisingly, perhaps, the latter algorithm is quite slow (1 hour of CPU time for the example provided).
Reference: [63] <author> F.P. Preparata and M.I. Shamos. </author> <title> Computational Geometry: an Introduction, </title> <booktitle> pages 98, </booktitle> <pages> 137-140. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: This simple strategy was found to work well on almost all the examples tested. 6.9.1 Convex Hull Complexity In general, a convex hull of m points in d dimensions has complexity O (m bd=2c ) <ref> [63] </ref>. Therefore, if the parts are glued together and act as a rigid body (so d=constant), the complexity is polynomial in the number of fixels m (but constant in the number of parts). <p> Compute WSCH In general, a convex hull of m points in d dimensions has complexity O (m bd=2c ) and can be constructed in time O (m bd=2c+1 ) <ref> [63] </ref>. For the WSCH, the number of points m is equal to the number of active fixels 4 , which, again, is proportional to the number of vertices v e on the assembly's exterior.
Reference: [64] <author> E. Rimon and J. Burdick. </author> <title> Mobility of bodies in contact. I: A new 2 nd order mobility index for multiple-finger grasps. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 3, </volume> <pages> pages 2329-2335, </pages> <address> San Diego, </address> <year> 1994. </year>
Reference-contexts: In [58], Mishra et al. derived upper bounds on the number of fixture elements required to hold a part in form closure, and presented linear-time algorithms to generate those elements' positions. Recently, Rimon and Burdick <ref> [64] </ref> described another fixturing condition based on second-order geometric effects. As they correctly pointed out, some parts, such as an equilateral triangle grasped at each edge's midpoint, may be able to move infinitesimally, but not by any finite amount.
Reference: [65] <author> B. Romney, C. Godard, M. Goldwasser, and G. Ramkumar. </author> <title> An efficient system for geometric assembly sequence generation and evaluation. </title> <booktitle> In Proc. ASME International Computers in Engineering Conference, </booktitle> <pages> pages 699-712, </pages> <address> Boston, </address> <year> 1995. </year> <note> 156 BIBLIOGRAPHY </note>
Reference-contexts: STAAT uses the "local" version of the NDBG, which describes constraints on infinitesimal translations (including an improvement to this structure devised by Gold-wasser <ref> [65] </ref>.) A much more powerful version, however, is the "extended" NDBG, which describes the blocking relationships for part translations to infinity. <p> Chapter 3 An Efficient Assembly-Sequencing System In this chapter, I present the Stanford Assembly Analysis Tool (STAAT), a software system able to perform automatic assembly-sequence generation and complexity analysis, given only a geometric description of the proposed assembly <ref> [65] </ref>. STAAT generates sequences with single-step translations, and within the context of such sequences, represents a significant advance in speed and efficiency over previous work. <p> In this NDBG, the cells on the sphere represent regions with a constant blocking relationship for extended motions. This "extended NDBG" can be generated by computing the Minkowski differences of the various part shapes and projecting them onto the sphere <ref> [65] </ref>. It is also possible to generate the NDBG for generalized motions (translations plus rotations). Since these motions have six degrees of freedom, this NDBG is a five-dimensional sphere in six-dimensional space. It has not been implemented in STAAT, 32 CHAPTER 3. AN EFFICIENT ASSEMBLY-SEQUENCING SYSTEM 3.5. <p> Techniques to perform these computations efficiently in the general three-dimensional case are described in <ref> [65] </ref>. For planar assemblies, however, the generation of ETF cones is much simpler. A planar ETF cone is simply one or more "ranges" of angles of permissible motion, as illustrated in Fig. 7.2. <p> Each resulting region on the motion sphere exhibits a constant blocking relationship among all parts for extended translations. (For more details on extended NDBG's, the reader is referred to <ref> [65] </ref>.) Projected Fixtures. In a similar manner, discrete or continuous fixture elements can be projected onto a part's motion sphere, to identify the set of directions that would cause the part to collide with the fixture.
Reference: [66] <author> A. Schweikard and R.H. Wilson. </author> <title> Assembly sequences for polyhedra. </title> <journal> Algorith-mica, </journal> <volume> 13(6) </volume> <pages> 539-552, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Now, for sequences which insert one part at a time, such as those used in Chapters 6 and 7, building the full NDBG is not necessary. Instead, it suffices to consider the local translational freedom cone [33] or extended translational freedom cone <ref> [66] </ref> for each part. (These cones are, in fact, the basis elements from which NDBG's are constructed.) Krishnan and Sanderson [44] also use these cones in their disassembly analyses, but under a generate-and-test scheme to remove multi-part subassemblies. <p> The ETF cone is defined as the subset of directions, from the entire sphere of directions, over which a part can translate to infinity without colliding with another part <ref> [66] </ref>. For example, in Fig. 7.1a, the possible motions of P 1 are described by the ETF cone of Fig. 7.1b. Note that in general, the ETF cone may not be cone-shaped at all; it may be non-convex, empty, degenerate, or composed of several disjoint regions. <p> ETF cone. (Extended Translational Freedom cone.) The subset of directions, from the entire sphere of directions, over which a part can translate to infinity without colliding with another part <ref> [66] </ref>. (Section 7.1). feasible. A feasible action is one which involves no part-part collisions and whose fixture modification violates no stability requirements. (Section 6.6). fixel. A discrete fixture element, i.e., one of a series of mechanical "fingers" which collectively make up the fixture. (Section 4.1.1). fixture.
Reference: [67] <author> A. Senthil kumar, A.Y.C. Nee, and S. Prombanpong. </author> <title> Expert fixture-design system for an automated manufacturing environment. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(6) </volume> <pages> 316-326, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: For example, some methods described in the literature identify specific assembly features, such as screw holes and slots, and generate sequences or fixtures by applying rules to the feature-based model <ref> [24, 67] </ref>. Other approaches apply more general geometric reasoning to the overall shapes of the parts, producing assembly plans from physics-based criteria for collision avoidance and/or stability [10, 27, 56, 78, 80]. <p> PREVIOUS WORK which use only four fixture elements (as compared to the seven required for ordinary, first-order form closure [45]). One trend in the design of part fixtures has been the use of modular or reconfigurable fixture elements <ref> [3, 10, 67, 69, 77] </ref>. Because such elements can be re-used on many different parts, they are often more desirable than expensive custom fixtures, especially for low-volume products. Costs can be even further reduced if fixture is designed for robotic reconfiguration, as in [3, 69].
Reference: [68] <author> C.K. Shin, D.S. Hong, and H.S. Cho. </author> <title> Disassemblability analysis for generating robotic assembly sequences. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 2, </volume> <pages> pages 1284-1289, </pages> <address> Nagoya, Japan, </address> <year> 1995. </year>
Reference-contexts: Some early work was done by Fahlman [20] for structures of simple blocks. However, Fahlman himself acknowledged some of his stabilization techniques to be "a loose grouping of a very large number of essentially independent tricks". Some authors <ref> [68, 81] </ref> have handled assembly fixturing or stability based on the instability of individual parts moving alone.
Reference: [69] <author> B. Shirinzadeh. </author> <title> Issues in the design of the reconfigurable fixture modules for robotic assembly. </title> <journal> Journal of Manufacturing Systems, </journal> <volume> 12(1) </volume> <pages> 1-14, </pages> <year> 1993. </year>
Reference-contexts: PREVIOUS WORK which use only four fixture elements (as compared to the seven required for ordinary, first-order form closure [45]). One trend in the design of part fixtures has been the use of modular or reconfigurable fixture elements <ref> [3, 10, 67, 69, 77] </ref>. Because such elements can be re-used on many different parts, they are often more desirable than expensive custom fixtures, especially for low-volume products. Costs can be even further reduced if fixture is designed for robotic reconfiguration, as in [3, 69]. <p> Because such elements can be re-used on many different parts, they are often more desirable than expensive custom fixtures, especially for low-volume products. Costs can be even further reduced if fixture is designed for robotic reconfiguration, as in <ref> [3, 69] </ref>. Notable among the modular-fixturing algorithms is that of Brost and Goldberg [10], which designs a form-closing fixture for a planar part, using three locators and one clamp placed on a regular lattice of possible sites. <p> To be sure, in a realistic assembly environment, the actual shape of each element would pose a significant assembly constraint; and if there were, say, a library of predefined fixture elements available on a CAD system (such as those described in <ref> [14, 69] </ref>), these constraints could be carefully considered.
Reference: [70] <author> B. Shirinzadeh. </author> <title> CAD-based design and analysis system for reconfigurable fixtures in robotic assembly. </title> <journal> Computing and Control Engineering Journal, </journal> <volume> 5(1) </volume> <pages> 41-46, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: position is defined to be that of its tip, and the presence of that fixel precludes any part from ever "sweeping across" that position. (The avoidance of part/fixel collisions is, in fact, one of the very constraints which make sequence/fixture co-design such an interesting problem.) Some authors in the literature <ref> [55, 70, 85] </ref> treat one part in the assembly as immovable, as a means of supporting the rest of the assembly.
Reference: [71] <author> A.K. Subramani and P. Dewhurst. </author> <title> Automatic generation of product disassembly sequences. </title> <journal> Manufacturing Technology CIRP Annals, </journal> <volume> 40(1) </volume> <pages> 115-118, </pages> <year> 1991. </year>
Reference-contexts: However, the assembly-by-disassembly strategy is very widely used in the literature, and it is a strategy that will be employed in this dissertation, as well. A number of systems have been developed to perform assembly sequencing using motions only along the major axes <ref> [31, 48, 57, 71] </ref> or along pre-specified trajectories [13, 32, 36, 54].
Reference: [72] <author> A. Sudsang, J. Ponce, and N. Srinivasa. </author> <title> Algorithms for constructing immobilizing fixtures and grasps of three-dimensional objects. </title> <booktitle> In Preprints of the Second Workshop on Algorithmic Foundations of Robotics (WAFR '96), edited by J.-P. </booktitle> <editor> Lammond and M. Overmars, </editor> <year> 1996. </year> <note> Final version to be published by A.K. </note> <editor> Peters, </editor> <address> Wellesley, MA. </address>
Reference-contexts: Many authors, such as <ref> [3, 7, 10, 58, 72, 74, 87] </ref>, neglect the stabilizing effects of friction for reasons of simplicity and conservatism, while others [21, 51, 60] do include friction. <p> Recently, Rimon and Burdick [64] described another fixturing condition based on second-order geometric effects. As they correctly pointed out, some parts, such as an equilateral triangle grasped at each edge's midpoint, may be able to move infinitesimally, but not by any finite amount. Sudsang et al. <ref> [72] </ref> applied this less restrictive notion of immobility to the design of frictionless fixtures for polyhedra, 16 CHAPTER 2. PREVIOUS WORK which use only four fixture elements (as compared to the seven required for ordinary, first-order form closure [45]).
Reference: [73] <author> J.C. Trappey and C.R. Liu. </author> <title> A literature survey of fixture-design automation. </title> <journal> International Journal of Advanced Manufacturing Technology, </journal> <volume> 5(3) </volume> <pages> 240-255, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: with a constant number n of translations, producing algorithms which run in polynomial time with respect to the size of the assembly. 2.2 Fixturing Part Fixturing There is a great deal of literature on the fixturing or grasping of a single part, or "workpiece". (Literature surveys on this subject include <ref> [28, 29, 73] </ref>.) Much of this work focuses on establishing complete kinematic closure on a part | that is, the complete immobilization of that part | or testing an existing fixture for this condition.
Reference: [74] <author> J.C. Trinkle. </author> <title> On the stability and instantaneous velocity of grasped frictionless objects. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 8(5) </volume> <pages> 560-572, </pages> <month> October </month> <year> 1992. </year> <note> BIBLIOGRAPHY 157 </note>
Reference-contexts: Many authors, such as <ref> [3, 7, 10, 58, 72, 74, 87] </ref>, neglect the stabilizing effects of friction for reasons of simplicity and conservatism, while others [21, 51, 60] do include friction. <p> Instead, one merely needs to establish stability against gravity and the part-on-part insertion forces (described below in Section 4.1), while still admitting free insertion paths for 2.2. FIXTURING 17 parts would be unstable moving alone. the parts. Fixturing against known external forces has been studied before <ref> [16, 50, 56, 58, 74] </ref>, especially in the context of fixturing for machining [16, 50]. Lee and Yi [49] even applied the concept of stability against part insertion forces in their analysis of multipart assemblies, although not in the context of a fixturing algorithm. <p> The first systematic method to fixture an assembly for true stability was developed by Wolter and Trinkle [85]. Based on the work of Palmer [61] and Trinkle <ref> [74] </ref>, they presented two systems of linear inequalities called the velocity and force formulations, which are duals of each other in the linear-programming sense. The velocity formulation (also used by Mattikalli et al. in [55]) describes the simultaneous motion of the 18 CHAPTER 2.
Reference: [75] <author> J. Tsao and J. Wolter. </author> <title> Assembly planning with intermediate states. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 1, </volume> <pages> pages 71-76, </pages> <address> Atlanta, </address> <year> 1993. </year>
Reference-contexts: Although the assumption of monotonicity does preclude examples such as the latch assembly of Fig. 3.1, it is by and large a reasonable assumption, and one commonly seen in the assembly-planning literature (with a few exceptions <ref> [32, 75] </ref>). Single-Step Translations Parts are inserted along straight-line translational paths from infinity to their final locations in the subassembly. Extensions to rotational and/or multi-step part motions remain a major direction for future research.
Reference: [76] <author> J.-M. Valade. </author> <title> Geometric reasoning and automatic synthesis of assembly trajectory. </title> <booktitle> In Proc. of '85 International Conference on Advanced Robotics, </booktitle> <pages> pages 43-50, </pages> <address> Tokyo, </address> <year> 1985. </year> <institution> Japan Industrial Robot Association. </institution>
Reference-contexts: However, it is still possible to generate an assembly sequence by working backwards from the completed product. (See Section 4.1.) 2.1. ASSEMBLY SEQUENCING 13 Using computational-geometry approaches, Pollack et al. [62] wrote an algorithm to separate two polygons by a sequence of translations; and Valade <ref> [76] </ref> wrote one to separate two three-dimensional polyhedra by multiple translations. Not surprisingly, perhaps, the latter algorithm is quite slow (1 hour of CPU time for the example provided).
Reference: [77] <author> K. Whybrew and B.K.A. Ngoi. </author> <title> Computer aided design of modular fixture assembly. </title> <journal> International Journal of Advanced Manufacturing Technology, </journal> <volume> 7(5) </volume> <pages> 267-276, </pages> <year> 1992. </year>
Reference-contexts: PREVIOUS WORK which use only four fixture elements (as compared to the seven required for ordinary, first-order form closure [45]). One trend in the design of part fixtures has been the use of modular or reconfigurable fixture elements <ref> [3, 10, 67, 69, 77] </ref>. Because such elements can be re-used on many different parts, they are often more desirable than expensive custom fixtures, especially for low-volume products. Costs can be even further reduced if fixture is designed for robotic reconfiguration, as in [3, 69]. <p> Nguyen [60] devised a grasp-synthesis algorithm which specifies grasps as independent regions on the part's boundary, such that grasping `fingers' can be placed anywhere in those regions and always establish form or force closure. In work that complements these efforts, Whybrew and Ngoi <ref> [77] </ref> focused on the subsequent problem of translating the set of fixturing locations on the workpiece into an arrangement of actual fixture elements which implement that solution. They devised a software system to do this with an arrangement of modular fixture elements placed on crisscrossed tracks on the baseplate.
Reference: [78] <author> R.H. Wilson. </author> <title> On Geometric Assembly Planning. </title> <type> Ph.D. thesis, </type> <institution> Stanford University, Stanford, </institution> <address> CA, </address> <year> 1992. </year> <note> Stanford Technical Report STAN-CS-92-1416. </note>
Reference-contexts: Other approaches apply more general geometric reasoning to the overall shapes of the parts, producing assembly plans from physics-based criteria for collision avoidance and/or stability <ref> [10, 27, 56, 78, 80] </ref>. Still other methods, such as the well-known Boothroyd-Dewhurst design-for-assembly criteria [8], estimate the product's assembly cost without generating an explicit assembly plan. <p> A software system for geometric assembly sequencing and analysis is presented, which I developed jointly with three other researchers. This system, called STAAT, implements and validates some of the assembly-sequencing concepts and algorithms presented in earlier publications <ref> [78, 81] </ref>. STAAT is able to generate an assembly sequence efficiently, compute complexity measures based on the set of all possible sequences, and identify the sequence which optimizes a particular complexity measure. Issues in Sequence/Fixture Co-Design. <p> The feasibility of the motions is then determined by "sweeping", or projecting, the parts in the proposed direction. NDBG-Based Approaches However, STAAT uses a much more efficient data structure to process the geometric information than do these systems: namely, the non-directional blocking graph (NDBG) developed by Wilson <ref> [78, 81] </ref>. <p> this structure and how it works. 3.4 The Non-Directional Blocking Graph For many classes of part motion (e.g., infinitesimal translations, translations with rotations, single extended motions, n-step translations, etc.), there exists a NonDirectional Blocking Graph, or NDBG, which summarizes the blocking relationships within an assembly for that class of motion <ref> [78, 81] </ref>. In STAAT, only the NDBG for single-step translations has been implemented, but other authors have recently reported promising results in implementing the extensions to infinitesimal generalized motions [25] and multi-step translations [26, 27]. <p> The new partitioning is found by overlaying all LTF cones from all pairs of parts onto the same sphere. 1 For a more rigorous definition of LTF cones, the reader is referred to Wilson <ref> [78] </ref>. Wilson, however, did not use LTF cones in his construction of the NDBG, as is being done here. 30 CHAPTER 3. AN EFFICIENT ASSEMBLY-SEQUENCING SYSTEM freedom are narrower, and described by the parts' LTF cones. blocking relationships among the parts. 3.4. <p> DISASSEMBLY SEQUENCING WITH THE NDBG 33 but Guibas et al. [25] have recently devised and implemented an algorithm which uses such an NDBG efficiently. This algorithm explores only selected regions of the hypersphere, without sacrificing completeness. For more details on NDBG's and DBG's, the reader is referred to Wilson <ref> [78, 81] </ref>. 3.5 Disassembly Sequencing with the NDBG 3.5.1 NDBG Traversal Once the NDBG has been computed, STAAT enters into a loop as it traverses the NDBG looking for directions in which to pull out subassemblies. <p> The primary directions in which it looks are the so-called NDBG vertices, which are the locations on the NDBG sphere where two or more arcs intersect. As Wilson <ref> [78] </ref> showed, it suffices to examine only these directions when looking for locally-removable subassemblies. <p> For example, in Fig. 3.16, the locally-removable subassemblies are fP 0 ; P 1a -P 1c g and fP 0 ; P 1a -P 1c ; P 2 g. A graph-searching algorithm to identify these subassemblies is described by Wilson in <ref> [78] </ref>. 2 A strongly connected component of a directed graph is a maximal subset of nodes such that for any two nodes n 1 and n 2 in this subset, a path connects n 1 to n 2 . 36 CHAPTER 3. <p> The results are shown in Table 3.1. Two computation times were measured: * The time to find a successful disassembly sequence; and 38 CHAPTER 3. AN EFFICIENT ASSEMBLY-SEQUENCING SYSTEM STAAT STAAT GRASP <ref> [78] </ref> No. of (DEC Alpha) (DEC 5000) (DEC 5000) Assembly Parts Sequence Graph Sequence Graph Sequence Graph Bell 17 0.58 5.1 2.0 13 16 522 Bell 22 1.0 31 3.4 82 21 2186 Engine 12 0.8 5.3 3 3.3 19 3 30 42 Engine 30 2.4 | 9.4 | 112 | <p> For the larger assemblies, this is not feasible in practice because of the large size of the graph. As can be seen, the running times are significantly better than those reported by Wilson <ref> [78] </ref>, often by a full order of magnitude. <p> However, observe that an insertion force at c 1 will exert the same torque as the same insertion force at c 2 , because they are aligned with respect to the direction of insertion. This observation is illustrated in Fig. 6.9. 2 Wilson <ref> [78] </ref> showed that point-plane contacts can effectively represent any realistic part-part interface in a polyhedral assembly, in terms of reproducing the local freedom constraints. For this reason, the point-plane contact model is used in both STAAT and Atlas. 84 CHAPTER 6. <p> Since v e v, and the mutual intersection operations also do not violate the polynomial bound, it is safe to say that the construction of the IFS cones has no more than polynomial cost in the number of vertices v. 4. Compute ETF cone. Wilson <ref> [78] </ref> showed that the extended NDBG arrangement can be computed in worst-case time O (v 4 ). <p> Chapter 3 presented a framework for this research by describing STAAT, a system for solving the sequencing problem alone. STAAT is an implementation of the NDBG-based techniques of Randy Wilson <ref> [78, 81] </ref> in a full-fledged sequencing system, supporting the evaluation of assembly complexity measures and searches for the optimal sequence according to a particular measure. It is, in effect, a "fulfillment" of NDBG technology in a very versatile system. <p> For the case of single-step translations of three-dimensional parts, the NDBG partitions the motion sphere into regions, such that there is a constant blocking relationship within each region <ref> [78, 81] </ref>. (Section 3.4). overfixture. To surround the assembly with a completely immobilizing fixture. In Chapters 6 and 7, Atlas performs sequence/fixture co-design by first overfix-turing the assembly, and later deleting portions of the fixture as appropriate. (Section 6.4). GLOSSARY OF KEY TERMS 147 re-fixture.
Reference: [79] <author> R.H. Wilson. </author> <title> Geometric reasoning about assembly tools. </title> <type> Technical Report SAND95-2423, </type> <institution> Sandia National Laboratories, </institution> <address> Albuquerque, NM, </address> <year> 1996. </year>
Reference-contexts: Applications of this principle to other aspects of assembly planning are also not difficult to envision. In the case of tooling, for example, one should never plan a part removal for which the necessary tool doesn't have enough room; this principle was applied by Wilson <ref> [79] </ref> in his treatment of the combined sequencing and tooling problems. It is also instructive to note that while this research addresses the problem of fixturing an assembly, it does not address the related problem of grasping the moving parts during insertion operations. Grasping and fixturing are closely-related problems. <p> If no such sequence exists, a second algorithm generates assembly sequences which will work under some instances of the part dimensions. In another extension, Wilson <ref> [79] </ref> integrated the NDBG approach with considerations of tooling requirements, resulting in efficient assembly-planning algorithms which ensure the existence of enough free space to apply the appropriate part-joining tools. Several researchers have applied the larger concept of partitioning the space of part motions to encompass motions other than single-step translations.
Reference: [80] <author> R.H. Wilson, L. Kavraki, T. Lozano-Perez, and J.-C. Latombe. </author> <title> Two-handed assembly sequencing. </title> <journal> International Journal of Robotics Research, </journal> <volume> 14(4) </volume> <pages> 335-350, </pages> <year> 1995. </year>
Reference-contexts: Other approaches apply more general geometric reasoning to the overall shapes of the parts, producing assembly plans from physics-based criteria for collision avoidance and/or stability <ref> [10, 27, 56, 78, 80] </ref>. Still other methods, such as the well-known Boothroyd-Dewhurst design-for-assembly criteria [8], estimate the product's assembly cost without generating an explicit assembly plan. <p> FIXTURING 15 infinitesimal generalized motions with which to partition an assembly, by identifying and examining only those directions of generalized motion (2 &lt; 6 ) that are relevant to the partitioning problem. Lozano-Perez and Wilson et al. <ref> [53, 80] </ref> developed the concept of the interference diagram (related to the NDBG) to analyze arbitrary classes of part motions, later implementing it for the special cases of single-step translations and infinitesimal generalized motions.
Reference: [81] <author> R.H. Wilson and J.-C. Latombe. </author> <title> Geometric reasoning about mechanical assembly. </title> <journal> Artificial Intelligence, </journal> <volume> 71(2) </volume> <pages> 371-396, </pages> <year> 1994. </year>
Reference-contexts: A software system for geometric assembly sequencing and analysis is presented, which I developed jointly with three other researchers. This system, called STAAT, implements and validates some of the assembly-sequencing concepts and algorithms presented in earlier publications <ref> [78, 81] </ref>. STAAT is able to generate an assembly sequence efficiently, compute complexity measures based on the set of all possible sequences, and identify the sequence which optimizes a particular complexity measure. Issues in Sequence/Fixture Co-Design. <p> The feasibility of the motions is then determined by "sweeping", or projecting, the parts in the proposed direction. NDBG-Based Approaches However, STAAT uses a much more efficient data structure to process the geometric information than do these systems: namely, the non-directional blocking graph (NDBG) developed by Wilson <ref> [78, 81] </ref>. <p> Based on the extended NDBG, Wilson and Latombe <ref> [81] </ref> presented a polynomial-time algorithm to generate two-handed, monotone assembly sequences of straight-line part insertions in any direction, whenever such sequences exist. They also proposed a number of 14 CHAPTER 2. <p> Some early work was done by Fahlman [20] for structures of simple blocks. However, Fahlman himself acknowledged some of his stabilization techniques to be "a loose grouping of a very large number of essentially independent tricks". Some authors <ref> [68, 81] </ref> have handled assembly fixturing or stability based on the instability of individual parts moving alone. <p> this structure and how it works. 3.4 The Non-Directional Blocking Graph For many classes of part motion (e.g., infinitesimal translations, translations with rotations, single extended motions, n-step translations, etc.), there exists a NonDirectional Blocking Graph, or NDBG, which summarizes the blocking relationships within an assembly for that class of motion <ref> [78, 81] </ref>. In STAAT, only the NDBG for single-step translations has been implemented, but other authors have recently reported promising results in implementing the extensions to infinitesimal generalized motions [25] and multi-step translations [26, 27]. <p> DISASSEMBLY SEQUENCING WITH THE NDBG 33 but Guibas et al. [25] have recently devised and implemented an algorithm which uses such an NDBG efficiently. This algorithm explores only selected regions of the hypersphere, without sacrificing completeness. For more details on NDBG's and DBG's, the reader is referred to Wilson <ref> [78, 81] </ref>. 3.5 Disassembly Sequencing with the NDBG 3.5.1 NDBG Traversal Once the NDBG has been computed, STAAT enters into a loop as it traverses the NDBG looking for directions in which to pull out subassemblies. <p> Chapter 3 presented a framework for this research by describing STAAT, a system for solving the sequencing problem alone. STAAT is an implementation of the NDBG-based techniques of Randy Wilson <ref> [78, 81] </ref> in a full-fledged sequencing system, supporting the evaluation of assembly complexity measures and searches for the optimal sequence according to a particular measure. It is, in effect, a "fulfillment" of NDBG technology in a very versatile system. <p> For the case of single-step translations of three-dimensional parts, the NDBG partitions the motion sphere into regions, such that there is a constant blocking relationship within each region <ref> [78, 81] </ref>. (Section 3.4). overfixture. To surround the assembly with a completely immobilizing fixture. In Chapters 6 and 7, Atlas performs sequence/fixture co-design by first overfix-turing the assembly, and later deleting portions of the fixture as appropriate. (Section 6.4). GLOSSARY OF KEY TERMS 147 re-fixture.
Reference: [82] <author> J. Wolter and E. Kroll. </author> <title> Toward assembly sequence planning with flexible parts. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 2, </volume> <pages> pages 528-534, </pages> <address> Minneapolis, MN, </address> <year> 1996. </year>
Reference-contexts: Rigid Parts The most obvious consequence of the rigid-parts assumption is that parts and features which are deliberately non-rigid, such as wires and "snap-fit" connections, are excluded. An analysis of such objects would probably require modeling the manner and extent of allowable deformation. (Recently, Wolter and Kroll <ref> [82] </ref> have begun examining some of the representational issues for flexible, string-like parts, with a view toward assembly-sequencing applications.) A non-constant assembly geometry would also significantly increase the difficulty of confirming or disconfirming the existence of collision-free motion paths. Therefore, for the sake of simplicity, flexible parts are excluded.
Reference: [83] <author> J.D. Wolter. </author> <title> On the Automatic Generation of Plans for Mechanical Assembly. </title> <type> Ph.D. thesis, </type> <institution> University of Michigan, </institution> <year> 1988. </year>
Reference-contexts: The problem of automatically generating sequences from an assembly's geometry alone is, in its full generality, PSPACE-hard <ref> [59, 83] </ref>. Even when every operation is constrained to move exactly two subassemblies into their final relative positions, the problem has still been found to be NP-complete in both the two-dimensional [40] and 11 12 CHAPTER 2. PREVIOUS WORK three-dimensional [39] cases.
Reference: [84] <author> J.D. Wolter. </author> <title> On the automatic generation of assembly plans. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 1, </volume> <pages> pages 62-68, </pages> <address> Scottsdale, AZ, </address> <year> 1989. </year> <note> 158 BIBLIOGRAPHY </note>
Reference-contexts: Another simplification used to avoid the NP-completeness of the more general case is to insert only one part at a time <ref> [84, 86] </ref>. Woo and Dutta [86] created such a system which runs in O (n log n) average time, where n is the number of faces in contact. <p> Arkin et al. [2] devised a way to partition polygons into two sets which are separable by a single translation, by identifying the boundary line between them; however, the extension of this method to the three-dimensional case is not apparent. Wolter <ref> [84] </ref>, Homem de Mello and Sanderson [34], and Lin and Chang [52] each used a basic approach similar to that of the STAAT system of Chapter 3. Directions of possible part removal are suggested by contact information between the parts (or sometimes by the types of parts, e.g., screws).
Reference: [85] <author> J.D. Wolter and J.C. Trinkle. </author> <title> Automatic selection of fixture points for frictionless assemblies. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 1, </volume> <pages> pages 528-534, </pages> <address> San Diego, </address> <year> 1994. </year>
Reference-contexts: The first systematic method to fixture an assembly for true stability was developed by Wolter and Trinkle <ref> [85] </ref>. Based on the work of Palmer [61] and Trinkle [74], they presented two systems of linear inequalities called the velocity and force formulations, which are duals of each other in the linear-programming sense. <p> position is defined to be that of its tip, and the presence of that fixel precludes any part from ever "sweeping across" that position. (The avoidance of part/fixel collisions is, in fact, one of the very constraints which make sequence/fixture co-design such an interesting problem.) Some authors in the literature <ref> [55, 70, 85] </ref> treat one part in the assembly as immovable, as a means of supporting the rest of the assembly. <p> THE SEARCH SPACE 73 The continuous representation in conjunction with virtual fixels resembles somewhat Wolter and Trinkle's use of two fixels at continuously-variable locations along an edge (in the planar case) <ref> [85] </ref>. <p> phase of the co-design process. 6.7 Verifying Stability for Actions Before continuing with a discussion of how Atlas chooses among feasible actions, it is instructive to examine the method by which it verifies assembly stability. 6.7.1 Basic Approach Atlas checks assembly stability using the method presented by Wolter and Trinkle <ref> [85] </ref>, which revolves around the notion of wrench-balancing. Consider first the case where parts are glued together upon insertion, so that the entire assembly can be treated as a single, rigid unit. <p> For more information on these formulations, the interested reader is referred to <ref> [85, 56] </ref>. The ability to check stability in the presence of multiple, independent external forces (such as gravity and insertion forces) derives from the following simple theorem.
Reference: [86] <author> T.C. Woo and D. Dutta. </author> <title> Automatic disassembly and total ordering in three dimensions. </title> <journal> Journal of Engineering for Industry, </journal> <volume> 113(2) </volume> <pages> 207-213, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Another simplification used to avoid the NP-completeness of the more general case is to insert only one part at a time <ref> [84, 86] </ref>. Woo and Dutta [86] created such a system which runs in O (n log n) average time, where n is the number of faces in contact. <p> Another simplification used to avoid the NP-completeness of the more general case is to insert only one part at a time [84, 86]. Woo and Dutta <ref> [86] </ref> created such a system which runs in O (n log n) average time, where n is the number of faces in contact. To do this they used the notion of a "disassembly tree", showing what parts in the assembly must be removed before what other parts.
Reference: [87] <author> Y.L. Xiong, D.J. Sanger, and D.R. Kerr. </author> <title> Geometric modelling of boundless grasps. </title> <journal> Robotica, </journal> <volume> 11 </volume> <pages> 19-26, </pages> <year> 1993. </year>
Reference-contexts: Many authors, such as <ref> [3, 7, 10, 58, 72, 74, 87] </ref>, neglect the stabilizing effects of friction for reasons of simplicity and conservatism, while others [21, 51, 60] do include friction.
References-found: 88

