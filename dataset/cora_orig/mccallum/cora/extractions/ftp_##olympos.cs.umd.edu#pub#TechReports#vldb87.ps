URL: ftp://olympos.cs.umd.edu/pub/TechReports/vldb87.ps
Refering-URL: http://www.cs.umd.edu/~christos/
Root-URL: 
Title: THE R R -TREE: A DYNAMIC INDEX FOR MULTI-DIMENSIONAL OBJECTS  
Author: Timos Sellis , Nick Roussopoulos , and Christos Faloutsos 
Address: College Park, MD 20742  
Affiliation: Department of Computer Science University of Maryland  
Abstract: The problem of indexing multidimensional objects is considered. First, a classification of existing methods is given along with a discussion of the major issues involved in multidimensional data indexing. Second, a variation to Guttman's R-trees (R + -trees) that avoids overlapping rectangles in intermediate nodes of the tree is introduced. Algorithms for searching, updating, initial packing and reorganization of the structure are discussed in detail. Finally, we provide analytical results indicating that R + -trees achieve up to 50% savings in disk accesses compared to an R-tree when searching files of thousands of rectangles.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.L. Bentley, </author> <title> ``Multidimensional Binary Search Trees Used for Associative Searching,'' </title> <journal> CACM, </journal> <volume> 18(9), </volume> <pages> pp. </pages> <month> 509-517 , Sept. </month> <year> 1975. </year>
Reference-contexts: We shall call these methods fixed. The opposite is to let the data points determine the position of the hyperplane, as, e.g., the k-d trees <ref> [1] </ref> or the K-D-B-trees [17] do. We shall call these methods adaptable.
Reference: [2] <author> N.S. Chang and K.S. Fu, </author> <title> ``Picture Query Languages for Pictorial Data-Base Systems,'' </title> <journal> IEEE Computer, </journal> <volume> 14(11), </volume> <month> November </month> <year> 1981. </year>
Reference-contexts: However, the underlying structures, data models and query languages are not sufficient for the manipulation of more complex data. The problem of extending current data models and languages has been considered by various people in the past <ref> [2] </ref>, [21] [9] [19]. In this paper we focus on the problem of deriving efficient access methods for multi-dimensional objects.
Reference: [3] <author> M. Chock, A.F. Cardenas, and A. Klinger, </author> <title> ``Database Structure and Manipulation Capabilities of a Picture Database Management System (PICDMS),'' </title> <journal> IEEE Trans. on Pattern Analysis and Machine Intelligence, </journal> <volume> PAMI-6(4), </volume> <pages> pp. </pages> <month> 484-492 , July </month> <year> 1984. </year>
Reference-contexts: Multi-dimensional data arise in many applications, to name the most important: (1) Cartography. Maps could be stored and searched electronically, answering efficiently geometric queries <ref> [3] </ref> [19]. (2) Computer-Aided Design (CAD). For example, VLSI design systems need to store many thousands of rectangles [15] [9], representing electronic gates and higher level elements. (3) Computer vision and robotics. (4) Rule indexing in expert database systems [22].
Reference: [4] <author> C. Faloutsos, </author> <title> ``Gray Codes for Partial Match and Range Queries,'' </title> <journal> IEEE Trans. on Software Engineering , 1988. </journal> <note> (to appear) </note>
Reference-contexts: The idea is to transform k-dimensional objects to line segments, using the so-called z-transform. This transformation tries to preserve the distance, that is, points that are close in the k-d space are likely to be close in the 1-d transformed space. Improved distance-preserving transformations have been proposed <ref> [4] </ref>, which achieve better clustering of nearby points, by using Gray codes. The original z-transform induces an ordering of the k-d points, which is the very same one that a (k-dimensional) quad-tree uses to scan pixels in a k-dimensional space.
Reference: [5] <author> C. Faloutsos, T. Sellis, and N. Roussopoulos, </author> <title> ``Object Oriented Access Methods for Spatial Objects: Algorithms and Analysis,'' </title> <note> 1987. (in preparation) </note>
Reference-contexts: Guttman also suggests a similar procedure where under-utilized nodes are emptied and the "orphaned" rectangles are re-inserted at the top of the tree. For brevity we will not give in detail an algorithm for tree re-organization. In <ref> [5] </ref> we suggest some algorithms which we plan to test in the near future. 3.5. Node Splitting When a node overflows some splitting algorithm is needed to produce two new nodes. <p> Hence, nodes intersected by the partition must be split recursively. The only exception is with leaf nodes. Objects in the leaf nodes are not split; this is just for efficiency reasons since rectangles in the leaf pages cannot account for further downward splits. In <ref> [5] </ref>, we discuss some additional optimization tactics that can be used to increase the space efficiency of the tree regarding splitting of nodes. The node splitting algorithm is illustrated in Figure 3.10.
Reference: [6] <author> C. Faloutsos, T. Sellis, and N. Roussopoulos, </author> <title> ``Analysis of Object Oriented Spatial Access Methods,'' </title> <booktitle> Proc. ACM SIGMOD , May 27-29, </booktitle> <year> 1987. </year>
Reference-contexts: However, some preliminary work has been already done on analyzing the search performance of Rand R + -trees. The next section briefly presents these results. 5. Analysis An approach that simplifies the analysis <ref> [6] </ref> is to transform the objects into points in a space of higher dimensionality [11]. For a rectangle aligned with the axes, four coordinates are enough to uniquely determine it (the x and y coordinates of the lower-left and upper-right corners). <p> Due to this uniformity assumption, D is the same for every point in the space. Allowing more than one size for segents enables the analysis to account for realistic distributions where not all objects are of the same size. In <ref> [6] </ref> we have shown that the same analytical results still stand in the case of more than two sets of segments. In the following we give some indicative results of the search performance of both Rand R + trees. <p> However, typical distributions do not have this characteristic. On the contrary, lengthy segments are few compared with small ones (e.g., in a VLSI design). This concludes our presentation of some analytical results we have obtained. For a more detailed description, the reader is referred to <ref> [6] </ref>. We are currently working on the experimental verification of these results.
Reference: [7] <author> R.A. Finkel and J.L. Bentley, </author> <title> ``Quadtrees: A data structure for retrieval on composite keys,'' </title> <journal> ACTA Informatica, </journal> <volume> 4(1), </volume> <pages> pp. </pages> <month> 1-9 , </month> <year> 1974. </year>
Reference-contexts: Dimensionality the split is done with only one hyperplane (1-d cut), as in the k-d trees. The opposite is to split in all k dimensions, with k hyperplanes (k-d cut), as the quad-trees <ref> [7] </ref> and oct-trees do. Locality The splitting hyperplane splits not only the affected region, but all the regions in this direction, as well, like the grid file does. We shall call these methods grid methods.
Reference: [8] <author> O. Gunther, </author> <title> ``The Cell Tree: An Index for Geometric Data,'' </title> <note> Memorandum No. </note> <institution> UCB/ERL M86/89, Univ. of California, Berkeley, </institution> <month> Dec. </month> <year> 1986. </year>
Reference-contexts: The only complication to be handled is that a rectangle may intersect a splitting hyperplane. One solution is to cut the offending rectangle in two pieces and tag the pieces, to indicate that they belong to the same rectangle. Recently, Gun-ther <ref> [8] </ref> suggested a relevant scheme for general polygon data, either convex or concave. He suggests that the splitting hyperplanes can be of arbitrary orientation (not necessarily parallel to the axes). The first who proposed the use of overlapping sub-regions was Guttman with his R-Trees [10].
Reference: [9] <author> A. Guttman, </author> <title> ``New Features for Relational Database Systems to Support CAD Applications,'' </title> <type> PhD Thesis, </type> <institution> University of California, Berkeley, </institution> <month> June </month> <year> 1984. </year>
Reference-contexts: Multi-dimensional data arise in many applications, to name the most important: (1) Cartography. Maps could be stored and searched electronically, answering efficiently geometric queries [3] [19]. (2) Computer-Aided Design (CAD). For example, VLSI design systems need to store many thousands of rectangles [15] <ref> [9] </ref>, representing electronic gates and higher level elements. (3) Computer vision and robotics. (4) Rule indexing in expert database systems [22]. In this proposal rules are stored as geometric entities in some multi-dimensional space defined over the database. <p> However, the underlying structures, data models and query languages are not sufficient for the manipulation of more complex data. The problem of extending current data models and languages has been considered by various people in the past [2], [21] <ref> [9] </ref> [19]. In this paper we focus on the problem of deriving efficient access methods for multi-dimensional objects.
Reference: [10] <author> A. Guttman, ``R-Trees: </author> <title> A Dynamic Index Structure for Spatial Searching,'' </title> <booktitle> Proc. ACM SIGMOD , pp. </booktitle> <month> 47-57 , June </month> <year> 1984. </year>
Reference-contexts: Then, in sections 3 and 4 we describe R + -trees and the algorithms for searching, updating and packing the structure. Section 5 presents some preliminary analytical results on the searching performance of the R + -tree, especially as it compares to the corresponding performance of R-trees <ref> [10] </ref>. Finally, we conclude in Section 6 by summarizing our contributions and giving hints for future research in the area of multi-dimensional data indexing structures. 2. Survey In this section we classify and briefly discuss known methods for handling multi-dimensional objects. <p> Recently, Gun-ther [8] suggested a relevant scheme for general polygon data, either convex or concave. He suggests that the splitting hyperplanes can be of arbitrary orientation (not necessarily parallel to the axes). The first who proposed the use of overlapping sub-regions was Guttman with his R-Trees <ref> [10] </ref>. R-trees are an extension of B-trees for multi-dimensional objects that are either points or regions. Like B-trees, they are balanced (all leaf nodes appear on the same level, which is a desirable feature) and guarantee that the space utilization is at least 50%.
Reference: [11] <author> K. Hinrichs and J. Nievergelt, </author> <title> ``The Grid File: A Data Structure to Support Proximity Queries on Spatial Objects,'' </title> <type> Tech. Report 54, </type> <institution> Institut fur Informatik, ETH, </institution> <address> Zurich, </address> <month> July </month> <year> 1983. </year>
Reference-contexts: Methods for rectangles Here we present a classification and brief discussion of methods for handling rectangles. The main classes of methods are the following: (1) Methods that transform the rectangles into points in a space of higher dimensionality <ref> [11] </ref>. <p> Therefore, one of the previously men-tioned methods for storing points can be chosen. Lauther [12] and Rosenberg [18] used k-d trees. Hinrichs and Nievergelt <ref> [11] </ref> suggested using the grid file, after a rotation of the axes. The rotation is necessary, in order to avoid nonuniform distribution of points, that would lead the grid file to poor performance. (2) Methods that use space filling curves, to map a k-d space onto a 1-d space. <p> However, some preliminary work has been already done on analyzing the search performance of Rand R + -trees. The next section briefly presents these results. 5. Analysis An approach that simplifies the analysis [6] is to transform the objects into points in a space of higher dimensionality <ref> [11] </ref>. For a rectangle aligned with the axes, four coordinates are enough to uniquely determine it (the x and y coordinates of the lower-left and upper-right corners).
Reference: [12] <author> U. Lauther, </author> <title> ``4-Dimensional Binary Search Trees as a Means to Speed Up Associative Searches in Design Rule Verification of Integrated Circuits,'' </title> <journal> Journal of Desing Automation and Fault-Tolerant Computing, </journal> <volume> 2(3), </volume> <pages> pp. </pages> <month> 241-247 , July </month> <year> 1978. </year>
Reference-contexts: Therefore, one of the previously men-tioned methods for storing points can be chosen. Lauther <ref> [12] </ref> and Rosenberg [18] used k-d trees. Hinrichs and Nievergelt [11] suggested using the grid file, after a rotation of the axes.
Reference: [13] <author> J. Nievergelt, H. Hinterberger, and K.C. Sevcik, </author> <title> ``The Grid File: An Adaptable, Symmetric Multi-key File Structure,'' </title> <journal> ACM TODS, </journal> <volume> 9(1), </volume> <pages> pp. </pages> <month> 38-71 , March </month> <year> 1984. </year>
Reference-contexts: The following attributes of the split help to classify the known methods: Position The position of the splitting hyperplane is predetermined, e.g., it cuts the region in half exactly, as the grid file does <ref> [13] </ref>. We shall call these methods fixed. The opposite is to let the data points determine the position of the hyperplane, as, e.g., the k-d trees [1] or the K-D-B-trees [17] do. We shall call these methods adaptable. Nievergelt et al. [13] made the same distinction, using different terminology: what we <p> region in half exactly, as the grid file does <ref> [13] </ref>. We shall call these methods fixed. The opposite is to let the data points determine the position of the hyperplane, as, e.g., the k-d trees [1] or the K-D-B-trees [17] do. We shall call these methods adaptable. Nievergelt et al. [13] made the same distinction, using different terminology: what we call "fixed" methods are those methods that organize the embedding space, from which the data is drawn, while they call the "adaptable" methods as methods that organize the data to be stored.
Reference: [14] <author> J. Orenstein, </author> <title> ``Spatial Query Processing in an Object-Oriented Database System,'' </title> <booktitle> Proc. ACM SIGMOD , pp. </booktitle> <month> 326-336 , May </month> <year> 1986. </year>
Reference-contexts: Such a method, suitable for a paged environment, has been suggested, among others, by Orenstein <ref> [14] </ref>. The idea is to transform k-dimensional objects to line segments, using the so-called z-transform. This transformation tries to preserve the distance, that is, points that are close in the k-d space are likely to be close in the 1-d transformed space. <p> Obtaining formulas and results for line segments is a first step to the analysis of 2-d rectangles, or even objects of higher dimensionality. However, there are applications for line segments, also: Orenstein <ref> [14] </ref> suggests the z-transform to map a multidimensional space to a 1-d space. Each rectangle is thus mapped to a set of line segments; the point- and region-queries in the multi-dimensional space directly correspond to point- and region- queries in the 1-d space.
Reference: [15] <author> J. K. Ousterhout, G. T. Hamachi, R. N. Mayo, W. S. Scott, and G. S. Taylor, </author> <title> ``Magic: A VLSI Layout System,'' </title> <booktitle> 21st Design Automation Conference , pp. </booktitle> <month> 152 - 159 , June </month> <year> 1984. </year>
Reference-contexts: Multi-dimensional data arise in many applications, to name the most important: (1) Cartography. Maps could be stored and searched electronically, answering efficiently geometric queries [3] [19]. (2) Computer-Aided Design (CAD). For example, VLSI design systems need to store many thousands of rectangles <ref> [15] </ref> [9], representing electronic gates and higher level elements. (3) Computer vision and robotics. (4) Rule indexing in expert database systems [22]. In this proposal rules are stored as geometric entities in some multi-dimensional space defined over the database.
Reference: [16] <author> F.P. Preparata and M.I. Shamos, </author> <title> Computational Geometry, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: Therefore, the complexity is on the order of NlogN. The partition algorithm is shown in Figure 4.1. The routine Sweep is used to scan the rectangles and identify points where space partitioning is possible. This routine is very similar to the one described in <ref> [16] </ref> and is shown in Figure 4.2.
Reference: [17] <author> J.T. Robinson, </author> <title> ``The k-D-B-Tree: A Search Structure for Large Multidimensional Dynamic Indexes,'' </title> <booktitle> Proc. ACM SIGMOD , pp. </booktitle> <month> 10-18 , </month> <year> 1981. </year>
Reference-contexts: We shall call these methods fixed. The opposite is to let the data points determine the position of the hyperplane, as, e.g., the k-d trees [1] or the K-D-B-trees <ref> [17] </ref> do. We shall call these methods adaptable.
Reference: [18] <author> J.B. Rosenberg, </author> <title> ``Geographical Data Structures Compared: A Study of Data Structures Supporting Region Queries,'' </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 4(1), </volume> <pages> pp. </pages> <month> 53-67 , Jan. </month> <year> 1985. </year>
Reference-contexts: Therefore, one of the previously men-tioned methods for storing points can be chosen. Lauther [12] and Rosenberg <ref> [18] </ref> used k-d trees. Hinrichs and Nievergelt [11] suggested using the grid file, after a rotation of the axes.
Reference: [19] <author> N. Roussopoulos and D. Leifker, </author> <title> ``Direct Spatial Search on Pictorial Databases Using Packed R-Trees,'' </title> <booktitle> Proc. ACM SIGMOD , May 1985. </booktitle>
Reference-contexts: Multi-dimensional data arise in many applications, to name the most important: (1) Cartography. Maps could be stored and searched electronically, answering efficiently geometric queries [3] <ref> [19] </ref>. (2) Computer-Aided Design (CAD). For example, VLSI design systems need to store many thousands of rectangles [15] [9], representing electronic gates and higher level elements. (3) Computer vision and robotics. (4) Rule indexing in expert database systems [22]. <p> However, the underlying structures, data models and query languages are not sufficient for the manipulation of more complex data. The problem of extending current data models and languages has been considered by various people in the past [2], [21] [9] <ref> [19] </ref>. In this paper we focus on the problem of deriving efficient access methods for multi-dimensional objects. <p> However, if R-Trees are built using the dynamic insertion algorithms, the structure may provide excessive space overlap and "dead-space" in the nodes that result in bad performance. A packing technique proposed in <ref> [19] </ref> alleviates this problem for relatively static databases of points. However, for update-intensive spatial databases, packing cannot be applied on every single insertion. In such an environment, the structure to be described in the next section (R + -trees) avoids the performance degradation caused by the overlapping regions. <p> Figure 3.1 shows an example set of data rectangles and Figure 3.2 the corresponding R-tree built on these rectangles (assuming a branching factor of 4). Considering the performance of R-tree searching, the concepts of coverage and overlap <ref> [19] </ref> are important. Coverage of a level of an R-tree is defined as the total area of all the rectangles associated with the nodes A C E H J L N NMLD CBA KJIHGFE of that level. <p> It has been shown, that zero overlap and coverage is only achievable for data points that are known in advance and, that using a packing technique for R-trees, search is dramatically improved <ref> [19] </ref>. In the same paper it is shown that zero overlap is not attainable for region data objects. However, if we allow partitions to split rectangles then zero overlap among intermediate node entries can be achieved. This is the main idea behind the R + -tree structure. <p> For example, for criterion 3, Cost is the total area covered by the rectangles returned by step SW1, while for criterion 4, Cost is the number of the input rectangles that are split by the sweep line. The Pack algorithm is basically the same with that of <ref> [19] </ref> but adapted to accept any of the grouping selection criteria discussed earlier in this section. The fill-factor determines how much packed (populated) the R + -tree will be. The more packed it is, the faster the search.
Reference: [20] <author> H. Samet, </author> <title> ``Quadtrees and Related Hierarchical Data Structures for Computer Graphics and Image Processing,'' </title> <note> 1986. (under preparation) </note>
Reference-contexts: Acknowledgments: The survey section owes much to Hanan Samet. We are happy to acknowledge his help, through the examples of his book <ref> [20, ch. 8] </ref> and through his constructive discussion.
Reference: [21] <author> M. Stonebraker, B. Rubenstein, and A. Guttman, </author> <title> ``Application of Abstract Data Types and Abstract Indices to CAD Data Bases,'' </title> <type> Tech. </type> <institution> Report UCB/ERL M83/3, Electronics Research Laboratory, University of California, Berkeley, </institution> <month> January </month> <year> 1983. </year>
Reference-contexts: However, the underlying structures, data models and query languages are not sufficient for the manipulation of more complex data. The problem of extending current data models and languages has been considered by various people in the past [2], <ref> [21] </ref> [9] [19]. In this paper we focus on the problem of deriving efficient access methods for multi-dimensional objects.
Reference: [22] <author> M. Stonebraker, T. Sellis, and E. Hanson, </author> <title> ``Rule Indexing Implementations in Database Systems,'' </title> <booktitle> Proceedings of the First International Conference on Expert Database Systems , April 1986. </booktitle>
Reference-contexts: For example, VLSI design systems need to store many thousands of rectangles [15] [9], representing electronic gates and higher level elements. (3) Computer vision and robotics. (4) Rule indexing in expert database systems <ref> [22] </ref>. In this proposal rules are stored as geometric entities in some multi-dimensional space defined over the database. Then, the problem of searching for applicable rules is reduced to a geometric intersection problem.
References-found: 22

