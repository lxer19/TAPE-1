URL: http://www.daimi.aau.dk/~hbc/papers/gsm.ps.gz
Refering-URL: http://www.daimi.aau.dk/~hbc/Ragnarok.html
Root-URL: http://www.daimi.aau.dk
Email: hbc@daimi.aau.dk  
Phone: +45 89 42 31 88  
Title: A Software Development Environment based on a Geographic Space Metaphor  
Author: Henrik Baerbak Christensen 
Address: Ny Munkegade, Bldg. 540, DK-8000 Arhus C, Denmark  
Affiliation: Department of Computer Science University of Aarhus  
Abstract: This paper describes a software development environment where the user interface is based on a geographic space metaphor. It argues that a geographic space metaphor enhances navigational abilities, provides a common reference frame for development teams, helps maintaining overview and improves understanding of large software structures, and provides a strong framework for visualising properties of the software. 
Abstract-found: 1
Intro-found: 1
Reference: [ABB + 93] <author> Peter Andersen, Lars Bak, Soren Brandt, Jorgen L. Knudsen, Ole L. Mad-sen, Kim J. Moller, Claus Norgaard, and Elmer Sandvad. </author> <title> The Mjolner BETA System. </title> <booktitle> In Object-Oriented Environments The Mjolner Approach, </booktitle> <pages> pages 24-35. </pages> <publisher> Prentice-Hall, </publisher> <pages> 93. </pages>
Reference-contexts: Examples are visualising compiler errors and warnings, profiling information, test coverage, etc. 7 Preliminary Experiences The Ragnarok graphical user interface is currently used in the continued development of the Ragnarok prototype, as well as on selected parts of the Mjolner BETA System <ref> [ABB + 93] </ref>. Preliminary results are encouraging. Some observations follow below: Typically people create visual landmarks with sizes that allows about three to four levels of the design structure to be visible on the world map (if more levels are viewed the landmarks on the lowest level get too small).
Reference: [BGZ95] <author> Ute Burkle, Guido Gryczan, and Heinz Zullighoven. </author> <title> Object-Oriented System Development in a Banking Project: Methodology, </title> <journal> Experience, and Conclusions. Human-Computer Interaction, </journal> <volume> 10 </volume> <pages> 293-336, </pages> <year> 1995. </year>
Reference-contexts: Still the "blueprint" or "road map" of the overall software structure often only exists in the minds of a few designers making it difficult to discuss within the team, and to explain to newcomers on the project <ref> [BGZ95] </ref>. This paper proposes to make software tangible. To accomplish this software entities are given a physical position, size, and appearance in a project landscape. This spatial metaphor provides affordance [Gib86]: It effectively affords us the ability to develop a manifest road map of a software structure.
Reference: [Boo91] <author> Grady Booch. </author> <title> Object Oriented Design. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1991. </year>
Reference-contexts: This hierarchical structure is often denoted for instance the software architecture [Lam96] or software design structure [Som92]. In modern object-oriented programming (see e.g. <ref> [Mey88, MMPN93, Boo91] </ref>) the basic unit of this hierarchical structure is often the class. A group of closely related classes programmed to work together are grouped in units often denoted class categories [Rat97, Boo91], modules, or libraries. <p> In modern object-oriented programming (see e.g. [Mey88, MMPN93, Boo91]) the basic unit of this hierarchical structure is often the class. A group of closely related classes programmed to work together are grouped in units often denoted class categories <ref> [Rat97, Boo91] </ref>, modules, or libraries. These may be grouped into subsystems that again cooperate to establish the full system.
Reference: [BR95] <author> Grady Booch and James Rumbaugh. </author> <title> Unified Method for Object-Oriented Development. Documentation Set Version 0.8, Rational Software Corporation, </title> <address> Santa Clara/CA, </address> <year> 1995. </year>
Reference-contexts: Remarks, indentation style, and naming conventions are classic examples of secondary notation in conventional programming languages. In Ragnarok there is special provision for symbols from the Unified Modeling Language (UML) notation [Rat97] and its predecessors <ref> [RBP + 91, BR95] </ref>. These notations are graphical languages for documenting object-oriented software design and programs.
Reference: [Chr96] <author> Henrik Baerbak Christensen. Ragnarok: </author> <title> Contours of a Software Project Development Environment. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Arhus, </institution> <year> 1996. </year> <note> DAIMI PB-509. Also available at URL: http://www.daimi.aau.dk/hbc/Ragnarok.html. </note>
Reference-contexts: The actual software model in Ragnarok is more elaborate as it is used also as the foundation for software configuration management. A more detailed discussion can be found in <ref> [Chr96, Chr97] </ref>. 3 Geographic Space Metaphor One distinguishes between desktop- (small scale) and geographic (large scale) spaces in spatial metaphors [KB96].
Reference: [Chr97] <author> Henrik Baerbak Christensen. </author> <title> Context-Preserving Software Configuration Management. </title> <booktitle> SCM-7 Workshop special printing, </booktitle> <address> Boston, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: The actual software model in Ragnarok is more elaborate as it is used also as the foundation for software configuration management. A more detailed discussion can be found in <ref> [Chr96, Chr97] </ref>. 3 Geographic Space Metaphor One distinguishes between desktop- (small scale) and geographic (large scale) spaces in spatial metaphors [KB96].
Reference: [Die95] <author> Andreas Dieberger. </author> <title> Providing Spatial Navigation for the World Wide Web. </title> <note> In Frank and Kuhn [FK95]. </note>
Reference-contexts: Dieberger and Tromp describes a city metaphor for navigation in information spaces like hypertext [DT93]: Hypertext documents are visualised as houses; link enactment as a subway system. A textual, adventure game like, approach for spatialisation of the World Wide Web is described in <ref> [Die95] </ref>. A more abstract approach is spatial hypertext [MI96, MIC94]: Instead of the traditional node-link model, visual symbols, which are references to content-holding entities, are arranged spatially.
Reference: [DT93] <author> Andreas Dieberger and Jolanda G. Tromp. </author> <title> The Information City project a virtual reality user interface for navigation in information spaces. </title> <institution> Georgia Institute of Technology, </institution> <note> http://www.lcc.gatech.edu/faculty/dieberger/VRV.html, 1993. </note>
Reference-contexts: Dieberger and Tromp describes a city metaphor for navigation in information spaces like hypertext <ref> [DT93] </ref>: Hypertext documents are visualised as houses; link enactment as a subway system. A textual, adventure game like, approach for spatialisation of the World Wide Web is described in [Die95].
Reference: [EM95] <author> Max J Egenhofer and David M. Mark. </author> <title> Naive Geography. </title> <booktitle> In Frank and Kuhn [FK95], </booktitle> <pages> pages 1-15. </pages>
Reference-contexts: The distinction comes from everyday experience: Objects in a desktop space have sizes comparable to the human body and can readily be moved, turned, and overviewed, whereas objects in geographic space are beyond the human body and not thought of as manipulable <ref> [EM95] </ref>, like for instance buildings, trees, streets, etc., in a city which have fixed positions and you have to move around to gain full knowledge. A well known example of using the desktop space metaphor in user interface design is the Macintosh Finder.
Reference: [FK95] <author> Andrew U. Frank and Werner Kuhn, </author> <title> editors. Spatial Information Theory / A Theoretical Basis for GIS. </title> <booktitle> COSIT '95, Lecture Notes in Computer Science 988, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [Fre87] <author> Frederick P. Brooks, Jr. </author> <title> No Silver Bullet|Essence and Accidents of Software Engineering. </title> <journal> IEEE Computer, </journal> <volume> 20 </volume> <pages> 10-19, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: In his famous article "No Silver Bullet|Essence and Accidents of Software Engineering", Brooks states invisibility as an inherent property of software <ref> [Fre87] </ref>. Much effort is devoted to design software that has clear interfaces, reusable libraries, and sound logical structure.
Reference: [Gib86] <author> James J. Gibson. </author> <title> The Ecological Approach to Visual Perception. </title> <publisher> Lawrence Erlbaum, </publisher> <year> 1986. </year>
Reference-contexts: This paper proposes to make software tangible. To accomplish this software entities are given a physical position, size, and appearance in a project landscape. This spatial metaphor provides affordance <ref> [Gib86] </ref>: It effectively affords us the ability to develop a manifest road map of a software structure. Being manifest it is more easily discussed, overviewed, explained to newcomers, and invites for exploration.
Reference: [GP96] <author> T. R. G. Green and M. Petre. </author> <title> Usability Analysis of Visual Programming Environments: A "Cognitive Dimensions" Framework. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 7 </volume> <pages> 131-174, </pages> <year> 1996. </year>
Reference-contexts: This additional graphics allow secondary notation. Support for secondary notation is one of the dimensions of the framework for usability analysis of visual environments defined by Green and Petre <ref> [GP96] </ref>. Whereas primary notation has a formal syntax aimed at machine execution or analysis, secondary notation is extra information with no rigid syntax provided for human convenience. Remarks, indentation style, and naming conventions are classic examples of secondary notation in conventional programming languages. <p> However our initial experiments indicate that the distribution of landmarks combined with secondary notation provides enough visual clues for orientation, at least in small to medium sized systems. In Ragnarok maps have been chosen to view the underlying space. This has the benefit that it affords juxtaposability <ref> [GP96] </ref> i.e. it permits the user to view two (geographical) distant areas side-by-side by opening two maps.
Reference: [Har88] <author> David Harel. </author> <title> On Visual Formalisms. </title> <journal> Communications of the ACM, </journal> <volume> 31, </volume> <month> May </month> <year> 1988. </year>
Reference-contexts: A map is a well known visual formalism <ref> [Har88, NZ93] </ref> that enjoys a number of important, commonly understood, properties: Respects spatial relations. The basic purpose of a map is to show spatial relations between objects. Scale determines level of details.
Reference: [HHN86] <author> Edwin L. Hutchins, James D. Hollan, and Donald A. Norman. </author> <title> Direct manipulation interfaces. </title> <editor> In Donald A. Norman and Stephen W. Draper, editors, </editor> <title> User Centered System Design, chapter 5. </title> <publisher> Lawrence Erlbaum, </publisher> <year> 1986. </year> <month> 14 </month>
Reference-contexts: The natural extension to this idea, is to allow landmarks to be directly manipulated <ref> [Shn83, HHN86, SMU95] </ref> as it supports the feeling of concrete, tangible, objects. In Ragnarok landmarks and maps can be directly manipulated: Using the mouse they can be created, moved and resized.
Reference: [KB96] <author> Werner Kuhn and Brad Blumenthal. Spatialization: </author> <title> Spatial Metaphors for User Interfaces. </title> <institution> Geoinfo-Series, Department of Geoinformation, Technical University, Vienna, </institution> <year> 1996. </year> <note> Reprinted tutorial notes from CHI'96. </note>
Reference-contexts: The actual software model in Ragnarok is more elaborate as it is used also as the foundation for software configuration management. A more detailed discussion can be found in [Chr96, Chr97]. 3 Geographic Space Metaphor One distinguishes between desktop- (small scale) and geographic (large scale) spaces in spatial metaphors <ref> [KB96] </ref>. <p> Humans are apt at navigating in a well known physical environment: As Kuhn and Blumenthal notes: "Perception, manipulation, and motion in space are largely subconscious activities that impose little cognitive load while offering powerful functionality" <ref> [KB96] </ref>. This paper claims that by using a geographic space metaphor for the software design structure, humans fine sense of locality can be utilised. <p> In the psychological theory of human navigation we learn that humans build up a cognitive map in the mind, which is the analogue to the physical layout of the environment. Spatial knowledge is generally believed to consist of three levels of landmark, route, and survey knowledge (See e.g. <ref> [MDR91, KB96] </ref>). As route- and survey knowledge are primarily mental processes the focus is here on landmark knowledge. According to this model we first represent knowledge in terms of highly salient visual landmarks in the environment such as remarkable buildings, statues, towers, etc.
Reference: [Lam96] <author> David Alex Lamb. </author> <title> Introduction: Studies of Software Design. </title> <editor> In David Alex Lamb, editor, </editor> <booktitle> Studies of Software Design, Lecture Notes in Computer Science 1078. ICSE'93 Workshop, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: This hierarchical structure is often denoted for instance the software architecture <ref> [Lam96] </ref> or software design structure [Som92]. In modern object-oriented programming (see e.g. [Mey88, MMPN93, Boo91]) the basic unit of this hierarchical structure is often the class. A group of closely related classes programmed to work together are grouped in units often denoted class categories [Rat97, Boo91], modules, or libraries.
Reference: [MDR91] <author> Cliff McKnight, Andrew Dillon, and John Richardson. </author> <title> Hypertext in Context, chapter 4, Navigation through complex information spaces. </title> <publisher> Cam-bridge University Press, </publisher> <year> 1991. </year>
Reference-contexts: In the psychological theory of human navigation we learn that humans build up a cognitive map in the mind, which is the analogue to the physical layout of the environment. Spatial knowledge is generally believed to consist of three levels of landmark, route, and survey knowledge (See e.g. <ref> [MDR91, KB96] </ref>). As route- and survey knowledge are primarily mental processes the focus is here on landmark knowledge. According to this model we first represent knowledge in terms of highly salient visual landmarks in the environment such as remarkable buildings, statues, towers, etc. <p> In a hypertext context the sensation of "getting-lost-in-hyperspace" has widely been reported: After having followed a few hyperlinks in a hypertext document, people do not know where they are, how they got there, and how the displayed material relates to the rest of the text <ref> [MDR91] </ref>. Dieberger and Tromp describes a city metaphor for navigation in information spaces like hypertext [DT93]: Hypertext documents are visualised as houses; link enactment as a subway system. A textual, adventure game like, approach for spatialisation of the World Wide Web is described in [Die95].
Reference: [Mey88] <author> Bertrand Meyer. </author> <title> Object-oriented Sofware Construction. </title> <publisher> Prentice Hall International Series in Computer Science, </publisher> <year> 1988. </year>
Reference-contexts: This hierarchical structure is often denoted for instance the software architecture [Lam96] or software design structure [Som92]. In modern object-oriented programming (see e.g. <ref> [Mey88, MMPN93, Boo91] </ref>) the basic unit of this hierarchical structure is often the class. A group of closely related classes programmed to work together are grouped in units often denoted class categories [Rat97, Boo91], modules, or libraries.
Reference: [MI96] <author> Catherine C. Marshall and Frank M. Shipmann III. </author> <title> Spatial Hypertext: Designing for Change. </title> <journal> Communications of the ACM, </journal> <volume> 38(8) </volume> <pages> 88-97, </pages> <year> 1996. </year>
Reference-contexts: A textual, adventure game like, approach for spatialisation of the World Wide Web is described in [Die95]. A more abstract approach is spatial hypertext <ref> [MI96, MIC94] </ref>: Instead of the traditional node-link model, visual symbols, which are references to content-holding entities, are arranged spatially.
Reference: [MIC94] <author> Catherine C. Marshall, Frank M. Shipmann III, and James H. Coombs. VIKI: </author> <title> Spatial Hypertext Supporting Emergent Structure. In D Lucarella, </title> <editor> J. Nanard, M. Nanard, and P Paolini, editors, </editor> <booktitle> ECHT '94 Proceedings. ACM, </booktitle> <year> 1994. </year>
Reference-contexts: A textual, adventure game like, approach for spatialisation of the World Wide Web is described in [Die95]. A more abstract approach is spatial hypertext <ref> [MI96, MIC94] </ref>: Instead of the traditional node-link model, visual symbols, which are references to content-holding entities, are arranged spatially.
Reference: [MMPN93] <author> Ole Lehrmann Madsen, Birger Moller-Pedersen, and Kristen Nygaard. </author> <title> Object-Oriented Programming in the BETA Programming Language. </title> <publisher> Ad-dison Wesley, </publisher> <year> 1993. </year>
Reference-contexts: This hierarchical structure is often denoted for instance the software architecture [Lam96] or software design structure [Som92]. In modern object-oriented programming (see e.g. <ref> [Mey88, MMPN93, Boo91] </ref>) the basic unit of this hierarchical structure is often the class. A group of closely related classes programmed to work together are grouped in units often denoted class categories [Rat97, Boo91], modules, or libraries.
Reference: [NZ93] <author> Bonnie A. Nardi and Craig L. Zarmer. </author> <title> Beyond Models and Metaphors: Visual Formalisms in User Interface Design. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 4(1), </volume> <month> March </month> <year> 1993. </year>
Reference-contexts: A map is a well known visual formalism <ref> [Har88, NZ93] </ref> that enjoys a number of important, commonly understood, properties: Respects spatial relations. The basic purpose of a map is to show spatial relations between objects. Scale determines level of details.
Reference: [Ous94] <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley Professional Computing Series, </publisher> <year> 1994. </year>
Reference-contexts: Implementing Code The developer has been asked to add new features to a function "DepthFirstInSubTree". To locate this function he decides to use Ragnarok's scripting facility. Scripts, written in the TCL script language <ref> [Ous94] </ref>, can be called from Ragnarok and the output interpreted visually and spatially. A Ragnarok standard script implements grep, a well-known programming tool that searches for a search string in files.
Reference: [Rat97] <institution> Unified Modeling Language, </institution> <note> version 1.0. </note> <institution> Rational Software Corporation, Santa Clara/CA, </institution> <month> January </month> <year> 1997. </year> <month> URL:http://www.rational.com. </month>
Reference-contexts: In modern object-oriented programming (see e.g. [Mey88, MMPN93, Boo91]) the basic unit of this hierarchical structure is often the class. A group of closely related classes programmed to work together are grouped in units often denoted class categories <ref> [Rat97, Boo91] </ref>, modules, or libraries. These may be grouped into subsystems that again cooperate to establish the full system. <p> Remarks, indentation style, and naming conventions are classic examples of secondary notation in conventional programming languages. In Ragnarok there is special provision for symbols from the Unified Modeling Language (UML) notation <ref> [Rat97] </ref> and its predecessors [RBP + 91, BR95]. These notations are graphical languages for documenting object-oriented software design and programs.
Reference: [RBP + 91] <author> James Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, and W. Lorensen. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall International Editions, </publisher> <year> 1991. </year>
Reference-contexts: Remarks, indentation style, and naming conventions are classic examples of secondary notation in conventional programming languages. In Ragnarok there is special provision for symbols from the Unified Modeling Language (UML) notation [Rat97] and its predecessors <ref> [RBP + 91, BR95] </ref>. These notations are graphical languages for documenting object-oriented software design and programs.
Reference: [Shn83] <author> Ben Shneiderman. </author> <title> Direct Manipulation: A Step Beyond Programming Languages. </title> <booktitle> IEEE Computer, </booktitle> <month> August </month> <year> 1983. </year>
Reference-contexts: The natural extension to this idea, is to allow landmarks to be directly manipulated <ref> [Shn83, HHN86, SMU95] </ref> as it supports the feeling of concrete, tangible, objects. In Ragnarok landmarks and maps can be directly manipulated: Using the mouse they can be created, moved and resized.
Reference: [SMU95] <author> Randall B. Smith, John Maloney, and David Ungar. </author> <title> The Self-4.0 User Interface: Manifesting a System-wide Vision of Concreteness, Uniformity, and Flexibility. In OOPSLA'95. </title> <journal> ACM SIGPLAN Notices Vol. </journal> <volume> 30 No. 10, </volume> <year> 1995. </year>
Reference-contexts: The natural extension to this idea, is to allow landmarks to be directly manipulated <ref> [Shn83, HHN86, SMU95] </ref> as it supports the feeling of concrete, tangible, objects. In Ragnarok landmarks and maps can be directly manipulated: Using the mouse they can be created, moved and resized.
Reference: [Som92] <author> Ian Sommerville. </author> <title> Software Engineering. </title> <publisher> Addison-Wesley Publishers Ltd., </publisher> <address> 4 edition, </address> <year> 1992. </year> <title> This article was processed using the L A T E X macro package with LLNCS style 15 </title>
Reference-contexts: This hierarchical structure is often denoted for instance the software architecture [Lam96] or software design structure <ref> [Som92] </ref>. In modern object-oriented programming (see e.g. [Mey88, MMPN93, Boo91]) the basic unit of this hierarchical structure is often the class. A group of closely related classes programmed to work together are grouped in units often denoted class categories [Rat97, Boo91], modules, or libraries.
References-found: 29

