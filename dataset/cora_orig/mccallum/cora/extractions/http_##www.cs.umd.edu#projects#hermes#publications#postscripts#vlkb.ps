URL: http://www.cs.umd.edu/projects/hermes/publications/postscripts/vlkb.ps
Refering-URL: http://www.cs.umd.edu/projects/hermes/publications/abstracts/intelligent_caching.html
Root-URL: 
Email: vsg@cs.umd.edu  
Title: Intelligent Caching in Heterogeneous Reasoning and Mediator Systems  
Author: Sibel Adal and V.S. Subrahmanian 
Address: fsibel;  
Affiliation: Department of Computer Science Institute for Advanced Computer Studies Institute for Systems Research University of Maryland  
Abstract: Heterogeneous Reasoning and Mediator Systems (HERMES), first proposed by Lu, Nerode and Subrahmanian, may be used to access and logically integrate information from external databases and/or software packages using functions already defined in those domains. When processing queries in HERMES, we need to execute these external programs, and this is often an expensive process, especially when these programs are located at remote sites on, say a network. Consequently, the problem of minimizing access to such external routines without compromising completeness is an important one. In this paper, we will present methods to cache the results of previous computations and use the knowledge about external programs to make intelligent use of the cached information to reduce calls to external programs.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Adal and R. Emery. </author> <title> (1994) A Uniform Framework For Integrating Knowledge In Heterogeneous Knowledge Systems, </title> <booktitle> To appear in Proc. of the Eleventh International Conference on Data Engineering. </booktitle> <address> (http://www.cs.umd.edu/projects/hermes/ publications/postscripts/cons.ps) </address>
Reference-contexts: The lattice used in this paper is that of uncertainty and time points which is defined as the set of all functions f : R + ! <ref> [0; 1] </ref>. In other words, an atom of the form: temperature (obj,high):[0.7,f1,3g] can be read as: the temperature of obj is high with certainty of at least 0.7 at both time points 1 and 3. <p> The ordering on this lattice is given as follows: f 1 f 2 iff for all r 2 R + , f 1 (r) f 2 (r) where is the usual less-than-or-equal-to ordering on the reals. Adal and Emery <ref> [1] </ref> have shown that constraints can be viewed as proving that the output of an external program has certain characteristics when different parameters are input. <p> Suppose we ask the query: spray coolant (X; Y) : <ref> [1; f1g] </ref>: Part of the processing of this query is shown in figure 2 using resolution as the inference rule. The resolution rule used in this example is given in [8].
Reference: [2] <author> S. Adal and V.S. Subrahmanian. </author> <title> (1994) Amalgamating Knowledge Bases, II: </title> <journal> Distributed Mediators, </journal> <note> accepted for publication in: Intl. Journal of Intelligent Cooperative Information Systems. (ftp://ftp.cs.umd.edu/pub/papers/TRs/3124.ps.Z) </note>
Reference-contexts: Backtracking is another reason for such a situation. Calling an external program is usually a costly operation because of the memory, CPU requirements and possible network delays <ref> [2] </ref>. Furthermore, actual packages may levy charges for accessing them. Suppose there is a way to guess "some" of the answers that will be returned by an external call.
Reference: [3] <author> S. Adal and V.S. Subrahmanian. </author> <title> (1994) Amalgamating Knowledge Bases, III: Algorithms, data structures and query processing. </title> <type> Technical Report CS-TR-3124, </type> <institution> Computer Science Department, University of Maryland, </institution> <month> Aug </month> <year> 1993. </year> <note> Submitted for publication. (http://www.cs.umd.edu/projects/hermes/ publications/postscripts/akbiii.ps) </note>
Reference-contexts: Q i is obtained from Q j by solving an annotated atom A using an appropriate resolution rule. (Many such resolution rules have been defined in the literature, e.g. Kifer and Subrahmanian [6], Adal and Subrahmanian <ref> [3] </ref> and Lu, Murray and Rosenthal [7]. Which of these is used does not matter, as long as the one picked is sound and complete.) 2. Q i is obtained from Q j by solving an in (Ans, d:f (Args)) predicate, hence invoking the function d:f.
Reference: [4] <author> J. Benton and V.S. Subrahmanian. </author> <title> (1993) Using Hybrid Knowledge Bases for Missile Siting Problems, </title> <booktitle> Proc. 1994 Conf. on Artificial Intelligence Applications, </booktitle> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: It has been used to develop mediators for robotic applications at the National Institute of Standards and Technology [5], for federal law enforcement applications [9], and for missile siting problems <ref> [4] </ref>. All these applications involve processing several Gigabytes of widely varying forms of data, using widely varying data representation and reasoning techniques. The primary aim of this paper is to investigate ways to make the processing of queries in heterogeneous reasoning systems more efficient. <p> Our methods are sound and complete, and apply to real-life implemented examples <ref> [4, 5, 9] </ref>. 2 An overview of HERMES In our framework, a mediator is a ruled based program written in a special syntax and it operates on information coming from different sources of data.
Reference: [5] <author> J. Horst, E. Kent, H. </author> <title> Rifky and V.S. Subrahma-nian. (1994) Hybrid Knowledge Bases for Real-Time Robotic Reasoning, </title> <booktitle> Proc. IVth Intl. Workshop on Pattern Recognition in Practice (eds. </booktitle> <editor> E. Gelsema and L. Kanal), N. </editor> <publisher> Holland/Elsevier. </publisher>
Reference-contexts: It has been used to develop mediators for robotic applications at the National Institute of Standards and Technology <ref> [5] </ref>, for federal law enforcement applications [9], and for missile siting problems [4]. All these applications involve processing several Gigabytes of widely varying forms of data, using widely varying data representation and reasoning techniques. <p> Our methods are sound and complete, and apply to real-life implemented examples <ref> [4, 5, 9] </ref>. 2 An overview of HERMES In our framework, a mediator is a ruled based program written in a special syntax and it operates on information coming from different sources of data.
Reference: [6] <author> M. Kifer and V.S. Subrahmanian. </author> <title> (1989) Theory of Generalized Annotated Logic Programming and its Applications, </title> <journal> Journal of Logic Programming, </journal> <volume> 12, 4, </volume> <pages> pps 335-368, </pages> <year> 1992. </year> <title> Preliminary version in: </title> <booktitle> Proc. 1989 North American Conf. on Logic Programming, </booktitle> <publisher> MIT Press. </publisher> <address> (http://www.cs.umd.edu/projects/hermes/ publications/postscripts/galp.ps) </address>
Reference-contexts: We will refer to these domains as external programs. HERMES syntax is an extension of generalized annotated programs (GAPs) introduced by Kifer and Subrahmanian <ref> [6] </ref>. Annotated logic is an extension of logic programming where atoms are marked explicitly with values which may be viewed as confidence factors, degrees of belief, or truth values. We will refer to these values as simply truth values. <p> Q i is obtained from Q j by solving an annotated atom A using an appropriate resolution rule. (Many such resolution rules have been defined in the literature, e.g. Kifer and Subrahmanian <ref> [6] </ref>, Adal and Subrahmanian [3] and Lu, Murray and Rosenthal [7]. Which of these is used does not matter, as long as the one picked is sound and complete.) 2. Q i is obtained from Q j by solving an in (Ans, d:f (Args)) predicate, hence invoking the function d:f. <p> Then, there is a refutation of Q from M d . Intuitively, a mediator M is said to possess the fix-point reachability property (cf. Kifer and Subrahma-nian <ref> [6] </ref>) iff whenever there is a infinite refutation for a query Q in M (i.e. involving an infinite sequence of queries produced by the mediatory query processor), then it is possible to find a finite refutation for Q in M .
Reference: [7] <author> J. Lu, N. Murray and E. Rosenthal. </author> <title> (1993) Signed Formulas and Annotated Logics, draft manuscript. Preliminary version in: </title> <booktitle> Proceedings of the International Symposium on Multiple-Valued Logic, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1993, </year> <pages> 48-53. </pages>
Reference-contexts: Q i is obtained from Q j by solving an annotated atom A using an appropriate resolution rule. (Many such resolution rules have been defined in the literature, e.g. Kifer and Subrahmanian [6], Adal and Subrahmanian [3] and Lu, Murray and Rosenthal <ref> [7] </ref>. Which of these is used does not matter, as long as the one picked is sound and complete.) 2. Q i is obtained from Q j by solving an in (Ans, d:f (Args)) predicate, hence invoking the function d:f.
Reference: [8] <author> J. Lu, A. Nerode and V.S. Subrahmanian. </author> <title> (1993) Hybrid Knowledge Bases, Accepted for publication in: </title> <journal> IEEE Trans. on Knowledge and Data Engineering. </journal> <note> (http://www.cs.umd.edu/projects/hermes/ publications/postscripts/hkb.ps) </note>
Reference-contexts: Extending mediators coded using C-like languages requires understanding the program, and isolating and modifying parts of the program that express how to semantically integrate information, which is a very hard task. In order to address these concerns, Lu, Nerode and Subrahmanian <ref> [8] </ref> have developed a formal theoretical framework called Hybrid Knowledge Bases that provides a rule-based framework for expressing mediators. Subsequently, Subrahmanian et. al. [10] have developed a system called HERMES (HEterogeneous Reasoning and MEdiator System) that can be used for developing mediators in. <p> These sources of data can be as different as relational, deductive, object oriented, text, spatial and temporal databases, problem solving domains such as spread sheets, data stored in different data structures as well as application programs written on top of such programs. Lu, Nerode and Subrahmanian proved that <ref> [8] </ref> these programs can be viewed as constraint domains and executing these programs can be viewed as solving a constraint in a given domain. We will refer to these domains as external programs. HERMES syntax is an extension of generalized annotated programs (GAPs) introduced by Kifer and Subrahmanian [6]. <p> Suppose we ask the query: spray coolant (X; Y) : [1; f1g]: Part of the processing of this query is shown in figure 2 using resolution as the inference rule. The resolution rule used in this example is given in <ref> [8] </ref>. Note that the queue for the outputs of functions relational : select = and deductive:query are not shown in the figure since they contain only one item. <p> The fixpoint reachability property is critical for completeness because otherwise, we need to take recourse to infinitary proofs. In <ref> [8] </ref>, Lu, Nerode and Subrah-manian have proved that the above strategy is sound and complete, as long as the resolution rule used in step 1 of the above definition is sound and complete for annotated logic.
Reference: [9] <author> V.S. Subrahmanian. </author> <title> (1994) Hybrid Knowledge Bases for Integrating Symbolic, Numeric and Image Data, </title> <booktitle> Proc. 1994 SPIE Conf. on Applied Imagery and Pattern Recognition. </booktitle>
Reference-contexts: It has been used to develop mediators for robotic applications at the National Institute of Standards and Technology [5], for federal law enforcement applications <ref> [9] </ref>, and for missile siting problems [4]. All these applications involve processing several Gigabytes of widely varying forms of data, using widely varying data representation and reasoning techniques. The primary aim of this paper is to investigate ways to make the processing of queries in heterogeneous reasoning systems more efficient. <p> Our methods are sound and complete, and apply to real-life implemented examples <ref> [4, 5, 9] </ref>. 2 An overview of HERMES In our framework, a mediator is a ruled based program written in a special syntax and it operates on information coming from different sources of data.
Reference: [10] <author> V.S. Subrahmanian, S. Adal, A. Brink, R. Emery, J. Lu, A. Rajput, T.J. Rogers, R. Ross. </author> <title> (1994) HERMES: A Heterogeneous Reasoning and Mediator System, </title> <note> submitted for publication. (http://www.cs.umd.edu/projects/hermes/ overview/paper) </note>
Reference-contexts: In order to address these concerns, Lu, Nerode and Subrahmanian [8] have developed a formal theoretical framework called Hybrid Knowledge Bases that provides a rule-based framework for expressing mediators. Subsequently, Subrahmanian et. al. <ref> [10] </ref> have developed a system called HERMES (HEterogeneous Reasoning and MEdiator System) that can be used for developing mediators in. HERMES currently runs on both the Sparc/Unix/X platform as well as the PC/Windows platform.
Reference: [11] <author> G. Wiederhold. </author> <booktitle> (1992) Mediators in the Architecture of Future Information Systems, IEEE Computer, </booktitle> <month> March </month> <year> 1992, </year> <month> pps 38-49. </month>
Reference-contexts: To handle this increasing volume of data, Wiederhold <ref> [11] </ref> proposed the important concept of a mediator, which can be regarded as a program for performing semantic integration over multiple data sources. Intuitively, a mediator is a program that accesses and manipulates multiple databases and/or software packages.
Reference: [12] <author> G. Wiederhold. </author> <title> (1993) Intelligent Integration of Information, </title> <booktitle> Proc. 1993 ACM SIGMOD Conf. on Management of Data, </booktitle> <address> pps 434-437. </address> <month> 12 </month>
References-found: 12

