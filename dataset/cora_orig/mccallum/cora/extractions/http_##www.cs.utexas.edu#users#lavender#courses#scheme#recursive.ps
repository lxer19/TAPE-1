URL: http://www.cs.utexas.edu/users/lavender/courses/scheme/recursive.ps
Refering-URL: http://www.cs.utexas.edu/users/lavender/courses/scheme/index.html
Root-URL: http://www.cs.utexas.edu
Title: Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I  
Author: John McCarthy, 
Date: April 1960  
Address: Cambridge, Mass.  
Affiliation: Massachusetts Institute of Technology,  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> J. McCARTHY, </author> <title> Programs with common sense, </title> <booktitle> Paper presented at the Symposium on the Mechanization of Thought Processes, </booktitle> <institution> National Physical Laboratory, Teddington, </institution> <address> England, </address> <month> Nov. </month> <pages> 24-27, </pages> <year> 1958. </year> <note> (Published in Proceedings of the Symposium by H. </note> <editor> M. </editor> <publisher> Stationery Office). </publisher>
Reference-contexts: The system was designed to facilitate experiments with a proposed system called the Advice Taker, whereby a machine could be instructed to handle declarative as well as imperative sentences and could exhibit "common sense" in carrying out its instructions. The original proposal <ref> [1] </ref> for the Advice Taker was made in November 1958. The main requirement was a programming system for manipulating expressions representing formalized declarative and imperative sentences so that the Advice Taker system could make deductions.
Reference: 2. <editor> A. NEWELL AND J. C. SHAW, </editor> <booktitle> Programming the logic theory machine, Proc. Western Joint Computer Conference, </booktitle> <month> Feb. </month> <year> 1957. </year>
Reference-contexts: Then we describe the representation of S-expressions in the memory of the IBM 704 by list structures similar to those used by Newell, Shaw and Simon <ref> [2] </ref>, and the representation of S-functions by program. Then we mention the main features of the LISP programming system for the IBM 704. Next comes another way of describing computations with symbolic expressions, and finally we give a recursive function interpretation of flow charts.
Reference: 3. <author> A. </author> <title> CHURCH, </title> <publisher> The Calculi of Lambda-Conversion (Princeton University Press, Princeton, </publisher> <editor> N. J., </editor> <year> 1941). </year>
Reference-contexts: Because we shall later compute with expressions for functions, we need a distinction between functions and forms and a notation for expressing this distinction. This distinction and a notation for describing it, from which we deviate trivially, is given by Church <ref> [3] </ref>. Let f be an expression that stands for a function of two integer variables. It should make sense to write f (3; 4) and the value of this expression should be determined.
Reference: 4. <institution> FORTRAN Programmer's Reference Manual, IBM Corporation, </institution> <address> New York, Oct. 15, </address> <year> 1956. </year>
Reference: 5. <author> A. J. PERLIS AND K. SAMELS0N, </author> <title> International algebraic language, Preliminary Report, </title> <journal> Comm. Assoc. Comp. Mach., </journal> <month> Dec. </month> <year> 1958. </year> <month> 34 </month>
References-found: 5

