URL: http://www.cs.washington.edu/research/mobicomp/postscript/grovemef.ps
Refering-URL: http://www.cs.washington.edu/research/mobicomp/grovemef.html
Root-URL: 
Email: -mef,grove-@cs.washington.edu  
Title: A Programming Methodology for Disconnected Operation  
Author: Marc E. Fiuczynski David Grove 
Address: FR-35 Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington,  
Date: March 8, 1994 1:23 pm  
Abstract: State-of-the-art mobile computing devices offer substantial storage capacity and computing power. The recent emergence of sophisticated wireless communication technology will transform these mobile computing devices into mobile communicators, creating a new genre of powerful hand-held computing devices that can take advantage of distributed systems technology and applications. However, either to conserve battery power, or to reduce cost these new communication devices will inherently need to disconnect from the network. If the disconnection occurs during the execution of a distributed computation, then the computation may need to suspend until reconnecting to the network This paper presents a programming methodology that enables the programmer to write applications capable of adapting to disconnected operation. Our approach is based on experience building a disconnected NFS filesystem (D-NFS) for portable computers.
Abstract-found: 1
Intro-found: 1
Reference: [Adams et al. 93] <author> Norman Adams, Rich Gold, Bill Schilit, Michael Tso, and Roy Want. </author> <booktitle> The ParcTab mobile computing system. In Proceedings of the Fourth Workshop on Workstation Operating Systems. IEEE, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: In the resulting model, client/agent/ server (CAS), the agent acts as a pseudo-server to the client and a pseudo-client to the server. We concede that the notion of an agent has been introduced in several other mobile computing systems. In <ref> [Adams et al. 93] </ref>,[Watson & Bershad 93] an agent is used to mask mobility, and in CODA [Kistler 93] it is used to support disconnected operation. Our agent is similar to CODAs, but we describe in general how the agent can be used for other mobile applications.
Reference: [Alonso et al. 90] <author> R. Alonso, D. Barbar, and L. L. Cova. </author> <title> Using stashing to increase node autonomy in distributed file systems. </title> <booktitle> In Proceedings of the 9th Symposium on Reliable Distributed Systems. IEEE, </booktitle> <month> October </month> <year> 1990. </year>
Reference-contexts: These abstractions make it is easier for him to reason about the applications overall behavior. For a class project in an advanced graduate course in distributed and parallel system, we wanted to learn more about disconnected operation and its impact on distributed systems. Inuenced by the FACE <ref> [Alonso et al. 90] </ref> and CODA [Kistler 93][Satyanarayanan et al. 93] file systems, we chose to implement our own distributed file system to experiment with disconnected operation. We decided to build a variant of Suns Network File System (NFS) capable of handling disconnected operation. <p> The basic idea of D-NFS is to keep a stash <ref> [Alonso et al. 90] </ref> of files controlled by the agent that is used when disconnected. An example of a situation where D-NFS would be ideal would be a portable computer connected to a network. The user would run a D-NFS daemon on their machine instead of an NFS daemon. <p> We also considered using FACEs notion of quasi-copies to overcome NFS statelessness <ref> [Alonso et al. 90] </ref>; however, implementing a good cache consistency scheme was beyond the scope of our prototype. 4.1.2 Disconnected State When in the disconnected state, relying upon the files in the stash, the D-NFS proxy-server must function as a NFS server and satisfy as many client requests as possible.
Reference: [Badrinath et al. ] <author> B. Badrinath, A. Acharya, and T. Imielinski. </author> <title> Impact of mobility on distributed computations. Operating Systems Review, </title> <publisher> 27(2):1520. </publisher>
Reference-contexts: If the disconnection occurs during the execution of a distributed computation, then the computation may need to suspend until reconnecting to the network <ref> [Badrinath et al. ] </ref>. For example, if an NFS client request is made while disconnected, it will block until the client reconnects to the network and the request is serviced by the NFS server.
Reference: [Goldberg & Tso 93] <author> David Goldberg and Michael Tso. </author> <title> How to program networked portable computers. </title> <booktitle> In Proceedings of the Fourth Workshop on Workstation Operating Systems. IEEE, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: In fact, 50% of our time was spent implementing an emulation of NFS for the disconnected case. 5 Related Work We are aware of two other approaches that assist applications to cope with disconnection. On one side is the Intelligently Autonomous Model (IA), described in <ref> [Goldberg & Tso 93] </ref>,[Tso 93], which advocates that mobile applications be aware of their environment and change their behavior accordingly. On the other side is CODA [Kistler93]. Disconnected operation is transparent to the applications, provided that all of the required files have been locally cached by CODAs prefetching mechanism.
Reference: [Imielinski & Badrinath 93] <author> Tomasz Imielinski and B. R. Badrinath. </author> <title> Mobile wireless computing: Solutions and challenges in data management. </title> <type> Technical Report DCSTR296, </type> <institution> Department of Computer Science, Rutgers University, </institution> <address> New Brunswick, NJ 08903, </address> <year> 1993. </year>
Reference-contexts: However, either to conserve battery power (wireless communication hardware will consume a significant percentage of batter power <ref> [Imielinski & Badrinath 93] </ref>), or to cut cost (consider phone rates, particularly, cellular phone rates) these new communication devices will inherently need to disconnect from the network.
Reference: [Kistler 93] <author> James J. Kistler. </author> <title> Disconnected Operation in a Distributed File System. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: For a class project in an advanced graduate course in distributed and parallel system, we wanted to learn more about disconnected operation and its impact on distributed systems. Inuenced by the FACE [Alonso et al. 90] and CODA <ref> [Kistler 93] </ref>[Satyanarayanan et al. 93] file systems, we chose to implement our own distributed file system to experiment with disconnected operation. We decided to build a variant of Suns Network File System (NFS) capable of handling disconnected operation. <p> For example, if an NFS client request is made while disconnected, it will block until the client reconnects to the network and the request is serviced by the NFS server. In contrast, CODA client requests will not block when disconnected from the network <ref> [Kistler 93] </ref>: the request will be serviced by the local CODA server emulator. The CODA example suggests that applications executing in a mobile environment should continue normal operation even after disconnection from the network. <p> We concede that the notion of an agent has been introduced in several other mobile computing systems. In [Adams et al. 93],[Watson & Bershad 93] an agent is used to mask mobility, and in CODA <ref> [Kistler 93] </ref> it is used to support disconnected operation. Our agent is similar to CODAs, but we describe in general how the agent can be used for other mobile applications. A brief definition of the agent is given in section 3.1. Section 3.2 describes the agent states.
Reference: [Satyanarayanan et al. 93] <author> M. Satyanarayanan, James J. Kistler, Lily B. Mummert, Maria R. Ebling, Puneet Kumar, and Qi Lu. </author> <title> Experience with disconnected operation in a mobile environment. </title> <booktitle> In Proceedings USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <pages> pages 1128. </pages> <publisher> USENIX, </publisher> <month> August </month> <year> 1993. </year>
Reference-contexts: For example, after building an agent for rn (read news) at the NNTP layer, one can imagine that the same agent would work for TIN (or some other newsreader). The CODA filesystem is an exceptional example of server emulation and data caching. Empirical results in <ref> [Satyanarayanan et al. 93] </ref> provide evidence that CODAs file prefetching mechanism (hoarding) is quite successful for user defined files and directory trees. However, the applications lack control over CODAs file cache; consequently, CODA cannot guarantee that all required files are in the cache after disconnection.
Reference: [Tso 93] <author> Michael Man-Hak Tso. </author> <title> Using property specifications to achieve graceful disconnected opeartion in an intermittent mobile computing environment. </title> <type> Masters thesis, </type> <institution> Massachusetts Institue of Technology, </institution> <month> May </month> <year> 1993. </year>
Reference: [Watson & Bershad 93] <author> Terri Watson and Brian Bershad. </author> <title> Local area mobile computing on stock hardware and mostly stock software. </title> <booktitle> In Proceedings USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <pages> pages 109116. </pages> <publisher> USENIX, </publisher> <month> August </month> <year> 1993. </year>
References-found: 9

