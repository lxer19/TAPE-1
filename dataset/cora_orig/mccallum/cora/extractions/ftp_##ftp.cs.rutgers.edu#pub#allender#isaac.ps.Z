URL: ftp://ftp.cs.rutgers.edu/pub/allender/isaac.ps.Z
Refering-URL: http://www.cs.rutgers.edu/~allender/publications/
Root-URL: http://www.cs.rutgers.edu
Email: allender@cs.rutgers.edu  lange@informatik.uni-tuebingen.de  
Title: RUSPACE(log n) DSPACE(log 2 n= log log n)  
Author: Eric Allender Klaus-Jorn Lange 
Keyword: allel pointer machine.  
Address: Piscataway, NJ 08855 USA  Sand 13 D-72076 Tubingen Germany  
Affiliation: Department of Computer Science Rutgers University  Wilhelm-Schickard Institut fur Informatik Universitat Tubingen  
Abstract: We present a deterministic algorithm running in space O solving the connectivity problem on strongly unambiguous graphs. In addition, we present an O(log n) time-bounded algorithm for this problem running on a par
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. J. Anderson and G. L. Miller. </author> <title> Deterministic parallel list ranking. </title> <booktitle> In VLSI Algorithms and Architectures, Proc. 3rd Aegean Workshop on Computing, number 319 in LNCS, </booktitle> <pages> pages 81-90. </pages> <publisher> Springer, </publisher> <year> 1988. </year>
Reference-contexts: Of course, these operations destroy any tree structure unless they are synchronized. But obviously the property of being a mangrove is invariant under the parallel application of shunt operations. Hence there is no need to do some sophisticated arrangement of the working processors as in <ref> [1, 5] </ref>. (It should be remarked that the shunt operation preserves the outdegrees of the nodes to be either zero or two.
Reference: [2] <author> R. Armoni, A. Ta-Shma, A. Wigderson and S. Zhou. </author> <booktitle> SL L 4 3 . In Proc. 29th Annual ACM Symp. on Theory of Computing, </booktitle> <year> 1997, </year> <pages> pp. 230-239. </pages>
Reference-contexts: In particular, symmetric logspace has been shown to be contained in parity logspace [14], in SC 2 [20], and in DSPACE (log 4=3 n) <ref> [2] </ref>. None of these upper bounds is known to hold in the nondeterministic case. If we consider these questions for space bounded unambiguous classes, we are confronted with the fact that there are several ways to define notions of unambiguity that apparently do not coincide [4].
Reference: [3] <author> A. Blass and Y. Gurevich. </author> <title> On the unique satisfiability problem. </title> <journal> Inform. and Control, </journal> <volume> 55 </volume> <pages> 80-88, </pages> <year> 1982. </year>
Reference-contexts: Thus, the existence of two or more accepting computations is not forbidden, but simply leads to rejection. In the polynomial time case we have Co-NP 1NP <ref> [3] </ref>. In the logspace case inductive counting [13, 25] shows 1NSPACE (log n) = NSPACE (log n). A more restrictive form of unambiguity is Strong Unambiguity.
Reference: [4] <author> G. Buntrock, B. Jenner, K.-J. Lange, and P. Rossmanith. </author> <title> Unambiguity and fewness for logarithmic space. </title> <booktitle> In Proc. of the 8th Conference on Fundamentals of Computation Theory, number 529 in LNCS, </booktitle> <pages> pages 168-179, </pages> <year> 1991. </year>
Reference-contexts: None of these upper bounds is known to hold in the nondeterministic case. If we consider these questions for space bounded unambiguous classes, we are confronted with the fact that there are several ways to define notions of unambiguity that apparently do not coincide <ref> [4] </ref>. In this paper we will concentrate on the notions of unambiguity (in the sense of unique existence of accepting computation paths), and of strong unambiguity (in the sense of uniqueness of computations between any pair of configurations). <p> However, RUSPACE (log n) is contained in SC 2 , since reach-unambiguous logspace languages can be accepted by deterministic auxiliary pushdown automata in polynomial time <ref> [4, 6] </ref>. Still, it was unknown whether there are o (log 2 n) space algorithms for strongly unambiguous logspace languages. We answer this question affirmatively by showing that RUSPACE (log n) (and hence also StUSPACE (log n)) is contained in DSPACE (log 2 n= log log n). <p> In fact, there are several more versions of unambiguity that are not known to coincide (depending for instance on whether or not there can be more than one accepting configuration, see <ref> [4] </ref>), but there is just one of these other versions that we will consider here, because this version has recently assumed greater importance than some of the others: Reach-Unambiguity. <p> Nonetheless, there is an important class of languages with this property: The class of unambiguous linear languages, ULIN, is contained in StUSPACE (log n) <ref> [4] </ref>, and it is not known to be contained in DSPACE (log n). <p> It is reach-unambiguous if for every input this graph is reach-unambiguous. 4 Contracting Mangroves The class RUSPACE (log n) has been shown to be contained in DAuxPDA-TIME (n O (1) ) by traversing the tree of reachable configurations <ref> [4] </ref>. This tree can be searched with the help of a push-down store in polynomial time. <p> As a consequence, the elements of RUSPACE (log n) possess logtime algorithms running on a CROW-PRAM. But these algorithms for mangroves, generated by composing the constructions in <ref> [4] </ref> with those of [8, 10, 19], are rather complicated. Below, we give a very simple logtime algorithm that runs on a parallel pointer machine (which is a restricted CROW-PRAM). Our main result (Theorem 2) is proved using a slightly more sophisticated variant of this same approach.
Reference: [5] <author> R. Cole and U. Vishkin. </author> <title> Approximate parallel scheduling, part I: the basic technique with applications to optimal parallel list ranking in logarithmic time. </title> <journal> SIAM J. Comp., </journal> <volume> 17 </volume> <pages> 128-142, </pages> <year> 1988. </year>
Reference-contexts: Of course, these operations destroy any tree structure unless they are synchronized. But obviously the property of being a mangrove is invariant under the parallel application of shunt operations. Hence there is no need to do some sophisticated arrangement of the working processors as in <ref> [1, 5] </ref>. (It should be remarked that the shunt operation preserves the outdegrees of the nodes to be either zero or two.
Reference: [6] <author> S. Cook. </author> <title> Deterministic CFL's are accepted simultaneously in polynomial time and log squared space. </title> <booktitle> In Proc. of the 11th Annual ACM Symp. on Theory of Computing, </booktitle> <pages> pages 338-345, </pages> <year> 1979. </year>
Reference-contexts: However, RUSPACE (log n) is contained in SC 2 , since reach-unambiguous logspace languages can be accepted by deterministic auxiliary pushdown automata in polynomial time <ref> [4, 6] </ref>. Still, it was unknown whether there are o (log 2 n) space algorithms for strongly unambiguous logspace languages. We answer this question affirmatively by showing that RUSPACE (log n) (and hence also StUSPACE (log n)) is contained in DSPACE (log 2 n= log log n). <p> It can thus be seen that RUSPACE (log n) SC 2 , since every problem in the class DAuxPDA-TIME is reducible to a deterministic context free language [24], and all such languages are in SC 2 via the algorithm of Cook <ref> [6] </ref>. Elements of Cook's algorithm were later used by Dymond and Ruzzo [8] and independently by Monien et al [19] to show DCFL CROW-TIME (log n) (see also [10]). As a consequence, the elements of RUSPACE (log n) possess logtime algorithms running on a CROW-PRAM.
Reference: [7] <author> S. Cook and P. Dymond. </author> <title> Parallel pointer machines. </title> <journal> Computational Complexity, </journal> <volume> 3 </volume> <pages> 19-30, </pages> <year> 1993. </year>
Reference-contexts: Here, parallel machine models seem helpful, leading to two intermediate classes: the parallel pointer machine <ref> [7, 16] </ref> and the OROW-PRAM [23]. As a consequence of our main result we get OROW algorithms for the elements of RUSPACE (log n) taking time O (log 2 n= log log n). <p> One way is to restrict the concurrent read access to the global memory, which leads to the OROW-PRAMs of Rossmanith [23]. The other way is to restrict the arithmetical capabilities of the instruction set leading to rCROW-PRAMs and to parallel pointer machines <ref> [7, 16] </ref>. 3 Unambiguity A concept intermediate in power between determinism and nondeterminism is Unambiguity. A nondeterministic machine is said to be unambiguous, if for every input there exists at most one accepting computation. <p> Obviously, the algorithm itself is already suitable for a PPM. It remains only to show how to build the mangrove of configurations in logarithmic time, given the input word. As in the corresponding construction of Cook and Dymond <ref> [7] </ref> the initial PPM unit starts to build in logarithmic time a tree of logarithmic depth such that each leaf unit corresponds to a configuration of A on w. Then the leaves are interconnected according to the successor relation of A.
Reference: [8] <author> P. Dymond and W. Ruzzo. </author> <title> Parallel RAMs with owned global memory and deterministic context-free language recognition. </title> <booktitle> In Proc. of 13th International Colloquium on Automata, Languages and Programming, number 226 in LNCS, </booktitle> <pages> pages 95-104. </pages> <publisher> Springer, </publisher> <year> 1986. </year>
Reference-contexts: Since RUSPACE (log n) is a subclass of DAuxPDA-TIME we know that there are logtime CROW-algorithms for the elements of RUSPACE (log n) <ref> [8] </ref>. To give better relative upper bounds on the complexity of RUSPACE (log n) it is interesting to consider intermediate classes between DSPACE (log n) and DAuxPDA-TIME . <p> Let us remark here, that we deal in this paper only with algorithms and classes using PRAMs with a polynomial number of processors. The notion of a CROW-PRAM was introduced by Dymond and Ruzzo <ref> [8] </ref>. This model of PRAM offers many advantages over other models such as CRCW or CREW PRAMs. <p> Elements of Cook's algorithm were later used by Dymond and Ruzzo <ref> [8] </ref> and independently by Monien et al [19] to show DCFL CROW-TIME (log n) (see also [10]). As a consequence, the elements of RUSPACE (log n) possess logtime algorithms running on a CROW-PRAM. <p> As a consequence, the elements of RUSPACE (log n) possess logtime algorithms running on a CROW-PRAM. But these algorithms for mangroves, generated by composing the constructions in [4] with those of <ref> [8, 10, 19] </ref>, are rather complicated. Below, we give a very simple logtime algorithm that runs on a parallel pointer machine (which is a restricted CROW-PRAM). Our main result (Theorem 2) is proved using a slightly more sophisticated variant of this same approach.
Reference: [9] <author> M. Fellows and N. Koblitz. </author> <title> Self-witnessing polynomial-time complexity and prime factorization. </title> <booktitle> In Proc. of the 7th IEEE Structure in Complexity Conference, </booktitle> <pages> pages 107-110, </pages> <year> 1992. </year>
Reference-contexts: The next few paragraphs present motivation for studying reach-unambiguity. In the time-bounded setting, problems such as factoring and primality have efficient unambiguous algorithms but are not known to possess deterministic algorithms with a comparable running time <ref> [9] </ref>. In the space-bounded setting, until recently there had not been any corresponding computational problem whose complexity was best modeled by space-bounded unambiguity.
Reference: [10] <author> H. Fernau, K.-J. Lange, and K. Reinhardt. </author> <title> Advocating ownership. </title> <booktitle> In Proc. of 17th Conference on Foundations of Software Technology and Theoretical Computer Science, number 1180 in LNCS, </booktitle> <pages> pages 286-297. </pages> <publisher> Springer, </publisher> <year> 1996. </year> <month> 12 </month>
Reference-contexts: More information about this and other results detailing the advantages of the CROW model can be found in <ref> [10] </ref>. CROW-PRAMs need only logarithmic time to recognize any given language in DSPACE (log n); There are two important ways to restrict CROW-PRAMs and still maintain this property. One way is to restrict the concurrent read access to the global memory, which leads to the OROW-PRAMs of Rossmanith [23]. <p> Elements of Cook's algorithm were later used by Dymond and Ruzzo [8] and independently by Monien et al [19] to show DCFL CROW-TIME (log n) (see also <ref> [10] </ref>). As a consequence, the elements of RUSPACE (log n) possess logtime algorithms running on a CROW-PRAM. But these algorithms for mangroves, generated by composing the constructions in [4] with those of [8, 10, 19], are rather complicated. <p> As a consequence, the elements of RUSPACE (log n) possess logtime algorithms running on a CROW-PRAM. But these algorithms for mangroves, generated by composing the constructions in [4] with those of <ref> [8, 10, 19] </ref>, are rather complicated. Below, we give a very simple logtime algorithm that runs on a parallel pointer machine (which is a restricted CROW-PRAM). Our main result (Theorem 2) is proved using a slightly more sophisticated variant of this same approach.
Reference: [11] <author> A. Gal and A. Wigderson. </author> <title> Boolean vs. arithmetic complexity classes: ran-domized reductions. Random Structures and Algorithms, </title> <booktitle> 9 </booktitle> <pages> 99-111, </pages> <year> 1996. </year>
Reference-contexts: This yields the three classes USPACE (log n), RUSPACE (log n), and StUSPACE (log n). By definition, USPACE (log n) is a subclass of parity logspace; this is not known to hold for NSPACE (log n) (although see <ref> [11] </ref>); there is no additional nontrivial containment known for USPACE (log n). However, RUSPACE (log n) is contained in SC 2 , since reach-unambiguous logspace languages can be accepted by deterministic auxiliary pushdown automata in polynomial time [4, 6].
Reference: [12] <author> J. Hopcroft and J. Ullman. </author> <title> Introduction to Automata Theory, Language, and Computation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading Mass., </address> <year> 1979. </year>
Reference-contexts: This latter containment is somewhat surprising, because there are characterizations in terms of parallel programs indicating that the class PPM-TIME (log n) is rather close to DSPACE (log n) [18]. 2 2 Preliminaries We assume the reader to be familiar with the basic notions of complexity theory (e.g. <ref> [12] </ref>). We refer the reader to the survey article of Karp and Ramachandran [15] for coverage of the many varieties of parallel random access machines and their relationship to sequential classes.
Reference: [13] <author> N. Immerman. </author> <title> Nondeterministic space is closed under complementation. </title> <journal> SIAM J. Comp., </journal> <volume> 17 </volume> <pages> 935-938, </pages> <year> 1988. </year>
Reference-contexts: Thus, the existence of two or more accepting computations is not forbidden, but simply leads to rejection. In the polynomial time case we have Co-NP 1NP [3]. In the logspace case inductive counting <ref> [13, 25] </ref> shows 1NSPACE (log n) = NSPACE (log n). A more restrictive form of unambiguity is Strong Unambiguity. A nondeterministic machine is said to be strongly unambiguous, if for every pair of configurations there exits at most one computational path connecting these configurations.
Reference: [14] <author> M. Karchmer and A. Wigderson. </author> <title> On span programs. </title> <booktitle> In Proc. of the 8th IEEE Structure in Complexity Theory Conference, </booktitle> <pages> pages 102-111, </pages> <year> 1993. </year>
Reference-contexts: In particular, symmetric logspace has been shown to be contained in parity logspace <ref> [14] </ref>, in SC 2 [20], and in DSPACE (log 4=3 n) [2]. None of these upper bounds is known to hold in the nondeterministic case.
Reference: [15] <author> R.M. Karp and V. Ramachandran. </author> <title> A Survey of Parallel Algorithms for Shared-Memory Machines. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, Vol. A, </booktitle> <pages> pages 869-941. </pages> <publisher> Elsevier, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: We refer the reader to the survey article of Karp and Ramachandran <ref> [15] </ref> for coverage of the many varieties of parallel random access machines and their relationship to sequential classes. Let us remark here, that we deal in this paper only with algorithms and classes using PRAMs with a polynomial number of processors. <p> A first approach would be to attempt to perform pointer jumping on T (x). Unfortunately, the pointers are directed toward the leaves instead of toward the root. The alternative is to perform the shunt operation (see e.g. <ref> [15] </ref>). This would need backpointers directed towards the root, which are usually provided by establishing an Euler tour through a tree. A mangrove is sufficiently different from a tree, however, that this technique also does not work.
Reference: [16] <author> T. Lam and W. Ruzzo. </author> <title> The power of parallel pointer manipulation. </title> <booktitle> In Proc. of the 1st ACM Symposium on Parallel Algorithms and Architectures (SPAA'89), </booktitle> <pages> pages 92-102, </pages> <year> 1989. </year>
Reference-contexts: Here, parallel machine models seem helpful, leading to two intermediate classes: the parallel pointer machine <ref> [7, 16] </ref> and the OROW-PRAM [23]. As a consequence of our main result we get OROW algorithms for the elements of RUSPACE (log n) taking time O (log 2 n= log log n). <p> One way is to restrict the concurrent read access to the global memory, which leads to the OROW-PRAMs of Rossmanith [23]. The other way is to restrict the arithmetical capabilities of the instruction set leading to rCROW-PRAMs and to parallel pointer machines <ref> [7, 16] </ref>. 3 Unambiguity A concept intermediate in power between determinism and nondeterminism is Unambiguity. A nondeterministic machine is said to be unambiguous, if for every input there exists at most one accepting computation.
Reference: [17] <author> K.-J. Lange. </author> <title> An unambiguous class possessing a complete set. </title> <booktitle> In Proc. of the 14th STACS, number 1200 in LNCS, </booktitle> <pages> pages 339-350. </pages> <publisher> Springer, </publisher> <year> 1997. </year>
Reference-contexts: In the space-bounded setting, until recently there had not been any corresponding computational problem whose complexity was best modeled by space-bounded unambiguity. Recently, however, Lange presented a problem that is complete for RUSPACE (log n) <ref> [17] </ref>; this is the first explicit presentation of a problem in USPACE (log n) that is not known to be in DSPACE (log n). (Completeness is a tool that is not often available in studying unambiguous classes.
Reference: [18] <author> K.-J. Lange and R. Niedermeier. </author> <title> Data-independences of parallel random access machines. </title> <booktitle> In Proc. of 13th Conference on Foundations of Software Technology and Theoretical Computer Science, number 761 in LNCS, </booktitle> <pages> pages 104-113. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: This latter containment is somewhat surprising, because there are characterizations in terms of parallel programs indicating that the class PPM-TIME (log n) is rather close to DSPACE (log n) <ref> [18] </ref>. 2 2 Preliminaries We assume the reader to be familiar with the basic notions of complexity theory (e.g. [12]). We refer the reader to the survey article of Karp and Ramachandran [15] for coverage of the many varieties of parallel random access machines and their relationship to sequential classes.
Reference: [19] <author> B. Monien, W. Rytter, and H. Schapers. </author> <title> Fast recognition of deterministic cfl's with a smaller number of processors. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 116 </volume> <pages> 421-429, </pages> <year> 1993. </year> <title> Corrigendum, </title> <publisher> 123:427,1993. </publisher>
Reference-contexts: Elements of Cook's algorithm were later used by Dymond and Ruzzo [8] and independently by Monien et al <ref> [19] </ref> to show DCFL CROW-TIME (log n) (see also [10]). As a consequence, the elements of RUSPACE (log n) possess logtime algorithms running on a CROW-PRAM. But these algorithms for mangroves, generated by composing the constructions in [4] with those of [8, 10, 19], are rather complicated. <p> As a consequence, the elements of RUSPACE (log n) possess logtime algorithms running on a CROW-PRAM. But these algorithms for mangroves, generated by composing the constructions in [4] with those of <ref> [8, 10, 19] </ref>, are rather complicated. Below, we give a very simple logtime algorithm that runs on a parallel pointer machine (which is a restricted CROW-PRAM). Our main result (Theorem 2) is proved using a slightly more sophisticated variant of this same approach.
Reference: [20] <author> N. Nisan. </author> <title> RL SC. </title> <journal> Computational Complexity, </journal> <volume> 4 </volume> <pages> 1-11, </pages> <year> 1994. </year>
Reference-contexts: In particular, symmetric logspace has been shown to be contained in parity logspace [14], in SC 2 <ref> [20] </ref>, and in DSPACE (log 4=3 n) [2]. None of these upper bounds is known to hold in the nondeterministic case.
Reference: [21] <author> K. Reinhardt. </author> <type> Personal communication. </type>
Reference-contexts: not reach-unambiguous, since there are two different paths from node 1 to node 5. 4 3 2 @R @R 5 4 6 @ @ @ 3 1 4 5 @ @ H H Typical examples of mangroves are butterfly graphs, and the following family of graphs introduced by Klaus Reinhardt <ref> [21] </ref>: R n := (V r n ; E r n ) with V r n := n = f (hi; ji; hi; j + 1i)j0 i n 1; 1 j &lt; ng [ f (hi; ji; hi + j mod n; ni)j0 i n 1; 1 j &lt; ng. (Observe
Reference: [22] <author> K. Reinhardt and E. Allender. </author> <title> Making nondeterminism unambiguous. </title> <booktitle> In Proc. 38th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 244-253, </pages> <year> 1997. </year>
Reference-contexts: possible to show that it is contained in SC 2 or to give an o (log 2 n) space algorithm, as has been possible for symmetric logspace and the class RUSPACE (log n)? In this regard, it is interesting to call the reader's attention to a very recent result in <ref> [22] </ref>: USPACE (log n)/poly = NSPACE (log n)/poly. Thus any improved upper bound on the complexity of USPACE (log n) will have strong implications on the complexity of NSPACE (log n).
Reference: [23] <author> P. Rossmanith. </author> <title> The owner concept for PRAMs. </title> <booktitle> In Proc. of the 8th STACS, number 480 in LNCS, </booktitle> <pages> pages 172-183. </pages> <publisher> Springer, </publisher> <year> 1991. </year>
Reference-contexts: Here, parallel machine models seem helpful, leading to two intermediate classes: the parallel pointer machine [7, 16] and the OROW-PRAM <ref> [23] </ref>. As a consequence of our main result we get OROW algorithms for the elements of RUSPACE (log n) taking time O (log 2 n= log log n). <p> CROW-PRAMs need only logarithmic time to recognize any given language in DSPACE (log n); There are two important ways to restrict CROW-PRAMs and still maintain this property. One way is to restrict the concurrent read access to the global memory, which leads to the OROW-PRAMs of Rossmanith <ref> [23] </ref>. The other way is to restrict the arithmetical capabilities of the instruction set leading to rCROW-PRAMs and to parallel pointer machines [7, 16]. 3 Unambiguity A concept intermediate in power between determinism and nondeterminism is Unambiguity. <p> Corollary 4 RUSPACE (log n) OROW-TIME Proof: The PRAM works in log n= log log n phases, each taking O (log n) steps. In each phase the work of a logspace Turing machine is simulated in logarithmic time by an OROW-PRAM with a polynomial number of processors <ref> [23] </ref>. There is a slight difference between what we need here and what is provided by the simulation in [23], in that here we don't simulate merely an accepting machine, but a machine producing some output. <p> In each phase the work of a logspace Turing machine is simulated in logarithmic time by an OROW-PRAM with a polynomial number of processors <ref> [23] </ref>. There is a slight difference between what we need here and what is provided by the simulation in [23], in that here we don't simulate merely an accepting machine, but a machine producing some output.
Reference: [24] <author> I. Sudborough. </author> <title> On the tape complexity of deterministic context-free languages. </title> <journal> J. Assoc. Comp. Mach., </journal> <volume> 25 </volume> <pages> 405-414, </pages> <year> 1978. </year>
Reference-contexts: This tree can be searched with the help of a push-down store in polynomial time. It can thus be seen that RUSPACE (log n) SC 2 , since every problem in the class DAuxPDA-TIME is reducible to a deterministic context free language <ref> [24] </ref>, and all such languages are in SC 2 via the algorithm of Cook [6]. Elements of Cook's algorithm were later used by Dymond and Ruzzo [8] and independently by Monien et al [19] to show DCFL CROW-TIME (log n) (see also [10]).
Reference: [25] <author> R. Szelepcsenyi. </author> <title> The method of forcing for nondeterministic automata. </title> <journal> Acta Informatica, </journal> <volume> 26 </volume> <pages> 279-284, </pages> <year> 1988. </year> <month> 13 </month>
Reference-contexts: Thus, the existence of two or more accepting computations is not forbidden, but simply leads to rejection. In the polynomial time case we have Co-NP 1NP [3]. In the logspace case inductive counting <ref> [13, 25] </ref> shows 1NSPACE (log n) = NSPACE (log n). A more restrictive form of unambiguity is Strong Unambiguity. A nondeterministic machine is said to be strongly unambiguous, if for every pair of configurations there exits at most one computational path connecting these configurations.
References-found: 25

