URL: ftp://ftp.cs.unc.edu/pub/users/jeffay/papers/RTSS-93.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/real-time.html
Root-URL: http://www.cs.unc.edu
Title: Accounting for Interrupt Handling Costs in Dynamic Priority Task Systems little attention to the representation
Author: Kevin Jeffay Donald L. Stone 
Keyword: there exist uncompleted task invocations.  
Address: Chapel Hill, NC 27599-3175  
Affiliation: University of North Carolina at Chapel Hill Department of Computer Science  
Date: December 1993, pp. 212-221.  
Note: In: Proceedings of the 14 th IEEE Real-Time Systems Symposium, Raleigh-Durham, NC,  Research on the feasibility problem has given relatively  inter Supported by a grant from the National Science Foundation (number CCR-9110938). Supported by a graduate fellowship from the IBM Corporation. rupt handling, DMA, etc., must be taken  to DMA has been reported in  
Abstract: jeffay,stone-@cs.unc.edu Abstract: In order to apply the results of formal studies of real-time task models, a practitioner must account for the effects of phenomena present in the implementation but not present in the formal model. We study the feasibility and schedulability problems for periodic tasks that must compete for the processor with interrupt handlers tasks that are assumed to always have priority over application tasks. The emphasis in the analysis is on deadline driven scheduling methods. We develop conditions that solve the feasibility and schedulability problems and demonstrate that our solutions are computationally feasible. Lastly, we compare our analysis with others 1 . Introduction The problem of scheduling regularly occurring tasks to meet deadlines is central to the design and analysis of real-time systems. The scheduling analysis of real-time systems concerns two fundamental problems: feasibility and schedulability. For a given set of task execution requirements, the feasibility problem is that of determining relations on model parameters that are necessary and sufficient for ensuring there exists a schedule in which no task ever misses a deadline. An example execution requirement is that an invocation of a task occur no sooner than the deadline of the previous invocation. For a given set of scheduling constraints, the schedulability problem is that of determining if there exists a scheduling algorithm that is capable of scheduling any feasible task set such that no task indeed ever misses a deadline. An example scheduling constraint is that a scheduler never idle the processor when emptable operations is considered in [6]. Research on the schedulability problem has focused on two scheduling paradigms: scheduling based on a static assignment of priorities to tasks, of which the r a t e monotonic priority assignment is the dominant approach, and scheduling based on a dynamically changing assignment of priority to tasks, of which the deadline driven priority assignment dominates. Under a rate monotonic priority assignment, tasks that are requested frequently have higher priority than tasks requested less frequently. Under a deadline driven priority assignment, tasks with nearer deadlines have priority over tasks with later deadlines. For particular task models, the rate monotonic priority assignment is known to be an optimal static priority assignment and the deadline driven priority assignment is known to be an optimal dynamic priority assignment [8]. In this paper we consider the problem of accounting for the effects of interrupt handling. We present an analysis of the feasibility and schedulability problem for a real-time workload that explicitly includes interrupt handlers. The emphasis is primarily on scheduling algorithms that dynamically vary the priority of tasks. Our interest in dynamic priority scheduling arises from the fact that dynamic priority algorithms are capable of guaranteeing a correct execution to any task set that is schedulable using a static priority assignment, while the reverse is not true. Moreover, as we discuss in Section 4, it is possible to model the effects of interrupt handlers in static priority systems using results from the literature (as well as those presented below). Lastly, in related work, we are applying results for dynamic priority scheduling to the design and implementation of a real-time multimedia system [4]. Throughout, we assume a task model in which interrupt handlers always have a higher priority than real-time application tasks. Our model is based on the hybrid developed for static priority task systems.
Abstract-found: 1
Intro-found: 1
References-found: 0

