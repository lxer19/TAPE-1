URL: http://kirmes.inferenzsysteme.informatik.th-darmstadt.de/~reports/notes/ibn-97-45.ps
Refering-URL: http://www.inferenzsysteme.informatik.tu-darmstadt.de/~giesl/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: thomas@cslab.ericsson.se  E-mail: giesl@informatik.th-darmstadt.de  
Phone: 2  
Title: Modularity of Termination Using Dependency Pairs  
Author: Thomas Arts and Jurgen Giesl 
Address: AB, 126 25 Stockholm, Sweden,  64283 Darmstadt, Germany,  
Affiliation: 1 Computer Science Laboratory, Ericsson Telecom  FB Informatik, Darmstadt University of Technology, Alexanderstr. 10,  
Abstract: The framework of dependency pairs allows automated termination and innermost termination proofs for many TRSs where such proofs were not possible before. In this paper we present a refinement of this framework in order to prove termination in a modular way. Our modularity results significantly increase the class of term rewriting systems where termination resp. innermost termination can be proved automatically. Moreover, the modular approach to dependency pairs yields new modularity criteria which extend previous results in this area considerably. In particular, existing results for modularity of innermost termina tion can easily be obtained as direct consequences of our new criteria. 
Abstract-found: 1
Intro-found: 1
Reference: [AG96] <author> T. Arts & J. Giesl, </author> <title> Termination of constructor systems. </title> <booktitle> In Proc. RTA-96, LNCS 1103, </booktitle> <address> New Brunswick, NJ, </address> <year> 1996. </year>
Reference-contexts: However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class. For that reason we developed the framework of dependency pairs <ref> [AG96, AG97a, AG97b] </ref> which allows to apply the standard methods for termination proofs to such TRSs where they failed up to now. In this way, termination of many (also non-simply terminating) systems could be proved automatically.
Reference: [AG97a] <author> T. Arts & J. Giesl, </author> <title> Automatically proving termination where simplification orderings fail. </title> <booktitle> In Proc. TAPSOFT '97, LNCS 1214, </booktitle> <address> Lille, France, </address> <year> 1997. </year>
Reference-contexts: However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class. For that reason we developed the framework of dependency pairs <ref> [AG96, AG97a, AG97b] </ref> which allows to apply the standard methods for termination proofs to such TRSs where they failed up to now. In this way, termination of many (also non-simply terminating) systems could be proved automatically. <p> We conclude in Sect. 6 and give a collection of examples to demonstrate the power of our results in Sect. 7. 2 Modular Termination with Dependency Pairs In <ref> [AG97a] </ref> we introduced the dependency pair technique to prove termination automatically. In this section we briefly recapitulate its basic concepts and present a new modular approach for automated termination proofs. In the following, the root of a term f (: : :) is the leading function symbol f . <p> In fact 3 ? ? * H H Hj -hF (x; c (y)); F (y; y)i hF (s (x); y); F (x; s (c (y)))i Fig. 1. The estimated dependency graph in our example. any finite sequence of the dependency pair (2) is a chain. As proved in <ref> [AG97a] </ref>, absence of infinite chains is a sufficient and necessary criterion for termination. Theorem 3 (Termination Criterion). A TRS R is terminating if and only if there exists no infinite R-chain. <p> Hence, (1) can never follow itself in a chain, because F (x 1 ; s (z 1 )) does not unify with F (x; c (y)). To estimate which dependency pairs may occur consecutive, the estimated dependency graph has been introduced, cf. <ref> [AG97a] </ref>. Definition 4 (Estimated Dependency Graph). The estimated dependency graph of a TRS R is the directed graph whose nodes are the dependency pairs and there is an arc from hs; ti to hv; wi if ren (cap (t)) and v are unifiable.
Reference: [AG97b] <author> T. Arts & J. Giesl, </author> <title> Proving innermost normalisation automatically. </title> <booktitle> In Proc. RTA-97, LNCS 1232, </booktitle> <address> Sitges, Spain, </address> <year> 1997. </year>
Reference-contexts: However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class. For that reason we developed the framework of dependency pairs <ref> [AG96, AG97a, AG97b] </ref> which allows to apply the standard methods for termination proofs to such TRSs where they failed up to now. In this way, termination of many (also non-simply terminating) systems could be proved automatically. <p> Hence, without our modularity result, an automated termination proof for this example fails. 6 3 Modular Innermost Termination with Dependency Pairs In <ref> [AG97b] </ref> we showed that the dependency pair approach can also be modified in order to verify innermost termination automatically. Unlike previous methods, this technique can also prove innermost termination of non-terminating systems automatically. <p> In <ref> [AG97b] </ref>, we proved that absence of infinite innermost chains is a sufficient and necessary criterion for innermost termination. Theorem 8 (Innermost Termination Criterion). A TRS R is innermost terminating if and only if there exists no infinite innermost R-chain. <p> Note that Rls R (f ) = ; for any constructor f . Now our theorem for automatic 2 modular verification of innermost termination can be proved analogous to Thm. 6. 2 Additional refinements for the automated checking of our innermost termination criterion can be found in <ref> [AG97b] </ref>. 8 Theorem 12 (Modular Innermost Termination Proofs).
Reference: [AG97c] <author> T. Arts and J. Giesl, </author> <title> Termination of term rewriting using dependency pairs. </title> <type> Technical Report IBN 97/46, </type> <institution> TU Darmstadt, Germany, </institution> <year> 1997. </year> <note> http:// kirmes.inferenzsysteme.informatik.th-darmstadt.de/~reports/notes/ ibn-97-46.ps.gz </note>
Reference-contexts: A collection of more than 75 such examples where (innermost) termination can be proved automatically by the dependency pair approach can be found in <ref> [AG97c] </ref>. Most of these examples are hierarchical combinations that are no proper extensions, i.e. our modularity results can be used to ease their (innermost) termination proofs, whereas previous modularity results cannot be applied.
Reference: [Art96] <author> T. </author> <title> Arts, Termination by absence of infinite chains of dependency pairs. </title> <booktitle> In Proc. CAAP '96, LNCS 1059, </booktitle> <address> Linkoping, Sweden, </address> <year> 1996. </year> <month> 27 </month>
Reference: [Art97] <author> T. </author> <title> Arts, Automatically proving termination and innermost normalisation of term rewriting systems. </title> <type> PhD Thesis, </type> <institution> Utrecht Univ., </institution> <address> The Netherlands, </address> <year> 1997. </year>
Reference: [Der87] <author> N. Dershowitz, </author> <title> Termination of rewriting. </title> <journal> J. Symb. Comp., </journal> <volume> 3 </volume> <pages> 69-116, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction Termination is one of the most important properties of a term rewriting system (TRS). While in general this problem is undecidable [HL78], several methods for proving termination have been developed (for surveys see e.g. <ref> [Der87, Ste95b, DH95] </ref>). However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class. <p> For example consider the following TRS with the constructors s and c and the defined symbol f. f (x; c (y)) ! f (x; s (f (y; y))) Most methods for automated termination proofs are restricted to simplification orderings <ref> [Der87, Ste95b] </ref>. Hence, these methods cannot prove termination of TRSs like the one above, as f (x; c (s (x))) can be reduced to the term f (x; s (f (x; s (c (s (x)))))) where it is embedded in. <p> This collection includes TRSs from different areas of computer science (e.g. arithmetical operations such as mod, gcd, logarithm, average, sorting algorithms such as minimum sort and quicksort, algorithms on graphs and trees, etc.) and several other well-known non-simply terminating TRSs from the literature (e.g. from <ref> [Der87, DH95, Ste95a] </ref>). 7.1 An Overlapping System The following TRS is the leading example of Sect. 2. f (x; c (y)) ! f (x; s (f (y; y))) The system is not simply terminating, as we have the following reduction: f (x; c (s (x))) ! R f (x; s (f
Reference: [Der94] <author> N. Dershowitz, </author> <title> Hierarchical Termination. </title> <booktitle> In Proc. CTRS-94, LNCS 968, </booktitle> <address> Jerusalem, Israel, </address> <year> 1994. </year>
Reference-contexts: For example, many systems are hierarchical combinations of TRSs that have not only constructors in common, but where one subsystem contains defined symbols of the other subsystem. Termination is only proved modular for hierarchical combinations of several restricted forms <ref> [Der94, FJ95] </ref>. The modularity results for innermost termination are less restrictive than those for termination. <p> In particular, we can also handle hierarchical combinations where R 1 contains defined symbols of R 0 in the arguments of its recursive calls. Such systems occur frequently in practice. Another modularity criterion for hierarchical combinations is due to Der-showitz <ref> [Der94] </ref>. Here, occurrences of D 0 -symbols in recursive calls of D 1 -symbols are allowed, but only if R 1 is oblivious of the R 0 -rules, i.e. termination of R 1 must not depend on the R 0 -rules.
Reference: [DH95] <author> N. Dershowitz & C. Hoot, </author> <title> Natural termination. </title> <journal> TCS, </journal> <volume> 142(2) </volume> <pages> 179-207, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Termination is one of the most important properties of a term rewriting system (TRS). While in general this problem is undecidable [HL78], several methods for proving termination have been developed (for surveys see e.g. <ref> [Der87, Ste95b, DH95] </ref>). However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class. <p> This collection includes TRSs from different areas of computer science (e.g. arithmetical operations such as mod, gcd, logarithm, average, sorting algorithms such as minimum sort and quicksort, algorithms on graphs and trees, etc.) and several other well-known non-simply terminating TRSs from the literature (e.g. from <ref> [Der87, DH95, Ste95a] </ref>). 7.1 An Overlapping System The following TRS is the leading example of Sect. 2. f (x; c (y)) ! f (x; s (f (y; y))) The system is not simply terminating, as we have the following reduction: f (x; c (s (x))) ! R f (x; s (f
Reference: [Dro89] <author> K. Drosten, </author> <title> Termersetzungssysteme. </title> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: Toyama [Toy87] showed that termination is not modular for the direct sum, i.e. the partition of a TRS into subsystems with disjoint signatures. Barendregt and Klop (adapted by Toyama [Toy87]) and Drosten <ref> [Dro89] </ref> even gave counterexamples where the subsystems are both complete (confluent and terminating). But for TRSs of a special form termination is in fact a modular property ? Technical Report IBN 97/45, TU Darmstadt. Extended version of a paper presented at RTA '98.
Reference: [FJ95] <author> M. Fernandez & J.-P. Jouannaud, </author> <title> Modular termination of term rewriting systems revisited. </title> <booktitle> In Proc. 10th Workshop on Specification of Abstract Data Types, LNCS 906, S. </booktitle> <address> Margherita, Italy, </address> <year> 1995. </year>
Reference-contexts: For example, many systems are hierarchical combinations of TRSs that have not only constructors in common, but where one subsystem contains defined symbols of the other subsystem. Termination is only proved modular for hierarchical combinations of several restricted forms <ref> [Der94, FJ95] </ref>. The modularity results for innermost termination are less restrictive than those for termination. <p> However, this criterion is not applicable for the sum and weight-example, because termination of the weight-rules in fact depends on the result of sum (n*m*x; 0*x). An alternative modularity result for hierarchical combinations was presented by Fernandez and Jouannaud <ref> [FJ95] </ref>. However, their result is restricted to systems where the arguments of recursive calls in R 1 decrease w.r.t. the subterm relation (compared as multisets or lexicographically).
Reference: [Gie95] <author> J. Giesl, </author> <title> Generating polynomial orderings for termination proofs. </title> <booktitle> In Proc. RTA-95, LNCS 914, </booktitle> <address> Kaiserslautern, Germany, </address> <year> 1995. </year>
Reference-contexts: For the first system one can use a polynomial interpretation mapping f (x; y; z) to x+y+z and c (x) to 5x+1 [Lan79]. Methods for the automated generation of polynomial orderings have for instance been developed in <ref> [Ste94, Gie95] </ref>. For the second system one can use the lpo.
Reference: [Gra94] <author> B. Gramlich, </author> <title> Generalized sufficient conditions for modular termination of rewriting. </title> <journal> Appl. Algebra in Engineering, Comm. & Comp., </journal> <volume> 5 </volume> <pages> 131-158, </pages> <year> 1994. </year>
Reference-contexts: Extended version of a paper presented at RTA '98. This work was partially supported by the Deutsche Forschungsgemein schaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'. for direct sums <ref> [Rus87, Mid89, Gra94, TKB95, SMP95] </ref>. For a survey see e.g. [Mid90, Ohl94, Gra96a]. However, a TRS often cannot be split into subsystems with disjoint signatures. Therefore, other partitions have also been considered. In many cases it is desirable to have at least constructors in common in both parts.
Reference: [Gra95] <author> B. Gramlich, </author> <title> Abstract relations between restricted termination and confluence properties of rewrite systems. </title> <journal> Fundamenta Informaticae, </journal> <volume> 24 </volume> <pages> 3-23, </pages> <year> 1995. </year>
Reference-contexts: In many cases it is desirable to have at least constructors in common in both parts. For the subclass of constructor systems, termination is modular provided that both parts are complete and have disjoint sets of defined symbols [MT93]. This result can also be generalized to overlay systems <ref> [Gra95] </ref>. Simple termination is modular for TRSs with shared constructors and disjoint defined symbols [KO92] and this result can be extended to composable TRSs [MZ97]. Nevertheless, in practice these results often cannot be applied for automated termination proofs. <p> Termination is only proved modular for hierarchical combinations of several restricted forms [Der94, FJ95]. The modularity results for innermost termination are less restrictive than those for termination. Innermost termination is modular for direct sums and for TRSs with shared constructors <ref> [Gra95] </ref>, for composable constructor systems [MT93], for composable TRSs [Ohl95], and for proper extensions [KR95], which are a special class of hierarchical combinations. As innermost termination implies termination for several classes of TRSs [Gra95, Gra96b], these results can also be used for termination proofs of such systems. <p> Innermost termination is modular for direct sums and for TRSs with shared constructors [Gra95], for composable constructor systems [MT93], for composable TRSs [Ohl95], and for proper extensions [KR95], which are a special class of hierarchical combinations. As innermost termination implies termination for several classes of TRSs <ref> [Gra95, Gra96b] </ref>, these results can also be used for termination proofs of such systems. In particular, this holds for locally confluent overlay systems (and in particular for non-overlapping TRSs). <p> Sect. 5.2 gives a comparison with results on hierarchical combinations. 5.1 Shared Constructors and Composable TRSs By the framework of the previous sections we can easily prove that innermost termination is modular for composable TRSs [Ohl95] and hence also for TRSs with disjoint sets of defined symbols and shared constructors <ref> [Gra95] </ref>.
Reference: [Gra96a] <author> B. Gramlich, </author> <title> Termination and confluence properties of structured rewrite systems. </title> <type> PhD Thesis, </type> <institution> Universitat Kaiserslautern, Germany, </institution> <year> 1996. </year>
Reference-contexts: Extended version of a paper presented at RTA '98. This work was partially supported by the Deutsche Forschungsgemein schaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'. for direct sums [Rus87, Mid89, Gra94, TKB95, SMP95]. For a survey see e.g. <ref> [Mid90, Ohl94, Gra96a] </ref>. However, a TRS often cannot be split into subsystems with disjoint signatures. Therefore, other partitions have also been considered. In many cases it is desirable to have at least constructors in common in both parts.
Reference: [Gra96b] <author> B. Gramlich, </author> <title> On proving termination by innermost termination. </title> <booktitle> In Proc. RTA-96, LNCS 1103, </booktitle> <address> New Brunswick, NJ, </address> <year> 1996. </year>
Reference-contexts: Innermost termination is modular for direct sums and for TRSs with shared constructors [Gra95], for composable constructor systems [MT93], for composable TRSs [Ohl95], and for proper extensions [KR95], which are a special class of hierarchical combinations. As innermost termination implies termination for several classes of TRSs <ref> [Gra95, Gra96b] </ref>, these results can also be used for termination proofs of such systems. In particular, this holds for locally confluent overlay systems (and in particular for non-overlapping TRSs).
Reference: [HL78] <author> G. Huet and D. Lankford, </author> <title> On the uniform halting problem for term rewriting systems. </title> <type> Technical Report 283, </type> <institution> INRIA, Le Chesnay, France, </institution> <year> 1978. </year>
Reference-contexts: 1 Introduction Termination is one of the most important properties of a term rewriting system (TRS). While in general this problem is undecidable <ref> [HL78] </ref>, several methods for proving termination have been developed (for surveys see e.g. [Der87, Ste95b, DH95]). However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class.
Reference: [KL80] <author> S. Kamin and J.-J. Levy, </author> <title> Two generalizations of the recursive path ordering. </title> <institution> Department of Computer Science, University of Illinois, IL, </institution> <year> 1980. </year>
Reference-contexts: Now the inequalities resulting from (4) - (6) are satisfied by the lexicographic path ordering (lpo) where subterms are compared right-to-left <ref> [KL80] </ref>. For the inequalities (7) - (9) we again delete the second argument of f. Then these inequalities are also satisfied by the lpo (with the precedence F . s; F . c), but this time subterms are compared left-to-right.
Reference: [KR95] <author> M. R. K. Krishna Rao, </author> <title> Modular proofs for completeness of hierarchical term rewriting systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 151 </volume> <pages> 487-512, </pages> <year> 1995. </year>
Reference-contexts: The modularity results for innermost termination are less restrictive than those for termination. Innermost termination is modular for direct sums and for TRSs with shared constructors [Gra95], for composable constructor systems [MT93], for composable TRSs [Ohl95], and for proper extensions <ref> [KR95] </ref>, which are a special class of hierarchical combinations. As innermost termination implies termination for several classes of TRSs [Gra95, Gra96b], these results can also be used for termination proofs of such systems. In particular, this holds for locally confluent overlay systems (and in particular for non-overlapping TRSs). <p> However, our results extend modularity to a much larger class of TRSs, e.g. they also allow a splitting into non-composable subsystems which share defined symbols as demonstrated in Sect. 4.2. 12 5.2 Proper Extensions Krishna Rao <ref> [KR95] </ref> proved that innermost termination is modular for a certain form of hierarchical combinations, viz. so-called proper extensions. In this section we show that this is also a direct consequence of our results. <p> Now the defined symbols D 1 of R 1 are split in two sets D 0 1 and D 1 1 , where D 0 1 contains all defined symbols which depend on a defined symbol of R 0 . Definition 16 (Proper Extension, <ref> [KR95] </ref>). Let R 0 (D 0 ; C 0 ; R 0 ) and R 1 (D 1 ; C 1 ; R 1 ) form a hierarchical combination. <p> Thus, in a proper extension functions depending on R 0 are never called within a recursive call of R 1 -functions. Cor. 13 and 14 imply the following result of <ref> [KR95] </ref>. Theorem 17 (Modularity for Proper Extensions). Let R 1 (D 1 ; C 1 ; R 1 ) be a proper extension of R 0 (D 0 ; C 0 ; R 0 ).
Reference: [KO92] <author> M. Kurihara & A. Ohuchi, </author> <title> Modularity of simple termination of term rewriting systems with shared constructors. </title> <journal> Theor. Comp. Sc., </journal> <volume> 103 </volume> <pages> 273-282, </pages> <year> 1992. </year>
Reference-contexts: For the subclass of constructor systems, termination is modular provided that both parts are complete and have disjoint sets of defined symbols [MT93]. This result can also be generalized to overlay systems [Gra95]. Simple termination is modular for TRSs with shared constructors and disjoint defined symbols <ref> [KO92] </ref> and this result can be extended to composable TRSs [MZ97]. Nevertheless, in practice these results often cannot be applied for automated termination proofs.
Reference: [Lan79] <author> D. S. Lankford, </author> <title> On proving term rewriting systems are noetherian. </title> <type> Technical Report Memo MTP-3, </type> <institution> Louisiana Tech. University, Ruston, LA, </institution> <year> 1979. </year>
Reference-contexts: In fact, both subsystems are even terminating as can easily be proved automatically. For the first system one can use a polynomial interpretation mapping f (x; y; z) to x+y+z and c (x) to 5x+1 <ref> [Lan79] </ref>. Methods for the automated generation of polynomial orderings have for instance been developed in [Ste94, Gie95]. For the second system one can use the lpo.
Reference: [MA96] <author> D. McAllester and K. Arkoudas, </author> <title> Walther recursion. </title> <booktitle> In Proc. CADE-13, LNCS 1104, </booktitle> <address> New Brunswick, NJ, </address> <year> 1996. </year>
Reference-contexts: These inequalities are satisfied by the rpo using the precedence f 0 . true, f 0 . false, g . if, g . f 0 , c . g, c . s 0 . 7.6 Renaming in the Lambda Calculus The following system is a variant of an algorithm from <ref> [MA96] </ref>. The purpose of the function ren (x; y; t) is to replace every free occurrence of the variable x in the term t by the variable y.
Reference: [Mid89] <author> A. Middeldorp, </author> <title> A sufficient condition for the termination of the direct sum of term rewriting systems. </title> <booktitle> In Proc. LICS '89, </booktitle> <address> Pacific Grove, CA, </address> <year> 1989. </year>
Reference-contexts: Extended version of a paper presented at RTA '98. This work was partially supported by the Deutsche Forschungsgemein schaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'. for direct sums <ref> [Rus87, Mid89, Gra94, TKB95, SMP95] </ref>. For a survey see e.g. [Mid90, Ohl94, Gra96a]. However, a TRS often cannot be split into subsystems with disjoint signatures. Therefore, other partitions have also been considered. In many cases it is desirable to have at least constructors in common in both parts.
Reference: [Mid90] <author> A. Middeldorp, </author> <title> Modular properties of term rewriting systems. </title> <type> PhD Thesis, </type> <institution> Free University Amsterdam, </institution> <address> The Netherlands, </address> <year> 1990. </year>
Reference-contexts: Extended version of a paper presented at RTA '98. This work was partially supported by the Deutsche Forschungsgemein schaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'. for direct sums [Rus87, Mid89, Gra94, TKB95, SMP95]. For a survey see e.g. <ref> [Mid90, Ohl94, Gra96a] </ref>. However, a TRS often cannot be split into subsystems with disjoint signatures. Therefore, other partitions have also been considered. In many cases it is desirable to have at least constructors in common in both parts.
Reference: [MT93] <author> A. Middeldorp & Y. Toyama, </author> <title> Completeness of combinations of constructor systems. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 15 </volume> <pages> 331-348, </pages> <year> 1993. </year>
Reference-contexts: Therefore, other partitions have also been considered. In many cases it is desirable to have at least constructors in common in both parts. For the subclass of constructor systems, termination is modular provided that both parts are complete and have disjoint sets of defined symbols <ref> [MT93] </ref>. This result can also be generalized to overlay systems [Gra95]. Simple termination is modular for TRSs with shared constructors and disjoint defined symbols [KO92] and this result can be extended to composable TRSs [MZ97]. Nevertheless, in practice these results often cannot be applied for automated termination proofs. <p> Termination is only proved modular for hierarchical combinations of several restricted forms [Der94, FJ95]. The modularity results for innermost termination are less restrictive than those for termination. Innermost termination is modular for direct sums and for TRSs with shared constructors [Gra95], for composable constructor systems <ref> [MT93] </ref>, for composable TRSs [Ohl95], and for proper extensions [KR95], which are a special class of hierarchical combinations. As innermost termination implies termination for several classes of TRSs [Gra95, Gra96b], these results can also be used for termination proofs of such systems.
Reference: [MZ97] <author> A. Middeldorp & H. Zantema, </author> <title> Simple termination of rewrite systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 175 </volume> <pages> 127-158, </pages> <year> 1997. </year>
Reference-contexts: This result can also be generalized to overlay systems [Gra95]. Simple termination is modular for TRSs with shared constructors and disjoint defined symbols [KO92] and this result can be extended to composable TRSs <ref> [MZ97] </ref>. Nevertheless, in practice these results often cannot be applied for automated termination proofs. For example, many systems are hierarchical combinations of TRSs that have not only constructors in common, but where one subsystem contains defined symbols of the other subsystem.
Reference: [Ohl94] <author> E. Ohlebusch, </author> <title> On the modularity of termination of term rewriting systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 136 </volume> <pages> 333-360, </pages> <year> 1994. </year>
Reference-contexts: Extended version of a paper presented at RTA '98. This work was partially supported by the Deutsche Forschungsgemein schaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'. for direct sums [Rus87, Mid89, Gra94, TKB95, SMP95]. For a survey see e.g. <ref> [Mid90, Ohl94, Gra96a] </ref>. However, a TRS often cannot be split into subsystems with disjoint signatures. Therefore, other partitions have also been considered. In many cases it is desirable to have at least constructors in common in both parts.
Reference: [Ohl95] <author> E. Ohlebusch, </author> <title> Modular properties of composable term rewriting systems. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 1 </volume> <pages> 1-42, </pages> <year> 1995. </year>
Reference-contexts: Termination is only proved modular for hierarchical combinations of several restricted forms [Der94, FJ95]. The modularity results for innermost termination are less restrictive than those for termination. Innermost termination is modular for direct sums and for TRSs with shared constructors [Gra95], for composable constructor systems [MT93], for composable TRSs <ref> [Ohl95] </ref>, and for proper extensions [KR95], which are a special class of hierarchical combinations. As innermost termination implies termination for several classes of TRSs [Gra95, Gra96b], these results can also be used for termination proofs of such systems. <p> Sect. 5.1 focuses on composable TRSs and Sect. 5.2 gives a comparison with results on hierarchical combinations. 5.1 Shared Constructors and Composable TRSs By the framework of the previous sections we can easily prove that innermost termination is modular for composable TRSs <ref> [Ohl95] </ref> and hence also for TRSs with disjoint sets of defined symbols and shared constructors [Gra95]. <p> 0 = ; and if both systems contain all rewrite rules that define a defined symbol whenever that symbol is shared, i.e. fl ! r j root (l) 2 D 0 " D 1 g R 0 " R 1 : Now Cor. 14 implies the following result of Ohlebusch <ref> [Ohl95] </ref>. Theorem 15 (Modularity for Composable TRSs). Let R 0 (D 0 ; C 0 ; R 0 ) and R 1 (D 1 ; C 1 ; R 1 ) be composable TRSs.
Reference: [Rus87] <author> M. Rusinowitch, </author> <title> On termination of the direct sum of term-rewriting systems. </title> <journal> Information Processing Letters, </journal> <volume> 26 </volume> <pages> 65-70, </pages> <year> 1987. </year>
Reference-contexts: Extended version of a paper presented at RTA '98. This work was partially supported by the Deutsche Forschungsgemein schaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'. for direct sums <ref> [Rus87, Mid89, Gra94, TKB95, SMP95] </ref>. For a survey see e.g. [Mid90, Ohl94, Gra96a]. However, a TRS often cannot be split into subsystems with disjoint signatures. Therefore, other partitions have also been considered. In many cases it is desirable to have at least constructors in common in both parts.
Reference: [SMP95] <author> M. Schmidt-Schau, M. Marchiori, & S. E. Panitz, </author> <title> Modular termination of r-consistent and left-linear term rewriting systems. </title> <journal> TCS, </journal> <volume> 149 </volume> <pages> 361-374, </pages> <year> 1995. </year>
Reference-contexts: Extended version of a paper presented at RTA '98. This work was partially supported by the Deutsche Forschungsgemein schaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'. for direct sums <ref> [Rus87, Mid89, Gra94, TKB95, SMP95] </ref>. For a survey see e.g. [Mid90, Ohl94, Gra96a]. However, a TRS often cannot be split into subsystems with disjoint signatures. Therefore, other partitions have also been considered. In many cases it is desirable to have at least constructors in common in both parts.
Reference: [Ste94] <author> J. Steinbach, </author> <title> Generating polynomial orderings. </title> <journal> Information Processing Letters, </journal> <volume> 49 </volume> <pages> 85-93, </pages> <year> 1994. </year> <month> 28 </month>
Reference-contexts: For the first system one can use a polynomial interpretation mapping f (x; y; z) to x+y+z and c (x) to 5x+1 [Lan79]. Methods for the automated generation of polynomial orderings have for instance been developed in <ref> [Ste94, Gie95] </ref>. For the second system one can use the lpo.
Reference: [Ste95a] <author> J. Steinbach, </author> <title> Automatic termination proofs with transformation orderings. </title> <booktitle> In Proc. RTA-95, LNCS 914, </booktitle> <address> Kaiserslautern, Germany. </address> <note> Full version appeared as Technical Report SR-92-93, </note> <institution> Universitat Kaiserslautern, Germany, </institution> <year> 1992. </year>
Reference-contexts: This collection includes TRSs from different areas of computer science (e.g. arithmetical operations such as mod, gcd, logarithm, average, sorting algorithms such as minimum sort and quicksort, algorithms on graphs and trees, etc.) and several other well-known non-simply terminating TRSs from the literature (e.g. from <ref> [Der87, DH95, Ste95a] </ref>). 7.1 An Overlapping System The following TRS is the leading example of Sect. 2. f (x; c (y)) ! f (x; s (f (y; y))) The system is not simply terminating, as we have the following reduction: f (x; c (s (x))) ! R f (x; s (f
Reference: [Ste95b] <author> J. Steinbach, </author> <title> Simplification orderings: history of results. </title> <journal> Fundamenta Infor-maticae, </journal> <volume> 24 </volume> <pages> 47-87, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Termination is one of the most important properties of a term rewriting system (TRS). While in general this problem is undecidable [HL78], several methods for proving termination have been developed (for surveys see e.g. <ref> [Der87, Ste95b, DH95] </ref>). However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class. <p> For example consider the following TRS with the constructors s and c and the defined symbol f. f (x; c (y)) ! f (x; s (f (y; y))) Most methods for automated termination proofs are restricted to simplification orderings <ref> [Der87, Ste95b] </ref>. Hence, these methods cannot prove termination of TRSs like the one above, as f (x; c (s (x))) can be reduced to the term f (x; s (f (x; s (c (s (x)))))) where it is embedded in.
Reference: [Toy87] <author> Y. Toyama, </author> <title> Counterexamples to the termination for the direct sum of term rewriting systems. </title> <journal> Information Processing Letters, </journal> <volume> 25 </volume> <pages> 141-143, </pages> <year> 1987. </year>
Reference-contexts: When proving termination, one benefits from modularity results that ensure termination of the whole TRS as soon as it is proved for parts of the TRS. The aim of this paper is to refine the dependency pair approach in order to allow modular termination proofs using dependency pairs. Toyama <ref> [Toy87] </ref> showed that termination is not modular for the direct sum, i.e. the partition of a TRS into subsystems with disjoint signatures. Barendregt and Klop (adapted by Toyama [Toy87]) and Drosten [Dro89] even gave counterexamples where the subsystems are both complete (confluent and terminating). <p> Toyama <ref> [Toy87] </ref> showed that termination is not modular for the direct sum, i.e. the partition of a TRS into subsystems with disjoint signatures. Barendregt and Klop (adapted by Toyama [Toy87]) and Drosten [Dro89] even gave counterexamples where the subsystems are both complete (confluent and terminating). But for TRSs of a special form termination is in fact a modular property ? Technical Report IBN 97/45, TU Darmstadt. Extended version of a paper presented at RTA '98. <p> Unlike previous methods, this technique can also prove innermost termination of non-terminating systems automatically. Similar to the preceding section, our technique for innermost termination proofs can also be used in a modular way. As an example consider the following TRS (inspired by <ref> [Toy87] </ref>): f (x; c (x); c (y)) ! f (y; y; f (y; x; y)) f (c (x); x; y) ! c (y) g (x; y) ! y By applying the first f-rule to f (x; c (x); c (g (x; c (x)))), we obtain an infinite (cycling) reduction. <p> The estimated (innermost) dependency graph in Ex. 7.2. 7.3 An Innermost Terminating System The following system combines the preceding examples with the well-known example of Toyama <ref> [Toy87] </ref>, cf.
Reference: [TKB95] <author> Y. Toyama, J. W. Klop, & H. P. Barendregt, </author> <title> Termination for direct sums of left-linear term rewriting systems. </title> <journal> Journal of the ACM, </journal> <volume> 42 </volume> <pages> 1275-1304, </pages> <year> 1995. </year>
Reference-contexts: Extended version of a paper presented at RTA '98. This work was partially supported by the Deutsche Forschungsgemein schaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'. for direct sums <ref> [Rus87, Mid89, Gra94, TKB95, SMP95] </ref>. For a survey see e.g. [Mid90, Ohl94, Gra96a]. However, a TRS often cannot be split into subsystems with disjoint signatures. Therefore, other partitions have also been considered. In many cases it is desirable to have at least constructors in common in both parts.
Reference: [Wal94] <author> C. Walther, </author> <title> On proving the termination of algorithms by machine. </title> <journal> Artificial Intelligence, </journal> <volume> 71 </volume> <pages> 101-157, </pages> <year> 1994. </year> <month> 29 </month>
Reference-contexts: Then all rules are weakly decreasing (using the precedence f.true, f.false, g 0 .c 0 ). For all other cycles one can eliminate the arguments of s, f, and if before using the rpo. 7.8 Selection Sort This TRS from <ref> [Wal94] </ref> is obviously not simply terminating. The TRS can be used to sort a list by repeatedly replacing the minimum of the list by the head of the list. It uses replace (n; m; x) to replace the leftmost occurrence of n in the list x by m.
References-found: 36

