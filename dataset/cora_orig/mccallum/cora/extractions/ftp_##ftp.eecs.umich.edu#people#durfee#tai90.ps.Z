URL: ftp://ftp.eecs.umich.edu/people/durfee/tai90.ps.Z
Refering-URL: http://ai.eecs.umich.edu/people/durfee/vita.html
Root-URL: http://www.cs.umich.edu
Email: durfee@caen.engin.umich.edu  
Phone: (313) 936-1563  
Title: Using MICE to Study Intelligent Dynamic Coordination  
Author: Edmund H. Durfee and Thomas A. Montgomery 
Note: 0 This research was sponsored, in part, by the University of Michigan under a Rackham Faculty Research Grant, and by a Bell Northern Research Postgraduate Award.  
Address: Ann Arbor, Michigan 48109  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan  
Abstract: We describe a flexible experimental testbed, called MICE, for distributed artificial intelligence research. We argue that the adoption of MICE (or some other standard testbed) by the distributed artificial intelligence community can draw together the community and permit a much greater level of exchange of ideas, formalisms, and techniques. MICE allows an experimenter to specify the constraints and characteristics of an environment in which agents are simulated to act and interact, and does not assume any particular implementation of an agent's reasoning architecture. MICE therefore provides a platform for investigating and evaluating alternative reasoning architectures and coordination mechanisms in many different simulated environments. We outline the design of MICE and illustrate its flexibility by describing simulated environments that model the coordination issues in domains such as predators chasing prey, predators attacking each other, agents fighting a fire, and diverse robots that are working together. In addition, we note that MICE's ability to simulate multi-agent environments makes it an ideal platform for studying reasoning in dynamic worlds; we can associate functionality to arbitrary objects in order to trigger changes in the environment. We conclude by discussing the status of MICE and how we are using MICE in our current research. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Benda, V. Jagannathan, and R. Dodhiawalla. </author> <title> On optimal cooperation of knowledge sources. </title> <type> Technical Report BCS-G2010-28, </type> <institution> Boeing AI Center, Boeing Computer Services, Bellevue, WA, </institution> <month> August </month> <year> 1985. </year>
Reference-contexts: MICE extends the ICE testbed developed at the University of Southern California [12] in which artificially intelligent agents interact on a two-dimensional grid <ref> [1, 10] </ref>. MICE retains this two-dimensional grid model of the world and adds a number of extensions that allow greater flexibility in the coordination issues that can be presented to the agents. <p> Predator-Prey. The inspiration for the MICE environment sprang from previous work that simulates the interactions between predators and prey in a two-dimensional grid environment <ref> [1, 10, 12] </ref>. Although different implementations have all concentrated on the 7 problem of how agents of one type (predators) can surround and capture agents of a sec-ond type (prey), the constraints and capabilities of the agents have slightly varied from one implementation to the next.
Reference: [2] <author> Paul R. Cohen, Michael L. Greenberg, David M. Hart, and Adele E. Howe. </author> <title> Trial by fire: Understanding the design requirements for agents in complex environments. </title> <journal> AI Magazine, </journal> <volume> 10(3) </volume> <pages> 32-48, </pages> <month> Fall </month> <year> 1989. </year> <month> 11 </month>
Reference-contexts: Forest-Fire Fighting. MICE can be used to simulate the coordination issues in a forest-fire fighting scenario <ref> [2] </ref>. We can define fire agents who move in certain patterns, and we can specify predicates that simulate fire moving downwind and burning differently in areas with different groundcover. If unchecked for a certain amount of time, a fire agent creates a copy of itself at an adjacent location.
Reference: [3] <author> Susan E. Conry, Robert A. Meyer, and Victor R. Lesser. </author> <title> Multistage negotiation in distributed planning. </title> <editor> In Alan H. Bond and Les Gasser, editors, </editor> <booktitle> Readings in Distributed Artificial Intelligence, </booktitle> <pages> pages 367-384. </pages> <publisher> Morgan Kaufman, </publisher> <year> 1988. </year>
Reference-contexts: Holding the coordination technique and the environment fixed, some researchers have developed mechanisms for intelligent agents that elicit the desired coordination behavior in the given environment <ref> [15, 5, 13, 3, 19, 16, 7] </ref>. Less research has concentrated on investigations where a fixed technique is generalized to variable application environments (such as the Contract-Net protocol [18]), or where agents can employ a variety of techniques in a fixed environment (such as partial global planning [6]).
Reference: [4] <author> Daniel D. Corkill, Kevin Q. Gallagher, and Kelly E. Murray. </author> <title> GBB: A generic blackboard development system. </title> <booktitle> In Proceedings of the Fifth National Conference on Artificial Intelligence, </booktitle> <pages> pages 1008-1014, </pages> <address> Philadelphia, Pennsylvania, </address> <month> August </month> <year> 1986. </year> <note> (Also published in Blackboard Systems, </note> <editor> Robert S. Engelmore and Anthony Morgan, editors, </editor> <address> pages 503-518, </address> <publisher> Addison-Wesley, 1988.). </publisher>
Reference-contexts: Its adoption by the DAI research community would have many benefits including a greater exchange of ideas, formalisms and techniques. Researchers would be able to implement their ideas in their favorite system (such as GBB <ref> [4] </ref> or Soar [14]) and execute them in a simulation environment that is readily available to others. To illustrate how we use MICE to simulate particular multi-agent environments and populate these with agents, we describe several simulations that we have implemented in MICE. Predator-Prey.
Reference: [5] <author> Daniel D. Corkill and Victor R. Lesser. </author> <title> The use of meta-level control for coordination in a distributed problem solving network. </title> <booktitle> In Proceedings of the Eighth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 748-756, </pages> <institution> Karlsruhe, Federal Republic of Germany, </institution> <month> August </month> <year> 1983. </year> <note> (Also appeared in Computer Architectures for Artificial Intelligence Applications, </note> <editor> Benjamin W. Wah and G.-J. Li, editors, </editor> <publisher> IEEE Computer Society Press, </publisher> <pages> pages 507-515, </pages> <year> 1986). </year>
Reference-contexts: Holding the coordination technique and the environment fixed, some researchers have developed mechanisms for intelligent agents that elicit the desired coordination behavior in the given environment <ref> [15, 5, 13, 3, 19, 16, 7] </ref>. Less research has concentrated on investigations where a fixed technique is generalized to variable application environments (such as the Contract-Net protocol [18]), or where agents can employ a variety of techniques in a fixed environment (such as partial global planning [6]).
Reference: [6] <author> Edmund H. Durfee. </author> <title> Coordination of Distributed Problem Solvers. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1988. </year>
Reference-contexts: Less research has concentrated on investigations where a fixed technique is generalized to variable application environments (such as the Contract-Net protocol [18]), or where agents can employ a variety of techniques in a fixed environment (such as partial global planning <ref> [6] </ref>). Coordination Technique fixed variable Organizational Structuring fixed Multistage Negotiation Partial Global Planning Environment Multiagent Planning Type etc. variable Contract-Net Research Using MICE Table 1: Examples of Systems Classified by Environment Type and Coordination Technique.
Reference: [7] <author> Edmund H. Durfee, Victor R. Lesser, and Daniel D. Corkill. </author> <title> Cooperation through communication in a distributed problem solving network. </title> <editor> In Michael N. Huhns, editor, </editor> <booktitle> Distributed Artificial Intelligence, Research Notes in Artificial Intelligence, chapter 2, </booktitle> <pages> pages 29-58. </pages> <publisher> Pitman, </publisher> <year> 1987. </year> <editor> (Also in S. Robertson, W. Zachary, and J. Black (eds.), </editor> <booktitle> Cognition, Computing, and Cooperation, </booktitle> <publisher> Ablex 1990.). </publisher>
Reference-contexts: Holding the coordination technique and the environment fixed, some researchers have developed mechanisms for intelligent agents that elicit the desired coordination behavior in the given environment <ref> [15, 5, 13, 3, 19, 16, 7] </ref>. Less research has concentrated on investigations where a fixed technique is generalized to variable application environments (such as the Contract-Net protocol [18]), or where agents can employ a variety of techniques in a fixed environment (such as partial global planning [6]).
Reference: [8] <author> Edmund H. Durfee and Thomas A. Montgomery. </author> <title> A hierarchical protocol for coordinating mul-tiagent behaviors. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 86-93, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Insights about the transferability of coordination mechanisms across domains are much more readily developed when it is easier to move between domains and collect observations. MICE provides the touchstone with which to evaluate alternative coordination mechanisms. We have been using to evaluate a hierarchical protocol for coordination <ref> [8] </ref> and to study dynamic coordination in robotics tasks [17] The current version of MICE runs in Common LISP on Texas Instruments Explorers and in Allegro Common LISP on Apollo workstations. We are migrating toward using X-Windows for our graphic display and CLOS internally.
Reference: [9] <author> Lee D. Erman, Frederick Hayes-Roth, Victor R. Lesser, and D. Raj Reddy. </author> <title> The Hearsay-II speech-understanding system: Integrating knowledge to resolve uncertainty. </title> <journal> Computing Surveys, </journal> <volume> 12(2) </volume> <pages> 213-253, </pages> <month> June </month> <year> 1980. </year>
Reference-contexts: The increased latitude in how MICE agents can be implemented places a greater burden on the agents' developers, but allows experimentation with widely different architectures, including blackboard systems <ref> [9] </ref> and Soar [14]. Because MICE specifies only how agents interact indirectly through the environment, the agents' developers are free to specify how agents interact directly through communication (although, as we shall see in Section 5, the environment can be simulated to impact communication as well).
Reference: [10] <author> Robert F. Franklin and Laurel A. Harmon. </author> <title> Elements of cooperative behavior. </title> <type> Technical report, </type> <institution> Environmental Research Institute of Michigan, </institution> <address> Ann Arbor, MI 48107, </address> <month> August </month> <year> 1987. </year>
Reference-contexts: MICE extends the ICE testbed developed at the University of Southern California [12] in which artificially intelligent agents interact on a two-dimensional grid <ref> [1, 10] </ref>. MICE retains this two-dimensional grid model of the world and adds a number of extensions that allow greater flexibility in the coordination issues that can be presented to the agents. <p> Predator-Prey. The inspiration for the MICE environment sprang from previous work that simulates the interactions between predators and prey in a two-dimensional grid environment <ref> [1, 10, 12] </ref>. Although different implementations have all concentrated on the 7 problem of how agents of one type (predators) can surround and capture agents of a sec-ond type (prey), the constraints and capabilities of the agents have slightly varied from one implementation to the next.
Reference: [11] <author> Les Gasser, Carl Braganza, and Nava Herman. MACE: </author> <title> A flexible testbed for distributed AI research. </title> <editor> In Michael N. Huhns, editor, </editor> <booktitle> Distributed Artificial Intelligence, Research Notes in Artificial Intelligence, chapter 5, </booktitle> <pages> pages 119-152. </pages> <publisher> Pitman, </publisher> <year> 1987. </year>
Reference-contexts: For example, the MACE <ref> [11] </ref> testbed provides a language for defining both agents and their environments, and provides many facilities for monitoring, error handling, and interacting with the user.
Reference: [12] <author> Les Gasser and Nicolas Rouquette. </author> <title> Representing and using organizational knowledge in distributed AI systems. </title> <booktitle> In Proceedings of the 1988 Distributed AI Workshop, </booktitle> <month> May </month> <year> 1988. </year>
Reference-contexts: MICE extends the ICE testbed developed at the University of Southern California <ref> [12] </ref> in which artificially intelligent agents interact on a two-dimensional grid [1, 10]. MICE retains this two-dimensional grid model of the world and adds a number of extensions that allow greater flexibility in the coordination issues that can be presented to the agents. <p> Predator-Prey. The inspiration for the MICE environment sprang from previous work that simulates the interactions between predators and prey in a two-dimensional grid environment <ref> [1, 10, 12] </ref>. Although different implementations have all concentrated on the 7 problem of how agents of one type (predators) can surround and capture agents of a sec-ond type (prey), the constraints and capabilities of the agents have slightly varied from one implementation to the next.
Reference: [13] <author> Michael Georgeff. </author> <title> A theory of action for multiagent planning. </title> <booktitle> In Proceedings of the Fourth National Conference on Artificial Intelligence, </booktitle> <pages> pages 121-125, </pages> <address> Austin, Texas, </address> <month> August </month> <year> 1984. </year> <note> (Also published in Readings in Distributed Artificial Intelligence, </note> <editor> Alan H. Bond and Les Gasser, editors, </editor> <address> pages 205-209, </address> <publisher> Morgan Kaufmann, 1988.). </publisher>
Reference-contexts: Holding the coordination technique and the environment fixed, some researchers have developed mechanisms for intelligent agents that elicit the desired coordination behavior in the given environment <ref> [15, 5, 13, 3, 19, 16, 7] </ref>. Less research has concentrated on investigations where a fixed technique is generalized to variable application environments (such as the Contract-Net protocol [18]), or where agents can employ a variety of techniques in a fixed environment (such as partial global planning [6]).
Reference: [14] <author> John E. Laird, Allen Newell, and Paul S. Rosenbloom. </author> <title> SOAR: An architecture for general intelligence. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> pages 1-64, </pages> <year> 1987. </year> <month> 12 </month>
Reference-contexts: The increased latitude in how MICE agents can be implemented places a greater burden on the agents' developers, but allows experimentation with widely different architectures, including blackboard systems [9] and Soar <ref> [14] </ref>. Because MICE specifies only how agents interact indirectly through the environment, the agents' developers are free to specify how agents interact directly through communication (although, as we shall see in Section 5, the environment can be simulated to impact communication as well). <p> Its adoption by the DAI research community would have many benefits including a greater exchange of ideas, formalisms and techniques. Researchers would be able to implement their ideas in their favorite system (such as GBB [4] or Soar <ref> [14] </ref>) and execute them in a simulation environment that is readily available to others. To illustrate how we use MICE to simulate particular multi-agent environments and populate these with agents, we describe several simulations that we have implemented in MICE. Predator-Prey.
Reference: [15] <author> Victor R. Lesser and Daniel D. Corkill. </author> <title> Functionally accurate, cooperative distributed systems. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> SMC-11(1):81-96, </volume> <month> January </month> <year> 1981. </year>
Reference-contexts: Holding the coordination technique and the environment fixed, some researchers have developed mechanisms for intelligent agents that elicit the desired coordination behavior in the given environment <ref> [15, 5, 13, 3, 19, 16, 7] </ref>. Less research has concentrated on investigations where a fixed technique is generalized to variable application environments (such as the Contract-Net protocol [18]), or where agents can employ a variety of techniques in a fixed environment (such as partial global planning [6]).
Reference: [16] <author> Cindy L. Mason and Rowland R. Johnson. DATMS: </author> <title> A framework for distributed assumption based reasoning. </title> <editor> In Les Gasser and Michael N. Huhns, editors, </editor> <booktitle> Distributed Artificial Intelligence, volume 2 of Research Notes in Artificial Intelligence, </booktitle> <pages> pages 293-317. </pages> <publisher> Pitman, </publisher> <year> 1989. </year>
Reference-contexts: Holding the coordination technique and the environment fixed, some researchers have developed mechanisms for intelligent agents that elicit the desired coordination behavior in the given environment <ref> [15, 5, 13, 3, 19, 16, 7] </ref>. Less research has concentrated on investigations where a fixed technique is generalized to variable application environments (such as the Contract-Net protocol [18]), or where agents can employ a variety of techniques in a fixed environment (such as partial global planning [6]).
Reference: [17] <author> David J. Musliner, Edmund H. Durfee, and Kang G. Shin. </author> <title> Execution monitoring and recovery planning with time. </title> <booktitle> In Proceedings of the Seventh IEEE International Conference on AI Applications, </booktitle> <pages> pages 385-388, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: MICE provides the touchstone with which to evaluate alternative coordination mechanisms. We have been using to evaluate a hierarchical protocol for coordination [8] and to study dynamic coordination in robotics tasks <ref> [17] </ref> The current version of MICE runs in Common LISP on Texas Instruments Explorers and in Allegro Common LISP on Apollo workstations. We are migrating toward using X-Windows for our graphic display and CLOS internally.
Reference: [18] <author> Reid G. Smith. </author> <title> The contract net protocol: High-level communication and control in a distributed problem solver. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-29(12):1104-1113, </volume> <month> December </month> <year> 1980. </year>
Reference-contexts: Less research has concentrated on investigations where a fixed technique is generalized to variable application environments (such as the Contract-Net protocol <ref> [18] </ref>), or where agents can employ a variety of techniques in a fixed environment (such as partial global planning [6]).
Reference: [19] <author> Katia P. Sycara. </author> <title> Multi-agent compromise via negotiation. </title> <booktitle> In Proceedings of the 1988 Distributed AI Workshop, </booktitle> <month> May </month> <year> 1988. </year> <month> 13 </month>
Reference-contexts: Holding the coordination technique and the environment fixed, some researchers have developed mechanisms for intelligent agents that elicit the desired coordination behavior in the given environment <ref> [15, 5, 13, 3, 19, 16, 7] </ref>. Less research has concentrated on investigations where a fixed technique is generalized to variable application environments (such as the Contract-Net protocol [18]), or where agents can employ a variety of techniques in a fixed environment (such as partial global planning [6]).
References-found: 19

