URL: http://www.cs.vt.edu/~chitra/docs/93cpeALCG/93cpeALCG-text.ps
Refering-URL: http://www.cs.vt.edu/~chitra/docs/93cpeALCG/index.html
Root-URL: http://www.cs.vt.edu
Title: Beyond Software Performance Visualization  
Author: Marc Abrams Timothy J. Lee Horacio T. Cadiz Krishna Ganugapati 
Keyword: CR categories: C.4 [Performance of Systems]: Modeling techniques, D.2.8 [Software]: Metrics Performance measures, D.1.3 [Programming Techniques]: Concurrent programming Keywords: Parallel software, empirical performance modeling, visualization, traces  
Note: (Version sent to John Wiley Sons, Ltd.)  This work was supported in part by National Science Foundation grant NCR-9211342 and a summer 1993 grant from the U.S. Navy NSWC administered by the VPI&SU Systems Research Center  
Address: VA 24061-0106  
Affiliation: Virginia Polytechnic Institute and State University Department of Computer Science Blacksburg,  
Email: abrams@cs.vt.edu  
Phone: (703) 231-8457  
Date: 18 January 1995  
Abstract: Performance visualization tools of the last decade have yielded new insights into the behavior of sequential, parallel, and distributed programs. However, they have three inherent limitations: (1) They only display what happened in one execution of a program. (This is dangerous when analyzing concurrent applications, which are prone to non-deterministic behavior.) (2) A human uses one or more bandwidth-limited senses with a visualization tool. (This limits the scalability of a visualization tool.) (3) The relationship of "interesting" program events are often separated in time by other events; thus discerning time dependent behavior often hinges on finding the "right" visualization - a possibly time-consuming activity. Chitra93 complements visualization systems, while alleviating these limitations. Chitra93 analyzes a set (or ensemble) of traces by combining the visualization of a few traces with a statistical analysis of the entire ensemble (overcoming (1)). Chitra93 reduces the ensemble to empirical models that capture the time dependent relationships of "interesting" program events through application, programming language, and computer architecture independent analysis techniques (addressing (2) and (3)). Chitra93 incorporates: transforms, such as aggregation, that simplify the ensemble and reduce the state space size of the models generated; a user interface that allows certain transforms to be selected by editing the visualization with a mouse; homogeneity tests that allow partitioning of an ensemble; an efficient semi-Markov model generation algorithm whose computation time is linear in the sum of the lengths of the traces comprising the ensemble; and a CHAID-based model that can fathom non-Markovian relationships among transitions in the traces. The use of Chitra93 is demonstrated by partitioning ten parallel database traces with nearly 8,000 states into two homogeneous subsets, each modeled by an irreducible, periodic, and hierarchical stochastic process with as few as four states. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abrams. Chitra93: </author> <title> A System to Model Ensembles of Trace Data | User Manual. </title> <institution> Computer Sci. Dept., Virginia Tech, Blacksburg, </institution> <address> VA 24061-0106, </address> <month> Aug. </month> <year> 1994. </year> <note> Available from World Wide Web location http://info.cs.vt.edu/chitra. </note>
Reference-contexts: information that needs to be communicated to a human, thereby operating within the fixed input bandwidth of human senses; and (3) find a suitable representation for time dependent behavior that applies to any application program, programming language, or computer architecture. (Rover and Waheed [11] describe alternate approaches to (3).) Chitra93 <ref> [1] </ref>, based on our earlier system Chitra91 [3], combines visualization, trace transformation, and model generation modules into an integrated system controlled through a Motif graphical user interface.
Reference: [2] <author> M. Abrams, A. Batongbacal, R. Ribler, and D. Vazirani. Chitra94: </author> <title> A tool to dynamically characterize ensembles of traces for input data modeling and output analysis. </title> <type> Technical Report TR 94-21, </type> <institution> Computer Sci. Dept., Virginia Tech, Blacksburg, </institution> <address> VA 24061-0106, </address> <month> June </month> <year> 1994. </year> <note> Available from World Wide Web location http://info.cs.vt.edu/chitra. </note>
Reference-contexts: However, some problems require analysis of tens or hundreds of traces that each are tens or even hundreds of megabytes large. For this reason, we are currently implementing a new generation of Chitra, called Chitra94 <ref> [2] </ref>. <p> However, software performance analysis tools using different user interface metaphors are emerging, such as Pablo's use of a data flow graph [10]. Thus, we are reimplementing Chitra93 as a tool set consisting of a collection of small programs that communicate through files <ref> [2] </ref>, to permit integration into other tools, such as Pablo.
Reference: [3] <author> M. Abrams, N. Doraswamy, and A. Mathur. Chitra: </author> <title> Visual analysis of parallel and distributed programs in the time, event, and frequency domain. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 3(6) </volume> <pages> 672-685, </pages> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: a human, thereby operating within the fixed input bandwidth of human senses; and (3) find a suitable representation for time dependent behavior that applies to any application program, programming language, or computer architecture. (Rover and Waheed [11] describe alternate approaches to (3).) Chitra93 [1], based on our earlier system Chitra91 <ref> [3] </ref>, combines visualization, trace transformation, and model generation modules into an integrated system controlled through a Motif graphical user interface. <p> Step-D: Construct one model fitting each sub-ensemble. This paper addresses building models through the four steps above. Using models for performance problem diagnosis is illustrated in <ref> [3] </ref>. 2 Example: Parallel Database Chitra93 will be illustrated in x3 using a parallel database with record locking. The database consists of 28 records, each with two keys: a gender key (two valued), and a geographic region key (14 valued). <p> Only aggregation is used and hence explained in this paper. Applications of clipping and projection to a single trace file are described in <ref> [3] </ref>. Clipping and projection are applied to an ensemble simply by applying them independently to all traces in the ensemble. Aggregation transforms replace each occurrence of certain subsequences of model states in a model state sequence by a single state.
Reference: [4] <author> B. Bershad, E. Lazowska, H. Levy, and D. Wagner. </author> <title> Presto: A system for object-oriented parallel programming. </title> <journal> Software Practice and Experience, </journal> <volume> 18(8) </volume> <pages> 713-732, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: The database is implemented as a C++ program using the Presto 0.4 thread package <ref> [4] </ref> and running on sixteen 80386-based processors of a Sequent Symmetry multiprocessor computer. Each lock is implemented as a (non-preemptive) spin-lock associated with one shared memory address.
Reference: [5] <author> U. N. Bhat. </author> <title> Elements of Applied Stochastic Processes. </title> <publisher> John Wiley, </publisher> <address> New York, 2nd edition, </address> <year> 1984. </year>
Reference-contexts: interval bounded by the first and last timestamp in a particular trace file in E v , then X E v (t) represents the trace file as the realization of a stochastic process. (A stochastic process is a collection of random variables fX (t)g indexed by a continuous parameter t <ref> [5, pp. 9] </ref>.) X E v is subscripted by E v because Chitra93 defines a different mapping for each ensemble instance, and modifies the mapping whenever a new ensemble version is created. Subscripts are dropped when the ensemble and version are clear from context. <p> Chitra93 views such traces as a set of realizations of a stochastic process X E v (t). Chitra93 uses E v to infer X E v (t). Chitra93 uses as its stochastic process a time invariant, continuous time semi-Markov chain <ref> [5, pp. 290-294] </ref>. (A semi-Markov chain is a stochastic process in which (1) at the time of a transition the probability distribution of the next state is dependent only on the current state and (2) the random variable representing times between state transitions follows an arbitrary distribution.) The state space of
Reference: [6] <author> D. Biggs, B. de Ville, and E. Suen. </author> <title> A method of choosing multiway partitions for classification and decision trees. </title> <journal> J. of App. Stat., </journal> <volume> 18(1) </volume> <pages> 49-62, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Abrams et al: Beyond Software Performance Visualization | 18 January 1995 20 Chitra93 implements the CHAID method, but employs a slightly different significance test based on the Bonferroni inequality recommended by Biggs, DeVille, and Suen <ref> [6] </ref>.
Reference: [7] <editor> G. Haring and G. Kotsis, editors. </editor> <booktitle> Performance Measurement and Visualization of Parallel Systems, volume 7 of Advances in Parallel Computing. </booktitle> <publisher> North-Holland, </publisher> <address> Moravany, Czechoslovakia, </address> <year> 1993. </year> <booktitle> Proc. of the Workshop on Performance Measurement and Visualization, </booktitle> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: Thus Chitra93 uses visualization only as a window to examine pieces of a massive data set. Visualization systems of the last ten years (e.g., <ref> [7, 12] </ref>) have yielded much insight into time dependent program behavior. Performance visualization systems are becoming popular tools for commercial parallel processors. Yet visualization systems have failed to achieve a breakthrough in helping people write concurrent programs. We attribute this failure to three inherent limitations: 1.
Reference: [8] <author> G. V. Kass. </author> <title> An exploratory technique for investigating large quantities of categorical data. </title> <journal> Applied Statistics, </journal> <volume> 29(2) </volume> <pages> 119-127, </pages> <year> 1980. </year>
Reference-contexts: a composite view of whether elements of E have the same transitions, and "Kruskal-Wallis" [KW], displaying the result of testing the hypothesis of homogeneity of the means of occupancy time in one model state), and models ("Semi-Markov," displaying a semi-Markov model of E , and "Chi-squared automatic interaction detection [CHAID]-based <ref> [8] </ref>," displaying the best predicting past or future position for each state in E). To open a view, one selects an ensemble in the root window list box described in x3.1.1 and one of the nine views from the "View" menu.
Reference: [9] <author> L. Ott. </author> <title> An Introduction to Statistical Methods and Data Analysis. </title> <address> PWS-Kent, Boston, </address> <note> 3rd edition, </note> <year> 1988. </year>
Reference-contexts: the prevalence of entries 40% and 60%. 3.3.2 Method 2: Analysis of Ranks Chitra93 contains a second homogeneity test that is a classical statistical test of the hypothesis that all samples of the occupancy time of one state in a set of traces are homogeneous: the Kruskall-Wallis rank sum test <ref> [9, pp. 422-426] </ref>, which is an analysis of ranks test. This nonparametric test was selected because it does not require any assumption about the distribution underlying the data. <p> and then selecting to view all traces in the ensemble in the "Combined" mode, the user is then presented with a dialog box (not shown) requiring selection of one state (e.g., L 2 A 14 ) to test and specifies a significance level (ff, the probability of a Type I <ref> [9, p. 138] </ref> error [rejecting the hypothesis when actually true], set here to 5%). The resulting window (Fig. 8) contains two panes. The top pane lists statistics about the occupancy time samples of state (L 2 A 14 ) in each of the ten traces. <p> Let d (respectively, c) denote the number of values of the dependent (respectively, independent) variable. The partitioning procedure first constructs one or more contingency tables <ref> [9, pp. 249-253] </ref>, each of dimension c fi d, one for each vector component that represents an independent variable. In a contingency table, each row (column) represents one independent (dependent) variable value.
Reference: [10] <author> D. A. Reed, R. A. Aydt, T. M. Madhyastha, R. J. Noe, K. A. Shields, and B. W. Schwartz. </author> <title> The Pablo performance analysis environment. </title> <institution> Dept. of Comp. Sci., Univ. of IL, </institution> <year> 1992. </year>
Reference-contexts: Insights into time dependent program behavior often are apparent only if the "right" presentation (e.g., visualization, animation, or sonification) of the trace data is constructed. For example, the Pablo designers discovered an old program bug in a trace file visualized many times only after adding a particular sonification <ref> [10] </ref>. Often "interesting" events may be separated in time by many other events. Unfortunately, deriving the right presentation can be labor intensive, and sometimes the labor can be amortized only over a few programs. <p> A bad decision just increased the computation time to obtain the models. Chitra93 is designed as a stand-alone tool whose interface is similar to other GUI-based statistical packages. However, software performance analysis tools using different user interface metaphors are emerging, such as Pablo's use of a data flow graph <ref> [10] </ref>. Thus, we are reimplementing Chitra93 as a tool set consisting of a collection of small programs that communicate through files [2], to permit integration into other tools, such as Pablo.
Reference: [11] <author> D. T. Rover and A. Waheed. </author> <title> Multiple-domain analysis methods. </title> <booktitle> In ACM/ONR Workshop on Parallel Debugging and Performance, proceedings appeared in ACM SIGPLAN Notices, </booktitle> <volume> 28(12), </volume> <month> Dec. </month> <year> 1993, </year> <pages> pages 53-63, </pages> <address> San Diego, </address> <month> May </month> <year> 1993. </year> <note> ACM. Abrams et al: Beyond Software Performance Visualization | 18 January 1995 26 </note>
Reference-contexts: files; (2) sharply reduce the amount of information that needs to be communicated to a human, thereby operating within the fixed input bandwidth of human senses; and (3) find a suitable representation for time dependent behavior that applies to any application program, programming language, or computer architecture. (Rover and Waheed <ref> [11] </ref> describe alternate approaches to (3).) Chitra93 [1], based on our earlier system Chitra91 [3], combines visualization, trace transformation, and model generation modules into an integrated system controlled through a Motif graphical user interface.
Reference: [12] <author> M. Simmons and R. Koskela, </author> <title> editors. Performance Instrumentation and Visualization. </title> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1990. </year> <booktitle> Based on the Workshop on Parallel Computer Systems: Instrumentation and Visualization, </booktitle> <month> May </month> <year> 1989. </year>
Reference-contexts: Thus Chitra93 uses visualization only as a window to examine pieces of a massive data set. Visualization systems of the last ten years (e.g., <ref> [7, 12] </ref>) have yielded much insight into time dependent program behavior. Performance visualization systems are becoming popular tools for commercial parallel processors. Yet visualization systems have failed to achieve a breakthrough in helping people write concurrent programs. We attribute this failure to three inherent limitations: 1.
References-found: 12

