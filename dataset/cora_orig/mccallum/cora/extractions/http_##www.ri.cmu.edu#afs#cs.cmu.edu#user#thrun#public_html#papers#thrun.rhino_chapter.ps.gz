URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/thrun/public_html/papers/thrun.rhino_chapter.ps.gz
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/thrun/public_html/papers/thrun.rhino_chapter.html
Root-URL: 
Title: To appear in: AI-based Mobile Robots: Case studies of successful robot systems Map Learning and
Author: Sebastian Thrun Arno B ucken Wolfram Burgard Dieter Fox Thorsten Frohlinghaus Daniel Hennig Thomas Hofmann Michael Krell Timo Schmidt 
Address: D53117 Bonn, Germany  Pittsburgh, PA 15213  
Affiliation: Institut fur Informatik III Universitat Bonn  Computer Science Department Carnegie Mellon University  
Note: MIT Press, D. Kortenkamp, R.P. Bonasso, and R.R. Murphy(eds), invited paper  
Abstract: This chapter surveys basic methods for learning maps and high speed autonomous navigation for indoor mobile robots. The methods have been developed in our lab over the past few years, and most of them have been tested thoroughly in various indoor environments. The chapter is targeted towards researchers and engineers who attempt to build reliable mobile robot navigation software.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.H. Ballard and C.M. Brown. </author> <title> Computer Vision. </title> <publisher> Prentice-Hall, </publisher> <year> 1982. </year>
Reference-contexts: In our implementation, training examples are generated with a mobile robot simulator. Once trained, the network generates values in <ref> [0; 1] </ref> that can be interpreted as probability for occupancy. Figure 2 shows three examples of sonar scans (top row, bird's eye view) along with their neural network interpretation (bottom row). <p> Edge Detection. The subsampled image is convolved with a gradient operator to detect vertically and horizontally oriented edges. 3. Pre-segmentation. A fast, pixelbased image segmentation evaluates the local contrast between pixels and links them together if the contrast is below a certain threshold 0 <ref> [1] </ref>. This pre-segmentation usually results in an oversegmented image with many small region patches. 4. Segmentation. Neighboring regions are merged [49], if the mean contrast along their common border is below a threshold t , and if their average color differs by less than a second threshold, t .
Reference: [2] <author> R. E. Bellman. </author> <title> Dynamic Programming. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1957. </year>
Reference-contexts: The minimum-cost path is computed using a modified version of value iteration, a popular dynamic programming algorithm <ref> [2, 24] </ref>: 1. Initialization. The grid cell that contains the target location is initialized with 0, all others with 1: V x;y 0; if hx; yi target cell 1; otherwise 2. Update loop.
Reference: [3] <author> M. Betke and L. Gurvits. </author> <title> Mobile robot localization using landmarks. </title> <type> Technical Report SCR-94-TR-474, </type> <institution> Siemens Corporate Research, Pinceton, </institution> <month> December </month> <year> 1993. </year> <note> will also appear in the IEEE Transactions on Robotics and Automation. </note>
Reference-contexts: Figure 8). Once the global wall orientation has been estimated, it is used to readjust the robot's orientation based on future sonar measurements. See [46] for more details. * Landmarks. Landmarks are used in various approaches to mobile robot localization (see e.g., <ref> [3, 25, 32] </ref> and references in [44]). We recently have begun to explore mechanisms that enable a robot to select its own landmarks, based on sonar and camera input.
Reference: [4] <author> J. Borenstein and Koren. Y. </author> <title> The vector field histogram fast obstacle avoidance for mobile robots. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> 7(3):278288, </volume> <month> June </month> <year> 1991. </year>
Reference-contexts: This section describes an approach that integrates grid-based and topological representations. Grid-based approaches, such as those proposed by Moravec/Elfes [31] and Borenstein/Koren <ref> [4] </ref> and many others, represent environments by evenly-spaced grids. Each grid cell contains a value which indicates the presence or absence of an obstacle in the corresponding region of the environment. Topological approaches, such as those described in [15, 25, 26, 28, 35, 47], represent robot environments by graphs.
Reference: [5] <author> R. A. Brooks. </author> <title> A robot that walks; emergent behaviors from a carefully evolved network. </title> <booktitle> Neural Computation, </booktitle> <address> 1(2):253, </address> <year> 1989. </year>
Reference-contexts: As this chapter documents, we have found the map-based paradigm to be surprisingly powerful and reliable. While to date, there exists a variety of successful architecture for mobile robot navigation (such as Brooks's subsumption architecture <ref> [5] </ref>) each of which is characterized by different advantages and disadvantages, we believe that the map-based paradigm is particularly well-suited for fully autonomous robots that are to perform a multitude of tasks in large indoor environments.
Reference: [6] <author> J. Buhmann, W. Burgard, A. B. Cremers, D. Fox, T. Hofmann, F. Schneider, J. Strikos, and S. Thrun. </author> <title> The mobile robot Rhino. </title> <journal> AI Magazine, </journal> <volume> 16(1), </volume> <year> 1995. </year>
Reference-contexts: Notice that the complete exploration run shown here took less than 15 minutes. The robot moved constantly and frequently reached a velocity of 80 to 90 cm/sec (see also <ref> [6, 19] </ref>). the cumulative costs V for moving towards the nearest unexplored point. The value function indicates the robot would continue exploration by moving straight ahead. * Multi-agent exploration. Since value iteration generates values for all grid-cells, it can easily be used for collaborative multi-agent exploration. <p> In various experiments, we found this algorithm to reliably detect small, can-size obstacles in our university building. The reader may notice that this algorithm has successfully been used for detecting and grasping free-standing objects on the floor <ref> [6] </ref>, as demonstrated at the 1994 AAAI mobile robot competition [42]. 5 Example Application The RHINO-software described in this paper has served as a low-level platform for various indoor mobile robot applications. A complete coverage of our current applications is beyond the scope of this chapter.
Reference: [7] <author> W. Burgard, D. Fox, D. Hennig, and T. Schmidt. </author> <title> Estimating the absolute position of a mobile robot using position probability grids. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <address> Menlo Park, </address> <month> August </month> <year> 1996. </year> <booktitle> AAAI, </booktitle> <publisher> AAAI Press/MIT Press. </publisher>
Reference-contexts: Thus, the probability Prob (s (t) jl) is assumed to be proportional to the correlation of both maps if the robot were at l. See [46] for more details. * Sonar modeling. Another source of information for localization, which we have begun to explore more recently <ref> [7] </ref>, is obtained using a simplistic model of sonar sensors. In essence, it is assumed that each grid cell in the global map possesses a certain probability of being detected by a sonar sensor. <p> assumes that with probability Prob (detect i;x;y ) the i-th sonar sensor detects an obstacle at hx; yi (where Prob (detect i;x;y ) is a monotonic function of Prob (occ x;y ), which is 0 if hx; yi does not lie in the perceptual field of the i-th sensor, see <ref> [7] </ref>). For simplicity, we also assume that the detection probability is independent for different values of i, x, and y. Sonar sensors return the distance to the nearest obstacle.
Reference: [8] <author> W. Burgard, D. Fox, D. Hennig, and T. Schmidt. </author> <title> Position tracking with position probability grids. </title> <booktitle> In Proceedings of the 1st Euromicro Workshop on Advanced Mobile Robots. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: Notice the approach deals adequately with uncertainty and ambiguities, as demonstrated by the empirical examples. The global localization approach has also given very reliable results for real-time position tracking <ref> [8] </ref>. However, since this approach estimates the robot's location in a previously learned map, it is not applicable during exploration and map learning. 3.3 Position Tracking When Learning Maps When learning maps, the initial location is known by definition (e.g., is defined to be origin of the global coordinate system).
Reference: [9] <author> L. Chrisman. </author> <title> Reinforcement learning with perceptual aliasing: The perceptual distinction approach. </title> <booktitle> In Proceedings of 1992 AAAI Conference, </booktitle> <address> Menlo Park, CA, July 1992. </address> <publisher> AAAI Press / The MIT Press. </publisher>
Reference-contexts: Since in general it is difficult to specify what constitutes the state of the environment, methods that can discover hidden state and model it from data are clearly desirable (see e.g., <ref> [9, 29, 36] </ref>). * Other sensors. Integrating sensors other than sonar and cameras into mobile robot navigation is an important problem, since different sensors have different perceptual characteristics. In principle, the general mechanisms for mapping, localization and navigation are not specialized to a particular type sensor.
Reference: [10] <author> K.L. Chung. </author> <title> Markov chains with stationary transition probabilities. </title> <publisher> Springer Publisher, </publisher> <address> Berlin, </address> <year> 1960. </year>
Reference-contexts: More specifically, given the true occupancy of a grid cell hx; yi, the conditional probability Prob (s (t) jocc x;y ) must be assumed to be independent of Prob (s (t 0 ) jocc x;y ) if t 6= t 0 . This assumption (a Markov assumption <ref> [10] </ref>) is commonly made in approaches to building occupancy grids.
Reference: [11] <author> J. Crowley. </author> <title> World modeling and position estimation for a mobile robot using ultrasonic ranging. </title> <booktitle> In Proceedings of the 1989 IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 674680, </pages> <address> Scottsdale, AZ, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: A final source information, which can be used to correct rotational errors, is the global wall orientation <ref> [11, 22] </ref>. This approach rests on the restrictive assumption that walls are either parallel or orthogonal to each other, or differ by more than 15 degrees from these canonical wall directions.
Reference: [12] <author> T. L. Dean and M. Boddy. </author> <title> An analysis of time-dependent planning. </title> <booktitle> In Proceeding of Seventh National Conference on Artificial Intelligence AAAI-92, </booktitle> <pages> pages 4954, </pages> <address> Menlo Park, CA, 1988. </address> <publisher> AAAI, AAAI Press/The MIT Press. </publisher>
Reference-contexts: All communication between modules is asynchronous. There is no central clock, and no central process controls all other processes. * Any-time algorithms. Any-time algorithms are able to make decisions regardless of the time spent for computation <ref> [12] </ref>. Whenever possible, any-time algorithms are employed to ensure that the robot operates in real-time. * Hybrid architecture. Fast, reactive mechanisms are integrated with computationally intense, deliberative modules. * Models. Models, such as the two-dimensional maps described below, are used at all levels of the architecture. <p> Notice that the bounding box bears similarity to prioritized sweeping [30]. Value iteration is a very general procedure, which has several properties that make it attractive for real-time mobile robot navigation: * Any-time algorithm. As mentioned above, value iteration can be understood as an any-time planner <ref> [12] </ref>. Consequently, value iteration allows the robot to move in real-time, even though some of its motion commands might be sub-optimal. * Full exception handling. Value iteration pre-plans for arbitrary robot locations.
Reference: [13] <author> R.O. Duda and P.E. Hart. </author> <title> Pattern classification and scene analysis. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1973. </year>
Reference-contexts: During recognition, a region is considered an obstacleand passed to the collision avoidance moduleif its Mahalanobis distance to one of the pre-trained obstacles models exceeds a certain threshold. The Mahalanobis distance corresponds to the probability of observing a feature vector assuming Normal distribution <ref> [13] </ref>. Once a region has been classified as obstacle, its world coordinates are passed to the collision avoidance, to supplement the sonar information. The vision module evaluates images with a frequency of more than 1 Hz on a Pentium computer.
Reference: [14] <author> A. Elfes. </author> <title> Sonar-based real-world mapping and navigation. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-3(3):249265, </volume> <month> June </month> <year> 1987. </year>
Reference-contexts: Topological maps, on the other hand, are more compact and thus facilitate fast planning. 2.1 Grid-Based Maps The metric maps considered here are two-dimensional, discrete occupancy grids, as originally proposed in <ref> [14, 31] </ref> and since implemented successfully in various systems.
Reference: [15] <author> S. Engelson and D. McDermott. </author> <title> Error correction in mobile robot map learning. </title> <booktitle> In Proceedings of the 1992 IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 25552560, </pages> <address> Nice, France, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: Grid-based approaches, such as those proposed by Moravec/Elfes [31] and Borenstein/Koren [4] and many others, represent environments by evenly-spaced grids. Each grid cell contains a value which indicates the presence or absence of an obstacle in the corresponding region of the environment. Topological approaches, such as those described in <ref> [15, 25, 26, 28, 35, 47] </ref>, represent robot environments by graphs. Nodes in such graphs correspond to distinct situations, places, or landmarks (such as doorways). They are connected by arcs if there exists a direct path between them.
Reference: [16] <author> C. Fedor. TCX. </author> <title> An interprocess communication system for building robotic architectures. programmer's guide to version 10.xx. </title> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Acknowledgment The authors thank the other members of the RHINO team and the XAVIER mobile robot team at CMU for insightful discussion, help and advice. The low-level process communication software TCX <ref> [16] </ref> was provided by CMU, which is gratefully acknowledged. One author (S.T.) is sponsored in part by the National Science Foundation under award IRI-9313367, and by the Wright Laboratory, Aeronautical Systems Center, Air Force Materiel Command, USAF, and the Defense Advanced Research Projects Agency (DARPA) under grant number F33615-93-1-1330 (T.
Reference: [17] <author> L. Feng, J. Borenstein, and H.R. Everett. </author> <title> Where am I? Sensors and methods for autonomous mobile robot positioning. </title> <type> Technical Report UM-MEAM-94-12, </type> <institution> University of Michigan, </institution> <address> Ann Arbor, MI, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Localization is particularly important (and particularly difficult) for map-based approaches that learn their maps, since the accuracy of a metric map depends crucially on the alignment of the robot with its map <ref> [17, 37] </ref>. is determined solely based on dead-reckoning. After approximately 15 minutes of robot operation, the position error is approximately 11.5 meter. Obviously, the resulting map is too erroneous to be of practical use. Figure 7b is the result of applying the position tracking method described below. <p> This illustrates the importance of sensor-based position estimation for map building. Identifying and correcting for slippage and drift is thus a most important issue in map building. An excellent overview over different approaches to localization can be found in <ref> [17] </ref>. Traditionally, localization addresses two sub-problems which are often attacked separately: 1. Position Tracking. Position tracking refers to the problem of estimation the location of the robot while it is moving. Drift and slippage impose limits on the ability to estimate the location of the robot within its global map.
Reference: [18] <author> D. Fox, W. Burgard, and S. Thrun. </author> <title> Controlling synchro-drive robots with the dynamic window approach to collision avoidance. </title> <booktitle> In Proceedings of the IEEE/RSJ International Conference on Intelligent Robots and Systems, </booktitle> <year> 1996. </year>
Reference-contexts: RHINO's navigation system consists of two modules: A global planner [43], and a reactive collision avoidance module <ref> [19, 18] </ref>. Control is generated hierarchically: The global path planner generates minimum-cost paths to the goal (s) using the map. <p> When the robot moves as fast as 90 cm/sec, it is imperative that the robot dynamics (inertia, torque limits) are taken into account, particularly because the path planner considers only robot kinematics. The remainder of this section describes the dynamic window approach to collision avoidance <ref> [19, 18] </ref>, our currently best collision avoidance routine. The key idea of the dynamic window approach is to choose control in the velocity space of the robot.
Reference: [19] <author> D. Fox, W. Burgard, and S. Thrun. </author> <title> The dynamic window approach to collision avoidance. </title> <journal> IEEE Robotics and Automation, </journal> <note> 1996. to appear, also appeared as Technical Report IAI-TR-95-13, </note> <institution> University of Bonn, </institution> <year> 1995. </year>
Reference-contexts: RHINO's navigation system consists of two modules: A global planner [43], and a reactive collision avoidance module <ref> [19, 18] </ref>. Control is generated hierarchically: The global path planner generates minimum-cost paths to the goal (s) using the map. <p> Notice that the complete exploration run shown here took less than 15 minutes. The robot moved constantly and frequently reached a velocity of 80 to 90 cm/sec (see also <ref> [6, 19] </ref>). the cumulative costs V for moving towards the nearest unexplored point. The value function indicates the robot would continue exploration by moving straight ahead. * Multi-agent exploration. Since value iteration generates values for all grid-cells, it can easily be used for collaborative multi-agent exploration. <p> When the robot moves as fast as 90 cm/sec, it is imperative that the robot dynamics (inertia, torque limits) are taken into account, particularly because the path planner considers only robot kinematics. The remainder of this section describes the dynamic window approach to collision avoidance <ref> [19, 18] </ref>, our currently best collision avoidance routine. The key idea of the dynamic window approach is to choose control in the velocity space of the robot.
Reference: [20] <author> T. Frohlinghaus and J.M. Buhmann. </author> <title> Real-time phase-based stereo for a mobile robot. </title> <booktitle> In Proceedings of the 1st Euromicro Workshop on Advanced Mobile Robots. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: Stereo images are transmitted via a radio link to a Datacube, a special-purpose computer for image processing. Like the human visual apparatus, stereo images can be used to compute depth information (i.e., proximity). Put shortly, our approach <ref> [20, 21] </ref> analyzes stereo images for co-occurrences of vertical edges. By analyzing the disparity of vertical edges found in both images the proximity of obstacles is estimated, and projected onto a two-dimensional occupancy grid. a set of three horizontal Gabor filters [39].
Reference: [21] <author> T. Frohlinghaus and J.M. Buhmann. Regularizing phase-basedstereo. </author> <booktitle> In Proceedings of the 13th International Conference on Pattern Recognition, </booktitle> <address> Vienna, Austria, </address> <year> 1996. </year>
Reference-contexts: Stereo images are transmitted via a radio link to a Datacube, a special-purpose computer for image processing. Like the human visual apparatus, stereo images can be used to compute depth information (i.e., proximity). Put shortly, our approach <ref> [20, 21] </ref> analyzes stereo images for co-occurrences of vertical edges. By analyzing the disparity of vertical edges found in both images the proximity of obstacles is estimated, and projected onto a two-dimensional occupancy grid. a set of three horizontal Gabor filters [39].
Reference: [22] <author> R. Hinkel and T. Knieriemen. </author> <title> Environment perception with a laser radar in a fast moving robot. </title> <booktitle> In Proceedings of Symposium on Robot Control, pages 68.168.7, </booktitle> <address> Karlsruhe, Germany, </address> <month> October </month> <year> 1988. </year>
Reference-contexts: A final source information, which can be used to correct rotational errors, is the global wall orientation <ref> [11, 22] </ref>. This approach rests on the restrictive assumption that walls are either parallel or orthogonal to each other, or differ by more than 15 degrees from these canonical wall directions.
Reference: [23] <author> I. Horswill. </author> <title> Specialization of perceptual processes. </title> <type> Technical Report AI TR-1511, </type> <institution> MIT, AI Lab, </institution> <address> Cambridge, MA, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: A complete coverage of our current applications is beyond the scope of this chapter. One of the most recent and most interesting applications, however, is that of a robotic tour guide (similar to the one proposed in <ref> [23] </ref>). The tour guide offers tours to visitors, explains rooms, locations and their relation to each other.
Reference: [24] <author> R. A. Howard. </author> <title> Dynamic Programming and Markov Processes. </title> <publisher> MIT Press and Wiley, </publisher> <year> 1960. </year>
Reference-contexts: The minimum-cost path is computed using a modified version of value iteration, a popular dynamic programming algorithm <ref> [2, 24] </ref>: 1. Initialization. The grid cell that contains the target location is initialized with 0, all others with 1: V x;y 0; if hx; yi target cell 1; otherwise 2. Update loop.
Reference: [25] <author> D. Kortenkamp and T. Weymouth. </author> <title> Topological mapping for mobile robots using a combination of sonar and vision sensing. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <pages> pages 979984, </pages> <address> Menlo Park, July 1994. </address> <publisher> AAAI, AAAI Press/MIT Press. </publisher>
Reference-contexts: Grid-based approaches, such as those proposed by Moravec/Elfes [31] and Borenstein/Koren [4] and many others, represent environments by evenly-spaced grids. Each grid cell contains a value which indicates the presence or absence of an obstacle in the corresponding region of the environment. Topological approaches, such as those described in <ref> [15, 25, 26, 28, 35, 47] </ref>, represent robot environments by graphs. Nodes in such graphs correspond to distinct situations, places, or landmarks (such as doorways). They are connected by arcs if there exists a direct path between them. <p> Figure 8). Once the global wall orientation has been estimated, it is used to readjust the robot's orientation based on future sonar measurements. See [46] for more details. * Landmarks. Landmarks are used in various approaches to mobile robot localization (see e.g., <ref> [3, 25, 32] </ref> and references in [44]). We recently have begun to explore mechanisms that enable a robot to select its own landmarks, based on sonar and camera input.
Reference: [26] <author> B. Kuipers and Y.-T. Byun. </author> <title> A robot exploration and mapping strategy based on a semantic hierarchy of spatial representations. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Texas at Austin, Austin, Texas 78712, </institution> <month> January </month> <year> 1990. </year>
Reference-contexts: Grid-based approaches, such as those proposed by Moravec/Elfes [31] and Borenstein/Koren [4] and many others, represent environments by evenly-spaced grids. Each grid cell contains a value which indicates the presence or absence of an obstacle in the corresponding region of the environment. Topological approaches, such as those described in <ref> [15, 25, 26, 28, 35, 47] </ref>, represent robot environments by graphs. Nodes in such graphs correspond to distinct situations, places, or landmarks (such as doorways). They are connected by arcs if there exists a direct path between them.
Reference: [27] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: grid-cell hx; yi in the map has an occupancy value attached (denoted by Prob (occ x;y )), which measures the robot's subjective belief whether or not its center can be moved to the center of that cell (i.e., the occupancy map models the configuration space of the robot, see e.g., <ref> [27] </ref>). This section describes the two major steps in building grid-based maps (see also [43]): sensor interpretation, and integration. Examples of metric maps are shown in various places in this chapter. 2.1.1 Sonar Sensor Interpretation Sonar sensors measure approximate echo distances to nearby obstacles, along with noise. <p> We will call these points hx 0 ; y 0 i the basis points of hx; yi, and the distance between hx; yi and its basis points the clearance of hx; yi. The Voronoi diagram, which is a form of skeletonization <ref> [27] </ref>, is the set of points in free-space that have at least two different (equidistant) basis-points. Figure 6a sketches the Voronoi diagram for the map shown in Figure 4. 3. Critical points. The key idea for partitioning the free-space is to find critical points. <p> Both modules adjust their plans/controls continuously in response to the current situation. Notice that both approachesthe global path planner and the reactive collision avoidance approachare characterized by orthogonal strengths and weaknesses: The collision avoidance approach is easily trapped in local minima, such as u-shaped obstacle configurations <ref> [27] </ref>. However, it reacts in real-time to unforeseen obstacles such as humans, and is capable of changing the motion direction while the robot is moving. The global planner, in contrast, does not suffer from the local minimum problem, since it plans globally.
Reference: [28] <author> M.J. Mataric. </author> <title> Interaction and intelligent behavior. </title> <type> Technical Report AI-TR-1495, </type> <institution> Massachusetts Institute of Technology, Artificial Intelligence Laboratory, </institution> <address> Cambridge, MA, </address> <year> 1994. </year>
Reference-contexts: Grid-based approaches, such as those proposed by Moravec/Elfes [31] and Borenstein/Koren [4] and many others, represent environments by evenly-spaced grids. Each grid cell contains a value which indicates the presence or absence of an obstacle in the corresponding region of the environment. Topological approaches, such as those described in <ref> [15, 25, 26, 28, 35, 47] </ref>, represent robot environments by graphs. Nodes in such graphs correspond to distinct situations, places, or landmarks (such as doorways). They are connected by arcs if there exists a direct path between them.
Reference: [29] <author> R. A. McCallum. </author> <title> Instance-based state identification for reinforcement learning. </title> <editor> In G. Tesauro, D. Touretzky, and T. Leen, editors, </editor> <booktitle> Advances in Neural Information Processing Systems 7, </booktitle> <address> Cambridge, MA, </address> <year> 1995. </year> <note> MIT Press. To appear. </note>
Reference-contexts: Since in general it is difficult to specify what constitutes the state of the environment, methods that can discover hidden state and model it from data are clearly desirable (see e.g., <ref> [9, 29, 36] </ref>). * Other sensors. Integrating sensors other than sonar and cameras into mobile robot navigation is an important problem, since different sensors have different perceptual characteristics. In principle, the general mechanisms for mapping, localization and navigation are not specialized to a particular type sensor.
Reference: [30] <author> A.W. Moore and C.G. Atkeson. </author> <title> Prioritized sweeping: Reinforcement learning with less data and less time. </title> <booktitle> Machine Learning, </booktitle> <address> 13:103130, </address> <year> 1993. </year>
Reference-contexts: This box is easily maintained in the value iteration update. As a result, value iteration focuses on a small fraction of the grid only, hence converges much faster. Notice that the bounding box bears similarity to prioritized sweeping <ref> [30] </ref>. Value iteration is a very general procedure, which has several properties that make it attractive for real-time mobile robot navigation: * Any-time algorithm. As mentioned above, value iteration can be understood as an any-time planner [12].
Reference: [31] <author> H. P. Moravec. </author> <title> Sensor fusion in certainty grids for mobile robots. </title> <journal> AI Magazine, </journal> <pages> pages 6174, </pages> <month> Summer </month> <year> 1988. </year>
Reference-contexts: This section describes an approach that integrates grid-based and topological representations. Grid-based approaches, such as those proposed by Moravec/Elfes <ref> [31] </ref> and Borenstein/Koren [4] and many others, represent environments by evenly-spaced grids. Each grid cell contains a value which indicates the presence or absence of an obstacle in the corresponding region of the environment. <p> Topological maps, on the other hand, are more compact and thus facilitate fast planning. 2.1 Grid-Based Maps The metric maps considered here are two-dimensional, discrete occupancy grids, as originally proposed in <ref> [14, 31] </ref> and since implemented successfully in various systems. <p> The derivation of this formula is straightforward and can be found in <ref> [31, 34] </ref>. Notice that this formula can be used to update occupancy values incrementally. An example map of a competition ring constructed at the 1994 AAAI autonomous mobile robot competition is shown in Figure 4. This map has been constructed exclusively from sonar information.
Reference: [32] <author> H. Neven and Schoner G. </author> <title> Dynamics parametrically controlled by image correlations organize robot navigation. </title> <journal> Biological Cybernetics, </journal> <note> 1995. to appear. </note>
Reference-contexts: Figure 8). Once the global wall orientation has been estimated, it is used to readjust the robot's orientation based on future sonar measurements. See [46] for more details. * Landmarks. Landmarks are used in various approaches to mobile robot localization (see e.g., <ref> [3, 25, 32] </ref> and references in [44]). We recently have begun to explore mechanisms that enable a robot to select its own landmarks, based on sonar and camera input.
Reference: [33] <author> N. J. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Springer Publisher, </publisher> <address> Berlin, New York, </address> <year> 1982. </year>
Reference-contexts: Update loop. For all non-target grid cells hx; yi do: V x;y min =1;0;1 fV x+~;y+ + Prob (occ x+~;y+ )g Value iteration updates the value of all grid cells by the value of their best neighbors, plus the costs of moving to this neighbor (just like A* <ref> [33] </ref>). Cost is here equivalent to the probability Prob (occ x;y ) that a grid cell hx; yi is occupied. The update rule is iterated. When the update converges, each value V x;y measures the cumulative cost for moving to the nearest goal.
Reference: [34] <author> J. Pearl. </author> <title> Probabilistic reasoning in intelligent systems: networks of plausible inference. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: The derivation of this formula is straightforward and can be found in <ref> [31, 34] </ref>. Notice that this formula can be used to update occupancy values incrementally. An example map of a competition ring constructed at the 1994 AAAI autonomous mobile robot competition is shown in Figure 4. This map has been constructed exclusively from sonar information.
Reference: [35] <author> D. Pierce and B. Kuipers. </author> <title> Learning to explore and build maps. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <pages> pages 12641271, </pages> <address> Menlo Park, July 1994. </address> <publisher> AAAI, AAAI Press/MIT Press. </publisher>
Reference-contexts: Grid-based approaches, such as those proposed by Moravec/Elfes [31] and Borenstein/Koren [4] and many others, represent environments by evenly-spaced grids. Each grid cell contains a value which indicates the presence or absence of an obstacle in the corresponding region of the environment. Topological approaches, such as those described in <ref> [15, 25, 26, 28, 35, 47] </ref>, represent robot environments by graphs. Nodes in such graphs correspond to distinct situations, places, or landmarks (such as doorways). They are connected by arcs if there exists a direct path between them.
Reference: [36] <author> L. R. Rabiner. </author> <title> A tutorial on hidden markov models and selected applications in speech recognition. </title> <booktitle> In Proceedings of the IEEE. IEEE, 1989. IEEE Log Number 8825949. </booktitle>
Reference-contexts: Since in general it is difficult to specify what constitutes the state of the environment, methods that can discover hidden state and model it from data are clearly desirable (see e.g., <ref> [9, 29, 36] </ref>). * Other sensors. Integrating sensors other than sonar and cameras into mobile robot navigation is an important problem, since different sensors have different perceptual characteristics. In principle, the general mechanisms for mapping, localization and navigation are not specialized to a particular type sensor.
Reference: [37] <author> W.D. Rencken. </author> <title> Concurrent localisation and map building for mobile robots using ultrasonic sensors. </title> <booktitle> In Proceedings of the IEEE/RSJ International Conference on Intelligent Robots and Systems, </booktitle> <pages> pages 21292197, </pages> <address> Yokohama, Japan, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: Localization is particularly important (and particularly difficult) for map-based approaches that learn their maps, since the accuracy of a metric map depends crucially on the alignment of the robot with its map <ref> [17, 37] </ref>. is determined solely based on dead-reckoning. After approximately 15 minutes of robot operation, the position error is approximately 11.5 meter. Obviously, the resulting map is too erroneous to be of practical use. Figure 7b is the result of applying the position tracking method described below.
Reference: [38] <author> D. E. Rumelhart, G. E. Hinton, and R. J. Williams. </author> <title> Learning internal representations by error propagation. </title> <editor> In D. E. Rumelhart and J. L. McClelland, editors, </editor> <booktitle> Parallel Distributed Processing. </booktitle> <volume> Vol. I + II. </volume> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: To build metric maps, sensor reading must be translated into occupancy values Prob (occ x;y ) for each grid cell hx; yi. The idea here is to train an artificial neural network using Back-Propagation <ref> [38] </ref> to map sonar measurements to occupancy values [43, 48]. The input to the network consists of the four sensor readings closest to hx; yi, along with two values that encode hx; yi in polar coordinates relative to the robot (angle to the first of the four sensors, and distance).
Reference: [39] <author> T.D. Sanger. </author> <title> Stereo disparity computation using gabor filters. </title> <journal> Biological Cybernetics, </journal> <volume> 59:405418, </volume> <year> 1988. </year>
Reference-contexts: Put shortly, our approach [20, 21] analyzes stereo images for co-occurrences of vertical edges. By analyzing the disparity of vertical edges found in both images the proximity of obstacles is estimated, and projected onto a two-dimensional occupancy grid. a set of three horizontal Gabor filters <ref> [39] </ref>. Gabor filters, which are similar to local Fourier transforms, basically band-filter images to obtain two local coefficients: The amplitude of a certain, filter-specific frequency, and its phase.
Reference: [40] <author> B. Schiele and J. Crowley. </author> <title> A comparison of position estimation techniques using occupancy grids. </title> <booktitle> In Proceedings of the 1994 IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 16281634, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The robot can localize itself by comparing the global with the local map. More specifically, the pixel-wise correlation of the local and the global mapwhich is a function of the robot's locationis a measure of their correspondence <ref> [40] </ref>. The more correlated the maps are, the more likely is the corresponding location of the robot. Thus, the probability Prob (s (t) jl) is assumed to be proportional to the correlation of both maps if the robot were at l. See [46] for more details. * Sonar modeling.
Reference: [41] <author> F. E. Schneider. </author> <title> Sensorinterpretation und Kartenerstellung fur mobile Roboter. </title> <type> Master's thesis, </type> <institution> Dept. of Computer Science III, University of Bonn, </institution> <address> 53117 Bonn, </address> <month> December </month> <year> 1994. </year> <note> In German. </note>
Reference-contexts: Certainly, there are a variety of limitations and desiderata that warrant future research. The following list addresses some of the most significant and challenging ones: * Dynamic environments. Maps, as presented in this chapter, are generally incapable of modeling moving obstacles. In a recent thesis <ref> [41] </ref>, Schneider extended our approach to model semi-dynamic obstacles such objects, and the numbers with white background mark the positions at which these targets were taught. as door. Such obstacles are dynamic but only appear at fixed locations, thus can be detected by analyzing long-term dependencies in the occupancy grid.
Reference: [42] <author> R. Simmons. </author> <title> The 1994 AAAI robot competition and exhibition. </title> <journal> AI Magazine, </journal> <volume> 16(1), </volume> <month> Spring </month> <year> 1995. </year>
Reference-contexts: Training a neural network to interpret sonar sensors has two key advantages over hand-crafted approaches to sensor interpretation. First, since neural networks are trained based on examples, they can easily be adapted to new circumstances. For example, the walls in the competition ring of the 1994 AAAI robot competition <ref> [42] </ref> were much smoother than the walls in the building in which the software was originally developed. Even though time was short, the neural network could quickly be retrained to accommodate this new situation. Secondly, multiple sensor readings are interpreted simultaneously. <p> In various experiments, we found this algorithm to reliably detect small, can-size obstacles in our university building. The reader may notice that this algorithm has successfully been used for detecting and grasping free-standing objects on the floor [6], as demonstrated at the 1994 AAAI mobile robot competition <ref> [42] </ref>. 5 Example Application The RHINO-software described in this paper has served as a low-level platform for various indoor mobile robot applications. A complete coverage of our current applications is beyond the scope of this chapter.
Reference: [43] <author> S. Thrun. </author> <title> Exploration and model building in mobile robot domains. </title> <editor> In E. Ruspini, editor, </editor> <booktitle> Proceedings of the ICNN-93, </booktitle> <pages> pages 175180, </pages> <address> San Francisco, CA, </address> <month> March </month> <year> 1993. </year> <institution> IEEE Neural Network Council. </institution>
Reference-contexts: This section describes the two major steps in building grid-based maps (see also <ref> [43] </ref>): sensor interpretation, and integration. Examples of metric maps are shown in various places in this chapter. 2.1.1 Sonar Sensor Interpretation Sonar sensors measure approximate echo distances to nearby obstacles, along with noise. <p> To build metric maps, sensor reading must be translated into occupancy values Prob (occ x;y ) for each grid cell hx; yi. The idea here is to train an artificial neural network using Back-Propagation [38] to map sonar measurements to occupancy values <ref> [43, 48] </ref>. The input to the network consists of the four sensor readings closest to hx; yi, along with two values that encode hx; yi in polar coordinates relative to the robot (angle to the first of the four sensors, and distance). <p> Our current best approach for position tracking differs from the above approach to localization in two aspects (cf. <ref> [43, 46] </ref>): 1. The approach estimates only the point l that maximizes Prob (l), instead of the entire density. <p> Notice that all maps shown in this chapter (with the exception of the map shown in Figure 7a) have been generated using this position tracking approach. 4 Navigation This section is concerned with robot motion. RHINO's navigation system consists of two modules: A global planner <ref> [43] </ref>, and a reactive collision avoidance module [19, 18]. Control is generated hierarchically: The global path planner generates minimum-cost paths to the goal (s) using the map. <p> While value iteration quickly decreases values that are too large, one goal and (b) two goals (goals are marked by 0). By following the grey-scale gradient, the robot moves to the next unexplored area on a minimum-cost path. increasing too small a value can be arbitrarily slow <ref> [43] </ref>. Consequently, the basic value iteration algorithm requires that the value function be initialized completely (Step 1) whenever the mapand thus the cost functionis updated. This is very inefficient, since the map is updated almost constantly.
Reference: [44] <author> S. Thrun. </author> <title> A bayesian approach to landmark discovery and active perception for mobile robot navigation. </title> <type> Technical Report CMU-CS-96-122, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <address> Pittsburgh, PA 15213, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: Figure 8). Once the global wall orientation has been estimated, it is used to readjust the robot's orientation based on future sonar measurements. See [46] for more details. * Landmarks. Landmarks are used in various approaches to mobile robot localization (see e.g., [3, 25, 32] and references in <ref> [44] </ref>). We recently have begun to explore mechanisms that enable a robot to select its own landmarks, based on sonar and camera input. <p> As a result, our robot successfully discovered a variety of useful visual landmarks, such as doors, wall color, ceiling lights and so on. Details of the algorithm and performance results are surveyed in <ref> [44] </ref>. This list of sources for estimating l has been developed over the last few years. Some of these methods make strong assumptions on the correctness of the global map (e.g., the maneuverability method), hence cannot be interleaved with map learning.
Reference: [45] <author> S. Thrun and A. Bucken. </author> <title> Integrating grid-based and topological maps for mobile robot navigation. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <address> Menlo Park, </address> <month> August </month> <year> 1996. </year> <booktitle> AAAI, </booktitle> <publisher> AAAI Press/MIT Press. </publisher>
Reference-contexts: Nodes in such graphs correspond to distinct situations, places, or landmarks (such as doorways). They are connected by arcs if there exists a direct path between them. As argued in more detail elsewhere <ref> [45] </ref>, both grid-based and topological representations exhibit orthogonal strengths and weaknesses: Grid-based maps are considerably easier to learn, partially because they facilitate accurate localization, partially because they are easy to maintain. <p> The key advantage of this decomposition is that all the expensive computation required for path planning can be done off-line, for all path planning problems. As documented in <ref> [45, 46] </ref>, planning using the topological map is between three and four orders of magnitude more efficient than planning with the grid-based map, for maps similar to those shown in this chapter.
Reference: [46] <author> S. Thrun and A. Bucken. </author> <title> Learning maps for indoor mobile robot navigation. </title> <type> Technical Report CMU-CS-96-121, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <address> Pittsburgh, PA 15213, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: The more correlated the maps are, the more likely is the corresponding location of the robot. Thus, the probability Prob (s (t) jl) is assumed to be proportional to the correlation of both maps if the robot were at l. See <ref> [46] </ref> for more details. * Sonar modeling. Another source of information for localization, which we have begun to explore more recently [7], is obtained using a simplistic model of sonar sensors. <p> In the beginning of robot operation, the global orientation of walls is estimated by searching straight line segments in consecutive sonar measurements (cf. Figure 8). Once the global wall orientation has been estimated, it is used to readjust the robot's orientation based on future sonar measurements. See <ref> [46] </ref> for more details. * Landmarks. Landmarks are used in various approaches to mobile robot localization (see e.g., [3, 25, 32] and references in [44]). We recently have begun to explore mechanisms that enable a robot to select its own landmarks, based on sonar and camera input. <p> Our current best approach for position tracking differs from the above approach to localization in two aspects (cf. <ref> [43, 46] </ref>): 1. The approach estimates only the point l that maximizes Prob (l), instead of the entire density. <p> The key advantage of this decomposition is that all the expensive computation required for path planning can be done off-line, for all path planning problems. As documented in <ref> [45, 46] </ref>, planning using the topological map is between three and four orders of magnitude more efficient than planning with the grid-based map, for maps similar to those shown in this chapter.
Reference: [47] <author> M. C. Torrance. </author> <title> Natural communication with robots. </title> <type> Master's thesis, </type> <institution> MIT Department of Electrical Engineering and Computer Science, </institution> <address> Cambridge, MA, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: Grid-based approaches, such as those proposed by Moravec/Elfes [31] and Borenstein/Koren [4] and many others, represent environments by evenly-spaced grids. Each grid cell contains a value which indicates the presence or absence of an obstacle in the corresponding region of the environment. Topological approaches, such as those described in <ref> [15, 25, 26, 28, 35, 47] </ref>, represent robot environments by graphs. Nodes in such graphs correspond to distinct situations, places, or landmarks (such as doorways). They are connected by arcs if there exists a direct path between them.
Reference: [48] <author> J. W. M. van Dam, B. J. A. Krose, and F. C. A. Groen. </author> <title> Neural network applications in sensor fusion for an autonomous mobile robot. </title> <editor> In L. Dorst, M. van Lambalgen, and F. Voorbraak, editors, </editor> <booktitle> Proc. of Int. Workshop Reasoning with Uncertainty in Robotics, </booktitle> <pages> pages 119. </pages> <address> Amsterdam, </address> <year> 1995. </year>
Reference-contexts: To build metric maps, sensor reading must be translated into occupancy values Prob (occ x;y ) for each grid cell hx; yi. The idea here is to train an artificial neural network using Back-Propagation [38] to map sonar measurements to occupancy values <ref> [43, 48] </ref>. The input to the network consists of the four sensor readings closest to hx; yi, along with two values that encode hx; yi in polar coordinates relative to the robot (angle to the first of the four sensors, and distance).
Reference: [49] <author> S.W. Zucker. </author> <title> Region growing: </title> <journal> Childhood and adolescence. Comput. Graphics Image Processing, </journal> <volume> 5:382399, </volume> <year> 1976. </year>
Reference-contexts: Pre-segmentation. A fast, pixelbased image segmentation evaluates the local contrast between pixels and links them together if the contrast is below a certain threshold 0 [1]. This pre-segmentation usually results in an oversegmented image with many small region patches. 4. Segmentation. Neighboring regions are merged <ref> [49] </ref>, if the mean contrast along their common border is below a threshold t , and if their average color differs by less than a second threshold, t .
References-found: 49

