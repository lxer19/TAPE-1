URL: http://geyer.lcs.mit.edu/~jchapin/6853/Papers/waldo-events.ps
Refering-URL: http://geyer.lcs.mit.edu/~jchapin/6853/readinglist.html
Root-URL: 
Email: jim.waldo@east.sun.com ann.wollrath@east.sun.com geoff.wyant@east.sun.com  
Title: Events in an RPC Based Distributed System  
Author: Jim Waldo Ann Wollrath Geoff Wyant Samuel C. Kendall 
Address: M/S 29-01 2550 Garcia Avenue Mountain View, CA 94043  
Note: email addresses:  
Date: November 1995  
Pubnum: SMLI TR-95-47  
Abstract: In this report, we show how to build a distributed system allowing objects to register interest in and receive notifications of events in other objects. The system is built on top of a pair of interfaces that are interesting only in their extreme simplicity. We then present a simple and efficient implementation of these interfaces. Next, we show how more complex functionality can be introduced to the system by adding third-party services. These services can be added without changing the simple interfaces, and without changing the objects in the system that do not need the functionality of those services. Finally, we note a number of open issues that remain, and attempt to draw some conclusions based on the work. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Babaoglu, Ozalp and Keith Marzullo. </author> <title> Consistent Global States of Distributed Systems: Fundamental Concepts and Mechanisms in Sape Mullender (ed.), Distributed Systems, Second Edition, </title> <publisher> Addison-Wesley (1993). </publisher>
Reference-contexts: Notifications need not be synchronous, and indeed, most such systems are asynchronous in nature. Complications arise when the ordering of the events from different objects must be taken into account; considerable work has been done to deal with these orderings <ref> [1] </ref>. The event paradigm seems somewhat foreign to the objectoriented approach to software.
Reference: [2] <author> Birman, K.P. and T.A. Joseph. </author> <title> Exploiting Virtual Synchrony in Distributed Systems, </title> <booktitle> in Proceedings of the Eleventh Symposium on Operating Systems Principles, </booktitle> <address> Austin, Tx. </address> <year> (1987). </year>
Reference-contexts: The objects themselves react to direct calls from the controlling interface object, which is in turn controlled by some user. 3 Event-Based Models A less common model for distributed systems is based on the communication model of event notification. Such systems were pioneered by Isis <ref> [2] </ref>, but other exemplars of this approach to distribution include Teknekron [14], Zephyr [6], and InterStage [7]. The model for such systems is that some significant changes in computational entities making up the system are identif ied as events.
Reference: [3] <author> Birrell, A. D. and B. J. Nelson. </author> <title> Implementing Remote Procedure Calls. </title> <journal> ACM Transactions on Computer Systems 2 (1978). </journal>
Reference-contexts: More complex kinds of event notifications are constructed by the introduction of third-party objects that can be interposed between supporters of the basic protocol to provide advanced functionality. 2 RPC Based Distributed Systems Distributed systems based on RPCs have been around for a considerable period of time <ref> [3] </ref>. The basic approach is still being used for the construction of distributed systems [15][8][13]. Extensions of the approach introduce remote method invocation on objects [12][5], support for f ine-grained objects [9], and the automatic location and activation of objects [11].
Reference: [4] <author> Birrell, Andrew, Greg Nelson, Susan Owicki, and Edward Wobber, </author> <title> Network Objects, </title> <institution> Digital Equipment Corporation Systems Research Center Technical Report 115 (1994). </institution>
Reference-contexts: Our implementation language is Modula-3 [10], and our distribution substrate is the Network Objects package distributed with the DEC SRC version of that language <ref> [4] </ref>, enhanced to support automatic activation 8 C O R B A f u n c t i o n a l i t y n e e d e d f o r o u r research in a simple form, integrated into our implementation language.
Reference: [5] <author> Dasgupta, P., R. J. Leblanc, and E. Spafford. </author> <title> The Clouds Project: Designing and Implementing a Fault Tolerant Distributed Operating System. </title> <institution> Georgia Institute of Technology Technical Report GIT-ICS-85/29 (1985). </institution>
Reference: [6] <author> DellaFera, C. Anthony, Mark W. Eichin, Robert S. French, David C. Jedlin-sky, John T. Kohl, and William E. Som-merfeld, </author> <title> The Zepher Notification Service, </title> <booktitle> Proceedings of the Winter USENIX Conference (1988). </booktitle>
Reference-contexts: Such systems were pioneered by Isis [2], but other exemplars of this approach to distribution include Teknekron [14], Zephyr <ref> [6] </ref>, and InterStage [7]. The model for such systems is that some significant changes in computational entities making up the system are identif ied as events.
Reference: [7] <author> Edelson, Daniel. </author> <title> Enterprise Wide Distributed Programming with InterStage: An Overview, </title> <booktitle> talk presented at the 1994 USENIX C++ Advanced Topics Workshop, </booktitle> <address> Boston, MA. </address> <year> (1994). </year>
Reference-contexts: Such systems were pioneered by Isis [2], but other exemplars of this approach to distribution include Teknekron [14], Zephyr [6], and InterStage <ref> [7] </ref>. The model for such systems is that some significant changes in computational entities making up the system are identif ied as events.
Reference: [8] <author> Hutchinson, N. C., L. L. Peterson, M. B. Abott, and S. OMalley. </author> <title> RPC in the x-Kernel: Evaluating New Design Techniques. </title> <booktitle> Proceedings of the Twelfth Sym posium on Operating Systems Principles 23, </booktitle> <volume> no. </volume> <month> 5 </month> <year> (1989). </year>
Reference: [9] <author> Khalidi, Yousef A. and Michael N. Nelson. </author> <title> An Implementation of UNIX on an Object-Oriented Operating System. </title> <booktitle> Proceedings of the Winter USENIX Conference (1993). </booktitle> <institution> Also Sun Microsystems Laboratories, Inc. </institution> <note> Technical Report SMLI TR-92-3 (December 1992). </note>
Reference-contexts: The basic approach is still being used for the construction of distributed systems [15][8][13]. Extensions of the approach introduce remote method invocation on objects [12][5], support for f ine-grained objects <ref> [9] </ref>, and the automatic location and activation of objects [11]. Throughout these extensions, the mechanisms of the approach have remained essentially unchanged. A call to a remote entity is routed through a surrogate in the address space of the caller.
Reference: [10] <author> Nelson, Greg (ed.), </author> <title> Systems Programming with Modula-3, </title> <publisher> Prentice Hall (1991). </publisher>
Reference-contexts: Our implementation language is Modula-3 <ref> [10] </ref>, and our distribution substrate is the Network Objects package distributed with the DEC SRC version of that language [4], enhanced to support automatic activation 8 C O R B A f u n c t i o n a l i t y n e e d e d f
Reference: [11] <author> The Object Management Group. </author> <title> Common Object Request Broker: Architecture and Specification. OMG Document Number 91.12.1 (1991). </title>
Reference-contexts: The basic approach is still being used for the construction of distributed systems [15][8][13]. Extensions of the approach introduce remote method invocation on objects [12][5], support for f ine-grained objects [9], and the automatic location and activation of objects <ref> [11] </ref>. Throughout these extensions, the mechanisms of the approach have remained essentially unchanged. A call to a remote entity is routed through a surrogate in the address space of the caller. <p> To do that, the object must export the Event Generator interface. A short comment on notation. W e use the OMG CORBA Interface Definition Language (IDL) <ref> [11] </ref> to define our interfaces. This language allows multiple inheritance of interfaces (although we have chosen not to use that feature). We have also adopted the convention of naming the primary interface in any module T (following the convention of Modula-3, our implementation language).
Reference: [12] <author> Parrington, Graham D. </author> <title> Reliable Distributed Programming in C++: The Arjuna Approach. </title> <booktitle> USENIX 1990 C++ Conference Proceedings (1991). </booktitle>
Reference: [13] <author> Shirley, J, </author> <title> A Guide to Writing DCE Applications, </title> <publisher> OReilly & Associates (1992). </publisher>
Reference: [14] <author> Skeen, Dale. </author> <title> An Information Bus Architecture for Large-Scale, </title> <booktitle> Decision-Support Environments, Proceedings of the Winter USENIX Conference (1992). </booktitle>
Reference-contexts: Such systems were pioneered by Isis [2], but other exemplars of this approach to distribution include Teknekron <ref> [14] </ref>, Zephyr [6], and InterStage [7]. The model for such systems is that some significant changes in computational entities making up the system are identif ied as events.

References-found: 14

