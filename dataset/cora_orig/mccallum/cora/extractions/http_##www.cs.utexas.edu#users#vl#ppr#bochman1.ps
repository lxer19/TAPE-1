URL: http://www.cs.utexas.edu/users/vl/ppr/bochman1.ps
Refering-URL: http://www.cs.utexas.edu/users/vl/ppr/reviews97.html
Root-URL: 
Email: e-mail: bochman@macs.biu.ac.il  
Title: A Logical Foundation for Logic Programming I: Biconsequence Relations and Nonmonotonic Completion Foundations of logic
Author: Alexander Bochman 
Note: Keywords.  
Abstract: We suggest a general logical formalism for Logic Programming based on a four-valued inference. We show that it forms a proper setting for representing logic programs with negation as failure of a most general kind and for describing logics and semantics that characterize their behavior. In this way we also extend the connection between Logic and Logic Programming beyond positive programs. In addition, the suggested formalism will allow us to see a reasoning about logic programs as a most simple kind of nonmonotonic reasoning in general.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.J. Alferes and L.M. Pereira. </author> <title> (1992) On logic program semantics with two kinds of negation. </title> <editor> In K. R. Apt, editor, </editor> <booktitle> Logic Programming: Proc. 1992 Joint Int. Conf. and Symp., </booktitle> <pages> pages 574-589, </pages> <address> Cambridge, Mass., </address> <publisher> MIT Press. </publisher>
Reference-contexts: Though less immediate, an extension of the notion of a program to so-called disjunctive programs [27], and especially introduction of normal logic programs with a second, `classical' negation <ref> [21, 1] </ref> had the same effect of weakening the connection between Logic Programming and (classical) Logic. The absence of a clear and uniform logical basis behind logic programs with negation as failure has resulted in an unbridled proliferation of semantics suggested for such programs. <p> A warning note. The local negation : should not be identified with the classical, or explicit, negation used in some current extensions of logic programming (see <ref> [21, 1] </ref>). The latter is usually weaker than the local negation and, in particular, does not support the above transformation (3), or even a weaker property of contraposition.
Reference: [2] <author> C. </author> <title> Baral and V.S. Subrahmanian (1991) Dualities between alternative semantics for logic programming and nonmonotonic reasoning (Extended abstract). </title> <booktitle> Proc. First Int. Workshop on Logic Programming and Nonmonotonic Reasoning, </booktitle> <pages> pp. 69-86. </pages>
Reference-contexts: Investigations into the nature of this connection have turned out to be mutually profitable. For example, many of the declarative semantics suggested for logic programs have been extended to other nonmonotonic formalisms (see, e.g., <ref> [2, 24, 28] </ref>). From the viewpoint of our framework, the connection between these two fields turns out to be even closer. In our approach, the reasoning about logic programs and their semantics constitutes a (most simple) kind of nonmono-tonic reasoning in general.
Reference: [3] <author> N.D. Belnap, Jr. </author> <title> (1977) A useful four-valued logic. </title> <editor> In M. Dunn and G. Epstein (eds.) </editor> <booktitle> Modern Uses of Multiple-Valued Logic, </booktitle> <address> D. </address> <publisher> Reidel, Dor-drecht, </publisher> <pages> pp. 8-41. 23 </pages>
Reference-contexts: This will quickly lead us to a four-valued semantics in which the four truth-values are identified with the subsets of the set ftrue; f alseg. This understanding of the four truth-values was suggested by Belnap in <ref> [3] </ref> and has been widely used since then, mainly in order to give representation of reasoning and logic programming in presence of both incomplete and inconsistent information (see, e.g., [4, 20, 33, 37], to mention only a few). <p> As was said, a logical formalism we suggest for representing logic programs will be based on a four-valued entailment. More exactly, we are primarily interested in a four-valued inference based on a particular interpretation of the four truth-values suggested by Belnap in <ref> [3] </ref>. It amounts to their identification with the subsets of the set of classical truth-values ft; f g. According to this interpretation, the four truth-values &gt;; t; f ; ? are identified, respectively, with ft; f g, ftg, ff g and ;.
Reference: [4] <author> H.A. </author> <title> Blair and V.S. Subrahmanian (1989) Paraconsistent logic program-ming. </title> <journal> Theoretical Computer Science, </journal> <volume> 68: </volume> <pages> 135-154. </pages>
Reference-contexts: This understanding of the four truth-values was suggested by Belnap in [3] and has been widely used since then, mainly in order to give representation of reasoning and logic programming in presence of both incomplete and inconsistent information (see, e.g., <ref> [4, 20, 33, 37] </ref>, to mention only a few). What we are going to show here is that it can also serve 2 as a logical basis of logic programming in general.
Reference: [5] <author> A. </author> <title> Bochman (1996) Biconsequence relations for nonmonotonic reasoning. In L.C. </title> <editor> Aiello, J. Doyle, and S.C. Shapiro (eds.) </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proc. Fifth Int. Conference (KR'96), </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA. </address>
Reference-contexts: From the viewpoint of our framework, the connection between these two fields turns out to be even closer. In our approach, the reasoning about logic programs and their semantics constitutes a (most simple) kind of nonmono-tonic reasoning in general. Thus, we show in <ref> [5] </ref> that there is a uniform way of extending the basic formalism described below to a general formalism of nonmonotonic reasoning that subsumes, among others, default logic and various modal nonmonotonic logics. 3 2 Biconsequence Relations and Four-Valued Inference In this section we will describe the basic logical formalism used for <p> In this way we will obtain such `standard' nonmonotonic formalisms as default logic and various modal nonmonotonic logics. These issues are studied in <ref> [5] </ref>. The very possibility of such a uniform extension shows that reasoning embodied in logic programs involving negation as failure can be seen as a special case of nonmonotonic reasoning in general.
Reference: [6] <author> A. </author> <title> Bochman (1996) On a logical basis of normal logic programs. </title> <journal> Fun-damenta Informaticae, </journal> <volume> 28 </volume> <pages> 223-245. </pages>
Reference: [7] <author> A. </author> <title> Bochman (1996) What is a four-valued reasoning and how it can be nonmonotonic. </title> <note> (Submitted to J. of Logic and Computation) </note>
Reference-contexts: Most of the results in this and the next two sections (together with their proofs) can be found in <ref> [7] </ref> and [8]. As was said, a logical formalism we suggest for representing logic programs will be based on a four-valued entailment. More exactly, we are primarily interested in a four-valued inference based on a particular interpretation of the four truth-values suggested by Belnap in [3]. <p> This correspondence allows us to show that biconsequence relations are adequate for their intended interpretation, namely that they provide an adequate formalization of four-valued inference (see <ref> [7] </ref> for details). <p> Moreover, any such connective is expressible in it via introduction and elimination rules as in ordinary sequent calculi, the only distinction being that we have a pair of introduction rules and a pair of elimination rules corresponding to two premise sets and two conclusion sets, respectively (see <ref> [7, 8] </ref> for details). In this study, however, we are not interested in a four-valued reasoning in its generality. Rather, we will be primarily interested in what information such a reasoning can give us about ordinary, classical truth and falsity, that is about t and f . <p> Definition 3.1. If M m is a set of all positively minimal bimodels of a bi-consequence relation fl, then fl M m will be called a circumscription of fl. We will denote this biconsequence relation by fl c . The following proposition (proved in <ref> [7] </ref>) provides a syntactic characterization of circumscription. Proposition 3.1. <p> More 13 over, it is shown in <ref> [7] </ref> that fl c can even be characterized as the greatest biconsequence relation having the same bisequents of such form as fl. <p> Consequently, if : v 1 1 : v holds (that is, if v is an admissible negative part of the negative extension), then any bimodel (u; v) of fl 1 will also be a bimodel of fl 0 and vice versa. As a result, we immediately obtain (see <ref> [7] </ref>): Proposition 3.2. If fl 1 is a negative extension of fl 0 , then fl c 1 is a negative extension of fl c 0 . <p> If fl is a normal biconsequence relation, then A : fl c : d if and only if : d 1 A :. 2 A suitable counterexample can be produced (see <ref> [7] </ref>) showing that the finiteness re striction is essential for this result. 17 It can be shown that, for normal biconsequence relations, a :fl c : d holds only if A : fl c : d, for some A from a. <p> Definition 5.3. A biconsequence relation will be called L-regular if it sat isfies the following logical rule for L-propositions: : b fl : a The following proposition has been proved in <ref> [7] </ref>: Proposition 5.1. <p> Thus, normal and disjunctive bicon-sequence relations are affirmative. The following proposition, also proved in <ref> [7] </ref>, uses the fact that such biconsequence relations are always f_; :g-regular and, moreover, satisfy the condition of Proposition 5.1 for this language. Proposition 5.2. Any affirmative biconsequence relation has a consistent f_; :g-completion.
Reference: [8] <author> A. </author> <title> Bochman (1997) Biconsequence relations: A general formalism of reasoning with inconsistency and incompleteness. </title> <note> (Submitted) </note>
Reference-contexts: Most of the results in this and the next two sections (together with their proofs) can be found in [7] and <ref> [8] </ref>. As was said, a logical formalism we suggest for representing logic programs will be based on a four-valued entailment. More exactly, we are primarily interested in a four-valued inference based on a particular interpretation of the four truth-values suggested by Belnap in [3]. <p> Moreover, any such connective is expressible in it via introduction and elimination rules as in ordinary sequent calculi, the only distinction being that we have a pair of introduction rules and a pair of elimination rules corresponding to two premise sets and two conclusion sets, respectively (see <ref> [7, 8] </ref> for details). In this study, however, we are not interested in a four-valued reasoning in its generality. Rather, we will be primarily interested in what information such a reasoning can give us about ordinary, classical truth and falsity, that is about t and f . <p> the sense that they give classical values when their arguments receive classical values t or f . 2.4 Classical Connectives It turns out that in the class of all classical four-valued functions we can choose four natural connectives that are sufficient for expressing all such functions (this is shown in <ref> [8] </ref>). 8 The first is a well-known disjunction connective: - j= A _ B iff - j= A or - j= B Next, there are two unary connectives that can be seen as natural `exten sions' of a classical negation to the four-valued setting: - j= ~A iff - =j A <p> The influence of the underlying language L amounts to imposing language restrictions on the applicability of the coherence rules. As we will see in the second part of the study, different semantics for logic programs can be obtained by varying these restrictions. As is shown in <ref> [8] </ref>, the actual constraint imposed by a logical rule can be `measured' in terms of what restrictions it imposes on the associated basic biconsequence relation. A rule that holds for a biconsequence relation will be called structural if it is a logical rule with respect to the empty language ;.
Reference: [9] <author> A. </author> <title> Bochman (1997) A logical foundation for logic programming II: Semantics of general logic programs. </title> <journal> J. of Logic Programming </journal>
Reference-contexts: In this way we will restore the lost connection between Logic and Logic Programming. In the second part of this study <ref> [9] </ref>, we will show that the formalism allows us to give uniform representation of various semantics for disjunctive logic programs involving negation as failure, suggested in the literature. 1.2 Logic Programming and Nonmonotonic Reasoning The formalism of biconsequence relations will also bring us another important benefit, namely a clear separation between <p> It amounts to a relativization of the principle with respect to negative information. As we will see in the second part of this study <ref> [9] </ref>, the resulting construction actually serves as a common nonmonotonic component of all the major semantics for logic programs. The notion of a minimal model used by the minimization principle is based on the ordering of models by inclusion with respect to propositional atoms that hold in them. <p> Actually, the very formalism used by Przymusinski in that paper was very similar to that of a four-valued logic (we will discuss this in more details in <ref> [9] </ref>). <p> This biconsequence relation can be seen as representing a logical theory corresponding to P . Now, for all semantics we will consider in the second part of this study <ref> [9] </ref>, P and fl P (viewed as a set of program rules) will have the same semantics. <p> We have presented also a uniform construction of the semantics for such programs. In the second part <ref> [9] </ref> we will show that this construction is sufficiently expressive to capture major existing semantics of logic programs of this kind. <p> As a first benefit of this separation, we have `discerned' a logic appropriate for general logic programs, and thereby 22 restored the connection between Logic and Logic Programming. Moreover, as will be seen from the results in the second part <ref> [9] </ref>, common kinds of reasoning about logic programs and their semantics are reducible, in effect, to different kinds of logical reasoning in a certain well-defined (nonmonotonic) extension of the source theory.
Reference: [10] <author> S. Brass and J. </author> <title> Dix (1994) A disjunctive semantics based on unfolding and bottom-up evaluation. </title> <editor> In B. Wolfinger, editor, Innovationen bei Rechen- und Kommunikationssystemen, </editor> <booktitle> (IFIP '94-Congress, Workshop FG2: Disjunctive Logic Programming and Disjunctive Databases), </booktitle> <pages> pages 83-91, </pages> <address> Berlin, 1994. </address> <publisher> Springer. </publisher>
Reference-contexts: We will show now that this feature of the circumscribed biconsequence relation constitutes a logical basis of the partial deduction (or evaluation) principle for logic programs (see <ref> [10, 11, 17, 34] </ref>). <p> We will show now that this feature of the circumscribed biconsequence relation constitutes a logical basis of the partial deduction (or evaluation) principle for logic programs (see [10, 11, 17, 34]). The Generalized Principle of Partial Evaluation (GPPE) from <ref> [10, 11, 17] </ref> can be easily formulated for biconsequence relations in general and amounts to the following: If S is a set of bisequents, replace a bisequent A; a : b fl c : d by a set of bisequents a; a i : b; b i fl c; c i
Reference: [11] <author> S. Brass and J. </author> <title> Dix (1995) Disjunctive semantics based upon partial and bottom-up evaluation. </title> <editor> In L. Sterling, editor, </editor> <booktitle> Proceedings of the 12th Int. Conf. on Logic Programming, Tokyo, </booktitle> <pages> pages 199-213. </pages> <publisher> MIT Press. </publisher>
Reference-contexts: We will show now that this feature of the circumscribed biconsequence relation constitutes a logical basis of the partial deduction (or evaluation) principle for logic programs (see <ref> [10, 11, 17, 34] </ref>). <p> We will show now that this feature of the circumscribed biconsequence relation constitutes a logical basis of the partial deduction (or evaluation) principle for logic programs (see [10, 11, 17, 34]). The Generalized Principle of Partial Evaluation (GPPE) from <ref> [10, 11, 17] </ref> can be easily formulated for biconsequence relations in general and amounts to the following: If S is a set of bisequents, replace a bisequent A; a : b fl c : d by a set of bisequents a; a i : b; b i fl c; c i
Reference: [12] <author> S. Brass, J. Dix and T. </author> <title> Przymusinski (1996) Super logic programs. In L.C. </title> <editor> Aiello, J. Doyle, and S.C. Shapiro (eds.) </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proc. Fifth Int. Conference (KR'96), </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA., </address> <pages> pages 529-541. </pages>
Reference-contexts: As follows from the theorem, the resulting set of bisequents will be sufficient for representing the circumscribed biconsequence relation. Remark. The above procedure is actually equivalent to the construction of generalized Clark's completion of the residual program suggested in <ref> [12] </ref> for what is called there `super logic programs'.
Reference: [13] <author> J. </author> <title> Dix (1991) Classifying semantics of logic programs. </title> <editor> In A. Nerode, W. Marek, and V. S. Subrahmanian, eds, </editor> <booktitle> Logic Programming and Non-Monotonic Reasoning, Proceedings of the first International Workshop, </booktitle> <pages> pages 166-180, </pages> <address> Cambridge, Mass., </address> <publisher> MIT Press. </publisher> <pages> 24 </pages>
Reference-contexts: In recent years, however, an important work has been done, mainly by Jurgen Dix and his colleagues, in developing some general criteria for evaluating and classifying existing semantics for logic programs see <ref> [13, 14, 15, 16, 18] </ref>; cf. also [35].
Reference: [14] <author> J. </author> <title> Dix (1992) Classifying semantics of disjunctive logic programs. </title> <editor> In K. Apt (ed), </editor> <booktitle> Proc. </booktitle> <publisher> JICSLP'92 , the MIT Press, </publisher> <pages> pp. 798-812. </pages>
Reference-contexts: In recent years, however, an important work has been done, mainly by Jurgen Dix and his colleagues, in developing some general criteria for evaluating and classifying existing semantics for logic programs see <ref> [13, 14, 15, 16, 18] </ref>; cf. also [35].
Reference: [15] <author> J. </author> <title> Dix (1995) A classification theory of semantics of normal logic programs: II. Weak properties. </title> <journal> Fundamenta Informaticae, </journal> <volume> 22: </volume> <pages> 257-288. </pages>
Reference-contexts: In recent years, however, an important work has been done, mainly by Jurgen Dix and his colleagues, in developing some general criteria for evaluating and classifying existing semantics for logic programs see <ref> [13, 14, 15, 16, 18] </ref>; cf. also [35].
Reference: [16] <author> J. </author> <title> Dix (1995) Semantics of logic programs: their intuitions and formal properties. An overview In A. </title> <editor> Fuhrmann and H. Rott (eds.) </editor> <booktitle> Logic, Action and Information Essays on Logic in Philosophy and Artificial Intelligence, </booktitle> <publisher> De Gruyter, </publisher> <year> 1995, </year> <pages> pp. 241-327. </pages>
Reference-contexts: In recent years, however, an important work has been done, mainly by Jurgen Dix and his colleagues, in developing some general criteria for evaluating and classifying existing semantics for logic programs see <ref> [13, 14, 15, 16, 18] </ref>; cf. also [35].
Reference: [17] <author> J. Dix and M. </author> <title> Muller (1994) Partial evaluation and relevance for approximations of the stable semantics. </title> <editor> Z.W. Raz and M. Zemankova (eds) Proc. </editor> <publisher> ISMIS'94 , LNAI 869, </publisher> <pages> pp. 511-520. </pages>
Reference-contexts: We will show now that this feature of the circumscribed biconsequence relation constitutes a logical basis of the partial deduction (or evaluation) principle for logic programs (see <ref> [10, 11, 17, 34] </ref>). <p> We will show now that this feature of the circumscribed biconsequence relation constitutes a logical basis of the partial deduction (or evaluation) principle for logic programs (see [10, 11, 17, 34]). The Generalized Principle of Partial Evaluation (GPPE) from <ref> [10, 11, 17] </ref> can be easily formulated for biconsequence relations in general and amounts to the following: If S is a set of bisequents, replace a bisequent A; a : b fl c : d by a set of bisequents a; a i : b; b i fl c; c i
Reference: [18] <author> J. Dix and M. </author> <title> Muller (1994) An axiomatic framework for representing and characterizing semantics of disjunctive logic programs. </title> <editor> In P. Van Hentenryck, editor, </editor> <booktitle> Proceedings of the 11th Int. Conf. on Logic Programming, S. Margherita Ligure, </booktitle> <pages> pages 303-322. </pages> <publisher> MIT Press. </publisher>
Reference-contexts: In recent years, however, an important work has been done, mainly by Jurgen Dix and his colleagues, in developing some general criteria for evaluating and classifying existing semantics for logic programs see <ref> [13, 14, 15, 16, 18] </ref>; cf. also [35].
Reference: [19] <author> P.H. </author> <title> Dung (1995) An argumentation-theoretic foundation for logic programming. </title> <journal> J. of Logic Programming, </journal> <volume> 22: </volume> <pages> 151-177. </pages>
Reference-contexts: In addition, a number of approaches have appeared that partly overcome the above problem by grounding a reasoning about logic programs and (some of) their semantics on various logical formalisms, be it three-valued logic [30], intuitionistic logic [29], a general theory of argumentation <ref> [19] </ref>, or a modal logic [32]. In this study we will show that there exists a logical interpretation of program clauses of a most general kind that agrees with the majority of their procedural interpretations. In our framework, such program clauses will be considered as genuine logical formulas.
Reference: [20] <author> M.C. </author> <title> Fitting (1989) Bilattices and the theory of truth. </title> <journal> J. of Philosophical Logic, </journal> <volume> 18: </volume> <pages> 225-256. </pages>
Reference-contexts: This understanding of the four truth-values was suggested by Belnap in [3] and has been widely used since then, mainly in order to give representation of reasoning and logic programming in presence of both incomplete and inconsistent information (see, e.g., <ref> [4, 20, 33, 37] </ref>, to mention only a few). What we are going to show here is that it can also serve 2 as a logical basis of logic programming in general.
Reference: [21] <author> M. Gelfond and V. </author> <title> Lifschitz (1991) Classical negation and disjunctive databases. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 365-385. </pages>
Reference-contexts: Though less immediate, an extension of the notion of a program to so-called disjunctive programs [27], and especially introduction of normal logic programs with a second, `classical' negation <ref> [21, 1] </ref> had the same effect of weakening the connection between Logic Programming and (classical) Logic. The absence of a clear and uniform logical basis behind logic programs with negation as failure has resulted in an unbridled proliferation of semantics suggested for such programs. <p> A warning note. The local negation : should not be identified with the classical, or explicit, negation used in some current extensions of logic programming (see <ref> [21, 1] </ref>). The latter is usually weaker than the local negation and, in particular, does not support the above transformation (3), or even a weaker property of contraposition.
Reference: [22] <author> M.L. </author> <title> Ginsberg (1990) Bilattices and modal operators. </title> <booktitle> In Proc. </booktitle> <editor> TARK'90 , ed. by R. Parikh, </editor> <publisher> Morgan Kauffman, </publisher> <pages> pp. 273-287. </pages>
Reference-contexts: It determines a (rudimentary) modal logic definable in the four-valued setting. - j= LA iff - j= A 1 Ginsberg <ref> [22] </ref> considered L as representing the belief operator of autoepistemic logic. 9 It can be shown that all these connectives can be characterized using suitable introduction and elimination rules, given below.
Reference: [23] <author> K. Inoue and C. </author> <title> Sakama (1994) On positive occurrences of negation as failure. </title> <booktitle> In Proc. 4th Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <address> KR'94, </address> <publisher> Morgan Kauffman, </publisher> <address> San Francisco, CA., </address> <year> 1994, </year> <pages> pages 293-304. </pages>
Reference-contexts: implies that any biconsequence relation is determined in this sense by some set of bimodels. 2.2 Biconsequence Relations and Logic Programs In our approach, bisequents will serve as direct representations of logic programming rules of a most general kind, namely those involving disjunction and negation in their heads (see, e.g., <ref> [23] </ref> for a use of rules with not in heads).
Reference: [24] <author> V. </author> <title> Lifschitz (1994) Minimal belief and negation as failure. </title> <journal> Artificial Intelligence, </journal> <volume> 70 </volume> <pages> 53-72, </pages> <year> 1994. </year> <month> 25 </month>
Reference-contexts: Investigations into the nature of this connection have turned out to be mutually profitable. For example, many of the declarative semantics suggested for logic programs have been extended to other nonmonotonic formalisms (see, e.g., <ref> [2, 24, 28] </ref>). From the viewpoint of our framework, the connection between these two fields turns out to be even closer. In our approach, the reasoning about logic programs and their semantics constitutes a (most simple) kind of nonmono-tonic reasoning in general.
Reference: [25] <author> V. Lifschitz and G. </author> <title> Schwarz (1993) Extended logic programs as autoepis--temic theories. </title> <booktitle> In Proc. Second Int. Workshop on Logic Programming and Nonmonotonic Reasoning, </booktitle> <editor> L.M. Pereira and A. Nerode (eds.), </editor> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1993, </year> <pages> pages 101-114. </pages>
Reference: [26] <author> V. Lifschitz and T. </author> <title> Woo (1992) Answer sets in general nonmonotonic reasoning (preliminary report). </title> <booktitle> In Proc. Third Int. Conf. on Principles of Knowledge Representation and Reasoning, KR`92, </booktitle> <publisher> Morgan Kauffman, </publisher> <year> 1992, </year> <pages> pages 603-614. </pages>
Reference: [27] <author> J. Lobo, J. Minker, and A. </author> <title> Rajasekar (1992) Foundations of Disjunctive Logic Programming. </title> <publisher> MIT Press. </publisher>
Reference-contexts: Though less immediate, an extension of the notion of a program to so-called disjunctive programs <ref> [27] </ref>, and especially introduction of normal logic programs with a second, `classical' negation [21, 1] had the same effect of weakening the connection between Logic Programming and (classical) Logic.
Reference: [28] <author> W. </author> <title> Marek and V.S. Subrahmanian (1992) The relationship between stable, supported, default and autoepistemic semantics for general logic programs. </title> <journal> Theoretical Computer Science, </journal> <volume> 103: </volume> <pages> 365-386. </pages>
Reference-contexts: Investigations into the nature of this connection have turned out to be mutually profitable. For example, many of the declarative semantics suggested for logic programs have been extended to other nonmonotonic formalisms (see, e.g., <ref> [2, 24, 28] </ref>). From the viewpoint of our framework, the connection between these two fields turns out to be even closer. In our approach, the reasoning about logic programs and their semantics constitutes a (most simple) kind of nonmono-tonic reasoning in general.
Reference: [29] <author> D. </author> <title> Pearce (1997) A new logical characterization of stable models and answer sets. </title> <editor> In J. Dix, L. Pereira, and T. Przymusinski, eds., </editor> <booktitle> Proc. Workshop on Non-Monotonic Extensions of Logic Programming, </booktitle> <publisher> Springer Verlag (Lect. Notes in AI). </publisher>
Reference-contexts: In addition, a number of approaches have appeared that partly overcome the above problem by grounding a reasoning about logic programs and (some of) their semantics on various logical formalisms, be it three-valued logic [30], intuitionistic logic <ref> [29] </ref>, a general theory of argumentation [19], or a modal logic [32]. In this study we will show that there exists a logical interpretation of program clauses of a most general kind that agrees with the majority of their procedural interpretations. <p> Cf. also <ref> [29] </ref> for still another account of the distinction between well-founded and stable semantics. Finally, as we mentioned in the Introduction, there is a fairly general way of `lifting' our formalism of biconsequence relations to a formalism that subsumes classical inference.
Reference: [30] <author> H. Przymusinska and T. </author> <title> Przymusinski (1990) Semantic issues in deductive databases and logic programs, </title> <editor> in R. Benerji (ed.) </editor> <booktitle> Formal Techniques in Artificial Intelligence, </booktitle> <publisher> North-Holland: Amsterdam, </publisher> <pages> pp. 321-367. </pages>
Reference-contexts: In addition, a number of approaches have appeared that partly overcome the above problem by grounding a reasoning about logic programs and (some of) their semantics on various logical formalisms, be it three-valued logic <ref> [30] </ref>, intuitionistic logic [29], a general theory of argumentation [19], or a modal logic [32]. In this study we will show that there exists a logical interpretation of program clauses of a most general kind that agrees with the majority of their procedural interpretations.
Reference: [31] <author> T.C. </author> <title> Przymusinski (1991) Semantics of disjunctive logic programs and deductive databases. </title> <booktitle> In Proc. Second Int. Conf. on Deductive and Object-Oriented Databases, </booktitle> <publisher> DOOD'91 , Springer Verlag, </publisher> <pages> pp. 85-107. </pages>
Reference-contexts: This principle of nonmonotonic reason 12 ing has already a long history that begins with McCarthy's Circumscription, Reiter's Closed World Assumption and Minker's Generalized CWA. A modification of the minimization principle appropriate to our `bicom-ponent' context was suggested, in fact, by Teodor Przymusinski in <ref> [31] </ref> and subsequent papers (see also [36]), though our description will be somewhat different from that given there. It amounts to a relativization of the principle with respect to negative information. <p> Finally, note that if fl is represented using the corresponding logical formulas, then fl c can be described as a result of circumscribing fl with respect to atomic propositions that are not in the scope of ~ (see <ref> [31] </ref>). In other words, fl c can be seen as a result of a parameterized circumscription that does not vary negative propositions. Circumscription is in general a nonmonotonic operation. In other words, flfl 1 does not imply, in general, that fl c is included in fl c 1 . <p> As a matter of fact, the above construction of the non-monotonic completion and semantics have arisen as a certain modification of Teodor Przymusinski's earlier, non-modal construction of stationary completion and semantics for disjunctive logic programs, suggested in <ref> [31] </ref>. Actually, the very formalism used by Przymusinski in that paper was very similar to that of a four-valued logic (we will discuss this in more details in [9]).
Reference: [32] <author> T.C. </author> <title> Przymusinski (1995) Static semantics for normal and disjunctive logic programs. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> 14 </volume> <pages> 323-357. </pages>
Reference-contexts: In addition, a number of approaches have appeared that partly overcome the above problem by grounding a reasoning about logic programs and (some of) their semantics on various logical formalisms, be it three-valued logic [30], intuitionistic logic [29], a general theory of argumentation [19], or a modal logic <ref> [32] </ref>. In this study we will show that there exists a logical interpretation of program clauses of a most general kind that agrees with the majority of their procedural interpretations. In our framework, such program clauses will be considered as genuine logical formulas. <p> For any consistent biconsequence relation fl, if fl c is L regular, then fl has a consistent nonmonotonic L-completion. 21 A biconsequence relation will be called affirmative (cf. <ref> [32] </ref>) if it does not contain basic bisequents of the `constraint' form a : b fl : d (in other words, any bisequent has positive conclusions). Thus, normal and disjunctive bicon-sequence relations are affirmative.
Reference: [33] <author> C. Sakama and K. </author> <title> Inoue (1995) Paraconsistent stable semantics for extended disjunctive programs. </title> <journal> J. of Automated Reasoning, </journal> <volume> 5: </volume> <pages> 265-285. </pages>
Reference-contexts: This understanding of the four truth-values was suggested by Belnap in [3] and has been widely used since then, mainly in order to give representation of reasoning and logic programming in presence of both incomplete and inconsistent information (see, e.g., <ref> [4, 20, 33, 37] </ref>, to mention only a few). What we are going to show here is that it can also serve 2 as a logical basis of logic programming in general.
Reference: [34] <author> C. Sakama and H. </author> <title> Seki (1994) Partial deduction of disjunctive logic programs: A declarative approach. </title> <editor> In L. Fribourg, F. Turini (eds.) </editor> <title> Logic Program Synthesis and Transformation - Meta-Programming in Logic, </title> <publisher> LNCS 883, </publisher> <pages> pp. 170-181. 26 </pages>
Reference-contexts: We will show now that this feature of the circumscribed biconsequence relation constitutes a logical basis of the partial deduction (or evaluation) principle for logic programs (see <ref> [10, 11, 17, 34] </ref>).
Reference: [35] <author> J. S. </author> <title> Schlipf (1992). Formalizing a logic for logic programming. </title> <journal> Annals of Mathematics and Artificial Intelligence 5 </journal> <pages> 279-302. </pages>
Reference-contexts: In recent years, however, an important work has been done, mainly by Jurgen Dix and his colleagues, in developing some general criteria for evaluating and classifying existing semantics for logic programs see [13, 14, 15, 16, 18]; cf. also <ref> [35] </ref>. In addition, a number of approaches have appeared that partly overcome the above problem by grounding a reasoning about logic programs and (some of) their semantics on various logical formalisms, be it three-valued logic [30], intuitionistic logic [29], a general theory of argumentation [19], or a modal logic [32].
Reference: [36] <author> L. Y. Yuan and J.-H. </author> <title> You (1993) Autoepistemic circumscription and logic programming J. </title> <booktitle> of Automated Reasoning 10: </booktitle> <pages> 143-160. </pages>
Reference-contexts: A modification of the minimization principle appropriate to our `bicom-ponent' context was suggested, in fact, by Teodor Przymusinski in [31] and subsequent papers (see also <ref> [36] </ref>), though our description will be somewhat different from that given there. It amounts to a relativization of the principle with respect to negative information. <p> As a result, the fixed-point characterization of the completion was replaced by coherence closure of the circumscribed consequence relation. This idea of performing circumscription `in one step' with subsequent closure with respect to coherence rules was `borrowed', in fact, from <ref> [36] </ref>. Let us consider the extent to which the general construction of nonmono-tonic completion above depends on the underlying language. Note first that circumscription, as it is described earlier in the paper, is language independent since it is defined on the level of basic bisequents.

References-found: 36

