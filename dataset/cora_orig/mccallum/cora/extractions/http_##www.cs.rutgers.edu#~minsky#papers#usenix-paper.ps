URL: http://www.cs.rutgers.edu/~minsky/papers/usenix-paper.ps
Refering-URL: http://www.cs.rutgers.edu/~minsky/pubs.html
Root-URL: http://www.cs.rutgers.edu
Email: fminsky,ungureang@cs.rutgers.edu  
Title: Unified Support for Heterogeneous Security Policies in Distributed Systems  
Author: Naftaly H. Minsky Victoria Ungureanu 
Address: New Brunswick, NJ 08903  
Affiliation: Department of Computer Science Rutgers University  
Abstract: To deal with this problem we propose in this paper a security mechanism that can support efficiently, and in a unified manner, a wide range of security models and policies, including: conventional discretionary models that use capabilities or access-control lists, mandatory lattice-based access control models, and the more sophisticated models and policies required for commercial applications. Moreover, under the proposed mechanism, a single agent may be involved in several different modes of interactions that are subject to disparate security policies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. R. Anderson. </author> <title> A security policy model for clinical information systems. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: This toolkit can support a wide range of security models and policies, including: conventional discretionary models that use capabilities or access-control lists, mandatory lattice-based access control models [18], and the more sophisticated models and policies required for commercial [5] and clinical <ref> [1] </ref> applications. Moreover, under Moses, a single agent may be involved in several different modes of interactions that are subject to disparate security policies.
Reference: [2] <author> K.P. Birman. </author> <title> The process group approach to reliable distributed computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(12) </volume> <pages> 36-53, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Fail-stop failures of these two kinds can be handled by well known methods. Failures of the secretary can be addressed by means of the state-machine approach [19], using a toolkit such as Isis <ref> [2] </ref> for the active replication of the secretary. Failures by controllers can be analogously handled by replication of each controller. Alternatively, given a reliable secretary, it may be sufficient for the controllers to notify the secretary of all state changes.
Reference: [3] <author> M. Blaze, J. Feigenbaum, and J. Lacy. </author> <title> Decentralized trust managemnt. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: Such capabilities contain access control programs (ACP) encoding the security policy to be enforced with respect to this capability. When a server receives a request accompanied by such a generalized capability, it executes the ACP to determine whether the request is valid or not. Finally, Blaze, Feigenbaum and Lacy <ref> [3] </ref> built a toolkit called PolicyMaker which can interpret security policies. An agent receiving a request gives it for evaluation to PolicyMaker together with its specific policy, and the requester's credentials.
Reference: [4] <author> D. Brewer and M. Nash. </author> <title> The Chinese Wall security policy. </title> <booktitle> In Proceedings of the IEEE Symposium in Security and Privacy. IEEE Computer Society, </booktitle> <year> 1989. </year>
Reference-contexts: For example, an agent may be subject to a multi-level security policy when retrieving military documents; it may carry capabilities that provide it with certain access rights to computing resources; and, while accessing certain financial information, it may be subject to the "Chinese Wall" security policy <ref> [4] </ref>. If every such policy is expressed by means of a different formalism and enforced with a different mechanism, the situation can get easily out of hand. <p> And let the clients of this database be financial analysts, who may have access to any number of competition cliques. According to a common commercial practice, such access is subject to the Chinese Wall (CW) policy <ref> [4] </ref> which can be stated as follows: A priori, an analyst can get information about any company of a clique q to which he has access.
Reference: [5] <author> D.D. Clark and D.R. Wilson. </author> <title> A comparison of commercial and military computer security policies. </title> <booktitle> In Proceedings of the IEEE Symposium in Security and Privacy, </booktitle> <pages> pages 184-194. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1987. </year>
Reference-contexts: This toolkit can support a wide range of security models and policies, including: conventional discretionary models that use capabilities or access-control lists, mandatory lattice-based access control models [18], and the more sophisticated models and policies required for commercial <ref> [5] </ref> and clinical [1] applications. Moreover, under Moses, a single agent may be involved in several different modes of interactions that are subject to disparate security policies. <p> In particular, after asking PolicyMaker for its ruling one can proceed by ignoring it. Also, in both these approaches the rights a user has are static: they cannot be modified in accordance with its actions. Thus, a large range of security policies, like separation of duties <ref> [5] </ref>, Chinese Wall, and the movable but uncopyable capabilities, where the state of a user determines his rights, cannot be enforced. 6 Conclusion The essence of the security mechanism proposed here is the existence of a law that is guaranteed to be observed by all members of a given policy-group.
Reference: [6] <author> E. Cohen and D. Jefferson. </author> <title> Protection in the HYDRA operating system. </title> <booktitle> In Operating Systems Principles, </booktitle> <pages> pages 141-160. </pages> <publisher> ACM, </publisher> <month> Nov. </month> <year> 1975. </year>
Reference-contexts: In distributed systems however, the full power of capabilities has not been realized so far. In particular, in timesharing operating systems like Hydra <ref> [6] </ref> and StarOs [10] it was possible to control dissemination of capabilities by specifying whether a given capability can be moved or delegated to others. This feature is no longer supported in capability-based distributed systems [16], because nothing prevents a user from duplicating the capabilities he holds.
Reference: [7] <author> S. Foley. </author> <title> The specification and implementation of `commercial' security requirements including dynamic segregation of duties. </title> <booktitle> In Proceedings of the 4th ACM Conference on Computer and Communications Security, </booktitle> <month> April </month> <year> 1997. </year> <note> (to appear). </note>
Reference-contexts: Recently, it has been shown how this policy can be implemented in MLS systems by casting it as a multilevel lattice based relabel policy [8], or by using reflexive-flow relations <ref> [7] </ref>. However, MLS does not lend itself to distributed implementation, where the files of companies in a given clique are maintained by several servers belonging to possible different administrative domains.
Reference: [8] <author> S Foley, L. Gong, and X. Qian. </author> <title> A security model of dynamic labelling providing a tiered approach to verification. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: Recently, it has been shown how this policy can be implemented in MLS systems by casting it as a multilevel lattice based relabel policy <ref> [8] </ref>, or by using reflexive-flow relations [7]. However, MLS does not lend itself to distributed implementation, where the files of companies in a given clique are maintained by several servers belonging to possible different administrative domains.
Reference: [9] <author> M. Franklin and M. Reiter. </author> <title> The design and implementation of a secure auction service. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 2-14, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: The security requirements of this process have been studied recently by Franklin and Reiter in <ref> [9] </ref>, and paraphrased here as follows: 1. every auction has a predefined time frame for bidding, no bids can be issued outside of this frame; 2. once a bid is issued it cannot be repudiated; but one can out-bid himself any number of times. 3. the winner is the issuer of
Reference: [10] <author> A. Jones, R. Chansler Jr., I. Durham, K. Schwans, and S. Vegdahl. StarOS, </author> <title> a multiprocessor operating system for the support of task forces. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 117-127, </pages> <month> Dec </month> <year> 1979. </year>
Reference-contexts: In distributed systems however, the full power of capabilities has not been realized so far. In particular, in timesharing operating systems like Hydra [6] and StarOs <ref> [10] </ref> it was possible to control dissemination of capabilities by specifying whether a given capability can be moved or delegated to others. This feature is no longer supported in capability-based distributed systems [16], because nothing prevents a user from duplicating the capabilities he holds.
Reference: [11] <author> M. Jones and B. Schneier. </author> <title> Securing the World Wide Web: Smart Tokens and their implementation. </title> <booktitle> In Proceedings of the Fourth International World Wide Web Conference, </booktitle> <pages> pages 397-409, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: Each controller would acquire the law that needs to be interpreted from some trusted authority. One way to handle the case of untrusted OS-kernels is to ensure the integrity of the controllers by building them into physically secure coprocessors [22, 23], or into smart cards <ref> [11] </ref>. Such a secure device consists of a CPU, non-volatile memory, encryption hardware and special sensing circuitry to detect intrusion. The sensing circuitry erases non-volatile memory before attackers can penetrate far enough to disable the sensors or read memory contents.
Reference: [12] <author> S. Kent. </author> <title> Internet privacy enhanced mail. </title> <journal> Communications of the ACM, </journal> <month> August </month> <year> 1993. </year>
Reference-contexts: The arrival of a move (capability (..)) message causes the addition of the corresponding capabil ity in the control state of the receiver . regime is likely to require authentication, which can be in form of a password, an X.509 certificate <ref> [12] </ref> or the recently developed SDSI certificate [17]. If the secretary agrees to make the connection, it would assign x to some controller interpreting law L P , after providing this controller with the current control-state and the public key of the agent.
Reference: [13] <author> N.H. Minsky. </author> <title> The imposition of protocols over open distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> February </month> <year> 1991. </year>
Reference-contexts: Each policy under this scheme specifies the type of messages regulated by it and the law that governs these messages. The proposed mechanism is based on the concept of "law-governed architecture" for distributed systems <ref> [13] </ref>, and on the more recent concept of "regulated interaction" (RI) [14]; it is currently implemented by an experimental toolkit called Moses.
Reference: [14] <author> N.H. Minsky and V. Ungureanu. </author> <title> Regulated coordination in open distributed systems. </title> <editor> In David Garlan and Daniel Le Metayer, editors, </editor> <booktitle> Proc. of Coordination'97: Second International Conference on Coordination Models and Languages; LNCS 1282, </booktitle> <pages> pages 81-98, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: Each policy under this scheme specifies the type of messages regulated by it and the law that governs these messages. The proposed mechanism is based on the concept of "law-governed architecture" for distributed systems [13], and on the more recent concept of "regulated interaction" (RI) <ref> [14] </ref>; it is currently implemented by an experimental toolkit called Moses.
Reference: [15] <author> N.H. Minsky, V. Ungureanu, W. Wang, and J. Zhang. </author> <title> Building reconfiguration primitives into the law of a system. </title> <booktitle> In Proc. of the Third International Conference on Configurable Distributed Systems (IC-CDS'96), </booktitle> <month> March </month> <year> 1996. </year> <note> (available through http://www.cs.rutgers.edu/~minsky/). </note>
Reference-contexts: When this "program" R is presented with a goal e, representing a regulated event, and with the control-state of the home agent, it produces a list of primitive-operations representing the ruling of the law for this event. For the details of this formulation the reader is referred to <ref> [15] </ref>; here we will illustrate it with a detailed example in Section 3.4. 3.3 The Distributed Enforcement Mechanism The law for a given policy P=hL; M; Gi is enforced in principle as follows: there is a controller associated with each member of group G, logically placed between the agent and the
Reference: [16] <author> S. Mullender, G. Rossum, A. Tanembaum, R. Van Renesse, and H. </author> <title> Staveren. </title> <booktitle> Amoeba:a distributed operating system for the 1990s. IEEE Computer, </booktitle> <month> May </month> <year> 1990. </year>
Reference-contexts: In particular, in timesharing operating systems like Hydra [6] and StarOs [10] it was possible to control dissemination of capabilities by specifying whether a given capability can be moved or delegated to others. This feature is no longer supported in capability-based distributed systems <ref> [16] </ref>, because nothing prevents a user from duplicating the capabilities he holds. We do not have this problem because capabilities are kept by controllers, which are trusted to execute only prescribed operations.
Reference: [17] <author> R. Rivest and B. Lampson. </author> <title> SDSI-a simple distributed security infrastructure. </title> <type> Technical report, </type> <year> 1996. </year> <note> http://theory.lcs.mitedu/~rivest/sdsi.ps. </note>
Reference-contexts: The arrival of a move (capability (..)) message causes the addition of the corresponding capabil ity in the control state of the receiver . regime is likely to require authentication, which can be in form of a password, an X.509 certificate [12] or the recently developed SDSI certificate <ref> [17] </ref>. If the secretary agrees to make the connection, it would assign x to some controller interpreting law L P , after providing this controller with the current control-state and the public key of the agent.
Reference: [18] <author> Ravi Sandhu. </author> <title> Lattice-based access control models. </title> <booktitle> IEEE Computer, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: This toolkit can support a wide range of security models and policies, including: conventional discretionary models that use capabilities or access-control lists, mandatory lattice-based access control models <ref> [18] </ref>, and the more sophisticated models and policies required for commercial [5] and clinical [1] applications. Moreover, under Moses, a single agent may be involved in several different modes of interactions that are subject to disparate security policies.
Reference: [19] <author> F.B. Schneider. </author> <title> Implementing fault tolerant services using the state machine approach. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 300-319, </pages> <year> 1990. </year>
Reference-contexts: Fail-stop failures of these two kinds can be handled by well known methods. Failures of the secretary can be addressed by means of the state-machine approach <ref> [19] </ref>, using a toolkit such as Isis [2] for the active replication of the secretary. Failures by controllers can be analogously handled by replication of each controller. Alternatively, given a reliable secretary, it may be sufficient for the controllers to notify the secretary of all state changes.
Reference: [20] <author> A. Tanenbaum. </author> <title> Distributed Operating Systems. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: Moreover, it is very difficult in this case (if at all possible) to implement this policy either by means of access control lists (ACL), or by the capability-based scheme | the two main access control techniques used in distributed systems <ref> [20] </ref>. The implementation of the CW policy using ACL would require each server to know what, if anything, his client got from other servers in the past, or even what he is requesting from them concurrently.
Reference: [21] <author> M. Theimer, D. Nichols, and Douglas Terry. </author> <title> Delegation through access control programs. </title> <booktitle> In Proceedings of Distributed Computing System, </booktitle> <pages> pages 529-536, </pages> <year> 1992. </year>
Reference-contexts: When a message endAuction arrives at a bidder Y, if he is a loser he gets his money back. 5 Related Work The need for a mechanism for specifying security policies as an alternative to hard coding them into an application occurred to several researchers. Theimer, Nichols and Terry <ref> [21] </ref> introduced a concept of generalized capabilities. Such capabilities contain access control programs (ACP) encoding the security policy to be enforced with respect to this capability.
Reference: [22] <author> J.D. Tygar and B. Yee. Dyad: </author> <title> A system for using physically secure coprocessors. </title> <type> Technical Report CMU-CS-91-140R, CMU, </type> <year> 1991. </year>
Reference-contexts: Each controller would acquire the law that needs to be interpreted from some trusted authority. One way to handle the case of untrusted OS-kernels is to ensure the integrity of the controllers by building them into physically secure coprocessors <ref> [22, 23] </ref>, or into smart cards [11]. Such a secure device consists of a CPU, non-volatile memory, encryption hardware and special sensing circuitry to detect intrusion. The sensing circuitry erases non-volatile memory before attackers can penetrate far enough to disable the sensors or read memory contents.
Reference: [23] <author> B. Yee. </author> <title> Using Secure Coprocessors. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Each controller would acquire the law that needs to be interpreted from some trusted authority. One way to handle the case of untrusted OS-kernels is to ensure the integrity of the controllers by building them into physically secure coprocessors <ref> [22, 23] </ref>, or into smart cards [11]. Such a secure device consists of a CPU, non-volatile memory, encryption hardware and special sensing circuitry to detect intrusion. The sensing circuitry erases non-volatile memory before attackers can penetrate far enough to disable the sensors or read memory contents.
References-found: 23

