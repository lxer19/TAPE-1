URL: http://www.iro.umontreal.ca/~scriptum/FascianoPFUF.ps.gz
Refering-URL: http://www.iro.umontreal.ca/~scriptum/PublicationsMembres.html
Root-URL: http://www.iro.umontreal.ca
Email: e-mail: ffasciano,lapalmeg@iro.umontreal.ca  
Title: A Prolog implementation of the Functional Unification Grammar Formalism  
Author: Massimo Fasciano Guy Lapalme 
Date: March 29, 1994  
Address: C.P. 6128, Succ. A Montreal, Quebec, Canada, H3C 3J7  
Affiliation: Departement d'informatique et de recherche operationnelle Universite de Montreal  
Abstract: This paper compares the use of Lisp and Prolog for the implementation of a functional grammar unification system. To achieve this comparison, we have taken as a starting point Michael Elhadad's FUF system, which is written in Lisp and produced a much smaller and more efficient Prolog version (PFUF) retaining many of FUF's essential features. Our approach is based on a precompilation scheme that reduces most of the runtime overhead. 
Abstract-found: 1
Intro-found: 1
Reference: [Boy87] <author> Michel Boyer. </author> <title> Towards Functional Logic Grammars. </title> <editor> In P. St-Dizier, editor, </editor> <booktitle> Proceedings of the Second International Workshop on Natural Language Understanding and Logic programming, </booktitle> <pages> pages 46-62, </pages> <address> Vancouver, </address> <year> 1987. </year>
Reference-contexts: For example, as can be seen in section 4, our system doesn't put the whole grammar in a single monolithic structure. It uses Prolog rules to make it more modular. PFUF's functional structure unifier is based on <ref> [Boy87] </ref> with a number of extensions, the most important being the use of alternatives (disjunctions) within the grammar. An interesting discussion of the basic model can be found in [GM89]. Our pattern unifier closely resembles FUF's. Indeed, patterns are allowed to contain holes of unspecified size. <p> This allows the Prolog compiler to do most of the optimizations for us. Our system uses a pre-processor to translate grammars from the form shown in figure 2 into a series of direct calls to the feature unifier described in <ref> [Boy87] </ref>. Thus, the preprocessor eliminates the level of meta-interpretation associated with the expansion of the "===" operator's flexible syntax. It also translates the 2 types of disjunctions and the patterns allowed in our grammars, which [Boy87] doesn't address because it wasn't aimed at FUF-type grammars. <p> in figure 2 into a series of direct calls to the feature unifier described in <ref> [Boy87] </ref>. Thus, the preprocessor eliminates the level of meta-interpretation associated with the expansion of the "===" operator's flexible syntax. It also translates the 2 types of disjunctions and the patterns allowed in our grammars, which [Boy87] doesn't address because it wasn't aimed at FUF-type grammars. A series of performance tests using the FUF 5.1 examples associated with the grammar we used (including the input shown in section 4.2) show that our system is roughly 7-8 times faster than FUF at unification.
Reference: [DHRS92] <author> R. Dale, E. Hovy, D. Rosner, and O. </author> <title> Stock, editors. Aspects of Automated Natural Language Generation. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [ED86] <author> Andreas Eisele and Jochen Dorre. </author> <title> A lexical functional grammar system in PRO-LOG. </title> <journal> In COLING-86, </journal> <year> 1986. </year>
Reference-contexts: This requires that the constituent set for all rules be known at compile time, and thus it probably requires that all possible inputs to the grammar be known in advance. It also forces a recompilation of the whole grammar to change the search algorithm. Also, <ref> [ED86] </ref> shows how feature-list unification can be compiled into term unification. This transformation might also increase performance in many cases, but has not been tested in our framework.
Reference: [Elh91] <author> Michael Elhadad. FUF: </author> <title> the Universal Unifier. User Manual Version 5.0. </title> <type> Technical report, </type> <institution> Columbia University, </institution> <year> 1991. </year>
Reference-contexts: This has the advantage of being more declarative than explicit recursive rules, thus allowing the implementation to use different control strategies. Indeed, once it is known that a constituent has to be unified, the system can choose when to do it. 2 The FUF system The FUF system <ref> [Elh91] </ref> was designed by Michael Elhadad at Columbia University. It is written entirely in Common Lisp, which makes it very portable. It uses functional structures (feature sets) to represent the grammar and the user input. In fact, the whole grammar is a single feature set.
Reference: [ER92] <author> Michael Elhadad and Jacques Robin. </author> <title> Controlling content realization with functional unification grammars. </title> <editor> In Dale et al. </editor> <publisher> [DHRS92]. </publisher>
Reference: [GM89] <author> Gerald Gazdar and Chris Mellish. </author> <title> Natural Language Processing in PROLOG | An introduction to computational linguistics. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Functional unification grammars display the following characteristics, which separate them from the standard context-free models such as the Prolog DCG formalism (see <ref> [GM89] </ref> for details): * The use of features (gender, number, etc: : : ) to constrain rule selection. * The use of flexible constraints (patterns) to specify the order of the terminals in the linearized form (natural language sentence). * Automatic unification of sub-constituents (no explicit recursive calls in the grammar <p> It uses Prolog rules to make it more modular. PFUF's functional structure unifier is based on [Boy87] with a number of extensions, the most important being the use of alternatives (disjunctions) within the grammar. An interesting discussion of the basic model can be found in <ref> [GM89] </ref>. Our pattern unifier closely resembles FUF's. Indeed, patterns are allowed to contain holes of unspecified size. For example, to specify that the subject starts the sentence and is followed somewhere in the sentence by a verb, you would use the following pattern: [subject,...,verb,...].
Reference: [Kay79] <author> Martin Kay. </author> <title> Functional Grammar. </title> <editor> In Christina Chiarello et al., editors, </editor> <booktitle> Proceedings of the Fifth Annual Meeting of the Berkeley Linguistics Society, </booktitle> <pages> pages 142-158, </pages> <year> 1979. </year>
Reference-contexts: 1 Introduction Since its introduction in the early 80's <ref> [Kay79, Kay85] </ref>, the functional unification grammar formalism has rapidly gained acceptance in the field of text generation [M + 90].
Reference: [Kay85] <author> Martin Kay. </author> <title> Unification in grammar. </title> <editor> In Veronica Dahl and Patrick Saint-Dizier, editors, </editor> <booktitle> Natural Language Understanding, </booktitle> <pages> pages 223-240, </pages> <address> Amsterdam, </address> <year> 1985. </year>
Reference-contexts: 1 Introduction Since its introduction in the early 80's <ref> [Kay79, Kay85] </ref>, the functional unification grammar formalism has rapidly gained acceptance in the field of text generation [M + 90].
Reference: [M + 90] <author> Kathleen R. McKeown et al. </author> <title> Language generation in COMET. </title> <editor> In Mellish et al. </editor> <publisher> [MDZ90]. </publisher>
Reference-contexts: 1 Introduction Since its introduction in the early 80's [Kay79, Kay85], the functional unification grammar formalism has rapidly gained acceptance in the field of text generation <ref> [M + 90] </ref>.
Reference: [MDZ90] <editor> Chris Mellish, Robert Dale, and Michael Zock, editors. </editor> <booktitle> Current Research in Language Generation. </booktitle> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference: [MT90] <editor> Philip Miller and Therese Torris, editors. Formalismes syntaxiques pour le traite-ment automatique du langage naturel. </editor> <publisher> Hermes, </publisher> <year> 1990. </year>
References-found: 11

