URL: http://enuxsa.eas.asu.edu:80/~ihrig/paper1.ps
Refering-URL: http://enuxsa.eas.asu.edu:80/~ihrig/
Root-URL: 
Email: Email: fihrig, raog@asu.edu  
Phone: Phone: (602) 965-0113 FAX: (602) 965-2751  
Title: Plan-space vs. State-space Planning in Reuse and Replay Key Words: Planning, Machine Learning, Case Based
Author: Laurie Ihrig Subbarao Kambhampati 
Date: December 20, 1996  
Address: Tempe, AZ 85287-5406, USA  
Affiliation: Department of Computer Science and Engineering, Arizona State University,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Barrett and D. Weld. </author> <title> Partial order planning: evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <volume> 67 </volume> <pages> 71-112, </pages> <year> 1994. </year>
Reference-contexts: We will demonstrate through focused experimental studies in both reuse and replay that plan-space planners which make a weak commitment as to the ordering of steps have a greater ability to extend the skeletal plan. This has already been shown to be an advantage in generative planning <ref> [28, 1] </ref>. However, we find that the ability to splice in new steps and subplans into an existing sequence is of even greater benefit in exploiting previous experience through CBP. In our experiments plan-space and states-space planners show consistently wider performance differentials with replay than they do in from-scratch planning. <p> These include forward-chaining means-ends analysis planners such as STRIPS [6], and PRODIGY [4] 1 There exist another class of planners which do backward search in the space of world states, starting with the goal state (for example, TOPI <ref> [1] </ref>). These planners add new actions only to the beginning of the partial solution during refinement. <p> Later, as conflicts are detected between parallel operators, a step may be interleaved into the existing plan segment. This approach avoids commitment to arbitrary inter-operator orderings, thereby decreasing the likelihood of having to backtrack over these orderings <ref> [1, 28] </ref>. 2.1.1 An Example solving a simple problem taken from the logistics transportation domain described in [33] and adapted for our experiments as shown in Figure 3. Figure 2 shows the derivation of a solution to a problem in which a single package has to be transported between locations. <p> Recovery involves backtracking over this path, and expanding its siblings. Since eager derivation replay does not alter the underlying planning strategy, but merely provides search control, replay inherits all of the properties of the underlying planner. For example, when based within SNLP, it is complete, sound and systematic <ref> [27, 1] </ref>. It also means that case adaptation through replay is never strictly more difficult than from-scratch plan generation, whereas the same cannot be said for plan reuse [30]. <p> Table 2 shows the relation between the types of goals present in the domain and the expected types of macro sequencability a case-based planner is likely to encounter. To understand this relationship, consider the simple artificial domains, ART-IND, ART-MD and ART-MD-NS originally described in <ref> [1] </ref> and shown in Figure 7. These domains differ in terms of the serializ-ability of the goals in the domain [26, 1]. <p> To understand this relationship, consider the simple artificial domains, ART-IND, ART-MD and ART-MD-NS originally described in [1] and shown in Figure 7. These domains differ in terms of the serializ-ability of the goals in the domain <ref> [26, 1] </ref>. <p> All problems from this domain are made up of goals which are independent [26] and may be solved by a state-space planner by attempting goals in succession, and concatenating plans for individual goals <ref> [1] </ref>. In the case of the ART-MD domain, only the first of the two plans above will be a correct plan for solving G i ^ G j . This is because the delete literals in the actions demand that G i be achieved before G j . <p> To do this we chose two state-space planners, TOPI <ref> [1] </ref> and NOLIMIT [33], in addition to the PO planner, SNLP. We implemented reuse and replay on these planners and compared their performance. <p> In the following, we briefly describe the planners, the reuse and replay strategies and the test domains. 4.1 Performance Systems Our performance systems included two planners implemented by Barrett and Weld <ref> [1] </ref>. SNLP (POCL) is a causal-link partial-order planner, which may arbitrarily interleave subplans. The second planner, TOPI, carries out a backward-chaining world-state search. TOPI adds steps only to the beginning of the plan. <p> Case-based planning In this paper, we have argued that plan-space planners have some advantages over state-space planners in supporting case-based planning. Previous research that compared plan-space and state-space planners in generative planning have come to similar conclusions <ref> [28, 1] </ref>. Given this, it might seem that the effectiveness of a planning strategy in CBP is totally determined by its efficiency in generative planning. We will argue that this is not the case for the following reasons.
Reference: [2] <author> A. Blum and M. Furst. </author> <title> Fast planning through planning graph analysis. </title> <booktitle> In Proceedings IJCAI-95, </booktitle> <year> 1995. </year>
Reference-contexts: However, there are other plan-space planners such as UA [28] and TWEAK [5] which do not commit to specific causal links, while MP and MP-I [14] allow for causal structures that strike a better balance between redundancy and commitment. Disjunctive planners such as GRAPHPLAN <ref> [2] </ref>, SATPLAN 66 [23, 22], DESCARTES [12, 11] and UCPOP-D [21] avoid commitment by forming disjunctions over plan constraints. <p> These can be seen to fall into a generalized refinement planning template [21] that subsumes both the traditional, as well as newer planners that introduce full disjunction such as GRAPHPLAN <ref> [2] </ref> and SATPLAN [23, 22]. So far we have implemented replay only on planners which commit to particular plan constraints and split the search space. It would seem that planners which introduce full disjunction and thus form no commitments cannot benefit from reuse and replay.
Reference: [3] <author> B. Blumenthal and B. Porter. </author> <title> Analysis and empirical studies of derivational analogy. </title> <journal> Artificial Intelligence, </journal> <volume> 67 </volume> <pages> 287-327, </pages> <year> 1994. </year>
Reference-contexts: If a wrong decision is made in this regard, the planner will be forced to backtrack over the plan resulting from replay. Such backtracking could be costly in terms of performance. Indeed, past work on replay that was based in state-space planning systems <ref> [3] </ref> has spent considerable effort towards finding best heuristic strategies to decide how to interleave replay with from-scratch planning to minimize such backtracking. The plan-space planner does not have to alternate replay with further planning effort in order to interleave steps into a previous plan. <p> The ability to 62 interleave plans will again be advantageous in multi-plan reuse. 6.1.3 Multi-Pass Adaptation Some implemented case-based planning systems, such as REMAID <ref> [3] </ref> and PRODIGY/ANALOGY [33] use multi-pass strategies in adaptation. For example, rather than abandon the case after it has been replayed once, such systems keep the case and replay it again if parts of the case that are not previously applicable, become applicable as the skeletal plan is being extended.
Reference: [4] <author> J. Carbonell, C. Knoblock, and S. Minton. </author> <title> Prodigy: An integrated architecture for planning and learning. </title> <editor> In K. VanLehn, editor, </editor> <booktitle> Architectures for Intelligence. </booktitle> <publisher> Erlbaum, </publisher> <address> Hillsdale, NJ, </address> <year> 1990. </year>
Reference-contexts: Most planners used in learning research to date fall roughly in this category, in that they add steps contiguous to the end of a plan sequence, and advance the current state accordingly. These include forward-chaining means-ends analysis planners such as STRIPS [6], and PRODIGY <ref> [4] </ref> 1 There exist another class of planners which do backward search in the space of world states, starting with the goal state (for example, TOPI [1]). These planners add new actions only to the beginning of the partial solution during refinement.
Reference: [5] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 333-337, </pages> <year> 1987. </year>
Reference-contexts: Blythe and Veloso showed that this gives SNLP a disadvantage in certain domains [34]. However, there are other plan-space planners such as UA [28] and TWEAK <ref> [5] </ref> which do not commit to specific causal links, while MP and MP-I [14] allow for causal structures that strike a better balance between redundancy and commitment.
Reference: [6] <author> R. Fikes and N. Nilsson. </author> <title> A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year>
Reference-contexts: The problem is defined as a 3-tuple, hI; G; Ai, made up of the initial state, I, the goal state, G, each represented as a conjunction of first-order literals, and a set, A, of domain operators in STRIPS representation <ref> [6] </ref>. The state-space planner traverses a space of world states. Starting with the initial world state, each transition through this space represents the action accomplished by a single operator. <p> Most planners used in learning research to date fall roughly in this category, in that they add steps contiguous to the end of a plan sequence, and advance the current state accordingly. These include forward-chaining means-ends analysis planners such as STRIPS <ref> [6] </ref>, and PRODIGY [4] 1 There exist another class of planners which do backward search in the space of world states, starting with the goal state (for example, TOPI [1]). These planners add new actions only to the beginning of the partial solution during refinement.
Reference: [7] <author> K. Hammond. Chef: </author> <title> A model of case-based planning. </title> <booktitle> In Proceedings AAAI-86, </booktitle> <pages> pages 261-271. </pages> <publisher> AAAI, </publisher> <address> 1986. Philadelphia, Pennsylvania. </address> <month> 72 </month>
Reference-contexts: We obviously need sophisticated techniques that reduce the retrieval cost. Not surprisingly, a significant amount of work on plan reuse and case-based reasoning was devoted to this <ref> [13, 33, 7] </ref>. * The cost of fitting . Since fitting takes polynomial time in the size of the retrieved case and the new problem this factor is dominated by the other factors. * The length of the skeletal plan l sk .
Reference: [8] <author> K. Hammond. </author> <title> Explaining and repairing plans that fail. </title> <journal> Artificial Intelligence, </journal> <volume> 45 </volume> <pages> 173-228, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction The aim of Case-Based Planning (CBP) <ref> [8, 15, 13] </ref> is to improve the efficiency of plan generation by exploiting the similarity between a new problem and previous problem-solving situations. CBP involves storing information in a case library about each planning episode as it is encountered. <p> Although we have conducted experiments to compare plan-space and state-space planning within two CBP frameworks, there are a number of different CBP systems which differ in the way that they adapt a previous case <ref> [8, 9, 24, 25, 33] </ref>. There is therefore a question as to whether our conclusions as to the benefits of plan-space CBP apply to these frameworks as well. Accordingly, in Section 6 we will also consider the applicability of our hypotheses to a variety of other CBP frameworks. <p> Prior work in explanation based learning [29] shows that unconstrained macro-chaining could have an adverse effect on performance. 6.2 The Cost of Extension/Recovery in a Transforma tional Framework Some CBP systems employ transformational as opposed to refinement methods <ref> [8, 9] </ref>. Their approach to the reuse of a plan may therefore involve simultaneous addition and retraction of plan constraints. In this section we will 7 PRODIGY/Analogy [33] uses a slightly different strategy in this regard.
Reference: [9] <author> S. Hanks and D. Weld. </author> <title> The systematic plan adaptor: A formal foundation for case-based planning. </title> <type> Technical Report 92-09-04, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <year> 1992. </year>
Reference-contexts: Although we have conducted experiments to compare plan-space and state-space planning within two CBP frameworks, there are a number of different CBP systems which differ in the way that they adapt a previous case <ref> [8, 9, 24, 25, 33] </ref>. There is therefore a question as to whether our conclusions as to the benefits of plan-space CBP apply to these frameworks as well. Accordingly, in Section 6 we will also consider the applicability of our hypotheses to a variety of other CBP frameworks. <p> Prior work in explanation based learning [29] shows that unconstrained macro-chaining could have an adverse effect on performance. 6.2 The Cost of Extension/Recovery in a Transforma tional Framework Some CBP systems employ transformational as opposed to refinement methods <ref> [8, 9] </ref>. Their approach to the reuse of a plan may therefore involve simultaneous addition and retraction of plan constraints. In this section we will 7 PRODIGY/Analogy [33] uses a slightly different strategy in this regard. <p> We will look at the cost benefits of plan-space planning in an alternative transformational planning framework. The SPA system of Hanks and Weld <ref> [9] </ref> attempts to directly adapt the skeletal plan resulting from the fitting stage by allowing retraction of plan constraints to be tried in parallel to skeletal plan refinement.
Reference: [10] <author> L. Ihrig and S. Kambhampati. </author> <title> Design and implementation of a replay framework based on a partial order planner. </title> <booktitle> In Proceedings AAAI-96, </booktitle> <year> 1996. </year>
Reference-contexts: Using explanation-based learning techniques [17] we have implemented this approach for improving retrieval in the presence of derivational replay <ref> [10] </ref>, and have shown that this approach leads to substantial improvements in replay performance. 7.2.2 Plan Quality Until now, we concentrated on the issue of extending the skeletal plan into a solution for the planning problem, and have largely ignored the issue of the quality of the plans.
Reference: [11] <author> D. Joslin. </author> <title> Passive and active decision postponement in plan generation. </title> <type> PhD thesis, </type> <institution> Intelligent Systems Program, University of Pittsburgh, </institution> <year> 1996. </year>
Reference-contexts: Disjunctive planners such as GRAPHPLAN [2], SATPLAN 66 [23, 22], DESCARTES <ref> [12, 11] </ref> and UCPOP-D [21] avoid commitment by forming disjunctions over plan constraints. Although disjunctive planners at first glance seem very different from the traditional refinement planners, recent work [21] has shown that these planners can be understood in terms of how search is introduced into refinement planning. <p> It would seem that planners which introduce full disjunction and thus form no commitments cannot benefit from reuse and replay. However, there exist planners such as UCPOP-D [21] and DESCARTES <ref> [12, 11] </ref> which fall within the extremes of full splitting and full disjunction. For example, UCPOP-D introduces disjunction only in simple establishments.
Reference: [12] <author> D. Joslin and M. Pollack. </author> <title> Is early commitment in plan generation ever a good idea. </title> <booktitle> In Proceedings-AAAI96, </booktitle> <pages> pages 1188-1193, </pages> <year> 1996. </year>
Reference-contexts: Disjunctive planners such as GRAPHPLAN [2], SATPLAN 66 [23, 22], DESCARTES <ref> [12, 11] </ref> and UCPOP-D [21] avoid commitment by forming disjunctions over plan constraints. Although disjunctive planners at first glance seem very different from the traditional refinement planners, recent work [21] has shown that these planners can be understood in terms of how search is introduced into refinement planning. <p> It would seem that planners which introduce full disjunction and thus form no commitments cannot benefit from reuse and replay. However, there exist planners such as UCPOP-D [21] and DESCARTES <ref> [12, 11] </ref> which fall within the extremes of full splitting and full disjunction. For example, UCPOP-D introduces disjunction only in simple establishments.
Reference: [13] <author> S. Kambhampati. </author> <title> Exploiting causal structure to control retrieval and refitting during plan reuse. </title> <journal> Computational Intelligence, </journal> <volume> 10, </volume> <year> 1994. </year>
Reference-contexts: 1 Introduction The aim of Case-Based Planning (CBP) <ref> [8, 15, 13] </ref> is to improve the efficiency of plan generation by exploiting the similarity between a new problem and previous problem-solving situations. CBP involves storing information in a case library about each planning episode as it is encountered. <p> In the following sections we provide more details on these alternative fitting methods. 2.2.1 Case Fitting in Reuse In plan reuse, fitting involves retracting the irrelevant plan segments <ref> [13, 15] </ref>. The algorithm takes as input the new problem specification, hI 0 ; G 0 ; Ai, the previous plan, P old , as well as an explanation for the correctness of the plan called its validation structure or causal structure. <p> For a case to be widely applicable, the object constants must either be variablized as in [18], or alternatively, at the time of retrieval, we may create an object mapping which can be used to revise the old object names <ref> [13] </ref>. Here we adopt the latter strategy. We store cases representing individual planning episodes instantiated with the original 23 object constants. An object mapping is constructed when a case is considered as a candidate for retrieval. <p> is an exact match in all of these relevant initial state conditions, it is usual to judge the applicability of a case on the basis of a similarity metric which considers a case to be applicable if a set number of these conditions are consistent with the new initial state <ref> [13, 33] </ref>. Basing retrieval on a partial match increases the probability that a case will be found. However, it also means that the skeletal plan will contain action chains which are not executable in the new situation. <p> We obviously need sophisticated techniques that reduce the retrieval cost. Not surprisingly, a significant amount of work on plan reuse and case-based reasoning was devoted to this <ref> [13, 33, 7] </ref>. * The cost of fitting . Since fitting takes polynomial time in the size of the retrieved case and the new problem this factor is dominated by the other factors. * The length of the skeletal plan l sk .
Reference: [14] <author> S. Kambhampati. </author> <title> Multi-contributor causal structures for planning: A formalization and evaluation. </title> <journal> Artificial Intelligence, </journal> <volume> 69, </volume> <year> 1994. </year>
Reference-contexts: Blythe and Veloso showed that this gives SNLP a disadvantage in certain domains [34]. However, there are other plan-space planners such as UA [28] and TWEAK [5] which do not commit to specific causal links, while MP and MP-I <ref> [14] </ref> allow for causal structures that strike a better balance between redundancy and commitment. Disjunctive planners such as GRAPHPLAN [2], SATPLAN 66 [23, 22], DESCARTES [12, 11] and UCPOP-D [21] avoid commitment by forming disjunctions over plan constraints.
Reference: [15] <author> S. Kambhampati and J. A. Hendler. </author> <title> A validation structure based theory of plan modification and reuse. </title> <journal> Artificial Intelligence, </journal> <volume> 55 </volume> <pages> 193-258, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction The aim of Case-Based Planning (CBP) <ref> [8, 15, 13] </ref> is to improve the efficiency of plan generation by exploiting the similarity between a new problem and previous problem-solving situations. CBP involves storing information in a case library about each planning episode as it is encountered. <p> In the following sections we provide more details on these alternative fitting methods. 2.2.1 Case Fitting in Reuse In plan reuse, fitting involves retracting the irrelevant plan segments <ref> [13, 15] </ref>. The algorithm takes as input the new problem specification, hI 0 ; G 0 ; Ai, the previous plan, P old , as well as an explanation for the correctness of the plan called its validation structure or causal structure. <p> Another way of introducing a weak commitment is through hierarchical task reduction. Planners such as NONLIN [32] and SIPE [36] first work out the details of a plan at abstract levels, and then refine it at more concrete levels. Systems such as PRIAR <ref> [15] </ref> use these hierarchical planners as the substrate for plan reuse. We believe that any type of strong commitment has a deleterious effect in plan reuse and replay. We can rely on the semantics of refinement planning [19, 20] to understand this.
Reference: [16] <author> S. Kambhampati, L. Ihrig, and B. Srivastava. </author> <title> A candidate set based analysis of subgoal interactions in conjunctive goal planning. </title> <booktitle> In Proceedings of the 3rd Intl. Conf. on AI Planning Systems, </booktitle> <year> 1996. </year>
Reference-contexts: It is interesting to note that state-space planning may also be seen as a process of constraint addition which can be considered a search in the space of plans <ref> [16] </ref>. However, from this viewpoint, the state-space planner has a restricted set of allowable refinements to the existing plan (see Figure 1).
Reference: [17] <author> S. Kambhampati, S. Katukam, and Y. Qu. </author> <title> Failure driven dynamic search control for partial order planners: An explanation-based approach. </title> <journal> Artificial Intelligence, </journal> <note> 1996. To Appear. </note>
Reference-contexts: Since invalid decisions are skipped over, replay functions like retraction in plan reuse. In order to understand the replay process, it is useful to think of planning decisions themselves as operators acting on partial plans. DerSNLP represents a partial plan as a collection of plan constraints <ref> [17] </ref>. In particular, a partial plan is represented as a 6-tuple, hS; O; B; L; E; Ci, where 1. S is the set of actions (step-names) in the plan, each of which is mapped onto an operator in the domain theory. <p> Whenever this happens, we could analyze the search tree to understand the reasons as to why the skeletal plan could not be extended, and annotate the stored case with these reasons, so that such mis-retrieval will not occur in the future. Using explanation-based learning techniques <ref> [17] </ref> we have implemented this approach for improving retrieval in the presence of derivational replay [10], and have shown that this approach leads to substantial improvements in replay performance. 7.2.2 Plan Quality Until now, we concentrated on the issue of extending the skeletal plan into a solution for the planning problem,
Reference: [18] <author> S. Kambhampati and S. Kedar. </author> <title> A unified framework for explanation-based generalization of partially ordered and partially instantiated plans. </title> <journal> Artificial Intelligence, </journal> <volume> 67 </volume> <pages> 29-70, </pages> <year> 1994. </year>
Reference-contexts: There may be many domain objects of the same type, and an individual planning episode references a particular set of these objects. For a case to be widely applicable, the object constants must either be variablized as in <ref> [18] </ref>, or alternatively, at the time of retrieval, we may create an object mapping which can be used to revise the old object names [13]. Here we adopt the latter strategy. We store cases representing individual planning episodes instantiated with the original 23 object constants.
Reference: [19] <author> S. Kambhampati, C. Knoblock, and Q. Yang. </author> <title> Planning as refinement search: A unified framework for evaluating design tradeoffs in partial order planning. </title> <journal> Artificial Intelligence, </journal> <volume> 76 </volume> <pages> 167-238, </pages> <year> 1995. </year> <journal> Special Issue on Planning and Scheduling. </journal> <volume> 73 </volume>
Reference-contexts: Systems such as PRIAR [15] use these hierarchical planners as the substrate for plan reuse. We believe that any type of strong commitment has a deleterious effect in plan reuse and replay. We can rely on the semantics of refinement planning <ref> [19, 20] </ref> to understand this. From the perspective of refinement planning, the skeletal plan is a partial plan that can be seen as a shorthand notation 67 for the set of complete plans (operator sequences) that are consistent with the current constraints comprising the skeletal plan.
Reference: [20] <author> S. Kambhampati and B. Srivastava. </author> <title> Universal classical planner: An algorithm for unifying state-space and plan-space approaches. </title> <type> Technical Report ASU CSE TR 94-002, </type> <institution> Arizona State University, </institution> <month> January </month> <year> 1995 1995. </year>
Reference-contexts: Systems such as PRIAR [15] use these hierarchical planners as the substrate for plan reuse. We believe that any type of strong commitment has a deleterious effect in plan reuse and replay. We can rely on the semantics of refinement planning <ref> [19, 20] </ref> to understand this. From the perspective of refinement planning, the skeletal plan is a partial plan that can be seen as a shorthand notation 67 for the set of complete plans (operator sequences) that are consistent with the current constraints comprising the skeletal plan.
Reference: [21] <author> S. Kambhampati and X. Yang. </author> <title> On the role of disjunctive representations and constraint propagation in refinement planning. </title> <booktitle> In Proceedings of the Sixth International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <year> 1996. </year>
Reference-contexts: Disjunctive planners such as GRAPHPLAN [2], SATPLAN 66 [23, 22], DESCARTES [12, 11] and UCPOP-D <ref> [21] </ref> avoid commitment by forming disjunctions over plan constraints. Although disjunctive planners at first glance seem very different from the traditional refinement planners, recent work [21] has shown that these planners can be understood in terms of how search is introduced into refinement planning. <p> Disjunctive planners such as GRAPHPLAN [2], SATPLAN 66 [23, 22], DESCARTES [12, 11] and UCPOP-D <ref> [21] </ref> avoid commitment by forming disjunctions over plan constraints. Although disjunctive planners at first glance seem very different from the traditional refinement planners, recent work [21] has shown that these planners can be understood in terms of how search is introduced into refinement planning. <p> Thus the latter has a larger candidate set. Similarly, a plan space planner such as SNLP also adds a causal link constraint to preserve c between s 1 and s 2 , while planners such as UCPOP-D <ref> [21] </ref> form a disjunction over causal link constraints. Once again, the candidate set of the plan produced by SNLP will be smaller than that produced by UCPOP-D. <p> These can be seen to fall into a generalized refinement planning template <ref> [21] </ref> that subsumes both the traditional, as well as newer planners that introduce full disjunction such as GRAPHPLAN [2] and SATPLAN [23, 22]. So far we have implemented replay only on planners which commit to particular plan constraints and split the search space. <p> So far we have implemented replay only on planners which commit to particular plan constraints and split the search space. It would seem that planners which introduce full disjunction and thus form no commitments cannot benefit from reuse and replay. However, there exist planners such as UCPOP-D <ref> [21] </ref> and DESCARTES [12, 11] which fall within the extremes of full splitting and full disjunction. For example, UCPOP-D introduces disjunction only in simple establishments.
Reference: [22] <author> H. Kautz, D. McAllester, and B. Selman. </author> <title> Encoding plans in propositional logic. </title> <booktitle> In Proceedings of the Sixth International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <year> 1996. </year>
Reference-contexts: However, there are other plan-space planners such as UA [28] and TWEAK [5] which do not commit to specific causal links, while MP and MP-I [14] allow for causal structures that strike a better balance between redundancy and commitment. Disjunctive planners such as GRAPHPLAN [2], SATPLAN 66 <ref> [23, 22] </ref>, DESCARTES [12, 11] and UCPOP-D [21] avoid commitment by forming disjunctions over plan constraints. <p> These can be seen to fall into a generalized refinement planning template [21] that subsumes both the traditional, as well as newer planners that introduce full disjunction such as GRAPHPLAN [2] and SATPLAN <ref> [23, 22] </ref>. So far we have implemented replay only on planners which commit to particular plan constraints and split the search space. It would seem that planners which introduce full disjunction and thus form no commitments cannot benefit from reuse and replay.
Reference: [23] <author> H. Kautz and B. Selman. </author> <title> Pushing the envelope: Planning, propositional logic, and stochastic search. </title> <booktitle> In Proceedings AAAI-96. AAAI, 1996. </booktitle> <address> Portland, Oregon. </address>
Reference-contexts: However, there are other plan-space planners such as UA [28] and TWEAK [5] which do not commit to specific causal links, while MP and MP-I [14] allow for causal structures that strike a better balance between redundancy and commitment. Disjunctive planners such as GRAPHPLAN [2], SATPLAN 66 <ref> [23, 22] </ref>, DESCARTES [12, 11] and UCPOP-D [21] avoid commitment by forming disjunctions over plan constraints. <p> These can be seen to fall into a generalized refinement planning template [21] that subsumes both the traditional, as well as newer planners that introduce full disjunction such as GRAPHPLAN [2] and SATPLAN <ref> [23, 22] </ref>. So far we have implemented replay only on planners which commit to particular plan constraints and split the search space. It would seem that planners which introduce full disjunction and thus form no commitments cannot benefit from reuse and replay.
Reference: [24] <author> J. Koehler. </author> <title> Avoiding pitfalls in case-based planning. </title> <booktitle> In Proceedings of the 2nd Intl. Conf. on AI Planning Systems, </booktitle> <pages> pages 104-109, </pages> <year> 1994. </year>
Reference-contexts: Although we have conducted experiments to compare plan-space and state-space planning within two CBP frameworks, there are a number of different CBP systems which differ in the way that they adapt a previous case <ref> [8, 9, 24, 25, 33] </ref>. There is therefore a question as to whether our conclusions as to the benefits of plan-space CBP apply to these frameworks as well. Accordingly, in Section 6 we will also consider the applicability of our hypotheses to a variety of other CBP frameworks.
Reference: [25] <author> J. Koehler. </author> <title> Flexible plan reuse in a formal framework. </title> <editor> In C. Backstrom and E. Sandewall, editors, </editor> <booktitle> Current Trends in AI Planning, </booktitle> <pages> pages 171-184. </pages> <publisher> IOS Press, </publisher> <address> 1994. Amsterdam, Netherlands. </address>
Reference-contexts: Although we have conducted experiments to compare plan-space and state-space planning within two CBP frameworks, there are a number of different CBP systems which differ in the way that they adapt a previous case <ref> [8, 9, 24, 25, 33] </ref>. There is therefore a question as to whether our conclusions as to the benefits of plan-space CBP apply to these frameworks as well. Accordingly, in Section 6 we will also consider the applicability of our hypotheses to a variety of other CBP frameworks.
Reference: [26] <author> R. Korf. </author> <title> Planning as search: a qualitative approach. </title> <journal> Artificial Intelligence, </journal> <volume> 33 </volume> <pages> 65-68, </pages> <year> 1987. </year>
Reference-contexts: To understand this relationship, consider the simple artificial domains, ART-IND, ART-MD and ART-MD-NS originally described in [1] and shown in Figure 7. These domains differ in terms of the serializ-ability of the goals in the domain <ref> [26, 1] </ref>. <p> All problems from this domain are made up of goals which are independent <ref> [26] </ref> and may be solved by a state-space planner by attempting goals in succession, and concatenating plans for individual goals [1]. In the case of the ART-MD domain, only the first of the two plans above will be a correct plan for solving G i ^ G j .
Reference: [27] <author> D. McAllester and D Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proceedings AAAI-91, </booktitle> <pages> pages 634-639, </pages> <year> 1991. </year>
Reference-contexts: Recovery involves backtracking over this path, and expanding its siblings. Since eager derivation replay does not alter the underlying planning strategy, but merely provides search control, replay inherits all of the properties of the underlying planner. For example, when based within SNLP, it is complete, sound and systematic <ref> [27, 1] </ref>. It also means that case adaptation through replay is never strictly more difficult than from-scratch plan generation, whereas the same cannot be said for plan reuse [30].
Reference: [28] <author> S. Minton, J. Bresina, and M. Drummond. </author> <title> Total order and partial order planning: a comparative analysis. </title> <journal> Journal of Artificial Intelligence Research, </journal> <pages> pages 227-262, </pages> <year> 1994. </year>
Reference-contexts: We will demonstrate through focused experimental studies in both reuse and replay that plan-space planners which make a weak commitment as to the ordering of steps have a greater ability to extend the skeletal plan. This has already been shown to be an advantage in generative planning <ref> [28, 1] </ref>. However, we find that the ability to splice in new steps and subplans into an existing sequence is of even greater benefit in exploiting previous experience through CBP. In our experiments plan-space and states-space planners show consistently wider performance differentials with replay than they do in from-scratch planning. <p> Later, as conflicts are detected between parallel operators, a step may be interleaved into the existing plan segment. This approach avoids commitment to arbitrary inter-operator orderings, thereby decreasing the likelihood of having to backtrack over these orderings <ref> [1, 28] </ref>. 2.1.1 An Example solving a simple problem taken from the logistics transportation domain described in [33] and adapted for our experiments as shown in Figure 3. Figure 2 shows the derivation of a solution to a problem in which a single package has to be transported between locations. <p> Case-based planning In this paper, we have argued that plan-space planners have some advantages over state-space planners in supporting case-based planning. Previous research that compared plan-space and state-space planners in generative planning have come to similar conclusions <ref> [28, 1] </ref>. Given this, it might seem that the effectiveness of a planning strategy in CBP is totally determined by its efficiency in generative planning. We will argue that this is not the case for the following reasons. <p> Blythe and Veloso showed that this gives SNLP a disadvantage in certain domains [34]. However, there are other plan-space planners such as UA <ref> [28] </ref> and TWEAK [5] which do not commit to specific causal links, while MP and MP-I [14] allow for causal structures that strike a better balance between redundancy and commitment.
Reference: [29] <author> R. Mooney. </author> <title> The effect of rule use on the utility of explanation-based learning. </title> <booktitle> In Proceedings IJCAI-89, </booktitle> <pages> pages 725-730, </pages> <year> 1989. </year>
Reference-contexts: It is however not clear whether such multi-pass adaptation algorithms will have an overall positive impact on the effectiveness of case-based planning. Multi-pass algorithms are akin to using "macro operators" to satisfy the preconditions of other macro operators. Prior work in explanation based learning <ref> [29] </ref> shows that unconstrained macro-chaining could have an adverse effect on performance. 6.2 The Cost of Extension/Recovery in a Transforma tional Framework Some CBP systems employ transformational as opposed to refinement methods [8, 9].
Reference: [30] <author> B. Nebel and J. Koehler. </author> <title> Plan reuse versus plan generation: a theoretical and empirical analysis. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> pages 427-454, </pages> <year> 1995. </year>
Reference-contexts: There is always a possibility that this effort may fail in that the skeletal plan will not be able to be refined into a solution <ref> [30] </ref>. In these instances, completeness is preserved through the initiation of a recovery phase. In plan reuse, recovery is accomplished by starting the search process over from the beginning, starting at the null plan. <p> For example, when based within SNLP, it is complete, sound and systematic [27, 1]. It also means that case adaptation through replay is never strictly more difficult than from-scratch plan generation, whereas the same cannot be said for plan reuse <ref> [30] </ref>. In the next section, we will describe the retrieval strategy employed in both reuse and replay. 2.2.4 A Common Retrieval Strategy Realistic domains like the logistics transportation domain described earlier add to the complexity of the retrieval process. <p> In this section, we place these results in the broader context of the CBP architecture which has been our focus. An analysis into the various factors that determine the cost of plan reuse can be found in the literature (see, for example, <ref> [30] </ref>). <p> For reuse and replay to improve performance, it is necessary to select an appropriate case. If the wrong case is chosen, the cost of retrieving, fitting and modifying the case may exceed that of planning from scratch <ref> [30] </ref>. This suggests an approach for dynamically improving retrieval - specifically, we could consider a retrieved case to be providing wrong guidance whenever the skeletal plan derived from it could not be extended and a re 69 covery phase was necessitated.
Reference: [31] <author> E. Sacerdoti. </author> <title> A Structure for Plans and Behavior. </title> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1977. </year> <month> 74 </month>
Reference-contexts: Unlike state-space planners which maintain contiguous sequences of operators during their search (so that the current world state can be uniquely identified), some plan-space planners can search in the space of partial-order plans (see Figure 1). Many current-day planners such as NOAH <ref> [31] </ref>, NONLIN [32], and SIPE [36] belong to the latter class, called partial-order (or PO) planners 2 . With a PO strategy, new steps 2 Partial-order planners have also been called nonlinear planners.
Reference: [32] <author> A. Tate. </author> <title> Generating project networks. </title> <booktitle> In Proceedings IJCAI-77, pages 888--889, 1977. </booktitle> <address> Cambridge, Massachusetts. </address>
Reference-contexts: Unlike state-space planners which maintain contiguous sequences of operators during their search (so that the current world state can be uniquely identified), some plan-space planners can search in the space of partial-order plans (see Figure 1). Many current-day planners such as NOAH [31], NONLIN <ref> [32] </ref>, and SIPE [36] belong to the latter class, called partial-order (or PO) planners 2 . With a PO strategy, new steps 2 Partial-order planners have also been called nonlinear planners. <p> Another way of introducing a weak commitment is through hierarchical task reduction. Planners such as NONLIN <ref> [32] </ref> and SIPE [36] first work out the details of a plan at abstract levels, and then refine it at more concrete levels. Systems such as PRIAR [15] use these hierarchical planners as the substrate for plan reuse.
Reference: [33] <author> M. Veloso. </author> <title> Learning by analogical reasoning in general problem solving. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <year> 1992. </year>
Reference-contexts: Although we have conducted experiments to compare plan-space and state-space planning within two CBP frameworks, there are a number of different CBP systems which differ in the way that they adapt a previous case <ref> [8, 9, 24, 25, 33] </ref>. There is therefore a question as to whether our conclusions as to the benefits of plan-space CBP apply to these frameworks as well. Accordingly, in Section 6 we will also consider the applicability of our hypotheses to a variety of other CBP frameworks. <p> In particular, both PRODIGY, which makes the linearity assumption, and its extension NOLIMIT which doesn't (and thus allows interleaving of subgoals), both refine a partial plan by adding operators to the end of the current plan <ref> [33] </ref>. 14 through the new step, and is used to determine the next action to be applied. The perspective of plan-space planning (as opposed to state-space) provides more options as to the nature of the plan refinements that may be adopted (see Figure 1). <p> This approach avoids commitment to arbitrary inter-operator orderings, thereby decreasing the likelihood of having to backtrack over these orderings [1, 28]. 2.1.1 An Example solving a simple problem taken from the logistics transportation domain described in <ref> [33] </ref> and adapted for our experiments as shown in Figure 3. Figure 2 shows the derivation of a solution to a problem in which a single package has to be transported between locations. It serves to illustrate the PO planners' commitment strategy when it comes to step orderings. <p> is an exact match in all of these relevant initial state conditions, it is usual to judge the applicability of a case on the basis of a similarity metric which considers a case to be applicable if a set number of these conditions are consistent with the new initial state <ref> [13, 33] </ref>. Basing retrieval on a partial match increases the probability that a case will be found. However, it also means that the skeletal plan will contain action chains which are not executable in the new situation. <p> To do this we chose two state-space planners, TOPI [1] and NOLIMIT <ref> [33] </ref>, in addition to the PO planner, SNLP. We implemented reuse and replay on these planners and compared their performance. The experimental strategy consisted of training all three planners with a set of randomly generated problems, and testing them on another set of randomly generated (but larger) problems. <p> NOLIMIT was chosen as the third planner to be tested. NOLIMIT is a version of PRODIGY which was the basis of the derivational replay system reported in <ref> [33] </ref>. Like PRODIGY and STRIPS, it uses means-ends analysis, first subgoaling to establish a set of potential operators, then forward chaining from the current world state, by applying potential operators to the plan. <p> To facilitate fair comparisons, NOLIMIT was reimplemented on the same substrate as the other two planners. This was done following the algorithm contained in <ref> [33] </ref>. We have created a framework for accomplishing reuse and replay within each planning strategy. These are described below. 4.2 Implementation of Plan Reuse Recall that in reuse, a previous case consists of a plan which is first fitted to adapt to the new problem-solving situation. <p> For example, DerSNLP (Derivational SNLP) extends SNLP by a capability for producing traces of successful plan derivations and replaying previous traces. A sample trace of SNLP's decision process is shown in Figure 10. The trace corresponds to a simple problem from the logistics transportation domain of <ref> [33] </ref> which contains the goal of getting a single package, OB1, to a designated airport, l g . The derivation trace contains the choices that were made along the path from the root of the search tree to the final plan in the leaf node. <p> To further support this conclusion, we experimented with the the more realistic logistics transportation domain of <ref> [33] </ref>. Problems with nonserializable goals were randomly generated, and the initial conditions of each problem were varied. These represented the location of various transport devices (one airplane and four trucks) over four cities, each city containing an airport and a post office. Four packages were randomly distributed over airports. <p> We obviously need sophisticated techniques that reduce the retrieval cost. Not surprisingly, a significant amount of work on plan reuse and case-based reasoning was devoted to this <ref> [13, 33, 7] </ref>. * The cost of fitting . Since fitting takes polynomial time in the size of the retrieved case and the new problem this factor is dominated by the other factors. * The length of the skeletal plan l sk . <p> In similar situations, plan-space planners will not need to backtrack in the first place. 6.1.2 Multi-Case Adaptation Some case-based planning systems, such as PRODIGY/ANALOGY <ref> [33] </ref> use multiple cases in guiding adaptation. Although our empirical study into replay involved only replay of a single case for each problem, we believe that the results can also be extended to multi-case replay. <p> The ability to 62 interleave plans will again be advantageous in multi-plan reuse. 6.1.3 Multi-Pass Adaptation Some implemented case-based planning systems, such as REMAID [3] and PRODIGY/ANALOGY <ref> [33] </ref> use multi-pass strategies in adaptation. For example, rather than abandon the case after it has been replayed once, such systems keep the case and replay it again if parts of the case that are not previously applicable, become applicable as the skeletal plan is being extended. <p> Their approach to the reuse of a plan may therefore involve simultaneous addition and retraction of plan constraints. In this section we will 7 PRODIGY/Analogy <ref> [33] </ref> uses a slightly different strategy in this regard. Specifically, it uses a "pointer" to keep track of the part of the case that has already been replayed. Every time a case is visited, the replay is restarted at the position indicated by the pointer.
Reference: [34] <author> M. Veloso and J. Blythe. Linkability: </author> <title> Examining causal link commitments in partial-order planning. </title> <booktitle> In Proceedings of the 2nd Intl. Conf. on AI Planning Systems, </booktitle> <pages> pages 170-175, </pages> <year> 1994. </year>
Reference-contexts: Blythe and Veloso showed that this gives SNLP a disadvantage in certain domains <ref> [34] </ref>. However, there are other plan-space planners such as UA [28] and TWEAK [5] which do not commit to specific causal links, while MP and MP-I [14] allow for causal structures that strike a better balance between redundancy and commitment.
Reference: [35] <author> D. Weld. </author> <title> An introduction to partial-order planning. </title> <journal> AI Magazine, </journal> <year> 1994. </year>
Reference-contexts: of this paper. 2 Background In this section, we will briefly review the two classes of domain-independent planning strategies (section 2.1) as well as our reuse and replay CBP frameworks (section 2.2). 2.1 Domain Independent Planning As we mentioned earlier, domain-independent planners come mainly in two varieties: state-space and plan-space <ref> [35] </ref>. Both navigate a space of states, armed with the problem specification.
Reference: [36] <author> D. E. Wilkins. </author> <title> Recovering from execution errors in sipe. </title> <journal> Computational Intelligence, </journal> <volume> 1 </volume> <pages> 33-45, </pages> <year> 1985. </year> <month> 75 </month>
Reference-contexts: Unlike state-space planners which maintain contiguous sequences of operators during their search (so that the current world state can be uniquely identified), some plan-space planners can search in the space of partial-order plans (see Figure 1). Many current-day planners such as NOAH [31], NONLIN [32], and SIPE <ref> [36] </ref> belong to the latter class, called partial-order (or PO) planners 2 . With a PO strategy, new steps 2 Partial-order planners have also been called nonlinear planners. We prefer the former term since the latter gives the misleading impression that partial-order planning is related to the linearity assumption. <p> Another way of introducing a weak commitment is through hierarchical task reduction. Planners such as NONLIN [32] and SIPE <ref> [36] </ref> first work out the details of a plan at abstract levels, and then refine it at more concrete levels. Systems such as PRIAR [15] use these hierarchical planners as the substrate for plan reuse.
References-found: 36

