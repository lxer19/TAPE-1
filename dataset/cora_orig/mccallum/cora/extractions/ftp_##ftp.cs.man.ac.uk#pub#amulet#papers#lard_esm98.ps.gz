URL: ftp://ftp.cs.man.ac.uk/pub/amulet/papers/lard_esm98.ps.gz
Refering-URL: http://www.cs.man.ac.uk/amulet/projects/lard/papers.html
Root-URL: http://www.cs.man.ac.uk
Title: Abstract  
Abstract: LARD is a hardware description language which uses CSP-like channel communication to describe the behaviour of asynchronous VLSI systems. This communication abstraction makes LARD a much more productive language for this type of modelling than conventional languages such as VHDL. LARD simulations can be useful for debugging, for performance analysis, and for validating the behavioural model against a corresponding gate-level schematic. The latter requires co-simulation if the model is non-deterministic. The LARD toolkit has been implemented in a very flexible fashion and is readily adapted to other tasks. 
Abstract-found: 1
Intro-found: 1
Reference: <author> van Berkel, K.; J. Kessels; M. Ronken; R. Saeijs; and F. Chalij. </author> <year> 1991. </year> <title> The VLSI programming language Tangram and its translation into handshake circuits. </title> <booktitle> In Proceedings of the European Conference on Design Automation (Amsterdam). </booktitle> <pages> 384-389. </pages>
Reference-contexts: The channel communication primitives of CSP (Hoare 1978) and occam are an ideal model and have been used in the proprietary asynchronous hardware description language Tan-gram from Philips <ref> (van Berkel et al. 1991) </ref>. A slight variation on this approach has been adopted in LARD.
Reference: <author> Furber, S.B.; J.D. Garside; S. Temple; and J. Liu. </author> <year> 1997. </year> <title> AMULET2e: An Asynchronous Embedded Controller. </title> <booktitle> In Proceedings of the Third International Symposium on Advanced Research in Asynchronous Circuits and Systems (Eindhoven, </booktitle> <address> The Netherlands, April 7-10). </address> <publisher> IEEE, Los Alamitos, CA. </publisher> <pages> 290-299. </pages>
Reference-contexts: The AMULET1 microprocessor (Woods et al. 1997), developed between 1991 and 94, runs standard ARM code and as such was the first asynchronous implementation of a commercial instruction set. AMULET2 <ref> (Furber et al. 1997) </ref> took this proof of concept and developed a more useful chip with increased performance.
Reference: <author> Gilbert, D.A.; and J.D. Garside. </author> <year> 1997. </year> <title> A Result Forwarding Mechanism for Asynchronous Pipelined Systems. </title> <booktitle> In Proceedings of the Third International Symposium on Advanced Research in Asynchronous Circuits and Systems (Eindhoven, </booktitle> <address> The Netherlands, April 7-10). </address> <publisher> IEEE, Los Alamitos, CA. </publisher> <pages> 2-11. </pages>
Reference-contexts: The AMULET1 microprocessor (Woods et al. 1997), developed between 1991 and 94, runs standard ARM code and as such was the first asynchronous implementation of a commercial instruction set. AMULET2 (Furber et al. 1997) took this proof of concept and developed a more useful chip with increased performance. AMULET3 <ref> (Gilbert and Garside 1997) </ref> is currently under development; this chip is a complete asynchronous embedded system with an ARM compatible processor core, RAM, ROM, a DMA controller, an on-chip bus, an external memory interface and a synchronous peripheral subsystem.
Reference: <author> Hoare, </author> <title> C.A.R. 1978. Communicating Sequential Processes. </title> <journal> Communications of the ACM 21, </journal> <month> no.8 (Aug.): </month> <pages> 666-677. </pages>
Reference-contexts: Although an explicit description of the protocol may be appropriate later in the design process, for initial modelling we would prefer to see the communication as an abstract atomic action. The channel communication primitives of CSP <ref> (Hoare 1978) </ref> and occam are an ideal model and have been used in the proprietary asynchronous hardware description language Tan-gram from Philips (van Berkel et al. 1991). A slight variation on this approach has been adopted in LARD.
Reference: <author> Ousterhout, J.K. </author> <year> 1994. </year> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison Wesley. </publisher> <address> ISBN 0-201-63337-X. </address>
Reference-contexts: that uses the tcl language LARD simulator TimeMill (transistor simulator) Mutex monitor Test vector apply/ check Model Model Chan nel monitor Arbiter Mutex Inter process communi cation user model core language compiler linker bytecode file libraries tcl execution environment bytecode interpreter runtime support modules and tk graphical user interface system <ref> (Ousterhout 1994) </ref>. Recent work has replaced the interpreter with a native code translator for increased performance (Rogers 1998). Much of the functionality of the language is implemented in libraries which are linked with the users code.
Reference: <author> Rogers, I. </author> <year> 1998. </year> <title> A LARD front-end for Dynamite. </title> <type> Project report, </type> <institution> Dept. of Computer Science, University of Manchester, M13 9PL, U.K. Semiconductor Industry Association. 1997. The National Technology Roadmap for Semiconductors. 4300 Stevens Creek Boulevard, </institution> <address> Suite 271, San Jose, CA 95129. </address>
Reference-contexts: Recent work has replaced the interpreter with a native code translator for increased performance <ref> (Rogers 1998) </ref>. Much of the functionality of the language is implemented in libraries which are linked with the users code. This includes the channel communication primitives which are implemented using shared variables by a channel communication library.
Reference: <author> Visser, W.; H. Barringer; D. Fellows; G. Gough; and A. Williams. </author> <year> 1997. </year> <title> Efficient CTL * Model Checking for the Analysis of Rainbow Designs. </title> <booktitle> In Proceeding of the Advanced Research Working Conference on Correct Hardware Design and Verification Methods (Montreal, </booktitle> <address> Canada, October). </address> <publisher> Chapman & Hall. </publisher>
Reference-contexts: However we expect our designs to function correctly with any delays as they should be delay insensitive at the block level. Others have adopted a state-space exploration approach for determining the deadlock freedom of a model <ref> (Visser et al. 1997) </ref>, but this approach may not be tractable for complex designs. Using LARD we are able to run modified simulations with randomised delays which we hope will eventually encounter any deadlock or similar problem that is present.
Reference: <author> Woods, J.V.; P. Day; S.B. Furber; J.D. Garside; N.C. Paver; and S. Temple. </author> <year> 1997. </year> <title> AMULET1: An Asynchronous ARM Microprocessor. </title> <booktitle> IEEE Transaction on Computers 46, no.4 (Apr.): </booktitle> <pages> 385-398. </pages>
Reference-contexts: The AMULET group at the University of Manchester has made a number of contributions to the re-establishment of asynchronous logic. The AMULET1 microprocessor <ref> (Woods et al. 1997) </ref>, developed between 1991 and 94, runs standard ARM code and as such was the first asynchronous implementation of a commercial instruction set. AMULET2 (Furber et al. 1997) took this proof of concept and developed a more useful chip with increased performance.
References-found: 8

