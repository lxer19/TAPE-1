URL: ftp://ftp.sees.bangor.ac.uk/pub/gerry/postscript/spdoc2.ps
Refering-URL: http://www.sees.bangor.ac.uk/~gerry/docs/spdoc2.html
Root-URL: 
Email: j.g.wolff@uk.ac.bangor.sees.  
Phone: Telephone: +44 248 351151  
Title: UNIFYING COMPUTING: INDUCTIVE LEARNING AND LOGIC  
Author: J Gerard Wolff Andrew J Chipperfield 
Note: ext 2691. Electronic mail:  
Address: Dean Street, Bangor, Gwynedd, LL57 1UT, UK.  
Affiliation: School of Electronic Engineering Science, University of Wales,  
Abstract: Paper presented at Expert Systems 90, the Tenth Annual Technical Conference of the British Computer Society Specialist Group on Expert Systems, London, September, 1990. In T R Addis and R M Muir (Eds.), Research and Development in Expert Systems VII, Cambridge: Cambridge University Press, 1990, pp. 263-276. Abstract The paper introduces a new theory of computing, called SP, and describes a prototype of a new kind of computing system (also called SP) which is based on the theory. The focus of the paper is on how the SP theory and the SP system may integrate two kinds of computing which are not normally related: inductive learning and logic. The SP theory is based on the conjecture that all kinds of computing and formal reasoning may usefully be seen as a search for efficiency in information, where the concept of efficiency is defined in terms of the concept of redundancy in Shannons information theory. The SP prototype (SP6) provides a simple language intended for the representation of diverse kinds of knowledge. The prototype is dedicated to searching for redundancy in knowledge and extracting it wherever it is found. Elements of this process are pattern matching and unification of patterns combined with a hill-climbing search amongst alternative sets of unifications. The paper describes examples showing how SP6 performs the induction of a grammar from examples, the induction of a class hierarchy from examples, simple syllogistic reasoning and logical reasoning with a transitive relation (equals). Issues for future research are discussed. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Baeten J C M, </author> <title> Bergstra J A & Klop J W (1987). Term re-writing systems with priorities. </title> <booktitle> Proceedings of the Conference on Re-writing Techniques and Applications, </booktitle> <address> Bordeaux, France, </address> <month> May </month> <year> 1987. </year> <pages> pp 83-94. </pages>
Reference: <author> Campbell C, </author> <title> Sherrington D & Wong K Y M (1989). Statistical mechanics and neural networks. </title> <editor> In I Aleksander (Ed), </editor> <booktitle> Neural Computing Architectures, </booktitle> <address> London: </address> <publisher> North Oxford Academic. </publisher> <address> Chaitin G J (1987). </address> <booktitle> Algorithmic Information Theory. </booktitle> <address> Cambridge: </address> <publisher> Cambridge University Press. </publisher>
Reference: <author> Clocksin W F & Mellish C S (1981). </author> <title> Programming in Prolog. </title> <publisher> Heidelberg: Springer-Verlag. </publisher>
Reference-contexts: The SP language (described below) owes its greatest debt to Prolog <ref> (see, for example, Clocksin & Mellish, 1981) </ref> but differs from Prolog in several ways. There is some resemblance between SP and unification grammars (see, for example, Shieber, 1986) but also significant differences. Unification concepts are reviewed in Siekmann (1989).
Reference: <author> Cook S (1986). </author> <title> Languages and object-oriented programming. </title> <journal> Software Engineering Journal 1 (2), </journal> <pages> 73-80. </pages>
Reference-contexts: This generalisation gives SP capabilities - like an ability to learn - which are not exhibited by Prolog or by systems of that type. SP incorporates many of the concepts associated with object-oriented design <ref> (reviewed in Cook, 1986) </ref>. Although extraction of redundancy in information is a key part of the SP theory, the SP system is not a reduction system in the technical sense of that word (see, for example, Robinson, 1988). <p> Future versions of SP will plug this gap. The second object is, in effect, a class hierarchy or discrimination net with attributes at appropriate levels. In the spirit of object-oriented design <ref> (Cook, 1986) </ref>, redundancy is minimised by placing each attribute at a level in the hierarchy where it applies to all the lower levels and none of the higher levels. 4.2.
Reference: <author> Hinton G E & Sejnowski T J (1986). </author> <title> Learning and relearning in Boltzmann machines. </title> <editor> Chapter 7 in D E Rumelhart and J L McClelland (Eds), </editor> <booktitle> Parallel Distributed Processing, Vol I, </booktitle> <address> Cambridge Mass.: </address> <publisher> MIT Press, </publisher> <pages> pp 282-317. </pages> <editor> Lavington S H (1988). </editor> <title> An overview of knowledge manipulation engines and the Intelligent File Store. </title> <booktitle> Proceedings of the IEE Colloquium on Knowledge Manipulation Engines, London. </booktitle> <pages> pp 1-4. </pages>
Reference: <author> McGregor D, </author> <title> McInnes S and Henning M (1987). An architecture for associative processing of large knowledge bases (LKBs). </title> <journal> The Computer Journal 30(5), </journal> <pages> 404-412. </pages>
Reference-contexts: Although SP can imitate the effect of a re-write system it does not use any rewriting technique in the technical sense of that term (see, for example, Beaten, Bergstra & Klop, 1987). The SP system may be loosely classified as a knowledge manipulation engine like the FACT database system <ref> (McGregor, McInnes & Henning, 1987) </ref>, the Intelligent File Store (Lavington, 1988) or the integrated database and expert system (Syntel) described by Risch, Reboh, Hart & Duda, 1988) but there are many differences between SP and these systems in orientation and expected capabilities. 3.
Reference: <author> Quinlan J R (1983). </author> <title> Learning efficient classification procedures and their application to chess end games. </title> <editor> In R Michalski, J G Carbonell and T Mitchell (Eds) Machine Learning: </editor> <booktitle> an Artificial Intelligence Approach. </booktitle> <address> Palo Alto, CA: </address> <publisher> Tioga. </publisher>
Reference-contexts: The example also illustrates how SP6 can create a discrimination net like the ones produced by Quinlans ID3 <ref> (Quinlan, 1983) </ref>. The first object shows a set of animals, each with some distinctive attributes. OAOs have been used rather than the more appropriate UAOs because SP6 lacks the ability to look for patterns and sub-groupings within UAOs. Future versions of SP will plug this gap.
Reference: <author> Risch T, Reboh R, </author> <title> Hart P & Duda R (1988). A functional approach to integrating database and expert systems. </title> <journal> Communications of the ACM 31, </journal> <pages> 1424-1437. </pages>
Reference: <author> Robinson J A (1988). </author> <title> Beyond Loglisp: combining functional and relational programming in a reduction setting. </title> <booktitle> Machine Intelligence 11, </booktitle> <pages> 57-68. </pages>
Reference-contexts: SP incorporates many of the concepts associated with object-oriented design (reviewed in Cook, 1986). Although extraction of redundancy in information is a key part of the SP theory, the SP system is not a reduction system in the technical sense of that word <ref> (see, for example, Robinson, 1988) </ref>. Although SP can imitate the effect of a re-write system it does not use any rewriting technique in the technical sense of that term (see, for example, Beaten, Bergstra & Klop, 1987).
Reference: <author> Shieber S M (1986). </author> <title> An Introduction to Unification-Based Approaches to Grammar. Stanford, CA: Center for the Study of Language and Information. Siekmann J H (1989). Unification theory. </title> <journal> Journal of Symbolic Computation 7, </journal> <pages> 207-274. </pages>
Reference-contexts: The SP language (described below) owes its greatest debt to Prolog (see, for example, Clocksin & Mellish, 1981) but differs from Prolog in several ways. There is some resemblance between SP and unification grammars <ref> (see, for example, Shieber, 1986) </ref> but also significant differences. Unification concepts are reviewed in Siekmann (1989). The most important difference between SP and these kinds of system is that the pattern matching and unification processes in SP are much more general and they are set within a broader theoretical frame.
Reference: <author> Wolff J G (1987). </author> <title> Cognitive development as optimisation. </title> <editor> In L Bolc (Ed), </editor> <booktitle> Computational Models of Learning. </booktitle> <address> Heidelberg: </address> <publisher> Springer-Verlag, </publisher> <pages> 161-205. </pages>
Reference-contexts: If there are sufficient resources, they may be followed in parallel. 2.4. Related Work The SP theory originated in a programme of work on language learning by children, with research in inductive learning of grammars as a major part of the programme <ref> (Wolff, 1987, 1988) </ref>. The similarity between the processes needed for the inductive learning of grammars and processes at the heart of resolution theorem proving is what lead to the SP theory.
Reference: <author> Wolff J G (1988). </author> <title> Learning syntax and meanings through optimisation and distributional analysis. In Y Levy, I M Schlessinger and M D S Braine Wolff J G (1989). Information and redundancy in computing and cognition. </title> <type> AISB Quarterly 68, </type> <month> 14-17. </month> <title> Wolff J G (in press). Simplicity and power: some unifying ideas in computing. </title> <note> To appear in the Computer Journal. </note> <editor> Wolff J G & Chipperfield A J (in preparation). </editor> <booktitle> SP: </booktitle> <institution> a new view of software engineering and computing. </institution>
References-found: 12

