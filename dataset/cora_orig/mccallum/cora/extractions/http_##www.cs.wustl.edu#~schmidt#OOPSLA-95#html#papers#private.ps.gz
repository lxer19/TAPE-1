URL: http://www.cs.wustl.edu/~schmidt/OOPSLA-95/html/papers/private.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/OOPSLA-95/html/papers.html
Root-URL: 
Email: email: gilbert@acm.org  
Title: PrivateThread Pattern OOPSLA 95 Patterns for Concurrent, Parallel, and Distributed ObjectOriented Systems Workshop Submission PrivateThread:
Author: John W. Gilbert PrivateProcess, MethodProcess, MethodThread, PrivateTask, MethodTask 
Keyword: thread, task, concurrent, autonomic, execution, synchronous, asynchronous, access control, response, behavior  
Note: The description of this  
Date: October 10, 1995  
Address: 1985 W. Henderson Rd., Suite 525 Columbus, Ohio 43220  
Affiliation: Objective Software  Intent  
Abstract: Objects which model real world objects commonly must exhibit continuous concurrent response, or autonomic behavior. One way to implement this response is to allow an object to instantiate a privately held execution thread, or task, in which a method of the object is executed. Organizing concurrency in a sensible manner requires that programs either be factored mathematically, or, in objectoriented systems, reasonable abstractions be conceived to help identify opportunities for concurrency. The idea of the analogy of autonomic human behavior with object behavior is such an abstraction. Using this concept 
Abstract-found: 1
Intro-found: 1
Reference: [Agha90] <author> Agha, G. </author> <title> Concurrent ObjectOriented Programming, </title> <journal> CACM, </journal> <month> September </month> <year> 1990. </year>
Reference: [Caro89] <author> Caromel, D. </author> <title> Service, Asynchrony, </title> <journal> and Wait-By-Necessity, Journal of ObjectOriented Programming, </journal> <month> Nov/Dec </month> <year> 1989 </year>
Reference-contexts: Caromel [Caro93] has done much work in the area of concurrent objects, incorporating some of the features of PrivateThreads, but his scheme requires objects to inherit from a common Process class, as well as an application class, requiring multiple inheritance, and concurrent methods must be pre-declared <ref> [Caro89] </ref>. PrivateThread makes no assumptions about inheritance and is very dynamic in its usage of concurrency, i.e., any object can be given concurrent behavior any time by wrapping any one of its methods in a process.
Reference: [Caro93] <author> Caromel, D. </author> <title> Toward a Method of ObjectOriented Concurrent Programming, </title> <journal> CACM, </journal> <month> September </month> <year> 1993. </year>
Reference-contexts: The concept of concurrency within objects is very early mentioned in Yonezawa and Tokora [Yone87] 2 , but not in any great detail. Caromel <ref> [Caro93] </ref> has done much work in the area of concurrent objects, incorporating some of the features of PrivateThreads, but his scheme requires objects to inherit from a common Process class, as well as an application class, requiring multiple inheritance, and concurrent methods must be pre-declared [Caro89].
Reference: [Gamm94] <author> Gamma, E., Helm, R., Johnson, R., and Vlissides, J. </author> <title> Design Patterns: Elements of ObjectOriented Software Architecture. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Keywords: thread, task, concurrent, autonomic, execution, synchronous, asynchronous, access control, response, behavior The description of this pattern is modelled after the Design Patterns book <ref> [Gamm94] </ref>. Nomenclature Pattern Name: Classification: PrivateThread Behavioral Also Known As: PrivateProcess, MethodProcess, MethodThread, PrivateTask, MethodTask Intent Organizing concurrency in a sensible manner requires that programs either be factored mathematically, or, in objectoriented systems, reasonable abstractions be conceived to help identify opportunities for concurrency.
Reference: [Gilb93] <author> Gilbert, J., Wilhelm, R. </author> <title> A Concurrent Object Model for an Industrial Process-Control Application, </title> <journal> Journal of ObjectOriented Programming, </journal> <month> Nov/Dec </month> <year> 1993. </year>
Reference-contexts: Otherwise, the parent objects method execution must be controlled via a semaphore. This would turn the parent object into a MonitorObject, effectively an encapsulation of Hoares monitor [Hoar74]. Usage and Related Work Usage: This pattern has been used extensively in a real-time industrial measurement and control system since 1986 <ref> [Gilb93] </ref>. This system uses PrivateThreads to accomplish sensor measurements, safety monitoring, timed response, and periodic online calibration procedures. Related Patterns: Patterns relating to Exceptions and Error Notifications can be used in controlling and managing PrivateThread execution.
Reference: [Hoar74] <author> Hoare, C. </author> <title> Monitors: An Operating System Structuring Concept, </title> <journal> CACM, </journal> <month> Oct. </month> <year> 1974. </year>
Reference-contexts: Otherwise, the parent objects method execution must be controlled via a semaphore. This would turn the parent object into a MonitorObject, effectively an encapsulation of Hoares monitor <ref> [Hoar74] </ref>. Usage and Related Work Usage: This pattern has been used extensively in a real-time industrial measurement and control system since 1986 [Gilb93]. This system uses PrivateThreads to accomplish sensor measurements, safety monitoring, timed response, and periodic online calibration procedures.
Reference: [Kais92] <author> Kaiser, G., Hseush, W., Popovich, S., and Wu, S. </author> <title> Multiple Concurrency Control Policies in an ObjectOriented Programming System, </title> <institution> Columbia University, CUCS-020-90, </institution> <note> revised January 1992. </note>
Reference-contexts: PrivateThread Pattern 7 This problem of object consistency in concurrent systems is often tackled at the language level. The MELD <ref> [Kais92] </ref> language which gives support for multiple threads of control within an object uses Atomic Blocks (an encapsulation of critical sections) to enforce object state consistency. The responsibility for the identification and creation of Atomic Blocks is with the programmer.
Reference: [Lhr92] <author> Lhr, K-P. </author> <title> Concurrency Annotations, </title> <journal> Proceedings OOPSLA92, ACM SIGPLAN Notices, </journal> <month> October </month> <year> 1992. </year>
Reference-contexts: The MELD [Kais92] language which gives support for multiple threads of control within an object uses Atomic Blocks (an encapsulation of critical sections) to enforce object state consistency. The responsibility for the identification and creation of Atomic Blocks is with the programmer. The Ceiffel language <ref> [Lhr92] </ref> goes a little further by introducing the idea of Concurrency Annotations to cue a special compiler in generating correct concurrency controls. In this system, these same methods can be used sequentially, although only through recompilation. Again, as with PrivateThreads, the programmer must preplan consistency protection.
Reference: [Nier87] <author> Nierstrasz, O. </author> <title> Active Objects in Hybrid, </title> <journal> Proceedings OOPSLA87, ACM SIGPLAN Notices, </journal> <month> December </month> <year> 1987. </year> <editor> [ste88] sterbye, K. </editor> <title> Active Objects: An Access Oriented Framework for Object-Oriented Languages, </title> <journal> Journal of ObjectOriented Programming, </journal> <month> June/July </month> <year> 1988. </year>
Reference: [Wilh93] <author> Wilhelm, R., </author> <title> Publish and Subscribe with User Specified Action, Patterns Workshop, </title> <publisher> OOPSLA93. </publisher>
Reference-contexts: Alternately, results can be delivered by direct transfer to a requestor via a delegated message supplied by the requestor to the parent object. This kind of behavior is supported by a Subscription/Notification pattern such as that suggested by Wilhelm <ref> [Wilh93] </ref>. Any method of an object can be run in a PrivateThread if access to the objects instance variables are done in a concurrently safe manner. Usually, however, particular methods are intended to be run in PrivateThreads and are carefully coded to be safe, and to take advantage of concurrency.
Reference: [Wilh94] <author> Wilhelm, R. </author> <title> The Amazing Invisible Batch Automation System - the Impact of ObjectOriented Software Technology on Batch Automation, World Batch Forum, </title> <month> March </month> <year> 1994. </year>
Reference-contexts: Other software patterns are needed which create a coherent model of a running system and its executional behavior. Process modelling techniques have been suggested by Wilhelm <ref> [Wilh94] </ref> which enhance the usage of the PrivateThread pattern. 1 In this discussion parent is used to denote the object which instantiates, owns, and controls the PrivateThread.
Reference: [Yone87] <author> Yonezawa, A. and Tokoro, M. </author> <title> ObjectOriented Concurrent Programming, </title> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: Related Work and Discussion: All of the systems discussed below allow objects to have multiple threads of control private to themselves, and attempt to deal with consistency issues in various ways incremental to PrivateThread. The concept of concurrency within objects is very early mentioned in Yonezawa and Tokora <ref> [Yone87] </ref> 2 , but not in any great detail.
References-found: 12

