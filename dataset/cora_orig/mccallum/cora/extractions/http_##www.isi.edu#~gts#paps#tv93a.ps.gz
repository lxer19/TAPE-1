URL: http://www.isi.edu/~gts/paps/tv93a.ps.gz
Refering-URL: http://www.isi.edu/~gts/pubs.html
Root-URL: http://www.isi.edu
Email: fgts,evhg@zurich.ibm.com  
Title: Some Remarks on Protecting Weak Keys and Poorly-Chosen Secrets from Guessing Attacks  
Author: Gene Tsudik Els Van Herreweghen 
Address: CH-8803 Ruschlikon, Switzerland  
Affiliation: Communications and Computer Science Department IBM Zurich Research Laboratory  
Abstract: Authentication and key distribution protocols that utilize weak secrets (such as passwords and PINs) are traditionally susceptible to guessing attacks whereby an adversary iterates through a relatively small key space and verifies the correct guess. Such attacks can be defeated by the use of public key encryption and careful protocol construction. In their recent work, Lomas et al. investigated this topic and developed a methodology for avoiding guessing attacks while incurring only moderate overhead. In this paper we discuss several issues concerning the proposed solution and suggest modifications that remove some of the constraints (such as synchronized time and state retention by the server) and result in simpler and more efficient protocols. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Diffie and M. Hellman, </author> <title> "New Directions in Cryptography," </title> <journal> IEEE Transactions on Information Theory, </journal> <month> November </month> <year> 1976. </year>
Reference: [2] <institution> National Bureau of Standards, "Federal Information Processing Standards," National Bureau of Standards, </institution> <note> Publication 46, </note> <year> 1977. </year>
Reference-contexts: Public key encryption is confined to two data blocks as opposed to six in the original LGSN protocol. 5 Depending on the data block size of the underlying cryptosystem this may or may not result in any actual savings. Conventional encryption (e.g., DES <ref> [2] </ref>) is used only on a single block (in message 4) as opposed to three blocks in LGSN (one in message 1 and two in message 4). Furthermore, only one random number (nonce) needs to be generated by each party whereas LGSN requires three. <p> We also assume that this coincides with the block size of the underlying shared-key encryption function, e.g., DES <ref> [2] </ref>. 6 2 20 is the space of 6-digit PINs used for credit and cash cards in Europe. 4 The adversary can replay message 1 and obtain any number of replies of the type: N a L L (where K i is the i-th session key generated by S.) Using this
Reference: [3] <author> T. Lomas, L. Gong, J. Saltzer, R. Needham, </author> <title> "Reducing Risks from Poorly Chosen Keys," </title> <booktitle> Proceedings of ACM Symposium on Operating System Principles, </booktitle> <year> 1989. </year>
Reference-contexts: 1 Introduction At the 1989 Symposium on Operating Systems Principles (SOSP), Lomas et al. presented a paper: "Reducing Risks from Poorly Chosen Keys" <ref> [3] </ref>. This eye-opening paper addressed a number of problems associated with relying on weak human-selected secrets for authentication, and introduced a new class of hostile attacks called verifiable-text. Verifiable-text attacks form a superset of known-plaintext attacks. <p> Without replay detection, the LGSN protocol is quite difficult to patch. One may be tempted to apply a quick fix by modifying message 4 in the following manner: S =) A [N 1 a ] P a However, the authors of <ref> [3] </ref> make an assumption that user-generated nonces can not be used as encryption keys. The reason for this assumption is not altogether clear. Perhaps the users (or workstations acting on their behalf) are not trusted to generate good keys. <p> It is well-understood, nevertheless, that logging and auditing of anomalous events is difficult (if not impossible) without keep ing some state. 6. Nonce-based version of LGSN needs two extra messages and requires the server to keep state. In a nonce-based version of LGSN which is also presented in <ref> [3] </ref>, A first requests a nonce from the server and subsequently includes this nonce in place of a timestamp (i.e., T a in message 1 is replaced by the server's nonce.) Two additional messages do not represent a serious drawback; unless the server is very, very far away. <p> More nonces can be added in a similar fashion. Using this technique, the protocol can be extended to achieve any desired level of resistance to verifiable-text attacks. 7.4 Reducing Password Use One of the restrictions in <ref> [3] </ref> and [4] is that an end-device (such as a workstation) is not trusted to generate good keys. Consequently, workstation-generated nonces are not used as encryption keys. Only the server's public key K s and the user's password-derived key P a are used for encryption.
Reference: [4] <author> L. Gong, T. Lomas, R. Needham, J. Saltzer, </author> <title> "Protecting Poorly-Chosen Secrets from Guessing Attacks," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <note> to appear in Spring 1993. </note>
Reference-contexts: The authors appear to have been aware of this vulnerability 3 . Moreover, a follow-on paper to the Lomas et al. paper <ref> [4] </ref> explicitly states the requirement for replay detection by suggesting that the server store messages 1 and 3 for the duration of the maximum client-server clock skew. In fact, the motivation given for this replay detection measure is none other than the verifiable-text attack described above. <p> Then, the intruder simply replays the recorded message and obtains desired authentication. It is worth noting that this type of attack cannot be detected by most replay detection schemes (including the one suggested in <ref> [4] </ref>.) 4 Some Issues Pertaining to LGSN Protocol The main reason given in [4] for keeping state in the server is the protection against verifiable-text attacks of the type described in Section 1 above. <p> Then, the intruder simply replays the recorded message and obtains desired authentication. It is worth noting that this type of attack cannot be detected by most replay detection schemes (including the one suggested in <ref> [4] </ref>.) 4 Some Issues Pertaining to LGSN Protocol The main reason given in [4] for keeping state in the server is the protection against verifiable-text attacks of the type described in Section 1 above. While the proposed solution is clearly workable, it involves measures outside the protocol, i.e., state in the server is not represented in the actual protocol. <p> More nonces can be added in a similar fashion. Using this technique, the protocol can be extended to achieve any desired level of resistance to verifiable-text attacks. 7.4 Reducing Password Use One of the restrictions in [3] and <ref> [4] </ref> is that an end-device (such as a workstation) is not trusted to generate good keys. Consequently, workstation-generated nonces are not used as encryption keys. Only the server's public key K s and the user's password-derived key P a are used for encryption. <p> is still linked to breaking N 1 a and N a : an attacker able to break message 4 needs only as few as jP a j extra iterations on message 1 to find P a . 7.5 A Protocol with Secret Public Keys One of the protocols described in <ref> [4] </ref> uses a novel approach to the environment where users are not expected to remember the server's public key. Instead, users are assigned individual public/private key-pairs and, upon request, each user is supplied with his very own public key encrypted with the password. The protocol is shown in figure 7.
Reference: [5] <author> R. Needham and M. Schroeder, </author> <title> "Using Encryption for Authentication in Large Networks of Computers," </title> <journal> Communications of the ACM, </journal> <month> De-cember </month> <year> 1978. </year>
Reference-contexts: Following the protocol description, an informal analysis of the protocol steps is given. It is not out right claimed, but may be inferred that the demonstrated protocol is not susceptible to verifiable-text attacks. 1 A nonce is an unpredictable, used-only-once quantity <ref> [5] </ref>. 1 2 Attacks on LGSN Protocol Presented with no further requirements, the LGSN protocol is, in fact, vulnerable to verifiable-text attacks on both P a and P b .
Reference: [6] <author> R. Rivest, A. Shamir and L. Adleman, </author> <title> "A Method for Obtaining Digital Signatures and Public Key Cryptosystems," </title> <journal> Communications of the ACM, </journal> <month> February </month> <year> 1978. </year>
Reference-contexts: On other hand, many public key cryptosystems encrypt data in relatively large blocks (e.g., a reasonable block/key size for RSA <ref> [6] </ref> is 700 bits.) Therefore, the length of the message to be encrypted does not matter as long it is within the block size of the underlying cryptosystem. 2. Key distribution is combined with authentication.
Reference: [7] <author> L. Gong, </author> <title> "A Security Risk of Depending on Synchronized Clocks," </title> <journal> ACM Operating Systems Review, </journal> <volume> Vol. 26, No. 1, </volume> <month> January </month> <year> 1992. </year>
Reference-contexts: This certainly makes the underlying protocol less robust (not to mention less elegant.) There are also more subtle negative consequences of the use of timestamps for authentication. One notable peril of using timestamps is discussed by Gong in <ref> [7] </ref>. It involves a faulty clock setting on the part of the timestamp generator (which may be caused maliciously or accidentally) such that the clock is incorrectly set to some future time T f = (T c + ).
Reference: [8] <author> B. Liskov, L. Shrira and J. Wroclawski, </author> <title> "Efficient At-Most-Once Messages Based on Synchronized Clocks", </title> <journal> ACM Transactions on Computer Systems, </journal> <month> May </month> <year> 1991. </year>
Reference-contexts: Even the most efficient methods of replay de 3 T. Mark A. Lomas, private communication, January 1993 4 The term replay detection is meant to encompass the de tection of old (but not necessarily replayed) messages 2 tection (e.g., <ref> [8, 9] </ref>) require keeping a certain amount of soft state in the server. This certainly makes the underlying protocol less robust (not to mention less elegant.) There are also more subtle negative consequences of the use of timestamps for authentication.
Reference: [9] <author> G. Tsudik, </author> <title> "Access Control and Policy Enforcement in Internetworks", </title> <type> Ph.D. Dissertation, </type> <institution> USC Computer Science TR-91-15, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: Even the most efficient methods of replay de 3 T. Mark A. Lomas, private communication, January 1993 4 The term replay detection is meant to encompass the de tection of old (but not necessarily replayed) messages 2 tection (e.g., <ref> [8, 9] </ref>) require keeping a certain amount of soft state in the server. This certainly makes the underlying protocol less robust (not to mention less elegant.) There are also more subtle negative consequences of the use of timestamps for authentication.
References-found: 9

