URL: http://www.cs.ucl.ac.uk/research/mobile/archives/xerox/bayou/SessionGuaranteesPDIS.ps.gz
Refering-URL: http://www.cs.ucl.ac.uk/research/mobile/archives/xerox/bayou/
Root-URL: http://www.cs.ucl.ac.uk
Title: Abstract  
Abstract: Four per-session guarantees are proposed to aid users and applications of weakly consistent replicated data: Read Your Writes, Monotonic Reads, Writes Follow Reads, and Monotonic Writes. The intent is to present individual applications with a view of the database that is consistent with their own actions, even if they read and write from various, potentially inconsistent servers. The guarantees can be layered on existing systems that employ a read-any/ write-any replication scheme while retaining the principal benefits of such a scheme, namely high-availability, simplicity, scalability, and support for disconnected operation. These session guarantees were developed in the context of the Bayou project at Xerox PARC in which we are designing and building a replicated storage system to support the needs of mobile computing users who may be only intermittently connected. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Agrawal and A. Malpani. </author> <title> Ef ficient dissemination of information in computer networks. </title> <journal> The Computer Journal 34(6) </journal> <pages> 534-541, </pages> <month> December </month> <year> 1991. </year>
Reference: [2] <author> R. Alonso, D. Barbara, and H. Garcia-Molina. </author> <title> Data caching issues in an information retrieval system. </title> <journal> ACM Transactions on Database Systems 15(3) </journal> <pages> 359-384, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Another form of intermediate consistency involves controlling the amount of inconsistency that may occur among data replicas. Two examples are bounded inconsistency [3] and quasi-copies <ref> [2] </ref>. These approaches provide a different kind of consistency than session guarantees and should be viewed as complementary techniques. 8. Conclusions Four new per-session guarantees have been proposed to aid users and applications of weakly consistent replicated data: Read Your Writes, Monotonic Reads, Writes Follow Reads, and Monotonic Writes.
Reference: [3] <author> D. Barbara-Milla and H. Garcia-Molina. </author> <title> The demarcation protocol: A technique for maintaining constraints in distrib uted database systems. </title> <note> To appear in VLDB Journal. </note>
Reference-contexts: Another form of intermediate consistency involves controlling the amount of inconsistency that may occur among data replicas. Two examples are bounded inconsistency <ref> [3] </ref> and quasi-copies [2]. These approaches provide a different kind of consistency than session guarantees and should be viewed as complementary techniques. 8.
Reference: [4] <author> A. Birrell, R. Levin, R. M. Needham, and M. D. Schroeder. Grapevine: </author> <title> An exercise in distributed computing. </title> <booktitle> Commu nications of the ACM 25(4) </booktitle> <pages> 260-274, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: Weakly consistent systems are popular due to their high-availability, good scalability, and simplicity of design. These advantages arise from the ability to allow reads and writes to be performed with little or no synchronization among replicas. For example, Grapevine <ref> [4] </ref>, the first widely used computing system with weak consistency, used a read-any/write-any replication scheme, in which clients could read from any server and could write to any server. More recently, the use of weakly consistent replicated data has been driven by the needs of mobile computing applications [11,13,22]. <p> In an eventually consistent system, servers could use any of a variety of techniques to agree upon the order of Writes. For example, the Grapevine system orders Writes by their origination timestamp <ref> [4] </ref>. Using timestamps to determine the Write order does not imply that servers have synchronized clocks since there is no requirement that Writes be ordered by the actual time at which they were performed.
Reference: [5] <author> S. Davidson, H. Garcia-Molina, and D. Skeen. </author> <title> Consistency in a partitioned network: </title> <booktitle> A survey . ACM Computing Sur veys 17(3) </booktitle> <pages> 341-370, </pages> <month> September </month> <year> 1985. </year>
Reference-contexts: That is, for the most part, we discuss variants of a read-any/write-any replication scheme. However, the guarantees could also be used in systems that read or write multiple copies, such as all of the available servers in a partition <ref> [5] </ref>. We define DB (S,t) to be the ordered sequence of Writes that have been received by server S at or before time t. If t is known to be the current time, then it may be omitted leaving DB (S) to represent the current contents of the servers database.
Reference: [6] <author> A. Demers, D. Greene, C. Hauser , W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry. </author> <title> Epidemic algorithms for replicated database maintenance. </title> <booktitle> Proceedings Sixth Symposium on Principles of Distributed Comput ing, </booktitle> <address> Vancouver, B.C., Canada, </address> <month> August </month> <year> 1987, </year> <pages> pages 1-12. </pages>
Reference: [7] <author> A. R. Downing, I. B. Greenber g, and J. M. Peha. OSCAR: </author> <title> A system for weak-consistency replication. </title> <booktitle> Proceedings Workshop on the Management of Replicated Data, </booktitle> <address> Houston, Texas, </address> <month> November </month> <year> 1990, </year> <pages> pages 26-30. </pages>
Reference-contexts: Version vector based systems are of the most interest since they represent systems to which our guarantees could be added with relatively minimal effort. Examples of systems that employ version vectors to check the consistency of database copies include Coda [13,20], Ficus [10] (a successor to Locus [19]), OSCAR <ref> [7] </ref>, and refdbms [8]. The Coda distributed file system is in many ways representative of modern-day systems that use version vectors, so we briey examine how to add the four session guarantees to Coda.
Reference: [8] <author> R A. Golding. </author> <title> Weak consistency group communication for wide-area systems. </title> <booktitle> Proceedings Second Workshop on the Management of Replicated Data , Monterey, </booktitle> <address> California, </address> <month> November </month> <year> 1992, </year> <pages> pages 13-16. </pages>
Reference-contexts: Examples of systems that employ version vectors to check the consistency of database copies include Coda [13,20], Ficus [10] (a successor to Locus [19]), OSCAR [7], and refdbms <ref> [8] </ref>. The Coda distributed file system is in many ways representative of modern-day systems that use version vectors, so we briey examine how to add the four session guarantees to Coda.
Reference: [9] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, California, </address> <year> 1993. </year>
Reference-contexts: The former provides strongly consistent semantics, which ensures that the most recent version of a file existing in the system is returned, and the latter provides weakly consistent semantics where any available copy is returned. Much work has been done on providing various degrees of consistency in database systems <ref> [9] </ref>. This work focuses on relaxing the isolation between transactions, yielding reduced consistency, in order to increase concurrency. Weakly consistent systems, on the other hand, generally provide ample concurrency with little or no isolation.
Reference: [10] <author> R.G. Guy, J.S. Heidemann, W. Mak, T.W. Page, Jr., G.J. Popek, and D. Rothmeier. </author> <title> Implementation of the Ficus replicated file system. </title> <booktitle> USENIX Conference Proceedings, </booktitle> <pages> pages 63-71, </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: Version vector based systems are of the most interest since they represent systems to which our guarantees could be added with relatively minimal effort. Examples of systems that employ version vectors to check the consistency of database copies include Coda [13,20], Ficus <ref> [10] </ref> (a successor to Locus [19]), OSCAR [7], and refdbms [8]. The Coda distributed file system is in many ways representative of modern-day systems that use version vectors, so we briey examine how to add the four session guarantees to Coda.
Reference: [11] <author> T. Imielinski and B. R. Badrinath. </author> <title> Data management for mobile computing. </title> <booktitle> ACM SIGMOD Record 22(1) </booktitle> <pages> 34-39, </pages> <month> March </month> <year> 1993. </year>
Reference: [12] <author> L. Kalwell Jr., S. Beckhardt, T. Halvorsen, R. Ozzie, and I. Greif. </author> <title> Replicated document management in a group communication system. </title> <booktitle> Proceedings Conference on Computer-Supported Cooperative Work, </booktitle> <address> Portland, Oregon, </address> <month> September </month> <year> 1988. </year>
Reference-contexts: Also, a client in their system cannot switch to another host and have its operations be causally ordered with respect to its previous activity without doing a heavyweight synchronization action. In many systems with lazy replication, such as Lotus Notes <ref> [12] </ref>, clients desiring consistency among multiple read and/or write operations must, in general, use the same server for their interactions. In contrast, our approach focuses on providing guarantees to clients that routinely interact with multiple servers.
Reference: [13] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <booktitle> Proceedings Thirteenth ACM Symposium on Operating Systems Principles , Pacific Grove, </booktitle> <address> California, </address> <month> October </month> <year> 1991, </year> <pages> pages 213-225. </pages>
Reference: [14] <author> R. Ladin, B. Liskov, L. Shrira, and S. Ghemawat. </author> <title> Providing high availability using lazy replication. </title> <journal> ACM Transactions on Computer Systems 10(4) </journal> <pages> 360-391, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: The work that is closest to ours is that of Ladin, Liskov, Shrira, and Ghemawat on causal operations <ref> [14] </ref>. In their design, weakly consistent copies of a database are updated via gossip messages. Clients ensure causal ordering of their Read and Write operations by means of version vectors that accompany each client interaction message.
Reference: [15] <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM 21(7):558 565, </journal> <month> July </month> <year> 1978. </year>
Reference-contexts: The clock is a value from the given servers monotonically increasing logical clock. The only constraint on this logical clock is that it must increase for each Write accepted by the server; for instance, it could be a Lamport clock <ref> [15] </ref>, a real-time clock or simply a counter.
Reference: [16] <author> Q. Lu and M. Satyanarayanan. </author> <title> Isolation-only transactions for mobile computing. </title> <booktitle> ACM Operating Systems Review 28(2) </booktitle> <pages> 81-87, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: For an example of an attempt to provide increased isolation for clients of a replicated file system, see the recent proposal by Lu and Satyanarayanan for Isolation Only Transactions <ref> [16] </ref>. Another form of intermediate consistency involves controlling the amount of inconsistency that may occur among data replicas. Two examples are bounded inconsistency [3] and quasi-copies [2]. These approaches provide a different kind of consistency than session guarantees and should be viewed as complementary techniques. 8.
Reference: [17] <author> D. C. Oppen and Y. K. Dalal. </author> <title> The Clearinghouse: A decentralized agent for locating named objects in a distributed environment. </title> <journal> ACM Transactions on Office Information Sys tems 1(3) </journal> <pages> 230-253, </pages> <month> July </month> <year> 1983. </year>
Reference: [18] <author> D. S. Parker, G. J. Popek, G. Rudisin, A. Stoughton, B. J. Walker, E. Walton, J. M. Chow, D. Edwards, S. Kiser, and C. Kline. </author> <title> Detection of mutual inconsistency in distributed systems. </title> <journal> IEEE Transactions on Software Engineering SE 9(3) </journal> <pages> 240-246, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: Finding a suitable server, including checking that a servers database contains all of the necessary Writes, could be expensive. The bookkeeping required of servers to determine the relevant Writes for a Read could be excessive. Version vectors, which were introduced in Locus <ref> [18] </ref> and are used by several systems to detect Write conicts, can alleviate many of these problems. A version vector is a sequence of &lt;server, clock&gt; pairs, one for each server. The server portion is simply a unique identifier for a particular copy of the replicated database. <p> To check if one set of WIDs, Ws1, is a subset of another, Ws2, first obtain V1 from Ws1 and V2 from Ws2 as above. Then, check that V2 dominates V1, where dominance is defined as one vector being greater or equal to the other in all components <ref> [18] </ref>. With these rules, the state maintained for each session compacts into two version vectors: one to record the sessions Writes and one to record the sessions Reads (actually the Writes that are relevant to the sessions Reads).
Reference: [19] <author> G. Popek, B. Walker, J. Chow, D. Edwards, C. Kline, G. Rudisin, and G. Thiel. </author> <title> LOCUS: A network transparent, high reliability distributed system. </title> <booktitle> Proceedings Eighth Symposium on Operating Systems Principles , Pacific Grove, Cali fornia, </booktitle> <month> December </month> <year> 1981, </year> <pages> pages 169-177. </pages>
Reference-contexts: Version vector based systems are of the most interest since they represent systems to which our guarantees could be added with relatively minimal effort. Examples of systems that employ version vectors to check the consistency of database copies include Coda [13,20], Ficus [10] (a successor to Locus <ref> [19] </ref>), OSCAR [7], and refdbms [8]. The Coda distributed file system is in many ways representative of modern-day systems that use version vectors, so we briey examine how to add the four session guarantees to Coda.
Reference: [20] <author> M. Satyanarayanan, J.J. Kistler, P. Kumar, </author> <title> M.E. Okasaki, E.H. Siegel, and D.C. Steere. Coda: a highly available f ile system for a distributed workstation environment. </title> <journal> IEEE Transactions on Computers 39(4) </journal> <pages> 447-459, </pages> <month> April </month> <year> 1990. </year>
Reference: [21] <author> M. D. Schroeder, A. D. Birrell, and R. M. Needham. </author> <title> Experience with Grapevine: The growth of a distributed system. </title> <journal> ACM Transactions on Computer Systems 2(1) </journal> <pages> 3-23, </pages> <month> Febru ary </month> <year> 1984. </year>
Reference-contexts: Unfortunately, the lack of guarantees concerning the ordering of read and write operations in weakly consistent systems can confuse users and applications, as reported in experiences with Grapevine <ref> [21] </ref>. A user may read some value for a data item and then later read an older value. Similarly, a user may update some data item based on reading some other data, while others read the updated item without seeing the data on which it is based.
Reference: [22] <author> C. D. Tait and D. Duchamp. </author> <title> Service interface and replica management algorithm for mobile file system clients. </title> <booktitle> Proceedings First International Conference on Parallel and Distributed Information Systems, </booktitle> <month> December </month> <year> 1991, </year> <pages> pages 190-197. </pages>
Reference-contexts: In contrast, our approach focuses on providing guarantees to clients that routinely interact with multiple servers. As an example of a system that offers mobile computing users and applications a choice of consistency levels, the file system of Tait and Duchamp supports both strict and loose read operations <ref> [22] </ref>. The former provides strongly consistent semantics, which ensures that the most recent version of a file existing in the system is returned, and the latter provides weakly consistent semantics where any available copy is returned.
References-found: 22

