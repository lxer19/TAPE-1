URL: ftp://ams.sunysb.edu/pub/geometry/msi-workshop/95/krishnan.ps.gz
Refering-URL: http://ams.sunysb.edu/~held/proc_usb_comp_geo-95.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: krishnas@cs.unc.edu  manocha@cs.unc.edu  narkhede@cs.unc.edu  
Title: Representation and Evaluation of Boolean Combinations of NURBS Solids  
Author: Shankar Krishnan Dinesh Manocha Atul Narkhede 
Note: (extended abstract)  
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science, University of North Carolina,  
Abstract-found: 0
Intro-found: 1
Reference: [KM94] <author> S. Krishnan and D. Manocha. </author> <title> An efficient surface intersection algorithm based on the lower dimensional formulation. </title> <type> Technical Report TR94-062, </type> <institution> Department of Computer Science, University of North Carolina, </institution> <year> 1994. </year>
Reference-contexts: Trimmed patch intersection and Containment classification In order to compute the intersection curve between the two solids, we compute a series of intersections between pairs of trimmed patches. Initially, we compute the complete intersection curve (ignoring the trimming curves) using the algorithm developed in <ref> [KM94] </ref>. The actual intersection curve is computed accurately by maintaining the exact analytic representation of the intersection curve. Once the intersection curves between the two solids have been computed, one must use some form of containment tests to determine portions of patches to be retained in the final solid.
Reference: [KNM95] <author> S. Krishnan, A. Narkhede, and D. Manocha. </author> <title> Boole: A system to compute boolean combinations of sculptured solids. </title> <type> Technical Report TR95-008, </type> <institution> Department of Computer Science, University of North Carolina, </institution> <year> 1995. </year>
Reference-contexts: This is followed by a stack-based traversal of the polygon boundary and partitions are generated after proper combinations of labeled intersections are found <ref> [KNM95] </ref>. Trimmed patch intersection and Containment classification In order to compute the intersection curve between the two solids, we compute a series of intersections between pairs of trimmed patches. Initially, we compute the complete intersection curve (ignoring the trimming curves) using the algorithm developed in [KM94]. <p> Our system has been tested and its performance measured on a number of models including an industrial model provided by Electric Boat Division, General Dynamics. A complete draft of the paper can be found in <ref> [KNM95] </ref>.
Reference: [Sei90] <author> R. Seidel. </author> <title> Linear programming and convex hulls made easy. </title> <booktitle> In Proc. 6th Ann. ACM Conf. on Computational Geometry, </booktitle> <pages> pages 211-215, </pages> <address> Berkeley, California, </address> <year> 1990. </year>
Reference-contexts: Topological information about the solid is maintained in a graph. The overall algorithm makes use of a number of recently developed geometric algorithms for linear programming <ref> [Sei90] </ref>, trapezoidation of polygons [Sei91], partition of polygonal domains and ray-shooting. Use of Algorithms from Computational Geometry The CSG algorithm is based on a number of geometric operations.
Reference: [Sei91] <author> R. Seidel. </author> <title> A simple and fast randomized algorithm for computing trapezoidal decompositions and for triangulating polygons. </title> <journal> Computational Geometry Theory & Applications, </journal> <volume> 1(1) </volume> <pages> 51-64, </pages> <year> 1991. </year>
Reference-contexts: Topological information about the solid is maintained in a graph. The overall algorithm makes use of a number of recently developed geometric algorithms for linear programming [Sei90], trapezoidation of polygons <ref> [Sei91] </ref>, partition of polygonal domains and ray-shooting. Use of Algorithms from Computational Geometry The CSG algorithm is based on a number of geometric operations. <p> Sloan Foundation Fellowship, ARO Contract P-34982-MA, NSF Grant CCR-9319957, ONR Contract N00014-94-1-0738, ARPA Contract DABT63-93-C-0048 and NSF/ARPA Center for Computer Graphics and Scientific Visualization We use Seidel's algorithm <ref> [Sei91] </ref> to construct the horizontal and trapezoidal decomposition of a simple polygon. This enables us to answer point location queries in O (log n) time and find a point inside the polygon in constant time. It is an incremental randomized algorithm whose expected complexity is O (n log fl n).
References-found: 4

