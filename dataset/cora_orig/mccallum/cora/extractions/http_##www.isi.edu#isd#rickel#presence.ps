URL: http://www.isi.edu/isd/rickel/presence.ps
Refering-URL: http://www.isi.edu/isd/rickel/publications.html
Root-URL: http://www.isi.edu
Title: Integrating Pedagogical Agents into Virtual Environments  
Phone: 06/02/97 4:57 PM 1  
Author: W. Lewis Johnson Jeff Rickel Randy Stiles Allen Munro 
Note: To appear in the journal Presence  
Abstract: In order for a virtual environment to be effective as a training tool, it is not enough to concentrate on the fidelity of the renderings and the accuracy of the simulated behaviors. The environment should help trainees develop an understanding of the task being trained, and should provide guidance and assistance as needed. This paper describes a system for developing virtual environments in which pedagogical capabilities are incorporated into autonomous agents that interact with trainees. These pedagogical agents can monitor trainees progress and provide guidance and assistance. The agents interact with simulations of objects in the environment, and with trainees. The paper describes the architectural features of the environment and of the agents that permit the agents to meet instructional objectives within the virtual environment. It also discusses how agent-based instruction is combined with other methods of delivering instruction. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Ambros-Ingerson, J.A., and Steel, S., </author> <year> 1988. </year> <title> Integrating planning, execution and monitoring. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence (AAAI-88), </booktitle> <pages> pp. 83-88, </pages> <address> San Mateo, CA, </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Anderson, J.R., Boyle, C.F., Corbett, A.T., and Lewis, M.W., </author> <year> 1990. </year> <title> Cognitive modeling and intelligent tutoring. </title> <booktitle> Artificial Intelligence (42), </booktitle> <pages> pp. 7-49. </pages>
Reference-contexts: The Soar implementation level is largely hidden, allowing instructors to focus on modeling the task. Instead, the necessary Soar productions are generated automatically from the plan descriptions. This should offer advantages over rule-based authoring languages such as the rule language used in Andersons Lisp Tutor, <ref> (Anderson et al 1990) </ref>, which does not represent the kind of causal information that Steve captures, and thus is less suited to explanation generation. To appear in the journal Presence 06/02/97 4:57 PM 20 Finally, the representation supports automated acquisition from examples, as will be described in section 7.4. 7. <p> As we have argued elsewhere (Hill & Johnson 1995), focusing on the students situation, as is possible in simulation-based learning environments, permits the tutoring system to devote less effort to tracking student actions, compared to conventional plan recognition (Johnson 1986) and model tracing <ref> (Anderson et al 1990) </ref>. When students request help, it is likely to be aimed at overcoming whatever difficulty the students have encountered in the current situation; thus knowledge of what actions are appropriate in the situation has primary importance.
Reference: <author> Badler, N., Phillips, C., and Webber, B., </author> <title> 1993. </title> <publisher> Simulating Humans , Oxford University Press. </publisher>
Reference-contexts: AI techniques are appropriate when the agents must perform complex behaviors in a wide variety of situations. AI planners have been employed to control the behavior of human figures such as Jack <ref> ( Webber & Badler 1993) </ref>.
Reference: <author> Barrus, J.W., Waters, R.C., and Anderson, </author> <title> D.B., </title> <booktitle> 1996. Locales and beacons: Efficient and precise support for large multiuser virtual environments . Proceedings of the IEEE Virtual Reality Annual International Symposium , pp. </booktitle> <pages> 204-213. </pages> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: All of the message passing among these components is accomplished via a communications bus using a message protocol called TScript. The overall system architecture, illustrated in Figure 7, is similar in some ways to other virtual environment architectures such as SIMNET (Calvin et al 1993) and Spline <ref> ( Barrus et al 1996) </ref>, in that it provides a common interface so that multiple applications can share access to a virtual environment over a network. One major difference is that multiple threads of interaction can take place at the same time, each using a different set of messages.
Reference: <author> Billinghurst, M., and Savage, J., </author> <year> 1996. </year> <title> Adding intelligence to the interface. </title> <booktitle> Proceedings of the IEEE Virtual Reality Annual International Symposium , pp. </booktitle> <pages> 168-175. </pages> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: technology has not been applied extensively in virtual environments, although a few examples exist, such as Loftin and Kenneys Hubble Telescope maintenance trainer (Loftin & Kenney 1995), Kotani and Maess guide agent in the ALIVE system ( Kotani and Maes 1994), and Billinghurst and Savages system for training sinus surgery <ref> (Billinghurst & Savage 1996) </ref>. A distinct thread of research has focused on the development of autonomous agent technologies for synthetic environments. <p> Most other systems that provide authoring languages for procedural skills, such as RIDES and VRIDES, Rickels TOTS shell (Rickel 1988), and Billinghurst and Savages sinus surgery trainer <ref> ( Billinghurst & Savage 1996) </ref>, do not attempt to represent causal relationships between steps, and instead focus on ordering constraints and task hierarchies.
Reference: <author> Blumberg, B.M. and Galyean, T.A., </author> <year> 1995. </year> <title> Multilevel direction of autonomous creatures for real-time virtual environments. </title> <booktitle> SIGGRAPH 95 Conference Proceedings , pp. </booktitle> <pages> 47-54. </pages>
Reference-contexts: The appropriate commands for selecting the body parts and sending their position and orientation are then sent out on the communications bus, so that the Vista Viewers can render them. The layered agent architecture of Steve is in some respects similar to the ALIVE system <ref> (Blumberg & Galyean 1995) </ref>, which also defines motor commands abstractly and supports multiple agent realizations. It is also related to the RAP architecture ( Firby 1994). Like RAP, Steve represents plans and goals in its cognitive component, and sends action commands to a lower execution layer.
Reference: <author> Brooks, R.A., </author> <year> 1986. </year> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Journal of Robotics and Automation 2(1): </journal> <pages> 14-23. </pages>
Reference-contexts: Soar is thereby able to respond quickly to changing situations, switching from one operator to another as necessary. However, unlike some reactive architectures such as Brookss subsumption architecture <ref> (Brooks 1986) </ref>, Soar maintains an internal symbolic mental model of its own goals, and of the environment. This simplifies the process of modeling complex cognitive capabilities.
Reference: <editor> Calvin, J. et al, </editor> <booktitle> 1993. The SIMNET virtual world architecture . Proceedings of the IEEE Virtual Reality Annual International Symposium , pp. </booktitle> <pages> 450-455. </pages> . <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: All of the message passing among these components is accomplished via a communications bus using a message protocol called TScript. The overall system architecture, illustrated in Figure 7, is similar in some ways to other virtual environment architectures such as SIMNET <ref> (Calvin et al 1993) </ref> and Spline ( Barrus et al 1996), in that it provides a common interface so that multiple applications can share access to a virtual environment over a network.
Reference: <author> Coller, L. D., Pizzini, Q. A., Wogulis, J., Munro, A. & Towne, D. M. </author> , <year> 1991. </year> <title> Direct manipulation authoring of instruction in a model-based graphical environment. In L. </title>
Reference-contexts: That system, however, did not support the independent specification of object behaviors; the specification of simulation effects was confounded with the specification of instruction. RAPIDS ( Towne, Munro, Pizzini, Surmon, Coller, and Wogulis, 1990; Towne and Munro, 1991) and RAPIDS II <ref> ( Coller, Pizzini, Wogulis, Munro, and Towne, 1991) </ref> were descendants of IMTS that supported direct manipulation authoring of instructional content in the context of graphical simulations.
Reference: <editor> Birnbaum (Ed.), </editor> <booktitle> The international conference on the learning sciences: Proceedings of the 1991 conference , Evanston, </booktitle> <institution> Illinois: Association for the Advancement of Computing in Education. </institution> <note> To appear in the journal Presence 06/02/97 4:57 PM 35 Collins , A., </note> <author> Brown, J.S., and Newman, S.E., </author> <year> 1989. </year> <title> Cognitive apprenticeship: teaching the crafts of reading, writing, and mathematics. In Resnick, L.B., ed., Knowing, Learning, and Instruction: </title> <booktitle> Essays in Honor of Robert Glaser , pp. </booktitle> <pages> 453-494, </pages> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference: <author> Cypher, A., ed., </author> <year> 1993. </year> <title> Watch What I Do: </title> <publisher> Programming by Demonstration . MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference-contexts: The technique is conservative, generalizing the task model only when there is evidence in support of the generalization. As is common in programming by demonstration systems <ref> (Cypher 1993) </ref>, the instructor is given the opportunity to check the systems task model, and further generalize the task model if appropriate.
Reference: <author> Dewey, J., </author> <year> 1939. </year> <title> Fundamentals of educational process. </title> <booktitle> Intelligence in the Modern World: John Deweys Philosophy. Edited by Joseph Ratner. </booktitle> <address> New York: </address> <publisher> Random House, Inc. </publisher> <editor> de Jong, T., van Joolingen, W., Scott, D., deHoog, R., Lapied, L., Valent, R., SMILSLE: </editor> <title> system for multimedia integrated simulation learning environments. </title> <editor> In T. de Jong and L. Sarti (Eds.) </editor> <title> Design and production of multimedia and simulation based learning material , Dordrecht: </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1994. </year>
Reference-contexts: 1. Introduction Training is an important application area for virtual reality technologies. Immersive displays, three-dimensional sound, and other types of virtual reality interfaces can be used to create realistic virtual environments that closely simulate the real-world environments for which students are being trained. Students can therefore learn by doing <ref> (Dewey 1939) </ref>, i.e., improve their skills through practice on realistic tasks. It is expected that the richer perceptual cues and multimodal feedback (e.g., visual, auditory, and haptic) afforded to students in virtual environments will enable VR-based training to transfer easily to real-world skill ( Durlach & Mavor 1995).
Reference: <author> Durlach, N.I., and Mavor, </author> <title> A.S., </title> <editor> eds., </editor> <year> 1995. </year> <title> Virtual Reality: Scientific and Technological Challenges. </title> <publisher> National Academy Press, </publisher> <address> Washington D.C. </address>
Reference-contexts: Students can therefore learn by doing (Dewey 1939), i.e., improve their skills through practice on realistic tasks. It is expected that the richer perceptual cues and multimodal feedback (e.g., visual, auditory, and haptic) afforded to students in virtual environments will enable VR-based training to transfer easily to real-world skill <ref> ( Durlach & Mavor 1995) </ref>. Preliminary evidence supports this conjecture (Regian et al 1992). In order for a virtual environment to be effective as a training tool, it is not sufficient to focus just on maximizing the fidelity of the object renderings and behaviors. <p> In virtual environments, there are a number of potential advantages to integrating intelligent tutoring and autonomous agent capabilities into the same system <ref> ( Durlach & Mavor 1995) </ref>. Such a combined system can not only offer students advice, but actually show the students how the task is done: the agent can move its body in the virtual world and manipulate the same virtual objects that the students are expected to manipulate.
Reference: <author> Firby, R.J., </author> <year> 1994. </year> <title> Task networks for controlling continuous processes. </title> <booktitle> In Proceedings of the Second International Conference on AI Planning Systems </booktitle> . 
Reference-contexts: The layered agent architecture of Steve is in some respects similar to the ALIVE system (Blumberg & Galyean 1995), which also defines motor commands abstractly and supports multiple agent realizations. It is also related to the RAP architecture <ref> ( Firby 1994) </ref>. Like RAP, Steve represents plans and goals in its cognitive component, and sends action commands to a lower execution layer. Both can perform multiple actions concurrently, and permit concurrent execution of the cognitive and motor layers.
Reference: <author> Fogg., B.J., and Moon, Y., </author> <year> 1994. </year> <title> Computer as teammate: effects on user attitude and behavior. </title> <booktitle> Proceedings of Lifelike Computer Characters 94, </booktitle> <address> p. 54, </address> <institution> Microsoft Research, </institution> <address> Snowbird, UT. </address>
Reference-contexts: Studies have shown that users sometimes ascribe personality traits to computer systems, and user acceptance is determined in part by the compatibility of the users personality traits and the systems perceived personality traits <ref> (Fogg & Moon 1994) </ref>. The agent-centered approach affords the possibility of experimenting with the use of different types of interpersonal interactions in the service of pedagogical strategies.
Reference: <author> Gil, Y., </author> <year> 1993. </year> <title> Efficient Domain-Independent Experimentation. USC / ISI technical report ISI/RR-93-337. </title> <booktitle> Also appears in the Proceedings of the Tenth International Conference on Machine Learning. </booktitle>
Reference-contexts: The approach builds heavily upon previous work by Xuemei Wang on learning via observation (Wang 1995), as well as on previous work on learning from problem solving failures (Tambe, Johnson, and Shen 1997). It is also inspired by Gils work on learning via experimentation <ref> ( Gil 1993) </ref>. The system learns by watching a human instructor demonstrate the task, and then experimenting on its own with variants of the demonstration. Based on the demonstration and the experiments, the system is able to construct a generalized task model, including both causal relations and ordering constraints.
Reference: <author> Hayes-Roth, B. and van Gent., R., </author> <year> 1997. </year> <title> Story Making with Improvisational Puppets, </title> <booktitle> Proceedings of the First International Conference on Autonomous Agents , ACM Press. </booktitle>
Reference: <author> Hill, R.W. and Johnson, W.L., </author> <year> 1995. </year> <title> Situated Plan Attribution, </title> <journal> Journal of Artificial Intelligence in Education 6(1), </journal> <pages> pp. 35-67. </pages>
Reference-contexts: Email: johnson@isi.edu, rickel@isi.edu, stiles@aic.lockheed.com, munro@usc.edu. To appear in the journal Presence 06/02/97 4:57 PM 2 how to complete a given task, the learning process can get bogged down while the students are searching for some method of completing the task <ref> (Hill & Johnson 1995) </ref>. If they do not have a clear understanding of the tasks being trained, they may perform the tasks incorrectly without realizing it, and thus learn the task incorrectly. Furthermore, they may acquire incorrect models of the systems with which they are interacting (Self 1995). <p> To put it a different way, student monitoring is situated in the virtual environment. Our approach places primary emphasis on monitoring the virtual environment, so that Steve can provide assistance that is appropriate for the current situation. As we have argued elsewhere <ref> (Hill & Johnson 1995) </ref>, focusing on the students situation, as is possible in simulation-based learning environments, permits the tutoring system to devote less effort to tracking student actions, compared to conventional plan recognition (Johnson 1986) and model tracing (Anderson et al 1990). <p> Then if Steve has multiple recommendations that it might make, it could give priority to those which are part of the current subtask. Steve could also focus its intervention on impasse points <ref> (Hill and Johnson 1995) </ref>, i.e., situations where the student is making mistakes and appears to be unable to correct them. These and other enhancements can be made to the student monitoring capability without fundamentally altering the approach. 7.3.
Reference: <author> Hollan, J. D., Hutchins, E. L., and Weitzman, L., </author> <year> 1984. </year> <title> STEAMER: and interactive inspectable simulation-based training system, </title> <journal> AI Magazine 5(2), </journal> <pages> pp. 15-27. </pages>
Reference: <author> Johnson, W.L., </author> <year> 1986. </year> <title> Intention-Based Diagnosis of Novice Programming Errors , Morgan Kaufmann, </title> <address> Menlo Park, CA. </address>
Reference-contexts: As we have argued elsewhere (Hill & Johnson 1995), focusing on the students situation, as is possible in simulation-based learning environments, permits the tutoring system to devote less effort to tracking student actions, compared to conventional plan recognition <ref> (Johnson 1986) </ref> and model tracing (Anderson et al 1990). When students request help, it is likely to be aimed at overcoming whatever difficulty the students have encountered in the current situation; thus knowledge of what actions are appropriate in the situation has primary importance.
Reference: <author> Johnson, W.L., </author> <year> 1994. </year> <booktitle> Agents that learn to explain themselves . Proceedings of the Twelfth National Conference on Artificial Intelligence , pp. </booktitle> <pages> 1257-1263. </pages> <publisher> AAAI Press, </publisher> <address> Menlo Park, CA. </address>
Reference-contexts: Another important feature of Steves demonstration capability from a pedagogical standpoint is his ability to remember what actions he took, so that he can answer student questions afterwards. Steve employs the episodic memory capability that was developed for Soar agents as part of the Debrief system <ref> (Johnson 1994) </ref>. Debrief is a generic capability that enables Soar agents to remember their actions and explain them to users.
Reference: <author> Kotani, A. and Maes, P., </author> <year> 1994. </year> <title> Guide agents for virtual environment. </title> <booktitle> Proceedings of Lifelike Computer Characters 94, </booktitle> <institution> Microsoft Research, </institution> <address> Snowbird, UT, p. </address> <month> 59. </month>
Reference-contexts: Intelligent tutoring technology has not been applied extensively in virtual environments, although a few examples exist, such as Loftin and Kenneys Hubble Telescope maintenance trainer (Loftin & Kenney 1995), Kotani and Maess guide agent in the ALIVE system <ref> ( Kotani and Maes 1994) </ref>, and Billinghurst and Savages system for training sinus surgery (Billinghurst & Savage 1996). A distinct thread of research has focused on the development of autonomous agent technologies for synthetic environments.
Reference: <author> Laird, J.E., Newell, A., and Rosenbloom, P.S., </author> <year> 1987. </year> <title> Soar: An architecture for general intelligence. </title> <booktitle> Artificial Intelligence 33(1), </booktitle> <pages> pp. 1-64. </pages> <note> To appear in the journal Presence 06/02/97 4:57 PM 36 Loftin, </note> <author> R.B., and Kenney, P., </author> <year> 1995. </year> <title> Training the Hubble space telescope flight team. </title> <journal> IEEE Computer Graphics and Applications 15(5): </journal> <pages> 31-37. </pages>
Reference-contexts: VRIDES is a 3D extension of the widely used RIDES authoring system for 2D simulations. The Steve agent itself was developed by USC / Information Sciences Institute. It is built on top of the Soar agent architecture <ref> (Laird et al 1987) </ref>, augmented with a set of general-purpose instructional capabilities, such as explanation and demonstration. 2. Objectives of the Approach Steves architecture is intended to provide both control for autonomous agents and intelligent tutoring capabilities.
Reference: <author> Mitchell, T.M., </author> <year> 1982. </year> <title> Generalization as search. </title> <booktitle> Artificial Intelligence 18: </booktitle> <pages> 203-266. </pages>
Reference-contexts: Steve must now determine how the authors actions caused the valves to change state, and what causal relations and ordering constraints exist in the procedure. Following Wangs OBSERVER model, which builds on Mitchells version space approach <ref> (Mitchell 1982) </ref>, Steve constructs a most general and most specific model for the preconditions and effects of each operator.
Reference: <author> Munro, A. </author> <title> Authoring interactive graphical models. </title> <editor> In T. de Jong, D. M. Towne, and H. Spada (Eds.), </editor> <title> The Use of Computer Models for Explication, </title> <publisher> Analysis and Experiential Learning . Springer Verlag, </publisher> <year> 1994. </year>
Reference: <author> Munro, A., Johnson, M.C., Surmon, D.S., and Wogulis, J.L., </author> <year> 1993. </year> <title> Attribute-centered simulation authoring for instruction, </title> <booktitle> Proceedings of the AI-ED 93 World Conference on Artificial Intelligence in Education , pp. </booktitle> <pages> 82-89, </pages> <publisher> AACE. </publisher>
Reference-contexts: Finally, Steve is intended to be used in concert with nonagent-based instructional methods. The RIDES project has developed an authoring interface that simplifies the construction of structured exercises of various types, such as drills that test the students ability to name and identify objects <ref> (Munro et al 1993) </ref>. VRIDES, the descendant of RIDES designed for virtual environment training, inherits this interface. Although such 2 Another example of how an agent might be realized is the angel in the virtual environment depicted in the film Disclosure. <p> The approach also provides a more extensible architecture than direct component-to-component communication. The VRIDES component, which controls the behavior of objects in the virtual world, is a 3D extension of the RIDES 2D simulation authoring system <ref> (Munro et al 1993) </ref>. In VRIDES, as in RIDES, each object in the virtual world is assigned a set of attributes. Some attributes control the visual appearance of the object, while others control its behavior.
Reference: <author> Munro, A., Johnson, M.C., Pizzini, Q.A., Surmon, D.S., and Wogulis, J.L, </author> <title> A Tool for Building Simulation-Based Learning Environments, </title> <booktitle> in Simulation-Based Learning Technology Workshop Proceedings, </booktitle> <address> ITS'96 , Montreal, Quebec, Canada, </address> <month> June </month> <year> 1996. </year>
Reference: <author> Pizzini, Q.A., Munro, A., Wogulis, J.L., and Towne, </author> <title> D.M., The cost-effective authoring of procedural training, in Architectures and Methods for Designing Cost-Effective and Reusable ITSs Workshop Proceedings, </title> <address> ITS'96, Montreal, Quebec, Canada, </address> <month> June </month> <year> 1996. </year>
Reference: <author> Regian, J.W, Shebilske, W., and Monk, J., </author> <year> 1992. </year> <title> A preliminary empirical evaluation of virtual reality as an instructional medium for visualspatial tasks. </title> <journal> Journal of Communication 42(4): </journal> <pages> 136-149. </pages>
Reference-contexts: It is expected that the richer perceptual cues and multimodal feedback (e.g., visual, auditory, and haptic) afforded to students in virtual environments will enable VR-based training to transfer easily to real-world skill ( Durlach & Mavor 1995). Preliminary evidence supports this conjecture <ref> (Regian et al 1992) </ref>. In order for a virtual environment to be effective as a training tool, it is not sufficient to focus just on maximizing the fidelity of the object renderings and behaviors.
Reference: <author> Rich, C., </author> <year> 1995. </year> <title> Diamond Park demonstration. </title> <booktitle> IJCAI Workshop on AI and Entertainment, </booktitle> <address> Montreal, Que. </address>
Reference: <author> Rickel, J., </author> <year> 1988. </year> <title> An intelligent tutoring framework for task-oriented domains. </title> <booktitle> In Proceedings of the International Conference on Intelligent Tutoring Systems, </booktitle> <address> Montreal, Canada. </address>
Reference-contexts: To appear in the journal Presence 06/02/97 4:57 PM 25 The next level of authoring support provided for Steve is at the task level. Most other systems that provide authoring languages for procedural skills, such as RIDES and VRIDES, Rickels TOTS shell <ref> (Rickel 1988) </ref>, and Billinghurst and Savages sinus surgery trainer ( Billinghurst & Savage 1996), do not attempt to represent causal relationships between steps, and instead focus on ordering constraints and task hierarchies.
Reference: <author> Russell, S., and Norvig, P., </author> <year> 1995. </year> <title> Artificial Intelligence: A Modern Approach. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ. </address>
Reference-contexts: To appear in the journal Presence 06/02/97 4:57 PM 18 6. Modeling Tasks and Domains Steves pedagogical capabilities make use of a standard hierarchical plan representation of tasks <ref> (Russell and Norvig 1995) </ref>. Each plan has a set of goals that it achieves, and a set of steps for achieving the goals. Steps can be either primitive or complex; complex steps in turn are implemented via other plans.
Reference: <author> Sacerdoti, E., </author> <year> 1977. </year> <title> A Structure for Plans and Behavior. </title> <publisher> Elsevier North-Holland, </publisher> <address> New York. </address>
Reference-contexts: To meet these objectives, Steve executes procedures in the following manner. First, Steve constructs an overall plan for performing the tasks, using a top-down decomposition approach <ref> (Sacerdoti 1977) </ref>. That is, Steve repeatedly expands any complex steps in the evolving plan with the subplan (given to Steve as task knowledge) for achieving it, until the plan has been fully decomposed into primitive actions.
Reference: <author> Self, J. </author> <year> 1995. </year> <title> The ebb and flow of student modeling, </title> <booktitle> Proceedings of the International Conference on Computers in Education (ICCE 95): </booktitle> <address> 40-40h. </address>
Reference-contexts: If they do not have a clear understanding of the tasks being trained, they may perform the tasks incorrectly without realizing it, and thus learn the task incorrectly. Furthermore, they may acquire incorrect models of the systems with which they are interacting <ref> (Self 1995) </ref>. There are a number of ways to alleviate the deficiencies of simulation as a training tool. One way to ensure that learning experiences are effective is to have human instructors continually monitor student activities and give feedback.
Reference: <author> Soloway, E., </author> <year> 1995. </year> <title> Beware, </title> <journal> techies bearing gifts. Communications of the ACM, </journal> <volume> 38(1), </volume> <pages> pp. 17-24. </pages>
Reference-contexts: However, this places heavy demands upon instructors time, and may limit the amount of access that students have to the learning environment. Another approach is to support collaborative learning, where groups of students work together within the virtual environment, as in a multiuser dungeon <ref> (Soloway 1995) </ref>. Collaboration is definitely appropriate and even necessary for some learning situations, such as team training. However, collaboration by itself is only a partial solution. A group of students who are equally unfamiliar with the tasks being trained may duplicate and reinforce each others mistakes.
Reference: <author> Spensley, F. and Elsom-Cook, M. </author> <title> Generating domain representations for ITS. </title> <address> In D. </address>
Reference: <editor> Bierman, J. Breuker, and J. Sandberg (Eds.), </editor> <booktitle> the proceedings of the fourth international conference on artificial intelligence and education . Amsterdam: </booktitle> <publisher> IOS, </publisher> <year> 1989, </year> <pages> 276-280. </pages>
Reference: <author> Stansfield, S.A., </author> <year> 1994. </year> <title> A distributed virtual reality simulation system for situational training. Presence 3(4): </title> <type> 360-366. </type> <note> To appear in the journal Presence 06/02/97 4:57 PM 37 Stansfield, </note> <author> S.A., Miner, N., Shawver, D., and Rogers, D., </author> <year> 1995. </year> <title> An application of shared virtual reality to situational training. </title> <booktitle> In Proceedings of the IEEE Virtual Reality Annual International Symposium, </booktitle> <pages> pp. 156-161. </pages>
Reference: <author> Sterling, B., </author> <year> 1993. </year> <title> War is virtual hell. </title> <type> Wired 1(1), </type> <pages> pp. 46-51. </pages>
Reference: <author> Stiles, R., McCarthy, L., and Pontecorvo, M., </author> <year> 1995. </year> <title> Training Studio interaction, </title> <booktitle> Proceedings of the1995 Workshop on Simulation and Interaction in Virtual Environments (SIVE95). </booktitle> <address> Iowa City, IA: </address> <publisher> ACM Press. </publisher>
Reference-contexts: When fully developed the Steve architecture will support team training, enabling students and agents to work together on tasks. This work is part of the Virtual Environments for Training (VET) project, which consists of three technical thrusts. The virtual environment interface system, called Vista <ref> (Stiles et al 1995) </ref>, was developed by Lockheed Martin to create and interact with immersive virtual environments. The VRIDES system, developed by USC Behavioral Technologies Laboratory, simulates the behavior of the objects in the virtual environment, and provides a framework for creating structured lessons.
Reference: <author> Tambe, M., Johnson. W.L., and Shen, W.-M., </author> <year> 1997. </year> <title> Adaptive agent tracking - A preliminary report. </title> <journal> International Journal of Human-Computer Systems, </journal> <note> accepted for publication. </note>
Reference-contexts: To appear in the journal Presence 06/02/97 4:57 PM 22 It has also been used to enable Soar agents to learn from their mistakes, by comparing episodes in which decisions led to undesirable outcomes to other situations in which a similar decision led to a favorable result <ref> ( Tambe, Johnson, and Shen 1997) </ref>. In Steve, Debrief is used to commit situations to memory, via Soars chunking mechanism. Later, if a student has a question about why a particular action was taken, Steve recalls from its memory the situation in which the action was taken. <p> The approach builds heavily upon previous work by Xuemei Wang on learning via observation (Wang 1995), as well as on previous work on learning from problem solving failures <ref> (Tambe, Johnson, and Shen 1997) </ref>. It is also inspired by Gils work on learning via experimentation ( Gil 1993). The system learns by watching a human instructor demonstrate the task, and then experimenting on its own with variants of the demonstration. <p> These issues have been investigated in the context of the Soar-IFOR battlefield simulation project, which is modeling teams of combatants <ref> ( Tambe 1997) </ref>; we are applying Steve to similar battlefield tasks in order to assess how to transition Steve to such team tasks.
Reference: <author> Tambe, M., Johnson, W.L., Jones, R.M., Koss, F., Laird, J.E., Rosenbloom, P.S., and Schwamb, K., </author> <year> 1995. </year> <title> Intelligent agents for interactive simulation environments, </title> <journal> AI Magazine (6)1, </journal> <pages> pp. 15-39. </pages>
Reference-contexts: Another important requirement is that it should be easy to provide the knowledge Steve needs in order to perform in a new domain. Other projects implementing agents in Soar, such as Soar-IFOR <ref> (Tambe, Johnson, Jones, et al. 1995) </ref>, specify agent behavior by means of production rules. Encoding task behavior as production rules requires a detailed understanding of the Soar execution engine, as well as expertise in artificial intelligence. Other agent architectures such as BBK require specialized expertise as well. <p> Soar also has a built-in learning mechanism called chunking that enables Soar agents to improve their performance over time, and acquire new knowledge. Soar is currently being used to build synthetic combat agents for distributed battlefield environments <ref> ( Tambe, Johnson, Jones, et al. 1995) </ref>; many of the lessons learned from that project have been put to profitable use in Steve. Soar is a very general cognitive architecture that can model expert performance as well as novice behavior.
Reference: <author> Tambe, M., </author> <year> 1997. </year> <title> Agent Architectures for Flexible, Practical Teamwork. </title> <booktitle> Proceedings of the Fourteenth National Conference on Artificial Intelligence . AAAI Press, </booktitle> <address> Menlo Park, CA. </address>
Reference-contexts: To appear in the journal Presence 06/02/97 4:57 PM 22 It has also been used to enable Soar agents to learn from their mistakes, by comparing episodes in which decisions led to undesirable outcomes to other situations in which a similar decision led to a favorable result <ref> ( Tambe, Johnson, and Shen 1997) </ref>. In Steve, Debrief is used to commit situations to memory, via Soars chunking mechanism. Later, if a student has a question about why a particular action was taken, Steve recalls from its memory the situation in which the action was taken. <p> The approach builds heavily upon previous work by Xuemei Wang on learning via observation (Wang 1995), as well as on previous work on learning from problem solving failures <ref> (Tambe, Johnson, and Shen 1997) </ref>. It is also inspired by Gils work on learning via experimentation ( Gil 1993). The system learns by watching a human instructor demonstrate the task, and then experimenting on its own with variants of the demonstration. <p> These issues have been investigated in the context of the Soar-IFOR battlefield simulation project, which is modeling teams of combatants <ref> ( Tambe 1997) </ref>; we are applying Steve to similar battlefield tasks in order to assess how to transition Steve to such team tasks.
Reference: <author> Towne, D. M. </author> <title> A generalized model of fault-isolation performance. </title> <booktitle> In Proceedings, Artificial Intelligence in Maintenance: Joint Services Workshop , 1984. </booktitle>
Reference-contexts: IMTS ( Towne and Munro, 1988) provided tools for authoring interactive graphical simulations of electrical and hydraulic systems, but the model authoring approach was limited. IMTS supported troubleshooting assistance by a generic expert called Profile <ref> ( Towne, 1984) </ref>, but it could not be used to develop or deliver other kinds of instruction. To appear in the journal Presence 06/02/97 4:57 PM 29 An early approach to direct manipulation instructional authoring was Dominie (Spensley & Elsom-Cook, 1989).
Reference: <author> Towne, D. M. & Munro, A. </author> <title> The intelligent maintenance training system. </title> <editor> In J. Psotka, </editor> <publisher> L. </publisher>
Reference: <author> D. Massey, and S. A. </author> <title> Mutter (Eds . ) , Intelligent tutoring systems: Lessons learned (479-530). </title> <address> Hillsdale, NJ: </address> <publisher> Erlbaum, </publisher> <year> 1988. </year>
Reference: <author> Towne, D. M., Munro, A., Pizzini, Q. A., Surmon, D. S., Coller, L. D., & Wogulis, J. L. </author> <title> Model-building tools for simulation-based training. </title> <booktitle> Interactive Learning Environments , 1991, </booktitle> <pages> 1 , 33-50. </pages>
Reference-contexts: That system, however, did not support the independent specification of object behaviors; the specification of simulation effects was confounded with the specification of instruction. RAPIDS ( Towne, Munro, Pizzini, Surmon, Coller, and Wogulis, 1990; Towne and Munro, 1991) and RAPIDS II <ref> ( Coller, Pizzini, Wogulis, Munro, and Towne, 1991) </ref> were descendants of IMTS that supported direct manipulation authoring of instructional content in the context of graphical simulations.
Reference: <author> Towne, D. M. & Munro, A. </author> <title> Simulation-based instruction of technical skills. </title> <booktitle> Human Factors , 1991, </booktitle> <volume> 33, </volume> <pages> 325-341. </pages>
Reference-contexts: That system, however, did not support the independent specification of object behaviors; the specification of simulation effects was confounded with the specification of instruction. RAPIDS ( Towne, Munro, Pizzini, Surmon, Coller, and Wogulis, 1990; Towne and Munro, 1991) and RAPIDS II <ref> ( Coller, Pizzini, Wogulis, Munro, and Towne, 1991) </ref> were descendants of IMTS that supported direct manipulation authoring of instructional content in the context of graphical simulations.
Reference: <author> Wang, X., </author> <year> 1995. </year> <title> Learning by observation and practice: An incremental approach for planning operator acquisition. </title> <booktitle> Proceedings of the 12 th International Conference on Machine Learning. </booktitle>
Reference-contexts: Instead, Richard Angros in our group has been investigating the use of machine learning techniques to automate the construction of task models from examples. The approach builds heavily upon previous work by Xuemei Wang on learning via observation <ref> (Wang 1995) </ref>, as well as on previous work on learning from problem solving failures (Tambe, Johnson, and Shen 1997). It is also inspired by Gils work on learning via experimentation ( Gil 1993).
Reference: <author> Webber, B. and Badler, N., </author> <year> 1993. </year> <title> Virtual interactive collaborators for simulation and training. </title> <booktitle> Proceedings of the Third Conference on Computer Generated Forces and Behavioral Representation, </booktitle> <pages> pp. 199-205, </pages> <institution> Institute for Simulation and Training, </institution> <address> Orlando, FL. </address>
Reference-contexts: AI techniques are appropriate when the agents must perform complex behaviors in a wide variety of situations. AI planners have been employed to control the behavior of human figures such as Jack <ref> ( Webber & Badler 1993) </ref>.
Reference: <author> Weld , D.S., </author> <year> 1994. </year> <title> An introduction to least commitment planning. </title> <journal> AI Magazine, </journal> <volume> 15(4) </volume> <pages> 27-61. </pages>
Reference-contexts: To appear in the journal Presence 06/02/97 4:57 PM 21 The method that Steve uses for deciding which plan steps are relevant in the current situation is related to partial order planning <ref> (Weld 1994) </ref>. A partial order planner starts with the end goals of the task and adds steps to the plan in order to achieve those goals. Each step that is added may have unsatisfied preconditions, and each such precondition becomes a new subgoal that must similarly be achieved.
Reference: <author> Wenger, E., </author> <year> 1987. </year> <title> Intelligent Tutoring Systems. </title> <publisher> Morgan Kaufmann, </publisher> <address> Menlo Park, CA. </address> <note> To appear in the journal Presence 06/02/97 4:57 PM 38 Williams, </note> <author> M. D., Hollan, J. D., and Stevens, A. L. </author> <title> An overview of STEAMER: an advanced computer-assisted instruction system for propulsion engineering. </title> <booktitle> Behavior Research methods and Instrumentation , 1981, </booktitle> <volume> 13, </volume> <pages> 85-90. </pages>
Reference-contexts: Steve is unusual in combining both functions, in order to create agents that can both act and teach. There is already a significant body of work applying artificial intelligence techniques to human learning, by means of intelligent tutoring systems <ref> ( Wenger 1987) </ref>. AI techniques have been shown to be effective in such systems both to improve student performance and to reduce learning time. They rely upon a model of the subject matter being taught in order to track the students progress and provide assistance where needed.
References-found: 52

