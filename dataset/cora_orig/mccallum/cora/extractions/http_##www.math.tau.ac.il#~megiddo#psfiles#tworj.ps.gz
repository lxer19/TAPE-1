URL: http://www.math.tau.ac.il/~megiddo/psfiles/tworj.ps.gz
Refering-URL: http://www.math.tau.ac.il/~megiddo/pub.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Linear Programming with Two Variables per Inequality in Poly-Log Time  
Author: George S. Lueker Nimrod Megiddo Vijaya Ramachandran 
Abstract: The parallel time complexity of the linear programming problem with at most two variables per inequality is discussed. Let n and m denote the number of variables and the number of inequalities, respectively, in a linear programming problem. We describe an O((log m + log 2 n) log 2 n) time parallel algorithm under the concurrent-read-exclusive-write PRAM model for deciding feasibility. It requires mn O(log n) processors in the worst case, though we do not know whether this bound is tight. When the problem is feasible a solution can be computed within the same complexity. Moreover, linear programming problems with two nonzero coefficients in the objective function can be solved in poly-log time on a similar number of processors. Consequently, all these problems can be solved sequentially with only O((log m + log 2 n) 2 log 2 n) space. It is also shown that if the underlying graph has bounded tree-width and an underlying tree is given then the problem is in the class NC.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Aspvall and Y. Shiloach, </author> <title> "A polynomial time algorithm fro solving systems of linear inequalities with two variables per inequality", </title> <journal> SIAM J. Comput. </journal> <month> 9 </month> <year> (1980) </year> <month> 827-845. </month>
Reference-contexts: Our algorithm is essentially a parallelization of the algorithm in Nelson [ 13 ] , but our exposition will also make use of the characterization of Shostak [ 15 ] and further results by Aspvall and Shiloach <ref> [ 1 ] </ref> which we now describe. Given some bounds on a variable x and an inequality ffx + fiy fl (where ff and fi are nonzero), some bound on y can obviously be derived, depending on the signs of ff and fi. <p> The bounds are derived by intersecting the polygon P xX with line X = x (see [ 11 ] ). The values of xlow and xhigh are then added to the system and the process is repeated. It follows from results in <ref> [ 1 ] </ref> that after the second application of this procedure the projections of the feasible set on all the axes R x are readily available. Let the total number of edges in all polygons constructed during the algorithm be E.
Reference: [2] <author> A. Borodin, </author> <title> "On relating time and space to size and depth" SIAM J. </title> <institution> Comput. </institution> <month> 6 </month> <year> (1977) </year> <month> 733-744. </month>
Reference-contexts: Using standard simulation relations between parallel models of computation and between parallel time and sequential space <ref> [ 2; 9; 16 ] </ref> , this implies that feasibility can be determined by an O ((log m + log 2 n) 2 log 2 n) space-bounded read deterministic Turing machine. 5.
Reference: [3] <author> R. P. Brent, </author> <title> "The parallel evaluation of expressions", </title> <journal> J. Assoc. Comput. Mach. </journal> <month> 21 </month> <year> (1974) </year> <month> 210-208. </month>
Reference-contexts: This implies that one of the v i 's is in V . Given the underlying tree T, we can decompose the graph G in an efficient way. The decomposition is based on the centroid which is usually useful in the design of parallel algorithms (see <ref> [ 3 ] </ref> ). <p> The centroid decomposition of a tree is the iterated partitioning of a tree into two subtrees rooted at the centroid. Obviously, the tree decomposition is obtained in O (log N ) iterations, and moreover, it can be computed in poly-log time with a polynomial number of processors <ref> [ 3 ] </ref> . In view of Proposition 7.2 the centroid decomposition of T induces a decomposition of G as follows.
Reference: [4] <author> D. Dobkin, R. J. Lipton and S. Reiss, </author> <title> "Linear programming is log space hard for P", </title> <note> Information Processing Letters 8 (1979) 96-97. </note>
Reference-contexts: 1. Introduction Dobkin, Lipton and Reiss <ref> [ 4 ] </ref> first showed that the general linear programming problem was (log-space) hard for P. Combined with Khachiyan's result [ 10 ] that the problem is in P, this establishes that the problem is P-complete (that is, log-space complete for P).
Reference: [5] <author> L. R. Ford, Jr., and R. D. Fulkerson, </author> <title> Flows in networks, </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1962. </year>
Reference-contexts: Proof: The proof follows from the result that the problem of finding the value of the maximum flow through a capacitated network is P-complete [ 7 ] . More specifically, every maximum flow problem can be reduced <ref> [ 5 ] </ref> to a transportation problem, that is, a problem of the form Minimize X c ij x ij subject to X x ij a i i x ij 0 : The dual of the latter has only two variables per inequality.
Reference: [6] <author> L. M. Goldschlager, </author> <title> "Synchronous parallel computation", </title> <type> Technical Report No.114, </type> <institution> Department of Computer Science, University of Toronto, </institution> <month> December </month> <year> 1977. </year>
Reference: [7] <author> L. M. Goldschlager, R. A. Shaw and J. </author> <title> Staples, "The maximum flow problem is log space complete for P" Theoretical Computer Science 21 (1982) 105-111. </title>
Reference-contexts: The problem of finding the minimum value of a general linear function subject to linear inequalities with at most two variables per inequality is P-complete. Proof: The proof follows from the result that the problem of finding the value of the maximum flow through a capacitated network is P-complete <ref> [ 7 ] </ref> .
Reference: [8] <author> D. Helmbold and E. Mayr, </author> <title> "Fast scheduling problems on parallel computers", </title> <type> Report No. </type> <institution> STAN-CS-84-1025, Computer Science Department, Stanford University, </institution> <year> 1984. </year>
Reference-contexts: PROPAGATION is P-complete. Proof: The proof follows from a result by Helmbold and Mayr <ref> [ 8 ] </ref> that the 2-processor list scheduling problem is P-complete. The latter amounts to a special case of PROPAGATION: x k = jx k1 T k j (k = 1; ; n), where T 1 ; ; T n are given integers and x 0 = 0.
Reference: [9] <author> R. M. Karp and V. Ramachandran, </author> <title> "Parallel algorithms for shared memory machines", </title> <booktitle> in: Handbook of Theoretical Computer Science, </booktitle> <editor> J. van Leeuwen, ed., </editor> <publisher> North-Holland, </publisher> <year> 1988, </year> <note> to appear. </note>
Reference-contexts: Using standard simulation relations between parallel models of computation and between parallel time and sequential space <ref> [ 2; 9; 16 ] </ref> , this implies that feasibility can be determined by an O ((log m + log 2 n) 2 log 2 n) space-bounded read deterministic Turing machine. 5.
Reference: [10] <author> L. G. Khachiyan, </author> <title> "A polynomial algorithm in linear programming", </title> <journal> Soviet Math. Dokl. </journal> <month> 20 </month> <year> (1979) </year> <month> 191-194. </month>
Reference-contexts: 1. Introduction Dobkin, Lipton and Reiss [ 4 ] first showed that the general linear programming problem was (log-space) hard for P. Combined with Khachiyan's result <ref> [ 10 ] </ref> that the problem is in P, this establishes that the problem is P-complete (that is, log-space complete for P).
Reference: [11] <author> N. Megiddo, </author> <title> "Towards a genuinely polynomial algorithm for linear programming", </title> <note> SIAM Journal on Computing 12 (1983) 347-353. </note>
Reference-contexts: A popular specialization of the general linear programming problem is the problem of solving linear inequalities with at most two variables per inequality (see <ref> [ 11 ] </ref> and the references thereof). It is shown in [ 11 ] that a system of m linear inequalities in n variables (but at most two nonzero coefficients per inequality) can be solved in O (mn 3 log n) arithmetic operations and comparisons over any ordered field. <p> A popular specialization of the general linear programming problem is the problem of solving linear inequalities with at most two variables per inequality (see <ref> [ 11 ] </ref> and the references thereof). It is shown in [ 11 ] that a system of m linear inequalities in n variables (but at most two nonzero coefficients per inequality) can be solved in O (mn 3 log n) arithmetic operations and comparisons over any ordered field. <p> If bounds on y were available before, we keep the tightest available. Let us call the routine that updates such bounds FORWARD (see <ref> [ 11 ] </ref> ). It is convenient 3 to discuss the problem using graph-theoretic terminology. Thus, we identify variables with vertices, and inequalities with edges of a graph, which we call the constraints graph. This graph may have multiple edges and loops. <p> To obtain xlow and xhigh, suppose X and x are different names of the same variable. The bounds are derived by intersecting the polygon P xX with line X = x (see <ref> [ 11 ] </ref> ). The values of xlow and xhigh are then added to the system and the process is repeated.
Reference: [12] <author> N. Megiddo, </author> <title> "Applying parallel computation algorithms in the design of serial algorithms", </title> <journal> J. Assoc. Comput. Mach. </journal> <note> bf 30 (1983) 337-341. </note>
Reference-contexts: We can use here a technique presented in <ref> [ 12 ] </ref> to obtain a poly-log algorithm for finding optimal solutions over any ordered field. The idea is roughly as follows (see [ 12 ] for more detail). <p> We can use here a technique presented in <ref> [ 12 ] </ref> to obtain a poly-log algorithm for finding optimal solutions over any ordered field. The idea is roughly as follows (see [ 12 ] for more detail).
Reference: [13] <author> C. G. Nelson, </author> <title> An n O(log n) algorithm for the two two-variable-per-constraint linear programming satisfiability problem", </title> <type> Report No. </type> <institution> STAN-CS-76-689, Department of Computer Science, Stanford University, </institution> <month> November </month> <year> 1978. </year>
Reference-contexts: Finally, we show how to optimize a linear function with at most two nonzero coefficients subject to such systems of inequalities. 2. Preliminaries Two characterizations of feasibility of linear inequalities with at most two variables per inequality were given by Nelson <ref> [ 13 ] </ref> and Shostak [ 15 ] . Our algorithm is essentially a parallelization of the algorithm in Nelson [ 13 ] , but our exposition will also make use of the characterization of Shostak [ 15 ] and further results by Aspvall and Shiloach [ 1 ] which we <p> Preliminaries Two characterizations of feasibility of linear inequalities with at most two variables per inequality were given by Nelson <ref> [ 13 ] </ref> and Shostak [ 15 ] . Our algorithm is essentially a parallelization of the algorithm in Nelson [ 13 ] , but our exposition will also make use of the characterization of Shostak [ 15 ] and further results by Aspvall and Shiloach [ 1 ] which we now describe. <p> Shostak's theorem states that the system is feasible if and only if by applying the same procedure to the closure (that is, applying FORWARD along all simple paths and cycles) no infeasibility is detected. For parallel computation we need to consider, as in <ref> [ 13 ] </ref> , the implied bounds on one variable as functions of the values assigned to another variable. A more precise statement is given in the following proposition: Proposition 2.1. <p> Proof: The proof goes by induction on k. The case k = 1 is trivial. The inductive step is essentially the same as the case k = 2 which is straightforward. 3. Operations on polygons The algorithm of Nelson <ref> [ 13 ] </ref> made use of two operations on polygons, namely intersection and composition. <p> In other words, as noted in <ref> [ 13 ] </ref> , P zx is the projection on R xz of the intersection of the cylinders with bases P yx and P zy . <p> Let the total number of edges in all polygons constructed during the algorithm be E. As in the sequential algorithm of <ref> [ 13 ] </ref> , the polygons Q xy (n) are computed in O (log n) stages, and we have E = mn O (log n) .
Reference: [14] <author> N. Robertson and P. D. Seymour, </author> <title> "Graph width and well-quasi-ordering: a survey". </title>
Reference-contexts: In either case we obtain a poly-log algorithm with mn O (log n) processors for computing fl over any ordered field. Once fl is known, we can solve the system S 0 with = fl . 7. NC solutions to systems of bounded tree-width Robertson and Seymour <ref> [ 14 ] </ref> introduced the notion of the tree-width of a graph. This notion lends itself via the constraints graph to systems of linear inequalities with at most two variables per inequality. Definition 7.1.
Reference: [15] <author> R. Shostak, </author> <title> "Deciding linear inequalities by computing loop residues", </title> <journal> J. Assoc. Comput. Mach. </journal> <month> 28 </month> <year> (1981) </year> <month> 769-779. </month>
Reference-contexts: Finally, we show how to optimize a linear function with at most two nonzero coefficients subject to such systems of inequalities. 2. Preliminaries Two characterizations of feasibility of linear inequalities with at most two variables per inequality were given by Nelson [ 13 ] and Shostak <ref> [ 15 ] </ref> . Our algorithm is essentially a parallelization of the algorithm in Nelson [ 13 ] , but our exposition will also make use of the characterization of Shostak [ 15 ] and further results by Aspvall and Shiloach [ 1 ] which we now describe. <p> of linear inequalities with at most two variables per inequality were given by Nelson [ 13 ] and Shostak <ref> [ 15 ] </ref> . Our algorithm is essentially a parallelization of the algorithm in Nelson [ 13 ] , but our exposition will also make use of the characterization of Shostak [ 15 ] and further results by Aspvall and Shiloach [ 1 ] which we now describe.
Reference: [16] <author> L. Stockmeyer and U. Vishkin, </author> <title> "Simulation of parallel random access machines by circuits", </title> <journal> SIAM J. Comput. </journal> <volume> 13 (1984) 409-422. </volume> <pages> 13 </pages>
Reference-contexts: Using standard simulation relations between parallel models of computation and between parallel time and sequential space <ref> [ 2; 9; 16 ] </ref> , this implies that feasibility can be determined by an O ((log m + log 2 n) 2 log 2 n) space-bounded read deterministic Turing machine. 5.
References-found: 16

