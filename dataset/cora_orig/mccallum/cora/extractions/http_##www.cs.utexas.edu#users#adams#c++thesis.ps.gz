URL: http://www.cs.utexas.edu/users/adams/c++thesis.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/adams/
Root-URL: 
Title: FACTS A Formal Analysis of C++: Type rules and Semantics  
Author: by Adam Seligman WILLIAMS 
Degree: A Thesis Submitted in partial fulfillment of the requirements for the Degree of Bachelor of Arts with Honors in Computer Science  
Date: May 22, 1995  
Affiliation: COLLEGE Williamstown, Massachusetts  
Abstract-found: 0
Intro-found: 0
Reference: [Aba93] <author> Martin Abadi. </author> <title> Baby modula-3 and a theory of objects, </title> <month> April </month> <year> 1993. </year>
Reference-contexts: Abadi's analysis of the core features of Modula-3, in <ref> [Aba93] </ref>, has served as a model for the analysis we have applied to C++.
Reference: [BCD + 93] <author> K. Bruce, J. Crabtree, A. Dimock, R. Muller, T. Murtagh, and R. van Gent. </author> <title> Safe and decidable type checking in an object-oriented language. </title> <booktitle> In Proc. ACM Symp. on Object-Oriented Programming: Systems, Languages, and Applications, </booktitle> <pages> pages 29-46, </pages> <year> 1993. </year>
Reference: [BL90] <author> K. Bruce and G. Longo. </author> <title> A modest model of records, inheritance and bounded quantification. </title> <journal> Information and Computation, </journal> 87(1/2):196-240, 1990. 
Reference: [BM92] <author> Kim B. Bruce and J. Mitchell. </author> <title> PER models of subtyping, recursive types and higher-order polymorphism. </title> <booktitle> In Proc. ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 316-327, </pages> <year> 1992. </year>
Reference: [Bru93] <author> Kim Bruce. </author> <title> A paradigmatic object-oriented programming language: Design, static typing and semantics. </title> <journal> Journal of Functional Programming, </journal> <month> January </month> <year> 1993. </year>
Reference-contexts: Such formal techniques would then facilitate important developments in the understanding of object-oriented languages, such as the realization that subtyping and inheritance are distinct, as presented in [CHC90]. Bruce's work, in the papers [BL90],[BM92],[BCD + 93], <ref> [Bru93] </ref>, [Bru94], and [BSvG94] (among others), has furthered the theoretical development of programming languages and strengthened the connection between formal analysis of the object-oriented features of a language and the development of a high-level conceptual model of the language.
Reference: [Bru94] <author> Kim Bruce. </author> <title> Binary methods, subsumption, and matching. </title> <month> December </month> <year> 1994. </year>
Reference-contexts: Such formal techniques would then facilitate important developments in the understanding of object-oriented languages, such as the realization that subtyping and inheritance are distinct, as presented in [CHC90]. Bruce's work, in the papers [BL90],[BM92],[BCD + 93], [Bru93], <ref> [Bru94] </ref>, and [BSvG94] (among others), has furthered the theoretical development of programming languages and strengthened the connection between formal analysis of the object-oriented features of a language and the development of a high-level conceptual model of the language.
Reference: [BSvG94] <author> Kim Bruce, Angela Schuett, and Robert van Gent. PolyTOIL: </author> <title> A type-safe polymorphic object-oriented language. </title> <type> DRAFT, </type> <month> December </month> <year> 1994. </year>
Reference-contexts: Such formal techniques would then facilitate important developments in the understanding of object-oriented languages, such as the realization that subtyping and inheritance are distinct, as presented in [CHC90]. Bruce's work, in the papers [BL90],[BM92],[BCD + 93], [Bru93], [Bru94], and <ref> [BSvG94] </ref> (among others), has furthered the theoretical development of programming languages and strengthened the connection between formal analysis of the object-oriented features of a language and the development of a high-level conceptual model of the language.
Reference: [Car85] <author> L. Cardelli. </author> <title> Basic polymorphic typechecking. </title> <journal> Polymorphism Newsletter, </journal> <volume> 2(1), </volume> <month> January </month> <year> 1985. </year>
Reference-contexts: C++ was originally designed at a time when much of the theoretical work on object-oriented languages was just beginning. The theoretical developments in the study of object-oriented languages can offer insight into the behavior of a language like C++. Work by Cardelli resulted in [Car88] and <ref> [Car85] </ref>, which set the groundwork for the use of formal techniques to model the behavior of object-oriented programming languages. Such formal techniques would then facilitate important developments in the understanding of object-oriented languages, such as the realization that subtyping and inheritance are distinct, as presented in [CHC90].
Reference: [Car88] <author> L. Cardelli. </author> <title> A semantics of multiple inheritance. </title> <journal> Information and Computation, </journal> <volume> 76 </volume> <pages> 138-164, </pages> <year> 1988. </year> <title> Special issue devoted to Symp. on Semantics of Data Types, </title> <booktitle> Sophia-Antipolis (France), </booktitle> <year> 1984. </year>
Reference-contexts: C++ was originally designed at a time when much of the theoretical work on object-oriented languages was just beginning. The theoretical developments in the study of object-oriented languages can offer insight into the behavior of a language like C++. Work by Cardelli resulted in <ref> [Car88] </ref> and [Car85], which set the groundwork for the use of formal techniques to model the behavior of object-oriented programming languages. Such formal techniques would then facilitate important developments in the understanding of object-oriented languages, such as the realization that subtyping and inheritance are distinct, as presented in [CHC90].
Reference: [Cas94] <author> Giuseppe Castagna. </author> <title> Covariance and contravariance: conflict without a cause. </title> <type> page 12, </type> <month> April </month> <year> 1994. </year> <month> 102 </month>
Reference: [CHC90] <author> William R. Cook, Walter L. Hill, and Peter S. Canning. </author> <title> Inheritance is not subtyping. </title> <address> pages 125-135, </address> <year> 1990. </year>
Reference-contexts: Such formal techniques would then facilitate important developments in the understanding of object-oriented languages, such as the realization that subtyping and inheritance are distinct, as presented in <ref> [CHC90] </ref>. Bruce's work, in the papers [BL90],[BM92],[BCD + 93], [Bru93], [Bru94], and [BSvG94] (among others), has furthered the theoretical development of programming languages and strengthened the connection between formal analysis of the object-oriented features of a language and the development of a high-level conceptual model of the language.
Reference: [CW85] <author> L. Cardelli and P. Wegner. </author> <title> On understanding types, data abstraction, and polymorphism. </title> <journal> Computing Surveys, </journal> <volume> 17(4) </volume> <pages> 471-522, </pages> <year> 1985. </year>
Reference: [Dav93] <author> Stephen R. Davis. </author> <title> C++ Programmers Companion: Designing, Testing, and Debugging. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference: [ES91] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year> <title> ANSI base document. </title>
Reference-contexts: the ANSI annotations, which could be seen as a pro or a con! Overall, Stroustrup's guide is a well-rounded mix of primer and reference guide. [WF92] is another good primer, and elucidates many issues and distinctions in manner less tersely than Stroustrup. 2.13.2 Reference The seminal reference guide to C++, <ref> [ES91] </ref>, is the Annotated Reference Manual, the so called "ARM." The ARM is quite difficult to read, particularly for a novice C++ programmer. The ARM is the language specification itself (and the ANSI standard base document) in a hypertext form committed to print.
Reference: [Gun92] <author> Carl A. Gunter. </author> <title> Semantics of Programming Languages: Structures and Techniques. </title> <booktitle> Foundations of Computing. </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference: [Joy92] <author> Ian Joyner. </author> <title> C++??: A critique of C++. </title> <year> 1992. </year>
Reference: [Lip91] <author> Stanley B. Lippman. </author> <title> C++ Primer. </title> <publisher> Addison-Wesley, </publisher> <address> 2nd edition, </address> <year> 1991. </year>
Reference-contexts: A large number of books have published on 29 C++ recently; each has its strengths and merits. 2.13.1 Primers <ref> [Lip91] </ref> is arguably the seminal introduction to the language. Lippman makes use of many examples to illustrate the various features of the language in a tutorial style.
Reference: [Mey92] <author> Scott Meyers. </author> <title> Effective C++: 50 Specific Ways to Improve Your Programs and Designs. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: The infamous complexity of C++ has made this an achievement for an informal language specification. 2.13.3 Miscellaneous One of the problems with learning C++ and working through its contortions is that so many guides all repeat what the others have to say. I would recommend Scott Meyers book, <ref> [Mey92] </ref>, as a useful set of pointers for an intermediate C++ user. Meyers sometimes fails to explain why one should use C++ in a particular way, but the suggestions are generally good nonetheless.
Reference: [NN92] <author> Hanne Riis Nielson and Flemming Nielson. </author> <title> Semantics with Applications: A Formal Introduction. </title> <publisher> John Wiley & Sons, </publisher> <year> 1992. </year>
Reference: [Sch94a] <author> David A. Schmidt. </author> <title> The Structure of Typed Programming Languages. </title> <booktitle> Foundations of Computing. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [Sch94b] <author> Angela Marie Schuett. </author> <title> Parametric polymorphism in a type-safe, object-oriented programming language. </title> <type> Honors thesis, </type> <institution> Williams College, Williamstown, Massachusetts, </institution> <month> May </month> <year> 1994. </year> <type> Thesis Advisor: Dr. Kim Bruce, </type> <institution> Williams College CS Department. </institution>
Reference-contexts: Abadi's analysis of the core features of Modula-3, in [Aba93], has served as a model for the analysis we have applied to C++. In addition, van Gent's thesis, [vG93], and Schuett's thesis, <ref> [Sch94b] </ref>, have set very high standards for the depth of semantic analysis appropriate to an undergraduate thesis. 1.11 A Guide to this Thesis This thesis is designed to be approachable by a broad range of audiences.
Reference: [Str91] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> 2nd edition, </address> <year> 1991. </year>
Reference-contexts: Lippman makes use of many examples to illustrate the various features of the language in a tutorial style. This primer, however, will not suffice as a reference guide for the experienced C++ user. <ref> [Str91] </ref> is Bjarne Stroustrup's combination primer and reference guide. The primer is relatively terse, and the examples lack a continuity that simplify their comprehension. <p> Meyers sometimes fails to explain why one should use C++ in a particular way, but the suggestions are generally good nonetheless. A very interesting book to read is Stroustrup's "The Design and Evolution of C++," [Str94], which appears to have evolved from the first few pages of <ref> [Str91] </ref> into a full book. The book offers anecdotal explanations of how and why various features were added to C with Classes, and then C++, over the 30 years of its development.
Reference: [Str94] <author> Bjarne Stroustrup. </author> <title> The Design and Evolution of C++. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Meyers sometimes fails to explain why one should use C++ in a particular way, but the suggestions are generally good nonetheless. A very interesting book to read is Stroustrup's "The Design and Evolution of C++," <ref> [Str94] </ref>, which appears to have evolved from the first few pages of [Str91] into a full book. The book offers anecdotal explanations of how and why various features were added to C with Classes, and then C++, over the 30 years of its development. <p> The book offers anecdotal explanations of how and why various features were added to C with Classes, and then C++, over the 30 years of its development. As one analyzes the language carefully, there are many situations in which the design of the language was quite tricky. As <ref> [Str94] </ref> gives insight into those decisions, it also sheds light on the inner workings of the language.
Reference: [vG93] <author> Robert van Gent. </author> <title> TOIL: An imperative type-safe object-oriented language. </title> <type> Honors thesis, </type> <institution> Williams College, Williamstown, Mas-sachusetts, </institution> <month> May </month> <year> 1993. </year> <type> Thesis Advisor: Dr. Kim Bruce, </type> <institution> Williams College CS Department. </institution>
Reference-contexts: Abadi's analysis of the core features of Modula-3, in [Aba93], has served as a model for the analysis we have applied to C++. In addition, van Gent's thesis, <ref> [vG93] </ref>, and Schuett's thesis, [Sch94b], have set very high standards for the depth of semantic analysis appropriate to an undergraduate thesis. 1.11 A Guide to this Thesis This thesis is designed to be approachable by a broad range of audiences.
Reference: [Wal93] <author> Jim Waldo, </author> <title> editor. The Evolution of C++: Language Design in the Marketplace of Ideas. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference: [WF92] <author> Keith Weiskamp and Bryan Flamig. </author> <title> The Complete C++ Primer. </title> <publisher> Harcourt Brace Jovanovich, Publishers, </publisher> <address> 2nd edition, </address> <year> 1992. </year> <month> 103 </month>
Reference-contexts: The primer is relatively terse, and the examples lack a continuity that simplify their comprehension. The reference guide component lacks the ANSI annotations, which could be seen as a pro or a con! Overall, Stroustrup's guide is a well-rounded mix of primer and reference guide. <ref> [WF92] </ref> is another good primer, and elucidates many issues and distinctions in manner less tersely than Stroustrup. 2.13.2 Reference The seminal reference guide to C++, [ES91], is the Annotated Reference Manual, the so called "ARM." The ARM is quite difficult to read, particularly for a novice C++ programmer.
References-found: 26

