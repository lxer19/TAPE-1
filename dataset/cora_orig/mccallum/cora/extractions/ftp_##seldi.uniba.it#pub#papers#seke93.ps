URL: ftp://seldi.uniba.it/pub/papers/seke93.ps
Refering-URL: http://www.cs.umd.edu/~lanubile/public.html
Root-URL: 
Email: email:giuvis@vm.csata.it  
Phone: fax: +39-80-243196  
Author: F.Abbattista, F.Lanubile, and G.Visaggio 
Address: Via Amendola 173, 70126 Bari, Italy  
Affiliation: Dipartimento di Informatica, University of Bari  
Abstract: 1 To handle the complexity of modern software systems, a software comprehension strategy pointing out the conceptual abstraction level is necessary. In this context, the role of technology is only marginal as the latter produces results which are too closely linked to the implementation aspect, whereas the conceptualization task is typically a human activity. This study proposes a method for data reverse engineering, which, although founded on previous experiences reported in the literature, integrates them with an intensive use of human intervention, thus making it possible to bridge the gap between the implementation of solutions and the conceptual requirements of applications. The reverse engineering of data is guided by the expectations provided by a reference conceptual model, which captures the essence of the application domain, ignoring any specialist aspects stemming from particular technological and organizational solutions. The method was experimented by reconstructing, in a banking application, the conceptual model of data and the data dictionary. The lessons learned enabled us to conclude that even if the productivity measured was relatively low, the method attains the target of recovering working software systems. Furthermore, the experimentation showed that the effectiveness of the data reverse engineering process tends to increase as time goes on and experience accumulates. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C.Bachman, </author> <title> "A CASE for reverse engineering", </title> <journal> Datamation, </journal> <month> July 1, </month> <year> 1988, </year> <month> pp.49-56. </month>
Reference-contexts: 1. Introduction Over the last twenty years, organizations which have invested in information technology have amassed enormous assets in the way of operative software. Bachman in <ref> [1] </ref> calculated that the total number of lines of Cobol code on IBM computers amounted to 77 billion. <p> The lower the level of abstraction, the greater the detailed information which must be handled to understand the working of the system. Generally, the user understands the representation at the conceptual level and, at most, at the requirements level. In <ref> [1] </ref> is stated explicitly that reverse engineering cannot be completely automized because the essential information required for this task cannot be completely localized on static sources. <p> The diagram constitutes a different representation from the file one, but it does not add information, nor is the simplification more readable for the programmer or system user. Although expert systems, like the one suggested in <ref> [1] </ref> and proposed in [2], also use dynamic sources, we do not consider them effective. The potential of expert systems derives not from inference mechanisms with a greater or lesser degree of sophistication but from a knowledge base which reflects the real world.
Reference: [2] <author> P.Benedusi, V.Benvenuto, and M.G.Caporaso, </author> <title> "Maintenance and prototyping at the entity-relationship level: a knowledge-based support", </title> <booktitle> Proceedings of the COnference on Software Maintenance 1990, </booktitle> <address> San Diego, California, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1990, </year> <month> pp.161-169. </month>
Reference-contexts: The diagram constitutes a different representation from the file one, but it does not add information, nor is the simplification more readable for the programmer or system user. Although expert systems, like the one suggested in [1] and proposed in <ref> [2] </ref>, also use dynamic sources, we do not consider them effective. The potential of expert systems derives not from inference mechanisms with a greater or lesser degree of sophistication but from a knowledge base which reflects the real world.
Reference: [3] <author> T.J.Biggerstaff, </author> <title> "Design recovery for maintenance and reuse", </title> <booktitle> IEEE Computer, </booktitle> <month> July </month> <year> 1989, </year> <month> pp.36-49. </month>
Reference-contexts: This has resulted in working software assets with a wide base of experience but which are difficult to maintain and have low potential for reuse. To overcome these problems, reverse engineering has been subject to an extensive research, for example <ref> [3] </ref>, [4], [6], [7], [8], [10], [12], [14], [15], [17].
Reference: [4] <author> P.T.Breuer, and K.Lano, </author> <title> "Creating specifications from code: reverse engineering techniques", Software Maintenance: </title> <journal> Research and Practice, </journal> <volume> vol.3, </volume> <year> 1991, </year> <month> pp.145-162. </month>
Reference-contexts: This has resulted in working software assets with a wide base of experience but which are difficult to maintain and have low potential for reuse. To overcome these problems, reverse engineering has been subject to an extensive research, for example [3], <ref> [4] </ref>, [6], [7], [8], [10], [12], [14], [15], [17].
Reference: [5] <author> E.J.Byrne, </author> <title> "A conceptual foundation for software reengineering", </title> <booktitle> Proceedings of the Conference on Software Maintenance 1992, </booktitle> <address> Orlando, Florida, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1992, </year> <month> April </month> <year> 1987, </year> <month> pp.226-235. </month>
Reference-contexts: As regards the second problem, the knowledge representation aspect, in <ref> [5] </ref> four levels of software abstraction are described (conceptual, requirements, design and implementation), which can be used to describe both forward and reverse engineering processes.
Reference: [6] <author> G.Canfora, and A.Cimitile, </author> <title> "Reverse engineering and intermodular data flow: a theoretical approach", Software Maintenance: </title> <journal> Research and Practice, </journal> <volume> vol.4, </volume> <year> 1992, </year> <month> pp.37-59. </month>
Reference-contexts: This has resulted in working software assets with a wide base of experience but which are difficult to maintain and have low potential for reuse. To overcome these problems, reverse engineering has been subject to an extensive research, for example [3], [4], <ref> [6] </ref>, [7], [8], [10], [12], [14], [15], [17].
Reference: [7] <author> E.J.Chikofsky, and J.H.Cross, </author> <title> "Reverse engineering and design recovery: a taxonomy", </title> <journal> IEEE Software, </journal> <month> January </month> <year> 1990, </year> <month> pp.13-17. </month>
Reference-contexts: This has resulted in working software assets with a wide base of experience but which are difficult to maintain and have low potential for reuse. To overcome these problems, reverse engineering has been subject to an extensive research, for example [3], [4], [6], <ref> [7] </ref>, [8], [10], [12], [14], [15], [17].
Reference: [8] <author> A.Cimitile, </author> <title> Towards reuse reengineering of old software", </title> <booktitle> Proceedings of the Fourth International Conference on Software Engineering and Knowledge Engineering, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Capri, Italy, </address> <year> 1992, </year> <month> pp.140-149. </month>
Reference-contexts: This has resulted in working software assets with a wide base of experience but which are difficult to maintain and have low potential for reuse. To overcome these problems, reverse engineering has been subject to an extensive research, for example [3], [4], [6], [7], <ref> [8] </ref>, [10], [12], [14], [15], [17].
Reference: [9] <author> A.Cimitile, F.Lanubile, and G.Visaggio, </author> <title> "Traceability based on design decisions", </title> <booktitle> Proceedings of the Conference on Software Maintenance 1992, </booktitle> <address> Orlando, Florida, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1992, </year> <month> pp.309-317. </month>
Reference-contexts: While even the effort to reach a design abstraction level which is really independent of the realization is considerable, as discussed in <ref> [9] </ref> and [13], the chasm between the conceptual abstraction level and the implementation abstraction level is so great that the heaviest effort is dedicated to tracing back the conceptual formulation of the problem.
Reference: [10] <author> G.Como, F.Lanubile, and G.Visaggio, </author> <title> "Design recovery of a data-strong application", </title> <booktitle> Proceedings of the Third International Conference on Software Engineering and Knowledge Engineering, </booktitle> <address> Skokie, Illinois, </address> <year> 1991, </year> <month> pp.205-212. </month>
Reference-contexts: This has resulted in working software assets with a wide base of experience but which are difficult to maintain and have low potential for reuse. To overcome these problems, reverse engineering has been subject to an extensive research, for example [3], [4], [6], [7], [8], <ref> [10] </ref>, [12], [14], [15], [17]. <p> In the case of reverse engineering, it is this very knowledge which is lacking, since the data structures of a real application are the result of the stratification of design decisions, whose effects only are known and not the reasons behind them. The approach used by the authors in <ref> [10] </ref>, which consisted of the construction of a logical data model, cleaned out from the already obtained design decisions, was also found not to be very incisive.
Reference: [11] <author> H.P.Haughton, and K.Lano, </author> <title> "Objects revisited", </title> <booktitle> Proceedings of the Conference on Software Maintenance 1991, </booktitle> <address> Sorrento, Italy, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1991, </year> <note> pp.152- 161. </note>
Reference-contexts: Although this position is generally upheld, there is a positivist faith that the problem could be solved with the help of better technology, for example by means of static analyzers or expert systems minimizing the human intervention. In <ref> [11] </ref> and [16], the use of static analyzers is proposed for extracting objects or entities from the implemented data structures. However, the entities produced with these analyzers are of a low level and lack any conceptual content, unless human intervention is invoked.
Reference: [12] <institution> IEEE Software, </institution> <note> special issue on "Maintenance and reverse engineering", </note> <month> January </month> <year> 1990. </year>
Reference-contexts: This has resulted in working software assets with a wide base of experience but which are difficult to maintain and have low potential for reuse. To overcome these problems, reverse engineering has been subject to an extensive research, for example [3], [4], [6], [7], [8], [10], <ref> [12] </ref>, [14], [15], [17].
Reference: [13] <author> F.Lanubile, and G.Visaggio, </author> <title> "Maintainability via structure models and software metrics", </title> <booktitle> Proceedings of the Fourth International Conference on Software Engineering and Knowledge Engineering, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Capri, Italy, </address> <year> 1992, </year> <month> pp.590-599. </month>
Reference-contexts: While even the effort to reach a design abstraction level which is really independent of the realization is considerable, as discussed in [9] and <ref> [13] </ref>, the chasm between the conceptual abstraction level and the implementation abstraction level is so great that the heaviest effort is dedicated to tracing back the conceptual formulation of the problem.
Reference: [14] <author> J.A.Ricketts, J.C.DelMonaco, and M.W.Weeks, </author> <title> "Data reengineering for application systems", </title> <booktitle> Proceedings of the Conference on Software Maintenance 1989, </booktitle> <address> Miami, Florida, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1989, </year> <month> pp.174-179. </month>
Reference-contexts: This has resulted in working software assets with a wide base of experience but which are difficult to maintain and have low potential for reuse. To overcome these problems, reverse engineering has been subject to an extensive research, for example [3], [4], [6], [7], [8], [10], [12], <ref> [14] </ref>, [15], [17].
Reference: [15] <author> H.M.Sneed, and G.Jandrasic, </author> <title> "Inverse transformation of software from code to specification", </title> <booktitle> Proceedings of the Conference on Software Maintenance 1988, </booktitle> <address> Phoenix, Arizona, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1988, </year> <month> pp.102-109. </month>
Reference-contexts: This has resulted in working software assets with a wide base of experience but which are difficult to maintain and have low potential for reuse. To overcome these problems, reverse engineering has been subject to an extensive research, for example [3], [4], [6], [7], [8], [10], [12], [14], <ref> [15] </ref>, [17].
Reference: [16] <author> H.M.Snedd, </author> <title> "Migration of procedurally oriented Cobol programs in an objectoriented architecture", </title> <booktitle> Proceedings of the Conference on Software Maintenance 1992, </booktitle> <address> Orlando, Florida, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1992, </year> <month> pp.105-116. </month>
Reference-contexts: Although this position is generally upheld, there is a positivist faith that the problem could be solved with the help of better technology, for example by means of static analyzers or expert systems minimizing the human intervention. In [11] and <ref> [16] </ref>, the use of static analyzers is proposed for extracting objects or entities from the implemented data structures. However, the entities produced with these analyzers are of a low level and lack any conceptual content, unless human intervention is invoked.
Reference: [17] <author> M.Ward, F.W.Callis, and M.Munro, </author> <title> "The maintainer's assistant", </title> <booktitle> Proceedings of the Conference on Software Maintenance 1989, </booktitle> <address> Miami, Florida, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1989, </year> <month> pp.307-315. </month>
Reference-contexts: This has resulted in working software assets with a wide base of experience but which are difficult to maintain and have low potential for reuse. To overcome these problems, reverse engineering has been subject to an extensive research, for example [3], [4], [6], [7], [8], [10], [12], [14], [15], <ref> [17] </ref>.
References-found: 17

