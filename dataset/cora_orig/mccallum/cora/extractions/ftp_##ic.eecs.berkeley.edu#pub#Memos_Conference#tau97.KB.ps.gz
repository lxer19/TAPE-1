URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/tau97.KB.ps.gz
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/kukimoto/
Root-URL: 
Email: fkukimoto,braytong@eecs.berkeley.edu  
Title: Removing False Paths from Combinational Modules  
Author: Yuji Kukimoto Robert K. Brayton 
Address: Berkeley, CA 94720  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California,  
Abstract: The existence of false paths complicates the task of accurate timing analysis significantly. A technique to remove false paths from a combinational circuit without degrading its performance has a practical value since topological timing analysis is then good enough to estimate the performance of false-path-free circuits accurately. One can think of the KMS algorithm [1] as such a procedure. It takes a combinational circuit and arrival times at its primary inputs, and returns an equivalent irredundant circuit no slower than the original. One major problem is that it only guarantees the performance of the final circuit under the given arrival times; under different arrival time conditions the transformed circuit can be slower than the original. We propose a technique to remove false paths from a combinational module without slowing down the circuit under any arrival time condition. The procedure is particularly useful in the context of hierarchical synthesis. For example, if the same module is used more than once, the master module can be made false-path-free once and for all without affecting the performance of any instance. Even if a module is used only once, the procedure removes false paths safely without any knowledge on arrival times at the primary inputs. This makes it possible to synthesize the module before the surrounding design is fixed. We also show that the final redundancy removal of the KMS algorithm can slow down a circuit if the delay of the circuit is computed separately for each input pattern. Since replacing the original circuit with the irredundant one in a hierarchical circuit can worsen the delay of the entire circuit, redundancy removal is dropped to guarantee the delay-preserving property. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Keutzer, S. Malik, and A. Saldanha. </author> <title> Is redundancy necessary to reduce delay? IEEE Transactions on Computer-Aided Design, </title> <booktitle> 10(4) </booktitle> <pages> 427-435, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Keutzer, Malik and Saldanha <ref> [1] </ref> showed that redundancy is not necessary to reduce delay. The motivating example in their work was a carry-skip adder. This circuit has a single stuck-at redundancy, but its direct removal makes a long false path true thereby slowing down the circuit. <p> Furthermore if the arrival times at the inputs are unknown, the procedure cannot be invoked. The last step of the KMS algorithm is redundancy removal. Since the topological longest path is made sensitizable by false path removal, <ref> [1] </ref> argued that redundancy removal cannot slow down the circuit. The delay of the circuit is defined to be the earliest time when all the primary outputs are stabilized for all input vectors. <p> The final redundancy removal step is dropped to preserve the performance of the circuit. Finally false-path-free circuits for all the primary outputs are merged into a single circuit to reduce area overhead. The paper is organized as follows. Section 2 summarizes the KMS algorithm <ref> [1] </ref> and exact required time analysis [2], which form the basis of the paper. <p> Section 5 concludes the paper. 2 Preliminaries 2.1 The KMS Algorithm Throughout this section we assume the conventional definition that the delay of a circuit is the earliest time when its primary outputs are stabilized for all input vectors. The KMS procedure <ref> [1, 5] </ref> takes 1) a gate-level redundant combinational circuit and 2) arrival time for each primary input and returns an equivalent irredundant circuit no slower than the original under the given arrival times. Suppose that the longest topological path is true in a given circuit. <p> Since this transformation reduces the multiple-fanout case to the previous case, the same approach above then applies. This process is repeated as long as the longest topological path is false. Once the path becomes true, any remaining redundancies are removed directly. Since the original algorithm proposed in <ref> [1] </ref> processed a single path at one time, it had a severe limitation in the size of circuits it could handle. Saldanha et al. later resolved this complexity issue by proposing an algorithm which does not require explicit path enumeration. <p> The first example is a carry-skip adder. This is the circuit that motivated the entire research on the KMS algorithm. Figure 1 shows a 2-bit carry-skip adder described in <ref> [1] </ref>. We focus on the subcircuit computing the carry output. Assume a gate delay of 1 for the AND gate and the OR gate and gate delays of 2 for the XOR gate and the MUX gate. <p> The performance of the circuit, however, is deteriorated by the fault since the ripple-carry adder is slower than the carry-skip adder. In <ref> [1] </ref> this circuit is analyzed under the condition where the carry input arrives at t = 5 and all other inputs arrive at t = 0. <p> If the assumption does not hold, the circuit cannot be plugged in since <ref> [1] </ref> does not address the temporal validity of the resulting circuit under different arrival times; whether the transformed circuit is no slower than the original circuit under different arrival times is not discussed in [1]. <p> If the assumption does not hold, the circuit cannot be plugged in since <ref> [1] </ref> does not address the temporal validity of the resulting circuit under different arrival times; whether the transformed circuit is no slower than the original circuit under different arrival times is not discussed in [1]. In [4](page 69) the KMS algorithm is applied to a cascaded carry-skip adder in such a way that each block is made irredundant by the KMS algorithm assuming that the carry input arrives later than the other inputs. <p> The final redundancy removal is intentionally suppressed to preserve the performance of the circuit. 5 Constant propagation may create new false paths. Therefore this process can be repeated until the longest topological path from any input to the output is true. 6 As in <ref> [1] </ref> we assume that gate delay is independent of loads. We have a guarantee that the circuit is no slower than the original circuit under any operating condition.
Reference: [2] <author> Y. Kukimoto and R. K. Brayton. </author> <title> Exact required time analysis via false path detection. </title> <booktitle> In Proceedings of 34th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 220-225, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: The first identifies the arrival times at the primary inputs that allow the maximum removal of false paths. This identification is performed separately for each primary output since different arrival time conditions can be required for different outputs. Our previous work on exact required time analysis <ref> [2] </ref> is used directly here. This step is followed by the application of the KMS procedure to the transitive fanin cone of each primary output under the corresponding arrival times computed in the previous stage. The final redundancy removal step is dropped to preserve the performance of the circuit. <p> Finally false-path-free circuits for all the primary outputs are merged into a single circuit to reduce area overhead. The paper is organized as follows. Section 2 summarizes the KMS algorithm [1] and exact required time analysis <ref> [2] </ref>, which form the basis of the paper. <p> Saldanha et al. later resolved this complexity issue by proposing an algorithm which does not require explicit path enumeration. Interested readers should refer to [5]. 2.2 Exact Required Time Analysis The problem studied in <ref> [2] </ref> is: given a gate-level combinational circuit and required times at its primary outputs, what is the maximum time at which each of its primary inputs must be stabilized? The simplest conservative approximation to this problem is to perform delay analysis backwards from primary outputs to primary inputs by propagating required <p> This analysis leads us to looser timing requirements at primary inputs, which can then relax the timing constraint of a driving circuit. In the following, assume for simplicity that a combinational circuit under analysis has a single output. The basic idea of <ref> [2] </ref> is that given a combinational circuit and a required time at its primary output, the stability of the output at the required time can be represented by a Boolean function of the stability of primary inputs at potential required times. <p> This in turn constrains the stability of primary inputs. By extracting the loosest condition at the primary inputs that meets the above condition, the exact required times at primary inputs can be computed. Instead of illustrating the theory in detail, we will only discuss important results from <ref> [2] </ref> to clarify the basic concept since the analysis technique itself is irrelevant to this paper. Interested readers should refer to [2]. Consider a single-output combinational circuit. <p> Instead of illustrating the theory in detail, we will only discuss important results from <ref> [2] </ref> to clarify the basic concept since the analysis technique itself is irrelevant to this paper. Interested readers should refer to [2]. Consider a single-output combinational circuit. Let X = fx 1 ; : : : ; x n g be the set of primary inputs of the circuit and z be the primary output. Assume that a required time t = 0 is asserted at z. <p> Assume that a required time t = 0 is asserted at z. If topological analysis is performed, the required time at x i is L i , where L i is the longest topological path delay from x i to z. The technique developed in <ref> [2] </ref> computes the latest valid required time l i for each primary input x i , where l i L i . Intuitively the procedure returns looser yet correct required times than topological analysis by detecting false paths in the circuit.
Reference: [3] <author> Y. Kukimoto and R. K. Brayton. </author> <title> Hierarchical timing analysis under the XBD0 model. </title> <booktitle> In International Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: a circuit if the delay is defined for 7 Although the circuit can be further simplified by logic sharing, we keep the left multiplexor as it is so that the correspondence between the old and the new circuit is clear. 8 We have recently proposed a hierarchical timing analysis technique <ref> [3] </ref> applicable to state-of-the-art sensitization criteria. After applying this false path removal technique, the timing model of a module can be easily constructed by computing the topological longest path for each input-output pair without any false path analysis. each primary input vector separately.
Reference: [4] <author> A. Saldanha. </author> <title> Performance and testability interactions in logic synthesis. </title> <type> Technical Report UCB/ERL M91/100, </type> <institution> University of California, Berkeley, </institution> <month> October </month> <year> 1991. </year>
Reference: [5] <author> A. Saldanha, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> Circuit structure relations to redundancy and delay. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 13(7) </volume> <pages> 875-883, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: A natural question is whether redundancy is necessary to reduce delay in general. They resolved this issue by giving a constructive algorithm, commonly known as the KMS algorithm, which transforms a given redundant circuit to an equivalent irredundant circuit with no penalty in its performance. Later Saldanha et al. <ref> [5] </ref> improved the efficiency of the procedure dramatically by avoiding explicit path enumeration in the original algorithm. This made the application of the KMS procedure practical for large circuits. The KMS algorithm removes long false paths from a given combinational circuit. <p> Section 5 concludes the paper. 2 Preliminaries 2.1 The KMS Algorithm Throughout this section we assume the conventional definition that the delay of a circuit is the earliest time when its primary outputs are stabilized for all input vectors. The KMS procedure <ref> [1, 5] </ref> takes 1) a gate-level redundant combinational circuit and 2) arrival time for each primary input and returns an equivalent irredundant circuit no slower than the original under the given arrival times. Suppose that the longest topological path is true in a given circuit. <p> Saldanha et al. later resolved this complexity issue by proposing an algorithm which does not require explicit path enumeration. Interested readers should refer to <ref> [5] </ref>. 2.2 Exact Required Time Analysis The problem studied in [2] is: given a gate-level combinational circuit and required times at its primary outputs, what is the maximum time at which each of its primary inputs must be stabilized? The simplest conservative approximation to this problem is to perform delay analysis
References-found: 5

