URL: http://www.icsi.berkeley.edu/~yairb/pubs/BR-dist-servers.ps
Refering-URL: http://www.icsi.berkeley.edu/~yairb/
Root-URL: http://www.icsi.berkeley.edu
Email: E-mail: yairb@math.tau.ac.il, adiro@math.tau.ac.il  
Title: The Distributed k-Server Problem A Competitive Distributed Translator for k-Server Algorithms  
Author: Yair Bartal Adi Rosen 
Address: Tel-Aviv 69978 Israel  
Affiliation: Department of Computer Science Tel-Aviv University  
Abstract: fl A preliminary version of this paper has appeared in Proc. of the 33rd Ann. IEEE Symp. on Foundations of Computer Science, pp. 344-353, 1992. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Awerbuch, Y. Bartal, and A. Fiat. </author> <title> Competitive Distributed File Allocation. </title> <booktitle> In Proc. of the 25th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 164-173, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: The cost incurred by a distributed k-server algorithm is composed of the cost due to the travel of the servers, and the cost incurred for the transmission of control messages. Competitive analysis of distributed algorithms was introduced in the context of job scheduling [4] and data management <ref> [9, 1, 3] </ref>; the cost of a distributed on-line algorithm, including the cost incurred for the transmission of messages, is compared to the cost of an optimal global-control adversary, which does not transmit any control messages.
Reference: [2] <author> B. Awerbuch, Y. Bartal, and A. Fiat. </author> <title> Heat & Dump: Competitive Distributed Paging. </title> <booktitle> In Proc. of the 34th Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 22-31, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: We assume that the requests are issued at the location of service, and thus there is no central control at which the request is received. Motivated by the fact that the problem is also related to problems of data management <ref> [9, 2] </ref> (and also mentioned in the context of the mobile user problem [6]), and in order to make our discussion more general, we will discuss the costly-message (distributed) setting in terms of networks and processors.
Reference: [3] <author> B. Awerbuch, Y. Bartal, and A. Fiat. </author> <title> Distributed Paging for General Networks. </title> <booktitle> In Proc. of the 7th Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 574-583, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: The cost incurred by a distributed k-server algorithm is composed of the cost due to the travel of the servers, and the cost incurred for the transmission of control messages. Competitive analysis of distributed algorithms was introduced in the context of job scheduling [4] and data management <ref> [9, 1, 3] </ref>; the cost of a distributed on-line algorithm, including the cost incurred for the transmission of messages, is compared to the cost of an optimal global-control adversary, which does not transmit any control messages.
Reference: [4] <author> B. Awerbuch, S. Kutten, and D. Peleg. </author> <title> Competitive Distributed Job Scheduling. </title> <booktitle> In Proc. of the 24th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 571-580, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: The cost incurred by a distributed k-server algorithm is composed of the cost due to the travel of the servers, and the cost incurred for the transmission of control messages. Competitive analysis of distributed algorithms was introduced in the context of job scheduling <ref> [4] </ref> and data management [9, 1, 3]; the cost of a distributed on-line algorithm, including the cost incurred for the transmission of messages, is compared to the cost of an optimal global-control adversary, which does not transmit any control messages.
Reference: [5] <author> N. Alon, G. Kalai, M. Ricklin and L. Stockmeyer. </author> <title> Lower Bounds on the Competitive Ratio for Mobile User Tracking and Distributed Job Scheduling. </title> <booktitle> In Proc. of the 33rd Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 334-343, </pages> <month> October </month> <year> 1992. </year> <month> 25 </month>
Reference-contexts: In the distributed setting at least one message has to be sent over the distance between the requesting processor and the server that serves it (to "find" the server). We thus use a lower bound <ref> [5] </ref> for the mobile user problem [6], and a reduction, that we present below, from this problem to the distributed k-server problem. This reduction preserves the competitive ratio up to a factor of O (D), and thus gives us a lower bound for our problem. <p> But 1 D T is the inherent mobile user cost of , and therefore the generated on-line mobile user algorithm is O (c D) competitive. &gt;From a lower bound of (log n= log log n) for the mobile user problem <ref> [5] </ref> we get, Theorem 14 For all n there is a network topology of n processors, such that the competitive ratio of any distributed k-server algorithm is (maxfk; 1 D (log n= log log n)g) against adaptive on-line adversaries. 24 8 Conclusions We have given a general translator that transforms any
Reference: [6] <author> B. Awerbuch and D. Peleg. </author> <title> Concurrent Online Tracking of Mobile Users. </title> <booktitle> In Proc. SIGCOMM. </booktitle> <address> Zurich, </address> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Motivated by the fact that the problem is also related to problems of data management [9, 2] (and also mentioned in the context of the mobile user problem <ref> [6] </ref>), and in order to make our discussion more general, we will discuss the costly-message (distributed) setting in terms of networks and processors. The requests are issued by the processors, and information is passed by messages over network links. <p> The first two operations are the operations of the mobile user mechanism <ref> [6] </ref>, and the last one is the data tracking [9] operation. Henceforth, let T N ;k be the best competitive ratio for a k-server tracking mechanism on network N . <p> Henceforth, let T N ;k be the best competitive ratio for a k-server tracking mechanism on network N . If a processor is allowed to have O (kffi log n) bits of memory, then it follows from the constructions of <ref> [6, 9] </ref> that for every N and k, T N ;k = O ( log n) and is O (1). <p> Let ~ T N ;k be the best competitive ratio for a generalized k-server tracking algorithm on network N . One can use the constructions of <ref> [6, 9] </ref> to get this mechanism for every network N such that ~ T N ;k = O (maxfk; g log n). 4 A Translator to Make k-Server Algorithms Distributed In this section we give a general translator to transform any global-control deterministic competitive k-server algorithm into a distributed one. <p> Using results on the mobile user and data tracking problems <ref> [6, 9] </ref> we get: Corollary 13 The Distributed-Harmonic algorithm is O (c H (1+ 1 D maxfk; gffi log n))- competitive, against adaptive on-line adversaries, for arbitrary network topologies. 7 Lower Bound In contrast to the global-control case, where k-server algorithms with competitive ratio that depends solely on k exist for <p> In the distributed setting at least one message has to be sent over the distance between the requesting processor and the server that serves it (to "find" the server). We thus use a lower bound [5] for the mobile user problem <ref> [6] </ref>, and a reduction, that we present below, from this problem to the distributed k-server problem. This reduction preserves the competitive ratio up to a factor of O (D), and thus gives us a lower bound for our problem. We first define below the Mobile User problem [6]. 22 7.1 The <p> mobile user problem <ref> [6] </ref>, and a reduction, that we present below, from this problem to the distributed k-server problem. This reduction preserves the competitive ratio up to a factor of O (D), and thus gives us a lower bound for our problem. We first define below the Mobile User problem [6]. 22 7.1 The Mobile User problem Given a network topology N , and a user U that at each time resides in one of the processors of the network, an algorithm for the problem has to deal with the following requests.
Reference: [7] <author> S. Ben-David, A. Borodin, R.M. Karp, G. Tardos, and A. Wigderson. </author> <title> On the Power of Randomization in Online Algorithms. </title> <booktitle> In Proc. of the 22nd Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 379-386, </pages> <month> May </month> <year> 1990. </year>
Reference: [8] <author> R.A. Baeza-Yates, J.C. Culberson, and G.J.E. Rawlins. </author> <title> Searching with Uncertainty. </title> <type> Technical report, </type> <institution> University of Waterloo, </institution> <month> October </month> <year> 1987. </year>
Reference-contexts: line and the ring T N ;k = O (1), and for trees T N ;k = O (k) (even with O (1) memory per processor), since when servers move they can leave track of their direction from each processor, and then can be found by a disjoint path traversal <ref> [8] </ref>. 7 Definition. A c-competitive generalized k-server tracking mechanism is a k-server tracking mechanism that also allows every processor p to find all servers at distance at most d from it, at an amortized cost of at most c d.
Reference: [9] <author> Y. Bartal, A. Fiat, and Y. Rabani. </author> <title> Competitive Algorithms for Distributed Data Management. </title> <booktitle> In Proc. of the 24th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 39-48, </pages> <month> May </month> <year> 1992. </year> <note> Also accepted for publication in the STOC 92 special issue Journal of Computer and Systems Sciences. </note>
Reference-contexts: We assume that the requests are issued at the location of service, and thus there is no central control at which the request is received. Motivated by the fact that the problem is also related to problems of data management <ref> [9, 2] </ref> (and also mentioned in the context of the mobile user problem [6]), and in order to make our discussion more general, we will discuss the costly-message (distributed) setting in terms of networks and processors. <p> The cost incurred by a distributed k-server algorithm is composed of the cost due to the travel of the servers, and the cost incurred for the transmission of control messages. Competitive analysis of distributed algorithms was introduced in the context of job scheduling [4] and data management <ref> [9, 1, 3] </ref>; the cost of a distributed on-line algorithm, including the cost incurred for the transmission of messages, is compared to the cost of an optimal global-control adversary, which does not transmit any control messages. <p> The first two operations are the operations of the mobile user mechanism [6], and the last one is the data tracking <ref> [9] </ref> operation. Henceforth, let T N ;k be the best competitive ratio for a k-server tracking mechanism on network N . <p> Henceforth, let T N ;k be the best competitive ratio for a k-server tracking mechanism on network N . If a processor is allowed to have O (kffi log n) bits of memory, then it follows from the constructions of <ref> [6, 9] </ref> that for every N and k, T N ;k = O ( log n) and is O (1). <p> Let ~ T N ;k be the best competitive ratio for a generalized k-server tracking algorithm on network N . One can use the constructions of <ref> [6, 9] </ref> to get this mechanism for every network N such that ~ T N ;k = O (maxfk; g log n). 4 A Translator to Make k-Server Algorithms Distributed In this section we give a general translator to transform any global-control deterministic competitive k-server algorithm into a distributed one. <p> Using results on the mobile user and data tracking problems <ref> [6, 9] </ref> we get: Corollary 13 The Distributed-Harmonic algorithm is O (c H (1+ 1 D maxfk; gffi log n))- competitive, against adaptive on-line adversaries, for arbitrary network topologies. 7 Lower Bound In contrast to the global-control case, where k-server algorithms with competitive ratio that depends solely on k exist for
Reference: [10] <author> Y. Bartal, and E. Grove. </author> <title> The Harmonic k-Server Algorithm is Competitive. </title> <journal> Journal of the ACM. </journal> <note> To appear. </note>
Reference-contexts: We also study the problem of devising a distributed version of the Harmonic k-server algorithm [24]. Harmonic is known to be O (2 k log k)-competitive <ref> [19, 10] </ref>, but it is believed that the correct competitive ratio is O (k 2 ) (see [24, 11]). If the competitive ratio of Harmonic is c H , then Distributed-Harmonic is O (c H (1 + 1 D maxfk; g (log ) log n))-competitive. <p> Harmonic is known to be O (2 k log k)-competitive <ref> [10] </ref>. It has however been conjectured ([24, 11]) that the correct competitive ratio is O (k 2 ). Let c H denote the competitive ratio of Harmonic. We present a distributed version of the Harmonic algorithm with a small increase in the competitive ratio.
Reference: [11] <author> P. Berman, H. Karloff, and G. Tardos. </author> <title> A Competitive 3-Server Algorithm. </title> <booktitle> In Proc. 1st ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 280-290, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: We also study the problem of devising a distributed version of the Harmonic k-server algorithm [24]. Harmonic is known to be O (2 k log k)-competitive [19, 10], but it is believed that the correct competitive ratio is O (k 2 ) (see <ref> [24, 11] </ref>). If the competitive ratio of Harmonic is c H , then Distributed-Harmonic is O (c H (1 + 1 D maxfk; g (log ) log n))-competitive. The Harmonic algorithm is of practical interest because of its simplicity and the fact that it is memoryless.
Reference: [12] <author> A. Borodin, N. Linial, and M. Saks. </author> <title> An Optimal On-Line Algorithm for Metrical Task Systems. </title> <booktitle> In Proc. of the 19th Ann. ACM Symp on Theory of Computing, </booktitle> <pages> pages 373-382, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: one can transform global-control deterministic algorithms (e.g. [21, 25]) to distributed ones by choosing a leader that will run the global-control algorithm, while ignoring requests on covered points; for the case of k = n 1, one can use the algorithm of Borodin, Linial and Saks for metrical task systems <ref> [12] </ref> which defines a fixed traversal sequence for the single point which is uncovered at any specific time; only a single message of O (1) bits has to be sent to the new uncovered point.
Reference: [13] <author> M. Chrobak, H. Karloff, T. Payne, and S. Vishwanathan. </author> <title> New Results on Server Problems. </title> <booktitle> In Proc. 1st ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 291-300, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: We get poly (k)-competitive distributed k-server algorithms for the line, trees and the ring, by applying our general result to the k-competitive global-control algorithms for the line and trees <ref> [13, 14] </ref> and the O (k 3 )-competitive algorithm for the ring [18]. <p> : Clearly Cost Adv ( 0 ) Cost Adv (), and DS A (k) is O (c k k 2 (1+ 1 D maxfk; T N ;k ; log jM j=g))- competitive. 2 5 Applications of the Translator We use discrete versions of the k-competitive Double-Coverage algorithm for the line <ref> [13] </ref>, the k-competitive algorithm for trees [14], and the O (k 3 )- competitive algorithm for the ring [18]. In these discrete versions a modified metric space is created by adding points at distance of one unit apart along the edges of the metric space, rounding their lengths upwards.
Reference: [14] <author> M. Chrobak and L. Larmore. </author> <title> An Optimal On-Line k-Server Algorithm for Trees. </title> <journal> SIAM Journal of Computing, </journal> <volume> 20 </volume> <pages> 144-148, </pages> <year> 1991. </year>
Reference-contexts: We get poly (k)-competitive distributed k-server algorithms for the line, trees and the ring, by applying our general result to the k-competitive global-control algorithms for the line and trees <ref> [13, 14] </ref> and the O (k 3 )-competitive algorithm for the ring [18]. <p> metric spaces [17, 22] is, of course, possible; however, due to the large number of memory states of these algorithms, this yields a distributed algorithm with a competitive ratio which is greater than that of the application of an algorithm for trees to a minimum spanning tree (as previously suggested <ref> [14] </ref>). <p> ) Cost Adv (), and DS A (k) is O (c k k 2 (1+ 1 D maxfk; T N ;k ; log jM j=g))- competitive. 2 5 Applications of the Translator We use discrete versions of the k-competitive Double-Coverage algorithm for the line [13], the k-competitive algorithm for trees <ref> [14] </ref>, and the O (k 3 )- competitive algorithm for the ring [18]. In these discrete versions a modified metric space is created by adding points at distance of one unit apart along the edges of the metric space, rounding their lengths upwards. <p> However, due to the large number of memory states used by these algorithms, this yields competitive ratios which are greater than the one obtained by applying the above algorithms for trees, on a minimum spanning tree of the metric space (as previously suggested <ref> [14] </ref>). 6 Randomized Algorithms The Harmonic k-server algorithm, proposed by Raghavan and Snir [24], is the algorithm that, given a request at point r, chooses each server to serve the request with probability inversely proportional to its distance to r.
Reference: [15] <author> M. Chrobak and L. Larmore. </author> <title> On Fast Algorithms for Two Servers. </title> <booktitle> In Proc. Mathematical Foundations of Computer Science, </booktitle> <address> Banska Bystrica, </address> <year> 1990. </year> <note> Also, to appear in Journal of Algorithms. 26 </note>
Reference-contexts: Applying it to the O (1)-competitive algorithms for the case of k = 2 <ref> [15, 20] </ref>, gives O ( log n=D)-competitive distributed algorithms, where D is the ratio between the cost of moving a server and of sending a message across the same distance. <p> There are competitive distributed k-server algorithms with competitive ratios O (k 3 + k 4 =D) for the line, O (k 3 + k 4 =D) for trees and O (k 5 + k 6 =D) for the ring. 19 Using the known algorithms for the case of 2 servers <ref> [15, 20] </ref> we get: Corollary 11 There are competitive distributed 2-server algorithms with competitive ratio O (T N ;2 =D). As noted in the introduction, it is possible to apply our translator to known algorithms of general metric spaces [17, 22].
Reference: [16] <author> W. Dijkstra, C. S. Scholten. </author> <title> Termination Detection for Diffusing Com--putations. </title> <journal> Information Processing Letters, </journal> <volume> 11-1:1-4, </volume> <year> 1980. </year>
Reference-contexts: The sequence of requests can be generated distributively, a single request at a time, in the following way: the termination of the actions due to a previous request can be detected by a technique for termination-detection of centrally initiated distributed computations <ref> [16] </ref> at a cost proportional to the cost of the original actions.
Reference: [17] <author> A. Fiat, Y. Rabani, and Y. Ravid. </author> <title> Competitive k-Server Algorithms. </title> <booktitle> In Proc. of the 31st Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 454-463, </pages> <month> October </month> <year> 1990. </year> <note> Also, to appear in JCSS Special FOCS Issue. </note>
Reference-contexts: Applying our translator to the known deterministic k-server algorithms for general metric spaces <ref> [17, 22] </ref> is, of course, possible; however, due to the large number of memory states of these algorithms, this yields a distributed algorithm with a competitive ratio which is greater than that of the application of an algorithm for trees to a minimum spanning tree (as previously suggested [14]). <p> This is in contrast to the global-control k-server problem where there are algorithms with competitive ratios that depend only on k (and not on n) for any metric space <ref> [17, 19, 22] </ref>. We also study the problem of devising a distributed version of the Harmonic k-server algorithm [24]. Harmonic is known to be O (2 k log k)-competitive [19, 10], but it is believed that the correct competitive ratio is O (k 2 ) (see [24, 11]). <p> As noted in the introduction, it is possible to apply our translator to known algorithms of general metric spaces <ref> [17, 22] </ref>. <p> Corollary 13 The Distributed-Harmonic algorithm is O (c H (1+ 1 D maxfk; gffi log n))- competitive, against adaptive on-line adversaries, for arbitrary network topologies. 7 Lower Bound In contrast to the global-control case, where k-server algorithms with competitive ratio that depends solely on k exist for all metric spaces <ref> [17, 22] </ref>, this is not the case in the distributed setting. In the distributed setting at least one message has to be sent over the distance between the requesting processor and the server that serves it (to "find" the server). <p> The increase in the competitive ratio is however a function of the size of the memory needed by the global-control algorithm. As known k-server algorithms for general metric spaces <ref> [17, 22] </ref> have a large number of memory states, our translator yields distributed algorithms that have (in the case of general networks) a competitive ratio which is linear in the size of the metric space (n), while our lower bound is less than logarithmic in n.
Reference: [18] <author> A. Fiat, Y. Rabani, Y. Ravid, and B. Schieber. </author> <title> A Deterministic O(k 3 )- Competitive k-Server Algorithm for the Circle. </title> <note> Submitted to Algorith-mica. </note>
Reference-contexts: We get poly (k)-competitive distributed k-server algorithms for the line, trees and the ring, by applying our general result to the k-competitive global-control algorithms for the line and trees [13, 14] and the O (k 3 )-competitive algorithm for the ring <ref> [18] </ref>. Applying it to the O (1)-competitive algorithms for the case of k = 2 [15, 20], gives O ( log n=D)-competitive distributed algorithms, where D is the ratio between the cost of moving a server and of sending a message across the same distance. <p> k 2 (1+ 1 D maxfk; T N ;k ; log jM j=g))- competitive. 2 5 Applications of the Translator We use discrete versions of the k-competitive Double-Coverage algorithm for the line [13], the k-competitive algorithm for trees [14], and the O (k 3 )- competitive algorithm for the ring <ref> [18] </ref>. In these discrete versions a modified metric space is created by adding points at distance of one unit apart along the edges of the metric space, rounding their lengths upwards.
Reference: [19] <author> E. Grove. </author> <title> The Harmonic k-Server Algorithm is Competitive. </title> <booktitle> In Proc. of the 23rd Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 260-266, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: This is in contrast to the global-control k-server problem where there are algorithms with competitive ratios that depend only on k (and not on n) for any metric space <ref> [17, 19, 22] </ref>. We also study the problem of devising a distributed version of the Harmonic k-server algorithm [24]. Harmonic is known to be O (2 k log k)-competitive [19, 10], but it is believed that the correct competitive ratio is O (k 2 ) (see [24, 11]). <p> We also study the problem of devising a distributed version of the Harmonic k-server algorithm [24]. Harmonic is known to be O (2 k log k)-competitive <ref> [19, 10] </ref>, but it is believed that the correct competitive ratio is O (k 2 ) (see [24, 11]). If the competitive ratio of Harmonic is c H , then Distributed-Harmonic is O (c H (1 + 1 D maxfk; g (log ) log n))-competitive.
Reference: [20] <author> S. Irani and R. Rubinfeld. </author> <title> A Competitive 2-Server Algorithm. </title> <journal> Information Processing Letters, </journal> <volume> 39 </volume> <pages> 85-91, </pages> <year> 1991. </year>
Reference-contexts: Applying it to the O (1)-competitive algorithms for the case of k = 2 <ref> [15, 20] </ref>, gives O ( log n=D)-competitive distributed algorithms, where D is the ratio between the cost of moving a server and of sending a message across the same distance. <p> There are competitive distributed k-server algorithms with competitive ratios O (k 3 + k 4 =D) for the line, O (k 3 + k 4 =D) for trees and O (k 5 + k 6 =D) for the ring. 19 Using the known algorithms for the case of 2 servers <ref> [15, 20] </ref> we get: Corollary 11 There are competitive distributed 2-server algorithms with competitive ratio O (T N ;2 =D). As noted in the introduction, it is possible to apply our translator to known algorithms of general metric spaces [17, 22].
Reference: [21] <author> A.R. Karlin, M.S. Manasse, L. Rudolph, and D.D. Sleator. </author> <title> Competitive Snoopy Caching. </title> <journal> Algorithmica, </journal> <volume> 3(1) </volume> <pages> 79-119, </pages> <year> 1988. </year>
Reference-contexts: Clearly a result of competitiveness against such adversary will hold against any other distributed algorithm as well. In some special cases directly deriving distributed k-server algorithms 3 from global-control ones is relatively easy. For the uniform metric space one can transform global-control deterministic algorithms (e.g. <ref> [21, 25] </ref>) to distributed ones by choosing a leader that will run the global-control algorithm, while ignoring requests on covered points; for the case of k = n 1, one can use the algorithm of Borodin, Linial and Saks for metrical task systems [12] which defines a fixed traversal sequence for
Reference: [22] <author> E. Koutsoupias, and C. Papadimitriou. </author> <title> On the k-Server Conjecture. </title> <booktitle> In Proc. 26th Annual ACM Symp. on Theory of Computing, </booktitle> <pages> pages 507-511, </pages> <year> 1994. </year>
Reference-contexts: Applying our translator to the known deterministic k-server algorithms for general metric spaces <ref> [17, 22] </ref> is, of course, possible; however, due to the large number of memory states of these algorithms, this yields a distributed algorithm with a competitive ratio which is greater than that of the application of an algorithm for trees to a minimum spanning tree (as previously suggested [14]). <p> This is in contrast to the global-control k-server problem where there are algorithms with competitive ratios that depend only on k (and not on n) for any metric space <ref> [17, 19, 22] </ref>. We also study the problem of devising a distributed version of the Harmonic k-server algorithm [24]. Harmonic is known to be O (2 k log k)-competitive [19, 10], but it is believed that the correct competitive ratio is O (k 2 ) (see [24, 11]). <p> As noted in the introduction, it is possible to apply our translator to known algorithms of general metric spaces <ref> [17, 22] </ref>. <p> Corollary 13 The Distributed-Harmonic algorithm is O (c H (1+ 1 D maxfk; gffi log n))- competitive, against adaptive on-line adversaries, for arbitrary network topologies. 7 Lower Bound In contrast to the global-control case, where k-server algorithms with competitive ratio that depends solely on k exist for all metric spaces <ref> [17, 22] </ref>, this is not the case in the distributed setting. In the distributed setting at least one message has to be sent over the distance between the requesting processor and the server that serves it (to "find" the server). <p> The increase in the competitive ratio is however a function of the size of the memory needed by the global-control algorithm. As known k-server algorithms for general metric spaces <ref> [17, 22] </ref> have a large number of memory states, our translator yields distributed algorithms that have (in the case of general networks) a competitive ratio which is linear in the size of the metric space (n), while our lower bound is less than logarithmic in n.
Reference: [23] <author> M.S. Manasse, L.A. McGeoch, and D.D. Sleator. </author> <title> Competitive Algorithms for On-Line Problems. </title> <booktitle> In Proc. of the 20th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 322-333, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: 1 Introduction One of the central on-line problems is the k-server problem, first suggested by Manasse, McGeoch, and Sleator <ref> [23] </ref>. The problem is that of scheduling the motion of k identical servers that travel among the n points of a metric space as to satisfy requests for service at these points, while minimizing the total distance the servers travel. <p> k-server problem and the "traditional" (global-control) one, we show that there is an infinite number of networks with increasing number of processors n, such that 4 the competitive ratio of any distributed k-server algorithm is (maxfk; 1 D log n= log log ng) (using also the lower bound of k <ref> [23] </ref>), thus depending also on the number of points in the metric space. This is in contrast to the global-control k-server problem where there are algorithms with competitive ratios that depend only on k (and not on n) for any metric space [17, 19, 22]. <p> We assume the existence of an underlying routing scheme, that given a message and a list of processors as addressees, routes the message in the most efficient way to reach all the addressees. The k-server problem <ref> [23] </ref> is that of scheduling the motion of k identical servers in a metric space as to serve requests for service at the points of the metric space.
Reference: [24] <author> P. Raghavan and M. Snir. </author> <title> Memory versus Randomization in On-Line Algorithms. </title> <booktitle> In Proc. 16th ICALP, </booktitle> <month> July </month> <year> 1989. </year>
Reference-contexts: This is in contrast to the global-control k-server problem where there are algorithms with competitive ratios that depend only on k (and not on n) for any metric space [17, 19, 22]. We also study the problem of devising a distributed version of the Harmonic k-server algorithm <ref> [24] </ref>. Harmonic is known to be O (2 k log k)-competitive [19, 10], but it is believed that the correct competitive ratio is O (k 2 ) (see [24, 11]). <p> We also study the problem of devising a distributed version of the Harmonic k-server algorithm [24]. Harmonic is known to be O (2 k log k)-competitive [19, 10], but it is believed that the correct competitive ratio is O (k 2 ) (see <ref> [24, 11] </ref>). If the competitive ratio of Harmonic is c H , then Distributed-Harmonic is O (c H (1 + 1 D maxfk; g (log ) log n))-competitive. The Harmonic algorithm is of practical interest because of its simplicity and the fact that it is memoryless. <p> of memory states used by these algorithms, this yields competitive ratios which are greater than the one obtained by applying the above algorithms for trees, on a minimum spanning tree of the metric space (as previously suggested [14]). 6 Randomized Algorithms The Harmonic k-server algorithm, proposed by Raghavan and Snir <ref> [24] </ref>, is the algorithm that, given a request at point r, chooses each server to serve the request with probability inversely proportional to its distance to r.
Reference: [25] <author> D.D. Sleator and R.E. Tarjan. </author> <title> Amortized Efficiency of List Update and Paging Rules. </title> <booktitle> Communication of the ACM, </booktitle> <pages> 28(2) pages 202-208, </pages> <year> 1985. </year>
Reference-contexts: Clearly a result of competitiveness against such adversary will hold against any other distributed algorithm as well. In some special cases directly deriving distributed k-server algorithms 3 from global-control ones is relatively easy. For the uniform metric space one can transform global-control deterministic algorithms (e.g. <ref> [21, 25] </ref>) to distributed ones by choosing a leader that will run the global-control algorithm, while ignoring requests on covered points; for the case of k = n 1, one can use the algorithm of Borodin, Linial and Saks for metrical task systems [12] which defines a fixed traversal sequence for
Reference: [26] <author> G. Turpin. </author> <title> Recent Work on the Server Problem. </title> <type> Master's thesis, </type> <institution> University of Toronto, </institution> <year> 1989. </year> <month> 27 </month>
References-found: 26

