URL: http://www.cs.bu.edu/techreports/95-004-coercibility.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: (tiuryn@mimuw.edu.pl)  
Title: Equational Axiomatization of Bicoercibility for Polymorphic Types  
Author: Jerzy Tiuryn 
Date: February, 1995  
Address: Banacha 2 02-097 Warsaw, POLAND  
Affiliation: Institute of Informatics Warsaw University  
Abstract: Two polymorphic types and t are said to be bicoercible if there is a coercion from to t and conversely. We give a complete equational axiomatization of bicoercible types and prove that the relation of bicoercibility is decidable.
Abstract-found: 1
Intro-found: 1
Reference: [Ben93] <author> M. Benke," </author> <title> Efficient type reconstruction in the presence of inheri-14 tance", </title> <editor> in: A. M. Borzyszkowski, S. Soko lowski (Eds.) MFCS'93: </editor> <booktitle> Mathematical Foundations of Computer science, Proc. 18th Intern. Symp., Gdansk 1993, </booktitle> <publisher> Springer-Verlag LNCS 711, </publisher> <year> (1993), </year> <pages> 272-280. </pages>
Reference-contexts: 1 Introduction The notion of a subtype of a type plays an important role in typed programming languages and it has been a subject of an intensive research recently <ref> [Ben93, BCGS91, CMSS94, CGL92, CP94, LMS94, Mit90, Tiu92, TW93] </ref>. There is a number of fundamental open problems which have to be solved in order to gain a better understanding of the notion of a subtype.
Reference: [BCGS91] <author> V. Breazu-Tannen, T. Coquand, C.A. Gunter, and A. Scedrov, </author> <title> "Inheritanceas implicit coercion", </title> <booktitle> Information and Computation 93, </booktitle> <year> (1991), </year> <pages> 172-221. </pages>
Reference-contexts: 1 Introduction The notion of a subtype of a type plays an important role in typed programming languages and it has been a subject of an intensive research recently <ref> [Ben93, BCGS91, CMSS94, CGL92, CP94, LMS94, Mit90, Tiu92, TW93] </ref>. There is a number of fundamental open problems which have to be solved in order to gain a better understanding of the notion of a subtype.
Reference: [CMSS94] <author> L. Cardelli, S. Martini, J.C. Mitchell, and A. Scedrov, </author> <title> "An extension of system F with subtyping", </title> <booktitle> Information and Computation 94 , (1994), </booktitle> <pages> 4-56. </pages>
Reference-contexts: 1 Introduction The notion of a subtype of a type plays an important role in typed programming languages and it has been a subject of an intensive research recently <ref> [Ben93, BCGS91, CMSS94, CGL92, CP94, LMS94, Mit90, Tiu92, TW93] </ref>. There is a number of fundamental open problems which have to be solved in order to gain a better understanding of the notion of a subtype.
Reference: [CGL92] <author> G. Castagna, G. Ghelli, and G. Longo, </author> <title> "A calculus of overloaded functions with subtyping", </title> <booktitle> Proceedings, ACM conference on LISP and Functional Programming, </booktitle> <address> San Francisco (1992). </address>
Reference-contexts: 1 Introduction The notion of a subtype of a type plays an important role in typed programming languages and it has been a subject of an intensive research recently <ref> [Ben93, BCGS91, CMSS94, CGL92, CP94, LMS94, Mit90, Tiu92, TW93] </ref>. There is a number of fundamental open problems which have to be solved in order to gain a better understanding of the notion of a subtype.
Reference: [CP94] <author> G. Castagna, and B.C. Pierce, </author> <title> "Decidable bounded quantification", </title> <booktitle> 21st Ann. ACM Symposium on Principles of Programming Languages, </booktitle> <year> (1994), </year> <pages> 151-162. </pages>
Reference-contexts: 1 Introduction The notion of a subtype of a type plays an important role in typed programming languages and it has been a subject of an intensive research recently <ref> [Ben93, BCGS91, CMSS94, CGL92, CP94, LMS94, Mit90, Tiu92, TW93] </ref>. There is a number of fundamental open problems which have to be solved in order to gain a better understanding of the notion of a subtype.
Reference: [Dic95] <author> R. Di Cosmo, </author> <title> Isomorphisms of types: from -calculus to information retrieval and language design, </title> <publisher> Birkhauser, </publisher> <year> 1995. </year>
Reference-contexts: Bicoercibility of polymorphic types neither contains nor is contained in the notion of a provable isomorphism in system F . The reader is refered to <ref> [Dic95] </ref> for characterization of the latter notion. For example, 8Y: 8X: X and 8X: X are bicoercible but they are not provably isomorphic in F .
Reference: [LMS94] <author> G. Longo, K. Milsteed, and S. Soloviev, </author> <title> "A logic of subtyping", </title> <type> Manuscript, </type> <institution> Ecole Normale Superieure, </institution> <year> (1994). </year>
Reference-contexts: 1 Introduction The notion of a subtype of a type plays an important role in typed programming languages and it has been a subject of an intensive research recently <ref> [Ben93, BCGS91, CMSS94, CGL92, CP94, LMS94, Mit90, Tiu92, TW93] </ref>. There is a number of fundamental open problems which have to be solved in order to gain a better understanding of the notion of a subtype. <p> It turn out that this equational theory is decidable, implying therefore decidability of the problem of bicoercibility for polymorphic types. The relation of bicoercibility for polymorphic types is a special kind of isomorphism. This observation follows from the coherence property (see <ref> [LMS94] </ref>), i.e. the property which says that if M and N are coercions from to t , then they are provably equal in a certain extension of the system F .
Reference: [Mit90] <author> J.C. Mitchell, </author> <title> "Polymorphic type inference and containment", </title> <editor> in: G. Huet (Ed.), </editor> <booktitle> Logical Foundations of Functioanl Programming, </booktitle> <publisher> Addison-Wesley (1990), </publisher> <pages> 153-193. </pages>
Reference-contexts: 1 Introduction The notion of a subtype of a type plays an important role in typed programming languages and it has been a subject of an intensive research recently <ref> [Ben93, BCGS91, CMSS94, CGL92, CP94, LMS94, Mit90, Tiu92, TW93] </ref>. There is a number of fundamental open problems which have to be solved in order to gain a better understanding of the notion of a subtype. <p> One of such problems is the question of decidability of the relation of subtyping fl This work is partly supported by NSF Grant CCR-9113196, KBN Grant 2 P301 031 06 and by ESPRIT BRA7232 GENTZEN. 1 for second-order polymorphic types. This relation has been axiomatized by John Mitchell <ref> [Mit90] </ref>. The fact that a type is a subtype of a type t can be established by finding a coercion from to t . Coercions are denoted by terms, typable in system F of polymorphic second-order lambda calculus. <p> The proof of completeness is concluded in Section 5 where we characterize the so called reversible rewrite steps | steps which are used when deriving a bicoercion. 2 Subtyping for Polymorphic Types First we present the Mitchell's system of subtyping for polymorphic types (see <ref> [Mit90] </ref>). The system derives formulas of the form t , where and t are polymorphic types.
Reference: [Pie92] <author> B.C. Pierce, </author> <title> "Bounded quantification is undecidable", </title> <booktitle> 19th Ann. ACM Symposium on Principles of Programming Languages, </booktitle> <year> (1992), </year> <pages> 305-315. </pages>
Reference: [Tiu92] <author> J. Tiuryn, </author> <title> "Subtype inequalities", </title> <booktitle> Proc. 7-th IEEE Symp. Logic in Computer Science, </booktitle> <address> Santa Cruz (1992), </address> <pages> 308-315. </pages>
Reference-contexts: 1 Introduction The notion of a subtype of a type plays an important role in typed programming languages and it has been a subject of an intensive research recently <ref> [Ben93, BCGS91, CMSS94, CGL92, CP94, LMS94, Mit90, Tiu92, TW93] </ref>. There is a number of fundamental open problems which have to be solved in order to gain a better understanding of the notion of a subtype.
Reference: [TW93] <author> J. Tiuryn, and M. Wand, </author> <title> "Type reconstruction with recursive types and atomic subtyping", </title> <editor> in: M.-C. Gaudel and J.-P. Jouan-naud (Eds.) TAPSOFT'93: </editor> <booktitle> Theory and Practice of Software Development, Proc. 4th Intern. Joint Conf. </booktitle> <address> CAAP/FASE, </address> <publisher> Springer-Verlag LNCS 668, </publisher> <year> (1993), </year> <pages> 686-701. 15 </pages>
Reference-contexts: 1 Introduction The notion of a subtype of a type plays an important role in typed programming languages and it has been a subject of an intensive research recently <ref> [Ben93, BCGS91, CMSS94, CGL92, CP94, LMS94, Mit90, Tiu92, TW93] </ref>. There is a number of fundamental open problems which have to be solved in order to gain a better understanding of the notion of a subtype.
References-found: 11

