URL: http://www.cs.brandeis.edu/~mairson/Seminar/blass.ps.gz
Refering-URL: http://www.cs.brandeis.edu/~mairson/PL-oldtalks.html
Root-URL: http://www.cs.brandeis.edu
Title: IS GAME SEMANTICS NECESSARY?  
Author: Andreas Blass 
Abstract: We discuss the extent to which game semantics is implicit in the basic concepts of linear logic. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. Abramsky and R. Jagadeesan, </author> <title> Games and full completeness for multiplicative linear logic, </title> <journal> J. </journal> <note> Symbolic Logic (to appear). </note>
Reference-contexts: this sort seems to be implicit in the formalism or the underlying intuitions of linear logic. (But see the discussion of !A below.) As suggested by the title of this paper, the protocols considered here can be viewed as games (or debates or dialogs) between the client and the server <ref> [1, 2, 10, 11] </ref>. In this connection, the server is usually called the proponent or player, and the client is called the opponent. The protocol specifies who is to move (see Note 2) and what moves are legal at any point during a play of the game. <p> The protocol specifies who is to move (see Note 2) and what moves are legal at any point during a play of the game. Our protocols, unlike some versions of games <ref> [1, 2] </ref> but like the versions in [3,11], do not specify winners and losers, but it seems reasonable to regard a server as "winning" if it succeeds in running the entire protocol (including the final step of delivering data) without ever being in a situation where it is expected to act <p> In fact, if we were to adopt the implication corresponding to option (2), then the implication corresponding to (1) would be deducible. Finally, we might give an argument "from consensus" for option (1), namely that this option was adopted by all authors on game semantics <ref> [1, 2, 3, 10, 11] </ref>. (Additional arguments will arise when we consider duality in the next section.) We turn next to the description of the data type A ( B. Recall that this is the type of linear functions from A to B. <p> It becomes reasonable in interpretations oriented more toward computations than toward logic (more toward types than propositions); indeed this identification of 1 and ? occurs both in Girard's coherence space semantics [6] and in the Abramsky-Jagadeesan version of game semantics <ref> [1] </ref>. <p> Abramsky and Jagadeesan <ref> [1] </ref> have introduced a strong notion of independence, namely that when additional moves are added to the atomic subgames, the new strategy should be an extension of the old. <p> Our protocols always specify which of the two participants is expected to initiate the interaction. In the terminology of <ref> [1] </ref>, they have definite polarity. To obtain their completeness theorems for multiplicative linear logic, Abramsky and Jagadeesan [1] and Hyland and Ong [10] made essential use of non-polar games, i.e., games that either player can start (and that may have entirely different rules depending on who starts). As noted in [1], <p> Our protocols always specify which of the two participants is expected to initiate the interaction. In the terminology of <ref> [1] </ref>, they have definite polarity. To obtain their completeness theorems for multiplicative linear logic, Abramsky and Jagadeesan [1] and Hyland and Ong [10] made essential use of non-polar games, i.e., games that either player can start (and that may have entirely different rules depending on who starts). As noted in [1], non-polarity does not work well in the presence of the additive connectives, which explains why we, starting <p> <ref> [1] </ref>, they have definite polarity. To obtain their completeness theorems for multiplicative linear logic, Abramsky and Jagadeesan [1] and Hyland and Ong [10] made essential use of non-polar games, i.e., games that either player can start (and that may have entirely different rules depending on who starts). As noted in [1], non-polarity does not work well in the presence of the additive connectives, which explains why we, starting from the behavior of additive connectives, arrived at polar games. Note 3. In their analysis of game semantics for multiplicative linear logic, Abram-sky and Jagadeesan [1] found that having the server begin both <p> As noted in <ref> [1] </ref>, non-polarity does not work well in the presence of the additive connectives, which explains why we, starting from the behavior of additive connectives, arrived at polar games. Note 3. In their analysis of game semantics for multiplicative linear logic, Abram-sky and Jagadeesan [1] found that having the server begin both components of A B when possible was the source of the excessive supply of valid formulas (including thinning) in [2]. So in their semantics, the server would act in only one component in such a situation.
Reference: 2. <author> A. Blass, </author> <title> A game semantics for linear logic, </title> <journal> Ann. Pure Appl. Logic 56 (1992), </journal> <pages> 183-220. </pages>
Reference-contexts: The theory could be expanded to allow or even require infinite runs (cf. <ref> [2] </ref>), but nothing of this sort seems to be implicit in the formalism or the underlying intuitions of linear logic. (But see the discussion of !A below.) As suggested by the title of this paper, the protocols considered here can be viewed as games (or debates or dialogs) between the client <p> this sort seems to be implicit in the formalism or the underlying intuitions of linear logic. (But see the discussion of !A below.) As suggested by the title of this paper, the protocols considered here can be viewed as games (or debates or dialogs) between the client and the server <ref> [1, 2, 10, 11] </ref>. In this connection, the server is usually called the proponent or player, and the client is called the opponent. The protocol specifies who is to move (see Note 2) and what moves are legal at any point during a play of the game. <p> The protocol specifies who is to move (see Note 2) and what moves are legal at any point during a play of the game. Our protocols, unlike some versions of games <ref> [1, 2] </ref> but like the versions in [3,11], do not specify winners and losers, but it seems reasonable to regard a server as "winning" if it succeeds in running the entire protocol (including the final step of delivering data) without ever being in a situation where it is expected to act <p> In fact, if we were to adopt the implication corresponding to option (2), then the implication corresponding to (1) would be deducible. Finally, we might give an argument "from consensus" for option (1), namely that this option was adopted by all authors on game semantics <ref> [1, 2, 3, 10, 11] </ref>. (Additional arguments will arise when we consider duality in the next section.) We turn next to the description of the data type A ( B. Recall that this is the type of linear functions from A to B. <p> This approach to validity, motivated by standard ideas from logic, was used, for example, in <ref> [2] </ref>. It works well in the context of infinite games (as in [2]), but seems seriously deficient when games are required to terminate after a finite number of moves. <p> This approach to validity, motivated by standard ideas from logic, was used, for example, in <ref> [2] </ref>. It works well in the context of infinite games (as in [2]), but seems seriously deficient when games are required to terminate after a finite number of moves. The reason is that, by a classical theorem of Gale and Stewart [5], such finitely long games always admit winning strategies for one or the other player. <p> Note 3. In their analysis of game semantics for multiplicative linear logic, Abram-sky and Jagadeesan [1] found that having the server begin both components of A B when possible was the source of the excessive supply of valid formulas (including thinning) in <ref> [2] </ref>. So in their semantics, the server would act in only one component in such a situation. The other component would be started (if at all) by the client. This set-up depends on having non-polar games, so that the client can start the other component. <p> Note 4. Requiring the client to finish both parts of A B will (once we explain validity) make thinning invalid in this semantics of protocols. Thinning, which can be expressed as A; B ` A, is valid in the semantics of <ref> [2] </ref> because the server (there called proponent) can play a copying strategy between the A's without ever 12 ANDREAS BLASS entering the subgame B.
Reference: 3. <author> P.-L. Curien, </author> <title> Concrete data structures, sequential algorithms, and linear logic, electronic posting on Types network (1992). </title>
Reference-contexts: In fact, if we were to adopt the implication corresponding to option (2), then the implication corresponding to (1) would be deducible. Finally, we might give an argument "from consensus" for option (1), namely that this option was adopted by all authors on game semantics <ref> [1, 2, 3, 10, 11] </ref>. (Additional arguments will arise when we consider duality in the next section.) We turn next to the description of the data type A ( B. Recall that this is the type of linear functions from A to B.
Reference: 4. <author> M. Dummett, </author> <title> Elements of Intuitionism, </title> <publisher> Oxford University Press, </publisher> <year> 1977. </year>
Reference-contexts: In particular, conjunction and disjunction of propositions correspond to the cartesian product and the disjoint union of types, respectively. Very similar ideas are contained in the intended interpretation of the propositional connectives in intuitionistic mathematics <ref> [4, 8, 14] </ref>. There, the meaning of a proposition is specified by telling what is required in order to prove the proposition, and connectives are explained by telling how they affect proofs.
Reference: 5. <author> D. Gale and F. M. Stewart, </author> <title> Infinite games with perfect information, Ann. Math. </title> <booktitle> Studies 28 (1953), </booktitle> <pages> 245-266. </pages>
Reference-contexts: It works well in the context of infinite games (as in [2]), but seems seriously deficient when games are required to terminate after a finite number of moves. The reason is that, by a classical theorem of Gale and Stewart <ref> [5] </ref>, such finitely long games always admit winning strategies for one or the other player.
Reference: 6. <author> J.-Y. Girard, </author> <title> Linear logic, </title> <journal> Theoret. Comp. Sci. </journal> <volume> 50 (1987), </volume> <pages> 1-102. </pages>
Reference-contexts: Linearity One of the (two) fundamental ingredients of Girard's linear logic <ref> [6] </ref> is a computational refinement of the type-theoretic notion of function, paying attention to how many times the input is used in computing the output. <p> A single access of !A consists of an arbitrary number of accesses of A. Thus, the traditional function space A ! B can be described in this linear framework as (!A) ( B. Girard developed a logical system <ref> [6] </ref>, a sequent calculus for linear logic, which can be regarded as a variation of the standard sequent calculi for propositional logic but which becomes much more intuitive if viewed as being about types in the sense just explained (and to be explained further below) rather than about propositions. <p> The intuition behind linear negation (and other connectives derived from it) is considerably less clear than that behind the connectives discussed in the preceding sections. When discussing linear logic in terms of a flow of questions and answers in a network, Girard <ref> [6, 7] </ref> has indicated that questions and answers of type A are to be regarded as answers and questions, respectively, of the negated type, written A ? . <p> Thus, in the negated data type, this final action would be performed by the client. It is part of the formalism of linear logic <ref> [6] </ref> that negation is involutive, i.e., A ?? = A. <p> It becomes reasonable in interpretations oriented more toward computations than toward logic (more toward types than propositions); indeed this identification of 1 and ? occurs both in Girard's coherence space semantics <ref> [6] </ref> and in the Abramsky-Jagadeesan version of game semantics [1]. <p> Notice that the approximation of !A by iterated "times" of 1&A, suggested in <ref> [6] </ref>, corresponds to the stream picture, not to reliable storage. Note 6. The deduction of ` A; from ` A; A; in the presence of ` A ? A and thinning proceeds as follows. Obtain ` A ? ; A; by thinning from the axiom ` A ? ; A.
Reference: 7. <author> J.-Y. Girard, </author> <title> Towards a geometry of interaction, </title> <booktitle> Categories in Computer Science and Logic (J. </booktitle> <editor> Gray and A. Scedrov, eds.), </editor> <title> Contemp. </title> <journal> Math. 92, Amer. Math. Soc., </journal> <year> 1989, </year> <pages> pp. 69-108. </pages>
Reference-contexts: The intuition behind linear negation (and other connectives derived from it) is considerably less clear than that behind the connectives discussed in the preceding sections. When discussing linear logic in terms of a flow of questions and answers in a network, Girard <ref> [6, 7] </ref> has indicated that questions and answers of type A are to be regarded as answers and questions, respectively, of the negated type, written A ? . <p> To make the point more explicit, we point out that from A ? A and the rule of thinning one can deduce in linear logic the rule of contraction (see Note 6), whereas these are normally regarded as quite different matters, thinning being more innocuous than contraction <ref> [7] </ref>. The behaviors that witness the validity of A ? A are of a rather complicated sort. To determine its first move, the server must completely analyze the game associated to A. <p> The situation is different here, as the server must enter the subgame B and may find itself called upon to move but having no move available there. Note 5. Girard has pointed out <ref> [7] </ref> that, unlike the additive and multiplicative connectives, the exponentials are not determined by their introduction rules.
Reference: 8. <author> J.-Y. Girard, Y. Lafont, and P. Taylor, </author> <title> Proofs and Types, </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 7, </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: Propositions as Types The relevance of various constructive propositional logics, including linear logic, to computation and particularly to type theory is largely based on the propositions-as-types paradigm, also often called the Curry-Howard isomorphism <ref> [8, 9, 13] </ref>. In its simplest form, this paradigm involves a correspondence between the constructive logic of implication and simple typed combinatory logic. <p> In particular, conjunction and disjunction of propositions correspond to the cartesian product and the disjoint union of types, respectively. Very similar ideas are contained in the intended interpretation of the propositional connectives in intuitionistic mathematics <ref> [4, 8, 14] </ref>. There, the meaning of a proposition is specified by telling what is required in order to prove the proposition, and connectives are explained by telling how they affect proofs.
Reference: 9. <author> W. A. Howard, </author> <title> The formulae-as-types notion of construction, To H. </title> <editor> B. </editor> <booktitle> Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism (J. </booktitle> <editor> R. Hindley and J. P. Seldin, eds.), </editor> <publisher> Academic Press, </publisher> <year> 1980, </year> <pages> pp. 479-490. </pages>
Reference-contexts: Propositions as Types The relevance of various constructive propositional logics, including linear logic, to computation and particularly to type theory is largely based on the propositions-as-types paradigm, also often called the Curry-Howard isomorphism <ref> [8, 9, 13] </ref>. In its simplest form, this paradigm involves a correspondence between the constructive logic of implication and simple typed combinatory logic. <p> Constructive logic of implication can be axiomatized by the schemes A ! (B ! A) [A ! (B ! C)] ! [(A ! B) ! (A ! C)] and the rule of modus ponens A ! B A : Curry and Howard <ref> [9] </ref> noticed that, if one reads the letters as referring to sets (or types) rather than propositions and reads A ! B as the set of functions from A to B rather than implication, then the two schemes are the types of the basic combinators K and S, defined by (Kx)y
Reference: 10. <author> J. M. E. Hyland and C.-H. L. Ong, </author> <title> Fair games and full completeness for multiplicative linear logic without the MIX-rule, </title> <note> preprint (1993). </note>
Reference-contexts: this sort seems to be implicit in the formalism or the underlying intuitions of linear logic. (But see the discussion of !A below.) As suggested by the title of this paper, the protocols considered here can be viewed as games (or debates or dialogs) between the client and the server <ref> [1, 2, 10, 11] </ref>. In this connection, the server is usually called the proponent or player, and the client is called the opponent. The protocol specifies who is to move (see Note 2) and what moves are legal at any point during a play of the game. <p> In fact, if we were to adopt the implication corresponding to option (2), then the implication corresponding to (1) would be deducible. Finally, we might give an argument "from consensus" for option (1), namely that this option was adopted by all authors on game semantics <ref> [1, 2, 3, 10, 11] </ref>. (Additional arguments will arise when we consider duality in the next section.) We turn next to the description of the data type A ( B. Recall that this is the type of linear functions from A to B. <p> Our protocols always specify which of the two participants is expected to initiate the interaction. In the terminology of [1], they have definite polarity. To obtain their completeness theorems for multiplicative linear logic, Abramsky and Jagadeesan [1] and Hyland and Ong <ref> [10] </ref> made essential use of non-polar games, i.e., games that either player can start (and that may have entirely different rules depending on who starts).
Reference: 11. <author> F. Lamarche, </author> <title> Sequentiality, games and linear logic, </title> <note> preprint (1992). </note>
Reference-contexts: See <ref> [11] </ref> for a combination of the two generalizations.) We could even incorporate the transmission of data at the end of the client-server interaction into the access protocol. <p> this sort seems to be implicit in the formalism or the underlying intuitions of linear logic. (But see the discussion of !A below.) As suggested by the title of this paper, the protocols considered here can be viewed as games (or debates or dialogs) between the client and the server <ref> [1, 2, 10, 11] </ref>. In this connection, the server is usually called the proponent or player, and the client is called the opponent. The protocol specifies who is to move (see Note 2) and what moves are legal at any point during a play of the game. <p> In fact, if we were to adopt the implication corresponding to option (2), then the implication corresponding to (1) would be deducible. Finally, we might give an argument "from consensus" for option (1), namely that this option was adopted by all authors on game semantics <ref> [1, 2, 3, 10, 11] </ref>. (Additional arguments will arise when we consider duality in the next section.) We turn next to the description of the data type A ( B. Recall that this is the type of linear functions from A to B.
Reference: 12. <author> P. Lorenzen, </author> <title> Ein dialogisches Konstruktivitatskriterium, Infinitistic Methods, </title> <publisher> PWN, </publisher> <year> 1961, </year> <pages> pp. 193-200. </pages>
Reference-contexts: They also observed, however, that history-freeness does not work well in the presence of the additive connectives. One possible meaning for "independence" is the Abramsky-Jagadeesan notion of uniformity (without history-freeness). Another possibility, a modification of an idea of Lorenzen <ref> [12] </ref>, is that the server should never find itself expected to act in an atomic subgame A unless the client has previously had to act in a corresponding A ? . All these speculations need considerably more work in the direction of soundness (and if possible completeness) theorems.
Reference: 13. <author> H. Simmons, </author> <title> Logic and Computation | Taking the Curry-Howard Correspondence Seriously, </title> <booktitle> Lecture notes distributed at the European Summer Meeting of the Association for Symbolic Logic, </booktitle> <address> Keele, England, </address> <year> 1993. </year>
Reference-contexts: Propositions as Types The relevance of various constructive propositional logics, including linear logic, to computation and particularly to type theory is largely based on the propositions-as-types paradigm, also often called the Curry-Howard isomorphism <ref> [8, 9, 13] </ref>. In its simplest form, this paradigm involves a correspondence between the constructive logic of implication and simple typed combinatory logic.
Reference: 14. <author> A. S. Troelstra and D. van Dalen, </author> <title> Constructivism in Mathematics | An Introduction, Vol.1, </title> <publisher> North-Holland, </publisher> <year> 1988. </year> <institution> Mathematics Dept., University of Michigan, </institution> <address> Ann Arbor, MI 48109, U.S.A. </address> <publisher> E-mail address: ablass@umich.edu </publisher>
Reference-contexts: In particular, conjunction and disjunction of propositions correspond to the cartesian product and the disjoint union of types, respectively. Very similar ideas are contained in the intended interpretation of the propositional connectives in intuitionistic mathematics <ref> [4, 8, 14] </ref>. There, the meaning of a proposition is specified by telling what is required in order to prove the proposition, and connectives are explained by telling how they affect proofs.
References-found: 14

