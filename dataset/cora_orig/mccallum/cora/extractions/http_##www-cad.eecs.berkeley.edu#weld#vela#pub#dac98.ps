URL: http://www-cad.eecs.berkeley.edu/weld/vela/pub/dac98.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/weld/vela/publications.html
Root-URL: http://www.cs.berkeley.edu
Email: fchan@eecs.berkeley.edu  mds@eecs.berkeley.edu  rnewton@eecs.berkeley.edu  
Title: WELD An Environment for Web-Based Electronic Design  
Author: Francis L. Chan Mark D. Spiller A. Richard Newton 
Address: Berkeley  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California at  
Abstract: Increasing size and geographical separation of design data and teams has created a need for a network-based electronic design environment that is scaleable, adaptable, secure, highly available, and cost effective. In the WELD project we are evaluating aspects of the network integration and communication infrastructure needed to enable such a distributed design environment. The architecture of WELD and the components developed to implement the system, together with performance results, are described and evaluated. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> Special Issue on Bayesian Networks: </editor> <booktitle> Communications of the ACM, </booktitle> <volume> vol. 38, no. 3, </volume> <month> March </month> <year> 1995. </year>
Reference-contexts: While we provide the infrastructure necessary for different implementation strategies, it is currently up to developers to strike a balance among program complexity, execution time, and network overhead. We are implementing an adaptive system which manages this tradeoff and optimizes expected performance using a learning-based approach <ref> [1] </ref>. 5.3.4 Server Technology The distributed nature of tools and placement of the workflow and registry servers as proxies made it very easy to organize, manage, and select resources, as well as track tool information (such as function, failure rates, help information, and sample designs).
Reference: [2] <author> R. Ben-Natan., </author> <title> CORBA: A Guide to Common Object Request Broker Architecture, </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: Despite this work, bottlenecks 7 in the manipulation of large amounts of information still proved to be significant. We are exploring the tradeoffs in the use of current object communication mechanisms, including CORBA <ref> [2] </ref> and DCOM [31], and new techniques in dynamic creation and distribution of components, such as Java applets and ActiveX [9] controls, to address this issue. 5.3.3 Network Overhead Network overhead (setting up and closing of sockets, input streams, and output streams), was another anticipated source of poor performance, but proved
Reference: [3] <author> O. Bentz, </author> <title> An Information-centric Design Exploration and Implementation Server, </title> <type> Ph.D. dissertation, </type> <institution> UC Berkeley, </institution> <year> 1997. </year>
Reference-contexts: and NFS) by using platform-independent standards such as Java, sockets, proxies, and generic string-based communication protocols. 1 Security features can be layered upon the base WELD architecture. 2 A number of external efforts that are relevant to our research include the REUBEN system [26], CREW [8], the Design Agent system <ref> [3] </ref>, and Active Documents [38]. 4 System Architecture Clients Network Services Remote Servers Data Manager Proxies Registry API Integrated WELD Commands/ Data Integrated Tools Services Browser Clients Generic Clients Wrapper The three-tier WELD architecture 3 (Figure 1) consists of: Remote Servers network-accessible tools or services.
Reference: [4] <author> A. Casotto, A. R. Newton, and A. Sangiovanni-Vincentelli, </author> <title> Design Management Based on Design Traces, </title> <booktitle> Proceedings of the 27th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 136-141, </pages> <year> 1990. </year>
Reference-contexts: A wide range of computing resources, from high-end workstations to mobile PDAs, are supported in WELD through the use of servers and proxies located both locally and in the network. Although the Web potentially offers substantial performance improvements for suitably partitioned or iterative designs <ref> [4] </ref>, additional infrastructure will be required to assure robustness, especially in the area of data management. Intermediate state of long processes must be stored so that design states can be recovered efficiently and incrementally after any hardware, software, or network failure.
Reference: [5] <author> F. Chan, </author> <title> Architecture and Infrastructure for a Distributed Design Environment A Client Perspective, </title> <type> MS Report, </type> <institution> UC Berkeley, </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: It utilizes the WELD client-database communication protocol to serialize and mirror Java object hierarchies to an objectoriented database server in the network. The data manager facilitates 3 The WELD architecture is covered in greater detail in <ref> [5, 40] </ref>. customizability in the addition of new message types as well as the transfer and translation of data between different tools. It is also accessible via multiple interfaces, including the WELD protocols and HTTP.
Reference: [6] <institution> Francis Chans research page, </institution> <note> http://www-cad.eecs.berkeley.edu/~fchan/research. </note>
Reference-contexts: The Registry Service server dynamically maintains information on the availability of network resources and their status, including uptime, history, failure rate, etc. 4.3 Client Infrastructure The Java Client Persistent Object Management Package <ref> [6] </ref> works in tandem with the data manager. It enables Java (client) objects to be managed and manipulated by a network data server. <p> It enables Java (client) objects to be managed and manipulated by a network data server. In addition to object storage and retrieval 5 , it extends remote data backend capabilities, such as querying and versioning, to client users, through a set of extensible APIs. A Java Network Client Package <ref> [6] </ref> was also developed to allow Java applets and applications to communicate with WELD network resources. 5 Results and Experiences 5.1 Java-Based OCT - A CAD Data Manager The first application of the data server and persistent object management package was a Java-based version [6] of the Berkeley OCT Tools. <p> A Java Network Client Package <ref> [6] </ref> was also developed to allow Java applets and applications to communicate with WELD network resources. 5 Results and Experiences 5.1 Java-Based OCT - A CAD Data Manager The first application of the data server and persistent object management package was a Java-based version [6] of the Berkeley OCT Tools. OCT serves as the data manager for a large number of VLSI/CAD applications following the Berkeley CAD framework [30].
Reference: [7] <author> P. Clark and R. Goering, </author> <title> Web-based design hoists new sail, Electronic Engineering Times, </title> <address> June 16, </address> <year> 1997, </year> <note> issue 958. Demonstration materials at http://www-cad.eecs. berkeley.edu/weld/dac97. </note>
Reference-contexts: Tools in the system in the 1997 DAC demonstration <ref> [7] </ref> included (1) simple programs, such as rwho, finger, email [27], (2) UC Berkeley CAD tools, including the Nova state optimization tool [30], VIS [44], SIS [36], POLIS [32], and (3) a commercial CAD tool, the Synopsys Design Compiler [10].
Reference: [8] <author> CREW, </author> <title> The Collaboratory for Research on Electronic Work, </title> <address> http://www.crew.umich.edu. </address>
Reference-contexts: UNIX and NFS) by using platform-independent standards such as Java, sockets, proxies, and generic string-based communication protocols. 1 Security features can be layered upon the base WELD architecture. 2 A number of external efforts that are relevant to our research include the REUBEN system [26], CREW <ref> [8] </ref>, the Design Agent system [3], and Active Documents [38]. 4 System Architecture Clients Network Services Remote Servers Data Manager Proxies Registry API Integrated WELD Commands/ Data Integrated Tools Services Browser Clients Generic Clients Wrapper The three-tier WELD architecture 3 (Figure 1) consists of: Remote Servers network-accessible tools or services.
Reference: [9] <author> A. Denning, </author> <title> ActiveX Controls Inside Out, </title> <publisher> Microsoft Press, </publisher> <address> Redmond, </address> <year> 1997. </year>
Reference-contexts: We are exploring the tradeoffs in the use of current object communication mechanisms, including CORBA [2] and DCOM [31], and new techniques in dynamic creation and distribution of components, such as Java applets and ActiveX <ref> [9] </ref> controls, to address this issue. 5.3.3 Network Overhead Network overhead (setting up and closing of sockets, input streams, and output streams), was another anticipated source of poor performance, but proved to be largely insignificant (around 10ms) when compared to the actual transmission of data in a LAN environment.
Reference: [10] <institution> The Design Compiler Family Datasheet, </institution> <address> http://www. synopsys.com/products/logic/design_comp_ds.html. </address>
Reference-contexts: Tools in the system in the 1997 DAC demonstration [7] included (1) simple programs, such as rwho, finger, email [27], (2) UC Berkeley CAD tools, including the Nova state optimization tool [30], VIS [44], SIS [36], POLIS [32], and (3) a commercial CAD tool, the Synopsys Design Compiler <ref> [10] </ref>. Database Server Workflow Server Registry Service Tools Workflow Monitor Wrapper 1 Server Validation Results Storage Workflow Data Operation Request Result 2 4 The numbers indicate the flow of events during a workflow execution.
Reference: [11] <institution> EECS 244 Fall 96 home page, </institution> <note> http://www-cad/~newton/ courses/. </note>
Reference-contexts: Other efforts in the area of Java object and database connectivity include the Java Database Connectivity API [22] and various commercial persistent Java object systems [20, 28, 29]. 6 EE 244, a graduate-level course on CAD in UC Berkeley Fall 1996, used the Java-based OCT package for several class assignments <ref> [11] </ref>. result is a cohesive, distributed design system that uses and tests the limits of the network infrastructure, as well as sheds light on many of the criteria discussed in Section 2, such as ACID/BASE properties, flexibility, and ease of use.
Reference: [12] <author> N. Filer, M. Brown and Z. Moosa, </author> <title> "Integrating CAD tools into a framework environment using a flexible and adaptable procedural interface," </title> <booktitle> European Design Automation Conference with EURO-VHDL, </booktitle> <pages> pp. 200-205, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Most of the past efforts in the area of CAD frameworks are involved in introducing new systems, techniques or extensions in specific areas of design data management [33, 46], design meta-data management [14, 24, 34], and flow, process and tool management <ref> [12, 16, 18, 25, 43] </ref>. WELD, however, concentrates on providing reliable, scaleable connection and communication mechanisms for distributed users, tools and services. It also extends the traditional client/server model by treating both tools and data as potentially mobile components.
Reference: [13] <author> A. Fox, et al., </author> <title> Extensible Cluster-Based Scalable Network Services, </title> <booktitle> Proceedings of the 16 th ACM Symposium on Operating Systems Principles (SOSP-16), </booktitle> <address> St. Malo, France, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: A new set of semantics referred to as BASE <ref> [13] </ref> (Basically Available, Soft state, Eventual consistency) has been proposed that stresses availability and low latency, instead of the traditional transactional capabilities of ACID that have often proven to be too high in overhead and complexity.
Reference: [14] <author> S. T. Frezza, S. Levitan and P. Chrysanthis, </author> <title> "Requirements-based design evaluation," </title> <booktitle> Proceedings of the 32nd ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 76-81, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: However, our approach differs from others work 2 in a number of fundamental ways. Most of the past efforts in the area of CAD frameworks are involved in introducing new systems, techniques or extensions in specific areas of design data management [33, 46], design meta-data management <ref> [14, 24, 34] </ref>, and flow, process and tool management [12, 16, 18, 25, 43]. WELD, however, concentrates on providing reliable, scaleable connection and communication mechanisms for distributed users, tools and services. It also extends the traditional client/server model by treating both tools and data as potentially mobile components.
Reference: [15] <author> J. Gray, </author> <title> The Transaction Concept: Virtues and Limitations, </title> <booktitle> Proceedings of VLDB, </booktitle> <address> pp.144-154, Cannes, France, </address> <month> September </month> <year> 1981. </year>
Reference-contexts: By carefully analyzing the usage of today's users and tools, it may be possible to somewhat relax the traditional ACID properties (Atomicity, Consistency, Isolation, and Durability) <ref> [15] </ref> required for reliable data management and exchange and make use of the network for distributed collaborative design.
Reference: [16] <author> J. W. Hagerman and S. W. </author> <title> Director, "Improved tool and data selection in task management," </title> <booktitle> Proceedings of the 33rd ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 181-184, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Most of the past efforts in the area of CAD frameworks are involved in introducing new systems, techniques or extensions in specific areas of design data management [33, 46], design meta-data management [14, 24, 34], and flow, process and tool management <ref> [12, 16, 18, 25, 43] </ref>. WELD, however, concentrates on providing reliable, scaleable connection and communication mechanisms for distributed users, tools and services. It also extends the traditional client/server model by treating both tools and data as potentially mobile components.
Reference: [17] <author> D. S. Harrison, et al., </author> <title> "Electronic CAD Frameworks," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 78, no. 2, </volume> <pages> pp. 393-417, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: In addition, Java clients allow for consistent and intuitive user interfaces and platform independence, thus reducing startup and training time. 3 Related Work Our architecture and infrastructure for a distributed design environment can be compared to CAD frameworks <ref> [17, 48] </ref>. Comparable features include: A design database distributed data manager and client object management package A design data manager versioning, security and meta-data handling capabilities A design process manager server wrapper and distributed workflow system. However, our approach differs from others work 2 in a number of fundamental ways.
Reference: [18] <author> A. Hoeven, et al., </author> <title> "A flexible access control mechanism for CAD frameworks," </title> <booktitle> European Design Automation Conference with EURO-VHDL, </booktitle> <pages> pp. 188-193, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Most of the past efforts in the area of CAD frameworks are involved in introducing new systems, techniques or extensions in specific areas of design data management [33, 46], design meta-data management [14, 24, 34], and flow, process and tool management <ref> [12, 16, 18, 25, 43] </ref>. WELD, however, concentrates on providing reliable, scaleable connection and communication mechanisms for distributed users, tools and services. It also extends the traditional client/server model by treating both tools and data as potentially mobile components.
Reference: [19] <institution> The Informixs Universal Web Architecture, </institution> <address> http://www.informix.com/informix/bussol/uwa/ uwa.htm. </address>
Reference-contexts: A relational database would, in turn, offer many built-in capabilities, but would require a great deal of additional modifications to represent object hierarchies. Since the beginning of the WELD project, objectoriented and object-relational databases <ref> [19] </ref> have advanced and may offer improved tradeoffs. However, we believe a system with generic, simple 7 Current implementation requires input streams to be parsed byte-by-byte, and cast by Java from byte streams to strings.
Reference: [20] <author> Infoscape, </author> <note> http://www.infoscape.com. </note>
Reference-contexts: The 4 Java applets can only make socket connections to the server from which they were downloaded. 5 Other efforts in the area of Java object and database connectivity include the Java Database Connectivity API [22] and various commercial persistent Java object systems <ref> [20, 28, 29] </ref>. 6 EE 244, a graduate-level course on CAD in UC Berkeley Fall 1996, used the Java-based OCT package for several class assignments [11]. result is a cohesive, distributed design system that uses and tests the limits of the network infrastructure, as well as sheds light on many of
Reference: [21] <author> Java Development Kit, </author> <note> http://java.sun.com/products/jdk/1.1/index.html </note>
Reference-contexts: These results indicate that, for the same hardware platform, the basic network capabilities for Java applications (Sun Java Development Kit (JDK) 1.02 <ref> [21] </ref>) and Java applets (Netscape 3.01 on a Sun Sparc 20) are comparable to that of C++.
Reference: [22] <institution> The JDBC page, </institution> <note> http://java.sun.com/products/jdbc/index.html. </note>
Reference-contexts: The 4 Java applets can only make socket connections to the server from which they were downloaded. 5 Other efforts in the area of Java object and database connectivity include the Java Database Connectivity API <ref> [22] </ref> and various commercial persistent Java object systems [20, 28, 29]. 6 EE 244, a graduate-level course on CAD in UC Berkeley Fall 1996, used the Java-based OCT package for several class assignments [11]. result is a cohesive, distributed design system that uses and tests the limits of the network infrastructure,
Reference: [23] <institution> Symantec Just In Time Compiler Performance Analysis, </institution> <note> http://www.symantec.com/jit/jit_pa.html. </note>
Reference-contexts: Java performance was initially anticipated to be a system bottleneck, but extensive application usage indicated that it was reasonable, and will only improve as just-in-time compiler <ref> [23] </ref> technology advances. In addition, the focus on a proxy-based architecture allows the offloading of work onto proxies, and can thus reduce many (Java) clients to lightweight communications and user interface tools.
Reference: [24] <author> E. W. Johnson and J. B. Brockman. </author> <title> "Incorporating design schedule management into a flow management system," </title> <booktitle> Proceedings of the 32nd ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 88-93, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: However, our approach differs from others work 2 in a number of fundamental ways. Most of the past efforts in the area of CAD frameworks are involved in introducing new systems, techniques or extensions in specific areas of design data management [33, 46], design meta-data management <ref> [14, 24, 34] </ref>, and flow, process and tool management [12, 16, 18, 25, 43]. WELD, however, concentrates on providing reliable, scaleable connection and communication mechanisms for distributed users, tools and services. It also extends the traditional client/server model by treating both tools and data as potentially mobile components.
Reference: [25] <editor> S. Kleinfeldt, et al., </editor> <booktitle> "Design methodology management," Proceedings of the IEEE, </booktitle> <volume> vol. 82, no. 2, </volume> <pages> pp. 231-250, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: Most of the past efforts in the area of CAD frameworks are involved in introducing new systems, techniques or extensions in specific areas of design data management [33, 46], design meta-data management [14, 24, 34], and flow, process and tool management <ref> [12, 16, 18, 25, 43] </ref>. WELD, however, concentrates on providing reliable, scaleable connection and communication mechanisms for distributed users, tools and services. It also extends the traditional client/server model by treating both tools and data as potentially mobile components.
Reference: [26] <author> H. Lavana, et al., </author> <title> Executable Workflows, A Paradigm for Collaborative Design on the Internet, </title> <booktitle> Proceedings of the 34 ACM/IEEE Design Automation Conference, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: UNIX and NFS) by using platform-independent standards such as Java, sockets, proxies, and generic string-based communication protocols. 1 Security features can be layered upon the base WELD architecture. 2 A number of external efforts that are relevant to our research include the REUBEN system <ref> [26] </ref>, CREW [8], the Design Agent system [3], and Active Documents [38]. 4 System Architecture Clients Network Services Remote Servers Data Manager Proxies Registry API Integrated WELD Commands/ Data Integrated Tools Services Browser Clients Generic Clients Wrapper The three-tier WELD architecture 3 (Figure 1) consists of: Remote Servers network-accessible tools or
Reference: [27] <author> Descriptions of finger, </author> <title> mail, and rwho are available from section one of the online UNIX Programmers Manual. </title>
Reference-contexts: Tools in the system in the 1997 DAC demonstration [7] included (1) simple programs, such as rwho, finger, email <ref> [27] </ref>, (2) UC Berkeley CAD tools, including the Nova state optimization tool [30], VIS [44], SIS [36], POLIS [32], and (3) a commercial CAD tool, the Synopsys Design Compiler [10].
Reference: [28] <author> NetDynamics, </author> <note> http://www.netdynamics.com. </note>
Reference-contexts: The 4 Java applets can only make socket connections to the server from which they were downloaded. 5 Other efforts in the area of Java object and database connectivity include the Java Database Connectivity API [22] and various commercial persistent Java object systems <ref> [20, 28, 29] </ref>. 6 EE 244, a graduate-level course on CAD in UC Berkeley Fall 1996, used the Java-based OCT package for several class assignments [11]. result is a cohesive, distributed design system that uses and tests the limits of the network infrastructure, as well as sheds light on many of
Reference: [29] <author> Objectivity for Java, </author> <title> The Insider: News and Views for Objectivity Users, </title> <month> July </month> <year> 1997. </year>
Reference-contexts: The 4 Java applets can only make socket connections to the server from which they were downloaded. 5 Other efforts in the area of Java object and database connectivity include the Java Database Connectivity API [22] and various commercial persistent Java object systems <ref> [20, 28, 29] </ref>. 6 EE 244, a graduate-level course on CAD in UC Berkeley Fall 1996, used the Java-based OCT package for several class assignments [11]. result is a cohesive, distributed design system that uses and tests the limits of the network infrastructure, as well as sheds light on many of
Reference: [30] <institution> OCTTOOLS-5.2 Reference Manual, UC Berkeley, </institution> <year> 1993. </year>
Reference-contexts: OCT serves as the data manager for a large number of VLSI/CAD applications following the Berkeley CAD framework <ref> [30] </ref>. The Java persistent object package provides a layer of abstraction for the data server, presenting capabilities including object saving and loading, as well as object traversal with an interface similar to that of the OCT generator. <p> Tools in the system in the 1997 DAC demonstration [7] included (1) simple programs, such as rwho, finger, email [27], (2) UC Berkeley CAD tools, including the Nova state optimization tool <ref> [30] </ref>, VIS [44], SIS [36], POLIS [32], and (3) a commercial CAD tool, the Synopsys Design Compiler [10].
Reference: [31] <author> D. Platt, </author> <title> The Essence of COM and ActiveX, </title> <publisher> Prentice Hall Computer Books, </publisher> <month> Jan. </month> <year> 1998. </year>
Reference-contexts: Despite this work, bottlenecks 7 in the manipulation of large amounts of information still proved to be significant. We are exploring the tradeoffs in the use of current object communication mechanisms, including CORBA [2] and DCOM <ref> [31] </ref>, and new techniques in dynamic creation and distribution of components, such as Java applets and ActiveX [9] controls, to address this issue. 5.3.3 Network Overhead Network overhead (setting up and closing of sockets, input streams, and output streams), was another anticipated source of poor performance, but proved to be largely
Reference: [32] <institution> The Polis Project, </institution> <note> http://www-cad.eecs.berkeley.edu/Respep/Research/hsc. </note>
Reference-contexts: Tools in the system in the 1997 DAC demonstration [7] included (1) simple programs, such as rwho, finger, email [27], (2) UC Berkeley CAD tools, including the Nova state optimization tool [30], VIS [44], SIS [36], POLIS <ref> [32] </ref>, and (3) a commercial CAD tool, the Synopsys Design Compiler [10]. Database Server Workflow Server Registry Service Tools Workflow Monitor Wrapper 1 Server Validation Results Storage Workflow Data Operation Request Result 2 4 The numbers indicate the flow of events during a workflow execution.
Reference: [33] <author> W. Schettler and S. Heymann, </author> <title> "Towards support for design description languages in EDA frameworks," </title> <booktitle> Proceedings of the IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pp. 762-767, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: However, our approach differs from others work 2 in a number of fundamental ways. Most of the past efforts in the area of CAD frameworks are involved in introducing new systems, techniques or extensions in specific areas of design data management <ref> [33, 46] </ref>, design meta-data management [14, 24, 34], and flow, process and tool management [12, 16, 18, 25, 43]. WELD, however, concentrates on providing reliable, scaleable connection and communication mechanisms for distributed users, tools and services.
Reference: [34] <author> J. Schubert, A Kunzmann and W. Rosentiel, </author> <title> "Reduced design time by load distribution with CAD framework and methodology information," </title> <booktitle> European Design Automation Conference with EURO-VHDL, </booktitle> <pages> pp. 314-319, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: However, our approach differs from others work 2 in a number of fundamental ways. Most of the past efforts in the area of CAD frameworks are involved in introducing new systems, techniques or extensions in specific areas of design data management [33, 46], design meta-data management <ref> [14, 24, 34] </ref>, and flow, process and tool management [12, 16, 18, 25, 43]. WELD, however, concentrates on providing reliable, scaleable connection and communication mechanisms for distributed users, tools and services. It also extends the traditional client/server model by treating both tools and data as potentially mobile components.
Reference: [35] <author> SEMATECH, </author> <note> http://www.sematech.org/member/division/ dsgn/ecad/home.htm. </note>
Reference-contexts: Working sets of modern VLSI designs, which approach two gigabytes of data today and will continue to grow, are forcing design teams to become larger and more distributed <ref> [35] </ref>, indicating a great need for a collaborative, distributed design system that is scaleable, adaptable, secure, highly available, and cost effective.
Reference: [36] <author> E. M. Sentovich et al., </author> <title> SIS: A System for Sequential Circuit Synthesis, </title> <type> Technical Report UCB/ERL M92/41, </type> <month> May </month> <year> 1992. </year>
Reference-contexts: Tools in the system in the 1997 DAC demonstration [7] included (1) simple programs, such as rwho, finger, email [27], (2) UC Berkeley CAD tools, including the Nova state optimization tool [30], VIS [44], SIS <ref> [36] </ref>, POLIS [32], and (3) a commercial CAD tool, the Synopsys Design Compiler [10]. Database Server Workflow Server Registry Service Tools Workflow Monitor Wrapper 1 Server Validation Results Storage Workflow Data Operation Request Result 2 4 The numbers indicate the flow of events during a workflow execution.
Reference: [37] <institution> The Silicon Integration Initiative (formerly the CAD Framework Initiative, CFI), </institution> <note> http://www.si2.org. </note>
Reference: [38] <author> M. J. Silva, </author> <title> Active Documentation for VLSI design, </title> <type> Ph.D. dissertation, </type> <note> available as Technical Report UCB/CSD-94-843, </note> <institution> UC Berkeley, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: platform-independent standards such as Java, sockets, proxies, and generic string-based communication protocols. 1 Security features can be layered upon the base WELD architecture. 2 A number of external efforts that are relevant to our research include the REUBEN system [26], CREW [8], the Design Agent system [3], and Active Documents <ref> [38] </ref>. 4 System Architecture Clients Network Services Remote Servers Data Manager Proxies Registry API Integrated WELD Commands/ Data Integrated Tools Services Browser Clients Generic Clients Wrapper The three-tier WELD architecture 3 (Figure 1) consists of: Remote Servers network-accessible tools or services.
Reference: [39] <author> M. D. Spiller and A. R. </author> <title> Newton, EDA and the Network, </title> <booktitle> Proceedings of the IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pp. 470-476, </pages> <month> November </month> <year> 1997. </year>
Reference-contexts: Specifically, we envision the entire EDA community organized as an integrated distributed environment <ref> [39] </ref> that offers users the ability to create an evolvable, customizable and adaptable virtual design system that can couple tools, libraries, design, and validation services. Beyond that, the system could also provide manufacturing, consulting, component acquisition, and product distribution, encompassing the developments of companies, universities, and individuals throughout the world.
Reference: [40] <author> M. D. Spiller, </author> <title> Architecture and Infrastructure for a Distributed Design Environment A Server Perspective, </title> <type> MS Report, </type> <institution> UC Berkeley, </institution> <month> November </month> <year> 1997. </year>
Reference-contexts: It utilizes the WELD client-database communication protocol to serialize and mirror Java object hierarchies to an objectoriented database server in the network. The data manager facilitates 3 The WELD architecture is covered in greater detail in <ref> [5, 40] </ref>. customizability in the addition of new message types as well as the transfer and translation of data between different tools. It is also accessible via multiple interfaces, including the WELD protocols and HTTP.
Reference: [41] <author> Mark D. </author> <note> Spillers research page, http://www-cad.eecs.berkeley.edu/~mds/research. </note>
Reference-contexts: The ClientServer Communication Protocol and Client-Database Communication Protocol are the mechanisms that enable these network entities to communicate with each other. 4.1 Server Infrastructure A Server Wrapper package <ref> [41] </ref> was implemented to provide an interface between normal UNIX applications and the WELD system, abstracting away the system internals from application integrators. Its network code allows programs to switch between the role of a client, server, and proxy in the WELD system. <p> Several applications that involved the construction, display, and partitioning of netlists were built upon this infrastructure. 6 5.2 The Distributed Workflow System The Distributed Workflow System <ref> [41] </ref> pulls together many of the WELD components developed, including the server wrapper, client packages, proxies, registry server, and data manager.
Reference: [42] <institution> The Vela Project, </institution> <note> http://www.cbl.ncsu.edu/vela/. </note>
Reference: [43] <author> I. Videira, P. Verissimo and H. Sarmento, </author> <title> "Efficient communication in a design environment," </title> <booktitle> Proceedings of the 33rd ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 169-174, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Most of the past efforts in the area of CAD frameworks are involved in introducing new systems, techniques or extensions in specific areas of design data management [33, 46], design meta-data management [14, 24, 34], and flow, process and tool management <ref> [12, 16, 18, 25, 43] </ref>. WELD, however, concentrates on providing reliable, scaleable connection and communication mechanisms for distributed users, tools and services. It also extends the traditional client/server model by treating both tools and data as potentially mobile components.
Reference: [44] <author> The VIS Group, </author> <title> VIS: A system for verification and synthesis, </title> <booktitle> Proceedings of the International Conference on Computer Aided Verifications, </booktitle> <pages> pp. 428-432, </pages> <month> November </month> <year> 1996. </year>
Reference-contexts: Tools in the system in the 1997 DAC demonstration [7] included (1) simple programs, such as rwho, finger, email [27], (2) UC Berkeley CAD tools, including the Nova state optimization tool [30], VIS <ref> [44] </ref>, SIS [36], POLIS [32], and (3) a commercial CAD tool, the Synopsys Design Compiler [10]. Database Server Workflow Server Registry Service Tools Workflow Monitor Wrapper 1 Server Validation Results Storage Workflow Data Operation Request Result 2 4 The numbers indicate the flow of events during a workflow execution.
Reference: [45] <institution> The DARPA Intelligent Collaboration & Visualization program (IC&V), </institution> <address> http://www.ito.darpa.mil/ ResearchAreas96/IntellCollabVisual.html. </address>
Reference-contexts: A high level view of the WELD architecture and its key components is introduced in Section 4 and results and experiences from our efforts are described in Section 5. 2 The WELD Project The goal of the WELD project is to pull together emerging technologies, such as network communications, visualization <ref> [45] </ref>, alternative interfaces, and new algorithmic approaches to design, to provide the basis for a next-generation EDA system.
Reference: [46] <author> F. R. Wagner, L. Golendziner, and M. R. Fornari, </author> <title> "A tightly coupled approach to design and data management," </title> <booktitle> European Design Automation Conference with EURO VHDL, </booktitle> <pages> pp. 194-199, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: However, our approach differs from others work 2 in a number of fundamental ways. Most of the past efforts in the area of CAD frameworks are involved in introducing new systems, techniques or extensions in specific areas of design data management <ref> [33, 46] </ref>, design meta-data management [14, 24, 34], and flow, process and tool management [12, 16, 18, 25, 43]. WELD, however, concentrates on providing reliable, scaleable connection and communication mechanisms for distributed users, tools and services.
Reference: [47] <author> The WELD Project, </author> <note> at http://www-cad.eecs.berkeley. edu/weld. </note>
Reference-contexts: In this paper we present an approach to the network infrastructure developed for such a distributed design system. The motivation and description of the WELD project <ref> [47] </ref> is given in Section 2. Comparisons to related work are documented in Section 3. <p> This component-based approach facilitates both the fragmentation of large data sets into manageable and transferable segments as well as the separation of sophisticated tools into logical components that can be run on either clients, servers, or proxies. While we are also involved in the development of EDA applications <ref> [47] </ref>, the goal of the work presented in this paper is to provide the enabling and enhancing mechanisms that leverage existing systems and toolkits.
Reference: [48] <author> P. van der Wolf, </author> <title> CAD Frameworks Principles and Arcitecture, </title> <publisher> Kluwer Publishers, </publisher> <address> Boston, </address> <year> 1994. </year>
Reference-contexts: In addition, Java clients allow for consistent and intuitive user interfaces and platform independence, thus reducing startup and training time. 3 Related Work Our architecture and infrastructure for a distributed design environment can be compared to CAD frameworks <ref> [17, 48] </ref>. Comparable features include: A design database distributed data manager and client object management package A design data manager versioning, security and meta-data handling capabilities A design process manager server wrapper and distributed workflow system. However, our approach differs from others work 2 in a number of fundamental ways.
Reference: [49] <institution> The WWW consortium, </institution> <note> http://www.w3.org/WWW/. </note>
Reference-contexts: The World Wide Web <ref> [49] </ref> today can be viewed as a bad multicomputer, which has all the possibilities for parallelization of a normal multiprocessor, but a great deal more uncertainty in the latency, performance, and consistency guarantees that are offered.
References-found: 49

