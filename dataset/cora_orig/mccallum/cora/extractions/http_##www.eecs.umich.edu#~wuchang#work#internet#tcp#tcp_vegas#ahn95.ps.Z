URL: http://www.eecs.umich.edu/~wuchang/work/internet/tcp/tcp_vegas/ahn95.ps.Z
Refering-URL: http://www.eecs.umich.edu/~wuchang/work/internet/
Root-URL: http://www.cs.umich.edu
Title: Evaluation of TCP Vegas: Emulation and Experiment  
Author: Jong Suk Ahn, Peter B. Danzig, Zhen Liu, and Limin Yan 
Web: http://excalibur.usc.edu/research/vegas/doc/vegas.html  
Address: Los Angeles, CA 90089-0781  
Affiliation: Computer Science Department University of Southern California  
Abstract: This paper explores the claims that TCP Vegas [2] both uses network bandwidth more efficiently and achieves higher network throughput than TCP Reno [6]. It explores how link bandwidth, network buffer capacity, TCP receiver acknowledgment algorithm, and degree of network congestion affect the relative performance of Vegas and Reno. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Lawrence Brakmo. </author> <title> TCP Vegas Release 0.8, </title> <address> Novem-ber 15, </address> <year> 1994. </year> <month> ftp://ftp.cs.arizona.edu/xkernel/new-protocols/Vegas.Tar.Z. </month>
Reference-contexts: In contrast to Brakmo's, our experiments employed native Reno transmitters and receivers running the Net-BSD-1.0 operating system [10]. Further, we did not run the native x-kernel TCP Vegas <ref> [1] </ref>; we used our port of it to SunOS 4.1.3. We conducted experiments on both an emulated wide-area network and on the live Internet.
Reference: [2] <author> Lawrence S. Brakmo, Sean W. O'Malley, and Larry. L. Peterson. </author> <title> TCP Vegas: New techniques for congestion detection and avoidance. </title> <booktitle> In Proceedings of ACM SIGCOMM '94, </booktitle> <pages> pages 24-35, </pages> <month> May, </month> <year> 1994. </year> <month> ftp://ftp.cs.arizona.edu/xkernel/Papers/vegas.ps. </month>
Reference-contexts: Since then, researchers have implemented the RFC 1323 extensions bigger TCP windows and time-stamped based rtt exchange to improve TCP performance over high bandwidth connections. The RFC 1323 extensions do not, however, implement congestion avoidance. Last year, Brakmo, O'Malley and Peterson <ref> [2] </ref> claimed that their sender-side congestion avoidance algorithm, dubbed TCP Vegas, yielded 40-70% better throughput while retransmitting 2-5 times fewer segments than TCP Reno, both in simulation and in live, wide-area Internet measurements. <p> Since path buffer capacity grows with hop count, the relative Vegas speedup increases with hop count. Path buffer capacity probably explains why we observed 20% speedup over our 9 hop path while Brakmo <ref> [2] </ref> observed 40% speedup over his 22 hop path. 6.3 Selective ack, Timeout Granularity, red Gateways Selective acknowledgments, which require cooperating TCP receivers, can eliminate the coarse grain timeouts caused by multiple packet losses in a single rtt. <p> Since Vegas requires changes to the TCP sender only, individuals can easily deploy it. Ubiquitously deploying RED gateways and/or selective acknowledgment TCP have a bit of inertia to overcome. 6.4 Summary This paper reproduced the claims about TCP Vegas made in <ref> [2] </ref>. Skepticism about Vegas is partially based on early descriptions of Vegas that were posted to the end-to-end e-mail list. At todays Internet bandwidths, Vegas offers improved throughput of at least 3-8% over Reno while reducing packet losses and subsequent retransmitted segments by a factor of 2 to 5.
Reference: [3] <author> Peter B. Danzig and Sugih Jamin. tcp-lib: </author> <title> A library of TCP/IP traffic characteristics. </title> <journal> USC Networking and Distributed Systems Laboratory TR CS-SYS-91-01, </journal> <month> October, </month> <year> 1991. </year> <month> ftp://catarina.usc.edu/pub/jamin/tcplib. </month>
Reference-contexts: Below, we draw conclusions about how Vegas and Reno share bandwidth. To create dynamic traffic, each sender looped between sleeping an exponentially distributed time and exchanging a heavy tailed distribution of bytes (drawn from the FTP file size distribution of our tcplib traffic library <ref> [3] </ref>). During some experiments, we also injected exponentially distributed 8 kb bursts of UDP traffic, as a terribly crude model of un-flow controlled, file system traffic. Table 1 contrasts Reno and Vegas average throughput and retransmitted bytes for thirty 512 kb transfers. The table shows eight different background traffic work-loads.
Reference: [4] <author> Sally Floyd. </author> <title> TCP and successive fast retrans-mits. </title> <address> ftp://ftp.ee.lbl.gov/papers/fastretrans.ps, </address> <month> February 24, </month> <year> 1995. </year>
Reference-contexts: The explanation for this is simple; Tahoe receivers do not immediately acknowledge out of sequence segments. 2 Floyd identifies situations where multiple packet drops can cost Reno several rtt to recover its pace <ref> [4] </ref>. Because they send at most one ack every 200ms, a Tahoe receiver returns too few duplicate acks for a Reno sender to invoke fast retransmission. Hence, as line R-T reveals, the sender experiences five, 2,000ms timeouts. Refer now to the V-R line of Figure 1.
Reference: [5] <author> Van Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> ACM SIGCOMM 88, </booktitle> <pages> pages 273-288, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction Jacobson released his TCP slow-start flow control algorithm <ref> [5] </ref> in the Tahoe distribution of bsd unix and revised it two years later for the Reno distribution [6]. Since then, researchers have implemented the RFC 1323 extensions bigger TCP windows and time-stamped based rtt exchange to improve TCP performance over high bandwidth connections.
Reference: [6] <author> Van Jacobson. </author> <title> Berkeley TCP Evolution from 4.3-Tahoe to 4.3-Reno. </title> <institution> Proceedings of the British Columbia Internet Engineering Task Force, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Jacobson released his TCP slow-start flow control algorithm [5] in the Tahoe distribution of bsd unix and revised it two years later for the Reno distribution <ref> [6] </ref>. Since then, researchers have implemented the RFC 1323 extensions bigger TCP windows and time-stamped based rtt exchange to improve TCP performance over high bandwidth connections. The RFC 1323 extensions do not, however, implement congestion avoidance.
Reference: [7] <author> Raj Jain. </author> <title> A delay-based approach for congestion avoidance in interconnected heterogeneous computer networks. </title> <journal> Computer Communication Review, </journal> <volume> 19(5) </volume> <pages> 56-71, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: In its third technique, Vegas halves the slow-start growth rate, to prevent packet loss and subsequent coarse grain time-outs as illustrated in the R-R line of Figure 1. 2.1 Congestion Avoidance Other researchers have proposed active congestion avoidance algorithms <ref> [7, 13, 8] </ref>, but not transformed them into working code. Congestion avoidance schemes aim to minimize packet drops yet not underutilize the network by being too conservative. Figure 4 contrasts the Vegas and Reno congestion avoidance schemes as captured during two separate 512kb transfers between USC and LBL. <p> Also notice how Reno suffers several timeouts while Vegas suffers none. A congestion avoidance scheme adjusts its window size according to some metric. Jain's Congestion Avoidance using Round trip Delay (CARD) <ref> [7] </ref> suggests a metric based on the shape of the throughput divided by rtt curve, which Jain calls Power. Wang's Tri-S scheme [13] uses a metric based on the derivative of the sending rate with respect to window size, dr=dw.
Reference: [8] <author> Srinivasan Keshav. </author> <title> A control-theoretic approach to flow control. </title> <booktitle> In Proceedings of ACM SIGCOMM '91, </booktitle> <pages> pages 3-15, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1991. </year> <note> ACM. </note>
Reference-contexts: In its third technique, Vegas halves the slow-start growth rate, to prevent packet loss and subsequent coarse grain time-outs as illustrated in the R-R line of Figure 1. 2.1 Congestion Avoidance Other researchers have proposed active congestion avoidance algorithms <ref> [7, 13, 8] </ref>, but not transformed them into working code. Congestion avoidance schemes aim to minimize packet drops yet not underutilize the network by being too conservative. Figure 4 contrasts the Vegas and Reno congestion avoidance schemes as captured during two separate 512kb transfers between USC and LBL.
Reference: [9] <author> Aleta Lapone, Nicholas Maxemchuk, and Henning Schulzrinne. </author> <title> The Bell Laboratories Network Emulator. </title> <type> Technical memorandum, </type> <institution> AT&T Bell Laboratories, </institution> <address> Murray Hill, New Jersey, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: Through link speeds of 1mb/s, hitbox faithfully emulates a packet switch. 4.3 Other Emulators We understand that a group at AT&T started but did not complete a wide-area network emulator out of Trans-puters <ref> [9] </ref>. We are unaware of software implementations of wide-area network emulators or of evaluation of flow control algorithms by live emulation.
Reference: [10] <institution> Netbsd 1.0 operating system source distribution. </institution> <month> ftp://gatekeeper.dec.com/pub/BSD/NetBSD. </month> <title> See http://excalibur.usc.edu/vegas/netbsd-patch for a necessary patch to the window resizing algorithm. </title>
Reference-contexts: In contrast to Brakmo's, our experiments employed native Reno transmitters and receivers running the Net-BSD-1.0 operating system <ref> [10] </ref>. Further, we did not run the native x-kernel TCP Vegas [1]; we used our port of it to SunOS 4.1.3. We conducted experiments on both an emulated wide-area network and on the live Internet.
Reference: [11] <editor> W. Richard Stevens. TCP/IP Illustrated, </editor> <volume> volume 1. </volume> <publisher> Addison Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Recall that the retransmission timeout is set to the average rtt plus 4 times its variance <ref> [11] </ref>. Since the rtt statistics are measured in 500ms granularity clock ticks, typical timeouts last 2,000ms. Refer back to the R-R line of Figure 1. Given the initial drop and subsequent timeout, Reno sets its congestion window threshold so that it can switch from exponential to linear growth.
Reference: [12] <author> Curtis Villamizar and Cheng Song. </author> <title> High performance TCP in ANSNET. </title> <journal> Computer Communication Review, </journal> <volume> 24(5) </volume> <pages> 45-61, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Alternatively, changing the granularity of the Reno coarse timer from 500ms to 200ms (which doesn't require cooperating receivers) would reduce the savings that Vegas obtains by decreasing the frequency of timeouts. Random Early Drop (RED) gateways <ref> [12] </ref> are another approach to TCP congestion avoidance. While implementing selective acknowledgments requires changing TCP receivers, RED gateways require changing network switches. The question of how RED gateways treat competing Reno and Vegas traffic deserves attention.
Reference: [13] <author> Zheng Wang and Jon Crowcroft. </author> <title> A new congestion control scheme: Slow start and search (Tri-S). </title> <journal> Computer Communication Review, </journal> <volume> 21(1) </volume> <pages> 32-43, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: In its third technique, Vegas halves the slow-start growth rate, to prevent packet loss and subsequent coarse grain time-outs as illustrated in the R-R line of Figure 1. 2.1 Congestion Avoidance Other researchers have proposed active congestion avoidance algorithms <ref> [7, 13, 8] </ref>, but not transformed them into working code. Congestion avoidance schemes aim to minimize packet drops yet not underutilize the network by being too conservative. Figure 4 contrasts the Vegas and Reno congestion avoidance schemes as captured during two separate 512kb transfers between USC and LBL. <p> A congestion avoidance scheme adjusts its window size according to some metric. Jain's Congestion Avoidance using Round trip Delay (CARD) [7] suggests a metric based on the shape of the throughput divided by rtt curve, which Jain calls Power. Wang's Tri-S scheme <ref> [13] </ref> uses a metric based on the derivative of the sending rate with respect to window size, dr=dw. In contrast, Vegas' congestion metric is an estimate of the amount of data buffered at network switches.
References-found: 13

