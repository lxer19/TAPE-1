URL: ftp://ftp.eecs.umich.edu/people/mathur/icmcs96.ps
Refering-URL: http://www.eecs.umich.edu/~mathur/
Root-URL: http://www.cs.umich.edu
Email: e-mail:fmathur, aprakashg@eecs.umich.edu  
Title: A Protocol Composition-Based Approach to QoS Control in Collaboration Systems  
Author: Amit G. Mathur and Atul Prakash 
Address: Ann Arbor, MI 48109-2122.  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan  
Abstract: This paper considers the problem of application-level QoS control in group collaboration systems. The QoS parameters considered, latency, jitter, packet-loss, and asynchrony, are controlled by the receiver. The QoS control is based on a novel protocol composition-based approach, wherein the protocol is modularized such that each module controls a single QoS parameter. Each module is then assigned a priority and the modules are composed such that the actions taken by a module do not violate a QoS parameter controlled by a higher priority module. This allows for more flexible QoS control. The performance of the approach is evaluated through experiments, which illustrate how the compositions are able to successfully tradeoff the QoS parameters in an appropriate manner. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Bolot. </author> <title> End-to-End Packet Delay and Loss Behavior in the Internet. </title> <booktitle> In Proc. of the ACM SIGCOMM Symp., </booktitle> <pages> pages 289-298, </pages> <address> Ithaca, NY, </address> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: The audio (and pointer-event packets) generated at the source window, were transported over the network, and delivered to the application at the receiver. The packets were subject to network load conditions similar to those observed on the Internet <ref> [1, 13, 15] </ref>. In particular, burstiness was introduced in the network delays (see Fig. 3). For repeatability of the experiments, the send and arrival times of packets were recorded in a file, and these were then used to compute the playback times for each of the protocol compositions.
Reference: [2] <author> S. Casner and S. Deering. </author> <title> First IETF Internet Au-diocast. </title> <journal> ACM SIGCOMM Computer Communication Review, </journal> <volume> 22(3) </volume> <pages> 92-97, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Some of the tasks for which synchronous collaboration has been found very useful include group design, editing, brainstorming, and data visualization. Recently a number of systems such as wb, vat, nevot, nv, ivs, and vic, have been used with a great deal of success for collaboration over the Internet <ref> [2] </ref>.
Reference: [3] <author> R. Cruz. </author> <title> A Calculus for Network Delay, Part I: Network Elements in Isolation. </title> <journal> IEEE Trans. on Information Theory, </journal> <volume> 37(1) </volume> <pages> 114-131, </pages> <year> 1991. </year>
Reference-contexts: The quality can be characterized by QoS parameters such as latency, jitter, packet-loss, asynchrony, and bit-rate. These parameters can be controlled at the network-level by appropriate packet-scheduling policies which bound packet delays (e.g. <ref> [3] </ref>), and at the application-level, by source rate control and by receiver playout buffer control. In this paper we are interested in application-level QoS control, and in particular the problem of managing the playout buffer at the receiver such that the specified QoS parameters are satisfied. <p> The approach thus is an application-level QoS control scheme. It can be used in conjunction with network-level QoS control schemes, which typically bound packet delays. Such schemes can result in very bursty packet arrivals at the receiver <ref> [3, 20] </ref>. By appropriately managing the playout buffer at the receiver, the burstiness can be smoothed out and packets can be delivered to the application earlier than worst-case bounded delays. 4.
Reference: [4] <author> A. Eleftheriadis, S. Pejhan, and D. Anastassiou. </author> <title> Algorithms and Performance Evaluation of the Xphone Multimedia Communication System. </title> <booktitle> In Proc. of ACM Multimedia 93, </booktitle> <pages> pages 311-320, </pages> <address> Anaheim, CA, </address> <month> Aug. </month> <year> 1993. </year>
Reference: [5] <author> J. Escobar, D. Deutsch, and C. Partridge. </author> <title> Flow Synchronization Protocol. </title> <booktitle> In Proc. IEEE Globecom, </booktitle> <pages> pages 1381-1387, </pages> <year> 1992. </year>
Reference: [6] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-Kernel: An architecture for implementing network protocols. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: For this trace, the PLJ composition has the fewest number of QoS violations. 6. Related Work Protocol composition has been used in other contexts as well. It was originally proposed for use with communication protocols such as TCP/IP and RPC in the x-Kernel system <ref> [6] </ref>. It was later used to compose group communication protocols in in the Consul system [12] and recently in the Horus System [19]. However, we are not aware of its use for QoS control.
Reference: [7] <author> Y. Ishibashi and S. Tasaka. </author> <title> A Synchronization Mechanism for Continuous Media in Multimedia Communications. </title> <booktitle> In Proc. IEEE Infocom, </booktitle> <address> Boston, MA, </address> <month> April </month> <year> 1995. </year>
Reference: [8] <author> V. Jacobson. </author> <title> Congestion Avoidance and Control. </title> <booktitle> In Proc. of the ACM SIGCOMM Symp., </booktitle> <pages> pages 314-329, </pages> <address> Stanford, CA, </address> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: Jitter Control Module The function of the Jitter control module is to determine an appropriate value for spurtLatcyNw such that packets can meet their jitter specification. It does this by maintaining a running average and variance of the network delay and using it to estimate spurtLatcyNw <ref> [8, 13] </ref>. The estimate is used to compute spurtLatcyNw for the first packet in the packet-spurt and is used for the rest of the packets in the packet-spurt. Latency Control Module The function of the Latency control module is to ensure that the LatencyMax requirement is met.
Reference: [9] <author> K. Jeffay, D. L. Stone, and F. D. Smith. </author> <title> Transport and Display Mechanisms for Multimedia Conferencing Across Packet-Switched Networks. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 26(10) </volume> <pages> 1281-1304, </pages> <month> July </month> <year> 1994. </year>
Reference: [10] <author> A. G. Mathur and A. Prakash. </author> <title> Protocols for Integrated Audio and Shared Windows in Collaborative Systems. </title> <booktitle> In Proc. of ACM Multimedia 94, </booktitle> <pages> pages 381-388, </pages> <address> San Francisco, CA, </address> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: Consider the situation where a user moves the pointer to draw attention to a part of the data being displayed and simultaneously talks about it. Lack of good synchronization between the playback of audio and the movement of the telepointer in a receiver's window can be highly confusing <ref> [10, 18] </ref>. Further, when both audio and video are present, there needs to be synchronization (lip-sync) between these two streams as well [18].
Reference: [11] <author> A. G. Mathur and A. Prakash. </author> <title> A Protocol Composition-Based Approach to QoS Control in Collaboration Systems. </title> <type> Technical Report CSE-TR-274-95, </type> <institution> U. of Michigan, </institution> <address> Ann Arbor, MI, </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Due to space considerations, we describe the results only for the audio stream. Results for two streams, particularly for managing the asynchrony are described in <ref> [11] </ref>. Audio was recorded (with silence detection) and played back using the SUN audio hardware (at 8KHz, 8-bit). The audio packet size used was 200 bytes, corresponding to about 25 ms of audio.
Reference: [12] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> Consul: A Communication Substrate for Fault-Tolerant Distributed Programs. </title> <journal> Distributed Systems Engineeer-ing Journal, </journal> <volume> 1(2) </volume> <pages> 87-103, </pages> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: Related Work Protocol composition has been used in other contexts as well. It was originally proposed for use with communication protocols such as TCP/IP and RPC in the x-Kernel system [6]. It was later used to compose group communication protocols in in the Consul system <ref> [12] </ref> and recently in the Horus System [19]. However, we are not aware of its use for QoS control.
Reference: [13] <author> R. Ramjee, J. Kurose, D. Towsley, and H. Schulzrinne. </author> <title> Adaptive Playout Mechanisms for Packetized Audio Applications in Wide-Area Networks. </title> <booktitle> In Proc. IEEE Infocom, </booktitle> <address> Toronto, Canada, </address> <year> 1994. </year>
Reference-contexts: Jitter Control Module The function of the Jitter control module is to determine an appropriate value for spurtLatcyNw such that packets can meet their jitter specification. It does this by maintaining a running average and variance of the network delay and using it to estimate spurtLatcyNw <ref> [8, 13] </ref>. The estimate is used to compute spurtLatcyNw for the first packet in the packet-spurt and is used for the rest of the packets in the packet-spurt. Latency Control Module The function of the Latency control module is to ensure that the LatencyMax requirement is met. <p> The audio (and pointer-event packets) generated at the source window, were transported over the network, and delivered to the application at the receiver. The packets were subject to network load conditions similar to those observed on the Internet <ref> [1, 13, 15] </ref>. In particular, burstiness was introduced in the network delays (see Fig. 3). For repeatability of the experiments, the send and arrival times of packets were recorded in a file, and these were then used to compute the playback times for each of the protocol compositions.
Reference: [14] <author> K. Rothermel and T. Helbig. </author> <title> An Adaptive Stream Synchronisation Protocol. </title> <booktitle> In Proc. 5th. Intl. Workshop on Networking and Operating System Support for Digital Audio and Video, </booktitle> <address> Durham, NH, </address> <month> April </month> <year> 1995. </year>
Reference: [15] <author> D. Sanghi, A. K. Agrawala, O. Gudmundsson, and B. Jain. </author> <title> Experimental Assessment of End-to-End Behavior on Internet. </title> <booktitle> In Proc. IEEE Infocom, </booktitle> <pages> pages 124-131, </pages> <address> San Francisco, CA, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: The audio (and pointer-event packets) generated at the source window, were transported over the network, and delivered to the application at the receiver. The packets were subject to network load conditions similar to those observed on the Internet <ref> [1, 13, 15] </ref>. In particular, burstiness was introduced in the network delays (see Fig. 3). For repeatability of the experiments, the send and arrival times of packets were recorded in a file, and these were then used to compute the playback times for each of the protocol compositions.
Reference: [16] <author> N. Shivakumar, C. Sreenan, B. Narendran, and P. Agrawal. </author> <title> The Concord Algorithm for Synchronization of Networked Multimedia Streams. </title> <booktitle> In Proc. IEEE Intl. Conf. on Multimedia, </booktitle> <address> Washington, D.C., </address> <year> 1995. </year>
Reference: [17] <author> M. Stefik, G. Foster, D. G. Bobrow, K. Kahn, S. Lan-ning, and L. Suchman. </author> <title> Beyond the Chalkboard: Computer Support for Collaboration and Problem Solving in Meetings. </title> <journal> Comm. of the ACM, </journal> <volume> 30(1) </volume> <pages> 32-47, </pages> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: Email, web browsers such as Mosaic and Netscape, and workflow technologies are examples of systems that support asynchronous collaboration. Synchronous collaboration, on the other hand, allows collaboration on a common task at the same time <ref> [17] </ref>. Some of the tasks for which synchronous collaboration has been found very useful include group design, editing, brainstorming, and data visualization.
Reference: [18] <author> R. Steinmetz. </author> <title> Human Perception of Jitter and Media Synchronization. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 14(1) </volume> <pages> 61-72, </pages> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: Jitter: Audio and video streams need to be delivered with low jitter in order to ensure continuous playback, while pointer-event streams can tolerate higher levels of jitter <ref> [18] </ref>. The acceptable level of jitter is specified in terms of the maximum number of gaps, GapsMax, allowed in the playback over a time period Tgaps. <p> Consider the situation where a user moves the pointer to draw attention to a part of the data being displayed and simultaneously talks about it. Lack of good synchronization between the playback of audio and the movement of the telepointer in a receiver's window can be highly confusing <ref> [10, 18] </ref>. Further, when both audio and video are present, there needs to be synchronization (lip-sync) between these two streams as well [18]. <p> Lack of good synchronization between the playback of audio and the movement of the telepointer in a receiver's window can be highly confusing [10, 18]. Further, when both audio and video are present, there needs to be synchronization (lip-sync) between these two streams as well <ref> [18] </ref>. The acceptable level of asynchrony is specified in terms of an interval AsyncInt, which specifies the amounts by which a the stream can be "ahead" or "behind" the stream with which it is being synchronized. 3.
Reference: [19] <author> R. van Renesse, T. M. Hickey, and K. P. Birman. </author> <title> Design and Performance of Horus: A Lightweight Group Communications System. </title> <type> Technical Report TR94-1442, </type> <institution> Computer Science Dept., Cornell University, </institution> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: It was originally proposed for use with communication protocols such as TCP/IP and RPC in the x-Kernel system [6]. It was later used to compose group communication protocols in in the Consul system [12] and recently in the Horus System <ref> [19] </ref>. However, we are not aware of its use for QoS control. Earlier work on QoS control involved picking a particular set of priorities for the various QoS parameters considered and then designing a protocol for this priority assignment ([5, 4, 9, 13, 14, 7, 16]).
Reference: [20] <author> Z. Wang and J. Crowcroft. </author> <title> Analysis of Burstiness and Jitter in Real-Time Communications. </title> <booktitle> In Proc. of the ACM SIGCOMM Symp., </booktitle> <pages> pages 13-19, </pages> <address> Ithaca, NY, </address> <month> Sept. </month> <year> 1993. </year> <title> Protocol composition Jitter Violations Latency Violations Packet-Loss Violations LPJP 0 0 89 PLJ 1 64 0 PJPL 1 99 0 JLP 0 0 89 Table 1. Number of QoS violations for each of the protocol compositions </title>
Reference-contexts: The approach thus is an application-level QoS control scheme. It can be used in conjunction with network-level QoS control schemes, which typically bound packet delays. Such schemes can result in very bursty packet arrivals at the receiver <ref> [3, 20] </ref>. By appropriately managing the playout buffer at the receiver, the burstiness can be smoothed out and packets can be delivered to the application earlier than worst-case bounded delays. 4.
References-found: 20

