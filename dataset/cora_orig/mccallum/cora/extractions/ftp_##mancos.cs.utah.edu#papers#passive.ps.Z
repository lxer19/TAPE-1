URL: ftp://mancos.cs.utah.edu/papers/passive.ps.Z
Refering-URL: http://www.cs.utah.edu/~baford/pub.html
Root-URL: 
Email: baford@cs.utah.edu, lepreau@cs.utah.edu  
Title: Microkernels Should Support Passive Objects  
Author: Bryan Ford Jay Lepreau 
Address: Salt Lake City, UT 84112 USA  
Affiliation: Department of Computer Science University of Utah  
Abstract: We believe that a passive object model, in which the active entities or threads migrate between passive objects, is more appropriate than an active object model, as the basic structure of a microkernel-based operating system. A passive object model provides enhanced performance and simplicity because it is more closely matched to the basic nature of microprocessors and the requirements of applications. It also provides more functionality by making the flow of control between objects a first-class abstraction which can be examined, manipulated, and used to carry information about the operation in progress. 1 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Brian N. Bershad, Thomas E. Anderson, Ed-ward D. Lazowska, and Henry M. Levy. </author> <title> Lightweight remote procedure call. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(1) </volume> <pages> 37-55, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: In an active model, this flow of control is represented explicitly as part of threads, easily visible to and usable by the microkernel. This permits well-known optimizations to control transfer, such as those described in LRPC <ref> [1] </ref> and numerous other optimizations in flexibly structured or shared address space systems e.g., Lipto [5], Opal [3] 2 , FLEX [2], and Mach In-Kernel Servers [8, 6]. Passive objects can be smaller and more lightweight, because they involve less storage overhead.
Reference: [2] <author> John B. Carter, Bryan Ford, Mike Hibler, Ravin-dra Kuramkote, Jeffrey Law, Jay Lepreau, Dou-glas B. Orr, Leigh Stoller, and Mark Swanson. </author> <title> FLEX: A tool for building efficient and flexible systems. </title> <booktitle> In Proc. Fourth Workshop on Workstation Operating Systems, </booktitle> <month> October </month> <year> 1993. </year> <note> To appear. </note>
Reference-contexts: This permits well-known optimizations to control transfer, such as those described in LRPC [1] and numerous other optimizations in flexibly structured or shared address space systems e.g., Lipto [5], Opal [3] 2 , FLEX <ref> [2] </ref>, and Mach In-Kernel Servers [8, 6]. Passive objects can be smaller and more lightweight, because they involve less storage overhead.
Reference: [3] <author> Jeffrey S. Chase, Henry M. Levy, Michael J. Fee-ley, and Edward D. Lazowska. </author> <title> Sharing and protection in a single address space operating system. </title> <type> Technical Report UW-CSE-93-04-02, </type> <institution> University of Washington Computer Science Department, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: This permits well-known optimizations to control transfer, such as those described in LRPC [1] and numerous other optimizations in flexibly structured or shared address space systems e.g., Lipto [5], Opal <ref> [3] </ref> 2 , FLEX [2], and Mach In-Kernel Servers [8, 6]. Passive objects can be smaller and more lightweight, because they involve less storage overhead.
Reference: [4] <author> Roger S. Chin and Samuel T. Chanson. </author> <title> Distributed object-based programming systems. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(1), </volume> <month> March </month> <year> 1991. </year>
Reference-contexts: 1 Introduction A subject of controversy in the object-oriented world is the choice of an active or passive object model <ref> [4] </ref>. In the active model, an object, or collection of data, has associated with it a private set of threads, or active execution contexts, which manipulate its data. To communicate, threads in active objects send messages to threads in other objects.
Reference: [5] <author> Peter Druschel, Larry L. Peterson, and Norman C. Hutchinson. </author> <title> Beyond micro-kernel design: De-coupling modularity and protection in Lipto. </title> <booktitle> In Proc. of the 12th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 512-520, </pages> <address> Yoko-hama, Japan, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: This permits well-known optimizations to control transfer, such as those described in LRPC [1] and numerous other optimizations in flexibly structured or shared address space systems e.g., Lipto <ref> [5] </ref>, Opal [3] 2 , FLEX [2], and Mach In-Kernel Servers [8, 6]. Passive objects can be smaller and more lightweight, because they involve less storage overhead.
Reference: [6] <author> Bryan Ford, Mike Hibler, and Jay Lepreau. </author> <title> Notes on thread models in Mach 3.0. </title> <type> Technical Report UUCS-93-012, </type> <institution> University of Utah Computer Science Department, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: This permits well-known optimizations to control transfer, such as those described in LRPC [1] and numerous other optimizations in flexibly structured or shared address space systems e.g., Lipto [5], Opal [3] 2 , FLEX [2], and Mach In-Kernel Servers <ref> [8, 6] </ref>. Passive objects can be smaller and more lightweight, because they involve less storage overhead.
Reference: [7] <author> Bryan Ford and Jay Lepreau. </author> <title> Evolving Mach 3.0 to use migrating threads. </title> <type> Technical Report UUCS-93-022, </type> <institution> University of Utah, </institution> <month> August </month> <year> 1993. </year> <note> A portion of this paper will appear in Proc. of the Winter 1994 USENIX Conference. </note>
Reference-contexts: With proper design, even this right can be revoked or transferred back into the client object in a way that fully maintains the protection of both the server and the client. Our work on supporting migrating threads on Mach <ref> [7] </ref> demonstrates how this can be done. "The migration of threads violates encapsulation. Objects should be independent." This suggests a vision of self-sufficient islands of computation floating within an abstract sea of nothingness, using only their own resources and relying on nothing else. <p> For the most part, applications merely see passive objects as faster and more flexible versions of active objects. This is demonstrated in <ref> [7] </ref>, in which active objects are replaced with passive objects in an existing system, in a backward-compatible way, with no changes to clients and only minor changes to servers. 4 Conclusion As a fundamental execution model for microkernels, passive objects provide more functionality, simplicity, and speed than active objects, without giving
Reference: [8] <author> Jay Lepreau, Mike Hibler, Bryan Ford, and Jeff Law. </author> <title> In-kernel servers on Mach 3.0: Implementation and performance. </title> <booktitle> In Proc. of the Third USENIX Mach Symposium, </booktitle> <pages> pages 39-55, </pages> <address> Santa Fe, NM, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: This permits well-known optimizations to control transfer, such as those described in LRPC [1] and numerous other optimizations in flexibly structured or shared address space systems e.g., Lipto [5], Opal [3] 2 , FLEX [2], and Mach In-Kernel Servers <ref> [8, 6] </ref>. Passive objects can be smaller and more lightweight, because they involve less storage overhead.
References-found: 8

