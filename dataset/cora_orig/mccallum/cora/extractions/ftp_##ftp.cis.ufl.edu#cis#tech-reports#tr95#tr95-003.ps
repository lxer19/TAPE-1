URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr95/tr95-003.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr95-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: Designing a Distributed Queue  
Author: Theodore Johnson 
Keyword: Distributed Queue, Distributed Data Structure, Scheduling, Performance Analysis, Scientific Computing.  
Affiliation: Dept. of Computer and Information Science University of Florida  
Abstract: A common paradigm for distributed computing is the producer-consumer model. One set of processes produce objects that are consumed by another set of processes. These objects might be data, resources, or tasks. We present a simple algorithm for implementing a distributed queue. This algorithm has several parameters that need to be tuned, such as the number of probes to find an object, the amount of buffering, and the connectivity between the producers and the consumers. We provide an analytical model that predicts performance, and based on the analytical model we provide recommendations for setting the parameters. Our analytical model is validated by a comparison to simulation results. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G.R. Andrews. </author> <booktitle> Concurrent Programming Principles and Practice. </booktitle> <address> Benjamin/Cummings, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction A common paradigm for distributed computing is the producer-consumer model <ref> [2, 1, 5] </ref>. The Linda parallel programming language [4] has constructions to allow the easy implementation of shared queues. Other examples include Marionette [13] and Workcrews [16]. In addition, producer-consumer relations are often used in parallel scheduling algorithms [6, 7].
Reference: [2] <author> G.R. Andrews. </author> <title> Paradigms for process interaction in distributed programs. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(1) </volume> <pages> 49-90, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction A common paradigm for distributed computing is the producer-consumer model <ref> [2, 1, 5] </ref>. The Linda parallel programming language [4] has constructions to allow the easy implementation of shared queues. Other examples include Marionette [13] and Workcrews [16]. In addition, producer-consumer relations are often used in parallel scheduling algorithms [6, 7].
Reference: [3] <author> P. Avery, C. Chegireddy, J. Brothers, T. Johnson, J. Kasaraneni, and K. Harathi. </author> <title> The ufmulti project. </title> <booktitle> In Int'l Conf. on Computing in High Energy Physics, </booktitle> <pages> pages 156-164, </pages> <year> 1994. </year>
Reference-contexts: The Linda parallel programming language [4] has constructions to allow the easy implementation of shared queues. Other examples include Marionette [13] and Workcrews [16]. In addition, producer-consumer relations are often used in parallel scheduling algorithms [6, 7]. The primary motivation for this work is the UFMulti project <ref> [3, 14] </ref>, a distributed processing system for High Energy Physics. HEP research requires the processing of billions of experimental observations (or events) to find the events that contain interesting information [12].
Reference: [4] <author> N. Carriero, D. Gelernter, and J. Leichter. </author> <title> Distributed data structures in linda. </title> <booktitle> In Proc. ACM Symp. on Principles and Practice of Programming Languages, </booktitle> <pages> pages 236-242, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction A common paradigm for distributed computing is the producer-consumer model [2, 1, 5]. The Linda parallel programming language <ref> [4] </ref> has constructions to allow the easy implementation of shared queues. Other examples include Marionette [13] and Workcrews [16]. In addition, producer-consumer relations are often used in parallel scheduling algorithms [6, 7]. <p> Each event 1 group is connected by a queue abstraction, which we call Netqueues in the UFMulti system. We are using the research reported in this paper to implement a fully distributed Netqueue. Some work has been done to implement distributed queues <ref> [4, 13, 16, 6, 7, 10] </ref>. Manber [11] proposed concurrent pools, a shared memory equivalent of a distributed queue. Kotz and Ellis [9] made a performance evaluation of the performance of concurrent pools.
Reference: [5] <author> R. Finkel and U. Manber. </author> <title> DIB a distributed implementation of backtracking. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 9(2) </volume> <pages> 235-256, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction A common paradigm for distributed computing is the producer-consumer model <ref> [2, 1, 5] </ref>. The Linda parallel programming language [4] has constructions to allow the easy implementation of shared queues. Other examples include Marionette [13] and Workcrews [16]. In addition, producer-consumer relations are often used in parallel scheduling algorithms [6, 7].
Reference: [6] <author> L. George. </author> <title> A scheduling strategy for shared memory multiprocessors. </title> <booktitle> In Int'l Conf. on Parallel Programming, </booktitle> <pages> pages I:67-71, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction A common paradigm for distributed computing is the producer-consumer model [2, 1, 5]. The Linda parallel programming language [4] has constructions to allow the easy implementation of shared queues. Other examples include Marionette [13] and Workcrews [16]. In addition, producer-consumer relations are often used in parallel scheduling algorithms <ref> [6, 7] </ref>. The primary motivation for this work is the UFMulti project [3, 14], a distributed processing system for High Energy Physics. HEP research requires the processing of billions of experimental observations (or events) to find the events that contain interesting information [12]. <p> Each event 1 group is connected by a queue abstraction, which we call Netqueues in the UFMulti system. We are using the research reported in this paper to implement a fully distributed Netqueue. Some work has been done to implement distributed queues <ref> [4, 13, 16, 6, 7, 10] </ref>. Manber [11] proposed concurrent pools, a shared memory equivalent of a distributed queue. Kotz and Ellis [9] made a performance evaluation of the performance of concurrent pools.
Reference: [7] <author> S.F. Hummel and E. Schonberg. </author> <title> Low-overhead scheduling of nested parallelism. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 35(5) </volume> <pages> 743-765, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction A common paradigm for distributed computing is the producer-consumer model [2, 1, 5]. The Linda parallel programming language [4] has constructions to allow the easy implementation of shared queues. Other examples include Marionette [13] and Workcrews [16]. In addition, producer-consumer relations are often used in parallel scheduling algorithms <ref> [6, 7] </ref>. The primary motivation for this work is the UFMulti project [3, 14], a distributed processing system for High Energy Physics. HEP research requires the processing of billions of experimental observations (or events) to find the events that contain interesting information [12]. <p> Each event 1 group is connected by a queue abstraction, which we call Netqueues in the UFMulti system. We are using the research reported in this paper to implement a fully distributed Netqueue. Some work has been done to implement distributed queues <ref> [4, 13, 16, 6, 7, 10] </ref>. Manber [11] proposed concurrent pools, a shared memory equivalent of a distributed queue. Kotz and Ellis [9] made a performance evaluation of the performance of concurrent pools.
Reference: [8] <author> A.R. Karlin and E. Upfal. </author> <title> Parallel hashing: An efficient implementation of shared memory. </title> <journal> J. ACM, </journal> <volume> 35(4) </volume> <pages> 876-892, </pages> <year> 1988. </year>
Reference-contexts: Kotz and Ellis [9] made a performance evaluation of the performance of concurrent pools. The idea of a concurrent pool or a distributed queue is related to techniques for emulating shared memory with a message passing system <ref> [15, 8] </ref>. In this paper, we present a simple stochastic distributed queue algorithm. This algorithm has features in common with previously proposed algorithms.
Reference: [9] <author> D. Kotz and C.S. Ellis. </author> <title> Evaluation of concurrent pools. </title> <booktitle> In Proc. Int'l. Conf. on Distributed Computing Systems, </booktitle> <pages> pages 378-385, </pages> <year> 1989. </year>
Reference-contexts: We are using the research reported in this paper to implement a fully distributed Netqueue. Some work has been done to implement distributed queues [4, 13, 16, 6, 7, 10]. Manber [11] proposed concurrent pools, a shared memory equivalent of a distributed queue. Kotz and Ellis <ref> [9] </ref> made a performance evaluation of the performance of concurrent pools. The idea of a concurrent pool or a distributed queue is related to techniques for emulating shared memory with a message passing system [15, 8]. In this paper, we present a simple stochastic distributed queue algorithm.
Reference: [10] <author> P.N. Lee, Y. Chen, and J.M. Holdman. DRISP: </author> <title> A versitile scheme for distributed fault-tolerant queues. </title> <booktitle> In Proc. Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pages 600-607, </pages> <year> 1991. </year>
Reference-contexts: Each event 1 group is connected by a queue abstraction, which we call Netqueues in the UFMulti system. We are using the research reported in this paper to implement a fully distributed Netqueue. Some work has been done to implement distributed queues <ref> [4, 13, 16, 6, 7, 10] </ref>. Manber [11] proposed concurrent pools, a shared memory equivalent of a distributed queue. Kotz and Ellis [9] made a performance evaluation of the performance of concurrent pools.
Reference: [11] <author> U. Manber. </author> <title> On maintaining dynamic information in a concurrent environment. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(4) </volume> <pages> 1130-1142, </pages> <year> 1986. </year>
Reference-contexts: Each event 1 group is connected by a queue abstraction, which we call Netqueues in the UFMulti system. We are using the research reported in this paper to implement a fully distributed Netqueue. Some work has been done to implement distributed queues [4, 13, 16, 6, 7, 10]. Manber <ref> [11] </ref> proposed concurrent pools, a shared memory equivalent of a distributed queue. Kotz and Ellis [9] made a performance evaluation of the performance of concurrent pools.
Reference: [12] <author> F.J. </author> <title> Rinaldo and M.R. Fausey. Event reconstruction in high energy physics. </title> <booktitle> Computer, </booktitle> <pages> pages 68-87, </pages> <year> 1993. </year>
Reference-contexts: The primary motivation for this work is the UFMulti project [3, 14], a distributed processing system for High Energy Physics. HEP research requires the processing of billions of experimental observations (or events) to find the events that contain interesting information <ref> [12] </ref>. For example, the recent discovery of the sixth quark at Fermilab required the processing of several billion events to find the twelve instances when the sixth quark was definitely observed. HEP processing is easily parallelizable because each event can be processed independently.
Reference: [13] <author> M. Sullivan and D. Anderson. Marionette: </author> <title> A system for parallel distributed progamming using a master/slave model. </title> <booktitle> In Proc. 9th Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pages 181-187, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction A common paradigm for distributed computing is the producer-consumer model [2, 1, 5]. The Linda parallel programming language [4] has constructions to allow the easy implementation of shared queues. Other examples include Marionette <ref> [13] </ref> and Workcrews [16]. In addition, producer-consumer relations are often used in parallel scheduling algorithms [6, 7]. The primary motivation for this work is the UFMulti project [3, 14], a distributed processing system for High Energy Physics. <p> Each event 1 group is connected by a queue abstraction, which we call Netqueues in the UFMulti system. We are using the research reported in this paper to implement a fully distributed Netqueue. Some work has been done to implement distributed queues <ref> [4, 13, 16, 6, 7, 10] </ref>. Manber [11] proposed concurrent pools, a shared memory equivalent of a distributed queue. Kotz and Ellis [9] made a performance evaluation of the performance of concurrent pools.
Reference: [14] <institution> UFMulti Distributed Toolkit. </institution> <note> http://www.phys.ufl.edu/~ufm. </note>
Reference-contexts: The Linda parallel programming language [4] has constructions to allow the easy implementation of shared queues. Other examples include Marionette [13] and Workcrews [16]. In addition, producer-consumer relations are often used in parallel scheduling algorithms [6, 7]. The primary motivation for this work is the UFMulti project <ref> [3, 14] </ref>, a distributed processing system for High Energy Physics. HEP research requires the processing of billions of experimental observations (or events) to find the events that contain interesting information [12].
Reference: [15] <author> E. Upfal and A. Wigderson. </author> <title> How to share memory in a distributed system. </title> <journal> J. ACM, </journal> <volume> 34(1) </volume> <pages> 116-127, </pages> <year> 1987. </year>
Reference-contexts: Kotz and Ellis [9] made a performance evaluation of the performance of concurrent pools. The idea of a concurrent pool or a distributed queue is related to techniques for emulating shared memory with a message passing system <ref> [15, 8] </ref>. In this paper, we present a simple stochastic distributed queue algorithm. This algorithm has features in common with previously proposed algorithms.
Reference: [16] <author> M.T. Vandevoorde and E.S. Roberts. Workcrews: </author> <title> An abstraction for controlling parallelism. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 17(4) </volume> <pages> 347-366, </pages> <year> 1988. </year> <month> 19 </month>
Reference-contexts: 1 Introduction A common paradigm for distributed computing is the producer-consumer model [2, 1, 5]. The Linda parallel programming language [4] has constructions to allow the easy implementation of shared queues. Other examples include Marionette [13] and Workcrews <ref> [16] </ref>. In addition, producer-consumer relations are often used in parallel scheduling algorithms [6, 7]. The primary motivation for this work is the UFMulti project [3, 14], a distributed processing system for High Energy Physics. <p> Each event 1 group is connected by a queue abstraction, which we call Netqueues in the UFMulti system. We are using the research reported in this paper to implement a fully distributed Netqueue. Some work has been done to implement distributed queues <ref> [4, 13, 16, 6, 7, 10] </ref>. Manber [11] proposed concurrent pools, a shared memory equivalent of a distributed queue. Kotz and Ellis [9] made a performance evaluation of the performance of concurrent pools.
References-found: 16

