URL: http://www.cs.jhu.edu/~shavitt/pub/masplas.ps
Refering-URL: http://www.cs.jhu.edu/~shavitt/pub.html
Root-URL: http://www.cs.jhu.edu
Email: e-mail: shavitt@cs.jhu.edu  e-mail: osnaty@tx.technion.ac.il  
Title: Code Optimization by Reducing the Number of Stack Restoration Commands  
Author: Yuval Shavitt Osnat Yehieli 
Address: Baltimore, MD 21218-2691  Haifa 32000, ISRAEL  
Affiliation: Department of Computer Science Johns Hopkins University,  Department of Electrical Engineering Technion Israel Institute of Technology,  
Abstract: This paper addresses the problem of optimizing code by reducing the number of stack restoration commands. The optimization is done on the assembler translation of each function and thus can be applied to various compilers. This leads us into the following graph theory problem: for a given node s in a general digraph find a node t s.t. every path that starts from s ends in t, and every path that ends in t starts in s. We give an algorithm that solves the graph problem in O(jEj) time complexity, where jEj is the number of edges in the graph. The optimization problem is solved in O(k jEj) time complexity, where k is the number of basic blocks with stack translation commands in the assembler translation of a function.
Abstract-found: 1
Intro-found: 1
Reference: [ASU86] <author> Alfred V. Aho, Ravi Sethi, and Jeffrey D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: We associate each block with a non-negative integer value that represents the number by which the stack is incremented in this block. The assembly translation is represented by a Control Flow Graph (CFG) <ref> [ASU86] </ref>. The CFG is a digraph G (V,E), where V is the set of blocks, and e = (v; u) 2 E V fi V iff there is a possibility that block u will be executed immediately after block v. Optimization can be done using the following transformations: 1.
Reference: [CLR90] <author> Thomas H. Corman, Charles E. Leiserson, and Ronald L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Lengauer and Tarjan [LT79] find dominator trees in O (jEjlog jV j) operations or in O (jEjff (jEj; jV j)) operations for a more sophisticated algorithm, where ff (m; n) is the functional inverse of Ackerman's function <ref> [CLR90] </ref>. For the case where jEj &lt; O (jV j log jV j) it improves the previous algorithm by Tarjan [Tar74]. Wegman's algorithm [Weg83] can be also used to find dominator trees. However, for general digraphs it might require O (jV j 3 ) operations.
Reference: [LT79] <author> Thomas Lengauer and Robert Endre Tarjan. </author> <title> A fast algorithm for finding dominators in a flowgraph. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 1(1):121 - 141, </volume> <month> July </month> <year> 1979. </year> <note> Presented at MASPLAS'97, </note> <institution> East Stoudsburg, PA, USA, </institution> <note> April 12th, 1997. 8 </note>
Reference-contexts: Tarjan [Tar74] showed how dominator trees can be built in O (jV j log jV j + jEj) operations. Lengauer and Tarjan <ref> [LT79] </ref> find dominator trees in O (jEjlog jV j) operations or in O (jEjff (jEj; jV j)) operations for a more sophisticated algorithm, where ff (m; n) is the functional inverse of Ackerman's function [CLR90].
Reference: [Tar74] <author> Robert Tarjan. </author> <title> Finding dominators in directed graphs. </title> <journal> SIAM Journal on Computing, </journal> <volume> 3(1):62 - 89, </volume> <month> March </month> <year> 1974. </year>
Reference-contexts: Tarjan <ref> [Tar74] </ref> showed how dominator trees can be built in O (jV j log jV j + jEj) operations. <p> For the case where jEj &lt; O (jV j log jV j) it improves the previous algorithm by Tarjan <ref> [Tar74] </ref>. Wegman's algorithm [Weg83] can be also used to find dominator trees. However, for general digraphs it might require O (jV j 3 ) operations. In practice, we believe that the search for the sink should be depth limited.
Reference: [Weg83] <author> Mark Wegman. </author> <title> Summerizing graphs by regular expressions. </title> <booktitle> In 10th Sym. on Principles of Programming Languages, </booktitle> <pages> pages 203 - 216. </pages> <publisher> ACM, </publisher> <year> 1983. </year>
Reference-contexts: For the case where jEj &lt; O (jV j log jV j) it improves the previous algorithm by Tarjan [Tar74]. Wegman's algorithm <ref> [Weg83] </ref> can be also used to find dominator trees. However, for general digraphs it might require O (jV j 3 ) operations. In practice, we believe that the search for the sink should be depth limited.
References-found: 5

