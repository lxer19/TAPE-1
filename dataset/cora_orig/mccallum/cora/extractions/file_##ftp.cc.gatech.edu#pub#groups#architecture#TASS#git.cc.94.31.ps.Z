URL: file://ftp.cc.gatech.edu/pub/groups/architecture/TASS/git.cc.94.31.ps.Z
Refering-URL: http://www.cs.gatech.edu/computing/Architecture/TASS/tass.html
Root-URL: 
Email: e-mail: rama@cc.gatech.edu  
Phone: Phone: (404) 894-5136 Fax: (404) 894-9442  
Title: Synthesizing Network Requirements Using Parallel Scientific Applications  
Author: Anand Sivasubramaniam Aman Singla Umakishore Ramachandran H. Venkateswaran 
Keyword: Key Words: Interconnection Networks, Latency, Contention, Execution-driven Simulation, Application-driven Study.  
Note: This work has been funded in part by NSF grants MIPS-9058430 and MIPS-9200005, and an equipment grant from DEC.  
Address: Atlanta, GA 30332-0280  
Affiliation: College of Computing Georgia Institute of Technology  
Abstract: Technical Report GIT-CC-94/31 July 1994 Abstract We synthesize the link bandwidth requirement for a binary hypercube topology using a set of five scientific applications. We use an execution-driven simulator called SPASM to collect data points for system sizes that are feasible to be simulated. These data points are then used in a regression analysis for projecting the link bandwidth requirements for larger systems. These requirements are projected as a function of the following system parameters: number of processors, CPU clock speed, and problem size. These results are also used to project the link bandwidths for other network topologies. A significant contribution of our study is in quantifying the link bandwidth that has to be made available to tolerate a given amount of network overhead in an application. Our results show that typical link bandwidths (200-300 MBytes/sec) found in current commercial parallel architectures (such as Intel Paragon and Cray T3D) would have fairly low network overhead for the scientific applications considered in this study. For two of the applications, this overhead is negligible. For the other applications, this overhead is about 30% of the execution time provided the problem sizes are increased commensurate with the processor clock speed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. S. Adve and M. K. Vernon. </author> <title> Performance analysis of mesh interconnection networks with deterministic routing. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 5(3) </volume> <pages> 225-246, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: The results suggest that low-dimensional networks are preferred (based on physical and technological constraints) when the network contention is ignored or when the workload (the application) exhibits sufficient network locality; and that higher dimensional networks may be needed otherwise. Adve and Vernon <ref> [1] </ref> show using analytical models that network locality has an important role to play in the performance of the mesh. Since network requirements are sensitive to the workload, it is necessary to study them in the context of real applications. <p> Such a projection assumes that the communication in an application is devoid of any network locality and that each message crosses the bisection. But we know that applications normally tend to exploit network locality and the projection can thus become very pessimistic <ref> [1] </ref>. With a little knowledge about the communication behavior of applications, one may be able to reduce the degree of pessimism. In both FFT and IS, every processor communicates with every other processor, and thus only 50% of the messages cross the bisection.
Reference: [2] <author> A. Agarwal. </author> <title> Limits on Interconnection Network Performance. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 2(4) </volume> <pages> 398-412, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Hence, in order to quantify requirements that limit network overheads (latency and contention) to an acceptable level, it is necessary to study the impact of link bandwidth and network connectivity on these overheads. Dally [10] and Agarwal <ref> [2] </ref> present analytical models to study the impact of network connectivity and link bandwidth for k-ary n-cube networks. <p> The cube represents a highly scalable network where the bisection bandwidth grows linearly with the number of processors. Even though cubes of 1024 nodes have been built [13], cost and technology factors often play an important role in its physical realization. Agarwal <ref> [2] </ref> and Dally [10] show that wire delays (due to increased wire lengths associated with planar layouts) of higher dimensional networks make low dimensional networks more viable.
Reference: [3] <editor> R. Alverson et al. </editor> <booktitle> The Tera Computer System. In Proceedings of the ACM 1990 International Conference on Supercomputing, </booktitle> <pages> pages 1-6, </pages> <address> Amsterdam, Netherlands, </address> <year> 1990. </year>
Reference-contexts: Agarwal [2] and Dally [10] show that wire delays (due to increased wire lengths associated with planar layouts) of higher dimensional networks make low dimensional networks more viable. The 2-dimensional [17] and 3-dimensional <ref> [19, 3] </ref> toroids are common topologies used in current day networks, and it would be interesting to project link bandwidth requirements for these topologies. A metric that is often used to compare different networks is the cross-section bandwidth available per processor.
Reference: [4] <author> T. E. Anderson. </author> <title> The Performance of Spin Lock Alternatives for Shared-Memory Multiprocessors. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(1) </volume> <pages> 6-16, </pages> <month> January </month> <year> 1990. </year>
Reference: [5] <author> D. Bailey et al. </author> <title> The NAS Parallel Benchmarks. </title> <journal> International Journal of Supercomputer Applications, </journal> <volume> 5(3) </volume> <pages> 63-73, </pages> <year> 1991. </year>
Reference-contexts: We use the results from the hypercube study in hypothesizing the requirements for other networks using analytical techniques coupled with application knowledge. We have chosen five parallel scientific applications in this study. Three of the applications (EP, IS and CG) are from the NAS parallel benchmark suite <ref> [5] </ref>; CHOLESKY is from the SPLASH benchmark suite [25]; and FFT is the well-known Fast Fourier Transform algorithm. EP and FFT are well-structured applications with regular communication patterns determinable at compile-time, with the difference that EP has a higher computation to communication ratio. <p> As a result, the bandwidth requirements are expected to decrease linearly with problem size. Given that real world problem sizes for this application are of the order of n = 2 28 <ref> [5] </ref>, a very low link bandwidth (less than 1 MByte/sec) would suffice to yield an efficiency close to 100%. IS IS is more communication intensive than EP and its bandwidth requirements are expected to be considerably higher. <p> Using these results, the bandwidth requirements for IS are projected in Table 6 for a 1024 node system and a problem size of 2 23 that is representative of a real world problem <ref> [5] </ref>. This table shows that bandwidth requirements of IS are considerably high. We may at best be able to operate currently at around 50% network overhead range with 33 MHz processors given that link bandwidth of state-of-the-art networks is around 200-300 MBytes/sec. <p> There is also a decreased probability of reusing a fetched data item for computing another row. These complicated interactions are to a large extent dependent on the input data and are difficult to analyze statically. We use the data sets supplied with the NAS benchmarks <ref> [5] </ref>. The results from our simulation are given in Table 11. We observe that the effect of lower local computation, and lesser data reuse has a more significant impact in increasing the communication requirements for larger systems. <p> Table 13 shows the requirements for two different problem sizes. For the 1400 fi 1400 problem, the sparsity factor is 0.04, while the sparsity factor for the 5600 fi 5600 problem is 0.02. The corresponding factor for the 14000 fi 14000 problem suggested in <ref> [5] </ref> is 0.1 and we scale down the bandwidth requirements accordingly in Table 14 for a 1024 node system. The results suggest that we may be able to limit the overheads to within 50% of the execution time with existing technology.
Reference: [6] <author> E. A. Brewer, C. N. Dellarocas, A. Colbrook, and W. E. Weihl. </author> <title> PROTEUS : A high-performance parallel-architecture simulator. </title> <type> Technical Report MIT-LCS-TR-516, </type> <institution> Massachusetts Institute of Technology, </institution> <address> Cambridge, MA 02139, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: These programs are preprocessed 1 The term, parallel system, is used to denote an application-architecture combination. 2 (to label shared memory accesses), the compiled assembly code is augmented with cycle counting instructions, and the assembled binary is linked with the simulator code. As with other recent simulators <ref> [6, 11, 7, 21] </ref>, bulk of the instructions is executed at the speed of the native processor (the SPARC in this case) and only instructions (such as LOADs and STOREs on a shared memory platform or SENDs and RECEIVEs on a message-passing platform) that may potentially involve a network access are
Reference: [7] <author> R. G. Covington, S. Madala, V. Mehta, J. R. Jump, and J. B. Sinclair. </author> <title> The Rice parallel processing testbed. </title> <booktitle> In Proceedings of the ACM SIGMETRICS 1988 Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 4-11, </pages> <address> Santa Fe, NM, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: These programs are preprocessed 1 The term, parallel system, is used to denote an application-architecture combination. 2 (to label shared memory accesses), the compiled assembly code is augmented with cycle counting instructions, and the assembled binary is linked with the simulator code. As with other recent simulators <ref> [6, 11, 7, 21] </ref>, bulk of the instructions is executed at the speed of the native processor (the SPARC in this case) and only instructions (such as LOADs and STOREs on a shared memory platform or SENDs and RECEIVEs on a message-passing platform) that may potentially involve a network access are
Reference: [8] <author> D. Culler et al. </author> <title> LogP : Towards a realistic model of parallel computation. </title> <booktitle> In Proceedings of the 4th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <pages> pages 1-12, </pages> <month> May </month> <year> 1993. </year>
Reference: [9] <author> R. Cypher, A. Ho, S. Konstantinidou, and P. Messina. </author> <title> Architectural requirements of parallel scientific applications with explicit communication. </title> <booktitle> In Proceedings of the 20th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 2-13, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Since network requirements are sensitive to the workload, it is necessary to study them in the context of real applications. The RISC ideology clearly illustrates the importance of using real applications in synthesizing architectural requirements. Several researchers have used this approach for parallel architectural studies <ref> [22, 9, 15] </ref>. Cypher et al. [9] use a range of scientific applications in quantifying the processing, memory, communication and I/O requirements. They present the communication requirements in terms of the number of messages exchanged between processors and the volume (size) of these messages. <p> The RISC ideology clearly illustrates the importance of using real applications in synthesizing architectural requirements. Several researchers have used this approach for parallel architectural studies [22, 9, 15]. Cypher et al. <ref> [9] </ref> use a range of scientific applications in quantifying the processing, memory, communication and I/O requirements. They present the communication requirements in terms of the number of messages exchanged between processors and the volume (size) of these messages. <p> As identified in [24], communication in parallel applications may be categorized by the following attributes: communication volume, the communication pattern, the communication frequency and the ability to overlap communication with computation. A static analysis of the communication as conducted in <ref> [9] </ref> fails to capture the last two attributes, making it very difficult to quantify the contention in the system. The importance of simulation in capturing the dynamics of parallel system 1 behavior has been clearly illustrated in [14, 24, 26].
Reference: [10] <author> W. J. Dally. </author> <title> Performance analysis of k-ary n-cube interconnection networks. </title> <journal> IEEE Transactions on Computer Systems, </journal> <volume> 39(6) </volume> <pages> 775-785, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Hence, in order to quantify requirements that limit network overheads (latency and contention) to an acceptable level, it is necessary to study the impact of link bandwidth and network connectivity on these overheads. Dally <ref> [10] </ref> and Agarwal [2] present analytical models to study the impact of network connectivity and link bandwidth for k-ary n-cube networks. <p> The cube represents a highly scalable network where the bisection bandwidth grows linearly with the number of processors. Even though cubes of 1024 nodes have been built [13], cost and technology factors often play an important role in its physical realization. Agarwal [2] and Dally <ref> [10] </ref> show that wire delays (due to increased wire lengths associated with planar layouts) of higher dimensional networks make low dimensional networks more viable.
Reference: [11] <author> H. Davis, S. R. Goldschmidt, and J. L. Hennessy. </author> <title> Multiprocessor Simulation and Tracing Using Tango. </title> <booktitle> In Proceedings of the 1991 International Conference on Parallel Processing, </booktitle> <pages> pages II 99-107, </pages> <year> 1991. </year>
Reference-contexts: These programs are preprocessed 1 The term, parallel system, is used to denote an application-architecture combination. 2 (to label shared memory accesses), the compiled assembly code is augmented with cycle counting instructions, and the assembled binary is linked with the simulator code. As with other recent simulators <ref> [6, 11, 7, 21] </ref>, bulk of the instructions is executed at the speed of the native processor (the SPARC in this case) and only instructions (such as LOADs and STOREs on a shared memory platform or SENDs and RECEIVEs on a message-passing platform) that may potentially involve a network access are
Reference: [12] <author> A. Gupta and V. Kumar. </author> <title> The scalability of FFT on parallel computers. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(8) </volume> <pages> 922-932, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Hence, 7 in projecting the requirements for a 1024-node system, link bandwidths of around 100-150 MBytes/sec would suffice to limit the network overheads to less than 10% of the execution time (see Table 10). The results shown in the above tables agree with theoretical results presented in <ref> [12] </ref> where the authors show that FFT is scalable on the cube topology and the achievable efficiency is only limited by the ratio of the CPU clock speed and the link bandwidth.
Reference: [13] <author> J. L. Gustafson, G. R. Montry, and R. E. Benner. </author> <title> Development of Parallel Methods for a 1024-node Hypercube. </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 9(4) </volume> <pages> 609-638, </pages> <year> 1988. </year> <month> 11 </month>
Reference-contexts: All of the above link bandwidth results have been presented for the binary hypercube network topology. The cube represents a highly scalable network where the bisection bandwidth grows linearly with the number of processors. Even though cubes of 1024 nodes have been built <ref> [13] </ref>, cost and technology factors often play an important role in its physical realization. Agarwal [2] and Dally [10] show that wire delays (due to increased wire lengths associated with planar layouts) of higher dimensional networks make low dimensional networks more viable.
Reference: [14] <author> W. B. Ligon III and U. Ramachandran. </author> <title> Simulating interconnection networks in RAW. </title> <booktitle> In Proceedings of the Seventh International Parallel Processing Symposium, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: A static analysis of the communication as conducted in [9] fails to capture the last two attributes, making it very difficult to quantify the contention in the system. The importance of simulation in capturing the dynamics of parallel system 1 behavior has been clearly illustrated in <ref> [14, 24, 26] </ref>. In particular, using an execution-driven simulation, one can faithfully capture all the attributes of communication that are important to network requirements synthesis. <p> The importance of simulation in capturing the dynamics of parallel system 1 behavior has been clearly illustrated in [14, 24, 26]. In particular, using an execution-driven simulation, one can faithfully capture all the attributes of communication that are important to network requirements synthesis. For example, in <ref> [14] </ref> the authors use an execution-driven simulator to study k-ary n-cube networks in the context of applications drawn from image understanding, and show the impact of application characteristics on the choice of the network topology. We take a similar approach to deriving the network requirements in this study. <p> Tolerance is the ability of an application to hide network overheads by overlapping computation with communication. Modeling all these attributes of communication in a parallel application is extremely difficult by simple static analysis. Further, the dynamic access patterns exhibited by many applications makes modeling more complex. Several researchers <ref> [24, 26, 14] </ref> have observed that simulation and profiling tools are useful for capturing the communication behavior of applications.
Reference: [15] <author> W. B. Ligon III and U. Ramachandran. </author> <title> Evaluating multigauge architectures for computer vision. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 21 </volume> <pages> 323-333, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Since network requirements are sensitive to the workload, it is necessary to study them in the context of real applications. The RISC ideology clearly illustrates the importance of using real applications in synthesizing architectural requirements. Several researchers have used this approach for parallel architectural studies <ref> [22, 9, 15] </ref>. Cypher et al. [9] use a range of scientific applications in quantifying the processing, memory, communication and I/O requirements. They present the communication requirements in terms of the number of messages exchanged between processors and the volume (size) of these messages.
Reference: [16] <author> Intel Corporation, </author> <title> Oregon. Paragon User's Guide, </title> <year> 1993. </year>
Reference-contexts: Using regression analysis and analytical techniques, we extrapolate requirements for larger systems of 1024 processors and other network topologies. The results suggest that existing link bandwidth of 200-300 MBytes/sec available on machines like Intel Paragon <ref> [16] </ref> and Cray T3D [19] can easily sustain the requirements of two applications (EP and FFT) even on high-speed processors of the future. For the other three, one may be able to maintain network overheads at an acceptable level if the problem size is increased commensurate with the processing speed. <p> Using regression analysis and analytical techniques, we projected requirements for large scale parallel systems with 1024 processors and other network topologies. The results show that existing link bandwidth of 200-300 MBytes/sec available on machines like Intel Paragon <ref> [16] </ref> and Cray T3D [19] can sustain high speed applications with fairly low network overhead. For applications like EP and FFT, this overhead is negligible. For the other applications, this overhead is about 30% of the execution time provided the problem sizes are increased commensurate with the processor clock speed. 10
Reference: [17] <author> D. Lenoski, J. Laudon, K. Gharachorloo, W-D Weber, A. Gupta, J. Hennessy, M. Horowitz, and M. S. Lam. </author> <title> The Stanford DASH multiprocessor. </title> <journal> IEEE Computer, </journal> <volume> 25(3) </volume> <pages> 63-79, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Agarwal [2] and Dally [10] show that wire delays (due to increased wire lengths associated with planar layouts) of higher dimensional networks make low dimensional networks more viable. The 2-dimensional <ref> [17] </ref> and 3-dimensional [19, 3] toroids are common topologies used in current day networks, and it would be interesting to project link bandwidth requirements for these topologies. A metric that is often used to compare different networks is the cross-section bandwidth available per processor.
Reference: [18] <institution> Microelectronics and Computer Technology Corporation, Austin, TX 78759. </institution> <note> CSIM User's Guide, </note> <year> 1990. </year>
Reference-contexts: In this study, we use an execution-driven simulator called SPASM (Simulator for Parallel Architectural Scalability Measurements) that enables us to accurately model the behavior of applications on a number of simulated hardware platforms. SPASM has been written using CSIM <ref> [18] </ref>, a process oriented sequential simulation package, and currently runs on SPARCstations. The input to the simulator are parallel applications written in C.
Reference: [19] <author> W. Oed. </author> <title> The Cray Research Massively Parallel Processor System Cray T3D, </title> <year> 1993. </year>
Reference-contexts: Using regression analysis and analytical techniques, we extrapolate requirements for larger systems of 1024 processors and other network topologies. The results suggest that existing link bandwidth of 200-300 MBytes/sec available on machines like Intel Paragon [16] and Cray T3D <ref> [19] </ref> can easily sustain the requirements of two applications (EP and FFT) even on high-speed processors of the future. For the other three, one may be able to maintain network overheads at an acceptable level if the problem size is increased commensurate with the processing speed. <p> Agarwal [2] and Dally [10] show that wire delays (due to increased wire lengths associated with planar layouts) of higher dimensional networks make low dimensional networks more viable. The 2-dimensional [17] and 3-dimensional <ref> [19, 3] </ref> toroids are common topologies used in current day networks, and it would be interesting to project link bandwidth requirements for these topologies. A metric that is often used to compare different networks is the cross-section bandwidth available per processor. <p> Using regression analysis and analytical techniques, we projected requirements for large scale parallel systems with 1024 processors and other network topologies. The results show that existing link bandwidth of 200-300 MBytes/sec available on machines like Intel Paragon [16] and Cray T3D <ref> [19] </ref> can sustain high speed applications with fairly low network overhead. For applications like EP and FFT, this overhead is negligible. For the other applications, this overhead is about 30% of the execution time provided the problem sizes are increased commensurate with the processor clock speed. 10
Reference: [20] <author> U. Ramachandran, G. Shah, S. Ravikumar, and J. Muthukumarasamy. </author> <title> Scalability study of the KSR-1. </title> <booktitle> In Proceedings of the 1993 International Conference on Parallel Processing, </booktitle> <pages> pages I-237-240, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: On the other hand, if the number of buckets is maintained constant, it may be possible to sustain bandwidth requirements by increasing the problem size linearly with the processing speed. In <ref> [20] </ref>, the authors show that the applications EP, IS, and CG scale well on a 32-node KSR-1. In our study, we use the same implementations of these applications to synthesize the network requirements. <p> In our study, we use the same implementations of these applications to synthesize the network requirements. Although our results suggest that these applications may incur overheads affecting their scalability, this does not contradict the results presented in <ref> [20] </ref> since the implications of our study are for larger systems built with much faster processors. All of the above link bandwidth results have been presented for the binary hypercube network topology. The cube represents a highly scalable network where the bisection bandwidth grows linearly with the number of processors.
Reference: [21] <author> S. K. Reinhardt et al. </author> <title> The Wisconsin Wind Tunnel : Virtual prototyping of parallel computers. </title> <booktitle> In Proceedings of the ACM SIGMETRICS 1993 Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 48-60, </pages> <address> Santa Clara, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: These programs are preprocessed 1 The term, parallel system, is used to denote an application-architecture combination. 2 (to label shared memory accesses), the compiled assembly code is augmented with cycle counting instructions, and the assembled binary is linked with the simulator code. As with other recent simulators <ref> [6, 11, 7, 21] </ref>, bulk of the instructions is executed at the speed of the native processor (the SPARC in this case) and only instructions (such as LOADs and STOREs on a shared memory platform or SENDs and RECEIVEs on a message-passing platform) that may potentially involve a network access are
Reference: [22] <author> E. Rothberg, J. P. Singh, and A. Gupta. </author> <title> Working sets, cache sizes and node granularity issues for large-scale multiprocessors. </title> <booktitle> In Proceedings of the 20th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 14-25, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Since network requirements are sensitive to the workload, it is necessary to study them in the context of real applications. The RISC ideology clearly illustrates the importance of using real applications in synthesizing architectural requirements. Several researchers have used this approach for parallel architectural studies <ref> [22, 9, 15] </ref>. Cypher et al. [9] use a range of scientific applications in quantifying the processing, memory, communication and I/O requirements. They present the communication requirements in terms of the number of messages exchanged between processors and the volume (size) of these messages. <p> Each node in the system has a piece of the globally shared memory and a 2-way set-associative private cache (64KBytes with 32 byte blocks). The cache is maintained sequentially consistent using an invalidation-based fully-mapped directory-based cache coherence scheme. Rothberg et al. <ref> [22] </ref> show that a cache of moderate size (64KBytes) suffices to capture the working set in many applications, and Wood et al. [29] show that the network traffic generated is 2 Efficiency is defined as speedup (p)=p where p is the number of processors.
Reference: [23] <institution> SAS Institute Inc., Cary, </institution> <address> NC 27512. </address> <note> SAS/STAT User's Guide, </note> <year> 1988. </year>
Reference-contexts: In cases where such a static analysis is not possible (due to the dynamic nature of the execution), we perform a non-linear regression analysis of the simulation results using a multivariate secant method with a 95% confidence interval in the SAS <ref> [23] </ref> statistics package.
Reference: [24] <author> J. P. Singh, E. Rothberg, and A. Gupta. </author> <title> Modeling communication in parallel algorithms: </title> <booktitle> A fruitful interaction between theory and systems? In Proceedings of the Sixth Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <year> 1994. </year>
Reference-contexts: Cypher et al. [9] use a range of scientific applications in quantifying the processing, memory, communication and I/O requirements. They present the communication requirements in terms of the number of messages exchanged between processors and the volume (size) of these messages. As identified in <ref> [24] </ref>, communication in parallel applications may be categorized by the following attributes: communication volume, the communication pattern, the communication frequency and the ability to overlap communication with computation. <p> A static analysis of the communication as conducted in [9] fails to capture the last two attributes, making it very difficult to quantify the contention in the system. The importance of simulation in capturing the dynamics of parallel system 1 behavior has been clearly illustrated in <ref> [14, 24, 26] </ref>. In particular, using an execution-driven simulation, one can faithfully capture all the attributes of communication that are important to network requirements synthesis. <p> an overview of our methodology and details of the simulation platform; section 3 briefly describes the hardware platform and applications used in this study; section 4 presents results from our experiments; section 5 summarizes the implication of these results; and section 6 presents concluding remarks. 2 Methodology As observed in <ref> [24] </ref>, communication in an application may be characterized by four attributes. Volume refers to the number and size of messages. The communication pattern in the application determines the source-destination pairs for the messages, and reflects on the application's ability to exploit network locality. <p> Tolerance is the ability of an application to hide network overheads by overlapping computation with communication. Modeling all these attributes of communication in a parallel application is extremely difficult by simple static analysis. Further, the dynamic access patterns exhibited by many applications makes modeling more complex. Several researchers <ref> [24, 26, 14] </ref> have observed that simulation and profiling tools are useful for capturing the communication behavior of applications.
Reference: [25] <author> J. P. Singh, W-D. Weber, and A. Gupta. </author> <title> SPLASH: Stanford Parallel Applications for Shared-Memory. </title> <type> Technical Report CSL-TR-91-469, </type> <institution> Computer Systems Laboratory, Stanford University, </institution> <year> 1991. </year>
Reference-contexts: We have chosen five parallel scientific applications in this study. Three of the applications (EP, IS and CG) are from the NAS parallel benchmark suite [5]; CHOLESKY is from the SPLASH benchmark suite <ref> [25] </ref>; and FFT is the well-known Fast Fourier Transform algorithm. EP and FFT are well-structured applications with regular communication patterns determinable at compile-time, with the difference that EP has a higher computation to communication ratio.
Reference: [26] <author> A. Sivasubramaniam, A. Singla, U. Ramachandran, and H. Venkateswaran. </author> <title> An Approach to Scalability Study of Shared Memory Parallel Systems. </title> <booktitle> In Proceedings of the ACM SIGMETRICS 1994 Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 171-180, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: A static analysis of the communication as conducted in [9] fails to capture the last two attributes, making it very difficult to quantify the contention in the system. The importance of simulation in capturing the dynamics of parallel system 1 behavior has been clearly illustrated in <ref> [14, 24, 26] </ref>. In particular, using an execution-driven simulation, one can faithfully capture all the attributes of communication that are important to network requirements synthesis. <p> We take a similar approach to deriving the network requirements in this study. Using an execution-driven simulation platform called SPASM <ref> [27, 26] </ref>, we simulate the execution of five scientific applications on an architectural platform with a binary hypercube network topology. We vary the link bandwidth on the hypercube and quantify its impact on application performance. <p> Tolerance is the ability of an application to hide network overheads by overlapping computation with communication. Modeling all these attributes of communication in a parallel application is extremely difficult by simple static analysis. Further, the dynamic access patterns exhibited by many applications makes modeling more complex. Several researchers <ref> [24, 26, 14] </ref> have observed that simulation and profiling tools are useful for capturing the communication behavior of applications. <p> The reader is referred to <ref> [27, 26] </ref> for a detailed description of SPASM where we illustrated its use in studying the scalability of a number of parallel applications on different shared memory [26] and message-passing [27] platforms. <p> The reader is referred to [27, 26] for a detailed description of SPASM where we illustrated its use in studying the scalability of a number of parallel applications on different shared memory <ref> [26] </ref> and message-passing [27] platforms. The input parameters that may be specified to SPASM are the number of processors, the CPU clock speed, the network topology, the link bandwidth and switching delays. We can thus vary a range of system parameters and study their impact on application performance. <p> The algorithmic overhead (arising from factors such as the serial part and work-imbalance in the algorithm) and the network overheads (latency and contention) are the important overheads that are of relevance to this study. The profiling capabilities of SPASM (outlined in <ref> [26] </ref>) provide a novel isolation and quantification of these overheads that contribute to the performance of the parallel system. It gives the total time (simulated time) which is the maximum of the running times of the individual parallel processors. <p> Hence, in both these phases, the communication is expected to grow as O (p) with increase in processors. Further, the computation performed by a processor decreases with an increase in processors, but the rate is less than linear owing to algorithmic deficiencies in the problem <ref> [26] </ref>. These factors combine to yield a considerable bandwidth requirement for larger systems (see Table 3), if we are willing to tolerate less than 10% network overheads. As the CPU clock speed is increased, the computation to communication ratio decreases, making the requirements more stringent as shown in Table 4.
Reference: [27] <author> A. Sivasubramaniam, A. Singla, U. Ramachandran, and H. Venkateswaran. </author> <title> A Simulation-based Scalability Study of Parallel Systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <note> 1994. To appear. </note>
Reference-contexts: We take a similar approach to deriving the network requirements in this study. Using an execution-driven simulation platform called SPASM <ref> [27, 26] </ref>, we simulate the execution of five scientific applications on an architectural platform with a binary hypercube network topology. We vary the link bandwidth on the hypercube and quantify its impact on application performance. <p> The reader is referred to <ref> [27, 26] </ref> for a detailed description of SPASM where we illustrated its use in studying the scalability of a number of parallel applications on different shared memory [26] and message-passing [27] platforms. <p> The reader is referred to [27, 26] for a detailed description of SPASM where we illustrated its use in studying the scalability of a number of parallel applications on different shared memory [26] and message-passing <ref> [27] </ref> platforms. The input parameters that may be specified to SPASM are the number of processors, the CPU clock speed, the network topology, the link bandwidth and switching delays. We can thus vary a range of system parameters and study their impact on application performance.
Reference: [28] <author> H. Sullivan and T. R. Bashkow. </author> <title> A large scale, homogenous, </title> <booktitle> fully-distributed parallel machine. In Proceedings of the 4th Annual Symposium on Computer Architecture, </booktitle> <pages> pages 105-117, </pages> <month> March </month> <year> 1977. </year> <month> 12 </month>
Reference-contexts: The synchronization primitive supported in hardware is a test-and-set operation and applications use a test-test-and-set to implement higher level synchronization. The study is conducted for a binary hypercube interconnect. The hypercube is assumed to have serial (1-bit wide) unidirectional links and uses the e-cube routing algorithm <ref> [28] </ref>. Messages are circuit-switched using a wormhole routing strategy and the switching delay is assumed to be zero. Ideally, we would like to simulate other networks as well in order to study the change in link bandwidth requirements with network connectivity.
Reference: [29] <author> D. A. Wood et al. </author> <title> Mechanisms for cooperative shared memory. </title> <booktitle> In Proceedings of the 20th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 156-167, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: The cache is maintained sequentially consistent using an invalidation-based fully-mapped directory-based cache coherence scheme. Rothberg et al. [22] show that a cache of moderate size (64KBytes) suffices to capture the working set in many applications, and Wood et al. <ref> [29] </ref> show that the network traffic generated is 2 Efficiency is defined as speedup (p)=p where p is the number of processors.

References-found: 29

