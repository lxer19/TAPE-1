URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr95/tr95-026.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr95-abstracts.html
Root-URL: http://www.cis.ufl.edu
Abstract-found: 0
Intro-found: 1
Reference: [AMC93] <author> E. Anwar, L. Maugis, and S. Chakravarthy. </author> <title> A New Perspective on Rule Support for Object-Oriented Databases. </title> <booktitle> In Proceedings, International Conference on Management of Data, </booktitle> <pages> pages 99-108, </pages> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Event detectors receive events from reactive objects, store them along with their parameters, and use them to detect primitive and complex events. In the following paragraphs we briefly outline the implementation of the Reactive, Notifiable, Event and Rule classes. The reader is referred to <ref> [AMC93] </ref> for a detailed implementation of these classes. The Reactive Class: The public interface of the Reactive class consists of methods by which objects acquire reactive capabilities.
Reference: [ASRS92] <author> P. Attie, M. Singh, M. Rusinkiewicz, and A. Sheth. </author> <title> Specifying and enforcing intertask dependencies. </title> <type> Technical Report MCC Report: </type> <institution> Carnot-245-92, Microelectronica and Computer Technology Corporation, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: TI's Open OODB prototype has taken this approach for supporting various services [WBT92, OOD93] but have not addressed the transaction model issues. 2 * Carnot <ref> [ASRS92] </ref> has taken the approach of providing a general specification facility that enables the formalization of most of the proposed transaction models that can be stated in terms of dependencies amongst significant events in different subtransactions.
Reference: [Bad93] <author> R. Badani. </author> <title> Nested Transactions for Concurrent Execution of Rules: Design and Implementation. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> Gainesville, FL 32611, </address> <month> October </month> <year> 1993. </year>
Reference: [BDG + 94] <author> A. Biliris, S. Dar, N. Gehani, H. V. Jagadish, and K. Ramamritham. </author> <title> ASSET: A System for Supporting Extended Transactions. </title> <booktitle> In Proceedings, International Conference on Management of Data, </booktitle> <pages> pages 44-54, </pages> <address> Minneapolis, Minnesota, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: CTL (Computational Tree Logic) is used for the specification and an actor based implementation has been used for implementing task dependencies. * ASSET <ref> [BDG + 94] </ref> identifies a set of primitives using which a number of extended transaction models can be realized. <p> Provide a set of transaction primitives that allow users to define custom transaction semantics to match the needs of specific applications. This alternative assumes that the underlying DBMS supports some transaction model. This approach is taken in ASSET <ref> [BDG + 94] </ref>. The user either directly uses these primitives or high-level notations (in the form of syntactic sugar) which are subsequently translated into the primitives supported by the system. <p> This example illustrates the ease and the flexibility for supporting arbitrary transaction semantics using Sentinel. 5 Conclusions Before presenting our concluding remarks and future directions for research we give a brief overview of some related work. 5.1 Related Work ASSET <ref> [BDG + 94] </ref> is a system that provides a set of transaction primitives that allows users to define customized transaction semantics in applications. Transaction primitives are classified into basic and new primitives. <p> For example, an arc of type commit from transaction t i to transaction t j denotes a commit dependency between the two transactions. For a detailed discussion of how the primitives and these data structures interact we refer the reader to <ref> [BDG + 94] </ref>. 5.2 Summary and Future Directions In this paper, we have argued for the use of the active database paradigm at the systems level to support flexible transaction models. We proposed several alternative ways in which this can be accomplished and discussed their relative merits.
Reference: [Bla94] <author> Jose A. Blakeley. </author> <title> Open Object Database Management Systems. </title> <booktitle> In Proceedings, International Conference on Management of Data, </booktitle> <pages> page 520, </pages> <address> Minneapolis, Minnesota, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: some of them have been incorporated into research prototypes although commercial DBMSs incorporate very few of these research results [Moh94]. * Object services architecture (OSA) is a software architecture consisting of a collection of independent (orthogonal) software services, all of which operate via a software backplane or message passing bus <ref> [Bla94] </ref>.
Reference: [BOH + ] <author> A. Buchmann, M. T. Ozsu, M. Hornick, D. Georgakopoulos, and F. Manola. </author> <title> A Trans--action Model for Active Distributed Object Systems. </title>
Reference-contexts: To overcome the limitations of the conventional transactions, a number of advanced or extended transaction models, such as nested transactions, Sagas, ConTract model, Flex transaction model, DOM transaction model etc. have been proposed in the literature <ref> [Mos81, GMS87, Reu89, ELLR90, BOH + ] </ref>. Some of these models relax the ACID properties in a specific manner to better model the processing requirements of a class of applications in terms of parallelism, consistency and serializability. <p> A compensating transaction can commit only if its corresponding component transaction commits but the saga to which it belongs aborts. Due to their ACID properties, component transactions make their changes to objects effective in the database at their commitment times. 3.3 DOM Transaction Model The DOM <ref> [BOH + ] </ref> transaction model consists of building blocks from which more complex transactions can be constructed.
Reference: [CBM91] <author> S. Chakravarthy and R. Blanco-Mora. </author> <title> Supporting very large production systems using active dbms abstraction. </title> <type> Technical Report UF-CIS TR-91-25, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> Sep. </month> <year> 1991. </year>
Reference: [CG91] <author> S. Chakravarthy and S. Garg. </author> <title> Extended relational algebra (era): for optimizing situations in active databases. </title> <type> Technical Report UF-CIS TR-91-24, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> Nov. </month> <year> 1991. </year>
Reference: [Cha91] <author> S. Chakravarthy. </author> <title> Active Database Management Systems: Requirements, State-Of-The-Art, and an Evaluation. </title> <editor> In H. Kangassalo, editor, </editor> <booktitle> Entity-Relationship Approach: The Core of Conceptual Modeling, </booktitle> <pages> pages 461-473. </pages> <publisher> Elsevier Science Publishers, North-Holland, </publisher> <year> 1991. </year>
Reference: [CKAK94] <author> S. Chakravarthy, V. Krishnaprasad, E. Anwar, and S.-K. Kim. </author> <title> Composite Events for Active Databases: Semantics, Contexts, and Detection. </title> <booktitle> In Proceedings, International Conference on Very Large Data Bases, </booktitle> <pages> pages 606-617, </pages> <month> August </month> <year> 1994. </year>
Reference: [CKTB94] <author> S. Chakravarthy, V. Krishnaprasad, Z. Tamizuddin, and R. Badani. </author> <title> ECA Rule Integration into an OODBMS: Architecture and Implementation. </title> <type> Technical Report UF-CIS-TR-94-023, </type> <institution> University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> Feb. </month> <year> 1994. </year> <note> (In ICDE-95, </note> <institution> Taiwan, </institution> <month> March </month> <year> 1995.). </year>
Reference: [CM91] <author> S. Chakravarthy and D. Mishra. </author> <title> An event specification language (snoop) for active databases and its detection. </title> <type> Technical Report UF-CIS TR-91-23, </type> <institution> University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> Sep. </month> <year> 1991. </year>
Reference: [CM94] <author> S. Chakravarthy and D. Mishra. Snoop: </author> <title> An Expressive Event Specification Language for Active Databases. </title> <journal> Data and Knowledge Engineering, </journal> <volume> 14(10) </volume> <pages> 1-26, </pages> <month> October </month> <year> 1994. </year>
Reference: [CR90] <author> P. K. Chrysanthis and K. Ramamtitham. </author> <title> Acta: A framework for specifying and reasoning about transaction structure and behavior. </title> <booktitle> In Proceedings, International Conference on Management of Data, </booktitle> <pages> pages 194-203, </pages> <year> 1990. </year>
Reference-contexts: Implementation of the primitives has been sketched. * ACTA <ref> [CR90] </ref> proposed a framework for specifying, analyzing, and synthesizing extended transaction models using dependencies. * A proposal for supporting advanced transaction models by extending current transaction monitors' capability [Moh94].
Reference: [ELLR90] <author> A. Elmagarmid, Y. Leu, W. Litwin, and M. Rusinkiewicz. </author> <title> A multidatabase transaction model for Interbase. </title> <booktitle> In Proceedings of International Conference of Very Large Data Bases, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: To overcome the limitations of the conventional transactions, a number of advanced or extended transaction models, such as nested transactions, Sagas, ConTract model, Flex transaction model, DOM transaction model etc. have been proposed in the literature <ref> [Mos81, GMS87, Reu89, ELLR90, BOH + ] </ref>. Some of these models relax the ACID properties in a specific manner to better model the processing requirements of a class of applications in terms of parallelism, consistency and serializability.
Reference: [GMS87] <author> H. Garcia-Molina and K. Salem. Sagas. </author> <booktitle> In Proceedings of the Conference on Database Systems in Office, Technique and Science, </booktitle> <pages> pages 249-259, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: To overcome the limitations of the conventional transactions, a number of advanced or extended transaction models, such as nested transactions, Sagas, ConTract model, Flex transaction model, DOM transaction model etc. have been proposed in the literature <ref> [Mos81, GMS87, Reu89, ELLR90, BOH + ] </ref>. Some of these models relax the ACID properties in a specific manner to better model the processing requirements of a class of applications in terms of parallelism, consistency and serializability. <p> For example, nested transactions [Mos85] allow subtransactions to fail independently of their respective parent transactions. This is appropriate for long transactions since the effects of failures is localized to parts of a transaction. Similarly, Sagas <ref> [GMS87] </ref>, when compared to the traditional transaction model, relaxes the isolation and consistency properties thereby alleviating the problems caused by the all or nothing situation enforced by conventional transactions. Several extensions to the conventional transaction model have been proposed in the literature to serve different application requirements. <p> When a transaction aborts, all its locks are discarded. If any of its superiors hold a lock on the same object, they continue to do so. 3.2 Sagas Sagas <ref> [GMS87] </ref> have been proposed as a transaction model for long lived activities. A saga is a set of relatively independent (component) transactions T 1 , T 2 , ..., T n which can interleave in any way with component transactions of other sagas.
Reference: [Gra81] <author> J. N. Gray. </author> <title> The transaction concept: Virtues and limitations. </title> <booktitle> In Proceedings, International Conference on Very Large Data Bases, </booktitle> <pages> pages 144-154, </pages> <month> September </month> <year> 1981. </year>
Reference-contexts: 1 Introduction Traditionally, database management systems (DBMSs) guarantee atomicity, consistency, isolation and durability (commonly referred to as the ACID properties) <ref> [Gra81, HR83, OV91] </ref> for each fl This work is supported by the Office of Naval Research and the Navy Command, Control and Ocean Surveillance Center RDT&E Division, and by the Rome Laboratory. 1 transaction.
Reference: [HR83] <author> T. Haerder and A. Reuter. </author> <title> Principles of Transaction-Oriented Database Recovery. </title> <journal> ACM Computing Surveys, </journal> <year> 1983. </year> <month> 17 </month>
Reference-contexts: 1 Introduction Traditionally, database management systems (DBMSs) guarantee atomicity, consistency, isolation and durability (commonly referred to as the ACID properties) <ref> [Gra81, HR83, OV91] </ref> for each fl This work is supported by the Office of Naval Research and the Navy Command, Control and Ocean Surveillance Center RDT&E Division, and by the Rome Laboratory. 1 transaction.
Reference: [Kri94] <author> V. Krishnaprasad. </author> <title> Event Detection for Supporting Active Capability in an OODBMS: Semantics, Architecture, and Implementation. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> Gainesville, FL 32611, </address> <month> March </month> <year> 1994. </year>
Reference: [Moh94] <author> C. Mohan. </author> <title> Tutorial: A Survey and Critique of Advanced Transaction Models. </title> <booktitle> In Proceedings, International Conference on Management of Data, </booktitle> <pages> page 521, </pages> <address> Minneapolis, Minnesota, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Several alternative approaches to overcome this problem have been proposed by the research community and some of them have been incorporated into research prototypes although commercial DBMSs incorporate very few of these research results <ref> [Moh94] </ref>. * Object services architecture (OSA) is a software architecture consisting of a collection of independent (orthogonal) software services, all of which operate via a software backplane or message passing bus [Bla94]. <p> Implementation of the primitives has been sketched. * ACTA [CR90] proposed a framework for specifying, analyzing, and synthesizing extended transaction models using dependencies. * A proposal for supporting advanced transaction models by extending current transaction monitors' capability <ref> [Moh94] </ref>. As is evident, most of the research efforts have addressed newer transaction models and their semantics, specification of transaction models and reasoning over them, and utility of proposed transaction models.
Reference: [Mos81] <author> J. E. Moss. </author> <title> Nested Transactions: An Approach to Reliable Distributed Computing. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, MIT, </institution> <year> 1981. </year>
Reference-contexts: To overcome the limitations of the conventional transactions, a number of advanced or extended transaction models, such as nested transactions, Sagas, ConTract model, Flex transaction model, DOM transaction model etc. have been proposed in the literature <ref> [Mos81, GMS87, Reu89, ELLR90, BOH + ] </ref>. Some of these models relax the ACID properties in a specific manner to better model the processing requirements of a class of applications in terms of parallelism, consistency and serializability.
Reference: [Mos85] <author> E. Moss. </author> <title> Nested Transactions, an Approach to Reliable Distributed Computing. </title> <publisher> The MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: Some of these models relax the ACID properties in a specific manner to better model the processing requirements of a class of applications in terms of parallelism, consistency and serializability. For example, nested transactions <ref> [Mos85] </ref> allow subtransactions to fail independently of their respective parent transactions. This is appropriate for long transactions since the effects of failures is localized to parts of a transaction. <p> These primitives can be derived by examining the behavior of extant transaction models. In this section we examine transaction and dependency constraints, concurrency requirements, and access requirements of three transaction models, specifically, nested transactions, DOM transactions and sagas, aiming at identifying these primitives. 3.1 Nested Transactions A nested transaction <ref> [Mos85] </ref> consists of a top-level transaction T and a set of component transactions C referred to as subtransactions. Each component transaction can in turn be a nested transaction. This model was proposed to overcome two main limitations of the traditional transaction model namely, limited parallelism and inflexible failure control.
Reference: [OOD93] <author> OODB. </author> <title> Open OODB Toolkit, Release 0.2 (Alpha) Document. </title> <institution> Texas Instruments, Dallas, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: TI's Open OODB prototype has taken this approach for supporting various services <ref> [WBT92, OOD93] </ref> but have not addressed the transaction model issues. 2 * Carnot [ASRS92] has taken the approach of providing a general specification facility that enables the formalization of most of the proposed transaction models that can be stated in terms of dependencies amongst significant events in different subtransactions. <p> The Sentinel architecture is an extension of the passive Open OODB system architecture <ref> [OOD93] </ref>. The Open OODB class hierarchy was modified to include new class definitions which are necessary for supporting active capability. Figure 1 depicts the class hierarchy of Sentinel with respect to the Open OODB classes and the classes introduced, namely the Reactive, Notifiable, Event, Rule and Event Detector classes.
Reference: [OV91] <author> M. T. Ozsu and P. Valduriez. </author> <title> Principles of Distributed Database Systems. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Traditionally, database management systems (DBMSs) guarantee atomicity, consistency, isolation and durability (commonly referred to as the ACID properties) <ref> [Gra81, HR83, OV91] </ref> for each fl This work is supported by the Office of Naval Research and the Navy Command, Control and Ocean Surveillance Center RDT&E Division, and by the Rome Laboratory. 1 transaction.
Reference: [Reu89] <author> A. Reuter. </author> <title> Contract: A means for extending control beyond transaction boundaries. </title> <booktitle> In Proceedings of the 2nd International Workshop on High Performance Transaction Systems, </booktitle> <month> September </month> <year> 1989. </year>
Reference-contexts: To overcome the limitations of the conventional transactions, a number of advanced or extended transaction models, such as nested transactions, Sagas, ConTract model, Flex transaction model, DOM transaction model etc. have been proposed in the literature <ref> [Mos81, GMS87, Reu89, ELLR90, BOH + ] </ref>. Some of these models relax the ACID properties in a specific manner to better model the processing requirements of a class of applications in terms of parallelism, consistency and serializability.
Reference: [Sha92] <author> A. Sharma. </author> <title> On extensions to a passive dbms to support active and multi-media capabilities. </title> <type> Master's thesis, </type> <institution> CIS Department, University of Florida, Gainesville, </institution> <year> 1992. </year>
Reference: [Tam94] <author> Z. Tamizuddin. </author> <title> Rule Execution and Visualization in Active OODBMS. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> Gainesville, FL 32611, </address> <month> May </month> <year> 1994. </year>
Reference: [US] <author> Rainer Unland and Gunter Schlageter. </author> <title> A Transaction Manager Development Facility for Non Standard Database Systems. </title>
Reference-contexts: This approach may be able to offset the performance disadvantage currently observed in active database systems. The system designer will be in a better position (relatively) to support or extend transaction models 2 . This approach is similar to the one taken in <ref> [US] </ref>. They introduce a flexible and adaptable tool kit approach for transaction management. This tool kit enables a database implementor or applications designer to assemble application-specific transaction types. Such transaction types can be constructed by selecting a meaningful subset from a starter set of basic constituents.
Reference: [WBT92] <author> D. Wells, J. A. Blakeley, and C. W. Thompson. </author> <title> Architecture of an Open Object-Oriented Database Management System. </title> <journal> IEEE Computer, </journal> <volume> 25(10) </volume> <pages> 74-81, </pages> <month> October </month> <year> 1992. </year> <month> 18 </month>
Reference-contexts: TI's Open OODB prototype has taken this approach for supporting various services <ref> [WBT92, OOD93] </ref> but have not addressed the transaction model issues. 2 * Carnot [ASRS92] has taken the approach of providing a general specification facility that enables the formalization of most of the proposed transaction models that can be stated in terms of dependencies amongst significant events in different subtransactions.
References-found: 29

