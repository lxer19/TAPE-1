URL: http://www.cs.bu.edu/techreports/93-001-scc-2s-perf.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: (best@cs.bu.edu)  (sb@cs.bu.edu)  (thimios@cs.bu.edu)  
Title: Performance Evaluation of Two-Shadow Speculative Concurrency Control  
Author: Azer Bestavros Spyridon Braoudakis Euthimios Panagos 
Date: February 5, 1993  
Address: Boston, MA 02215  
Affiliation: Computer Science Department Boston University  
Abstract: Speculative Concurrency Control (SCC) [Best92a] is a new concur-rency control approach especially suited for real-time database applications. It relies on the use of redundancy to ensure that serializable schedules are discovered and adopted as early as possible, thus increasing the likelihood of the timely commitment of transactions with strict timing constraints. In [Best92b], SCC-nS, a generic algorithm that characterizes a family of SCC-based algorithms was described, and its correctness established by showing that it only admits serializ-able histories. In this paper, we evaluate the performance of the Two-Shadow SCC algorithm (SCC-2S), a member of the SCC-nS family, which is notable for its minimal use of redundancy. In particular, we show that SCC-2S (as a representative of SCC-based algorithms) provides significant performance gains over the widely used Optimistic Concurrency Control with Broadcast Commit (OCC-BC), under a variety of operating conditions and workloads. 
Abstract-found: 1
Intro-found: 1
Reference: [Abbo88] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> "Scheduling real-time transactions: A performance evaluation." </title> <booktitle> In Prooceedings of the 14th International Conference on Very Large Data Bases, </booktitle> <address> Los Angeles, Ca, </address> <year> 1988. </year>
Reference-contexts: For real-time database applications, where transactions execute under strict timing constraints, maximum concurrency (or throughput) ceases to be an expressive measure of performance. Rather, the number of transactions completed before their set deadlines becomes the decisive performance measure [Buch89]. Most real-time concurrency control schemes considered in the literature <ref> [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] </ref> are based on Two-Phase Locking (2PL), which is a PCC strategy.
Reference: [Agra87] <author> R. Agrawal, M. Carey, and M. Linvy. </author> <title> "Concurency control performance modeling: Alternatives and implications." </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 12(4), </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: For real-time database applications, where transactions execute under strict timing constraints, maximum concurrency (or throughput) ceases to be an expressive measure of performance. Rather, the number of transactions completed before their set deadlines becomes the decisive performance measure [Buch89]. Most real-time concurrency control schemes considered in the literature <ref> [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] </ref> are based on Two-Phase Locking (2PL), which is a PCC strategy.
Reference: [Best92a] <author> Azer Bestavros. </author> <title> "Speculative concurrency control: A position statement." </title> <type> Technical Report TR-92-016, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> July </month> <year> 1992. </year> <note> Submitted for publication. </note>
Reference-contexts: Among these alternatives, the Optimistic Concurrency Control algorithm with Broadcast Commit (OCC-BC) [Mena82, Robi82] has been singled out as an attractive protocol for RTDBMS [Hari90b]. In this paper, OCC-BC is used as a representative of OCC-based algorithms. In a recent study <ref> [Best92a] </ref>, Bestavros proposed a categorically different approach to concurrency control for RTDBMS. His approach relies on the use of redundant computation to start on alternative schedules, once conflicts that threaten the consistency of the database are detected. <p> OCC in that it allows conflicting transactions to proceed concurrently, thus avoiding unnecessary delays that may jeopardize their timely commitment. 3 In the remainder of this section, we overview a simple yet powerful SCC-based algo-rithm, which can be thought of as a special case of the SCC-based algorithms described in <ref> [Best92a, Best92b, Best93] </ref>. The algorithm called Two-Shadow SCC (SCC-2S) allows a maximum of two shadows per uncommitted transaction to exist in the system at any point in time: a primary shadow and a standby shadow. Let T i be any uncommitted transaction in the system. <p> The performance metrics used here, Missed Deadlines and Average Tardiness, are different from those used in a conventional DBMS, where response time and throughput are the main performance criteria. In <ref> [Best92a] </ref>, it was argued that SCC-based algorithms are better suited for RTDBMS. SCC relies on redundancy to ensure that serializable schedules are discovered and adopted as early as possible, thus increasing the likelihood of the timely commitment of transactions with strict timing constraints.
Reference: [Best92b] <author> Azer Bestavros and Spyridon Braoudakis. </author> <title> "A family of speculative concurrency control algorithms." </title> <type> Technical Report TR-92-017, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> July </month> <year> 1992. </year> <note> Also submitted for publication to SIGMOD'93. </note>
Reference-contexts: These alternative schedules are adopted only if the suspected inconsistencies 2 materialize; otherwise, they are abandoned. Due to its nature, this approach has been termed Speculative Concurrency Control (SCC). In <ref> [Best92b] </ref>, SCC-nS, a generic algorithm that characterizes a family of such SCC-based algorithms was described, and its correctness established by showing that it only admits serializable histories. <p> OCC in that it allows conflicting transactions to proceed concurrently, thus avoiding unnecessary delays that may jeopardize their timely commitment. 3 In the remainder of this section, we overview a simple yet powerful SCC-based algo-rithm, which can be thought of as a special case of the SCC-based algorithms described in <ref> [Best92a, Best92b, Best93] </ref>. The algorithm called Two-Shadow SCC (SCC-2S) allows a maximum of two shadows per uncommitted transaction to exist in the system at any point in time: a primary shadow and a standby shadow. Let T i be any uncommitted transaction in the system.
Reference: [Best92c] <author> Azer Bestavros and Spyridon Braoudakis. </author> <title> "Speculative concurrency control algorithms for real-time databases: An alternative expression of transaction priority." </title> <type> Technical Report (In progress), </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: For RTDBMS, incorporating real-time transaction and disk scheduling will further improve the performance of SCC-2S. Also, accounting for transactions' priorities is likely to decrease the number of missed deadlines in the system [Hari90b]. In <ref> [Best92c] </ref> we investigate this problem in the context of SCC-based algorithms. 16
Reference: [Best93] <author> Azer Bestavros. </author> <title> "Speculative concurrency control for real-time databases." </title> <type> Technical Report TR-93-002, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> July </month> <year> 1993. </year> <note> Submitted for publication. </note>
Reference-contexts: OCC in that it allows conflicting transactions to proceed concurrently, thus avoiding unnecessary delays that may jeopardize their timely commitment. 3 In the remainder of this section, we overview a simple yet powerful SCC-based algo-rithm, which can be thought of as a special case of the SCC-based algorithms described in <ref> [Best92a, Best92b, Best93] </ref>. The algorithm called Two-Shadow SCC (SCC-2S) allows a maximum of two shadows per uncommitted transaction to exist in the system at any point in time: a primary shadow and a standby shadow. Let T i be any uncommitted transaction in the system.
Reference: [Boks87] <author> C. Boksenbaum, M. Cart, J. Ferrie, and J. Francois. </author> <title> "Concurrent certifications by intervals of timestamps in distributed database systems." </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 409-419, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Traditional concurrency control algorithms can be broadly classified as either pessimistic or optimistic. Pessimistic Concurrency Control (PCC) algorithms [Eswa76, Gray76] avoid any concurrent execution of transactions as soon as potential conflicts between these transactions are detected. Alternately, Optimistic Concurrency Control (OCC) algorithms <ref> [Boks87, Kung81] </ref> allow such transactions to proceed at the risk of having to restart them in case these suspected conflicts materialize. For real-time database applications, where transactions execute under strict timing constraints, maximum concurrency (or throughput) ceases to be an expressive measure of performance.
Reference: [Buch89] <author> A. P. Buchmann, D. C. McCarthy, M. Hsu, and U. Dayal. </author> <title> "Time-critical database scheduling: A framework for integrating real-time scheduling and concurrency controls." </title> <booktitle> In Proceedings of the 5th International Conference on Data Engineering, </booktitle> <address> Los Angeles, California, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: For real-time database applications, where transactions execute under strict timing constraints, maximum concurrency (or throughput) ceases to be an expressive measure of performance. Rather, the number of transactions completed before their set deadlines becomes the decisive performance measure <ref> [Buch89] </ref>. Most real-time concurrency control schemes considered in the literature [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] are based on Two-Phase Locking (2PL), which is a PCC strategy.
Reference: [Eswa76] <author> K. P. Eswaran, J. N. Gray, R. A. Lorie, and I. L. Traiger. </author> <title> "The notions of consistency and predicate locks in a database system." </title> <journal> Communications of the ACM, </journal> 19(11) 624-633, November 1976. 
Reference-contexts: 1 Introduction Traditional concurrency control algorithms can be broadly classified as either pessimistic or optimistic. Pessimistic Concurrency Control (PCC) algorithms <ref> [Eswa76, Gray76] </ref> avoid any concurrent execution of transactions as soon as potential conflicts between these transactions are detected. Alternately, Optimistic Concurrency Control (OCC) algorithms [Boks87, Kung81] allow such transactions to proceed at the risk of having to restart them in case these suspected conflicts materialize.
Reference: [Gray76] <author> J. N. Gray, R. A. Lorie, G. R. Putzolu, and I. L. Traiger. </author> <title> "Granularity of locks and degrees of consistensy in a shared data base." </title> <editor> In G. M. Nijssen, editor, </editor> <booktitle> Modeling in Data Base Management Systems, </booktitle> <pages> pages 365-395. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1976. </year>
Reference-contexts: 1 Introduction Traditional concurrency control algorithms can be broadly classified as either pessimistic or optimistic. Pessimistic Concurrency Control (PCC) algorithms <ref> [Eswa76, Gray76] </ref> avoid any concurrent execution of transactions as soon as potential conflicts between these transactions are detected. Alternately, Optimistic Concurrency Control (OCC) algorithms [Boks87, Kung81] allow such transactions to proceed at the risk of having to restart them in case these suspected conflicts materialize.
Reference: [Hari90a] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> "Dynamic real-time optimistic concurrency control." </title> <booktitle> In Prooceedings of the 11th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1990. </year> <month> 17 </month>
Reference-contexts: Over the last few years, several alternatives to 2PL for RTDBMS have been proposed and explored <ref> [Kort90, Hari90a, Huan91, Kim91, Lin90, Son92] </ref>. Among these alternatives, the Optimistic Concurrency Control algorithm with Broadcast Commit (OCC-BC) [Mena82, Robi82] has been singled out as an attractive protocol for RTDBMS [Hari90b]. In this paper, OCC-BC is used as a representative of OCC-based algorithms.
Reference: [Hari90b] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> "On being optimistic about real-time constraints." </title> <booktitle> In Prooceedings of the 1990 ACM PODS Symposium, </booktitle> <month> April </month> <year> 1990. </year>
Reference-contexts: Over the last few years, several alternatives to 2PL for RTDBMS have been proposed and explored [Kort90, Hari90a, Huan91, Kim91, Lin90, Son92]. Among these alternatives, the Optimistic Concurrency Control algorithm with Broadcast Commit (OCC-BC) [Mena82, Robi82] has been singled out as an attractive protocol for RTDBMS <ref> [Hari90b] </ref>. In this paper, OCC-BC is used as a representative of OCC-based algorithms. In a recent study [Best92a], Bestavros proposed a categorically different approach to concurrency control for RTDBMS. <p> A transaction that completes after its deadline has a tardiness of C T D T , where C T and D T are the transaction's completion time and deadline time, respectively. Previous studies have argued that improving both of the aforementioned metrics is difficult <ref> [Hari90b] </ref>. Our simulations have shown that by adopting a superior concurrency control algorithm (SCC-2S in this case), both metrics can, indeed, be improved. Our experiments assume that transaction deadlines are soft. This entails that late transactions (those missing their deadlines) must complete nevertheless- with the minimum possible delay. <p> The database consisted of 1,000 pages from which each transaction accessed 20 pages randomly. The probability of a page been updated was set at 25%. These parameter settings are comparable to those used in similar studies <ref> [Hari90b] </ref>. Figures 5-a and 5-b depict the average number of transactions that missed their deadlines, and the extra time needed by late transactions those missing their deadlines - to complete their operations, respectively. The performance of both algorithms is identical when the number of transactions in the system is small. <p> For RTDBMS, incorporating real-time transaction and disk scheduling will further improve the performance of SCC-2S. Also, accounting for transactions' priorities is likely to decrease the number of missed deadlines in the system <ref> [Hari90b] </ref>. In [Best92c] we investigate this problem in the context of SCC-based algorithms. 16
Reference: [Huan89] <author> J. Huang, J. A. Stankovic, D. Towsley, and K. Ramamritham. </author> <title> "Experimental evaluation of real-time transaction processing." </title> <booktitle> In Proceedings of the 10th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1989. </year>
Reference-contexts: For real-time database applications, where transactions execute under strict timing constraints, maximum concurrency (or throughput) ceases to be an expressive measure of performance. Rather, the number of transactions completed before their set deadlines becomes the decisive performance measure [Buch89]. Most real-time concurrency control schemes considered in the literature <ref> [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] </ref> are based on Two-Phase Locking (2PL), which is a PCC strategy.
Reference: [Huan91] <author> Jiandong Huang, John A. Stankovic, and Don Towslwy Krithi Ramamritham. </author> <title> "Experimental evaluation of real-time optimistic concurrency control schemes." </title> <booktitle> In Prooceed-ings of the 17th International Conference on Very Large Data Bases, </booktitle> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Over the last few years, several alternatives to 2PL for RTDBMS have been proposed and explored <ref> [Kort90, Hari90a, Huan91, Kim91, Lin90, Son92] </ref>. Among these alternatives, the Optimistic Concurrency Control algorithm with Broadcast Commit (OCC-BC) [Mena82, Robi82] has been singled out as an attractive protocol for RTDBMS [Hari90b]. In this paper, OCC-BC is used as a representative of OCC-based algorithms.
Reference: [Kim91] <author> Woosaeng Kim and Jaideep Srivastava. </author> <title> "Enhancing real-time dbms performance with multiversion data and priority based disk scheduling." </title> <booktitle> In Prooceedings of the 12th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: Over the last few years, several alternatives to 2PL for RTDBMS have been proposed and explored <ref> [Kort90, Hari90a, Huan91, Kim91, Lin90, Son92] </ref>. Among these alternatives, the Optimistic Concurrency Control algorithm with Broadcast Commit (OCC-BC) [Mena82, Robi82] has been singled out as an attractive protocol for RTDBMS [Hari90b]. In this paper, OCC-BC is used as a representative of OCC-based algorithms.
Reference: [Kort90] <author> Henry Korth. </author> <title> "Triggered real-time databases with consistency constraints." </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Data Bases, </booktitle> <address> Brisbane, Australia, </address> <year> 1990. </year>
Reference-contexts: Over the last few years, several alternatives to 2PL for RTDBMS have been proposed and explored <ref> [Kort90, Hari90a, Huan91, Kim91, Lin90, Son92] </ref>. Among these alternatives, the Optimistic Concurrency Control algorithm with Broadcast Commit (OCC-BC) [Mena82, Robi82] has been singled out as an attractive protocol for RTDBMS [Hari90b]. In this paper, OCC-BC is used as a representative of OCC-based algorithms.
Reference: [Kung81] <author> H. Kung and John Robinson. </author> <title> "On optimistic methods for concurrency control." </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(2), </volume> <month> June </month> <year> 1981. </year>
Reference-contexts: 1 Introduction Traditional concurrency control algorithms can be broadly classified as either pessimistic or optimistic. Pessimistic Concurrency Control (PCC) algorithms [Eswa76, Gray76] avoid any concurrent execution of transactions as soon as potential conflicts between these transactions are detected. Alternately, Optimistic Concurrency Control (OCC) algorithms <ref> [Boks87, Kung81] </ref> allow such transactions to proceed at the risk of having to restart them in case these suspected conflicts materialize. For real-time database applications, where transactions execute under strict timing constraints, maximum concurrency (or throughput) ceases to be an expressive measure of performance.
Reference: [Lin90] <author> Yi Lin and Sang Son. </author> <title> "Concurrency control in real-time databases by dynamic adjustment of serialization order." </title> <booktitle> In Proceedings of the 11th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: Over the last few years, several alternatives to 2PL for RTDBMS have been proposed and explored <ref> [Kort90, Hari90a, Huan91, Kim91, Lin90, Son92] </ref>. Among these alternatives, the Optimistic Concurrency Control algorithm with Broadcast Commit (OCC-BC) [Mena82, Robi82] has been singled out as an attractive protocol for RTDBMS [Hari90b]. In this paper, OCC-BC is used as a representative of OCC-based algorithms.
Reference: [Mena82] <author> D. Menasce and T. Nakanishi. </author> <title> "Optimistic versus pessimistic concurrency control mechanisms in database management systems." </title> <journal> Information Systems, </journal> <volume> 7(1), </volume> <year> 1982. </year>
Reference-contexts: Over the last few years, several alternatives to 2PL for RTDBMS have been proposed and explored [Kort90, Hari90a, Huan91, Kim91, Lin90, Son92]. Among these alternatives, the Optimistic Concurrency Control algorithm with Broadcast Commit (OCC-BC) <ref> [Mena82, Robi82] </ref> has been singled out as an attractive protocol for RTDBMS [Hari90b]. In this paper, OCC-BC is used as a representative of OCC-based algorithms. In a recent study [Best92a], Bestavros proposed a categorically different approach to concurrency control for RTDBMS.
Reference: [Robi82] <author> John Robinson. </author> <title> Design of Concurrency Controls for Transaction Processing Systems. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1982. </year>
Reference-contexts: Over the last few years, several alternatives to 2PL for RTDBMS have been proposed and explored [Kort90, Hari90a, Huan91, Kim91, Lin90, Son92]. Among these alternatives, the Optimistic Concurrency Control algorithm with Broadcast Commit (OCC-BC) <ref> [Mena82, Robi82] </ref> has been singled out as an attractive protocol for RTDBMS [Hari90b]. In this paper, OCC-BC is used as a representative of OCC-based algorithms. In a recent study [Best92a], Bestavros proposed a categorically different approach to concurrency control for RTDBMS.
Reference: [Sha88] <author> Lui Sha, R. Rajkumar, and J. Lehoczky. </author> <title> "Concurrency control for distributed real-time databases." </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 82-98, </pages> <year> 1988. </year>
Reference-contexts: For real-time database applications, where transactions execute under strict timing constraints, maximum concurrency (or throughput) ceases to be an expressive measure of performance. Rather, the number of transactions completed before their set deadlines becomes the decisive performance measure [Buch89]. Most real-time concurrency control schemes considered in the literature <ref> [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] </ref> are based on Two-Phase Locking (2PL), which is a PCC strategy.
Reference: [Sha91] <author> Lui Sha, R. Rajkumar, Sang Son, and Chun-Hyon Chang. </author> <title> "A real-time locking protocol." </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(7) </volume> <pages> 793-800, </pages> <year> 1991. </year>
Reference-contexts: For real-time database applications, where transactions execute under strict timing constraints, maximum concurrency (or throughput) ceases to be an expressive measure of performance. Rather, the number of transactions completed before their set deadlines becomes the decisive performance measure [Buch89]. Most real-time concurrency control schemes considered in the literature <ref> [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] </ref> are based on Two-Phase Locking (2PL), which is a PCC strategy.
Reference: [Sing88] <author> Mukesh Singhal. </author> <title> "Issues and approaches to design real-time database systems." </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 19-33, </pages> <year> 1988. </year>
Reference-contexts: For real-time database applications, where transactions execute under strict timing constraints, maximum concurrency (or throughput) ceases to be an expressive measure of performance. Rather, the number of transactions completed before their set deadlines becomes the decisive performance measure [Buch89]. Most real-time concurrency control schemes considered in the literature <ref> [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] </ref> are based on Two-Phase Locking (2PL), which is a PCC strategy.
Reference: [Son92] <author> S. Son, S. Park, and Y. Lin. </author> <title> "An integrated real-time locking protocol." </title> <booktitle> In Prooceedings of the IEEE International Conference on Data Engineering, </booktitle> <address> Tempe, AZ, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: Over the last few years, several alternatives to 2PL for RTDBMS have been proposed and explored <ref> [Kort90, Hari90a, Huan91, Kim91, Lin90, Son92] </ref>. Among these alternatives, the Optimistic Concurrency Control algorithm with Broadcast Commit (OCC-BC) [Mena82, Robi82] has been singled out as an attractive protocol for RTDBMS [Hari90b]. In this paper, OCC-BC is used as a representative of OCC-based algorithms.
Reference: [Stan88] <author> John Stankovic and Wei Zhao. </author> <title> "On real-time transactions." </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 4-18, </pages> <year> 1988. </year>
Reference-contexts: For real-time database applications, where transactions execute under strict timing constraints, maximum concurrency (or throughput) ceases to be an expressive measure of performance. Rather, the number of transactions completed before their set deadlines becomes the decisive performance measure [Buch89]. Most real-time concurrency control schemes considered in the literature <ref> [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] </ref> are based on Two-Phase Locking (2PL), which is a PCC strategy.
References-found: 25

