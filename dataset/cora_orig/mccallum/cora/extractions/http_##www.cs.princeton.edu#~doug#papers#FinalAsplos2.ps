URL: http://www.cs.princeton.edu/~doug/papers/FinalAsplos2.ps
Refering-URL: http://www.cs.princeton.edu/courses/archive/fall96/cs471/
Root-URL: http://www.cs.princeton.edu
Title: Performance from Architecture: Comparing a RISC and a CISC with Similar Hardware Organization  
Author: Dileep Bhandarkar Douglas W. Clark 
Address: 146 Main Street (MLO5-2/G1) Maynard, MA 01754  Cambridge, MA 02138  
Affiliation: Digital Equipment Corp.  Aiken Computation Lab Harvard University  
Abstract: Performance comparisons across different computer architectures cannot usually separate the architectural contribution from various implementation and technology contributions to performance. This paper compares an example implementation from the RISC and CISC architectural schools (a MIPS M/2000 and a Digital VAX 8700) on nine of the ten SPEC benchmarks. The organizational similarity of these machines provides an opportunity to examine the purely architectural advantages of RISC. The RISC approach offers, compared with VAX, many fewer cycles per instruction but somewhat more instructions per program. Using results from a software monitor on the MIPS machine and a hardware monitor on the VAX, this paper shows that the resulting advantage in cycles per program ranges from slightly under a factor of 2 to almost a factor of 4, with a geometric mean of 2.7. It also demonstrates the correlation between cycles per instruction and relative instruction count. Various reasons for this correlation, and for the consistent net advantage of RISC, are discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> Adiletta, M.J., et al. </editor> <title> Semiconductor Technology in a High-performance VAX System. </title> <note> Digital Technical Journal 2, </note> <month> 4 (Fall </month> <year> 1990), </year> <pages> pp. 43-60. </pages>
Reference-contexts: High-end VAX implementations such as the models 8600 [8, 10] and 9000 [15, 12] attempt to do just that. The model 9000, in particular, uses a large amount of logic (roughly one million gate-array gates for the system <ref> [1] </ref>) to achieve the lowest CPI of any VAX, as shown in Figure 4. The CPI improvement is the highest for the floating-point benchmarks.
Reference: [2] <author> Allmon, R. et al. </author> <title> CMOS Implementation of a 32b Computer. </title> <booktitle> 1989 ISSCC Technical Digest, </booktitle> <month> Feb. </month> <year> 1989, </year> <pages> pp. 80-81. </pages>
Reference-contexts: 5 cycles 15 cycles FP Add 14 cycles 2 cycles 11 cycles List price $100K $80K $492K Performance Overall SPECmark 7.9 17.6 5.6 Integer SPECmark 7.7 19.7 5.0 FP SPECmark 8.1 16.3 6.0 uses ECL gate-array technology, an adaptation of its mi-croarchitecture has been implemented in a VLSI CMOS chip <ref> [2, 13] </ref> that appears in VAX 6000 Model 400 and VAX 4000 Model 300 systems. Table 1 summarizes the salient implementation characteristics of our two machines together with the VAX 4000/300.
Reference: [3] <author> Anderson, T.E., Levy, H.M., Bershad, </author> <title> B.N., </title> <editor> and La-zowska, E.D. </editor> <booktitle> The Interaction of Architecture and Operating System Design. Proc. Fourth Int. Conf. on Architectural Support for Prog. Lang. and Op. Syst., </booktitle> <address> ACM/IEEE, Palo Alto, CA, </address> <month> April </month> <year> 1991, </year> <note> to appear. </note>
Reference-contexts: It would be desirable, too, to have a wider variety of programming languages and applications represented in the set. Finally, we have looked in this paper at application-level processor performance only. At the system level, other architectural factors may affect relative performance. Ander-son et al. <ref> [3] </ref> have recently studied some operating system primitives and found that the performance of these primitives on RISCs, as compared to VAX, has not scaled with application program performance. And of course the I/O system will determine the performance of some programs, quite independent of processor architecture.
Reference: [4] <author> Clark, D.W. </author> <title> Pipelining and Performance in the VAX 8800. </title> <booktitle> Proc. Second Int. Conf. on Architectural Support for Prog. Lang. and Op. Syst., </booktitle> <address> ACM/IEEE, Palo Alto, CA, </address> <month> Oct. </month> <year> 1987, </year> <pages> pp. 173-177. </pages>
Reference-contexts: The VAX decode cycle is omitted when a microroutine is more than one microinstruction long <ref> [4] </ref>. and possibly some improvement in cycle time while allowing an increase in the number of instructions executed. The goal is a substantial net improvement in execution time. The qualitative evidence that this goal has been achieved is by now nearly overwhelming. <p> Section 5 then briefly considers variations on implementation styles for both architectures and summarizes our basic results, concluding the paper. 2 Apparatus and Methods 2.1 The Machines We measured Digital's VAX 8700 (a single processor version of the 8800) <ref> [4, 11, 30] </ref> against MIPS Computer Systems' MIPS M/2000 [19, 26]. We concede at the outset that these two machines are very different in technology, size, and cost: the VAX processor is nine boards full of ECL gate arrays; the MIPS processor is one board with two custom CMOS chips.
Reference: [5] <author> Clark, D.W., Bannon, P.J., and Keller, J.B. </author> <title> Measuring VAX 8800 Performance with a Histogram Hardware Monitor. </title> <booktitle> Proc. 15th Annual International Symposium on Computer Architecture, </booktitle> <address> Honolulu, </address> <month> May </month> <year> 1988, </year> <pages> pp. 176-185. </pages>
Reference-contexts: The existence of this VAX demonstrates that the technology difference between our two measured machines is not a consequence of architecture. But why not compare the two CMOS machines directly? The main reason is that only the 8700 had the hardware instrumentation demanded by our measurements <ref> [5] </ref>. And in fact, as we will see, the CMOS VAX's resemblance to the MIPS engine is somewhat less than the 8700's. There are strong organizational similarities between the VAX 8700 and the MIPS M/2000. Figure 1 is a simplified representation of the main CPU pipelines in the two machines. <p> This monitor, described in <ref> [5] </ref>, uses the micro-PC histogram technique introduced in [14]: a real-time count is kept for each microinstruction, and in every cycle the microinstruction then in execution in the ALU has its count incremented. <p> The VAX results come from the hardware monitor, which is attached not only to the micro-PC but also to the memory bus <ref> [5] </ref>; the MIPS results come from cache simulations [20]. All three of the caches (mixed Instructions and Data on the VAX, separate on MIPS) are 64 KBytes, direct-mapped, and write-through (except the MIPS I-cache), with 64-byte blocks.
Reference: [6] <author> Cocke, J. </author> <title> The Search for Performance in Scientific Processors. </title> <journal> Comm. ACM 31, </journal> <month> 3 (March </month> <year> 1988), </year> <pages> pp. 250-253. </pages>
Reference-contexts: 1 Introduction The last decade has seen the emergence and rapid success of Reduced Instruction Set Computer, or RISC, architectures. Following early work by Cray [32, 27] and Cocke <ref> [6, 7] </ref> and an implementation at IBM [25], university researchers, especially at Berkeley [23] and Stanford [16] developed design principles, built processors, and founded companies.
Reference: [7] <author> Cocke, J. and Markstein, V. </author> <title> The evolution of RISC Technology at IBM. </title> <journal> IBM J. of Research and Dev. </journal> <volume> 34, </volume> <month> 1 (Jan. </month> <year> 1990), </year> <pages> pp. 4-11. </pages>
Reference-contexts: 1 Introduction The last decade has seen the emergence and rapid success of Reduced Instruction Set Computer, or RISC, architectures. Following early work by Cray [32, 27] and Cocke <ref> [6, 7] </ref> and an implementation at IBM [25], university researchers, especially at Berkeley [23] and Stanford [16] developed design principles, built processors, and founded companies.
Reference: [8] <author> DeRosa, J., Glackemeyer, R., and Knight, T. </author> <title> Design and Implementation of the VAX 8600 Pipeline. </title> <booktitle> Computer 18, </booktitle> <month> 5 (May </month> <year> 1985), </year> <pages> pp. 38-48. </pages>
Reference-contexts: The VAX 8700 designers strove to minimize cycle time at the possible expense of cycles per instruction, using a straightforward pipelined microengine. It is possible to reduce VAX CPI further by adding gates (and complexity and cost). High-end VAX implementations such as the models 8600 <ref> [8, 10] </ref> and 9000 [15, 12] attempt to do just that. The model 9000, in particular, uses a large amount of logic (roughly one million gate-array gates for the system [1]) to achieve the lowest CPI of any VAX, as shown in Figure 4.
Reference: [9] <author> DeRosa, J. and Levy, H.M. </author> <title> An Evaluation of Branch Architectures. </title> <booktitle> Proc. 14th Annual International Symposium on Computer Architecture, </booktitle> <address> Pittsburgh, PA, </address> <month> June </month> <year> 1987. </year>
Reference-contexts: This bubble cannot be filled by other non-branch instructions because the condition codes are set by almost every VAX instruction <ref> [9] </ref>. This in turn means that adding an instruction cache would not pay unless branch prediction hardware were added too. The rarer unconditional jumps could profit from an I-cache, but this was not reason enough to justify one in the 8700, and so these jumps also take five cycles.
Reference: [10] <institution> Digital Equipment Corp. </institution> <note> Digital Technical Journal 1 (Aug. 1985), DEC, </note> <institution> Maynard, </institution> <address> MA. </address> <note> This entire issue deals with the VAX 8600. </note>
Reference-contexts: The VAX 8700 designers strove to minimize cycle time at the possible expense of cycles per instruction, using a straightforward pipelined microengine. It is possible to reduce VAX CPI further by adding gates (and complexity and cost). High-end VAX implementations such as the models 8600 <ref> [8, 10] </ref> and 9000 [15, 12] attempt to do just that. The model 9000, in particular, uses a large amount of logic (roughly one million gate-array gates for the system [1]) to achieve the lowest CPI of any VAX, as shown in Figure 4.
Reference: [11] <institution> Digital Equipment Corp. </institution> <note> Digital Technical Journal 4 (Feb. 1987), DEC, </note> <institution> Maynard, </institution> <address> MA. </address> <note> This entire issue deals with the VAX 8800 family. </note>
Reference-contexts: Section 5 then briefly considers variations on implementation styles for both architectures and summarizes our basic results, concluding the paper. 2 Apparatus and Methods 2.1 The Machines We measured Digital's VAX 8700 (a single processor version of the 8800) <ref> [4, 11, 30] </ref> against MIPS Computer Systems' MIPS M/2000 [19, 26]. We concede at the outset that these two machines are very different in technology, size, and cost: the VAX processor is nine boards full of ECL gate arrays; the MIPS processor is one board with two custom CMOS chips.
Reference: [12] <institution> Digital Equipment Corp. </institution> <note> Digital Technical Journal 2, 4 (Fall 1990), DEC, </note> <institution> Maynard, </institution> <address> MA. </address> <note> This entire issue deals with the VAX 9000. </note>
Reference-contexts: The VAX 8700 designers strove to minimize cycle time at the possible expense of cycles per instruction, using a straightforward pipelined microengine. It is possible to reduce VAX CPI further by adding gates (and complexity and cost). High-end VAX implementations such as the models 8600 [8, 10] and 9000 <ref> [15, 12] </ref> attempt to do just that. The model 9000, in particular, uses a large amount of logic (roughly one million gate-array gates for the system [1]) to achieve the lowest CPI of any VAX, as shown in Figure 4. The CPI improvement is the highest for the floating-point benchmarks.
Reference: [13] <editor> Durdan, W.H. et al. </editor> <title> An Overview of the VAX 6000 Model 400 Chip Set. </title> <note> Digital Technical Journal 2, 2 (Spring 1990), </note> <institution> Digital Equipment Corp., Maynard, </institution> <address> MA, </address> <pages> pp. 73-83. </pages>
Reference-contexts: 5 cycles 15 cycles FP Add 14 cycles 2 cycles 11 cycles List price $100K $80K $492K Performance Overall SPECmark 7.9 17.6 5.6 Integer SPECmark 7.7 19.7 5.0 FP SPECmark 8.1 16.3 6.0 uses ECL gate-array technology, an adaptation of its mi-croarchitecture has been implemented in a VLSI CMOS chip <ref> [2, 13] </ref> that appears in VAX 6000 Model 400 and VAX 4000 Model 300 systems. Table 1 summarizes the salient implementation characteristics of our two machines together with the VAX 4000/300.
Reference: [14] <author> Emer, J.S. and Clark, D.W. </author> <title> A Characterization of Processor Performance in the VAX-11/780. </title> <booktitle> Proc. 11th Annual International Symposium on Computer Architecture, </booktitle> <address> Ann Arbor, MI, </address> <month> June </month> <year> 1984, </year> <pages> pp. 301-310. </pages>
Reference-contexts: This monitor, described in [5], uses the micro-PC histogram technique introduced in <ref> [14] </ref>: a real-time count is kept for each microinstruction, and in every cycle the microinstruction then in execution in the ALU has its count incremented.
Reference: [15] <author> Fossum, T. and Fite, D. </author> <title> Designing a VAX for High Performance. </title> <booktitle> Compcon Spring 90, IEEE, </booktitle> <address> San Francisco, </address> <year> 1990, </year> <pages> pp. 36-43. </pages>
Reference-contexts: The VAX 8700 designers strove to minimize cycle time at the possible expense of cycles per instruction, using a straightforward pipelined microengine. It is possible to reduce VAX CPI further by adding gates (and complexity and cost). High-end VAX implementations such as the models 8600 [8, 10] and 9000 <ref> [15, 12] </ref> attempt to do just that. The model 9000, in particular, uses a large amount of logic (roughly one million gate-array gates for the system [1]) to achieve the lowest CPI of any VAX, as shown in Figure 4. The CPI improvement is the highest for the floating-point benchmarks.
Reference: [16] <author> Hennessy, J.L., et al., </author> <title> The MIPS Machine. </title> <booktitle> Proc. Com-pcon Spring 82, IEEE, </booktitle> <address> San Francisco, </address> <year> 1982. </year>
Reference-contexts: 1 Introduction The last decade has seen the emergence and rapid success of Reduced Instruction Set Computer, or RISC, architectures. Following early work by Cray [32, 27] and Cocke [6, 7] and an implementation at IBM [25], university researchers, especially at Berkeley [23] and Stanford <ref> [16] </ref> developed design principles, built processors, and founded companies. Today the success of RISC architectures from SUN (the Berkeley-inspired SPARC design), MIPS (the Stanford-inspired MIPS design), and traditional semiconductor companies (Motorola, Intel) is evident; big computer companies like IBM, Hewlett Packard, and Digital have also embraced the concept.
Reference: [17] <institution> International Business Machines Corp. Journal of Research and Development 34, </institution> <month> 1 (Jan. </month> <year> 1990). </year> <title> This entire issue deals with the IBM RISC System/6000. </title>
Reference-contexts: Just as VAX CPI can be improved by the gate-intensive approach of the model 9000 design, so RISC CPI can be improved by superscalar or superpipelined designs [18, 29]. The IBM RISC System/6000 <ref> [17] </ref>, for example, has a peak issue rate of four instructions per cycle. So while VAX may "catch up" to current single-instruction-issue RISC performance, RISC designs will push on with earlier adoption of advanced implementation techniques, achieving still higher performance.
Reference: [18] <author> Jouppi, </author> <title> N.P. and Wall, D.W. Available Instruction-Level Parallelism for Superscalar and Superpipelined Machines. </title> <booktitle> Proc. Third Int. Conf. on Architectural Support for Prog. Lang. and Op. Syst., </booktitle> <address> ACM/IEEE, Boston, MA, </address> <month> April </month> <year> 1989, </year> <pages> pp. 272-282. </pages>
Reference-contexts: Just as VAX CPI can be improved by the gate-intensive approach of the model 9000 design, so RISC CPI can be improved by superscalar or superpipelined designs <ref> [18, 29] </ref>. The IBM RISC System/6000 [17], for example, has a peak issue rate of four instructions per cycle. So while VAX may "catch up" to current single-instruction-issue RISC performance, RISC designs will push on with earlier adoption of advanced implementation techniques, achieving still higher performance.
Reference: [19] <author> Kane, G. </author> <title> MIPS R2000 RISC Architecture. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference-contexts: The RISC approach promises many advantages over Complex Instruction Set Computer, or CISC, architectures, including superior performance, design simplicity, rapid development time, and others <ref> [19, 22] </ref>. Studying all of these factors at once is beyond the scope of this paper, which will fl on leave from Digital Equipment Corp., 1990-91. look only at performance, and in fact only at performance from the architectural perspective. <p> Section 5 then briefly considers variations on implementation styles for both architectures and summarizes our basic results, concluding the paper. 2 Apparatus and Methods 2.1 The Machines We measured Digital's VAX 8700 (a single processor version of the 8800) [4, 11, 30] against MIPS Computer Systems' MIPS M/2000 <ref> [19, 26] </ref>. We concede at the outset that these two machines are very different in technology, size, and cost: the VAX processor is nine boards full of ECL gate arrays; the MIPS processor is one board with two custom CMOS chips. <p> The MIPS machine has a few advantages: it has a separate instruction cache, slightly faster main memory, and considerably faster floating point. We will argue in Section 4 that the difference in floating-point performance has an architectural basis. The M/2000 allows some overlap of floating-point instructions <ref> [19] </ref>, whereas the VAXes have very minimal overlap. These factors should all contribute to a slightly wider difference in cycles per instruction between the MIPS system and the VAX system. 2.2 The Benchmarks We use the SPEC Release 1 benchmarks for our analysis [31]. <p> Instruction scheduling: filled delay slots. The MIPS architecture allows instructions to be inserted in code positions that might otherwise be lost to pipeline delays. The instruction after a conditional branch is always executed and the instruction after a load can do anything except reference the loaded register <ref> [19] </ref>. This ability is not present in the VAX architecture (although the 8700 microcode uses both delay slots when it can). Sometimes the branch-delay or load-delay slot cannot be used, and must be filled by a NOP.
Reference: [20] <author> Killian, E. </author> <title> MIPS cache simulation results. </title> <type> Personal communication, </type> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: The VAX results come from the hardware monitor, which is attached not only to the micro-PC but also to the memory bus [5]; the MIPS results come from cache simulations <ref> [20] </ref>. All three of the caches (mixed Instructions and Data on the VAX, separate on MIPS) are 64 KBytes, direct-mapped, and write-through (except the MIPS I-cache), with 64-byte blocks. SPEC benchmark cache performance in other configurations has been investigated by Pnevmatikatos and Hill [24].
Reference: [21] <institution> MIPS Computer Systems, Inc. MIPS Language Programmer's Guide, </institution> <year> 1986. </year>
Reference-contexts: Since the monitor provides counts of all cycles and of all instructions, CPI can be calculated directly. Two tools were used on MIPS M/2000 system to produce execution profiles of the SPEC benchmarks: Pixie and Pixstats <ref> [21] </ref>. Pixie reads an executable program, partitions it into basic blocks, and writes an equivalent program containing additional code that counts the execution of each basic block. When this Pixie-generated program is run, it generates a file containing the basic block counts.
Reference: [22] <author> Patterson, D.A. </author> <title> Reduced Instruction Set Computers. </title> <journal> Comm. ACM 28, </journal> <month> 1 (Jan. </month> <year> 1985), </year> <pages> pp. 8-21. </pages>
Reference-contexts: The RISC approach promises many advantages over Complex Instruction Set Computer, or CISC, architectures, including superior performance, design simplicity, rapid development time, and others <ref> [19, 22] </ref>. Studying all of these factors at once is beyond the scope of this paper, which will fl on leave from Digital Equipment Corp., 1990-91. look only at performance, and in fact only at performance from the architectural perspective.
Reference: [23] <author> Patterson, D.A. and Sequin, C. RISC-1: </author> <title> A Reduced Instruction Set VLSI Computer. </title> <booktitle> Proc. 8th Annual International Symposium on Computer Architecture, </booktitle> <address> Min-neapolis, </address> <month> May </month> <year> 1981, </year> <pages> pp. 443-457. </pages>
Reference-contexts: 1 Introduction The last decade has seen the emergence and rapid success of Reduced Instruction Set Computer, or RISC, architectures. Following early work by Cray [32, 27] and Cocke [6, 7] and an implementation at IBM [25], university researchers, especially at Berkeley <ref> [23] </ref> and Stanford [16] developed design principles, built processors, and founded companies.
Reference: [24] <author> Pnevmatikatos, D.N. and Hill, </author> <title> M.D. Cache Performance of the Integer SPEC Benchmarks on a RISC. </title> <journal> ACM Comp. Arch. </journal> <volume> News 18, </volume> <month> 2 (June </month> <year> 1990), </year> <pages> pp. 53-68. </pages>
Reference-contexts: All three of the caches (mixed Instructions and Data on the VAX, separate on MIPS) are 64 KBytes, direct-mapped, and write-through (except the MIPS I-cache), with 64-byte blocks. SPEC benchmark cache performance in other configurations has been investigated by Pnevmatikatos and Hill <ref> [24] </ref>. There is a relationship between the RISC factor and the D-stream miss ratio, particularly on the VAX: roughly speaking, higher miss ratios are attached to lower RISC factors. In particular, the three benchmarks with the highest miss ratios on both machines also have the three lowest RISC factors.
Reference: [25] <author> Radin, G. </author> <title> The 801 Minicomputer. </title> <booktitle> Proc. Symp. on Architectural Support for Prog. Lang. and Op. Syst., </booktitle> <address> ACM/IEEE, Palo Alto, CA, </address> <month> March </month> <year> 1982, </year> <pages> pp. 39-47. </pages>
Reference-contexts: 1 Introduction The last decade has seen the emergence and rapid success of Reduced Instruction Set Computer, or RISC, architectures. Following early work by Cray [32, 27] and Cocke [6, 7] and an implementation at IBM <ref> [25] </ref>, university researchers, especially at Berkeley [23] and Stanford [16] developed design principles, built processors, and founded companies.
Reference: [26] <author> Riordan, T., et al. </author> <title> Design Using the MIPS R3000/R3010 RISC Chipset. </title> <booktitle> Proc. Compcon Spring 89, IEEE, </booktitle> <address> San Francisco, </address> <month> Spring </month> <year> 1989. </year>
Reference-contexts: Section 5 then briefly considers variations on implementation styles for both architectures and summarizes our basic results, concluding the paper. 2 Apparatus and Methods 2.1 The Machines We measured Digital's VAX 8700 (a single processor version of the 8800) [4, 11, 30] against MIPS Computer Systems' MIPS M/2000 <ref> [19, 26] </ref>. We concede at the outset that these two machines are very different in technology, size, and cost: the VAX processor is nine boards full of ECL gate arrays; the MIPS processor is one board with two custom CMOS chips.
Reference: [27] <author> Russell, </author> <title> R.M. The Cray-1 Computer System. </title> <journal> Comm. ACM 21, </journal> <month> 1 (Jan. </month> <year> 1978), </year> <pages> pp. 63-72. </pages>
Reference-contexts: 1 Introduction The last decade has seen the emergence and rapid success of Reduced Instruction Set Computer, or RISC, architectures. Following early work by Cray <ref> [32, 27] </ref> and Cocke [6, 7] and an implementation at IBM [25], university researchers, especially at Berkeley [23] and Stanford [16] developed design principles, built processors, and founded companies.
Reference: [28] <author> Saavedra-Barrera, </author> <title> R.H. The SPEC and Perfect Club Benchmarks: Promises and Limitations. Hot Chips Symposium 2. </title> <address> Santa Clara, CA, </address> <month> Aug. </month> <year> 1990. </year>
Reference-contexts: nasa7 2.10 3.01 14.95 4.97 2.37 fpppp 3.88 1.45 15.16 10.45 2.70 tomcatv 2.86 2.13 17.45 8.18 2.86 doduc 2.65 1.67 13.16 7.85 2.96 espresso 1.70 1.06 5.40 5.09 2.99 eqntott 1.08 1.25 4.38 3.51 3.25 li 1.62 1.10 6.53 5.97 3.69 geo. mean 2.17 1.71 9.87 5.77 2.66 benchmark <ref> [28] </ref>. We were not able to measure gcc on our instrumented VAX 8700, so all of our results are for the nine other benchmarks only. Also, our run of espresso used just one of the four input circuits (bca). <p> Spice has the lowest RISC factor, and its own pecularities. Saavedra-Barrera has observed that the particular input circuit used in the SPEC version causes spice to spend an unusually large amount of time in one small integer routine <ref> [28] </ref>. We have already seen that spice has the highest D-stream miss ratios, with the MIPS value being quite high (26.9 percent).
Reference: [29] <author> Smith, M.D., Johnson, M., and Horowitz, M.A. </author> <title> Limits on Multiple Instruction Issue. </title> <booktitle> Proc. Third Int. Conf. on Architectural Support for Prog. Lang. and Op. Syst., </booktitle> <address> ACM/IEEE, Boston, MA, </address> <month> April </month> <year> 1989, </year> <pages> pp. 290-302. </pages>
Reference-contexts: Just as VAX CPI can be improved by the gate-intensive approach of the model 9000 design, so RISC CPI can be improved by superscalar or superpipelined designs <ref> [18, 29] </ref>. The IBM RISC System/6000 [17], for example, has a peak issue rate of four instructions per cycle. So while VAX may "catch up" to current single-instruction-issue RISC performance, RISC designs will push on with earlier adoption of advanced implementation techniques, achieving still higher performance.
Reference: [30] <author> Strecker, W.D. </author> <title> VAX-11/780|A Virtual Address Extension for the PDP-11 Family Computers. </title> <booktitle> Proc. </booktitle> <publisher> NCC, AFIPS Press, </publisher> <address> Montvale, NJ, </address> <year> 1978, </year> <pages> pp. 967-980. </pages>
Reference-contexts: Section 5 then briefly considers variations on implementation styles for both architectures and summarizes our basic results, concluding the paper. 2 Apparatus and Methods 2.1 The Machines We measured Digital's VAX 8700 (a single processor version of the 8800) <ref> [4, 11, 30] </ref> against MIPS Computer Systems' MIPS M/2000 [19, 26]. We concede at the outset that these two machines are very different in technology, size, and cost: the VAX processor is nine boards full of ECL gate arrays; the MIPS processor is one board with two custom CMOS chips.
Reference: [31] <institution> Systems Performance Evaluation Cooperative. </institution> <note> SPEC Newsletter: Benchmark Results, Waterside Assoc., Fre-mont, CA, Fall 89, Winter 90, Spring 90. </note>
Reference-contexts: These factors should all contribute to a slightly wider difference in cycles per instruction between the MIPS system and the VAX system. 2.2 The Benchmarks We use the SPEC Release 1 benchmarks for our analysis <ref> [31] </ref>. SPEC is a non-profit corporation whose members include major workstation and computer companies such as Digital, HP, IBM, MIPS, Silicon Graphics, Sun, and others. SPEC was founded to develop a standard set of benchmarks that are application based. The first release has been available since October 1989. <p> The geometric mean of all ten ratios is called SPECmark. The SPEC Release 1 suite consists of four integer benchmarks (gcc, espresso, eqntott, and li) written in C, and six floating-point benchmarks (spice, doduc, nasa7, matrix300, fpppp, and tomcatv) written in Fortran. For details on these programs, see <ref> [31] </ref>. Even though spice was meant to be a floating-point benchmark, the circuit being simulated results in a fairly low use of floating-point operations, and should therefore be viewed as a mixed integer and floating-point Table 2: RISC factors instruc.
Reference: [32] <author> Thornton, </author> <title> J.E. Design of a Computer: The Control Data 6600. </title> <address> Glenview, IL: Scott, Foresman, </address> <publisher> and Co., </publisher> <year> 1970. </year>
Reference-contexts: 1 Introduction The last decade has seen the emergence and rapid success of Reduced Instruction Set Computer, or RISC, architectures. Following early work by Cray <ref> [32, 27] </ref> and Cocke [6, 7] and an implementation at IBM [25], university researchers, especially at Berkeley [23] and Stanford [16] developed design principles, built processors, and founded companies.
References-found: 32

