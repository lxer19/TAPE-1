URL: http://www.cse.psu.edu/~ugrain/vlsi-cad/MGAP/asap94-bio.ps
Refering-URL: http://www.cse.psu.edu/~ugrain/publications.html
Root-URL: 
Note: Copyright info.pub.permission@ieee.org. By choosing to view this document, you agree to all provisions of the copyright laws protecting it.  
Abstract: c fl1994 IEEE. All rights reserved. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution must be obtained from the IEEE. For information on obtaining permission, send a blank email message to
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K E Batcher. </author> <title> Design of a Massively Parallel Processor. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 29(9) </volume> <pages> 836-840, </pages> <month> Sep </month> <year> 1980. </year>
Reference-contexts: We also assume that the processors can be configured to communicate in different directions and to selectively enable/disable a set of processors. There have been several SIMD processor arrays built to date, some are corse-grained like the CM-2 [13] and MASPAR [2] and some are fine-grained like the MPP <ref> [1] </ref>, GAPP [9] and the MGAP [7]. We will consider the MGAP as the target for the problem described here. In order to better understand the mapping of the problem onto the hardware we provide a brief overview of the MGAP.
Reference: [2] <author> Tom Blank. </author> <title> The MasPas MP-1 Architecture. </title> <booktitle> Proc of IEEE Compcon, </booktitle> <month> Spring </month> <year> 1990, </year> <month> Feb </month> <year> 1990. </year>
Reference-contexts: We also assume that the processors can be configured to communicate in different directions and to selectively enable/disable a set of processors. There have been several SIMD processor arrays built to date, some are corse-grained like the CM-2 [13] and MASPAR <ref> [2] </ref> and some are fine-grained like the MPP [1], GAPP [9] and the MGAP [7]. We will consider the MGAP as the target for the problem described here. In order to better understand the mapping of the problem onto the hardware we provide a brief overview of the MGAP.
Reference: [3] <author> E. S. Chen, C. Asano, and D. B. Davidson. </author> <title> Parallel alignment of DNA sequences on the Connection Machine CM-2. </title> <booktitle> Computer Applications in the Biosciences, </booktitle> <address> 9(3):375, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Mukher-jee [10] presented computation of a related problem, the longest common subsequence computation on a linear systolic array. Hunkerpiller, et al. built special purpose hardware to solve the alignment problem [6]. In <ref> [3] </ref> Chen, et al. describe a parallel implementation on the CM-2. All these implementations are either special hardware ([8, 6]) in which case the system is useful only for limited applications, or SIMD machines with macro-grained processing elements ([3]), consequently systems with large number of processors are usually not feasible (e.g,
Reference: [4] <author> M. Gokhale, W. Holmes, A. Kopser, S. Lucas, R. Minnich, D. Sweely, and D. Lopresti. </author> <title> Building and Using a Highly Parallel Programmable Logic Array. </title> <journal> IEEE Computer, </journal> <volume> 24(1) </volume> <pages> 81-89, </pages> <year> 1991. </year>
Reference-contexts: At the clock rate of 25MHz the time required is 11.08 sec. Therefore it can compute at the rate of about 0.1 million sequence comparisons per second. This is about 5 times faster than the systolic implementation on the SPLASH-1 described in <ref> [8, 4] </ref> for sequences of length 100, assuming that the main compute element of SPLASH-1 is running at its peak speed of 4MHz, not slowed down by the VME speed.
Reference: [5] <author> D. S. Hirschberg. </author> <title> A Linear Space Algorithm for Computing Longest Common Subsequences. </title> <journal> Communications of the ACM, </journal> <volume> 18 </volume> <pages> 341-343, </pages> <year> 1975. </year>
Reference-contexts: Myers and Miller [12] showed a divide and conquer method of computing one of the alignments leading to the optimum cost in O (M + N ) space based on the approach of <ref> [5] </ref>. In [11] Myers presented an overview of algorithms related to sequence comparison in molecular biology. 5: The SIMD algorithm on a fine-grained processor Many approaches have been taken to compute the alignments in parallel.
Reference: [6] <author> T. Hunkerpiller, M. Waterman, R. Jones, M. Eggert, E. Chow, J. Peterson, and L. Hood. </author> <title> Special Purpose VLSI-Based System for the analysis of Genetic Sequences. </title> <booktitle> Human Genome:1989-90 Program Report, </booktitle> <pages> page 101, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: However, when the size of each sequence can be several hundreds of nucleotides, and the size of the database is also in the thousands, sequential algorithms can barely keep up with the demand. Several parallel algorithms based on linear systolic arrays [8] specialized hardware <ref> [6] </ref> and distributed computing have been developed. Recently, SIMD array processors have gained a lot of popularity due to their generality and high performance. Fine-grained processor arrays have the added advantage of being highly affordable and exploiting fine grained parallelism at the digit or bit level [7]. <p> Mukher-jee [10] presented computation of a related problem, the longest common subsequence computation on a linear systolic array. Hunkerpiller, et al. built special purpose hardware to solve the alignment problem <ref> [6] </ref>. In [3] Chen, et al. describe a parallel implementation on the CM-2.
Reference: [7] <author> M. J. Irwin and R. M. Owens. </author> <title> A Micro-Grained VLSI Signal Processor. </title> <booktitle> ICASSP, </booktitle> <pages> pages 641-644, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Recently, SIMD array processors have gained a lot of popularity due to their generality and high performance. Fine-grained processor arrays have the added advantage of being highly affordable and exploiting fine grained parallelism at the digit or bit level <ref> [7] </ref>. In this paper we present an SIMD implementation of the sequence comparison algorithm on a fine-grained processor array with fully pipelined operations. The next section throws some light on the basic sequence alignment problem and its importance. Section 3 describes the features of the target architecture. <p> There have been several SIMD processor arrays built to date, some are corse-grained like the CM-2 [13] and MASPAR [2] and some are fine-grained like the MPP [1], GAPP [9] and the MGAP <ref> [7] </ref>. We will consider the MGAP as the target for the problem described here. In order to better understand the mapping of the problem onto the hardware we provide a brief overview of the MGAP. <p> In order to better understand the mapping of the problem onto the hardware we provide a brief overview of the MGAP. The MGAP is a simple, yet general and flexible architecture, that enables massive parallelism to bear upon many problems in an economical manner <ref> [7] </ref>. The core of the MGAP is a massively parallel array of 16,384 processors implemented as thirty two, 1:2 CMOS chips occupying about half the area of a 9U fi 400 mm Sun VME board.
Reference: [8] <author> Daniel P. Lopresti. </author> <title> Rapid Implementation of a Genetic Sequence Comparator Using Field Programmable Logic Arrays. </title> <booktitle> Advanced Research in VLSI, </booktitle> <pages> pages 138-152, </pages> <year> 1991. </year>
Reference-contexts: However, when the size of each sequence can be several hundreds of nucleotides, and the size of the database is also in the thousands, sequential algorithms can barely keep up with the demand. Several parallel algorithms based on linear systolic arrays <ref> [8] </ref> specialized hardware [6] and distributed computing have been developed. Recently, SIMD array processors have gained a lot of popularity due to their generality and high performance. Fine-grained processor arrays have the added advantage of being highly affordable and exploiting fine grained parallelism at the digit or bit level [7]. <p> Since a dynamic programming algorithm easily lends itself to systolic computation, attempts to compute the same in systolic manner on a FPGA synthesized linear array was presented in <ref> [8] </ref>. Mukher-jee [10] presented computation of a related problem, the longest common subsequence computation on a linear systolic array. Hunkerpiller, et al. built special purpose hardware to solve the alignment problem [6]. In [3] Chen, et al. describe a parallel implementation on the CM-2. <p> At the clock rate of 25MHz the time required is 11.08 sec. Therefore it can compute at the rate of about 0.1 million sequence comparisons per second. This is about 5 times faster than the systolic implementation on the SPLASH-1 described in <ref> [8, 4] </ref> for sequences of length 100, assuming that the main compute element of SPLASH-1 is running at its peak speed of 4MHz, not slowed down by the VME speed. <p> We show that our implementation is about 5 times faster than the SPLASH implementation <ref> [8] </ref>. Showing thereby, that massively parallel processor arrays, like the MGAP possess the capability to solve computationally intensive problems in Molecular Biology efficiently and inexpensively. The MGAP-1 is up and running.
Reference: [9] <author> Hord R. M. </author> <title> Parallel Supercomputing in SIMD Architectures. </title> <publisher> CRC Press, </publisher> <year> 1990. </year>
Reference-contexts: There have been several SIMD processor arrays built to date, some are corse-grained like the CM-2 [13] and MASPAR [2] and some are fine-grained like the MPP [1], GAPP <ref> [9] </ref> and the MGAP [7]. We will consider the MGAP as the target for the problem described here. In order to better understand the mapping of the problem onto the hardware we provide a brief overview of the MGAP.
Reference: [10] <author> Amar Mukherjee. </author> <title> Determining Longest Common Subsequences of Two Sequences on a Linear array of Processors. </title> <booktitle> ASAP, </booktitle> <pages> pages 526-537, </pages> <year> 1992. </year>
Reference-contexts: Since a dynamic programming algorithm easily lends itself to systolic computation, attempts to compute the same in systolic manner on a FPGA synthesized linear array was presented in [8]. Mukher-jee <ref> [10] </ref> presented computation of a related problem, the longest common subsequence computation on a linear systolic array. Hunkerpiller, et al. built special purpose hardware to solve the alignment problem [6]. In [3] Chen, et al. describe a parallel implementation on the CM-2.
Reference: [11] <author> Eugene W. Myers. </author> <title> An Overview of Sequence Comparison Algorithms in Molecular Biology. </title> <institution> Dept of Computer Science, University of Arizona, </institution> <type> TR 91(29), </type> <year> 1991. </year>
Reference-contexts: Myers and Miller [12] showed a divide and conquer method of computing one of the alignments leading to the optimum cost in O (M + N ) space based on the approach of [5]. In <ref> [11] </ref> Myers presented an overview of algorithms related to sequence comparison in molecular biology. 5: The SIMD algorithm on a fine-grained processor Many approaches have been taken to compute the alignments in parallel.
Reference: [12] <author> Eugene W. Myers and W. Miller. </author> <title> Optimal Alignment in Linear Space. </title> <journal> CABIOS, </journal> <volume> 4(1) </volume> <pages> 11-17, </pages> <year> 1988. </year>
Reference-contexts: The alignment with maximum score is considered the best alignment. The current size of genetic sequence databases is quite large, consequently requiring an enormous amount of computing power, which is usually not available to most investigators, to perform extensive similarity analysis. Efficient dynamic programming based algorithms have been developed <ref> [12] </ref> with quadratic time complexity and linear space requirements. However, when the size of each sequence can be several hundreds of nucleotides, and the size of the database is also in the thousands, sequential algorithms can barely keep up with the demand. <p> An important extension of the problem is to report the alignment with maximum score. If we need to use backward tracing, then we need to retain all the O (MN) values, requiring O (MN) space. Myers and Miller <ref> [12] </ref> showed a divide and conquer method of computing one of the alignments leading to the optimum cost in O (M + N ) space based on the approach of [5].

References-found: 12

