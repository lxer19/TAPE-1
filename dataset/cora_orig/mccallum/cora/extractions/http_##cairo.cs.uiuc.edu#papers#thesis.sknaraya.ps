URL: http://cairo.cs.uiuc.edu/papers/thesis.sknaraya.ps
Refering-URL: http://cairo.cs.uiuc.edu/papers.html
Root-URL: http://www.cs.uiuc.edu
Title: c  
Author: flCopyright by Srinivas Kannappan Narayan 
Date: 1997  
Abstract-found: 0
Intro-found: 1
Reference: [1] <institution> Experimental Internet Stream Protocol : Version 2 (ST II), C. Topolocic, Internet Working Group, RFC 1190, </institution> <month> October </month> <year> 1990. </year>
Reference-contexts: The major objective is to design and implement such a multimedia-efficient transport subsystem on UNIX workstations which are connected by a high-speed ATM network. 1.1 Related Work There are a number of projects working on the development of fast/real-time transport protocols for multimedia transmission and QoS management, such as ST-II <ref> [1] </ref>, Tenet Protocol Suite [2], [3], [4], Heidelberg Transport Subsystem [5], QoS-A architecture [6], Native ATM Protocol Stack [9], User Space TCP Implementation [11], the Omega Architecture [7] and others.
Reference: [2] <institution> A Continuous Media Data Transport Service and Protocol for Real-Time Communication in High Speed Networks, B. Wolfinger and M. Moran, University of California at Berkeley, </institution> <year> 1991. </year>
Reference-contexts: to design and implement such a multimedia-efficient transport subsystem on UNIX workstations which are connected by a high-speed ATM network. 1.1 Related Work There are a number of projects working on the development of fast/real-time transport protocols for multimedia transmission and QoS management, such as ST-II [1], Tenet Protocol Suite <ref> [2] </ref>, [3], [4], Heidelberg Transport Subsystem [5], QoS-A architecture [6], Native ATM Protocol Stack [9], User Space TCP Implementation [11], the Omega Architecture [7] and others.
Reference: [3] <author> Preliminary Measurement of the RMTP/RTIP, H. Zhang and T. Fisher, </author> <booktitle> Proceedings of the Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> San Diego, CA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: design and implement such a multimedia-efficient transport subsystem on UNIX workstations which are connected by a high-speed ATM network. 1.1 Related Work There are a number of projects working on the development of fast/real-time transport protocols for multimedia transmission and QoS management, such as ST-II [1], Tenet Protocol Suite [2], <ref> [3] </ref>, [4], Heidelberg Transport Subsystem [5], QoS-A architecture [6], Native ATM Protocol Stack [9], User Space TCP Implementation [11], the Omega Architecture [7] and others.
Reference: [4] <editor> The Real-Time Channel Administration Protocol, A. Banerjea and B. Mah, </editor> <booktitle> Proceedings of the Second International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> Heidelberg, Germany, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: and implement such a multimedia-efficient transport subsystem on UNIX workstations which are connected by a high-speed ATM network. 1.1 Related Work There are a number of projects working on the development of fast/real-time transport protocols for multimedia transmission and QoS management, such as ST-II [1], Tenet Protocol Suite [2], [3], <ref> [4] </ref>, Heidelberg Transport Subsystem [5], QoS-A architecture [6], Native ATM Protocol Stack [9], User Space TCP Implementation [11], the Omega Architecture [7] and others.
Reference: [5] <institution> The System Architecture of the Heidelberg Transport System, </institution> <note> L. </note> <editor> Wolf and R. G. Her-rtwich, </editor> <booktitle> ACM Operating Systems Review, </booktitle> <volume> 28(2), </volume> <month> April </month> <year> 1994. </year>
Reference-contexts: multimedia-efficient transport subsystem on UNIX workstations which are connected by a high-speed ATM network. 1.1 Related Work There are a number of projects working on the development of fast/real-time transport protocols for multimedia transmission and QoS management, such as ST-II [1], Tenet Protocol Suite [2], [3], [4], Heidelberg Transport Subsystem <ref> [5] </ref>, QoS-A architecture [6], Native ATM Protocol Stack [9], User Space TCP Implementation [11], the Omega Architecture [7] and others.
Reference: [6] <author> Implementation and Evaluation of the QoS-A Transport System, Andrew Campbell and Geoff Coulson, </author> <title> Protocols for High Speed Networks V, </title> <type> pgs 201-218, </type> <institution> Inria, France. </institution>
Reference-contexts: on UNIX workstations which are connected by a high-speed ATM network. 1.1 Related Work There are a number of projects working on the development of fast/real-time transport protocols for multimedia transmission and QoS management, such as ST-II [1], Tenet Protocol Suite [2], [3], [4], Heidelberg Transport Subsystem [5], QoS-A architecture <ref> [6] </ref>, Native ATM Protocol Stack [9], User Space TCP Implementation [11], the Omega Architecture [7] and others. Some of these projects are implemented on PCs, some of them are not implemented on ATM networks, and the others do not take all the QoS parameters in our purview into account.
Reference: [7] <institution> An architecture for end-to-end Quality of Service Provision and its experimental validation, Klara Nahrstedt, </institution> <type> Ph.D thesis, </type> <year> 1995. </year>
Reference-contexts: There are a number of projects working on the development of fast/real-time transport protocols for multimedia transmission and QoS management, such as ST-II [1], Tenet Protocol Suite [2], [3], [4], Heidelberg Transport Subsystem [5], QoS-A architecture [6], Native ATM Protocol Stack [9], User Space TCP Implementation [11], the Omega Architecture <ref> [7] </ref> and others. Some of these projects are implemented on PCs, some of them are not implemented on ATM networks, and the others do not take all the QoS parameters in our purview into account. Hence, none of the mentioned projects match our objectives. <p> control operations in the critical protocol processing path 2 * Avoids virtual memory operations during network I/O * Uses the least amount of system calls and context switches However, this implementation was again on PCs and Sparc machines running the FreeBSD operating system. 1.1.3 The Omega Architecture The Omega Architecture <ref> [7] </ref> is an endpoint architecture which extends network real-time services towards applications to achieve application-to-application QoS guarantees. It models distributed systems as end-points connected by a network infrastructure.
Reference: [8] <author> The QoS Broker, Klara Nahrstedt and Jonathan Smith, </author> <booktitle> IEEE Multimedia, Spring 1995. </booktitle> <pages> 44 </pages>
Reference-contexts: Our QoS management architecture attempts to provide complete support for end-to-end QoS guarantees. The architecture consists of management entities called brokers <ref> [8] </ref>, which work together to provide the applications with guaranteed resources. The current architecture uses three brokers to manage three critical resources in the system the network, the CPU and the memory.
Reference: [9] <author> Design, </author> <title> Implementation and Performance Measurement of a Native-mode ATM Transport Layer, </title> <editor> R. Ahuja, S. Keshav and H. </editor> <title> Saran, </title> <journal> IEEE/ACM Transactions on Networking, </journal> <month> August </month> <year> 1996. </year>
Reference-contexts: connected by a high-speed ATM network. 1.1 Related Work There are a number of projects working on the development of fast/real-time transport protocols for multimedia transmission and QoS management, such as ST-II [1], Tenet Protocol Suite [2], [3], [4], Heidelberg Transport Subsystem [5], QoS-A architecture [6], Native ATM Protocol Stack <ref> [9] </ref>, User Space TCP Implementation [11], the Omega Architecture [7] and others. Some of these projects are implemented on PCs, some of them are not implemented on ATM networks, and the others do not take all the QoS parameters in our purview into account. <p> We will review briefly only a few related projects 1 which had a major impact on our system design and implementation. Details of those projects can be found in the papers or WWW sites mentioned. 1.1.1 Native ATM The Native ATM protocol stack <ref> [9] </ref> is a novel protocol stack possessing the following key features : * It is designed specifically to work over an ATM network. * It attempts to provide guaranteed service quality relatively independent of the operating environment. * It exploits the services of an underlying AAL5 layer * It uses a
Reference: [10] <author> SMART Retransmission : Performance with Random Losses and Overload, S. Keshav and S. P. Morgan, </author> <month> INFOCOM </month> <year> 1997. </year>
Reference-contexts: * It is designed specifically to work over an ATM network. * It attempts to provide guaranteed service quality relatively independent of the operating environment. * It exploits the services of an underlying AAL5 layer * It uses a new retransmission scheme called SMART (Simple Method to Aid ReTransmis sions) <ref> [10] </ref> which performs significantly better than the go-back-n scheme of TCP. * It provides reliable and unreliable data delivery with a choice of feedback and leaky-bucket flow control. These services can be combined to create per-virtual-circuit customized transport services. <p> In our scheme, the grouping of TPDUs is performed at an application PDU (APDU) level, i.e., one acknowledgement is sent for the group of TPDUs belonging to one APDU. The idea of sending NACKs is borrowed from the SMART retransmission scheme of the native ATM protocol stack <ref> [10] </ref>. Whenever any TPDUs are missed, the range of missing TPDUs (i.e., the sequence number of the first missing TPDU and the sequence number of the next TPDU received) are sent out in the NACK. The sending side on receiving the NACK retransmits only the TPDUs in the range specified. <p> However, if there is no response from the receiver to the first retransmission, the pessimistic scenario is assumed and all unacknowledged timed-out PDUs are retransmitted. This technique of clever retransmission was found to dramatically improve the performance of the transport layer. The idea is similar to the SMART technqiue <ref> [10] </ref> mentioned previously. The difference is that there is no concept of a cumulative acknowledgement as in SMART. Also, in SMART retransmission, the selective retransmission is based only on the NACKs sent by the receiver. There is no scheme to perform intelligent retransmissions when timeouts occur.
Reference: [11] <institution> Efficient User Space Protocol Implementations with QoS guarantees using Real-Time Up-calls, R. Gopalakrishnan and Gurudatta M. Parulkar, Department of Computer Science, Washington University in St. Louis. </institution>
Reference-contexts: network. 1.1 Related Work There are a number of projects working on the development of fast/real-time transport protocols for multimedia transmission and QoS management, such as ST-II [1], Tenet Protocol Suite [2], [3], [4], Heidelberg Transport Subsystem [5], QoS-A architecture [6], Native ATM Protocol Stack [9], User Space TCP Implementation <ref> [11] </ref>, the Omega Architecture [7] and others. Some of these projects are implemented on PCs, some of them are not implemented on ATM networks, and the others do not take all the QoS parameters in our purview into account. Hence, none of the mentioned projects match our objectives. <p> Also, a part of the stack resides in the kernel of the operating system. The aim of our project is to design a framework which operates completely in user-space and functions on workstations. 1.1.2 User Space TCP Implementation with Real-time Upcalls The User Space TCP Implementation <ref> [11] </ref> project is a novel attempt to provide support for multimedia processing using existing protocols instead of designing new protocols. It uses an operating system feature called Real-Time Upcalls to provide QoS guarantees to network applications.
Reference: [12] <institution> Computer Networks, </institution> <address> Tanenbaum, </address> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: If the sender does not receive an acknowledgement for any 15 TPDU, only that TPDU is retransmitted. This is one of the most primitive acknowledgement schemes, discussed in popular networking textbooks <ref> [12] </ref>. This scheme was implemented with the idea that the high bandwidth capabilities of the network would subsume the bandwidth required for the acknowledgements.
Reference: [13] <editor> Internetworking with TCP/IP, </editor> <volume> Volume 1: </volume> <booktitle> Principles Protocols, and Architecture, </booktitle> <publisher> Douglas </publisher>
References-found: 13

