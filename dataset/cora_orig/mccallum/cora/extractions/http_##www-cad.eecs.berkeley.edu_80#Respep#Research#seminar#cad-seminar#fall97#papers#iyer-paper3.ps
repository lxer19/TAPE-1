URL: http://www-cad.eecs.berkeley.edu:80/Respep/Research/seminar/cad-seminar/fall97/papers/iyer-paper3.ps
Refering-URL: http://www-cad.eecs.berkeley.edu:80/Respep/Research/seminar/cad-seminar/fall97/abstract/iyer.html
Root-URL: http://www.cs.berkeley.edu
Title: FIRE: A Fault-Independent Combinational Redundancy Identification Algorithm  
Author: Mahesh A. Iyer and Miron Abramovici 
Abstract: FIRE is a novel Fault-Independent algorithm for combinational REdundancy identification. The algorithm is based on a simple concept that a fault which requires a conflict as a necessary condition for its detection is undetectable and hence redundant. FIRE does not use the backtracking-based exhaustive search performed by fault-oriented automatic test generation algorithms, and identifies redundant faults without any search. Our results on benchmark and real circuits indicate that we find a large number of redundancies, much faster than a test-generation-based approach for redundancy identification. However, FIRE is not guaranteed to identify all redundancies in a circuit. _ _____________ Index terms: Redundancy identification, automatic test generation, logic synthesis 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. D. Friedman, </author> <title> ``Fault Detection in Redundant Circuits,'' </title> <journal> IEEE Trans. on Electronic Computers, </journal> <volume> vol.EC-16, </volume> <pages> pp. 99-100, </pages> <month> February </month> <year> 1967. </year>
Reference-contexts: In addition to complicating ATG, redundancies have many other detrimental effects. The presence of a redundant fault may preclude the detection of other faults in the circuit and may convert a complete detection test set into an incomplete one <ref> [1] </ref>. Redundancies increase the chip area, the power consumption and often the propagation delays in the circuit. Redundancies may also unnecessarily reduce the yield of the IC manufacturing process [2]. For example, many combinationally redundant faults become detectable with I DDQ testing.
Reference: [2] <author> S. Davidson, </author> <title> ``Is I DDQ Yield Loss Inevitable ?,'' Proc. </title> <booktitle> Intn'l. Test Conf., </booktitle> <pages> pp. 572-579, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Redundancies increase the chip area, the power consumption and often the propagation delays in the circuit. Redundancies may also unnecessarily reduce the yield of the IC manufacturing process <ref> [2] </ref>. For example, many combinationally redundant faults become detectable with I DDQ testing. Although the circuit remains fully operational in the presence of a redundant fault, I DDQ testing will reject that faulty circuit and will result in a yield loss.
Reference: [3] <author> M. Harihara and P. R. Menon, </author> <title> ``Identification of Undetectable Faults in Combinational Circuits,'' </title> <booktitle> Proc. Intn'l. Conf. on Computer Design, </booktitle> <pages> pp. 290-293, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Our observation is that such conflicts often map as conflicts on reconvergent inputs of reconvergent gates. Example 4: Consider the circuit in Figure 7 <ref> [3] </ref> and the fault f sa-0. Clearly, the activation of this fault requires c = d = a1 = b1 = a = b = 1. Also, to propagate the fault-effect from f, e has to be 0 which requires either a or b to have value 0.
Reference: [4] <author> P. R. Menon and H. Ahuja, </author> <title> ``Redundancy Removal and Simplification of Combinational Circuits,'' </title> <booktitle> Digest of Papers, IEEE VLSI Test Symp., </booktitle> <pages> pp. 268-273, </pages> <month> April </month> <year> 1992. </year>
Reference: [5] <author> H. Fujiwara and T. Shimono, </author> <title> ``On the acceleration of test generation algorithms,'' </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. C-32, </volume> <pages> pp. 1137-1114, </pages> <month> December </month> <year> 1983. </year>
Reference: [6] <author> M. Abramovici, J. J. Kulikowski, P. R. Menon, and D. T. Miller, </author> <title> ``SMART and FAST: Test Generation for VLSI scan-design circuits,'' </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <pages> pp. 53-54, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: The experimental results reported in the next section attest the efficiency of the algorithm. 4. Results FIRE was implemented in C in a prototype program. To compare FIRE with a fault-oriented approach for RID, we used the LTG test generation/ fault simulation package <ref> [6] </ref>. Faults proved redundant by FIRE were passed as targets to LTG with a backtrack limit of 100. LTG also has the advantage of dynamic RID - 6 - techniques [18]. It is true that in a free run, LTG would, in general, identify more redundancies than FIRE.
Reference: [7] <author> T. Krikland and M. R. Mercer, </author> <title> ``A topological search algorithm for ATPG,'' </title> <booktitle> Proc. 24th. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 502-508, </pages> <month> June </month> <year> 1987. </year>
Reference: [8] <author> M. H. Schulz and E. Auth, </author> <title> ``Improved deterministic test pattern generation with applications to redundancy identification,'' </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> vol. 8, </volume> <pages> pp. 811-816, </pages> <month> July </month> <year> 1989. </year> <month> - 8 </month> - 
Reference: [9] <author> J. Rajski and H. Cox, </author> <title> ``A method to calculate necessary assignments in algorithmic test pattern generation,'' </title> <booktitle> Proc. Intn'l. Test Conf., </booktitle> <pages> pp. 25-34, </pages> <month> September </month> <year> 1990. </year>
Reference: [10] <author> J. Giraldi and M. L. Bushnell, </author> <title> ``Search State Equivalence for Redundancy Identification and Test Generation,'' </title> <booktitle> Proc. Intn'l. Test Conf., </booktitle> <pages> pp. 184-193, </pages> <month> October </month> <year> 1991. </year>
Reference: [11] <author> W. Kunz and D. K. Pradhan, </author> <title> ``Recursive Learning: An Attractive Alternative to the Decision Tree for Test Generation in Digital Circuits,'' </title> <booktitle> Proc. Intn'l. Test Conf., </booktitle> <pages> pp. 816-825, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: In contrast, the analysis performed by FIRE is much simpler, and dominators and reconvergent gates are analyzed only implicitly. Most indirect RID methods [5,6,7,8,9,10] attempt to accelerate ATG using several preprocessing and dynamic techniques. More recently, other improved combinational test generators use powerful implication procedures <ref> [11] </ref> or boolean satisfiability formulations [12]. Nevertheless, all these approaches are fault-oriented and require a branch-and-bound search to accomplish RID as a byproduct. Once a redundant region associated with a redundant fault is removed, new redundancies may be introduced in the circuit.
Reference: [12] <author> S. T. Chakradhar, V. D. Agrawal, and S. G. Rothweiler, </author> <title> ``A Transitive Closure Algorithm for Test Generation,'' </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> vol. 12, no. 7, </volume> <pages> pp. 1015-1028, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Most indirect RID methods [5,6,7,8,9,10] attempt to accelerate ATG using several preprocessing and dynamic techniques. More recently, other improved combinational test generators use powerful implication procedures [11] or boolean satisfiability formulations <ref> [12] </ref>. Nevertheless, all these approaches are fault-oriented and require a branch-and-bound search to accomplish RID as a byproduct. Once a redundant region associated with a redundant fault is removed, new redundancies may be introduced in the circuit. <p> FIRE performed much better than LTG for all the circuits. A speed-up ratio of up to 37 was achieved for these circuits. Table 6 shows the percentage of redundancies identified by FIRE in the benchmark circuits. Since TRAN <ref> [12] </ref> is a state-of-the-art combinational test generator that reports all the single-fault redundant faults in the benchmark circuits, we used it for our comparisons. The TRAN CPU times are also for a SUN sparc2 and include times for random test generation, transitive closure algorithm and fault simulation.
Reference: [13] <author> M. Abramovici and M. A. Iyer, </author> <title> ``One-Pass Redundancy Identification and Removal,'' </title> <booktitle> Proc. Intn'l. Test Conf., </booktitle> <pages> pp. 807-815, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Nevertheless, all these approaches are fault-oriented and require a branch-and-bound search to accomplish RID as a byproduct. Once a redundant region associated with a redundant fault is removed, new redundancies may be introduced in the circuit. In earlier work <ref> [13] </ref>, we proposed a dynamic RID technique to identify a subset of these newly created redundancies. This technique was based on analyzing combinations of values that become illegal as a result of the removal and was used to avoid repeated runs of ATG and fault simulation.
Reference: [14] <author> M. A. Iyer and M. Abramovici, </author> <title> ``Low-Cost Redundancy Identification for Combinational Circuits,'' </title> <booktitle> Proc. 7th. Intn'l. Conf. on VLSI Design, </booktitle> <pages> pp. 315-318, </pages> <month> January </month> <year> 1994. </year>
Reference: [15] <author> M. A. Iyer, </author> <title> ``On Redundancy and Untestability in Sequential Circuits,'' </title> <type> Ph.D. Thesis, </type> <institution> ECE Department, Illinois Institute of Technology, </institution> <address> Chicago, IL - 60616, </address> <month> July </month> <year> 1995. </year>
Reference: [16] <author> O. H. Ibarra and S. K. Sahni, </author> <title> ``Polynomially Complete Fault Detection Problems,'' </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. C-24, </volume> <pages> pp. 242-249, </pages> <month> March </month> <year> 1975. </year>
Reference-contexts: Its key advantages are that RID can be accomplished without any search and that several redundant faults may be identified by analyzing the same conflict. FIRE has polynomial-time complexity. Hence it is not guaranteed to identify all redundancies in a circuit, since the RID problem is NP-complete <ref> [16] </ref>. FIRE can be used as a preprocessor to an ATG program, which can avoid targeting the faults identified as redundant and thus save the large computational effort associated with them. <p> Moreover, in practice, these implications for a stem remains the same as the circuit size increases. Therefore the worst-case situation never occurs in practice. Thus, in practice, FIRE identifies redundancies in linear time and this is very important, considering that the RID problem is NP-complete <ref> [16] </ref>. However, FIRE is not guaranteed to find all the redundancies in the circuit. The experimental results reported in the next section attest the efficiency of the algorithm. 4. Results FIRE was implemented in C in a prototype program.
Reference: [17] <author> M. Abramovici, J. J. Kulikowski, and R. K. Roy, </author> <title> ``The Best Flip-Flops to Scan,'' </title> <booktitle> Proc. Intn'l. Test Conference, </booktitle> <pages> pp. 166-173, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: The faults in S X become undetectable when X cannot assume value a (or when X is uncontrollable for value a). To find these faults, we use an improved version of the uncontrollability and unobservability analysis introduced in <ref> [17] </ref>. In this analysis, 0 _ _ ) denotes the status of a line that is uncontrollable for value 0 (1). Note that this uncontrollability is conditional and occurs only when X cannot have value a.
Reference: [18] <author> M. Abramovici, D. T. Miller, and R. K. Roy, </author> <title> ``Dynamic Redundancy Identification in Automatic Test Generation,'' </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <pages> pp. 404-407, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: To compare FIRE with a fault-oriented approach for RID, we used the LTG test generation/ fault simulation package [6]. Faults proved redundant by FIRE were passed as targets to LTG with a backtrack limit of 100. LTG also has the advantage of dynamic RID - 6 - techniques <ref> [18] </ref>. It is true that in a free run, LTG would, in general, identify more redundancies than FIRE. However, the purpose of these experiments is to testify how much time LTG would save by not targeting the faults proved redundant by FIRE.
Reference: [19] <author> F. Brglez and H. Fujiwara, </author> <title> ``Neutral netlist of ten combinational benchmark circuits and a target translator in FORTRAN,'' </title> <booktitle> Proc. IEEE Intn'l. Symp. on Circuits and Systems, </booktitle> <month> June </month> <year> 1985. </year>
Reference-contexts: However, the purpose of these experiments is to testify how much time LTG would save by not targeting the faults proved redundant by FIRE. FIRE was run on the ISCAS85 Table 4 shows the comparison for the ISCAS85 combinational benchmark circuits <ref> [19] </ref> and for the full-scan versions of the ISCAS89 sequential benchmark circuits [20]. These results are for a collapsed set of faults. We show only the the circuits where redundancies were identified by FIRE. #Red. represents the number of identified redundancies.
Reference: [20] <author> F. Brglez, D. Bryan, and K. Kozminski, </author> <title> ``Combinational profiles of sequential benchmark circuits,'' </title> <booktitle> Proc. 1989 Intn'l. Symp. on Circuits and Systems, </booktitle> <pages> pp. 1929-1934, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: FIRE was run on the ISCAS85 Table 4 shows the comparison for the ISCAS85 combinational benchmark circuits [19] and for the full-scan versions of the ISCAS89 sequential benchmark circuits <ref> [20] </ref>. These results are for a collapsed set of faults. We show only the the circuits where redundancies were identified by FIRE. #Red. represents the number of identified redundancies. The CPU times are in seconds for a SUN sparc2. #Abo. represents the number of targets aborted by LTG.
Reference: [21] <author> M. A. Iyer and M. Abramovici, </author> <title> ``Sequentially Untestable Faults Identified Without Search (Simple Implications Beat Exhaustive Search !),'' Proc. </title> <booktitle> Intn'l. Test Conf., </booktitle> <pages> pp. 259-266, </pages> <month> October </month> <year> 1994. </year>
Reference: [22] <author> D. E. Long, M. A. Iyer, and M. Abramovici, </author> <title> ``Identifying Sequentially Untestable Faults Using Illegal States,'' </title> <booktitle> 13th. IEEE VLSI Test Symp., </booktitle> <pages> pp. 4-11, </pages> <month> May </month> <year> 1995. </year>

References-found: 22

