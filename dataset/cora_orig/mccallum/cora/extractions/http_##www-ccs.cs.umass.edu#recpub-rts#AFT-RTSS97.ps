URL: http://www-ccs.cs.umass.edu/recpub-rts/AFT-RTSS97.ps
Refering-URL: http://www-ccs.cs.umass.edu/recpub-rts/index.html
Root-URL: 
Email: e-mail: -ogonzale, shri, krithi-@cs.umass.edu, stankovic@cs.virginia.edu  
Phone: phone: (413) 545-4753 Fax: (413) 545-1249  
Title: Adaptive Fault Tolerance and Graceful Degradation Under Dynamic Hard Real-time Scheduling  
Author: Oscar Gonzalez, H. Shrikumar, John A. Stankovic Krithi Ramamritham 
Address: Amherst, MA 01003  Charlottesville, VA 22903  
Affiliation: Dept. of Computer Science, University of Massachusetts,  Dept. of Computer Science, University of Virginia,  
Abstract: In this paper, we propose a mechanism for supporting adaptive fault tolerance in a real-time system. Adaptation is achieved by choosing a suitable redundancy strategy for a dynamically arriving computation to assure required reliability and to maximize the potential for fault tolerance while ensuring that deadlines are met. The proposed approach is evaluated using a real-life workload simulating radar tracking software in AWACS early warning aircraft. The results demonstrate that our technique outperforms static fault tolerance strategies in terms of tasks meeting their timing constraints. Further, we show that the gain in this timing-centric performance metric does not reduce the fault tolerance of the executing tasks below a predefined minimum level. Overall, the evaluation indicates that the proposed ideas result in a system that dynamically provides QOS guarantees along the fault-tolerance dimension. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bodson, J. Lehoczky, R. Rajkumar, L. Sha, and J. Stephan. </author> <title> Fault-Tolerant Automatic Control, </title> <editor> D. Fussell and M. Malek, eds., </editor> <booktitle> chapter 11. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995. </year>
Reference-contexts: Their approach is based on the addition of transitions to the Markov model of a system's behavior for modeling a system failure due to the missing of a hard deadline. The system's response time and throughput distributions are used to denote the reward rates. The Simplex architecture, in <ref> [1] </ref>, provides a different approach to software fault tolerance. A high performance software system is combined with a highly reliable one in order to exploit their differences. This approach anticipates when a failure is about to occur in order to activate an adaptation mechanism.
Reference: [2] <author> A. Bondavalli, J. Stankovic, and L. Strigini. </author> <title> Adaptable Fault Tolerance for Real-Time Systems. </title> <booktitle> Proc. Third International Workshop on Responsive Computer Systems, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: The main advantage of this approach is the addition of flexibility for managing redundancy while preserving timing-related predictability <ref> [2] </ref>. 1.2 AFT in a Hard Real Time System A key issue in developing such a framework is the efficient integration of on-line adaptive management of redundancy and the real-time scheduler in a multi-processor hard real 1 time environment. <p> The AFT strategies of each type of task is specified using the FERT notation <ref> [2] </ref>, which is translated into process groups in the System Description Language, SDL, and submitted to Spring by the adaptive redundancy allocator, along with reflective information (e.g., importance, deadline, precedence constraints, fault tolerance requirement, etc.). <p> As part of our study, we address two of the research topics discussed in [7]: adaptive decision under time constraints and cost-effective integration of fault tolerance techniques. Bondavalli, Stankovic and Strigini introduce a framework for software implemented, adaptive fault tolerance in a real-time context <ref> [2] </ref>. The authors present the design of FERT (Fault Tolerant Entities for Real-Time), a specification notation which allows the abstraction of the functionality, timing constraint and adaptive fault-tolerance requirements of a particular application module. <p> By using the design notation, a designer of a FERT is able to specify alternative fault tolerance strategies for a module. The information can be accessed by both off-line and on-line schedulers to select strategies, and control their execution, adapting to the actual load and fault situations <ref> [2] </ref>. The authors describe the on-line scheduling support needed by the framework. In our study, we implement a mechanism for supporting the on-line scheduling of adaptive fault tolerance techniques. <p> a graceful degradation of the levels of redundancy provisionally allocated to tasks that have arrived earlier in order to favour transfer of resources to the minimal strategy for more arrivals. 6 Conclusion The work presented in this article has integrated the framework for software implemented adaptive fault tolerance proposed in <ref> [2] </ref> with a dynamic real-time system in an effort to demonstrate the effectiveness of AFT. We have developed an efficient on-line mechanism that dynamically addresses the real-time constraints and fault tolerance properties of a software module.
Reference: [3] <author> D. Briere and P. Traverse. </author> <title> AIRBUS A320/A330/A340 Electri cal Flight Controls A Family of Fault-Tolerant Systems. </title> <booktitle> Proc. of the 23th International Symposium on Fault Tolerant Com puting, Toulose, France, </booktitle> <pages> pages 616-623, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Flexibility in the management of redundancy is desirable in applications where drastic changes in environmental conditions and/or workload take place rapidly. Examples of such applications include air traffic control [5], digital avionics <ref> [3, 18] </ref>, satellite systems and Radar Tracking (AWACS) and Digital Flight Control Systems.
Reference: [4] <author> G. Buttazzo and J. Stankovic. </author> <title> Adding Robustness in Dynamic Preemptive Scheduling, </title> <editor> D. Fussell and M. Malek, eds., </editor> <address> chap ter 4. </address> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995. </year>
Reference-contexts: We are interested in a similar task and system model, but consider other fault tolerance techniques in addition to Primary/Backup. Additional work in fault tolerant scheduling can be found in <ref> [4, 13, 17] </ref>. Adaptive fault-tolerance has been studied in the context of routing in multiprocessor interconnects, for example in [22]. Lee and Shin introduced an active reconfiguration strategy for a degradable multi-module computing system with a static set of tasks [12].
Reference: [5] <author> F. Cristian, B. Dancey, and J. Dehn. </author> <title> Fault-Tolerance in the Advanced Automation System. </title> <booktitle> Proc. of the 20th International Symposium on Fault Tolerant Computing, </booktitle> <address> Chapel Hill, </address> <publisher> North Carolina, </publisher> <pages> pages 6-17, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Flexibility in the management of redundancy is desirable in applications where drastic changes in environmental conditions and/or workload take place rapidly. Examples of such applications include air traffic control <ref> [5] </ref>, digital avionics [3, 18], satellite systems and Radar Tracking (AWACS) and Digital Flight Control Systems.
Reference: [6] <author> S. Ghosh, R. Melhem, and D. Mosse. </author> <title> Fault-Tolerant Schedul ing on a Hard Real-Time Multiprocessor System. </title> <booktitle> Proc. IPPS 94, </booktitle> <pages> pages 775-782, </pages> <year> 1994. </year>
Reference-contexts: The target system is a multiprocessor environment supporting adaptation between Recovery Blocks and Distributed Recovery Blocks. Our fault tolerance techniques are different than the ones studied in [23] and the focus of our work is on dynamically scheduled hard real-time systems. Ghosh, Melhem and Mosse <ref> [6] </ref> present a fault-tolerant scheduling approach for real-time multiprocessors systems. A Primary/Backup technique is used to schedule tasks. To achieve high schedulability and still provide fault tolerance, backup overloading and dynamic deallocation of backup techniques are incorporated for aperiodic tasks in a dynamic real-time multiprocessor system. <p> Triple modular redundancy (TMR) is a technique where three copies of a computation are scheduled on different processors, introducing location constraints. The copies are executed and error checking is done by comparing the results after completion <ref> [6] </ref>. The execution order between the copies and the error checking task (EC) is enforced by placing precedence constraints as shown in figure 1 (a). <p> In addition, we need to address the deallocation of a backup (in the case of PB and PE) upon the successful completion of the primary component, since previous studies have demostrated <ref> [6] </ref> that resource reclamation increases the schedulability of real-time tasks on a multiprocessor system. 7 Acknowledgments The authors wish to thank Gary Wallace for his suggestions in the implementation of the adaptive fault tolerance support mechanism. We acknowledge the support from Mitre Corporation and Mitsubishi Electric Research Laboratories.
Reference: [7] <author> K. Kim and T. Lawrence. </author> <title> Adaptive Fault Tolerance in com plex real-time distributed computer applications. </title> <journal> Computer Communications, </journal> <volume> 15(4), </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: Adaptive fault tolerance is defined as an approach to meeting the dynamically and widely changing fault tolerance requirements by efficiently and adaptively utilizing a limited and dynamically changing amount of available redundant processing resources <ref> [7] </ref>. <p> As far as we know, none of these projects has provided support for adaptive fault tolerance to deal with overloads and specifications of graceful degradation. In [11], Laprie discusses the need for an assurance of dependability in complex systems, the kind where adaptive fault tolerance would be required. In <ref> [7] </ref>, Kim and Lawrence provide a concrete definition of adaptive fault tolerance and identify major research issues that need to be resolved. The authors proposed that each distinct mode of operation of a system should have a different and effective set of fault tolerance mechanisms. <p> The authors proposed that each distinct mode of operation of a system should have a different and effective set of fault tolerance mechanisms. As part of our study, we address two of the research topics discussed in <ref> [7] </ref>: adaptive decision under time constraints and cost-effective integration of fault tolerance techniques. Bondavalli, Stankovic and Strigini introduce a framework for software implemented, adaptive fault tolerance in a real-time context [2]. <p> Simple and easy to understand schemes are not only more likely to be more reliable compared to a more complex one, but also enable us to obtain much needed data <ref> [7] </ref> to characterize and understand the behavior of adaptive fault tolerance techniques under various conditions. A major problem in AFT is the implementation of an adequate selection strategy among the different fault tolerance techniques. We identify two types of selection strategies: (i) sequential selection and (ii) dynamic selection.
Reference: [8] <author> D. Kiskis and K. Shin. SWSL: </author> <title> A Synthetic Workload Speci fication Language for Real-Time Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> 20(10), </month> <year> 1996. </year>
Reference-contexts: FERTstones furnishes a large variance of dynamically generated application load, and supports an adaptive fault-tolerance requirement specification. Other benchmarks have been suggested in the literature <ref> [14, 24, 8] </ref>. However, these benchmarks do not make it easy to compare, qualitatively or quantitatively, results of different experiments of adaptive fault-tolerance mechanisms.
Reference: [9] <author> H. Kopetz et al. </author> <title> Distributed Fault-Tolerant Real-Time Systems: The MARS Approach. </title> <journal> IEEE Micro, </journal> <volume> 9(1) </volume> <pages> 25-40, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: We then discuss the metrics and results of the experimental study, first with a synthetic workload in section 4 and with a real-world workload in section 5. Finally, section 6 summarizes and concludes the paper. 2 Related Work Static approaches as represented by MARS <ref> [9] </ref>, and those capable of tolerating limited faults, as in [10], prove to be over-constrained and inflexible in dealing with dynamic overloads. This motivates the need for an integrated approach to fault tolerance and real-time scheduling.
Reference: [10] <author> K. Krishna and K. Shin. </author> <title> On Scheduling Tasks with a Quick Recovery from Failure. </title> <journal> IEEE Transacations on Computers, </journal> <volume> 35(5), </volume> <month> May </month> <year> 1986. </year>
Reference-contexts: Finally, section 6 summarizes and concludes the paper. 2 Related Work Static approaches as represented by MARS [9], and those capable of tolerating limited faults, as in <ref> [10] </ref>, prove to be over-constrained and inflexible in dealing with dynamic overloads. This motivates the need for an integrated approach to fault tolerance and real-time scheduling. Different modifications to static real-time scheduling algorithms to provide for redundant tasks, as by Liestman [13], and Krishna et al. [10] have been proposed. <p> limited faults, as in <ref> [10] </ref>, prove to be over-constrained and inflexible in dealing with dynamic overloads. This motivates the need for an integrated approach to fault tolerance and real-time scheduling. Different modifications to static real-time scheduling algorithms to provide for redundant tasks, as by Liestman [13], and Krishna et al. [10] have been proposed. More recently, Oh et al. have studied the dynamic scheduling of copies of tasks on redundant CPUs [17], and in combination with Rate-Monotonic Scheduling.
Reference: [11] <author> J. Laprie et al. </author> <title> Panel Session on Limits in Dependability. </title> <booktitle> Twenty-third IEEE Symposium on Fault-Tolerant Computing, </booktitle> <address> Toulouse, France, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: As far as we know, none of these projects has provided support for adaptive fault tolerance to deal with overloads and specifications of graceful degradation. In <ref> [11] </ref>, Laprie discusses the need for an assurance of dependability in complex systems, the kind where adaptive fault tolerance would be required. In [7], Kim and Lawrence provide a concrete definition of adaptive fault tolerance and identify major research issues that need to be resolved.
Reference: [12] <author> Y. Lee and K. Shin. </author> <title> Optimal Reconfiguration Strategy for a Degradable Multimodule Computing System. </title> <journal> Journal of the ACM, </journal> <pages> pages 326-348, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: Adaptive fault-tolerance has been studied in the context of routing in multiprocessor interconnects, for example in [22]. Lee and Shin introduced an active reconfiguration strategy for a degradable multi-module computing system with a static set of tasks <ref> [12] </ref>. They recognized that the system should reconfigure itself after a certain amount of mission time has passed, even without any failure. Their model is a state-based approach which is represented as a Markov reward process.
Reference: [13] <author> A. Liestman and R. Campbell. </author> <title> A Fault-tolerant Scheduling Problem. </title> <journal> Trans. Software Engineering, </journal> <volume> 12(11), </volume> <month> November </month> <year> 1988. </year>
Reference-contexts: This motivates the need for an integrated approach to fault tolerance and real-time scheduling. Different modifications to static real-time scheduling algorithms to provide for redundant tasks, as by Liestman <ref> [13] </ref>, and Krishna et al. [10] have been proposed. More recently, Oh et al. have studied the dynamic scheduling of copies of tasks on redundant CPUs [17], and in combination with Rate-Monotonic Scheduling. <p> We are interested in a similar task and system model, but consider other fault tolerance techniques in addition to Primary/Backup. Additional work in fault tolerant scheduling can be found in <ref> [4, 13, 17] </ref>. Adaptive fault-tolerance has been studied in the context of routing in multiprocessor interconnects, for example in [22]. Lee and Shin introduced an active reconfiguration strategy for a degradable multi-module computing system with a static set of tasks [12].
Reference: [14] <author> J. Molini, S. Maimon, and P. Watson. </author> <title> Real-time System Scenar ios. </title> <booktitle> Eleventh Real-time Systems Symposium, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: FERTstones furnishes a large variance of dynamically generated application load, and supports an adaptive fault-tolerance requirement specification. Other benchmarks have been suggested in the literature <ref> [14, 24, 8] </ref>. However, these benchmarks do not make it easy to compare, qualitatively or quantitatively, results of different experiments of adaptive fault-tolerance mechanisms.
Reference: [15] <author> D. Mosse, R. Melhem, and S. Ghosh. </author> <title> Analysis of a Fault Tolerant Multiprocessor Scheduling Algorithm. </title> <booktitle> Proc. of the 24th International Symposium on Fault Tolerant Computing, </booktitle> <address> Austin, Texas, </address> <pages> pages 16-25, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Many current fault tolerance systems developed for real-time distributed applications are dedicated to specific applications, suffer substantial performance overheads, or require special hardware <ref> [15] </ref>. Static fault tolerance techniques allocate an amount of redundancy that is fixed at design time, and the system is sized appropriately.
Reference: [16] <author> J. Muppala, S. Woolet, and K. Trivedi. </author> <title> Real-Time Systems Performance in the Presence of Failures. </title> <journal> IEEE Computer, </journal> <volume> 24(5), </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: They recognized that the system should reconfigure itself after a certain amount of mission time has passed, even without any failure. Their model is a state-based approach which is represented as a Markov reward process. In <ref> [16] </ref> Muppala, Woolet, and Trivedi have combined two approaches for modeling soft and hard real-time systems. Their approach is based on the addition of transitions to the Markov model of a system's behavior for modeling a system failure due to the missing of a hard deadline.
Reference: [17] <author> Y. Oh. </author> <title> The Design and Analysis of Scheduling Algorithms for Real-Time and Fault-Tolerant Computer Systems. </title> <type> PhD thesis, </type> <institution> University of Virginia, </institution> <year> 1994. </year>
Reference-contexts: Different modifications to static real-time scheduling algorithms to provide for redundant tasks, as by Liestman [13], and Krishna et al. [10] have been proposed. More recently, Oh et al. have studied the dynamic scheduling of copies of tasks on redundant CPUs <ref> [17] </ref>, and in combination with Rate-Monotonic Scheduling. As far as we know, none of these projects has provided support for adaptive fault tolerance to deal with overloads and specifications of graceful degradation. <p> We are interested in a similar task and system model, but consider other fault tolerance techniques in addition to Primary/Backup. Additional work in fault tolerant scheduling can be found in <ref> [4, 13, 17] </ref>. Adaptive fault-tolerance has been studied in the context of routing in multiprocessor interconnects, for example in [22]. Lee and Shin introduced an active reconfiguration strategy for a degradable multi-module computing system with a static set of tasks [12].
Reference: [18] <author> R. Riter. </author> <title> Modeling and Testing a Critical Fault-Tolerant Multi Process System. </title> <booktitle> Proc. of the 25th International Symposium on Fault Tolerant Computing, </booktitle> <address> Pasadena, California, </address> <pages> pages 516 521, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Flexibility in the management of redundancy is desirable in applications where drastic changes in environmental conditions and/or workload take place rapidly. Examples of such applications include air traffic control [5], digital avionics <ref> [3, 18] </ref>, satellite systems and Radar Tracking (AWACS) and Digital Flight Control Systems.
Reference: [19] <author> H. Shrikumar and J. Stankovic. </author> <title> FERTstones A Synthetic Benchmark Suite for Complex and Adaptive Hard Real-Time Systems. </title> <type> Technical report, </type> <institution> University of Massachusetts, </institution> <year> 1997. </year>
Reference-contexts: The set of alternatives in the adaptive technique is constructed from the three individual static techniques. We first study the characteristics of different adaptive fault tolerance mechanisms using a synthetic workload. Then the results are finally verified using the realistic FERTstones benchmark <ref> [19] </ref>, which simulates the demanding workload generated by the radar tracking application in AWACS airborne radar systems. The synthetic workload is parameterized for different overload and failure situations, since timing constraints in dynamic systems are often violated under these conditions.
Reference: [20] <author> J. A. Stankovic and K. Ramamritham. </author> <title> A New Paradigm for Hard Real-Time Operating Systems. </title> <journal> IEEE Software, </journal> <volume> 8(3), </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: Since an adaptive technique must function under timing constraints and effect the reconfiguration in a stable and predictable manner, it is desirable to implement it within the scope of a dynamic scheduler that guarantees predictable task execution. In this paper, we take the Spring <ref> [20] </ref> system as a concrete example of a dynamic real-time system. With appropriate adaptations, our work should be applicable to other similar dynamic real-time systems. <p> In all the experiments the number of number of processors per node is 3, and the scheduling is performed on a separate systems processor, as described in <ref> [20] </ref>. 4.3.1 Expt. 1: Performance and Replication Factor The performance results of all of the fault tolerance techniques as a function of load without considering scheduling costs, with RP = 1 and DF = 1 are shown in Figure 3.
Reference: [21] <author> L. Strigini. </author> <title> Software Fault Tolerance. </title> <type> Technical Report PDCS 23, </type> <institution> IEI-CNR, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: The authors describe the on-line scheduling support needed by the framework. In our study, we implement a mechanism for supporting the on-line scheduling of adaptive fault tolerance techniques. A comprehensive survey in software fault tolerance and the necessary support mechanisms needed in the operating system can be found in <ref> [21] </ref>. Tai [23] introduces performability concepts and modeling methods to adaptive fault tolerance. The purpose of this work is to demonstrate the feasibility of performability-driven realization of adaptive fault tolerance. The target system is a multiprocessor environment supporting adaptation between Recovery Blocks and Distributed Recovery Blocks.
Reference: [22] <author> C. Su and K. Shin. </author> <title> Adaptive Fault-Tolerant Deadlock-Free Routing in Meshes and Hypercubes. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 45(6), </volume> <month> June </month> <year> 1996. </year>
Reference-contexts: We are interested in a similar task and system model, but consider other fault tolerance techniques in addition to Primary/Backup. Additional work in fault tolerant scheduling can be found in [4, 13, 17]. Adaptive fault-tolerance has been studied in the context of routing in multiprocessor interconnects, for example in <ref> [22] </ref>. Lee and Shin introduced an active reconfiguration strategy for a degradable multi-module computing system with a static set of tasks [12]. They recognized that the system should reconfigure itself after a certain amount of mission time has passed, even without any failure.
Reference: [23] <author> A. Tai. </author> <title> Performability Driven Adaptive Fault Tolerance. </title> <booktitle> Proc. of the 24th International Symposium on Fault Tolerant Com puting, </booktitle> <address> Austin, Texas, </address> <pages> pages 176-185, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: In our study, we implement a mechanism for supporting the on-line scheduling of adaptive fault tolerance techniques. A comprehensive survey in software fault tolerance and the necessary support mechanisms needed in the operating system can be found in [21]. Tai <ref> [23] </ref> introduces performability concepts and modeling methods to adaptive fault tolerance. The purpose of this work is to demonstrate the feasibility of performability-driven realization of adaptive fault tolerance. The target system is a multiprocessor environment supporting adaptation between Recovery Blocks and Distributed Recovery Blocks. <p> The purpose of this work is to demonstrate the feasibility of performability-driven realization of adaptive fault tolerance. The target system is a multiprocessor environment supporting adaptation between Recovery Blocks and Distributed Recovery Blocks. Our fault tolerance techniques are different than the ones studied in <ref> [23] </ref> and the focus of our work is on dynamically scheduled hard real-time systems. Ghosh, Melhem and Mosse [6] present a fault-tolerant scheduling approach for real-time multiprocessors systems. A Primary/Backup technique is used to schedule tasks.
Reference: [24] <author> N. Weiderman and N. Kamenoff. </author> <title> Hartstone Uniprocessor Benchmark: Definitions and Experiments for Real-Time Sys tems. </title> <journal> Journal of Real-Time Systems, </journal> <volume> 4, </volume> <year> 1992. </year>
Reference-contexts: FERTstones furnishes a large variance of dynamically generated application load, and supports an adaptive fault-tolerance requirement specification. Other benchmarks have been suggested in the literature <ref> [14, 24, 8] </ref>. However, these benchmarks do not make it easy to compare, qualitatively or quantitatively, results of different experiments of adaptive fault-tolerance mechanisms.
Reference: [25] <author> Y. Bar-Shalom. </author> <title> Multitarget Multisensor Tracking, Advanced Applications. </title> <publisher> Artech House, </publisher> <year> 1990. </year>
Reference-contexts: The benchmark simulates the CPU processing time demanded by the Multiple Hypothesis Testing (MHT) algorithm Generator Parameter p 1 LogNormal (5.454,1.667) (target creation) k Exp (0.007) p 2 (lifetime) Beta (3.000,1.455) * 720 Table 1. Standard Benchmark, FERTstones <ref> [25] </ref>, so named after the approach of hypothesising the maneuvers possibly being executed by a confirmed target from a previous scan, and extending its track with one of the returns from the current scan.
References-found: 25

