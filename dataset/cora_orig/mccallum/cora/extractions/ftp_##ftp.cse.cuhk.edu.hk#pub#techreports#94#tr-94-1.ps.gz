URL: ftp://ftp.cse.cuhk.edu.hk/pub/techreports/94/tr-94-1.ps.gz
Refering-URL: ftp://ftp.cs.cuhk.hk/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: An O(m 0 log m 0 Algorithm for a Chain-like Task System complexity is O(m
Author: Gilbert H. Young and Chi-Lok Chan 
Note: log n). The space  
Address: Hong Kong  
Affiliation: Computer Science Department The Chinese University of  
Abstract: The optimal allocation of a chain-like task system on a chain-like network computers has been studied in a number of papers [1][2][3][4]. The best known algorithm has a time complexity of O((m 0 n) 2 n) if m n = O( p otherwise O(m 0 log m 0 + m 0 (m 0 n)) where m 0 and n denote the number of un-mergeable modules and the number of processors respectively[4]. The space complexity of Hsu's algorithm and Young and Chan's algorithm are O((m 0 n)n) and O(m 0 (m 0 n)) respectively. In this paper, we generalize the decision algorithm discussed in [4] and propose an O(m 0 log m 0 ) algorithm for the optimization problem based on the generalized decision test. This is a searching strategy based on a sorted matrix[5][6][7]. This algorithm is better than all existing algorithms except m 0 n = o( p 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Shahid H. Bokhari. </author> <title> "Partitioning Problems in Parallel, Pipelined, </title> <journal> and Distributed Computing". IEEE Transactions on Computers, </journal> <volume> vol 37:pp. </volume> <pages> 48-57, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: 1 Introduction The problem we investigate in this paper is the allocation of a chain-like task system on the chain-like network computers which was first presented by Bokhari <ref> [1] </ref>. A chain-like task system consists of m modules scheduled on n processors. Each module is associated with an execution time and communicates with its neighboring modules with a communication cost. <p> The optimal allocation problem is to find a schedule in which the bottleneck processor has the minimal execution time. This problem is first proposed by Bokhari and he gave an algorithm with time complexity of O (m 3 n) <ref> [1] </ref>. Sheu and Chiang showed that a more general assignment problem can be solved in O (minfm; ngm 2 )[2]. Hsu presented a two phase algorithm [3]. The first phase, merge phase, is used to get an un-mergeable chain-like task system with m 0 modules. <p> All of execution times and communication times are positive except that C 0;1 and C m;m+1 equal zero. * Adjacent modules must be assigned to adjacent processors or the same processor, which is called contiguity constraint <ref> [1] </ref>. If adjacent modules are assigned to the same processor, their communication (intra-communication) time is assumed to be zero. * The completion time of a module i,denoted as CM P i , is equal to C i1;i + E i + C i;i+1 . <p> m 0 un-mergeable modules in a chain-like task system with their execution times and communication times, n processors Output: X and Y (1) X [m 0 ] = C 0;1 + E 1 + C 1;2 //for X (3) for p = 2 to m 0 1 do (5) Y <ref> [1] </ref> = 0 //for Y (7) Y [p] = Y [p 1] + E p + C p;p+1 C p1;p (8) return X and Y Line 1,2 and 5 take O (1) time and the two loops (line 3-4 and 6-7) take O (m 0 ) time.
Reference: [2] <author> J.P. Sheu and Z.F. Chaing. </author> <title> "Efficient allocation of chain-like task on chain-like network computers". </title> <journal> Information Processing Letters, </journal> <volume> vol 36:pp. </volume> <pages> 241-245, </pages> <year> 1990. </year>
Reference: [3] <author> C.C. Hsu. </author> <title> "A Two-phase Approach for the Optimal Assignment of a Chain-like Task on a Chain-like Network Computer". </title> <type> Technical report, </type> <institution> National Taiwan Institute of Technology, </institution> <year> 1993. </year>
Reference-contexts: This problem is first proposed by Bokhari and he gave an algorithm with time complexity of O (m 3 n) [1]. Sheu and Chiang showed that a more general assignment problem can be solved in O (minfm; ngm 2 )[2]. Hsu presented a two phase algorithm <ref> [3] </ref>. The first phase, merge phase, is used to get an un-mergeable chain-like task system with m 0 modules. <p> F K is the set of all feasible length-K schedules. * An optimal schedule, S ffi , is a feasible schedule with minimal schedule length, K o , ie. 9S ffi 2 F K o * Two modules, t i and t i+1 are un-mergeable <ref> [3] </ref> if C i;i+1 &lt; E i + C i1;i and C i;i+1 &lt; E i+1 + C i+1;i+2 * A chain-like task system is said to be un-mergeable if all pairs of modules are un-mergeable. <p> This is an asymptotically optimal algorithm. In addition, we can get an optimal schedule if the optimal schedule is known and the resulting optimal schedule uses the minimal number of processors among all optimal schedules. For Hsu's algorithm <ref> [3] </ref>, all processors must always be utilized in any optimal schedule if m 0 n. For obtaining an optimal schedule, an O (m 0 log m 0 ) algorithm is presented. This is a modified version of the searching algorithm in [4]. <p> This algorithm is better than all existing algorithms except Hsu's one <ref> [3] </ref> when the special case of m 0 n = o ( p log n) occurs.
Reference: [4] <author> Gilbert Young and Chan Chi-Lok. </author> <title> "Scheduling Algorithm for a Chain-like Task System". </title> <booktitle> In "Lecture Notes in Computer Science", volume vol:762, </booktitle> <pages> pages 496-515, </pages> <year> 1993. </year>
Reference-contexts: The decision version, whether there exist a schedule with schedule length no greater than a given constant K , is first presented by Young and Chan <ref> [4] </ref>. The time and space complexities are O (m 0 ). Moreover, they gave an O (m + m 0 log m 0 + m 0 (m 0 n)) algorithm for solving the optimization problem. In this paper, we generalize the decision algorithm presented in [4]. <p> presented by Young and Chan <ref> [4] </ref>. The time and space complexities are O (m 0 ). Moreover, they gave an O (m + m 0 log m 0 + m 0 (m 0 n)) algorithm for solving the optimization problem. In this paper, we generalize the decision algorithm presented in [4]. The time and space complexities remain O (m 0 ). Besides, we propose another algorithm for obtaining an optimal schedule based on searching an element in a sorted matrix [5][6][7]. <p> L (S) = max i fCP i (S)g The corresponding processor is called bottleneck processor. * A schedule is said to be feasible if it satisfies the contiguity constraint and F is the set of all feasible schedules. A schedule, S, is called a feasible length-K schedule <ref> [4] </ref> if L (S) = max fCP i (S)g K where K is a given constant. <p> Hsu presented an O (m) algorithm to obtain an un-mergeable chain-like task system. 2 3 Generalized Decision Test By Young and Chan's decision algorithm <ref> [4] </ref>, we can decide whether there exists a feasible length-K schedule, where K is a given constant. In other words, we can check whether K is greater than the optimal schedule length K o . <p> By modifying this algorithm, we can decide whether there exists a feasible schedule with schedule length strictly less than K , or equivalently, check whether a constant K is less than K o . The modified algorithm is identical to Young and Chan's decision algorithm <ref> [4] </ref> except that all "&gt;" symbols (in line 3 and 8) are replaced by "". <p> Proof: Similar to the proof of the decision algorithm in <ref> [4] </ref>. 2 Theorem 2 For m 0 un-mergeable modules scheduled on n processors and any constant K o , K o is the optimal schedule length iff there exists a feasible length-K o schedule and there does not exists any schedule with schedule length less than K . <p> L (S) =K o and 9=S 0 2 F s.t. L (S 0 ) &lt;K o 2 As a result, we can compare any constant, K with the optimal schedule length, K o by Algorithm 1 and Young and Chan's decision algorithm <ref> [4] </ref>. For the rest of the paper, the following generalized decision test is used for the optimization problem, Young and Chan's decision algorithm [4] Algorithm 1 Result YES YES K &gt;K o NO NO K &lt;K o The generalized decision test has a time and space complexities of O (m 0 <p> o 2 As a result, we can compare any constant, K with the optimal schedule length, K o by Algorithm 1 and Young and Chan's decision algorithm <ref> [4] </ref>. For the rest of the paper, the following generalized decision test is used for the optimization problem, Young and Chan's decision algorithm [4] Algorithm 1 Result YES YES K &gt;K o NO NO K &lt;K o The generalized decision test has a time and space complexities of O (m 0 ). If the optimal schedule length is known, we can obtain the optimal schedule by using Young and Chan's decision algorithm [4] (the <p> algorithm <ref> [4] </ref> Algorithm 1 Result YES YES K &gt;K o NO NO K &lt;K o The generalized decision test has a time and space complexities of O (m 0 ). If the optimal schedule length is known, we can obtain the optimal schedule by using Young and Chan's decision algorithm [4] (the optimal schedule is a feasible length-K o schedule). In addition, any feasible length-K schedule obtained has the following properties, Lemma 3 By comparing the feasible length-K schedule S return by Young and Chan's decision algorithm [4] and any feasible length-K schedule S 0 , the total number of modules <p> we can obtain the optimal schedule by using Young and Chan's decision algorithm <ref> [4] </ref> (the optimal schedule is a feasible length-K o schedule). In addition, any feasible length-K schedule obtained has the following properties, Lemma 3 By comparing the feasible length-K schedule S return by Young and Chan's decision algorithm [4] and any feasible length-K schedule S 0 , the total number of modules have been scheduled up to p j (1 j n) of S is no less than that of S 0 , ie. where M (S; j) denotes the total number of modules scheduled on p 1 ; <p> k 1) M (S 0 ; k 1) = n 0 k &gt; n k For S, t n k1 +1 ; : : : ; t n k are scheduled on p k and t n k +1 cannot be scheduled on p k (line 3 in Algorithm 1 <ref> [4] </ref>), ie. CM P n k1 +1n k n k +1 &gt; K k1 +1n 0 k ([4], n k1 n 0 CM P n k1 +1n k +1 ([4], n 0 &gt; K which is contradictory to the fact that S 0 is a feasible length-K schedule. 2 Theorem 4 <p> k1 +1n 0 k (<ref> [4] </ref>, n k1 n 0 CM P n k1 +1n k +1 ([4], n 0 &gt; K which is contradictory to the fact that S 0 is a feasible length-K schedule. 2 Theorem 4 If S is a schedule return from Young and Chan's decision algorithm [4], S is a feasible length-K schedule using the minimal number of processors. <p> definition) M (S; n 0 ) (By Lemma 3) &lt; M (S; n fl ) (n 0 &lt; n fl ) It leads to contradiction. 2 By Theorem4, we can get an optimal schedule which uses the minimal number of processors. 4 Searching Algorithm Based on a Sorted Matrix In <ref> [4] </ref>, Young and Chan proposed a searching based algorithm for finding an optimal schedule. <p> Unfortunately, sorting a m 0 fi m 0 sorted matrix has a lower bound of (m 02 log m 0 ) [8] which is worse than the searching based algorithm <ref> [4] </ref>. Furthermore, we cannot directly construct the sorted matrix by calculating all the elements; otherwise the time complexity is at least the size of the sorted matrix, ie. (m 0 (m 0 n)). This lower bound becomes (m 02 ) if m 0 n = (n). <p> For Hsu's algorithm [3], all processors must always be utilized in any optimal schedule if m 0 n. For obtaining an optimal schedule, an O (m 0 log m 0 ) algorithm is presented. This is a modified version of the searching algorithm in <ref> [4] </ref>. All possible schedule lengths are organized as the elements in a sorted matrix.
Reference: [5] <author> Donald B. Johnson and Samuel D. Kashdan. </author> <title> "Lower bounds for Selection in X+Y and Other Multisets". </title> <journal> Journal of ACM, </journal> <volume> vol 25:pp. </volume> <pages> 556-570, </pages> <year> 1978. </year>
Reference: [6] <author> Greg N. Frederickson and Donald B. Johnson. </author> <title> "The Complexity of Selection and Ranking in X+Y and Matrices with Sorted Columns". </title> <journal> Journal of Computer and System Science, </journal> <volume> vol 24:pp. </volume> <pages> 197-208, </pages> <year> 1982. </year>
Reference: [7] <author> Greg N. Frederickson and Donald B. Johnson. </author> <title> "Generalized Selection and Ranking Matrices". </title> <journal> SIAM Journal of Computing, </journal> <volume> vol 13:pp. </volume> <pages> 14-30, </pages> <year> 1984. </year>
Reference-contexts: As a result, Algorithm 2 always halts and returns an optimal schedule. 4.4 Complexity Analysis By <ref> [7] </ref>, (t) can be partitioned into 2 t+1 + 1 subsets i (t) s.t. (t) = p=12 t 8 p (t) (t); 8B a;b (t); B c;d (t) 2 p (t), either b a;b a;b s (t) b l (t) or b c;d c;d s (t) b l (t) In other <p> Each subset p (t) is called a incomparable chain of block matrices <ref> [7] </ref>. <p> Proof: 8 p (t) (t), if 9B i;j (t) 2 p (t) such that b i;j s (t) b b l (t), then 8B a;b (t) 2 p (t) fB i;j (t)g, either b a;b a;b s (t) b or b l (t) &gt; b a;b i;j By <ref> [7] </ref>, there are 2 t+1 1 incomparable chains of block matrices and there is at most one block matrix in each p (t) (t) such that it includes the element b. 2 Lemma 6 8t = 1; 2; : : :; log m 0 ; the number of block matrices remained
Reference: [8] <author> L.H. Harper, T.H. Payne, J.E. Savage, and E. Straus. </author> <title> "Sorting X+Y". </title> <journal> Communication of ACM, </journal> <volume> vol 18:pp. </volume> <pages> 347-349, </pages> <year> 1975. </year>
Reference-contexts: Unfortunately, sorting a m 0 fi m 0 sorted matrix has a lower bound of (m 02 log m 0 ) <ref> [8] </ref> which is worse than the searching based algorithm [4]. Furthermore, we cannot directly construct the sorted matrix by calculating all the elements; otherwise the time complexity is at least the size of the sorted matrix, ie. (m 0 (m 0 n)).
Reference: [9] <author> Greg N. Frederickson and Donald B. Johnson. </author> <title> "Finding kth Paths and p-Centers by Generating and Searching Good Data Structure". </title> <journal> Journal of Algorithms, </journal> <volume> vol 4:pp. </volume> <pages> 61-80, </pages> <year> 1983. </year>
Reference-contexts: j &lt; m 0 + 1 (2) return 0 (3) if i + j &gt; 2m 0 n + 1 (4) return 1 (5) return X [i] + Y [j] 4.3 Algorithm for the Optimization Problem This algorithm is a modified version of the p-centers problem on a tree structure <ref> [9] </ref>. Assume the number of un-mergeable modules, m 0 , is a power of 2.
Reference: [10] <author> Manuel Blum, Robert W. Floyd, Vaughan Pratt, Rivest Ronald L., and Robert E. Tarjan. </author> <title> "Time Bounds for Selection". </title> <journal> Journal of Computer and System Science, </journal> <volume> vol 7(4):pp. </volume> <pages> 448-461, </pages> <year> 1973. </year>
Reference: [11] <author> Robert W. Floyd and Ronald L. Rivest. </author> <title> "Expected Time Bounds of Selection". </title> <journal> Communication of ACM, </journal> <volume> vol 18(3):pp. </volume> <pages> 165-172, </pages> <year> 1975. </year>
Reference: [12] <author> C.A.R. Hoare. </author> <title> "Algorithm 63(Partition) and Algorithm 65(Find)". </title> <journal> Communication of ACM, </journal> <volume> vol 4(7):pp. </volume> <pages> 321-322, </pages> <year> 1961. </year> <month> 11 </month>
References-found: 12

