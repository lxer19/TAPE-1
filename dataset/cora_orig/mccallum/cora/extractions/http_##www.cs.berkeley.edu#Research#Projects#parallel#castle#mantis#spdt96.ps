URL: http://www.cs.berkeley.edu/Research/Projects/parallel/castle/mantis/spdt96.ps
Refering-URL: http://www.cs.berkeley.edu/Research/Projects/parallel/castle/mantis/
Root-URL: http://www.cs.berkeley.edu
Email: fstevel,cullerg@CS.Berkeley.EDU  
Title: The Mantis Parallel Debugger  
Author: Steven S. Lumetta and David E. Culler 
Address: Berkeley, CA 94720-1776  
Affiliation: Computer Science Division University of California at Berkeley  
Abstract: In light of these specific goals, this paper presents Mantis, a graphical debugger for parallel programs. Mantis targets the broad class of parallel programs known as bulk synchronous SPMD programs and provides support for Split-C, a parallel extension of C. Although designed for parallel debugging, the Mantis interface also supports sequential debugging, allowing a single environment for both sequential and parallel debugging. Mantis currently runs on the Thinking Machines Corp. CM-5 and on networks of workstations and is built using a Tcl/Tk graphical user interface linked to a modified version of the Free Software Foundation's gdb debugger. Through the application of a clear set of general principles, Mantis has become a practical parallel tool. Mantis made its debut at U. C. Berkeley during the Spring 1994 semester and has been used heavily by the parallel computation course for two years. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Cheng, R. Hood, </author> <title> "A Portable Debugger for Parallel and Distributed Programs," </title> <booktitle> Proceedings of Supercomputing '94, </booktitle> <address> Washington, D.C., </address> <month> November </month> <year> 1994, </year> <pages> pp. 723-732, </pages> <note> available from www.nas.nasa.gov/NAS/Tools/Projects/P2D2. </note>
Reference-contexts: Source display windows are tied to individual processes, complicating the task of examining several processors. Developed approximately a year after Mantis, the Portable Parallel/Distributed Debugger, p2d2, adopts a client-server approach to provide a uniform interface for all platforms, communication libraries, and programming models <ref> [1] </ref>. By specifying protocols for interaction between a user interface client and a debugger server, p2d2 hopes to separate the development efforts for these two pieces. Additional protocols for communication libraries and HPF preprocessors allow a client to access data normally considered inter nal to such systems.
Reference: [2] <author> D. Culler, A. Dusseau, S. Goldstein, A. Krishnamurthy, S. Lumetta, T. von Eicken, K. Yelick, </author> <title> "Parallel Programming in Split-C," </title> <booktitle> Proceedings of Supercomputing '93, </booktitle> <address> Portland, Oregon, </address> <month> November </month> <year> 1993, </year> <pages> pp. 262-273, </pages> <note> available from www.cs.berkeley.edu/projects/ parallel/castle/split-c. </note>
Reference-contexts: In this paper, we present Mantis, a graphical debugger for parallel programs currently running on networks of workstations and the CM-5. Mantis provides integrated support for the Split-C language <ref> [2] </ref>. Although designed for parallel debugging, the Mantis interface can also be used for sequential debugging in C, C++, Fortran, and other languages, allowing a single environment for both sequential and parallel debugging. Through the application of a clear set of general principles, Mantis has become a practical parallel tool.
Reference: [3] <author> G. Fox, M. Johnson, G. Lyzenga, S. Otto, J. Salmon, D. Walker, </author> <title> "Solving Problems on Concurrent Processors," Vol. I, </title> <journal> Ch. </journal> <volume> 17, </volume> <pages> pp. 307-325, </pages> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey. </address>
Reference-contexts: As we encounter new features, we explain their functionality and how they fit into our parallel debugging objectives. At the end, we summarize Mantis in terms of those objectives. The program to be debugged simulates the world of Wa-Tor <ref> [3] </ref>, which has become a valuable tool for teaching parallel programming at Berkeley. We use a version of WaTor in which fish alone populate an infinite plane and are attracted to other fish according to an inverse-square law.
Reference: [4] <author> S. Lumetta, "Mantis: </author> <title> A Debugger for the Split-C Language,", </title> <institution> University of California at Berkeley Technical Report #CSD-95-865, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: We next examine a handful of parallel debuggers. After noting each debugger's apparent goals, we evaluate its capabilities in terms of our objectives in order to facilitate comparison with Mantis. For a more detailed review of these systems, see <ref> [4] </ref>. 4.1 Tracing A large fraction of the parallel debugging community believes that tracing and deterministic replay will prove essential to debugging parallel programs.
Reference: [5] <author> J. May, F. Berman, "Panorama: </author> <title> a portable, extensible parallel debugger," </title> <journal> SIGPLAN Notices, </journal> <pages> pp. 96-106, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: The modifications generally include minor changes to source code and creation of fast conditional breakpoints and watch points. Future work on Mantis includes the addition of such features along with performance tuning tools. 4.4 Other Parallel Debuggers Panorama <ref> [5] </ref> was developed to integrate the myriad techniques developed for parallel debugging in an easily portable and extensible manner.
Reference: [6] <author> B. P. Miller, M. D. Callaghan, J. M. Cargille, J. K. Hollingsworth, R. B. Irvin, K. L. Karavanic, K. Kunchithapadam, T. Newhall, </author> <title> "The Paradyn Parallel Performance Measurement Tools," </title> <institution> University of Wis-consin at Madison Technical Report, </institution> <note> available from www.cs.wisc.edu/~paradyn/papers.html. </note>
Reference-contexts: Parallel performance tuning tools like Paradyn <ref> [6] </ref> avoid perturbing the program except during short intervals by dynamically inserting and removing performance instrumentation. Dynamic instrumentation also appears in some debuggers to supplement debugging capabilities by compiling extensions to the program immediately, allowing the user to make small modifications to the program without a full recompilation process.
Reference: [7] <author> J. K. Ousterhout, </author> <title> Tcl and the Tk Toolkit, </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: In addition, gdb gives Mantis portability across a wide range of existing and future platforms, as changes are easily incorporated into new releases. The user interface is based on Tcl/Tk <ref> [7] </ref>, allowing for rapid and flexible creation. For ease of use, Mantis observes known standards in interface design when possible and utilizes common methods when no standards exist.
Reference: [8] <author> S. Sistare, D. Allen, R. Bowker, K. Jourdenais, J. Si-mons, R. </author> <title> Title, "A scalable debugger for massively parallel message-passing programs," </title> <journal> IEEE Parallel & Distributed Technology: Systems & Applications, </journal> <volume> Vol. 2 No. 2, </volume> <pages> pp. 50-6, </pages> <month> Summer </month> <year> 1994. </year>
Reference-contexts: The textual interface inhibits the user from rapidly focusing on the problem, and the reliance on vendor debuggers leaves the issues of scalability and economy of presentation open for each system. Node Prism extends the Prism data parallel debugger for the CM-5 to support the message-passing paradigm <ref> [8, 9] </ref> and integrates tools for data visualization and performance tuning. Prism addresses scalability by taking advantage of the parallel nature of the debugger itself.
Reference: [9] <institution> Thinking Machines Corporation, </institution> <note> Prism 2.0 Release Notes, </note> <month> May </month> <year> 1994. </year>
Reference-contexts: The textual interface inhibits the user from rapidly focusing on the problem, and the reliance on vendor debuggers leaves the issues of scalability and economy of presentation open for each system. Node Prism extends the Prism data parallel debugger for the CM-5 to support the message-passing paradigm <ref> [8, 9] </ref> and integrates tools for data visualization and performance tuning. Prism addresses scalability by taking advantage of the parallel nature of the debugger itself.
Reference: [10] <author> T. von Eicken, D. E. Culler, S. C. Goldstein, K. E. Schauser, </author> <title> "Active Messages: a Mechanism for Integrated Communication and Computation," </title> <booktitle> Proceedings of International Symposium on Computer Architecture, </booktitle> <year> 1992. </year>
References-found: 10

