URL: ftp://ftp.cs.rochester.edu/pub/u/kthanasi/94.SPDP.Software_Interleaving.ps.Z
Refering-URL: http://www.cs.rochester.edu/u/kthanasi/
Root-URL: 
Email: fricardo,crovella,kthanasi,leblancg@cs.rochester.edu  
Phone: (716) 275-5426  
Title: Software Interleaving  
Author: Ricardo Bianchini Mark E. Crovella Leonidas Kontothanassis Thomas J. LeBlanc 
Address: Rochester, New York 14627  
Affiliation: Department of Computer Science University of Rochester  
Abstract: In this paper, we investigate the costs and benefits of implementing memory interleaving in software. As our main contribution, we compare software memory interleaving to row-major allocation and logarithmic broadcasting. Our analysis demonstrates the clear superiority of software interleaving over row-major allocation in the presence of memory contention. Our analysis also indicates that the choice between software interleaving and logarithmic broadcasting is less clear, as it depends both on the type of synchronization used and the number of processors. We conclude that, on large-scale multiprocessors, software memory interleaving and lock-based synchronization is the most effective combination for reducing memory contention in matrix computations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Bianchini and T. J. LeBlanc. </author> <title> Eager Combining: A coherency protocol for increasing effective network and memory bandwidth in shared-memory multiprocessors. </title> <booktitle> In Proceedings of the 6th Symposium on Parallel and Distributed Processing, </booktitle> <month> Oc-tober </month> <year> 1994. </year>
Reference-contexts: Many other techniques for alleviating the effects of a non-uniform distribution of memory accesses assume special hardware support, such as multi-stage interconnection networks with combining of memory references [5, 7], interleaved memory [7], eager sharing [8], and eager combining <ref> [1] </ref>. Although these techniques are known to reduce or eliminate memory contention, the associated hardware can be both complex and expensive, and may depend on particular properties of the interconnection network. Thus, general software solutions are an attractive alternative.
Reference: [2] <author> Helen Davis, Stephen R. Goldschmidt, and John Hennessy. </author> <title> Multiprocessor simulation and tracing using Tango. </title> <booktitle> In Proceedings of the 1991 International Conference on Parallel Processing, </booktitle> <address> pages II-99 II-107, </address> <month> August </month> <year> 1991. </year>
Reference-contexts: Our simulations consist of two distinct steps: a trace collection process, and a trace analysis process. The trace-collection step uses Tango <ref> [2] </ref> to simulate a multiprocessor with (infinite) write-back caches. The traces generated by Tango contain the data references that missed in the local cache of each processor, and all synchronization events.
Reference: [3] <author> J. Dongarra, R. van de Geijn, and D. Walker. </author> <title> A look at scalable dense linear algebra libraries. </title> <booktitle> In Proceedings of the 1992 Scalable High Peformance Computing Conference, </booktitle> <pages> pages 372-379, </pages> <year> 1992. </year>
Reference-contexts: Software interleaving is a specific instance of the more general data allocation strategy, referred to as block scattered decomposition <ref> [3] </ref>, in which the size of the block is determined by the architecture's cache line size. In effect, we use column-major allocation of cache blocks, rather than column-major allocation of elements.
Reference: [4] <author> K. A. Gallivan, R. J. Plemmons, and A. H. Sameh. </author> <title> Parallel algorithms for dense linear algebra computations. </title> <journal> SIAM Review, </journal> <volume> 32(1) </volume> <pages> 54-135, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Thus, memory contention alleviation is the key to significant performance improvement. Several techniques have been developed for reducing memory contention. Linear algebra algorithms can exploit the properties of numerical equations to improve locality of reference, and as a side-effect eliminate most non-uniform memory addressing <ref> [4] </ref>. How ever, this approach may introduce significant complex-ity in the algorithm, and does not generalize to other classes of applications, such as the graph algorithms used in our study.
Reference: [5] <author> A. Gottlieb, R. Grishman, C. P. Kruskal, K. P. McAuliffe, L. Rudolph, and M. Snir. </author> <title> The NYU ul-tracomputer designing an MIMD shared memory parallel computer. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-32(2):175-189, </volume> <month> Feb </month> <year> 1983. </year>
Reference-contexts: Many other techniques for alleviating the effects of a non-uniform distribution of memory accesses assume special hardware support, such as multi-stage interconnection networks with combining of memory references <ref> [5, 7] </ref>, interleaved memory [7], eager sharing [8], and eager combining [1]. Although these techniques are known to reduce or eliminate memory contention, the associated hardware can be both complex and expensive, and may depend on particular properties of the interconnection network. Thus, general software solutions are an attractive alternative.
Reference: [6] <author> J. M. Ortega and C. H. Romine. </author> <title> The ijk forms of factorization methods ii. parallel systems. </title> <journal> Parallel Computing, </journal> <volume> 7 </volume> <pages> 149-162, </pages> <year> 1988. </year>
Reference-contexts: Each of the techniques described above is general enough to use in any program. However, our investigation of memory contention in programs for solving linear algebra and graph problems suggests that techniques devoted specifically to parallel matrix computations <ref> [6] </ref> can also be very effective at alleviating contention. In this paper, we evaluate the effectiveness of memory interleaving implemented in software.
Reference: [7] <author> G. F. Pfister, W. C. Brantley, D. A. George, S. L. Harvey, W. J. Kleinfelder, K. P. McAuliffe, E. A. Melton, V. A. Norton, and J. Weiss. </author> <title> The IBM research parallel processor prototype (RP3): Introduction and architecture. </title> <booktitle> In Proceedings of the 1985 International Conference on Parallel Processing, </booktitle> <pages> pages 764-771, </pages> <month> Aug </month> <year> 1985. </year>
Reference-contexts: Many other techniques for alleviating the effects of a non-uniform distribution of memory accesses assume special hardware support, such as multi-stage interconnection networks with combining of memory references <ref> [5, 7] </ref>, interleaved memory [7], eager sharing [8], and eager combining [1]. Although these techniques are known to reduce or eliminate memory contention, the associated hardware can be both complex and expensive, and may depend on particular properties of the interconnection network. Thus, general software solutions are an attractive alternative. <p> Many other techniques for alleviating the effects of a non-uniform distribution of memory accesses assume special hardware support, such as multi-stage interconnection networks with combining of memory references [5, 7], interleaved memory <ref> [7] </ref>, eager sharing [8], and eager combining [1]. Although these techniques are known to reduce or eliminate memory contention, the associated hardware can be both complex and expensive, and may depend on particular properties of the interconnection network. Thus, general software solutions are an attractive alternative.
Reference: [8] <author> Larry Wittie and Creve Maples. MERLIN: </author> <title> Massively parallel heterogeneous computing. </title> <booktitle> In Proceedings of the 1989 International Conference on Parallel Processing, </booktitle> <address> pages I-142 - I-150, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: Many other techniques for alleviating the effects of a non-uniform distribution of memory accesses assume special hardware support, such as multi-stage interconnection networks with combining of memory references [5, 7], interleaved memory [7], eager sharing <ref> [8] </ref>, and eager combining [1]. Although these techniques are known to reduce or eliminate memory contention, the associated hardware can be both complex and expensive, and may depend on particular properties of the interconnection network. Thus, general software solutions are an attractive alternative.
Reference: [9] <author> Pen-Chung Yew, Nian-Feng Tzeng, and Duncan H. Lawrie. </author> <title> Distributing hot-spot addressing in large-scale multiprocessors. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(4):388-395, </volume> <month> April </month> <year> 1987. </year>
Reference-contexts: Although these techniques are known to reduce or eliminate memory contention, the associated hardware can be both complex and expensive, and may depend on particular properties of the interconnection network. Thus, general software solutions are an attractive alternative. Two software techniques for alleviating contention are software combining trees <ref> [9] </ref> and data replication. Software combining trees are analogous to hardware combining networks, and incorporate logarithmic broadcasting. We can also limit memory contention by replicating data across multiple memory modules.
References-found: 9

