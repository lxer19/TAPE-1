URL: http://www.cs.umn.edu/Users/dept/users/du/papers/kbuffer.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/du/papers/
Root-URL: http://www.cs.umn.edu
Title: Supporting Random Access on Real-time Retrieval of Digital Continuous Media  
Author: Jonathan C.L. Liu, David H.C. Du and James A. Schnepf 
Keyword: Multimedia, Real-time Retrieval, Physical Database Design, Buffering Scheme, Disk Placement  
Date: Dec. 1994  
Note: To appear in Journal of Computer Communications: Special Issue on Multimedia Storage and Databases,  
Address: Minneapolis, MN 55455  
Affiliation: Distributed Multimedia Center 1 Department of Computer Science University of Minnesota  
Abstract: In addition to the large data size requirement and real-time constraint in continuous media , future video applications such as video editing demands the random access capability on the video-frame level. This paper introduces our study on effective buffering control for the real-time retrieval of jitter-free digital video medium. We adopt a video-frame level approach to maintaining the flexibility on placement and analyzing the efficiency of the buffering schemes. An integrated solution which offers efficient buffering schemes and flexible storage placement to support random access is our goal. We present two buffering schemes: the two-buffer scheme and the k-buffer compensation scheme. The two-buffer scheme requires only all the frames in a block to be stored consecutively while providing random access between blocks. However, this intuitive buffering scheme potentially requires a large block size and buffer space. The k-buffer compensation scheme is proposed to resolve this large buffer space requirement by using more than two buffers and requiring a minimal number of blocks randomly placed in each cylinder. This scheme differs from the contiguous placement scheme because individual blocks can be stored anywhere in each cylinder. Compared to the two-buffer scheme, the k-buffer compensation scheme requires less buffer space, has higher disk utilization, and finer granularity on disk data transfer. The placement requirements are more flexible and implementable than the contiguous and storage pattern placement schemes. Experimental measurement results reveal the significant improvements on the buffer-size reduction and placement flexibility by using the k-buffer compensation scheme. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Data Sources. C-Tech Electronics, </institution> <year> 1993. </year>
Reference-contexts: We will also use this two-buffer scheme as a comparison scheme to the k-buffer compensation scheme . Table 3 lists the definition and parameters that we use in this article. These typical values are from <ref> [1] </ref>, and we typically use CDC's PA8G1 3600-rpm disk drive and Seagate's Elite-1 5400-rpm disk drive in numerical results. For most video compression schemes, tens of sectors are still required to store one compressed video frame.
Reference: [2] <author> D. Anderson, Y Osawa, and R. Govindan. </author> <title> A file system for continuous media. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 311-337, </pages> <month> Nov </month> <year> 1992. </year>
Reference-contexts: One way of solving the above problem is to place a constraint on the disk placement in order to reduce the unnecessary components of disk access time. An initially proposed solution is to place the continuous media contiguously in either clustered or non-clustered allocation <ref> [2, 3, 7, 12] </ref>. This contiguous placement scheme does solve the problem but suffers from inflexibility on dynamic allocation and replacement. Especially for video editing functionality where users would be allowed to delete or insert some video frames anywhere in a video stream. <p> Recently, Gemmel extended his work in [6] to clustered files and disk scheduling for multi-channel playback. However, the storage ordering is assumed the same as the retrieval ordering. The Continuous Media File System (CMFS) proposed by Anderson <ref> [2] </ref> defined a session that guaranteed minimal transfer rate. They also proposed issues on real-time semantics of sessions, disk layout, acceptance test for new sessions, and disk scheduling policy. However, disk allocation was assumed clustered or non-clustered for uncompressed audio data.
Reference: [3] <author> H. Chen and T. Little. </author> <title> Physical storage organization for time-dependent multimedia da ta. </title> <booktitle> To appear at the 4th intl. Conf. on Foundations of Data Organization And Algorithms (FODO'93), </booktitle> <month> Oct </month> <year> 1993. </year>
Reference-contexts: One way of solving the above problem is to place a constraint on the disk placement in order to reduce the unnecessary components of disk access time. An initially proposed solution is to place the continuous media contiguously in either clustered or non-clustered allocation <ref> [2, 3, 7, 12] </ref>. This contiguous placement scheme does solve the problem but suffers from inflexibility on dynamic allocation and replacement. Especially for video editing functionality where users would be allowed to delete or insert some video frames anywhere in a video stream. <p> The first is to adopt a pre-sequence for predefined synchronized streams (e.g., the video and audio streams in a digital movie) <ref> [20, 15, 19, 3] </ref>. This approach is good for pre-synchronized media streams, and most of commercial movie files such like MicroSoft's AVI (Audio Video Interleave), Intel's DVI (Digital Video Interactive) and Apple's QuickTime formats.
Reference: [4] <author> M. Chen, D. Kandlur, and P. Yu. </author> <title> Optimization of the grouped sweeping scheduling (gss) with heterogeneous multimedia streams. </title> <booktitle> Proceedings of ACM Multimedia'93 Conference, </booktitle> <pages> pages 235-242, </pages> <month> Aug </month> <year> 1993. </year>
Reference-contexts: The recent proposed multimedia disk scheduling mechanisms by Chen, Kandlur and Yu in <ref> [22, 4, 21] </ref> targeted a solution to support independent concurrent media streams. By dividing the n requests into g groups, and serving groups in FIFO order and SCAN order within each group, this disk scheduling maintain the minimal disk seek overhead.
Reference: [5] <author> B. Cole. </author> <title> The technology framework. </title> <journal> IEEE SPECTRUM, </journal> <pages> pages 32-39, </pages> <month> Mar </month> <year> 1993. </year>
Reference-contexts: A survey of related work is covered in Section 6. Finally, the conclusion and future directions are included in Section 7 and Section 8. 2 Two-buffer Scheme Advances in compression techniques make it possible to have VLSI chips perform decompression on the fly when displaying video <ref> [8, 5, 10, 13] </ref>. Management of the buffers for compressed video and audio data has an advantage over uncompressed data because of the reduced size of compressed continuous media and the decreased bandwidth requirement. <p> Thus, multiple-disk architectures are a more promising way to support a large number of multiple media streams. It is also true that even with compression, a typical multimedia application with video medium occupies a large amount of disk space (e.g., a 90-minute digital movie) <ref> [5] </ref>. Large volume hard drives with giga byte storage are available but expensive. Therefore, it is beneficial to consider multiple-disk architectures. This trend is recognized by authors.
Reference: [6] <author> J. </author> <title> Gemmell. Multimedia netwok servers: Multi-channel delay sensitive data retrieval. </title> <booktitle> Proceedings of the ACM Multimedia'93 Conference, </booktitle> <pages> pages 243-250, </pages> <month> Aug </month> <year> 1993. </year> <month> 29 </month>
Reference-contexts: They developed a theoretical model for the real-time requirements of digital audio playback. These requirements are based on the consumption rate and disk transfer rate at the byte level. Buffer space is determined by these requirements, and disk allocation was assumed contiguous. Recently, Gemmel extended his work in <ref> [6] </ref> to clustered files and disk scheduling for multi-channel playback. However, the storage ordering is assumed the same as the retrieval ordering. The Continuous Media File System (CMFS) proposed by Anderson [2] defined a session that guaranteed minimal transfer rate.
Reference: [7] <author> J. Gemmell and S. Christodoulakis. </author> <title> Principles of delay-sensitive multimedia data storage and retrieval. </title> <journal> ACM Transaction of Information Systems, </journal> <volume> 10(1) </volume> <pages> 51-90, </pages> <month> Jan </month> <year> 1992. </year>
Reference-contexts: One way of solving the above problem is to place a constraint on the disk placement in order to reduce the unnecessary components of disk access time. An initially proposed solution is to place the continuous media contiguously in either clustered or non-clustered allocation <ref> [2, 3, 7, 12] </ref>. This contiguous placement scheme does solve the problem but suffers from inflexibility on dynamic allocation and replacement. Especially for video editing functionality where users would be allowed to delete or insert some video frames anywhere in a video stream. <p> However, as we pointed out in the Introduction, large-capacity disk space is usually shared with other data, and the existence of bad sectors and other data may make the storage pattern approach less promising. Gemmel and Christodoulakis <ref> [7] </ref> have worked on buffer management for uncompressed audio data. They developed a theoretical model for the real-time requirements of digital audio playback. These requirements are based on the consumption rate and disk transfer rate at the byte level.
Reference: [8] <author> K. Harney, M. Keith, G. Lavelle, L. Ryan, and D. Stark. </author> <title> The i750 video processor: A total multimedia solution. </title> <journal> Communications of the ACM, </journal> <volume> 34(4) </volume> <pages> 65-78, </pages> <month> Apr </month> <year> 1991. </year>
Reference-contexts: A survey of related work is covered in Section 6. Finally, the conclusion and future directions are included in Section 7 and Section 8. 2 Two-buffer Scheme Advances in compression techniques make it possible to have VLSI chips perform decompression on the fly when displaying video <ref> [8, 5, 10, 13] </ref>. Management of the buffers for compressed video and audio data has an advantage over uncompressed data because of the reduced size of compressed continuous media and the decreased bandwidth requirement.
Reference: [9] <author> J. Hsieh, M. Lin, J. Liu, D. Du, and T. Ruwart. </author> <title> Performance of a mass storage system for video-on-demand. </title> <booktitle> In Review, </booktitle> <year> 1994. </year>
Reference-contexts: Therefore, instead of doing performance measurement for support multiple media streams from a single disk, we directly proceeded with a VOD server with a mass storage system. A large-scale VOD server based on SGI's Onyx machine equipped with 32 RAID 3 disk arrays have been designed and measured in <ref> [9] </ref>. The experimental results suggest that potentially 360 multiple video streams with about 8 Mbit/sec quality (i.e., MPEG-2 video quality) can be supported with the accepted 1% jitter.
Reference: [10] <author> D. Legall. </author> <title> Mpeg a video compression standard for multimedia applications. </title> <journal> Communications of the ACM, </journal> <volume> 34(4) </volume> <pages> 46-58, </pages> <month> Apr </month> <year> 1991. </year>
Reference-contexts: A survey of related work is covered in Section 6. Finally, the conclusion and future directions are included in Section 7 and Section 8. 2 Two-buffer Scheme Advances in compression techniques make it possible to have VLSI chips perform decompression on the fly when displaying video <ref> [8, 5, 10, 13] </ref>. Management of the buffers for compressed video and audio data has an advantage over uncompressed data because of the reduced size of compressed continuous media and the decreased bandwidth requirement.
Reference: [11] <author> P. Lougher and D. Shepherd. </author> <title> The design and implementation of a continuous media storage server. </title> <booktitle> Proceedings of the Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pages 69-81, </pages> <month> Nov </month> <year> 1992. </year>
Reference-contexts: However, disk allocation was assumed clustered or non-clustered for uncompressed audio data. The model was again byte-level based and the storage ordering assumed to be is the same as the retrieval ordering. Lougher and Shepherd's work <ref> [11, 12] </ref> on the design of a storage server for continuous media was originally designed for a multiple-disk system.
Reference: [12] <author> P. Lougher and D. Shepherd. </author> <title> The design of storage server for continuous media. </title> <journal> The Computer Journal, </journal> <volume> 36(1) </volume> <pages> 32-42, </pages> <year> 1993. </year>
Reference-contexts: One way of solving the above problem is to place a constraint on the disk placement in order to reduce the unnecessary components of disk access time. An initially proposed solution is to place the continuous media contiguously in either clustered or non-clustered allocation <ref> [2, 3, 7, 12] </ref>. This contiguous placement scheme does solve the problem but suffers from inflexibility on dynamic allocation and replacement. Especially for video editing functionality where users would be allowed to delete or insert some video frames anywhere in a video stream. <p> For most video compression schemes, tens of sectors are still required to store one compressed video frame. Random access on video data implies random access on the beginning of any particular frame. However, from Figure 2 and <ref> [12, 15] </ref>, it is impossible to provide random access between each frame and satisfy the real-time requirements. Therefore, we define a block as one individual unit that consists of multiple frames of video medium. <p> However, disk allocation was assumed clustered or non-clustered for uncompressed audio data. The model was again byte-level based and the storage ordering assumed to be is the same as the retrieval ordering. Lougher and Shepherd's work <ref> [11, 12] </ref> on the design of a storage server for continuous media was originally designed for a multiple-disk system.
Reference: [13] <author> A. </author> <title> Luther. Digital Video in the PC Environment. </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY, 2 edition, </address> <year> 1991. </year>
Reference-contexts: A survey of related work is covered in Section 6. Finally, the conclusion and future directions are included in Section 7 and Section 8. 2 Two-buffer Scheme Advances in compression techniques make it possible to have VLSI chips perform decompression on the fly when displaying video <ref> [8, 5, 10, 13] </ref>. Management of the buffers for compressed video and audio data has an advantage over uncompressed data because of the reduced size of compressed continuous media and the decreased bandwidth requirement.
Reference: [14] <author> P. Rangan, T. Kaeppner, and H. Vin. </author> <title> Techniques for efficient storage of digital video and audio. </title> <booktitle> Proceedings of 2nd International Workshop on Multimedia Information Systems, </booktitle> <pages> pages 68-85, </pages> <year> 1992. </year>
Reference-contexts: To meet this rigid timing constraint, only an appropriate amount of audio or video data should be retrieved into the buffer no earlier or later than a pre-specified time. 5 Introducing a gap (or so called storage pattern (M,G) in literature) between units of continuous media has been proposed by <ref> [20, 14, 16] </ref>. These gaps provide a scheme for the system to wait (or transfer other data streams if multiple data streams are retrieved concurrently), then transfer the next frame into the memory buffer, while displaying the current video frame.
Reference: [15] <author> P. Rangan and H. Vin. </author> <title> Designing file systems for digital video and audio. </title> <booktitle> Proceedings of ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 81-94, </pages> <year> 1991. </year>
Reference-contexts: For most video compression schemes, tens of sectors are still required to store one compressed video frame. Random access on video data implies random access on the beginning of any particular frame. However, from Figure 2 and <ref> [12, 15] </ref>, it is impossible to provide random access between each frame and satisfy the real-time requirements. Therefore, we define a block as one individual unit that consists of multiple frames of video medium. <p> The nature of video editing also imposes the need for constrained random access since an integrated video presentation might consist of several different video segments stored randomly. It is known that the concurrent pipelining of retrieval and displaying of continuous media requires prefetching and at least two buffers <ref> [18, 15] </ref>. One buffer is for retrieval of the next block of data while the other is being displayed. <p> The first is to adopt a pre-sequence for predefined synchronized streams (e.g., the video and audio streams in a digital movie) <ref> [20, 15, 19, 3] </ref>. This approach is good for pre-synchronized media streams, and most of commercial movie files such like MicroSoft's AVI (Audio Video Interleave), Intel's DVI (Digital Video Interactive) and Apple's QuickTime formats. <p> The storage pattern approach seems to be reasonable on CLV disks because the large overhead 27 on the disk seek operation on CLV disks is barely tolerable. A byte-level model was assumed in this study. Rangan and Vin's work <ref> [15, 19] </ref> sought to provide continuous retrieval when designing digital video and audio file systems. They introduced and derived the terms storage granularity and scattering parameters. They adopted the storage pattern approach on a hard drive, especially for video medium.
Reference: [16] <author> P. Rangan and H. Vin. </author> <title> Efficient storage techniques for digital continuous multimedia. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 5(4) </volume> <pages> 564-573, </pages> <month> Aug </month> <year> 1993. </year>
Reference-contexts: To meet this rigid timing constraint, only an appropriate amount of audio or video data should be retrieved into the buffer no earlier or later than a pre-specified time. 5 Introducing a gap (or so called storage pattern (M,G) in literature) between units of continuous media has been proposed by <ref> [20, 14, 16] </ref>. These gaps provide a scheme for the system to wait (or transfer other data streams if multiple data streams are retrieved concurrently), then transfer the next frame into the memory buffer, while displaying the current video frame.
Reference: [17] <author> J. Schnepf, D. Du, and J. Liu. </author> <title> Synchronization for an interactive multimedia presentation system. </title> <type> Technical Report TR93-53, </type> <institution> Department of Computer Science, University of Minnesota, Minneapolis, MN, </institution> <month> Jun </month> <year> 1993. </year>
Reference-contexts: We have continued working on extending the k-buffer compensation scheme to support real-time retrieval of multiple continuous media streams. These multiple media streams can be correlated (synchronously or asynchronously) <ref> [17] </ref> or independent. 25 For the correlated cases, there are at least two approaches which can be used to support these multiple media streams. The first is to adopt a pre-sequence for predefined synchronized streams (e.g., the video and audio streams in a digital movie) [20, 15, 19, 3].
Reference: [18] <author> R. Staehli and J. Walpole. </author> <title> Constrained-latency storage access. </title> <booktitle> IEEE COMPUTER, </booktitle> <pages> pages 44-53, </pages> <month> Mar </month> <year> 1993. </year>
Reference-contexts: The nature of video editing also imposes the need for constrained random access since an integrated video presentation might consist of several different video segments stored randomly. It is known that the concurrent pipelining of retrieval and displaying of continuous media requires prefetching and at least two buffers <ref> [18, 15] </ref>. One buffer is for retrieval of the next block of data while the other is being displayed.
Reference: [19] <author> H. Vin and V. Rangan. </author> <title> Admission control algorithm for multimedia on-demand servers. </title> <booktitle> Proceedings of the Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pages 56-69, </pages> <month> Nov </month> <year> 1992. </year>
Reference-contexts: The first is to adopt a pre-sequence for predefined synchronized streams (e.g., the video and audio streams in a digital movie) <ref> [20, 15, 19, 3] </ref>. This approach is good for pre-synchronized media streams, and most of commercial movie files such like MicroSoft's AVI (Audio Video Interleave), Intel's DVI (Digital Video Interactive) and Apple's QuickTime formats. <p> The storage pattern approach seems to be reasonable on CLV disks because the large overhead 27 on the disk seek operation on CLV disks is barely tolerable. A byte-level model was assumed in this study. Rangan and Vin's work <ref> [15, 19] </ref> sought to provide continuous retrieval when designing digital video and audio file systems. They introduced and derived the terms storage granularity and scattering parameters. They adopted the storage pattern approach on a hard drive, especially for video medium.
Reference: [20] <author> C. Yu, S. Wei, D. Bitton, Q. Yang, R. Bruno, and J. Tullis. </author> <title> Efficient placement of audio data on optical disks for real-time applications. </title> <journal> Communications of the ACM, </journal> <pages> pages 862-871, </pages> <month> Jul </month> <year> 1989. </year> <month> 30 </month>
Reference-contexts: To meet this rigid timing constraint, only an appropriate amount of audio or video data should be retrieved into the buffer no earlier or later than a pre-specified time. 5 Introducing a gap (or so called storage pattern (M,G) in literature) between units of continuous media has been proposed by <ref> [20, 14, 16] </ref>. These gaps provide a scheme for the system to wait (or transfer other data streams if multiple data streams are retrieved concurrently), then transfer the next frame into the memory buffer, while displaying the current video frame. <p> The first is to adopt a pre-sequence for predefined synchronized streams (e.g., the video and audio streams in a digital movie) <ref> [20, 15, 19, 3] </ref>. This approach is good for pre-synchronized media streams, and most of commercial movie files such like MicroSoft's AVI (Audio Video Interleave), Intel's DVI (Digital Video Interactive) and Apple's QuickTime formats. <p> These experiment results were based on the two-buffer scheme without any disk scheduling mechanisms, and extension of the k-buffer compensation scheme for this multiple-disk VOD server will be reported in the future. 7 Related Work Yu's <ref> [20] </ref> work, originally designed for optical CLV disks, defined the concept of gap and storage pattern (M,G) to retrieve continuous audio records from optical disks.
Reference: [21] <author> P. Yu, M. Chen, and D. Kandlur. </author> <title> Design and analysis of a grouped sweeping scheme for multiimedia storage management. </title> <booktitle> Proceedings of the Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pages 44-56, </pages> <month> Nov </month> <year> 1992. </year>
Reference-contexts: The recent proposed multimedia disk scheduling mechanisms by Chen, Kandlur and Yu in <ref> [22, 4, 21] </ref> targeted a solution to support independent concurrent media streams. By dividing the n requests into g groups, and serving groups in FIFO order and SCAN order within each group, this disk scheduling maintain the minimal disk seek overhead.
Reference: [22] <author> P. Yu, M. Chen, and D. Kandlur. </author> <title> Grouped sweeping scheduling for dasd-based multimedia storage management. </title> <journal> ACM Multimedia Systems, </journal> <volume> 1(3) </volume> <pages> 99-109, </pages> <year> 1993. </year> <month> 31 </month>
Reference-contexts: The recent proposed multimedia disk scheduling mechanisms by Chen, Kandlur and Yu in <ref> [22, 4, 21] </ref> targeted a solution to support independent concurrent media streams. By dividing the n requests into g groups, and serving groups in FIFO order and SCAN order within each group, this disk scheduling maintain the minimal disk seek overhead.
References-found: 22

