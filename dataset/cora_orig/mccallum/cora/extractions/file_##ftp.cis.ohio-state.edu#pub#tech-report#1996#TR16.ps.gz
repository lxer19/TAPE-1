URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1996/TR16.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Title: Finding Consistent Global Checkpoints in a Distributed Computation  
Author: D. Manivannan Robert H. B. Netzer Mukesh Singhal 
Keyword: causality, distributed checkpointing, consistent global checkpoint collection, failure recovery, fault tolerance.  
Abstract: Finding consistent global checkpoints of a distributed computation is important for analyzing, testing, or verifying properties of these computations. In this paper we present a theoretical foundation for finding consistent global checkpoints. Given an arbitrary set S of local checkpoints, we prove exactly which sets of other local checkpoints can be combined with S to build consistent global checkpoints, and we present an algorithm for finding all such global checkpoints. The minimal and maximal consistent global checkpoints are presented as special cases. The results are based on the notion of zigzag paths introduced by Netzer and Xu [14]. We also present a method for finding zigzag paths using the rollback-dependency graph introduced by Wang [17, 16].
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Baldoni, J. M. Helary, A. Mostefaoui, and M. Raynal. </author> <title> Characterizing consistent checkpoints in large-scale ditributed systems. </title> <booktitle> 5th IEEE International Conference on Future Trends of Distributed Computing Systems, </booktitle> <month> August </month> <year> 1995. </year>
Reference-contexts: They prove that it is the absence of Z-paths between checkpoints in S which guarantees that S can be extended to a consistent checkpoint. Since Z-paths capture the exact conditions for consistency, they are a powerful notion for reasoning about problems that involve consistent checkpoints <ref> [1, 2, 3, 4] </ref>.
Reference: [2] <author> R. Baldoni, J. M. Helary, A. Mostefaoui, and M. Raynal. </author> <title> Consistent checkpoints in message passing distributed systems. </title> <institution> Rapporte de Recherche, INRIA - (France) n. </institution> <month> 2564, May </month> <year> 1995. </year>
Reference-contexts: They prove that it is the absence of Z-paths between checkpoints in S which guarantees that S can be extended to a consistent checkpoint. Since Z-paths capture the exact conditions for consistency, they are a powerful notion for reasoning about problems that involve consistent checkpoints <ref> [1, 2, 3, 4] </ref>.
Reference: [3] <author> R. Baldoni, J. M. Helary, A. Mostefaoui, and M. Raynal. </author> <title> On modeling consistent checkpoints and the domino effect in distributed systems. </title> <institution> Rapporte de Recherche, INRIA - (France) n. </institution> <month> 2564, May </month> <year> 1995. </year>
Reference-contexts: They prove that it is the absence of Z-paths between checkpoints in S which guarantees that S can be extended to a consistent checkpoint. Since Z-paths capture the exact conditions for consistency, they are a powerful notion for reasoning about problems that involve consistent checkpoints <ref> [1, 2, 3, 4] </ref>.
Reference: [4] <author> R. Baldoni, J. M. Helary, and M. Raynal. </author> <title> Mutually consistent recording in asynchronous computation. </title> <booktitle> 15th ACM symposium on Principle of Distributed Computing, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: They prove that it is the absence of Z-paths between checkpoints in S which guarantees that S can be extended to a consistent checkpoint. Since Z-paths capture the exact conditions for consistency, they are a powerful notion for reasoning about problems that involve consistent checkpoints <ref> [1, 2, 3, 4] </ref>.
Reference: [5] <author> K. Mani Chandy and Leslie Lamport. </author> <title> "Distributed Snapshots: Determining Global States of Distributed Systems". </title> <journal> ACM Trans. of Comp. Sys., </journal> <volume> 3(1), </volume> <month> February </month> <year> 1985. </year>
Reference-contexts: In this paper we explore a type of global checkpoint that is said to be consistent, meaning that it is a snapshot of process states that actually occurred simultaneously during the execution or had the potential of occurring simultaneously <ref> [5] </ref>. Checkpoints are consistent when no causal dependency exists between any of its local process states [5] (for brevity we use the term consistent checkpoint when the context makes it clear that a global checkpoint is implied). Finding consistent checkpoints is a natural part of many problems involving global states. <p> a type of global checkpoint that is said to be consistent, meaning that it is a snapshot of process states that actually occurred simultaneously during the execution or had the potential of occurring simultaneously <ref> [5] </ref>. Checkpoints are consistent when no causal dependency exists between any of its local process states [5] (for brevity we use the term consistent checkpoint when the context makes it clear that a global checkpoint is implied). Finding consistent checkpoints is a natural part of many problems involving global states.
Reference: [6] <author> R. Cooper and K. Marzullo. </author> <title> "Consistent Detection of Global Predicates". </title> <booktitle> In Proceedings of ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 163-173, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: When global states are periodically recorded or analyzed during execution they are called global checkpoints. Global checkpoints have applications in many problems, such as transparent failure recovery [9], distributed debugging <ref> [6, 7] </ref>, monitoring distributed events [15], setting distributed breakpoints [13], protocol specification and verification [8], and others [17, 16]. <p> Our next main result is an algorithm to enumerate all such consistent checkpoints. Algorithms have been presented in the literature for computing various sets of consistent checkpoints, such as for global predicate detection <ref> [6] </ref> and recovery [17, 16], but none explicitly compute all the consistent checkpoints that include a given set S. Wang's work [17, 16] shows how to compute the maximal and the minimal consistent checkpoints that contain S.
Reference: [7] <author> E. Fromentin, N. Plouzeau, and M. Raynal. </author> <title> "An Introduction to the Analysis and Debug of Distributed Computations". </title> <booktitle> In Proceedings of 1 st IEEE International Conference on Algorithms and Architectures for Parallel Processing, </booktitle> <address> Brisbane, Australia, </address> <pages> pages 545-554, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: When global states are periodically recorded or analyzed during execution they are called global checkpoints. Global checkpoints have applications in many problems, such as transparent failure recovery [9], distributed debugging <ref> [6, 7] </ref>, monitoring distributed events [15], setting distributed breakpoints [13], protocol specification and verification [8], and others [17, 16].
Reference: [8] <author> K. Geihs and M. Seifert. </author> <title> "Automated Validation of a Co-operation Protocol for Distributed Systems". </title> <booktitle> In Proc. 6 th Int. Conf. Distributed Comp. Systems, </booktitle> <pages> pages 436-443, </pages> <year> 1986. </year>
Reference-contexts: When global states are periodically recorded or analyzed during execution they are called global checkpoints. Global checkpoints have applications in many problems, such as transparent failure recovery [9], distributed debugging [6, 7], monitoring distributed events [15], setting distributed breakpoints [13], protocol specification and verification <ref> [8] </ref>, and others [17, 16]. In this paper we explore a type of global checkpoint that is said to be consistent, meaning that it is a snapshot of process states that actually occurred simultaneously during the execution or had the potential of occurring simultaneously [5].
Reference: [9] <author> R. Koo and S. Toueg. </author> <title> "Checkpointing and Roll-back Recovery for Distributed Systems". </title> <journal> IEEE Trans. on Software Eng., </journal> <volume> SE-13(1):23-31, </volume> <month> January </month> <year> 1987. </year>
Reference-contexts: When global states are periodically recorded or analyzed during execution they are called global checkpoints. Global checkpoints have applications in many problems, such as transparent failure recovery <ref> [9] </ref>, distributed debugging [6, 7], monitoring distributed events [15], setting distributed breakpoints [13], protocol specification and verification [8], and others [17, 16]. <p> Finding consistent checkpoints is a natural part of many problems involving global states. For example, in failure recovery, the system state can be restored from a saved consistent checkpoint and then restarted <ref> [9, 17, 16] </ref>. The problem we address is to determine how individual local checkpoints can be combined with those from other processes to form global checkpoints that are consistent.
Reference: [10] <author> Ajay D. Kshemkalyani, Michel Raynal, and Mukesh Singhal. </author> <title> "An Introduction to Snapshot Algorithms in Distributed Computing". </title> <journal> Distributed Systems Engineering Journal, </journal> <volume> 2(4) </volume> <pages> 224-233, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Consistency of global states is a recurring theme in distributed systems <ref> [10] </ref>. A global state is a set of individual process states, one per process, that represents a "snapshot" at some instant of each process' execution. When global states are periodically recorded or analyzed during execution they are called global checkpoints.
Reference: [11] <author> L. Lamport. </author> <title> "Time, Clocks and ordering of events in distributed systems". </title> <journal> Communications of the ACM., </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: Communication channels are FIFO. Execution of a process is modeled by three types of events: the send event of a message, the receive event of a message, and a checkpoint event. The states of processes depend on one another due to interprocess communication. Lamport's happened before relation <ref> [11] </ref> on events, HB !, is defined as the transitive closure of the union of two other relations: HB XO M XO ! relation captures the order in which local events of a process are executed.
Reference: [12] <author> Leslie Lamport. </author> <title> "The Mutual Exclusion Problem: Part I | A Theory of Interprocess Communication". </title> <journal> JACM, </journal> <volume> 33(2) </volume> <pages> 313-326, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: C q;j to the same checkpoint in S (because Z-paths are transitive); similarly, causal paths are transitive as well. 2 These terms are inspired by the so-called light cone of an event e which is the set of all events with causal paths from e (i.e., events in e's future) <ref> [12] </ref>.
Reference: [13] <author> B. Miller and J. Choi. </author> <title> "Breakpoints and Halting in Distributed Programs". </title> <booktitle> In Proceedings of the 8 th International Conference on Distributed Comput. Systems, </booktitle> <pages> pages 316-323, </pages> <year> 1988. </year>
Reference-contexts: When global states are periodically recorded or analyzed during execution they are called global checkpoints. Global checkpoints have applications in many problems, such as transparent failure recovery [9], distributed debugging [6, 7], monitoring distributed events [15], setting distributed breakpoints <ref> [13] </ref>, protocol specification and verification [8], and others [17, 16]. In this paper we explore a type of global checkpoint that is said to be consistent, meaning that it is a snapshot of process states that actually occurred simultaneously during the execution or had the potential of occurring simultaneously [5].
Reference: [14] <author> Robert H.B. Netzer and Jian Xu. </author> <title> "Necessary and Sufficient Conditions for Consistent Global Snapshots". </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 6(2) </volume> <pages> 165-169, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: In this paper we explore these issues in detail, proving precisely which local checkpoints can be used in conjunction with a given set of checkpoints S to build consistent checkpoints. This problem was first 3 considered by Netzer and Xu <ref> [14] </ref> who proved the conditions necessary and sufficient for some consistent checkpoint to be built from S, but they did not define the set of possible consistent checkpoints or present an algorithm to construct them. <p> However, as shown in Figure 1, the subtle nature of consistency makes this conclusion false. Netzer and Xu <ref> [14] </ref> originally addressed this subtlety and proved the necessary and sufficient conditions that S must meet to be able to construct a consistent checkpoint containing S. Our results are based on this past work, discussed next. <p> The absence of causal paths does not fully capture whether S has the ability to become a consistent checkpoint. To determine exactly when S has this ability, Netzer and Xu <ref> [14] </ref> define a generalization of causal paths called zigzag paths, which we call Z-paths for brevity. They prove that it is the absence of Z-paths between checkpoints in S which guarantees that S can be extended to a consistent checkpoint. <p> Their basic result is that no Z-path exists between two checkpoints exactly when they can be used to build a consistent checkpoint. Proofs of this result (and several corollaries) appear in Netzer and Xu <ref> [14] </ref>. Note that S 6; S implies the checkpoints in S are all from different processes. Theorem 1 A set of checkpoints S can be extended to a consistent global checkpoint if and only if S 6; S. <p> These properties are embodied in the following theorems. The existence of the minimal and maximal consistent checkpoints has been proven before (by Wang [17, 16] and others), but not directly in terms of the Z-cone, which we have shown to be the basis of consistency. Netzer and Xu <ref> [14] </ref> construct the minimal checkpoint in one of their proofs but never discuss its properties per se. <p> Proof: 1 () 2 follows from Theorem 1; 2 () 3 follows from Theorem 6. 2 6 Conclusion In this paper, we presented a theoretical foundation for determining consistent checkpoints in a distributed computation run. It is based on the notion of zigzag paths introduced by Netzer and Xu <ref> [14] </ref>. Zigzag paths help in identifying all the checkpoints that are useful for constructing consistent checkpoints.
Reference: [15] <author> M. Spezialetti and P. Kearns. </author> <title> "Simultanious Regions: A Framework for the Consistent Monitoring of Distributed Systems". </title> <booktitle> In Proceedings of the 9 th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 61-68, </pages> <year> 1989. </year> <month> 17 </month>
Reference-contexts: When global states are periodically recorded or analyzed during execution they are called global checkpoints. Global checkpoints have applications in many problems, such as transparent failure recovery [9], distributed debugging [6, 7], monitoring distributed events <ref> [15] </ref>, setting distributed breakpoints [13], protocol specification and verification [8], and others [17, 16].
Reference: [16] <author> Yi-Min Wang. </author> <title> Consistent global checkpoints that contain a given set of local checkpoints. </title> <type> In AT&T Technical Report, </type> <year> 1995. </year>
Reference-contexts: When global states are periodically recorded or analyzed during execution they are called global checkpoints. Global checkpoints have applications in many problems, such as transparent failure recovery [9], distributed debugging [6, 7], monitoring distributed events [15], setting distributed breakpoints [13], protocol specification and verification [8], and others <ref> [17, 16] </ref>. In this paper we explore a type of global checkpoint that is said to be consistent, meaning that it is a snapshot of process states that actually occurred simultaneously during the execution or had the potential of occurring simultaneously [5]. <p> Finding consistent checkpoints is a natural part of many problems involving global states. For example, in failure recovery, the system state can be restored from a saved consistent checkpoint and then restarted <ref> [9, 17, 16] </ref>. The problem we address is to determine how individual local checkpoints can be combined with those from other processes to form global checkpoints that are consistent. <p> Building on Netzer and Xu's results, Wang <ref> [17, 16] </ref> then presented algorithms for computing from S the minimum and maximum consistent checkpoints that can be constructed and showed their application to several problems. We further build on this past work by analyzing the set of all consistent checkpoints that can be built from S. <p> In Sections 4 and 5 we present our theoretical foundation for reasoning about consistency and give an algorithm for finding all the consistent checkpoints that contain S. We also characterize the location of the maximal and minimal consistent checkpoints, and discuss a graph (the rollback-dependency graph), introduced by Wang <ref> [17, 16] </ref>, that can be used in the construction of consistent checkpoints. Section 6 concludes the paper. 2 Model The distributed computation we consider consists of N spatially separated sequential processes denoted by P 1 , P 2 , , P N . <p> Similarly, any cut passing through C is inconsistent since it must cut across either m3 or m4, and as above the message being cut always renders the global checkpoint inconsistent. To formally reason about Z-paths, we use the following notation, motivated by Wang <ref> [17, 16] </ref>. Definition 2 Let A,B be individual checkpoints and R,S be sets of checkpoints. Let ; be a relation defined over checkpoints and sets of checkpoints such that 1. A ; B iff a Z-path exists from A to B, 2. <p> Our main results concern this issue. Wang <ref> [17, 16] </ref> presents algorithms for finding certain consistent checkpoints that contain S, but he focuses only on the so-called minimal and maximal checkpoints (discussed below). He uses a graph called the rollback-dependency graph (or R-graph) and presents several applications of minimal and maximal checkpoints. <p> Two interesting special cases we discuss next are the minimal and maximal consistent checkpoints that contain S. Intuitively, these are the earliest and latest consistent checkpoints that can be constructed that contain S. The following formal definitions are based on those by Wang <ref> [17, 16] </ref>. Definition 4 Let S be any set of checkpoints such that S 6; S. <p> consistent checkpoint containing S iff for any consistent checkpoint M 0 0 containing S, where T 0 = fC p 1 ;j 1 ; C p 2 ;j 2 ; C p k ;j k g, we have 8n : 1 n k. i n j n . 9 Wang <ref> [17, 16] </ref> showed that the minimal (maximal) consistent checkpoints containing S are those formed from by choosing from each process not represented in S the earliest (latest) checkpoint that has no Z-path to or from any member of S. <p> These properties are embodied in the following theorems. The existence of the minimal and maximal consistent checkpoints has been proven before (by Wang <ref> [17, 16] </ref> and others), but not directly in terms of the Z-cone, which we have shown to be the basis of consistency. Netzer and Xu [14] construct the minimal checkpoint in one of their proofs but never discuss its properties per se. <p> Our next main result is an algorithm to enumerate all such consistent checkpoints. Algorithms have been presented in the literature for computing various sets of consistent checkpoints, such as for global predicate detection [6] and recovery <ref> [17, 16] </ref>, but none explicitly compute all the consistent checkpoints that include a given set S. Wang's work [17, 16] shows how to compute the maximal and the minimal consistent checkpoints that contain S. <p> Algorithms have been presented in the literature for computing various sets of consistent checkpoints, such as for global predicate detection [6] and recovery <ref> [17, 16] </ref>, but none explicitly compute all the consistent checkpoints that include a given set S. Wang's work [17, 16] shows how to compute the maximal and the minimal consistent checkpoints that contain S. Our algorithm is not targeted toward a specific application, as it simply computes the set of all consistent checkpoints containing S, but it illustrates the use of our theoretical results in determining consistent checkpoints. <p> Our algorithm is novel in that it restricts its selection of checkpoints to those within the Z-cone of S and it checks for the presence of Z-cycles within the Z-cone. In the next section we show how to perform this detection using a graph, discussed originally by Wang <ref> [17, 16] </ref>, from which Z-cones and Z-paths can be detected. Our algorithm is shown in Figure 5. The function ComputeAllCgs (S) returns the set of all consistent checkpoints that contain S. <p> In this section, we describe a method for determining the existence of Z-paths between checkpoints in a distributed computation that has terminated or stopped execution, using the rollback-dependency graph (R-graph) introduced by Wang <ref> [17, 16] </ref>. First, we present the definition of an R-graph. <p> We assume that each process stops execution after it sends reply to the request so that additional dependencies between checkpoints are not formed while the R-graph is being constructed. For each process, a volatile checkpoint is added; the volatile checkpoint represents the volatile state of the process <ref> [17, 16] </ref>.
Reference: [17] <author> Yi-Min Wang. </author> <title> "Maximum and Minimum Consistent Global Checkpoints and their Applications". </title> <booktitle> In Proceedings of the 14 th IEEE Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 86-95, </pages> <address> Bad Neuenahr, Germany, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: When global states are periodically recorded or analyzed during execution they are called global checkpoints. Global checkpoints have applications in many problems, such as transparent failure recovery [9], distributed debugging [6, 7], monitoring distributed events [15], setting distributed breakpoints [13], protocol specification and verification [8], and others <ref> [17, 16] </ref>. In this paper we explore a type of global checkpoint that is said to be consistent, meaning that it is a snapshot of process states that actually occurred simultaneously during the execution or had the potential of occurring simultaneously [5]. <p> Finding consistent checkpoints is a natural part of many problems involving global states. For example, in failure recovery, the system state can be restored from a saved consistent checkpoint and then restarted <ref> [9, 17, 16] </ref>. The problem we address is to determine how individual local checkpoints can be combined with those from other processes to form global checkpoints that are consistent. <p> Building on Netzer and Xu's results, Wang <ref> [17, 16] </ref> then presented algorithms for computing from S the minimum and maximum consistent checkpoints that can be constructed and showed their application to several problems. We further build on this past work by analyzing the set of all consistent checkpoints that can be built from S. <p> In Sections 4 and 5 we present our theoretical foundation for reasoning about consistency and give an algorithm for finding all the consistent checkpoints that contain S. We also characterize the location of the maximal and minimal consistent checkpoints, and discuss a graph (the rollback-dependency graph), introduced by Wang <ref> [17, 16] </ref>, that can be used in the construction of consistent checkpoints. Section 6 concludes the paper. 2 Model The distributed computation we consider consists of N spatially separated sequential processes denoted by P 1 , P 2 , , P N . <p> Similarly, any cut passing through C is inconsistent since it must cut across either m3 or m4, and as above the message being cut always renders the global checkpoint inconsistent. To formally reason about Z-paths, we use the following notation, motivated by Wang <ref> [17, 16] </ref>. Definition 2 Let A,B be individual checkpoints and R,S be sets of checkpoints. Let ; be a relation defined over checkpoints and sets of checkpoints such that 1. A ; B iff a Z-path exists from A to B, 2. <p> Our main results concern this issue. Wang <ref> [17, 16] </ref> presents algorithms for finding certain consistent checkpoints that contain S, but he focuses only on the so-called minimal and maximal checkpoints (discussed below). He uses a graph called the rollback-dependency graph (or R-graph) and presents several applications of minimal and maximal checkpoints. <p> Two interesting special cases we discuss next are the minimal and maximal consistent checkpoints that contain S. Intuitively, these are the earliest and latest consistent checkpoints that can be constructed that contain S. The following formal definitions are based on those by Wang <ref> [17, 16] </ref>. Definition 4 Let S be any set of checkpoints such that S 6; S. <p> consistent checkpoint containing S iff for any consistent checkpoint M 0 0 containing S, where T 0 = fC p 1 ;j 1 ; C p 2 ;j 2 ; C p k ;j k g, we have 8n : 1 n k. i n j n . 9 Wang <ref> [17, 16] </ref> showed that the minimal (maximal) consistent checkpoints containing S are those formed from by choosing from each process not represented in S the earliest (latest) checkpoint that has no Z-path to or from any member of S. <p> These properties are embodied in the following theorems. The existence of the minimal and maximal consistent checkpoints has been proven before (by Wang <ref> [17, 16] </ref> and others), but not directly in terms of the Z-cone, which we have shown to be the basis of consistency. Netzer and Xu [14] construct the minimal checkpoint in one of their proofs but never discuss its properties per se. <p> Our next main result is an algorithm to enumerate all such consistent checkpoints. Algorithms have been presented in the literature for computing various sets of consistent checkpoints, such as for global predicate detection [6] and recovery <ref> [17, 16] </ref>, but none explicitly compute all the consistent checkpoints that include a given set S. Wang's work [17, 16] shows how to compute the maximal and the minimal consistent checkpoints that contain S. <p> Algorithms have been presented in the literature for computing various sets of consistent checkpoints, such as for global predicate detection [6] and recovery <ref> [17, 16] </ref>, but none explicitly compute all the consistent checkpoints that include a given set S. Wang's work [17, 16] shows how to compute the maximal and the minimal consistent checkpoints that contain S. Our algorithm is not targeted toward a specific application, as it simply computes the set of all consistent checkpoints containing S, but it illustrates the use of our theoretical results in determining consistent checkpoints. <p> Our algorithm is novel in that it restricts its selection of checkpoints to those within the Z-cone of S and it checks for the presence of Z-cycles within the Z-cone. In the next section we show how to perform this detection using a graph, discussed originally by Wang <ref> [17, 16] </ref>, from which Z-cones and Z-paths can be detected. Our algorithm is shown in Figure 5. The function ComputeAllCgs (S) returns the set of all consistent checkpoints that contain S. <p> In this section, we describe a method for determining the existence of Z-paths between checkpoints in a distributed computation that has terminated or stopped execution, using the rollback-dependency graph (R-graph) introduced by Wang <ref> [17, 16] </ref>. First, we present the definition of an R-graph. <p> We assume that each process stops execution after it sends reply to the request so that additional dependencies between checkpoints are not formed while the R-graph is being constructed. For each process, a volatile checkpoint is added; the volatile checkpoint represents the volatile state of the process <ref> [17, 16] </ref>.
References-found: 17

