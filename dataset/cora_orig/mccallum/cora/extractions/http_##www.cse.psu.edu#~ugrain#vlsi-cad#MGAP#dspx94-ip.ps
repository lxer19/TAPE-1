URL: http://www.cse.psu.edu/~ugrain/vlsi-cad/MGAP/dspx94-ip.ps
Refering-URL: http://www.cse.psu.edu/~ugrain/publications.html
Root-URL: 
Email: info.pub.permission@ieee.org.  
Note: Copyright c fl1994 IEEE. All rights reserved. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution must be obtained from the IEEE. For information on obtaining permission, send a blank email message to  By choosing to view this document, you agree to all provisions of the copyright laws protecting it.  
Abstract-found: 0
Intro-found: 1
Reference: [ANR74] <author> N. Ahmed, T. Natarajan, and K. R. Rao. </author> <title> Discrete Cosine Transform. </title> <journal> IEEE Trans. on Comps., </journal> <pages> pages 90-93, </pages> <month> Jan. </month> <year> 1974. </year>
Reference-contexts: The discrete cosine transform of m numbers can be computed in like fashion by using a size 2m FFT <ref> [ANR74] </ref>. 3.5 Other Applications The MGAP is not restricted to image processing applications. An interesting application of this architecture is to use it to simulate gas dynamics [UHP86]. In this problem we simulate the motion of gas particles by modeling the gas behavior as a cellular automaton.
Reference: [Fou86] <author> T. Fountain. </author> <title> An Evaluation of Some Chips for Image Processing. </title> <editor> In L. Uhr, K. Pre-ston, S. Levialdi, and M. J. B. Duff, editors, </editor> <title> Evaluation of Multicomputers for Image Processing, chapter Four. </title> <publisher> Academic Press, </publisher> <year> 1986. </year>
Reference-contexts: The value of a device is a function of its performance as well as its cost, and the two can be combined to give some idea of the cost-effectiveness of the device. Using the numbers and measures proposed by <ref> [Fou86] </ref>, table 2 is constructed. The cost estimate for the MGAP is computed from what it cost us to fabricate it at MOSIS. Production costs will be much lower if produced in volume. <p> The data shown here spans a ten year period during which significant changes occured in technology. Estimates of costs based on the number of processors per chip (as used by <ref> [Fou86] </ref>) or even the number of transistors per processor vary with the technology used (i.e. will be different for NMOS and CMOS) and will still not factor in the all important costs resulting from wires.
Reference: [Ger83] <author> F. A. Gerritsen. </author> <title> A Comparison of the CLIP IV, DAP and MPP processor-array Implementations. </title> <editor> In M. J. B. Duff, editor, </editor> <title> Computing Structures for Image Processing, chapter Two. </title> <publisher> Academic Press, </publisher> <year> 1983. </year>
Reference-contexts: Section 3 covers the performance of the MGAP for a variety of image processing applications. The final section summarizes our results and presents some conclusions. 2 Comparison of some processor architectures Table 1 lists some salient features of recent massively parallel array architectures <ref> [M.90, Ger83] </ref>. Compared to MPP, DAP and the GAPP, the MGAP has very little memory per processor. Of these, only the CLIP4 has comparable amount of memory.
Reference: [JO91] <author> Irwin M. J. and R. M. Owens. </author> <title> A Two-Dimensional, Distributed Logic Processor. </title> <journal> IEEE Trans. on Comps., </journal> <volume> 40(10) </volume> <pages> 1094-1101, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: As the window size grows, at some point it becomes practical to use the FFT algorithm to compute the convolution. Using the algorithm described in <ref> [JO91] </ref>, the 2D-DFT of 32 fi 32, 32 bit integers represented in base-4 using 4 fi 4 subarrays as word cells can be computed in 53; 832 cycles or 2:15ms.
Reference: [JO92] <author> Irwin M. J. and R. M. Owens. </author> <title> A Micro-Grained VLSI Signal Processor. </title> <booktitle> In ICASSP-92, </booktitle> <pages> pages 641-644, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: The MGAP array can be used in a subsystem configuration. The array design makes use of VLSI technology and an innovative architecture to provide high density of integration resulting in a single board design for the array, its controller and other peripherals <ref> [JO92, MIK + 92] </ref>. Section 2 analyses different array processors and their designs and elucidates the basic ideas behind the design decisions of the MGAP. Section 3 covers the performance of the MGAP for a variety of image processing applications. <p> The DAP provides each processor with at least 32Kbits of memory (and upto 1M bit at most) [M.90]. In contrast with these designs the MGAP processor is simpler and smaller, constructed in CMOS technology, with approximately 700 transistors per processor <ref> [JO92] </ref> including 16 bits of local memory. The MGAPs local memory has one read port and one read/write port allowing it to perform two reads and a write operation on its local memory every cycle [JO92]. <p> processor is simpler and smaller, constructed in CMOS technology, with approximately 700 transistors per processor <ref> [JO92] </ref> including 16 bits of local memory. The MGAPs local memory has one read port and one read/write port allowing it to perform two reads and a write operation on its local memory every cycle [JO92]. For low level tasks the ability of the array is closely tied to the performance of the basic processor with which the array is built. <p> In spite of these drawbacks table 2 provides insight into how the design decisions of these devices affect their capabilities and costs and provides a first approximation of the performance we may expect from them. The digit processors are organised into subarrays known as word cells <ref> [JO92, MIK + 92] </ref>, unlike the CLIP4 which organizes words in a linear fashion along rows or columns. The two dimensional subarray arrangment of the word cell is advantageous because shifting words in any direction takes the same time. <p> Conventional number representation systems limit the scope of parallelism afforded by spreading numeric operands across PEs. The use of a fully redundant number system allows more efficient use of the parallelism as described in <ref> [JO92] </ref>. The use of radix-4, maximally redundant representation provides a good trade-off between compactness and the amount of bit-serial computation needed. <p> Architecturally, the size of local memory, the innovative use of subarrays to form word cells coupled with a redundant number representation and a programmable local interconnect scheme <ref> [JO92] </ref> provides the MGAP with exceptional computational capabilities.
Reference: [K.86] <author> Preston Jr. K. </author> <title> Benchmark results: The abingdon cross. </title> <editor> In L. Uhr, K. Preston, S. Levialdi, and M. J. B. Duff, editors, </editor> <title> Evaluation of Multicomputers for Image Processing, chapter Three. </title> <publisher> Academic Press, </publisher> <year> 1986. </year>
Reference-contexts: The provision of a dual-port local memory enhances memory to processor traffic speeding up computation. Finally we compare the performance of the MGAP to that of the others fo the Abingdon Cross benchmark <ref> [K.86] </ref>.
Reference: [KC92] <author> Jang B. K. and R. T. Chin. </author> <title> Analysis of thinning algorithms using Mathematical Morphology. </title> <journal> IEEE Trans. Pattern Analysis and Machine Intell, </journal> <volume> 12(6) </volume> <pages> 541-557, </pages> <year> 1992. </year> <month> 12 </month>
Reference-contexts: Operations like erosion, dilation, opening, and closing are useful for performing applications like convex hull and thinning <ref> [KC92] </ref> among others.
Reference: [M.90] <author> Hord R. M. </author> <title> Parallel Supercomputing in SIMD Architectures. </title> <publisher> CRC Press, </publisher> <year> 1990. </year>
Reference-contexts: Section 3 covers the performance of the MGAP for a variety of image processing applications. The final section summarizes our results and presents some conclusions. 2 Comparison of some processor architectures Table 1 lists some salient features of recent massively parallel array architectures <ref> [M.90, Ger83] </ref>. Compared to MPP, DAP and the GAPP, the MGAP has very little memory per processor. Of these, only the CLIP4 has comparable amount of memory. <p> Furthermore, memory access is sequential, i.e. three memory accesses are needed to fetch three one-bit operands from memory. The DAP provides each processor with at least 32Kbits of memory (and upto 1M bit at most) <ref> [M.90] </ref>. In contrast with these designs the MGAP processor is simpler and smaller, constructed in CMOS technology, with approximately 700 transistors per processor [JO92] including 16 bits of local memory.
Reference: [MIK + 92] <author> Owens R. M., M. J. Irwin, T. P. Kelliher, M. Vishwanath, and R. S. Bajwa. </author> <title> Implementing a Family of High Performance, Micrograined Architectures. In Application Specific Array Processors, </title> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: The MGAP array can be used in a subsystem configuration. The array design makes use of VLSI technology and an innovative architecture to provide high density of integration resulting in a single board design for the array, its controller and other peripherals <ref> [JO92, MIK + 92] </ref>. Section 2 analyses different array processors and their designs and elucidates the basic ideas behind the design decisions of the MGAP. Section 3 covers the performance of the MGAP for a variety of image processing applications. <p> In spite of these drawbacks table 2 provides insight into how the design decisions of these devices affect their capabilities and costs and provides a first approximation of the performance we may expect from them. The digit processors are organised into subarrays known as word cells <ref> [JO92, MIK + 92] </ref>, unlike the CLIP4 which organizes words in a linear fashion along rows or columns. The two dimensional subarray arrangment of the word cell is advantageous because shifting words in any direction takes the same time.
Reference: [R.C92] <author> R.C.Gonzalez and R.E.Woods. </author> <title> Digital Image Processing. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1992. </year>
Reference-contexts: Filtering operations in the frequency domain can be converted into spatial filtering or spatial convolution using small window operators that minimize error in the least square sense <ref> [R.C92] </ref>. 5 Fig. 2. (a) Low pass filter, (b) High pass filter, (c) Line detection element and (d) data movement for convolution. 2. Point, line and edge detection: The window operator shown for high pass filtering can also be used for detecting isolated points. <p> Combined detection of all three features can be done by using window operators which form a basis set for these features <ref> [R.C92] </ref>. 3. Morphological Operations: Basic morphological operations like dilation, erosion, opening, and closing on binary images can be used to implement higher level tasks like boundary detection, shape identification, thinning, computing the frequency distribution of different objects in an image among others [R.C92]. <p> which form a basis set for these features <ref> [R.C92] </ref>. 3. Morphological Operations: Basic morphological operations like dilation, erosion, opening, and closing on binary images can be used to implement higher level tasks like boundary detection, shape identification, thinning, computing the frequency distribution of different objects in an image among others [R.C92]. Gray scale images can be easily converted to binary images after performing simple filtering operations followed by thresholding. Convolution can be performed using windows of various sizes. <p> The so called flat pixel-parallel partition algorithm [Tan83] is faster but not as efficient in an AT sense as it needs significantly more memory. Thinning of objects in images employing the Medial Axis Transformation is also performed using spatial operators <ref> [R.C92, ZS84] </ref>. The basic idea is that the thinned version of the object are those points which are at the same distance from two or more boundary points. The procedure ensures that end-points are not removed, connectivity is maintained and excessive erosion is prevented. <p> In general one can expect the average number of iterations to be equal to half of the width (in pixels) of the broadest section of the object. The analysis of images using mathematical morpholgy has gained considerable interest in recent years <ref> [R.C92] </ref>. Morphological operations like erosion and dilation on binary images can be performed very efficiently on the MGAP. <p> If the shape of the objects in an image are known then the relative frequency of occurrence of objects of different sizes can be computed by computing the differences between the original image and a dilated version using successively larger structuring elements <ref> [R.C92] </ref>. 3.3 Image Statistics-Histograms Histogramming is used to gather spatially independent statistics about the image. The most common one being to find the frequency distribution of gray levels in an image.
Reference: [Tan83] <author> S. L. Tanimoto. </author> <title> Algorithms for median filtering of images on a pyramid machine. </title> <editor> In M. J. B. Duff, editor, </editor> <title> Computing Structures for Image Processing, chapter Nine. </title> <publisher> Academic Press, </publisher> <year> 1983. </year>
Reference-contexts: For an image with 256 gray levels eight bits are needed per pixel. The algorithm looks at these bits sequentially for all pixels in a window to determine the median <ref> [Tan83] </ref>. The algorithm is as follows, variables GL [i] and F are initialized in each pixel, where GL [i] represents the gray level and F = 0 indicates that the relationship of that cell to the median is known. Variable temp is the product of GL [i] and F. <p> This algorithm is not the fastest, as it does not utilise all of the inherent parallelism of the problem. The so called flat pixel-parallel partition algorithm <ref> [Tan83] </ref> is faster but not as efficient in an AT sense as it needs significantly more memory. Thinning of objects in images employing the Medial Axis Transformation is also performed using spatial operators [R.C92, ZS84].
Reference: [UHP86] <author> Frisch U., B. Hasslacher, and Y. </author> <title> Pomeau. </title> . <journal> Physical Review Letters, </journal> <volume> 56(1505), </volume> <year> 1986. </year>
Reference-contexts: The discrete cosine transform of m numbers can be computed in like fashion by using a size 2m FFT [ANR74]. 3.5 Other Applications The MGAP is not restricted to image processing applications. An interesting application of this architecture is to use it to simulate gas dynamics <ref> [UHP86] </ref>. In this problem we simulate the motion of gas particles by modeling the gas behavior as a cellular automaton.
Reference: [ZS84] <author> T. Y. Zhang and C. Y. Suen. </author> <title> A Fast Parallel Algorithm for Thinning Digital Patterns. </title> <journal> Comm. of the ACM, </journal> <volume> 27(3) </volume> <pages> 236-239, </pages> <year> 1984. </year> <month> 13 </month>
Reference-contexts: The so called flat pixel-parallel partition algorithm [Tan83] is faster but not as efficient in an AT sense as it needs significantly more memory. Thinning of objects in images employing the Medial Axis Transformation is also performed using spatial operators <ref> [R.C92, ZS84] </ref>. The basic idea is that the thinned version of the object are those points which are at the same distance from two or more boundary points. The procedure ensures that end-points are not removed, connectivity is maintained and excessive erosion is prevented.
References-found: 13

