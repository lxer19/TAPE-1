URL: ftp://ftp.cs.unc.edu/pub/users/dewan/papers/access-control.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/cse.html
Root-URL: http://www.cs.unc.edu
Email: hhs@cs.purdue.edu and pd@cs.purdue.edu  
Title: Access Control for Collaborative Environments  
Author: HongHai Shen and Prasun Dewan 
Keyword: CSCW, groupware, access control, protection, security, user interface.  
Address: West Lafayette, IN 47907  
Affiliation: Department of Computer Sciences Purdue University  
Abstract: Access control is an indispensable part of any information sharing system. Collaborative environments introduce new requirements for access control, which cannot be met by using existing models developed for non-collaborative domains. We have developed a new access control model for meeting these requirements. The model is based on a generalized editing model of collaboration, which assumes that users interact with a collaborative application by concurrently editing its data structures. It associates fine-grained data displayed by a collaborative application with a set of collaboration rights and provides programmers and users a multi-dimensional, inheritance-based scheme for specifying these rights. The collaboration rights include traditional read and write rights and several new rights such as viewing rights and coupling rights. The inheritance-based scheme groups subjects, protected objects, and access rights; allows each component of an access specification to refer to both groups and individual members; and allows a specific access definition to override a more general one. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.E. Denning. </author> <title> Cryptography and Data Security. </title> <publisher> Addison-Wesley Publishing company, </publisher> <year> 1982. </year>
Reference-contexts: The model includes an access checking rule which ensures that a request for accessing object o by subject s is denied if A [s,o] does not contain the requisite right. The rule assumes that the subject requesting access is uniquely identified from the running process <ref> [1] </ref>. The model also contains a set of commands specifying how to make state transitions, i.e., to change (S, O, A). The above model does not specify the exact nature of the subjects, objects or access rights supported by the system.
Reference: [2] <author> Prasun Dewan. </author> <title> An inheritance model for supporting flexible displays of data structures. </title> <journal> Software Practice and Experience, </journal> <volume> 21(7) </volume> <pages> 719-738, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: This approach was first proposed for specifying display formats and other attributes of active variables by Dewan <ref> [2] </ref> and is described in detail there. <p> The concept of the include relationship among rights has not been discussed in other works to the best of our knowledge. Inheritance among objects takes its origin from the work in this area to support flexible displays and flexible coupling <ref> [3, 2] </ref>, which has not been used before for access control. The idea of inheritance among subjects has been proposed by database researchers [6, 10].
Reference: [3] <author> Prasun Dewan and Rajiv Choudhary. </author> <title> Flexible user interface coupling in collaborative systems. </title> <booktitle> In Proc. of ACM CHI'91 Conf., </booktitle> <pages> pages 41-49, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: The collaboration rights include traditional access rights such as read and write rights and several new rights such as the right to change the shared view of a displayed object and the right to couple with other users <ref> [3] </ref>. The inheritance-based scheme groups subjects, protected objects, and access rights; allows each component of an access specification (subject, object, right) to refer to both groups and individual members; and allows a more specific definition to override a more general one. <p> The active variables of Ctool are C programs, functions, and lines. Figure 1 shows two users, rxc and hhs, interacting with the tool. In this session, the users have set the ValueCoupled and ViewCoupled attributes <ref> [3] </ref> of the active variables to True, thereby sharing both their values and views. As a result, when user rxc changed the view of the minit procedure by eliding it 2 , the result was shared by both users, as shown in the figure. <p> For instance, if hhs denies rxc the eliding right to type function, all objects of this type (that is, all functions) inherit this access specification. 5.4 Access Dimension The Suite coupling model allows users to share the results of all operations on an active variable <ref> [3] </ref>. To meet the requirement of collaboration rights, our access model associates each of these operations with its own access right. <p> Figure 4 gives some of these relationships. These relationships allow, for instance, the RawListenR to imply the ParsedListenR since a user in Suite listening for raw values of active variables can also listen for parsed values <ref> [3] </ref>. The following inheritance rule summarize the above discussion: Right Inheritance Rule 2: A right r of subject s on object o, if undecided, is inherited from the rights that imply r, i.e., F (s; o; rx; A) ! F (s; o; r; A) where rx implies r. <p> The concept of the include relationship among rights has not been discussed in other works to the best of our knowledge. Inheritance among objects takes its origin from the work in this area to support flexible displays and flexible coupling <ref> [3, 2] </ref>, which has not been used before for access control. The idea of inheritance among subjects has been proposed by database researchers [6, 10].
Reference: [4] <author> Prasun Dewan and Rajiv Choudhary. </author> <title> Primitives for programming multi-user interfaces. </title> <booktitle> Proc. of the 4th ACM SIGGRAPH Symp. on User Interface Software and Technology, </booktitle> <pages> pages 69-78, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: A system-provided structure editor called a dialogue manager handles a user's interaction with the system. The framework is described in more detail in <ref> [4] </ref>. To illustrate the framework, consider the example of a Suite application called Ctool, which allows multiple users to edit and test C functions. The active variables of Ctool are C programs, functions, and lines. Figure 1 shows two users, rxc and hhs, interacting with the tool.
Reference: [5] <author> Clarence A. Ellis, Simon J. Gibbs, and Gail L. Rein. </author> <title> Groupware: Some issues and experiences. </title> <journal> CACM, </journal> <volume> 34(1) </volume> <pages> 38-58, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Most collaborative systems give all collaborators the same rights to all objects and expect access to be controlled by social protocol. Thus, they do not provide computer support for preventing mistakes, conflicting changes, or unauthorized access. The major exception known to us is the GROVE outline editor <ref> [5] </ref>. A major reason for the lack of access control in collaborative applications is the absence of a generic access control model for collaborative systems that meets the requirements of collaborative systems. <p> However, we have provided several methods for incrementally using and learning it. In particular, we have provided multiple dimensions of inheritance, which can be learned and used independently, as illustrated by our examples. It has been observed in <ref> [5] </ref> that Groupware's requirements can lead to complex access models, a complexity that must be managed, ..., there must be lightweight access control mechanisms that allow end-users to easily specify changes. User interfaces should smoothly mesh the access model with the user's conceptual model of the system.
Reference: [6] <author> E. B. Fernandez, R. C. Summers, and C. Wood. </author> <title> Database Security and Integrity. </title> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference-contexts: Moreover, unlike the include relationship, only positive authorizations are inherited from the imply relationship while negative authorizations are not. For example, write implies read, but negative write does not imply negative read, although negative read does imply negative write. Fernandez et al <ref> [6] </ref> suggested this approach for database systems and identified imply relationships among traditional access rights. We believe this approach is crucial for the more complex collaborative systems for two reasons. First, it reduces the problem of specifying the large number of rights necessary in a collaborative system. <p> A set of conflict resolution rules in the multiple dimensions. Some of the ideas in the model are based on a variety of previous works. The idea of imply relationship among access rights has been suggested in <ref> [6] </ref> which is extended by us to support collaboration rights. The concept of the include relationship among rights has not been discussed in other works to the best of our knowledge. <p> Inheritance among objects takes its origin from the work in this area to support flexible displays and flexible coupling [3, 2], which has not been used before for access control. The idea of inheritance among subjects has been proposed by database researchers <ref> [6, 10] </ref>. We have extended their work by providing two kinds of inheritances: take according to user roles and have according to user privileges, and comparing these two relationships for inheriting access rights.
Reference: [7] <author> G.S. Graham and P.J. Denning. </author> <title> Protection principles and practice. </title> <booktitle> Proc. Spring Jt. Computer Conf., </booktitle> <volume> 40 </volume> <pages> 417-429, </pages> <year> 1972. </year>
Reference-contexts: These requirements are motivated in more detail in the following sections along with our approach for meeting them. 3 OVERVIEW OF APPROACH The classic access matrix model proposed by Lampson [8] and refined by Graham and Denning <ref> [7] </ref> provides the basic framework to describe protection systems. Conceptually, the model describes what a protection state is and how state transitions occur. <p> The first stores the matrix by rows, i.e., each subject is associated with a list of pairs (object, rights) called capabilities. The second approach stores the matrix by columns, i.e., each object is associated with a list of pairs (subject, rights) <ref> [7] </ref>. If we use the capability list mechanism, we should start the search from the subject dimension because it is the most efficient way to search the underlying data structures. If we use the access list mechanism, we should start the search from the object dimension for the same reason.
Reference: [8] <author> B.W. Lampson. </author> <title> Protection. </title> <journal> ACM Oper. Syst. Rev.,, </journal> <volume> 8(1) </volume> <pages> 18-24, </pages> <year> 1974. </year>
Reference-contexts: Automation: The model should make it easy to implement access control in multi-user applications. These requirements are motivated in more detail in the following sections along with our approach for meeting them. 3 OVERVIEW OF APPROACH The classic access matrix model proposed by Lampson <ref> [8] </ref> and refined by Graham and Denning [7] provides the basic framework to describe protection systems. Conceptually, the model describes what a protection state is and how state transitions occur.
Reference: [9] <author> John F. Patterson. </author> <title> Comparing the programming demands of single-user and multi-user applications. </title> <booktitle> In Proc. of the 4th ACM SIGRAPH Conf. on User Interface Software and Technology, </booktitle> <pages> pages 79-86, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: compares our work with related work, gives conclusions, and presents directions for future work. 2 ACCESS REQUIREMENTS We have identified several requirements that a generic access control model for collaborative environments should support: Multiple, dynamic user roles: The model should allow users' access rights to be inferred from their roles <ref> [9] </ref>. Moreover, it should allow users to take multiple roles simultaneously and change these roles dynamically during different phases of collaboration. Collaboration rights: Besides traditional operations such as read and write, all other operations whose results can affect multiple users should be protected by collaboration rights.
Reference: [10] <author> Fausto Rabitti, Elisa Bertino, Won Kim, and Darrell Woelk. </author> <title> A model of authorization for next-generation database systems. </title> <journal> ACM TODS, </journal> <volume> 1(16) </volume> <pages> 88-131, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: In addition, it also supports negative rights, that is, explicit denial of a right. This notion is borrowed from a previous work on access control for database systems <ref> [10] </ref>. In this work, it was used along with the notion of strong and weak authorization to facilitate the access specification in the presence of a large set of data objects, which also applies to our environment. <p> In the other extreme case, all the positive ones can be put before negative ones to ensure maximal sharing (+faculty+serc-student-capo). Between these two extremes, users can adjust their needs by putting subjects at different positions. In conventional systems such as Unix and <ref> [10] </ref>, a user is given the union of the rights that all of his roles can have. In Multics [11], a user is asked to supply upon login which role and compartment he will take and his rights in the session is subsequently checked against the (individual, project, compartment) triple. <p> Inheritance among objects takes its origin from the work in this area to support flexible displays and flexible coupling [3, 2], which has not been used before for access control. The idea of inheritance among subjects has been proposed by database researchers <ref> [6, 10] </ref>. We have extended their work by providing two kinds of inheritances: take according to user roles and have according to user privileges, and comparing these two relationships for inheriting access rights.
Reference: [11] <author> J.H. Saltzer. </author> <title> Protection and the control of information sharing in multics. </title> <journal> CACM, </journal> <volume> 17(7) </volume> <pages> 388-402, </pages> <month> July </month> <year> 1974. </year>
Reference-contexts: We support inheritance of selected rights rather than all the rights because it reflects the "least privilege" principle <ref> [11] </ref> more faithfully. The following inheritance rule reflects the semantics of have: Subject Inheritance Rule 2: If subject s1 has right r of subject s2, i.e., have (s1,r,s2)=true, then F (s2; r; o; A) ! F (s1; r; o; A) where r is a positive right. <p> Between these two extremes, users can adjust their needs by putting subjects at different positions. In conventional systems such as Unix and [10], a user is given the union of the rights that all of his roles can have. In Multics <ref> [11] </ref>, a user is asked to supply upon login which role and compartment he will take and his rights in the session is subsequently checked against the (individual, project, compartment) triple. This approach, however, actually does not allow multiple roles of a user in a session.
References-found: 11

