URL: http://www.isi.edu:80/people/johnh/PAPERS/Bajaj98a.ps.gz
Refering-URL: http://www.isi.edu:80/people/johnh/PAPERS/Bajaj98a.html
Root-URL: http://www.isi.edu
Title: Virtual InterNetwork Testbed: Status and Research Agenda  
Author: Sandeep Bajaj, Lee Breslau, Deborah Estrin, Kevin Fall, Sally Floyd, Padma Haldar, Mark Handley, Ahmed Helmy, John Heidemann, Polly Huang, Satish Kumar, Steven McCanne, Reza Rejaie, Puneet Sharma, Scott Shenker, Kannan Varadhan, Haobo Yu, Ya Xu, Daniel Zappala 
Date: July 17, 1998  
Affiliation: USC Computer Science Department  
Pubnum: Technical Report 98-678  
Abstract: Simulation is an important tool in network protocol development, providing an effective way to perform controlled experiments, consider alternative designs, understand protocol interactions, and examine scales and topologies that are difficult to create in the laboratory. However, the scale and heterogeneity of today's networks create challenges for network simulation. In particular, configuring simulation inputs, properly modeling the myriad of interacting protocols, and processing and visualizing simulation output is becoming increasing difficult. The VINT project is developing a set of tools centered around ns simulator and nam network animator to meet these challenges. This paper describes the current status and future directions of this ongoing work. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jong-Suk Ahn, P.B. Danzig, D. Estrin, and B. Timmerman. </author> <title> Hybrid technique for simulating high bandwidth delay computer networks. </title> <booktitle> In Proceedings of the ACM SIGMETRICS, </booktitle> <pages> pages 260-261, </pages> <address> Santa Clara, CA, USA, </address> <month> May </month> <year> 1993. </year> <note> ACM. </note>
Reference-contexts: Abstraction is a final common approach to improving simulator performance. All simulators adopt some level of abstraction when choosing what to simulate. FlowSim was the first network simulator to make this trade-off explicit <ref> [1] </ref>. As discussed in Section 5, ns supports several levels of abstraction. A number of different simulation interfaces are possible, including programming in a high-level scripting language, a more traditional systems language [5], or sometimes both [19].
Reference: [2] <author> J.S. Ahn, Peter B. Danzig, Z. Liu, and L. Yan. </author> <title> Evaluation of TCP Vegas: Emulation and experiment. </title> <booktitle> In Proceedings of the ACM SIGCOMM, </booktitle> <pages> pages 185-195, </pages> <address> Cambridge, Massachusetts, </address> <month> August </month> <year> 1995. </year> <note> ACM. </note>
Reference-contexts: Nam provides visualization output and we plan to add some ability to edit topology. Network Emulation. Previous work in network emulation has included special purpose stand-alone network emulators supporting packet delay (Yan's Hitbox <ref> [2] </ref>). While these systems modify an existing packet stream, more sophisticated emulation systems such as Sun's Packet Shell [61] have allowed generation of new streams, typically for protocol testing. By linking a general purpose simulator to live network traces ns promises to accomplish both of these aims.
Reference: [3] <author> C. Alaettinoglu, A. U. Shankar, K. Dussa-Zieger, and I. Matta. </author> <title> Design and implementation of mars: A routing testbed. </title> <journal> Journal of Internetworking Research and Experience, </journal> <volume> 5(1) </volume> <pages> 17-41, </pages> <month> mar </month> <year> 1994. </year> <note> ftp://ftp.isi.edu/pub/cengiz/publications/ MaRS:Design.ps.gz. </note>
Reference-contexts: Some systems focus on allowing the same code to run in simulation and a live network (for example, x-Sim [11] and Maisie [5]). Most systems augment programming with a GUI shell of some kind <ref> [23, 46, 19, 59, 10, 3, 76, 70, 5] </ref>. Ns provides a split-level programming model (see Section 2) where packet processing is done in a systems language while simulation setup is done in a scripting language. Nam provides visualization output and we plan to add some ability to edit topology.
Reference: [4] <author> J.M. Antis, S.G. Eick, and J.D. Pyrce. </author> <title> Visualizing the structure of large relational databases. </title> <journal> IEEE Software, </journal> <volume> 13(1) </volume> <pages> 72-9, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: The above systems mainly focus on high-level statistics of network data, while nam currently focuses on packet-level animation and inspection. Many researchers have tackled the problem of visualization of complex data. Antis et al 's SeeData generates 2-D visualization of database structure <ref> [4] </ref>. It provides multiple colored views, each of which focuses on a different aspect of database structure, ranging from abstract overview of the entire structure to detailed associations among relations. Cat-a-Cone focuses on search and browsing of very large hierarchical data [41].
Reference: [5] <author> Rajive L. Bagrodia and Wen-Toh Liao. Maisie: </author> <title> A language for the design of efficient discrete-event simulations. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(4) </volume> <pages> 225-238, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Many target a specific area of research interest, such as network type (ATM Simulator [37]) or protocol (PIM-SIM [76]). Others, including ns, REAL, OPNET [19], INSANE [52] target a wider range of protocols. The most general provide a general simulation language with network protocol libraries (for example, Maisie <ref> [5] </ref>). Very focused simulators model only the details relevant to the developer. The differences between network-targeted and general simulators is much less clear. The core of ns and most network simulators is a discrete event processor. Several complementary approaches have been taken to improve accuracy, performance, or scaling. <p> Some simulators augment event processing with analytic models of traffic flow or queueing behavior (for example, OO [58] and fluid network approximations [47]) for better performance or accuracy. 13 Parallel and distributed simulation is a second way to improve performance. Several simulators support multiprocessors or networks of workstata-tions <ref> [46, 5, 64] </ref>. Although ns is focused only on sequential simulation, the TeD effort has parallelized some ns modules [64]; we see parallel simulation as complementary to abstraction. Abstraction is a final common approach to improving simulator performance. All simulators adopt some level of abstraction when choosing what to simulate. <p> FlowSim was the first network simulator to make this trade-off explicit [1]. As discussed in Section 5, ns supports several levels of abstraction. A number of different simulation interfaces are possible, including programming in a high-level scripting language, a more traditional systems language <ref> [5] </ref>, or sometimes both [19]. Some systems focus on allowing the same code to run in simulation and a live network (for example, x-Sim [11] and Maisie [5]). Most systems augment programming with a GUI shell of some kind [23, 46, 19, 59, 10, 3, 76, 70, 5]. <p> A number of different simulation interfaces are possible, including programming in a high-level scripting language, a more traditional systems language <ref> [5] </ref>, or sometimes both [19]. Some systems focus on allowing the same code to run in simulation and a live network (for example, x-Sim [11] and Maisie [5]). Most systems augment programming with a GUI shell of some kind [23, 46, 19, 59, 10, 3, 76, 70, 5]. Ns provides a split-level programming model (see Section 2) where packet processing is done in a systems language while simulation setup is done in a scripting language. <p> Some systems focus on allowing the same code to run in simulation and a live network (for example, x-Sim [11] and Maisie [5]). Most systems augment programming with a GUI shell of some kind <ref> [23, 46, 19, 59, 10, 3, 76, 70, 5] </ref>. Ns provides a split-level programming model (see Section 2) where packet processing is done in a systems language while simulation setup is done in a scripting language. Nam provides visualization output and we plan to add some ability to edit topology.
Reference: [6] <author> Sandeep Bajaj, Lee Breslau, and Scott Shenker. </author> <title> Is service priority useful in networks. </title> <booktitle> In ACM SIGMETRICS, </booktitle> <month> June </month> <year> 1998. </year>
Reference-contexts: Finally, it should be noted that alternative queue management and scheduling policies are useful for other kinds of simulation studies as well. For example, ns was used in a study of the effects of service priority on the performance experienced by adaptive audio applications <ref> [6] </ref>. A comparison of uniform and priority dropping mechanisms on the performance of 4 layered video also used ns extensively [7].
Reference: [7] <author> Sandeep Bajaj, Lee Breslau, and Scott Shenker. </author> <title> Uniform versus priority dropping for layered video. </title> <note> To appear in ACM Sigcomm, </note> <year> 1998. </year>
Reference-contexts: For example, ns was used in a study of the effects of service priority on the performance experienced by adaptive audio applications [6]. A comparison of uniform and priority dropping mechanisms on the performance of 4 layered video also used ns extensively <ref> [7] </ref>. In both these cases, while the scheduling and dropping algorithms were themselves not the focus of the study, they were a critical part of the infrastructure needed to carry out the simulation experiments. 3.3 Multicast routing More recently, ns has been used in the study of mul-ticast routing protocols. <p> For example, in simulations of RLM a multi-layered video source was created by combining several CBR streams [56]. A similar approach was used to incorporate correlations of burstiness across layers in another study involving layered video <ref> [7] </ref>. Ns provides an extensive set of models for individual traffic sources. However, in creating a simulation scenario, a network researcher is often more interested in background traffic with desired characteristics (i.e., aggregate bandwidth, burstiness, self-similarity, etc.).
Reference: [8] <author> A. J. Ballardie, P. F. Francis, and J. Crowcroft. </author> <title> Core Based Trees. </title> <booktitle> In Proceedings of the ACM SIGCOMM, </booktitle> <address> San Francisco, </address> <year> 1993. </year>
Reference-contexts: Leaf subnetworks with no local members of the group send prune messages towards the source of the packet. This prevents future packets from being transmitted to these subnetworks and limits packet distribution to those subnetworks with group members. In contrast, in explicit join protocols, such as CBT <ref> [8] </ref> or PIM-SM [26, 27], routers send hop-by-hop join messages for the groups for which they have local members. These control messages build forwarding state in routers and are sent upstream towards the source to establish a distribution tree.
Reference: [9] <author> Richard A. Becker, Stephen G. Eick, and Al-lan R. Wilks. </author> <title> Visualizing network data. </title> <journal> IEEE Transactions on Visualization and Computer Graphics, </journal> <volume> 1(1) </volume> <pages> 16-28, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: By linking a general purpose simulator to live network traces ns promises to accomplish both of these aims. Visualization and animation Like network simulation, visualization has a long history. Becker, Eick and Wilks described the SeeNet system for 2-D visualization of network data <ref> [9] </ref>. They display network traffic, overload and idle capacity on geographic maps. A matrix display of network overload is provided as an alternative. Animation is supported for inspecting time-varying characteristics of data. Lamm et al uses 3D display to show web server loads on a geographic map [71].
Reference: [10] <author> Bones, </author> <year> 1998. </year> <note> http://www.cadence.com/alta/ produces/bonesdat.html. </note>
Reference-contexts: Some systems focus on allowing the same code to run in simulation and a live network (for example, x-Sim [11] and Maisie [5]). Most systems augment programming with a GUI shell of some kind <ref> [23, 46, 19, 59, 10, 3, 76, 70, 5] </ref>. Ns provides a split-level programming model (see Section 2) where packet processing is done in a systems language while simulation setup is done in a scripting language. Nam provides visualization output and we plan to add some ability to edit topology.
Reference: [11] <author> L. Brakmo and L. Peterson. </author> <title> Experiences with network simulation. </title> <booktitle> In Proceedings of the ACM SIGMETRICS. ACM, </booktitle> <year> 1996. </year>
Reference-contexts: A number of different simulation interfaces are possible, including programming in a high-level scripting language, a more traditional systems language [5], or sometimes both [19]. Some systems focus on allowing the same code to run in simulation and a live network (for example, x-Sim <ref> [11] </ref> and Maisie [5]). Most systems augment programming with a GUI shell of some kind [23, 46, 19, 59, 10, 3, 76, 70, 5].
Reference: [12] <author> Ken Calvert and Ellen Zegura. </author> <title> Geor-gia tech internetwork topology models. </title> <address> http://www.cc.gatech.edu/fac/ Ellen.Zegura/graphs.html. </address>
Reference-contexts: For the two topology generation tools described below, we have written and made available conversion programs that allow the generated topologies to be used in ns simulations. The Georgia Tech Internetwork Topology Models (GT-ITM) software package <ref> [12, 13, 79] </ref> can create flat random networks using a variety of edge distribution models, including pure random, exponential, locality, several variations of Waxman's model [75] and the Doar-Leslie model [22].
Reference: [13] <author> Kenneth L. Calvert, Matthew B. Doar, and Ellen W. Zegura. </author> <title> Modeling internet topology. </title> <journal> IEEE Communications Magazine, </journal> <month> June </month> <year> 1997. </year>
Reference-contexts: For the two topology generation tools described below, we have written and made available conversion programs that allow the generated topologies to be used in ns simulations. The Georgia Tech Internetwork Topology Models (GT-ITM) software package <ref> [12, 13, 79] </ref> can create flat random networks using a variety of edge distribution models, including pure random, exponential, locality, several variations of Waxman's model [75] and the Doar-Leslie model [22]. <p> GT-ITM can also create transit-stub hierarchies like those found in the Internet. Parameters control the average number of transit domains, the average number of stubs per transit, and the average size of transit and stub domains. Doar has written tiers <ref> [21, 13, 20] </ref> to create three-level hierarchical topologies similar to the transit-stub GT-ITM topologies. In tiers, the three levels correspond to wide-area, metropolitan-area, and local-area networks. A network at any level is created by randomly placing nodes within a grid and then connecting them with a minimum spanning tree.
Reference: [14] <author> Stuart K. Card, George G. Robertson, and William York. </author> <title> The WebBook and the Web Forager: An information workspace for the WorldWide Web. </title> <booktitle> In Proceedings of the ACM SIGCHI Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 416-417, </pages> <address> Vancouver, Canada, </address> <year> 1996. </year>
Reference-contexts: Cat-a-Cone focuses on search and browsing of very large hierarchical data [41]. It uses ConeTree [67] for browsing and overview of search structure, and WebBook <ref> [14] </ref> to display search results. These systems share a common principle, i.e., multiple linked views are essential in visualizing complex data. Nam adopts this principle.
Reference: [15] <author> Michael K. Coleman and D. Stott Parker. </author> <title> Aesthetics-based graph layout for human com-sumption. </title> <journal> Software Practice and Experience, </journal> <volume> 26(12) </volume> <pages> 1415-38, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: Network Layout Before animating a simulation trace a layout for the network topology must be specified. This can be done manually by the user or automatically by nam. Much work has been done in automatic layout for arbitrary networks <ref> [15, 24, 50] </ref>. Nam adopts an algorithm based on a spring-embedder model [36] for its simplicity and efficiency. It assigns attractive forces on all links and repulsive forces between all nodes, and tries to achieve balance through iteration.
Reference: [16] <author> W. Dang and Joseph Macker. </author> <title> The Multicast Dissemination Protocol (MDP) Framework. </title> <type> Internet Draft: </type> <institution> NONE working group, </institution> <month> June 06, </month> <year> 1997. </year> <title> Work in Progress. </title>
Reference-contexts: Work is now focused on applying the congestion control schemes to Multicast Dissemination Protocol (MDP) <ref> [16] </ref>. This has been accomplished by retrofitting an existing implementation of MDP into ns, enabling study of the integrated protocol and congestion control scheme in the simulator.
Reference: [17] <author> Peter B. Danzig, Sugih Jamin, Ramon Caceres, Danny J. Mitzel, and Deborah Estrin. </author> <title> An empirical workload model for driving wide-area TCP/IP network simulations. </title> <journal> Journal of In-ternetworking: Research and Experience, </journal> <volume> 3(1) </volume> <pages> 1-26, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: For simulations of TCP, both bulk data and interactive sources are available. The former can model an FTP application while the latter, based in part on a model developed from traffic traces <ref> [17] </ref>, models Telnet-like applications. To simulate web traffic, a traffic generator based on the model described in [51] has also been implemented in ns. Other source models are available for non-flow controlled applications.
Reference: [18] <author> D. DeLucia and K. Obraczka. </author> <title> A multicast congestion control mechanism using representatives. </title> <type> Technical Report USC-CS TR 97-651, </type> <institution> Department of Computer Science, University of Southern California, </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: Receiver-driven Layered Multicast (RLM) [56] is an example of a multicast congestion control protocol for layered video transmission. Much of the design of RLM used ns; join-experiment heuristics, congestion measurements, and other features were prototyped through OTcl scripting. DeLucia <ref> [18] </ref> proposed a representative based congestion control algorithm for multicast bulk data transfer applications. ns was used to verify correct behavior in the face of congestion, and evaluate the performance of the protocol in the presence of competing traffic in the network.
Reference: [19] <author> F.H. Desbrandes, S. Bertolotti, and L. Dunand. Opnet 2.4: </author> <title> an environment for communication 15 network modeling and simulation. </title> <booktitle> In Proc Eu--ropean Simulation Symposium, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: Simulators have widely varying focuses. Many target a specific area of research interest, such as network type (ATM Simulator [37]) or protocol (PIM-SIM [76]). Others, including ns, REAL, OPNET <ref> [19] </ref>, INSANE [52] target a wider range of protocols. The most general provide a general simulation language with network protocol libraries (for example, Maisie [5]). Very focused simulators model only the details relevant to the developer. The differences between network-targeted and general simulators is much less clear. <p> FlowSim was the first network simulator to make this trade-off explicit [1]. As discussed in Section 5, ns supports several levels of abstraction. A number of different simulation interfaces are possible, including programming in a high-level scripting language, a more traditional systems language [5], or sometimes both <ref> [19] </ref>. Some systems focus on allowing the same code to run in simulation and a live network (for example, x-Sim [11] and Maisie [5]). Most systems augment programming with a GUI shell of some kind [23, 46, 19, 59, 10, 3, 76, 70, 5]. <p> Some systems focus on allowing the same code to run in simulation and a live network (for example, x-Sim [11] and Maisie [5]). Most systems augment programming with a GUI shell of some kind <ref> [23, 46, 19, 59, 10, 3, 76, 70, 5] </ref>. Ns provides a split-level programming model (see Section 2) where packet processing is done in a systems language while simulation setup is done in a scripting language. Nam provides visualization output and we plan to add some ability to edit topology.
Reference: [20] <author> Matthew Doar. tiers. </author> <month> ftp://ftp.nexen.com/pub/papers/tiers1.1.tar.gz. </month>
Reference-contexts: GT-ITM can also create transit-stub hierarchies like those found in the Internet. Parameters control the average number of transit domains, the average number of stubs per transit, and the average size of transit and stub domains. Doar has written tiers <ref> [21, 13, 20] </ref> to create three-level hierarchical topologies similar to the transit-stub GT-ITM topologies. In tiers, the three levels correspond to wide-area, metropolitan-area, and local-area networks. A network at any level is created by randomly placing nodes within a grid and then connecting them with a minimum spanning tree.
Reference: [21] <author> Matthew Doar. </author> <title> A better model for generating test networks. </title> <booktitle> In IEEE Global Telecommunications Conference / GLOBECOM '96, </booktitle> <month> November </month> <year> 1996. </year>
Reference-contexts: GT-ITM can also create transit-stub hierarchies like those found in the Internet. Parameters control the average number of transit domains, the average number of stubs per transit, and the average size of transit and stub domains. Doar has written tiers <ref> [21, 13, 20] </ref> to create three-level hierarchical topologies similar to the transit-stub GT-ITM topologies. In tiers, the three levels correspond to wide-area, metropolitan-area, and local-area networks. A network at any level is created by randomly placing nodes within a grid and then connecting them with a minimum spanning tree.
Reference: [22] <author> Matthew Doar and Ian Leslie. </author> <title> How bad is naive multicast routing? In IEEE INFOCOM, </title> <year> 1993. </year>
Reference-contexts: The Georgia Tech Internetwork Topology Models (GT-ITM) software package [12, 13, 79] can create flat random networks using a variety of edge distribution models, including pure random, exponential, locality, several variations of Waxman's model [75] and the Doar-Leslie model <ref> [22] </ref>. Given the size of a grid and the number of nodes desired, GT-ITM randomly places nodes on the grid and connects them according to the probability given by the edge model. The GT-ITM software package can also create different types of hierarchical networks.
Reference: [23] <author> A. Dupuy, J. Schwartz, Y. Yemini, and D. Bacon. </author> <title> NEST: A network simulation and proto-typing testbed. </title> <journal> Communications of the ACM, </journal> <volume> 33(10) </volume> <pages> 64-74, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Such bursts, which can have harmful effects on the network, often result after the successful reconstruction of the data stream following a series of packet losses [73] or after 1 Ns is derived from REAL [46], which is derived from NEST <ref> [23] </ref>. The current version of ns (version 2) is available at http://www-mash.cs.berkeley.edu/ns. idle connections [74]. The availability of a public-domain simulator including several variants of TCP greatly facilitates the evaluation of proposed protocol enhancements. 3.2 Queue Management and Scheduling Policies Ns has also been used to study router-based algorithms. <p> Manual layout can be specified in a trace file or by interactively editing an existing layout. 7 Related Work Network Simulators. Network simulation has a very long history. Ns itself is derived from REAL [46], which is derived from NEST <ref> [23] </ref>. Although we cannot list all relevant network simulators here, this section describes distinguishing features of network simulators and compares prominent examples with ns. Simulators have widely varying focuses. Many target a specific area of research interest, such as network type (ATM Simulator [37]) or protocol (PIM-SIM [76]). <p> Some systems focus on allowing the same code to run in simulation and a live network (for example, x-Sim [11] and Maisie [5]). Most systems augment programming with a GUI shell of some kind <ref> [23, 46, 19, 59, 10, 3, 76, 70, 5] </ref>. Ns provides a split-level programming model (see Section 2) where packet processing is done in a systems language while simulation setup is done in a scripting language. Nam provides visualization output and we plan to add some ability to edit topology.
Reference: [24] <author> E.R. Gansner, E. Koutsofios, </author> <title> S.C. North. A technique for drawing directed graphs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 19(3) </volume> <pages> 214-30, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Network Layout Before animating a simulation trace a layout for the network topology must be specified. This can be done manually by the user or automatically by nam. Much work has been done in automatic layout for arbitrary networks <ref> [15, 24, 50] </ref>. Nam adopts an algorithm based on a spring-embedder model [36] for its simplicity and efficiency. It assigns attractive forces on all links and repulsive forces between all nodes, and tries to achieve balance through iteration.
Reference: [25] <author> D. Estrin, D. Farinacci, A. Helmy, V. Ja-cobson, and L. Wei. </author> <title> Protocol Independent Multicast Dense Mode (PIM-DM): Protocol Specification. Proposed Experimental RFC. </title> <note> URL http://netweb.usc.edu/pim/pimdm/PIM-DM.ftxt,psg.gz, September 1996. </note>
Reference-contexts: These protocols can be classified as either broadcast-and-prune or explicit join protocols. In the former, which include DVMRP [69] and PIM-DM <ref> [25] </ref>, a multicast packet is transmitted to all leaf subnetworks in a distribution tree rooted a the source. Leaf subnetworks with no local members of the group send prune messages towards the source of the packet.
Reference: [26] <author> D. Estrin, D. Farinacci, A. Helmy, D. Thaler, S. Deering, M. Handley, V. Jacobson, C. Liu, P. Sharma, and L. Wei. </author> <title> Protocol Independent Multicast Sparse Mode (PIM-SM): Motivation and Architecture. Proposed Experimental RFC. </title> <note> URL http://netweb.usc.edu/pim/pimsm/PIM-Arch.ftxt,psg.gz, October 1996. </note>
Reference-contexts: This prevents future packets from being transmitted to these subnetworks and limits packet distribution to those subnetworks with group members. In contrast, in explicit join protocols, such as CBT [8] or PIM-SM <ref> [26, 27] </ref>, routers send hop-by-hop join messages for the groups for which they have local members. These control messages build forwarding state in routers and are sent upstream towards the source to establish a distribution tree.
Reference: [27] <author> D. Estrin, D. Farinacci, A. Helmy, D. Thaler, S. Deering, M. Handley, V. Jacobson, C. Liu, P. Sharma, and L. Wei. </author> <title> Protocol Independent Multicast Sparse Mode (PIM-SM): Protocol Specification. </title> <type> RFC 2117. </type> <address> URL http://netweb.usc.edu/pim/pimsm/PIM-SMv2-Exp-RFC.ftxt,psg.gz, March 1997. </address>
Reference-contexts: This prevents future packets from being transmitted to these subnetworks and limits packet distribution to those subnetworks with group members. In contrast, in explicit join protocols, such as CBT [8] or PIM-SM <ref> [26, 27] </ref>, routers send hop-by-hop join messages for the groups for which they have local members. These control messages build forwarding state in routers and are sent upstream towards the source to establish a distribution tree.
Reference: [28] <author> D. Estrin, M. Handley, A. Helmy, P. Huang, and D. Thaler. </author> <title> A Dynamic Bootstrap Mechanism for Rendezvous-based Multicast Routing. </title> <journal> Submitted to IEEE/ACM Transactions on Networking. </journal> <note> URL http://www.usc.edu/dept/cs/ technical reports.html, </note> <month> May </month> <year> 1997. </year>
Reference-contexts: The above-mentioned protocols provide internet-work forwarding of multicast packets. Multicast is also used in LAN environments to exchange routing updates and control messages, or to bootstrap protocol mechanisms <ref> [28] </ref>. Ns has been extended to support multiaccess links connecting more than two nodes. Facilities to support packet tracing (for off-line analysis) and selective loss have been implemented. Other than packet replication and forwarding, all the support for LAN multicast was done in OTcl to provide flexibility.
Reference: [29] <author> Theodore Faber. </author> <title> Optimizing throughput in a workstation-based network file system over a high bandwidth local area network. </title> <journal> ACM Operating Systems Review, </journal> <volume> 32(1) </volume> <pages> 29-40, </pages> <month> January </month> <year> 1998. </year>
Reference-contexts: For example, Faber uses ns to examine active approaches to congestion control <ref> [29] </ref>.
Reference: [30] <author> Kevin Fall and Sally Floyd. </author> <title> Simulation-based comparisons of tahoe, reno, and sack tcp. </title> <journal> ACM Computer Communication Review, </journal> <volume> 26(3), </volume> <month> July </month> <year> 1996. </year>
Reference-contexts: Investigations of TCP error and congestion control algorithms have led to the development of several new algorithms for TCP including selective acknowledgments <ref> [30, 54] </ref>, forward acknowledgments [53], and explicit congestion notification (ECN) [32].
Reference: [31] <author> S. Floyd, V. Jacobson, S. McCanne, C-G. Liu, and L. Zhang. </author> <title> A reliable multicast framework for light-weight sessions and application level framing. </title> <journal> ACM/IEEE Transactions on Networking, </journal> <note> 1997. To appear. </note>
Reference-contexts: In this section, we describe some of the work on reliable transport, congestion control, and application development in which simulation has been used. Reliable Transport Scalable Reliable Multicast (SRM) <ref> [31] </ref> was designed originally for real-time whiteboard applications. It uses a NACK-based protocol to achieve reliability. Receivers detecting a loss multicast a negative acknowledgement to the group. These negative acknowledgements are multicast in order to suppress duplicates. <p> Annotations may be edited interactively during animation. Nam provides VCR-like buttons (e.g., Play, Fast Forward, Rewind, etc) to control the animation.. Sometimes it is useful to compare several animations side-by-side, for example, when one is studying behaviors of the SRM protocol <ref> [31] </ref> with different parameters in the same scenario. In order to support this, several instances of nam running on the same machine can control each others' animations. It is assumed that only one nam instance will be in control at one time, therefore no concurrency control mechanism is provided.
Reference: [32] <author> Sally Floyd. </author> <title> Tcp and explicit congestion notification. </title> <journal> In ACM Computer Communication Review. ACM, </journal> <month> October </month> <year> 1994. </year>
Reference-contexts: Investigations of TCP error and congestion control algorithms have led to the development of several new algorithms for TCP including selective acknowledgments [30, 54], forward acknowledgments [53], and explicit congestion notification (ECN) <ref> [32] </ref>. Simulation studies using ns reveal how common TCP algorithms perform poorly when subjected to moderate to heavy packet loss, and how algorithms in end nodes such as "New Reno" and selective repeat can help to improve behavior significantly under such conditions.
Reference: [33] <author> Sally Floyd and Van Jacobson. </author> <title> On traffic phase effects in packet-switched gateways. </title> <journal> Journal of Internetworking: Research and Experience, </journal> <volume> 3(3), </volume> <month> September </month> <year> 1992. </year>
Reference-contexts: In addition, its random approach helps to avoid undesirable phase effects (i.e., throughput bias for particular connections) in networks of drop-tail queues <ref> [33] </ref>. Other investigations into router traffic management employing the ns simulator include Class Based Queueing (CBQ) [35], a technique in which packets are treated as members of "classes". Classes are assigned a maximum bandwidth allocation and priority level relative to other classes.
Reference: [34] <author> Sally Floyd and Van Jacobson. </author> <title> Random early detection gateways for congestion avoidance. </title> <journal> In ACM/IEEE Transactions on Networking. ACM, </journal> <month> August </month> <year> 1993. </year>
Reference-contexts: The availability of a public-domain simulator including several variants of TCP greatly facilitates the evaluation of proposed protocol enhancements. 3.2 Queue Management and Scheduling Policies Ns has also been used to study router-based algorithms. Random Early Detection (RED) queue management <ref> [34] </ref>, which was developed on one of the ancestors to ns, is supported as a standard queue management technique in ns. RED queue management reacts to congestion prior to overload.
Reference: [35] <author> Sally Floyd and Van Jacobson. </author> <title> Link-sharing and resource management models for packet networks. </title> <journal> In ACM/IEEE Transactions on Networking. ACM, </journal> <month> August </month> <year> 1995. </year>
Reference-contexts: In addition, its random approach helps to avoid undesirable phase effects (i.e., throughput bias for particular connections) in networks of drop-tail queues [33]. Other investigations into router traffic management employing the ns simulator include Class Based Queueing (CBQ) <ref> [35] </ref>, a technique in which packets are treated as members of "classes". Classes are assigned a maximum bandwidth allocation and priority level relative to other classes.
Reference: [36] <author> T.M.J. Fruchterman and E.M. Reingold. </author> <title> Graph drawing by force-directed placement. </title> <journal> Software Practice and Experience, </journal> <volume> 21(11) </volume> <pages> 1129-1164, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: This can be done manually by the user or automatically by nam. Much work has been done in automatic layout for arbitrary networks [15, 24, 50]. Nam adopts an algorithm based on a spring-embedder model <ref> [36] </ref> for its simplicity and efficiency. It assigns attractive forces on all links and repulsive forces between all nodes, and tries to achieve balance through iteration. Experience has shown that it works very well for topologies with less than 100 nodes.
Reference: [37] <author> Nada Golmie, Alfred Koenig, and David Su. </author> <title> The NIST ATM Network Simulator Operation and Programming Version 1.0. </title> <type> U.S. </type> <institution> Department of 16 Commerce Technology Administration National Insitute of Standards and Technology Computer System Laboratory Advanced Systems Division, Gaithersburg, MD 20899, </institution> <month> aug </month> <year> 1995. </year> <note> ftp://isdn.ncsl.nist.gov/atm-sim/sim man.ps.Z. </note>
Reference-contexts: Although we cannot list all relevant network simulators here, this section describes distinguishing features of network simulators and compares prominent examples with ns. Simulators have widely varying focuses. Many target a specific area of research interest, such as network type (ATM Simulator <ref> [37] </ref>) or protocol (PIM-SIM [76]). Others, including ns, REAL, OPNET [19], INSANE [52] target a wider range of protocols. The most general provide a general simulation language with network protocol libraries (for example, Maisie [5]). Very focused simulators model only the details relevant to the developer.
Reference: [38] <author> R. Govindan, H. Yu, and D. Estrin. </author> <title> Scalable non-transactional replication in the Internet. </title> <note> submitted for publication. </note>
Reference-contexts: While the original simulations of SRM were done in a stand-alone simulation tool, an SRM implementation has been 5 added to ns. This is valuable to other researchers investigating reliable multicast transport. For example, Routing Policy Multicast (RPM) <ref> [38] </ref> is an application-specific, SRM-like protocol for the reliable delivery of routing policy objects. These objects are large but there is less of a time constraint on delivery than with SRM.
Reference: [39] <author> Audio-Video Transport Working Group, H. Schulzrinne, S. Casner, R. Frederick, and V. Jacobson. RTP: </author> <title> A Transport Protocol for Real-Time Applications, RFC 1889 edition, </title> <year> 1996. </year>
Reference-contexts: Work is now focused on applying the congestion control schemes to Multicast Dissemination Protocol (MDP) [16]. This has been accomplished by retrofitting an existing implementation of MDP into ns, enabling study of the integrated protocol and congestion control scheme in the simulator. Application Real-time Transport Protocol (RTP) <ref> [39] </ref> is designed for unreliable, but timely delivery of datagrams for real-time audio or video, or other multimedia or real-time applications. ns implements the control aspects of RTP (Real-time Transport Control Protocol|RTCP) in OTcl. The implementation is useful for further experimentation in the development of other transport and application protocols.
Reference: [40] <author> C. Hanle. </author> <title> A comparison of architecture and performance between reliable multicast protocols over the MBone. </title> <type> Master's thesis, </type> <institution> Institute of Telematics, University of Karlsruhe, </institution> <year> 1997. </year>
Reference-contexts: As stated above, the existence of a public-domain simulator with an extensive set of protocol modules facilitates comparison of research results. As an example, Hanle <ref> [40] </ref> used ns to compared the Multi-cast File Transfer Protocol (MFTP) [68], a protocol specifically designed for bulk data transfer, to SRM under different network conditions in a variety of different topologies. By subjecting the protocols to identical test conditions, their behavior could be compared across a range of conditions.
Reference: [41] <author> Marti Hearst and Chandu Karadi. Cat-a-cone: </author> <title> An interactive interface for specifying searches and viewing retrieval results using a large category hierarchy. </title> <booktitle> In Proceedings of the 20th Annual International ACM/SIGIR Conference, </booktitle> <pages> pages 246-255, </pages> <address> Philadelphia, PA, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: It provides multiple colored views, each of which focuses on a different aspect of database structure, ranging from abstract overview of the entire structure to detailed associations among relations. Cat-a-Cone focuses on search and browsing of very large hierarchical data <ref> [41] </ref>. It uses ConeTree [67] for browsing and overview of search structure, and WebBook [14] to display search results. These systems share a common principle, i.e., multiple linked views are essential in visualizing complex data. Nam adopts this principle.
Reference: [42] <author> A. Helmy and D. Estrin. </author> <title> Simulation-based `STRESS' Testing Case Study: A Multicast Routing Protocol. </title> <booktitle> Sixth International Symposium on Modeling, Analysis and Simulation of Computer and Telecommunication Systems (MASCOTS '98), </booktitle> <month> July </month> <year> 1998. </year>
Reference-contexts: Evaluating the correctness of a protocol, on the other, can be a much more daunting task. We developed a framework for S ystematic T esting of Protocol Robustness by E valuation of S ynthesized S cenarios (STRESS) <ref> [42, 44] </ref> in order to reduce the effort needed to identify pathological cases of protocol behavior. As the name implies, this framework integrates systematic synthesis of test scenarios with the VINT simulation environment of ns. We are in the process of developing automatic test generation algorithms for multicast protocols. <p> Then, using a backward search technique, it generates scenario events leading to protocol error. These methods were applied to multicast routing protocol studies in ns. Several design errors were discovered and corrected with the aid of STRESS; the detailed results are presented in <ref> [42, 44, 43] </ref>. Future work in this area will consider the effect of a wider range of of network failures on multicast 9 routing. We will also investigate systematic methods for performance evaluation and sensitivity analysis of end-to-end protocols, such as multicast transport.
Reference: [43] <author> Ahmed Helmy, Deborah Estrin, and Sandeep Gupta. </author> <title> Fault-oriented test generation for multi-cast routing protocol design. Formal Description Techniques (FORTE XI) & Protocol Specification, Testing, and Verification (PSTV XVIII), </title> <booktitle> 1998 IFIP TC6/WG6.1 Join International Conference, </booktitle> <address> Paris, France., </address> <month> November </month> <year> 1998. </year>
Reference-contexts: Then, using a backward search technique, it generates scenario events leading to protocol error. These methods were applied to multicast routing protocol studies in ns. Several design errors were discovered and corrected with the aid of STRESS; the detailed results are presented in <ref> [42, 44, 43] </ref>. Future work in this area will consider the effect of a wider range of of network failures on multicast 9 routing. We will also investigate systematic methods for performance evaluation and sensitivity analysis of end-to-end protocols, such as multicast transport.
Reference: [44] <author> Ahmed A-G. Helmy. </author> <title> Systematic Testing of Mul-ticast Protocol Robustness. </title> <type> Ph.D. Dissertation proposal. </type> <note> Submitted as Technical Report to Computer Science, </note> <institution> University of Southern Califor-nia., </institution> <month> December </month> <year> 1997. </year>
Reference-contexts: Evaluating the correctness of a protocol, on the other, can be a much more daunting task. We developed a framework for S ystematic T esting of Protocol Robustness by E valuation of S ynthesized S cenarios (STRESS) <ref> [42, 44] </ref> in order to reduce the effort needed to identify pathological cases of protocol behavior. As the name implies, this framework integrates systematic synthesis of test scenarios with the VINT simulation environment of ns. We are in the process of developing automatic test generation algorithms for multicast protocols. <p> Then, using a backward search technique, it generates scenario events leading to protocol error. These methods were applied to multicast routing protocol studies in ns. Several design errors were discovered and corrected with the aid of STRESS; the detailed results are presented in <ref> [42, 44, 43] </ref>. Future work in this area will consider the effect of a wider range of of network failures on multicast 9 routing. We will also investigate systematic methods for performance evaluation and sensitivity analysis of end-to-end protocols, such as multicast transport.
Reference: [45] <author> Polly Huang, Deborah Estrin, and John Heide-mann. </author> <title> Enabling large-scale simulations: selective abstraction approach to the study of mul-ticast protocols. </title> <booktitle> In Proceedings of the International Symposium on Modeling, Analysis and Simulation of Computer and Telecommunication Systems, </booktitle> <address> Montreal, Canada, </address> <month> July </month> <year> 1998. </year> <note> IEEE. to appear. </note>
Reference-contexts: More importantly, it is often difficult to validate these simulators against more detailed simulations and reality. In ns, we are working on approaches which allow simulations to abstract away unnecessary details while still using general services <ref> [45] </ref>. By supporting an adjustable level of abstraction we will allow users to select abstract models when needed, but also focus in on the details to investigate interesting phenomena. <p> Use of centralized route computation is an example abstraction. Although it produces slightly different transient behavior, for many simulations these details are unimpor tant while savings in time and memory is <ref> [45] </ref>. These approaches often interplay, for example our session-level simulator abstracts away cross-traffic network interference and uses a very lightweight node and link representation (an implementation change). The cost of abstraction is simulation accuracy. <p> An analysis of how abstractions change simulation results accompanies our development of new abstractions. An analysis of SRM performance across detailed and session-level simulations suggests that while individual SRM events do vary, average aggregate behavior changes by only a few percent in the cases we examined <ref> [45] </ref>. Abstraction techniques that improve ns's ability to run large simulations is an area of ongoing effort.
Reference: [46] <author> Srinivasan Keshav. </author> <title> REAL: a network simulator. </title> <type> Technical Report 88/472, </type> <institution> University of Califor-nia, Berkeley, </institution> <month> December </month> <year> 1988. </year>
Reference-contexts: In addition, TCP can also be modified to avoid packet "bursts". Such bursts, which can have harmful effects on the network, often result after the successful reconstruction of the data stream following a series of packet losses [73] or after 1 Ns is derived from REAL <ref> [46] </ref>, which is derived from NEST [23]. The current version of ns (version 2) is available at http://www-mash.cs.berkeley.edu/ns. idle connections [74]. <p> Experience has shown that it works very well for topologies with less than 100 nodes. Manual layout can be specified in a trace file or by interactively editing an existing layout. 7 Related Work Network Simulators. Network simulation has a very long history. Ns itself is derived from REAL <ref> [46] </ref>, which is derived from NEST [23]. Although we cannot list all relevant network simulators here, this section describes distinguishing features of network simulators and compares prominent examples with ns. Simulators have widely varying focuses. <p> Some simulators augment event processing with analytic models of traffic flow or queueing behavior (for example, OO [58] and fluid network approximations [47]) for better performance or accuracy. 13 Parallel and distributed simulation is a second way to improve performance. Several simulators support multiprocessors or networks of workstata-tions <ref> [46, 5, 64] </ref>. Although ns is focused only on sequential simulation, the TeD effort has parallelized some ns modules [64]; we see parallel simulation as complementary to abstraction. Abstraction is a final common approach to improving simulator performance. All simulators adopt some level of abstraction when choosing what to simulate. <p> Some systems focus on allowing the same code to run in simulation and a live network (for example, x-Sim [11] and Maisie [5]). Most systems augment programming with a GUI shell of some kind <ref> [23, 46, 19, 59, 10, 3, 76, 70, 5] </ref>. Ns provides a split-level programming model (see Section 2) where packet processing is done in a systems language while simulation setup is done in a scripting language. Nam provides visualization output and we plan to add some ability to edit topology.
Reference: [47] <author> George Kesidis and Jean Walrand. </author> <title> Quick simulation of atm buffers with on-off multiclass markov fluid sources. </title> <journal> ACM Transactions on Modeling and Computer Simulations, </journal> <volume> 3(3) </volume> <pages> 269-276, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: The core of ns and most network simulators is a discrete event processor. Several complementary approaches have been taken to improve accuracy, performance, or scaling. Some simulators augment event processing with analytic models of traffic flow or queueing behavior (for example, OO [58] and fluid network approximations <ref> [47] </ref>) for better performance or accuracy. 13 Parallel and distributed simulation is a second way to improve performance. Several simulators support multiprocessors or networks of workstata-tions [46, 5, 64].
Reference: [48] <author> Satish Kumar, Pavlin Radoslavov, Dave Thaler, Cengiz Alaettinoglu, Deborah Estrin, and Mark Handley. </author> <title> The MASC/BGMP architecture for inter-domain multicast routing. </title> <note> To appear, SIG-COMM, </note> <month> September </month> <year> 1998. </year>
Reference-contexts: For example, Faber uses ns to examine active approaches to congestion control [29]. Portions of ns also have been used to study multicast address allocation <ref> [48] </ref>, new rate based congestion control algorithms [66], and self-organizing clustering algorithms applied to network monitoring and reliable multicast session message aggregation. 4 Scenario generation In general, a simulation scenario is defined by the components and parameters that comprise the simulation.
Reference: [49] <author> Will E. Leland, Murad S. Taqqu, Walter Will-inger, and Daniel V. Wilson. </author> <title> On the self-similar nature of Ethernet traffic (extended version). </title> <journal> ACM/IEEE Transactions on Networking, </journal> <volume> 2(1) </volume> <pages> 1-15, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: Other source models are available for non-flow controlled applications. These include a constant bit rate source, on-off sources using either exponential or Pareto distribution (the latter useful in generating self-similar traffic <ref> [49, 63] </ref>), and a source that generates traffic from a trace file. The composable framework of ns makes adding new traffic models easy, and allows construction of compound models out of the individual ones.
Reference: [50] <author> P. Luders, R. Ernst, and S. Stille. </author> <title> An approach to automatic display layout using combinatorial optimization algorithms. </title> <journal> Software Practice and Experience, </journal> <volume> 25(11) </volume> <pages> 1183-1202, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: Network Layout Before animating a simulation trace a layout for the network topology must be specified. This can be done manually by the user or automatically by nam. Much work has been done in automatic layout for arbitrary networks <ref> [15, 24, 50] </ref>. Nam adopts an algorithm based on a spring-embedder model [36] for its simplicity and efficiency. It assigns attractive forces on all links and repulsive forces between all nodes, and tries to achieve balance through iteration.
Reference: [51] <author> B. Mah. </author> <title> An empirical model of http network traffic. </title> <booktitle> In Proceedings of the IEEE Infocom, </booktitle> <address> Kobe, Japan, </address> <month> April </month> <year> 1997. </year> <note> IEEE. </note>
Reference-contexts: For simulations of TCP, both bulk data and interactive sources are available. The former can model an FTP application while the latter, based in part on a model developed from traffic traces [17], models Telnet-like applications. To simulate web traffic, a traffic generator based on the model described in <ref> [51] </ref> has also been implemented in ns. Other source models are available for non-flow controlled applications. These include a constant bit rate source, on-off sources using either exponential or Pareto distribution (the latter useful in generating self-similar traffic [49, 63]), and a source that generates traffic from a trace file.
Reference: [52] <author> Bruce A. Mah. </author> <title> INSANE Users Manual. </title> <institution> The Tenet Group Computer Science Division, University of California, Berkeley 94720, </institution> <month> may </month> <year> 1996. </year> <note> http://HTTP.CS.Berkeley.EDU/ bmah/ Software/Insane/InsaneMan.ps. </note>
Reference-contexts: Simulators have widely varying focuses. Many target a specific area of research interest, such as network type (ATM Simulator [37]) or protocol (PIM-SIM [76]). Others, including ns, REAL, OPNET [19], INSANE <ref> [52] </ref> target a wider range of protocols. The most general provide a general simulation language with network protocol libraries (for example, Maisie [5]). Very focused simulators model only the details relevant to the developer. The differences between network-targeted and general simulators is much less clear.
Reference: [53] <author> Matt Mathis and Jamshid Mahdavi. </author> <title> Forward acknowledgement: Refining tcp congestion control. </title> <booktitle> In ACM SIGCOMM. ACM, </booktitle> <month> August </month> <year> 1996. </year> <month> 17 </month>
Reference-contexts: Investigations of TCP error and congestion control algorithms have led to the development of several new algorithms for TCP including selective acknowledgments [30, 54], forward acknowledgments <ref> [53] </ref>, and explicit congestion notification (ECN) [32]. Simulation studies using ns reveal how common TCP algorithms perform poorly when subjected to moderate to heavy packet loss, and how algorithms in end nodes such as "New Reno" and selective repeat can help to improve behavior significantly under such conditions.
Reference: [54] <author> Matt Mathis, Jamshid Mahdavi, Sally Floyd, and Allyn Romanow. </author> <title> Tcp selective acknowledgement options (rfc 2018). In Internet Request For Comments, </title> <month> October </month> <year> 1996. </year>
Reference-contexts: Investigations of TCP error and congestion control algorithms have led to the development of several new algorithms for TCP including selective acknowledgments <ref> [30, 54] </ref>, forward acknowledgments [53], and explicit congestion notification (ECN) [32].
Reference: [55] <author> S. McCanne. </author> <title> Router forwarding services for reliable multicast. Note 199704141535.IAA10590@mlk.cs.berkeley.edu to the Reliable Multicast list rm@mash.cs.berkeley.edu, </title> <month> April </month> <year> 1997. </year>
Reference-contexts: McCanne et al <ref> [55] </ref> are using ns to investigate the minimal set of mechanisms that a router could implement to simplify the design and improve the performance of multicast transport protocols.
Reference: [56] <author> S. McCanne, V. Jacobson, and M. Vetterli. </author> <title> Receiver-driven layered multicast. </title> <booktitle> In ACM SIG-COMM, </booktitle> <pages> pages 117-130, </pages> <address> Stanford, CA, U.S.A., </address> <month> August </month> <year> 1996. </year>
Reference-contexts: Congestion Control Multicast congestion control is an active area of investigation. The challenge is to manage the feedback from a large set of homogeneous receivers in a timely and scalable manner. Receiver-driven Layered Multicast (RLM) <ref> [56] </ref> is an example of a multicast congestion control protocol for layered video transmission. Much of the design of RLM used ns; join-experiment heuristics, congestion measurements, and other features were prototyped through OTcl scripting. <p> The composable framework of ns makes adding new traffic models easy, and allows construction of compound models out of the individual ones. For example, in simulations of RLM a multi-layered video source was created by combining several CBR streams <ref> [56] </ref>. A similar approach was used to incorporate correlations of burstiness across layers in another study involving layered video [7]. Ns provides an extensive set of models for individual traffic sources.
Reference: [57] <author> Steven McCanne, Eric Brewer, Randy Katz, Lawrence Rowe, Elan Amir, Yatin Chawathe, Alan Coopersmith, Ketan Mayer-Patel, Suchi-tra Raman, Angela Schuett, David Simpson, Andrew Swan, Teck-Lee Tung, David Wu, and Brian Smith. </author> <title> Toward a common infrastructure for multimedia-networking middleware. </title> <booktitle> In Proceedings of the 7thInternational Workshop on Network and Operating Systems Support for Digital Audio and Video, </booktitle> <pages> pages 39-49, </pages> <address> St. Louis, Missouri, </address> <month> May </month> <year> 1997. </year> <note> IEEE. </note>
Reference-contexts: We further adopted a simple extension to OTcl called TclCL (for Tcl with classes) that provides object scaffolding between C ++ and OTcl and thereby allows an object's implementation to be split across the two languages in congruence with our split programming model <ref> [57] </ref>. With the OTcl programming model in place, each macro-object becomes an OTcl class and its complexity is hidden behind a simple-to-use set of object methods. Moreover, macro-objects can be embedded within other macro-objects, leading to a hierarchical architecture that supports multiple levels of abstraction. <p> The ns emulation facility is currently under development, but an experimental version has already proven useful in diagnosing errors in protocol implementation. For example, researchers at UC Berke-ley have developed a shared white board application using a version of the SRM protocol supported in the MASH toolkit <ref> [57] </ref>. The simulator is placed between groups of live end stations communicating using SRM. Multicast traffic passing between groups 7 must traverse the simulator, and is subject to the dynamics of its simulated network.
Reference: [58] <author> Armin R. Mikler, Johnny S. K. Wong, and Vasant Honavar. </author> <title> An object oriented approach to simualting large communication networks. </title> <journal> Journal of Systems Software, </journal> <volume> 40 </volume> <pages> 151-164, </pages> <year> 1998. </year> <title> huang folder: general simulator. </title>
Reference-contexts: The core of ns and most network simulators is a discrete event processor. Several complementary approaches have been taken to improve accuracy, performance, or scaling. Some simulators augment event processing with analytic models of traffic flow or queueing behavior (for example, OO <ref> [58] </ref> and fluid network approximations [47]) for better performance or accuracy. 13 Parallel and distributed simulation is a second way to improve performance. Several simulators support multiprocessors or networks of workstata-tions [46, 5, 64].
Reference: [59] <author> Robb Mills. Comnet iii: </author> <title> Object-oriented network performance prediction. </title> <editor> In G.W. Evans, M. Mollaghasemi, E.C. Russell, and W.E. Biles, editors, </editor> <booktitle> Proceedings of the 1993 Winter Simulation Conference, </booktitle> <pages> pages 237-239, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Some systems focus on allowing the same code to run in simulation and a live network (for example, x-Sim [11] and Maisie [5]). Most systems augment programming with a GUI shell of some kind <ref> [23, 46, 19, 59, 10, 3, 76, 70, 5] </ref>. Ns provides a split-level programming model (see Section 2) where packet processing is done in a systems language while simulation setup is done in a scripting language. Nam provides visualization output and we plan to add some ability to edit topology.
Reference: [60] <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Thus, they are best served by an implementation in a flexible and interactive scripting language like Tcl <ref> [60] </ref>. To this end, ns exploits a split programming model, where the simulation kernel|i.e., the core set of high-performance simulation primitives|is implemented in a compiled language (C ++ ) while simulations are defined, configured, and controlled by writing an "ns simulation program" expressed in the Tcl scripting language.
Reference: [61] <author> Steve Parker and Chris Schmechel. </author> <title> The packet shell protocol testing tool. </title> <note> Software distribution at http://playground.sun.com/psh/, 1997. </note>
Reference-contexts: Network Emulation. Previous work in network emulation has included special purpose stand-alone network emulators supporting packet delay (Yan's Hitbox [2]). While these systems modify an existing packet stream, more sophisticated emulation systems such as Sun's Packet Shell <ref> [61] </ref> have allowed generation of new streams, typically for protocol testing. By linking a general purpose simulator to live network traces ns promises to accomplish both of these aims. Visualization and animation Like network simulation, visualization has a long history.
Reference: [62] <author> V. Paxson. </author> <title> End-to-end routing behavior in the internet. </title> <booktitle> In ACM SIGCOMM, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: Study of network dynamics is important to characterize the behavior of end-to-end protocols in the context of a variety of network anomalies, including route flapping, routing loops and network partitions <ref> [62] </ref>. We have 6 used these approaches to study TCP and multicast transport protocols [73]. One effect of topology change is the reordering of packets in transit. Such interleaving of acknowledge-ments or data packets can have harmful consequences for a TCP session and the network.
Reference: [63] <author> Vern Paxson and Sally Floyd. </author> <title> Wide-area traffic: the failure of Poisson modeling. </title> <booktitle> In ACM SIG-COMM, </booktitle> <pages> pages 257-268, </pages> <address> London, United Kingdom, </address> <month> August </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: Other source models are available for non-flow controlled applications. These include a constant bit rate source, on-off sources using either exponential or Pareto distribution (the latter useful in generating self-similar traffic <ref> [49, 63] </ref>), and a source that generates traffic from a trace file. The composable framework of ns makes adding new traffic models easy, and allows construction of compound models out of the individual ones.
Reference: [64] <author> K. Perumalla, R. Fujimota, and A. Ogielski. </author> <title> Ted a language for modeling telecommunication networks. </title> <journal> ACM SIGMETRICS Performance Evaluation Review, </journal> <volume> 25(4), </volume> <month> March </month> <year> 1998. </year>
Reference-contexts: Some simulators augment event processing with analytic models of traffic flow or queueing behavior (for example, OO [58] and fluid network approximations [47]) for better performance or accuracy. 13 Parallel and distributed simulation is a second way to improve performance. Several simulators support multiprocessors or networks of workstata-tions <ref> [46, 5, 64] </ref>. Although ns is focused only on sequential simulation, the TeD effort has parallelized some ns modules [64]; we see parallel simulation as complementary to abstraction. Abstraction is a final common approach to improving simulator performance. All simulators adopt some level of abstraction when choosing what to simulate. <p> Several simulators support multiprocessors or networks of workstata-tions [46, 5, 64]. Although ns is focused only on sequential simulation, the TeD effort has parallelized some ns modules <ref> [64] </ref>; we see parallel simulation as complementary to abstraction. Abstraction is a final common approach to improving simulator performance. All simulators adopt some level of abstraction when choosing what to simulate. FlowSim was the first network simulator to make this trade-off explicit [1].
Reference: [65] <author> A. Reddy. </author> <title> A self organizing monitoring architecture. </title> <type> Thesis Proposal, </type> <note> Available from the authors, </note> <month> May </month> <year> 1997. </year>
Reference-contexts: The implementation is useful for further experimentation in the development of other transport and application protocols. Reddy <ref> [65] </ref> proposed a multicast-based application of a network of dynamically adaptive measurement servers to gather localized information about the network. ns is being used in the design of the protocol, to determine the scope of each measurement server so that every node or link is monitored by a server, and to
Reference: [66] <author> Reza Rejaie, Mark Handely, and Deborah Es-trin. </author> <title> Rap: An end-to-end rate-based congestion control mechanism for realtime streams in the Internet. </title> <note> Submitted to ICNP '98, available at http://netweb.usc.edu/reza/icnp98.ps, 1998. </note>
Reference-contexts: For example, Faber uses ns to examine active approaches to congestion control [29]. Portions of ns also have been used to study multicast address allocation [48], new rate based congestion control algorithms <ref> [66] </ref>, and self-organizing clustering algorithms applied to network monitoring and reliable multicast session message aggregation. 4 Scenario generation In general, a simulation scenario is defined by the components and parameters that comprise the simulation.
Reference: [67] <author> George G. Robertson, Stuart K. Card, and Jock D. MacKinlay. </author> <title> Information visualization using 3D interactive animation. </title> <journal> Communications of the ACM, </journal> <volume> 36(4) </volume> <pages> 56-71, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: It provides multiple colored views, each of which focuses on a different aspect of database structure, ranging from abstract overview of the entire structure to detailed associations among relations. Cat-a-Cone focuses on search and browsing of very large hierarchical data [41]. It uses ConeTree <ref> [67] </ref> for browsing and overview of search structure, and WebBook [14] to display search results. These systems share a common principle, i.e., multiple linked views are essential in visualizing complex data. Nam adopts this principle.
Reference: [68] <author> K. Robertson, K. Miller, M. White, and A. Tweedly. </author> <title> StarBurst Multicast File Transfer Protocol (MFTP) Specification. </title> <type> Internet Draft: </type> <institution> NONE working group, </institution> <month> February 13, </month> <year> 1997. </year> <title> Work in progress. </title>
Reference-contexts: As stated above, the existence of a public-domain simulator with an extensive set of protocol modules facilitates comparison of research results. As an example, Hanle [40] used ns to compared the Multi-cast File Transfer Protocol (MFTP) <ref> [68] </ref>, a protocol specifically designed for bulk data transfer, to SRM under different network conditions in a variety of different topologies. By subjecting the protocols to identical test conditions, their behavior could be compared across a range of conditions. Congestion Control Multicast congestion control is an active area of investigation.
Reference: [69] <author> D. Waitzman S. Deering, C. Partridge. </author> <title> Distance Vector Multicast Routing Protocol, </title> <month> November </month> <year> 1988. </year> <month> RFC1075. </month>
Reference-contexts: Several multicast routing protocols, which establish distribution trees for delivering datagrams from a single sender to all the members of a multicast group, have been proposed for the Internet. These protocols can be classified as either broadcast-and-prune or explicit join protocols. In the former, which include DVMRP <ref> [69] </ref> and PIM-DM [25], a multicast packet is transmitted to all leaf subnetworks in a distribution tree rooted a the source. Leaf subnetworks with no local members of the group send prune messages towards the source of the packet.
Reference: [70] <author> Hussein Salama. </author> <note> Mcrsim user's manual, </note> <month> May </month> <year> 1995. </year> <title> huang folder: specialized simulator. </title>
Reference-contexts: Some systems focus on allowing the same code to run in simulation and a live network (for example, x-Sim [11] and Maisie [5]). Most systems augment programming with a GUI shell of some kind <ref> [23, 46, 19, 59, 10, 3, 76, 70, 5] </ref>. Ns provides a split-level programming model (see Section 2) where packet processing is done in a systems language while simulation setup is done in a scripting language. Nam provides visualization output and we plan to add some ability to edit topology.
Reference: [71] <author> W.H. Scullin S.E. Lamm, D.A. Reed. </author> <title> Real-time geographic visualization of world wide web traffic. </title> <booktitle> Computer Networks and ISDN Systems (Fifth International World Wide Web Conference), </booktitle> <address> 28(7-11):1457-68, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: They display network traffic, overload and idle capacity on geographic maps. A matrix display of network overload is provided as an alternative. Animation is supported for inspecting time-varying characteristics of data. Lamm et al uses 3D display to show web server loads on a geographic map <ref> [71] </ref>. Different traffic types are colored coded. Scullin et al uses Scattercube Matrix metaphor to display web server performance in a virtual reality environment [78]. The above systems mainly focus on high-level statistics of network data, while nam currently focuses on packet-level animation and inspection.
Reference: [72] <author> P. Sharma, D. Estrin, S. Floyd, and V. Jacobson. </author> <title> Scalable timers for soft state protocols. </title> <booktitle> In IEEE Infocom, </booktitle> <year> 1997. </year> <month> 18 </month>
Reference-contexts: This implementation was used to evaluate rapidly different timer mechanisms, and determine the optimal parameter settings for RPM. The periodic session messages in SRM lead to bandwidth overhead that impacts protocol scalability when the group membership is large. Scalable Session Messages (SSM) <ref> [72] </ref> algorithms use hierarchy mechanisms to reduce this overhead. ns was used to investigate the different mechanisms by which representatives are chosen, and to quantify the scaling benefits that can be achieved and the impact on the protocol's loss detection and recovery mechanisms.
Reference: [73] <author> Kannan Varadhan, Deborah Estrin, and Sally Floyd. </author> <title> Impact of network dynamics on end-to-end proocols: Case studies in TCP and reliable multicast. </title> <type> Technical Report USC CS TR 98-672, </type> <institution> University of Southern California, </institution> <month> March </month> <year> 1998. </year>
Reference-contexts: In addition, TCP can also be modified to avoid packet "bursts". Such bursts, which can have harmful effects on the network, often result after the successful reconstruction of the data stream following a series of packet losses <ref> [73] </ref> or after 1 Ns is derived from REAL [46], which is derived from NEST [23]. The current version of ns (version 2) is available at http://www-mash.cs.berkeley.edu/ns. idle connections [74]. <p> Study of network dynamics is important to characterize the behavior of end-to-end protocols in the context of a variety of network anomalies, including route flapping, routing loops and network partitions [62]. We have 6 used these approaches to study TCP and multicast transport protocols <ref> [73] </ref>. One effect of topology change is the reordering of packets in transit. Such interleaving of acknowledge-ments or data packets can have harmful consequences for a TCP session and the network. In particular, the sender can see a sudden and large increase in the amount of acknowledged data.
Reference: [74] <author> Vikram Visweswaraiah and John Heidemann. </author> <title> Improving restart of idle TCP connections. </title> <type> Technical Report 97-661, </type> <institution> University of Southern California, </institution> <month> November </month> <year> 1997. </year>
Reference-contexts: The current version of ns (version 2) is available at http://www-mash.cs.berkeley.edu/ns. idle connections <ref> [74] </ref>. The availability of a public-domain simulator including several variants of TCP greatly facilitates the evaluation of proposed protocol enhancements. 3.2 Queue Management and Scheduling Policies Ns has also been used to study router-based algorithms.
Reference: [75] <author> Bernard M. Waxman. </author> <title> Routing of multipoint connections. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 6(9), </volume> <month> December </month> <year> 1988. </year>
Reference-contexts: The Georgia Tech Internetwork Topology Models (GT-ITM) software package [12, 13, 79] can create flat random networks using a variety of edge distribution models, including pure random, exponential, locality, several variations of Waxman's model <ref> [75] </ref> and the Doar-Leslie model [22]. Given the size of a grid and the number of nodes desired, GT-ITM randomly places nodes on the grid and connects them according to the probability given by the edge model. The GT-ITM software package can also create different types of hierarchical networks.
Reference: [76] <author> Liming Wei. </author> <title> The design of the USC PIM simulator (pimsim). </title> <type> Technical Report 95-604, </type> <institution> University of Southern California Computer Science, </institution> <address> Los Angeles, CA 90089-0781, </address> <month> aug </month> <year> 1995. </year> <note> http://catarina.usc.edu/lwei/TR-95-604.ps.gz. </note>
Reference-contexts: Although we cannot list all relevant network simulators here, this section describes distinguishing features of network simulators and compares prominent examples with ns. Simulators have widely varying focuses. Many target a specific area of research interest, such as network type (ATM Simulator [37]) or protocol (PIM-SIM <ref> [76] </ref>). Others, including ns, REAL, OPNET [19], INSANE [52] target a wider range of protocols. The most general provide a general simulation language with network protocol libraries (for example, Maisie [5]). Very focused simulators model only the details relevant to the developer. <p> Some systems focus on allowing the same code to run in simulation and a live network (for example, x-Sim [11] and Maisie [5]). Most systems augment programming with a GUI shell of some kind <ref> [23, 46, 19, 59, 10, 3, 76, 70, 5] </ref>. Ns provides a split-level programming model (see Section 2) where packet processing is done in a systems language while simulation setup is done in a scripting language. Nam provides visualization output and we plan to add some ability to edit topology.
Reference: [77] <author> David Wetherall and Christopher J. Linblad. </author> <title> Extending Tcl for dynamic object-oriented programming. </title> <booktitle> In Proceedings of the USENIX Tcl/Tk Workshop, </booktitle> <pages> page 288, </pages> <address> Toronto, Ontario, </address> <month> July </month> <year> 1995. </year> <booktitle> USENIX. </booktitle>
Reference-contexts: Thus, we adopted an object-oriented extension of Tcl. Of the several Tcl object extensions available at the time, we chose the Object Tcl (OTcl) system from MIT <ref> [77] </ref> because it required no changes to the Tcl core and had a particularly elegant yet simple design.
Reference: [78] <author> D.A. Reed W.H. Scullin, T.T. Kwan. </author> <title> Real-time visualization of world wide web traffic. </title> <booktitle> In Proceedings of 1995 ICASE/LaRC Symposium on Visualizing Time-Varying Data, </booktitle> <pages> pages 31-45, </pages> <address> Williamsburg, VA, USA, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Animation is supported for inspecting time-varying characteristics of data. Lamm et al uses 3D display to show web server loads on a geographic map [71]. Different traffic types are colored coded. Scullin et al uses Scattercube Matrix metaphor to display web server performance in a virtual reality environment <ref> [78] </ref>. The above systems mainly focus on high-level statistics of network data, while nam currently focuses on packet-level animation and inspection. Many researchers have tackled the problem of visualization of complex data. Antis et al 's SeeData generates 2-D visualization of database structure [4].
Reference: [79] <author> Ellen W. Zegura, Ken Calvert, and S. Bhat-tacharjee. </author> <title> How to model an internetwork. </title> <booktitle> In IEEE INFOCOM, </booktitle> <year> 1996. </year> <month> 19 </month>
Reference-contexts: For the two topology generation tools described below, we have written and made available conversion programs that allow the generated topologies to be used in ns simulations. The Georgia Tech Internetwork Topology Models (GT-ITM) software package <ref> [12, 13, 79] </ref> can create flat random networks using a variety of edge distribution models, including pure random, exponential, locality, several variations of Waxman's model [75] and the Doar-Leslie model [22].
References-found: 79

