URL: http://hal.cs.vt.edu/~jpv/sbr.ps
Refering-URL: http://hal.cs.vt.edu/~jpv/papers.html
Root-URL: http://www.cs.vt.edu
Email: heath,jpv@cs.vt.edu  
Title: SOME EXPERIMENTS ON THE SORTING BY REVERSALS PROBLEM  
Author: Lenwood S. Heath and John Paul C. Vergara 
Date: September 25, 1995  
Address: 24061-0106  
Affiliation: Department of Computer Science Virginia Polytechnic Institute and State University Blacksburg, Virginia  
Abstract: Sorting by reversals is the problem of finding the minimum number of reversals required to sort a permutation . The problem is significant with respect to the study of genome rearrangements and phylogeny reconstruction. This paper presents a programming framework for performing experiments on the problem. Several conjectures concerning optimal sorting sequences are tested using this framework.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Bafna and P. A. Pevzner, </author> <title> Genome rearrangements and sorting by reversals, </title> <booktitle> in Proceedings of the 34th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1993, </year> <pages> pp. </pages> <month> 148-157. </month> <title> [2] , Sorting permutations by transpositions, </title> <booktitle> in Proceedings of the Sixth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1995, </year> <pages> pp. 614-623. </pages>
Reference-contexts: In this paper, we investigate sorting by reversals, the problem of determining the reversal distance of a permutation. Kececioglu and Sankoff [5, 6] and Bafna and Pevzner <ref> [1] </ref> introduce the notion of break-points in a permutation and devise approximation algorithms for sorting by reversals based on breakpoints. Bafna and Pevzner, in addition, identify upper and lower bounds for the reversal distance of a permutation. <p> Let P [] be a node and let P [] be a node with P []:dist = k and = for some reversal . Then, P []:dist is set to k + 1 and P []:link is set to . Bafna and Pevzner <ref> [1] </ref> have shown that the reversal distance of a permutation of size n is at most n 1. This means the program needs to iterate from k = 0 up to k = n 2. <p> Clearly, when is sorted, the number of breakpoints in is 0 so that a goal when sorting is to decrease the number of breakpoints in a permutation. Kececioglu and Sankoff [5, 6] and Bafna and Pevzner <ref> [1] </ref> study breakpoints and discuss an approximation algorithm that greedily selects a reversal that causes the maximum net decrease in number of breakpoints. We use our program to determine when the heuristic fails.
Reference: [3] <author> S. Guyer, L. S. Heath, and J. P. C. Vergara, </author> <title> Subsequence and run heuristics for the sorting by transpositions problem. Accepted to the Fourth DIMACS International Algorithm Implementation Challenge, </title> <note> 1995. 10 HEATH AND VERGARA </note>
Reference-contexts: Bafna and Pevzner provide a metric on a permutation that uses a graph representation and derive upper and lower bounds and approximation algorithms for this problem. Guyer, Heath and Vergara <ref> [3] </ref> employ some heuristics based on subsequences and devise corresponding algorithms for the problem. They observe that selecting transpositions that maximally lengthen the longest increasing subsequence in the permutation appear to produce near-optimal results.
Reference: [4] <author> S. Hannenhalli and P. Pevzner, </author> <title> Transforming cabbage into turnip (polynomial algorithm for sorting signed permutations by reversals), </title> <booktitle> in Twenty-Seventh Annual ACM Symposium on the Theory of Computing, </booktitle> <year> 1995, </year> <pages> pp. 178-189. </pages>
Reference-contexts: Bafna and Pevzner, in addition, identify upper and lower bounds for the reversal distance of a permutation. It is not yet known whether sorting by reversals is NP-complete or has a polynomial time algorithm. Hannenhalli and Pevzner <ref> [4] </ref>, however, show that a variant of the problem, sorting signed permutations by reversals, is solvable in O (n 4 ) time. SOME EXPERIMENTS ON THE SORTING BY REVERSALS PROBLEM 3 This paper reports on some of our ongoing research into sorting problems in computational biology.
Reference: [5] <author> J. Kececioglu and D. Sankoff, </author> <title> Exact and approximation algorithms for the inversion distance between two chromosomes, </title> <booktitle> in Fourth Annual Symposium on Combinatorial Pattern Matching, Lecture Notes in Computer Science, </booktitle> <volume> vol. 684, </volume> <year> 1993, </year> <pages> pp. </pages> <month> 87-105. </month> <title> [6] , Efficient bounds for oriented chromosome inversion distance, </title> <booktitle> in Fifth Annual Symposium on Combinatorial Pattern Matching, Lecture Notes in Computer Science, </booktitle> <year> 1994, </year> <pages> pp. 307-325. </pages>
Reference-contexts: The reversal distance of a permutation is the minimum number of reversals whose product is , equivalently, the minimum number of reversals required to sort . In this paper, we investigate sorting by reversals, the problem of determining the reversal distance of a permutation. Kececioglu and Sankoff <ref> [5, 6] </ref> and Bafna and Pevzner [1] introduce the notion of break-points in a permutation and devise approximation algorithms for sorting by reversals based on breakpoints. Bafna and Pevzner, in addition, identify upper and lower bounds for the reversal distance of a permutation. <p> A breakpoint exists before 1 if 1 6= 1; likewise, a breakpoint exists after n if n 6= n. Clearly, when is sorted, the number of breakpoints in is 0 so that a goal when sorting is to decrease the number of breakpoints in a permutation. Kececioglu and Sankoff <ref> [5, 6] </ref> and Bafna and Pevzner [1] study breakpoints and discuss an approximation algorithm that greedily selects a reversal that causes the maximum net decrease in number of breakpoints. We use our program to determine when the heuristic fails.
Reference: [7] <author> R. Lowrance and R. A. Wagner, </author> <title> An extension of the string-to-string correction problem, </title> <journal> Journal of the ACM, </journal> <volume> 22 (1975), </volume> <pages> pp. 177-183. </pages>
Reference-contexts: These results often involve restricting the operations on a genome to a subset of the operations identified above. Wagner [8] and Lowrance and Wagner <ref> [7] </ref> investigate string-to-string correction, a similar problem on strings involving edit operations such as insertion, deletion, and adjacent swaps of single symbols in the string. They show that the problem is NP-complete in general but solvable in polynomial time when only certain operations are allowed.
Reference: [8] <author> R. A. Wagner, </author> <title> On the complexity of the extended string-to-string correction problem, </title> <booktitle> in Proceedings of the 7th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1975, </year> <pages> pp. 218-222. </pages>
Reference-contexts: These results often involve restricting the operations on a genome to a subset of the operations identified above. Wagner <ref> [8] </ref> and Lowrance and Wagner [7] investigate string-to-string correction, a similar problem on strings involving edit operations such as insertion, deletion, and adjacent swaps of single symbols in the string. They show that the problem is NP-complete in general but solvable in polynomial time when only certain operations are allowed.
References-found: 6

