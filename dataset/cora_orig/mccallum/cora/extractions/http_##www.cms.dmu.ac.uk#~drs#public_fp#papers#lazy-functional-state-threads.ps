URL: http://www.cms.dmu.ac.uk/~drs/public_fp/papers/lazy-functional-state-threads.ps
Refering-URL: http://www.cms.dmu.ac.uk/~drs/public_fp/papers/
Root-URL: 
Email: Email: -simonpj,jl-@dcs.glasgow.ac.uk.  
Phone: Phone: +44-41-330-4500  
Title: Lazy Functional State Threads  
Author: John Launchbury and Simon L Peyton Jones 
Date: November 8, 1993  
Address: Glasgow  
Affiliation: University of  
Abstract: Some algorithms make critical internal use of updatable state, even though their external specification is purely functional. Based on earlier work on monads, we present a way of securely encapsulating such stateful computations, in the context of a non-strict, purely-functional language. There are two main new developments in this paper. First, we show how to use the type system to securely encapsulate stateful computations, including ones which manipulate multiple, named, mutable objects. Second, we give a formal semantics for our system. This paper has been submitted to Programming Languages Design and Implementation (PLDI) '94. 
Abstract-found: 1
Intro-found: 1
Reference: <author> M Odersky, D Rabin & P Hudak [Jan 1993], </author> <title> "Call by name, assignment, and the lambda calculus," </title> <booktitle> in 20th ACM Symposium on Principles of Programming Languages, </booktitle> <address> Charleston, </address> <publisher> ACM, </publisher> <month> 43-56. </month> <title> LC Paulson [1991], ML for the working programmer, </title> <publisher> Cambridge University Press. </publisher>
Reference: <author> SL Peyton Jones & J Launchbury [Sept 1991], </author> <title> "Unboxed values as first class citizens," </title> <booktitle> in Functional Programming Languages and Computer Architecture, </booktitle> <address> Boston, </address> <publisher> Hughes, ed., LNCS 523, Springer Verlag, </publisher> <pages> 636-666. </pages>
Reference: <editor> SL Peyton Jones & PL Wadler [Jan 1993], </editor> <title> "Imperative functional programming," </title> <booktitle> in 20th ACM Symposium on Principles of Programming Languages, </booktitle> <address> Charleston, </address> <publisher> ACM, </publisher> <month> 71-84. </month> <title> CG Ponder, PC McGeer & A P-C Ng [June 1988], "Are applicative languages inefficient?," </title> <journal> SIG-PLAN Notices 23, </journal> <month> 135-139. </month> <title> DA Schmidt [Apr 1985], "Detecting global variables in de-notational specifications," </title> <journal> TOPLAS 7, </journal> <pages> 299-310. </pages> <booktitle> 15 V Swarup, US Reddy & E Ireland [Sept 1991], "Assign--ments for applicative languages," in Functional Programming Languages and Computer Architecture, </booktitle> <address> Boston, </address> <publisher> Hughes, ed., LNCS 523, Springer Verlag, </publisher> <month> 192-214. </month> <title> M Tofte [Nov 1990], "Type inference for polymorphic references," </title> <booktitle> Information and Computation 89. </booktitle>
References-found: 3

