URL: http://www.cs.colorado.edu/~carlosm/SpreadsheetReport.ps.gz
Refering-URL: http://www.cs.colorado.edu/~carlosm/mypapers.html
Root-URL: http://www.cs.colorado.edu
Email: fskip,carlosmg@cs.colorado.edu  
Title: Collaboration with Spreadsheets  
Author: Skip Ellis Carlos Maltzahn 
Keyword: Group Spreadsheets, Architecture, Collaboration Patterns, Design  
Address: Boulder Campus Box 430 Boulder, Colorado 80309-0430 USA  
Affiliation: Department of Computer Science University of Colorado at  
Abstract: This paper presents a number of design concepts and ideas for a group spreadsheet. Unlike single user spreadsheets, these group spreadsheets should have specific features to enhance group communication, and to maintain a shared context. Rather than presenting a single design, we discuss alternatives and generalizable issues because the specific design can be very dependent upon the environment. The paper covers both low level architectural issues and high level collaboration issues. We will account for the fact that spreadsheets are used in collaborative environments and we will investigate how spreadsheets can be further integrated into such environments. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C.H.Lewis and G.Olson. </author> <title> Can psychology lower the barriers to programming? In Second Workshop on Empirical Studies of Programmers, </title> <address> Nor-wood, N.J., 1987. </address> <publisher> Ablex. </publisher>
Reference-contexts: If the end user would change one of the values this change would be automatically propagated such that the value in C4 would change accordingly. As discussed in <ref> [1] </ref> spreadsheets have the following advantages: automatic propagation of change; the user does not have to deal with flow control, parameter passing, and recursion; and there is no seam between programming worksheets and their execution.
Reference: [2] <author> J. Conklin and M. Begeman. gIBIS: </author> <title> A to9ol for exploratory policy discussion. </title> <booktitle> In CSCW'88, </booktitle> <pages> pages 140-152, </pages> <address> Portland, Oregon, </address> <month> September </month> <year> 1988. </year>
Reference-contexts: Design rationales should be formally connected with the design artifacts, i.e. cells and regions of particular worksheets. They also should offer a semantic structure such that related design issues are also formally related (see for instance <ref> [2] </ref>). Heuristics: Studies in [6] show that recording of design rationales is not enough. Some mechanisms are needed to deliver the right part of a design rationale to the developer at the right time. This in turn motivates the developer to maintain design rationales.
Reference: [3] <author> P. Dewan and R. Choudhary. </author> <title> Primitives for programming multi-user interfaces. </title> <booktitle> In UIST'91, </booktitle> <pages> pages 41-48. </pages> <publisher> ACM, </publisher> <year> 1991. </year>
Reference-contexts: An example for such an approach is the X Window system that keeps most of the screen management local. The user interface component implements presentation and user input functions (see also <ref> [3] </ref>). It receives input (e.g. keystrokes) from its local participant which it must pass to the application component. It receives data from the application component which it must present in an appropriate manner to the local participant.
Reference: [4] <author> C.A. Ellis, S.J. Gibbs, and G.L. Rein. </author> <title> Design and use of a group editor. </title> <editor> In G. Cockton, editor, </editor> <title> Engineering for Human-Computer Interaction. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: By means of orientation we think of services that make people aware of each other's activities within the shared resource. An examples for such a service are clouds <ref> [4] </ref> which indicate regions of change to all group members without making the actual result of the change visible. This enables users to selectively focus on one change at a time and to compare it with the original state.
Reference: [5] <author> C.A. Ellis, S.J. Gibbs, and G.L. Rein. Group-ware: </author> <title> Some issues and experiences. </title> <journal> Comm. ACM, </journal> <volume> 34(1) </volume> <pages> 39-58, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Even in the case where locks leave the content of cells readable locking excludes certain types of collaboration. In particular people cannot closely interact on a shared region. Being forced to pass locks back and forth artificially sequentializes the work. As reported in <ref> [5] </ref> the experience with the GROVE editor indicated that groups easily and naturally develop very sophisticated social protocols in order to coordinate their access to the shared artifact. Most importantly, people developed social protocols that would have been incompatible with locking.
Reference: [6] <author> G. Fischer, A. Lemke, T. Mastaglio, and A. Morch. </author> <title> The role of critiquing in cooperative problem solving. </title> <journal> ACM Trans. on Informational Sciences Journal, </journal> <volume> 9(2) </volume> <pages> 123-151, </pages> <year> 1991. </year>
Reference-contexts: Design rationales should be formally connected with the design artifacts, i.e. cells and regions of particular worksheets. They also should offer a semantic structure such that related design issues are also formally related (see for instance [2]). Heuristics: Studies in <ref> [6] </ref> show that recording of design rationales is not enough. Some mechanisms are needed to deliver the right part of a design rationale to the developer at the right time. This in turn motivates the developer to maintain design rationales. Critiquing systems can serve as such a form of delivery.
Reference: [7] <author> I. Greif. </author> <title> Designing group-enabled applications: A spreadsheet example. </title> <editor> In D. Coleman, editor, </editor> <booktitle> Groupware'92, </booktitle> <pages> pages 515-525. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1992. </year>
Reference-contexts: Nevertheless they should be accessible and known to the user [8]. Therefore it is interesting to look at successful single-user applications and investigate possible extensions in order to facilitate collaboration. In this paper we look at extensions, and redesigns of spreadsheets for groups (see also <ref> [7] </ref>). We will account for the fact that spreadsheets are used in collaborative environments and we will investigate how spreadsheets can be further integrated into such environments. <p> This type of architecture is easiest to upgrade from single user to multiple user. The information repository component is concerned with the storage structures and algorithms of the information objects being manipulated. This sub-system may range from an elaborate object oriented database <ref> [7] </ref> to a simple string manipulation program. The information may be standard database data (e.g. employee records,) or a set of documents, or multimedia modes of a hypermedia system, or CAD design objects. Since these structures are typically application dependent, this module is frequently directly connected to the application component.
Reference: [8] <author> J. Grudin. </author> <title> Groupware and social dynamics: Eight challenges for developers. </title> <journal> Comm. ACM, </journal> <volume> 37(1) </volume> <pages> 92-105, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Collaborative activities occur less frequently than individual activities. In fact, many organizations are designed to minimize communication requirements in order to cut coordination overhead. This suggests that groupware features should be integrated with single-user features without obstructing them. Nevertheless they should be accessible and known to the user <ref> [8] </ref>. Therefore it is interesting to look at successful single-user applications and investigate possible extensions in order to facilitate collaboration. In this paper we look at extensions, and redesigns of spreadsheets for groups (see also [7]).
Reference: [9] <author> J.C. Lauwers, T.A. Joseph, K.A. Lantz, and A.L. Romanow. </author> <title> Replicated architectures for shared window systems: A critique. </title> <booktitle> In Conference on Office Information Systems, </booktitle> <pages> pages 249-260, </pages> <address> Cam-bridge, MA, </address> <month> April </month> <year> 1990. </year> <note> ACM. </note>
Reference-contexts: In order to get fast response the communication overhead that is required to change a shared state has to be minimized. This is achieved by replicating an application for every user. However, it is much harder to maintain real-time consistency in replicated architectures than it is in non-replicated <ref> [9] </ref>. In the latter case all changes of a shared state are propagated through a central server which, however, becomes a bottleneck in communication, thus slowing down response.
Reference: [10] <author> B. A. Myers. </author> <title> Graphical techniques in a spreadsheet for specifying user interfaces. </title> <booktitle> In CHI'91, </booktitle> <pages> pages 243-249, </pages> <address> New Orleans, Louisiana, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: We choose spreadsheets not only because of their success but also because they have proven to be a powerful and robust metaphor which is used in such different domains as logic programming [14], spreadsheets on Smalltalk objects [12], interactive graphics [15], and constraint maintenance for user interface specifications <ref> [10] </ref>. Thus exploring groupware extensions to spreadsheets might be fruitful to many application areas. In this paper we will give a framework for classifying group spreadsheet architectures, extensions, and features. Section 2 gives a brief explanation and motivation for spreadsheets.
Reference: [11] <author> B. Nardi. </author> <title> A Small Matter of Programming. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1993. </year>
Reference-contexts: Selection of appropriate architectural elements for a particular purpose and environment is highly dependent upon the system users and the roles they play. This is discussed in the next section. 4 Forms of collaboration with spread sheets In <ref> [11] </ref> Bonnie Nardi describes two studies of the usage of single-user applications, namely spreadsheets and X Windows. Both studies indicated that people collaborate in order to master these applications. <p> This classification of extensions is motivated by results of empirical studies reported in <ref> [11] </ref> which identified the roles of end users, local developers, and programmers. Furthermore it pointed out the importance of local developers which serve as translators of domain specific problems of end users into problems of worksheet design and specifications for formulas and macros which are meaningful to programmers.
Reference: [12] <author> K.W. Piersol. </author> <title> Object oriented spreadsheets: The analytic spreadsheet package. </title> <booktitle> In OOPSLA'86, </booktitle> <pages> page 385, </pages> <address> New York, 1986. </address> <publisher> ACM. </publisher>
Reference-contexts: We choose spreadsheets not only because of their success but also because they have proven to be a powerful and robust metaphor which is used in such different domains as logic programming [14], spreadsheets on Smalltalk objects <ref> [12] </ref>, interactive graphics [15], and constraint maintenance for user interface specifications [10]. Thus exploring groupware extensions to spreadsheets might be fruitful to many application areas. In this paper we will give a framework for classifying group spreadsheet architectures, extensions, and features.
Reference: [13] <author> M. Robinson. </author> <title> Design for unanticipated use.... </title> <booktitle> In ECSCW'93, </booktitle> <pages> pages 187-202, </pages> <address> Milan, Italy, </address> <month> Septem-ber </month> <year> 1993. </year>
Reference-contexts: Such white boards are an example of support of a "double level language", one level being the implicit communication through artifacts, and the other level being the explicit communication through speech and ad hoc notes <ref> [13] </ref>. It is assumed that any collective activity requires effective communication at both levels. 4.1.4 Locking vs. Orientation Traditionally access to any shared resource is coordinated via exclusive locking. In spreadsheet documents locks are usually placed on regions.
Reference: [14] <author> M.H. van Emden, M. Ohki, and A. Takeuchi. </author> <title> Spreadsheets with incremental queries as a user interface for logic programming. New Generation Computing, </title> <address> 4:287, </address> <year> 1986. </year>
Reference-contexts: We choose spreadsheets not only because of their success but also because they have proven to be a powerful and robust metaphor which is used in such different domains as logic programming <ref> [14] </ref>, spreadsheets on Smalltalk objects [12], interactive graphics [15], and constraint maintenance for user interface specifications [10]. Thus exploring groupware extensions to spreadsheets might be fruitful to many application areas. In this paper we will give a framework for classifying group spreadsheet architectures, extensions, and features.
Reference: [15] <author> N. Wilde and C. Lewis. </author> <title> Spreadsheet-based interactive graphics: from prototype to tool. </title> <booktitle> In CHI'90, </booktitle> <pages> pages 153-159, </pages> <address> Seattle, WA, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: We choose spreadsheets not only because of their success but also because they have proven to be a powerful and robust metaphor which is used in such different domains as logic programming [14], spreadsheets on Smalltalk objects [12], interactive graphics <ref> [15] </ref>, and constraint maintenance for user interface specifications [10]. Thus exploring groupware extensions to spreadsheets might be fruitful to many application areas. In this paper we will give a framework for classifying group spreadsheet architectures, extensions, and features. Section 2 gives a brief explanation and motivation for spreadsheets.
References-found: 15

