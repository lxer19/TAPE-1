URL: http://www.cs.indiana.edu/hyplan/napi/hcc-ppc.ps
Refering-URL: http://www.cs.indiana.edu/hyplan/napi.html
Root-URL: http://www.cs.indiana.edu
Email: napi@ms.mimos.my  
Title: hcc A Portable ANSI C Compiler (with a Code Generator for the PowerPCs)  
Author: Mohd Hanafiah Abdullah 
Address: 7th Floor, Exchange Square Damansara Heights 50490 Kuala Lumpur MALAYSIA  
Affiliation: Malaysian Institute of Microelectronic Systems (MIMOS)  
Abstract: hcc is a portable optimizing compiler for ANSI C [8] [9] with code generators for the PowerPC and the MIMOS's RISC CPU. The PowerPC is a RISC processor developed jointly by IBM, Motorola, and Apple Computer among others in 1993, while the MIMOS's RISC CPU is an experimental 32-bit RISC processor. At the moment the compiler can be used to program PowerPC based computers including the PowerMacintoshes and the IBM RS6000 PowerPC based workstations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alfred V. Aho, Ravi Sethi, and Jeffrey D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1986. </year>
Reference-contexts: The symbol-table is built by means of a hash function taken from the Dragon book <ref> [1] </ref> called hashpjw. The top-down predictive parser is built using an LL (k) grammar for ANSI C, where 1 k 2: The grammar is rewritten by the author since no LL (k) ANSI C grammar is available in the public domain at the inception of the project.
Reference: [2] <author> Fred C. Chow and John L. Hennessy. </author> <title> The priority-based coloring approach to register allocation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <pages> pages 501-536, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Adding to that, the order in which the phases are carried out has a considerable impact on the code improvement outcome. The register allocation algorithm is based on Chow and Hennessy's <ref> [2] </ref> Priority Based Graph Coloring scheme. It uses heuristics to sidestep the NP-complete convergence problem of graph coloring, and it also does not spill registers. This approach also tries very hard not to over-allocate registers.
Reference: [3] <author> Frederick C. Chow. </author> <title> A portable machine-independent global optimizer design and measurements. </title> <type> Technical Report Ph.D. Dissertation, </type> <institution> Stanford University, Stanford, California, </institution> <year> 1983. </year>
Reference: [4] <author> Apple Computer. </author> <title> Inside Macintosh: Memory. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1992. </year>
Reference-contexts: lines) * Generate Code for the PowerPC 601 Processor * Register Usage and Selection Optimization * Local Strength Reduction * Use of Machine Idioms 5 Code Generation Issues (PowerPC 601) After being familiarized with the PowerPC 601 [7], GNU assembler directives, PowerMacintosh's PowerPC system software [5], and Macintosh's memory model <ref> [4] </ref>, several PowerPC System Software specifications described in the manuals were decided not to be followed due largely to their enormous impact on the modifying task of the existing compiler.
Reference: [5] <author> Apple Computer. </author> <title> Inside Macintosh: PowerPC System Software. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: Method 4.4 Code Generation (9700 lines) * Generate Code for the PowerPC 601 Processor * Register Usage and Selection Optimization * Local Strength Reduction * Use of Machine Idioms 5 Code Generation Issues (PowerPC 601) After being familiarized with the PowerPC 601 [7], GNU assembler directives, PowerMacintosh's PowerPC system software <ref> [5] </ref>, and Macintosh's memory model [4], several PowerPC System Software specifications described in the manuals were decided not to be followed due largely to their enormous impact on the modifying task of the existing compiler.
Reference: [6] <author> John L. Hennessy and David A. Patterson. </author> <title> Computer Architecture: A Quantitative Approach. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1990. </year>
Reference: [7] <author> IBM and Motorola. </author> <title> PowerPC 601 User's Manual. Motorola, </title> <publisher> Inc, </publisher> <address> Phoenix, Arizona, </address> <year> 1993. </year>
Reference-contexts: Global Register Allocation Using the Priority Based Coloring Method 4.4 Code Generation (9700 lines) * Generate Code for the PowerPC 601 Processor * Register Usage and Selection Optimization * Local Strength Reduction * Use of Machine Idioms 5 Code Generation Issues (PowerPC 601) After being familiarized with the PowerPC 601 <ref> [7] </ref>, GNU assembler directives, PowerMacintosh's PowerPC system software [5], and Macintosh's memory model [4], several PowerPC System Software specifications described in the manuals were decided not to be followed due largely to their enormous impact on the modifying task of the existing compiler.
Reference: [8] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language (Second Edition: ANSI C). </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1988. </year>
Reference: [9] <author> Herbert Schildt. </author> <title> C: The Pocket Reference (Second Edition: ANSI C). </title> <publisher> Osborne McGraw-Hill, </publisher> <address> Berkeley, California, </address> <year> 1991. </year>
References-found: 9

