URL: ftp://ftp.cag.lcs.mit.edu/pub/virtual_wires/fccm94.ps.Z
Refering-URL: http://www.cag.lcs.mit.edu/vwires/papers/index.html
Root-URL: 
Title: Emulation of a Sparc Microprocessor with the MIT Virtual Wires Emulation System. DRAFT DO NOT DISTRIBUTE  
Author: Matthew Dahl, Jonathan Babb, Russell Tessier, Silvina Hanono, David Hoki, and Anant Agarwal 
Date: January 18, 1994  
Address: Cambridge, MA 02139  
Affiliation: MIT Laboratory for Computer Science  
Abstract: We describe a complete FPGA-based emulation software system using Virtual Wires technology and present the results of emulating an 18K-gate ASIC implementation of a Sparc microprocessor. Virtual wires overcomes the pincount limitation that formerly restricted the efficiency of FPGA-based logic emulators. The MIT Virtual Wires softwire compiler accepts a netlist description of the system to be emulated and produces programming information for the FPGA hardware, an inexpensive ($3000) board designed for Virtual Wires in-circuit emulation. The compiler also provides an interface to standard logic simulator tools for hardware accelerated simulation. We discuss innovative features of the compiler system and knowledge gained during its construction. A comparison is made of different implementations of the on-chip Virtual Wires circuitry synthesized by the compiler. Several enhancements to the original Virtual Wires concept are presented that will further emulation speed and FPGA utilization. Keywords: FPGA, logic emulation, prototyping, reconfigurable technologies, static routing, virtual wires. fl submitted to 1994 IEEE Workshop on FPGAs for Custom Computing Machines
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Agarwal et al. </author> <title> The MIT Alewife machine: A large-scale distributed memory multiprocessor. In Scalable Shared Memory Multiprocessors. </title> <publisher> Kluwer Academic Press, </publisher> <year> 1991. </year> *** <note> DRAFT DO NOT DISTRIBUTE *** January 18, 1994 14 </note>
Reference-contexts: speed and resource statistics for the Sparcle simulation accelerator, as well as for the systolic circuit Palindrome-128 that was used in section 3.5 for architecture comparison. 5.2 Hardware Emulation Methodology The Sparcle hardware emulator substitutes for the Sparcle CPU chip in a testbed board developed for the Alewife multiprocessor project <ref> [1] </ref>. The emulator system plugs directly into the Sparcle chip PGA socket using a commercially-built interface pod (Figure 7). The pod signals are connected to FPGA pins at the edges of the FPGA mesh interconnect of the Virtual Wires emulator board.
Reference: [2] <author> A. Agarwal, J. Kubiatowicz, D. Kranz, B.-H. Lim, D. Yeung, G. D'Souza, and M. Parkin. Sparcle: </author> <title> An Evolutionary Processor Design for Multiprocessors. </title> <journal> IEEE Micro, </journal> <volume> 13(3) </volume> <pages> 48-61, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: We have compared several possible implementations of the embedded Virtual Wires circuitry for speed and use of FPGA resources. An example application of the Virtual Wires system is described: emulation of Sparcle <ref> [2] </ref>, an 18K-gate ASIC implementation of the Sparc microprocessor with added multiprocessing support. The system has been used both for hardware-accelerated simulation and full hardware emulation of the Sparcle chip in a test bed system. <p> This capability has been instrumental in debugging the Virtual Wires embedder module and testing new embedded logic architectures. 5 Virtual Wires Emulation of the Sparcle Microprocessor We have used the Virtual Wires softwire compiler and hardware prototype to emulate several designs, including Sparcle <ref> [2] </ref>, an 18K-gate ASIC implementation of the Sparc microprocessor with enhanced multiprocessor support. We have demonstrated both hardware-accelerated simulation and full hardware emulation of the Sparcle chip in a test bed system.
Reference: [3] <author> J. Babb. </author> <title> Virtual Wires: Overcoming Pin Limitations in FPGA-based Logic Emulators. </title> <type> Master's thesis, </type> <institution> EECS Department, MIT, </institution> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: The initial stages of this process have been discussed previously <ref> [3] </ref> [4].
Reference: [4] <author> J. Babb, R. Tessier, and A. Agarwal. </author> <title> Virtual Wires: Overcoming Pin Limitations in FPGA-based Logic Emulators. </title> <booktitle> In Proceedings, IEEE Workshop on FPGA-based Custom Computing Machines, </booktitle> <pages> pages 142-151, </pages> <address> Napa, CA, </address> <month> April </month> <year> 1993. </year> <note> IEEE. Also as MIT/LCS TM-491, </note> <month> January </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Introduced at last year's IEEE FPGA Workshop, Virtual Wires <ref> [4] </ref> overcome the pincount limitation that restricts the efficiency of current FPGA-based logic emulators. Existing systems dedicate each FPGA pin to a single emulated signal, rapidly consuming pins and limiting utilization of available FPGA gates to typically 10 to 20 percent. <p> The initial stages of this process have been discussed previously [3] <ref> [4] </ref>.
Reference: [5] <author> D. Thomas and P. Moorby. </author> <title> The Verilog Hardware Description Language. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: The netlist format used is the LSI Logic Network Description Language [9]. The netlist primitives currently used are the LSI Logic LCA100K gate array technology [11]. Other system description formats (e.g. Verilog <ref> [5] </ref> or other hardware description languages) can be converted to LSI format by logic synthesis or simple format translation.
Reference: [6] <author> S. Hanono. </author> <title> LSI and Verilog Serial Interface to FPGA Board. Alewife Systems Memo 39, </title> <institution> MIT Computer Architecture Group, </institution> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: Correct operation has been verified by executing multiprocessor system diagnostics. 5.1 Simulation Accelerator Support We have implemented an interface between the Virtual Wires emulator hardware and popular logic simulators (Verilog, LSI Logic) to support hardware-accelerated simulation <ref> [6] </ref> [14]. A serial link *** DRAFT DO NOT DISTRIBUTE *** January 18, 1994 11 Statistic Palindrome Sparcle LSI Gate Count 14,241 17,252 Element Count 4,623 4,802 Element Complexity 3.1 3.6 Memory Bit Count 0 4,352 Net Count 4,626 5,094 Pins per Net 2.900 3.484 FPGAs 16 20 Avg.
Reference: [7] <author> S. Hauck, G. Boriello, and C. Ebeling. </author> <title> Mesh Routing Topologies For FPGA Arrays (advance copy). </title> <booktitle> In Advance Proceedings, IEEE Workshop on FPGA-based Custom Computing Machines. IEEE, </booktitle> <year> 1994. </year>
Reference-contexts: Low-level assignment of specific FPGA physical pins is made at this time. To reduce the use of on-chip routing resources for Virtual Wires signals being routed across multiple FPGAs, a pin permutation algorithm <ref> [7] </ref> [14] is used. Groups of four adjacent FPGA pins are connected to each of the FPGA's north, south, east, and west neighbors. Thus a multi-chip path proceeding in any direction can be created by making local connections within each pin grouping.
Reference: [8] <author> InCA Inc. </author> <title> Concept Silicon Reference Manual, </title> <month> Nov. </month> <year> 1992. </year> <note> Version 1.1. </note>
Reference-contexts: The InCA Concept Silicon partitioner <ref> [8] </ref> is currently used; it employs clustering and mincut methods *** DRAFT DO NOT DISTRIBUTE *** January 18, 1994 10 to reduce connections between partitions while maintaining acceptable gate counts.
Reference: [9] <institution> LSI Logic Corporation, 1551 McCarthy Blvd., Milpitas, California, </institution> <month> 95035. </month> <title> Network Description Language Reference, </title> <month> Sept. </month> <year> 1988. </year>
Reference-contexts: The netlist format used is the LSI Logic Network Description Language <ref> [9] </ref>. The netlist primitives currently used are the LSI Logic LCA100K gate array technology [11]. Other system description formats (e.g. Verilog [5] or other hardware description languages) can be converted to LSI format by logic synthesis or simple format translation.
Reference: [10] <institution> LSI Logic Corporation, 1551 McCarthy Blvd., Milpitas, California, </institution> <month> 95035. </month> <title> User's Guide for The Multi-Chip Logic Simulation Programs, </title> <address> Oct. </address> <year> 1989. </year>
Reference-contexts: To increase simulation speed, the emulator module also provides an Sbus parallel interface to the host. We are currently developing software support for the Sbus interface. The Sparcle hardware simulation accelerator is driven by a behavioral model test shell running in the LSI Logic MBSIM simulator <ref> [10] </ref> via the simulation interface. The test shell includes a memory system and program loader so that standard Sparcle diagnostics can be executed on the accelerator.
Reference: [11] <institution> LSI Logic Corporation, 1551 McCarthy Blvd., Milpitas, California, 95035. LCA100K Products Databook, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: The netlist format used is the LSI Logic Network Description Language [9]. The netlist primitives currently used are the LSI Logic LCA100K gate array technology <ref> [11] </ref>. Other system description formats (e.g. Verilog [5] or other hardware description languages) can be converted to LSI format by logic synthesis or simple format translation.
Reference: [12] <author> Synopsys, Inc. </author> <title> Command Reference Manual, </title> <note> Version 3.0, </note> <month> dec </month> <year> 1992. </year>
Reference: [13] <author> Synopsys, Inc. </author> <title> 4000 Series (Xilinx) Interface Using FPGA Compiler, </title> <month> feb </month> <year> 1993. </year>
Reference-contexts: Logic minimization can also be done during the technology mapping process to further increase the packing density of emulated gates. Both mapping and minimization can be performed simultaneously by tools such as the Synopsys FPGA Compiler <ref> [13] </ref>. In order to develop a working system as quickly as possible, we have chosen to defer technology mapping until after partitioning and the embedding of Virtual Wires communication logic.
Reference: [14] <author> R. Tessier, J. Babb, M. Dahl, S. Hanono, and A. Agarwal. </author> <title> The Virtual Wires Emulation System: A Gate-Efficient ASIC Prototyping Environment. </title> <booktitle> In Submitted to 1994 ACM International Workshop on Field-Programmable Gate Arrays, </booktitle> <address> Berkeley, CA, </address> <month> February </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: The core of the softwire compiler, referred to as the Wire Virtualizer, produces a pipelined, statically-routed communication network to connect the partitions. Technology-mapping and FPGA place-and-route software reduce the networked partitions to FPGA programming data. The compiler has been used to configure a Virtual Wires emulation circuit board <ref> [14] </ref> for use as an in-circuit hardware emulator and as a hardware accelerator of software logic simulation. The board uses low-cost, low-pinout FPGAs and a simple mesh interconnect topology. <p> Low-level assignment of specific FPGA physical pins is made at this time. To reduce the use of on-chip routing resources for Virtual Wires signals being routed across multiple FPGAs, a pin permutation algorithm [7] <ref> [14] </ref> is used. Groups of four adjacent FPGA pins are connected to each of the FPGA's north, south, east, and west neighbors. Thus a multi-chip path proceeding in any direction can be created by making local connections within each pin grouping. <p> Correct operation has been verified by executing multiprocessor system diagnostics. 5.1 Simulation Accelerator Support We have implemented an interface between the Virtual Wires emulator hardware and popular logic simulators (Verilog, LSI Logic) to support hardware-accelerated simulation [6] <ref> [14] </ref>. A serial link *** DRAFT DO NOT DISTRIBUTE *** January 18, 1994 11 Statistic Palindrome Sparcle LSI Gate Count 14,241 17,252 Element Count 4,623 4,802 Element Complexity 3.1 3.6 Memory Bit Count 0 4,352 Net Count 4,626 5,094 Pins per Net 2.900 3.484 FPGAs 16 20 Avg.
Reference: [15] <author> XILINX, Inc., </author> <title> 2100 Logic Drive, </title> <address> San Jose, California, </address> <booktitle> 95214. The XC4000 Data Book, </booktitle> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: While small RAM/ROM structures (typically 16-256 bits) can be constructed from the lookup tables used in some FPGA architectures <ref> [15] </ref>, large register files and caches would be extremely expensive to implement using FPGA logic. These large arrays must be identified and their organization rearranged to fit in one or more of the 64K by 4 bit SRAMs available in the hardware.
References-found: 15

