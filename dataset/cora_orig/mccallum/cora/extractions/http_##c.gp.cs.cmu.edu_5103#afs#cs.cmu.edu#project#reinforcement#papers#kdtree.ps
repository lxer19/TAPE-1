URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/project/reinforcement/papers/kdtree.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/Web/People/awm/papers.html
Root-URL: http://www.cs.cmu.edu
Email: awm@cs.cmu.edu  
Title: An intoductory tutorial on kd-trees  
Author: Andrew W. Moore 
Affiliation: Carnegie Mellon University  
Abstract: Extract from Andrew Moore's PhD Thesis: Efficient Memory-based Learning for Robot Control PhD. Thesis; Technical Report No. 209, Computer Laboratory, University of Cambridge. 1991. 
Abstract-found: 1
Intro-found: 1
Reference: [ Bentley, 1980 ] <author> J. L. Bentley. </author> <title> Multidimensional Divide and Conquer. </title> <journal> Communications of the ACM, </journal> <volume> 23(4):214|229, </volume> <year> 1980. </year>
Reference-contexts: 6.3 Introduction to kd-trees A kd-tree is a data structure for storing a finite set of points from a k-dimensional space. It was examined in detail by J. Bentley <ref> [ Bentley, 1980; Friedman et al., 1977 ] </ref> . Recently, S. Omohundro has recommended it in a survey of possible techniques to increase the speed of neural network learning [ Omohundro, 1987 ] . A kd-tree is a binary tree. The contents of each node are depicted in Table 6.2.
Reference: [ Friedman et al., 1977 ] <author> J. H. Friedman, J. L. Bentley, and R. A. Finkel. </author> <title> An Algorithm for Finding Best Matches in Logarithmic Expected Time. </title> <journal> ACM Trans. on Mathematical Software, </journal> <volume> 3(3) </volume> <pages> 209-226, </pages> <month> September </month> <year> 1977. </year>
Reference-contexts: 6.3 Introduction to kd-trees A kd-tree is a data structure for storing a finite set of points from a k-dimensional space. It was examined in detail by J. Bentley <ref> [ Bentley, 1980; Friedman et al., 1977 ] </ref> . Recently, S. Omohundro has recommended it in a survey of possible techniques to increase the speed of neural network learning [ Omohundro, 1987 ] . A kd-tree is a binary tree. The contents of each node are depicted in Table 6.2. <p> Calculation of the expected number of inspections is difficult, because the analysis depends critically on the expected distribution of the points in the kd-tree, and the expected distribution of the target points presented to the nearest neighbour algorithm. The analysis is performed in <ref> [ Friedman et al., 1977 ] </ref> . This paper considers the expected number of hyperrectangles corresponding to leaf nodes which will provably need to be searched. Such hyperrectangles intersect the volume enclosed by a hypersphere centered on the query point whose surface passes through the nearest neighbour.
Reference: [ Omohundro, 1987 ] <author> S. M. Omohundro. </author> <title> Efficient Algorithms with Neural Network Behaviour. </title> <journal> Journal of Complex Systems, </journal> <volume> 1(2) </volume> <pages> 273-347, </pages> <year> 1987. </year>
Reference-contexts: It was examined in detail by J. Bentley [ Bentley, 1980; Friedman et al., 1977 ] . Recently, S. Omohundro has recommended it in a survey of possible techniques to increase the speed of neural network learning <ref> [ Omohundro, 1987 ] </ref> . A kd-tree is a binary tree. The contents of each node are depicted in Table 6.2. <p> Figure 6.13 illustrates a kd-tree representing the same set of points, but which promotes squareness at the expense of some balance. One pivoting strategy which would lead to a perfectly balanced tree, and which is suggested in <ref> [ Omohundro, 1987 ] </ref> , is to pick the splitting dimension as that with maximum variance, and let the pivot be the point with the median split component.
Reference: [ Preparata and Shamos, 1985 ] <author> F. P. Preparata and M. Shamos. </author> <title> Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year> <month> Bib-1 </month>
Reference-contexts: The modifications are that (i) the initial distance is not reduced as closer points are discovered and (ii) all discovered points within the distance are returned, not just the nearest. The complexity of this operation is shown, in <ref> [ Preparata and Shamos, 1985 ] </ref> , to still be logarithmic in N (the size of E) for a fixed range size. 6.7.2 Choosing a Pivot from an Exemplar Set The tree building algorithm of Section 6.3 requires that a pivot and a splitting plane be selected from which to build
References-found: 4

