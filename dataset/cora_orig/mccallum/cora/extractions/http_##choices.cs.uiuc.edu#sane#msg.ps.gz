URL: http://choices.cs.uiuc.edu/sane/msg.ps.gz
Refering-URL: http://choices.cs.uiuc.edu/sane/home.html
Root-URL: http://www.cs.uiuc.edu
Email: email: fsane,royg@cs.uiuc.edu  
Title: on Design Patterns for Concurrent, Parallel and Distributed Object-Oriented Systems) Composite Messages: A Structural Pattern
Author: Aamod Sane and Roy Campbell 
Date: November 20, 1995  
Web: www: http://choices.cs.uiuc.edu/sane/home.html  
Address: 1304 W. Springfield Avenue, Urbana, IL 61801  
Affiliation: University of Illinois at Urbana-Champaign Department of Computer Science  
Note: (Submitted to the OOPSLA Workshop  
Abstract: Complex software systems are composed of interacting components. These components collaborate to implement abstractions, such as "packets" in a networking system or "virtual memory page" in a virtual memory system. This pattern focuses on organizing the communication infrastructure used by the components, so that communicating components can be added or removed with minimal changes. At the same time, the communication overhead is minimized. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Kent Beck. </author> <title> Parameter object. </title> <address> patterns@cs.uiuc.edu, </address> <year> 1995. </year>
Reference-contexts: The discovery that these two inter-component communication shared many features led to the present pattern. The notion of a communication interface between networking layers and the packet management was pioneered in the X-Kernel [4] networking system. The pattern ParameterObject was presented on the patterns mailing list by Kent Beck <ref> [1] </ref>. 10 Variations A prominent variation of this pattern is the Active Message. * Active Message: An active message is a message that knows how to process itself.
Reference: [2] <author> Roy H. Campbell, Vincent Russo, and Gary Johnston. </author> <title> Choices: The Design of a Multiprocessor Operating System. </title> <booktitle> In Proceedings of the USENIX C++ Workshop, </booktitle> <pages> pages 109-123, </pages> <address> Santa Fe, New Mexico, </address> <month> Novem-ber </month> <year> 1987. </year>
Reference-contexts: Now consider a different example of communication between system components. The virtual memory system of a modern operating system such as Choices <ref> [2] </ref> or Mach [6] consists of several interacting components. Consider the interactions for supporting memory-mapped files [5]: in Choices, if there is a page-fault on a memory-mapped file, the AddressSpace communicates with PageCaches and 1 Files to locate the page-frame, physical page, disk block, and finally retrieve the page contents.
Reference: [3] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Object-Oriented Software Architecture. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: The message is defined as a Composite <ref> [3] </ref> of DataSets. Also, the components (i.e., layers) also defines methods that support queries for header sizes (headerSize) and for contacting neighboring components (pushPacket and popPacket). <p> An alternative uses reference counting, or relies on garbage collection (either from the implementation language or specific to Parame-terObjects). Further, the originator must know the class of the ParameterObject to be created. Thus, we use Factory Method <ref> [3] </ref> to create the object. A highly efficient variation for allocation and deallocation uses the runtime stack to allocate the object and to have it automatically deallocated. <p> Indeed, even code can be included among the payload, pro vided proper precautions are followed. 11 Related patterns Composite Messages used in this pattern for loosely coupled systems are an example of the Composite pattern <ref> [3] </ref>. Factory Method Factory Methods [3]may be used to created different class of Message objects or ParameterObjects, especially when new ones are derived from existing objects. 12 Acknowledgments We would like to thank Ashish Singhai for comments on this paper.
Reference: [4] <author> Norman C. Hutchinson and Larry L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: The discovery that these two inter-component communication shared many features led to the present pattern. The notion of a communication interface between networking layers and the packet management was pioneered in the X-Kernel <ref> [4] </ref> networking system. The pattern ParameterObject was presented on the patterns mailing list by Kent Beck [1]. 10 Variations A prominent variation of this pattern is the Active Message. * Active Message: An active message is a message that knows how to process itself.
Reference: [5] <author> Samuel J. Le*er, Marshall Kirk McKusick, Michael J. Karels, and John S. Quarterman. </author> <title> The Design and Implementation of the 4.3BSD UNIX operating system. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1989. </year>
Reference-contexts: Now consider a different example of communication between system components. The virtual memory system of a modern operating system such as Choices [2] or Mach [6] consists of several interacting components. Consider the interactions for supporting memory-mapped files <ref> [5] </ref>: in Choices, if there is a page-fault on a memory-mapped file, the AddressSpace communicates with PageCaches and 1 Files to locate the page-frame, physical page, disk block, and finally retrieve the page contents.
Reference: [6] <author> Richard Rashid, Robert Baron, Alessandro Forin, David Golub, Michael Jones, Daniel Julin, Douglas Orr, and Richard Sanzi. </author> <title> Mach: A foundation for open systems. </title> <booktitle> In Proceedings of the Second Workshop on Workstation Operating Systems, </booktitle> <month> September </month> <year> 1989. </year>
Reference-contexts: Now consider a different example of communication between system components. The virtual memory system of a modern operating system such as Choices [2] or Mach <ref> [6] </ref> consists of several interacting components. Consider the interactions for supporting memory-mapped files [5]: in Choices, if there is a page-fault on a memory-mapped file, the AddressSpace communicates with PageCaches and 1 Files to locate the page-frame, physical page, disk block, and finally retrieve the page contents.
Reference: [7] <author> Aamod Sane, Ken MacGregor, and Roy Campbell. </author> <title> Distributed virtual memory consistency protocols: Design and performance. </title> <booktitle> In Second IEEE workshop on Experimental Distributed Systems, </booktitle> <year> 1990. </year>
Reference-contexts: Yet another example of interacting components involves a distributed virtual memory <ref> [7] </ref> system, in which the communique assembled by the virtual memory system components have to be transmitted across a network. Thus the need for fragmentation and reassembly appears together with the need to encapsulate parameters. <p> The auxiliary header is similar to the DataSet header, and is only necessary if payload is split across several fragments. Thus, we need an auxiliary header only in the second frame of the message shown below. 8 Sample Code and Usage The Distributed Virtual Memory system <ref> [7] </ref> in the Choices operating system implements shared memory over networked computers. Local memories of each networked computer are treated as a cache of the global memory, and the caches are kept consistent by ensuring that only one computer writers any page at a time. <p> parts of itself. class Fragmentation - public: // Calculate proper fragments and ask // message to marshal parts of itself // into the buffer void makeFrags (DVMMessage * m, unsigned * buffer, unsigned * bufferSize); -; 9 Known uses In the development of the Choices Distributed Virtual Memory (DVM) system <ref> [7] </ref>, a separate network stack was built to capitalize on the knowledge in the system about potential senders and receivers, make use of the raw network, employ early demultiplexing and so on.
Reference: [8] <author> Andrew S. Tanenbaum. </author> <title> Computer Networks. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1988. </year> <month> 8 </month>
Reference-contexts: Instead, we should design a simple recipe to be followed by each layer, resolving the following forces: * Memory management should be efficient. * Packet layout must be immune to addition and removal of layers. Furthermore, packets have to be marshalled or fragmented <ref> [8] </ref> for communication across the network. <p> For example, in the networking system, the packet object (constructed by the layers in collaboration) defines methods for adding and removing headers and payload, querying packet size, and so on. 1 The original motivation behind layered decomposition <ref> [8] </ref> is to decouple the functionality of each layer from the others. Thus, for example, each layer can add its own headers to an outgoing packet without worrying much about other layers.
References-found: 8

