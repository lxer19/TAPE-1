URL: ftp://ftp.gmd.de/GMD/ai-research/Publications/Fabel/Fabel-37-priorities.ps.gz
Refering-URL: http://nathan.gmd.de/projects/fabel/fabel-pub.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: AAA  Dynamic priorities as a basis for control in non-sequential systems  
Author: F AAA AAA AAAA AAAA AAAA AAAA B AAA AAA L E F AB EL Friedrich Gebhardt 
Date: 99  
Note: Reihe FABEL-Report Status: intern Dokumentbezeichner: Org/Reports/nr-99 Erstellt am: 15.8.1995 Korrigiert am: 29.02.2000 ISSN 0942-413X c 1995 GMD  
Address: Sankt Augustin  
Affiliation: Druck: GMD Forschungszentrum Informationstechnik GmbH,  GMD Forschungszentrum Informationstechnik GmbH  
Pubnum: FABEL-Report No.  
Abstract-found: 0
Intro-found: 1
Reference: [ Baumgarten, 1990 ] <author> B. Baumgarten. Petri-Netze. BI-Wissenschaftsverlag, Mannheim, </author> <year> 1990. </year>
Reference-contexts: or Petri system) is informally also called a Petri net for short; the context must clarify what is meant. 3 4 2.2 PLACE-TRANSITION SYSTEMS This is not the place to give an overview over Petri net theory; the reader is referred to any one of the text books such as <ref> [ Reisig, 1984; Baumgarten, 1990; Peterson, 1981 ] </ref> . We will introduce some Petri net types as needed. In graphical representations, circles (or ellipses) are used for places and rectangles for transitions. A double arrow is an abbreviation for two single arrows, i. e. a non-consumed input. <p> Of course, the priority relation must be transitive and asymmetric. Our two simple problems can easily be solved using priorities. The flrst one is shown in P/T systems with priorities again have the computing complexity of Turing machines <ref> [ Baumgarten, 1990 ] </ref> . Fabel-Report No. 99 7 T1 pri (T1) &gt; pri (T2) one of the input places of T1 is empty.
Reference: [ Fensel and van Harmelen, 1994 ] <author> D. Fensel and F. van Harmelen. </author> <title> A comparison of languages which operationalize and formalize KADS models of expertise. </title> <journal> The Knowledge Engineering Review, </journal> <volume> 9 </volume> <pages> 105-146, </pages> <year> 1994. </year>
Reference-contexts: MoMo uses the experiences gained with two predecessor languages developed at GMD, MODEL-K [ Karbach and Vo, 1993 ] and OMOS [ Linster, 1992 ] . These three languages and flve other modelling languages based on KADS ideas have been compared in <ref> [ Fensel and van Harmelen, 1994 ] </ref> . While they difier widely in the domain knowledge representation and the language for elementary computations, they use predominantly a procedural control structure with sequence, branch and loop instructions. From the KADS model of expertise, MoMo adopts the four-layer structure.
Reference: [ Gebhardt et al., 1994 ] <author> F. Gebhardt, E. Gro, and H. Vo. </author> <title> Concurrency constraints as control speciflcations for the MoMo language. </title> <type> Fabel-Report 21, </type> <institution> GMD, Sankt Augustin, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Altogether, the additional arcs complicate the net and the arc couples hide the original input-output structure. The report <ref> [ Gebhardt et al., 1994 ] </ref> 1 uses a model for technical diagnosis containing four transitions as an example. Imposing a kind of sequential control needs ten additional transitions (and a priority rule between two of them). <p> An example is the operation of a plant during daytime, at night and at weekends. For a second technical diagnosis net in <ref> [ Gebhardt et al., 1994, Appendix B ] </ref> a range of alternate control strategies has been developped; they range from the simplest control structure that produces a correct result to a strategy where requests to the user are bundled and some optimizations are included. <p> The design rationale for the original MoMo has been explained in [ Walther et al., 1992, Section 5 ] . The principles for the functionality of the new MoMo task layer are documented and explained more extensively in <ref> [ Gebhardt et al., 1994, Chapter 3 ] </ref> . The following principles guide the development of the task language as well as some changes to the inference language. Scarcity. The task language should contain only those constructs that are absolutely necessary. As a trade-ofi, one sometimes gets somewhat complicated expressions. <p> In an environment with much concurrency such conicts can easily emerge and having the user solve all problems is not so good an idea. A proposal for such an algorithm is given in <ref> [ Gebhardt et al., 1994, Section 6.3 ] </ref> .
Reference: [ Gebhardt et al., 1995 ] <author> F. Gebhardt, E. Gro, T. Hemmann, and H. Vo. </author> <title> Knowledge Engineering mit MoMo. </title> <booktitle> KI - Kunstliche Intelligenz, </booktitle> <volume> 9(1) </volume> <pages> 22-27, </pages> <year> 1995. </year>
Reference-contexts: non-existent task variables should yield a standard default value; if an action is not available for starting a task, the entire switch command should be delayed with user notiflcation. 4.3 Additional features of MoMo 4.3.1 Subpages The MoMo Inference Net Editor MILE (developed by Eckehard Gro and briey described in <ref> [ Gebhardt et al., 1995, Section 3.2 ] </ref> ) provides for deflning subpages (subnets) and for identifying a (compound) action in the superordinate net (superpage) with an independently deflned subpage.
Reference: [ Gebhardt, 1995 ] <author> F. Gebhardt. MoMo: </author> <title> language and case studies. </title> <type> Fabel-Report 36, </type> <institution> GMD, Sankt Augustin, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Some details on the task layer, the most interesting component with regard to control speciflcation, are deferred to Section 5. The original MoMo language is documented in [ Walther et al., 1992 ] ; the changes caused by the new control philosophy are specifled in detail in <ref> [ Gebhardt, 1995 ] </ref> . 4.2.1 Domain layer The domain layer language remains as in [ Walther et al., 1992, Section 4.4 ] . It permits to deflne domain objects in an object oriented form. <p> Therefore we exhibit here large parts of the task layer language omitting some details of the syntax and simplifying the semantical description (the exact description sometimes gets rather involved to avoid discrepancies or ambiguities). A complete deflnition is given in <ref> [ Gebhardt, 1995 ] </ref> . 5.1 Meta-syntax MoMo does not distinguish between capital and lower case characters. However, the syntax deflnitions use capitalized words for non-terminal symbols and lower case words for terminals. <p> So MoMo is waiting now for another funded project that can use its modelling power and has the resources to implement it. The new task layer language as well as the necessary changes to the inference layer language and the views have been almost completely specifled and documented <ref> [ Gebhardt, 1995 ] </ref> ; the essential parts are presented in this article. The missing pieces await experiences with modelling extended examples and with implementing the language. These missing bits are mentioned in Chapters 4 and 5. <p> There seems to be a need for problems of this size in the modelling community, so perhaps they will be considered by other groups, too. They are already too big to be reproduced here; the interested reader is referred to <ref> [ Gebhardt, 1995 ] </ref> for details. Originally there was a fear that keeping track of complicated dynamic priority relations could cause problems. This was not the case.
Reference: [ Jensen, 1991 ] <author> K. Jensen. </author> <title> Coloured Petri nets: a high level language for system design and analysis. </title> <editor> In G. Rozenberg, editor, </editor> <booktitle> Advances in Petri nets 1990, </booktitle> <pages> pages 342-435. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1991. </year>
Reference-contexts: We cannot nearly indicate their theory: it fllls books ( [ Jensen, 1992 ] and [ Jensen, 1995 ] and a planned third volume); a shorter description is <ref> [ Jensen, 1991 ] </ref> . Coloured Petri nets are used as a basis for the modelling language MoMo to be considered later. <p> The subpage structure can be considered a partial implementation of net hierarchies as developed in <ref> [ Jensen, 1991 ] </ref> from where the terminology is adopted. MoMo operates on the at net, i. e. on the main inference net with all compound actions iteratively replaced by the corresponding subpages.
Reference: [ Jensen, 1992 ] <author> K. Jensen. </author> <title> Coloured Petri nets: basic concepts, analysis methods and practical use, </title> <booktitle> vol. 1. EATCS monographs on theoretical computer science. </booktitle> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: When the output of T2 contains a token, the output of T1 contains the requested minimum. 2.4 Coloured Petri nets Coloured Petri nets (CPN) are a kind of high-level Petri nets (or, more exactly, Petri net systems). We cannot nearly indicate their theory: it fllls books ( <ref> [ Jensen, 1992 ] </ref> and [ Jensen, 1995 ] and a planned third volume); a shorter description is [ Jensen, 1991 ] . Coloured Petri nets are used as a basis for the modelling language MoMo to be considered later.
Reference: [ Jensen, 1995 ] <author> K. Jensen. </author> <title> Coloured Petri nets: basic concepts, analysis methods and practical use, </title> <booktitle> vol. 2. EATCS monographs on theoretical computer science. </booktitle> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1995. </year>
Reference-contexts: We cannot nearly indicate their theory: it fllls books ( [ Jensen, 1992 ] and <ref> [ Jensen, 1995 ] </ref> and a planned third volume); a shorter description is [ Jensen, 1991 ] . Coloured Petri nets are used as a basis for the modelling language MoMo to be considered later.
Reference: [ Karbach and Vo, 1993 ] <author> W. Karbach and A. Vo. </author> <title> MODEL-K for prototyping and strategic reasoning at the knowledge level. </title> <editor> In J.-M. David, J.-P. Krivine, and R. Simmons, editors, </editor> <booktitle> Second Generation Expert Systems, </booktitle> <pages> pages 721-745. </pages> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: MoMo attempts to combine the conceptual, implementation-independent, semi-formal modelling ideas of the KADS methodology [ Schreiber et al., 1993 ] with rapid prototyping to get executable models. MoMo uses the experiences gained with two predecessor languages developed at GMD, MODEL-K <ref> [ Karbach and Vo, 1993 ] </ref> and OMOS [ Linster, 1992 ] . These three languages and flve other modelling languages based on KADS ideas have been compared in [ Fensel and van Harmelen, 1994 ] .
Reference: [ Linster, 1992 ] <author> M. Linster. </author> <title> Knowledge acquisition based on explicit methods of problem-solving. </title> <institution> Diss., Universitat Kaiserslautern, </institution> <year> 1992. </year>
Reference-contexts: MoMo attempts to combine the conceptual, implementation-independent, semi-formal modelling ideas of the KADS methodology [ Schreiber et al., 1993 ] with rapid prototyping to get executable models. MoMo uses the experiences gained with two predecessor languages developed at GMD, MODEL-K [ Karbach and Vo, 1993 ] and OMOS <ref> [ Linster, 1992 ] </ref> . These three languages and flve other modelling languages based on KADS ideas have been compared in [ Fensel and van Harmelen, 1994 ] .
Reference: [ Peterson, 1981 ] <author> J. L. Peterson. </author> <title> Petri net theory and the modeling of systems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Clifis, </address> <year> 1981. </year> <note> 36 Fabel-Report No. 99 37 </note>
Reference-contexts: or Petri system) is informally also called a Petri net for short; the context must clarify what is meant. 3 4 2.2 PLACE-TRANSITION SYSTEMS This is not the place to give an overview over Petri net theory; the reader is referred to any one of the text books such as <ref> [ Reisig, 1984; Baumgarten, 1990; Peterson, 1981 ] </ref> . We will introduce some Petri net types as needed. In graphical representations, circles (or ellipses) are used for places and rectangles for transitions. A double arrow is an abbreviation for two single arrows, i. e. a non-consumed input.
Reference: [ Reisig, 1984 ] <author> W. Reisig. </author> <title> Petri nets: an introduction. </title> <booktitle> Number 4 in EATCS monographs on theoretical computer science. </booktitle> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1984. </year>
Reference-contexts: or Petri system) is informally also called a Petri net for short; the context must clarify what is meant. 3 4 2.2 PLACE-TRANSITION SYSTEMS This is not the place to give an overview over Petri net theory; the reader is referred to any one of the text books such as <ref> [ Reisig, 1984; Baumgarten, 1990; Peterson, 1981 ] </ref> . We will introduce some Petri net types as needed. In graphical representations, circles (or ellipses) are used for places and rectangles for transitions. A double arrow is an abbreviation for two single arrows, i. e. a non-consumed input.
Reference: [ Schreiber et al., 1993 ] <author> G. Schreiber, B. Wielinga, and J. Breuker. KADS: </author> <title> A Principled Approach to Knowledge-Based System Development. </title> <publisher> Academic Press, Harcourt, </publisher> <year> 1993. </year>
Reference-contexts: Chapter 4 The modelling language MoMo 4.1 General syntactical principles The principles developed in the preceding chapter have been applied to redesign parts of the modelling language MoMo. MoMo attempts to combine the conceptual, implementation-independent, semi-formal modelling ideas of the KADS methodology <ref> [ Schreiber et al., 1993 ] </ref> with rapid prototyping to get executable models. MoMo uses the experiences gained with two predecessor languages developed at GMD, MODEL-K [ Karbach and Vo, 1993 ] and OMOS [ Linster, 1992 ] .
Reference: [ Vo et al., 1994 ] <author> A. Vo, C.-H. Coulon, W. Grather, B. Linowski, J. W. Schaaf, B. Bartsch-Sporl, K. Borner, E.-C. Tammer, H. Durschke, and M. Knaufi. </author> <title> Retrieval of similar layouts about a very hybrid approach in FABEL. </title> <editor> In J. Gero and F. Sudweeks, editors, </editor> <booktitle> AI in Design'94, </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <pages> pages 625-640, </pages> <address> Dordrecht, </address> <year> 1994. </year>
Reference-contexts: The MoMo strategy layer corresponds largely to the KADS task layer, while the MoMo task layer primarily controls the execution of the inference layer, an essential aspect in executable languages that is hardly visible in KADS models. 15 16 4.2 THE MOMO LAYERS developed for MoMo in the Fabel project <ref> [ Vo et al., 1994; Vo, 1994 ] </ref> . The design rationale for the original MoMo has been explained in [ Walther et al., 1992, Section 5 ] .
Reference: [ Vo, 1994 ] <author> A. Vo. </author> <title> The need for knowledge acquisition in case-based reasoning some experiences from an architectural domain. </title> <editor> In A. Cohn, editor, </editor> <booktitle> ECAI'94, </booktitle> <pages> pages 463 - 467, </pages> <address> Chichester, August 1994. </address> <publisher> John Wiley and Sons. </publisher>
Reference-contexts: The MoMo strategy layer corresponds largely to the KADS task layer, while the MoMo task layer primarily controls the execution of the inference layer, an essential aspect in executable languages that is hardly visible in KADS models. 15 16 4.2 THE MOMO LAYERS developed for MoMo in the Fabel project <ref> [ Vo et al., 1994; Vo, 1994 ] </ref> . The design rationale for the original MoMo has been explained in [ Walther et al., 1992, Section 5 ] .
Reference: [ Walther et al., 1992 ] <author> J. Walther, A. Vo, M. Linster, T. Hemmann, H. Vo, and W. Kar-bach. </author> <month> MoMo. </month> <institution> Arbeitspapiere der GMD 658, GMD, Sankt Augustin, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: In Petri net theory, the term "transition" seems to be preferred to "action", but MoMo sticks to the latter one. The task layer of MoMo originally consisted of a procedural control language <ref> [ Walther et al., 1992 ] </ref> . As we have seen, these speciflcations are in general too stringent. Therefore a more exible control structure along the principles explained in Section 3 has been 1 The strategy layer of KADS has been abandoned in CommonKADS. <p> The design rationale for the original MoMo has been explained in <ref> [ Walther et al., 1992, Section 5 ] </ref> . The principles for the functionality of the new MoMo task layer are documented and explained more extensively in [ Gebhardt et al., 1994, Chapter 3 ] . <p> Some details on the task layer, the most interesting component with regard to control speciflcation, are deferred to Section 5. The original MoMo language is documented in <ref> [ Walther et al., 1992 ] </ref> ; the changes caused by the new control philosophy are specifled in detail in [ Gebhardt, 1995 ] . 4.2.1 Domain layer The domain layer language remains as in [ Walther et al., 1992, Section 4.4 ] . <p> The original MoMo language is documented in [ Walther et al., 1992 ] ; the changes caused by the new control philosophy are specifled in detail in [ Gebhardt, 1995 ] . 4.2.1 Domain layer The domain layer language remains as in <ref> [ Walther et al., 1992, Section 4.4 ] </ref> . It permits to deflne domain objects in an object oriented form. A hierarchy of concepts, corresponding to CLOS classes, is deflned using function def-concept. def-instance and mak-instance create a named and an anonymous instance of a concept. <p> The domain layer language is of less interest in our present context. 4.2.2 Inference layer The inference layer of MoMo is essentially a Coloured Petri Net although not all facilities deflned with CPNs are provided. Only minor changes to the inference layer language as originally deflned in <ref> [ Walther et al., 1992, Section 4.3 ] </ref> have become necessary. Fabel-Report No. 99 17 Places are specifled using the constructor def-place. Main component of a place deflnition is besides the name the type assigned to the place, either a type name or a list (or type-1 ...). <p> All these constructs remain as in <ref> [ Walther et al., 1992, Section 4.5 ] </ref> except that they may be bound to a main task (or to main tasks) by an additional :task keyword (in the old MoMo there was just one task). <p> Normally they cease to exist when a task is flnished (again from the strategy layer); however, if new tasks are started with the same command and specify appropriate :keep parameters, 2 These features have been available in MoMo before, but they are not documented in <ref> [ Walther et al., 1992 ] </ref> . 18 4.2 THE MOMO LAYERS they survive provided the actions belong to the restriction areas of the new tasks (in the case of a priority, both actions belong to the same new restriction area). <p> Any decisions concerning task control that are independent of the current environment (except on token numbers) should be hidden in the task layer. Chapter 6 Experiences and conclusions 6.1 Status of MoMo The original MoMo using a procedural control has been implemented and documented <ref> [ Walther et al., 1992 ] </ref> several years ago and is running successfully.
References-found: 16

