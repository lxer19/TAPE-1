URL: http://www.cs.cornell.edu/Info/People/jackson/papers/tp-in-cd-92.ps.gz
Refering-URL: http://www.cs.cornell.edu/Info/People/jackson/jackson.html
Root-URL: 
Email: jackson@cs.cornell.edu  
Title: Nuprl and its Use in Circuit Design  
Author: Paul B. Jackson 
Keyword: Keyword Codes: F.4.1; B.6.2; I.2.3 Keywords: Mathematical Logic; Logic Design, Reliability and Testing; Deduction and Theorem Proving.  
Address: Ithaca NY 14853, USA.  
Affiliation: Department of Computer Science, Upson Hall, Cornell University,  
Abstract: Nuprl is an interactive theorem proving system in the LCF tradition. It has a higher order logic and a very expressive type theory; the type theory includes dependent function types ( types), dependent product types ( types) and set types. Nuprl also has a well developed X-Windows user interface and allows for the use of clear and concise notations, close to ones used in print. Proofs are objects which can be viewed, and serve as readable explanations of theorems. Tactics provide a high-level extendible toolkit for proof development, while the soundness of the system relies only a fixed set of rules. We give an overview of the Nuprl system, focusing in particular on the advantages that the type theory brings to formal methods for circuit design. We also discuss ongoing projects in verifying floating-point circuits, verifying the correctness of hardware synthesis systems, and synthesizing circuits by exploiting the constructivity of Nuprl's logic. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mark Aagaard and Miriam Leeser. </author> <title> The implementation and proof of a boolean simplification system. </title> <type> Technical Report EE-CEG-90-2, </type> <institution> Cornell School of Electrical Engineering, </institution> <month> March </month> <year> 1990. </year> <booktitle> In theOxford Workshop on Designing Correct Circuits, </booktitle> <month> September, </month> <year> 1990. </year>
Reference-contexts: More recently Aagaard verified an implementation of the weak division method for simplifying combinational circuits <ref> [1] </ref>. Weak division is widely used in commercial logic synthesis systems. Aagaard's work is part of a larger project to build a complete formally-verified hardware synthesis system [22].
Reference: [2] <author> Stuart F. Allen. </author> <title> A non-type theoretic definition of Martin-Lof's types. </title> <booktitle> In Proceedings of the Second Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 215-221. </pages> <publisher> IEEE, </publisher> <year> 1987. </year>
Reference-contexts: However, it is not easy to make these intuitive ideas precise. Several semantics have been proposed for Nuprl's type theory. The most fully elaborated is Allen's set-theoretic model <ref> [2] </ref>. Nearly all of the rules have been shown to be correct with respect to this model.
Reference: [3] <author> Stuart F. Allen, Robert L. Constable, Douglas J. Howe, and William B. Aitken. </author> <title> The semantics of reflected proof. </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Logic and Computer Science, </booktitle> <pages> pages 95-107. </pages> <publisher> IEEE Computer Society, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: To improve this situation, we are actively pursuing work in an area called Reflection. We are building as a Nuprl theory a complete model of the Nuprl logic [19] <ref> [3] </ref>. When the model is complete, we will verify the correctness of inference procedures, written in Nuprl's object language, which manipulate the data-structures of the model. These verified inference procedures will then be invoked using a specially designed reflection rule.
Reference: [4] <author> Geoff Barrett. </author> <title> Formal methods applied to a floating-point number system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(5) </volume> <pages> 611-621, </pages> <year> 1989. </year>
Reference-contexts: This work involves much reasoning with parameterized bit-vectors as well as with integer and rational numbers. The IEEE floating-point standard [20] is being formalized within Nuprl's type theory in an abstract way, similar to that of Barrett <ref> [4] </ref>. The aim of this work is to produce a reusable toolkit of definitions, theorems and tactics that can be used on practical floating-point designs. 7.2 Circuit Synthesis by Extraction As discussed in section 2.5, theorems in Nuprl's logic can be viewed as specifications of programs.
Reference: [5] <author> David A. Basin. </author> <title> Extracting circuits from constructive proofs. </title> <booktitle> In International Workshop on Formal Methods in VLSI Design. ACM, </booktitle> <year> 1991. </year>
Reference-contexts: The programs themselves are implicit in the proofs of the theorems and can be extracted out of the proofs. Basin has been using Nuprl to see whether one could adapt this idea so that one could extract circuit designs from proofs of theorems which specify the circuits <ref> [5] </ref>.
Reference: [6] <author> David A. Basin, Geoffrey M. Brown, and Miriam E. Leeser. </author> <title> Formally verified syn-thesis of combinational CMOS circuits. </title> <editor> In L. J. M. Claesen, editor, </editor> <booktitle> Formal VLSI Specification and Synthesis, </booktitle> <pages> pages 197-206. </pages> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: in extracting such combinational circuits as barrel shifters and look-ahead carry adders, and is looking into extracting more complex combinational circuits and timed circuits. 7.3 Verification of Hardware Synthesis Systems This work started with Basin, Brown and Leeser synthesizing combinational circuits from their specifications by using specially tailored rewrite rules <ref> [6] </ref>. More recently Aagaard verified an implementation of the weak division method for simplifying combinational circuits [1]. Weak division is widely used in commercial logic synthesis systems. Aagaard's work is part of a larger project to build a complete formally-verified hardware synthesis system [22].
Reference: [7] <author> David A. Basin and Peter Del Vecchio. </author> <title> Verification of combinational logic in Nuprl. </title> <editor> In M. E. Leeser and G. M. Brown, editors, </editor> <title> Hardware Specification, Verification, and Synthesis: </title> <journal> Mathematical Aspects, </journal> <pages> pages 333-357. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year> <note> LNCS 408. </note>
Reference-contexts: This approach is sketched at the start of section 6.7. Basin and DelVecchio verified a combinational circuit which was part of a floating-point adder <ref> [7] </ref>. The circuit consisted of shifting and multiplexing structures. The author is currently working on verifying that floating-point circuit designs meet their specifications [21]. This work involves much reasoning with parameterized bit-vectors as well as with integer and rational numbers.
Reference: [8] <author> Joseph L. Bates. </author> <title> A logic for correct program development. </title> <type> Technical Report 79-388, </type> <institution> Cornell University, </institution> <address> Ithaca, NY, </address> <month> August </month> <year> 1979. </year>
Reference-contexts: a fixed set of rules and previously proven lemmas, so the soundness of every proof ultimately rests on just the the soundness of the rules, not the tactics. 1.1 Background The Nuprl project at Cornell grew out of work on various program verification and synthesis systems using specialized logics [11] <ref> [8] </ref>. These specialized logics were found to be rather cumbersome and a conclusion was drawn that it would be advantageous to work in as expressive logic as possible, one which could serve as a foundation for mathematics.
Reference: [9] <author> Michael J. Beeson. </author> <title> Foundations of Constructive Mathematics. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Nuprl's dependent type constructors are described in some detail, and many examples of their use are given. Type checking emerges as playing an even more important organizational role than it does in most programming languages. Nuprl's logic is constructive <ref> [9] </ref>, its logic lacks a couple of the axioms of classical logic in their full generality. However, this hasn't restricted our reasoning about hardware, and we discuss its possible advantages. Nuprl borrows the idea of tactics from the Edinburgh LCF project. <p> One then uses the rules of type theory to try to answer this question. Some view the fact that one can do this at all as purely accidental. Others point out that mathematicians of the Intuitionistic or Constructive school <ref> [9] </ref> have been developing related ideas since the early years of this century.
Reference: [10] <author> W. W. Bledsoe. </author> <title> A new method for proving certain Presburger formulas. </title> <booktitle> In 4th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 15-21, </pages> <address> Tiblsi, </address> <year> 1975. </year>
Reference-contexts: It handles equality reasoning and some simple inequality reasoning. Arith cannot handle arbitrary integer linear programming problems. These come up frequently when one type-checks types parameterized by integers. For this reason, we are implementing the Sup-Inf method for linear programming problems over the integers and the rationals <ref> [10] </ref>. We hope to verify this implementation using our work on reflection. See section 3.4 for details. 3.3.5 Rewriting Term rewriting is a very useful technique for theorem proving. Some systems base all their reasoning on rewriting [14] Nuprl has a term rewriting package using conversions [25].
Reference: [11] <author> Robert L. Constable, Scott D. Johnson, and Carl D. Eichenlaub. </author> <title> Introduction to the PL/CV2 Programming Logic, </title> <booktitle> volume 135 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1982. </year>
Reference-contexts: to a fixed set of rules and previously proven lemmas, so the soundness of every proof ultimately rests on just the the soundness of the rules, not the tactics. 1.1 Background The Nuprl project at Cornell grew out of work on various program verification and synthesis systems using specialized logics <ref> [11] </ref> [8]. These specialized logics were found to be rather cumbersome and a conclusion was drawn that it would be advantageous to work in as expressive logic as possible, one which could serve as a foundation for mathematics.
Reference: [12] <author> Robert L. Constable, et al. </author> <title> Implementing Mathematics with the Nuprl Proof Development System. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1986. </year>
Reference-contexts: 1 Introduction Nuprl <ref> [12] </ref> is a system designed for developing general mathematical theories. It is based on a higher order logic and has a very expressive type theory, similar to Martin-Lof type theory [23]. It provides an integrated environment for many kinds of reasoning including rewriting, forward and backward chaining, and arithmetic reasoning.
Reference: [13] <author> Thierry Coquand and Gerard Huet. </author> <title> Constructions: A higher order proof system for mechanizing mathematics. </title> <editor> In B. Buchberger, editor, </editor> <booktitle> EUROCAL '85: European Conference on Computer Algebra, </booktitle> <pages> pages 151-184. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: The idea of tactics, and the higher order functional language ML to support them, come from the Edinburgh LCF project [17]. Tactics are widely used in other theorem provers such as HOL, Isabelle [24], Coq <ref> [13] </ref> and VERITAS + [18]. 1.2 Terminology We use the word term throughout this paper to include Nuprl's programming-language constructs, types and propositions. These terms are considered to make up Nuprl's object language. They are sometimes divided into two classes; primitive terms and abstractions.
Reference: [14] <author> Kokichi Futatsugi, Joseph Goguen, Jean-Pierre Jouannaud, and Jose Meseguer. </author> <booktitle> Principles of OBJ2. In Conference Record of the Twelfth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 52-66, </pages> <year> 1985. </year>
Reference-contexts: We hope to verify this implementation using our work on reflection. See section 3.4 for details. 3.3.5 Rewriting Term rewriting is a very useful technique for theorem proving. Some systems base all their reasoning on rewriting <ref> [14] </ref> Nuprl has a term rewriting package using conversions [25]. Conversions form a very high-level modular language for building rewriting strategies. The style of this language is similar to that of the tactic language. Simple conversions are combined into more sophisticated ones using conversionals.
Reference: [15] <author> M. J. C. Gordon. </author> <title> HOL: A machine oriented formulation of higher order logic. </title> <type> Technical Report 68, </type> <institution> Cambridge University Computer Laboratory, </institution> <year> 1985. </year>
Reference-contexts: One of the goals of this paper is to persuade the reader of the usefulness of a type theory such as Nuprl's over a simpler type theory such as HOL's <ref> [15] </ref>. Nuprl's dependent type constructors are described in some detail, and many examples of their use are given. Type checking emerges as playing an even more important organizational role than it does in most programming languages.
Reference: [16] <author> M. J. C. Gordon. </author> <title> Why higher-order logic is a good formalism for specifying and verifying hardware. </title> <editor> In G.J. Milne and P.A. Subrahmanyam, editors, </editor> <title> Formal Aspects of VLSI Design. </title> <publisher> North-Holland, </publisher> <year> 1986. </year>
Reference-contexts: The conference was held in Nijmegen, The Netherlands, 22-24 June 1992. The paper accompanies a tutorial given by the author at the conference. 2 Supported by NASA GSRP fellowship NGT-50786 Nuprl can support formal methods for digital systems design in several ways. The techniques explored by the HOL group <ref> [16] </ref> for verifying circuits can be duplicated and improved on in ways which are discussed in this paper. Current projects include producing a reusable toolkit for verifying floating-point circuits, exploiting special features of Nuprl's logic to synthesize circuits and building a formally-verified hardware synthesis system. <p> Such a generalization is easy to define. Using this type, the proposition that the integers under addition form a monoid is simply: ` &lt; Int; 0; + &gt; 2 M 7 Hardware Related Pro jects 7.1 Floating-Point Circuit Verification We take here the approach of the HOL group <ref> [16] </ref> of modelling circuits as relations. This approach is sketched at the start of section 6.7. Basin and DelVecchio verified a combinational circuit which was part of a floating-point adder [7]. The circuit consisted of shifting and multiplexing structures.
Reference: [17] <author> Michael J. Gordon, Robin Milner, and Christopher P. Wadsworth. </author> <title> Edinburgh LCF: A Mechanized Logic of Computation, </title> <booktitle> volume 78 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference-contexts: The idea of tactics, and the higher order functional language ML to support them, come from the Edinburgh LCF project <ref> [17] </ref>. Tactics are widely used in other theorem provers such as HOL, Isabelle [24], Coq [13] and VERITAS + [18]. 1.2 Terminology We use the word term throughout this paper to include Nuprl's programming-language constructs, types and propositions. These terms are considered to make up Nuprl's object language. <p> T1 ORELSE T2 runs T1 and if T1 fails, it tries T2 instead. Tactics are written in ML, a functional programming language specifically developed for tactic writing <ref> [17] </ref>. The tactic language is an elegant demonstration of the virtues of higher-order functional programming. All tactics in the current collection attach labels to the subgoals they produce. A label describes the kind of a subgoal or what tactic produced it. Labels help users sort out where subgoals come from.
Reference: [18] <author> F. K. Hanna and N. Daeche. </author> <title> Specification and verification of digital systems using higher-order predicate logic. </title> <booktitle> IEE Proceedings E: Computers and Digital Techniques, </booktitle> <volume> 133(5) </volume> <pages> 242-254, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: The idea of tactics, and the higher order functional language ML to support them, come from the Edinburgh LCF project [17]. Tactics are widely used in other theorem provers such as HOL, Isabelle [24], Coq [13] and VERITAS + <ref> [18] </ref>. 1.2 Terminology We use the word term throughout this paper to include Nuprl's programming-language constructs, types and propositions. These terms are considered to make up Nuprl's object language. They are sometimes divided into two classes; primitive terms and abstractions.
Reference: [19] <author> Douglas J. Howe. </author> <title> Automating Reasoning in an Implementation of Constructive Type Theory. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <year> 1988. </year>
Reference-contexts: To improve this situation, we are actively pursuing work in an area called Reflection. We are building as a Nuprl theory a complete model of the Nuprl logic <ref> [19] </ref> [3]. When the model is complete, we will verify the correctness of inference procedures, written in Nuprl's object language, which manipulate the data-structures of the model. These verified inference procedures will then be invoked using a specially designed reflection rule.
Reference: [20] <institution> IEEE standard for binary floating-point arithmetic. </institution> <address> New York ANSI/IEEE Std. 754-1985, </address> <month> August </month> <year> 1985. </year>
Reference-contexts: The circuit consisted of shifting and multiplexing structures. The author is currently working on verifying that floating-point circuit designs meet their specifications [21]. This work involves much reasoning with parameterized bit-vectors as well as with integer and rational numbers. The IEEE floating-point standard <ref> [20] </ref> is being formalized within Nuprl's type theory in an abstract way, similar to that of Barrett [4].
Reference: [21] <author> Paul B. Jackson. </author> <title> Developing a toolkit for floating-point hardware in the nuprl proof development system. </title> <booktitle> In Proceedings of the Advanced Research Workshop on Correct Hardware Design Methodologies. </booktitle> <publisher> Elsevier, </publisher> <year> 1991. </year>
Reference-contexts: This approach is sketched at the start of section 6.7. Basin and DelVecchio verified a combinational circuit which was part of a floating-point adder [7]. The circuit consisted of shifting and multiplexing structures. The author is currently working on verifying that floating-point circuit designs meet their specifications <ref> [21] </ref>. This work involves much reasoning with parameterized bit-vectors as well as with integer and rational numbers. The IEEE floating-point standard [20] is being formalized within Nuprl's type theory in an abstract way, similar to that of Barrett [4].
Reference: [22] <author> Miriam Leeser et al. BEDROC: </author> <title> The Cornell hardware synthesis project. </title> <type> Technical Report EE-CEG-90-6, </type> <institution> Cornell School of Electrical Engineering, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: More recently Aagaard verified an implementation of the weak division method for simplifying combinational circuits [1]. Weak division is widely used in commercial logic synthesis systems. Aagaard's work is part of a larger project to build a complete formally-verified hardware synthesis system <ref> [22] </ref>. If formally verified synthesis systems become widely used, then far more designers will benefit from formal methods than just those who use formal methods themselves. There is also no reason why the application of formal methods should be restricted to synthesis systems.
Reference: [23] <author> Per Martin-Lof. </author> <title> Constructive mathematics and computer programming. </title> <booktitle> In Sixth International Congress for Logic, Methodology, and Philosophy of Science, </booktitle> <pages> pages 153-175, </pages> <address> Amsterdam, 1982. </address> <publisher> North Holland. </publisher>
Reference-contexts: 1 Introduction Nuprl [12] is a system designed for developing general mathematical theories. It is based on a higher order logic and has a very expressive type theory, similar to Martin-Lof type theory <ref> [23] </ref>. It provides an integrated environment for many kinds of reasoning including rewriting, forward and backward chaining, and arithmetic reasoning. It has an X-windows interface for entering definitions and interactively guiding proofs of theorems.
Reference: [24] <author> L. Paulson. </author> <title> Isabelle: The next 700 theorem provers. </title> <editor> In P. Odifreddi, editor, </editor> <booktitle> Logic and Computer Science, </booktitle> <pages> pages 361-385. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: The idea of tactics, and the higher order functional language ML to support them, come from the Edinburgh LCF project [17]. Tactics are widely used in other theorem provers such as HOL, Isabelle <ref> [24] </ref>, Coq [13] and VERITAS + [18]. 1.2 Terminology We use the word term throughout this paper to include Nuprl's programming-language constructs, types and propositions. These terms are considered to make up Nuprl's object language. They are sometimes divided into two classes; primitive terms and abstractions.
Reference: [25] <author> Lawrence C. Paulson. </author> <title> A higher-order implementation of rewriting. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 3 </volume> <pages> 119-149, </pages> <year> 1983. </year>
Reference-contexts: We hope to verify this implementation using our work on reflection. See section 3.4 for details. 3.3.5 Rewriting Term rewriting is a very useful technique for theorem proving. Some systems base all their reasoning on rewriting [14] Nuprl has a term rewriting package using conversions <ref> [25] </ref>. Conversions form a very high-level modular language for building rewriting strategies. The style of this language is similar to that of the tactic language. Simple conversions are combined into more sophisticated ones using conversionals. Conversions provide a lot of control over the rewrite process.
Reference: [26] <author> Raymond Smullyan. </author> <title> First Order Logic. </title> <publisher> Springer-Verlag, </publisher> <year> 1968. </year>
Reference-contexts: In practice in Nuprl, one never invokes the rules directly. As is explained in section 3.3, one can easily automatically apply many | maybe hundreds | of rules at a time. This style of theorem proving bears a close resemblance to the tableau method for proving theorems <ref> [26] </ref>, which is commonly taught in logic courses, and which students usually find the simplest to use. 2.2 Type Theory A type theory defines kinds of objects that one can talk about. Common types in programming languages are integers, strings and arrays.
Reference: [27] <author> M. E. Szabo, </author> <title> editor. The Collected Works of Gerhard Gentzen. </title> <publisher> North Holland, </publisher> <year> 1969. </year>
Reference-contexts: The rule can also be read bottom-up as saying that in order to prove C is true, it is sufficient to prove that all the A i are true. Nuprl's logic is similar to Gentzen's LJ system <ref> [27] </ref>. Nearly all the logic rules, when read top-down, tell us how to introduce a logical connective or quantifier in a hypothesis or the conclusion. When read bottom-up they explain how to break down or decompose the connective.
References-found: 27

