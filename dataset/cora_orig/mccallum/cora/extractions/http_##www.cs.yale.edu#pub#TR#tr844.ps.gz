URL: http://www.cs.yale.edu/pub/TR/tr844.ps.gz
Refering-URL: http://www.cs.yale.edu/pub/TR/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: RANDOMIZED ALGORITHMS FOR MULTIPROCESSOR PAGE MIGRATION  
Author: JEFFERY WESTBROOK 
Keyword: Key words. on-line algorithms, page migration, competitive analysis, multiprocessors, memory management  
Note: AMS subject classifications. 68Q20, 68Q25  
Abstract: The page migration problem is to manage a globally addressed shared memory in a multiprocessor system. Each physical page of memory is located at a given processor, and memory references to that page by other processors incur a cost proportional to the network distance. At times the page may migrate between processors at cost proportional to the distance times D, a page size factor. The problem is to schedule movements on-line so that the total cost of memory references is within a constant factor c of the best off-line schedule. An algorithm that does so is called c-competitive. Black and Sleator gave 3-competitive deterministic on-line algorithms for uniform networks (complete graphs with unit edge lengths) and for trees with arbitrary edge lengths. No good deterministic algorithm is known for general networks with arbitrary edge lengths. We present randomized algorithms for the migration problem that are both simple and better than 3-competitive against an oblivious adversary. We give one algorithm designed for uniform graphs that is approximately 2.28-competitive as D grows large. We also give a second, more powerful algorithm that works on graphs with arbitrary edge distances. This algorithm is approximately 2.62-competitive (or, 1 plus the Golden Ratio) for large D. Both these algorithms use random bits only during an initialization phase, and from then on run deterministically. We also examine the competitiveness of a very simple coin-flipping algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Bartal, A. Fiat, and Y. Rabani, </author> <title> Competitive algorithms for distributed data management, </title> <booktitle> in Proc. ACM Symp. on Theory of Computing, </booktitle> <year> 1992, </year> <pages> pp. 39-50. </pages>
Reference-contexts: Black and Sleator [5] have studied the related problem of page replication, in which one may make multiple copies of a read-only page, and Karlin et al. [11] studied snoopy caching, which is memory management given a bus-based interconnection network. Other memory management problems have been studied in references <ref> [1] </ref>, [12], [15]. Migration is related to the 1-server with excursions problem defined by Manasse et al. [13]. Migration and 1-server with excursion are also related to the k-server problems [3], [7], [13]. Practical issues and applications of page migration are discussed more fully in [4], [5], [17]. <p> A second is to find a good deterministic algorithm for migration on general graphs. Another open problem is to extend any of these results to the more general problem of 1-server with excursions. In recent work, Bartal et al. <ref> [1] </ref> studied file allocation in distributed systems. In this situation multiple physical copies of writeable pages or data files are sometimes allowed. In this problem, the competitive ratio rises to fi (log n), where n is the number of processors. 7. Acknowledgements. The author thanks Daniel D.
Reference: [2] <author> S. Ben-David, A. Borodin, R. M. Karp, G. T ardos, and A. Wigderson, </author> <title> On the power of randomization in on-line algorithms, </title> <booktitle> in Proc. 22nd ACM Symp. on Theory of Computing, </booktitle> <month> May </month> <year> 1990, </year> <pages> pp. 379-386. </pages>
Reference-contexts: We show that on any network and for any D it is 3-competitive against an adaptive on-line adversary. The coin flipping algorithm is memoryless, and hence has no storage or network overhead, but needs to generate a random number every request. Applying a result of Ben-David et al. <ref> [2] </ref> to the coin-flipping algorithm and the (1 + )-competitive algorithm mentioned above, we prove the existence of a (3+3)-competitive deterministic algorithm for general networks. Page migration is one of several problems that arise in managing data in a distributed environment. <p> In addition, Chrobak et al. [8] give an example of a 4-processor network on which every deterministic algorithm has a competitive ratio slightly larger than 3 when D = 1. By a theorem of <ref> [2] </ref>, these deterministic lower bounds also apply to randomized algorithms facing an adaptive off-line adversary. The results in this paper demonstrate that against an oblivious adversary, randomized algorithms can beat the deterministic lower bound. <p> Now we show that the coin-flipping algorithm is 3-competitive against an adaptive on-line adversary. To perform the analysis, we use the request-answer game framework of <ref> [2] </ref>. The adversary initially commits to a request sequence length m. The game proceeds as a sequence of m rounds. In each round, the adversary first moves its page, if it so chooses. Then the adversary generates a request, and immediately services it. <p> Corollary 5.4. On any graph the competitiveness of the coin-flipping algorithm against an adaptive off-line adversary tends to 3 + 3 7:86 as d grows large. Proof. Theorem 2.2 of <ref> [2] </ref> states that if algorithm B is fi-competitive against an adaptive on-line algorithm and there exists an algorithm A that is ff-competitive against an oblivious adversary, then B is fffi-competitive against an adaptive offline algorithm. <p> Corollary 5.5. There exists a deterministic algorithm for the migration problem with competitive ratio that tends to 3 + 3 7:86 as D grows large. Proof. Theorem 2.1 of <ref> [2] </ref> states that if there is a randomized algorithm that is ff-competitive against any adaptive off-line algorithm, then there is also a ff-competitive deterministic algorithm. The theorem gives a method of constructing the deterministic algorithm, but we have not attempted to do so here. 6. Remarks.
Reference: [3] <author> P. Berman, H. J. Karloff, and G. Tardos, </author> <title> A competitive three-server algorithm, </title> <booktitle> in Proc. 1st ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1990, </year> <pages> pp. 280-290. </pages>
Reference-contexts: Other memory management problems have been studied in references [1], [12], [15]. Migration is related to the 1-server with excursions problem defined by Manasse et al. [13]. Migration and 1-server with excursion are also related to the k-server problems <ref> [3] </ref>, [7], [13]. Practical issues and applications of page migration are discussed more fully in [4], [5], [17].
Reference: [4] <author> D. Black, A. Gupta, and W. Weber, </author> <title> Competitive management of distributed shared memory, </title> <booktitle> in Proceedings, Spring Compcon 1989, IEEE Computer Society, </booktitle> <address> San Francisco, CA., </address> <year> 1989, </year> <pages> pp. 184-190. </pages>
Reference-contexts: Having a given virtual page stored at multiple processors reduces communication overhead during memory reads, but introduces the problem of maintaining consistency among the multiple copies during writes. Most multiprocessors do not provide mechanisms for maintaining consistency [5]. Therefore, various network designers have studied the page migration problem <ref> [4] </ref>, [5], [17], which arises when each write-able page is restricted to a single copy. Suppose the single copy of page b is initially located at processor q. <p> Migration is related to the 1-server with excursions problem defined by Manasse et al. [13]. Migration and 1-server with excursion are also related to the k-server problems [3], [7], [13]. Practical issues and applications of page migration are discussed more fully in <ref> [4] </ref>, [5], [17]. Subsequent to the work presented here, Chrobak et al. found a 2 + 1=2D-competitive algorithm for a single edge and for the tree topology [8], and showed that this bound is tight. 2. Competitive Analysis and Lower Bounds. Let be a sequence of requests.
Reference: [5] <author> D. L. Black and D. D. Sleator, </author> <title> Competitive algorithms for replication and migration problems, </title> <type> Tech. Report CMU-CS-89-201, </type> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <year> 1989. </year>
Reference-contexts: Having a given virtual page stored at multiple processors reduces communication overhead during memory reads, but introduces the problem of maintaining consistency among the multiple copies during writes. Most multiprocessors do not provide mechanisms for maintaining consistency <ref> [5] </ref>. Therefore, various network designers have studied the page migration problem [4], [5], [17], which arises when each write-able page is restricted to a single copy. Suppose the single copy of page b is initially located at processor q. <p> Having a given virtual page stored at multiple processors reduces communication overhead during memory reads, but introduces the problem of maintaining consistency among the multiple copies during writes. Most multiprocessors do not provide mechanisms for maintaining consistency <ref> [5] </ref>. Therefore, various network designers have studied the page migration problem [4], [5], [17], which arises when each write-able page is restricted to a single copy. Suppose the single copy of page b is initially located at processor q. <p> Recently much attention has been given to competitive analysis of on-line algorithms [6], [13], [15], [18]. Black and Sleator <ref> [5] </ref> formalized and studied the page migration problem in the context of competitive analysis. They considered two classes of networks: uniform networks, i.e., complete graphs with each edge having length 1; and trees with arbitrary edge lengths. They developed 3-competitive deterministic algorithms for these two classes for any D. <p> Page migration is one of several problems that arise in managing data in a distributed environment. Black and Sleator <ref> [5] </ref> have studied the related problem of page replication, in which one may make multiple copies of a read-only page, and Karlin et al. [11] studied snoopy caching, which is memory management given a bus-based interconnection network. Other memory management problems have been studied in references [1], [12], [15]. <p> Migration is related to the 1-server with excursions problem defined by Manasse et al. [13]. Migration and 1-server with excursion are also related to the k-server problems [3], [7], [13]. Practical issues and applications of page migration are discussed more fully in [4], <ref> [5] </ref>, [17]. Subsequent to the work presented here, Chrobak et al. found a 2 + 1=2D-competitive algorithm for a single edge and for the tree topology [8], and showed that this bound is tight. 2. Competitive Analysis and Lower Bounds. Let be a sequence of requests. <p> This is the first natural on-line problems for which this is known to be true. 3. Uniform Graphs. In this section we describe and analyze a randomized algorithm, UNIFORM, designed for uniform graphs. The uniform graph is a common and important network topology <ref> [5] </ref>. In this model, ffi v;v = 0 for all processor nodes v, ffi u;v = 1 for all pairs u 6= v, and the cost of moving the page from node u to node v is D 1.
Reference: [6] <author> A. Borodin, N. Linial, and M. Saks, </author> <title> An optimal online algorithm for metrical task systems, </title> <booktitle> in Proc. 19th ACM Symp. on Theory of Computing, </booktitle> <year> 1987, </year> <pages> pp. 373-382. </pages>
Reference-contexts: An on-line algorithm is called c-competitive if, for any request sequence, its cost is no more than c times the cost of the optimum off-line cost for that sequence, for some constant c. Recently much attention has been given to competitive analysis of on-line algorithms <ref> [6] </ref>, [13], [15], [18]. Black and Sleator [5] formalized and studied the page migration problem in the context of competitive analysis. They considered two classes of networks: uniform networks, i.e., complete graphs with each edge having length 1; and trees with arbitrary edge lengths. <p> Little is known about deterministic algorithms for a complete graph with arbitrary edge weights. This problem seems quite hard. The best previous deterministic bound for the general case was either the 2n 1 bound for metrical task systems <ref> [6] </ref> 1 or a 2D + 2 bound given by a simple algorithm that moves the page to the requesting node after each request. In this paper we use randomization to beat the deterministic lower bound and to give a fast algorithm for the general case. <p> Competitive Analysis and Lower Bounds. Let be a sequence of requests. The cost of an algorithm A on is denoted A (). We denote by OPT the off-line algorithm that achieves the optimum cost on . Following <ref> [6] </ref>, [13] we say a deterministic algorithm A is c-competitive if there is a constant b such that for all request sequences , A () c OPT () + b: For randomized algorithms the competitiveness of an algorithm is defined with respect to an adversary. <p> Markov chain transition matrix. Entry (i; j) contains the probability of a transition to counter value i from counter value j following a request, 1 i; j k. The previous best known deterministic competitive ratio for general graphs is 2n 1, given by the general metrical task system algorithm <ref> [6] </ref>. Technically, that result holds for a different model, the "lookahead-1" model, in which the algorithm is allowed to move the page after seeing the next request but before actually servicing it. In our "lookahead-0" model, the request must be serviced immediately it is seen.
Reference: [7] <author> M. Chrobak, H. Karloff, T. Payne, and S. Vishwanathan, </author> <title> New results on server problems, </title> <booktitle> in Proc. 1st ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1990, </year> <pages> pp. 291-300. </pages>
Reference-contexts: Other memory management problems have been studied in references [1], [12], [15]. Migration is related to the 1-server with excursions problem defined by Manasse et al. [13]. Migration and 1-server with excursion are also related to the k-server problems [3], <ref> [7] </ref>, [13]. Practical issues and applications of page migration are discussed more fully in [4], [5], [17]. Subsequent to the work presented here, Chrobak et al. found a 2 + 1=2D-competitive algorithm for a single edge and for the tree topology [8], and showed that this bound is tight. 2.
Reference: [8] <author> M. Chrobak, L. L. Larmore, N. Reingold, and J. Westbrook, </author> <title> Page migration algorithms using work functions, </title> <type> Tech. Report YALEU/DCS/TR-897, </type> <institution> Yale University, </institution> <month> Novem-ber </month> <year> 1991. </year>
Reference-contexts: Practical issues and applications of page migration are discussed more fully in [4], [5], [17]. Subsequent to the work presented here, Chrobak et al. found a 2 + 1=2D-competitive algorithm for a single edge and for the tree topology <ref> [8] </ref>, and showed that this bound is tight. 2. Competitive Analysis and Lower Bounds. Let be a sequence of requests. The cost of an algorithm A on is denoted A (). We denote by OPT the off-line algorithm that achieves the optimum cost on . <p> Black and Sleator showed that in the simple case of two processors linked by a single edge of length 1, no deterministic algorithm can be better than 3-competitive for any D. In addition, Chrobak et al. <ref> [8] </ref> give an example of a 4-processor network on which every deterministic algorithm has a competitive ratio slightly larger than 3 when D = 1. By a theorem of [2], these deterministic lower bounds also apply to randomized algorithms facing an adaptive off-line adversary. <p> By considering the case of a single edge, one can show that for a given page factor D no randomized algorithm can be better than 2 + 1 2D -competitive against an oblivious adversary <ref> [8] </ref>. We suspect, however, that the lower bound is higher for more complicated graphs. In Section 5 we show a randomized algorithm that is 3-competitive against adaptive on-line adversaries for all D. One can apply a technique from [10], [16] to show that no algorithm can do better.
Reference: [9] <author> W. Crowther, J. Goodhue, E. Starr, R. Thomas, W. Milliken, and T. Blackadar, </author> <title> Performance measurements on a 128-node butterfly parallel processor, </title> <booktitle> in Proc. International Conf. on Parallel Processing, IEEE Computer Society, </booktitle> <year> 1985, </year> <pages> pp. 531-540. </pages>
Reference-contexts: 1. Introduction. A common design for a shared memory multiprocessor system is a network of processors, each of which has its own local memory <ref> [9] </ref>, [14], [19]. In such a design, a programming abstraction of a single global memory address space is supported by a virtual memory system that distributes one or more copies of each physical page of memory among the processors' local memories.
Reference: [10] <author> S. Irani, N. Reingold, D. D. Sleator, and J. Westbrook, </author> <title> Randomized algorithms for the list update problem, </title> <booktitle> in Proc. 2nd ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1991, </year> <pages> pp. 251-260. </pages>
Reference-contexts: We suspect, however, that the lower bound is higher for more complicated graphs. In Section 5 we show a randomized algorithm that is 3-competitive against adaptive on-line adversaries for all D. One can apply a technique from <ref> [10] </ref>, [16] to show that no algorithm can do better. This lower bound follows from considering the simple case of two processors linked by a single edge of length 1. <p> RANDOMIZED PAGE MIGRATION 5 Before describing the algorithm, we remark that when the graph is a single edge between two nodes, this problem is identical to the two-item list update problem. Reingold et al. <ref> [10] </ref>, [16] gave a simple randomized algorithm for the list-update problem, which UNIFORM parallels. Each processor node v of the graph is given an associated counter, C v , that takes on values between 0 and k 1.
Reference: [11] <author> A. Karlin, M. Manasse, L. Rudolph, and D. Sleator, </author> <title> Competitive snoopy caching, </title> <journal> Algorithmica, </journal> <volume> 3 (1988), </volume> <pages> pp. 79-119. </pages>
Reference-contexts: Page migration is one of several problems that arise in managing data in a distributed environment. Black and Sleator [5] have studied the related problem of page replication, in which one may make multiple copies of a read-only page, and Karlin et al. <ref> [11] </ref> studied snoopy caching, which is memory management given a bus-based interconnection network. Other memory management problems have been studied in references [1], [12], [15]. Migration is related to the 1-server with excursions problem defined by Manasse et al. [13].
Reference: [12] <author> A. R. Karlin, M. S. Manasse, L. A. McGeoch, and S. Owicki, </author> <title> Competitive randomized algorithms for non-uniform problems, </title> <booktitle> in Proc. 1st ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1990, </year> <pages> pp. 301-309. </pages>
Reference-contexts: Other memory management problems have been studied in references [1], <ref> [12] </ref>, [15]. Migration is related to the 1-server with excursions problem defined by Manasse et al. [13]. Migration and 1-server with excursion are also related to the k-server problems [3], [7], [13]. Practical issues and applications of page migration are discussed more fully in [4], [5], [17].
Reference: [13] <author> M. Manasse, L. A. McGeoch, and D. Sleator, </author> <title> Competitive algorithms for on-line problems, </title> <booktitle> in Proc. 20th ACM Symp. on Theory of Computing, </booktitle> <year> 1988, </year> <pages> pp. 322-333. </pages> <note> 16 J. WESTBROOK </note>
Reference-contexts: An on-line algorithm is called c-competitive if, for any request sequence, its cost is no more than c times the cost of the optimum off-line cost for that sequence, for some constant c. Recently much attention has been given to competitive analysis of on-line algorithms [6], <ref> [13] </ref>, [15], [18]. Black and Sleator [5] formalized and studied the page migration problem in the context of competitive analysis. They considered two classes of networks: uniform networks, i.e., complete graphs with each edge having length 1; and trees with arbitrary edge lengths. <p> Other memory management problems have been studied in references [1], [12], [15]. Migration is related to the 1-server with excursions problem defined by Manasse et al. <ref> [13] </ref>. Migration and 1-server with excursion are also related to the k-server problems [3], [7], [13]. Practical issues and applications of page migration are discussed more fully in [4], [5], [17]. <p> Other memory management problems have been studied in references [1], [12], [15]. Migration is related to the 1-server with excursions problem defined by Manasse et al. <ref> [13] </ref>. Migration and 1-server with excursion are also related to the k-server problems [3], [7], [13]. Practical issues and applications of page migration are discussed more fully in [4], [5], [17]. Subsequent to the work presented here, Chrobak et al. found a 2 + 1=2D-competitive algorithm for a single edge and for the tree topology [8], and showed that this bound is tight. 2. <p> Competitive Analysis and Lower Bounds. Let be a sequence of requests. The cost of an algorithm A on is denoted A (). We denote by OPT the off-line algorithm that achieves the optimum cost on . Following [6], <ref> [13] </ref> we say a deterministic algorithm A is c-competitive if there is a constant b such that for all request sequences , A () c OPT () + b: For randomized algorithms the competitiveness of an algorithm is defined with respect to an adversary.
Reference: [14] <author> G. Pfister and et al., </author> <title> The IBM research parallel processor prototype: Introduction and architecture, </title> <booktitle> in Proc. International Conf. on Parallel Processing, IEEE Computer Society, </booktitle> <year> 1985, </year> <pages> pp. 764-771. </pages>
Reference-contexts: 1. Introduction. A common design for a shared memory multiprocessor system is a network of processors, each of which has its own local memory [9], <ref> [14] </ref>, [19]. In such a design, a programming abstraction of a single global memory address space is supported by a virtual memory system that distributes one or more copies of each physical page of memory among the processors' local memories.
Reference: [15] <author> P. Raghavan and M. Snir, </author> <title> Memory versus randomization in on-line algorithms, Research Report RC 15622 (No. </title> <type> 69444), </type> <institution> IBM T. J. Watson Reseach Center, </institution> <year> 1990. </year>
Reference-contexts: An on-line algorithm is called c-competitive if, for any request sequence, its cost is no more than c times the cost of the optimum off-line cost for that sequence, for some constant c. Recently much attention has been given to competitive analysis of on-line algorithms [6], [13], <ref> [15] </ref>, [18]. Black and Sleator [5] formalized and studied the page migration problem in the context of competitive analysis. They considered two classes of networks: uniform networks, i.e., complete graphs with each edge having length 1; and trees with arbitrary edge lengths. <p> Other memory management problems have been studied in references [1], [12], <ref> [15] </ref>. Migration is related to the 1-server with excursions problem defined by Manasse et al. [13]. Migration and 1-server with excursion are also related to the k-server problems [3], [7], [13]. Practical issues and applications of page migration are discussed more fully in [4], [5], [17].
Reference: [16] <author> N. Reingold, J. Westbrook, and D. D. Sleator, </author> <title> Randomized algorithms for the list update problem, </title> <journal> Algorithmica, </journal> <volume> 11 (1994), </volume> <pages> pp. 15-32. </pages>
Reference-contexts: We suspect, however, that the lower bound is higher for more complicated graphs. In Section 5 we show a randomized algorithm that is 3-competitive against adaptive on-line adversaries for all D. One can apply a technique from [10], <ref> [16] </ref> to show that no algorithm can do better. This lower bound follows from considering the simple case of two processors linked by a single edge of length 1. <p> RANDOMIZED PAGE MIGRATION 5 Before describing the algorithm, we remark that when the graph is a single edge between two nodes, this problem is identical to the two-item list update problem. Reingold et al. [10], <ref> [16] </ref> gave a simple randomized algorithm for the list-update problem, which UNIFORM parallels. Each processor node v of the graph is given an associated counter, C v , that takes on values between 0 and k 1. <p> Note that all these values are better than the deterministic lower bound of 3. It is possible to slightly improve upon the values for small D by using the random reset techniques employed in <ref> [16] </ref>. The next theorem shows that our analysis is tight. Theorem 3.2. The UNIFORM algorithm is no better than c k -competitive, where c k is defined as in Theorem 3.1.
Reference: [17] <author> C. Scheurich and M. Dubois, </author> <title> Dynamic page migration in multiprocessors with distributed global memory, </title> <journal> IEEE Transactions on Computers, </journal> <volume> 38 (1989), </volume> <pages> pp. 1154-1163. </pages>
Reference-contexts: Most multiprocessors do not provide mechanisms for maintaining consistency [5]. Therefore, various network designers have studied the page migration problem [4], [5], <ref> [17] </ref>, which arises when each write-able page is restricted to a single copy. Suppose the single copy of page b is initially located at processor q. <p> Migration is related to the 1-server with excursions problem defined by Manasse et al. [13]. Migration and 1-server with excursion are also related to the k-server problems [3], [7], [13]. Practical issues and applications of page migration are discussed more fully in [4], [5], <ref> [17] </ref>. Subsequent to the work presented here, Chrobak et al. found a 2 + 1=2D-competitive algorithm for a single edge and for the tree topology [8], and showed that this bound is tight. 2. Competitive Analysis and Lower Bounds. Let be a sequence of requests.
Reference: [18] <author> D. D. Sleator and R. E. Tarjan, </author> <title> Amortized efficiency of list update and paging rules, </title> <journal> Comm. ACM, </journal> <volume> 28 (1985), </volume> <pages> pp. 202-208. </pages>
Reference-contexts: An on-line algorithm is called c-competitive if, for any request sequence, its cost is no more than c times the cost of the optimum off-line cost for that sequence, for some constant c. Recently much attention has been given to competitive analysis of on-line algorithms [6], [13], [15], <ref> [18] </ref>. Black and Sleator [5] formalized and studied the page migration problem in the context of competitive analysis. They considered two classes of networks: uniform networks, i.e., complete graphs with each edge having length 1; and trees with arbitrary edge lengths.
Reference: [19] <author> A. Wilson, </author> <title> Hierarchical cache/bus architecture for shared memory multiprocessors, </title> <booktitle> in Proc. 14th International Symp. on Computer Architecture, ACM SIGARCH/IEEE Computer Society, </booktitle> <year> 1987, </year> <pages> pp. 244-252. </pages>
Reference-contexts: 1. Introduction. A common design for a shared memory multiprocessor system is a network of processors, each of which has its own local memory [9], [14], <ref> [19] </ref>. In such a design, a programming abstraction of a single global memory address space is supported by a virtual memory system that distributes one or more copies of each physical page of memory among the processors' local memories.
References-found: 19

