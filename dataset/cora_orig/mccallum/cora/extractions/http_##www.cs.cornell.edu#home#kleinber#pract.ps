URL: http://www.cs.cornell.edu/home/kleinber/pract.ps
Refering-URL: http://www.cs.cornell.edu/home/kleinber/kleinber.html
Root-URL: 
Title: Approximation Algorithms for Disjoint Paths Problems  
Author: by Jon Michael Kleinberg Michel X. Goemans 
Degree: Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Doctor of Philosophy in Computer Science at the  c 1996 Jon Michael Kleinberg. All rights reserved. The author hereby grants to MIT permission to reproduce and to distribute publicly paper and electronic copies of this thesis document in whole or in part. Signature of Author  Certified by  Assistant Professor of Applied Mathematics Thesis Supervisor Accepted by F.R. Morgenthaler Chairman, Department Committee on Graduate Students  
Date: (1994)  (1993)  May 1996  May 3, 1996  
Affiliation: S.M., Electrical Engineering and Computer Science Massachusetts Institute of Technology  A.B., Computer Science and Mathematics Cornell University  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Aggarwal, A. Bar-Noy, D. Coppersmith, R. Ramaswami, B. Schieber, M. Sudan, </author> <title> "Efficient routing and scheduling algorithms for optical networks," </title> <booktitle> Proc. 5th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1994, </year> <pages> pp. 412-423. </pages>
Reference-contexts: By a disc we mean a set homeomorphic to the closed unit ball in R 2 , and by -disc, we mean a subset of homeomorphic to a disc. We also use the terms curve (continuous image of <ref> [0; 1] </ref>) and closed 30 curve (continuous image of S 1 ). <p> Two curves R and R 0 are said to be homotopic on if, informally speaking, one can be "continuously deformed" into the other without moving the endpoints. Technically, R and R 0 are homotopic, written R ~ R 0 , if there exists a continuous function : <ref> [0; 1] </ref> fi [0; 1] ! such that for all t 2 [0; 1], (i) (t; 0) = R (t), (t; 1) = R 0 (t). We define homotopy for closed curves using a function : S 1 fi [0; 1] ! that satisfies condition (i). <p> Technically, R and R 0 are homotopic, written R ~ R 0 , if there exists a continuous function : <ref> [0; 1] </ref> fi [0; 1] ! such that for all t 2 [0; 1], (i) (t; 0) = R (t), (t; 1) = R 0 (t). We define homotopy for closed curves using a function : S 1 fi [0; 1] ! that satisfies condition (i). <p> Technically, R and R 0 are homotopic, written R ~ R 0 , if there exists a continuous function : <ref> [0; 1] </ref> fi [0; 1] ! such that for all t 2 [0; 1], (i) (t; 0) = R (t), (t; 1) = R 0 (t). We define homotopy for closed curves using a function : S 1 fi [0; 1] ! that satisfies condition (i). <p> ~ R 0 , if there exists a continuous function : <ref> [0; 1] </ref> fi [0; 1] ! such that for all t 2 [0; 1], (i) (t; 0) = R (t), (t; 1) = R 0 (t). We define homotopy for closed curves using a function : S 1 fi [0; 1] ! that satisfies condition (i). A closed curve is said to be null-homotopic on if it is homotopic to a point; it is well-known (see e.g. [99]) that a closed curve is null-homotopic if and only if it is contained in a -disc. <p> To verify the first of these, we need the following result from [93]; it is a bound on the sum of independent random variables in the spirit of results of Chernoff [23] and Hoeffding [51]. Theorem 2.5.1 (Raghavan) Let a 1 ; : : :; a r 2 <ref> [0; 1] </ref>: Let X 1 ; X 2 ; : : : ; X r be independent Bernoulli trials with EX j = p j and = P P i a i p i . <p> Then for ffi &gt; 0 we have P r [ &gt; (1 + ffi)m] &lt; e ffi # m We specialize this to the form in which we will use it as follows. Corollary 2.5.2 Let a 1 ; : : : ; a r 2 <ref> [0; 1] </ref>: Let 0 &lt; &lt; ff 1, and p 1 ; : : : ; p r 2 [0; 1]. <p> Corollary 2.5.2 Let a 1 ; : : : ; a r 2 <ref> [0; 1] </ref>: Let 0 &lt; &lt; ff 1, and p 1 ; : : : ; p r 2 [0; 1]. Let X 0 2 ; : : : ; X 0 r be independent Bernoulli trials with EX 0 j = p j and 0 = i a i X 0 P i a i p i . <p> The weight of such a fractional subset Y is now defined to be w (Y ) = u2U A collection F i of "feasible" subsets of U is now specified by some subset of <ref> [0; 1] </ref> jUj that is closed downward in the sense that Y 2 F i and Y 0 Y coordinatewise implies that Y 0 2 F i . The algorithms A i work as before, and in particular can only choose integer-valued subsets of U . <p> As in the previous proof, let U 0 denote the sequence of elements presented to A, X the integer-valued set returned by A, and Y a fractional subset of U 0 of maximum weight. (A 100 fractional set attaining the maximum exists since the F i are closed subsets of <ref> [0; 1] </ref> jUj , and hence compact.) Define R 0 i to be the fractional set obtained by assigning zero to all coordinates of Y except those corresponding to elements rejected by algorithm A i , J i the fractional set obtained by assigning zero to all coordinates of Y except <p> So what is the probability that a terminal s survives? We will let s denote the demand of the terminal pair associated with s, and f s 2 <ref> [0; 1] </ref> the weight assigned to it by the fractional optimum. First we consider the probability that s is contained in a fixed overfull p fi q rectangle R, given that s has been rounded up. <p> Thus, we are addressing the following question: what is the minimum size of a partition of T into realizable sets? We use (T ) to denote this minimum. The quantity (T ) also arises in the analysis of routing algorithms for all-optical networks <ref> [1, 95, 9] </ref>. Here, one is given a graph G and set of terminal pairs T (with all demands equal to 1); for each pair (s i ; t i ) 2 T one must choose a path in G and a wavelength to use for routing the 112 path. <p> Finally, it is easy to extend the approximation for to handle a set of terminal pairs with arbitrary demands in <ref> [0; 1] </ref>, and edges of unit capacity. When the minimum demand of any pair of terminals is fl , the approximation ratio we obtain is O (log n + log 1 fl ). <p> We now turn to the case of a set T of terminal pairs, with arbitrary demands in the interval <ref> [0; 1] </ref>, again on a unit-capacity two-dimensional mesh G. Let fl denote the minimum demand associated with any pair of terminals in T . Theorem 6.4.4 There is an O (log n + log 1 fl )-approximation for (T ) in G. Proof. <p> 9.2.2 For non-negative integers a and b, one has Z 1 x a (1 x) b dx = (a + b + 1) 1 a + b ! 1 159 Lemma 9.2.3 Consider the following random experiment: we first choose a bias ff for a coin uniformly from the interval <ref> [0; 1] </ref>, and then flip the coin n times. The probability that the number of heads is k is equal to 1 n+1 . Proof. The probability is equal to k 0 which by Lemma 9.2.2 is equal to 1 n+1 . <p> Below we show how a bound for this special case this can be used to prove Theorem 9.1.1. We represent A as a union of pseudo-rows, as follows. Let v 1 denote the lower left vertex of A. We choose ff 2 <ref> [0; 1] </ref> uniformly at random, and perform the following random walk for k time steps starting from v 1 : (i) With probability 1 ff, move one step to the right. 161 (ii) With probability ff, move one step up and then one step to the right.
Reference: [2] <author> A. Aggarwal, M. Klawe, D. Lichtenstein, N. Linial, A. Wigderson, </author> <title> "Multi-layer grid embed-dings," </title> <booktitle> Proc. 26th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1985. </year>
Reference-contexts: We also develop algorithms for constructing node-disjoint paths on the two-dimensional mesh (Chapter 9); the performance guarantee of our algorithm essentially settles (to within a logarithmic factor) an open question of Aggarwal, Klawe, Lichtenstein, Linial, and Wigderson <ref> [2] </ref> that was raised in the context of VLSI layout. A central theme in this work is the connection between the unsplittable flow problem and the closely related fractional multicommodity flow problem. <p> Specifically, we will show that every permutation on the nfin mesh contains a set of size ( n log n ) that is realizable by node-disjoint paths. This essentially (to within this logarithmic factor) closes a gap left open by Aggarwal, Klawe, Lichtenstein, Linial, and Wigderson <ref> [2, 3] </ref>. We also develop extensions of this algorithm for the case of "sparse" sets of terminal pairs on the mesh. <p> O (n 1+" ) rounds, for every " &gt; 0? Again, by way of contrast, these questions are straightforward to resolve in the affirmative when one only requires edge-disjoint paths. 154 These latter questions turn out to be closely related to open problems of Aggarwal, Klawe, Lichtenstein, Linial, and Wigderson <ref> [2] </ref> in the setting of multi-layer VLSI layout. In multi-layer VLSI layouts, typically a pin (a node, in our terminology) goes through several layers at the same location, and the routing among pins at each layer is planar. <p> Consequently, it is practically useful to route as many connections on a single layer as possible (in order to reduce the vias); for more details see <ref> [2, 27, 96] </ref>. These constraints thus result directly in problems involving ff (T ) and (T ), with layers now playing the role of "rounds." One typically reduces the number of layers by introducing spacing between the terminals. <p> These constraints thus result directly in problems involving ff (T ) and (T ), with layers now playing the role of "rounds." One typically reduces the number of layers by introducing spacing between the terminals. In the model of <ref> [2, 27] </ref>, for a parameter d, consider a dn fi dn mesh G d , with an n fi n grid of terminals at a uniform spacing of d. <p> The goal in this model is to find the tightest trade-off possible between the spacing d and the number of layers required in the worst case. Cutler and Shiloach [27] showed that spacing d = O (n 2 ) suffices to route all pairs in a single layer; and <ref> [2] </ref> showed that this value of d was tight up to constant factors. In terms of a general trade-off between d and the minimum number of layers required, the techniques of [27, 2] are only sufficient to show that, for spacing d, O ( d ) layers are sufficient. <p> In terms of a general trade-off between d and the minimum number of layers required, the techniques of <ref> [27, 2] </ref> are only sufficient to show that, for spacing d, O ( d ) layers are sufficient. <p> This strengthens the bounds of <ref> [27, 2] </ref> on the number of layers required for routing a permutation. Within the context of VLSI, where the number of layers is typically a fixed small number, the "dual" maximization versions of these theorems may in fact be of greater interest. <p> In Section 9.3, we consider the basic problem of a permutation on the mesh, and prove Theorem 9.1.1. In Section 9.4, we give our algorithm for routing with inter-terminal spacing in the model of <ref> [27, 2] </ref>. Finally, in Section 9.5, we discuss algorithms for routing with only a constant number of bends per path. Lemma 9.2.1 Let x 1 ; : : : ; x d be positive integers for which P P i = b. Then d a 2 b 1 . <p> The crucial point is that there are only d edges of H 0 with both ends in a given slice, and so using the technique of <ref> [2, 27] </ref>, we can route one terminal pair for each of these edges in a single round.
Reference: [3] <author> A. Aggarwal, M. Klawe, D. Lichtenstein, N. Linial, A. Wigderson, </author> <title> "A lower bound on the area of permutation layouts," </title> <journal> Algorithmica, </journal> <volume> 6(1991), </volume> <pages> pp. 241-255. </pages>
Reference-contexts: Specifically, we will show that every permutation on the nfin mesh contains a set of size ( n log n ) that is realizable by node-disjoint paths. This essentially (to within this logarithmic factor) closes a gap left open by Aggarwal, Klawe, Lichtenstein, Linial, and Wigderson <ref> [2, 3] </ref>. We also develop extensions of this algorithm for the case of "sparse" sets of terminal pairs on the mesh.
Reference: [4] <author> A. Aggarwal, M. Klawe, P. Shor, </author> <title> "Multi-layer grid embeddings for VLSI," </title> <journal> Algorithmica, </journal> <volume> 6(1991), </volume> <pages> pp. 129-151. </pages>
Reference: [5] <author> A. Aggarwal, J. Kleinberg, D. Williamson, </author> <title> "Node-Disjoint Paths on the Mesh, and a New Trade-Off in VLSI Layout," </title> <booktitle> Proc. 28th ACM Symp. on Theory of Computing, </booktitle> <year> 1996. </year>
Reference-contexts: We also develop extensions of this algorithm for the case of "sparse" sets of terminal pairs on the mesh. The material in this chapter is based on joint work with Alok Aggarwal and David Williamson <ref> [5] </ref>. portions of it. 2 5 3 4 1.3 Some General Notation Much of the notation that we require will be developed as it is needed; here we introduce some basic definitions that will be used throughout.
Reference: [6] <author> N. Alon, P.D. Seymour, R. Thomas, </author> <title> "A separator theorem for non-planar graphs," </title> <journal> J. American Math. Soc., </journal> <volume> 3(1990), </volume> <pages> pp. 801-809. </pages>
Reference-contexts: ff-expander if, for a constant ff &gt; 0, every set X V of cardinality at most 1 2 n satisfies the following expansion condition: jffi (X)j ffjXj: (2.2) Expander graphs must be highly non-planar; in particular, any class of graphs embeddable on a fixed surface cannot contain arbitrarily large expanders <ref> [47, 6] </ref>. All the expanders we consider here will have bounded maximum degree . At times below we will use the term "sufficiently strong expanders"; we intend here to avoid lengthy technical details, and essentially mean expander graphs with an implicit lower bound on the constant ff.
Reference: [7] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, M. Szegedy, </author> <title> "Proof verification and the hardness of approximation problems," </title> <booktitle> Proc. 33rd IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: Such strong lower bounds are known for other basic optimization problems such as finding a maximum independent set in an arbitrary graph (see e.g. <ref> [7] </ref>). However, all that is currently known for the maximum disjoint paths problem is that it is MAX-SNP-hard [44]; hence by the well-known result of Arora et al. [7], there is a constant c &gt; 1 such that there is no polynomial-time c-approximation for the mdp unless P = NP. <p> lower bounds are known for other basic optimization problems such as finding a maximum independent set in an arbitrary graph (see e.g. <ref> [7] </ref>). However, all that is currently known for the maximum disjoint paths problem is that it is MAX-SNP-hard [44]; hence by the well-known result of Arora et al. [7], there is a constant c &gt; 1 such that there is no polynomial-time c-approximation for the mdp unless P = NP.
Reference: [8] <author> J. Aspnes, Y. Azar, A. Fiat, S. Plotkin and O. Waarts, </author> <title> "On-line load Balancing with applications to machine scheduling and virtual circuit routing" Proc. </title> <booktitle> 25th ACM Symp. on Theory of Computing, </booktitle> <year> 1993. </year> <pages> pp. 623-631. 179 </pages>
Reference-contexts: It is interesting to note, though it not relevant to the material here, that good on-line approximations have recently been developed by Aspnes, Azar, Fiat, Plotkin, and Waarts <ref> [8] </ref>. Theorem 8.1.2 (Aspnes et al.) There is an on-line O (log n)-approximation to -(T ) in any n-node graph. Thus, the principal question left open by the Raghavan-Thompson algorithm is the following.
Reference: [9] <author> Y. Aumann, Y. Rabani, </author> <title> "Improved bounds for all-optical routing," </title> <booktitle> Proc. 6th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1995, </year> <pages> pp. 567-576. </pages>
Reference-contexts: For permutations on expanders, we show that the bga is in fact an O (log n)-approximation. This improves on the bound of O (log 2 n) that follows from the techniques of Aumann-Rabani <ref> [9] </ref> and Raghavan-Upfal [95]; these papers consider the routing of permutations on expanders in the off-line and randomized on-line settings respectively. The latter part of this chapter is based on joint work with Ronitt Rubinfeld [62]. Approximations on the Two-Dimensional Mesh. <p> This improves on a bound 21 of Aumann and Rabani <ref> [9] </ref>. Approximations on a Generalization of the Mesh. Much of the motivation for studying the mesh in the context of communication networks stems from the fact that it is a bounded-degree planar graph typical of many of the types of networks that arise in practice. <p> Essentially the only other (off-line) approximation algorithms for the mdp are an O (log n)- approximation for the two-dimensional mesh, obtained independently of this work by Aumann and Rabani <ref> [9] </ref>, and the approximations for expander graphs discussed in Section 2.8. These above results concern the mdp, and not the more general unsplittable flow problem. <p> Theorem 2.8.3 (Leighton-Rao) Let G be a bounded-degree, n-node ff-expander. Then any partial permutation in G can be routed with congestion O (log n) using paths of length O (log n). Using this result, Aumann and Rabani observed the following <ref> [9] </ref>. Say that we route a partial permutation in such a graph G, and then build a conflict graph K on the set of paths used in the routing. <p> Secondly, the approximation ratio we prove is smaller than the O (log 2 n) ratio one obtains from the techniques developed by Aumann-Rabani <ref> [9] </ref> and Raghavan-Upfal [95] for the problem of routing in rounds. (These papers considered the deterministic off-line and randomized on-line settings respectively.) This naturally raises the question of whether the techniques developed here, when incorporated into an algorithm that did not have to contend with the on-line constraint, could lead to <p> This tells us that alternative techniques must be developed for dealing with such graphs. Previous work in this direction was undertaken by Awerbuch, Gawlick, Leighton, and Rabani [12], and by Aumann and Rabani <ref> [9] </ref>. The first of these papers gives an on-line O (log n log log n)-approximation for the mdp on the two-dimensional mesh; the second of these gives an off-line O (log n)-approximation. In this chapter, we obtain a constant-factor approximation for the unsplittable flow problem on the uniform-capacity two-dimensional mesh. <p> This matches a lower bound of Awerbuch et al. [12], showing that no on-line algorithm for the mdp on the two-dimensional mesh can be better than an (log n)-approximation. The algorithms developed have the property, in common with the previous algorithms for the mesh <ref> [12, 9] </ref>, that they are quite specific to the fixed row/column structure of the mesh. Our basic method, however, can be generalized to a broader class of graphs; in Chapter 7, we 93 obtain a constant-factor approximation for the ufp in a class of locally planar, Eulerian graphs. <p> Having said this, it is worth noting two additional points. First, the previous best approximation bounds | both off-line and on-line | for the two-dimensional mesh <ref> [12, 9] </ref> involve similarly large constants inside the O () notation. Moreover, we feel that many of the ideas and components used in the algorithms here may well be of use in suggesting more practical heuristics. <p> Thus, we are addressing the following question: what is the minimum size of a partition of T into realizable sets? We use (T ) to denote this minimum. The quantity (T ) also arises in the analysis of routing algorithms for all-optical networks <ref> [1, 95, 9] </ref>. Here, one is given a graph G and set of terminal pairs T (with all demands equal to 1); for each pair (s i ; t i ) 2 T one must choose a path in G and a wavelength to use for routing the 112 path. <p> Clearly the minimum number of wavelengths possible is precisely (T ). Within the context of optical routing | so that all demands are 1 | approximations for (T ) have been given by Raghavan and Upfal [95] and Aumann and Rabani <ref> [9] </ref> for restricted types of graphs. Raghavan and Upfal provide a 3 2 -approximation for (T ) in trees, and a 2-approximation in cycles. They also show, using the methods discussed in Section 2.8, that (T ) = O (log n) for every permutation on a bounded-degree expander. <p> This reduction method was applied by Aumann and Rabani <ref> [9] </ref> to derive their O (log 2 n)-approximation for (T ) on the mesh from an O (log n)-approximation for ff (T ) on the mesh. <p> We remarked at the beginning of the previous chapter that the approximation algorithms given there rely crucially, in places, on the precise row/column structure of the two-dimensional mesh. This is true for previous approximation algorithms as well <ref> [12, 9] </ref>. Our goal in this chapter is to extend our algorithms to a more general class of graphs, defined below. There are a number of motivations for generalizing the algorithms in this way.
Reference: [10] <author> B. Awerbuch, Y. Azar, S. Plotkin, </author> <title> "Throughput-competitive online routing," </title> <booktitle> Proc. 34th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1993, </year> <pages> pp. 32-40. </pages>
Reference-contexts: Here we provide a constant-factor approximation for the general case of this problem. We also investigate what can be said about the case in which fl = max i;e i =c e is small, as this is relevant to situations such as those covered by <ref> [94, 93, 10] </ref>, when every connection consumes only a small fraction of the bandwidth on a link. We provide an approximation algorithm with a performance guarantee of 1 + O ( p fl ) | the crucial point being that this converges to 1 as fl becomes smaller and smaller. <p> The fact that this performance guarantee can be achieved by an algorithm that is both on-line and deterministic presents a somewhat striking contrast with lower bounds due to Bartal et al. [15] and Awerbuch 20 et al. <ref> [10] </ref>, which apply to classes of graphs other than expanders. For permutations on expanders, we show that the bga is in fact an O (log n)-approximation. <p> This settles an open question of Awerbuch, Gawlick, Leighton, and Rabani [12]. The underlying technique for both these algorithms is, roughly, the following. We impose a high-capacity "simulated network" on the mesh; the paths are then constructed in two stages: (i) using an algorithm for the high-capacity ufp (e.g. <ref> [94, 93, 10] </ref>), we choose "global routes" in the simulated networks; (ii) these global routes are then converted into paths in the mesh itself. <p> Thus, the high-capacity assumption played a significant role here; approximation techniques for the ufp with small capacities cannot work so directly from the fractional solution. Recently, Awerbuch, Azar, and Plotkin <ref> [10] </ref> gave an on-line O (log n)-approximation for the high-capacity ufp in general graphs; see Section 2.7. 41 2.6 Approximations for the MDP As noted above, approximation results are much more limited for the mdp, and for the ufp when one drops the "high-capacity" assumption. <p> We note that there are other ways of modeling randomized on-line algorithms, and a number of subtle issues arise [16]; however, we will not get into these here. As mentioned in Section 2.5, Awerbuch, Azar, and Plotkin <ref> [10] </ref> have given a deterministic O (log n)-approximation for the high-capacity ufp in general graphs. They also prove that (log n) is a lower bound for the performance ratio of any deterministic on-line algorithm for this problem. <p> For the mdp, on the other hand, a number of fairly straightforward lower bounds show that no deterministic on-line algorithm can achieve a polylogarithmic performance ratio in trees or meshes <ref> [10, 17] </ref>. Thus, the on-line algorithms developed here have essentially all been randomized. <p> The general fractional multicommodity flow problem in directed graphs can still be formulated as a linear program of polynomial size, and hence solved in polynomial time. It follows that the high-capacity ufp approximation still works in the directed case. In fact, the on-line algorithm due to Awerbuch et al. <ref> [10] </ref> also works in the directed case. Essentially none of the other results of the previous sections hold for the directed case. A limited number of results of the flavor of those in Section 2.2 have been proved; see for example [29, 38, 110, 106]. <p> If so, route (s i ; t i ) on a shortest s i ti path P i . Delete P i from G and iterate. In addition to its simplicity, the greedy algorithm is both on-line and deterministic. As such, lower bounds of <ref> [10, 17] </ref> imply a fortiori that it cannot achieve a good performance ratio on graphs such as trees and two-dimensional meshes. 85 In this chapter, we consider a slight variant of the greedy algorithm, the bounded greedy algorithm (bga). <p> If so, route (s i ; t i ) on such a path P i . Delete P i from G and iterate. While the bga suffers from the same bad behavior suggested by the lower bounds of <ref> [10, 17] </ref>, its performance appears to be somewhat easier to analyze in a number of cases than that of the (pure) greedy algorithm. Indeed, developing methods for analyzing the pure greedy algorithm is an interesting open question. <p> These will serve as the nodes of N . We now label some pairs of subsquares as "neighbors" and connect them with (log n) parallel edges; these are the high-capacity edges of N . On this network N we run the algorithm of Awerbuch, Azar, and Plotkin <ref> [10] </ref> in the on-line case, and the algorithm of Raghavan and Thompson [94] in the off-line case. The algorithms running in N will return routes consisting of a sequence of neighboring subsquares. To convert such a route into a path in G, we construct disjoint paths between neighboring subsquares. <p> We are now ready to describe and analyze the routing algorithms themselves. 6.2 The On-Line Algorithm For the on-line algorithm, as suggested at the beginning of this chapter, we will use a variant of the high-capacity algorithm of Awerbuch, Azar, and Plotkin <ref> [10] </ref> to determine "global routes" in the simulated network N . However, deciding whether the terminals selected by this high-capacity algorithm can be routed out of the clusters in which they originate must be made by separate on-line algorithms, one for each cluster. <p> hence that w (Y ) i X w (X " S i ) c fl d w (X): (6.2) 6.2.2 The AAP Algorithm If H is a graph with n nodes in which each edge has capacity at least log 2n, the on-line ufp algorithm of Awerbuch, Azar, and Plotkin <ref> [10] </ref> achieves an approximation ratio of 2 log 4n for arbitrary sets of terminal pairs. <p> Suppose there are a total of k requests. Let A denote the set of requests routed by the AAP algorithm. Then we show 2 1+1=" log j2A X c k+1 As in the proof in <ref> [10] </ref> we show this by induction on the number of admitted requests, via proving that if the algorithm admits the j th request, we have X c j+1 e 2 1+1=" ! j log : So consider edge e, on the path used by the AAP algorithm for connection j. <p> A lower bound of <ref> [10] </ref> implies that the factor of 2 1=" is unavoidable for deterministic on-line algorithms. 6.2.3 Routing Long Connections Say that a terminal pair (s i ; t i ) 2 T is short if d (s i ; t i ) &lt; 16fl log n, and long otherwise.
Reference: [11] <author> B. Awerbuch, Y. Bartal, A. Fiat, A. Rosen, </author> <title> "Competitive non-preemptive call control," </title> <booktitle> Proc. 5th ACM-SIAM Symp. on Discrete Algorithms. </booktitle>
Reference-contexts: Thus, the on-line algorithms developed here have essentially all been randomized. An O (log n)-approximation for the case of trees was obtained by Awerbuch, Bartal et al. <ref> [11] </ref>; this approximation ratio was improved to O (log d) for trees of diameter d by Awerbuch, Gawlick, Leighton, and Rabani [12]. Awerbuch, Gawlick, et al. [12] also obtained an online O (log n log log n)-approximation for the two-dimensional mesh.
Reference: [12] <author> B. Awerbuch, R. Gawlick, F.T. Leighton, Y. Rabani, </author> <title> "On-line admission control and circuit routing for high performance computing and communication," </title> <booktitle> Proc. 35th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1994, </year> <pages> pp. 412-423. </pages>
Reference-contexts: This settles open questions of Karp, Leighton, Rivest, Thompson, Vazirani, Vazirani [57], and of Awerbuch, Gawlick, Leighton, Rabani <ref> [12] </ref> respectively. We also develop algorithms for constructing node-disjoint paths on the two-dimensional mesh (Chapter 9); the performance guarantee of our algorithm essentially settles (to within a logarithmic factor) an open question of Aggarwal, Klawe, Lichtenstein, Linial, and Wigderson [2] that was raised in the context of VLSI layout. <p> It is one of the most common parallel architectures; and many large-scale networks for high-speed communication are configured as mesh-like, nearly planar graphs <ref> [12, 22, 90, 66, 81, 117] </ref>. Finally, we note that the mdp remains NP-complete when the underlying graph is restricted to be the mesh [65]. We provide a constant-factor approximation for the ufp on the (uniform-capacity) two-dimensional mesh. <p> Using the same underlying technique, we obtain an on-line O (log n)-approximation algorithm, which is optimal for on-line algorithms on the mesh. This settles an open question of Awerbuch, Gawlick, Leighton, and Rabani <ref> [12] </ref>. The underlying technique for both these algorithms is, roughly, the following. <p> Thus, the on-line algorithms developed here have essentially all been randomized. An O (log n)-approximation for the case of trees was obtained by Awerbuch, Bartal et al. [11]; this approximation ratio was improved to O (log d) for trees of diameter d by Awerbuch, Gawlick, Leighton, and Rabani <ref> [12] </ref>. Awerbuch, Gawlick, et al. [12] also obtained an online O (log n log log n)-approximation for the two-dimensional mesh. Finally, the technique of 43 Raghavan and Upfal [95] discussed in the following section provides an O (log 2 n)-approximation for bounded-degree expander graphs. <p> An O (log n)-approximation for the case of trees was obtained by Awerbuch, Bartal et al. [11]; this approximation ratio was improved to O (log d) for trees of diameter d by Awerbuch, Gawlick, Leighton, and Rabani <ref> [12] </ref>. Awerbuch, Gawlick, et al. [12] also obtained an online O (log n log log n)-approximation for the two-dimensional mesh. Finally, the technique of 43 Raghavan and Upfal [95] discussed in the following section provides an O (log 2 n)-approximation for bounded-degree expander graphs. <p> This tells us that alternative techniques must be developed for dealing with such graphs. Previous work in this direction was undertaken by Awerbuch, Gawlick, Leighton, and Rabani <ref> [12] </ref>, and by Aumann and Rabani [9]. The first of these papers gives an on-line O (log n log log n)-approximation for the mdp on the two-dimensional mesh; the second of these gives an off-line O (log n)-approximation. <p> We also use the same techniques to provide an on-line O (log n)-approximation algorithm. This matches a lower bound of Awerbuch et al. <ref> [12] </ref>, showing that no on-line algorithm for the mdp on the two-dimensional mesh can be better than an (log n)-approximation. The algorithms developed have the property, in common with the previous algorithms for the mesh [12, 9], that they are quite specific to the fixed row/column structure of the mesh. <p> This matches a lower bound of Awerbuch et al. [12], showing that no on-line algorithm for the mdp on the two-dimensional mesh can be better than an (log n)-approximation. The algorithms developed have the property, in common with the previous algorithms for the mesh <ref> [12, 9] </ref>, that they are quite specific to the fixed row/column structure of the mesh. Our basic method, however, can be generalized to a broader class of graphs; in Chapter 7, we 93 obtain a constant-factor approximation for the ufp in a class of locally planar, Eulerian graphs. <p> Having said this, it is worth noting two additional points. First, the previous best approximation bounds | both off-line and on-line | for the two-dimensional mesh <ref> [12, 9] </ref> involve similarly large constants inside the O () notation. Moreover, we feel that many of the ideas and components used in the algorithms here may well be of use in suggesting more practical heuristics. <p> We remarked at the beginning of the previous chapter that the approximation algorithms given there rely crucially, in places, on the precise row/column structure of the two-dimensional mesh. This is true for previous approximation algorithms as well <ref> [12, 9] </ref>. Our goal in this chapter is to extend our algorithms to a more general class of graphs, defined below. There are a number of motivations for generalizing the algorithms in this way.
Reference: [13] <author> B. Awerbuch, F. T. Leighton, </author> <title> "A simple local-control approximation algorithm for mul-ticommodity flow," </title> <booktitle> Proc. 34th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1993, </year> <pages> pp. 459-469. </pages>
Reference-contexts: Recently, faster and more combinatorial algorithms have been developed to provide (1 + ")-approximations for this problem (see e.g. <ref> [88, 68, 13] </ref>). Since maximum fractional flows can be computed in polynomial time, we will be making use of them in designing approximation algorithms.
Reference: [14] <author> B. Awerbuch, F. T. Leighton, </author> <title> "Improved approximations for the multi-commodity flow problem and local competitive routing in networks," </title> <booktitle> Proc. 26th ACM Symp. on Theory of Computing, </booktitle> <year> 1994, </year> <pages> pp. 489-496. </pages>
Reference: [15] <author> Y. Bartal, A. Fiat, S. Leonardi, </author> <title> "Lower bounds for on-line graph problems with application to on-line circuit and optical routing," </title> <booktitle> Proc. 28th ACM Symp. on Theory of Computing, </booktitle> <year> 1996. </year>
Reference-contexts: The fact that this performance guarantee can be achieved by an algorithm that is both on-line and deterministic presents a somewhat striking contrast with lower bounds due to Bartal et al. <ref> [15] </ref> and Awerbuch 20 et al. [10], which apply to classes of graphs other than expanders. For permutations on expanders, we show that the bga is in fact an O (log n)-approximation. <p> Now it is natural to ask whether there could be a randomized on-line algorithm with a performance ratio of O (log O (1) n) for all graphs, and this was recently answered in the negative by Bartal, Fiat, and Leonardi <ref> [15] </ref>. They showed that there is a family of graphs fG n g and an " &gt; 0 such that no on-line algorithm can be better than an O (n " )-approximation on G n .
Reference: [16] <author> S. Ben-David, A. Borodin, R. Karp, G. Tardos, A. Wigderson, </author> <title> "On the power of randomization in on-line algorithms," </title> <booktitle> Proc. 22nd ACM Symposium on Theory of Computing, </booktitle> <year> 1990, </year> <pages> pp. 379-386. </pages>
Reference-contexts: We note that there are other ways of modeling randomized on-line algorithms, and a number of subtle issues arise <ref> [16] </ref>; however, we will not get into these here. As mentioned in Section 2.5, Awerbuch, Azar, and Plotkin [10] have given a deterministic O (log n)-approximation for the high-capacity ufp in general graphs.
Reference: [17] <author> A. Blum, A. Fiat, H. Karloff, Y. Rabani, </author> <type> manuscript. </type>
Reference-contexts: For the mdp, on the other hand, a number of fairly straightforward lower bounds show that no deterministic on-line algorithm can achieve a polylogarithmic performance ratio in trees or meshes <ref> [10, 17] </ref>. Thus, the on-line algorithms developed here have essentially all been randomized. <p> If so, route (s i ; t i ) on a shortest s i ti path P i . Delete P i from G and iterate. In addition to its simplicity, the greedy algorithm is both on-line and deterministic. As such, lower bounds of <ref> [10, 17] </ref> imply a fortiori that it cannot achieve a good performance ratio on graphs such as trees and two-dimensional meshes. 85 In this chapter, we consider a slight variant of the greedy algorithm, the bounded greedy algorithm (bga). <p> If so, route (s i ; t i ) on such a path P i . Delete P i from G and iterate. While the bga suffers from the same bad behavior suggested by the lower bounds of <ref> [10, 17] </ref>, its performance appears to be somewhat easier to analyze in a number of cases than that of the (pure) greedy algorithm. Indeed, developing methods for analyzing the pure greedy algorithm is an interesting open question. <p> Now, the approximation ratio implied by this general result is quite large | it has the form O (n " ) for a constant " &gt; 0. A lower bound due to Blum, Karloff, Fiat, and Rabani <ref> [17] </ref> implies that no qualitatively better bound is possible for the greedy algorithm on a graph such as the two-dimensional mesh.
Reference: [18] <author> B. Bollobas, </author> <title> Extremal Graph Theory, </title> <publisher> Academic Press, </publisher> <year> 1978. </year>
Reference-contexts: Since the paths in O 0 are edge-disjoint, at most of the pairs routed by O 0 contain any fixed vertex v 2 G. Thus, by Vizing's Theorem (cf. <ref> [18] </ref>), the pairs routed by O 0 can be partitioned into at most + 1 partial permutations; let O 0 1 O 0 denote the set of paths corresponding to the largest of these partial permutations.
Reference: [19] <author> A. Broder, A. Frieze, S. Suen, E. Upfal, </author> <title> "Optimal construction of edge-disjoint paths in random graphs," </title> <booktitle> Proc. 5th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1994, </year> <pages> pp. 603-612. </pages>
Reference: [20] <author> A. Broder, A. Frieze, E. Upfal, </author> <title> "Existence and construction of edge-disjoint paths on expander graphs," </title> <journal> SIAM J. Computing, </journal> <volume> 23(1994), </volume> <pages> pp. 976-989. 180 </pages>
Reference-contexts: The first result of this type was proved by Peleg and Upfal [86]; 44 their bound on the size of the allowable terminal set was considerably strengthened by Broder, Frieze, and Upfal <ref> [20] </ref>. In order to obtain paths that are edge-disjoint, both these papers require very strong expansion guarantees. However, for more moderate expanders, [20] also proves the following. Recall that by the congestion of a set of paths, we mean the maximum of number of paths containing any fixed edge. <p> this type was proved by Peleg and Upfal [86]; 44 their bound on the size of the allowable terminal set was considerably strengthened by Broder, Frieze, and Upfal <ref> [20] </ref>. In order to obtain paths that are edge-disjoint, both these papers require very strong expansion guarantees. However, for more moderate expanders, [20] also proves the following. Recall that by the congestion of a set of paths, we mean the maximum of number of paths containing any fixed edge. Theorem 2.8.1 (Broder-Frieze-Upfal) For every ff 1, there exists a constant such that the following holds. <p> Raghavan and Upfal [95] arrive at Theorems 2.8.3 and 2.8.4 via a completely different technique, more closely related to the methods of Broder, Frieze, and Upfal <ref> [20] </ref>. Given a permutation on a bounded-degree expander G, they produce a routing for it iteratively as follows. For terminal pair (s i ; t i ), a point x i 2 V is chosen at random from the stationary distribution of the random walk on G.
Reference: [21] <author> A. Broder, A. Frieze, E. Upfal, </author> <type> manuscript. </type>
Reference-contexts: Recent unpublished work of Broder, Frieze, and Upfal also addresses this trade-off between the size of the terminal set and the allowed amount of congestion <ref> [21] </ref>. As a by-product of their earlier fundamental work on multicommodity flow, Leighton and Rao [69] established the following result. Theorem 2.8.3 (Leighton-Rao) Let G be a bounded-degree, n-node ff-expander.
Reference: [22] <author> Y.M. Chen, G. Sasaki, </author> <title> "Irregular torus networks: deadlock avoidance and throughput analysis," </title> <booktitle> Proc. INFOCOM, </booktitle> <year> 1993, </year> <pages> pp. 312-320. </pages>
Reference-contexts: It is one of the most common parallel architectures; and many large-scale networks for high-speed communication are configured as mesh-like, nearly planar graphs <ref> [12, 22, 90, 66, 81, 117] </ref>. Finally, we note that the mdp remains NP-complete when the underlying graph is restricted to be the mesh [65]. We provide a constant-factor approximation for the ufp on the (uniform-capacity) two-dimensional mesh.
Reference: [23] <author> H. Chernoff, </author> <title> "A measure of asymptotic efficiency for tests of a hypothesis based on the sum of observations, </title> <journal> Annals of Math. Stat., </journal> <volume> 23(1952), </volume> <pages> pp. 493-509. </pages>
Reference-contexts: To verify the first of these, we need the following result from [93]; it is a bound on the sum of independent random variables in the spirit of results of Chernoff <ref> [23] </ref> and Hoeffding [51].
Reference: [24] <author> V. Chvatal, </author> <title> "A greedy heuristic for the set covering problem," </title> <journal> Mathematics of Operations Research, </journal> <volume> 4(1979), </volume> <pages> pp. 233-235. </pages>
Reference-contexts: We also note that a straightforward application of the greedy set cover technique <ref> [24, 53, 77] </ref>, in conjunction with the constant-factor approximation for the mdp, allows us to obtain an O (log n) approximation for the minimum partition of T into rounds. This improves on a bound 21 of Aumann and Rabani [9]. Approximations on a Generalization of the Mesh. <p> The notion of partitioning T into realizable sets also arises in certain VLSI problems; we will encounter this in Chapter 9. Our approach is based on a direct application of the greedy set cover technique of (independently) Chvatal, Johnson, and Lovasz <ref> [24, 53, 77] </ref>; this allows one to take an approximation algorithm for the mdp and obtain an approximation for routing in rounds with a performance guarantee that is only larger by a logarithmic factor. <p> Let H m denote the m th harmonic number, defined by H m = P m 1 i . Given this definition we have the following result | it is simply the main result of <ref> [24, 53, 77] </ref>, for the case in which the maximization algorithm A only produces a set whose cardinality is approximately maximum.
Reference: [25] <author> R. Cole, A. Siegel, </author> <title> "River routing every which way but loose," </title> <booktitle> Proc. 25th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1984. </year>
Reference-contexts: Indeed, for the two-dimensional mesh, 157 efficient algorithms for this "homotopic routing" problem were given by Cole and Siegel <ref> [25] </ref> and Leiserson and Maley [71] for the mesh; Schrijver's work can be viewed as a generalization of this work to arbitrary graphs on arbitrary surfaces.
Reference: [26] <author> S. Cosares, I. Saniee, </author> <title> "An optimization problem related to balancing loads on SONET rings," </title> <journal> Telecommunications Systems, </journal> <volume> 3(1994), </volume> <pages> pp. 165-181. </pages>
Reference-contexts: problem of minimizing congestion, with arbitrary unsplittable demands, when the underlying graph G is a cycle. (So the problem is, for each demand, to decide whether to send it clockwise or counter-clockwise around the cycle.) This question was raised in the context of SONET ring routing by Cosares and Saniee <ref> [26] </ref>. Schrijver, Seymour, and Winkler showed that on the cycle, one can always find (in polynomial time) an unsplittable routing for the demands such that the amount of flow crossing any edge is at most 3 2 fl units more than is required for the fractional optimum [108]. <p> But this is far from the case for the general single-source ufp. In particular, the following result is immediate; it is similar to one of the examples used in Chapter 1. (Very similar hardness results can also be found in <ref> [26, 108] </ref>.) We say that a problem is strongly NP-complete if it remains NP-complete when all numbers in the input are written in unary; i.e., it is NP-complete even when the input numbers are polynomially bounded. 49 Proposition 3.0.1 The single-source ufp is NP-complete, even for a graph G 0 consisting
Reference: [27] <author> M. Cutler, Y. Shiloach, </author> <title> "Permutation layout," </title> <journal> Networks, </journal> <volume> 8(1978), </volume> <pages> pp. 253-278. </pages>
Reference-contexts: Consequently, it is practically useful to route as many connections on a single layer as possible (in order to reduce the vias); for more details see <ref> [2, 27, 96] </ref>. These constraints thus result directly in problems involving ff (T ) and (T ), with layers now playing the role of "rounds." One typically reduces the number of layers by introducing spacing between the terminals. <p> These constraints thus result directly in problems involving ff (T ) and (T ), with layers now playing the role of "rounds." One typically reduces the number of layers by introducing spacing between the terminals. In the model of <ref> [2, 27] </ref>, for a parameter d, consider a dn fi dn mesh G d , with an n fi n grid of terminals at a uniform spacing of d. <p> The goal in this model is to find the tightest trade-off possible between the spacing d and the number of layers required in the worst case. Cutler and Shiloach <ref> [27] </ref> showed that spacing d = O (n 2 ) suffices to route all pairs in a single layer; and [2] showed that this value of d was tight up to constant factors. <p> In terms of a general trade-off between d and the minimum number of layers required, the techniques of <ref> [27, 2] </ref> are only sufficient to show that, for spacing d, O ( d ) layers are sufficient. <p> However, guided by (1 0 ), a reasonable question was the following. (2 0 ) With spacing d, are O ( d ) layers sufficient to route any permutation on the mesh, for every " &gt; 0? This contains the result of <ref> [27] </ref> in the case d = fi (n 2 ) and question (1 0 ) in the case d = 1. The main results of this chapter provide affirmative answers to questions (1), (1 0 ), and (2 0 ). <p> This strengthens the bounds of <ref> [27, 2] </ref> on the number of layers required for routing a permutation. Within the context of VLSI, where the number of layers is typically a fixed small number, the "dual" maximization versions of these theorems may in fact be of greater interest. <p> Namely, these are the first algorithms that can provably extract from any permutation on the mesh a routable set of terminal pairs whose size is within polylogarithmic factors of the bisection bound. Moreover, the approach we develop is fundamentally different from that of Cutler and Shiloach <ref> [27] </ref>, which was essentially the only previous method applicable in this setting. We mentioned above that questions (1) and (1 0 ) are easy in the case of edge-disjoint paths; in fact, one can construct a set of paths meeting the bisection bound using only one bend in each path. <p> If there are p terminal pairs, we will show how to route p=(k log k) of them simultaneously; applying this process greedily gives the bound of Theorem 9.1.1. The approach of Cutler and Shiloach <ref> [27] </ref> requires, in order to route q terminals in a single round, that the inter-terminal spacing be at least q. Using this, one can therefore only be sure of routing a set of size p 1=3 , resulting in an overall bound of n 4=3 for (T ). <p> In Section 9.3, we consider the basic problem of a permutation on the mesh, and prove Theorem 9.1.1. In Section 9.4, we give our algorithm for routing with inter-terminal spacing in the model of <ref> [27, 2] </ref>. Finally, in Section 9.5, we discuss algorithms for routing with only a constant number of bends per path. Lemma 9.2.1 Let x 1 ; : : : ; x d be positive integers for which P P i = b. Then d a 2 b 1 . <p> The crucial point is that there are only d edges of H 0 with both ends in a given slice, and so using the technique of <ref> [2, 27] </ref>, we can route one terminal pair for each of these edges in a single round.
Reference: [28] <author> N. Dean, </author> <title> "Open problems," in Graph Structure Theory, </title> <editor> N. Robertson, P.D. Seymour, eds., </editor> <publisher> AMS Press, </publisher> <year> 1991. </year>
Reference-contexts: There are also some basic questions related to the "min-sum" objective function. We noted in Chapter 2 that work of Robertson and Seymour [102] provides a polynomial-time algorithm for deciding whether a set T of terminal pairs is realizable, for fixed jT j. Dean <ref> [28] </ref> and Galil and Yu [40] ask whether the following is also decidable in polynomial time, again for fixed jT j: can T be realized using paths of total length at most L, for some given value of L? Re-routing.
Reference: [29] <author> G. Ding, A. Schrijver, </author> <title> P.D. Seymour, "Disjoint paths in a planar graph | a general theorem," </title> <journal> SIAM J. Discrete Math, </journal> <volume> 5(1992), </volume> <pages> pp. 112-116. </pages>
Reference-contexts: Essentially none of the other results of the previous sections hold for the directed case. A limited number of results of the flavor of those in Section 2.2 have been proved; see for example <ref> [29, 38, 110, 106] </ref>. Similarly, nothing is known for directed graphs embedded on general surfaces that is as general as Schrijver's theorem 2.3.2. Thus it remains an interesting general problem to try identifying further special cases of the disjoint paths problem that are solvable in polynomial time in directed graphs.
Reference: [30] <author> E.A. Dinic, </author> <title> "Algorithm for solution of a problem of maximum flow in networks with power estimation," </title> <journal> Soviet Math. Dokl. </journal> <volume> 11(1970), </volume> <pages> pp. 1277-1280. </pages>
Reference-contexts: The original proof of Ford and Fulkerson yielded a polynomial time algorithm for deciding realizability for the case in which and all c e are bounded integers. A polynomial-time algorithm for the general case was first obtained independently by Dinic <ref> [30] </ref> and Edmonds and Karp [32]. The efficiency of maximum flow algorithms has become a major issue in algorithm design; see for example the survey of Goldberg et al. [48].
Reference: [31] <author> J. Edmonds, </author> <title> "Minimum partition of a matroid into independent subsets,", </title> <journal> J. Res. Nat. Bur. Standards B, </journal> <volume> 69(1965), </volume> <pages> pp. 67-72. </pages>
Reference-contexts: We will be primarily interested in the following covering problem: for a matroid M = (U; M), what is the minimum cardinality cover of U by members of M? This question is addressed by the following result of Edmonds <ref> [31] </ref>. Theorem 3.4.1 (Edmonds) There is a polynomial-time algorithm to find a minimum cardi-nality cover of the ground set of a matroid M = (U; M) by independent sets. Moreover, if this minimum is greater than j, then there is some X U for which j r (X) &lt; jXj.
Reference: [32] <author> J. Edmonds, R.M. Karp, </author> <title> "Theoretical improvements in algorithmic efficiency for network flow problems," </title> <journal> Journal of the ACM, </journal> <volume> 19(1972), </volume> <pages> pp. 248-264. </pages>
Reference-contexts: The original proof of Ford and Fulkerson yielded a polynomial time algorithm for deciding realizability for the case in which and all c e are bounded integers. A polynomial-time algorithm for the general case was first obtained independently by Dinic [30] and Edmonds and Karp <ref> [32] </ref>. The efficiency of maximum flow algorithms has become a major issue in algorithm design; see for example the survey of Goldberg et al. [48]. <p> This is NP-hard for k = 2 and variable L [73], and for L = 5 and variable k [52]. Related to this is the well-known minimum-cost flow problem, which is solvable in polynomial time (see <ref> [32, 115, 48] </ref>) For our purposes, we can view minimum-cost flow as addressing the following problem: for a given k, find k edge-disjoint s-t paths in G whose total length is minimum. Thus, a fundamental open problem concerns the following "max-min" objective function.
Reference: [33] <author> P. Erdos, G. Szekeres, </author> <title> "A combinatorial problem in geometry," </title> <journal> Compositio Math., </journal> <volume> 2(1935), </volume> <pages> pp. 463-470. </pages>
Reference-contexts: Let M be a matching of maximum size in H, and order its edges so that their endpoints in U have increasing indices. Consider the resulting sequence of indices in V . By a lemma due to Erdos and Szekeres <ref> [33] </ref>, this sequence must have either an increasing sequence or a decreasing sequence of length at least p p (H). The edges corresponding to this sequence constitute a monotone matching. 160 A B Lemma 9.2.6 H has an increasing monotone matching of size at least e=2n. Proof.
Reference: [34] <author> L.R. Ford, D.R. Fulkerson, </author> <title> "Maximal flow through a network," </title> <journal> Canadian J. Math, </journal> <volume> 8(1956), </volume> <pages> pp. 399-404. </pages>
Reference-contexts: This is the single-source ufp, in which all s i are the same. When all i and c e are equal, this problem can be reduced to the case of edge-disjoint s-t paths, the subject of Menger's theorem [82] and the max-flow min-cut theorem <ref> [34, 35] </ref>. But when we simply remove this condition, the single-source ufp becomes NP-complete (as indicated above, it trivially contains the knapsack problem); and in fact previous techniques are capable of providing an approximation algorithm only when every c e is at least (log jEj) times every i . <p> Theorem 2.1.1 (Menger) There exist k edge-disjoint s-t paths in G if and only if there does not exist an s-t cut of value less than k. There are many proofs known for Menger's theorem; when Ford and Fulkerson proved their generalization, the max-flow min-cut theorem <ref> [34, 35] </ref> (see Section 2.4), they provided a polynomial-time algorithm for finding the maximum number of edge-disjoint s-t paths in a graph G. <p> The well-studied maximum s-t flow problem deals with fractional flow | it is simply the above problem in the case when all (s i ; t i ) pairs in T are the same. This is the case considered in the fundamental work of Ford and Fulkerson <ref> [34, 35] </ref>, who showed that in this setting the cut 36 condition is necessary and sufficient for fractional realizability.
Reference: [35] <author> L.R. Ford, D.R. Fulkerson, </author> <title> Flows in Networks, </title> <publisher> Princeton University Press, </publisher> <year> 1962. </year>
Reference-contexts: This is the single-source ufp, in which all s i are the same. When all i and c e are equal, this problem can be reduced to the case of edge-disjoint s-t paths, the subject of Menger's theorem [82] and the max-flow min-cut theorem <ref> [34, 35] </ref>. But when we simply remove this condition, the single-source ufp becomes NP-complete (as indicated above, it trivially contains the knapsack problem); and in fact previous techniques are capable of providing an approximation algorithm only when every c e is at least (log jEj) times every i . <p> Theorem 2.1.1 (Menger) There exist k edge-disjoint s-t paths in G if and only if there does not exist an s-t cut of value less than k. There are many proofs known for Menger's theorem; when Ford and Fulkerson proved their generalization, the max-flow min-cut theorem <ref> [34, 35] </ref> (see Section 2.4), they provided a polynomial-time algorithm for finding the maximum number of edge-disjoint s-t paths in a graph G. <p> The well-studied maximum s-t flow problem deals with fractional flow | it is simply the above problem in the case when all (s i ; t i ) pairs in T are the same. This is the case considered in the fundamental work of Ford and Fulkerson <ref> [34, 35] </ref>, who showed that in this setting the cut 36 condition is necessary and sufficient for fractional realizability.
Reference: [36] <author> S. Fortune, J. Hopcroft, J. Wyllie, </author> <title> "The direcetd subgraph homeomorphism problem," </title> <journal> Theoretical Computer Sci., </journal> <volume> 10(1980), </volume> <pages> pp. 111-121. </pages>
Reference-contexts: As one striking example, the problem of deciding whether (G; T ) is realizable, when G is directed and jT j = 2, was shown to be NP-complete by Fortune, Hopcroft, and Wyllie <ref> [36] </ref>. This is in contrast to the algorithmic results of [111, 113, 116, 102] discussed in Section 2.2. Indeed, the disjoint paths problem is much less well understood in general in the directed setting than it is in the undirected setting.
Reference: [37] <author> A. Frank, </author> <title> "Edge-disjoint paths in planar graphs," </title> <journal> J. Comb. Theory Ser. B, </journal> <volume> 39(1985), </volume> <pages> pp. 164-178. </pages>
Reference-contexts: Though it seems somewhat mysterious, the reader can appreciate its importance by considering again the brick wall graph of Figure 2-1; it satisfies all the hypotheses of the Okamura-Seymour theorem aside from the parity condition, and yet the disjoint paths do not exist. 29 A result due to Frank <ref> [37] </ref> allows us to weaken the parity condition a little. For a set X, let d (X) denote the set of terminal pairs with one end in X and the other in V n X. <p> Following the algorithm of Chapter 6, we now must build crossbar structures in the enclosures to replace the natural crossbars of the mesh. We build crossbars using Frank's extension (Theorem 2.2.4) of the Okamura-Seymour theorem <ref> [84, 37] </ref>. To be precise, Definition 7.3.2 If X V , we say a crossbar anchored in X is a set of edge-disjoint paths, each with at least one end in X, such that every pair of paths meets in at least one vertex. <p> Let U 00 B 8~ 2 r denote a simple set extension of B 8~r (v), as in Lemma 7.1.5. For a constant 0 , we can pick a set S of vertices on the outer facial cycle of U 0 spaced 0 apart, and use Frank's theorem <ref> [37] </ref> as in Lemma 7.3.3 to construct a set of edge-disjoint paths connecting "antipodal" pairs in S, such that all paths stay within U 00 n U 0 .
Reference: [38] <author> A. Frank, </author> <title> "On disjoint homotopic paths in the plane," in Polyhedral Combinatorics, </title> <editor> W. Cook, P.D. Seymour, eds., </editor> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science (vol. </booktitle> <volume> 1), </volume> <year> 1990, </year> <pages> pp. 163-170. </pages>
Reference-contexts: Essentially none of the other results of the previous sections hold for the directed case. A limited number of results of the flavor of those in Section 2.2 have been proved; see for example <ref> [29, 38, 110, 106] </ref>. Similarly, nothing is known for directed graphs embedded on general surfaces that is as general as Schrijver's theorem 2.3.2. Thus it remains an interesting general problem to try identifying further special cases of the disjoint paths problem that are solvable in polynomial time in directed graphs.
Reference: [39] <author> A. Frank, </author> <title> "Packing paths, cuts, and circuits | a survey," in Paths, Flows, </title> <editor> and VLSI-Layout, B. Korte, L. Lovasz, H.J. Promel, A. Schrijver, Eds., </editor> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 49-100. </pages>
Reference-contexts: Also, it is a simple matter to show Lemma 2.1.2 The cut condition holds if and only if it holds for all sets X for which both G [X] and G [V n X] are connected. (See e.g. <ref> [39] </ref>.) The cut condition is not sufficient for the solvability of the disjoint paths problem in general. For example, let us consider the brick wall graph of Figure 2-1. <p> There are a number of subsequent results on the solvability of the disjoint paths problem in cases when the underlying graph is planar and the terminals have some "nice" arrangement. In particular, see the papers of Okamura [85] and Schrijver [103], both of which are discussed in Frank's survey <ref> [39] </ref>. There is a further elegant theorem along these lines due to Seymour [112], which we state here although we will not have occasion to use it. Theorem 2.2.5 (Seymour) Let G be planar, with terminal pairs T , and suppose that G + is both planar and Eulerian.
Reference: [40] <author> Z. Galil, X. Yu, </author> <title> "Short length versions of Menger's theorem," </title> <booktitle> Proc. 27th ACM Symp. on Theory of Computing, </booktitle> <year> 1995. </year>
Reference-contexts: Thus we ask: is there a o (k)-approximation for this problem? Work of Lovasz, Neumann-Lara, and Plummer [78] and Galil and Yu <ref> [40] </ref> is related to these questions. There are also some basic questions related to the "min-sum" objective function. We noted in Chapter 2 that work of Robertson and Seymour [102] provides a polynomial-time algorithm for deciding whether a set T of terminal pairs is realizable, for fixed jT j. <p> There are also some basic questions related to the "min-sum" objective function. We noted in Chapter 2 that work of Robertson and Seymour [102] provides a polynomial-time algorithm for deciding whether a set T of terminal pairs is realizable, for fixed jT j. Dean [28] and Galil and Yu <ref> [40] </ref> ask whether the following is also decidable in polynomial time, again for fixed jT j: can T be realized using paths of total length at most L, for some given value of L? Re-routing.
Reference: [41] <author> J. Garay, I. Gopal, </author> <title> "Call preemption in communication networks," </title> <booktitle> Proc. INFOCOM, </booktitle> <year> 1992, </year> <pages> pp. 1043-1050. </pages>
Reference: [42] <author> J. Garay, I. Gopal, S. Kutten, Y. Mansour, M. Yung, </author> <title> "Efficient on-line call control algorithms," </title> <booktitle> Proc. 2nd Israel Conference on Theory of Computing and Systems, </booktitle> <year> 1993. </year>
Reference: [43] <author> M. Garey, D.S. Johnson, </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness, </title> <publisher> Freeman, </publisher> <year> 1979. </year>
Reference-contexts: This problem has a feasible solution if and only if the partition problem has a solution. To prove strong NP-completeness, we note that the following bin packing problem is strongly NP-complete <ref> [43] </ref>: given given a set S of positive integers a 1 ; : : : ; a n , and numbers B and D, decide whether there is a partition of S into at most B sets, each of which sums to at most D.
Reference: [44] <author> N. Garg, V. Vazirani, M. Yannakakis, </author> <title> "Primal-dual approximation algorithms for integral flow and multicut in trees, with applications to matching and set cover," </title> <booktitle> Proc. International Colloq. on Automata, Languages, and Programming, </booktitle> <year> 1993, </year> <pages> pp. 64-75. </pages>
Reference-contexts: Although the cut condition is necessary for fractional realizability, it is not in general sufficient. A fairly large amount of work has been done on showing the sufficiency of "approximate" cut conditions; we will discuss this further in Chapter 10, and also refer the reader to <ref> [69, 60, 44, 89, 74] </ref> for more details. The well-studied maximum s-t flow problem deals with fractional flow | it is simply the above problem in the case when all (s i ; t i ) pairs in T are the same. <p> There is a fractional flow of total value 1 2 n, while the maximum unsplittable flow has value 1, since disjoint paths cannot be found between any two pairs simultaneously. Thus, we have the following fact (noted in <ref> [44] </ref> and elsewhere). <p> Prior to this work, the only class of graphs for which a constant-factor approximation algorithm had been obtained was the class of capacitated trees, by Garg, Vazirani, and Yannakakis <ref> [44] </ref>. Of course, deciding the realizability of a set of terminals T is easy, since there is a unique path for every (s i ; t i ) pair. <p> Such strong lower bounds are known for other basic optimization problems such as finding a maximum independent set in an arbitrary graph (see e.g. [7]). However, all that is currently known for the maximum disjoint paths problem is that it is MAX-SNP-hard <ref> [44] </ref>; hence by the well-known result of Arora et al. [7], there is a constant c &gt; 1 such that there is no polynomial-time c-approximation for the mdp unless P = NP.
Reference: [45] <author> N. Garg, V. Vazirani, M. Yannakakis, </author> <title> "Approximate max-flow min-(multi)cut theorems and their applications," </title> <booktitle> Proc. 25th ACM Symp. on Theory of Computing, </booktitle> <year> 1993, </year> <pages> pp. 698-707. 182 </pages>
Reference: [46] <author> R. Gawlick, C. Kalmanek, K.G. Ramakrishnan, </author> <title> "On-line routing for permanent virtual circuits," </title> <booktitle> Proc. INFOCOM, </booktitle> <year> 1995, </year> <pages> pp. 278-288. </pages>
Reference: [47] <author> J. Gilbert, J. Hutchinson, R.E. Tarjan, </author> <title> "A separation theorem for graphs of bounded genus," </title> <journal> J. Algorithms, </journal> <volume> 5(1984), </volume> <pages> pp. 391-407. </pages>
Reference-contexts: ff-expander if, for a constant ff &gt; 0, every set X V of cardinality at most 1 2 n satisfies the following expansion condition: jffi (X)j ffjXj: (2.2) Expander graphs must be highly non-planar; in particular, any class of graphs embeddable on a fixed surface cannot contain arbitrarily large expanders <ref> [47, 6] </ref>. All the expanders we consider here will have bounded maximum degree . At times below we will use the term "sufficiently strong expanders"; we intend here to avoid lengthy technical details, and essentially mean expander graphs with an implicit lower bound on the constant ff.
Reference: [48] <author> A. Goldberg, E, Tardos, R.E. Tarjan, </author> <title> "Network flow algorithms," in Paths, Flows, </title> <editor> and VLSI-Layout, B. Korte, L. Lovasz, H.J. Promel, A. Schrijver, Eds., </editor> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 101-164. </pages>
Reference-contexts: A polynomial-time algorithm for the general case was first obtained independently by Dinic [30] and Edmonds and Karp [32]. The efficiency of maximum flow algorithms has become a major issue in algorithm design; see for example the survey of Goldberg et al. <ref> [48] </ref>. All these algorithms solve the more general maximization version of this problem, in which one wishes to ship the maximum amount of flow possible from s to t. <p> This is NP-hard for k = 2 and variable L [73], and for L = 5 and variable k [52]. Related to this is the well-known minimum-cost flow problem, which is solvable in polynomial time (see <ref> [32, 115, 48] </ref>) For our purposes, we can view minimum-cost flow as addressing the following problem: for a given k, find k edge-disjoint s-t paths in G whose total length is minimum. Thus, a fundamental open problem concerns the following "max-min" objective function.
Reference: [49] <author> M. Grotschel, L. Lovasz, A. Schrijver, </author> <title> Geometric Algorithms and Combinatorial Optimization, </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: The most direct way to see this is to verify that it can be written as a polynomial-size linear program, and thus solved optimally using a polynomial-time linear programming algorithm <ref> [58, 55, 49] </ref>. Recently, faster and more combinatorial algorithms have been developed to provide (1 + ")-approximations for this problem (see e.g. [88, 68, 13]). Since maximum fractional flows can be computed in polynomial time, we will be making use of them in designing approximation algorithms.
Reference: [50] <author> D. Hochbaum, D. Shmoys, </author> <title> "Using dual approximation algorithms for scheduling problems: theoretical and practical results," </title> <journal> Journal of the ACM, </journal> <volume> 34(1987), </volume> <pages> pp. 144-162. </pages>
Reference-contexts: In the case in which all S i are equal to M , this is just the classical minimum makespan problem, for which a (1 + ")-approximation can be found in polynomial time for any fixed " &gt; 0 <ref> [50] </ref>. But when the S i are arbitrary sets, Lenstra, Shmoys, and Tardos show that no polynomial-time algorithm can approximate the optimum load to within a factor better than 4 3 [72]; and they provide a 2-approximation algorithm for a class of problems that includes this one.
Reference: [51] <author> W. Hoeffding, </author> <title> "On the distribution of the number of successes of independent trials," </title> <journal> Annals of Math. Stat., </journal> <volume> 27(1956), </volume> <pages> pp. 713-721. </pages>
Reference-contexts: To verify the first of these, we need the following result from [93]; it is a bound on the sum of independent random variables in the spirit of results of Chernoff [23] and Hoeffding <ref> [51] </ref>. Theorem 2.5.1 (Raghavan) Let a 1 ; : : :; a r 2 [0; 1]: Let X 1 ; X 2 ; : : : ; X r be independent Bernoulli trials with EX j = p j and = P P i a i p i .
Reference: [52] <author> A. Itai, Y. Perl, Y. Shiloach, </author> <title> "The complexity of finding maximum disjoint paths with length constraints," </title> <journal> Networks, </journal> <volume> 12(1982), </volume> <pages> pp. 277-286. </pages>
Reference-contexts: The problem is to decide whether there exist k mutually edge-disjoint s-t paths, each of which uses at most L edges. This is NP-hard for k = 2 and variable L [73], and for L = 5 and variable k <ref> [52] </ref>. Related to this is the well-known minimum-cost flow problem, which is solvable in polynomial time (see [32, 115, 48]) For our purposes, we can view minimum-cost flow as addressing the following problem: for a given k, find k edge-disjoint s-t paths in G whose total length is minimum.
Reference: [53] <author> D.S. Johnson, </author> <title> "Approximation algorithms for combinatorial problems," </title> <journal> J. Computer and System Sci., </journal> <volume> 9(1974), </volume> <pages> pp. 256-278. </pages>
Reference-contexts: We also note that a straightforward application of the greedy set cover technique <ref> [24, 53, 77] </ref>, in conjunction with the constant-factor approximation for the mdp, allows us to obtain an O (log n) approximation for the minimum partition of T into rounds. This improves on a bound 21 of Aumann and Rabani [9]. Approximations on a Generalization of the Mesh. <p> The notion of partitioning T into realizable sets also arises in certain VLSI problems; we will encounter this in Chapter 9. Our approach is based on a direct application of the greedy set cover technique of (independently) Chvatal, Johnson, and Lovasz <ref> [24, 53, 77] </ref>; this allows one to take an approximation algorithm for the mdp and obtain an approximation for routing in rounds with a performance guarantee that is only larger by a logarithmic factor. <p> Let H m denote the m th harmonic number, defined by H m = P m 1 i . Given this definition we have the following result | it is simply the main result of <ref> [24, 53, 77] </ref>, for the case in which the maximization algorithm A only produces a set whose cardinality is approximately maximum.
Reference: [54] <author> A. Kamath, O. Palmon, S. Plotkin, </author> <title> "Routing and Admission Control in General Topology Networks with Poisson Arrivals," </title> <booktitle> Proc. 7th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1996. </year>
Reference-contexts: This has been suggested within the context of on-line algorithms in general by a number of researchers (see e.g. Raghavan [92]); and it has been investigated within the framework of on-line routing by Kamath, Palmon, and Plotkin <ref> [54] </ref>. This latter paper 175 obtains very strong approximation results under the assumption that requests for connections between each pair of vertices arrive subject to an unknown Poisson process, and that each request only lasts for a period of time that is determined by an exponentially distributed random variable.
Reference: [55] <author> N. Karmarkar, </author> <title> "A new polynomial-time algorithm for linear programming," </title> <journal> Combinator-ica, </journal> <volume> 4(1984), </volume> <pages> pp. 373-396. </pages>
Reference-contexts: The most direct way to see this is to verify that it can be written as a polynomial-size linear program, and thus solved optimally using a polynomial-time linear programming algorithm <ref> [58, 55, 49] </ref>. Recently, faster and more combinatorial algorithms have been developed to provide (1 + ")-approximations for this problem (see e.g. [88, 68, 13]). Since maximum fractional flows can be computed in polynomial time, we will be making use of them in designing approximation algorithms.
Reference: [56] <author> R.M. Karp, </author> <title> "Reducibility among combinatorial problems," Complexity of Computer Computations, R.E. </title> <editor> Miller, J.W. Thatcher, Eds., </editor> <address> New York: </address> <publisher> Plenum Press, </publisher> <year> 1972. </year> <pages> pp. 85-103. </pages>
Reference-contexts: We will use f (X; Y ) (resp. f s (X; Y )) to denote the size of a maximum (simple) X-Y linkage. Karp's proof that the disjoint paths problem is NP-complete <ref> [56] </ref> gave compelling evidence that there does not exist a simple criterion for the existence of disjoint paths of the type suggested by the cut condition. <p> It is strongly NP-complete, even for a graph G 1 consisting of two vertices with m parallel edges, where m is part of the input. Proof. The following partition problem is NP-complete <ref> [56] </ref>: given a set S of positive integers a 1 ; : : :; a n , with D = P i a i , decide whether there is a set S 0 S with X a j = 2 Given an instance of the partition problem, with numbers a 1
Reference: [57] <author> R.M. Karp, F.T. Leighton, R. Rivest, C. Thompson, U. Vazirani, V. Vazirani, </author> <title> "Global wire routing in two-dimensional arrays," </title> <journal> Algorithmica, </journal> <volume> 2(1987), </volume> <pages> pp. 113-129. 183 </pages>
Reference-contexts: Variants of the latter algorithm provide, in the same general class of graphs, a constant-factor approximation algorithm for the problem of minimizing congestion (Chapter 8), and an (optimal) on-line O (log n)-approximation for the ufp. This settles open questions of Karp, Leighton, Rivest, Thompson, Vazirani, Vazirani <ref> [57] </ref>, and of Awerbuch, Gawlick, Leighton, Rabani [12] respectively. <p> In some sense, it forms the basis of the study of VLSI layout, since most models of a VLSI chip represent it as an n fi n array of square cells <ref> [57] </ref>. It is one of the most common parallel architectures; and many large-scale networks for high-speed communication are configured as mesh-like, nearly planar graphs [12, 22, 90, 66, 81, 117]. Finally, we note that the mdp remains NP-complete when the underlying graph is restricted to be the mesh [65]. <p> In Chapter 8, we consider the problem of minimizing congestion. Using the simulated network construction of Chapter 7, we obtain a constant-factor approximation for congestion in densely embedded graphs. Combined with the algorithm of Raghavan and Thompson [94], this settles an open question of Karp, Leighton et. al <ref> [57] </ref> for the special case of the mesh. This is based on joint work with Satish Rao and Eva Tardos [61]. Node-Disjoint Paths. Finally, all of the above has been concerned with edge-disjointness constraints. <p> Combined with Theorem 8.1.1, this settles an open question of Karp, Leighton, Rivest, Thompson, Vazirani, and Vazirani <ref> [57] </ref> on the existence of a constant-factor approximation for congestion on the two-dimensional mesh. The algorithm makes use of randomized rounding within the simulated network defined in the previous two chapters, and is thus quite similar to the ufp approximation algorithms just developed.
Reference: [58] <author> L. Khachiyan, </author> <title> "A polynomial algorithm for linear programming," </title> <journal> Soviet Math. Dokl., </journal> <volume> 244(1979), </volume> <pages> pp. 1093-1096. </pages>
Reference-contexts: The most direct way to see this is to verify that it can be written as a polynomial-size linear program, and thus solved optimally using a polynomial-time linear programming algorithm <ref> [58, 55, 49] </ref>. Recently, faster and more combinatorial algorithms have been developed to provide (1 + ")-approximations for this problem (see e.g. [88, 68, 13]). Since maximum fractional flows can be computed in polynomial time, we will be making use of them in designing approximation algorithms.
Reference: [59] <author> M. Klawe, F.T. Leighton, </author> <title> "A tight lower bound on the area of planar permutation layouts," </title> <journal> SIAM J. Discrete Math., </journal> <volume> 5(1992), </volume> <pages> pp. 558-563. </pages>
Reference: [60] <author> P. Klein, A. Agrawal, R. Ravi, S. Rao, </author> <title> "Approximation through multicommodity flow," </title> <booktitle> Proc. 31st IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1990, </year> <pages> pp. 726-737. </pages>
Reference-contexts: Although the cut condition is necessary for fractional realizability, it is not in general sufficient. A fairly large amount of work has been done on showing the sufficiency of "approximate" cut conditions; we will discuss this further in Chapter 10, and also refer the reader to <ref> [69, 60, 44, 89, 74] </ref> for more details. The well-studied maximum s-t flow problem deals with fractional flow | it is simply the above problem in the case when all (s i ; t i ) pairs in T are the same.
Reference: [61] <author> J. Kleinberg, S. Rao, E. Tardos, </author> <title> "Routing with low congestion in densely embedded graphs," </title> <type> manuscript. </type>
Reference-contexts: Combined with the algorithm of Raghavan and Thompson [94], this settles an open question of Karp, Leighton et. al [57] for the special case of the mesh. This is based on joint work with Satish Rao and Eva Tardos <ref> [61] </ref>. Node-Disjoint Paths. Finally, all of the above has been concerned with edge-disjointness constraints. But a number of very basic and interesting questions arise when one requires paths that are node-disjoint.
Reference: [62] <author> J. Kleinberg, R. Rubinfeld, </author> <title> "Short paths in expander graphs," </title> <note> submitted for publication. </note>
Reference-contexts: The latter part of this chapter is based on joint work with Ronitt Rubinfeld <ref> [62] </ref>. Approximations on the Two-Dimensional Mesh. In Chapter 6, we develop approximation algorithms for the two-dimensional mesh graph. The two-dimensional mesh is a fundamental graph to consider both in the context of VLSI and the context of virtual circuit routing.
Reference: [63] <author> J. Kleinberg, E. Tardos, </author> <title> "Approximations for the Disjoint Paths Problem in High-Diameter Planar Networks," </title> <booktitle> Proc. 27th ACM Symp. on Theory of Computing, </booktitle> <year> 1995, </year> <pages> pp. 26-35. </pages>
Reference-contexts: The connection with classical matroid algorithms appears to be 19 interesting in its own right; its first application in approximation problems of this type was found by the author and Eva Tardos <ref> [63] </ref>, for a related problem that we will not be discussing in this work. As indicated above, the results are based on a new rounding procedure for the fractional version of the problem, which is precisely the classical maximum flow problem. <p> The material in Chapters 6 and 7 is based on joint work with Eva Tardos <ref> [63, 64] </ref>. Minimizing Congestion. In Chapter 8, we consider the problem of minimizing congestion. Using the simulated network construction of Chapter 7, we obtain a constant-factor approximation for congestion in densely embedded graphs.
Reference: [64] <author> J. Kleinberg, E. Tardos, </author> <title> "Disjoint Paths in Densely Embedded Graphs," </title> <booktitle> Proc. 36th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1995, </year> <pages> pp. 52-61. </pages>
Reference-contexts: The material in Chapters 6 and 7 is based on joint work with Eva Tardos <ref> [63, 64] </ref>. Minimizing Congestion. In Chapter 8, we consider the problem of minimizing congestion. Using the simulated network construction of Chapter 7, we obtain a constant-factor approximation for congestion in densely embedded graphs.
Reference: [65] <author> M.E. Kramer, J. van Leeuwen, </author> <title> "The complexity of wire routing and finding the minimum area layouts for arbitrary VLSI circuits," </title> <booktitle> Advances in Computing Research 2: VLSI Theory, </booktitle> <editor> F.P. Preparata, Ed., </editor> <publisher> London: JAI Press, </publisher> <year> 1984. </year> <pages> pp. 129-146. </pages>
Reference-contexts: It is one of the most common parallel architectures; and many large-scale networks for high-speed communication are configured as mesh-like, nearly planar graphs [12, 22, 90, 66, 81, 117]. Finally, we note that the mdp remains NP-complete when the underlying graph is restricted to be the mesh <ref> [65] </ref>. We provide a constant-factor approximation for the ufp on the (uniform-capacity) two-dimensional mesh. This is the first constant-factor approximation for the ufp, or even the maximum disjoint paths problem, in any class of graphs other than trees. <p> At the same time, the basic node-disjoint paths problem is NP-hard even for the two-dimensional mesh <ref> [65] </ref>, and essentially nothing is known in the way of reasonable approximation algorithms for the problem.
Reference: [66] <author> R. Krishnan, </author> <title> N.F. Maxemchuk, "Is there life beyond linear toplogies? A comparison of DQDB and the Manhattan Street Network," </title> <booktitle> Proc. INFOCOM, </booktitle> <year> 1993, </year> <pages> pp. 690-698. </pages>
Reference-contexts: It is one of the most common parallel architectures; and many large-scale networks for high-speed communication are configured as mesh-like, nearly planar graphs <ref> [12, 22, 90, 66, 81, 117] </ref>. Finally, we note that the mdp remains NP-complete when the underlying graph is restricted to be the mesh [65]. We provide a constant-factor approximation for the ufp on the (uniform-capacity) two-dimensional mesh.
Reference: [67] <author> F.T. Leighton, </author> <title> Layouts for the Shu*e-Exchange Graph and Lower Bound Techniques for VLSI, </title> <type> Ph.D. Thesis, </type> <institution> MIT Math Dept., </institution> <year> 1981 </year>
Reference-contexts: Then it is not hard to show by a crossing number argument (using a lemma of <ref> [67] </ref>) that (T ) = fi ( p p), even though T is again routable in a single round using edge-disjoint paths.
Reference: [68] <author> F.T. Leighton, F. Makedon, S. Plotkin, C. Stein, E. Tardos, S. Tragoudas, </author> <title> "Fast approximation algorithms for the multicommodity flow problem," </title> <booktitle> Proc. 23rd ACM Symp. on Theory of Computing, </booktitle> <year> 1991, </year> <pages> pp. 101-111. </pages>
Reference-contexts: Recently, faster and more combinatorial algorithms have been developed to provide (1 + ")-approximations for this problem (see e.g. <ref> [88, 68, 13] </ref>). Since maximum fractional flows can be computed in polynomial time, we will be making use of them in designing approximation algorithms.
Reference: [69] <author> F.T. Leighton, S. Rao, </author> <title> "An appoximate max-flow min-cut theorem for uniform multi-commodity flow problems with applications to approximation algorithms," </title> <booktitle> Proc. 29th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1988. </year> <month> 184 </month>
Reference-contexts: Although the cut condition is necessary for fractional realizability, it is not in general sufficient. A fairly large amount of work has been done on showing the sufficiency of "approximate" cut conditions; we will discuss this further in Chapter 10, and also refer the reader to <ref> [69, 60, 44, 89, 74] </ref> for more details. The well-studied maximum s-t flow problem deals with fractional flow | it is simply the above problem in the case when all (s i ; t i ) pairs in T are the same. <p> Recent unpublished work of Broder, Frieze, and Upfal also addresses this trade-off between the size of the terminal set and the allowed amount of congestion [21]. As a by-product of their earlier fundamental work on multicommodity flow, Leighton and Rao <ref> [69] </ref> established the following result. Theorem 2.8.3 (Leighton-Rao) Let G be a bounded-degree, n-node ff-expander. Then any partial permutation in G can be routed with congestion O (log n) using paths of length O (log n). Using this result, Aumann and Rabani observed the following [9].
Reference: [70] <author> F.T. Leighton, S. Rao, </author> <title> "Circuit switching: a multicommodity flow based approach," </title> <booktitle> Proc. 9th International Parallel Processing Symposium, </booktitle> <year> 1995. </year>
Reference-contexts: The proof also provides a randomized polynomial time algorithm for constructing the paths. If one allows super-constant congestion, then even larger terminal sets can be guaranteed to be realizable; in particular Leighton and Rao prove the following <ref> [70] </ref>. (The result in [70] is stated only for strong expanders, but the proof as given there applies to ff-expanders for arbitrary ff &gt; 0.) Theorem 2.8.2 (Leighton-Rao) For every ff &gt; 0, every bounded-degree ff-expander G has the following property: every partial permutation T containing at most O (n=(log n <p> The proof also provides a randomized polynomial time algorithm for constructing the paths. If one allows super-constant congestion, then even larger terminal sets can be guaranteed to be realizable; in particular Leighton and Rao prove the following <ref> [70] </ref>. (The result in [70] is stated only for strong expanders, but the proof as given there applies to ff-expanders for arbitrary ff &gt; 0.) Theorem 2.8.2 (Leighton-Rao) For every ff &gt; 0, every bounded-degree ff-expander G has the following property: every partial permutation T containing at most O (n=(log n log log n)) terminals
Reference: [71] <author> C. Leiserson, </author> <title> F.M. Maley, "Algorithms for routing and testing routability of planar VLSI layouts," </title> <booktitle> Proc. 17th ACM Symp. on Theory of Computing, </booktitle> <year> 1985. </year>
Reference-contexts: Indeed, for the two-dimensional mesh, 157 efficient algorithms for this "homotopic routing" problem were given by Cole and Siegel [25] and Leiserson and Maley <ref> [71] </ref> for the mesh; Schrijver's work can be viewed as a generalization of this work to arbitrary graphs on arbitrary surfaces.
Reference: [72] <author> J.K. Lenstra, D.B. Shmoys, E. Tardos, </author> <title> "Approximation algorithms for scheduling unrelated parallel machines," </title> <booktitle> Proc. 28th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1987. </year>
Reference-contexts: But when the S i are arbitrary sets, Lenstra, Shmoys, and Tardos show that no polynomial-time algorithm can approximate the optimum load to within a factor better than 4 3 <ref> [72] </ref>; and they provide a 2-approximation algorithm for a class of problems that includes this one. Here, we observe that this load balancing problem can be easily formulated as a single-source unsplittable flow problem on a three-level directed graph, as in Figure 4-1.
Reference: [73] <author> C. Li, T. McCormick, D. Simchi-Levi, </author> <title> "The complexity of finding two disjoint paths with min-max objective function," </title> <journal> Discrete Appl. Math., </journal> <volume> 26(1990), </volume> <pages> pp. 105-115. </pages>
Reference-contexts: The problem is to decide whether there exist k mutually edge-disjoint s-t paths, each of which uses at most L edges. This is NP-hard for k = 2 and variable L <ref> [73] </ref>, and for L = 5 and variable k [52].
Reference: [74] <author> N. Linial, E. London, Y. Rabinovich, </author> <title> "The geometry of graphs and some of its algorithmic applications," </title> <booktitle> Proc. 35th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1994. </year>
Reference-contexts: Although the cut condition is necessary for fractional realizability, it is not in general sufficient. A fairly large amount of work has been done on showing the sufficiency of "approximate" cut conditions; we will discuss this further in Chapter 10, and also refer the reader to <ref> [69, 60, 44, 89, 74] </ref> for more details. The well-studied maximum s-t flow problem deals with fractional flow | it is simply the above problem in the case when all (s i ; t i ) pairs in T are the same.
Reference: [75] <author> R. Lipton, R. Tarjan, </author> <title> "A separator theorem for planar graphs," </title> <journal> SIAM J. Applied Math. </journal> <volume> 36(1979), </volume> <pages> pp. 177-189. </pages>
Reference-contexts: Let n = jSj. By the Lipton-Tarjan planar separator theorem <ref> [75] </ref>, there is a set of at most 4r + 1 119 vertices whose removal breaks H into components each of size at most 2 3 n. Let X be a union of these components of size between 1 3 n and 1 2 n.
Reference: [76] <author> M. Lomonosov, </author> <title> "Combinatorial approaches to multiflow problems," </title> <journal> Discrete Appl. Math., </journal> <volume> 11(1985), </volume> <pages> pp. 1-94. </pages>
Reference-contexts: That is, there is a fractional flow shipping all the demand, in which all path weights are equal to 1 This conjecture is false, disproved by Lomonosov <ref> [76] </ref>; in fact, it is now known that the "half-integer" flow problem is NP-complete [83]. <p> Seymour's conjecture, that a fractionally realizable set of terminals can always be realized by a half-integral flow, was disproved by Lomonosov <ref> [76] </ref>. But, for example, we know of no evidence to refute the following possibility: every fractionally realizable set of terminals can be partitioned into a constant number of sets, each of which is realizable by a half-integral flow.
Reference: [77] <author> L. Lovasz, </author> <title> "On the ratio of optimal integral and fractional covers," </title> <journal> Discrete Math., </journal> <volume> 13(1975), </volume> <pages> pp. 383-390. </pages>
Reference-contexts: We also note that a straightforward application of the greedy set cover technique <ref> [24, 53, 77] </ref>, in conjunction with the constant-factor approximation for the mdp, allows us to obtain an O (log n) approximation for the minimum partition of T into rounds. This improves on a bound 21 of Aumann and Rabani [9]. Approximations on a Generalization of the Mesh. <p> The notion of partitioning T into realizable sets also arises in certain VLSI problems; we will encounter this in Chapter 9. Our approach is based on a direct application of the greedy set cover technique of (independently) Chvatal, Johnson, and Lovasz <ref> [24, 53, 77] </ref>; this allows one to take an approximation algorithm for the mdp and obtain an approximation for routing in rounds with a performance guarantee that is only larger by a logarithmic factor. <p> Let H m denote the m th harmonic number, defined by H m = P m 1 i . Given this definition we have the following result | it is simply the main result of <ref> [24, 53, 77] </ref>, for the case in which the maximization algorithm A only produces a set whose cardinality is approximately maximum.
Reference: [78] <author> L. Lovasz, V. Neumann-Lara, M. Plummer, </author> <title> "Mengerian theorems for paths of bounded length," </title> <journal> Periodica Mathematica Hungarica, </journal> <pages> 9(1978) pp. 269-276. </pages>
Reference-contexts: If we compute a minimum-cost flow (on k paths) from s to t, then it is easy to see that this provides a k-approximation for the above problem. Thus we ask: is there a o (k)-approximation for this problem? Work of Lovasz, Neumann-Lara, and Plummer <ref> [78] </ref> and Galil and Yu [40] is related to these questions. There are also some basic questions related to the "min-sum" objective function.
Reference: [79] <author> M. Luby, </author> <title> "A simple parallel algorithm for the maximal independent set problem," </title> <journal> SIAM J. Computing, </journal> <volume> 15(1986), </volume> <pages> pp. 1036-1053. </pages>
Reference-contexts: We build a graph G 0 on V 0 by joining u; v 2 V 0 if the corresponding sets C fl u and C fl v intersect at an internal vertex. We now run a randomized version of Luby's maximal independent set algorithm <ref> [79] </ref> on this graph. That is, each vertex picks a random number between 1 and j, where j is large enough that the probability of ties is small. <p> To start, we wish to choose a maximal set of mutually distant vertices around which to grow clusters. Let G r denote the graph obtained from G by joining u and v if d (u; v) r. We first run Luby's randomized maximal independent set algorithm <ref> [79] </ref> in G 3 log n . Let M denote the resulting mis.
Reference: [80] <author> W. Massey, </author> <title> Algebraic Topology: An Introduction, </title> <address> New York: </address> <publisher> Springer-Verlag, </publisher> <year> 1967. </year>
Reference-contexts: The techniques here will be used in Chapter 7, as part of our approximation for (edge-)disjoint paths in densely embedded graphs. First we need some preliminary topological definitions; the reader is referred to an introductory textbook such as <ref> [80] </ref> for more detail. Let S 1 denote the unit circle, and S 2 the surface of the unit sphere in R 3 , as topological spaces. Let denote a compact orientable surface; it is well-known that may be obtained from S 2 by attaching a finite number of handles.
Reference: [81] <author> N.F. Maxemchuk, </author> <title> "Regular mesh topologies in local and metropolitan area networks," </title> <journal> AT&T Technical Journal, </journal> <volume> 64(1985), </volume> <pages> pp. 1659-1685. </pages>
Reference-contexts: It is one of the most common parallel architectures; and many large-scale networks for high-speed communication are configured as mesh-like, nearly planar graphs <ref> [12, 22, 90, 66, 81, 117] </ref>. Finally, we note that the mdp remains NP-complete when the underlying graph is restricted to be the mesh [65]. We provide a constant-factor approximation for the ufp on the (uniform-capacity) two-dimensional mesh.
Reference: [82] <author> K. Menger, "Zur allgemeinen Kurventheorie," </author> <title> Fundam. </title> <journal> Math., </journal> <volume> 19(1927), </volume> <pages> pp. 96-115. 185 </pages>
Reference-contexts: This is the single-source ufp, in which all s i are the same. When all i and c e are equal, this problem can be reduced to the case of edge-disjoint s-t paths, the subject of Menger's theorem <ref> [82] </ref> and the max-flow min-cut theorem [34, 35]. <p> In this, the setting of Menger's classical theorem <ref> [82] </ref>, one asks: What is the maximum number of mutually edge-disjoint s-t paths in G? One way to provide evidence that there do not exist k edge-disjoint s-t paths is to exhibit a set X V such that (i) s 2 X and t 62 X. (ii) jffi (X)j &lt; k.
Reference: [83] <author> M. Middendorf, F. Pfeiffer, </author> <title> "On the complexity of the disjoint paths problem," </title> <journal> Combina--torica, </journal> <volume> 13(1993). </volume> <pages> pp. 97-107. </pages>
Reference-contexts: That is, there is a fractional flow shipping all the demand, in which all path weights are equal to 1 This conjecture is false, disproved by Lomonosov [76]; in fact, it is now known that the "half-integer" flow problem is NP-complete <ref> [83] </ref>.
Reference: [84] <author> H. Okamura, P. Seymour, </author> <title> "Multicommodity flows in planar graphs," </title> <journal> J. Comb. Theory Ser. B, </journal> <volume> 31(1981), </volume> <pages> pp. 75-81. </pages>
Reference-contexts: Our algorithm here uses the Raghavan-Thompson method on a high-capacity "simulated network" that we construct on top of the underlying mesh. To generalize this construction of a simulated network beyond the mesh itself, we require a multicommodity flow result of Okamura and Seymour <ref> [84] </ref>, as well as some topological results on the disjoint paths problem due to Schrijver [104]. <p> To do this, we make use of classical results of Okamura and Seymour <ref> [84] </ref> and Schrijver [104] on the disjoint paths problem. Our requirement that the vertex degrees be even arises throughout previous work on this problem, as will be seen in Chapter 2; it is not particularly limiting in practice, as it can be achieved by doubling every edge. <p> Thus the emphasis here, in developing special cases, is in finding some structured "arrangement" of the set of terminals that makes the problem more tractable. Historically one of the first such results was developed by Okamura and Seymour <ref> [84] </ref>, in the following setting. Let G be a planar graph, and the outer face of G. Also, let us define the augmented graph G + to be the graph obtained from G by adding all (s i ; t i ) pairs as edges. <p> the following. (1) We used the natural crossbars inside a mesh for routing; do these enclosures have similar crossbars inside them? (2) How do we join the clusters together into a simulated network? To build crossbars inside the enclosures, we make use of a construction based on the Okamura-Seymour theorem <ref> [84] </ref>, which we describe in this section. To define the high-capacity simulated network N , we want to grow the enclosures out until they touch. <p> Following the algorithm of Chapter 6, we now must build crossbar structures in the enclosures to replace the natural crossbars of the mesh. We build crossbars using Frank's extension (Theorem 2.2.4) of the Okamura-Seymour theorem <ref> [84, 37] </ref>. To be precise, Definition 7.3.2 If X V , we say a crossbar anchored in X is a set of edge-disjoint paths, each with at least one end in X, such that every pair of paths meets in at least one vertex.
Reference: [85] <author> H. Okamura, </author> <title> "Multicommodity flows in graphs," </title> <journal> Discrete Applied Mathematics, </journal> <volume> 6(1983), </volume> <pages> pp. 55-62. </pages>
Reference-contexts: There are a number of subsequent results on the solvability of the disjoint paths problem in cases when the underlying graph is planar and the terminals have some "nice" arrangement. In particular, see the papers of Okamura <ref> [85] </ref> and Schrijver [103], both of which are discussed in Frank's survey [39]. There is a further elegant theorem along these lines due to Seymour [112], which we state here although we will not have occasion to use it.
Reference: [86] <author> D. Peleg, E. Upfal, </author> <title> "Disjoint paths on expander graphs," </title> <journal> Combinatorica, </journal> <volume> 9(1989), </volume> <pages> pp. 289-313. </pages>
Reference-contexts: It turns out that in any (sufficiently strong) expander graph, any set of terminals of up to a certain size is realizable. The first result of this type was proved by Peleg and Upfal <ref> [86] </ref>; 44 their bound on the size of the allowable terminal set was considerably strengthened by Broder, Frieze, and Upfal [20]. In order to obtain paths that are edge-disjoint, both these papers require very strong expansion guarantees. However, for more moderate expanders, [20] also proves the following.
Reference: [87] <author> H. </author> <title> Perfect, "Applications of Menger's graph theorem," </title> <journal> J. Math. Analysis Appl. </journal> <volume> 22(1968), </volume> <pages> pp. 96-111. </pages>
Reference-contexts: taking the one of greater value gives us Corollary 3.3.4 There is a constant-factor approximation algorithm for ff (G; D; s). 3.4 Routing in Rounds In order to obtain a constant-factor approximation for the problem of routing in rounds, we make use of a classical connection between flows and matroids <ref> [87, 119] </ref>. <p> Recall that by Corollary 2.4.3, such integral unsplittable problems are well-characterized by the max-flow min-cut theorem. The relevance of matroids to such problems is a consequence of the following result, due to Perfect <ref> [87] </ref>. Theorem 3.4.2 (Perfect) Let (G; D; s) be an integral single-source ufp. The collection of realizable subsets of D forms a matroid over the ground set D. The following fact is immediate.
Reference: [88] <author> S. Plotkin, D. Shmoys, E. Tardos, </author> <title> "Fast approximation algorithms for fractional packing and covering problems," </title> <booktitle> Proc. 32nd IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1991. </year>
Reference-contexts: Recently, faster and more combinatorial algorithms have been developed to provide (1 + ")-approximations for this problem (see e.g. <ref> [88, 68, 13] </ref>). Since maximum fractional flows can be computed in polynomial time, we will be making use of them in designing approximation algorithms.
Reference: [89] <author> S. Plotkin, E. Tardos, </author> <title> "Improved bounds on the max-flow min-cut ratio for multicommod-ity flows," </title> <booktitle> Proc. 25th ACM Symp. on Theory of Computing, </booktitle> <year> 1993, </year> <pages> pp. 691-697. </pages>
Reference-contexts: Although the cut condition is necessary for fractional realizability, it is not in general sufficient. A fairly large amount of work has been done on showing the sufficiency of "approximate" cut conditions; we will discuss this further in Chapter 10, and also refer the reader to <ref> [69, 60, 44, 89, 74] </ref> for more details. The well-studied maximum s-t flow problem deals with fractional flow | it is simply the above problem in the case when all (s i ; t i ) pairs in T are the same.
Reference: [90] <author> M. de Prycker, </author> <title> Asynchronous Transfer Mode: Solution for Broadband ISDN, </title> <publisher> Ellis Horwood Ltd., </publisher> <year> 1993. </year>
Reference-contexts: It is one of the most common parallel architectures; and many large-scale networks for high-speed communication are configured as mesh-like, nearly planar graphs <ref> [12, 22, 90, 66, 81, 117] </ref>. Finally, we note that the mdp remains NP-complete when the underlying graph is restricted to be the mesh [65]. We provide a constant-factor approximation for the ufp on the (uniform-capacity) two-dimensional mesh.
Reference: [91] <author> W.R. Pulleyblank, </author> <title> "Two Steiner tree packing problems," </title> <booktitle> invited talk at ACM Symposium on Theory of Computing, </booktitle> <year> 1995. </year>
Reference-contexts: In particular, in many models of VLSI layout, effective layout strategies rely on heuristics for finding node-disjoint paths; many current routing software systems rely extensively on such an approach (see e.g. <ref> [91] </ref>). Node-disjointness constraints can arise as well in the context of virtual circuit routing in networks, when one requires paths to be node-disjoint for the sake of fault-tolerance or because of bottlenecks involving switches rather than links.
Reference: [92] <author> P. Raghavan, </author> <title> "A statistical adversary for on-line algorithms," in On-Line Algorithms, </title> <editor> D. Sleator and L. McGeoch, Eds., </editor> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science (vol. </booktitle> <volume> 7), </volume> <year> 1992. </year>
Reference-contexts: This has been suggested within the context of on-line algorithms in general by a number of researchers (see e.g. Raghavan <ref> [92] </ref>); and it has been investigated within the framework of on-line routing by Kamath, Palmon, and Plotkin [54].
Reference: [93] <author> P. Raghavan, </author> <title> "Probabilistic construction of deterministic algorithms: approximating packing integer programs," </title> <journal> J. Computer and System Sciences, </journal> <volume> 37(1988), </volume> <pages> pp. 130-143. </pages>
Reference-contexts: Here we provide a constant-factor approximation for the general case of this problem. We also investigate what can be said about the case in which fl = max i;e i =c e is small, as this is relevant to situations such as those covered by <ref> [94, 93, 10] </ref>, when every connection consumes only a small fraction of the bandwidth on a link. We provide an approximation algorithm with a performance guarantee of 1 + O ( p fl ) | the crucial point being that this converges to 1 as fl becomes smaller and smaller. <p> This settles an open question of Awerbuch, Gawlick, Leighton, and Rabani [12]. The underlying technique for both these algorithms is, roughly, the following. We impose a high-capacity "simulated network" on the mesh; the paths are then constructed in two stages: (i) using an algorithm for the high-capacity ufp (e.g. <ref> [94, 93, 10] </ref>), we choose "global routes" in the simulated networks; (ii) these global routes are then converted into paths in the mesh itself. <p> of this type may indeed hold for the unsplittable flow problem in general graphs, and this is clearly an interesting issue for future work. 2.5 The High-Capacity UFP We can now introduce the randomized rounding technique of Raghavan and Thompson [94], which leads to Raghavan's algorithm for the high-capacity ufp <ref> [93] </ref>. Recall that in this special case of the ufp, we have an n-node, m-edge graph with minimum edge capacity at least (log m) times the maximum demand. <p> First, we argue that with high probability, no capacity constraint is violated by the resulting paths. And second, we argue that the total amount of flow routed is within a constant factor of the optimum. To verify the first of these, we need the following result from <ref> [93] </ref>; it is a bound on the sum of independent random variables in the spirit of results of Chernoff [23] and Hoeffding [51]. <p> But whereas we previously used the high-capacity on-line algorithm of Awerbuch, Azar, and Plotkin, we now apply the randomized rounding algorithm of Raghavan and Thompson <ref> [94, 93] </ref> in the simulated network. (See Section 2.5 for the details of this algorithm.) For the problem in which we have terminal pairs ( (s i ); (t i )) in the simulated network N , this gives a constant-factor approximation.
Reference: [94] <author> P. Raghavan, </author> <title> C.D. Thompson, "Randomized rounding: a technique for provably good algorithms and algorithmic proofs," </title> <journal> Combinatorica, </journal> <volume> 7(1987), </volume> <pages> pp. 365-374. 186 </pages>
Reference-contexts: This general approach is typically referred to as rounding: we wish to "round off " the fractional solution we obtain to a 0/1-valued solution that produces an unsplittable routing. For example, the high-capacity ufp approximation of Raghavan and Thompson <ref> [94] </ref> is based on a direct rounding procedure, which we will sketch in Chapter 2. Our approximation algorithm for the general single-source problem is based on a new rounding procedure for single-source fractional flow | this latter problem corresponds to the well-known maximum flow problem. <p> Here we provide a constant-factor approximation for the general case of this problem. We also investigate what can be said about the case in which fl = max i;e i =c e is small, as this is relevant to situations such as those covered by <ref> [94, 93, 10] </ref>, when every connection consumes only a small fraction of the bandwidth on a link. We provide an approximation algorithm with a performance guarantee of 1 + O ( p fl ) | the crucial point being that this converges to 1 as fl becomes smaller and smaller. <p> This settles an open question of Awerbuch, Gawlick, Leighton, and Rabani [12]. The underlying technique for both these algorithms is, roughly, the following. We impose a high-capacity "simulated network" on the mesh; the paths are then constructed in two stages: (i) using an algorithm for the high-capacity ufp (e.g. <ref> [94, 93, 10] </ref>), we choose "global routes" in the simulated networks; (ii) these global routes are then converted into paths in the mesh itself. <p> Minimizing Congestion. In Chapter 8, we consider the problem of minimizing congestion. Using the simulated network construction of Chapter 7, we obtain a constant-factor approximation for congestion in densely embedded graphs. Combined with the algorithm of Raghavan and Thompson <ref> [94] </ref>, this settles an open question of Karp, Leighton et. al [57] for the special case of the mesh. This is based on joint work with Satish Rao and Eva Tardos [61]. Node-Disjoint Paths. Finally, all of the above has been concerned with edge-disjointness constraints. <p> However, it seems quite possible that structural results of this type may indeed hold for the unsplittable flow problem in general graphs, and this is clearly an interesting issue for future work. 2.5 The High-Capacity UFP We can now introduce the randomized rounding technique of Raghavan and Thompson <ref> [94] </ref>, which leads to Raghavan's algorithm for the high-capacity ufp [93]. Recall that in this special case of the ufp, we have an n-node, m-edge graph with minimum edge capacity at least (log m) times the maximum demand. <p> In terms of other methods, we saw in the previous chapter that the randomized rounding 51 method of Raghavan and Thompson <ref> [94] </ref> requires the minimum capacity to exceed the maximum demand by a factor of at least (log jEj); thus it is inapplicable to the general setting we are considering here. <p> On this network N we run the algorithm of Awerbuch, Azar, and Plotkin [10] in the on-line case, and the algorithm of Raghavan and Thompson <ref> [94] </ref> in the off-line case. The algorithms running in N will return routes consisting of a sequence of neighboring subsquares. To convert such a route into a path in G, we construct disjoint paths between neighboring subsquares. <p> But whereas we previously used the high-capacity on-line algorithm of Awerbuch, Azar, and Plotkin, we now apply the randomized rounding algorithm of Raghavan and Thompson <ref> [94, 93] </ref> in the simulated network. (See Section 2.5 for the details of this algorithm.) For the problem in which we have terminal pairs ( (s i ); (t i )) in the simulated network N , this gives a constant-factor approximation. <p> The randomized rounding method of Raghavan and Thompson is clearly applicable in this setting: one computes a fractional routing for T ; and then for (s i ; t i ) one chooses the path P j i with probability y j i <ref> [94] </ref>. Since we are no longer worried about respecting the capacity constraints, there is no need to impose any "high-capacity" requirements | the algorithm can be used in any graph. <p> The performance guarantee of the algorithm can be analyzed using tail bounds of the type in Theorem 2.5.1; one can show <ref> [94] </ref> that with high probability, the resulting unsplittable routing has congestion -f (T ) + o (-f (T )) + O (log jEj).
Reference: [95] <author> P. Raghavan, E. Upfal, </author> <title> "Efficient all-optical routing," </title> <booktitle> Proc. 26th ACM Symp. on Theory of Computing, </booktitle> <year> 1994, </year> <pages> pp. 134-143. </pages>
Reference-contexts: For permutations on expanders, we show that the bga is in fact an O (log n)-approximation. This improves on the bound of O (log 2 n) that follows from the techniques of Aumann-Rabani [9] and Raghavan-Upfal <ref> [95] </ref>; these papers consider the routing of permutations on expanders in the off-line and randomized on-line settings respectively. The latter part of this chapter is based on joint work with Ronitt Rubinfeld [62]. Approximations on the Two-Dimensional Mesh. In Chapter 6, we develop approximation algorithms for the two-dimensional mesh graph. <p> Awerbuch, Gawlick, et al. [12] also obtained an online O (log n log log n)-approximation for the two-dimensional mesh. Finally, the technique of 43 Raghavan and Upfal <ref> [95] </ref> discussed in the following section provides an O (log 2 n)-approximation for bounded-degree expander graphs. <p> Then any partial permutation in G can be partitioned into O (log 2 n) realizable sets. It follows that there is an O (log 2 n)-approximation for the mdp in bounded-degree expanders: one simply computes the partition above and takes the largest realizable set produced. Raghavan and Upfal <ref> [95] </ref> arrive at Theorems 2.8.3 and 2.8.4 via a completely different technique, more closely related to the methods of Broder, Frieze, and Upfal [20]. Given a permutation on a bounded-degree expander G, they produce a routing for it iteratively as follows. <p> Secondly, the approximation ratio we prove is smaller than the O (log 2 n) ratio one obtains from the techniques developed by Aumann-Rabani [9] and Raghavan-Upfal <ref> [95] </ref> for the problem of routing in rounds. (These papers considered the deterministic off-line and randomized on-line settings respectively.) This naturally raises the question of whether the techniques developed here, when incorporated into an algorithm that did not have to contend with the on-line constraint, could lead to even tighter approximation <p> Thus, we are addressing the following question: what is the minimum size of a partition of T into realizable sets? We use (T ) to denote this minimum. The quantity (T ) also arises in the analysis of routing algorithms for all-optical networks <ref> [1, 95, 9] </ref>. Here, one is given a graph G and set of terminal pairs T (with all demands equal to 1); for each pair (s i ; t i ) 2 T one must choose a path in G and a wavelength to use for routing the 112 path. <p> Clearly the minimum number of wavelengths possible is precisely (T ). Within the context of optical routing | so that all demands are 1 | approximations for (T ) have been given by Raghavan and Upfal <ref> [95] </ref> and Aumann and Rabani [9] for restricted types of graphs. Raghavan and Upfal provide a 3 2 -approximation for (T ) in trees, and a 2-approximation in cycles.
Reference: [96] <author> R. Rivest, </author> <title> "The placement and interconnect system," </title> <booktitle> Proc. 19th Design and Automation Conference, </booktitle> <year> 1982. </year>
Reference-contexts: Consequently, it is practically useful to route as many connections on a single layer as possible (in order to reduce the vias); for more details see <ref> [2, 27, 96] </ref>. These constraints thus result directly in problems involving ff (T ) and (T ), with layers now playing the role of "rounds." One typically reduces the number of layers by introducing spacing between the terminals.
Reference: [97] <author> N. Robertson, </author> <title> P.D. Seymour, "Graph Minors II. Algorithmic aspects of tree-width. </title> <journal> J. Algorithms, </journal> <volume> 7(1986), </volume> <pages> pp. 309-322. </pages>
Reference-contexts: node of (T; !) to be a node u 2 T such 52 that T n fug has no component X for which X ! v &gt; 2 v2T It is well-known that every weighted tree contains a center node. (One nice proof of this, which can be found in <ref> [97] </ref>, is the following. Suppose that (T; !) has no center node; then for each node u of T there is a unique component X u of T n fug that contains more than half the total weight in T .
Reference: [98] <author> N. Robertson, </author> <title> P.D. Seymour, "Graph Minors VI. Disjoint paths across a disc," </title> <journal> J. Combinatorial Theory Ser. B, </journal> <volume> 41(1986), </volume> <pages> pp. 115-138. </pages>
Reference-contexts: A closed curve is said to be null-homotopic on if it is homotopic to a point; it is well-known (see e.g. [99]) that a closed curve is null-homotopic if and only if it is contained in a -disc. Robertson and Seymour proved the following theorem <ref> [98] </ref>. Let G be a planar graph, and T a set of terminal pairs on the outer face of G. <p> For in case (ii), each path in a realization of G would have to pass through a different vertex in R " G; and there are not enough such vertices. In <ref> [98] </ref> it is shown that these conditions form a criterion for the (non-)existence of paths. The proof is not very difficult. <p> The proof is not very difficult. Theorem 2.3.1 (Robertson-Seymour) If G is planar and T lies on the outer face, then T is not realizable by node-disjoint paths if and only if one of (i) or (ii) above holds. In <ref> [98] </ref>, a similar result is also proved for graphs embedded on a cylinder. Schrijver proved what is in some sense the ultimate generalization of this result, for graphs embedded on an arbitrary surface [104].
Reference: [99] <author> N. Robertson, </author> <title> P.D. Seymour, "Graph Minors VII. Disjoint paths on a surface," </title> <journal> J. Combinatorial Theory Ser. B, </journal> <volume> 45(1988), </volume> <pages> pp. 212-254. </pages>
Reference-contexts: We define homotopy for closed curves using a function : S 1 fi [0; 1] ! that satisfies condition (i). A closed curve is said to be null-homotopic on if it is homotopic to a point; it is well-known (see e.g. <ref> [99] </ref>) that a closed curve is null-homotopic if and only if it is contained in a -disc. Robertson and Seymour proved the following theorem [98]. Let G be a planar graph, and T a set of terminal pairs on the outer face of G. <p> It turns out that our definition of densely embedded graphs could also have been expressed in these terms. We say that a drawing of a graph G on is c-representative <ref> [99, 101] </ref> if any non-null-homotopic closed curve on meets the drawing of G at least c times. <p> This contradicts our assumption that Q is non-null-homotopic. Thus G [U ] contains only null-homotopic simple cycles. By Theorems (11.2) and (11.10) of <ref> [99] </ref>, this implies that G [U ] is contained in a -disc. 7.2 Smooth Cycles In the sections to follow, we will construct a simulated network in an arbitrary densely embedded Eulerian graph, following roughly the outline of the previous chapter.
Reference: [100] <author> N. Robertson, </author> <title> P.D. Seymour, "Graph Minors IX. Disjoint crossed paths," </title> <journal> J. Combinatorial Theory Ser. B, </journal> <volume> 49(1990), </volume> <pages> pp. 40-77. </pages>
Reference-contexts: These algorithms also came with a fairly simple structural criterion for the existence of the paths, which we will not go into here; for perhaps the shortest proof of this criterion, the reader is referred to Section 2 of <ref> [100] </ref>. Naturally the next question was whether the problem is in polynomial time for any fixed value of jT j. A polynomial time algorithm for this case was discovered by Robertson and 28 Seymour, as one of the main consequences of their Graph Minors series.
Reference: [101] <author> N. Robertson, </author> <title> P.D. Seymour, "Graph Minors XI. Circuits on a surface," </title> <journal> J. Combinatorial Theory Ser. B, </journal> <volume> 60(1994), </volume> <pages> pp. 72-106. </pages>
Reference-contexts: It turns out that our definition of densely embedded graphs could also have been expressed in these terms. We say that a drawing of a graph G on is c-representative <ref> [99, 101] </ref> if any non-null-homotopic closed curve on meets the drawing of G at least c times.
Reference: [102] <author> N. Robertson, </author> <title> P.D. Seymour, "Graph Minors XIII. The disjoint paths problem," </title> <journal> J. Combinatorial Theory Ser. B, </journal> <volume> 63(1995), </volume> <pages> pp. 65-110. </pages>
Reference-contexts: Naturally the next question was whether the problem is in polynomial time for any fixed value of jT j. A polynomial time algorithm for this case was discovered by Robertson and 28 Seymour, as one of the main consequences of their Graph Minors series. The algorithm is given in <ref> [102] </ref>, but the proof of its correctness requires much of the machinery developed throughout the series of papers. Theorem 2.2.2 (Robertson-Seymour) For every fixed k, there is a polynomial-time algorithm for the disjoint paths problem in the case jT j = k. <p> As one striking example, the problem of deciding whether (G; T ) is realizable, when G is directed and jT j = 2, was shown to be NP-complete by Fortune, Hopcroft, and Wyllie [36]. This is in contrast to the algorithmic results of <ref> [111, 113, 116, 102] </ref> discussed in Section 2.2. Indeed, the disjoint paths problem is much less well understood in general in the directed setting than it is in the undirected setting. <p> In their series of papers proving, among other things, that the disjoint paths problem for a fixed number of terminal pairs is solvable in polynomial time <ref> [102] </ref>, Robertson and Seymour make use of another notion of "denseness" of surface embeddings | namely representativity. It turns out that our definition of densely embedded graphs could also have been expressed in these terms. <p> There are also some basic questions related to the "min-sum" objective function. We noted in Chapter 2 that work of Robertson and Seymour <ref> [102] </ref> provides a polynomial-time algorithm for deciding whether a set T of terminal pairs is realizable, for fixed jT j.
Reference: [103] <author> A. Schrijver, </author> <title> "The Klein bottle and multicommodity flow," </title> <type> Combinatorica 9(1989), </type> <pages> pp. 375-384. </pages>
Reference-contexts: There are a number of subsequent results on the solvability of the disjoint paths problem in cases when the underlying graph is planar and the terminals have some "nice" arrangement. In particular, see the papers of Okamura [85] and Schrijver <ref> [103] </ref>, both of which are discussed in Frank's survey [39]. There is a further elegant theorem along these lines due to Seymour [112], which we state here although we will not have occasion to use it.
Reference: [104] <author> A. Schrijver, </author> <title> "Disjoint circuits of prescribed homotopies in a graph on a compact surface," </title> <journal> J. Combinatorial Theory Ser. B, </journal> <volume> 51(1991), </volume> <pages> pp. 127-159. </pages>
Reference-contexts: To generalize this construction of a simulated network beyond the mesh itself, we require a multicommodity flow result of Okamura and Seymour [84], as well as some topological results on the disjoint paths problem due to Schrijver <ref> [104] </ref>. One interesting feature of the node-disjoint paths problem, from the perspective of these techniques, is that the gap between the fractional and unsplittable solutions can be very large, and thus the fractional solution provides very little information in designing our algorithm for the node-disjoint case (Chapter 9). <p> To do this, we make use of classical results of Okamura and Seymour [84] and Schrijver <ref> [104] </ref> on the disjoint paths problem. Our requirement that the vertex degrees be even arises throughout previous work on this problem, as will be seen in Chapter 2; it is not particularly limiting in practice, as it can be achieved by doubling every edge. <p> In [98], a similar result is also proved for graphs embedded on a cylinder. Schrijver proved what is in some sense the ultimate generalization of this result, for graphs embedded on an arbitrary surface <ref> [104] </ref>. Say that a curve R on is G-normal if it meets the drawing of G only at vertices. Let cr (R; G) denote the number of times R meets G, and mincr (R; G) the minimum of cr (R 0 ; G) over all R 0 ~ R. <p> i ) + i=1 = i i mincr (R; A i ): Thus, we obtain our third necessary condition. (iii) For every doubly odd closed curve R on we have cr (R; G) &gt; i=1 mincr (R; A i ): Schrijver proves that (i), (ii), and (iii) are indeed sufficient <ref> [104] </ref>. 33 Theorem 2.3.2 (Schrijver) Given closed curves A 1 ; : : : ; A k on , there exist node-disjoint cycles C 1 ; : : : ; C k in G such that C i ~ A i if and only if (i), (ii), and (iii) hold. <p> In particular, we need to show that all paths accepted by the simulated network can be routed in G. For this we make use of a theorem of Schrijver <ref> [104] </ref>; we show that there exist (log n) paths in G between the neighboring enclosures, such that all paths between all pairs are mutually disjoint. We make no attempt to optimize constants here. <p> The proof is based on Theorem 2.3.3, due to Schrijver <ref> [104] </ref>. Recall that a curve is G-normal if it meets the drawing of G only at vertices; we define its G-length to be the number of times it meets the drawing. <p> It is also worth noting that the algorithm of Schrijver <ref> [104] </ref> (see Section 2.3) can be applied to provide a polynomial-time algorithm for the related, but simpler, problem in which all terminals lie on the boundaries of a designated set of faces, and we require node-disjoint paths whose homotopies with respect to this set of faces is specified.
Reference: [105] <author> A. Schrijver, </author> <title> "Disjoint homotopic paths and trees in a planar graph," </title> <journal> Discrete and Computational Geometry, </journal> <volume> 6(1991), </volume> <pages> pp. 527-574. </pages>
Reference-contexts: A i ~ A 0 i , and the A 0 i are mutually disjoint. (ii) For every closed curve R on we have cr (R; G) i=1 mincr (R; A i ): It turns out that these are not sufficient for the existence of the disjoint cycles in G <ref> [105] </ref>; to obtain a set of sufficient conditions, we must consider the following type of parity condition.
Reference: [106] <author> A. Schrijver, </author> <title> "Finding k disjoint paths in a directed planar graph," </title> <journal> SIAM J. Computing, </journal> <volume> 23(1994), </volume> <pages> pp. 780-799. </pages>
Reference-contexts: Essentially none of the other results of the previous sections hold for the directed case. A limited number of results of the flavor of those in Section 2.2 have been proved; see for example <ref> [29, 38, 110, 106] </ref>. Similarly, nothing is known for directed graphs embedded on general surfaces that is as general as Schrijver's theorem 2.3.2. Thus it remains an interesting general problem to try identifying further special cases of the disjoint paths problem that are solvable in polynomial time in directed graphs.
Reference: [107] <author> A. Schrijver, </author> <type> personal communication, </type> <year> 1995. </year> <month> 187 </month>
Reference-contexts: A 0 i are mutually disjoint. (ii) For every essential curve R on we have cr (R; G) i=1 mincr (R; A i ): (iii) For every doubly odd closed curve R on we have cr (R; G) &gt; i=1 mincr (R; A i ): Now the following is known <ref> [107] </ref>, and can in fact be shown by a simple reduction to Theorem 2.3.2 Theorem 2.3.3 (Schrijver) Given curves A 1 ; : : : ; A k on , whose endpoints coincide with vertices of G on boundary components of , there exist node-disjoint paths P 1 ; : :
Reference: [108] <author> A. Schrijver, P.D. Seymour, P. Winkler, </author> <title> "The ring loading problem," </title> <note> submitted for pub-lication. </note>
Reference-contexts: Schrijver, Seymour, and Winkler showed that on the cycle, one can always find (in polynomial time) an unsplittable routing for the demands such that the amount of flow crossing any edge is at most 3 2 fl units more than is required for the fractional optimum <ref> [108] </ref>. <p> But this is far from the case for the general single-source ufp. In particular, the following result is immediate; it is similar to one of the examples used in Chapter 1. (Very similar hardness results can also be found in <ref> [26, 108] </ref>.) We say that a problem is strongly NP-complete if it remains NP-complete when all numbers in the input are written in unary; i.e., it is NP-complete even when the input numbers are polynomially bounded. 49 Proposition 3.0.1 The single-source ufp is NP-complete, even for a graph G 0 consisting <p> We define ff f (G; D; s), -(G; D; s), -f (G; D; s), and (G; D; s) analogously. As mentioned in Section 2.6, results of a similar flavor have been developed by Schrijver, Seymour, and Winkler for the case of multi-terminal problems on a uniform-capacity cycle <ref> [108] </ref>. For the problem of minimizing congestion, their results also provide an approximate solution that approaches the optimum value as the demand-to-capacity ratio goes to 0.
Reference: [109] <author> A. Seb-o, </author> <title> "The cographic multiflow problem: an epilogue," in Polyhedral Combinatorics, </title> <editor> W. Cook, P.D. Seymour, eds., </editor> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science (vol. </booktitle> <volume> 1), </volume> <year> 1990, </year> <pages> pp. 203-234. </pages>
Reference-contexts: Essentially, the problem here is to determine what one can say about the realizability of T by disjoint paths. Questions related to this are discussed in a survey by Seb-o <ref> [109] </ref>, which also contains many references.
Reference: [110] <author> P.D. Seymour, </author> <title> "Directed circuits on a torus," </title> <journal> Combinatorica, </journal> <volume> 11(1991), </volume> <pages> pp. 261-273. </pages>
Reference-contexts: Essentially none of the other results of the previous sections hold for the directed case. A limited number of results of the flavor of those in Section 2.2 have been proved; see for example <ref> [29, 38, 110, 106] </ref>. Similarly, nothing is known for directed graphs embedded on general surfaces that is as general as Schrijver's theorem 2.3.2. Thus it remains an interesting general problem to try identifying further special cases of the disjoint paths problem that are solvable in polynomial time in directed graphs.
Reference: [111] <author> P.D. Seymour, </author> <title> "Disjoint paths in graphs," </title> <journal> Discrete Math., </journal> <volume> 29(1980), </volume> <pages> pp. 293-309. </pages>
Reference-contexts: Even the case jT j = 2 turned out to be quite non-trivial, and it was not until 1980 that three independent solutions emerged, due to Seymour <ref> [111] </ref>, Shiloach [113], and Thomassen [116]. Theorem 2.2.1 (Seymour, Shiloach, Thomassen) There is a polynomial-time algorithm for the disjoint paths problem in the case jT j = 2. <p> As one striking example, the problem of deciding whether (G; T ) is realizable, when G is directed and jT j = 2, was shown to be NP-complete by Fortune, Hopcroft, and Wyllie [36]. This is in contrast to the algorithmic results of <ref> [111, 113, 116, 102] </ref> discussed in Section 2.2. Indeed, the disjoint paths problem is much less well understood in general in the directed setting than it is in the undirected setting.
Reference: [112] <author> P.D. Seymour, </author> <title> "On odd cuts and planar multicommodity flows," </title> <journal> J. London Math. Soc., </journal> <volume> 42(1981), </volume> <pages> pp. 178-192. </pages>
Reference-contexts: In particular, see the papers of Okamura [85] and Schrijver [103], both of which are discussed in Frank's survey [39]. There is a further elegant theorem along these lines due to Seymour <ref> [112] </ref>, which we state here although we will not have occasion to use it. Theorem 2.2.5 (Seymour) Let G be planar, with terminal pairs T , and suppose that G + is both planar and Eulerian. Then T is realizable in G if and only if the cut condition holds. <p> Much of our work here is motivated by the investigation of the relationship between fractional and unsplittable flow, both as a means to provide approximation algorithms and as an end in itself. Seymour formulated the following conjecture <ref> [112] </ref>, which can easily be motivated by examples such as Figure 2-1 and theorems such as 2.2.3 and 2.2.5. Seymour's Conjecture: If all capacities and demands are equal to 1, and a set T of terminals is fractionally realizable, then it is realizable in half-integers. <p> However, as Seymour observed <ref> [112] </ref>, things seem to be much better behaved if we consider the relation between fractional flow and half-integral flow.
Reference: [113] <author> Y. Shiloach, </author> <title> "A polynomial solution to the undirected two paths problem," </title> <journal> Journal of the ACM, </journal> <volume> 27(1980), </volume> <pages> pp. 445-456. </pages>
Reference-contexts: Even the case jT j = 2 turned out to be quite non-trivial, and it was not until 1980 that three independent solutions emerged, due to Seymour [111], Shiloach <ref> [113] </ref>, and Thomassen [116]. Theorem 2.2.1 (Seymour, Shiloach, Thomassen) There is a polynomial-time algorithm for the disjoint paths problem in the case jT j = 2. <p> As one striking example, the problem of deciding whether (G; T ) is realizable, when G is directed and jT j = 2, was shown to be NP-complete by Fortune, Hopcroft, and Wyllie [36]. This is in contrast to the algorithmic results of <ref> [111, 113, 116, 102] </ref> discussed in Section 2.2. Indeed, the disjoint paths problem is much less well understood in general in the directed setting than it is in the undirected setting.
Reference: [114] <author> D. Sleator, R. Tarjan, </author> <title> "Amortized efficiency of list update and paging rules," </title> <journal> Comm. ACM, </journal> <volume> 23(1985), </volume> <pages> pp. 202-208. </pages>
Reference: [115] <author> E. Tardos, </author> <title> "A strongly polynomial minimum-cost circulation algorithms," </title> <journal> Combinatorica, </journal> <volume> 5(1985), </volume> <pages> pp. 247-255. </pages>
Reference-contexts: This is NP-hard for k = 2 and variable L [73], and for L = 5 and variable k [52]. Related to this is the well-known minimum-cost flow problem, which is solvable in polynomial time (see <ref> [32, 115, 48] </ref>) For our purposes, we can view minimum-cost flow as addressing the following problem: for a given k, find k edge-disjoint s-t paths in G whose total length is minimum. Thus, a fundamental open problem concerns the following "max-min" objective function.
Reference: [116] <author> C. Thomassen, </author> <title> "2-linked graphs," </title> <journal> European J. Combinatorics, </journal> <volume> 1(1980), </volume> <pages> pp. 371-378. </pages>
Reference-contexts: Even the case jT j = 2 turned out to be quite non-trivial, and it was not until 1980 that three independent solutions emerged, due to Seymour [111], Shiloach [113], and Thomassen <ref> [116] </ref>. Theorem 2.2.1 (Seymour, Shiloach, Thomassen) There is a polynomial-time algorithm for the disjoint paths problem in the case jT j = 2. <p> As one striking example, the problem of deciding whether (G; T ) is realizable, when G is directed and jT j = 2, was shown to be NP-complete by Fortune, Hopcroft, and Wyllie [36]. This is in contrast to the algorithmic results of <ref> [111, 113, 116, 102] </ref> discussed in Section 2.2. Indeed, the disjoint paths problem is much less well understood in general in the directed setting than it is in the undirected setting.
Reference: [117] <author> T. Todd, </author> <title> "The token grid: multidimensional media access for local and metropolitan networks," </title> <booktitle> Proc. INFOCOM, </booktitle> <year> 1992, </year> <pages> pp. 2415-2421. </pages>
Reference-contexts: It is one of the most common parallel architectures; and many large-scale networks for high-speed communication are configured as mesh-like, nearly planar graphs <ref> [12, 22, 90, 66, 81, 117] </ref>. Finally, we note that the mdp remains NP-complete when the underlying graph is restricted to be the mesh [65]. We provide a constant-factor approximation for the ufp on the (uniform-capacity) two-dimensional mesh.
Reference: [118] <author> D. Wagner, K. Weihe, </author> <title> "A linear time algorithm for multicommodity flow in planar graphs," </title> <booktitle> Proc. First European Symposium on Algorithms, </booktitle> <year> 1993, </year> <pages> pp. 384-395. </pages>
Reference-contexts: The proof also yields a polynomial-time algorithm for finding the paths. A number of more efficient algorithms have been developed for this case, culminating in a recent linear time (and quite practical) algorithm of Wagner and Weihe <ref> [118] </ref>. The requirement that G + be Eulerian is called the parity condition, and it appears in much of the work on exactly solvable special cases.
Reference: [119] <author> D.J.A. Welsh, </author> <title> Matroid Theory, </title> <publisher> London: Academic Press, </publisher> <year> 1976. </year> <month> 188 </month>
Reference-contexts: taking the one of greater value gives us Corollary 3.3.4 There is a constant-factor approximation algorithm for ff (G; D; s). 3.4 Routing in Rounds In order to obtain a constant-factor approximation for the problem of routing in rounds, we make use of a classical connection between flows and matroids <ref> [87, 119] </ref>. <p> Note that the exchange property ensures that all bases have the same cardinality. If X U , we define the rank of X, denoted r (X), to be the maximum cardinality of an independent subset of X. We refer the reader to a book such as <ref> [119] </ref> for further background on matroids. There are a number of basic problems that are computationally intractable for set systems in general, but which are tractable when the set system is a matroid.
References-found: 119

