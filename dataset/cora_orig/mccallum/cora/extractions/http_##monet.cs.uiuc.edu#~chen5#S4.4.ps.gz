URL: http://monet.cs.uiuc.edu/~chen5/S4.4.ps.gz
Refering-URL: http://monet.cs.uiuc.edu/~chen5/
Root-URL: http://www.cs.uiuc.edu
Email: klarag@cs.uiuc.edu  
Title: Feedback Consolidation and Timeout Algorithms for Point-to-Multipoint ABR Service  
Author: Hung-Shiun Alex Chen, Klara Nahrstedt 
Address: fchen5,  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Abstract: The "wait-for-all" feedback consolidation algorithm avoids consolidation noise, but suffers from a slow transient response. Probabilistic Aggregation and Fast Overload Indication techniques have been proposed to preserve the advantages of the "wait-for-all" algorithm and improve its slow transient response. However, these techniques introduce a new "threshold setting" problem. We developed a new consolidation algorithm to provide a fast transient response, a low consolidation noise and flexibility in determining the threshold. In addition, we developed a dynamic timeout mechanism to handle the non-responsive branches where the membership within a multicast session changes due to frequent joining/leaving of members (leaves). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Jiang, E. W. Zegura, and M. H. Ammar, </author> <title> "Improved Consolidation Algorithms for Point-to-Multipoint ABR Service," </title> <booktitle> Proceedings of ATM'98 Workshop, </booktitle> <month> May </month> <year> 1998. </year>
Reference-contexts: It is called the consolidation noise problem. Among all previous proposed consolidation schemes, the "wait-for-all" scheme [3] avoids consolidation noise by collecting feedbacks from all branches before sending a BRM to the source, but suffers from a slow transient response. Jiang et al. <ref> [1] </ref> propose a probabilistic aggregation technique to modify the "wait-for-all" algorithm to improve its slow transient response. Fahmy et al. [2] argue that an overload condition should be immediately reported to the source without the need to wait for feedbacks from all branches. <p> The paper is outlined as follows: Section 2 introduces a probabilistic consolidation algorithm which is an extension of the algorithm presented in <ref> [1, 2] </ref> to achieve fast transient response for network overload situation and reduce the consolidation noise. Section 3 presents a timeout mechanism to handle the non-responsive branches. Selected results are presented and analyzed in Section 4. <p> Figure 2 (a) shows the probability p function (a step function) to send an extra BRM cell as defined by Fahmy et al. in [2]. Jiang et al. <ref> [1] </ref> present a fixed probability function with value P K over interval (0,1) to send an extra BRM cell as shown in Figure 2 (b). <p> In the results that follow, "Jiang" denotes Jiang's algorithm <ref> [1] </ref>; "Fahmy" denotes Fahmy's algorithm [2]; and "Chen" denotes our algorithm. Throughout our experiments, the following parameter values are used: (1) All links have a bandwidth of 150 Mbps. (2) All point-to-multipoint traffic flows from the root to the leaves of the tree. <p> We developed a hybrid approach to span the speed-overhead spectrum. We also developed a dynamic timeout algorithm to handle the "non-responsive" branches in case the membership of a multicast connection changes dynamically. Through a set of simulations, we compared the performance of our new algorithms with Jiang's <ref> [1] </ref> and Fahmy's [2] algorithms. Our measurements consistently showed that our consolidation algorithm reached the target rate as fast (and often faster) as any of the other schemes which we compared with. In addition, our consolidation algorithm provided a flexibility in determining the threshold.
Reference: [2] <author> S. Fahmy, R. Jain, R. Goyal, B. Vandalore, S. Kalyanara-man, S. Kota, and P. Samudra, </author> <title> "Feedback Consolidation Algorithms for ABR Point-to-Multipoint Connections in ATM Networks," </title> <booktitle> Proceedings of IEEE INFOCOM 1998, </booktitle> <month> March </month> <year> 1998. </year>
Reference-contexts: Jiang et al. [1] propose a probabilistic aggregation technique to modify the "wait-for-all" algorithm to improve its slow transient response. Fahmy et al. <ref> [2] </ref> argue that an overload condition should be immediately reported to the source without the need to wait for feedbacks from all branches. Both algorithms use a threshold 2 to determine if an extra RM cell should be generated. However, determining the threshold is a tricky problem. <p> The paper is outlined as follows: Section 2 introduces a probabilistic consolidation algorithm which is an extension of the algorithm presented in <ref> [1, 2] </ref> to achieve fast transient response for network overload situation and reduce the consolidation noise. Section 3 presents a timeout mechanism to handle the non-responsive branches. Selected results are presented and analyzed in Section 4. <p> Section 3 presents a timeout mechanism to handle the non-responsive branches. Selected results are presented and analyzed in Section 4. In Section 5, we conclude with a brief summary. 2 Probabilistic Consolidation 2.1 New Feedback Consolidation Algorithm The overload condition definition (as given in <ref> [2] </ref>) specifies that the current collected minimum explicit rate is less than the explicit rate in the last returned BRM cell times a predefined threshold, say oe. Note that oe is a value between 0 and 1. <p> Figure 2 (a) shows the probability p function (a step function) to send an extra BRM cell as defined by Fahmy et al. in <ref> [2] </ref>. Jiang et al. [1] present a fixed probability function with value P K over interval (0,1) to send an extra BRM cell as shown in Figure 2 (b). <p> The main idea behind our algorithm presented next is that the slow transient response problem should be avoided when an overload situation has been detected <ref> [2] </ref>. Figure 2 (c) shows the probability function p in our algorithm. Our algorithm always sends an extra BRM cell if an overload condition is detected ( &lt; oe). <p> In the results that follow, "Jiang" denotes Jiang's algorithm [1]; "Fahmy" denotes Fahmy's algorithm <ref> [2] </ref>; and "Chen" denotes our algorithm. Throughout our experiments, the following parameter values are used: (1) All links have a bandwidth of 150 Mbps. (2) All point-to-multipoint traffic flows from the root to the leaves of the tree. <p> We also developed a dynamic timeout algorithm to handle the "non-responsive" branches in case the membership of a multicast connection changes dynamically. Through a set of simulations, we compared the performance of our new algorithms with Jiang's [1] and Fahmy's <ref> [2] </ref> algorithms. Our measurements consistently showed that our consolidation algorithm reached the target rate as fast (and often faster) as any of the other schemes which we compared with. In addition, our consolidation algorithm provided a flexibility in determining the threshold.
Reference: [3] <author> W. Ren, K. Y. Siu, and H. Suzuki, </author> <title> "On the Performance of Congestion Control Algorithms for Multicast ABR Service in ATM," </title> <booktitle> Proc. of IEEE ATM'96, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: It is called the consolidation noise problem. Among all previous proposed consolidation schemes, the "wait-for-all" scheme <ref> [3] </ref> avoids consolidation noise by collecting feedbacks from all branches before sending a BRM to the source, but suffers from a slow transient response. Jiang et al. [1] propose a probabilistic aggregation technique to modify the "wait-for-all" algorithm to improve its slow transient response.
Reference: [4] <author> X. Zhang, K. G. Shin, D. Saha, and D. </author> <title> Kandlur "Scalable Flow Control for Multicast ABR Services, Part I: Algorithms and Modeling," </title> <note> Submitted to IEEE INFOCOM'99, </note> <month> July </month> <year> 1998. </year>
Reference-contexts: For the "wait-for-all" algorithm family, a non-responsive branch will prevent the branch point from sending the BRM cells upstream. Therefore, a timeout mechanism must be developed in a branch point to handle the non-responsive branches. A static timeout scheme presented by Zhang et al. <ref> [4] </ref> is not appropriate for the multicast tree where the leaves are located in various distances to a branch point and the membership dynamically changes due to joining/leaving of leaves. We design a dynamic timeout scheme which also scales to very large multicast trees. <p> The algorithm, written in pseudo-code, is presented in [6]. 3 Timeout Algorithm Zhang et al. <ref> [4] </ref> propose to use a predetermined threshold counter N nrt and a variable no resp timer which is initialized to N nrt . Each time when a branch point receives an FRM cell, the multicast connection's no resp timer is decreased by one. <p> Second, we start the Timeout Update algorithm in this switch. If this branch is rm-active, no further action is needed. The algorithm, written in pseudo-code, is presented in [6]. 3.2 Simplification In comparison with the Zhang algorithm <ref> [4] </ref>, the number of timeout values (N nrt ) and tracking variables (no resp timer) used in our algorithm is N branches times to the one of Zhang algorithm, where N branches is the number of branches in this switch.
Reference: [5] <author> ATM Forum, </author> <title> "ATM Traffic Management Specification Version 4.0,", </title> <month> April </month> <year> 1996. </year>
Reference-contexts: The units of the FRTT, Trm, and ICR parameters are microseconds, milliseconds, cell/second <ref> [5] </ref>. T imeout d = d F RT T min (T rm; Nrm e fi fi (1) where fi is a scaling factor and fi &gt; 1. We simply choose fi to be 2.
Reference: [6] <author> H-S. A. Chen and K. Nahrstedt, </author> <title> "Feedback Consolidation and Timeout Algorithms for Point-to-Multipoint ABR Service", </title> <type> Technique Report, </type> <institution> UIUCDCS-R-99-2083, UILU-ENG-99-1704, Department of Computer Science, University of Illinois at Urbana- Champaign, </institution> <month> February </month> <year> 1999. </year>
Reference-contexts: To achieve a graceful rate decrease, the Fahmy and Jiang algorithms have to set the threshold (or probability) close to 1, whereas our algorithm provides adaptability in determining the threshold to decrease the rate gracefully. The algorithm, written in pseudo-code, is presented in <ref> [6] </ref>. 3 Timeout Algorithm Zhang et al. [4] propose to use a predetermined threshold counter N nrt and a variable no resp timer which is initialized to N nrt . Each time when a branch point receives an FRM cell, the multicast connection's no resp timer is decreased by one. <p> Second, we start the Timeout Update algorithm in this switch. If this branch is rm-active, no further action is needed. The algorithm, written in pseudo-code, is presented in <ref> [6] </ref>. 3.2 Simplification In comparison with the Zhang algorithm [4], the number of timeout values (N nrt ) and tracking variables (no resp timer) used in our algorithm is N branches times to the one of Zhang algorithm, where N branches is the number of branches in this switch.
References-found: 6

