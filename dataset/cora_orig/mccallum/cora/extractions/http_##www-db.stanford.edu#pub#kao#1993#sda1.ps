URL: http://www-db.stanford.edu/pub/kao/1993/sda1.ps
Refering-URL: http://www.cs.umd.edu/users/beynon/journal-club.html
Root-URL: 
Title: Deadline Assignment in a Distributed Soft Real-Time System  
Author: Ben Kao Hector Garcia-Molina 
Keyword: soft real-time, distributed systems, deadline assignment, scheduling.  
Date: April 16, 1993  
Abstract: In a distributed environment, tasks often have processing demands on multiple different sites. A distributed task is usually divided up into several subtasks, each one to be executed at some site in order. In a real-time system, an overall deadline is usually specified by an application designer indicating when a distributed task is to be finished. However, the problem of how a global deadline is automatically translated to the deadline of each individual subtask has not been well studied. This paper examines (through simulations) four strategies for subtask deadline assignment in a distributed soft real-time environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Abbott and H. Garcia-Molina. </author> <title> Scheduling real-time transactions. </title> <booktitle> In ACM SIGMOD Record, </booktitle> <pages> pages 1-12, </pages> <year> 1988. </year>
Reference-contexts: In Section 8 we present conclusions. 2 Related Work A lot of research has been done on real-time scheduling in various environments, be it I/O scheduling, processor scheduling, or transaction scheduling <ref> [3, 1, 2, 8] </ref>. However, most of this work either: * Focuses on the characteristics of a specific system component and evaluates the performance of various scheduling policies when applied to that component.
Reference: [2] <author> R. Abbott and H. Garcia-Molina. </author> <title> Scheduling real-time transactions: a performance evaluation. </title> <booktitle> In Procceedings of the 14th VLDB Conference, </booktitle> <year> 1988. </year>
Reference-contexts: In Section 8 we present conclusions. 2 Related Work A lot of research has been done on real-time scheduling in various environments, be it I/O scheduling, processor scheduling, or transaction scheduling <ref> [3, 1, 2, 8] </ref>. However, most of this work either: * Focuses on the characteristics of a specific system component and evaluates the performance of various scheduling policies when applied to that component. <p> Incidentally, in a study of soft real-time database scheduling and concurrency control algorithms <ref> [2] </ref>, it was also observed that errors in execution time estimates do not significantly affect performance.
Reference: [3] <author> R. Abbott and H. Garcia-Molina. </author> <title> Scheduling I/O requests with deadlines: a performance evaluation. </title> <booktitle> In Proceedings of IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 113-124, </pages> <year> 1990. </year>
Reference-contexts: In Section 8 we present conclusions. 2 Related Work A lot of research has been done on real-time scheduling in various environments, be it I/O scheduling, processor scheduling, or transaction scheduling <ref> [3, 1, 2, 8] </ref>. However, most of this work either: * Focuses on the characteristics of a specific system component and evaluates the performance of various scheduling policies when applied to that component.
Reference: [4] <author> R. Bettati and J. W. S. Liu. </author> <title> Algorithms for end-to-end scheduling to meet deadlines. </title> <booktitle> In Proceedings of the 2nd IEEE Conference on Parallel and Distributed Systems, </booktitle> <year> 1990. </year>
Reference-contexts: As we have stated, here we look instead at an environment where local schedulers are autonomous and subtasks cannot move. There are however at least two studies that are closely related to our approach and the SDA problem. Bettati and Liu <ref> [4, 5] </ref> discussed the problem of scheduling subtasks in a hard real-time distributed environment.
Reference: [5] <author> R. Bettati and J. W. S. Liu. </author> <title> End-to-end scheduling to meet deadlines in distributed systems. </title> <booktitle> In Proceedings of IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 452-459, </pages> <year> 1992. </year>
Reference-contexts: As we have stated, here we look instead at an environment where local schedulers are autonomous and subtasks cannot move. There are however at least two studies that are closely related to our approach and the SDA problem. Bettati and Liu <ref> [4, 5] </ref> discussed the problem of scheduling subtasks in a hard real-time distributed environment.
Reference: [6] <author> M. Carey, R. Jauhari, and M. Livny. </author> <title> Priority in DBMS resource scheduling. </title> <booktitle> In Proceedings of the 15th VLDB Conference, </booktitle> <pages> pages 397-410, </pages> <year> 1989. </year>
Reference-contexts: However, most of this work either: * Focuses on the characteristics of a specific system component and evaluates the performance of various scheduling policies when applied to that component. For example, there have been studies on real-time database systems <ref> [6] </ref>, or communication systems [7, 12]. 4 These studies make the tacit assumption that the deadlines of tasks when they arrive at the component are known.
Reference: [7] <author> J. F. Kurose, M. Schwartz, and Y. Yemini. </author> <title> Multiple-access protocols and time-constrained communication. </title> <journal> Computing Survey, </journal> <volume> 16(1) </volume> <pages> 43-70, </pages> <year> 1984. </year>
Reference-contexts: However, most of this work either: * Focuses on the characteristics of a specific system component and evaluates the performance of various scheduling policies when applied to that component. For example, there have been studies on real-time database systems [6], or communication systems <ref> [7, 12] </ref>. 4 These studies make the tacit assumption that the deadlines of tasks when they arrive at the component are known.
Reference: [8] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <year> 1973. </year>
Reference-contexts: In Section 8 we present conclusions. 2 Related Work A lot of research has been done on real-time scheduling in various environments, be it I/O scheduling, processor scheduling, or transaction scheduling <ref> [3, 1, 2, 8] </ref>. However, most of this work either: * Focuses on the characteristics of a specific system component and evaluates the performance of various scheduling policies when applied to that component.
Reference: [9] <author> M. Livny. </author> <title> DeNet user's guide. </title> <type> Technical report, </type> <institution> University of Wisconsin-Madison, </institution> <year> 1990. </year>
Reference-contexts: The same argument can be made for all the modeling assumptions we are about to make. Our point is that only by selecting a small number of simple, key parameters will we be able to understand the fundamental interactions. Our simulator is written in the simulation language DeNet <ref> [9] </ref>. Each simulation experiment (generating one data point) consists of two simulation runs, each lasting one million time units (at least 100,000 tasks are generated per run, many more for high load experiments).
Reference: [10] <author> H. Pang, M. Livny, and M. J. Carey. </author> <title> Transaction scheduling in multiclass real-time database systems. </title> <booktitle> In Proceedings of IEEE Real-Time Systems Symposiuim (to appear), </booktitle> <year> 1992. </year>
Reference-contexts: In their work, different variations of the model are studied, based on different assumptions on subtask execution time (e.g., whether all subtasks have the same execution time). Other variations, like periodic tasks, are also discussed. Another interesting paper <ref> [10] </ref> by Pang, Livny, and Carey investigates the problem of "bias" against longer transactions under "earliest-deadline-based" scheduling policies in real-time database systems. The study shows that long transactions miss more deadlines compared to short ones. <p> By monitoring the system and gathering runtime statistics, a parameter in computing virtual deadlines is carefully adjusted in such a way that the linear correlation between miss ratio and transaction size is minimized. 5 Our work is similar to <ref> [10] </ref> in that we both try to assign earlier deadlines to transactions (or tasks). However, in their case there is a single scheduler for a single database system. For our problem, there are multiple "resources" handled by independent schedulers.
Reference: [11] <author> J. Stankovic, K. Ramamritham, and S. Cheng. </author> <title> Evaluation of a flexible task scheduling algorithm for distributed hard real-time systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 34(12) </volume> <pages> 1130-1143, </pages> <year> 1985. </year>
Reference-contexts: They do not concern themselves on whether these tasks are really subtasks of a global task that involves multiple components. * Assumes a global scheduling strategy that controls in some way all component schedulers. For example, in <ref> [11] </ref>, schedulers interact with each other to decide the best place to execute a subtask. As we have stated, here we look instead at an environment where local schedulers are autonomous and subtasks cannot move.
Reference: [12] <author> W. Zhao and K. Ramamritham. </author> <title> Virtual time CSMA protocols for hard real-time communication. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(8) </volume> <pages> 938-952, </pages> <year> 1987. </year> <month> 25 </month>
Reference-contexts: However, most of this work either: * Focuses on the characteristics of a specific system component and evaluates the performance of various scheduling policies when applied to that component. For example, there have been studies on real-time database systems [6], or communication systems <ref> [7, 12] </ref>. 4 These studies make the tacit assumption that the deadlines of tasks when they arrive at the component are known.
References-found: 12

