URL: ftp://ftp.cs.brown.edu/pub/techreports/94/cs94-22.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-94-22.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 0
Reference: [1] <editor> F. Bancilhon, C. Delobel, and P. Kanellakis, editors. </editor> <title> Building an Object-Oriented Database System: The Story of O 2 , chapter 1. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference: [2] <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurreny Control and Recovery in Database Systems. </title> <publisher> Addison Westley, </publisher> <year> 1987. </year>
Reference: [3] <author> A. Brown and J. Rosenberg. </author> <title> Persistent object stores: An implementation technique. </title> <booktitle> In The Fourth International Workshop on Persistent Object Systems, </booktitle> <year> 1990. </year>
Reference-contexts: It does not restrict the interface of the storage class, but it does have some performance implications. A performance critical operation in an OODB is the mapping of logical OID s to physical data locations and there are many ways this mapping can occur <ref> [11, 5, 3] </ref>. Previous MOM designs did not include this mapping. The rationale was that storage classes should implement what ever logical to physical mapping that best suits its semantics.
Reference: [4] <author> Michael J. Carey et al. </author> <title> Object and file management in the EXODUS extensible database system. </title> <booktitle> In Proceedings of the Twelfth International Conference on Very Large Data Bases, </booktitle> <pages> pages 91-100, </pages> <address> Kyoto, Japan, </address> <month> August </month> <year> 1986. </year>
Reference: [5] <author> G. Delott. </author> <title> Performance improvements in the observer object server. </title> <type> Masters thesis, </type> <institution> Department of Computer Science, Brown University, </institution> <year> 1989. </year>
Reference-contexts: It does not restrict the interface of the storage class, but it does have some performance implications. A performance critical operation in an OODB is the mapping of logical OID s to physical data locations and there are many ways this mapping can occur <ref> [11, 5, 3] </ref>. Previous MOM designs did not include this mapping. The rationale was that storage classes should implement what ever logical to physical mapping that best suits its semantics.
Reference: [6] <author> B. Koch et al. </author> <title> Cache coherency and storage management in a persistent object system. </title> <booktitle> In The Fourth International Workshop on Persistent Object Systems, </booktitle> <year> 1990. </year> <month> 22 </month>
Reference: [7] <author> M. Atkinson et al. </author> <title> The persistent object management system. </title> <type> Technical Report PRRR-1, </type> <institution> The Universities of Glasgow and St. Andrews, </institution> <year> 1983. </year>
Reference: [8] <author> M. Herlihy. </author> <title> Apologising versus asking permission: Optimistic concurrency control for abstract datatypes. </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 15(1) </volume> <pages> 96-124, </pages> <month> March </month> <year> 1990. </year>
Reference: [9] <author> M. F. Hornick and S. B. Zdonik. </author> <title> A shared, segmented memory system for and object-oriented database. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 5(1) </volume> <pages> 70-85, </pages> <month> January </month> <year> 1987. </year>
Reference: [10] <author> D. Langworthy and S. Zdonik. </author> <title> Extensibility and asynchrony in the brown object storage system. </title> <editor> In V. Kumar, editor, </editor> <title> Performance of Concurrenty Controll Mechanisms in Centralized Database Management Systems. </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: The policies that MOM provides can also be customized to take advantage of storage class semantics. The BOSS system operates in a network of Sparc 10's running SunOS and the performance of the unoptimized system is within an order of magnitude of commercial systems <ref> [10] </ref>.
Reference: [11] <author> E. Moss. </author> <title> The mneme persistent object store. </title> <type> Technical Report TR 89-107, COINS, </type> <institution> University of Massachusetts at Amherst, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: It does not restrict the interface of the storage class, but it does have some performance implications. A performance critical operation in an OODB is the mapping of logical OID s to physical data locations and there are many ways this mapping can occur <ref> [11, 5, 3] </ref>. Previous MOM designs did not include this mapping. The rationale was that storage classes should implement what ever logical to physical mapping that best suits its semantics.
Reference: [12] <author> E. Shekita and M. Zwilling. Cricket: </author> <title> A mapped, persistent object store. </title> <booktitle> In The Fourth International Workshop on Persistent Object Systems, </booktitle> <year> 1990. </year>
Reference: [13] <author> W. Weihl and B. Liskov. </author> <title> Implementation of resilient atomic data types. </title> <booktitle> In ACM Transactions on Programing Languages and Systems, </booktitle> <month> April </month> <year> 1985. </year> <month> 23 </month>
Reference-contexts: A modifier which does not observe the state of the underlying object is said to be a blind operator <ref> [13] </ref>. Notify is such an operator. Blind operators never cause semantic conflicts, but can cause physical conflicts. BOSS recovery has a physical requirement that modifiers be linked together in a linear order. In Weihl's terminology, modifiers cannot commute. For Cond this means that Notify can cause an abort.
References-found: 13

