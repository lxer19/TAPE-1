URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1997/TR52.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: -crawfis, moeller-@cis.ohio-state.edu, max2@llnl.gov  
Phone: 3  
Title: Fast Volume Rendering of Curvilinear Data Sets Using a Splatting Approach  
Author: Torsten Mller , Roger Crawfis , Nelson Max 
Address: Columbus, Ohio  Mail Stop L-639 7000 East Avenue Livermore, CA 94550, USA  
Affiliation: 1 Department of Computer and Information Science 2 The Advanced Computing Center for the Arts and Design The Ohio State University  Lawrence Livermore National Laboratories  
Abstract: We develope a new algorithm, that visualizes curvilinear grids fast and accurately . Our algorithm is based on the concept of splatting. In order to reconstruct the underlying function we use a Gaussian r econstruction kernel. In computational domain the sampling of the data field is regular and therefore we have spherical reconstruction kernels. However, the mapping into physical space is nonlinear and the spherical reconstruction kernels from computational space are mapped to what we call bean-shapes, which are usually not ellipsoids. We approximate these beanshapes with ellipsoids and project them to the screen. Our algorithm is similar to Maos splatting algorithm, but is much more efficient and less computationally involved. It also mor e faithfully represents the underlying data. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Akeley K., </author> <title> RealityEngine Graphics, </title> <booktitle> Computer Graphics (SIGGRAPH 93 Proceedings), </booktitle> <pages> pp. </pages> <address> 109--116, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Developing Volume Rendering techniques to visualize these dif ferent data sets has been a challenge in recent years. Interactive rates are needed so as to give better visual clues for the three dimensional appearance of objects. Some new algorithms achieve interactive rendering rates [2][10] using fast rendering hardware <ref> [1] </ref>. Unfortunately, these algorithms only work on regular or uniform data sets. The interactive volume rendering of curvilinear or unstructured data sets is more problematic here to date. We present a new algorithm, that visualizes three dimensional curvilinear grids fast using a splat-ting technique for volume rendering.
Reference: [2] <author> Cabral B., Cam N., Foran J., </author> <title> Accelerated Volume Rendering and Tomographic Reconstruction Using Texture Mapping Hardware, </title> <booktitle> Proceedings of the 1994 Symposium on Volume Visualization, </booktitle> <pages> pp. 91-98, </pages> <month> October </month> <year> 1996. </year>
Reference: [3] <author> Crawfis R., Max N., </author> <title> Textured Splats for 3D Scalar and Vector Field Visualization, </title> <booktitle> Proceedings of IEEE Conference on Visualization 1993, Edited by Nielson and Bergeron, </booktitle> <address> San Jose: </address> <publisher> IEEECS Press, </publisher> <pages> pp. 261-266, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Avoiding the resampling ensures that we don t miss important detail. Focusing solely on the grid data points also allows us to calculate the Jacobian (local curvature) more accurately and efficiently than Maos trilinear interpolation. This is readily apparent in our image quality. Finally, we use the textured splats <ref> [3] </ref> to render the ellipsoids ef ficiently with common hardware. We show the necessary extensions needed for that algorithm to project the ellipsoids. In particular, we show how this can be accomplished with a simple scaling transform and a rotational transform. 3. <p> Next we compute the orientation and extent of the major axes of the 2D ellipse. Finally, we can scale a 2D (spherical) lookup table in the major directions and then rotate it appropriately (Line 9 through 11). This idea is very useful for our implementation using textured splats <ref> [3] </ref>. Here the lookup table is a 2D textured polygon (quadrilateral). This quadrilateral is scaled in the x and the y direction, rotated and finally projected onto the image plane. 4. <p> This quadrilateral is scaled in the x and the y direction, rotated and finally projected onto the image plane. 4. Implementation and Results As we have mentioned in Section 3.2 our implementation is based on textured splats as described in <ref> [3] </ref>. Since a Gaussian kernel has inf inite extend we used the approximation to the Gaussian as proposed by Crawfis and Max [3]. We implemented this algorithm in OpenGL on an SGI Crimson RealityEngine with a 100 MHz R4000 processor. We tested our algorithm on 3 dif ferent data sets. <p> Implementation and Results As we have mentioned in Section 3.2 our implementation is based on textured splats as described in <ref> [3] </ref>. Since a Gaussian kernel has inf inite extend we used the approximation to the Gaussian as proposed by Crawfis and Max [3]. We implemented this algorithm in OpenGL on an SGI Crimson RealityEngine with a 100 MHz R4000 processor. We tested our algorithm on 3 dif ferent data sets. The bluntf in data set (32x32x40) is displayed in Fig. 5 and we focus in on one section in Fig. 6. <p> Finally the jet engine data set (250x180x9) is displayed in Fig. 8. For all data set we have chosen the overlap of the reconstruction kernels in computational space to be 0.6 (i.e. s=1.6). This overlap has been found to be optimal by others <ref> [3] </ref>. The timings for these images are summarized in T able 1. (user time and wall clock time are not synchronized, we are currently investigating this fact) Note, that Maos timings were based on a R4400 machine running at 200MHz.
Reference: [4] <author> Garrity M.P., </author> <title> Raytracing Irregular Volume Data, </title> <booktitle> Computer Graphics (San Diego Workshop on Volume Visualization), </booktitle> <volume> vol. 24(5), </volume> <pages> pp. 35-41, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: In Section 3 we introduce our new algorithm. The speed of our algorithm and the quality of the rendered images is assessed in Section 4. Finally in Section 5 we summarize our results and discuss possible extensions of our work. 2. Related Work Garrity <ref> [4] </ref> uses an efficient ray tracing implementation to render unstructured data sets. He intersects the ray with all the faces of the current cell. The next intersection closest to the entry point is then the exit point of the cell.
Reference: [5] <author> Mao X., Hong L., Kaufman A., </author> <title> Splatting of curvilinear Grids, </title> <booktitle> Proceedings of IEEE Conference on Visualization 1995, </booktitle> <pages> pp. 61-68, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: Fig. 4 illustrates now that spherical reconstruction kernels perform poorly on a curvilinear grid. Fig. 4 shows the blunt-fin data set. We can see, that the sampling is too sparse and in some areas the sampling is too dense. Maos et al. <ref> [5] </ref> solution is to redistribute many new points according to the curvature of the grid and the size of the grid cells using a Poisson disk distribution. They interpolate the values of these points from the eight neighboring grid points by trilinear interpolation.
Reference: [6] <author> Max N., Hanrahan P., Crawfis R., </author> <title> Area and Volume Coherence for Efficient Visualization of 3D Scalar Functions, </title> <booktitle> Computer Graphics (San Diego Workshop on Volume Visualization), </booktitle> <volume> vol. 24(5), </volume> <pages> pp. 27-33, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: The opacity and color can be computed for the vertices of these triangles. Then the color and opacity are linearly interpolated across the triangles. All triangles produced can be rendered very quickly using special graphics hardware. Max et al. <ref> [6] </ref> present a similar algorithm for convex polyhedra or scattered data sets. Under certain simplifying assumptions, they also compute the exact volume integral along the ray analytically. In the slicing algorithm by Yagel et al. [10] the underlying grid is cut into slices parallel to the viewing direction.
Reference: [7] <author> Shirley P., Tuchman A., </author> <title> A Polygonal Approximation to Direct Scalar Volume Rendering, </title> <booktitle> Computer Graphics (San Diego Workshop on Volume Visualization), </booktitle> <volume> vol. 24(5), </volume> <pages> pp. 63-70, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Different types of computational grids.(Taken from [10]) 3 He computes the data values at the intersection points by linear interpolating between the data at the vertices. Shirley and Tuchmans Projected Tetrahedra algorithm <ref> [7] </ref> exploits spatial cell coherency and uses hardware acceleration. Their algorithm requires a tetrahedral decomposition of the underlying data set. The basic idea is that a tetrahedra projects into at most four continuous triangular regions onto the screen.
Reference: [8] <author> Speray D., Kennon S., </author> <title> Volume Probes: Interactive Data Exploration on Arbitrary Grids, </title> <booktitle> Computer Graphics (San Diego Workshop on Volume Visualization), </booktitle> <volume> vol. 24(5), </volume> <pages> pp. 5-12, </pages> <month> November </month> <year> 1990. </year> <month> 8 </month>
Reference: [9] <author> Westover L., </author> <title> Footprint Evaluation for Volume Rendering, </title> <booktitle> Computer Graphics (SIGGRAPH 90 Proceedings), </booktitle> <volume> vol. 24, </volume> <pages> pp. </pages> <address> 367--376, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Although the slicing operation needs to be repeated for each new viewing direction, it provides a direct image quality - render time trade-off through the choice of the number of slices. Our algorithm is based on the splatting idea of W estover <ref> [9] </ref>. In most algorithms we reconstruct the sampled data set in three-dimensional space first and then project it to the screen. In splatting however, the contribution of a sample point (the splat) is projected to the screen and combined with previous splats in screen space for the final image.
Reference: [10] <author> Yagel R., Ebert D., Scott J., Kurzion Y., </author> <title> Grouping Volume Renderers for Enhanced Visualization in Computational Fliud Dynamics, </title> <journal> IEEE Transactions on Visualization and Computer Graphics, </journal> <volume> ITVCG 1(2), </volume> <month> July </month> <year> 1995. </year>
Reference-contexts: The exit point is also the entry point of the next (neighboring) cell. In order to find the first entry point into the volume, he intersects the ray with all exterior faces. regular uniform rectilinear curvilinear unstructured FIGURE 1. Different types of computational grids.(Taken from <ref> [10] </ref>) 3 He computes the data values at the intersection points by linear interpolating between the data at the vertices. Shirley and Tuchmans Projected Tetrahedra algorithm [7] exploits spatial cell coherency and uses hardware acceleration. Their algorithm requires a tetrahedral decomposition of the underlying data set. <p> Max et al. [6] present a similar algorithm for convex polyhedra or scattered data sets. Under certain simplifying assumptions, they also compute the exact volume integral along the ray analytically. In the slicing algorithm by Yagel et al. <ref> [10] </ref> the underlying grid is cut into slices parallel to the viewing direction. The slices consist of polygons, that again can be drawn quickly by special rendering hardware.
Reference: [11] <author> Yagel R., Reed D., Law A., Shih P., Shareef N., </author> <title> Hardware Assisted Volume Rendering of Unstructured Grids by Incremental Slicing, </title> <booktitle> IEEE 1996 Symposium on Volume Visualization, </booktitle> <pages> pp. 55-62, </pages> <month> October </month> <year> 1996. </year>
Reference: [12] <author> Zienkiewicz O.C., </author> <title> Taylor R.L., The finite Element Method, </title> <booktitle> Fourth Ed., </booktitle> <volume> vol. 1, </volume> <publisher> McGraw-Hill, </publisher> <year> 1989. </year> <title> 9 FIGURE 4. Bluntfin data set rendered using spherical splats FIGURE 5. The bluntfin data set FIGURE 6. Focus on the bluntfin data. FIGURE 7. The delta wing data set FIGURE 8. The Jet engine data set. </title>
References-found: 12

