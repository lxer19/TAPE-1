URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/92-018.ps.Z
Refering-URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/FILE.html
Root-URL: http://www.cs.unc.edu
Title: Implementations of Randomized Sorting on Large Parallel Machines (Preliminary Version) compared using a parameterized analytic
Author: William L. Hightower Jan F. Prins John H. Reif r e i f c s d u k e e d u 
Note: The performance of B-Flashsort and Samplesort is  Email: prins@cs.unc.edu. Supported in part by ONR contract N00014-89-J-1873 and by DARPA/ISTO contract N00014-91-C-0114. Email:  Supported in part by DARPA/ISTO contracts N00014-88-K-0458, N00014-91-J-1985, and N00014-91-C-0114, and by NASA subcontract 550-63 of prime contract NAS5-30428, and by US-Israel Binational NSF Grant 88-00282/2.  
Address: Elon College NC 27244 Chapel Hill NC 27599-3175 Durham NC 27706  
Affiliation: Elon College University of North Carolina Duke University  
Abstract: In this paper we present B-Flashsort, a new batched-routing variant of Flashsort designed to sort N&gt;P values using P processors connected in a d-dimensional mesh and using constant space in addition to the input and output. The key advantage of the Flashsort approach over Samplesort is a decrease in memory requirements, by avoiding the broadcast of the splitter set to all processors. The practical advantage of B-Flashsort over Flashsort is that it replaces pipelined splitter-directed routing with a set of synchronous local communications and bounds recursion, while still being demonstrably efficient. 
Abstract-found: 1
Intro-found: 1
Reference: [AH88] <author> A. Aggarwal and M.-D. A. Huang, </author> <title> Network Complexity of Sorting and Graph Problems and Simulating CRCW PRAMs by Interconnection Networks; Lecture Notes in Computer Science VLSI Algorithms and Architectures (AWOC 88) (ed. </title> <editor> by John Reif), </editor> <volume> vol. 319, </volume> <pages> pp. 339-350, </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference: [AKS83] <author> M.Ajtai, J. Komlos, and E. Szemeredil, </author> <title> Sorting in c log n P a r a l l e l S t e p s , Combinatorica, </title> <booktitle> 3 </booktitle> <pages> 1-19, </pages> <year> 1983. </year>
Reference: [AV79] <author> D. Angluin and L.G. Valiant, </author> <title> Fast Probabilistic Algorithms for Hamiltonian Circuits and Matchings, </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 18(2) </volume> <pages> 155-193, </pages> <month> April </month> <year> 1979. </year>
Reference: [AKl85] <author> S.G. Akl;, </author> <title> Parallel Sorting Algorithms, </title> <publisher> Academic Press, </publisher> <address> Toronto, </address> <year> 1985. </year>
Reference: [BAT68] <author> K. </author> <title> Batcher; Sorting Networks and Their Applications, </title> <booktitle> Proceedings of the AFIPS Spring Joint Computing Conference, </booktitle> <volume> vol. 32, pp.307-314, </volume> <year> 1968. </year>
Reference: [BS78] <author> G. Baudet and D. Stevenson, </author> <title> Optimal Sorting Algorithms for Parallel Computers, </title> <journal> I E E E Transactions on Computers, </journal> <volume> C-27:84-87, </volume> <year> 1978. </year>
Reference: [BLE90] <author> G.E. Blelloch, </author> <title> Vector Models for Data-Parallel Computing, </title> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference: [BLM+91] <author> G.E. Blelloch, C.E. Leiserson, B.M. Maggs, C.G. Plaxton, S.J. Smith, and M. </author> <title> Zagha; A Comparison of Sorting Algorithms for the Connection Machine CM-2; 3rd Annual ACM Symposium on Parallel Algorithms and Architectures, </title> <address> July 21-24, 1991, Hilton Head, SC, pp.3-16. </address>
Reference-contexts: We must also validate the models with actual implementations on parallel machines. A careful, quantitative, effort of this kind was undertaken by Blelloch et al. <ref> [BLM+91] </ref> in the comparison of sorting algorithms for the TMC CM-2. In that paper, explicit analytical models for a variety of sorting algorithms were developed in terms of fundamental underlying operations. <p> Samplesort was shown to be faster than Bitonic and Parallel Radix sort for large values of N/P, although its general utility was limited because of large memory requirements and poor performance at lower values of N/P. Samplesort as described in [HC83], <ref> [BLM+91] </ref> is a randomized algorithm that works as follows. A sample of the complete set of input keys distributed uniformly across processors is extracted and sorted using some efficient deterministic algorithm. <p> In particular, in [RV83,87] two techniques were used that were not incorporated in the Samplesort of [HC83], <ref> [BLM+91] </ref>: (1) splitter-directed routing (2) recursive application of the sampling, partitioning and routing step We investigate both of these techniques and give a quantitative analysis of the circumstances under which the first is advantageous. <p> This indicates that there is a large gap between a theoretical result on parallel sorting as compared to a parallel algorithm validated by an efficient implementation on an actual parallel machine. We develop an analytical model for the running time of B-Flashsort, following the approach taken in <ref> [BLM+91] </ref> and compare it with the model for Samplesort. We derive an expression in terms of machinedependent parameters characterizing the range of N/P for which B-Flashsort outperforms Samplesort. To validate the analytic model, we implemented four sorting algorithms on a 4096 processor MasPar MP-1. <p> Figure 3 illustrates the dependence of routing skew on P and r. Bounds for the expected relation between the per-processor sample size and the maximum size of the sorted lists at completion are given in <ref> [BLM+91] </ref> and [DNS91]. Given P&gt;1 and arbitrary r, the sample size k required to limit splitter-directed skew to W S with probability 1r is given by: 2ln (P/r) (4.1) This bound is conservative since it is independent of the number of elements per processor. THEOREM 3. <p> Using the constants for the CM-2 reported with the analytic model of <ref> [BLM+91] </ref> we obtain values of N/P in the range 320 to 560 as crossover points below which B-Flashsort would be competitive with Samplesort on a fullsize CM-2 (P=2048, d = 11). <p> The exact value depends on whether the formula for T SPLIT is the one used here or the one defined in <ref> [BLM+91] </ref>. However, we have not verified this prediction experimentally. 7. Conclusions Randomization has been demonstrably useful both in simplifying and in improving the efficiency of sorting algorithms on actual parallel machines.
Reference: [CHL89] <author> B. Chlebus, </author> <title> Sorting Within Distance Bound on a Mesh-Connected Arrays, </title> <booktitle> Inte rnational Symposium on Optimal Algotihms, vol. 401 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 232-238, </pages> <publisher> Springer-Verlag, </publisher> <address> NY, </address> <year> 1989. </year>
Reference: [COLE88] <author> R. Cole, </author> <title> Parallel Merge Sort, </title> <journal> SIAM Journal on Computing, </journal> <pages> pp. 770-785, </pages> <year> 1988. </year>
Reference: [CV86] <author> R. Cole and U. Vishkin, </author> <title> Deterministic Coin Tossing and Accelerating Cascades: Micro and Macro Techniques for Designing Parallel Algorithms, </title> <booktitle> Proceedings of the 18th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 206-219, </pages> <year> 1986. </year>
Reference: [CLR90] <author> T.H. Cormen, C.E. Leiserson, and R.L. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> The MIT Press and McGraw Hill, </publisher> <year> 1990. </year>
Reference: [CP90] <author> R.E. Cypher and C.G. Plaxton, </author> <title> Deterministic Sorting in Nearly Logarithmic Time on the Hypercube and Related Computers, </title> <booktitle> Proceedings of the 22nd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 193-203, </pages> <month> May </month> <year> 1990. </year>
Reference: [DNS91] <author> D.J. DeWitt, J.F. Naughton, D.F. Schneider, </author> <title> Parallel Sorting on a Shared-Nothing Architecture using Probabilistic Splitting, </title> <institution> Computer Sciences TR#1043, University of Wisconsin - Madison, </institution> <year> 1991. </year>
Reference-contexts: Figure 3 illustrates the dependence of routing skew on P and r. Bounds for the expected relation between the per-processor sample size and the maximum size of the sorted lists at completion are given in [BLM+91] and <ref> [DNS91] </ref>. Given P&gt;1 and arbitrary r, the sample size k required to limit splitter-directed skew to W S with probability 1r is given by: 2ln (P/r) (4.1) This bound is conservative since it is independent of the number of elements per processor. THEOREM 3.
Reference: [FKO86] <author> E. Felten, S. Karlin, and S. Otto, </author> <title> Sorting on a Hypercube, </title> <type> Hm 244, </type> <institution> Caltech/JPL, </institution> <year> 1986. </year>
Reference: [FM70] <author> W.D. Frazer and A.C. McKellar, </author> <month> Samplesort: </month>
References-found: 16

