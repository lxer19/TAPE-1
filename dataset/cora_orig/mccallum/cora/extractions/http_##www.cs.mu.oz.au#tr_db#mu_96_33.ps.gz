URL: http://www.cs.mu.oz.au/tr_db/mu_96_33.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Email: email: fchesson, ljjg@cs.mu.OZ.AU  
Title: Objectives for User Interface Specification Languages  
Author: Paul Chesson and Lorraine Johnston 
Address: Parkville, Australia, 3052  
Affiliation: Department of Computer Science The University of Melbourne  
Abstract: User interface specification languages are concerned with describing the requirements for the structure of dialogue between an interactive system and its users. The central objective for a user interface specification language is to provide the ability to construct and maintain specifications which establish a wide range of perspectives and facilitate analysis. This paper presents a number of characteristics possessed by various user interface specification languages in order to achieve this aim.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Alexander. </author> <title> Structuring dialogues using CSP. </title> <editor> In M. Harrison and H. Thimbleby, editors, </editor> <title> Formal Methods in Human-Computer Interaction, Cambridge Series on Human-Computer Interaction, </title> <booktitle> chapter 9, </booktitle> <pages> pages 273-295. </pages> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1990. </year>
Reference-contexts: Temporal Logic can be used to express system behaviour in terms of temporal constraints, whilst LOTOS and CSP can express temporal relationships by modelling a system in terms of processes which are able to synchronise with one other (for example, <ref> [1] </ref>). UAN has an explicit set of operators which are to directly capture ideas such as interleavibility, interruptions, and order independence [11]. Languages may also use more implicit representations of temporal relationships to resolve some of the issues raised above.
Reference: [2] <author> S.K. Card, T.P. Moran, and A. Newell. </author> <title> The Psychology of Human-Computer Interaction. </title> <publisher> Lawrence Erlbaum, </publisher> <address> Hillsdale, New Jersey, </address> <year> 1983. </year>
Reference-contexts: An example of such a principle might be that the state of the interface required to predict future behaviour is reflected in the display. Other behavioural models are able to make measurements of usability characteristics of the interface. For example, GOMS <ref> [2] </ref> allows the time taken for a user to perform a task to be predicted, thus helping to determine the efficiency of a specified interface.
Reference: [3] <author> D.A. Carr, N. Jog, H.P. Kumar, M. Teittinen, and C. Alberg. </author> <title> Using Interaction Object Graphs to specify and develop graphical widgets. </title> <type> Technical Report CAR-TR-734, </type> <institution> University of Maryland, College Park, MD, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: Whilst most languages either support this level, or can easily be extended to support this level, treatment is fairly cursory. UAN provides a reasonably complete, concise, and intuitive notation for graphical interaction. This has been incorporated into a statechart-based language in Interaction Object Graphs (IOG) <ref> [3] </ref>. Finally, the physical level deals with the devices which the users interact with, and the information directly presented to the users. The languages described in this paper 3 tend to focus on higher level dialogue.
Reference: [4] <author> P. Chesson and L. Johnston. </author> <title> FLUID: Specifying data flow and control for user interfaces. </title> <editor> In L. Yong, L. Herman, Y. Leung, and J. Moyes, editors, </editor> <booktitle> Proceedings of the First Asia-Pacific Conference on Computer Human Interaction, </booktitle> <pages> pages 171-180, </pages> <address> Singapore, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Languages which support the expression of statements which correspond to requirements written in natural language, also facilitate comprehension. Rules in production systems such as DSN often directly correspond to natural language requirements. Specifications written in FLUID <ref> [4] </ref> use statements to specify requirements which describe the users' access to application functionality, and constraints on such access. Lastly, a top-level organisation of a specification is needed for the reader to fit individual statements into their overall context in the interface. Objects are a common abstraction used.
Reference: [5] <author> M.B. Curry and A.F. Monk. </author> <title> Dialogue modelling of graphical user interfaces with a production system. </title> <journal> Behaviour and Information Technology, </journal> <volume> 14(1) </volume> <pages> 41-55, </pages> <year> 1995. </year>
Reference-contexts: This follows an event-based approach, where events are used to integrate components of the specification. For example, Interactive Cooperative Objects (ICO) [18] uses methods of non-interactive objects to represent application semantics, and * using a change in state in the application. For example, Dialogue Specification Notation (DSN) <ref> [5] </ref> maintains sub-states of the application in its fields. The second approach has the advantage that it can show the relationship between events which affect the same sub-state of the application. It also helps communicate the users' model of the application.
Reference: [6] <author> B. De Carolis and F. de Rosis. </author> <title> Modelling adaptive interaction of OPADE by Petri nets. </title> <journal> SIGCHI Bulletin, </journal> <volume> 26(2) </volume> <pages> 48-52, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: TAG [23] can be used to analyse the structural consistency between the semantics of tasks being performed, and the syntax of operations required to perform them. Such behavioural analysis is not limited to psychological models. OPADE <ref> [6] </ref> uses Coloured Petri nets to analyse the cognitive complexity of tasks by counting the num 7 ber of transitions (each corresponding to a user operation) required to perform tasks.
Reference: [7] <author> A.J. Dix. </author> <title> Formal Methods for Interactive Systems. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1991. </year>
Reference-contexts: Analysis takes place from the perspective of the users' side of human computer interaction. This abstraction removes the underlying state of the user interface to focus on what is perceived by the user. The PIE model <ref> [7] </ref> provides such an abstraction, allowing usability principles to be formally expressed in terms of the users' inputs to a system, their interpreted effects, what is displayed, and the result produced by the system.
Reference: [8] <author> T. Elwert and E. Schlungbaum. </author> <title> Modelling and generation of graphical user interfaces in the TADEUS approach. </title> <editor> In P. Palanque and R. Bastide, editors, </editor> <booktitle> Design, Specification and Verification of Interactive Systems, </booktitle> <pages> pages 193-208. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Languages may also use more implicit representations of temporal relationships to resolve some of the issues raised above. Jacob's specification language for direct-manipulation interfaces [13] allows interleaving by the suspension and resumption of coroutines, each responsible for describing the syntax of a screen object. TADEUS Dialogue Graphs <ref> [8] </ref> allows the modelling of high level dialogue views (windows) which may be viewed and manipulated sequentially, concurrently, and in a modal fashion. 4 2.3 Reader comprehension The ease with which a reader is able to interpret a formally written specification into an informal understanding of how an interface behaves indicates
Reference: [9] <author> P. Faraday and A. Sutcliffe. </author> <title> A method for multimedia interface design. </title> <editor> In J.L. Alty, D. Diaper, and S. Guest, editors, HCI'93, </editor> <booktitle> People and Computers VIII, </booktitle> <pages> pages 173-190, </pages> <address> London, September 1993. </address> <publisher> Cambridge University Press. </publisher>
Reference-contexts: The languages described in this paper 3 tend to focus on higher level dialogue. Detailed visual descriptions of an interface are often separated from specifications written in such languages, but more abstract characteristics of presentation are useful for developing multimedia systems <ref> [9] </ref>. Better support for specification at this level will enable designers to reason about aspects such as the availability of physical and cognitive resources during interaction.
Reference: [10] <author> B. Fields, M. Harrison, and P. Wright. </author> <title> From informal requirements to agent-based specification: An aircraft warnings case study. </title> <journal> SIGCHI Bulletin, </journal> <volume> 26(2) </volume> <pages> 65-68, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Comprehension of individual statements is improved when a simple notation is used. A good example of this is Storrs-Windsor Notation [25] which uses structured English/pseudo-code. For formal notations, supplementing statements with a natural language description is an acceptable alternative (for example, agent-based interactor frames <ref> [10] </ref>). Languages which support the expression of statements which correspond to requirements written in natural language, also facilitate comprehension. Rules in production systems such as DSN often directly correspond to natural language requirements.
Reference: [11] <author> H.R. Hartson and P. Gray. </author> <title> Temporal aspects of tasks in the user action notation. </title> <journal> Human-Computer Interaction, </journal> <volume> 7 </volume> <pages> 1-45, </pages> <year> 1992. </year>
Reference-contexts: UAN has an explicit set of operators which are to directly capture ideas such as interleavibility, interruptions, and order independence <ref> [11] </ref>. Languages may also use more implicit representations of temporal relationships to resolve some of the issues raised above. Jacob's specification language for direct-manipulation interfaces [13] allows interleaving by the suspension and resumption of coroutines, each responsible for describing the syntax of a screen object.
Reference: [12] <author> H.R. Hartson, A.C. Siochi, and D. Hix. </author> <title> The UAN: A user-oriented representation for direct manipulation interface designs. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(3) </volume> <pages> 181-203, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: The task level describes how tasks are composed of individual operations. Approaches to task specification are varied. User Action Notation (UAN) <ref> [12] </ref> uses tasks as its primary method of presenting the behaviour of an interface. All the details of the specification are integrated into the steps required to complete a task.
Reference: [13] <author> R.J.K. Jacob. </author> <title> A specification language for direct-manipulation user interfaces. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5(4) </volume> <pages> 283-317, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: UAN has an explicit set of operators which are to directly capture ideas such as interleavibility, interruptions, and order independence [11]. Languages may also use more implicit representations of temporal relationships to resolve some of the issues raised above. Jacob's specification language for direct-manipulation interfaces <ref> [13] </ref> allows interleaving by the suspension and resumption of coroutines, each responsible for describing the syntax of a screen object.
Reference: [14] <author> A. Monk, M. Curry, and P. Wright. </author> <title> Why industry doesn't use the wonderful notations we researchers have given them to reason about their designs. </title> <editor> In D. Gilmore, editor, </editor> <booktitle> User-centred requirements for software engineering, </booktitle> <pages> pages 253-261, </pages> <address> Berlin, Germany, 1993. </address> <publisher> Springer-Verlag. </publisher> <pages> 9 </pages>
Reference-contexts: Specification writers need a logical framework in which to organise their specification, preferably one which allows smooth incorporation of individual requirements into the specification under construction. These requirements need to be easily translated into the syntax of the language, so an easy to use and expressive notation is required <ref> [14] </ref>. The levels of abstraction described in Section 2.1 are useful for making specification writers conscious of the level of abstraction they dealing with. This can be achieved by explicitly isolating the parts of the specification which describe different levels.
Reference: [15] <author> J. Nielsen. </author> <title> A virtual protocol for computer-human interaction. </title> <journal> International Jour--nal of Man-Machine Studies, </journal> <volume> 24 </volume> <pages> 301-312, </pages> <year> 1986. </year>
Reference-contexts: A specification needs to be be able to express the requirements for the user interface, and then be able to successfully communicate them to its readers. 2.1 Expressing levels of interaction Human computer interaction can be viewed from various levels of abstraction <ref> [15] </ref>. The scope in which ideas may be expressed, and consequently the scope in which analysis may be carried out, is bounded by the levels addressed in the specification. The goal level describes the overall objectives of the users, expressed in terms of their real-world environment.
Reference: [16] <author> D. R. Olsen. </author> <title> User Interface Management Systems: Models and Algorithms. </title> <publisher> Morgan Kauffmann, </publisher> <address> San Mateo, CA., </address> <year> 1992. </year>
Reference-contexts: A deterministic formal specification language has the potential to be able to automate such validation of the dialogue by simulating input and output events (for example, DSN). A fully usable interface can be developed using a User Interface Management System (UIMS) <ref> [16] </ref> which incorporates the specification language into a complete development environment for constructing user interfaces. 5 Conclusion This paper has presented a number of characteristics possessed by user interface specification languages which make them a useful part of the process of user interface development.
Reference: [17] <author> D.R. Olsen, </author> <title> A.F. Monk, and M.B. Curry. Algorithms for automatic dialogue analysis using propositional production systems. </title> <journal> Human-Computer Interaction, </journal> <volume> 10 </volume> <pages> 39-78, </pages> <year> 1995. </year>
Reference-contexts: Palanque and Bastide have employed the Petri net-based analysis of invariants for ICO [19], whilst Olsen, Monk, and Curry have developed algorithms to analyse similar properties in Propositional Production System (PPS) <ref> [17] </ref>.
Reference: [18] <author> P. Palanque and R. Bastide. </author> <title> Petri nets with objects for specification, design and validation of user-driven interfaces. </title> <booktitle> In Proceedings of the third IFIP Conference on Human-Computer Interaction, Interact '90, </booktitle> <pages> pages 625-631, </pages> <address> Cambridge, UK, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Two common ways of representing this coupling are: * through a defined set of messages or services which may be passed to, or called from, the application. This follows an event-based approach, where events are used to integrate components of the specification. For example, Interactive Cooperative Objects (ICO) <ref> [18] </ref> uses methods of non-interactive objects to represent application semantics, and * using a change in state in the application. For example, Dialogue Specification Notation (DSN) [5] maintains sub-states of the application in its fields.
Reference: [19] <author> P. Palanque and R. Bastide. </author> <title> Petri net based design of user-driven interfaces using the interactive cooperative objects formalism. </title> <editor> In F. Paterno, editor, </editor> <title> Design, Specification and Verification of Interactive Systems. </title> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: Palanque and Bastide have employed the Petri net-based analysis of invariants for ICO <ref> [19] </ref>, whilst Olsen, Monk, and Curry have developed algorithms to analyse similar properties in Propositional Production System (PPS) [17].
Reference: [20] <author> P. Palanque, R. Bastide, and V. Senges. </author> <title> Task model system model: towards a unifying formalism. </title> <booktitle> In Proceedings of HCI International Conference, </booktitle> <pages> pages 489-494, </pages> <address> Yokohama, Japan, July 1995. </address> <publisher> Elsevier. </publisher>
Reference-contexts: Alternatively, a translation between formalisms may be possible (for example, UAN temporal operators to Petri nets <ref> [20] </ref>). The semantic level of abstraction in a user interface describes operations in terms of the functionality provided by the underlying application. This level deals with the issue of integration with the interface itself, and how it interacts with the application.
Reference: [21] <author> F. Paterno and G. Faconti. </author> <title> On the use of LOTOS to describe graphical interaction. </title> <editor> In A. Monk, D. Diaper, and M. Harrison, editors, HCI'92, </editor> <booktitle> People and Computers VII, </booktitle> <pages> pages 155-173, </pages> <address> London, September 1992. </address> <publisher> Cambridge University Press. </publisher>
Reference: [22] <author> F. Paterno, M. S. Sciacchitano, and J. Lowgren. </author> <title> User interface evaluation mapping physical user actions to task-driven formal specification. </title> <editor> In P. Palanque and R. Bastide, editors, </editor> <booktitle> Proceedings of The Design, Specification And Verification Of Interactive Systems, </booktitle> <address> Berlin, Germany, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference: [23] <author> S.J. Payne and T.R.G. Green. </author> <title> The structure of command languages: an experiment on task-action grammar. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 30 </volume> <pages> 213-234, </pages> <year> 1989. </year>
Reference-contexts: Other behavioural models are able to make measurements of usability characteristics of the interface. For example, GOMS [2] allows the time taken for a user to perform a task to be predicted, thus helping to determine the efficiency of a specified interface. TAG <ref> [23] </ref> can be used to analyse the structural consistency between the semantics of tasks being performed, and the syntax of operations required to perform them. Such behavioural analysis is not limited to psychological models.
Reference: [24] <author> E. Schlungbaum and T. Elwert. </author> <title> TADEUS a model-based approach to the development of interactive systems. </title> <journal> Rostocker Informatik Berichte, </journal> <volume> 17 </volume> <pages> 93-104, </pages> <year> 1995. </year>
Reference-contexts: Nevertheless, it is important that the levels which are expressed in a specification can be linked back to a goal in order to validate it. An example of how this may be done is shown in the task model of the TADEUS approach <ref> [24] </ref> where a goal or sub-goal consists of a task performed by one or more types of users (roles), using one or more non-interactive objects.
Reference: [25] <author> P. </author> <title> Windsor. Practical user interface design notation. </title> <journal> Interacting with Computers, </journal> <volume> 5(4) </volume> <pages> 423-438, </pages> <year> 1993. </year>
Reference-contexts: Comprehension of individual statements is improved when a simple notation is used. A good example of this is Storrs-Windsor Notation <ref> [25] </ref> which uses structured English/pseudo-code. For formal notations, supplementing statements with a natural language description is an acceptable alternative (for example, agent-based interactor frames [10]). Languages which support the expression of statements which correspond to requirements written in natural language, also facilitate comprehension.
References-found: 25

