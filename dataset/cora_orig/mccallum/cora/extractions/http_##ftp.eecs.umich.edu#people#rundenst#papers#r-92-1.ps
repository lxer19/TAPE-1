URL: http://ftp.eecs.umich.edu/people/rundenst/papers/r-92-1.ps
Refering-URL: http://ftp.eecs.umich.edu/people/rundenst/papers/
Root-URL: http://www.eecs.umich.edu
Title: MultiView: A Methodology for Supporting Multiple View Schemata in Object-Oriented Databases  
Author: ELKE A. RUNDENSTEINER 
Keyword: Index Terms: Multiple view schemata, object-oriented views, view closure property, view consistency, view independence, view definition language, object algebra, schema design support.  
Address: Irvine, CA 92717-3425  
Affiliation: Department of Information and Computer Science University of California, Irvine  
Note: revised version of UC Irvine, Tech. Rep. 92-07.  
Email: e-mail: rundenst@ics.uci.edu  
Phone: telephone: (714) 856-4101 fax: (714) 856-4056  
Abstract: It has been widely recognized that object-oriented database (OODB) technology needs to be extended to provide a mechanism similar to views in relational database systems. We define an object-oriented view to be an arbitrarily complex virtual schema graph with possibly restructured generalization and decomposition hierarchies rather than just one virtual class as has been proposed in the literature. In this paper, we propose a methodology, called MultiView, for supporting multiple such view schemata. MultiView breaks the schema design task into the following independent and well-defined subtasks: (1) the customization of type descriptions and object sets of existing classes by deriving virtual classes, (2) the integration of all derived classes into one consistent global schema graph, and (3) the definition of arbitrarily complex view schemata on this augmented global schema. For the first task of MultiView, we define a set of object algebra operators that can be used by the view definer for class customization. For the second task of MultiView, we propose an algorithm that automatically integrates these newly derived virtual classes into the global schema. We solve the third task of MultiView by first letting the view definer explicitly select the desired view classes from the global schema using a view definition language and then by automatically generating a view class hierarchy for these selected classes. In addition, we present algorithms that verify the closure property of a view and, if found to be incomplete, transform it into a closed, yet minimal, view. In this paper, we introduce the fundamental concept of view independence and show MultiView to be view independent. We also outline implementation techniques for realizing MultiView with existing OODB technology. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aho, A. V., Hopcroft, J. E., and Jeffrey, D. U., </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley Pub. Company, </publisher> <year> 1974. </year>
Reference: [2] <author> Banerjee, J., Kim, W., Kim, H. J., and Korth, F., </author> <title> "Semantics and Implementation of Schema Evolution in Object-Oriented Databases", </title> <booktitle> Proc. of ACM SIMOD'87, </booktitle> <month> May </month> <year> 1987, </year> <pages> pp. </pages> <address> 311- 322. </address>
Reference-contexts: Consequently, we are concerned here with the virtual restructuring for each given view while maintaining all other view schemata; rather than with permanently changing the global database as is done in schema evolution <ref> [2] </ref>. Not just individual virtual classes but complete (possibly conflicting) view schemata have to be integrated with another and with the underlying global schema into one consistent whole. This integration has to maintain the difference in the generalization and decomposition hierarchies of the view schemata.
Reference: [3] <author> Date, C. J., </author> <title> An Introduction to Database Systems, Vol. I, Fifth Edition, </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <year> 1990. </year>
Reference-contexts: the figure by the edge from C2' to C2. 4 CLASS CUSTOMIZATION USING OBJECT ALGEBRA 18 4.4 The Select Operator The Select operator is a set manipulating operator that selects a subset of object instances from a given set of objects similar to the selection operator defined for relational algebra <ref> [3] </ref>. The select operator has the following syntax: &lt;virtual-class&gt; := select from (&lt;source-class&gt;) where (&lt;predicate&gt;); with the &lt;predicate&gt; being some possibly complex function on the source class and its type description. <p> O ( min (jGSj, jV Aj) ). 8 THE VIEW INDEPENDENCE OF MULTIVIEW 36 8 THE VIEW INDEPENDENCE OF MultiView 8.1 The View Independence Concept The concept of data independence developed for the relational model is defined as the "immunity of applications to change in storage structure and access technique" <ref> [3] </ref>. This is achieved by separating the interface to the database (the conceptual data model) from the actual implementation (the physical data model).
Reference: [4] <author> Gilbert, J. P., </author> <title> "Supporting User Views", </title> <booktitle> OODB Task Group Workshop Proceedings, </booktitle> <address> Ottawa, Canada, </address> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: Consequently, they do not address the derivation of new classes by restricting the membership of a class via a select-like query. Lastly, their approach focuses on one class only, and the effects of multiple interfaces on the class generalization hierarchy are not addressed. 11 CONCLUSIONS 45 Gilbert's proposal <ref> [4] </ref>, similar to [16], is also based on the idea of defining multiple interfaces for a class object. MultiView does not require the extension of the traditional class concept, and thus can be implemented directly with the existing object-oriented database technology, while Gilbert's approach could not. <p> In addition, our work allows for the direct application of the class derivation mechanisms proposed in the literature. The use of general query operators is currently not handled by <ref> [4] </ref>. 11 CONCLUSIONS In this paper, we have defined an object-oriented view to be a virtual, possibly restructured, sub-schema graph of the global schema rather than just one individual virtual class. We have presented a novel approach for supporting these multiple view schemata in OODBs, called MultiView. <p> Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature [5, 7, 15, 10]. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals <ref> [4] </ref>, and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView. Based on this prototype, we want to explore alternative implementation strategies for MultiView.
Reference: [5] <author> Heiler, S., and Zdonik, S. B., </author> <title> Object views: Extending the vision, </title> <booktitle> In Proc. IEEE Data Engineering Conf., </booktitle> <address> Los Angeles, </address> <month> Feb. </month> <year> 1990, </year> <journal> pg. </journal> <volume> 86 - 93. </volume>
Reference-contexts: the relationship (C 3 is-a* C 5 ) does not hold in GS. 2.4 The Closure Criterion of the Property Decomposition Hierarchy of a View The type closure concept has been proposed in the literature as a criterion for the validity of a property decomposition hierarchy of a view schema <ref> [18, 5] </ref>. Here, we define a variation of this closure criterion suitable for our underlying object model and the MultiView methodology. In Section 7, we present an algorithm for (1) checking a view schema for the closure property and (2) transforming a non-closed view into a closed view. <p> This fulfills the first feature required for a view support system listed in Section 1. While there is no generally agreed-upon object algebra, there are a number of proposals for object algebras in the literature (e.g., see <ref> [7, 5, 15] </ref>). For the purpose of this work (and for the first 3 THE MULTIVIEW METHODOLOGY 13 prototype implementation of MultiView), we define our own object algebra, which is similar in flavor to the ones proposed in the literature. (see Section 4). <p> For instance, the work by Heiler and Zdonik <ref> [5] </ref> and the work by Scholl et al. [15] fall in this category. MultiView can use any of these proposed class derivation mechanisms to implement the first phase of view schema generation, i.e., the customization of individual classes. It thus is a superset of these approaches. <p> It thus is a superset of these approaches. Most of these approaches do not discuss the integration of derived classes into the global schema. Instead, the derived classes are treated as "stand-alone" objects <ref> [5] </ref>, or they are attached directly as subclasses of the schema root class [7]. Scholl et al.'s recent work [15] is an exception; they discuss the classification of virtual classes derived by a selected subset of the operators of the query language COOL into one schema. <p> MultiView would then enrich these systems by allowing them to support a more powerful notion of views. Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature <ref> [5, 7, 15, 10] </ref>. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals [4], and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView.
Reference: [6] <author> Khoshafian, S. N. and Copeland, G. P., </author> <title> "Object Identity," </title> <booktitle> in Proc. OOPSLA'86, ACM, </booktitle> <month> Sep. </month> <year> 1986, </year> <pages> pp. 406-416. </pages>
Reference: [7] <author> Kim, W., </author> <title> A model of queries in object-oriented databases, </title> <booktitle> In Proc. Int. Conf. on Very Large Databases, </booktitle> <pages> pp. 423 - 432, </pages> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: This fulfills the first feature required for a view support system listed in Section 1. While there is no generally agreed-upon object algebra, there are a number of proposals for object algebras in the literature (e.g., see <ref> [7, 5, 15] </ref>). For the purpose of this work (and for the first 3 THE MULTIVIEW METHODOLOGY 13 prototype implementation of MultiView), we define our own object algebra, which is similar in flavor to the ones proposed in the literature. (see Section 4). <p> Set manipulating operators group sets of objects into smaller constrained sets or combine several sets into larger sets of objects. A typical example is the select operator, also called a predicate-based query <ref> [7] </ref>, which is similar to the selection operator used in relational algebra. Some operators manipulate both the type and the set properties of classes. The set operators, such as, union, intersection, and difference, fall into this category. <p> It thus is a superset of these approaches. Most of these approaches do not discuss the integration of derived classes into the global schema. Instead, the derived classes are treated as "stand-alone" objects [5], or they are attached directly as subclasses of the schema root class <ref> [7] </ref>. Scholl et al.'s recent work [15] is an exception; they discuss the classification of virtual classes derived by a selected subset of the operators of the query language COOL into one schema. <p> MultiView would then enrich these systems by allowing them to support a more powerful notion of views. Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature <ref> [5, 7, 15, 10] </ref>. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals [4], and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView.
Reference: [8] <author> Maier, D., Stein, J., Otis, A., and Purdy, A., </author> <title> "Development of an Object-Oriented DBMS," </title> <booktitle> in Proc. </booktitle> <address> OOPSLA'86, </address> <month> Sep. </month> <year> 1986, </year> <pages> pp. 472-482. </pages>
Reference: [9] <author> Mylopoulos, J., Bernstein, P. A., and Wong, H.K.T., </author> <title> "A Language Facility for Designing Database-Intensive Applications," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 5, issue 2, </volume> <pages> pp. 185-207, </pages> <month> June </month> <year> 1980. </year>
Reference: [10] <author> Rundensteiner, E. A., and Bic, L., </author> <title> "Set Operations in Object-Based Data Models", </title> <journal> in IEEE Transaction on Data and Knowledge Engineering, </journal> <note> to appear in June 1992. </note>
Reference-contexts: We have shown the distinction between the type and the set aspect of classes to be a valuable tool for characterizing the semantics of query operators on object-based data models <ref> [10] </ref>. As defined in Section 2, a type description of a class determines which property functions can be used to accessthe instances associated with the class. A set aspect of a class refers to the set of objects that are members of this class. <p> A detailed analysis of these set operators for OODBs can be found in <ref> [10] </ref>. For the purpose of this work, we use simple semantics (rather than utilizing a more flexible scheme for property inheritance proposed in [10]). The union operator has the following syntax: &lt;virtual-class&gt; := union (&lt;source-class1&gt;,&lt;source-class2&gt;). <p> A detailed analysis of these set operators for OODBs can be found in <ref> [10] </ref>. For the purpose of this work, we use simple semantics (rather than utilizing a more flexible scheme for property inheritance proposed in [10]). The union operator has the following syntax: &lt;virtual-class&gt; := union (&lt;source-class1&gt;,&lt;source-class2&gt;). Its semantics are to return a set of object instances composed of the members of both source classes. More formally stated, extent (&lt;virtual-class&gt;) := fo 2 O j o 2 &lt;source-class1&gt; _ o 2 &lt;source-class2&gt;g. <p> For instance, Schmolze and Lipkis [14] describe a classifier for `concepts' in the KL-ONE Knowledge Representation System. Scholl et al. [15] sketch the class integration process for a selected subset of the operators of the query language COOL. In <ref> [10] </ref>, we describe the integration of virtual classes derived using set operations into the underlying schema graph. In this section we sketch an overall approach for the class integration problem. A detailed treatment of this problem is, however, beyond the scope of this paper. <p> MultiView would then enrich these systems by allowing them to support a more powerful notion of views. Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature <ref> [5, 7, 15, 10] </ref>. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals [4], and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView.
Reference: [11] <author> Rundensteiner, E. A., Bic, L., Gilbert, J., and Yin, M. L. </author> <title> "Set-Restricted Semantic Groupings," </title> <journal> in IEEE Trans. on Data and Knowledge Engineering, </journal> <note> to appear in April 1993. </note>
Reference-contexts: A class is also a container for a set of objects. The collection of objects that belong to a class C is denoted by extent (C) := fo j o 2 Cg with the member-of predicate "2" defined based on the object identities of the object instances <ref> [11] </ref>. We can now define the class relationships. Definition 1. For two classes C1 and C2 2 C, C1 is called a subset of C2, denoted by C1 C2, if and only if (8 o 2 O) ((o2C1) =) (o2C2)). Definition 2.
Reference: [12] <author> Rundensteiner, E. A. and Bic, L., </author> <title> "Automatic View Schema Generation in Object-Oriented Databases", </title> <institution> Univ. of Cal., Irvine, </institution> <type> Technical Report #92-15, </type> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: For the former, we have developed a view definition language that can be used by the view definer to specify the desired view classes. For the latter, we have developed algorithms that automatically generate a consistent view schema generalization hierarchy <ref> [12] </ref>. In addition, we have developed consistency criteria for the property decomposition and the generalization hierarchies of a view schema in terms of their completeness and consistency with the underlying global object schema. <p> Therefore, rather than requiring the manual insertion of view is-a arcs by the view definer, we have developed algorithms that automatically augment the set of selected view classes to generate a valid view schema class hierarchy <ref> [12] </ref>. To make the presented ideas more concrete we now give an example of the steps involved in constructing a view schema in MultiView. Example 4. This example of the view schema construction process is based on Figure 4. <p> Rather than specifying is-a arcs manually, MultiView will automatically generate the set of view is-a arcs that has to be inserted in order to make the view schema valid. This is the topic of <ref> [12] </ref>. The following operators either initiate or terminate a transaction on a view schema: DEFINE-VIEW, MODIFY-VIEW, SAVE-VIEW, DELETE-VIEW and END-VIEW. The DEFINE-VIEW command initializes a new empty view schema and assigns a unique view identifier to it. <p> In addition, the system determines the set of view is-a arcs that have to be inserted into this view schema and of course also into the view table <ref> [12] </ref>. Lastly, a view definer can remove a view schema with the DELETE-VIEW command. This command not only deletes the view table and view is-a arcs, but it also removes all virtual classes from the global schema that were created for the definition of that view schema, whenever possible. <p> Then the commands ADD-CLASS (C1) and ADD-CLASS (C3) are issued to insert the classes C1 and C3 into VS1. VS1 now has the classes (VS1) = f VC4, C1, C3 g. Lastly, VS1 is saved with the command SAVE-VIEW. MultiView then automatically creates the view is-a arcs for VS1 <ref> [12] </ref>. The result of this view generalization hierarchy creation is shown in Figure 13.d. Example 13. The second view schema VS2 in Figure 13.e is defined on top of the global schema GS depicted in Figure 13.b. A possible view creation script for VS2 is given below. <p> When VS2 is saved, the is-a arcs shown in Figure 13.d are derived automatically by MultiView <ref> [12] </ref>. Important to note here is that the restructuring of the underlying global schema GS due to the creation of VS2 did not have any effect on the existing view schema VS1. <p> In section 8, we show that this is in general true, namely, existing view schemata remain valid after the creation of additional view schemata. We refer to this property of MultiView as the view independence property. The interested reader is referred to <ref> [12] </ref> for a more detailed discussion on the view definition language and related issues. 7 AUTOMATIC GENERATION OF A CLOSED VIEW SCHEMA 7.1 Basic Concepts Unlike the class generalization relationships, the property decomposition relationships are not explicitly (nor independently from the actual classes) inserted into a schema.
Reference: [13] <author> Rundensteiner, E. A., </author> <title> "MultiView: A Methodology for Supporting Multiple View Schemata in Object-Oriented Databases", </title> <institution> Univ. of Cal., Irvine, </institution> <type> Technical Report #92-07, </type> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: The table given in Figure 18 in the appendix summarizes the object algebra operators, in particular, it gives their syntax, semantics and the resulting class relationships. A more detailed description of the operators and examples follow (See also <ref> [13] </ref>). 4.2 The Hide Operator The hide operator modifies the type description of a class by hiding some of its property functions. It is similar to the project operator in the classical relational algebra, which projects some columns from a relation.
Reference: [14] <author> Schmolze, J. G., and Lipkis, T. A., </author> <title> Classification in the KL-ONE Knowledge Representation System, </title> <booktitle> The Eigth Int. Joint Conf. on Artificial Intelligence, </booktitle> <address> (IJCAI'83), </address> <month> Aug. </month> <year> 1983, </year> <title> vol.1, </title> <journal> pg. </journal> <volume> 330 - 332. </volume>
Reference-contexts: Algorithms for special classification subproblems have been proposed in the literature. For instance, Schmolze and Lipkis <ref> [14] </ref> describe a classifier for `concepts' in the KL-ONE Knowledge Representation System. Scholl et al. [15] sketch the class integration process for a selected subset of the operators of the query language COOL.
Reference: [15] <author> Scholl, M. H., Laasch, C. and Tresch, M., </author> <title> Updatable Views in Object-Oriented Databases, </title> <booktitle> Proc. 2nd DOOD Conf., </booktitle> <address> Muenich, </address> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: This fulfills the first feature required for a view support system listed in Section 1. While there is no generally agreed-upon object algebra, there are a number of proposals for object algebras in the literature (e.g., see <ref> [7, 5, 15] </ref>). For the purpose of this work (and for the first 3 THE MULTIVIEW METHODOLOGY 13 prototype implementation of MultiView), we define our own object algebra, which is similar in flavor to the ones proposed in the literature. (see Section 4). <p> Algorithms for special classification subproblems have been proposed in the literature. For instance, Schmolze and Lipkis [14] describe a classifier for `concepts' in the KL-ONE Knowledge Representation System. Scholl et al. <ref> [15] </ref> sketch the class integration process for a selected subset of the operators of the query language COOL. In [10], we describe the integration of virtual classes derived using set operations into the underlying schema graph. In this section we sketch an overall approach for the class integration problem. <p> For instance, the work by Heiler and Zdonik [5] and the work by Scholl et al. <ref> [15] </ref> fall in this category. MultiView can use any of these proposed class derivation mechanisms to implement the first phase of view schema generation, i.e., the customization of individual classes. It thus is a superset of these approaches. <p> Most of these approaches do not discuss the integration of derived classes into the global schema. Instead, the derived classes are treated as "stand-alone" objects [5], or they are attached directly as subclasses of the schema root class [7]. Scholl et al.'s recent work <ref> [15] </ref> is an exception; they discuss the classification of virtual classes derived by a selected subset of the operators of the query language COOL into one schema. <p> MultiView would then enrich these systems by allowing them to support a more powerful notion of views. Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature <ref> [5, 7, 15, 10] </ref>. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals [4], and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView.
Reference: [16] <author> Shilling, J. J., and Sweeney, P. F., </author> <title> Three Steps to Views: Extending the Object-Oriented Paradigm, </title> <booktitle> in Proc. of the Int. Conf. on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA'89), </booktitle> <address> New Orleans , Sep. </address> <year> 1989, </year> <pages> 353 - 361. </pages>
Reference-contexts: In fact, by breaking the view schemata definition process into a number of distinct phases, we were able to reduce the view definition language to an extremely simple language. In summary, MultiView is a more systematic solution approach compared to their rather ad-hoc proposal. Shilling and Sweeney <ref> [16] </ref> present an alternative approach for supporting views for object-oriented systems. Namely, they extend the conventional concept of a class object from having one type (one ADT interface) to having multiple interfaces. <p> Lastly, their approach focuses on one class only, and the effects of multiple interfaces on the class generalization hierarchy are not addressed. 11 CONCLUSIONS 45 Gilbert's proposal [4], similar to <ref> [16] </ref>, is also based on the idea of defining multiple interfaces for a class object. MultiView does not require the extension of the traditional class concept, and thus can be implemented directly with the existing object-oriented database technology, while Gilbert's approach could not.
Reference: [17] <author> Shipman, D. W., </author> <title> "The Functional Data Model and the Data Language DAPLEX," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 6, issue 1, </volume> <pages> pp. 140-173, </pages> <month> Mar. </month> <year> 1981. </year>
Reference: [18] <author> Tanaka, K., Yoshikawa, M., and Ishihara, K., </author> <title> Schema Virtualization in Object-Oriented Databases, </title> <booktitle> In Proc. IEEE Data Engineering Conf., </booktitle> <month> Feb. </month> <year> 1988, </year> <journal> pg. </journal> <volume> 23 - 30. </volume>
Reference-contexts: A subgraph of the global schema which contains only virtual classes and their is-a relationships is commonly called a virtual schema <ref> [18] </ref>. Definition 10. Given a global schema GS=(V,E), then a view schema (VS), or short, a view, is defined to be a schema VS= (VV,VE) with the following properties: 1. VS has a unique view identifier denoted by &lt; V S &gt;, 2. VV V, and 3. VE transitive-closure (E). <p> the relationship (C 3 is-a* C 5 ) does not hold in GS. 2.4 The Closure Criterion of the Property Decomposition Hierarchy of a View The type closure concept has been proposed in the literature as a criterion for the validity of a property decomposition hierarchy of a view schema <ref> [18, 5] </ref>. Here, we define a variation of this closure criterion suitable for our underlying object model and the MultiView methodology. In Section 7, we present an algorithm for (1) checking a view schema for the closure property and (2) transforming a non-closed view into a closed view. <p> They do however not consider the problem of generating multiple view schemata, and hence MultiView can be considered to be a compatible extension of their work. Tanaka et al. present an early work on schema virtualization <ref> [18] </ref>. Their work does not distinguish between the task of integrating derived classes into a common schema and the task of generating view schemata. The interplay between these tasks is not well-defined in their approach.
References-found: 18

