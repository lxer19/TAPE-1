URL: http://www.win.tue.nl/win/cs/csr/csr94/94.27.ps
Refering-URL: http://www.win.tue.nl/win/cs/csr/csr94.html
Root-URL: http://www.win.tue.nl
Email: sjouke@win.tue.nl, hansm@win.tue.nl  
Title: Regularity of BPA-Systems is Decidable  
Author: Sjouke Mauw and Hans Mulder 
Address: P.O. Box 513, 5600 MB Eindhoven, The Netherlands.  
Affiliation: Dept. of Mathematics and Computing Science, Eindhoven University of Technology,  
Abstract: It is decidable whether a system in Basic Process Algebra (BPA) is regular with respect to bisimulation semantics. Basic operators in BPA are alternative composition, sequential composition and guarded recursion. A system is regular if the interpretations of all process variables defined in the system have finitely many states. We present an effective method to transform a BPA specification into a linear specification whenever possible. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J.C.M. Baeten, J.A. Bergstra & J.W. Klop, </author> <title> Decidability of bisimulation equivalence for processes generating context-free languages, </title> <booktitle> Proc. PARLE 87 (J.W. </booktitle> <editor> de Bakker, A.J. Nijman, P.C. Treleaven, eds.), </editor> <volume> LNCS 259, </volume> <pages> pp. 93-114, </pages> <year> 1987. </year>
Reference-contexts: Given an equation X = a 0 oe 0 + : : : + a n oe n , we say that a i oe i (0 i n) is a summand of X, notation a i oe i aeX. In <ref> [1] </ref> it is shown that every BPA specification can be transformed into a specification in GNF. Therefore we can restrict ourselves to specifications in GNF.
Reference: 2. <author> J.C.M. </author> <title> Baeten & W.P. Weijland, Process algebra, </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 18, </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: For a more detailed treatment we refer to <ref> [2] </ref>. 2.1 Specifications We consider a finite set of atomic actions A. Typical elements of A are a, b, : : : . Let V be a countably infinite set of process variables. Typical elements of V are X, Y , : : : . <p> The collection of graphs divided out by bisimulation equivalence is denoted by G= $ -. This is a model of BPA. The notion of bisimulation can easily be extended to nodes from the same graph. For details see <ref> [2] </ref>. A specification in GNF is interpreted in G= $ in the following way. Definition 2.
Reference: 3. <author> J.A. Bergstra & J.W. Klop, </author> <title> Process theory based on bisimulation semantics, Linear time, branching time and partial order in logics and models for concurrency (J.W. </title> <editor> de Bakker, W.P. de Roever, G. Rozenberg, eds.), </editor> <volume> LNCS 354, </volume> <pages> pp. 50-122, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction An important issue in automatic verification of concurrent systems using process algebra is extending the techniques to systems with an infinite state space. The simplest extension of regular specifications is BPA (Basic Process Algebra <ref> [3] </ref>), which has operators for alternative and sequential composition and allows for the construction of infinite processes by means of guarded recursion. The languages generated by BPA specifications are exactly the context-free languages. <p> Some results for similar specification languages are known. Weakening BPA by replacing the general multiplication by action prefix multiplication will only allow the description of regular systems, while extending BPA with the communication merge to ACP (the algebra of communicating processes, <ref> [3] </ref>) yields a language in which regularity is not decidable. It is also known that regularity of BPA systems modulo language equivalence is not decidable.
Reference: 4. <author> S. Christensen, H. Huttel & C. Stirling, </author> <title> Bisimulation equivalence is decidable for all context-free processes, </title> <booktitle> Proc. </booktitle> <editor> CONCUR'92 (W.R. Cleaveland, ed.), </editor> <volume> LNCS 630, </volume> <pages> pp. 138-147, </pages> <year> 1992. </year>
Reference: 5. <author> S. Christensen, Y. Hirschfeld & F. Moller, </author> <title> Bisimulation equivalence is decidable for basic parallel processes, </title> <booktitle> Proc. </booktitle> <editor> CONCUR'93 (E. Best, ed.), </editor> <volume> LNCS 715, </volume> <pages> pp. 143-157, </pages> <year> 1993. </year>
Reference: 6. <author> S. Mauw & G.J. Veltink, </author> <title> A process specification formalism, </title> <journal> Fundamenta Infor-maticae XIII, </journal> <pages> pp. 85-139, </pages> <year> 1990. </year>
Reference-contexts: We do not think that the restriction to complete systems is a problem in practical applications. In most cases one is interested in the linearization of a complete system. Specifications in languages such as PSF <ref> [6] </ref> only consider complete systems, without singling out a specific variable. We claim that the techniques described in this paper easily extend to BPA ffi (which results from BPA by adding the special process constant ffi for unsuccessful termination).
Reference: 7. <author> S. Mauw & G.J. Veltink, </author> <title> Algebraic specification of communication protocols, </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 36, </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: If so, this would enable the application of the well known algorithms for regular systems to those BPA specifications which are in fact regular. This would help in deciding exactly when to use existing efficient implementations for deciding bisimulation equivalence (for example for the PSF-Toolkit <ref> [7] </ref>). In this paper we prove that it is decidable whether a BPA system is regular, that is, all process variables defined by it are regular. Some results for similar specification languages are known.
Reference: 8. <author> R. Milner, </author> <title> A complete inference system for a class of regular behaviours, </title> <journal> JCSS 28, </journal> <pages> pp. 439-466, </pages> <year> 1984. </year>
Reference-contexts: Refer to <ref> [8] </ref> for a proof of the following proposition, which gives a correspondence between regular and linear specifications. Proposition 6.
Reference: 9. <author> D.M.R. Park, </author> <title> Concurrency and automata on infinite sequences, </title> <booktitle> Proc. 5th GI Conf. </booktitle> <editor> (P. Duessen, ed.), </editor> <volume> LNCS 104, </volume> <pages> pp. 167-183, </pages> <year> 1981. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
References-found: 9

