URL: http://www.cs.wustl.edu/cs/cs/archive/CS531_SP95/95s/alias.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/archive/CS531_SP95/95s/papers.html
Root-URL: 
Title: Efficient Accommodation of May-Alias Information in SSA Form  
Author: Ron Cytron Reid Gershbein 
Address: St. Louis, Missouri 63130  44074  
Affiliation: Washington University  Oberlin College Oberlin, Ohio  
Abstract: We present an algorithm for incrementally including may-alias information into Static Single Assignment form by computing a sequence of increasingly precise (and correspondingly larger) partial SSA forms. Our experiments show significant speedup of our method over exhaustive use of may-alias information, as optimization problems converge well before most may aliases are needed.
Abstract-found: 1
Intro-found: 1
Reference: [AWZ88] <author> B. Alpern, M. N. Wegman, and F. K. Zadeck. </author> <title> Detecting equality of values in programs. </title> <booktitle> Conf. Rec. Fifteenth ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 1-11, </pages> <month> January </month> <year> 1988. </year>
Reference: [BCK + 88] <author> M. Berry, D. Chen, P. Koss, D. Kuck, S. Lo, Y. Pang, R. Roloff, A. Sameh, E. Clementi, S. Chin, D. Schneider, G. Fox, P. Messina, D. Walker, C. Hsiung, J. Schwarzmeier, K. Lue, S. Orszag, F. Seidl, O. Johnson, G. Swanson, R. Goodrum, and J. Martin. </author> <title> The perfect club benchmarks: Effective performance evaluation of supercomputers the performance evaluation club (perfect). </title> <type> Technical report, </type> <institution> U. of Ill-Center for Supercomputing Research and Development, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: As an associated expense, space would have to be allocated to maintain such information per-variable, or the U List would have to be sorted by symbol name. 5 Experiment We performed the following experiment on 139 Fortran programs taken from the Perfect <ref> [BCK + 88] </ref> (Ocean, Spice, QCD) benchmark suite and from the Eispack [SBD + 76] and Linpack [DBMS79] subroutine library.
Reference: [Bod90] <author> F. Bodin. </author> <title> Preliminary report Data structure analysis in C programs. </title> <institution> Indiana University, Bloomington, </institution> <month> March </month> <year> 1990. </year>
Reference: [CBC93] <author> Jong-Deok Choi, Michael Burke, and Paul Carini. </author> <title> Efficient flow-sensitive interprocedural computation of pointer-induced aliases and side effects. </title> <booktitle> Conference Record of the Twentieth Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1993. </year>
Reference: [CCF91] <author> J. Choi, R. Cytron, and J. Ferrante. </author> <title> Automatic construction of sparse data flow evaluation graphs. </title> <booktitle> Conf. Rec. Eighteenth ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 55-66, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: given in Section 3. * Our work to date addresses only "flat" name spaces, so we hope to extend the work to accommodate information developed for structure references [LH88, CWZ90, HN90]. * Our algorithm may be suitable for including informa-tion similar to may-aliases incrementally into sparse data flow evaluation graphs <ref> [CCF91] </ref>. * Our experiments are based on simulated (probabilistic) may-alias patterns. We would like to try our algorithm in a system that actually analyzes c programs for may aliases.
Reference: [CFR + 91] <author> Ron Cytron, Jeanne Ferrante, Barry K. Rosen, Mark N. Wegman, and F. Kenneth Zadeck. </author> <title> Efficiently computing static single assignment form and the control dependence graph. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <month> October </month> <year> 1991. </year>
Reference-contexts: Corollary 1 SSA i contains a -function only if SSA 1 would contain a -function. Proof: See <ref> [CFR + 91] </ref>. Lemma 6 If Rdef i (u) 6= Rdef 1 (u) then Rdef i (u) Rdef 1 (u) and Rdef 1 (u) is the target of an IsAlias () or function. <p> If the IsAlias () and functions serve only to transport data flow information to the program's original defs and uses, then these functions can be eliminated prior to code generation <ref> [CFR + 91] </ref>. In such cases, constant propagation need not be suspicious about uses in an IsAlias () or function unless such uses are required to validate the data flow solution at an ordinary program use.
Reference: [CWZ90] <author> D. R. Chase, M. Wegman, and F. K. Zadeck. </author> <title> Analysis of pointers and structures. </title> <booktitle> Proc. SIGPLAN'90 Symp. on Compiler Construction, </booktitle> <pages> pages 296-310, </pages> <month> June </month> <year> 1990. </year> <note> Published as SIG-PLAN Notices Vol. 25, No. 6. </note>
Reference-contexts: Thus, the conditions under which the constant propagator must flag a suspicious use can be restricted beyond those given in Section 3. * Our work to date addresses only "flat" name spaces, so we hope to extend the work to accommodate information developed for structure references <ref> [LH88, CWZ90, HN90] </ref>. * Our algorithm may be suitable for including informa-tion similar to may-aliases incrementally into sparse data flow evaluation graphs [CCF91]. * Our experiments are based on simulated (probabilistic) may-alias patterns.
Reference: [DBMS79] <author> J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W. Stewart. </author> <title> Linpack Users' Guide. </title> <publisher> SIAM Press, </publisher> <year> 1979. </year>
Reference-contexts: allocated to maintain such information per-variable, or the U List would have to be sorted by symbol name. 5 Experiment We performed the following experiment on 139 Fortran programs taken from the Perfect [BCK + 88] (Ocean, Spice, QCD) benchmark suite and from the Eispack [SBD + 76] and Linpack <ref> [DBMS79] </ref> subroutine library. Since Fortran (77) has no pointer dereferencing capability, we randomly associated may-alias information with each program using the following two parameters: AliasRatio R: the probability that a given definition site is may-aliased with any symbols.
Reference: [HN90] <author> L. J. Hendren and A. Nicolau. </author> <title> Parallelizing programs with recursive data structures. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 1(1) </volume> <pages> 35-47, </pages> <year> 1990. </year>
Reference-contexts: Thus, the conditions under which the constant propagator must flag a suspicious use can be restricted beyond those given in Section 3. * Our work to date addresses only "flat" name spaces, so we hope to extend the work to accommodate information developed for structure references <ref> [LH88, CWZ90, HN90] </ref>. * Our algorithm may be suitable for including informa-tion similar to may-aliases incrementally into sparse data flow evaluation graphs [CCF91]. * Our experiments are based on simulated (probabilistic) may-alias patterns.
Reference: [Lan92] <author> William A. Landi. </author> <title> Interprocedural Aliasing in the Presence of Pointers. </title> <type> PhD thesis, </type> <institution> Rutgers, The State University of New Jersey, </institution> <year> 1992. </year>
Reference: [Lan93] <author> William A. Landi. </author> <type> personal communication, </type> <year> 1993. </year>
Reference: [LH88] <author> J. R. Larus and P. N. Hilfinger. </author> <title> Detecting conflicts between structure accesses. </title> <booktitle> Proc. SIGPLAN'88 Symp. on Compiler Construction, </booktitle> <pages> pages 21-34, </pages> <month> July </month> <year> 1988. </year> <journal> Published as SIGPLAN Notices Vol. </journal> <volume> 23, No. </volume> <pages> 7. </pages>
Reference-contexts: Thus, the conditions under which the constant propagator must flag a suspicious use can be restricted beyond those given in Section 3. * Our work to date addresses only "flat" name spaces, so we hope to extend the work to accommodate information developed for structure references <ref> [LH88, CWZ90, HN90] </ref>. * Our algorithm may be suitable for including informa-tion similar to may-aliases incrementally into sparse data flow evaluation graphs [CCF91]. * Our experiments are based on simulated (probabilistic) may-alias patterns.
Reference: [LR92] <author> William Landi and Barbara G. Ryder. </author> <title> A safe approximate algorithm for interprocedural pointer aliasing. </title> <booktitle> Proceedings of the ACM SIGPLAN '92 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 235-248, </pages> <month> June </month> <year> 1992. </year>
Reference: [LT79] <author> T. Lengauer and Robert Tarjan. </author> <title> A fast algorithm for finding dominators in a flowgraph. </title> <journal> TOPLAS, </journal> <month> July </month> <year> 1979. </year>
Reference: [Mar89] <author> Thomas J. Marlowe. </author> <title> Data Flow Analysis and Incremental Iteration. </title> <type> PhD thesis, </type> <institution> Rutgers University, </institution> <month> October </month> <year> 1989. </year>
Reference: [SBD + 76] <author> B. T. Smith, J. M. Boyle, J. J. Dongarra, B. S. Garbow, Y. Ikebe, V. C. Klema, and C. B. Moler. </author> <title> Matrix Eigensystem Routines - Eispack Guide. </title> <publisher> Springer-Verlag, </publisher> <year> 1976. </year>
Reference-contexts: space would have to be allocated to maintain such information per-variable, or the U List would have to be sorted by symbol name. 5 Experiment We performed the following experiment on 139 Fortran programs taken from the Perfect [BCK + 88] (Ocean, Spice, QCD) benchmark suite and from the Eispack <ref> [SBD + 76] </ref> and Linpack [DBMS79] subroutine library. Since Fortran (77) has no pointer dereferencing capability, we randomly associated may-alias information with each program using the following two parameters: AliasRatio R: the probability that a given definition site is may-aliased with any symbols.
Reference: [Tar75] <author> Robert Tarjan. </author> <title> Efficiency of a good but not linear set union algorithm. </title> <journal> JACM, </journal> <volume> 22 </volume> <pages> 215-225, </pages> <year> 1975. </year>
Reference-contexts: While our experience with the algorithm indicates very good performance in practice (Section 5), the asymptotic performance can be improved by introducing path-compression <ref> [Tar75] </ref> into Snoop ().
Reference: [WZ91] <author> M. N. Wegman and F. K. Zadeck. </author> <title> Constant propagation with conditional branches. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 13(2) </volume> <pages> 181-210, </pages> <month> April </month> <year> 1991. </year>
References-found: 18

