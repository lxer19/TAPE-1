URL: http://www.cs.umd.edu/projects/hermes/publications/postscripts/utnvuc.ps
Refering-URL: http://www.cs.umd.edu/projects/hermes/publications/abstracts/utnvuc.html
Root-URL: 
Title: A Unified Treatment of Null Values using Constraints  
Author: Kasm S. Candan John Grant V.S. Subrahmanian 
Abstract: An important reality when studying relational databases is the fact that entries in relational tables may often be "missing" or only partially specified. The study of such missing information has led to a rich body of work on "null values." It was recognized early on that there are many different types of null values, each of which reflects different intuitions about why a particular piece of information is missing. Different relations (or even the same relation) could contain different types of null values; yet, very little work has been done on providing a unifying model that reasons with different types of nulls. In this paper, we use constraints to provide a unifying framework for the most common types of nulls. We show how viewing tuples containing null values of these types can be viewed as constraints, and how this leads to an algebra for null values. In particular, this algebra contains a unique operator (called the "compaction" operator) used to remove redundancies from null valued relations. We have studied various properties of this algebra. We have built a prototype implementation based on the null valued operators described here and conducted various experiments using this testbed.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abiteboul, S., Hull, R., Vianu, V., </author> <title> Foundations of Databases, </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1995. </year>
Reference-contexts: Implication formulas must also be set up among the predicates. Probability distribution on the domain and constraints are also introduced for existential nulls. Abiteboul-Hull-Vianu <ref> [1, Chapter 19] </ref> deal mostly with the Imielinski-Lipski work and also include material and references on complexity issues. 36 8 Conclusions A frequent occurrence in relational databases is that certain attribute slots in tuples cannot be filled in for any of a number of reasons.
Reference: [2] <institution> ANSI/X3/SPARC Study Group on Data Base Management Systems, </institution> <note> Interim Report 75-02-08, FDT Bulletin of ACM-SIGMOD Vol. 7, No. 2, </note> <year> 1975. </year>
Reference-contexts: 86 p Disjunctive information Minker-Perlis 85 Protected data p Liu-Sunderraman 97,90,91 Disjunctive information, Pro tected data p Atzeni-DeAntonellis 93 p p p p p Probability distribution p Abiteboul-hull-Vianu 95 p p p Candan-Grant-Subrahmanian p p p p p p p p Research in null values began with the ANSI/X3/SPARC report <ref> [2] </ref> that distinguished among 14 types of nulls. However most of these types are special cases of our existential and place holder nulls, the others are operational definitions such as "available, but of suspect validity (unreliable)".
Reference: [3] <author> Atzeni, P. and De Antonellis, V., </author> <title> Relational Database Theory, </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1993. </year>
Reference-contexts: Though all the types of nulls described in this paper are discussed in <ref> [3] </ref>, they do not provide a unified framework of handling these nulls jointly, which we do here. <p> The relational algebra is generalized to what are called I-tables, and correctness is proved. There are also several recent books on relational database theory that contain information on null values. Atzeni-DeAntonellis <ref> [3, Chapter 6] </ref> deals with all five types of nulls. The representation uses first-order formulas with a regular existential quantifier; in some cases additional predicates are needed omitting the attribute on which the null values, like the placeholder null, occurs. Implication formulas must also be set up among the predicates. <p> In this paper, we have shown how constraints may be used to provide a unified treatment of all the types of nulls considered above. Though most of these null values have been treated individually (e.g. <ref> [3] </ref>), these treatments have considered the respective null values in isolation, and have not provided a single unifying framework. Based on our unified constraint-based model, we have developed an algebra for databases containing these varied types of null values.
Reference: [4] <author> Biskup, J., </author> <title> A Formal Approach to Null Values in Database Relations, </title> <booktitle> In: Advances in Database Theory, Volume 1 (H. </booktitle> <editor> Gallaire, J. Minker, and J. M. Nicolas, Eds.) </editor> <publisher> Plenum Press, </publisher> <year> 1981, </year> <pages> pp 299-341. </pages>
Reference: [5] <author> Biskup, J., </author> <title> A Foundation of Codd's Relational Maybe-Operations, </title> <journal> ACM TODS 8 (1983) pp. </journal> <pages> 608-636. </pages>
Reference-contexts: Another approach to the null value problem is formulated in Wong [25] who assumes a probability distribution for an unknown value in a domain. Biskup [6] introduces the universal "don't care" null in analogy to the existential null. in both Biskup <ref> [5] </ref> and [6], the correctness of the operations are proved and "maybe tuples" from previous operations are allowed and used in a systematic way. Reiter [22] proposed a formal theory of databases in first-order logic including existential nulls. Existential nulls are treated as Skolem constants without unique name axioms.
Reference: [6] <author> Biskup, J., </author> <title> Extending the Relational Algebra for Relations with Maybe Tuples and Existential and Universal Null Values, </title> <note> Fundamenta Informaticae VII (1984) pp. 129-150. </note>
Reference-contexts: The operations of the relational algebra are generalized to this framework. Another approach to the null value problem is formulated in Wong [25] who assumes a probability distribution for an unknown value in a domain. Biskup <ref> [6] </ref> introduces the universal "don't care" null in analogy to the existential null. in both Biskup [5] and [6], the correctness of the operations are proved and "maybe tuples" from previous operations are allowed and used in a systematic way. <p> Another approach to the null value problem is formulated in Wong [25] who assumes a probability distribution for an unknown value in a domain. Biskup <ref> [6] </ref> introduces the universal "don't care" null in analogy to the existential null. in both Biskup [5] and [6], the correctness of the operations are proved and "maybe tuples" from previous operations are allowed and used in a systematic way. Reiter [22] proposed a formal theory of databases in first-order logic including existential nulls. Existential nulls are treated as Skolem constants without unique name axioms.
Reference: [7] <author> Codd, E. F., </author> <booktitle> Understanding Relations (Installment #7) FDT Bulletin of ACM-SIGMOD 7 (1975) pp. </booktitle> <pages> 23-28. </pages>
Reference-contexts: However most of these types are special cases of our existential and place holder nulls, the others are operational definitions such as "available, but of suspect validity (unreliable)". The first paper that deals with the handling of null values in query processing is Codd <ref> [7] </ref>. A 3-valued logic is introduced for the handling of existential nulls. Grant [9] points out a flaw in this method and suggests a method to solve this problem as well as to deal with placeholder nulls.
Reference: [8] <author> Codd, E. F., </author> <title> Extending the Database Relational Model to Capture More Meaning, </title> <journal> ACM TODS 4 (1979) pp. </journal> <pages> 397-434. </pages>
Reference: [9] <author> Grant, J., </author> <title> Null Values in a Relational Data Base, </title> <note> Information Processing Letters 6 (1977) pp. 156-157. </note>
Reference-contexts: The first paper that deals with the handling of null values in query processing is Codd [7]. A 3-valued logic is introduced for the handling of existential nulls. Grant <ref> [9] </ref> points out a flaw in this method and suggests a method to solve this problem as well as to deal with placeholder nulls. Additional early work on partial nulls appears in Grant [10, 11], Lipski [16, 17].
Reference: [10] <author> Grant, J., </author> <title> Partial Values in a Tabular Database Model, </title> <note> Information Processing Letters 9 (1979) pp. 97-99. </note>
Reference-contexts: A 3-valued logic is introduced for the handling of existential nulls. Grant [9] points out a flaw in this method and suggests a method to solve this problem as well as to deal with placeholder nulls. Additional early work on partial nulls appears in Grant <ref> [10, 11] </ref>, Lipski [16, 17]. Conditions (constraints) were introduced into tables in Imielinski-Lipski [13, 14] in connection with representation systems. Variables represent null values in these tables; constraints involving equalities and inequalities of variables and constraints may be associated with individual rows and the whole table.
Reference: [11] <author> Grant, J., </author> <title> Incomplete Information in a Relational Database, </title> <note> Fundamenta Informaticae III (1980) pp. 363-378. </note>
Reference-contexts: A 3-valued logic is introduced for the handling of existential nulls. Grant [9] points out a flaw in this method and suggests a method to solve this problem as well as to deal with placeholder nulls. Additional early work on partial nulls appears in Grant <ref> [10, 11] </ref>, Lipski [16, 17]. Conditions (constraints) were introduced into tables in Imielinski-Lipski [13, 14] in connection with representation systems. Variables represent null values in these tables; constraints involving equalities and inequalities of variables and constraints may be associated with individual rows and the whole table.
Reference: [12] <author> Grant, J. and Minker, J., </author> <title> Answering Queries in Indefinite Databases and the Null Value Problem, </title> <booktitle> In: Advances in Computing Research Volume 3 (P. </booktitle> <editor> Kanellakis, Ed.) </editor> <booktitle> 1986 pp. </booktitle> <pages> 247-267. </pages>
Reference-contexts: Within this framework a correct, but incomplete query evaluation algorithm is given for the relational calculus by Reiter [23]. Yuan-Chiang [26] extend the work of Reiter; their algorithm is complete and allows indefinite information in the form of a disjunction. Grant-Minker <ref> [12] </ref> also provide an algorithm for finding the answers to a query in a disjunctive database with negation interpreted through the Generalized Closed World Assumption.
Reference: [13] <author> Imielinski, T. and Lipski, W., </author> <title> On Representing Incomplete Information in a Relational Database, </title> <booktitle> Proc. of 7th VLDB Conf., </booktitle> <year> 1981, </year> <pages> pp. 389-397. </pages>
Reference-contexts: Intuitively, a tuple t may be thought of as being "in" the relation iff C t is true. Though the idea of using constraints to handle null values in databases is not new (cf. Imielinski-Lipski <ref> [13, 14] </ref>), the use of constraints to present a unified way of handling different types of nulls is, to the best of our knowledge, new and novel. Section 2 shows how databases with constraints can be used to express the semantics of the above types of null values. <p> 1 )(9t k 2 R 2 ) ((8 joining attributes A )((t i :A is a va mar ) ^ (t k :A is a va mar )^ (t i :A = t k :A))^ The above definitions extend the algebraic operators on Conditional Tables given by Imielinski and Lipski <ref> [13, 14] </ref> because the operators in [14] apply only to databases containing existential nulls our operators apply to all the types of nulls described at the beginning of this paper. <p> Grant [9] points out a flaw in this method and suggests a method to solve this problem as well as to deal with placeholder nulls. Additional early work on partial nulls appears in Grant [10, 11], Lipski [16, 17]. Conditions (constraints) were introduced into tables in Imielinski-Lipski <ref> [13, 14] </ref> in connection with representation systems. Variables represent null values in these tables; constraints involving equalities and inequalities of variables and constraints may be associated with individual rows and the whole table. The constraints are used to limit the allowed interpretations for existential nulls.
Reference: [14] <author> Imielinski, T. and Lipski, W., </author> <title> Incomplete Information in Relational Databases, </title> <journal> JACM 31 (1984) pp. </journal> <pages> 761-791. </pages>
Reference-contexts: Intuitively, a tuple t may be thought of as being "in" the relation iff C t is true. Though the idea of using constraints to handle null values in databases is not new (cf. Imielinski-Lipski <ref> [13, 14] </ref>), the use of constraints to present a unified way of handling different types of nulls is, to the best of our knowledge, new and novel. Section 2 shows how databases with constraints can be used to express the semantics of the above types of null values. <p> 1 )(9t k 2 R 2 ) ((8 joining attributes A )((t i :A is a va mar ) ^ (t k :A is a va mar )^ (t i :A = t k :A))^ The above definitions extend the algebraic operators on Conditional Tables given by Imielinski and Lipski <ref> [13, 14] </ref> because the operators in [14] apply only to databases containing existential nulls our operators apply to all the types of nulls described at the beginning of this paper. <p> ) ((8 joining attributes A )((t i :A is a va mar ) ^ (t k :A is a va mar )^ (t i :A = t k :A))^ The above definitions extend the algebraic operators on Conditional Tables given by Imielinski and Lipski [13, 14] because the operators in <ref> [14] </ref> apply only to databases containing existential nulls our operators apply to all the types of nulls described at the beginning of this paper. <p> Grant [9] points out a flaw in this method and suggests a method to solve this problem as well as to deal with placeholder nulls. Additional early work on partial nulls appears in Grant [10, 11], Lipski [16, 17]. Conditions (constraints) were introduced into tables in Imielinski-Lipski <ref> [13, 14] </ref> in connection with representation systems. Variables represent null values in these tables; constraints involving equalities and inequalities of variables and constraints may be associated with individual rows and the whole table. The constraints are used to limit the allowed interpretations for existential nulls.
Reference: [15] <author> Lien, E., </author> <title> Multivalued Dependencies with Null Values in Relational Databases, </title> <booktitle> Proc. of 5th VLDB Conf., </booktitle> <year> 1979, </year> <pages> pp. 61-66. </pages>
Reference-contexts: A table q 0 (T ) correctly represents the query if rep (q 0 (T )) = q (rep (T )). It is shown that queries in the relational algebra can be represented correctly by the set of conditional tables. Building on the work of Lien <ref> [15] </ref> and Vassiliou [24], Zaniolo [27] introduces the maybe null, as the "no information" null. The operations of the relational algebra are generalized to this framework. Another approach to the null value problem is formulated in Wong [25] who assumes a probability distribution for an unknown value in a domain.
Reference: [16] <author> Lipski, W., </author> <title> On Semantic Issues Connected with Incomplete Information Systems, </title> <journal> ACM TODS 4 (1979) pp. </journal> <pages> 262-296. </pages>
Reference-contexts: A 3-valued logic is introduced for the handling of existential nulls. Grant [9] points out a flaw in this method and suggests a method to solve this problem as well as to deal with placeholder nulls. Additional early work on partial nulls appears in Grant [10, 11], Lipski <ref> [16, 17] </ref>. Conditions (constraints) were introduced into tables in Imielinski-Lipski [13, 14] in connection with representation systems. Variables represent null values in these tables; constraints involving equalities and inequalities of variables and constraints may be associated with individual rows and the whole table.
Reference: [17] <author> Lipski, W., </author> <title> On Databases with Incomplete Information, </title> <journal> JACM 28 (1981) pp. </journal> <pages> 41-70. </pages>
Reference-contexts: A 3-valued logic is introduced for the handling of existential nulls. Grant [9] points out a flaw in this method and suggests a method to solve this problem as well as to deal with placeholder nulls. Additional early work on partial nulls appears in Grant [10, 11], Lipski <ref> [16, 17] </ref>. Conditions (constraints) were introduced into tables in Imielinski-Lipski [13, 14] in connection with representation systems. Variables represent null values in these tables; constraints involving equalities and inequalities of variables and constraints may be associated with individual rows and the whole table.
Reference: [18] <author> Liu, K. C. and Sunderraman, R., </author> <title> An Extension to the Relational Model for Indefinite Databases, </title> <booktitle> Proc. of ACM-IEEE Computer Society Joint Computer Conference 1987, </booktitle> <pages> pp. 428-435. </pages>
Reference-contexts: A query evaluation algorithm is given for such situations by Minker and Perlis [21]. Among recent papers the ones by Liu-Sunderraman <ref> [18, 19, 20] </ref> deal with indefinite information in the sense of disjunctive tuples as well as protection in the sense of maybe tuples. The relational algebra is generalized to what are called I-tables, and correctness is proved.
Reference: [19] <author> Liu, K. C. and Sunderraman, R., </author> <title> Indefinite and Maybe Information in Relational Databases, </title> <journal> ACM TODS 15 (1990) pp. </journal> <pages> 1-39. </pages>
Reference-contexts: A query evaluation algorithm is given for such situations by Minker and Perlis [21]. Among recent papers the ones by Liu-Sunderraman <ref> [18, 19, 20] </ref> deal with indefinite information in the sense of disjunctive tuples as well as protection in the sense of maybe tuples. The relational algebra is generalized to what are called I-tables, and correctness is proved.
Reference: [20] <author> Liu, K. C. and Sunderraman, R., </author> <title> A Generalized Relational Model for Indefinite and Maybe Information, </title> <journal> IEEE TKDE 3 (1991) pp. </journal> <pages> 65-77. </pages>
Reference-contexts: A query evaluation algorithm is given for such situations by Minker and Perlis [21]. Among recent papers the ones by Liu-Sunderraman <ref> [18, 19, 20] </ref> deal with indefinite information in the sense of disjunctive tuples as well as protection in the sense of maybe tuples. The relational algebra is generalized to what are called I-tables, and correctness is proved.
Reference: [21] <author> Minker, J. and Perlis, D., </author> <title> Computing Protected Circumscription, </title> <journal> Journal of Logic Programming 4 (1985) pp. </journal> <pages> 235-249. </pages>
Reference-contexts: A query evaluation algorithm is given for such situations by Minker and Perlis <ref> [21] </ref>. Among recent papers the ones by Liu-Sunderraman [18, 19, 20] deal with indefinite information in the sense of disjunctive tuples as well as protection in the sense of maybe tuples. The relational algebra is generalized to what are called I-tables, and correctness is proved.
Reference: [22] <author> Reiter, R., </author> <title> Towards a Logical Reconstruction of Relational Database Theory, In: Conceptual Modeling (M. </title> <editor> Brodie, J. Mylopoulos, and J. W. Schmidt, Eds.) </editor> <publisher> Springer-Verlag, </publisher> <year> 1984, </year> <pages> pp. 191-238. </pages>
Reference-contexts: Biskup [6] introduces the universal "don't care" null in analogy to the existential null. in both Biskup [5] and [6], the correctness of the operations are proved and "maybe tuples" from previous operations are allowed and used in a systematic way. Reiter <ref> [22] </ref> proposed a formal theory of databases in first-order logic including existential nulls. Existential nulls are treated as Skolem constants without unique name axioms. Within this framework a correct, but incomplete query evaluation algorithm is given for the relational calculus by Reiter [23].
Reference: [23] <author> Reiter, R., </author> <title> A Sound and Sometimes Complete Query Evaluation Algorithm for Relational Databases with Null Values, </title> <journal> JACM 33 (1986) pp. </journal> <pages> 349-370. </pages>
Reference-contexts: Reiter [22] proposed a formal theory of databases in first-order logic including existential nulls. Existential nulls are treated as Skolem constants without unique name axioms. Within this framework a correct, but incomplete query evaluation algorithm is given for the relational calculus by Reiter <ref> [23] </ref>. Yuan-Chiang [26] extend the work of Reiter; their algorithm is complete and allows indefinite information in the form of a disjunction. Grant-Minker [12] also provide an algorithm for finding the answers to a query in a disjunctive database with negation interpreted through the Generalized Closed World Assumption.
Reference: [24] <author> Vassiliou, Y., </author> <title> Null Values in Database Management, A Denotational Semantics Approach, </title> <booktitle> Proc. of ACM-SIGMOD 1979, </booktitle> <pages> pp. 162-169. </pages>
Reference-contexts: A table q 0 (T ) correctly represents the query if rep (q 0 (T )) = q (rep (T )). It is shown that queries in the relational algebra can be represented correctly by the set of conditional tables. Building on the work of Lien [15] and Vassiliou <ref> [24] </ref>, Zaniolo [27] introduces the maybe null, as the "no information" null. The operations of the relational algebra are generalized to this framework. Another approach to the null value problem is formulated in Wong [25] who assumes a probability distribution for an unknown value in a domain.
Reference: [25] <author> E. Wong. </author> <title> A Statistical Approach to Incomplete Information in Database Systems, </title> <journal> ACM TODS 7 (1982) pp. </journal> <pages> 470-488. </pages>
Reference-contexts: Building on the work of Lien [15] and Vassiliou [24], Zaniolo [27] introduces the maybe null, as the "no information" null. The operations of the relational algebra are generalized to this framework. Another approach to the null value problem is formulated in Wong <ref> [25] </ref> who assumes a probability distribution for an unknown value in a domain.
Reference: [26] <author> Yuan, L. Y. and Chiang, D.-A., </author> <title> A Sound and Complete Query Evaluation Algorithm for Rela--tional Databases with Null Values, </title> <booktitle> Proc. 1989 ACM Symp. on Principles of Database Systems, </booktitle> <year> 1989, </year> <month> pps 66-74. </month>
Reference-contexts: Reiter [22] proposed a formal theory of databases in first-order logic including existential nulls. Existential nulls are treated as Skolem constants without unique name axioms. Within this framework a correct, but incomplete query evaluation algorithm is given for the relational calculus by Reiter [23]. Yuan-Chiang <ref> [26] </ref> extend the work of Reiter; their algorithm is complete and allows indefinite information in the form of a disjunction. Grant-Minker [12] also provide an algorithm for finding the answers to a query in a disjunctive database with negation interpreted through the Generalized Closed World Assumption.
Reference: [27] <author> Zaniolo, C., </author> <title> Database Relations with Null Values, </title> <journal> Journal of Computer and System Sciences 29 (1984), </journal> <pages> pp. 142-166. </pages>
Reference-contexts: It is shown that queries in the relational algebra can be represented correctly by the set of conditional tables. Building on the work of Lien [15] and Vassiliou [24], Zaniolo <ref> [27] </ref> introduces the maybe null, as the "no information" null. The operations of the relational algebra are generalized to this framework. Another approach to the null value problem is formulated in Wong [25] who assumes a probability distribution for an unknown value in a domain.
References-found: 27

