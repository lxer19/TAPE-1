URL: http://fmg-www.cs.ucla.edu/ficus-members/reiher/papers/ecoop.ps
Refering-URL: http://ficus-www.cs.ucla.edu/ficus-members/ratner/papers.html
Root-URL: http://www.cs.ucla.edu
Title: Peer-to-Peer Reconciliation Based Replication for Mobile Computers  
Author: Peter Reiher, Jerry Popek, Michial Gunter, John Salomone, David Ratner 
Affiliation: UCLA  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Richard Guy, John Heidemann, Wai Mak, Thomas Page Jr., Gerald Popek, and Dieter Rothmeier, </author> <title> Implementation of the Ficus Replicated File System, </title> <booktitle> Proceedings of the Summer Usenix Conference, </booktitle> <year> 1990. </year>
Reference-contexts: Peer-to-Peer Replication Peer-to-peer replication permits any replica of a data item to exchange update information with any other replica <ref> [1] </ref>. Client/server replication permits a data item replica to transmit its updates only to one or more specially designated server replicas [3]. The updates are transmitted from the servers to all other clients. <p> Rumor is a working system, and serves as a demonstration of the validity and suitability of peer-to-peer reconciliation-based data replication solutions for mobile computers. Rumor is an intellectual descendant of the Ficus file system <ref> [1] </ref>. Rumor has been built as an application-level service. It makes no use of any kernel facilities beyond those exported to normal applications. Rumor also does not use special libraries or privileged programs. Rumor interposes no code at all during file update or file access time.
Reference: [2] <author> Peter Reiher, John Heidemann, David Ratner, Gregory Skinner, and Gerald Popek, </author> <title> Resolving File Conflicts in the Ficus File System, </title> <booktitle> Proceedings of the Summer Usenix Conference, </booktitle> <year> 1994. </year>
Reference-contexts: numbers of replicas. (Rumor has a practical limit of twenty replicas or so, due to overheads of storing meta-data and the speed at which updates will propagate through the system.) Rumor correctly detects and handles all cases involving various forms of conflicts, including update/update conflicts, update/delete conflicts, and name conflicts <ref> [2] </ref>. Rumor uses version vectors to guarantee that each update has a unique signature, thus ensuring that the same update need never be transmitted to the same replica more than once. Since Rumor was designed to work at the user level, it is relatively portable.
Reference: [3] <author> M. Satyanarayanan, James Kistler, Puneet Kumar, Maria Okasaki, Ellen Siegel, and David Steere, Coda: </author> <title> A Highly Available File System for a Distributed Workstation Environment, </title> <journal> IEEE Transactions on Computers, </journal> <month> April </month> <year> 1990. </year>
Reference-contexts: Peer-to-Peer Replication Peer-to-peer replication permits any replica of a data item to exchange update information with any other replica [1]. Client/server replication permits a data item replica to transmit its updates only to one or more specially designated server replicas <ref> [3] </ref>. The updates are transmitted from the servers to all other clients. The client/server model of replication is can work very well in an office workstation setting, where connectivity is generally available and communications patterns are mostly fixed. In a more fluid setting, it has some disadvantages. <p> Client/server systems that support multiple server replicas for higher reliability and performance must use peer-to-peer algorithms within the set of server replicas <ref> [3] </ref>. Assuming that all servers are highly available and always connected again simplifies matters, but if one must tackle the complexities of peer-to-peer replication at some level, anyway, less is gained from the simplifications of the client/server model.
References-found: 3

