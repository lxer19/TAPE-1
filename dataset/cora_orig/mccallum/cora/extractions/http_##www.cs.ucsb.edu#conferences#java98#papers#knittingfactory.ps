URL: http://www.cs.ucsb.edu/conferences/java98/papers/knittingfactory.ps
Refering-URL: http://www.cs.ucsb.edu/conferences/java98/program.html
Root-URL: http://www.cs.ucsb.edu
Email: (baratloo|karaul|karl|kedem)@cs.nyu.edu  
Title: An Infrastructure for Network Computing with Java Applets  
Author: Arash Baratloo, Mehmet Karaul, Holger Karl, and Zvi M. Kedem 
Address: New York University  
Affiliation: Department of Computer Science Courant Institute of Mathematical Sciences  
Abstract: Java in combination with Web browsers' abilities to load and execute untrusted Java applets in a secure fashion has made computing over the Web a possibility. Now the challenge is to fully utilize this potential, given the limitations imposed by browsers. This paper presents Knitting-Factory, an infrastructure to facilitate Web-based computing, which addresses this challenge. It supports building distributed applications, specifically those consisting of Java applets executing in browsers. It is composed of (1) a distributed name service to assist users in locating other participants of a distributed computation via standard browsers, (2) an embedded class server to eliminate the need for external HTTP servers for serving applet code, and (3) a technique for direct applet-to-applet communication. In this paper, we describe the design and implementation of KnittingFactory and demonstrate its benefits by applying it to three distinct areas of Web-based computing. First, we apply our distributed name service to a client/server architecture to enable RMI clients to locate servers on unknown hosts. Second, we use the embedded class server to extend the capability of Charlotte, a parallel computing environment. And finally, we build a collaborative application using our direct applet-to-applet communication technique which does not require a forwarding agent. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. E. Baldeschwieler, R. D. Blumofe, and E. A. Brewer. </author> <title> ATLAS: An Infrastructure for Global Computing. </title> <booktitle> In Proc. of the 7th ACM SIGOPS European Workshop: Systems support for Worldwide Applications, </booktitle> <address> Connemara, Ireland, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: This work can be loosely categorized based on their emphasis: those that focus on parallel programming environments, or metacomputing on the Web, and those that focus on the infrastructure for collaborative applications on the Web. Metacomputing on the Web: The projects which focus on Java-based parallel computing include ATLAS <ref> [1] </ref>, Charlotte [3], JPVM [11], JavaParty [22], Javelin [8], ParaWeb [6], and WebFlow [5]. <p> This has hampered the collaborativeness of applets. Typical solutions to allow applets to exchange information have been to either rely on untrusted native code or to use a single for warding agent. Untrusted code has been used as native-methods <ref> [1] </ref> and browser plug-ins [4]. However, this approach breaks the security guarantees provided by Java and introduces additional administrative overhead otherwise not needed. More importantly, it prevents off-the-shelf browsers from participating in a distributed computation.
Reference: [2] <author> A. Baratloo, M. Karaul, H. Karl, and Z. Kedem. KnittingFactory: </author> <title> An Infrastructure for Distributed Web Applications. </title> <type> Technical Report TR 1997-748, </type> <institution> Deptartment of Computer Science, </institution> <address> New York University, New York, NY, </address> <month> November </month> <year> 1997. </year>
Reference-contexts: Section 3 describes the philosophy and design of KnittingFactory. Sections 4, 5, and 6 describe the implementation and example applications of the respective services. A more detailed description of the implementation can be found in <ref> [2] </ref>. We conclude by discussing the security implications of KnittingFactory and by presenting the status and future directions of this project. 2 Related Work There is a growing body of work on how to best utilize the emergence of new Java-based technologies.
Reference: [3] <author> A. Baratloo, M. Karaul, Z. Kedem, and P. Wyck-off. </author> <title> Charlotte: Metacomputing on the Web. </title> <booktitle> In Proc. of the 9th International Conference on Parallel and Distributed Computing Systems, </booktitle> <address> Dijon, France, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: Metacomputing on the Web: The projects which focus on Java-based parallel computing include ATLAS [1], Charlotte <ref> [3] </ref>, JPVM [11], JavaParty [22], Javelin [8], ParaWeb [6], and WebFlow [5]. <p> KnittingFactory also provides a specialized implementation of KF Server which integrates KF Directory Service. In what follows, this implementation is used as an underlying layer for a parallel programming environment. 6 5.1 KF Class Server and Parallel Program- ming Systems We chose the Charlotte <ref> [3] </ref> system to evaluate the infrastructure provided by KnittingFactory. Charlotte is a parallel programming environment which provides features analogous to distributed threads and shared memory abstractions. The two main components in a Charlotte program are: a manager (i.e., initiator) and one or more workers (i.e., partners).
Reference: [4] <author> L. Beca, G. Cheng, G. C. Fox, T. Jurga, K. Ol-szewski, M. Podgorny, P. Sokolwski, and K. Wal-czak. </author> <title> Web Technologies for Collaborative Visualization and Simulation. </title> <type> Technical Report SCCS-786, </type> <institution> Northeast Parallel Architectures Center, </institution> <month> Jan-uary </month> <year> 1997. </year>
Reference-contexts: Examples of such applications are distributed whiteboards, calendars, and editors where multiple users collaborate towards one goal. High level software systems which support collaborative Java applications include the Caltech Infosphere project [9], Jada/PageSpace [10], Java Collaborator Toolset [21], JavaSpaces [16], and TANGO <ref> [4] </ref>. Jada and JavaSpaces integrate the Linda concept with Java. Where Jada uses a Linda-like tuple model, Java-Spaces utilizes object hierarchies for tuple matching. PageSpace builds higher-level functionalities on top of Jada. Infosphere proposes channel-coupled agents to build flexible ways of collaborative interactions. <p> This has hampered the collaborativeness of applets. Typical solutions to allow applets to exchange information have been to either rely on untrusted native code or to use a single for warding agent. Untrusted code has been used as native-methods [1] and browser plug-ins <ref> [4] </ref>. However, this approach breaks the security guarantees provided by Java and introduces additional administrative overhead otherwise not needed. More importantly, it prevents off-the-shelf browsers from participating in a distributed computation.
Reference: [5] <author> D. Bhatia, V. Camuseva, M. Camuseva, G. Fox, W. Furmanski, and G. Premchandran. </author> <title> Web-Flow a Visual Programming Paradigm for Web/Java Based on Coarse Grain Distributed Computing. </title> <journal> Concur-rency: Practice and Experience, </journal> <month> March </month> <year> 1997. </year>
Reference-contexts: Metacomputing on the Web: The projects which focus on Java-based parallel computing include ATLAS [1], Charlotte [3], JPVM [11], JavaParty [22], Javelin [8], ParaWeb [6], and WebFlow <ref> [5] </ref>. Similarly, there have been proposals for Web-enabled virtual machines as a base for High Performance Computing and Communication (HPCC) platform [14], to use Java in an SPMD programming model [17], and to extend Java with global pointers and remote service request mechanisms from the Nexus communication library [13]. <p> As discussed earlier, the typical solution <ref> [5, 19, 17] </ref> to overcome these limitations has been to use a stand-alone application to route messages between applets. KF Applet has been designed to only work for applets belonging to the same session.
Reference: [6] <author> T. Brecht, H. Sandhu, M. Shan, and J. Talbot. ParaWeb: </author> <title> Towards World-Wide Supercomputing. </title> <booktitle> In Proc. of the 7th ACM SIGOPS European Workshop: Systems support for Worldwide Applications, </booktitle> <address> Con-nemara, Ireland, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: Metacomputing on the Web: The projects which focus on Java-based parallel computing include ATLAS [1], Charlotte [3], JPVM [11], JavaParty [22], Javelin [8], ParaWeb <ref> [6] </ref>, and WebFlow [5].
Reference: [7] <author> N. Brown and C. Kindell. </author> <title> Distributed Component Object Model Protocol - DCOM/1.0, </title> <year> 1996. </year>
Reference-contexts: While parallel computing on workstation clusters is common practice with systems such as PVM [24] and MPI [15], this is not the case for computing over the Web. Similarly, while collaborative work on intranets is supported by systems like CORBA [23] and DCOM <ref> [7] </ref>, this does not hold true for the Web. Some of the obstacles common to both Web-based parallel computing and collaborative work are the heterogeneity of the participating systems, difficulties in administering distributed applications, security concerns of users, and often high communication delays.
Reference: [8] <author> P. Cappello, B. Christiansen, M. F. Ionescu, M. O. Neary, K. E. Schauser, and D. Wu. Javelin: </author> <title> Internet-Based Parallel Computing Using Java. </title> <journal> Concur-rency: Practice and Experience, </journal> <month> November </month> <year> 1997. </year>
Reference-contexts: Metacomputing on the Web: The projects which focus on Java-based parallel computing include ATLAS [1], Charlotte [3], JPVM [11], JavaParty [22], Javelin <ref> [8] </ref>, ParaWeb [6], and WebFlow [5]. <p> However, this approach breaks the security guarantees provided by Java and introduces additional administrative overhead otherwise not needed. More importantly, it prevents off-the-shelf browsers from participating in a distributed computation. The use of a single agent to forward messages among applets as used in <ref> [8, 21, 10] </ref> has drawbacks: it introduces a single point of failure, limits scalability, and might raise privacy concerns when messages should not be subject to inspection by a forwarding agent. JDK1.1 introduced signed applets and JAR files using a certificate [19, 18].
Reference: [9] <author> K. M. Chandy, A. Rifkin, P. A. G. Sivilotti, J. Man-delson, M. Richardson, W. Tanaka, and L. </author> <month> Weisman. </month>
Reference-contexts: Collaborative applications on the Web: The second category of projects focuses on software infrastructures for collaborative applications. Examples of such applications are distributed whiteboards, calendars, and editors where multiple users collaborate towards one goal. High level software systems which support collaborative Java applications include the Caltech Infosphere project <ref> [9] </ref>, Jada/PageSpace [10], Java Collaborator Toolset [21], JavaSpaces [16], and TANGO [4]. Jada and JavaSpaces integrate the Linda concept with Java. Where Jada uses a Linda-like tuple model, Java-Spaces utilizes object hierarchies for tuple matching. PageSpace builds higher-level functionalities on top of Jada.
References-found: 9

