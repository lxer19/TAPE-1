URL: ftp://ftp.csd.uu.se/pub/papers/reports/0078/2-bansal.ps.gz
Refering-URL: http://www.informatik.uni-trier.de/~ley/db/conf/iclp/iclp94-w6.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: arvind@mcs.kent.edu  
Title: Towards a Formal Computation Model of Associative Logic Programming  
Author: Arvind K. Bansal 
Address: OH 44242 0001, USA  
Affiliation: Department of Mathematics and Computer Science Kent State University, Kent,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. K. Bansal and J. Potter, </author> <title> "Exploiting Data Parallelism for Efficient Execution of Logic Programs with Large Knowledge Bases", </title> <booktitle> Proceedings of the Tools for Artificial Intelligence 1990, </booktitle> <address> Herndon, USA, </address> <month> (Nov. </month> <year> 1990), </year> <pages> pp. 674 - 681. </pages>
Reference: [2] <author> A. K. Bansal and J. L. Potter, </author> <title> "An Associative Model to Minimize Matching and Backtracking Overhead in Logic Programs with Large Knowledge Bases", </title> <journal> The International Journal of Engineering Applications of Artificial Intelligence, Permagon Press, </journal> <volume> Volume 5, Number 3, </volume> <year> (1992), </year> <pages> pp. 247 - 262. </pages>
Reference: [3] <author> A. K. Bansal, J. Potter, and L. V. Prasad, </author> " <title> Data Parallel Compilation and Extending Query Power of Large Knowledge Bases," </title> <booktitle> In the Proceedings of the International Conference of Tools for Artificial Intelligence 1992, </booktitle> <pages> pp. 276 - 283. </pages>
Reference-contexts: A detailed scheme for the computation model for SIMD computers is given in <ref> [3] </ref>. Alignment of D-bags plays a major role in reduction of the overhead of data movement and associative retrieval of information from aligned fields. Data movement is reduced by using a F-bag to select a subbag from the original D-bag or association of D-bags. <p> The major advantage of associative scheme over conventional scheme is that accessing bindings for aliased variables needs constant number of operations, and is independent of number of variables in the aliased set. A detailed implementation mechanism is given in <ref> [3, 4] </ref>. 3.1 The Model Behavior The model exploits run time execution efficiency both at the data level during data parallel goal reduction by treating the clause-heads as data for efficient pattern-matching, and control level during the execution of the code of the corresponding subgoals in the selected clause.
Reference: [4] <author> A. Bansal, </author> <title> "An Associative Compilation Model for Tight Integration of High Performance Knowledge Retrieval and Computing", </title> <booktitle> International Journal on Artificial Intelligence Tools, </booktitle> <publisher> World Scientific Publishers, in press. </publisher>
Reference-contexts: The major advantage of associative scheme over conventional scheme is that accessing bindings for aliased variables needs constant number of operations, and is independent of number of variables in the aliased set. A detailed implementation mechanism is given in <ref> [3, 4] </ref>. 3.1 The Model Behavior The model exploits run time execution efficiency both at the data level during data parallel goal reduction by treating the clause-heads as data for efficient pattern-matching, and control level during the execution of the code of the corresponding subgoals in the selected clause.
Reference: [5] <author> J. A. Feldman and D. Rovner, </author> <title> "An Algol Based Associative Language," </title> <journal> Communications of the ACM, </journal> <volume> Volume 12, No. 8, </volume> <month> August </month> <year> 1969, </year> <pages> pp. 439 - 449. </pages>
Reference: [6] <author> C. C. Foster, </author> <title> Content Addressable Parallel Processors, </title> <publisher> Van Nostrand Reinhold Co., </publisher> <address> New York, </address> <year> (1976). </year>
Reference: [7] <author> M. Ghandikota, </author> <title> "Implementing Abstract Instruction Set for Logic Programs on Associative Supercomputers", </title> <type> MS Thesis, </type> <institution> Department of Mathematics and Computer Science, Kent State University, Kent, </institution> <address> OH 44242, USA, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: The compiler and emulator for the current model have been implemented. The compiler has been written in C ++ [18] and the emulator has been written using ANSI C <ref> [7] </ref> on HP 730. The emulator supports both scalar and data-parallel computations, and is portable to any architecture which supports a data parallel version of C.
Reference: [8] <editor> D. Gries, </editor> <booktitle> "The Science of Programming", Monograph, </booktitle> <publisher> Springer Verlag, </publisher> <address> Newyork, </address> <year> 1987. </year> <month> 9 </month>
Reference: [9] <author> T. Higuchi, T. Furuya, K. Handa, and A. Kokubu, " "IXM2: </author> <title> A Parallel Associative Processor for Semantic Net Processing", </title> <booktitle> in Proc. of Tools for Artificial Intelligence, </booktitle> <address> Herndon, USA, </address> <month> (Nov. </month> <year> 1990). </year>
Reference: [10] <author> K. Hwang and F. A. Briggs, </author> <title> Computer Architecture and Parallel Processing, </title> <publisher> Mcgraw Hill Book Company, </publisher> <address> New york, USA, </address> <year> (1984). </year>
Reference: [11] <author> P. Kacsuk, and A. Bale, </author> <title> "DAP Prolog: A Set Oriented Approach to Prolog," </title> <journal> The Computer Journal, </journal> <volume> Vol. 30, No. 5, </volume> <year> 1987, </year> <pages> pp. 393-403. </pages>
Reference: [12] <author> P. Kacksuk, </author> <title> "DAP Prolog," in Execution Models of Prolog for Parallel Computers, Research Monograph, </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference: [13] <author> K. Knobe, J. D. Lukas, G. L. Steele, </author> <title> "Massively Data Parallel Optimization", </title> <booktitle> The 2nd Symposium of Massively Parallel Computation, </booktitle> <address> Fairfax, Virginia, </address> <year> 1988, </year> <pages> pp. 551 - 558. </pages>
Reference: [14] <author> Kowalski, R., </author> <title> Logic for Problem Solving, </title> <publisher> Elsevier-North Holland, </publisher> <year> (1979). </year>
Reference: [15] <author> Z. Manna and R. Waldinger, </author> <title> "The Logical Basis for Computer Programming", Volume1: Deductive Reasoning, </title> <publisher> Addison Wesley, </publisher> <year> 1985. </year>
Reference: [16] <author> J. L. Potter, </author> <title> "Data Structures for Associative Supercomputers", </title> <booktitle> Proceedings of the 2nd Symposium on the Frontiers of Massively Parallel Processors, </booktitle> <address> Fairfax, USA, </address> <month> (Oct. </month> <year> 1988), </year> <pages> pp. 77 - 84. </pages>
Reference: [17] <author> J. L. Potter, </author> <title> Associative Computing, </title> <publisher> Plenum Publishers, </publisher> <address> Newyork, </address> <year> (1992). </year>
Reference-contexts: The benchmark results show that overhead of shallow backtracking and deep backtracking has been significantly reduced which allows seamless integration of knowledge retrieval, rule based reasoning, and data parallel scientific computation. Associative representation of data reduces the overhead of sequentiality caused by pointer based data representations <ref> [17] </ref>. Implications of these results are that the model can be successfully applied to data intensive problems such as geographical information systems, image understanding systems, statistical knowledge bases, and genome sequencing. For example, in geographical information systems, spatial data structures such as quad-trees and oct-trees can be represented associatively.
Reference: [18] <author> L. V. </author> <title> Prasad,"Compiling Logic Programs to Incorporate Data-parallelism on Associative Supercomputers", </title> <type> MS Thesis, </type> <institution> Department of Mathematics and Computer Science, Kent State University, Kent, </institution> <address> OH 44242, USA, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: The compiler and emulator for the current model have been implemented. The compiler has been written in C ++ <ref> [18] </ref> and the emulator has been written using ANSI C [7] on HP 730. The emulator supports both scalar and data-parallel computations, and is portable to any architecture which supports a data parallel version of C.
Reference: [19] <author> L. Sterling and E. Shapiro, </author> <title> The Art of Prolog, </title> <publisher> MIT Press, </publisher> <year> (1986). </year>
Reference: [20] <author> A. Takeuchi and K. Furukawa, </author> <booktitle> "Parallel Logic Programming Languages", Lecture Notes In Computer Science, </booktitle> <volume> Vol. 225, </volume> <publisher> Springer Verlag, </publisher> <address> Newyork, </address> <month> (July </month> <year> 1986), </year> <pages> pp. 242 - 254. </pages>
Reference: [21] <author> D. H. D. Warren, </author> <title> "An Abstract Prolog Instruction Set", </title> <type> Technical Report 309, </type> <institution> SRI International, </institution> <month> (October </month> <year> 1983). </year> <month> 10 </month>
References-found: 21

