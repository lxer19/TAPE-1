URL: http://www.cs.purdue.edu/homes/ake/main.ps
Refering-URL: http://www.cs.purdue.edu/homes/ake/
Root-URL: http://www.cs.purdue.edu
Title: DATA CONSISTENCY MANAGEMENT IN WIRELESS CLIENT-SERVER INFORMATION SYSTEMS  
Author: by Jin Jing 
Degree: A Thesis Submitted to the Faculty of  In Partial Fulfillment of the Requirements for the Degree of Doctor of Philosophy  
Date: May 1996  
Affiliation: Purdue University  
Abstract-found: 0
Intro-found: 1
Reference: <institution> 139 BIBLIOGRAPHY </institution>
Reference: [AA95] <author> G. Alonsa and A. El Abbadi. </author> <title> Partitioned data objects in distributed databases. </title> <journal> International Journal on Distributed and Parallel Databases, </journal> <volume> 3(1), </volume> <month> March </month> <year> 1995. </year>
Reference-contexts: In this context, client caching can be thought of dynamic replication with second-class ownership. 1 Some proposed approaches, including site escrow [KB92, KS88], demarcation protocol <ref> [BGM94, AA95] </ref>, and Data Value Partitioning protocol [SS90], can be used for dynamically partitioning data among different server sites. 18 When a client needs to access a data item, a copy of that data item is placed in the client's cache if one does not already exist. <p> As stated previously, the notion of using partitioned data to reduce message overhead and increase system throughput in distributed database environments has been investigated in the literature <ref> [ABGM90, BGM94, KB92, KS88, SS90, AA95] </ref>. These efforts addressed principally the efficient repartition or reconfiguration of a partitioned data item among different sites so that an operation on the data item can be performed at a local site.
Reference: [AAFZ95] <author> S. Acharya, R. Alonso, M. Franklin, and S. Zdonik. </author> <title> Broadcast disks: Data management for asymmetric communications environments. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <address> San Jose, California, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Also, in a wireless environment, mobile clients usually have weak or little transmission capability because of the limitation of battery power while stationary servers have 83 powerful broadcast transmitters <ref> [AAFZ95] </ref>. Therefore, both callback and detection approach employed in the traditional client-server architecture may not be readily applicable to mobile environments. In [BI94a], Barbara and Imielinski provided an approach to the problem of invalidating caches in mobile environments. <p> These sizes must therefore be contained in each report for the client to be able to correctly invalidate its caches 3 . Recently, the notion of using a repetitive broadcast medium in wireless environments has been investigated <ref> [IVB94a, IVB94b, IV94, AAFZ95, VI95] </ref>. [AAFZ95] investigated the property of data broadcast program which provides improved performance for non-uniformly accessed data. The impact of data broadcast on the client cache fetch and replacement policies was also addressed in [AAFZ95]. [IVB94a, IVB94b] investigated techniques for indexing broadcast data. <p> These sizes must therefore be contained in each report for the client to be able to correctly invalidate its caches 3 . Recently, the notion of using a repetitive broadcast medium in wireless environments has been investigated [IVB94a, IVB94b, IV94, AAFZ95, VI95]. <ref> [AAFZ95] </ref> investigated the property of data broadcast program which provides improved performance for non-uniformly accessed data. The impact of data broadcast on the client cache fetch and replacement policies was also addressed in [AAFZ95]. [IVB94a, IVB94b] investigated techniques for indexing broadcast data. <p> of using a repetitive broadcast medium in wireless environments has been investigated [IVB94a, IVB94b, IV94, AAFZ95, VI95]. <ref> [AAFZ95] </ref> investigated the property of data broadcast program which provides improved performance for non-uniformly accessed data. The impact of data broadcast on the client cache fetch and replacement policies was also addressed in [AAFZ95]. [IVB94a, IVB94b] investigated techniques for indexing broadcast data. The main motivation of the indexing was to reduce battery power consumption at the clients for the access of broadcast data.
Reference: [ABGM90] <author> R. Alonso, D. Barbara, and H. Garcia-Molina. </author> <title> Data caching issues in an information retrieval system. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(3), </volume> <month> September </month> <year> 1990. </year>
Reference-contexts: Data conflicts are typically resolved using blocking (for pessimistic schemes or transaction restarts (for optimistic methods), which can both limit the performance of the system [BHG87]. Much research has been performed on the relaxation of serializability, particularly for distributed databases (e.g., <ref> [DGMS85, ABGM90, PL91, EJK91, EJMSA92, 21 MJSA93, ZJ93] </ref>). Although the relaxed consistency models provides additional performance, they are suitable only for a limited class of database applications that have less stringent requirements. <p> As stated previously, the notion of using partitioned data to reduce message overhead and increase system throughput in distributed database environments has been investigated in the literature <ref> [ABGM90, BGM94, KB92, KS88, SS90, AA95] </ref>. These efforts addressed principally the efficient repartition or reconfiguration of a partitioned data item among different sites so that an operation on the data item can be performed at a local site. <p> In this situation, the "quasi-copy" scheme proposed in <ref> [ABGM90] </ref> can be applied. The server can send invalidation information only for the data whose changes have exceeded the threshold specified by the "quasi-copy" scheme.
Reference: [ACK94] <author> A. Asthana, M. Cravatts, and P. Krzyzanowski. </author> <title> An indoor wireless system for personalized shopping assistance. </title> <booktitle> In 1994 Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, California, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Problems involving resource allocation can also be found in such mobile application domains as mobile sales and inventory applications [KJ94] and mobile shopping applications <ref> [ACK94] </ref> etc. However, the mobility of hosts may bring about the distribution of operations of a transaction and traditional partitioned data management algorithms will involve message transmissions in fixed network because of the distribution of operations, as illustrated in the following example.
Reference: [AK93] <author> R. Alonso and H. Korth. </author> <booktitle> Database issues in nomadic computing. In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: however, the message cost of O2PL-MT is very close to that of O2PL and both increase at the same rate as the mobility parameter increases. 4.5 Related Work Some of the problems involved in supporting transaction services and distributed data management in a mobile environment have been identified recently in <ref> [IB94, AK93] </ref>. The management of distributed data was identified in [IB94] as a research area on which the mobility of host has a large impact. [AK93] predicted that future applications of mobile computing will demand various transactional and transaction-like services. <p> The management of distributed data was identified in [IB94] as a research area on which the mobility of host has a large impact. <ref> [AK93] </ref> predicted that future applications of mobile computing will demand various transactional and transaction-like services. A prototype of transaction service for mobile hosts were implemented on the Code file system [KS92, LS94] to support continued services in a disconnection mode.
Reference: [BAI94] <author> B. Badrinath, A. Acharya, and T. Imielinski. </author> <title> Structuring distributed algorithms for mobile hosts. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Distributed Computing Systems, </booktitle> <address> Poznan, Poland, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Notice that, when a mobile transaction host aborts its transaction, these costs do not arise, because the proxy process of the host is always aware of the locations of these locks. Possible solutions to this issue may use the search strategy or the always-inform strategy presented in <ref> [BAI94] </ref> to locate the current transaction proxy (or the transaction proxy) and obtain the required location information. 49 5. <p> Therefore, we have the following theorem: Theorem 5.1 C RES is satisfiable with respect to C CEN with either 0 &lt; ~ &lt; 2m=p or ~ = 0. 5.6 Related Work The research in <ref> [BAI94] </ref> discussed the reduction of the message costs in networks in which a mobile host involved in the execution of distributed algorithms moves across different cells.
Reference: [Bar94] <author> J. Bartlett. </author> <title> W4-the Wireless World Wide Web. </title> <booktitle> In 1994 Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, California, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: The information is stored in tightly-collected and distributed data servers. By contrast, there has recently been an increased interest of the systems that support "semi-structured" information sources (e.g., Web information) <ref> [BLCL + 94, CGMH + 95, Ste95, LAK + 95, Bar94] </ref>. The information in these resources has different data formats, types, and structures and is stored in loosely-collected data servers in a wide area. Such an information support, however, is beyond the topic of this thesis.
Reference: [BB94] <author> A. Bakre and B. R. Badrinath. I-TCP: </author> <title> Indirect TCP for mobile hosts. </title> <type> Technical Report DCS-TR-314, </type> <institution> Department of Computer Science, Rut-gers University, </institution> <year> 1994. </year> <month> 140 </month>
Reference-contexts: The approach is suitable for the workloads where simultaneous sharing (other than read-read) is rare. Recently some proposals that use the indirect interaction concept have been presented aimming at improving the performance of TCP protocol for mobile interconnecting <ref> [BB94, YB94, KRA94, XB95] </ref>. In those proposals, the proxy process is only used at transport layer. 16 3.
Reference: [BBIM93] <author> B. R. Badrinath, A. Bakre, T. Imielinski, and R. Marantz. </author> <title> Handling mobile clients: A case for indirect interaction, </title> <booktitle> 1993. In Proceedings of the Fourth Workshop on Workstation Operating Systems, </booktitle> <address> Napa, Cali-fornia, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: The efficient utilization of these data under the context of the client-proxy-server architecture is the primary focus of this thesis. 14 2.3 Related Work The indirect model of mobile client-server interaction has been presented to make mobility visible at transport layer through higher layers including mobile applications in <ref> [BBIM93] </ref>. The work was motivated to provide better functionality and performance over applications that use the client-server model based soly on a mobile network layer protocol (e.g., mobile-IP).
Reference: [BGM94] <author> D. Barbara and H. Garcia-Molina. </author> <title> The demarcation protocol: A technique for maintaining constraints in distributed database systems. </title> <journal> The VLDB Journal, </journal> <volume> 3(3), </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: In this context, client caching can be thought of dynamic replication with second-class ownership. 1 Some proposed approaches, including site escrow [KB92, KS88], demarcation protocol <ref> [BGM94, AA95] </ref>, and Data Value Partitioning protocol [SS90], can be used for dynamically partitioning data among different server sites. 18 When a client needs to access a data item, a copy of that data item is placed in the client's cache if one does not already exist. <p> The process of resource allocation will restore modified bound variables and allocate resources at any partitioned data site (which may be different from the site where the reservations were performed). The update to reservation logs at remote servers is deferred until a repartitioning procedure (e.g., those in <ref> [BGM94, KB92, KS88] </ref>) is executed or a "non-partition-commutative" operation (that will be defined below) is requested on the same data item. Thus, the "deferred log update" idea presented in the previous chapter for replicated data management is apllied here too. <p> If an pc-operation at a server is safe, the server then executes a local reservation action for the pc-operation. Otherwise, the server invokes a resource repartition procedure (such as the point-to-point demarcation protocol <ref> [BGM94] </ref> or a dynamic quorum-based protocol [KB92]) to requisition additional partitioned data resources from other servers. Upon the successful completion of the resource repartition procedure, the reservation action can be executed at the local server. <p> As stated previously, the notion of using partitioned data to reduce message overhead and increase system throughput in distributed database environments has been investigated in the literature <ref> [ABGM90, BGM94, KB92, KS88, SS90, AA95] </ref>. These efforts addressed principally the efficient repartition or reconfiguration of a partitioned data item among different sites so that an operation on the data item can be performed at a local site. <p> Specifically, like the demarcation protocol presented in <ref> [BGM94] </ref>, these repartition procedures are performed by updating the bound variables of a partitioned data item. However, the requirements for reliability procedures are quite different. In the previous approach, a repartition procedure is performed only among relatively reliable distributed servers in fixed networks.
Reference: [BHG87] <author> P. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Databases Systems. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1987. </year>
Reference-contexts: The notion of isolation is traditionally referred to as serializability. Serializabil-ity is the property that an (possibly interleaved) execution of transactions has the same effect on the database, and produces the same output as some serial (i.e., non-interleaved) ordering of the transactions <ref> [BHG87] </ref>. Due to the requirement for se-rializability, the items in the database become shared resources that are subject to contention in much the same way as shared physical resources such as the server and network. In order to provide serializable transaction execution, data access conflicts must be properly handled. <p> In order to provide serializable transaction execution, data access conflicts must be properly handled. Data conflicts are typically resolved using blocking (for pessimistic schemes or transaction restarts (for optimistic methods), which can both limit the performance of the system <ref> [BHG87] </ref>. Much research has been performed on the relaxation of serializability, particularly for distributed databases (e.g., [DGMS85, ABGM90, PL91, EJK91, EJMSA92, 21 MJSA93, ZJ93]). Although the relaxed consistency models provides additional performance, they are suitable only for a limited class of database applications that have less stringent requirements. <p> Although the relaxed consistency models provides additional performance, they are suitable only for a limited class of database applications that have less stringent requirements. This thesis, therefore, adopts serializability or "view se-rializability" <ref> [BHG87] </ref> as the correctness criterion for the maintenance of replicated, partitioned, or cached data consistency. In partitioned data management, although application semantics is considered as the correctness constraints for the data partition, the execution of transactions is constrainted under the context of "view se-rializability". <p> To avoid the use of a 2PC protocol at commit time, [KJ94] suggested the Escrow Log Transfering (ELT) method that was compared with our RES algorithm in Section 5.5. The issue of termination for a 2PC or 3PC protocol has been well studied (see <ref> [BHG87] </ref> for details). A server will execute a termination protocol only after it enters the first phase of a 2PC or 3PC protocol but before it receives the commit decision from the proxy.
Reference: [BI93] <author> D. Barbara and T. Imielinski. </author> <title> Adaptive stateless caching in mobile environments: An example. </title> <type> Technical Report MITL-TR-60-93, </type> <institution> Matsushita Information Technology Laboratory, </institution> <year> 1993. </year>
Reference-contexts: In general, however, the server may use the feedback information from clients to adaptively decide the data (k+1)-block (the adaptive algorithms similar to those in <ref> [BI93, IV94] </ref> can be used for the purpose). The absolute address of the "hot" data (k + 1)-block will be included in the next invalidation report. 2. <p> To support long client disconnections, an idea of adapting the window size of the TS algorithm was discussed in <ref> [BI93, BI94b] </ref>. The approach in [BI93, BI94b] adjusts the window size for each data item according to changes in update rates and reference frequencies for the item. This is different from our proposed approach which does not need the feedback information about the access patterns from clients. <p> To support long client disconnections, an idea of adapting the window size of the TS algorithm was discussed in <ref> [BI93, BI94b] </ref>. The approach in [BI93, BI94b] adjusts the window size for each data item according to changes in update rates and reference frequencies for the item. This is different from our proposed approach which does not need the feedback information about the access patterns from clients.
Reference: [BI94a] <author> D. Barbara and T. Imielinski. Sleepers and workaholics: </author> <title> Caching strategies for mobile environments. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <address> Minneapolis, Minessota, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Therefore, both callback and detection approach employed in the traditional client-server architecture may not be readily applicable to mobile environments. In <ref> [BI94a] </ref>, Barbara and Imielinski provided an approach to the problem of invalidating caches in mobile environments. In this approach, a server periodically broadcasts an invalidation report in which the data items that have been changed are indicated. <p> The total bits for the set of sequences will be no more than 2N. Because each sequence is associated with a timestamp, the total bits for these timestamps will be b T log (N). 6.3.5 Comparisons with Other Proposed Algorithms In <ref> [BI94a] </ref>, issues of cache invalidation using a broadcast medium in a wireless and mobile environment were first introduced. <p> When the number of data items that have been updated since the last combined signatures were cached is equal to or less than f , the probability (which was given in <ref> [BI94a] </ref>) is: p f = P rob [X Kmp] exp ((K 1) 2 m p where f is the number of different items up to which the algorithm is designed to diagnose, 1 K 2, m is the number of combined signatures determined by 6g (f + 1)(ln (1=ffi) + ln <p> Using the similar analysis procedure as in <ref> [BI94a] </ref>, the probability can be computed as follows. To compute p n u f , we shall first compute the probability p n u of a valid cache being in a different signature. For this to happen, the following must be true: 1. <p> In these results, the set of data items to be invalidated is always a superset of the differing items. 97 In summary, these algorithms presented in <ref> [BI94a] </ref> are effective for a client in terms of a low ratio of false invalidation (to total invalidation), only if the client has not disconnected for a period that exceeds an algorithm-specified parameter (e.g., w or L) or if the number of updated items during the period is not greater than <p> By contrast, the BS algorithm invalidates the whole cache of a client host only if half of database have been updated since the host disconnected. The report size in the SIG algorithm can be computed by the expression <ref> [BI94a] </ref>: 6g (f + 1)(ln (1=ffi) + ln (N )) [BI94a], where g is a parameter used to specify the bound 2 g of the probability of failing to diagnose an invalid cache, ffi is a parameter used to specify the bound of the probability of diagnosing valid cache as invalid, <p> By contrast, the BS algorithm invalidates the whole cache of a client host only if half of database have been updated since the host disconnected. The report size in the SIG algorithm can be computed by the expression <ref> [BI94a] </ref>: 6g (f + 1)(ln (1=ffi) + ln (N )) [BI94a], where g is a parameter used to specify the bound 2 g of the probability of failing to diagnose an invalid cache, ffi is a parameter used to specify the bound of the probability of diagnosing valid cache as invalid, and f is the number of different items that the <p> The report sizes for the TS and AT algorithms can be expressed, as in <ref> [BI94a] </ref>, as n w (log (N ) + b T ) and n L log (N ), respectively, where N is the total number of data items in the database, b T is the size of a timestamp, n w is the number of data items updated within w seconds, and <p> The client can determine based on factors such as cached data structures and connectivity changes whether object or volume callbacks would be best for a particular volume, and adapts to the appropriate level dynamically. 130 Cache invalidation by utilizing a broadcast medium in wireless and mobile environments was first introduced <ref> [BI94a] </ref>. The effect of false invalidation on cache invalidation was then studied in [BJ95, JEHA95]. The Broadcasting Timestamps (TS), Amnesic Terminals (AT), and Signatures (SIG) algorithms that periodically broadcast invalidation reports were proposed in [BI94a]. <p> 130 Cache invalidation by utilizing a broadcast medium in wireless and mobile environments was first introduced <ref> [BI94a] </ref>. The effect of false invalidation on cache invalidation was then studied in [BJ95, JEHA95]. The Broadcasting Timestamps (TS), Amnesic Terminals (AT), and Signatures (SIG) algorithms that periodically broadcast invalidation reports were proposed in [BI94a].
Reference: [BI94b] <author> D. Barbara and T. Imielinski. Sleepers and workaholics: </author> <title> Caching strategies for mobile environments (extended version). MOBIDATA: An Interactive journal of mobile computing, </title> <type> 1(1), </type> <month> November </month> <year> 1994. </year> <note> Available through the WWW, http://rags.rutgers.edu/journal/cover.html. </note>
Reference-contexts: To support long client disconnections, an idea of adapting the window size of the TS algorithm was discussed in <ref> [BI93, BI94b] </ref>. The approach in [BI93, BI94b] adjusts the window size for each data item according to changes in update rates and reference frequencies for the item. This is different from our proposed approach which does not need the feedback information about the access patterns from clients. <p> To support long client disconnections, an idea of adapting the window size of the TS algorithm was discussed in <ref> [BI93, BI94b] </ref>. The approach in [BI93, BI94b] adjusts the window size for each data item according to changes in update rates and reference frequencies for the item. This is different from our proposed approach which does not need the feedback information about the access patterns from clients.
Reference: [BJ95] <author> O. Bukhres and J. Jing. </author> <title> Performance analysis of adaptive caching algorithms in mobile environments. </title> <journal> International Journal of Information Sciences, </journal> <note> 1995 (to appear). </note>
Reference-contexts: The effect of false invalidation on cache invalidation was then studied in <ref> [BJ95, JEHA95] </ref>. The Broadcasting Timestamps (TS), Amnesic Terminals (AT), and Signatures (SIG) algorithms that periodically broadcast invalidation reports were proposed in [BI94a].
Reference: [BLCL + 94] <author> T. Berners-Lee, R. Cailliau, A. Luotonen, H. F. Nielsen, and A. </author> <title> Secret. The world wide web. </title> <journal> Communications of the ACM, </journal> <volume> 37(8), </volume> <month> August </month> <year> 1994. </year>
Reference-contexts: The information is stored in tightly-collected and distributed data servers. By contrast, there has recently been an increased interest of the systems that support "semi-structured" information sources (e.g., Web information) <ref> [BLCL + 94, CGMH + 95, Ste95, LAK + 95, Bar94] </ref>. The information in these resources has different data formats, types, and structures and is stored in loosely-collected data servers in a wide area. Such an information support, however, is beyond the topic of this thesis.
Reference: [Blo70] <author> B. H. Bloom. </author> <title> Space/time tradeoffs in hash coding with allowable errors. </title> <journal> Communications of the ACM, </journal> <volume> 13(7), </volume> <month> July </month> <year> 1970. </year>
Reference-contexts: The pyramid broadcast with adaptive scheme was addressed in [IV94, VI95]. It is interesting to compare the bit sequence naming with the Bloom filter technique proposed in <ref> [Blo70] </ref>. A Bloom filter provides a probabilistic way to determine if an element is a member of a given set. A Bloom filter consists of a bit vector of N bits and t independent hash transformations.
Reference: [CFLS91] <author> M. Carey, M. Franklin, M. Livny, and E. Shekita. </author> <title> Data caching tradeoffs in client-server dbms architectures. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Denver, Colorado, </address> <month> May </month> <year> 1991. </year>
Reference: [CGMH + 95] <author> S. Chawathe, H. Garcia-Molina, J. Hammer, K. Ireland, Y. Papakon-stantinou, J. Ullman, and J. Widom. </author> <title> The tsimmis project: Integration of heterogeneous information sources. </title> <booktitle> In Proceedings of the International Conference on Information and Knowledge Management, </booktitle> <address> Balti-more, Maryland, </address> <month> November </month> <year> 1995. </year> <month> 141 </month>
Reference-contexts: The information is stored in tightly-collected and distributed data servers. By contrast, there has recently been an increased interest of the systems that support "semi-structured" information sources (e.g., Web information) <ref> [BLCL + 94, CGMH + 95, Ste95, LAK + 95, Bar94] </ref>. The information in these resources has different data formats, types, and structures and is stored in loosely-collected data servers in a wide area. Such an information support, however, is beyond the topic of this thesis.
Reference: [CL91] <author> M. Carey and M. Livny. </author> <title> Conflict detection tradeoffs for replicated data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 16(4), </volume> <month> December </month> <year> 1991. </year>
Reference-contexts: We demonstrate this idea in an optimistic replicated data management algorithm called Optimistic 2-Phase Locking for Mobile Transactions (O2PL-MT). Like its counterpart algorithm Optimistic 2-Phase Locking (O2PL), which was presented in <ref> [CL91] </ref> for a conventional distributed database system, O2PL-MT grants read locks immediately on demand and defers write locks 23 until commitment time. However, in a mobile environment where data items are replicated, O2PL-MT requires fewer messages than O2PL. <p> The algorithm used in the example, O2PL, was presented in <ref> [CL91] </ref>. The O2PL algorithm uses an "optimistic" read-one write-all concurrency control approach. A read lock must be obtained immediately from the local or nearest copy site for each read operation; write locks for replicated copies are deferred until the beginning of the commit phase is reached. <p> The basic idea underlying O2PL is to set locks immediately within a site (it is possible if data items are replicated), where doing so is cheap, while taking a more optimistic, less message-intensive approach across site boundaries <ref> [CL91] </ref>. In a mobile computing environment, however, the mobility of transaction hosts may increase message costs for the lock management approach used in the O2PL algorithm.
Reference: [DGMS85] <author> S. Davidson, H. Garcia-Molina, and D. Skeen. </author> <title> Consistency in partitioned networks. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(3), </volume> <month> September </month> <year> 1985. </year>
Reference-contexts: Changing the replication scheme under static replication requires a reorganization of the database. Replication will, however, reduce data availability in the presence of updates and failures in a distributed environment <ref> [DGMS85] </ref>. For example, replicated data management may be expensive because more than one site may be required to form the quorum necessary to run an update transaction. To work around this restriction, other techniques such as data partition and caching can be applied. <p> Data conflicts are typically resolved using blocking (for pessimistic schemes or transaction restarts (for optimistic methods), which can both limit the performance of the system [BHG87]. Much research has been performed on the relaxation of serializability, particularly for distributed databases (e.g., <ref> [DGMS85, ABGM90, PL91, EJK91, EJMSA92, 21 MJSA93, ZJ93] </ref>). Although the relaxed consistency models provides additional performance, they are suitable only for a limited class of database applications that have less stringent requirements.
Reference: [EJB95] <author> A. Elmagarmid, J. Jing, and O. Bukhres. </author> <title> An efficient and reliable reservation algorithm for mobile transactions. </title> <booktitle> In Proceedings of the International Conference on Information and Knowledge Management, </booktitle> <address> Baltimore, Maryland, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: The work, however, did not discuss how the data replication and cache could be utilized by the indirect model to improve performance and scalability of the system. The service handoff issues for transactional services were discussed under the context of the indirect model of client-server interactions in <ref> [EJF95, JBE95, EJB95, EJHA95] </ref>. The handoff issues are transparently handled by proxy processes. Both clients and servers are unaware of the mobility of hosts. Also, the indirect model was applied for cache invalidation algorithms in [JEHA95].
Reference: [EJF95] <author> A. Elmargarmid, J. Jing, and T. Furukawa. </author> <title> Wireless client-server computing for personal information services and applications. </title> <journal> ACM SIG-MOD Record, </journal> <note> 1995 (to appear). </note>
Reference-contexts: The work, however, did not discuss how the data replication and cache could be utilized by the indirect model to improve performance and scalability of the system. The service handoff issues for transactional services were discussed under the context of the indirect model of client-server interactions in <ref> [EJF95, JBE95, EJB95, EJHA95] </ref>. The handoff issues are transparently handled by proxy processes. Both clients and servers are unaware of the mobility of hosts. Also, the indirect model was applied for cache invalidation algorithms in [JEHA95].
Reference: [EJHA95] <author> A. Elmagarmid, J. Jing, A. Helal, and R. Alonso. </author> <title> Partitioned data management for mobile transactions. </title> <type> Technical Report CSD-TR-95-080, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1995. </year>
Reference-contexts: The work, however, did not discuss how the data replication and cache could be utilized by the indirect model to improve performance and scalability of the system. The service handoff issues for transactional services were discussed under the context of the indirect model of client-server interactions in <ref> [EJF95, JBE95, EJB95, EJHA95] </ref>. The handoff issues are transparently handled by proxy processes. Both clients and servers are unaware of the mobility of hosts. Also, the indirect model was applied for cache invalidation algorithms in [JEHA95].
Reference: [EJK91] <author> A. Elmagarmid, J. Jing, and W. Kim. </author> <title> Global committability in mul-tidatabase systems. </title> <type> Technical Report CSD-TR-91-017, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1991. </year> <note> To appear in revised form in IEEE Transactions on Knowledge and Data Engineering. </note>
Reference-contexts: Data conflicts are typically resolved using blocking (for pessimistic schemes or transaction restarts (for optimistic methods), which can both limit the performance of the system [BHG87]. Much research has been performed on the relaxation of serializability, particularly for distributed databases (e.g., <ref> [DGMS85, ABGM90, PL91, EJK91, EJMSA92, 21 MJSA93, ZJ93] </ref>). Although the relaxed consistency models provides additional performance, they are suitable only for a limited class of database applications that have less stringent requirements.
Reference: [EJMSA92] <author> A. Elmagarmid, J. Jing, J. Mullen, and J. Sharif-Askary. </author> <title> Reservable transactions: An approach for reliable multidatabase transaction management. </title> <type> Technical Report SERC-TR-114-P, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1992. </year>
Reference-contexts: Data conflicts are typically resolved using blocking (for pessimistic schemes or transaction restarts (for optimistic methods), which can both limit the performance of the system [BHG87]. Much research has been performed on the relaxation of serializability, particularly for distributed databases (e.g., <ref> [DGMS85, ABGM90, PL91, EJK91, EJMSA92, 21 MJSA93, ZJ93] </ref>). Although the relaxed consistency models provides additional performance, they are suitable only for a limited class of database applications that have less stringent requirements.
Reference: [Fra93] <author> M. Franklin. </author> <title> Caching and memory management in client-server database systems. </title> <type> Ph.D. Thesis, </type> <institution> University of Wisconsin-Madison, </institution> <year> 1993. </year>
Reference-contexts: A comprehensive discussion and comparison of caching algorithms in the conventional client-server architecture can be found in <ref> [Fra93] </ref>. The issue of false invalidation does not exist in this architecture because, as shown in the algorithms discussed in [Fra93], either the server can directly invalidate client caches or clients can query the server for the validation of their caches. In both cases, only obsolete caches will be invalidated. <p> A comprehensive discussion and comparison of caching algorithms in the conventional client-server architecture can be found in <ref> [Fra93] </ref>. The issue of false invalidation does not exist in this architecture because, as shown in the algorithms discussed in [Fra93], either the server can directly invalidate client caches or clients can query the server for the validation of their caches. In both cases, only obsolete caches will be invalidated. The work in [HSW94] discussed the data allocation issues in mobile environments.
Reference: [GMW82] <author> H. Garcia-Molina and G. Wiederhold. </author> <title> Read-only transactions in a distributed database. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 7(2), </volume> <month> June </month> <year> 1982. </year>
Reference-contexts: Also, it would be interesting to explore the possibility of using the "consistent view of databases" concept <ref> [GMW82, JDEB94] </ref> as a relaxed correctness criterion to increase the performance in the "heterogeneous" environment.
Reference: [GR92] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1992. </year>
Reference-contexts: Transactions have both concurrency and failure correctness constraints. This level of transaction support is known informally as the ACID properties <ref> [GR92] </ref>: * Atomicity: Either all of the operations of a transaction complete successfully, or none of them do. * Consistency: Transactions preserve any integrity constraints defined on the data. * Isolation: A transaction sees a state of the database that could occur if that transaction were the only one running on
Reference: [Gre82] <author> L. L. Gremillion. </author> <title> Designing a bloom filter for differential file access. </title> <journal> Communications of the ACM, </journal> <volume> 25(9), </volume> <month> September </month> <year> 1982. </year>
Reference-contexts: an update set, while 65,536 bits should be needed in the Bloom filter for 7,000 data items updated through 4 hash transformations with a 0.035 filtering error probability (the probability will be increased to 0.125 and 0.356 when the bit vector (filter) size is reduced to 40,960 and 24,576, respectively) <ref> [Gre82, Mul83] </ref>. On the other hand, if the number of updates is much small compared to database 132 size, the Bloom filter can be designed with a smaller size of bit vector than the bit sequence naming. <p> We plan to investigate the cache invalidation approach that combines the Bloom filter with the update aggregation and hierarchical structure techniques proposed in this thesis for semi-structured information access in our future work. Bloom filters have been used in many database algorithms auch as query optimization and file access <ref> [ML76, Gre82, Mul90] </ref>. 6.7 Conclusion In this chapter, we have presented a new cache invalidation algorithm, called the Bit-Sequences (BS) algorithm, in which a periodically broadcast invalidation report is organized as a set of binary bit sequences with an associated set of timestamps.
Reference: [HSW94] <author> Y. Huang, P. Sistla, and O. Wolfson. </author> <title> Data replication for mobile computers. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <address> Minneapolis, Minessota, </address> <month> May </month> <year> 1994. </year> <month> 142 </month>
Reference-contexts: In both cases, only obsolete caches will be invalidated. The work in <ref> [HSW94] </ref> discussed the data allocation issues in mobile environments. The algorithms proposed in [HSW94] assumed that servers are stateful since they know about the state of the clients' caches. <p> In both cases, only obsolete caches will be invalidated. The work in <ref> [HSW94] </ref> discussed the data allocation issues in mobile environments. The algorithms proposed in [HSW94] assumed that servers are stateful since they know about the state of the clients' caches. The servers use this information to decide whether a client can hold a cache copy or not to minimize the communication cost in wireless channels.
Reference: [IB94] <author> T. Imielinski and B. R. Badrinath. </author> <title> Wireless mobile computing : Challenges in data management. </title> <journal> Communication of ACM, </journal> <volume> 37(10), </volume> <month> October </month> <year> 1994. </year>
Reference-contexts: however, the message cost of O2PL-MT is very close to that of O2PL and both increase at the same rate as the mobility parameter increases. 4.5 Related Work Some of the problems involved in supporting transaction services and distributed data management in a mobile environment have been identified recently in <ref> [IB94, AK93] </ref>. The management of distributed data was identified in [IB94] as a research area on which the mobility of host has a large impact. [AK93] predicted that future applications of mobile computing will demand various transactional and transaction-like services. <p> The management of distributed data was identified in <ref> [IB94] </ref> as a research area on which the mobility of host has a large impact. [AK93] predicted that future applications of mobile computing will demand various transactional and transaction-like services. <p> This situation is of interest because information services are likely to be one of the typical applications in mobile computing environments <ref> [IB94] </ref>. 6.5.2 Experiment 1: BS vs BASE In the Bit-Sequences (BS) algorithm, a client will use a bit sequence, say B k (1 k n), to invalidate its cache if it started its disconnection at a time which is equal to or larger than T S (B k ) but smaller
Reference: [IV94] <author> T. Imielinski and S. Vishwanath. </author> <title> Adaptive wireless information systems. </title> <booktitle> In Proceedings of Special Interest Group in DataBase Systems Conference, </booktitle> <address> Tokyo, Japan, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: In general, however, the server may use the feedback information from clients to adaptively decide the data (k+1)-block (the adaptive algorithms similar to those in <ref> [BI93, IV94] </ref> can be used for the purpose). The absolute address of the "hot" data (k + 1)-block will be included in the next invalidation report. 2. <p> These sizes must therefore be contained in each report for the client to be able to correctly invalidate its caches 3 . Recently, the notion of using a repetitive broadcast medium in wireless environments has been investigated <ref> [IVB94a, IVB94b, IV94, AAFZ95, VI95] </ref>. [AAFZ95] investigated the property of data broadcast program which provides improved performance for non-uniformly accessed data. The impact of data broadcast on the client cache fetch and replacement policies was also addressed in [AAFZ95]. [IVB94a, IVB94b] investigated techniques for indexing broadcast data. <p> The pyramid broadcast with adaptive scheme was addressed in <ref> [IV94, VI95] </ref>. It is interesting to compare the bit sequence naming with the Bloom filter technique proposed in [Blo70]. A Bloom filter provides a probabilistic way to determine if an element is a member of a given set.
Reference: [IVB94a] <author> T. Imielinski, S. Vishwanath, and B. R. Badrinath. </author> <title> Energy efficient indexing on air. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <address> Minneapolis, Minessota, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: These sizes must therefore be contained in each report for the client to be able to correctly invalidate its caches 3 . Recently, the notion of using a repetitive broadcast medium in wireless environments has been investigated <ref> [IVB94a, IVB94b, IV94, AAFZ95, VI95] </ref>. [AAFZ95] investigated the property of data broadcast program which provides improved performance for non-uniformly accessed data. The impact of data broadcast on the client cache fetch and replacement policies was also addressed in [AAFZ95]. [IVB94a, IVB94b] investigated techniques for indexing broadcast data. <p> The impact of data broadcast on the client cache fetch and replacement policies was also addressed in [AAFZ95]. <ref> [IVB94a, IVB94b] </ref> investigated techniques for indexing broadcast data. The main motivation of the indexing was to reduce battery power consumption at the clients for the access of broadcast data.
Reference: [IVB94b] <author> T. Imielinski, S. Vishwanath, and B. R. Badrinath. </author> <title> Power efficient filtering of data on the air. </title> <booktitle> In Proceedings of the International Conference of Extending DataBase Technology, </booktitle> <address> Cambridge, U.K., </address> <month> September </month> <year> 1994. </year>
Reference-contexts: These sizes must therefore be contained in each report for the client to be able to correctly invalidate its caches 3 . Recently, the notion of using a repetitive broadcast medium in wireless environments has been investigated <ref> [IVB94a, IVB94b, IV94, AAFZ95, VI95] </ref>. [AAFZ95] investigated the property of data broadcast program which provides improved performance for non-uniformly accessed data. The impact of data broadcast on the client cache fetch and replacement policies was also addressed in [AAFZ95]. [IVB94a, IVB94b] investigated techniques for indexing broadcast data. <p> The impact of data broadcast on the client cache fetch and replacement policies was also addressed in [AAFZ95]. <ref> [IVB94a, IVB94b] </ref> investigated techniques for indexing broadcast data. The main motivation of the indexing was to reduce battery power consumption at the clients for the access of broadcast data.
Reference: [JBE95] <author> J. Jing, O. Bukhres, and A. Elmagarmid. </author> <title> Distributed lock management for mobile transactions. </title> <booktitle> In Proceedings of the Fifteenth International Conference on Distributed Computing Systems, </booktitle> <address> Vancouver, Canada, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: The work, however, did not discuss how the data replication and cache could be utilized by the indirect model to improve performance and scalability of the system. The service handoff issues for transactional services were discussed under the context of the indirect model of client-server interactions in <ref> [EJF95, JBE95, EJB95, EJHA95] </ref>. The handoff issues are transparently handled by proxy processes. Both clients and servers are unaware of the mobility of hosts. Also, the indirect model was applied for cache invalidation algorithms in [JEHA95].
Reference: [JDEB94] <author> J. Jing, W. Du, A. Elmagarmid, and O. Bukhres. </author> <title> Maintaining consistency of replicated data in multidatabase systems. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Distributed Computing Systems, </booktitle> <address> Poznan, Poland, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Also, it would be interesting to explore the possibility of using the "consistent view of databases" concept <ref> [GMW82, JDEB94] </ref> as a relaxed correctness criterion to increase the performance in the "heterogeneous" environment.
Reference: [JEHA95] <author> J. Jing, A. Elmagarmid, A. Helal, and R. Alonso. Bit-sequences: </author> <title> A new cache invalidation algorithm in mobile environments. </title> <type> Technical Report CSD-TR-95-076, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1995. </year>
Reference-contexts: The handoff issues are transparently handled by proxy processes. Both clients and servers are unaware of the mobility of hosts. Also, the indirect model was applied for cache invalidation algorithms in <ref> [JEHA95] </ref>. The model enables clients to use a broadcast based protocol that is specially designed for wireless links for cache invalidation. In [LAK + 95], a client-proxy-server model was applied to support mobile WWW applications. <p> The effect of false invalidation on cache invalidation was then studied in <ref> [BJ95, JEHA95] </ref>. The Broadcasting Timestamps (TS), Amnesic Terminals (AT), and Signatures (SIG) algorithms that periodically broadcast invalidation reports were proposed in [BI94a]. <p> Finally, it is interesting to support cached data management in a "heterogeneous" bit-sequences broadcasting environment. This support allows mobile clients to use 138 cached data around different service areas that broadcast different bit-sequences structures and mappings. Although the "deferred cold-page update" technique presented in <ref> [JEHA95] </ref> has provided initial work toward this support, more efforts such as the study of performance impact and tradeoffs in applying the technique still need be explored.
Reference: [JK94a] <author> R. Jain and N. Krishnakumar. </author> <title> Network support for personal information services to pcs users. </title> <booktitle> In Proceedings of the IEEE conference on Networks for Personal Communications, </booktitle> <address> Long Branch, New Jersey, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: For the simplicity, in this paper, we assume that each service area supported be a server covers only a single cell. In reality, one service area may support more than one cell <ref> [JK94a, JK94b] </ref>. 25 The transaction submitted from the mobile host is termed a mobile transaction and the host is called a mobile transaction host.
Reference: [JK94b] <author> R. Jain and N. Krishnakumar. </author> <title> Service handoffs and virtual mobility for delivery of personal information services to mobile users. </title> <type> Technical Report TM-24696, </type> <institution> Bellcore, </institution> <year> 1994. </year>
Reference-contexts: For the simplicity, in this paper, we assume that each service area supported be a server covers only a single cell. In reality, one service area may support more than one cell <ref> [JK94a, JK94b] </ref>. 25 The transaction submitted from the mobile host is termed a mobile transaction and the host is called a mobile transaction host.
Reference: [KB92] <author> N. Krishnakumar and A. Bernstein. </author> <title> High throughput escrow algorithm for replicated databases. </title> <booktitle> In Proceedings of the Eighteenth International Conference on Very Large Data Bases, </booktitle> <address> Vancouver, Canada, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: In this context, client caching can be thought of dynamic replication with second-class ownership. 1 Some proposed approaches, including site escrow <ref> [KB92, KS88] </ref>, demarcation protocol [BGM94, AA95], and Data Value Partitioning protocol [SS90], can be used for dynamically partitioning data among different server sites. 18 When a client needs to access a data item, a copy of that data item is placed in the client's cache if one does not already exist. <p> To relieve this restriction, partitioned data concept has been formulated to improve the response time and throughput of update transactions and to increase system availability. The site escrow approach proposed in <ref> [KB92, KS88] </ref> supports the partitioning of data items among distributed server sites. By utilizing the commutative property of resource allocation operations, the site escrow approach allows these operations to be executed at any partitioned copy site without involving remote message communications. <p> The process of resource allocation will restore modified bound variables and allocate resources at any partitioned data site (which may be different from the site where the reservations were performed). The update to reservation logs at remote servers is deferred until a repartitioning procedure (e.g., those in <ref> [BGM94, KB92, KS88] </ref>) is executed or a "non-partition-commutative" operation (that will be defined below) is requested on the same data item. Thus, the "deferred log update" idea presented in the previous chapter for replicated data management is apllied here too. <p> If an pc-operation at a server is safe, the server then executes a local reservation action for the pc-operation. Otherwise, the server invokes a resource repartition procedure (such as the point-to-point demarcation protocol [BGM94] or a dynamic quorum-based protocol <ref> [KB92] </ref>) to requisition additional partitioned data resources from other servers. Upon the successful completion of the resource repartition procedure, the reservation action can be executed at the local server. The result of the reservation action is returned to the mobile host that submitted this pc-operation through its proxy. <p> In this section, we present a comparative analysis of message costs incurred by the execution of the Reservation (RES) algorithm, the Escrow Log Transfering (ELT) algorithm, and the 2PC-Site-Escrow (2SE) algorithm over fixed networks. The 2SE algorithm is the direct application of the site escrow method presented in <ref> [KB92, KS88] </ref> in a mobile environment (as shown in Example 1). The ELT algorithm is a modification of a site escrow method which always transfers the escrow log for a mobile transaction to the local server in the current cell of the transaction host. This algorithm was described in [KJ94]. <p> As stated previously, the notion of using partitioned data to reduce message overhead and increase system throughput in distributed database environments has been investigated in the literature <ref> [ABGM90, BGM94, KB92, KS88, SS90, AA95] </ref>. These efforts addressed principally the efficient repartition or reconfiguration of a partitioned data item among different sites so that an operation on the data item can be performed at a local site.
Reference: [KJ94] <author> N. Krishnakumar and R. Jain. </author> <title> Protocols for maintaining inventory databases and user service profiles in mobile sales applications. </title> <booktitle> In Proceedings of the Mobidata Workshop, </booktitle> <institution> Rutgers University, </institution> <month> November </month> <year> 1994. </year> <month> 143 </month>
Reference-contexts: By utilizing the commutative property of resource allocation operations, the site escrow approach allows these operations to be executed at any partitioned copy site without involving remote message communications. Problems involving resource allocation can also be found in such mobile application domains as mobile sales and inventory applications <ref> [KJ94] </ref> and mobile shopping applications [ACK94] etc. However, the mobility of hosts may bring about the distribution of operations of a transaction and traditional partitioned data management algorithms will involve message transmissions in fixed network because of the distribution of operations, as illustrated in the following example. <p> use the escrow variables X escrow I 1 (= a) and X escrow D 1 (= a) to represent the log information for operations [Increase X by a] and [Increase X by a], respectively. 52 To avoid the use of a 2PC protocol at commit time, it was suggested in <ref> [KJ94] </ref> that the move of a transaction host to a new cell should be accompanied by the transfer of the escrow log for the transaction to the local server under the cell. <p> The ELT algorithm is a modification of a site escrow method which always transfers the escrow log for a mobile transaction to the local server in the current cell of the transaction host. This algorithm was described in <ref> [KJ94] </ref>. <p> series of repartition procedures therefore poses an additional issue, particularly in the development of an atomic protocol which can handle the problems introduced by the failure and extended long disconnections of the mobile host. 79 The problem of using the site escrow method (2SE) for mobile transactions was discussed in <ref> [KJ94] </ref>. To avoid the use of a 2PC protocol at commit time, [KJ94] suggested the Escrow Log Transfering (ELT) method that was compared with our RES algorithm in Section 5.5. The issue of termination for a 2PC or 3PC protocol has been well studied (see [BHG87] for details). <p> development of an atomic protocol which can handle the problems introduced by the failure and extended long disconnections of the mobile host. 79 The problem of using the site escrow method (2SE) for mobile transactions was discussed in <ref> [KJ94] </ref>. To avoid the use of a 2PC protocol at commit time, [KJ94] suggested the Escrow Log Transfering (ELT) method that was compared with our RES algorithm in Section 5.5. The issue of termination for a 2PC or 3PC protocol has been well studied (see [BHG87] for details).
Reference: [KR81] <author> H. Kung and J. Robinson. </author> <title> On optimistic methods for concurrency control. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(2), </volume> <month> June </month> <year> 1981. </year>
Reference-contexts: A prototype of transaction service for mobile hosts were implemented on the Code file system [KS92, LS94] to support continued services in a disconnection mode. This prototype used the optimistic concurrency control method presented in <ref> [KR81] </ref> to enforce the serializable execution of transactions submitted from mobile hosts. The optimistic concurrency control method is generally suitable for applications, such as those in a file system environment, of low data contention.
Reference: [KRA94] <author> M. Kojo, K. Raatikainen, and T. Alanko. </author> <title> Connecting mobile workstations to the internet over a digital cellular telephone network. </title> <booktitle> In Proceedings of the Mobidata Workshop, </booktitle> <institution> Rutgers University, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: Second, for the client-server interactions it is very unlikely to implement a single protocol that could adapt well to both wireless and wired connections <ref> [KRA94] </ref>. In this chapter, an indirect model of client-server interaction specially suited for mobile environments is investigated. <p> The approach is suitable for the workloads where simultaneous sharing (other than read-read) is rare. Recently some proposals that use the indirect interaction concept have been presented aimming at improving the performance of TCP protocol for mobile interconnecting <ref> [BB94, YB94, KRA94, XB95] </ref>. In those proposals, the proxy process is only used at transport layer. 16 3.
Reference: [KS88] <author> A. Kumar and M. Stonebraker. </author> <title> Semantics-based transaction management techniques for replicated data. </title> <booktitle> In Proceedings of the ACM SIG-MOD Conference on Management of Data, </booktitle> <month> June </month> <year> 1988. </year>
Reference-contexts: In this context, client caching can be thought of dynamic replication with second-class ownership. 1 Some proposed approaches, including site escrow <ref> [KB92, KS88] </ref>, demarcation protocol [BGM94, AA95], and Data Value Partitioning protocol [SS90], can be used for dynamically partitioning data among different server sites. 18 When a client needs to access a data item, a copy of that data item is placed in the client's cache if one does not already exist. <p> To relieve this restriction, partitioned data concept has been formulated to improve the response time and throughput of update transactions and to increase system availability. The site escrow approach proposed in <ref> [KB92, KS88] </ref> supports the partitioning of data items among distributed server sites. By utilizing the commutative property of resource allocation operations, the site escrow approach allows these operations to be executed at any partitioned copy site without involving remote message communications. <p> The process of resource allocation will restore modified bound variables and allocate resources at any partitioned data site (which may be different from the site where the reservations were performed). The update to reservation logs at remote servers is deferred until a repartitioning procedure (e.g., those in <ref> [BGM94, KB92, KS88] </ref>) is executed or a "non-partition-commutative" operation (that will be defined below) is requested on the same data item. Thus, the "deferred log update" idea presented in the previous chapter for replicated data management is apllied here too. <p> In this section, we present a comparative analysis of message costs incurred by the execution of the Reservation (RES) algorithm, the Escrow Log Transfering (ELT) algorithm, and the 2PC-Site-Escrow (2SE) algorithm over fixed networks. The 2SE algorithm is the direct application of the site escrow method presented in <ref> [KB92, KS88] </ref> in a mobile environment (as shown in Example 1). The ELT algorithm is a modification of a site escrow method which always transfers the escrow log for a mobile transaction to the local server in the current cell of the transaction host. This algorithm was described in [KJ94]. <p> As stated previously, the notion of using partitioned data to reduce message overhead and increase system throughput in distributed database environments has been investigated in the literature <ref> [ABGM90, BGM94, KB92, KS88, SS90, AA95] </ref>. These efforts addressed principally the efficient repartition or reconfiguration of a partitioned data item among different sites so that an operation on the data item can be performed at a local site.
Reference: [KS92] <author> J. Kistler and M. Satyanaranyanan. </author> <title> Disconnected Operation in the Coda File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1), </volume> <month> February </month> <year> 1992. </year>
Reference-contexts: A prototype of transaction service for mobile hosts were implemented on the Code file system <ref> [KS92, LS94] </ref> to support continued services in a disconnection mode. This prototype used the optimistic concurrency control method presented in [KR81] to enforce the serializable execution of transactions submitted from mobile hosts.
Reference: [LAK + 95] <author> M. Liljeberg, T. Alanko, M. Kojo, H. Laamanen, and K. Raatikainen. </author> <title> Optimizing world-wide web for weakly connected mobile workstations: An indirect approach. </title> <booktitle> In Proceedings of Second International Workshop on Services in Distributed and Networked Environments, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: The information is stored in tightly-collected and distributed data servers. By contrast, there has recently been an increased interest of the systems that support "semi-structured" information sources (e.g., Web information) <ref> [BLCL + 94, CGMH + 95, Ste95, LAK + 95, Bar94] </ref>. The information in these resources has different data formats, types, and structures and is stored in loosely-collected data servers in a wide area. Such an information support, however, is beyond the topic of this thesis. <p> Both clients and servers are unaware of the mobility of hosts. Also, the indirect model was applied for cache invalidation algorithms in [JEHA95]. The model enables clients to use a broadcast based protocol that is specially designed for wireless links for cache invalidation. In <ref> [LAK + 95] </ref>, a client-proxy-server model was applied to support mobile WWW applications.
Reference: [LS94] <author> Q. Lu and M. Satyanaranyanan. </author> <title> Isolation-only transactions for mobile computing. </title> <journal> ACM Operating Systems Review, </journal> <volume> 28(3), </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: A prototype of transaction service for mobile hosts were implemented on the Code file system <ref> [KS92, LS94] </ref> to support continued services in a disconnection mode. This prototype used the optimistic concurrency control method presented in [KR81] to enforce the serializable execution of transactions submitted from mobile hosts.
Reference: [MJSA93] <author> J. Mullen, J. Jing, and J. Sharif-Askary. </author> <title> Reservation commitment and its use in multidatabase systems. </title> <booktitle> In Proceedings of the Fourth IEEE International Conference on Database and Expert Systems Applications, </booktitle> <address> Prague, Czech Republic, </address> <month> September </month> <year> 1993. </year>
Reference: [ML76] <author> L. F. Mackert and G. M. Lohman. </author> <title> Differential files: Their application to the maintenance of large databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(3), </volume> <month> September </month> <year> 1976. </year>
Reference-contexts: We plan to investigate the cache invalidation approach that combines the Bloom filter with the update aggregation and hierarchical structure techniques proposed in this thesis for semi-structured information access in our future work. Bloom filters have been used in many database algorithms auch as query optimization and file access <ref> [ML76, Gre82, Mul90] </ref>. 6.7 Conclusion In this chapter, we have presented a new cache invalidation algorithm, called the Bit-Sequences (BS) algorithm, in which a periodically broadcast invalidation report is organized as a set of binary bit sequences with an associated set of timestamps.
Reference: [MS94a] <author> L. B. Mummert and M. Satyanarayanan. </author> <title> Large granularity cache coherence in the coda file system. </title> <booktitle> In USENIX Summer 1994 Conference, </booktitle> <address> Boston, Massachusetts, </address> <month> July </month> <year> 1994. </year>
Reference-contexts: The servers use this information to decide whether a client can hold a cache copy or not to minimize the communication cost in wireless channels. The algorithms do not utilize the characteristics of broadcast mediums to invalidate clients' caches. <ref> [MS94a, MS94b] </ref> illustrated a variable granularity approach to maintain cache coherence for the Coda file system in a weakly connection environment. At one extreme, the granularity can be the whole file system.
Reference: [MS94b] <author> L. B. Mummert and M. Satyanarayanan. </author> <title> Variable granularity cache coherence. </title> <journal> Operating Systems Review, </journal> <volume> 28(1), </volume> <month> January </month> <year> 1994. </year>
Reference-contexts: The servers use this information to decide whether a client can hold a cache copy or not to minimize the communication cost in wireless channels. The algorithms do not utilize the characteristics of broadcast mediums to invalidate clients' caches. <ref> [MS94a, MS94b] </ref> illustrated a variable granularity approach to maintain cache coherence for the Coda file system in a weakly connection environment. At one extreme, the granularity can be the whole file system.
Reference: [Mul83] <author> J. K. Mullin. </author> <title> A second look at bloom filters. </title> <journal> Communications of the ACM, </journal> <volume> 26(8), </volume> <month> August </month> <year> 1983. </year>
Reference-contexts: an update set, while 65,536 bits should be needed in the Bloom filter for 7,000 data items updated through 4 hash transformations with a 0.035 filtering error probability (the probability will be increased to 0.125 and 0.356 when the bit vector (filter) size is reduced to 40,960 and 24,576, respectively) <ref> [Gre82, Mul83] </ref>. On the other hand, if the number of updates is much small compared to database 132 size, the Bloom filter can be designed with a smaller size of bit vector than the bit sequence naming.
Reference: [Mul90] <author> J. K. Mullin. </author> <title> Optimal semijoins for distributed database systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(5), </volume> <month> May </month> <year> 1990. </year> <month> 144 </month>
Reference-contexts: We plan to investigate the cache invalidation approach that combines the Bloom filter with the update aggregation and hierarchical structure techniques proposed in this thesis for semi-structured information access in our future work. Bloom filters have been used in many database algorithms auch as query optimization and file access <ref> [ML76, Gre82, Mul90] </ref>. 6.7 Conclusion In this chapter, we have presented a new cache invalidation algorithm, called the Bit-Sequences (BS) algorithm, in which a periodically broadcast invalidation report is organized as a set of binary bit sequences with an associated set of timestamps.
Reference: [PL91] <author> C. Pu and A. Leff. </author> <title> Concurrency and control in distributed systems: An asynchronous approach. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <address> Denver, Colorado, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Data conflicts are typically resolved using blocking (for pessimistic schemes or transaction restarts (for optimistic methods), which can both limit the performance of the system [BHG87]. Much research has been performed on the relaxation of serializability, particularly for distributed databases (e.g., <ref> [DGMS85, ABGM90, PL91, EJK91, EJMSA92, 21 MJSA93, ZJ93] </ref>). Although the relaxed consistency models provides additional performance, they are suitable only for a limited class of database applications that have less stringent requirements.
Reference: [SAS89] <institution> SAS user's guide. SAS Insititute Inc., Cary, North Carolina, </institution> <year> 1989. </year>
Reference-contexts: That is, p n u Table 6.1 gives a set of values of the probability which were computed using SAS package <ref> [SAS89] </ref> for f = 10; 20, m = 1500; 2900 (where m is computed by 6 (f + 1)(ln (1=ffi) + ln (N )) with N = 1; 000 and ffi = 10 7 ), K = 1:4 and n u = 10, 20, 96 p n u p n u
Reference: [Sch92] <author> H. Schwetman. </author> <note> CSIM user's guide (version 16). </note> <institution> MCC Corporation, </institution> <year> 1992. </year>
Reference-contexts: Such a simplification is appropriate to an assessment of the effect of false invalidation on the cache hit ratio of algorithms. 109 All simulations were performed on Sun Sparc Workstations running SunOS and using a CSIM simulation package <ref> [Sch92] </ref>. 6.5.1 Parameters and Settings Our model can specify the item access patterns of workloads, thus allowing different client locality types and different server update patterns to be easily specified. For each client, two (possibly overlapping) database regions can be specified.
Reference: [SS90] <author> N. Soparkar and A. Siberschatz. </author> <title> Data-value partitioning and virtual messages. </title> <booktitle> In Proceedings of the Conference on Principles of Database Systems, </booktitle> <month> May </month> <year> 1990. </year>
Reference-contexts: In this context, client caching can be thought of dynamic replication with second-class ownership. 1 Some proposed approaches, including site escrow [KB92, KS88], demarcation protocol [BGM94, AA95], and Data Value Partitioning protocol <ref> [SS90] </ref>, can be used for dynamically partitioning data among different server sites. 18 When a client needs to access a data item, a copy of that data item is placed in the client's cache if one does not already exist. <p> As stated previously, the notion of using partitioned data to reduce message overhead and increase system throughput in distributed database environments has been investigated in the literature <ref> [ABGM90, BGM94, KB92, KS88, SS90, AA95] </ref>. These efforts addressed principally the efficient repartition or reconfiguration of a partitioned data item among different sites so that an operation on the data item can be performed at a local site.
Reference: [Ste95] <author> D. Steere. </author> <title> Using dynamic sets to speed search in world wide information systems. </title> <type> Technical Report CMU-CS-95-174, </type> <institution> School of Computer Sciences, Carnegie Mellon University, </institution> <year> 1995. </year>
Reference-contexts: The information is stored in tightly-collected and distributed data servers. By contrast, there has recently been an increased interest of the systems that support "semi-structured" information sources (e.g., Web information) <ref> [BLCL + 94, CGMH + 95, Ste95, LAK + 95, Bar94] </ref>. The information in these resources has different data formats, types, and structures and is stored in loosely-collected data servers in a wide area. Such an information support, however, is beyond the topic of this thesis.
Reference: [TD91] <author> C. Tait and D. Duchamp. </author> <title> Service interface and replica consistency algorithm for mobile file system clients. </title> <booktitle> In Proceedings of the First International Conference on Parallel and Distributed Information Systems, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: With the client-proxy-server approach neither WWW clients nor servers need to be modified. <ref> [TD91, TD92] </ref> investigated how replicas could be used to improve performance and scalability in a wide area distributed file system that supports mobile clients. The work uses a client-primary-secondary architecture (similar to the client-proxy-server model) in which the client only directly contacts (local) primary server. <p> The technique does not guarantee the strict consistency requirements of transactions (e.g., serializability). 47 <ref> [TD91, TD92] </ref> investigated how to manage dynamic replication of data in a wide area distributed file system that supports mobile clients. The dynamic replication allows mobile clients to create the replicated copies at local servers in order to minimize synchronous remote server operations.
Reference: [TD92] <author> C. Tait and D. Duchamp. </author> <title> An efficient variable-consistency replicated file service. </title> <institution> Department of Computer Science, Columbia University, </institution> <year> 1992. </year>
Reference-contexts: With the client-proxy-server approach neither WWW clients nor servers need to be modified. <ref> [TD91, TD92] </ref> investigated how replicas could be used to improve performance and scalability in a wide area distributed file system that supports mobile clients. The work uses a client-primary-secondary architecture (similar to the client-proxy-server model) in which the client only directly contacts (local) primary server. <p> The technique does not guarantee the strict consistency requirements of transactions (e.g., serializability). 47 <ref> [TD91, TD92] </ref> investigated how to manage dynamic replication of data in a wide area distributed file system that supports mobile clients. The dynamic replication allows mobile clients to create the replicated copies at local servers in order to minimize synchronous remote server operations.
Reference: [TDP + 94a] <author> D. Terry, A. Demers, K. Petersen, M. Spreitzer, M. Theimer, and B. Welch. </author> <title> Session guarantees for weakly consistent replicated data. </title> <booktitle> In Proceedings International Conference on Parallel and Distributed Information Systems, </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: The optimistic concurrency control method is generally suitable for applications, such as those in a file system environment, of low data contention. The prototype, however, did not address the issue of the mobility of transaction hosts and its effect on the management of distributed data. <ref> [TDP + 94a, TDP + 94b] </ref> proposed session guarantee technique to deal with replicated data consistency under disconnected environments.
Reference: [TDP + 94b] <author> M. Theimer, A. Demers, K. Petersen, M. Spreitzer, D. Terry, and B. Welch. </author> <title> Dealing with tentative data values in disconnected work groups. </title> <booktitle> In Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, California, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: The optimistic concurrency control method is generally suitable for applications, such as those in a file system environment, of low data contention. The prototype, however, did not address the issue of the mobility of transaction hosts and its effect on the management of distributed data. <ref> [TDP + 94a, TDP + 94b] </ref> proposed session guarantee technique to deal with replicated data consistency under disconnected environments.
Reference: [VI95] <author> S. Vishwanath and T. Imielinski. </author> <title> Pyramid broadcasting for video on demand service. </title> <booktitle> In Proceedings of the IEEE Multimedia Computing and Networks Conference, </booktitle> <address> San Jose, California, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: These sizes must therefore be contained in each report for the client to be able to correctly invalidate its caches 3 . Recently, the notion of using a repetitive broadcast medium in wireless environments has been investigated <ref> [IVB94a, IVB94b, IV94, AAFZ95, VI95] </ref>. [AAFZ95] investigated the property of data broadcast program which provides improved performance for non-uniformly accessed data. The impact of data broadcast on the client cache fetch and replacement policies was also addressed in [AAFZ95]. [IVB94a, IVB94b] investigated techniques for indexing broadcast data. <p> The pyramid broadcast with adaptive scheme was addressed in <ref> [IV94, VI95] </ref>. It is interesting to compare the bit sequence naming with the Bloom filter technique proposed in [Blo70]. A Bloom filter provides a probabilistic way to determine if an element is a member of a given set.
Reference: [XB95] <author> H. Xu and B. Bhargava. </author> <title> Reliable stream transmission in mobile computing environments. </title> <type> Technical Report CSD 95-002, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1995. </year>
Reference-contexts: The approach is suitable for the workloads where simultaneous sharing (other than read-read) is rare. Recently some proposals that use the indirect interaction concept have been presented aimming at improving the performance of TCP protocol for mobile interconnecting <ref> [BB94, YB94, KRA94, XB95] </ref>. In those proposals, the proxy process is only used at transport layer. 16 3.
Reference: [YB94] <author> R. Yavatkar and N. Bhagwat. </author> <title> Improving end-to-end performance of TCP over mobile internetworks. </title> <booktitle> In Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, California, </address> <month> December </month> <year> 1994. </year> <month> 145 </month>
Reference-contexts: The approach is suitable for the workloads where simultaneous sharing (other than read-read) is rare. Recently some proposals that use the indirect interaction concept have been presented aimming at improving the performance of TCP protocol for mobile interconnecting <ref> [BB94, YB94, KRA94, XB95] </ref>. In those proposals, the proxy process is only used at transport layer. 16 3.
Reference: [YZ94] <author> L. Yeo and A. Zaslavsky. </author> <title> Submission of transactions from mobile workstations in a cooperative multidatabase processing environment. </title> <booktitle> In Proceedings of the Fourteen International Conference on Distributed Computing Systems, </booktitle> <address> Poznan, Poland, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: For example, a mobile host may move into a new cell after it obtains the results of previously submitted operations. In the new cell, it will submit the remainder of the transaction operations to the proxy in the appropriate new MSS. The first approach is described in <ref> [YZ94] </ref> and related issues regarding the interface between the mobile host and the proxy are discussed. Our proposed model employs the second approach to transaction submissions. This approach supports the interactive execution of transactions and therefore offers increased flexibility in transaction computations.

References-found: 68

