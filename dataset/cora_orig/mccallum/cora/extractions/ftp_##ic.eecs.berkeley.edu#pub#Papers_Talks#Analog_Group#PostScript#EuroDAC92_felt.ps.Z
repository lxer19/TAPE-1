URL: ftp://ic.eecs.berkeley.edu/pub/Papers_Talks/Analog_Group/PostScript/EuroDAC92_felt.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/murgai/publications/my_publications.html
Root-URL: 
Title: An Efficient Methodology for Symbolic Compaction of Analog IC's with Multiple Symmetry Constraints  
Author: Eric Felt, Edoardo Charbon, Enrico Malavasi and Alberto Sangiovanni-Vincentelli 
Address: via Gradenigo, 6/A Berkeley, CA 94720 35131, Padova, Italy  
Affiliation: Department of Electrical Engineering Dip. di Elettronica e Informatica and Computer Sciences Universita di Padova University of California  
Abstract: An efficient approach to the symbolic compaction of analog integrated circuits is presented. A fast graph-based algorithm performs a preliminary compaction taking into account a set of basic spacing constraints. The obtained configuration provides the starting point for a linear program, which optimizes the layout introducing multiple device and wire symmetry constraints. The efficiency and robustness of this technique allows the use of our compactor for very complex analog circuits with multiple symmetries and other performance constraints. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. R. Burns and A. R. </author> <title> Newton, "SPARCS: A New Constraint-Based IC Symbolic Layout Spacer", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <pages> pp. 534-539, </pages> <year> 1986. </year>
Reference-contexts: The purpose of the latter phase is to make the final adjustments to the layout, optimizing the area while enforcing all design rules, performance specifications and topological constraints. The issue of analog compaction has been addressed only recently <ref> [1, 2, 3] </ref>. In these approaches, only symmetry constraints have been considered. Several techniques have been proposed to carry out compaction. The most general and effective approach for digital compaction is based on the computation of the critical paths of a constraint graph [4]. <p> The optimal solution of mono-dimensional compaction can be obtained in polynomial time with the longest-path algorithm. Heuristics [9] exist that interrelate efficiently the two dimensions and incorporate wire balancing into mono-dimensional compaction algorithms. In particular, in our approach we have chosen a mono-dimensional constraint-graph longest-path compactor called SPARCS <ref> [1] </ref>. The paper content is organized as follows. In section 2 the general compaction problem is formulated. In section 3 the classical graph based solution for digital compaction is presented. In section 4 the procedure for the generation of the analog constraints is described.
Reference: [2] <author> H. J. DeMan L. Rijnders, P. </author> <title> Six, "Design of a Process-Tolerant Cell Library for Regular Structures Using Symbolic Layout and Hierarchical Compaction", </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> vol. 23, n.3, </volume> <pages> pp. 714-721, </pages> <year> 1986. </year>
Reference-contexts: The purpose of the latter phase is to make the final adjustments to the layout, optimizing the area while enforcing all design rules, performance specifications and topological constraints. The issue of analog compaction has been addressed only recently <ref> [1, 2, 3] </ref>. In these approaches, only symmetry constraints have been considered. Several techniques have been proposed to carry out compaction. The most general and effective approach for digital compaction is based on the computation of the critical paths of a constraint graph [4]. <p> Furthermore, with two or more symmetry axes, overconstraints frequently arise due to the interaction between symmetry constraints. In order to overcome this shortcoming, mobile axes must be allowed, using the method of Virtual Symmetry Axes, proposed in [6]. In <ref> [2] </ref> an integer programming (IP) approach to the problem has been presented. With this method a good level of optimization can be achieved but its time complexity strongly limits its feasibility in practical circuits. More recently a new method [3] which combines the previous two algorithms has been proposed.
Reference: [3] <author> R. Okuda, T. Sato, H. Onodera and K. Tamaru, </author> <title> "An Efficient Algorithm for Layout Compaction Problem with Symmetry Constraints", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 148-151, </pages> <month> Novem-ber </month> <year> 1989. </year>
Reference-contexts: The purpose of the latter phase is to make the final adjustments to the layout, optimizing the area while enforcing all design rules, performance specifications and topological constraints. The issue of analog compaction has been addressed only recently <ref> [1, 2, 3] </ref>. In these approaches, only symmetry constraints have been considered. Several techniques have been proposed to carry out compaction. The most general and effective approach for digital compaction is based on the computation of the critical paths of a constraint graph [4]. <p> In [2] an integer programming (IP) approach to the problem has been presented. With this method a good level of optimization can be achieved but its time complexity strongly limits its feasibility in practical circuits. More recently a new method <ref> [3] </ref> which combines the previous two algorithms has been proposed. Constraint graph techniques are used to collapse all objects not in immediate contact with those on which a symmetry constraint has been imposed. New "super-constraints" are generated and solved using a classical linear programming (LP) approach. <p> Verify that all constraints are satisfied. The use of the graph solution as starting point is the key to obtain a significant speed-up in the solution of the LP. When compared to previous approaches making use of a pure LP solver <ref> [3] </ref>, this algorithm represents a substantial improvement. In fact for most practical circuits our LP solver starts from a feasible configuration which is already close to the final solution. The range of cases that can be managed with acceptable computational complexity is therefore significantly expanded.
Reference: [4] <author> A. R. </author> <title> Newton, "Symbolic Layout and Procedural Design", </title> <booktitle> in Design Systems for VLSI Circuits, </booktitle> <pages> pp. 65-112. </pages> <editor> De Micheli et al. Eds., </editor> <publisher> Martinus Nijhoff, </publisher> <year> 1987. </year>
Reference-contexts: In these approaches, only symmetry constraints have been considered. Several techniques have been proposed to carry out compaction. The most general and effective approach for digital compaction is based on the computation of the critical paths of a constraint graph <ref> [4] </ref>. In [5] a method based on the constraint graph algorithm was proposed for analog compaction. In a preliminary step the graph is solved totally ignoring the symmetry. In a second phase the graph is slightly perturbed by gradually introducing the symmetry as an additional constraint set.
Reference: [5] <author> J. L. Burns, </author> <title> "Techniques for IC Symbolic Layout and Compaction", </title> <note> Memorandum UCB/ERL M90/103, UCB, </note> <month> November </month> <year> 1990. </year>
Reference-contexts: In these approaches, only symmetry constraints have been considered. Several techniques have been proposed to carry out compaction. The most general and effective approach for digital compaction is based on the computation of the critical paths of a constraint graph [4]. In <ref> [5] </ref> a method based on the constraint graph algorithm was proposed for analog compaction. In a preliminary step the graph is solved totally ignoring the symmetry. In a second phase the graph is slightly perturbed by gradually introducing the symmetry as an additional constraint set. <p> Layout elements map to nodes in the graph and spacing constraints to weighted edges. The edge directions specify the relative ordering of the corresponding nodes, while the weights model the separation requirements. A simple plane sweep algorithm is generally used to generate the constraints <ref> [5] </ref>. The constraint graph is then solved using standard longest path algorithms. Note that negative weight arcs, which represent maximum spacing constraints between nodes, are generally allowed and the resulting graph can still be solved or determined infeasible in polynomial time. <p> In our methodology we use constraint graph techniques to obtain this important starting point. Constraint graph perturbation approaches to preserving device symmetries have been investigated <ref> [5] </ref>. In general these methods only work for circuits with one fixed axis of symmetry. The principle advantages of the linear programming approach over graph perturbation approaches are: 1. linear programming works for multiple symmetry axes, and 2. linear programming allows the symmetry axes to move during compaction.
Reference: [6] <author> E. Malavasi, E. Charbon, G. Jusuf, R. Totaro and A. Sangiovanni-Vincentelli, </author> <title> "Virtual Symmetry Axes for the Layout of Analog IC's", </title> <booktitle> in Proc. 2 nd ICVC, Seoul, Korea, </booktitle> <pages> pp. 195-198, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Furthermore, with two or more symmetry axes, overconstraints frequently arise due to the interaction between symmetry constraints. In order to overcome this shortcoming, mobile axes must be allowed, using the method of Virtual Symmetry Axes, proposed in <ref> [6] </ref>. In [2] an integer programming (IP) approach to the problem has been presented. With this method a good level of optimization can be achieved but its time complexity strongly limits its feasibility in practical circuits.
Reference: [7] <author> A. Mlynsky and C.-H. Sung, </author> <title> "Layout Compaction", in Layout Design and Verification, </title> <journal> ch. </journal> <volume> 6, </volume> <pages> pp. 199-235. </pages> <editor> T.Ohtsuki Ed., </editor> <publisher> North Holland, </publisher> <year> 1986. </year>
Reference-contexts: In fact for most practical circuits our LP solver starts from a feasible configuration which is already close to the final solution. The range of cases that can be managed with acceptable computational complexity is therefore significantly expanded. The constraint graph technique <ref> [7] </ref> and [8, Ch. 10] used in phase 1 of our method has been chosen for its robustness, efficiency and for the quality of the resulting layout. The optimal solution of mono-dimensional compaction can be obtained in polynomial time with the longest-path algorithm.
Reference: [8] <author> T. Lengauer, </author> <title> Combinatorial Algorithms for Integrated Circuit Layout, </title> <booktitle> Applicable Theory in Computer Science. </booktitle> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: In fact for most practical circuits our LP solver starts from a feasible configuration which is already close to the final solution. The range of cases that can be managed with acceptable computational complexity is therefore significantly expanded. The constraint graph technique [7] and <ref> [8, Ch. 10] </ref> used in phase 1 of our method has been chosen for its robustness, efficiency and for the quality of the resulting layout. The optimal solution of mono-dimensional compaction can be obtained in polynomial time with the longest-path algorithm.
Reference: [9] <author> W. Schiele, </author> <title> "Improved Compaction with Minimized Length of Wires", </title> <booktitle> in Proc. Design Automation Conference, </booktitle> <pages> pp. 390-395, </pages> <year> 1983. </year>
Reference-contexts: The constraint graph technique [7] and [8, Ch. 10] used in phase 1 of our method has been chosen for its robustness, efficiency and for the quality of the resulting layout. The optimal solution of mono-dimensional compaction can be obtained in polynomial time with the longest-path algorithm. Heuristics <ref> [9] </ref> exist that interrelate efficiently the two dimensions and incorporate wire balancing into mono-dimensional compaction algorithms. In particular, in our approach we have chosen a mono-dimensional constraint-graph longest-path compactor called SPARCS [1]. The paper content is organized as follows. In section 2 the general compaction problem is formulated.
Reference: [10] <author> U. Choudhury and A. Sangiovanni-Vincentelli, </author> <title> "Constraint Generation for Routing Analog Circuits", </title> <booktitle> in Proc. Design Automation Conference, </booktitle> <pages> pp. 561-566, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: of the form: x segment2 x segment1 d min : (11) where x segment2 = location of segment 2 x segment1 = location of segment 1 d min = minimum spacing between segment 1 and segment 2 the parameter d min is set by our automatic parasitic constraint generator PARCAR <ref> [10] </ref> or it can be imposed by the user. The resulting equations are then introduced in the constraint graph. 4.4 Shield Preservation Figures 3 and 2 illustrate a lateral and a vertical shield created during placement and routing to reduce coupling between critical nets.
Reference: [11] <author> B. A. Murtagh and M. A. Saunders, </author> <title> "MINOS 5.1 User's Guide", </title> <type> Technical Report Rep. </type> <institution> SOL 83-20R, Dept. of Operations Research, Stanford University, Stanford, </institution> <address> CA, </address> <month> Jan </month> <year> 1987. </year>
Reference-contexts: A flag for each variable indicates whether that variable is critical, at its upper bound, at its lower bound, free, overcon-strained, etc. All of the specific details about how to interface to a particular optimizer are abstracted from the user. The C++ class supports two optimization packages: MINOS <ref> [11] </ref>, a general nonlinear optimization package which has been under continuous development at Stanford since 1981, and MINIT [12], a public domain dual simplex linear programming package.
Reference: [12] <author> R. Salazar and S. Sen, </author> <title> Collected Algorithms from CACM, </title> <booktitle> The Association, </booktitle> <year> 1966. </year>
Reference-contexts: All of the specific details about how to interface to a particular optimizer are abstracted from the user. The C++ class supports two optimization packages: MINOS [11], a general nonlinear optimization package which has been under continuous development at Stanford since 1981, and MINIT <ref> [12] </ref>, a public domain dual simplex linear programming package.
Reference: [13] <author> H. Chang, A. Sangiovanni-Vincentelli, F. Balarin, E. Char-bon, U. Choudhury, G. Jusuf, E. Liu, E. Malavasi, R. Neff and P. Gray, </author> <title> "A Top-down, Constraint-Driven Design Methodology for Analog Integrated Circuits", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <pages> pp. 841-846, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Future work includes the automatic generation of the minimal spacing constraints for geometrically complex interconnect lines (see section 4.3), the study of new methods for efficient slack redistribution, and the integration of the tool into the new top-down, constraint-driven framework for analog integrated circuits currently under development <ref> [13] </ref>. 8 Acknowledgements This research has been partially supported by DARPA and SRC. The first author has been supported by a California Microelectronics Fellowship and the second author by the Swiss Science Foundation, Bern, Switzerland. The authors would like to thank Gani Jusuf for providing the examples presented in this work.
References-found: 13

