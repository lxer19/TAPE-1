URL: ftp://ftp.dcs.ex.ac.uk/pub/media/sv/esp.ps.Z
Refering-URL: http://www.dcs.ex.ac.uk/~lindsey/CV/index.htm
Root-URL: 
Email: JANET: lindsey@uk.ac.exeter.dcs BITNET: lindsey@dcs.ex.ac.uk@ukacrl  
Title: How programmers visualize programs  
Author: Lindsey Ford 
Note: R 271 (Submitted to the Fifth Workshop on Empirical Studies of Programmers)  
Date: March 8, 1993  
Address: Exeter EX4 4PT U.K.  
Affiliation: Department of Computer Science University of Exeter  
Abstract: How does a programmer see a computer language? What does a program look like? How would a programmer express these visualizations given a set of graphic and animation creation tools? We explore these questions with learners of object-oriented programming. The learners were provided with the tools and wrote programs to animate features of the language C++. We present the results and conclude that: (1) learners use various abstractions when visualizing; (2) a study of programmers' visualizations provides a complementary view to textual-based empirical studies of programmers; (3) programmers frequently represent the same textual programming construct in different visual forms; (4) visualization provides a framework for studying learners' misconceptions; and (5) visualization exercises for learners appear to foster programming skills. 
Abstract-found: 1
Intro-found: 1
Reference: [AB89] <author> A L Allen and M M Burnett. </author> <title> Influence of visual technology on the evolution of language environments. </title> <journal> Computer, </journal> <volume> 22(10) </volume> <pages> 9-22, </pages> <year> 1989. </year>
Reference-contexts: Program visualization and visual programming. Visualization is an active area of research that has been generally reviewed and explored [Cha87, Mye90, Sta92b, Mur93] and in particular related to programming languages and environments <ref> [EB88, Shu88, AB89, DGT92, HM92, Hil92, SP92] </ref>. In the latter area two subdivisions are recognised namely program visualization and visual programming.
Reference: [BB78] <author> J S Brown and R R Burton. </author> <title> Diagnostic models for procedural bugs in basic mathematical skills. </title> <journal> Cognitive Science, </journal> <volume> 2 </volume> <pages> 155-192, </pages> <year> 1978. </year>
Reference-contexts: programming constructs. (4) Although animators showed no misconceptions in their final implementations of animations regarding the programming feature they were animating, their animations provide a visual framework by which it may be possible to catalogue and diagnose learners' misconceptions (in the way that mal-rules were documented for learners of arithmetic <ref> [BB78] </ref>). For example, figure 19 shows the correct and typically incorrect visualizations of a while loop. A common misconception for the while loop is the assumption that the loop's body must execute at least once, as shown in (b).
Reference: [Bro77] <author> R Brooks. </author> <title> Towards a theory of the cognitive processes in computer programming. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 9(6) </volume> <pages> 737-742, </pages> <year> 1977. </year>
Reference-contexts: Each of these practical difficulties could contribute to the well-documented problems of learners: * learning dynamic concepts such as recursion, iteration, variable binding, flow of control, parameter passing <ref> [SGG73, SE84, Wat79, Bro77] </ref>. * having a clear model of the underlying machine (its operating system, editor, and the notional machine related to the programming language - for example a Prolog or C++ notional machine [dBOM81]). * difficulty relating abstract concepts (language) to concrete situations (de sign and implementation) [Raj90].
Reference: [Cha87] <author> S-K Chang. </author> <title> Visual languages: a tutorial and survey. </title> <journal> IEEE Software, </journal> <volume> 4(1) </volume> <pages> 29-39, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: Program visualization and visual programming. Visualization is an active area of research that has been generally reviewed and explored <ref> [Cha87, Mye90, Sta92b, Mur93] </ref> and in particular related to programming languages and environments [EB88, Shu88, AB89, DGT92, HM92, Hil92, SP92]. In the latter area two subdivisions are recognised namely program visualization and visual programming.
Reference: [CR92] <author> K C Cox and G-C Roman. </author> <title> Abstraction in algorithm animation. </title> <booktitle> In Proceedings 1992 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 18-24. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: 4 Conclusions We have not attempted to statistically analyse the results our research was exploratory in nature and yet we can draw some firm conclusions and make some speculative comments. (1) How can we analyse students' visualizations from an animation standpoint? What characteristics do the animations have? Cox and Roman <ref> [CR92] </ref> present five levels in their classification of abstraction as applied to algorithm 13 animation: 1. direct representations map some aspect of a program directly to a picture, with no abstraction other than a simple transformation to a visual form; 2. structural representations conceal or encapsulate extraneous data and present the <p> Perhaps a reason for animators not abstracting at level 4 concerned the simplicity of the algorithms being animated these were small program fragments which were not analytically complex. "Selection of a proper abstraction plays a key role in the effective visual communication of information" <ref> [CR92] </ref>. We have not assessed students' animations in terms of how effective their animations are, but we note that their apparent ease of use of abstraction suggests that they are comfortable undertaking the mental activity of abstraction within a visual environment.
Reference: [dBOM81] <author> J.B.H. du Boulay, T. O'Shea, and J. Monk. </author> <title> The black box inside the glass box: presenting computing concepts to novices. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 14(3) </volume> <pages> 237-249, </pages> <year> 1981. </year>
Reference-contexts: * learning dynamic concepts such as recursion, iteration, variable binding, flow of control, parameter passing [SGG73, SE84, Wat79, Bro77]. * having a clear model of the underlying machine (its operating system, editor, and the notional machine related to the programming language - for example a Prolog or C++ notional machine <ref> [dBOM81] </ref>). * difficulty relating abstract concepts (language) to concrete situations (de sign and implementation) [Raj90]. By capturing and studying videos of students' visualizations we are able to address some of the problems that learners experience.
Reference: [DGT92] <author> V Di Gesu and D Tegolo. </author> <title> The iconic interface for the PIctorial C Language. </title> <booktitle> In Proceedings 1992 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 119-124. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: Program visualization and visual programming. Visualization is an active area of research that has been generally reviewed and explored [Cha87, Mye90, Sta92b, Mur93] and in particular related to programming languages and environments <ref> [EB88, Shu88, AB89, DGT92, HM92, Hil92, SP92] </ref>. In the latter area two subdivisions are recognised namely program visualization and visual programming.
Reference: [EB88] <editor> M Eisenstadt and M Brayshaw. </editor> <title> The transparent Prolog machine (TPM): an execution model and graphical debugger for logic programming. </title> <journal> Journal of logic programming, </journal> <volume> 5(4) </volume> <pages> 277-342, </pages> <year> 1988. </year>
Reference-contexts: Program visualization and visual programming. Visualization is an active area of research that has been generally reviewed and explored [Cha87, Mye90, Sta92b, Mur93] and in particular related to programming languages and environments <ref> [EB88, Shu88, AB89, DGT92, HM92, Hil92, SP92] </ref>. In the latter area two subdivisions are recognised namely program visualization and visual programming.
Reference: [For93] <author> L Ford. </author> <title> Goofy animation specification. </title> <type> Research Report 266, </type> <institution> Department of Computer Science, University of Exeter, Exeter, U.K., </institution> <year> 1993. </year>
Reference-contexts: A general 3D animation system, POLKA [Sta92a], has been customized to provide a suitable environment to animate object-oriented and procedural features of C++ such as inheritance, encapsulation, and loop constructs <ref> [For93] </ref>. The customized system, Goofy, is described in section 2.2. 2 An exploration of learners' visualizations 2.1 The Experiment Our major teaching commitment for first-year Computer Science, Cognitive Science, and Combined Computer Science/Mathematical Science students concerns students learning to program.
Reference: [Gil90] <author> D J Gilmore. </author> <title> Methodological issues in the study of programming. In J -M Hoc, T R G Green, </title> <editor> R Samurcay, and D J Gilmore, editors, </editor> <booktitle> Psychology of Programming, </booktitle> <pages> pages 83-98. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: able to view the resultant animations on the display screen of an X-terminal Since for practical purposes we were unable to use a control group and moreover since we had no idea what would result from the experiment we decided on exploratory data collection followed up by interviews with programmers <ref> [Gil90] </ref>. 2.2 Goofy The software in the Goofy system builds on the software and ideas of John T. Stasko [Sta92a]. Goofy provides a language and processor to provide smooth, 2 1/2-dimensional colour animations on top of the X11 Window System.
Reference: [Hil92] <author> D D Hils. </author> <title> Visual languages and computing survey: data flow visual programming languages. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 3(1) </volume> <pages> 69-101, </pages> <year> 1992. </year>
Reference-contexts: Program visualization and visual programming. Visualization is an active area of research that has been generally reviewed and explored [Cha87, Mye90, Sta92b, Mur93] and in particular related to programming languages and environments <ref> [EB88, Shu88, AB89, DGT92, HM92, Hil92, SP92] </ref>. In the latter area two subdivisions are recognised namely program visualization and visual programming.
Reference: [HM92] <author> V Haarslev and R Moller. </author> <title> Visualization and graphical layout in object-oriented systems. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 3(1) </volume> <pages> 1-23, </pages> <year> 1992. </year>
Reference-contexts: Program visualization and visual programming. Visualization is an active area of research that has been generally reviewed and explored [Cha87, Mye90, Sta92b, Mur93] and in particular related to programming languages and environments <ref> [EB88, Shu88, AB89, DGT92, HM92, Hil92, SP92] </ref>. In the latter area two subdivisions are recognised namely program visualization and visual programming.
Reference: [Mur93] <author> B S Murray. </author> <title> Visualizing and representing knowledge for the end user: a review. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 38 </volume> <pages> 23-49, </pages> <year> 1993. </year>
Reference-contexts: Program visualization and visual programming. Visualization is an active area of research that has been generally reviewed and explored <ref> [Cha87, Mye90, Sta92b, Mur93] </ref> and in particular related to programming languages and environments [EB88, Shu88, AB89, DGT92, HM92, Hil92, SP92]. In the latter area two subdivisions are recognised namely program visualization and visual programming.
Reference: [Mye90] <author> B A Myers. </author> <title> Taxonomies of visual programming and program visualization. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 1(1) </volume> <pages> 97-123, </pages> <year> 1990. </year> <month> 16 </month>
Reference-contexts: Program visualization and visual programming. Visualization is an active area of research that has been generally reviewed and explored <ref> [Cha87, Mye90, Sta92b, Mur93] </ref> and in particular related to programming languages and environments [EB88, Shu88, AB89, DGT92, HM92, Hil92, SP92]. In the latter area two subdivisions are recognised namely program visualization and visual programming. <p> Visualization is an active area of research that has been generally reviewed and explored [Cha87, Mye90, Sta92b, Mur93] and in particular related to programming languages and environments [EB88, Shu88, AB89, DGT92, HM92, Hil92, SP92]. In the latter area two subdivisions are recognised namely program visualization and visual programming. Myers <ref> [Mye90] </ref> states program visualization is where a "program is specified in a conventional, textual manner, and the graphics is used to illustrate some aspect of the program or its runtime execution" and visual programming is the ability "to specify a program in a two-or more dimensional fashion".
Reference: [Raj90] <author> T. Rajan. </author> <title> Principles for the design of dynamic tracing environments for novice programmers. </title> <journal> Instructional Science, </journal> 19(4/5):377-406, 1990. 
Reference-contexts: passing [SGG73, SE84, Wat79, Bro77]. * having a clear model of the underlying machine (its operating system, editor, and the notional machine related to the programming language - for example a Prolog or C++ notional machine [dBOM81]). * difficulty relating abstract concepts (language) to concrete situations (de sign and implementation) <ref> [Raj90] </ref>. By capturing and studying videos of students' visualizations we are able to address some of the problems that learners experience. First, we are afforded an understanding of their conceptions and misconceptions from a different viewpoint to the largely text-oriented ones of previous studies.
Reference: [RS90] <author> J Rogalski and R Samurcay. </author> <title> Acquisition of programming knowledge and skills. In J -M Hoc, T R G Green, </title> <editor> R Samurcay, and D J Gilmore, editors, </editor> <booktitle> Psychology of Programming, </booktitle> <pages> pages 45-62. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: It is the calls that generate the instructions that are filed and subsequently read by Goofy for animation. 3 Results Rogalski and Samurcay <ref> [RS90] </ref> identify four areas corresponding to the main conceptual fields novices must acquire during the learning process of programming: 1. Conceptual representation about the computer device 2. Control structures 3. Variables, data structures and data representation 4.
Reference: [SE84] <author> E Soloway and K Ehrlich. </author> <title> Empirical studies of programming knowledge. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> September </month> <year> 1984. </year>
Reference-contexts: Each of these practical difficulties could contribute to the well-documented problems of learners: * learning dynamic concepts such as recursion, iteration, variable binding, flow of control, parameter passing <ref> [SGG73, SE84, Wat79, Bro77] </ref>. * having a clear model of the underlying machine (its operating system, editor, and the notional machine related to the programming language - for example a Prolog or C++ notional machine [dBOM81]). * difficulty relating abstract concepts (language) to concrete situations (de sign and implementation) [Raj90].
Reference: [SGG73] <author> M E Sime, T R G Green, and D J Guest. </author> <title> Psychological evaluation of two conditional constructions in computer languages,. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 5 </volume> <pages> 123-143, </pages> <year> 1973. </year>
Reference-contexts: Each of these practical difficulties could contribute to the well-documented problems of learners: * learning dynamic concepts such as recursion, iteration, variable binding, flow of control, parameter passing <ref> [SGG73, SE84, Wat79, Bro77] </ref>. * having a clear model of the underlying machine (its operating system, editor, and the notional machine related to the programming language - for example a Prolog or C++ notional machine [dBOM81]). * difficulty relating abstract concepts (language) to concrete situations (de sign and implementation) [Raj90].
Reference: [Shu88] <author> N C Shu. </author> <title> Visual Programming. </title> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: Program visualization and visual programming. Visualization is an active area of research that has been generally reviewed and explored [Cha87, Mye90, Sta92b, Mur93] and in particular related to programming languages and environments <ref> [EB88, Shu88, AB89, DGT92, HM92, Hil92, SP92] </ref>. In the latter area two subdivisions are recognised namely program visualization and visual programming.
Reference: [SP92] <author> R Stiles and M Pontecorvo. </author> <title> Lingua Graphica: a visual language for virtual environments. </title> <booktitle> In Proceedings 1992 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 225-227. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: Program visualization and visual programming. Visualization is an active area of research that has been generally reviewed and explored [Cha87, Mye90, Sta92b, Mur93] and in particular related to programming languages and environments <ref> [EB88, Shu88, AB89, DGT92, HM92, Hil92, SP92] </ref>. In the latter area two subdivisions are recognised namely program visualization and visual programming.
Reference: [Sta92a] <author> J T Stasko. </author> <title> Polka animation designer's package. </title> <type> Technical report, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <address> Atlanta, GA 30332-0280, </address> <year> 1992. </year>
Reference-contexts: An animation would draw from a general library of animations appropriate to a particular computer language, in our case C++. A general 3D animation system, POLKA <ref> [Sta92a] </ref>, has been customized to provide a suitable environment to animate object-oriented and procedural features of C++ such as inheritance, encapsulation, and loop constructs [For93]. <p> Stasko <ref> [Sta92a] </ref>. Goofy provides a language and processor to provide smooth, 2 1/2-dimensional colour animations on top of the X11 Window System. The language provides the animation designer with object definition constructs, object movement descriptors, an object attribute change facility, a method for choreographing events, and several windows for animation.
Reference: [Sta92b] <author> J T Stasko. </author> <title> Understanding and characterizing software visualization systems. </title> <booktitle> In Proceedings 1992 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 3-10. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: Program visualization and visual programming. Visualization is an active area of research that has been generally reviewed and explored <ref> [Cha87, Mye90, Sta92b, Mur93] </ref> and in particular related to programming languages and environments [EB88, Shu88, AB89, DGT92, HM92, Hil92, SP92]. In the latter area two subdivisions are recognised namely program visualization and visual programming.
Reference: [Wat79] <author> R C Waters. </author> <title> A method for analyzing loop programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 5(3), </volume> <month> May </month> <year> 1979. </year> <title> Acknowledgements I am indebted to John Stasko for providing the POLKA framework and its inspirational ideas. Also I should like to thank the first-year students of 1992/93 (Computer Science, Cognitive Science, Combined Honours Computer Science and Mathematics) for their enthusiastic response to a project involving Goofy. </title> <type> 17 </type>
Reference-contexts: Each of these practical difficulties could contribute to the well-documented problems of learners: * learning dynamic concepts such as recursion, iteration, variable binding, flow of control, parameter passing <ref> [SGG73, SE84, Wat79, Bro77] </ref>. * having a clear model of the underlying machine (its operating system, editor, and the notional machine related to the programming language - for example a Prolog or C++ notional machine [dBOM81]). * difficulty relating abstract concepts (language) to concrete situations (de sign and implementation) [Raj90].
References-found: 23

