URL: ftp://ftp.cs.arizona.edu/reports/1993/TR93-29.ps
Refering-URL: http://www.cs.arizona.edu/research/reports.html
Root-URL: http://www.cs.arizona.edu
Title: Configuring Scientific Applications in a Heterogeneous Distributed System  
Author: Patrick T. Homer Richard D. Schlichting 
Address: Tucson, Arizona 85721  
Affiliation: Department of Computer Science The University of Arizona  
Note: September  This work supported in part by the National Science Foundation under grant ASC-9204021. Homer is supported by the National Aeronautics and Space Administration under GSRP grant NGT-50966.  
Date: TR 93-29  1, 1993  
Abstract: Current scientific applications are often structured as a collection of individual software components that are manually executed on heterogeneous machines, with files being used to transfer data from one component to the next. Yet despite having the structure of a distributed application from the perspective of configuration management, the techniques and tools that have been used in this domain to address configuration have generally been minimal at best. Here, an approach to configuring scientific applications in a heterogeneous distributed system is described. The focus is on Schooner, an interconnection system that provides the programming model and base technology needed for realizing enhanced configurability. One key aspect of this technology is a machine- and language-independent interface specification that is used to generate interface code to bind components into the application and map them onto suitable host architectures. The other is a runtime system that implements support for both static and dynamic configuration. This paper describes the Schooner application model, outlines the method of creating component interfaces, and describes the runtime system and its various configuration options. 
Abstract-found: 1
Intro-found: 1
Reference: [AVS92] <author> Advanced Visual Systems Inc. </author> <title> AVS Developer's Guide (Release 4.0), Part number: 320-0013-02, Rev B, Advanced Visual Systems Inc., </title> <address> Waltham, Mass., </address> <month> May </month> <year> 1992. </year>
Reference-contexts: The new location is then cached locally and the call proceeds. An example of the use of this library interface to support configurability is the prototype simulation executive constructed for the NPSS project using Schooner and the AVS scientific visualization system <ref> [AVS92, Homer93, Homer92] </ref>. AVS employs a Network Editor that allows the user to create programs from a palette of modules. The programs are formed by dragging modules into the workspace and connecting them with lines marking the flow of data through the program.
Reference: [Beguelin91] <author> Beguelin, A., Dongarra, J. J., Geist, G. A., Manchek, R., and Sunderam, V. S. </author> <title> Graphical development tools for network-based concurrent supercomputing. </title> <booktitle> Proc. Supercomputing '91, </booktitle> <address> Albuquerque, NM (Nov. </address> <year> 1991), </year> <pages> 435-444. </pages>
Reference-contexts: They seek to implement parallel algorithms using a message passing paradigm on parallel machines and/or across networks of computers. PVM and p4 also provide support for heterogeneity through conversions of data types across machine boundaries. HeNCE <ref> [Beguelin91] </ref> is a tool built on top of PVM using a visual programming interface to construct programs. The interface allows the user to indicate various parallel constructs, such as the ability to fan a set of jobs out across processes and collect results.
Reference: [Black87] <author> Black, A., Hutchinson, N., Jul, E., Levy, H. and Carter, L. </author> <title> Distribution and abstract types in Emerald. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-13, 1 (Jan. 87), </volume> <pages> 65-76. </pages>
Reference-contexts: Such a situation would arise, for example, when transferring a dynamically allocated array where the size of the array is not known at compile time. It also occurs when a C hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 1 The predecessor MLP system [Hayes88] also supported Pascal, Icon [Griswold90], and Emerald <ref> [Black87] </ref>. -6 hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh s u code block C or FORTRAN UTS Library Comm. Library UTS spec file imports/exports stub compiler = user supplied = Schooner provided component hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh struct (described in UTS as a record) is passed as data to a FORTRAN component.
Reference: [Butler92] <author> Butler, R. and Lusk, E. </author> <title> User's guide to the p4 parallel programming system. </title> <institution> ANL-92/17, Argonne National Laboratory, Argonne, IL, </institution> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: This is in keeping with our philosophy of providing a tool for a scientific programmer to use that is, someone familiar with compilation techniquesand serving primarily as an interconnection tool. Systems such as PVM [Sunderam90], p4 <ref> [Butler92] </ref>, and APPL [Quealy93] support distributed and parallel processing involving multiple processes. They seek to implement parallel algorithms using a message passing paradigm on parallel machines and/or across networks of computers. PVM and p4 also provide support for heterogeneity through conversions of data types across machine boundaries.
Reference: [Callahan91] <author> Callahan, J. R., and Purtilo, J. M. </author> <title> A packaging system for heterogeneous execution environments. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-13, </volume> <month> 6 (Jun. </month> <year> 1991), </year> <pages> 626-635. </pages>
Reference-contexts: Related Work A number of other projects are investigating issues of configuration and heterogeneity in scientific applications. The Polygen system <ref> [Callahan91] </ref> supports configuration through the use of specification files. It uses a specification file for each module similar to the UTS specification files in Schooner.
Reference: [Chen93] <author> Chen, S., Eshaghian, M., Khokhar, A., and Shaaban, M. </author> <title> A selection theory and methodology for heterogeneous supercomputing. </title> <booktitle> Proc. Workshop on Heterogeneous Processing, </booktitle> <address> Newport Beach, CA (Apr. </address> <year> 1993), </year> <pages> 15-22. </pages>
Reference-contexts: Indeed, a program using PVM, for example, can become a component within a Schooner application. The combination of RPC and the UTS type language simplifies the construction of the interface by providing a familiar procedural format and supporting the automatic conversion of most data values. Several other research projects <ref> [Chen93, Freund93, Khokhar93, Wang92] </ref> are also studying the issue of heterogeneity in scientific applications. In particular, they are investigating ways to recognize heterogeneity in an application and automatically partition the application to execute on a (virtual or real) heterogeneous machine.
Reference: [Claus91] <author> Claus, R.W., Evans, A.L., Lylte, J.K., and Nichols, L.D. </author> <title> Numerical Propulsion System Simulation. </title> <booktitle> Computing Systems in Engineering 2, </booktitle> <month> 4 (Apr. </month> <year> 1991), </year> <pages> 357-364. </pages> <month> -14 </month>
Reference: [Douglis91] <author> Douglis, F., and Ousterhout, J. </author> <title> Transparent process migration: Design alternatives and the Sprite implementation. </title> <journal> SoftwarePractice and Experience 21, </journal> <month> 8 (Aug. </month> <year> 1991), </year> <pages> 757-785. </pages>
Reference-contexts: The move ability is limited by the philosophy of minimizing the changes needed in the user's source code, since without participation from the code block and access to the internal call stack, general process migration is impossible <ref> [Hofmeister93, Douglis91] </ref>. However, Schooner's use of RPC allows a component to move when it is between calls.
Reference: [Freund93] <author> Freund, R. F., and Siegel, H. J. </author> <title> Heterogeneous processing. </title> <booktitle> Computer 26, </booktitle> <month> 6 (June </month> <year> 1993), </year> <pages> 13-17. </pages>
Reference-contexts: Indeed, a program using PVM, for example, can become a component within a Schooner application. The combination of RPC and the UTS type language simplifies the construction of the interface by providing a familiar procedural format and supporting the automatic conversion of most data values. Several other research projects <ref> [Chen93, Freund93, Khokhar93, Wang92] </ref> are also studying the issue of heterogeneity in scientific applications. In particular, they are investigating ways to recognize heterogeneity in an application and automatically partition the application to execute on a (virtual or real) heterogeneous machine.
Reference: [Griswold90] <author> Griswold, R. and Griswold, M. </author> <title> The Icon Programming Language, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1990. </year>
Reference-contexts: Such a situation would arise, for example, when transferring a dynamically allocated array where the size of the array is not known at compile time. It also occurs when a C hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 1 The predecessor MLP system [Hayes88] also supported Pascal, Icon <ref> [Griswold90] </ref>, and Emerald [Black87]. -6 hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh s u code block C or FORTRAN UTS Library Comm. Library UTS spec file imports/exports stub compiler = user supplied = Schooner provided component hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh struct (described in UTS as a record) is passed as data to a FORTRAN component.
Reference: [Hayes88] <author> Hayes, R., Manweiler, S., and Schlichting, R.D. </author> <title> A simple system for constructing distributed, mixed-language programs. </title> <journal> SoftwarePractice and Experience 18, </journal> <month> 7 (July </month> <year> 1988), </year> <pages> 641-660. </pages>
Reference-contexts: Such a situation would arise, for example, when transferring a dynamically allocated array where the size of the array is not known at compile time. It also occurs when a C hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 1 The predecessor MLP system <ref> [Hayes88] </ref> also supported Pascal, Icon [Griswold90], and Emerald [Black87]. -6 hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh s u code block C or FORTRAN UTS Library Comm.
Reference: [Hayes89] <author> Hayes, R. UTS: </author> <title> A Type System for Facilitating Data Communication. </title> <type> Ph.D. Dissertation, </type> <institution> Dept. of Computer Science, Univ. of Arizona, </institution> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: Linking the interface with the code block and the Schooner libraries produces an executable component that can be configured into applications. 3.1. Interface Specification The Universal Type System (UTS) <ref> [Hayes89] </ref> provides a specification language for defining component interfaces and a library for converting data formats across machine boundaries. The type language defines interfaces using a syntax that is independent of both the execution host architecture and the programming language used in the code block.
Reference: [Hofmeister93] <author> Hofmeister, C., White, E., and Purtilo, J. Surgeon: </author> <title> A packager for dynamically reconfigurable distributed applications. </title> <journal> IEE Software Engineering Journal 8, </journal> <month> 2 (Mar. </month> <year> 1993), </year> <pages> 95-101. </pages>
Reference-contexts: The move ability is limited by the philosophy of minimizing the changes needed in the user's source code, since without participation from the code block and access to the internal call stack, general process migration is impossible <ref> [Hofmeister93, Douglis91] </ref>. However, Schooner's use of RPC allows a component to move when it is between calls.
Reference: [Homer92] <author> Homer, P.T., and Schlichting, R.D. </author> <title> A software platform for constructing scientific applications from heterogeneous resources. </title> <type> Tech. Report 92-30, </type> <institution> Dept. of Computer Science, Univ. of Arizona, </institution> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: The new location is then cached locally and the call proceeds. An example of the use of this library interface to support configurability is the prototype simulation executive constructed for the NPSS project using Schooner and the AVS scientific visualization system <ref> [AVS92, Homer93, Homer92] </ref>. AVS employs a Network Editor that allows the user to create programs from a palette of modules. The programs are formed by dragging modules into the workspace and connecting them with lines marking the flow of data through the program.
Reference: [Homer93] <author> Homer, P. T., and Schlichting, R. D. </author> <title> Supporting heterogeneity and distribution in the Numerical Propulsion System Simulation project. </title> <booktitle> Proc. 2nd Intl. Symp. on High Performance Distributed Computing, </booktitle> <address> Spokane, WA (Jul. </address> <year> 1993), </year> <pages> 187-195. </pages>
Reference-contexts: The new location is then cached locally and the call proceeds. An example of the use of this library interface to support configurability is the prototype simulation executive constructed for the NPSS project using Schooner and the AVS scientific visualization system <ref> [AVS92, Homer93, Homer92] </ref>. AVS employs a Network Editor that allows the user to create programs from a palette of modules. The programs are formed by dragging modules into the workspace and connecting them with lines marking the flow of data through the program.
Reference: [Khokhar93] <author> Khokhar, A. A., Prasanna, V. K., Shaaban, M. E., and Wang, C. </author> <title> Heterogeneous computing: Challenges and opportunities. </title> <booktitle> Computer 26, </booktitle> <month> 6 (Jun. </month> <year> 1993), </year> <pages> 18-27. </pages>
Reference-contexts: Indeed, a program using PVM, for example, can become a component within a Schooner application. The combination of RPC and the UTS type language simplifies the construction of the interface by providing a familiar procedural format and supporting the automatic conversion of most data values. Several other research projects <ref> [Chen93, Freund93, Khokhar93, Wang92] </ref> are also studying the issue of heterogeneity in scientific applications. In particular, they are investigating ways to recognize heterogeneity in an application and automatically partition the application to execute on a (virtual or real) heterogeneous machine.
Reference: [Purtilo90] <author> Purtilo, J. M. </author> <title> The Polylith software bus. </title> <institution> Institute for Advanced Computer Studies and Dept. of Computer Science, Univ. of Maryland, UMIACS-TR-90-65, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: To configure an application, Polygen also uses a specification file, called a -12 composite specification, that describes the collection of modules and the bindings among them to create the application. The Polylith software bus <ref> [Purtilo90] </ref> is then used to create the application and execute it, following the directions in the specification files. The software bus encapsulates the heterogeneity and distribution aspects of the application, handling the establishment of communications and creation of the modules.
Reference: [Quealy93] <author> Quealy, A., Cole, G. L., and Blech, R. A. </author> <title> Portable programming on parallel/networked computers using the Application Portable Parallel Library (APPL). </title> <type> NASA Technical Memorandum 106238, </type> <month> Jul. </month> <year> 1993. </year>
Reference-contexts: This is in keeping with our philosophy of providing a tool for a scientific programmer to use that is, someone familiar with compilation techniquesand serving primarily as an interconnection tool. Systems such as PVM [Sunderam90], p4 [Butler92], and APPL <ref> [Quealy93] </ref> support distributed and parallel processing involving multiple processes. They seek to implement parallel algorithms using a message passing paradigm on parallel machines and/or across networks of computers. PVM and p4 also provide support for heterogeneity through conversions of data types across machine boundaries.
Reference: [Sunderam90] <author> Sunderam, V. S. </author> <title> PVM: A framework for parallel distributed computing. </title> <journal> Concurrency Practice and Experience 2, </journal> <month> 4 (Dec. </month> <year> 1990), </year> <pages> 315-339. </pages>
Reference-contexts: This is in keeping with our philosophy of providing a tool for a scientific programmer to use that is, someone familiar with compilation techniquesand serving primarily as an interconnection tool. Systems such as PVM <ref> [Sunderam90] </ref>, p4 [Butler92], and APPL [Quealy93] support distributed and parallel processing involving multiple processes. They seek to implement parallel algorithms using a message passing paradigm on parallel machines and/or across networks of computers. PVM and p4 also provide support for heterogeneity through conversions of data types across machine boundaries.
Reference: [Wang92] <author> Wang, M., Kim, S., Nichols, M., Freund, R., Seigel, H., and Nation, W. </author> <title> Augmenting the optimal selection theory for superconcurrency. </title> <booktitle> Proc. Workshop on Heterogeneous Processing, </booktitle> <address> Beverly Hills, CA (Mar. </address> <year> 1992), </year> <pages> 13-22. </pages> <month> -15 </month>
Reference-contexts: Indeed, a program using PVM, for example, can become a component within a Schooner application. The combination of RPC and the UTS type language simplifies the construction of the interface by providing a familiar procedural format and supporting the automatic conversion of most data values. Several other research projects <ref> [Chen93, Freund93, Khokhar93, Wang92] </ref> are also studying the issue of heterogeneity in scientific applications. In particular, they are investigating ways to recognize heterogeneity in an application and automatically partition the application to execute on a (virtual or real) heterogeneous machine.
References-found: 20

