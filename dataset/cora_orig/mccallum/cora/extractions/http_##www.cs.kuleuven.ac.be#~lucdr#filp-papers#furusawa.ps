URL: http://www.cs.kuleuven.ac.be/~lucdr/filp-papers/furusawa.ps
Refering-URL: http://www.cs.kuleuven.ac.be/~lucdr/filp.html
Root-URL: 
Email: E-mail: fmitsue,inuzuka,seki,itohg@ics.nitech.ac.jp  
Phone: Phone: +81-52-735-5475, Fax: +81-52-735-5477  
Title: Bottom-up induction of logic programs with more than one recursive clause  
Author: Mitsue Furusawa, Nobuhiro Inuzuka, Hirohisa Seki and Hidenori Itoh 
Address: Gokiso-cho, Showa-ku, Nagoya 466, Japan  
Affiliation: Department of Intelligence and Computer Science Nagoya Institute of Technology  
Abstract: In this paper we present a bottom-up algorithm called MRI to induce logic programs from their examples. This method can induce programs with a base clause and more than one recursive clause from a very small number of examples. MRI is based on the analysis of saturations of examples. It first generates a path structure, which is an expression of a stream of values processed by predicates. The concept of path structure was originally introduced by Identam-Almquist and used in TIM [ Idestam-Almquist, 1996 ] . In this paper, we introduce the concepts of extension and difference of path structure. Recursive clauses can be expressed as a difference between a path structure and its extension. The paper presents the algorithm and shows experimental results obtained by the method.
Abstract-found: 1
Intro-found: 1
Reference: [ Idestam-Almquist, 1996 ] <author> Peter Idestam-Almquist: </author> <title> "Efficient Induction of Recursive Definitions by Structural Analysis of Saturations", </title> <booktitle> in Advances in Inductive Logic Programming, </booktitle> <editor> L.De Raedt (ed.), </editor> <month> pp.192-205 </month> <year> (1996). </year>
Reference-contexts: Approaches based on structural analysis of examples have succeeded in inducing recursive definitions from small sample sets. LOPSTER [ Lapinte, et al., 1992 ] and its successor CRUSTACEAN [ Aha, et al., 1994a; 1994b ] induce recursive definitions very efficiently. TIM <ref> [ Idestam-Almquist, 1996 ] </ref> induces recursive definitions based on structural analysis of saturation, also very efficiently. The classes of logic programs induced by these systems, however, are very restricted. <p> We call predicates in the former class check predicates and call ones in the latter class path predicates. A literal with a check predicate (a path predicate) is called a check literal (a path literal, respectively). We use the words, saturation, path, and path structure after the manner of <ref> [ Idestam-Almquist, 1996 ] </ref> with slight changes. A saturation of a positive example E wrt a theory T is a clause F that satisfies: 1. <p> The idea of structural analysis of saturation based on path structure was originally proposed in <ref> [ Idestam-Almquist, 1996 ] </ref> . The main contribution of this paper is to show the differential analysis of path structures and the correspondence between difference and literals. The ideas of extension and difference of path structure are effective for constructing recursive programs. <p> If these conditions are satisfied, the recursive definition is one of the solutions found by MRI with an appropriate set of examples. Finally, we analyze the computational complexity of MRI. We can use a result given in <ref> [ Idestam-Almquist, 1996 ] </ref> because MRI uses the same situation.
Reference: [ Quinlan, 1990 ] <author> J. Ross Quinlan: </author> <title> "Learning logical definitions from relations", </title> <journal> Machine Learning, </journal> <volume> 5, </volume> <month> pp.239-266 </month> <year> (1990). </year>
Reference-contexts: Recursive definitions have been a target of ILP research. Systems such as FOIL <ref> [ Quinlan, 1990; Quinlan et al., 1993 ] </ref> , Progol [ Mug-gleton, 1995 ] and GOLEM [ Muggleton et al., 1990 ] induce recursive definitions, but they need many examples. Approaches based on structural analysis of examples have succeeded in inducing recursive definitions from small sample sets.
Reference: [ Quinlan et al., 1993 ] <author> J. Ross Quinlan and R. Mike Cameron-Jones: </author> <title> "FOIL: A midterm report", </title> <editor> In P. Brazdil, editor, </editor> <booktitle> Proceedings of the 6th Euro-pean Conference on Machine Learning, volume 667 of Lecture Notes in Artificial Intelligence, </booktitle> <address> pp.3-20. </address> <publisher> Springer-Verlag (1993). </publisher>
Reference-contexts: Recursive definitions have been a target of ILP research. Systems such as FOIL <ref> [ Quinlan, 1990; Quinlan et al., 1993 ] </ref> , Progol [ Mug-gleton, 1995 ] and GOLEM [ Muggleton et al., 1990 ] induce recursive definitions, but they need many examples. Approaches based on structural analysis of examples have succeeded in inducing recursive definitions from small sample sets.
Reference: [ Muggleton, 1995 ] <author> Stephen Muggleton: </author> <title> "Inverse entailment and progol", </title> <journal> New Generation Computing, </journal> <volume> 3+4, </volume> <month> pp.245-286 </month> <year> (1995). </year>
Reference: [ Muggleton et al., 1990 ] <author> Stephen Muggleton and Cao Feng: </author> <title> "Efficient induction of logic programs", </title> <booktitle> Proceedings of the Workshop on Algorithmic Learning Theory, </booktitle> <address> Ohmsma, Tokyo, </address> <month> pp.368-381 </month> <year> (1990). </year>
Reference-contexts: Recursive definitions have been a target of ILP research. Systems such as FOIL [ Quinlan, 1990; Quinlan et al., 1993 ] , Progol [ Mug-gleton, 1995 ] and GOLEM <ref> [ Muggleton et al., 1990 ] </ref> induce recursive definitions, but they need many examples. Approaches based on structural analysis of examples have succeeded in inducing recursive definitions from small sample sets.
Reference: [ Lapinte, et al., 1992 ] <author> Stephen Lapointe and Stan Matwin: </author> <title> "A tool for efficient induction of recursive programs", </title> <booktitle> Proceeding of Ninth International Conference on Machine Learning, </booktitle> <publisher> Morgan Kaufmann, </publisher> <month> pp.273-281 </month> <year> (1992). </year>
Reference-contexts: Approaches based on structural analysis of examples have succeeded in inducing recursive definitions from small sample sets. LOPSTER <ref> [ Lapinte, et al., 1992 ] </ref> and its successor CRUSTACEAN [ Aha, et al., 1994a; 1994b ] induce recursive definitions very efficiently. TIM [ Idestam-Almquist, 1996 ] induces recursive definitions based on structural analysis of saturation, also very efficiently.
Reference: [ Aha, et al., 1994a ] <author> David W. Aha, Stephen Lapointe, Charles X. Ling and Stan Matwin: </author> <title> "Inverting Implication with Small Training Sets", </title> <booktitle> Proceedings of European Conference on Machine Learning (ECML'94), </booktitle> <publisher> Springer-Verlag, </publisher> <month> pp.31-48 </month> <year> (1994 </year>
Reference-contexts: Approaches based on structural analysis of examples have succeeded in inducing recursive definitions from small sample sets. LOPSTER [ Lapinte, et al., 1992 ] and its successor CRUSTACEAN <ref> [ Aha, et al., 1994a; 1994b ] </ref> induce recursive definitions very efficiently. TIM [ Idestam-Almquist, 1996 ] induces recursive definitions based on structural analysis of saturation, also very efficiently. The classes of logic programs induced by these systems, however, are very restricted.
Reference: [ Aha, et al., 1994b ] <author> David W. Aha, Stephen Lapointe, Charles X. Ling and Stan Matwin: </author> <title> "Learning Recursive Relations with Randomly Selected Small Training Sets", </title> <booktitle> Proceedings of the Eleventh International Conference on Machine Learning, </booktitle> <publisher> Morgan Kaufmann, </publisher> <month> pp.12-18 </month> <year> (1994). </year>
Reference: [ Cohen, 1993 ] <author> William W. Cohen: </author> <title> "PAC-learning a restricted class of recursive logic programs", </title> <booktitle> Proceedings of Third International Workshop on Inductive Logic Programming, </booktitle> <institution> J. Stephen Institute, Ljubl-jana, Slovenia (1993). </institution>
Reference-contexts: The classes of logic programs induced by these systems, however, are very restricted. LOP-STER and CRUSTACEAN induce only definitions consisting of one unit clause and one two-literal recursive clause, which only has a head literal and a recursive literal. FORCE2 <ref> [ Cohen, 1993 ] </ref> has more ability. It learns logic programs with one base clause and one tail recursive clause, but it needs to know whether an example is an instance of a base clause or a recursive clause.
References-found: 9

