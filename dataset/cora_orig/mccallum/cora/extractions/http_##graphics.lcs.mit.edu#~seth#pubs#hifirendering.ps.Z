URL: http://graphics.lcs.mit.edu/~seth/pubs/hifirendering.ps.Z
Refering-URL: http://graphics.lcs.mit.edu/~seth/pubs/pubs.html
Root-URL: 
Title: High-Fidelity Radiosity Rendering at Interactive Rates  
Author: Stephen Hardt Seth Teller 
Affiliation: MIT Synthetic Imagery Group  
Abstract: Existing radiosity rendering algorithms achieve interactivity or high fidelity, but not both. Most radiosity renderers optimize interactivity by converting to a polygonal representation and Gouraud interpolating shading samples, thus sacrificing visual fidelity. A few renderers achieve improved fidelity by performing a per-pixel irradiance "gather" operation, much as in ray-tracing. This approach does not achieve interactive frame rates on existing hardware. This paper bridges the gap, by describing a data structure and algorithm which enable interactive, high-fidelity rendering of radiosity solutions. Our algorithm "factors" the radiosity rendering computation into two components: an o*ine phase, in which a per-surface representation of ir-radiance is constructed; and an online phase, in which this representation is rapidly queried, in parallel, to produce a radiosity value at each pixel. The key components of the o*ine phase are a heuristic discontinuity ranking algorithm, which identifies the strongest discontinuities, and a hybrid quadtree-mesh data structure which prevents combinatorial interactions between most discontinu-ities. The online phase involves a novel use of perspective-correct texture-mapping hardware to produce nonlinear, analytic shading effects.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Airey, J. M., Rohlf, J. H., and Brooks, Jr., F. P. </author> <title> Towards Image Realism with Interactive Update Rates in Complex Virtual Building Environments. </title> <booktitle> ACM Siggraph Special Issue on 1990 Symposium on Interactive 3D Graphics 24, 2 (1990), </booktitle> <pages> 41-50. </pages>
Reference-contexts: Moreover, screen-space interpolation is not invariant under general viewing transformations, causing shading artifacts during interactive viewing. Polygon-rendering hardware has been successfully used in interactive walkthroughs of globally illuminated environments <ref> [1, 5, 10] </ref>. In these interactively rendered sequences, however, the surface geometry is a collection of polygons, and the surface shading is a screen-space linear interpolation of a function whose value is specified at three points (typically, the vertices of a triangle) [2].
Reference: [2] <author> Akeley, K. </author> <title> RealityEngine Graphics. </title> <booktitle> Computer Graphics (Proc. Siggraph '93) (1993), </booktitle> <pages> 109-116. </pages>
Reference-contexts: In these interactively rendered sequences, however, the surface geometry is a collection of polygons, and the surface shading is a screen-space linear interpolation of a function whose value is specified at three points (typically, the vertices of a triangle) <ref> [2] </ref>. Although higher-order geometry primitives exist on some architectures [21], even these polygonalize, then Gouraud interpolate over, the interiors of the resulting triangles. Graphics hardware architectures that perform higher-order shading have been built [9, 17], but are not widely available. <p> Step (d) consists of copying pixels from host memory to the framebuffer. These operations are all extremely fast (i.e. can easily be performed at interactive rates) on a high-end graphics workstation such as the Reality Engine <ref> [2] </ref>. The bottleneck of our method is step (c), taking 10 - 100 times as long as the other steps. Fortunately, this operation is highly parallelizable. The color of each pixel depends only on the triangle list and the scratch images I 1 and I 2 .
Reference: [3] <author> Arvo, J. </author> <title> The Irradiance Jacobian for Partially Occluded Polyhedral Sources. </title> <booktitle> In Proceedings of SIGGRAPH '94 (Orlando, </booktitle> <address> Florida, </address> <month> July 24-29, </month> <year> 1994) </year> <month> (July </month> <year> 1994), </year> <editor> A. Glassner, Ed., </editor> <booktitle> Computer Graphics Proceedings, Annual Conference Series, ACM SIGGRAPH, </booktitle> <publisher> ACM Press, </publisher> <pages> pp. 343-350. </pages> <note> ISBN 0-89791-667-0. </note>
Reference-contexts: We assume that these algorithms converge to an accurate radiosity solution, but do not consider convergence or solver accuracy issues here. Irradiance data structure. We use the idea of a per-surface data structure which approximates spatially varying irradiance <ref> [27, 19, 20, 3] </ref>. Discontinuity identification. Our algorithms explicitly identify irradiance discontinuities in order to improve the visual fidelity of the computed solution, as have [4, 15, 22, 20, 25, 8]. Hardware acceleration of object-space computations. <p> This paper introduces several new ideas and techniques, among them: Discontinuity ordering. We select from a collection of irradiance discontinuities via a heuristic estimate of their relative strengths at the receiver. Although our irradiance gradient is heuristic, it is less computationally intricate than those of <ref> [16, 27, 3] </ref>. Moreover, both discontinuities caused by emitters and reemitters are handled. Hybrid mesh structures. Quadtrees are fundamentally unable to model general domains, except by a sort of generalized (and aliasing-prone) binary subdivision. <p> Since smooth interpolants do not perform well in the presence of discontinuities, researchers have proposed the construction of "discontinuity meshes," in which the solution elements (i.e., function domains) are explicitly meshed, in order to introduce boundary curves wherever discontinuities are detected <ref> [4, 19, 15, 20, 22, 25, 3, 8] </ref>. Once discontinuities have been banished from the interior of the element, a smooth interpolant can be fit, although for non-trivial domains this requires some fairly complex geometric and topological infrastructure [22, 19, 18].
Reference: [4] <author> Baum, D., Mann, S., Smith, K., and Winget, J. </author> <title> Making Radiosity Usable: Automatic Preprocessing and Meshing Techniques for the Generation of Accurate Radiosity Solutions. </title> <journal> Computer Graphics (Proc. </journal> <volume> Siggraph '91) 25, 4 (1991), </volume> <pages> 51-60. </pages>
Reference-contexts: Irradiance data structure. We use the idea of a per-surface data structure which approximates spatially varying irradiance [27, 19, 20, 3]. Discontinuity identification. Our algorithms explicitly identify irradiance discontinuities in order to improve the visual fidelity of the computed solution, as have <ref> [4, 15, 22, 20, 25, 8] </ref>. Hardware acceleration of object-space computations. As did the "hemi-cube" [7], "two-pass" [23], and "3D painting" [13] algorithms, we use fast graphics hardware to discretize and accelerate object space computations. Backprojection of occluders. <p> Since smooth interpolants do not perform well in the presence of discontinuities, researchers have proposed the construction of "discontinuity meshes," in which the solution elements (i.e., function domains) are explicitly meshed, in order to introduce boundary curves wherever discontinuities are detected <ref> [4, 19, 15, 20, 22, 25, 3, 8] </ref>. Once discontinuities have been banished from the interior of the element, a smooth interpolant can be fit, although for non-trivial domains this requires some fairly complex geometric and topological infrastructure [22, 19, 18].
Reference: [5] <author> Baum, D., and Winget, J. </author> <title> Real Time Radiosity Through Parallel Processing and Hardware Acceleration. </title> <booktitle> Computer Graphics (1990 Symposium on Interactive 3D Graphics) 24, </booktitle> <month> 2 (March </month> <year> 1990), </year> <pages> 67-75. </pages>
Reference-contexts: Moreover, screen-space interpolation is not invariant under general viewing transformations, causing shading artifacts during interactive viewing. Polygon-rendering hardware has been successfully used in interactive walkthroughs of globally illuminated environments <ref> [1, 5, 10] </ref>. In these interactively rendered sequences, however, the surface geometry is a collection of polygons, and the surface shading is a screen-space linear interpolation of a function whose value is specified at three points (typically, the vertices of a triangle) [2].
Reference: [6] <author> Baum, D. R., Rushmeier, H. E., and Winget, J. M. </author> <title> Improving Radiosity Solutions Through the Use of Analytically Determined Form Factors. </title> <journal> Computer Graphics (Proc. </journal> <volume> Siggraph '89) 23, 3 (1989), </volume> <pages> 325-334. </pages>
Reference-contexts: For a point x, we compute the point-to-polygon form factors from x to all sources visible from x <ref> [6] </ref>. To achieve point-to-source form factors with accurate visibility, we "backproject" potential blockers to the source [8], and add only irradiance from unobscured fragments.
Reference: [7] <author> Cohen, M., and Greenberg, D. </author> <title> The Hemi-Cube: A Radiosity Solution for Complex Environments. </title> <journal> Computer Graphics (Proc. </journal> <volume> Siggraph '85) 19, 3 (1985), </volume> <pages> 31-40. </pages>
Reference-contexts: Discontinuity identification. Our algorithms explicitly identify irradiance discontinuities in order to improve the visual fidelity of the computed solution, as have [4, 15, 22, 20, 25, 8]. Hardware acceleration of object-space computations. As did the "hemi-cube" <ref> [7] </ref>, "two-pass" [23], and "3D painting" [13] algorithms, we use fast graphics hardware to discretize and accelerate object space computations. Backprojection of occluders. We use the notion of "backprojection" for the computation of accurate source-to-point irradiance in the presence of occluders [8].
Reference: [8] <author> Drettakis, G., and Fiume, E. </author> <title> A Fast Shadow Algorithm for Area Light Sources Using Backprojection. </title> <booktitle> In Proceedings of SIGGRAPH '94 (Orlando, </booktitle> <address> Florida, </address> <month> July 24-29, </month> <year> 1994) </year> <month> (July </month> <year> 1994), </year> <editor> A. Glassner, Ed., </editor> <booktitle> Computer Graphics Proceedings, Annual Conference Series, ACM SIGGRAPH, </booktitle> <publisher> ACM Press, </publisher> <pages> pp. 223-230. </pages> <note> ISBN 0-89791-667-0. </note>
Reference-contexts: Irradiance data structure. We use the idea of a per-surface data structure which approximates spatially varying irradiance [27, 19, 20, 3]. Discontinuity identification. Our algorithms explicitly identify irradiance discontinuities in order to improve the visual fidelity of the computed solution, as have <ref> [4, 15, 22, 20, 25, 8] </ref>. Hardware acceleration of object-space computations. As did the "hemi-cube" [7], "two-pass" [23], and "3D painting" [13] algorithms, we use fast graphics hardware to discretize and accelerate object space computations. Backprojection of occluders. <p> As did the "hemi-cube" [7], "two-pass" [23], and "3D painting" [13] algorithms, we use fast graphics hardware to discretize and accelerate object space computations. Backprojection of occluders. We use the notion of "backprojection" for the computation of accurate source-to-point irradiance in the presence of occluders <ref> [8] </ref>. This paper introduces several new ideas and techniques, among them: Discontinuity ordering. We select from a collection of irradiance discontinuities via a heuristic estimate of their relative strengths at the receiver. Although our irradiance gradient is heuristic, it is less computationally intricate than those of [16, 27, 3]. <p> Since smooth interpolants do not perform well in the presence of discontinuities, researchers have proposed the construction of "discontinuity meshes," in which the solution elements (i.e., function domains) are explicitly meshed, in order to introduce boundary curves wherever discontinuities are detected <ref> [4, 19, 15, 20, 22, 25, 3, 8] </ref>. Once discontinuities have been banished from the interior of the element, a smooth interpolant can be fit, although for non-trivial domains this requires some fairly complex geometric and topological infrastructure [22, 19, 18]. <p> For a point x, we compute the point-to-polygon form factors from x to all sources visible from x [6]. To achieve point-to-source form factors with accurate visibility, we "backproject" potential blockers to the source <ref> [8] </ref>, and add only irradiance from unobscured fragments. This irradiance gathering operation satisfies requirement (3) of the high fidelity rendering algorithm. 6 Implementation We implemented these algorithms on a Silicon Graphics Reality Engine with four 250 MHz MIPS RISC R4400 CPUs and 512Mb of memory.
Reference: [9] <author> Fuchs, H., Poulton, J., Eyles, J., Greer, T., GoldFeather, J., Ellsworth, D., Molnar, S., Turk, G., Tebbs, B., and Israel, L. </author> <title> Pixel-Planes 5: A Heterogeneous Multiprocessor Graphics System Using Processor-Enhanced Memories. </title> <journal> Computer Graphics (Proc. </journal> <volume> Siggraph '89) 23, 3 (1989), </volume> <pages> 79-88. </pages>
Reference-contexts: Although higher-order geometry primitives exist on some architectures [21], even these polygonalize, then Gouraud interpolate over, the interiors of the resulting triangles. Graphics hardware architectures that perform higher-order shading have been built <ref> [9, 17] </ref>, but are not widely available. These facts partially explain why many of the beautiful images published in the global illumination literature (e.g., [19]) are produced by ray-casting algorithms which, at each pixel, identify surface points to be shaded, then compute analytical irradiance values there with an object-space algorithm.
Reference: [10] <author> Garlick, B., Baum, D. R., and Winget, J. M. </author> <title> Interactive Viewing of Large Geometric Databases Using Multiprocessor Graphics Workstations. Siggraph '90 Course Notes (Parallel Algorithms and Architectures for 3D Image Generation) (1990). </title>
Reference-contexts: Moreover, screen-space interpolation is not invariant under general viewing transformations, causing shading artifacts during interactive viewing. Polygon-rendering hardware has been successfully used in interactive walkthroughs of globally illuminated environments <ref> [1, 5, 10] </ref>. In these interactively rendered sequences, however, the surface geometry is a collection of polygons, and the surface shading is a screen-space linear interpolation of a function whose value is specified at three points (typically, the vertices of a triangle) [2].
Reference: [11] <author> Gortler, S., Schr oder, P., Cohen, M., and Hanrahan, P. </author> <title> Wavelet radiosity. </title> <booktitle> Computer Graphics (Proc. Siggraph '93) (August 1993), </booktitle> <pages> 221-230. </pages>
Reference-contexts: Our prototype implementation simultaneously captures global lighting effects and evaluates superlinear radiosity interpolants at interactive rates. 1.3 Algorithmic Foundations Our algorithms and implementation build upon several ideas and techniques from the literature: Hierarchical radiosity. We adopt the algorithms of <ref> [14, 11, 12, 26] </ref> and use them as a hierarchical radiosity solver. We assume that these algorithms converge to an accurate radiosity solution, but do not consider convergence or solver accuracy issues here. Irradiance data structure. <p> Our implementation uses four processors (RISC R4400s running at 250 MHz), shared memory for communication between processes, and hardware locks for synchronization. 3 Radiosity Solution The underlying radiosity solver is a reimplementation of the hierarchical radiosity and wavelet radiosity algorithms described in <ref> [14, 11, 26] </ref>. Solving the global pass of the radiosity solution provides us with * A quadtree subdivision of the input geometry; * A radiosity value for each quadtree node; * A "link" representing each element-element interaction; * A set of "blockers" for each link. <p> The underlying radiosity solver is a reimplementation, in C++, of the hierarchical radiosity and wavelet radiosity algorithms described in <ref> [14, 11, 26] </ref>.
Reference: [12] <author> Haines, E., and Wallace, J. </author> <title> Shaft Culling for Efficient Ray-Traced Radiosity. </title> <booktitle> In Proc. 2 nd Eurographics Workshop on Rendering (May 1991). </booktitle>
Reference-contexts: Our prototype implementation simultaneously captures global lighting effects and evaluates superlinear radiosity interpolants at interactive rates. 1.3 Algorithmic Foundations Our algorithms and implementation build upon several ideas and techniques from the literature: Hierarchical radiosity. We adopt the algorithms of <ref> [14, 11, 12, 26] </ref> and use them as a hierarchical radiosity solver. We assume that these algorithms converge to an accurate radiosity solution, but do not consider convergence or solver accuracy issues here. Irradiance data structure.
Reference: [13] <author> Hanrahan, P., and Haeberli, P. E. </author> <title> Direct WYSIWYG Painting and Texturing on 3D Shapes. </title> <booktitle> In Computer Graphics (SIGGRAPH '90 Proceedings) (Aug. </booktitle> <year> 1990), </year> <editor> F. Baskett, Ed., </editor> <volume> vol. 24, </volume> <pages> pp. 215-223. </pages>
Reference-contexts: Discontinuity identification. Our algorithms explicitly identify irradiance discontinuities in order to improve the visual fidelity of the computed solution, as have [4, 15, 22, 20, 25, 8]. Hardware acceleration of object-space computations. As did the "hemi-cube" [7], "two-pass" [23], and "3D painting" <ref> [13] </ref> algorithms, we use fast graphics hardware to discretize and accelerate object space computations. Backprojection of occluders. We use the notion of "backprojection" for the computation of accurate source-to-point irradiance in the presence of occluders [8]. This paper introduces several new ideas and techniques, among them: Discontinuity ordering.
Reference: [14] <author> Hanrahan, P., Salzman, D., and Aupperle, L. </author> <title> A Rapid Hierarchical Radiosity Algorithm. </title> <journal> Computer Graphics (Proc. </journal> <volume> Siggraph '91) 25, 4 (1991), </volume> <pages> 197-206. </pages>
Reference-contexts: We assume that a hierarchical radiosity solution method is in use, which produces as output a discretization of the input into elements annotated by radiosity values, and an organization of interactions between elements into links annotated by blockers (as in <ref> [14, 26] </ref>). From interactions among the blockers and light sources, we rank irradiance discontinuities by their strength on the receiver, and select the strongest. The selected discontinuities partition each solution element into disjoint regions, inside each of which none of the (selected) discontinuities can be present. <p> Our prototype implementation simultaneously captures global lighting effects and evaluates superlinear radiosity interpolants at interactive rates. 1.3 Algorithmic Foundations Our algorithms and implementation build upon several ideas and techniques from the literature: Hierarchical radiosity. We adopt the algorithms of <ref> [14, 11, 12, 26] </ref> and use them as a hierarchical radiosity solver. We assume that these algorithms converge to an accurate radiosity solution, but do not consider convergence or solver accuracy issues here. Irradiance data structure. <p> Our implementation uses four processors (RISC R4400s running at 250 MHz), shared memory for communication between processes, and hardware locks for synchronization. 3 Radiosity Solution The underlying radiosity solver is a reimplementation of the hierarchical radiosity and wavelet radiosity algorithms described in <ref> [14, 11, 26] </ref>. Solving the global pass of the radiosity solution provides us with * A quadtree subdivision of the input geometry; * A radiosity value for each quadtree node; * A "link" representing each element-element interaction; * A set of "blockers" for each link. <p> Once discontinuities have been banished from the interior of the element, a smooth interpolant can be fit, although for non-trivial domains this requires some fairly complex geometric and topological infrastructure [22, 19, 18]. We assume, as in <ref> [14] </ref>, that from every quadtree solution element all sources of irradiance there may be found, and that relevant blockers are associated with all source-receiver links. For each receiver element and its links, we identify the curves of irradiance discontinuity on the element. <p> The underlying radiosity solver is a reimplementation, in C++, of the hierarchical radiosity and wavelet radiosity algorithms described in <ref> [14, 11, 26] </ref>.
Reference: [15] <author> Heckbert, P. </author> <title> Discontinuity Meshing for Radiosity. </title> <booktitle> Third Eurographics Workshop on Rendering (May 1992), </booktitle> <pages> 203-226. </pages>
Reference-contexts: Irradiance data structure. We use the idea of a per-surface data structure which approximates spatially varying irradiance [27, 19, 20, 3]. Discontinuity identification. Our algorithms explicitly identify irradiance discontinuities in order to improve the visual fidelity of the computed solution, as have <ref> [4, 15, 22, 20, 25, 8] </ref>. Hardware acceleration of object-space computations. As did the "hemi-cube" [7], "two-pass" [23], and "3D painting" [13] algorithms, we use fast graphics hardware to discretize and accelerate object space computations. Backprojection of occluders. <p> Since smooth interpolants do not perform well in the presence of discontinuities, researchers have proposed the construction of "discontinuity meshes," in which the solution elements (i.e., function domains) are explicitly meshed, in order to introduce boundary curves wherever discontinuities are detected <ref> [4, 19, 15, 20, 22, 25, 3, 8] </ref>. Once discontinuities have been banished from the interior of the element, a smooth interpolant can be fit, although for non-trivial domains this requires some fairly complex geometric and topological infrastructure [22, 19, 18]. <p> For each receiver element and its links, we identify the curves of irradiance discontinuity on the element. This is done by considering all edge-edge (EE) and vertex-edge (VE) pairs drawn from among the light source and blockers, as in <ref> [15, 20] </ref>. Currently, we ignore triple-edge (EEE) critical surfaces as these generally have a weak visual effect. A general quadtree element, attempting to capture irradiance due to a multi-sided light source shining past some number of blockers, may intersect many discontinuity surfaces.
Reference: [16] <author> Holzschuch, N., and Sillion, F. </author> <title> Accurate Computation of the Radiosity Gradient for Constant and Linear Emitters. </title> <booktitle> In Rendering Techniques '95 (Proceedings of the Sixth Eurographics Workshop on Rendering) (New York, </booktitle> <year> 1995), </year> <editor> P. M. Hanrahan and W. Purgathofer, Eds., </editor> <publisher> Springer-Verlag, </publisher> <pages> pp. 186-195. </pages>
Reference-contexts: This paper introduces several new ideas and techniques, among them: Discontinuity ordering. We select from a collection of irradiance discontinuities via a heuristic estimate of their relative strengths at the receiver. Although our irradiance gradient is heuristic, it is less computationally intricate than those of <ref> [16, 27, 3] </ref>. Moreover, both discontinuities caused by emitters and reemitters are handled. Hybrid mesh structures. Quadtrees are fundamentally unable to model general domains, except by a sort of generalized (and aliasing-prone) binary subdivision.
Reference: [17] <author> Kirk, D., and Voorhies, D. </author> <title> The rendering architecture of the DN10000VS. </title> <journal> Computer Graphics (Proc. </journal> <volume> Sig-graph '90) 24, 4 (1990), </volume> <pages> 299-307. </pages>
Reference-contexts: Although higher-order geometry primitives exist on some architectures [21], even these polygonalize, then Gouraud interpolate over, the interiors of the resulting triangles. Graphics hardware architectures that perform higher-order shading have been built <ref> [9, 17] </ref>, but are not widely available. These facts partially explain why many of the beautiful images published in the global illumination literature (e.g., [19]) are produced by ray-casting algorithms which, at each pixel, identify surface points to be shaded, then compute analytical irradiance values there with an object-space algorithm.
Reference: [18] <author> Lischinski, D. </author> <title> Incremental Delaunay Triangulation. In Graphics Gems IV, </title> <editor> P. Heckbert, Ed. AP Professional, </editor> <year> 1994, </year> <pages> pp. 47-59. </pages>
Reference-contexts: Once discontinuities have been banished from the interior of the element, a smooth interpolant can be fit, although for non-trivial domains this requires some fairly complex geometric and topological infrastructure <ref> [22, 19, 18] </ref>. We assume, as in [14], that from every quadtree solution element all sources of irradiance there may be found, and that relevant blockers are associated with all source-receiver links. For each receiver element and its links, we identify the curves of irradiance discontinuity on the element.
Reference: [19] <author> Lischinski, D., Tampieri, F., and Greenberg, D. P. </author> <title> Discontinuity Meshing for Accurate Radiosity. </title> <journal> IEEE Computer Graphics and Applications 12, </journal> <volume> 6 (1992), </volume> <pages> 25-39. </pages>
Reference-contexts: Graphics hardware architectures that perform higher-order shading have been built [9, 17], but are not widely available. These facts partially explain why many of the beautiful images published in the global illumination literature (e.g., <ref> [19] </ref>) are produced by ray-casting algorithms which, at each pixel, identify surface points to be shaded, then compute analytical irradiance values there with an object-space algorithm. <p> We assume that these algorithms converge to an accurate radiosity solution, but do not consider convergence or solver accuracy issues here. Irradiance data structure. We use the idea of a per-surface data structure which approximates spatially varying irradiance <ref> [27, 19, 20, 3] </ref>. Discontinuity identification. Our algorithms explicitly identify irradiance discontinuities in order to improve the visual fidelity of the computed solution, as have [4, 15, 22, 20, 25, 8]. Hardware acceleration of object-space computations. <p> For each (quadtree) solution element, we rank the discontinuities affecting the element and select those with the strongest effect on the receiver. These discontinuity segments form the input to a constrained Delaunay triangulation algorithm <ref> [19] </ref>, which produces a triangulation containing the segments, along with adjacency information about the triangles. <p> Since smooth interpolants do not perform well in the presence of discontinuities, researchers have proposed the construction of "discontinuity meshes," in which the solution elements (i.e., function domains) are explicitly meshed, in order to introduce boundary curves wherever discontinuities are detected <ref> [4, 19, 15, 20, 22, 25, 3, 8] </ref>. Once discontinuities have been banished from the interior of the element, a smooth interpolant can be fit, although for non-trivial domains this requires some fairly complex geometric and topological infrastructure [22, 19, 18]. <p> Once discontinuities have been banished from the interior of the element, a smooth interpolant can be fit, although for non-trivial domains this requires some fairly complex geometric and topological infrastructure <ref> [22, 19, 18] </ref>. We assume, as in [14], that from every quadtree solution element all sources of irradiance there may be found, and that relevant blockers are associated with all source-receiver links. For each receiver element and its links, we identify the curves of irradiance discontinuity on the element. <p> (The minimum weight criteria avoids expending computational effort meshing solution elements which are impinged upon only by weak discontinuities.) This identifying and ranking scheme for discontinuities impinging on each quadtree leaf satisfies requirement (2) of the high fidelity rendering algorithm. 5 Accurate Point Irradiance In the spirit of "two-pass" methods <ref> [23, 19] </ref>, we use the coarse hierarchical radiosity solution to compute more accurate radiosity values at specific points on the geometry. For a point x, we compute the point-to-polygon form factors from x to all sources visible from x [6].
Reference: [20] <author> Lischinski, D., Tampieri, F., and Greenberg, D. P. </author> <title> Combining Hierarchical Radiosity and Discontinuity Meshing. </title> <journal> Computer Graphics (Proc. </journal> <note> Siggraph '93) 27 (1993). </note>
Reference-contexts: We assume that these algorithms converge to an accurate radiosity solution, but do not consider convergence or solver accuracy issues here. Irradiance data structure. We use the idea of a per-surface data structure which approximates spatially varying irradiance <ref> [27, 19, 20, 3] </ref>. Discontinuity identification. Our algorithms explicitly identify irradiance discontinuities in order to improve the visual fidelity of the computed solution, as have [4, 15, 22, 20, 25, 8]. Hardware acceleration of object-space computations. <p> Irradiance data structure. We use the idea of a per-surface data structure which approximates spatially varying irradiance [27, 19, 20, 3]. Discontinuity identification. Our algorithms explicitly identify irradiance discontinuities in order to improve the visual fidelity of the computed solution, as have <ref> [4, 15, 22, 20, 25, 8] </ref>. Hardware acceleration of object-space computations. As did the "hemi-cube" [7], "two-pass" [23], and "3D painting" [13] algorithms, we use fast graphics hardware to discretize and accelerate object space computations. Backprojection of occluders. <p> Since smooth interpolants do not perform well in the presence of discontinuities, researchers have proposed the construction of "discontinuity meshes," in which the solution elements (i.e., function domains) are explicitly meshed, in order to introduce boundary curves wherever discontinuities are detected <ref> [4, 19, 15, 20, 22, 25, 3, 8] </ref>. Once discontinuities have been banished from the interior of the element, a smooth interpolant can be fit, although for non-trivial domains this requires some fairly complex geometric and topological infrastructure [22, 19, 18]. <p> For each receiver element and its links, we identify the curves of irradiance discontinuity on the element. This is done by considering all edge-edge (EE) and vertex-edge (VE) pairs drawn from among the light source and blockers, as in <ref> [15, 20] </ref>. Currently, we ignore triple-edge (EEE) critical surfaces as these generally have a weak visual effect. A general quadtree element, attempting to capture irradiance due to a multi-sided light source shining past some number of blockers, may intersect many discontinuity surfaces.
Reference: [21] <author> Neider, J., Davis, T., and Woo, M. </author> <title> OpenGL Programming Guide. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: In these interactively rendered sequences, however, the surface geometry is a collection of polygons, and the surface shading is a screen-space linear interpolation of a function whose value is specified at three points (typically, the vertices of a triangle) [2]. Although higher-order geometry primitives exist on some architectures <ref> [21] </ref>, even these polygonalize, then Gouraud interpolate over, the interiors of the resulting triangles. Graphics hardware architectures that perform higher-order shading have been built [9, 17], but are not widely available.
Reference: [22] <author> Salesin, D., Lischinski, D., and DeRose, T. </author> <title> Reconstructing Illumination Functions with Selected Discontinuities. </title> <booktitle> In Proc. 3 rd Eurographics Workshop on Rendering (May 1992), </booktitle> <pages> pp. 99-112. </pages>
Reference-contexts: Irradiance data structure. We use the idea of a per-surface data structure which approximates spatially varying irradiance [27, 19, 20, 3]. Discontinuity identification. Our algorithms explicitly identify irradiance discontinuities in order to improve the visual fidelity of the computed solution, as have <ref> [4, 15, 22, 20, 25, 8] </ref>. Hardware acceleration of object-space computations. As did the "hemi-cube" [7], "two-pass" [23], and "3D painting" [13] algorithms, we use fast graphics hardware to discretize and accelerate object space computations. Backprojection of occluders. <p> Since smooth interpolants do not perform well in the presence of discontinuities, researchers have proposed the construction of "discontinuity meshes," in which the solution elements (i.e., function domains) are explicitly meshed, in order to introduce boundary curves wherever discontinuities are detected <ref> [4, 19, 15, 20, 22, 25, 3, 8] </ref>. Once discontinuities have been banished from the interior of the element, a smooth interpolant can be fit, although for non-trivial domains this requires some fairly complex geometric and topological infrastructure [22, 19, 18]. <p> Once discontinuities have been banished from the interior of the element, a smooth interpolant can be fit, although for non-trivial domains this requires some fairly complex geometric and topological infrastructure <ref> [22, 19, 18] </ref>. We assume, as in [14], that from every quadtree solution element all sources of irradiance there may be found, and that relevant blockers are associated with all source-receiver links. For each receiver element and its links, we identify the curves of irradiance discontinuity on the element.
Reference: [23] <author> Sillion, F. X., and Puech, C. </author> <title> A General Two-Pass Method Integrating Specular and Diffuse Reflection. </title> <booktitle> In Computer Graphics (SIGGRAPH '89 Proceedings) (July 1989), </booktitle> <editor> J. Lane, Ed., </editor> <volume> vol. 23, </volume> <pages> pp. 335-344. </pages>
Reference-contexts: Discontinuity identification. Our algorithms explicitly identify irradiance discontinuities in order to improve the visual fidelity of the computed solution, as have [4, 15, 22, 20, 25, 8]. Hardware acceleration of object-space computations. As did the "hemi-cube" [7], "two-pass" <ref> [23] </ref>, and "3D painting" [13] algorithms, we use fast graphics hardware to discretize and accelerate object space computations. Backprojection of occluders. We use the notion of "backprojection" for the computation of accurate source-to-point irradiance in the presence of occluders [8]. <p> (The minimum weight criteria avoids expending computational effort meshing solution elements which are impinged upon only by weak discontinuities.) This identifying and ranking scheme for discontinuities impinging on each quadtree leaf satisfies requirement (2) of the high fidelity rendering algorithm. 5 Accurate Point Irradiance In the spirit of "two-pass" methods <ref> [23, 19] </ref>, we use the coarse hierarchical radiosity solution to compute more accurate radiosity values at specific points on the geometry. For a point x, we compute the point-to-polygon form factors from x to all sources visible from x [6].
Reference: [24] <author> Smits, B., Arvo, J., and Greenberg, D. </author> <title> A Clustering Algorithm for Radiosity in Complex Environments. </title> <journal> Computer Graphics (Proc. </journal> <note> Siggraph '94) 28 (1994). </note>
Reference-contexts: Clustering techniques such as <ref> [24] </ref> ameliorate this disadvantage somewhat, but still do not drive subdivision based on representation error, a quantity which global illumination algorithms strive to minimize.
Reference: [25] <author> Teller, S. </author> <title> Computing the Antipenumbra Cast by an Area Light Source. </title> <journal> Computer Graphics (Proc. </journal> <volume> Sig-graph '92) 26, 2 (1992), </volume> <pages> 139-148. </pages>
Reference-contexts: Irradiance data structure. We use the idea of a per-surface data structure which approximates spatially varying irradiance [27, 19, 20, 3]. Discontinuity identification. Our algorithms explicitly identify irradiance discontinuities in order to improve the visual fidelity of the computed solution, as have <ref> [4, 15, 22, 20, 25, 8] </ref>. Hardware acceleration of object-space computations. As did the "hemi-cube" [7], "two-pass" [23], and "3D painting" [13] algorithms, we use fast graphics hardware to discretize and accelerate object space computations. Backprojection of occluders. <p> Since smooth interpolants do not perform well in the presence of discontinuities, researchers have proposed the construction of "discontinuity meshes," in which the solution elements (i.e., function domains) are explicitly meshed, in order to introduce boundary curves wherever discontinuities are detected <ref> [4, 19, 15, 20, 22, 25, 3, 8] </ref>. Once discontinuities have been banished from the interior of the element, a smooth interpolant can be fit, although for non-trivial domains this requires some fairly complex geometric and topological infrastructure [22, 19, 18].
Reference: [26] <author> Teller, S., and Hanrahan, P. </author> <title> Global Visibility Algorithms for Illumination Computations. </title> <booktitle> Computer Graphics (Proc. Siggraph '93) 27 (1993), </booktitle> <pages> 239-246. </pages>
Reference-contexts: We assume that a hierarchical radiosity solution method is in use, which produces as output a discretization of the input into elements annotated by radiosity values, and an organization of interactions between elements into links annotated by blockers (as in <ref> [14, 26] </ref>). From interactions among the blockers and light sources, we rank irradiance discontinuities by their strength on the receiver, and select the strongest. The selected discontinuities partition each solution element into disjoint regions, inside each of which none of the (selected) discontinuities can be present. <p> Our prototype implementation simultaneously captures global lighting effects and evaluates superlinear radiosity interpolants at interactive rates. 1.3 Algorithmic Foundations Our algorithms and implementation build upon several ideas and techniques from the literature: Hierarchical radiosity. We adopt the algorithms of <ref> [14, 11, 12, 26] </ref> and use them as a hierarchical radiosity solver. We assume that these algorithms converge to an accurate radiosity solution, but do not consider convergence or solver accuracy issues here. Irradiance data structure. <p> Our implementation uses four processors (RISC R4400s running at 250 MHz), shared memory for communication between processes, and hardware locks for synchronization. 3 Radiosity Solution The underlying radiosity solver is a reimplementation of the hierarchical radiosity and wavelet radiosity algorithms described in <ref> [14, 11, 26] </ref>. Solving the global pass of the radiosity solution provides us with * A quadtree subdivision of the input geometry; * A radiosity value for each quadtree node; * A "link" representing each element-element interaction; * A set of "blockers" for each link. <p> The underlying radiosity solver is a reimplementation, in C++, of the hierarchical radiosity and wavelet radiosity algorithms described in <ref> [14, 11, 26] </ref>.
Reference: [27] <author> Ward, G. J., and Heckbert, P. </author> <title> Irradiance Gradients. </title> <booktitle> Third Eurographics Workshop on Rendering (May 1992), </booktitle> <month> 85-98. </month> <title> Triangle identifiers (Hardt and Teller, Color Plate A). Barycentric coordinates (Hardt and Teller, Color Plate B). Quadratic interpolant rendering (Hardt and Teller, Color Plate C). One frame of an interactive viewing session. (Hardt and Teller, Color Plate D). </title>
Reference-contexts: We assume that these algorithms converge to an accurate radiosity solution, but do not consider convergence or solver accuracy issues here. Irradiance data structure. We use the idea of a per-surface data structure which approximates spatially varying irradiance <ref> [27, 19, 20, 3] </ref>. Discontinuity identification. Our algorithms explicitly identify irradiance discontinuities in order to improve the visual fidelity of the computed solution, as have [4, 15, 22, 20, 25, 8]. Hardware acceleration of object-space computations. <p> This paper introduces several new ideas and techniques, among them: Discontinuity ordering. We select from a collection of irradiance discontinuities via a heuristic estimate of their relative strengths at the receiver. Although our irradiance gradient is heuristic, it is less computationally intricate than those of <ref> [16, 27, 3] </ref>. Moreover, both discontinuities caused by emitters and reemitters are handled. Hybrid mesh structures. Quadtrees are fundamentally unable to model general domains, except by a sort of generalized (and aliasing-prone) binary subdivision.
References-found: 27

