URL: ftp://ftp.cs.washington.edu/tr/1993/05/UW-CSE-93-05-04.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Title: Minimizing the Effect of Clock Skew Via Circuit Retiming 1  
Author: Brian Lockyear and Carl Ebeling 
Note: Carl Ebeling is supported in part by an NSF Presidential Young Investigator Award with matching funds provided by IBM  
Address: Seattle, Washington 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  Corporation and Sun Microsystems.  
Abstract: Technical Report 93-5-04 May, 1992 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Burns. </author> <title> Performance Analysis and Optimization of Asynchronous Circuits. </title> <type> PhD thesis, </type> <institution> California Institute of Technology, </institution> <year> 1991. </year> <month> Caltech-CS-TR-91-01. </month>
Reference-contexts: Thus required setup time S does not appear as a parameter in cycle constraints. Using a maximum-ratio-cycle algorithm such as the one in <ref> [1] </ref> we solve for the maximum value of d (c) over all circuit cycles. This in turn identifies the critical cycle bound, or the minimum possible value of T to which the circuit can be retimed.
Reference: [2] <author> J. P. Fishburn. </author> <title> Clock skew optimization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(7) </volume> <pages> 945-951, </pages> <year> 1990. </year> <title> Correspondence. </title>
Reference-contexts: Finally, Section 7 shows how fixed clock skew can be used to actually increase the performance of an edge-clocked circuit. In a technique closely related to circuit retiming presented by Fishburn in <ref> [2] </ref>, 2 We will use the term synchronizer when referring to either registers or latches. 2 delay elements are placed in the clock distribution network to intentionally skew the clock and allow longer computational delay between selected registers at the expense of reduced delay between others. <p> Retiming using clock skew allows the "virtual" movement of registers on a finer grain than the usual retiming <ref> [2] </ref>. Using the two techniques together allows the greatest flexibility in synchronizer placement and potentially faster circuit designs. Particularly interesting is the resulting ability of edge-triggered circuits to achieve speeds comparable to level-clocked designs. We describe here an algorithm for combined retiming of edge-triggered circuits.
Reference: [3] <author> A. T. Ishii, C. E. Leiserson, and M. C. Papaefthymiou. </author> <title> Optimizing two-phase, </title> <booktitle> level-clocked circuitry. In Advanced Research in VLSI and Parallel Systems: Proc. of the Brown/MIT Conference, </booktitle> <pages> pages 245-264, </pages> <year> 1992. </year>
Reference-contexts: This early work was limited to circuits using edge-triggered registers. However, high-performance systems make wide use of level-sensitive latches to allow computations to borrow time across clock cycle boundaries. Only recently have efficient algorithms for retiming been described for these level-clocked circuits <ref> [7, 3] </ref>. In this paper we extend retiming to handle the problem of clock skew in both edge-clocked and level-clocked circuits. Clock skew slows down circuits by reducing the time available for computation and in some cases it may cause race conditions. <p> We make the simplifying assumption that P and S are the same for all synchronizers in the circuit. Algorithms for asymmetric level-clocked circuits in <ref> [7, 3] </ref> could be extended to solve problems in which propagation delays and setup requirements vary with physical placement of synchronizers, with the exception of propagation delay in level-clocked circuits, a limitation discussed in Section 5. 4 Clock Skew in Edge-Triggered Circuits This section incorporates the parameters of clock skew, register <p> ILP constraints are now formed as r (u) r (v) W (u; v) L (u; v): Mixed-ILP constraints may also be formed and the more efficient solution technique (O (jV j 2 log jV j)) for them used <ref> [3] </ref>.
Reference: [4] <author> C. E. Leiserson, F. Rose, and J. B. Saxe. </author> <title> Optimizing synchronous circuitry by retiming. </title> <booktitle> In Proc. of the 3rd Caltech Conference on VLSI, </booktitle> <month> Mar. </month> <year> 1983. </year>
Reference-contexts: While retiming has long been an ad hoc technique used in design, it was not until 1983 that an efficient algorithm was reported for automatically retiming circuits <ref> [4] </ref>. In this work, Leiserson, Rose and Saxe formalized retiming as an optimization technique that improved the performance of a circuit without changing its external behavior. This early work was limited to circuits using edge-triggered registers. <p> The remainder of the paper describes four related results. Section 4 first describes the relatively straightforward extension to retiming that adds clock skew to the edge-triggered circuit model and retiming algorithms developed by <ref> [4] </ref>. Section 5 then extends our level-clocked retiming algorithms [7] to incorporate clock skew as well. In neither case does the inclusion of clock skew increase the asymptotic time complexity of the algorithms. <p> We present here our preliminary work on combining retiming with intentional clock skew to produce faster circuits than can be produced with either technique used alone. 2 Background We begin this paper with a review of the circuit and clock models presented in <ref> [4, 7] </ref> for edge-triggered and level-clocked circuits. The reader is encouraged to read these earlier papers for full details. 2.1 Circuit Graph Model A circuit is represented as a graph with a vertex, v, for each functional element and an edge, u e each interconnecting wire. <p> setup requirements vary with physical placement of synchronizers, with the exception of propagation delay in level-clocked circuits, a limitation discussed in Section 5. 4 Clock Skew in Edge-Triggered Circuits This section incorporates the parameters of clock skew, register propagation delay and setup time into the edge-triggered timing algorithms developed in <ref> [4] </ref>. While this is a relatively simple extension of the previous work, it provides the necessary first step towards algorithms which combine retiming and intentional clock skew (Section 7) and a basis of understanding for the effects of skew on level-clocked circuits. <p> Because propagation delay, setup and skew are unaffected by selection of the path joining u and v, a critical path p remains one with maximum delay of all paths with minimum weight as identified in <ref> [4] </ref>. W (u; v) and D (u; v) are defined as the weight and delay of critical paths. <p> All other edges have fixed skew of 0 and * = 0. Unlike the original circuit from <ref> [4] </ref>, cross-host timing constraints are prevented by assuming that a pair of registers are hidden inside the host vertex. Thus the circuit is acyclic. <p> In Figure 10 includes timing constraint across the host vertex resulting in cycles which limit the minimum clock period to 10. Level-clocked circuits are able to achieve this bound [7], while edge-triggered retimings without delayed clock signals are have a minimum period of T = 13 <ref> [4] </ref>.
Reference: [5] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Retiming synchronous circuitry. </title> <journal> Algorithmica, </journal> <volume> 6(1) </volume> <pages> 5-35, </pages> <year> 1991. </year> <note> Also available as MIT/LCS/TM-372. </note>
Reference-contexts: The retiming constraints presented in Theorem 1 are in the form of an Integer Linear Program (ILP) and may be solved directly using the Bellman-Ford technique or translated to a form solvable using the Mixed-ILP or Feas algorithms presented in <ref> [5] </ref>. <p> A binary search over this set identifies the optimum clock period. The minimum period and a retiming to it may be found in O (jV j 2 log jV j) time by using the simple Feas algorithm from <ref> [5] </ref> for constraint solution. of = 1. All other edges have fixed skew of 0 and * = 0. Unlike the original circuit from [4], cross-host timing constraints are prevented by assuming that a pair of registers are hidden inside the host vertex. Thus the circuit is acyclic. <p> Thus the overall number of constraints is O (jV j 2 jEj jV j ). Real circuit graphs are typically sparse and jEj jV j = O (1), resulting in a linear increase in the expected running time of the algorithm. The Mixed-ILP and Feas algorithms presented in <ref> [5] </ref> may also be modified to solve these problems with a linear increase in expected running time. 8 Summary We have presented in this paper techniques for including clock skew parameters in the retiming algorithms for both edge-clocked and level-clocked circuits.
Reference: [6] <author> B. E. Lockyear and C. Ebeling. </author> <title> Retiming of multi-phase, level-clocked circuits. </title> <type> Technical Report 91-10-1, </type> <institution> University of Washington, Dept. of Computer Science, </institution> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: For each path p and edge e 2 fanin (u), a constraint is written: (r (u) -(e)) (r (v) + -(v)) W (u; v) T Our algorithm uses an extension of the reversed Bellman-Ford (RevBF) relaxation technique <ref> [6] </ref> to solve constraint sets of the form in Eqn. 7.
Reference: [7] <author> B. E. Lockyear and C. Ebeling. </author> <title> Retiming of multi-phase, </title> <booktitle> level-clocked circuits. In Advanced Research in VLSI and Parallel Systems: Proc. of the Brown/MIT Conference, </booktitle> <pages> pages 265-280, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: This early work was limited to circuits using edge-triggered registers. However, high-performance systems make wide use of level-sensitive latches to allow computations to borrow time across clock cycle boundaries. Only recently have efficient algorithms for retiming been described for these level-clocked circuits <ref> [7, 3] </ref>. In this paper we extend retiming to handle the problem of clock skew in both edge-clocked and level-clocked circuits. Clock skew slows down circuits by reducing the time available for computation and in some cases it may cause race conditions. <p> The remainder of the paper describes four related results. Section 4 first describes the relatively straightforward extension to retiming that adds clock skew to the edge-triggered circuit model and retiming algorithms developed by [4]. Section 5 then extends our level-clocked retiming algorithms <ref> [7] </ref> to incorporate clock skew as well. In neither case does the inclusion of clock skew increase the asymptotic time complexity of the algorithms. These two sections show that fixed clock skew can be treated as modifying the delay of circuit elements. <p> We present here our preliminary work on combining retiming with intentional clock skew to produce faster circuits than can be produced with either technique used alone. 2 Background We begin this paper with a review of the circuit and clock models presented in <ref> [4, 7] </ref> for edge-triggered and level-clocked circuits. The reader is encouraged to read these earlier papers for full details. 2.1 Circuit Graph Model A circuit is represented as a graph with a vertex, v, for each functional element and an edge, u e each interconnecting wire. <p> Non-interference: A m = D l + d (p) E P (l);P (m) &gt; t hold These constraints assume that clock skew, synchronizer propagation delay and setup time are all zero. These parameters will be added later in this paper. The retiming techniques in <ref> [7] </ref> restrict the type of clocks and circuits that can be retimed. Clock schedules must be "valid" so that only maximum delay constraints need to be satisfied for correct operation. Valid clock schedules do not allow races to occur even if all circuit delays are zero. <p> We make the simplifying assumption that P and S are the same for all synchronizers in the circuit. Algorithms for asymmetric level-clocked circuits in <ref> [7, 3] </ref> could be extended to solve problems in which propagation delays and setup requirements vary with physical placement of synchronizers, with the exception of propagation delay in level-clocked circuits, a limitation discussed in Section 5. 4 Clock Skew in Edge-Triggered Circuits This section incorporates the parameters of clock skew, register <p> Lemma 5 provides a characteristic of critical paths which allows them to be identified using an all-pairs-shortest-paths algorithm. Lemma 5: (modified from Lemma 5.5 <ref> [7] </ref>) A path u p !! v in a well-formed circuit is a critical path iff: k k q Proof sketch. Clock skew and setup time reduce the slack equally along all paths between two vertices, and thus do not affect which path is critical. <p> The formulation may also be extended for unequal phase schedules as shown in <ref> [7] </ref> and solved using extensions to the Bellman-Ford algorithm in O (k jV j 3 ) time. 11 6 Making Circuits Robust to Parameter Variations Retiming is usually cast as a way to find the minimum clock period for a circuit, but often the problem is to meet some goal clock <p> Figures 10 and 11 provide two correlator circuit examples of edge-triggered circuits with intentional clock skew. In Figure 10 includes timing constraint across the host vertex resulting in cycles which limit the minimum clock period to 10. Level-clocked circuits are able to achieve this bound <ref> [7] </ref>, while edge-triggered retimings without delayed clock signals are have a minimum period of T = 13 [4].
Reference: [8] <author> K. A. Sakallah, T. N. Mudge, and O. A. Olukotun. </author> <title> Analysis and design of latch-controlled synchronous circuits. </title> <booktitle> In Proc. 27th ACM-IEEE Design Automation Conf., </booktitle> <year> 1990. </year> <month> 16 </month>
Reference-contexts: The resulting weight of an edge u ! v in the retimed graph is: w r (e) = w (e) + r (v) r (u). 2.2 Clock Model For our retiming work we have adopted the clock model of Sakallah, Mudge & Olukotun <ref> [8] </ref> which provides a convenient way to describe the resulting timing constraints. A k-phase clock is a set of k periodic signals, = f 1 : : : k g, where i is phase i of the clock . All i have a common cycle time T .
References-found: 8

