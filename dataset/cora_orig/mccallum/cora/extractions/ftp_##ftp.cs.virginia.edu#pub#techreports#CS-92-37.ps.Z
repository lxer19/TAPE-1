URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-92-37.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: High-Performance Routing Trees With Identified Critical Sinks  
Author: Kenneth D. Boese, Andrew B. Kahng, Gabriel Robins 
Abstract: Technical Report No. CS-92-37 November 1, 1992 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. J. Alpert, T. C. Hu, J. H. Huang and A. B. Kahng, </author> <title> "A Direct Combination of the Prim and Dijkstra Constructions for Improved Performance-Driven Global Routing", </title> <type> technical report CSD-920051, </type> <institution> UCLA Department of Computer Science, </institution> <year> 1992. </year>
Reference-contexts: For a typical MCM technology, the corresponding improvements are 42% and 22%. This represents a significant advance over every existing performance-driven routing tree construction in the literature, including such recent works as <ref> [1] </ref> [4] [5] [20]. 2 High-Performance Routing Tree Design In our discussion, we say that a signal net N consists of a set of pins or terminals which are to be connected by a routing tree T (N ) in the Manhattan plane. <p> The radius-cost tradeoff may also be viewed as one between (i) the shortest-path tree (SPT) construction [6], wherein all source-sink paths are as short as possible, and (ii) the minimum spanning tree (MST) or minimum Steiner tree construction, which has minimum cost. Using this perspective, Alpert et al. <ref> [1] </ref> 1 Formulations which prescribe exact and/or relative delay bounds often require iterative tree constructions to satisfy these bounds, particularly when the bounds are ill-chosen (e.g., due to incomplete information about the layout) and must be revised. <p> In view of the superior performance of the AHHK algorithm, we will compare our new methods against AHHK in Section 4 below. AHHK Algorithm: MST-SPT tradeoff of <ref> [1] </ref> Input: signal net N with source n 0 2 N , tradeoff parameter c, 0 c 1 Output: routing tree T over N 1. <p> In this subsection, we develop intuitions regarding the 2 The authors of <ref> [1] </ref> note the following: (1) Dijkstra's SPT algorithm [6] begins with the trivial tree consisting only of the source n 0 , and then iteratively adds the edge e ij and the node n i to the growing T , where n i and n j are chosen to minimize l <p> be "shifted" toward the source n 0 . (In Steiner trees, the tree on the right has less signal delay at n c .) 5 The analysis for small driver resistance is increasingly appropriate, e.g., with multi-chip module interconnects; our intuition supports the use of such radius-cost tradeoffs as in <ref> [1] </ref> [3] [5]; also cf. the Steiner tree formulation of [21]. The analysis for large n 0 0 -n 0 wirelength reflects the previous generation of IC technologies and confirms the use of minimum Steiner and spanning tree constructions in existing global routers. <p> This simultaneous consideration of radius and cost parameters recalls the motivations in <ref> [1] </ref> [3] [5], but here the tradeoff is formulated with respect to the critical sink n c . We thus obtain a simple heuristic to address the CSRT problem. Our basic algorithm, which we call CS-Steiner, is shown in Figure 4. <p> In a sense, the CS-Steiner method resembles setting R c = d 0c and * c = 0 in this latter scheme, but our construction greatly simplifies due to the assumption of * i 2 f0; 1g 8i. It should be noted that the AHHK method <ref> [1] </ref> cannot be extended to address the CSRT formulation at all. 7 We also studied two additional variants. Variant H2 modifies Step 1 of CS-Steiner so that the initial heuristic tree T 0 is constructed over the entire net N . <p> Delay simulation results are presented in Table 3. For purposes of comparison, the table includes data from the minimum spanning tree, AHHK tree (quoted from <ref> [1] </ref>, and 1-Steiner tree constructions. Our results show that even as generic net-dependent routers, the ERT methods we propose are highly effective, beyond their relative efficiency and ease of implementation. <p> Note also that timing-driven placement algorithms may tend to place the critical sink n c close to the source. 14 of H1+U output versus a heuristic minimum-cost SPT; this SPT is shown in the figure. in <ref> [1] </ref> simulates delays for output trees for 21 different values of the c parameter, and then chooses the best tree found for each signal net instance. The Steiner tree version of our ERT method also performs well as a generic high-performance router. <p> Note that data for AHHK are quoted from <ref> [1] </ref> and are computed using values relative to MST for the same technology parameters: a small error is possible since the respective works did not use the exact same sets of 50 random nets. versus 1-Steiner are qualitatively the same as for the HBest algorithm in Table 2. <p> There are also interesting extensions of the CS-Steiner and ERT algorithms to general-cell layout with arbitrary routing region costs. Finally, we leave as an open problem the reduction in time complexity of the ERT constructions. 6 Acknowledgements We are grateful to the authors of <ref> [1] </ref> for providing an early version of their manuscript, as well as to the authors of [28] [29] for use of their simulator code. 19 Appendix: Global Slack Removal Recall from Section 3.1 that Global Slack Removal (GSR) is a linear-time postprocessing enhancement to the CS-Steiner approach.
Reference: [2] <author> B. Awerbuch, A. Baratz and D. Peleg, </author> <title> "Cost-Sensitive Analysis of Communication Protocols", </title> <booktitle> Proc. ACM Symp. on Principles of Distributed Computing, </booktitle> <year> 1990, </year> <pages> pp. 177-187. </pages>
Reference-contexts: Later, Cong et al. [5] proposed the "provably good" BRBC (bounded-radius, bounded-cost) algorithm, which afforded both radius and cost simultaneously within constant factors of optimal. The BRBC method, along with the work of Awerbuch et al. <ref> [2] </ref> and Khuller et al. [14], belongs to the class of what have been called "shallow/light" tree constructions.
Reference: [3] <author> J. P. Cohoon and L. J. Randall, </author> <title> "Critical Net Routing", </title> <booktitle> Proc. IEEE Intl. Conf. on Computer Design, </booktitle> <year> 1991, </year> <pages> pp. 174-177. </pages>
Reference-contexts: signal delay to constrain the construction, as we discuss below); and (ii) it was one of the first works to allow prescribed upper bounds on the individual t (n i ), an increasingly well-studied formulation which is somewhat orthogonal to the CSRT problem above. 1 In 1991, Cohoon and Randall <ref> [3] </ref> proposed a heuristic which tried to simultaneously reduce both the longest source-sink pathlength of the routing tree (which we call the tree radius) as well as the total edge length in the tree (i.e., the tree cost). <p> "shifted" toward the source n 0 . (In Steiner trees, the tree on the right has less signal delay at n c .) 5 The analysis for small driver resistance is increasingly appropriate, e.g., with multi-chip module interconnects; our intuition supports the use of such radius-cost tradeoffs as in [1] <ref> [3] </ref> [5]; also cf. the Steiner tree formulation of [21]. The analysis for large n 0 0 -n 0 wirelength reflects the previous generation of IC technologies and confirms the use of minimum Steiner and spanning tree constructions in existing global routers. <p> This simultaneous consideration of radius and cost parameters recalls the motivations in [1] <ref> [3] </ref> [5], but here the tradeoff is formulated with respect to the critical sink n c . We thus obtain a simple heuristic to address the CSRT problem. Our basic algorithm, which we call CS-Steiner, is shown in Figure 4.
Reference: [4] <author> J. Cong, A. B. Kahng, G. Robins, M. Sarrafzadeh, and C. K. Wong, </author> <title> "Performance-driven global routing for cell based IC's", </title> <booktitle> Proc. Intl. Conf. on Computer Design, </booktitle> <pages> pp. 170-173, </pages> <year> 1991. </year>
Reference-contexts: For a typical MCM technology, the corresponding improvements are 42% and 22%. This represents a significant advance over every existing performance-driven routing tree construction in the literature, including such recent works as [1] <ref> [4] </ref> [5] [20]. 2 High-Performance Routing Tree Design In our discussion, we say that a signal net N consists of a set of pins or terminals which are to be connected by a routing tree T (N ) in the Manhattan plane. <p> A more general approach was given by Cong, Kahng, Robins, Sarrafzadeh and Wong <ref> [4] </ref>, wherein a parameter * is used to trade off between the radius and the cost of the routing tree: the longest source-sink distance is used as a lower bound R for the routing tree radius, and a low-cost routing tree with radius bounded by (1 + *) R is produced.
Reference: [5] <author> J. Cong, A. B. Kahng, G. Robins, M. Sarrafzadeh, and C. K. Wong, </author> <title> "Provably Good Performance-Driven Global Routing", </title> <journal> IEEE Trans. on CAD 11(6), </journal> <month> June </month> <year> 1992, </year> <pages> pp. 739-752. </pages>
Reference-contexts: For a typical MCM technology, the corresponding improvements are 42% and 22%. This represents a significant advance over every existing performance-driven routing tree construction in the literature, including such recent works as [1] [4] <ref> [5] </ref> [20]. 2 High-Performance Routing Tree Design In our discussion, we say that a signal net N consists of a set of pins or terminals which are to be connected by a routing tree T (N ) in the Manhattan plane. <p> Later, Cong et al. <ref> [5] </ref> proposed the "provably good" BRBC (bounded-radius, bounded-cost) algorithm, which afforded both radius and cost simultaneously within constant factors of optimal. The BRBC method, along with the work of Awerbuch et al. [2] and Khuller et al. [14], belongs to the class of what have been called "shallow/light" tree constructions. <p> is more conducive to the "one-shot" tree construction that may be desired in the global routing phase. 4 recently proposed the AHHK tree construction of Figure 2.1, which achieves a direct SPT-MST tradeoff. 2 They give simulation results showing that AHHK uniformly outperforms the BRBC method of Cong et al. <ref> [5] </ref> by averages of between 6.2% and 27.9% in terms of sink delay (this value depends on the net size, the interconnect technology, and whether average or maximum sink delay is considered). <p> toward the source n 0 . (In Steiner trees, the tree on the right has less signal delay at n c .) 5 The analysis for small driver resistance is increasingly appropriate, e.g., with multi-chip module interconnects; our intuition supports the use of such radius-cost tradeoffs as in [1] [3] <ref> [5] </ref>; also cf. the Steiner tree formulation of [21]. The analysis for large n 0 0 -n 0 wirelength reflects the previous generation of IC technologies and confirms the use of minimum Steiner and spanning tree constructions in existing global routers. <p> This simultaneous consideration of radius and cost parameters recalls the motivations in [1] [3] <ref> [5] </ref>, but here the tradeoff is formulated with respect to the critical sink n c . We thus obtain a simple heuristic to address the CSRT problem. Our basic algorithm, which we call CS-Steiner, is shown in Figure 4. <p> In particular, our use of a minimum spanning tree or heuristic minimum Steiner tree in Step 1 recalls the BRBC algorithm of <ref> [5] </ref>. Our consideration of only the n 0 -n c pathlength is similar to invoking BRBC with * = 0 for n c and * = 1 for all other sinks. Indeed, [5] describes an extension which permits differing * i values for each sink n i . <p> of a minimum spanning tree or heuristic minimum Steiner tree in Step 1 recalls the BRBC algorithm of <ref> [5] </ref>. Our consideration of only the n 0 -n c pathlength is similar to invoking BRBC with * = 0 for n c and * = 1 for all other sinks. Indeed, [5] describes an extension which permits differing * i values for each sink n i . However, the BRBC (1 + * i ) R radius bound is maintained with respect to the net radius R, which is a function of all sink locations.
Reference: [6] <author> E. W. Dijkstra, </author> <title> "A Note on Two Problems in Connection With Graphs", </title> <journal> Numerische Mathematik 1(1959), </journal> <pages> pp. 269-271. </pages>
Reference-contexts: The radius-cost tradeoff may also be viewed as one between (i) the shortest-path tree (SPT) construction <ref> [6] </ref>, wherein all source-sink paths are as short as possible, and (ii) the minimum spanning tree (MST) or minimum Steiner tree construction, which has minimum cost. <p> In this subsection, we develop intuitions regarding the 2 The authors of [1] note the following: (1) Dijkstra's SPT algorithm <ref> [6] </ref> begins with the trivial tree consisting only of the source n 0 , and then iteratively adds the edge e ij and the node n i to the growing T , where n i and n j are chosen to minimize l j + d ij s.t. n j 2
Reference: [7] <author> W. E. Donath, R. J. Norman, B. K. Agrawal, S. E. Bello, S. Y. Han, J. M. Kurtzberg, P. Lowy and R. I. McMillan, </author> <title> "Timing Driven Placement Using Complete Path Delays", </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1990, </year> <pages> pp. 84-89. 23 </pages>
Reference-contexts: 1 Introduction Due to the scaling of VLSI technology, interconnection delay has become a dominant concern in the design of complex, high-performance circuits <ref> [7, 25] </ref>. As a consequence, performance-driven layout design has become an active area of research over the past several years. <p> As a consequence, performance-driven layout design has become an active area of research over the past several years. Early work in this field centered on performance-driven placement, where timing-critical paths are determined by static timing analysis, and modules in these paths are then placed close together (see, e.g., <ref> [7, 10, 17, 18, 12, 25] </ref>). Later, a number of performance-driven interconnection algorithms were developed wherein for a given signal net, the typical objective is to minimize the average (or maximum) signal delay from the source pin to the sink pins. <p> We are also grateful for the support of Cadence Design Systems under the State of California MICRO program. 1 Existing performance-driven placement algorithms fall into two general classes: 1. Net-dependent placement algorithms typically use centroid-connected star cost [24], probabilistic estimates of Steiner tree cost [12], minimum spanning tree cost <ref> [7] </ref> or the bounding box semiperimeter [18] to estimate wire capacitance and signal delay for a multi-terminal net.
Reference: [8] <author> A. E. Dunlop, V. D. Agrawal, D. N. Deutsh, M. F. Jukl, P. Kozak and M. Wiesel, </author> <title> "Chip Layout Optimization Using Critical Path Weighting", </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1984, </year> <pages> pp. 133-136. </pages>
Reference-contexts: Much of the early work in performance-driven routing relied on the assumption that an optimal routing tree corresponds to the minimum Steiner tree over N . For example, the method of Dunlop et al. <ref> [8] </ref> uses static timing analysis to yield net priorities, so that the highest-priority nets may be routed by the minimum Steiner tree with no detours, while lower-priority nets may be routed by suboptimal Steiner trees due to possible routing blockages. <p> Choosing c = 0 yields an MST, while choosing c = 1 yields an SPT. Since the minimum Steiner tree is also a bona fide "performance-driven" routing tree (e.g., within the net prioritization scheme of Dunlop et al. <ref> [8] </ref> noted above), and moreover still enjoys widespread use, Section 4 further compares our new routing heuristics against minimum Steiner tree constructions.
Reference: [9] <author> W. C. </author> <title> Elmore, "The Transient Response of Damped Linear Network with Particular Regard to Wideband Amplifiers", </title> <editor> J. </editor> <booktitle> Applied Physics 19 (1948), </booktitle> <pages> pp. 55-63. </pages>
Reference-contexts: Kuh, Jackson and Marek-Sadowska [15] have given an approach tuned to hierarchical building-block layouts, and Prastjutrakul and Kubitz [20] use A* heuristic search [19] for a similar problem domain. The latter work stands out for two reasons: (i) it uses the Elmore delay formula <ref> [9] </ref> in its tree optimization (but then implicitly relies on a crude abstraction of signal delay to constrain the construction, as we discuss below); and (ii) it was one of the first works to allow prescribed upper bounds on the individual t (n i ), an increasingly well-studied formulation which is <p> Thus, the algorithm iteratively adds interior nodes (Steiner points) that afford the largest cost reduction in the spanning tree over N [ S. "correct" objectives for critical-sink routing trees, via Elmore's formula <ref> [9] </ref> for the first-order moment of the impulse response when the routing tree is treated as a distributed RC tree. Elmore delay [9] [23] is computed as follows. <p> adds interior nodes (Steiner points) that afford the largest cost reduction in the spanning tree over N [ S. "correct" objectives for critical-sink routing trees, via Elmore's formula <ref> [9] </ref> for the first-order moment of the impulse response when the routing tree is treated as a distributed RC tree. Elmore delay [9] [23] is computed as follows.
Reference: [10] <author> P. S. Hauge, R. Nair and E. J. Yoffa, </author> <title> "Circuit Placement for Predictable Performance", </title> <booktitle> Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <year> 1987, </year> <pages> pp. 88-91. </pages>
Reference-contexts: As a consequence, performance-driven layout design has become an active area of research over the past several years. Early work in this field centered on performance-driven placement, where timing-critical paths are determined by static timing analysis, and modules in these paths are then placed close together (see, e.g., <ref> [7, 10, 17, 18, 12, 25] </ref>). Later, a number of performance-driven interconnection algorithms were developed wherein for a given signal net, the typical objective is to minimize the average (or maximum) signal delay from the source pin to the sink pins. <p> For example, Lin and Du [17] use a linear delay approximation so that their method updates the module placement to reduce the rectilinear distance between sources and critical sinks. Other path-dependent placement methodologies include those due to Hauge et al. <ref> [10] </ref> and Teig et al. [26]. If a timing-critical path passes through a given net, the path-dependent approach will afford an explicit routing constraint which bounds delay at that net's critical sink.
Reference: [11] <author> J.-M. Ho, G. Vijayan and C. K. Wong, </author> <title> "New Algorithms for the Rectilinear Steiner Tree Problem", </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 9(2), </volume> <year> 1990, </year> <pages> pp. 185-193. </pages>
Reference: [12] <author> M. A. B. Jackson and E. S. Kuh, </author> <title> "Estimating and Optimizing RC Interconnect Delay During Physical Design", </title> <booktitle> Proc. IEEE Intl. Conf. on Circuits and Systems, </booktitle> <year> 1990, </year> <pages> pp. 869-871. </pages>
Reference-contexts: As a consequence, performance-driven layout design has become an active area of research over the past several years. Early work in this field centered on performance-driven placement, where timing-critical paths are determined by static timing analysis, and modules in these paths are then placed close together (see, e.g., <ref> [7, 10, 17, 18, 12, 25] </ref>). Later, a number of performance-driven interconnection algorithms were developed wherein for a given signal net, the typical objective is to minimize the average (or maximum) signal delay from the source pin to the sink pins. <p> We are also grateful for the support of Cadence Design Systems under the State of California MICRO program. 1 Existing performance-driven placement algorithms fall into two general classes: 1. Net-dependent placement algorithms typically use centroid-connected star cost [24], probabilistic estimates of Steiner tree cost <ref> [12] </ref>, minimum spanning tree cost [7] or the bounding box semiperimeter [18] to estimate wire capacitance and signal delay for a multi-terminal net.
Reference: [13] <author> A. B. Kahng and G. Robins, </author> <title> "A New Class of Iterative Steiner Tree Heuristics with Good Performance", </title> <journal> IEEE Transactions on CAD 11(7), </journal> <month> July </month> <year> 1992, </year> <pages> pp. 893-902. </pages>
Reference-contexts: Our experimental results are presented in Section 4, where we compare delays at critical sinks in our heuristic tree topologies with analogous delays obtained using the best-performing efficient Steiner tree heuristic <ref> [13] </ref>. These results show that both of our methods effectively address the CSRT formulation, attaining up to 69% expected delay improvement to identified critical sinks. <p> To obtain this comparison, we have implemented the 1-Steiner algorithm of <ref> [13] </ref> (see Figure 2), which gives the best heuristic performance reported in the literature (i.e., routing tree cost an average of almost 11% less than MST cost). <p> i to T , where n i and n j are chosen to minimize (c l j ) + d ij s.t. n j 2 T; n i 2 N T (c is the user-chosen MST-SPT tradeoff parameter, with 0 c 1). 5 Iterated 1-Steiner Algorithm: Steiner tree heuristic of <ref> [13] </ref> Input: signal net N Output: heuristic minimum rectilinear Steiner tree T over N 1. S = ; 2. while jSj &lt; jN j + 1 and 9 1-Steiner point x do 3. <p> All of our variants use the 1-Steiner heuristic of Kahng and Robins <ref> [13] </ref> to construct the initial tree T 0 in Step 1. Section 4 reports results for the following three variants: 7 1. H0: The direct connection in Step 2 consists of a single wire from n c to n 0 . 2. <p> with heuristics whose objectives or strategies may be only motivated by Elmore delay and whose outputs can therefore remain sensitive to technology, choice of parameters, and input instance. 4 Experimental Results 4.1 CS-Steiner Trees We implemented each of the CS-Steiner variants H0, H1 and HBest along with the 1-Steiner algorithm <ref> [13] </ref> using C in the UNIX Sun environment, and ran the algorithms on random 4-, 8- and 16-sink inputs. We also applied our GSR post-processing algorithm (denoted as +U) to 1-Steiner and each of the CS-Steiner variants.
Reference: [14] <author> S. Khuller, B. Raghavachari and N. Young, </author> <title> "Balancing Minimum Spanning and Shortest Path Trees", </title> <booktitle> Proc. ACM/SIAM Symp. on Discrete Algorithms, </booktitle> <month> January </month> <year> 1993, </year> <note> to appear. </note>
Reference-contexts: Later, Cong et al. [5] proposed the "provably good" BRBC (bounded-radius, bounded-cost) algorithm, which afforded both radius and cost simultaneously within constant factors of optimal. The BRBC method, along with the work of Awerbuch et al. [2] and Khuller et al. <ref> [14] </ref>, belongs to the class of what have been called "shallow/light" tree constructions.
Reference: [15] <author> E. Kuh, M. A. B. Jackson and M. Marek-Sadowska, </author> <title> "Timing-Driven Routing for Building Block Layout", </title> <booktitle> Proc. IEEE International Symposium on Circuits and Systems, </booktitle> <pages> pp. 518-519, </pages> <year> 1987. </year>
Reference-contexts: Kuh, Jackson and Marek-Sadowska <ref> [15] </ref> have given an approach tuned to hierarchical building-block layouts, and Prastjutrakul and Kubitz [20] use A* heuristic search [19] for a similar problem domain.
Reference: [16] <author> T. Lengauer, </author> <title> Combinatorial Algorithms for Integrated Circuit Layout, </title> <address> Berlin, Wiley-Teubner, </address> <year> 1990. </year>
Reference: [17] <author> I. Lin and D. H. C. Du, </author> <title> "Performance-Driven Constructive Placement", </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1990, </year> <pages> pp. 103-106. </pages>
Reference-contexts: As a consequence, performance-driven layout design has become an active area of research over the past several years. Early work in this field centered on performance-driven placement, where timing-critical paths are determined by static timing analysis, and modules in these paths are then placed close together (see, e.g., <ref> [7, 10, 17, 18, 12, 25] </ref>). Later, a number of performance-driven interconnection algorithms were developed wherein for a given signal net, the typical objective is to minimize the average (or maximum) signal delay from the source pin to the sink pins. <p> Path-dependent placement algorithms are distinguished by their consideration of delay between the source and a particular critical sink of a multi-terminal net. The critical sink is typically determined via timing analysis using known module delays and estimated path delays. For example, Lin and Du <ref> [17] </ref> use a linear delay approximation so that their method updates the module placement to reduce the rectilinear distance between sources and critical sinks. Other path-dependent placement methodologies include those due to Hauge et al. [10] and Teig et al. [26].
Reference: [18] <author> M. Marek-Sadowska and S. Lin, </author> <title> "Timing Driven Placement", </title> <booktitle> Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <year> 1989, </year> <pages> pp. 94-97. </pages>
Reference-contexts: As a consequence, performance-driven layout design has become an active area of research over the past several years. Early work in this field centered on performance-driven placement, where timing-critical paths are determined by static timing analysis, and modules in these paths are then placed close together (see, e.g., <ref> [7, 10, 17, 18, 12, 25] </ref>). Later, a number of performance-driven interconnection algorithms were developed wherein for a given signal net, the typical objective is to minimize the average (or maximum) signal delay from the source pin to the sink pins. <p> Net-dependent placement algorithms typically use centroid-connected star cost [24], probabilistic estimates of Steiner tree cost [12], minimum spanning tree cost [7] or the bounding box semiperimeter <ref> [18] </ref> to estimate wire capacitance and signal delay for a multi-terminal net. From this information, critical timing paths between primary inputs and primary outputs may be computed, after which module placements are updated to reduce these "net-based" objective functions for signal nets which lie along the critical paths. 2.
Reference: [19] <author> J. Pearl, </author> <title> Heuristics: Intelligent Search Strategies for Computer Problem Solving, </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1984. </year>
Reference-contexts: Kuh, Jackson and Marek-Sadowska [15] have given an approach tuned to hierarchical building-block layouts, and Prastjutrakul and Kubitz [20] use A* heuristic search <ref> [19] </ref> for a similar problem domain.
Reference: [20] <author> S. Prasitjutrakul and W. J. Kubitz, </author> <title> "A Timing-Driven Global Router for Custom Chip Design", </title> <booktitle> Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <year> 1990, </year> <pages> pp. 48-51. </pages>
Reference-contexts: For a typical MCM technology, the corresponding improvements are 42% and 22%. This represents a significant advance over every existing performance-driven routing tree construction in the literature, including such recent works as [1] [4] [5] <ref> [20] </ref>. 2 High-Performance Routing Tree Design In our discussion, we say that a signal net N consists of a set of pins or terminals which are to be connected by a routing tree T (N ) in the Manhattan plane. <p> Kuh, Jackson and Marek-Sadowska [15] have given an approach tuned to hierarchical building-block layouts, and Prastjutrakul and Kubitz <ref> [20] </ref> use A* heuristic search [19] for a similar problem domain. <p> M = M fug 8. output resulting Steiner tree T = (V; E) Finally, we address the CSRT problem by beginning with a tree containing the single edge (n 0 ; n c ) in 9 Our approach should be distinguished from the method of Prasitjutrakul and Kubitz <ref> [20] </ref> described in Section 2.1 above, wherein A* heuristic search and the actual Elmore delay formula are used in a performance-driven routing tree construction. Like our method, [20] grows a routing tree over a net N starting from the source n 0 ; they perform A* search of a routing graph <p> the single edge (n 0 ; n c ) in 9 Our approach should be distinguished from the method of Prasitjutrakul and Kubitz <ref> [20] </ref> described in Section 2.1 above, wherein A* heuristic search and the actual Elmore delay formula are used in a performance-driven routing tree construction. Like our method, [20] grows a routing tree over a net N starting from the source n 0 ; they perform A* search of a routing graph (e.g., in building-block design) to find the Elmore delay-optimal Steiner connection from the existing tree to a new sink. <p> The effect of this difference is apparent in the ERT ordering of added nodes in Figure 4.2 of Section 4 below. Indeed, the method of <ref> [20] </ref> can yield Elmore delays that are at least twice as large as those of ERT: given a very tall, "hairpin"-like version of Figure 3a with many sinks very closely spaced along the entire hairpin path, [20] forces the sinks to be added into the tree according to the path order <p> Indeed, the method of <ref> [20] </ref> can yield Elmore delays that are at least twice as large as those of ERT: given a very tall, "hairpin"-like version of Figure 3a with many sinks very closely spaced along the entire hairpin path, [20] forces the sinks to be added into the tree according to the path order (starting from the source n 0 at the lower left), yielding an obviously poor solution. Finally, practical considerations also separate the two methods, e.g., [20] cannot be easily modified to address our CSRT formulation (in the <p> with many sinks very closely spaced along the entire hairpin path, <ref> [20] </ref> forces the sinks to be added into the tree according to the path order (starting from the source n 0 at the lower left), yielding an obviously poor solution. Finally, practical considerations also separate the two methods, e.g., [20] cannot be easily modified to address our CSRT formulation (in the context of the SERT-C discussion to follow, note that given an initial n 0 -n c edge in the tree, the method of [20] may be forced to choose arbitrarily among many ties for the "closest sink" which must <p> Finally, practical considerations also separate the two methods, e.g., <ref> [20] </ref> cannot be easily modified to address our CSRT formulation (in the context of the SERT-C discussion to follow, note that given an initial n 0 -n c edge in the tree, the method of [20] may be forced to choose arbitrarily among many ties for the "closest sink" which must be next added into the tree). 10 Line 1 of the Figure 6 template (i.e., T = (V; E) = (fn 0 ; n c g; f (n 0 ; n c )g)), and then
Reference: [21] <author> S. K. Rao, P. Sadayappan, F. K. Hwang and P. W. Shor, </author> <title> "The Rectilinear Steiner Arborescence Problem", </title> <booktitle> Algorithmica 7 (1992), </booktitle> <pages> pp. 277-288. </pages>
Reference-contexts: trees, the tree on the right has less signal delay at n c .) 5 The analysis for small driver resistance is increasingly appropriate, e.g., with multi-chip module interconnects; our intuition supports the use of such radius-cost tradeoffs as in [1] [3] [5]; also cf. the Steiner tree formulation of <ref> [21] </ref>. The analysis for large n 0 0 -n 0 wirelength reflects the previous generation of IC technologies and confirms the use of minimum Steiner and spanning tree constructions in existing global routers. <p> CS-Steiner also provides larger wins in the MCM technology. 12 Figure 4.1 provides a nodewise delay comparison between H1+U and a min-cost SPT (as might be produced by the AHHK algorithm with c = 0:999 or by the methods of <ref> [21] </ref>) for a single net with 16 sinks.
Reference: [22] <author> G. Robins, </author> <title> "On Optimal Interconnections", </title> <type> Ph.D. thesis (technical report CSD TR-920024), </type> <institution> CS Department, University of California, </institution> <address> Los Angeles, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Therefore, even by using * c = 0 the BRBC extension cannot enforce a monotone path to the critical sink when d 0c &lt; max i d 0i = R. The Ph.D. thesis of Robins <ref> [22] </ref> describes how to enforce distinct * i values along with different R i values at each sink n i .
Reference: [23] <author> J. Rubinstein, P. Penfield, and M. A. Horowitz, </author> <title> "Signal Delay in RC Tree Networks", </title> <journal> IEEE Trans. on CAD 2(3) (1983), </journal> <pages> pp. 202-211. </pages>
Reference-contexts: Elmore delay [9] <ref> [23] </ref> is computed as follows. <p> instead of n i to accomodate the possibility that a "node" in a Steiner routing tree is a Steiner point rather than a sink. 4 The recursive expression implies that Elmore delay can be evaluated at all sinks of T in linear time, using a depth-first traversal of the tree <ref> [23] </ref> [27]. This fact is enabling to our efficient "Elmore routing tree" methodology, which we propose in Section 3.2. 6 for the same sink set. Coordinates shown are in mm, and 0:8 CMOS technology parameters (see Section 4) were used for simulation purposes.
Reference: [24] <author> A. Srinivasan, K. Chaudhary and E. S. Kuh, "RITUAL: </author> <title> A Performance Driven Placement Algorithm for Small-Cell ICs", </title> <booktitle> Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <year> 1991, </year> <pages> pp. 48-51. </pages>
Reference-contexts: We are also grateful for the support of Cadence Design Systems under the State of California MICRO program. 1 Existing performance-driven placement algorithms fall into two general classes: 1. Net-dependent placement algorithms typically use centroid-connected star cost <ref> [24] </ref>, probabilistic estimates of Steiner tree cost [12], minimum spanning tree cost [7] or the bounding box semiperimeter [18] to estimate wire capacitance and signal delay for a multi-terminal net.
Reference: [25] <author> S. Sutanthavibul and E. Shragowitz, </author> <title> "Adaptive Timing-Driven Layout for High Speed VLSI", </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1990, </year> <pages> pp. 90-95. </pages>
Reference-contexts: 1 Introduction Due to the scaling of VLSI technology, interconnection delay has become a dominant concern in the design of complex, high-performance circuits <ref> [7, 25] </ref>. As a consequence, performance-driven layout design has become an active area of research over the past several years. <p> As a consequence, performance-driven layout design has become an active area of research over the past several years. Early work in this field centered on performance-driven placement, where timing-critical paths are determined by static timing analysis, and modules in these paths are then placed close together (see, e.g., <ref> [7, 10, 17, 18, 12, 25] </ref>). Later, a number of performance-driven interconnection algorithms were developed wherein for a given signal net, the typical objective is to minimize the average (or maximum) signal delay from the source pin to the sink pins.
Reference: [26] <author> S. Teig, R. L. Smith and J. Seaton, </author> <title> "Timing Driven Layout of Cell-Based ICs", </title> <booktitle> VLSI Systems Design, </booktitle> <month> May </month> <year> 1986, </year> <pages> pp. 63-73. </pages>
Reference-contexts: For example, Lin and Du [17] use a linear delay approximation so that their method updates the module placement to reduce the rectilinear distance between sources and critical sinks. Other path-dependent placement methodologies include those due to Hauge et al. [10] and Teig et al. <ref> [26] </ref>. If a timing-critical path passes through a given net, the path-dependent approach will afford an explicit routing constraint which bounds delay at that net's critical sink.
Reference: [27] <author> R. S. Tsay, </author> <title> "Exact Zero Skew", </title> <booktitle> Proc. IEEE Intl. Conference on Computer-Aided Design, </booktitle> <year> 1991, </year> <pages> pp. 336-339. </pages>
Reference-contexts: of n i to accomodate the possibility that a "node" in a Steiner routing tree is a Steiner point rather than a sink. 4 The recursive expression implies that Elmore delay can be evaluated at all sinks of T in linear time, using a depth-first traversal of the tree [23] <ref> [27] </ref>. This fact is enabling to our efficient "Elmore routing tree" methodology, which we propose in Section 3.2. 6 for the same sink set. Coordinates shown are in mm, and 0:8 CMOS technology parameters (see Section 4) were used for simulation purposes.
Reference: [28] <author> D. Zhou, F. P. Preparata and S. M. Kang, </author> <title> "Interconnection Delay in Very High-speed VLSI", </title> <journal> IEEE Trans. on Circuits and Systems 38(7), </journal> <year> 1991. </year>
Reference-contexts: The delays at all sink nodes were estimated using the two-pole circuit simulator developed by Zhou and coworkers in <ref> [28] </ref> [29]. <p> Finally, we leave as an open problem the reduction in time complexity of the ERT constructions. 6 Acknowledgements We are grateful to the authors of [1] for providing an early version of their manuscript, as well as to the authors of <ref> [28] </ref> [29] for use of their simulator code. 19 Appendix: Global Slack Removal Recall from Section 3.1 that Global Slack Removal (GSR) is a linear-time postprocessing enhancement to the CS-Steiner approach.
Reference: [29] <author> D. Zhou, S. Su, F. Tsui, D. S. Gao and J. Cong, </author> <title> "Analysis of Trees of Transmission Lines", </title> <type> technical report UCLA CSD-920010. 24 </type>
Reference-contexts: The delays at all sink nodes were estimated using the two-pole circuit simulator developed by Zhou and coworkers in [28] <ref> [29] </ref>. <p> Finally, we leave as an open problem the reduction in time complexity of the ERT constructions. 6 Acknowledgements We are grateful to the authors of [1] for providing an early version of their manuscript, as well as to the authors of [28] <ref> [29] </ref> for use of their simulator code. 19 Appendix: Global Slack Removal Recall from Section 3.1 that Global Slack Removal (GSR) is a linear-time postprocessing enhancement to the CS-Steiner approach.
References-found: 29

