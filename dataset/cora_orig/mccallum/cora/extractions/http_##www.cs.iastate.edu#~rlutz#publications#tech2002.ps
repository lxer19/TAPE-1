URL: http://www.cs.iastate.edu/~rlutz/publications/tech2002.ps
Refering-URL: http://www.cs.iastate.edu/~rlutz/homepage.html
Root-URL: http://www.cs.iastate.edu
Title: Constraint Checking During Error Recovery  
Author: Robyn R. Lutz Johnny S. K. Wong 
Date: July 26, 1996  
Address: Pasadena, CA 91109  Ames, IA 50011  
Affiliation: Jet Propulsion Laboratory California Institute of Technology  Department of Computer Science Iowa State University  
Abstract: The system-level software onboard a spacecraft is responsible for recovery from communication, power, thermal, and computer-health anomalies that may occur. The recovery must occur without disrupting any critical scientific or engineering activity that is executing at the time of the error. Thus, the error-recovery software may have to execute concurrently with the ongoing acquisition of scientific data or with spacecraft maneuvers. This work provides a technique by which the rules that constrain the concurrent execution of these processes can be modeled in a graph. An algorithm is described that uses this model to validate that the constraints hold for all concurrent executions of the error-recovery software with the software that controls the science and engineering activities of the spacecraft. The results are applicable to a variety of control systems with critical constraints on the timing and ordering of the events they control. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alur, C. Courcoubetis, and D. Dill, </author> <title> "Model-Checking for Real-Time Systems," </title> <booktitle> in Proceedings of the 5th Annual IEEE Symposium on Logic in Computer Science. </booktitle> <address> Los Alamitos, CA: </address> <publisher> IEEE Computer Science Press, </publisher> <year> 1990, </year> <pages> pp. 414-425. </pages>
Reference-contexts: Similarly, many techniques that are currently available to model timing constraints tend to ignore precedence constraints. A wide variety of powerful formalisms exists to model the specifications and behavior of real-time systems. See, e.g., <ref> [1, 4, 5, 6, 7, 13, 14, 15] </ref>. However, none of the available methods readily translates to the domain of validating error recovery on spacecraft.
Reference: [2] <author> A. A. Bestavros, J. J. Clark, and N. J. Ferrier, </author> <title> "Management of Sensori-Motor Activity in Mobile Robots," </title> <booktitle> in Proceedings of the 1990 IEEE International Conference on Robotics and Automation. </booktitle> <address> Los Alamitos, CA: </address> <publisher> IEEE Computer Society, </publisher> <year> 1990, </year> <pages> pp. 592-597. </pages>
Reference-contexts: This distinction between a "hard" time constraint (an interval within which the action should be taken) and a "soft" time constraint (an interval within which the action may occur) <ref> [2] </ref> is often absent in formal models. The work described here brings together the study of real-time constraints with the study of precedence and data-consistency constraints.
Reference: [3] <author> R. H. Campbell and B. Randell, </author> <title> "Error Recovery in Asynchronous Systems," </title> <journal> IEEE Transactions on Software Engineering , vol. </journal> <volume> SE-12, </volume> <pages> pp. 811-826, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: If a critical sequence is executing, the software must quickly (thus, autonomously) reconfigure the spacecraft to the state that is the precondition for the next activity in the sequence. In addition, because error-recovery software is responsive, it is asynchronous <ref> [3] </ref>. It may begin execution at any time. In fact, because the spacecraft often is most taxed during the most critical science activity, error-recovery software is most likely to execute when the spacecraft is active.
Reference: [4] <author> S. Cheng, J. A. Stankovic, and K. Ramamritham, </author> <title> "Dynamic Scheduling of Groups of Tasks with Precedence Constraints in Distributed Hard Real-Time Systems," </title> <booktitle> IEEE Real-Time System Symposium. </booktitle> <address> New Orleans, LA: </address> <year> 1986, </year> <pages> pp. 166-174. </pages>
Reference-contexts: Similarly, many techniques that are currently available to model timing constraints tend to ignore precedence constraints. A wide variety of powerful formalisms exists to model the specifications and behavior of real-time systems. See, e.g., <ref> [1, 4, 5, 6, 7, 13, 14, 15] </ref>. However, none of the available methods readily translates to the domain of validating error recovery on spacecraft.
Reference: [5] <author> J. E. Coolahan, Jr., and N. Roussopoulos, </author> <title> "A Timed Petri Net Methodology for Specifying Real-Time System Timing Requirements," </title> <booktitle> International Workshop on Timed Petri Nets. </booktitle> <address> Silver Springs, MD: </address> <publisher> IEEE, </publisher> <year> 1985. </year>
Reference-contexts: Similarly, many techniques that are currently available to model timing constraints tend to ignore precedence constraints. A wide variety of powerful formalisms exists to model the specifications and behavior of real-time systems. See, e.g., <ref> [1, 4, 5, 6, 7, 13, 14, 15] </ref>. However, none of the available methods readily translates to the domain of validating error recovery on spacecraft.
Reference: [6] <author> T. A. Henziger, Z. Manna, and A. Pnueli, </author> <title> "Temporal Proof Methodologies for Real-Time Systems," </title> <booktitle> in Proceedings of the 18th ACM Symposium on Principles of Programming Languages, </booktitle> <year> 1991, </year> <pages> pp. 353-366. </pages>
Reference-contexts: Similarly, many techniques that are currently available to model timing constraints tend to ignore precedence constraints. A wide variety of powerful formalisms exists to model the specifications and behavior of real-time systems. See, e.g., <ref> [1, 4, 5, 6, 7, 13, 14, 15] </ref>. However, none of the available methods readily translates to the domain of validating error recovery on spacecraft.
Reference: [7] <author> F. Jahanian and A. K.-L. Mok, </author> <title> "Safety Analysis of Timing Properties in Real-Time Systems," </title> <journal> IEEE Transactions on Software Engineering vol. </journal> <volume> SE-12, </volume> <pages> pp. 890-904, </pages> <month> Sept. </month> <year> 1986. </year>
Reference-contexts: Similarly, many techniques that are currently available to model timing constraints tend to ignore precedence constraints. A wide variety of powerful formalisms exists to model the specifications and behavior of real-time systems. See, e.g., <ref> [1, 4, 5, 6, 7, 13, 14, 15] </ref>. However, none of the available methods readily translates to the domain of validating error recovery on spacecraft.
Reference: [8] <author> R. R. Lutz and J. S. K. Wong, </author> <title> "Validating System-Level Error Recovery for Spacecraft," </title> <booktitle> AIAA Computing in Aerospace 8 , vol. 1. </booktitle> <address> Washington: AIAA, </address> <year> 1991, </year> <pages> pp. 69-76. </pages>
Reference-contexts: This work was performed in the context of the Galileo spacecraft, an interplanetary probe currently journeying to Jupiter. Preliminary results were reported in <ref> [8] </ref> and additional results in [9]. Ongoing research indicates that the results are applicable to a variety of asynchronous systems with precedence and critical timing constraints. ERROR RECOVERY System-level software onboard the spacecraft monitors and responds to failures.
Reference: [9] <author> R. R. Lutz and J. S. K. Wong, </author> <title> "Detecting Unsafe Error Recovery Schedules," </title> <journal> IEEE Transactions on Software Engineering , vol. </journal> <volume> 18, no. 8, </volume> <pages> pp. 749-760, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: This work was performed in the context of the Galileo spacecraft, an interplanetary probe currently journeying to Jupiter. Preliminary results were reported in [8] and additional results in <ref> [9] </ref>. Ongoing research indicates that the results are applicable to a variety of asynchronous systems with precedence and critical timing constraints. ERROR RECOVERY System-level software onboard the spacecraft monitors and responds to failures.
Reference: [10] <author> J. D. Northcutt, </author> <title> Mechanisms for Reliable Distributed Real-Time Operating Systems, The Alpha Kernel. </title> <address> Boston: </address> <publisher> Academic Press, </publisher> <year> 1987. </year>
Reference-contexts: Error-recovery capabilities not only increase the number of concurrently executing processes, but also tend to be executed at the busiest (in terms of process interactions) times. It is also the case that hardware failures due to physical damage tend to be clustered in time <ref> [10] </ref>. 2 APPROACH The problem addressed here is how to check that the concurrent execution of the asynchronous processes that cooperate during error recovery satisfy the precedence constraints, maintain data-dependency (read/write) constraints, and satisfy the timing constraints.
Reference: [11] <author> A. Pnueli and E. Harel, </author> <title> "Applications of Temporal Logic to the Specifications of Real Time Systems," in Formal Techniques in Real-Time and Fault-Tolerant Systems., </title> <editor> Ed. M. Joseph. </editor> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1988, </year> <pages> pp. 84-98. </pages>
Reference-contexts: If the duration of the commanded activity is variable, it is limited by a worst-case time which is represented in the model. The model takes into account both precedence constraints and timing constraints. Precedence and timing are fundamentally different in that precedence does not require a notion of duration <ref> [11] </ref>. Most methods that currently exist to model precedence constraints do not incorporate timing requirements and so are inadequate for modeling the timing constraints on spacecraft. Similarly, many techniques that are currently available to model timing constraints tend to ignore precedence constraints.
Reference: [12] <author> B. Randell, P. A. Lee, and P. C. Treleaven, </author> <title> "Reliability Issues in Computing System Design," </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 10, </volume> <pages> pp. 123-166, </pages> <month> June </month> <year> 1978. </year>
Reference-contexts: The standard definitions are used here of a failure as an event in which the behavior of the system deviates from its specification and of an error as an incorrect state of the system which must be remedied <ref> [12] </ref>. The error-recovery processes include those that respond to a loss of uplink or downlink communication, to thermal, power, or pressure anomalies, and to indicators regarding the health of the computers. Instructions called commands instruct the different subsystems of the spacecraft to take specific actions at specific times.
Reference: [13] <author> F. H. Vogt and S. Leue, </author> <title> "The Paradigm of Real-Time Specification Based on Interval Logic," </title> <booktitle> in Proceedings of the Berkeley Workshop on Temporal and Real-Time Specification, </booktitle> <editor> Eds. P. B. Ladkin and F. H. Vogt. </editor> <address> Berkeley, CA: </address> <booktitle> International Computer Science Institute TR-90-060, </booktitle> <pages> pp. 153-178. </pages>
Reference-contexts: Similarly, many techniques that are currently available to model timing constraints tend to ignore precedence constraints. A wide variety of powerful formalisms exists to model the specifications and behavior of real-time systems. See, e.g., <ref> [1, 4, 5, 6, 7, 13, 14, 15] </ref>. However, none of the available methods readily translates to the domain of validating error recovery on spacecraft.
Reference: [14] <author> J. M. Wing, </author> <title> "A Specifier's Introduction to Formal Methods," </title> <journal> Computer, </journal> <volume> vol. 23, </volume> <pages> pp. 8-26, </pages> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: Similarly, many techniques that are currently available to model timing constraints tend to ignore precedence constraints. A wide variety of powerful formalisms exists to model the specifications and behavior of real-time systems. See, e.g., <ref> [1, 4, 5, 6, 7, 13, 14, 15] </ref>. However, none of the available methods readily translates to the domain of validating error recovery on spacecraft.
Reference: [15] <author> J. Xu and D. L. Parnas, </author> <title> "Scheduling Processes with Release Times, Deadlines, Precedence, and Exclusion Relations," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 16, </volume> <pages> pp. 360-369, </pages> <month> March </month> <year> 1990. </year> <month> 6 </month>
Reference-contexts: Similarly, many techniques that are currently available to model timing constraints tend to ignore precedence constraints. A wide variety of powerful formalisms exists to model the specifications and behavior of real-time systems. See, e.g., <ref> [1, 4, 5, 6, 7, 13, 14, 15] </ref>. However, none of the available methods readily translates to the domain of validating error recovery on spacecraft.
References-found: 15

