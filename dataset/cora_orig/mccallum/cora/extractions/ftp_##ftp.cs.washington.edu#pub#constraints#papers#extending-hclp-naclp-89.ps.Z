URL: ftp://ftp.cs.washington.edu/pub/constraints/papers/extending-hclp-naclp-89.ps.Z
Refering-URL: http://www.cs.washington.edu/research/constraints/hclp/extending-hclp-naclp-89.html
Root-URL: 
Email: internet: molly@cs.washington.edu borning@cs.washington.edu  
Title: Extending Hierarchical Constraint Logic Programming: Nonmonotonicity and Inter-Hierarchy Comparison  
Author: Molly Wilson and Alan Borning 
Address: Seattle, Washington 98195  
Affiliation: Department of Computer Science and Engineering, FR-35 University of Washington  Cleveland, Ohio.  
Note: Authors' addresses:  This is a preprint of a paper that will appear in the Proceedings of the 1989 North American Conference on Logic Programming, to be held October 1989 in  
Abstract: Technical Report 89-05-04 Department of Computer Science and Engineering University of Washington July 1989 Abstract Hierarchical Constraint Logic Programming languages extend Constraint Logic Programming to include constraint hierarchies. These languages provide both required constraints and default constraints of various strengths. In the original definition of HCLP, alternate solutions to a given constraint hierarchy were compared, and only the "best" solutions were returned. However, there was no attempt to compare solutions arising from different choices of rules in the logic program. In many practical applications of HCLP, to rule out unintuitive solutions we do need to make such inter hierarchy comparisons. Such comparisons introduce nonmonotonic behavior in HCLP programs. We define two related nonmonotonicity properties of HCLP languages, and compare these properties with those of standard nonmonotonic logics. The nonmonotonicity properties create novel implementation problems, which we discuss, while at the same time extending the usefulness of HCLP languages. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alan Borning, Robert Duisberg, Bjorn Freeman-Benson, Axel Kramer, and Michael Woolf. </author> <title> Constraint Hierarchies. </title> <booktitle> In Proceedings of the 1987 ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 48-60. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1987. </year>
Reference-contexts: In this way we can make full use of the constraint paradigm, by representing these defaults and preferences declaratively, as constraints, rather than encoding them in the procedural parts of the language. A theory of constraint hierarchies was developed in <ref> [1] </ref> which allows a user to specify not only constraints that must hold, but also weaker constraints at an arbitrary number of strengths. This constraint hierarchy scheme is parameterized by a comparator C that allows us to compare different possible solutions to a single hierarchy and select the best ones. <p> There has also been considerable work on using constraints in applications such as geometric layout, physical simulations, and user interface design, document formatting, algorithm animation, and design and analysis of mechanical devices and electrical circuits. Constraint hierarchies were originally developed as an extension to ThingLab <ref> [1] </ref>.
Reference: [2] <author> Alan Borning, Michael Maher, Amy Martindale, and Molly Wilson. </author> <title> Constraint Hierarchies and Logic Programming. </title> <booktitle> In Proceedings of the Sixth International Conference on Logic Programming, </booktitle> <pages> pages 149-164, </pages> <address> Lisbon, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: This constraint hierarchy scheme is parameterized by a comparator C that allows us to compare different possible solutions to a single hierarchy and select the best ones. Recently this constraint hierarchy paradigm was integrated with the Constraint Logic Programming scheme [6] to produce Hierarchical Constraint Logic Programming <ref> [2] </ref>. Like CLP, HCLP is parameterized by D, the domain of the constraints. In addition, HCLP is parameterized by the comparator C. This integration of CLP and constraint hierarchies allows the full programming capabilities and theoretical foundation of logic programming to complement the expressiveness of preferential constraints. In [2] we described <p> Logic Programming <ref> [2] </ref>. Like CLP, HCLP is parameterized by D, the domain of the constraints. In addition, HCLP is parameterized by the comparator C. This integration of CLP and constraint hierarchies allows the full programming capabilities and theoretical foundation of logic programming to complement the expressiveness of preferential constraints. In [2] we described a prototype implementation of HCLP (R; LPB), where R is the domain of real numbers and LPB is the locally-predicate-better comparator (defined in the next section). <p> In the next section, we first review the definitions given in <ref> [2] </ref> for solutions to a constraint hierarchy. We then extend this notion by defining the set of solutions to many constraint hierarchies. <p> However, the formal results in <ref> [2] </ref> still hold if we allow a larger class of constraints formed by combining primitive constraints using the logical connectives and, or, and not, and universal and existential quantifiers (see [8]). <p> Constraint hierarchies were originally developed as an extension to ThingLab [1]. Regarding constraint hierarchies and logic programming, another approach to defining inter-hierarchy com parators has been taken by Michael Maher and Peter Stuckey [9]. (Maher collaborated with us on the original development of HCLP <ref> [2] </ref>.) Rather than defining the set S 0 of valuations that solve the required constraints in some member of the set of hierarchies, they define the pre-solutions for a single hierarchy.
Reference: [3] <author> Alain Colmerauer. </author> <title> An Introduction to Prolog III. </title> <type> Draft, </type> <institution> Groupe Intelligence Artificielle, Uni-versite Aix-Marseille II, </institution> <month> November </month> <year> 1987. </year>
Reference-contexts: The Constraint Logic Programming scheme is described in [6]. A number of CLP languages have been implemented, including including Prolog III <ref> [3] </ref>, CLP (R) [5, 7] and CHIP [4]. There has also been considerable work on using constraints in applications such as geometric layout, physical simulations, and user interface design, document formatting, algorithm animation, and design and analysis of mechanical devices and electrical circuits.
Reference: [4] <author> M. Dincbas, P. Van Hentenryck, H. Simonis, A. Aggoun, T. Graf, and F. Bertheir. </author> <title> The Constraint Logic Programming Language CHIP. </title> <booktitle> In Proceedings Fifth Generation Computer Systems-88, </booktitle> <year> 1988. </year>
Reference-contexts: The Constraint Logic Programming scheme is described in [6]. A number of CLP languages have been implemented, including including Prolog III [3], CLP (R) [5, 7] and CHIP <ref> [4] </ref>. There has also been considerable work on using constraints in applications such as geometric layout, physical simulations, and user interface design, document formatting, algorithm animation, and design and analysis of mechanical devices and electrical circuits. Constraint hierarchies were originally developed as an extension to ThingLab [1].
Reference: [5] <author> Nevin Heintze, Joxan Jaffar, Spiro Michaylov, P. Stuckey, and R. Yap. </author> <title> The CLP(R) Programmer's Manual. </title> <type> Technical report, </type> <institution> Computer Science Dept, Monash University, </institution> <year> 1987. </year>
Reference-contexts: The Constraint Logic Programming scheme is described in [6]. A number of CLP languages have been implemented, including including Prolog III [3], CLP (R) <ref> [5, 7] </ref> and CHIP [4]. There has also been considerable work on using constraints in applications such as geometric layout, physical simulations, and user interface design, document formatting, algorithm animation, and design and analysis of mechanical devices and electrical circuits.
Reference: [6] <author> Joxan Jaffar and Jean-Louis Lassez. </author> <title> Constraint Logic Programming. </title> <booktitle> In Proceedings of the Fourteenth ACM Principles of Programming Languages Conference, </booktitle> <address> Munich, </address> <month> January </month> <year> 1987. </year>
Reference-contexts: This constraint hierarchy scheme is parameterized by a comparator C that allows us to compare different possible solutions to a single hierarchy and select the best ones. Recently this constraint hierarchy paradigm was integrated with the Constraint Logic Programming scheme <ref> [6] </ref> to produce Hierarchical Constraint Logic Programming [2]. Like CLP, HCLP is parameterized by D, the domain of the constraints. In addition, HCLP is parameterized by the comparator C. <p> The Constraint Logic Programming scheme is described in <ref> [6] </ref>. A number of CLP languages have been implemented, including including Prolog III [3], CLP (R) [5, 7] and CHIP [4].
Reference: [7] <author> Joxan Jaffar and Spiro Michaylov. </author> <title> Methodology and Implementation of a CLP System. </title> <booktitle> In Proceedings of the Fourth International Conference on Logic Programming, </booktitle> <pages> pages 196-218, </pages> <address> Mel-bourne, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: The Constraint Logic Programming scheme is described in [6]. A number of CLP languages have been implemented, including including Prolog III [3], CLP (R) <ref> [5, 7] </ref> and CHIP [4]. There has also been considerable work on using constraints in applications such as geometric layout, physical simulations, and user interface design, document formatting, algorithm animation, and design and analysis of mechanical devices and electrical circuits.
Reference: [8] <author> Michael J. Maher. </author> <title> Logic Semantics for a Class of Committed-choice Programs. </title> <booktitle> In Proceedings of the Fourth International Conference on Logic Programming, </booktitle> <pages> pages 858-876, </pages> <address> Melbourne, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: However, the formal results in [2] still hold if we allow a larger class of constraints formed by combining primitive constraints using the logical connectives and, or, and not, and universal and existential quantifiers (see <ref> [8] </ref>). Whereas in CLP the effect of disjunction and conjunction can be achieved indirectly, the same is not true in HCLP as the examples below demonstrate. Extending HCLP to include nonprimitive constraints of this form would add greater expressiveness to programs.
Reference: [9] <author> Michael J. Maher and Peter J. Stuckey. </author> <title> Expanding Query Power in Constraint Logic Program--ming. </title> <booktitle> In Proceedings of the North American Conference on Logic Programming, </booktitle> <address> Cleveland, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: Constraint hierarchies were originally developed as an extension to ThingLab [1]. Regarding constraint hierarchies and logic programming, another approach to defining inter-hierarchy com parators has been taken by Michael Maher and Peter Stuckey <ref> [9] </ref>. (Maher collaborated with us on the original development of HCLP [2].) Rather than defining the set S 0 of valuations that solve the required constraints in some member of the set of hierarchies, they define the pre-solutions for a single hierarchy.
Reference: [10] <author> John McCarthy. </author> <title> Circumscription|A Form of Non-Monotonic Reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13(1,2):27-39, </volume> <month> April </month> <year> 1980. </year>
Reference-contexts: Thus, the set of facts that can be derived from the initial program is not a subset of the facts that can be derived when we add new rules. This behavior is similar to that of nonmonotonic logics (see for example <ref> [10, 11] </ref>), in which the addition of new axioms to an existing axiom set may result in the retraction of existing theorems. One of the specific problems addressed by nonmonotonic logics is the frame problem. Consider a system for planning robot actions.
Reference: [11] <author> Raymond Reiter. </author> <title> A Logic for Default Reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13(1,2):81-132, </volume> <month> April </month> <year> 1980. </year>
Reference-contexts: Thus, the set of facts that can be derived from the initial program is not a subset of the facts that can be derived when we add new rules. This behavior is similar to that of nonmonotonic logics (see for example <ref> [10, 11] </ref>), in which the addition of new axioms to an existing axiom set may result in the retraction of existing theorems. One of the specific problems addressed by nonmonotonic logics is the frame problem. Consider a system for planning robot actions.
Reference: [12] <author> Vijay A. Saraswat. </author> <title> Concurrent Constraint Programming Languages. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, Computer Science Department, </institution> <month> January </month> <year> 1989. </year> <month> 13 </month>
Reference-contexts: Note that CLP is orderly since adding required constraints to an existing set of required constraints will either narrow or leave the same the set of valuations that satisfy those constraints. This orderliness property is similar to the "stability of rejection" property discussed in <ref> [12] </ref>. Proposition. Let D be a nontrivial domain. Then any comparator that respects the hierarchy is disorderly. Proof. Let H = fdefault X = ag, and let J = fprefer X = bg, where a and b are two distinct elements in D.
References-found: 12

