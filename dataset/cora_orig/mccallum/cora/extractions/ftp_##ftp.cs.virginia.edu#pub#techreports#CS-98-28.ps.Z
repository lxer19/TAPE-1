URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-98-28.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.cs.virginia.edu
Email: chapin,dk3x@cs.virginia.edu  phillman@mcs.kent.edu lafisk@cs.sandia.gov  
Title: Cross-Operating System Process Migration On a Massively Parallel Processor  
Author: Dimitrios Katramatos Steve J. Chapin Patricia Hillman Lee Ann Fisk David van Dresser 
Keyword: process migration, heterogeneity, parallel systems  
Note: This work was sponsored in part by DOE contract AR-8658. The Uniform Kernel project was supported by ARPA order B901.  
Address: Charlottesville, VA 22903-2442  OH 44242-0001 Albuquerque, NM 87185  
Affiliation: Dept. of Computer Science University of Virginia  Dept. of Math. and Computer Science Massively Parallel Computing Research Lab Kent State University Sandia National Labs Kent,  
Abstract: As part of the Uniform Kernel project at Sandia National Labs, we developed process migration mechanisms for the Intel Paragon and Teraflop (ASCI Red) machines. The computing paradigm on these massively parallel processors divides the nodes into multiple logical partitions which run differing operating systems. This provides a unique environment for process migration, with homogeneous hardware and heterogeneous systems software. In this paper, we describe mechanisms that allow processes to (1) run on multiple operating systems, and (2) migrate between partitions on demand. The result is the first step towards a system which will allow partition boundaries to change dynamically, thus responding to changes in load mix and resource usage on the machine. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Peter Smith, Norman Hutchinson. </author> <month> (February, </month> <year> 1996). </year> <title> Heterogeneous Process Migration: The Tui System. </title> <type> Technical Report, 96-04, </type> <institution> University of British Columbia. </institution>
Reference-contexts: With the advent of heterogeneous computing, interest has increased in providing migration for systems with differing hardware or operating system software. Various motivations have been identified for including a migration mechanism in an operating system <ref> [1, 2, 18, 26] </ref>. In our case, we are primarily interested in two benefits: the utilization of operating system capabilities not available on the current node, and supporting fault resilience by migrating processes away from nodes that may have suffered a partial failure. <p> This method avoids complications from details of machine and compiler-dependent data translation procedures, but at a significant cost in migration time. One of the most recent works on heterogeneous migration is the Tui system by Smith and Hutchinson <ref> [1] </ref>. Tui is a prototype that is able to migrate type-safe ANSI-C programs between four different architectures: Solaris executing on a SPARC processor, SunOS on an m68020, Linux on an i486 and AIX on a PowerPC.
Reference: [2] <author> Eric Jul, Henry Levy, Norman Hutchinson, Andrew Black. </author> <month> (February </month> <year> 1988). </year> <title> Fine-Grained Mobility in the Emerald System. </title> <journal> ACM Transactions on Computer Systems. </journal>
Reference-contexts: With the advent of heterogeneous computing, interest has increased in providing migration for systems with differing hardware or operating system software. Various motivations have been identified for including a migration mechanism in an operating system <ref> [1, 2, 18, 26] </ref>. In our case, we are primarily interested in two benefits: the utilization of operating system capabilities not available on the current node, and supporting fault resilience by migrating processes away from nodes that may have suffered a partial failure.
Reference: [3] <author> S. Tritscher and T. Bemmerl. </author> <month> (February, </month> <year> 1992). </year> <title> Seitenorientierte Prozessmigration als Basis fuer Dynamischen Lastausgleich. </title> <journal> GI/ITG Pars Mitteilungen, </journal> <pages> no 9 pages 58-62. </pages>
Reference-contexts: The Uniform Kernel project at Sandia National Labs investigated mechanisms to remove these restrictions, so that the nodes could change their partition membership and processes could migrate between partitions at run-time. As noted in Tritscher and Bemmerl <ref> [3, 4] </ref>, an MPP can benefit from the presence of a process migration mechanism by using it to address issues like repartitioning of the nodes and fault resilience and to exploit its own special capabilities.
Reference: [4] <author> R. Zajcew et al. </author> <month> (January </month> <year> 1993). </year> <title> An OSF/1 UNIX for Massively Parallel Multicom-puters. </title> <booktitle> Proceedings of the Winter USENIX Conference, </booktitle> <pages> pages 449-468. </pages>
Reference-contexts: The Uniform Kernel project at Sandia National Labs investigated mechanisms to remove these restrictions, so that the nodes could change their partition membership and processes could migrate between partitions at run-time. As noted in Tritscher and Bemmerl <ref> [3, 4] </ref>, an MPP can benefit from the presence of a process migration mechanism by using it to address issues like repartitioning of the nodes and fault resilience and to exploit its own special capabilities.
Reference: [5] <editor> Puma Quintessential Kernel Guide. </editor> <address> http://www.cs.sandia.gov/~rolf/puma/puma os/qk guide/qkguide1.html. </address>
Reference-contexts: This approach has the advantage that a process can access and modify its own data structures without having to issue kernel traps, but also raises the issues of reliability|the QK needs to validate the address values obtained from a shared structure|and of using atomic actions on the shared structures <ref> [5] </ref>. Figure 3 gives a simplified view of the Puma process representation. The QK also maintains a small amount of additional information about the state of the process, e.g. the register context.
Reference: [6] <author> Executable and Linkable Format (ELF). </author> <title> Tool Interface Standards 10 Portable Formats Specification, </title> <note> Version 1.1 . http://sunsite.unc.edu/pub/Linux/GCC/elf.doc.tar.gz </note>
Reference: [7] <author> Gerald Q. Maguire, Jr., and Jonathan M. Smith. </author> <month> (March, </month> <year> 1988). </year> <title> Process Migration: Effects on Scientific Computation. </title> <journal> SIGPLAN Notices, </journal> <volume> Vol 23, No 3, </volume> <pages> pages 102-106. </pages>
Reference: [8] <editor> Building an OSF/Puma Unified Executable. </editor> <address> http://www.cs.sandia.gov/~rolf/puma/unified/unidoc 2.html. </address>
Reference: [9] <editor> Puma User's Guide. </editor> <address> http://www.cs.sandia.gov/~rolf/puma/puma os/usr guide/usrguide toc.html. </address>
Reference: [10] <author> M. Beck, H. Boehme, M. Dziadzka, U. Kunitz, R. Magnus, D. Verworner. </author> <title> Linux Kernel Internals. </title> <publisher> Addison Wesley Longman Limited, </publisher> <address> England, </address> <year> 1996. </year>
Reference-contexts: A typical address space is shown in figure ??. 3.3 The Linux Operating System Linux is a freely available operating system for PCs. It is compatible with the POSIX 1003.1 standard and includes large areas of the functions of UNIX System V and BSD 4.3 <ref> [17, 10] </ref>. The operating system's source code is distributed under the GNU public license, thus everyone can use, copy, and modify the code freely. 5 Linux includes traditional operating system services such as multi-tasking support, demand-loading of executables with copy-on-write, demand paging, and support for TCP/IP protocol suite.
Reference: [11] <editor> Puma Library Writer's Guide. </editor> <address> http://www.cs.sandia.gov/~rolf/puma/puma os/lib writer/libwriter toc.html. </address>
Reference-contexts: The call wedge mechanism can be used as the basis for a mechanism to migrate processes between operating systems. During preliminary testing certain important elements of the support environment, such as a unified library for x86 machines, a Linux portal interface <ref> [11] </ref>, and a Linux kernel port to an MPP node, were still under development. Therefore the experimental migration mechanism implementation and the testing program had to be adapted to the environment available at the time. The successful test of the mechanism proved that migration from Puma to Linux is possible.
Reference: [12] <editor> Puma PCT Writer's Guide. </editor> <address> http://www.cs.sandia.gov/~rolf/puma/puma os/pct writer/pctwriter toc.html. </address>
Reference: [13] <author> Mukesh Singhal, Niranjan G. Shivaratri. </author> <title> Advanced Concepts in Operating Systems. </title> <publisher> McGraw Hill, </publisher> <address> USA, </address> <year> 1994. </year>
Reference-contexts: The successful test of the mechanism proved that migration from Puma to Linux is possible. As the remaining underlying functionality is added to the system, the migration mechanisms will be extended commensurately. In particular, we will add a marker-based communication forwarding mechanism (cf. the Chandy-Lamport global state recording algorithm <ref> [13] </ref>), as well as investigating methods to reduce migration time through analysis of address space characteristics (e.g. empty pages) and through on-the-fly compression.
Reference: [14] <editor> Puma Overview. </editor> <address> http://www.cs.sandia.gov/~rolf/puma/puma os/overview.html. </address>
Reference: [15] <author> Stephen R. Wheat, Arthur B. Maccabe, Rolf Riesen, David W. van Dresser, and T. Mack Stallcup. </author> <year> (1994). </year> <title> PUMA: An Operating System for Massively Parallel Systems. </title> <booktitle> Proceedings of the Twenty-Seventh Annual Hawaii International Conference on System Sciences, </booktitle> <pages> pages 56-65. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: However, Puma has been developed for an environment in which the communication network is trusted and controlled by the kernel. In such an environment there is no need to authenticate messages and therefore many of the functions that the kernel or an application process needs to perform are simplified <ref> [15] </ref>. 3 The Puma architecture is based on three levels (see figure 2). The quintessential kernel (QK), which provides basic communication facilities and address space protection, is the lowest level. The process control thread (PCT) occupies the next level. The PCT provides process management facilities and group level protection. <p> Multiple resource management policies are possible because, although there can be only one PCT per node, one may have several PCTs to choose from, each one having a different management policy. Puma message passing is based on a new concept known as a portal <ref> [15, 16] </ref>, which avoid delays due to buffer copying and switches between user and kernel modes. A portal is essentially an opening in a process's address space from which data can be directly read or to which data can be directly written using message passing. <p> On an Intel Paragon, inter-node communication rates in excess of 160MB/sec have been achieved in contrast to just 55MB/sec when memory copies are required <ref> [15] </ref>. Another interesting feature of Puma is that it maintains various data structures about a process|including message passing structures| in user space. This gives a process the flexibility to manipulate these structures without having to pay the cost of trapping to the 4 kernel.
Reference: [16] <author> Lance Shuler, Chu Jong, Rolf Riesen, David W. van Dresser, Arthur B. Maccabe, Lee Ann Fisk, and T. Mack Stallcup. </author> <month> (June, </month> <year> 1995). </year> <title> Proceedings of the Intel Supercomputer User's Group. </title> <booktitle> 1995 Annual North America User's Conference. </booktitle>
Reference-contexts: In addition, the PCT may initiate contact with an available server on behalf of a user process. The QK and the PCT work together to provide a complete operating system <ref> [16] </ref>. Some attractive features result by splitting operating system functionality between the QK and the PCT. These include fault tolerance and multiple resource management policies. Software fault tolerance is realizable due to the small size and well defined functionality of the QK. <p> Multiple resource management policies are possible because, although there can be only one PCT per node, one may have several PCTs to choose from, each one having a different management policy. Puma message passing is based on a new concept known as a portal <ref> [15, 16] </ref>, which avoid delays due to buffer copying and switches between user and kernel modes. A portal is essentially an opening in a process's address space from which data can be directly read or to which data can be directly written using message passing.
Reference: [17] <author> Matt Welsh and Lar Kaufman. </author> <title> Running Linux. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> USA, </address> <year> 1995. </year>
Reference-contexts: A typical address space is shown in figure ??. 3.3 The Linux Operating System Linux is a freely available operating system for PCs. It is compatible with the POSIX 1003.1 standard and includes large areas of the functions of UNIX System V and BSD 4.3 <ref> [17, 10] </ref>. The operating system's source code is distributed under the GNU public license, thus everyone can use, copy, and modify the code freely. 5 Linux includes traditional operating system services such as multi-tasking support, demand-loading of executables with copy-on-write, demand paging, and support for TCP/IP protocol suite.
Reference: [18] <author> Charles M. Shub. </author> <month> (February, </month> <year> 1990). </year> <title> Native Code Process-Originated Migration In A Heterogeneous Environment. </title> <booktitle> Proceedings of the 1990 Computer Science Conference, </booktitle> <pages> pages 266-270. </pages>
Reference-contexts: With the advent of heterogeneous computing, interest has increased in providing migration for systems with differing hardware or operating system software. Various motivations have been identified for including a migration mechanism in an operating system <ref> [1, 2, 18, 26] </ref>. In our case, we are primarily interested in two benefits: the utilization of operating system capabilities not available on the current node, and supporting fault resilience by migrating processes away from nodes that may have suffered a partial failure. <p> This was not a significant limitation because most of the work was conducted for workstation clusters typically consisting of compatible machines. However, to fully utilize current systems that are heterogeneous in either hardware or system software requires a heterogeneous migration mechanism. Shub <ref> [18, 19] </ref> presents a "fat binary" approach to the heterogeneous migration issue. His prototype mechanism is implemented under the V system [24] which already supports homogeneous migration, and focuses on a restricted class of C programs with no unions.
Reference: [19] <author> F. Brent Dubach, Robert M. Rutherford, Charles M. Shub. </author> <month> (February, </month> <year> 1989). </year> <title> Process-Originated Migration in a Heterogeneous Environment. </title> <booktitle> Proceedings of the 1989 Computer Science Conference, </booktitle> <pages> pages 98-102. </pages>
Reference-contexts: This was not a significant limitation because most of the work was conducted for workstation clusters typically consisting of compatible machines. However, to fully utilize current systems that are heterogeneous in either hardware or system software requires a heterogeneous migration mechanism. Shub <ref> [18, 19] </ref> presents a "fat binary" approach to the heterogeneous migration issue. His prototype mechanism is implemented under the V system [24] which already supports homogeneous migration, and focuses on a restricted class of C programs with no unions.
Reference: [20] <author> Marvin M. Theimer and Barry Hayes. </author> <month> (May, </month> <year> 1991). </year> <title> Heterogeneous Process Migration by Recompilation. </title> <booktitle> IEEE 11th International Conference on Distributed Computing Systems, </booktitle> <address> Arlington, Texas, </address> <pages> pages 18-25. </pages>
Reference-contexts: The translation procedures use the symbol tables generated by the compiler and a heap storage management package to find all data elements of a process and translate them to the representation of the target machine. 8 Theimer and Hayes <ref> [20] </ref> propose a different approach. In effect, the running state of a process is translated from its representation on one machine to an equivalent, machine-independent source code representation which is then recompiled on the destination machine.
Reference: [21] <author> M. L. Powell and B. P. Miller. </author> <month> (October, </month> <year> 1983). </year> <title> Process migration in DEMOS/MP. </title> <booktitle> Proceedings of the 9th Symposium on Operating systems Principles, </booktitle> <pages> pages 110-119. 11 </pages>
Reference: [22] <author> J. Ousterhout, A. Cherenson, F. Douglis, M. Nelson, and B. Welch. </author> <month> (February, </month> <year> 1988). </year> <title> The Sprite Network Operating System. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 23-26. </pages>
Reference: [23] <author> A. Barak and A. Litman. </author> <month> (August, </month> <year> 1985). </year> <title> MOS: a Multicomputer Distributed Operating System. </title> <journal> Software|Practice and Experience, </journal> <volume> 15(8) </volume> <pages> 725-737. </pages>
Reference: [24] <author> D. R. Cheriton. </author> <month> (March, </month> <year> 1988). </year> <title> The V Distributed System. </title> <journal> Communications of the ACM, </journal> <volume> 31(3) </volume> <pages> 314-333. </pages>
Reference-contexts: However, to fully utilize current systems that are heterogeneous in either hardware or system software requires a heterogeneous migration mechanism. Shub [18, 19] presents a "fat binary" approach to the heterogeneous migration issue. His prototype mechanism is implemented under the V system <ref> [24] </ref> which already supports homogeneous migration, and focuses on a restricted class of C programs with no unions. A process consists of a single address space with a single thread of control and a migration is requested by a process itself.
Reference: [25] <author> M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <month> (Summer, </month> <year> 1986). </year> <title> Mach: A New Kernel Foundation for UNIX Development. </title> <booktitle> Proceedings of the Summer USENIX Conference, </booktitle> <pages> pages 93-112. </pages>
Reference: [26] <author> M. J. Smith. </author> <month> (July, </month> <year> 1988). </year> <title> A Survey of Process Migration Mechanisms. </title> <journal> Operating Systems Review, </journal> <volume> 22(3) </volume> <pages> 28-40. </pages>
Reference-contexts: With the advent of heterogeneous computing, interest has increased in providing migration for systems with differing hardware or operating system software. Various motivations have been identified for including a migration mechanism in an operating system <ref> [1, 2, 18, 26] </ref>. In our case, we are primarily interested in two benefits: the utilization of operating system capabilities not available on the current node, and supporting fault resilience by migrating processes away from nodes that may have suffered a partial failure. <p> No such problems are encountered in the present case. 7 4 Related Work Process migration has been implemented as a feature of several operating systems <ref> [26, ?] </ref>. A process state is represented by two components: the initial state|the initial executable image of a process before execution begins|and the changes that have occurred due to execution. Process migration mechanisms follow variations of the following general steps: 1.
Reference: [27] <author> D. L. Eager, E. D. Lazowska, J. Zahorjan. </author> <month> (May, </month> <year> 1988). </year> <title> The Limited Performance Benefits of Migrating Active Processes For Load Sharing. </title> <booktitle> Proceedings of the 1988 Sigmetrics Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 63-72. 12 </pages>
References-found: 27

