URL: http://www.isse.gmu.edu:80/~csis/publications/o91dcmp.ps
Refering-URL: http://www.isse.gmu.edu:80/~csis/publication.html
Root-URL: 
Title: A Novel Decomposition of Multilevel Relations Into Single-Level Relations  
Author: Sushil Jajodia and Ravi Sandhu 
Address: Fairfax, VA 22030-4444  
Affiliation: Center for Secure Information Systems and Department of Information and Software Systems Engineering George Mason University,  
Date: May 20-22, 1991, pages 300-313.  
Note: Proceedings of IEEE Symposium on Security and Privacy, Oakland, California,  
Abstract: In this paper we give a new decomposition algorithm that breaks a multilevel relation into single-level relations and a new recovery algorithm which reconstructs the original multilevel relation from the decomposed single-level relations. There are several novel aspects to our decomposition and recovery algorithms which provide substantial advantages over previous proposals: (1) Our algorithms are formulated in the context of an operational semantics for multilevel relations, defined here by generalizing the usual update operations of SQL to multilevel relations. (2) Our algorithms, with minor modifications, can easily accommodate alternative update semantics which have been proposed in the literature. (3) Our algorithms are efficient because recovery is based solely on union-like operations without any use of joins. (4) Our decomposition is intuitively and theoretically simple giving us a sound basis for correctness. In this paper we also argue that some of the alternate update semantics which have been proposed for multilevel relations should be available as options, but should certainly not be made an integral part of the data model. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> "Multilevel Data Management Security," Committee on Multilevel Data Management Security, Air Force Studies Board, National Research Council, </institution> <address> Washington, DC (1983). </address>
Reference-contexts: We have also made the case that some of the alternate update semantics which have been proposed|notably the dynamic mvd of [18]|should be available as options but should certainly not be made an integral part of the data model. Several researchers <ref> [1, 5, 7, 8, 12] </ref> have expressed concern about the expected performance of database systems based on kernelized architecture. We believe that the new decomposition algorithm can be effectively used to alleviate many of these concerns.
Reference: [2] <author> Date, C.J. </author> <title> An Introduction to Database Systems. Volume II, </title> <publisher> Addison-Wesley, </publisher> <year> (1983). </year>
Reference-contexts: Several instances that have realistic and useful interpretations cannot be re alized in SeaView [13, 15]. 4. Left Outer Joins. The SeaView recovery algorithm is based on the left outer join of relations. There are many theoretical complications and pitfalls which arise with outer joins (see, for exam ple, <ref> [2] </ref>). In [13], Jajodia and Sandhu have given a modified version of the SeaView decomposition and recovery algorithms. They store the relation in figure 1 as a collection of twelve single-level relations (four primary key group relations and eight attribute group relations) given in figure 5.
Reference: [3] <author> Denning, D.E., Lunt, T.F., Schell, R.R., Heck-man, M., and Shockley, W.R. </author> <title> "A Multilevel Relational Data Model." </title> <booktitle> Proc. IEEE Symposium on Security and Privacy, </booktitle> <month> 220-234 </month> <year> (1987). </year>
Reference-contexts: Unlike these proposals, in the Secure Data Views (SeaView) project security classifications are assigned to individual data elements of the tuples of a relation <ref> [3, 4, 17] </ref>. For example see figure 1. Subjects having different clearances see different versions of the fl This work was partially supported by the U.S. Air Force, Rome Air Development Center through subcontract #C/UB-49;D.O.No.0042 of prime contract #F-30602-88-D-0026, Task B-O-3610 with CALSPAN-UB Research Center. <p> They all require the functional dependency (fd) component given above, but in addition impose some other condition. For instance the SeaView definition of PI has two requirements: in addition to the fd component it has a second, multival-ued dependency (mvd) component <ref> [3, 17] </ref>. As another example, Lunt and Hsieh [18] have recently given a definition of PI which has the usual fd requirement plus a dynamic mvd requirement. <p> This section discusses the relationship between our algorithms and these options. Our algorithms can accommodate the SeaView MVD requirement <ref> [3, 4, 17] </ref> most easily. No changes are required in the decomposition algorithm; only recovery algorithm needs to be modified. Steps 1 and 2 of the recovery algorithm remain the same as before. Steps 3 and 4 are changed as follows: 3 0 . <p> As a concrete illustration of our concern consider the dynamic mvd PI property of [18] which has been proposed as a replacement for the original mvd PI property of SeaView <ref> [3, 4, 17] </ref> in response to criticism of the latter in [15]. To understand the implications of dynamic mvd consider the relation SOD given in figure 15 where it is shown that initially U, C, and S users see the same data. Now suppose a S-user executes the following update.
Reference: [4] <author> Denning, D.E., Lunt, T.F., Schell, R.R., Shock-ley, W.R. and Heckman, M. </author> <title> "The SeaView Security Model." </title> <booktitle> Proc. IEEE Symposium on Security and Privacy, </booktitle> <month> 218-233 </month> <year> (1988). </year>
Reference-contexts: Unlike these proposals, in the Secure Data Views (SeaView) project security classifications are assigned to individual data elements of the tuples of a relation <ref> [3, 4, 17] </ref>. For example see figure 1. Subjects having different clearances see different versions of the fl This work was partially supported by the U.S. Air Force, Rome Air Development Center through subcontract #C/UB-49;D.O.No.0042 of prime contract #F-30602-88-D-0026, Task B-O-3610 with CALSPAN-UB Research Center. <p> This section discusses the relationship between our algorithms and these options. Our algorithms can accommodate the SeaView MVD requirement <ref> [3, 4, 17] </ref> most easily. No changes are required in the decomposition algorithm; only recovery algorithm needs to be modified. Steps 1 and 2 of the recovery algorithm remain the same as before. Steps 3 and 4 are changed as follows: 3 0 . <p> As a concrete illustration of our concern consider the dynamic mvd PI property of [18] which has been proposed as a replacement for the original mvd PI property of SeaView <ref> [3, 4, 17] </ref> in response to criticism of the latter in [15]. To understand the implications of dynamic mvd consider the relation SOD given in figure 15 where it is shown that initially U, C, and S users see the same data. Now suppose a S-user executes the following update.
Reference: [5] <author> Froscher, J. N. and Meadows, C., </author> <title> "Achieving a Trusted Database Management System Using Parallelism," Database Security, II: Status and Prospects, Landwehr, </title> <editor> C.E. (editor), </editor> <publisher> North-Holland, </publisher> <pages> pages 151-160 (1989). </pages>
Reference-contexts: We have also made the case that some of the alternate update semantics which have been proposed|notably the dynamic mvd of [18]|should be available as options but should certainly not be made an integral part of the data model. Several researchers <ref> [1, 5, 7, 8, 12] </ref> have expressed concern about the expected performance of database systems based on kernelized architecture. We believe that the new decomposition algorithm can be effectively used to alleviate many of these concerns.
Reference: [6] <author> Garvey, C. </author> <title> "Multilevel Data Storage Design." </title> <institution> TRW Defense Systems Group (1986). </institution>
Reference-contexts: A major issue is how access classes are assigned to data stored in relations. The proposals have ranged from assigning access class to relations (as in [9]), assigning access classes to individual tuples in a relation (as in <ref> [6] </ref>), or assigning access classes to individual attributes of a relation (as in [11]). Unlike these proposals, in the Secure Data Views (SeaView) project security classifications are assigned to individual data elements of the tuples of a relation [3, 4, 17]. For example see figure 1.
Reference: [7] <author> Garvey, C., Hinke, T., Jensen, N., Solomon, J., and Wu, A., </author> <title> "A Layered TCB Implementation Versus the Hinke-Schaefer Approach," Database Security, III: Status and Prospects, Spooner, </title> <editor> D. L. and Landwehr, C. (editors), </editor> <publisher> North-Holland, </publisher> <pages> pages 151-165 (1990). </pages>
Reference-contexts: We have also made the case that some of the alternate update semantics which have been proposed|notably the dynamic mvd of [18]|should be available as options but should certainly not be made an integral part of the data model. Several researchers <ref> [1, 5, 7, 8, 12] </ref> have expressed concern about the expected performance of database systems based on kernelized architecture. We believe that the new decomposition algorithm can be effectively used to alleviate many of these concerns.
Reference: [8] <author> Graubart, R., </author> <title> "A Comparison of Three Secure DBMS Architectures," Database Security, III: Status and Prospects, Spooner, </title> <editor> D. L. and Landwehr, C. (editors), </editor> <publisher> North-Holland, </publisher> <pages> pages 167-190 (1990). </pages>
Reference-contexts: We have also made the case that some of the alternate update semantics which have been proposed|notably the dynamic mvd of [18]|should be available as options but should certainly not be made an integral part of the data model. Several researchers <ref> [1, 5, 7, 8, 12] </ref> have expressed concern about the expected performance of database systems based on kernelized architecture. We believe that the new decomposition algorithm can be effectively used to alleviate many of these concerns.
Reference: [9] <author> Grohn, M.J. </author> <title> "A Model of a Protected Data Management System." </title> <type> Technical Report ESD-TR-76-289, I.P. </type> <institution> Sharp Associates Ltd., </institution> <year> (1976). </year>
Reference-contexts: 1 INTRODUCTION In recent years, there have been several efforts to build multilevel secure relational database management systems (DBMSs). A major issue is how access classes are assigned to data stored in relations. The proposals have ranged from assigning access class to relations (as in <ref> [9] </ref>), assigning access classes to individual tuples in a relation (as in [6]), or assigning access classes to individual attributes of a relation (as in [11]).
Reference: [10] <author> Haigh, J. T., O'Brien, R. C., and Thomsen, D. J. </author> <title> "The LDV Secure Relational DBMS Model." Database Security IV: Status and Prospects, </title> <editor> Ja-jodia, S. and Landwehr, C. (editors), </editor> <address> North-Holland, </address> <note> to appear. </note>
Reference-contexts: This of course assumes that the update operation on R c was successful. Unfortunately, the core integrity properties do not uniquely determine how an update by a c-user to R c should be reflected in updates to R c 0 &gt;c . Several different options have been proposed <ref> [10, 16, 17, 18] </ref>. <p> Same as step 4 of the original algorithm. Our decomposition as well as recovery algorithms will have to be modified to accommodate the single tuple per tuple class approach of [19] or the closely related single maintenance level attribute approach adopted by the LDV model <ref> [10, 21] </ref>. These modifications are straightforward. This brings us to the dynamic mvd requirement proposed in [18]. It too will require modifications to both our decomposition and recovery algorithms along the lines discussed in [15].
Reference: [11] <author> Hinke T.H. and Schaefer M. </author> <title> "Secure Data Management System." </title> <type> Technical Report RADC-TR-75-266, </type> <institution> System Development Corporation (1975). </institution>
Reference-contexts: The proposals have ranged from assigning access class to relations (as in [9]), assigning access classes to individual tuples in a relation (as in [6]), or assigning access classes to individual attributes of a relation (as in <ref> [11] </ref>). Unlike these proposals, in the Secure Data Views (SeaView) project security classifications are assigned to individual data elements of the tuples of a relation [3, 4, 17]. For example see figure 1.
Reference: [12] <author> Jajodia, S. and Kogan, B. </author> <title> "Transaction Process--ing in Multilevel-Secure Databases Using Replicated Architecture," </title> <booktitle> IEEE Symp. on Research in Security and Privacy, </booktitle> <address> Oakland, Calif., </address> <month> May 7-9, pages 360-368 </month> <year> (1990). </year>
Reference-contexts: We have also made the case that some of the alternate update semantics which have been proposed|notably the dynamic mvd of [18]|should be available as options but should certainly not be made an integral part of the data model. Several researchers <ref> [1, 5, 7, 8, 12] </ref> have expressed concern about the expected performance of database systems based on kernelized architecture. We believe that the new decomposition algorithm can be effectively used to alleviate many of these concerns.
Reference: [13] <author> Jajodia, S. and Sandhu, </author> <title> R.S. "Polyinstantiation Integrity in Multilevel Relations." </title> <booktitle> Proc. IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, California, </address> <month> May </month> <year> 1990, </year> <pages> pages 104-115. </pages>
Reference-contexts: Incompleteness. The SeaView decomposition puts severe limitations on the expressive capability of the database. Several instances that have realistic and useful interpretations cannot be re alized in SeaView <ref> [13, 15] </ref>. 4. Left Outer Joins. The SeaView recovery algorithm is based on the left outer join of relations. There are many theoretical complications and pitfalls which arise with outer joins (see, for exam ple, [2]). <p> Left Outer Joins. The SeaView recovery algorithm is based on the left outer join of relations. There are many theoretical complications and pitfalls which arise with outer joins (see, for exam ple, [2]). In <ref> [13] </ref>, Jajodia and Sandhu have given a modified version of the SeaView decomposition and recovery algorithms. They store the relation in figure 1 as a collection of twelve single-level relations (four primary key group relations and eight attribute group relations) given in figure 5. <p> In this paper, we take a fresh look at the decomposition algorithm that breaks a multilevel relation into single-level ones and the recovery algorithm which reconstructs the original multilevel relation from the decomposed single-level relations. We give decomposition and recovery algorithms that have several advantages over previous algorithms <ref> [13, 17] </ref>: 1. Unlike the previous algorithms, the new decomposition and recovery algorithms are based on operational semantics for the update operations on multilevel relations. The semantics of multilevel relations are defined here by generalizing the usual update operations of SQL. 2. <p> This is in contrast to the SeaView decomposition [17] and the Jajodia-Sandhu decomposition <ref> [13] </ref>, both of which require several single-level relations at each access class (compare figures 3 and 5 with figure 6). A c-user always sees and interacts with the c-instance R c .
Reference: [14] <author> Jajodia, S. and Sandhu, </author> <title> R.S. "A Formal Framework for Single Level Decomposition of Multilevel Relations." </title> <booktitle> Proc. IEEE Workshop on Computer Security Foundations, </booktitle> <address> Franconia, New Hamp-shire, </address> <month> June </month> <year> 1990, </year> <pages> pages 152-158. </pages>
Reference: [15] <author> Jajodia, S. and Sandhu, </author> <title> R.S. "Polyinstantia-tion Integrity in Multilevel Relations Revisited." Database Security IV: Status and Prospects, </title> <editor> Ja-jodia, S. and Landwehr, C. (editors), </editor> <address> North-Holland, </address> <note> to appear. </note>
Reference-contexts: Incompleteness. The SeaView decomposition puts severe limitations on the expressive capability of the database. Several instances that have realistic and useful interpretations cannot be re alized in SeaView <ref> [13, 15] </ref>. 4. Left Outer Joins. The SeaView recovery algorithm is based on the left outer join of relations. There are many theoretical complications and pitfalls which arise with outer joins (see, for exam ple, [2]). <p> These modifications are straightforward. This brings us to the dynamic mvd requirement proposed in [18]. It too will require modifications to both our decomposition and recovery algorithms along the lines discussed in <ref> [15] </ref>. The major difference is that in the single-level relations D c we will sometimes require `?' for classification attributes (rather than just for data attributes as in section 3). Details on the exact modifications are omitted due to lack of space. <p> As a concrete illustration of our concern consider the dynamic mvd PI property of [18] which has been proposed as a replacement for the original mvd PI property of SeaView [3, 4, 17] in response to criticism of the latter in <ref> [15] </ref>. To understand the implications of dynamic mvd consider the relation SOD given in figure 15 where it is shown that initially U, C, and S users see the same data. Now suppose a S-user executes the following update.
Reference: [16] <author> Jajodia, S. , Sandhu, R.S., and Sibley E., </author> <title> "Update Semantics of Multilevel Relations." </title> <booktitle> Proc. 6th Annual Computer Security Applications Conf., </booktitle> <address> Tucson, AZ, </address> <month> December </month> <year> 1990, </year> <pages> pages 103-112. </pages>
Reference-contexts: In general AK will consist of multiple attributes. We now list four integrity requirements which we feel must be satisfied by all multilevel relations. We refer the readers to <ref> [16] </ref> for their intuitive justification. We use the notation t [A i ] to mean the value corresponding to the attribute A i in tuple t, and similarly for t [C i ] and t [T C]. Property 1 [Entity Integrity] Let AK be the apparent key of R. <p> The update is successful if the resulting relation satisfies polyinstantiation integrity. Otherwise the update is rejected and the original relation is left unchanged. The readers should refer to <ref> [16] </ref> for additional explanation. k Another alternative in such cases is to reject the UPDATE. This amounts to denial-of-service to the c-user attempting this UPDATE due to the actions of some user below c. <p> This of course assumes that the update operation on R c was successful. Unfortunately, the core integrity properties do not uniquely determine how an update by a c-user to R c should be reflected in updates to R c 0 &gt;c . Several different options have been proposed <ref> [10, 16, 17, 18] </ref>. <p> Unfortunately, the core integrity properties do not uniquely determine how an update by a c-user to R c should be reflected in updates to R c 0 &gt;c . Several different options have been proposed [10, 16, 17, 18]. In this paper we will adopt the minimal propagation rule <ref> [16] </ref> which introduces exactly those tuples in R c 0 &gt;c that are needed to preserve inter-instance property, i.e., put t 0 and t 00 (if t 00 exists and survives subsumption) in each R c 0 &gt;c and nothing else. Alternate semantics are discussed in section 6.
Reference: [17] <author> Lunt, T.F., Denning, D.E., Schell, R.R., Heck-man, M. and Shockley, W.R. </author> <title> "The SeaView Security Model." </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(6) </volume> <month> 593-607 </month> <year> (1990). </year>
Reference-contexts: Unlike these proposals, in the Secure Data Views (SeaView) project security classifications are assigned to individual data elements of the tuples of a relation <ref> [3, 4, 17] </ref>. For example see figure 1. Subjects having different clearances see different versions of the fl This work was partially supported by the U.S. Air Force, Rome Air Development Center through subcontract #C/UB-49;D.O.No.0042 of prime contract #F-30602-88-D-0026, Task B-O-3610 with CALSPAN-UB Research Center. <p> In this paper, we take a fresh look at the decomposition algorithm that breaks a multilevel relation into single-level ones and the recovery algorithm which reconstructs the original multilevel relation from the decomposed single-level relations. We give decomposition and recovery algorithms that have several advantages over previous algorithms <ref> [13, 17] </ref>: 1. Unlike the previous algorithms, the new decomposition and recovery algorithms are based on operational semantics for the update operations on multilevel relations. The semantics of multilevel relations are defined here by generalizing the usual update operations of SQL. 2. <p> They all require the functional dependency (fd) component given above, but in addition impose some other condition. For instance the SeaView definition of PI has two requirements: in addition to the fd component it has a second, multival-ued dependency (mvd) component <ref> [3, 17] </ref>. As another example, Lunt and Hsieh [18] have recently given a definition of PI which has the usual fd requirement plus a dynamic mvd requirement. <p> This of course assumes that the update operation on R c was successful. Unfortunately, the core integrity properties do not uniquely determine how an update by a c-user to R c should be reflected in updates to R c 0 &gt;c . Several different options have been proposed <ref> [10, 16, 17, 18] </ref>. <p> This is in contrast to the SeaView decomposition <ref> [17] </ref> and the Jajodia-Sandhu decomposition [13], both of which require several single-level relations at each access class (compare figures 3 and 5 with figure 6). A c-user always sees and interacts with the c-instance R c . <p> This section discusses the relationship between our algorithms and these options. Our algorithms can accommodate the SeaView MVD requirement <ref> [3, 4, 17] </ref> most easily. No changes are required in the decomposition algorithm; only recovery algorithm needs to be modified. Steps 1 and 2 of the recovery algorithm remain the same as before. Steps 3 and 4 are changed as follows: 3 0 . <p> As a concrete illustration of our concern consider the dynamic mvd PI property of [18] which has been proposed as a replacement for the original mvd PI property of SeaView <ref> [3, 4, 17] </ref> in response to criticism of the latter in [15]. To understand the implications of dynamic mvd consider the relation SOD given in figure 15 where it is shown that initially U, C, and S users see the same data. Now suppose a S-user executes the following update.
Reference: [18] <author> Lunt, T.F. and Hsieh, D. </author> <title> "Update Semantics for a Multilevel Relational Database." Database Security IV: Status and Prospects, </title> <editor> Jajodia, S. and Landwehr, C. (editors), </editor> <address> North-Holland, </address> <note> to appear. </note>
Reference-contexts: They all require the functional dependency (fd) component given above, but in addition impose some other condition. For instance the SeaView definition of PI has two requirements: in addition to the fd component it has a second, multival-ued dependency (mvd) component [3, 17]. As another example, Lunt and Hsieh <ref> [18] </ref> have recently given a definition of PI which has the usual fd requirement plus a dynamic mvd requirement. <p> This of course assumes that the update operation on R c was successful. Unfortunately, the core integrity properties do not uniquely determine how an update by a c-user to R c should be reflected in updates to R c 0 &gt;c . Several different options have been proposed <ref> [10, 16, 17, 18] </ref>. <p> These modifications are straightforward. This brings us to the dynamic mvd requirement proposed in <ref> [18] </ref>. It too will require modifications to both our decomposition and recovery algorithms along the lines discussed in [15]. The major difference is that in the single-level relations D c we will sometimes require `?' for classification attributes (rather than just for data attributes as in section 3). <p> While we believe these semantics are acceptable as options in certain specific situations, we object to efforts to build these semantics into the data model and impose them on each and every application. As a concrete illustration of our concern consider the dynamic mvd PI property of <ref> [18] </ref> which has been proposed as a replacement for the original mvd PI property of SeaView [3, 4, 17] in response to criticism of the latter in [15]. <p> The question arises as to how this change should propagate to SOD S . With the minimal propagation rule of section 3 the effect on SOD S is as shown in figure 18. With the dynamic mvd rule of <ref> [18] </ref> the effect on SOD S is as shown in figure 19. The difference in this example lies in the bottommost tuple of figure 19 which is not present in figure 18. In more elaborate examples these extra tuples multiply rapidly. The justification given by [18] for the dynamic mvd amounts <p> the dynamic mvd rule of <ref> [18] </ref> the effect on SOD S is as shown in figure 19. The difference in this example lies in the bottommost tuple of figure 19 which is not present in figure 18. In more elaborate examples these extra tuples multiply rapidly. The justification given by [18] for the dynamic mvd amounts to the argument that if the two update statements above were executed in the opposite order, i.e., the C-user went first followed by the S-user, then SOD S would go from figure 15 to figure 17 and then to figure 19.
Reference: [19] <author> Sandhu, R.S., Jajodia, S. and Lunt, T. </author> <title> "A New Polyinstantiation Integrity Constraint for Multilevel Relations." </title> <booktitle> Proc. IEEE Workshop on Computer Security Foundations, </booktitle> <address> Franconia, New Hampshire, </address> <month> June </month> <year> 1990, </year> <pages> pages 159-165. </pages>
Reference-contexts: Delete from R c any tuple that has a `?' as a value. 5 0 . Same as step 4 of the original algorithm. Our decomposition as well as recovery algorithms will have to be modified to accommodate the single tuple per tuple class approach of <ref> [19] </ref> or the closely related single maintenance level attribute approach adopted by the LDV model [10, 21]. These modifications are straightforward. This brings us to the dynamic mvd requirement proposed in [18]. It too will require modifications to both our decomposition and recovery algorithms along the lines discussed in [15].
Reference: [20] <author> Schkolnick, M. and Sorenson, P. </author> <title> "The Effects of Denormalization on Database Performance." </title> <journal> The Australian Computer Journal, </journal> <volume> 14(1) </volume> <month> 12-18 (February </month> <year> 1982). </year>
Reference-contexts: This means that nearly all queries involving multiple attributes necessitate repeated (left outer) joins of several single-level relations. It is well-known that join is an expensive operation and should be avoided whenever possible (see, for example, <ref> [20] </ref>). 2. Spurious Tuples. Whenever a relation is stored as one or more fragments, it must be possible to reconstruct the original relation exactly from fragments. This, however, is not the case with the SeaView decomposition.
Reference: [21] <author> Stachour, P. D. and Thuraisingham B. </author> <title> "Design of LDV: A Multilevel Secure Relational Database Management System." </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 2(2) </volume> <month> 190-209 (June </month> <year> 1990). </year>
Reference-contexts: Same as step 4 of the original algorithm. Our decomposition as well as recovery algorithms will have to be modified to accommodate the single tuple per tuple class approach of [19] or the closely related single maintenance level attribute approach adopted by the LDV model <ref> [10, 21] </ref>. These modifications are straightforward. This brings us to the dynamic mvd requirement proposed in [18]. It too will require modifications to both our decomposition and recovery algorithms along the lines discussed in [15].
Reference: [22] <editor> Tsichritzis, D. C. and Lochovsky, F. H. </editor> <title> Data Models. </title> <publisher> Prentice-Hall, </publisher> <year> (1982). </year>
Reference-contexts: They are needed for integrity reasons in traditional databases, and additionally, for security reasons in multilevel secure databases. In a data model, there are two basic types of constraints: inherent constraints and explicit constraints (see, for example, <ref> [22] </ref>). The former type of constraint is an integral part of the structure of the data model. For example, in the hierarchical model all relationships must be in the form of a tree; in the relational model all data must be stored in a tabular form.
References-found: 22

