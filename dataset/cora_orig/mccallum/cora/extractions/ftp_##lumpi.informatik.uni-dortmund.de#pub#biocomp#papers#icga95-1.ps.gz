URL: ftp://lumpi.informatik.uni-dortmund.de/pub/biocomp/papers/icga95-1.ps.gz
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: nordin@ls11.informatik.uni-dortmund.de  banzhaf@ls11.informatik.uni-dortmund.de  
Title: Complexity Compression and Evolution  
Author: Peter Nordin Wolfgang Banzhaf 
Address: D-44221 Dortmund  D-44221 Dortmund  
Affiliation: Universitat Dortmund Fachbereich Informatik Lehrstuhl fur Systemanalyse  Universitat Dortmund Fachbereich Informatik Lehrstuhl fur Systemanalyse  
Abstract: Compression of information is an important concept in the theory of learning. We argue for the hypothesis that there is an inherent compression pressure towards short, elegant and general solutions in a genetic programming system and other variable length evolutionary algorithms. This pressure becomes visible if the size or complexity of solutions are measured without non-effective code segments called introns. The built in parsimony pressure effects complex fitness functions, crossover probability, generality, maximum depth or length of solutions, explicit parsimony, granularity of fitness function, initialization depth or length, and modulariz-ation. Some of these effects are positive and some are negative. In this work we provide a basis for an analysis of these effects and suggestions to overcome the negative implications in order to obtain the balance needed for successful evolution. An empirical investigation that supports our hypothesis is also presented.
Abstract-found: 1
Intro-found: 1
Reference: <author> J. </author> <booktitle> Koza (1994) Genetic Programming II, </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Different modularization techniques have been suggested for use with genetic programming, where the most thoroughly evaluated are automatically defined functions (ADF) <ref> (Koza 1994) </ref>. Other examples of modular-ization techniques are Module Acquisition (Angeline 1993) and The Encapsulation Operation (Koza 1992). All modularization techniques are ways of encapsulating blocks of code. ADFs encapsulate blocks that becomes subroutines which could be called from the main program or from another subroutine.
Reference: <author> J. </author> <booktitle> Koza (1992) Genetic Programming, </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: parts of the code within the program or block, in contrast to the intron parts. 2 Program Complexity, Effective Fitness and Evolution Genetic programs do not seem to favor parsimony in the sense that the evolved program structures become short and elegant measured with the absolute size of an individual <ref> (Koza 1992) </ref>. Instead, evolved programs seem to contain a lot of garbage and the solutions do not give an elegant impression when first examined. On the contrary, solutions look unnecessarily long and complex. <p> Let us say that we have a simple GP system with fitness proportional selection and crossover as genetic operators. The crossover operator could be any crossover operator exchanging blocks of code such as the standard tree based subtree exchanging crossover <ref> (Koza 1992) </ref> or two point bit string crossover (Nordin 1994). If we have an individual program with a high relative fitness in the population, it will be reproduced according to its fitness by the selection operator. <p> Different modularization techniques have been suggested for use with genetic programming, where the most thoroughly evaluated are automatically defined functions (ADF) (Koza 1994). Other examples of modular-ization techniques are Module Acquisition (Angeline 1993) and The Encapsulation Operation <ref> (Koza 1992) </ref>. All modularization techniques are ways of encapsulating blocks of code. ADFs encapsulate blocks that becomes subroutines which could be called from the main program or from another subroutine. A subroutine can be called more than once from the same program.
Reference: <author> L. </author> <title> Altenberg (1994) The Evolution of Evolvability in Genetic Programming. </title> <booktitle> In Advances in Genetic Programming, </booktitle> <editor> K. Kinnear, Jr. (ed.), </editor> <address> Cambridge, MA: </address> <publisher> MIT Press. pp47-74. </publisher>
Reference-contexts: This ability could depend on parameters like initial individual size, function set, and fitness function. The additions of introns could be viewed as a way for the program to self-regulate the crossover probability parameter or as a "defense against crossover" <ref> (Altenberg 1994) </ref>. We can formulate an equation with resemblance to the Schema Theorem (Holland 1975) for the relationship between the entities described above. Let C ej be the effective complexity of program j, and C aj its absolute complexity.
Reference: <author> J. </author> <booktitle> Holland (1975) Adaption in Natural and Artificial Systems, </booktitle> <address> Ann Arbor, MI: </address> <publisher> The University of Michigan Press. </publisher>
Reference-contexts: The additions of introns could be viewed as a way for the program to self-regulate the crossover probability parameter or as a "defense against crossover" (Altenberg 1994). We can formulate an equation with resemblance to the Schema Theorem <ref> (Holland 1975) </ref> for the relationship between the entities described above. Let C ej be the effective complexity of program j, and C aj its absolute complexity. Let p c be the standard genetic programming parameter giving the probability of crossover at the individual level.
Reference: <editor> P.J. Angeline, </editor> <booktitle> J.B Pollack (1993) Evolutionary Module Acqusition, In Proceedings of the Second Annual Conference On Evolutionary Programming, </booktitle> <address> La Jolla, CA: </address> <publisher> Evolutionary Programming Society. </publisher>
Reference-contexts: Different modularization techniques have been suggested for use with genetic programming, where the most thoroughly evaluated are automatically defined functions (ADF) (Koza 1994). Other examples of modular-ization techniques are Module Acquisition <ref> (Angeline 1993) </ref> and The Encapsulation Operation (Koza 1992). All modularization techniques are ways of encapsulating blocks of code. ADFs encapsulate blocks that becomes subroutines which could be called from the main program or from another subroutine. A subroutine can be called more than once from the same program.
Reference: <author> K. </author> <title> Kinnear (1993). Generality and Difficulty in Genetic Programming: Evolving a Sort. </title> <booktitle> In Proceeding of the fifth International Conference on Genetic Algorithms, </booktitle> <address> San Mateo, CA, </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: We have also seen that this could sometimes conflict with our goal of adapting to a specific fitness function. It has previously been noted that a shorter overall length of an evolved program seems to results in a program with more generic behavior <ref> (Kinnear 1993, Tackett 1993) </ref>. This could be made intuitively reasonable by many different examples.
Reference: <author> W.A. </author> <title> Tackett (1993). Genetic Programming for Feature Discovery and Image Discrimination. </title> <booktitle> In Proceeding of the fifth International Conference on Genetic Algorithms, </booktitle> <address> San Mateo, CA, </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: We have also seen that this could sometimes conflict with our goal of adapting to a specific fitness function. It has previously been noted that a shorter overall length of an evolved program seems to results in a program with more generic behavior <ref> (Kinnear 1993, Tackett 1993) </ref>. This could be made intuitively reasonable by many different examples.
Reference: <author> M. Li, P. </author> <title> Vitani (1990) Inductive Reasoning and Kolmorogov Complexity. </title> <journal> In Journal of Computer and System Sciences, </journal> <note> pp343-384 J.P. </note> <author> Nordin,F. Francone W. </author> <title> Banzhaf (1995b) Explicitly Defined Introns in Genetic Programming. </title> <booktitle> Submitted to the GP workshop at Machine Learning 1995, </booktitle> <address> Tahoe City, CA. </address>
Reference-contexts: The Principle of Occam's Razor can be formalized and put into a mathematical framework by algorithmic information theory and the Solomonoff-Levin distribution. For an excellent introduction to the relation between complexity and machine learning, see <ref> (Li 1990) </ref>. Normally when we evolve an algorithm with a genetic programming system, or when optimizing parameters from data, we want to be able to apply the solution to a much wider set of inputs than the ones given by the fitness cases.
References-found: 8

