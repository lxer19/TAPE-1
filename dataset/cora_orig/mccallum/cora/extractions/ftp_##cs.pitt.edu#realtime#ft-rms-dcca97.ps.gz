URL: ftp://cs.pitt.edu/realtime/ft-rms-dcca97.ps.gz
Refering-URL: http://www.cs.pitt.edu/FORTS/rt-ft-sch.html
Root-URL: 
Email: fghosh, melhem, mosseg@cs.pitt.edu  
Phone: telephone: (412) 624-8923, fax: (412) 624-8854  
Title: Fault-Tolerant Rate-Monotonic Scheduling  
Author: Sunondo Ghosh, Rami Melhem and Daniel Mosse 
Address: Pittsburgh Pittsburgh, PA 15260  
Affiliation: Department of Computer Science University of  
Abstract: Due to the critical nature of the tasks in hard real-time systems, it is essential that faults be tolerated. Several studies have shown that space applications, which have very high reliability requirements, have also very high transient faults frequency. Therefore, tolerance to this type of faults is essential in such applications. In this paper, we present a scheme which can be used to tolerate faults during the execution of preemptive real-time tasks. We describe a recovery scheme which can be used to re-execute tasks in the event of single and multiple transient faults and discuss conditions that must be met by any such recovery scheme. We then extend the Rate Monotonic Scheduling (RMS) scheme to provide tolerance for single and multiple transient faults. We derive schedulability bounds for sets of real-time tasks given the desired level of fault tolerance for each task or subset of tasks. Finally, we analyze and compare the bounds derived as a function of the amount of processing time reserved for the re-executions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N.C. Audsley, A. Burns, M.F. Richardson, and K. Tindell. </author> <title> Applying New Fault-Tolerant Rate-Monotonic Scheduling Scheduling Theory to Static Priority Pre-emptive Scheduling. </title> <journal> Software Engineering Journal, </journal> <volume> 8(5) </volume> <pages> 284-292, </pages> <month> Sept </month> <year> 1993. </year>
Reference-contexts: Another study done recently by Burns, Davis and Punnekkat [4] provides exact schedulability tests for fault-tolerant task sets. Time redundancy is employed to provide a predictable performance in the presence of failures. The response time analysis of <ref> [1] </ref> is extended to the fault tolerance approach. However, neither study [4, 32] derives utilization bounds 2 for the task sets, which is the main goal of this paper.
Reference: [2] <author> L. Sha B. Sprunt and J. Lehoczky. </author> <title> Aperiodic Task Scheduling for Hard-Real-Time Systems. </title> <journal> Journal of Real-Time Systems, </journal> <pages> pages 27-60, </pages> <year> 1989. </year>
Reference-contexts: The response time analysis of [1] is extended to the fault tolerance approach. However, neither study [4, 32] derives utilization bounds 2 for the task sets, which is the main goal of this paper. The bounds developed for scheduling aperiodic tasks along with periodic tasks <ref> [20, 2] </ref> can also be used for tolerating faults by considering the re-executing task to be an aperiodic task which arrives when the task fails. However, there are some problems with this approach.
Reference: [3] <author> J.T. Baldwin. </author> <title> Predicting and Estimating Real-Time Performance. Embedded Systems Programming, </title> <type> 8(2), </type> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: This policy was called Rate Monotonic Scheduling (RMS). In recent years, RMS has been used to schedule real-time task sets in a variety of critical applications ranging from navigation of satellites [7] to avionics [11, 18] to industrial process control <ref> [3] </ref>. However, RMS does not provide mechanisms for managing time redundancy, so that real-time tasks will complete within their deadlines even in the presence of faults. The goal of this paper is to derive new utilization bounds which include provisions for the re-execution of faulty tasks scheduled using RMS.
Reference: [4] <author> A. Burns, R. Davis, and S. Punnekkat. </author> <title> Feasibility Analysis of Fault-Tolerant Real-Time Task Sets. </title> <booktitle> In 8th Euromicro Workshop on Real-Time Systems, </booktitle> <month> Jun </month> <year> 1996. </year>
Reference-contexts: The goal of this paper is to derive new utilization bounds which include provisions for the re-execution of faulty tasks scheduled using RMS. We are aware of three previous attempts to incorporate time redundancy into rate monotonic scheduling <ref> [4, 30, 32] </ref> 1 . In [30], Pandya and Malek analyze the schedulability of a set of periodic tasks that are scheduled using RMS and tolerate a single fault. In the event of a fault, all unfinished tasks are re-executed. <p> Two algorithms are proposed to reserve time for the recovery of periodic real-time tasks on a uniprocessor [32]. The RMS analysis of [19] has been extended to include provisions for task re-executions. Another study done recently by Burns, Davis and Punnekkat <ref> [4] </ref> provides exact schedulability tests for fault-tolerant task sets. Time redundancy is employed to provide a predictable performance in the presence of failures. The response time analysis of [1] is extended to the fault tolerance approach. <p> Another study done recently by Burns, Davis and Punnekkat [4] provides exact schedulability tests for fault-tolerant task sets. Time redundancy is employed to provide a predictable performance in the presence of failures. The response time analysis of [1] is extended to the fault tolerance approach. However, neither study <ref> [4, 32] </ref> derives utilization bounds 2 for the task sets, which is the main goal of this paper.
Reference: [5] <author> A. Campbell, P. McDonald, and K. Ray. </author> <title> Single Event Upset Rates in Space. </title> <journal> IEEE Trans. on Nuclear Science, </journal> <volume> 39(6) </volume> <pages> 1828-1835, </pages> <month> Dec </month> <year> 1992. </year>
Reference-contexts: In some real-time systems such as satellites and space shuttles, transient faults occur at a much higher frequency than in general purpose systems <ref> [5] </ref>. In [5], an orbiting satellite containing a microelectronics test system was used to measure error rates in various semiconductor devices including microprocessor systems. <p> In some real-time systems such as satellites and space shuttles, transient faults occur at a much higher frequency than in general purpose systems <ref> [5] </ref>. In [5], an orbiting satellite containing a microelectronics test system was used to measure error rates in various semiconductor devices including microprocessor systems. <p> We believe the fault-tolerant RMS scheme is particularly useful in applications such as avionics [18] where RMS is used as a scheduling technique and retry is used as one of the fault tolerance mechanisms. The scheme is also useful in satellites which have a high rate of transient errors <ref> [5] </ref> and where RMS is used for navigation payload software [7].
Reference: [6] <author> X. Castillo, S.R. McConnel, </author> <title> and D.P. Siewiorek. Derivation and Caliberation of a Transient Error Reliability Model. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-31(7):658-671, </volume> <month> July </month> <year> 1982. </year>
Reference-contexts: The possible causes of transient faults include limitations in the accuracy of electromechanical devices, electromagnetic radiation received by interconnections (such as long buses acting like receiving antennas), power fluctuations not properly filtered by the power supply, and effects of ionizing radiation on semiconductor devices <ref> [6] </ref>. Several studies in the last two decades have concluded that transient faults are significantly more frequent than permanent faults [6, 12, 35]. <p> Several studies in the last two decades have concluded that transient faults are significantly more frequent than permanent faults <ref> [6, 12, 35] </ref>. In [35], measurements showed that transient faults are 30 times more frequent than permanent faults, while in [12], 83% of all faults were determined to be transient or intermittent. <p> In [35], measurements showed that transient faults are 30 times more frequent than permanent faults, while in [12], 83% of all faults were determined to be transient or intermittent. In <ref> [6] </ref>, tables were provided to show comparative rates of permanent and transient faults on several systems: the mean time to error (transient fault) varied from 44 hours to 328 hours, while the mean time to failure (permanent fault) varied from 800 to 4900 hours.
Reference: [7] <author> L. Doyle and J. Elzey. </author> <title> Successful Use of Rate Monotonic Theory on a Formidable Real Time System. </title> <booktitle> In 11th IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <pages> pages 74-78. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: This policy was called Rate Monotonic Scheduling (RMS). In recent years, RMS has been used to schedule real-time task sets in a variety of critical applications ranging from navigation of satellites <ref> [7] </ref> to avionics [11, 18] to industrial process control [3]. However, RMS does not provide mechanisms for managing time redundancy, so that real-time tasks will complete within their deadlines even in the presence of faults. <p> The scheme is also useful in satellites which have a high rate of transient errors [5] and where RMS is used for navigation payload software <ref> [7] </ref>.
Reference: [8] <author> J. Gaisler. </author> <title> Concurrent Error-detection and Modular Fault-tolerance in a 32-bit Processing Core for Embedded Space Flight Applications. </title> <booktitle> In Symp. on Fault Tolerant Computing (FTCS-24), </booktitle> <pages> pages 128-130. </pages> <publisher> IEEE, </publisher> <year> 1994. </year>
Reference-contexts: To avoid the catastrophic and costly consequences of system failure in critical real-time systems, it is essential that faults be detected and tolerated. Extensive research has been conducted on detecting faults using both hardware <ref> [8, 24, 26, 34] </ref> and software [13, 33, 36]. In [26], three error detection mechanisms are described which can be used to tolerate transient faults caused by heavy-ion radiation and power-supply disturbances. A survey of various types of watchdog processors for concurrent error detection is presented in [24]. <p> In [26], three error detection mechanisms are described which can be used to tolerate transient faults caused by heavy-ion radiation and power-supply disturbances. A survey of various types of watchdog processors for concurrent error detection is presented in [24]. In <ref> [8] </ref>, a processing core used for embedded space flight applications is provided with internal concurrent error-detection, mainly to detect transient faults. In [34], an approach is presented for the on-line detection of control flow errors caused by transient and intermittent faults using special built-in hardware.
Reference: [9] <author> S Ghosh. </author> <title> Guaranteeing Fault Tolerance through Scheduling in Real-Time Systems. </title> <type> PhD thesis, </type> <institution> University of Pittsburgh, </institution> <month> Aug </month> <year> 1996. </year>
Reference-contexts: For fault tolerance, the deadline of the re-executing task is important. Secondly, the recovery scheme to be used with the aperiodic schemes is not clear. Thirdly, we have compared the bounds developed for scheduling aperiodic tasks with the bounds developed in this paper, and have found a significant improvement <ref> [9] </ref>. Finally, the implementation of the recovery schemes described in the aperiodic servers have more overhead due to the complexity of those schemes. For these reasons, we do not discuss the bounds developed for aperiodic tasks in this paper. <p> Therefore, if U is minimum, then C 1 = (T 2 T 1 )(1 U B ). Similarly, given that B i+1 = (T i+1 T i )U B ; i = 1; : : : ; n 1, it can be shown (see <ref> [9] </ref>) that U is minimum when C i = T i+1 T i B i+1 which yields C i = (T i+1 T i )(1 U B ); i = 1; : : : ; n 1 (3) Fault-Tolerant Rate-Monotonic Scheduling Since the processor is fully utilized, T n = 2 <p> : : = h n1 2h 1 (9) h n = h n1 n1 ) (10) Fault-Tolerant Rate-Monotonic Scheduling Using (7), (8), (9) and (10), we get U 1F T RMS = (n 1)(1 U B )([2 (1 U B )] n1 1) + U B (11) We have derived <ref> [9] </ref> the same bound (11) for the case U B = U 1 and U B = U n .
Reference: [10] <author> S. Ghosh, R. Melhem, and D. Mosse. </author> <title> Enhancing Real-Time Schedules to Tolerate Transient Faults. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <month> Dec </month> <year> 1995. </year>
Reference-contexts: Transient faults in real-time systems are generally tolerated using time redundancy, which involves the retry or re-execution of any task running during the occurrence of a transient fault <ref> [10, 15, 17, 31] </ref>. This is a relatively inexpensive method of providing fault-tolerance since not much extra hardware is required. For example, in space and aviation applications, reducing the hard Fault-Tolerant Rate-Monotonic Scheduling ware is important since that decreases weight, size, power consumption, and cost. <p> However, there are some problems with this approach. First of all, the papers 1 Other studies have dealt with real-time fault-tolerant scheduling using a timeline and a primary-backup approach <ref> [10, 16, 21, 25] </ref>. Since these works are not related to RMS, we do not discuss them here.
Reference: [11] <author> M.S. Hecht, J.B. Hammer, C.D. Locke, J.D. Dehn, and R. Bohlmann. </author> <title> Rate Monotonic Analysis of a Large, Distributed System. </title> <booktitle> In IEEE Workshop on Real-Time Applications, </booktitle> <pages> pages 4-7. </pages> <publisher> IEEE, </publisher> <month> July </month> <year> 1994. </year>
Reference-contexts: This policy was called Rate Monotonic Scheduling (RMS). In recent years, RMS has been used to schedule real-time task sets in a variety of critical applications ranging from navigation of satellites [7] to avionics <ref> [11, 18] </ref> to industrial process control [3]. However, RMS does not provide mechanisms for managing time redundancy, so that real-time tasks will complete within their deadlines even in the presence of faults.
Reference: [12] <author> R.K. Iyer, D.J. Rossetti, and M.C. Hsueh. </author> <title> Measurement and Modeling of Computer Reliability as Affected by System Activity. </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> 4(3) </volume> <pages> 214-237, </pages> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: Several studies in the last two decades have concluded that transient faults are significantly more frequent than permanent faults <ref> [6, 12, 35] </ref>. In [35], measurements showed that transient faults are 30 times more frequent than permanent faults, while in [12], 83% of all faults were determined to be transient or intermittent. <p> Several studies in the last two decades have concluded that transient faults are significantly more frequent than permanent faults [6, 12, 35]. In [35], measurements showed that transient faults are 30 times more frequent than permanent faults, while in <ref> [12] </ref>, 83% of all faults were determined to be transient or intermittent.
Reference: [13] <author> J.R. Kane and S.S. Yau. </author> <title> Concurrent Software Fault Detection. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-1(1):87-99, </volume> <month> Mar. </month> <year> 1975. </year>
Reference-contexts: To avoid the catastrophic and costly consequences of system failure in critical real-time systems, it is essential that faults be detected and tolerated. Extensive research has been conducted on detecting faults using both hardware [8, 24, 26, 34] and software <ref> [13, 33, 36] </ref>. In [26], three error detection mechanisms are described which can be used to tolerate transient faults caused by heavy-ion radiation and power-supply disturbances. A survey of various types of watchdog processors for concurrent error detection is presented in [24]. <p> In [34], an approach is presented for the on-line detection of control flow errors caused by transient and intermittent faults using special built-in hardware. The concept of recovery blocks is introduced in [33] and techniques to detect control flow errors of programs are presented in <ref> [13, 36] </ref>. Transient faults in real-time systems are generally tolerated using time redundancy, which involves the retry or re-execution of any task running during the occurrence of a transient fault [10, 15, 17, 31]. This is a relatively inexpensive method of providing fault-tolerance since not much extra hardware is required.
Reference: [14] <author> D. Katcher. </author> <title> Engineering and Analysis of Real-Time Operating Systems. </title> <type> Ph.D. Thesis, </type> <institution> Carnegie Mellon University, </institution> <month> Aug </month> <year> 1994. </year>
Reference-contexts: This additional time can be added to the computation time of each task a priori, so that fault detection times are taken into account. The cost of preemption in RMS has been studied in <ref> [14] </ref>.
Reference: [15] <author> H. Kopetz, H. Kantz, G. Grunsteidl, P. Puschner, and J. Reisinger. </author> <title> Tolerating Transient Faults in MARS. </title> <booktitle> In Symp. on Fault Tolerant Computing (FTCS-20), </booktitle> <pages> pages 466-473. </pages> <note> IEEE, 1990. </note> <author> Ghosh, Melhem, </author> <month> Mosse </month>
Reference-contexts: Transient faults in real-time systems are generally tolerated using time redundancy, which involves the retry or re-execution of any task running during the occurrence of a transient fault <ref> [10, 15, 17, 31] </ref>. This is a relatively inexpensive method of providing fault-tolerance since not much extra hardware is required. For example, in space and aviation applications, reducing the hard Fault-Tolerant Rate-Monotonic Scheduling ware is important since that decreases weight, size, power consumption, and cost.
Reference: [16] <author> C. M. Krishna and K. Shin. </author> <title> On Scheduling Tasks with a Quick Recovery from Failure. </title> <journal> IEEE Trans on Computers, </journal> <volume> 35(5) </volume> <pages> 448-455, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: However, there are some problems with this approach. First of all, the papers 1 Other studies have dealt with real-time fault-tolerant scheduling using a timeline and a primary-backup approach <ref> [10, 16, 21, 25] </ref>. Since these works are not related to RMS, we do not discuss them here.
Reference: [17] <author> C.M. Krishna and A.D. Singh. </author> <title> Reliability of Checkpointed Real-Time Systems Using Time Redundancy. </title> <journal> IEEE Trans. on Reliability, </journal> <volume> 42(3) </volume> <pages> 427-435, </pages> <month> Sept </month> <year> 1993. </year>
Reference-contexts: Transient faults in real-time systems are generally tolerated using time redundancy, which involves the retry or re-execution of any task running during the occurrence of a transient fault <ref> [10, 15, 17, 31] </ref>. This is a relatively inexpensive method of providing fault-tolerance since not much extra hardware is required. For example, in space and aviation applications, reducing the hard Fault-Tolerant Rate-Monotonic Scheduling ware is important since that decreases weight, size, power consumption, and cost.
Reference: [18] <author> R. Lachenmaier and T. Stretch. </author> <title> The IEEE Scalable Coherent Interface: An Approach for a Unified Avionics Network. In Advanced Packaging Concepts for Digital Avionics. </title> <publisher> IEEE, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: This policy was called Rate Monotonic Scheduling (RMS). In recent years, RMS has been used to schedule real-time task sets in a variety of critical applications ranging from navigation of satellites [7] to avionics <ref> [11, 18] </ref> to industrial process control [3]. However, RMS does not provide mechanisms for managing time redundancy, so that real-time tasks will complete within their deadlines even in the presence of faults. <p> If this probability is large, then several backups may be needed. The number of backups is also a function of the criticality of the tasks. We believe the fault-tolerant RMS scheme is particularly useful in applications such as avionics <ref> [18] </ref> where RMS is used as a scheduling technique and retry is used as one of the fault tolerance mechanisms. The scheme is also useful in satellites which have a high rate of transient errors [5] and where RMS is used for navigation payload software [7].
Reference: [19] <author> J. P. Lehoczky, L. Sha, and Y. Ding. </author> <title> The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior. </title> <booktitle> In Proc. IEEE Real-Time Syst. Symp., </booktitle> <pages> pages 166-171, </pages> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: In [31, 32], Ramos-Thuel and Strosnider present static and dynamic allocation strategies to provide fault tolerance. Two algorithms are proposed to reserve time for the recovery of periodic real-time tasks on a uniprocessor [32]. The RMS analysis of <ref> [19] </ref> has been extended to include provisions for task re-executions. Another study done recently by Burns, Davis and Punnekkat [4] provides exact schedulability tests for fault-tolerant task sets. Time redundancy is employed to provide a predictable performance in the presence of failures.
Reference: [20] <author> J. P. Lehoczky, L. Sha, and J.K. Strosnider. </author> <title> Enhanced Aperiodic Responsiveness in Hard-Real-Time Environments. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <pages> pages 261-270, </pages> <year> 1987. </year>
Reference-contexts: The response time analysis of [1] is extended to the fault tolerance approach. However, neither study [4, 32] derives utilization bounds 2 for the task sets, which is the main goal of this paper. The bounds developed for scheduling aperiodic tasks along with periodic tasks <ref> [20, 2] </ref> can also be used for tolerating faults by considering the re-executing task to be an aperiodic task which arrives when the task fails. However, there are some problems with this approach.
Reference: [21] <author> A.L. Liestman and R.H. Campbell. </author> <title> A Fault-tolerant Scheduling Problem. </title> <journal> Trans Software Engineering, </journal> <volume> SE-12(11):1089-1095, </volume> <month> Nov </month> <year> 1988. </year>
Reference-contexts: However, there are some problems with this approach. First of all, the papers 1 Other studies have dealt with real-time fault-tolerant scheduling using a timeline and a primary-backup approach <ref> [10, 16, 21, 25] </ref>. Since these works are not related to RMS, we do not discuss them here.
Reference: [22] <author> C. L. Liu and J. Layland. </author> <title> Scheduling Algorithm for Multiprogramming in a Hard Real-Time Environment. </title> <journal> Journal of the ACM., </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> Jan. </month> <year> 1973. </year>
Reference-contexts: To guarantee that real-time tasks will meet their deadlines, scheduling techniques can be used to provide a predictable response time. A fundamental result in real-time scheduling was developed by Liu and Layland <ref> [22] </ref>, in which periodic preemptive tasks were studied. They proved that, if tasks have fixed priorities that are derived from their periods, then any set of n tasks with a total utilization below n (2 1=n 1) is schedulable on a uniprocessor system. <p> Towards this end, we extend the rate monotonic scheduling (RMS) result of <ref> [22] </ref> to include provision for tolerance of transient faults. In Section 2, we describe how temporal redundancy can be incorporated into RMS such that guarantees can be provided for tasks to re-execute. <p> If a separate backup is scheduled for each task, the utilization of each task would double, and would reduce the maximum schedulability to half of the initial value ( 34.5% in the general case, which assumes that tasks are schedulable if their utilization is less than 69% <ref> [22] </ref>). Ghosh, Melhem, Mosse 2.1 Conditions for Recovery In this section, we state conditions which are required to ensure recovery from single and multiple faults in a preemptive, periodic system. Let us first assume that there are no faults in the system. <p> We will show later that the utilization factor of tasks with a backup computed using our formulas is always smaller than the Liu and Layland bound of <ref> [22] </ref>. Therefore, if there are no faults, the slack is not used for executing any task, the task set will satisfy the RMS bound, and is thus schedulable. <p> Clearly, the utilization factor will decrease when a Fault-Tolerant Rate-Monotonic Scheduling fraction of the processing capacity is reserved for re-execution. First we state some definitions from <ref> [22] </ref> that will facilitate the following discussion. A processor is said to be fully utilized when an increase in the computation time of any of the tasks in the set will make the set unschedulable. <p> To determine this bound, we follow the proof strategy used in <ref> [22] </ref>. Specifically, the following steps are used: * Step 1: Determine the critical instant. <p> In this section, we consider only the case of single faults within T n + T n1 . 3.1 Step 1: Determining critical instant Liu and Layland <ref> [22] </ref> have shown that, for a set of periodic preemptive tasks, the critical instant occurs when all tasks arrive simultaneously. If no faults occur, then the arguments used by [22] are applicable to our system. <p> the case of single faults within T n + T n1 . 3.1 Step 1: Determining critical instant Liu and Layland <ref> [22] </ref> have shown that, for a set of periodic preemptive tasks, the critical instant occurs when all tasks arrive simultaneously. If no faults occur, then the arguments used by [22] are applicable to our system. However, we also need to consider the case where a fault occurs and a task has to be re-executed at its own priority, thus adding to the response time of lower priority tasks. <p> A similar schedule can be drawn up for n tasks. 3.3 Simple FT-RMS bound As the U naive bound (2) shows, a straightforward way of computing a schedu-lability bound for fault-tolerant RMS would be to decrease the bound in <ref> [22] </ref> by U B , (i.e., U LL U B ). However, using (3) and (4) and following the proof in [22], we obtain the following improved result which is a general fault tolerance bound for RMS (G-FT-RMS): U G-F T -RMS = n (2 1=n 1)(1 U B ) = <p> 3.3 Simple FT-RMS bound As the U naive bound (2) shows, a straightforward way of computing a schedu-lability bound for fault-tolerant RMS would be to decrease the bound in <ref> [22] </ref> by U B , (i.e., U LL U B ). However, using (3) and (4) and following the proof in [22], we obtain the following improved result which is a general fault tolerance bound for RMS (G-FT-RMS): U G-F T -RMS = n (2 1=n 1)(1 U B ) = U LL (1 U B ) (5) This equation is the result of adding a backup with utilization U B distributed <p> This can be done by using a variation of the theorems used in <ref> [22] </ref> and in [29]. Due to lack of space, we do not include this proof in this paper. <p> The task indices in set S represent task utilizations which are known, and therefore constant 4 . In that case, we have the following equations: U Bj = U (j) = T i 4 Recall that in Liu and Layland <ref> [22] </ref>, all task utilizations were variable. <p> As a result of this, any system which uses rate monotonic scheduling can use this fault tolerance approach. * Derivation of a general utilization bound (5) by using the new approach for distributing slack, and applying the derivations of <ref> [22] </ref>. * Use of a simple technique by which the backup's utilization is made equal to one of the task utilizations. This step leads to new fault-tolerant RMS utilization bounds (11) and (20) which are better than (5). These bounds account for the re-execution of tasks when faults occur.
Reference: [23] <author> J. W. Liu, K. Lin, C. L. Liu, and C. W. Gear. </author> <title> Research on Imprecise Computations in Project QuartZ. </title> <booktitle> In Proc. of Workshop on Operating Systems for Mission Critical Computing, </booktitle> <month> Sept. </month> <year> 1989. </year>
Reference-contexts: Our recovery scheme can be used in two special cases: (1) to tolerate timing faults, which occur when a task exceeds its assigned maximum execution time, and (2) for the implementation of the imprecise computation paradigm <ref> [23] </ref>. In such cases, the reserved slack can be used to complete the task's execution, and thus tolerate the timing faults up to a certain limit (equal to the backup length or at least twice the execution time).
Reference: [24] <author> A. Mahmood and E. J. McCluskey. </author> <title> Concurrent Error Detection Using Watch-dong Processors A Survey. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(2) </volume> <pages> 160-174, </pages> <month> Feb. </month> <year> 1988. </year>
Reference-contexts: To avoid the catastrophic and costly consequences of system failure in critical real-time systems, it is essential that faults be detected and tolerated. Extensive research has been conducted on detecting faults using both hardware <ref> [8, 24, 26, 34] </ref> and software [13, 33, 36]. In [26], three error detection mechanisms are described which can be used to tolerate transient faults caused by heavy-ion radiation and power-supply disturbances. A survey of various types of watchdog processors for concurrent error detection is presented in [24]. <p> In [26], three error detection mechanisms are described which can be used to tolerate transient faults caused by heavy-ion radiation and power-supply disturbances. A survey of various types of watchdog processors for concurrent error detection is presented in <ref> [24] </ref>. In [8], a processing core used for embedded space flight applications is provided with internal concurrent error-detection, mainly to detect transient faults. In [34], an approach is presented for the on-line detection of control flow errors caused by transient and intermittent faults using special built-in hardware.
Reference: [25] <author> A. Mehra, J. Rexford, H.S. Ang, and F. Jahanian. </author> <title> Design and Evaluation of a Window-Consistent Replication Service. </title> <booktitle> In Proc. Real-Time Technology and Applications Symp., </booktitle> <year> 1995. </year>
Reference-contexts: However, there are some problems with this approach. First of all, the papers 1 Other studies have dealt with real-time fault-tolerant scheduling using a timeline and a primary-backup approach <ref> [10, 16, 21, 25] </ref>. Since these works are not related to RMS, we do not discuss them here.
Reference: [26] <author> G. Miremadi and J. Torin. </author> <title> Evaluating Processor-Behavior and Three Error-Detection Mechanisms Using Physical Fault-Injection. </title> <journal> IEEE Transactions on Reliability, </journal> <volume> 44(3) </volume> <pages> 441-453, </pages> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: To avoid the catastrophic and costly consequences of system failure in critical real-time systems, it is essential that faults be detected and tolerated. Extensive research has been conducted on detecting faults using both hardware <ref> [8, 24, 26, 34] </ref> and software [13, 33, 36]. In [26], three error detection mechanisms are described which can be used to tolerate transient faults caused by heavy-ion radiation and power-supply disturbances. A survey of various types of watchdog processors for concurrent error detection is presented in [24]. <p> To avoid the catastrophic and costly consequences of system failure in critical real-time systems, it is essential that faults be detected and tolerated. Extensive research has been conducted on detecting faults using both hardware [8, 24, 26, 34] and software [13, 33, 36]. In <ref> [26] </ref>, three error detection mechanisms are described which can be used to tolerate transient faults caused by heavy-ion radiation and power-supply disturbances. A survey of various types of watchdog processors for concurrent error detection is presented in [24].
Reference: [27] <author> D. Mosse, R. Melhem, and S. Ghosh. </author> <title> Analysis of a Fault-Tolerant Multiprocessor Scheduling Algorithm. </title> <booktitle> In 24 th Int'l Symposium on Fault-Tolerant Computing, </booktitle> <address> Austin, TX, </address> <month> June </month> <year> 1994. </year> <note> IEEE. </note>
Reference-contexts: Due to the high occurrence of transient faults in some applications, and because physical redundancy can be used to tolerate permanent faults in real-time systems <ref> [27, 28] </ref>, we consider only the problem of transient and intermittent faults in this paper. To avoid the catastrophic and costly consequences of system failure in critical real-time systems, it is essential that faults be detected and tolerated. <p> Note the use of overloading of the backups. Overloading, which is the scheduling of backups for more than one task in the same time slot has been used in non-preemptive aperiodic environments <ref> [27] </ref>. In our scheme, the same slack is being used as the backup for all the tasks in the system.
Reference: [28] <author> Y. Oh. </author> <title> The Design and Analysis of Scheduling Algorithms for Real-Time and Fault-Tolerant Computer Systems. </title> <type> Ph.D. Thesis, </type> <institution> University of Virginia, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Due to the high occurrence of transient faults in some applications, and because physical redundancy can be used to tolerate permanent faults in real-time systems <ref> [27, 28] </ref>, we consider only the problem of transient and intermittent faults in this paper. To avoid the catastrophic and costly consequences of system failure in critical real-time systems, it is essential that faults be detected and tolerated.
Reference: [29] <author> Y. Oh and S.H. Son. </author> <title> Enhancing Fault-Tolerance in Rate-Monotonic Scheduling. </title> <journal> The Journal of Real-Time Systems, </journal> <volume> 7(3) </volume> <pages> 315-329, </pages> <month> Nov </month> <year> 1994. </year> <title> Fault-Tolerant Rate-Monotonic Scheduling </title>
Reference-contexts: First of all, the papers 1 Other studies have dealt with real-time fault-tolerant scheduling using a timeline and a primary-backup approach [10, 16, 21, 25]. Since these works are not related to RMS, we do not discuss them here. We also do not discuss <ref> [29] </ref>, which deals with fault-tolerant scheduling using RMS on a multiprocessor, since it only presents a discussion for permanent faults. 2 A utilization bound U allows a simple test of the form P U i U to determine a task set's schedulability. <p> This can be done by using a variation of the theorems used in [22] and in <ref> [29] </ref>. Due to lack of space, we do not include this proof in this paper.
Reference: [30] <author> M. Pandya and M. Malek. </author> <title> Minimum Achievable Utilization for Fault-tolerant Processing of Periodic Tasks. </title> <type> Technical Report TR 94-07, </type> <institution> Univ of Texas at Austin, Dept of Computer Science, </institution> <year> 1994. </year>
Reference-contexts: The goal of this paper is to derive new utilization bounds which include provisions for the re-execution of faulty tasks scheduled using RMS. We are aware of three previous attempts to incorporate time redundancy into rate monotonic scheduling <ref> [4, 30, 32] </ref> 1 . In [30], Pandya and Malek analyze the schedulability of a set of periodic tasks that are scheduled using RMS and tolerate a single fault. In the event of a fault, all unfinished tasks are re-executed. <p> The goal of this paper is to derive new utilization bounds which include provisions for the re-execution of faulty tasks scheduled using RMS. We are aware of three previous attempts to incorporate time redundancy into rate monotonic scheduling [4, 30, 32] 1 . In <ref> [30] </ref>, Pandya and Malek analyze the schedulability of a set of periodic tasks that are scheduled using RMS and tolerate a single fault. In the event of a fault, all unfinished tasks are re-executed. <p> Thus, if the backup utilization is 25% (for example), then according to the above formula, the utilization bound for any task set with large n can be 44%. This is obviously not a tight bound, since <ref> [30] </ref> has shown the bound to be 50%. Our goal is to develop a recovery (re-execution) scheme for the faulty tasks and the corresponding tight bound on task schedulability given a set of tasks and the utilization of the backup.
Reference: [31] <author> S. Ramos-Thuel. </author> <title> Enhancing Fault Tolerance of Real-Time Systems through Time Redundancy. </title> <type> Ph.D. Thesis, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Transient faults in real-time systems are generally tolerated using time redundancy, which involves the retry or re-execution of any task running during the occurrence of a transient fault <ref> [10, 15, 17, 31] </ref>. This is a relatively inexpensive method of providing fault-tolerance since not much extra hardware is required. For example, in space and aviation applications, reducing the hard Fault-Tolerant Rate-Monotonic Scheduling ware is important since that decreases weight, size, power consumption, and cost. <p> The type of faults handled are those that can be handled by re-execution, e.g., intermittent and transient hardware faults. In <ref> [31, 32] </ref>, Ramos-Thuel and Strosnider present static and dynamic allocation strategies to provide fault tolerance. Two algorithms are proposed to reserve time for the recovery of periodic real-time tasks on a uniprocessor [32]. The RMS analysis of [19] has been extended to include provisions for task re-executions.
Reference: [32] <author> S. Ramos-Thuel and J.K. Strosnider. </author> <title> Scheduling Fault Recovery Operations for Time-Critical Applications. </title> <booktitle> In 4th IFIP Conference on Dependable Computing for Critical Applications, </booktitle> <month> Jan </month> <year> 1995. </year>
Reference-contexts: The goal of this paper is to derive new utilization bounds which include provisions for the re-execution of faulty tasks scheduled using RMS. We are aware of three previous attempts to incorporate time redundancy into rate monotonic scheduling <ref> [4, 30, 32] </ref> 1 . In [30], Pandya and Malek analyze the schedulability of a set of periodic tasks that are scheduled using RMS and tolerate a single fault. In the event of a fault, all unfinished tasks are re-executed. <p> The type of faults handled are those that can be handled by re-execution, e.g., intermittent and transient hardware faults. In <ref> [31, 32] </ref>, Ramos-Thuel and Strosnider present static and dynamic allocation strategies to provide fault tolerance. Two algorithms are proposed to reserve time for the recovery of periodic real-time tasks on a uniprocessor [32]. The RMS analysis of [19] has been extended to include provisions for task re-executions. <p> In [31, 32], Ramos-Thuel and Strosnider present static and dynamic allocation strategies to provide fault tolerance. Two algorithms are proposed to reserve time for the recovery of periodic real-time tasks on a uniprocessor <ref> [32] </ref>. The RMS analysis of [19] has been extended to include provisions for task re-executions. Another study done recently by Burns, Davis and Punnekkat [4] provides exact schedulability tests for fault-tolerant task sets. Time redundancy is employed to provide a predictable performance in the presence of failures. <p> Another study done recently by Burns, Davis and Punnekkat [4] provides exact schedulability tests for fault-tolerant task sets. Time redundancy is employed to provide a predictable performance in the presence of failures. The response time analysis of [1] is extended to the fault tolerance approach. However, neither study <ref> [4, 32] </ref> derives utilization bounds 2 for the task sets, which is the main goal of this paper.
Reference: [33] <author> B. Randell. </author> <title> System Structure for Software Fault Tolerance. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-1(2):220-232, </volume> <month> June </month> <year> 1975. </year>
Reference-contexts: To avoid the catastrophic and costly consequences of system failure in critical real-time systems, it is essential that faults be detected and tolerated. Extensive research has been conducted on detecting faults using both hardware [8, 24, 26, 34] and software <ref> [13, 33, 36] </ref>. In [26], three error detection mechanisms are described which can be used to tolerate transient faults caused by heavy-ion radiation and power-supply disturbances. A survey of various types of watchdog processors for concurrent error detection is presented in [24]. <p> In [34], an approach is presented for the on-line detection of control flow errors caused by transient and intermittent faults using special built-in hardware. The concept of recovery blocks is introduced in <ref> [33] </ref> and techniques to detect control flow errors of programs are presented in [13, 36]. Transient faults in real-time systems are generally tolerated using time redundancy, which involves the retry or re-execution of any task running during the occurrence of a transient fault [10, 15, 17, 31].
Reference: [34] <author> M.A. Schuette and J.P. Shen. </author> <title> Processor Control Flow Monitoring Using Signa-tured Instruction Streams. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(3):264-275, </volume> <month> Mar. </month> <year> 1987. </year>
Reference-contexts: To avoid the catastrophic and costly consequences of system failure in critical real-time systems, it is essential that faults be detected and tolerated. Extensive research has been conducted on detecting faults using both hardware <ref> [8, 24, 26, 34] </ref> and software [13, 33, 36]. In [26], three error detection mechanisms are described which can be used to tolerate transient faults caused by heavy-ion radiation and power-supply disturbances. A survey of various types of watchdog processors for concurrent error detection is presented in [24]. <p> A survey of various types of watchdog processors for concurrent error detection is presented in [24]. In [8], a processing core used for embedded space flight applications is provided with internal concurrent error-detection, mainly to detect transient faults. In <ref> [34] </ref>, an approach is presented for the on-line detection of control flow errors caused by transient and intermittent faults using special built-in hardware. The concept of recovery blocks is introduced in [33] and techniques to detect control flow errors of programs are presented in [13, 36].
Reference: [35] <author> D.P. Siewiorek, V. Kini, H. Mashburn, S. McConnel, and M.Tsao. </author> <title> A Case Study of C.mmp, Cm fl , and C.vmp: Part 1 Experiences with Fault Tolerance in Multiprocessor Systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 66(10) </volume> <pages> 1178-1199, </pages> <month> Oct. </month> <year> 1978. </year>
Reference-contexts: Several studies in the last two decades have concluded that transient faults are significantly more frequent than permanent faults <ref> [6, 12, 35] </ref>. In [35], measurements showed that transient faults are 30 times more frequent than permanent faults, while in [12], 83% of all faults were determined to be transient or intermittent. <p> Several studies in the last two decades have concluded that transient faults are significantly more frequent than permanent faults [6, 12, 35]. In <ref> [35] </ref>, measurements showed that transient faults are 30 times more frequent than permanent faults, while in [12], 83% of all faults were determined to be transient or intermittent.
Reference: [36] <author> S.S. Yau and F.C. Chen. </author> <title> An Approach to Concurrent Control Flow Checking. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-6(2):126-137, </volume> <month> Mar. </month> <year> 1980. </year>
Reference-contexts: To avoid the catastrophic and costly consequences of system failure in critical real-time systems, it is essential that faults be detected and tolerated. Extensive research has been conducted on detecting faults using both hardware [8, 24, 26, 34] and software <ref> [13, 33, 36] </ref>. In [26], three error detection mechanisms are described which can be used to tolerate transient faults caused by heavy-ion radiation and power-supply disturbances. A survey of various types of watchdog processors for concurrent error detection is presented in [24]. <p> In [34], an approach is presented for the on-line detection of control flow errors caused by transient and intermittent faults using special built-in hardware. The concept of recovery blocks is introduced in [33] and techniques to detect control flow errors of programs are presented in <ref> [13, 36] </ref>. Transient faults in real-time systems are generally tolerated using time redundancy, which involves the retry or re-execution of any task running during the occurrence of a transient fault [10, 15, 17, 31]. This is a relatively inexpensive method of providing fault-tolerance since not much extra hardware is required.
References-found: 36

