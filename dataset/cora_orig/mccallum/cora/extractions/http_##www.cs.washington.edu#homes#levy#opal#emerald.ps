URL: http://www.cs.washington.edu/homes/levy/opal/emerald.ps
Refering-URL: http://www.cs.washington.edu/homes/levy/opal/opalpapers.html
Root-URL: 
Title: Fine-Grained Mobility in the Emerald System  
Author: Eric Jul, Henry Levy, Norman Hutchinson, and Andrew Black 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science University of Washington  
Abstract: Emerald is an object-based language and system designed for the construction of distributed programs. An explicit goal of Emerald is support for object mobility; objects in Emerald can freely move within the system to take advantage of distribution and dynamically changing environments. We say that Emerald has fine-grained mobility because Emerald objects can be small data objects as well as process objects. Fine-grained mobility allows us to apply mobility in new ways but presents implementation problems as well. This paper discusses the benefits of fine-grained mobility, the Emerald language and run-time mechanisms that support mobility, and techniques for implementing mobility that do not degrade the performance of local operations. Performance measurements of the current implementation are included.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> James E. Allchin and Martin S. McKendry. </author> <title> Synchronization and recovery of actions. </title> <booktitle> In Proceedings of the 2nd Annual Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 31-44, </pages> <month> August </month> <year> 1983. </year> <month> 20 </month>
Reference-contexts: From a conceptual viewpoint, a more important goal was a single object model. Object-based systems typically lie at the ends of a spectrum: object-based languages such as Smalltalk [10] and CLU [17] provide small, local, data objects; object-based operating systems, like Hydra [25] and Clouds <ref> [1] </ref>, provide large, active objects. Distributed systems such as Argus [16] and Eden [2] that support both kinds of object have a separate object definition mechanism for each.
Reference: [2] <author> Guy T. Almes, Andrew P. Black, Edward D. Lazowska, and Jerre D. Noe. </author> <title> The Eden System: </title>
Reference-contexts: Object-based systems typically lie at the ends of a spectrum: object-based languages such as Smalltalk [10] and CLU [17] provide small, local, data objects; object-based operating systems, like Hydra [25] and Clouds [1], provide large, active objects. Distributed systems such as Argus [16] and Eden <ref> [2] </ref> that support both kinds of object have a separate object definition mechanism for each.
References-found: 2

