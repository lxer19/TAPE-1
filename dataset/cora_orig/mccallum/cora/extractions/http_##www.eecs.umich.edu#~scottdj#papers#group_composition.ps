URL: http://www.eecs.umich.edu/~scottdj/papers/group_composition.ps
Refering-URL: http://www.eecs.umich.edu/~scottdj/papers/
Root-URL: http://www.cs.umich.edu
Email: fscottdj,farnam,jiggeyg@eecs.umich.edu  
Title: Scalable Group Composition with End-to-end Delivery Semantics  
Author: Scott Johnson, Farnam Jahanian, and Jigney Shah 
Keyword: group communication, distributed systems, fault-tolerant multicast, ordering semantics, predictable communication  
Address: Ann Arbor, MI 48109-2122  
Affiliation: Dept. of Electrical Engineering and Computer Science University of Michigan  
Abstract: This paper examines the problem of building scalable, fault-tolerant distributed systems from collections of communicating process groups while maintaining well-defined end-to-end delivery semantics. Our approach to inter-group communication takes advantage of modular group composition. We introduce a generic model which provides a distinction between intra-group and inter-group communication, and allows for independent modular composition of protocols for each type of communication. Using this model, we provide a framework for analyzing the end-to-end semantic behavior of messages, making it possible to determine exactly what delivery semantics a set of receivers will observe for a given message, even when those receivers are members of different process groups which use different group multicast protocols and enforce different delivery semantics. To realize this model, we present an implementation architecture which is based on a simple abstraction: inter-group routers. Inter-group routers provide a mechanism for the exchange of messages between process groups. They allow groups to communicate in a fault-tolerant manner without sharing group or message state information and without modifying the underlying communication protocols. Finally, we present simulation results of our architecture for a variety of inter-group topologies and communication patterns. Using the published performance data of an existing group communication protocol, we simulate the performance of our architecture to verify its scalability. We also confirm that the end-to-end semantics predicted by our model are actually enforced by the architecture. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Amir, L. Moser, P. Melliar-Smith, D. Agarwal, and P. Ciarfella, </author> <title> "The Totem single-ring ordering and membership protocol," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 13, no. 4, </volume> <pages> pp. 311-342, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: Numerous group communication systems have been developed during the last decade. Totem <ref> [1] </ref>, ISIS [2], Horus [3], Consul [4, 5], Delta-4 [6], Amoeba [7], and Transis [8] are examples of such systems. <p> This section focuses on several architectures which have been proposed to solve the group composition problem. In this section we compare them to our approach and discuss the relative merits of each. The Totem Multiple Ring protocol [19] is an architecture based on the Totem single ring protocol <ref> [1] </ref>. It allows multiple Totem rings to be interconnected by gateways, and enforces a global total order on all messages sent within the system. However, there are several key differences between the Totem approach and the inter-group router architecture. <p> Since the performance of RTCAST compares very favorably with the published performance data of other group multicast protocols (most notably Totem <ref> [1] </ref> and Horus [3]), we expect that our simulation results will be applicable to systems built using other protocols besides RTCAST. Figure 15 shows how the performance of a real RTCAST group implementation compares to an equivalent simulated RTCAST group.
Reference: [2] <author> K. Birman, A. Schiper, and P. Stephenson, </author> <title> "Lightweight causal and atomic group multicast," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 9, no. 3, </volume> <pages> pp. 272-314, </pages> <month> August </month> <year> 1991. </year> <month> 28 </month>
Reference-contexts: Numerous group communication systems have been developed during the last decade. Totem [1], ISIS <ref> [2] </ref>, Horus [3], Consul [4, 5], Delta-4 [6], Amoeba [7], and Transis [8] are examples of such systems. These systems allow a set of processes to communicate using various delivery semantics such as FIFO, causal, or total ordering while providing a consistent membership view of participants believed to be accessible.
Reference: [3] <author> R. van Renesse, K. Birman, and S. Maffeis, "Horus: </author> <title> A flexible group communication system," </title> <journal> Communications of the ACM, </journal> <volume> vol. 39, no. 4, </volume> <pages> pp. 76-83, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Numerous group communication systems have been developed during the last decade. Totem [1], ISIS [2], Horus <ref> [3] </ref>, Consul [4, 5], Delta-4 [6], Amoeba [7], and Transis [8] are examples of such systems. These systems allow a set of processes to communicate using various delivery semantics such as FIFO, causal, or total ordering while providing a consistent membership view of participants believed to be accessible. <p> Since the performance of RTCAST compares very favorably with the published performance data of other group multicast protocols (most notably Totem [1] and Horus <ref> [3] </ref>), we expect that our simulation results will be applicable to systems built using other protocols besides RTCAST. Figure 15 shows how the performance of a real RTCAST group implementation compares to an equivalent simulated RTCAST group.
Reference: [4] <author> S. Mishra, L. Peterson, and R. Schlichting, </author> <title> "Consul: A communication substrate for fault-tolerant distributed programs," </title> <journal> Distributed Systems Engineering, </journal> <volume> vol. 1, </volume> <pages> pp. 87-103, </pages> <year> 1993. </year>
Reference-contexts: Numerous group communication systems have been developed during the last decade. Totem [1], ISIS [2], Horus [3], Consul <ref> [4, 5] </ref>, Delta-4 [6], Amoeba [7], and Transis [8] are examples of such systems. These systems allow a set of processes to communicate using various delivery semantics such as FIFO, causal, or total ordering while providing a consistent membership view of participants believed to be accessible.
Reference: [5] <author> S. Mishra, L. Peterson, and R. Schlichting, </author> <title> "Experience with modularity in Consul," </title> <journal> Software-Practice and Experience, </journal> <volume> vol. 23, no. 10, </volume> <pages> pp. 1059-1075, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Numerous group communication systems have been developed during the last decade. Totem [1], ISIS [2], Horus [3], Consul <ref> [4, 5] </ref>, Delta-4 [6], Amoeba [7], and Transis [8] are examples of such systems. These systems allow a set of processes to communicate using various delivery semantics such as FIFO, causal, or total ordering while providing a consistent membership view of participants believed to be accessible.
Reference: [6] <author> D. Powell, </author> <title> editor, Delta-4 A Generic Architecture for Dependable Dist. Computing, </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Numerous group communication systems have been developed during the last decade. Totem [1], ISIS [2], Horus [3], Consul [4, 5], Delta-4 <ref> [6] </ref>, Amoeba [7], and Transis [8] are examples of such systems. These systems allow a set of processes to communicate using various delivery semantics such as FIFO, causal, or total ordering while providing a consistent membership view of participants believed to be accessible.
Reference: [7] <author> A. Tannenbaum, R. van Renesse, H. van Staveren, G. Sharp, S. Mullender, J. Jansen, and G. van Rossum, </author> <title> "Experiences with the Amoeba distributed operating system," </title> <journal> Communications of the ACM, </journal> <volume> vol. 33, </volume> <pages> pp. 46-63, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Numerous group communication systems have been developed during the last decade. Totem [1], ISIS [2], Horus [3], Consul [4, 5], Delta-4 [6], Amoeba <ref> [7] </ref>, and Transis [8] are examples of such systems. These systems allow a set of processes to communicate using various delivery semantics such as FIFO, causal, or total ordering while providing a consistent membership view of participants believed to be accessible.
Reference: [8] <author> D. Dolev and D. Malki, </author> <title> "The Transis approach to high availability cluster communication," </title> <journal> Communications of the ACM, </journal> <volume> vol. 39, no. 4, </volume> <pages> pp. 64-70, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Numerous group communication systems have been developed during the last decade. Totem [1], ISIS [2], Horus [3], Consul [4, 5], Delta-4 [6], Amoeba [7], and Transis <ref> [8] </ref> are examples of such systems. These systems allow a set of processes to communicate using various delivery semantics such as FIFO, causal, or total ordering while providing a consistent membership view of participants believed to be accessible. <p> Existing work in this area has primarily taken two approaches. Some researchers have attempted to improve the scalability of the single process group model [16], and its use in wide-area environments [17, 18] even in the presence of partitions <ref> [8] </ref>. Others have designed architectures which allow systems to be composed from multiple process groups while maintaining some type of delivery semantic on messages sent between groups [19, 20].
Reference: [9] <author> H. Kopetz and G. Grunsteidl, </author> <title> "TTP a protocol for fault-tolerant real-time systems," </title> <journal> IEEE Computer, </journal> <volume> vol. 27, no. 1, </volume> <pages> pp. 14-23, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: These systems allow a set of processes to communicate using various delivery semantics such as FIFO, causal, or total ordering while providing a consistent membership view of participants believed to be accessible. A number of group communication systems also provide explicit support for real-time applications. For example, TTP <ref> [9] </ref>, RTCAST [10] and XPA [11] provide guaranteed response time by exploiting real-time operating system features or special purpose hardware support. Other approaches including the fail-awareness framework [12], quasi-synchronous model [13], and Cactus [14] are based on the best effort paradigm.
Reference: [10] <author> T. Abdelzaher, A. Shaikh, F. Jahanian, and K. Shin, "RTCAST: </author> <title> Lightweight multicast for real-time process groups," </title> <booktitle> in Proceedings IEEE Real-Time Technology and Applications Symposium (RTAS '96), </booktitle> <pages> pp. 250-259, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: A number of group communication systems also provide explicit support for real-time applications. For example, TTP [9], RTCAST <ref> [10] </ref> and XPA [11] provide guaranteed response time by exploiting real-time operating system features or special purpose hardware support. Other approaches including the fail-awareness framework [12], quasi-synchronous model [13], and Cactus [14] are based on the best effort paradigm. <p> Our simulation was carried out using Opnet, version 3.5.A. To implement a group communication service within the simulation, we used the actual production code for RTCAST <ref> [10] </ref>, a group multicast protocol we have developed which provides predictable, atomic message delivery with real-time guarantees. RTCAST uses a logical token ring to enforce both causal and total ordering on messages delivered to the group, and it totally orders group membership changes with respect to messages.
Reference: [11] <author> P. Verissimo, P. Bond, A. Hilborne, L. Rodrigues, and D. Seaton, </author> <title> "The extra performance architecture (xpa)," in Delta-4 A Generic Architecture for Dependable Dist. Computing, </title> <editor> D. Powell, editor, </editor> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: A number of group communication systems also provide explicit support for real-time applications. For example, TTP [9], RTCAST [10] and XPA <ref> [11] </ref> provide guaranteed response time by exploiting real-time operating system features or special purpose hardware support. Other approaches including the fail-awareness framework [12], quasi-synchronous model [13], and Cactus [14] are based on the best effort paradigm.
Reference: [12] <author> C. Fetzer and F. Cristian, "Fail-awareness: </author> <title> An approach to construct fail-safe applications," </title> <booktitle> in Proceedings of the International Conference on Fault-Tolerant Computing Systems (FTCS-27), </booktitle> <pages> pp. 282-291, </pages> <address> Seattle, WA, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: A number of group communication systems also provide explicit support for real-time applications. For example, TTP [9], RTCAST [10] and XPA [11] provide guaranteed response time by exploiting real-time operating system features or special purpose hardware support. Other approaches including the fail-awareness framework <ref> [12] </ref>, quasi-synchronous model [13], and Cactus [14] are based on the best effort paradigm. One of the primary motivations for group communication is its use as a building block for providing replication and consistency in distributed applications.
Reference: [13] <author> P. Verissimo and C. Almeida, "Quasi-synchronism: </author> <title> A step away from the traditional fault-tolerant real-time system model," </title> <journal> IEEE TCOS Bulletin, </journal> <volume> vol. 7, no. 4, </volume> , <month> December </month> <year> 1995. </year>
Reference-contexts: A number of group communication systems also provide explicit support for real-time applications. For example, TTP [9], RTCAST [10] and XPA [11] provide guaranteed response time by exploiting real-time operating system features or special purpose hardware support. Other approaches including the fail-awareness framework [12], quasi-synchronous model <ref> [13] </ref>, and Cactus [14] are based on the best effort paradigm. One of the primary motivations for group communication is its use as a building block for providing replication and consistency in distributed applications.
Reference: [14] <author> M. Hiltunen, X. Han, and R. Schlichting, </author> <booktitle> "Real-time issues in Cactus," in Proceedings of IEEE Workshop on Middleware for Distributed Real-time Systems and Services, </booktitle> <pages> pp. 214-221, </pages> <year> 1997. </year>
Reference-contexts: A number of group communication systems also provide explicit support for real-time applications. For example, TTP [9], RTCAST [10] and XPA [11] provide guaranteed response time by exploiting real-time operating system features or special purpose hardware support. Other approaches including the fail-awareness framework [12], quasi-synchronous model [13], and Cactus <ref> [14] </ref> are based on the best effort paradigm. One of the primary motivations for group communication is its use as a building block for providing replication and consistency in distributed applications.
Reference: [15] <author> B. Whetten, </author> <title> "A reliable multicast protocol," </title> <booktitle> in Theory and Practice in Distributed Systems: Lecture Notes on Computer Science 938, </booktitle> <editor> K. Birman, F. Mattern, and A. Schiper, editors, </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Both Horus and Consul allow micro-protocols to be composed together to provide exactly the functionality required by an application without the overhead associated with unused services. Cactus also utilizes micro-protocols while offering support for real-time distributed applications. Protocols such as Totem, ISIS and RMP <ref> [15] </ref> each provide several different types of delivery semantic so that messages do not incur unnecessary delay while stronger semantics are enforced. One key challenge that remains to be addressed by group communication services, however, is their scalability as the number of processes in a distributed system increases.
Reference: [16] <author> O. Babaoglu and A. Schiper, </author> <title> "On group communication in large-scale distributed systems," </title> <journal> ACM SIGOPS Operating Systems Review, </journal> <volume> vol. 29, no. 1, </volume> <pages> pp. 612-621, </pages> <month> January </month> <year> 1995. </year> <note> Also appears as Proceedings ACM SIGOPS European Workshop, </note> <month> September, </month> <year> 1994. </year>
Reference-contexts: Existing work in this area has primarily taken two approaches. Some researchers have attempted to improve the scalability of the single process group model <ref> [16] </ref>, and its use in wide-area environments [17, 18] even in the presence of partitions [8]. Others have designed architectures which allow systems to be composed from multiple process groups while maintaining some type of delivery semantic on messages sent between groups [19, 20].
Reference: [17] <author> O. Babaoglu, A. Bartoli, and G. Dini, </author> <title> "Enriched view synchrony: A programming paradigm for partitionable asynchronous distributed systems," </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. 46, no. 6, </volume> <pages> pp. 642-658, </pages> <month> June </month> <year> 1997. </year> <month> 29 </month>
Reference-contexts: Existing work in this area has primarily taken two approaches. Some researchers have attempted to improve the scalability of the single process group model [16], and its use in wide-area environments <ref> [17, 18] </ref> even in the presence of partitions [8]. Others have designed architectures which allow systems to be composed from multiple process groups while maintaining some type of delivery semantic on messages sent between groups [19, 20]. <p> This is a very difficult problem, and is currently an active area of research. One promising approach involves the use of an enriched view synchrony for processes communicating over asynchronous, partitionable networks <ref> [17] </ref>. Other solutions which are applicable to fault-tolerant distributed systems may be used to improve the fault-tolerance of group compositions as well. Finally, since the failure of an inter-group router can partition the inter-group network, it is important to ensure that the inter-group routers themselves are adequately fault-tolerant.
Reference: [18] <author> L. Rodrigues and P. Verissimo, </author> <title> "Causal separators for large-scale multicast communication," </title> <booktitle> in Proceedings of the 15th International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: Existing work in this area has primarily taken two approaches. Some researchers have attempted to improve the scalability of the single process group model [16], and its use in wide-area environments <ref> [17, 18] </ref> even in the presence of partitions [8]. Others have designed architectures which allow systems to be composed from multiple process groups while maintaining some type of delivery semantic on messages sent between groups [19, 20]. <p> Furthermore, the preceding and succeding stages should not overlap; that is, P " S = ;. Groups within the same pipeline stage may also communicate freely with each other. This is similar to the notion of Vertex Separators in <ref> [18] </ref>. Note that this definition of pipelines is intentionally vague; it simply defines a general class of group compositions. We will provide more formal definitions for some specific types of pipelines and their semantic properties below. It has been recognized that many distributed real-time applications can be constructed as pipelines. <p> Proof: The proof of this lemma is available in the appendix. The structure of this type of pipeline is very similar to the causal separators described in <ref> [18] </ref>; certain process groups act as causal separators that partition the composition into independent stages and prevent the propagation of causal events to other parts of the system. Obviously, not every application that requires causal ordering can be composed as an implicitly causal pipeline with purely sender-based FIFO inter-group delivery.
Reference: [19] <author> D. Agarwal, L. Moser, P. Melliar-Smith, and R. Budhia, </author> <title> "A reliable ordered delivery protocol for interconnected local-area networks," </title> <booktitle> in International Conference on Networking Protocols, </booktitle> <year> 1995. </year>
Reference-contexts: Others have designed architectures which allow systems to be composed from multiple process groups while maintaining some type of delivery semantic on messages sent between groups <ref> [19, 20] </ref>. The latter approach allows the size of each process group to be kept small enough to ensure good performance within the group, while still allowing large numbers of processes to be used in a single system. <p> This section focuses on several architectures which have been proposed to solve the group composition problem. In this section we compare them to our approach and discuss the relative merits of each. The Totem Multiple Ring protocol <ref> [19] </ref> is an architecture based on the Totem single ring protocol [1]. It allows multiple Totem rings to be interconnected by gateways, and enforces a global total order on all messages sent within the system. However, there are several key differences between the Totem approach and the inter-group router architecture.
Reference: [20] <author> R. Baldoni, R. Friedman, and R. Renesse, </author> <title> "Hierarchical daisy architecture for causal delivery," </title> <type> Technical report, </type> <institution> Cornell University, </institution> <year> 1996. </year>
Reference-contexts: Others have designed architectures which allow systems to be composed from multiple process groups while maintaining some type of delivery semantic on messages sent between groups <ref> [19, 20] </ref>. The latter approach allows the size of each process group to be kept small enough to ensure good performance within the group, while still allowing large numbers of processes to be used in a single system. <p> We now prove that this will hold for any number of senders and receivers assuming an inter-group protocol that enforces causal ordering. This is similar to the basic topology of the causal daisy architecture <ref> [20] </ref>. Lemma 7 (Multiple Sender Causal Delivery): Consider a set of messages M which are sent within a multi-group composition by a set of sending groups G S to a set of receiving groups G R . G S and G R may overlap. <p> The inter-group routers are much more like traditional routers in this respect; they only need to know the next hop for a given destination, and group members do not need to know anything about the topology of the system at all. The Hierarchical Daisy Architecture <ref> [20] </ref> is another approach to group composition. In some respects it is very similar to the inter-group router approach each group may be composed modularly and may reside on a separate physical network, and some events in each group do not need to be propagated to other groups.
Reference: [21] <editor> S. Mullender, editor, </editor> <booktitle> Distributed Systems, chapter 5, </booktitle> <pages> pp. 104-107, </pages> <note> in Mullender [28], second edition, </note> <year> 1993. </year>
Reference-contexts: In this section we present a detailed examination of this problem for several types of composition topologies and show how they may be combined to create more complex systems. Throughout this section, we will use the semantic definitions given in <ref> [21] </ref>.
Reference: [22] <author> L. Lamport, </author> <title> "Time, clocks, and the ordering of events in a distributed system," </title> <journal> Communications of the ACM, </journal> <volume> vol. 21, no. 7, </volume> <pages> pp. 558-565, </pages> <year> 1978. </year>
Reference-contexts: If each group enforces causal delivery, and the inter-group protocol enforces sender-based FIFO delivery, then the delivery semantic observed for all messages at all receivers will be causal. Proof: Causal delivery can be defined in terms of Lamport's happens-before relation <ref> [22] </ref>, which we denote by !. Table 3.1 lists the different ways two messages can be causally related, and the delivery order that must be observed if causal delivery is to be enforced.
Reference: [23] <author> S. Mullender, </author> <title> editor, </title> <journal> Distributed Systems, </journal> <note> chapter 5, p. 106, in Mullender [28], second edition, </note> <year> 1993. </year>
Reference-contexts: For all messages m i and m j and processes p and q, m i must be delivered before message m j if <ref> [23] </ref>: 1. send p (m i ) ! send p (m j ) (i.e. p sends m i then sends m j ) 2. recv p (m i ) ! send p (m j ) (i.e. p receives m i and then sends m j ) 3.
Reference: [24] <author> T. Ballardie, P. Francis, and J. Crowcroft, </author> <title> "Core based trees (CBT)," </title> <booktitle> in Proceedings of ACM SIGCOMM '93, </booktitle> <pages> pp. 85-95, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: We now describe two different types of inter-group routing trees that can be used to enforce delivery semantics in a general composition. These trees are modeled after the core based tree topology <ref> [24] </ref> which has been used for IP multicast routing over the Internet. In the first variation of the core based tree, each message is first delivered in the inter-group protocol at the root (or core) of the tree.
Reference: [25] <author> F. Christian, </author> <title> "Synchronous atomic broadcast for redundant broadcast channels," </title> <journal> The Journal of Real-Time Systems, </journal> <volume> vol. 2, no. 3, </volume> <pages> pp. 195-212, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: The following subsection describes how this can be achieved. 4.2 Fault-tolerance of Inter-Group Routers To improve reliability, many group multicast protocols are used with redundant, fault-tolerant physical networks to reduce the chance of message loss due to network failure. Some examples include the broadcast networks described in <ref> [25, 26] </ref>. This section describes how inter-group routers might be replicated to achieve a similar level of fault-tolerance for inter-group communication, while maintaining the guaranteed end-to-end delivery semantics. Recall that an inter-group router is a logical entity. Normally we have assumed that each router was implemented by a single host.
Reference: [26] <author> K. Echtle and A. Masum, </author> <title> "A multiple bus broadcast protocol resilient to non-cooperative byzantine faults," </title> <booktitle> in Proceedings of Fault Tolerant Computing Symposium (FTCS) 26, </booktitle> <pages> pp. 158-167, </pages> <year> 1996. </year>
Reference-contexts: The following subsection describes how this can be achieved. 4.2 Fault-tolerance of Inter-Group Routers To improve reliability, many group multicast protocols are used with redundant, fault-tolerant physical networks to reduce the chance of message loss due to network failure. Some examples include the broadcast networks described in <ref> [25, 26] </ref>. This section describes how inter-group routers might be replicated to achieve a similar level of fault-tolerance for inter-group communication, while maintaining the guaranteed end-to-end delivery semantics. Recall that an inter-group router is a logical entity. Normally we have assumed that each router was implemented by a single host.
Reference: [27] <author> T. Abdelzaher, A. Shaikh, S. Johnson, F. Jahanian, and K. Shin, "RTCAST: </author> <title> Lightweight multicast for real-time process groups," </title> <type> Technical report, </type> <institution> Dept. of Electrical Engineering and Computer Science, University of Michigan, </institution> <year> 1997. </year> <note> To appear in IEEE Transactions on Software Engineering. </note>
Reference-contexts: RTCAST uses a logical token ring to enforce both causal and total ordering on messages delivered to the group, and it totally orders group membership changes with respect to messages. Based on the published performance evaluation of our actual RTCAST implementation <ref> [27] </ref>, we parameterized the protocol stack and tuned the simulation to accurately reflect the real performance of the protocol.
Reference: [28] <author> S. Mullender, </author> <title> editor, Distributed Systems, </title> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1993. </year> <month> 30 </month>
References-found: 28

