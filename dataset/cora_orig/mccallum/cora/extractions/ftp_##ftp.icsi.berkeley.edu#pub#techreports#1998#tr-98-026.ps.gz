URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1998/tr-98-026.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1998.html
Root-URL: http://www.icsi.berkeley.edu
Title: A Fuzzy Based Load Sharing Mechanism for Distributed Systems  
Author: Herwig Unger Thomas Bohme 
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  Rostock, Rostock, D-18051 Rostock, Germany;  Ilmenau, D-98684 Ilmenau, PF 10 0565, Germany,  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  Department of Computer Science, University of  Department of Mathematics, Technical University  
Pubnum: TR-98-026  
Email: E-mail: hunger@informatik.uni-rostock.de  E-mail: tboehme@theoinf.tu-ilmenau.de  
Phone: (510) 643-9153 FAX (510) 643-7684  Phone: +49 381 498 3403, Fax: +49 381 498 3366,  Phone: +49 3677 69 3630, Fax: +49 3677 69 3206,  
Date: August 1998  
Abstract: This report presents a load sharing heuristic for distributed computing on workstation clusters. The approach is novel in that it combines the use of predicted resource requirements of processes (CPU-time, memory requirements, density of the I/O-stream) and a fuzzy logic controller which makes the placement decision. The heuristic is distributed, i.e. each node runs a copy of the prediction and load sharing code, and its implementation is based on PVM. Using a benchmark program (Choleski factorization) experiments were conducted to compare the proposed heuristic against standard PVM and an older version of the presented heuristic without the fuzzy logic controller. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. A. Baker, G. C. Fox, H. W. Yau, </author> <title> "A Review of Commercial and Research Cluster Management Software", </title> <type> Technical Report, </type> <institution> Syracuse University New York, </institution> <year> 1996, </year> <note> http://www.cs.rice.edu/ lwlutz/NHSEmain0.html. </note>
Reference-contexts: An important step toward this goal is to design algorithms for the distribution of processes among the nodes of a cluster. During the past decade a lot of work has been done in this field. (For an overview see <ref> [1] </ref>, [9] and [11].) The present contribution deals with a load sharing heuristic. <p> A fuzzy set in some set M is characterized by a function f from M to the closed interval <ref> [0; 1] </ref>. f is called the membership function and, for an element x of M , f (x) is considered to be the degree of membership of x in the fuzzy set.
Reference: [2] <author> W. Becker, </author> <month> "Dynamische, </month> <institution> adaptive Lastbalancierung fur groe heterogen konkurri-erende Anwendungen", PhD-Thesis, University of Stuttgart, </institution> <year> 1995. </year>
Reference: [3] <author> K. P. Bubendorfer, </author> <title> "Resource Based Policies for Load Distribution", </title> <institution> PhD-Thesis, University of Wellington, </institution> <year> 1996. </year>
Reference: [4] <author> O. Cordon, F. Herrera, et al., </author> <title> "Genetic algorithms ans fuzzy logic in control processes", </title> <type> Technical Report #DECSAI-95109, </type> <institution> ETS de Ingeniera Informatica, Universidad de Granada, </institution> <month> March, </month> <year> 1995 </year>
Reference-contexts: It turned out that, especially if the additional processes have high memory requirements and low or medium CPU-time, the new load sharing heuristic achieves significantly better results than the older version without fuzzy logic. 4 Concluding Remarks Using ideas from <ref> [4] </ref>, it is planned to to apply a genetic algorithm to adapt the knowledge base to the specific requirements of the cluster in a subsequent version of the presented heuristic. Presently, the more sophisticated simulation of our system is in preparation.
Reference: [5] <author> M. Devarakonda, R. K. Iyer, </author> <title> "Predictability of process resource usage: A measurement-based study of UNIX", </title> <journal> IEEE Trans. Software Eng., vol.15, </journal> <volume> no.12, </volume> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: to see, that even frequent polling cannot guarantee the accuracy of a placement decision made without any knowledge about the system's future behaviour (<ref> [5] </ref>, [8], [14]). A better solution is, therefore, to use a prediction. The proposed load sharing heuristic uses a simpler prediction scheme than the one used in [5] which is outlined in section 2.1. The load of a node depends on several load factors such as the length of the CPU ready queue, the CPU-times of the processes in the CPU queue, the amount of memory in use, and the density of the I/O-stream.
Reference: [6] <author> S. Dierkes, L. Frese, </author> <title> "Load balancing with a fuzzy decision algorithm: Description of the approach and first simulations", </title> <type> Technical Report Universitt Dortmund, </type> <year> 1995. </year>
Reference-contexts: The proposed heuristic uses a different approach. Three load factors are combined by a fuzzy logic controller which picks the node a new process is assigned to. A different approach which also involves a fuzzy logic controller is described in <ref> [6] </ref>. A load sharing system, called ALICE 1 , using the proposed load sharing heuristic was implemented based on PVM. Here only those processes are subject to the placement decision that are created by a call of the pvm_spawn-function.
Reference: [7] <author> D. H. J. Epema, et al., </author> <title> "A world-wide flock of Condors: load sharing among workstation clusters", </title> <institution> TR-95-130, TU Delft, </institution> <year> 1995. </year>
Reference: [8] <author> K. G. Goswami, M. Devarakonda, R.K. Iyer, </author> <title> "Prediction-Based Dynamic Load Sharing Heuristics". </title> <journal> IEEE-Trans. Parallel and Distributed Systems, </journal> <volume> Vol. 4(6), </volume> <pages> pp. 638-648, </pages> <year> 1993. </year>
Reference-contexts: Furthermore, it is not hard to see, that even frequent polling cannot guarantee the accuracy of a placement decision made without any knowledge about the system's future behaviour ([5], <ref> [8] </ref>, [14]). A better solution is, therefore, to use a prediction. The proposed load sharing heuristic uses a simpler prediction scheme than the one used in [5] which is outlined in section 2.1.
Reference: [9] <author> M. Harchol-Balter, A. B. Downey, </author> <title> "Exploiting Process Lifetime Distributions for Dynamic Load Balancing", </title> <type> Technical Report TR-95-021, ICSI, </type> <institution> Berkeley, </institution> <year> 1995. </year>
Reference-contexts: An important step toward this goal is to design algorithms for the distribution of processes among the nodes of a cluster. During the past decade a lot of work has been done in this field. (For an overview see [1], <ref> [9] </ref> and [11].) The present contribution deals with a load sharing heuristic. <p> One part builds and maintains a list of the processes running on the respective node. In <ref> [9] </ref> it is shown that only processes that run longer than 1=3-1=2 sec generate a significant load and therefore, only processes running at least 1=2 sec are included in the list. The second part of the llp-deamon computes the predictions of the resource requirements of processes and the load indexes.
Reference: [10] <author> G. Hipper, D. Tavangarian, </author> <title> "A new Architecture for Efficient Parallel Computing in Workstation Clusters", </title> <booktitle> Int. Conference HPCN Challenges in Telecomp and Tele-com: Parallel Simulation of Complex Systems and Large-Scale Applications, </booktitle> <address> Delft, Netherlands, </address> <year> 1996. </year>
Reference: [11] <author> J. A. Kaplan, M. L. Nelson, </author> <title> "A Comparision of Queueing, Cluster and Distributed Computing Systems", </title> <type> NASA Technical Memorandum 109025, </type> <institution> Langley Research Center, </institution> <year> 1993. </year>
Reference-contexts: 1 Introduction Message passing systems such as PVM, Express, Linda and P4 offer the opportunity to use workstation clusters as an inexpensive alternative for distributed computing. However, to enhance the performance of such systems "additional system management software" is needed <ref> [11] </ref>. An important step toward this goal is to design algorithms for the distribution of processes among the nodes of a cluster. During the past decade a lot of work has been done in this field. (For an overview see [1], [9] and [11].) The present contribution deals with a load <p> systems "additional system management software" is needed <ref> [11] </ref>. An important step toward this goal is to design algorithms for the distribution of processes among the nodes of a cluster. During the past decade a lot of work has been done in this field. (For an overview see [1], [9] and [11].) The present contribution deals with a load sharing heuristic. In general terms, a load sharing algorithm works as follows: When a process p arrives for execution, the algorithm assigns p to a node of the cluster in such a way that the performance is good in some sense.
Reference: [12] <author> P. Mehra, </author> <title> "Automated Learning of Load Balancing Strategies for a Distributed Computer System", </title> <type> Technical Report, </type> <institution> University of Illinois, </institution> <year> 1993. </year>
Reference: [13] <author> B. K. Schmidt, V. S. Sunderam, </author> <title> "Empirical Analysis of Overheads in Cluster Environments", in: </title> <journal> Concurrency: Practice and Experience, </journal> <year> 1993. </year> <pages> viii </pages>
Reference-contexts: A distributed benchmark program performing a Cholesky factorization of a matrix taken from <ref> [13] </ref> was run with standard PVM, an older version of the presented load sharing heuristic ([14]) and the proposed heuristic.
Reference: [14] <author> H. Unger, H. Unger, G. Hipper, </author> <title> "Stochastics and Learning Methods for Load Bal--ancing in a Distributed Workstation Cluster System", </title> <booktitle> in: Proc. of the Int. Conference of Applied Informatics, </booktitle> <address> Innsbruck, </address> <year> 1997. </year>
Reference-contexts: Furthermore, it is not hard to see, that even frequent polling cannot guarantee the accuracy of a placement decision made without any knowledge about the system's future behaviour ([5], [8], <ref> [14] </ref>). A better solution is, therefore, to use a prediction. The proposed load sharing heuristic uses a simpler prediction scheme than the one used in [5] which is outlined in section 2.1.
Reference: [15] <author> G. Wilhelms, </author> <title> "Dynamische adaptive Lastverteilung fur PVM mittels unscharfer Be-nutzerprofile", </title> <institution> PhD-Thesis, Univ. Augsburg, </institution> <year> 1994. </year>
Reference: [16] <author> H.-J. Zimmermann, </author> <title> Fuzzy Set Theory and Its Application, </title> <publisher> Kluwer Academic Publisher, </publisher> <address> Boston, Dordrecht, London, </address> <year> 1991. </year> <pages> ix </pages>
Reference-contexts: It is well beyond the scope of this article to give an introduction to fuzzy logic (For more on fuzzy logic and fuzzy logic controllers the reader is referred to <ref> [16] </ref>.) Nevertheless, some remarks should be made. <p> These figures define a fuzzy set which is then defuzzified using the center of gravity method. For details see <ref> [16] </ref>. The knowledge about the controlled system is encoded in the definition of the linguistic terms and the rules of the rule base.
References-found: 16

