URL: http://www.cse.psu.edu/~catuscia/papers/NAI/nainIC.ps.gz
Refering-URL: http://www.cse.psu.edu/~catuscia/abstracts.html
Root-URL: http://www.cse.psu.edu
Phone: 2  
Title: Negation as Instantiation  
Author: Alessandra Di Pierro Maurizio Martelli Catuscia Palamidessi 
Address: Corso Italia 40, 56125 Pisa, Italy  via Benedetto XV 3, 16132 Genova, Italy  
Affiliation: 1 Dipartimento di Informatica, Universita di Pisa,  Dipartimento di Informatica e Scienze dell'Informazione, Universita di Genova,  
Abstract-found: 0
Intro-found: 1
Reference: <author> Apt, K. R. </author> <year> (1990), </year> <title> Logic Programming, </title> <booktitle> in "Handbook of Theoretical Computer Science, </booktitle> <volume> Vol. </volume> <editor> B, </editor> <title> Formal Models and Semantics" (J. </title> <editor> Van Leeuwen, </editor> <publisher> Ed.), </publisher> <pages> pp. 493-574, </pages> <publisher> Elsevier, Amsterdam. </publisher>
Reference-contexts: Definition 3.19 The extended completion of P , Comp L (P ), is defined as IFF (P ) [ CET L , where IFF (P ) is the collection of completed definitions of predicates in P <ref> (see Apt, 1990) </ref> and CET L is the set of the equality and freeness axioms (EA [F A) for L, as defined, for instance, in Shepherdson (1988). Comp L (P ) is an extension of Comp (P ), as shown by the following proposition.
Reference: <author> Chan, D. </author> <year> (1988), </year> <title> Constructive Negation Based on the Completed Database, </title> <booktitle> in "Proceedings, Fifth International Conference on Logic Programming" (R. </booktitle> <editor> A. Kowalski and K. A. Bowen, </editor> <booktitle> Eds.), </booktitle> <pages> pp. 111-125, </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference-contexts: One drawback of the approaches mentioned so far (SLDNF, SLDNI and SLDNFI) is that they are not able to compute bindings for the variables in negative subgoals. To solve the problem of getting bindings for negative literals, other approaches have been proposed, such as constructive negation <ref> (Chan, 1988) </ref>. Our extension has the advantage that the implementation of the NAI rule is very simple and can be obtained by a small modification of the NAF rule. 1.1 Plan of the paper The next section introduces the terminology and the basic results concerning the semantics of logic programs.
Reference: <author> Clark, K. L. </author> <year> (1978), </year> <title> Negation as failure, in "Logic and Data Bases" ( H. </title> <editor> Gallaire and J. Minker, </editor> <booktitle> Eds.), </booktitle> <pages> pp. 293-322, </pages> <publisher> Plenum Press, </publisher> <address> New York. </address>
Reference-contexts: The basic idea is the following. If all derivations for A in a program P either fail or instantiate some of the variables of A, then 8A is not a logical consequence of the Clark's completion of P , Comp (P ) <ref> (Clark, 1978) </ref>. Therefore it is consistent to infer :8A, namely 9:A. We want to extend now the theory Comp (P ) in order to validly infer 9:A. <p> In Levi et al. (1990) the set of non-ground atoms which have a finitely failed computation (NGFF) was introduced and shown equivalent to the set of atoms A such that Comp (P ) j= :9A, where Comp (P ) is the Clark's completion of P <ref> (Clark, 1978) </ref>. <p> Its completion with respect to the extended language L is defined in the usual way, namely Comp L (P ) = IFF (P ) [ CET L . The set CET L is the set of the Clark's equality axioms for the language L <ref> (Clark, 1978) </ref>. The set IFF (P ) is the collection of completed definitions of predicates in P , defined as follows. Let p be a predicate occurring in the program and x 1 ; : : :; x n fresh variables.
Reference: <author> Drabent, W., and Martelli, M. </author> <year> (1991), </year> <title> Strict Completion of Logic Programs, </title> <booktitle> New Generation Computing 9 (1), </booktitle> <pages> 69-79. </pages>
Reference: <author> Falaschi, M., Levi, G., Martelli, M., and Palamidessi, C. </author> <year> (1989), </year> <title> Declarative Modeling of the Operational Behavior of Logic Languages, </title> <journal> Theoret. Comput. Sci. </journal> <volume> 69 (3), </volume> <pages> 289-318. </pages>
Reference: <author> Falaschi, M., Levi, G., Martelli, M., and Palamidessi, C. </author> <year> (1993), </year> <title> A Model-Theoretic Reconstruction of the Operational Semantics of Logic Programs, </title> <journal> Inform. and Comput. </journal> <volume> 103 (1), </volume> <pages> 86-113. </pages>
Reference-contexts: Only a small part of the negative information which could be drawn from a program is inferred, namely the universally closed negative literals. The former fits into the more general problem of capturing, by means of suitable models, the so-called observable properties of a program <ref> (Falaschi et al., 1993) </ref> and has been tackled and solved by Falaschi et al. (1989). In the mentioned paper a new declarative semantics based on interpretations containing non-ground atoms was defined, and two different interpretation notions (the S-semantics and the C-semantics) were introduced.
Reference: <author> Fitting, M. </author> <year> (1985), </year> <title> A Kripke-Kleene semantics for logic programs, </title> <editor> J. </editor> <booktitle> Logic Programming 2 (4), </booktitle> <pages> 295-312. </pages>
Reference: <author> Kunen, K. </author> <year> (1989), </year> <title> Signed Data Dependencies in Logic Programs, </title> <editor> J. </editor> <booktitle> Logic Programming 7 (3), </booktitle> <pages> 231-245. </pages>
Reference: <author> Levi, G., Martelli, M., and Palamidessi, C. </author> <year> (1990), </year> <title> Failure and success made symmetric, </title> <booktitle> in "Proceedings, North American Conference on Logic Programming" (S. </booktitle> <editor> Debray and M. Hermenegildo, </editor> <booktitle> Eds.), </booktitle> <pages> pp. 3-22, </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference: <author> Lloyd, J. W. </author> <year> (1987), </year> <title> "Foundations of Logic Programming", 2nd Ed., </title> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference: <author> Shepherdson, J. C. </author> <year> (1985), </year> <title> Negation as Failure II, </title> <editor> J. </editor> <booktitle> Logic Programming 2 (3), </booktitle> <pages> 185-202. </pages>
Reference: <author> Shepherdson, J. C. </author> <year> (1988), </year> <title> Negation in logic programming, in "Foundations of Deductive Databases and Logic Programming" (J. </title> <editor> Minker, </editor> <publisher> Ed.), </publisher> <pages> pp. 19-88, </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA. </address>
Reference: <author> Shepherdson, J. C. </author> <year> (1989), </year> <title> A sound and complete semantics for a version of negation as failure, </title> <journal> Theoret. Comput. Sci. </journal> <volume> 65 (3), </volume> <pages> 343-371. 26 </pages>
References-found: 13

