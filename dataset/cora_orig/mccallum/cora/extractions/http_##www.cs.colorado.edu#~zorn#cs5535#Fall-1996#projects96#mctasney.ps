URL: http://www.cs.colorado.edu/~zorn/cs5535/Fall-1996/projects96/mctasney.ps
Refering-URL: http://www.cs.colorado.edu/~zorn/cs5535/Fall-1996/fall96.html
Root-URL: http://www.cs.colorado.edu
Date: December 5, 1996  
Note: Bob McTasney  
Abstract: Project Final Report (CSCI 5535) A Comparison of Java and C/C++ Networking Libraries 
Abstract-found: 1
Intro-found: 0
Reference: [Blo92] <author> John Bloomer. </author> <title> Power Programming with RPC. </title> <publisher> OReilly & Associates, Inc., </publisher> <year> 1992. </year> <pages> (pp. 103-145) </pages>
Reference-contexts: On the C/C++ side, there are also a few references worth mentioning. The CSCI 5573 Course Notes by G. Nutt [Nut95] provide preliminary explanation Berkley Sockets and how they are used in client/server applications between UNIX systems. Power Programming with RPC by J. Bloomer <ref> [Blo92] </ref> and TCP/IP Illustrated, Volume 3 by W. Richard Stevens [Stv96] both provide a more in depth and how to approach of using Berkley Sockets for such applications. Both are good references for C programmers working in UNIX environments. <p> Many books have been published for both languages. The best source for implementing C/C++ Berkley Sockets was TCP/IP Illustrated, Volume 3 by W. Richard Stevens [Stu96]. It provided the clearest explanations and example code for using Berkley Sockets. Other good references were <ref> [Blo92] </ref> and [Cur96]. There are a number of books about the Java programming language. In a majority of them there is some presentation of the networking libraries. This probably had to do with Java being hyped as a language for developing internet solutions.
Reference: [CLE96] <author> Patrick Chan and Rosanna Lee, </author> <title> The Java Class Libraries: An Annotated Reference, </title> <address> Addison-Wesely, </address> <year> 1996. </year>
Reference-contexts: The networking libraries and the language itself is more intuitive to understand and use. The only problem I had was with using the exec () method to make a UNIX system call <ref> [CLE96] </ref>. I needed this for the dir command . This method did not work to execute the ls -la command on the HP-UX version of the JDK, but it did work on the Solaris 2.x version on rintintin.colorado.edu.
Reference: [Cur96] <author> David A. Curry, </author> <title> UNIX System Programming for SVR4, </title> <publisher> OReilly & Associates Inc., </publisher> <year> 1996, </year> <pages> (pp. 391-414). </pages>
Reference-contexts: Many books have been published for both languages. The best source for implementing C/C++ Berkley Sockets was TCP/IP Illustrated, Volume 3 by W. Richard Stevens [Stu96]. It provided the clearest explanations and example code for using Berkley Sockets. Other good references were [Blo92] and <ref> [Cur96] </ref>. There are a number of books about the Java programming language. In a majority of them there is some presentation of the networking libraries. This probably had to do with Java being hyped as a language for developing internet solutions.
Reference: [CW96] <author> Mary Campiore and Kathy Walrath. </author> <title> The Java Tutorial: OOP for the Internet. </title> <address> Addison-Wesely, </address> <year> 1996. </year> <pages> (pp. 509-520) </pages>
Reference-contexts: No comparisons were made to any similar C/C++ libraries. Two really good resources I found with simple examples of how to write client/server applications using TCP/IP and UDP were The Java Tutorial, OOP for the Internet by M. Campione and K. Wolrath <ref> [CW96] </ref> and also the San Diago State University CS-596: ClientServer Programming Lecture Notes developed by R. Whitney and A. Scherpbier [WS96]. Both explained in detail, with examples, how to use Socket, ServerSocket, DatagramPacket, and DatagramSocket classes from the java.net package. <p> This probably had to do with Java being hyped as a language for developing internet solutions. The two resources I constantly referred to were The Java Tutorial: OOP for the Internet by Mary Campiore and Kathy Walrath <ref> [CW96] </ref> and Just Java by Peter van der Linden [Lin96]. 4.4 Which version was easier to implement? Out of the two, the Java version was easier to implement. The networking libraries and the language itself is more intuitive to understand and use.
Reference: [Dac96] <author> Michael Dacotna. </author> <title> Java for C/C++ Programmers. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1996. </year> <pages> (pp. 235-243) </pages>
Reference-contexts: I began to look at a few of these to see if anyone compared the networking libraries of Java to those in C/C++. A logical choice was reviewing Java for C/C++ Programmers by M. Docotna <ref> [Dac96] </ref>. In discussing the Java language, he did provide contrasts to C/C++. But when it came to the networking libraries, only the java.net package was mentioned. No comparisons were made to any similar C/C++ libraries.
Reference: [KG95] <author> Karl Grieptrog. </author> <note> Final Project (CSCI 5535). http://www.cs.colorado.edu/~greipent/PLFinal.ps </note>
Reference-contexts: K. Greiptrog, in his paper describing the Java languages simplicity could have made comments about the java.net package in the same manner as his mention in the AWT (Abstract Window Toolkit) <ref> [KG95] </ref>. Both are machine independent libraries and good examples of Javas simplicity and portability. Even though I was not very successful in finding previous research directly related to comparing both languages networking libraries, I was able to begin to see how similar both libraries are.
Reference: [GM95] <author> James Gosling and Henry McGilton. </author> <title> The Java Language Environment: A White Paper. </title> <publisher> Sun Microsystems Computer Company, </publisher> <month> May </month> <year> 1995 </year>
Reference-contexts: 1.0 Introduction/Problem Statement The Java language was designed by Sun Microsystems to be a better way of implementing client/server applications for multiple hardware architectures and operating systems <ref> [GM95] </ref>. In the past, a few languages that have been used for such applications are C and C++. The C/C++ developers challenge is to design these applications so they can work on multiple systems. <p> The one positive attribute I found about the C/C++ version was that it is easier to execute a system command by using the system () operation. 5.0 Conclusion Java was designed by Sun as a better way on implementing client/server applications for multiple hardware architectures and operating systems <ref> [GM95] </ref>. Based upon my experiences in developing these two elementary file servers I would say this is pretty true. They did provide a better language and library design than that provided by numerous vendors for C or C++. This allowed for easier and more intuitive development.
Reference: [Lin96] <author> Peter van der Linden, </author> <title> Just Java, </title> <publisher> The Sunsoft Press, </publisher> <year> 1996, </year> <pages> (pp. 221-254) </pages>
Reference-contexts: This probably had to do with Java being hyped as a language for developing internet solutions. The two resources I constantly referred to were The Java Tutorial: OOP for the Internet by Mary Campiore and Kathy Walrath [CW96] and Just Java by Peter van der Linden <ref> [Lin96] </ref>. 4.4 Which version was easier to implement? Out of the two, the Java version was easier to implement. The networking libraries and the language itself is more intuitive to understand and use.
Reference: [Nut95] <author> Gary Nutt. </author> <booktitle> Computer Science 5573 Lecture Notes. </booktitle> <institution> Department of Computer Science, University of Colorado, </institution> <year> 1995. </year> <pages> (pp. 312-313) </pages>
Reference-contexts: Whitney and A. Scherpbier [WS96]. Both explained in detail, with examples, how to use Socket, ServerSocket, DatagramPacket, and DatagramSocket classes from the java.net package. On the C/C++ side, there are also a few references worth mentioning. The CSCI 5573 Course Notes by G. Nutt <ref> [Nut95] </ref> provide preliminary explanation Berkley Sockets and how they are used in client/server applications between UNIX systems. Power Programming with RPC by J. Bloomer [Blo92] and TCP/IP Illustrated, Volume 3 by W.
Reference: [Stv96] <editor> W. Richard Stevens, TCP/IP Illustrated, </editor> <volume> Volume 3. </volume> <publisher> Addison-Wesley, </publisher> <year> 1996. </year> <pages> (pp. 3 - 29) </pages>
Reference-contexts: The CSCI 5573 Course Notes by G. Nutt [Nut95] provide preliminary explanation Berkley Sockets and how they are used in client/server applications between UNIX systems. Power Programming with RPC by J. Bloomer [Blo92] and TCP/IP Illustrated, Volume 3 by W. Richard Stevens <ref> [Stv96] </ref> both provide a more in depth and how to approach of using Berkley Sockets for such applications. Both are good references for C programmers working in UNIX environments. The above sources were great for finding information on implementing client/server applications in both languages.
Reference: [WS96] <author> Roger Whitnet and Andrew Scherpbier. CS-596: </author> <note> ClientServer Programming Spring Semester 1996 Lecture Notes. http://saturn.sdsu.edu:8080/~whitn...es/spring96/cs596/notes/index.html </note>
Reference-contexts: Campione and K. Wolrath [CW96] and also the San Diago State University CS-596: ClientServer Programming Lecture Notes developed by R. Whitney and A. Scherpbier <ref> [WS96] </ref>. Both explained in detail, with examples, how to use Socket, ServerSocket, DatagramPacket, and DatagramSocket classes from the java.net package. On the C/C++ side, there are also a few references worth mentioning. The CSCI 5573 Course Notes by G.
Reference: [WYZ95] <author> Wei Wang, Yi Yan, and Lu Zang. </author> <title> Security - How is it implemented in the Java language? http://amath-www.colorado.edu/appm/student/wangww/report.html Appendices: A. The C/C++ Client/Server Implementation A.1 tcpserver.cxx A.2 tcpclient.cxx A.3 Explanation of Code A.4 Example Output B. The Java Client/Server Implementation B.1 tcpserver.java B.2 tcpclient.java B.3 Explanation of Code B.4 Example Output </title>
Reference-contexts: Web searches for such comparisons were not very fruitful, but I did see a few discussions of some of java.nets features in some past reports from this course. W. Wang, Y. Yan, and L. Zangs paper on Java language security <ref> [WYZ95] </ref>, discussed briefly how the Socket class was designed to determine where a located class came from, thus giving the programmer the power to weed out classes obtained from rogue hosts. K.
References-found: 12

