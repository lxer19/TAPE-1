URL: http://www.cs.caltech.edu/~john-t/programming/gnat/gnatproject.ps
Refering-URL: http://www.cs.caltech.edu/~john-t/programming/gnat/
Root-URL: http://www.cs.caltech.edu
Email: comar@cs.nyu.edu  gasperon@inf.enst.fr  schonber@cs.nyu.edu  
Title: The GNAT Project: A GNU-Ada9X Compiler  
Author: Franco Gasperoni Edmond Schonberg 
Address: Comar  
Affiliation: Cyrille  Sup'Aero and New York University Computer Science Dept.  Telecom Paris ENST Departement Informatique  New York University Computer Science Dept.  
Abstract: The GNAT team fl gnat-report@cs.nyu.edu Courant Institute of Mathematical Sciences New York University 251 Mercer Street, New York, NY 10012 Abstract The GNAT project at New York University is building a high-quality Ada9X compiler, to be distributed free and with sources, following the successful mechanisms established by the Free Software Foundation for the GCC compiler. GNAT will allow students, academics, and software professionals to experiment as early as possible with the new version of Ada. GNAT will also help the spread of Ada to the software community at large. fl Robert Dewar and Edmond Schonberg are the principal investigators on the project. The team is based at New York University, and includes active participants from a number of other institutions (listed below): Bernard Banner, Cyrille Comar, Sam Figueroa, Richard Kenner, Brett Porter, Gail Schenker (all at NYU), Franco Gasperoni (Telecom Paris), Ted Giering (Florida State University), Paul Hilfinger (UC-Berkeley), Yvon Kermarrec (Telecom Bretagne), Laurent Pautet (Telecom Paris) and Jean-Pierre Rosen (Adalog). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> J.B.Bladen et al., </editor> <booktitle> Ada Semantic Interface Specification (ASIS), Conference Proceedings, </booktitle> <address> TriAda'91, San Jose,California, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: Rather, all semantic information concerning program entities is stored in defining occurrences of these entities directy in the AST. The GNAT structures are thus close in spirit to those of DIANA [4], albeit more compact. It appears that the AST will be adequate to support an ASIS interface <ref> [1] </ref>. 5 The four phases of the compiler are sketched in figure 2. r r r r r r . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Reference: [2] <author> Ada9X Mapping/Revision Team, </author> <title> Programming Language Ada-Language and Standard Libraries, </title> <type> Draft, </type> <note> Version 4.0, Intermetrics, </note> <month> September </month> <year> 1993. </year>
Reference-contexts: The recent successes of C++ are at least in part attributable to the availability of Turbo-C++ on PC's, and of course G++ (the GCC C++ compiler) on UNIX platforms. The imminent introduction of Ada9X presents us with a new opportunity. The language <ref> [2] </ref> offers up-to-date tools for object-oriented programming, for information systems, for distributed systems, for interfacing with other languages, for hierarchical system decomposition, etc.
Reference: [3] <author> T.P.Baker, and E.W.Giering, III, </author> <title> Implementing Ada9X features using POSIX threads: </title> <booktitle> design issues, Conference Proceedings, </booktitle> <address> TriAda'93, Seattle, Washington, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: This obviates the need to place run-time information in the compiler itself, and allows a knowledgeable user to modify the run-time if he/she so chooses. The design of GNARL is based on the CARTS (Common Ada Run-Time System) specification <ref> [3] </ref>. GNULLI (GNAT low-level library interface) provides the interface between the run-time and the underlying operating system. The design of GNULLI makes use of a few POSIX threads primitives, and assumes the existence of such primitives in the host OS.
Reference: [4] <author> G.Goos, W.A.Wulf, A.Evans, Jr., and K.J.Butler, </author> <title> DIANA An Intermediate Language for Ada, </title> <booktitle> Lecture Notes in Computer Science, number 161, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: It is worth mentioning that strictly speaking GNAT does not use a symbol table. Rather, all semantic information concerning program entities is stored in defining occurrences of these entities directy in the AST. The GNAT structures are thus close in spirit to those of DIANA <ref> [4] </ref>, albeit more compact.
Reference: [5] <author> R.M.Stallman, </author> <title> Using and Porting GNU CC, Free Software Foundation, </title> <month> December </month> <year> 1992. </year>
Reference-contexts: GNU software is always distributed with its sources, and the GPL enjoins anyone who modifies GNU software and then redistributes the modified product to supply the sources for the modifications as well. In this fashion, enhancements to the original software benefit the software community at large <ref> [5] </ref>. GCC is today the centerpiece of the GNU software. GCC is a retargetable and re-hostable compiler system, with multiple front-ends and a large number of hardware targets. Originally designed as a compiler for C, it now includes front-ends for C++, Modula-3, Fortran, Objective-C, and most recently Ada.
References-found: 5

