URL: http://www.cs.uoregon.edu/~fickas/icse-workshop/fugetta.ps
Refering-URL: http://www.cs.uoregon.edu/~fickas/icse-workshop/
Root-URL: http://www.cs.uoregon.edu
Email: e-mail: fdinitto, fuggettag@elet.polimi.it  
Phone: Tel: +39-2-661611. Fax: +39-2-66100448.  
Title: Open issues in managing inconsistencies in human-centered systems  
Author: Elisabetta Di Nitto and Alfonso Fuggetta 
Address: Via Emanueli, 15 20126 Milano.  
Affiliation: CEFRIEL Politecnico di Milano  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Arbaoui and F. Oquendo. </author> <title> Managing inconsistencies between process enactment and process performance states. </title> <booktitle> In Proceedings of the 8th International Software Process Workshop, </booktitle> <address> Wadern (Germany), </address> <month> March </month> <year> 1993. </year>
Reference-contexts: This log can be exploited during reconciliation. Other systems offer linguistic primitives for specifying the behavior of the process support system when unexpected events occur. Such kind of primitives range from simple exception handling imported by some programming languages [8] to more sophisticated mechanisms based on non-conventional logics <ref> [1] </ref>. In these approaches, the process modeler is in charge of forecasting all unexpected situations and to cope with them explicitly in the process model. 3.3 Visualization and monitoring Visualization should help humans in evaluating the distance between the current process state and the expected one.
Reference: [2] <author> S. Bandinelli, E. Di Nitto, and A. Fuggetta. </author> <title> Supporting Cooperation in the SPADE-1 Environment. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(12) </volume> <pages> 841-865, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: This problem is strictly related to the issue of supporting the interaction between humans and the system, and has been addressed in several projects. In <ref> [2, 9] </ref> end-users' tools offer a programmatic interface through which they can notify to the process support system state changes and can receive service requests.
Reference: [3] <author> N.S. Barghouti and B. Krishnamurthy. </author> <title> Using event contexts and matching constraints to monitor software processes. </title> <booktitle> In Proceedings of 17th International Conference on Software Engineering, </booktitle> <address> Seattle (Washington - USA), </address> <month> April </month> <year> 1995. </year>
Reference-contexts: This, in most cases, is not true, since humans may use pre-existing tools that are not integrated with the process support system. To overcome this limitation, in <ref> [3] </ref>, monitoring is performed at operating system level. In particular, specific mechanisms are used to detect events like tool invocation and file manipulation requests. Moreover, these mechanisms are able to define the correspondence between a sequence of operating system events and the state of an activity at the process level.
Reference: [4] <author> S. Ceri, P. Fraternali, S. Paraboschi, and L. Tanca. </author> <title> Automatic generation of production rules for integrity maintenance. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 19(3), </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: However, the process support system can provide some suggestions to humans in order to facilitate the reconciliation. We are not aware of any PSEE that provides significant facilities to support reconciliation. Some interesting contributions to address this issue have been proposed by the database community <ref> [4] </ref>. In advanced database management systems, upon the invocation of a transaction that can possibly violate an integrity constraint, specific repairing actions are automatically executed to compensate the anomalous effects of the transaction.
Reference: [5] <author> G. Cugola, E. Di Nitto, A. Fuggetta, and C. Ghezzi. </author> <title> A Framework for Formalizing Inconsistencies and Deviations in Human-Centered Systems. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 5(3) </volume> <pages> 191-230, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: Some researchers have argued that a strategy to achieve this objective is to accept and tolerate inconsistencies between the human-centered process and its process support system, and to provide aids and mechanisms to eliminate these inconsistencies, once the need for reconcile them has been recognized. In <ref> [5] </ref> we have tried to understand and characterize this problem, by modeling the relationship and properties of these two interacting entities, i.e., the human-centered system and its process support system.
Reference: [6] <author> G. Cugola, E. Di Nitto, C. Ghezzi, and M. Man-tione. </author> <title> How to deal with deviations during process model enactment. </title> <booktitle> In 17th International Conference on Software Engineering (ICSE 17), </booktitle> <address> Seattle, Washington (USA), </address> <month> April </month> <year> 1995. </year>
Reference-contexts: In [7] the concept of law as a rule that governs the progress of a system is introduced. Laws regulate the interactions among different procedural parts of the system, thus synthesizing the precedence relationships and the constraints that have to hold in the system. In SENTINEL <ref> [6] </ref>. a state machine-based formalism is used to describe the expected course of actions, while an extended logic formalism is used to describe the problem-dependent constraints. During the execution of process the progress of state machines is automated according to their description.
Reference: [7] <author> N. H. Minsky. </author> <title> Law-governed systems. </title> <journal> Software Engineering Journal, </journal> <pages> pages 285-302, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: On the other hand, problem-dependent constraints help in delimiting the space in which the process can progress towards its final goal. Thus, they represent a declarative specification of the "feasible" processes. In <ref> [7] </ref> the concept of law as a rule that governs the progress of a system is introduced. Laws regulate the interactions among different procedural parts of the system, thus synthesizing the precedence relationships and the constraints that have to hold in the system.
Reference: [8] <author> S.M. Sutton, D. Heimbigner, and L.J. Osterweil. APPL/A: </author> <title> a language for software-process programming. </title> <journal> ACM Transactions on Software Engineering Methodology, </journal> <month> July </month> <year> 1995. </year>
Reference-contexts: SENTINEL creates a log of these actions. This log can be exploited during reconciliation. Other systems offer linguistic primitives for specifying the behavior of the process support system when unexpected events occur. Such kind of primitives range from simple exception handling imported by some programming languages <ref> [8] </ref> to more sophisticated mechanisms based on non-conventional logics [1].
Reference: [9] <author> G. Valetto and G. Kaiser. </author> <title> Enveloping sophisticated tools into computer-aided software engineering environments. </title> <booktitle> In Proceedings of the 7th International Workshop on Computer-Aided Software Engineering, </booktitle> <month> July </month> <year> 1995. </year>
Reference-contexts: This problem is strictly related to the issue of supporting the interaction between humans and the system, and has been addressed in several projects. In <ref> [2, 9] </ref> end-users' tools offer a programmatic interface through which they can notify to the process support system state changes and can receive service requests.
References-found: 9

