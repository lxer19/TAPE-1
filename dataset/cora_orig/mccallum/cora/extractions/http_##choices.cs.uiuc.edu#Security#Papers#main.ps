URL: http://choices.cs.uiuc.edu/Security/Papers/main.ps
Refering-URL: http://choices.cs.uiuc.edu/Security/index.html
Root-URL: http://www.cs.uiuc.edu
Email: ftinq,liaog@cs.uiuc.edu  
Title: Active Capability: An Application Specific Security and Protection Model  
Author: Tin Qian Willy Liao 
Date: January 18, 1996  
Address: 1304 W. Springfield Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign Digital Computer Laboratory  
Abstract: Traditional security models are mostly centralized, coarse grained and static. They are not suitable for large distributed and anonymous evironments like internet. With the increasing importance of internet and highspeed networking, it is essential to provide a security model that could incorporate application specific security policies dynamicaly and effieciently. In this paper we proposed a new script-based security and protection model which supports application specific security policies. Essentially it extends traditional capabilities with user-definable scripts, called Active Capabilities. This model synthizes the recent innovations on type safe scripting language, extensible operating systems, and software protection. We demostrated that active capability can support security features difficult to provide in traditional capability-based systems such as revocation, propagation confinement (cascading), access constrain (Restriction) and auditing . We show that by shifting the complexity from system level to user level the simple security core can be implemented efficiently. In addition, applications only pay the necessary overhead incurred by their required security functions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Daniel Stevenson, Nathan Hillery, and Grey Byrd. </author> <title> Secure communications in atm networks. </title> <journal> Communication of ACM, </journal> <volume> 38(2) </volume> <pages> 45-52, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: However few existing systems has addressed this issue. Additionally, since the security enforcement often comes with significant overhead, it is also desirable for applications just to pay what they want. The emerging point-to-point highspeed networks like ATM haven't solved the security problem. On the contuary existing study <ref> [1] </ref> showed ATM networks are also vulnerable to eavesdropping and deinal of service attack. Security issue in ATM networks presents new chanlenges. Another inadequately studied issue on computer security is denial of service protection.
Reference: [2] <author> J. Mitchell et al. </author> <title> An Overview of the Spring System. </title> <booktitle> In Proceedings of Compcon 'Spring 1994, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: In Mach [7] capabilities (called port rights in Mach) are maintained by the kernel. Through those capabilities, messages can be sent to ports in a different domain. However these capabilities can not be shared or copied between domains. Spring <ref> [2] </ref> also used in-kernel data structures to provide protected cross domain communications. Although doors can be transfered among domains through system calls, extra user/kernel crossing makes it expgnsive. On the other hand, Amoeba [9] and Chorus [6] used password capabilities which is mainly a string of unforgable user space data.
Reference: [3] <author> James Gosling and Henry McGilton. </author> <title> The Java Language Enviroment: a White Paper. </title> <type> Technical report, </type> <institution> Sun Microsystems Computer Company, Mountain View, </institution> <address> CA 94043, USA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: It is essential that the system can safely run the script in a domain different from the one in which the script originated. Thus we advocate the use of a safe language such as Java <ref> [3] </ref> which is typesafe and can be checked for security violations. Another benefit of using Java is that we can construct active capability in an object-oriented fasion. For example capabilities with delegation support can reuse the authentication part code through subclassing the authenticated capabilites.
Reference: [4] <author> P. Janson and R. Molva. </author> <title> Security in open networks and distributed systems. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 22(5) </volume> <pages> 323-346, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: With the advent of internet and highspeed networking, this conventional security model is no longer suitable for supporting distributed and autonomous systems. A wide area distributed systems like internet is a federation of different computer systems with very diverse security policies. In <ref> [4] </ref> P. Janson et al. listed several typical scenarios with different security protection boundaries. They pointed out that the great diversity arised in the different combinations and refinements of these scenarios requires a broad set of protection and security functions. However few existing systems has addressed this issue.
Reference: [5] <author> Jeffrey S. Chase, Henry M. Levy, Micheal J. Feeley, and Edward D. Lazowska. </author> <title> Sharing and protection in a single-address-space operating system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(4) </volume> <pages> 271-307, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: All these conventional protection models are based on the concept of protecting entry points where messages are sent to. However this kind model has inherent inefficieny because of the extra indirection it imposes even on sharing among mutually trusting processes. Hence some recent research, such as Opal <ref> [5] </ref>, Lipto [10], proposed direct sharing models whch decouples protection from modularity. For example in Opal untrusted parties resides in different protection domains supported through standard page-based protection mechanisms. Capabilities become an integral part of kernel paging mechanism to support fine grain protection and sharing among different domain efficiently.
Reference: [6] <author> M. Rozier, V. Abrossimov, F. Armand, L. Boule, M. Gien, M. Guillemont, F. Herrrmann, P. Leonard, S. Langlois and W. Neubauser. </author> <title> Chorus distributed operating systems. </title> <journal> Computer Systems, </journal> <volume> 1(4), </volume> <year> 1988. </year>
Reference-contexts: However these capabilities can not be shared or copied between domains. Spring [2] also used in-kernel data structures to provide protected cross domain communications. Although doors can be transfered among domains through system calls, extra user/kernel crossing makes it expgnsive. On the other hand, Amoeba [9] and Chorus <ref> [6] </ref> used password capabilities which is mainly a string of unforgable user space data. Since it resides in user space, it makes sharing and copying easier than in-kernel capabilities. All these conventional protection models are based on the concept of protecting entry points where messages are sent to.
Reference: [7] <author> M. Young, A. Tevanian, R. Rashid, D. Golub, J. Eppinger, J. Chew, W. Bolosky, D. Black, and R. Baron. </author> <title> The duality of memory and communication in the implementation of a multiprocessor operating system. </title> <booktitle> In Proceeding of the 11th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 63-67, </pages> <year> 1987. </year>
Reference-contexts: In our model delegation is supported by constructing delegatable capabilities which accepts delegate operation and generates new capabilites for delegatees. 5 Related Work Conventional capabilities originated from the early research in operating systems. They were mostly implemented either as passive data strings or kernel entries. In Mach <ref> [7] </ref> capabilities (called port rights in Mach) are maintained by the kernel. Through those capabilities, messages can be sent to ports in a different domain. However these capabilities can not be shared or copied between domains. Spring [2] also used in-kernel data structures to provide protected cross domain communications.
Reference: [8] <author> Jonathan K. Millen. </author> <title> A resource allocation model for denial of service. </title> <booktitle> In 1995 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 137-147, </pages> <address> Oakland, California, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: Security issue in ATM networks presents new chanlenges. Another inadequately studied issue on computer security is denial of service protection. The few existing research in this area were mostly about defining access-control policies which are largely based on the traditional access matrix model. Millen in <ref> [8] </ref> pointed out that the access matrix model "is not 1 expressive enough to elucide the problem of denial of serice". Moreover access control policies are inherently application dependent. Epecially in internet environment little effort has been made to implement application specific access control policies.
Reference: [9] <author> S. Mullender and A. Tanenbaum. </author> <title> the design of a capability-based operating system. </title> <journal> CCom-puter Journal, </journal> <volume> 29(4) </volume> <pages> 289-299, </pages> <year> 1986. </year>
Reference-contexts: However these capabilities can not be shared or copied between domains. Spring [2] also used in-kernel data structures to provide protected cross domain communications. Although doors can be transfered among domains through system calls, extra user/kernel crossing makes it expgnsive. On the other hand, Amoeba <ref> [9] </ref> and Chorus [6] used password capabilities which is mainly a string of unforgable user space data. Since it resides in user space, it makes sharing and copying easier than in-kernel capabilities.
Reference: [10] <author> P. Druschel, L. Peterson, and N. C. Hutchinson. </author> <title> Decoupling modularity and protection in lipto. </title> <booktitle> In IEEE Proceedings of the 12th international Conference on Distributed Computer Systems, </booktitle> <year> 1992. </year>
Reference-contexts: All these conventional protection models are based on the concept of protecting entry points where messages are sent to. However this kind model has inherent inefficieny because of the extra indirection it imposes even on sharing among mutually trusting processes. Hence some recent research, such as Opal [5], Lipto <ref> [10] </ref>, proposed direct sharing models whch decouples protection from modularity. For example in Opal untrusted parties resides in different protection domains supported through standard page-based protection mechanisms. Capabilities become an integral part of kernel paging mechanism to support fine grain protection and sharing among different domain efficiently.
Reference: [11] <author> Robert H. Deng, Shailendra K. Bhonsle, Weiguo Wang, and Aurel A. Lazar. </author> <title> Integrating security in corba based object architecures. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, CA, </address> <year> 1995. </year>
Reference-contexts: Most existing research on security in distributed systems are based on client/server model. The disadvantage of those approaches is that security information were established statically. Recent effort on standarizing object-oriented technology in distributed computing environment like OMG's CORBA requires a more dynamic security model. Hence in <ref> [11] </ref> Robert Deng et al. proposed a secure object oriented architecture for integrating security in CORBA. Another similar study was done in the context of Legion project.
Reference: [12] <author> Wm A. Wulf, Chenxi Wang, and Darrel Kienzle. </author> <title> A New Model of Security for Distributed Systems. </title> <type> Technical Report CS-95-34, </type> <institution> University of Virginia, </institution> <month> August </month> <year> 1995. </year> <month> 8 </month>
Reference-contexts: Hence in [11] Robert Deng et al. proposed a secure object oriented architecture for integrating security in CORBA. Another similar study was done in the context of Legion project. A object-oriented security model presented in <ref> [12] </ref> provides a general framework for defining per object security policy by introducing several security-related special member functions to the base objects. User can define its own 7 security policies by overwriting those member functions.
References-found: 12

