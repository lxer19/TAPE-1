URL: http://www.cs.utexas.edu/users/croach/papers/JavaFutures.ps
Refering-URL: http://www.cs.utexas.edu/users/croach/Future.html
Root-URL: 
Email: croach@cs.utexas.edu  
Title: Polymorphic Futures in Java applications, the benefits of concurrency are obvious. As with Java, many
Author: Clay Roach May , 
Note: From operating systems to modern-day  will be addressing in this paper, although many of the concepts of futures apply to any level where concurrent operations exist.  
Abstract: A future represents the type of result that will be computed some time in the future. For example: if the result of an asynchronous operation is an integer, then a "future integer" type would represent the reference to the integer result. 
Abstract-found: 1
Intro-found: 1
Reference: [Flan] <author> Flanagan, David. </author> <title> Java In a Nutshell. </title> <address> O'Reilly: Cambridge. </address> <year> 1997. </year>
Reference: [Gam] <author> Gamma, Erich, Richard Helm, Ralph Johnson, John Vlissides. </author> <booktitle> Design Patterns:Elements of Resuable ObjectOriented Software. </booktitle> <publisher> Addison-Wesley: </publisher> <address> Berkeley, CA. </address> <year> 1995 </year>
Reference-contexts: No burden is placed on the programmer to make the type casting and conversion explicit for each future type. 6 Summary Futures are a powerful mechanism for tracking the results of concurrent operations, utilizing notification, synchronization, and type coersion features. The future object serves as a proxy <ref> [Gam] </ref> to the result of an asynchronous operation, but adds extensibility to the proxy through the use of parametric polymorphism. A future defines a general interface for accessing remote or local objects on a network, guaranteeing high efficiency for these operations.
Reference: [Gos] <author> Gosling J., Joy B. and Steele G., </author> <title> "The Java & trade; Language Specification", </title> <publisher> Addison-Wesley, </publisher> <address> ISBN 0-201-663451-1, </address> <year> 1996 </year>
Reference: [Lav] <author> Lavender, R. Greg, Dennis G. Kafura. </author> <title> A Polymorphic Future and First-class Function Type for Concurrent ObjectOriented Programming. </title> <type> Unpublished. </type> <year> 1992. </year>
Reference-contexts: However, conversion to and from the type of the result can not be handled within the future class, casting can be dangerous, and conversion to and from the object type incurs unneeded overhead. Modeling a C++ implementation of futures <ref> [Lav] </ref>, I then considered using parametric 5 polymorphism to create the future type. Java does not include parametric polymorphism within the language, but there are a few different ways to achieve this desired effect. To create the polymorphic future type, I chose to use the Pizza compiler [Piz].
Reference: [Mey] <author> Meyer, Jon and Troy Downing. </author> <title> Java Virtual Machine. </title> <address> O'Reilly: Cambridge, </address> <year> 1997. </year> <note> [OJ] http://www.softlab.is.tsukuba.ac.jp/LANG/mich/openjava/ </note>
Reference: [Piz] <author> Odersky, Martin and Philip Wadler, </author> <title> "Pizza into Java: Translating theory into practice" appearing in Proc. </title> <booktitle> 24 th ACM Symposium on Principles of Programming Languages. </booktitle> <address> Paris, France, </address> <month> January </month> <year> 1997. </year> <note> See "http://cm.bell-labs.com/cm/cs/who/wadler/pizza/" for the Pizza project. </note>
Reference-contexts: Java does not include parametric polymorphism within the language, but there are a few different ways to achieve this desired effect. To create the polymorphic future type, I chose to use the Pizza compiler <ref> [Piz] </ref>. Using the Pizza compiler to generate polymorphic futures, I avoided complexities of reengineering the JVM and simplified the type conversion code required by subtyping. Use of parametric polymorphism for future types helps retain the extensibility of futures, and masks the underlying conversion operations handled by the Pizza compiler.
References-found: 6

