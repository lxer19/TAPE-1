URL: http://www.cse.psu.edu/~catuscia/teaching/cg520/papers_and_books/vanGlabbek.ps.gz
Refering-URL: http://www.cse.psu.edu/~catuscia/teaching/cg520/papers_and_books/
Root-URL: http://www.cse.psu.edu
Email: rvg@cs.stanford.edu  
Title: The Linear Time Branching Time Spectrum I  
Author: R.J. van Glabbeek 
Address: Stanford, CA 94305-9045, USA  
Affiliation: Computer Science Department, Stanford University  
Abstract: In this paper various semantics in the linear time branching time spectrum are presented in a uniform, model-independent way. Restricted to the class of finitely branching, concrete, sequential processes, only twelve of them turn out to be different, and most semantics found in the literature that can be defined uniformly in terms of action relations coincide with one of these twelve. Several testing scenarios, motivating these semantics, are presented, phrased in terms of `button pushing experiments' on generative and reactive machines. Finally ten of these semantics are applied to a simple language for finite, concrete, sequential, nondeterministic processes, and for each of them a complete axiomatization is provided. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. </author> <title> Abramsky (1987): Observation equivalence as a testing equivalence. </title> <booktitle> Theoretical Computer Science 53, </booktitle> <pages> pp. 225-241. </pages>
Reference-contexts: It was based on a reactive failure trace machine with replicator, but additionally the observer is equipped with the capacity of global testing. Global testing is described in Abramsky <ref> [1] </ref> as: "the ability to enumerate all (of finitely many) possible `operating environments' at each stage of the test, so as to guarantee that all nondeterministic branches will be pursued by various copies of the subject process".
Reference: [2] <author> S. Abramsky & S. </author> <title> Vickers (1993): Quantales, observational logic and process semantics. </title> <booktitle> Mathematical Structures in Computer Science 3, </booktitle> <pages> pp. 161-227. </pages>
Reference-contexts: Of course many more equivalences can be given then the ones presented here. The reason for selecting just these, is that they can be motivated rather nicely and/or play a role in the literature on semantic equivalences. In Abramsky & Vickers <ref> [2] </ref> the observations which underly many of the semantics in this paper are placed in a uniform algebraic framework, and some general completeness criteria are stated and proved.
Reference: [3] <author> P. </author> <month> Aczel </month> <year> (1988): </year> <title> Non-well-founded Sets, CSLI Lecture Notes 14. Stanford University. 46 The linear time branching time spectrum I Preliminary report, </title> <month> October 26, </month> <year> 1998 </year>
Reference-contexts: Non-well-founded sets Another characterization of bisimulation semantics can be given by means of Aczel's universe V of non-well-founded sets <ref> [3] </ref>. <p> Two processes p and q are branching equivalent (my terminology) if B (p) = B (q). It follows from Aczel's anti-foundation axiom that such a solution exists. In fact the axiom amounts to saying that systems of equations like the one above have unique solutions. In <ref> [3] </ref> there is also a section on communicating systems. There two processes are identified iff they are branching equivalent.
Reference: [4] <author> J.C.M. Baeten, J.A. Bergstra & J.W. </author> <title> Klop (1987): Ready-trace semantics for concrete process algebra with the priority operator. </title> <journal> Computer Journal 30(6), </journal> <pages> pp. 498-506. </pages>
Reference-contexts: Between readiness and bisimulation semantics one finds ready trace semantics, as introduced independently in Pnueli [37] (there called barbed semantics), Baeten, Bergstra & Klop <ref> [4] </ref> and Pomello [38] (under the name exhibited behaviour semantics). The natural completion of the square, suggested by failures, readiness and ready trace semantics yields failure trace semantics. For finitely branching processes this is the same as refusal semantics, introduced in Phillips [36]. <p> Two processes p and q are ready trace equivalent, notation p = RT q, if RT (p) = RT (q). In ready trace semantics (RT ) two processes are identified iff they are ready trace equivalent. In Baeten, Bergstra & Klop <ref> [4] </ref>, Pnueli [37] and Pomello [38] ready trace semantics was defined slightly differently. <p> Two processes p and q are ready trace equivalent in the sense of <ref> [4, 37, 38] </ref> if RT N (p) = RT N (q). Proposition 6.1 Let p; q 2 IP. Then RT N (p) = RT N (q) , RT (p) = RT (q). <p> A similar proof for RT can be found in Baeten, Bergstra & Klop <ref> [4] </ref>. For the remaining semantics a proof can be given along the same lines. 2 Theorem 6 Suppose Act is infinite.
Reference: [5] <author> J.W. de Bakker, J.N. Kok, J.-J.Ch. Meyer, E.-R. Olderog & J.I. </author> <title> Zucker (1986): Contrasting themes in the semantics of imperative concurrency. </title> <editor> In J.W. de Bakker, W.P. de Roever & G. Rozenberg, editors: </editor> <booktitle> Current Trends in Concurrency, </booktitle> <publisher> LNCS 224, Springer, </publisher> <pages> pp. 51-121. </pages>
Reference: [6] <author> J.W. de Bakker & J.I. </author> <title> Zucker (1982): Processes and the denotational semantics of concurrency. </title> <booktitle> Information and Computation 54(1/2), </booktitle> <pages> pp. 70-120. </pages>
Reference-contexts: The notion of bisimulation was introduced in Park [35]. Bisimulation equivalence is a refinement of observational equivalence, as introduced by Hennessy & Milner in [23]. On the domain of finitely branching, concrete, sequential processes, both equivalences coincide. Also the semantics of De Bakker & Zucker, presented in <ref> [6] </ref>, coincides with bisimulation semantics on this domain. Then there are ten semantics in between. First of all a variant of trace semantics can be obtained by using complete traces besides (or instead of) partial ones. In this paper it is called completed trace semantics. <p> In fact the axiom amounts to saying that systems of equations like the one above have unique solutions. In [3] there is also a section on communicating systems. There two processes are identified iff they are branching equivalent. A similar idea underlies the semantics of De Bakker & Zucker <ref> [6] </ref>, but there the domain of processes is a complete metric space and the definition of B above only works for finitely branching processes, and only if = is interpreted as isometry, rather then equality, in order to stay in well-founded set theory.
Reference: [7] <author> J.A. Bergstra, J.W. Klop & E.-R. </author> <title> Olderog (1986): Failure semantics with fair abstraction. </title> <type> Report CS-R8609, </type> <institution> CWI, </institution> <address> Amsterdam. </address>
Reference-contexts: Finitary failures semantics is the default version introduced at the beginning of this section. This can be regarded to be the semantics employed in Brookes & Roscoe [11] and Hoare [27]. Infinitary failures semantics was first discussed in Bergstra, Klop & Olderog <ref> [7] </ref>; it was proposed as a semantics for CSP in Roscoe [39]. The difference between the testing scenarios for F and F 1 is that only the latter allows observations of infinite duration. Obviously, F F F 1 .
Reference: [8] <author> J.A. Bergstra, J.W. Klop & E.-R. </author> <title> Olderog (1988): Readies and failures in the algebra of communicating processes. </title> <journal> SIAM Journal on Computing 17(6), </journal> <pages> pp. 1134-1177. </pages>
Reference-contexts: + + + + + + + + + + I (x + y) = I (x) + I (y) + + + + + + + + + + Table 2: Complete axiomatizations Proof: For F , R and B the proof is given in Bergstra, Klop & Olderog <ref> [8] </ref> by means of graph transformations. A similar proof for RT can be found in Baeten, Bergstra & Klop [4]. For the remaining semantics a proof can be given along the same lines. 2 Theorem 6 Suppose Act is infinite.
Reference: [9] <author> B. Bloom, S. Istrail & A.R. </author> <title> Meyer (1995): Bisimulation can't be traced. </title> <journal> Journal of the ACM 42(1), </journal> <pages> pp. 232-268. </pages>
Reference-contexts: For finitely branching processes this is the same as refusal semantics, introduced in Phillips [36]. Simulation semantics, based on the classical notion of simulation (see e.g. Park [35]), is independent of the last five semantics. Ready simulation semantics was introduced in Bloom, Istrail & Meyer <ref> [9] </ref> under the name GSOS trace congruence. It is finer than ready trace as well as simulation semantics. In Larsen & Skou [29] a more operational characterization of this equivalence was given under the name 2 3 -bisimulation equivalence. This characterization resembles the one used in this paper. <p> Proof: A trivial modification of the proof of Proposition 8.2. 2 A variant of ready simulation equivalence was originally proposed by Bloom, Istrail & Meyer <ref> [9] </ref> under the name GSOS trace congruence; they provided a modal characterization, to be discussed in Section 10. A relational characterization was first given by Larsen & Skou [29] under the name 2 3 -bisimulation equivalence. <p> Therefore an observer can with an arbitrary high degree of confidence assume that all transitions have been examined, simply by repeating an experiment many times. As argued among others in Bloom, Istrail & Meyer <ref> [9] </ref>, global testing in the above sense is a rather unrealistic testing ability. <p> The work in this direction reported so far includes <ref> [9] </ref> and [21]. More research in this direction will be reported in [17]. An interesting topic is the generalization of this work to a setting with silent moves and/or with parallelism. In both cases there turn out to be many interesting variations.
Reference: [10] <author> S.D. Brookes, </author> <title> C.A.R. Hoare & A.W. Roscoe (1984): A theory of communicating sequential processes. </title> <journal> Journal of the ACM 31(3), </journal> <pages> pp. 560-599. </pages>
Reference-contexts: Then there are ten semantics in between. First of all a variant of trace semantics can be obtained by using complete traces besides (or instead of) partial ones. In this paper it is called completed trace semantics. Failures semantics is introduced in Brookes, Hoare & Roscoe <ref> [10] </ref>, and used in the construction of a model for the system description language CSP (Hoare [25, 27]). It is finer than completed trace semantics. <p> They are finite-failures equivalent, notation p = F q, if F (p) = F (q), where F (p) denotes the set of failure pairs = n oe; X n = of p with X finite. The original failures semantics of Brookes, Hoare & Roscoe <ref> [10] </ref> is F , i.e. what I call finite-failures semantics. <p> Furthermore it would be interesting to give explicit representations of the equivalences, by representing processes as sets of observations instead of equivalence classes of process graphs, and defining operators like action prefixing and choice directly on these representations, as has been done for failures semantics in <ref> [10] </ref> and for readiness semantics in [34].
Reference: [11] <author> S.D. Brookes & A.W. </author> <title> Roscoe (1985): An improved failures model for communicating processes. In S.D. </title> <editor> Brookes, A.W. Roscoe & G. Winskel, editors: </editor> <booktitle> Seminar on Concurrency, </booktitle> <publisher> LNCS 197, Springer, </publisher> <pages> pp. 281-305. </pages>
Reference-contexts: Finitary failures semantics is the default version introduced at the beginning of this section. This can be regarded to be the semantics employed in Brookes & Roscoe <ref> [11] </ref> and Hoare [27]. Infinitary failures semantics was first discussed in Bergstra, Klop & Olderog [7]; it was proposed as a semantics for CSP in Roscoe [39]. The difference between the testing scenarios for F and F 1 is that only the latter allows observations of infinite duration.
Reference: [12] <author> P. </author> <month> Darondeau </month> <year> (1982): </year> <title> An enlarged definition and complete axiomatisation of observational congruence of finite processes. </title> <editor> In M. Dezani-Ciancaglini & U. Montanari, editors: </editor> <booktitle> Proceedings international symposium on programming: 5 th colloquium, </booktitle> <publisher> Aarhus, LNCS 137, Springer, </publisher> <pages> pp. 47-62. </pages>
Reference-contexts: It is finer than completed trace semantics. The semantics based on testing equivalences, as developed in De Nicola & Hennessy [14], coincides with failures semantics on the domain of finitely branching, concrete, sequential processes, as do the semantics of Kennaway [28] and Darondeau <ref> [12] </ref>. This has been established in De Nicola [13]. <p> 2 F (left ) F (right )). 2 a a ab + a (b + c) 6= F a a (b + c) Counterexample 3: Completed trace and completed simulation equivalent, but not failures equivalent Alternative characterizations In De Nicola [13] several equivalences, that were proposed in Kennaway [28], Darondeau <ref> [12] </ref> and De Nicola & Hennessy [14], are shown to coincide with failures semantics on the domain of finitely branching transition systems without internal moves. For this purpose he uses the following alternative characterization of failures equivalence.
Reference: [13] <author> R. </author> <title> De Nicola (1987): Extensional equivalences for transition systems. </title> <journal> Acta Informatica 24, </journal> <pages> pp. 211-237. </pages>
Reference-contexts: The semantics based on testing equivalences, as developed in De Nicola & Hennessy [14], coincides with failures semantics on the domain of finitely branching, concrete, sequential processes, as do the semantics of Kennaway [28] and Darondeau [12]. This has been established in De Nicola <ref> [13] </ref>. <p> F (right ) (since = n a; fbg n = 2 F (left ) F (right )). 2 a a ab + a (b + c) 6= F a a (b + c) Counterexample 3: Completed trace and completed simulation equivalent, but not failures equivalent Alternative characterizations In De Nicola <ref> [13] </ref> several equivalences, that were proposed in Kennaway [28], Darondeau [12] and De Nicola & Hennessy [14], are shown to coincide with failures semantics on the domain of finitely branching transition systems without internal moves. For this purpose he uses the following alternative characterization of failures equivalence.
Reference: [14] <author> R. De Nicola & M. </author> <title> Hennessy (1984): Testing equivalences for processes. </title> <booktitle> Theoretical Computer Science 34, </booktitle> <pages> pp. 83-133. </pages>
Reference-contexts: Failures semantics is introduced in Brookes, Hoare & Roscoe [10], and used in the construction of a model for the system description language CSP (Hoare [25, 27]). It is finer than completed trace semantics. The semantics based on testing equivalences, as developed in De Nicola & Hennessy <ref> [14] </ref>, coincides with failures semantics on the domain of finitely branching, concrete, sequential processes, as do the semantics of Kennaway [28] and Darondeau [12]. This has been established in De Nicola [13]. <p> )). 2 a a ab + a (b + c) 6= F a a (b + c) Counterexample 3: Completed trace and completed simulation equivalent, but not failures equivalent Alternative characterizations In De Nicola [13] several equivalences, that were proposed in Kennaway [28], Darondeau [12] and De Nicola & Hennessy <ref> [14] </ref>, are shown to coincide with failures semantics on the domain of finitely branching transition systems without internal moves. For this purpose he uses the following alternative characterization of failures equivalence.
Reference: [15] <author> R.J. </author> <title> van Glabbeek (1990): The linear time branching time spectrum. </title> <type> Report CS-R9029, </type> <institution> CWI, Amsterdam. </institution> <note> Extended abstract in J.C.M. </note> <editor> Baeten & J.W. Klop, editors: </editor> <booktitle> Proceedings CONCUR '90, Theories of Concurrency: Unification and Extension, </booktitle> <address> Amsterdam, </address> <month> August </month> <year> 1990, </year> <note> LNCS 458, Springer-Verlag, </note> <year> 1990, </year> <pages> pp. 278-297. </pages>
Reference: [16] <author> R.J. </author> <title> van Glabbeek (1990): The refinement theorem for ST-bisimulation semantics. </title> <editor> In M. Broy & C.B. Jones, editors: </editor> <booktitle> Proceedings IFIP TC2 Working Conference on Programming Concepts and Methods, Sea of Gallilee, </booktitle> <address> Israel, </address> <publisher> North-Holland, </publisher> <pages> pp. 27-52. </pages>
Reference-contexts: In both cases there turn out to be many interesting variations. The generalization to a setting with invisible actions will be tackled in [17]. Some work towards generalizing the spectrum to a setting with parallelism can be found for instance in [38] and <ref> [16] </ref>. A generalization to preorders, instead of equivalences, can be obtained by replacing conditions like O (p) = O (q) by O (p) O (q). Since preorders are often useful for verification purposes, it seems to be worthwhile to classify them as well. Also this will be done in [17].
Reference: [17] <author> R.J. </author> <title> van Glabbeek (1993): The linear time branching time spectrum II; the semantics of sequential systems with silent moves. </title> <note> Preliminary version available from boole.stanford.edu. Extended abstract in Proceedings CONCUR 93, </note> <institution> Hildesheim, </institution> <address> Germany, </address> <publisher> LNCS 715, Springer-Verlag, </publisher> <pages> pp. 66-81. References 47 </pages>
Reference-contexts: The work in this direction reported so far includes [9] and [21]. More research in this direction will be reported in <ref> [17] </ref>. An interesting topic is the generalization of this work to a setting with silent moves and/or with parallelism. In both cases there turn out to be many interesting variations. The generalization to a setting with invisible actions will be tackled in [17]. <p> research in this direction will be reported in <ref> [17] </ref>. An interesting topic is the generalization of this work to a setting with silent moves and/or with parallelism. In both cases there turn out to be many interesting variations. The generalization to a setting with invisible actions will be tackled in [17]. Some work towards generalizing the spectrum to a setting with parallelism can be found for instance in [38] and [16]. A generalization to preorders, instead of equivalences, can be obtained by replacing conditions like O (p) = O (q) by O (p) O (q). <p> A generalization to preorders, instead of equivalences, can be obtained by replacing conditions like O (p) = O (q) by O (p) O (q). Since preorders are often useful for verification purposes, it seems to be worthwhile to classify them as well. Also this will be done in <ref> [17] </ref>.
Reference: [18] <author> R.J. van Glabbeek & J.J.M.M. </author> <title> Rutten (1989): The processes of De Bakker and Zucker represent bisimulation equivalence classes. </title> <editor> In J.W. de Bakker, </editor> <address> 25 jaar semantiek, liber amico-rum, </address> <publisher> CWI, Amsterdam, </publisher> <pages> pp. 243-246. </pages>
Reference-contexts: For finitely branching processes the semantics of De Bakker and Zucker coincides with the one of Aczel and also with bisimulation semantics. This is observed in Van Glabbeek & Rutten <ref> [18] </ref>, where also a proof can be found of the next proposition, saying that bisimulation equivalence coincides with branching equivalence. Proposition 12.4 Let p; q 2 IP. Then p $ q , B (p) = B (q).
Reference: [19] <author> R.J. van Glabbeek, S.A. Smolka, B. Steffen & C.M.N. </author> <month> Tofts </month> <year> (1990): </year> <title> Reactive, generative, and stratified models of probabilistic processes. </title> <booktitle> In Proceedings 5 th Annual Symposium on Logic in Computer Science, </booktitle> <address> Philadelphia, USA, </address> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 130-141. </pages>
Reference-contexts: Among the semantics which are not definable in terms of action relations and thus fall outside the scope of this paper, one finds semantics that take stochastic properties of processes into account, as in Van Glabbeek, Smolka, Steffen & Tofts <ref> [19] </ref> and semantics that make almost no identifications and are hardly used for system verification. About the contents The first section of this paper introduces labelled transition systems and process graphs. A labelled transition system is any process domain that is equipped with action relations.
Reference: [20] <author> J.F. </author> <title> Groote (1990): A new strategy for proving !-completeness with applications in process algebra. </title> <editor> In J.C.M. Baeten & J.W. Klop, editors: </editor> <booktitle> Proceedings CONCUR 90, </booktitle> <address> Amsterdam, </address> <publisher> LNCS 458, Springer, </publisher> <pages> pp. 314-331. </pages>
Reference-contexts: It follows that the axioms marked with `v' are derivable. Proof: For O 2 fT; CT; F; R; F T; RT; Bg this has been established by Jan Friso Groote <ref> [20] </ref>. His proof for F , R, F T and RT can be applied to S and RS as well. 2 Groote also showed that if Act is finite, Theorem 3.2 does not hold for F , R, F T and RT .
Reference: [21] <author> J.F. Groote & F.W. </author> <title> Vaandrager (1992): Structured operational semantics and bisimu-lation as a congruence. </title> <booktitle> Information and Computation 100(2), </booktitle> <pages> pp. 202-260. </pages>
Reference-contexts: In Larsen & Skou [29] a more operational characterization of this equivalence was given under the name 2 3 -bisimulation equivalence. This characterization resembles the one used in this paper. Finally 2-nested simulation semantics, introduced in Groote & Vaandrager <ref> [21] </ref>, is located between ready simulation and bisimulation semantics, and possible-futures semantics, as Labelled transition systems and process graphs 5 proposed in Rounds & Brookes [40], can be positioned between 2-nested simulation and readiness semantics. <p> Reactive machines seem to be unsuited for testing completed trace, completed simulation and failures equivalence. 11 2-nested simulation semantics 2-nested simulation equivalence popped up naturally in Groote & Vaandrager <ref> [21] </ref> as the coarsest congruence with respect to a large and general class of operators that is finer than completed trace equivalence. Definition 11 A 2-nested simulation is a simulation contained in simulation equivalence ( ! ). <p> Proof: A trivial modification of the proof of Proposition 8.2. 2 Testing scenario In order to obtain a testing scenario for this equivalence one has to introduce the rather unnatural notion of a lookahead <ref> [21] </ref>: The 2-nested simulation machine is a variant of the ready trace machine with replicator, where in an idle state the machine not only tells which actions are on the menu, but even which simulation formulas are (not) satisfied in the current state. <p> The work in this direction reported so far includes [9] and <ref> [21] </ref>. More research in this direction will be reported in [17]. An interesting topic is the generalization of this work to a setting with silent moves and/or with parallelism. In both cases there turn out to be many interesting variations.
Reference: [22] <author> M. </author> <title> Hennessy (1985): Acceptance trees. </title> <journal> Journal of the ACM 32(4), </journal> <pages> pp. 896-928. </pages>
Reference-contexts: Proposition 4.4 Let p; q 2 IP. Then p ' q , p = F q. Proof: p after oe MUST X , = n oe; X n In Hennessy <ref> [22] </ref>, a model for nondeterministic behaviours is proposed in which a process is represented as an acceptance tree.
Reference: [23] <author> M. Hennessy & R. </author> <title> Milner (1980): On observing nondeterminism and concurrency. </title> <editor> In J.W. de Bakker & J. van Leeuwen, editors: </editor> <booktitle> Proceedings 7 th ICALP, </booktitle> <address> Noorwijkerhout, </address> <publisher> LNCS 85, Springer, </publisher> <pages> pp. </pages> <month> 299-309. </month> <title> This is a preliminary version of: Algebraic laws for nondeterminism and concurrency. </title> <journal> JACM, </journal> <volume> 32(1) </volume> <pages> 137-161, </pages> <year> 1985. </year>
Reference-contexts: Bisimulation semantics is the standard semantics for the system description language CCS (Milner [31]). The notion of bisimulation was introduced in Park [35]. Bisimulation equivalence is a refinement of observational equivalence, as introduced by Hennessy & Milner in <ref> [23] </ref>. On the domain of finitely branching, concrete, sequential processes, both equivalences coincide. Also the semantics of De Bakker & Zucker, presented in [6], coincides with bisimulation semantics on this domain. Then there are ten semantics in between. <p> Therefore = n a; X n n a; B fl (q) n a ! qg, which had to be established. 2 Infinite processes The finite version of bisimulation equivalence is described by the Hennessy Milner logic (HML) <ref> [23, 24] </ref>. <p> Let HM (p) denote the set of all Hennessy-Milner formulas that are satisfied by the process p: HM (p) = f' 2 L HM j p j= 'g. Two processes p and q are HML-equivalent, notation p = B q, if For image finite processes Hennessy & Milner <ref> [23, 24] </ref> provided the following characterizations of this equivalence. Definition 12.5 Let p; q 2 IP. <p> * p n+1 q if for all a 2 Act: a ! p 0 implies 9q 0 : q a * q ! q 0 implies 9p 0 : p a * p and q are observationally equivalent, notation p q, if p n q for every n 2 IN <ref> [23, 24] </ref>. Proposition 12.5 Let p; q 2 IP be image finite. Then p q , HM L (p) = HM L (q). Proof: This is Theorem 2.2 in Hennessy & Milner [23, 24]. 2 Proposition 12.6 Let p; q 2 IP be image finite. <p> p and q are observationally equivalent, notation p q, if p n q for every n 2 IN <ref> [23, 24] </ref>. Proposition 12.5 Let p; q 2 IP be image finite. Then p q , HM L (p) = HM L (q). Proof: This is Theorem 2.2 in Hennessy & Milner [23, 24]. 2 Proposition 12.6 Let p; q 2 IP be image finite. Then p $ q , p q. Proof: This follows immediately from Theorem 2.1 in Hennessy & Milner [23, 24]. 2 Inspired by this insight, Park [35] proposed the concise formulation of bisimulation equivalence employed in Definition 12. <p> Proof: This is Theorem 2.2 in Hennessy & Milner <ref> [23, 24] </ref>. 2 Proposition 12.6 Let p; q 2 IP be image finite. Then p $ q , p q. Proof: This follows immediately from Theorem 2.1 in Hennessy & Milner [23, 24]. 2 Inspired by this insight, Park [35] proposed the concise formulation of bisimulation equivalence employed in Definition 12. Below is a modal characterization of .
Reference: [24] <author> M. Hennessy & R. </author> <title> Milner (1985): Algebraic laws for nondeterminism and concurrency. </title> <journal> Journal of the ACM 32(1), </journal> <pages> pp. 137-161. </pages>
Reference-contexts: Therefore = n a; X n n a; B fl (q) n a ! qg, which had to be established. 2 Infinite processes The finite version of bisimulation equivalence is described by the Hennessy Milner logic (HML) <ref> [23, 24] </ref>. <p> Let HM (p) denote the set of all Hennessy-Milner formulas that are satisfied by the process p: HM (p) = f' 2 L HM j p j= 'g. Two processes p and q are HML-equivalent, notation p = B q, if For image finite processes Hennessy & Milner <ref> [23, 24] </ref> provided the following characterizations of this equivalence. Definition 12.5 Let p; q 2 IP. <p> * p n+1 q if for all a 2 Act: a ! p 0 implies 9q 0 : q a * q ! q 0 implies 9p 0 : p a * p and q are observationally equivalent, notation p q, if p n q for every n 2 IN <ref> [23, 24] </ref>. Proposition 12.5 Let p; q 2 IP be image finite. Then p q , HM L (p) = HM L (q). Proof: This is Theorem 2.2 in Hennessy & Milner [23, 24]. 2 Proposition 12.6 Let p; q 2 IP be image finite. <p> p and q are observationally equivalent, notation p q, if p n q for every n 2 IN <ref> [23, 24] </ref>. Proposition 12.5 Let p; q 2 IP be image finite. Then p q , HM L (p) = HM L (q). Proof: This is Theorem 2.2 in Hennessy & Milner [23, 24]. 2 Proposition 12.6 Let p; q 2 IP be image finite. Then p $ q , p q. Proof: This follows immediately from Theorem 2.1 in Hennessy & Milner [23, 24]. 2 Inspired by this insight, Park [35] proposed the concise formulation of bisimulation equivalence employed in Definition 12. <p> Proof: This is Theorem 2.2 in Hennessy & Milner <ref> [23, 24] </ref>. 2 Proposition 12.6 Let p; q 2 IP be image finite. Then p $ q , p q. Proof: This follows immediately from Theorem 2.1 in Hennessy & Milner [23, 24]. 2 Inspired by this insight, Park [35] proposed the concise formulation of bisimulation equivalence employed in Definition 12. Below is a modal characterization of .
Reference: [25] <author> C.A.R. </author> <title> Hoare (1978): Communicating sequential processes. </title> <journal> Communications of the ACM 21(8), </journal> <pages> pp. 666-677. </pages>
Reference-contexts: In this paper it is called completed trace semantics. Failures semantics is introduced in Brookes, Hoare & Roscoe [10], and used in the construction of a model for the system description language CSP (Hoare <ref> [25, 27] </ref>). It is finer than completed trace semantics. The semantics based on testing equivalences, as developed in De Nicola & Hennessy [14], coincides with failures semantics on the domain of finitely branching, concrete, sequential processes, as do the semantics of Kennaway [28] and Darondeau [12].
Reference: [26] <author> C.A.R. </author> <title> Hoare (1980): Communicating sequential processes. In R.M. McKeag & A.M. Macnaghten, editors: On the construction of programs an advanced course, </title> <publisher> Cambridge University Press, </publisher> <pages> pp. 229-254. </pages>
Reference-contexts: The coarsest one (i.e. the semantics making the most identifications) is trace semantics, as presented in Hoare <ref> [26] </ref>. In trace semantics only partial traces are employed. The finest one (making less identifications than any of the others) is bisimulation semantics, as presented in Milner [33]. Bisimulation semantics is the standard semantics for the system description language CCS (Milner [31]).
Reference: [27] <author> C.A.R. </author> <title> Hoare (1985): Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs. </address>
Reference-contexts: Finally, instead of dropping the usual distinction between internal and external actions, one can equivalently maintain to study concrete processes in which no internal actions occur (and also no internal choices as in CSP <ref> [27] </ref>). For this simple class of processes, when considering only semantic equivalences that can be defined uniformly in terms of action relations, the announced semantic lattice collapses in six out of seven dimensions and covers only the linear time branching time spectrum. <p> In this paper it is called completed trace semantics. Failures semantics is introduced in Brookes, Hoare & Roscoe [10], and used in the construction of a model for the system description language CSP (Hoare <ref> [25, 27] </ref>). It is finer than completed trace semantics. The semantics based on testing equivalences, as developed in De Nicola & Hennessy [14], coincides with failures semantics on the domain of finitely branching, concrete, sequential processes, as do the semantics of Kennaway [28] and Darondeau [12]. <p> Finitary failures semantics is the default version introduced at the beginning of this section. This can be regarded to be the semantics employed in Brookes & Roscoe [11] and Hoare <ref> [27] </ref>. Infinitary failures semantics was first discussed in Bergstra, Klop & Olderog [7]; it was proposed as a semantics for CSP in Roscoe [39]. The difference between the testing scenarios for F and F 1 is that only the latter allows observations of infinite duration.
Reference: [28] <author> J.K. </author> <title> Kennaway (1981): Formal semantics of nondetermism and parallelism. </title> <type> PhD thesis, </type> <institution> University of Oxford. </institution>
Reference-contexts: It is finer than completed trace semantics. The semantics based on testing equivalences, as developed in De Nicola & Hennessy [14], coincides with failures semantics on the domain of finitely branching, concrete, sequential processes, as do the semantics of Kennaway <ref> [28] </ref> and Darondeau [12]. This has been established in De Nicola [13]. <p> n = 2 F (left ) F (right )). 2 a a ab + a (b + c) 6= F a a (b + c) Counterexample 3: Completed trace and completed simulation equivalent, but not failures equivalent Alternative characterizations In De Nicola [13] several equivalences, that were proposed in Kennaway <ref> [28] </ref>, Darondeau [12] and De Nicola & Hennessy [14], are shown to coincide with failures semantics on the domain of finitely branching transition systems without internal moves. For this purpose he uses the following alternative characterization of failures equivalence.
Reference: [29] <author> K.G. Larsen & A. </author> <month> Skou </month> <year> (1991): </year> <title> Bisimulation through probabilistic testing. </title> <journal> Information and Computation, </journal> <volume> 94. </volume>
Reference-contexts: Park [35]), is independent of the last five semantics. Ready simulation semantics was introduced in Bloom, Istrail & Meyer [9] under the name GSOS trace congruence. It is finer than ready trace as well as simulation semantics. In Larsen & Skou <ref> [29] </ref> a more operational characterization of this equivalence was given under the name 2 3 -bisimulation equivalence. This characterization resembles the one used in this paper. <p> A relational characterization was first given by Larsen & Skou <ref> [29] </ref> under the name 2 3 -bisimulation equivalence. A 2 3 -bisimulation is defined just like a ready simulation, except that the second clause reads "if pRq and 9q 0 : q a ! q 0 then 9p 0 : p a ! p 0 ". This is clearly equivalent. <p> These observations can already be expressed in L B : p j= e X , p j= V V V A different implementation of global testing is given in Larsen & Skou <ref> [29] </ref>. They assumed that every transition in a transition system has a certain probability of being taken. Therefore an observer can with an arbitrary high degree of confidence assume that all transitions have been examined, simply by repeating an experiment many times.
Reference: [30] <editor> A.R. Meyer (1985): </editor> <booktitle> Report on the 5 th international workshop on the semantics of programming languages in Bad Honnef. Bulletin of the European Association for Theoretical Computer Science 27, </booktitle> <pages> pp. 83-84. </pages>
Reference: [31] <author> R. </author> <title> Milner (1980): A Calculus of Communicating Systems, </title> <publisher> LNCS 92. Springer. </publisher>
Reference-contexts: In trace semantics only partial traces are employed. The finest one (making less identifications than any of the others) is bisimulation semantics, as presented in Milner [33]. Bisimulation semantics is the standard semantics for the system description language CCS (Milner <ref> [31] </ref>). The notion of bisimulation was introduced in Park [35]. Bisimulation equivalence is a refinement of observational equivalence, as introduced by Hennessy & Milner in [23]. On the domain of finitely branching, concrete, sequential processes, both equivalences coincide. <p> Milner <ref> [31] </ref>, pp. 10-12). Furthermore the semantics will be partially ordered by the relation `makes at least as many identifications as'. This yields the linear time branching time spectrum. Counterexamples are provided, showing that on the graph domain this ordering cannot be further expanded. <p> During the execution of a no buttons can be pressed. As soon as the execution of a is completed the light switches off, so that the observer knows that the process is ready for a new trial. Reactive machines as described above originate from Milner <ref> [31, 32] </ref>. One family of testing scenarios with reactive machines can be obtained by allowing the observer to try to depress more than one button at a time. <p> Proposition 11.2 Let p; q 2 IP be image finite. Then p = 2S q , p = 2S q. Proof: An easy modifications of the proof of Proposition 8.4, also using the result of Proposition 8.4. 2 12 Bisimulation semantics The concept of bisimulation equivalence stems from Milner <ref> [31] </ref>. It's formulation below is due to Park [35]. <p> This goes exactly as in the proof of Proposition 8.2. 2 Testing scenario The testing scenario for bisimulation semantics, as presented in Milner <ref> [31] </ref>, is the oldest and most powerful testing scenario, from which most others have been derived by omitting some of its features. It was based on a reactive failure trace machine with replicator, but additionally the observer is equipped with the capacity of global testing. <p> Global testing is described in Abramsky [1] as: "the ability to enumerate all (of finitely many) possible `operating environments' at each stage of the test, so as to guarantee that all nondeterministic branches will be pursued by various copies of the subject process". Milner <ref> [31] </ref> implemented global testing by assuming that "(i) It is the weather at any moment which determines the choice of transition (in case of ambiguity [...]); (ii) The weather has only finitely many states|at least as far as choice-resolution is concerned; (iii) We can control the weather." Now it can be
Reference: [32] <author> R. </author> <title> Milner (1981): Modal characterisation of observable machine behaviour. </title> <editor> In G. Astesiano & C. Bohm, editors: </editor> <booktitle> Proceedings CAAP 81, </booktitle> <publisher> LNCS 112, Springer, </publisher> <pages> pp. 25-34. </pages>
Reference-contexts: During the execution of a no buttons can be pressed. As soon as the execution of a is completed the light switches off, so that the observer knows that the process is ready for a new trial. Reactive machines as described above originate from Milner <ref> [31, 32] </ref>. One family of testing scenarios with reactive machines can be obtained by allowing the observer to try to depress more than one button at a time. <p> Unfortunately, as remarked in Milner <ref> [32] </ref>, the second assumption implies that the amount of different a-moves an investigated process can perform is bounded by the number of possible weather conditions; so for general application this condition has to be dropped, thereby losing the possibility of effective implementation of the testing scenario.
Reference: [33] <author> R. </author> <title> Milner (1983): Calculi for synchrony and asynchrony. </title> <booktitle> Theoretical Computer Science 25, </booktitle> <pages> pp. </pages> <month> 267-310. </month> <title> 48 The linear time branching time spectrum I Preliminary report, </title> <month> October 26, </month> <year> 1998 </year>
Reference-contexts: The coarsest one (i.e. the semantics making the most identifications) is trace semantics, as presented in Hoare [26]. In trace semantics only partial traces are employed. The finest one (making less identifications than any of the others) is bisimulation semantics, as presented in Milner <ref> [33] </ref>. Bisimulation semantics is the standard semantics for the system description language CCS (Milner [31]). The notion of bisimulation was introduced in Park [35]. Bisimulation equivalence is a refinement of observational equivalence, as introduced by Hennessy & Milner in [23].
Reference: [34] <author> E.-R. </author> <title> Olderog & C.A.R. Hoare (1986): Specification-oriented semantics for communicating processes. </title> <journal> Acta Informatica 23, </journal> <pages> pp. 9-66. </pages>
Reference-contexts: The semantics based on testing equivalences, as developed in De Nicola & Hennessy [14], coincides with failures semantics on the domain of finitely branching, concrete, sequential processes, as do the semantics of Kennaway [28] and Darondeau [12]. This has been established in De Nicola [13]. In Olderog & Hoare <ref> [34] </ref> readiness semantics is presented, which is slightly finer than failures 4 The linear time branching time spectrum I Preliminary report, October 26, 1998 trace semantics completed trace semantics failures semantics readiness semanticsfailure trace semantics ready trace semantics ready simulation semantics 2-nested simulation semantics bisimulation semantics simulation semantics possible-futures semantics semantics. <p> The second one follows since = n a; fb; cg n = 2 R (right ) R (left ). 2 Possible-futures and acceptance-refusal semantics Readiness semantics was proposed by Olderog & Hoare <ref> [34] </ref>. <p> would be interesting to give explicit representations of the equivalences, by representing processes as sets of observations instead of equivalence classes of process graphs, and defining operators like action prefixing and choice directly on these representations, as has been done for failures semantics in [10] and for readiness semantics in <ref> [34] </ref>.
Reference: [35] <author> D.M.R. </author> <title> Park (1981): Concurrency and automata on infinite sequences. </title> <editor> In P. Deussen, editor: </editor> <booktitle> 5 th GI Conference, </booktitle> <publisher> LNCS 104, Springer, </publisher> <pages> pp. 167-183. </pages>
Reference-contexts: In trace semantics only partial traces are employed. The finest one (making less identifications than any of the others) is bisimulation semantics, as presented in Milner [33]. Bisimulation semantics is the standard semantics for the system description language CCS (Milner [31]). The notion of bisimulation was introduced in Park <ref> [35] </ref>. Bisimulation equivalence is a refinement of observational equivalence, as introduced by Hennessy & Milner in [23]. On the domain of finitely branching, concrete, sequential processes, both equivalences coincide. Also the semantics of De Bakker & Zucker, presented in [6], coincides with bisimulation semantics on this domain. <p> The natural completion of the square, suggested by failures, readiness and ready trace semantics yields failure trace semantics. For finitely branching processes this is the same as refusal semantics, introduced in Phillips [36]. Simulation semantics, based on the classical notion of simulation (see e.g. Park <ref> [35] </ref>), is independent of the last five semantics. Ready simulation semantics was introduced in Bloom, Istrail & Meyer [9] under the name GSOS trace congruence. It is finer than ready trace as well as simulation semantics. <p> This yields the linear time branching time spectrum. Counterexamples are provided, showing that on the graph domain this ordering cannot be further expanded. However, for deterministic processes the spectrum collapses, as was first observed by Park <ref> [35] </ref>. <p> Let PF 1 (p) denote the set of infinitary possible futures of p. Two processes p and q are infinitary possible-futures equivalent, notation p = 1 8 Simulation semantics The following concept of simulation, occurs frequently in the literature (see e.g. Park <ref> [35] </ref>). <p> Then p = 2S q , p = 2S q. Proof: An easy modifications of the proof of Proposition 8.4, also using the result of Proposition 8.4. 2 12 Bisimulation semantics The concept of bisimulation equivalence stems from Milner [31]. It's formulation below is due to Park <ref> [35] </ref>. <p> Proof: This is Theorem 2.2 in Hennessy & Milner [23, 24]. 2 Proposition 12.6 Let p; q 2 IP be image finite. Then p $ q , p q. Proof: This follows immediately from Theorem 2.1 in Hennessy & Milner [23, 24]. 2 Inspired by this insight, Park <ref> [35] </ref> proposed the concise formulation of bisimulation equivalence employed in Definition 12. Below is a modal characterization of . <p> Then p oeae ! q and p oeae ! r, so q = r. 2 Theorem 4 (Park <ref> [35] </ref>) On a domain of deterministic processes all semantics in the infinitary linear time branching time spectrum coincide. Proof: Because of Theorem 3 it suffices to show that on a domain IP of deterministic processes one has B IP T .
Reference: [36] <author> I.C.C. </author> <title> Phillips (1987): Refusal testing. </title> <booktitle> Theoretical Computer Science 50, </booktitle> <pages> pp. 241-284. </pages>
Reference-contexts: The natural completion of the square, suggested by failures, readiness and ready trace semantics yields failure trace semantics. For finitely branching processes this is the same as refusal semantics, introduced in Phillips <ref> [36] </ref>. Simulation semantics, based on the classical notion of simulation (see e.g. Park [35]), is independent of the last five semantics. Ready simulation semantics was introduced in Bloom, Istrail & Meyer [9] under the name GSOS trace congruence. It is finer than ready trace as well as simulation semantics. <p> The semantics in which processes are identified iff their failure trace sets coincide, is called failure trace semantics (F T ). For image finite processes failure trace semantics is exactly the equivalence that originates from Phillips notion of refusal testing <ref> [36] </ref>. (Image infinite processes are not considered in [36].) There it is called refusal equivalence. <p> The semantics in which processes are identified iff their failure trace sets coincide, is called failure trace semantics (F T ). For image finite processes failure trace semantics is exactly the equivalence that originates from Phillips notion of refusal testing <ref> [36] </ref>. (Image infinite processes are not considered in [36].) There it is called refusal equivalence.
Reference: [37] <author> A. </author> <title> Pnueli (1985): Linear and branching structures in the semantics and logics of reactive systems. </title> <editor> In W. Brauer, editor: </editor> <booktitle> Proceedings 12 th ICALP, </booktitle> <address> Nafplion, </address> <publisher> LNCS 194, Springer, </publisher> <pages> pp. 15-32. </pages>
Reference-contexts: Between readiness and bisimulation semantics one finds ready trace semantics, as introduced independently in Pnueli <ref> [37] </ref> (there called barbed semantics), Baeten, Bergstra & Klop [4] and Pomello [38] (under the name exhibited behaviour semantics). The natural completion of the square, suggested by failures, readiness and ready trace semantics yields failure trace semantics. <p> Two processes p and q are ready trace equivalent, notation p = RT q, if RT (p) = RT (q). In ready trace semantics (RT ) two processes are identified iff they are ready trace equivalent. In Baeten, Bergstra & Klop [4], Pnueli <ref> [37] </ref> and Pomello [38] ready trace semantics was defined slightly differently. <p> Two processes p and q are ready trace equivalent in the sense of <ref> [4, 37, 38] </ref> if RT N (p) = RT N (q). Proposition 6.1 Let p; q 2 IP. Then RT N (p) = RT N (q) , RT (p) = RT (q).
Reference: [38] <author> L. </author> <month> Pomello </month> <year> (1986): </year> <title> Some equivalence notions for concurrent systems An overview. </title> <editor> In G. Rozenberg, editor: </editor> <booktitle> Advances in Petri Nets 1985, </booktitle> <publisher> LNCS 222, Springer, </publisher> <pages> pp. 381-400. </pages>
Reference-contexts: Between readiness and bisimulation semantics one finds ready trace semantics, as introduced independently in Pnueli [37] (there called barbed semantics), Baeten, Bergstra & Klop [4] and Pomello <ref> [38] </ref> (under the name exhibited behaviour semantics). The natural completion of the square, suggested by failures, readiness and ready trace semantics yields failure trace semantics. For finitely branching processes this is the same as refusal semantics, introduced in Phillips [36]. <p> Two processes p and q are ready trace equivalent, notation p = RT q, if RT (p) = RT (q). In ready trace semantics (RT ) two processes are identified iff they are ready trace equivalent. In Baeten, Bergstra & Klop [4], Pnueli [37] and Pomello <ref> [38] </ref> ready trace semantics was defined slightly differently. <p> Two processes p and q are ready trace equivalent in the sense of <ref> [4, 37, 38] </ref> if RT N (p) = RT N (q). Proposition 6.1 Let p; q 2 IP. Then RT N (p) = RT N (q) , RT (p) = RT (q). <p> In both cases there turn out to be many interesting variations. The generalization to a setting with invisible actions will be tackled in [17]. Some work towards generalizing the spectrum to a setting with parallelism can be found for instance in <ref> [38] </ref> and [16]. A generalization to preorders, instead of equivalences, can be obtained by replacing conditions like O (p) = O (q) by O (p) O (q). Since preorders are often useful for verification purposes, it seems to be worthwhile to classify them as well.
Reference: [39] <author> A.W. </author> <title> Roscoe (1993): Unbounded non-determinism in CSP. </title> <journal> Journal of Logic and Computation 3(2), </journal> <pages> pp. 131-172. </pages>
Reference-contexts: This can be regarded to be the semantics employed in Brookes & Roscoe [11] and Hoare [27]. Infinitary failures semantics was first discussed in Bergstra, Klop & Olderog [7]; it was proposed as a semantics for CSP in Roscoe <ref> [39] </ref>. The difference between the testing scenarios for F and F 1 is that only the latter allows observations of infinite duration. Obviously, F F F 1 .
Reference: [40] <author> W.C. </author> <title> Rounds & S.D. Brookes (1981): Possible futures, acceptances, refusals and communicating processes. </title> <booktitle> In 22 th Annual Symposium on Foundations of Computer Science, </booktitle> <address> Nashville, Tennessee, </address> <publisher> IEEE, </publisher> <address> New York, </address> <pages> pp. 140-149. </pages>
Reference-contexts: This characterization resembles the one used in this paper. Finally 2-nested simulation semantics, introduced in Groote & Vaandrager [21], is located between ready simulation and bisimulation semantics, and possible-futures semantics, as Labelled transition systems and process graphs 5 proposed in Rounds & Brookes <ref> [40] </ref>, can be positioned between 2-nested simulation and readiness semantics. <p> The second one follows since = n a; fb; cg n = 2 R (right ) R (left ). 2 Possible-futures and acceptance-refusal semantics Readiness semantics was proposed by Olderog & Hoare [34]. Two preliminary versions stem from Rounds & Brookes <ref> [40] </ref>: in possible-futures semantics (PF ) the menu consists of the entire trace set of the remaining behaviour of an idle process, instead of only the set of its initial actions; in acceptance-refusal semantics a menu may be any finite subset of initial actions, while also the finite refusal sets of

References-found: 40

