URL: ftp://ftp.cs.colorado.edu/users/alw/papers/iwssd9.ps.Z
Refering-URL: http://www.cs.colorado.edu/users/alw/RecentPubs.html
Root-URL: http://www.cs.colorado.edu
Title: Feature Engineering  
Author: C. Reid Turner, Alfonso Fuggetta, Luigi Lavazza, and Alexander L. Wolf 
Address: Boulder, CO 80309 USA 20133 Milano, Italy  
Affiliation: Department of Computer Science Dipartimento di Elettronica e Informazione University of Colorado Politecnico di Milano  
Date: April 16-18, 1998  
Note: From the Proc. of the 9th Inter. Workshop on Software Specification and Design, Ise-shima, Japan,  
Abstract: The notion of feature is widely used to denote the functional structure and visible properties of a software system. More specifically, features are meant to represent a user-centric organization of a software system's functionality. Yet, other than during requirements analysis, features are seldom treated explicitly by most existing tools and methods. This paper argues that a feature-orientation can provide benefits to software developers throughout the software life cycle. We envisage specific applications of the notion of feature that provide a powerful and unifying structure for software life cycle artifacts and activities. We discuss the problems and issues to be addressed, a brief summary of our current research work, and suggestions and directions for future research in a new area we call "feature engineering". 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.V. Aho and N. Griffeth. </author> <title> Feature Interaction in the Global Information Infrastructure. </title> <booktitle> In Proceedings of the Third ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <pages> pages 2-5. </pages> <publisher> ACM SIG-SOFT, </publisher> <month> October </month> <year> 1995. </year>
Reference-contexts: For instance, much of the literature on the feature interaction problem is concerned only with requirements specification techniques <ref> [1, 2, 10] </ref>. Indeed, in practice, requirements documents are frequently ignored in downstream development phases [4]. We believe that by making features "first class" within and throughout software development, greater use can be made of the problem-domain structuring put in place during requirements analysis.
Reference: [2] <author> E.J. Cameron and H. Velthuijsen. </author> <title> Feature Interactions in Telecommunications Systems. </title> <journal> IEEE Communications Magazine, </journal> <volume> 31 </volume> <pages> 18-23, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: For instance, much of the literature on the feature interaction problem is concerned only with requirements specification techniques <ref> [1, 2, 10] </ref>. Indeed, in practice, requirements documents are frequently ignored in downstream development phases [4]. We believe that by making features "first class" within and throughout software development, greater use can be made of the problem-domain structuring put in place during requirements analysis.
Reference: [3] <author> M.A. Cusumano and R.W. Selby. </author> <title> Microsoft Secrets. </title> <publisher> The Free Press, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: Users are often concerned with a system's gross functionality, while developers are grounded in its implementation artifacts. Users describe their needs in term of the "features" that the software product is expected to exhibit. Developers must translate such requirements into appropriate design choices and then into software artifacts <ref> [3] </ref>. The requirements engineering community has recognized the utility of structuring the problem domain, using terms such as "high-level" requirements [6] and "requirements clusters" [5, 8].
Reference: [4] <author> P. Hsia, A.M. Davis, </author> <title> and D.C. Kung. Status Report: Requirements Engineering. </title> <journal> IEEE Software, </journal> <volume> 10(6) </volume> <pages> 75-79, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: For instance, much of the literature on the feature interaction problem is concerned only with requirements specification techniques [1, 2, 10]. Indeed, in practice, requirements documents are frequently ignored in downstream development phases <ref> [4] </ref>. We believe that by making features "first class" within and throughout software development, greater use can be made of the problem-domain structuring put in place during requirements analysis.
Reference: [5] <author> P. Hsia and A. Gupta. </author> <title> Incremental Delivery Using Abstract Data Types and Requirements Clustering. </title> <booktitle> In Proceedings of the Second International Conference on Systems Integration, </booktitle> <pages> pages 137-150. </pages> <publisher> IEEE Computer Society, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: Developers must translate such requirements into appropriate design choices and then into software artifacts [3]. The requirements engineering community has recognized the utility of structuring the problem domain, using terms such as "high-level" requirements [6] and "requirements clusters" <ref> [5, 8] </ref>. However, while some requirements engineering efforts seek to structure a system's requirements by its gross functional entities (i.e., its features), there is little or no connection made in those terms with later stages of software development.
Reference: [6] <author> J. Karlsson. </author> <title> A Cost-Value Approach for Prioritizing Requirements. </title> <journal> IEEE Software, </journal> <volume> 14(5) </volume> <pages> 67-74, </pages> <month> Septem-ber </month> <year> 1997. </year>
Reference-contexts: Developers must translate such requirements into appropriate design choices and then into software artifacts [3]. The requirements engineering community has recognized the utility of structuring the problem domain, using terms such as "high-level" requirements <ref> [6] </ref> and "requirements clusters" [5, 8]. However, while some requirements engineering efforts seek to structure a system's requirements by its gross functional entities (i.e., its features), there is little or no connection made in those terms with later stages of software development.
Reference: [7] <institution> Standards Coordinating Committee of the IEEE Computer Society. IEEE Standard Glossary of Software Engineering Terminology. IEEE Std 610.12-1990, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: Standardized definitions of 0-8186-8439-9/98 $10.00 c fl 1998 IEEE 162 features (e.g., <ref> [7] </ref>) remain vague, and people often refer to features and feature implementations interchangeably. For purposes of this paper, we offer the following working definition for the term feature: A feature is a clustering of individual require ments that describe a cohesive, identifiable unit of functionality.
Reference: [8] <author> J.D. Palmer and Y. Liang. </author> <title> Indexing and Clustering of Software Requirements Specifications. </title> <booktitle> Information and Decision Technologies, </booktitle> <volume> 18(4) </volume> <pages> 283-299, </pages> <year> 1992. </year>
Reference-contexts: Developers must translate such requirements into appropriate design choices and then into software artifacts [3]. The requirements engineering community has recognized the utility of structuring the problem domain, using terms such as "high-level" requirements [6] and "requirements clusters" <ref> [5, 8] </ref>. However, while some requirements engineering efforts seek to structure a system's requirements by its gross functional entities (i.e., its features), there is little or no connection made in those terms with later stages of software development.
Reference: [9] <author> C.R. Turner, A. Fuggetta, and A.L. Wolf. </author> <title> Toward Feature Engineering of Software Systems. </title> <type> Technical Report CU-CS-830-97, </type> <institution> Department of Computer Science, University of Colorado, Boulder, Colorado, </institution> <month> February </month> <year> 1997. </year>
Reference-contexts: This paper argues for making features an explicit part of the entire software development effort, from requirements engineering through system maintenance. We use the term "feature engineering" <ref> [9] </ref> to represent the various strategies for exploiting features as first class. In the next section, we provide a definition for the term feature that makes clear the distinction between features and feature implementations.
Reference: [10] <author> P. Zave. </author> <title> Feature Interactions and Formal Specifications in Telecommunications. </title> <journal> Computer, </journal> <volume> 26(8) </volume> <pages> 20-29, </pages> <month> August </month> <year> 1993. </year> <month> 164 </month>
Reference-contexts: For instance, much of the literature on the feature interaction problem is concerned only with requirements specification techniques <ref> [1, 2, 10] </ref>. Indeed, in practice, requirements documents are frequently ignored in downstream development phases [4]. We believe that by making features "first class" within and throughout software development, greater use can be made of the problem-domain structuring put in place during requirements analysis.
References-found: 10

