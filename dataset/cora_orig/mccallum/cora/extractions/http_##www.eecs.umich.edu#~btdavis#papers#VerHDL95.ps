URL: http://www.eecs.umich.edu/~btdavis/papers/VerHDL95.ps
Refering-URL: http://www.eecs.umich.edu/~btdavis/papers/
Root-URL: http://www.eecs.umich.edu
Title: A Verilog Preprocessor for Representing Datapath Components U n i v e r s i
Author: Brian Davis Trevor Mudge r b o r 
Date: March 27-29, 1995  
Affiliation: EECS Dept.  
Abstract: This paper describes research leading to the generation of a preprocessor for the Verilog hardware description language. The function of this preprocessor is to support repeated feature instances in the datapath of a Verilog description for a digital system. Repeated features most commonly occur in the description of datapaths, where iterative structures like adders, multipliers and muxes are the basic building blocks. A deficiency of Verilog, its lack of support for repeated feature instances, is identified. Citations from Verilog users and industry organizations in support of inclusion of a repeated feature syntax are given. Several syntaxes for describing repeated features are presented. From these proposals, a single syntax for support of repeated feature instances is selected. A preprocessor is described that will parse the extended Verilog and translate it to supported Verilog. The challenges in the generation of the preprocessor are given, along with the solutions used to overcome them. The paper concludes with a status report on the preprocessor and thoughts for future development. 
Abstract-found: 1
Intro-found: 1
Reference: <author> [1]. Navabi, Zainalabedin, </author> <title> "A High-Level Language for Design and Modeling of Hardware", </title> <journal> Journal of Systems Soft ware, </journal> <volume> Vol 18, </volume> <year> 1992, </year> <note> p. 5-18. [2]. </note> <author> Goel, Prahu, </author> <title> "Maturing of the HDL Methodology", </title> <journal> Electronic Engineering, </journal> <volume> Vol 63, Num 777, </volume> <month> Sept </month> <year> 1991, </year> <note> p. S15. </note>
Reference-contexts: An HDL allows the designer to specify the behavior of a digital system with an unambiguous textual syntax, which provides an entry point into the design process. This specification can also serve as documentation for the digital system <ref> [1] </ref>. In fact, it was for documentation that HDLs were first employed. Today, there are two HDLs in common use, Verilog, and the VHSIC Hardware Description Language, VHDL. Verilog is a C-based hardware description language and was originally developed by Gateway Design Systems [2]. <p> i3, i4, s_out, c_out); input [56:0] i1, i2; input [55:0] i3, i4; output [56:0] s_out, c_out; wire [55:0] cr; // non-propagating Carry chain FTC c0 (i1 [0], i2 [0], i3 [0], i4 [0], TOP.Gnd, s_out [0], c_out [0], cr [0]), c2 (i1 [2], i2 [2], i3 [2], i4 [2], cr <ref> [1] </ref>, s_out [2], c_out [2], cr [2]), : : c53 (i1 [53], i2 [53], i3 [53], i4 [53], cr [52], s_out [53], c_out [53], cr [53]), c55 (i1 [55], i2 [55], i3 [55], i4 [55], cr [54], s_out [55], c_out [55], cr [55]); endmodule The desire for a syntax that will <p> According to the frequently asked questions (FAQ) posting on the comp.lang.verilog newsgroup, there are two Verilog parsers in One-Bit One-Bit One-Bit One-Bit control b [31:0] b [31] a [31] control b [30] a [30] control b <ref> [1] </ref> a [1] control b [0] a [0] control out [31] out [30] out [1] out [0] ........... the public domain, both of which utilize LEX and YACC for their parsing capabilities [19]. The first of these is the Berkeley Verilog parser written by S.T. <p> According to the frequently asked questions (FAQ) posting on the comp.lang.verilog newsgroup, there are two Verilog parsers in One-Bit One-Bit One-Bit One-Bit control b [31:0] b [31] a [31] control b [30] a [30] control b <ref> [1] </ref> a [1] control b [0] a [0] control out [31] out [30] out [1] out [0] ........... the public domain, both of which utilize LEX and YACC for their parsing capabilities [19]. The first of these is the Berkeley Verilog parser written by S.T. <p> According to the frequently asked questions (FAQ) posting on the comp.lang.verilog newsgroup, there are two Verilog parsers in One-Bit One-Bit One-Bit One-Bit control b [31:0] b [31] a [31] control b [30] a [30] control b <ref> [1] </ref> a [1] control b [0] a [0] control out [31] out [30] out [1] out [0] ........... the public domain, both of which utilize LEX and YACC for their parsing capabilities [19]. The first of these is the Berkeley Verilog parser written by S.T. Cheng at Berkeley (stcheng@ic.berkeley.edu) for automatic generation of BLIF-MV simulation code from Verilog code.
Reference: [3] <institution> Personal communication (email) with ovi@netcom.com, dated Tue, </institution> <month> 6 Sep </month> <year> 1994 </year> <month> 11:08:48, </month> <title> message id : &lt;199409061808.LAA21840@netcom15.netcom.com&gt;. </title>
Reference-contexts: The specification for the Verilog HDL was released into the public domain in November of 1991. To facilitate this release, Cadence formed Open Verilog International (OVI) in April of 1991. OVI was created as a private corporation responsible for maintaining the Verilog language specification <ref> [3] </ref>. Recently OVI transferred this responsibility to the IEEE. Currently IEEE working group 1364 is developing the latest version of the Verilog HDL language specification. .Need for a Repeated Feature Extension The following example illustrates the need for a repeated feature in Verilog.
Reference: [4] <author> Goto, G., et al., </author> <title> "A 54 X 54-b Regularly Structured Tree Multiplier", </title> <journal> IEEE JSSC, </journal> <volume> Vol. 27, No. 9, </volume> <pages> pp. 1229-1236, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Currently IEEE working group 1364 is developing the latest version of the Verilog HDL language specification. .Need for a Repeated Feature Extension The following example illustrates the need for a repeated feature in Verilog. Figure 1 shows part of a multiplier tree <ref> [4] </ref>. The first and second levels of partial products in the multiplier have already been generated, and the required functionality is to compress the results from the second level to produce a third level of signals. The third level is in turn fed into another array of compressors. <p> The third level is in turn fed into another array of compressors. After a number of compressors, determined by the number of bits in the operands, the product is formed with a carry-propagate binary adder <ref> [4] </ref>. The structure of the multiplier array is shown in Figure 1. The source code to describe it using Cadence Verilog-XL compatible syntax, is given in Example 1.
Reference: [5] <author> Santoro, </author> <title> "Design and Clocking of VLSI Multipliers", </title> <address> Palo Alto CA: </address> <institution> Stanford University Technical Report CSL-TR-89-397, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: The four-two compressor has a characteristic that makes it extremely useful in the generation of multiplier circuits such as the one shown in Figure 1: one of the carry bits is independent of one of the input bits, allowing the carry chain delay to be reduced <ref> [5] </ref>. The full adder module is defined such that the first three ports are one bit wide inputs, and the last two ports are one bit wide outputs. This module has the functionality of the classic full adder.
Reference: [6] <institution> Article #625 from comp.lang.verilog, </institution> <note> written by jws@chronologic.com. </note>
Reference-contexts: Verilog users require a repeated feature syntax, as can be seen from articles in the comp.lang.verilog newsgroup <ref> [6, 7, 8, 9, 10, 11, 12] </ref>. As mentioned earlier, the IEEE working group 1364 is currently in progress on its first version of a Verilog language specification. <p> From discussions with members of this working group, it is apparent that the need for a repeated feature extension is a recognized issue of concern among in the working group <ref> [6, 10, 13] </ref>. Before the IEEE working group 1364 was formed, Open Verilog International was responsible for the Verilog language specification.
Reference: [7] <institution> Article #627 from comp.lang.verilog, </institution> <note> written by steveg@cadence.com. </note>
Reference-contexts: Verilog users require a repeated feature syntax, as can be seen from articles in the comp.lang.verilog newsgroup <ref> [6, 7, 8, 9, 10, 11, 12] </ref>. As mentioned earlier, the IEEE working group 1364 is currently in progress on its first version of a Verilog language specification.
Reference: [8] <institution> Article #630 from comp.lang.verilog, </institution> <note> written by george@ole.cdac.com. </note>
Reference-contexts: Verilog users require a repeated feature syntax, as can be seen from articles in the comp.lang.verilog newsgroup <ref> [6, 7, 8, 9, 10, 11, 12] </ref>. As mentioned earlier, the IEEE working group 1364 is currently in progress on its first version of a Verilog language specification.
Reference: [9] <institution> Article #652 from comp.lang.verilog, </institution> <note> written by davidr@cadence.com. </note>
Reference-contexts: Verilog users require a repeated feature syntax, as can be seen from articles in the comp.lang.verilog newsgroup <ref> [6, 7, 8, 9, 10, 11, 12] </ref>. As mentioned earlier, the IEEE working group 1364 is currently in progress on its first version of a Verilog language specification. <p> Specifically, adding generate functionality to Verilog would require the addition of such things as scoped declarations and multidimensional arrays to the Verilog language <ref> [9] </ref>. The next syntax examined for support of repeated features was the interpreted for-loop structure. This is an intriguing concept as it would be consistent with both the C programming language on which Verilog is based, and behavioral Verilog.
Reference: [10] <institution> Article #674 from comp.lang.verilog, </institution> <note> written by jws@chronologic.com. </note>
Reference-contexts: Verilog users require a repeated feature syntax, as can be seen from articles in the comp.lang.verilog newsgroup <ref> [6, 7, 8, 9, 10, 11, 12] </ref>. As mentioned earlier, the IEEE working group 1364 is currently in progress on its first version of a Verilog language specification. <p> From discussions with members of this working group, it is apparent that the need for a repeated feature extension is a recognized issue of concern among in the working group <ref> [6, 10, 13] </ref>. Before the IEEE working group 1364 was formed, Open Verilog International was responsible for the Verilog language specification. <p> Third, communications with members of IEEE working group 1364, made it clear that if any repeated feature syntax is supported in the first version of an IEEE language specification it would be the OVI LRM 2.0a syntax <ref> [10, 13, 18] </ref>. If the array syntax were to be present in the LRM released by IEEE working group 1364, this would result in a situation where all Verilog code written for the Verilog preprocessor would also be forward-compatible with future Verilog compilers and/or simulators.
Reference: [11] <institution> Article #675 from comp.lang.verilog, </institution> <note> written by robertb@cadence.com. </note>
Reference-contexts: Verilog users require a repeated feature syntax, as can be seen from articles in the comp.lang.verilog newsgroup <ref> [6, 7, 8, 9, 10, 11, 12] </ref>. As mentioned earlier, the IEEE working group 1364 is currently in progress on its first version of a Verilog language specification.
Reference: [12] <institution> Article #693 from comp.lang.verilog, </institution> <note> written by leung@storage.tandem.com. </note>
Reference-contexts: Verilog users require a repeated feature syntax, as can be seen from articles in the comp.lang.verilog newsgroup <ref> [6, 7, 8, 9, 10, 11, 12] </ref>. As mentioned earlier, the IEEE working group 1364 is currently in progress on its first version of a Verilog language specification.
Reference: [13] <institution> Personal communication (email) with jws@chronologic.com, </institution> <note> dated Sat, 27 Aug 94 16:19:48 PDT, message id : &lt;9408272319.AA00589@chrnlgc.chronologic.com&gt;. </note>
Reference-contexts: From discussions with members of this working group, it is apparent that the need for a repeated feature extension is a recognized issue of concern among in the working group <ref> [6, 10, 13] </ref>. Before the IEEE working group 1364 was formed, Open Verilog International was responsible for the Verilog language specification. <p> Third, communications with members of IEEE working group 1364, made it clear that if any repeated feature syntax is supported in the first version of an IEEE language specification it would be the OVI LRM 2.0a syntax <ref> [10, 13, 18] </ref>. If the array syntax were to be present in the LRM released by IEEE working group 1364, this would result in a situation where all Verilog code written for the Verilog preprocessor would also be forward-compatible with future Verilog compilers and/or simulators.
Reference: [14] <institution> Verilog Hardware Description Language Reference Manual (LRM) Version 2.0, Los Gatos, CA: Open Verilog International, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: The OVI organization recognized the need for a repeated feature extension to the extent that they included such an extension in their last release of the Verilog language specification, the OVI Language Reference Manual (LRM) version 2.0a <ref> [14] </ref>. Unfortunately this document was released only shortly before IEEE working group 1364 was formed, and no current Verilog tools conform to OVI LRM 2.0a. Finally, in an issue of Electrical Engineering Times preceding the 1994 ........... <p> Proposed Syntaxes The array of feature instances syntax, specified in OVI LRM version 2.0a <ref> [14] </ref>, is a direct extension to the Verilog language. Within this syntax, an instance of repeated features is viewed as no more than a single dimensional array of these features. <p> The OVI syntax allows for two types of nets to be passed into any array of feature instances. The rules for connections to an array of feature instances as given in the OVI LRM 2.0a are <ref> [14] </ref>: The bitlength of each port in the instance is compared with the module or primitive port's definition If the bitlengths are the same, the port expression is connected to each instance. <p> The AOI syntax does allow for indexed nets where the net slice being passed into each feature contains multiple bits, but our examples do not illustrate this capability. Indexed and static are the only two types of nets which the OVI LRM 2.0a array of feature instances syntax supports <ref> [14] </ref>. Before construction of any preprocessor was begun, other possible syntaxes for the support of repeated features were examined. A number of such syntaxes have been proposed. The first of these is the specification of a repeated feature syntax similar to the generate syntax used within VHDL [16]. <p> The specification for using explicitly named port connections is given in section 12.4.4 of the OVI LRM 2.0a, and is supported in Verilog-XL compatible Verilog <ref> [14] </ref>. The routines written to analyze the port connections for an array of instances operate on the ordered relationship between the port definitions and the port connections. Allowing for unordered access, i.e., using explicitly named port connections, considerably complicates the process of analyzing the port connections.
Reference: [15] <institution> Electronic Engineering Times, </institution> <note> "Verilog Users Demonstrate Strong loyalty", Issue 788, pp. 1, </note> <month> 41, </month> <pages> 45-47, </pages> <month> Mar. 14, </month> <year> 1994. </year> <title> [16]. IEEE Standard VHDL Language Reference Manual, </title> <booktitle> IEEE Std 1076-1987, The Institute of Electrical and Electronic Engineers, </booktitle> <publisher> Inc., </publisher> <address> Piscataway, NJ, </address> <year> 1988. </year>
Reference-contexts: [ ] 2 0 i [ ] 4 0 C o t 0 cr [0]cr [1]cr [54]cr [55] International Verilog HDL conference, an article questioned whether the OVI LRM 2.0a array of feature instances (AOI) construct would be maintained into the yet to be released IEEE working group 1364 specification <ref> [15] </ref>. Proposed Syntaxes The array of feature instances syntax, specified in OVI LRM version 2.0a [14], is a direct extension to the Verilog language. Within this syntax, an instance of repeated features is viewed as no more than a single dimensional array of these features.
Reference: [17] <institution> Article #593 from comp.lang.verilog, </institution> <note> written by jwill@netcom.com. </note>
Reference-contexts: This involves using a language such as C to generate the Verilog source code before it is parsed via a Verilog parser <ref> [17] </ref>. This avenue was not pursued due to its temporary fix appearance and the requirement of an additional step before parsing. Any of these proposed syntaxes could provide the functionality desired by the hardware designers requesting support for iterative constructs. We chose to support the array syntax for three reasons.
Reference: [18] <author> Personal communication (email) with roberts@Cadence.com (David Roberts), dated Wed, </author> <month> 2 Mar 94 16:36:08, </month> <title> message id : &lt;9403022136.AA11475@tweety&gt;. [19] comp.lang.verilog newsgroup frequently asked questions (FAQ), </title> <note> posted regularly to newsgroup, available via ft-p@ftp.cray.com, directory : /pub/comp.lang.verilog/. </note>
Reference-contexts: Third, communications with members of IEEE working group 1364, made it clear that if any repeated feature syntax is supported in the first version of an IEEE language specification it would be the OVI LRM 2.0a syntax <ref> [10, 13, 18] </ref>. If the array syntax were to be present in the LRM released by IEEE working group 1364, this would result in a situation where all Verilog code written for the Verilog preprocessor would also be forward-compatible with future Verilog compilers and/or simulators.
References-found: 16

