URL: http://www.cs.utexas.edu/users/cnchu/pubs/c07.ps
Refering-URL: http://www.cs.utexas.edu/users/cnchu/pubs/pubs.html
Root-URL: 
Email: cnchu@cs.utexas.edu and wong@cs.utexas.edu  
Title: GREEDY WIRE-SIZING IS LINEAR TIME  
Author: Chris C. N. Chu and D. F. Wong 
Address: Austin, Austin, TX 78712.  
Affiliation: Department of Computer Sciences, University of Texas at  
Abstract: In interconnect optimization by wire-sizing, minimizing weighted sink delay has been shown to be the key problem. Wire-sizing with many important objectives such as minimizing total area subject to delay bounds or minimizing maximum delay can all be reduced to solving a sequence of weighted sink delay problems by Lagrangian relaxation [1, 3]. GWSA, first introduced in [10] for discrete wire-sizing and later extended in [2] to continuous wire-sizing, is a greedy wire-sizing algorithm for the weighted sink delay problem. Although GWSA has been experimentally shown to be very efficient, no mathematical analysis on its convergence rate has ever been reported. In this paper, we consider GWSA for continuous wire sizing. We prove that GWSA converges linearly to the optimal solution, which implies that the run time of GWSA is linear with respect to the number of wire segments for any fixed precision of the solution. Moreover, we also prove that this is true for any starting solution. This is a surprising result because previously it was believed that in order to guarantee convergence, GWSA had to start from a solution in which every wire segment is set to the minimum (or maximum) possible width. Our result implies that GWSA can use a good starting solution to achieve faster convergence. We demonstrate this point by showing that the minimization of maximum delay using Lagrangian relaxation can be speed up by 57.7%. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Chung-Ping Chen, Yao-Wen Chang, and D. F. Wong. </author> <title> Fast performance-driven optimization for buffered clock trees based on Lagrangian relaxation. </title> <booktitle> In Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 405-408, </pages> <year> 1996. </year>
Reference-contexts: Solving this problem is a key to solve problems with many other important objectives such as minimizing total area subject to delay bounds or minimizing maximum delay. It is because <ref> [1, 3] </ref> have shown that those problems can all be reduced by Lagrangian relaxation to a sequence of weighted sink delay problems. So having efficient algorithms for the weighted sink delay problem is very important for interconnect optimization. <p> When a wire segment is examined, it is re-sized optimally while keeping the widths of all other segments fixed. This technique was first introduced in [10] and was later extended to many other wire, buffer, gate, driver and/or transistor sizing problems <ref> [1, 2, 4, 5, 6, 8, 9] </ref>. In [10], discrete wire-sizing (i.e. the segment widths must be chosen from a given set of discrete choices) was considered. The proposed algorithm was called GWSA (Greedy Wire-Sizing Algorithm).
Reference: [2] <author> Chung-Ping Chen and D. F. Wong. </author> <title> A fast algorithm for optimal wire-sizing under Elmore delay model. </title> <booktitle> In Proc. IEEE ISCAS, </booktitle> <volume> volume 4, </volume> <pages> pages 412-415, </pages> <year> 1996. </year>
Reference-contexts: When a wire segment is examined, it is re-sized optimally while keeping the widths of all other segments fixed. This technique was first introduced in [10] and was later extended to many other wire, buffer, gate, driver and/or transistor sizing problems <ref> [1, 2, 4, 5, 6, 8, 9] </ref>. In [10], discrete wire-sizing (i.e. the segment widths must be chosen from a given set of discrete choices) was considered. The proposed algorithm was called GWSA (Greedy Wire-Sizing Algorithm). <p> Then dynamic programming technique is used to find the optimal solution among all the possible solutions satisfying the lower and upper bounds. As the lower and upper bounds obtained by GWSA are close to each other in most cases, the dynamic programming step is usually very efficient. In <ref> [2] </ref>, GWSA was extended to continuous wire-sizing (i.e. the segment widths can be from a continuous range of real numbers). It was proved in [2] that for continuous wire-sizing, GWSA always converges to the optimal solution, provided that all segments are set to their minimum (or maximum) possible widths for the <p> In <ref> [2] </ref>, GWSA was extended to continuous wire-sizing (i.e. the segment widths can be from a continuous range of real numbers). It was proved in [2] that for continuous wire-sizing, GWSA always converges to the optimal solution, provided that all segments are set to their minimum (or maximum) possible widths for the starting solution. However, the convergence rate of GWSA is not known. In this paper, we analyze the convergence of GWSA for continuous wire-sizing. <p> We show that our approach can speed up the minimization of maximum delay using Lagrangian relaxation by 57.7%. The rest of this paper is organized as follows. In Section 2, we will present the weighted sink delay problem and the algorithm GWSA considered in <ref> [2] </ref>. In Section 3, we will analyze the convergence of GWSA. In Section 4, experimental results to show the linearity of the run time of GWSA and the speedup on optimizing other objectives using Lagrangian relaxation are presented. 2. <p> THE WEIGHTED SINK DELAY PROBLEM AND THE ALGORITHM GWSA In this section, we will first present the continuous wire-sizing problem with weighted sink delay objective and then the algorithm GWSA considered in <ref> [2] </ref>. <p> k ) br i 2 f i + C fs Then the weighted sink delay problem can be written as: Minimize D (x) = m X k D k (x) Subject to L i x i U i ; 1 i n: Now we present the algorithm GWSA proposed in <ref> [2] </ref> for solving the weighted sink delay problem. The algorithm GWSA is a greedy algorithm based on iteratively re-sizing the wire segments. In each iteration, the wire segments are examined one by one. <p> i is given by changing the width of W i to x i = min &lt; U i ; max &lt; L i ; i br i 2 + C fs R i (x) + R D = 9 ; Proof outline: By extending the proof of Lemma 1 in <ref> [2] </ref> (which did not consider wire fringing capacitance), we can show that D (x) = bc i x i (R i (x) + R D ) + x i C i (x) + 2 fs + terms independent of x i Note that R i (x) and C i (x) are <p> Hence by Lemma 2 of <ref> [2] </ref>, the result follows. 2 Let children (W i ) be the set of all children wire segments of W i and let p i be the index of the parent wire segment of W i . Then the algorithm GWSA is given below. <p> Then the algorithm GWSA is given below. Note that since C i (x) and R i (x) are computed incrementally in step S3 and S4, each iteration of GWSA takes only O (n) time. For the original GWSA in <ref> [2] </ref>, in S1, x i is set to L i for all i. Then dominance property can be applied to show that the algorithm converges. However, the convergence rate is not known. <p> Proof: For any constant 0 &lt; ff &lt; 1, 1 + ff t ! 1 as t ! 1. So by Lemma 5, it is obvious that the algorithm GWSA always converges for any starting wire-sizing solution. Theorem 1 of <ref> [2] </ref> proved that if GWSA converges, then the wire sizing solution is optimal. So the theorem follows. 2 Let x fl = (x fl 2 ; : : : ; x fl n ) be the optimal wire-sizing solution.
Reference: [3] <author> Chung-Ping Chen, Hai Zhou, and D. F. Wong. </author> <title> Optimal non-uniform wire-sizing under the Elmore delay model. </title> <booktitle> In Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 38-43, </pages> <year> 1996. </year>
Reference-contexts: Solving this problem is a key to solve problems with many other important objectives such as minimizing total area subject to delay bounds or minimizing maximum delay. It is because <ref> [1, 3] </ref> have shown that those problems can all be reduced by Lagrangian relaxation to a sequence of weighted sink delay problems. So having efficient algorithms for the weighted sink delay problem is very important for interconnect optimization.
Reference: [4] <author> Chris C. N. Chu, Chung-Ping Chen, and D. F. Wong. </author> <title> Fast and exact simultaneous gate and wire sizing by Lagrangian relaxation. </title> <type> Technical Report TR98-06, </type> <institution> Department of Computer Science, University of Texas at Austin, </institution> <month> February </month> <year> 1998. </year>
Reference-contexts: When a wire segment is examined, it is re-sized optimally while keeping the widths of all other segments fixed. This technique was first introduced in [10] and was later extended to many other wire, buffer, gate, driver and/or transistor sizing problems <ref> [1, 2, 4, 5, 6, 8, 9] </ref>. In [10], discrete wire-sizing (i.e. the segment widths must be chosen from a given set of discrete choices) was considered. The proposed algorithm was called GWSA (Greedy Wire-Sizing Algorithm).
Reference: [5] <author> Jason Cong and Lei He. </author> <title> An efficient approach to simultaneous transistor and interconnect sizing. </title> <booktitle> In Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 181-186, </pages> <year> 1996. </year>
Reference-contexts: When a wire segment is examined, it is re-sized optimally while keeping the widths of all other segments fixed. This technique was first introduced in [10] and was later extended to many other wire, buffer, gate, driver and/or transistor sizing problems <ref> [1, 2, 4, 5, 6, 8, 9] </ref>. In [10], discrete wire-sizing (i.e. the segment widths must be chosen from a given set of discrete choices) was considered. The proposed algorithm was called GWSA (Greedy Wire-Sizing Algorithm).
Reference: [6] <author> Jason Cong and Lei He. </author> <title> Optimal wiresizing for interconnects with multiple sources. </title> <journal> ACM Trans. Design Automation of Electronic Systems, </journal> <volume> 1(4), </volume> <month> October </month> <year> 1996. </year>
Reference-contexts: When a wire segment is examined, it is re-sized optimally while keeping the widths of all other segments fixed. This technique was first introduced in [10] and was later extended to many other wire, buffer, gate, driver and/or transistor sizing problems <ref> [1, 2, 4, 5, 6, 8, 9] </ref>. In [10], discrete wire-sizing (i.e. the segment widths must be chosen from a given set of discrete choices) was considered. The proposed algorithm was called GWSA (Greedy Wire-Sizing Algorithm).
Reference: [7] <author> Jason Cong, Lei He, Cheng-Kok Koh, and Patrick H. Madden. </author> <title> Performance optimization of VLSI interconnect layout. INTEGRATION, </title> <journal> the VLSI Journal, </journal> <volume> 21 </volume> <pages> 1-94, </pages> <year> 1996. </year>
Reference-contexts: 1. INTRODUCTION With the evolution of VLSI fabrication technology, interconnect delay has become the dominant factor in deep submi-cron design. In many systems designed today, as much as 50% to 70% of clock cycle are consumed by interconnect delay <ref> [7] </ref>. As technology continues to scale down, we expect the significance of interconnect delay will further increase in the near future. Wire-sizing has been shown to be an effective technique for interconnect optimization. Many works have been done during the past few years. See [7] for a survey. <p> cycle are consumed by interconnect delay <ref> [7] </ref>. As technology continues to scale down, we expect the significance of interconnect delay will further increase in the near future. Wire-sizing has been shown to be an effective technique for interconnect optimization. Many works have been done during the past few years. See [7] for a survey. In particular, the problem of minimizing weighted sink delay has drawn a lot of attention. Basically, a routing tree with a source, a set of sinks and a set of wire segments is given.
Reference: [8] <author> Jason Cong and Cheng-Kok Koh. </author> <title> Simultaneous driver and wire sizing for performance and power optimization. </title> <booktitle> In Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 206-212, </pages> <year> 1994. </year>
Reference-contexts: When a wire segment is examined, it is re-sized optimally while keeping the widths of all other segments fixed. This technique was first introduced in [10] and was later extended to many other wire, buffer, gate, driver and/or transistor sizing problems <ref> [1, 2, 4, 5, 6, 8, 9] </ref>. In [10], discrete wire-sizing (i.e. the segment widths must be chosen from a given set of discrete choices) was considered. The proposed algorithm was called GWSA (Greedy Wire-Sizing Algorithm).
Reference: [9] <author> Jason Cong, Cheng-Kok Koh, and Kwok-Shing Leung. </author> <title> Simultaneous buffer and wire sizing for performance and power optimization. </title> <booktitle> In Proc. Intl. Symp. on Low Power Electronics and Design, </booktitle> <pages> pages 271-276, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: When a wire segment is examined, it is re-sized optimally while keeping the widths of all other segments fixed. This technique was first introduced in [10] and was later extended to many other wire, buffer, gate, driver and/or transistor sizing problems <ref> [1, 2, 4, 5, 6, 8, 9] </ref>. In [10], discrete wire-sizing (i.e. the segment widths must be chosen from a given set of discrete choices) was considered. The proposed algorithm was called GWSA (Greedy Wire-Sizing Algorithm).
Reference: [10] <author> Jason Cong and Kwok-Shing Leung. </author> <title> Optimal wiresiz-ing under the distributed Elmore delay model. </title> <booktitle> In Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 634-639, </pages> <year> 1993. </year>
Reference-contexts: In each iteration, the wire segments in the tree are examined one by one. When a wire segment is examined, it is re-sized optimally while keeping the widths of all other segments fixed. This technique was first introduced in <ref> [10] </ref> and was later extended to many other wire, buffer, gate, driver and/or transistor sizing problems [1, 2, 4, 5, 6, 8, 9]. In [10], discrete wire-sizing (i.e. the segment widths must be chosen from a given set of discrete choices) was considered. <p> When a wire segment is examined, it is re-sized optimally while keeping the widths of all other segments fixed. This technique was first introduced in <ref> [10] </ref> and was later extended to many other wire, buffer, gate, driver and/or transistor sizing problems [1, 2, 4, 5, 6, 8, 9]. In [10], discrete wire-sizing (i.e. the segment widths must be chosen from a given set of discrete choices) was considered. The proposed algorithm was called GWSA (Greedy Wire-Sizing Algorithm). GWSA does not give the optimal solution directly as it can converge to non-optimal solutions. <p> So GWSA runs in time linear to n for a fixed precision. For all previous algorithms using optimal local re-sizing, the convergence always depends on the fact that the solution of optimal local re-sizing satisfies a special dominance property <ref> [10] </ref>.
Reference: [11] <author> W. C. </author> <title> Elmore. The transient response of damped linear network with particular regard to wideband amplifiers. </title> <journal> J. Applied Physics, </journal> <volume> 19 </volume> <pages> 55-63, </pages> <year> 1948. </year>
Reference-contexts: So having efficient algorithms for the weighted sink delay problem is very important for interconnect optimization. For the problem of minimizing weighted sink delay under Elmore delay model <ref> [11] </ref>, a widely used technique is optimal local re-sizing. The basic idea is to iteratively and greedily re-size the wire segments. In each iteration, the wire segments in the tree are examined one by one. <p> Let C fs X f j + N k 2dec (W i ) k , i.e. C fs i is the total downstream wire fringing capacitance and sink capacitance of segment W i . Elmore delay model <ref> [11] </ref> is used for delay calculation.
Reference: [12] <author> R. S. Tsay. </author> <title> An exact zero-skew clock routing algorithm. </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 12(2) </volume> <pages> 242-249, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: We run the algorithm GWSA on an IBM PC with a 200 MHz Pentium Pro processor. We are using the clock trees r1-r5 in <ref> [12] </ref>. The number of segments in these trees range from 533 to 6201. In order to have more data points, we construct 10 trees from each tree by dividing each tree edge into k segments where k = 1; : : : ; 10.
References-found: 12

