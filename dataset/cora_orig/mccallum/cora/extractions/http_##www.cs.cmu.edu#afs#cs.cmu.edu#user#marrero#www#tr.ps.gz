URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/marrero/www/tr.ps.gz
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/marrero/www/pubs.html
Root-URL: 
Title: Model Checking for Security Protocols  
Author: Will Marrero Edmund Clarke Somesh Jha 
Note: The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the National Science Foundation or the U.S. Government.  
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: May 1997  
Abstract: As more resources are added to computer networks, and as more vendors look to the World Wide Web as a viable marketplace, the importance of being able to restrict access and to insure some kind of acceptable behavior even in the presence of malicious intruders becomes paramount. People have looked to cryptography to help solve many of these problems. However, cryptography itself is only a tool. The security of a system depends not only on the cryptosystem being used, but also on how it is used. Typically, researchers have proposed the use of security protocols to provide these security guarantees. These protocols consist of a sequence of messages, many with encrypted parts. In this paper, we develop a way of verifying these protocols using model checking. Model checking has proven to be a very useful technique for verifying hardware designs. By modelling circuits as finite-state machines, and examining all possible execution traces, model checking has found a number of errors in real world designs. Like hardware designs, security protocols are very subtle, and can also have bugs which are difficult to find. By examining all possible execution traces of a security protocol in the presence of a malicious intruder with well defined capabilities, we can determine if a protocol does indeed enforce its security guarantees. If not, we can provide a sample trace of an attack on the protocol. This research was sponsored in part by the Avionics Laboratory, Wright Research and Development Center, Aeronautical Systems Division (AFSC), U.S. Air Force, Wright-Patterson AFB, Ohio 45433-6543 under Contract F33615-90-C-1465, ARPA Order No. 7597, and in part by the National Science Foundation under grant no. CCR-8722633 . 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi and A. Gordon. </author> <title> A calculus for cryptographic protocols the spi calculus. </title> <booktitle> In Proceedings of the Fourth ACM Conference on Computer and Communications Security, </booktitle> <month> April </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: They argue that their technique could be automated but provide no tool for their system. Abadi and Gordon propose the spi calculus, an extension of the pi calculus with cryptographic primitives, as another model for describing and analyzing cryptographic protocols <ref> [1] </ref>. The spi calculus models communicating processes in a way that is very similar to CSP and CCS. The spi calculus provides constructs for output on a channel, input on a channel, restriction, composition, testing for equality, pairs and projections, encryption, decryption and for branching on equality to zero.
Reference: [2] <author> M. Abadi and M. Tuttle. </author> <title> A semantics for a logic of authentication. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 201-216, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: An attempt to give this logic a rigorous semantics was made by Abadi and Tuttle <ref> [2] </ref> and other attempts to improve or expand the logic can be found in [22]. The BAN logic remains popular because of its simplicity and high level of abstraction.
Reference: [3] <author> M. Bellare and P. Rogaway. </author> <title> Provably secure session key distribution-the three party case. </title> <booktitle> In Proceedings of the 27th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 57-66, </pages> <year> 1995. </year>
Reference-contexts: One recent approach taken by Bellare and Rogaway and by Shoup and Rubin, is to try to provide a rigorous mathematical proof of the correctness of a protocol <ref> [3, 21] </ref>. They use properties of pseudo-random functions and mathematical arguments to prove that an adversary does not have a statistical advantage when trying to discover a key in a session key distribution protocol.
Reference: [4] <author> D. Bolignano. </author> <title> An approach to the formal verification of cryptographic protocols. </title> <booktitle> In Proceedings of the 3rd ACM Conference on Computer and Communication Security, </booktitle> <year> 1996. </year> <month> 17 </month>
Reference-contexts: Instead they present a set of inference rules with which you can prove correspondence assertions about a model [24]. In addition, the description of their model, while intuitive, is not very precise or formal. Bolignano presents a model that is almost a middle point between these last two <ref> [4] </ref>. Like Meadows, Bolignano emphasizes the algebraic properties of the intruder when trying to derive words.
Reference: [5] <author> T. Bolognesi and E. Brinksma. </author> <title> Introduction to the iso specification language LOTOS. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 14(1) </volume> <pages> 25-59, </pages> <year> 1987. </year>
Reference-contexts: This means that it only models a single run of the protocol. In order to prove the general protocol correct he must prove a theorem that states that the general protocol is insecure only if this restricted version is insecure. 3 Leduc and others recently used the LOTOS language <ref> [5] </ref> and the Eucalyptus tool-box [9] to analyze the Equicrypt protocol [15]. What makes this an interesting case study is the fact that the Equicrypt protocol is a real system currently under design for use in controlling access to multimedia services broadcast on a public channel.
Reference: [6] <author> M. Burrows, M. Abadi, and R. Needham. </author> <title> A logic of authentication. </title> <type> Technical Report 39, </type> <institution> DEC Systems Research Center, </institution> <month> February </month> <year> 1989. </year>
Reference-contexts: One of the earliest successful attempts at formally reasoning about security protocols involved developing a new logic in which one could express and deduce security properties. The earliest such logic is commonly referred to as the BAN logic and is due to Burrows, Abadi, and Needham <ref> [6] </ref>.
Reference: [7] <author> D. Craigen and M. Saaltink. </author> <title> Using EVES to analyze authentication protocols. </title> <type> Technical Report TR-96-5508-05, </type> <institution> ORA Canada, </institution> <year> 1996. </year>
Reference-contexts: An orthogonal line of research revolves around trying to automate the process of verification when using these logics. Craigen and Saaltink attempt this by embedding the BAN logic in EVES <ref> [7] </ref>. The automation resulting from this experiment was not satisfactory.
Reference: [8] <author> D. Dolev and A. Yao. </author> <title> On the security of public key protocols. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 29(2) </volume> <pages> 198-208, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: This state space can then be traversed to check if some particular state can be reached or if some state trace can be generated. The first attempt at such a formalism is due to Dolev and Yao <ref> [8] </ref>. They develop an algorithm for determining whether or not a protocol is secure in their model. However, their model is extremely limited. They only consider secrecy issues, and they model only encryption, decryption, and adding, checking, or deleting a principal name.
Reference: [9] <author> H. Garavel. </author> <title> An overview of the Eucalyptus toolbox. </title> <booktitle> In COST247 workshop, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: In order to prove the general protocol correct he must prove a theorem that states that the general protocol is insecure only if this restricted version is insecure. 3 Leduc and others recently used the LOTOS language [5] and the Eucalyptus tool-box <ref> [9] </ref> to analyze the Equicrypt protocol [15]. What makes this an interesting case study is the fact that the Equicrypt protocol is a real system currently under design for use in controlling access to multimedia services broadcast on a public channel.
Reference: [10] <author> J. W. Gray and J. McLean. </author> <title> Using temporal logic to specify and verify cryptographic protocols (progress report). </title> <booktitle> In Proceedings of the 8th IEEE Computer Security Workshop, </booktitle> <year> 1995. </year>
Reference-contexts: They were able to find a couple of security flaws in this proposed system using these generic tools. Gray and McLean propose encoding the entire protocol in terms of temporal logic <ref> [10] </ref>. Much like symbolic model checking, they describe the model by giving formulas that express the possible relationships between variable values in the current state and variable values in the next state. This makes their framework more formal than the others, but much more cumbersome as well.
Reference: [11] <author> N. Heintze and J. Tygar. </author> <title> A model for secure protocols and their compositions. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(1) </volume> <pages> 16-30, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: So far, protocol models have been verified by comparing to a slightly altered model that is "obviously" correct, and is, therefore, at the same level of abstraction as the protocol model. A more concrete and complete model is presented by Heintze and Tygar <ref> [11] </ref>. They view protocols as a set of agents modeled as non-deterministic finite state machines. The actions of a principal who must follow the protocol depend on the local state of that principal and so are in some sense restricted.
Reference: [12] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: Because the invariant must be proven to hold for all protocol steps, this can become unwieldy very quickly. Other recent work in this area has involved trying to use generic verification tools to verify security protocols. In [16], Lowe uses the FDR model checker for CSP <ref> [12] </ref> to analyze the Needham-Schroeder Public-Key Authentication Protocol [19]. Lowe succeeded in finding a previously unpublished error in the protocol. The fact that he was able to use a generic model checker is promising as well. Unfortunately, the CSP model for the protocol is far from straightforward.
Reference: [13] <author> R. Kailar. </author> <title> Accountability in electronic commerce protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(5), </volume> <month> May </month> <year> 1996. </year>
Reference-contexts: The BAN logic remains popular because of its simplicity and high level of abstraction. Recent work in the use of modal logics for verifying security protocols includes the development of a logic that can express accountability <ref> [13] </ref>. Kailar convincingly argues that in applications such as electronic commerce, it is accountability and not belief that is important. Like their counterparts in the paper world, one would like people to be held accountable for their electronic transactions.
Reference: [14] <author> D. Kindred and J. M. Wing. </author> <title> Fast, automatic checking of security protocols. </title> <booktitle> In USENIX 2nd Workshop on Electronic Commerce, </booktitle> <year> 1996. </year>
Reference-contexts: Kindred and Wing went further by proposing a theory-checker generator <ref> [14] </ref>. They provide a formal and well defined framework with assurances about correctness and termination. In addition, their system generates theory checkers for a variety of logics including BAN, AUTLOG, and Kailar's accountability logic. The third technique can be placed in the general category of model checking.
Reference: [15] <author> S. Lacroix, J.-M. Boucqueau, J.-J. Quistater, and B. Macq. </author> <title> Providing equitable conditional access by use of trusted third parties. </title> <booktitle> In European Conference on Multimedia Applications, Services, and Techniques - ECMAST96, </booktitle> <pages> pages 763-782, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: In order to prove the general protocol correct he must prove a theorem that states that the general protocol is insecure only if this restricted version is insecure. 3 Leduc and others recently used the LOTOS language [5] and the Eucalyptus tool-box [9] to analyze the Equicrypt protocol <ref> [15] </ref>. What makes this an interesting case study is the fact that the Equicrypt protocol is a real system currently under design for use in controlling access to multimedia services broadcast on a public channel.
Reference: [16] <author> G. Lowe. </author> <title> Breaking and fixing the Needham-Schroeder public-key protocol using FDR. In Tools and Algorithms for the Construction and Analysis of Systems, </title> <booktitle> volume 1055 of Lecture Notes in Computer Science, </booktitle> <pages> pages 147-166. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Because the invariant must be proven to hold for all protocol steps, this can become unwieldy very quickly. Other recent work in this area has involved trying to use generic verification tools to verify security protocols. In <ref> [16] </ref>, Lowe uses the FDR model checker for CSP [12] to analyze the Needham-Schroeder Public-Key Authentication Protocol [19]. Lowe succeeded in finding a previously unpublished error in the protocol. The fact that he was able to use a generic model checker is promising as well. <p> Thus the total time to check if w 2 B s is bounded by O (jB s jjwj). 9 Verification Example We now consider an example to illustrate how the model checker works. We consider the simplified Needham-Schroeder protocol analyzed by Lowe <ref> [16] </ref> given below: 1. A ! B : A:B:fN a :Ag K B 2. B ! A : B:A:fN a :N b g K A Here A is the initiator and B is the responder.
Reference: [17] <author> C. Meadows. </author> <title> Applying formal methods to the analysis of a key management protocol. </title> <journal> Journal of Computer Security, </journal> <volume> 1 </volume> <pages> 5-53, </pages> <year> 1992. </year>
Reference-contexts: However, their model is extremely limited. They only consider secrecy issues, and they model only encryption, decryption, and adding, checking, or deleting a principal name. Meadows used an extension of the Dolev-Yao model in her PROLOG based model checker <ref> [17] </ref>. In her system, the user models a protocol as a set of rules that describe how an intruder generates knowledge.
Reference: [18] <author> C. Meadows. </author> <title> The NRL protocol analyzer: An overview. </title> <booktitle> In Proceedings of the Second International Conference on the Practical Applications of Prolog, </booktitle> <year> 1994. </year>
Reference-contexts: This initial model checker was still too limited. In particular, it did not allow the modeling of freshly generated nonces or session keys. The model checker evolved into the NRL Protocol Analyzer <ref> [18] </ref> which allowed for these operations. In addition the model changed to include the states of the participants as well as the state of the intruder while still maintaining the old paradigm of unifying against the right hand sides of transition rules in order to generate predecessor states.
Reference: [19] <author> R. Needham and M. Schroeder. </author> <title> Using encryption for authentication in large networks of computers. </title> <journal> Communications of the ACM, </journal> <volume> 21(12) </volume> <pages> 993-999, </pages> <year> 1978. </year>
Reference-contexts: Other recent work in this area has involved trying to use generic verification tools to verify security protocols. In [16], Lowe uses the FDR model checker for CSP [12] to analyze the Needham-Schroeder Public-Key Authentication Protocol <ref> [19] </ref>. Lowe succeeded in finding a previously unpublished error in the protocol. The fact that he was able to use a generic model checker is promising as well. Unfortunately, the CSP model for the protocol is far from straightforward.
Reference: [20] <author> D. Peled. </author> <title> All from one, one for all, on model-checking using representatives. </title> <booktitle> In Proceedings of the Fifth International Conference on Computer Aided Verification, Lecture Notes in Computer Science, </booktitle> <pages> pages 409-423. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: In particular, it has become clear that a number of operations can be thought of as independent of each other, in the sense that they can be swapped in the execution trace without affecting the rest of the trace. This leads us to believe that partial order techniques <ref> [20] </ref> can be applied. The increase in efficiency, ease of use, and expressibility will prove useful in analyzing more complex protocols, including electronic commerce protocols.
Reference: [21] <author> V. Shoup and A. Rubin. </author> <title> Session key distribution using smart cards. </title> <booktitle> In Proceedings of Eurocrypt, </booktitle> <year> 1996. </year>
Reference-contexts: One recent approach taken by Bellare and Rogaway and by Shoup and Rubin, is to try to provide a rigorous mathematical proof of the correctness of a protocol <ref> [3, 21] </ref>. They use properties of pseudo-random functions and mathematical arguments to prove that an adversary does not have a statistical advantage when trying to discover a key in a session key distribution protocol.
Reference: [22] <author> P. Syverson and P. van Oorschot. </author> <title> On unifying some cryptographic protocol logics. </title> <booktitle> In Proceedings of the 1994 IEEE Computer Society Symposium on Research in Security and Privacy. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: An attempt to give this logic a rigorous semantics was made by Abadi and Tuttle [2] and other attempts to improve or expand the logic can be found in <ref> [22] </ref>. The BAN logic remains popular because of its simplicity and high level of abstraction. Recent work in the use of modal logics for verifying security protocols includes the development of a logic that can express accountability [13].
Reference: [23] <author> T. Y. C. Woo and S. S. Lam. </author> <title> A semantic model for authentication protocols. </title> <booktitle> In Proceedings of the IEEE Symposium on Research in Security and Privacy, </booktitle> <year> 1993. </year>
Reference-contexts: Finally, the algorithms used in the NRL Analyzer are not guaranteed to terminate, and so a limit is placed on the number of recursive calls allowed for some of the model checking routines. Woo and Lam propose a much more intuitive model for authentication protocols <ref> [23] </ref>. Their model resembles sequential programming with each participating principal being modelled independently. There is an easy and obvious translation from the common description of a protocol as a set of messages to their model. <p> For example, if the intruder knows a piece of data and a key, it can repeatedly encrypt this data to produce an infinite number of new terms. The second property is a temporal property that Woo and Lam call correspondence <ref> [23] </ref>.
Reference: [24] <author> T. Y. C. Woo and S. S. Lam. </author> <title> Verifying authentication protocols: Methodology and example. </title> <booktitle> In Proceedings of the International Conference on Network Protocols, </booktitle> <year> 1993. </year> <month> 18 </month>
Reference-contexts: However, they do not provide a general logic in which to formalize security properties, nor do they provide an automated tool. Instead they present a set of inference rules with which you can prove correspondence assertions about a model <ref> [24] </ref>. In addition, the description of their model, while intuitive, is not very precise or formal. Bolignano presents a model that is almost a middle point between these last two [4]. Like Meadows, Bolignano emphasizes the algebraic properties of the intruder when trying to derive words.
References-found: 24

