URL: http://www.fzi.de/prost/people/ciupke/ecoop98-baer-ciupke.ps.gz
Refering-URL: http://www.fzi.de/prost/people/ciupke.html
Root-URL: http://www.fzi.de
Title: Exploiting design heuristics for automatic problem detection a large fraction of these guidelines for good
Author: Holger Bar, Oliver Ciupke 
Note: It turnes out that  
Date: June 30, 1998  
Abstract: Reengineering large systems requires support for detecting design problems automatically. A lot of rules and guidelines about good design can be found in the literature. Since these were originally intented to be used by human developers, it was not sure if they were suitable to be automated. We present our approach to formalize these rules, extract design information from legacy source code and to search for violations of these rules automatically by using our reengineering tool set Goose. 
Abstract-found: 1
Intro-found: 1
Reference: [CK91] <author> Shyam R. Chidamber and Chris F. Kemerer. </author> <title> Towards a metrics suite for object oriented design. </title> <booktitle> In Proceedings OOPSLA '91, ACM SIGPLAN Notices, </booktitle> <pages> pages 197-211, </pages> <month> Novem-ber </month> <year> 1991. </year> <title> Published as Proceedings OOPSLA '91, </title> <journal> ACM SIGPLAN Notices, </journal> <volume> volume 26, number 11. </volume>
Reference-contexts: On the other hand, MeTHOOD is more general in the sense that it provides concepts for transforming designs and for resolving problems. Such are so far not integrated in Goose. Object-oriented software metrics <ref> [CK91] </ref>, [CK94] map pieces of design or implementation to 4 a certain, normally numerical value. Most object-oriented metrics measure the different kinds of complexity of classes or cohesion between classes [Mar97]. Up to now, it is hard to set limits for measured values where violations would point to design problems.
Reference: [CK94] <author> S. R. Chidamber and C. F. Kemerer. </author> <title> A Metric Suite for Object-Oriented Design. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(6) </volume> <pages> 476-493, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: On the other hand, MeTHOOD is more general in the sense that it provides concepts for transforming designs and for resolving problems. Such are so far not integrated in Goose. Object-oriented software metrics [CK91], <ref> [CK94] </ref> map pieces of design or implementation to 4 a certain, normally numerical value. Most object-oriented metrics measure the different kinds of complexity of classes or cohesion between classes [Mar97]. Up to now, it is hard to set limits for measured values where violations would point to design problems.
Reference: [Dar98] <author> Ian F. Darwin. </author> <title> Checking C programs with lint. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> 981 Chestnut Street, Newton, MA 02164, USA, </address> <month> October </month> <year> 1998. </year>
Reference-contexts: Style checker: Several tools exist for checking rules in given source code at the implementation level, e. g., searching for the improper use of references. The best known among these is probably lint <ref> [Dar98] </ref> which analyses C programs. Goose checks rules on the design level and is language independent to a large extent. A List of examined guidelines with testability classes The reference collumn has to be interpreted as follows.
Reference: [DMR92] <author> Carolyn K. Duby, Scott Meyers, and Steven P. Reiss. Ccel: </author> <title> A metalanguage for c++. </title> <type> Technical Report CS-92-51, </type> <institution> Department of Computer Science, Brown University, Octo-ber 1992. Sun, </institution> <month> 13 Jul </month> <year> 1997 </year> <month> 18:30:16 GMT. </month>
Reference-contexts: The value of the implied guidelines lies in their specificity yielding more concrete problem descriptions and hence starting points for problem solution. Further "handmade" abstractions lead to abstract guidelines like the avoidance of cycles in the uses-relationship between classes, subsystems, etc. 5 Related work CCEL <ref> [DMR92] </ref> is a meta language for C++ to define rules for the entities of a C++ design. It is possible to check these rules for given C++ sources. CCEL defines an object-oriented meta-model, which only focuses on the entities of a design. Furthermore CCEL is specific for C++.
Reference: [GD97] <author> Thomas Grotehen and Klaus R. Dittrich. </author> <title> The meTHOOD approach: Measures, transformation rules, and heuristicsfor object-oriented design. </title> <type> Technical Report ifi-97.09, </type> <institution> University of Zurich, Switzerland, </institution> <month> August 27, </month> <year> 1997. </year>
Reference-contexts: It introduces mechanisms to detect design problems but does not define rules for their detection. In contrast, our approach focuses on examination of already existing systems and we present a selection of problem detections which can be applied on a legacy system. MeTHOOD <ref> [GD97] </ref> improves object-oriented designs on the level of a meta-model. MeTHOOD applies during the design phase of forward engineering as well. A model has to entered by a special editor and cannot be deduced from source code. So far only few rules are given formally.
Reference: [JF88] <author> Ralph E. Johnson and Brian Foote. </author> <title> Designing reuseable classes. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 1(2) </volume> <pages> 22-35, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: References of the form * x.y can be found in [Rie96] under the stated number. * Chapter x can be found in [Lak96] in the stated chapter. * Rule x can be found in <ref> [JF88] </ref>. * For other sources the literature reference is given.
Reference: [Lak96] <author> John Lakos. </author> <title> Large-Scale C++ Software Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: A List of examined guidelines with testability classes The reference collumn has to be interpreted as follows. References of the form * x.y can be found in [Rie96] under the stated number. * Chapter x can be found in <ref> [Lak96] </ref> in the stated chapter. * Rule x can be found in [JF88]. * For other sources the literature reference is given.
Reference: [LH89] <author> K. J. Lieberherr and I. M. Holland. </author> <title> Assuring good style for object-oriented programming. </title> <journal> IEEE Software, </journal> <pages> pages 38-48, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Chapter 3 Cyclic depedencies only within components. Chapter 4&7 Eliminate case analysis. Rule 2 The top of the class hierarchy should be abstract. Rule 6 5 Separate methods that do not communicate. Rule 11 Reduce implicit parameter passing. Rule 13 Law of Demeter|class form <ref> [LH89] </ref> Law of Demeter|object form [LH89] Define abstract interfaces to used classes. [Mar96] partially testable A class should not be dependent on ist users. 2.2 Implement a minimal public interface that all classes understand. 2.4 Common-code private functions should be hidden within their class. 2.5 Eliminate irrelevant classes. 3.7, 3.8, 3.10 <p> Chapter 3 Cyclic depedencies only within components. Chapter 4&7 Eliminate case analysis. Rule 2 The top of the class hierarchy should be abstract. Rule 6 5 Separate methods that do not communicate. Rule 11 Reduce implicit parameter passing. Rule 13 Law of Demeter|class form <ref> [LH89] </ref> Law of Demeter|object form [LH89] Define abstract interfaces to used classes. [Mar96] partially testable A class should not be dependent on ist users. 2.2 Implement a minimal public interface that all classes understand. 2.4 Common-code private functions should be hidden within their class. 2.5 Eliminate irrelevant classes. 3.7, 3.8, 3.10 Do not turn an operation
Reference: [Mar96] <author> R. C. Martin. </author> <title> The Dependency Inversion Principle. C++ Report, </title> <booktitle> 8(6) </booktitle> <pages> 61-66, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Chapter 4&7 Eliminate case analysis. Rule 2 The top of the class hierarchy should be abstract. Rule 6 5 Separate methods that do not communicate. Rule 11 Reduce implicit parameter passing. Rule 13 Law of Demeter|class form [LH89] Law of Demeter|object form [LH89] Define abstract interfaces to used classes. <ref> [Mar96] </ref> partially testable A class should not be dependent on ist users. 2.2 Implement a minimal public interface that all classes understand. 2.4 Common-code private functions should be hidden within their class. 2.5 Eliminate irrelevant classes. 3.7, 3.8, 3.10 Do not turn an operation into a class. 3.9 Base classes should
Reference: [Mar97] <author> Radu Marinescu. </author> <title> The use of software metrics in the design of object oriented systems. </title> <type> Master's thesis, </type> <institution> Universitatea Polytehnica din Timisoara, </institution> <year> 1997. </year>
Reference-contexts: Such are so far not integrated in Goose. Object-oriented software metrics [CK91], [CK94] map pieces of design or implementation to 4 a certain, normally numerical value. Most object-oriented metrics measure the different kinds of complexity of classes or cohesion between classes <ref> [Mar97] </ref>. Up to now, it is hard to set limits for measured values where violations would point to design problems. First, because of lack of experience in measuring large systems of real-world code; second, because the limits vary with languages, programming style, details in the definition of a metric, etc.
Reference: [Min96] <author> Naftaly H. Minsky. </author> <title> Law-governed regularities in object systems, part 1: An abstract model. </title> <journal> Theory and Practice of Object Sytems, </journal> <volume> 2(4) </volume> <pages> 283-301, </pages> <year> 1996. </year>
Reference: [MP97] <author> Naftaly H. Minsky and Partha Pratim Pal. </author> <title> Law-governed regularities in object systems, part 2: A concrete implementation. </title> <journal> Theory and Practice of Object Sytems, </journal> <volume> 3(2) </volume> <pages> 87-101, </pages> <year> 1997. </year>
Reference: [Rie96] <author> Arthur J. Riel. </author> <title> Object-Oriented Design Heuristics. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year> <note> nur als Auszug vorhanden. 7 </note>
Reference-contexts: Derived classes must have knowledge of their base class by definition, but base classes should not know anything about their derived classes. (Heuristic 5.2 in <ref> [Rie96] </ref>) A base class violates this heuristic, if it knows anything about one of its direct or indirect heirs. Knowing a class means being dependent on the interface or the implementation of this class. <p> Goose checks rules on the design level and is language independent to a large extent. A List of examined guidelines with testability classes The reference collumn has to be interpreted as follows. References of the form * x.y can be found in <ref> [Rie96] </ref> under the stated number. * Chapter x can be found in [Lak96] in the stated chapter. * Rule x can be found in [JF88]. * For other sources the literature reference is given.
References-found: 13

