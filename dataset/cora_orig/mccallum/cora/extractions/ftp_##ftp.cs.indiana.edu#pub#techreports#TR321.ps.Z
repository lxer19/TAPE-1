URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR321.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Title: RTBA A Generic Bit-Sliced Bus Architecture for DataPath Synthesis  
Author: Kamlesh Rath Ignacio Celis Robert M. Wehrmeister Steven D. Johnson 
Note: This research was supported in part by the National Science Foundation under grants numbered MIP 8707067, MIP 8921842, and DCR 8521497.  
Address: Bloomington, IN 47405  
Affiliation: Computer Science Department Indiana University,  
Abstract: Register transfer level (RTL) equations are used to specify the register and ALU datapaths of machine architectures. RTBA (Register Transfer Bus Architecture) is a target architecture for automatic bit-sliced VLSI implementation of RTL equations. This article discusses the automatic derivation process of a layout from a typical system of RTL equations using a series of behavior preserving transformations. The test results of a chip fabricated using the derived layout are also presented. Extensions to the RTBA transformations, allowing functions in the RTL equations, are presented by deriving the min-max benchmark. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Randy Bryant, </author> <title> Compiled Simulator for MOS Circuits, </title> <institution> Carnegie Mellon University. </institution> <address> REFERENCES 18 </address>
Reference-contexts: The layout for each bit-slice is generated automatically using mquilt [14], as shown in Appendix C. The layout was simulated using the logical simulator COSMOS <ref> [1] </ref>, and was verified to have behavioral equivalence with the specified RTL equations. The script of the COSMOS simulation for the layout of Example 1 is included in Appendix D. SPICE [13] was used to simulate the electrical characterstics of the layout of a single bit-slice.
Reference: [2] <author> R. Camposano, </author> <title> Behavior Preserving Transformations for High-Level Synthesis, Hardware Specification, Verification and Synthesis: Mathematical Aspects, </title> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1989. </year>
Reference: [3] <author> M. R. Garey and D. S. Johnson, Computers and Intractibility, W.H.Freeman and Company, San Fran cisco, </author> <year> 1979. </year>
Reference-contexts: Sources (Destinations) which are never used for the same status value can be allocated to the same bus. The problem of allocating buses for a given number of sources or destinations can be reduced to a graph vertex-coloring problem <ref> [3] </ref>. Consider a graph with nodes for each source (destination) and an edge for each dependency. There exists a dependency between 2 sources (destinations), if both are used for the same datapath state. <p> Each color in the graph could then be assigned to a source (destination) bus. The graph vertex-coloring problem is a known NP-complete <ref> [3] </ref> problem. Our solution to the problem, is based on heuristics and is not necessarily optimal. The source (destination) with the maximal number of dependencies is first allocated to a bus.
Reference: [4] <author> Steven D. Johnson and Bhaskar Bose, </author> <title> A System for Mechanized Digital Design Derivation, </title> <booktitle> to appear at International Workshop on Formal Methods in VLSI Design, </booktitle> <address> Miami, </address> <month> January </month> <year> 1991. </year>
Reference-contexts: Transformations on the input RTL equations allocate buses, logical units, shift units, comparator units, arithmetic units, and registers. The allocated units are tiled together and compiled for an area efficient layout. On the front-end, the RTBA transformation system is integrated with DDD <ref> [4] </ref>, an experimental transformation system that extracts control and datapath description from a high-level functional specification. <p> Complex functions need to be serialized into a sequence of implementable functions, or be factored <ref> [4] </ref> from the RTL equations into a set of I/O ports and implemented by the user. Data transfers across bit-slice partitions are also implemented as a set of I/O ports.
Reference: [5] <author> Steven D. Johnson, </author> <title> Synthesis of Digital Designs from Recursion Equations, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, </address> <year> 1984. </year>
Reference-contexts: It also generates the control inputs for arithmetic units. 3 Specification A behavioral description of a machine in DDD is an iterative <ref> [5] </ref> system of functional definitions.
Reference: [6] <author> Steven D. Johnson, Robert M. Wehrmeister and Bhaskar Bose, </author> <title> On the Interplay of Synthesis and Ver ification, Formal VLSI Specification and Synthesis, </title> <publisher> Elsevier Science Publishers B.V. (North Holland), IFIP, </publisher> <year> 1990. </year>
Reference-contexts: E describes the initial state and register, port values of machine. 4 EXAMPLE 1 : A SIMPLE MACHINE 5 3.2 RTL Equations A series of correctness preserving transformations <ref> [6] </ref> in DDD converts the machine specification into a control specification and a system of RTL equations which form the input for the RTBA. ((X 1 ( (select status g 11 g 12 ::: g 1k )) (X 2 ( (select status g 21 g 22 ::: g 2k )) :
Reference: [7] <author> K. Kucukcakar and A.C. </author> <title> Parker,Data Path Tradeoffs using MABAL, </title> <booktitle> 27th ACM/IEEE Design Automa tion Conference, </booktitle> <month> June </month> <year> 1990. </year>
Reference-contexts: The ? entries in tables denote don't-care terms. Further serialization of the input specification would result in fewer buses and more control states. The RTBA transformation system allocates a functional unit for each function. This is a tradeoff for a smaller and faster interconnect area <ref> [7] </ref>.
Reference: [8] <author> T.A. Ly, W.L. Elwood and E.F. Girczyc, </author> <title> A Generalized Interconnect Model for Data Path Synthesis, </title> <booktitle> 27th ACM/IEEE Design Automation Conference, </booktitle> <month> June </month> <year> 1990. </year>
Reference-contexts: It evolved from the classical single bus architecture ([9],[12]) which does not handle multiple data transfers between circuit elements simultaneously. RTBA is designed to address the synthesis of highly parallel datapaths. The multiple bus architecture distributes datapath multiplexers to a single control decode unit and a set of switches <ref> [8] </ref>. A processor description can be decomposed into a control description and a datapath description. The datapath is described as a system of RTL equations. A sequence of behavior preserving transformations maps the RTL equations to RTBA.
Reference: [9] <author> M. Morris Mano, </author> <title> Digital Logic and Computer Design, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, USA. </address>
Reference-contexts: The bit-sliced <ref> [9] </ref> functional units have transmission gates on their outputs to control writing onto the buses. Buses connect the inputs and outputs of the registers to functional units.
Reference: [10] <author> A.C. Parker, J "T" Pizarro and M. Mlinar, MAHA: </author> <title> A Program for Datapath Synthesis, </title> <booktitle> 23rd ACM/IEEE Design Automation Conference, </booktitle> <month> July </month> <year> 1986. </year>
Reference: [11] <author> P.G. Paulin, J.P. Knight and E.F. Girczyc, HAL: </author> <title> A Multi Paradigm Approach to Automatic Data Path Synthesis, </title> <booktitle> 23rd ACM/IEEE Design Automation Conference, </booktitle> <month> July </month> <year> 1986. </year>
Reference: [12] <author> F.P. Prosser and D.E. Winkel, </author> <title> The Art of Digital Design, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, USA. </address>
Reference: [13] <author> Thomas L. Quarles, </author> <title> SPICE 3C1 Users Guide, </title> <institution> UCB/ERL M89/46, Electronics Research Laboratory, College of Engineering, University of California, Berkeley. </institution> <address> REFERENCES 19 </address>
Reference-contexts: The layout was simulated using the logical simulator COSMOS [1], and was verified to have behavioral equivalence with the specified RTL equations. The script of the COSMOS simulation for the layout of Example 1 is included in Appendix D. SPICE <ref> [13] </ref> was used to simulate the electrical characterstics of the layout of a single bit-slice. The spice deck and the graph corresponding to the simulations of states 0 and 6 are shown in Appendix E. The pin diagram for the chip layout is given in Appendix F.
Reference: [14] <author> Walter S. Scot, Robert N Mayo, Gordon Hamachi, and John K. Ousterhout, </author> <title> 1986 VLSI Tools, </title> <type> Report No. </type> <institution> UCB/CSD 86/272,(Computer Science Division-EECS, University of California at Berkeley, 1985). California, Berkeley. </institution>
Reference-contexts: On the front-end, the RTBA transformation system is integrated with DDD [4], an experimental transformation system that extracts control and datapath description from a high-level functional specification. On the back-end, it is integrated with the Berkeley tools <ref> [14] </ref> (mquilt, mpla, magic ) to generate circuit layouts. 2 OPERATION OF RTBA 3 2 Operation of RTBA Each bit-slice of the RTBA has an independent register transfer path. Figure 1 shows the block diagram for a bit-slice of the RTBA layout. <p> The boolean equations for the control decode (shown in Table 6) are used to automatically generate the layout of a PLA using mpla <ref> [14] </ref>. 4.3 Layout, Simulation and Fabrication The layout of the PLA to implement the control decode is shown in Appendix B. The layout for each bit-slice is generated automatically using mquilt [14], as shown in Appendix C. <p> the control decode (shown in Table 6) are used to automatically generate the layout of a PLA using mpla <ref> [14] </ref>. 4.3 Layout, Simulation and Fabrication The layout of the PLA to implement the control decode is shown in Appendix B. The layout for each bit-slice is generated automatically using mquilt [14], as shown in Appendix C. The layout was simulated using the logical simulator COSMOS [1], and was verified to have behavioral equivalence with the specified RTL equations. The script of the COSMOS simulation for the layout of Example 1 is included in Appendix D. <p> Successive bit-slices are stacked together to connect common data transfer paths and load/enable signals. The automated floor-planner of the RTBA transformation system generates a template map for each bit-slice. The layout for a bit-slice is generated using mquilt <ref> [14] </ref>, by substituting each template on the map with it's corresponding cell layout. The layout for a min-max bit-slice is shown in Appendix H. 5.4 Generating Control Decode The register transfer table is transformed into register loads and enables in Table 11. <p> Tables 11 and 12 are merged to generate boolean equations, which are processed through mpla <ref> [14] </ref> to generate a PLA to implement the control decoder.
Reference: [15] <author> Diederik Verkest, Luc Claesen, and Hugo De Man, </author> <title> Formal Design Benchmark Example, Formal VLSI Specification and Synthesis, </title> <publisher> Elsevier Science Publishers B.V. (North Holland), IFIP, </publisher> <year> 1990. </year>
Reference-contexts: It also computes the average of the current maximum and minimum and displays it on it's output port. This specification is a simpler version of the min-max benchmark specification used in IMEC '89 <ref> [15] </ref> conference. The control signals CLEAR, ENABLE and RESET were eliminated to simplify the control unit and concentrate on the datapath.
Reference: [16] <author> R.S. Wei, S. Rothweiler and J.Y. Jon, BECOME: </author> <title> Behavior Level Synthesis Based On Structure Map ping, </title> <booktitle> 25th ACM/IEEE Design Automation Conference, </booktitle> <month> June </month> <year> 1988. </year>
Reference: [17] <author> David Winkel, Franklin Prosser, Robert Wehrmeister, William Hunt and Caleb Hess, </author> <title> A Student VLSI Hardware Tester, </title> <institution> Indiana University. </institution>
Reference-contexts: The pin diagram for the chip layout is given in Appendix F. The layout was fabricated at the 5 EXAMPLE 2 : THE MIN-MAX MACHINE 11 MOSIS fabrication facility (Fabrication ID number : N05F-BR1). The chip was tested using the Logic Engine <ref> [17] </ref> (test programs given in Appendix G). 5 Example 2 : The Min-Max Machine The min-max machine is a simple machine that computes and stores the running maximum and minimum values on it's input port.
References-found: 17

