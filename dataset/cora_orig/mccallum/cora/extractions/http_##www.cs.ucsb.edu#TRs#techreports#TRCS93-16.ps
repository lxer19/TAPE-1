URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS93-16.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Graphical Interval Logic for Specifying Concurrent Systems  
Author: L. K. Dillon, G. Kutty, L. E. Moser P. M. Melliar-Smith and Y. S. Ramakrishna 
Address: Santa Barbara 93106  
Affiliation: Departments of Computer Science and of Electrical and Computer Engineering University of California,  
Abstract: The paper describes a graphical interval logic that is the foundation of a toolset supporting formal specification and verification of concurrent software systems. Experience has shown that most software engineers find standard temporal logics difficult to understand and to use. The objective of this work is to enable software engineers to specify and reason about temporal properties of concurrent systems more easily by providing them with a logic that has an intuitive graphical representation and with tools that support its use. To illustrate the use of the graphical logic, the paper provides some specifications for an elevator system and proves several properties of the specifications. The paper also describes the toolset and the implementation.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. A. Aaby and K. T. Narayana. </author> <title> Propositional temporal interval logic is PSPACE complete. </title> <booktitle> In Proc. 9th Inter. Conf. Automated Deduction, </booktitle> <pages> pp. 218-237, </pages> <address> Argonne IL, </address> <month> May </month> <year> 1988. </year> <note> LNCS 193, Springer-Verlag. </note>
Reference-contexts: Plaisted [25] demonstrated a decision procedure for IL, obtained through translation to an !- regular expression-like language with a non-elementary decision problem. PSPACE-completeness of IL was later established by Aaby and Narayana in <ref> [1] </ref>, where they give a translation of IL to an elementary fragment of a non-elementary logic. The reduction is tedious and unnatural, and points out the need for a simpler semantics that retains the advantages of being able to reason within intervals.
Reference: [2] <author> H. Barringer, R. Kuiper, and A. Pnueli. </author> <title> Now you may compose temporal logic specifications. </title> <booktitle> In Proc. 16th ACM Symp. Theory of Computing, </booktitle> <pages> pp. 51-63, </pages> <address> Washington, D.C., </address> <month> Apr. </month> <year> 1984. </year>
Reference-contexts: Users must be able to express the properties of the systems about which they wish to reason as naturally as possible and to confirm mechanically that the specifications, designs, testing criteria and sample executions have the required properties. Temporal logics <ref> [2, 19, 21, 32] </ref> are well-suited for specifying temporal properties of concurrent systems. Experience has shown, however, that specifications of even moderate-sized systems are too complex to be readily understood.
Reference: [3] <author> L. K. Dillon, G. Kutty, P. M. Melliar-Smith, L. E. Moser, and Y. S. Ramakrishna. </author> <title> Visual specifications for temporal reasoning. </title> <note> Submitted, </note> <month> May </month> <year> 1993. </year>
Reference-contexts: Experiments with the logic have produced graphical specifications for the sliding window protocol [16], a readers/writers database system [4], a protocol to commit transactions on a shared database [17], and a fair mutual exclusion algorithm <ref> [3] </ref>, in addition to the elevator system. A prototype toolset supporting the analysis of GIL specifications has been developed. Current research is addressing issues relating to the display of GIL formulas and the specification of temporal properties.
Reference: [4] <author> L. K. Dillon, G. Kutty, L. E. Moser, P. M. Melliar-Smith, and Y. S. Ramakrishna. </author> <title> Graphical specifications for concurrent software systems. </title> <booktitle> In Proc. 14th IEEE Inter. Conf. Software Engineering, </booktitle> <pages> pp. 213-224, </pages> <address> Melbourne, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: Experiments with the logic have produced graphical specifications for the sliding window protocol [16], a readers/writers database system <ref> [4] </ref>, a protocol to commit transactions on a shared database [17], and a fair mutual exclusion algorithm [3], in addition to the elevator system. A prototype toolset supporting the analysis of GIL specifications has been developed.
Reference: [5] <author> P. Franchi-Zannettacci. </author> <title> Attribute specifications for graphical interface specifications. </title> <editor> In G. X. Ritter, ed., </editor> <booktitle> Information Processing '89, </booktitle> <pages> pp. 149-155. </pages> <publisher> IFIP, Elsevier Science Publishers B.V., North Holland, </publisher> <year> 1989. </year>
Reference-contexts: The attribute grammar used in the implementation of GILED resembles a picture layout grammar [9] but makes use of both inherited and synthesized attributes. It is similar in this regard to the grammar specifications in <ref> [5] </ref>. Each node in the abstract syntax tree representation of a GIL formula corresponds to a subpicture, which fits within a rectangular box. This is illustrated in Figure 10 by placing rectangular boxes around the main syntactic units of a sample GIL formula.
Reference: [6] <author> D. M. Gabbay. </author> <title> The declarative past and imperative future. </title> <booktitle> In Proc. Colloq. Temporal Logic in Specification, </booktitle> <pages> pp. 409-448, </pages> <address> 1987. </address> <publisher> LNCS 398, Springer-Verlag. </publisher>
Reference-contexts: Even logicians who are fluent in temporal logic find timing diagrams helpful to explain the meanings of temporal logic formulas and to motivate lines of reasoning (see for example <ref> [6] </ref>). However, because timing diagrams often lack a formal semantics, they cannot be used for rigorous analysis of system properties. Pictorial documentation is all too often ad hoc and liable to ambiguous interpretation.
Reference: [7] <author> A. Giacalone and S. A. Smolka. </author> <title> Integrated environments for formally well-founded design and simulation of concurent systems. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 14(6) </volume> <pages> 787-801, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Some notable exceptions include the statechart visual formalism of Harel [12], a pictorial version of Milner's CCS, called IDCCS <ref> [7] </ref>, and the 8-automata of Manna and Pnueli [22]. Environments supporting the specification and verification of concurrent systems have been built around both Statecharts [13] and IDCCS. These languages are oriented toward the depiction of states and state transitions, whereas GIL focuses on showing the evolution of properties in time.
Reference: [8] <author> W. D. Gillett and T. D. Kimura. </author> <title> Parsing two-dimensional languages. </title> <booktitle> In Proc. IEEE 10th Inter. Computer Software and Applications Conf., </booktitle> <pages> pp. 472-477, </pages> <address> Chicago, </address> <month> Oct. </month> <year> 1986. </year>
Reference: [9] <author> E. Golin and S. P. Reiss. </author> <title> The specification of visual language syntax. </title> <booktitle> In Proc. IEEE Work. Visual Languages, </booktitle> <pages> pp. 105-110, </pages> <address> Rome, </address> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: A syntax directed editor for a visual language is based on an attribute grammar that specifies how a picture is represented by an annotated abstract syntax tree in which attributes provide information relating to layout. The attribute grammar used in the implementation of GILED resembles a picture layout grammar <ref> [9] </ref> but makes use of both inherited and synthesized attributes. It is similar in this regard to the grammar specifications in [5]. Each node in the abstract syntax tree representation of a GIL formula corresponds to a subpicture, which fits within a rectangular box.
Reference: [10] <author> J. Y. Halpern, Z. Manna, and B. Moszkowski. </author> <title> A hardware semantics based on temporal intervals. </title> <booktitle> In Proc. 10th Inter. Conf. Automata, Languages and Programming, </booktitle> <pages> pp. 278-291, </pages> <address> Barcelona, </address> <year> 1983. </year>
Reference-contexts: Allen's logic for expressing temporal relationships between intervals of time is the foundation for the TIMELOGIC temporal reasoning system [14]. The logic is textual, but graphical representations are used to show relationships among intervals more clearly. Moszkowski's Interval Temporal Logic <ref> [10] </ref> provides an interval-like "chop" operator C. Informally, f Cg is true of a context if there exists a point that partitions the context into a prefix (subcontext) satisfying f and a suffix (subcontext) satisfying g.
Reference: [11] <author> J. Y. Halpern and Y. Shoham. </author> <title> A propositional modal logic of time intervals. </title> <journal> J. ACM, </journal> <volume> 38(4) </volume> <pages> 935-962, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: Experience has shown, however, that specifications of even moderate-sized systems are too complex to be readily understood. This complexity stems chiefly from the need to establish the temporal context within which properties, such as bounded liveness and invariance, must hold. Interval logics <ref> [11, 31] </ref> address this problem by defining temporal intervals to represent such contexts.
Reference: [12] <author> D. Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(3) </volume> <pages> 231-274, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: Some notable exceptions include the statechart visual formalism of Harel <ref> [12] </ref>, a pictorial version of Milner's CCS, called IDCCS [7], and the 8-automata of Manna and Pnueli [22]. Environments supporting the specification and verification of concurrent systems have been built around both Statecharts [13] and IDCCS.
Reference: [13] <author> D. Harel, H. Lachover, A. Naamad, A. Pnueli, M. Politi, R. Sherman, A. Shtull-Trauring, and M. Trakhtenbrot. STATEMATE: </author> <title> A working environment for the development of complex reactive systems. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 16(4) </volume> <pages> 403-414, </pages> <month> Apr. </month> <year> 1990. </year>
Reference-contexts: Some notable exceptions include the statechart visual formalism of Harel [12], a pictorial version of Milner's CCS, called IDCCS [7], and the 8-automata of Manna and Pnueli [22]. Environments supporting the specification and verification of concurrent systems have been built around both Statecharts <ref> [13] </ref> and IDCCS. These languages are oriented toward the depiction of states and state transitions, whereas GIL focuses on showing the evolution of properties in time. Timing Diagrams [30] is a graphical notation for expressing precedence and causality relationships between events in a computation.
Reference: [14] <author> J. A. G. M. Koomen. </author> <title> The timelogic temporal reasoning system. </title> <type> Tech. Rep., </type> <institution> Dept. Computer Science, University of Rochester, </institution> <address> NY, </address> <month> Nov. </month> <year> 1987. </year> <month> (Revised March </month> <year> 1989). </year>
Reference-contexts: The semantics of Timing Diagrams are defined by translation to a subset of temporal logic that can be decided very efficiently. Allen's logic for expressing temporal relationships between intervals of time is the foundation for the TIMELOGIC temporal reasoning system <ref> [14] </ref>. The logic is textual, but graphical representations are used to show relationships among intervals more clearly. Moszkowski's Interval Temporal Logic [10] provides an interval-like "chop" operator C.
Reference: [15] <author> G. Kutty. </author> <title> A tool for the interactive generation of Graphical Interval Logic formulas. </title> <type> Tech. Rep. 9307, </type> <institution> Dept. Electrical and Computer Engineering, University of California, Santa Barbara, </institution> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: Garnet maintains constraints lazily, re-computing the value of an attribute only when the value is required for the evaluation of other attributes and its current value is stale. This method results in a reasonably efficient implementation. A detailed description of the design of GILED appears in <ref> [15] </ref>. The semantics of GIL is formally defined by translation to a textual logic with a minimal set of modal operators and a model-theoretic semantics. (See Appendix B.) The textual representation facilitates the definitions of the semantics and of the decision procedure.
Reference: [16] <author> G. Kutty, Y. S. Ramakrishna, L. K. Dillon, L. E. Moser, and P. M. Melliar-Smith. </author> <title> Specification of a communication protocol in graphical interval logic. </title> <booktitle> In Proc. IEE Inter. Conf. Information Engineering, </booktitle> <pages> pp. 432-441, </pages> <address> Singapore, </address> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: Experiments with the logic have produced graphical specifications for the sliding window protocol <ref> [16] </ref>, a readers/writers database system [4], a protocol to commit transactions on a shared database [17], and a fair mutual exclusion algorithm [3], in addition to the elevator system. A prototype toolset supporting the analysis of GIL specifications has been developed.
Reference: [17] <author> G. Kutty, Y. S. Ramakrishna, L. E. Moser, L. K. Dillon, and P. M. Melliar-Smith. </author> <title> A graphical interval logic tooset for verifying concurrent systems. </title> <booktitle> In Proc. 4th Conf. Computer Aided Verification, </booktitle> <pages> pp. 138-153, </pages> <address> Elounda, Greece, </address> <month> July </month> <year> 1993. </year> <note> LNCS 697, Springer-Verlag. </note>
Reference-contexts: Experiments with the logic have produced graphical specifications for the sliding window protocol [16], a readers/writers database system [4], a protocol to commit transactions on a shared database <ref> [17] </ref>, and a fair mutual exclusion algorithm [3], in addition to the elevator system. A prototype toolset supporting the analysis of GIL specifications has been developed. Current research is addressing issues relating to the display of GIL formulas and the specification of temporal properties.
Reference: [18] <author> L. Lamport. </author> <title> What good is temporal logic? In Proc. </title> <booktitle> IFIP Congress, </booktitle> <pages> pp. 657-668, </pages> <address> Paris, </address> <year> 1983. </year>
Reference-contexts: A reflexive interpretation of the future, in which the future includes the present, allows a semantics that is insensitive to finite stuttering. This facilitates the use of hierarchical abstraction and refinement while reasoning about concurrency <ref> [18] </ref>. Intervals permit the specification of contexts within which properties hold. We denote an interval by a left-closed right-open line segment: ) .
Reference: [19] <author> L. Lamport. </author> <title> A temporal logic of actions. </title> <type> Tech. Rep. 57, </type> <institution> DEC Systems Research Center, </institution> <address> Palo Alto, CA, </address> <month> Apr. </month> <year> 1990. </year> <month> 35 </month>
Reference-contexts: Users must be able to express the properties of the systems about which they wish to reason as naturally as possible and to confirm mechanically that the specifications, designs, testing criteria and sample executions have the required properties. Temporal logics <ref> [2, 19, 21, 32] </ref> are well-suited for specifying temporal properties of concurrent systems. Experience has shown, however, that specifications of even moderate-sized systems are too complex to be readily understood.
Reference: [20] <author> P. J. Landin. </author> <title> The next 700 programming languages. </title> <journal> Communications of the ACM, </journal> <volume> 9(3):157--166, </volume> <month> Mar. </month> <year> 1966. </year>
Reference-contexts: Both layout and precedence rules determine the grouping of operations. GIL formulas obey a variation of Landin's offside rule <ref> [20] </ref>, which requires that every token of a formula lie in the lower right quadrant determined by the upper left corner of the smallest rectangle that contains its first token. The first token that does not obey this rule, called an offside token, terminates the parse of a formula.
Reference: [21] <author> Z. Manna and A. Pnueli. </author> <title> Verification of concurrent programs: The temporal framework. </title> <editor> In R. S. Boyer and J. S. Moore, eds., </editor> <booktitle> The Correctness Problem in Computer Science, </booktitle> <pages> pp. 215-273. </pages> <publisher> Academic Press, </publisher> <year> 1981. </year>
Reference-contexts: Users must be able to express the properties of the systems about which they wish to reason as naturally as possible and to confirm mechanically that the specifications, designs, testing criteria and sample executions have the required properties. Temporal logics <ref> [2, 19, 21, 32] </ref> are well-suited for specifying temporal properties of concurrent systems. Experience has shown, however, that specifications of even moderate-sized systems are too complex to be readily understood.
Reference: [22] <author> Z. Manna and A. Pnueli. </author> <title> Specification and verification of concurrent programs by 8-automata. </title> <booktitle> In Proc. Conf. Temporal Logic in Specification, </booktitle> <pages> pp. 124-187, </pages> <address> Altrincham, England, </address> <month> Apr. </month> <year> 1987. </year> <note> LNCS 398, Springer-Verlag. </note>
Reference-contexts: Some notable exceptions include the statechart visual formalism of Harel [12], a pictorial version of Milner's CCS, called IDCCS [7], and the 8-automata of Manna and Pnueli <ref> [22] </ref>. Environments supporting the specification and verification of concurrent systems have been built around both Statecharts [13] and IDCCS. These languages are oriented toward the depiction of states and state transitions, whereas GIL focuses on showing the evolution of properties in time.
Reference: [23] <author> P. M. Melliar-Smith. </author> <title> A graphical representation of interval logic. </title> <booktitle> In Proc. Inter. Conf. Con-currency, </booktitle> <pages> pp. 106-120, </pages> <address> Hamburg, FRG, Oct. 1988. </address> <publisher> LNCS 335, Springer-Verlag. </publisher>
Reference-contexts: The reduction is tedious and unnatural, and points out the need for a simpler semantics that retains the advantages of being able to reason within intervals. An experiment with a graphical representation of an IL specification for the alternating bit protocol <ref> [23] </ref> demonstrated that a visual representation results in more intuitive and natural specifications.
Reference: [24] <author> B. A. Myers, D. A. Guise, R. B. Dannenberg, B. Vander Zanden, D. S. Kosbie, E. Pervin, A. Mickish, and P. Marchal. Garnet: </author> <title> Comprehensive support for graphical highly interactive user interfaces. </title> <journal> IEEE Computer, </journal> <volume> 18(11) </volume> <pages> 71-85, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: Both the proof checker and model generator communicate results back to GILED, which displays them to the designer. The tools run under the X-window system and are written in Common Lisp using the Garnet graphics toolkit <ref> [24] </ref>. A syntax directed editor for a visual language is based on an attribute grammar that specifies how a picture is represented by an annotated abstract syntax tree in which attributes provide information relating to layout.
Reference: [25] <author> D. Plaisted. </author> <title> A low level language for obtaining decision procedures for classes of temporal logics. </title> <editor> In R. Schwartz, ed., </editor> <title> An Interval Logic for Higher Level Temporal Reasoning, pp. </title> <type> 1-35. NASA Contractor Report 172262, </type> <month> Sept. </month> <year> 1983. </year>
Reference-contexts: Allowing unrestricted searches into the past makes the decision procedure for GIL non-elementary [27]. This is a major difference from IL, where the presence of both future and past searches does not affect the complexity of the decision procedure. Plaisted <ref> [25] </ref> demonstrated a decision procedure for IL, obtained through translation to an !- regular expression-like language with a non-elementary decision problem. PSPACE-completeness of IL was later established by Aaby and Narayana in [1], where they give a translation of IL to an elementary fragment of a non-elementary logic.
Reference: [26] <author> V. Pratt. </author> <title> Modeling concurrency with partial orders. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 15(1) </volume> <pages> 33-71, </pages> <year> 1986. </year>
Reference-contexts: That is, the specifications must hold at the first state of every infinite state sequence that represents a computation of the system. We adopt a total order model of computation, rather than a partial order model, which has some advantages for representing causality in concurrent systems <ref> [26] </ref>, because total orders are more readily abstracted into meaningful "intervals" that can be represented pictorially at an appropriately high level. A GIL formula is evaluated at a state in an infinite sequence of states. Infinite state sequences, therefore, provide the contexts within which formulas are evaluated.
Reference: [27] <author> Y. S. Ramakrishna. </author> <title> Interval Logics for Temporal Specification and Verification. </title> <type> PhD thesis, </type> <institution> Dept. Computer and Electrical Engineering, University of California, Santa Barbara. </institution> <note> In preparation. </note>
Reference-contexts: This paper describes a visual temporal logic in which formulas resemble the informal timing diagrams familiar to designers of hardware systems and to software engineers. Graphical Interval Logic (GIL) has a formal model-theoretic semantics and is more expressive than propositional temporal logic with Until and without Next <ref> [27] </ref>. It thus provides an intuitive and natural visual notation in which to express system specifications without sacrificing the benefits of a formal notation. A visual editor allows GIL specifications to be easily constructed and to be stored in and retrieved from files. <p> IL permits searches into the past as well as the future. Allowing unrestricted searches into the past makes the decision procedure for GIL non-elementary <ref> [27] </ref>. This is a major difference from IL, where the presence of both future and past searches does not affect the complexity of the decision procedure. Plaisted [25] demonstrated a decision procedure for IL, obtained through translation to an !- regular expression-like language with a non-elementary decision problem.
Reference: [28] <author> Y. S. Ramakrishna, L. K. Dillon, L. E. Moser, P. M. Melliar-Smith, and G. Kutty. </author> <title> A real-time interval logic and its decision procedure. </title> <note> Submitted. </note>
Reference-contexts: On-going research is attempting to identify syntactic restrictions that permit inferences to be checked more efficiently and still allow natural specifications of concurrent systems. A real-time extension of GIL <ref> [28] </ref> provides primitives for bounding the duration of intervals. We have recently modified the GIL proof checker to validate deductions in the extended logic and are currently experimenting with its use.
Reference: [29] <author> Y. S. Ramakrishna, L. K. Dillon, L. E. Moser, P. M. Melliar-Smith, and G. Kutty. </author> <title> An automata-theoretic decision procedure for future interval logic. </title> <booktitle> In Proc. 12th Conf. Foundations of Software Technology and Theoretical Computer Science, </booktitle> <pages> pp. 51-67, </pages> <address> New Delhi, </address> <month> Dec. </month> <year> 1992. </year> <note> LNCS 652, Springer-Verlag. 36 </note>
Reference-contexts: The decision procedure reduces a formula to an equivalent Buchi automaton, whose accepting runs are precisely the satisfying models of the formula, and then checks the emptiness of language of the resulting automaton. Details of the automaton construction can be found in <ref> [29] </ref>, which also shows the complexity of the construction is 2 O (n k ) for a formula of size n and depth k of 30 interval nesting. The automata-theoretic method has been refined into a more traditional tableau procedure, which has lower average-case time and space requirements.
Reference: [30] <author> R. Schlor and W. Damm. </author> <title> Specification of system-level hardware designs using timing diagrams. </title> <booktitle> In Proc. Europ. Conf. Design Automation and Europ. Event in ASIC Design, </booktitle> <pages> pp. 518-524, </pages> <address> Paris, Feb. 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Environments supporting the specification and verification of concurrent systems have been built around both Statecharts [13] and IDCCS. These languages are oriented toward the depiction of states and state transitions, whereas GIL focuses on showing the evolution of properties in time. Timing Diagrams <ref> [30] </ref> is a graphical notation for expressing precedence and causality relationships between events in a computation. Like GIL, Timing Diagrams can be created using a graphical editor and checked for validity.
Reference: [31] <author> R. L. Schwartz, P. M. Melliar-Smith, and F. H. Vogt. </author> <title> An interval logic for higher-level temporal reasoning. </title> <booktitle> In Proc. 2nd ACM Symp. Principles of Distributed Computing, </booktitle> <pages> pp. 173-186, </pages> <address> Montreal, Canada, </address> <month> Aug. </month> <year> 1983. </year>
Reference-contexts: Experience has shown, however, that specifications of even moderate-sized systems are too complex to be readily understood. This complexity stems chiefly from the need to establish the temporal context within which properties, such as bounded liveness and invariance, must hold. Interval logics <ref> [11, 31] </ref> address this problem by defining temporal intervals to represent such contexts. <p> GIL can express a stronger version of chop, which suffices for expressing the properties of interest for the systems we have considered. GIL is closest to the Interval Logic (IL) of <ref> [31] </ref>, from which it is largely inspired. However, there are several presentational and semantic differences between the two logics, which we discuss briefly below. Both IL and GIL provide explicit construction of intervals using search operations.
Reference: [32] <author> P. Wolper. </author> <title> On the relation of programs and computations to models of temporal logic. </title> <booktitle> In Proc. Conf. Temporal Logic in Specification, </booktitle> <pages> pp. 75-123, </pages> <address> Altrincham, England, </address> <month> Apr. </month> <year> 1987. </year> <note> LNCS 398, Springer-Verlag. 37 </note>
Reference-contexts: Users must be able to express the properties of the systems about which they wish to reason as naturally as possible and to confirm mechanically that the specifications, designs, testing criteria and sample executions have the required properties. Temporal logics <ref> [2, 19, 21, 32] </ref> are well-suited for specifying temporal properties of concurrent systems. Experience has shown, however, that specifications of even moderate-sized systems are too complex to be readily understood.
References-found: 32

