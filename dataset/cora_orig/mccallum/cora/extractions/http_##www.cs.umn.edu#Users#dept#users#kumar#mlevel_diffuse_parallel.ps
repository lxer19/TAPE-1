URL: http://www.cs.umn.edu/Users/dept/users/kumar/mlevel_diffuse_parallel.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/kumar/
Root-URL: http://www.cs.umn.edu
Email: (kirk,karypis,kumar)@cs.umn.edu  
Title: Parallel Multilevel Diffusion Algorithms for Repartitioning of Adaptive Meshes  
Author: Kirk Schloegel, George Karypis, and Vipin Kumar 
Affiliation: University of Minnesota, Department of Computer Science and Army HPC Center  
Date: 1997  #97-014  
Note: Submitted to Supercomputing  
Pubnum: Technical Report  
Abstract: Graph partitioning has been shown to be an effective way to divide a large computation over an arbitrary number of processors. A good partitioning can ensure load balance and minimize the communication overhead of the computation by partitioning an irregular mesh into p equal parts while minimizing the number of edges cut by the partition. For a large class of irregular mesh applications, the structure of the graph changes from one phase of the computation to the next. Eventually, as the graph evolves, the adapted mesh has to be repartitioned to ensure good load balance. Failure to do so will lead to higher parallel run time. This repartitioning needs to maintain a low edge-cut in order to minimize communication overhead in the follow-on computation. It also needs to minimize the time for physically migrating data from one processor to another since this time can dominate overall run time. Finally, it must be fast and scalable since it may be necessary to repartition frequently. Partitioning the adapted mesh again from scratch with an existing graph partitioner can be done quickly and will result in a low edge-cut. However, it will lead to an excessive migration of data among processors. In this paper, we present new parallel algorithms for robustly computing reparti-tionings of adaptively refined meshes. These algorithms perform diffusion of vertices in a multilevel framework and minimize data movement without compromising the edge-cut. Furthermore, our parallel repartitioners include parameterized heuristics to specifically optimize edge-cut, total data migration, or the maximum amount of data migrated into and out of any one processor. Our results on a variety of synthetic meshes show that our parallel multilevel diffusion algorithms are highly robust schemes for repartitioning adaptive meshes. The resulting edge-cuts are close to those resulting from partitioning from scratch with a state-of-the-art graph partitioner, while data migration is substantially reduced. Furthermore, repartitioning can be done very fast. Our experiments show that meshes with around eight million vertices can be repartitioned on a 256-processor Cray T3D in only a couple of seconds. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Biswas and R. C. Strawn. </author> <title> A new procedure for dynamic adaption of three-dimensional unstructured grids. </title> <journal> Applied Numerical Mathematics, </journal> <volume> 13 </volume> <pages> 437-452, </pages> <year> 1994. </year>
Reference-contexts: Related papers are available via WWW at URL: http://www.cs.umn.edu/karypis 1 For a large class of irregular grid applications, the computational structure of the problem changes in an incremental fashion from one phase of the computation to another. For example, in adaptive meshes <ref> [1] </ref>, areas of the original graph are selectively coarsened or refined in order to accurately model the dynamic computation. This causes the weights of the vertices and the edges to change.
Reference: [2] <author> Bruce Hendrickson and Robert Leland. </author> <title> A multilevel algorithm for partitioning graphs. </title> <type> Technical Report SAND93-1301, </type> <institution> Sandia National Laboratories, </institution> <year> 1993. </year>
Reference-contexts: Since the weight of any given edge represents the amount of communication required between nodes, minimizing the number of edges cut by the partition tends to minimize the overall amount of communication required by the computation. This problem has been well defined and discussed in previous work <ref> [2, 7] </ref>. fl This work was supported by NSF CCR-9423082, by Army Research Office contract DA/DAAH04-95-1-0538, by Army High Performance Computing Research Center cooperative agreement number DAAH04-95-2-0003/contract number DAAH04-95-C-0008, by the IBM Partnership Award, and by the IBM SUR equipment grant. <p> Local refinement [9, 11] can only provide a limited improvement in the edge-cut of the resulting partition. One promising solution to the problem of edge-cut degradation as the degree of imbalance increases in size and complexity is the use of a multilevel scheme <ref> [2, 4] </ref> that takes the initial location of the vertices into consideration. The multilevel paradigm allows the local refinement to be performed at multiple coarsened versions of the graph, which has been shown to be quite effective in reducing the edge-cut.
Reference: [3] <author> Y. F. Hu and R. J. Blake. </author> <title> An optimal dynamic load balancing algorithm. </title> <type> Technical Report DL-P-95-011, </type> <institution> Daresbury Laboratory, Warrington, UK, </institution> <year> 1995. </year>
Reference-contexts: This multilevel diffusion scheme can move large chunks of vertices at coarser levels, and then achieve better load balance at finer levels. In a multilevel context, a global picture of the graph <ref> [3] </ref> can be used to guide graph balancing while utilizing a multilevel view to guide refinement. We have developed multilevel diffusion schemes that incrementally constructs a new partition of the graph [10]. <p> Note that in this scheme, diffusion is performed using only local information. In the case of directed diffusion, a global picture is used to guide the vertex migration. This global picture is computed by the 2-norm minimization solution described in <ref> [3] </ref>. The result of this computation is a transfer matrix that indicates how much weight needs to be transfered between neighboring partitions. Using this transfer matrix, the directed diffusion scheme works as follows. Again, the boarder vertices are visited in a random order. <p> with the number of processors, and they are able to partition graphs with around eight million vertices in around three seconds. 5 Conclusion and Related Work Walshaw, Cross, and Everett also implemented a parallel partitioner and directed diffusion repartitioner based on an optimization of the Hu and Blake diffusion solver <ref> [3, 12, 11] </ref>. Their algorithms has two distinct phases, called balancing and refinement phase. The first is a balancing phase in which the diffusion solution guides vertex migration in order to balance the graph.
Reference: [4] <author> G. Karypis and V. Kumar. </author> <title> A fast and high quality multilevel scheme for partitioning irregular graphs. </title> <type> Technical Report TR 95-035, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1995. </year> <note> Also available on WWW at URL http://www.cs.umn.edu/karypis. A short version appears in Intl. Conf. on Parallel Processing 1995. </note>
Reference-contexts: Local refinement [9, 11] can only provide a limited improvement in the edge-cut of the resulting partition. One promising solution to the problem of edge-cut degradation as the degree of imbalance increases in size and complexity is the use of a multilevel scheme <ref> [2, 4] </ref> that takes the initial location of the vertices into consideration. The multilevel paradigm allows the local refinement to be performed at multiple coarsened versions of the graph, which has been shown to be quite effective in reducing the edge-cut.
Reference: [5] <author> G. Karypis and V. Kumar. </author> <title> Multilevel k-way partitioning scheme for irregular graphs. </title> <type> Technical Report TR 95-064, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1995. </year> <note> Also available on WWW at URL http://www.cs.umn.edu/karypis. </note>
Reference-contexts: For this refinement phase they use either a single-level refinement scheme (performed on the full graph), or they use a multilevel refinement scheme similar to that described in <ref> [5] </ref>. They report results on a set of small- to medium-size two-dimensional meshes with very moderate imbalance problems (around 10%). In the case of their single-level refinement scheme, they report results in which the TotalV is low and the edge-cut increases only slightly over partitioning from scratch.
Reference: [6] <author> G. Karypis and V. Kumar. </author> <title> Parallel multilevel k-way partitioning scheme for irregular graphs. </title> <type> Technical Report TR 96-036, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1996. </year> <note> Also available on WWW at URL http://www.cs.umn.edu/karypis. A short version appears in Supercomputing 96. </note>
Reference-contexts: Also, since the problem studied in this paper is relevant only in the parallel context, the repartitioning algorithm should be parallelizable. If the adapted graph is partitioned from scratch using a state-of-the-art multilevel graph partitioner such as the one implemented in METIS <ref> [6] </ref>, then it will reasonably optimize criterion 1 and 2. Since a highly parallel formulation of this algorithm exists [6], criterion 4 can also be met to a large extent. <p> If the adapted graph is partitioned from scratch using a state-of-the-art multilevel graph partitioner such as the one implemented in METIS <ref> [6] </ref>, then it will reasonably optimize criterion 1 and 2. Since a highly parallel formulation of this algorithm exists [6], criterion 4 can also be met to a large extent. Partitioning from scratch will, however, result in high vertex migration, as the partitioning does not take the initial location of the vertices into account.
Reference: [7] <author> George Karypis and Vipin Kumar. </author> <title> A coarse-grain parallel multilevel k-way partitioning algorithm. </title> <booktitle> In Proceedings of the eighth SIAM conference on Parallel Processing for Scientific Computing, </booktitle> <year> 1997. </year>
Reference-contexts: Since the weight of any given edge represents the amount of communication required between nodes, minimizing the number of edges cut by the partition tends to minimize the overall amount of communication required by the computation. This problem has been well defined and discussed in previous work <ref> [2, 7] </ref>. fl This work was supported by NSF CCR-9423082, by Army Research Office contract DA/DAAH04-95-1-0538, by Army High Performance Computing Research Center cooperative agreement number DAAH04-95-2-0003/contract number DAAH04-95-C-0008, by the IBM Partnership Award, and by the IBM SUR equipment grant. <p> The matchings computed are restricted to vertices residing on the same processors. By adhering to this restriction, coarsening is inherently very parallel. Otherwise, this phase is identical as described in <ref> [7] </ref>. The parallel formulation of the multilevel diffusion phase depends on whether or not we are using directed or undi-rected diffusion. In the case of directed diffusion, we chose to perform the directed diffusion for the coarsest graph serially. <p> For this reason we use the parallel undirected diffusion algorithm (described in the next paragraph) to balance any minor imbalances. The parallel formulation of the undirected diffusion algorithm is modeled after our coarse-grained parallel multilevel refinement algorithm <ref> [7] </ref>. Each iteration of the parallel multilevel refinement algorithm consists of two sub-phases. During the first sub-phase, vertices are migrated only from lower- to higher-numbered partitions. During the second sub-phase, vertices are migrated from higher- to lower-numbered partitions. <p> Otherwise, our multilevel refinement algorithm is identical to the coarse-grained parallel multilevel refinement algorithm described in <ref> [7] </ref>. In summary, as illustrated in Figure 1, our parallel multilevel diffusion algorithms are made up of three phases, graph coarsening, multilevel diffusion, and coarse-grained multilevel refinement. <p> The rows labeled `Scratch' show similar performance metrics for the scheme in which the adaptive graph is being repartitioned from scratch using the parallel multilevel k-way partitioning algorithm described in <ref> [7] </ref>. Finally, the rows labeled `Imbalance' indicate the load imbalance resulted by our synthetic adaptation scheme for each one of the graph-processor combinations. As you can see, the load imbalance ranges between 1.42 (42%) and 1.52 (52%). <p> In this paper we presented scalable and highly parallel formulations of multilevel diffusion algorithms. Our algorithms are able to quickly repartition graphs corresponding to adaptively refined meshes and obtain partitionings whose quality is comparable to those obtained by the high-quality parallel multilevel k-way partitioning algorithm of METIS <ref> [7] </ref>, while dramatically reducing the amount of data movement required to realize this new partition.
Reference: [8] <author> Leonid Oliker and Rupak Biswas. </author> <title> Efficient load balancing and data remapping for adaptive grid calculations. </title> <type> Technical report, </type> <institution> NASA Ames Research Center, Moffett Field, </institution> <address> CA, </address> <year> 1997. </year>
Reference-contexts: Thus, the repartitioner should attempt to balance the graph with respect to vertex weight while minimizing vertex migration with respect to vertex size. Depending on the representation and storage policy of the data, size and weight may not necessarily be equal. One example of such a situation arises in <ref> [8] </ref>. Let G D .V ; E / be an undirected graph of V vertices and E edges and P be a set of p processors. Let s i represent the cost of movement of vertex v i .
Reference: [9] <author> Chao-Wei Ou and Sanjay Ranka. </author> <title> Parallel incremental graph partitioning using linear programming. </title> <type> Technical report, </type> <institution> Syracuse University, Syracuse, </institution> <address> NY, </address> <year> 1992. </year>
Reference-contexts: Such a method can also be potentially faster than partitioning the graph from scratch. Repartitioning schemes that incrementally modify an existing partition have been quite successful on graphs that are small perturbations of the original graphs <ref> [9, 11] </ref>. For these graphs, such a scheme inherits a good (i.e., low edge-cut), but imbalanced starting point in the initial partition. It then attempts to fix the imbalance of this partition while maintaining its good edge-cut. <p> Thus, even if the disturbance to the initial partition is minimized, the final partition will necessarily end up quite a bit removed from it. Hence, the balancing phase of such a method will increase the edge-cut considerably. Local refinement <ref> [9, 11] </ref> can only provide a limited improvement in the edge-cut of the resulting partition.
Reference: [10] <author> Kirk Schloegel, George Karypis, and Vipin Kumar. </author> <title> Multilevel diffusion schemes for repartitioning of adaptive meshes. </title> <type> Technical Report TR 97-013, </type> <institution> University of Minnesota, Department of Computer Science, </institution> <year> 1997. </year> <note> http://www.cs.umn.edu/ karypis. </note>
Reference-contexts: In a multilevel context, a global picture of the graph [3] can be used to guide graph balancing while utilizing a multilevel view to guide refinement. We have developed multilevel diffusion schemes that incrementally constructs a new partition of the graph <ref> [10] </ref>. These schemes coarsen the graph, begin multilevel diffusion on the coarsest graphs, and then begin multilevel refinement as soon as the partition is sufficiently balanced. By applying diffusion on the coarsest graphs, we speed up the costly diffusion process, since this is done on relatively small graphs. <p> If so, vertices are migrated. These three conditions make up the refinement phase vertex migration criteria. Criterion 1 allows vertices to migrate to their initial partitions (as long as the migration does not increase the edge-cut and worsen the load balance), and therefore, to lower TotalV and possibly MaxV <ref> [10] </ref>. Dynamic suppression of vertices as described in [10] is also utilized during multilevel diffusion to reduce MaxV. Essentially with this variation, the migration of relatively non-dense vertices is suppressed during the balancing phase. The concept of vertex cleanness as described in [10] is incorporated in multilevel refinement in order to <p> Criterion 1 allows vertices to migrate to their initial partitions (as long as the migration does not increase the edge-cut and worsen the load balance), and therefore, to lower TotalV and possibly MaxV <ref> [10] </ref>. Dynamic suppression of vertices as described in [10] is also utilized during multilevel diffusion to reduce MaxV. Essentially with this variation, the migration of relatively non-dense vertices is suppressed during the balancing phase. The concept of vertex cleanness as described in [10] is incorporated in multilevel refinement in order to reduce the TotalV. <p> and therefore, to lower TotalV and possibly MaxV <ref> [10] </ref>. Dynamic suppression of vertices as described in [10] is also utilized during multilevel diffusion to reduce MaxV. Essentially with this variation, the migration of relatively non-dense vertices is suppressed during the balancing phase. The concept of vertex cleanness as described in [10] is incorporated in multilevel refinement in order to reduce the TotalV. That is, only those vertices which have either been displaced in the process of balancing or those which will result in a sufficiently high edge-cut-gain-to-size-ratio are eligible for migration during refinement. <p> A complete description of the scheme and extensive experimental results conducted on a single processor for a variety of adapted meshes are presented in <ref> [10] </ref>. 3 Parallel Multilevel Diffusion Algorithms We have developed parallel versions of the multilevel diffusion algorithms as follows. Vertices are initially assumed to be distributed across p processors. <p> The parallel formulation of the multilevel refinement algorithm is similar to that for undirected diffusion with the exception that vertices are moved according to the refinement phase vertex migration criteria described in Section 2.1. 4 Furthermore, the concept of vertex cleanness as described in <ref> [10] </ref> is also employed in our scheme in order to reduce TotalV. Otherwise, our multilevel refinement algorithm is identical to the coarse-grained parallel multilevel refinement algorithm described in [7].
Reference: [11] <author> C. Walshaw, M. Cross, and M. G. Everett. </author> <title> Dynamic load-balancing for parallel adaptive unstructured meshes. </title> <booktitle> Parallel Processing for Scientific Computing, </booktitle> <year> 1997. </year>
Reference-contexts: Partitioning from scratch will, however, result in high vertex migration, as the partitioning does not take the initial location of the vertices into account. A partitioning method that incrementally constructs a new partition as simply a modification of the input partition (e.g. by diffusion <ref> [11] </ref>) can potentially move a much smaller number of vertices. Such a method can also be potentially faster than partitioning the graph from scratch. Repartitioning schemes that incrementally modify an existing partition have been quite successful on graphs that are small perturbations of the original graphs [9, 11]. <p> Such a method can also be potentially faster than partitioning the graph from scratch. Repartitioning schemes that incrementally modify an existing partition have been quite successful on graphs that are small perturbations of the original graphs <ref> [9, 11] </ref>. For these graphs, such a scheme inherits a good (i.e., low edge-cut), but imbalanced starting point in the initial partition. It then attempts to fix the imbalance of this partition while maintaining its good edge-cut. <p> Thus, even if the disturbance to the initial partition is minimized, the final partition will necessarily end up quite a bit removed from it. Hence, the balancing phase of such a method will increase the edge-cut considerably. Local refinement <ref> [9, 11] </ref> can only provide a limited improvement in the edge-cut of the resulting partition. <p> with the number of processors, and they are able to partition graphs with around eight million vertices in around three seconds. 5 Conclusion and Related Work Walshaw, Cross, and Everett also implemented a parallel partitioner and directed diffusion repartitioner based on an optimization of the Hu and Blake diffusion solver <ref> [3, 12, 11] </ref>. Their algorithms has two distinct phases, called balancing and refinement phase. The first is a balancing phase in which the diffusion solution guides vertex migration in order to balance the graph.

References-found: 11

