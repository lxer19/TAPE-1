URL: http://www.cs.washington.edu/homes/anderson/papers/full.ps
Refering-URL: http://www.cs.washington.edu/homes/anderson/papers.html
Root-URL: 
Email: anderson@cs.washington.edu  
Title: Tree Data Structures for N-Body Simulation  
Author: Richard J. Anderson 
Date: December 30, 1997  
Address: Washington  
Affiliation: Department of Computer Science and Engineering University of  
Abstract: In this paper, we study data structures for use in N-body simulation. We concentrate on the spatial decomposition tree used in particle-cluster force evaluation algorithms such as the Barnes-Hut algorithm. We prove that a k-d tree is asymptotically inferior to a spatially balanced tree. We show that the worst case complexity of the force evaluation algorithm using a k-d tree is fi(n log 3 n log L) compared with fi(n log L) for an oct-tree. (L is the separation ratio of the set of points.) We also investigate improving the constant factor of the algorithm, and present several methods which improve over the standard oct-tree decomposition. Finally, we consider whether or not the bounding box of a point set should be "tight", and show that it is only safe to use tight bounding boxes for binary decompositions. The results are all directly applicable to practical implementations of N -body algorithms.
Abstract-found: 1
Intro-found: 1
Reference: [App85] <author> A. W. Appel. </author> <title> An efficient program for many-body simulation. </title> <journal> SIAM Journal of Scientific and Statistical Computing, </journal> <volume> 6(1) </volume> <pages> 85-103, </pages> <year> 1985. </year>
Reference-contexts: More attention has been paid to the asymptotic performance of the algorithms, and to the accuracy properties of particular codes. A series of papers introduced particle-cluster algorithms in the early to mid eighties <ref> [App85, JP89, BH86] </ref>, with the version developed by Barnes and Hut [BH86] receiving the most attention with respect to implementation. The fastest bounds for the force computation problem are for the Fast Multipole Method of Greengard and Rokhlin [Gre88, GR87, CK95, RT96] which is a cluster-cluster algorithm. <p> K-d trees have been used in a number of N -body implementations, including the early implementation of Appel <ref> [App85] </ref> and in the UW KD-grav code [DS95]. We show that in the worst case, an N -body algorithm using k-d trees is inferior to an algorithm with a spatially balanced decomposition. There is a bad case point set where the points all lie on a line.
Reference: [AS96] <author> R. J. Anderson and S. D. Sandys. </author> <title> An experimental study of tree data structures for N-body simulation. </title> <type> Unpublished Manuscript, </type> <year> 1996. </year>
Reference-contexts: involves a particular cell. (The interaction regions can also be used for an average case analysis with respect to a random set of points [BN95, Sal90].) Experimental results show that the interaction area, or the size of the interaction region is a very good predictor of the algorithm's run time <ref> [BN95, AS96] </ref>. We give a pair of results which suggest that a binary tree requires fewer force evaluations than a quad-tree or an oct-tree for the same set of points.
Reference: [BH86] <author> J. E. Barnes and P. Hut. </author> <title> A hierarchical O(N log N ) force-calculation algorithm. </title> <journal> Nature, </journal> <volume> 324 </volume> <pages> 446-449, </pages> <year> 1986. </year>
Reference-contexts: In this paper we study different tree data structures with the goal of minimizing the number of force evaluations performed during the computation. We concentrate on particle-cluster algorithms, where the data structure is traversed independently for each particle. The Barnes-Hut algorithm <ref> [BH86] </ref> is the standard particle- cluster algorithm now in use. We study issues which relate both to asymptotic performance, 1 and to the constant factors of the run time. Our performance measure is the number of force evaluations performed with respect to a fixed error threshold. <p> More attention has been paid to the asymptotic performance of the algorithms, and to the accuracy properties of particular codes. A series of papers introduced particle-cluster algorithms in the early to mid eighties <ref> [App85, JP89, BH86] </ref>, with the version developed by Barnes and Hut [BH86] receiving the most attention with respect to implementation. The fastest bounds for the force computation problem are for the Fast Multipole Method of Greengard and Rokhlin [Gre88, GR87, CK95, RT96] which is a cluster-cluster algorithm. <p> More attention has been paid to the asymptotic performance of the algorithms, and to the accuracy properties of particular codes. A series of papers introduced particle-cluster algorithms in the early to mid eighties [App85, JP89, BH86], with the version developed by Barnes and Hut <ref> [BH86] </ref> receiving the most attention with respect to implementation. The fastest bounds for the force computation problem are for the Fast Multipole Method of Greengard and Rokhlin [Gre88, GR87, CK95, RT96] which is a cluster-cluster algorithm. Although the algorithm is O (n) time, it is not used in astrophysical research. <p> The division into clusters is based upon a spatial decomposition tree. One version of the particle-cluster algorithm was originally described by Barnes and Hut <ref> [BH86] </ref>. They described the algorithm in terms of an oct-tree, although the definition of the algorithm does not depend upon the particular type of tree. A hierarchical decomposition of a set S can be represented by a tree T .
Reference: [BHE + 94] <author> J. A. Board, Z. S. Hakura, W. D. Elliot, D. C. Gray, W. J. Blanke, and J. F. Leathrum. </author> <title> Scalable implementations of multipole-accelerated algorithms for molecular dynamics. </title> <type> Technical Report 94-002, </type> <institution> Dept. of Electrical Engineering, Duke University, </institution> <year> 1994. </year>
Reference-contexts: However, many of the ideas in Green- gard's algorithm are applicable to the particle-cluster algorithms, and practical N -body codes becoming more "Greengard-like" by using higher-degree series expansions. There are also algorithms that may be viewed as a synthesis of Greengard's algorithm and a particle cluster algorithm <ref> [BHE + 94, BHER94] </ref>. Many of the issues relating to the force evaluation algorithm are orthogonal to the data structure used, so some of the results of this paper may carry over to a larger context.
Reference: [BHER94] <author> J. A. Board, Z. S. Hakura, W. D. Elliot, and W. T. Rankin. </author> <title> Scalable variants of multipole-accelerated algorithms for molecular dynamics applications. </title> <type> Technical Report 94-006, </type> <institution> Dept. of Electrical Engineering, Duke University, </institution> <year> 1994. </year>
Reference-contexts: However, many of the ideas in Green- gard's algorithm are applicable to the particle-cluster algorithms, and practical N -body codes becoming more "Greengard-like" by using higher-degree series expansions. There are also algorithms that may be viewed as a synthesis of Greengard's algorithm and a particle cluster algorithm <ref> [BHE + 94, BHER94] </ref>. Many of the issues relating to the force evaluation algorithm are orthogonal to the data structure used, so some of the results of this paper may carry over to a larger context.
Reference: [BN95] <author> G. Blelloch and G. Narlikar. </author> <title> A practical comparison of N-body algorithms. </title> <type> Unpublished Manuscript, </type> <year> 1995. </year>
Reference-contexts: Many of the issues relating to the force evaluation algorithm are orthogonal to the data structure used, so some of the results of this paper may carry over to a larger context. Papers that have addressed the accuracy of N -body simulations have generally compared different force evaluation strategies <ref> [BN95] </ref> or studied the trade-off between accuracy and run time [SW94]. <p> We can use the interaction region to determine the probability that the evaluation at a random point involves a particular cell. (The interaction regions can also be used for an average case analysis with respect to a random set of points <ref> [BN95, Sal90] </ref>.) Experimental results show that the interaction area, or the size of the interaction region is a very good predictor of the algorithm's run time [BN95, AS96]. <p> involves a particular cell. (The interaction regions can also be used for an average case analysis with respect to a random set of points [BN95, Sal90].) Experimental results show that the interaction area, or the size of the interaction region is a very good predictor of the algorithm's run time <ref> [BN95, AS96] </ref>. We give a pair of results which suggest that a binary tree requires fewer force evaluations than a quad-tree or an oct-tree for the same set of points.
Reference: [CK95] <author> P. B. Callahan and S. R. Kosaraju. </author> <title> A decomposition of multi-dimensional pointsets with applications to k-nearest-neighbors and n-body potential fields. </title> <journal> Journal of the ACM, </journal> <volume> 42(1) </volume> <pages> 67-90, </pages> <year> 1995. </year>
Reference-contexts: The fastest bounds for the force computation problem are for the Fast Multipole Method of Greengard and Rokhlin <ref> [Gre88, GR87, CK95, RT96] </ref> which is a cluster-cluster algorithm. Although the algorithm is O (n) time, it is not used in astrophysical research. This is primarily because the constant factors in the algorithm are very large, although memory is also a problem. <p> A paper by Makino [Mak90] studies the performance of oct-trees versus nearest neighbor trees (a data structure outside of the scope of this current paper.) In terms of data structures, an important related paper is the Fair-Split tree paper by Callahan and Kosaraju <ref> [CK95] </ref>. Although they developed their data structure to get an improved result for cluster-cluster algorithms, it turns out to be very close to the data structure that is advocated in this paper. <p> Using the lemma, the argument of Theorem 5.2 applies. The following lemma is based on a packing lemma for fair-split trees proved by Callahan and Kosaraju <ref> [CK95] </ref>. (We establish the lemma in two dimensions; the generalization to three dimensions is straightforward).
Reference: [Cla83] <author> K. L. Clarkson. </author> <title> Fast algorithms for the all nearest neighbors problem. </title> <booktitle> In 24th Symposium on Foundations of Computer Science, </booktitle> <pages> pages 226-232, </pages> <year> 1983. </year>
Reference-contexts: Some work in mainstream computational geometry also ties in directly with this, in particular work on the all-nearest neighbor problem <ref> [Vai86, Cla83] </ref>. 2 Particle-cluster algorithm The particle-cluster algorithm approximates the force that a set of particles exerts on a single particle by first dividing the set of particles into clusters and then summing the approximate force that each cluster exerts on the particle. <p> This is at the heart of the packing arguments we allude to. The proof is similar to the correctness proofs of several all-nearest neighbor algorithms <ref> [Vai86, Cla83] </ref>. The necessity of accounting for "below evaluations" has been ignored by papers in the physics literature. Theorem 5.2 Let D ave be the average leaf depth of an oct-tree T . The number of force evaluations performed by the particle-cluster algorithm on T is O (nD ave ).
Reference: [DS95] <author> M. Dikaiakos and J. Stadel. </author> <title> A performance study of cosmological simulations on message-passing and shared-memory multiprocessors. </title> <note> This paper is available from http://www-hpcc.astro.washington.edu/, 1995. </note>
Reference-contexts: K-d trees have been used in a number of N -body implementations, including the early implementation of Appel [App85] and in the UW KD-grav code <ref> [DS95] </ref>. We show that in the worst case, an N -body algorithm using k-d trees is inferior to an algorithm with a spatially balanced decomposition. There is a bad case point set where the points all lie on a line.
Reference: [GR87] <author> L. Greengard and V. Rokhlin. </author> <title> A fast algorithm for particle simulations. </title> <journal> Journal of Computational Physics, </journal> <volume> 73 </volume> <pages> 325-348, </pages> <year> 1987. </year>
Reference-contexts: The fastest bounds for the force computation problem are for the Fast Multipole Method of Greengard and Rokhlin <ref> [Gre88, GR87, CK95, RT96] </ref> which is a cluster-cluster algorithm. Although the algorithm is O (n) time, it is not used in astrophysical research. This is primarily because the constant factors in the algorithm are very large, although memory is also a problem.
Reference: [Gre88] <author> L. Greengard. </author> <title> The Rapid Evaluation of Potential Fields in Particle Systems. </title> <publisher> The MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: The fastest bounds for the force computation problem are for the Fast Multipole Method of Greengard and Rokhlin <ref> [Gre88, GR87, CK95, RT96] </ref> which is a cluster-cluster algorithm. Although the algorithm is O (n) time, it is not used in astrophysical research. This is primarily because the constant factors in the algorithm are very large, although memory is also a problem.
Reference: [JP89] <author> J. G. Jernigan and D. H. Porter. </author> <title> A tree code with logarithmic reduction of force terms, hierarchical regularization of all variables and explicit accuracy controls. </title> <journal> The Astrophysical Journal Supplement, </journal> <volume> 71 </volume> <pages> 871-893, </pages> <year> 1989. </year> <month> 21 </month>
Reference-contexts: More attention has been paid to the asymptotic performance of the algorithms, and to the accuracy properties of particular codes. A series of papers introduced particle-cluster algorithms in the early to mid eighties <ref> [App85, JP89, BH86] </ref>, with the version developed by Barnes and Hut [BH86] receiving the most attention with respect to implementation. The fastest bounds for the force computation problem are for the Fast Multipole Method of Greengard and Rokhlin [Gre88, GR87, CK95, RT96] which is a cluster-cluster algorithm.
Reference: [Mak90] <author> J. Makino. </author> <title> Comparison of two different tree algorithms. </title> <journal> The Journal of Compu-tational Physics, </journal> <volume> 88 </volume> <pages> 393-408, </pages> <year> 1990. </year>
Reference-contexts: Papers that have addressed the accuracy of N -body simulations have generally compared different force evaluation strategies [BN95] or studied the trade-off between accuracy and run time [SW94]. A paper by Makino <ref> [Mak90] </ref> studies the performance of oct-trees versus nearest neighbor trees (a data structure outside of the scope of this current paper.) In terms of data structures, an important related paper is the Fair-Split tree paper by Callahan and Kosaraju [CK95].
Reference: [MKL + 96] <author> B. Moore, N. Katz, G. Lake, A. Dressler, and A. Oelmer Jr. </author> <title> Galaxy harassment and the evolution of clusters of galaxies. </title> <journal> Nature, </journal> <volume> 379(6566) </volume> <pages> 613-616, </pages> <year> 1996. </year>
Reference-contexts: Although this is not as bad as the construction used in Theorem 6.6 it is still worse than the spatially balanced decomposition. Significantly, this distribution is similar to ones used in simulations that investigate how the internal structure of a galaxy is influenced by neighboring galaxies <ref> [MKL + 96] </ref>. The main galaxy is modeled at high resolution, and the other galaxies are modeled as single particles, thus the particles near the origin correspond to the main galaxy, and the particles at (i; L) and (L; i) are the other galaxies in the cluster.
Reference: [RT96] <author> J. H. Reif and S. R. Tate. </author> <title> N-body simulation I: Fast algorithms for potential field evaluation and Trummers's problem. </title> <type> Technical report, </type> <institution> University of North Texas, Department of Computer Science, </institution> <year> 1996. </year> <note> Technical Report N-96-002. </note>
Reference-contexts: The fastest bounds for the force computation problem are for the Fast Multipole Method of Greengard and Rokhlin <ref> [Gre88, GR87, CK95, RT96] </ref> which is a cluster-cluster algorithm. Although the algorithm is O (n) time, it is not used in astrophysical research. This is primarily because the constant factors in the algorithm are very large, although memory is also a problem.
Reference: [Sal90] <author> J. K. Salmon. </author> <title> Parallel Hierarchical N-body Methods. </title> <type> PhD thesis, </type> <institution> California Institute of Technology, </institution> <year> 1990. </year>
Reference-contexts: We can use the interaction region to determine the probability that the evaluation at a random point involves a particular cell. (The interaction regions can also be used for an average case analysis with respect to a random set of points <ref> [BN95, Sal90] </ref>.) Experimental results show that the interaction area, or the size of the interaction region is a very good predictor of the algorithm's run time [BN95, AS96].
Reference: [Sam89] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: The parameter controls the accuracy of the simulation. In practice values close to 1.0 are chosen. 4 tree data structures based upon orthogonal decomposition. There are many different meth-ods for constructing an orthogonal decomposition tree <ref> [Sam89] </ref>. We consider three different options that can be applied independently, yielding eight separate tree data structures. The first option is the degree of the decomposition. The natural choices are either a binary decomposition, or a decomposition into orthants (quadrants in 2-d, octants in 3-d).
Reference: [SW94] <author> J. K. Salmon and M. S. Warren. </author> <title> Skeletons from the treecode closet. </title> <journal> Journal of Computational Physics, </journal> <volume> 111 </volume> <pages> 136-155, </pages> <year> 1994. </year>
Reference-contexts: Papers that have addressed the accuracy of N -body simulations have generally compared different force evaluation strategies [BN95] or studied the trade-off between accuracy and run time <ref> [SW94] </ref>. A paper by Makino [Mak90] studies the performance of oct-trees versus nearest neighbor trees (a data structure outside of the scope of this current paper.) In terms of data structures, an important related paper is the Fair-Split tree paper by Callahan and Kosaraju [CK95].
Reference: [Vai86] <author> P. M. Vaidya. </author> <title> An optimal algorithm for the all-nearest-neighbors problem. </title> <booktitle> In 27th Symposium on Foundations of Computer Science, </booktitle> <pages> pages 117-122, </pages> <year> 1986. </year> <month> 22 </month>
Reference-contexts: Some work in mainstream computational geometry also ties in directly with this, in particular work on the all-nearest neighbor problem <ref> [Vai86, Cla83] </ref>. 2 Particle-cluster algorithm The particle-cluster algorithm approximates the force that a set of particles exerts on a single particle by first dividing the set of particles into clusters and then summing the approximate force that each cluster exerts on the particle. <p> This is at the heart of the packing arguments we allude to. The proof is similar to the correctness proofs of several all-nearest neighbor algorithms <ref> [Vai86, Cla83] </ref>. The necessity of accounting for "below evaluations" has been ignored by papers in the physics literature. Theorem 5.2 Let D ave be the average leaf depth of an oct-tree T . The number of force evaluations performed by the particle-cluster algorithm on T is O (nD ave ).
References-found: 19

