URL: http://ballade.cs.ucla.edu:8080/~cong/papers/iccad92.ps.gz
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Title: An Optimal Technology Mapping Algorithm for Delay Optimization in Lookup-Table Based FPGA Designs  
Author: Jason Cong and Yuzheng Ding 
Address: Los Angeles, CA 90024  
Affiliation: Department of Computer Science University of California,  
Abstract: In this paper we present a polynomial time technology mapping algorithm, called Flow-Map, that optimally solves the LUT-based FPGA technology mapping problem for depth minimization for general Boolean networks. This theoretical breakthrough makes a sharp contrast with the fact that conventional technology mapping problem in library-based designs is NP-hard. A key step in Flow-Map is to compute a minimum height K-feasible cut in a network, solved by network flow computation. Our algorithm also effectively minimizes the number of LUTs by maximizing the volume of each cut and by several postprocess-ing operations. We tested the Flow-Map algorithm on a set of benchmarks and achieved reductions on both the network depth and the number of LUTs in mapping solutions as compared with previous algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bhat, N. and D. Hill, </author> <title> ``Routable Technology Mapping for FPGAs,'' </title> <booktitle> First Int'l ACM/SIGDA Workshop on Field Programmable Gate Arrays, </booktitle> <pages> pp. 143-148, </pages> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: The algorithms in the second class emphasize on minimizing the delay of the mapping solutions [2, 6, 14]. The algorithms in the third class maximize the routability of the mapping solutions <ref> [1, 19] </ref>.
Reference: [2] <author> Chen, K. C., J. Cong, Y. Ding, A. B. Kahng, and P. Trajmar, ``DAG-Map: </author> <title> Graph-based FPGA Technology Mapping for Delay Optimization,'' </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <pages> pp. 7-20, </pages> <month> Sep. </month> <year> 1992. </year>
Reference-contexts: The algorithms in the first class emphasize on minimizing the number of LUTs in the mapping solutions [8, 11, 13, 15, 17, 21]. The algorithms in the second class emphasize on minimizing the delay of the mapping solutions <ref> [2, 6, 14] </ref>. The algorithms in the third class maximize the routability of the mapping solutions [1, 19]. <p> Second, if we think of FPGA technology mapping as a process of packing gates in a given network into K-LUTs, then, intuitively, smaller gates will be more easily packed, with less wasted space in each K-LUT. As proposed in <ref> [2, 10, 20] </ref>, we use an algorithm based on the Huffman coding tree construction to decompose each multiple input simple gate into a tree of two-input simple gates. According to the result in [2], such a decomposition procedure increases the network depth by at most a small constant factor. <p> As proposed in [2, 10, 20], we use an algorithm based on the Huffman coding tree construction to decompose each multiple input simple gate into a tree of two-input simple gates. According to the result in <ref> [2] </ref>, such a decomposition procedure increases the network depth by at most a small constant factor. <p> After obtaining a K-LUT mapping solution using Flow-Map algorithm, we want to further reduce the number of K-LUTs used in the mapping solution without increasing the depth. In <ref> [2] </ref>, two depth-preserving operations were developed to minimize the number of K-LUTs in the mapping solutions of DAG-Map. One is called predecessor packing and the other is called gate decomposition. <p> Based on this approximation algorithm to the maximum volume K-feasible cut problem, the flow-pack operation is implemented as a part of postprocessing step of the Flow-Map package. During the postprocessing phase, we first carry out the matching based gate-decomposition operation as described in <ref> [2] </ref>. <p> Therefore, it leads to more substantial reduction of the number of K-LUTs than the predecessor-pack operation defined in <ref> [2] </ref>. Our experimental results show that on average the postprocessing phase reduced the number of K-LUTs in the mapping solution by 13.0%, and the flow-pack operation alone reduced the number of K-LUTs by 11.6%. 5. <p> Experimental Results We have implemented the Flow-Map algorithm and its preprocessing and postprocessing steps and tested them on a set of MCNC benchmark examples. we chose K =5 and compared our results with those produced by previous algorithms including Chortle-d [6], DAG-Map <ref> [2] </ref>, and MIS-pga delay optimization algorithm [14]. Table 1 compares the performance of Flow-Map with Chortle-d and DAG-Map, using the input networks that were used by Chortle-d [6]. <p> The results of MIS-pga (delay) are cited from [14] (since we are unable to run their program directly). We obtain the results of Flow-Map by first synthesizing the original benchmarks using a standard MIS optimization script (used by Chortle-crf [8] and DAG-Map <ref> [2] </ref>) for technology-independent optimization, then applying the Flow-Map algorithm for technology mapping.
Reference: [3] <author> Cong, J. and Y. Ding, </author> <title> ``An Optimal Technology Mapping Algorithm fo Delay Optimization in Lookup-Table Based FPGA Designs,'' </title> <institution> in UCLA Computer Science Department Technical Report CSD-920022, </institution> <month> (May </month> <year> 1992). </year>
Reference-contexts: In the second phase, it generates the K-LUT mapping solution based on the node labels computed in the first phase. Due to the length restriction of the paper, the results in this section and next section are stated without proof. The proofs of these results can be found in <ref> [3] </ref>. 3.1. The Labeling Phase Given a K-bounded Boolean network N , let N v denote the subnetwork consisting of node v and all the predecessors of v . <p> Therefore, the complexity of the labeling phase of our algorithm is O (n 2 ) in practice. In fact, the result in Theorem 1 can be generalized to compute the minimum height K-feasible cut in a general network with arbitrary node labels. Details can be found in <ref> [3] </ref>. 3.2. The Mapping Phase The second phase of our algorithm is to generate the K-LUTs in the optimal mapping solution. Let L be the set of outputs which are to be implemented using K-LUTs. Initially, L contains all the PO nodes. <p> It can be shown that maximizing the volume of a K-feasible cut (X , X dd ) in N t is equivalent to maximizing the volume of the corresponding cut (X , X dd ) in N t <ref> [3] </ref>. Therefore, according to the algorithm presented in the previous section, we want to find a min-cut in N t (i.e. a cut (X , X dd ) with the minimum e (X , X dd )) of the max imum volume. 4 First, we can show the following results. <p> The last K-feasible cut in the sequence is recorded as an approximate solution to the maximum volume K-feasible cut problem. The details of this algorithm can be found in <ref> [3] </ref>. The time complexity of the algorithm was shown to be O (K 3 m ). Based on this approximation algorithm to the maximum volume K-feasible cut problem, the flow-pack operation is implemented as a part of postprocessing step of the Flow-Map package.
Reference: [4] <author> Detjens, E., G. Gannot, R. Rudell, A. Sangiovanni-Vincentelli, and A. Wang, </author> <title> ``Technology Mapping in MIS,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 116-119, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: Our result makes a sharp contrast with the fact that the conventional technology mapping problem in library-based designs is NP-hard for general Boolean networks <ref> [4, 12] </ref>. Due to this inherent difficulty, most conventional technology mapping algorithms decompose the input network into a forest of trees and then map each tree optimally [4, 12]. Such a methodology was also used in some existing FPGA mapping algorithms [7, 8]. <p> result makes a sharp contrast with the fact that the conventional technology mapping problem in library-based designs is NP-hard for general Boolean networks <ref> [4, 12] </ref>. Due to this inherent difficulty, most conventional technology mapping algorithms decompose the input network into a forest of trees and then map each tree optimally [4, 12]. Such a methodology was also used in some existing FPGA mapping algorithms [7, 8]. However, our result shows that optimal solutions can be produced efficiently for general Boolean network in LUT-based FPGA technology mapping for depth minimization. 2.
Reference: [5] <author> Ford, L. R. and D. R. Fulkerson, </author> <title> Flows in Networks, </title> <publisher> Princeton Univ. Press, </publisher> <address> Princeton, N.J. </address> <year> (1962). </year>
Reference-contexts: Fig. 3 (c) shows the resulting N t obtained from N t in Fig. 3 (b). Lemma 3 N t has a K-feasible cut if and only if N t has a cut whose edge cut-size is no more than K . ` According to the Max-flow Min-cut Theorem <ref> [5] </ref>, N t has a cut whose edge cut-size is no more than K if and only if the maximum flow between s and t in N t has value no more than K . We apply the augmenting path algorithm in N t to compute a maximum flow.
Reference: [6] <author> Francis, R. J., J. Rose, and Z. Vranesic, </author> <title> ``Technology Mapping of Lookup Table-Based FPGAs for Performance,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 568-571, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: The algorithms in the first class emphasize on minimizing the number of LUTs in the mapping solutions [8, 11, 13, 15, 17, 21]. The algorithms in the second class emphasize on minimizing the delay of the mapping solutions <ref> [2, 6, 14] </ref>. The algorithms in the third class maximize the routability of the mapping solutions [1, 19]. <p> Experimental Results We have implemented the Flow-Map algorithm and its preprocessing and postprocessing steps and tested them on a set of MCNC benchmark examples. we chose K =5 and compared our results with those produced by previous algorithms including Chortle-d <ref> [6] </ref>, DAG-Map [2], and MIS-pga delay optimization algorithm [14]. Table 1 compares the performance of Flow-Map with Chortle-d and DAG-Map, using the input networks that were used by Chortle-d [6]. <p> set of MCNC benchmark examples. we chose K =5 and compared our results with those produced by previous algorithms including Chortle-d <ref> [6] </ref>, DAG-Map [2], and MIS-pga delay optimization algorithm [14]. Table 1 compares the performance of Flow-Map with Chortle-d and DAG-Map, using the input networks that were used by Chortle-d [6]. Overall, the solutions of Chortle-d used 50.4% more 5-LUTs and had 4.8% larger network depth; the solutions of DAG-Map used 8.6% more 5-LUTs and had 2.4% larger network depth. Flow-Map always results in the mapping solution of the smallest depth, and in most cases uses less number of 5-LUTs.
Reference: [7] <author> Francis, R. J., J. Rose, and Z. Vranesic, </author> <title> ``Technology Mapping for Delay Optimization of Lookup Table-Based FPGAs,'' </title> <booktitle> MCNC Logic Synthesis Workshop, </booktitle> <year> 1991. </year>
Reference-contexts: Due to this inherent difficulty, most conventional technology mapping algorithms decompose the input network into a forest of trees and then map each tree optimally [4, 12]. Such a methodology was also used in some existing FPGA mapping algorithms <ref> [7, 8] </ref>. However, our result shows that optimal solutions can be produced efficiently for general Boolean network in LUT-based FPGA technology mapping for depth minimization. 2.
Reference: [8] <author> Francis, R. J., J. Rose, and Z. Vranesic, ``Chortle-crf: </author> <title> Fast Technology Mapping for Lookup Table-Based FPGAs,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 613-619, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: This paper studies the LUT-based FPGA technology mapping problem for delay optimization. The previous LUT-based FPGA mapping algorithms can be roughly divided into three classes. The algorithms in the first class emphasize on minimizing the number of LUTs in the mapping solutions <ref> [8, 11, 13, 15, 17, 21] </ref>. The algorithms in the second class emphasize on minimizing the delay of the mapping solutions [2, 6, 14]. The algorithms in the third class maximize the routability of the mapping solutions [1, 19]. <p> Due to this inherent difficulty, most conventional technology mapping algorithms decompose the input network into a forest of trees and then map each tree optimally [4, 12]. Such a methodology was also used in some existing FPGA mapping algorithms <ref> [7, 8] </ref>. However, our result shows that optimal solutions can be produced efficiently for general Boolean network in LUT-based FPGA technology mapping for depth minimization. 2. <p> We also compared Flow-Map with MIS-pga (delay) in Table 2. The results of MIS-pga (delay) are cited from [14] (since we are unable to run their program directly). We obtain the results of Flow-Map by first synthesizing the original benchmarks using a standard MIS optimization script (used by Chortle-crf <ref> [8] </ref> and DAG-Map [2]) for technology-independent optimization, then applying the Flow-Map algorithm for technology mapping.
Reference: [9] <author> Hill, D., </author> <title> ``A CAD System for the Design of Field Programmable Gate Arrays,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 187-192, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: 1. Introduction The short design cycle and low manufacturing cost have made FPGA an important technology for VLSI ASIC designs. The LUT-based FPGA is a popular architecture used by several FPGA manufacturers, including Xilinx and AT&T <ref> [9, 22] </ref>. In an LUT-based FPGA chip, the basic programmable logic block is a K-input lookup table (K-LUT) which can implement any Boolean function of up to K variables.
Reference: [10] <author> Hoover, H. J., M. M. Klawe, and N. J. Pippenger, </author> <title> ``Bounding Fan-out in Logic Networks,'' </title> <journal> Journal of Association for Computing Machinery, </journal> <volume> Vol. 31, </volume> <pages> pp. 13-18, </pages> <month> Jan. </month> <year> 1984. </year>
Reference-contexts: Second, if we think of FPGA technology mapping as a process of packing gates in a given network into K-LUTs, then, intuitively, smaller gates will be more easily packed, with less wasted space in each K-LUT. As proposed in <ref> [2, 10, 20] </ref>, we use an algorithm based on the Huffman coding tree construction to decompose each multiple input simple gate into a tree of two-input simple gates. According to the result in [2], such a decomposition procedure increases the network depth by at most a small constant factor.
Reference: [11] <author> Karplus, K., ``Xmap: </author> <title> A Technology Mapper for Table-lookup Field-Programmable Gate Arrays,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 240-243, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: This paper studies the LUT-based FPGA technology mapping problem for delay optimization. The previous LUT-based FPGA mapping algorithms can be roughly divided into three classes. The algorithms in the first class emphasize on minimizing the number of LUTs in the mapping solutions <ref> [8, 11, 13, 15, 17, 21] </ref>. The algorithms in the second class emphasize on minimizing the delay of the mapping solutions [2, 6, 14]. The algorithms in the third class maximize the routability of the mapping solutions [1, 19].
Reference: [12] <author> Keutzer, K., ``DAGON: </author> <title> Technology Binding and Local Optimization by DAG Matching,'' </title> <booktitle> Proc. 24th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 341-347, </pages> <year> 1987. </year>
Reference-contexts: Our result makes a sharp contrast with the fact that the conventional technology mapping problem in library-based designs is NP-hard for general Boolean networks <ref> [4, 12] </ref>. Due to this inherent difficulty, most conventional technology mapping algorithms decompose the input network into a forest of trees and then map each tree optimally [4, 12]. Such a methodology was also used in some existing FPGA mapping algorithms [7, 8]. <p> result makes a sharp contrast with the fact that the conventional technology mapping problem in library-based designs is NP-hard for general Boolean networks <ref> [4, 12] </ref>. Due to this inherent difficulty, most conventional technology mapping algorithms decompose the input network into a forest of trees and then map each tree optimally [4, 12]. Such a methodology was also used in some existing FPGA mapping algorithms [7, 8]. However, our result shows that optimal solutions can be produced efficiently for general Boolean network in LUT-based FPGA technology mapping for depth minimization. 2.
Reference: [13] <author> Murgai, R., Y. Nishizaki, N. Shenay, R. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Logic Synthesis Algorithms for Programmable Gate Arrays,'' </title> <booktitle> Proc. 27th ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 620-625, </pages> <year> 1990. </year>
Reference-contexts: This paper studies the LUT-based FPGA technology mapping problem for delay optimization. The previous LUT-based FPGA mapping algorithms can be roughly divided into three classes. The algorithms in the first class emphasize on minimizing the number of LUTs in the mapping solutions <ref> [8, 11, 13, 15, 17, 21] </ref>. The algorithms in the second class emphasize on minimizing the delay of the mapping solutions [2, 6, 14]. The algorithms in the third class maximize the routability of the mapping solutions [1, 19]. <p> Given a general Boolean network as input, if it is not K-bounded, there are a number of ways to transform it into a K-bounded network. For example, the Roth-Karp decomposition [16] was used in <ref> [13] </ref> to obtain a K-bounded network. In our system, we first transform the given Boolean network into a network of simple gates (i.e.
Reference: [14] <author> Murgai, R., N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Performance Directed Synthesis for Table Look Up Programmable Gate Arrays,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 572-575, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: The algorithms in the first class emphasize on minimizing the number of LUTs in the mapping solutions [8, 11, 13, 15, 17, 21]. The algorithms in the second class emphasize on minimizing the delay of the mapping solutions <ref> [2, 6, 14] </ref>. The algorithms in the third class maximize the routability of the mapping solutions [1, 19]. <p> Experimental Results We have implemented the Flow-Map algorithm and its preprocessing and postprocessing steps and tested them on a set of MCNC benchmark examples. we chose K =5 and compared our results with those produced by previous algorithms including Chortle-d [6], DAG-Map [2], and MIS-pga delay optimization algorithm <ref> [14] </ref>. Table 1 compares the performance of Flow-Map with Chortle-d and DAG-Map, using the input networks that were used by Chortle-d [6]. <p> Flow-Map always results in the mapping solution of the smallest depth, and in most cases uses less number of 5-LUTs. We also compared Flow-Map with MIS-pga (delay) in Table 2. The results of MIS-pga (delay) are cited from <ref> [14] </ref> (since we are unable to run their program directly). We obtain the results of Flow-Map by first synthesizing the original benchmarks using a standard MIS optimization script (used by Chortle-crf [8] and DAG-Map [2]) for technology-independent optimization, then applying the Flow-Map algorithm for technology mapping.
Reference: [15] <author> Murgai, R., N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Improved Logic Synthesis Algorithms for Table Look Up Architectures,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 564-567, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: This paper studies the LUT-based FPGA technology mapping problem for delay optimization. The previous LUT-based FPGA mapping algorithms can be roughly divided into three classes. The algorithms in the first class emphasize on minimizing the number of LUTs in the mapping solutions <ref> [8, 11, 13, 15, 17, 21] </ref>. The algorithms in the second class emphasize on minimizing the delay of the mapping solutions [2, 6, 14]. The algorithms in the third class maximize the routability of the mapping solutions [1, 19].
Reference: [16] <author> Roth, J. P. and R. M. Karp, </author> <title> ``Minimization Over Boolean Graphs,'' </title> <journal> IBM Journal of Research and Development, </journal> <pages> pp. 227-238, </pages> <month> April </month> <year> 1962. </year>
Reference-contexts: An Optimal LUT-Based FPGA Mapping Algo rithm for Depth Minimization Our algorithm is applicable to any K-bounded Boolean network. Given a general Boolean network as input, if it is not K-bounded, there are a number of ways to transform it into a K-bounded network. For example, the Roth-Karp decomposition <ref> [16] </ref> was used in [13] to obtain a K-bounded network. In our system, we first transform the given Boolean network into a network of simple gates (i.e.
Reference: [17] <author> Sawkar, P. and D. Thomas, </author> <title> ``Technology Mapping for Table-Look-Up Based Field Programmable Gate Arrays,'' </title> <booktitle> ACM/SIGDA Workshop on Field Programmable Gate Arrays, </booktitle> <pages> pp. 83-88, </pages> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: This paper studies the LUT-based FPGA technology mapping problem for delay optimization. The previous LUT-based FPGA mapping algorithms can be roughly divided into three classes. The algorithms in the first class emphasize on minimizing the number of LUTs in the mapping solutions <ref> [8, 11, 13, 15, 17, 21] </ref>. The algorithms in the second class emphasize on minimizing the delay of the mapping solutions [2, 6, 14]. The algorithms in the third class maximize the routability of the mapping solutions [1, 19].
Reference: [18] <author> Schlag, M., P. Chan, and J. Kong, </author> <title> ``Empirical Evaluation of Multilevel Logic Minimization Tools for a Field Programmable Gate Array Technology,'' </title> <booktitle> Proc. 1st Int'l Workshop on Field Programmable Logic and Applications, </booktitle> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Therefore, it is much faster than Boolean optimization based algorithms in general. 6. Future Work Currently, we are extending the Flow-Map algorithm to handle more complex delay models (such as the nominal delay model <ref> [18] </ref>, which considers both the level and the number of fanouts of each node in delay computation). We are also studying the trade-off between delay and area in technology mapping for FPGA designs. 7. Acknowledgments We thank J. Rose, R. Francis and R.
Reference: [19] <author> Schlag, M., J. Kong, and P. K. Chan, </author> <title> ``Routability-Driven Technology Mapping for Lookup Table-Based FPGAs,'' </title> <booktitle> Proc. 1992 IEEE International Conference on Computer Design, </booktitle> <pages> pp. 86-90, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: The algorithms in the second class emphasize on minimizing the delay of the mapping solutions [2, 6, 14]. The algorithms in the third class maximize the routability of the mapping solutions <ref> [1, 19] </ref>.
Reference: [20] <author> Wang, A., </author> <title> ``Algorithms for Multi-level Logic Optimization,'' </title> <note> U.C.Berkeley Memorandum No. UCB/ERL M89/50, </note> <month> April </month> <year> 1989. </year>
Reference-contexts: Second, if we think of FPGA technology mapping as a process of packing gates in a given network into K-LUTs, then, intuitively, smaller gates will be more easily packed, with less wasted space in each K-LUT. As proposed in <ref> [2, 10, 20] </ref>, we use an algorithm based on the Huffman coding tree construction to decompose each multiple input simple gate into a tree of two-input simple gates. According to the result in [2], such a decomposition procedure increases the network depth by at most a small constant factor.
Reference: [21] <author> Woo, N.-S., </author> <title> ``A Heuristic Method for FPGA Technology Mapping Based on the Edge Visibility,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 248-251, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: This paper studies the LUT-based FPGA technology mapping problem for delay optimization. The previous LUT-based FPGA mapping algorithms can be roughly divided into three classes. The algorithms in the first class emphasize on minimizing the number of LUTs in the mapping solutions <ref> [8, 11, 13, 15, 17, 21] </ref>. The algorithms in the second class emphasize on minimizing the delay of the mapping solutions [2, 6, 14]. The algorithms in the third class maximize the routability of the mapping solutions [1, 19].
Reference: [22] <author> Xilinx, </author> <title> The Programmable Gate Array Data Book, </title> <address> Xilinx, San Jose, CA (1989). </address>
Reference-contexts: 1. Introduction The short design cycle and low manufacturing cost have made FPGA an important technology for VLSI ASIC designs. The LUT-based FPGA is a popular architecture used by several FPGA manufacturers, including Xilinx and AT&T <ref> [9, 22] </ref>. In an LUT-based FPGA chip, the basic programmable logic block is a K-input lookup table (K-LUT) which can implement any Boolean function of up to K variables.
References-found: 22

