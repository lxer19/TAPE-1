URL: http://seclab.cs.ucdavis.edu/papers/kfl94.ps
Refering-URL: http://seclab.cs.ucdavis.edu/papers.html
Root-URL: http://www.cs.ucdavis.edu
Email: fko, gfink, levittg@cs.ucdavis.edu  
Title: Automated Detection of Vulnerabilities in Privileged Programs by Execution Monitoring  
Author: Calvin Ko George Fink Karl Levitt 
Note: This work is funded in part by the National Security Agency University Research Program under Contract No. DOD-MDA904-93-C4083 and by ARPA under Contract No. USNN00014-94-1-0065. Published in the 1994 Computer Security Application Conference  
Address: Davis, CA 95616  
Affiliation: Department of Computer Science University of California, Davis  
Abstract: We present a method for detecting exploitations of vulnerabilities in privileged programs by monitoring their execution using audit trials, where the monitoring is with respect to specifications of the security-relevant behavior of the programs. Our work is motivated by the intrusion detection paradigm, but is an attempt to avoid ad hoc approaches to codifying misuse behavior. Our approach is based on the observation that although privileged programs can be exploited (due to errors) to cause security compromise in systems because of the privileges accorded to them, the intended behavior of privileged programs is, of course, limited and benign. The key, then is to specify the intended behavior (i.e., the program policy) and to detect any action by privileged program that is outside the intended behavior and that imperils security. We describe a program policy specification language, which is based on simple predicate logic and regular expressions. In addition, we present specifications of privileged programs in Unix, and a prototype execution monitor for analyzing audit trails with respect to these specifications. The program policies are surprisingly concise and clear, and in addition, capable of detecting exploitations of known vulnerabilities in these programs. Although our work has been motivated by the known vulnerabilities in Unix, we believe that by tightly restricting the behavior of all privileged programs, exploitations of unknown vulnerabilities can be detected. As a check on the specifications, work is in progress on verifying them with respect to an abstract security policy. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Private communications with tsutomu shimomura. </institution>
Reference-contexts: To distinguish the client and server, we use rdist [s] to denote the server. rdist contains a vulnerability which lets a user (unprivileged) in the system change the permission mode of any file <ref> [1] </ref>. It has been used by attackers to set the setuid bit of a system shell (e.g., /bin/sh). The vulnerability relates to the way that rdist [s] updates a file.
Reference: [2] <author> B. So B. P. Miller, L. Fredriksen. </author> <title> An empirical study of the reliability of unix utilities. </title> <journal> Communications of the ACM, </journal> <volume> 33(12), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: These programs run with high privileges that allow them to bypass the kernel protection mechanism, in effect violating the system policy. In principle, they are designed and trusted not to imperil the security of the system, but due to errors, they can be used to bypass security safeguards <ref> [2, 21] </ref>. For example, during its testing, a backdoor was inadvertently inserted into the BSD sendmail program, enabling users to obtain root privileges.
Reference: [3] <author> S. M. Bellovin. </author> <title> There be dragons. </title> <booktitle> Proceedings of 1992 USENIX Security Symposium, </booktitle> <month> September </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Computer systems are vulnerable to attacks. Despite the best effort to uncover and remove security errors, vulnerabilities in computer systems still exist, enabling outside attackers to gain entry to systems and inside attackers to exploit their privileges <ref> [3, 4] </ref>. Vulnerabilities in privileged programs (e.g., setuid root programs in Unix, such as rdist, sendmail, and fingerd) have been one of the major techniques for attackers to obtain necessary privileges to accomplish their missions.
Reference: [4] <author> B. Cheswick. </author> <title> An evening with berferd: In which a cracker is lured, </title> <booktitle> endured, and studied. Proceedings of the Winter USENIX Conference, </booktitle> <month> January </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Computer systems are vulnerable to attacks. Despite the best effort to uncover and remove security errors, vulnerabilities in computer systems still exist, enabling outside attackers to gain entry to systems and inside attackers to exploit their privileges <ref> [3, 4] </ref>. Vulnerabilities in privileged programs (e.g., setuid root programs in Unix, such as rdist, sendmail, and fingerd) have been one of the major techniques for attackers to obtain necessary privileges to accomplish their missions.
Reference: [5] <author> D. Clark and D. Wilson. </author> <title> A comparision of commercial and military computer secruity policies. </title> <booktitle> Proceedings of the 1987 IEEE Symposium on Research in Security and Privacy, </booktitle> <month> April </month> <year> 1987. </year>
Reference-contexts: The set of allowed accesses for an execution instance of a privileged program is a function of the user who invoked the program. More precisely, we consider a subject to be the pair (user, privileged program). The idea is similar to the integrity policy of Clark and Wil-son <ref> [5] </ref> in which high integrity data can only be accessed by authorized users using a particular program (Transformation Procedure). The concept of a user or a process as a subject in an operating system is well understood. Here, we employ the pair (user, program) as a subject.
Reference: [6] <author> D. Denning. </author> <title> An intrusion detection model. </title> <booktitle> Proceedings of the 1986 IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 118-131, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Although the specifications are written with the knowledge of the vulnerabilities, we strongly believe that unknown vulnerabilities in privileged programs can also be detected by our method. Our approach is a variant of intrusion detection <ref> [6] </ref>, wherein audit trails are analyzed in real time to detect ongoing attacks. Currently, intrusion detection employs statistical modeling of normal (user) behavior [6, 22, 17] and rule-based modeling of suspicious user behavior [10, 18, 16]. <p> Our approach is a variant of intrusion detection [6], wherein audit trails are analyzed in real time to detect ongoing attacks. Currently, intrusion detection employs statistical modeling of normal (user) behavior <ref> [6, 22, 17] </ref> and rule-based modeling of suspicious user behavior [10, 18, 16]. For the purpose of intrusion detection, user behavior is considered suspicious if it bears similarity to known attacks or known attack methods, or is in direct violation of the system policy.
Reference: [7] <author> M. W. Eichin and J. A. Rochlis. </author> <title> With microscope and tweezers: An analysis of the internet virus of novermber 1988. </title> <booktitle> Proceedings of the 1989 IEEE Symposium on Research in Security and Privacy, </booktitle> <month> April </month> <year> 1989. </year>
Reference-contexts: As another example, the finger daemon program neglects to limit the size of a input string, enabling an attacker to overflow its buffer to obtain root access in the host providing the finger service. <ref> [7, 19] </ref>. Often, such errors are subtle, and the exploitation involves multiple processes interacting in unexpected ways. Therefore, these errors are often not detected during testing and not discovered until long after system releases. In this paper, we discuss a technique for detecting exploitations of vulnerabilities in privileged programs.
Reference: [8] <author> G. Fink, C. Ko, M. Archer, and K. Levitt. </author> <title> Toward a property-based testing enviornment with applications to security critical software. </title> <booktitle> Irvine Software Symposium, </booktitle> <year> 1994. </year>
Reference-contexts: Apart from monitoring the execution of privileged programs, the approach of software testing is proposed to detect flaws in the implementation of privileged programs. Property-based testing <ref> [8, 9] </ref> employs security specifications (similar to our specifications for privileged programs) as the basis for automated static and dynamic testing of privileged programs from their source code.
Reference: [9] <author> G. Fink and K. Levitt. </author> <title> Property-based testing for security critical software. </title> <booktitle> Proceedings of the 10th Computer Security Application Conference, </booktitle> <year> 1994. </year>
Reference-contexts: Apart from monitoring the execution of privileged programs, the approach of software testing is proposed to detect flaws in the implementation of privileged programs. Property-based testing <ref> [8, 9] </ref> employs security specifications (similar to our specifications for privileged programs) as the basis for automated static and dynamic testing of privileged programs from their source code.
Reference: [10] <author> K. Ilgun. </author> <title> A real-time intrusion detection system for unix. </title> <booktitle> Proceedings of the 1993 IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 16-28, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Our approach is a variant of intrusion detection [6], wherein audit trails are analyzed in real time to detect ongoing attacks. Currently, intrusion detection employs statistical modeling of normal (user) behavior [6, 22, 17] and rule-based modeling of suspicious user behavior <ref> [10, 18, 16] </ref>. For the purpose of intrusion detection, user behavior is considered suspicious if it bears similarity to known attacks or known attack methods, or is in direct violation of the system policy.
Reference: [11] <author> M. D. Schroeder J. D. </author> <title> Saltzer. </title> <booktitle> The protection of information in computer systems. Proceedings of the IEEE, </booktitle> <volume> 63(9), </volume> <month> March </month> <year> 1975. </year>
Reference-contexts: To instantiate a policy, one can run the policy and the symbol definitions through a macro preprocessor. 4.3 Reasoning about the specifications Our goal is to write specifications for privileged programs, having each specification reflect the "least privilege principle" <ref> [11] </ref> to restrict the access rights of these programs. There are two important questions related to our approach. <p> Our work can also be the basis for a misuse detector in an intrusion detection system, detecting "misuses" that exploit vulnerabilities in privileged programs. Conceptually, our approach uses detection as a mean to enforce the "least privilege principle" <ref> [11] </ref>. We believe it is the first attempt to detecting attacks by identifying deterministically the positive behavior of objects (programs). We find that our approach works well on most of the privileged program in Unix, except for some authentication programs (e.g., login, rlogin).
Reference: [12] <author> P. A. Karger. </author> <title> Limiting the damage potential of discretionary trojan horse. </title> <booktitle> Proceedings of the 1987 IEEE Symposium on Research in Security and Privacy, </booktitle> <month> April </month> <year> 1987. </year>
Reference-contexts: PROGRAM sendmail (U) read (X) :- worldreadable (X); write (X) :- inside (X, mailboxdir); write (X) :- inside (X, mailspooldir); write ("/etc/sendmail."+"[".]*"); bind (mailport); exec ("/bin/mail"); exec (root_mail_handler) :- U.uid = 0; END 7 Related Work Similar approaches to specifying the access capabilities of programs have been proposed by Karger <ref> [12] </ref>, King [13], and Lai [15]. Karger attempted to use a table-driven translation mechanism to deduce the set of files which will be accessed by a program (e.g., abc.obj, abc.exe for a fortran compiler). The file access policy is enforced with a name checking subsystem.
Reference: [13] <author> M. M. King. </author> <title> Identifying and controlling undersirable program behaviors. </title> <booktitle> Proceedings of the 14th National Computer Security Conference, </booktitle> <year> 1992. </year>
Reference-contexts: (U) read (X) :- worldreadable (X); write (X) :- inside (X, mailboxdir); write (X) :- inside (X, mailspooldir); write ("/etc/sendmail."+"[".]*"); bind (mailport); exec ("/bin/mail"); exec (root_mail_handler) :- U.uid = 0; END 7 Related Work Similar approaches to specifying the access capabilities of programs have been proposed by Karger [12], King <ref> [13] </ref>, and Lai [15]. Karger attempted to use a table-driven translation mechanism to deduce the set of files which will be accessed by a program (e.g., abc.obj, abc.exe for a fortran compiler). The file access policy is enforced with a name checking subsystem. <p> Instead of using a file translation scheme, Lai proposed a data structure called Valid Access List (VAL) to hold the set of files accessible by an untrusted process. He describes how to extend the operating system kernel to enforce the file access policy. In <ref> [13] </ref>, King used a regular-expression-based language to describe the set of objects each operation can access. Instead of a dynamic technique, static program analysis is used to check whether a program conforms to the policy.
Reference: [14] <author> C. Ko and K. Levitt. </author> <title> Specifying and monitoring privileged program behavior. </title> <type> Technical report, </type> <institution> University of Califor-nia, Davis, </institution> <year> 1994. </year> <note> (in preparation). </note>
Reference-contexts: Furthermore, the specification should be sufficiently formal to allow its verification with respect to an overall system policy. We describe the policy specification language informally and primarily through examples. A more detail description of the syntax and semantics of the language is in <ref> [14] </ref> Our language is based on predicate logic and regular expressions. The alphabet of the specification language is derived from the system to be modeled. Of particular interest is the set of operations O (e.g., read, write, exec) and their parameters.
Reference: [15] <author> N. Lai and T. E. Gray. </author> <title> Strengthening discretionary access controls to inhibit trojan horses and computer viruses. </title> <booktitle> 1988 USENIX Summer Symposium, </booktitle> <month> June </month> <year> 1988. </year>
Reference-contexts: :- worldreadable (X); write (X) :- inside (X, mailboxdir); write (X) :- inside (X, mailspooldir); write ("/etc/sendmail."+"[".]*"); bind (mailport); exec ("/bin/mail"); exec (root_mail_handler) :- U.uid = 0; END 7 Related Work Similar approaches to specifying the access capabilities of programs have been proposed by Karger [12], King [13], and Lai <ref> [15] </ref>. Karger attempted to use a table-driven translation mechanism to deduce the set of files which will be accessed by a program (e.g., abc.obj, abc.exe for a fortran compiler). The file access policy is enforced with a name checking subsystem.
Reference: [16] <author> T.F. Lunt, A. Tamaru, and F. Gilham. </author> <title> A real-time intrusion-detection expert system (ides). </title> <type> Technical Report Project 6784, </type> <institution> SRI, </institution> <address> Menlo Park, </address> <month> Feburary </month> <year> 1992. </year>
Reference-contexts: Our approach is a variant of intrusion detection [6], wherein audit trails are analyzed in real time to detect ongoing attacks. Currently, intrusion detection employs statistical modeling of normal (user) behavior [6, 22, 17] and rule-based modeling of suspicious user behavior <ref> [10, 18, 16] </ref>. For the purpose of intrusion detection, user behavior is considered suspicious if it bears similarity to known attacks or known attack methods, or is in direct violation of the system policy. <p> For future work, we see an immediate application of our approach to intrusion detection systems (e.g., NIDES <ref> [16] </ref>, DIDS [18]). In addition, our basic approach of detecting "misuses" of objects (in this case: privileged programs) by specifying the positive behavior should also be applied to other system components such as DNS, NFS, and routers.
Reference: [17] <author> S.E. Smaha. Haystack: </author> <title> An intrusion detection system. </title> <booktitle> Proceedings of the 4th Computer Security Application Conference, </booktitle> <month> October </month> <year> 1988. </year>
Reference-contexts: Our approach is a variant of intrusion detection [6], wherein audit trails are analyzed in real time to detect ongoing attacks. Currently, intrusion detection employs statistical modeling of normal (user) behavior <ref> [6, 22, 17] </ref> and rule-based modeling of suspicious user behavior [10, 18, 16]. For the purpose of intrusion detection, user behavior is considered suspicious if it bears similarity to known attacks or known attack methods, or is in direct violation of the system policy.
Reference: [18] <author> S.R. Snapp and et. al. </author> <title> Dids motivation, architecture, and an early prototype. </title> <booktitle> Proceedings of the 14th National Computer Security Conference, </booktitle> <pages> pages 167-176, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Our approach is a variant of intrusion detection [6], wherein audit trails are analyzed in real time to detect ongoing attacks. Currently, intrusion detection employs statistical modeling of normal (user) behavior [6, 22, 17] and rule-based modeling of suspicious user behavior <ref> [10, 18, 16] </ref>. For the purpose of intrusion detection, user behavior is considered suspicious if it bears similarity to known attacks or known attack methods, or is in direct violation of the system policy. <p> For future work, we see an immediate application of our approach to intrusion detection systems (e.g., NIDES [16], DIDS <ref> [18] </ref>). In addition, our basic approach of detecting "misuses" of objects (in this case: privileged programs) by specifying the positive behavior should also be applied to other system components such as DNS, NFS, and routers.
Reference: [19] <author> E. H. Spafford. </author> <title> The internet worm program: An analysis. </title> <booktitle> ACM SIGCOM, </booktitle> <month> January </month> <year> 1989. </year>
Reference-contexts: As another example, the finger daemon program neglects to limit the size of a input string, enabling an attacker to overflow its buffer to obtain root access in the host providing the finger service. <ref> [7, 19] </ref>. Often, such errors are subtle, and the exploitation involves multiple processes interacting in unexpected ways. Therefore, these errors are often not detected during testing and not discovered until long after system releases. In this paper, we discuss a technique for detecting exploitations of vulnerabilities in privileged programs.
Reference: [20] <author> Sun Microsystem. </author> <title> Man Pages: Rdist remote file distribution program. </title>
Reference-contexts: Section 7 is related work, and Section 8 is our conclusions and recommendations for future work. 2 Examples This section presents informal descriptions of a few attacks that exploit vulnerabilities in Unix privileged programs. The first program we describe is rdist 1 (Remote File Distribute Program) <ref> [20] </ref>, which is used for maintaining consistency of files on multiple hosts in a network. The single executable actually contains the client and the server. rdist is normally invoked by a user in a master host to distribute copies of files to remote hosts.
Reference: [21] <author> Sun Microsystems. </author> <title> Sun Security Bulletin #122 - 126. </title>
Reference-contexts: These programs run with high privileges that allow them to bypass the kernel protection mechanism, in effect violating the system policy. In principle, they are designed and trusted not to imperil the security of the system, but due to errors, they can be used to bypass security safeguards <ref> [2, 21] </ref>. For example, during its testing, a backdoor was inadvertently inserted into the BSD sendmail program, enabling users to obtain root privileges.
Reference: [22] <author> H. S. Vaccaro and G. E. Liepins. </author> <title> Detection of anomalous computer session activity. </title> <booktitle> Proceedings of the 1989 IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 280-289, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Our approach is a variant of intrusion detection [6], wherein audit trails are analyzed in real time to detect ongoing attacks. Currently, intrusion detection employs statistical modeling of normal (user) behavior <ref> [6, 22, 17] </ref> and rule-based modeling of suspicious user behavior [10, 18, 16]. For the purpose of intrusion detection, user behavior is considered suspicious if it bears similarity to known attacks or known attack methods, or is in direct violation of the system policy.
References-found: 22

