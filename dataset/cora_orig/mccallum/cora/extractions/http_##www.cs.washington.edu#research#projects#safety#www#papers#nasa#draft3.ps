URL: http://www.cs.washington.edu/research/projects/safety/www/papers/nasa/draft3.ps
Refering-URL: http://www.cs.washington.edu/homes/vivek/pubs.html
Root-URL: 
Title: A CAD Environment for Safety-Critical Software  
Author: Nancy Leveson, Ken Bauer, Kurt Partridge, Jon Reese, 
Date: July 31, 1995  
Affiliation: University of Washington  University of Washington Mats Heimdahl, Michigan State University Wayne Ohlrich, University of Washington  University of Washington Vivek Ratan, University of Washington  University of California Irvine  
Abstract: The goal of the University of Washington Safety-Critical Systems Project is to develop a theoretical foundation for software safety and to build a methodology upon that foundation. This paper describes the methodology and a set of safety analysis techniques (and prototype tools) to support it. The prototype tools are being developed in order to evaluate the techniques. To ensure that the procedures scale up to realistic systems, the tools and techniques are being evaluated on real systems, including TCAS II (Traffic Alert and Collision Avoidance System), an airborne collision avoidance system required on most aircraft that fly in U.S. airspace. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Susan Brilliant, John C. Knight, and Nancy G. Leveson. </author> <title> The consistent comparison problem in N-version programming. </title> <journal> IEEE Transations on Software Engineering, </journal> <volume> SE-15(11), </volume> <month> November </month> <year> 1989. </year>
Reference-contexts: This work has resulted in methods for software hazard analysis (identifying software hazards using models of the system) [20], analysis and review criteria for real-time software requirements specifications [7], evaluation of current fault-tolerance methods <ref> [1, 2, 8, 14, 25] </ref> along with proposals for software design to enhance safety [10, 12, 18, 19], and safety verification techniques [15, 11, 16]. Some of the techniques that have evolved from this research are being used on industrial projects around the world.
Reference: [2] <author> Susan Brilliant, John C. Knight, and Nancy G. Leveson. </author> <title> Analysis of faults in an N-version software experiment. </title> <journal> IEEE Transations on Software Engineering, </journal> <volume> SE-16(2), </volume> <month> February </month> <year> 1990. </year>
Reference-contexts: This work has resulted in methods for software hazard analysis (identifying software hazards using models of the system) [20], analysis and review criteria for real-time software requirements specifications [7], evaluation of current fault-tolerance methods <ref> [1, 2, 8, 14, 25] </ref> along with proposals for software design to enhance safety [10, 12, 18, 19], and safety verification techniques [15, 11, 16]. Some of the techniques that have evolved from this research are being used on industrial projects around the world.
Reference: [3] <author> David Harel. Statecharts: </author> <title> A Visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8 </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: A complete description of RSML can be found in [17]. In this paper, we only pro-vide a short overview. RSML uses some of the features introduced in the Statecharts formalism <ref> [3] </ref>. RSML and Statecharts extend finite state machines with hierarchies of states, parallelism, and conventions that reduce the number of states and transitions needed to define a state machine. Figure 3 shows a part of the RSML model for TCAS II.
Reference: [4] <author> Mats. P.E. Heimdahl. </author> <title> Experiences and Lessons from the Analysis of TCAS II. </title> <type> Technical Report Technical Report CPS-95-25, </type> <institution> Michigan State University, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: Compositional properties of the RSML semantics allow the specification to be analyzed in small pieces and the analysis results to be combined into a statement about the complete specification <ref> [4] </ref>. This compositionality allows incremental analysis of the requirements, that is, the different pieces of the model can be analyzed as they are completed and the results combined at a later time. <p> Because the current implementation of our tool represents and/or tables symbolically, the analysis will find all potential errors but may generate spurious error reports. The main source of these spurious reports is the use of arithmetic and function references in the predicate definitions <ref> [4] </ref>. Our tool is currently being refined to correct this problem.
Reference: [5] <author> Mats P.E. Heimdahl and Nancy G. Leveson. </author> <title> Completeness and consistency checking of software requirements. </title> <booktitle> In Proceedings of the International Conference on Software Engineering, </booktitle> <address> Los Alamitos, California, April 1995. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: The Consistency and Completeness Analysis tool automatically identifies inconsistencies and incompleteness in an RSML specification <ref> [5] </ref>. Consistency checking identifies transitions with overlapping guarding conditions and reports them to the analyst while completeness checking identifies all conditions for which no transition has been specified.
Reference: [6] <author> Daniel Hernandez. </author> <title> Reasoning with qualitative representations: Exploiting the structure of space. </title> <booktitle> In Int. Workshop on Qualitative Reasoning and Decision Technologies, </booktitle> <address> Barcelona, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Both techniques are based on the underlying system theory that considers accidents to be the result of deviations in system variables. In order to reason about the effects of deviations, the analysis borrows from a relatively recent area of research commonly called "qualitative mathematics" <ref> [9, 6] </ref>, which operates on categories of numbers rather than the numbers themselves. Reese has developed a "calculus of deviations" and a causality diagram to serve as foundations for a forward search algorithm. Nodes in the causality diagram correspond to system variables in the specification.
Reference: [7] <author> Matthew S. Jaffe and Nancy G. Leveson. </author> <title> Completeness, robustness, and safety in real-time software requirements specification. </title> <booktitle> In Proceedings of the Tenth International Conference on Software Engineering, </booktitle> <pages> pages 302-311, </pages> <address> Pittsburgh, Pennsylvania, </address> <month> May </month> <year> 1989. </year> <note> IEEE. </note>
Reference-contexts: This work has resulted in methods for software hazard analysis (identifying software hazards using models of the system) [20], analysis and review criteria for real-time software requirements specifications <ref> [7] </ref>, evaluation of current fault-tolerance methods [1, 2, 8, 14, 25] along with proposals for software design to enhance safety [10, 12, 18, 19], and safety verification techniques [15, 11, 16]. Some of the techniques that have evolved from this research are being used on industrial projects around the world. <p> plays such an important role in accidents, we first identified a set of criteria for evaluating requirements completeness using our model by associating each part of a basic control loop with the RSM and then defining semantic completeness criteria and heuristics in terms of the parts of the state-machine model <ref> [7] </ref>. The RSM is defined as a seven-tuple (, Q, q 0 , P t , P o , fl, ffi) where: * is the set of input and output variables used by the controller software. Criteria here ensure that all information from the sensors is used by the controller.
Reference: [8] <author> John C. Knight and Nancy G. Leveson. </author> <title> An experimental evaluation of the assumption of independence in multi-version programming. </title> <journal> IEEE Transations on Software Engineering, </journal> <volume> SE-12(1):96-109, </volume> <month> January </month> <year> 1986. </year>
Reference-contexts: This work has resulted in methods for software hazard analysis (identifying software hazards using models of the system) [20], analysis and review criteria for real-time software requirements specifications [7], evaluation of current fault-tolerance methods <ref> [1, 2, 8, 14, 25] </ref> along with proposals for software design to enhance safety [10, 12, 18, 19], and safety verification techniques [15, 11, 16]. Some of the techniques that have evolved from this research are being used on industrial projects around the world.
Reference: [9] <author> B.J. Kuipers. </author> <title> Reasoning with qualitative models. </title> <journal> Artificial Intelligence, </journal> <volume> 59 </volume> <pages> 125-132, </pages> <month> August </month> <year> 1986. </year> <month> 16 </month>
Reference-contexts: Both techniques are based on the underlying system theory that considers accidents to be the result of deviations in system variables. In order to reason about the effects of deviations, the analysis borrows from a relatively recent area of research commonly called "qualitative mathematics" <ref> [9, 6] </ref>, which operates on categories of numbers rather than the numbers themselves. Reese has developed a "calculus of deviations" and a causality diagram to serve as foundations for a forward search algorithm. Nodes in the causality diagram correspond to system variables in the specification.
Reference: [10] <author> Nancy G. Leveson. </author> <title> Software fault tolerance: The case for forward recovery. </title> <booktitle> In Proceedings of the AIAA Conference on Computers in Aerospace, </booktitle> <address> Hartford, Connecticut, </address> <year> 1983. </year> <pages> AIAA. </pages>
Reference-contexts: This work has resulted in methods for software hazard analysis (identifying software hazards using models of the system) [20], analysis and review criteria for real-time software requirements specifications [7], evaluation of current fault-tolerance methods [1, 2, 8, 14, 25] along with proposals for software design to enhance safety <ref> [10, 12, 18, 19] </ref>, and safety verification techniques [15, 11, 16]. Some of the techniques that have evolved from this research are being used on industrial projects around the world.
Reference: [11] <author> Nancy G. Leveson. </author> <title> Verification of safety. </title> <booktitle> In Proceedings Third International Workshop on Achieving Safe Real Time Systems, </booktitle> <address> Queen's College, Cambridge, United Kingdom, </address> <month> September </month> <year> 1983. </year>
Reference-contexts: for software hazard analysis (identifying software hazards using models of the system) [20], analysis and review criteria for real-time software requirements specifications [7], evaluation of current fault-tolerance methods [1, 2, 8, 14, 25] along with proposals for software design to enhance safety [10, 12, 18, 19], and safety verification techniques <ref> [15, 11, 16] </ref>. Some of the techniques that have evolved from this research are being used on industrial projects around the world.
Reference: [12] <author> Nancy G. Leveson. </author> <title> Software safety: Why, what, and how. </title> <journal> ACM Computing Surveys, </journal> <volume> 18(2) </volume> <pages> 125-163, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: This work has resulted in methods for software hazard analysis (identifying software hazards using models of the system) [20], analysis and review criteria for real-time software requirements specifications [7], evaluation of current fault-tolerance methods [1, 2, 8, 14, 25] along with proposals for software design to enhance safety <ref> [10, 12, 18, 19] </ref>, and safety verification techniques [15, 11, 16]. Some of the techniques that have evolved from this research are being used on industrial projects around the world.
Reference: [13] <author> Nancy G. Leveson. Safeware: </author> <title> System Safety and Computers. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1995. </year>
Reference-contexts: However, we have refined the early models and approaches as we have come to understand the problems better. We are ready to take what has been learned and design a consistent, integrated approach to ensuring software safety. Such an approach, called Safeware, has been outlined by Leveson in <ref> [13] </ref>. The 2 basic methodology involves applying software hazard analysis and hazard control procedures throughout software development, based on the identified system hazards. These efforts are closely tied to the system level hazard analysis and control.
Reference: [14] <author> Nancy G. Leveson, Stephen S. Cha, John C. Knight, and T.J. Shimeall. </author> <title> The use of self checks and voting in software error detection: An empirical study. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-16(4), </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: This work has resulted in methods for software hazard analysis (identifying software hazards using models of the system) [20], analysis and review criteria for real-time software requirements specifications [7], evaluation of current fault-tolerance methods <ref> [1, 2, 8, 14, 25] </ref> along with proposals for software design to enhance safety [10, 12, 18, 19], and safety verification techniques [15, 11, 16]. Some of the techniques that have evolved from this research are being used on industrial projects around the world.
Reference: [15] <author> Nancy G. Leveson, Stephen S. Cha, and Timothy J. Shimeall. </author> <title> Safety verification of Ada programs using software fault trees. </title> <journal> IEEE Software, </journal> <volume> 8(7) </volume> <pages> 48-59, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: for software hazard analysis (identifying software hazards using models of the system) [20], analysis and review criteria for real-time software requirements specifications [7], evaluation of current fault-tolerance methods [1, 2, 8, 14, 25] along with proposals for software design to enhance safety [10, 12, 18, 19], and safety verification techniques <ref> [15, 11, 16] </ref>. Some of the techniques that have evolved from this research are being used on industrial projects around the world.
Reference: [16] <author> Nancy G. Leveson and Peter. R. Harvey. </author> <title> Analyzing software safety. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-9(5):569-579, </volume> <month> September </month> <year> 1983. </year>
Reference-contexts: for software hazard analysis (identifying software hazards using models of the system) [20], analysis and review criteria for real-time software requirements specifications [7], evaluation of current fault-tolerance methods [1, 2, 8, 14, 25] along with proposals for software design to enhance safety [10, 12, 18, 19], and safety verification techniques <ref> [15, 11, 16] </ref>. Some of the techniques that have evolved from this research are being used on industrial projects around the world.
Reference: [17] <author> Nancy G. Leveson, Mats P.E. Heimdahl, Holly Hildreth, and Jon D. Reese. </author> <title> Requirements specification for process-control systems. </title> <journal> IEEE Transations on Software Engineering, </journal> <volume> SE-20(9), </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: This project was such a success that the FAA adopted our specification as the official system requirements specification for TCAS II <ref> [17] </ref>. A complete description of RSML can be found in [17]. In this paper, we only pro-vide a short overview. RSML uses some of the features introduced in the Statecharts formalism [3]. <p> This project was such a success that the FAA adopted our specification as the official system requirements specification for TCAS II <ref> [17] </ref>. A complete description of RSML can be found in [17]. In this paper, we only pro-vide a short overview. RSML uses some of the features introduced in the Statecharts formalism [3]. RSML and Statecharts extend finite state machines with hierarchies of states, parallelism, and conventions that reduce the number of states and transitions needed to define a state machine.
Reference: [18] <author> Nancy G. Leveson and Timothy J. Shimeall. </author> <title> Safety assertions for process control systems. </title> <booktitle> In Proceedings 13th International Symposium on Fault Tolerant Computing, </booktitle> <address> Milan, </address> <month> July </month> <year> 1983. </year> <note> IEEE. </note>
Reference-contexts: This work has resulted in methods for software hazard analysis (identifying software hazards using models of the system) [20], analysis and review criteria for real-time software requirements specifications [7], evaluation of current fault-tolerance methods [1, 2, 8, 14, 25] along with proposals for software design to enhance safety <ref> [10, 12, 18, 19] </ref>, and safety verification techniques [15, 11, 16]. Some of the techniques that have evolved from this research are being used on industrial projects around the world.
Reference: [19] <author> Nancy G. Leveson, Timothy J. Shimeall, Janice L. Stolzy, and Jeffrey Thomas. </author> <title> Design for safe software. </title> <booktitle> In Proceedings of the American Institutue for Astronautics and Aeronautics Space Sciences Meeting, </booktitle> <address> Reno, Nevada, </address> <year> 1983. </year> <pages> AIAA. </pages>
Reference-contexts: This work has resulted in methods for software hazard analysis (identifying software hazards using models of the system) [20], analysis and review criteria for real-time software requirements specifications [7], evaluation of current fault-tolerance methods [1, 2, 8, 14, 25] along with proposals for software design to enhance safety <ref> [10, 12, 18, 19] </ref>, and safety verification techniques [15, 11, 16]. Some of the techniques that have evolved from this research are being used on industrial projects around the world.
Reference: [20] <author> Nancy G. Leveson and Janice L. Stolzy. </author> <title> Safety analysis using Petri nets. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(3):386-397, </volume> <month> March </month> <year> 1987. </year>
Reference-contexts: This work has resulted in methods for software hazard analysis (identifying software hazards using models of the system) <ref> [20] </ref>, analysis and review criteria for real-time software requirements specifications [7], evaluation of current fault-tolerance methods [1, 2, 8, 14, 25] along with proposals for software design to enhance safety [10, 12, 18, 19], and safety verification techniques [15, 11, 16].
Reference: [21] <author> Robyn R. Lutz. </author> <title> Targeting safety-related errors during software requirements analysis. </title> <booktitle> In Proceedings SIGSOFT '93: Foundations of Software Engineering, </booktitle> <year> 1993. </year>
Reference-contexts: Lutz, at JPL, experimentally validated these completeness criteria by determining whether they would have detected the 192 safety-critical requirements errors found during system integration testing of the Galileo and Voyager spacecraft <ref> [21] </ref>. The criteria identified 150 of these errors; the others were design errors and could not have been found by our blackbox requirements criteria. Several aerospace companies have incorporated our completeness criteria into their standard requirements review process.
Reference: [22] <author> Everett A. Palmer, Edwin L. Hutchins, Richard D. Ritter, and Inge vanCleem-put. </author> <note> Altitude Deviations: Breakdowns of an Error-Tolerant System NASA Technical Memorandum 108788, </note> <institution> National Aeronautics and Space Administration, Ames Research Center, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: In addition, the information from the model can be used in simulator construction and in operator training. Many of the mistakes made by airline pilots, for example, can be traced to incomplete or inaccurate understanding of the operation of the flight management computer, especially those operations used less often <ref> [22, 23] </ref>. We found that our TCAS specification could be read by pilots, who provided much useful input during its development. If the model is readable and understandable by operators, then it could have further uses in training and operations.
Reference: [23] <author> Nadine B. Sarter and David D. </author> <title> Woods Cognitive Engineering in Aerospace Application: Pilot Interaction with Cockpit Automation. </title> <type> NASA Contractor 17 Report 177617, </type> <institution> National Aeronautics and Space Administration, Ames Research Center, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: In addition, the information from the model can be used in simulator construction and in operator training. Many of the mistakes made by airline pilots, for example, can be traced to incomplete or inaccurate understanding of the operation of the flight management computer, especially those operations used less often <ref> [22, 23] </ref>. We found that our TCAS specification could be read by pilots, who provided much useful input during its development. If the model is readable and understandable by operators, then it could have further uses in training and operations.
Reference: [24] <author> Jon Damon Reese. </author> <title> Software Deviation Analysis. </title> <type> PhD thesis, </type> <institution> University of California, Irvine, </institution> <year> 1995. </year>
Reference-contexts: Of particular concern are problems associated with state-space explosion. Additional pruning methods may be necessary to reduce 14 the number of previous states considered. Deviation Analysis. Deviation analysis is a new forward analysis technique developed by Reese <ref> [24] </ref> that takes its inspiration from HAZOP (HAZards and OPerability analysis), a very successful analysis procedure in the chemical process industry. Both techniques are based on the underlying system theory that considers accidents to be the result of deviations in system variables.
Reference: [25] <author> Timothy J. Shimeall and N. G. Leveson. </author> <title> An empirical comparison of software fault tolerance and fault elimination. </title> <journal> IEEE Transations on Software Engineering, </journal> <volume> SE-17(2):173-183, </volume> <month> February </month> <year> 1991. </year> <month> 18 </month>
Reference-contexts: This work has resulted in methods for software hazard analysis (identifying software hazards using models of the system) [20], analysis and review criteria for real-time software requirements specifications [7], evaluation of current fault-tolerance methods <ref> [1, 2, 8, 14, 25] </ref> along with proposals for software design to enhance safety [10, 12, 18, 19], and safety verification techniques [15, 11, 16]. Some of the techniques that have evolved from this research are being used on industrial projects around the world.
References-found: 25

