URL: http://www.cs.washington.edu/homes/dlee/frontpage/mypapers/ntsymp99.ps
Refering-URL: http://www.cs.washington.edu/homes/dlee/frontpage/mypapers/recent_papers.htm
Root-URL: http://www.cs.washington.edu
Email: fdlee,baer,bershad,tomg@cs.washington.edu  
Title: Reducing Startup Latency in Web and Desktop Applications  
Author: Dennis Lee, Jean-Loup Baer, Brian Bershad, and Tom Anderson 
Address: Box 352350 Seattle, WA 98195-2350  
Affiliation: Department of Computer Science and Engineering University of Washington,  
Abstract: Application startup latency has become a performance problem for both desktop applications and web applications. In this paper, we show that much of the latency experienced during application startup can be avoided by more efficiently packing application code pages. To take advantage of more efficient packing, we describe the implementation of demand paging for web applications. Finally, we show that combining demand paging with code reordering can improve application startup latency by more than 58%. 
Abstract-found: 1
Intro-found: 1
Reference: [Banga & Druschel 99] <author> Banga, G. and Druschel, P. </author> <title> Measuring the Capacity of a Web Server Under Realistic Loads. World Wide Web Journal, </title> <month> May </month> <year> 1999. </year> <note> to appear. </note>
Reference-contexts: Finally, our profile does not identify the use of data embedded in the code section. This may cause faults on access to code pages containing data. Reducing the number of bytes transfered has benefits other than reducing the startup latency of web applications. <ref> [Banga & Druschel 99, Bradford & Crovella 98] </ref> showed that having a large number of open connections on a web server can cause serious performance degradation.
Reference: [Bradford & Crovella 98] <author> Bradford, P. and Crovella, M. </author> <title> Generating Representative Web Workloads for Network and Sever Performance Evaluation. </title> <booktitle> In Proceedings of the 1998 ACM SIGMETRICS Internation Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 151-160, </pages> <month> July </month> <year> 1998. </year>
Reference-contexts: Finally, our profile does not identify the use of data embedded in the code section. This may cause faults on access to code pages containing data. Reducing the number of bytes transfered has benefits other than reducing the startup latency of web applications. <ref> [Banga & Druschel 99, Bradford & Crovella 98] </ref> showed that having a large number of open connections on a web server can cause serious performance degradation.
Reference: [Chappell 96] <author> Chappell, D. </author> <title> Understanding ActiveX and OLE. </title> <publisher> Microsoft Press, </publisher> <year> 1996. </year>
Reference-contexts: The table describes the applications used in this paper. Our web applications consists of four ActiveX <ref> [Chappell 96] </ref> controls which display various document types. The size column gives the size of the main application binary.
Reference: [Chen & Leupen 97] <author> Chen, J. and Leupen, B. </author> <title> Improving Instruction Locality with Just-in-Time Code Layout. </title> <booktitle> In Proc. of the USENIX Windows NT Workshop, </booktitle> <pages> pages 25-32, </pages> <year> 1997. </year>
Reference-contexts: Researchers have recently proposed several ways for improving startup latency including compression [Enst et al. 97, Franz & Kistler 97], non-strict execution [Krintz et al. 98], just-in-time code layout <ref> [Chen & Leupen 97] </ref>, and optimizing disk layout [Melanson 98] . Our approach is orthogonal and uses code reordering [Pettis & Hansen 90] and demand paging [Levy & Redell 82] to improve the startup latency of web and desktop applications, and reduce the load on web servers and the network.
Reference: [Enst et al. 97] <author> Enst, J., Evans, W., Fraser, C., Lucco, S., and T.Proebsting. </author> <title> Code Compression. </title> <booktitle> In Proc. ACM SIGPLAN 1997 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 358-365, </pages> <year> 1997. </year>
Reference-contexts: This paper proposes a technique that attempts to transfer the minimum amount of code (and consequently bytes) through expensive disk or network links. Researchers have recently proposed several ways for improving startup latency including compression <ref> [Enst et al. 97, Franz & Kistler 97] </ref>, non-strict execution [Krintz et al. 98], just-in-time code layout [Chen & Leupen 97], and optimizing disk layout [Melanson 98] .
Reference: [Franz & Kistler 97] <author> Franz, M. and Kistler, T. </author> <title> Slim Binaries. </title> <journal> Communications of the ACM, </journal> <volume> 40(12) </volume> <pages> 87-94, </pages> <month> December </month> <year> 1997. </year>
Reference-contexts: This paper proposes a technique that attempts to transfer the minimum amount of code (and consequently bytes) through expensive disk or network links. Researchers have recently proposed several ways for improving startup latency including compression <ref> [Enst et al. 97, Franz & Kistler 97] </ref>, non-strict execution [Krintz et al. 98], just-in-time code layout [Chen & Leupen 97], and optimizing disk layout [Melanson 98] .
Reference: [Krintz et al. 98] <author> Krintz, C., Calder, B., Lee, H., and Zorn, B. </author> <title> Overlapping Execution with Transfer Using Non-strict Execution for Mobile Programs. </title> <booktitle> In Proc. 8th Int. Conf on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 159-169, </pages> <year> 1998. </year> <month> 11 </month>
Reference-contexts: This paper proposes a technique that attempts to transfer the minimum amount of code (and consequently bytes) through expensive disk or network links. Researchers have recently proposed several ways for improving startup latency including compression [Enst et al. 97, Franz & Kistler 97], non-strict execution <ref> [Krintz et al. 98] </ref>, just-in-time code layout [Chen & Leupen 97], and optimizing disk layout [Melanson 98] .
Reference: [Leach & Naik 97] <author> Leach, P. and Naik, D. </author> <title> A Common Internet File System (CIFS/1.0) Protocol, </title> <month> December </month> <year> 1997. </year> <title> Internet Engineering Task Force (IETF) draft document, </title> <note> available from ftp://ietf.org/- internet-drafts/draft-leach-cifs-v1-spec-01.txt. </note>
Reference-contexts: Reordering improves application startup latency and reduces the number of page faults experienced by the program. 4 Actually, Windows NT purges the local copy of a file when there is no longer an open handle to the file in the local machine <ref> [Leach & Naik 97] </ref>. 10 For all applications and configurations, reordering improves application startup latency. The two warm scenarios show that reordering the binary can significantly reduce startup time. It is especially effective for powerpoint and word as they improve their application startup time by 53% and 39% respectively.
Reference: [Lee et al. 98] <author> Lee, D., Crowley, P., Baer, J.-L., Anderson, T., and Bershad, B. </author> <title> Execution Characteristics of Desktop Applications on Windows NT. </title> <booktitle> In Proc. 25th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 27-38, </pages> <month> June </month> <year> 1998. </year>
Reference-contexts: Unfortunately, we could not control the bandwidth or latency to the application server on NT so our measurements for desktop applications only involve communication on a single shared 10 Mbit Ethernet link. 5 We used Etch <ref> [Romer et al. 97, Lee et al. 98] </ref>, a binary instrumentation and rewriting engine, to profile and rewrite the applications used in this study. For all our experiments, we profile and reorder only the main application binary.
Reference: [Levy & Redell 82] <author> Levy, H. M. and Redell, D. D. </author> <title> Virtual Memory Management in VAX/VMS. </title> <journal> Computer, </journal> <volume> 15(3) </volume> <pages> 35-41, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: Our approach is orthogonal and uses code reordering [Pettis & Hansen 90] and demand paging <ref> [Levy & Redell 82] </ref> to improve the startup latency of web and desktop applications, and reduce the load on web servers and the network. We show that code reordering can significantly improve upon the performance of pure demand paging systems.
Reference: [Melanson 98] <author> Melanson, E. </author> <title> Tuning up. </title> <journal> PC Magazine, </journal> <month> August </month> <year> 1998. </year>
Reference-contexts: Researchers have recently proposed several ways for improving startup latency including compression [Enst et al. 97, Franz & Kistler 97], non-strict execution [Krintz et al. 98], just-in-time code layout [Chen & Leupen 97], and optimizing disk layout <ref> [Melanson 98] </ref> . Our approach is orthogonal and uses code reordering [Pettis & Hansen 90] and demand paging [Levy & Redell 82] to improve the startup latency of web and desktop applications, and reduce the load on web servers and the network.
Reference: [Microsoft 98] <author> Microsoft. </author> <title> Microsoft Developer Network Library, </title> <month> April </month> <year> 1998. </year> <note> on CD-ROM. </note>
Reference-contexts: For all our experiments, we profile and reorder only the main application binary. For our prototype implementation, we simulate having an augmented page fault handler using the Windows NT debugger API <ref> [Microsoft 98] </ref>. We run the web browser in the context of a custom debugger. 4 Results In this section, we present the results of our experiments optimizing the startup latency.
Reference: [Nielsen et al. 97] <author> Nielsen, H., Gettys, J., Baird-Smith, A., Prudhommeau, E., Lie, H., and Lilley, C. </author> <title> Network Performance Effects of HTTP/1.1, CSS1, </title> <booktitle> and PNG. In Proc. of the ACM SIGCOMM 1997 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication, </booktitle> <pages> pages 155-166, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: We modified the handler to contact the web server, download the file containing the page, place the page in the appropriate location in application memory. 2 2 As an alternative to downloading individual files each containing a single code page, the client could use the range option in HTTP 1.1 <ref> [Nielsen et al. 97] </ref>.
Reference: [Peterson & Davie 96] <author> Peterson, L. L. and Davie, B. S. </author> <title> Computer Networks, A Systems Approach, chapter 6. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1996. </year>
Reference-contexts: The titles show the measured bandwidths between the client and the server. This is different from the "available" bandwidth (56 Kbps, 256 Kbps, and 1 Mbps) because of the effects of TCP buffering and congestion control <ref> [Peterson & Davie 96] </ref>, and the limitations of dummynet.
Reference: [Pettis & Hansen 90] <author> Pettis, K. and Hansen, R. </author> <title> Profile Guided Code Positioning. </title> <booktitle> In Proc. ACM SIGPLAN 1990 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 16-26, </pages> <year> 1990. </year>
Reference-contexts: Researchers have recently proposed several ways for improving startup latency including compression [Enst et al. 97, Franz & Kistler 97], non-strict execution [Krintz et al. 98], just-in-time code layout [Chen & Leupen 97], and optimizing disk layout [Melanson 98] . Our approach is orthogonal and uses code reordering <ref> [Pettis & Hansen 90] </ref> and demand paging [Levy & Redell 82] to improve the startup latency of web and desktop applications, and reduce the load on web servers and the network. We show that code reordering can significantly improve upon the performance of pure demand paging systems. <p> Using an object rewriting engine, we then move the likely-used procedures together at the top of the code section. For our experiments, we simply arrange the code section in first-touch order. Ordering using procedure affinity <ref> [Pettis & Hansen 90] </ref> might be better for locality but first touch order works well enough for our goal of improving startup latency.
Reference: [Rizzo 99] <author> Rizzo, L. Dummynet: </author> <title> A Simple Approach to the Evaluation of Network Protocols, </title> <month> February </month> <year> 1999. </year> <note> available from http://www.iet.unipi.it/ luigi/ip dummynet. </note>
Reference-contexts: All our network measurements were taken on isolated networks with no external traffic. For our web server, we use Apache 1.3b5 running on FreeBSD 2.2.6. To control the bandwidth and latency between the web server and the client, we installed the dummynet <ref> [Rizzo 99] </ref> patch to the BSD kernel. Our Internet application experiments looked at a range of bandwidths (from 56 Kbits/second to 3 Mbits/second) and latencies (from 10 ms. to 200 ms.) which cover the range of network conditions on the Internet.
Reference: [Romer et al. 97] <author> Romer, T., Voelker, G., Lee, D., Wolman, A., Wong, W., Levy, H., and Bershad, B. </author> <title> Instrumentation and Optimization of Win32/Intel Executables using Etch. </title> <booktitle> In Proc. of the USENIX Windows NT Workshop, </booktitle> <pages> pages 1-7, </pages> <year> 1997. </year> <month> 12 </month>
Reference-contexts: Unfortunately, we could not control the bandwidth or latency to the application server on NT so our measurements for desktop applications only involve communication on a single shared 10 Mbit Ethernet link. 5 We used Etch <ref> [Romer et al. 97, Lee et al. 98] </ref>, a binary instrumentation and rewriting engine, to profile and rewrite the applications used in this study. For all our experiments, we profile and reorder only the main application binary.
References-found: 17

