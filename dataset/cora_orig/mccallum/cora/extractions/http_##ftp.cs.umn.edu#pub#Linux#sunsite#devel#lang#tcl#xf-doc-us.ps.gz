URL: http://ftp.cs.umn.edu/pub/Linux/sunsite/devel/lang/tcl/xf-doc-us.ps.gz
Refering-URL: http://ftp.cs.umn.edu/pub/Linux/sunsite/devel/lang/tcl/
Root-URL: http://www.cs.umn.edu
Email: garfield@cs.tu-berlin.de Abstract  
Title: XF Design and Implementation of a Programming Environment for Interactive Construction of Graphical User Interfaces  
Author: Lehrgebiet Softwaretechnik vorgelegt von: Sven Delmas 
Date: 19 March. 1993  
Note: Berlin,  
Affiliation: Technische Universitat Berlin Institut fur Angewandte Informatik Fachbereich 20 (Informatik)  
Abstract: XF is an integrated programming environment that supports the development of graphical user interfaces. The described programming system enables developers who don't want to dive into the complex task of window system programming, to construct sophisticated graphical applications in a very short time. XF takes advantage of Tk, a Motif TM -like widget set that is accessible through Tcl, a very efficient interpreted programming language. The flexibility of this approach allows to build or modify application programs while they are running. This makes it possible to test the effect of modifications immediately without incurring costly recompilation cycles. Many users of XF have reported that the tool is very easy to use, and allows rapid construction of graphical interfaces. Nevertheless it does not restrict the developer when he wants to manipultate the graphical interface in more detail. Support for libraries of reusable interface components and functions leads to further reductions of the development time, and also supports a standardized look & feel. It is possible to merge external code into the application, and to reuse pre-existing code. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Michel Beaudouin-Lafon. </author> <title> User Interface Support for the Integration of Software Tools: an Iconic Model of Interaction. </title> <journal> Sigplan Notices, </journal> <volume> 24(2) </volume> <pages> 143-152, </pages> <month> November </month> <year> 1988. </year>
Reference: [2] <author> Michel Beaudouin-Lafon and Solange Karsenty. </author> <title> Iconic Shells for Multitasking Workstations. </title> <booktitle> In Proceedings of the ACM Symposium on Small Systems. </booktitle> <publisher> ACM Press, </publisher> <month> May </month> <year> 1988. </year>
Reference: [3] <author> Martin R. Cagan. </author> <title> The HP SoftBench Environment Architecture for a New Generation of Software Tools. </title> <journal> Hewlett-Packard Journal, </journal> <volume> 41(3) </volume> <pages> 36-47, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: On the other hand, the existance of commonly used and well-known traditional applications makes it interesting for the user to create graphical frontends for existing commandline oriented tools. An example for this kind of encapsulation of traditional applications into a graphical frontend is the HP Encapsulator T M <ref> [3] </ref> and [5]. This is a language that can be used to embed existing non graphical applications into a graphical environment. Such an interface must be built easily, and the resulting code must be easy to handle.
Reference: [4] <author> D. Eckardt, W. Huebner, and G. Lux-Muelders. Konzeption der STONE-Benutzungsoberflaeche THE-SEUS++. </author> <type> STONE Technical Report ZGDV.006.1, </type> <institution> Zentrum fuer Graphische Datenverarbeitung, Darm-stadt, Germany, </institution> <month> December </month> <year> 1989. </year>
Reference: [5] <author> Brian D. Fromme. </author> <title> HP Encapsulator: Bridging the Generation Gap. </title> <journal> Hewlett-Packard Journal, </journal> <volume> 41(3) </volume> <pages> 59-68, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: An example for this kind of encapsulation of traditional applications into a graphical frontend is the HP Encapsulator T M [3] and <ref> [5] </ref>. This is a language that can be used to embed existing non graphical applications into a graphical environment. Such an interface must be built easily, and the resulting code must be easy to handle.
Reference: [6] <author> Jonathan Grudin. </author> <title> The Case Against User Interface Consistency. </title> <journal> Communications of the ACM, </journal> <volume> 32(1) </volume> <pages> 1164-1173, </pages> <month> October </month> <year> 1989. </year>
Reference: [7] <author> Arnaud Le Hors. </author> <title> XPM Manual. </title> <type> Technical report, </type> <institution> Groupe Bull, Bull Research c/o INRIA, </institution> <year> 1993. </year>
Reference-contexts: This is a list of keywords attached to this help page. The following text is the help text that is displayed in the help area. APPENDIX A. EXTERNAL TOOLS 44 A.7 xfpixmap Xfpixmap allows drawing pixmaps based upon the Xpm 3 format <ref> [7] </ref>. To use the program, the wish that is used must contain the TkPixmap patch. This patch implements the pinfo command. The functionality of xfpixmap is restricted to a basic functionality, and the performance is not very good especially for big pictures (big == &gt;40x40).
Reference: [8] <author> Andreas Lampen. </author> <title> Advancing Files to Attributed Software Objects. </title> <booktitle> In Proceedings of the Winter 1991 USENIX Conference, </booktitle> <pages> pages 219-229, </pages> <address> Berkeley (CA), USA, </address> <month> January </month> <year> 1991. </year> <institution> USENIX Association. </institution>
Reference-contexts: Beside the different command string, everything is the same as when emacs is used as external editor. APPENDIX A. EXTERNAL TOOLS 39 A.3 ShapeTools ShapeTools is a toolkit for software configuration management [9], <ref> [8] </ref>, [12], [13], [11]. XF uses parts of this package for version control. If the ShapeTools are not installed, the functionality of XF is restricted in some way, but the program is still working. A.3.1 Saving procedures XF allows saving selected procedures into a shape archive.
Reference: [9] <author> Andreas Lampen and Axel Mahler. </author> <title> An Object Base for Attributed Software Objects. </title> <booktitle> In Proceedings of the Autumn 1988 EUUG Conference, </booktitle> <pages> pages 95-106, </pages> <address> Lisbon, Portugal, </address> <month> October </month> <year> 1988. </year> <title> European Unix systems User Group. </title>
Reference-contexts: Beside the different command string, everything is the same as when emacs is used as external editor. APPENDIX A. EXTERNAL TOOLS 39 A.3 ShapeTools ShapeTools is a toolkit for software configuration management <ref> [9] </ref>, [8], [12], [13], [11]. XF uses parts of this package for version control. If the ShapeTools are not installed, the functionality of XF is restricted in some way, but the program is still working. A.3.1 Saving procedures XF allows saving selected procedures into a shape archive.
Reference: [10] <author> Mark A. Linton, Paul R. Calder, and John M. Vlissides. InterViews: </author> <title> A C++ Graphical Interface Toolkit. </title> <type> Technical report, </type> <institution> Stanford University, Stanford (CA), USA, </institution> <year> 1988. </year>
Reference-contexts: Studies have shown that about 50 to 80 per cent of the code of an application with a graphical interface are used to implement the graphical interface. The introduction of OOP techniques for interface building makes the implementation of graphical interfaces much easier. Toolkits like Interviews <ref> [10] </ref>, Theseus++[4] and others can drastically reduce the complexity and size of the interface code. But for many developers, even this reduced complexity of the interface code is not acceptable. They don't want to care about the implementation of the interface, they want to work on the application itself.
Reference: [11] <author> Axel Mahler. </author> <title> Organizing Tools in a Uniform Environment Framework. </title> <booktitle> In Proceedings of the Winter 91 USENIX Conference, </booktitle> <pages> pages 231-242, </pages> <address> Dallas (TX), USA, </address> <month> January </month> <year> 1991. </year> <institution> USENIX Association. </institution>
Reference-contexts: Beside the different command string, everything is the same as when emacs is used as external editor. APPENDIX A. EXTERNAL TOOLS 39 A.3 ShapeTools ShapeTools is a toolkit for software configuration management [9], [8], [12], [13], <ref> [11] </ref>. XF uses parts of this package for version control. If the ShapeTools are not installed, the functionality of XF is restricted in some way, but the program is still working. A.3.1 Saving procedures XF allows saving selected procedures into a shape archive.
Reference: [12] <author> Axel Mahler and Andreas Lampen. </author> <title> An Integrated Toolset for Engineering Software Configurations. </title> <journal> SIGPLAN Software Engineering Notes, </journal> <volume> 13(5) </volume> <pages> 191-200, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: Beside the different command string, everything is the same as when emacs is used as external editor. APPENDIX A. EXTERNAL TOOLS 39 A.3 ShapeTools ShapeTools is a toolkit for software configuration management [9], [8], <ref> [12] </ref>, [13], [11]. XF uses parts of this package for version control. If the ShapeTools are not installed, the functionality of XF is restricted in some way, but the program is still working. A.3.1 Saving procedures XF allows saving selected procedures into a shape archive.
Reference: [13] <author> Axel Mahler and Andreas Lampen. </author> <title> Integrating Configuration Management into a Generic Environment. </title> <booktitle> In Symposium on Practical Software Development Environments, </booktitle> <pages> pages 229-237, </pages> <address> Irvine (CA), USA, </address> <month> December </month> <year> 1990. </year> <note> ACM Press. </note>
Reference-contexts: Beside the different command string, everything is the same as when emacs is used as external editor. APPENDIX A. EXTERNAL TOOLS 39 A.3 ShapeTools ShapeTools is a toolkit for software configuration management [9], [8], [12], <ref> [13] </ref>, [11]. XF uses parts of this package for version control. If the ShapeTools are not installed, the functionality of XF is restricted in some way, but the program is still working. A.3.1 Saving procedures XF allows saving selected procedures into a shape archive.
Reference: [14] <author> F. Newbery-Paulisch and W. F. Tichy. </author> <title> EDGE: An Extendible Graph Editor. </title> <journal> Software-Practice and Experience, </journal> <volume> 20, </volume> <month> June </month> <year> 1990. </year>
Reference-contexts: XF uses the following external programs: * edge, * emacs, * shape, * tkemacs, * vi, * xfappdef, * xfhardcopy, * xfhelp, * xfpixmap, * xftutorial. 36 APPENDIX A. EXTERNAL TOOLS 37 A.1 Edge Edge <ref> [14] </ref> is a program that allows the layouting and displaying of graphs. XF uses this program as an additional feature to represent the widget structure as a tree. It is not possible to use the displayed widget tree interactively. If this feature is not used (wanted), edge is not needed.
Reference: [15] <author> John Ousterhout. </author> <note> The Tcl/Tk Book. unpublished draft. </note>
Reference-contexts: Tk is a windowing toolkit offering access to a M otif T M -like widget set via Tcl commands. Both packages have been developed by John Ousterhout. The short description of Tcl/Tk in this paper is mainly based upon the draft of a book from John Ousterhout <ref> [15] </ref>, slides that John Ousterhout used in his tutorial at the 7th Annual X Technical Conference [18] and other publications of John Ousterhout [17], [16]. When developing applications with XF, a basic understanding of some aspects of Tcl/Tk is needed. <p> This includes commands to define event bindings or to handle the X selection. The commands are explained in the Tcl/Tk book by John Ousterhout <ref> [15] </ref>. 3.2.7 XF relevant commands XF tries to support the development of Tcl/Tk programs as well as possible. This does not mean that the user does not have to know anything about Tk . To access parts of the interface, the developer must know some Tk commands. <p> So it can happen that widgets accidentally overlap, or the size of a widget is not computed correctly. The combination of both methods should only be used by the experienced user, as it is necessary that both concepts are really understood in their effects. The draft of John Ousterhout's <ref> [15] </ref> book explains the Tk geometry managers in detail. The user can choose between two ways of layouting with XF.
Reference: [16] <author> John Ousterhout. </author> <title> Tcl: An Embeddable Command Language. </title> <booktitle> In Proceedings of the Winter 1990 USENIX Conference, </booktitle> <pages> pages 133-146, </pages> <address> Berkeley (CA), USA, </address> <month> January </month> <year> 1990. </year> <title> USENIX Association. </title> <type> 121 BIBLIOGRAPHY 122 </type>
Reference-contexts: The short description of Tcl/Tk in this paper is mainly based upon the draft of a book from John Ousterhout [15], slides that John Ousterhout used in his tutorial at the 7th Annual X Technical Conference [18] and other publications of John Ousterhout [17], <ref> [16] </ref>. When developing applications with XF, a basic understanding of some aspects of Tcl/Tk is needed. To implement the functionality of the application, the user should be able to write Tcl code.
Reference: [17] <author> John Ousterhout. </author> <title> An X11 Toolkit Based on the Tcl Language. </title> <booktitle> In Proceedings of the Winter 1991 USENIX Conference, </booktitle> <pages> pages 105-115, </pages> <address> Berkeley (CA), USA, </address> <month> January </month> <year> 1991. </year> <institution> USENIX Association. </institution>
Reference-contexts: The short description of Tcl/Tk in this paper is mainly based upon the draft of a book from John Ousterhout [15], slides that John Ousterhout used in his tutorial at the 7th Annual X Technical Conference [18] and other publications of John Ousterhout <ref> [17] </ref>, [16]. When developing applications with XF, a basic understanding of some aspects of Tcl/Tk is needed. To implement the functionality of the application, the user should be able to write Tcl code.
Reference: [18] <author> John Ousterhout. </author> <title> The Tcl Language and the Tk Toolkit. Tutorial, </title> <booktitle> 7th Annual X Technical Conference, </booktitle> <address> Boston (MA), USA, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: Both packages have been developed by John Ousterhout. The short description of Tcl/Tk in this paper is mainly based upon the draft of a book from John Ousterhout [15], slides that John Ousterhout used in his tutorial at the 7th Annual X Technical Conference <ref> [18] </ref> and other publications of John Ousterhout [17], [16]. When developing applications with XF, a basic understanding of some aspects of Tcl/Tk is needed. To implement the functionality of the application, the user should be able to write Tcl code.
Reference: [19] <author> Robert Scheifler and James Gettys. </author> <title> X Window System (Second Edition). </title> <publisher> Digital Press, </publisher> <year> 1990. </year>
Reference-contexts: It runs under various U N IX T M 2 environments, and is based upon the X window system T M 3 <ref> [19] </ref>. The handling of Tcl as an implementation language is very easy, and Tk provides an easy access to the implementation of graphical user interfaces.
Reference: [20] <author> Ben Shneiderman. </author> <title> Designing the User Interface: Strategies for Effective Human-Computer Interaction. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> reading, mass. edition, </address> <year> 1987. </year>

References-found: 20

