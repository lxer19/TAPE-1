URL: http://www.cs.man.ac.uk/~banach/some.pubs/Trans.TGR.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~banach/Recent.publications.html
Root-URL: http://www.cs.man.ac.uk
Email: (banach@cs.man.ac.uk)  
Title: Transitive Term Graph Rewriting A graph G is a triple (N G s G a
Author: R. Banach 
Keyword: Key Words: Distributed Computing, Programming Languages, Term Graph Rewriting, Transitive Redirections, Packet Store Rewriting, DACTL, MONSTR.  2.0 Transitive Term Graph Rewriting  
Address: Manchester, M13 9PL, UK.  
Affiliation: Computer Science Dept., Manchester University,  
Note: 1 of 7  1.0 Introduction  Definition 2.1  
Abstract: A version of generalised term graph rewriting is presented in which redirections are interpreted transitively. It is shown that the new semantics enjoy enhanced properties regarding ease of implementation on distributed machines compared with conventional semantics because of the Church-Rosser properties of transitive redirections. Furthermore, the good properties of orthogonal systems are largely retained. In term graph rewriting [4,7], the basic mechanism of update is redirection; all in-arcs of a node x are made to point to some other node y. If x and y happen to be the same, the model specifies a null action. This imposes the burden of an identity test on implementations, which is mild enough for a single processor serial implementation, but becomes burdensome in a distributed environment. Furthermore, when there are multiple redirections, all redirections are performed simultaneously; for example if x is to be redirected to y, and y to z, the original in-arcs of x end up at y, and the original in-arcs of y end up at z. The in-arcs of z also remain at z assuming that z was not itself redirected. In this paper we describe a different operational semantics for redirections which obviates the problems that distributed implementations have, and which moreover preserves most of the nice properties of the original semantics. Redirections are interpreted transitively, i.e. if x is to be redirected to y, then the in-arcs of x end up wherever the in-arcs of y end up. In the preceding example, all the original in-arcs of x, y, z, end up at z. This raises the question of what to do about cycles of redirections. To cope with these we introduce special purpose ^-nodes, with suitable properties. We assume given an alphabet of symbols S, and two further distinguished symbols, Any and ^. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ariola Z.M., Klop J.W., </author> <title> (1995) Equational Term Graph Rewriting. </title> <type> CWI Report CS-R9552, </type> <month> July </month> <year> 1995, </year> <note> Acta Informatica, to appear. </note>
Reference-contexts: In [5] Cor-radini gets the result by considering parallel rewriting under the approximation topology of CT S in which a ^- node is the graph counterpart of a limit of a series of term rewriting computations each of which yield the term ^. And in <ref> [1] </ref>, Ariola and Klop get the result by considering term graph rewriting interpretations of sets of equations, getting ^ when there is a non well founded cycle of equations.
Reference: [2] <author> Banach R., </author> <title> (1996) MONSTR I Fundamental Issues and the Design of MONSTR. </title> <journal> Journal of Universal Computer Science, </journal> <volume> 2, </volume> <pages> 164-216. </pages> <address> http://www.springer.de </address>
Reference-contexts: Under these asumptions the non-transitive redirection model has an implementation that can be discerned from section 6 of <ref> [2] </ref>. The transitive model of rewriting however enjoys a particularly simple implementation as follows. <p> The above can be exploited by implementations of MON-STR <ref> [2] </ref>, an extended term graph rewriting formalism intended for execution on parallel machines using a packet rewriting strategy similar to that which we have described.
Reference: [3] <author> Banach R., </author> <title> (1996) MONSTR V Transitive Coercing Semantics and the Church-Rosser Property. </title> <note> Submitted to Information and Computation. </note>
Reference-contexts: In fact one can redefine the operational semantics of MONSTR to include transitive redirections (and other features) without harming the behaviour of most useful programs, in such a manner that a very reasonable Church-Rosser theorem holds for systems featuring at worst deterministic synchronisations <ref> [3] </ref>. 4.0 Graph and Term Rewriting Of particular interest among graph rewriting systems, are ones that look like implementations of term rewrite systems.
Reference: [4] <author> Barendregt H.P., van Eekelen M.C.J.D., Glauert J.R.W., Kennaway J.R., Plasmeijer M.J., </author> <title> Sleep M.R., (1987) Term Graph Rewriting. </title> <booktitle> in Proc. </booktitle> <address> PARLE-87, </address> <publisher> LNCS 259, Springer, </publisher> <pages> 141-158. </pages>
Reference-contexts: Below we give an example of this semantics on the infamous circular-I rewrite. Using DACTL-like syntax <ref> [4] </ref>, the rule is I [a:Any] =&gt; a, which means that an I-labelled node is to be redirected to its only child.
Reference: [5] <author> Corradini A., </author> <title> (1993) Term Rewriting in CT S . Proc. </title> <publisher> CAAP-93, LNCS, 668, Springer, </publisher> <pages> 468-484. </pages>
Reference-contexts: We have also observed that the correspondence between term and graph rewriting does not lose very much under the new semantics. Finally we mention two related pieces of work which arrive at essentially the same result as we do for the circular-I rewrite albeit from different directions. In <ref> [5] </ref> Cor-radini gets the result by considering parallel rewriting under the approximation topology of CT S in which a ^- node is the graph counterpart of a limit of a series of term rewriting computations each of which yield the term ^.
Reference: [6] <author> Farmer W.M., </author> <title> Watro R.J., (1990) Redex Capturing in Term Graph Rewriting. </title> <journal> International Journal of Foundations of Computer Science, </journal> <volume> 1, </volume> <pages> 369-386. </pages>
Reference: [7] <author> Glauert J.R.W., Kennaway J.R., </author> <title> Sleep M.R., (1990) DACTL: An Experimental Graph Rewriting Language. in Graph Grammars and their Applications to Computer Science, </title> <editor> Ehrig, Kreowski, Rozenberg (eds.), </editor> <publisher> LNCS 532, Springer, </publisher> <month> 378-395. </month> <title> References Transitive Term Graph Rewriting 7 of 7 </title>
Reference: [8] <author> Kennaway J.R., Klop J.W., </author> <title> Sleep M.R., de Vries F.J., (1994) On the Adequacy of Graph Rewriting for Simulating Term Rewriting. </title> <journal> ACM Transactions on Programmng Languages and Systems, </journal> <volume> 16, </volume> <pages> 493-523. </pages>
Reference-contexts: Of the unraveling mapping, one can then show the following, which is a rather trivial adaptation of theorem 6.10 of <ref> [8] </ref>. We quote it without proof, or indeed without explaining the terminiology used more precisely, relying on the readers intuition to furnish a good feeling of what is being conveyed, and on the cited reference for a complete development of the required theory.
References-found: 8

