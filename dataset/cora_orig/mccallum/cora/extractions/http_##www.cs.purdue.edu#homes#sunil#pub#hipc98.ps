URL: http://www.cs.purdue.edu/homes/sunil/pub/hipc98.ps
Refering-URL: http://www.cs.purdue.edu/homes/sunil/pub.html
Root-URL: http://www.cs.purdue.edu
Email: sunil@cs.purdue.edu  ghaffar@ece.ucdavis.edu  fagrawal, amrg@cs.ucsb.edu  
Title: Efficient Retrieval of Multidimensional Datasets Through Parallel I/O  
Author: Sunil Prabhakar Khaled Abdel-Ghaffar Divyakant Agrawal Amr El Abbadi 
Address: W. Lafayette, IN 47907  Davis, CA 95616  Santa Barbara, CA 93106  
Affiliation: Computer Sciences Purdue University  Elect. Computer Engg. University of California  Computer Science University of California  
Abstract: Many scientific and engineering applications process large multidimensional datasets. An important access pattern for these applications is the retrieval of data corresponding to ranges of values in multiple dimensions. Performance is limited by disks largely due to high disk latencies. Tiling and distributing the data across multiple disks is an effective technique for improving performance through parallel I/O. The distribution of tiles across the disks is an important factor in achieving gains. Several schemes for declustering multidimensional data to improve the performance of range queries have been proposed in the literature. We extend the class of Cyclic schemes which have been developed earlier for two-dimensional data to multiple dimensions. We establish important properties of Cyclic schemes, based upon which we reduce the search space for determining good declustering schemes within the class of Cyclic schemes. Through experimental evaluation, we establish that the Cyclic schemes are superior to other declus-tering schemes, including the state-of-the-art, both in terms of the degree of parallelism and robustness. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. A. S. Abdel-Ghaffar and A. El Abbadi. </author> <title> Optimal disk allocation for partial match queries. </title> <booktitle> Proc. ACM Symp. on Transactions of Database Systems, </booktitle> <address> 18(1):132156, </address> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: However, this is highly wasteful and requires too many disks. Alter natively, the problem can be viewed as one of maximizing the parallelism with a given number of disks. The problem of distributing multidimensional buckets to optimize the performance of range queries has been well studied in the literature <ref> [1, 2, 4, 5, 6, 9, 11] </ref>. The goal is to maximize parallelism. For any set of buckets to be retrieved together, the cost is assumed to be proportional to the maximum number of buckets retrieved from a single disk. <p> Two approaches based upon error correcting codes are [7] and <ref> [1] </ref>. Two schemes that have been proposed for only two-dimensional data are FIB [4] and the Cyclic approach [11]. The Cyclic allocation schemes developed for two-dimensional range queries were adapted for similarity queries in [12].
Reference: [2] <author> K. A. S. Abdel-Ghaffar and A. El Abbadi. </author> <title> Optimal allocation of two-dimensional data. </title> <booktitle> In Int. Conf. on Database Theory, </booktitle> <pages> pages 409418, </pages> <address> Delphi, Greece, </address> <month> Jan. </month> <year> 1997. </year>
Reference-contexts: However, this is highly wasteful and requires too many disks. Alter natively, the problem can be viewed as one of maximizing the parallelism with a given number of disks. The problem of distributing multidimensional buckets to optimize the performance of range queries has been well studied in the literature <ref> [1, 2, 4, 5, 6, 9, 11] </ref>. The goal is to maximize parallelism. For any set of buckets to be retrieved together, the cost is assumed to be proportional to the maximum number of buckets retrieved from a single disk. <p> Clearly, to retrieve A buckets given M disks, the minimal or optimal cost is given by d A M e. An allocation that results in optimal cost for all queries is said to be strictly optimal. In <ref> [2] </ref>, it was shown that strictly optimal allocations exist in only very special cases for two-dimensional data.
Reference: [3] <author> S. Berchtold, C. Bohm, B. Braunmuller, D. A. Keim, and H.-P. Kriegel. </author> <title> Fast parallel similarity search in multimedia databases. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 112, </pages> <address> Arizona, U.S.A., </address> <year> 1997. </year>
Reference-contexts: Meaning of symbols used for similarity queries is very different from range queries, primarily because the set of buckets accessed depends upon the search algorithm and the data distribution. Recently a new allocation technique was developed that optimizes the performance of similarity queries <ref> [3] </ref>. We now show how each of these approaches allocates buckets to disks. In the following, we will use N i to denote the number of buckets in dimension i. If the number of buckets in each dimension is the same, then N will be used to represent this number.
Reference: [4] <author> B. Chor, C. E. Leiserson, R. L. Rivest, and J. B. Shearer. </author> <title> An application of number theory to the organization of raster-graphics memory. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 33(1):86104, </volume> <month> January </month> <year> 1986. </year>
Reference-contexts: However, this is highly wasteful and requires too many disks. Alter natively, the problem can be viewed as one of maximizing the parallelism with a given number of disks. The problem of distributing multidimensional buckets to optimize the performance of range queries has been well studied in the literature <ref> [1, 2, 4, 5, 6, 9, 11] </ref>. The goal is to maximize parallelism. For any set of buckets to be retrieved together, the cost is assumed to be proportional to the maximum number of buckets retrieved from a single disk. <p> Two approaches based upon error correcting codes are [7] and [1]. Two schemes that have been proposed for only two-dimensional data are FIB <ref> [4] </ref> and the Cyclic approach [11]. The Cyclic allocation schemes developed for two-dimensional range queries were adapted for similarity queries in [12]. <p> The first heuristic is based upon the FIB scheme which was developed for optimally allocating screen pixel data to memory chips <ref> [4] </ref>. FIB was defined only for 2 dimensions and requires that M be an odd order Fibonacci number, i.e. M = F 2r+1 r &gt; 0.
Reference: [5] <author> H. C. Du and J. S. Sobolewski. </author> <title> Disk allocation for cartesian product files on multiple-disk systems. </title> <journal> ACM Transactions of Database Systems, </journal> <volume> 7(1):82101, </volume> <month> March </month> <year> 1982. </year>
Reference-contexts: However, this is highly wasteful and requires too many disks. Alter natively, the problem can be viewed as one of maximizing the parallelism with a given number of disks. The problem of distributing multidimensional buckets to optimize the performance of range queries has been well studied in the literature <ref> [1, 2, 4, 5, 6, 9, 11] </ref>. The goal is to maximize parallelism. For any set of buckets to be retrieved together, the cost is assumed to be proportional to the maximum number of buckets retrieved from a single disk. <p> The general form for multiple dimensions for most schemes is presented. Next, we propose our new Cyclic allocation schemes, which are extensions of the Cyclic schemes for two-dimensional data. 2.1 Existing Approaches Several different techniques have been proposed for relational databases including the Disk Modulo or DM approach <ref> [5] </ref> also known as the CMD approach [10], the Field-wise eXclusive or FX approach [9], the Gray code approach [8] and the HCAM approach [6]. Two approaches based upon error correcting codes are [7] and [1]. <p> An allocation that results in optimal cost for all queries is said to be strictly optimal. In [2], it was shown that strictly optimal allocations exist in only very special cases for two-dimensional data. The Disk Modulo or DM approach <ref> [5] </ref> is defined as: DM (X) = ( j=0 The Fieldwise eXclusive or FX approach [9] is defined as: F X (X) = (b 0 b 1 b d1 ) mod M where b j is the binary representation of x j and represents the bitwise exclusive-OR operator.
Reference: [6] <author> C. Faloutsos and P. Bhagwat. </author> <title> Declustering using fractals. </title> <booktitle> In Proc. of the 2nd Int. Conf. on Parallel and Distributed Information Systems, </booktitle> <pages> pages 18 25, </pages> <address> San Diego, CA, </address> <month> Jan </month> <year> 1993. </year>
Reference-contexts: However, this is highly wasteful and requires too many disks. Alter natively, the problem can be viewed as one of maximizing the parallelism with a given number of disks. The problem of distributing multidimensional buckets to optimize the performance of range queries has been well studied in the literature <ref> [1, 2, 4, 5, 6, 9, 11] </ref>. The goal is to maximize parallelism. For any set of buckets to be retrieved together, the cost is assumed to be proportional to the maximum number of buckets retrieved from a single disk. <p> of the Cyclic schemes for two-dimensional data. 2.1 Existing Approaches Several different techniques have been proposed for relational databases including the Disk Modulo or DM approach [5] also known as the CMD approach [10], the Field-wise eXclusive or FX approach [9], the Gray code approach [8] and the HCAM approach <ref> [6] </ref>. Two approaches based upon error correcting codes are [7] and [1]. Two schemes that have been proposed for only two-dimensional data are FIB [4] and the Cyclic approach [11]. The Cyclic allocation schemes developed for two-dimensional range queries were adapted for similarity queries in [12]. <p> The HCAM approach <ref> [6] </ref> is defined as: HCAM (X) = hilbert order (X) mod M where the function hilbert order () returns the entry in the Hilbert sequence corresponding to the input coordinates. The Hilbert sequence maps a multidimensional space into a linear order. <p> The comparisons are made with the FX, DM and HCAM schemes. The HCAM scheme has been shown to give the best performance among existing schemes <ref> [6] </ref>. Due to the large number of possible queries, the evaluations are based on the performance for a set of randomly chosen queries. To achieve a high degree of confidence in the results, five different random sets of 1000 queries each was used.
Reference: [7] <author> C. Faloutsos and D. Metaxas. </author> <title> Declustering using error correcting codes. </title> <booktitle> In Proc. ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 253258, </pages> <year> 1989. </year>
Reference-contexts: Two approaches based upon error correcting codes are <ref> [7] </ref> and [1]. Two schemes that have been proposed for only two-dimensional data are FIB [4] and the Cyclic approach [11]. The Cyclic allocation schemes developed for two-dimensional range queries were adapted for similarity queries in [12].
Reference: [8] <author> J. Gray, B. Horst, and M. Walker. </author> <title> Parity striping of disc arrays: Low-cost reliable storage with acceptable throughput. </title> <booktitle> In Proceedings of the Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 148161, </pages> <address> Washington DC., </address> <month> Aug. </month> <year> 1990. </year>
Reference-contexts: allocation schemes, which are extensions of the Cyclic schemes for two-dimensional data. 2.1 Existing Approaches Several different techniques have been proposed for relational databases including the Disk Modulo or DM approach [5] also known as the CMD approach [10], the Field-wise eXclusive or FX approach [9], the Gray code approach <ref> [8] </ref> and the HCAM approach [6]. Two approaches based upon error correcting codes are [7] and [1]. Two schemes that have been proposed for only two-dimensional data are FIB [4] and the Cyclic approach [11].
Reference: [9] <author> M. H. Kim and S. Pramanik. </author> <title> Optimal file distribution for partial match retrieval. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 173182, </pages> <address> Chicago, </address> <year> 1988. </year>
Reference-contexts: However, this is highly wasteful and requires too many disks. Alter natively, the problem can be viewed as one of maximizing the parallelism with a given number of disks. The problem of distributing multidimensional buckets to optimize the performance of range queries has been well studied in the literature <ref> [1, 2, 4, 5, 6, 9, 11] </ref>. The goal is to maximize parallelism. For any set of buckets to be retrieved together, the cost is assumed to be proportional to the maximum number of buckets retrieved from a single disk. <p> we propose our new Cyclic allocation schemes, which are extensions of the Cyclic schemes for two-dimensional data. 2.1 Existing Approaches Several different techniques have been proposed for relational databases including the Disk Modulo or DM approach [5] also known as the CMD approach [10], the Field-wise eXclusive or FX approach <ref> [9] </ref>, the Gray code approach [8] and the HCAM approach [6]. Two approaches based upon error correcting codes are [7] and [1]. Two schemes that have been proposed for only two-dimensional data are FIB [4] and the Cyclic approach [11]. <p> In [2], it was shown that strictly optimal allocations exist in only very special cases for two-dimensional data. The Disk Modulo or DM approach [5] is defined as: DM (X) = ( j=0 The Fieldwise eXclusive or FX approach <ref> [9] </ref> is defined as: F X (X) = (b 0 b 1 b d1 ) mod M where b j is the binary representation of x j and represents the bitwise exclusive-OR operator.
Reference: [10] <author> J. Li, J. Srivastava, and D. Rotem. CMD: </author> <title> a multidimensional declustering method for parallel database systems. </title> <booktitle> In Proceedings of the Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 314, </pages> <address> Vancouver, Canada, </address> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: Next, we propose our new Cyclic allocation schemes, which are extensions of the Cyclic schemes for two-dimensional data. 2.1 Existing Approaches Several different techniques have been proposed for relational databases including the Disk Modulo or DM approach [5] also known as the CMD approach <ref> [10] </ref>, the Field-wise eXclusive or FX approach [9], the Gray code approach [8] and the HCAM approach [6]. Two approaches based upon error correcting codes are [7] and [1]. Two schemes that have been proposed for only two-dimensional data are FIB [4] and the Cyclic approach [11].
Reference: [11] <author> S. Prabhakar, K. Abdel-Ghaffar, D. Agrawal, and A. El Ab-badi. </author> <title> Cyclic allocation of two-dimensional data. </title> <booktitle> In Proc. of the International Conference on Data Engineering, </booktitle> <pages> pages 94101, </pages> <address> Orlando, Florida, </address> <month> Feb </month> <year> 1998. </year>
Reference-contexts: However, this is highly wasteful and requires too many disks. Alter natively, the problem can be viewed as one of maximizing the parallelism with a given number of disks. The problem of distributing multidimensional buckets to optimize the performance of range queries has been well studied in the literature <ref> [1, 2, 4, 5, 6, 9, 11] </ref>. The goal is to maximize parallelism. For any set of buckets to be retrieved together, the cost is assumed to be proportional to the maximum number of buckets retrieved from a single disk. <p> In this paper we propose a new multidimensional decluster-ing technique, called Cyclic declustering, based upon cyclic schemes for two-dimensional data which have been shown to achieve significant performance improvements over the other leading schemes <ref> [11] </ref>. The superior performance of Cyclic allocation in two dimensions was achieved through an exhaustive search. As the number of dimensions increases such a brute force approach is unrealistic and practically infeasible. We start by showing that an exhaustive search is unnecessary. <p> Two approaches based upon error correcting codes are [7] and [1]. Two schemes that have been proposed for only two-dimensional data are FIB [4] and the Cyclic approach <ref> [11] </ref>. The Cyclic allocation schemes developed for two-dimensional range queries were adapted for similarity queries in [12]. The access pattern Symbol Meaning M Number of Disks d Number of Dimensions N i Number of Buckets in Dimension i x i Coordinate of Bucket in Dimension i Table 1. <p> The HCAM approach [6] is defined as: HCAM (X) = hilbert order (X) mod M where the function hilbert order () returns the entry in the Hilbert sequence corresponding to the input coordinates. The Hilbert sequence maps a multidimensional space into a linear order. The Cyclic allocation schemes <ref> [11] </ref>, defined only for two dimensions, allocate bucket (x 0 ; x 1 ) to disk Cyclic (x 0 ; x 1 ) = (x 0 + x 1 fl H) mod M where the value of H is chosen to ensure good declustering. <p> The value of H, also called the skip value, is the key factor determining the performance of the Cyclic scheme. A good choice of H depends upon the value of M . Techniques for determining appropriate values of H are described in <ref> [11] </ref>. The key idea is that H should be relatively prime with respect to M and H 6= 1. The relative performance of the above schemes for range queries in two dimensions was studied in [11]. Several comparisons of the above schemes were made. <p> Techniques for determining appropriate values of H are described in <ref> [11] </ref>. The key idea is that H should be relatively prime with respect to M and H 6= 1. The relative performance of the above schemes for range queries in two dimensions was studied in [11]. Several comparisons of the above schemes were made. The effectiveness of declustering achieved by each scheme relative to the lower bound was evaluated. It was found that all Cyclic schemes achieve higher levels of declustering than the other schemes. <p> M = F 2r+1 r &gt; 0. FIB is equivalent to a Cyclic scheme for two dimensions with skip H = F 2r , i.e. the previous Fibonacci number from M . We extended FIB for general values of M for two dimensions <ref> [11] </ref>. We now extend it for higher dimensions. The new scheme is called GFIB or Generalized FIB. The Fibonacci sequence can be viewed as a mapping from a non-negative integer (the index) to another non-negative integer, e.g. 0 ! 0; 1 ! 1; ; 3 ! 2; .
Reference: [12] <author> S. Prabhakar, D. Agrawal, and A. El Abbadi. </author> <title> Efficient disk allocation for fast similarity searching. </title> <booktitle> In Proc. of the 10th Int. Sym. on Parallel Algorithms and Architectures, </booktitle> <pages> pages 7887, </pages> <address> Puerto Vallarta, Mexico, </address> <month> June </month> <year> 1998. </year>
Reference-contexts: Two approaches based upon error correcting codes are [7] and [1]. Two schemes that have been proposed for only two-dimensional data are FIB [4] and the Cyclic approach [11]. The Cyclic allocation schemes developed for two-dimensional range queries were adapted for similarity queries in <ref> [12] </ref>. The access pattern Symbol Meaning M Number of Disks d Number of Dimensions N i Number of Buckets in Dimension i x i Coordinate of Bucket in Dimension i Table 1.
Reference: [13] <author> K. E. Seamons and M. Winslett. </author> <title> Multidimensional array I/O in Panda 1.0. </title> <journal> Journal of Supercomputing, </journal> <volume> 10(2):191211, </volume> <year> 1996. </year>
Reference-contexts: It was found that all Cyclic schemes achieve higher levels of declustering than the other schemes. A Cyclic scheme based upon exhaustive search always gave the best performance. The use of parallel I/O for improving the performance of parallel programs managing multidimensional arrays has also been investigated in <ref> [14, 13] </ref>. In [14], it is assumed that the array is divided among the processors using HPF-like BLOCK and CYCLIC statements. Data for a processor may be local or stored globally across all processors. Performance improvements are made through collective I/O, prefetching, and sieving. <p> Data for a processor may be local or stored globally across all processors. Performance improvements are made through collective I/O, prefetching, and sieving. The allocation of data to disks is, however, not explicitly controlled. The PANDA project <ref> [13] </ref>, is designed for distributed memory parallel machines with a parallel file system. The multidimensional array is divided into chunks which are stored consecutively in a file. Chunks from multiple arrays can be interleaved in a single file.
Reference: [14] <author> R. Thakur, A. Choudhary, R. Bordawekar, S. More, and S. Kuditipudi. </author> <title> PASSION optimized I/O for parallel applications. </title> <journal> IEEE Computer, </journal> <volume> 29(6):7078, </volume> <month> June </month> <year> 1996. </year>
Reference-contexts: It was found that all Cyclic schemes achieve higher levels of declustering than the other schemes. A Cyclic scheme based upon exhaustive search always gave the best performance. The use of parallel I/O for improving the performance of parallel programs managing multidimensional arrays has also been investigated in <ref> [14, 13] </ref>. In [14], it is assumed that the array is divided among the processors using HPF-like BLOCK and CYCLIC statements. Data for a processor may be local or stored globally across all processors. Performance improvements are made through collective I/O, prefetching, and sieving. <p> A Cyclic scheme based upon exhaustive search always gave the best performance. The use of parallel I/O for improving the performance of parallel programs managing multidimensional arrays has also been investigated in [14, 13]. In <ref> [14] </ref>, it is assumed that the array is divided among the processors using HPF-like BLOCK and CYCLIC statements. Data for a processor may be local or stored globally across all processors. Performance improvements are made through collective I/O, prefetching, and sieving.
References-found: 14

