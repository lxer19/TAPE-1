URL: ftp://ftp.cs.utexas.edu/pub/lam/tr95-36.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/lam/NRL/video_services.html
Root-URL: 
Title: Operating System Techniques for Distributed Multimedia  
Author: David K.Y. Yau and Simon S. Lam 
Date: July 17, 1995 January 2, 1996 (revised)  
Address: Austin, Texas 78712-1188  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Pubnum: TR-95-36  
Abstract: In designing operating system support for distributed multimedia, we target three areas for improvement: reduced copying, reduced reliance on explicit kernel-user interactions, and provision of rate-based flow control. Towards these goals, we propose an architecture that includes the concept of I/O efficient buffers for reduced copying, the concept of fast system calls for low latency network access, and the concept of kernel threads for flow control. Also included is a concept called direct media streaming which is suitable for applications that require limited user processing of media data. These concepts have been implemented as an extension to SunOS 5.3 (the operating system component of Solaris 2.3). We report some experimental results on the performance of our current system. fl Research supported in part by National Science Foundation under grant no. NCR-9506048 and by a grant from AT&T Foundation. An earlier version of this paper appeared in Proceedings IS&T/SPIE Multimedia Computing and Networking (MMCN '96), January 1996. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David P. Anderson. </author> <title> Metascheduling for continuous media. </title> <journal> ACM Trans. Computer Systems, </journal> <volume> 11(3) </volume> <pages> 226-252, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: The scheduling algorithms presented in Section 8 are extensions of rate-based proposals for packet scheduling in a network switch [12, 13], and for metascheduling of continuous media <ref> [1] </ref>. Our algorithms have been designed for send scheduling by a kernel thread that is a periodic server (as opposed to a continuous server assumed in [12, 13]).
Reference: [2] <author> Flavio Bonomi and Kerry W. Fendick. </author> <title> The rate-based flow control framework for the available bit rate ATM service. </title> <journal> IEEE Network, </journal> <month> March/April </month> <year> 1995. </year>
Reference-contexts: Third, the delivery of media data generally requires real-time QoS (such as delay and throughput) guarantees to ensure smooth playback. We therefore expect that future multimedia applications will negotiate with networks for reserved-rate connections|such as those considered in <ref> [2] </ref> and [8]. To obtain QoS guarantees, the packet arrivals to a reserved-rate connection are required to satisfy certain flow specifications. Operating system support for implementing rate-based flow control is essential. The balance of this paper is organized as follows.
Reference: [3] <author> C. Cranor and G.M. Parulkar. </author> <title> Design of universal continuous media I/O. </title> <booktitle> In Proc. </booktitle> <volume> NOSSDAV '95, </volume> <pages> pages 83-86, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Our algorithms have been designed for send scheduling by a kernel thread that is a periodic server (as opposed to a continuous server assumed in [12, 13]). Elimination of system calls for sending has also been proposed in <ref> [3] </ref> where requests to send are polled in the clock interrupt handler. Some issues considered herein, such as order of interleaving of sends by different user processes as well as impact on end-to-end delay, were not considered in [3]. An approach similar to direct media streaming was mentioned in [5]. <p> Elimination of system calls for sending has also been proposed in <ref> [3] </ref> where requests to send are polled in the clock interrupt handler. Some issues considered herein, such as order of interleaving of sends by different user processes as well as impact on end-to-end delay, were not considered in [3]. An approach similar to direct media streaming was mentioned in [5]. We have investigated the idea more carefully. In particular, we have implemented an audio write path in SunOS 5.3 and studied its performance.
Reference: [4] <author> Chris Dalton, Greg Watson, David Banks, Costas Calamvokis, Aled Edwards, and John Lumley. </author> <title> Afterburner. </title> <journal> IEEE Network, </journal> <pages> pages 36-43, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: The concept of I/O efficient buffers is similar to various proposals for minimizing data copies, e.g., <ref> [4] </ref>, [6], and [10]. Independent threads of control for network I/O have been used in several systems, such as [7].
Reference: [5] <author> Peter Druschel. </author> <title> Operating system support for high-speed networking. </title> <type> Technical Report 94-24 (Ph.D. Dissertation), </type> <institution> The University of Arizona, Tucson, Arizona, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: And as network bandwidth increases, it is approaching the same order of magnitude as memory bandwidth. Therefore, memory bandwidth may become the communication bottleneck if memory copies are not carefully minimized <ref> [5] </ref>. Second, data flows generated by multimedia applications have characteristics that are more predictable than conventional data traffic. In a server for video playback, for example, pictures are made available for sending once every frame period. <p> Some issues considered herein, such as order of interleaving of sends by different user processes as well as impact on end-to-end delay, were not considered in [3]. An approach similar to direct media streaming was mentioned in <ref> [5] </ref>. We have investigated the idea more carefully. In particular, we have implemented an audio write path in SunOS 5.3 and studied its performance. Lastly, we have described and evaluated two particular applications of our architecture for supporting distributed multimedia. 21
Reference: [6] <author> Peter Druschel and Larry L. Peterson. Fbufs: </author> <title> A high-bandwidth cross-domain transfer facility. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 189-202, </pages> <year> 1993. </year>
Reference-contexts: The concept of I/O efficient buffers is similar to various proposals for minimizing data copies, e.g., [4], <ref> [6] </ref>, and [10]. Independent threads of control for network I/O have been used in several systems, such as [7].
Reference: [7] <author> Paul W. Jardetzky, Cormac J. Sreenan, and Roger M. Needham. </author> <title> Storage and synchronization for distributed continuous media. </title> <journal> Multimedia Systems, </journal> <volume> 3 </volume> <pages> 151-161, </pages> <year> 1995. </year>
Reference-contexts: The concept of I/O efficient buffers is similar to various proposals for minimizing data copies, e.g., [4], [6], and [10]. Independent threads of control for network I/O have been used in several systems, such as <ref> [7] </ref>. We have shown how a thread of control implemented in kernel space can 1) efficiently support sends to the network by user processes, and 2) provide rate-based flow control to a reserved-rate network connection.
Reference: [8] <author> C. Partridge. </author> <title> A proposed flow specification. Internet RFC 1363, </title> <month> September </month> <year> 1992. </year>
Reference-contexts: Third, the delivery of media data generally requires real-time QoS (such as delay and throughput) guarantees to ensure smooth playback. We therefore expect that future multimedia applications will negotiate with networks for reserved-rate connections|such as those considered in [2] and <ref> [8] </ref>. To obtain QoS guarantees, the packet arrivals to a reserved-rate connection are required to satisfy certain flow specifications. Operating system support for implementing rate-based flow control is essential. The balance of this paper is organized as follows.
Reference: [9] <author> D.M. Ritchie. </author> <title> A stream input-output system. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 63(8) </volume> <pages> 1897-1910, </pages> <month> October </month> <year> 1984. </year>
Reference-contexts: We elaborate upon this observation below. First, consider the read/write paths between a user process and the Ethernet interface in SunOS 5.3, whose networking subsystem is implemented using streams <ref> [9] </ref>. When a write () system call occurs, the user data are copied by a stream head into stream buffers; if necessary, the data are segmented into multiple stream messages, e.g., to conform to Ethernet's packet size. The stream messages are then queued for processing by the Ethernet driver.
Reference: [10] <author> Jonathan M. Smith, C. Brendan, and S. Traw. </author> <title> Giving applications access to Gb/s networking. </title> <journal> IEEE Network, </journal> <pages> pages 44-52, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: The concept of I/O efficient buffers is similar to various proposals for minimizing data copies, e.g., [4], [6], and <ref> [10] </ref>. Independent threads of control for network I/O have been used in several systems, such as [7].
Reference: [11] <author> C.A. Thekkath, T.D. Nguyen, E. Moy, and E.D. Lazowska. </author> <title> Implementing network protocols at user level. </title> <journal> IEEE/ACM Trans. Networking, </journal> <volume> 1(5) </volume> <pages> 554-565, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Our proposed architecture is illustrated in Figure 3. Networking protocols may be implemented in kernel space or user space. In this paper, we assume a user-level protocol implementation called the protocol server model <ref> [11] </ref>, which facilitates protocol development and customization. From a performance point of view, application and performance-critical protocol code run in the same protection domain; communication between them does not need kernel intervention. We have left device management in kernel space. There are two reasons.
Reference: [12] <author> Geoffrey G. Xie and Simon S. Lam. </author> <title> Delay guarantee of Virtual Clock server. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 3(6) </volume> <pages> 683-689, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: The scheduling algorithms presented in Section 8 are extensions of rate-based proposals for packet scheduling in a network switch <ref> [12, 13] </ref>, and for metascheduling of continuous media [1]. Our algorithms have been designed for send scheduling by a kernel thread that is a periodic server (as opposed to a continuous server assumed in [12, 13]). <p> presented in Section 8 are extensions of rate-based proposals for packet scheduling in a network switch <ref> [12, 13] </ref>, and for metascheduling of continuous media [1]. Our algorithms have been designed for send scheduling by a kernel thread that is a periodic server (as opposed to a continuous server assumed in [12, 13]). Elimination of system calls for sending has also been proposed in [3] where requests to send are polled in the clock interrupt handler.
Reference: [13] <author> Lixia Zhang. </author> <title> Virtual clock: A new traffic control algorithm for packet switching networks. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(2) </volume> <pages> 101-124, </pages> <month> May </month> <year> 1991. </year> <month> 22 </month>
Reference-contexts: The scheduling algorithms presented in Section 8 are extensions of rate-based proposals for packet scheduling in a network switch <ref> [12, 13] </ref>, and for metascheduling of continuous media [1]. Our algorithms have been designed for send scheduling by a kernel thread that is a periodic server (as opposed to a continuous server assumed in [12, 13]). <p> presented in Section 8 are extensions of rate-based proposals for packet scheduling in a network switch <ref> [12, 13] </ref>, and for metascheduling of continuous media [1]. Our algorithms have been designed for send scheduling by a kernel thread that is a periodic server (as opposed to a continuous server assumed in [12, 13]). Elimination of system calls for sending has also been proposed in [3] where requests to send are polled in the clock interrupt handler.
References-found: 13

