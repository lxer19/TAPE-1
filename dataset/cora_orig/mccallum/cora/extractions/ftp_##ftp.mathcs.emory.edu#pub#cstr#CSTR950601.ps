URL: ftp://ftp.mathcs.emory.edu/pub/cstr/CSTR950601.ps
Refering-URL: http://www.mathcs.emory.edu/pious.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: moyer@mathcs.emory.edu  vss@mathcs.emory.edu  
Title: Characterizing Concurrency Control Performance for the PIOUS Parallel File System  
Author: Steven A. Moyer and V. S. Sunderam 
Note: Research supported by the National Science Foundation, under awards CCR-9118787 and ASC-9214149, the U. S. Department of Energy, under grant DE-FG05-91ER25105, the Office of Naval Research, under grant N00014-93-1-0278, the Army Research Office, under grant ARO-93G0045, and the National Aeronautics and Space Administration, under grant NAG2-828.  
Date: June 1995  
Address: Atlanta, GA 30322, USA  
Affiliation: Department of Math and Computer Science Emory University,  
Pubnum: Computer Science Technical Report CSTR-950601  
Abstract-found: 0
Intro-found: 1
Reference: [BHG87] <author> Philip Bernstein, Vassos Hadzilacos, and Nathan Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: This brief summary of transactions and serializability theory provides sufficient background to support our discussion on how volatile transaction are implemented as the concur-rency control mechanism in the PIOUS file system. A thorough treatment of serializability and fault-tolerance in database systems is presented by Bernstein et al. <ref> [BHG87] </ref>. 3.2 Implementation Incorporating volatile transactions into the generic parallel file system architecture, such as implemented by PIOUS, requires that the I/O daemons be augmented with a scheduler to guarantee that data access operations are performed according to a serializable schedule. 1 A transaction-issued abort is considered normal termination in this <p> Fortunately, deadlock avoidance techniques are well known and have been the subject of numerous studies <ref> [BHG87] </ref>. A simple and efficient solution, and the one employed in the PIOUS file system, is for an I/O daemon to timeout a request that has been delayed too long waiting on a lock, and reply indicating failure. The transaction can then be aborted and re-tried.
Reference: [CF94] <author> Peter F. Corbett and Dror G. Feitelson. </author> <title> Design and implementation of the Vesta parallel file system. </title> <booktitle> In Proceedings of the Scalable High-Performance Computing Conference, </booktitle> <pages> pages 63-70, </pages> <year> 1994. </year>
Reference-contexts: Thus SDS scheduling can never lead to an invalid state. SDS algorithms distribute global state information in the form of a token that is circulated among all I/O daemons servicing a file operation. Commercial parallel file systems that implement concurrency control employ SDS scheduling algorithms; IBM's Vesta <ref> [CF94] </ref> is one such example. However, studies indicate that parallel file system workloads exhibit a relatively small amount of read-write and write-write file byte sharing [KN94]; hence most data accesses can be scheduled in parallel without conflict.
Reference: [Cro89] <author> Thomas W. Crockett. </author> <title> File concepts for parallel I/O. </title> <booktitle> In Proceedings of Supercomputing '89, </booktitle> <pages> pages 574-579, </pages> <year> 1989. </year>
Reference-contexts: This section examines the effects of the PIOUS concurrency control mechanism on system scalability for a simple benchmark application. 4.3.1 PAT Benchmark We define the partitioned access throughput (PAT) benchmark to be a parallel program that reads or writes a file using the partitioned sequential access pattern <ref> [Cro89] </ref> employed by many parallel computations. Partitioned access divides a linear file into contiguous blocks, one per process, with each block accessed sequentially by a different process.
Reference: [dC94] <author> Juan Miguel del Rosario and Alok Choudhary. </author> <title> High performance I/O for parallel computers: Problems and prospects. </title> <journal> IEEE Computer, </journal> <volume> 27(3) </volume> <pages> 59-68, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Parallel computers commonly employ a parallel file system in an effort to offset the growing disparity in computational and I/O capability <ref> [dC94] </ref>. Parallel file systems address the I/O bottleneck by logically aggregating multiple independent storage devices into a single high-performance storage subsystem. Capacity increases naturally as a function of the number of devices.
Reference: [FCP95] <author> Dror G. Feitelson, Peter F. Corbett, and Jean-Pierre Prost. </author> <title> Performance of the vesta parallel file system. </title> <booktitle> In Proceedings of the Ninth International Parallel Processing Symposium, </booktitle> <pages> pages 150-158, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: employed 5 The Optimal-PAT application consists of approximately 130 lines of C code, whereas the PIOUS file system consists of approximately 10000 lines of C code. 6 No significance should be attributed to the use of the constant 384. 11 Emory University CSTR-950601 in other parallel file system performance studies <ref> [FCP95] </ref>.
Reference: [FPD91] <author> James C. French, Terrence W. Pratt, and Mriganka Das. </author> <title> Performance measurement of a parallel input/output system for the Intel iPSC/2 hypercube. </title> <booktitle> In Proceedings of the 1991 ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 178-187, </pages> <year> 1991. </year>
Reference-contexts: File size must be sufficient such that each process' partition is a "reasonable" multiple of the data stripe size, and each file read or file write operation must access exactly one data stripe. Throughput must be measured in terms of the minimum sustained aggregate rate <ref> [FPD91] </ref>, the data rate obtained by all processes as perceived by an outside observer. Note that the PAT benchmark emphasizes file system scalability since individual read and write operations can be serviced in parallel by all storage devices.
Reference: [GS92] <author> G. A. Geist and V. S. Sunderam. </author> <title> Network-based concurrent computing on the PVM system. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 4(4) </volume> <pages> 293-311, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: In this paper we present an overview of the concurrency control problem and describe the transaction-based solution implemented in PIOUS [MS94a, MS94b, MS95], a parallel file system for the PVM <ref> [Sun90, GS92] </ref> virtual parallel computer. Experimental results are then presented that characterize the scalability and stability of the PIOUS concurrency control mechanism for important workload parameters. 2 Concurrency Control When providing access to shared storage, sequential consistency [Lam79] semantics are commonly specified as the definition of correct system operation.
Reference: [HW90] <author> M. P. Herlihy and J. M. Wing. </author> <title> Linearizability: A correctness condition for concurrent objects. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(3) </volume> <pages> 463-492, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: File systems often support an even stronger consistency model called linearizability <ref> [HW90] </ref>, whereby sequentially consistent access operations must take effect in the indicated order of completion. The Unix file system is an example of a system that provides linearizable access to shared files.
Reference: [KN94] <author> David Kotz and Nils Nieuwejaar. </author> <title> Dynamic file-access characteristics of a production parallel scientific workload. </title> <booktitle> In Proceedings of Supercomputing '94, </booktitle> <pages> pages 640-649, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Commercial parallel file systems that implement concurrency control employ SDS scheduling algorithms; IBM's Vesta [CF94] is one such example. However, studies indicate that parallel file system workloads exhibit a relatively small amount of read-write and write-write file byte sharing <ref> [KN94] </ref>; hence most data accesses can be scheduled in parallel without conflict. Unlike SDS algorithms, CDS algorithms exploit this workload characteristic and also provide the opportunity to efficiently multicast global state information.
Reference: [Lam79] <author> Leslie Lamport. </author> <title> How to make a multiprocessor computer that correctly executes multiprocess programs. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-28(9):690-691, </volume> <month> September </month> <year> 1979. </year>
Reference-contexts: Experimental results are then presented that characterize the scalability and stability of the PIOUS concurrency control mechanism for important workload parameters. 2 Concurrency Control When providing access to shared storage, sequential consistency <ref> [Lam79] </ref> semantics are commonly specified as the definition of correct system operation.
Reference: [MS94a] <author> Steven A. Moyer and V. S. Sunderam. </author> <title> A parallel I/O system for high-performance distributed computing. </title> <booktitle> In Proceedings of the IFIP WG10.3 Working Conference on Programming Environments for Massively Parallel Distributed Systems, </booktitle> <year> 1994. </year>
Reference-contexts: But concurrency control negates some of the performance benefits of data declustering by introducing additional overhead into the minimal file access sequence described above. In this paper we present an overview of the concurrency control problem and describe the transaction-based solution implemented in PIOUS <ref> [MS94a, MS94b, MS95] </ref>, a parallel file system for the PVM [Sun90, GS92] virtual parallel computer.
Reference: [MS94b] <author> Steven A. Moyer and V. S. Sunderam. </author> <title> PIOUS: a scalable parallel I/O system for distributed computing environments. </title> <booktitle> In Proceedings of the Scalable High-Performance Computing Conference, </booktitle> <pages> pages 71-78, </pages> <year> 1994. </year> <institution> 24 Emory University CSTR-950601 </institution>
Reference-contexts: But concurrency control negates some of the performance benefits of data declustering by introducing additional overhead into the minimal file access sequence described above. In this paper we present an overview of the concurrency control problem and describe the transaction-based solution implemented in PIOUS <ref> [MS94a, MS94b, MS95] </ref>, a parallel file system for the PVM [Sun90, GS92] virtual parallel computer.
Reference: [MS95] <author> Steven A. Moyer and V. S. Sunderam. </author> <title> PIOUS for PVM: </title> <note> User's Guide and Reference Manual Version 1, 1995. Software and documentation available via the PIOUS home page at http://www.mathcs.emory.edu/pious.html. </note>
Reference-contexts: But concurrency control negates some of the performance benefits of data declustering by introducing additional overhead into the minimal file access sequence described above. In this paper we present an overview of the concurrency control problem and describe the transaction-based solution implemented in PIOUS <ref> [MS94a, MS94b, MS95] </ref>, a parallel file system for the PVM [Sun90, GS92] virtual parallel computer.
Reference: [SGM86] <author> Kenneth Salem and Hector Garcia-Molina. </author> <title> Disk striping. </title> <booktitle> In IEEE 1986 Conference on Data Engineering, </booktitle> <pages> pages 336-342, </pages> <year> 1986. </year>
Reference-contexts: Figure 4 illustrates this file access pattern for a parallel computation consisting of four processes. 9 Emory University CSTR-950601 The PAT benchmark specifies that file data must be declustered according to a distribution pattern known as disk striping <ref> [SGM86] </ref>. In disk striping, a linear sequence of fixed size data blocks, called striping-units, are distributed in round-robin fashion across some number of storage devices. A data stripe consists of the set of striping-units distributed in a single round.
Reference: [Sun90] <author> V. S. Sunderam. </author> <title> PVM: A framework for parallel distributed computing. </title> <journal> Concur-rency: Practice and Experience, </journal> <volume> 2(4) </volume> <pages> 315-339, </pages> <month> December </month> <year> 1990. </year> <month> 25 </month>
Reference-contexts: In this paper we present an overview of the concurrency control problem and describe the transaction-based solution implemented in PIOUS [MS94a, MS94b, MS95], a parallel file system for the PVM <ref> [Sun90, GS92] </ref> virtual parallel computer. Experimental results are then presented that characterize the scalability and stability of the PIOUS concurrency control mechanism for important workload parameters. 2 Concurrency Control When providing access to shared storage, sequential consistency [Lam79] semantics are commonly specified as the definition of correct system operation.
References-found: 15

