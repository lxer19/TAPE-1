URL: ftp://ftp.cs.brown.edu/pub/techreports/91/cs91-51.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-91-51.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [Adc91] <author> Jim Adcock. </author> <title> Is This Identity? The C++ Report, </title> <type> 3(2), </type> <month> February </month> <year> 1991. </year>
Reference-contexts: Readers interested in a more complete discussion of the problems involved in detecting object identity in C++ may wish to consult Adcock's article <ref> [Adc91] </ref>. 6. Problems related to the return value of a member function. (a) Returning a non-const reference to or pointer to data within an object from a const function.
Reference: [CL90a] <author> Marshall P. Cline and Doug Lea. </author> <title> The Behavior of C++ Classes. </title> <booktitle> In Proceedings of the Symposium on Object-Oriented Programming Emphasizing Practical Applications (SOOPPA), </booktitle> <pages> pages 81-91, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: When this work is completed, xlint will be much more configurable. Support for formal design constraints in the form of assertions or annotations was designed into Eiffel [Mey88], has been grafted onto Ada in the language Anna [LvHKBO87], and has been proposed for C++ in the form of A++ <ref> [CL90b, CL90a] </ref>. This work, however, has grown out of the theory of abstract data types [LG86], and has tended to limit itself to formally specifying the semantics of individual functions and/or collections of functions (e.g., how the member functions within a class relate to one another).
Reference: [CL90b] <author> Marshall P. Cline and Doug Lea. </author> <booktitle> Using Annotated C++ . In Proceedings of C++ at Work - '90, </booktitle> <pages> pages 65-71, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: When this work is completed, xlint will be much more configurable. Support for formal design constraints in the form of assertions or annotations was designed into Eiffel [Mey88], has been grafted onto Ada in the language Anna [LvHKBO87], and has been proposed for C++ in the form of A++ <ref> [CL90b, CL90a] </ref>. This work, however, has grown out of the theory of abstract data types [LG86], and has tended to limit itself to formally specifying the semantics of individual functions and/or collections of functions (e.g., how the member functions within a class relate to one another).
Reference: [D'S90] <author> Desmond D'Souza. </author> <title> Inheritance, Virtual Base Classes, and Casts. The C++ Report, </title> <type> 2(7), </type> <month> July/August </month> <year> 1990. </year>
Reference-contexts: However, it circumvents C++'s strong typing, it's brittle in the face of code changes (what you used to "know" isn't true anymore!), and it is illegal for pointers to virtual base classes. In every case such capricious casting can be replaced with safe casts through virtual functions <ref> [D'S90] </ref>, and only rarely is the performance penalty serious enough to warrant concern. 11. Passing an object by value.
Reference: [ES90] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison Wesley, </publisher> <year> 1990. </year>
Reference-contexts: A more sophisticated lint++ might want to issue a warning only if the class defines at least one virtual function. In fact, the justification for destructors not being virtual by default is that it is sometimes essential to create classes requiring no virtual table <ref> [ES90, p. 278] </ref>. 3. Failing to define a copy constructor or operator= for a class with dynam ically allocated memory. If a C (const& C) constructor (a copy constructor ) or operator= member function is not declared, C++ provides a default implementation for them based on memberwise initialization/assignment.
Reference: [Gre91] <author> Roger Gregory. </author> <type> Personal Communication. </type> <month> January </month> <year> 1991. </year>
Reference-contexts: the Law of Demeter without even knowing it. xlint is a program that catches some of the errors we list in this paper, but it is really designed to enforce a particular set of corporate programming guidelines, and as such is less general that the kind of tool we propose <ref> [Gre91] </ref>. However, work is underway to extend xlint so that the kinds of conditions it looks for are specified in an external file. When this work is completed, xlint will be much more configurable.
Reference: [Han90] <author> Tony L. Hansen. </author> <title> The C++ Answer Book. </title> <publisher> Addison Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Failing to check for assignment to self in operator=. Given an object x, the need to cope with assignments of the form x = x has long been recognized [Str86, p. 179]. Yet the possibility of this type of assignment is frequently overlooked even experts forget it, e.g., <ref> [Han90, p. 234] </ref> and [Lip89, p. 267]. Its omission can be disastrous.
Reference: [LG86] <author> Barbara Liskov and John Guttag. </author> <title> Abstraction and Specification in Program Development. </title> <publisher> The MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: This work, however, has grown out of the theory of abstract data types <ref> [LG86] </ref>, and has tended to limit itself to formally specifying the semantics of individual functions and/or collections of functions (e.g., how the member functions within a class relate to one another).
Reference: [LH89] <author> Karl J. Lieberherr and Ian M. Holland. </author> <title> Assuring Good Style for Object-Oriented Programs. </title> <journal> IEEE Software, </journal> <pages> pages 38-48, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Lieberherr and his colleagues have proposed the Law of Demeter , a language-independent rule for achieving good style in object-oriented programs <ref> [LHR88, LH89] </ref>. This law, which in C++ imposes constraints on the behavior of member functions, is formal enough to be checked by a program (as noted by its developers).
Reference: [LHR88] <author> K. Lieberherr, I Holland, and A. Riel. </author> <title> Object-Oriented Programming: An Objective Sense of Style. </title> <editor> In Norman Meyrowitz, editor, </editor> <booktitle> Proceedings of the 1988 Conference on Object-Oriented Programming Systems, Languages and Applications (OOPSLA '88), </booktitle> <pages> pages 323-334. </pages> <publisher> ACM Press, </publisher> <year> 1988. </year> <note> Published as ACM SIGPLAN Notices 23:1, </note> <month> November </month> <year> 1988. </year>
Reference-contexts: Lieberherr and his colleagues have proposed the Law of Demeter , a language-independent rule for achieving good style in object-oriented programs <ref> [LHR88, LH89] </ref>. This law, which in C++ imposes constraints on the behavior of member functions, is formal enough to be checked by a program (as noted by its developers).
Reference: [Lip89] <author> Stanley B. Lippman. </author> <title> C++ Primer. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Given an object x, the need to cope with assignments of the form x = x has long been recognized [Str86, p. 179]. Yet the possibility of this type of assignment is frequently overlooked even experts forget it, e.g., [Han90, p. 234] and <ref> [Lip89, p. 267] </ref>. Its omission can be disastrous.
Reference: [LvHKBO87] <author> D. Luckham, F. von Henke, B. Krieg-Bruckner, and O. Owe. Anna, </author> <title> A Language for Annotating Ada Programs: Reference Manual, </title> <booktitle> volume 260 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: When this work is completed, xlint will be much more configurable. Support for formal design constraints in the form of assertions or annotations was designed into Eiffel [Mey88], has been grafted onto Ada in the language Anna <ref> [LvHKBO87] </ref>, and has been proposed for C++ in the form of A++ [CL90b, CL90a].
Reference: [Mey88] <author> Bertrand Meyer. </author> <title> Object-Oriented Software Construction. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: However, work is underway to extend xlint so that the kinds of conditions it looks for are specified in an external file. When this work is completed, xlint will be much more configurable. Support for formal design constraints in the form of assertions or annotations was designed into Eiffel <ref> [Mey88] </ref>, has been grafted onto Ada in the language Anna [LvHKBO87], and has been proposed for C++ in the form of A++ [CL90b, CL90a].
Reference: [Mur90] <author> Robert Murray. </author> <title> The C++ Puzzle. The C++ Report, </title> <type> 2(10), </type> <month> Novem-ber/December </month> <year> 1990. </year>
Reference-contexts: Unfortunately, simply returning a reference to a member of the class allows one to assign a value to the result of an assignment: (a = b) = c; // assign b to a, then assign c to a As Robert Murray has noted <ref> [Mur90] </ref>, "using assignment statements as lvalues is extremely unobvious and error prone. To block people from doing this, you can have operator= return a const [reference] instead of a normal [reference]." 5. Failing to check for assignment to self in operator=.
Reference: [Pac90] <author> Jim Packstone. </author> <title> Heuristics for Error-Free Operator Overloading. The C++ Insider, </title> <type> 1(2), </type> <month> October </month> <year> 1990. </year>
Reference-contexts: However, other workers have offered general guidelines as to how good classes should be developed. Riel and Carter have proposed a minimal public interface (a set of public functions) that all classes should offer [RC90], and Packstone has suggested a set of guidelines for properly implementing overloaded operators <ref> [Pac90] </ref>. Lieberherr and his colleagues have proposed the Law of Demeter , a language-independent rule for achieving good style in object-oriented programs [LHR88, LH89].
Reference: [RC90] <author> Arthur J. Riel and John A. Carter. </author> <title> Towards a Minimal Public Interface for C++ Classes. The C++ Insider, </title> <type> 1(1), </type> <month> October </month> <year> 1990. </year>
Reference-contexts: However, other workers have offered general guidelines as to how good classes should be developed. Riel and Carter have proposed a minimal public interface (a set of public functions) that all classes should offer <ref> [RC90] </ref>, and Packstone has suggested a set of guidelines for properly implementing overloaded operators [Pac90]. Lieberherr and his colleagues have proposed the Law of Demeter , a language-independent rule for achieving good style in object-oriented programs [LHR88, LH89].
Reference: [Str86] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison Wesley, </publisher> <year> 1986. </year>
Reference-contexts: To block people from doing this, you can have operator= return a const [reference] instead of a normal [reference]." 5. Failing to check for assignment to self in operator=. Given an object x, the need to cope with assignments of the form x = x has long been recognized <ref> [Str86, p. 179] </ref>. Yet the possibility of this type of assignment is frequently overlooked even experts forget it, e.g., [Han90, p. 234] and [Lip89, p. 267]. Its omission can be disastrous.
References-found: 17

