URL: http://american.cs.ucdavis.edu/publications/ISCA.91b.ps
Refering-URL: http://american.cs.ucdavis.edu/ArchLabPersonnel/Farrens/PubList.html
Root-URL: http://www.cs.ucdavis.edu
Email: email: farrens@cs.eecs.ucdavis.edu email: park@cs.eecs.ucdavis.edu  
Phone: tel: (916) 752-9678 tel: (916) 752-5183  
Title: d d Dynamic Base Register Caching: A Technique for Reducing Address Bus Width  
Author: Matthew Farrens Arvin Park 
Address: Davis, CA 95616 Davis, CA 95616  
Affiliation: Division of Computer Science Division of Computer Science University of California University of California  
Abstract: When address reference streams exhibit high degrees of spatial and temporal locality, many of the higher order address lines carry redundant information. By caching the higher order portions of address references in a set of dynamically allocated base registers, it becomes possible to transmit small register indices between the processor and memory instead of the high order address bits themselves. Trace driven simulations indicate that this technique can significantly reduce processor-to-memory address bus width without an appreciable loss in performance, thereby increasing available processor bandwidth. Our results imply that as much as 25% of the available I/O bandwidth of a processor is used less than 1% of the time. 
Abstract-found: 1
Intro-found: 1
Reference: [AgSH86] <author> A. Agarwal, R. L. Sites and M. Horowitz, ``ATUM: </author> <title> A New Technique for Capturing Address Traces Using Microcode'', </title> <booktitle> Proceedings of the Thirteenth Annual International Symposium on Computer Architecture, </booktitle> <address> Tokyo, Japan (June 2-5, </address> <year> 1986), </year> <pages> pp. 119-127. </pages>
Reference-contexts: The 5 traces were concatenated together, and treated as one large composite trace file. A total of 3,100,330 memory references (both data and instruction) are generated by this composite trace. In addition to the SPUR traces, the ATUM address traces (gathered using microcode patches on a VAX 8200 <ref> [AgSH86] </ref>) were also used. The ATUM traces consist of snapshots of address referencing activity from each of nine different programs running on Ultrix and VMS operating systems. These traces are of interest primarily because they include operating system references.
Reference: [BCDF87] <author> A. D. Berenbaum, B. W. Colbry, D. R. Ditzel, R. D. Freeman, H. R. McLellan, K. J. O'Connor and M. Shoji, </author> <title> ``CRISP: A Pipelined 32-bit Microprocessor with 13-kbit of Cache Memory'', </title> <journal> IEEEJSS, </journal> <volume> vol. </volume> <month> SC-22 (October </month> <year> 1987), </year> <pages> pp. 776-782. </pages>
Reference-contexts: Since the recent trend in single-chip processor design has been to include larger and larger on-chip caches <ref> [BCDF87, KoMa89] </ref>, simulations were also performed assuming that a cache was situated between the address generation logic and the external memory. This cache size varied from 256 to 32,768 bytes, and both a direct mapped and a fully associative cache were simulated.
Reference: [HaDa77] <author> D. Hammerstrom and E. Davidson, </author> <title> ``Information Content of CPU Memory Referencing Behavior'', </title> <booktitle> Proceedings of the Fourth Annual Symposium on Computer Architecture(March 1977), </booktitle> <pages> pp. 184-192. </pages>
Reference-contexts: Section 5 contains a discussion of the results of the simulations, which is followed in section 6 by the development of a metric called Address Line Utilization. 2. Background A study by Hammerstrom and Davidson <ref> [HaDa77] </ref> suggests that the information content of address reference d d streams tends to be very low.
Reference: [Hill87] <author> M. D. Hill, </author> <title> Aspects of Cache Memory and Instruction Buffer Performance, </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Sciences,, Berkeley, California, </institution> <month> (November </month> <year> 1987). </year>
Reference-contexts: The Traces The address stream traces used in this study were taken from several different sources. Five of the traces were taken from 3 LISP programs compiled for the SPUR architecture by Hill <ref> [Hill87] </ref>. Hill selected these samples to exhibit different but somewhat pessimistic locality profiles. These programs were Slc (the SPUR LISP compiler), Rsim (a circuit simulator simulating a counter), and Weaver (a production system for VLSI chip routing). <p> Sixteen address lines are enough to handle 99.75% of all requests generated by the processor! when the maximum amount of locality has been removed. on-chip cache affects the performance of the different DBRC configurations. (The on-chip cache is assumed to be direct mapped for reasons given in <ref> [Hill87, Joup89] </ref>) The on-chip cache hit rate in this figure is 88.9%. In figure 6a, a fully associative DBRC is simulated, while in figure 6b the DBRC is direct mapped.
Reference: [Joup89] <author> N. Jouppi, </author> <title> ``Architectural and Organizational Tradeoffs in the Design of the MultiTitan CPU'', </title> <booktitle> Proceedings of the Sixteenth Annual International Symposium on Computer Architecture, </booktitle> <volume> vol. 17, no. </volume> <month> 3 (June </month> <year> 1989), </year> <pages> pp. 281-289. </pages>
Reference-contexts: Sixteen address lines are enough to handle 99.75% of all requests generated by the processor! when the maximum amount of locality has been removed. on-chip cache affects the performance of the different DBRC configurations. (The on-chip cache is assumed to be direct mapped for reasons given in <ref> [Hill87, Joup89] </ref>) The on-chip cache hit rate in this figure is 88.9%. In figure 6a, a fully associative DBRC is simulated, while in figure 6b the DBRC is direct mapped.
Reference: [Joup90] <author> N. Jouppi, </author> <title> ``Improving Direct-Mapped Cache Performance by the Addition of a Small Fully-Associative Cache and Prefetch Buffers'', </title> <booktitle> Proceedings of the Seventeenth Annual International Symposium on Computer Architecture, </booktitle> <volume> vol. 18, no. </volume> <month> 2 (May </month> <year> 1990), </year> <pages> pp. 364-373. </pages>
Reference-contexts: With only seven elements, the DBRC hit ratio is almost 94%. This effect is similar to that pointed out by Jouppi in <ref> [Joup90] </ref>, where he found that a small (2-5 element) associative cache located behind a large direct mapped cache was very effective at removing many conflict misses.
Reference: [KoMa89] <author> L. Kohn and N. Margulis, </author> <title> ``The i860 64-bit Supercomputing Microprocessor'', </title> <booktitle> Proceedings of Supercomputing 1989, </booktitle> <address> Reno, Nevada (November 13-17, </address> <year> 1989), </year> <pages> pp. 450-456. </pages>
Reference-contexts: Since the recent trend in single-chip processor design has been to include larger and larger on-chip caches <ref> [BCDF87, KoMa89] </ref>, simulations were also performed assuming that a cache was situated between the address generation logic and the external memory. This cache size varied from 256 to 32,768 bytes, and both a direct mapped and a fully associative cache were simulated.
Reference: [PlRD81] <author> A. R. Pleszkun, B. R. Rau and E. S. Davidson, </author> <title> ``An Address Prediction Mechanism for Reducing Processor-Memory Address Bandwidth'', </title> <booktitle> Proceedings of the 1981 IEEE Workshop on Computer Architecture for Pattern Analysis and Image Database Management(Nov. </booktitle> <volume> 11, </volume> <year> 1981), </year> <pages> pp. 141-148. </pages>
Reference-contexts: Hammerstrom and Davidson show that a significant reduction in the number of address lines needed is possible using this scheme. A similar study was performed by Pleszkun, Rau and Davidson <ref> [PlRD81] </ref>. They propose an address prediction stack, which features a stack of commonly referenced blocks of sequential addresses. If an address is contained in this stack, a small stack location descriptor can be sent from processor to memory instead of the entire address.
References-found: 8

