URL: http://www.cs.umd.edu/users/sjsmith/phd/main.ps
Refering-URL: http://www.cs.umd.edu/~sjsmith/phd/index.html
Root-URL: 
Title: using Total-Order Forward Search, and Applications to Bridge and to Microwave Module Manufacture  
Author: Stephen J. J. Smith, Dana S. Nau 
Degree: Doctor of Philosophy, 1997  
Affiliation: Department of Computer Science  
Note: Abstract Title of Dissertation: Task-Network Planning  Dissertation directed by: Professor  I have applied TOFS successfully to two very different real-world problems.  
Abstract: Because most real-world planning problems are difficult, AI planning researchers have needed to make simplifying assumptions in order to solve some of these problems at all. These simplifying assumptions eliminated some of the difficult features that need to be considered to solve other problems. For example, in existing AI planning algorithms, the approaches to dealing with uncertainty and numerical values are insufficient to handle many important problems. To address these limitations, I have developed a new variant of Hierarchical Task Network (HTN) planning, which I call planning using TOFS (Total-Order Forward Search). In TOFS, a planner always instantiates the operators in a plan in the order that they will be executed. 
Abstract-found: 1
Intro-found: 1
Reference: <editor> "I cannot live without books." | Thomas Jefferson, </editor> <title> letter to John Adams, </title> <note> 10 June 1815 ([13], p. 389) </note>
Reference: [1] <author> ABBA. </author> <year> 1980. </year> <title> Super Trouper. A&M Records, </title> <publisher> Inc., </publisher> <address> Hollywood, California. </address>
Reference-contexts: For example, in bridge, information from the bidding or from prior play often gives clues to the location of key cards. To represent this, I define P's belief function to be a probability function j : I fl ! <ref> [0; 1] </ref>, where [0; 1] = fx : 0 x 1g: To represent the possible actions of the players, I use operators somewhat similar to those used in STRIPS [48]. <p> For example, in bridge, information from the bidding or from prior play often gives clues to the location of key cards. To represent this, I define P's belief function to be a probability function j : I fl ! <ref> [0; 1] </ref>, where [0; 1] = fx : 0 x 1g: To represent the possible actions of the players, I use operators somewhat similar to those used in STRIPS [48]. <p> I let S be the set of all states, and I be the set of all state information sets. An objective function is a partial function f : S ! <ref> [0; 1] </ref>. Intuitively, f (S) expresses the perceived benefit to P of the state S; where f (S) is undefined, this means that S's perceived benefit is not known. <p> For other states, f might well be undefined. Game-playing programs for perfect-information games make use of a static evaluation function, which is a total function e : S ! <ref> [0; 1] </ref> such that if S is a state and f (S) is defined, then e (S) = f (S). In imperfect-information games, it is difficult to use e (S) directly, because instead of knowing the state S, all P will know is the state information set I. <p> Let u be an external-agent node whose children are u 1 ; : : : ; u n . For each u i , let I i be the state information set contained in u i . Suppose my program has already computed a utility value w i 2 <ref> [0; 1] </ref> for each u i . <p> Tignum 2 team scored at the second table, the Tignum 2 team lost the board. "I've played all my cards And that's what you've done, too Nothing more to say No more Ace to play: : : " | "The Winner Takes It All", from Super Trouper, by ABBA, 1980 <ref> [1] </ref> 5.3.2.3 Why Tignum 2 Lost Why did Tignum 2 lose this deal? It lost this deal because it scored one of its plans incorrectly. Why did Tignum 2 score one of its plans incorrectly? It made incorrect assumptions about the opponents' cards. <p> First used in Section 4.3.4.2 on Page 54. * BB: See Bridge Baron. * belief function: a representation of my program's belief that some states of the world are more likely that others, defined as a probability function j : I fl ! <ref> [0; 1] </ref>, where [0; 1] = fx : 0 x 1g: First used in Section 4.3.2 on Page 38. 229 * bid: in bridge, the statement of an intention to take a certain number of tricks with a certain trump suit. <p> First used in Section 4.3.4.2 on Page 54. * BB: See Bridge Baron. * belief function: a representation of my program's belief that some states of the world are more likely that others, defined as a probability function j : I fl ! <ref> [0; 1] </ref>, where [0; 1] = fx : 0 x 1g: First used in Section 4.3.2 on Page 38. 229 * bid: in bridge, the statement of an intention to take a certain number of tricks with a certain trump suit. <p> First used in Section 4.3.2 on Page 40. 246 * objective function: a partial function that expresses the perceived benefit of a state; where undefined, the perceived benefit of a state is unknown. An objective function is defined as a partial function f : S ! <ref> [0; 1] </ref>, where [0; 1] = fx : 0 x 1g: First used in Section 4.3.2 on Page 39. * opening lead: in bridge, the first card played during the play. The player on declarer's left makes the opening lead. <p> First used in Section 4.3.2 on Page 40. 246 * objective function: a partial function that expresses the perceived benefit of a state; where undefined, the perceived benefit of a state is unknown. An objective function is defined as a partial function f : S ! <ref> [0; 1] </ref>, where [0; 1] = fx : 0 x 1g: First used in Section 4.3.2 on Page 39. * opening lead: in bridge, the first card played during the play. The player on declarer's left makes the opening lead. <p> First used in Section 3 on Page 220. * static evaluation function: a total function that expresses a guess as to the perceived benefit of a state, defined as e : S ! <ref> [0; 1] </ref>, where [0; 1] = fx : 0 x 1g: First used in Section 4.3.2 on Page 40. * South: in bridge, one of the four players. South and North are partners against East and West. <p> First used in Section 3 on Page 220. * static evaluation function: a total function that expresses a guess as to the perceived benefit of a state, defined as e : S ! <ref> [0; 1] </ref>, where [0; 1] = fx : 0 x 1g: First used in Section 4.3.2 on Page 40. * South: in bridge, one of the four players. South and North are partners against East and West.
Reference: [2] <author> ACIS Geometric Modeler. </author> <year> 1993. </year> <title> Spatial Technology, </title> <publisher> Inc., </publisher> <address> Boulder, Col-orado. </address>
Reference-contexts: The parts of EEsof that EDAPS uses include Libra, a linear and nonlinear circuit design tool; ACADEMY, a layout generator; and AEL, the Application Extension Language. * MicroStation, a tool for computer-assisted mechanical design that uses the ACIS solid modeler <ref> [2] </ref>. The design and process planning phase begins with an electronic designer invoking EDAPS's circuit schematic and circuit layout module. The electronic designer uses Libra to design a circuit schematic, and invokes ACADEMY to select components and transform the circuit schematic into a circuit layout.
Reference: [3] <author> Adams, Scott. </author> <year> 1996. </year> <title> Fugitive from the Cubicle Police. </title> <booktitle> Andrews and McMeel, </booktitle> <address> Kansas City. </address>
Reference: [4] <author> Allis, L. V. </author> <year> 1990. </year> <title> "A knowledge-based approach of connect four: the game is solved: White wins". </title> <type> Master's thesis, </type> <institution> Vrije Universiteit, </institution> <address> Amsterdam, the Netherlands. </address>
Reference-contexts: Allis et al. have solved three of these games using techniques called "proof-number search" and "dependency-based search" [6]. The first game to be solved was Connect Four <ref> [4] </ref>, played by two players on a vertical board with seven columns and six rows. Players alternate dropping checkers into columns until a player gets four checkers of that player's color in a row, winning; or until all columns are full, which is a draw.
Reference: [5] <author> Allis, L. V. and Schoo, P. N. A. </author> <year> 1992. </year> <title> "Qubic solved again". </title> <booktitle> Heuristic Programming in Artificial Intelligence 3: The Third Computer Olympiad, </booktitle> <pages> 192-204. </pages> <publisher> Ellis Horwood, </publisher> <address> Chichester, England. </address>
Reference-contexts: Allis proved that Connect Four is a win for the first player, and wrote a program that plays perfectly as the first player. The second game to be solved was Qubic, two-player three-dimensional tic-tac-toe on a four-by-four-by-four cube <ref> [5] </ref>.
Reference: [6] <author> Allis, L. V. </author> <year> 1993. </year> <title> Searching for Solutions in Games and Artificial Intelligence. </title> <type> Ph.D. dissertation, </type> <institution> University of Limburg, </institution> <address> Maastricht, the Nether-lands. </address> <month> 260 </month>
Reference-contexts: By solved, I mean that there exists a program that is guaranteed to play optimally under tournament conditions (that is, reasonable time 22 limits). Allis et al. have solved three of these games using techniques called "proof-number search" and "dependency-based search" <ref> [6] </ref>. The first game to be solved was Connect Four [4], played by two players on a vertical board with seven columns and six rows.
Reference: [7] <author> Allis, L. V.; van den Herik, H. J.; and Huntjens, M. P. H. </author> <year> 1996. </year> <title> "Go--moku solved by new search techniques". </title> <booktitle> Computational Intelligence, </booktitle> <address> 12:1, </address> <month> February </month> <year> 1996, </year> <pages> 7-23. </pages>
Reference-contexts: The third game to be solved was go-moku, two-player five-in-a-row on a fifteen-by-fifteen board <ref> [7] </ref>.
Reference: [8] <author> Alphaville. </author> <year> 1994. </year> <title> Prostitute. Warner Music Germany, </title> <address> Berlin, Germany. </address>
Reference-contexts: because the plan has reached a previously unexpanded node|then P simply re-plans, starting at the node where the plan ends. 59 Chapter 5 Results of Bridge Research "Here is the news From my little hideaway My sweet ivory tower: : : " | "Ivory Tower", from Prostitute, by Alphaville, 1994 <ref> [8] </ref> 5.1 Tignum 2 Using the HTN planning techniques discussed in Chapter 4 on Page 21, I have written a program for declarer play at contract bridge, called Tignum 2. Tig-num 2 is more than 16000 lines of C.
Reference: [9] <author> Austen, Jane. </author> <title> 1813. </title> <editor> Pride and Prejudice. R. W. Chapman, ed., </editor> <booktitle> 1923. </booktitle> <publisher> Oxford University Press, </publisher> <address> London. </address> <note> Available electronically from &lt;http:- //curly.cc.utexas.edu/~churchh/pridprej.html&gt;. </note>
Reference-contexts: These [:::] must be stated, though briefly." | From a letter from Fitzwilliam Darcy to Elizabeth Bennet, Pride and Prejudice, by Jane Austen, 1813 <ref> [9] </ref> Here are some terms and acronyms used in this dissertation, their brief defi nitions, and the location in which they are first used. * A: an agent.
Reference: [10] <author> Bakerjian, R., ed. </author> <year> 1992. </year> <title> Design for Manufacturability (Tool and Manufacturing Engineers Handbook, </title> <booktitle> volume 6.) Society of Manufacturing Engineers, </booktitle> <address> Dearborn, Michigan. </address>
Reference-contexts: Researchers focused their initial attempts to achieve concurrent engineering on establishing guidelines for communicating manufacturing and assembly concerns to the designers of products, and for having designers and process planners talk. With these guidelines in place, designers could address these concerns at the design stage <ref> [22, 24, 10] </ref>. 104 One way to help achieve some of the goals of concurrent engineering is man--ufacturability analysis, in which computer programs analyze designs and report on anything in the designs that cannot actually be manufactured.
Reference: [11] <author> Ballard, Bruce W. </author> <year> 1983. </year> <title> "The *-minimax search procedure for trees containing chance nodes." </title> <booktitle> Artificial Intelligence 21 </booktitle> <pages> 327-350. </pages>
Reference-contexts: Backgammon has received attention from AI researchers for some time <ref> [11] </ref>, being|by virtue of its randomness|the first board or card game in which a computer beat a world champion, albeit in a short match [17]. <p> Horacek introduced uncertainty to his chess program's computations to improve 30 its play in the endgame [70]. Ballard's approach to backgammon included a game-tree search with uncertainty <ref> [11] </ref>.
Reference: [12] <author> Barrett, A. and Weld, D. </author> <year> 1994. </year> <title> "Partial order planning: evaluating possible efficiency gains." </title> <booktitle> Artificial Intelligence 67 </booktitle> <pages> 71-112. </pages>
Reference-contexts: Barrett and Weld showed that there are domains in which partial-order planners produce plans in time linearly related to the number of goals, whereas total-order planners produce plans in time exponentially related to the number of goals <ref> [12] </ref>. Minton et al. described a partial-order planner and a total-order planner such that the total-order planner's search space is always larger than the partial-order planner's search space [98]. Partial-order planning also has some practical advantages over total-order planning.
Reference: [13] <author> Bartlett, John. </author> <year> 1980. </year> <editor> Bartlett's Quotations. Emily Morrison Beck, ed. </editor> <publisher> Little, Brown, </publisher> <address> New York. </address>
Reference: [14] <author> Baudet, G. M. </author> <year> 1978. </year> <title> "On the branching factor of the alpha-beta pruning algorithm." </title> <booktitle> Artificial Intelligence 10 </booktitle> <pages> 173-199. </pages>
Reference-contexts: chosen from a the set f0; 1g, with probability p P of choosing 1. (In this dissertation, I will set p P = 0:68233, in order to guarantee that in the limit, there is still a nonzero probability that each player will have a forced win in the game tree <ref> [14, 114, 107] </ref>.) Because u's payoff does not depend on the path from the root to u, there is no need for RVA nodes. 204 A.2 Forward-Pruning Models In the game trees investigated in this section, there are two players, Max and Min.
Reference: [15] <author> Berlin, D. L. </author> <year> 1985. </year> <title> "SPAN: integrating problem solving tactics." </title> <booktitle> In Proc. 9th International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1047-1051. </pages>
Reference-contexts: Quinlan wrote a knowledge-based system for reasoning about high cards, but it never developed into an algorithm for play [119]. Berlin proposed an approach to play of the hand at bridge that is similar to mine <ref> [15] </ref>; sadly, he never had a chance to develop the approach (his paper was published posthumously). There are no really good computer programs for card-playing in bridge, especially in comparison to the success of computer programs for chess, checkers, and Othello.
Reference: [16] <author> Berliner, H. J. </author> <year> 1979. </year> <title> "The B* tree search algorithm: a best-first proof procedure." </title> <booktitle> Artificial Intelligence 12 </booktitle> <pages> 23-40. 261 </pages>
Reference-contexts: To further decrease the number of nodes examined, game-tree-search procedures have been developed such as alpha-beta [80], B* <ref> [16] </ref>, and SSS* [149]. These procedures will ignore any node below u that they can prove will not affect u's minimax value. One method for reducing the number of nodes examined by a tree search is forward pruning.
Reference: [17] <author> Berliner, Hans. </author> <year> 1980. </year> <title> "Computer backgammon." </title> <publisher> Scientific American, </publisher> <month> June </month> <year> 1980, </year> <pages> 64-72. </pages>
Reference-contexts: Backgammon has received attention from AI researchers for some time [11], being|by virtue of its randomness|the first board or card game in which a computer beat a world champion, albeit in a short match <ref> [17] </ref>.
Reference: [18] <author> Berliner, H. J.; Goetsch, G.; Campbell, M. S.; and Ebeling, C. </author> <year> 1990. </year> <title> Measuring the performance potential of chess programs. </title> <booktitle> Artificial Intelligence 43 </booktitle> <pages> 7-20. </pages>
Reference-contexts: You Do (It's the Way That You Do It)", from The Fun Boy Three, by The Fun Boy Three with Bananarama, 1982 [52] Chess: No other game has received as much attention from the AI community as chess, a two-player game with thirty-two pieces on a board with sixty-four squares <ref> [166, 167, 88, 18, 70, 99] </ref>. Deep Blue, which grew out of Deep Thought [71] is acknowledged to be the best computer chess program; it played human world champion Garry Kasparov in a six-game match under standard tournament conditions on 10-17 February 1996.
Reference: [19] <author> Biermann, A. W. </author> <year> 1978. </year> <title> "Theoretical issues related to computer game playing programs." </title> <type> Personal Computing, </type> <month> September </month> <year> 1978, </year> <pages> 86-88. </pages>
Reference-contexts: But on perfect-information zero-sum games such as chess, forward pruning has not worked as well as approaches that do not use forward pruning, instead choosing to search to a shallower depth than they could with forward pruning <ref> [19, 159] </ref>. How can I explain my success in bridge with an approach closely related to forward pruning? As a step toward deeper understanding of how forward pruning affects quality of play, I set up a model of forward pruning on two abstract classes of game trees.
Reference: [20] <author> Blair, Jean R. S.; Mutchler, David; and van Lent, Michael. </author> <year> 1996. </year> <title> "Perfect recall and pruning in games with imperfect information." </title> <booktitle> Computational Intelligence, </booktitle> <address> 12:1, </address> <month> February </month> <year> 1996, </year> <pages> 131-154. </pages>
Reference-contexts: 30; planning with multi-agency, uncertainty, and incomplete information in Section 4.1.5 on Page 31; and planning in games in Section 4.1.6 on Page 32. 4.1.1 Games in Which AI Approaches Have Had Suc cess A perfect-information game is a game in which all players have the same amount of information <ref> [20] </ref>. If all players know all possible moves and their deterministic results for all players in all situations in a game, I call the game a standard perfect-information game.
Reference: [21] <author> Blondie. </author> <year> 1981. </year> <title> The Best of Blondie. Chrysalis Records, </title> <publisher> Inc., </publisher> <address> Los Angeles, California. </address>
Reference-contexts: Computer Bridge world championship, and won the 1994 and 1995 Computer Bridge competitions sponsored by the American Contract Bridge League (ACBL). "When we play at cards You use an extra sense: : : " | "(I'm Always Touched By Your) Presence Dear", from The Best of Blondie, by Blondie, 1981 <ref> [21] </ref> In their review of seven commercially available programs [93], the ACBL rated the Bridge Baron to be the best of the seven, and the skill of the Bridge Baron to be the best of the five that do declarer play without "peeking" at the opponents' cards.
Reference: [22] <author> Boothroyd, G. and Dewhurst, P. </author> <year> 1983. </year> <title> Design for Assembly|A Designer's Handbook. </title> <institution> Department of Mechanical Engineering, University of Mas-sachusetts at Amherst. </institution>
Reference-contexts: Researchers focused their initial attempts to achieve concurrent engineering on establishing guidelines for communicating manufacturing and assembly concerns to the designers of products, and for having designers and process planners talk. With these guidelines in place, designers could address these concerns at the design stage <ref> [22, 24, 10] </ref>. 104 One way to help achieve some of the goals of concurrent engineering is man--ufacturability analysis, in which computer programs analyze designs and report on anything in the designs that cannot actually be manufactured.
Reference: [23] <author> Boutilier, C.; Dearden, R.; and Goldszmidt, M. </author> <year> 1995. </year> <title> "Exploiting structure in policy construction." </title> <booktitle> In Proc. 14th International Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Problems on a grander scale are starting to be studied <ref> [65, 23, 89] </ref>. The limitation of these partial-order planning approaches is that they do not scale well, because they have difficulty with preconditions involving uncertainty, geometry, or numerical values. Much of the previous research on multi-agent planning has dealt with different issues than those that concern us here.
Reference: [24] <author> Bralla, J., ed. </author> <year> 1986. </year> <title> Handbook of Product Design for Manufacturing. </title> <publisher> McGraw-Hill, </publisher> <address> New York. </address>
Reference-contexts: Researchers focused their initial attempts to achieve concurrent engineering on establishing guidelines for communicating manufacturing and assembly concerns to the designers of products, and for having designers and process planners talk. With these guidelines in place, designers could address these concerns at the design stage <ref> [22, 24, 10] </ref>. 104 One way to help achieve some of the goals of concurrent engineering is man--ufacturability analysis, in which computer programs analyze designs and report on anything in the designs that cannot actually be manufactured.
Reference: [25] <author> Brindley, K. </author> <year> 1990. </year> <title> Newnes electronics assembly handbook. </title> <publisher> Heinemann Newnes, Oxford, </publisher> <address> England. </address> <month> 262 </month>
Reference-contexts: In bridge, the available schemes are "tactical" and "strategic" schemes based on knowledge from the bridge literature [62, 163, 120, 134]. In microwave module manufacture, the available schemes are processes or sets of processes of varying degrees of complexity, based on information from Brindley's book <ref> [25] </ref>, from Pete Mendicino of Northrop Grumman's Electronic Sensors and Systems Division [96], and from Mark Creighton of Modular Components [35]. 11 Chapter 3 Planning Using TOFS (Total-Order Forward Search) "What do we do now?" "I don't know!" "The rhyming song, the rhyming song: : : " "Let's all jump up <p> on information 6 While generative process planning systems have previously had little success, as described in Section 6.1.1 on Page 103, the reasons for this lack of success do not apply to the EDAPS Process Planner, as I will explain in Section 7.3 on Page 184. 113 from Brindley's book <ref> [25] </ref>, from Pete Mendicino of Northrop Grumman's Elec--tronic Sensors and Systems Division [96], and from Mark Creighton of Modular Components [35]. 6.4.2 Input The EDAPS Process Planner takes input from "stdin", the standard input stream, which refers to the keyboard if input has not been redirected.
Reference: [26] <author> Buro, M. </author> <year> 1995. </year> <title> "Statistical feature combination for the evaluation of game positions". </title> <journal> Journal of Artificial Intelligence Research 3 </journal> <pages> 373-382. </pages>
Reference-contexts: Logistello is probably the world's best Othello-playing program, winning sixteen of the twenty-one tournaments in which it has participated since October 1993 <ref> [26, 28] </ref>.
Reference: [27] <author> Buro, M. </author> <year> 1995. </year> <title> "A very unofficial rating list a nice try :-)." &lt;http://www.- neci.nj.nec.com/homepages/mic/rating.html&gt;. </title>
Reference-contexts: Logistello is probably the world's best Othello-playing program, winning sixteen of the twenty-one tournaments in which it has participated since October 1993 [26, 28]. Logistello may well be better at Othello than any human, but no human-computer Othello matches of significance have yet been held <ref> [27] </ref>; Logistello is scheduled to play Takeshi Mu-rakami, current human Othello world champion, in a six-game match in August 1997 [29]. 4.1.1.4 Backgammon: a Perfect-Information Game with Random ness Backgammon|a two-player game with thirty pieces on a board consisting of twenty-four separate points|differs from chess, checkers, and Othello in that it
Reference: [28] <author> Buro, M. </author> <year> 1996. </year> <title> "Tournament results". </title> <publisher> &lt;http://www.neci.nj.nec.com/- homepages/mic/tour.html&gt;. </publisher>
Reference-contexts: Logistello is probably the world's best Othello-playing program, winning sixteen of the twenty-one tournaments in which it has participated since October 1993 <ref> [26, 28] </ref>.
Reference: [29] <author> Buro, M. </author> <year> 1997. </year> <title> "Othello Match & Call for Papers". </title> <type> Personal communication by email, </type> <month> 19 March </month> <year> 1997. </year>
Reference-contexts: Logistello may well be better at Othello than any human, but no human-computer Othello matches of significance have yet been held [27]; Logistello is scheduled to play Takeshi Mu-rakami, current human Othello world champion, in a six-game match in August 1997 <ref> [29] </ref>. 4.1.1.4 Backgammon: a Perfect-Information Game with Random ness Backgammon|a two-player game with thirty pieces on a board consisting of twenty-four separate points|differs from chess, checkers, and Othello in that it has an element of randomness resulting from the roll of the dice.
Reference: [30] <author> Candadai, A.; Herrmann, J. W.; Minis, I.; and Ramachandran, V. </author> <year> 1994. </year> <title> "Product and process information models for microwave modules." </title> <booktitle> In Proceedings of the ASME International Mechanical Engineering Conference and Exposition. </booktitle>
Reference-contexts: as milling, these systems do not consider these processes; their process planning is not integrated with an electronic/mechanical CAD system; and they do not evaluate their plans for cost. 1 I have adapted most of the material in this section from [67]. 103 For classifying electro-mechanical designs, Candadai and others <ref> [30] </ref> have taken a Group-Technology-based approach. Based on this classification, Lam [84] generates high level process plans for the manufacture of these designs. Though Lam's system considers the manufacturing processes in both domains, it does not work concurrently with an electronic CAD tool.
Reference: [31] <author> Chang, T. C. and Wysk, R. A. </author> <year> 1985. </year> <title> An Introduction to Automated Process Planning Systems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey. </address>
Reference-contexts: Specifically, process planning involves preparing detailed operating instructions for the processes that transform an engineering design into a final part <ref> [31] </ref>. Computer-aided process planning (CAPP) systems have traditionally been classified as either "variant" or "generative". Variant process planning systems match a new design to a database of old designs, and retrieve the process plans for the most similar design or designs.
Reference: [32] <author> Chang, T. C. and Terwilliger, Jr., J. </author> <year> 1987. </year> <title> "PWA Planner|a rule based system for printed wiring assembly process planning." </title> <booktitle> Computers in Industrial Engineering 13 </booktitle> <pages> 1-4, 34-38. </pages>
Reference-contexts: For a review of CAPP systems, see [132]. For a review of CAPP systems for electronic parts, see [94]; many such systems have been developed <ref> [32, 128, 129, 86, 165, 156] </ref>.
Reference: [33] <author> Collins, G. and Pryor, L. </author> <year> 1995. </year> <title> "Planning under uncertainty: some key issues." </title> <booktitle> In Proceedings of the 14th International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1670-1676. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California. </address>
Reference-contexts: do not address games, such as bridge, which do not have perfect information. 4.1.5 Planning with Multi-Agency, Uncertainty, and In complete Information Some work has been done on planning with uncertainty and incomplete information, focusing on small-scale problems with only a few uncertain conditions in the state of the world <ref> [117, 40, 83, 33] </ref>. Problems on a grander scale are starting to be studied [65, 23, 89]. The limitation of these partial-order planning approaches is that they do not scale well, because they have difficulty with preconditions involving uncertainty, geometry, or numerical values.
Reference: [34] <author> Cormen, T. H.; Leiserson, C. E.; and Rivest, R. L. </author> <year> 1990. </year> <title> Introduction to Algorithms. </title> <publisher> MIT Press/McGraw-Hill, </publisher> <address> New York. </address> <month> 263 </month>
Reference: [35] <author> Creighton, Mark. </author> <year> 1996. </year> <type> Personal communication. </type>
Reference-contexts: In microwave module manufacture, the available schemes are processes or sets of processes of varying degrees of complexity, based on information from Brindley's book [25], from Pete Mendicino of Northrop Grumman's Electronic Sensors and Systems Division [96], and from Mark Creighton of Modular Components <ref> [35] </ref>. 11 Chapter 3 Planning Using TOFS (Total-Order Forward Search) "What do we do now?" "I don't know!" "The rhyming song, the rhyming song: : : " "Let's all jump up and down and wave our arms And get off the stage!" "Yeah yeah yeah!" | "The Rhyming Song", from Muppet <p> 103, the reasons for this lack of success do not apply to the EDAPS Process Planner, as I will explain in Section 7.3 on Page 184. 113 from Brindley's book [25], from Pete Mendicino of Northrop Grumman's Elec--tronic Sensors and Systems Division [96], and from Mark Creighton of Modular Components <ref> [35] </ref>. 6.4.2 Input The EDAPS Process Planner takes input from "stdin", the standard input stream, which refers to the keyboard if input has not been redirected. The input is a series of commands, one to a line, until end of file.
Reference: [36] <author> Currie, K. and Tate, A. </author> <year> 1985. </year> <title> "O-Plan|control in the open planner architecture." </title> <booktitle> BCS Expert Systems Conference, </booktitle> <publisher> Cambridge University Press, </publisher> <address> UK. </address>
Reference-contexts: Some related work includes that of Currie and Tate with O-Plan <ref> [36] </ref> and Wilkins with SIPE [168, 169]. However, for bridge, I needed to modify HTN planning to be able to represent multi-agency and uncertainty; for more details, see Section 4.3 on Page 35. <p> To represent the tactical and strategic schemes of card-playing in bridge, I use multi-agent methods| structures similar to the "action schemas" or "methods" used in hierarchical single-agent planning systems such as Nonlin [152, 153], NOAH [124, 125, 126], O-Plan <ref> [36] </ref>, and SIPE [168, 169], but modified to represent multi-agency and uncertainty. To generate game trees, I use a procedure similar to task decomposition. The methods that perform my tasks correspond to the various tactical and strategic schemes for playing the game of bridge.
Reference: [37] <institution> Dead or Alive. </institution> <year> 1985. </year> <title> Youthquake. Epic Records, </title> <address> New York. </address>
Reference-contexts: existence of a critic function does not guarantee that that critic function can be used. "I said, `thanks, that's very nice Appreciate your good advice But things don't always go the way that I planned': : : " | "My Heart Goes Bang", from Youthquake, by Dead or Alive, 1985 <ref> [37] </ref> P follows the plan as far as possible. If the plan takes P to the end of the game, then the problem is solved.
Reference: [38] <author> Dean, T.; Kaelbling, L. P.; Kirman, J.; and Nicholson, A. </author> <year> 1993. </year> <title> "Planning with deadlines in stochastic domains." </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> 574-579. </pages> <publisher> MIT Press, </publisher> <address> Cam-bridge, Massachusetts. </address>
Reference-contexts: The limitation of these partial-order planning approaches is that they do not scale well, because they have difficulty with preconditions involving uncertainty, geometry, or numerical values. Much of the previous research on multi-agent planning has dealt with different issues than those that concern us here. In reactive planning <ref> [38] </ref>, the agent must respond in real time to externally-caused events|and the necessity of making quick decisions largely precludes the possibility of reasoning far into the future.
Reference: [39] <author> Dong, Jian. </author> <year> 1994. </year> <title> "Feature-based manufacturing process planning for integrated product and process development." </title> <booktitle> In Proceedings of 4th International Conference on Computer Integrated Manufacturing and Automation Technology, </booktitle> <institution> Rensselaer Polytechnic Institute, </institution> <address> Troy, New York. </address>
Reference-contexts: Such approaches are called concurrent engineering or Integrated Product and Process Design (IPPD). Concurrent engineering of microwave modules requires interdisciplinary teams of electrical engineers, mechanical engineers, and manufacturing engineers to coordinate their efforts <ref> [39] </ref>. In large organizations, achieving this coordination can be difficult [110]. 109 This coordination would be easier with an appropriate computer system. One of the components of such a computer system would be a process planner.
Reference: [40] <author> Draper, D.; Hanks, S., and Weld, D. </author> <year> 1994. </year> <title> "Probabilistic planning with information gathering and contingent execution." </title> <booktitle> In Proceedings of the 2nd International Conference on AI Planning Systems, </booktitle> <editor> Kristian Hammond, editor. </editor> <publisher> AAAI Press, </publisher> <address> Menlo Park, California. </address>
Reference-contexts: do not address games, such as bridge, which do not have perfect information. 4.1.5 Planning with Multi-Agency, Uncertainty, and In complete Information Some work has been done on planning with uncertainty and incomplete information, focusing on small-scale problems with only a few uncertain conditions in the state of the world <ref> [117, 40, 83, 33] </ref>. Problems on a grander scale are starting to be studied [65, 23, 89]. The limitation of these partial-order planning approaches is that they do not scale well, because they have difficulty with preconditions involving uncertainty, geometry, or numerical values.
Reference: [41] <institution> EEsof Series IV Version 4. 1992. EEsof Inc., </institution> <address> Westlake Village, California. </address>
Reference-contexts: Researchers designed and implemented programs for manufacturability analysis in problem domains such as machined parts [75, 74, 63] and microwave modules [66]. There is even a commercial CAD tool that performs manufacturability analysis for electronic circuits <ref> [41] </ref>. 6.2 Introduction to Microwave Modules 2 Most commercial electronic products operate at radio frequencies, that is, between 10 kilohertz and 1 gigahertz. 3 However, radio frequencies have a low signal-to-noise ratio, and have become overcrowded [158]. <p> EDAPS consists of a user interface, written in Tcl/Tk [112]; a number of routines written in C++ and "AEL"; and the EDAPS Process Planner. I developed the EDAPS Process Planner; Kiran Hebbar developed the rest of EDAPS. EDAPS uses the following commercial software: * EEsof <ref> [41] </ref>, a tool for computer-assisted electronic design. The parts of EEsof that EDAPS uses include Libra, a linear and nonlinear circuit design tool; ACADEMY, a layout generator; and AEL, the Application Extension Language. * MicroStation, a tool for computer-assisted mechanical design that uses the ACIS solid modeler [2].
Reference: [42] <author> Elastica. </author> <year> 1995. </year> <editor> Elastica. David Geffen Company, </editor> <address> Los Angeles, California. </address>
Reference-contexts: early, there must be no variables worth leaving unbound until late in the planning. 20 Chapter 4 Planning in Declarer Play at Contract Bridge "I don't understand how the last card is played But somehow a vital connection is made: : : " | "Connection", from Elastica, by Elastica, 1995 <ref> [42] </ref> 4.1 Related Work in Game-Playing The problem of declarer play at contract bridge is certainly a problem in game-playing. I discuss the state of the art in game-playing here to provide some perspective on the state of the art in bridge.
Reference: [43] <author> Erol, K.; Hendler, J.; and Nau, D.S. </author> <year> 1994. </year> <title> "UMCP: a sound and complete procedure for hierarchical task-network planning." </title> <booktitle> In Proc. Second International Conf. on AI Planning Systems (AIPS-94), </booktitle> <pages> pages 249-254. 264 </pages>
Reference-contexts: Note that I use a different definition of "task network" than Erol et al. <ref> [43, 44] </ref> and other researchers do. In their work, a plan itself can be represented as a task network, and the collection of tasks linked together by methods is called a "decomposition hierarchy". <p> However, for bridge, I needed to modify HTN planning to be able to represent multi-agency and uncertainty; for more details, see Section 4.3 on Page 35. Some of my notation was motivated by that of Erol et al. <ref> [43, 44] </ref>, but note that I use a different definition of "task network" than Erol et al. do.
Reference: [44] <author> Erol, K.; Nau, D. S.; and Subrahmanian, V. S. </author> <year> 1995. </year> <title> "Complexity, de--cidability and undecidability results for domain-independent planning." </title> <booktitle> Artificial Intelligence 76 </booktitle> <pages> 75-88. </pages>
Reference-contexts: Note that I use a different definition of "task network" than Erol et al. <ref> [43, 44] </ref> and other researchers do. In their work, a plan itself can be represented as a task network, and the collection of tasks linked together by methods is called a "decomposition hierarchy". <p> However, for bridge, I needed to modify HTN planning to be able to represent multi-agency and uncertainty; for more details, see Section 4.3 on Page 35. Some of my notation was motivated by that of Erol et al. <ref> [43, 44] </ref>, but note that I use a different definition of "task network" than Erol et al. do.
Reference: [45] <author> Fawcett, Tom E. </author> <year> 1996. </year> <title> "Knowledge-based feature discovery for evaluation functions." </title> <booktitle> Computational Intelligence, </booktitle> <address> 12:1, </address> <month> February </month> <year> 1996, </year> <pages> 42-64. </pages>
Reference-contexts: Tinsley died in April 1995. Othello: Othello (also called Reversi), a two-player game in which play 24 ers (usually) fill up all sixty-four squares of the board, has received significant attention from AI researchers <ref> [87, 100, 45] </ref>. Logistello is probably the world's best Othello-playing program, winning sixteen of the twenty-one tournaments in which it has participated since October 1993 [26, 28].
Reference: [46] <author> Feldman, J. A. and Yakimovsky, Y. </author> <year> 1974. </year> <title> "Decision theory and artificial intelligence i. A semantics-based region analyzer." </title> <booktitle> Artificial Intelligence 5 </booktitle> <pages> 349-371. </pages>
Reference-contexts: Pick a leaf node u of D such that u is not the end of the game and the procedure has never tried to expand u before. If no 4 I use the term "decision tree" as it is used in the decision theory literature <ref> [51, 46, 47] </ref>, as well as the learning literature, to represent a structure similar to a game tree. I am not employing "decision trees" (also, and less ambiguously, referred to as "comparison trees" [79]) as they are defined in the sorting literature ([34], p. 173).
Reference: [47] <author> Feldman, J. A. and Sproull, R. F. </author> <year> 1977. </year> <booktitle> "Decision theory and artificial intelligence ii: the hungry monkey." Cognitive Science 1 </booktitle> <pages> 158-192. </pages>
Reference-contexts: Pick a leaf node u of D such that u is not the end of the game and the procedure has never tried to expand u before. If no 4 I use the term "decision tree" as it is used in the decision theory literature <ref> [51, 46, 47] </ref>, as well as the learning literature, to represent a structure similar to a game tree. I am not employing "decision trees" (also, and less ambiguously, referred to as "comparison trees" [79]) as they are defined in the sorting literature ([34], p. 173).
Reference: [48] <author> Fikes, R. E. and Nilsson, N. J. </author> <year> 1971. </year> <title> "Strips: a new approach to the application of theorem proving to problem solving." </title> <booktitle> Artificial Intelligence 2 </booktitle> <pages> 189-208. </pages>
Reference-contexts: To represent this, I define P's belief function to be a probability function j : I fl ! [0; 1], where [0; 1] = fx : 0 x 1g: To represent the possible actions of the players, I use operators somewhat similar to those used in STRIPS <ref> [48] </ref>. <p> This supports the long-standing AI hypothesis that HTN planning is more useful than planning with STRIPS-style operators <ref> [48] </ref> in practical planning domains [169]. Bridge has a natural element of hierarchical planning, and hence the bridge literature lends itself naturally to HTN decomposition. <p> First used in the list beginning in Section 4.3.2 on Page 38. * primitive operator: a representation of a possible action of a player, somewhat similar to the operators used in STRIPS <ref> [48] </ref>. First used in Sec tion 4.3.2 on Page 38. * primitive task: a task so simple that it cannot be broken down into any other tasks.
Reference: [49] <author> Frank, I.; Basin, D.; and Bundy, A. </author> <year> 1992. </year> <title> "An adaptation of proof-planning to declarer play in bridge." </title> <booktitle> In European Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Frank et al. have proposed a proof-planning approach (similar to the approach that Gamback et al. proposed for play [53, 54]), but thus far, they have only described the results of applying this approach to planning the play of a single suit <ref> [49] </ref>.
Reference: [50] <author> Frank, I. and Basin, D. </author> <year> 1995. </year> <title> "Search in games with incomplete information: a case study using bridge card play." </title> <note> Research Paper 780, Department of Artificial Intelligence, Edinburgh, Scotland. Submitted to Artificial Intelligence. </note>
Reference-contexts: On the one hand, Frank and Basin have shown some pitfalls in any approach that treats an incomplete-information problem as a collection of complete-infor 28 mation problems, as all Monte Carlo approaches do <ref> [50] </ref>. There is not yet any concrete evidence that these pitfalls can be overcome, though Ginsberg thinks he has a theoretical solution that he describes as an "algorithmic nightmare" [59].
Reference: [51] <author> French, S. </author> <year> 1986. </year> <title> Decision Theory: An Introduction to the Mathematics of Rationality. </title> <publisher> Wiley, </publisher> <address> New York. </address> <month> 265 </month>
Reference-contexts: Pick a leaf node u of D such that u is not the end of the game and the procedure has never tried to expand u before. If no 4 I use the term "decision tree" as it is used in the decision theory literature <ref> [51, 46, 47] </ref>, as well as the learning literature, to represent a structure similar to a game tree. I am not employing "decision trees" (also, and less ambiguously, referred to as "comparison trees" [79]) as they are defined in the sorting literature ([34], p. 173).
Reference: [52] <author> The Fun Boy Three. </author> <year> 1982. </year> <title> The Fun Boy Three. </title> <publisher> Chrysalis Records Ltd, </publisher> <address> New York. </address>
Reference-contexts: know what life was all about But then I learned I must confess That life is like a game of chess: : : " | "It Ain't What You Do (It's the Way That You Do It)", from The Fun Boy Three, by The Fun Boy Three with Bananarama, 1982 <ref> [52] </ref> Chess: No other game has received as much attention from the AI community as chess, a two-player game with thirty-two pieces on a board with sixty-four squares [166, 167, 88, 18, 70, 99].
Reference: [53] <author> Gamback, B.; Rayner, M.; and Pell, B. </author> <year> 1990. </year> <title> "An architecture for a sophisticated mechanical bridge player." </title> <editor> In Beal, D. F. and Levy, D.N.L., editors, </editor> <booktitle> Heuristic Programming in Artificial Intelligence|The Second Computer Olympiad. </booktitle> <publisher> Ellis Horwood, </publisher> <address> Chichester, England. </address>
Reference-contexts: Lindelof used a machine-learning approach to simultaneously build a computer program and bidding system for non-competitive auctions [90]. Gamback et al. combined a rule-based expert system with a neural net to do simple bidding in both non-competitive and competitive auctions <ref> [53, 54] </ref>. 4.1.3.2 Computer Play in Bridge While Stainer only implemented a primitive bidding program, his ideas about play still offer insight today [147]. Quinlan wrote a knowledge-based system for reasoning about high cards, but it never developed into an algorithm for play [119]. <p> Sterling and Nygate wrote a rule-based program for recognizing and executing squeeze plays, but squeeze opportunities in bridge are rare [148]. Frank et al. have proposed a proof-planning approach (similar to the approach that Gamback et al. proposed for play <ref> [53, 54] </ref>), but thus far, they have only described the results of applying this approach to planning the play of a single suit [49].
Reference: [54] <author> Gamback, B.; Rayner, M.; and Pell, B. </author> <year> 1993. </year> <title> "Pragmatic reasoning in bridge." </title> <type> Tech. Report 299, </type> <institution> Computer Laboratory, University of Cam-bridge. </institution>
Reference-contexts: Lindelof used a machine-learning approach to simultaneously build a computer program and bidding system for non-competitive auctions [90]. Gamback et al. combined a rule-based expert system with a neural net to do simple bidding in both non-competitive and competitive auctions <ref> [53, 54] </ref>. 4.1.3.2 Computer Play in Bridge While Stainer only implemented a primitive bidding program, his ideas about play still offer insight today [147]. Quinlan wrote a knowledge-based system for reasoning about high cards, but it never developed into an algorithm for play [119]. <p> Sterling and Nygate wrote a rule-based program for recognizing and executing squeeze plays, but squeeze opportunities in bridge are rare [148]. Frank et al. have proposed a proof-planning approach (similar to the approach that Gamback et al. proposed for play <ref> [53, 54] </ref>), but thus far, they have only described the results of applying this approach to planning the play of a single suit [49].
Reference: [55] <author> Gasser, R. </author> <year> 1996. </year> <title> "Solving Nine Men's Morris." </title> <booktitle> Computational Intelligence, </booktitle> <address> 12:1, </address> <month> February </month> <year> 1996, </year> <pages> 24-41. </pages>
Reference-contexts: Gasser <ref> [55] </ref> has proven by exhaustive endgame databases and alpha-beta search that Nine Men's Morris is a draw.
Reference: [56] <institution> The Georgia Satellites. </institution> <year> 1993. </year> <title> Let It Rock: The Best of The Georgia Satellites. Elektra Entertainment, </title> <address> New York. </address>
Reference-contexts: by making at least as many tricks as the contract specifies. 4.2.2 Abstract Characteristics of Bridge "She said, `Don't hand me no lines And keep your hands to yourself!' " | "Keep Your Hands to Yourself", from Let It Rock: Best of the Georgia Satellites, by The Georgia Satellites, 1993 <ref> [56] </ref> In this dissertation, I consider the problem of declarer play at bridge. My player controls two agents, declarer and dummy. Two other players control two other agents, the defenders. The auction is over and the contract has been fixed.
Reference: [57] <author> Ginsberg, Matt. </author> <year> 1996. </year> <title> "Partition Search." </title> <booktitle> AAAI-96. </booktitle>
Reference-contexts: large to search to any significant depth within the time available. 4.1.3.3 Ginsberg's Approach to Computer Play in Bridge Ginsberg has proposed using a Monte Carlo approach throughout the deal, employing clever techniques that make it possible to perform such a full game-tree search in a reasonable amount of time <ref> [57, 58, 162] </ref>. Called "partition search", Ginsberg's approach speeds up the full game-tree search by combining many similar nodes in the game tree. <p> However, this consideration is not part of the brute-force approach. In fact, Ginsberg takes advantage of these equivalent cards, as well as other equivalencies, in his "partition search" approach to bridge <ref> [57] </ref>. 1 I ignore signaling, since I am assuming the construction of complete information in the first place. 226 Appendix C Glossary "[: : : ] which [: : : ] I had myself endeavoured to forget, because they were not immediately before me.
Reference: [58] <author> Ginsberg, Matt. </author> <year> 1996. </year> <title> "How computers will play bridge." </title> <booktitle> The Bridge World, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: large to search to any significant depth within the time available. 4.1.3.3 Ginsberg's Approach to Computer Play in Bridge Ginsberg has proposed using a Monte Carlo approach throughout the deal, employing clever techniques that make it possible to perform such a full game-tree search in a reasonable amount of time <ref> [57, 58, 162] </ref>. Called "partition search", Ginsberg's approach speeds up the full game-tree search by combining many similar nodes in the game tree.
Reference: [59] <author> Ginsberg, Matt. </author> <year> 1996. </year> <title> "GIB, Bridge Baron, and other things." </title> <note> Usenet newsgroup rec.games.bridge, 31 October 1996, Message-Id: &lt;55aq9u$r3l@- pith.uoregon.edu&gt;. </note>
Reference-contexts: There is not yet any concrete evidence that these pitfalls can be overcome, though Ginsberg thinks he has a theoretical solution that he describes as an "algorithmic nightmare" <ref> [59] </ref>. As well, in contrast to my tests of Tignum 2 against the Bridge Baron (see Section 5.2.3 on Page 75 for details), Ginsberg's approach has not been tested on random deals against any other bridge program. <p> David Levy, an international chess master and organizer of the Computer Olympiad, called Bridge Baron the best bridge-playing program in the world [64]. When Matt Ginsberg tested his new bridge-playing program, he used Bridge Baron as a benchmark <ref> [59, 60] </ref>. 5.2.2 Comparing Bridge Programs The best method of comparing bridge competitors is duplicate bridge, which eliminates the possibility of any competitor gaining a gross advantage simply by 72 the luck of the deal.
Reference: [60] <author> Ginsberg, Matt. </author> <year> 1996. </year> <title> "GIB vs Bridge Baron: results." </title> <address> Usenet newsgroup rec.games.bridge, </address> <month> 13 November </month> <year> 1996, </year> <note> Message-Id: &lt;56cqmi$9l4@- pith.uoregon.edu&gt;. 266 </note>
Reference-contexts: GIB made all the correct plays in 116 out of the 180 deals, while the Bridge Baron only scored 33 out of 180 <ref> [60] </ref>. GIB has an additional advantage. Consider my program, Tignum 2. Tig-num 2 requires a human to do knowledge engineering|that is, descriptions of specific knowledge about its problem domain (bridge) in a format that it can understand [92]|to improve its task network and thus its play. <p> David Levy, an international chess master and organizer of the Computer Olympiad, called Bridge Baron the best bridge-playing program in the world [64]. When Matt Ginsberg tested his new bridge-playing program, he used Bridge Baron as a benchmark <ref> [59, 60] </ref>. 5.2.2 Comparing Bridge Programs The best method of comparing bridge competitors is duplicate bridge, which eliminates the possibility of any competitor gaining a gross advantage simply by 72 the luck of the deal.
Reference: [61] <author> Gmytrasiewicz, P. J. and Durfee, E. H. </author> <year> 1992. </year> <title> "Decision-theoretic recursive modeling and the coordinated attack problem." </title> <booktitle> In Proceedings of the 1st International Conference on AI Planning Systems, </booktitle> <editor> James Hendler, editor. </editor> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California. </address>
Reference-contexts: In reactive planning [38], the agent must respond in real time to externally-caused events|and the necessity of making quick decisions largely precludes the possibility of reasoning far into the future. In cooperative multi-agent planning <ref> [61, 116] </ref>, the primary issue is how to coordinate the actions of cooperating agents|and this makes it largely unnecessary for a single planning agent to generate a plan that accounts for all of the alternative actions that another agent might perform.
Reference: [62] <author> Goren, Charles H. </author> <year> 1957. </year> <title> Goren's New Contract Bridge Complete. </title> <address> Double-day, New York. </address>
Reference-contexts: In bridge, the available schemes are "tactical" and "strategic" schemes based on knowledge from the bridge literature <ref> [62, 163, 120, 134] </ref>. <p> ThemRuff Opponents: ruff a trick ThemOverruff Opponents: ruff a trick with a higher card than the card with which declarer ruffed ThemRuffFour Opponents: play in fourth hand during a ruff ThemFinesse Opponents: take a finesse against declarer Stop Stop planning 68 these tasks based on knowledge from the bridge literature <ref> [62, 163, 120, 134] </ref>. Second hand refers to the player who plays the second card to a given trick; similarly third hand and fourth hand. A winner is a card that is higher than any cards the opponents hold in its suit.
Reference: [63] <author> Gupta, S. K. </author> <year> 1994. </year> <title> Automated Manufacturability Analysis of Machined Parts. </title> <type> Ph.D dissertation, </type> <institution> Department of Mechanical Engineering, University of Maryland, College Park. </institution>
Reference-contexts: Researchers designed and implemented programs for manufacturability analysis in problem domains such as machined parts <ref> [75, 74, 63] </ref> and microwave modules [66].
Reference: [64] <author> Guterl, Fred. </author> <title> "Silicon gambit." Discover 17:6, </title> <month> June </month> <year> 1996, </year> <pages> 48-56. </pages>
Reference-contexts: Kasparov won the match by the score of three to one, with two draws <ref> [64, 72] </ref>. Checkers: AI researchers have studied checkers, a two-player game with twenty-four pieces on a board with sixty-four squares, since at least 1967 [127]. Chinook [130] is the best checkers player|human or machine|still alive [64, 131]. In 1994, the best human player in the world was Dr. <p> Kasparov won the match by the score of three to one, with two draws [64, 72]. Checkers: AI researchers have studied checkers, a two-player game with twenty-four pieces on a board with sixty-four squares, since at least 1967 [127]. Chinook [130] is the best checkers player|human or machine|still alive <ref> [64, 131] </ref>. In 1994, the best human player in the world was Dr. Marion Tinsley; Tinsley played six games of the Man-Machine World Championship against Chinook|all draws|before resigning due to illness. <p> David Levy, an international chess master and organizer of the Computer Olympiad, called Bridge Baron the best bridge-playing program in the world <ref> [64] </ref>.
Reference: [65] <author> Haddawy, P.; Doan, A.; and Goodwin, R. </author> <year> 1995. </year> <title> "Efficient decision-theoretic planning: techniques and empirical analysis." </title> <booktitle> In Proceedings UAI95, </booktitle> <pages> 229-236. </pages>
Reference-contexts: Problems on a grander scale are starting to be studied <ref> [65, 23, 89] </ref>. The limitation of these partial-order planning approaches is that they do not scale well, because they have difficulty with preconditions involving uncertainty, geometry, or numerical values. Much of the previous research on multi-agent planning has dealt with different issues than those that concern us here.
Reference: [66] <author> Harhalakis, G.; Kinsey, A.; Minis, I.; and Rathbun, H. </author> <year> 1993. </year> <title> "Manufac-turability evaluation of electronic products using group technology." </title> <booktitle> In NSF Design and Manufacturing Systems Grantees Conference, Charlotte, </booktitle> <publisher> North Carolina. </publisher>
Reference-contexts: Researchers designed and implemented programs for manufacturability analysis in problem domains such as machined parts [75, 74, 63] and microwave modules <ref> [66] </ref>.
Reference: [67] <author> Hebbar, K.; Smith, S. J. J.; Minis, I.; and Nau, D. S. </author> <year> 1996. </year> <title> "Plan-based evaluation of designs for microwave modules." </title> <booktitle> In ASME Design for Manufacturing Conference, </booktitle> <address> p. </address> <note> 262 (abstract; full paper on CD-ROM). </note>
Reference-contexts: parts usually does not involve traditional manufacturing practices such as milling, these systems do not consider these processes; their process planning is not integrated with an electronic/mechanical CAD system; and they do not evaluate their plans for cost. 1 I have adapted most of the material in this section from <ref> [67] </ref>. 103 For classifying electro-mechanical designs, Candadai and others [30] have taken a Group-Technology-based approach. Based on this classification, Lam [84] generates high level process plans for the manufacture of these designs. <p> I discuss the realistic and robust features of my approach in Section 7.1 on Page 144, and Section 7.2 on Page 167. I have previously described my approach to process planning in numerous papers <ref> [67, 143, 145, 157, 68] </ref>. 6.1.2 Concurrent Engineering Concurrent engineering, also known as Integrated Product and Process Design (IPPD), is the simultaneous design of a product and process planning for its manufacture. Seventy to eighty percent of manufacturing cost is determined during product design [150]. <p> The housing is a metallic enclosure for the MIC. For an example of a microwave module, including the housing and the MIC, see Figure 6.1 on Page 106. A microwave module consists of the following pieces: 2 I have adapted most of the material in this section from <ref> [67] </ref>. 3 One kilohertz is one thousand cycles per second; one gigahertz is one billion (10 9 = 1000000000) cycles per second. 105 MIC Housing Transmission lines through-hole Plated Milled pocket Ground plane Through-hole Dielectric Hybrid components 106 * The ground plane is a metallic layer of aluminum or copper. <p> EDAPS integrates electrical design, mechanical design, and process planning for both the mechanical and electrical domains <ref> [67, 143, 145, 157, 68] </ref>. Thus, EDAPS helps achieve the goals of concurrent engineering. EDAPS consists of a user interface, written in Tcl/Tk [112]; a number of routines written in C++ and "AEL"; and the EDAPS Process Planner. <p> See Figure 7.3 on Page 151 for RM1's schematic circuit, Figure 7.4 on Page 152 for RM1's layout, and Figure 7.5 on Page 153 for RM1's mechanical features and components. (I have taken these figures from <ref> [67] </ref>). The planner input file for RM1|a realistic, manufacturable design|is shown 167 in Figure 7.6 on Page 154, Figure 7.7 on Page 155, Figure 7.8 on Page 156, and Figure 7.9 on Page 157. It follows the planner input format specified in Section 6.4.2 on Page 114.
Reference: [68] <author> Herrmann, J. W.; Minis, I.; Nau, D. S.; Hebbar, K.; and Smith, S. J. J. </author> <year> 1997. </year> <title> "Integrated design and process planning for microwave modules." 267 Integrated Product and Process Development: Methods, Tools, </title> <journal> and Tech--nologies, </journal> <note> under review. </note>
Reference-contexts: I discuss the realistic and robust features of my approach in Section 7.1 on Page 144, and Section 7.2 on Page 167. I have previously described my approach to process planning in numerous papers <ref> [67, 143, 145, 157, 68] </ref>. 6.1.2 Concurrent Engineering Concurrent engineering, also known as Integrated Product and Process Design (IPPD), is the simultaneous design of a product and process planning for its manufacture. Seventy to eighty percent of manufacturing cost is determined during product design [150]. <p> EDAPS integrates electrical design, mechanical design, and process planning for both the mechanical and electrical domains <ref> [67, 143, 145, 157, 68] </ref>. Thus, EDAPS helps achieve the goals of concurrent engineering. EDAPS consists of a user interface, written in Tcl/Tk [112]; a number of routines written in C++ and "AEL"; and the EDAPS Process Planner.
Reference: [69] <institution> The Holy Bible; Revised Standard Version. </institution> <address> 1973. Collins, New York. </address>
Reference-contexts: The EDAPS Process Planner avoids this difficulty, because the interactions of the mechanical and electronic processes in its domain are comparatively simple. 185 Chapter 8 Conclusion "I have fought the good fight, I have finished the race, I have kept the faith." | 2 Timothy 4, 7 <ref> [69] </ref> 8.1 Discussion of HTN Planning using TOFS 8.1.1 Review of Results I have employed HTN planning using TOFS with great success to solve two different research projects in artificial intelligence. I review the results of these projects in this section.
Reference: [70] <author> Horacek, H. </author> <year> 1990. </year> <title> "Reasoning with uncertainty in computer chess." </title> <booktitle> Artificial Intelligence 43 </booktitle> <pages> 37-56. </pages>
Reference-contexts: You Do (It's the Way That You Do It)", from The Fun Boy Three, by The Fun Boy Three with Bananarama, 1982 [52] Chess: No other game has received as much attention from the AI community as chess, a two-player game with thirty-two pieces on a board with sixty-four squares <ref> [166, 167, 88, 18, 70, 99] </ref>. Deep Blue, which grew out of Deep Thought [71] is acknowledged to be the best computer chess program; it played human world champion Garry Kasparov in a six-game match under standard tournament conditions on 10-17 February 1996. <p> Horacek introduced uncertainty to his chess program's computations to improve 30 its play in the endgame <ref> [70] </ref>. Ballard's approach to backgammon included a game-tree search with uncertainty [11].
Reference: [71] <author> Hsu, F. H. </author> <year> 1990. </year> <title> Large-Scale Paralellization of Alpha-Beta Search: An Algorithmic Study with Computer Chess. </title> <type> Ph.D. dissertation, </type> <institution> Carnegie-Mellon University, Pittsburgh, Pennsylvania. </institution>
Reference-contexts: Deep Blue, which grew out of Deep Thought <ref> [71] </ref> is acknowledged to be the best computer chess program; it played human world champion Garry Kasparov in a six-game match under standard tournament conditions on 10-17 February 1996. Kasparov won the match by the score of three to one, with two draws [64, 72].
Reference: [72] <author> IBM. </author> <year> 1996. </year> <title> "The ACM Chess Challenge: Kasparov vs. Deep Blue." </title> <publisher> &lt;http://www.chess.ibm.park.org&gt;. </publisher>
Reference-contexts: Kasparov won the match by the score of three to one, with two draws <ref> [64, 72] </ref>. Checkers: AI researchers have studied checkers, a two-player game with twenty-four pieces on a board with sixty-four squares, since at least 1967 [127]. Chinook [130] is the best checkers player|human or machine|still alive [64, 131]. In 1994, the best human player in the world was Dr.
Reference: [73] <institution> The Initial Graphics Exchange Specification (IGES) Version 5.1. </institution> <year> 1991. </year> <title> IGES/PDES Organization, </title> <address> Gaithersburg, MD. </address>
Reference-contexts: ACIS Humans: Substrate Design Module User EDAPS Interface: Circuit Schematic and Circuit Layout Module Process Planning and Plan Evaluation Module Files: MicrostationACADEMYLibra Commercial software: circuit schematic Design and Planning System. 112 in EDAPS supplement ACADEMY's routines that provide output for Micro--station in the ANSI-standard IGES (Initial Graphics Exchange Specification) format <ref> [73] </ref>. A mechanical designer then invokes EDAPS's substrate design module. The mechanical designer uses MicroStation to add mechanical features to the layout and components, producing a fully designed microwave module.
Reference: [74] <author> Ishii, K. </author> <year> 1993. </year> <title> "Modeling of concurrent engineering design." </title> <booktitle> In Concurrent Engineering: Automation, Tools and Techniques, </booktitle> <pages> 19-39. </pages> <editor> Andrew Kusiak, ed. </editor> <publisher> Wiley, </publisher> <address> New York. </address>
Reference-contexts: Researchers designed and implemented programs for manufacturability analysis in problem domains such as machined parts <ref> [75, 74, 63] </ref> and microwave modules [66].
Reference: [75] <author> Jakiela, M. and Papalambros, P. </author> <year> 1989. </year> <title> "Design and implementation of a prototype intelligent CAD system." ASME Journal of Mechanisms, Transmission, </title> <booktitle> and Automation in Design 111:2, </booktitle> <month> June </month> <year> 1989, </year> <pages> 252-258. </pages>
Reference-contexts: Researchers designed and implemented programs for manufacturability analysis in problem domains such as machined parts <ref> [75, 74, 63] </ref> and microwave modules [66].
Reference: [76] <author> Jonsson, Bjorn. </author> <year> 1997. </year> <title> "Re: `Tignum' in the Bandmanna saga?" Personal communication by email, </title> <month> 25 January </month> <year> 1997. </year> <month> 268 </month>
Reference-contexts: Tignum 2 is the second version of the program; the Latin word "tignum" means "wooden beam", such as the wooden beams used to build 255 a bridge [135]. In Icelandic, "tignum" is a form of the adjective "tiginn", meaning "noble" <ref> [76] </ref>. First used in Section 1 on Page 2. * TOFS: Total-Order Planning with Forward Search. First used in Section 1 on Page 2. * tolerance: an allowed variance in a parameter of a mechanical feature.
Reference: [77] <author> Khemani, D. </author> <year> 1994. </year> <title> "Planning with thematic actions." </title> <booktitle> In Proceedings of the 2nd International Conference on AI Planning Systems, </booktitle> <editor> Kristian Ham-mond, editor. </editor> <publisher> AAAI Press, </publisher> <address> Menlo Park, California. </address>
Reference-contexts: player doing the bidding cannot see partner's hand nor the opponents' hands, but those players give clues about their hands by their calls during the bidding. 27 investigated a case-based planning approach to notrump declarer play, but has not described the speed and skill of the program in actual competition <ref> [77] </ref>. The approaches to play used in current commercial bridge programs are based almost exclusively on domain-specific techniques. One approach is to make assumptions about the placement of the opponents' cards based on information from the bidding and prior play, and then search the game tree resulting from these assumptions.
Reference: [78] <author> Kierulf, A., Chen, K., and Nievergelt, J. </author> <year> 1990. </year> <title> "Smart game board and Go Explorer: a study in software and knowledge engineering." </title> <journal> Communications of the ACM 33 </journal> <pages> 152-167. </pages>
Reference-contexts: Bill Robertie, a former world backgammon champion [154]. 4.1.2 Go: One Game in Which AI Approaches Have Not Had Success While Go, a two-player game where players place stones on a 381-square board (nineteen-by-nineteen), is a standard perfect-information game, it has not responded well to any AI approaches to date <ref> [78, 102] </ref>. Because a player may 25 play on almost any open square on the board, the branching factor for the game is in the hundreds, and thus the game tree is too big to search in any reasonable amount of time.
Reference: [79] <author> Knuth, D. E. </author> <year> 1973. </year> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol. </volume> <month> 3: </month> <title> Sorting and Searching. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts. </address>
Reference-contexts: I am not employing "decision trees" (also, and less ambiguously, referred to as "comparison trees" <ref> [79] </ref>) as they are defined in the sorting literature ([34], p. 173). I apologize for the confusion, but it is inescapable. 5 In the decision theory literature, what I call external-agent nodes are usually called "chance nodes", because decision theorists usually assume that the external agent is random.
Reference: [80] <author> Knuth, D. E. and Moore, R. W. </author> <year> 1975. </year> <title> "An analysis of alpha-beta pruning." </title> <booktitle> Artificial Intelligence 6 </booktitle> <pages> 293-326. </pages>
Reference-contexts: To further decrease the number of nodes examined, game-tree-search procedures have been developed such as alpha-beta <ref> [80] </ref>, B* [16], and SSS* [149]. These procedures will ignore any node below u that they can prove will not affect u's minimax value. One method for reducing the number of nodes examined by a tree search is forward pruning.
Reference: [81] <author> Konishi, Y. </author> <year> 1991. </year> <title> Microwave Integrated Circuits. </title> <publisher> Marcel Dekker, </publisher> <address> New York, New York. </address>
Reference-contexts: the size of RM1 and RM2, not of the size of URM5 and URM6. 7.2 Sample Tests of the EDAPS Process Plan ner 7.2.1 Test on a Manufacturable Microwave Module The first sample test of the EDAPS Process Planner is on RM1, a design for a mixer-IF (Intermediate Frequency) amplifier <ref> [81] </ref>. See Figure 7.3 on Page 151 for RM1's schematic circuit, Figure 7.4 on Page 152 for RM1's layout, and Figure 7.5 on Page 153 for RM1's mechanical features and components. (I have taken these figures from [67]).
Reference: [82] <author> Korf, Richard and Chickering, David M. </author> <year> 1997. </year> <title> "Best-first minimax search." </title> <journal> Artificial Intelligence, </journal> <note> to appear. </note>
Reference-contexts: A hybrid HTN planning/partition search approach may prove to be better than either GIB or Tignum 2 on its own. Compare the "hybrid alpha-beta/best-first minimax search" approach, which has proven to be better than either "alpha-beta" or "best-first minimax search" alone <ref> [82] </ref>. 5. HTN planning has the advantage of "knowing" why it does what it does, and thus having an easier time of explaining it to a human user.
Reference: [83] <author> Kushmerick, N.; Hanks, S.; and Weld, D. </author> <year> 1994. </year> <title> "An algorithm for probabilistic least-commitment planning." </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <pages> 1123-1128. </pages> <publisher> AAAI, </publisher> <address> Menlo Park, Cal-ifornia. </address>
Reference-contexts: do not address games, such as bridge, which do not have perfect information. 4.1.5 Planning with Multi-Agency, Uncertainty, and In complete Information Some work has been done on planning with uncertainty and incomplete information, focusing on small-scale problems with only a few uncertain conditions in the state of the world <ref> [117, 40, 83, 33] </ref>. Problems on a grander scale are starting to be studied [65, 23, 89]. The limitation of these partial-order planning approaches is that they do not scale well, because they have difficulty with preconditions involving uncertainty, geometry, or numerical values.
Reference: [84] <author> Lam, G. </author> <year> 1995. </year> <title> "Automated high level process planning for mechanical and electro-mechanical components for agile manufacturing". M.S. </title> <type> thesis, </type> <institution> Department of Mechanical Engineering, University of Maryland at College Park. </institution> <month> 269 </month>
Reference-contexts: Based on this classification, Lam <ref> [84] </ref> generates high level process plans for the manufacture of these designs. Though Lam's system considers the manufacturing processes in both domains, it does not work concurrently with an electronic CAD tool. In [109], the authors argued that AI planning techniques can potentially be useful in several manufacturing domains.
Reference: [85] <author> Larson, Harold J. </author> <year> 1982. </year> <title> Introduction to Probability Theory and Statistical Inference, 3rd. </title> <editor> ed. </editor> <publisher> Wiley, </publisher> <address> New York. </address>
Reference: [86] <author> Liau, J., S. and Young, R. E. </author> <year> 1993. </year> <title> "A process planning and concurrent engineering system for PCBs." </title> <journal> Manufacturing Review 6:1, </journal> <month> March </month> <year> 1993, </year> <pages> 25-39. </pages>
Reference-contexts: For a review of CAPP systems, see [132]. For a review of CAPP systems for electronic parts, see [94]; many such systems have been developed <ref> [32, 128, 129, 86, 165, 156] </ref>.
Reference: [87] <author> Lee, K.-F. and Mahajan, S. </author> <year> 1990. </year> <title> "The development of a world class Oth-ello program." </title> <booktitle> Artificial Intelligence 43 </booktitle> <pages> 21-36. </pages>
Reference-contexts: Tinsley died in April 1995. Othello: Othello (also called Reversi), a two-player game in which play 24 ers (usually) fill up all sixty-four squares of the board, has received significant attention from AI researchers <ref> [87, 100, 45] </ref>. Logistello is probably the world's best Othello-playing program, winning sixteen of the twenty-one tournaments in which it has participated since October 1993 [26, 28].
Reference: [88] <author> Levy, D. and Newborn, M. </author> <year> 1982. </year> <title> All About Chess and Computers. </title> <publisher> Computer Science Press. </publisher>
Reference-contexts: You Do (It's the Way That You Do It)", from The Fun Boy Three, by The Fun Boy Three with Bananarama, 1982 [52] Chess: No other game has received as much attention from the AI community as chess, a two-player game with thirty-two pieces on a board with sixty-four squares <ref> [166, 167, 88, 18, 70, 99] </ref>. Deep Blue, which grew out of Deep Thought [71] is acknowledged to be the best computer chess program; it played human world champion Garry Kasparov in a six-game match under standard tournament conditions on 10-17 February 1996.
Reference: [89] <author> Lin, S.-H. and Dean, T. </author> <year> 1995. </year> <title> "Generating optimal policies for Markov decision processes formulated as plans with conditional branches and loops." </title> <booktitle> In Third European Workshop on Planning. </booktitle>
Reference-contexts: Problems on a grander scale are starting to be studied <ref> [65, 23, 89] </ref>. The limitation of these partial-order planning approaches is that they do not scale well, because they have difficulty with preconditions involving uncertainty, geometry, or numerical values. Much of the previous research on multi-agent planning has dealt with different issues than those that concern us here.
Reference: [90] <author> Lindelof, E. </author> <year> 1983. </year> <title> COBRA: the computer-designed bidding system. </title> <publisher> Victor Gollancz Ltd, London. </publisher>
Reference-contexts: John Smith implemented a computer program that modeled partner's hand and the 26 opponents' hands 1 and did some rule-based reasoning and bidding in non-com-petitive auctions [136]. Lindelof used a machine-learning approach to simultaneously build a computer program and bidding system for non-competitive auctions <ref> [90] </ref>. Gamback et al. combined a rule-based expert system with a neural net to do simple bidding in both non-competitive and competitive auctions [53, 54]. 4.1.3.2 Computer Play in Bridge While Stainer only implemented a primitive bidding program, his ideas about play still offer insight today [147].
Reference: [91] <author> Lopatin, A. </author> <year> 1992. </year> <title> "Two combinatorial problems in programming bridge game." </title> <note> Computer Olympiad, unpublished. </note>
Reference-contexts: One approach is to make assumptions about the placement of the opponents' cards based on information from the bidding and prior play, and then search the game tree resulting from these assumptions. This approach was taken in the Alpha Bridge program, with a 20-ply (5-trick) search <ref> [91] </ref>. However, this approach did not work very well: at the 1992 Computer Olympiad, Alpha Bridge placed last. Play of better quality can be achieved by generating several random hypotheses for what hands the opponents might have, and doing a full complete-information game-tree search for each hypothesized hand. <p> The best estimate of the number of leaf nodes that a brute-force game tree search would generate in the average case is 10 24 <ref> [91] </ref>. <p> Hence the best estimate of the number of leaf nodes that a brute-force approach would generate in the average case, 10 24 <ref> [91] </ref>, is much less than 5:55 fi 10 44 . Also, in most holdings, each player has several sets of equivalent cards.
Reference: [92] <author> Luger, George F. and Stubblefield, William A. </author> <year> 1993. </year> <title> Artificial Intelligence: Structures and Strategies for Complex Problem Solving, 2nd ed. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts. </address>
Reference: [93] <author> Manley, B. </author> <year> 1993. </year> <title> "Software `judges' rate bridge-playing products." The Bulletin (published monthly by the American Contract Bridge League), </title> <address> 59:11, </address> <month> November </month> <year> 1993, </year> <pages> 51-54. 270 </pages>
Reference-contexts: 1995 Computer Bridge competitions sponsored by the American Contract Bridge League (ACBL). "When we play at cards You use an extra sense: : : " | "(I'm Always Touched By Your) Presence Dear", from The Best of Blondie, by Blondie, 1981 [21] In their review of seven commercially available programs <ref> [93] </ref>, the ACBL rated the Bridge Baron to be the best of the seven, and the skill of the Bridge Baron to be the best of the five that do declarer play without "peeking" at the opponents' cards.
Reference: [94] <author> Maria, A. and Srihari, K. </author> <year> 1992. </year> <title> "A review of knowledge-based systems in printed circuit board assembly." </title> <booktitle> The International Journal of Advanced Manufacturing Technology 7 </booktitle> <pages> 368-377. </pages>
Reference-contexts: For a review of CAPP systems, see [132]. For a review of CAPP systems for electronic parts, see <ref> [94] </ref>; many such systems have been developed [32, 128, 129, 86, 165, 156].
Reference: [95] <author> Meat Loaf. </author> <year> 1993. </year> <title> Bat Out Of Hell II: Back Into Hell. MCA Records, </title> <publisher> Inc. </publisher> <address> Universal City, California. </address>
Reference-contexts: hands? Can you build an emerald city with these grains of sand? Can you give me something I can take home?" "Now I can do that!" | "I'd Do Anything For Love (But I Won't Do That)", from Bat Out of Hell II: Back Into Hell, by Meat Loaf, 1993 <ref> [95] </ref> To provide context for my work on the EDAPS Process Planner, I describe related work in process planning and concurrent engineering in Section 6.1 on Page 103. I introduce my domain, microwave modules, in Section 6.2 on Page 105.
Reference: [96] <author> Mendicino, Pete. </author> <year> 1995. </year> <title> Meeting of 27 September 1995, and other personal communication. </title>
Reference-contexts: In microwave module manufacture, the available schemes are processes or sets of processes of varying degrees of complexity, based on information from Brindley's book [25], from Pete Mendicino of Northrop Grumman's Electronic Sensors and Systems Division <ref> [96] </ref>, and from Mark Creighton of Modular Components [35]. 11 Chapter 3 Planning Using TOFS (Total-Order Forward Search) "What do we do now?" "I don't know!" "The rhyming song, the rhyming song: : : " "Let's all jump up and down and wave our arms And get off the stage!" "Yeah <p> success, as described in Section 6.1.1 on Page 103, the reasons for this lack of success do not apply to the EDAPS Process Planner, as I will explain in Section 7.3 on Page 184. 113 from Brindley's book [25], from Pete Mendicino of Northrop Grumman's Elec--tronic Sensors and Systems Division <ref> [96] </ref>, and from Mark Creighton of Modular Components [35]. 6.4.2 Input The EDAPS Process Planner takes input from "stdin", the standard input stream, which refers to the keyboard if input has not been redirected. The input is a series of commands, one to a line, until end of file.
Reference: [97] <author> Mendicino, Pete. </author> <year> 1996. </year> <title> "Letter Received". </title> <type> Personal communication by email, </type> <month> 6 March </month> <year> 1996. </year>
Reference-contexts: Thus, these designs were not realistic because they perform no useful electrical functions. The EDAPS Process Planner produced the correct output for every design. Pete Mendicino of Northrop Grumman's Electronic Sensors and Systems Division gave the following endorsement of the output on RM1: "The information looks good." <ref> [97] </ref> Recall that EDAPS is a design and process planning environment whose goal is to integrate mechanical and electronic design tools, with evaluation of the design based on process planning. This goal would not be possible without the EDAPS Process Planner.
Reference: [98] <author> Minton, Steven; Bresina, John; and Drummond, Mark. </author> <year> 1994. </year> <title> "Total-order and partial-order planning: a comparative analysis." </title> <journal> Journal of Artificial Intelligence Research 2 </journal> <pages> 227-262. </pages>
Reference-contexts: Minton et al. described a partial-order planner and a total-order planner such that the total-order planner's search space is always larger than the partial-order planner's search space <ref> [98] </ref>. Partial-order planning also has some practical advantages over total-order planning. Consider the "dinner and a movie" example from Section 3.1 on 16 Page 13.
Reference: [99] <author> Morales, Eduardo M. </author> <year> 1996. </year> <title> "Learning playing strategies in chess." </title> <booktitle> Computational Intelligence, </booktitle> <address> 12:1, </address> <month> February </month> <year> 1996, </year> <pages> 65-87. </pages>
Reference-contexts: You Do (It's the Way That You Do It)", from The Fun Boy Three, by The Fun Boy Three with Bananarama, 1982 [52] Chess: No other game has received as much attention from the AI community as chess, a two-player game with thirty-two pieces on a board with sixty-four squares <ref> [166, 167, 88, 18, 70, 99] </ref>. Deep Blue, which grew out of Deep Thought [71] is acknowledged to be the best computer chess program; it played human world champion Garry Kasparov in a six-game match under standard tournament conditions on 10-17 February 1996.
Reference: [100] <author> Moriarty, D. and Miikkulainen, R. </author> <year> 1993. </year> <title> "Evolving complex Othello strategies using marker-based genetic encoding of neural networks". </title> <type> Technical report AI93-206, </type> <institution> Department of Computer Sciences, University of Texas at Austin. </institution>
Reference-contexts: Tinsley died in April 1995. Othello: Othello (also called Reversi), a two-player game in which play 24 ers (usually) fill up all sixty-four squares of the board, has received significant attention from AI researchers <ref> [87, 100, 45] </ref>. Logistello is probably the world's best Othello-playing program, winning sixteen of the twenty-one tournaments in which it has participated since October 1993 [26, 28].
Reference: [101] <author> Morissette, Alanis. </author> <year> 1995. </year> <title> Jagged Little Pill. </title> <publisher> Maverick Recording Company, </publisher> <address> Los Angeles, California. </address>
Reference: [102] <author> Muller, Martin. </author> <year> 1995. </year> <title> Computer Go as a Sum of Local Games: An Application of Combinatorial Game Theory. </title> <type> Ph.D. Dissertation, </type> <institution> Swiss Federal Institute of Technology, </institution> <address> Zurich. </address> <month> 271 </month>
Reference-contexts: Bill Robertie, a former world backgammon champion [154]. 4.1.2 Go: One Game in Which AI Approaches Have Not Had Success While Go, a two-player game where players place stones on a 381-square board (nineteen-by-nineteen), is a standard perfect-information game, it has not responded well to any AI approaches to date <ref> [78, 102] </ref>. Because a player may 25 play on almost any open square on the board, the branching factor for the game is in the hundreds, and thus the game tree is too big to search in any reasonable amount of time.
Reference: [103] <author> Muller, Martin. </author> <year> 1996. </year> <note> "The FOST Cup". &lt;http://www.usgo.org/compu-ter/fost.html&gt;. </note>
Reference-contexts: HandTalk, by Chen ZhiXing, is probably the best computer Go program to date: it won the 1995 and 1996 FOST cups, and the 1995 Interational Computer Go Congress. HandTalk beat two of three human "experts"|all youth champions, nine or ten years old|in 1995, but HandTalk had a 13-stone handicap <ref> [103, 104] </ref>. 4.1.3 Contract Bridge: Another Game in Which AI Ap proaches Have Not Had Success Contract bridge|a four-player game with fifty-two cards, with rules as described in Section 4.2.1 on Page 32|is another game in which AI approaches had not succeeded.
Reference: [104] <author> Muller, Martin. </author> <year> 1996. </year> <booktitle> "International Computer Go Congress". </booktitle> <address> &lt;http:- //www.usgo.org/computer/icgc.html&gt;. </address>
Reference-contexts: HandTalk, by Chen ZhiXing, is probably the best computer Go program to date: it won the 1995 and 1996 FOST cups, and the 1995 Interational Computer Go Congress. HandTalk beat two of three human "experts"|all youth champions, nine or ten years old|in 1995, but HandTalk had a 13-stone handicap <ref> [103, 104] </ref>. 4.1.3 Contract Bridge: Another Game in Which AI Ap proaches Have Not Had Success Contract bridge|a four-player game with fifty-two cards, with rules as described in Section 4.2.1 on Page 32|is another game in which AI approaches had not succeeded.
Reference: [105] <author> The Muppets. </author> <year> 1993. </year> <title> Muppet Hits. Jim Henson Records/BMG Music, </title> <address> New York. </address>
Reference-contexts: TOFS (Total-Order Forward Search) "What do we do now?" "I don't know!" "The rhyming song, the rhyming song: : : " "Let's all jump up and down and wave our arms And get off the stage!" "Yeah yeah yeah!" | "The Rhyming Song", from Muppet Hits, by The Muppets, 1993 <ref> [105] </ref> A list of events has total order if there is exactly one event that can come first in the time sequence, exactly one event that can come second in the time sequence, and so forth.
Reference: [106] <author> Nau, D. S. </author> <year> 1982. </year> <title> "The last player theorem." </title> <booktitle> Artificial Intelligence 18 </booktitle> <pages> 53-65. </pages>
Reference-contexts: Thus, as shown in Figure A.3 on Page 219, for each value of p, the forward-pruning algorithm makes more accurate decisions in N-game-like trees than in P game trees. 2 The probability of correct decision for N-game-like trees exhibits a "manic-depressive" behavior similar to that observed in <ref> [106] </ref>, that is, it is higher for odd Max-heights than it is for even Max-heights. I believe this is because my RVA nodes are only put below Min nodes.
Reference: [107] <author> Nau, D. S. </author> <year> 1982. </year> <title> "An investigation of the causes of pathology in games." </title> <booktitle> Artificial Intelligence 19 </booktitle> <pages> 257-278. </pages>
Reference-contexts: A.1.3 P-Game Trees A P-game tree <ref> [107, 108, 115] </ref> is a complete tree that contains the following types of nodes (an example appears in Figure A.2 on Page 204): 1. Max nodes, where it is Max's move. <p> chosen from a the set f0; 1g, with probability p P of choosing 1. (In this dissertation, I will set p P = 0:68233, in order to guarantee that in the limit, there is still a nonzero probability that each player will have a forced win in the game tree <ref> [14, 114, 107] </ref>.) Because u's payoff does not depend on the path from the root to u, there is no need for RVA nodes. 204 A.2 Forward-Pruning Models In the game trees investigated in this section, there are two players, Max and Min.
Reference: [108] <author> Nau, D. S. </author> <year> 1983. </year> <title> "Pathology on game trees revisited, and an alternative to minimaxing." </title> <booktitle> Artificial Intelligence 21:(1,2), </booktitle> <pages> 221-244. </pages>
Reference-contexts: A.1.3 P-Game Trees A P-game tree <ref> [107, 108, 115] </ref> is a complete tree that contains the following types of nodes (an example appears in Figure A.2 on Page 204): 1. Max nodes, where it is Max's move.
Reference: [109] <author> Nau, D. S.; Gupta, S. K.; and Regli, W. C. </author> <year> 1995. </year> <title> "AI planning versus manufacturing-operation planning: a case study." </title> <booktitle> In Proceedings of the 14th International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1670-1676. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California. </address>
Reference-contexts: Based on this classification, Lam [84] generates high level process plans for the manufacture of these designs. Though Lam's system considers the manufacturing processes in both domains, it does not work concurrently with an electronic CAD tool. In <ref> [109] </ref>, the authors argued that AI planning techniques can potentially be useful in several manufacturing domains. However, this potential could not be realized unless researchers could develop more realistic and robust approaches to issues important to manufacturing engineers.
Reference: [110] <author> O'Grady, P.; Young, R. E.; Greef, A.; and Smith, L. </author> <year> 1991. </year> <title> "An advice system for concurrent engineering." </title> <journal> International Journal of Computer Integrated Manufacturing 4:2, </journal> <month> March </month> <year> 1991, </year> <pages> 63-70. </pages>
Reference-contexts: Such approaches are called concurrent engineering or Integrated Product and Process Design (IPPD). Concurrent engineering of microwave modules requires interdisciplinary teams of electrical engineers, mechanical engineers, and manufacturing engineers to coordinate their efforts [39]. In large organizations, achieving this coordination can be difficult <ref> [110] </ref>. 109 This coordination would be easier with an appropriate computer system. One of the components of such a computer system would be a process planner. In this domain, a process planner takes, as input, information about the parts list, layout, and mechanical features of a microwave module.
Reference: [111] <editor> Orchestral Manoeuvres in the Dark. </editor> <year> 1988. </year> <title> The Best of OMD. </title> <publisher> Virgin Records Ltd., </publisher> <address> London. </address> <month> 272 </month>
Reference: [112] <author> Ousterhout, J. K. </author> <year> 1994. </year> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. </address>
Reference-contexts: EDAPS integrates electrical design, mechanical design, and process planning for both the mechanical and electrical domains [67, 143, 145, 157, 68]. Thus, EDAPS helps achieve the goals of concurrent engineering. EDAPS consists of a user interface, written in Tcl/Tk <ref> [112] </ref>; a number of routines written in C++ and "AEL"; and the EDAPS Process Planner. I developed the EDAPS Process Planner; Kiran Hebbar developed the rest of EDAPS. EDAPS uses the following commercial software: * EEsof [41], a tool for computer-assisted electronic design.
Reference: [113] <author> Patashnik, O. </author> <year> 1980. </year> <title> "Qubic: 4x4x4 tic-tac-toe." </title> <journal> Mathematics Magazine 53 </journal> <pages> 202-216. </pages>
Reference-contexts: The second game to be solved was Qubic, two-player three-dimensional tic-tac-toe on a four-by-four-by-four cube [5]. While Patashnik had proven that Qubic is a win for the first player in 1977 <ref> [113] </ref>, the game was not solved because Patashnik did not write a program that played optimally under tournament conditions (though it was probably a simple extension of his work.) Allis et al. presented an alternate proof that Qubic is a win for the first player, and wrote a program that plays
Reference: [114] <author> Pearl, Judea. </author> <year> 1980. </year> <title> "Asymptotic properties of minimax trees and game-searching procedures." </title> <booktitle> Artificial Intelligence 14 </booktitle> <pages> 113-138. </pages>
Reference-contexts: chosen from a the set f0; 1g, with probability p P of choosing 1. (In this dissertation, I will set p P = 0:68233, in order to guarantee that in the limit, there is still a nonzero probability that each player will have a forced win in the game tree <ref> [14, 114, 107] </ref>.) Because u's payoff does not depend on the path from the root to u, there is no need for RVA nodes. 204 A.2 Forward-Pruning Models In the game trees investigated in this section, there are two players, Max and Min.
Reference: [115] <author> Pearl, Judea. </author> <year> 1984. </year> <title> Heuristics. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. </address>
Reference-contexts: A.1.3 P-Game Trees A P-game tree <ref> [107, 108, 115] </ref> is a complete tree that contains the following types of nodes (an example appears in Figure A.2 on Page 204): 1. Max nodes, where it is Max's move.
Reference: [116] <author> Pednault, E. P. D. </author> <year> 1987. </year> <title> "Solving multiagent dynamic world problems in the classical planning framework." </title> <booktitle> In Reasoning about Actions and Plans: Proceedings of the 1986 Workshop, </booktitle> <pages> 42-82. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, California. </address>
Reference-contexts: In reactive planning [38], the agent must respond in real time to externally-caused events|and the necessity of making quick decisions largely precludes the possibility of reasoning far into the future. In cooperative multi-agent planning <ref> [61, 116] </ref>, the primary issue is how to coordinate the actions of cooperating agents|and this makes it largely unnecessary for a single planning agent to generate a plan that accounts for all of the alternative actions that another agent might perform.
Reference: [117] <author> Peot, M. and Smith, D. </author> <year> 1992. </year> <title> "Conditional nonlinear planning." </title> <booktitle> In Proc. First Internat. Conf. AI Planning Systems (AIPS-92), </booktitle> <pages> 189-197. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California. </address>
Reference-contexts: do not address games, such as bridge, which do not have perfect information. 4.1.5 Planning with Multi-Agency, Uncertainty, and In complete Information Some work has been done on planning with uncertainty and incomplete information, focusing on small-scale problems with only a few uncertain conditions in the state of the world <ref> [117, 40, 83, 33] </ref>. Problems on a grander scale are starting to be studied [65, 23, 89]. The limitation of these partial-order planning approaches is that they do not scale well, because they have difficulty with preconditions involving uncertainty, geometry, or numerical values.
Reference: [118] <author> Pryor, L. and Collins, G. </author> <year> 1996. </year> <title> "Planning for contingencies: a decision-based approach". </title> <journal> Journal of Artificial Intelligence Research 4 </journal> <pages> 287-339. </pages>
Reference-contexts: Planning for contingencies deals with issues closer to those that concern us in bridge <ref> [118] </ref>. However, without planning with uncertainty, even planning with contingencies cannot handle the problem of reasoning about situations that have different probabilities. 31 4.1.6 Planning in Games Wilkins uses "knowledge sources" to generate and analyze chess moves for both the player and the opponent [166, 167].
Reference: [119] <author> Quinlan, J. R. </author> <year> 1979. </year> <title> "A knowledge-based system for locating missing high cards in bridge." </title> <booktitle> In Proc. 6th International Joint Conf. Artificial Intelligence, </booktitle> <pages> pp. 705-707. </pages>
Reference-contexts: Quinlan wrote a knowledge-based system for reasoning about high cards, but it never developed into an algorithm for play <ref> [119] </ref>. Berlin proposed an approach to play of the hand at bridge that is similar to mine [15]; sadly, he never had a chance to develop the approach (his paper was published posthumously).
Reference: [120] <author> Reese, Terence and Dormer, Albert. </author> <year> 1985. </year> <title> The Complete Book of Bridge. Faber and Faber, </title> <address> London, England. </address>
Reference-contexts: In bridge, the available schemes are "tactical" and "strategic" schemes based on knowledge from the bridge literature <ref> [62, 163, 120, 134] </ref>. <p> ThemRuff Opponents: ruff a trick ThemOverruff Opponents: ruff a trick with a higher card than the card with which declarer ruffed ThemRuffFour Opponents: play in fourth hand during a ruff ThemFinesse Opponents: take a finesse against declarer Stop Stop planning 68 these tasks based on knowledge from the bridge literature <ref> [62, 163, 120, 134] </ref>. Second hand refers to the player who plays the second card to a given trick; similarly third hand and fourth hand. A winner is a card that is higher than any cards the opponents hold in its suit.
Reference: [121] <author> Rush. </author> <year> 1987. </year> <title> Hold Your Fire. </title> <publisher> Polygram Records Inc., </publisher> <address> New York. </address> <month> 273 </month>
Reference-contexts: out of all played deals is [0:2628; 0:3192]. 74 5.2.3 Results of Tignum 2's Matches Against Bridge Baron "I set the wheels in motion Turn up all the machines Activate the programs And run behind the scenes: : : " | "Prime Mover", from Hold Your Fire, by Rush, 1987 <ref> [121] </ref> In order to compare the declarer play of Tignum 2 against the declarer play of the Bridge Baron, I formed the following two teams: * the BB team: BB (Bridge Baron) for declarer play, and BB for bidding and defender play. * the Tignum 2 team: Tignum 2 for declarer
Reference: [122] <author> Russell, Bertrand. </author> <year> 1901. </year> <title> "Recent work on the principles of mathematics". </title> <journal> International Monthly 4:84. </journal>
Reference-contexts: by William Shakespeare, 1609-1610 ([13], p. 243) 198 Appendix A Forward Pruning "Thus mathematics may be defined as the subject in which we never know what we are talking about, nor whether what we are saying is true." | "Recent work on the principles of mathematics", by Bertrand Russell, 1901 <ref> [122] </ref> Consider a zero-sum game between two players, Max and Min.
Reference: [123] <author> Russell, Stuart and Norvig, Peter. </author> <year> 1995. </year> <title> Artificial Intelligence: A Modern Approach. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey. </address>
Reference: [124] <author> Sacerdoti, E. D. </author> <year> 1974. </year> <title> "Planning in a hierarchy of abstraction spaces." </title> <booktitle> Artificial Intelligence 5 </booktitle> <pages> 115-135. </pages>
Reference-contexts: on HTN Planning "Those who cannot remember the past are condemned to repeat it." | The Sense of Beauty (part IV, "Expression"), by George San tayana, 1892 ([13], p. 703) My work on HTN planning draws on the previous work of Tate with Non-lin [152, 153] and Sacerdoti with NOAH <ref> [124, 125, 126] </ref>. Some related work includes that of Currie and Tate with O-Plan [36] and Wilkins with SIPE [168, 169]. However, for bridge, I needed to modify HTN planning to be able to represent multi-agency and uncertainty; for more details, see Section 4.3 on Page 35. <p> To represent the tactical and strategic schemes of card-playing in bridge, I use multi-agent methods| structures similar to the "action schemas" or "methods" used in hierarchical single-agent planning systems such as Nonlin [152, 153], NOAH <ref> [124, 125, 126] </ref>, O-Plan [36], and SIPE [168, 169], but modified to represent multi-agency and uncertainty. To generate game trees, I use a procedure similar to task decomposition. The methods that perform my tasks correspond to the various tactical and strategic schemes for playing the game of bridge.
Reference: [125] <author> Sacerdoti, E. D. </author> <year> 1975. </year> <title> "The nonlinear nature of plans." </title> <editor> In Allen, J.; Hendler, J.; and Tate, A., editors, </editor> <booktitle> Readings in Planning, </booktitle> <pages> 162-170. </pages> <publisher> Morgan Kaufman, </publisher> <year> 1990. </year> <booktitle> Originally appeared in Proc. 4th International Joint Conf. Artificial Intelligence, </booktitle> <pages> pp. 206-214. </pages>
Reference-contexts: on HTN Planning "Those who cannot remember the past are condemned to repeat it." | The Sense of Beauty (part IV, "Expression"), by George San tayana, 1892 ([13], p. 703) My work on HTN planning draws on the previous work of Tate with Non-lin [152, 153] and Sacerdoti with NOAH <ref> [124, 125, 126] </ref>. Some related work includes that of Currie and Tate with O-Plan [36] and Wilkins with SIPE [168, 169]. However, for bridge, I needed to modify HTN planning to be able to represent multi-agency and uncertainty; for more details, see Section 4.3 on Page 35. <p> To represent the tactical and strategic schemes of card-playing in bridge, I use multi-agent methods| structures similar to the "action schemas" or "methods" used in hierarchical single-agent planning systems such as Nonlin [152, 153], NOAH <ref> [124, 125, 126] </ref>, O-Plan [36], and SIPE [168, 169], but modified to represent multi-agency and uncertainty. To generate game trees, I use a procedure similar to task decomposition. The methods that perform my tasks correspond to the various tactical and strategic schemes for playing the game of bridge.
Reference: [126] <author> Sacerdoti, E. D. </author> <year> 1977. </year> <title> A Structure for Plans and Behavior. </title> <publisher> American El-sevier Publishing Company. </publisher>
Reference-contexts: on HTN Planning "Those who cannot remember the past are condemned to repeat it." | The Sense of Beauty (part IV, "Expression"), by George San tayana, 1892 ([13], p. 703) My work on HTN planning draws on the previous work of Tate with Non-lin [152, 153] and Sacerdoti with NOAH <ref> [124, 125, 126] </ref>. Some related work includes that of Currie and Tate with O-Plan [36] and Wilkins with SIPE [168, 169]. However, for bridge, I needed to modify HTN planning to be able to represent multi-agency and uncertainty; for more details, see Section 4.3 on Page 35. <p> To represent the tactical and strategic schemes of card-playing in bridge, I use multi-agent methods| structures similar to the "action schemas" or "methods" used in hierarchical single-agent planning systems such as Nonlin [152, 153], NOAH <ref> [124, 125, 126] </ref>, O-Plan [36], and SIPE [168, 169], but modified to represent multi-agency and uncertainty. To generate game trees, I use a procedure similar to task decomposition. The methods that perform my tasks correspond to the various tactical and strategic schemes for playing the game of bridge.
Reference: [127] <author> Samuel, A. L. </author> <year> 1967. </year> <title> Some studies in machine learning using the game of checkers. </title> <journal> ii-recent progress. IBM Journal of Research and Development 2 </journal> <pages> 601-617. </pages>
Reference-contexts: Kasparov won the match by the score of three to one, with two draws [64, 72]. Checkers: AI researchers have studied checkers, a two-player game with twenty-four pieces on a board with sixty-four squares, since at least 1967 <ref> [127] </ref>. Chinook [130] is the best checkers player|human or machine|still alive [64, 131]. In 1994, the best human player in the world was Dr. Marion Tinsley; Tinsley played six games of the Man-Machine World Championship against Chinook|all draws|before resigning due to illness.
Reference: [128] <author> Sandborn, P. A. </author> <year> 1992. </year> <title> "A software tool for technology tradeoff evaluation in multichip packaging." </title> <booktitle> In Eleventh IEEE/CHMT International Electronic Manufacturing Technology Symposium, </booktitle> <pages> 337-341. </pages> <publisher> IEEE, </publisher> <address> New York. </address>
Reference-contexts: For a review of CAPP systems, see [132]. For a review of CAPP systems for electronic parts, see [94]; many such systems have been developed <ref> [32, 128, 129, 86, 165, 156] </ref>.
Reference: [129] <author> Sanii, E. T. and Liau, J. S. </author> <year> 1993. </year> <title> "An expert process planning system for electronics PCB assembly." </title> <booktitle> Computers in Electronic Engineering 19:2, </booktitle> <pages> 113-127. </pages>
Reference-contexts: For a review of CAPP systems, see [132]. For a review of CAPP systems for electronic parts, see [94]; many such systems have been developed <ref> [32, 128, 129, 86, 165, 156] </ref>.
Reference: [130] <author> Schaeffer, J.; Culberson, J.; Treloar, N.; Knight, B.; Lu, P.; and Szafron, D. </author> <year> 1992. </year> <title> "A world championship caliber checkers program." </title> <booktitle> Artificial Intelligence 53 </booktitle> <pages> 273-290. </pages>
Reference-contexts: Kasparov won the match by the score of three to one, with two draws [64, 72]. Checkers: AI researchers have studied checkers, a two-player game with twenty-four pieces on a board with sixty-four squares, since at least 1967 [127]. Chinook <ref> [130] </ref> is the best checkers player|human or machine|still alive [64, 131]. In 1994, the best human player in the world was Dr. Marion Tinsley; Tinsley played six games of the Man-Machine World Championship against Chinook|all draws|before resigning due to illness.
Reference: [131] <author> Schaeffer, J.; Lake, R; Lu, P; and Bryant, M. </author> <year> 1996. </year> <title> "Chinook: the man-machine world checkers champion". </title> <journal> AI Magazine 17:1, </journal> <pages> 21-29. </pages>
Reference-contexts: Kasparov won the match by the score of three to one, with two draws [64, 72]. Checkers: AI researchers have studied checkers, a two-player game with twenty-four pieces on a board with sixty-four squares, since at least 1967 [127]. Chinook [130] is the best checkers player|human or machine|still alive <ref> [64, 131] </ref>. In 1994, the best human player in the world was Dr. Marion Tinsley; Tinsley played six games of the Man-Machine World Championship against Chinook|all draws|before resigning due to illness.
Reference: [132] <author> Shah, Jami; Mantyla, Martti; and Nau, Dana. </author> <year> 1994. </year> <title> Advances in Feature Based Manufacturing. </title> <publisher> Elsevier/North Holland, </publisher> <address> New York. </address>
Reference-contexts: Generative process planning systems automatically decide what processes are necessary to manufacture the design, based on process knowledge, geometric reasoning, and other decision logic|though generative process planning systems have had little success, except on specialized problems. For a review of CAPP systems, see <ref> [132] </ref>. For a review of CAPP systems for electronic parts, see [94]; many such systems have been developed [32, 128, 129, 86, 165, 156].
Reference: [133] <author> Shannon, C. </author> <year> 1950. </year> <title> "Programming a computer for playing chess." </title> <journal> Philosophical Magazine 7:14, </journal> <pages> 256-275. </pages>
Reference-contexts: For this reason, game-playing programs usually mark some non-terminal nodes as terminal, and evaluate them using some static evaluation function e (u). The simplest version of this approach is what Shannon <ref> [133] </ref> called Type A pruning: choose some arbitrary cutoff depth L, and mark 199 a non-terminal node u as terminal if and only if u's depth exceeds L.
Reference: [134] <author> Sheinwold, Alfred. </author> <year> 1987. </year> <title> 5 Weeks to Winning Bridge. Pocket Books, a division of Simon & Schuster, </title> <address> New York. </address>
Reference-contexts: In bridge, the available schemes are "tactical" and "strategic" schemes based on knowledge from the bridge literature <ref> [62, 163, 120, 134] </ref>. <p> ThemRuff Opponents: ruff a trick ThemOverruff Opponents: ruff a trick with a higher card than the card with which declarer ruffed ThemRuffFour Opponents: play in fourth hand during a ruff ThemFinesse Opponents: take a finesse against declarer Stop Stop planning 68 these tasks based on knowledge from the bridge literature <ref> [62, 163, 120, 134] </ref>. Second hand refers to the player who plays the second card to a given trick; similarly third hand and fourth hand. A winner is a card that is higher than any cards the opponents hold in its suit.
Reference: [135] <author> Simpson, D. P. </author> <year> 1977. </year> <title> Cassell's Latin Dictionary, 5th ed. </title> <publisher> Macmillan, </publisher> <address> New York. </address>
Reference-contexts: Tignum 2 is the second version of the program; the Latin word "tignum" means "wooden beam", such as the wooden beams used to build 255 a bridge <ref> [135] </ref>. In Icelandic, "tignum" is a form of the adjective "tiginn", meaning "noble" [76]. First used in Section 1 on Page 2. * TOFS: Total-Order Planning with Forward Search. First used in Section 1 on Page 2. * tolerance: an allowed variance in a parameter of a mechanical feature.
Reference: [136] <author> Smith, John G. </author> <year> 1982. </year> <title> "Bilbo: a bridge bidding program." </title> <type> Undergraduate thesis, </type> <institution> Leeds University, Leeds, </institution> <address> England. </address>
Reference-contexts: John Smith implemented a computer program that modeled partner's hand and the 26 opponents' hands 1 and did some rule-based reasoning and bidding in non-com-petitive auctions <ref> [136] </ref>. Lindelof used a machine-learning approach to simultaneously build a computer program and bidding system for non-competitive auctions [90].
Reference: [137] <author> Smith, S. J. J. </author> <year> 1991. </year> <title> "Game playing with uncertainty: reasoning techniques." </title> <type> Master's scholarly paper, </type> <institution> Department of Computer Science, University of Maryland at College Park. </institution>
Reference-contexts: I then summarize the prior work in computer bridge play in Section 4.1.3.2 on Page 27, and discuss Ginsberg's ongoing work in computer bridge play in Section 4.1.3.3 on Page 28. I myself have previously described my approach to computer bridge play in numerous papers <ref> [137, 138, 139, 142, 144, 146] </ref>. 4.1.3.1 Computer Bidding in Bridge Stanier implemented a primitive computer program for bidding [147]. John Smith implemented a computer program that modeled partner's hand and the 26 opponents' hands 1 and did some rule-based reasoning and bidding in non-com-petitive auctions [136]. <p> One major part of the anticipated implementation in my Ph.D. proposal was never implemented in actuality. My master's scholarly paper <ref> [137] </ref> describes a system that uses probabilistic reasoning to produce probabilities that a particular opponent holds a particular card. Unfortunately, this system took too much time to be used in Tignum 2.
Reference: [138] <author> Smith, S. J. J.; Nau, D. S.; and Throop, T. </author> <year> 1992. </year> <title> "A hierarchical approach to strategic planning with non-cooperating agents under conditions of uncertainty." </title> <booktitle> In Proceedings of the First International Conference on AI Planning Systems, </booktitle> <pages> 299-300. 275 </pages>
Reference-contexts: I then summarize the prior work in computer bridge play in Section 4.1.3.2 on Page 27, and discuss Ginsberg's ongoing work in computer bridge play in Section 4.1.3.3 on Page 28. I myself have previously described my approach to computer bridge play in numerous papers <ref> [137, 138, 139, 142, 144, 146] </ref>. 4.1.3.1 Computer Bidding in Bridge Stanier implemented a primitive computer program for bidding [147]. John Smith implemented a computer program that modeled partner's hand and the 26 opponents' hands 1 and did some rule-based reasoning and bidding in non-com-petitive auctions [136].
Reference: [139] <author> Smith, S. J. J. and Nau, D. S. </author> <year> 1993. </year> <title> "Strategic planning for imperfect--information games." In Games: Planning and Learning, </title> <booktitle> Papers from the 1993 Fall Symposium, Technical report FS9302, </booktitle> <publisher> AAAI Press, </publisher> <address> Menlo Park, California. </address>
Reference-contexts: I then summarize the prior work in computer bridge play in Section 4.1.3.2 on Page 27, and discuss Ginsberg's ongoing work in computer bridge play in Section 4.1.3.3 on Page 28. I myself have previously described my approach to computer bridge play in numerous papers <ref> [137, 138, 139, 142, 144, 146] </ref>. 4.1.3.1 Computer Bidding in Bridge Stanier implemented a primitive computer program for bidding [147]. John Smith implemented a computer program that modeled partner's hand and the 26 opponents' hands 1 and did some rule-based reasoning and bidding in non-com-petitive auctions [136]. <p> I discuss some of my observations about computer bridge in Section 5.4 on Page 97. 60 5.1.1 Tignum I implemented Tignum as a prototype of a program for declarer play at contract bridge <ref> [139] </ref>. Tignum was more than 9000 lines of C. Since Tignum was a prototype and its knowledge base was both too small and too inaccurate, I did not carry out extensive tests. However, I performed some preliminary tests of Tignum on a suite of bridge deals.
Reference: [140] <author> Smith, S. J. J. and Nau, D. S. </author> <year> 1993. </year> <title> "Toward an analysis of forward pruning." In Games: Planning and Learning, </title> <booktitle> Papers from the 1993 Fall Symposium, Technical report FS9302, </booktitle> <publisher> AAAI Press, </publisher> <address> Menlo Park, California. </address>
Reference-contexts: I used this model to investigate how forward pruning affects the probability of choosing the correct move. (This work was discussed in <ref> [140] </ref> and [141]. Most of Section A comes from these papers.) A.1 Game-Tree Models In this section, I define two different classes of game trees. In later sections, I will investigate how forward pruning behaves on these trees.
Reference: [141] <author> Smith, S. J. J. and Nau, D. S. </author> <year> 1994. </year> <title> "An analysis of forward pruning." </title> <booktitle> AAAI-94, </booktitle> <pages> 1386-1391. </pages>
Reference-contexts: I used this model to investigate how forward pruning affects the probability of choosing the correct move. (This work was discussed in [140] and <ref> [141] </ref>. Most of Section A comes from these papers.) A.1 Game-Tree Models In this section, I define two different classes of game trees. In later sections, I will investigate how forward pruning behaves on these trees. <p> My theoretical studies present one explanation: forward pruning seems to do better in games with strong sibling correlation than in games without sibling correlation. Dana Nau did some statistical studies showing that minimax with forward pruning outperformed minimax without forward pruning on N-games, but not on P-games <ref> [141] </ref>. These studies showed that there is at least one game in which forward pruning does better than minimax, and again, this game has strong sibling correlation. Bridge seems to be a game with strong sibling correlation.
Reference: [142] <author> Smith, S. J. J.; Nau, D. S.; and Throop, T. </author> <year> 1996. </year> <title> "A planning approach to declarer play in contract bridge." </title> <booktitle> Computational Intelligence 12:1, Febru-ary 1996, </booktitle> <pages> 106-130. </pages>
Reference-contexts: I then summarize the prior work in computer bridge play in Section 4.1.3.2 on Page 27, and discuss Ginsberg's ongoing work in computer bridge play in Section 4.1.3.3 on Page 28. I myself have previously described my approach to computer bridge play in numerous papers <ref> [137, 138, 139, 142, 144, 146] </ref>. 4.1.3.1 Computer Bidding in Bridge Stanier implemented a primitive computer program for bidding [147]. John Smith implemented a computer program that modeled partner's hand and the 26 opponents' hands 1 and did some rule-based reasoning and bidding in non-com-petitive auctions [136].
Reference: [143] <author> Smith, S. J. J.; Nau, D. S; Hebbar, K.; and Minis, I. </author> <year> 1996. </year> <title> "Hierarchical task-network planning for process planning for manufacture of microwave modules." </title> <booktitle> Proceedings: Artificial Intelligence and Manufacturing Research Planning Workshop (Sandia National Laboratories, </booktitle> <address> June 24-26, 1996), </address> <publisher> AAAI Press, </publisher> <address> Menlo Park, CA, </address> <pages> 189-194. </pages>
Reference-contexts: I discuss the realistic and robust features of my approach in Section 7.1 on Page 144, and Section 7.2 on Page 167. I have previously described my approach to process planning in numerous papers <ref> [67, 143, 145, 157, 68] </ref>. 6.1.2 Concurrent Engineering Concurrent engineering, also known as Integrated Product and Process Design (IPPD), is the simultaneous design of a product and process planning for its manufacture. Seventy to eighty percent of manufacturing cost is determined during product design [150]. <p> EDAPS integrates electrical design, mechanical design, and process planning for both the mechanical and electrical domains <ref> [67, 143, 145, 157, 68] </ref>. Thus, EDAPS helps achieve the goals of concurrent engineering. EDAPS consists of a user interface, written in Tcl/Tk [112]; a number of routines written in C++ and "AEL"; and the EDAPS Process Planner.
Reference: [144] <author> Smith, S. J. J.; Nau, D. S.; and Throop, T. </author> <year> 1996. </year> <title> "Total-order multi-agent task-network planning for contract bridge." </title> <booktitle> AAAI-96, </booktitle> <pages> 108-113. </pages>
Reference-contexts: Consider also the following example, adapted from an example that Dana Nau described <ref> [144] </ref>. Suppose that I want to arrive at a hotel in Nagoya, Japan with 100000 yen in my pocket, as soon as possible. <p> I then summarize the prior work in computer bridge play in Section 4.1.3.2 on Page 27, and discuss Ginsberg's ongoing work in computer bridge play in Section 4.1.3.3 on Page 28. I myself have previously described my approach to computer bridge play in numerous papers <ref> [137, 138, 139, 142, 144, 146] </ref>. 4.1.3.1 Computer Bidding in Bridge Stanier implemented a primitive computer program for bidding [147]. John Smith implemented a computer program that modeled partner's hand and the 26 opponents' hands 1 and did some rule-based reasoning and bidding in non-com-petitive auctions [136].
Reference: [145] <author> Smith, S. J. J.; Hebbar, K.; Nau, D. S.; and Minis, I. </author> <year> 1996. </year> <title> "Integrated electrical and mechanical design and process planning." </title> <booktitle> IFIP Knowledge Intensive CAD Workshop, </booktitle> <address> CMU, </address> <month> September 16-18, </month> <year> 1996. </year> <month> 276 </month>
Reference-contexts: I discuss the realistic and robust features of my approach in Section 7.1 on Page 144, and Section 7.2 on Page 167. I have previously described my approach to process planning in numerous papers <ref> [67, 143, 145, 157, 68] </ref>. 6.1.2 Concurrent Engineering Concurrent engineering, also known as Integrated Product and Process Design (IPPD), is the simultaneous design of a product and process planning for its manufacture. Seventy to eighty percent of manufacturing cost is determined during product design [150]. <p> EDAPS integrates electrical design, mechanical design, and process planning for both the mechanical and electrical domains <ref> [67, 143, 145, 157, 68] </ref>. Thus, EDAPS helps achieve the goals of concurrent engineering. EDAPS consists of a user interface, written in Tcl/Tk [112]; a number of routines written in C++ and "AEL"; and the EDAPS Process Planner.
Reference: [146] <author> Smith, S. J. J.; Nau, D. S.; and Throop, T. </author> <year> 1996. </year> <title> "AI planning's strong suit." </title> <journal> IEEE Expert, </journal> <volume> 11:6, </volume> <month> December </month> <year> 1996, </year> <note> 4-5 (biography on page 7). </note>
Reference-contexts: I then summarize the prior work in computer bridge play in Section 4.1.3.2 on Page 27, and discuss Ginsberg's ongoing work in computer bridge play in Section 4.1.3.3 on Page 28. I myself have previously described my approach to computer bridge play in numerous papers <ref> [137, 138, 139, 142, 144, 146] </ref>. 4.1.3.1 Computer Bidding in Bridge Stanier implemented a primitive computer program for bidding [147]. John Smith implemented a computer program that modeled partner's hand and the 26 opponents' hands 1 and did some rule-based reasoning and bidding in non-com-petitive auctions [136].
Reference: [147] <author> Stanier, A. </author> <year> 1975. </year> <title> "Bribip: a bridge bidding program." </title> <booktitle> In Proc. 4th International Joint Conf. Artificial Intelligence. </booktitle>
Reference-contexts: I myself have previously described my approach to computer bridge play in numerous papers [137, 138, 139, 142, 144, 146]. 4.1.3.1 Computer Bidding in Bridge Stanier implemented a primitive computer program for bidding <ref> [147] </ref>. John Smith implemented a computer program that modeled partner's hand and the 26 opponents' hands 1 and did some rule-based reasoning and bidding in non-com-petitive auctions [136]. Lindelof used a machine-learning approach to simultaneously build a computer program and bidding system for non-competitive auctions [90]. <p> Gamback et al. combined a rule-based expert system with a neural net to do simple bidding in both non-competitive and competitive auctions [53, 54]. 4.1.3.2 Computer Play in Bridge While Stainer only implemented a primitive bidding program, his ideas about play still offer insight today <ref> [147] </ref>. Quinlan wrote a knowledge-based system for reasoning about high cards, but it never developed into an algorithm for play [119].
Reference: [148] <author> Sterling, L. and Nygate, Y. </author> <year> 1990. </year> <title> "Python: an expert squeezer." </title> <journal> Journal of Logic Programming 8 </journal> <pages> 21-39. </pages>
Reference-contexts: Great Game Products' Bridge Baron, the best available computer bridge program (see Section 5.2.1 on Page 72 for details), can be beaten by a reasonably advanced novice. Sterling and Nygate wrote a rule-based program for recognizing and executing squeeze plays, but squeeze opportunities in bridge are rare <ref> [148] </ref>. Frank et al. have proposed a proof-planning approach (similar to the approach that Gamback et al. proposed for play [53, 54]), but thus far, they have only described the results of applying this approach to planning the play of a single suit [49].
Reference: [149] <author> Stockman, G. C. </author> <year> 1979. </year> <title> "A minimax algorithm better than alpha-beta?" Artificial Intelligence 12 </title> <type> 179-196. </type>
Reference-contexts: To further decrease the number of nodes examined, game-tree-search procedures have been developed such as alpha-beta [80], B* [16], and SSS* <ref> [149] </ref>. These procedures will ignore any node below u that they can prove will not affect u's minimax value. One method for reducing the number of nodes examined by a tree search is forward pruning.
Reference: [150] <author> Suh, N. P. </author> <year> 1990. </year> <title> The Principle of Design. </title> <publisher> Oxford University Press, </publisher> <address> New York. </address>
Reference-contexts: Seventy to eighty percent of manufacturing cost is determined during product design <ref> [150] </ref>. For this reason, concurrent engineering approaches address design and manufacturing issues concurrently to avoid expensive and time-consuming design-manufacture-test-redesign cycles.
Reference: [151] <author> Survivor. </author> <year> 1982. </year> <title> Eye of the Tiger. </title> <address> Scotti Bros., Santa Monica, California. </address>
Reference: [152] <author> Tate, A. </author> <year> 1976. </year> <title> "Project planning using a hierarchic non-linear planner." </title> <type> Tech. Report 25, </type> <institution> Department of Artificial Intelligence, University of Edin-burgh. </institution>
Reference-contexts: complex tasks methods 2.1 Related Work on HTN Planning "Those who cannot remember the past are condemned to repeat it." | The Sense of Beauty (part IV, "Expression"), by George San tayana, 1892 ([13], p. 703) My work on HTN planning draws on the previous work of Tate with Non-lin <ref> [152, 153] </ref> and Sacerdoti with NOAH [124, 125, 126]. Some related work includes that of Currie and Tate with O-Plan [36] and Wilkins with SIPE [168, 169]. <p> To represent the tactical and strategic schemes of card-playing in bridge, I use multi-agent methods| structures similar to the "action schemas" or "methods" used in hierarchical single-agent planning systems such as Nonlin <ref> [152, 153] </ref>, NOAH [124, 125, 126], O-Plan [36], and SIPE [168, 169], but modified to represent multi-agency and uncertainty. To generate game trees, I use a procedure similar to task decomposition.
Reference: [153] <author> Tate, A. </author> <year> 1977. </year> <title> "Generating project networks." </title> <booktitle> In Proc. 5th International Joint Conf. Artificial Intelligence. </booktitle>
Reference-contexts: complex tasks methods 2.1 Related Work on HTN Planning "Those who cannot remember the past are condemned to repeat it." | The Sense of Beauty (part IV, "Expression"), by George San tayana, 1892 ([13], p. 703) My work on HTN planning draws on the previous work of Tate with Non-lin <ref> [152, 153] </ref> and Sacerdoti with NOAH [124, 125, 126]. Some related work includes that of Currie and Tate with O-Plan [36] and Wilkins with SIPE [168, 169]. <p> To represent the tactical and strategic schemes of card-playing in bridge, I use multi-agent methods| structures similar to the "action schemas" or "methods" used in hierarchical single-agent planning systems such as Nonlin <ref> [152, 153] </ref>, NOAH [124, 125, 126], O-Plan [36], and SIPE [168, 169], but modified to represent multi-agency and uncertainty. To generate game trees, I use a procedure similar to task decomposition.
Reference: [154] <author> Tesauro, Gerald. </author> <year> 1995. </year> <title> "Temporal difference learning and TD-Gammon". </title> <journal> Communications of the ACM 38:3, </journal> <month> March </month> <year> 1996, </year> <pages> 58-68. </pages>
Reference-contexts: TD-Gammon is a self-training neural network program that lost by only one point in a forty-game match to Bill Robertie, a former world backgammon champion <ref> [154] </ref>. 4.1.2 Go: One Game in Which AI Approaches Have Not Had Success While Go, a two-player game where players place stones on a 381-square board (nineteen-by-nineteen), is a standard perfect-information game, it has not responded well to any AI approaches to date [78, 102].
Reference: [155] <author> Thompson Twins. </author> <year> 1984. </year> <title> Into the Gap. Arista Records, </title> <address> New York. </address>
Reference-contexts: minutes (run time). 143 Chapter 7 Results of Research on Microwave Module Manufacture "I know what it means To work hard on machines It's a labor of love So please don't ask me why: : : " | "You Take Me Up", from Into the Gap, by Thompson Twins, 1984 <ref> [155] </ref> 7.1 Success of the EDAPS Process Planner It is easy to generate random bridge deals. Unfortunately, it seems nearly impossible to generate random realistic microwave module designs. I tested the EDAPS Process Planner on only two realistic, manufacturable microwave module designs.
Reference: [156] <author> Toye, G.; Cutkosky, M. R.; Leifer, L. J.; Tenenbaum, J. M.; and Glicks-man, J. </author> <year> 1994. </year> <title> "SHARE: a methodology and environment for collaborative 277 product development." </title> <journal> The International Journal of Intelligent and Coop--erative Information Systems 3:2, </journal> <month> June </month> <year> 1994, </year> <pages> 129-153. </pages>
Reference-contexts: For a review of CAPP systems, see [132]. For a review of CAPP systems for electronic parts, see [94]; many such systems have been developed <ref> [32, 128, 129, 86, 165, 156] </ref>.
Reference: [157] <author> Trichur, V. S.; Ball, M. O.; Baras, J. S.; Hebbar, K.; Minis, I.; Nau, D. S.; and Smith, S. J. J. </author> <year> 1996. </year> <title> "Integrating tradeoff analysis and plan-based evaluation of designs for microwave modules." </title> <booktitle> Conference on Agile and Intelligent Manufacturing Systems, RPI's Electronics and Agile Manufacturing Research Institute (EAMRI), </booktitle> <month> October 2-3, </month> <year> 1996. </year>
Reference-contexts: I discuss the realistic and robust features of my approach in Section 7.1 on Page 144, and Section 7.2 on Page 167. I have previously described my approach to process planning in numerous papers <ref> [67, 143, 145, 157, 68] </ref>. 6.1.2 Concurrent Engineering Concurrent engineering, also known as Integrated Product and Process Design (IPPD), is the simultaneous design of a product and process planning for its manufacture. Seventy to eighty percent of manufacturing cost is determined during product design [150]. <p> EDAPS integrates electrical design, mechanical design, and process planning for both the mechanical and electrical domains <ref> [67, 143, 145, 157, 68] </ref>. Thus, EDAPS helps achieve the goals of concurrent engineering. EDAPS consists of a user interface, written in Tcl/Tk [112]; a number of routines written in C++ and "AEL"; and the EDAPS Process Planner.
Reference: [158] <author> Trinogga, L. A.; Kaizhou, G.; and Hunter, I. C. </author> <year> 1991. </year> <title> Practical Microstrip Design. </title> <publisher> Ellis Horwood, </publisher> <address> Chichester, England. </address>
Reference-contexts: There is even a commercial CAD tool that performs manufacturability analysis for electronic circuits [41]. 6.2 Introduction to Microwave Modules 2 Most commercial electronic products operate at radio frequencies, that is, between 10 kilohertz and 1 gigahertz. 3 However, radio frequencies have a low signal-to-noise ratio, and have become overcrowded <ref> [158] </ref>. Thus, most modern telecommunications systems operate at microwave frequencies, that is, between 1 gigahertz and 20 gigahertz. Modules of systems that operate at microwave frequencies are called microwave modules. Each microwave module consists of a "housing" and a "microwave integrated circuit".
Reference: [159] <author> Truscott, T. R. </author> <year> 1981. </year> <title> Techniques Used in Minimax Game-Playing Programs. </title> <type> Master's thesis, </type> <institution> Duke University, Durham, NC. </institution>
Reference-contexts: But on perfect-information zero-sum games such as chess, forward pruning has not worked as well as approaches that do not use forward pruning, instead choosing to search to a shallower depth than they could with forward pruning <ref> [19, 159] </ref>. How can I explain my success in bridge with an approach closely related to forward pruning? As a step toward deeper understanding of how forward pruning affects quality of play, I set up a model of forward pruning on two abstract classes of game trees.
Reference: [160] <author> Tsuneto, Reiko; Erol, Kutluhan; Hendler, James; and Nau, Dana. </author> <year> 1996. </year> <title> "Commitment strategies in hierarchical task network planning". </title> <booktitle> AAAI-96, </booktitle> <pages> 536-542. </pages>
Reference-contexts: I define both terms, and justify these choices further, in Section 8.1.3 on Page 189). These choices define a refinement strategy: a strategy for choosing which plan refinement to perform next. Tsuneto et al. have described the consequences of several different refinement strategies in HTN planning <ref> [160] </ref>. (In fact, they are currently investigating the consequences of the refinement strategy defined by performing "forward search" to find "totally ordered" plans.) As well, Tsuneto et al. have shown that a good "forward pruning" strategy is far more important than even the optimal refinement strategy, at least in one theoretical
Reference: [161] <author> Tsuneto, Reiko; Nau, Dana; and Hendler, James. </author> <year> 1997. </year> <title> "Plan-refinement strategies and search-space size". </title> <note> Submitted to IJCAI-97. </note>
Reference-contexts: fact, they are currently investigating the consequences of the refinement strategy defined by performing "forward search" to find "totally ordered" plans.) As well, Tsuneto et al. have shown that a good "forward pruning" strategy is far more important than even the optimal refinement strategy, at least in one theoretical situation <ref> [161] </ref>. <p> In a theoretical situation, Tsuneto et al. showed that a good forward pruning strategy is far more important than even the optimal refinement strategy <ref> [161] </ref>. In the practical world, some version of forward pruning seem to be "what people do"|people certainly do not generate full game trees, or even full alpha-beta game trees, in their heads.
Reference: [162] <author> Walker, G. </author> <year> 1996. </year> <editor> "Beaten in spades". </editor> <address> New Scientist, </address> <month> 16 November </month> <year> 1996, </year> <pages> 26-27. </pages>
Reference-contexts: large to search to any significant depth within the time available. 4.1.3.3 Ginsberg's Approach to Computer Play in Bridge Ginsberg has proposed using a Monte Carlo approach throughout the deal, employing clever techniques that make it possible to perform such a full game-tree search in a reasonable amount of time <ref> [57, 58, 162] </ref>. Called "partition search", Ginsberg's approach speeds up the full game-tree search by combining many similar nodes in the game tree.
Reference: [163] <author> Watson, Louis H. </author> <year> 1964. </year> <title> Play of the Hand at Bridge. Revised by Sam Fry, </title> <editor> Jr. Barnes & Noble, </editor> <address> New York. </address>
Reference-contexts: In bridge, the available schemes are "tactical" and "strategic" schemes based on knowledge from the bridge literature <ref> [62, 163, 120, 134] </ref>. <p> ThemRuff Opponents: ruff a trick ThemOverruff Opponents: ruff a trick with a higher card than the card with which declarer ruffed ThemRuffFour Opponents: play in fourth hand during a ruff ThemFinesse Opponents: take a finesse against declarer Stop Stop planning 68 these tasks based on knowledge from the bridge literature <ref> [62, 163, 120, 134] </ref>. Second hand refers to the player who plays the second card to a given trick; similarly third hand and fourth hand. A winner is a card that is higher than any cards the opponents hold in its suit.
Reference: [164] <author> Webster, John. </author> <note> 1623. The Duchess of Malfi. </note> <author> Elizabeth M. Brennan, ed., </author> <year> 1993. </year> <editor> W. W. </editor> <publisher> Norton & Co., </publisher> <address> New York. </address> <month> 278 </month>
Reference: [165] <author> Whitney, D. E.; Nevins, J. L.; De Fazio, T. L.; and Gustavson, R. </author> <year> 1993. </year> <title> "Problems and issues in design and manufacture of complex electromechanical systems." </title> <institution> Draper Laboratory Report R-2577, </institution> <month> December </month> <year> 1993, </year> <institution> Massachusetts Institute of Technology. </institution>
Reference-contexts: For a review of CAPP systems, see [132]. For a review of CAPP systems for electronic parts, see [94]; many such systems have been developed <ref> [32, 128, 129, 86, 165, 156] </ref>.
Reference: [166] <author> Wilkins, D. E. </author> <year> 1980. </year> <title> Using patterns and plans in chess. </title> <booktitle> Artificial Intelligence 14 </booktitle> <pages> 165-203. </pages>
Reference-contexts: You Do (It's the Way That You Do It)", from The Fun Boy Three, by The Fun Boy Three with Bananarama, 1982 [52] Chess: No other game has received as much attention from the AI community as chess, a two-player game with thirty-two pieces on a board with sixty-four squares <ref> [166, 167, 88, 18, 70, 99] </ref>. Deep Blue, which grew out of Deep Thought [71] is acknowledged to be the best computer chess program; it played human world champion Garry Kasparov in a six-game match under standard tournament conditions on 10-17 February 1996. <p> However, without planning with uncertainty, even planning with contingencies cannot handle the problem of reasoning about situations that have different probabilities. 31 4.1.6 Planning in Games Wilkins uses "knowledge sources" to generate and analyze chess moves for both the player and the opponent <ref> [166, 167] </ref>. These knowledge sources have a similar intent to the "multi-agent methods" that I describe in Section 4.3 on Page 35| but there are two significant differences.
Reference: [167] <author> Wilkins, D. E. </author> <year> 1982. </year> <title> Using knowledge to control tree searching. </title> <booktitle> Artificial Intelligence 18 </booktitle> <pages> 1-51. </pages>
Reference-contexts: You Do (It's the Way That You Do It)", from The Fun Boy Three, by The Fun Boy Three with Bananarama, 1982 [52] Chess: No other game has received as much attention from the AI community as chess, a two-player game with thirty-two pieces on a board with sixty-four squares <ref> [166, 167, 88, 18, 70, 99] </ref>. Deep Blue, which grew out of Deep Thought [71] is acknowledged to be the best computer chess program; it played human world champion Garry Kasparov in a six-game match under standard tournament conditions on 10-17 February 1996. <p> However, without planning with uncertainty, even planning with contingencies cannot handle the problem of reasoning about situations that have different probabilities. 31 4.1.6 Planning in Games Wilkins uses "knowledge sources" to generate and analyze chess moves for both the player and the opponent <ref> [166, 167] </ref>. These knowledge sources have a similar intent to the "multi-agent methods" that I describe in Section 4.3 on Page 35| but there are two significant differences.
Reference: [168] <author> Wilkins, D. E. </author> <year> 1984. </year> <title> "Domain independent planning: representation and plan generation." </title> <booktitle> Artificial Intelligence 22 </booktitle> <pages> 269-301. </pages>
Reference-contexts: Some related work includes that of Currie and Tate with O-Plan [36] and Wilkins with SIPE <ref> [168, 169] </ref>. However, for bridge, I needed to modify HTN planning to be able to represent multi-agency and uncertainty; for more details, see Section 4.3 on Page 35. <p> To represent the tactical and strategic schemes of card-playing in bridge, I use multi-agent methods| structures similar to the "action schemas" or "methods" used in hierarchical single-agent planning systems such as Nonlin [152, 153], NOAH [124, 125, 126], O-Plan [36], and SIPE <ref> [168, 169] </ref>, but modified to represent multi-agency and uncertainty. To generate game trees, I use a procedure similar to task decomposition. The methods that perform my tasks correspond to the various tactical and strategic schemes for playing the game of bridge.
Reference: [169] <author> Wilkins, D. E. </author> <year> 1988. </year> <title> Practical Planning. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California. </address> <month> 279 </month>
Reference-contexts: Some related work includes that of Currie and Tate with O-Plan [36] and Wilkins with SIPE <ref> [168, 169] </ref>. However, for bridge, I needed to modify HTN planning to be able to represent multi-agency and uncertainty; for more details, see Section 4.3 on Page 35. <p> To represent the tactical and strategic schemes of card-playing in bridge, I use multi-agent methods| structures similar to the "action schemas" or "methods" used in hierarchical single-agent planning systems such as Nonlin [152, 153], NOAH [124, 125, 126], O-Plan [36], and SIPE <ref> [168, 169] </ref>, but modified to represent multi-agency and uncertainty. To generate game trees, I use a procedure similar to task decomposition. The methods that perform my tasks correspond to the various tactical and strategic schemes for playing the game of bridge. <p> This supports the long-standing AI hypothesis that HTN planning is more useful than planning with STRIPS-style operators [48] in practical planning domains <ref> [169] </ref>. Bridge has a natural element of hierarchical planning, and hence the bridge literature lends itself naturally to HTN decomposition. To quote from a classic textbook on the play of the hand at bridge (emphasis added): The essential lesson of this chapter has been the importance of entries.
References-found: 170

