URL: ftp://ftp.cs.purdue.edu/pub/jorg/93eval.ps.Z
Refering-URL: http://www.cs.purdue.edu/homes/jorg/jorgs_papers.html
Root-URL: http://www.cs.purdue.edu
Email: Peters  
Title: Evaluation and approximate evaluation of the multivariate Bernstein-Bezier form on a regularly partitioned simplex  
Author: by Jorg 
Keyword: Key words: Bernstein-Bezier form, power form, evaluation, multivariate, subdivision  General Terms: Algorithms, (Performance, Theory)  
Address: 47907-1398  
Affiliation: Department of Computer Sciences, Purdue University, IN  
Web: I.3.5, G.1.2  
Date: January 30, 1994 (version Apr 15 93)  
Note: Running title: Evaluation of the Bernstein-Bezier form Date printed:  Computing Reviews Categories:  Author's current address:  
Abstract: Polynomials of total degree d in m variables have a geometrically intuitive representation in the Bernstein-Bezier form defined over an m-dimensional simplex. The two algorithms given in this paper evaluate the Bernstein-Bezier form on a large number of points corresponding to a regular partition of the simplicial domain. The first algorithm is an adaptation of isoparametric evaluation. The second is a subdivision algorithm. In contrast to de Casteljau's algorithm, both algorithms have a cost of evaluation per point that is linear in the degree regardless of the number of variables. To demonstrate practicality, implementations of both algorithms on a triangular domain are compared with generic implementations of six algorithms in the literature. fl This research was supported by NSF DMS-8701275
Abstract-found: 1
Intro-found: 1
Reference: [Boe83] <author> W. </author> <title> Boehm (1983), Subdividing multivariate splines, </title> <booktitle> Computer Aided Design 15 no 6 (nov):345-352. </booktitle>
Reference: [B78] <author> C. </author> <title> de Boor (1978), A practical guide to splines, </title> <journal> Applied Mathematical Sciences, </journal> <volume> Vol 27, </volume> <publisher> Springer, </publisher> <address> New York. </address>
Reference-contexts: + 1)(d + 2) 30 [C59] NestMult 2d (d + 1) A 20 (+20) [BR90] SV-NestMult (d 2 + 5d + 4)=2 25 [SV86] D.I.M. 1:5d + e + f B,C 200 [V88] IsoParamEval 2d + e B 60 x4 ForDiff d + e + f B,D (5), 50 eg <ref> [B78, p15] </ref> EquilateralSub 1:4d + 7=3 E,G 180 [Go83],x8 SimplexSub d 3 + 1 E,G 50 x5 (6.2) Table: Evaluation of bivariate (triangular) patches in Bernstein-Bezier form. Stability of the algorithms was checked against double precision DeCasteljau.
Reference: [B87] <author> C. </author> <title> de Boor (1987), B-form basics, Geometric Modeling: Applications and New Trends, </title> <editor> G. Farin ed., </editor> <publisher> SIAM, </publisher> <address> Philadelphia. </address>
Reference-contexts: The Bernstein-Bezier form of total degree d in m variables and with coefficients c (ff) is defined as (cf. <ref> [B87] </ref> [F88]), X jffj=d ff c (ff)~ ff : For example, denoting the j th unit vector by e j , b 2;3 [0; e 1 ; e 2 ] = ff 0 +ff 1 +ff 2 =3 ff 0 !ff 1 !ff 2 ! is a bivariate cubic on the <p> : : : ; ff m ) That is, if x 2 V , each b m;d [V i ] represents b m;d [V ] over a subsimplex of the original domain simplex and takes its coefficients from a facet of the m + 1 dimensional subdivison simplex (cf. [Go83], <ref> [B87] </ref>). (2.1) Example. <p> Remarks. (1) Multidirectional information such as directional derivatives and therefore normal and curvature fields can be obtained at all subdivision points by differencing of adjacent coefficients (cf. <ref> [B87] </ref>). (2) SimplexSub, as stated above, can be modified to allow for a biased distribution of parameter values, namely by choosing the evaluation parameter in EdgeDeCasteljau to be 6= 1 2 . (3) If the in situ construction is not used, subdivision need not proceed through all edges.
Reference: [BR90] <author> C. de Boor, A. </author> <title> Ron (1990), Computational aspects of polynomial interpolation in several variables, </title> <institution> Comp. Sci. </institution> <type> Tech. Rep. 924, </type> <institution> U. of Wisconsin, Madison. </institution>
Reference-contexts: Hence the spacing over a parameter interval of length l is l=(d2 ). algorithm time stability lines reference complexity storage of code DeCasteljau 2 d (d + 1)(d + 2) 30 [C59] NestMult 2d (d + 1) A 20 (+20) <ref> [BR90] </ref> SV-NestMult (d 2 + 5d + 4)=2 25 [SV86] D.I.M. 1:5d + e + f B,C 200 [V88] IsoParamEval 2d + e B 60 x4 ForDiff d + e + f B,D (5), 50 eg [B78, p15] EquilateralSub 1:4d + 7=3 E,G 180 [Go83],x8 SimplexSub d 3 + 1 E,G <p> of n calls to EdgeDeCasteljau to extract a uni variate polynomial, distributed over n (n 1)=2 points. f := 2 d+1 is n times the cost of building the finite difference table distributed over n (n 1)=2 points. 17 J Peters Evaluation of the Bernstein-Bezier form May 05 93 [C59] <ref> [BR90] </ref> [V88],overflow ForDiff,unstable IsoParamEval EquilateralSub SimplexSub time degree 2 . . . 6 . . . 10 . . . 14 (6.1) Figure: Time per point for 2 4 d+2 points corresponding to the bivariate Bernstein-Bezier form. The time scale is linear.
Reference: [BFK84] <author> W. Boehm, G. Farin, J. </author> <month> Kahmann </month> <year> (1984), </year> <title> A survey of curve and surface methods in CAGD, </title> <booktitle> CAGD 1, </booktitle> <pages> pp. 1-60. </pages>
Reference-contexts: Applied one point at a time, de Casteljau's algorithm [C59] serves as a standard for accuracy, since the Bernstein-Bezier form is naturally defined in terms of the algorithm. The reader familiar with the evaluation triangle in the univariate case (see e.g. <ref> [BFK84, p.8] </ref>), will recognize that the variable l below counts the levels of an (m + 1)-dimensional simplex, filled layer by layer first with the original m+d coefficients, then with barycentric combinations of coefficients in the lower layer.
Reference: [C59] <author> F. de Casteljau, </author> <year> (1959), </year> <title> Courbes et surfaces a poles, </title> <editor> Andre Citroen Automobiles, </editor> <address> Paris 1963. </address>
Reference-contexts: A large ` indicates potential loss of stability due to round-off. Applied one point at a time, de Casteljau's algorithm <ref> [C59] </ref> serves as a standard for accuracy, since the Bernstein-Bezier form is naturally defined in terms of the algorithm. <p> G The number of coefficients generated is not arbitrary, but a power of 2. Hence the spacing over a parameter interval of length l is l=(d2 ). algorithm time stability lines reference complexity storage of code DeCasteljau 2 d (d + 1)(d + 2) 30 <ref> [C59] </ref> NestMult 2d (d + 1) A 20 (+20) [BR90] SV-NestMult (d 2 + 5d + 4)=2 25 [SV86] D.I.M. 1:5d + e + f B,C 200 [V88] IsoParamEval 2d + e B 60 x4 ForDiff d + e + f B,D (5), 50 eg [B78, p15] EquilateralSub 1:4d + 7=3 <p> cost of n calls to EdgeDeCasteljau to extract a uni variate polynomial, distributed over n (n 1)=2 points. f := 2 d+1 is n times the cost of building the finite difference table distributed over n (n 1)=2 points. 17 J Peters Evaluation of the Bernstein-Bezier form May 05 93 <ref> [C59] </ref> [BR90] [V88],overflow ForDiff,unstable IsoParamEval EquilateralSub SimplexSub time degree 2 . . . 6 . . . 10 . . . 14 (6.1) Figure: Time per point for 2 4 d+2 points corresponding to the bivariate Bernstein-Bezier form. The time scale is linear.
Reference: [CB80] <author> S.D. Conte, C. </author> <title> de Boor (1980) Elementary Numerical Analysis, Third Ed., </title> <publisher> McGraw-Hill, </publisher> <address> New York. </address>
Reference: [D86] <author> W. </author> <title> Dahmen (1986), Subdivision algorithms converge quadratically, </title> <journal> J. of Comput. Appl. </journal> <volume> Math.16, </volume> <pages> 145-158. </pages>
Reference-contexts: Approximate evaluation by subdivision is motivated by the following theorem. 5 J Peters Evaluation of the Bernstein-Bezier form May 05 93 (2.2) Theorem. <ref> [D86, Thm 4.1] </ref> A particular piecewise linear interpolant to the coefficients of the polynomial, the so-called Bernstein-Bezier net, converges quadratically in the size of the domain simplex and linearly in the size of the second derivative to the polynomial. <p> The theorem is a direct consequence of the facts that any Bernstein-Bezier net as defined in <ref> [D86] </ref> reproduces linear functions and that the Bernstein-Bezier form is a stable basis.
Reference: [D86a] <author> W. </author> <title> Dahmen (1986), Bernstein-Bezier representation of polynomial surfaces, </title> <booktitle> SIG-GRAPH '86 lecture notes. </booktitle>
Reference: [D87] <author> W. </author> <title> Dahmen (1987), Subdivision algorithms recent results, some extensions and further developments, in Algorithms for approximation, </title> <editor> Mason, J.C. and Cox, M.G. eds., </editor> <booktitle> 1st Shrivenham Conference 1985, </booktitle> <pages> p 21-49. </pages>
Reference-contexts: Approximate evaluation on such a lattice is of interest, e.g. when rendering a piecewise polynomial surface. While efficient lattice-oriented algorithms are known for polynomials in tensor-product form [LCR80][LR80], there are with the exception of repeated extrapolation <ref> [D87, 3.3.7 p43] </ref> no examples of algorithms that take advantage of the regular partition of a domain simplex. The two algorithms presented in this paper are based on a specialized version of de Casteljau's algorithm that allows nesting operations both with respect to the degree and the parameter dimension.
Reference: [F83] <author> G. </author> <month> Farin </month> <year> (1983), </year> <title> Smooth Interpolation to Scattered 3D-Data, Surfaces in CAGD, R.E. Barnhill, </title> <publisher> W. Boehm, eds. </publisher>
Reference-contexts: For additional efficiency, the coefficients of adjacent C 0 -connected triangles can be put into the same array to make use of a standard m-dimensional array and share the computational effort on the common face. Surface constructions based on splitting, e.g. <ref> [F83] </ref>, [P90a], naturally pair up polynomials in the bivariate case. Storage Complexity. As explained above, all computations can be performed in the simplicial array of size n+m that stores the result.
Reference: [F88] <author> G. </author> <month> Farin </month> <year> (1988), </year> <title> Curves and surfaces for Computer Aided Geometric Design, </title> <publisher> Academic Press, </publisher> <address> Boston. </address>
Reference-contexts: The Bernstein-Bezier form of total degree d in m variables and with coefficients c (ff) is defined as (cf. [B87] <ref> [F88] </ref>), X jffj=d ff c (ff)~ ff : For example, denoting the j th unit vector by e j , b 2;3 [0; e 1 ; e 2 ] = ff 0 +ff 1 +ff 2 =3 ff 0 !ff 1 !ff 2 ! is a bivariate cubic on the standard
Reference: [FR88] <author> R.T. Farouki, </author> <title> V.T. Rajan (1988) Algorithms for polynomials in Bernstein form, </title> <booktitle> Computer Aided Geometric Design 5 No 1, p. </booktitle> <pages> 1-26. </pages>
Reference: [F91] <author> R.T. </author> <title> Farouki (1991) On the stability of transformations between power and Bernstein polynomial forms, </title> <booktitle> Computer Aided Geometric Design 8 No 1, p. </booktitle> <pages> 29-36. </pages>
Reference: [Go83] <author> R.N. </author> <title> Goldman (1983), Subdivision algorithms for Bezier triangles, </title> <booktitle> Computer Aided Design 15 no 3 (may):159-166. </booktitle>
Reference-contexts: ; : : : ; ff m ) That is, if x 2 V , each b m;d [V i ] represents b m;d [V ] over a subsimplex of the original domain simplex and takes its coefficients from a facet of the m + 1 dimensional subdivison simplex (cf. <ref> [Go83] </ref>, [B87]). (2.1) Example.
Reference: [GvL89] <author> G. H. Golub, C. F. van Loan (1989), </author> <title> Matrix Computations, 2nd edition, </title> <publisher> Johns Hopkins University Press, London. </publisher>
Reference: [Goo87] <author> T.N.T. </author> <title> Goodman (1987), Variation diminishing properties of Bernstein polynomials on triangles, </title> <journal> J. Approx. Theory 50, </journal> <month> 111-126. </month> <title> 20 J Peters Evaluation of the Bernstein-Bezier form May 05 93 </title>
Reference: [LR80] <author> J. Lane, </author> <title> R.F. Riesenfeld (1980), A theoretical development for the computer generation and display of piecewise polynomial surfaces, </title> <journal> IEEE Transaction of Pattern Analysis and Machine Intelligence 2(1): </journal> <pages> 35-46. </pages>
Reference: [LSP87] <author> S.-L. Lien, M. Shantz, V. </author> <title> Pratt (1987), Adaptive forward differencing for rendering curves and surfaces, </title> <booktitle> Computer Graphics 21 (4), </booktitle> <pages> 111-118. </pages>
Reference: [LCR80] <author> T. Lyche, E. Cohen, R. </author> <month> Riesenfeld </month> <year> (1980), </year> <title> Discrete B-splines and subdivision techniques in computer aided geometric design and computer graphics. </title> <journal> Comp. Graphics and Image Process. </journal> <volume> 14 No.2, </volume> <pages> 87-111. </pages>
Reference: [P90] <author> J. </author> <title> Peters (1990) Evaluation of multivariate Bernstein polynomials, </title> <type> CMS Tech. Report No. 91-1, </type> <institution> U of Wisconsin. </institution>
Reference-contexts: That is, edge-adjacent triangles of the same color in Figure 5.4 are subdivided in one sweep (cf. <ref> [P90] </ref> for the details of the index calculation). For additional efficiency, the coefficients of adjacent C 0 -connected triangles can be put into the same array to make use of a standard m-dimensional array and share the computational effort on the common face.
Reference: [P90a] <author> J. </author> <title> Peters (1990) Smooth mesh interpolation with cubic patches, </title> <booktitle> Computer Aided Design 22 No 2, </booktitle> <pages> 109-120. </pages>
Reference-contexts: For additional efficiency, the coefficients of adjacent C 0 -connected triangles can be put into the same array to make use of a standard m-dimensional array and share the computational effort on the common face. Surface constructions based on splitting, e.g. [F83], <ref> [P90a] </ref>, naturally pair up polynomials in the bivariate case. Storage Complexity. As explained above, all computations can be performed in the simplicial array of size n+m that stores the result.
Reference: [SV86] <author> L.L. Schumaker, W. </author> <title> Volk (1986), Efficient evaluation of multivariate polynomials, </title> <booktitle> Computer Aided Geometric Design 3: </booktitle> <pages> 149-154. </pages>
Reference-contexts: Hence the spacing over a parameter interval of length l is l=(d2 ). algorithm time stability lines reference complexity storage of code DeCasteljau 2 d (d + 1)(d + 2) 30 [C59] NestMult 2d (d + 1) A 20 (+20) [BR90] SV-NestMult (d 2 + 5d + 4)=2 25 <ref> [SV86] </ref> D.I.M. 1:5d + e + f B,C 200 [V88] IsoParamEval 2d + e B 60 x4 ForDiff d + e + f B,D (5), 50 eg [B78, p15] EquilateralSub 1:4d + 7=3 E,G 180 [Go83],x8 SimplexSub d 3 + 1 E,G 50 x5 (6.2) Table: Evaluation of bivariate (triangular) patches
Reference: [Scho59] <author> I.J. </author> <title> Schonberg (1959), On variation diminishing approximation methods, in On numerical approximation, R.E. </title> <editor> Langer ed., U. </editor> <publisher> of Wisconsin Press, </publisher> <year> 1959, </year> <pages> 249-274. </pages>
Reference: [SH82] <author> F. Stummel, K. </author> <month> Hainer </month> <year> (1982), </year> <institution> Praktische Mathematik, Teubner, Stuttgart, </institution> <year> 1982. </year>
Reference: [V88] <author> Volk W. </author> <year> (1988), </year> <title> An efficient raster evaluation method for univariate polynomials, </title> <booktitle> Computing 40: </booktitle> <pages> 163-173. </pages>
Reference-contexts: B Multidirectional information such as normal and curvature fields are not easily gen erated together with the points. C The quantities fl used in the refinement grow rapidly with d and the reduction step. In the implementation, following <ref> [V88] </ref> and [V90], this leads to overflow. D (x) Instability due to round-off for d x. Both D.I.M. and ForDiff were started with an accurate difference table. E All intermediate subdivision values have to be stored. G The number of coefficients generated is not arbitrary, but a power of 2. <p> length l is l=(d2 ). algorithm time stability lines reference complexity storage of code DeCasteljau 2 d (d + 1)(d + 2) 30 [C59] NestMult 2d (d + 1) A 20 (+20) [BR90] SV-NestMult (d 2 + 5d + 4)=2 25 [SV86] D.I.M. 1:5d + e + f B,C 200 <ref> [V88] </ref> IsoParamEval 2d + e B 60 x4 ForDiff d + e + f B,D (5), 50 eg [B78, p15] EquilateralSub 1:4d + 7=3 E,G 180 [Go83],x8 SimplexSub d 3 + 1 E,G 50 x5 (6.2) Table: Evaluation of bivariate (triangular) patches in Bernstein-Bezier form. <p> The time scale is linear. SimplexSub has a distinct time advantage over its competitors already for polynomials of low degree. The table below shows the time per point for the evaluation of low degree polynomials. degree SimplexSub EquilateralSub ForDiff IsoParamEval <ref> [V88] </ref> 2 0.03 0.03 0.04 0.03 0.06 4 0.05 0.16 0.14 0.14 0.22 If low storage is required, then ForDiff is advantageous for polynomials of low degree, 18 J Peters Evaluation of the Bernstein-Bezier form May 05 93 while IsoParamEval coupled with the univariate version of SV-NestMult is preferable for polynomials
Reference: [V88a] <author> Volk W. </author> <year> (1988), </year> <editor> Die Auswertung von Polynomen mehrerer Veranderlicher auf Punk-trastern, Austrographics '88 A. Clauer, W. Purgathofer, eds., </editor> <publisher> Springer Verlag, </publisher> <address> Berlin. </address>

References-found: 27

