URL: http://www.cs.rpi.edu/~musser/gp/tecton/container.ps.gz
Refering-URL: http://www.cs.rpi.edu/~musser/ap/index_22.html
Root-URL: http://www.cs.rpi.edu
Email: musser@cs.rpi.edu  
Title: Tecton Description of STL Container and Iterator Concepts  
Author: David R. Musser 
Date: November 3, 1998  
Note: Incomplete Draft,  This work was performed while the author was on sabbatical at the Wilhelm-Schickard-Institut  
Address: Troy, NY 12180  
Affiliation: Computer Science Department Rensselaer Polytechnic Institute,  fur Informatik, Universitat Tubingen.  
Abstract: The various concepts of containers and iterators used in the C ++ Standard Template Library (STL) are stated as Tecton concept descriptions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Deepak Kapur and David R. Musser, Tecton: </author> <title> A Framework for Specifying and Verifying Generic System Components, </title> <institution> RPI Computer Science Department Technical Report 92-20, </institution> <address> Troy, NY, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The purpose of this note is to develop formal specifications of the C ++ Standard Template Library (STL) [3, 4] container and iterator concepts, expressing them in the Tecton language <ref> [1] </ref>. <p> Note: The above definition uses a cartesian product as a range type (of swap), which wasn't allowed in the original Tecton language definition <ref> [1] </ref>, but which seems like a useful extension (suggested by R. Loos). I've also started using "requires" instead of "obeys" in definitions (also suggested by R. Loos).
Reference: [2] <author> Deepak Kapur and David R. Musser, </author> <title> Examples of Tecton Concept Descriptions (Working Paper), </title> <month> June </month> <year> 1992. </year>
Reference-contexts: The following concept descriptions come from <ref> [2] </ref>. hBoolean and Natural concepts 2bi Definition: Boolean introduces bool, true -&gt; bool, false -&gt; bool; generates bool freely using true, false. Remark: The above concept is actually predefined by the semantics. Definition: Set uses Boolean; introduces domain. <p> The following concept descriptions also come from <ref> [2] </ref>. hBinary relation concepts 3i Definition: Binary-relation uses Set; introduces R (domain, domain) -&gt; bool. Precedence: -R, =-. Definition: Reflexive refines Binary-relation; requires (for x: domain) x R x. Definition: Anti-reflexive refines Binary-relation; requires (for x: domain) not (x R x).
Reference: [3] <institution> [[STL reference 1]] </institution>
Reference-contexts: 1 Introduction The purpose of this note is to develop formal specifications of the C ++ Standard Template Library (STL) <ref> [3, 4] </ref> container and iterator concepts, expressing them in the Tecton language [1].
Reference: [4] <institution> [[STL reference 2]] </institution>
Reference-contexts: 1 Introduction The purpose of this note is to develop formal specifications of the C ++ Standard Template Library (STL) <ref> [3, 4] </ref> container and iterator concepts, expressing them in the Tecton language [1].
Reference: [5] <institution> [[C ++ standard]] </institution>
Reference-contexts: In general our starting point is the set of semi-formal concept descriptions given in [6], since that is already organized as a concept hierarchy and is more complete in its statement of semantics than the actual C ++ standard <ref> [5] </ref>. [[So far there are some places where we have to depart from [6], as noted.
Reference: [6] <author> Silicon Graphics Inc., </author> <title> The Standard Template Library Programmer's Guide, </title> <note> http://www.sgi.com/Technology/STL. 23 </note>
Reference-contexts: 1 Introduction The purpose of this note is to develop formal specifications of the C ++ Standard Template Library (STL) [3, 4] container and iterator concepts, expressing them in the Tecton language [1]. In general our starting point is the set of semi-formal concept descriptions given in <ref> [6] </ref>, since that is already organized as a concept hierarchy and is more complete in its statement of semantics than the actual C ++ standard [5]. [[So far there are some places where we have to depart from [6], as noted. <p> our starting point is the set of semi-formal concept descriptions given in <ref> [6] </ref>, since that is already organized as a concept hierarchy and is more complete in its statement of semantics than the actual C ++ standard [5]. [[So far there are some places where we have to depart from [6], as noted. <p> We depart here from <ref> [6] </ref>, both in first defining a Basic-container concept before defining Container, and in requiring the objects in the container to be only Accessible rather than Assignable. The first difference is due only to technical requirements of Tecton, but the second is necessary because [6] appears to be in error in requiring <p> We depart here from <ref> [6] </ref>, both in first defining a Basic-container concept before defining Container, and in requiring the objects in the container to be only Accessible rather than Assignable. The first difference is due only to technical requirements of Tecton, but the second is necessary because [6] appears to be in error in requiring Assignable for the objects. The error becomes apparent when the Associative Container concept is introduced in [6] as a refinement of Container but with the statement that the objects in an associative container are not necessarily assignable. (For containers other than associative containers, <p> The first difference is due only to technical requirements of Tecton, but the second is necessary because <ref> [6] </ref> appears to be in error in requiring Assignable for the objects. The error becomes apparent when the Associative Container concept is introduced in [6] as a refinement of Container but with the statement that the objects in an associative container are not necessarily assignable. (For containers other than associative containers, such as Forward-container, Sequence, etc., we obtain the assignable property for contained objects as a combination of the accessible and writable properties as introduced
References-found: 6

