URL: http://www-rfcc.cse.uconn.edu/www/LisaPurvis/ROBOTICA.ps
Refering-URL: http://www-rfcc.cse.uconn.edu/www/LisaHome.html
Root-URL: 
Email: lpurvis@wrc.xerox.com pu@lia.di.epfl.ch  
Title: COMPOSER: A Case Based Reasoning System for Engineering Design  
Author: Lisa Purvis Pearl Pu 
Keyword: Key words: Case Based Reasoning, Constraint Satisfaction, Design, Assembly Sequence Generation  
Address: 800 Phillips Road, 128-51E  Webster, NY 14580 MT-Ecublens, 1015 Lausanne, Switzerland  
Affiliation: Xerox Corporation Laboratoire dIntelligence Artificielle Robotique  Swiss Federal Institute of Technology (EPFL)  
Abstract: The complex domain of engineering design poses many challenges when attempting to automate the process. The frequent use of past experience by human engineers when solving new problems has led to an interest in the use of case based reasoning (CBR) to help automate engineering design. In order to create a case based reasoning system that is useful for complex domains, the problem of adaptation, or changing existing solutions to meet new problem requirements, must be addressed, as it is critical to ensure that a case based reasoner is more than just a storage and retrieval tool. In engineering design it often occurs that many past experiences must be combined to solve a new problem, and thus the process of adaptation must efficiently and systematically combine information from many sources. We have developed a methodology for case combination that allows its application across a wide range of problems by choosing a constraint satisfaction algorithm to achieve the combination. We have shown that our approach provides an efficient adaptation methodology that ensures convergence upon a solution if one exists, provides a uniform representation of cases, and is generalizable beyond just one domain. In addition, choosing the constraint satisfaction formalism to accomplish adaptation has provided interesting observations in the often problematic areas of accomplishing problem decomposition and assessing case adaptability. Our technique is implemented in a case based reasoning system called COMPOSER, which has been tested in two design domains: assembly sequence design and configuration design. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bain, W. </author> <title> (1989) Case-based Reasoning: A computer Model of Subjective Assessment. </title> <type> Ph.D. thesis, </type> <institution> Yale University. </institution>
Reference-contexts: Derivational analogy is found in the existing systems ARIES (Carbonell, 1986) and PRODIGY/ANALOGY (Carbonell and Veloso, 1988). Substitution methods choose and install a replacement for some part of an old solution that does not fit the current situation requirements, as in CHEF (Hammond, 1986), JUDGE <ref> (Bain, 1989) </ref>, CLAVIER (Hennessy and Hinkle, 1992), and MEDIATOR (Kolodner and Simpson, 1989). Transformation methods use heuristics to replace, delete, or add components to an old solution in order to make the old solution work in the new situation, as in CASEY (Koton, 1988) and JULIA (Hinrichs, 1992).
Reference: <author> Bessiere, C. </author> <year> (1991). </year> <title> Arc Consistency in Dynamic Constraint Satisfaction Problems. </title> <booktitle> Proc. AAAI-91, </booktitle> <pages> 221-226. </pages>
Reference: <author> Carbonell, J.G. </author> <year> (1986). </year> <title> Machine Learning: An Artificial Intelligence Approach. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA. </address>
Reference-contexts: Three well-known adaptation methods are derivational analogy, substitution, and transformation. In derivational analogy, a new solution is computed using the same method by which the old solution was computed. Derivational analogy is found in the existing systems ARIES <ref> (Carbonell, 1986) </ref> and PRODIGY/ANALOGY (Carbonell and Veloso, 1988). Substitution methods choose and install a replacement for some part of an old solution that does not fit the current situation requirements, as in CHEF (Hammond, 1986), JUDGE (Bain, 1989), CLAVIER (Hennessy and Hinkle, 1992), and MEDIATOR (Kolodner and Simpson, 1989).
Reference: <editor> Carbonell, J.G. and Veloso, M.M. </editor> <booktitle> (1988). Proc. Workshop on Case Based Reasoning (DARPA), </booktitle> <address> Clearwater, Florida, </address> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference-contexts: Three well-known adaptation methods are derivational analogy, substitution, and transformation. In derivational analogy, a new solution is computed using the same method by which the old solution was computed. Derivational analogy is found in the existing systems ARIES (Carbonell, 1986) and PRODIGY/ANALOGY <ref> (Carbonell and Veloso, 1988) </ref>. Substitution methods choose and install a replacement for some part of an old solution that does not fit the current situation requirements, as in CHEF (Hammond, 1986), JUDGE (Bain, 1989), CLAVIER (Hennessy and Hinkle, 1992), and MEDIATOR (Kolodner and Simpson, 1989).
Reference: <author> Dechter, R. and Pearl, J. </author> <year> (1988). </year> <title> Network-Based Heuristics for Constraint Satisfaction Problems. </title> <booktitle> Artificial Intelligence 34 </booktitle> <pages> 1-38. </pages>
Reference: <author> DeFazio, T.L. and Whitney, D.E. </author> <year> (1987). </year> <title> Simplified Generation of All Mechanical Assembly Sequences. </title> <journal> IEEE Journal of Robotics and Automation , Vol. </journal> <volume> 3. </volume>
Reference-contexts: Typically, the assembly sequence generation problem is viewed as a planning problem, where each step in the sequence is planned in a stepwise manner. Two well known assembly sequence generation methods are the feasibility testing method (Homem de Mello and Sanderson, 1991), and the user questioning method <ref> (DeFazio and Whitney, 1987) </ref>, each of which views the assembly sequence problem as one of finding the disassembly sequence and then reversing it.
Reference: <author> Doyle, J. </author> <year> (1979). </year> <title> A Truth Maintenance System. </title> <booktitle> Artificial Intelligence 12 </booktitle> <pages> 231-272. </pages>
Reference-contexts: Truth Maintenance Systems (TMS) remember their reasoning and use dependency directed backtracking to look at the previous choices which caused a deadend in order to change only those values that are relevant to the current error <ref> (Doyle, 1979) </ref>. The worst-case analysis of all of these algorithms, however, does not reveal the merits of these techniques, as they cannot be shown to consistently provide good results or outperform other methods.
Reference: <author> Faltings, B., Haroud, D., and Smith, I. </author> <year> (1992). </year> <title> Dynamic Constraint Satisfaction with Continuous Variables. </title> <booktitle> Proc. </booktitle> <address> ECAI92. </address>
Reference: <author> Freuder, E.C. </author> <year> (1978). </year> <title> Synthesizing Constraint Expressions. </title> <journal> Communications of the ACM 21(11) </journal> <pages> 958-966. </pages>
Reference-contexts: Rather, many existing cases must be efficiently and systematically combined, and therefore COMPOSER uses a CSP algorithm as the adaptation mechanism. 2.2 Constraint Satisfaction Problems The general solution to the constraint satisfaction problem is NP-complete <ref> (Freuder, 1978) </ref>, and thus many algorithms have been developed to tame the computational complexity of the CSP. Arc consistency, path consistency, and k-consistency algorithms attempt to eliminate inconsistencies in the constraint network before the search for a solution begins, with the hope of avoiding excessive backtracking (Nadel, 1988).
Reference: <author> Freuder, E.C. </author> <year> (1982). </year> <title> A Sufficient Condition for Backtrack Free Search. </title> <journal> Journal of the ACM 29(1) </journal> <pages> 24-32. </pages>
Reference-contexts: Other studies have focused on the constraint network structure, to determine if any easily solved cases may exist. Freuder investigated situations in which no backtracking is required <ref> (Freuder, 1982) </ref> and in which the bounds on backtracking can be determined (Freuder, 1985).
Reference: <author> Freuder, E.C. </author> <year> (1985). </year> <title> A Sufficient Condition for Backtrack-Bounded Search . Journal of the ACM 32(4) </title> <type> 755-761. </type>
Reference-contexts: Other studies have focused on the constraint network structure, to determine if any easily solved cases may exist. Freuder investigated situations in which no backtracking is required (Freuder, 1982) and in which the bounds on backtracking can be determined <ref> (Freuder, 1985) </ref>. Dechter and Pearl (1988) investigated directional arc/path consistency preprocessing techniques, which take into account the direction which backtracking will eventually search the problem, and as a result, they avoid processing many constraints which are unnecessary for the search.
Reference: <author> Gentner, D. </author> <year> (1983). </year> <title> Structure Mapping: A Theoretical Framework for Analogy . Cognitive Science 7. </title>
Reference-contexts: Recall that COMPOSERs overall problem solving methodology first goes out to the case base to retrieve a set of cases which match a new problem. The matching methodology employed by COMPOSER is an existing methodology closely resembling structure mapping <ref> (Gentner, 1983) </ref>, where the structure of the old and new case are compared in order to determine level of match. <p> COMPOSER finds this correspondence between the old and the new case using structure mapping <ref> (Gentner, 1983) </ref> and nearest neighbor similarity metrics. The matching process returns the variables and connections which correspond between the old and the new case.
Reference: <author> Haigh, K. and Veloso, M. </author> <year> (1995). </year> <title> Route Planning by Analogy. </title> <booktitle> In Proc. 1st International Conference on Case Based Reasoning (Veloso, </booktitle> <editor> M. and Aamodt, A., Eds.), </editor> <publisher> LNAI series, Springer. </publisher>
Reference-contexts: More recent systems that have addressed the multi-case adaptation issue are EADOCS (Netten et al., 1993), IDIOM (Smith et al., 1995), CAPlan (Munoz and Huellen, 1995), and PRODIGY <ref> (Haigh and Veloso, 1995) </ref>. In COMPOSER, the many matching cases are retrieved at one time from the case base during retrieval, and then these cases are all used simultaneously by the repair algorithm to find a solution to the new problem.
Reference: <author> Hammond, K. </author> <year> (1986). </year> <title> CHEF: A Model of Case-Based Planning. </title> <booktitle> Proc. AAAI-86, </booktitle> <pages> 267-271, </pages> <address> Cambridge, MA. </address>
Reference-contexts: Derivational analogy is found in the existing systems ARIES (Carbonell, 1986) and PRODIGY/ANALOGY (Carbonell and Veloso, 1988). Substitution methods choose and install a replacement for some part of an old solution that does not fit the current situation requirements, as in CHEF <ref> (Hammond, 1986) </ref>, JUDGE (Bain, 1989), CLAVIER (Hennessy and Hinkle, 1992), and MEDIATOR (Kolodner and Simpson, 1989).
Reference: <author> Hennessy, D.H. and Hinkle, D. </author> <year> (1992). </year> <title> Applying Case-Based Reasoning to Autoclave Loading. </title> <journal> IEEE Expert, </journal> <volume> 7 </volume> <pages> 21-26. </pages>
Reference-contexts: Derivational analogy is found in the existing systems ARIES (Carbonell, 1986) and PRODIGY/ANALOGY (Carbonell and Veloso, 1988). Substitution methods choose and install a replacement for some part of an old solution that does not fit the current situation requirements, as in CHEF (Hammond, 1986), JUDGE (Bain, 1989), CLAVIER <ref> (Hennessy and Hinkle, 1992) </ref>, and MEDIATOR (Kolodner and Simpson, 1989). Transformation methods use heuristics to replace, delete, or add components to an old solution in order to make the old solution work in the new situation, as in CASEY (Koton, 1988) and JULIA (Hinrichs, 1992).
Reference: <author> Hinrichs, T.R. </author> <year> (1992). </year> <title> Problem Solving in Open Worlds: A Case Study in Design, </title> <publisher> Lawrence Earlbaum Publishers, </publisher> <address> Hilldale, NJ. </address>
Reference-contexts: Transformation methods use heuristics to replace, delete, or add components to an old solution in order to make the old solution work in the new situation, as in CASEY (Koton, 1988) and JULIA <ref> (Hinrichs, 1992) </ref>.
Reference: <author> Homem de Mello, L.S. and Sanderson, A.C. </author> <year> (1991). </year> <title> A Correct and Complete Algorithm for the Generation of Mechanical Assembly Sequences. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <pages> 228-240. </pages>
Reference-contexts: Typically, the assembly sequence generation problem is viewed as a planning problem, where each step in the sequence is planned in a stepwise manner. Two well known assembly sequence generation methods are the feasibility testing method <ref> (Homem de Mello and Sanderson, 1991) </ref>, and the user questioning method (DeFazio and Whitney, 1987), each of which views the assembly sequence problem as one of finding the disassembly sequence and then reversing it. <p> First, the typical formulation of the assembly sequence problem as a planning problem requires extensive feasibility testing at each plan step in order to determine the valid subassemblies <ref> (Homem de Mello and Sanderson, 1991) </ref>. We found that most assemblies are decomposable, and thus lend themselves to a case combination process, which allows us to eliminate the costly feasibility computations necessary when the problem is formulated as a planning problem. <p> The CSP graph of a product closely resembles its connectivity graph which describes the relationships between the parts, known as the relational model <ref> (Homem de Mello and Sanderson, 1991) </ref> shown in The CSP is formulated by defining each CSP variable to be a connection between two parts.
Reference: <author> Kolodner, J.L. </author> <year> (1993). </year> <title> Case Based Reasoning, </title> <publisher> Morgan Kaufmann Publishers/ Kolodner, </publisher> <editor> J.L. and Simpson, R.L. </editor> <year> (1989). </year> <title> The Mediator: Analysis of an Early Case-Based Problem Solver. </title> <booktitle> Cognitive Science 13 </booktitle> <pages> 507-549. </pages>
Reference-contexts: Design problems are typically large and complex, necessitating decomposition in order to facilitate reuse of existing cases. However, decomposition is often difficult because the many components of a problem have strong relations among each other <ref> (Kolodner, 1993) </ref>. Therefore, it is helpful if a case based reasoner has an efficient and accurate method by which to decompose a new problem before matching it against the cases in the case base.
Reference: <author> Koton, P. </author> <year> (1988). </year> <title> Reasoning about Evidence in Causal Explanation. </title> <booktitle> Proc. AAAI-88, </booktitle> <pages> 256-263, </pages> <address> Cambridge, MA. </address>
Reference-contexts: Transformation methods use heuristics to replace, delete, or add components to an old solution in order to make the old solution work in the new situation, as in CASEY <ref> (Koton, 1988) </ref> and JULIA (Hinrichs, 1992).
Reference: <author> Minton, S., Johnston, M., Philips, A., and Laird, P. </author> <year> (1992). </year> <title> Minimizing Conflicts: a Heuristic Repair Method for Constraint Satisfaction and Scheduling Problems. </title> <booktitle> Artificial Intelligence 58 </booktitle> <pages> 161-205. </pages>
Reference-contexts: Mittal and Falkenhainer (1990) identified four types of dynamic constraints and implemented them within an ATMS framework. Our research has identified a promising CSP algorithm called the minimum conflicts algorithm <ref> (Minton et al., 1992) </ref>, whose empirical computational time has been shown to grow only linearly in the size of the problem,. <p> This is especially true in complex domains such as engineering design, where it may not be immediately apparent how a set of cases should be combined to result in an effective new design product. For this reason, we have chosen a formal CSP algorithm, the minimum conflicts algorithm <ref> (Minton et al., 1992) </ref> to accomplish adaptation in our system. The issues that CSP addresses solve many of the inherent difficulties of adaptation. For instance, the CSP provides a common case representation, allowing cases from many different sources to be integrated seamlessly into a solution for a new problem. <p> This linear empirical time is attributed to the fact that the number of repairs required remains constant as the size of the problem grows <ref> (Minton et al., 1992) </ref>. However, the worst case complexity is still exponential, as for the other CSP algorithms. The minimum conflicts algorithm as implemented in COMPOSER is the minimum conflicts heuristic embedded within a backtracking algorithm. <p> One observation confirms a previously found result, that the minimum conflicts algorithm outperforms chronological backtracking <ref> (Minton et al., 1992) </ref>.
Reference: <author> Mittal, S. and Falkenhainer, B. </author> <year> (1990). </year> <title> Dynamic Constraint Satisfaction. </title> <booktitle> Proc. AAAI-90, </booktitle> <pages> 25-32. </pages>
Reference: <author> Munoz, H. and Huellen, J. </author> <title> (1995) Retrieving Cases in Structured Domains by Using Goal Dependencies. </title> <booktitle> In Proc. 1st International Conference on Case Based Reasoning (Veloso, </booktitle> <editor> M. and Aamodt, A., Eds.), </editor> <publisher> LNAI series, Springer. </publisher>
Reference-contexts: More recent systems that have addressed the multi-case adaptation issue are EADOCS (Netten et al., 1993), IDIOM (Smith et al., 1995), CAPlan <ref> (Munoz and Huellen, 1995) </ref>, and PRODIGY (Haigh and Veloso, 1995). In COMPOSER, the many matching cases are retrieved at one time from the case base during retrieval, and then these cases are all used simultaneously by the repair algorithm to find a solution to the new problem.
Reference: <author> Nadel, B. </author> <year> (1988). </year> <title> Tree Search and Arc Consistency in Constraint Satisfaction Problems. </title> <booktitle> In Search in Artificial Intelligence, </booktitle> <pages> 287-342, </pages> <publisher> Springer Verlag. </publisher>
Reference-contexts: Arc consistency, path consistency, and k-consistency algorithms attempt to eliminate inconsistencies in the constraint network before the search for a solution begins, with the hope of avoiding excessive backtracking <ref> (Nadel, 1988) </ref>. Other studies have focused on the constraint network structure, to determine if any easily solved cases may exist. Freuder investigated situations in which no backtracking is required (Freuder, 1982) and in which the bounds on backtracking can be determined (Freuder, 1985).
Reference: <editor> Netten, B.D., Vingerhoeds, R.A., Koppelaar, H., and Boullart, L. </editor> <year> (1993). </year> <title> Expert Assisted Optimization of Composite Structures. </title> <booktitle> In SCS European Simulation Symp. </booktitle> <editor> ESS93 (Verbraeck, A. and Kerckhoffs, E.J.H, Eds.), </editor> <month> 143-148. </month>
Reference-contexts: More recent systems that have addressed the multi-case adaptation issue are EADOCS <ref> (Netten et al., 1993) </ref>, IDIOM (Smith et al., 1995), CAPlan (Munoz and Huellen, 1995), and PRODIGY (Haigh and Veloso, 1995).
Reference: <author> Pu., P. and Purvis, L. </author> <year> (1996). </year> <title> Formalizing the Adaptation Process for Case Based Design. In Applications of Case Based Reasoning to Design (Maher, M.L. </title> <editor> and Pu, P., Eds.), </editor> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference-contexts: By employing a formalized methodology (CSP), the adaptation method described here can be applied to any problem which can be described as a static or dynamic, discrete CSP, thereby providing a generalized mechanism for CBR problem solving. We have described the system extensively in <ref> (Pu and Purvis, 1996) </ref>. This article has provided a further analysis of the results obtained by our system. We have shown that formalizing the adaptation process allows measurement of the adaptibility of the retrieved cases - a concept that has been previously difficult to quantify.
Reference: <author> Pu, P. and Reschberger, M. </author> <year> (1991). </year> <title> Case Based Assembly Planning. </title> <booktitle> Proc. DARPAs Case-Based Reasoning Workshop, </booktitle> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference-contexts: Other work on CBR in assembly sequence generation has been addressed by using the case base at each plan step order to determine which would be the most feasible next connection to make <ref> (Pu and Reschberger, 1991) </ref>.
Reference: <author> Purvis, L. </author> <year> (1995). </year> <title> Intelligent Design Problem Solving Using Case Based and Constraint Based Techniques. </title> <type> Ph.D. Thesis, </type> <institution> The University of Connecticut. </institution>
Reference-contexts: COMPOSER addresses both linear and nonlinear problems as well as problems with non-monotone characteristics by formulating them uniformly as CSPs <ref> (Purvis, 1995) </ref>. COMPOSER also uses the old solution to generate one good assembly sequence based on experience, eliminating the need for a human expert to later view and edit the assembly sequence generated. <p> We have applied this methodology to both assembly sequence problems and to configuration design problems <ref> (Purvis and Pu, 1995) </ref>, and the results are detailed in Section 6. 5 EXAMPLE Consider the following example of a motor, shown in Figure 12. Consider that we have stored in the case base the receptacle example shown in Figure 3.
Reference: <author> Purvis, L. and Pu, P. </author> <year> (1995). </year> <title> Adaptation Using Constraint Satisfaction Techniques. </title> <booktitle> In Proc. 1st International Conference on Case Based Reasoning (Veloso, </booktitle> <editor> M. and Aamodt, A., Eds.), </editor> <publisher> LNAI series, Springer. </publisher>
Reference-contexts: COMPOSER addresses both linear and nonlinear problems as well as problems with non-monotone characteristics by formulating them uniformly as CSPs <ref> (Purvis, 1995) </ref>. COMPOSER also uses the old solution to generate one good assembly sequence based on experience, eliminating the need for a human expert to later view and edit the assembly sequence generated. <p> We have applied this methodology to both assembly sequence problems and to configuration design problems <ref> (Purvis and Pu, 1995) </ref>, and the results are detailed in Section 6. 5 EXAMPLE Consider the following example of a motor, shown in Figure 12. Consider that we have stored in the case base the receptacle example shown in Figure 3.
Reference: <author> Smith, I., Lottaz, C., and Faltings, B. </author> <year> (1995). </year> <title> Spatial Composition Using Cases: </title> <booktitle> IDIOM. In Proc. 1st International Conference on Case Based Reasoning (Veloso, </booktitle> <editor> M. and Aamodt, A., Eds.), </editor> <publisher> LNAI series, Springer. </publisher>
Reference-contexts: More recent systems that have addressed the multi-case adaptation issue are EADOCS (Netten et al., 1993), IDIOM <ref> (Smith et al., 1995) </ref>, CAPlan (Munoz and Huellen, 1995), and PRODIGY (Haigh and Veloso, 1995).
Reference: <author> Smyth, B. and Keane, M. </author> <year> (1995). </year> <title> Experiments on Adaptation-Guided Retrieval in Case-Based Design. In Domains by Using Goal Dependencies. </title> <booktitle> In Proc. 1st International Conference on Case Based Reasoning (Veloso, </booktitle> <editor> M. and Aamodt, A., Eds.), </editor> <publisher> LNAI series, Springer. </publisher>
Reference-contexts: A similarity in motivation exists between COMPOSERs approach and the approach taken in DEJA VU <ref> (Smyth and Keane, 1995) </ref>, where the emphasis is on determining the adaptability of the retrieved cases. <p> In COMPOSER, the adaptability assessment has emerged because of imposing the constraint satisfaction problem (CSP) structure onto the adaptation process, and can be determined once the set of matching cases has been retrieved, while in DEJA VU <ref> (Smyth and Keane, 1995) </ref>, assessing adaptability is being used to guide retrieval. The multi-case approach taken by COMPOSER is unique in that it simultaneously combines solutions to several cases, while also solving the local inconsistencies between these cases, to produce a global solution to the new problem.
References-found: 30

