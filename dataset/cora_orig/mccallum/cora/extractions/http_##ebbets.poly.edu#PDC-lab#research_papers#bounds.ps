URL: http://ebbets.poly.edu/PDC-lab/research_papers/bounds.ps
Refering-URL: http://ebbets.poly.edu/PDC-lab/wein.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: wein@mem.poly.edu.  
Title: On the Relationship between Combinatorial and LP-Based Approaches to NP-hard Scheduling Problems (Extended Abstract)  
Author: R. N. Uma Joel Wein 
Address: NY, 11201.  
Affiliation: Department of Computer Science, Polytechnic University, Brooklyn,  of Computer Science, Polytechnic University, Brooklyn, NY,  
Note: ruma@tiger.poly.edu. Research partially supported by NSF Grant CCR-9626831.  Department  11201. Research partially supported by NSF Grant CCR-9626831 and a grant from the New York State Science and Technology Foundation, through its Center for Advanced Technology in Telecommunications.  
Date: December 2, 1997  
Abstract: Enumerative approaches, such as branch-and-bound, to solving optimization problems require a subroutine that produces a lower bound on the value of the optimal solution. In the domain of scheduling problems the requisite lower bound has typically been derived from either the solution to a linear-programming relaxation of the problem or the solution of a combinatorial relaxation. In this paper we investigate, from both a theoretical and practical perspective, the relationship between several linear-programming based lower bounds and combinatorial lower bounds for two scheduling problems in which the goal is to minimize the average weighted completion time of the jobs scheduled. We establish a number of facts about the relationship between these different sorts of lower bounds, including the equivalence of certain linear-programming-based lower bounds for both of these problems to combinatorial lower bounds used in successful branch-and-bound algorithms. As a result we obtain the first worst-case analysis of the quality of the lower bound delivered by these combinatorial relaxations. We then give an empirical evaluation of the strength of the various lower bounds and heuristics. This extends and puts in a broader context a recent experimental evaluation by Savelsbergh and the authors of the empirical strength of both heuristics and lower bounds based on different LP-relaxations of a single-machine scheduling problem. We observe that on most kinds of synthetic data used in experimental studies a simple heuristic, used in successful combinatorial branch-and-bound algorithms for the problem, outperforms on average all of the LP-based heuristics. However, we identify other classes of problems on which the LP-based heuristics are superior, and report on experiments that give a qualitative sense of the range of dominance of each. Finally, we consider the impact of local improvement on the solutions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. J. Anderson, C. A. Glass, and C. N. Potts. </author> <title> Machine scheduling. </title> <editor> In E. Aarts and J. K. Lenstra, editors, </editor> <title> Local Search in Combinatorial Optimization. </title> <publisher> Wiley Press, </publisher> <year> 1997. </year>
Reference-contexts: It is only on data sets that were specifically designed to be difficult that the LP-based heuristics outperform the simple greedy approach. Finally, we note that simple local-improvement techniques are often very successful in giving good solutions to scheduling problems <ref> [1] </ref>; we therefore consider the impact of some simple local improvement techniques when applied both "from scratch" and to the solutions yielded by the various heuristics that we consider. 2 Background In this section we briefly review the relevant lower bounds and algorithms. <p> process to model that, on average 2, 5, 10 or 20 jobs arrived every 10 units of time, (where 10 is the maximum job size) or uniformly in [0; P Three distributions were used for the generation of each of the w j and p j : (i) uniform in <ref> [1; 10] </ref> (ii) normal with a mean of 5 and a standard deviation of 2:5, (iii) a two hump distribution, where, with probability 0:5 the number is chosen from a normal distribution with mean 2:5 and standard deviation 0:5, and with probability 0:5 the number is chosen from a normal distribution
Reference: [2] <author> H. Belouadah, M. E. Posner, and C. N. Potts. </author> <title> Scheduling with release dates on a single machine to minimize total weighted completion time. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 36 </volume> <pages> 213-231, </pages> <year> 1992. </year>
Reference-contexts: Finally, for 1jr j j P w j C j we give an empirical evaluation of the relative performance of these different lower bounds, and compare the performance of the approximation algorithms based on the LP-relaxations with the heuristics used in the successful branch-and-bound code of Belouadah, Posner and Potts <ref> [2] </ref>. Brief discussion of previous related work: We begin with 1jr j j P w j C j . Dyer and Wolsey considered several linear-programming relaxations of this problem as a tool for producing strong 1 lower bounds [5]. <p> In parallel with work on linear-programming lower bounds for 1jr j j P w j C j there has been significant work on branch-and-bound algorithms for 1jr j j P w j C j based on combinatorial lower bounds <ref> [2, 3, 4, 11] </ref>. The most successful of these is due to Belouadah, Posner and Potts [2] who made use of two combinatorial lower bounds based on job splitting, and for an upper bound a simple greedy heuristic. <p> The most successful of these is due to Belouadah, Posner and Potts <ref> [2] </ref> who made use of two combinatorial lower bounds based on job splitting, and for an upper bound a simple greedy heuristic. <p> So in P , this job is scheduled during [t 1 ; t 1 + p]. In P , this job contributes, w fl (t 1 + p). The following equality was shown by Belouadah, Posner and Potts in <ref> [2] </ref>. w fl (t 1 + p) = (w 1 + + w k )(t 1 + p 1 + + p k ) +w k (t 1 + p 1 + + p k ) k X w i C 0 i + CBRK where C 0 i denotes the
Reference: [3] <author> L. Bianco and S. Ricciardelli. </author> <title> Scheduling of a single machine to minimize total weighted completion time subject to release dates. </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> 29 </volume> <pages> 151-167, </pages> <year> 1982. </year>
Reference-contexts: In parallel with work on linear-programming lower bounds for 1jr j j P w j C j there has been significant work on branch-and-bound algorithms for 1jr j j P w j C j based on combinatorial lower bounds <ref> [2, 3, 4, 11] </ref>. The most successful of these is due to Belouadah, Posner and Potts [2] who made use of two combinatorial lower bounds based on job splitting, and for an upper bound a simple greedy heuristic.
Reference: [4] <author> M. I. Dessouky and J. S. Deogun. </author> <title> Sequencing jobs with unequal ready times to minimize mean flow time. </title> <journal> SIAM Journal on Computing, </journal> <volume> 10 </volume> <pages> 192-202, </pages> <year> 1981. </year>
Reference-contexts: In parallel with work on linear-programming lower bounds for 1jr j j P w j C j there has been significant work on branch-and-bound algorithms for 1jr j j P w j C j based on combinatorial lower bounds <ref> [2, 3, 4, 11] </ref>. The most successful of these is due to Belouadah, Posner and Potts [2] who made use of two combinatorial lower bounds based on job splitting, and for an upper bound a simple greedy heuristic.
Reference: [5] <author> M.E. Dyer and L.A. Wolsey. </author> <title> Formulating the single machine sequencing problem with release dates as a mixed integer program. </title> <journal> Discrete Applied Mathematics, </journal> (26):255-270, 1990. 
Reference-contexts: Brief discussion of previous related work: We begin with 1jr j j P w j C j . Dyer and Wolsey considered several linear-programming relaxations of this problem as a tool for producing strong 1 lower bounds <ref> [5] </ref>. Among those considered were two time-indexed linear programming relaxations, in which the linear program contains a variable for every job at every point in time. <p> As noted earlier, this linear program is a valid relaxation of the optimal preemptive schedule as well [9], and can be solved in O (n log n) time <ref> [5] </ref>. The structure of the solution is in fact quite simple: at any point in time, schedule the available unfinished job with maximum w j =p j (this may involve preemption). <p> We now turn to the relationship with the x jt relaxation; it is known that this is stronger than the y jt <ref> [5] </ref>. Theorem 3.2 The lower bound given by BPP2 neither always dominates nor is dominated by the x jt -lower bound. The proof is by exhibiting two instances; one on which BPP2 is better and one on which x jt is better.
Reference: [6] <author> M. Goemans. </author> <title> Improved approximation algorithms for scheduling with release dates. </title> <booktitle> In Proceedings of the 8th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 591-598, </pages> <year> 1997. </year>
Reference-contexts: Specifically, they have used these relaxations to develop approximation algorithms with small-constant-factor worst-case performance guarantees; as a by-product one obtains worst-case bounds on the quality of the lower bound delivered by these relaxations <ref> [13, 9, 6, 17, 16] </ref>. We define a relaxation of a problem to be a relaxation that yields a lower bound that is always within a factor of of the optimal solution. In this paper we establish additional connections between different approaches to these problems. <p> Their approximation algorithm in fact relies only on the weaker y jt -relaxation and simultaneously proves that the y jt -LP (and hence the stronger x jt -LP) are 3-relaxations of the problem. Subsequent papers gave improved techniques with better constant performance guarantees <ref> [6, 7] </ref>. In a recent empirical study, Savelsbergh, Uma and Wein demonstrated that the y jt bound on many instances comes within a few percent of the x jt bound at a greatly reduced computational cost. <p> Approximation Algorithms: Recent progress on approximation algorithms for 1jr j j P based on solving the linear relaxation of either of the afore-mentioned LPs and then inferring an ordering from the solution <ref> [13, 9, 6, 7] </ref>. In this abstract we focus only on a few of these heuristics that were demonstrated in [15] to be the most useful computationally. In constructing an ordering we make use of the notion of an ff-point [13, 10]. <p> We define the algorithm Schedule-by-Fixed-ff, that can be applied to the solution of either LP relaxation, as ordering the jobs by their ff-points and scheduling in that order. Goemans <ref> [6] </ref> has shown that for appropriate choice of ff this is a ( 2+1)-approximation algorithm. Goemans also showed that by choosing ff randomly according to a uniform distribution and then scheduling in this order, one obtains a randomized 2-approximation algorithm [6] and if one chooses using a different distribution, a 1:7451-approximation <p> Goemans <ref> [6] </ref> has shown that for appropriate choice of ff this is a ( 2+1)-approximation algorithm. Goemans also showed that by choosing ff randomly according to a uniform distribution and then scheduling in this order, one obtains a randomized 2-approximation algorithm [6] and if one chooses using a different distribution, a 1:7451-approximation algorithm [7]. Either randomized algorithm can be derandomized by considering n different values of ff, scheduling according to each of them, and then choosing the best.
Reference: [7] <author> M. Goemans, M. Queyranne, A. Schulz, M. Skutella, and Y. Wang. </author> <title> Single machine scheduling with release dates. </title> <type> Preprint, </type> <year> 1997. </year>
Reference-contexts: Their approximation algorithm in fact relies only on the weaker y jt -relaxation and simultaneously proves that the y jt -LP (and hence the stronger x jt -LP) are 3-relaxations of the problem. Subsequent papers gave improved techniques with better constant performance guarantees <ref> [6, 7] </ref>. In a recent empirical study, Savelsbergh, Uma and Wein demonstrated that the y jt bound on many instances comes within a few percent of the x jt bound at a greatly reduced computational cost. <p> Approximation Algorithms: Recent progress on approximation algorithms for 1jr j j P based on solving the linear relaxation of either of the afore-mentioned LPs and then inferring an ordering from the solution <ref> [13, 9, 6, 7] </ref>. In this abstract we focus only on a few of these heuristics that were demonstrated in [15] to be the most useful computationally. In constructing an ordering we make use of the notion of an ff-point [13, 10]. <p> Goemans also showed that by choosing ff randomly according to a uniform distribution and then scheduling in this order, one obtains a randomized 2-approximation algorithm [6] and if one chooses using a different distribution, a 1:7451-approximation algorithm <ref> [7] </ref>. Either randomized algorithm can be derandomized by considering n different values of ff, scheduling according to each of them, and then choosing the best. We call this algorithm Best-ff, or, if only consider k equally-spaced values of ff, we call the algorithm k-Best-ff.
Reference: [8] <author> L. A. Hall. </author> <title> Approximation algorithms for scheduling. </title> <editor> In D. S. Hochbaum, editor, </editor> <booktitle> Approximation Algorithms for NP-hard Problems, </booktitle> <pages> pages 1-43. </pages> <publisher> PWS Publishing Company, </publisher> <year> 1997. </year>
Reference-contexts: Here the goal is to design an algorithm that runs in polynomial time and produces a near-optimal solution of some guaranteed quality. Specifically, we define a -approximation algorithm to be an algorithm that runs in polynomial time and delivers a solution of value at most times optimal; see <ref> [8] </ref> for a survey. In contrast, an enumerative approach attempts to solve a (usually small) problem to optimality, with no guarantee that the solution will be obtained in time polynomial in the size of the input.
Reference: [9] <author> L. A. Hall, A. S. Schulz, D. B. Shmoys, and J. Wein. </author> <title> Scheduling to minimize average completion time: Off-line and on-line approximation algorithms. </title> <institution> Mathematics of Operations Research, </institution> <month> August </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Specifically, they have used these relaxations to develop approximation algorithms with small-constant-factor worst-case performance guarantees; as a by-product one obtains worst-case bounds on the quality of the lower bound delivered by these relaxations <ref> [13, 9, 6, 17, 16] </ref>. We define a relaxation of a problem to be a relaxation that yields a lower bound that is always within a factor of of the optimal solution. In this paper we establish additional connections between different approaches to these problems. <p> Van den Akker, Hurkens and Savelsbergh [21] developed a column-generation approach to solving these linear programs that made feasible the solution of instances with up to 50 jobs with processing times in the range of [0::30]. Inspired by the empirical strength of this relaxation, Hall, Schulz, Shmoys and Wein <ref> [9] </ref> gave a 3-approximation algorithm for 1jr j j P w j C j based on time-indexed linear programs. <p> As noted earlier, this linear program is a valid relaxation of the optimal preemptive schedule as well <ref> [9] </ref>, and can be solved in O (n log n) time [5]. The structure of the solution is in fact quite simple: at any point in time, schedule the available unfinished job with maximum w j =p j (this may involve preemption). <p> Approximation Algorithms: Recent progress on approximation algorithms for 1jr j j P based on solving the linear relaxation of either of the afore-mentioned LPs and then inferring an ordering from the solution <ref> [13, 9, 6, 7] </ref>. In this abstract we focus only on a few of these heuristics that were demonstrated in [15] to be the most useful computationally. In constructing an ordering we make use of the notion of an ff-point [13, 10]. <p> All of these instances attempt to exploit the fact that the y jt relaxation is also a valid relaxation of the optimal preemptive schedule <ref> [9] </ref>, and that therefore on instances for which the optimal preemptive schedule is much better than the optimal nonpre-emptive schedule, the y jt -based relaxation should perform poorly.
Reference: [10] <author> L. A. Hall, D. B. Shmoys, and J. Wein. </author> <title> Scheduling to minimize average completion time: Off-line and on-line algorithms. </title> <booktitle> In Proceedings of the 7th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 142-151, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: In this abstract we focus only on a few of these heuristics that were demonstrated in [15] to be the most useful computationally. In constructing an ordering we make use of the notion of an ff-point <ref> [13, 10] </ref>. We define the ff-point of job j, 0 ff 1, to be the first point in time, in the solution to a time-indexed relaxation, at which an ff fraction of job j has been completed. <p> process to model that, on average 2, 5, 10 or 20 jobs arrived every 10 units of time, (where 10 is the maximum job size) or uniformly in [0; P Three distributions were used for the generation of each of the w j and p j : (i) uniform in <ref> [1; 10] </ref> (ii) normal with a mean of 5 and a standard deviation of 2:5, (iii) a two hump distribution, where, with probability 0:5 the number is chosen from a normal distribution with mean 2:5 and standard deviation 0:5, and with probability 0:5 the number is chosen from a normal distribution
Reference: [11] <author> A. M. A. Hariri and C. N. Potts. </author> <title> An algorithm for single machine sequencing with release dates to minimize total weighted completion time. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 5 </volume> <pages> 99-109, </pages> <year> 1983. </year>
Reference-contexts: In parallel with work on linear-programming lower bounds for 1jr j j P w j C j there has been significant work on branch-and-bound algorithms for 1jr j j P w j C j based on combinatorial lower bounds <ref> [2, 3, 4, 11] </ref>. The most successful of these is due to Belouadah, Posner and Potts [2] who made use of two combinatorial lower bounds based on job splitting, and for an upper bound a simple greedy heuristic. <p> We sought to generate a rich enough set of instances to observe the fullest possible range of algorithm and lower bound performance. Our experimental design follows that both of Hariri and Potts <ref> [11] </ref> and of [15]. We worked with three sets of data. The first, which we call OPT, was a set of 60 instances with n = 30 jobs, with w j 2 [1::10] and p j 2 [1::5] in 20 instances and p j 2 [1::10] in 40 instances.
Reference: [12] <author> H. Kellerer, T. Tautenhahn, and G. J. Woeginger. </author> <title> Approximability and nonapproximability results for minimizing total flow time on a single machine. </title> <booktitle> In Proceedings of the 28th Annual ACM Symposium on Theory of Computing, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: We also report results with respect to the average weighted flow time = P w j (C j r j ); while equivalent to average weighted completion time at optimality this criterion is provably much harder to approximate <ref> [12] </ref> and thus more interesting. 4.2 Lower Bounds Table 1 reports on the relative performance of the different lower bounds.
Reference: [13] <author> C. Phillips, C. Stein, and J. Wein. </author> <title> Scheduling jobs that arrive over time. </title> <booktitle> In Proceedings of Fourth Workshop on Algorithms and Data Structures, Lecture Notes in Computer Science, </booktitle> <volume> 955, </volume> <pages> pages 86-97, </pages> <address> Berlin, </address> <year> 1995. </year> <note> Springer-Verlag. Journal version to appear in Mathematical Programming B. 1 We are grateful to David Shmoys for suggesting this idea. 11 </note>
Reference-contexts: Specifically, they have used these relaxations to develop approximation algorithms with small-constant-factor worst-case performance guarantees; as a by-product one obtains worst-case bounds on the quality of the lower bound delivered by these relaxations <ref> [13, 9, 6, 17, 16] </ref>. We define a relaxation of a problem to be a relaxation that yields a lower bound that is always within a factor of of the optimal solution. In this paper we establish additional connections between different approaches to these problems. <p> Approximation Algorithms: Recent progress on approximation algorithms for 1jr j j P based on solving the linear relaxation of either of the afore-mentioned LPs and then inferring an ordering from the solution <ref> [13, 9, 6, 7] </ref>. In this abstract we focus only on a few of these heuristics that were demonstrated in [15] to be the most useful computationally. In constructing an ordering we make use of the notion of an ff-point [13, 10]. <p> In this abstract we focus only on a few of these heuristics that were demonstrated in [15] to be the most useful computationally. In constructing an ordering we make use of the notion of an ff-point <ref> [13, 10] </ref>. We define the ff-point of job j, 0 ff 1, to be the first point in time, in the solution to a time-indexed relaxation, at which an ff fraction of job j has been completed.
Reference: [14] <author> M. Queyranne and A.S. Schulz. </author> <title> Polyhedral approaches to machine scheduling. </title> <type> Technical Report 408/1994, </type> <institution> Technical University of Berlin, </institution> <year> 1994. </year>
Reference-contexts: The first relies on a linear-programming relaxation of the problem, which itself is often derived from an integer linear-programming formulation by relaxing the integrality constraints; Queyranne and Schulz give an extensive survey of this approach <ref> [14] </ref>. The second relies on what we will call a combinatorial relaxation of the problem and yields what we will call a combinatorial lower bound.
Reference: [15] <author> M.W.P. Savelsbergh, J. Wein, and R.N. Uma. </author> <title> An experimental study of lp-based approximation algorithms for scheduling problems. </title> <note> To appear in SODA '98, </note> <year> 1997. </year>
Reference-contexts: We then give an empirical evaluation of the quality of the different lower bounds and associated heuristics; this extends and puts in a broader context a recent experimental study of Savelsbergh and the authors <ref> [15] </ref>. <p> In this abstract we focus only on a few of these heuristics that were demonstrated in <ref> [15] </ref> to be the most useful computationally. In constructing an ordering we make use of the notion of an ff-point [13, 10]. <p> In fact, he considers a more general problem in which each processor can have non-trivial ready times our results extend to this case as well. The details are omitted due to the space constraints of the extended abstract. 4 Empirical Evaluation 4.1 Experimental Design In <ref> [15] </ref> a comprehensive experimental evaluation is given of the relative strength of the y jt (BPP1) and x jt LP relaxations and approximation algorithms based on them. <p> We sought to generate a rich enough set of instances to observe the fullest possible range of algorithm and lower bound performance. Our experimental design follows that both of Hariri and Potts [11] and of <ref> [15] </ref>. We worked with three sets of data. The first, which we call OPT, was a set of 60 instances with n = 30 jobs, with w j 2 [1::10] and p j 2 [1::5] in 20 instances and p j 2 [1::10] in 40 instances. <p> For all of these we computed the BPP1 and BPP2 relaxations, and ran on all of these relaxations the heuristics discussed in Section 2. Solutions to the x jt relaxation were available for some of the instances from our work in <ref> [15] </ref>. 7 Finally, as in [15] we considered the Hard data sets that were designed to provoke poor per-formance from the LP-based heuristics. <p> For all of these we computed the BPP1 and BPP2 relaxations, and ran on all of these relaxations the heuristics discussed in Section 2. Solutions to the x jt relaxation were available for some of the instances from our work in <ref> [15] </ref>. 7 Finally, as in [15] we considered the Hard data sets that were designed to provoke poor per-formance from the LP-based heuristics. <p> The values reported are averaged over all the instances in each case. Results for the y jt and x jt relaxations are from the experimental work of Savelsbergh et al. 4.3 Upper Bounds In <ref> [15] </ref> we demonstrated that the various heuristics based on the LP-relaxations in general yield improved performance with improved quality of relaxation, although there are many instances for which this is not the case. Therefore it is of interest to study the impact of the BPP2 lower bounds on heuristic performance.
Reference: [16] <author> A. S. Schulz and M. Skutella. </author> <title> Random-based scheduling: New approximations and LP lower bounds. </title> <editor> In J. Rolim, editor, </editor> <booktitle> Randomization and Approximation Techniques in Computer Science, volume 1269 of LNCS, </booktitle> <pages> pages 119 - 133. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1997. </year> <booktitle> Proceedings of the International Workshop RANDOM'97. </booktitle>
Reference-contexts: Specifically, they have used these relaxations to develop approximation algorithms with small-constant-factor worst-case performance guarantees; as a by-product one obtains worst-case bounds on the quality of the lower bound delivered by these relaxations <ref> [13, 9, 6, 17, 16] </ref>. We define a relaxation of a problem to be a relaxation that yields a lower bound that is always within a factor of of the optimal solution. In this paper we establish additional connections between different approaches to these problems. <p> (which in fact was originally proposed by Eastman, Even and Isaacs in 1964 [23] ) is equivalent to a generalization of the y jt relaxation to parallel machines that was also used to give approximation algorithms for 2 P jr j j w j C j by Schulz and Skutella <ref> [17, 16] </ref>. We then give an empirical evaluation of the quality of the different lower bounds and associated heuristics; this extends and puts in a broader context a recent experimental study of Savelsbergh and the authors [15].
Reference: [17] <author> A. S. Schulz and M. Skutella. </author> <title> Scheduling-LPs bear probabilities: Randomized approximations for min-sum criteria. </title> <editor> In R. Burkard and G. Woeginger, editors, </editor> <booktitle> Algorithms - ESA'97, volume 1284 of LNCS, </booktitle> <pages> pages 416 - 429. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1997. </year> <booktitle> Proceedings of the 5th Annual European Symposium on Algorithms. </booktitle>
Reference-contexts: Specifically, they have used these relaxations to develop approximation algorithms with small-constant-factor worst-case performance guarantees; as a by-product one obtains worst-case bounds on the quality of the lower bound delivered by these relaxations <ref> [13, 9, 6, 17, 16] </ref>. We define a relaxation of a problem to be a relaxation that yields a lower bound that is always within a factor of of the optimal solution. In this paper we establish additional connections between different approaches to these problems. <p> (which in fact was originally proposed by Eastman, Even and Isaacs in 1964 [23] ) is equivalent to a generalization of the y jt relaxation to parallel machines that was also used to give approximation algorithms for 2 P jr j j w j C j by Schulz and Skutella <ref> [17, 16] </ref>. We then give an empirical evaluation of the quality of the different lower bounds and associated heuristics; this extends and puts in a broader context a recent experimental study of Savelsbergh and the authors [15].
Reference: [18] <author> J.P. De Sousa and L.A. Wolsey. </author> <title> A time-indexed formulation of non-preemptive single-machine scheduling problems. </title> <journal> Mathematical Programming, </journal> (54):353-367, 1992. 
Reference-contexts: The x jt -LP, which has been observed empirically to give strong lower bounds <ref> [18, 22] </ref>, is very difficult to solve due to its size. Van den Akker, Hurkens and Savelsbergh [21] developed a column-generation approach to solving these linear programs that made feasible the solution of instances with up to 50 jobs with processing times in the range of [0::30].
Reference: [19] <author> S.Webster. </author> <title> New bounds for the identical paralled processor weighted flow time problem. </title> <journal> Management Science, </journal> <volume> 38(1) </volume> <pages> 124-136, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: A corollary of this observation is that the optimal preemptive schedule for an instance of 1jr j j P w j C j neither always dominates nor is dominated by the solution to the x jt -relaxation. We then establish a similar relationship for a different problem. Webster <ref> [19] </ref> gave a series of lower bounds for P jj P w j C j that are based on a similar notion to the job-splitting approach of Belouadah, Posner and Potts. <p> Queyranne and Wang that show that the y jt -based lower bound can be a factor of e=(e 1) from optimal yields the same bound for the BPP2 bound. 6 Theorem 3.4 BPP2 is no better than an e=(e 1)-relaxation of 1jr j j P 3.2 Parallel Identical Machines In <ref> [19] </ref>, Webster considers the problem P jj P w j C j He gives a series of progressively stronger lower bounds for this problem all of which are based on ideas similar to job-splitting; these lower bounds lead to a successful branch-and-bound algorithm.
Reference: [20] <author> M. Van den Akker, C. P. M. Van Hoesel, and M. W. P. Savelsbergh. </author> <title> A polyhedral approach to single machine scheduling. </title> <booktitle> Mathematical Programming, </booktitle> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Although it is difficult to compare the efficacy of the branch-and-bound code of Belouadah, Posner and Potts with the branch-and-cut code due to Van den Akker et. al. based on x jt - relaxations <ref> [20] </ref> (since they were developed several years apart in different programming languages on different architectures, etc.) the evidence seems to be that neither much dominates the other; However, that of Belouadah, Posner and Potts seems to have been somewhat stronger, as they were able to solve to optimality problems of size <p> For these instances we knew the optimal solutions from the branch-and-cut code of <ref> [20] </ref>. We then generated a large Synthetic data set according to a number of parameters: problem size (n), distribution for random generation of the weights w j , distribution for the random generation of the p j , and arrival process.
Reference: [21] <author> M. Van den Akker, C. A. J. Hurkens, and M. W. P. Savelsbergh. </author> <title> A time-indexed formulation for single-machine scheduling problems: Column generation. </title> <note> Submitted for publication, </note> <year> 1996. </year>
Reference-contexts: The x jt -LP, which has been observed empirically to give strong lower bounds [18, 22], is very difficult to solve due to its size. Van den Akker, Hurkens and Savelsbergh <ref> [21] </ref> developed a column-generation approach to solving these linear programs that made feasible the solution of instances with up to 50 jobs with processing times in the range of [0::30].
Reference: [22] <author> Marjan Van den Akker. </author> <title> LP-based solution methods for single-machine scheduling problems. </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology, Eindhoven, Netherlands, </institution> <year> 1994. </year>
Reference-contexts: The x jt -LP, which has been observed empirically to give strong lower bounds <ref> [18, 22] </ref>, is very difficult to solve due to its size. Van den Akker, Hurkens and Savelsbergh [21] developed a column-generation approach to solving these linear programs that made feasible the solution of instances with up to 50 jobs with processing times in the range of [0::30].

References-found: 22

