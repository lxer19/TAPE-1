URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-94-19.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: mrl6a@cs.virginia.edu son@cs.virginia.edu  
Title: Managing Contention and Timing Constraints in a Real-Time Database System  
Author: Matthew R. Lehr and Sang H. Son 
Address: Charlottesville, VA 22903, USA  
Affiliation: Department of Computer Science School of Engineering and Applied Science University of Virginia  
Abstract: This technical report discusses how current real-time technology has been applied to a database management system to support firm real-time transactions. The report reviews priority-based CPU- and resource scheduling concepts and shows how they are used to avoid the problem of priority inversion in transaction service order, transaction progress, and memory allocation. Next, the appropriateness of optimistic concurrency control to real-time data management is examined, and the implementation of previously proposed methods WAIT-X(S) and Precise Serialization is detailed. Finally, the enforcement of firm deadlines using asynchronous aborts is discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [Abb92] <author> Abbott, Robert K., and Garcia-Molina, Hector. </author> <title> Scheduling Real-Time Transactions: A Performance Evaluation. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 17, No. 3, </volume> <month> September </month> <year> 1992. </year>
Reference-contexts: A real-time lock-based concurrency control cannot rely solely on blocking to resolve contention; it must use some form of abort. In particular, Abbot et al. <ref> [Abb92] </ref> proposed a real-time lock-based concurrency control variant of two-phase locking called 2PL-HP. 2PL-HP resolves data contention in favor of more important transactions by aborting transactions holding locks that a higher-priority transaction wishes to acquire exclusively.
Reference: [Car84] <author> Carey, Michael J., and Stonebraker, M. R. </author> <title> The Performance of Concurrency Control Algorithms for Database Management Systems. </title> <booktitle> Proceedings of the Tenth VLDB Conference, </booktitle> <address> Singapore, </address> <month> August </month> <year> 1984. </year>
Reference-contexts: Should optimistic concurrency control determine that the validator conicts with other running or recently committed 6 transactions, it aborts one or more of the transactions involved in the conict. Carey et al. <ref> [Car84] </ref> notes that locking tends to detect and resolve conicts over data relatively early in a transactions execution whereas optimistic concur-rency control tends to resolve conicts late.
Reference: [Har91] <author> Haritsa, Jayant R. </author> <title> Transaction Scheduling in Firm Real-Time Database Systems. </title> <institution> TR1036. Department of Computer Science, University of Wisconsin. </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: Carey found that the amount of transaction abortions is the single most important factor in determining the performance of an DBMS. StarBases concurrency control draws heavily from the work of two research groups. First, Haritsa reasoned that optimistic concurrency control can outperform lock-based algorithms in a firm real-time setting <ref> [Har91] </ref>. He then developed a real-time optimistic concurrency control method, WAIT-X (S), which he found empirically superior, over a wide range of resource availability and system workload levels, to a previously proposed real-time lock-based con-currency control method called 2PL-HP [Har91]. <p> concurrency control can outperform lock-based algorithms in a firm real-time setting <ref> [Har91] </ref>. He then developed a real-time optimistic concurrency control method, WAIT-X (S), which he found empirically superior, over a wide range of resource availability and system workload levels, to a previously proposed real-time lock-based con-currency control method called 2PL-HP [Har91]. Second, Lee et al. devised an improvement to the conict detection of optimistic concurrency control in general, which StarBase integrates with Haritsas WAIT-X (S) [Lee94]. Why Optimistic Concurrency Control? Experience has shown that in conventional database systems under conditions of high competition for data, locking outperforms optimistic concurrency control. <p> At its outset, the transaction may appear feasible but is later rendered infeasible by an unforseen event such as the introduction of a higher priority transaction which blocks it. WAIT-X (S) StarBase uses the WAIT-X concurrency control algorithm proposed by Haritsa <ref> [Har91] </ref>. WAIT-X is optimistic, using prospective conict detection and priority-based conict resolution. WAIT-Xs conict detection is prospective in the sense that it looks for conicts between the validator and transactions which may commit sometime in the future (i.e. running transactions).
Reference: [Hua90] <author> Huang, J., Stankovic, J., Towsley, D., and Ramamritham, K. </author> <title> Real-Time Transaction Processing: Design, Implementation, and Performance Evaluation. TR90-43. </title> <type> COINS, </type> <institution> University of Massachusetts. </institution> <month> May, </month> <year> 1990. </year>
Reference: [Kim94] <author> Kim, Youngkuk, Lehr, Matthew, George, David and Son, Sang H. </author> <title> A Database Server for Distributed Real-Time Systems: Issues and Experiences. </title> <booktitle> Second IEEE Workshop on Parallel and Distributed Real-Time Systems, </booktitle> <address> Cancun, Mexico, </address> <month> April </month> <year> 1994. </year>
Reference: [Kit93] <author> Kitayama, Takuro, Nakajima, Tatsuo, and Tokuda, Hideyuki. RT-IPC: </author> <title> An IPC Extension for Real-Time Mach. </title> <booktitle> Proceedings of the Second Microkernel Workshop, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: Sha et al. also extended BPI to handle cases where chained waiting on resources can occur, and the resource holder inherits the ceiling of the priorities of all threads it blocks directly or indirectly. RT-Mach, in turn, has striven to implement these ideas and provides both interprocess communication (RT-IPC) <ref> [Kit93] </ref> and thread synchronization (RT-Sync) [Tok91] facilities which obey BPI. RT-Mach implements BPI itself as a combination of priority queuing and priority inheritance.
Reference: [Lee93] <author> Lee, Juhnyoung and Son, Sang H. </author> <title> Using Dynamic Adjustment of Serialization Order for Real-Time Database Systems. </title> <booktitle> 14th IEEE Real-Time System Symposium, </booktitle> <month> December </month> <year> 1993. </year>
Reference: [Lee94] <author> Lee, Juhnyoung, and Son, Sang H. </author> <title> Precise Serialization for an Optimistic Concurrency Control Algorithm. </title> <note> Submitted for Publication. </note>
Reference-contexts: Second, Lee et al. devised an improvement to the conict detection of optimistic concurrency control in general, which StarBase integrates with Haritsas WAIT-X (S) <ref> [Lee94] </ref>. Why Optimistic Concurrency Control? Experience has shown that in conventional database systems under conditions of high competition for data, locking outperforms optimistic concurrency control. This is attributed to the relative efficiency of the policy each concur-rency control method uses to resolve data conicts. <p> Precise Serialization Precise serialization is a conict-detection scheme for optimistic concurrency control <ref> [Lee94] </ref>. The goal of precise serialization is to identify transaction conicts which strict prospective conict detection considers irreconcilable but can actually be resolved without aborting the transactions involved.
Reference: [Leh93] <author> Lehr, Matthew R. </author> <title> StarBase v2.2 Implementation Details. </title> <type> TR CS-93-48. </type> <institution> Department of Computer Science, University of Virginia. </institution> <month> July </month> <year> 1993. </year>
Reference: [Loe91] <author> Loepere, Keith. </author> <title> Mach 3 Kernel Principles. </title> <institution> Open Software Foundation and Carnegie Mellon University. </institution> <year> 1991. </year>
Reference: [Ram92] <author> Ramamritham, Krithi. </author> <title> Real-Time Databases. </title> <journal> International Journal of Distributed and Parallel Databases, </journal> <volume> Vol. 1, No. 2, </volume> <month> April </month> <year> 1993. </year>
Reference-contexts: The next step is to extend these solutions to the situation in which transaction characteristics are at least partially specified beforehand. With prior knowledge, a real-time DBMS can provide better support for periodic transactions. Execution time estimates and off-line analysis can be used to increase DBMS-wide predictability. Temporal consistency <ref> [Ram92] </ref>, where data used to derive new data must be consistent within a certain validity interval, is also a matter to be explored. Acknowledgements Youngkuk Kim and Juhnyoung Lee provided many valuable ideas and suggestions on how to improve this paper. 15
Reference: [Sav93] <author> Savage, Stefan, and Tokuda, Hideyuki. </author> <title> Real-Time Mach Timers: Exporting Time to the User. </title> <booktitle> Proceedings of the Third USENIX Mach Symposium, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: The deadline handler thread then uses a real-time timer to block the thread until the deadline expires. A real-time timer is an RT-Mach abstraction which allows real-time threads to synchronize with particular points in time as measured by real-time clock hardware devices <ref> [Sav93] </ref>. Each timer is associated with exactly one clock, but a single clock can support many timers. RT-Mach provides a default deadline handler constructed from the building blocks discussed above, but it is inadequate for StarBases purposes.
Reference: [Sha90] <author> Sha, Lui, Rajkumar, Ragunathan, and Lehoczky, John P. </author> <title> Priority Inheritance Protocols: an Approach to Real-Time Synchronization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 39, No. 9, </volume> <month> Sep </month> <year> 1990. </year>
Reference-contexts: This de facto blocking is a form of priority inversion, since T L is allowed to execute instead of T H . As previously mentioned, some priority inversion is unavoidable for non-preemptible resources, but Sha et al. identified a situation where unbounded priority inversion can be avoided <ref> [Sha90] </ref>. For example, consider what would happen if T H waits for T L to relinquish R and a third task, T M , whose priority is between that of T H and T L , enters the system. <p> In fact, T H may be indefinitely blocked as a stream of medium-priority tasks enter the system. To remedy this situation, Sha et al. proposed the Basic Priority Inheritance Protocol (BPI) <ref> [Sha90] </ref>. Simply stated, when a task, T L , holding resource R effectively blocks other higher-priority tasks waiting to acquire R, it should inherit the highest priority of the waiting tasks. When T L relinquishes R, it returns to executing at its former (lower) priority.
Reference: [Son93] <author> Son, Sang H., George, David W., and Kim, Young-kuk. </author> <title> Developing a Database System for Time Critical Applications on RT-Mach. </title> <note> Unpublished. </note>
Reference: [Sta88] <author> Stankovic, John A. </author> <title> Misconceptions About Real-Time Computing: a Serious Problem for Next-Generation Systems. </title> <journal> IEEE Computer, </journal> <volume> Vol. 21, No. 10, </volume> <month> October </month> <year> 1988. </year>
Reference: [Tok90] <author> Tokuda, Hideyuki, Nakajima, Tatsuo, and Rao, Prithvi. </author> <title> Real-Time Mach: Towards a Predictable Real-Time System. </title> <booktitle> Proceedings of the First USENIX Mach Workshop, </booktitle> <month> October </month> <year> 1990. </year>
Reference-contexts: StarBase uses no a priori information about transaction workload and discards tardy transactions at their deadline points. In order to realize many of these real-time goals, StarBase has been built on top of RT-Mach, a real-time operating system developed by Carnegie Mellon University <ref> [Tok90] </ref>. There are essentially three problems with which real-time DBMSs must deal: resolving resource contention, 2 resolving data contention, and enforcing timing constraints. As with other real-time systems, tasks to be performed are stratified according to their relative importance to the system. <p> RT-Machs real-time thread model distinguishes real-time threads of execution from ordinary ones, requiring the explicit specification of timing constraints and priority on a per-thread basis. The timing and priority information is then used as input to the RT-Mach scheduler <ref> [Tok90] </ref>. In the case of non-preemptible resources, however, contending threads must wait for the resource in question to be explicitly relinquished (rather than centrally scheduled as is possible with preemptible resources like the CPU) before one can access the resource.
Reference: [Tok91] <author> Tokuda, Hideyuki, and Nakajima, Tatsuo. </author> <title> Evaluation of Real-Time Synchronization in Real-Time Mach. </title> <booktitle> Proceedings of the Second USENIX Mach Workshop, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: RT-Mach, in turn, has striven to implement these ideas and provides both interprocess communication (RT-IPC) [Kit93] and thread synchronization (RT-Sync) <ref> [Tok91] </ref> facilities which obey BPI. RT-Mach implements BPI itself as a combination of priority queuing and priority inheritance. To ensure the propagation of priorities between threads of execution on machines physically disparate from the local one, RT-Machs RT-IPC package attaches a priority to each message sent.
References-found: 17

