URL: ftp://ftp.cs.columbia.edu/reports/reports-1997/cucs-010-97.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1997.html
Root-URL: http://www.cs.columbia.edu
Email: ashish@almaden.ibm.com  mumick@research.att.com  junr@cs.columbia.edu  kar@cs.columbia.edu  
Title: Adapting Materialized Views after Redefinitions: Techniques and a Performance Study  
Author: Ashish Gupta Inderpal S. Mumick Jun Rao Kenneth A. Ross 
Date: Mar. 14, 1997  
Affiliation: IBM Almaden Research Center  AT&T Laboratories  Columbia University  Columbia University  Columbia University  
Pubnum: Technical Report CUCS-010-97  
Abstract: We consider a variant of the view maintenance problem: How does one keep a materialized view up-to-date when the view definition itself changes? Can one do better than recomputing the view from the base relations? Traditional view maintenance tries to maintain the materialized view in response to modifications to the base relations; we try to "adapt" the view in response to changes in the view definition. Such techniques are needed for applications where the user can change queries dynamically and see the changes in the results fast. Data archaeology, data visualization, and dynamic queries are examples of such applications. We consider all possible redefinitions of SQL SELECT-FROM-WHERE-GROUPBY-HAVING, UNION, and EXCEPT views, and show how these views can be adapted using the old materialization for the cases where it is possible to do so. We identify extra information that can be kept with a materialization to facilitate redefinition. Multiple simultaneous changes to a view can be handled without necessarily materializing intermediate results. We identify guidelines for users and database administrators that can be used to facilitate efficient view adaptation. We perform a systematic experimental evaluation of our proposed techniques. Our evaluation indicates that adaptation is more efficient than rematerialization in most cases. Certain adaptation techniques can be up to 1,000 times better. We also point out the physical layouts that can benefit adaptation. fl A preliminary version of this paper appeared as [GMR95]. y Research supported by NSF grants IRI-91-16646 and IRI-92-23405. z Research supported by a grant from the AT&T Foundation, by a David and Lucile Packard Foundation Fellowship in Science and Engineering, by a Sloan Foundation Fellowship, by NSF grants IRI-9209029, CDA-90-24735, and by an NSF Young Investigator award. 
Abstract-found: 1
Intro-found: 1
Reference: [AWS93] <author> Christopher Ahlberg, Christopher Williamson, and Ben Shneiderman. </author> <title> Dynamic Queries for information exploration: an implementation and evaluation. In Ben Shneiderman, editor, Sparks of Innovation in Human-Computer Interaction. </title> <publisher> Ablex Publishing Corp, </publisher> <year> 1993. </year>
Reference-contexts: If the user changes the view definition, the system must be able to recompute the view fast in order to keep the application interactive. An interface for such queries in a real estate system is reported in [WS93], where they are called dynamic queries <ref> [AWS93] </ref>. Data archaeology [BST + 92, BST + 93] is another application where an archaeologist tries to discover rules about data by formulating queries, looking at the results of the query, and then changing the query iteratively as the archaeologist's understanding improves.
Reference: [BBMR89] <author> Alex Borgida, et al. </author> <title> CLASSIC: A structural data model for objects. </title> <booktitle> In ACM-SIGMOD, </booktitle> <pages> pages 59-67, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Thus, adaptation considers a smaller search space and yields a smaller but more efficient set of standard techniques that are easily incorporated in relational systems. Classic <ref> [BBMR89] </ref> is a system developed at AT&T Bell Laboratories that allows users to define new concepts and optimizes the evaluation of their extents by classifying the concepts in a concept hierarchy, and then computing them starting with the parent concepts.
Reference: [BST + 92] <author> Ronald J. Brachman, et al. </author> <title> Knowledge representation support for data archaeology. </title> <booktitle> In First International Conference on Information and Knowledge Management, </booktitle> <pages> pages 457-464, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: If the user changes the view definition, the system must be able to recompute the view fast in order to keep the application interactive. An interface for such queries in a real estate system is reported in [WS93], where they are called dynamic queries [AWS93]. Data archaeology <ref> [BST + 92, BST + 93] </ref> is another application where an archaeologist tries to discover rules about data by formulating queries, looking at the results of the query, and then changing the query iteratively as the archaeologist's understanding improves.
Reference: [BST + 93] <author> Ronald J. Brachman, et al. </author> <title> Integrated support for data archaeology. </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 2 </volume> <pages> 159-185, </pages> <year> 1993. </year>
Reference-contexts: If the user changes the view definition, the system must be able to recompute the view fast in order to keep the application interactive. An interface for such queries in a real estate system is reported in [WS93], where they are called dynamic queries [AWS93]. Data archaeology <ref> [BST + 92, BST + 93] </ref> is another application where an archaeologist tries to discover rules about data by formulating queries, looking at the results of the query, and then changing the query iteratively as the archaeologist's understanding improves.
Reference: [CKPS95] <author> Surajit Chaudhuri, Ravi Krishnamurthy, Spyros Potamianos, and Kyuseok Shim. </author> <title> Optimizing queries with materialized views. </title> <booktitle> To appear in Proceedings of International Conference on Data Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: They also have the idea of augmented views where each view is extended with keys of the underlying base relations. <ref> [CKPS95] </ref> tackle the broader problem of trying to answer any query given any set of view definitions. Because they look at this more general problem, they have a much larger search space (exponential size) in their optimization algorithm. We have a simple small set of extra plans to check.
Reference: [DJLS95] <author> Shaul Dar, H.V. Jagadish, Alon Levy, and Divesh Srivastava. </author> <title> Answering SQL queries with aggregation using views. </title> <type> AT&T technical report, </type> <year> 1995. </year>
Reference-contexts: We have a simple small set of extra plans to check. For the less general problem we can do more, and do it more efficiently. [RSU95, LMSS95] also tackle the problem of answering a query given any set of view definitions. They do not consider aggregate queries. Subsequently, <ref> [DJLS95, GHQ95] </ref> discuss how to answer aggregate queries using materialized aggregate views.
Reference: [GHQ95] <author> Ashish Gupta, Venky Harinarayan, and Dallan Quass. </author> <title> Aggregate-Query Processing in Data Warehousing Environments. </title> <booktitle> In VLDB, </booktitle> <year> 1995. </year>
Reference-contexts: We have a simple small set of extra plans to check. For the less general problem we can do more, and do it more efficiently. [RSU95, LMSS95] also tackle the problem of answering a query given any set of view definitions. They do not consider aggregate queries. Subsequently, <ref> [DJLS95, GHQ95] </ref> discuss how to answer aggregate queries using materialized aggregate views.
Reference: [GMR95] <author> Ashish Gupta, Inderpal Singh Mumick, and Kenneth A. Ross. </author> <title> Adapting materialized views after redefinitions. </title> <booktitle> In SIGMOD, </booktitle> <pages> pages 211-222, </pages> <year> 1995. </year>
Reference: [GMS93] <author> Ashish Gupta, Inderpal Singh Mumick, and V. S. Subrahmanian. </author> <title> Maintaining views incrementally. </title> <booktitle> In SIGMOD, </booktitle> <pages> pages 157-167, </pages> <year> 1993. </year>
Reference: [GSUW94] <author> Ashish Gupta, Yehoshua Sagiv, Jeffrey D. Ullman, and Jennifer Widom. </author> <title> Constraint Checking with Partial Information. </title> <booktitle> In PODS, </booktitle> <pages> pages 45-55, </pages> <year> 1994. </year>
Reference-contexts: All attributes in the old view that were derived or equated to attributes from relation R are used as join attributes. The view is adaptable if queries Q1 and Q2 are equivalent <ref> [Ull89, GSUW94] </ref>. The above test is similar to tests in [RSU95, LMSS95] to check if a query can be answered using views. Changing the DISTINCT Qualifier. Suppose that a user adds a DISTINCT qualifier to the definition of a view that did not previously have one.
Reference: [LMS94] <author> Alon Levy, Inderpal Singh Mumick, and Yehoshua Sagiv. </author> <title> Query optimization by predicate movearound. </title> <editor> In Bocca et al. </editor> <booktitle> VLDB, </booktitle> <pages> pages 96-107, </pages> <year> 1994. </year>
Reference: [LMSS95] <author> Alon Y. Levy, Alberto O. Mendelzon, Yehoshua Sagiv, and Divesh Srivastava. </author> <title> Answering queries using views. </title> <note> To appear in PODS, </note> <year> 1995. </year>
Reference-contexts: Because they look at this more general problem, they have a much larger search space (exponential size) in their optimization algorithm. We have a simple small set of extra plans to check. For the less general problem we can do more, and do it more efficiently. <ref> [RSU95, LMSS95] </ref> also tackle the problem of answering a query given any set of view definitions. They do not consider aggregate queries. Subsequently, [DJLS95, GHQ95] discuss how to answer aggregate queries using materialized aggregate views. <p> All attributes in the old view that were derived or equated to attributes from relation R are used as join attributes. The view is adaptable if queries Q1 and Q2 are equivalent [Ull89, GSUW94]. The above test is similar to tests in <ref> [RSU95, LMSS95] </ref> to check if a query can be answered using views. Changing the DISTINCT Qualifier. Suppose that a user adds a DISTINCT qualifier to the definition of a view that did not previously have one.
Reference: [LY85] <author> P. A. Larson and H.Z. Yang. </author> <title> Computing queries from derived relations. </title> <booktitle> In VLDB , pages 259-269, </booktitle> <year> 1985. </year>
Reference-contexts: This corresponds to evaluating a new Classic query (the new concept), using information in several materialized views (the old concepts). Classic has been used for data archaeology. <ref> [LY85, YL87] </ref> look at the question of answering queries using cached results or materialized views. [LY85, YL87] show how to transform an SPJ (select-project-join) query so that it is expressed completely using a given set of views, without any reference to the base relations. <p> This corresponds to evaluating a new Classic query (the new concept), using information in several materialized views (the old concepts). Classic has been used for data archaeology. <ref> [LY85, YL87] </ref> look at the question of answering queries using cached results or materialized views. [LY85, YL87] show how to transform an SPJ (select-project-join) query so that it is expressed completely using a given set of views, without any reference to the base relations.
Reference: [MPR90] <author> I. S. Mumick, H. Pirahesh, and R. Ramakrishnan. </author> <title> The magic of duplicates and aggregates. </title> <booktitle> In VLDB, </booktitle> <year> 1990. </year>
Reference: [RSU95] <author> Anand Rajaraman, Yehoshua Sagiv, and Jeffrey Ullman. </author> <title> Answering queries using templates with binding patterns. </title> <note> To appear in PODS, </note> <year> 1995. </year>
Reference-contexts: Because they look at this more general problem, they have a much larger search space (exponential size) in their optimization algorithm. We have a simple small set of extra plans to check. For the less general problem we can do more, and do it more efficiently. <ref> [RSU95, LMSS95] </ref> also tackle the problem of answering a query given any set of view definitions. They do not consider aggregate queries. Subsequently, [DJLS95, GHQ95] discuss how to answer aggregate queries using materialized aggregate views. <p> All attributes in the old view that were derived or equated to attributes from relation R are used as join attributes. The view is adaptable if queries Q1 and Q2 are equivalent [Ull89, GSUW94]. The above test is similar to tests in <ref> [RSU95, LMSS95] </ref> to check if a query can be answered using views. Changing the DISTINCT Qualifier. Suppose that a user adds a DISTINCT qualifier to the definition of a view that did not previously have one.
Reference: [TPC95] <editor> TPC-D Benchmark Standard Specification (Revision 1.0), </editor> <month> May, </month> <year> 1995. </year>
Reference-contexts: The experiments were run at night when the load on the machine from other users was small. In order to get rid of transient fluctuations, we repeated the experiments two or three times and took the minimal time. The sample tables we used are from the TPC-D benchmark <ref> [TPC95] </ref>. Most of the view definitions come directly from TPC-D queries. Considering the fact that TPC-D queries are very complex, we also designed some simpler test cases. Some of the techniques have both in-place and non-in-place versions. Rematerialization is done by using the "select into" clause that doesn't perform logging.
Reference: [TSI94] <author> Odysseas G. Tsatalos, Marvin H. Solomon, and Yannis E. Ioannidis. </author> <title> The GMAP: A versatile tool for physical data independence. </title> <editor> In Bocca et al. </editor> <booktitle> VLDB, </booktitle> <pages> pages 367-378, </pages> <year> 1994. </year>
Reference-contexts: They do not consider aggregate queries. Subsequently, [DJLS95, GHQ95] discuss how to answer aggregate queries using materialized aggregate views. Their results subsume the results presented in Section 4. <ref> [TSI94] </ref> focuses on the broader issue of enhancing physical data independence using "gmaps." They use a logical schema and then specify the underlying physical storage structures as results of "gmap" queries on the logical schema.
Reference: [Ull89] <author> Jeffrey D. Ullman. </author> <booktitle> Principles of Database and Knowledge-Base Systems, </booktitle> <volume> Volume 2. </volume> <publisher> Computer Science Press, </publisher> <year> 1989. </year> <month> 36 </month>
Reference-contexts: All attributes in the old view that were derived or equated to attributes from relation R are used as join attributes. The view is adaptable if queries Q1 and Q2 are equivalent <ref> [Ull89, GSUW94] </ref>. The above test is similar to tests in [RSU95, LMSS95] to check if a query can be answered using views. Changing the DISTINCT Qualifier. Suppose that a user adds a DISTINCT qualifier to the definition of a view that did not previously have one.
Reference: [WS93] <author> Christopher Williamson and Ben Shneiderman. </author> <title> The Dynamic HomeFinder: evaluating Dynamic Queries in a real- estate information exploration system. In Ben Shneiderman, editor, Sparks of Innovation in Human-Computer Interaction. </title> <publisher> Ablex Publishing Corp, </publisher> <year> 1993. </year>
Reference-contexts: If the user changes the view definition, the system must be able to recompute the view fast in order to keep the application interactive. An interface for such queries in a real estate system is reported in <ref> [WS93] </ref>, where they are called dynamic queries [AWS93]. Data archaeology [BST + 92, BST + 93] is another application where an archaeologist tries to discover rules about data by formulating queries, looking at the results of the query, and then changing the query iteratively as the archaeologist's understanding improves.
Reference: [YL87] <author> H. Z. Yang and P. A. Larson. </author> <title> Query transformation for PSJ-queries. </title> <booktitle> In VLDB, </booktitle> <pages> pages 245-254, </pages> <year> 1987. </year>
Reference-contexts: This corresponds to evaluating a new Classic query (the new concept), using information in several materialized views (the old concepts). Classic has been used for data archaeology. <ref> [LY85, YL87] </ref> look at the question of answering queries using cached results or materialized views. [LY85, YL87] show how to transform an SPJ (select-project-join) query so that it is expressed completely using a given set of views, without any reference to the base relations. <p> This corresponds to evaluating a new Classic query (the new concept), using information in several materialized views (the old concepts). Classic has been used for data archaeology. <ref> [LY85, YL87] </ref> look at the question of answering queries using cached results or materialized views. [LY85, YL87] show how to transform an SPJ (select-project-join) query so that it is expressed completely using a given set of views, without any reference to the base relations.
References-found: 20

