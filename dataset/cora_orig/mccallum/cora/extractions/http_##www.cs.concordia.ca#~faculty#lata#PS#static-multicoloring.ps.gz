URL: http://www.cs.concordia.ca/~faculty/lata/PS/static-multicoloring.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/lata/papers.html
Root-URL: http://www.cs.concordia.ca
Email: email: lata@cs.concordia.ca,  email: sunil@calypso.unl.edu,  
Phone: FAX (514) 848-2830.  FAX (402) 472-7767.  
Title: Static Frequency Assignment in Cellular Networks  
Author: Lata Narayanan Sunil Shende 
Keyword: Graph multicoloring, approximation algorithms, distributed algorithms, frequency assignment, cellular networks.  
Note: Research supported by NSERC, Canada.  This research was conducted at Concordia University during the summer of 1996, with partial support from NSERC, Canada.  
Address: Montreal, Quebec, Canada, H3G 1M8.  Lincoln, NE 68588, USA.  
Affiliation: Department of Computer Science, Concordia University,  Department of Computer Science and Engg., University of Nebraska-Lincoln,  
Date: October 15, 1997  
Abstract: A cellular network is generally modeled as a subgraph of the triangular lattice. In the static frequency assignment problem, each vertex of the graph is a base station in the network, and has associated with it an integer weight that represents the number of calls that must be served at the vertex by assigning distinct frequencies per call. The edges of the graph model interference constraints for frequencies assigned to neighboring stations. The static frequency assignment problem can be abstracted as a graph multicoloring problem. We describe an efficient algorithm to optimally multicolor any weighted even or odd length cycle representing a cellular network. This result is further extended to any outerplanar graph. For the problem of multicoloring an arbitrary connected subgraph of the triangular lattice, we demonstrate an approximation algorithm which guarantees that no more than 4=3 times the minimum number of required colors are used. Further, we show that this algorithm can be implemented in a distributed manner, where each station needs to have knowledge only of the weights at a small neighborhood. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Dimitrijevic and J. Vucetic. </author> <title> Design and performance analysis of algorithms for channel allocation in cellular networks. </title> <journal> IEEE Transactions on Vehicular Technology, </journal> <volume> 42(4) </volume> <pages> 526-534, </pages> <year> 1993. </year>
Reference-contexts: while there is a vast literature on algorithms for frequency assignment on graphs (especially hexagon graphs) that claim to use few colors, generally there are no proven bounds on the performance of the proposed algorithms, in terms of the number of colors used in relation to the weighted chromatic number <ref> [1, 5, 6, 9, 10] </ref>. We note here two exceptions. A well-known algorithm, sometimes referred to as Fixed Allocation, uses the fact that the underlying graph can be 3-colored. The algorithm uses three fixed sets of colors, one for each base color. <p> a multicoloring of G with span , it follows that: O (G) D (G): We will assume without loss of generality that any palette of available colors can be suitably ordered or partitioned; in particular, we will often assume that vertices 4 are assigned colors from the circularly ordered interval <ref> [1; M ] </ref> = f1; 2; : : : ; M g, where M 1 is a positive integer that depends on the particular graph under consideration. <p> Then all maximal cliques of G being edges, D G = D [2] G is the maximum weight of an edge in the cycle. We observe that a very simple greedy strategy suffices to multicolor G with the color palette <ref> [1; D G ] </ref>. The idea is to assign for 1 i m, the colors [1; w 2i1 ] to the odd-numbered vertex u 2i1 and the colors [D G w 2i + 1; D G ] to the even-numbered vertex u 2i . <p> We observe that a very simple greedy strategy suffices to multicolor G with the color palette [1; D G ]. The idea is to assign for 1 i m, the colors <ref> [1; w 2i1 ] </ref> to the odd-numbered vertex u 2i1 and the colors [D G w 2i + 1; D G ] to the even-numbered vertex u 2i . <p> The vertices of the cycle are now colored as follows: 6 1. Vertices u 1 through u 2k are assigned contiguous colors in a cyclic manner from the palette <ref> [1; D 0 G ] </ref>. Specifically, for 1 j 2k, vertex u j is assigned the colors [(1 + i=1 j X w i ]; cyclically. <p> Vertices u 2k+1 through u 2m+1 are colored based on their parity (as in the even-cycle algorithm). In particular, for 2k +1 i 2m+1, the vertex u i is assigned the colors <ref> [1; w i ] </ref> if i is even, or the colors [D 0 0 G ] if i is odd. Again, this ensures that the path u 2k+1 ; u 2k+2 ; : : : ; u 2m+1 is properly multicolored. <p> Again, this ensures that the path u 2k+1 ; u 2k+2 ; : : : ; u 2m+1 is properly multicolored. Since vertex u 1 has the colors <ref> [1; w 1 ] </ref> and vertex u 2m+1 the colors [D 0 0 the edge (u 1 ; u 2m+1 ) is also properly multicolored. <p> For the last five vertices, we assign colors as in a bipartite graph, from the two ends of the interval <ref> [1; 5] </ref>. <p> Start with a base coloring of G so that every vertex gets base color red, blue or green. With each base color, we associate a class of M hues identified with the interval <ref> [1; M ] </ref>. In addition, we have at our disposal a class of auxiliary purple hues, again identified with the interval [1; M ]. The entire collection of 4M distinct hues forms our color palette. <p> With each base color, we associate a class of M hues identified with the interval <ref> [1; M ] </ref>. In addition, we have at our disposal a class of auxiliary purple hues, again identified with the interval [1; M ]. The entire collection of 4M distinct hues forms our color palette. <p> This distinction is critical to each of the the five phases below: Phase 1: Every vertex v is assigned the first w (v) hues from its base color class, in particular, the hues <ref> [1; minfw (v); M g] </ref>. All the light vertices thus get completely colored and are deleted from the graph.
Reference: [2] <author> W. K. Hale. </author> <title> Frequency assignment: Theory and applications. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 68(12) </volume> <pages> 1497-1514, </pages> <year> 1980. </year>
Reference-contexts: Two distinct calls in cells that are a distance i apart in the underlying graph must be assigned frequencies that differ by c i in the frequency spectrum. Hale <ref> [2] </ref> discusses many generalizations and versions of the frequency assignment problem. We formulate our problem under the simplest constraints, viz. when c 0 = c 1 = 1 and c i = 0, i 2. <p> Note that the weight of any maximal clique of G is a lower bound on O (G). Let D <ref> [2] </ref> D G denote the respective maxima over the weights of edges and triangles in G, and define D G = maxfD [2] [3] G g. <p> Note that the weight of any maximal clique of G is a lower bound on O (G). Let D <ref> [2] </ref> D G denote the respective maxima over the weights of edges and triangles in G, and define D G = maxfD [2] [3] G g. <p> There are two cases to consider depending on whether n, the number of vertices on the cycle, is even or odd. Suppose that n = 2m, i.e. the graph consists of an even length cycle. Then all maximal cliques of G being edges, D G = D <ref> [2] </ref> G is the maximum weight of an edge in the cycle. We observe that a very simple greedy strategy suffices to multicolor G with the color palette [1; D G ]. <p> O (G) = 5 in this case). 5 Definition 3.1 Let G = (V; E; w) be an odd-length simple cycle, with vertices labeled u 1 , u 2 , : : :, u 2m+1 , m 1, in clockwise order. We define D G = maxfD <ref> [2] </ref> P 2m+1 m Theorem 3.2 Let G = (V; E; w) be a cycle of odd length n = 2m + 1 3. Then O (G) = D G and G can be optimally multicolored with exactly D 0 G colors. <p> Then O (G) = D G and G can be optimally multicolored with exactly D 0 G colors. Further, the multicoloring can be obtained in time O (n). Proof. It is clear that D <ref> [2] </ref> G is a lower bound on O (G); we establish that d 2m+1 m e, and hence D 0 G , is a lower bound on O (G). <p> Specifically, for 1 j 2k, vertex u j is assigned the colors [(1 + i=1 j X w i ]; cyclically. By construction, this ensures that the path u 1 ; u 2 ; : : : ; u 2k is properly multicolored since D 0 <ref> [2] </ref> 2. Vertices u 2k+1 through u 2m+1 are colored based on their parity (as in the even-cycle algorithm). <p> For example, consider again the hexagon graph G shown in Figure 1, where every vertex is given the weight k, for some integer k 2. While D [3] <ref> [2] </ref> G = 2k for the graph, we know from Theorem 3.2 that O (G) = 9k=4. We choose a 9-cycle because it is the smallest odd cycle that can be an induced subgraph of the triangular lattice. <p> most 9D [3] G =8 colors remains an intriguing open problem. 21 An interesting avenue for future research is the generalized version of the problem, where the frequencies assigned at a particular vertex or at adjacent vertices are required not merely to be different, but to be far enough apart <ref> [2] </ref>. Finally, the dynamic version of the problem involves changing weights at vertices.
Reference: [3] <author> F. Harary. </author> <title> Graph Theory. </title> <publisher> Addison-Wesley, </publisher> <year> 1969. </year>
Reference-contexts: Note that the weight of any maximal clique of G is a lower bound on O (G). Let D [2] D G denote the respective maxima over the weights of edges and triangles in G, and define D G = maxfD [2] <ref> [3] </ref> G g. <p> In this section, we assume we are given an outerplanar graph G with a fixed planar embedding having the above property. We use the following well-known characterization of outerplanar graphs. Fact 4.1 <ref> [3] </ref> A graph is outerplanar if and only if it contains no subgraph homeomorphic from K 4 or K (2; 3). <p> Since a hexagon graph may contain an odd cycle 11 as an induced subgraph, it follows as a consequence of Theorem 3.2 that D <ref> [3] </ref> maximum weight taken over all triangles, is not always a tight bound. For example, consider again the hexagon graph G shown in Figure 1, where every vertex is given the weight k, for some integer k 2. While D [3] [2] G = 2k for the graph, we know from <p> it follows as a consequence of Theorem 3.2 that D <ref> [3] </ref> maximum weight taken over all triangles, is not always a tight bound. For example, consider again the hexagon graph G shown in Figure 1, where every vertex is given the weight k, for some integer k 2. While D [3] [2] G = 2k for the graph, we know from Theorem 3.2 that O (G) = 9k=4. We choose a 9-cycle because it is the smallest odd cycle that can be an induced subgraph of the triangular lattice. <p> We choose a 9-cycle because it is the smallest odd cycle that can be an induced subgraph of the triangular lattice. This shows that any algorithm to color hexagon graphs must use at least 9D <ref> [3] </ref> G =8 colors on some graphs G with triangle bound D [3] G . In fact, we demonstrate an efficient approximation algorithm that can multicolor any hexagon graph using at most 4D [3] G =3 colors (and hence, at most 4O (G)=3 colors). <p> We choose a 9-cycle because it is the smallest odd cycle that can be an induced subgraph of the triangular lattice. This shows that any algorithm to color hexagon graphs must use at least 9D <ref> [3] </ref> G =8 colors on some graphs G with triangle bound D [3] G . In fact, we demonstrate an efficient approximation algorithm that can multicolor any hexagon graph using at most 4D [3] G =3 colors (and hence, at most 4O (G)=3 colors). <p> This shows that any algorithm to color hexagon graphs must use at least 9D <ref> [3] </ref> G =8 colors on some graphs G with triangle bound D [3] G . In fact, we demonstrate an efficient approximation algorithm that can multicolor any hexagon graph using at most 4D [3] G =3 colors (and hence, at most 4O (G)=3 colors). Without loss of generality, we assume that G is connected, since disconnected components of G can be independently colored without any color conflicts. <p> This priority scheme is used in phases 2 and 3 to select, in each case, a suitable subset of vertices for partial coloring. We illustrate our algorithm with a running example shown in Figure 4, a graph G for which 3M = D <ref> [3] </ref> G can easily be verified to be 18. Hence, the color palette consists of 24 colors equally divided among the red, blue, green and purple hues. A vertex v 2 G is defined to be light if w (v) M and to be heavy otherwise. <p> The following result is immediate: Theorem 5.1 An approximate multicoloring that uses no more than 4D <ref> [3] </ref> G =3 colors for any hexagon graph G = (V; E; w) can be efficiently computed in linear time. 6 A distributed algorithm for approximate mul ticoloring The algorithm given in the previous section has the additional property that it can be implemented in a completely distributed manner. <p> This means each processor knows three bits corresponding to whether it has even or odd parity along each of the 3 directional axes. * The value of D <ref> [3] </ref> G is known; this also implies that the division of base color classes among processors is known. Additionally, this implies that every vertex has access to a known set of M purple hues if needed. <p> Depending on whether it is an even or odd vertex along this axis, it assigns itself the necessary hues from the beginning or end of the set of purple hues, as in the coloring for bipartite graphs. Theorem 6.1 An approximate multicoloring that uses no more than 4D <ref> [3] </ref> G =3 colors for any hexagon graph G = (V; E; w), can be efficiently computed in constant time in a completely distributed manner, after an initial constant time communication protocol where each processor exchanges five messages with each of its neighbors. 7 Discussion In this paper, we have cast <p> For some particular induced subgraphs of hexagon graphs, that is, cycles and outerplanar graphs, we show efficient algorithms for multicoloring them using an optimal number of colors. In Section 5, we describe a multicoloring algorithm that uses at most 4D <ref> [3] </ref> G =3 colors where D [3] G , the maximum weight on any 3-clique in G, is a trivial lower bound on the minimum number of colors required. We showed also a hexagon graph that requires 9D [3] G =8 colors. <p> For some particular induced subgraphs of hexagon graphs, that is, cycles and outerplanar graphs, we show efficient algorithms for multicoloring them using an optimal number of colors. In Section 5, we describe a multicoloring algorithm that uses at most 4D <ref> [3] </ref> G =3 colors where D [3] G , the maximum weight on any 3-clique in G, is a trivial lower bound on the minimum number of colors required. We showed also a hexagon graph that requires 9D [3] G =8 colors. <p> Section 5, we describe a multicoloring algorithm that uses at most 4D <ref> [3] </ref> G =3 colors where D [3] G , the maximum weight on any 3-clique in G, is a trivial lower bound on the minimum number of colors required. We showed also a hexagon graph that requires 9D [3] G =8 colors. Determining an exact bound on O (G), the weighted chromatic number of an arbitrary hexagon graph is NP-hard; our results do establish that for all hexagon graphs G, O (G) 4D G =3. <p> Whether or not there is an approximation algorithm for hexagon graphs which always uses at most 9D <ref> [3] </ref> G =8 colors remains an intriguing open problem. 21 An interesting avenue for future research is the generalized version of the problem, where the frequencies assigned at a particular vertex or at adjacent vertices are required not merely to be different, but to be far enough apart [2].
Reference: [4] <author> J. Janssen, K. Kilakos, and O. Marcotte. </author> <title> Fixed preference frequency allocation for cellular telephone systems. </title> <type> Unpublished manuscript, </type> <month> April </month> <year> 1995. </year>
Reference-contexts: It is easy to show that this algorithm could use as many as 3 times the number of required colors. Janssen et. al. <ref> [4] </ref> propose a different algorithm called Fixed Preference Allocation that is guaranteed to use no more than 3=2 times the minimum number of colors required. In the next section, we formally define some basic terminology and problems. In Section 3, we present an optimal algorithm for multicoloring any cycle. <p> By construction, O (G) = D G and the simple parity-based algorithm thus provides an optimal multicoloring of G. We note that a very similar idea was already used in the cellular network literature <ref> [9, 4] </ref>, but it was only applied to networks consisting of simple paths (it is easy to see that this strategy works in general for any bipartite graph).
Reference: [5] <author> T. Kahwa and N. Georganas. </author> <title> A hybrid channel assignment scheme in large-scale cellular-structured mobile communication systems. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 4 </volume> <pages> 432-438, </pages> <year> 1978. </year>
Reference-contexts: while there is a vast literature on algorithms for frequency assignment on graphs (especially hexagon graphs) that claim to use few colors, generally there are no proven bounds on the performance of the proposed algorithms, in terms of the number of colors used in relation to the weighted chromatic number <ref> [1, 5, 6, 9, 10] </ref>. We note here two exceptions. A well-known algorithm, sometimes referred to as Fixed Allocation, uses the fact that the underlying graph can be 3-colored. The algorithm uses three fixed sets of colors, one for each base color. <p> For the last five vertices, we assign colors as in a bipartite graph, from the two ends of the interval <ref> [1; 5] </ref>.
Reference: [6] <author> S. Kim and S. L. Kim. </author> <title> A two-phase algorithm for frequency assignment in cellular mobile systems. </title> <journal> IEEE Transactions on Vehicular Technology, </journal> <year> 1994. </year>
Reference-contexts: while there is a vast literature on algorithms for frequency assignment on graphs (especially hexagon graphs) that claim to use few colors, generally there are no proven bounds on the performance of the proposed algorithms, in terms of the number of colors used in relation to the weighted chromatic number <ref> [1, 5, 6, 9, 10] </ref>. We note here two exceptions. A well-known algorithm, sometimes referred to as Fixed Allocation, uses the fact that the underlying graph can be 3-colored. The algorithm uses three fixed sets of colors, one for each base color.
Reference: [7] <author> C. McDiarmid and B. Reed. </author> <title> Channel assignment and weighted coloring. </title> <note> submitted for publication, </note> <year> 1997. </year>
Reference-contexts: Even for graphs with a regular structure such as those considered in the paper, the problem of determining O (G) is non-trivial. In fact, it has been established only recently that the problem is NP-complete <ref> [7] </ref>, and hence it is unlikely that a polynomial time algorithm for computing O (G) can be devised. Naturally, it is of interest to study approximation algorithms for the problem. <p> In Section 5, we address the question of multicoloring an arbitrary hexagon graph, and present an 3 efficient approximation algorithm with a performance guarantee of within 4=3 of the optimal. We note that in recent work, McDiarmid and Reed <ref> [7] </ref> have demonstrated independently, another 4=3-approximate algorithm for the same problem considered here. Finally, in Section 6, we show how to implement the above algorithm in a distributed manner.
Reference: [8] <author> K. R. and V. Ramachandran. </author> <title> Parallel Algorithms for Shared Memory Machines, </title> <booktitle> chapter 17, </booktitle> <pages> pages 871-942. </pages> <publisher> MIT Press, </publisher> <year> 1990. </year> <month> 22 </month>
Reference-contexts: We start by describing a multicoloring for biconnected outerplanar graphs, which proceeds by using an ear decomposition of the outerplanar graph, and coloring nodes in each ear in sequence. 7 Definition 4.2 <ref> [8] </ref> An ear decomposition D = [P 0 ; : : : ; P k1 ] of an undirected graph G = (V; E) is a partition of E into an ordered collection of edge disjoint simple paths P 0 ; : : : P k1 called ears, such that P <p> An ear with no internal vertices is called a trivial ear. Every biconnected graph is known to have an ear decomposition <ref> [8] </ref>. Our algorithm for multicoloring outerplanar graphs exploits a particular type of an ear decomposition of such graphs.
Reference: [9] <author> P. Raymond. </author> <title> Performance analysis of cellular networks. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 39(12) </volume> <pages> 1787-1793, </pages> <year> 1991. </year>
Reference-contexts: while there is a vast literature on algorithms for frequency assignment on graphs (especially hexagon graphs) that claim to use few colors, generally there are no proven bounds on the performance of the proposed algorithms, in terms of the number of colors used in relation to the weighted chromatic number <ref> [1, 5, 6, 9, 10] </ref>. We note here two exceptions. A well-known algorithm, sometimes referred to as Fixed Allocation, uses the fact that the underlying graph can be 3-colored. The algorithm uses three fixed sets of colors, one for each base color. <p> By construction, O (G) = D G and the simple parity-based algorithm thus provides an optimal multicoloring of G. We note that a very similar idea was already used in the cellular network literature <ref> [9, 4] </ref>, but it was only applied to networks consisting of simple paths (it is easy to see that this strategy works in general for any bipartite graph).
Reference: [10] <author> W. Wang and C. Rushforth. </author> <title> An adaptive local-search algorithm for the channel-assignment problem. </title> <type> Technical Report, </type> <month> August </month> <year> 1995. </year> <month> 23 </month>
Reference-contexts: while there is a vast literature on algorithms for frequency assignment on graphs (especially hexagon graphs) that claim to use few colors, generally there are no proven bounds on the performance of the proposed algorithms, in terms of the number of colors used in relation to the weighted chromatic number <ref> [1, 5, 6, 9, 10] </ref>. We note here two exceptions. A well-known algorithm, sometimes referred to as Fixed Allocation, uses the fact that the underlying graph can be 3-colored. The algorithm uses three fixed sets of colors, one for each base color.
References-found: 10

