URL: http://www.research.microsoft.com/~ymwang/papers/ISSRE-1997.ps
Refering-URL: http://www.research.microsoft.com/~ymwang/papers/ISSRE97CR.htm
Root-URL: http://www.research.microsoft.com
Email: fkpv,ymwangg@research.att.com  femerald,yeng@bell-labs.com  
Title: Xept: A Software Instrumentation Method for Exception Handling  
Author: Kiem-Phong Vo and Yi-Min Wang P. Emerald Chung and Yennun Huang 
Address: 180 Park Avenue Florham Park, NJ 07932  600 Mountain Avenue Murray Hill, NJ 07974  
Affiliation: AT&T Labs, Research  Bell Labs, Lucent Technologies  
Abstract: Modern software systems are often built from existing library components. A common problem is how to fix bugs when source code is not available. Xept is an instrumentation language and tool that can be used to add to object code the ability to detect, mask, recover and propagate exceptions from library functions. This helps to alleviate or avoid a large class of errors resulting from function misuses. Examples will be given to show applications of Xept in actual software systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. E. Ammann and J. C. Knight. </author> <title> Data diversity: An approach to software fault-tolerance. </title> <booktitle> In Proc. IEEE Fault-Tolerant Computing Symp., </booktitle> <pages> pages 122-126, </pages> <year> 1987. </year>
Reference-contexts: The second hbeat () turns off the timer upon successful call completion. 3.2. Exception Masking Exception masking hides exceptions from applications. It requires either application-specific information for fixing exceptions or certain general software fault tolerance approaches such as design diversity [15], data diversity <ref> [1] </ref>, or environment diversity [22] to bypass them. We distinguish three types of exception masking: retry, alternate, and fixing. 3.2.1 Masking exceptions through retry Certain exceptions are due to transient problems in the execution environment and can disappear in a subsequent retry. <p> For example, if a function works well in most cases, but may fail for some ranges of input values, we can try to transform the input values, call the function, and then inverse-transform the return value. This is essentially the data diversity approach described by Ammann and Knight <ref> [1] </ref>. As another example. If a client process tries to talk to a server process, but the connection is broken because the server process have crashed and then restarted, then the client can first try to reconnect before talking. 3.3.
Reference: [2] <author> P.-Y. Chung, Y. Huang, S. Yajnik, G. S. Fowler, K. P. Vo, and Y. M. Wang. </author> <title> Checkpointing in CosMiC: A User-level Process Migration Environment. </title> <booktitle> In Proc. Pacific Rim International Symposium on Fault-Tolerant Systems, </booktitle> <month> Dec </month> <year> 1997. </year>
Reference-contexts: A different style of exception masking can be done with checkpoint and restart. We developed a system called CosMiC <ref> [2] </ref> that supports automatic job submission and migration on a network of machines. Many users routinely use CosMiC to execute long-running programs with unpredictable varying memory usage. Valuable work may be lost if such a program simply exits upon an out-of-memory exception.
Reference: [3] <author> F. Cristian. </author> <title> Exception handling and tolerance of software faults. In Software Fault-Tolerance, M.R. </title> <booktitle> Lyu Editor, </booktitle> <pages> pages 81-107. </pages> <publisher> John Wiley & Sons, </publisher> <year> 1995. </year>
Reference-contexts: By providing an indirection between application code and library functions, Xept enables a separation between service-providing and exception-handling code, a tradition with many examples in language design [18], operating system [16, 17], and fault-tolerance research <ref> [3, 5] </ref>. 2. Exception Handling Using Xept 2.1. Motivation styles. Part (a) presents a small code fragment using the standard C library functions fopen () and fgets () to open a file datafile and read a line of text into array buf. <p> Part (b) shows how to modify the makefile to include a call to the command xept to generate interception code and mangle main.o, then link everything together to build server. 3. Exception handling applications Exceptions are classifiable into four categories <ref> [3] </ref>: exception detection, exception masking, exception propagation, and consistent state recovery. In practice, effective exception handling usually involves two or more categories. This section discusses Xept in context of this classification. Where applicable, examples from actual projects will be given. 3.1.
Reference: [4] <author> A. Eustace and A. Srivastava. </author> <title> ATOM: A Flexible Interface for Building High Performance Program Analysis Tools. </title> <booktitle> In Proceedings of 1995 USENIX Conference, </booktitle> <year> 1995. </year>
Reference-contexts: If none of the available alternates succeeds, The intercepted f2 () propagates the exception upwards by returning -1 to its calling function. 4. Related Work ATOM <ref> [4] </ref> is a general code instrumentation tool. It has been used to implement applications such as instruction profiler, cache simulator, etc. It provides a mechanism for users to replace a procedure with a different procedure, and so is functionally similar to our tool Xmangler.
Reference: [5] <author> J.-C. Fabre, V. Nicomette, T. Perennou, R. J. Stroud, and Z. Wu. </author> <title> Implementing fault tolerant applications using reflective object-oriented programming. </title> <booktitle> In Proc. IEEE Fault-Tolerant Computing Symp., </booktitle> <pages> pages 489-498, </pages> <year> 1995. </year>
Reference-contexts: By providing an indirection between application code and library functions, Xept enables a separation between service-providing and exception-handling code, a tradition with many examples in language design [18], operating system [16, 17], and fault-tolerance research <ref> [3, 5] </ref>. 2. Exception Handling Using Xept 2.1. Motivation styles. Part (a) presents a small code fragment using the standard C library functions fopen () and fgets () to open a file datafile and read a line of text into array buf.
Reference: [6] <author> R. Hastings and R. Joyce. Purify: </author> <title> Fast Detection of Memory Leaks and Access Errors. </title> <booktitle> In Proceedings of the Winter 1992 Usenix Conference, </booktitle> <pages> pages 125-136. </pages> <publisher> USENIX Association, </publisher> <year> 1992. </year>
Reference-contexts: For example, C code sometimes omits checking exceptions from memory allocation. Such code works until memory is exhausted then causes severe errors such as data corruption and/or program abortion. These memory bugs are not hard to detect using modern tools such as Purify <ref> [6] </ref> or Vmalloc [20]. However, without source code, it is not easy to fix them. Xept is a language and tool to help fix errors due to sloppy handling of exceptions from library functions.
Reference: [7] <author> Y. Huang and C. Kintala. </author> <title> Software implemented fault tolerance: Technologies and experience. </title> <booktitle> In Proc. IEEE Fault-Tolerant Computing Symp., </booktitle> <pages> pages 2-9, </pages> <year> 1993. </year>
Reference-contexts: Another detectable type of exception is shown in a telecommunication project in AT&T that builds an application to access a commercial database system. The database calls sometimes take too long or even get stuck because of deadlocks. The project would like to use a heartbeat mechanism <ref> [7] </ref> to detect the program hang state and restart the process. Since source code of the third party software library is not available, Xept is used to intercept database calls in this library and add heartbeats as shown in Figure 6.
Reference: [8] <author> J. J. Hunt, K.-P. Vo, and W. F. Tichy. </author> <title> An Empirical Study of Delta Algorithms. </title> <booktitle> In IEEE Soft. Config. and Maint. Workshop, </booktitle> <year> 1996. </year>
Reference-contexts: We next describe a novel approach to maintaining different versions of a software library, which has a similar flavor to design diversity. Vdelta <ref> [8] </ref> is a software library for data differencing and compression. When a new algorithm is invented that can compress data more efficiently and effectively, it is desirable that the new implementation can handle compressed data in the old format.
Reference: [9] <author> IONA Technologies. </author> <title> Orbix 2.1 Programming guide. </title> <year> 1996. </year>
Reference-contexts: In contrast, Xept aims at detecting and fixing exceptions so that they do not turn into more serious errors. In the distributed object computing framework, some CORBA implementations allow programmers to specify additional code to be executed before or after normal operations. For example, IONA Orbix <ref> [9] </ref> supports the creation of filters for exception handling, security checking, debugging, etc. 5. Conclusion We have described Xept, a language and tool to handle exceptions from function calls, based only on object code.
Reference: [10] <author> D. G. Korn and K.-P. Vo. SFIO: </author> <title> Safe/Fast String/File IO. </title> <booktitle> In Proc. of the Summer '91 Usenix Conference, </booktitle> <pages> pages 235-256. </pages> <publisher> USENIX, </publisher> <year> 1991. </year>
Reference-contexts: If the last action is empty, it is equivalent to the value zero. This type of exception handling construct is called Return-Proceed-Retry or RPR. It is commonly used for exception handling in software libraries based on the method/discipline architecture [19] such as Sfio <ref> [10] </ref> for buffered I/O, Vmalloc [20] for generalized memory allocation, and Cdt [21] for container data types. Two local variables xept call rv and xept handle rv are predefined for every wrapper function.
Reference: [11] <author> M.-Y. Lai and S. Y. Wang. </author> <title> Software fault insertion testing for fault tolerance. In Software Fault-Tolerance, M.R. </title> <booktitle> Lyu Editor, </booktitle> <pages> pages 315-333. </pages> <publisher> John Wiley & Sons, </publisher> <year> 1995. </year>
Reference-contexts: Such a specification can be used to automatically generate different types of code. For example, it is a simple matter to generate interception code to produce traces of function calls and their return values which would be useful for trace-driven performance testing. For stress testing and debugging <ref> [11] </ref>, such a specification can be used for automated error injection. We intend to pursue these applications of Xept further in future work. Xept is a conceptually simple tool that provides a convenient means to separate service-providing code from exception handling code.
Reference: [12] <institution> Parasoft. Insure++. </institution> <note> http://www.parasoft.com/insure/index.html. </note>
Reference-contexts: It provides a mechanism for users to replace a procedure with a different procedure, and so is functionally similar to our tool Xmangler. However, it does not specifically address the issue of exception handling by providing, for example, the retry capability. Commercial tools such as Purify [13] and Insure++ <ref> [12] </ref> also use software instrumentation methods to detect program errors. They are well known for instrumenting malloc () and free () to detect memory corruption and leaks. In contrast, Xept aims at detecting and fixing exceptions so that they do not turn into more serious errors.
Reference: [13] <institution> Pure Atria. Purify. </institution> <note> http://www.pureatria.com/products/purify/index.html. </note>
Reference-contexts: It provides a mechanism for users to replace a procedure with a different procedure, and so is functionally similar to our tool Xmangler. However, it does not specifically address the issue of exception handling by providing, for example, the retry capability. Commercial tools such as Purify <ref> [13] </ref> and Insure++ [12] also use software instrumentation methods to detect program errors. They are well known for instrumenting malloc () and free () to detect memory corruption and leaks. In contrast, Xept aims at detecting and fixing exceptions so that they do not turn into more serious errors.
Reference: [14] <author> B. Randell. </author> <title> System structure for software fault tolerance. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> SE-1(2):220-232, </volume> <year> 1975. </year>
Reference-contexts: Handling this kind of exceptions requires correcting potentially corrupted process state by either application-specific information or rollback recovery. Figure 10 shows how Xept can be used to provide consistent state recovery essentially the recovery block approach <ref> [14] </ref>. In this example, suppose function f2 () invokes f3 (), and a latent error in f2 () causes f3 () to raise an exception.
Reference: [15] <author> B. Randell and J. Xu. </author> <title> The evolution of the recovery block concept. In Software Fault-Tolerance, M.R. </title> <booktitle> Lyu Editor, </booktitle> <pages> pages 1-21. </pages> <publisher> John Wiley & Sons, </publisher> <year> 1995. </year>
Reference-contexts: The second hbeat () turns off the timer upon successful call completion. 3.2. Exception Masking Exception masking hides exceptions from applications. It requires either application-specific information for fixing exceptions or certain general software fault tolerance approaches such as design diversity <ref> [15] </ref>, data diversity [1], or environment diversity [22] to bypass them. We distinguish three types of exception masking: retry, alternate, and fixing. 3.2.1 Masking exceptions through retry Certain exceptions are due to transient problems in the execution environment and can disappear in a subsequent retry.
Reference: [16] <author> J. Richter. </author> <title> Advanced windows: The developer's guide to the Win32 API for Windows NT 3.5 and Windows 95. </title> <publisher> Microsoft Press, </publisher> <year> 1995. </year>
Reference-contexts: By providing an indirection between application code and library functions, Xept enables a separation between service-providing and exception-handling code, a tradition with many examples in language design [18], operating system <ref> [16, 17] </ref>, and fault-tolerance research [3, 5]. 2. Exception Handling Using Xept 2.1. Motivation styles. Part (a) presents a small code fragment using the standard C library functions fopen () and fgets () to open a file datafile and read a line of text into array buf.
Reference: [17] <author> M. Russinovich, Z. Segall, and D. P. Siewiorek. </author> <title> Application transparent fault management in fault-tolerant mach. </title> <booktitle> In Proc. IEEE Fault-Tolerant Computing Symp., </booktitle> <pages> pages 10-19, </pages> <year> 1993. </year>
Reference-contexts: By providing an indirection between application code and library functions, Xept enables a separation between service-providing and exception-handling code, a tradition with many examples in language design [18], operating system <ref> [16, 17] </ref>, and fault-tolerance research [3, 5]. 2. Exception Handling Using Xept 2.1. Motivation styles. Part (a) presents a small code fragment using the standard C library functions fopen () and fgets () to open a file datafile and read a line of text into array buf.
Reference: [18] <author> B. Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: By providing an indirection between application code and library functions, Xept enables a separation between service-providing and exception-handling code, a tradition with many examples in language design <ref> [18] </ref>, operating system [16, 17], and fault-tolerance research [3, 5]. 2. Exception Handling Using Xept 2.1. Motivation styles. Part (a) presents a small code fragment using the standard C library functions fopen () and fgets () to open a file datafile and read a line of text into array buf.
Reference: [19] <author> K.-P. Vo. </author> <title> Writing Reusable Libraries with Disciplines and Methods. In Practical Reusable UNIX Software. </title> <publisher> John Wiley & Sons, </publisher> <year> 1994. </year>
Reference-contexts: If the last action is empty, it is equivalent to the value zero. This type of exception handling construct is called Return-Proceed-Retry or RPR. It is commonly used for exception handling in software libraries based on the method/discipline architecture <ref> [19] </ref> such as Sfio [10] for buffered I/O, Vmalloc [20] for generalized memory allocation, and Cdt [21] for container data types. Two local variables xept call rv and xept handle rv are predefined for every wrapper function.
Reference: [20] <author> K.-P. Vo. </author> <title> Vmalloc: A General and Efficient Memory Allocator. </title> <journal> Software Practice & Experience, </journal> <volume> 26 </volume> <pages> 1-18, </pages> <year> 1996. </year>
Reference-contexts: For example, C code sometimes omits checking exceptions from memory allocation. Such code works until memory is exhausted then causes severe errors such as data corruption and/or program abortion. These memory bugs are not hard to detect using modern tools such as Purify [6] or Vmalloc <ref> [20] </ref>. However, without source code, it is not easy to fix them. Xept is a language and tool to help fix errors due to sloppy handling of exceptions from library functions. <p> If the last action is empty, it is equivalent to the value zero. This type of exception handling construct is called Return-Proceed-Retry or RPR. It is commonly used for exception handling in software libraries based on the method/discipline architecture [19] such as Sfio [10] for buffered I/O, Vmalloc <ref> [20] </ref> for generalized memory allocation, and Cdt [21] for container data types. Two local variables xept call rv and xept handle rv are predefined for every wrapper function.
Reference: [21] <author> K.-P. Vo. </author> <title> Cdt: A Container Data Type Library. </title> <journal> Software Practice & Experience, </journal> <note> 1997. To appear. </note>
Reference-contexts: This type of exception handling construct is called Return-Proceed-Retry or RPR. It is commonly used for exception handling in software libraries based on the method/discipline architecture [19] such as Sfio [10] for buffered I/O, Vmalloc [20] for generalized memory allocation, and Cdt <ref> [21] </ref> for container data types. Two local variables xept call rv and xept handle rv are predefined for every wrapper function.
Reference: [22] <author> Y. M. Wang, Y. Huang, K. P. Vo, P. Y. Chung, and C. Kintala. </author> <title> Checkpointing and its applications. </title> <booktitle> In Proc. IEEE Fault-Tolerant Computing Symp., </booktitle> <pages> pages 22-31, </pages> <year> 1995. </year>
Reference-contexts: The second hbeat () turns off the timer upon successful call completion. 3.2. Exception Masking Exception masking hides exceptions from applications. It requires either application-specific information for fixing exceptions or certain general software fault tolerance approaches such as design diversity [15], data diversity [1], or environment diversity <ref> [22] </ref> to bypass them. We distinguish three types of exception masking: retry, alternate, and fixing. 3.2.1 Masking exceptions through retry Certain exceptions are due to transient problems in the execution environment and can disappear in a subsequent retry. <p> Many users routinely use CosMiC to execute long-running programs with unpredictable varying memory usage. Valuable work may be lost if such a program simply exits upon an out-of-memory exception. A checkpoint-before-exit construct based on our checkpointing library libckp <ref> [22] </ref> has been proposed to min imize the amount of lost work. That scheme is not easy to use because source code must be modified to include the provided construct and the process must be manually migrated. <p> In this example, suppose function f2 () invokes f3 (), and a latent error in f2 () causes f3 () to raise an exception. To provide rollback recovery for undoing potentially corrupted states, f2 () is intercepted, and a checkpoint including volatile state and files <ref> [22] </ref> is taken; the variable which alt is set to zero by ckpcheckpoint ().
References-found: 22

