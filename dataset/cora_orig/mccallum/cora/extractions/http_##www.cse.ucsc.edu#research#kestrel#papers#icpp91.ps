URL: http://www.cse.ucsc.edu/research/kestrel/papers/icpp91.ps
Refering-URL: http://www.cse.ucsc.edu/research/kestrel/papers.html
Root-URL: http://www.cse.ucsc.edu
Title: 1991 International Conference on Parallel Processing B-SYS: A 470-Processor Programmable Systolic Array  
Author: Richard Hughey and Daniel P. Lopresti 
Address: Box 1910 Providence, RI 02912  
Affiliation: Department of Computer Science Brown University  
Abstract: This paper presents an architecture for programmable systolic arrays that provides simple and efficient systolic communication. The Brown Systolic Array is a linear implementation of this Systolic Shared Register architecture; a working 470-processor prototype system performs 108 MOPS. A 32-chip, 1504-processor implementation could provide 5 GOPS of systolic co-processing power on a single board. Keywords: systolic array, parallel processing, VLSI, SIMD, sequence comparison. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. J. Foster and H. T. Kung, </author> <title> "The design of special-purpose VLSI chips," </title> <booktitle> Computer, </booktitle> <pages> pp. 26-40, </pages> <month> Jan. </month> <year> 1980. </year>
Reference-contexts: Finally, the stream model of data flow is an elegant method for programming systolic co-processors. Regular Topology To support systolic algorithms, all of which use a regular topology by definition, the systolic co-processor itself should have a regular topology <ref> [1] </ref>. A fixed-degree regular network with nearest-neighbor connections (such as a line, square mesh, or hexagonal mesh) provides for the orderly and extensible mapping of algorithms to the systolic array. <p> Additionally, when large numbers of MIMD processors (hundreds or thousands) are used for systolic algorithms, the programs stored in each processor tend to be similar: by definition, systolic algorithms require only a small number of cell programs <ref> [1] </ref>. Thus, the Reprint 2 Reprint 1991 International Conference on Parallel Processing - - - - - - - - - - - OutputInput R 3 F 4 F 1 F 2 F 3 inherent power of a MIMD machine is often not used for systolic algorithms.
Reference: [2] <author> S. Borkar et al., </author> <title> "iWarp: An integrated solution to high-speed parallel computing," </title> <booktitle> in Proc. Supercomputing '88, </booktitle> <pages> pp. 330-339, </pages> <publisher> IEEE, </publisher> <month> Nov. </month> <year> 1988. </year>
Reference-contexts: To form arrays with hundreds of thousands of processing elements, there should be many processing elements on each chip; otherwise, the physical space used by the co-processor would be excessively large. Typical independently programmed systolic processing elements, such as iWarp, only have one processing element per chip <ref> [2] </ref>. Additionally, when large numbers of MIMD processors (hundreds or thousands) are used for systolic algorithms, the programs stored in each processor tend to be similar: by definition, systolic algorithms require only a small number of cell programs [1]. <p> Shared Registers for Communication In a programmable systolic array, data cannot be moved automatically since different applications require different types of data movement; data movement must be explicitly specified. Several machines provide this ability with special instructions and special queues or registers for data movement <ref> [2, 3] </ref>. In an SSR architecture, however, data moves through the array as a natural result of the user's program. adjacent to two register banks. Each functional unit can access data values from the register banks directly to its west and east for both input and output.
Reference: [3] <author> L. W. Tucker and G. G. Robertson, </author> <title> "Architecture and applications of the Connection Machine," </title> <booktitle> Computer, </booktitle> <pages> pp. 26-38, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: Shared Registers for Communication In a programmable systolic array, data cannot be moved automatically since different applications require different types of data movement; data movement must be explicitly specified. Several machines provide this ability with special instructions and special queues or registers for data movement <ref> [2, 3] </ref>. In an SSR architecture, however, data moves through the array as a natural result of the user's program. adjacent to two register banks. Each functional unit can access data values from the register banks directly to its west and east for both input and output.
Reference: [4] <author> J. D. Watson, </author> <title> "The Human Genome Project: Past, present, and future," </title> <booktitle> Science, </booktitle> <pages> pp. 44-48, </pages> <month> 6 Apr. </month> <year> 1990. </year>
Reference-contexts: The Brown Systolic Array As mentioned above, the Brown Systolic Array is a working implementation of a linear SSR machine. Its original purpose was to provide a programmable string comparison co-processor suitable for the Human Genome Project, which is analyzing the three billion nucleotides of human DNA <ref> [4] </ref>. The need for inexpensive yet powerful hardware for this project is clear, and B-SYS is well suited to the task of performing many different comparison algorithms for the computational biologist.
Reference: [5] <author> J. T. Stasko, </author> <title> "Tango: A framework and system for algorithm animation," </title> <booktitle> Computer, </booktitle> <pages> pp. 27-39, </pages> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: A context flag can control conditional instruction execution. The B-SIM behavioral simulator (with both T E X snapshots and array animation using the Tango system <ref> [5] </ref>) proved crucial for algorithm development and early evaluation of this architecture. The fully custom Brown Systolic Array chip was designed using Berkeley's Magic design suite and the COSMOS simulator [6, 7].
Reference: [6] <author> R. N. Mayo et al., </author> <note> "1990 DECWRL/Livermore Magic Release," Research Report 90/7, </note> <institution> Digital Western Research Laboratory, </institution> <address> Palo Alto, CA, </address> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: The B-SIM behavioral simulator (with both T E X snapshots and array animation using the Tango system [5]) proved crucial for algorithm development and early evaluation of this architecture. The fully custom Brown Systolic Array chip was designed using Berkeley's Magic design suite and the COSMOS simulator <ref> [6, 7] </ref>. The 86-pin, 6:9 mmfi6:8 mm chip was fabricated by MOSIS using a 2 m CMOS process in May, 1990.
Reference: [7] <author> D. Beatty et al., </author> <note> User's Guide to COSMOS version 1.2. </note> <institution> Carnegie-Mellon University, </institution> <month> Oct. </month> <year> 1988. </year>
Reference-contexts: The B-SIM behavioral simulator (with both T E X snapshots and array animation using the Tango system [5]) proved crucial for algorithm development and early evaluation of this architecture. The fully custom Brown Systolic Array chip was designed using Berkeley's Magic design suite and the COSMOS simulator <ref> [6, 7] </ref>. The 86-pin, 6:9 mmfi6:8 mm chip was fabricated by MOSIS using a 2 m CMOS process in May, 1990.
Reference: [8] <author> C. A. Mead and L. A. Conway, </author> <title> Introduction to VLSI Systems. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1980. </year>
Reference-contexts: The B-SYS ALU is loosely based on the OM1 ALU described in Mead and Conway <ref> [8] </ref>. Logic for calculating arbitrary functions computes the propagate and generate signals which control the Manchester carry chain. The carry chain requires approximately 4 ns to evaluate. The 38-bit B-SYS instruction word is shown in Figure 5.
Reference: [9] <author> M. Gokhale et al., </author> <title> "Building and using a highly parallel programmable logic array," </title> <booktitle> Computer, </booktitle> <pages> pp. 81-89, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: The B-SYS prototype performs 470-character one-against-many sequence comparison 81 times faster than its 80386 host. Figure 7 compares B-SYS to several systolic co-processors and supercom Reprint 8 Reprint 1991 International Conference on Parallel Processing puters. P-NAC, Splash, Cray-2, and Trace timings are extrapolated from experimental 100 fi 100 data <ref> [9] </ref>. CM-2 timings are from experimental data. P-NAC is a single-purpose nMOS co-processor. Splash is a 2-board linear array of field-programmable gate arrays. B-SYS* is a proposed 32-chip (1504-element) board with its own controller.
Reference: [10] <author> R. Hughey, </author> <title> Programmable Systolic Arrays. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Brown University, Providence, RI, </institution> <year> 1991. </year> <note> Reprint 10 Reprint </note>
Reference-contexts: With the development of programming tools for the automatic support of systolic streams, the programming and testing of new B-SYS applications requires little additional time beyond that required for selection of an appropriate systolic algorithm <ref> [10] </ref>. Conclusions The Brown Systolic Array features regular interconnections for systolic data flow; SIMD broadcast instructions for control; shared registers for communication and computation; and data streams for the ease of programming. The working 470-processor prototype provides over 100 MOPS of systolic co-processing power. <p> The working 470-processor prototype provides over 100 MOPS of systolic co-processing power. Programs for several more B-SYS applications have been generated, including data compression, sequence comparison variations, and graph algorithms <ref> [10] </ref>. The power of B-SYS is its simple and efficient programmability and high concentration of processing elements. A more sophisticated co-processor board board could increase the Brown Systolic Array's performance to a limiting 5 GOPS for a 32-chip board, or even 50 GOPS with a redesigned, 500-element B-SYS chip.
References-found: 10

