URL: ftp://ftp.cs.uchicago.edu/pub/publications/tech-reports/TR-90-05.ps
Refering-URL: http://cs-www.uchicago.edu/publications/tech-reports/
Root-URL: 
Title: Developing an Interactive Interface for Equational Logic Programs  
Author: Samuel A. Rebelsky David J. Sherman 
Note: For additional copies, write:  
Date: 90-05, February 1990  
Address: Chicago  1100 E. 58th Street Chicago, Illinois 60637 U.S.A.  
Affiliation: University of  Department of Computer Science University of Chicago  
Pubnum: Technical Report  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Maurice J. Bach. </author> <title> The Design of the Unix Operating System. </title> <publisher> Prentice Hall, Inc, </publisher> <year> 1986. </year> <month> 26 </month>
Reference: [2] <author> E. R. Gasner, S. C. North, and K. P. Vo. </author> <title> DAG|a program that draws directed graphs. </title> <journal> Software|Pracice and Experience, </journal> <volume> 18(11) </volume> <pages> 1047-1062, </pages> <year> 1988. </year>
Reference: [3] <author> Gilles Kahn and David B. MacQueen. </author> <title> Coroutines and networks of par allel processes. </title> <editor> In B. Gilchrist, editor, </editor> <booktitle> Information Processsing 77, volume 7 of IFIP Congress Series, </booktitle> <pages> pages 993-998. </pages> <publisher> North-Holland, </publisher> <year> 1977. </year> <booktitle> Proceedings of IFIP Congress 77; Toronto, </booktitle> <month> August 8-12, </month> <year> 1977. </year>
Reference-contexts: In fact, the Dance protocol allows programs to participate as both Freds and Gingers in multiple simultaneous Dances. This facility is similar to the multiple input and/or output channels for processes in <ref> [3] </ref>. Since the primary emphasis of our research is on building better front ends for equational logic programs, we do not make extensive use of this multiple dance facility. Our compound-dances are fairly simple and usually consist of: * An Output Browser. <p> Shell than in building programs, we have provided a few basic engines including: * an engine that performs the identity transformation; * a basic list manipulation package (including reverse, compose, and flatten); and * an engine that produces an infinite list of primes (based on the algo rithm presented in <ref> [3] </ref> and given by the equations presented in [4]). 4.3 Implementing the Dance Protocol We implemented the Dance protocol through TCP/IP, using one socket for each Dance. Sockets are passed as parameters to individual dancers (on the command line in the case of Unix programs).
Reference: [4] <author> Michael J. O'Donnell. </author> <title> Equational Logic As a Programming Language. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1985. </year>
Reference-contexts: 1 Introduction After extensive work with the equational logic programming system <ref> [4] </ref>, we determined that users of equational logic programs (and, hence, equational logic programmers) are hindered by its input/output system. <p> A more comprehensive user's guide for the Shell may be found in Appendix A. 4.1.1 Editing Terms The Graphic Shell's greatest strengths are the features it provides for creating and editing terms. The Shell can read and write terms using O'Donnell's format for abstract symbolic information (described in <ref> [4] </ref>) and display them as trees. Users are able to edit multiple terms simultaneously, one term per window. As specified above, users can select nodes using both the mouse and arrow keys. The Shell allows users to cut, copy, and paste arbitrary subterms. <p> a few basic engines including: * an engine that performs the identity transformation; * a basic list manipulation package (including reverse, compose, and flatten); and * an engine that produces an infinite list of primes (based on the algo rithm presented in [3] and given by the equations presented in <ref> [4] </ref>). 4.3 Implementing the Dance Protocol We implemented the Dance protocol through TCP/IP, using one socket for each Dance. Sockets are passed as parameters to individual dancers (on the command line in the case of Unix programs).
Reference: [5] <author> Lawrence A. Rowe, Michael Davis, Eli Messinger, Carl Meyer, Charles Spirakis, and Allen Tuan. </author> <title> A browser for directed graphs. </title> <journal> Software| Practice and Experience, </journal> <volume> 17(1) </volume> <pages> 61-76, </pages> <year> 1987. </year> <month> 27 </month>
Reference-contexts: Although some good algorithms for graph layout exist ([2], <ref> [5] </ref>), they do not fit our needs because: * they aren't really designed for ordered graphs; * they take a nontrivial amount of time to develop the layout; and * they operate on fixed, not changing, graphs.
References-found: 5

