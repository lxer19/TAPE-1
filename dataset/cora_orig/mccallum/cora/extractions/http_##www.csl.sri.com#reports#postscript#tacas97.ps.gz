URL: http://www.csl.sri.com/reports/postscript/tacas97.ps.gz
Refering-URL: http://www.csl.sri.com/reports/postscript/
Root-URL: 
Title: Integration in PVS: Tables, Types, and Model Checking  
Author: Sam Owre, John Rushby, Natarajan Shankar 
Address: Menlo Park, CA 94025, USA  
Affiliation: Computer Science Laboratory, SRI International,  
Note: Slightly expanded version of a paper presented at the Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS '97), Enschede, The Netherlands, April 1997. Springer-Verlag Lecture Notes in Computer Science Vol. 1217, pp. 366-383.  
Abstract: We have argued previously that the effectiveness of a verification system derives not only from the power of its individual features for expression and deduction, but from the extent to which these capabilities are integrated: the whole is more than the sum of its parts [20, 21]. Here, we illustrate this thesis by describing a simple construct for tabular specifications that was recently added to PVS. Because this construct integrates with other capabilities of PVS, such as typechecker-generated proof obligations, dependent typing, higher-order functions, model checking, and general theorem proving, it can be used for a surprising variety of purposes. We demonstrate this with examples drawn from hardware division algorithms and requirements specifications.
Abstract-found: 1
Intro-found: 1
Reference: <institution> Papers by SRI authors are generally available from http://www.csl.sri.com/fm.html. </institution>
Reference: 1. <author> Joanne M. Atlee and John Gannon. </author> <title> State-based model checking of event-driven system requirements. </title> <booktitle> In SIGSOFT '91: Software for Critical Systems, </booktitle> <pages> pages 16-28, </pages> <address> New Orleans, LA, </address> <month> December </month> <year> 1991. </year> <booktitle> Published as ACM SIGSOFT Engineering Notes, </booktitle> <volume> Volume 16, Number 5. </volume> <pages> 15 </pages>
Reference-contexts: Transition relations provide a way to do this, and the SCR method is a way to present such relations in a tabular manner [7]. The following is a typical SCR "mode transition table" (taken from Atlee and Gannon <ref> [1, Table 2] </ref>). This system, a simplified automobile cruise control, has four modes (off, inactive, cruise, and override) and the table describes the conditions under which it makes transitions from one mode to another.
Reference: 2. <author> Judith Crow and Ben L. Di Vito. </author> <title> Formalizing space shuttle software requirements: Four case studies. </title> <note> Submitted for publication, </note> <year> 1997. </year>
Reference-contexts: The construct generates proof obligations to ensure that the conditions labeling the rows and columns are disjoint and exclusive. This simple capability has been found useful by colleagues at NASA and Lockheed-Martin, who applied it in requirements analysis for Space Shuttle flight software <ref> [2, 18] </ref>. The capability becomes rather richer in the presence of dependent typing, and in this form it has been used to verify the accessible region in a quotient lookup table for SRT division [19]. <p> Running alongside what is generally considered an exemplary (though manual) process for requirements review, this experiment provides useful data on the effectiveness of automated formal analyses <ref> [2, 18] </ref>. One of the CRs focused on improving the display of flight information to Shuttle pilots guiding the critical initial bank onto the "Heading Alignment Cylinder" (HAC) during descent. <p> Names with embedded ! characters are Skolem constants derived from variables with the same root name. 9 6 decision_table_TCC2.1 : |------- <ref> [2] </ref> Alt_Capt_Hold!1 [3] AC_Alt!1 &gt;= Acc_Alt!1 Unproven sequents such as this, with no formulas above the line, indicate the failure to select an operational procedure when all the formulas below the line are false.
Reference: 3. <author> Mats P. E. Heimdahl. </author> <title> Experiences and lessons from the analysis of TCAS II. </title> <editor> In Steven J. Zeil, editor, </editor> <booktitle> International Symposium on Software Testing and Analysis (ISSTA), </booktitle> <pages> pages 79-83, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1996. </year> <institution> Association for Computing Machinery. </institution>
Reference-contexts: Names with embedded ! characters are Skolem constants derived from variables with the same root name. 9 6 decision_table_TCC2.1 : |------- [2] Alt_Capt_Hold!1 <ref> [3] </ref> AC_Alt!1 &gt;= Acc_Alt!1 Unproven sequents such as this, with no formulas above the line, indicate the failure to select an operational procedure when all the formulas below the line are false. <p> For example, PVS can settle disjointness and coverage TCCs that depend on properties more general than the simple Boolean and arithmetic relations built in to TableWise and similar tools. The limitations of these tools are illustrated by Heimdahl <ref> [3] </ref>, who describes spurious error reports when a completeness and consistency checking tool for the AND/OR tables of RSML (developed with Leveson [5]) was applied to TCAS II. <p> These spurious reports were due to the presence of arithmetic and defined functions whose properties are beyond the reach of the BDD-based tautology checker incorporated in the tool. As Heimdahl notes <ref> [3, page 81] </ref>, a theorem prover is needed to settle such properties; he and Czerny are now experimenting with PVS for this purpose [4]. A theorem prover such as PVS can also examine questions beyond simple completeness and consistency.
Reference: 4. <author> Mats P. E. Heimdahl and Barbara J. Czerny. </author> <title> Using PVS to analyze hierarchical state-based requirements for completeness and consistency. </title> <booktitle> In IEEE High-Assurance Systems Engineering Workshop (HASE '96), </booktitle> <pages> pages 252-262, </pages> <address> Niagara on the Lake, Canada, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: As Heimdahl notes [3, page 81], a theorem prover is needed to settle such properties; he and Czerny are now experimenting with PVS for this purpose <ref> [4] </ref>. A theorem prover such as PVS can also examine questions beyond simple completeness and consistency.
Reference: 5. <author> Mats P. E. Heimdahl and Nancy G. Leveson. </author> <title> Completeness and consistency analysis of state-based requirements. </title> <booktitle> In 17th International Conference on Software Engineering, </booktitle> <pages> pages 3-14, </pages> <address> Seattle, WA, April 1995. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: The limitations of these tools are illustrated by Heimdahl [3], who describes spurious error reports when a completeness and consistency checking tool for the AND/OR tables of RSML (developed with Leveson <ref> [5] </ref>) was applied to TCAS II. These spurious reports were due to the presence of arithmetic and defined functions whose properties are beyond the reach of the BDD-based tautology checker incorporated in the tool. <p> The generic support provided for tables and for model checking in PVS may be compared with the more specialized support provided in tools such as ORA's TableWise [8], NRL's SCR* [6, 7], and Leveson and Heimdahl's consistency checker for RSML <ref> [5] </ref>. Dedicated, lightweight tools such as these are likely to be superior to a heavyweight, generic system such as PVS for their chosen purposes. Our goal in applying PVS to these problems is not to compete with specialized tools but to complement them.
Reference: 6. <author> Constance Heitmeyer, Alan Bull, Carolyn Gasarch, and Bruce Labaw. SCR*: </author> <title> A toolset for specifying and analyzing requirements. </title> <booktitle> In COMPASS [9], </booktitle> <pages> pages 109-122. </pages>
Reference-contexts: When combined with other features of the PVS specification language, the table construct provides some of the attractive attributes of the TableWise [8] and SCR <ref> [6] </ref> specification methods. <p> Similar to the TableWise tool for decision tables, Heitmeyer and colleagues have developed the SCR* tool for checking consistency of SCR tabular specifications <ref> [6] </ref>, while Atlee and colleagues have developed a translator that turns SCR tables into a form acceptable to the SMV model checker [23]. These special-purpose tools have the advantage of being closely tailored to their intended uses and are scalable to larger examples than is convenient for the PVS treatment. <p> The generic support provided for tables and for model checking in PVS may be compared with the more specialized support provided in tools such as ORA's TableWise [8], NRL's SCR* <ref> [6, 7] </ref>, and Leveson and Heimdahl's consistency checker for RSML [5]. Dedicated, lightweight tools such as these are likely to be superior to a heavyweight, generic system such as PVS for their chosen purposes.
Reference: 7. <author> Constance Heitmeyer, Bruce Labaw, and Daniel Kiskis. </author> <title> Consistency checking of SCR-style requirements specifications. </title> <booktitle> In International Symposium on Requirements Engineering, </booktitle> <address> York, England, March 1995. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: Transition relations provide a way to do this, and the SCR method is a way to present such relations in a tabular manner <ref> [7] </ref>. The following is a typical SCR "mode transition table" (taken from Atlee and Gannon [1, Table 2]). This system, a simplified automobile cruise control, has four modes (off, inactive, cruise, and override) and the table describes the conditions under which it makes transitions from one mode to another. <p> The generic support provided for tables and for model checking in PVS may be compared with the more specialized support provided in tools such as ORA's TableWise [8], NRL's SCR* <ref> [6, 7] </ref>, and Leveson and Heimdahl's consistency checker for RSML [5]. Dedicated, lightweight tools such as these are likely to be superior to a heavyweight, generic system such as PVS for their chosen purposes.
Reference: 8. <author> D. N. Hoover and Zewei Chen. Tablewise, </author> <title> a decision table tool. </title> <booktitle> In COMPASS [9], </booktitle> <pages> pages 97-108. </pages>
Reference-contexts: When combined with other features of the PVS specification language, the table construct provides some of the attractive attributes of the TableWise <ref> [8] </ref> and SCR [6] specification methods. <p> There are many kinds of decision tables; the ones considered here are from a requirements engineering methodology developed for avionics systems by Lance Sherry of Honeywell [22], and given mechanized support in TableWise, developed by Hoover and Chen at ORA <ref> [8] </ref>. The following is a simple decision table (taken from [8, Table 2]). <p> The following is a simple decision table (taken from <ref> [8, Table 2] </ref>). <p> The six flaws identified in this way are identical to those found in this example by the special-purpose tool TableWise <ref> [8] </ref>. Unlike PVS, TableWise presents the anomalies that it discovers in a tabular form similar to that of the original decision table; TableWise can also generate executable Ada code and English language documentation from decision tables. These benefits are representative of those that can be achieved with a special-purpose tool. <p> Because they use only the standard capabilities of PVS, users can adapt and extend these customizations to suit their own needs. The generic support provided for tables and for model checking in PVS may be compared with the more specialized support provided in tools such as ORA's TableWise <ref> [8] </ref>, NRL's SCR* [6, 7], and Leveson and Heimdahl's consistency checker for RSML [5]. Dedicated, lightweight tools such as these are likely to be superior to a heavyweight, generic system such as PVS for their chosen purposes.
Reference: 9. <institution> COMPASS '95 (Proceedings of the Tenth Annual Conference on Computer Assurance), Gaithersburg, MD, </institution> <month> June </month> <year> 1995. </year> <institution> IEEE Washington Section. </institution>
Reference: 10. <author> Nancy G. Leveson, Mats Per Erik Heimdahl, Holly Hildreth, and Jon Damon Reese. </author> <title> Requirements specification for process-control systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(9) </volume> <pages> 684-707, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: The columns forming a subtable beneath each operational procedure are similar to the AND/OR tables used in the RSML notation of Leveson and colleagues <ref> [10] </ref>. The PVS TABLE construct cannot represent this type of decision table directly: we need some additional mechanism to represent a conjunction such as (Flightphase = climb) ^ (AC Alt Acc Alt) ^ :Alt Capt Hold by the compact list given in the third column of the table.
Reference: 11. <author> Paul S. Miner and James F. Leathrum, Jr. </author> <title> Verification of IEEE compliant subtractive division algorithms. </title> <editor> In Mandayam Srivas and Albert Camilleri, editors, </editor> <booktitle> Formal Methods in Computer-Aided Design (FMCAD '96), volume 1166 of Lecture Notes in Computer Science, </booktitle> <pages> pages 64-78, </pages> <address> Palo Alto, CA, </address> <month> November </month> <year> 1996. </year> <note> Springer-Verlag. </note>
Reference-contexts: Injection of an error similar to that in the Pentium leads to a failed TCC proof whose final sequent is a counterexample that highlights the error [19]. Miner and Leathrum have used this capability of PVS to develop several new SRT tables <ref> [11] </ref>, each in less than three hours. 3 Decision Tables Decision tables associate Boolean expressions with the "decision" or output to be generated when a particular expression is true.
Reference: 12. <author> Sam Owre, John Rushby, and Natarajan Shankar. </author> <title> Analyzing tabular and state-transition specifications in PVS. </title> <type> Technical Report SRI-CSL-95-12, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> July </month> <year> 1995. </year> <title> Available, with specification files, </title> <note> at http://www.csl.sri.com/csl95-12.html. </note>
Reference-contexts: 1 Introduction Persuaded by the advocacy of David Parnas and others [15], we recently added a construct for tabular specification to PVS <ref> [12] </ref>. The construct generates proof obligations to ensure that the conditions labeling the rows and columns are disjoint and exclusive. This simple capability has been found useful by colleagues at NASA and Lockheed-Martin, who applied it in requirements analysis for Space Shuttle flight software [2, 18]. <p> (Flightphase) & b (AC_Alt &gt; 400) & c (AC_Alt,Acc_Alt) & d (Alt_Capt_Hold) & e (Alt_Target,prev_Alt_Target) We can then use this construction to specify the third column of the decision table as the following row from a vertical one-dimensional PVS table; the complete table is shown in Appendix C (taken from <ref> [12] </ref>, where full details may be found). %--------|----|----|----|----|-----------% | X (climb? , * , GE , false , * )| Climb || %--------|----|----|----|----|-----------% The functions appearing in the argument list to X are defined as follows (note that * is overloaded and that climb? is a recognizer for an enumerated type). <p> these constructions, the mode transition table shown earlier can be represented in PVS as follows (for brevity, we show only the transitions from the Inactive mode, corresponding to the second and third rows of the table; the complete table is shown in Appendix D, and full details are given in <ref> [12] </ref>). event_constructor: TYPE = [condition -&gt; event] EC: TYPE = event_constructor PC (A,B,C,D,E,F,G)(a,b,c,d,e,f,g)(p,q):bool = A (a)(p,q) & B (b)(p,q) & C (c)(p,q) & D (d)(p,q) & E (e)(p,q) & F (f)(p,q) & G (g)(p,q) % Note: PC stands for "pairwise conjunction" original (s: modes, (p, q: monitored_vars)): modes = LET x <p> For example, we have used a variant of PVS's treatment of SCR tables to specify the nondeterministic mode transitions of interacting "climb" and "level" components in the requirements for a simple "autopilot" <ref> [12, section 4.3] </ref>. The transitions of the components were specified as separate tables and combined by disjunction (representing interleaving concurrency). The combined specification was then tested against a number of challenge properties using model checking.
Reference: 13. <author> Sam Owre, John Rushby, Natarajan Shankar, and Friedrich von Henke. </author> <title> Formal verification for fault-tolerant architectures: Prolegomena to the design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 107-125, </pages> <month> February </month> <year> 1995. </year>
Reference: 14. <author> Sam Owre and Natarajan Shankar. </author> <title> The formal semantics of PVS. </title> <type> Technical Report SRI-CSL-97-2, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> August </month> <year> 1997. </year>
Reference: 15. <author> David Lorge Parnas. </author> <title> Tabular representation of relations. </title> <type> Technical Report CRL Report 260, </type> <institution> Telecommunications Research Institute of Ontario (TRIO), Faculty of Engineering, McMaster University, Hamilton, </institution> <address> Ontario, Canada, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Persuaded by the advocacy of David Parnas and others <ref> [15] </ref>, we recently added a construct for tabular specification to PVS [12]. The construct generates proof obligations to ensure that the conditions labeling the rows and columns are disjoint and exclusive. <p> Here is an example due to Parnas <ref> [15, Figure 1] </ref> that illustrates this. We exhibit this example in the form output by the PVS L a T E X-printer.
Reference: 16. <author> Vaughan Pratt. </author> <title> Anatomy of the Pentium bug. </title> <booktitle> In TAPSOFT '95: Theory and Practice of Software Development, volume 915 of Lecture Notes in Computer Science, </booktitle> <pages> pages 97-107, </pages> <address> Aarhus, Denmark, May 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Triangular-shaped regions at top and bottom of these tables are never referenced by the algorithm; the Pentium error was that certain entries believed to be in this inaccessible region, and containing arbitrary data, were, in fact, sometimes referenced during execution <ref> [16] </ref>. An SRT division algorithm similar to that used in the Pentium has been specified and verified in PVS [19].
Reference: 17. <author> S. Rajan, N. Shankar, </author> <title> and M.K. Srivas. An integration of model-checking with automated proof checking. </title> <editor> In Pierre Wolper, editor, </editor> <booktitle> Computer-Aided Verification, 16 CAV '95, volume 939 of Lecture Notes in Computer Science, </booktitle> <pages> pages 84-97, </pages> <address> Liege, Belgium, June 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: vars (t))) The branching time temporal logic CTL provides a convenient way to specify certain properties of the computations induced by a transition relation, and PVS can automatically verify CTL formulas for transition relations over finite types by using a decision procedure for Park's -calculus to provide CTL model checking <ref> [17] </ref>. An example of a property about this specification that can be specified in CTL is the following invariant. In cruise mode, the engine is running, the vehicle is not going toofast, the brake is not on, and deactivate is not selected.
Reference: 18. <author> Larry W. Roberts and Mike Beims. </author> <title> Using formal methods to assist in the requirements analysis of the Space Shuttle HAC Change Request (CR 90960E). </title> <type> Technical Report JSC-27599, </type> <institution> NASA Johnson Space Center, Houston, TX, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: The construct generates proof obligations to ensure that the conditions labeling the rows and columns are disjoint and exclusive. This simple capability has been found useful by colleagues at NASA and Lockheed-Martin, who applied it in requirements analysis for Space Shuttle flight software <ref> [2, 18] </ref>. The capability becomes rather richer in the presence of dependent typing, and in this form it has been used to verify the accessible region in a quotient lookup table for SRT division [19]. <p> Running alongside what is generally considered an exemplary (though manual) process for requirements review, this experiment provides useful data on the effectiveness of automated formal analyses <ref> [2, 18] </ref>. One of the CRs focused on improving the display of flight information to Shuttle pilots guiding the critical initial bank onto the "Heading Alignment Cylinder" (HAC) during descent. <p> In addition to 7 discovery of this error, the requirements analysts felt that explicit identification and documentation of the domain knowledge was a valuable product of the analysis <ref> [18] </ref>. Another application for PVS tables has been in verification of fast hardware division algorithms. The notorious Pentium FDIV bug, which is reported to have cost Intel $475 million, was due to bad entries in the quotient lookup table for an SRT divider.
Reference: 19. <author> H. Rue, N. Shankar, and M. K. Srivas. </author> <title> Modular verification of SRT division. </title> <editor> In Rajeev Alur and Thomas A. Henzinger, editors, </editor> <booktitle> Computer-Aided Verification, CAV '96, volume 1102 of Lecture Notes in Computer Science, </booktitle> <pages> pages 123-134, </pages> <address> New Brunswick, NJ, July/August 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The capability becomes rather richer in the presence of dependent typing, and in this form it has been used to verify the accessible region in a quotient lookup table for SRT division <ref> [19] </ref>. When combined with other features of the PVS specification language, the table construct provides some of the attractive attributes of the TableWise [8] and SCR [6] specification methods. <p> An SRT division algorithm similar to that used in the Pentium has been specified and verified in PVS <ref> [19] </ref>. The quotient lookup table for this algorithm was specified as a PVS table (reproduced in Appendix B) which uses blank entries to indicate those regions of the table that are believed to be inaccessible. <p> Injection of an error similar to that in the Pentium leads to a failed TCC proof whose final sequent is a counterexample that highlights the error <ref> [19] </ref>. Miner and Leathrum have used this capability of PVS to develop several new SRT tables [11], each in less than three hours. 3 Decision Tables Decision tables associate Boolean expressions with the "decision" or output to be generated when a particular expression is true.
Reference: 20. <author> John Rushby. </author> <title> Mechanizing formal methods: Opportunities and challenges. </title> <editor> In Jonathan P. Bowen and Michael G. Hinchey, editors, </editor> <booktitle> ZUM '95: The Z Formal Specification Notation; 9th International Conference of Z Users, volume 967 of Lecture Notes in Computer Science, </booktitle> <pages> pages 105-113, </pages> <address> Limerick, Ireland, </address> <month> September </month> <year> 1995. </year> <note> Springer-Verlag. </note>
Reference: 21. <author> Natarajan Shankar. </author> <title> Unifying verification paradigms. </title> <editor> In Bengt Jonsson and Joachim Parrow, editors, </editor> <booktitle> Formal Techniques in Real-Time and Fault-Tolerant Systems, volume 1135 of Lecture Notes in Computer Science, </booktitle> <pages> pages 22-39, </pages> <institution> Uppsala, Sweden, </institution> <month> September </month> <year> 1996. </year> <note> Springer-Verlag. </note>
Reference: 22. <author> Lance Sherry. </author> <title> A structured approach to requirements specification for software-based systems using operational procedures. </title> <booktitle> In 13th AIAA/IEEE Digital Avionics Systems Conference, </booktitle> <pages> pages 64-69, </pages> <address> Phoenix, AZ, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: There are many kinds of decision tables; the ones considered here are from a requirements engineering methodology developed for avionics systems by Lance Sherry of Honeywell <ref> [22] </ref>, and given mechanized support in TableWise, developed by Hoover and Chen at ORA [8]. The following is a simple decision table (taken from [8, Table 2]).
Reference: 23. <author> Tirumale Sreemani and Joanne M. Atlee. </author> <title> Feasibility of model checking software requirements. </title> <booktitle> In COMPASS '96 (Proceedings of the Eleventh Annual Conference on Computer Assurance), </booktitle> <pages> pages 77-88, </pages> <address> Gaithersburg, MD, </address> <month> June </month> <year> 1996. </year> <title> IEEE Wash-ington Section. The views and conclusions contained herein are those of the authors and should not be in terpreted as necessarily representing the official policies or endorsements, either expressed or implied, </title> <institution> of the Air Force Office of Scientific Research or the U.S. Government. </institution> <month> 17 </month>
Reference-contexts: Similar to the TableWise tool for decision tables, Heitmeyer and colleagues have developed the SCR* tool for checking consistency of SCR tabular specifications [6], while Atlee and colleagues have developed a translator that turns SCR tables into a form acceptable to the SMV model checker <ref> [23] </ref>. These special-purpose tools have the advantage of being closely tailored to their intended uses and are scalable to larger examples than is convenient for the PVS treatment.
References-found: 24

