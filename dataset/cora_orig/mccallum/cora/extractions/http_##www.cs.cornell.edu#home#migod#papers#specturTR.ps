URL: http://www.cs.cornell.edu/home/migod/papers/specturTR.ps
Refering-URL: http://www.cs.cornell.edu/home/migod/papersIndex.html
Root-URL: 
Title: Spectur A Specification Language for the Programmer  
Author: Michael W. Godfrey Richard C. Holt 
Note: Spectur.  
Date: September 19, 1994  
Abstract: Spectur (Specification language after Turing) has been designed as a language for formal specification. The goals of the language include: ease of use by a specifier to write a software system specification from an informal description; ease of use by an implementor to build a program from a specification; ease of understanding by a user as documentation; ease of use by a mathematician to prove program correctness. The Spectur method of specifying a program module consists of declaring abstracted data structures, and specifying the procedures and functions of the module in terms of pre- and post-conditions on those data structures. Spectur is notable for providing notation and data structures that are both mathematically precise and immediately recognizable by programmers. A non-trivial example specification of a small operating system has been done using Spectur. We discuss this example, as well as the usefulness and potential applications of 
Abstract-found: 1
Intro-found: 1
Reference: [Chikofsky and Cross 90] <author> E. J. Chikofsky and J. H. </author> <title> Cross II, "Reverse En gineering and Design Recovery: A Taxonomy", </title> <journal> IEEE Software, </journal> <volume> vol. 7, no. 1, </volume> <pages> pp 13-17, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: However, rather than inventing a complicated example, it was thought that it would be easier and just as interesting to specify an existing program (although this might seem a backward step in program development, creating a specification from an implementation is an example of reverse engineering <ref> [Chikofsky and Cross 90] </ref>). An operating system seemed a good choice, since these programs are invariably large and complicated.
Reference: [Godfrey 88] <author> M. W. Godfrey, </author> <title> Toward Formal Specification of Operating System Modules, M.Sc. </title> <type> thesis, </type> <institution> University of Toronto, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: The figure also shows a (slightly simplified) specification of the Seek procedure using pre- and post-conditions. The other principal exported procedures | Create, Open, Close, ReOpen, Unlink, Read, and Write | can be specified in an analogous manner <ref> [Godfrey 88] </ref>. 3.5 Concurrency At first, it was decided to ignore the fact that MiniTunis is a concurrent program | the file manager was specified as if there were only one thread of execution at any time.
Reference: [Guttag et al. 85] <author> J. V. Guttag, J. J. Horning, and J. M. Wing, </author> <title> "Larch in Five Easy Pieces", </title> <type> Technical Report 5, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <month> July </month> <year> 1985. </year>
Reference-contexts: While there currently exist many different languages and approaches to formal specification (such as VDM [Jones 90], Z [Spivey 88] and Larch <ref> [Guttag et al. 85] </ref>), few of them concentrate on the issue of matching the structure and "feel" of the actual program. <p> Spectur has both mathematical and programming language-style data structures, which makes it convenient for use at all stages of program development. Larch <ref> [Guttag et al. 85] </ref> uses a two-tiered approach to specification. The bulk of the work is done using the Larch Shared Language, which uses an algebraic approach to define "traits" that model the function of the program.
Reference: [Hoare and Wirth 73] <author> C. A. R. Hoare and N. Wirth, </author> <title> "An Axiomatic Defi nition of the Programming Language Pascal", </title> <journal> Acta Informatica, </journal> <volume> vol. 2, no. 4, </volume> <year> 1973, </year> <pages> pp 335-355. </pages>
Reference-contexts: An operational specification of a program consists of another program written in a language with well-defined semantics, such as pure Lisp, Tur-ing [Holt et al. 88] or the axiomatized subset of Pascal <ref> [Hoare and Wirth 73] </ref>. Although the specification program can in principle be considered to be an implementation, the primary design goals of the specifier are descriptiveness and clarity instead of efficiency.
Reference: [Holt 83] <author> R. C. Holt, </author> <title> Concurrent Euclid, The UNIX System and Tunis, </title> <publisher> Addison Wesley, </publisher> <year> 1983. </year>
Reference-contexts: The first to be considered was Tunis (Toronto University System) | an implementation of the UNIX 3 operating system written in Turing Plus <ref> [Holt 83] </ref>. The major design goal of the Tunis project had been to create a system that would attain the functionality of UNIX, but also be more reliable, portable, secure and semantically clean than most traditional C-language implementations. However, because Tunis implements all of UNIX, it is quite large.
Reference: [Holt and Cordy 86] <author> R. C. Holt and J. R. Cordy, </author> <title> "The Turing Lan guage Report", </title> <type> Technical Report, </type> <institution> Computer Systems Research Institute, University of Toronto, </institution> <month> August </month> <year> 1986. </year>
Reference-contexts: mathematical definition [Holt et al. 88]. 2 This orientation toward programming language data structures is a key part of Spectur. 2.4 Turing and Spectur It was decided that, to achieve our goals, this new specification language would be based on Turing, a programming language developed at the University of Toronto <ref> [Holt and Cordy 86] </ref>.
Reference: [Holt and Cordy 87] <author> R. C. Holt and J. R. Cordy, </author> <title> "The Turing Plus Re port", </title> <type> Technical Report, </type> <institution> Computer Systems Research Institute, University of Toronto, </institution> <month> September </month> <year> 1987. </year> <note> REFERENCES 17 </note>
Reference-contexts: The Turing Plus language is an extension to Turing. Turing Plus adds concurrency, exception handling and separate compilation as well as "dirty" and "dangerous" features such as type cheats and absolute memory addressing that facilitate system programming <ref> [Holt and Cordy 87] </ref>. While Turing Plus is a proper extension of Turing (i.e. any Turing program is also a Turing Plus program), Turing Plus has not been formally defined | its presumed knowledge of the underlying hardware would make a mathematical definition unwieldy.
Reference: [Holt and Cordy 88] <author> R. C. Holt and J. R. Cordy, </author> <title> "The Turing Program ming Language", </title> <journal> Communications of the ACM, </journal> <volume> vol. 31, no. 12, </volume> <month> December </month> <year> 1988. </year>
Reference: [Holt et al. 88] <author> R. C. Holt, P. A. Matthews, J. A. Rosselet, and J. R. Cordy, </author> <title> The Turing Programming Language: Design and Definition, </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: An operational specification of a program consists of another program written in a language with well-defined semantics, such as pure Lisp, Tur-ing <ref> [Holt et al. 88] </ref> or the axiomatized subset of Pascal [Hoare and Wirth 73]. Although the specification program can in principle be considered to be an implementation, the primary design goals of the specifier are descriptiveness and clarity instead of efficiency. <p> However, it should be noted that these additional data structures of Spectur are based on those of Turing for which there exists a formal mathematical definition <ref> [Holt et al. 88] </ref>. 2 This orientation toward programming language data structures is a key part of Spectur. 2.4 Turing and Spectur It was decided that, to achieve our goals, this new specification language would be based on Turing, a programming language developed at the University of Toronto [Holt and Cordy <p> This choice was particularly appropriate because Turing has a formal mathematical definition <ref> [Holt et al. 88] </ref>, 2 In particular, Turing/Spectur pointers are abstract data types and should not be confused with pointers of the C language. 2 SPECTUR: GOALS AND REALIZATION 5 is very expressive and readable, and is well understood by the authors.
Reference: [Jones 90] <author> C. B. Jones, </author> <title> Systematic Software Devleopment Us ing VDM, Second Edition, </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: While there currently exist many different languages and approaches to formal specification (such as VDM <ref> [Jones 90] </ref>, Z [Spivey 88] and Larch [Guttag et al. 85]), few of them concentrate on the issue of matching the structure and "feel" of the actual program. <p> However, our experience in writing Turing software suggests that, at the very least, the creation of a type checker would be straightforward. 4.2 Spectur and Other Specification Languages Other specification languages have extensive software tools. Some, such as Z [Spivey 88] and VDM <ref> [Jones 90] </ref>, use a highly mathematical notation, which makes their specifications appear more like logic theorems than programs; this makes such specifications difficult to create and manipulate using a standard keyboard.
Reference: [Meyer 85] <author> B. Meyer, </author> <title> "On Formalism in Specification", </title> <journal> IEEE Software, </journal> <volume> vol. 2, no. 1, </volume> <month> January </month> <year> 1985, </year> <pages> pp 6-26. </pages>
Reference: [Morgan and Sufrin 84] <author> C. Morgan and B. Sufrin, </author> <title> "Specification of the UNIX Filing System", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 10, no. 2, </volume> <month> March </month> <year> 1984, </year> <pages> pp 128-142. </pages>
Reference-contexts: Another possible solution would have been to specify the system as if it were a strict hierarchy | that 4 Morgan and Sufrin have studied the similar problem of formally specifying the UNIX file system using a Z-like notation <ref> [Morgan and Sufrin 84] </ref>. 3 AN EXAMPLE SPECIFICATION: MINITUNIS 9 is, assume that all accesses of modules below the file manager are done via calls to the file manager. This would have simplified the specification, but only at the cost of making it unlike the true system.
Reference: [Neumann 80] <author> P. G. Neumann, </author> <title> "Experiences With A Formal Methodology for Software Development", </title> <type> Technical Report CSL-120, </type> <institution> SRI, </institution> <month> October </month> <year> 1980. </year>
Reference: [Penny 87] <author> D. A. Penny, </author> <title> "MiniTunis Code", </title> <publisher> private circula tion, </publisher> <year> 1987. </year>
Reference-contexts: However, because Tunis implements all of UNIX, it is quite large. It was decided instead to attempt a formal specification of MiniTunis, a much smaller UNIX-like system. MiniTunis, also written in Turing Plus, uses many of the design techniques employed in Tunis <ref> [Penny 87] </ref>. Although small (it has no directory hierarchy and implements only 13 system calls) and useful more as a teaching tool than as a practical operating system, MiniTunis is nonetheless a good model for larger systems, such as the full Tunis system.
Reference: [Spivey 88] <author> J. M. Spivey, </author> <title> "An Introduction to Z and Formal Specifications", in Michael Spivey The Z Notation: </title>
Reference-contexts: While there currently exist many different languages and approaches to formal specification (such as VDM [Jones 90], Z <ref> [Spivey 88] </ref> and Larch [Guttag et al. 85]), few of them concentrate on the issue of matching the structure and "feel" of the actual program. <p> With some specification languages, such as Z <ref> [Spivey 88] </ref>, the data structures have a very mathematical style | the rationale being that since mathematical objects such as sets and mappings are inherently abstract and subject to rigorous methods, they are appropriate for abstract problems and easy to reason about. <p> However, our experience in writing Turing software suggests that, at the very least, the creation of a type checker would be straightforward. 4.2 Spectur and Other Specification Languages Other specification languages have extensive software tools. Some, such as Z <ref> [Spivey 88] </ref> and VDM [Jones 90], use a highly mathematical notation, which makes their specifications appear more like logic theorems than programs; this makes such specifications difficult to create and manipulate using a standard keyboard.
References-found: 15

