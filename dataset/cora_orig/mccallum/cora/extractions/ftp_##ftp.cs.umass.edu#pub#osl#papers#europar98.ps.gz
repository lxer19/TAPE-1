URL: ftp://ftp.cs.umass.edu/pub/osl/papers/europar98.ps.gz
Refering-URL: http://spa-www.cs.umass.edu/bibliography.html
Root-URL: 
Email: cahoon-@cs.umass.edu  
Title: The Hardware/Software Balancing Act for Information Retrieval on Symmetric Multiprocessors  
Author: Zhihong Lu Kathryn S. McKinley Brendon Cahoon -zlu, mckinley, 
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: Web search engines, such as AltaVista and Infoseek, handle tremendous loads by exploiting the parallelism implicit in their tasks and using symmetric multiprocessors to support their services. The web searching problem that they solve is a special case of the more general information retrieval (IR) problem of locating documents relevant to the information need of users. In this paper, we investigate how to exploit a symmetric multiprocessor to build high performance IR servers. Although the problem can be solved by throwing lots of CPU and disk resources at it, the important questions are how much of which hardware and what software structure is needed to effectively exploit hardware resources. We have found, to our surprise, that in some cases adding hardware degrades performance rather than improves it. We show that multiple threads are needed to fully utilize hardware resources. Our investigation is based on InQuery, a state-of-the-art full-text information retrieval engine.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. Cahoon and K. S. McKinley. </author> <title> Performance evaluation of a distributed architecture for information retrieval. </title> <booktitle> In Proceedings of the Nineteenth Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, </booktitle> <pages> pages 110-118, </pages> <address> Zurich, Switzerland, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: For queries, summaries, and documents, we measure CPU and disk usage for each operation, but do not measure the memory and cache effects. We model the collection and queries by obtaining document and term statistics from test collections and real query sets (See <ref> [1, 6] </ref> for more details.) We validate our simulator against the multithreaded implementation.
Reference: 2. <author> J. P. Callan, W. B. Croft, and J. Broglio. </author> <title> TREC and TIPSTER experiments with INQUERY. </title> <booktitle> Information Processing & Management, </booktitle> <volume> 31(3) </volume> <pages> 327-343, </pages> <year> 1995. </year>
Reference-contexts: In this paper, we investigate how to balance hardware and software resources to exploit a symmetric multiprocessor (SMP) architecture to build high performance IR servers. Our IR server is based on InQuery <ref> [2, 3] </ref>, a state-of-the-art full-text information retrieval engine that is widely used in Web search engines, large libraries, companies, and governments such as Infoseek, Library of Congress, White House, West Publishing, and Lotus [5]. <p> Section 4 summarizes our results and concludes. 2 A Parallel Information Retrieval Server This section describes the implementation of our parallel IR server and simulator. We begin with a brief description of the InQuery retrieval engine <ref> [2, 3, 5] </ref>. We next present the features we model and summarize our validation of the simulator against the multithreaded implementation. InQuery Retrieval Engine InQuery is one of the most powerful and advanced full-text information retrieval engines in commercial or government use today [5]. <p> It uses an inference network model, which applies Bayesian inference networks to represent documents and queries, and views information retrieval as an inference or evidential reasoning process <ref> [2, 3] </ref>. The inference networks are implemented as inverted files. In this paper, we use collection to refer to a set of documents, and database to refer to an indexed collection. The InQuery server supports a range of IR commands such as query, document, and relevance feedback.
Reference: 3. <author> J. P. Callan, W. B. Croft, and S. M. Harding. </author> <title> The INQUERY retrieval system. </title> <booktitle> In Proceedings of the 3rd International Conference on Database and Expert System Applications, </booktitle> <address> Valencia, Spain, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: In this paper, we investigate how to balance hardware and software resources to exploit a symmetric multiprocessor (SMP) architecture to build high performance IR servers. Our IR server is based on InQuery <ref> [2, 3] </ref>, a state-of-the-art full-text information retrieval engine that is widely used in Web search engines, large libraries, companies, and governments such as Infoseek, Library of Congress, White House, West Publishing, and Lotus [5]. <p> Section 4 summarizes our results and concludes. 2 A Parallel Information Retrieval Server This section describes the implementation of our parallel IR server and simulator. We begin with a brief description of the InQuery retrieval engine <ref> [2, 3, 5] </ref>. We next present the features we model and summarize our validation of the simulator against the multithreaded implementation. InQuery Retrieval Engine InQuery is one of the most powerful and advanced full-text information retrieval engines in commercial or government use today [5]. <p> It uses an inference network model, which applies Bayesian inference networks to represent documents and queries, and views information retrieval as an inference or evidential reasoning process <ref> [2, 3] </ref>. The inference networks are implemented as inverted files. In this paper, we use collection to refer to a set of documents, and database to refer to an indexed collection. The InQuery server supports a range of IR commands such as query, document, and relevance feedback.
Reference: 4. <author> W. B. Croft, R. Cook, and D. Wilder. </author> <title> Providing government information on the internet: Experiences with THOMAS. </title> <booktitle> In The Second International Conference on the Theory and Practice of Digital Libraries, </booktitle> <address> Austin, TX, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Since users typically enter short queries, we experiment with a query set that consists of 1000 short queries, with an average of 2 terms per query that mimic those found in the query set down loaded from the Web server for searching the 103rd Congressional Record <ref> [4] </ref>. All experiments measure response time, CPU and disk utilization, and determine the largest arrival rate at which the system supports a response time under 10 seconds.
Reference: 5. <author> InQuery. </author> <note> http://ciir.cs.umass.edu/info/highlights.html. </note>
Reference-contexts: Our IR server is based on InQuery [2, 3], a state-of-the-art full-text information retrieval engine that is widely used in Web search engines, large libraries, companies, and governments such as Infoseek, Library of Congress, White House, West Publishing, and Lotus <ref> [5] </ref>. Our work is novel because it investigates a real, proven effective system under a variety of realistic workloads and hardware configurations on an SMP architecture. <p> Section 4 summarizes our results and concludes. 2 A Parallel Information Retrieval Server This section describes the implementation of our parallel IR server and simulator. We begin with a brief description of the InQuery retrieval engine <ref> [2, 3, 5] </ref>. We next present the features we model and summarize our validation of the simulator against the multithreaded implementation. InQuery Retrieval Engine InQuery is one of the most powerful and advanced full-text information retrieval engines in commercial or government use today [5]. <p> We next present the features we model and summarize our validation of the simulator against the multithreaded implementation. InQuery Retrieval Engine InQuery is one of the most powerful and advanced full-text information retrieval engines in commercial or government use today <ref> [5] </ref>. It uses an inference network model, which applies Bayesian inference networks to represent documents and queries, and views information retrieval as an inference or evidential reasoning process [2, 3]. The inference networks are implemented as inverted files.
Reference: 6. <author> Zhihong Lu, Kathryn S. McKinley, and Brendon Cahoon. </author> <title> The hardware/software balancing act for information retrieval on symmetric multiprocessors. </title> <type> Technical Report TR98-25, </type> <institution> University of Massachusetts, Amherst, </institution> <year> 1998. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The previous research investigates either the IR system on massively parallel processing (MPP) architecture or it investigates only a subset of the system on SMP architecture such as the disk system or it compares the cost factors of SMP architecture with other architectures. (See <ref> [6] </ref> for a more thorough comparison with the related work). Our results provide insights for building high performance IR servers for searching the Web and other environments using a symmetric multiprocessor. The remainder of this paper is organized as follows. <p> For queries, summaries, and documents, we measure CPU and disk usage for each operation, but do not measure the memory and cache effects. We model the collection and queries by obtaining document and term statistics from test collections and real query sets (See <ref> [1, 6] </ref> for more details.) We validate our simulator against the multithreaded implementation. <p> The simulator reports response times that are 4.5% slower than the actual system on the average (See <ref> [6] </ref> for more details). 3 Experiments and Results This section explores how software and hardware configurations affect system scalability with respect to multiple threads, CPUs, and disks. We start with a base system that consists of one thread, CPU, and disk. This system is disk bound.
References-found: 6

