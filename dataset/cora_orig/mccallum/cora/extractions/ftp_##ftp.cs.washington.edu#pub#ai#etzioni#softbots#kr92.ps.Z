URL: ftp://ftp.cs.washington.edu/pub/ai/etzioni/softbots/kr92.ps.Z
Refering-URL: http://www.cs.washington.edu/homes/weld/pubs.html
Root-URL: 
Title: An Approach to Planning with Incomplete Information Appears in KR-92  
Author: Oren Etzioni, Steve Hanks, Daniel Weld, Denise Draper, Neal Lesh, Mike Williamson 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: Classical planners presuppose complete and correct information about the world. This paper provides the syntax and semantics for uwl, a representation for goals and actions that facilitates planning with incomplete information about the world's state. While the expressive power of uwl is limited compared to previous work on logics of knowledge and belief, uwl has the advantage of being easily incorporated into planning algorithms. We describe a provably correct planning algorithm based on uwl. To demonstrate uwl's expressive power we encode a subset of the UNIX 1 domain (planning to achieve UNIX goals, using UNIX shell commands as primitive actions), which is difficult to capture using existing planning languages. fl Authors' names are listed alphabetically within two status-oriented equivalence classes. Our research was funded in part by National Science Foundation Grants IRI-8957302 and IRI-9008670, Office of Naval Research Grants 92-J-1946, 90-J-1904, a NASA Graduate Student Researcher's Fellowship, an Office of Naval Research Graduate Fellowship, and a grant from the Xerox corporation. We thank Ernie Davis, Mark Drummond, Keiji Kanazawa, Craig Knoblock, Leora Morgenstern, Alicia Perez, Rich Se-gal, and the anonymous reviewers for helpful comments on previous drafts. 1 UNIX is a trademark of AT&T Bell Labs. 
Abstract-found: 1
Intro-found: 1
Reference: [Allen et al. 1990] <editor> J. Allen, J. Hendler, and A. Tate, editors. </editor> <booktitle> Readings in Planning. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Developing a complete taxonomy of information goals is an area of future research. 3 Partial-Order Planning We have worked to keep uwl close to the familiar strips representation in order to build on the longstanding body of work on planning algorithms using that representation (see <ref> [Allen et al. 1990] </ref> for a survey). In this section we present SENS P a provably sound partial-order planning algorithm for uwl based on snlp [McAllester and Rosenblitt 1991,Barrett and Weld 1992,Hanks and Weld 1992]. We believe SENS P is complete subject to one simplifying assumption.
Reference: [Barrett and Weld 1992] <author> A. Barrett and D. Weld. </author> <title> Partial Order Planning: Evaluating Possible Efficiency Gains. </title> <type> Technical Report 92-05-01, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> July </month> <year> 1992. </year>
Reference: [Chapman 1987] <author> D. Chapman. </author> <title> Planning for Conjunctive Goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3) </volume> <pages> 333-377, </pages> <month> July </month> <year> 1987. </year>
Reference: [Drummond 1986] <author> M. Drummond. </author> <title> A representation of action and belief for automatic planning systems. </title> <booktitle> In Proceedings of the 1986 workshop on Reasoning about Actions and Plans , San Mateo, </booktitle> <address> CA, 1986. </address> <publisher> Morgan Kauf-mann. </publisher>
Reference-contexts: She considers the expression of complex plans using sequential, conditional, iterative, and concurrent constructs, and axiomatizes their knowledge preconditions. She does not, however, address the problem of how these plans might be generated. <ref> [Drummond 1986] </ref> presents a framework (plan nets) that allows for the representation of sensory actions. The occurrence of an event entails a set of beliefs, which is partitioned into two subsets.
Reference: [Drummond 1989] <author> M. Drummond. </author> <title> Situated Control Rules. </title> <booktitle> In Proceedings of the First International Conference on Knowledge Representation and Reasoning, </booktitle> <month> May </month> <year> 1989. </year>
Reference-contexts: However, the precondition and goal languages presented do not provide any way of distinguishing between internal and external results, so the distinction between sensory and non-sensory actions is of limited use. Again, the problem of plan generation is not considered. <ref> [Drummond 1989] </ref> presents another version of the plan-net formalism. This version does not make the dis 12 Logics of knowledge also appear in the philosophical literature (e.g., [Hintikka 1962]). tinction between sensory and non-sensory effects, but it does provide a rich language for expressing goals.
Reference: [Etzioni and Segal 1992] <author> Oren Etzioni and Richard Segal. </author> <title> Softbots as testbeds for machine learning. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Knowledge Assimilation, </booktitle> <address> Menlo Park, CA, 1992. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: finger, ls, pwd, etc.), and actions that change the world state (rlogin, mv, cd, etc.) Thus, the UNIX domain provides a natural test of the expressiveness of uwl. 3 3 In fact, the design of uwl was originally motivated by the project of building a softbot (software robot) for UNIX <ref> [Etzioni and Segal 1992] </ref>. 1.2 Contributions The research contribution of the uwl language stems from the following novel features: * uwl allows for an incomplete world model and for conditional plans. * uwl actions may change the state of the world, the state of the agent's knowledge, or a combina tion <p> In future work, we will consider ways of weakening this restriction, either by producing `conditionally correct' plans, or by declaring ranges on the possible values of run-time variables. 4 uwl and the UNIX Domain In <ref> [Etzioni and Segal 1992] </ref> we describe the project of building softbots (soft ware robots): programs that improve our algorithm; see the discussion of [Peot and Smith 1992] in section 5. 10 The 'Equals' slot in the last operator description is an extension to uwl that allows codesignation and noncodes-ignation constraints on
Reference: [Etzioni et al. 1992] <author> Oren Etzioni, Neal Lesh, and Richard Segal. </author> <title> Building softbots for UNIX. </title> <note> In preparation, </note> <year> 1992. </year>
Reference-contexts: Based on this learned model, some of the softbot's observations will persist (e.g., a new workstation has been added to the network) whereas others (e.g., the printer is out of paper) will be forgotten quickly. See <ref> [Etzioni et al. 1992] </ref> for a more comprehensive discussion. 5 Related Work [McCarthy and Hayes 1969] argues for a formalization of the notion of "knowledge" as the basis for a theory of plans. <p> In addition, we have developed a softbot that relies on uwl to represent a subset of the UNIX domain (see Table 3 for an illustration). The softbot generates and executes plans to achieve a wide range of UNIX goals, demonstrating the utility and expressiveness of uwl <ref> [Etzioni et al. 1992] </ref>. Second, we showed that posing an information goal to a planner implicitly dictates that the state of the proposition in question should be protected in the process of planning to achieve that goal.
Reference: [Fikes and Nilsson 1971] <author> R. Fikes and N. Nils-son. </author> <title> STRIPS: A new Approach to the Application of Theorem Proving to Problem Solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2(3/4), </volume> <year> 1971. </year>
Reference-contexts: Section 4 demonstrates the expressive power of uwl by encoding a subset of the UNIX do main. The paper concludes with a discussion of related work, the limitations of uwl, and directions for future work. 2 The Language uwl is an extension of the strips language <ref> [Fikes and Nilsson 1971] </ref>. Section 2.1 describes the syntax of uwl, Section 2.2 follows with a specification of its semantics. Section 2.3 discusses how to use the language to formalize the notion of an information goal. 2.1 Syntax A BNF syntax for uwl appears in Table 1.
Reference: [Hanks and Weld 1992] <author> Steven Hanks and Daniel Weld. </author> <title> Systematic adaptation for case-based planning. </title> <booktitle> In Proceedings of the First International Conference on AI Planning Systems, </booktitle> <month> June </month> <year> 1992. </year>
Reference: [Hintikka 1962] <author> Jaako Hintikka. </author> <title> Semantics for Propositional Attitudes. </title> <publisher> Cornell University Press, </publisher> <year> 1962. </year>
Reference-contexts: Again, the problem of plan generation is not considered. [Drummond 1989] presents another version of the plan-net formalism. This version does not make the dis 12 Logics of knowledge also appear in the philosophical literature (e.g., <ref> [Hintikka 1962] </ref>). tinction between sensory and non-sensory effects, but it does provide a rich language for expressing goals.
Reference: [Kaelbling 1988] <author> Leslie Pack Kaelbling. </author> <title> Goals as parallel program specifications. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference: [McAllester and Rosenblitt 1991] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic Nonlinear Planning. </title> <booktitle> In Proceedings of AAAI-91, </booktitle> <pages> pages 634-639, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: the plan if there is no causal link S i p A plan is said to be complete if it has no open conditions and no threatened links. snlp is sound, systematic, and complete (as long as backtracking explores all nondeterministic choice points using a strategy such as iterative deepening) <ref> [McAllester and Rosenblitt 1991] </ref>. The SENS P algorithm extends the notion of a casual link to handle the uwl's annotated preconditions and postconditions. The postconditions of a uwl operator are split into a cause list and an observe list.
Reference: [McCarthy and Hayes 1969] <author> J. McCarthy and P. J. Hayes. </author> <title> Some Philosophical Problems from the Standpoint of Artificial Intelligence. </title> <booktitle> In Machine Intelligence 4, </booktitle> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year>
Reference-contexts: Based on this learned model, some of the softbot's observations will persist (e.g., a new workstation has been added to the network) whereas others (e.g., the printer is out of paper) will be forgotten quickly. See [Etzioni et al. 1992] for a more comprehensive discussion. 5 Related Work <ref> [McCarthy and Hayes 1969] </ref> argues for a formalization of the notion of "knowledge" as the basis for a theory of plans.
Reference: [Moore 1985] <author> R.C. Moore. </author> <title> A Formal Theory of Knowledge and Action. In Formal Theories of the Commonsense World. </title> <publisher> Ablex, </publisher> <year> 1985. </year>
Reference-contexts: This approach has led to the development of a rich body of logical work within AI [Morgenstern 1988,Moore 1985]. 12 <ref> [Moore 1985] </ref> introduces a first-order modal logic of knowledge and action, developing the idea of informative actions that supply an agent with additional information about the world. [Morgen stern 1987] develops a more expressive theory of action and planning, and specifically addresses the problem of knowledge preconditions for the performance of
Reference: [Morgenstern 1987] <author> Leora Morgenstern. </author> <title> Knowledge preconditions for actions and plans. </title> <booktitle> In Proceedings of IJCAI-87, </booktitle> <year> 1987. </year>
Reference: [Morgenstern 1988] <author> Leora Morgenstern. </author> <title> Foundations of a Logic of Knowledge, Action, and Communication. </title> <type> PhD thesis, </type> <address> New York University, </address> <year> 1988. </year>
Reference: [Olawsky and Gini 1990] <author> D. Olawsky and M. Gini. </author> <title> Deferred planning and sensor use. In Proceedings, DARPA Workshop on Innovative Approaches to Planning, Scheduling, and Control. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: supporting all remaining goals without adding new steps to the plan. 3.4 Run-time Variables For the purpose of matching preconditions and post-conditions, SENS P treats run-time variables as constants whose values are not yet known: they are not allowed to match with other constants or with different run-time variables (cf. <ref> [Olawsky and Gini 1990] </ref>). Run-time variables can match ordinary variables, but SENS P adds ordering constraints which ensure that the value of a run-time variable is not used until it has been observed. For example, suppose we wish our kitchen table and chair to share the same color. <p> The language is used only for the specification of goals. Although the top-level goals can be annotated, operator preconditions are restricted to be conjunctions of simple propositions. Our work is close to that of <ref> [Olawsky and Gini 1990] </ref>, which specifically considers the problem of planning with an incomplete initial world-state description. Their approach uses deferred planning: when a proposition's truth value is needed but unknown they suspend the planning process, execute a plan to learn its value, then resume planning.
Reference: [Peot and Smith 1992] <author> Mark A. Peot and David E. Smith. </author> <title> Conditional nonlinear planning. </title> <booktitle> In Proceedings of the First International Conference on AI Planning Systems, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: weakening this restriction, either by producing `conditionally correct' plans, or by declaring ranges on the possible values of run-time variables. 4 uwl and the UNIX Domain In [Etzioni and Segal 1992] we describe the project of building softbots (soft ware robots): programs that improve our algorithm; see the discussion of <ref> [Peot and Smith 1992] </ref> in section 5. 10 The 'Equals' slot in the last operator description is an extension to uwl that allows codesignation and noncodes-ignation constraints on variables to be asserted. 11 This assumption is powerful because it frees SENS P from subgoaling to achieve observation steps. <p> The examples they give are greatly simplified by the fact that their domain contains a single operator that achieves every proposition, which allows them to avoid the complex issues that arise when some proposition is a sensory effect of one action and a causal effect of another. <ref> [Peot and Smith 1992] </ref> presents a variant of SNLP for the construction of conditional non-linear plans. Their action representation also uses a three-valued logic, and allows actions to have multiple, mutually-exclusive sets of outcomes.
Reference: [Ram and Hunter 1992] <author> Ashwin Ram and Lawrence Hunter. </author> <title> The use of explicit goals for knowledge to guide inference and learning. </title> <institution> Git-cc-92/04, Georgia Institute of Technology, </institution> <year> 1992. </year>
Reference-contexts: T)) (find-out ((parent.directory ?file ?dir) . T)) (satisfy ((protection ?file readable) . T)) (satisfy ((current.directory softbot ?dir) . T)) )) Postconds: (observe ((character.count ?file !char) . T)) (observe ((word.count ?file !word) . T)) (observe ((line.count ?file !line) . T)) Table 3: Sample representations of UNIX goals and operators. action. <ref> [Ram and Hunter 1992] </ref> discusses the application of knowledge goals as a means of controlling inference. They develop a theoretical framework for describing the explicit desire for knowledge, and illustrate it on examples from natural language understanding and machine learning. 6 Conclusion This paper contains two fundamental observations.
Reference: [Schoppers 1987] <author> M. Schoppers. </author> <title> Universal Plans for Reactive Robots in Unpredictable Environments. </title> <booktitle> In Proceedings of IJCAI-87, </booktitle> <pages> pages 1039-1046, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: However, they do not provide for a distinction between observational and causal effects of actions, or treat sensing explicitly. It is possible that their planning algorithm could be extended to work with uwl. Universal plans <ref> [Schoppers 1987] </ref> and Gapps [Kael-bling 1988] provide methods for constructing exhaustive conditional plans. However, the representation languages employed do not allow explicit description of sensing actions.
Reference: [Tate 1977] <author> A. Tate. </author> <title> Generating Project Networks. </title> <booktitle> In Proceedings of IJCAI-77, </booktitle> <pages> pages 888-893, </pages> <year> 1977. </year>
Reference: [Warren 1974] <author> D. Warren. WARPLAN: </author> <title> A system for generating plans. Memo No. </title> <type> 76, </type> <institution> Univerity of Edinburgh, Department of Computational Logic, </institution> <year> 1974. </year>
Reference: [Warren 1976] <author> D. Warren. </author> <title> Generating copnditional plans and programs. </title> <booktitle> In Proceedings of AISB Summer Conference, </booktitle> <pages> pages 344-354, </pages> <institution> University of Edinburgh, </institution> <year> 1976. </year>
Reference-contexts: The final plan is thus: 8 (sense-color table !color) (get-paint !color) (paint chair !color) 3.5 Generating Conditional Branches SENS P uses a variant of Warren's WARPLAN-C technique for generating conditional plans <ref> [Warren 1976] </ref>. The basic idea is that conditionals are inserted into the plan only when SENS P needs to constrain the value of a run-time variable.
References-found: 23

