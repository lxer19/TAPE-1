URL: http://www.research.microsoft.com/crypto/papers/cap.ps
Refering-URL: http://www.research.microsoft.com/crypto/
Root-URL: http://www.research.microsoft.com
Title: Cryptographic Capsules: A Disjunctive Primitive for Interactive Protocols  
Author: Josh Cohen Benaloh 
Abstract-found: 0
Intro-found: 1
Reference: [Ben86] <author> Benaloh, J. </author> <title> "Secret Sharing Homomorphisms: Keeping Shares of a Secret Secret." </title> <booktitle> Crypto '86, </booktitle> <address> Santa Barbara, CA (Aug. </address> <year> 1986). </year>
Reference-contexts: Capsules are an instrumental part of the machinery used to compose ballots in the cryptographic election scheme of [CoFi85] (see also [Coh86], <ref> [Ben86] </ref>, and [BeYu86]), but they have far broader applications. Use of capsules substantially simplifies the "zero-knowledge" interactive proof system for quadratic non-residuosity published in [GMR85]. Their use also provides a tremendous simplification of the "result-indistinguishable" interactive proof system published in [GHY85]. <p> Formal proofs that this procedure does not yield any extraneous information are included in [CoFi85]. 4.2 Quadratic Residuosity The work on elections has been previously published (besides [CoFi85], see [Coh86], <ref> [Ben86] </ref>, and [BeYu86] for some extensions), and the above sketch is included only to motivate the use of capsules.
Reference: [BeYu86] <author> Benaloh, J. and Yung, M. </author> <title> "Distributing the Power of a Government to Enhance the Privacy of Voters." </title> <booktitle> Proc. 5 th ACM Symp. on Principles of Distributed Computing, </booktitle> <address> Calgary, AB (Aug. </address> <year> 1986), </year> <pages> 52-62. </pages>
Reference-contexts: Capsules are an instrumental part of the machinery used to compose ballots in the cryptographic election scheme of [CoFi85] (see also [Coh86], [Ben86], and <ref> [BeYu86] </ref>), but they have far broader applications. Use of capsules substantially simplifies the "zero-knowledge" interactive proof system for quadratic non-residuosity published in [GMR85]. Their use also provides a tremendous simplification of the "result-indistinguishable" interactive proof system published in [GHY85]. <p> Formal proofs that this procedure does not yield any extraneous information are included in [CoFi85]. 4.2 Quadratic Residuosity The work on elections has been previously published (besides [CoFi85], see [Coh86], [Ben86], and <ref> [BeYu86] </ref> for some extensions), and the above sketch is included only to motivate the use of capsules.
Reference: [BrCr86] <author> Brassard, G. and Crepeau, C. </author> <title> "Zero-Knowledge Simulation of Boolean Circuits." </title> <booktitle> Crypto '86, </booktitle> <address> Santa Barbara, CA (Aug. </address> <year> 1986). </year>
Reference-contexts: The method uses capsules to give a zero-knowledge protocol to interactively prove that a given Boolean formula (or arbitrary Boolean circuit with in-degree 2) has a satisfying assignment. Brassard and Crepeau in <ref> [BrCr86] </ref> independently of both this work and [GMW86] have achieved the same result, and a similar result is given in [Cha86]. The major advantage of this method over the original is efficiency.
Reference: [Cha86] <author> Chaum, D. </author> <title> "Demonstrating that a Public Predicate can be Sat--isfied Without Revealing Any Information About How." </title> <booktitle> Crypto '86, </booktitle> <address> Santa Barbara, CA (Aug. </address> <year> 1986). </year>
Reference-contexts: Brassard and Crepeau in [BrCr86] independently of both this work and [GMW86] have achieved the same result, and a similar result is given in <ref> [Cha86] </ref>. The major advantage of this method over the original is efficiency. When a Boolean formula or circuit is reduced to a colorability graph, the number of vertices and edges in the resulting graph is linear in the size of the Boolean formula.
Reference: [CoFi85] <author> Cohen, J. and Fischer, M. </author> <title> "A Robust and Verifiable Cryptographically Secure Election Scheme." </title> <booktitle> Proc. 26 th IEEE Symp. on Foundations of Computer Science, </booktitle> <address> Portland, OR (Oct. </address> <year> 1985), </year> <pages> 372-382. </pages>
Reference-contexts: Capsules are an instrumental part of the machinery used to compose ballots in the cryptographic election scheme of <ref> [CoFi85] </ref> (see also [Coh86], [Ben86], and [BeYu86]), but they have far broader applications. Use of capsules substantially simplifies the "zero-knowledge" interactive proof system for quadratic non-residuosity published in [GMR85]. Their use also provides a tremendous simplification of the "result-indistinguishable" interactive proof system published in [GHY85]. <p> Thus, to prove that two integers are of the same residue class, it is necessary only to exhibit an r th root of their quotient. 4 Some Applications 4.1 Elections In the cryptographic election work of <ref> [CoFi85] </ref>, each voter prepares, as a ballot, a capsule which consists of of a random member of residue class 0 (denoting a no vote) and a random member of residue class 1 (denoting a yes vote). <p> Hence, there is extremely high confidence that C is a proper capsule, and the voter can then vote by selecting one of the components of C. Formal proofs that this procedure does not yield any extraneous information are included in <ref> [CoFi85] </ref>. 4.2 Quadratic Residuosity The work on elections has been previously published (besides [CoFi85], see [Coh86], [Ben86], and [BeYu86] for some extensions), and the above sketch is included only to motivate the use of capsules. <p> Formal proofs that this procedure does not yield any extraneous information are included in <ref> [CoFi85] </ref>. 4.2 Quadratic Residuosity The work on elections has been previously published (besides [CoFi85], see [Coh86], [Ben86], and [BeYu86] for some extensions), and the above sketch is included only to motivate the use of capsules.
Reference: [Coh86] <author> Cohen, J. </author> <title> "Improving Privacy in Cryptographic Elections." </title> <institution> TR-454, Yale University, Departement of Computer Science, </institution> <address> New Haven, CT (Feb. </address> <year> 1986). </year>
Reference-contexts: Capsules are an instrumental part of the machinery used to compose ballots in the cryptographic election scheme of [CoFi85] (see also <ref> [Coh86] </ref>, [Ben86], and [BeYu86]), but they have far broader applications. Use of capsules substantially simplifies the "zero-knowledge" interactive proof system for quadratic non-residuosity published in [GMR85]. Their use also provides a tremendous simplification of the "result-indistinguishable" interactive proof system published in [GHY85]. <p> Formal proofs that this procedure does not yield any extraneous information are included in [CoFi85]. 4.2 Quadratic Residuosity The work on elections has been previously published (besides [CoFi85], see <ref> [Coh86] </ref>, [Ben86], and [BeYu86] for some extensions), and the above sketch is included only to motivate the use of capsules.
Reference: [FMR84] <author> Fischer, M., Micali, S., and Rackoff, C. </author> <title> "A Secure Protocol for the Oblivious Transfer." </title> <booktitle> Presented at Eurocrypt84, Paris, France (Apr. 1984). (Not in proceedings.) </booktitle>
Reference-contexts: The voter, however, does not want to reveal to which of class 0 or class 1 his or her vote belongs. To prove that a chosen capsule C is of the required form, a voter engages in an interactive proof (see <ref> [FMR84] </ref> and [GMR85]). Each voter prepares a set B of (say) 100 additional capsules | each one, as the original, consisting of a random member of residue class 0 and a random member of residue class 1.
Reference: [GHY85] <author> Galil, Z., Haber, S., and Yung, M. </author> <title> "A Private Interactive Test of a Boolean Predicate and Minimum-Knowledge Public-Key Cryptosystems." </title> <booktitle> Proc. 26 th IEEE Symp. on Foundations of Computer Science, </booktitle> <address> Portland, OR (Oct. </address> <year> 1985), </year> <pages> 372-382. </pages>
Reference-contexts: Use of capsules substantially simplifies the "zero-knowledge" interactive proof system for quadratic non-residuosity published in [GMR85]. Their use also provides a tremendous simplification of the "result-indistinguishable" interactive proof system published in <ref> [GHY85] </ref>. Capsules have been incorporated into the zero-knowledge protocol for interactively proving non-isomorphism of graphs described in [GMW86]. Finally, capsules are shown here to provide a mechanism more efficient than that of [GMW86] by which Alice can convince Bob (in a zero-knowledge fashion) of the validity of any NP predicate. <p> In section 4.2, we shall examine how the use of capsules can greatly simplify protocols which have been published in [GMR85] and <ref> [GHY85] </ref>. 4.2.1 Zero-Knowledge Non-residuosity In [GMR85], a protocol is given whereby Alice convinces Bob that a given y is not a quadratic residue modulo a given n. (It is presumed that Alice has the factorization of n and that Bob does not.) Alice convinces Bob that y is not a residue <p> As before, unless Bob already has sufficient information to determine the class of w without Alice's help, Bob has only 1 chance in 2 100 of successfully answering Alice's challenges. 4.2.2 Result-indistinguishable Residuosity <ref> [GHY85] </ref> generalizes the result of [GMR85] in such a way that an observer, Carol, watching the protocol between Alice and Bob gains no information from the protocol as to whether Alice convinced Bob that a given z was or was not a quadratic residue. <p> By using three-component capsules, the protocol of <ref> [GHY85] </ref> can be simplified tremendously. Bob simply prepares a master capsule C, cosisting of one member of each of X, Y , and Z, and (say) 100 additional scratch capsules of the same form. Alice designates some subset of the scratch capsules, and Bob opens these. <p> Finally, it is not hard to show that Carol receives absolutely no information from watching this protocol that she could not have obtained on her own. The necessary proofs of both [GMR85] and <ref> [GHY85] </ref> remain unchanged except for some straightforward simplifications and the removal of some analyses which are no longer necessary when the revised protocols are used. 4.3 Graph Non-isomorphism One example in which capsules are useful without the aid of residue classes is seen in a protocol for graph non-isomorphism described in
Reference: [GoMi84] <author> Goldwasser, S. and Micali, S. </author> <title> "Probabilistic Encryption." </title> <journal> J. Comput. System Sci. </journal> <volume> 28, </volume> <month> 2 (Apr. </month> <year> 1984), </year> <pages> 270-299. </pages>
Reference: [GMR85] <author> Goldwasser, S., Micali, S., and Rackoff, C. </author> <title> "The Knowledge of Complexity of Interactive Proof-Systems." </title> <booktitle> Proc. 17 th ACM Symp. on Theory of Computing, </booktitle> <address> Providence, RI (May 1985), </address> <pages> 291-304. </pages>
Reference-contexts: Capsules are an instrumental part of the machinery used to compose ballots in the cryptographic election scheme of [CoFi85] (see also [Coh86], [Ben86], and [BeYu86]), but they have far broader applications. Use of capsules substantially simplifies the "zero-knowledge" interactive proof system for quadratic non-residuosity published in <ref> [GMR85] </ref>. Their use also provides a tremendous simplification of the "result-indistinguishable" interactive proof system published in [GHY85]. Capsules have been incorporated into the zero-knowledge protocol for interactively proving non-isomorphism of graphs described in [GMW86]. <p> The voter, however, does not want to reveal to which of class 0 or class 1 his or her vote belongs. To prove that a chosen capsule C is of the required form, a voter engages in an interactive proof (see [FMR84] and <ref> [GMR85] </ref>). Each voter prepares a set B of (say) 100 additional capsules | each one, as the original, consisting of a random member of residue class 0 and a random member of residue class 1. <p> In section 4.2, we shall examine how the use of capsules can greatly simplify protocols which have been published in <ref> [GMR85] </ref> and [GHY85]. 4.2.1 Zero-Knowledge Non-residuosity In [GMR85], a protocol is given whereby Alice convinces Bob that a given y is not a quadratic residue modulo a given n. (It is presumed that Alice has the factorization of n and that Bob does not.) Alice convinces Bob that y is not <p> In section 4.2, we shall examine how the use of capsules can greatly simplify protocols which have been published in <ref> [GMR85] </ref> and [GHY85]. 4.2.1 Zero-Knowledge Non-residuosity In [GMR85], a protocol is given whereby Alice convinces Bob that a given y is not a quadratic residue modulo a given n. (It is presumed that Alice has the factorization of n and that Bob does not.) Alice convinces Bob that y is not a residue by demonstrating her ability to <p> As before, unless Bob already has sufficient information to determine the class of w without Alice's help, Bob has only 1 chance in 2 100 of successfully answering Alice's challenges. 4.2.2 Result-indistinguishable Residuosity [GHY85] generalizes the result of <ref> [GMR85] </ref> in such a way that an observer, Carol, watching the protocol between Alice and Bob gains no information from the protocol as to whether Alice convinced Bob that a given z was or was not a quadratic residue. The key addition to the protocol of [GMR85] is the inclusion of <p> generalizes the result of <ref> [GMR85] </ref> in such a way that an observer, Carol, watching the protocol between Alice and Bob gains no information from the protocol as to whether Alice convinced Bob that a given z was or was not a quadratic residue. The key addition to the protocol of [GMR85] is the inclusion of a third set of possibilities. Instead of choosing w from among just two sets X and Y , Bob may select from an additional set Z. <p> The remainder of the protocol is similar to <ref> [GMR85] </ref>, except that the unrevealed portions of four sets instead of just two have to be simultaneously balanced (necessitating an even more arduous analysis), and a four by three table of functions is needed corresponding to which set w is a member of and which class each unopened element is a <p> Finally, it is not hard to show that Carol receives absolutely no information from watching this protocol that she could not have obtained on her own. The necessary proofs of both <ref> [GMR85] </ref> and [GHY85] remain unchanged except for some straightforward simplifications and the removal of some analyses which are no longer necessary when the revised protocols are used. 4.3 Graph Non-isomorphism One example in which capsules are useful without the aid of residue classes is seen in a protocol for graph non-isomorphism <p> Their original protocol closely followed the non-residuosity protocol of <ref> [GMR85] </ref>. Here, a prover designates a graph H given by the verifier as either a permutation of graph G 1 or of graph G 2 only after being convinced that the prover already holds such a permutation.
Reference: [GMW86] <author> Goldreich, O., Micali, S., and Wigderson, A. </author> <title> "Proofs that Yield Nothing But their Validity and a Methodology of Cryptographic Protocol Design." </title> <booktitle> Proc. 27 th IEEE Symp. on Foundations of Computer Science, Toronto, ON (Oct. </booktitle> <year> 1986), </year> <pages> 174-187. </pages>
Reference-contexts: Use of capsules substantially simplifies the "zero-knowledge" interactive proof system for quadratic non-residuosity published in [GMR85]. Their use also provides a tremendous simplification of the "result-indistinguishable" interactive proof system published in [GHY85]. Capsules have been incorporated into the zero-knowledge protocol for interactively proving non-isomorphism of graphs described in <ref> [GMW86] </ref>. Finally, capsules are shown here to provide a mechanism more efficient than that of [GMW86] by which Alice can convince Bob (in a zero-knowledge fashion) of the validity of any NP predicate. <p> Their use also provides a tremendous simplification of the "result-indistinguishable" interactive proof system published in [GHY85]. Capsules have been incorporated into the zero-knowledge protocol for interactively proving non-isomorphism of graphs described in <ref> [GMW86] </ref>. Finally, capsules are shown here to provide a mechanism more efficient than that of [GMW86] by which Alice can convince Bob (in a zero-knowledge fashion) of the validity of any NP predicate. <p> remain unchanged except for some straightforward simplifications and the removal of some analyses which are no longer necessary when the revised protocols are used. 4.3 Graph Non-isomorphism One example in which capsules are useful without the aid of residue classes is seen in a protocol for graph non-isomorphism described in <ref> [GMW86] </ref>. Their original protocol closely followed the non-residuosity protocol of [GMR85]. Here, a prover designates a graph H given by the verifier as either a permutation of graph G 1 or of graph G 2 only after being convinced that the prover already holds such a permutation. <p> With this modificiation, their protocol and its analysis have been simplified. 5 Boolean Circuit Satisfiability Very recently (also in <ref> [GMW86] </ref>), Goldreich, Micali, and Wigderson gave a simple and elegant zero-knowledge interactive protocol to prove for any k that a graph is k-colorable without revealing any information about a specific coloring (note that it is assumed that the prover possesses a k-coloring of the graph). <p> The method uses capsules to give a zero-knowledge protocol to interactively prove that a given Boolean formula (or arbitrary Boolean circuit with in-degree 2) has a satisfying assignment. Brassard and Crepeau in [BrCr86] independently of both this work and <ref> [GMW86] </ref> have achieved the same result, and a similar result is given in [Cha86]. The major advantage of this method over the original is efficiency.
Reference: [Yao82] <author> Yao, A. </author> <title> "Theory and Applications of Trapdoor Functions." </title> <booktitle> Proc. 23 rd IEEE Symp. on Foundations of Computer Science, </booktitle> <address> Chicago, IL (Nov. </address> <year> 1982), </year> <pages> 80-91. </pages>
References-found: 12

