URL: http://www.cs.brown.edu/cgc/papers/dtv-osrdp-96.ps.gz
Refering-URL: http://www.cs.brown.edu/people/rt/papers/recent-papers/recent-papers.html
Root-URL: http://www.cs.brown.edu
Email: dibattista@iasi.rm.cnr.it  rt@cs.brown.edu  lv@cs.brown.edu  
Author: Giuseppe Di Battista Roberto Tamassia Luca Vismara 
Address: Via della Vasca Navale 84, 00146 Roma, Italy  Providence, Rhode Island 02912-1910  Providence, Rhode Island 02912-1910  
Affiliation: Dipartimento di Discipline Scientifiche Sezione Informatica Terza Universita degli Studi di Roma  Center for Geometric Computing Department of Computer Science Brown University  Center for Geometric Computing Department of Computer Science Brown University  di Supporto alla Progettazione di Sistemi Informativi of  
Note: (Extended Abstract)  Research supported in part by the National Science Foundation under grant CCR-9423847, by the NATO Scientific Affairs Division under collaborative research grant 911016, by the Progetto Coordinato Ambienti  the Italian National Research Council, by the Progetto Bilaterale 94.23.CT07 Italia-USA of the Italian National Research Council, and by the Project Alcom-IT of the Esprit Program.  
Abstract: Output-Sensitive Reporting of Disjoint Paths Abstract A k-path query on a graph consists of computing k vertex-disjoint paths between two given vertices of the graph, whenever they exist. In this paper, we study the problem of performing k-path queries, with k 3, in a graph G with n vertices. We denote with ` the total length of the paths reported. For k 3, we present an optimal static data structure for G that uses O(n) space and executes k-path queries in output-sensitive O(`) time. We also give a semi-dynamic version of the data structure that supports a sequence of intermixed queries and insertions of vertices and edges in a planar graph, with worst-case query time O(`) and amortized insertion time O(log n). Our results make use of a new combinatorial structure for triconnected planar graphs that plays the same role as bipolar (st) orientations for biconnected planar graphs. This combinatorial structure also yields an alternative construction of convex drawings of triconnected planar graphs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Biedl and G. Kant. </author> <title> A better heuristic for orthogonal graph drawings. </title> <booktitle> In Algorithms (Proc. ESA '94), volume 855 of Lecture Notes in Computer Science, </booktitle> <pages> pages 24-35. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Bipolar orientations and st-numberings of biconnected graphs were first defined in conjunction with a planarity testing algorithm [18, 34], and were later used for a variety of topological and geometric graph problems, such as embedding (see, e.g., [5, 11, 42]), visibility (see, e.g., [39, 43, 48]), drawing (see, e.g., <ref> [1, 10, 44] </ref>), point location (see, e.g., [36, 45]), and floorplanning (see, e.g., [31]). One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice [32] on the vertices of the graph. See [8] for a recent comprehensive study of bipolar orientations.
Reference: [2] <author> G. Brightwell and W. T. Trotter. </author> <title> The order dimension of planar maps. </title> <type> Technical Report LSE-MPS-37, </type> <institution> Dept. of Statistical and Mathematical Sciences, London School of Economics and Political Science, </institution> <year> 1992. </year>
Reference-contexts: Schnyder [40] defines realizers of maximal planar graphs in his study of the order dimension of planar graphs, and shows their application to planar straight-line drawings [41]. The construction of realizers of maximal planar graphs can also be efficiently parallelized [19]. Brightwell and Trotter <ref> [2, 3] </ref> define normal families of paths for triconnected planar graphs, which are related to Schnyder's realizers. However, they do not analyze the time 1 complexity of their construction. Normal families of paths are important for the study of the order dimension of planar maps and convex polytopes. <p> Our O (n)-time construction of a realizer of triconnected planar graph G with n vertices has the following additional applications: We show how to compute a normal family of paths <ref> [2, 3] </ref> for G in O (n) time. Brightwell and Trotter [2, 3] previously showed the existence of such families, but did not study the time complexity of their construction. <p> Our O (n)-time construction of a realizer of triconnected planar graph G with n vertices has the following additional applications: We show how to compute a normal family of paths <ref> [2, 3] </ref> for G in O (n) time. Brightwell and Trotter [2, 3] previously showed the existence of such families, but did not study the time complexity of their construction.
Reference: [3] <author> G. Brightwell and W. T. Trotter. </author> <title> The order dimension of convex polytopes. </title> <journal> SIAM J. Discrete Math., </journal> <volume> 6(2) </volume> <pages> 230-245, </pages> <year> 1993. </year>
Reference-contexts: Schnyder [40] defines realizers of maximal planar graphs in his study of the order dimension of planar graphs, and shows their application to planar straight-line drawings [41]. The construction of realizers of maximal planar graphs can also be efficiently parallelized [19]. Brightwell and Trotter <ref> [2, 3] </ref> define normal families of paths for triconnected planar graphs, which are related to Schnyder's realizers. However, they do not analyze the time 1 complexity of their construction. Normal families of paths are important for the study of the order dimension of planar maps and convex polytopes. <p> Our O (n)-time construction of a realizer of triconnected planar graph G with n vertices has the following additional applications: We show how to compute a normal family of paths <ref> [2, 3] </ref> for G in O (n) time. Brightwell and Trotter [2, 3] previously showed the existence of such families, but did not study the time complexity of their construction. <p> Our O (n)-time construction of a realizer of triconnected planar graph G with n vertices has the following additional applications: We show how to compute a normal family of paths <ref> [2, 3] </ref> for G in O (n) time. Brightwell and Trotter [2, 3] previously showed the existence of such families, but did not study the time complexity of their construction. <p> If there exist two colors i; j 2 fb; g; rg; i 6= j such that p i (v) and p j (u) cross, then u 2 R j (v) and v 2 R i (u). 5 The properties of a normal family of paths <ref> [3] </ref> for a plane graph and three distinguished external vertices, are similar to the properties of the paths of Lemma 6. Brightwell and Trotter [3] proved that each triconnected plane graph has a normal family of paths for any three external vertices. Using the terminology of [3], we can say that <p> and p j (u) cross, then u 2 R j (v) and v 2 R i (u). 5 The properties of a normal family of paths <ref> [3] </ref> for a plane graph and three distinguished external vertices, are similar to the properties of the paths of Lemma 6. Brightwell and Trotter [3] proved that each triconnected plane graph has a normal family of paths for any three external vertices. Using the terminology of [3], we can say that Lemma 6 shows that the set fp i (v)ji 2 fb; g; rg; v 2 V g is a normal family of paths for <p> normal family of paths <ref> [3] </ref> for a plane graph and three distinguished external vertices, are similar to the properties of the paths of Lemma 6. Brightwell and Trotter [3] proved that each triconnected plane graph has a normal family of paths for any three external vertices. Using the terminology of [3], we can say that Lemma 6 shows that the set fp i (v)ji 2 fb; g; rg; v 2 V g is a normal family of paths for the three vertices v b , v g , and v r . 3.3 Applications to Graph Drawing The realizers we have
Reference: [4] <author> J. Cheriyan and S. N. Maheshwari. </author> <title> Finding nonseparating induced cycles and independent spanning trees in 3-connected graphs. </title> <journal> J. Algorithms, </journal> <volume> 9 </volume> <pages> 507-537, </pages> <year> 1988. </year>
Reference-contexts: However, they do not analyze the time 1 complexity of their construction. Normal families of paths are important for the study of the order dimension of planar maps and convex polytopes. Graph drawing methods based on orientations, numberings and realizers are surveyed in [23]. Cheriyan and Maheshwari <ref> [4] </ref>, and Zehavi and Itai [49] proved the existence of three independent spanning trees in triconnected graphs. <p> O (n) time a data structure for an n-vertex planar graph G (of arbitrary connectivity) that uses O (n) space and supports k-path queries, for k 3, in O (`) time, where ` is the total size of the paths reported. * By exploiting the result of Cheriyan and Maheshwari <ref> [4] </ref> and by defining new topological properties of general graphs, we show how to construct in O (n 2 ) time a data structure for an n-vertex graph G (of arbitrary connectivity) that uses O (n) space and supports k-path queries, for k 3, in O (`) time, where ` is <p> Let G be a triconnected graph with n vertices and m edges: * three spanning trees satisfying Properties 1-4 of the realizers can be constructed using the nonseparating ear decomposition of Cheriyan and Maheshwari <ref> [4] </ref>; by applying the algorithm on a sparse triconnected spanning subgraph of G [4, 35], the time complexity of the problem can be reduced from O (nm) to O (n 2 ); * the adjacency lists of the vertices of G are sorted according to the numbering of the ears, so <p> Let G be a triconnected graph with n vertices and m edges: * three spanning trees satisfying Properties 1-4 of the realizers can be constructed using the nonseparating ear decomposition of Cheriyan and Maheshwari [4]; by applying the algorithm on a sparse triconnected spanning subgraph of G <ref> [4, 35] </ref>, the time complexity of the problem can be reduced from O (nm) to O (n 2 ); * the adjacency lists of the vertices of G are sorted according to the numbering of the ears, so that Properties 5a and 5b of the realizers are satisfied; * visiting the
Reference: [5] <author> N. Chiba, T. Nishizeki, S. Abe, and T. Ozawa. </author> <title> A linear algorithm for embedding planar graphs using PQ-trees. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 30(1) </volume> <pages> 54-76, </pages> <year> 1985. </year>
Reference-contexts: Here, we overview previous work related to our combinatorial results. Bipolar orientations and st-numberings of biconnected graphs were first defined in conjunction with a planarity testing algorithm [18, 34], and were later used for a variety of topological and geometric graph problems, such as embedding (see, e.g., <ref> [5, 11, 42] </ref>), visibility (see, e.g., [39, 43, 48]), drawing (see, e.g., [1, 10, 44]), point location (see, e.g., [36, 45]), and floorplanning (see, e.g., [31]). One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice [32] on the vertices of the graph.
Reference: [6] <author> M. Chrobak and S. Nakano. </author> <title> Minimum-width grid drawings of plane graphs. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 104-110. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Canonical orderings were first defined by de Fraysseix, Pach and Pollack [9] for maximal planar graphs and later extended by Kant [30] to triconnected planar graphs. They have been successfully applied to the construction of various types of planar drawings (straight-line, orthogonal, and polyline) (see, e.g., <ref> [6, 9, 30] </ref>). Schnyder [40] defines realizers of maximal planar graphs in his study of the order dimension of planar graphs, and shows their application to planar straight-line drawings [41]. The construction of realizers of maximal planar graphs can also be efficiently parallelized [19].
Reference: [7] <author> R. F. Cohen, G. Di Battista, A. Kanevsky, and R. Tamassia. </author> <title> Reinventing the wheel: an optimal data structure for connectivity queries. </title> <booktitle> In Proc. 25th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 194-200, </pages> <year> 1993. </year>
Reference-contexts: or for (k 1)-connected graphs and fixed k &gt; 4, there are O (n)-space data structures that perform k-connectivity queries in O (1) time, but do not support output-sensitive k-path queries (see [42, 47] for k = 2, [12, 13] for k = 3, [29] for k = 4, and <ref> [7] </ref> for k &gt; 4). For k 4, several dynamic data structures have been devised for performing k-connectivity queries in a dynamic environment, where the queries are intermixed with insertions and/or deletions of vertices and edges [12, 16, 15, 20, 22, 24, 29, 33, 37, 38, 47].
Reference: [8] <author> H. de Fraysseix, P. O. de Mendez, and P. Rosenstiehl. </author> <title> Bipolar orientations revisited. </title> <journal> Discrete Appl. Math., </journal> <volume> 56 </volume> <pages> 157-179, </pages> <year> 1995. </year>
Reference-contexts: One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice [32] on the vertices of the graph. See <ref> [8] </ref> for a recent comprehensive study of bipolar orientations. Canonical orderings were first defined by de Fraysseix, Pach and Pollack [9] for maximal planar graphs and later extended by Kant [30] to triconnected planar graphs. <p> We recall that a triconnected planar graph has a unique planar embedding. 2.2 Bipolar Orientations and 2-Path Queries In this section we show how to perform output-sensitive 2-path queries on biconnected graphs. Let G be a graph with an edge (s; t). A bipolar orientation (also called st-orientation) <ref> [8, 34] </ref> of G with respect to an edge (s; t) is an acyclic digraph D obtained by orienting the edges of G such that D is acyclic, s is the unique source of D, and t is the unique sink of D.
Reference: [9] <author> H. de Fraysseix, J. Pach, and R. Pollack. </author> <title> Small sets supporting Fary embeddings of planar graphs. </title> <booktitle> In Proc. 20th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 426-433, </pages> <year> 1988. </year>
Reference-contexts: One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice [32] on the vertices of the graph. See [8] for a recent comprehensive study of bipolar orientations. Canonical orderings were first defined by de Fraysseix, Pach and Pollack <ref> [9] </ref> for maximal planar graphs and later extended by Kant [30] to triconnected planar graphs. They have been successfully applied to the construction of various types of planar drawings (straight-line, orthogonal, and polyline) (see, e.g., [6, 9, 30]). <p> Canonical orderings were first defined by de Fraysseix, Pach and Pollack [9] for maximal planar graphs and later extended by Kant [30] to triconnected planar graphs. They have been successfully applied to the construction of various types of planar drawings (straight-line, orthogonal, and polyline) (see, e.g., <ref> [6, 9, 30] </ref>). Schnyder [40] defines realizers of maximal planar graphs in his study of the order dimension of planar graphs, and shows their application to planar straight-line drawings [41]. The construction of realizers of maximal planar graphs can also be efficiently parallelized [19].
Reference: [10] <author> H. de Fraysseix and P. Rosenstiehl. </author> <title> Structures combinatoires pour des traces automatiques de reseaux. </title> <booktitle> In Proc. 3rd European Conf. on CAD/CAM and Computer Graphics, </booktitle> <pages> pages 332-337. </pages> <address> Hermes, </address> <year> 1984. </year>
Reference-contexts: Bipolar orientations and st-numberings of biconnected graphs were first defined in conjunction with a planarity testing algorithm [18, 34], and were later used for a variety of topological and geometric graph problems, such as embedding (see, e.g., [5, 11, 42]), visibility (see, e.g., [39, 43, 48]), drawing (see, e.g., <ref> [1, 10, 44] </ref>), point location (see, e.g., [36, 45]), and floorplanning (see, e.g., [31]). One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice [32] on the vertices of the graph. See [8] for a recent comprehensive study of bipolar orientations.
Reference: [11] <author> G. Di Battista and R. Tamassia. </author> <title> Incremental planarity testing. </title> <booktitle> In Proc. 30th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 436-441, </pages> <year> 1989. </year>
Reference-contexts: Here, we overview previous work related to our combinatorial results. Bipolar orientations and st-numberings of biconnected graphs were first defined in conjunction with a planarity testing algorithm [18, 34], and were later used for a variety of topological and geometric graph problems, such as embedding (see, e.g., <ref> [5, 11, 42] </ref>), visibility (see, e.g., [39, 43, 48]), drawing (see, e.g., [1, 10, 44]), point location (see, e.g., [36, 45]), and floorplanning (see, e.g., [31]). One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice [32] on the vertices of the graph.
Reference: [12] <author> G. Di Battista and R. Tamassia. </author> <title> On-line graph algorithms with SPQR-trees. </title> <booktitle> In Automata, Languages and Programming (Proc. ICALP '90), volume 442 of Lecture Notes in Computer Science, </booktitle> <pages> pages 598-611, </pages> <year> 1990. </year>
Reference-contexts: For general graphs and k 4, or for (k 1)-connected graphs and fixed k &gt; 4, there are O (n)-space data structures that perform k-connectivity queries in O (1) time, but do not support output-sensitive k-path queries (see [42, 47] for k = 2, <ref> [12, 13] </ref> for k = 3, [29] for k = 4, and [7] for k &gt; 4). <p> For k 4, several dynamic data structures have been devised for performing k-connectivity queries in a dynamic environment, where the queries are intermixed with insertions and/or deletions of vertices and edges <ref> [12, 16, 15, 20, 22, 24, 29, 33, 37, 38, 47] </ref>. <p> This completes the description of our theoretically optimal and practically efficient data structure for 3-path queries. 4.5 General Planar Graphs The result of Theorem 5 can be extended to general (i.e., of arbitrary connectivity) planar graphs by suitably augmenting the static data structure of <ref> [12, 13] </ref> for 3-connectivity queries. This is essentially done by storing at each triconnected component the data structure of Theorem 5. <p> Observe that in the construction of Lemmas 12-14 the inmost and outmost paths may change. 6.3 Data Structure and Complexity We answer 3-path queries in a semi-dynamic environment where queries are intermixed with insertions of vertices and edges by suitably augmenting the on-line data structure of <ref> [12, 13] </ref> for 3-connectivity queries. This is essentially done by storing with each triconnected component the data structure of Theorem 5. 10 The insertion of an edge in the graph may cause two or more "old" triconnected components to be merged into a "new" triconnected component G.
Reference: [13] <author> G. Di Battista and R. Tamassia. </author> <title> On-line maintenance of triconnected components with SPQR-trees. Algo-rithmica, to appear. </title> <type> Preprint: Technical Report CS-92-40, </type> <institution> Comput. Sci. Dept., Brown Univ., </institution> <year> 1992. </year>
Reference-contexts: For general graphs and k 4, or for (k 1)-connected graphs and fixed k &gt; 4, there are O (n)-space data structures that perform k-connectivity queries in O (1) time, but do not support output-sensitive k-path queries (see [42, 47] for k = 2, <ref> [12, 13] </ref> for k = 3, [29] for k = 4, and [7] for k &gt; 4). <p> This completes the description of our theoretically optimal and practically efficient data structure for 3-path queries. 4.5 General Planar Graphs The result of Theorem 5 can be extended to general (i.e., of arbitrary connectivity) planar graphs by suitably augmenting the static data structure of <ref> [12, 13] </ref> for 3-connectivity queries. This is essentially done by storing at each triconnected component the data structure of Theorem 5. <p> Observe that in the construction of Lemmas 12-14 the inmost and outmost paths may change. 6.3 Data Structure and Complexity We answer 3-path queries in a semi-dynamic environment where queries are intermixed with insertions of vertices and edges by suitably augmenting the on-line data structure of <ref> [12, 13] </ref> for 3-connectivity queries. This is essentially done by storing with each triconnected component the data structure of Theorem 5. 10 The insertion of an edge in the graph may cause two or more "old" triconnected components to be merged into a "new" triconnected component G.
Reference: [14] <author> Y. Dinitz and A. Vainshtein. </author> <title> The connectivity carcass of a vertex subset in a graph and its incremental maintenance. </title> <booktitle> In Proc. 26th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 716-725, </pages> <year> 1994. </year>
Reference: [15] <author> D. Eppstein, Z. Galil, G. F. Italiano, and A. Nissenzweig. </author> <title> Sparsification: A technique for speeding up dynamic graph algorithms. </title> <booktitle> In Proc. 33rd Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 60-69, </pages> <year> 1992. </year>
Reference-contexts: For k 4, several dynamic data structures have been devised for performing k-connectivity queries in a dynamic environment, where the queries are intermixed with insertions and/or deletions of vertices and edges <ref> [12, 16, 15, 20, 22, 24, 29, 33, 37, 38, 47] </ref>.
Reference: [16] <author> D. Eppstein, Z. Galil, G. F. Italiano, and T. H. Spencer. </author> <title> Separator based sparsification for dynamic planar graph algorithms. </title> <booktitle> In Proc. 25th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 208-217, </pages> <year> 1993. </year>
Reference-contexts: For k 4, several dynamic data structures have been devised for performing k-connectivity queries in a dynamic environment, where the queries are intermixed with insertions and/or deletions of vertices and edges <ref> [12, 16, 15, 20, 22, 24, 29, 33, 37, 38, 47] </ref>. <p> there are O (n)-space data structures that support a sequence of t intermixed insertions and k-connectivity queries in a general graph in O (t ff (t; n)) time [33], and a sequence of t intermixed insertions, deletions and k-connectivity queries in a planar graph in O ( p n) time <ref> [16] </ref>. However, none of the previously known dynamic data structures is able to perform output-sensitive k-path queries. 1.2 Previous Results on Orientations and Orderings of Planar Graphs Orientations and orderings are powerful combinatorial structures that have been successfully applied to solving problems on planar graphs.
Reference: [17] <author> S. Even and R. E. Tarjan. </author> <title> Network flow and testing graph connectivity. </title> <journal> SIAM J. Comput., </journal> <volume> 4 </volume> <pages> 507-518, </pages> <year> 1975. </year>
Reference-contexts: Ideally, we would like to achieve f (n) = O (1). 1.1 Previous Results on Path and Connectivity Queries In this section we overview previous results on k-path and k-connectivity queries. First, we consider algorithms that do not exploit preprocessing. Using network flow techniques <ref> [17] </ref>, a k-path query can be answered in O (m p time for arbitrary k, and in O (n + m) time for any fixed k. Regarding planar graphs, it has been recently shown that a k-path query can be performed in O (n) time for any k [46].
Reference: [18] <author> S. Even and R. E. Tarjan. </author> <title> Computing an st-numbering. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 2 </volume> <pages> 339-344, </pages> <year> 1976. </year>
Reference-contexts: Here, we overview previous work related to our combinatorial results. Bipolar orientations and st-numberings of biconnected graphs were first defined in conjunction with a planarity testing algorithm <ref> [18, 34] </ref>, and were later used for a variety of topological and geometric graph problems, such as embedding (see, e.g., [5, 11, 42]), visibility (see, e.g., [39, 43, 48]), drawing (see, e.g., [1, 10, 44]), point location (see, e.g., [36, 45]), and floorplanning (see, e.g., [31]). <p> A biconnected graph admits a bipolar orientation with respect to any edge (s; t), which can be computed in linear time <ref> [18] </ref>. Given a bipolar orientation of a biconnected graph G, we construct two spanning trees of G, T s and T t , rooted at s and t, respectively, as shown by Itai and Rodeh [25, 26].
Reference: [19] <author> M. Furer, X. He, M.-Y. Kao, and B. Raghavachari. </author> <title> O(n log n)-work parallel algorithm for straight-line grid embedding of planar graphs. </title> <booktitle> In Proc. ACM Sympos. Parallel Algorithms Architect., </booktitle> <pages> pages 100-109, </pages> <year> 1992. </year>
Reference-contexts: Schnyder [40] defines realizers of maximal planar graphs in his study of the order dimension of planar graphs, and shows their application to planar straight-line drawings [41]. The construction of realizers of maximal planar graphs can also be efficiently parallelized <ref> [19] </ref>. Brightwell and Trotter [2, 3] define normal families of paths for triconnected planar graphs, which are related to Schnyder's realizers. However, they do not analyze the time 1 complexity of their construction.
Reference: [20] <author> Z. Galil and G. F. </author> <title> Italiano. Maintaining biconnected components of dynamic planar graphs. </title> <booktitle> In Automata, Languages and Programming (Proc. ICALP '91), volume 510 of Lecture Notes in Computer Science, </booktitle> <pages> pages 339-350. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: For k 4, several dynamic data structures have been devised for performing k-connectivity queries in a dynamic environment, where the queries are intermixed with insertions and/or deletions of vertices and edges <ref> [12, 16, 15, 20, 22, 24, 29, 33, 37, 38, 47] </ref>.
Reference: [21] <author> Z. Galil, G. F. Italiano, and N. Sarnak. </author> <title> Fully dynamic planarity testing. </title> <booktitle> In Proc. 24th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 495-506, </pages> <year> 1992. </year>
Reference: [22] <author> D. Giammarresi and G. F. </author> <title> Italiano. Dynamic 2- and 3-connectivity on planar graphs. </title> <booktitle> In Proc. 3rd Scand. Workshop Algorithm Theory, volume 621 of Lecture Notes in Computer Science, </booktitle> <pages> pages 221-232. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: For k 4, several dynamic data structures have been devised for performing k-connectivity queries in a dynamic environment, where the queries are intermixed with insertions and/or deletions of vertices and edges <ref> [12, 16, 15, 20, 22, 24, 29, 33, 37, 38, 47] </ref>.
Reference: [23] <author> X. He and M.-Y. Kao. </author> <title> Regular edge labelings and drawings of planar graphs. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 96-103. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: However, they do not analyze the time 1 complexity of their construction. Normal families of paths are important for the study of the order dimension of planar maps and convex polytopes. Graph drawing methods based on orientations, numberings and realizers are surveyed in <ref> [23] </ref>. Cheriyan and Maheshwari [4], and Zehavi and Itai [49] proved the existence of three independent spanning trees in triconnected graphs.
Reference: [24] <author> J. Hershberger, M. Rauch, and S. Suri. </author> <title> Fully dynamic 2-edge-connectivity in planar graphs. </title> <booktitle> In Proc. 3rd Scand. Workshop Algorithm Theory, volume 621 of Lecture Notes in Computer Science, </booktitle> <pages> pages 233-244. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: For k 4, several dynamic data structures have been devised for performing k-connectivity queries in a dynamic environment, where the queries are intermixed with insertions and/or deletions of vertices and edges <ref> [12, 16, 15, 20, 22, 24, 29, 33, 37, 38, 47] </ref>.
Reference: [25] <author> A. Itai and M. Rodeh. </author> <title> The multi-tree approach to reliability in distributed networks. </title> <booktitle> In Proc. 25th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 137-147, </pages> <year> 1984. </year>
Reference-contexts: Given a bipolar orientation of a biconnected graph G, we construct two spanning trees of G, T s and T t , rooted at s and t, respectively, as shown by Itai and Rodeh <ref> [25, 26] </ref>. Tree T s is obtained by selecting for every vertex v 6= s an edge of G incident on v that is directed towards v in the orientation. Tree T t is similarly obtained by selecting an outgoing edge for every vertex distinct from t.
Reference: [26] <author> A. Itai and M. Rodeh. </author> <title> The multi-tree approach to reliability in distributed networks. </title> <journal> Inform. and Comput., </journal> <volume> 79(1) </volume> <pages> 43-59, </pages> <year> 1988. </year>
Reference-contexts: Given a bipolar orientation of a biconnected graph G, we construct two spanning trees of G, T s and T t , rooted at s and t, respectively, as shown by Itai and Rodeh <ref> [25, 26] </ref>. Tree T s is obtained by selecting for every vertex v 6= s an edge of G incident on v that is directed towards v in the orientation. Tree T t is similarly obtained by selecting an outgoing edge for every vertex distinct from t.
Reference: [27] <author> G. F. Italiano and Z. Galil. </author> <title> Fully dynamic algorithms for edge connectivity problems. </title> <booktitle> In Proc. 23rd Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 317-327, </pages> <year> 1991. </year>
Reference: [28] <author> G. F. Italiano, J. A. La Poutre, and M. H. Rauch. </author> <title> Fully dynamic planarity testing in planar embedded graphs. </title> <booktitle> In Algorithms (Proc. ESA '93), volume 726 of Lecture Notes in Computer Science, </booktitle> <pages> pages 212-223. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [29] <author> A. Kanevsky, R. Tamassia, G. Di Battista, and J. Chen. </author> <title> On-line maintenance of the four-connected components of a graph. </title> <booktitle> In Proc. Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 793-801, </pages> <year> 1991. </year>
Reference-contexts: For general graphs and k 4, or for (k 1)-connected graphs and fixed k &gt; 4, there are O (n)-space data structures that perform k-connectivity queries in O (1) time, but do not support output-sensitive k-path queries (see [42, 47] for k = 2, [12, 13] for k = 3, <ref> [29] </ref> for k = 4, and [7] for k &gt; 4). <p> For k 4, several dynamic data structures have been devised for performing k-connectivity queries in a dynamic environment, where the queries are intermixed with insertions and/or deletions of vertices and edges <ref> [12, 16, 15, 20, 22, 24, 29, 33, 37, 38, 47] </ref>.
Reference: [30] <author> G. Kant. </author> <title> Drawing planar graphs using the lmc-ordering. </title> <booktitle> In Proc. 33rd Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 101-110, </pages> <year> 1992. </year>
Reference-contexts: See [8] for a recent comprehensive study of bipolar orientations. Canonical orderings were first defined by de Fraysseix, Pach and Pollack [9] for maximal planar graphs and later extended by Kant <ref> [30] </ref> to triconnected planar graphs. They have been successfully applied to the construction of various types of planar drawings (straight-line, orthogonal, and polyline) (see, e.g., [6, 9, 30]). <p> Canonical orderings were first defined by de Fraysseix, Pach and Pollack [9] for maximal planar graphs and later extended by Kant [30] to triconnected planar graphs. They have been successfully applied to the construction of various types of planar drawings (straight-line, orthogonal, and polyline) (see, e.g., <ref> [6, 9, 30] </ref>). Schnyder [40] defines realizers of maximal planar graphs in his study of the order dimension of planar graphs, and shows their application to planar straight-line drawings [41]. The construction of realizers of maximal planar graphs can also be efficiently parallelized [19]. <p> with O (n 2 ) area. (A convex grid drawing is a planar straight-line drawing with faces drawn as convex polygons and vertices placed at integer coordinates.) This extends to triconnected planar graphs Schnyder's barycentric drawing method for maximal planar graphs [40], and gives an alternative proof of Kant's result <ref> [30] </ref>. * Based on realizers, we show how to construct a linear-space data structure that supports output-sensitive 3-path queries in a triconnected planar graph. <p> requirement is linear in the current number of vertices, and a 2-path query is answered in time O (`) (worst-case), where ` is the size of the reported paths. 2.3 Canonical Orderings In this section we recall the definition of canonical orderings of triconnected plane graphs, as given by Kant <ref> [30] </ref>, and prove some preliminary results. Let G be a triconnected plane graph, and u 0 , u 1 , u 2 three consecutive external vertices of G. <p> Each subgraph G k is biconnected and internally triconnected, i.e. removing two internal vertices of G k does not disconnect it. 4. v n = u 0 and V H = fv n g. Lemma 2 <ref> [30] </ref> Each triconnected plane graph has a canonical ordering that can be computed in linear time and space. 3 Realizers of Triconnected Planar Graphs 3.1 Definition A realizer of a triconnected plane graph G is a triplet of rooted directed spanning trees of G with the following properties (see Fig. 1.a-1.c): <p> In particular, our realizers support the construction of barycentric drawings [40, 41], which yields an alternative proof of the following theorem: Theorem 3 <ref> [30] </ref> Let G be triconnected plane graph with n vertices.
Reference: [31] <author> G. Kant and X. </author> <title> He. Two algorithms for finding rectangular duals of planar graphs. </title> <booktitle> In Graph-Theoretic Concepts in Computer Science (Proc. WG '93), volume 790 of Lecture Notes in Computer Science, </booktitle> <pages> pages 396-410. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: with a planarity testing algorithm [18, 34], and were later used for a variety of topological and geometric graph problems, such as embedding (see, e.g., [5, 11, 42]), visibility (see, e.g., [39, 43, 48]), drawing (see, e.g., [1, 10, 44]), point location (see, e.g., [36, 45]), and floorplanning (see, e.g., <ref> [31] </ref>). One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice [32] on the vertices of the graph. See [8] for a recent comprehensive study of bipolar orientations.
Reference: [32] <author> D. Kelly and I. </author> <title> Rival. Planar lattices. </title> <journal> Canad. J. Math., </journal> <volume> 27(3) </volume> <pages> 636-665, </pages> <year> 1975. </year>
Reference-contexts: One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice <ref> [32] </ref> on the vertices of the graph. See [8] for a recent comprehensive study of bipolar orientations. Canonical orderings were first defined by de Fraysseix, Pach and Pollack [9] for maximal planar graphs and later extended by Kant [30] to triconnected planar graphs.
Reference: [33] <author> J. A. La Poutre. </author> <title> Maintenance of triconnected components of graphs. </title> <booktitle> In Automata, Languages and Programming (Proc. ICALP '92), volume 623 of Lecture Notes in Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: For k 4, several dynamic data structures have been devised for performing k-connectivity queries in a dynamic environment, where the queries are intermixed with insertions and/or deletions of vertices and edges <ref> [12, 16, 15, 20, 22, 24, 29, 33, 37, 38, 47] </ref>. <p> E.g., for k 3, there are O (n)-space data structures that support a sequence of t intermixed insertions and k-connectivity queries in a general graph in O (t ff (t; n)) time <ref> [33] </ref>, and a sequence of t intermixed insertions, deletions and k-connectivity queries in a planar graph in O ( p n) time [16].
Reference: [34] <author> A. Lempel, S. Even, and I. Cederbaum. </author> <title> An algorithm for planarity testing of graphs. In Theory of Graphs: </title> <booktitle> Internat. Symposium, </booktitle> <pages> pages 215-232, </pages> <address> New York, 1967. </address> <publisher> Gordon and Breach. </publisher>
Reference-contexts: Here, we overview previous work related to our combinatorial results. Bipolar orientations and st-numberings of biconnected graphs were first defined in conjunction with a planarity testing algorithm <ref> [18, 34] </ref>, and were later used for a variety of topological and geometric graph problems, such as embedding (see, e.g., [5, 11, 42]), visibility (see, e.g., [39, 43, 48]), drawing (see, e.g., [1, 10, 44]), point location (see, e.g., [36, 45]), and floorplanning (see, e.g., [31]). <p> We recall that a triconnected planar graph has a unique planar embedding. 2.2 Bipolar Orientations and 2-Path Queries In this section we show how to perform output-sensitive 2-path queries on biconnected graphs. Let G be a graph with an edge (s; t). A bipolar orientation (also called st-orientation) <ref> [8, 34] </ref> of G with respect to an edge (s; t) is an acyclic digraph D obtained by orienting the edges of G such that D is acyclic, s is the unique source of D, and t is the unique sink of D.
Reference: [35] <author> H. Nagamochi and T. Ibaraki. </author> <title> A linear-time algorithm for finding a sparse k-connected spanning subgraph of a k-connected graph. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 583-596, </pages> <year> 1992. </year>
Reference-contexts: If G has no vertex of degree three, we first apply the algorithm of Nagamochi and Ibaraki <ref> [35] </ref> to obtain a sparse triconnected spanning subgraph G 0 of G; G 0 is guaranteed to have a vertex x of degree three (see Lemma 2.6 of [35]). <p> If G has no vertex of degree three, we first apply the algorithm of Nagamochi and Ibaraki <ref> [35] </ref> to obtain a sparse triconnected spanning subgraph G 0 of G; G 0 is guaranteed to have a vertex x of degree three (see Lemma 2.6 of [35]). Otherwise we let G 0 = G Then, a realizer of G 0 is computed, as shown in the proof of Lemma 3, with v 1 = x; a realizer of G 0 is also a realizer of G. <p> By Lemma 3 and by Theorem 2.1 of <ref> [35] </ref>, we assume that G has been embedded and a common-sink realizer T b , T g , T r of G has been constructed, which can be done in O (n) time. <p> Let G be a triconnected graph with n vertices and m edges: * three spanning trees satisfying Properties 1-4 of the realizers can be constructed using the nonseparating ear decomposition of Cheriyan and Maheshwari [4]; by applying the algorithm on a sparse triconnected spanning subgraph of G <ref> [4, 35] </ref>, the time complexity of the problem can be reduced from O (nm) to O (n 2 ); * the adjacency lists of the vertices of G are sorted according to the numbering of the ears, so that Properties 5a and 5b of the realizers are satisfied; * visiting the
Reference: [36] <author> F. P. Preparata and R. Tamassia. </author> <title> Fully dynamic point location in a monotone subdivision. </title> <journal> SIAM J. Comput., </journal> <volume> 18 </volume> <pages> 811-830, </pages> <year> 1989. </year>
Reference-contexts: graphs were first defined in conjunction with a planarity testing algorithm [18, 34], and were later used for a variety of topological and geometric graph problems, such as embedding (see, e.g., [5, 11, 42]), visibility (see, e.g., [39, 43, 48]), drawing (see, e.g., [1, 10, 44]), point location (see, e.g., <ref> [36, 45] </ref>), and floorplanning (see, e.g., [31]). One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice [32] on the vertices of the graph. See [8] for a recent comprehensive study of bipolar orientations.
Reference: [37] <author> M. Rauch. </author> <title> Fully dynamic biconnectivity in graphs. </title> <booktitle> Proc. 33rd Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 50-59, </pages> <year> 1992. </year>
Reference-contexts: For k 4, several dynamic data structures have been devised for performing k-connectivity queries in a dynamic environment, where the queries are intermixed with insertions and/or deletions of vertices and edges <ref> [12, 16, 15, 20, 22, 24, 29, 33, 37, 38, 47] </ref>.
Reference: [38] <author> M. Rauch. </author> <title> Improved data structures for fully dynamic biconnectivity. </title> <booktitle> In Proc. 26th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 686-695, </pages> <year> 1994. </year>
Reference-contexts: For k 4, several dynamic data structures have been devised for performing k-connectivity queries in a dynamic environment, where the queries are intermixed with insertions and/or deletions of vertices and edges <ref> [12, 16, 15, 20, 22, 24, 29, 33, 37, 38, 47] </ref>.
Reference: [39] <author> P. Rosenstiehl and R. E. Tarjan. </author> <title> Rectilinear planar layouts and bipolar orientations of planar graphs. </title> <journal> Discrete Comput. Geom., </journal> <volume> 1(4) </volume> <pages> 343-353, </pages> <year> 1986. </year>
Reference-contexts: Bipolar orientations and st-numberings of biconnected graphs were first defined in conjunction with a planarity testing algorithm [18, 34], and were later used for a variety of topological and geometric graph problems, such as embedding (see, e.g., [5, 11, 42]), visibility (see, e.g., <ref> [39, 43, 48] </ref>), drawing (see, e.g., [1, 10, 44]), point location (see, e.g., [36, 45]), and floorplanning (see, e.g., [31]). One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice [32] on the vertices of the graph.
Reference: [40] <author> W. Schnyder. </author> <title> Planar graphs and poset dimension. </title> <booktitle> Order, </booktitle> <volume> 5 </volume> <pages> 323-343, </pages> <year> 1989. </year>
Reference-contexts: They have been successfully applied to the construction of various types of planar drawings (straight-line, orthogonal, and polyline) (see, e.g., [6, 9, 30]). Schnyder <ref> [40] </ref> defines realizers of maximal planar graphs in his study of the order dimension of planar graphs, and shows their application to planar straight-line drawings [41]. The construction of realizers of maximal planar graphs can also be efficiently parallelized [19]. <p> Our definition naturally extends the one by Schnyder <ref> [40] </ref> using a chromatic framework such that each edge of the graph has one or two colors from the set fblue, green, redg. Our realizers induce an orientation of a triconnected planar graph with properties closely related to those of bipolar orientations for biconnected planar graphs. <p> algorithm for constructing a convex grid drawing of G with O (n 2 ) area. (A convex grid drawing is a planar straight-line drawing with faces drawn as convex polygons and vertices placed at integer coordinates.) This extends to triconnected planar graphs Schnyder's barycentric drawing method for maximal planar graphs <ref> [40] </ref>, and gives an alternative proof of Kant's result [30]. * Based on realizers, we show how to construct a linear-space data structure that supports output-sensitive 3-path queries in a triconnected planar graph. <p> fp i (v)ji 2 fb; g; rg; v 2 V g is a normal family of paths for the three vertices v b , v g , and v r . 3.3 Applications to Graph Drawing The realizers we have defined for triconnected graphs naturally extend those defined by Schnyder <ref> [40, 41] </ref> for maximal planar graphs, where each internal edge has exactly one color. In particular, our realizers support the construction of barycentric drawings [40, 41], which yields an alternative proof of the following theorem: Theorem 3 [30] Let G be triconnected plane graph with n vertices. <p> v g , and v r . 3.3 Applications to Graph Drawing The realizers we have defined for triconnected graphs naturally extend those defined by Schnyder <ref> [40, 41] </ref> for maximal planar graphs, where each internal edge has exactly one color. In particular, our realizers support the construction of barycentric drawings [40, 41], which yields an alternative proof of the following theorem: Theorem 3 [30] Let G be triconnected plane graph with n vertices.
Reference: [41] <author> W. Schnyder. </author> <title> Embedding planar graphs on the grid. </title> <booktitle> In Proc. 1st ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 138-148, </pages> <year> 1990. </year>
Reference-contexts: They have been successfully applied to the construction of various types of planar drawings (straight-line, orthogonal, and polyline) (see, e.g., [6, 9, 30]). Schnyder [40] defines realizers of maximal planar graphs in his study of the order dimension of planar graphs, and shows their application to planar straight-line drawings <ref> [41] </ref>. The construction of realizers of maximal planar graphs can also be efficiently parallelized [19]. Brightwell and Trotter [2, 3] define normal families of paths for triconnected planar graphs, which are related to Schnyder's realizers. However, they do not analyze the time 1 complexity of their construction. <p> fp i (v)ji 2 fb; g; rg; v 2 V g is a normal family of paths for the three vertices v b , v g , and v r . 3.3 Applications to Graph Drawing The realizers we have defined for triconnected graphs naturally extend those defined by Schnyder <ref> [40, 41] </ref> for maximal planar graphs, where each internal edge has exactly one color. In particular, our realizers support the construction of barycentric drawings [40, 41], which yields an alternative proof of the following theorem: Theorem 3 [30] Let G be triconnected plane graph with n vertices. <p> v g , and v r . 3.3 Applications to Graph Drawing The realizers we have defined for triconnected graphs naturally extend those defined by Schnyder <ref> [40, 41] </ref> for maximal planar graphs, where each internal edge has exactly one color. In particular, our realizers support the construction of barycentric drawings [40, 41], which yields an alternative proof of the following theorem: Theorem 3 [30] Let G be triconnected plane graph with n vertices.
Reference: [42] <author> R. Tamassia. </author> <title> A dynamic data structure for planar graph embedding. </title> <editor> In T. Lepisto and A. Salomaa, editors, </editor> <booktitle> Automata, Languages and Programming (Proc. ICALP '88), volume 317 of Lecture Notes in Computer Science, </booktitle> <pages> pages 576-590. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: For general graphs and k 4, or for (k 1)-connected graphs and fixed k &gt; 4, there are O (n)-space data structures that perform k-connectivity queries in O (1) time, but do not support output-sensitive k-path queries (see <ref> [42, 47] </ref> for k = 2, [12, 13] for k = 3, [29] for k = 4, and [7] for k &gt; 4). <p> Here, we overview previous work related to our combinatorial results. Bipolar orientations and st-numberings of biconnected graphs were first defined in conjunction with a planarity testing algorithm [18, 34], and were later used for a variety of topological and geometric graph problems, such as embedding (see, e.g., <ref> [5, 11, 42] </ref>), visibility (see, e.g., [39, 43, 48]), drawing (see, e.g., [1, 10, 44]), point location (see, e.g., [36, 45]), and floorplanning (see, e.g., [31]). One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice [32] on the vertices of the graph. <p> In a dynamic environment, where a sequence of intermixed 2-path queries and insertions of vertices and edges is performed on a graph G (of arbitrary connectivity), we augment a data structure for on-line 2-connectivity queries <ref> [42, 47] </ref> in G by storing with each block (biconnected component) the data structure of Theorem 1. 3 Theorem 2 There exists a data structure for general graphs that supports a sequence of t operations, each a 2-path query or the insertion of a vertex or an edge, starting from the
Reference: [43] <author> R. Tamassia and I. G. Tollis. </author> <title> A unified approach to visibility representations of planar graphs. </title> <journal> Discrete Comput. Geom., </journal> <volume> 1(4) </volume> <pages> 321-341, </pages> <year> 1986. </year>
Reference-contexts: Bipolar orientations and st-numberings of biconnected graphs were first defined in conjunction with a planarity testing algorithm [18, 34], and were later used for a variety of topological and geometric graph problems, such as embedding (see, e.g., [5, 11, 42]), visibility (see, e.g., <ref> [39, 43, 48] </ref>), drawing (see, e.g., [1, 10, 44]), point location (see, e.g., [36, 45]), and floorplanning (see, e.g., [31]). One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice [32] on the vertices of the graph.
Reference: [44] <author> R. Tamassia and I. G. Tollis. </author> <title> Planar grid embedding in linear time. </title> <journal> IEEE Trans. on Circuits and Systems, </journal> <volume> CAS-36(9):1230-1234, </volume> <year> 1989. </year>
Reference-contexts: Bipolar orientations and st-numberings of biconnected graphs were first defined in conjunction with a planarity testing algorithm [18, 34], and were later used for a variety of topological and geometric graph problems, such as embedding (see, e.g., [5, 11, 42]), visibility (see, e.g., [39, 43, 48]), drawing (see, e.g., <ref> [1, 10, 44] </ref>), point location (see, e.g., [36, 45]), and floorplanning (see, e.g., [31]). One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice [32] on the vertices of the graph. See [8] for a recent comprehensive study of bipolar orientations.
Reference: [45] <author> R. Tamassia and J. S. Vitter. </author> <title> Parallel transitive closure and point location in planar structures. </title> <journal> SIAM J. Comput., </journal> <volume> 20(4) </volume> <pages> 708-725, </pages> <year> 1991. </year>
Reference-contexts: graphs were first defined in conjunction with a planarity testing algorithm [18, 34], and were later used for a variety of topological and geometric graph problems, such as embedding (see, e.g., [5, 11, 42]), visibility (see, e.g., [39, 43, 48]), drawing (see, e.g., [1, 10, 44]), point location (see, e.g., <ref> [36, 45] </ref>), and floorplanning (see, e.g., [31]). One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice [32] on the vertices of the graph. See [8] for a recent comprehensive study of bipolar orientations.
Reference: [46] <author> D. Wagner and K. Weihe. </author> <title> A linear-time algorithm for edge-disjoint paths in planar graphs. </title> <booktitle> In Algorithms (Proc. ESA '93), volume 726 of Lecture Notes in Computer Science, </booktitle> <pages> pages 384-395. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Regarding planar graphs, it has been recently shown that a k-path query can be performed in O (n) time for any k <ref> [46] </ref>. Faster query time can be achieved if preprocessing is allowed. For k = 1, it is easy to see that a spanning forest allows one to perform 1-connectivity queries in O (1) time and 1-path queries in O (`) time.
Reference: [47] <author> J. Westbrook and R. E. Tarjan. </author> <title> Maintaining bridge-connected and biconnected components on-line. </title> <journal> Algo-rithmica, </journal> <volume> 7 </volume> <pages> 433-464, </pages> <year> 1992. </year>
Reference-contexts: For general graphs and k 4, or for (k 1)-connected graphs and fixed k &gt; 4, there are O (n)-space data structures that perform k-connectivity queries in O (1) time, but do not support output-sensitive k-path queries (see <ref> [42, 47] </ref> for k = 2, [12, 13] for k = 3, [29] for k = 4, and [7] for k &gt; 4). <p> For k 4, several dynamic data structures have been devised for performing k-connectivity queries in a dynamic environment, where the queries are intermixed with insertions and/or deletions of vertices and edges <ref> [12, 16, 15, 20, 22, 24, 29, 33, 37, 38, 47] </ref>. <p> In a dynamic environment, where a sequence of intermixed 2-path queries and insertions of vertices and edges is performed on a graph G (of arbitrary connectivity), we augment a data structure for on-line 2-connectivity queries <ref> [42, 47] </ref> in G by storing with each block (biconnected component) the data structure of Theorem 1. 3 Theorem 2 There exists a data structure for general graphs that supports a sequence of t operations, each a 2-path query or the insertion of a vertex or an edge, starting from the
Reference: [48] <author> S. K. Wismath. </author> <title> Characterizing bar line-of-sight graphs. </title> <booktitle> In Proc. 1st Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 147-152, </pages> <year> 1985. </year>
Reference-contexts: Bipolar orientations and st-numberings of biconnected graphs were first defined in conjunction with a planarity testing algorithm [18, 34], and were later used for a variety of topological and geometric graph problems, such as embedding (see, e.g., [5, 11, 42]), visibility (see, e.g., <ref> [39, 43, 48] </ref>), drawing (see, e.g., [1, 10, 44]), point location (see, e.g., [36, 45]), and floorplanning (see, e.g., [31]). One of the notable properties of planar bipolar orientations is that they induce a 2-dimensional lattice [32] on the vertices of the graph.
Reference: [49] <author> A. Zehavi and A. Itai. </author> <title> Three tree-paths. </title> <journal> J. Graph Theory, </journal> <volume> 13(2) </volume> <pages> 175-188, </pages> <year> 1989. </year>
Reference-contexts: Normal families of paths are important for the study of the order dimension of planar maps and convex polytopes. Graph drawing methods based on orientations, numberings and realizers are surveyed in [23]. Cheriyan and Maheshwari [4], and Zehavi and Itai <ref> [49] </ref> proved the existence of three independent spanning trees in triconnected graphs.
References-found: 49

