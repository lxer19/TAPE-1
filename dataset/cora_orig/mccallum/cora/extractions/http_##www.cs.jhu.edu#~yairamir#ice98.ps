URL: http://www.cs.jhu.edu/~yairamir/ice98.ps
Refering-URL: http://www.cs.jhu.edu/~yairamir/
Root-URL: http://www.cs.jhu.edu
Email: -yairamir, baruch, rsean-@cs.jhu.edu  
Title: A Cost-Benefit Framework for Online Management of a Metacomputing System  
Author: Yair Amir, Baruch Awerbuch, R. Sean Borgstrom 
Address: Baltimore MD 21218  
Affiliation: Department of Computer Science The Johns Hopkins University  
Abstract: 1. ABSTRACT 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Amir, B. Awerbuch, A. Barak, R. Borgstrom, A. Keren. </author> <title> An Opportunity Cost Approach for Job Assignment in a Scalable Computing Cluster. </title> <note> Available as tech report CNDS-98-2 at http://www.cnds.jhu.edu/publications. </note>
Reference-contexts: In this context, Enhanced Mosix (and its cousin Enhanced PVM) are strategies for job allocation and reallocation in a scalable computing cluster. We have developed these strategies in a joint work with the Mosix group <ref> [1, 2, 3, 4] </ref>. Each of these test cases has been shown to produce very good performance in practice. The Java Market, using machines connected only by the Internet, produced a dramatic increase in our sample application's speed. <p> This discussion is based on a joint research with the Mosix group <ref> [1, 2, 3, 4] </ref>. Enhanced Mosix and Enhanced PVM are two job assignment strategies for scalable computing clusters. These strategies also operate in a world defined by jobs and machines. <p> This research measures the performance of the marginal cost strategy in such an environment. The results indicate that it performs extremely well. (For a complete description, consult <ref> [1] </ref>). 6.1 The Model Each job j submitted to the system is defined by the following properties: Its arrival time, a (j), and Its resource vector, r (j). The resource vector r (j) still represents the various system resources the job requires to complete.
Reference: [2] <author> A. Barak, S. Guday and R. Wheeler. </author> <title> The Mosix distributed operating system, load balancing for Unix, </title> <booktitle> Volume 672, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: In this context, Enhanced Mosix (and its cousin Enhanced PVM) are strategies for job allocation and reallocation in a scalable computing cluster. We have developed these strategies in a joint work with the Mosix group <ref> [1, 2, 3, 4] </ref>. Each of these test cases has been shown to produce very good performance in practice. The Java Market, using machines connected only by the Internet, produced a dramatic increase in our sample application's speed. <p> This approach uses economic principles conceptually similar to ours. The Cost-Benefit framework, however, integrates the computer science notions of competitive algorithms and analysis with the economics concepts of marginal costs and markets for services. The Mosix system <ref> [2, 4] </ref> enhances several operating systems with the ability to transparently move jobs from one machine to another. This allows the system to quickly correct all serious mistakes in job allocation. Mosix is a powerful system independently and can be combined with our resource allocation strategies for even stronger performance. <p> This discussion is based on a joint research with the Mosix group <ref> [1, 2, 3, 4] </ref>. Enhanced Mosix and Enhanced PVM are two job assignment strategies for scalable computing clusters. These strategies also operate in a world defined by jobs and machines. <p> We assumed that the memory requirement was known when a job arrived but that its duration was not. On some systems, such as computers using the Mosix <ref> [2, 3] </ref> enhancements to the BSDI Unix-like kernel [11], jobs can be moved from one machine to another while running. On others, this is impossible. We will consider both cases. Each machine m associated with the system is defined by its resource vector.
Reference: [3] <author> A. Barak and O. La'adan, </author> <title> The MOSIX Multicomputer Operating System for High Performance Cluster Computing, </title> <journal> Journal of Future Generation Computer Systems, </journal> <month> April </month> <year> 1998, </year> <note> to appear. </note>
Reference-contexts: In this context, Enhanced Mosix (and its cousin Enhanced PVM) are strategies for job allocation and reallocation in a scalable computing cluster. We have developed these strategies in a joint work with the Mosix group <ref> [1, 2, 3, 4] </ref>. Each of these test cases has been shown to produce very good performance in practice. The Java Market, using machines connected only by the Internet, produced a dramatic increase in our sample application's speed. <p> This discussion is based on a joint research with the Mosix group <ref> [1, 2, 3, 4] </ref>. Enhanced Mosix and Enhanced PVM are two job assignment strategies for scalable computing clusters. These strategies also operate in a world defined by jobs and machines. <p> We assumed that the memory requirement was known when a job arrived but that its duration was not. On some systems, such as computers using the Mosix <ref> [2, 3] </ref> enhancements to the BSDI Unix-like kernel [11], jobs can be moved from one machine to another while running. On others, this is impossible. We will consider both cases. Each machine m associated with the system is defined by its resource vector.
Reference: [4] <institution> The Mosix Multicomputer Operating System for Unix. </institution> <note> http://www.cs.huji.ac.il/mosix/. </note>
Reference-contexts: In this context, Enhanced Mosix (and its cousin Enhanced PVM) are strategies for job allocation and reallocation in a scalable computing cluster. We have developed these strategies in a joint work with the Mosix group <ref> [1, 2, 3, 4] </ref>. Each of these test cases has been shown to produce very good performance in practice. The Java Market, using machines connected only by the Internet, produced a dramatic increase in our sample application's speed. <p> This approach uses economic principles conceptually similar to ours. The Cost-Benefit framework, however, integrates the computer science notions of competitive algorithms and analysis with the economics concepts of marginal costs and markets for services. The Mosix system <ref> [2, 4] </ref> enhances several operating systems with the ability to transparently move jobs from one machine to another. This allows the system to quickly correct all serious mistakes in job allocation. Mosix is a powerful system independently and can be combined with our resource allocation strategies for even stronger performance. <p> This discussion is based on a joint research with the Mosix group <ref> [1, 2, 3, 4] </ref>. Enhanced Mosix and Enhanced PVM are two job assignment strategies for scalable computing clusters. These strategies also operate in a world defined by jobs and machines.
Reference: [5] <institution> The LYDIA Project (goal-oriented scheduling). </institution> <note> http://www.ics.forth.gr/pleiades/projects/LYDIA/. </note>
Reference-contexts: Similarly, the Enhanced PVM and Enhanced Mosix strategies proved to be much more efficient than standard resource allocation methods on a local cluster, where both our strategies and the traditional strategies had complete control over the machines. 3. RELATED WORK The LYDIA project <ref> [5] </ref> studies single-resource resource allocation on a system where there are many kinds of jobs, and each "class" of jobs has different performance expectations. The performance of each class is given a homogeneous cost called the "performance index", much like our job benefit functions.
Reference: [6] <author> C. Waldspurger. </author> <title> A distributed computational economy for utilizing idle resources. </title> <type> Master's thesis, </type> <institution> MIT, Dept. of Electrical Engineering and Computer Science, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: The performance of each class is given a homogeneous cost called the "performance index", much like our job benefit functions. The LYDIA project does not yet address the complex issues involved in balancing several of the diverse system resources simultaneously. SPAWN <ref> [6] </ref> and other systems like it provide computational markets where tasks bid competitively for resources. This approach uses economic principles conceptually similar to ours. The Cost-Benefit framework, however, integrates the computer science notions of competitive algorithms and analysis with the economics concepts of marginal costs and markets for services.
Reference: [7] <author> Condor. </author> <note> http://www.cs.wisc.edu/condor/. </note>
Reference-contexts: This allows the system to quickly correct all serious mistakes in job allocation. Mosix is a powerful system independently and can be combined with our resource allocation strategies for even stronger performance. The Condor system <ref> [7] </ref> is similar to the Java Market, one of our testbeds. The Condor team has created a set of software tools for utilizing the wasted CPU cycles in a cluster of workstations. <p> Restricting these maxima translates directly into bounded CPU loads, bounded memory usage, limited network congestion, etc. 4.4 A Decentralized Approach The Cost-Benefit framework uses a centralized scheduler in both of our testbeds. Experience with the Condor system <ref> [7] </ref> shows that one scheduler can manage hundreds of producer machines, as long as it acts only as a decision-maker. For a more distributed approach, our framework can be extended as follows. Assign each scheduler a subset of the producer machines, which it must choose from when assigning jobs.
Reference: [8] <author> N. Camiel, S. London, N. Nisan, O. Regev. </author> <title> The Popcorn Project - An Interim Report, Distributed Computation over the Internet in Java. </title> <booktitle> Sixth International World Wide Web Conference, </booktitle> <month> April </month> <year> 1997 </year>
Reference-contexts: Although Condor is a mature system, proven to work efficiently with hundreds of machines at a time, it has very limited support for heterogeneous machine architectures. The Java Market, while limited by the speed of the virtual Java machines available, is 100% cross-platform. The Popcorn project <ref> [8] </ref>, independently developed at the Hebrew University in Israel, is an online market for computational services that shares many features with the Java Market. The project differs from the Java Market primarily in that it provides a new programming model.
Reference: [9] <author> MILAN: </author> <note> http://www.cs.nyu.edu/milan/milan/index.html </note>
Reference-contexts: Its users must write their applications with the Popcorn project in mind - Popcorn cannot be used with ordinary Java applications. A key Java Market design decision is that users submit their jobs as regular Java applications, and the Market itself does all necessary modifications. Milan <ref> [9] </ref> and Javelin [10], like the Popcorn project, provide programming models that take advantage of heterogeneous Internet-connected machines. Also like the Popcorn project, these systems are not designed for use with standard Java applications, and their resource allocation strategies are not provably competitive with the optimal strategy. 4.
Reference: [10] <author> JAVELIN: </author> <note> http://www.cs.ucsb.edu/research/javelin/ </note>
Reference-contexts: Its users must write their applications with the Popcorn project in mind - Popcorn cannot be used with ordinary Java applications. A key Java Market design decision is that users submit their jobs as regular Java applications, and the Market itself does all necessary modifications. Milan [9] and Javelin <ref> [10] </ref>, like the Popcorn project, provide programming models that take advantage of heterogeneous Internet-connected machines. Also like the Popcorn project, these systems are not designed for use with standard Java applications, and their resource allocation strategies are not provably competitive with the optimal strategy. 4.
Reference: [11] <author> J. Aspnes, Y. Azar, A. Fiat, S. Plotkin and O. Waarts. </author> <title> OnLine Machine Scheduling with Applications to Load Balancing and Virtual Circuit Routing. </title> <booktitle> In Proceedings of the ACM Symposium on Theory Of Computing (STOC), </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Using the marginal cost strategy with this particular cost function has a beneficial theoretical property. Over the systems continuously operating lifetime, the maximum usage of each resource is within O (log n) of the optimal assignment strategys maximum usage <ref> [11] </ref>. Further, this holds even when the optimal strategy knows the future. This theoretical guarantee is weak, but most job assignment strategies have no theoretical guarantees at all. <p> We assumed that the memory requirement was known when a job arrived but that its duration was not. On some systems, such as computers using the Mosix [2, 3] enhancements to the BSDI Unix-like kernel <ref> [11] </ref>, jobs can be moved from one machine to another while running. On others, this is impossible. We will consider both cases. Each machine m associated with the system is defined by its resource vector. Machines have no externally assigned cost to use and they are always available.
Reference: [12] <author> Berkeley Software Design, Inc. </author> <title> http://www.bsdi.com 0 20 40 60 80 PVM E n h a n c e d P V M 0 20 40 60 0 10 20 30 40 50 60 MOSIX E n h a n c e d M O S I X </title>
References-found: 12

