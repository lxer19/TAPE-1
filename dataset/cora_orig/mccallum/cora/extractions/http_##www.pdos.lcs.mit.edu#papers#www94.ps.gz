URL: http://www.pdos.lcs.mit.edu/papers/www94.ps.gz
Refering-URL: http://www.pdos.lcs.mit.edu/PDOS-papers.html
Root-URL: 
Email: fkaashoek, pinckney, joshg@lcs.mit.edu  
Title: Dynamic Documents: Extensibility and Adaptability in the WWW  
Author: M. Frans Kaashoek, Tom Pinckney, and Joshua A. Tauber 
Date: September 15, 1994  
Address: 545 Technology Square Cambridge, MA 02139, USA  
Affiliation: MIT Laboratory for Computer Science  
Abstract: We propose dynamic documents as an approach to extending and customizing the Mosaic interface to the WWW. Mosaic implements rigid policies that limit the range of environments in which it can function. Dynamic documents overcome this problem by allowing documents to implement their own policies. Dynamic documents are programs executed at a Mosaic client to generate a document; they are implemented as Tcl scripts. We have modified the NCSA Mosaic client to use a modified Tcl interpreter to run the dynamic documents it retrieves. The interpreter is designed to execute only those commands that do not violate safety. We have used dynamic documents to configure an adaptable Mosaic client to a mobile environment. The use of dynamic documents allows adaptable clients to adjust to a variety of mobile platforms and network environments. We have used the adaptive client and dynamic documents to build an adaptive e-mail browser that employs application-specific caching and prefetching strategies. Both the browser and the displayed e-mail messages are dynamically customized to the computing environment in which they run.
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Common Gateway Interface. </institution> <note> http://hoohoo.ncsa.uiuc.edu/cgi/intro.html. </note>
Reference-contexts: A number of groups are addressing this problem by extending the HyperText Transfer Protocol (HTTP) (e.g. Common Gateway Interface), the HyperText Mark-up Language (HTML), or by introducing new protocols (e.g. HTTP+) <ref> [2, 3, 1, 18] </ref>. Unfortunately, since protocols function as standards for information exchange they cannot be easily modified. We address this inflexibility by introducing dynamic documents. Dynamic documents are programs executed by an adaptive WWW client in order to produce information local to the client.
Reference: [2] <institution> HTTP: a protocol for networked information. </institution> <address> http://info.cern.ch/hypertext/WWW/- Protocols/HTTP/HTTP2.html. </address>
Reference-contexts: A number of groups are addressing this problem by extending the HyperText Transfer Protocol (HTTP) (e.g. Common Gateway Interface), the HyperText Mark-up Language (HTML), or by introducing new protocols (e.g. HTTP+) <ref> [2, 3, 1, 18] </ref>. Unfortunately, since protocols function as standards for information exchange they cannot be easily modified. We address this inflexibility by introducing dynamic documents. Dynamic documents are programs executed by an adaptive WWW client in order to produce information local to the client.
Reference: [3] <institution> HyperText Markup Language (HTML). </institution> <address> http://info.cern.ch/hypertext/WWW/- MarkUp/MarkUp.html. </address>
Reference-contexts: A number of groups are addressing this problem by extending the HyperText Transfer Protocol (HTTP) (e.g. Common Gateway Interface), the HyperText Mark-up Language (HTML), or by introducing new protocols (e.g. HTTP+) <ref> [2, 3, 1, 18] </ref>. Unfortunately, since protocols function as standards for information exchange they cannot be easily modified. We address this inflexibility by introducing dynamic documents. Dynamic documents are programs executed by an adaptive WWW client in order to produce information local to the client.
Reference: [4] <institution> MIME extensions for mail-enabled applications: application/Safe-Tcl and multipart/enabled mail. ftp://thumper.bellcore.com/pub/nsb/st/safe-tcl.ps. </institution>
Reference-contexts: For our prototype, we ensure safety by use of an interpreter that limits the operations a down-loaded script may perform. However, we could easily switch to Safe-Tcl and thereby greatly decrease the chance that we have left any security holes in the language <ref> [4] </ref>. Since dynamic documents are so general, we are investigating the possibility of assisting authors by automatically generating certain types of scripts.
Reference: [5] <author> Mosaic. </author> <note> http://www.ncsa.uiuc.edu/SDG/Software/Mosaic/NCSAMosaicHome.html. </note>
Reference-contexts: Popular information retrieval tools need to be adaptable to many environments and platforms in order to allow users to have information at their fingertips. Recently, the World-Wide Web (WWW) and NCSA Mosaic have become extremely popular information retrieval tools <ref> [8, 5] </ref>. As currently designed, Mosaic's fixed policies and fixed interfaces prevent it from easily incorporating new applications or running on computing platforms differing from the high-performance workstations connected to high-bandwidth networks for which Mosaic was designed. Currently, Mosaic implements rigid policies for fetching, displaying and interacting with documents.
Reference: [6] <institution> Uniform Resource Locators. </institution> <address> http://info.cern.ch/hypertext/WWW/Addressing/URL/- Overview.html. </address>
Reference-contexts: Later, when requests for this Uniform Resource Locator (URL) are made, the cached data is simply replayed as if it had come from the network layer <ref> [6] </ref>. When the document cache is full, a randomly picked entry is discarded. Since WWW servers do not provide callbacks, stale cache data cannot be detected. To attempt to maintain the correctness of cached data, entries are cached for only a document-specific period of time.
Reference: [7] <editor> Intelligent agents issues. CACM, </editor> <volume> 37(7), </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: This approach has been adopted for some more recent mailers that defined a safe subset of Tcl to do flexible mail processing. Recent work uses scripting languages to implement intelligent agents <ref> [7] </ref>. A number of projects have been extending the applicability of the WWW/Mosaic. In par-ticular, Houh et al. implemented capabilities for shipping code from the client to the server to implement, for example, queries [12].
Reference: [8] <author> T. Berners-Lee, R. Caililiau, A. Luotonen, H.F. Nielsen, and A. </author> <title> Secret. The World-Wide Web. </title> <journal> Comm. ACM, </journal> <volume> 37(8) </volume> <pages> 76-82, </pages> <month> Aug </month> <year> 1994. </year>
Reference-contexts: Popular information retrieval tools need to be adaptable to many environments and platforms in order to allow users to have information at their fingertips. Recently, the World-Wide Web (WWW) and NCSA Mosaic have become extremely popular information retrieval tools <ref> [8, 5] </ref>. As currently designed, Mosaic's fixed policies and fixed interfaces prevent it from easily incorporating new applications or running on computing platforms differing from the high-performance workstations connected to high-bandwidth networks for which Mosaic was designed. Currently, Mosaic implements rigid policies for fetching, displaying and interacting with documents.
Reference: [9] <author> David H. Crocker. </author> <title> Standard for the format of ARPA internet text messages. </title> <type> RFC 822, </type> <month> Aug </month> <year> 1982. </year>
Reference-contexts: The browser employs caching and prefetching strategies based on the objects that are included in e-mail messages. The browser understands the MIME standard for bundling and transporting sequences of multi-media objects in a normal RFC822 compliant mail message <ref> [9] </ref>. If the browser decides to create a link to an object rather than including the object directly into the display, the browser may prefetch some of the objects in the background while displaying other parts of the message.
Reference: [10] <author> S. Glassman. </author> <title> A caching relay for the World-Wibe Web. </title> <booktitle> In Proc. First International World-Wide Web Conference, </booktitle> <pages> pages 60-76, </pages> <address> Geneva, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: We provide dynamic documents with the additional ability to explicitly flush items from the cache. This is the same basic method used by Glassman for the caching relay server <ref> [10] </ref>. This global caching policy is adequate. Several users have used our modified Mosaic on a SPARCstation 10 during the three-week period of our trace and have experienced a cache hit rate of about 40%. <p> One of the potential advantages that dynamic documents offer is that they allow document-specific caching and prefetching. Such domain knowledge might reduce bandwidth consumption and might increase the number of cache hits. Glassman reports on a relay server that caches documents and gives a detailed analysis of its performance <ref> [10] </ref>. 5 Conclusions We have described dynamic documents, a mechanism for giving documents control of important policy decisions in Mosaic. Instead of relying on static policies built into Mosaic which must suffice for every document that Mosaic displays, we allow each document to implement its own policy.
Reference: [11] <author> D. Goldberg and M. Tso. </author> <title> How to program networked portable computers. </title> <booktitle> In Proc. Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 30-33, </pages> <address> Napa, California, </address> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: In the mobile arena, a number of groups have been working on Mosaic clients (or other user interfaces) for mobile computers. Most of this work focuses on the question what part of the client to run on the mobile computer and what part to run on a stationary computer <ref> [11, 20] </ref>. Landay and Kaufmann have used Scheme to ease the implementation of a split user interface [15]. Our work currently assumes that clients have enough processing power to run the client completely on the mobile computer.
Reference: [12] <author> H. Houh, C. Lindblad, and D. Wetherall. </author> <title> Active pages. </title> <booktitle> In Proc. First International World-Wide Web Conference, </booktitle> <pages> pages 265-270, </pages> <address> Geneva, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Recent work uses scripting languages to implement intelligent agents [7]. A number of projects have been extending the applicability of the WWW/Mosaic. In par-ticular, Houh et al. implemented capabilities for shipping code from the client to the server to implement, for example, queries <ref> [12] </ref>. Mallery discusses an implementation of an HTTP server in Common Lisp and argues for dynamically moving functionality from servers to client using fragments of Lisp code [16].
Reference: [13] <author> Adobe Systems Incorporated. </author> <title> PostScript Language Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1985. </year>
Reference-contexts: Many examples of this approach can be found. A relatively successful example is PostScript <ref> [13] </ref>. Other examples include the Andrew Mail system, in which messages can contain fragments of LISP code that are executed at the receiver. This approach has been adopted for some more recent mailers that defined a safe subset of Tcl to do flexible mail processing.
Reference: [14] <author> J. J. Kistler and M. Satyanarayananan. </author> <title> Disconnected operation in the Coda file system. </title> <booktitle> In Proc. Thirteenth Symposium on Operating System Principles, </booktitle> <pages> pages 213-225, </pages> <address> Pacific Grove, CA, </address> <month> Oct </month> <year> 1991. </year>
Reference-contexts: We have chosen to make the cache persistent across sessions in order to benefit from locality between Mosaic sessions. Additionally, a persistent cache may be pre-loaded for disconnected operation, as in the Coda file system <ref> [14] </ref>. We have implemented caching at the HTTP level for ease of implementation. When an HTTP request is made for a document that is not currently cached, the document is requested from the server, and an exact copy of the server's response is recorded. <p> Caching and prefetching have been used for mobile computers. In particular, the Coda project has worked on making a file system that runs well on mobile computers <ref> [14, 19] </ref>. One of the potential advantages that dynamic documents offer is that they allow document-specific caching and prefetching. Such domain knowledge might reduce bandwidth consumption and might increase the number of cache hits.
Reference: [15] <author> J.A. Landay and T.R. </author> <title> Kaufmann. </title> <booktitle> User interface issues in mobile computing. In Proc. Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 40-48, </pages> <address> Napa, California, </address> <month> Oct </month> <year> 1993. </year>
Reference-contexts: Most of this work focuses on the question what part of the client to run on the mobile computer and what part to run on a stationary computer [11, 20]. Landay and Kaufmann have used Scheme to ease the implementation of a split user interface <ref> [15] </ref>. Our work currently assumes that clients have enough processing power to run the client completely on the mobile computer.
Reference: [16] <author> J.C. Mallery. </author> <title> A Common LISP hypermedia server. </title> <booktitle> In Proc. First International WorldWide Web Conference, </booktitle> <pages> pages 239-247, </pages> <address> Geneva, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: In par-ticular, Houh et al. implemented capabilities for shipping code from the client to the server to implement, for example, queries [12]. Mallery discusses an implementation of an HTTP server in Common Lisp and argues for dynamically moving functionality from servers to client using fragments of Lisp code <ref> [16] </ref>. Our work differs from this work in that we propose dynamic documents as a general approach for customizing and extending the WWW/Mosaic, and apply them to a mobile computing environment.
Reference: [17] <author> J.K. Ousterhout. Usenet comp.lang.tcl posting. </author> <month> Sep </month> <year> 1994. </year>
Reference-contexts: In addition, the new Tcl/Tk project at Sun Microsystems promises to extend Tcl support to Macintosh and Windows environments, provide a secure execution environment, and provide an interactive graphical user interface builder <ref> [17] </ref>. For our prototype, we ensure safety by use of an interpreter that limits the operations a down-loaded script may perform. However, we could easily switch to Safe-Tcl and thereby greatly decrease the chance that we have left any security holes in the language [4].
Reference: [18] <author> Dave Raggett. </author> <title> A review of the HTML+ document format. </title> <booktitle> In Proc. First International World-Wide Web Conference, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: A number of groups are addressing this problem by extending the HyperText Transfer Protocol (HTTP) (e.g. Common Gateway Interface), the HyperText Mark-up Language (HTML), or by introducing new protocols (e.g. HTTP+) <ref> [2, 3, 1, 18] </ref>. Unfortunately, since protocols function as standards for information exchange they cannot be easily modified. We address this inflexibility by introducing dynamic documents. Dynamic documents are programs executed by an adaptive WWW client in order to produce information local to the client.
Reference: [19] <author> M. Satyanarayanan, J. J. Kistler, L. B. Mummert, M. R. Ebling, P. Kumar, and Q. Lu. </author> <title> Experience with disconnected operation in a mobile environment. </title> <booktitle> In Proc. Symposium on Mobile and Location-Independent Computing, </booktitle> <pages> pages 11-28, </pages> <address> Cambridge, MA, </address> <month> Aug </month> <year> 1993. </year>
Reference-contexts: Caching and prefetching have been used for mobile computers. In particular, the Coda project has worked on making a file system that runs well on mobile computers <ref> [14, 19] </ref>. One of the potential advantages that dynamic documents offer is that they allow document-specific caching and prefetching. Such domain knowledge might reduce bandwidth consumption and might increase the number of cache hits.
Reference: [20] <author> B. N. Schilit, M. M. Theimer, and B. B. Welch. </author> <title> Customizing mobile applications. </title> <booktitle> In Proc. Symposium on Mobile and Location-Independent Computing, </booktitle> <pages> pages 129-138, </pages> <address> Cambridge, MA, </address> <month> Aug </month> <year> 1993. </year>
Reference-contexts: In the mobile arena, a number of groups have been working on Mosaic clients (or other user interfaces) for mobile computers. Most of this work focuses on the question what part of the client to run on the mobile computer and what part to run on a stationary computer <ref> [11, 20] </ref>. Landay and Kaufmann have used Scheme to ease the implementation of a split user interface [15]. Our work currently assumes that clients have enough processing power to run the client completely on the mobile computer. <p> Schilit et al. propose dynamic environment variables for customizing mobile applications while they are moving around; this idea could easily be incorporated into dynamic documents <ref> [20] </ref>. Caching and prefetching have been used for mobile computers. In particular, the Coda project has worked on making a file system that runs well on mobile computers [14, 19]. One of the potential advantages that dynamic documents offer is that they allow document-specific caching and prefetching.
References-found: 20

