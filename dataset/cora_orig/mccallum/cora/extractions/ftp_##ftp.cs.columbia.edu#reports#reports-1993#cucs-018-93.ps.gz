URL: ftp://ftp.cs.columbia.edu/reports/reports-1993/cucs-018-93.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1993.html
Root-URL: http://www.cs.columbia.edu
Title: A Repository for a CARE Environment  
Abstract: Toni A. Bunter Technical Report CUCS-018-93 COLUMBIA UNIVERSITY 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Toni A. Bunter. </author> <title> Eine Architektur eines Software-Wartungssystems. </title> <type> PhD thesis, </type> <institution> Universitat Zurich, </institution> <year> 1992. </year>
Reference-contexts: The number of entities is extendible, as we will show in section 5. All attributes without an asterix (*) belong to the minimal repository. In <ref> [1] </ref> we proved that the minimal repository satisfies the additional condition of our repository definiton. We built the repository concerning our wide range language COBAPA (cf. Appendix A). Appendix B shows a program example in COBAPA, and all repository entries. 1. <p> The repository representation of source code makes possible the expression of new ideas which could not be expressed with source code in ASCII file representation. In <ref> [1] </ref> we showed a method for restructuring. The result of the restructuring, using doubled sequential blocks, is a control flow graph similar to the extended Nassi-Shneiderman diagram. Applying this method directly on source code yields copy parts of the source code.
Reference: [2] <institution> IBM Corp. Repository Manager/MVS, General Information, </institution> <month> September </month> <year> 1990. </year>
Reference-contexts: an overall information storage that concerns management and the control of an enterprise: : : : a repository is a place for storing information about items and activities of importance to your enterprise; it is an organized, shared collection of information that supports business and data processing activities. (page7, in <ref> [2] </ref>) Our approach adds a condition of completness to the former definition: The Repository accumulates enough information about the structure of the modules, the data and flow dependences and the expressions that the whole functionality can be derived from the repository entries.
Reference: [3] <author> John R. Foster and Malcolm Munro. </author> <title> A documentation method based on cross-referencing. </title> <booktitle> In Conference on Software Maintenance, </booktitle> <pages> pages 181-185. </pages> <publisher> IEEE, </publisher> <month> September </month> <year> 1987. </year>
Reference: [4] <author> Gail E. Kaiser, Naser S. Barghouti, Peter H. Feiler, and Robert W. Schwanke. </author> <title> Database support for knowledge-based engineering environments. </title> <journal> IEEE Expert, </journal> <volume> 3(2) </volume> <pages> 18-32, </pages> <month> Summer </month> <year> 1988. </year>
Reference-contexts: A further important requirement for CARE (as well as for CASE) is the concurrent access to the software system by different reengineering programmers. With this concern in mind, we intend to set our system on the rule-based development environment MARVEL <ref> [4] </ref>. 8 7 Appendix A The following definition defines the syntax of COBAPA. The definitions of logical expression, expression, list of variables, list of expressions, newline, line number and variable name are considered to be as they are generally known.
Reference: [5] <author> D. J. Kuck, R. H. Kuhn, D. A. Padua, B. Leasure, and M. Wolfe. </author> <title> Dependence graphs and compiler optimizations. </title> <booktitle> In 8th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 207-218, </pages> <address> New York, </address> <month> January </month> <year> 1981. </year> <note> ACM. </note>
Reference: [6] <author> K. Ottenstein and L. Ottenstein. </author> <title> The program dependence graph in a software development environment. </title> <booktitle> In Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environment, </booktitle> <pages> pages 177-184. </pages> <publisher> ACM, </publisher> <month> April </month> <year> 1984. </year>
Reference-contexts: Below we give a list of useful references and literature: 3 * Syntaxtree * Control and Dataflow * Cross Reference List ([3]) * Program Dependence Graph ([5], <ref> [6] </ref>) * Module Interconnection Language ([7]) We divide the repository database into six levels, and define the primary entities for each level. The number of entities is extendible, as we will show in section 5. All attributes without an asterix (*) belong to the minimal repository.
Reference: [7] <author> R. Prieto-Diaz and J. M. Neighbors. </author> <title> Module interconnection languages. </title> <journal> The Journal of Systems and Software, </journal> <volume> 6 </volume> <pages> 307-334, </pages> <year> 1986. </year>
Reference: [8] <author> Mark Weiser. </author> <title> Program slicing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 10(4), </volume> <year> 1984. </year>
Reference-contexts: The ref list includes the referenced variables in the assignment. The expression id list is an ordered list of the expression id's in the assignment. The def list and the ref list enable straightforward data flow analysis and program slicing (as defined in <ref> [8] </ref>). 5. The Expression Level The expression level manages the representation of all defined expressions. We define a relation with four attributes. module id expression id type* syntax tree The attribute type describes the appropriate type of the expression. Its entries are: integer, float, string, boolean or structured types.
Reference: [9] <author> Niklaus Wirth. </author> <title> Programming in Modula-2. </title> <publisher> Springer-Verlag, </publisher> <year> 1982. </year>
Reference-contexts: The definitions of logical expression, expression, list of variables, list of expressions, newline, line number and variable name are considered to be as they are generally known. We show the syntax of the control structure using the EBNF-grammar formalism <ref> [9] </ref>: program = f line number instruction line newline g instruction line = begin loop j end loop j conditional jump j jump j instruction j program end j procedure call j begin proc j end proc j begin func j end func begin loop = for assignment do j while
Reference: [10] <author> Hongji Yang. </author> <title> The supporting environment for a reverse engineering system the maintainer's assistant. </title> <booktitle> In IEEE Conference on Software Maintenance, </booktitle> <pages> pages 13-22. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1991. </year> <type> 13 9 Figures 14 15 </type>
Reference-contexts: Appendix B shows a program example in COBAPA, with its entries in the stated repository. The main difference between CARE systems, including those currently in development (as <ref> [10] </ref>), and our approach is the complete mapping of the source code to the repository's relational structure. As far as we know there is no other comparable publication with the same paradigms and assumptions as to the repository structure. 2 Reengineering Reengineering is a growing discipline within software engineering.
References-found: 10

