URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-95-03.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.cs.virginia.edu
Title: Scheduling Real-Time Tasks for Dependability  
Author: Yingfeng Oh and Sang H. Son 
Keyword: combinatorial analysis, dependability, heuristics, scheduling  
Address: Thornton Hall, Charlottesville, VA 22903, USA  
Affiliation: Dept. of Computer Science University of Virginia  
Abstract: Real-time systems are increasingly used in applications whose failure may result in large economic and human costs. Since many of the systems operate in environments that are non-deterministic, and even hazardous, it is extremely important that the systems must be dependable, i.e., the deadlines of tasks must be met even in the presence of certain failures. In order to enhance the dependability of a real-time system, we study the problem of scheduling a set of real-time tasks to meet their deadlines even in the presence of processor failures. We first prove that the problem of scheduling a set of non-preemptive tasks on more than two processors to tolerate one arbitrary processor failure is NP-complete even when the tasks share a common deadline. A heuristic algorithm is then proposed to solve the problem. The schedule generated by the heuristic algorithm can tolerate one arbitrary processor failure in the worst case. The analysis and experimental data show that the performance of the heuristic algorithm is near-optimal. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J.H. Wensley, L. Lamport, J. Goldberg, M.W. Green, K.N. Levitt, P.M. Melliar-Smith, R.E. Shostak, and C.B. </author> <title> Weinstock (1978) SIFT: design and analysis of a fault-tolerant computer for aircraft control. </title> <booktitle> Proceedings of the IEEE 66, </booktitle> <pages> 1240-1255. </pages>
Reference-contexts: Proof We first claim that for any task with j <ref> [1, 2, , ] </ref>, it starts on time zero in LPT (S, m) if and only if it starts on time zero in LPT ( , ).
Reference: 2. <author> A.L. Hopkins, Jr., T.B. Smith, III, and J.H. </author> <title> Lala (1978) FTMP-A highly reliable fault-tolerant multiprocessor for aircraft. </title> <booktitle> Proceedings of the IEEE 66, </booktitle> <pages> 1221-1239. </pages>
Reference-contexts: Proof We first claim that for any task with j <ref> [1, 2, , ] </ref>, it starts on time zero in LPT (S, m) if and only if it starts on time zero in LPT ( , ).
Reference: 3. <author> A. Spector and D. </author> <title> Gifford (1984) The space shuttle primary computer system. </title> <journal> CACM 27, </journal> <pages> 874-900. </pages>
Reference: 4. <author> R.M. Kieckhafer, C.J. Walter, </author> <title> A.M. Finn and P.M. Thambidurai (1988) The MAFT Architecture for distributed fault tolerance. </title> <journal> IEEE Transactions on Computers 37, </journal> <pages> 398-405. </pages>
Reference: 5. <author> A. </author> <title> Avizienis (1985) The N-version approach to fault-tolerant software. </title> <journal> IEEE Transactions on Software Engineering 11, </journal> <pages> 1491-1501. </pages>
Reference: 6. <author> B.W. </author> <title> Johnson (1989) Design and Analysis of Fault Tolerant Digital Systems. </title> <publisher> Addison-Wes-ley. </publisher>
Reference: 7. <author> C.L. Liu and J. </author> <title> Layland (1973) Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> JACM 10, </journal> <pages> 174-189. </pages>
Reference: 8. <author> K. Ramamritham and J.A. </author> <title> Stankovic (1991) Scheduling strategies adopted in Spring: a overview, Chapter in Foundations of Real-Time Computing: Scheduling and Resource Allocation (ed.) by A.M. </title> <editor> van Tilborg and G.M. </editor> <booktitle> Koob, </booktitle> <pages> 277-307. </pages>
Reference: 9. <author> L. Sha and J.B. </author> <title> Goodenough (1990) Real-time scheduling theory and Ada. </title> <booktitle> IEEE Computer 23(4), </booktitle> <pages> 53-65. </pages>
Reference: 10. <author> K.G. Shin, G. Koob and F. </author> <title> Jahanian (1991) Fault-tolerance in real-time systems. </title> <booktitle> IEEE Real-Time Systems Newsletter 7(3), </booktitle> <pages> 28-34. </pages>
Reference: 11. <author> S. Ramos-Thuel and J.K. Strosnider. </author> <title> The transient server approach to scheduling time-critical recovery operations. </title> <booktitle> 12th Symposium on Real-Time Systems, </booktitle> <address> San Antonio, Texas, </address> <pages> 286-295. </pages>

Reference: 13. <author> S. Balaji, L. Jenkins, L.M. Patnaik, </author> <title> and P.S. Goel (1989) Workload redistribution for fault-tolerance in a hard real-time distributed computing system. </title> <publisher> FTCS-19, Chicago, Illinois, </publisher> <pages> 366-373. </pages>
Reference: 14. <author> J.A. Bannister and K. S. </author> <title> Trivedi (1983) Task allocation in fault-tolerant distributed systems. </title> <journal> Acta Informatica 20, </journal> <pages> 261-281. </pages>
Reference: 15. <author> Y. Oh and S.H. </author> <title> Son (1991) Multiprocessor support for real-time fault-tolerant scheduling. </title> <booktitle> IEEE Workshop on Architectural Aspects of Real-Time Systems, </booktitle> <address> San Antonio, Texas, </address> <pages> 76-80. </pages>
Reference: 16. <author> Y. Oh and S.H. </author> <title> Son (1992) An algorithm for real-time fault-tolerant scheduling in multiprocessor systems. </title> <booktitle> 4th Euromicro Workshop on Real-Time Systems, </booktitle> <address> Athens, Greece, </address> <pages> 190-195. </pages>
Reference: 17. <author> Y. Oh and S.H. </author> <title> Son (1994) Scheduling hard real-time tasks with tolerance of multiple processor failures, </title> <booktitle> Microprocessing and Microprogramming 40, </booktitle> <pages> 193-206. </pages>
Reference: 18. <author> M.R. Garey and D.S. </author> <title> Johnson (1978) Computers and Intractability: A guide to the theory of NP-completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <address> NY. </address>
Reference: 19. <author> K. Jeffay, D.F. Stanat, and C.U. </author> <title> Martel (1991) On non-preemptive scheduling of periodic and sporadic tasks. </title> <booktitle> 12th Symposium on Real-Time Systems, </booktitle> <address> San Antonio, Texas, </address> <pages> 129-139. </pages>
Reference: 20. <author> R. L. </author> <title> Graham (1969) Bounds on multiprocessing timing anomalies. </title> <journal> SIAM J. Appl. Math. </journal> <volume> 17, </volume> <pages> 416-429. </pages>
Reference: 21. <author> E.G. Coffman, Jr., </author> <title> M.R. Garey and D.S. Johnson (1978) An application of bin-packing to multiprocessor scheduling. </title> <journal> SIAM J. Comput. </journal> <volume> 7, </volume> <pages> 1-17. </pages>
Reference: 22. <author> E.G. Coffman, Jr. and R. </author> <title> Sethi (1976) A generalized bound on LPT sequencing. </title> <journal> Revue Francaise dAutomatique Informatique Recherche Operationelle 10, </journal> <volume> Suppl. </volume> <pages> 17-25. </pages>
Reference-contexts: Since OV first schedules the primary copies using LPT and then the backup copies using ALPT, the worst case performance bound is therefore expected to be around for k &gt; m according to the result by Coffman and Sethi <ref> [22] </ref>.
References-found: 21

