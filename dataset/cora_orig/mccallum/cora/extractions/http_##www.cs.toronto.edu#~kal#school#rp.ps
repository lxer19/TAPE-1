URL: http://www.cs.toronto.edu/~kal/school/rp.ps
Refering-URL: http://www.cs.toronto.edu/~kal/
Root-URL: http://www.cs.toronto.edu
Title: Research Proposal: Group Membership  
Author: Kal Lin 
Date: November 10, 1998  
Abstract-found: 0
Intro-found: 1
Reference: [ACBMT95] <author> Emmanuelle Anceaume, Bernadette Charron-Bost, Pascale Minet, and Sam Toueg. </author> <title> On the formal specification of group membership services. </title> <type> Technical Report 95-1534, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: In the Proposal section of this report, I will describe some open problems and summarize my progress thus far. 2 Literature Review The publications most relevant to this proposal are [RB91] (updated in [RB94]), <ref> [ACBMT95] </ref>, [BDM95] (updated in [BDM97]) and [CHTCB96]. [Bir93] describes the Isis research system based on the work in [RB91] and [RB94]. <p> They called this specification the Strong Group Membership Problem (SGMP). The goal of the SGMP is to track the processes in a distributed system that do not appear to be faulty. However, it was shown in <ref> [ACBMT95] </ref> that the formal specification is unsatisfactory and the protocol given to solve SGMP is not correct with respect to the informal English description of the specification. The specification of SGMP makes uses of a predicate IN-LOCAL x p (q). <p> However, in the specification of SGMP one of the properties, GMP-3, requires the predi cate IN-LOCAL x p (q) to be evaluated when p has not yet formed its x th local view of the 2 group. The authors of <ref> [ACBMT95] </ref> also demonstrate that this problem is not easily rectified. <p> This again is clearly not intended because GMP-3 would not allow the installation of any views. <ref> [ACBMT95] </ref> goes on to note that similar problems exist with other predicates used in the formal specification of SGMP. Since the formal specification of SGMP does not make sense in some situations, the authors of [ACBMT95] demonstrated that the protocol given was not correct with respect to the informal English description <p> again is clearly not intended because GMP-3 would not allow the installation of any views. <ref> [ACBMT95] </ref> goes on to note that similar problems exist with other predicates used in the formal specification of SGMP. Since the formal specification of SGMP does not make sense in some situations, the authors of [ACBMT95] demonstrated that the protocol given was not correct with respect to the informal English description of the SGMP properties. <p> In this particular execution, no view change occurs. Thus neither mgr nor q are removed from the group view. This contradicts the requirement of GMP-4 that either mgr or q be removed from the group view. The authors of <ref> [ACBMT95] </ref> call this behavior collective suicide. Another weakness of [RB94], is that the authors do not give a description of what constitutes a good reason to remove a process from the group view.
Reference: [ACT97] <author> Marcos Kawazoe Aguilera, Wei Chen, and Sam Toueg. </author> <title> Quiescent reliable communication and quiescent consensus in partitionable networks. </title> <type> Technical Report TR97-1632, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> June </month> <year> 1997. </year>
Reference-contexts: Finally, an algorithm uses the failure detector in some situations to decide which messages to send, if any. In this model, algorithms are supposed to decide when to send messages based on whether a future message is ever received. <ref> [ACT97] </ref> provides a formal model for investigating the Consensus problem in networks subject to partitions and message loss. Their work is also based on the idea of unreliable failure detectors. The authors of [ACT97] explain that the circular definitions of [BDM97] are a result of defining network connectivity in terms of <p> are supposed to decide when to send messages based on whether a future message is ever received. <ref> [ACT97] </ref> provides a formal model for investigating the Consensus problem in networks subject to partitions and message loss. Their work is also based on the idea of unreliable failure detectors. The authors of [ACT97] explain that the circular definitions of [BDM97] are a result of defining network connectivity in terms of messages exchanged in a run and they provide a model that does not have this problem. Although [ACT97] is not directly related to Group Membership, the formal model used is of interest and <p> The authors of <ref> [ACT97] </ref> explain that the circular definitions of [BDM97] are a result of defining network connectivity in terms of messages exchanged in a run and they provide a model that does not have this problem. Although [ACT97] is not directly related to Group Membership, the formal model used is of interest and the ideas may be applicable to a formal model for Group Membership in networks subject to partitions and message loss. I will return to this open problem in the Proposal section of this report. <p> It is hoped that other researchers will adopt the model and various elements of the specification to study different variants on the Group Membership problem. 6 Another interesting question for investigation is what variants on the formal model are most realistic? In particular, our current model only considers crash faults. <ref> [ACT97] </ref> specifies a model for solving the Consensus problem in networks subject to partitions and message loss. Applying these ideas to Group Membership, could lead to a model and specification for Group Membership services in networks subject to those types of failures.
Reference: [ADKM92] <author> Yair Amir, Danny Dolev, Shlomo Kramer, and Dalia Malki. Transis: </author> <title> a communication sub-system for high availability. </title> <booktitle> In Proceedings of the 22nd Annual International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 76-84, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: There are a number of other publications which describe research systems with Group Membership services such as [Cri87] (Highly Available System), [vRBC + 93] (Horus), [KT91] (Amoeba), <ref> [ADKM92] </ref> (Transis), and [AMMS + 95] (Totem). The most widely cited of these is [RB94], in which the authors claim to give a rigorous specification for primary-partition Group Membership in asynchronous systems. They called this specification the Strong Group Membership Problem (SGMP).
Reference: [AMMS + 95] <author> Y. Amir, L.E. Moser, P.M. Melliar-Smith, D.A. Agarwal, and P. Ciarfella. </author> <title> The totem single-ring ordering and membership protocol. </title> <booktitle> In ACM Transactions on Computer Systems 13 4, </booktitle> <pages> pages 311-342, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: There are a number of other publications which describe research systems with Group Membership services such as [Cri87] (Highly Available System), [vRBC + 93] (Horus), [KT91] (Amoeba), [ADKM92] (Transis), and <ref> [AMMS + 95] </ref> (Totem). The most widely cited of these is [RB94], in which the authors claim to give a rigorous specification for primary-partition Group Membership in asynchronous systems. They called this specification the Strong Group Membership Problem (SGMP).
Reference: [BDM95] <author> Ozalp Babaoglu, Renzo Davoli, and Alberto Montresor. </author> <title> Failure detectors, group membership and view-synchronous communication in partitionable asynchronous systems. </title> <type> Technical Report UBLCS-95-18, </type> <institution> Department of Computer Science, University of Bologna, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: In the Proposal section of this report, I will describe some open problems and summarize my progress thus far. 2 Literature Review The publications most relevant to this proposal are [RB91] (updated in [RB94]), [ACBMT95], <ref> [BDM95] </ref> (updated in [BDM97]) and [CHTCB96]. [Bir93] describes the Isis research system based on the work in [RB91] and [RB94].
Reference: [BDM97] <author> Ozalp Babaoglu, Renzo Davoli, and Alberto Montresor. </author> <title> Partitionable group membership: Specification and algorithms. </title> <type> Technical Report UBLCS-97-01, </type> <institution> Department of Computer Science, University of Bologna, </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: In the Proposal section of this report, I will describe some open problems and summarize my progress thus far. 2 Literature Review The publications most relevant to this proposal are [RB91] (updated in [RB94]), [ACBMT95], [BDM95] (updated in <ref> [BDM97] </ref>) and [CHTCB96]. [Bir93] describes the Isis research system based on the work in [RB91] and [RB94]. <p> Although this mechanism ensures q will be isolated and removed from the group view, there is no discussion of how to prevent false suspicions from capriciously removing all the correct processes. Babaoglu, Davoli and Montresor consider the partitionable Group Membership problem in asynchronous systems <ref> [BDM97] </ref>. They claim to give a formal specification for a parti-tionable Group Membership service based on the idea of unreliable failure detectors [CT91]. Although the approach is sound, the formal model of [BDM97] is flawed. The model begins by defining a global history of events for a computation. <p> Babaoglu, Davoli and Montresor consider the partitionable Group Membership problem in asynchronous systems <ref> [BDM97] </ref>. They claim to give a formal specification for a parti-tionable Group Membership service based on the idea of unreliable failure detectors [CT91]. Although the approach is sound, the formal model of [BDM97] is flawed. The model begins by defining a global history of events for a computation. It is clear that for a global history to exist, an algorithm for the computation must exist. <p> Their work is also based on the idea of unreliable failure detectors. The authors of [ACT97] explain that the circular definitions of <ref> [BDM97] </ref> are a result of defining network connectivity in terms of messages exchanged in a run and they provide a model that does not have this problem.
Reference: [Bir93] <author> Kenneth P. Birman. </author> <title> The process group approach to reliable distributed computing. </title> <booktitle> In Communications of the ACM, </booktitle> <pages> pages 36-53, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: In the Proposal section of this report, I will describe some open problems and summarize my progress thus far. 2 Literature Review The publications most relevant to this proposal are [RB91] (updated in [RB94]), [ACBMT95], [BDM95] (updated in [BDM97]) and [CHTCB96]. <ref> [Bir93] </ref> describes the Isis research system based on the work in [RB91] and [RB94]. There are a number of other publications which describe research systems with Group Membership services such as [Cri87] (Highly Available System), [vRBC + 93] (Horus), [KT91] (Amoeba), [ADKM92] (Transis), and [AMMS + 95] (Totem). <p> Since the set of processes in a dynamic group changes over time, we need a rule to specify delivery and ordering of messages with respect to view changes. Virtual synchrony (first introduced in the Isis <ref> [Bir93] </ref> system) is the most common example of such a rule. Given two consecutive view changes for a group, v and v 0 , virtual synchrony requires that all processes in v and in v 0 deliver the same set of multicasts while in view v.
Reference: [CF97] <author> Flaviu Cristian and Christof Fetzer. </author> <title> The timed asynchronous system model. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of California, </institution> <address> San Diego, </address> <year> 1997. </year>
Reference-contexts: I will return to this open problem in the Proposal section of this report. Another model for networks subject to partitions is called the "timed asynchronous" model. It was first mentioned in [CS95] and updated in <ref> [CF97] </ref>. The model is based on experiments with distributed systems consisting of networked workstations in a laboratory setting. Messages can be lost or experience unbounded communication delay but most are delivered within a known time bound.
Reference: [CHTCB96] <author> Tushar Deepak Chandra, Vassos Hadzilacos, Sam Toueg, and Bernadette Charon-Bost. </author> <title> On the impossibility of group membership. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Principles of Distributed Computing, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: In the Proposal section of this report, I will describe some open problems and summarize my progress thus far. 2 Literature Review The publications most relevant to this proposal are [RB91] (updated in [RB94]), [ACBMT95], [BDM95] (updated in [BDM97]) and <ref> [CHTCB96] </ref>. [Bir93] describes the Isis research system based on the work in [RB91] and [RB94]. There are a number of other publications which describe research systems with Group Membership services such as [Cri87] (Highly Available System), [vRBC + 93] (Horus), [KT91] (Amoeba), [ADKM92] (Transis), and [AMMS + 95] (Totem). <p> Unfortunately, the model and specification are limited in applicability to systems with these types of timing assumptions. In particular, the timed asynchronous model focuses on workstations in a local area network. In a fresh approach to understanding the problem, <ref> [CHTCB96] </ref> prove an impossibility result for solving primary-partition Group Membership in asynchronous systems with crash failures. They specify the Weak Group Membership (WGM) problem which is a very small fragment of what any useful Group Membership service must provide. <p> installs a new view of g and no process installs a different new view of g. * There is at least one execution in which p i , i 2 f1; 2g, is the only process that wishes to leave g and also the only one removed from g. 4 <ref> [CHTCB96] </ref> proves that in an asynchronous system in which only one process may crash, the WGM problem cannot be solved. This result is very similar to the impossibility of Consensus in asynchronous systems. <p> For example, relying on partial synchrony is one way to overcome the impossibility result of Consensus. Some experimental systems that provide Group Membership services use partial synchrony to avoid the <ref> [CHTCB96] </ref> impossibility result. However, the correctness of these experimental systems have yet to be proven rigorously. Nor have the researchers made it easy to compare the strengths and weaknesses of one system against another. <p> As a result, I have now compiled a set of properties that I believe capture the basic notions of Group Membership (see attached paper). With a formal model and a specification of the problem, we can investigate lower bounds on the solvability of the specification. <ref> [CHTCB96] </ref> shows that in an asynchronous system in which only one process may crash the WGM problem cannot be solved. It seems very likely that this impossibility result would also apply to this proposal.
Reference: [Cri87] <author> Flaviu Cristian. </author> <title> Reaching agreement on processor group membership in synchronous distributed systems. </title> <booktitle> In Distributed Computing 4(4), </booktitle> <pages> pages 9-16, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: There are a number of other publications which describe research systems with Group Membership services such as <ref> [Cri87] </ref> (Highly Available System), [vRBC + 93] (Horus), [KT91] (Amoeba), [ADKM92] (Transis), and [AMMS + 95] (Totem). The most widely cited of these is [RB94], in which the authors claim to give a rigorous specification for primary-partition Group Membership in asynchronous systems.
Reference: [Cri91] <author> Flaviu Cristian. </author> <title> Reaching agreement on processor group membership in synchronous distributed systems. </title> <journal> Distributed Computing, </journal> <volume> 4 </volume> <pages> 175-187, </pages> <month> April </month> <year> 1991. </year> <month> 8 </month>
Reference-contexts: Processes may crash or experience unbounded delays between the execution of successive steps but most successive steps are executed within a known time bound. All processes have access to a hardware clock that runs within a linear bound of real-time. Cristian <ref> [Cri91] </ref> defined group membership services for synchronous distributed systems. Cristian and Schmuck extended the definition into the timed asynchronous model [CS95]. The algorithm and the specification of the Group Membership problem in this model rely heavily on timing assumptions.
Reference: [CS95] <author> Flaviu Cristian and Frank Schmuck. </author> <title> Agreeing on processor group member-ship in asynchronous distributed systems. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of California, </institution> <address> San Diego, </address> <year> 1995. </year> <note> Available by anonymous ftp at cs.ucsd.edu as /pub/team/asyncmembership.ps.Z. </note>
Reference-contexts: I will return to this open problem in the Proposal section of this report. Another model for networks subject to partitions is called the "timed asynchronous" model. It was first mentioned in <ref> [CS95] </ref> and updated in [CF97]. The model is based on experiments with distributed systems consisting of networked workstations in a laboratory setting. Messages can be lost or experience unbounded communication delay but most are delivered within a known time bound. <p> All processes have access to a hardware clock that runs within a linear bound of real-time. Cristian [Cri91] defined group membership services for synchronous distributed systems. Cristian and Schmuck extended the definition into the timed asynchronous model <ref> [CS95] </ref>. The algorithm and the specification of the Group Membership problem in this model rely heavily on timing assumptions. In [FLS97], the authors expand on this work and give a formal specification for a group communication service.
Reference: [CT91] <author> Tushar Deepak Chandra and Sam Toueg. </author> <title> Unreliable failure detectors for asynchronous systems. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: Babaoglu, Davoli and Montresor consider the partitionable Group Membership problem in asynchronous systems [BDM97]. They claim to give a formal specification for a parti-tionable Group Membership service based on the idea of unreliable failure detectors <ref> [CT91] </ref>. Although the approach is sound, the formal model of [BDM97] is flawed. The model begins by defining a global history of events for a computation. It is clear that for a global history to exist, an algorithm for the computation must exist. <p> I propose to contribute the following items to the area: * a rigorous formal model; * specifications for the Group Membership problem; * impossibility or lower bound results; * protocols that solve the specification; * and correctness proofs for the protocols. A failure detector <ref> [CT91] </ref> is a common abstraction in models for fault-tolerant distributed systems. I intend to apply a similar abstraction, called oracles, to study Group Membership. Each process in the system has access to a local exclude oracle and a local include oracle. <p> In the past months, I have completed the description of a formal model for discussing Group Membership where oracles take the place of the failure detectors in <ref> [CT91] </ref>. Even with the oracles abstraction in place, creating a specification for the Group Membership problem is a time consuming and complicated task. The properties that described progress in the system presented the most difficulties. Suppose the oracles wish to exclude a particular process from the group.
Reference: [FLP85] <author> Michael Fischer, Nancy Lynch, and Michael Paterson. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> Journal of the ACM, </journal> <volume> 32(2) </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: This result is very similar to the impossibility of Consensus in asynchronous systems. The similarity between the two impossibility results suggest that techniques long used to overcome the <ref> [FLP85] </ref> impossibility result may be applicable to the Group Membership problem. For example, relying on partial synchrony is one way to overcome the impossibility result of Consensus. Some experimental systems that provide Group Membership services use partial synchrony to avoid the [CHTCB96] impossibility result.
Reference: [FLS97] <author> Alan Fekete, Nancy Lynch, and Alex Shvartsman. </author> <title> Specifiying and using a partitionable group communication service. </title> <booktitle> In Proceedings of the 16th ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: Cristian [Cri91] defined group membership services for synchronous distributed systems. Cristian and Schmuck extended the definition into the timed asynchronous model [CS95]. The algorithm and the specification of the Group Membership problem in this model rely heavily on timing assumptions. In <ref> [FLS97] </ref>, the authors expand on this work and give a formal specification for a group communication service. Unfortunately, the model and specification are limited in applicability to systems with these types of timing assumptions. In particular, the timed asynchronous model focuses on workstations in a local area network.
Reference: [KT91] <author> M. Frans Kaashoek and Andrew S. Tanenbaum. </author> <title> Group communication in the amoeba distributed operating system. </title> <booktitle> In Proceedings of the 11th International Conference on Distributed Computer Systems, </booktitle> <pages> pages 222-230, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: There are a number of other publications which describe research systems with Group Membership services such as [Cri87] (Highly Available System), [vRBC + 93] (Horus), <ref> [KT91] </ref> (Amoeba), [ADKM92] (Transis), and [AMMS + 95] (Totem). The most widely cited of these is [RB94], in which the authors claim to give a rigorous specification for primary-partition Group Membership in asynchronous systems. They called this specification the Strong Group Membership Problem (SGMP).
Reference: [RB91] <author> Aleta Ricciardi and Kenneth Birman. </author> <title> Using process groups to implement failure detection in asynchronous environments. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 341-352, </pages> <year> 1991. </year>
Reference-contexts: I intend to begin the investigation will primary-partition Group Membership services in an asynchronous timing model. In the Proposal section of this report, I will describe some open problems and summarize my progress thus far. 2 Literature Review The publications most relevant to this proposal are <ref> [RB91] </ref> (updated in [RB94]), [ACBMT95], [BDM95] (updated in [BDM97]) and [CHTCB96]. [Bir93] describes the Isis research system based on the work in [RB91] and [RB94]. <p> Proposal section of this report, I will describe some open problems and summarize my progress thus far. 2 Literature Review The publications most relevant to this proposal are <ref> [RB91] </ref> (updated in [RB94]), [ACBMT95], [BDM95] (updated in [BDM97]) and [CHTCB96]. [Bir93] describes the Isis research system based on the work in [RB91] and [RB94]. There are a number of other publications which describe research systems with Group Membership services such as [Cri87] (Highly Available System), [vRBC + 93] (Horus), [KT91] (Amoeba), [ADKM92] (Transis), and [AMMS + 95] (Totem).
Reference: [RB94] <author> Aleta Ricciardi and Kenneth Birman. </author> <title> Process membership in asynchronous environments. </title> <type> Technical report, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> April </month> <year> 1994. </year> <note> available by anonymous ftp from ftp.cs.cornell.edu in pub/aleta/AsyncMembService.ps. </note>
Reference-contexts: I intend to begin the investigation will primary-partition Group Membership services in an asynchronous timing model. In the Proposal section of this report, I will describe some open problems and summarize my progress thus far. 2 Literature Review The publications most relevant to this proposal are [RB91] (updated in <ref> [RB94] </ref>), [ACBMT95], [BDM95] (updated in [BDM97]) and [CHTCB96]. [Bir93] describes the Isis research system based on the work in [RB91] and [RB94]. <p> of this report, I will describe some open problems and summarize my progress thus far. 2 Literature Review The publications most relevant to this proposal are [RB91] (updated in <ref> [RB94] </ref>), [ACBMT95], [BDM95] (updated in [BDM97]) and [CHTCB96]. [Bir93] describes the Isis research system based on the work in [RB91] and [RB94]. There are a number of other publications which describe research systems with Group Membership services such as [Cri87] (Highly Available System), [vRBC + 93] (Horus), [KT91] (Amoeba), [ADKM92] (Transis), and [AMMS + 95] (Totem). The most widely cited of these is [RB94], in which the authors claim to give a <p> system based on the work in [RB91] and <ref> [RB94] </ref>. There are a number of other publications which describe research systems with Group Membership services such as [Cri87] (Highly Available System), [vRBC + 93] (Horus), [KT91] (Amoeba), [ADKM92] (Transis), and [AMMS + 95] (Totem). The most widely cited of these is [RB94], in which the authors claim to give a rigorous specification for primary-partition Group Membership in asynchronous systems. They called this specification the Strong Group Membership Problem (SGMP). The goal of the SGMP is to track the processes in a distributed system that do not appear to be faulty. <p> In this particular execution, no view change occurs. Thus neither mgr nor q are removed from the group view. This contradicts the requirement of GMP-4 that either mgr or q be removed from the group view. The authors of [ACBMT95] call this behavior collective suicide. Another weakness of <ref> [RB94] </ref>, is that the authors do not give a description of what constitutes a good reason to remove a process from the group view. <p> The exclude oracle precisely describes the reasons a process would be excluded from a group thus avoiding the weakness of <ref> [RB94] </ref> where capricious removal of processes may occur. Further, Group Membership services designed for different application domains may have vastly different reasons to include or exclude.
Reference: [vRBC + 93] <author> Robert van Renesse, Kenneth P. Birman, Robert Cooper, Bradford Glade, and Patrick Stephenson. </author> <title> The horus system. </title> <booktitle> In Reliable Distributed Computing with the Isis Toolkit, </booktitle> <pages> pages 133-147, </pages> <year> 1993. </year> <month> 9 </month>
Reference-contexts: There are a number of other publications which describe research systems with Group Membership services such as [Cri87] (Highly Available System), <ref> [vRBC + 93] </ref> (Horus), [KT91] (Amoeba), [ADKM92] (Transis), and [AMMS + 95] (Totem). The most widely cited of these is [RB94], in which the authors claim to give a rigorous specification for primary-partition Group Membership in asynchronous systems. They called this specification the Strong Group Membership Problem (SGMP).
References-found: 19

