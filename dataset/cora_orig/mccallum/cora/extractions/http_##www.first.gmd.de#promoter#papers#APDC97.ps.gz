URL: http://www.first.gmd.de/promoter/papers/APDC97.ps.gz
Refering-URL: http://www.first.gmd.de/promoter/papers/index.html
Root-URL: 
Email: email: bi@first.gmd.de  
Title: Towards Abstraction of Message Passing Programming [1]  
Author: Hua Bi 
Address: Rudower Chaussee 5, 12489 Berlin, Germany  
Affiliation: RWCP Laboratory at GMD-FIRST GMD Institute for Computer Architecture and Software Technology  
Date: 100-107, March 19 March 21, 1997, Shanghai,  
Note: In the Proceedings of the International Conference on Advances on Parallel and Dis--tributed Computing (APDC'97), pp.  China. Copyright 1997 IEEE.  
Abstract: Data-parallel applications are usually programmed in the SPMD paradigm by using a message passing system such as MPI or PVM. However programming by using message passing primitives is still tedious and error-prone. This paper presents an abstraction of message passing programming in C++ to relieve programmers of low-level considerations. The runtime overhead introduced by the abstraction is shown to be negligible. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Chang, J. Saltz, and A. Sussman. </author> <title> Chaos++: A run-time library for supporting distributed dynamic data structure. </title> <type> Technical Report CRPC-TR95624, </type> <institution> Center for Res. on Parallel Computation, Rice University, </institution> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: In other words, PRL solves regular and irregular problems in one framework. Recently CHAOS++ <ref> [1] </ref> has been released. It subsumes CHAOS and Multiblock Parti, and provides additional support for distributed pointer-based data structures. In PRL, support for distributed pointer-based data structures will be handled by dynamic topology [9], that is, a distributed object can change its shape at runtime.
Reference: [2] <author> A. A. Chien and J. Dolby. </author> <title> The illinois concert system: A problem-solving environment for irregular applications. </title> <booktitle> In Proc. of DAGS'94, The Sym. on Parallel Computation and Problem Solving Environments, </booktitle> <year> 1994. </year>
Reference-contexts: The function relaxation can be used for different distributions, but for different distributions different communication patterns must be generated. Such communication patterns can be computed by the following generic algorithm: template&lt;int N, int M, class DT&gt; class NCP f IndexList* comm; public: NCP (DT& x) f int q <ref> [2] </ref>; comm = new IndexList [domain max]; for (int i=0; i&lt;N; i++) p [0]=i; p [1]=j; if (x.valid (p)) f int pd=x.domain (p); if (mydomain==pd) f int pi=x.index (p); q [0]=i-1; q [1]=j; if (x.valid (q)) comm [x.domain (q)] &lt;< pi; q [0]=i; q [1]=j-1; if (x.valid (q)) comm [x.domain (q)] <p> This is one of our future work. The second type of libraries is associated with a compiler for a language which augments an existing language with parallel constructs. Examples of this type systems based on C++ include ICC++ <ref> [2] </ref>, C** [6], and pC++ [7]. Like PRL, these systems also decouple the representation of distribution from the data itself, but assume a array-based collection of objects and parallel constructs to operate on them. As indicated before PRL provides the representation of distribution not restricted in array-based collection.
Reference: [3] <author> R. Das, M. Uysal, J. Saltz, and Y.-S. Hwang. </author> <title> Communication optimization for irregular scientific computation on distributed memory architectures. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 22(3):462479, </volume> <month> Sep. </month> <year> 1994. </year>
Reference-contexts: Comparisons and conclusion Roughly speaking there are two types of libraries that are relevant to support data-parallel application on distributed-memory parallel machines. The first type of libraries is a user-level class library that assumes no special support from a compiler, such as Multiblock Parti [10] and CHAOS <ref> [3] </ref> , P++ [8], and LPARX [5]. These libraries provide efficient management of array-based parallel constructs distributed across processors. PRL, however, provides supports not only for rectangular structures but also for non-rectangular structures.
Reference: [4] <author> W. K. Giloi, M. Kessler, and A. Schramm. </author> <title> Promoter : A high level object-parallel programming language. </title> <booktitle> In Proc. of Internat. Conf. on High Performance Computing, </booktitle> <address> New Delhi, India, </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: As indicated before PRL provides the representation of distribution not restricted in array-based collection. By the way, PRL library is also used as a runtime library for a compiler of the PROMOTER language <ref> [4] </ref>, a high-level object-parallel programming language to exploit static and dynamic data parallelism. In our approach a programmer can write his programs without considering the message passing details.
Reference: [5] <author> S. R. Kohn and S. B. Baden. </author> <title> A robust parallel programming model for dynamic non-uniform scientific computations. </title> <booktitle> In Proc. of the Scalable High Performance Computing Conference, </booktitle> <pages> pages 509517. </pages> <publisher> IEEE CS. Press, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: The first type of libraries is a user-level class library that assumes no special support from a compiler, such as Multiblock Parti [10] and CHAOS [3] , P++ [8], and LPARX <ref> [5] </ref>. These libraries provide efficient management of array-based parallel constructs distributed across processors. PRL, however, provides supports not only for rectangular structures but also for non-rectangular structures.
Reference: [6] <author> L. R. Larus. </author> <title> A large-grain, object-oriented data-parallel programming language. </title> <editor> In U. Banerjee, A. N. D. Gelernter, and D. Padua, editors, </editor> <booktitle> Languages and Compilers for Parallel Computing (5th International Workshop), </booktitle> <pages> pages 326 341. </pages> <publisher> Springer-Verlag, </publisher> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: This is one of our future work. The second type of libraries is associated with a compiler for a language which augments an existing language with parallel constructs. Examples of this type systems based on C++ include ICC++ [2], C** <ref> [6] </ref>, and pC++ [7]. Like PRL, these systems also decouple the representation of distribution from the data itself, but assume a array-based collection of objects and parallel constructs to operate on them. As indicated before PRL provides the representation of distribution not restricted in array-based collection.
Reference: [7] <author> A. Malony, B. Mohr, D. Beckman, D. Gannon, S. Yang, F. Bodin, and S. Kesavan. </author> <title> A parallel c++ runtime system for scalable parallel systems. </title> <booktitle> In Proc. of Supercomputing'93, </booktitle> <pages> pages 140152. </pages> <publisher> IEEE CS. Press, </publisher> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: This is one of our future work. The second type of libraries is associated with a compiler for a language which augments an existing language with parallel constructs. Examples of this type systems based on C++ include ICC++ [2], C** [6], and pC++ <ref> [7] </ref>. Like PRL, these systems also decouple the representation of distribution from the data itself, but assume a array-based collection of objects and parallel constructs to operate on them. As indicated before PRL provides the representation of distribution not restricted in array-based collection.
Reference: [8] <author> R. Parsons and D. Quinlan. </author> <title> Run-time recognition of task parallelism within the p++ class library. </title> <booktitle> In Proc. of Int. Joint Conf. on Pattern Recognition, </booktitle> <month> Sep. </month> <year> 1994. </year>
Reference-contexts: The first type of libraries is a user-level class library that assumes no special support from a compiler, such as Multiblock Parti [10] and CHAOS [3] , P++ <ref> [8] </ref>, and LPARX [5]. These libraries provide efficient management of array-based parallel constructs distributed across processors. PRL, however, provides supports not only for rectangular structures but also for non-rectangular structures.
Reference: [9] <author> A. Schramm. </author> <title> Irregular applications in promoter. </title> <editor> In W. K. Giloi, S. Jaenichen, and B. Shriver, editors, </editor> <booktitle> Proc. of Internat. MPPM Conference, </booktitle> <address> Berlin, Germany, Oct. 1995. </address> <publisher> IEEE CS. Press. </publisher>
Reference-contexts: In other words, PRL solves regular and irregular problems in one framework. Recently CHAOS++ [1] has been released. It subsumes CHAOS and Multiblock Parti, and provides additional support for distributed pointer-based data structures. In PRL, support for distributed pointer-based data structures will be handled by dynamic topology <ref> [9] </ref>, that is, a distributed object can change its shape at runtime. It provides a conceptual equivalence to dynamic creation or expansion in pointer-based data structures. This is one of our future work.
Reference: [10] <author> A. Sussman, G. Agrawal, and J. Saltz. </author> <title> A manual for the multiblock parti runtime primitives, revision 4.1. </title> <institution> Technical Report CS-TR-3070 and UMIACS-TR-93-36.1, Uni. of Maryland, Department of Com. Sci. and Institute for Advanced Computer Studies, </institution> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: Comparisons and conclusion Roughly speaking there are two types of libraries that are relevant to support data-parallel application on distributed-memory parallel machines. The first type of libraries is a user-level class library that assumes no special support from a compiler, such as Multiblock Parti <ref> [10] </ref> and CHAOS [3] , P++ [8], and LPARX [5]. These libraries provide efficient management of array-based parallel constructs distributed across processors. PRL, however, provides supports not only for rectangular structures but also for non-rectangular structures.
References-found: 10

