URL: ftp://ftp.cs.unc.edu/pub/users/dewan/papers/trends.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/cse.html
Root-URL: http://www.cs.unc.edu
Note: Contents  
Abstract: 8 Tools for Implementing Multiuser User Interfaces 3 8.1 INTRODUCTION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 8.2 DEFINITIONS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 8.3 DATABASE SYSTEM . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 8.4 DISTRIBUTED SYSTEM . . . . . . . . . . . . . . . . . . . . . . . . . 9 8.5 MESSAGE SERVER . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 8.6 SHARED OBJECT SYSTEM . . . . . . . . . . . . . . . . . . . . . . . . 13 8.7 SHARED WINDOW SYSTEM . . . . . . . . . . . . . . . . . . . . . . . 15 8.8 MULTIUSER TOOLKIT . . . . . . . . . . . . . . . . . . . . . . . . . . 18 8.9 MULTIUSER UIMS . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 8.10 MULTIUSER USER-INTERFACE GENERATOR . . . . . . . . . . . . . . 21 8.11 USING MULTIPLE MULTIUSER TOOLS . . . . . . . . . . . . . . . . . 24 8.12 CONCLUSIONS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 
Abstract-found: 1
Intro-found: 0
Reference: [Atk87] <author> Malcolm P. Atkinson and O. Peter Buneman. </author> <title> Types and persistence in database programming languages. </title> <journal> ACM Computer Surveys, </journal> <volume> 19(2), </volume> <month> June </month> <year> 1987. </year>
Reference-contexts: First, a database system and its clients use different representations of data. As a result, the database approach forces its clients to convert between different TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES representations of data, which is referred to as the impedance mismatch problem <ref> [Atk87] </ref>. Impedance mismatch makes the overhead of developing multiuser applications high since programmers must write translation code that converts between the different representations.
Reference: [Ben92] <author> Richard Bentley, Tom Rodden, Peter Sawyer, and Ian Sommerville. </author> <title> An architecture for tailoring cooperative multi-user displays. </title> <booktitle> Proceedings of the ACM Conference on Computer Supported Cooperative Work, </booktitle> <pages> pages 203-209, </pages> <month> Nov </month> <year> 1992. </year>
Reference-contexts: have been implemented recently including the Colab [Stef87] and GROVE [Ell90] outline editors, the RTCAL appointment system [Sar85], the CES [Gre86], Quilt [Fis88], and PREP [Neu90] co TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES authoring systems, the MACE graphics editor [New91a], the ICICLE code inspector [Bro90], a cooperative air-traffic control system <ref> [Ben92] </ref>, the EXPRES system for collaborative creation, submission, and review of research proposals [Ols90], and the FLECSE collaborative software development environment [Dew93c]. The example also illustrates the difficulty in implementing a multiuser application.
Reference: [Bha89] <author> Bharat Bhargava and John Riedl. </author> <title> The Raid distributed database system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(6) </volume> <pages> 726-736, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: multiple client processes executing on behalf of different users, allows its clients to group data accesses into transactions, provides concurrency control to ensure that transactions are executed atomically, offers access control to prevent unauthorized access, creates efficient data structures for storing large amounts of data, replicates data at distributed sites <ref> [Bha89] </ref>, stores data in main memory [Leh86], and provides a relational query language for accessing and manipulating data. multiuser application is composed of multiple database clients, each of which interacts with a particular user of the application and uses the database to store the data shared among the users (Figure 8.2).
Reference: [Bir84] <author> Andrew D. Birrel and Bruce Jay Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM TOCS, </journal> <volume> 2(1), </volume> <month> February </month> <year> 1984. </year>
Reference-contexts: Two kinds of tools have been developed to provide high-level support for communicating information among distributed clients: Distributed RPC (Remote Procedure Call) systems such as Cedar <ref> [Bir84] </ref>, which allow a client to invoke procedures in remote clients and distributed constraint systems such as the Mercury attribute grammar system [Kai87], which allow programmers to define constraints among the data maintained by different distributed clients.
Reference: [Bro90] <author> L. Brothers, V. Sembugamoorthy, and M. Muller. ICICLE: </author> <title> Groupware for code inspection. </title> <booktitle> Proceedings of the ACM Conference on Computer Supported Cooperative Work, </booktitle> <pages> pages 169-181, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: a result, several experimental multiuser applications have been implemented recently including the Colab [Stef87] and GROVE [Ell90] outline editors, the RTCAL appointment system [Sar85], the CES [Gre86], Quilt [Fis88], and PREP [Neu90] co TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES authoring systems, the MACE graphics editor [New91a], the ICICLE code inspector <ref> [Bro90] </ref>, a cooperative air-traffic control system [Ben92], the EXPRES system for collaborative creation, submission, and review of research proposals [Ols90], and the FLECSE collaborative software development environment [Dew93c]. The example also illustrates the difficulty in implementing a multiuser application.
Reference: [Cac91] <author> CACM. </author> <title> Special issue on next-generation database systems. </title> <journal> CACM, </journal> <volume> 34(10), </volume> <month> October </month> <year> 1991. </year>
Reference-contexts: In this paper, we use the term database system for a traditional relational database system. The following two sections address some of the properties of next generation systems <ref> [Cac91] </ref>.
Reference: [Cho92] <author> Rajiv Choudhary and Prasun Dewan. </author> <title> Multi-user undo/redo. </title> <type> Technical report, </type> <institution> Software Engineering Research Center, Purdue University, </institution> <year> 1992. </year> <title> TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES </title>
Reference-contexts: In this paper, we have considered only a subset of the collaboration functions to compare the automation, flexibility, and performance of multiuser tools. It is necessary to also consider other important collaboration functions such as support for multimedia [Man91], undo/redo <ref> [Cho92] </ref>, and navigation [Jef92] in multiuser applications. It would be also useful to consider other criteria for comparing these tools such as how easy it is to use the applications supported by them.
Reference: [Cro90] <author> Terrence Crowley, Paul Milazzo, Ellie Baker, Harry Forsdick, and Raymond Tomlinson. MMConf: </author> <title> An infrastructure for building shared multimedia applications. </title> <booktitle> Proc. of ACM Conference on Computer Supported Cooperative Work, </booktitle> <pages> pages 329-342, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: since multiple invocations of a semantic operation may perform computationally expensive operations multiple times, attempt to read the same file simultaneously, attempt to write the same data to a file multiple times, access files that are not available at all workstations, and send a mail message multiple times [Lan86] [Lau90] <ref> [Cro90] </ref>. For instance, if the example application program mails a message whenever a module is fixed, the message will be sent by each replica created by the shared window system. Thus, in several situations, shared window systems either do not give the desired performance or desired semantics. <p> MMConf <ref> [Cro90] </ref> supports the replicated architecture and allows a replica to determine whether an input event generated by its user should be broadcast to other replicas. This facility allows the different replicas to become separate logical entities with separate states.
Reference: [Dew90a] <author> Prasun Dewan. </author> <title> A tour of the Suite user interface software. </title> <booktitle> Proceedings of the 3rd ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 57-65, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Examples of user-interface generators include ADE [Row85], which supports form-filling interfaces; and single-user Suite <ref> [Dew90a] </ref>, which supports generalized editing interfaces [Dew90c]. Multiuser Suite [Dew92], which is an extension of single-user Suite, illustrates the benefits of extending a single-user user-interface generator to support multiuser applications. Single-user Suite offers near automatic generation of single-user editing interfaces. It supports the abstraction of active variables and interaction variables.
Reference: [Dew90b] <author> Prasun Dewan and Rajiv Choudhary. </author> <title> Experience with the Suite distributed object model. </title> <booktitle> Proceedings of IEEE Workshop on Experimental Distributed Systems, </booktitle> <pages> pages 57-63, </pages> <month> Oc-tober </month> <year> 1990. </year>
Reference-contexts: Under this approach, such collaboration can only be supported if each client listening for changes frequently polls the database system for the changes, thereby making the client more difficult to program and, more important, drastically degrading the performance of the system <ref> [Dew90b] </ref>. The cost of polling together with the cost of impedance mismatch makes this technology unsuitable for highly concurrent collaborative tasks. Implementing the example user-interface: To make the discussion concrete, consider implementation of the example user-interface (Figure 8.1) using a database system.
Reference: [Dew90c] <author> Prasun Dewan and Marvin Solomon. </author> <title> An approach to support automatic generation of user interfaces. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 566-609, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Examples of user-interface generators include ADE [Row85], which supports form-filling interfaces; and single-user Suite [Dew90a], which supports generalized editing interfaces <ref> [Dew90c] </ref>. Multiuser Suite [Dew92], which is an extension of single-user Suite, illustrates the benefits of extending a single-user user-interface generator to support multiuser applications. Single-user Suite offers near automatic generation of single-user editing interfaces. It supports the abstraction of active variables and interaction variables.
Reference: [Dew91] <author> Prasun Dewan and Rajiv Choudhary. </author> <title> Flexible user interface coupling in collaborative systems. </title> <booktitle> Proceedings of the ACM CHI'91 Conference, </booktitle> <pages> pages 41-49, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: It also defines a variety of high-level collaboration attributes, which are based on the editing model of interaction and can be used by application programs and users to dynamically specify alternate collaboration schemes. These attributes include sharing attributes, communication attributes, access attributes, and concurrency-control attributes. Sharing attributes <ref> [Dew91] </ref> support the semantic, image, and complete sharing schemes discussed above. In addition, they support other kinds of sharing such as sharing of selected regions and cursor positions. Communication attributes [Dew91] determine when changes made by a user are communicated to other users. <p> These attributes include sharing attributes, communication attributes, access attributes, and concurrency-control attributes. Sharing attributes <ref> [Dew91] </ref> support the semantic, image, and complete sharing schemes discussed above. In addition, they support other kinds of sharing such as sharing of selected regions and cursor positions. Communication attributes [Dew91] determine when changes made by a user are communicated to other users. They support, for instance, communication of changes as they are made or when they are explicitly committed.
Reference: [Dew92] <author> Prasun Dewan and Rajiv Choudhary. </author> <title> A high-level and flexible framework for implementing multiuser user interfaces. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(4) </volume> <pages> 345-380, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Finally, we present conclusions and directions for future work. A brief version of this discussion is given in <ref> [Dew92] </ref>, which describes multiuser Suite, a multiuser tool developed by the author, and compares it with other multiuser tools to highlight its unique features. <p> Examples of user-interface generators include ADE [Row85], which supports form-filling interfaces; and single-user Suite [Dew90a], which supports generalized editing interfaces [Dew90c]. Multiuser Suite <ref> [Dew92] </ref>, which is an extension of single-user Suite, illustrates the benefits of extending a single-user user-interface generator to support multiuser applications. Single-user Suite offers near automatic generation of single-user editing interfaces. It supports the abstraction of active variables and interaction variables.
Reference: [Dew93a] <author> Prasun Dewan. </author> <title> Designing and implementing multi-user applications: A case study. </title> <journal> Software-Practice and Experience, </journal> <volume> 23(1) </volume> <pages> 75-94, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: Finally, unlike all the other tools discussed later, it provides efficient storage of large amounts of data and a predicate-based query language to access them. Our experience shows that implementing even simple queries can be a non-trivial task if a database system is not used <ref> [Dew93a] </ref>. However, in comparison to some of the other tools discussed later, a database system has two main disadvantages. First, a database system and its clients use different representations of data.
Reference: [Dew93b] <author> Prasun Dewan. </author> <title> Principles of designing multi-user user interface development environments languages. </title> <booktitle> Proceedings of the 1992 IFIP TC2/WG 2.7 Working Conference on Engineering for Human-Computer Interaction, </booktitle> <address> Ellivuori, Finland, </address> <note> to appear. </note>
Reference-contexts: Such a tool can support collaboration-transparent multiuser programs. In particular, it can allow sharing of existing single-user applications developed using the basis. In <ref> [Dew93b] </ref> we give general principles of designing a multiuser tool using this approach.
Reference: [Dew93c] <author> Prasun Dewan and John Riedl. </author> <title> Toward computer-supported concurrent software engineering. </title> <journal> IEEE Computer, </journal> <note> 26(1), to appear in January 1993. </note>
Reference-contexts: Quilt [Fis88], and PREP [Neu90] co TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES authoring systems, the MACE graphics editor [New91a], the ICICLE code inspector [Bro90], a cooperative air-traffic control system [Ben92], the EXPRES system for collaborative creation, submission, and review of research proposals [Ols90], and the FLECSE collaborative software development environment <ref> [Dew93c] </ref>. The example also illustrates the difficulty in implementing a multiuser application. Like a single-user application, a multiuser application must perform computation tasks such as testing a module for coverage and interaction tasks such as processing input commands and displaying results.
Reference: [Dem87] <author> T. DeMarco and T. Lister. Peopleware: </author> <title> Productive Projects and Teams. </title> <publisher> Dorset House Publishing Co., </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: Multiuser applications such this one have the potential of automating a significant amount of cooperative work carried out at current organizations <ref> [Dem87] </ref>.
Reference: [Ell90] <author> Clarence A. Ellis, Simon J. Gibbs, and Gail L. Rein. </author> <title> Design and use of a group editor. </title> <booktitle> Proceedings of IFIP WG2.7 Working Conference on Engineering for Human Computer Communication, </booktitle> <month> August </month> <year> 1989, </year> <pages> pages 13-28, </pages> <year> 1990. </year>
Reference-contexts: Multiuser applications such this one have the potential of automating a significant amount of cooperative work carried out at current organizations [Dem87]. As a result, several experimental multiuser applications have been implemented recently including the Colab [Stef87] and GROVE <ref> [Ell90] </ref> outline editors, the RTCAL appointment system [Sar85], the CES [Gre86], Quilt [Fis88], and PREP [Neu90] co TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES authoring systems, the MACE graphics editor [New91a], the ICICLE code inspector [Bro90], a cooperative air-traffic control system [Ben92], the EXPRES system for collaborative creation, submission, and review of <p> it must efficiently and flexibly carry out several collaboration tasks such as dynamically making and breaking connections with possibly remote users, multiplexing input from and demultiplexing output to multiple users, informing users of input entered by other users, helping users coordinate their interaction, and providing concurrency and access control [Sar85] <ref> [Ell90] </ref>. For this reason, few multiuser applications have been developed so far despite the tremendous potential of these applications. Moreover, most of the projects that have implemented these applications from scratch have, typically, been multi-year, multi-person projects. <p> A brief version of this discussion is given in [Dew92], which describes multiuser Suite, a multiuser tool developed by the author, and compares it with other multiuser tools to highlight its unique features. This paper is also related to a recent paper by Ellis et al <ref> [Ell90] </ref>, which surveys the area of multiuser applications, describing the important issues raised by these applications and approaches to resolving them. Our paper complements this work by surveying the related area of multiuser tools.
Reference: [Ens88] <author> J.R. Ensor, S.R. Ahuja, D.N. Horn, and S.E. Lucco. </author> <title> The Rapport multimedia conferencing system: A software overview. </title> <booktitle> Proceedings of the 2nd IEEE Conference on Computer Workstations, </booktitle> <pages> pages 52-58, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: In [Dew93b] we give general principles of designing a multiuser tool using this approach. In the remainder of the paper, we discuss and compare specific multiuser tools that have been developed using this approach. 8.7 SHARED WINDOW SYSTEM A shared window system such as VConf [Lan86] and Rapport <ref> [Ens88] </ref> is like a shared object system except that it supports sharing of windows rather than sharing of arbitrary objects. It offers its clients the abstraction of a shared window, which is a single logical window physically replicated on the screens of all users of the application.
Reference: [Fis88] <author> R. Fish, R. Kraut, M. Leland, and M. Cohen. Quilt: </author> <title> a collaborative tool for cooperative writing. </title> <booktitle> Proceedings of ACM SIGOIS Conference, </booktitle> <pages> pages 30-37, </pages> <year> 1988. </year>
Reference-contexts: As a result, several experimental multiuser applications have been implemented recently including the Colab [Stef87] and GROVE [Ell90] outline editors, the RTCAL appointment system [Sar85], the CES [Gre86], Quilt <ref> [Fis88] </ref>, and PREP [Neu90] co TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES authoring systems, the MACE graphics editor [New91a], the ICICLE code inspector [Bro90], a cooperative air-traffic control system [Ben92], the EXPRES system for collaborative creation, submission, and review of research proposals [Ols90], and the FLECSE collaborative software development environment [Dew93c].
Reference: [Gre86] <author> Irene Greif, Robert Seliger, and William Weihl. </author> <title> Atomic data abstractions in a distributed collaborative editing system. </title> <booktitle> Conference record of POPL, </booktitle> <month> January </month> <year> 1986. </year>
Reference-contexts: Multiuser applications such this one have the potential of automating a significant amount of cooperative work carried out at current organizations [Dem87]. As a result, several experimental multiuser applications have been implemented recently including the Colab [Stef87] and GROVE [Ell90] outline editors, the RTCAL appointment system [Sar85], the CES <ref> [Gre86] </ref>, Quilt [Fis88], and PREP [Neu90] co TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES authoring systems, the MACE graphics editor [New91a], the ICICLE code inspector [Bro90], a cooperative air-traffic control system [Ben92], the EXPRES system for collaborative creation, submission, and review of research proposals [Ols90], and the FLECSE collaborative software development environment
Reference: [Jef92] <author> Kevin Jeffay, Douglas E. Shackelford, John B. Smith, and F. Donelson Smith. </author> <title> A distributed graph storage system for artifacts in group collaborations. </title> <booktitle> Proceedings of CSCW'92, </booktitle> <month> Nov </month> <year> 1992. </year>
Reference-contexts: In this paper, we have considered only a subset of the collaboration functions to compare the automation, flexibility, and performance of multiuser tools. It is necessary to also consider other important collaboration functions such as support for multimedia [Man91], undo/redo [Cho92], and navigation <ref> [Jef92] </ref> in multiuser applications. It would be also useful to consider other criteria for comparing these tools such as how easy it is to use the applications supported by them. One of the important conclusions of this paper is that each of these tools has important advantages and drawbacks.
Reference: [Kai87] <author> Gail E. Kaiser, Simon M. Kaplan, and Josephine Micallef. </author> <title> Multiuser, distributed language-based environments. </title> <journal> IEEE Software, </journal> <volume> 4(6) </volume> <pages> 58-69, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Two kinds of tools have been developed to provide high-level support for communicating information among distributed clients: Distributed RPC (Remote Procedure Call) systems such as Cedar [Bir84], which allow a client to invoke procedures in remote clients and distributed constraint systems such as the Mercury attribute grammar system <ref> [Kai87] </ref>, which allow programmers to define constraints among the data maintained by different distributed clients.
Reference: [Kap92] <author> Simon M. Kaplan, William J. Tolone, Douglas P. Bogia, and Celsina Bignoli. </author> <title> Flexible, active support for collaborative work with conversationbuilder. </title> <booktitle> Proceedings of CSCW'92, </booktitle> <month> Nov </month> <year> 1992. </year>
Reference-contexts: A comparison of these two styles of programming is beyond the scope of this paper. 8.5 MESSAGE SERVER Message servers such as Field [Rei90], YEAST [Kri91], and the CB Message Bus <ref> [Kap92] </ref> allow a client to exchange messages with remote clients without being aware of the identities of the remote clients or the messages in which they are interested. Each client sends to the message server messages regarding all possible changes to its state that other clients may be interested in.
Reference: [Kra88] <author> Glenn E. Krasner and Stephen T. Pope. </author> <title> A cookbook for using the model-view-controller user interface paradigm in smalltalk-80. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 1(3) </volume> <pages> 26-49, </pages> <month> August/September </month> <year> 1988. </year>
Reference-contexts: Rules can be associated with guards, which determine the conditions under which they fire. Rendezvous distinguishes between abstract objects and view objects, which correspond to Smalltalk models and views, <ref> [Kra88] </ref> respectively. The former define semantic data while the latter define how these data are viewed and manipulated by users (Figure 8.14).
Reference: [Kri91] <author> Balachander Krishnamurthy and David S. Rosenblum. </author> <title> An event-action model of computer-supported cooperative work: </title> <booktitle> Design and implementaion. International Workshop on CSCW, </booktitle> <pages> pages 132-145, </pages> <year> 1991. </year>
Reference-contexts: A comparison of these two styles of programming is beyond the scope of this paper. 8.5 MESSAGE SERVER Message servers such as Field [Rei90], YEAST <ref> [Kri91] </ref>, and the CB Message Bus [Kap92] allow a client to exchange messages with remote clients without being aware of the identities of the remote clients or the messages in which they are interested.
Reference: [Lan86] <author> Keith A. Lantz. </author> <title> An experiment in integrated multimedia conferencing. </title> <booktitle> Proceedings of Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 267-275, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: In [Dew93b] we give general principles of designing a multiuser tool using this approach. In the remainder of the paper, we discuss and compare specific multiuser tools that have been developed using this approach. 8.7 SHARED WINDOW SYSTEM A shared window system such as VConf <ref> [Lan86] </ref> and Rapport [Ens88] is like a shared object system except that it supports sharing of windows rather than sharing of arbitrary objects. It offers its clients the abstraction of a shared window, which is a single logical window physically replicated on the screens of all users of the application. <p> The centralized architecture creates a central bottleneck that broadcasts potentially large PRASUN DEWAN declaration of data structures and procedures --main steps implement initial user interface do get and parse input implement querying of state compute changes to state display output until user quits amounts of output <ref> [Lan86] </ref>. <p> always desirable since multiple invocations of a semantic operation may perform computationally expensive operations multiple times, attempt to read the same file simultaneously, attempt to write the same data to a file multiple times, access files that are not available at all workstations, and send a mail message multiple times <ref> [Lan86] </ref> [Lau90] [Cro90]. For instance, if the example application program mails a message whenever a module is fixed, the message will be sent by each replica created by the shared window system. Thus, in several situations, shared window systems either do not give the desired performance or desired semantics.
Reference: [Lau90] <author> J.C. Lauwers and K.A. Lantz. </author> <title> Collaboration awareness in support of collaboration transparency: Requirements for the next generation of shared window systems. </title> <booktitle> Proceedings of ACM CHI'90, </booktitle> <pages> pages 303-312, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Interaction awareness: A measure of the amount of code in a client of a single-user tool that defines interaction functions. Collaboration awareness: A measure of the amount of code in a client of a multiuser tool that defines collaboration functions. Collaboration -aware/-transparent client <ref> [Lau90] </ref>: A client that is aware/unaware it is interacting with multiple users, that is, a client that defines some/none of the collaboration functions. Call: A procedure invoked by a client in a server. <p> desirable since multiple invocations of a semantic operation may perform computationally expensive operations multiple times, attempt to read the same file simultaneously, attempt to write the same data to a file multiple times, access files that are not available at all workstations, and send a mail message multiple times [Lan86] <ref> [Lau90] </ref> [Cro90]. For instance, if the example application program mails a message whenever a module is fixed, the message will be sent by each replica created by the shared window system. Thus, in several situations, shared window systems either do not give the desired performance or desired semantics.
Reference: [Leh86] <author> T. Lehman and M. Carey. </author> <title> Query processing in main memory database systems. </title> <booktitle> Proceed PRASUN DEWAN ings of 1986 SIGMOD conference, </booktitle> <pages> pages 239-250, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: of different users, allows its clients to group data accesses into transactions, provides concurrency control to ensure that transactions are executed atomically, offers access control to prevent unauthorized access, creates efficient data structures for storing large amounts of data, replicates data at distributed sites [Bha89], stores data in main memory <ref> [Leh86] </ref>, and provides a relational query language for accessing and manipulating data. multiuser application is composed of multiple database clients, each of which interacts with a particular user of the application and uses the database to store the data shared among the users (Figure 8.2).
Reference: [Lin84] <author> Mark A. Linton. </author> <title> Implementing relational views of programs. </title> <booktitle> Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 132-140, </pages> <month> April </month> <year> 1984. </year>
Reference-contexts: It also increases the response time of the applications because of the overhead of executing the translation code at runtime, which must perform costly join operations in case of structured data such as parse trees <ref> [Lin84] </ref>. Impedance mismatch is also a problem in single-user applications that use the database to store their persistent data. It is a more severe problem in multiuser applications developed using this approach since they use the database to also store shared, possibly non-persistent, data such as scrollbar positions.
Reference: [Man91] <author> M. Mantei, R. M. Backer, A. J. Sellen, W. A.S. Buxton, T. Milligan, and B. Wellman. </author> <title> Experiences in the use of a media space. </title> <booktitle> Proceedings of CHI'91, </booktitle> <pages> pages 203-208, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: In this paper, we have considered only a subset of the collaboration functions to compare the automation, flexibility, and performance of multiuser tools. It is necessary to also consider other important collaboration functions such as support for multimedia <ref> [Man91] </ref>, undo/redo [Cho92], and navigation [Jef92] in multiuser applications. It would be also useful to consider other criteria for comparing these tools such as how easy it is to use the applications supported by them.
Reference: [Neu90] <author> Christine M. Neuwirth, David S. Kaufer, Ravinder Chandok, and James H. Morris. </author> <booktitle> Issues in the design of computer support for co-authoring and commenting. Proceedings of ACM Conference on Computer Supported Cooperative Work, </booktitle> <pages> pages 183-195, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: As a result, several experimental multiuser applications have been implemented recently including the Colab [Stef87] and GROVE [Ell90] outline editors, the RTCAL appointment system [Sar85], the CES [Gre86], Quilt [Fis88], and PREP <ref> [Neu90] </ref> co TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES authoring systems, the MACE graphics editor [New91a], the ICICLE code inspector [Bro90], a cooperative air-traffic control system [Ben92], the EXPRES system for collaborative creation, submission, and review of research proposals [Ols90], and the FLECSE collaborative software development environment [Dew93c].
Reference: [New91a] <author> R.E. Newman-Wolfe and H. Pelimuhandiram. </author> <title> The Mace fine-grained concurrent text editor. </title> <booktitle> Proceedings of ACM/IEEE Conference on Organizational Computing Systems (COCS 91), </booktitle> <pages> pages 240-254,, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: As a result, several experimental multiuser applications have been implemented recently including the Colab [Stef87] and GROVE [Ell90] outline editors, the RTCAL appointment system [Sar85], the CES [Gre86], Quilt [Fis88], and PREP [Neu90] co TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES authoring systems, the MACE graphics editor <ref> [New91a] </ref>, the ICICLE code inspector [Bro90], a cooperative air-traffic control system [Ben92], the EXPRES system for collaborative creation, submission, and review of research proposals [Ols90], and the FLECSE collaborative software development environment [Dew93c]. The example also illustrates the difficulty in implementing a multiuser application.
Reference: [New91b] <author> R. E. Newman-Wolfe, C. L. Ramirez, H. Pelimuhandiram, M. Montes, M. Webb, and D. L. Wilson. </author> <title> A brief overview of the DCS distributed conferencing system. </title> <booktitle> Proceedings of the Summer Usenix Conference, </booktitle> <pages> pages 437-452, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Implementing the example user-interface: The implementation is similar to the implementation in the previous example except that the client broadcasts input events that change scrollbars of test windows and other shared state but not those that change scrollbars of edit windows and other private state. DCS <ref> [New91b] </ref> provides conference management facilities for applications while allowing them to implement their own methods for sharing, concurrency control, and access control. All application programs developed using DCS must provide a special interface for interacting with the system.
Reference: [Ols90] <author> Gary Olson and Dan Atkins. </author> <title> Supporting collaboration with advanced multimedia electronic mail: the nsf expres project. In Intellectual Teamwork: Social and Technological Foundations of Cooperative Work. </title> <editor> J Galegher, R. Kraut, and C. Egido (Eds)., </editor> <year> 1990. </year>
Reference-contexts: the RTCAL appointment system [Sar85], the CES [Gre86], Quilt [Fis88], and PREP [Neu90] co TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES authoring systems, the MACE graphics editor [New91a], the ICICLE code inspector [Bro90], a cooperative air-traffic control system [Ben92], the EXPRES system for collaborative creation, submission, and review of research proposals <ref> [Ols90] </ref>, and the FLECSE collaborative software development environment [Dew93c]. The example also illustrates the difficulty in implementing a multiuser application. Like a single-user application, a multiuser application must perform computation tasks such as testing a module for coverage and interaction tasks such as processing input commands and displaying results.
Reference: [Ols93] <author> Gary M. Olson, Lola J. McGuffin, Eiji Kuwana, and Judith S. Olson. </author> <title> Designing software for a group's needs: A functional analysis of synchronous groupware. </title> <booktitle> Trends in Software: User Interface Software, trends 1, </booktitle> <year> 1993. </year>
Reference-contexts: Our paper complements this work by surveying the related area of multiuser tools. Furthermore, it complements the companion paper on multiuser applications by Olson et al <ref> [Ols93] </ref>, which addresses the functionality of multiuser applications but not their implementation. Finally, it is important to note that several social issues must be resolved before multiuser applications are widely used.
Reference: [Pat90] <author> John F. Patterson, Ralph D. Hill, Steven L. Rohall, and W. Scott Meeks. </author> <title> Rendezvous: An architecture for synchronous multi-user applications. </title> <booktitle> Proceedings of the Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 317-328, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: PRASUN DEWAN 8.9 MULTIUSER UIMS A UIMS separates semantic values from their screen representations. It is possible to use this separation in a multiuser UIMS to provide high-level abstractions for supporting sharing of both semantic values and their screen representations, as illustrated by the work on Rendezvous <ref> [Pat90] </ref> [Pat91]. Like Colab, Rendezvous assumes that the state of a multiuser application is encapsulated in objects and supports sharing of these objects.
Reference: [Pat91] <author> John F. Patterson. </author> <title> Comparing the programming demands of single-user and multi-user applications. </title> <booktitle> Proceedings of the 4th ACM SIGRAPH Conference on User Interface Software and Technology, </booktitle> <pages> pages 79-86, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: PRASUN DEWAN 8.9 MULTIUSER UIMS A UIMS separates semantic values from their screen representations. It is possible to use this separation in a multiuser UIMS to provide high-level abstractions for supporting sharing of both semantic values and their screen representations, as illustrated by the work on Rendezvous [Pat90] <ref> [Pat91] </ref>. Like Colab, Rendezvous assumes that the state of a multiuser application is encapsulated in objects and supports sharing of these objects.
Reference: [Pfa85] <author> G. Pfaff. </author> <title> User Interface Management Systems. </title> <publisher> Springer Verlag, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1985. </year>
Reference-contexts: support sharing of data among these components. * Shared window systems, which are extensions of single-user window systems that support sharing. * Multiuser toolkits, which offer predefined support for one or more collaboration functions and low-level facilities for customizing this support. * Multiuser UIMSs, which are extensions of single-user UIMSs <ref> [Pfa85] </ref> (User Interface Management System) that support sharing. * Multiuser user-interface generators, which are extensions of single-user user-interface generators that supports sharing.
Reference: [Rei90] <author> Steven P. Reiss. </author> <title> Connecting tools using message passing in the Field environment. </title> <journal> IEEE Software, </journal> <volume> 7(4) </volume> <pages> 57-66, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Distributed RPC and constraint systems differ mainly in the style of programming they offer-distributed RPC systems offer procedural programming while distributed constraint systems offer declarative programming. A comparison of these two styles of programming is beyond the scope of this paper. 8.5 MESSAGE SERVER Message servers such as Field <ref> [Rei90] </ref>, YEAST [Kri91], and the CB Message Bus [Kap92] allow a client to exchange messages with remote clients without being aware of the identities of the remote clients or the messages in which they are interested.
Reference: [Ros92] <author> Mark Roseman and Saul Greenberg. Groupkit: </author> <title> A groupware toolkit for building real-time conferencing applications. </title> <booktitle> Proceedings of the ACM Conference on Computer Supported Cooperative Work, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: A DCS program is like an MMConf program except that it has to implement concurrency control manually. GroupKit <ref> [Ros92] </ref> is an extension of a single-user toolkit that offers support for sharing. It has been designed to support the replicated architecture, access control, and overlaying of cursors and annotations on displays created by single-user applications.
Reference: [Row85] <author> Lawrence A. Rowe. </author> <booktitle> `Fill-in-the-form' programming. Proceedings of VLDB, </booktitle> <pages> pages 394-404, </pages> <year> 1985. </year>
Reference-contexts: Finally, it does not automatically support concurrency control or access control. 8.10 MULTIUSER USER-INTERFACE GENERATOR By a user-interface generator, we mean a UIMS that automatically generates views of abstract data from high-level descriptions of these views. Examples of user-interface generators include ADE <ref> [Row85] </ref>, which supports form-filling interfaces; and single-user Suite [Dew90a], which supports generalized editing interfaces [Dew90c]. Multiuser Suite [Dew92], which is an extension of single-user Suite, illustrates the benefits of extending a single-user user-interface generator to support multiuser applications. Single-user Suite offers near automatic generation of single-user editing interfaces.
Reference: [Sar85] <author> Sunil Sarin and Irene Greif. </author> <title> Computer-based real-time conferencing systems. </title> <journal> IEEE Computer, </journal> <volume> 18(10) </volume> <pages> 33-49, </pages> <month> October </month> <year> 1985. </year>
Reference-contexts: Multiuser applications such this one have the potential of automating a significant amount of cooperative work carried out at current organizations [Dem87]. As a result, several experimental multiuser applications have been implemented recently including the Colab [Stef87] and GROVE [Ell90] outline editors, the RTCAL appointment system <ref> [Sar85] </ref>, the CES [Gre86], Quilt [Fis88], and PREP [Neu90] co TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES authoring systems, the MACE graphics editor [New91a], the ICICLE code inspector [Bro90], a cooperative air-traffic control system [Ben92], the EXPRES system for collaborative creation, submission, and review of research proposals [Ols90], and the FLECSE collaborative <p> addition, it must efficiently and flexibly carry out several collaboration tasks such as dynamically making and breaking connections with possibly remote users, multiplexing input from and demultiplexing output to multiple users, informing users of input entered by other users, helping users coordinate their interaction, and providing concurrency and access control <ref> [Sar85] </ref> [Ell90]. For this reason, few multiuser applications have been developed so far despite the tremendous potential of these applications. Moreover, most of the projects that have implemented these applications from scratch have, typically, been multi-year, multi-person projects.
Reference: [She92] <author> Honghai Shen and Prasun Dewan. </author> <title> Access control for collaborative environments. </title> <booktitle> Proceedings of the ACM Conference on Computer Supported Cooperative Work, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: They support, for instance, communication of changes as they are made or when they are explicitly committed. Both the sharing and communication attributes can refer to arbitrary groups of users, thereby allowing a user to share and communicate differently with different sets of users. Access attributes <ref> [She92] </ref> are used to specify access rights and concurrency control attributes determine the granularity of locking. The system also defines collaboration calls and collaboration callbacks, which can used by clients to implement their own collaboration schemes.
Reference: [Stef87] <author> Mark Stefik, Gregg Foster, Daniel G. Bobrow, Kenneth Kahn, Stan Lanning, and Lucy Suchman. </author> <title> Beyond the chalkboard: Computer support for collaboration and problem solving in meetings. </title> <journal> CACM, </journal> <volume> 30(1) </volume> <pages> 32-47, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: Multiuser applications such this one have the potential of automating a significant amount of cooperative work carried out at current organizations [Dem87]. As a result, several experimental multiuser applications have been implemented recently including the Colab <ref> [Stef87] </ref> and GROVE [Ell90] outline editors, the RTCAL appointment system [Sar85], the CES [Gre86], Quilt [Fis88], and PREP [Neu90] co TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES authoring systems, the MACE graphics editor [New91a], the ICICLE code inspector [Bro90], a cooperative air-traffic control system [Ben92], the EXPRES system for collaborative creation, submission, <p> In this paper, we will focus mainly on the suitability of multiuser tools to support collaborative interaction. Finally, collaborative interaction can be classified into WYSIWIS (What You See Is What I See) <ref> [Stef87] </ref> interaction and WYSINWIS (What You See Is Not What I See) interaction based on whether or not the collaborating users see the same interaction state. The test windows of the example application support WYSIWIS interaction while the edit windows support WYSINWIS interaction. <p> Message TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES Each broadcast method invokes a local method to display the output to its user. servers have been designed to support loosely-coupled processes communicating using a local area network. 8.6 SHARED OBJECT SYSTEM Colab <ref> [Stef87] </ref> offers an approach to implementing multiuser applications that combines features of the three previous tools. Like a database system, it supports the notion of data that can be shared by multiple clients and replicated on multiple sites. <p> Programmers who have used Colab report that this task was simple for the applications they developed <ref> [Stef87] </ref>. However, Colab applications support sharing of (almost) the complete state of the clients executing a Colab multiuser program. It is not clear if this task would be as simple if less sharing was to be supported. Moreover, Colab fixes the sharing among the different clients at compile time. <p> Moreover, Colab users found that in these applications, it is less useful to implement concurrency control since each user is aware of all the actions of the other users and can immediately take corrective actions in response to conflicts <ref> [Stef87] </ref>. We discuss below tools explicitly designed to support looser collaboration and concurrency control. TOOLS FOR IMPLEMENTING MULTIUSER USER INTERFACES None of the tools discussed so far is bound to any single-user tool.
References-found: 45

