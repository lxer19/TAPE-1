URL: ftp://ftp.cs.umass.edu/pub/osl/papers/edbt94.ps.Z
Refering-URL: http://www.cs.umass.edu/~brown/
Root-URL: 
Title: Supporting Full-Text Information Retrieval with a Persistent Object Store  
Author: Eric W. Brown, James P. Callan, W. Bruce Croft, J. Eliot B. Moss 
Address: Amherst, MA 01003, USA  
Affiliation: Department of Computer Science, University of Massachusetts,  
Abstract: The inverted file index common to many full-text information retrieval systems presents unusual and challenging data management requirements. These requirements are usually met with custom data management software. Rather than build this custom software, we would prefer to use an existing database management system. Attempts to do this with traditional (e.g., relational) database management systems have produced discouraging results. Instead, we have used a persistent object store, Mneme, to support the inverted file of a full-text information retrieval system, INQUERY. The result is an improvement in performance along with opportunities for INQUERY to take advantage of the standard data management services provided by Mneme. We describe our implementation, present performance results on a variety of document collections, and discuss the advantages of using a persistent object store to support information retrieval.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> D. C. Blair. </author> <title> An extended relational document retrieval model. </title> <journal> Inf. Process. & Mgmnt., </journal> <volume> 24(3) </volume> <pages> 349-371, </pages> <year> 1988. </year>
Reference-contexts: Large object buffer hit rates for the TIPSTER query set MacLeod [5, 12, 4, 13], who describe how to use the relational model to store document data and construct information retrieval queries. Similar work was presented more recently by Blair <ref> [1] </ref> and Grossman and Driscoll [9]. Others have chosen to extend the relational model to allow better support for IR. Lynch and Stonebraker [11] show how a relational model extended with abstract data types can be used to better support the queries that are typical of an IR system.
Reference: 2. <author> C. Buckley and A. F. Lewit. </author> <title> Optimization of inverted vector searches. </title> <booktitle> In Proc. of the 8th Inter. ACM SIGIR Conf. on Res. and Develop. in Infor. Retr., </booktitle> <pages> pages 97-110, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: We have tried to take this advice to heart by developing appropriate file organization and buffer management policies based on the characteristics of the data and the data access patterns. Buckley and Lewit <ref> [2] </ref> studied the effects of query optimization on an IR system and found that it can reduce the amount of data read from the inverted file.
Reference: 3. <author> J. P. Callan, W. B. Croft, and S. M. Harding. </author> <title> The INQUERY retrieval system. </title> <booktitle> In Proc. of the 3rd Inter. Conf. on Database and Expert Sys. Apps., </booktitle> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: Email: -brown, callan, croft, moss-@cs.umass.edu Instead, we propose using an off-the-shelf data management facility, in the form of a persistent object store, to provide the inverted file index service. We have taken the INQUERY full-text retrieval system <ref> [20, 3] </ref>, which originally used a custom B-tree package to provide the inverted file index support, and replaced the B-tree package with the Mneme persistent object store [14]. The result is a system that reaps the benefits of using an existing data management facility without sacrificing performance or functionality. <p> We begin with a description of INQUERY, followed by a brief overview of Mneme, and conclude with a discussion of the issues addressed during integration of the two systems. 3.1 INQUERY INQUERY is a probabilistic information retrieval system based upon a Bayesian inference network model <ref> [20, 3] </ref>. The power of the inference network model is the consistent formalism it provides for reasoning about evidence of differing types. Extensive testing has shown INQUERY to be one of the best IR systems, as measured by the standard IR metrics of recall and precision [10, 20].
Reference: 4. <author> R. G. Crawford. </author> <title> The relational model in information retrieval. </title> <journal> J. Amer. Soc. Inf. Sci., </journal> <volume> 32(1) </volume> <pages> 51-64, </pages> <year> 1981. </year>
Reference-contexts: Large object buffer hit rates for the TIPSTER query set MacLeod <ref> [5, 12, 4, 13] </ref>, who describe how to use the relational model to store document data and construct information retrieval queries. Similar work was presented more recently by Blair [1] and Grossman and Driscoll [9]. Others have chosen to extend the relational model to allow better support for IR.
Reference: 5. <author> R. G. Crawford and I. A. MacLeod. </author> <title> A relational approach to modular information retrieval systems design. </title> <booktitle> In Proc. of the 41st Conf. of the Amer. </booktitle> <institution> Soc. for Inf. Sci., </institution> <year> 1978. </year>
Reference-contexts: Large object buffer hit rates for the TIPSTER query set MacLeod <ref> [5, 12, 4, 13] </ref>, who describe how to use the relational model to store document data and construct information retrieval queries. Similar work was presented more recently by Blair [1] and Grossman and Driscoll [9]. Others have chosen to extend the relational model to allow better support for IR.
Reference: 6. <author> J. S. Deogun and V. V. Raghavan. </author> <title> Integration of information retrieval and database management systems. </title> <journal> Inf. Process. & Mgmnt., </journal> <volume> 24(3) </volume> <pages> 303-313, </pages> <year> 1988. </year>
Reference-contexts: The data management technology we use is a persistent object store, and currently it is only used to manage an inverted file index. Other work in this area has attempted to integrate information retrieval with database management <ref> [6, 16] </ref>. The services provided by a database management system (DBMS) and an IR system are distinct but complementary, making an integrated system very attractive. The integrated architecture consists of a DBMS component and a custom IR system component.
Reference: 7. <author> C. Faloutsos. </author> <title> Access methods for text. </title> <journal> ACM Comput. Surv., </journal> <volume> 17 </volume> <pages> 50-74, </pages> <year> 1985. </year>
Reference-contexts: However, our data management system is a persistent object store and we focus on supporting high performance IR, with no support for traditional data management. Efficient management of full-text database indices has received a fair amount of attention. Faloutsos <ref> [7] </ref> gives an early survey of the common indexing techniques. The two techniques that seem to predominate are signature files and inverted files, each of which implies a different query processing algorithm.
Reference: 8. <author> E. A. Fox. </author> <title> Characterization of two new experimental collections in computer and information science containing textual and bibliographic concepts. </title> <type> Technical Report 83-561, </type> <institution> Cornell University, </institution> <address> Ithaca, NY, </address> <month> Sept. </month> <year> 1983. </year>
Reference-contexts: The INQUERY system was compiled with the GNU C compiler (gcc) version 2.3.2 at optimization level 2. 4.2 Experiments We measured the execution time of both systems on a number of query sets using the document collections described in Table 1. The documents in CACM <ref> [8] </ref> are abstracts and titles of articles that appeared in Communications of the ACM from 1958 to 1979. The three query sets used with CACM are different representations of the same 50 queries.
Reference: 9. <author> D. A. Grossman and J. R. Driscoll. </author> <title> Structuring text within a relational system. </title> <booktitle> In Proc. of the 3rd Inter. Conf. on Database and Expert Sys. Apps., </booktitle> <pages> pages 72-77, </pages> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: Large object buffer hit rates for the TIPSTER query set MacLeod [5, 12, 4, 13], who describe how to use the relational model to store document data and construct information retrieval queries. Similar work was presented more recently by Blair [1] and Grossman and Driscoll <ref> [9] </ref>. Others have chosen to extend the relational model to allow better support for IR. Lynch and Stonebraker [11] show how a relational model extended with abstract data types can be used to better support the queries that are typical of an IR system.
Reference: 10. <editor> D. Harman, editor. </editor> <booktitle> The First Text REtrieval Conference (TREC1). National Institute of Standards and Technology Special Publication 200-207, </booktitle> <address> Gaithersburg, MD, </address> <year> 1992. </year>
Reference-contexts: The power of the inference network model is the consistent formalism it provides for reasoning about evidence of differing types. Extensive testing has shown INQUERY to be one of the best IR systems, as measured by the standard IR metrics of recall and precision <ref> [10, 20] </ref>. INQUERY is fast, scales well to large document collections, and can be embedded in specialized applications. The bottlenecks in IR are retrieving and ranking the documents that match a query. Retrieval identifies the (possibly large) subset of the collection that may be relevant to the query.
Reference: 11. <author> C. A. Lynch and M. Stonebraker. </author> <title> Extended user-defined indexing with application to textual databases. </title> <booktitle> In Proc. of the 14th Inter. Conf. on VLDB, </booktitle> <pages> pages 306-317, </pages> <year> 1988. </year>
Reference-contexts: Similar work was presented more recently by Blair [1] and Grossman and Driscoll [9]. Others have chosen to extend the relational model to allow better support for IR. Lynch and Stonebraker <ref> [11] </ref> show how a relational model extended with abstract data types can be used to better support the queries that are typical of an IR system.
Reference: 12. <author> I. A. MacLeod. </author> <title> SEQUEL as a language for document retrieval. </title> <journal> J. Amer. Soc. Inf. Sci., </journal> <volume> 30(5) </volume> <pages> 243-249, </pages> <year> 1979. </year>
Reference-contexts: Large object buffer hit rates for the TIPSTER query set MacLeod <ref> [5, 12, 4, 13] </ref>, who describe how to use the relational model to store document data and construct information retrieval queries. Similar work was presented more recently by Blair [1] and Grossman and Driscoll [9]. Others have chosen to extend the relational model to allow better support for IR.
Reference: 13. <author> I. A. MacLeod and R. G. Crawford. </author> <title> Document retrieval as a database application. </title> <journal> Inf. Tech.: Res. Dev., </journal> <volume> 2(1) </volume> <pages> 43-60, </pages> <year> 1983. </year>
Reference-contexts: Large object buffer hit rates for the TIPSTER query set MacLeod <ref> [5, 12, 4, 13] </ref>, who describe how to use the relational model to store document data and construct information retrieval queries. Similar work was presented more recently by Blair [1] and Grossman and Driscoll [9]. Others have chosen to extend the relational model to allow better support for IR.
Reference: 14. <author> J. E. B. Moss. </author> <title> Design of the Mneme persistent object store. </title> <journal> ACM Trans. Inf. Syst., </journal> <volume> 8(2) </volume> <pages> 103-139, </pages> <month> Apr. </month> <year> 1990. </year>
Reference-contexts: We have taken the INQUERY full-text retrieval system [20, 3], which originally used a custom B-tree package to provide the inverted file index support, and replaced the B-tree package with the Mneme persistent object store <ref> [14] </ref>. The result is a system that reaps the benefits of using an existing data management facility without sacrificing performance or functionality. <p> A document-at-a-time approach, which gathered all of the evidence for one document before proceeding to the next, might scale better to large collections. However, it would be cumbersome with the current custom B-tree package. 3.2 Mneme The Mneme persistent object store <ref> [14] </ref> was designed to be efficient and extensible. The basic services provided by Mneme are storage and retrieval of objects, where an object is a chunk of contiguous bytes that has been assigned a unique identifier. Mneme has no notion of type or class for objects.
Reference: 15. <author> G. Salton and M. J. McGill. </author> <title> Introduction to Modern Information Retrieval. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: This identification process requires a means of locating documents based on their content. A well known mechanism for providing such means is the inverted file index <ref> [15] </ref>. An inverted file index consists of a record, or inverted list, for each term that appears in the document collection.
Reference: 16. <author> L. V. Saxton and V. V. Raghavan. </author> <title> Design of an integrated information retrieval/database management system. </title> <journal> IEEE Trans. Know. Data Eng., </journal> <volume> 2(2) </volume> <pages> 210-219, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: The data management technology we use is a persistent object store, and currently it is only used to manage an inverted file index. Other work in this area has attempted to integrate information retrieval with database management <ref> [6, 16] </ref>. The services provided by a database management system (DBMS) and an IR system are distinct but complementary, making an integrated system very attractive. The integrated architecture consists of a DBMS component and a custom IR system component.
Reference: 17. <author> M. Stonebraker. </author> <title> Operating system support for database management. </title> <journal> Commun. ACM, </journal> <volume> 24(7) </volume> <pages> 412-418, </pages> <month> July </month> <year> 1981. </year>
Reference-contexts: It is clear that caching of inverted lists to reduce disk accesses is advantageous, whether provided by the file system cache or the data management subsystem. It is also clear (and well known <ref> [17] </ref>) that caching provided by the file system is an inferior solution for data management problems. The buffer management requirements of inverted list data are better satisfied by the custom, domain tailored mechanisms in Mneme.
Reference: 18. <author> A. Tomasic and H. Garcia-Molina. </author> <title> Performance of inverted indices in distributed text document retrieval systems. </title> <type> Technical Report STAN-CS-92-1434, </type> <institution> Stanford University Department of Computer Science, </institution> <year> 1992. </year>
Reference-contexts: This result implies that there is significant repetition of terms from query to query. This fact has severe implications for any IR study which assumes a uniform distribution over the term vocabulary when selecting query terms, such as the study in <ref> [18] </ref>. Properly modeling the size distribution of inverted file index records and the frequency of use of terms in queries is addressed by Wolfram in [21, 22]. He suggests that the informetric characteristics of document databases should be taken into consideration when designing the files used by an IR system.
Reference: 19. <author> A. Tomasic and H. Garcia-Molina. </author> <title> Caching and database scaling in distributed shared-nothing information retrieval systems. </title> <booktitle> In Proc. of the ACM SIGMOD Inter. Conf. on Management of Data, </booktitle> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: In our work, the format of the inverted file index records and the compression techniques applied to those records are pre-determined by the existing INQUERY system. Our approach is to replace the subsystem that manages these records, without changing the format of the records. Tomasic and Garcia-Molina <ref> [19] </ref> study inverted file index performance in a distributed shared-nothing environment. Their simulation results show that caching inverted file index records in main memory can significantly improve performance.
Reference: 20. <author> H. Turtle and W. B. Croft. </author> <title> Evaluation of an inference network-based retrieval model. </title> <journal> ACM Trans. Inf. Syst., </journal> <volume> 9(3) </volume> <pages> 187-222, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Email: -brown, callan, croft, moss-@cs.umass.edu Instead, we propose using an off-the-shelf data management facility, in the form of a persistent object store, to provide the inverted file index service. We have taken the INQUERY full-text retrieval system <ref> [20, 3] </ref>, which originally used a custom B-tree package to provide the inverted file index support, and replaced the B-tree package with the Mneme persistent object store [14]. The result is a system that reaps the benefits of using an existing data management facility without sacrificing performance or functionality. <p> We begin with a description of INQUERY, followed by a brief overview of Mneme, and conclude with a discussion of the issues addressed during integration of the two systems. 3.1 INQUERY INQUERY is a probabilistic information retrieval system based upon a Bayesian inference network model <ref> [20, 3] </ref>. The power of the inference network model is the consistent formalism it provides for reasoning about evidence of differing types. Extensive testing has shown INQUERY to be one of the best IR systems, as measured by the standard IR metrics of recall and precision [10, 20]. <p> The power of the inference network model is the consistent formalism it provides for reasoning about evidence of differing types. Extensive testing has shown INQUERY to be one of the best IR systems, as measured by the standard IR metrics of recall and precision <ref> [10, 20] </ref>. INQUERY is fast, scales well to large document collections, and can be embedded in specialized applications. The bottlenecks in IR are retrieving and ranking the documents that match a query. Retrieval identifies the (possibly large) subset of the collection that may be relevant to the query.
Reference: 21. <author> D. Wolfram. </author> <title> Applying informetric characteristics of databases to IR system file design, Part I: informetric models. </title> <journal> Inf. Process. & Mgmnt., </journal> <volume> 28(1) </volume> <pages> 121-133, </pages> <year> 1992. </year>
Reference-contexts: Properly modeling the size distribution of inverted file index records and the frequency of use of terms in queries is addressed by Wolfram in <ref> [21, 22] </ref>. He suggests that the informetric characteristics of document databases should be taken into consideration when designing the files used by an IR system.
Reference: 22. <author> D. Wolfram. </author> <title> Applying informetric characteristics of databases to IR system file design, Part II: simulation comparisons. </title> <journal> Inf. Process. & Mgmnt., </journal> <volume> 28(1) </volume> <pages> 135-151, </pages> <year> 1992. </year>
Reference-contexts: Properly modeling the size distribution of inverted file index records and the frequency of use of terms in queries is addressed by Wolfram in <ref> [21, 22] </ref>. He suggests that the informetric characteristics of document databases should be taken into consideration when designing the files used by an IR system.
Reference: 23. <author> G. K. Zipf. </author> <title> Human Behavior and the Principle of Least Effort. </title> <publisher> Addison-Wesley Press, </publisher> <year> 1949. </year>
Reference-contexts: Efficient lookup requires knowing the size distribution of the records in the file and a characterization of the record access patterns. The size of an inverted list depends on the number of occurrences of the associated term in the document collection. Zipf <ref> [23] </ref> observed that if the terms in a document collection are ranked by decreasing number of occurrences (i.e., starting with the term that occurs most frequently), there is a constant for the collection that is approximately equal to the product of any given term's frequency and rank order number.
Reference: 24. <author> J. Zobel, A. Moffat, and R. Sacks-Davis. </author> <title> An efficient indexing technique for full-text database systems. </title> <booktitle> In Proc. of the 18th Inter. Conf. on VLDB, </booktitle> <address> Vancouver, </address> <year> 1992. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: Since the INQUERY system uses an inverted file index, and we are not interested in changing the query processing algorithm, we do not discuss signature files. Zobel et al. <ref> [24] </ref> investigate the efficient implementation of an inverted file index for a full-text database system. Their focus is on compression techniques to limit the size of the inverted file index.
References-found: 24

