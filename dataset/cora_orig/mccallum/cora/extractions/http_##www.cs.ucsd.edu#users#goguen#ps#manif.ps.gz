URL: http://www.cs.ucsd.edu/users/goguen/ps/manif.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/goguen/pubs/
Root-URL: http://www.cs.ucsd.edu
Title: A Categorical Manifesto  
Author: Joseph A. Goguen 
Address: Menlo Park CA  
Affiliation: Programming Research Group, University of Oxford SRI International,  
Abstract: This paper tries to explain why and how category theory is useful in computing science, by giving guidelines for applying seven basic categorical concepts: category, functor, natural transformation, limit, adjoint, colimit and comma category. Some examples, intuition, and references are given for each concept, but completeness is not attempted. Some additional categorical concepts and some suggestions for further research are also mentioned. The paper concludes with some philosophical discussion.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Peter Aczel. </author> <title> Non-Well-Founded Sets. Center for the Study of Language and Information, </title> <institution> Stanford University, </institution> <year> 1988. </year> <booktitle> CSLI Lecture Notes, </booktitle> <volume> Volume 14. </volume>
Reference-contexts: Still more recently, there has been debate about the Axiom of Foundation, which asserts that there is no infinite sequence of sets S 1 ; S 2 ; S 3 ; ::: such that each S i+1 is an element of S i . In fact, Aczel <ref> [1] </ref> and others have used an Anti-Foundation Axiom, which positively asserts the existence of such non-well founded sets, to model various phenomena in computation, including communicating processes in the sense of Milner [54].
Reference: [2] <author> Michael Barr and Charles Wells. </author> <title> Toposes, Triples and Theories. </title> <publisher> Springer, </publisher> <year> 1985. </year> <editor> Grundlehren der mathematischen Wissenschafter, </editor> <volume> Volume 278. </volume>
Reference-contexts: Unfortunately, no existing text is ideal for computing scientists, but perhaps that by Goldblatt [36] comes closest. The classic text by Mac Lane [47] is warmly recommended for those with sufficient mathematics background, and Herrlich and Strecker's book [39] is admirably thorough; see also <ref> [2] </ref> and [45]. <p> A profound generalisation of the idea that a theory is a category appears in the topos notion developed by Lawvere, Tierney, and others. In a sense, this notion captures the essence of set theory. It also has surprising relationships to algebraic geometry, computing science, and intuitionistic logic <ref> [36, 2, 42] </ref>. 9 Discussion The traditional view of foundations requires giving a system of axioms, preferably first order, that assert the existence of certain primitive objects with certain properties, and of certain primitive constructions on objects, such that all objects of interest can be constructed, and all their relevant properties
Reference: [3] <author> Michael Barr and Charles Wells. </author> <title> The formal description of data types using sketches. </title> <editor> In Michael Main, A. Melton, Michael Mislove, and D. Schmidt, editors, </editor> <booktitle> Mathematical Foundations of Programming Language Semantics. Springer, 1988. Lecture Notes in Computer Science, </booktitle> <volume> Volume 298. </volume> <pages> 15 </pages>
Reference-contexts: In this approach, theories are closed under finite products (as defined in Example 4.1 below). Although Lawvere's original development was unsorted, it easily extends to the many-sorted case, and in many other ways, including the so-called "sketches" studied by Ehresmann, Gray, Barr, Wells, and others; for example, see <ref> [3] </ref>.
Reference: [4] <editor> Luitzen Egbertus Jan Brouwer. Intuitionistische betrachtungen uber den for--malismus. Koninklijke Akademie van wetenschappen te Amsterdam, </editor> <booktitle> Proceedings of the section of sciences, </booktitle> <volume> 31 </volume> <pages> 374-379, </pages> <year> 1928. </year> <note> In From Frege to Godel, </note> <editor> Jean van Heijenoort (editor), </editor> <publisher> Harvard, </publisher> <year> 1967, </year> <pages> pages 490-492. </pages>
Reference-contexts: I think it is fair to say that most mathematicians no longer believe in the heroic ideal of a single generally accepted foundation for mathematics, and that many no longer believe in the possibility of finding "unshakable certainties" <ref> [4] </ref> upon which to found all of mathematics.
Reference: [5] <author> Rod Burstall. </author> <title> An algebraic description of programs with assertions, verification, and simulation. </title> <editor> In J. Mack Adams, John Johnston, and Richard Stark, editors, </editor> <booktitle> Proceedings, Conference on Proving Assertions about Programs, </booktitle> <pages> pages 7-14. </pages> <institution> Association for Computing Machinery, </institution> <year> 1972. </year>
Reference-contexts: The semantics of P with input node n and output node n 0 is then given by the formula P (n; n 0 ) = fP (p) j p : n ! n 0 2 Pa (G)g. This approach originated in Burstall <ref> [5] </ref>. <p> Because Example 2.7 defines programs as functors, we expect program homomorphisms to be natural transformations between programs. Indeed, Burstall <ref> [5] </ref> shows that a weak form of Milner's program simulations [53] arises in just this way.
Reference: [6] <author> Rod Burstall and Joseph Goguen. </author> <title> Putting theories together to make specifications. </title> <editor> In Raj Reddy, editor, </editor> <booktitle> Proceedings, Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1045-1058. </pages> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <year> 1977. </year>
Reference-contexts: A basic strategy for defeating complexity is to break large systems into smaller pieces that can be understood separately, and that when put back together give the original system. If successful, this in effect "takes the logarithm" of the complexity. In the semantics of Clear <ref> [6, 7] </ref>, specifications are represented by theories, in essentially the same sense as Lawvere (but many-sorted, and with signatures), and specifications are put together by colimits in the category of such theories. More specifically, the application of a generic theory to an actual is computed by a pushout.
Reference: [7] <author> Rod Burstall and Joseph Goguen. </author> <title> The semantics of Clear, a specification language. </title> <editor> In Dines Bjorner, editor, </editor> <booktitle> Proceedings, 1979 Copenhagen Winter School on Abstract Software Specification, </booktitle> <pages> pages 292-332. </pages> <publisher> Springer, </publisher> <year> 1980. </year> <booktitle> Lecture Notes in Computer Science, Volume 86; based on unpublished notes handed out at the Symposium on Algebra and Applications, </booktitle> <institution> Stefan Banach Center, Warsaw, Poland, </institution> <year> 1978. </year>
Reference-contexts: A basic strategy for defeating complexity is to break large systems into smaller pieces that can be understood separately, and that when put back together give the original system. If successful, this in effect "takes the logarithm" of the complexity. In the semantics of Clear <ref> [6, 7] </ref>, specifications are represented by theories, in essentially the same sense as Lawvere (but many-sorted, and with signatures), and specifications are put together by colimits in the category of such theories. More specifically, the application of a generic theory to an actual is computed by a pushout.
Reference: [8] <author> Pierre-Luc Curien. </author> <title> Categorial Combinators, Sequential Algorithms, and Functional Programming. </title> <publisher> Pitman and Wiley, </publisher> <year> 1986. </year> <note> Research Notes in Theoretical Computer Science. </note>
Reference-contexts: It is remarkable that this concept turns out to be essentially the (typed) -calculus; see [45]. This connection has been used, for example, as a basis for the efficient compilation of higher order functional languages <ref> [8] </ref>. An advantage is that optimisation techniques can be proved correct by using purely equational reasoning. 5.4 Kleisli Categories. Another way to generalise Lawvere theories is to view an arbitrary adjunction as a kind of theory.
Reference: [9] <author> Hans-Dieter Ehrich. </author> <title> On the theory of specification, implementation and parameterization of abstract data types. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 29 </volume> <pages> 206-227, </pages> <year> 1982. </year>
Reference-contexts: It would be interesting to extend this to more general variants of Lawvere theories (such as many-sorted theories or sketches), and to the more general data representations studied in the abstract data type literature (e.g., <ref> [33, 9] </ref>). 3.4 Program Homomorphisms. Because Example 2.7 defines programs as functors, we expect program homomorphisms to be natural transformations between programs. Indeed, Burstall [5] shows that a weak form of Milner's program simulations [53] arises in just this way.
Reference: [10] <author> Hartmut Ehrig. </author> <title> Introduction to the algebraic theory of graph grammars. </title> <editor> In V. Claus, Hartmut Ehrig, and Gregor Rozenberg, editors, </editor> <booktitle> Graph Gramars and their Application to Computer Science and Biology, </booktitle> <pages> pages 1-69. </pages> <publisher> Springer, </publisher> <year> 1979. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 73. </volume>
Reference-contexts: Graph rewriting provides one promising area within which to search for such models [43, 32, 15, 41], and colimits seem to be quite useful here <ref> [10, 58, 44] </ref>. Graph rewriting is also important for the unification grammars that are now popular in linguistics [60, 22]. There seem to be many opportunities for further research in these areas. 6.3 Initiality. The simplest possible diagram is the empty diagram.
Reference: [11] <author> Samuel Eilenberg and Saunders Mac Lane. </author> <title> General theory of natural equivalences. </title> <journal> Transactions of the American Mathematical Society, </journal> <volume> 58 </volume> <pages> 231-294, </pages> <year> 1945. </year>
Reference-contexts: Although this looks like a mere definition of the phrase "natural translation," it can nevertheless be very useful in practice. It is also interesting that this concept was the historical origin of category theory, since Eilenberg and Mac Lane <ref> [11] </ref> used it to formalise the notion of an equivalence of homology theories, and then found that for this definition to make sense, they had to define functors, and for functors to make sense, they had to define categories. (This history also explains why homology theory so often appears in categorical
Reference: [12] <author> Gian Luigi Ferrari. </author> <title> Unifying Models of Concurrency. </title> <type> PhD thesis, </type> <institution> University of Pisa, </institution> <year> 1990. </year>
Reference-contexts: The category of Petri nets studied in [52] has already been mentioned, and a variety of recent work suggests that monoidal categories may be broadly useful in understanding the relationships among the various theories of concurrency, e.g., see <ref> [12] </ref>. 8.3 Indexed Categories. A strict indexed category is just a functor B op ! Cat. The papers [62] and [23] give many examples of indexed categories in computing science, and [62] gives some general theorems, including simple sufficient conditions for completeness of the associated "Grothendieck" category.
Reference: [13] <author> Kokichi Futatsugi, Joseph Goguen, Jean-Pierre Jouannaud, and Jose Meseguer. </author> <title> Principles of OBJ2. </title> <editor> In Brian Reid, editor, </editor> <booktitle> Proceedings, Twelfth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 52-66. </pages> <institution> Association for Computing Machinery, </institution> <year> 1985. </year>
Reference-contexts: More specifically, the application of a generic theory to an actual is computed by a pushout. OBJ <ref> [13, 28, 14] </ref>, Eqlog [30], and FOOPS [31] extend this notion of generic module to functional, logic (i.e., relational), and object oriented programming, and in their combinations. It has even been applied to Ada [21, 63]. 6.2 Graph Rewriting. <p> Beginning with the formalisation of abstract syntax as an initial algebra [20], initiality has been applied to an increasing range of fundamental concepts, including induction and recursion [35, 51], abstract data types [33], domain equations (see below), computability [51], and model theoretic semantics for functional <ref> [13] </ref>, logic (i.e., relational), combined functional and relational, and constraint logic [30] programming languages. The latter is interesting because it involves initiality in a category of model extensions, i.e., of morphisms, rather than just models.
Reference: [14] <author> Kokichi Futatsugi, Joseph Goguen, Jose Meseguer, and Koji Okada. </author> <title> Parameterized programming in OBJ2. </title> <editor> In Robert Balzer, editor, </editor> <booktitle> Proceedings, Ninth International Conference on Software Engineering, </booktitle> <pages> pages 51-60. </pages> <publisher> IEEE Computer Society, </publisher> <month> March </month> <year> 1987. </year>
Reference-contexts: More specifically, the application of a generic theory to an actual is computed by a pushout. OBJ <ref> [13, 28, 14] </ref>, Eqlog [30], and FOOPS [31] extend this notion of generic module to functional, logic (i.e., relational), and object oriented programming, and in their combinations. It has even been applied to Ada [21, 63]. 6.2 Graph Rewriting.
Reference: [15] <author> J.R.W. Glauert, K. Hammond, J.R. Kennaway, G.A. Papadopoulos, </author> <title> and M.R. Sleep. DACTL: Some introductory papers. </title> <type> Technical Report SYS-C88-08, </type> <institution> School of Information Systems, University of East Anglia, </institution> <year> 1988. </year> <month> 16 </month>
Reference-contexts: A successful model should be abstract enough to avoid the implementation details of particular machines, and yet concrete enough to serve as an intermediate target language for compilers. Graph rewriting provides one promising area within which to search for such models <ref> [43, 32, 15, 41] </ref>, and colimits seem to be quite useful here [10, 58, 44]. Graph rewriting is also important for the unification grammars that are now popular in linguistics [60, 22]. There seem to be many opportunities for further research in these areas. 6.3 Initiality.
Reference: [16] <author> Joseph Goguen. </author> <title> Mathematical representation of hierarchically organized sys-tems. </title> <editor> In E. Attinger, editor, </editor> <booktitle> Global Systems Dynamics, </booktitle> <pages> pages 112-128. </pages> <editor> S. Karger, </editor> <year> 1971. </year>
Reference-contexts: This intuition goes back to some work on General System Theory from 1969-74, <ref> [16, 27] </ref>, and has many applications in computing science: 4.1 Products. An early achievement of category theory was to give a precise definition for the notion of "product," which was previously known in many special cases, but only understood vaguely as a general concept. <p> At least for me, this intuition arose in the context of General Systems Theory <ref> [16, 27] </ref>. It may be interesting to note that the duality between the categorical definitions of limits and colimits suggests a similar duality between the intuitive notions of solution and interconnection. Now some examples: 6.1 Putting Theories together to make Specifications.
Reference: [17] <author> Joseph Goguen. </author> <title> Minimal realization of machines in closed categories. </title> <journal> Bulletin of the American Mathematical Society, </journal> <volume> 78(5) </volume> <pages> 777-783, </pages> <year> 1972. </year>
Reference-contexts: Because right adjoints are uniquely determined, this provides a convenient abstract characterisation of minimal realisation. Moreover, this characterisation extends to, and even suggests, more general minimal realisation situations, e.g., see <ref> [17] </ref>. 5.4 Syntax and Semantics. One of the more spectacular adjoints is that between syntax and semantics for algebraic theories, again due to Lawvere in his thesis; see [49]. 5.5 Cartesian Closed Categories.
Reference: [18] <author> Joseph Goguen. </author> <title> Realization is universal. </title> <journal> Mathematical System Theory, </journal> <volume> 6 </volume> <pages> 359-374, </pages> <year> 1973. </year>
Reference-contexts: These checks show that we have a category Aut of automata, and their simplicity increases our confidence in the correctness of the definitions <ref> [18] </ref>. 1.6 Types. Types are used to classify "things," and according to the first dogma, they should form a category having types as objects; of course, depending on what is being classified, different categories will arise. <p> Denote this category Beh and define B : Aut ! Beh by B (X; S; Y; f; g) = g; f and B (h; i; j) = (h; j). That this is a functor helps to confirm the elegance and coherence of the previous definitions. See <ref> [18] </ref>. 6 2.3 Models. In the Lawvere approach to universal algebra [49], an algebra is a functor from a theory T to Set. Here, "construction" takes the meaning of "interpretation": the abstract structure in T is interpreted (i.e., constructed) concretely in Set, i.e., these functors must preserve finite products. <p> Let A denote the subcategory of Aut whose objects are reachable and whose morphisms (i; j; k) have i surjective. Then the restriction B : A ! Beh of B : Aut ! Beh to A has a right adjoint which gives the minimal realisation of a behaviour <ref> [18] </ref>. Because right adjoints are uniquely determined, this provides a convenient abstract characterisation of minimal realisation. Moreover, this characterisation extends to, and even suggests, more general minimal realisation situations, e.g., see [17]. 5.4 Syntax and Semantics.
Reference: [19] <author> Joseph Goguen. </author> <title> On homomorphisms, correctness, termination, unfoldments and equivalence of flow diagram programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 8 </volume> <pages> 333-365, </pages> <year> 1974. </year> <title> Original version in Proceedings, 1972 IEEE Symposium on Switching and Automata, pages 52-60; contains an additional section on program schemes. </title>
Reference-contexts: Clearly this composition is associative when defined, and each node can be given an "identity path" having no edges. This category is denoted Pa (G). (Details may be found in [47], [34], <ref> [19] </ref>, and many other places.) 1.5 Automata. <p> This approach originated in Burstall [5]. Techniques that allow programs to have syntax as well as semantics are described in <ref> [19] </ref> 2 : A program scheme is a functor P : G ! T into a theory T "enriched" with a partial order structure on its morphism sets T (A; B) (the reader familiar with 2-categories should note that this makes T a 2-category). <p> Because Example 2.7 defines programs as functors, we expect program homomorphisms to be natural transformations between programs. Indeed, Burstall [5] shows that a weak form of Milner's program simulations [53] arises in just this way. In <ref> [19] </ref>, this is generalised to programs that may have different shapes, and to maps from edges to paths, by defining a homomorphism from P 0 : G 0 ! C to P 1 : G 1 ! C to consist of a functor F : G 0 ! Pa (G 1 <p> Some theory and applications for this are also given in <ref> [19] </ref>, including techniques for proving correctness, termination, and equivalence, by unfolding programs into equivalent infinite trees. 3.5 Polymorphic Functions. If polymorphic type constructors are functors (as in Example 2.8), then polymorphic functions should be natural transforma tions; and indeed, they are.
Reference: [20] <author> Joseph Goguen. </author> <title> Semantics of computation. </title> <editor> In Ernest G. Manes, editor, </editor> <booktitle> Proceedings, First International Symposium on Category Theory Applied to Computation and Control, </booktitle> <pages> pages 234-249. </pages> <institution> University of Massachusetts at Amherst, </institution> <year> 1974. </year> <booktitle> Also in Lecture Notes in Computer Science, </booktitle> <volume> Volume 25, </volume> <publisher> Springer, </publisher> <year> 1975, </year> <pages> pages 151-163. </pages>
Reference-contexts: It is also worth mentioning that universality can be reduced to initiality (in a comma category), and hence so can colimits. 12 6.4 Initial Model Semantics. It seems remarkable that initiality is so very use-ful in computing science. Beginning with the formalisation of abstract syntax as an initial algebra <ref> [20] </ref>, initiality has been applied to an increasing range of fundamental concepts, including induction and recursion [35, 51], abstract data types [33], domain equations (see below), computability [51], and model theoretic semantics for functional [13], logic (i.e., relational), combined functional and relational, and constraint logic [30] programming languages.
Reference: [21] <author> Joseph Goguen. </author> <title> Reusing and interconnecting software components. </title> <journal> Computer, </journal> <volume> 19(2) </volume> <pages> 16-28, </pages> <month> February </month> <year> 1986. </year> <note> Reprinted in Tutorial: Software Reusability, </note> <editor> Peter Freeman, editor, </editor> <publisher> IEEE Computer Society, </publisher> <year> 1987, </year> <pages> pages 251-263, </pages> <booktitle> and in Domain Analysis and Software Systems Modelling, </booktitle> <editor> Ruben Prieto-Daz and Guillermo Arango, editors, </editor> <publisher> IEEE Computer Society, </publisher> <year> 1991, </year> <pages> pages 125-137. </pages>
Reference-contexts: OBJ [13, 28, 14], Eqlog [30], and FOOPS [31] extend this notion of generic module to functional, logic (i.e., relational), and object oriented programming, and in their combinations. It has even been applied to Ada <ref> [21, 63] </ref>. 6.2 Graph Rewriting. Another important problem in computing science is to find models of computation that are suitable for massively parallel machines.
Reference: [22] <author> Joseph Goguen. </author> <title> What is unification? A categorical view of substitution, equation and solution. </title> <editor> In Maurice Nivat and Hassan At-Kaci, editors, </editor> <title> Resolution of Equations in Algebraic Structures, </title> <booktitle> Volume 1: Algebraic Techniques, </booktitle> <pages> pages 217-261. </pages> <publisher> Academic, </publisher> <year> 1989. </year> <note> Also Report SRI-CSL-88-2R2, </note> <institution> SRI International, Computer Science Lab, </institution> <month> August </month> <year> 1988. </year>
Reference-contexts: Unfortunately, no existing text is ideal for computing scientists, but perhaps that by Goldblatt [36] comes closest. The classic text by Mac Lane [47] is warmly recommended for those with sufficient mathematics background, and Herrlich and Strecker's book [39] is admirably thorough; see also [2] and [45]. The paper <ref> [22] </ref> gives a relatively concrete and self-contained account of some basic category theory for computing scientists, using theories, equations, and unification as motivation, and many examples from that paper are used here. 1 As far as I know, the first such attempt is my own in [34], which gives four of <p> Of course, homomorphisms of T -algebras are natural transformations, giving a category of T -algebras. When T = N , we get the classical unsorted general algebras, in Lawvere form. When T = X , with X S-sorted, we get S-sorted general algebras. <ref> [22] </ref> also discusses congruences and quotients of generalised Lawvere theories. 4.4 Equations and unification. We can think of a pair f; g : T ! T 0 of mor-phisms in a theory as an equation. <p> There are many examples of this situation: solving systems of linear equations; polymorphic type inference; unification in the sense of "unification grammars" in linguistics; solving Scott domain equations; and least fixpoints. All these examples (and some others) are discussed in more detail in <ref> [22] </ref>, as are some techniques for proving that unifiers exist. <p> So-called monads (also called triples) are an abstraction of the necessary structure, and the Kleisli category over a monad gives the category of free algebras [47]. Again, there are surprisingly many examples. The paper <ref> [22] </ref> shows how a Kleisli category generates a generalised Lawvere theory, and then shows that many different problems of unification (that is, of solving systems of equations) can be naturally formulated as finding equalisers in Kleisli categories. Examples include 11 unification in order sorted and continuous theories. <p> Graph rewriting provides one promising area within which to search for such models [43, 32, 15, 41], and colimits seem to be quite useful here [10, 58, 44]. Graph rewriting is also important for the unification grammars that are now popular in linguistics <ref> [60, 22] </ref>. There seem to be many opportunities for further research in these areas. 6.3 Initiality. The simplest possible diagram is the empty diagram. Its colimit is an initial object , which is more simply explained as an object that has a unique morphism to any object.
Reference: [23] <author> Joseph Goguen. </author> <title> Types as theories. </title> <editor> In George Michael Reed, Andrew William Roscoe, and Ralph F. Wachter, editors, </editor> <booktitle> Topology and Category Theory in Computer Science, </booktitle> <pages> pages 357-390. </pages> <address> Oxford, </address> <year> 1991. </year> <booktitle> Proceedings of a Conference held at Oxford, </booktitle> <month> June </month> <year> 1989. </year>
Reference-contexts: A strict indexed category is just a functor B op ! Cat. The papers [62] and <ref> [23] </ref> give many examples of indexed categories in computing science, and [62] gives some general theorems, including simple sufficient conditions for completeness of the associated "Grothendieck" category.
Reference: [24] <author> Joseph Goguen and Rod Burstall. </author> <title> CAT, a system for the structured elaboration of correct programs from structured specifications. </title> <type> Technical Report Report CSL-118, </type> <institution> SRI Computer Science Lab, </institution> <month> October </month> <year> 1980. </year>
Reference-contexts: This leads to 2-categories, of which the category Cat of categories is the canonical example, with natural transformations as morphisms of its morphisms. This concept was mentioned in Example 2.7, and is also used in <ref> [24] </ref>, [26], [40], [56], among other places, and is mentioned in [61]. 8.2 Monoidal Categories. There are many cases where a category has a natural notion of multiplication that is not the usual Cartesian product but nevertheless enjoys many of the same properties.
Reference: [25] <author> Joseph Goguen and Rod Burstall. </author> <title> Some fundamental algebraic tools for the semantics of computation, part 1: Comma categories, colimits, signatures and theories. </title> <journal> Theoretical Computer Science, </journal> <volume> 31(2) </volume> <pages> 175-209, </pages> <year> 1984. </year>
Reference-contexts: Comma categories are another basic construction that first appeared in Lawvere's thesis. They tend to arise when morphisms are used as objects. Viewing a category as a comma category also makes available some general results to prove the existence of limits and colimits <ref> [25] </ref>. 13 8 Further Topics Although they are particularly fundamental, the seven dogmas given above far from exhaust the richness of category theory. This section mentions some further categorical constructions, about each of which one might express surprise at how many examples there are in computing science. 8.1 2-Categories.
Reference: [26] <author> Joseph Goguen and Rod Burstall. </author> <title> Some fundamental algebraic tools for the semantics of computation, part 2: Signed and abstract theories. </title> <journal> Theoretical Computer Science, </journal> <volume> 31(3) </volume> <pages> 263-295, </pages> <year> 1984. </year>
Reference-contexts: This leads to 2-categories, of which the category Cat of categories is the canonical example, with natural transformations as morphisms of its morphisms. This concept was mentioned in Example 2.7, and is also used in [24], <ref> [26] </ref>, [40], [56], among other places, and is mentioned in [61]. 8.2 Monoidal Categories. There are many cases where a category has a natural notion of multiplication that is not the usual Cartesian product but nevertheless enjoys many of the same properties.
Reference: [27] <author> Joseph Goguen and Susanna Ginali. </author> <title> A categorical approach to general systems theory. </title> <editor> In George Klir, editor, </editor> <booktitle> Applied General Systems Research, </booktitle> <pages> pages 257-270. </pages> <publisher> Plenum, </publisher> <year> 1978. </year> <month> 17 </month>
Reference-contexts: This intuition goes back to some work on General System Theory from 1969-74, <ref> [16, 27] </ref>, and has many applications in computing science: 4.1 Products. An early achievement of category theory was to give a precise definition for the notion of "product," which was previously known in many special cases, but only understood vaguely as a general concept. <p> At least for me, this intuition arose in the context of General Systems Theory <ref> [16, 27] </ref>. It may be interesting to note that the duality between the categorical definitions of limits and colimits suggests a similar duality between the intuitive notions of solution and interconnection. Now some examples: 6.1 Putting Theories together to make Specifications.
Reference: [28] <author> Joseph Goguen, Claude Kirchner, Helene Kirchner, Aristide Megrelis, and Jose Meseguer. </author> <title> An introduction to OBJ3. </title> <editor> In Jean-Pierre Jouannaud and Stephane Kaplan, editors, </editor> <booktitle> Proceedings, Conference on Conditional Term Rewriting, </booktitle> <pages> pages 258-263. </pages> <publisher> Springer, </publisher> <year> 1988. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 308. </volume>
Reference-contexts: More specifically, the application of a generic theory to an actual is computed by a pushout. OBJ <ref> [13, 28, 14] </ref>, Eqlog [30], and FOOPS [31] extend this notion of generic module to functional, logic (i.e., relational), and object oriented programming, and in their combinations. It has even been applied to Ada [21, 63]. 6.2 Graph Rewriting.
Reference: [29] <author> Joseph Goguen and Jose Meseguer. </author> <title> Correctness of recursive parallel nondeterministic flow programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 27(2) </volume> <pages> 268-290, </pages> <month> October </month> <year> 1983. </year> <note> Earlier version in Proceedings, Conference on Mathematical Foundations of Computer Science, </note> <year> 1977, </year> <pages> pages 580-595, </pages> <booktitle> Springer Lecture Notes in Computer Science, </booktitle> <volume> Volume 53. </volume>
Reference-contexts: There seems to be much more research that could be done in this area. For example, <ref> [29] </ref> gives an inductive proof principle for collections of mutually recursive procedures, and it would be interesting to consider other program constructions in a similar setting. 2.8 Theory Interpretations.
Reference: [30] <author> Joseph Goguen and Jose Meseguer. </author> <title> Models and equality for logical programming. </title> <editor> In Hartmut Ehrig, Giorgio Levi, Robert Kowalski, and Ugo Monta-nari, editors, </editor> <booktitle> Proceedings, 1987 TAPSOFT, </booktitle> <pages> pages 1-22. </pages> <publisher> Springer, </publisher> <year> 1987. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 250. </volume>
Reference-contexts: More specifically, the application of a generic theory to an actual is computed by a pushout. OBJ [13, 28, 14], Eqlog <ref> [30] </ref>, and FOOPS [31] extend this notion of generic module to functional, logic (i.e., relational), and object oriented programming, and in their combinations. It has even been applied to Ada [21, 63]. 6.2 Graph Rewriting. <p> syntax as an initial algebra [20], initiality has been applied to an increasing range of fundamental concepts, including induction and recursion [35, 51], abstract data types [33], domain equations (see below), computability [51], and model theoretic semantics for functional [13], logic (i.e., relational), combined functional and relational, and constraint logic <ref> [30] </ref> programming languages. The latter is interesting because it involves initiality in a category of model extensions, i.e., of morphisms, rather than just models.
Reference: [31] <author> Joseph Goguen and Jose Meseguer. </author> <title> Unifying functional, object-oriented and relational programming, with logical semantics. </title> <editor> In Bruce Shriver and Peter Wegner, editors, </editor> <booktitle> Research Directions in Object-Oriented Programming, </booktitle> <pages> pages 417-477. </pages> <publisher> MIT, </publisher> <year> 1987. </year> <journal> Preliminary version in SIGPLAN Notices, </journal> <volume> Volume 21, Number 10, </volume> <pages> pages 153-162, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: More specifically, the application of a generic theory to an actual is computed by a pushout. OBJ [13, 28, 14], Eqlog [30], and FOOPS <ref> [31] </ref> extend this notion of generic module to functional, logic (i.e., relational), and object oriented programming, and in their combinations. It has even been applied to Ada [21, 63]. 6.2 Graph Rewriting.
Reference: [32] <author> Joseph Goguen and Jose Meseguer. </author> <title> Software for the Rewrite Rule Machine. </title> <editor> In Hideo Aiso and Kazuhiro Fuchi, editors, </editor> <booktitle> Proceedings, International Conference on Fifth Generation Computer Systems 1988, </booktitle> <pages> pages 628-637. </pages> <institution> Institute for New Generation Computer Technology (ICOT), </institution> <year> 1988. </year>
Reference-contexts: A successful model should be abstract enough to avoid the implementation details of particular machines, and yet concrete enough to serve as an intermediate target language for compilers. Graph rewriting provides one promising area within which to search for such models <ref> [43, 32, 15, 41] </ref>, and colimits seem to be quite useful here [10, 58, 44]. Graph rewriting is also important for the unification grammars that are now popular in linguistics [60, 22]. There seem to be many opportunities for further research in these areas. 6.3 Initiality.
Reference: [33] <author> Joseph Goguen, James Thatcher, and Eric Wagner. </author> <title> An initial algebra approach to the specification, correctness and implementation of abstract data types. </title> <editor> In Raymond Yeh, editor, </editor> <booktitle> Current Trends in Programming Methodology, IV, </booktitle> <pages> pages 80-149. </pages> <publisher> Prentice Hall, </publisher> <year> 1978. </year>
Reference-contexts: This principle is so pervasive that isomorphic objects are often considered the same, and "the X" is used instead of "an X" when X is actually only defined up to isomorphism. In computing science, this principle guided the successful search for the right definition of "abstract data type" in <ref> [33] </ref>. 1.2 Diagram Chasing A useful way to get an overview of a problem, theorem, or proof, is to draw one or more diagrams that show the main objects and morphisms involved. <p> It would be interesting to extend this to more general variants of Lawvere theories (such as many-sorted theories or sketches), and to the more general data representations studied in the abstract data type literature (e.g., <ref> [33, 9] </ref>). 3.4 Program Homomorphisms. Because Example 2.7 defines programs as functors, we expect program homomorphisms to be natural transformations between programs. Indeed, Burstall [5] shows that a weak form of Milner's program simulations [53] arises in just this way. <p> It seems remarkable that initiality is so very use-ful in computing science. Beginning with the formalisation of abstract syntax as an initial algebra [20], initiality has been applied to an increasing range of fundamental concepts, including induction and recursion [35, 51], abstract data types <ref> [33] </ref>, domain equations (see below), computability [51], and model theoretic semantics for functional [13], logic (i.e., relational), combined functional and relational, and constraint logic [30] programming languages. The latter is interesting because it involves initiality in a category of model extensions, i.e., of morphisms, rather than just models.
Reference: [34] <author> Joseph Goguen, James Thatcher, Eric Wagner, and Jesse Wright. </author> <title> A junction between computer science and category theory, I: Basic concepts and examples (part 1). </title> <type> Technical report, </type> <institution> IBM Watson Research Center, </institution> <address> Yorktown Heights NY, </address> <year> 1973. </year> <type> Report RC 4526. </type>
Reference-contexts: The paper [22] gives a relatively concrete and self-contained account of some basic category theory for computing scientists, using theories, equations, and unification as motivation, and many examples from that paper are used here. 1 As far as I know, the first such attempt is my own in <ref> [34] </ref>, which gives four of the guidelines here. <p> Clearly this composition is associative when defined, and each node can be given an "identity path" having no edges. This category is denoted Pa (G). (Details may be found in [47], <ref> [34] </ref>, [19], and many other places.) 1.5 Automata.
Reference: [35] <author> Joseph Goguen, James Thatcher, Eric Wagner, and Jesse Wright. </author> <title> Initial algebra semantics and continuous algebras. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 24(1) </volume> <pages> 68-95, </pages> <month> January </month> <year> 1977. </year> <title> An early version is "Initial Algebra Semantics", with James Thatcher, </title> <institution> IBM T.J. Watson Research Center, </institution> <type> Report RC 4865, </type> <month> May </month> <year> 1974. </year>
Reference-contexts: It seems remarkable that initiality is so very use-ful in computing science. Beginning with the formalisation of abstract syntax as an initial algebra [20], initiality has been applied to an increasing range of fundamental concepts, including induction and recursion <ref> [35, 51] </ref>, abstract data types [33], domain equations (see below), computability [51], and model theoretic semantics for functional [13], logic (i.e., relational), combined functional and relational, and constraint logic [30] programming languages.
Reference: [36] <author> Robert Goldblatt. </author> <title> Topoi, the Categorial Analysis of Logic. </title> <publisher> North-Holland, </publisher> <year> 1979. </year>
Reference-contexts: Thus, if you are a newcomer to category theory, you will need to use some text in connection with this paper. Unfortunately, no existing text is ideal for computing scientists, but perhaps that by Goldblatt <ref> [36] </ref> comes closest. The classic text by Mac Lane [47] is warmly recommended for those with sufficient mathematics background, and Herrlich and Strecker's book [39] is admirably thorough; see also [2] and [45]. <p> The category Set of sets embodies a contrary point of view, that each function has a domain in which its arguments are meaningful, a codomain in which its results are meaningful, and composition of functions is only allowed when meaningful in this sense. (See <ref> [36] </ref> for related discussions.) 1.2 Relations. Just as with functions, it seems desirable to take the view that the composition of relations is only meaningful when the domains match. <p> A profound generalisation of the idea that a theory is a category appears in the topos notion developed by Lawvere, Tierney, and others. In a sense, this notion captures the essence of set theory. It also has surprising relationships to algebraic geometry, computing science, and intuitionistic logic <ref> [36, 2, 42] </ref>. 9 Discussion The traditional view of foundations requires giving a system of axioms, preferably first order, that assert the existence of certain primitive objects with certain properties, and of certain primitive constructions on objects, such that all objects of interest can be constructed, and all their relevant properties
Reference: [37] <author> William S. Hatcher. </author> <title> The Logical Foundations of Mathematics. </title> <publisher> Permagon, </publisher> <year> 1982. </year>
Reference-contexts: also failed to provide fully satisfying accounts of mathematical practice in certain areas, including category theory itself, and moreover have encouraged research into areas that have little or nothing to do with mathematical practice, such as large cardinals. (Mac Lane [48] gives a lively discussion of these issues; see also <ref> [37] </ref> for an overview of various approaches to foundations.) In any case, attempts to find a minimal set of least debatable concepts upon which to erect mathematics have little direct relevance to computing science.
Reference: [38] <author> Jacques Herbrand. </author> <title> Recherches sur la theorie de la demonstration. </title> <institution> Travaux de la Societe des Sciences et des Lettres de Varsovie, Classe III, </institution> <month> 33(128), </month> <year> 1930. </year>
Reference-contexts: The latter is interesting because it involves initiality in a category of model extensions, i.e., of morphisms, rather than just models. In general, this research can be seen as formalising, generalising, and smoothing out the classical Herbrand Universe construction <ref> [38] </ref>, and it seems likely that much more interesting work can be done along these lines. 6.5 Solving Domain Equations.
Reference: [39] <author> Horst Herrlich and George Strecker. </author> <title> Category Theory. </title> <publisher> Allyn and Bacon, </publisher> <year> 1973. </year>
Reference-contexts: Unfortunately, no existing text is ideal for computing scientists, but perhaps that by Goldblatt [36] comes closest. The classic text by Mac Lane [47] is warmly recommended for those with sufficient mathematics background, and Herrlich and Strecker's book <ref> [39] </ref> is admirably thorough; see also [2] and [45].
Reference: [40] <author> C.A.R. Hoare and Jifeng He. </author> <title> Natural transformations and data refinement, </title> <booktitle> 1988. Programming Research Group, </booktitle> <publisher> Oxford University. </publisher> <pages> 18 </pages>
Reference-contexts: Considered in connection with the basic program construction operations of a language, this can lead to some general techniques for developing correct programs <ref> [40] </ref>. It would be interesting to extend this to more general variants of Lawvere theories (such as many-sorted theories or sketches), and to the more general data representations studied in the abstract data type literature (e.g., [33, 9]). 3.4 Program Homomorphisms. <p> This leads to 2-categories, of which the category Cat of categories is the canonical example, with natural transformations as morphisms of its morphisms. This concept was mentioned in Example 2.7, and is also used in [24], [26], <ref> [40] </ref>, [56], among other places, and is mentioned in [61]. 8.2 Monoidal Categories. There are many cases where a category has a natural notion of multiplication that is not the usual Cartesian product but nevertheless enjoys many of the same properties.
Reference: [41] <author> Berthold Hoffmann and Detlef Plump. </author> <title> Jungle evaluation for efficient term rewriting. </title> <type> Technical Report 4/88, </type> <institution> Fachbereich Mathematik und Informatik, Universitat Bremen, </institution> <year> 1988. </year>
Reference-contexts: A successful model should be abstract enough to avoid the implementation details of particular machines, and yet concrete enough to serve as an intermediate target language for compilers. Graph rewriting provides one promising area within which to search for such models <ref> [43, 32, 15, 41] </ref>, and colimits seem to be quite useful here [10, 58, 44]. Graph rewriting is also important for the unification grammars that are now popular in linguistics [60, 22]. There seem to be many opportunities for further research in these areas. 6.3 Initiality.
Reference: [42] <author> Martin Hyland. </author> <title> The effective topos. In A.S. </title> <editor> Troelstra and van Dalen, editors, </editor> <booktitle> The Brouwer Symposium. </booktitle> <publisher> North-Holland, </publisher> <year> 1982. </year>
Reference-contexts: A profound generalisation of the idea that a theory is a category appears in the topos notion developed by Lawvere, Tierney, and others. In a sense, this notion captures the essence of set theory. It also has surprising relationships to algebraic geometry, computing science, and intuitionistic logic <ref> [36, 2, 42] </ref>. 9 Discussion The traditional view of foundations requires giving a system of axioms, preferably first order, that assert the existence of certain primitive objects with certain properties, and of certain primitive constructions on objects, such that all objects of interest can be constructed, and all their relevant properties
Reference: [43] <author> Robert Keller and Joseph Fasel, </author> <title> editors. Proceedings, Graph Reduction Workshop. </title> <publisher> Springer, </publisher> <year> 1987. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 279. </volume>
Reference-contexts: A successful model should be abstract enough to avoid the implementation details of particular machines, and yet concrete enough to serve as an intermediate target language for compilers. Graph rewriting provides one promising area within which to search for such models <ref> [43, 32, 15, 41] </ref>, and colimits seem to be quite useful here [10, 58, 44]. Graph rewriting is also important for the unification grammars that are now popular in linguistics [60, 22]. There seem to be many opportunities for further research in these areas. 6.3 Initiality.
Reference: [44] <author> Richard Kennaway. </author> <title> On `On graph rewritings'. </title> <journal> Theoretical Computer Science, </journal> <volume> 52 </volume> <pages> 37-58, </pages> <year> 1987. </year>
Reference-contexts: Graph rewriting provides one promising area within which to search for such models [43, 32, 15, 41], and colimits seem to be quite useful here <ref> [10, 58, 44] </ref>. Graph rewriting is also important for the unification grammars that are now popular in linguistics [60, 22]. There seem to be many opportunities for further research in these areas. 6.3 Initiality. The simplest possible diagram is the empty diagram.
Reference: [45] <author> Joachim Lambek and Phil Scott. </author> <title> Introduction to Higher Order Categorical Logic. Cambridge, </title> <booktitle> 1986. Cambridge Studies in Advanced Mathematics, </booktitle> <volume> Volume 7. </volume>
Reference-contexts: Unfortunately, no existing text is ideal for computing scientists, but perhaps that by Goldblatt [36] comes closest. The classic text by Mac Lane [47] is warmly recommended for those with sufficient mathematics background, and Herrlich and Strecker's book [39] is admirably thorough; see also [2] and <ref> [45] </ref>. <p> The only other attempt that I know is due to Lambek and Scott <ref> [45] </ref>, who give a number of "slogans" in a similar style. 2 1 Categories The first dogma is as follows: To each species of mathematical structure, there corresponds a category whose objects have that structure, and whose morphisms preserve it. <p> A Cartesian closed category has binary products, and a right adjoint to each functor sending A to A fi B. It is remarkable that this concept turns out to be essentially the (typed) -calculus; see <ref> [45] </ref>. This connection has been used, for example, as a basis for the efficient compilation of higher order functional languages [8]. An advantage is that optimisation techniques can be proved correct by using purely equational reasoning. 5.4 Kleisli Categories.
Reference: [46] <author> Saunders Mac Lane. </author> <title> Duality for groups. </title> <booktitle> Proceedings, National Academy of Sciences, U.S.A., </booktitle> <volume> 34 </volume> <pages> 263-267, </pages> <year> 1948. </year>
Reference-contexts: An early achievement of category theory was to give a precise definition for the notion of "product," which was previously known in many special cases, but only understood vaguely as a general concept. The definition is due to Mac Lane <ref> [46] </ref>. 9 4.2 Product Types. Given types T 1 and T 2 , their "parallel composition" is their product in the category T of types. <p> Moreover, C has coproducts (also called "sums") iff has a right adjoint. This beautifully simple way to formalise two mathematical concepts of basic importance is due to Mac Lane <ref> [46] </ref>, and extends to general limits and colimits. 5.2 Freebies. Another beautifully simple formalisation gives a general definition of "free" constructions: they are the left adjoints of forgetful functors.
Reference: [47] <author> Saunders Mac Lane. </author> <title> Categories for the Working Mathematician. </title> <publisher> Springer, </publisher> <year> 1971. </year>
Reference-contexts: Thus, if you are a newcomer to category theory, you will need to use some text in connection with this paper. Unfortunately, no existing text is ideal for computing scientists, but perhaps that by Goldblatt [36] comes closest. The classic text by Mac Lane <ref> [47] </ref> is warmly recommended for those with sufficient mathematics background, and Herrlich and Strecker's book [39] is admirably thorough; see also [2] and [45]. <p> Clearly this composition is associative when defined, and each node can be given an "identity path" having no edges. This category is denoted Pa (G). (Details may be found in <ref> [47] </ref>, [34], [19], and many other places.) 1.5 Automata. <p> Another way to generalise Lawvere theories is to view an arbitrary adjunction as a kind of theory. So-called monads (also called triples) are an abstraction of the necessary structure, and the Kleisli category over a monad gives the category of free algebras <ref> [47] </ref>. Again, there are surprisingly many examples. The paper [22] shows how a Kleisli category generates a generalised Lawvere theory, and then shows that many different problems of unification (that is, of solving systems of equations) can be naturally formulated as finding equalisers in Kleisli categories.
Reference: [48] <author> Saunders Mac Lane. </author> <title> To the greater health of mathematics. </title> <journal> Mathematical In-telligencer, </journal> <volume> 10(3) </volume> <pages> 17-20, </pages> <year> 1988. </year> <note> See also Mathematical Intelligencer 5, No. </note> <month> 4, </month> <pages> pp. 53-55, </pages> <year> 1983. </year>
Reference-contexts: Set theoretic foundations have also failed to provide fully satisfying accounts of mathematical practice in certain areas, including category theory itself, and moreover have encouraged research into areas that have little or nothing to do with mathematical practice, such as large cardinals. (Mac Lane <ref> [48] </ref> gives a lively discussion of these issues; see also [37] for an overview of various approaches to foundations.) In any case, attempts to find a minimal set of least debatable concepts upon which to erect mathematics have little direct relevance to computing science.
Reference: [49] <author> F. William Lawvere. </author> <title> Functorial semantics of algebraic theories. </title> <booktitle> Proceedings, National Academy of Sciences, U.S.A., </booktitle> <volume> 50 </volume> <pages> 869-872, </pages> <year> 1963. </year> <title> Summary of Ph.D. </title> <type> Thesis, </type> <institution> Columbia University. </institution>
Reference-contexts: Clearly there are identity substitutions for each set of variables (substituting each variable for itself), and the composition of substitutions is associative when defined. Thus, we get a category with substitutions as morphisms. 1.8 Theories. In his 1963 thesis <ref> [49] </ref>, F.W. Lawvere developed a very elegant approach to universal algebra, in which an algebraic theory is defined to be a category T whose morphisms correspond to equivalence classes of terms, and whose objects indicate the variables involved in these terms, as in Example 1.6 above. <p> That this is a functor helps to confirm the elegance and coherence of the previous definitions. See [18]. 6 2.3 Models. In the Lawvere approach to universal algebra <ref> [49] </ref>, an algebra is a functor from a theory T to Set. Here, "construction" takes the meaning of "interpretation": the abstract structure in T is interpreted (i.e., constructed) concretely in Set, i.e., these functors must preserve finite products. <p> Moreover, this characterisation extends to, and even suggests, more general minimal realisation situations, e.g., see [17]. 5.4 Syntax and Semantics. One of the more spectacular adjoints is that between syntax and semantics for algebraic theories, again due to Lawvere in his thesis; see <ref> [49] </ref>. 5.5 Cartesian Closed Categories. A Cartesian closed category has binary products, and a right adjoint to each functor sending A to A fi B. It is remarkable that this concept turns out to be essentially the (typed) -calculus; see [45].
Reference: [50] <author> Humberto Maturana and Francisco Varela. </author> <title> The Tree of Knowledge. </title> <address> Shambhala, New Science Library, </address> <year> 1987. </year>
Reference-contexts: Indeed, category theorists have argued that morphisms are more important than objects, because they reveal what the structure really is. Moreover, the category concept can be defined using only morphisms. Perhaps the bias of modern Western languages and cultures towards objects rather than relationships accounts for this (see <ref> [50, 64] </ref> for some related discussion). By way of notation, we use ";" for composition, and 1 A for the identity morphism at an object A. Now some examples: 1.1 Sets. If we take sets to be objects, then their morphisms are clearly going to be functions.
Reference: [51] <author> Jose Meseguer and Joseph Goguen. Initiality, </author> <title> induction and computability. </title> <editor> In Maurice Nivat and John Reynolds, editors, </editor> <booktitle> Algebraic Methods in Semantics, </booktitle> <pages> pages 459-541. </pages> <address> Cambridge, </address> <year> 1985. </year>
Reference-contexts: It seems remarkable that initiality is so very use-ful in computing science. Beginning with the formalisation of abstract syntax as an initial algebra [20], initiality has been applied to an increasing range of fundamental concepts, including induction and recursion <ref> [35, 51] </ref>, abstract data types [33], domain equations (see below), computability [51], and model theoretic semantics for functional [13], logic (i.e., relational), combined functional and relational, and constraint logic [30] programming languages. <p> Beginning with the formalisation of abstract syntax as an initial algebra [20], initiality has been applied to an increasing range of fundamental concepts, including induction and recursion [35, 51], abstract data types [33], domain equations (see below), computability <ref> [51] </ref>, and model theoretic semantics for functional [13], logic (i.e., relational), combined functional and relational, and constraint logic [30] programming languages. The latter is interesting because it involves initiality in a category of model extensions, i.e., of morphisms, rather than just models.
Reference: [52] <author> Jose Meseguer and Ugo Montanari. </author> <title> Petri nets are monoids: A new algebraic foundation for net theory. </title> <booktitle> In Proceedings, Symposium on Logic in Computer Science. IEEE Computer Society, </booktitle> <year> 1988. </year> <note> Full version in Report SRI-CSL-88-3, </note> <institution> Computer Science Laboratory, SRI International, </institution> <note> January 1988; submitted to Information and Computation. </note>
Reference-contexts: Sufficiently abstract formulations can reveal surprising connections. For example, an analogy between Petri nets and the -calculus might suggest looking for a closed category structure on the category of Petri nets <ref> [52] </ref>. * Dealing with abstraction and representation independence. In computing science, more abstract viewpoints are often more useful, because of the need to achieve independence from the often overwhelmingly complex details of how things are represented or implemented. <p> There are many cases where a category has a natural notion of multiplication that is not the usual Cartesian product but nevertheless enjoys many of the same properties. The category of Petri nets studied in <ref> [52] </ref> has already been mentioned, and a variety of recent work suggests that monoidal categories may be broadly useful in understanding the relationships among the various theories of concurrency, e.g., see [12]. 8.3 Indexed Categories. A strict indexed category is just a functor B op ! Cat.
Reference: [53] <author> Robin Milner. </author> <title> An algebraic definition of simulation between programs. </title> <type> Technical Report CS-205, </type> <institution> Stanford University, Computer Science Department, </institution> <year> 1971. </year>
Reference-contexts: Because Example 2.7 defines programs as functors, we expect program homomorphisms to be natural transformations between programs. Indeed, Burstall [5] shows that a weak form of Milner's program simulations <ref> [53] </ref> arises in just this way.
Reference: [54] <author> Robin Milner. </author> <title> A Calculus of Communicating Systems. </title> <publisher> Springer, </publisher> <year> 1980. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 92. </volume>
Reference-contexts: In fact, Aczel [1] and others have used an Anti-Foundation Axiom, which positively asserts the existence of such non-well founded sets, to model various phenomena in computation, including communicating processes in the sense of Milner <ref> [54] </ref>. I think it is fair to say that most mathematicians no longer believe in the heroic ideal of a single generally accepted foundation for mathematics, and that many no longer believe in the possibility of finding "unshakable certainties" [4] upon which to found all of mathematics.
Reference: [55] <author> Eugenio Moggi. </author> <title> Computational lambda-calculus and monads. </title> <type> Technical Report ECS-LFCS-88-66, </type> <institution> Laboratory for Foundations of Computer Science, University of Edinburgh, </institution> <year> 1988. </year>
Reference-contexts: Examples include 11 unification in order sorted and continuous theories. Moggi <ref> [55] </ref> uses Kleisli cat-egories to get an abstract notion of "computation" which gives rise to many interesting generalisations of the -calculus. 6 Colimits The sixth dogma says: Given a species of structure, say widgets, then the result of interconnecting a system of widgets to form a super-widget corresponds to taking the
Reference: [56] <author> Eugenio Moggi. </author> <title> A category-theoretic account of program modules, 1989. </title> <institution> Laboratory for Foundations of Computer Science, University of Edinburgh. </institution> <month> 19 </month>
Reference-contexts: This leads to 2-categories, of which the category Cat of categories is the canonical example, with natural transformations as morphisms of its morphisms. This concept was mentioned in Example 2.7, and is also used in [24], [26], [40], <ref> [56] </ref>, among other places, and is mentioned in [61]. 8.2 Monoidal Categories. There are many cases where a category has a natural notion of multiplication that is not the usual Cartesian product but nevertheless enjoys many of the same properties. <p> A strict indexed category is just a functor B op ! Cat. The papers [62] and [23] give many examples of indexed categories in computing science, and [62] gives some general theorems, including simple sufficient conditions for completeness of the associated "Grothendieck" category. Moggi <ref> [56] </ref> applies indexed categories to programming languages, and in particular shows how to get a kind of higher order module facility for languages like ML. (Non-strict indexed categories are significantly more complex, and have been used in foundational studies [57].) 8.5 Topoi.
Reference: [57] <author> Robert Pare and Peter Johnstone. </author> <title> Indexed Categories and their Applications. </title> <publisher> Springer, </publisher> <year> 1978. </year> <booktitle> Lecture Notes in Mathematics, </booktitle> <volume> Volume 661. </volume>
Reference-contexts: Moggi [56] applies indexed categories to programming languages, and in particular shows how to get a kind of higher order module facility for languages like ML. (Non-strict indexed categories are significantly more complex, and have been used in foundational studies <ref> [57] </ref>.) 8.5 Topoi. A profound generalisation of the idea that a theory is a category appears in the topos notion developed by Lawvere, Tierney, and others. In a sense, this notion captures the essence of set theory.
Reference: [58] <author> Jean Claude Raoult. </author> <title> On graph rewritings. </title> <journal> Theoretical Computer Science, </journal> <volume> 32 </volume> <pages> 1-24, </pages> <year> 1984. </year>
Reference-contexts: Graph rewriting provides one promising area within which to search for such models [43, 32, 15, 41], and colimits seem to be quite useful here <ref> [10, 58, 44] </ref>. Graph rewriting is also important for the unification grammars that are now popular in linguistics [60, 22]. There seem to be many opportunities for further research in these areas. 6.3 Initiality. The simplest possible diagram is the empty diagram.
Reference: [59] <author> Dana Scott. </author> <title> Continuous lattices. </title> <booktitle> In Proceedings, Dalhousie Conference, </booktitle> <pages> pages 97-136. </pages> <publisher> Springer, </publisher> <year> 1972. </year> <booktitle> Lecture Notes in Mathematics, </booktitle> <volume> Volume 274. </volume>
Reference-contexts: In general, this research can be seen as formalising, generalising, and smoothing out the classical Herbrand Universe construction [38], and it seems likely that much more interesting work can be done along these lines. 6.5 Solving Domain Equations. Scott <ref> [59] </ref> presents an "inverse limit" construction for solving domain equations, and records some suggestions by Lawvere that clarify this construction by viewing it as a colimit in an associated category of retracts.
Reference: [60] <author> Stuart Shieber. </author> <title> An Introduction to Unification-Based Approaches to Grammar. Center for the Study of Language and Information, </title> <year> 1986. </year>
Reference-contexts: Graph rewriting provides one promising area within which to search for such models [43, 32, 15, 41], and colimits seem to be quite useful here [10, 58, 44]. Graph rewriting is also important for the unification grammars that are now popular in linguistics <ref> [60, 22] </ref>. There seem to be many opportunities for further research in these areas. 6.3 Initiality. The simplest possible diagram is the empty diagram. Its colimit is an initial object , which is more simply explained as an object that has a unique morphism to any object.
Reference: [61] <author> Michael Smyth and Gordon Plotkin. </author> <title> The category-theoretic solution of recursive domain equations. </title> <journal> SIAM Journal of Computation, </journal> <volume> 11 </volume> <pages> 761-783, </pages> <year> 1982. </year> <note> Also Report D.A.I. 60, </note> <institution> University of Edinburgh, Department of Artificial Intelligence, </institution> <month> December </month> <year> 1978. </year>
Reference-contexts: Scott [59] presents an "inverse limit" construction for solving domain equations, and records some suggestions by Lawvere that clarify this construction by viewing it as a colimit in an associated category of retracts. These ideas are taken further in <ref> [61] </ref>, which also generalises from partial orders to categories and shows that least fixpoints are initial algebras, among other things. <p> This leads to 2-categories, of which the category Cat of categories is the canonical example, with natural transformations as morphisms of its morphisms. This concept was mentioned in Example 2.7, and is also used in [24], [26], [40], [56], among other places, and is mentioned in <ref> [61] </ref>. 8.2 Monoidal Categories. There are many cases where a category has a natural notion of multiplication that is not the usual Cartesian product but nevertheless enjoys many of the same properties.
Reference: [62] <author> Andrzej Tarlecki, Rod Burstall, and Joseph Goguen. </author> <title> Some fundamental algebraic tools for the semantics of computation, part 3: Indexed categories. </title> <journal> Theoretical Computer Science, </journal> <volume> 91 </volume> <pages> 239-264, </pages> <year> 1991. </year> <note> Also, Monograph PRG-77, </note> <month> August </month> <year> 1989, </year> <title> Programming Research Group, </title> <publisher> Oxford University. </publisher>
Reference-contexts: A strict indexed category is just a functor B op ! Cat. The papers <ref> [62] </ref> and [23] give many examples of indexed categories in computing science, and [62] gives some general theorems, including simple sufficient conditions for completeness of the associated "Grothendieck" category. <p> A strict indexed category is just a functor B op ! Cat. The papers <ref> [62] </ref> and [23] give many examples of indexed categories in computing science, and [62] gives some general theorems, including simple sufficient conditions for completeness of the associated "Grothendieck" category.
Reference: [63] <author> William Joseph Tracz. </author> <title> Formal Specification of Parameterized Programs in lil-leanna. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <note> to appear. </note>
Reference-contexts: OBJ [13, 28, 14], Eqlog [30], and FOOPS [31] extend this notion of generic module to functional, logic (i.e., relational), and object oriented programming, and in their combinations. It has even been applied to Ada <ref> [21, 63] </ref>. 6.2 Graph Rewriting. Another important problem in computing science is to find models of computation that are suitable for massively parallel machines.
Reference: [64] <author> Alfred North Whitehead. </author> <title> Process and Reality. Free, </title> <booktitle> 1969. </booktitle> <pages> 20 </pages>
Reference-contexts: Indeed, category theorists have argued that morphisms are more important than objects, because they reveal what the structure really is. Moreover, the category concept can be defined using only morphisms. Perhaps the bias of modern Western languages and cultures towards objects rather than relationships accounts for this (see <ref> [50, 64] </ref> for some related discussion). By way of notation, we use ";" for composition, and 1 A for the identity morphism at an object A. Now some examples: 1.1 Sets. If we take sets to be objects, then their morphisms are clearly going to be functions.
References-found: 64

