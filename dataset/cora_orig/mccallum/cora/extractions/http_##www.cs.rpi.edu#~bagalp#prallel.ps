URL: http://www.cs.rpi.edu/~bagalp/prallel.ps
Refering-URL: http://www.cs.rpi.edu/~bagalp/resume.html
Root-URL: http://www.cs.rpi.edu
Title: tsort: A multi-threaded sort  
Author: Prasad Bagal Anand Paka Amitha Perera 
Date: January 11, 1999  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Li and P. M. B. Vitanyi. </author> <title> Average case complexity under the uni versal distribution equals worst-case complexity. </title> <journal> Information Processing Letters, </journal> <volume> 42 </volume> <pages> 145-149, </pages> <year> 1992. </year>
Reference-contexts: Figure 1 plots the performances curves for our hand run timing experiments. The algorithms timed by hand were the standard STL sort, the threaded sort in recursive mode (i.e. without any threads) and the threaded sort with 16 threads. The timing was performed under both the universal <ref> [1] </ref> and uniform distributions. Figure 1 plots the performances. 7 Shortcomings and possible improvements * There is no guarantee that the pivots chosen always split the sequence into equal sized partitions.
Reference: [2] <author> D. R. Musser. </author> <title> Introspective Sorting and Selection Algorithms. </title> <journal> Software|Practice and Experience, </journal> <volume> Vol. 27(8), </volume> <month> 983-993 (August </month> <year> 1997). </year>
Reference-contexts: In particular, sorting is a task that is performed frequently and is relatively easy is to parallelize. In this document, we present the implementation of a threaded version of the introsort <ref> [2] </ref> algorithm. The rest of the document is structured as follows. Section 2 presents some of the goals of the project. Section 3 outlines the implementation approach while Section 4 describes the details. Section 5 discusses the testing strategies used to ensure correctness. Section 6 presents some timing data.
References-found: 2

