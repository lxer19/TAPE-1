URL: ftp://cl-ftp.dfki.uni-sb.de/pub/papers/local/busemann-horacek98.ps.gz
Refering-URL: http://cl-www.dfki.uni-sb.de/cl/papers/cl-abstracts.html
Root-URL: 
Email: fbusemann, horacekg@dfki.de 1  
Title: A FLEXIBLE SHALLOW APPROACH TO TEXT GENERATION  
Author: Stephan Busemann and Helmut Horacek 
Address: Stuhlsatzenhausweg 3, 66123 Saarbrucken, Germany  
Affiliation: DFKI GmbH  
Abstract: In order to support the efficient development of NL generation systems, two orthogonal methods are currently pursued with emphasis: (1) reusable, general, and linguistically motivated surface realization components, and (2) simple, task-oriented template-based techniques. In this paper we argue that, from an application-oriented perspective, the benefits of both are still limited. In order to improve this situation, we suggest and evaluate shallow generation methods associated with increased flexibility. We advise a close connection between domain-motivated and linguistic ontologies that supports the quick adaptation to new tasks and domains, rather than the reuse of general resources. Our method is especially designed for generating reports with limited linguistic variations.
Abstract-found: 1
Intro-found: 1
Reference: [ Bateman, 1997 ] <author> John Bateman. </author> <title> KPML delvelopment environment: multilingual linguistic resource development and sentence generation. </title> <type> Report, </type> <institution> German National Center for Information Technology (GMD), Institute for integrated publication and information systems (IPSI), Darmstadt, Germany, </institution> <month> January </month> <year> 1997. </year> <note> Release 1.1. </note>
Reference: [ Busemann, 1996 ] <author> Stephan Busemann. </author> <title> Best-first surface realization. </title> <editor> In Donia Scott, editor, </editor> <booktitle> Eighth International Natural Language Generation Workshop. Proceedings, </booktitle> <pages> pages 101-110, </pages> <institution> Herstmonceux, Univ. of Brighton, </institution> <address> England, </address> <year> 1996. </year> <note> Also available at the Computation and Language Archive at http://xxx.lanl.gov/abs/cmp-lg/9605010. </note>
Reference-contexts: It retrieves the relevant data from the TEMSIS database. It combines fixed text blocks with the results of the realizer in a language-neutral way. IR expressions are consumed by the text realizer, which is a version of the production system TG/2 described in <ref> [ Busemann, 1996 ] </ref> . 3.1 The TEMSIS application With TEMSIS a Transnational Environmental Management Support and Information System was created as part of a transnational cooperation between the communities in the French-German urban agglomeration, Moselle Est and Stadtverband Saarbrucken. <p> Productions are applied through the familiar three-step processing cycle: (i) identify the applicable rules, (ii) select a rule on the basis of some conflict resolution mechanism, and (iii) apply that rule. Productions are used to encode grammar rules in the language TGL <ref> [ Busemann, 1996 ] </ref> . A rule is applicable if its preconditions are met. <p> A TGL rule is successfully applied if all actions are carried out. The rule returns the concatenation of the substrings produced by the "template" actions. If an action fails, backtracking can be invoked flexibly and efficiently using memoization techniques (see <ref> [ Busemann, 1996 ] </ref> ). 4 Costs and Benefits As Reiter and Mellish note, the use of shallow techniques needs to be justified through a cost-benefit analysis [ Reiter and Mellish, 1993 ] . <p> Alternative formulations are easily integrated by defining conflicting rules in TGL. These are ordered according to a set of criteria that cause the system to prefer certain formulations to others (cf. <ref> [ Busemann, 1996 ] </ref> ). Grammar rules leading to preferred formulations are selected first from a conflict set of concurring rules.
Reference: [ Cawsey et al., 1995 ] <author> Alison Cawsey, Kim Binsted, and Ray Jones. </author> <title> Personalised explanations for patient education. </title> <booktitle> In Fifth European Workshop on Natural Language Generation. Proceedings, </booktitle> <pages> pages 59-74, </pages> <address> Leiden, The Netherlands, </address> <year> 1995. </year>
Reference-contexts: Since then, various shallow methods including canned text parts and some template-based techniques have been utilized, e.g. in CogentHelp [ White and Caldwell, 1997 ] , in the system described in <ref> [ Cawsey et al., 1995 ] </ref> , and in idas [ Reiter et al., 1995 ] .
Reference: [ Davis and King, 1977 ] <author> Randall Davis and Jonathan King. </author> <title> An overview of production systems. </title> <editor> In E. W. Elcock and D. Michie, editors, </editor> <booktitle> Machine Intelligence 8, </booktitle> <pages> pages 300-332. </pages> <publisher> Ellis Horwood, </publisher> <address> Chichester, </address> <year> 1977. </year>
Reference-contexts: It integrates canned text, templates, and context-free rules into a single production-rule formalism and is thus extremely well suited for coping with IR subexpressions of different granularity. TG/2 is based on production system techniques <ref> [ Davis and King, 1977 ] </ref> that preserve the modularity of processing and linguistic knowledge. Productions are applied through the familiar three-step processing cycle: (i) identify the applicable rules, (ii) select a rule on the basis of some conflict resolution mechanism, and (iii) apply that rule.
Reference: [ Elhadad and Robin, 1996 ] <author> Michael Elhadad and Jacques Robin. </author> <title> An overview of SURGE: a reusable comprehensive syntactic realization component. </title> <editor> In Donia Scott, editor, </editor> <booktitle> Eighth International Natural Language Generation Workshop. Demonstrations and Posters, </booktitle> <pages> pages 1-4, </pages> <institution> Herstmonceux, Univ. of Brighton, Eng-land, </institution> <year> 1996. </year>
Reference-contexts: the development of feasible applications as shallow analyzers. 2.2 Potential shortcomings of approaches to surface realization Current approaches to surface realization are mostly in-depth, based on general, linguistically motivated, and widely reusable realization components, such as Penman [ Penman, 1989 ] , KPML [ Bate-man, 1997 ] , and SURGE <ref> [ Elhadad and Robin, 1996 ] </ref> . These components are domain-independent and based on sound linguistic principles. KPML and SURGE also exhibit a broad coverage of English, while several other language models are also available or under development.
Reference: [ Horacek, 1996 ] <author> Helmut Horacek. </author> <title> Lexical choice in expressing metonymic relations in multiple languages. </title> <journal> Machine Translation, </journal> <volume> 11 </volume> <pages> 109-158, </pages> <year> 1996. </year>
Reference-contexts: The associated operations include reifying an attribute as a structured value and raising an embedded partial description. These operations are realized by mapping schemata similar to those elaborated for linguistically motivated lexicalization <ref> [ Horacek, 1996 ] </ref> . However, some of our schemata are purely application-oriented and tailored to the domain, which manifests itself in the larger size of the structures covered. Aggregation, the last part of information recasting, comprises removing partial descriptions or adding simple structures.
Reference: [ Kasper and Whitney, 1989 ] <author> Robert Kasper and Richard Whitney. SPL: </author> <title> A sentence plan language for text generation. </title> <type> Technical report, </type> <institution> USC/Information Sciences Institute, Marina del Rey, </institution> <address> CA., </address> <year> 1989. </year>
Reference-contexts: Surface realization components impose a layer of intermediate representations that has become fairly standard, such as the Sentence Plan Language (SPL) <ref> [ Kasper and Whitney, 1989 ] </ref> . This layer allows for the use of existing software with well-defined interfaces, often reducing the development effort for surface realization considerably.
Reference: [ Kukich, 1983 ] <author> Karen Kukich. </author> <title> Design and implementation of a knowledge-based report generator. </title> <booktitle> In Proceedings of the 21st Annual Meeting of the Association for Computational Linguistics, </booktitle> <pages> pages 145-150, </pages> <address> Cambridge, MA, </address> <year> 1983. </year>
Reference-contexts: Their inclusion may require the intermediate representation layer to be modified. 2.3 Potential shortcomings of shallow generation methods A prominent example for an early shallow generation system is Ana <ref> [ Kukich, 1983 ] </ref> , which reports about stock market developments. While the kind of texts it produces can still be considered valuable today, Ana is implemented as a widely unstructured rule-based system, which does not seem to be easily extendable and portable.
Reference: [ Meteer, 1992 ] <author> M. Meteer. </author> <title> Expressibility and the Problem of Efficient Text Planning. </title> <publisher> Frances Pinter, </publisher> <year> 1992. </year>
Reference-contexts: All syntactically correct expressions have a compositional semantic interpretation and can be realized as a surface text provided corresponding realization rules are defined. Sharing the IR definitions between the text organization and the realization component thus avoids problems of realizability described in <ref> [ Meteer, 1992 ] </ref> . 3.3 Text organization The goal of text organization in our context is to retrieve and express, in terms suitable for the definition of the IR, (1) report specifications provided by the user, (2) the relevant domain data accessed from the database according to these specifications, including
Reference: [ Penman, 1989 ] <author> Project Penman. penman documentation: </author> <title> the primer, the user guide, the reference manual, and the Nigel manual. </title> <type> Technical report, </type> <institution> USC/Information Sciences Institute, Marina del Rey, </institution> <address> CA, </address> <year> 1989. </year>
Reference-contexts: We are convinced that shallow generation systems will have a similar impact on the development of feasible applications as shallow analyzers. 2.2 Potential shortcomings of approaches to surface realization Current approaches to surface realization are mostly in-depth, based on general, linguistically motivated, and widely reusable realization components, such as Penman <ref> [ Penman, 1989 ] </ref> , KPML [ Bate-man, 1997 ] , and SURGE [ Elhadad and Robin, 1996 ] . These components are domain-independent and based on sound linguistic principles.
Reference: [ Reiter and Mellish, 1993 ] <author> Ehud Reiter and Chris Mellish. </author> <title> Optimizing the costs and benefits of natural language generation. </title> <booktitle> In Proc. 13th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1164-1169, </pages> <address> Chambery, France, </address> <year> 1993. </year>
Reference-contexts: According to Reiter and Mellish, shallow techniques (which they call "intermediate") are appropriate as long as corresponding in-depth approaches are poorly understood, less efficient, or more costly to develop <ref> [ Reiter and Mellish, 1993 ] </ref> . <p> If an action fails, backtracking can be invoked flexibly and efficiently using memoization techniques (see [ Busemann, 1996 ] ). 4 Costs and Benefits As Reiter and Mellish note, the use of shallow techniques needs to be justified through a cost-benefit analysis <ref> [ Reiter and Mellish, 1993 ] </ref> . We specify the range of possible applications our approach is useful for, exemplified by the report generator developed for the TEMSIS project.
Reference: [ Reiter et al., 1995 ] <editor> Ehud Reiter, Chris Mellish, and John Levine. </editor> <title> Automatic generation of technical documentation. </title> <journal> Applied Artificial Intelligence, </journal> <volume> 9, </volume> <year> 1995. </year>
Reference-contexts: This layer allows for the use of existing software with well-defined interfaces, often reducing the development effort for surface realization considerably. Template-based techniques recently had some sort of revival through several application-oriented projects such as idas <ref> [ Reiter et al., 1995 ] </ref> , that combine pre-defined surface expressions with freely generated text in one or another way. However, the benefits of both surface realization components and template-based techniques are still limited from an application-oriented perspective. <p> Since then, various shallow methods including canned text parts and some template-based techniques have been utilized, e.g. in CogentHelp [ White and Caldwell, 1997 ] , in the system described in [ Cawsey et al., 1995 ] , and in idas <ref> [ Reiter et al., 1995 ] </ref> .
Reference: [ Shieber et al., 1983 ] <author> Stuart Shieber, Hans Uszkoreit, Fernando Pereira, Jane Robinson, and Mabry Tyson. </author> <title> The formalism and implementation of PATR-II. </title> <editor> In Barbara J. Grosz and Mark E. Stickel, editors, </editor> <booktitle> Research on Interactive Acquisition and Use of Knowledge, </booktitle> <pages> pages 39-79. </pages> <institution> AI Center, SRI International, </institution> <address> Menlo Park, CA., </address> <year> 1983. </year>
Reference-contexts: In certain cases, the omission of an IR element would suggest a different sentence structure, which is accounted for by defining alternative TGL rules with appropriate tests for the presence of some IR element. Agreement relations are encoded into TGL by virtue of a PATR style feature percolation mechanism <ref> [ Shieber et al., 1983 ] </ref> . The rules can be annotated by equations that either assert equality of a feature's value at two or more constituents, or introduce a feature value at a constituent.
Reference: [ White and Caldwell, 1997 ] <author> Michael White and David E. Caldwell. CogentHelp: </author> <title> NLG meets SE in a tool for authoring dynamically generated on-line help. </title> <booktitle> In Proc. 5th Conference on Applied Natural Language Processing, </booktitle> <pages> pages 257-264, </pages> <address> Washington, DC., </address> <year> 1997. </year>
Reference-contexts: Since then, various shallow methods including canned text parts and some template-based techniques have been utilized, e.g. in CogentHelp <ref> [ White and Caldwell, 1997 ] </ref> , in the system described in [ Cawsey et al., 1995 ] , and in idas [ Reiter et al., 1995 ] .
References-found: 14

