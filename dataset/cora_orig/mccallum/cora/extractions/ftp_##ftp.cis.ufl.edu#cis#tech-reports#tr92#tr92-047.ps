URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-047.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Abstract-found: 0
Intro-found: 1
Reference: [ANW92] <author> E. Anwar. </author> <title> Supporting complex events and rules in an oodbms: A seamless approach. </title> <type> Master's thesis, </type> <institution> CIS Department, University of Florida, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: This project extends the results obtained in HiPAC [C + 89] to expressive event specification language and its implementation [CM91], distributed situation monitoring [CG91], seamless integration of ECA rules into a DBPL <ref> [ANW92] </ref>, communication among application processes using active database paradigm. The long term objective is to use the resulting system: i) as a basis for a self-monitoring (or adaptive) DBMS, ii) to provide support for cooperative problem solving [CNTK90], and iii) to support multi-media active DBMS for scientific applications. <p> Three contexts - recent, chronicle, and cumulative were introduced to match the semantics required for widely understood classes of applications. Snoop is being implemented in the context of an OODBMS. 2.2 Seamless integration of ECA Rules into an OODBMS In <ref> [ANW92] </ref> we classify objects into passive, reactive, and notifiable types. Passive objects are conventional C++ objects. Reactive objects generate primitive events when their methods are invoked. Notifiable objects are recipients of events generated by reactive objects.
Reference: [ARR92] <author> Arroyo, J. A. </author> <title> The Design and Implementation of K.1: A Third Generation Database Programming Language, </title> <type> Master's Thesis, </type> <institution> CIS Department, University of Florida, </institution> <year> 1992. </year>
Reference-contexts: The language also contains the traditional computational constructs such as If-Then-Else, do loops, case statements, etc., to make the language computationally complete. A compiler for a version of K and its supporting KBMS have been developed <ref> [SHY92, ARR92] </ref>. In K.1, a rule consists of the following 4 parts: 1) Trigger: Trigger condition and trigger time, 2) Condition: a complex object pattern, 3) Action: Action to be performed when the condition is satisfied, and 4) Otherwise: Action to be performed when the condition is not satisfied.
Reference: [ASL89] <author> Alashqur, A. M., Su, S. Y. W., and Lam, H. OQL: </author> <title> A Query Language for Manipulating Object-oriented Databases, </title> <booktitle> Proc. of VLDB Conference, </booktitle> <year> 1989, </year> <pages> pp. 433-442. </pages>
Reference-contexts: K provides high-level modeling constructs to capture complex structural and behavioral semantics in terms of object classes, associations, methods and knowledge rules offered by the OSAM* model. It also contains set-oriented retrieval and manipulation constructs which use pattern-based specifications <ref> [ASL89] </ref> instead of the traditional attribute-based specification found in the existing relational query languages. The language also contains the traditional computational constructs such as If-Then-Else, do loops, case statements, etc., to make the language computationally complete.
Reference: [ASL90] <author> Alashqur, A. M., Su, S. Y. W., and Lam, H. </author> <title> A Rule-based Language for Deductive Object-oriented databases, </title> <booktitle> Proc. of the 6th Int'l Conf. on Data Engineering, </booktitle> <year> 1990, </year> <pages> pp. 58-67. </pages>
Reference-contexts: Activation of a rule may trigger other rules. The above features make the KBMS an active KBMS. Documentations on the design and implementation of the knowledge rule specification language and the KBMS can be found in <ref> [ASL90, SA91, LAM89, SL90, LAM92] </ref>. 4.2 A High-level Knowledge Base Programming Language K Research is being carried out to develop a high-level knowledge base programming language called K [SS91].
Reference: [BHE92] <author> Bhethanabotla, Shyam S. </author> <title> Design and Implementation of a Distributed Object Manager, </title> <institution> Master of Engineering Thesis, Electrical Engineering, University of Florida, </institution> <year> 1992. </year>
Reference-contexts: Research is being carried out in Parallel and Distributed Active OOKBMS. In this project, a parallel query processor and parallel object manager have been implemented <ref> [GOR91, GOP92, BHE92] </ref>. It uses wavefront algorithms [TSL90, SCL91]. A parallel rule processor for object processing is being built on top of the parallel query processor. Based on the fact that the rules are often semantically related and they have inter-dependencies, semantic rule structures are used instead of isolated rules.
Reference: [C + 89] <author> S. Chakravarthy et al. HiPAC: </author> <title> A Research Project in Active, Time-Constrained Database Management, </title> <type> Final Report. Technical Report XAIT-89-02, </type> <address> XAIT, Cambridge, MA, </address> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: The emphasis of this project is on the systems and research issues in the context of an object-oriented active DBMS. This project extends the results obtained in HiPAC <ref> [C + 89] </ref> to expressive event specification language and its implementation [CM91], distributed situation monitoring [CG91], seamless integration of ECA rules into a DBPL [ANW92], communication among application processes using active database paradigm. <p> Only recent context for parameter computation is currently sup-ported. This work, in summary, combines the strengths of the approaches taken in Ode and ADAM and further extends them in several significant ways. 2.3 Extended Relational Algebra (ERA) One of the optimization techniques for the Changes operator proposed in HiPAC <ref> [C + 89] </ref> was incremental evaluation. ERA [CG91] provides a mathematical basis for evaluating changes to arbitrary, non-aggregate expressions of relational algebra. Incremental versions for all relational operators (select, project, join, union, and difference) were developed and their correctness shown. Optimizing transformations using incremental versions of operators have been developed.
Reference: [CBM91] <author> S. Chakravarthy and R. Blanco-Mora. </author> <title> Supporting very large production systems using active dbms abstraction. </title> <type> Technical Report UF-CIS TR-91-25, </type> <institution> CIS Department, University of Florida, </institution> <month> Sep. </month> <year> 1991. </year>
Reference-contexts: Optimizing transformations using incremental versions of operators have been developed. The restriction on the chain rule developed in HiPAC was relaxed to obtain a generalized chain rule. Finally, alternative ways of optimizing expressions with the Changes operator were developed and analyzed. 2.4 AI and Database Integration Our approach <ref> [CBM91] </ref> to AI and Database integration is to support production rule systems on a shared database. Towards this end, we developed a methodology for translating an OPS5 class of production rule applications into relations and triggers; execution equivalence (assuming the same conflict resolution strategy) is guaranteed.
Reference: [CG91] <author> S. Chakravarthy and S. Garg. </author> <title> Extended relational algebra (era): for optimizing situations in active databases. </title> <type> Technical Report UF-CIS TR-91-24, </type> <institution> CIS Department, University of Florida, </institution> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: The emphasis of this project is on the systems and research issues in the context of an object-oriented active DBMS. This project extends the results obtained in HiPAC [C + 89] to expressive event specification language and its implementation [CM91], distributed situation monitoring <ref> [CG91] </ref>, seamless integration of ECA rules into a DBPL [ANW92], communication among application processes using active database paradigm. <p> This work, in summary, combines the strengths of the approaches taken in Ode and ADAM and further extends them in several significant ways. 2.3 Extended Relational Algebra (ERA) One of the optimization techniques for the Changes operator proposed in HiPAC [C + 89] was incremental evaluation. ERA <ref> [CG91] </ref> provides a mathematical basis for evaluating changes to arbitrary, non-aggregate expressions of relational algebra. Incremental versions for all relational operators (select, project, join, union, and difference) were developed and their correctness shown. Optimizing transformations using incremental versions of operators have been developed.
Reference: [CM91] <author> S. Chakravarthy and D. Mishra. </author> <title> An event specification language (snoop) for active databases and its detection. </title> <type> Technical Report UF-CIS TR-91-23, </type> <institution> CIS Department, University of Florida, </institution> <month> Sep. </month> <year> 1991. </year>
Reference-contexts: The emphasis of this project is on the systems and research issues in the context of an object-oriented active DBMS. This project extends the results obtained in HiPAC [C + 89] to expressive event specification language and its implementation <ref> [CM91] </ref>, distributed situation monitoring [CG91], seamless integration of ECA rules into a DBPL [ANW92], communication among application processes using active database paradigm. <p> Below, we highlight some of the results obtained so far. 2.1 Snoop Snoop <ref> [CM91] </ref> is an expressive model independent event specification language. We have defined an event precisely and distinguished between an event and a condition. We proposed an event hierarchy consisting of primitive and composite (or complex) events. Primitive events are further classified into database, time, and external/abstract events.
Reference: [CNTK90] <author> S. Chakravarthy, S. B. Navathe, A. Tanaka, and S. Karlapalem. </author> <title> The cooperative problem solving approach: A database-centered approach. </title> <editor> In S. M. Deen, editor, </editor> <booktitle> Cooperative Knowledge Based Systems, </booktitle> <pages> pages 30-52. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: The long term objective is to use the resulting system: i) as a basis for a self-monitoring (or adaptive) DBMS, ii) to provide support for cooperative problem solving <ref> [CNTK90] </ref>, and iii) to support multi-media active DBMS for scientific applications. Below, we highlight some of the results obtained so far. 2.1 Snoop Snoop [CM91] is an expressive model independent event specification language. We have defined an event precisely and distinguished between an event and a condition.
Reference: [FOR82] <author> C. L. Forgy. </author> <title> Rete: A fast algorithm for the many pattern/many object pattern match problem. </title> <journal> Artificial Intelligence, </journal> <volume> 19 </volume> <pages> 17-37, </pages> <year> 1982. </year>
Reference-contexts: Previous work on Ariel has focussed on efficient rule condition testing, including 1. fast testing of new tuple values against a large number of single-relation selection conditions [HCKW90], 2. comparison of the Rete <ref> [FOR82] </ref> and TREAT [MIR87] algorithms for database rule condition testing [WH92], and 3. design of an integrated active database system based on a variation of the TREAT algorithm called A-TREAT that is optimized for the database environment [HAN92].
Reference: [GOP92] <author> Gopalan, A. </author> <title> Transaction Management and Recovery in a Distributed Object-oriented Database System, </title> <institution> Master of Science Thesis, Electrical Engineering, University of Florida, </institution> <year> 1992. </year>
Reference-contexts: Research is being carried out in Parallel and Distributed Active OOKBMS. In this project, a parallel query processor and parallel object manager have been implemented <ref> [GOR91, GOP92, BHE92] </ref>. It uses wavefront algorithms [TSL90, SCL91]. A parallel rule processor for object processing is being built on top of the parallel query processor. Based on the fact that the rules are often semantically related and they have inter-dependencies, semantic rule structures are used instead of isolated rules.
Reference: [GOR91] <author> Gorur, Arun S. </author> <title> Implementation of a Query Processor on a Multiprocessor Network, </title> <institution> Master of Science Thesis, Electrical Engineering Department, University of Florida, </institution> <year> 1991. </year>
Reference-contexts: Research is being carried out in Parallel and Distributed Active OOKBMS. In this project, a parallel query processor and parallel object manager have been implemented <ref> [GOR91, GOP92, BHE92] </ref>. It uses wavefront algorithms [TSL90, SCL91]. A parallel rule processor for object processing is being built on top of the parallel query processor. Based on the fact that the rules are often semantically related and they have inter-dependencies, semantic rule structures are used instead of isolated rules.
Reference: [HAN92] <author> Eric N. Hanson. </author> <title> Rule condition testing and action execution in Ariel. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 49-58, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: a large number of single-relation selection conditions [HCKW90], 2. comparison of the Rete [FOR82] and TREAT [MIR87] algorithms for database rule condition testing [WH92], and 3. design of an integrated active database system based on a variation of the TREAT algorithm called A-TREAT that is optimized for the database environment <ref> [HAN92] </ref>. Our current work is examining: 1. use of optimization techniques to build a hybrid Rete-TREAT discrimination network tuned for a particular database, set of rules, and update pattern, and 2. reliable transmission of requests from rule actions to application programs.
Reference: [HCKW90] <author> Eric N. Hanson, Moez Chaabouni, Chang-ho Kim, and Yu-wang Wang. </author> <title> A predicate matching algorithm for database rule systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 271-280, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Previous work on Ariel has focussed on efficient rule condition testing, including 1. fast testing of new tuple values against a large number of single-relation selection conditions <ref> [HCKW90] </ref>, 2. comparison of the Rete [FOR82] and TREAT [MIR87] algorithms for database rule condition testing [WH92], and 3. design of an integrated active database system based on a variation of the TREAT algorithm called A-TREAT that is optimized for the database environment [HAN92].
Reference: [LSR92] <author> Lam, H., Su, S. Y. W., Ruhela, V., Pant, S., Ju, S. M., Sharma, M., and Prasad, N. GTOOLS: </author> <title> An Active GUI Toolset for an Object-oriented KBMS, </title> <journal> Int'l Journal of Computer System Sciences and Engineering, </journal> <volume> Vol 7, No. 2, </volume> <year> 1992, </year> <pages> pp. 69-85. </pages>
Reference: [MIR87] <author> Daniel P. Miranker. </author> <title> TREAT: A better match algorithm for AI production systems. </title> <booktitle> In Proceedings of AAAI 87 Conference on Artificial Intelligence, </booktitle> <pages> pages 42-47, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: Previous work on Ariel has focussed on efficient rule condition testing, including 1. fast testing of new tuple values against a large number of single-relation selection conditions [HCKW90], 2. comparison of the Rete [FOR82] and TREAT <ref> [MIR87] </ref> algorithms for database rule condition testing [WH92], and 3. design of an integrated active database system based on a variation of the TREAT algorithm called A-TREAT that is optimized for the database environment [HAN92].
Reference: [RS88] <author> Raschid, L. and Su, S.Y.W. </author> <title> A Transaction-Oriented Mechanism to Control Processing in a Knowledge Base Management System, </title> <booktitle> Proceedings of the Second Int'l Conf. on Expert Database Systems, </booktitle> <year> 1988, </year> <pages> pp. 353-373. </pages>
Reference-contexts: reliable, and efficient, they can be used as an effective tool in large-scale transaction processing systems. 4 Active Object-oriented Knowledge Base Management Systems Another major research emphasis is the development of active KBMS concepts and techniques. 4.1 An Active KBMS Based on the OSAM* Model The design of the KBMS <ref> [SR88, RS88] </ref> was based on the object-oriented paradigm. It features an object-oriented semantic association model OSAM* [SKL89] which provides strong support for semantic association types and knowledge rule specification and processing facilities, in addition to the traditional features of the OO paradigm.
Reference: [SA91] <author> Su, S. Y. W., and Alashqur, A. M. </author> <title> A Pattern-based constraint Specification Language for Object-oriented Databases, </title> <booktitle> Proc. of IEEE COMPCON 91, </booktitle> <year> 1991. </year>
Reference-contexts: Activation of a rule may trigger other rules. The above features make the KBMS an active KBMS. Documentations on the design and implementation of the knowledge rule specification language and the KBMS can be found in <ref> [ASL90, SA91, LAM89, SL90, LAM92] </ref>. 4.2 A High-level Knowledge Base Programming Language K Research is being carried out to develop a high-level knowledge base programming language called K [SS91].
Reference: [SCL91] <author> Su, Stanley Y.W., Chen, Yaw-Huei, and Lam, Herman. </author> <title> Multiple Wavefront Algorithms for Pattern-based Processing of Object-oriented Databases, </title> <booktitle> Proc. of the Int'l Conf. on PDIS, </booktitle> <year> 1991, </year> <pages> pp. 46-55. </pages>
Reference-contexts: Research is being carried out in Parallel and Distributed Active OOKBMS. In this project, a parallel query processor and parallel object manager have been implemented [GOR91, GOP92, BHE92]. It uses wavefront algorithms <ref> [TSL90, SCL91] </ref>. A parallel rule processor for object processing is being built on top of the parallel query processor. Based on the fact that the rules are often semantically related and they have inter-dependencies, semantic rule structures are used instead of isolated rules.
Reference: [SHY92] <author> Shyy, Y. M. </author> <title> The Design and Implementation of a Knowledge Base Programming Language for Evolutionary Prototyping of Software Systems, </title> <type> Ph.D. Dissertation, </type> <institution> CIS Department, University of Florida, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: The language also contains the traditional computational constructs such as If-Then-Else, do loops, case statements, etc., to make the language computationally complete. A compiler for a version of K and its supporting KBMS have been developed <ref> [SHY92, ARR92] </ref>. In K.1, a rule consists of the following 4 parts: 1) Trigger: Trigger condition and trigger time, 2) Condition: a complex object pattern, 3) Action: Action to be performed when the condition is satisfied, and 4) Otherwise: Action to be performed when the condition is not satisfied.
Reference: [SKL89] <author> Su, S.Y.W., Krishnamurthy, V., Lam, H. </author> <title> An Object-Oriented Semantic Association Model (OSAM*)for Modeling CAD/CAM Databases, </title> <booktitle> Chapter 17 in Artificial Intelligence: Manufacturing Theory and Practice, </booktitle> <institution> Institute of Industrial Engineers, Industrial Engineering and Management Press, </institution> <address> Norcross, GA, </address> <year> 1989, </year> <pages> pp. 463-494. </pages>
Reference-contexts: It features an object-oriented semantic association model OSAM* <ref> [SKL89] </ref> which provides strong support for semantic association types and knowledge rule specification and processing facilities, in addition to the traditional features of the OO paradigm. Five system-defined association types are provided to capture different semantic relationships existing among object classes and their object instances.
Reference: [SL90] <author> Su, S. Y. W. and Lam, H. </author> <title> Object-oriented Knowledge Base Management Technology for Improving Productivity and Competitiveness in Manufacturing, </title> <booktitle> Proc. of the 16th NSF Grantees Conference on Design and Manufacturing Systems Research, </booktitle> <address> AZ., </address> <month> Jan. </month> <pages> 8-12, </pages> <year> 1990, </year> <pages> pp. 161-167. </pages>
Reference-contexts: Activation of a rule may trigger other rules. The above features make the KBMS an active KBMS. Documentations on the design and implementation of the knowledge rule specification language and the KBMS can be found in <ref> [ASL90, SA91, LAM89, SL90, LAM92] </ref>. 4.2 A High-level Knowledge Base Programming Language K Research is being carried out to develop a high-level knowledge base programming language called K [SS91].
Reference: [SLH92] <author> Su, S. Y. W., Lam, H. Hardwick, M., Spooner, D., Goldschmidt, A. and Chida, J. </author> <title> An Integrated Object-oriented Knowledge Base Management System OSAM*.KBMS/ROSE for Supporting Design and Manufacturing, </title> <booktitle> Proc. of the IEEE Second Int. Conf. on Systems Integration, </booktitle> <year> 1992, </year> <pages> pp. 152-161. </pages>
Reference: [SR85] <author> Su, S. Y. W. and Raschid, L. </author> <title> Incorporating Knowledge Rules in a Semantic Data Model: An Approach to Integrated Knowledge Management, </title> <editor> A. I. </editor> <booktitle> Applications conf., </booktitle> <address> Miami, </address> <month> Dec. </month> <year> 1985. </year>
Reference: [SS91] <author> Shyy, Yuh-Ming and Su, Stanley Y.W. </author> <title> K: A High-level Knowledge Base Programming Language for Advanced Database Applications in Proc. </title> <booktitle> of ACM SIGMOD 1991, </booktitle> <address> Denver, CO., </address> <month> May 29-31, </month> <year> 1991, </year> <pages> pp. 338-347. </pages>
Reference-contexts: Documentations on the design and implementation of the knowledge rule specification language and the KBMS can be found in [ASL90, SA91, LAM89, SL90, LAM92]. 4.2 A High-level Knowledge Base Programming Language K Research is being carried out to develop a high-level knowledge base programming language called K <ref> [SS91] </ref>. K provides high-level modeling constructs to capture complex structural and behavioral semantics in terms of object classes, associations, methods and knowledge rules offered by the OSAM* model.
Reference: [TSL90] <author> Thakore, A. K., Su, S. Y. W., Lam, H. and Shea, D. G. </author> <title> Asynchronous Parallel Processing of Object Bases using Multiple Wavefronts, </title> <booktitle> Proc. of the Int. Conf. on Parallel Processing. </booktitle> <address> Chicago, IL., </address> <month> Aug. </month> <year> 1990, </year> <pages> pp. 127-135. </pages>
Reference-contexts: Research is being carried out in Parallel and Distributed Active OOKBMS. In this project, a parallel query processor and parallel object manager have been implemented [GOR91, GOP92, BHE92]. It uses wavefront algorithms <ref> [TSL90, SCL91] </ref>. A parallel rule processor for object processing is being built on top of the parallel query processor. Based on the fact that the rules are often semantically related and they have inter-dependencies, semantic rule structures are used instead of isolated rules.
Reference: [WH92] <author> Yu-wang Wang and Eric N. Hanson. </author> <title> A performance comparison of the Rete and TREAT algorithms for testing database rule conditions. </title> <booktitle> In Proc. IEEE Data Eng. Conf., </booktitle> <month> February </month> <year> 1992. </year>
Reference-contexts: Previous work on Ariel has focussed on efficient rule condition testing, including 1. fast testing of new tuple values against a large number of single-relation selection conditions [HCKW90], 2. comparison of the Rete [FOR82] and TREAT [MIR87] algorithms for database rule condition testing <ref> [WH92] </ref>, and 3. design of an integrated active database system based on a variation of the TREAT algorithm called A-TREAT that is optimized for the database environment [HAN92].
Reference: [YSL91] <author> Yaseen R., Su, Stanley Y.W. and Lam, Herman. </author> <title> An Extensible Kernel Object Management System, </title> <booktitle> in Proc. of OOPSLA '91, </booktitle> <year> 1991, </year> <pages> pp. 247-263. </pages>
Reference-contexts: Five system-defined association types are provided to capture different semantic relationships existing among object classes and their object instances. Additional (user-defined) association types are introduced by modeling association types as object classes and their semantic properties by methods and knowledge rules defined in these classes <ref> [YSL91] </ref>. In addition to structural properties and methods, knowledge rules with triggers are defined in object classes as part of their behavioral properties. They capture semantic integrity, security, and other business and organizational constraints found in an application domain.
References-found: 29

