URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1993/1993-20.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Piecewise Linear Paths Among Convex Obstacles  
Author: Mark de Berg Jir Matousek Otfried Schwarzkopf 
Address: Postbus 80.089, 3508 TB Utrecht, the Netherlands  Malostranske nam. 25, 118 00 Praha 1, Czech Republic and  Arnimallee 2-6, W 1000 Berlin 33, Germany  Postbus 80.089, 3508 TB Utrecht, the Netherlands  
Affiliation: Vakgroep Informatica, Universiteit Utrecht,  Katedra aplikovane matematiky, Universita Karlova,  Institut fur Informatik, Freie Universitat Berlin  Vakgroep Informatica, Universiteit Utrecht,  
Abstract: Let B be a set of n arbitrary (possibly intersecting) convex obstacles in R d . It is shown that any two points which can be connected by a path avoiding the obstacles can also be connected by a path consisting of O(n (d1)bd=2+1c ) segments. The bound cannot be improved below (n d ); thus in R 3 , the answer is between n 3 and n 4 . For open disjoint convex obstacles, a fi(n) bound is proved. By a well-known reduction, the general case result also upper bounds the complexity for a translational motion of an arbitrary convex robot among convex obstacles. In the planar case, asymptotically tight bounds and efficient algorithms are given.
Abstract-found: 1
Intro-found: 1
Reference: [AY89] <author> H. Alt and C. K. Yap. </author> <title> Motion planning in cl-environments: A case for a realistic model. </title> <booktitle> In Proc. 1st Workshop Algorithms Data Struct. (WADS), volume 382 of Lecture Notes in Computer Science, </booktitle> <pages> pages 373-380. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: An extension of the above quoted algorithms to the case of non-linear obstacle boundaries (circular arcs, say) appears nontrivial, while our approach only requires a relatively straightforward implementation of the oracle. Such non-linear obstacles are considered important in practical situations, see e.g. Alt and Yap <ref> [AY89] </ref>. Another elegant method of the retraction type is due to Canny and Donald [CD88]. Roughly speaking, for every pair of features of the obstacles, they define a "generalized bisector", and they look for the path in a subset of the environment defined by these bisectors.
Reference: [AS93] <author> B. Aronov and M. Sharir. </author> <note> Preliminary paper draft and a lecture of B. Aronov at Dagstuhl Seminar Computational Geometry, </note> <month> March </month> <year> 1993. </year>
Reference-contexts: These bounds for the total complexity of the environment are of approximately the same order as our bound for the path complexity. Both results are due to Aronov and Sharir <ref> [AS93] </ref>, the three-dimensional one being quite recent. It would be interesting to show a similar result also in higher dimensions.
Reference: [BDS + 92] <author> J.-D. Boissonnat, O. Devillers, R. Schott, M. Teillaud and M. Yvinec. </author> <title> Applications of random sampling to on-line algorithms in computational geometry. </title> <journal> Discrete Comput. </journal> <volume> Geometry 8 </volume> <pages> 51-71, </pages> <year> 1992. </year> <month> 19 </month>
Reference-contexts: The first phase of the algorithm|the computation of the trapezoidal map|is done using a randomized incremental algorithm that follows the abstract framework of Boisson-nat et al. <ref> [BDS + 92] </ref>. The regions in their framework are the trapezoids; they are defined by at most four obstacles. <p> When the last object has been added the trapezoidal map that we seek is complete. In a generic step in this algorithm we have to find the trapezoids in the current map that are intersected by (in the terminology of <ref> [BDS + 92] </ref>: are in conflict with) the newly added obstacle, and we have to create the new trapezoids that arise. (Note that in the creation phase some trapezoids may have to be merged; to this end one has to maintain the adjacency relation between the trapezoids.) The basic operation in <p> We know that the number of trapezoids in the current map at any point during the algorithm is linear in the number of already added obstacles. It then follows from the general results of Boissonnat et al. <ref> [BDS + 92] </ref> that expectation of the total number of trapezoid-obstacle tests is O (n log n). It also follows that the expected total number of trapezoids that is generated during the process is O (n).
Reference: [CD85] <author> L. P. Chew and R. L. Drysdale, III. </author> <title> Voronoi diagrams based on convex distance functions. </title> <booktitle> In Proc. 1st Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 235-244, </pages> <year> 1985. </year>
Reference-contexts: This Voronoi diagram captures the connectivity information about the free space, and can be used to perform motion planning. The complexity of this diagram is in O (kn + m) as well, and it can be computed in time O (km log (k + m)), see <ref> [CD85] </ref>. Recently, however, Sifrony [Sif89], has shown that the diagram can actually be stored in space O (k + m) such that motion planning queries which ask for the existence of a path can be answered in time O (log m).
Reference: [CD88] <author> J. Canny and B. R. Donald. </author> <title> Simplified Voronoi diagrams. </title> <journal> Discrete Comput. Geom., </journal> <volume> 3 </volume> <pages> 219-236, </pages> <year> 1988. </year>
Reference-contexts: Such non-linear obstacles are considered important in practical situations, see e.g. Alt and Yap [AY89]. Another elegant method of the retraction type is due to Canny and Donald <ref> [CD88] </ref>. Roughly speaking, for every pair of features of the obstacles, they define a "generalized bisector", and they look for the path in a subset of the environment defined by these bisectors. <p> In some sense their method is more general, since it can also handle rotational motions etc. On the other hand, with our more restricted assumptions, we are able to get results for completely general convex obstacles, while the result of <ref> [CD88] </ref> is (necessarily) expressed in terms of features of the obstacles.
Reference: [CEG + 91] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, M. Sharir, and J. Snoeyink. </author> <title> Computing a face in an arrangement of line segments. </title> <booktitle> In Proc. 2nd ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 441-448, </pages> <year> 1991. </year>
Reference-contexts: This cell has complexity O (n 2 ff (n)) and can be computed in expected time O (n 2 ff (n) log n), where ff (n) is the functional inverse of the Ackermann-function, see <ref> [CEG + 91] </ref>. Once the cell is computed, it is not difficult to compute a path with O (n 2 ) links in time linear in the complexity of the cell.
Reference: [DK85] <author> D. P. Dobkin and D. G. Kirkpatrick. </author> <title> A linear algorithm for determining the separation of convex polyhedra. </title> <journal> J. Algorithms, </journal> <volume> 6 </volume> <pages> 381-392, </pages> <year> 1985. </year>
Reference-contexts: In particular, if the obstacles are polygons with m vertices in total, one can implement the oracle operations in time Q = O (log m), assuming that the vertices of each polygon are stored in an array in a clockwise sorted order <ref> [DK85] </ref>. Hence, a path with O (n) links can be found in O (n log m) time in this situation. The motion planning problem for a convex robot. Here we come back to the problem which motivated our research. <p> Let us consider the case where the obstacles are convex polygons with m vertices in total and R is a convex k-gon. We assume that we are given arrays that store the vertices of the polygons in order. Dobkin and Kirkpatrick <ref> [DK85] </ref> have shown that in that case the oracle for the original bodies B fl i and R can be implemented to work in O (log (m + k)) time. We now turn our attention to the oracle on the Minkowski differences. <p> Let us first consider the case where B i and B j do not intersect, and we want to find a separating line. As noted above, Dobkin and Kirkpatrick <ref> [DK85] </ref> have given an algorithm for computing a separating line for two convex polygons in logarithmic time. However, we cannot afford to compute each B i explicitly. A closer look at their algorithm reveals that it roughly works as follows. <p> We conclude that the time needed for a basic operation in the algorithm of <ref> [DK85] </ref> is O (log (k + m)), leading to a total time for the oracle of O (log 2 (k + m)). In the forgoing we have assumed that B i and B j are disjoint.
Reference: [KLPS86] <author> K. Kedem, R. Livne, J. Pach, and M. Sharir. </author> <title> On the union of Jordan regions and collision-free translational motion amidst polygonal obstacles. </title> <journal> Discrete Comput. Geom., </journal> <volume> 1 </volume> <pages> 59-71, </pages> <year> 1986. </year>
Reference-contexts: For the translational motion of a convex robot among convex obstacles in the plane, this approach was exploited by Kedem et al. <ref> [KLPS86] </ref>. <p> The complement of the union of the new obstacles, i.e. the region R 2 n (int B), is called the free space; we denote it by FP . Kedem et al. <ref> [KLPS86] </ref> have shown that the obstacles in B are pseudo-discs, i.e. their boundaries intersect in at most two points and the total number of such reflex vertices on the boundary of the union of B is O (n). This allows us to compute a linear-size "trapezoidal" map for FP .
Reference: [KM91] <author> T. C. Kao and D. M. Mount. </author> <title> An algorithm for computing compacted voronoi diagrams defined by convex distance functions. </title> <booktitle> In Third Canadian Conference on Computational Geometry, </booktitle> <pages> pages 104-109, </pages> <year> 1991. </year>
Reference-contexts: The running time for the computation of the compacted diagram is still O (mk log n). Furthermore, Kao and Mount <ref> [KM91] </ref> have shown that a path can actually be computed in time O (m log m log 2 k). Although they can describe it in space O (k + m), the path computed by this method still has complexity fi (km).
Reference: [Lat91] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: Our approach can bring a substantial improvement e.g., when the piecewise linear surface arises as an approximation of some curved convex shape. The motion planning problem has received considerable attention; we mention only the works more or less directly related to our results, referring e.g., to <ref> [Lat91, SS90] </ref> for a wider background and literature. A usual approach to the motion planning problem is to compute a full combinatorial description of the free space (the set of all admissible configurations of the robot).
Reference: [MS90] <author> N. Miller and M. Sharir, </author> <title> Efficient randomized algorithm for constructing the union of fat triangles and of pseudodiscs. </title> <type> Unpublished manuscript. </type>
Reference-contexts: For the reader's convenience, we briefly sketch the way the 12 algorithm works in our case. (Let us remark that a randomized incremental algorithm to compute the union of a set of pseudo-discs has already been presented by Miller and Sharir <ref> [MS90] </ref>. Their algorithm is basically the same as the one that we sketch next.
Reference: [Mun84] <author> J. R. Munkers. </author> <title> Elements of algebraic topology. </title> <publisher> Addison-Wesley, </publisher> <year> 1984. </year>
Reference-contexts: Thus p and q are separated also by the bodies of B. The formal proof uses notions and results of algebraic topology (homology and coho-mology theory), which can be found e.g. in <ref> [Mun84] </ref>. Its understanding is not needed for the rest of this paper. Proof: The proof proceeds in two stages. First, we prove a similar lemma where, instead of open convex bodies, the B i 's and C i 's are compact polyhedra (which matches the assumptions of theorems we use). <p> To remedy this, we can either add a point 1 at infinity and work with R d [ f1g as a topological sphere, or we can triangulate the unbounded cells by countably many ordinary simplices. 5 We can now apply (a particular case of) the Alexander's duality theorem (see <ref> [Mun84] </ref>), and we get the 0-dimensional reduced homology group of R d nX B is (naturally) isomorphic to the (d 1)-dimensional reduced cohomology group ~ H d1 (X B ). As mentioned above, the sets of B form a covering of X B by its subcomplexes.
Reference: [Rot88] <author> J.J. Rothman. </author> <title> An introduction to algebraic topology (GTM 119). </title> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: In such a situation, it is known that the homology groups of X B and the homology groups of N (B) are isomorphic (Folkman-Leray theorem, see <ref> [Rot88] </ref>). By the universal coefficient theorem, also the cohomology groups are isomorphic, so in particular ~ H 0 (R d nX B ) ~ = ~ H d1 (N (B)).
Reference: [Sif89] <author> S. Sifrony. </author> <title> A real nearly linear algorithm for translating a convex polygon. </title> <type> Technical Report 476, </type> <address> New York University, </address> <year> 1989. </year>
Reference-contexts: The complexity of this diagram is in O (kn + m) as well, and it can be computed in time O (km log (k + m)), see [CD85]. Recently, however, Sifrony <ref> [Sif89] </ref>, has shown that the diagram can actually be stored in space O (k + m) such that motion planning queries which ask for the existence of a path can be answered in time O (log m).
Reference: [SS90] <author> J. T. Schwartz and M. Sharir. </author> <title> Algorithmic motion planning in robotics. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Algorithms and Complexity, volume A of Handbook of Theoretical Computer Science, </booktitle> <pages> pages 391-430. </pages> <publisher> Elsevier, </publisher> <address> Amsterdam, </address> <year> 1990. </year> <month> 20 </month>
Reference-contexts: Our approach can bring a substantial improvement e.g., when the piecewise linear surface arises as an approximation of some curved convex shape. The motion planning problem has received considerable attention; we mention only the works more or less directly related to our results, referring e.g., to <ref> [Lat91, SS90] </ref> for a wider background and literature. A usual approach to the motion planning problem is to compute a full combinatorial description of the free space (the set of all admissible configurations of the robot).
References-found: 15

