URL: ftp://ftp.cs.columbia.edu/reports/reports-1994/cucs-029-94.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1994.html
Root-URL: http://www.cs.columbia.edu
Title: Enveloping Sophisticated Tools into Computer-Aided Software Engineering Environments (Research Paper)  
Author: Giuseppe VALETTO Gail E. KAISER fl, Giuseppe Valetto and Gail E. Kaiser 
Keyword: Computer-Supported Cooperative Work, Environment Frameworks, Tool Enveloping, Tool Integration  
Note: c  
Address: 6, Chemin de Maupertuis 500 West 120th Street 38240 Meylan New York, NY 10027 FRANCE UNITED STATES  
Affiliation: Rank Xerox Research Centre Columbia University "Le Quartz" Department of Computer Science  
Pubnum: CUCS-029-94  
Email: giuseppe.valetto@xerox.fr kaiser@cs.columbia.edu  
Phone: +33 76615086 (212) 939-7081  
Date: 21 November 1994  
Abstract: We present a CASE-tool integration strategy based on enveloping pre-existing tools without source code modifications, recompilation, or assuming an extension language or any other special capabilities on the part of the tool. This Black Box enveloping (or wrapping) idea has been around for a long time, but was previously restricted to relatively simple tools. We describe the design and implementation of a new Black Box enveloping facility intended for sophisticated tools | with particular concern for the emerging class of groupware applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> Transcending Boundaries: </editor> <booktitle> ACM 1994 Conference on Computer Supported Cooperative Work, </booktitle> <address> Chapel Hill NC, </address> <month> October </month> <year> 1994. </year> <note> ACM Press. </note>
Reference-contexts: An important subclass is Collaborative tools, which directly support multiple users interacting with each other, such as WYSI-WIS (what-you-see-is-what-I-see) utilities, IBIS decision support and Fagin-style document inspection tools, desktop video conferencing systems, etc. (see <ref> [12, 1] </ref> for more examples). In this paper, we introduce a Multi-Tool Protocol (MTP), where Multi refers to submission of multiple tasks to the same tool instance and enabling of multiple users to interact with the same tool instance.
Reference: [2] <author> Naser S. Barghouti. </author> <title> Supporting cooperation in the marvel process-centered SDE. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 21-31, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: If so, multiple instances of the same task or several entirely different tasks can be submitted to the same persistent tool execution. Formal parameters and locking information are also listed (locks and transaction management are outside the scope of this paper, see <ref> [6, 2] </ref>). The envelope specified by the task handles the passing of arguments back and forth to/from the environment as well as the details of interaction with a tool that is already running.
Reference: [3] <author> Israel Z. Ben-Shaul. </author> <title> A Paradigm for Decentralized Process Modeling and its Realization in the oz Environment. </title> <type> PhD thesis, </type> <institution> Columbia University, Department of Computer Science, </institution> <year> 1995. </year> <title> CUCS-024-94. </title> <booktitle> In progress. </booktitle>
Reference-contexts: Acknowledgments Prof. Kathy Mckeown provided the NLP application. George Heineman conducted early experiments involving overlapping tasks submitted to emacs, and developed the "watcher" utility. Israel Ben-Shaul has extended Oz's task definition and execution facilities to support collaborative tasks <ref> [3] </ref>. Peter Skopp played a major part in designing and implementing the architectural changes needed to introduce SPCs, which will also be used for supporting low-bandwidth (modem) clients [16]. Several other members of the Programming Systems Laboratory provided useful input. [4] outlines our in-progress research.
Reference: [4] <author> Israel Z. Ben-Shaul, George T. Heineman, Steve S. Popovich, Peter D. Skopp, Andrew Z. Tong, and Giuseppe Valetto. </author> <title> Integrating groupware and process technologies in the oz environment. In Carlo Ghezzi, editor, </title> <booktitle> 9th International Software Process Workshop, </booktitle> <address> Airlie VA, October 1994. </address> <publisher> IEEE Computer Society Press. In press. </publisher> <pages> 12 </pages>
Reference-contexts: Peter Skopp played a major part in designing and implementing the architectural changes needed to introduce SPCs, which will also be used for supporting low-bandwidth (modem) clients [16]. Several other members of the Programming Systems Laboratory provided useful input. <ref> [4] </ref> outlines our in-progress research.
Reference: [5] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A paradigm for decentralized process modeling and its realization in the oz environment. </title> <booktitle> In 16th International Conference on Software Engineering, </booktitle> <pages> pages 179-188, </pages> <address> Sorrento, Italy, May 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Like SEL, by default MTP treats tools in a Black Box manner. Our initial implementation has been completed as an extension to Oz <ref> [5] </ref>. Oz is a geographically distributed process-centered CASE environment that supports interoperability among autonomously defined processes. 2 Tool Modeling The task management service needs to specify which tools require which protocol.
Reference: [6] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multi-user software development environments. </title> <journal> Computing Systems, The Journal of the USENIX Association, </journal> <volume> 6(2) </volume> <pages> 65-103, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: When the envelope terminates, it returns the results to task management, at which point the pending task continues. This is implemented in a client/server architecture, with task management, data integration and data repository services in a shared server and user interface and envelope invocation facilities supported by each client <ref> [6] </ref>. The server sends envelope names and arguments to the relevant user client for execution, and then handles other clients in a FCFS manner until the tool completes and its result arrives at the front of the server's request queue. <p> If so, multiple instances of the same task or several entirely different tasks can be submitted to the same persistent tool execution. Formal parameters and locking information are also listed (locks and transaction management are outside the scope of this paper, see <ref> [6, 2] </ref>). The envelope specified by the task handles the passing of arguments back and forth to/from the environment as well as the details of interaction with a tool that is already running.
Reference: [7] <author> Mark Dowson. </author> <title> Integrated project support with IStar. </title> <journal> IEEE Software, </journal> <volume> 4(6) </volume> <pages> 6-15, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: In this case, the environment must provide a protocol whereby envelopes <ref> [7] </ref> extract objects/files from the internal representation in the environment's repository, present these objects/files to their "wrapped" tools in the appropriate format, and provide the reverse mapping for updated data and tool return values. (In the sequel, we use the terms object and file interchangeably, since some CASE environments represent software
Reference: [8] <author> Anthony Earl. </author> <title> Principles of a reference model for computer aided software engineering environments. </title> <editor> In Fred Long, editor, </editor> <booktitle> Software Engineering Environments International Workshop on Environments, volume 467 of Lecture Notes in Computer Science, </booktitle> <pages> pages 115-129, </pages> <address> Chinon, France, </address> <month> September </month> <year> 1989. </year> <note> Springer-Verlag. </note>
Reference-contexts: Shell Envelope Language (SEL) [10] is typical of current Black Box enveloping facilities. 1 A tool integrator writes what are essentially shell scripts, using added constructs that handle the details of interfacing between the tool and data integration and repository services. (We employ the terminology of the "toaster" reference model <ref> [8] </ref>.) An SEL envelope is associated with each primitive task (primitive tasks may be grouped into aggregate tasks).
Reference: [9] <author> David Garlan and Ehsan Ilias. </author> <title> Low-cost, adaptable tool integration policies for integrated environments. </title> <editor> In Richard N. Taylor, editor, </editor> <booktitle> 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 1-10, </pages> <address> Irvine CA, </address> <month> December </month> <year> 1990. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 15(6), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: The Forest extension of Field controlled the propagation of event notifications among tools according to "policies" <ref> [9] </ref>, analogous to Oz's task management services, but had no distinct environmental front-end. It also did not address our foremost requirement, to support multi-user tools, and few message buses support multiple users | ConversationBuilder's Mbus is a notable exception [13].
Reference: [10] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a tool integration language. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 218-227, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Our goal is to augment enveloping to apply to a much wider array of tools than previously. We concentrate on the Black Box model, since it is often the only choice as well as the most difficult. Oz's Shell Envelope Language (SEL) <ref> [10] </ref> is typical of current Black Box enveloping facilities. 1 A tool integrator writes what are essentially shell scripts, using added constructs that handle the details of interfacing between the tool and data integration and repository services. (We employ the terminology of the "toaster" reference model [8].) An SEL envelope is
Reference: [11] <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti, and Israel Z. Ben-Shaul. </author> <title> Rule chaining in marvel: Dynamic binding of parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: The envelope specified by the task handles the passing of arguments back and forth to/from the environment as well as the details of interaction with a tool that is already running. We made no changes at all to Oz's task definition syntax <ref> [11] </ref>, and our approach is intended to be orthogonal to the environment's mechanism for task definition. 2 In principle, an envelope forked on one machine could invoke a tool on another, using UNIX rsh or a similar mechanism, but this would make it impractical to track the tool. 5 3 The
Reference: [12] <editor> Simon Kaplan, editor. </editor> <booktitle> Conference on Organizational Computing Systems, </booktitle> <address> Milpitas CA, </address> <month> November </month> <year> 1993. </year> <note> ACM Press. </note>
Reference-contexts: An important subclass is Collaborative tools, which directly support multiple users interacting with each other, such as WYSI-WIS (what-you-see-is-what-I-see) utilities, IBIS decision support and Fagin-style document inspection tools, desktop video conferencing systems, etc. (see <ref> [12, 1] </ref> for more examples). In this paper, we introduce a Multi-Tool Protocol (MTP), where Multi refers to submission of multiple tasks to the same tool instance and enabling of multiple users to interact with the same tool instance.
Reference: [13] <author> Simon M. Kaplan, William J. Tolone, Alan M. Carroll, Douglas P. Bogia, and Celsina Bignoli. </author> <title> Supporting collaborative software development with ConversationBuilder. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 11-20, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: It also did not address our foremost requirement, to support multi-user tools, and few message buses support multiple users | ConversationBuilder's Mbus is a notable exception <ref> [13] </ref>. Once we established loose wrapping as the overall principle on which to base our design, we analyzed the major capabilities needed to implement our tool modeling facilities (described in the previous section).
Reference: [14] <author> Steven S. Popovich. </author> <title> Rule-based process servers for software development environments. </title> <editor> In John Bots-ford, Arthur Ryman, Jacob Slonim, and David Taylor, editors, </editor> <booktitle> 1992 Centre for Advanced Studies Conference, </booktitle> <volume> volume I, </volume> <pages> pages 477-497, </pages> <address> Toronto ON, Canada, </address> <month> November </month> <year> 1992. </year> <institution> IBM Canada Ltd. Laboratory. </institution>
Reference-contexts: tools would happen to fit a framework's communication protocols (for instance, a framework may expect tools to ask permission before accessing objects, so that a policy tool or concurrency control can be considered, and/or to notify a broadcast message server when updates have been completed, for propagation to other tools <ref> [14] </ref>). * Black Box, when only binary executables are available and there is no extension language or API.
Reference: [15] <author> Steven P. Reiss. </author> <title> Connecting tools using message passing in the field environment. </title> <journal> IEEE Software, </journal> <volume> 7(4) </volume> <pages> 57-66, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Our approach may be viewed as intermediate between conventional Black Box enveloping and a broadcast message server such as Field <ref> [15] </ref>, where tools execute persistently but the server's concern is only for events of interest to tools and there are no separate "environment commands" that control tools.
Reference: [16] <author> Peter D. Skopp. </author> <title> Process centered software development on mobile hosts. </title> <type> Technical Report CUCS-035-93, </type> <institution> Columbia University Department of Computer Science, </institution> <month> October </month> <year> 1993. </year> <type> MS Thesis Proposal. </type>
Reference-contexts: Israel Ben-Shaul has extended Oz's task definition and execution facilities to support collaborative tasks [3]. Peter Skopp played a major part in designing and implementing the architectural changes needed to introduce SPCs, which will also be used for supporting low-bandwidth (modem) clients <ref> [16] </ref>. Several other members of the Programming Systems Laboratory provided useful input. [4] outlines our in-progress research.
Reference: [17] <author> E. Solomita, J. Kempf, and D. Duchamp. Xmove: </author> <title> A pseudoserver for X window movement. The X Resource, </title> <booktitle> 1(11) </booktitle> <pages> 143-170, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Most inherently multi-user tools are able to dispatch private instances of their interface to each user, but for other tools (e.g., originally single-user tools extended by our approach to a modest form of groupware) we exploited the public domain xmove utility <ref> [17] </ref>, which transfers the GUI of a tool across workstations and X terminals. Resetting the X DISPLAY variable 9 would be insufficient, since the GUI instance has to start on one monitor for one user, then move to another monitor for a second user, etc. without reinitializing the tool.
Reference: [18] <author> Kevin J. Sullivan and David Notkin. </author> <title> Reconciling environment integration and component independence. </title> <editor> In Richard N. Taylor, editor, </editor> <booktitle> SIGSOFT '90 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 22-33, </pages> <address> Irvine CA, </address> <month> December </month> <year> 1990. </year> <note> ACM Press. Special issue of Software Engineering Notes, 15(6), </note> <month> December </month> <year> 1990. </year>
Reference-contexts: similar standards probably require more effort in tool adaptation, but enable a higher scale of integration. * Grey Box, where the source code is not modified but the tool provides its own extension language or application programming interface (API) in which functions can be written to interact with the environment <ref> [18] </ref>. But relatively few tools provide such convenience.
Reference: [19] <author> Ian Thomas. </author> <title> PCTE interfaces: Supporting tools in software-engineering environments. </title> <journal> IEEE Software, </journal> <volume> 6(6) </volume> <pages> 15-23, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: In the latter case, the changes can often be implemented in a straightforward, repetitive manner, but nevertheless the source code must be available | perhaps an insurmountable difficulty when integrating COTS tools from independent vendors. The White Box approach is followed by several commercial message buses. PCTE <ref> [19] </ref> and similar standards probably require more effort in tool adaptation, but enable a higher scale of integration. * Grey Box, where the source code is not modified but the tool provides its own extension language or application programming interface (API) in which functions can be written to interact with the
References-found: 19

