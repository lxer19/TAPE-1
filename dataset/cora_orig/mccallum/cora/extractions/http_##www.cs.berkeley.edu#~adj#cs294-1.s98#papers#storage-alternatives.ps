URL: http://www.cs.berkeley.edu/~adj/cs294-1.s98/papers/storage-alternatives.ps
Refering-URL: http://www.cs.berkeley.edu/~adj/cs294-1.s98/plan.html
Root-URL: 
Title: Storage Alternatives for Mobile Computers  
Author: Fred Douglis Ramon Caceres Frans Kaashoek Kai Li Brian Marsh Joshua A. Tauber D.E. Shaw 
Date: November, 1994  
Note: To appear in the Symposium on Operating Systems Design and Implementation,  This work was performed  
Affiliation: AT&T Bell Laboratories AT&T Bell Laboratories  Massachusetts Institute of Technology Princeton University  Co. Massachusetts Institute of Technology  at Panasonic Technologies, Inc.'s Matsushita Information Technology Laboratory.  
Abstract: Mobile computers such as notebooks, subnotebooks, and palmtops require low weight, low power consumption, and good interactive performance. These requirements impose many challenges on architectures and operating systems. This paper investigates three alternative storage devices for mobile computers: magnetic hard disks, flash memory disk emulators, and flash memory cards. We have used hardware measurements and trace-driven simulation to evaluate each of the alternative storage devices and their related design strategies. Hardware measurements on an HP OmniBook 300 highlight differences in the performance of the three devices as used on the Om-nibook, especially the poor performance of version 2.00 of the Microsoft Flash File System [11] when accessing large files. The traces used in our study came from different environments, including mobile computers (Macintosh PowerBooks) and desktop computers (running Windows or HP-UX), as well as synthetic workloads. Our simulation study shows that flash memory can reduce energy consumption by an order of magnitude, compared to magnetic disk, while providing good read performance and acceptable write performance. These energy savings can translate into a 22% extension of battery life. We also find that the amount of unused memory in a flash memory card has a substantial impact on energy consumption, performance, and endurance: compared to low storage utilizations (40% full), running flash memory near its capacity (95% full) can increase energy consumption by 70-190%, degrade write response time by 30%, and decrease the lifetime of the memory card by up to a third. For flash disks, asynchronous erasure can improve write response time by a factor of 2.5. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mary Baker, Satoshi Asami, Etienne Deprit, John Ousterhout, and Margo Seltzer. </author> <title> Nonvolatile memory for fast, reliable file systems. </title> <booktitle> In Proceedings of the Fifth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 10-22, </pages> <address> Boston, MA, </address> <month> October </month> <year> 1992. </year> <note> ACM. </note>
Reference-contexts: They found that a small amount of NVRAM on each client was able to reduce client-server file write traffic by half, and NVRAM on the file server could reduce writes to disk by 20% <ref> [1] </ref>. However, the benefits of NVRAM for workstation clients did not justify its additional cost, which would be better applied toward additional DRAM.
Reference: [2] <author> Ramon Caceres, Fred Douglis, Kai Li, and Brian Marsh. </author> <title> Operating Systems Implications of Solid-State Mobile Computers. </title> <booktitle> In Proceedings of the Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 21-27, </pages> <address> Napa, CA, </address> <month> October </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: Douglis, et al. OSDI 11/94 Storage Alternatives for Mobile Computers 13 posed operating system techniques for exploiting the superior read performance of flash memory while hiding its poor write performance, particularly in a portable computer where all of DRAM is battery-backed <ref> [2] </ref>. Wu and Zwaenepoel discussed how to implement and manage a large non-volatile storage system, called eNVy, composed of NVRAM and flash memory for high-performance transaction processing.
Reference: [3] <author> Jeff Craig, </author> <month> March </month> <year> 1994. </year> <type> Personal communication. </type>
Reference-contexts: In addition to the products described in Section 3, we used the datasheet for the NEC PD4216160/L 16-Mbit DRAM chip [17]. In the case of the SunDisk device, the simulation using raw (nonmeasured) performance numbers is based upon the SunDisk sdp5 and sdp5a devices, which are newer 5-volt devices <ref> [3] </ref>. Lastly, we also simulated the Hewlett-Packard Kittyhawk 20-Mbyte hard disk, which we refer to as kh, based on its datasheet [7]. In order to manage all the traces, we simulated flash devices larger than the 10-Mbyte PCMCIA flash devices we had for the OmniBook. <p> However, throughput decreased much faster with increased space utilization. 5.3 Asynchronous Cleaning The next generation of SunDisk flash products, the sdp5a, will have the ability to erase blocks prior to writing them, in order to get higher bandwidth during the write <ref> [3] </ref>. Erasure bandwidth is 150 Kbytes/s regardless of whether new data are written to the location being erased; however, if an area has been pre-erased, it can be written at 400 Kbytes/s. We simulated to compare the sdp5a with and without asynchronous cleaning.
Reference: [4] <author> Brian Dipert and Markus Levy. </author> <title> Designing with Flash Memory. </title> <address> Annabooks, </address> <year> 1993. </year>
Reference-contexts: The system must define a policy for selecting the next segment for reclamation. One obvious discrimination metric is segment utilization: picking the next segment by finding the one with the lowest utilization (i.e., the highest amount of memory that is reusable). MFFS uses this approach <ref> [4] </ref>. More complicated metrics are possible; for example, eNVy considers both utilization and locality when cleaning flash memory [24]. The second aspect to erasure is performance. The SunDisk sdp flash disks couple erasure with writes, achieving a write bandwidth of 75 Kbytes/s.
Reference: [5] <author> Fred Douglis, P. Krishnan, and Brian Marsh. </author> <title> Thwarting the Power Hungry Disk. </title> <booktitle> In Proceedings of 1994 Winter USENIX Conference, </booktitle> <pages> pages 293-306, </pages> <address> San Francisco, CA, </address> <month> Jan-uary </month> <year> 1994. </year>
Reference-contexts: When we wish to refer to the generic memory device or either of the above devices built with it, we refer to flash memory or a flash device. Note that the flash disk is actually a flash memory card as well, but with a different interface. formance <ref> [5, 13] </ref>. Since the storage subsystem can consume 20-54% of total system energy [13, 14], these energy savings can as much as double battery lifetime. Flash provides better read performance than disk, but worse average write performance. <p> Misses in the buffer cache will cause a spun-down disk to spin up again, resulting in delays of up to a few seconds <ref> [5, 13] </ref>. Writes to the disk can be buffered in battery-backed SRAM, not only improving performance, but also allowing small writes to a spun-down disk to proceed without spinning it up. The Quantum Daytona is an example of a drive with this sort of buffering. <p> Note that it is not appropriate to compare response time numbers between the tables, because of the different mean transfer sizes of each trace. Simulations of the magnetic disks spun down the disk after 5s of inactivity, which is a good compromise between energy consumption and response time <ref> [5, 13] </ref>. Simulations using the flash card were done with the card 80% full. Based solely on the input parameters from the datasheets, one may conclude that the In-tel flash card consumes significantly less energy than either the Caviar Ultralite cu140 or the SunDisk sdp5.
Reference: [6] <author> Hewlett-Packard. </author> <title> HP 100 and OmniBook Flash Disk Card User's Guide, </title> <year> 1993. </year>
Reference-contexts: The measurements are "micro-benchmarks" that compare the raw performance of three different devices: a typical mobile disk drive (Western Digital Caviar Ultralite cu140), a flash disk (SunDisk 10-Mbyte sdp10 PCMCIA flash disk [21], sold as the Hewlett-Packard F1013A 10-Mbyte/12-V Flash Disk Card <ref> [6] </ref>), and a flash memory card (Intel 10-Mbyte Series-2 flash memory card [8]). The measurements provide a baseline comparison of the different architectures and are used as device specifications within the simulator. They also point out specific performance issues, particularly with the Microsoft Flash File System (MFFS) version 2.00 [11].
Reference: [7] <author> Hewlett-Packard. </author> <title> Kittyhawk HP C3013A/C3014A Personal Storage Modules Technical Reference Manual, </title> <journal> March 1993. </journal> <volume> HP Part No. </volume> <pages> 5961-4343. </pages>
Reference-contexts: In the case of the SunDisk device, the simulation using raw (nonmeasured) performance numbers is based upon the SunDisk sdp5 and sdp5a devices, which are newer 5-volt devices [3]. Lastly, we also simulated the Hewlett-Packard Kittyhawk 20-Mbyte hard disk, which we refer to as kh, based on its datasheet <ref> [7] </ref>. In order to manage all the traces, we simulated flash devices larger than the 10-Mbyte PCMCIA flash devices we had for the OmniBook. Based on the characteris tics of different-sized Intel flash cards, the variation in power and performance among flash cards of different size are insignificant.
Reference: [8] <institution> Intel. Mobile Computer Products, </institution> <year> 1993. </year>
Reference-contexts: that compare the raw performance of three different devices: a typical mobile disk drive (Western Digital Caviar Ultralite cu140), a flash disk (SunDisk 10-Mbyte sdp10 PCMCIA flash disk [21], sold as the Hewlett-Packard F1013A 10-Mbyte/12-V Flash Disk Card [6]), and a flash memory card (Intel 10-Mbyte Series-2 flash memory card <ref> [8] </ref>). The measurements provide a baseline comparison of the different architectures and are used as device specifications within the simulator. They also point out specific performance issues, particularly with the Microsoft Flash File System (MFFS) version 2.00 [11]. <p> The Intel flash card separates erasure from writing, and achieves a write bandwidth of 214 Kbytes/s|but only after a segment has been erased. Because erasure takes a large fixed time period (1.6s) regardless of the amount of data being erased <ref> [8] </ref>, the cost of erasure is amortized over large erasure units. (The newer 16-Mbit Intel Series 2+ Flash Memory Cards erase blocks in 300ms [9], but these were not available to us during this study.) The two types of flash memory have comparable erasure bandwidth; to avoid delaying writes for erasure
Reference: [9] <author> Intel. </author> <title> Flash Memory, </title> <year> 1994. </year>
Reference-contexts: Because erasure takes a large fixed time period (1.6s) regardless of the amount of data being erased [8], the cost of erasure is amortized over large erasure units. (The newer 16-Mbit Intel Series 2+ Flash Memory Cards erase blocks in 300ms <ref> [9] </ref>, but these were not available to us during this study.) The two types of flash memory have comparable erasure bandwidth; to avoid delaying writes for erasure it is important to keep a pool of erased memory available. <p> Manufacturers guarantee that a particular area within flash may be erased up to a certain number of times before defects are expected. The limit is 100,000 cycles for the devices we studied; the Intel Series 2+ Flash Memory Cards guarantee one million erasures per block <ref> [9] </ref>. While it is possible to spread the load over the flash memory to avoid "burning out" particular areas, it is still important to avoid unnecessary Douglis, et al. <p> Another hardware technique is to allow erasure of more of a flash memory card in parallel, as the newer 16-Mbit Intel flash devices allow <ref> [9] </ref>. Newer versions of the Microsoft Flash File System should address the degradation imposed by large files, and in order to take advantage of asynchronous flash disk erasure, file systems for mobile computers must treat the flash disk more like a flash card than like a magnetic disk.
Reference: [10] <author> Atsuo Kawaguchi, Shingo Nishioka, and Hi-roshi Motoda. </author> <title> A flash-memory based file system. </title> <booktitle> In Proceedings of the USENIX 1995 Winter Conference, </booktitle> <address> New Orleans, </address> <month> January </month> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: However, cleaning in LFS is intended to amortize the cost of seeking between segments anywhere on the disk, while flash cleaning is a requirement of the hardware. Kawaguchi et al. <ref> [10] </ref> recently designed a flash memory file system for UNIX based on LFS, with performance comparable to the 4.4BSD Pageable Memory based File System [16].
Reference: [11] <author> Markus Levy. </author> <title> Interfacing Microsoft's Flash File System. In Memory Products, </title> <institution> pages 4-318-4-325. Intel Corp., </institution> <year> 1993. </year>
Reference-contexts: The measurements provide a baseline comparison of the different architectures and are used as device specifications within the simulator. They also point out specific performance issues, particularly with the Microsoft Flash File System (MFFS) version 2.00 <ref> [11] </ref>. <p> We used a 40-Mbyte Western Digital Caviar Ultralite cu140 and a 10-Mbyte SunDisk sdp10 flash disk, both of which are standard with the OmniBook, and a PCMCIA 10-Mbyte Intel Series 2 Flash Memory Card running the Microsoft Flash File System <ref> [11] </ref>. The Caviar Ultralite cu140 is compatible with PCMCIA Type III specifications, and weighs 2.7 ounces, while the flash devices are PCMCIA Type II cards weighing 1.3 ounces. Thus one may consider two 10-Mbyte flash devices as equivalent in size and weight to a single 40-Mbyte hard disk. <p> Throughput is unexpectedly poor for reading or writing large files. This is due to an anomaly in MFFS 2.00 <ref> [11] </ref>, whose performance degrades with file size. The latency of each write (Figure 1 (a)) in Douglis, et al.
Reference: [12] <author> Kester Li. </author> <title> Towards a low power file system. </title> <type> Technical Report UCB/CSD 94/814, </type> <institution> University of California, Berkeley, </institution> <address> CA, </address> <month> May </month> <year> 1994. </year> <type> Masters Thesis. </type>
Reference-contexts: This trace did not record deletions. The traces were preprocessed to convert file-level accesses into disk-level operations, by associating a unique disk location with each file. We used dos traces collected by Kester Li at U.C. Berkeley <ref> [12] </ref>, on IBM desktop PCs running Windows 3.1, also at file-level. They include deletions. The traces were similarly preprocessed. We used disk-level traces collected by Ruemmler and Wilkes on an hp workstation running HP-UX [20]. <p> Though only the mac trace comes from a mobile environment, the two desktop traces represent workloads similar to what would be used on mobile computers, and have been used in simulations of mobile computers in the past <ref> [12, 13, 15] </ref>. Table 3 lists additional statis tics for the nonsynthetic traces. 4.2 Simulator Our simulator models a storage hierarchy containing a buffer cache and non-volatile storage. The buffer cache is the first level searched on a read and is the target of all write operations.
Reference: [13] <author> Kester Li, Roger Kumpf, Paul Horton, and Thomas Anderson. </author> <title> A Quantitative Analysis of Disk Drive Power Management in Portable Computers. </title> <booktitle> In Proceedings of the 1994 Winter USENIX, </booktitle> <pages> pages 279-291, </pages> <address> San Francisco, CA, </address> <year> 1994. </year>
Reference-contexts: When we wish to refer to the generic memory device or either of the above devices built with it, we refer to flash memory or a flash device. Note that the flash disk is actually a flash memory card as well, but with a different interface. formance <ref> [5, 13] </ref>. Since the storage subsystem can consume 20-54% of total system energy [13, 14], these energy savings can as much as double battery lifetime. Flash provides better read performance than disk, but worse average write performance. <p> Note that the flash disk is actually a flash memory card as well, but with a different interface. formance [5, 13]. Since the storage subsystem can consume 20-54% of total system energy <ref> [13, 14] </ref>, these energy savings can as much as double battery lifetime. Flash provides better read performance than disk, but worse average write performance. The maximum delay for magnetic disk reads or writes, however, is much higher than maximum flash latency due to the overhead of occasional disk spin-ups. <p> OSDI 11/94 Storage Alternatives for Mobile Computers 3 behavior of the Macintosh operating system and until recently the DOS file system. An idle disk can consume 20-54% or more of total system energy <ref> [13, 14] </ref>, so the file system must spin down the disk whenever it is idle. Misses in the buffer cache will cause a spun-down disk to spin up again, resulting in delays of up to a few seconds [5, 13]. <p> Misses in the buffer cache will cause a spun-down disk to spin up again, resulting in delays of up to a few seconds <ref> [5, 13] </ref>. Writes to the disk can be buffered in battery-backed SRAM, not only improving performance, but also allowing small writes to a spun-down disk to proceed without spinning it up. The Quantum Daytona is an example of a drive with this sort of buffering. <p> Though only the mac trace comes from a mobile environment, the two desktop traces represent workloads similar to what would be used on mobile computers, and have been used in simulations of mobile computers in the past <ref> [12, 13, 15] </ref>. Table 3 lists additional statis tics for the nonsynthetic traces. 4.2 Simulator Our simulator models a storage hierarchy containing a buffer cache and non-volatile storage. The buffer cache is the first level searched on a read and is the target of all write operations. <p> Note that it is not appropriate to compare response time numbers between the tables, because of the different mean transfer sizes of each trace. Simulations of the magnetic disks spun down the disk after 5s of inactivity, which is a good compromise between energy consumption and response time <ref> [5, 13] </ref>. Simulations using the flash card were done with the card 80% full. Based solely on the input parameters from the datasheets, one may conclude that the In-tel flash card consumes significantly less energy than either the Caviar Ultralite cu140 or the SunDisk sdp5.
Reference: [14] <author> B. Marsh and B. Zenel. </author> <title> Power Measurements of Typical Notebook Computers. </title> <type> Technical Report 110-94, </type> <institution> Matsushita Information Technology Laboratory, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Note that the flash disk is actually a flash memory card as well, but with a different interface. formance [5, 13]. Since the storage subsystem can consume 20-54% of total system energy <ref> [13, 14] </ref>, these energy savings can as much as double battery lifetime. Flash provides better read performance than disk, but worse average write performance. The maximum delay for magnetic disk reads or writes, however, is much higher than maximum flash latency due to the overhead of occasional disk spin-ups. <p> OSDI 11/94 Storage Alternatives for Mobile Computers 3 behavior of the Macintosh operating system and until recently the DOS file system. An idle disk can consume 20-54% or more of total system energy <ref> [13, 14] </ref>, so the file system must spin down the disk whenever it is idle. Misses in the buffer cache will cause a spun-down disk to spin up again, resulting in delays of up to a few seconds [5, 13].
Reference: [15] <author> Brian Marsh, Fred Douglis, and P. Krishnan. </author> <title> Flash Memory File Caching for Mobile Computers. </title> <booktitle> In Proceedings of the 27th Hawaii Conference on Systems Sciences, </booktitle> <pages> pages 451-460, </pages> <address> Maui, HI, 1994. </address> <publisher> IEEE. </publisher>
Reference-contexts: Though only the mac trace comes from a mobile environment, the two desktop traces represent workloads similar to what would be used on mobile computers, and have been used in simulations of mobile computers in the past <ref> [12, 13, 15] </ref>. Table 3 lists additional statis tics for the nonsynthetic traces. 4.2 Simulator Our simulator models a storage hierarchy containing a buffer cache and non-volatile storage. The buffer cache is the first level searched on a read and is the target of all write operations. <p> Marsh et al. examined the use of flash memory as a cache for disk blocks to avoid accessing the magnetic disk, thus allowing the disk to be spun down more of the time <ref> [15] </ref>. SunDisk recently performed a competitive analysis of several types of flash memory on an HP Omnibook 300 and found that the SunDisk SDP5-10 flash disk emulator was nearly an order of magnitude faster than an Intel Flash card using version 2 of the Flash Files System [22].
Reference: [16] <author> Marshall Kirk McKusick, Michael J. Karels, and Keith Bostic. </author> <title> A pageable memory based file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 137-144, </pages> <address> Anaheim, CA, </address> <month> Summer </month> <year> 1990. </year> <booktitle> USENIX. </booktitle>
Reference-contexts: Kawaguchi et al. [10] recently designed a flash memory file system for UNIX based on LFS, with performance comparable to the 4.4BSD Pageable Memory based File System <ref> [16] </ref>. They found that cleaning overhead did not significantly affect performance, but they need more experience with cleaning under heavier loads. 7 Conclusions In this paper we have examined three alternatives for file storage on mobile computers: a magnetic disk, a flash disk emulator, and a flash memory card.
Reference: [17] <author> NEC. </author> <title> Memory Products Data Book, </title> <booktitle> Volume 1: DRAMS, DRAM Modules, Video RAMS, </booktitle> <year> 1993. </year>
Reference-contexts: The power specifications came from datasheets; two different set of performance specifications were used, one from the measured performance and one from datasheets. In addition to the products described in Section 3, we used the datasheet for the NEC PD4216160/L 16-Mbit DRAM chip <ref> [17] </ref>. In the case of the SunDisk device, the simulation using raw (nonmeasured) performance numbers is based upon the SunDisk sdp5 and sdp5a devices, which are newer 5-volt devices [3].
Reference: [18] <author> NEC. </author> <title> Memory Products Data Book, </title> <booktitle> Volume 2: </booktitle> <address> SRAMS, ASMs, EEPROMs, </address> <year> 1993. </year>
Reference-contexts: Here we examine the impact of nonvolatile memory on write performance, the effects of deferring spin-up, and the cost-effectiveness of the write buffer. We base our results on a NEC 32Kx8-bit SRAM chip, part PD43256B, with a 55ns access time <ref> [18] </ref>. We assume that writes to SRAM can be recovered after a crash, so synchronous writes that fit in SRAM are made asynchronous with respect to the disk.
Reference: [19] <author> Mendel Rosenblum and John Ousterhout. </author> <title> The design and implementation of a log-structured file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 26-52, </pages> <booktitle> Febru-ary 1992. Also appears in Proceedings of the 13th Symposium on Operating Systems Principles, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: When the segment size is larger than the transfer unit (i.e., for the flash card), any data in the segment that are still needed must be copied elsewhere. Cleaning flash memory is thus analogous to segment cleaning in Sprite LFS <ref> [19] </ref>. The cost and frequency of segment cleaning is related in part to the cost of erasure, and in part to the segment size. The larger the segment, the more data that will likely have to be moved before erasure can take place. <p> Thus the buffer cache size was set to 0 for simulations of hp. The trace includes no deletions. Finally, we created a synthetic workload, called synth, based loosely on the hot-and-cold workload used in the evaluation of Sprite LFS cleaning policies <ref> [19] </ref>. <p> Ruemmler and Wilkes also studied how well NVRAM could absorb write traffic, finding that 4 Mbytes of NVRAM was sufficient to absorb 95% of all write traffic in the systems they traced [20]. Finally, segment cleaning in Rosenblum and Ousterhout's Log-Structured File System (LFS) <ref> [19] </ref> has a number of similarities to flash cleaning when the flash segment size is a large multiple of the smallest block size.
Reference: [20] <author> Chris Ruemmler and John Wilkes. </author> <title> UNIX disk access patterns. </title> <booktitle> In Proceedings of Douglis, </booktitle> <editor> et al. </editor> <booktitle> OSDI 11/94 Storage Alternatives for Mobile Computers 16 the Winter 1993 USENIX Conference, </booktitle> <pages> pages 405-420, </pages> <address> San Diego, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: We used dos traces collected by Kester Li at U.C. Berkeley [12], on IBM desktop PCs running Windows 3.1, also at file-level. They include deletions. The traces were similarly preprocessed. We used disk-level traces collected by Ruemmler and Wilkes on an hp workstation running HP-UX <ref> [20] </ref>. These traces include metadata operations, which the file-level traces do not, but they are below the level of the buffer cache, so simulating a buffer cache would give misleading results (locality within the original trace has already been largely eliminated). <p> Ruemmler and Wilkes also studied how well NVRAM could absorb write traffic, finding that 4 Mbytes of NVRAM was sufficient to absorb 95% of all write traffic in the systems they traced <ref> [20] </ref>. Finally, segment cleaning in Rosenblum and Ousterhout's Log-Structured File System (LFS) [19] has a number of similarities to flash cleaning when the flash segment size is a large multiple of the smallest block size.
Reference: [21] <author> SunDisk Corporation. SunDisk SDP Series OEM Manual, </author> <year> 1993. </year>
Reference-contexts: Our study is based on both hardware measurements and trace-driven simulation. The measurements are "micro-benchmarks" that compare the raw performance of three different devices: a typical mobile disk drive (Western Digital Caviar Ultralite cu140), a flash disk (SunDisk 10-Mbyte sdp10 PCMCIA flash disk <ref> [21] </ref>, sold as the Hewlett-Packard F1013A 10-Mbyte/12-V Flash Disk Card [6]), and a flash memory card (Intel 10-Mbyte Series-2 flash memory card [8]). The measurements provide a baseline comparison of the different architectures and are used as device specifications within the simulator.
Reference: [22] <institution> SunDisk Corporation, </institution> <address> 3270 Jay Street, Santa Clara, CA 95054. </address> <note> Competitive Analysis 80-40-00002 Rev. 1.0, </note> <year> 1994. </year>
Reference-contexts: SunDisk recently performed a competitive analysis of several types of flash memory on an HP Omnibook 300 and found that the SunDisk SDP5-10 flash disk emulator was nearly an order of magnitude faster than an Intel Flash card using version 2 of the Flash Files System <ref> [22] </ref>. They also found that performance of the Intel Flash card degraded by 40% as it filled with data, with the most noticeable degradation between 95% and 99% storage utilization. Other researchers have explored the idea of using non-volatile memory to reduce write traffic to disk.
Reference: [23] <author> Transaction Processing Performance Council. </author> <title> TPC Benchmark A Standard Specification Rev 1.1. </title>
Reference-contexts: They simulated a system with Gbytes of flash memory and Mbytes of battery-backed SRAM, showing it could support the I/O corresponding to 30,000 transactions per second using the TPC-A database benchmark <ref> [23] </ref>. They found that at a utilization of 80%, 45% of the time is spent erasing or copying data within flash, while performance was severely degraded at higher utilizations [24].

References-found: 23

