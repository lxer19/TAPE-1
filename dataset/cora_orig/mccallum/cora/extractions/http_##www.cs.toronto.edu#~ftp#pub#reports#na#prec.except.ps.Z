URL: http://www.cs.toronto.edu/~ftp/pub/reports/na/prec.except.ps.Z
Refering-URL: http://www.cs.toronto.edu/NA/reports.html
Root-URL: 
Email: fkrj, nedg@cs.toronto.edu  
Title: Precision Control and Exception Handling in Scientific Computing proposed precision control and exception handling facilities
Author: K. R. Jackson and N. S. Nedialkov 
Note: The  
Address: Toronto, Ontario, Canada M5S 1A4.  
Affiliation: Computer Science Dept., University of Toronto,  
Abstract: This paper describes convenient language facilities for precision control and exception handling. Nedialkov has developed a variable-precision and exception handling library, SciLib, implemented as a numerical class library in C++. A new scalar data type, real , is introduced, consisting of variable-precision floating-point numbers. Arithmetic, relational, and input and output operators of the language are overloaded for reals, so that mathematical expressions can be written without explicit function calls. Precision of computations can be changed during program execution. The exception handling mechanism treats only numerical exceptions and does not distinguish between different types of exceptions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> O. Aberth and M. J. Schaefer. </author> <title> Precise computation using range arithmetic, via C++. </title> <journal> ACM Trans. Math. Softw., </journal> <volume> 18(4) </volume> <pages> 481-491, </pages> <year> 1992. </year>
Reference-contexts: Some environments have no provision at all for handling numerical exceptions | this is the case in Fortran, for example. Although several variable-precision packages have been developed <ref> [1, 3, 4, 6, 7] </ref>, most do not fl This work was supported in part by the Natural Sciences and Engineering Research Council of Canada and the Information Technology Research Centre of Ontario. incorporate exception handling in an effective way.
Reference: [2] <author> American National Standards Institute, </author> <title> New York. IEEE Standard for Binary Floating-Point Arithmetic, </title> <booktitle> 1985. ANSI/IEEE Std. </booktitle> <pages> 754-1985. </pages>
Reference-contexts: The floating-point format (1) is characterized by four integer parameters: b, m, E min and E max : The IEEE Standard <ref> [2] </ref> uses the terms single, double and extended to denote different floating-point formats and the corresponding precisions.
Reference: [3] <author> D. H. Bailey. </author> <title> Algorithm 719: Multipreci-sion translation and execution of Fortran programs. </title> <journal> ACM Trans. Math. Softw., </journal> <volume> 19(3) </volume> <pages> 288-319, </pages> <year> 1993. </year>
Reference-contexts: Some environments have no provision at all for handling numerical exceptions | this is the case in Fortran, for example. Although several variable-precision packages have been developed <ref> [1, 3, 4, 6, 7] </ref>, most do not fl This work was supported in part by the Natural Sciences and Engineering Research Council of Canada and the Information Technology Research Centre of Ontario. incorporate exception handling in an effective way. <p> To illustrate the correctness of theoretical error bounds, it can be helpful to have a way of performing higher precision calculations. The tests may be more reliable if the higher precision results are computed by a different algorithm from the one being tested. Bailey <ref> [3] </ref> briefly surveys other applications of variable-precision computations, including to support or to reject conjectures in mathematics, to study mathematical constants, to explore public-key cryptography and to test the integrity of computer systems. 5 Conclusion The main advantage of using precision control is that results with desired accuracy can be obtained
Reference: [4] <author> R. P. Brent. </author> <title> A Fortran multiple precision arithmetic package. </title> <journal> ACM Trans. Math. Softw., </journal> <volume> 4(1) </volume> <pages> 57-81, </pages> <year> 1978. </year>
Reference-contexts: Some environments have no provision at all for handling numerical exceptions | this is the case in Fortran, for example. Although several variable-precision packages have been developed <ref> [1, 3, 4, 6, 7] </ref>, most do not fl This work was supported in part by the Natural Sciences and Engineering Research Council of Canada and the Information Technology Research Centre of Ontario. incorporate exception handling in an effective way.
Reference: [5] <author> M. A. Ellis and B. Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year> <month> 7 </month>
Reference-contexts: The purpose of this paper is to describe convenient language facilities for both precision control and exception handling, and to show how these facilities help to construct better numerical algorithms. A variable-precision and exception handling library, SciLib, has been implemented in C++ <ref> [5] </ref>, so the notation and examples are based on this language. More sample programs and the SciLib user's guide can be found in [9] 1 . The proposed precision control provides a simple way of changing precision during program execution.
Reference: [6] <author> J. Ely. </author> <title> Prospects for Using Variable Precision Interval Software in C++ for Solving Some Contemporary Scientific Problems. </title> <type> PhD thesis, </type> <institution> Computer Science Dept., Ohio State University, Columbus, Ohio, </institution> <year> 1990. </year>
Reference-contexts: Some environments have no provision at all for handling numerical exceptions | this is the case in Fortran, for example. Although several variable-precision packages have been developed <ref> [1, 3, 4, 6, 7] </ref>, most do not fl This work was supported in part by the Natural Sciences and Engineering Research Council of Canada and the Information Technology Research Centre of Ontario. incorporate exception handling in an effective way.
Reference: [7] <author> T. E. Hull and M. S. Cohen. </author> <title> Toward an ideal computer arithmetic. </title> <editor> In M. J. Irwin and R. Stafanelli, editors, </editor> <booktitle> Proceedings of the 8th Symposium on Computer Arithmetic, </booktitle> <pages> pages 131-138. </pages> <publisher> IEEE Computer Society, </publisher> <address> Los Ange-les, </address> <year> 1987. </year>
Reference-contexts: Some environments have no provision at all for handling numerical exceptions | this is the case in Fortran, for example. Although several variable-precision packages have been developed <ref> [1, 3, 4, 6, 7] </ref>, most do not fl This work was supported in part by the Natural Sciences and Engineering Research Council of Canada and the Information Technology Research Centre of Ontario. incorporate exception handling in an effective way.
Reference: [8] <author> T. E. Hull, T. F. Fairgrieve, and P. T. P. Tang. </author> <title> Implementing complex elementary functions using exception handling. </title> <journal> ACM Trans. Math. Softw., </journal> <volume> 20(2) </volume> <pages> 215-244, </pages> <year> 1994. </year>
Reference-contexts: If any of the above situations arise, a global exception flag is raised. Initially the flag is cleared. In addition, a user can explicitly raise the exception flag by executing the setexc function: setexc (); The exception handler is implemented as an enable-handle-end construct <ref> [8] </ref> as shown in Fig. 2. The semantics of the construct are simple: if an exception occurs in the enable block, the exception flag is cleared, and the handle block is executed; otherwise the handle block is skipped, and the program continues after the end statement. <p> fl x + y fl y); handle /fl an overflow or underflow has occurred fl/ int p = precsav (); precset (2 fl p); answer = sqrt (x fl x + y fl y); precset (p); end return answer; g The same expression is computed in Fig. 4 (see also <ref> [8] </ref>), but the exceptions are handled without using precision control. The handler first tests if x or y is zero. If so, the answer is jxj+jyj. Otherwise, if x and y differ greatly in magnitude, the variable having the smaller absolute value can be neglected. <p> See [9] for an SciLib implementation of this scheme. Range reduction in the evaluation of trigonometric functions is another example of an application in which higher precision is needed temporarily. Some of the complex elementary functions in <ref> [8] </ref> can be more easily implemented and analyzed if precision control and exception handling are available. See [9] for an example of a complex natural logarithm function (based on the algorithm described in [8]) where higher precision is used in a handle block to avoid overflows, under-flows and catastrophic cancelation. <p> Some of the complex elementary functions in <ref> [8] </ref> can be more easily implemented and analyzed if precision control and exception handling are available. See [9] for an example of a complex natural logarithm function (based on the algorithm described in [8]) where higher precision is used in a handle block to avoid overflows, under-flows and catastrophic cancelation. Users may wish to compute results to a predefined accuracy.
Reference: [9] <author> N. S. Nedialkov. </author> <title> Precision control and exception handling in scientific computing. </title> <type> Master's thesis, </type> <institution> Computer Science Dept., University of Toronto, Toronto, Canada, </institution> <year> 1994. </year> <month> 8 </month>
Reference-contexts: A variable-precision and exception handling library, SciLib, has been implemented in C++ [5], so the notation and examples are based on this language. More sample programs and the SciLib user's guide can be found in <ref> [9] </ref> 1 . The proposed precision control provides a simple way of changing precision during program execution. It is based on a binary variable-precision floating-point arithmetic, where the first two precisions correspond to normalized IEEE single and double, respectively. <p> A computing environment equipped with these two features would have the following advantages: 1. more powerful algorithms can be imple mented; 2. the algorithms can be analyzed and proved correct more easily; 3. programs are easier to understand. 1 The thesis <ref> [9] </ref> is available by anonymous ftp from cs.toronto.edu in pub/reports/na/ned-94-msc.ps.Z as a compressed postscript file. 1 In addition, precision control introduces addi- tional advantages such as the following: 1. only one version of a numerical library is needed, rather than separate versions for each precision; 2. theoretical error bounds can be <p> Precision control and exception handling can be used alone or in combination. The following paradigms are illustrated in <ref> [9] </ref>. 1. Use precision control without exception handling: (a) use higher precision temporarily; (b) use higher and higher precision until some criterion is satisfied. 2. <p> More details about SciLib's variable-precision floating-point numbers may be found in <ref> [9] </ref>. 2 2.2 Language Facilities for Precision Control An environment for scientific computing should have the capability to change precision during program execution. In SciLib, this is accomplished by changing the precision value (power of two). <p> Mixed mode assignments follow similar rules, as described in <ref> [9] </ref>. <p> Iterative improvement for the solution of linear algebraic equations is a case in point. See <ref> [9] </ref> for an SciLib implementation of this scheme. Range reduction in the evaluation of trigonometric functions is another example of an application in which higher precision is needed temporarily. <p> Range reduction in the evaluation of trigonometric functions is another example of an application in which higher precision is needed temporarily. Some of the complex elementary functions in [8] can be more easily implemented and analyzed if precision control and exception handling are available. See <ref> [9] </ref> for an example of a complex natural logarithm function (based on the algorithm described in [8]) where higher precision is used in a handle block to avoid overflows, under-flows and catastrophic cancelation. Users may wish to compute results to a predefined accuracy. <p> In this example, as is often the case, the required precision of the intermediate results is not know beforehand, and it might be necessary to increase the preci 6 sion of the computation significantly to achieve the desired accuracy. See <ref> [9] </ref> for an example of a SciLib program that solves such a problem. To illustrate the correctness of theoretical error bounds, it can be helpful to have a way of performing higher precision calculations.
References-found: 9

