URL: http://www.cs.utexas.edu/users/liugt/publications/wmdrt97.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/liugt/publications/wmdrt97.html
Root-URL: http://www.cs.utexas.edu
Email: E-mail: fliugt, mokg@cs.utexas.edu  
Title: An Event Service Framework for Distributed Real-Time Systems  
Author: Guangtian Liu and Aloysius K. Mok 
Address: Austin, TX 78712  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Abstract: Many distributed systems use events for asynchronous communication. Although the CORBA Event Service provides a flexible model for event-based communication among objects, further work is needed to support the important features required by real-time applications such as network management, avionics, etc. where timely delivery of events and more complex event correlation are desirable. In this work, we identify a set of real-time event service requirements that are found in a distributed environment, i.e., event registration, composite event specification, event timing constraint specification and timely composite event detection and event dispatching. We propose the design of a Real-Time Event Service Center object as a top-level architecture for event services. We then focus on one of the key issues in this architecture: the specification, compilation and detection of composite events. A specification language for composite events is proposed in this paper and the problem of how to efficiently detect the occurrence of these composite events as early as possible is investigated in [13, 19]. To justify the practicality of our approach, a Java package is being developed to specify, compile and detect various composite events. We outline the architecture of this package in this paper. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Chakravarthy et. al, HiPAC: </author> <title> A Research Project in Active, Time-Constrained Database Management, </title> <type> Technical Report XAIT-89-02, </type> <institution> Xerox Advanced Information Technology, </institution> <year> 1989. </year>
Reference-contexts: X Windows, events are used to notify the window manager about users' ac tions, such as mouse-clicks, window-resizing, etc.; * In active database systems <ref> [1] </ref>, events are used to specify the triggering time of rule evaluation, where rules are usually defined in the following Event-Condition-Action (ECA) pattern: WHEN event E occurs IF condition C is true DO action A Generally speaking, events in these systems represent the things of interests which happen during a computation.
Reference: [2] <author> S. Chakravarthy and D. Mishra, Snoop: </author> <title> An Expressive Event Specification Language for Active Databases, </title> <journal> Data and Knowledge Engineering, </journal> <volume> 14(10), </volume> <month> Oct. </month> <year> 1994, </year> <month> pp1-26. </month>
Reference-contexts: Most events are generated by device drivers or the run-time systems. For instances, the event insert-a-record-into-table-T can be generated by an active database management system, and the event one-click-on-left-mouse-button may come from a mouse device driver. In some systems, such as active databases <ref> [2] </ref>, events are classified into primitive events and composite events. Primitive events are events that are pre-defined in a system and their detection mechanism is usually embedded in the system implementation. <p> Work on composite event specification and detection are mostly seen in active database area. Various event operators, such as AND, OR, SEQUENCE, etc., are used in <ref> [2, 5, 6, 21] </ref> for specifying composite events. Different composite event detection approaches, e.g. Petri-net based [5], finite-state-machine based [6] as well as graph-based [2], have been proposed. <p> Various event operators, such as AND, OR, SEQUENCE, etc., are used in [2, 5, 6, 21] for specifying composite events. Different composite event detection approaches, e.g. Petri-net based [5], finite-state-machine based [6] as well as graph-based <ref> [2] </ref>, have been proposed. However, as we have indicated in [12], composite events specified with these event operators often have different interpretations in terms of their occurrences. A new composite event specification approach is proposed in [12] with logic-based semantics; efficient composite event detection algorithms are also discussed in [12]. <p> There are many research issues associated with each components described above. The remainder of this paper will mainly concentrate on composite event specification, compilation and detection approaches. Further issues related to other components will be left for future research. 3 Composite Event Specification Most composite event specification approaches <ref> [2, 5, 6] </ref> use event operators, such as AND, OR, SEQUENCE, etc.. However, since an event may have multiple instances during a computation, applying these operators on events instead of event instances often incurs semantic ambiguity, thus limiting the expressiveness of the event specification languages. <p> It may also be interpreted as: E occurs at the ith occurrence of E 1 only if the ith instance of E 2 has already occurred. Additional assumptions may need to be made to clarify these confusions, such as different parameter context classes defined in <ref> [2] </ref>. Besides, since the event operators proposed so far only deal with events instead of event instances, they all have difficulties in specifying complex events like 2ith instance of E 1 and 7ith instance of E 2 have occurred, where i is a positive integer.
Reference: [3] <author> S.E. Chodrow, F. Jahanian, and M. Donner, </author> <title> Run-Time Monitoring of Real-Time Systems, </title> <booktitle> Proc. Real-Time Systems Symp., </booktitle> <year> 1991, </year> <month> pp.74-83. </month>
Reference-contexts: Various approaches, such as hardware, software and hybrid monitoring approaches, have been proposed to detect event occurrences. The event data collected at runtime monitoring are usually used for postmortem analysis. Event-based model is also used in <ref> [9, 3, 20, 18] </ref> for monitoring timing constraints at run time. Timing constraints are specified in terms of event occurrences and efficient algorithms are developed to detect the violation of these timing constraints at run time. Work on composite event specification and detection are mostly seen in active database area.
Reference: [4] <author> Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Composite events or complex events are formed by composing primitive or other composite events, and a special module is usually devoted to detecting the occurrence of these composite events. In distributed systems where a large number of events are generated and processed in different locations, certain event mediators <ref> [4] </ref> are needed to handle the propagation of events from their sources to their destinations. In most of these systems, timely detection and delivery of various events are usually implicitly required but seldom explicitly defined, let alone any effort to guarantee it. <p> An Event Channel object is defined as a mediator <ref> [4] </ref> that can dispatch events to multiple consumers on behave of multiple suppliers. However, this event service standard needs to be augmented for event filtering, composite event specification and detection, as well as timely delivery semantics which are necessary in many real world applications [7, 23].
Reference: [5] <author> S. Gatziu, A. Geppert, and K.R. Dittrich, </author> <title> Detecting Composite Events in Active Database Systems Using Petri Nets, </title> <booktitle> Proc. of the Fourth International Workshop on Research Issues in Data Engineering, </booktitle> <month> Feb. </month> <year> 1994, </year> <month> pp.2-9. </month>
Reference-contexts: Work on composite event specification and detection are mostly seen in active database area. Various event operators, such as AND, OR, SEQUENCE, etc., are used in <ref> [2, 5, 6, 21] </ref> for specifying composite events. Different composite event detection approaches, e.g. Petri-net based [5], finite-state-machine based [6] as well as graph-based [2], have been proposed. <p> Work on composite event specification and detection are mostly seen in active database area. Various event operators, such as AND, OR, SEQUENCE, etc., are used in [2, 5, 6, 21] for specifying composite events. Different composite event detection approaches, e.g. Petri-net based <ref> [5] </ref>, finite-state-machine based [6] as well as graph-based [2], have been proposed. However, as we have indicated in [12], composite events specified with these event operators often have different interpretations in terms of their occurrences. <p> There are many research issues associated with each components described above. The remainder of this paper will mainly concentrate on composite event specification, compilation and detection approaches. Further issues related to other components will be left for future research. 3 Composite Event Specification Most composite event specification approaches <ref> [2, 5, 6] </ref> use event operators, such as AND, OR, SEQUENCE, etc.. However, since an event may have multiple instances during a computation, applying these operators on events instead of event instances often incurs semantic ambiguity, thus limiting the expressiveness of the event specification languages.
Reference: [6] <author> N. Gehani, H.V. Jagadish, and O. Shmueli, </author> <title> Composite Event Specification in Active Databases: Model & Implementation, </title> <booktitle> Proc. of the Eighteenth International Conference on Very Large Data Bases, </booktitle> <month> August </month> <year> 1992, </year> <month> pp.327-338. </month>
Reference-contexts: Work on composite event specification and detection are mostly seen in active database area. Various event operators, such as AND, OR, SEQUENCE, etc., are used in <ref> [2, 5, 6, 21] </ref> for specifying composite events. Different composite event detection approaches, e.g. Petri-net based [5], finite-state-machine based [6] as well as graph-based [2], have been proposed. <p> Work on composite event specification and detection are mostly seen in active database area. Various event operators, such as AND, OR, SEQUENCE, etc., are used in [2, 5, 6, 21] for specifying composite events. Different composite event detection approaches, e.g. Petri-net based [5], finite-state-machine based <ref> [6] </ref> as well as graph-based [2], have been proposed. However, as we have indicated in [12], composite events specified with these event operators often have different interpretations in terms of their occurrences. <p> There are many research issues associated with each components described above. The remainder of this paper will mainly concentrate on composite event specification, compilation and detection approaches. Further issues related to other components will be left for future research. 3 Composite Event Specification Most composite event specification approaches <ref> [2, 5, 6] </ref> use event operators, such as AND, OR, SEQUENCE, etc.. However, since an event may have multiple instances during a computation, applying these operators on events instead of event instances often incurs semantic ambiguity, thus limiting the expressiveness of the event specification languages.
Reference: [7] <author> T.H. Harrison, D.L. Levine and D.C. Schmidt, </author> <title> The Design and Performance of a Real-Time CORBA Object Event Service, </title> <booktitle> Proc. OOPSLA '97, </booktitle> <year> 1997. </year>
Reference-contexts: However, this event service standard needs to be augmented for event filtering, composite event specification and detection, as well as timely delivery semantics which are necessary in many real world applications <ref> [7, 23] </ref>. <p> However, this event service standard needs to be augmented for event filtering, composite event specification and detection, as well as timely delivery semantics which are necessary in many real world applications [7, 23]. Some recent effort has been devoted to extending the CORBA event service. <ref> [7] </ref> describes a real-time CORBA object event service design and implementation where events can be associated with timing requirements, such as deadlines, and a real-time scheduler is embedded in the Event Channel to enforce the timely dispatch of events. <p> The RTESC will detect these composite events and notify the consumers whenever their occurrences are detected. Event filtering and correlation <ref> [7] </ref> should be easily expressible as composite events; * Event Timing Constraints: event suppliers and consumers can specify the timing constraints on event arrival or dispatch. For example, suppliers may give the maximum rates of event occurrences and consumers may set event dispatch deadlines once they occur. <p> no less than 110, it can specify a composite event ce whose condi tion c is AttrV alue (T oU pdateR; "Key"; i) 110: This composite event occurrence stream actually cor responds to the filtered T oU pdateR event stream. * Event Correlation: For the disjunctive (OR) correlation proposed in <ref> [7] </ref>, an equivalent composite event for e 1 OR e 2 can be defined as follows: DEFINE COMPOSITE EVENT ce WITH ATTRIBUTES ...
Reference: [8] <author> F. Jahanian and A. K. Mok, </author> <title> Safety Analysis of Timing Properties in Real-Time Systems, </title> <journal> IEEE Trans. Software Eng., Vol.SE-12, </journal> <volume> No.9, </volume> <month> Sept. </month> <year> 1986, </year> <month> pp.890-904. </month>
Reference: [9] <author> F. Jahanian and A. Goyal, </author> <title> A Formalism for Monitoring Real-Time Constraints at Runtime, </title> <booktitle> Proc. IEEE Fault-Tolerant Computing Symp., </booktitle> <month> June </month> <year> 1990, </year> <month> pp.148-155. </month>
Reference-contexts: Various approaches, such as hardware, software and hybrid monitoring approaches, have been proposed to detect event occurrences. The event data collected at runtime monitoring are usually used for postmortem analysis. Event-based model is also used in <ref> [9, 3, 20, 18] </ref> for monitoring timing constraints at run time. Timing constraints are specified in terms of event occurrences and efficient algorithms are developed to detect the violation of these timing constraints at run time. Work on composite event specification and detection are mostly seen in active database area.
Reference: [10] <author> K.B. Kenny and K.-J. Lin, </author> <title> Building Flexible Real-Time Systems using the FLEX Language, </title> <booktitle> Computer, </booktitle> <address> Vol.24, No.5, </address> <month> May </month> <year> 1991, </year> <month> pp.70-78. </month>
Reference: [11] <author> R.J. LeBlanc and A.D. Robbins, </author> <title> Event-Driven Monitoring of Distributed Programs, </title> <booktitle> Proc. 5th Int'l Conf. Distributed Computing Systems, </booktitle> <year> 1985, </year> <month> pp.515-522. </month>
Reference: [12] <author> G. Liu and A.K. Mok, </author> <title> A Unified Approach for Specifying Timing Constraints and Composite Events in Active Database Systems, </title> <type> Technical Report, </type> <institution> Real-Time System Laboratory, Department of Computer Sciences, University of Texas at Austin, </institution> <year> 1997 </year>
Reference-contexts: Various event operators, such as AND, OR, SEQUENCE, etc., are used in [2, 5, 6, 21] for specifying composite events. Different composite event detection approaches, e.g. Petri-net based [5], finite-state-machine based [6] as well as graph-based [2], have been proposed. However, as we have indicated in <ref> [12] </ref>, composite events specified with these event operators often have different interpretations in terms of their occurrences. A new composite event specification approach is proposed in [12] with logic-based semantics; efficient composite event detection algorithms are also discussed in [12]. <p> Petri-net based [5], finite-state-machine based [6] as well as graph-based [2], have been proposed. However, as we have indicated in <ref> [12] </ref>, composite events specified with these event operators often have different interpretations in terms of their occurrences. A new composite event specification approach is proposed in [12] with logic-based semantics; efficient composite event detection algorithms are also discussed in [12]. <p> However, as we have indicated in <ref> [12] </ref>, composite events specified with these event operators often have different interpretations in terms of their occurrences. A new composite event specification approach is proposed in [12] with logic-based semantics; efficient composite event detection algorithms are also discussed in [12]. In OMG's CORBA (Common Object Request Broker Architecture) standards, an Event Service interface is specified which allows asynchronous communication via event passing between Event Suppliers, i.e., the objects that generate the events, and Event Consumers, i.e. the objects that accept the events for processing. <p> (e1, i) OR occ (e2, j) IS SATISFIED IF CONDITION true IS TRUE THEN assign values to ce's attributes and trigger ce's occurrence Because our timing constraints and conditions are expressed with respect to event instances, composite events specified with this approach have a clear semantics as to their occurrences. <ref> [12] </ref> gives more examples of expressing other event operators in this formalism. Detailed discussion of these composite event occurrence detection algorithms is out of the scope of this paper.
Reference: [13] <author> G. Liu and A.K. Mok, </author> <title> Real-Time Event Service Architecture for Distributed Systems, </title> <type> Technical Report, </type> <institution> Real-Time System Laboratory, Department of Computer Sciences, University of Texas at Austin, </institution> <year> 1997 </year>
Reference-contexts: Next, we focus on approaches for composite event specification and detection, one of the key services in this architecture. A simple and expressive composite event specification language is proposed. The efficient compilation and detection algorithms to catch these composite event occurrences as early as possible can be found in <ref> [13, 19] </ref>. To demonstrate the practicality of these approaches, a composite event specification and detection package is also being developed in Java language. 1.1 Related Work A lot of research in the system monitoring and debugging area has concentrated on various primitive event detection mechanisms [22]. <p> Detailed discussion of these composite event occurrence detection algorithms is out of the scope of this paper. The problem involves detecting the satisfaction or violation of timing constraints and evaluation of attribute conditions and is quite complicated, as has been discussed in <ref> [13, 19] </ref>. A set of timing constraint compilation and detection algorithms are developed in [13, 19] to detect these composite event occurrences efficiently and as early as possible. 4 Implementation A Java Composite Event Package We are implementing a composite event specification compiler and event detector in Java, as part of <p> The problem involves detecting the satisfaction or violation of timing constraints and evaluation of attribute conditions and is quite complicated, as has been discussed in <ref> [13, 19] </ref>. A set of timing constraint compilation and detection algorithms are developed in [13, 19] to detect these composite event occurrences efficiently and as early as possible. 4 Implementation A Java Composite Event Package We are implementing a composite event specification compiler and event detector in Java, as part of our effort to provide a Real-Time Event Service package in Java. <p> For each timing constraint formula in a composite event specification, the constraint conjunctions in it are represented as constraint graphs. This timing condition is compiled either for satisfaction or violation detection, using the algorithms described in <ref> [13] </ref>. The compiled event expression is then loaded into the composite event detector for occurrence detection. <p> We assume this delay is upper bounded and the delivery is reliable. The top entry of the event queue, which has the earliest occurrence time, is processed by our timing constraint checker which implements the satisfaction or violation detection algorithms discussed in <ref> [13] </ref>. Once a satisfaction or violation of a timing condition is detected, the condition evaluator is triggered to evaluate conditions on other attribute values. If the condition evaluator returns true, then a new instance of the composite event is created and its attribute values are assigned.
Reference: [14] <author> J.E. Lumpp et al., </author> <title> Specification and Identification of Events for Debugging and Performance Monitoring of Distributed Multiprocessor Systems, </title> <booktitle> Proc. 10th Int'l Conf. Distributed Computing Systems, </booktitle> <year> 1990, </year> <month> pp.477-483. </month>
Reference: [15] <author> D.C. Marinescu, J.E. Lumpp, Jr., T.L. Casavant, and H.J. Siegel, </author> <title> Models for Monitoring and Debugging Tools for Parallel and Distributed Software, </title> <journal> J. Parallel and Distributed Computing, </journal> <volume> Vol.9, </volume> <month> June </month> <year> 1990, </year> <month> pp.171-183. </month>
Reference: [16] <author> A.K. Mok, </author> <title> A Graph-Based Computation Model for Real-Time Systems, </title> <booktitle> Proc. IEEE Parallel Processing, </booktitle> <month> August </month> <year> 1985, </year> <month> pp.619-623, </month> . 
Reference: [17] <author> A.K. Mok, </author> <title> Annotating Ada for Real-Time Program Synthesis, </title> <booktitle> Proc. Computer Assurance, </booktitle> <year> 1987. </year>
Reference: [18] <author> A.K. Mok and G. Liu, </author> <title> Efficient Run-Time Monitoring of Timing Constraints, </title> <booktitle> Proc. Real-Time Technology and Applications Symp., </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Various approaches, such as hardware, software and hybrid monitoring approaches, have been proposed to detect event occurrences. The event data collected at runtime monitoring are usually used for postmortem analysis. Event-based model is also used in <ref> [9, 3, 20, 18] </ref> for monitoring timing constraints at run time. Timing constraints are specified in terms of event occurrences and efficient algorithms are developed to detect the violation of these timing constraints at run time. Work on composite event specification and detection are mostly seen in active database area.
Reference: [19] <author> A.K. Mok and G. Liu, </author> <title> Early Detection of Timing Constraint Violation at Runtime, </title> <type> Technical Report, </type> <institution> Real-Time System Lab, Department of Computer Sciences, The University of Texas at Austin, </institution> <year> 1997. </year>
Reference-contexts: Next, we focus on approaches for composite event specification and detection, one of the key services in this architecture. A simple and expressive composite event specification language is proposed. The efficient compilation and detection algorithms to catch these composite event occurrences as early as possible can be found in <ref> [13, 19] </ref>. To demonstrate the practicality of these approaches, a composite event specification and detection package is also being developed in Java language. 1.1 Related Work A lot of research in the system monitoring and debugging area has concentrated on various primitive event detection mechanisms [22]. <p> Detailed discussion of these composite event occurrence detection algorithms is out of the scope of this paper. The problem involves detecting the satisfaction or violation of timing constraints and evaluation of attribute conditions and is quite complicated, as has been discussed in <ref> [13, 19] </ref>. A set of timing constraint compilation and detection algorithms are developed in [13, 19] to detect these composite event occurrences efficiently and as early as possible. 4 Implementation A Java Composite Event Package We are implementing a composite event specification compiler and event detector in Java, as part of <p> The problem involves detecting the satisfaction or violation of timing constraints and evaluation of attribute conditions and is quite complicated, as has been discussed in <ref> [13, 19] </ref>. A set of timing constraint compilation and detection algorithms are developed in [13, 19] to detect these composite event occurrences efficiently and as early as possible. 4 Implementation A Java Composite Event Package We are implementing a composite event specification compiler and event detector in Java, as part of our effort to provide a Real-Time Event Service package in Java.
Reference: [20] <author> S.C.V. Raju, R. Rajkumar, and F. Jahanian, </author> <title> Monitoring Timing Constraints in Distributed Real-Time Systems, </title> <booktitle> Proc. Real-Time Systems Symp., </booktitle> <year> 1992, </year> <month> pp.57-67. </month>
Reference-contexts: Various approaches, such as hardware, software and hybrid monitoring approaches, have been proposed to detect event occurrences. The event data collected at runtime monitoring are usually used for postmortem analysis. Event-based model is also used in <ref> [9, 3, 20, 18] </ref> for monitoring timing constraints at run time. Timing constraints are specified in terms of event occurrences and efficient algorithms are developed to detect the violation of these timing constraints at run time. Work on composite event specification and detection are mostly seen in active database area.
Reference: [21] <author> A.P. Sistla and O. Wolfson, </author> <title> Temporal Conditions and Integrity Constraints in Active Database Systems, </title> <booktitle> Proc. of the ACM SIGMOD International Conference on Management of Data, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: Work on composite event specification and detection are mostly seen in active database area. Various event operators, such as AND, OR, SEQUENCE, etc., are used in <ref> [2, 5, 6, 21] </ref> for specifying composite events. Different composite event detection approaches, e.g. Petri-net based [5], finite-state-machine based [6] as well as graph-based [2], have been proposed.
Reference: [22] <author> J.J.P. Tsai and S.J.H. Yang, eds, </author> <title> Monitoring and Debugging of Distributed Real-Time Systems, </title> <publisher> IEEE CS Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1995. </year>
Reference-contexts: To demonstrate the practicality of these approaches, a composite event specification and detection package is also being developed in Java language. 1.1 Related Work A lot of research in the system monitoring and debugging area has concentrated on various primitive event detection mechanisms <ref> [22] </ref>. Various approaches, such as hardware, software and hybrid monitoring approaches, have been proposed to detect event occurrences. The event data collected at runtime monitoring are usually used for postmortem analysis. Event-based model is also used in [9, 3, 20, 18] for monitoring timing constraints at run time.
Reference: [23] <author> Z. Wang, K. Allen and Z. Zhu, </author> <title> A White Paper on The Design of a CORBA Notification Service for OSI Management, OMG TC Document Telecom/97-05-03, </title> <month> May, </month> <year> 1997. </year>
Reference-contexts: However, this event service standard needs to be augmented for event filtering, composite event specification and detection, as well as timely delivery semantics which are necessary in many real world applications <ref> [7, 23] </ref>. <p> Several Notification Service standards, such as [24], have been proposed as direct extensions to the OMG Event Service, adding to the service the concept of event subscriptions through filtering, delivery-guarantee semantics, durable connections, and the assembly of event networks. A more application-oriented notification service is presented in <ref> [23] </ref> which defines a CORBA entity to support OSI event filtering and notification. Unlike previous efforts, we address more complex event specification with a logically based semantics and we investigate real-time detection issues other than event filtering and some simple AND, OR event correlation.
Reference: [24] <institution> Notification Service Submission, OMG TC Document Telecom/97-06-01, </institution> <month> June, </month> <year> 1997. </year>
Reference-contexts: Event filtering and certain simple event correlation using AND, OR operators are also supported in this approach. Several Notification Service standards, such as <ref> [24] </ref>, have been proposed as direct extensions to the OMG Event Service, adding to the service the concept of event subscriptions through filtering, delivery-guarantee semantics, durable connections, and the assembly of event networks.
References-found: 24

