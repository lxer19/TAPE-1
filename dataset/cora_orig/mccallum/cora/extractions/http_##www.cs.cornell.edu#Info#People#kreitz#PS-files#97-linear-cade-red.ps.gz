URL: http://www.cs.cornell.edu/Info/People/kreitz/PS-files/97-linear-cade-red.ps.gz
Refering-URL: http://www.cs.cornell.edu/Info/People/kreitz/Abstracts/97-linear-cade.html
Root-URL: 
Email: kreitz@cs.cornell.edu  mantel@dfki.uni-sb.de  fjeotten,stephg@intellektik.informatik.th-darmstadt.de  
Phone: 2  3  
Title: Connection-Based Proof Construction in Linear Logic  
Author: C. Kreitz H. Mantel J. Otten S. Schmitt 
Address: Ithaca, NY 14853, USA  Stuhlsatzenhausweg 3, 66123 Saarbrucken, Germany  Alexanderstr. 10, 64283 Darmstadt, Germany  
Affiliation: 1 Department of Computer Science, Cornell University  Deutsches Forschungszentrum fur Kunstliche Intelligenz GmbH  Fachgebiet Intellektik, Fachbereich Informatik, Technische Hochschule Darmstadt  
Abstract: We present a matrix characterization of logical validity in the multiplicative fragment of linear logic. On this basis we develop a matrix-based proof search procedure for this fragment and a procedure which translates the machine-found proofs back into the usual sequent calculus for linear logic. Both procedures are straightforward extensions of methods which originally were developed for a uniform treatment of classical, intuitionistic and modal logics. They can be extended to further fragments of linear logic once a matrix characterization has been found.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J.-M. Andreoli. </author> <title> Logic programming with focussing proofs in linear logic. </title> <journal> Journal of Logic and Computation, </journal> <volume> 2(3) </volume> <pages> 297-347, </pages> <year> 1993. </year>
Reference-contexts: The former cover all of linear logic but are not useful for efficient proof search because of the many redundancies contained in them. Attempts to remove permutabilities from sequent proofs <ref> [1, 10] </ref> and to add proof strategies [26] have provided some improvements but the main difficulties still remain. Proof nets, on the other hand, are applicable only to a small fragment of the logic. <p> If subsequent applications of two rules have no impact on each other their order is unimportant. In proof search it suffices just to consider one possible order. This phenomenon is called permutability of rules and has been investigated for linear logic in <ref> [1, 10, 26] </ref>. As solutions to fix an order for such rules the focusing principle [1], normal proofs [10], and proof search strategies [26] have been proposed. Though being improvements compared to simple sequent calculus proof search all these proposals suffer from that they are still connective oriented. <p> In proof search it suffices just to consider one possible order. This phenomenon is called permutability of rules and has been investigated for linear logic in [1, 10, 26]. As solutions to fix an order for such rules the focusing principle <ref> [1] </ref>, normal proofs [10], and proof search strategies [26] have been proposed. Though being improvements compared to simple sequent calculus proof search all these proposals suffer from that they are still connective oriented. <p> Upon reaching this wait 1 - label the algorithm will compute the t-greatest open predecessor of 6 , that is 1 . This node can now be marked as solved since wait 2 <ref> [ 1 ] </ref> not longer holds. No rule will be constructed since 1 is a special position which does not encode a sequent rule in Lin M . <p> In contrast to that our approach is based on prefixes and unifies the advantages of several approaches to proof search in linear logic without sharing their problems. Like Andreoli's focusing principle <ref> [1] </ref> and normal proofs [10] it avoids the permutabilities of sequent rules. Context splitting can be performed as efficiently as in resource management systems [5].
Reference: 2. <author> W. Bibel. </author> <title> On matrices with connections. </title> <journal> Journal of the ACM, </journal> <volume> 28 </volume> <pages> 633-645, </pages> <year> 1981. </year>
Reference-contexts: They yield a very compact representation of the search space and thus avoid many kinds of redundancies which usually occur in the sequent calculus and tableaux proof search methods. Originally developed as foundation of Bibel's connection method for classical logic <ref> [2, 4] </ref> they have later been extended to nonclassical logics by Wallen [27]. Wallen's formulation serves as a basis of a uniform proof method for a rich variety of logics [19, 21] and also allows to transform matrix proofs into sequent-style proofs by a uniform procedure [23, 24].
Reference: 3. <author> W. Bibel. </author> <title> A deductive solution for plan generation. </title> <journal> New Generation Computing, </journal> <volume> 4 </volume> <pages> 115-132, </pages> <year> 1986. </year>
Reference-contexts: By Wallen`s conjecture [27] matrix methods can be developed for any logic which has the same primary properties as classical logic. The linear connection method <ref> [3] </ref> has demonstrated that matrix methods can be resource sensitive. A desire for a matrix characterization of linear logic has already been expressed in [9].
Reference: 4. <author> W. Bibel. </author> <title> Automated theorem proving. </title> <publisher> Vieweg, </publisher> <year> 1987. </year>
Reference-contexts: They yield a very compact representation of the search space and thus avoid many kinds of redundancies which usually occur in the sequent calculus and tableaux proof search methods. Originally developed as foundation of Bibel's connection method for classical logic <ref> [2, 4] </ref> they have later been extended to nonclassical logics by Wallen [27]. Wallen's formulation serves as a basis of a uniform proof method for a rich variety of logics [19, 21] and also allows to transform matrix proofs into sequent-style proofs by a uniform procedure [23, 24]. <p> The path checking algorithm presented in the following is driven by connections instead of the logical connectives. Once a complementary connection has been identified all paths containing this connection are deleted. This is similar to Bibel's connection method for classical logic and formulas in clausal form <ref> [4] </ref>. The theoretical basis of the following algorithm is described in detail in [21] where it is used for proof search in classical, intuitionistic and modal logics. Only a few modifications were necessary to adapt it to MLL. Definition 7 (ff-related, fi-related).
Reference: 5. <author> I. Cervesato, J.S. Hodas, F. </author> <title> Pfenning Efficient resource management for linear logic proof search. Extensions of Logic Programming, </title> <publisher> LNAI 1050, </publisher> <pages> pp. 67-81, </pages> <year> 1996. </year>
Reference-contexts: This is called context splitting. Several solutions have been proposed in order to optimize these choices. Resource management systems have been proposed in <ref> [5] </ref> as efficient techniques for splitting contexts. If subsequent applications of two rules have no impact on each other their order is unimportant. In proof search it suffices just to consider one possible order. <p> Like Andreoli's focusing principle [1] and normal proofs [10] it avoids the permutabilities of sequent rules. Context splitting can be performed as efficiently as in resource management systems <ref> [5] </ref>. There is, however, no need for transformations in negational normal form or for following the connectives during proof search (an advantage also over Tammet's proof search strategies [26]).
Reference: 6. <author> V. Danos, L. </author> <title> Regnier The structure of the multiplicatives. </title> <journal> Archive for Mathematical Logic, </journal> <volume> 28 </volume> <pages> 181-203, </pages> <year> 1989. </year>
Reference-contexts: Because of the expressivity of logic, however, reasoning in linear logic is difficult to automate. Propositional linear logic is already undecidable. In order to prove a linear logic formula syntactically one has to rely on either sequent calculi or proof nets <ref> [12, 6] </ref>, a kind of natural deduction system with multiple conclusions. The former cover all of linear logic but are not useful for efficient proof search because of the many redundancies contained in them.
Reference: 7. <author> B. </author> <title> Fronhofer The action-as-implication paradigm, </title> <publisher> CS Press, </publisher> <year> 1996. </year>
Reference-contexts: Both methods could be adapted without modifications of the algorithmic structure. `Only' the entries of logic-dependent tables which are consulted by the algorithms had to be elaborated. Preliminary attempts for obtaining matrix characterizations in fragments of linear logic have been made on the basis of acyclic connection graphs <ref> [7, 8] </ref>. This acyclicity condition is very close to proof nets and these attempts will therefore very like have similar limitations. In contrast to that our approach is based on prefixes and unifies the advantages of several approaches to proof search in linear logic without sharing their problems. <p> There is, however, no need for transformations in negational normal form or for following the connectives during proof search (an advantage also over Tammet's proof search strategies [26]). Prefix-Unification appears to be as efficient as the acyclicity test implicitly contained in <ref> [7] </ref> but yields informations which make the conversion into sequent proofs more efficient. Checking the cardinality criterion instead of an exponential minimality test is another improvement. The most striking feature ouf our approach, however, is its generality and uniformity.
Reference: 8. <author> D. </author> <title> Galmiche Connection methods in linear logic fragments and proof nets construction. </title> <booktitle> CADE-13 workshop on proof search in type-theoretic languages, </booktitle> <year> 1996. </year>
Reference-contexts: Both methods could be adapted without modifications of the algorithmic structure. `Only' the entries of logic-dependent tables which are consulted by the algorithms had to be elaborated. Preliminary attempts for obtaining matrix characterizations in fragments of linear logic have been made on the basis of acyclic connection graphs <ref> [7, 8] </ref>. This acyclicity condition is very close to proof nets and these attempts will therefore very like have similar limitations. In contrast to that our approach is based on prefixes and unifies the advantages of several approaches to proof search in linear logic without sharing their problems.
Reference: 9. <author> D. Galmiche, G. Perrier. </author> <title> A procedure for automatic proof nets construction. </title> <journal> LPAR'92, </journal> <volume> LNAI 624, </volume> <pages> pp. 42-53, </pages> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: By Wallen`s conjecture [27] matrix methods can be developed for any logic which has the same primary properties as classical logic. The linear connection method [3] has demonstrated that matrix methods can be resource sensitive. A desire for a matrix characterization of linear logic has already been expressed in <ref> [9] </ref>. Because of a superficial similarity between matrix characterizations and proof nets it is very likely that this can be achieved at least for those fragments which can be handled by proof nets.
Reference: 10. <author> D. Galmiche, G. Perrier. </author> <title> On proof normalization in linear logic. </title> <journal> TCS, </journal> <volume> 135 </volume> <pages> 67-110, </pages> <year> 1994. </year>
Reference-contexts: The former cover all of linear logic but are not useful for efficient proof search because of the many redundancies contained in them. Attempts to remove permutabilities from sequent proofs <ref> [1, 10] </ref> and to add proof strategies [26] have provided some improvements but the main difficulties still remain. Proof nets, on the other hand, are applicable only to a small fragment of the logic. <p> If subsequent applications of two rules have no impact on each other their order is unimportant. In proof search it suffices just to consider one possible order. This phenomenon is called permutability of rules and has been investigated for linear logic in <ref> [1, 10, 26] </ref>. As solutions to fix an order for such rules the focusing principle [1], normal proofs [10], and proof search strategies [26] have been proposed. Though being improvements compared to simple sequent calculus proof search all these proposals suffer from that they are still connective oriented. <p> In proof search it suffices just to consider one possible order. This phenomenon is called permutability of rules and has been investigated for linear logic in [1, 10, 26]. As solutions to fix an order for such rules the focusing principle [1], normal proofs <ref> [10] </ref>, and proof search strategies [26] have been proposed. Though being improvements compared to simple sequent calculus proof search all these proposals suffer from that they are still connective oriented. <p> Proof reconstruction will now continue separately on each sub-ordering. For / ? 2 0 we continue by solving 6 and deleting the wait 1 -label which blocks 10 (called update). But now wait 2 <ref> [ 10 ] </ref> must be set dynamically since ff 6 is open (layer reduction). <p> In contrast to that our approach is based on prefixes and unifies the advantages of several approaches to proof search in linear logic without sharing their problems. Like Andreoli's focusing principle [1] and normal proofs <ref> [10] </ref> it avoids the permutabilities of sequent rules. Context splitting can be performed as efficiently as in resource management systems [5]. There is, however, no need for transformations in negational normal form or for following the connectives during proof search (an advantage also over Tammet's proof search strategies [26]).
Reference: 11. <author> V. Gehlot, C. Gunter. </author> <title> Normal process representatives. </title> <booktitle> In Proc. 5-th Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pp. 200-207, </pages> <year> 1991. </year>
Reference-contexts: Proof search in linear logic will therefore have many useful applications such as resource sensitive logic programming [14], modeling concurrent computation by petri nets <ref> [11] </ref>, and planning [17]. Because of the expressivity of logic, however, reasoning in linear logic is difficult to automate. Propositional linear logic is already undecidable.
Reference: 12. <author> J.-Y. Girard. </author> <title> Linear logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 50 </volume> <pages> 1-102, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction Linear logic <ref> [12] </ref> is often viewed as the most adequate formalism for reasoning about action and change in real world applications. Formulas can be considered as resources which disappear after their use unless they are explicitly marked as reusable. <p> Because of the expressivity of logic, however, reasoning in linear logic is difficult to automate. Propositional linear logic is already undecidable. In order to prove a linear logic formula syntactically one has to rely on either sequent calculi or proof nets <ref> [12, 6] </ref>, a kind of natural deduction system with multiple conclusions. The former cover all of linear logic but are not useful for efficient proof search because of the many redundancies contained in them. <p> Proof nets, on the other hand, are applicable only to a small fragment of the logic. In order to handle the other parts one has to introduce the concept of boxes <ref> [12] </ref> which again cause major problems for automated proof search. Although there has been progress in removing some boxes [13] efficient proof search for full linear logic appears to be beyond the scope of proof nets at this point of time. <p> Finally we shall discuss other recent approaches to reasoning within fragments of linear logic, current and future work, and evidence which makes us confident that extensions of our methods to larger parts of linear logic are possible. 2 A Matrix Characterization of Logical Validity in MLL Linear Logic <ref> [12] </ref> is a resource sensitive logic. From a proof theoretical point of view it can be seen as the outcome of removing the rules for contraction and weakening from classical sequent calculus and re-introducing them in a controlled manner. Linear negation ? is involutive like classical negation.
Reference: 13. <author> J.-Y. Girard. Proof-nets: </author> <title> the parallel syntax for proof-theory. </title> <booktitle> In Logic and Algebra, </booktitle> <volume> LNPAM 150, </volume> <pages> pp. 97-124, </pages> <year> 1996. </year>
Reference-contexts: In order to handle the other parts one has to introduce the concept of boxes [12] which again cause major problems for automated proof search. Although there has been progress in removing some boxes <ref> [13] </ref> efficient proof search for full linear logic appears to be beyond the scope of proof nets at this point of time. In classical and many non-classical logics matrix characterizations of logical validity have successfully been used as foundation for efficient proof search methods.
Reference: 14. <author> J.S. Hodas, D. Miller. </author> <title> Logic programming in a fragment of linear logic. </title> <journal> Journal of Information and Computation, </journal> <volume> 110(2) </volume> <pages> 327-365, </pages> <year> 1994. </year>
Reference-contexts: No frame axioms about the environment [18] need to be stated and one only has to deal with axioms about those objects which are involved in the action. Proof search in linear logic will therefore have many useful applications such as resource sensitive logic programming <ref> [14] </ref>, modeling concurrent computation by petri nets [11], and planning [17]. Because of the expressivity of logic, however, reasoning in linear logic is difficult to automate. Propositional linear logic is already undecidable.
Reference: 15. <author> H. Mantel. </author> <title> Eine Matrixcharakterisierung fur ein Fragment der linearen Logik. </title> <address> Diplomarbeit, TH-Darmstadt, Germany, </address> <year> 1996. </year>
Reference-contexts: This implies that L is not admissible for the image of some prefix and for some i a contradiction. We state the correctness and completeness of our characterization and sketch the proofs only due to limitations of space. The complete proofs can be found in <ref> [15] </ref>. All proofs are based on a sequent calculus for linear logic and do not use any criterions from proof nets. Thus, they can serve as a basis for extensions to other fragments of linear logic. Lemma 3 (Correctness). <p> Using a reduction ordering induced by L a sequent proof can be constructed in an analytic fashion. Connections become the elements of initial sequents in the sequent proof. This construction uses the sequent calculus K MLL introduced in <ref> [15] </ref>. The correctness of the construction procedure is proven by induction on the weight of sequences. For the complete proof of the lemma we refer to [15]. Lemma 4 (Completeness). If F is a valid formula then the corresponding position tree T is complementary. Proof sketch. <p> Connections become the elements of initial sequents in the sequent proof. This construction uses the sequent calculus K MLL introduced in <ref> [15] </ref>. The correctness of the construction procedure is proven by induction on the weight of sequences. For the complete proof of the lemma we refer to [15]. Lemma 4 (Completeness). If F is a valid formula then the corresponding position tree T is complementary. Proof sketch. Since F is valid a sequent proof P for ` F exists. We construct a connection from every application of the axiom -rule in P . <p> We substitute by an ordered string of constant special positions such that for every position in the string the label of is reduced before but after every special position b t . The lengthy proof in <ref> [15] </ref> that T is complementary for C and L uses induction on the structure of P . The following theorem is the foundation for matrix proof methods (based on our characterization) which prove the validity of linear logic formulas. Theorem 5. <p> This cardinality criterion optimizes proof search in MLL but may not generalize to larger fragments of linear logic (see <ref> [15] </ref> for details). T-String Unification. In our path checking algorithm we have to ensure that after adding a connection to the current set Con there still is a (multiplicative) substitution L under which all connections are complementary. <p> Similar to [24], we have achieved a "completion" of by dynamically adding wait-labels to certain nodes which prevent the corresponding sequent rules from being applied too early. This concept fills the gap between the target calculus Lin M (Figure 1) of our conversion and a sequent calculus K MLL <ref> [15] </ref> on which the matrix characterization is based. Proof Reconstruction in MLL. Our algorithm takes as input a reduction ordering / ? which for technical reasons is generated from by adding a new root w.
Reference: 16. <author> A. Martelli, U. Montanari. </author> <title> An efficient unification algorithm. </title> <journal> ACM TOPLAS, </journal> <volume> 4 </volume> <pages> 258-282, </pages> <year> 1982. </year>
Reference-contexts: This restriction allows us to give an efficient algorithm computing a minimal set of most general unifiers. Similar to the ideas of Martelli and Montanari <ref> [16] </ref> rather than by giving a recursive procedure we consider the process of unification as a sequence of transformations. We start with the given set of (prefix-) equations = fp 1 =q 1 ; : : : ; p n =q n g and an empty substitution L =;.
Reference: 17. <author> M. Masseron, C. Tollu, J. </author> <title> Vauzielles Generating plans in linar logic. </title> <booktitle> In Foundations of Software Technology and Theoretical Computer Science, </booktitle> <volume> LNCS 472, </volume> <pages> pp. 63-75, </pages> <publisher> Springer, </publisher> <year> 1990. </year>
Reference-contexts: Proof search in linear logic will therefore have many useful applications such as resource sensitive logic programming [14], modeling concurrent computation by petri nets [11], and planning <ref> [17] </ref>. Because of the expressivity of logic, however, reasoning in linear logic is difficult to automate. Propositional linear logic is already undecidable.
Reference: 18. <author> J. McCarthy, P.H. </author> <title> Hayes Some philosophical problems from the standpoint of Artificial Intelligence Machine Intelligence,4:463-502, </title> <year> 1969. </year>
Reference-contexts: 1 Introduction Linear logic [12] is often viewed as the most adequate formalism for reasoning about action and change in real world applications. Formulas can be considered as resources which disappear after their use unless they are explicitly marked as reusable. No frame axioms about the environment <ref> [18] </ref> need to be stated and one only has to deal with axioms about those objects which are involved in the action. Proof search in linear logic will therefore have many useful applications such as resource sensitive logic programming [14], modeling concurrent computation by petri nets [11], and planning [17].
Reference: 19. <author> J. Otten, C. </author> <title> Kreitz. A connection based proof method for intuitionistic logic. </title> <booktitle> 4 th TABLEAUX Workshop, LNAI 918, </booktitle> <pages> pp. 122-137, </pages> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Originally developed as foundation of Bibel's connection method for classical logic [2, 4] they have later been extended to nonclassical logics by Wallen [27]. Wallen's formulation serves as a basis of a uniform proof method for a rich variety of logics <ref> [19, 21] </ref> and also allows to transform matrix proofs into sequent-style proofs by a uniform procedure [23, 24]. By Wallen`s conjecture [27] matrix methods can be developed for any logic which has the same primary properties as classical logic.
Reference: 20. <author> J. Otten, C. </author> <title> Kreitz. T-string-unification: unifying prefixes in non-classical proof methods. </title> <booktitle> 5 th TABLEAUX Workshop, LNAI 1071, </booktitle> <pages> pp. 244-260, </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: V 0 * V 0 is a new variable which does not occur in the substitution L computed so far. Table 2. Transformation Rules for Multiplicative Linear Logic (MLL) These rules are identical with the rules used in [21] and <ref> [20] </ref> which deal with intuitionistic logic. <p> For a comprehensive treatment of the algorithm for T-string unification to- gether with an intuitive graphical motivation we refer to <ref> [20] </ref>. Example 4.
Reference: 21. <author> J. Otten, C. </author> <title> Kreitz. A uniform proof procedure for classical and non-classical logics. </title> <booktitle> KI-96: Advances in Artificial Intelligence, LNAI 1137, </booktitle> <pages> pp. 307-319, </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Originally developed as foundation of Bibel's connection method for classical logic [2, 4] they have later been extended to nonclassical logics by Wallen [27]. Wallen's formulation serves as a basis of a uniform proof method for a rich variety of logics <ref> [19, 21] </ref> and also allows to transform matrix proofs into sequent-style proofs by a uniform procedure [23, 24]. By Wallen`s conjecture [27] matrix methods can be developed for any logic which has the same primary properties as classical logic. <p> Once a complementary connection has been identified all paths containing this connection are deleted. This is similar to Bibel's connection method for classical logic and formulas in clausal form [4]. The theoretical basis of the following algorithm is described in detail in <ref> [21] </ref> where it is used for proof search in classical, intuitionistic and modal logics. Only a few modifications were necessary to adapt it to MLL. Definition 7 (ff-related, fi-related). <p> All variables except for A and Con are local. Function Subproof MLL (F; P; C) Input: formula F , active path PA, proven subgoals CA Output: true, if (P; C) wrt. F is provable (see <ref> [21] </ref>); false, otherwise begin Subproof MLL ; if there is no A * A where A~ ff P and A~ fi C then return true; E := ;; Con 0 := Con; repeat select A * A where A~ ff (P [E) and A~ fi C; if there is no such <p> All paths which contain the active path P and additionally one element of the proven subgoals C will already have been proven complementary. The only modifications wrt. <ref> [21] </ref> are an additional set Con which contains the connections computed so far and the two additional functions Line (F; Con) and Mini Rele (F; Con). Line returns true iff Con is linear wrt. F . Mini Rele returns true iff Con is minimal and relevant wrt. <p> V 0 * V 0 is a new variable which does not occur in the substitution L computed so far. Table 2. Transformation Rules for Multiplicative Linear Logic (MLL) These rules are identical with the rules used in <ref> [21] </ref> and [20] which deal with intuitionistic logic. <p> TOTAL terminates because the set of unsolved positions is decreased by each step. 5 Conclusion We have presented a matrix characterization of logical validity in the multiplicative fragment of linear logic MLL. On this basis we have extended our uniform proof search method <ref> [21] </ref> into a matrix-based proof procedure for MLL and our uniform transformation method [24] into a procedure for translating the resulting matrix proofs back into a sequent proof.
Reference: 22. <author> J. Otten. ileanTAP: </author> <title> An intuitionistic theorem prover. </title> <booktitle> International Conference TABLEAUX'97, </booktitle> <publisher> LNAI, Springer Verlag, </publisher> <year> 1997. </year>
Reference-contexts: In this section we will describe a general path checking algorithm as well as the corresponding complementarity test which involves an algorithm for T-string unification. Path Checking. One possibility to perform proof search is to use an algorithm based on analytic tableaux as done in <ref> [22] </ref> for intuitionistic logic. The path checking algorithm presented in the following is driven by connections instead of the logical connectives. Once a complementary connection has been identified all paths containing this connection are deleted.
Reference: 23. <author> S. Schmitt, C. </author> <title> Kreitz. On transforming intuitionistic matrix proofs into standard-sequent proofs. </title> <booktitle> 4 th TABLEAUX Workshop, LNAI 918, </booktitle> <pages> pp. 106-121, </pages> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Wallen's formulation serves as a basis of a uniform proof method for a rich variety of logics [19, 21] and also allows to transform matrix proofs into sequent-style proofs by a uniform procedure <ref> [23, 24] </ref>. By Wallen`s conjecture [27] matrix methods can be developed for any logic which has the same primary properties as classical logic. The linear connection method [3] has demonstrated that matrix methods can be resource sensitive.
Reference: 24. <author> S. Schmitt, C. </author> <title> Kreitz. Converting non-classical matrix proofs into sequent-style systems. </title> <journal> CADE-13, </journal> <volume> LNAI 1104, </volume> <pages> pp. 418-432, </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Wallen's formulation serves as a basis of a uniform proof method for a rich variety of logics [19, 21] and also allows to transform matrix proofs into sequent-style proofs by a uniform procedure <ref> [23, 24] </ref>. By Wallen`s conjecture [27] matrix methods can be developed for any logic which has the same primary properties as classical logic. The linear connection method [3] has demonstrated that matrix methods can be resource sensitive. <p> 0 A 1 ~ A 1 Con := ffA 0 ; A 1 g; fB 0 ; B 1 g; f ~ A 1 ; ~ A 0 gg 10 n 1 6 20 g where 20 is a new variable. 4 Transforming MLL Matrix Proofs into Sequent Proofs In <ref> [24, 25] </ref> we have developed a conversion procedure for transforming matrix proofs into conventional sequent proofs for classical and non-classical logics. When constructing this procedure our main emphasis was the uniformity of the approach according to the matrix characterizations for these logics [27]. <p> In order to convert MLL-matrix proofs into sequent proofs the procedure has to obtain a linearization of the partial reduction ordering . Essentially this can be done by traversing but certain non-permutabilities of sequent rules which are not yet represented in have to be respected as well. Similar to <ref> [24] </ref>, we have achieved a "completion" of by dynamically adding wait-labels to certain nodes which prevent the corresponding sequent rules from being applied too early. <p> B) ? Adapting the Conversion Algorithm to MLL. From the above example we develop the concepts for the conversion procedure. We omit formal details (see <ref> [24, 25] </ref>) in order to emphasize properties which are specific to MLL. function TOTAL (/ ? ; MLL) : S-list = for all x 2 positions (/ ? ) do solved [x] := ?; solved [root (/ ? )] := &gt;; return TOT (/ ? ; MLL) function TOT (/ ? <p> On this basis we have extended our uniform proof search method [21] into a matrix-based proof procedure for MLL and our uniform transformation method <ref> [24] </ref> into a procedure for translating the resulting matrix proofs back into a sequent proof. Both methods could be adapted without modifications of the algorithmic structure. `Only' the entries of logic-dependent tables which are consulted by the algorithms had to be elaborated.
Reference: 25. <author> S. Schmitt, C. </author> <title> Kreitz. A uniform procedure for converting non-classical matrix proofs into sequent-style systems. </title> <journal> Journal of Information and Computation, </journal> <note> submitted. </note>
Reference-contexts: 0 A 1 ~ A 1 Con := ffA 0 ; A 1 g; fB 0 ; B 1 g; f ~ A 1 ; ~ A 0 gg 10 n 1 6 20 g where 20 is a new variable. 4 Transforming MLL Matrix Proofs into Sequent Proofs In <ref> [24, 25] </ref> we have developed a conversion procedure for transforming matrix proofs into conventional sequent proofs for classical and non-classical logics. When constructing this procedure our main emphasis was the uniformity of the approach according to the matrix characterizations for these logics [27]. <p> B) ? Adapting the Conversion Algorithm to MLL. From the above example we develop the concepts for the conversion procedure. We omit formal details (see <ref> [24, 25] </ref>) in order to emphasize properties which are specific to MLL. function TOTAL (/ ? ; MLL) : S-list = for all x 2 positions (/ ? ) do solved [x] := ?; solved [root (/ ? )] := &gt;; return TOT (/ ? ; MLL) function TOT (/ ? <p> The definitions on the right hand side of Figure 5 summarize the necessary concepts which we introduced informally in Example 5. For context splitting at fi-positions x we have adopted the operation split (/ ? ; x) from <ref> [25] </ref>. It first divides / ? into two subrelations / ? 1 ; / ? 2 where each / ? i contains the successor tree of x having root x i 2 succ (x). The connections C i and the relation &lt; L i are divided accordingly.
Reference: 26. <author> T. Tammet. </author> <title> Proof strategies in linear logic. </title> <journal> Jour. of Automated Reasoning, </journal> <volume> 12 </volume> <pages> 273-304, </pages> <year> 1994. </year>
Reference-contexts: The former cover all of linear logic but are not useful for efficient proof search because of the many redundancies contained in them. Attempts to remove permutabilities from sequent proofs [1, 10] and to add proof strategies <ref> [26] </ref> have provided some improvements but the main difficulties still remain. Proof nets, on the other hand, are applicable only to a small fragment of the logic. <p> If subsequent applications of two rules have no impact on each other their order is unimportant. In proof search it suffices just to consider one possible order. This phenomenon is called permutability of rules and has been investigated for linear logic in <ref> [1, 10, 26] </ref>. As solutions to fix an order for such rules the focusing principle [1], normal proofs [10], and proof search strategies [26] have been proposed. Though being improvements compared to simple sequent calculus proof search all these proposals suffer from that they are still connective oriented. <p> In proof search it suffices just to consider one possible order. This phenomenon is called permutability of rules and has been investigated for linear logic in [1, 10, 26]. As solutions to fix an order for such rules the focusing principle [1], normal proofs [10], and proof search strategies <ref> [26] </ref> have been proposed. Though being improvements compared to simple sequent calculus proof search all these proposals suffer from that they are still connective oriented. <p> Context splitting can be performed as efficiently as in resource management systems [5]. There is, however, no need for transformations in negational normal form or for following the connectives during proof search (an advantage also over Tammet's proof search strategies <ref> [26] </ref>). Prefix-Unification appears to be as efficient as the acyclicity test implicitly contained in [7] but yields informations which make the conversion into sequent proofs more efficient. Checking the cardinality criterion instead of an exponential minimality test is another improvement.
Reference: 27. <author> L. Wallen. </author> <title> Automated deduction in non-classical logics. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Originally developed as foundation of Bibel's connection method for classical logic [2, 4] they have later been extended to nonclassical logics by Wallen <ref> [27] </ref>. Wallen's formulation serves as a basis of a uniform proof method for a rich variety of logics [19, 21] and also allows to transform matrix proofs into sequent-style proofs by a uniform procedure [23, 24]. By Wallen`s conjecture [27] matrix methods can be developed for any logic which has the <p> 4] they have later been extended to nonclassical logics by Wallen <ref> [27] </ref>. Wallen's formulation serves as a basis of a uniform proof method for a rich variety of logics [19, 21] and also allows to transform matrix proofs into sequent-style proofs by a uniform procedure [23, 24]. By Wallen`s conjecture [27] matrix methods can be developed for any logic which has the same primary properties as classical logic. The linear connection method [3] has demonstrated that matrix methods can be resource sensitive. A desire for a matrix characterization of linear logic has already been expressed in [9]. <p> In this paper we begin this work by investigating the multiplicative fragment of linear logic (MLL). We shall develop a matrix characterization of logical validity in MLL whose formulation is close to Wallen's characterization of validity in modal logics <ref> [27] </ref> and prove it to be correct and complete (Section 2). On this basis we shall extend our uniform proof method into one that generates matrix proofs for MLL (Section 3) and our uniform transformation procedure into one that converts the matrix proof back into a sequent proof (Section 4). <p> The motivation for the insertion of special positions will become clearer after the definition of L -complementarity. Note, however, that special positions for MLL seperate layers of formulas instead of marking formulas with specific connectives which is done for intuitionistic logic <ref> [27] </ref>. 1 fi 2 ff 3 ff 4 fi fi a a Fig. 2. <p> The reduction ordering = (t [&lt; L ) + is the transitive closure of this relation and the tree ordering. Irreflexivity of a reduction ordering would become a separate requirement only if as in first order modal logics <ref> [27] </ref> a combined substitution is used. We expect that such a substitution would be required for linear logics when the fragment will be extended. An equivalent theorem for the propositional modal logics in [27] could be shown similarly. Theorem 2. <p> of a reduction ordering would become a separate requirement only if as in first order modal logics <ref> [27] </ref> a combined substitution is used. We expect that such a substitution would be required for linear logics when the fragment will be extended. An equivalent theorem for the propositional modal logics in [27] could be shown similarly. Theorem 2. If a set of connections C is L -complementary for a position tree T then the reduction ordering induced by L is irreflexive. Proof. Assume that there exists a position b such that bb holds. <p> When constructing this procedure our main emphasis was the uniformity of the approach according to the matrix characterizations for these logics <ref> [27] </ref>. To emphasize uniformity we have developed unified representations of matrix characterizations and sequent calculi which were divided into variant and invariant parts. The division resulted in an invariant transformation algorithm which consults a variant table system reflecting different properties of the logics.
References-found: 27

