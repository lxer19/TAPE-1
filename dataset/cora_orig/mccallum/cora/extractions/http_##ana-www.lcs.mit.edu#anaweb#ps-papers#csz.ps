URL: http://ana-www.lcs.mit.edu/anaweb/ps-papers/csz.ps
Refering-URL: http://www.cs.washington.edu/education/courses/590s/w98/index.html
Root-URL: 
Email: ddc@lcs.mit.edu  lixia@parc.xerox.com  
Title: Supporting Real-Time Applications in an Integrated Services Packet Network: Architecture and Mechanism  
Author: David D. Clark Scott Shenker Lixia Zhang 
Address: shenker,  
Affiliation: Laboratory for Computer Science Massachusetts Institute of Technology  Palo Alto Research Center Xerox Corporation  
Abstract: This paper considers the support of real-time applications in an Integrated Services Packet Network (ISPN). We first review the characteristics of real-time applications. We observe that, contrary to the popular view that real-time applications necessarily require a fixed delay bound, some real-time applications are more flexible and can adapt to current network conditions. We then propose an ISPN architecture that supports two distinct kinds of real-time service: guaranteed service, which is the traditional form of real-time service discussed in most of the literature and involves pre-computed worst-case delay bounds, and predicted service which uses the measured performance of the network in computing delay bounds. We then propose a packet scheduling mechanism that can support both of these real-time services as well as accommodate datagram traffic. We also discuss two other aspects of an overall ISPN architecture: the service interface and the admission control criteria. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Chipalkatti, J. Kurose, and D. Towsley. </author> <title> Scheduling Policies for Real-Time and Non-Real-Time Traffic in a Statistical Multiplexer, </title> <booktitle> In Proceedings of GlobeCom '89, </booktitle> <pages> pp 774-783, </pages> <year> 1989. </year>
Reference: [2] <author> S. </author> <title> Casner private communication, </title> <year> 1992. </year>
Reference: [3] <author> R. Cocchi, D. Estrin, S. Shenker, and L. Zhang. </author> <title> A Study of Priority Pricing in Multiple Service Class Networks, </title> <booktitle> In Proceedings of SIGCOMM '91, </booktitle> <pages> pp 123-130, </pages> <year> 1991. </year>
Reference-contexts: We conclude with one last observation: pricing must be a basic part of any complete ISPN architecture. If all services are free, there is no incentive to request less than the best service the network can provide, which will not produce effective utilization of the network's resources (see Reference <ref> [3] </ref> for a discussion of these issues). The sharing model in existing datagram networks deals with overload by giving everyone a smaller share; the equivalent in real-time services would be to refuse most requests most of the time, which would be very unsatisfactory.
Reference: [4] <author> A. Demers, S. Keshav, and S. Shenker. </author> <title> Analysis and Simulation of a Fair Queueing Algorithm, </title> <journal> In Journal of Internetworking: Research and Experience, </journal> <volume> 1, </volume> <pages> pp. 3-26, </pages> <year> 1990. </year> <booktitle> Also in Proc. ACM SIGCOMM '89, </booktitle> <pages> pp 3-12. </pages>
Reference-contexts: This leads us to propose, in Section 3, that the ISPN support two kinds of real-time service commitments: guaranteed service and predicted service. In Section 4 we present a time-stamp based scheduling algorithm which is a nonuniformly weighted version of the Fair Queueing algorithm discussed in Reference <ref> [4] </ref>, and then refer to a recent result due to Parekh and Gal-lager (see References [19, 20]) which states that, under certain conditions, this algorithm delivers guaranteed service in a network of arbitrary topology. <p> One of the first such time-stamp algorithms was the Fair Queueing algorithm introduced in Reference <ref> [4] </ref>. This algorithm was targeted at the traditional data service archi tecture, and so involved no preallocation of resources (and thus had each r ff = where denotes the link speed). <p> In addition, a weighted version of the Fair Queueing algorithm (which we refer to as WFQ), in which the r ff need not all be equal, was also briefly described in Reference <ref> [4] </ref> 5 . The VirtualClock algorithm, described in References [25, 26], involves an extremely similar underlying packet scheduling algorithm, but was expressly designed for a context where resources were preapportioned and thus had as a fundamental part of its architecture the assumption that the shares r ff were arbitrary. <p> They have proven an important result that this algorithm, under certain conditions, can deliver a guaranteed quality of service ([20]). We present a brief summary of the WFQ algorithm below, since we make use of it in our overall scheduling algorithm; see References <ref> [4, 20] </ref> for more details. First, consider some set of flows and a set of clock rates r ff . <p> This result can be motivated by noting that if the source traffic were put through a leaky bucket filter of rate r at the edge of the network 6 , then the 5 The weighted version of Fair Queueing is mentioned on page 24 of Reference <ref> [4] </ref>, though not referred to by the name Weighted Fair Queueing. 6 In a fluid flow version of a leaky bucket of rate r, the bits drain out at a constant rate r and any excess is queued. flow would not suffer any further queueing delays within the network since the <p> This algorithm is called a time-stamp based scheme because there is an alternative but equivalent formulation in which each packet is stamped with a time-stamp as it arrives and then packets are transmitted in increasing order of time-stamps; see References <ref> [4, 20] </ref> for details on this formulation. Parekh and Gallager have shown that a bound, similar to the fluid flow bound, applies to this packetized algorithm as well. However, the formulae for the delays in the packetized case are significantly more complicated; see Reference [20] for details. <p> We cannot hope to cover all of the relevant literature in this brief review; instead, we mention only a few representative references. Though the WFQ scheduling algorithm was first described in Reference <ref> [4] </ref>, Parekh and Gallager were the first to observe that, when the weights are chosen appropriately and the traffic sources conform to token bucket filters, the scheduling algorithm provides guaranteed service.
Reference: [5] <author> J. DeTreville and D. Sincoskie. </author> <title> A Distributed Experi--mental Communications System, </title> <journal> In IEEE JSAC, </journal> <volume> Vol. 1, No. 6, </volume> <pages> pp 1070-1075, </pages> <month> December </month> <year> 1983. </year>
Reference-contexts: have to carry, it can allocate its resources in a much more efficient manner. 3 Service Commitments Clearly, for a network to make a service commitment to a particular client, it must know beforehand some characteri 4 Yet another example of an adaptive packet voice application is described in Reference <ref> [5] </ref>. zation of the traffic that will be offered by that client. For the network to reliably meet its service commitment, the client must meet its traffic commitment (i.e., its traffic must conform to the characterization it has passed to the network).
Reference: [6] <author> D. Ferrari. </author> <title> Distributed Delay Jitter Control in Packet-Switching Internetworks, </title> <type> preprint, </type> <year> 1991. </year>
Reference: [7] <author> D. Ferrari and D. Verma. </author> <title> A Scheme for Real-Time Channel Establishment in Wide-Area Networks, </title> <journal> In IEEE JSAC, </journal> <volume> Vol. 8, No. 4, </volume> <pages> pp 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: WFQ is similar in spirit, though not in detail, to the Delay-EDD scheme proposed in Reference <ref> [7] </ref> and the MARS scheme proposed in References [12, 13], in that the use of a deadline for scheduling in Delay-EDD and MARS are analogous to the virtual departure time-stamps used in WFQ. However, the algorithms used to compute the time-stamps/deadlines are quite different in the three algorithms.
Reference: [8] <author> S. J. Golestani. </author> <title> A Stop and Go Queueing Framework for Congestion Management, </title> <booktitle> In Proceedings of SIG-COMM '90, </booktitle> <pages> pp 8-18, </pages> <year> 1990. </year>
Reference: [9] <author> S. J. Golestani. </author> <title> Duration-Limited Statistical Multiplexing of Delay Sensitive Traffic in Packet Networks, </title> <booktitle> In Proceedings of INFOCOM '91, </booktitle> <year> 1991. </year>
Reference: [10] <author> R. Guerin and L. Gun. </author> <title> A Unified Approach to Bandwidth Allocation and Access Control in Fast Packet-Switched Networks, </title> <note> To appear in Proceedings of IN-FOCOM '92. </note>
Reference-contexts: In contrast to our scheme, their scheme uses enforcement of traffic filters at every switch as an additional form of isolation, and they use round-robin instead of FIFO within a given priority level 7 . Moreover, there is no provision for guaranteed service in their mechanism. References <ref> [10, 11] </ref> present admission control policies involving the concept of equivalent capacity and then discuss traffic filters (those references use the term access controls) related to those admission control policies.
Reference: [11] <author> R. Guerin, H. Ahmadi, and M. Naghshineh. </author> <title> Equivalent Capacity and Its Application to Bandwidth Allocation in High-Speed Networks, </title> <journal> In IEEE JSAC, </journal> <volume> Vol. 9, No. 9, </volume> <pages> pp 968-981, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: In contrast to our scheme, their scheme uses enforcement of traffic filters at every switch as an additional form of isolation, and they use round-robin instead of FIFO within a given priority level 7 . Moreover, there is no provision for guaranteed service in their mechanism. References <ref> [10, 11] </ref> present admission control policies involving the concept of equivalent capacity and then discuss traffic filters (those references use the term access controls) related to those admission control policies.
Reference: [12] <author> J. Hyman and A. Lazar. </author> <title> MARS: The Magnet II Real-Time Scheduling Algorithm, </title> <booktitle> In Proceedings of SIG-COMM '91, </booktitle> <pages> pp 285-293, </pages> <year> 1991. </year>
Reference-contexts: WFQ is similar in spirit, though not in detail, to the Delay-EDD scheme proposed in Reference [7] and the MARS scheme proposed in References <ref> [12, 13] </ref>, in that the use of a deadline for scheduling in Delay-EDD and MARS are analogous to the virtual departure time-stamps used in WFQ. However, the algorithms used to compute the time-stamps/deadlines are quite different in the three algorithms. <p> Furthermore, Reference [13] makes the same observation that deadline scheduling in a homogeneous class leads to FIFO. Reference <ref> [12] </ref> also observed that strict priority does not permit as many sources to share a link as a scheme that more actively manages jitter shifting. This work thus represents an example of queue management to increase link loading, as opposed to expanded service offerings.
Reference: [13] <author> J. Hyman, A. Lazar, and G. Pacifici. </author> <title> Real-Time Scheduling with Quality of Service Constraints, </title> <journal> In IEEE JSAC, </journal> <volume> Vol. 9, No. 9, </volume> <pages> pp 1052-1063, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: The link is 83.5% utilized. time, the deadline scheduling algorithm becomes, surprisingly, FIFO; the packet that is closest to its deadline is the one that arrived first. Hyman, Lazar, and Pacifici, in Reference <ref> [13] </ref>, also make this observation that FIFO is merely a special case of deadline scheduling. Consider what happens when we use the FIFO queueing discipline instead of WFQ. <p> WFQ is similar in spirit, though not in detail, to the Delay-EDD scheme proposed in Reference [7] and the MARS scheme proposed in References <ref> [12, 13] </ref>, in that the use of a deadline for scheduling in Delay-EDD and MARS are analogous to the virtual departure time-stamps used in WFQ. However, the algorithms used to compute the time-stamps/deadlines are quite different in the three algorithms. <p> Also, we should note that the MARS scheduling algorithm uses FIFO scheduling within a class of aggregated traffic in a fashion very similar to our use of FIFO within each predicted service class. Furthermore, Reference <ref> [13] </ref> makes the same observation that deadline scheduling in a homogeneous class leads to FIFO. Reference [12] also observed that strict priority does not permit as many sources to share a link as a scheme that more actively manages jitter shifting.
Reference: [14] <author> V. Jacobson and S. </author> <type> Floyd private communication, </type> <year> 1991. </year>
Reference: [15] <author> V. </author> <type> Jacobson private communication, </type> <year> 1991. </year>
Reference: [16] <author> C. Kalmanek, H. Kanakia, and S. Keshav. </author> <title> Rate Controlled Servers for Very High-Speed Networks, </title> <booktitle> In Proceedings of GlobeCom '90, </booktitle> <pages> pp 300.3.1-300.3.9, </pages> <year> 1990. </year>
Reference: [17] <author> C. Liu and J. Layland. </author> <title> Scheduling Algorithms for Multiprogramming in a Hard Real Time Environment, </title> <journal> In Journal of ACM, </journal> <volume> 20, </volume> <pages> pp. 46-61, </pages> <year> 1973. </year>
Reference-contexts: The nature of play-back real-time applications allows the scheduling algorithm to delay all packets up to the play-back point without adversely affecting the application's performance. Thus, one can think of the play-back point as a deadline. For such problems, the standard earliest-deadline-first scheduling algorithm, as described in Reference <ref> [17] </ref>, has been proven optimal. However, in our gedanken experiment the play-back points are not set a priori, as in the above reference, but are rather the result of the clients adapting to the current level of delay.
Reference: [18] <author> S. Lu and P. R. Kumar. </author> <title> Distributed Scheduling Based on Due Dates and Buffer Priorities, </title> <journal> In IEEE Transactions on Automatic Control, </journal> <volume> 36, </volume> <pages> pp 1406-1416, </pages> <year> 1991. </year>
Reference-contexts: The key is to correlate the sharing experience which a packet has at the successive nodes in its path. We call this scheme FIFO+. In priciple, FIFO+ is very similar to the least slack scheduling algorithms for manufacturing systems discussed in Reference <ref> [18] </ref>. In FIFO+, we try to induce FIFO-style sharing (equal jitter for all sources in the aggregate class) across all the hops along the path to minimize jitter. We do this as follows.
Reference: [19] <author> A. Parekh and R. Gallager. </author> <title> A Generalized Processor Sharing Approach to Flow Control- The Single Node Case, </title> <note> In Technical Report LIDS-TR-2040, </note> <institution> Laboratory for Information and Decision Systems, Mas-sachusetts Institute of Technology, </institution> <year> 1991. </year>
Reference-contexts: In Section 4 we present a time-stamp based scheduling algorithm which is a nonuniformly weighted version of the Fair Queueing algorithm discussed in Reference [4], and then refer to a recent result due to Parekh and Gal-lager (see References <ref> [19, 20] </ref>) which states that, under certain conditions, this algorithm delivers guaranteed service in a network of arbitrary topology. We then turn, in Sections 5 and 6, to the scheduling algorithms best suited for providing predicted service. <p> Parekh and Gallager, in Reference <ref> [19] </ref>, reintroduce the WFQ algorithm under the name of packetized generalized processor sharing (PGPS). They have proven an important result that this algorithm, under certain conditions, can deliver a guaranteed quality of service ([20]).
Reference: [20] <author> A. Parekh. </author> <title> A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networks, </title> <note> In Technical Report LIDS-TR-2089, </note> <institution> Laboratory for Information and Decision Systems, Massachusetts Institute of Technology, </institution> <year> 1992. </year>
Reference-contexts: In Section 4 we present a time-stamp based scheduling algorithm which is a nonuniformly weighted version of the Fair Queueing algorithm discussed in Reference [4], and then refer to a recent result due to Parekh and Gal-lager (see References <ref> [19, 20] </ref>) which states that, under certain conditions, this algorithm delivers guaranteed service in a network of arbitrary topology. We then turn, in Sections 5 and 6, to the scheduling algorithms best suited for providing predicted service. <p> They have proven an important result that this algorithm, under certain conditions, can deliver a guaranteed quality of service ([20]). We present a brief summary of the WFQ algorithm below, since we make use of it in our overall scheduling algorithm; see References <ref> [4, 20] </ref> for more details. First, consider some set of flows and a set of clock rates r ff . <p> This algorithm is called a time-stamp based scheme because there is an alternative but equivalent formulation in which each packet is stamped with a time-stamp as it arrives and then packets are transmitted in increasing order of time-stamps; see References <ref> [4, 20] </ref> for details on this formulation. Parekh and Gallager have shown that a bound, similar to the fluid flow bound, applies to this packetized algorithm as well. However, the formulae for the delays in the packetized case are significantly more complicated; see Reference [20] for details. <p> Parekh and Gallager have shown that a bound, similar to the fluid flow bound, applies to this packetized algorithm as well. However, the formulae for the delays in the packetized case are significantly more complicated; see Reference <ref> [20] </ref> for details. To understand the relation between the clock rate r, the bucket size b (r) and the resultant delay, consider what happens to a burst of packets. The packet that receives the highest queueing delay is the last packet of a burst.
Reference: [21] <author> H. Schulzrinne, J. Kurose, and D. Towsley. </author> <title> Congestion Control for Real-Time Traffic, </title> <booktitle> In Proceedings of INFOCOM '90. </booktitle>
Reference: [22] <author> D. Verma, H. Zhang, and D. Ferrari. </author> <title> Delay Jitter Control for Real-Time Communication in a Packet Switching Network, </title> <booktitle> In Proceedings of TriCom '91, </booktitle> <pages> pp 35-43, </pages> <year> 1991. </year>
Reference: [23] <author> C. Weinstein and J. Forgie. </author> <title> Experience with Speech Communication in Packet Networks, </title> <journal> In IEEE JSAC, </journal> <volume> Vol. 1, No. 6, </volume> <pages> pp 963-980, </pages> <month> December </month> <year> 1983. </year>
Reference: [24] <author> H. Zhang and S. Keshav. </author> <title> Comparison of Rate-Based Service Disciplines, </title> <booktitle> In Proceedings of SIGCOMM '91, </booktitle> <pages> pp 113-121, </pages> <year> 1991. </year>
Reference-contexts: All of these bear a superficial similarity to WFQ in that packets are scheduled according to some deadline or frame; the difference is that the packets are not allowed to leave early. These algorithms typically deliver higher average delays in return for lower jitter. See the review studies <ref> [24, 27] </ref> for a more detailed comparison of these schemes. The Jitter-EDD ([6, 22]) algorithm make use of a delay field in the packet header to inform scheduling decisions, much like the FIFO+ algorithm.
Reference: [25] <author> L. Zhang. </author> <title> A New Architecture for Packet Switching Network Protocols, </title> <note> In Technical Report LCS-TR-455, </note> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <year> 1989. </year>
Reference-contexts: In addition, a weighted version of the Fair Queueing algorithm (which we refer to as WFQ), in which the r ff need not all be equal, was also briefly described in Reference [4] 5 . The VirtualClock algorithm, described in References <ref> [25, 26] </ref>, involves an extremely similar underlying packet scheduling algorithm, but was expressly designed for a context where resources were preapportioned and thus had as a fundamental part of its architecture the assumption that the shares r ff were arbitrary.
Reference: [26] <author> L. Zhang. VirtualClock: </author> <title> A New Traffic Control Algorithm for Packet Switching Networks, </title> <journal> In ACM Transactions on Computer Systems, </journal> <volume> Vol. 9, No. 2, </volume> <pages> pp 101-124, </pages> <month> May </month> <year> 1991. </year> <booktitle> Also in Proc. ACM SIGCOMM '90, </booktitle> <pages> pp 19-29. </pages>
Reference-contexts: In addition, a weighted version of the Fair Queueing algorithm (which we refer to as WFQ), in which the r ff need not all be equal, was also briefly described in Reference [4] 5 . The VirtualClock algorithm, described in References <ref> [25, 26] </ref>, involves an extremely similar underlying packet scheduling algorithm, but was expressly designed for a context where resources were preapportioned and thus had as a fundamental part of its architecture the assumption that the shares r ff were arbitrary.
Reference: [27] <author> L. Zhang. </author> <title> A Comparison of Traffic Control Algorithms for High-Speed Networks, </title> <booktitle> In 2nd Annual Workshop on Very High Speed Networks, </booktitle> <year> 1991. </year>
Reference-contexts: All of these bear a superficial similarity to WFQ in that packets are scheduled according to some deadline or frame; the difference is that the packets are not allowed to leave early. These algorithms typically deliver higher average delays in return for lower jitter. See the review studies <ref> [24, 27] </ref> for a more detailed comparison of these schemes. The Jitter-EDD ([6, 22]) algorithm make use of a delay field in the packet header to inform scheduling decisions, much like the FIFO+ algorithm.
References-found: 27

