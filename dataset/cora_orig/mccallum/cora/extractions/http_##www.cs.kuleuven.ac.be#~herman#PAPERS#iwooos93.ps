URL: http://www.cs.kuleuven.ac.be/~herman/PAPERS/iwooos93.ps
Refering-URL: http://www.cs.kuleuven.ac.be/~henk/DPS/publications.html
Root-URL: 
Email: herman@cs.kuleuven.ac.be  
Title: Object Migration in a Heterogeneous World A Multi-Dimensional Affair  
Author: Herman Moons, Pierre Verbaeten 
Address: Leuven, Belgium  
Affiliation: Dept. of Computer Science Katholieke Universiteit Leuven  
Abstract: Location is only one attribute whose changes are worth considering. Other attributes evolve as well during the lifetime of an object. Examples include changes in state representation and failure handling semantics. All such attribute changes can be integrated within a generalized object migration model. This results in an N-dimensional space, the object habitat, where object migration is expressed in terms of coordinate changes. This paper introduces the habitat model, and illustrates its application within the COMET heterogeneous distributed computing system. Within COMET, the habitat is a three-dimensional space with location, class and flavor coordinate axes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> European Computer Manufacturers Association, </author> <title> Support Environment for Open Distributed Processing (SE-ODP), </title> <note> ECMA TR/49 (January, </note> <year> 1990). </year>
Reference-contexts: However, users are no longer satisfied with mere connectivity. There is a growing demand for Open Distributed Processing (ODP) services that coordinate the use of these distributed resources, preferably in a manner that is transparent to the application programmer <ref> [1, 6, 9, 10] </ref>. A major challenge in ODP systems is the heterogeneity barrier. Of importance here are both technological and human factors. On the physical side, an ODP system must integrate multiple technologies, including both computing and communication equipment.
Reference: [2] <author> A. Birell and B. Nelson, </author> <title> ``Implementing Remote Procedure Calls'' ACM Transactions on Computer Systems, </title> <type> Vol.2 (1) , pp. </type> <month> 39-59 (February, </month> <year> 1984). </year>
Reference-contexts: Invocations are performed through dialogues between the source and destination object. Each dialogue represents a logical communication channel between two objects, that guarantees ordered delivery and execution of requests. state methods dialogues actions The dialogue interaction model is based on RPC, as pioneered by Birell and Nelson <ref> [2] </ref>. Although conceptually simple, RPC limits the amount of concurrency that can be obtained in a distributed application. We therefore support an asynchronous mode of operation, based on tickets.
Reference: [3] <author> A.P. Black and Y. Artsy, </author> <title> ``Implementing Location Independent Invocation'' IEEE Transactions on Parallel and Distributed Systems, </title> <note> Vol.1 (1) , pp. 107-119 (Janu-ary 1990). </note>
Reference-contexts: COMET is an object-oriented network operating system, that implements the concept of a global object space. Applications are built from collections of cooperating objects, that interact using location-independent object invocation <ref> [3, 14] </ref>. As illustrated in figure 1, COMET kernels on every node in the network hide the local computing system, and offer primitives for manipulating objects in the global object space. Apart from their heterogeneity, large computing systems are by definition of a dynamic nature. <p> Computing nodes can be added and removed, or node crashes may occur, resulting in a modified environment. Furthermore load conditions are continuously changing. All these factors make it desirable to be able to move objects from one node to another during their lifetime <ref> [3, 11] </ref>. However, object location is not the only factor whose dynamics is worth considering. Other attributes evolve as well over the lifetime of an object. Examples include changes in state representation, access limitations or failure handling semantics. <p> Users performing invocations over these dialogues will thus detect that a non transparent migration has occurred. 7. Related Work Many existing systems address the issues of object mobility [5, 8, 11]. A representative example is the Hermes system <ref> [3] </ref>, which uses a variety of techniques to improve the efficiency of object invocation in the presence of location changes. A base technique is the use of forwarding addresses, which allow for transparent rerouting of invocation requests.
Reference: [4] <author> Grady Booch, </author> <title> Object Oriented Design with Applications, </title> <publisher> The Benjamin/Cummings Publishing Company, Inc. </publisher> <year> (1991). </year>
Reference-contexts: COMET's design is open, which means that the number of flavors is not fixed. Additional flavors can be easily added as the need arises. In particular, inheritance is used to enhance the semantics of the dialogues, actions and typed memory slots of the basic object model. class diagram <ref> [4] </ref>. The classes of the basic model supply the uniform programming interface visible to application programmers. Flavors are modeled as specializations (subclasses) of the basic model classes. Due to the polymorphic nature of the inheritance relationship, the COMET kernel needs only to know about the basic model classes.
Reference: [5] <author> P. Dasgupta, R.J. LeBlanc, M. Ahamad, and U. Ramachandran, </author> <booktitle> ``The Clouds Distributed Operating System'' IEEE Computer, </booktitle> <pages> Vol.24 (11) , pp. </pages> <month> 34-44 (November, </month> <year> 1991). </year>
Reference-contexts: Users performing invocations over these dialogues will thus detect that a non transparent migration has occurred. 7. Related Work Many existing systems address the issues of object mobility <ref> [5, 8, 11] </ref>. A representative example is the Hermes system [3], which uses a variety of techniques to improve the efficiency of object invocation in the presence of location changes. A base technique is the use of forwarding addresses, which allow for transparent rerouting of invocation requests.
Reference: [6] <author> Open Software Foundation, </author> <title> Introduction to OSF DCE, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, N.J. </address> <year> (1992). </year>
Reference-contexts: However, users are no longer satisfied with mere connectivity. There is a growing demand for Open Distributed Processing (ODP) services that coordinate the use of these distributed resources, preferably in a manner that is transparent to the application programmer <ref> [1, 6, 9, 10] </ref>. A major challenge in ODP systems is the heterogeneity barrier. Of importance here are both technological and human factors. On the physical side, an ODP system must integrate multiple technologies, including both computing and communication equipment.
Reference: [7] <author> R.J. Fowler, </author> <title> Decentralized Object Finding Using Forwarding Addresses, </title> <type> Ph.D. Thesis, </type> <institution> University of Wash-ington, Dept of Computer Science (December 1985). </institution>
Reference-contexts: This rerouting of messages should be performed transparently, while respecting the ordering property of dialogues. To inform users about the object's new physical location, a signpost object is installed at the old location. This signpost points to the new object location, and forwards incoming requests <ref> [7] </ref>. As such, the signpost takes care of the rerouting of requests. Furthermore, the dialogue ordering property must be maintained. To guarantee ordered handling of requests, a dialogue maintains information at both the source and destination side (typically in the form of sequence numbers).
Reference: [8] <author> A. Goscinski, </author> <title> Distributed Operating Systems: The Logical Design, </title> <publisher> Addison-Wesley Publishing Company (1991). </publisher>
Reference-contexts: Users performing invocations over these dialogues will thus detect that a non transparent migration has occurred. 7. Related Work Many existing systems address the issues of object mobility <ref> [5, 8, 11] </ref>. A representative example is the Hermes system [3], which uses a variety of techniques to improve the efficiency of object invocation in the presence of location changes. A base technique is the use of forwarding addresses, which allow for transparent rerouting of invocation requests.
Reference: [9] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, Revision 1.1, </title> <note> OMG Document 91.12.1 (December 1991). </note>
Reference-contexts: However, users are no longer satisfied with mere connectivity. There is a growing demand for Open Distributed Processing (ODP) services that coordinate the use of these distributed resources, preferably in a manner that is transparent to the application programmer <ref> [1, 6, 9, 10] </ref>. A major challenge in ODP systems is the heterogeneity barrier. Of importance here are both technological and human factors. On the physical side, an ODP system must integrate multiple technologies, including both computing and communication equipment.
Reference: [10] <author> C. Horn and A. Donnelly, </author> <title> Architectural Aspects of the Comandos Platform, </title> <type> Research Report, </type> <institution> Distributed Systems Group, Dept. of Computer Science, Trinity College Dublin (February, </institution> <year> 1989). </year>
Reference-contexts: However, users are no longer satisfied with mere connectivity. There is a growing demand for Open Distributed Processing (ODP) services that coordinate the use of these distributed resources, preferably in a manner that is transparent to the application programmer <ref> [1, 6, 9, 10] </ref>. A major challenge in ODP systems is the heterogeneity barrier. Of importance here are both technological and human factors. On the physical side, an ODP system must integrate multiple technologies, including both computing and communication equipment. <p> A base technique is the use of forwarding addresses, which allow for transparent rerouting of invocation requests. Such forwarding references are similar to COMET's signpost objects, and are only temporarily used (until the invoking object has learned about the destination's new location). Comandos <ref> [10] </ref> is an open distributed system that supports object mobility. More interestingly, Comandos has both volatile and persistent objects. Persistency is not an attribute of objects. Instead, objects become persistent when a persistent object holds a reference to them.
Reference: [11] <author> E. Jul, H. Levy, N. Hutchinson, and A. </author> <title> Black, </title> <journal> ``Fine-Grained Mobility in the Emerald System'' ACM Transactions on Computer Systems, </journal> <note> Vol.5 (1) , pp. </note> <month> 109-133 (February </month> <year> 1988). </year>
Reference-contexts: Computing nodes can be added and removed, or node crashes may occur, resulting in a modified environment. Furthermore load conditions are continuously changing. All these factors make it desirable to be able to move objects from one node to another during their lifetime <ref> [3, 11] </ref>. However, object location is not the only factor whose dynamics is worth considering. Other attributes evolve as well over the lifetime of an object. Examples include changes in state representation, access limitations or failure handling semantics. <p> Users performing invocations over these dialogues will thus detect that a non transparent migration has occurred. 7. Related Work Many existing systems address the issues of object mobility <ref> [5, 8, 11] </ref>. A representative example is the Hermes system [3], which uses a variety of techniques to improve the efficiency of object invocation in the presence of location changes. A base technique is the use of forwarding addresses, which allow for transparent rerouting of invocation requests.
Reference: [12] <author> B. Liskov and L. Shrira, </author> <title> ``Promises: Linguistic Support for Efficient Asynchronous Procedure Calls in Distributed Systems'' pp. </title> <booktitle> 260-267 in Proceedings of the SIG-PLAN '88 Conference on Programming Language Design and Implementation (June, </booktitle> <year> 1988). </year>
Reference-contexts: An asynchronous invocation returns immediately with a ticket, that can be used to collect the result of the invocation at some future time. Consequently, source and destination object are decoupled, and can continue their execution in parallel. A similar mechanism is adopted in systems like Mercury <ref> [12] </ref> and Cronus [17]. Every invocation triggers an action at the destination object, that executes the method corresponding to the requested operation. The object's internal state is exposed only to these method executing actions (see figure 2).
Reference: [13] <author> Herman Moons and Pierre Verbaeten, </author> <title> ``Persistency Support for Mobile Objects in the COMET Heterogeneous Environment'' pp. </title> <booktitle> 38-48 in Proceedings of the 2nd International Workshop on Object Orientation in Operating Systems, </booktitle> <address> Dourdan, France (September 24-25, </address> <year> 1992). </year>
Reference-contexts: Take e.g. a persistent object, which requires interaction with a persistent storage manager that maintains the stable copy of its state variables <ref> [13] </ref>. When changing this object's flavor, the persistent storage manager must be notified that it may discard the stored information. Similarly, the new flavor might interact with other objects. Suppose that we migrate a persistent object to an atomic one.
Reference: [14] <author> Herman Moons and Pierre Verbaeten, </author> <title> ``Object Invocation in the COMET Open Distributed System: the Dialogue Model'' pp. </title> <booktitle> 435-442 in Proceedings of the Euromi-cro Workshop on Parallel and Distributed Processing, </booktitle> <address> Gran Canaria (January 27-29, </address> <year> 1993). </year>
Reference-contexts: COMET is an object-oriented network operating system, that implements the concept of a global object space. Applications are built from collections of cooperating objects, that interact using location-independent object invocation <ref> [3, 14] </ref>. As illustrated in figure 1, COMET kernels on every node in the network hide the local computing system, and offer primitives for manipulating objects in the global object space. Apart from their heterogeneity, large computing systems are by definition of a dynamic nature. <p> A final section presents the current status of our work, and discusses future directions. 2. The COMET Object Model Within the COMET system a single mechanism, object invocation, is used to express interactions between the objects in the global object space <ref> [14] </ref>. Invocations are performed through dialogues between the source and destination object. Each dialogue represents a logical communication channel between two objects, that guarantees ordered delivery and execution of requests. state methods dialogues actions The dialogue interaction model is based on RPC, as pioneered by Birell and Nelson [2].
Reference: [15] <institution> Technical Committee on Operating Systems, </institution> <note> ``Special Issue on Process Migration'' Operating Systems Technical Committee, Vol.3 (1) (1989). </note>
Reference-contexts: During this time interval, the object in question is unavailable. The major goal of most systems supporting migration is to minimize the migration interval, in order to maximize object availability <ref> [15] </ref>. source node S destination node D migration object X (time T1) object X (time T2) Important work has been done in the area of object migration, but in our opinion, the classic view as a change of physical location is only the beginning.
Reference: [16] <author> Takao Tenma, Yasuhiko Yokote, and Mario Tokoro, </author> <title> ``Implementing Persistent Objects in the Apertos Operating System'' pp. </title> <booktitle> 66-79 in Proceedings of the 2nd International Workshop on Object Orientation in Operating Systems, </booktitle> <address> Dourdan, France (September 24-25, </address> <year> 1992). </year>
Reference-contexts: A major difference with the COMET approach is that Comandos uses ad-hoc solutions, without placing them in a general framework. The Muse/Apertos operating system uses a reflective architecture, where an object is supported by a set of meta-objects, that provide its execution environment <ref> [16, 18] </ref>. This set of meta-objects is called a meta-space. Object properties can be changed by migrating meta-objects to another meta-space. Consequently, migration is not limited to location changes. Several parallels can be drawn with COMET's habitat model. Meta-objects correspond with the dimensions of the object habitat.
Reference: [17] <author> Edward F. Walker, Richard Floyd, and Paul Neves, </author> <title> ``Asynchronous Remote Operation Execution in Distributed Systems'' pp. </title> <booktitle> 253-259 in Proceedings 10th International Conference on Distributed Computing Systems, </booktitle> <address> Paris, France (May 28 - June 1, </address> <year> 1990). </year>
Reference-contexts: An asynchronous invocation returns immediately with a ticket, that can be used to collect the result of the invocation at some future time. Consequently, source and destination object are decoupled, and can continue their execution in parallel. A similar mechanism is adopted in systems like Mercury [12] and Cronus <ref> [17] </ref>. Every invocation triggers an action at the destination object, that executes the method corresponding to the requested operation. The object's internal state is exposed only to these method executing actions (see figure 2). State changes can only occur as a result of invoking the exported operations of an object.
Reference: [18] <author> Yasuhiko Yokote, Fumio Teraoka, Atsushi Mitsuzawa, Nobuhisa Fujinami, and Mario Tokoro, </author> <title> ``The Muse Object Architecture: A New Operating System Structuring Concept'' ACM Operating Systems Review, </title> <note> Vol.25 (2) , pp. </note> <month> 22-46 (April, </month> <year> 1991). </year>
Reference-contexts: A major difference with the COMET approach is that Comandos uses ad-hoc solutions, without placing them in a general framework. The Muse/Apertos operating system uses a reflective architecture, where an object is supported by a set of meta-objects, that provide its execution environment <ref> [16, 18] </ref>. This set of meta-objects is called a meta-space. Object properties can be changed by migrating meta-objects to another meta-space. Consequently, migration is not limited to location changes. Several parallels can be drawn with COMET's habitat model. Meta-objects correspond with the dimensions of the object habitat.
References-found: 18

