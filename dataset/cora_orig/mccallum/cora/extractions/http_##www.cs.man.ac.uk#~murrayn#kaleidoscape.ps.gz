URL: http://www.cs.man.ac.uk/~murrayn/kaleidoscape.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~murrayn/index.html
Root-URL: http://www.cs.man.ac.uk
Email: normg@cs.man.ac.uk  
Title: Kaleidoscape: A 3D Environment for Querying ODMG Compliant Databases  
Author: Norman Murray, Carole Goble and Norman Paton fmurrayn, carole, 
Address: Oxford Road Manchester M13 9PL, UK  
Affiliation: Department of Computer Science University of Manchester  
Abstract: Kaleidoscape is a three dimensional (3D) implementation of a data-flow oriented visual query language, which has been implemented in 3D to examine the advantages and disadvantages of such an interface paradigm over current WIMP GUIs. This paper describes a version of Kaleidoscape that allows the user to construct queries from within a 3D environment. These queries are then translated into the ODMG standard textual query language OQL for evaluation, the results of which can be viewed and browsed from within the Kaleidoscape environment. Keywords visual query language, 3D, OQL, ODMG, results visualisation 
Abstract-found: 1
Intro-found: 1
Reference: <author> Ahlberg, C. </author> <year> (1996), </year> <title> `Spotfire: An Information Exploration Environment', </title> <booktitle> SIG-MOD Record 24(4), </booktitle> <pages> 25-29. </pages>
Reference-contexts: Query Generation Currently the participant begins building their queries from within the database schema rather than within the class instances. We could examine allowing the participant to begin creating their query from within the instance data environment as done in Spotfire <ref> (Ahlberg 1996) </ref>, although Spotfire can at present only handle databases containing a single table. Our current interface still requires entry of information via the keyboard, although movement and selection of artifacts in the environment can be accomplished via the keyboard, desktop mouse or 3D mouse.
Reference: <author> Benford, S. & Mariani, J. </author> <year> (1994), </year> <title> Virtual environments for data sharing and visualisation populated information terrains, </title> <booktitle> in `Proceedings of the 2nd International Workshop on User Interfaces to Databases'. </booktitle>
Reference-contexts: Lyberworld (Schweickert & Hemmje 1996) uses a cone tree structure for selecting predefined queries, and distributes the results inside a sphere according to their relevance to key attributes located on the surface of the sphere. Q-PIT <ref> (Benford & Mariani 1994) </ref> locates and visualises the instances of the database in a 3D environment according to the mapping of the in stances attributes.
Reference: <author> Borgman, C. L. </author> <year> (1986), </year> <title> `The User's Mental Model of an Information Retrieval System; An Experiment on a Prototype Online Catalog', </title> <journal> International Journal of Man-Machine Studies 24, </journal> <pages> 47-64. </pages>
Reference-contexts: problems with textual query languages have been identified, and these include: a steep learning curve; common semantic and syntactic errors; the structure of the database classes, attributes and relationships is not readily available to users; increasing complexity when specifying the order of boolean operators with parentheses as the query grows <ref> (Borgman 1986, Greene et al. 1990, Michard 1982) </ref>; and the differences in meaning between the English and boolean logic meaning behind the and and or operations (Greene et al. 1990, Michard 1982). In creating Kaleidoquery we attempted to solve the above problems.
Reference: <author> Boyle, J. & Gray, P. M. D. </author> <year> (1995), </year> <title> The Design of 3D Metaphors for Database Visualisation, </title> <booktitle> in `Proceedings of Visual Database Systems', </booktitle> <publisher> Chapman and Hall, </publisher> <pages> pp. 185-202. </pages> <note> Stefano Spaccapietra, Ramesh Jain (Eds.). </note>
Reference-contexts: Q-PIT (Benford & Mariani 1994) locates and visualises the instances of the database in a 3D environment according to the mapping of the in stances attributes. AMAZE <ref> (Boyle & Gray 1995) </ref> comes closest to a complete 3D interface to a database with the schema and results being visualised in 3D, although queries are entered via a forms interface.
Reference: <author> Catarci, T., Costabile, M. F., Levialdi, S. & Batini, C. </author> <year> (1997), </year> <title> `Visual Query Systems for Databases: A Survey', </title> <journal> Journal of Visual Languages and Computing 8, </journal> <pages> 215-260. </pages>
Reference-contexts: The number of children axis has been scaled down as can be seen by comparison with the other axes. 5 RELATED WORK Visual query languages have attempted to bridge the gap of usability for users (for a survey see <ref> (Catarci et al. 1997) </ref>). Forms based query languages such as QBE (Zloof 1977), present the database structure as tables or forms into which queries can be placed. Graph based query languages (e.g.
Reference: <author> Cattell, R. G. G., Barry, D., Bartels, D., Berler, M., Eastman, J., Gamerman, S., Jordan, D., Springer, A., Strickland, H. & Wade, D. </author> <year> (1997), </year> <title> The Object Database Standard: ODMG 2.0, </title> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: 1 INTRODUCTION Kaleidoquery (Murray, Paton & Goble 1998) is a visual query language for ODMG (Object Data Management Group) compliant object databases <ref> (Cattell et al. 1997) </ref>. Queries created with Kaleidoquery can be translated into ODMG version 2.0 Object Query Language (OQL). This allows implementations of Kaleidoquery to be used with any object database that conforms to the ODMG standard. <p> Providing the advantages of a visual query language over a textual language, Kaleidoquery attempts to solve these problems using the above mentioned methods and provides: 1. an unusually powerful visual query language for OODBs, supporting the full functionality of OQL <ref> (Cattell et al. 1997) </ref>, 2. compliance with the ODMG model version 2.0 and consistency with OQL with its well understood language constructs plus direct support for eval uation, 3. a filter flow oriented visual model, 4. a separation of the tasks of writing the query constraints and organising the structure and
Reference: <author> Chavda, M. & Wood, P. </author> <year> (1997), </year> <title> Towards an ODMG-Compliant Visual Object Query Language, </title> <editor> in M. Jarke, M. J. Carey, K. R. Dittrich, F. </editor> <publisher> H. </publisher>
Reference-contexts: Multi paradigm query interfaces also exist to allow the user to pick and choose or alternate between interface styles, (Doan et al. 1995). Current graphical query languages to ODMG compliant object databases are limited to Quiver <ref> (Chavda & Wood 1997) </ref> and GOQL (Keramopoulos et al. 1997). Only two simple examples of the Quiver query language are given in (Chavda & Wood 1997), but preliminary evaluations show that it is easier to use than the standard textual OQL interface. <p> Current graphical query languages to ODMG compliant object databases are limited to Quiver <ref> (Chavda & Wood 1997) </ref> and GOQL (Keramopoulos et al. 1997). Only two simple examples of the Quiver query language are given in (Chavda & Wood 1997), but preliminary evaluations show that it is easier to use than the standard textual OQL interface. GOQL is a graph style query language and a complete description of its constructs is given in the paper.
Reference: <editor> Lochovsky, P. Loucopoulos & M. A. Jeusfeld, eds, </editor> <booktitle> `Proceedings of 23rd International Conference on Very Large Data Bases', </booktitle> <pages> pp. 456-465. </pages>
Reference: <author> Doan, D. K., Paton, N. W. & Kilgour, A. C. </author> <year> (1995), </year> <title> `Design and User Testing of a Multi-paradigm Interface to an Object-Oriented Database', </title> <booktitle> ACM SIGMOD Record 24(3), </booktitle> <pages> 12-17. </pages>
Reference-contexts: Icon based languages (e.g. Iconic Browser (Tsuda et al. 1990)) represent database concepts pictorially and allow direct manipulation of icons to represent queries. Multi paradigm query interfaces also exist to allow the user to pick and choose or alternate between interface styles, <ref> (Doan et al. 1995) </ref>. Current graphical query languages to ODMG compliant object databases are limited to Quiver (Chavda & Wood 1997) and GOQL (Keramopoulos et al. 1997).
Reference: <author> Greene, S., Devlin, S., Cannata, P. & Gomez, L. </author> <year> (1990), </year> <title> `No IFs, ANDs, or ORs: A Study of Database Querying', </title> <journal> International Journal of Man-Machine Studies 32, </journal> <pages> 303-326. </pages>
Reference-contexts: attributes and relationships is not readily available to users; increasing complexity when specifying the order of boolean operators with parentheses as the query grows (Borgman 1986, Greene et al. 1990, Michard 1982); and the differences in meaning between the English and boolean logic meaning behind the and and or operations <ref> (Greene et al. 1990, Michard 1982) </ref>. In creating Kaleidoquery we attempted to solve the above problems. By creating a visual query language and generating a display of the database schema we hope to solve the first three problems.
Reference: <author> Haw, D., Goble, C. & Rector, A. </author> <year> (1994), </year> <title> GUIDANCE: Making it Easy for the User to be an Expert, </title> <booktitle> in `Proc. 2nd Int. Workshop On Interfaces to Database Systems', </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 19-43. </pages> <note> P. Sawyer (Ed). </note>
Reference-contexts: Forms based query languages such as QBE (Zloof 1977), present the database structure as tables or forms into which queries can be placed. Graph based query languages (e.g. Guidance <ref> (Haw et al. 1994) </ref>) have the advantage over forms style interfaces in that they can directly represent relationships within the structure of the database and the query. Icon based languages (e.g. Iconic Browser (Tsuda et al. 1990)) represent database concepts pictorially and allow direct manipulation of icons to represent queries.
Reference: <author> Kacmar, C. J. & Carey, J. M. </author> <year> (1991), </year> <title> `Assessing the Usability of Icons in User Interfaces', </title> <booktitle> Behaviour and Information Technology 10(6), </booktitle> <pages> 443-457. </pages>
Reference-contexts: We have chosen to display both the class name and a visualisation of the class, as studies have shown that icons with a textual description give better comprehension than purely textual or pictorial icons <ref> (Kacmar & Carey 1991) </ref>. As the participants become familiar with the class visualisations they will associate the icon with the class and in this way will not have to read the class name.
Reference: <author> Keramopoulos, E., Pouyioutas, P. & Sadler, C. </author> <year> (1997), </year> <title> GOQL, a Graphical Query Language for Object-Oriented Database Systems, </title> <booktitle> in `Basque International Workshop on Information Technology', </booktitle> <pages> pp. 35-45. </pages>
Reference-contexts: Multi paradigm query interfaces also exist to allow the user to pick and choose or alternate between interface styles, (Doan et al. 1995). Current graphical query languages to ODMG compliant object databases are limited to Quiver (Chavda & Wood 1997) and GOQL <ref> (Keramopoulos et al. 1997) </ref>. Only two simple examples of the Quiver query language are given in (Chavda & Wood 1997), but preliminary evaluations show that it is easier to use than the standard textual OQL interface.
Reference: <author> Michard, A. </author> <year> (1982), </year> <title> `Graphical Presentation of Boolean Expressions in a Database Query Language: Design Notes and an Ergonomic Evaluation', </title> <booktitle> Behaviour and Information Technology 1(3), </booktitle> <pages> 279-288. </pages>
Reference: <author> Murray, N., Goble, C. & Paton, N. </author> <year> (1998), </year> <title> `A Framework for Describing Visual Interfaces to Databases', </title> <note> To be published in the Journal of Visual Languages and Computing </note> . 
Reference-contexts: 1 INTRODUCTION Kaleidoquery <ref> (Murray, Paton & Goble 1998) </ref> is a visual query language for ODMG (Object Data Management Group) compliant object databases (Cattell et al. 1997). Queries created with Kaleidoquery can be translated into ODMG version 2.0 Object Query Language (OQL). <p> Queries created with Kaleidoquery can be translated into ODMG version 2.0 Object Query Language (OQL). This allows implementations of Kaleidoquery to be used with any object database that conforms to the ODMG standard. Kaleidoscape is the 3D implementation of Kaleidoquery that was designed using the framework in <ref> (Murray, Goble & Paton 1998) </ref>. <p> Finally, we discuss some conclusions drawn from experience with the interface, and list future work required on the interface to support the user in constructing queries in a 3D environment. 2 KALEIDOQUERY DESIGN PHILOSOPHY The Kaleidoquery language is fully described in <ref> (Murray, Paton & Goble 1998) </ref>. In this section we give a brief introduction to and explanation of the design of the language. Visual query languages attempt to bridge the gap of usability for users over standard textual query languages and environments.
Reference: <author> Murray, N., Paton, N. & Goble, C. </author> <year> (1998), </year> <title> Kaleidoquery: A Visual Query Language for Object Databases, </title> <booktitle> in `Proceedings Advanced Visual Interfaces'. </booktitle>
Reference-contexts: 1 INTRODUCTION Kaleidoquery <ref> (Murray, Paton & Goble 1998) </ref> is a visual query language for ODMG (Object Data Management Group) compliant object databases (Cattell et al. 1997). Queries created with Kaleidoquery can be translated into ODMG version 2.0 Object Query Language (OQL). <p> Queries created with Kaleidoquery can be translated into ODMG version 2.0 Object Query Language (OQL). This allows implementations of Kaleidoquery to be used with any object database that conforms to the ODMG standard. Kaleidoscape is the 3D implementation of Kaleidoquery that was designed using the framework in <ref> (Murray, Goble & Paton 1998) </ref>. <p> Finally, we discuss some conclusions drawn from experience with the interface, and list future work required on the interface to support the user in constructing queries in a 3D environment. 2 KALEIDOQUERY DESIGN PHILOSOPHY The Kaleidoquery language is fully described in <ref> (Murray, Paton & Goble 1998) </ref>. In this section we give a brief introduction to and explanation of the design of the language. Visual query languages attempt to bridge the gap of usability for users over standard textual query languages and environments.
Reference: <author> Rapley, M. H. & Kennedy, J. B. </author> <year> (1994), </year> <title> Three Dimensional Interface for an Object Oriented Database, </title> <booktitle> in `Proc. 2nd Int. Workshop On Interfaces to Database Systems', </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 143-167. </pages> <note> P. Sawyer (Ed). </note>
Reference-contexts: Neither of the query languages describe the interface that has been implemented to support the visual language, and neither exploit 3D environments. The three main areas of interest in 3D interfaces to databases are schema display, query creation and display and results visualisation. WINONA <ref> (Rapley & Kennedy 1994) </ref> displays the schema using either a hierarchal or circular wall visualisation, with querying being limited to simple form-based string searches.
Reference: <author> Raskin, J. </author> <year> (1997), </year> <title> `Looking for a Humane Interface: Will Computers Ever Become Easy to Use?', </title> <journal> Communications of the ACM 40(2), </journal> <pages> 98-101. </pages>
Reference-contexts: A belief exists that conventional direct manipula-tion WIMP interfaces, while working well for some tasks, may be a limiting factor for others <ref> (Raskin 1997, van Dam 1997) </ref>. Interface hardware is now reasonably common and becoming established, allowing 3D location information, gesture and speech recognition. In this paper, we begin with a brief introduction to the Kaleidoquery language and the Kaleidoscape interface architecture.
Reference: <author> Schweickert, T. & Hemmje, M. </author> <year> (1996), </year> <title> A Graphical User Interface to the Object-Oriented Database System VODAK on the Basis of the Generic Visualisation Toolkit Lyberworld, </title> <booktitle> in `Proc. 3rd Int. Workshop On Interfaces to Database Systems', </booktitle> <publisher> Springer-Verlag. </publisher> <editor> J. B. Kennedy and P. J. </editor> <publisher> Barclay (eds.). </publisher>
Reference-contexts: The three main areas of interest in 3D interfaces to databases are schema display, query creation and display and results visualisation. WINONA (Rapley & Kennedy 1994) displays the schema using either a hierarchal or circular wall visualisation, with querying being limited to simple form-based string searches. Lyberworld <ref> (Schweickert & Hemmje 1996) </ref> uses a cone tree structure for selecting predefined queries, and distributes the results inside a sphere according to their relevance to key attributes located on the surface of the sphere.
Reference: <author> Shneiderman, B. </author> <year> (1991), </year> <title> Visual user interfaces for information exploration, </title> <booktitle> in `Proceedings of the 54th Annual Meeting of the American Society for Information Science', Learned Information Inc., </booktitle> <address> Medford. NJ, </address> <pages> pp. 379-384. </pages>
Reference-contexts: By creating a visual query language and generating a display of the database schema we hope to solve the first three problems. To solve the problem with the boolean operators we utilised a filter flow approach to query specification, substantially extending earlier uses of the approach <ref> (Shneiderman 1991) </ref>.
Reference: <author> Starner, T., Mann, S., Rhodes, B., Levine, J., Healey, J., Kirsch, D., Picard, R. W. & Pentland, A. </author> <year> (1997), </year> <title> `Augmented Reality through Wearable Computing', </title> <type> Presence 6(4), </type> <pages> 386-398. </pages>
Reference-contexts: We could also look at alternate methods of information entry such as speech and hand held chord keyboards which have proved popular with wearable computers <ref> (Starner et al. 1997) </ref>. At present we are reviewing the interface informally through heuristic and expert evaluation. When we have completed construction of the Kaleidoscape environment we will perform a more rigorous user evaluation of the interface.
Reference: <author> Tsuda, K., Hirakawa, M., Tanaka, M. & Ichikawa, T. </author> <year> (1990), </year> <title> `Iconic Browser: An Iconic Retrieval System for Object-Oriented Databases', </title> <journal> Journal of Visual Languages and Computing 1(1), </journal> <pages> 59-76. </pages> <editor> van Dam, A. </editor> <year> (1997), </year> <title> `Post-WIMP User Interfaces', </title> <journal> Communications of the ACM 40(2), </journal> <pages> 63-67. </pages>
Reference-contexts: Graph based query languages (e.g. Guidance (Haw et al. 1994)) have the advantage over forms style interfaces in that they can directly represent relationships within the structure of the database and the query. Icon based languages (e.g. Iconic Browser <ref> (Tsuda et al. 1990) </ref>) represent database concepts pictorially and allow direct manipulation of icons to represent queries. Multi paradigm query interfaces also exist to allow the user to pick and choose or alternate between interface styles, (Doan et al. 1995).

References-found: 22

