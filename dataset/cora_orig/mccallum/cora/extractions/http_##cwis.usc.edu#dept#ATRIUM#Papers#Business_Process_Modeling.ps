URL: http://cwis.usc.edu/dept/ATRIUM/Papers/Business_Process_Modeling.ps
Refering-URL: http://cwis.usc.edu/dept/ATRIUM/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fscacchig@gilligan.usc.edu  
Phone: Voice: 213-740-4782, Fax: 213-740-8494  
Title: Modeling, Simulating, and Enacting Complex Organizational Processes: A Life Cycle Approach 1  
Author: Walt Scacchi 
Address: Los Angeles, CA 90089-1421  
Affiliation: Information and Operations Management Department University of Southern California  
Abstract: I describe our approach and mechanisms to support the engineering of organizational processes throughout their life cycle. I describe our current understanding of what activities are included in the process life cycle. I then go on to describe our approach, computational mechanisms, and experiences in supporting many of these life cycle activities, as well as compare it to other related efforts. Along the way, I present examples drawn from a current study aimed at modeling, analyzing, and integrating an order fulfillment process in a product development organization. 
Abstract-found: 1
Intro-found: 1
Reference: [BN93] <author> R. Balzer and K. Narayanaswamy. </author> <title> Mechanisms for Generic Process Support. </title> <booktitle> In Proc. First ACM SIGSOFT Symp. Foundations Software Engineering, </booktitle> <pages> pages 9-20. </pages> <booktitle> ACM, Software Engineering Notes, </booktitle> <volume> Vol. 18(5), </volume> <month> December </month> <year> 1993. </year>
Reference-contexts: Grapple [HL88], on the other hand, relies on a set of goal operators and a planning mechanism to represent software processes. These are used to demonstrate goal-directed reasoning about software processes during modeling and enactment. AP5 <ref> [BN93] </ref>, developed at USC-ISI, and Marvel [KF87] developed at Columbia, use pattern-directed inference rules to model and trigger software process actions during process enactment.
Reference: [BPe91] <author> R.F. Bruynooghe, J.M. Parker, and etc. PSS: </author> <title> A System for Process Enactment. </title> <booktitle> In Proc. of the 1st International Conference on the Software Process, </booktitle> <pages> pages 128-141, </pages> <address> Redondo Beach, CA, </address> <month> Oct </month> <year> 1991. </year>
Reference-contexts: Since APPL/A is targeted at process integration and enactment in 14 an Ada-based environment, it is not at present well-suited for upstream process life cycle activities, such as incremental process modeling or simulation. In contrast, the PSS project in England <ref> [BPe91] </ref> has developed a process modeling and enactment language based on an object-oriented knowledge representation notation. Grapple [HL88], on the other hand, relies on a set of goal operators and a planning mechanism to represent software processes.
Reference: [CKO92] <author> B. Curtis, M. Kellner, and J. </author> <title> Over. Process Modeling. </title> <journal> Communications ACM, </journal> <volume> 35(9) </volume> <pages> 75-90, </pages> <year> 1992. </year>
Reference-contexts: Elsewhere, software process modeling, analysis, and simulation has been a research topic in a number of efforts <ref> [CKO92] </ref>. At the Software Engineering Institute at Carnegie-Mellon University, Kellner [Kel91] has employed an explicitly enumerated state-space approach to process modeling, using the commercially available Statemate system. His approach to modeling and simulation has been successfully demonstrated on moderate sized project management processes.
Reference: [CS89] <author> S.C. Choi and W. Scacchi. </author> <title> Assuring the Correctness of Configured Software Descriptions. </title> <journal> ACM Software Engineering Notes, </journal> <volume> 17(7) </volume> <pages> 67-76, </pages> <year> 1989. </year>
Reference-contexts: Then, we use the Articulator to query and simulate modeled processes as describe below. 3.2 Anaylsis As the process meta-model provides the semantics for OPMs, we can construct computational functions that systematically analyze the consistency, completeness, traceability and internal correctness of OPMs <ref> [CS89, MS90] </ref>. These functions represent batched or interactive queries to the knowledge base through its representational schemata.
Reference: [CS91] <author> S.C. Choi and W. Scacchi. SOFTMAN: </author> <title> An Environment for Forward and Reverse CASE. </title> <journal> Information and Software Technology, </journal> <volume> 33(9), </volume> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: These include mechanisms for * process scheduling and administration [Mi92], * diagnosing, replanning, and rescheduling processes that unexpectedly breakdown or fail [MS91, Mi92, MS93], * software re-engineering processes and environment <ref> [CS91] </ref>, and * knowledge-based process model repository [MLS92]. 13 Thus, we believe our approach can allow us to construct and demonstrate a computa-tional framework for modeling, enacting, and integrating team-oriented process-driven work environments for redesigned business organizations.
Reference: [Dav93] <author> T. Davenport. </author> <title> Process Innovation: Reengineering Business Processes through Information Technology. </title> <publisher> Harvard Business School Press, </publisher> <address> Cambridge, MA, </address> <year> 1993. </year>
Reference-contexts: be noted that though our focus is targeted at engineering organizational processes, our approach can be applied to both complex technical domains (e.g, large-scale software engineering, electronic design automation, agile manufacturing) and to conventional business processes (new product development, corporate finance, business planning, etc.), albeit in a radically innovative way <ref> [Dav93] </ref>. 15 7 Conclusion This chapter provides a brief introduction to our approach and computational mechanisms to modeling, simulating, and integrating organizational processes that involve IT tools, systems, and data resources. These include a knowledge-based environment for re-engineering complex organization processes, and other facilities for realizing and executing these processes.
Reference: [Fer93] <author> C. Fernstrom. </author> <title> Process WEAVER: Adding Process Support to UNIX. </title> <booktitle> In Proc. 2nd International Conference on the Software Process, </booktitle> <address> Berlin, Germany, </address> <month> February </month> <year> 1993. </year>
Reference-contexts: In the commercial arena, one recent process-centered environment is the Process Software Life Cycle Support Environment, ProSLCSE, from ISSI. We have found that the ProSLCSE representation of software processes lacks machine-readable data about the purpose and types of tasks and other activities. Next, Process WEAVER <ref> [Fer93] </ref>, a commercial product from Cap Gemini Innovation based in France, supports process modeling using a notational scheme derived from Petri-nets. In contrast, the computer-aided concurrent engineering product, CACE/PM from Perceptronics [Mad90], also employs a notational scheme derived from Petri-nets.
Reference: [Gra91] <author> R. M. Grant. </author> <title> The Resource-Based Theory of Competitive Advantage: Implications for Strategy Formulation. </title> <booktitle> California Management Review, </booktitle> <volume> 33(3) </volume> <pages> 114-135, </pages> <year> 1991. </year>
Reference-contexts: It first became operational in 1988, and we have continued to use and evolve it since. 3 The Articulator utilizes a rule-based object-oriented knowledge representation scheme for modeling interrelated classes of organizational resources. In this sense, the Articulator's knowledge representation ontology represents a resource-based theory of organizational processes (cf. <ref> [Gra91] </ref>). In this regard, its purpose and use is similar in spirit to that used in the TOVE system, as described in the chapter by Fox, Barbuceanu, and Gruninger. The Articulator's object classes characterize the attributes, relations, and computational methods associated with a taxonomy of organizational resources.
Reference: [GS89] <author> P.K. Garg and W. Scacchi. ISHYS: </author> <title> Designing Intelligent Software Hypertext Systems. </title> <journal> IEEE Expert, </journal> <volume> 4(3) </volume> <pages> 52-63, </pages> <year> 1989. </year>
Reference-contexts: Figure 2 then follows with a more detailed view of a model of a generic order-fulfillment process. 4 3.1 Modeling The resource taxonomy we have constructed, explained in detail elsewhere <ref> [GS89, MS90, MS94] </ref>, serves as a process meta-model which provides an ontological framework and vocabulary for constructing organizational process models (OPMs).
Reference: [HL88] <author> K.E. Huff and V.R. Lesser. </author> <title> A Plan-Based Intelligent Assistant That Supports the Process of Programming. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 13 </volume> <pages> 97-106, </pages> <month> Nov </month> <year> 1988. </year> <month> 17 </month>
Reference-contexts: In contrast, the PSS project in England [BPe91] has developed a process modeling and enactment language based on an object-oriented knowledge representation notation. Grapple <ref> [HL88] </ref>, on the other hand, relies on a set of goal operators and a planning mechanism to represent software processes. These are used to demonstrate goal-directed reasoning about software processes during modeling and enactment.
Reference: [KBS90] <author> G.E. Kaiser, N.S. Barghouti, and M.H. Sokolsky. </author> <title> Preliminary Experience with Process Modeling in the Marvel Software Development Environment Kernel. </title> <booktitle> In Proc. of the 23rd Annual Hawaii International Conference on System Science, </booktitle> <pages> pages 131-140, </pages> <month> Jan </month> <year> 1990. </year>
Reference-contexts: AP5 [BN93], developed at USC-ISI, and Marvel [KF87] developed at Columbia, use pattern-directed inference rules to model and trigger software process actions during process enactment. While Marvel has been extended to support the creation of process models <ref> [KBS90] </ref>, its strength lies primarily in its ability to support rule-based process integration and enactment. In the commercial arena, one recent process-centered environment is the Process Software Life Cycle Support Environment, ProSLCSE, from ISSI.
Reference: [Kel91] <author> M. Kellner. </author> <title> Software Process Modeling Support for Management Planning and Control. </title> <booktitle> In Proc. 1st. Intern. Conf. Soft. Process, </booktitle> <pages> pages 8-28. </pages> <publisher> IEEE Computer Society, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: Elsewhere, software process modeling, analysis, and simulation has been a research topic in a number of efforts [CKO92]. At the Software Engineering Institute at Carnegie-Mellon University, Kellner <ref> [Kel91] </ref> has employed an explicitly enumerated state-space approach to process modeling, using the commercially available Statemate system. His approach to modeling and simulation has been successfully demonstrated on moderate sized project management processes.
Reference: [KF87] <author> G.E. Kaiser and P. Feiler. </author> <title> An architecture for intelligent assistance in software development. </title> <booktitle> In Proc. of the 9th International Conference on Software Engineering, </booktitle> <pages> pages 180-187, </pages> <address> Monterey, CA, </address> <month> Apr </month> <year> 1987. </year>
Reference-contexts: Grapple [HL88], on the other hand, relies on a set of goal operators and a planning mechanism to represent software processes. These are used to demonstrate goal-directed reasoning about software processes during modeling and enactment. AP5 [BN93], developed at USC-ISI, and Marvel <ref> [KF87] </ref> developed at Columbia, use pattern-directed inference rules to model and trigger software process actions during process enactment. While Marvel has been extended to support the creation of process models [KBS90], its strength lies primarily in its ability to support rule-based process integration and enactment.
Reference: [KS82] <author> R. Kling and W. Scacchi. </author> <title> The Web of Computing: Computer technology as social organization. </title> <editor> In M. Yovits, editor, </editor> <booktitle> Advances in Computers, </booktitle> <volume> vol. 21, </volume> <pages> pages 3-90. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1982. </year>
Reference-contexts: Thus, in using these classes of process modeling entities, we are naturally led to model organizational processes as a web of multiple interacting tasks that are collectively performed by a team of developers using an ensemble of tools that consume resources and produce composed products/artifacts <ref> [KS82] </ref>. In addition, it allows us to treat these models as a reusable information resource, which can be archived, shared, or transferred to other organizations [LA94].
Reference: [KS93] <author> A. Karrer and W. Scacchi. </author> <title> Meta-Environments for Software Production. </title> <journal> International Journal of Software Engineering and Knowledge Engineering, </journal> <volume> 3(1) </volume> <pages> 139-162, </pages> <year> 1993. </year>
Reference-contexts: In this sense, our process programs are automatically derived from the process model specification by way of a special-purpose application generator <ref> [MS92, KS93] </ref>. Accordingly, the process enactment specification can incorporate any operating system command, system invocation script, virtual mouse selections, or canned user input, as well as access protocols to heterogeneous information repositories [NS91].
Reference: [LA94] <author> F. Leymann and W. Altenhuber. </author> <title> Managing Buiness Processes as an Information Resource. </title> <journal> IBM Systems J., </journal> <volume> 33(2) </volume> <pages> 326-348, </pages> <year> 1994. </year>
Reference-contexts: In addition, it allows us to treat these models as a reusable information resource, which can be archived, shared, or transferred to other organizations <ref> [LA94] </ref>. In addition, the meta-model enables us to model other complex phenomena associated with organizational processes, such as agents' resource sovereignties (i.e., the set of resources under the control of an agent), authority asymmetries (e.g., political relationships among agents), multiple belief systems, negotiation strategies, technology transfer strategies, etc.
Reference: [Mad90] <author> A. Madni. </author> <title> A Conceptual Framework and Enabling Technologies for Computer-Aided Concurrent Engineering (CACE). </title> <booktitle> In Second Intern. Conf. Human Aspects of Advanced Manufacturing and Hybrid Automation. Plenary Address and Invited Paper, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: Next, Process WEAVER [Fer93], a commercial product from Cap Gemini Innovation based in France, supports process modeling using a notational scheme derived from Petri-nets. In contrast, the computer-aided concurrent engineering product, CACE/PM from Perceptronics <ref> [Mad90] </ref>, also employs a notational scheme derived from Petri-nets. However, CACE/PM offers a more substantial representational capability (e.g., rules, frames, attributes, and timing information), as well as supporting process model analysis and simulation.
Reference: [MG90] <author> N. Madhavji and V. Gruhn. </author> <title> PRISM = Methodology + Process-oriented Environment. </title> <booktitle> In Proc. of the 12th International Conference on Software Engineering, </booktitle> <year> 1990. </year>
Reference-contexts: At the Software Engineering Institute at Carnegie-Mellon University, Kellner [Kel91] has employed an explicitly enumerated state-space approach to process modeling, using the commercially available Statemate system. His approach to modeling and simulation has been successfully demonstrated on moderate sized project management processes. The PRISM project in Canada <ref> [MG90] </ref> is focussed on developing a process modeling and evolution methodology that is to be supported by future process-centered environments. However, at this time, neither of these two efforts addresses the support of process environment generation, enactment, replay or articulation.
Reference: [Mi92] <author> P. Mi. </author> <title> Modeling and Analyzing the Software Process and Process Breakdowns. </title> <type> PhD thesis, </type> <institution> Computer Science Dept. University of Southern California, </institution> <year> 1992. </year> <month> September. 18 </month>
Reference-contexts: These include mechanisms for * process scheduling and administration <ref> [Mi92] </ref>, * diagnosing, replanning, and rescheduling processes that unexpectedly breakdown or fail [MS91, Mi92, MS93], * software re-engineering processes and environment [CS91], and * knowledge-based process model repository [MLS92]. 13 Thus, we believe our approach can allow us to construct and demonstrate a computa-tional framework for modeling, enacting, and integrating team-oriented <p> These include mechanisms for * process scheduling and administration [Mi92], * diagnosing, replanning, and rescheduling processes that unexpectedly breakdown or fail <ref> [MS91, Mi92, MS93] </ref>, * software re-engineering processes and environment [CS91], and * knowledge-based process model repository [MLS92]. 13 Thus, we believe our approach can allow us to construct and demonstrate a computa-tional framework for modeling, enacting, and integrating team-oriented process-driven work environments for redesigned business organizations.
Reference: [MLS92] <author> P. Mi, M. Lee, and W. Scacchi. </author> <title> A Knowledge-based Software Process Library for Process-driven Software Development. </title> <booktitle> In Proc. 7th Knowledge-Based Software Engineering Conference, </booktitle> <address> McLean, VA, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: These include mechanisms for * process scheduling and administration [Mi92], * diagnosing, replanning, and rescheduling processes that unexpectedly breakdown or fail [MS91, Mi92, MS93], * software re-engineering processes and environment [CS91], and * knowledge-based process model repository <ref> [MLS92] </ref>. 13 Thus, we believe our approach can allow us to construct and demonstrate a computa-tional framework for modeling, enacting, and integrating team-oriented process-driven work environments for redesigned business organizations.
Reference: [MS90] <author> P. Mi and W. Scacchi. </author> <title> A Knowledge-based Environment for Modeling and Simulating Software Engineering Processes. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 2(3) </volume> <pages> 283-294, </pages> <month> Sept </month> <year> 1990. </year> <note> Also appears in Nikkei Artificial Intelligence, Vol.24(1), </note> <month> Jan. </month> <year> 1991, </year> <title> (in Japanese). </title>
Reference-contexts: To no surprise, many of our efforts addressing these life cycle activities and supporting prototype mechanisms have been described in greater detail elsewhere <ref> [MS90, MS91, NS91, MS92, MS93, MS94, SM93] </ref>. As such, I now turn to briefly describe our approach to some of these activities. 3 Modeling, Analysis and Simulation We have developed a knowledge-based computing environment for modeling, anaylzing, and simulating complex organizational processes [MS90]. We call this environment the Articulator. <p> As such, I now turn to briefly describe our approach to some of these activities. 3 Modeling, Analysis and Simulation We have developed a knowledge-based computing environment for modeling, anaylzing, and simulating complex organizational processes <ref> [MS90] </ref>. We call this environment the Articulator. It first became operational in 1988, and we have continued to use and evolve it since. 3 The Articulator utilizes a rule-based object-oriented knowledge representation scheme for modeling interrelated classes of organizational resources. <p> Figure 2 then follows with a more detailed view of a model of a generic order-fulfillment process. 4 3.1 Modeling The resource taxonomy we have constructed, explained in detail elsewhere <ref> [GS89, MS90, MS94] </ref>, serves as a process meta-model which provides an ontological framework and vocabulary for constructing organizational process models (OPMs). <p> Further, these resource classes and subclasses are interrelated in order to express relationships such as precedence among tasks (which may be sequential, iterative, conditional, optional, or concurrent), task/product pre- and post-conditions, authority relationships among agent in different roles, product compositions, IT tool/system aggregations, and others <ref> [MS90, MS94] </ref>. Thus, in using these classes of process modeling entities, we are naturally led to model organizational processes as a web of multiple interacting tasks that are collectively performed by a team of developers using an ensemble of tools that consume resources and produce composed products/artifacts [KS82]. <p> Then, we use the Articulator to query and simulate modeled processes as describe below. 3.2 Anaylsis As the process meta-model provides the semantics for OPMs, we can construct computational functions that systematically analyze the consistency, completeness, traceability and internal correctness of OPMs <ref> [CS89, MS90] </ref>. These functions represent batched or interactive queries to the knowledge base through its representational schemata. <p> These functions represent batched or interactive queries to the knowledge base through its representational schemata. At present, we have defined a few dozen paramaterized query functions that can retrieve information through navigational browsing, direct retrieval, or deductive inference, as well as what-if simulations of partial or complete OPMs <ref> [MS90] </ref>. <p> different types of reports (e.g., raw, filtered, abstracted, or para 6 phrased into structured narrative) which can be viewed interactively or incorporated into desktop publication documents. 3.3 Simulation Since process models in our scheme are computational descriptions, we can simulate-or, symbolically execute-them using knowledge-based simulation techniques supported by the Articulator <ref> [MS90] </ref>. In simple terms, this is equivalent to saying that simulation entails the symbolic performance of process tasks by their assigned agents using the tools, systems, and resources to produce the designated products.
Reference: [MS91] <author> P. Mi and W. Scacchi. </author> <title> Modeling Articulation Work in Software Engineering Processes. </title> <booktitle> Proc. of the 1st International Conference on the Software Process, </booktitle> <pages> pages 188-201, </pages> <month> Oct </month> <year> 1991. </year>
Reference-contexts: To no surprise, many of our efforts addressing these life cycle activities and supporting prototype mechanisms have been described in greater detail elsewhere <ref> [MS90, MS91, NS91, MS92, MS93, MS94, SM93] </ref>. As such, I now turn to briefly describe our approach to some of these activities. 3 Modeling, Analysis and Simulation We have developed a knowledge-based computing environment for modeling, anaylzing, and simulating complex organizational processes [MS90]. We call this environment the Articulator. <p> These include mechanisms for * process scheduling and administration [Mi92], * diagnosing, replanning, and rescheduling processes that unexpectedly breakdown or fail <ref> [MS91, Mi92, MS93] </ref>, * software re-engineering processes and environment [CS91], and * knowledge-based process model repository [MLS92]. 13 Thus, we believe our approach can allow us to construct and demonstrate a computa-tional framework for modeling, enacting, and integrating team-oriented process-driven work environments for redesigned business organizations.
Reference: [MS92] <author> P. Mi and W. Scacchi. </author> <title> Process Integration in CASE Environments. </title> <journal> IEEE Software, </journal> <volume> 9(2) </volume> <pages> 45-53, </pages> <month> March </month> <year> 1992. </year> <note> Also appears in Computer-Aided Software Engineering, (2nd Edition), </note> <editor> E. Chikofski (ed.), </editor> <booktitle> IEEE Computer Society (1993). </booktitle>
Reference-contexts: To no surprise, many of our efforts addressing these life cycle activities and supporting prototype mechanisms have been described in greater detail elsewhere <ref> [MS90, MS91, NS91, MS92, MS93, MS94, SM93] </ref>. As such, I now turn to briefly describe our approach to some of these activities. 3 Modeling, Analysis and Simulation We have developed a knowledge-based computing environment for modeling, anaylzing, and simulating complex organizational processes [MS90]. We call this environment the Articulator. <p> These capabilities can be used to reflect, 9 guide, try-out, and support how users work with process-driven ITs. These capabilities are described next. 4.1 Visualization PBI provides graphic visualizations of task precedence structure on a role-specific basis for each user (i.e., agent instance) <ref> [MS92] </ref>. For example, Figure 2 shows a visual rendering of an order-fulfillment process that reveals precedence, iteration, and concurrency relationships among tasks. Since process tasks can be modeled and hierarchically decomposed into subtasks of arbitrary depths, then PBI provides users with a subtask window and an associated (cached) workspace. <p> Subsequently, we have found that project managers in industrial organizations can quickly browse such a PBI display to ascertain the current status of an arbitrarily complex production process to varying degress of detail. The interested reader should consult <ref> [MS92] </ref> to see a number of examples. 4.2 Prototyping The process driver that backs PBI can also accept an OPM as its input. Since OPMs need not include instance details, then it is possible to use these OPMs to create prototype mock-ups of process-driven environments. <p> In this sense, our process programs are automatically derived from the process model specification by way of a special-purpose application generator <ref> [MS92, KS93] </ref>. Accordingly, the process enactment specification can incorporate any operating system command, system invocation script, virtual mouse selections, or canned user input, as well as access protocols to heterogeneous information repositories [NS91]. <p> This means it is possible for users to perform complex information processing tasks through a process-based interface that integrates access to local/networked data resources and IT tools/systems through a common GUI presentation <ref> [MS92] </ref>.
Reference: [MS93] <author> P. Mi and W. Scacchi. </author> <title> Articulation: An Integrated Approach to Diagnosis, Re-planning, and Re-scheduling. </title> <booktitle> In Proc. 8th. Knowledge-Based Software Engineering Conf., </booktitle> <pages> pages 77-85, </pages> <address> Chicago, IL, </address> <year> 1993. </year>
Reference-contexts: To no surprise, many of our efforts addressing these life cycle activities and supporting prototype mechanisms have been described in greater detail elsewhere <ref> [MS90, MS91, NS91, MS92, MS93, MS94, SM93] </ref>. As such, I now turn to briefly describe our approach to some of these activities. 3 Modeling, Analysis and Simulation We have developed a knowledge-based computing environment for modeling, anaylzing, and simulating complex organizational processes [MS90]. We call this environment the Articulator. <p> These include mechanisms for * process scheduling and administration [Mi92], * diagnosing, replanning, and rescheduling processes that unexpectedly breakdown or fail <ref> [MS91, Mi92, MS93] </ref>, * software re-engineering processes and environment [CS91], and * knowledge-based process model repository [MLS92]. 13 Thus, we believe our approach can allow us to construct and demonstrate a computa-tional framework for modeling, enacting, and integrating team-oriented process-driven work environments for redesigned business organizations.
Reference: [MS94] <author> P. Mi and W. Scacchi. </author> <title> A Meta-Model for Formulating Knowledge-Based Models of Software Development. </title> <note> IOM Department technical report 94-16, (submitted for publication)(August), </note> <year> 1994. </year>
Reference-contexts: To no surprise, many of our efforts addressing these life cycle activities and supporting prototype mechanisms have been described in greater detail elsewhere <ref> [MS90, MS91, NS91, MS92, MS93, MS94, SM93] </ref>. As such, I now turn to briefly describe our approach to some of these activities. 3 Modeling, Analysis and Simulation We have developed a knowledge-based computing environment for modeling, anaylzing, and simulating complex organizational processes [MS90]. We call this environment the Articulator. <p> Figure 2 then follows with a more detailed view of a model of a generic order-fulfillment process. 4 3.1 Modeling The resource taxonomy we have constructed, explained in detail elsewhere <ref> [GS89, MS90, MS94] </ref>, serves as a process meta-model which provides an ontological framework and vocabulary for constructing organizational process models (OPMs). <p> Further, these resource classes and subclasses are interrelated in order to express relationships such as precedence among tasks (which may be sequential, iterative, conditional, optional, or concurrent), task/product pre- and post-conditions, authority relationships among agent in different roles, product compositions, IT tool/system aggregations, and others <ref> [MS90, MS94] </ref>. Thus, in using these classes of process modeling entities, we are naturally led to model organizational processes as a web of multiple interacting tasks that are collectively performed by a team of developers using an ensemble of tools that consume resources and produce composed products/artifacts [KS82].
Reference: [NS91] <author> J. Noll and W. Scacchi. </author> <title> Integrating Diverse Information Repositories: A Distributed Hypertext Approach. </title> <journal> Computer, </journal> <volume> 24(12) </volume> <pages> 38-45, </pages> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: To no surprise, many of our efforts addressing these life cycle activities and supporting prototype mechanisms have been described in greater detail elsewhere <ref> [MS90, MS91, NS91, MS92, MS93, MS94, SM93] </ref>. As such, I now turn to briefly describe our approach to some of these activities. 3 Modeling, Analysis and Simulation We have developed a knowledge-based computing environment for modeling, anaylzing, and simulating complex organizational processes [MS90]. We call this environment the Articulator. <p> Accordingly, the process enactment specification can incorporate any operating system command, system invocation script, virtual mouse selections, or canned user input, as well as access protocols to heterogeneous information repositories <ref> [NS91] </ref>. This means it is possible for users to perform complex information processing tasks through a process-based interface that integrates access to local/networked data resources and IT tools/systems through a common GUI presentation [MS92]. <p> As such, we are now working to prototype and demonstrate a number of process-driven environments in different business and government application domains that incorporate commercial off-the-shelf systems, internally developed systems, 12 and prototype research software technologies that can operate over local-area and wide-area networks <ref> [NS91] </ref>. 5 Other Advanced SPE Technologies In addition to the the computational mechanisms described so far, our approach utilizes mechanisms not described here.
Reference: [Ost87] <author> L. Osterweil. </author> <title> Software Processes are Software Too. </title> <booktitle> In Proc. of the 9th International Conference on Software Engineering, </booktitle> <pages> pages 2-13, </pages> <address> Monterey, CA, </address> <month> Apr </month> <year> 1987. </year>
Reference-contexts: It interprets an OPM or OPM instance as an input. Thus, the OPM or instance output from the Articulator represents a process enactment specification that is coded in something similar to an object-oriented operating system scripting language, or what others have called a process programming language <ref> [Ost87] </ref>. In this sense, our process programs are automatically derived from the process model specification by way of a special-purpose application generator [MS92, KS93].
Reference: [SM93] <author> W. Scacchi and P. Mi. </author> <title> Modeling, Integrating, </title> <booktitle> and Enacting Software Engineering Processes. In Proc. 3rd. Irvine Software Symposium. </booktitle> <institution> Irvine Research Unit in Software, University of California at Irvine, </institution> <month> April </month> <year> 1993. </year> <month> 19 </month>
Reference-contexts: In practical situations where these activities and associated process mechanisms have been initially tried out (e.g, at AT&T Bell Laboratories [Vot93], Northrop-Grumman Corporation, Naval Air Warfare Center (China Lake, CA) and elsewhere <ref> [SM93] </ref>), it quickly becomes clear that business process engineering is a dynamic team-based endeavor that can only lead to mature processes through rapid process prototyping, incremental development, iterative refinement, and the reengineering of ad hoc process task instances and models. <p> To no surprise, many of our efforts addressing these life cycle activities and supporting prototype mechanisms have been described in greater detail elsewhere <ref> [MS90, MS91, NS91, MS92, MS93, MS94, SM93] </ref>. As such, I now turn to briefly describe our approach to some of these activities. 3 Modeling, Analysis and Simulation We have developed a knowledge-based computing environment for modeling, anaylzing, and simulating complex organizational processes [MS90]. We call this environment the Articulator.
Reference: [SSHO90] <author> Jr. S. Sutton, D. Heimbigner, and L.J. Osterweil. </author> <title> Language Constructs for Managing Change in Process-Centered Environments. </title> <booktitle> In Proc. of the 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 206-217, </pages> <address> Irvine, CA, </address> <month> Dec. 3-5 </month> <year> 1990. </year>
Reference-contexts: However, at this time, neither of these two efforts addresses the support of process environment generation, enactment, replay or articulation. A number of enactable representations of software engineering processes have been proto-typed in recent years. For example, APPL/A <ref> [SSHO90] </ref> is a process programming language developed in the Arcadia project [TBCO89]. It expands the programming language Ada to include process constructors, relations, and other constructs to describe procedural aspects of a software process.
Reference: [TBCO89] <author> R.N. Taylor, F.C. Belz, L.A. Clarke, and L. Osterweil. </author> <title> Foundations for the Arcadia Environment Architecture. </title> <booktitle> ACM SIGPLAN Notice, </booktitle> <pages> pages 1-13, </pages> <month> Feb </month> <year> 1989. </year>
Reference-contexts: However, at this time, neither of these two efforts addresses the support of process environment generation, enactment, replay or articulation. A number of enactable representations of software engineering processes have been proto-typed in recent years. For example, APPL/A [SSHO90] is a process programming language developed in the Arcadia project <ref> [TBCO89] </ref>. It expands the programming language Ada to include process constructors, relations, and other constructs to describe procedural aspects of a software process.
Reference: [Vot93] <author> L. Votta. </author> <title> Comparing One Formal to One Informal Process Description. In position paper circulated at the 8th. Intern. Soft. Process Work. </title> <publisher> Dagstuhl, Germany, IEEE Computer Society, </publisher> <month> February </month> <year> 1993. </year> <month> 20 </month>
Reference-contexts: In practical situations where these activities and associated process mechanisms have been initially tried out (e.g, at AT&T Bell Laboratories <ref> [Vot93] </ref>, Northrop-Grumman Corporation, Naval Air Warfare Center (China Lake, CA) and elsewhere [SM93]), it quickly becomes clear that business process engineering is a dynamic team-based endeavor that can only lead to mature processes through rapid process prototyping, incremental development, iterative refinement, and the reengineering of ad hoc process task instances and
References-found: 31

