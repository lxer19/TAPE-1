URL: http://www.eecs.umich.edu/techreports/cse/1997/CSE-TR-326-97.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse97.html
Root-URL: http://www.eecs.umich.edu
Email: sdexter@eecs.umich.edu)  pdoyle@cs.stanford.edu)  gurevich@eecs.umich.edu)  
Title: Gurevich Abstract State Machines and Schonhage Storage Modification Machines  
Author: Scott Dexter Patrick Doyle Yuri Gurevich 
Date: February 5, 1997  
Address: USA  USA  USA  
Affiliation: (University of Michigan,  (Stanford University,  (University of Michigan,  
Abstract: We demonstrate that Schonhage storage modification machines are equivalent, in a strong sense, to unary abstract state machines. We also show that if one extends the Schonhage model with a pairing function and removes the unary restriction, then equivalence between the two machine models survives. 
Abstract-found: 1
Intro-found: 1
Reference: [BG94] <author> A. Blass and Y. Gurevich. </author> <title> Evolving algebras and linear time hierarchy. </title> <editor> In B. Pehrson and I. Simon, editors, </editor> <booktitle> Proceedings of IFIP Congress 94, </booktitle> <volume> volume I, </volume> <pages> pages 383-390. </pages> <publisher> Elsevier, </publisher> <year> 1994. </year>
Reference-contexts: In both cases, the goal was to provide a machine model flexible enough to simulate the operation of arbitrary sequential algorithms in "in real time." The notion of real-time simulation is defined by Schonhage in [Sch80]. In this paper we confirm the thesis in <ref> [BG94] </ref> that Schonhage's storage modification machines are lock-step equivalent (defined below) to unary (i.e. containing only nullary and unary functions) sequential Gurevich abstract state machines (ASMs) without external functions.
Reference: [Gur93] <author> Y. Gurevich. </author> <title> Evolving algebras: An attempt to discover semantics. </title> <editor> In G. Rozenberg and A. Salomaa, editors, </editor> <booktitle> Current Trends in Theoretical Computer Science, </booktitle> <pages> pages 266-292. </pages> <publisher> World Scientific, </publisher> <year> 1993. </year>
Reference-contexts: We then extend this result to show that when we extend the Schonhage machine model with an additional pairing function we may remove the unary restriction on the abstract state machine model without violating equivalence. The notion of "real time" computing has changed since the time of Schonhage's work. <ref> [Gur93] </ref> defines the notion of "lock-step" as an alternative to Schonhage's notion of real time. For the purpose of this paper, the rather limited definition of lock-step simulation we present below suffices.
Reference: [Gur94] <author> Y. Gurevich. </author> <title> Evolving algebras 1993: Lipari guide. </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: A run of a Schonhage machine is a sequence of states such that each state is computed from the previous state by executing the previous state's current instruction. 3 Abstract State Machines An abstract state machine A (described fully in <ref> [Gur94] </ref>) is given by a signature, a program, and an initial state. For the purposes of this paper, we restrict our attention to sequential abstract state machines without external functions. The signature (or vocabulary) of A is a finite collection of function names, each with a fixed arity. <p> The last means that the nullary function (or distinguished element ) f belongs to V . We assume that every ASM has the universe Modes = fInitial; Working; Finalg in its vocabulary; the distinguished element Mode holds the current mode of the program. The ASM model <ref> [Gur94] </ref> does not include input/output conventions, allowing users some freedom. Here we adopt the following conventions. Input is a binary sequence.
Reference: [Kol53] <author> A. N. </author> <title> Kolmogorov. On the notion of algorithm. </title> <journal> Uspekhi Mat. Nauk, </journal> <volume> 8(4) </volume> <pages> 175-176, </pages> <year> 1953. </year> <note> In Russian. </note>
Reference-contexts: 1 Introduction Schonhage introduced storage modification machines (Schonhage machines) in [Sch70] (and expanded them in [Sch80]) as a general model of computation. Although developed independently, Schonhage's model generalizes an earlier model presented by Kolmogorov in <ref> [Kol53] </ref> and explained in [KU63]. In both cases, the goal was to provide a machine model flexible enough to simulate the operation of arbitrary sequential algorithms in "in real time." The notion of real-time simulation is defined by Schonhage in [Sch80].
Reference: [KU63] <author> A. N. Kolmogorov and V. A. Uspenskii. </author> <title> On the definition of an algorithm. </title> <booktitle> AMS Translations 2nd Series, </booktitle> <volume> 29 </volume> <pages> 217-245, </pages> <year> 1963. </year> <note> Originally in Uspehi Mat. Nauk , 13, </note> <year> 1958, </year> <pages> 3-28. </pages>
Reference-contexts: 1 Introduction Schonhage introduced storage modification machines (Schonhage machines) in [Sch70] (and expanded them in [Sch80]) as a general model of computation. Although developed independently, Schonhage's model generalizes an earlier model presented by Kolmogorov in [Kol53] and explained in <ref> [KU63] </ref>. In both cases, the goal was to provide a machine model flexible enough to simulate the operation of arbitrary sequential algorithms in "in real time." The notion of real-time simulation is defined by Schonhage in [Sch80].
Reference: [Sch70] <editor> A. Schonhage. Universelle turing speicherung. In Dorr and Hotz, editors, </editor> <booktitle> Automatentheorie und Formale Sprachen, </booktitle> <pages> pages 369-383. </pages> <institution> Bibliogr. Institut, Mannheim, </institution> <year> 1970. </year>
Reference-contexts: 1 Introduction Schonhage introduced storage modification machines (Schonhage machines) in <ref> [Sch70] </ref> (and expanded them in [Sch80]) as a general model of computation. Although developed independently, Schonhage's model generalizes an earlier model presented by Kolmogorov in [Kol53] and explained in [KU63].
Reference: [Sch80] <author> A. Schonhage. </author> <title> Storage modification machines. </title> <journal> SIAM J. Computing, </journal> <volume> 9 </volume> <pages> 490-508, </pages> <year> 1980. </year> <month> 19 </month>
Reference-contexts: 1 Introduction Schonhage introduced storage modification machines (Schonhage machines) in [Sch70] (and expanded them in <ref> [Sch80] </ref>) as a general model of computation. Although developed independently, Schonhage's model generalizes an earlier model presented by Kolmogorov in [Kol53] and explained in [KU63]. <p> In both cases, the goal was to provide a machine model flexible enough to simulate the operation of arbitrary sequential algorithms in "in real time." The notion of real-time simulation is defined by Schonhage in <ref> [Sch80] </ref>. In this paper we confirm the thesis in [BG94] that Schonhage's storage modification machines are lock-step equivalent (defined below) to unary (i.e. containing only nullary and unary functions) sequential Gurevich abstract state machines (ASMs) without external functions. <p> We use sans serif text to indicate abstract state machine code; Courier indicates Schonhage machine code. 2 Storage Modification Machines A Schonhage machine (described fully in <ref> [Sch80] </ref>) consists of a dynamic data structure (called a structure), combined with a finite control program that manipulates the structure while reading an input string and writing to an output string.
References-found: 7

