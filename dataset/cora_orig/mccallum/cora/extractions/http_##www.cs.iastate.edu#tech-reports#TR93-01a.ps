URL: http://www.cs.iastate.edu/tech-reports/TR93-01a.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: 
Title: Introduction to the Literature On Programming Language Design  
Author: Gary T. Leavens TR #-a 
Address: 226 Atanasoff Hall  Ames, Iowa 50011-1040, USA  
Affiliation: Department of Computer Science  Iowa Sate University  
Note: c Gary T. Leavens. Permission is granted for you to make copies for educational and scholarly purposes, but not for direct commercial advantage, provided this notice appears on all copies. All other rights reserved.  
Date: January 1993, revised January 1994  
Abstract: Keywords: programming languages, semantics, type systems, polymorphism, type theory, data abstraction, functional programming, object-oriented programming, logic programming, declarative programming, parallel and distributed programming languages. 1992 CR Categories: D.1.1 [Programming Techniques] Applicative (Functional) Programming; D.1.3 [Programming Techniques] Concurrent Programming; D.1.5 [Programming Techniques] Object-oriented Programming; D.1.6 [Programming Techniques] Logic Programming; D.2.2 [Software Engineering] Tools and Techniques | Modules and interfaces; D.2.4 [Software Engineering] Program Verification; D.2.4 [Software Engineering] Program Verification; D.3.1 [Programming Languages] Formal Definitions and Theory; D.3.2 [Programming Languages] Language Classifications; D.3.3 [Programming Languages] Language Constructs and Features; F.3.1 [Logics and Meaning of Programs] Specifying and verifying and reasoning about programs; F.3.2 [Logics and Meaning of Programs] Semantics of Programming Languages; F.3.3 [Logics and Meaning of Programs] Studies of Program Constructs; H.2.3 [Database Management ] Languages|Database (persistent) programming languages; I.2.5 [Aritificial Intelligence] Programming Languages and Software. 
Abstract-found: 1
Intro-found: 1
Reference: [Aba93] <author> Martin Abadi. </author> <title> Baby Modula-3 and a Theory of Objects. </title> <type> Technical Report 95, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <address> 130 Lytton Avenue, Palo Alto, CA 94301, </address> <month> Febru-ary </month> <year> 1993. </year> <title> Order from src-report@src.dec.com. </title>
Reference-contexts: By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] [CM89] [AC90] [CMMS91] [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] <ref> [Aba93] </ref> [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A recent survey
Reference: [AC90] <author> Roberto M. Amadio and Luca Cardelli. </author> <title> Subtyping Recursive Types. </title> <type> Technical Report 62, </type> <institution> Digital Systems Research Center, </institution> <address> Palo Alto, Ca 94301, </address> <month> August </month> <year> 1990. </year> <note> See also the 1991 POPL proceedings. </note>
Reference-contexts: For example, Trellis/Owl [SCB + 86] features strong type checking and a declared (i.e., by-name) subtype relation. By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] [CM89] <ref> [AC90] </ref> [CMMS91] [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80]
Reference: [Ack82] <author> W. B. Ackerman. </author> <title> Data Flow Languages. </title> <journal> Computer, </journal> <volume> 15(2) </volume> <pages> 15-25, </pages> <month> February </month> <year> 1982. </year>
Reference-contexts: A survey that focuses on distributed programs is [And91b]. Andrew's textbook on concurrent programming languages also contains material on program verification as well as some survey material [And91a]. Data flow languages are surveyed in <ref> [Ack82] </ref>. A recent introduction to concurrent programming techniques is [Sno92]. Actor languages are discussed in [Agh91]. A concurrent version of ML is described in [Rep93]. Some aspects of data parallel programming languages are described in [HS86] [Gri93]. The language Jade is described in [RL92] [RSL93].
Reference: [Ada83] <author> American National Standards Institute. </author> <title> Reference Manual for the Ada Programming Language, </title> <month> February </month> <year> 1983. </year> <note> ANSI/MIL-STD 1815A. Also published by Springer-Verlag as LNCS 155. </note>
Reference-contexts: Specifically, it attempts to support program verification. 5.7 Ada Ada was designed by first setting out requirements for the language [Hig78] and then designing and revising a language to meet those requirements [IBH + 79] <ref> [Ada83] </ref> [IBFW91]. 5.8 Lisp-like Languages The original LISP is described in the LISP 1.5 Programmer's Manual [MAE + 65]. The language has since evolved in many directions. MacLisp is a main-stream dialect that provided many system building tools [Pit83]. The successor to MacLisp is Common Lisp [Ste84] [Ste90].
Reference: [Agh91] <author> Gul Agha. </author> <title> The Structure and Semantics of Actor Languages. </title> <editor> In J. W. de Bakker, W. P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Foundations of Object-Oriented Languages, REX School/Workshop, Noordwijkerhout, The Netherlands, May/June 1990, volume 489 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-59. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference-contexts: A survey that focuses on distributed programs is [And91b]. Andrew's textbook on concurrent programming languages also contains material on program verification as well as some survey material [And91a]. Data flow languages are surveyed in [Ack82]. A recent introduction to concurrent programming techniques is [Sno92]. Actor languages are discussed in <ref> [Agh91] </ref>. A concurrent version of ML is described in [Rep93]. Some aspects of data parallel programming languages are described in [HS86] [Gri93]. The language Jade is described in [RL92] [RSL93]. Distrbuted programming is a subarea of parallel programming with its own set of problems.
Reference: [Al91a] <author> Krzysztof R. Apt and Ernst-Rudiger 0lderog. </author> <title> Introduction to Program Verification. </title> <editor> In E. J. Neuhold and M. Paul, editors, </editor> <booktitle> Formal Description of Programming Concepts, IFIP State-of-the-Art Reports, </booktitle> <pages> pages 363-429. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference: [AL91b] <author> Andrea Asperti and Guiseppe Longo. </author> <title> Categories, Types and Structures. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass, </address> <year> 1991. </year>
Reference: [All86] <author> Lloyd Allison. </author> <title> A Practical Introduction to Denotational Semantics. </title> <publisher> Cambridge University Press, </publisher> <address> New York, N.Y., </address> <year> 1986. </year>
Reference: [Ame87] <author> Pierre America. </author> <title> Inheritance and Subtyping in a Parallel Object-Oriented Language. </title> <editor> In Jean Bezivin et al., editors, </editor> <booktitle> ECOOP '87, European Conference on Object-Oriented Programming, Paris, France, </booktitle> <pages> pages 234-242, </pages> <address> New York, N.Y., </address> <month> June </month> <year> 1987. </year> <title> Springer-Verlag. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 276. </volume>
Reference-contexts: Snyder's analysis of the issues involved is insightful [Sny86], although his viewpoint is different from that of most advocates of multiple inheritance. My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and [Lea91b]. For a contrast, see also [BW90b] <ref> [Ame87] </ref> [AvdL90] [Mey88] [MOM90] [Coo92] [UR92] [LW93a] [LW93b]. The concept of delegation is explored in [Lie86], in Actra [LTP86] [LaL89], and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time.
Reference: [And91a] <author> Gregory R. Andrews. </author> <title> Concurrent Programming: </title> <booktitle> Principles and Practice. </booktitle> <publisher> The Ben-jamin/Cummings Publishing Company, </publisher> <year> 1991. </year>
Reference-contexts: A survey that focuses on distributed programs is [And91b]. Andrew's textbook on concurrent programming languages also contains material on program verification as well as some survey material <ref> [And91a] </ref>. Data flow languages are surveyed in [Ack82]. A recent introduction to concurrent programming techniques is [Sno92]. Actor languages are discussed in [Agh91]. A concurrent version of ML is described in [Rep93]. Some aspects of data parallel programming languages are described in [HS86] [Gri93].
Reference: [And91b] <author> Gregory R. Andrews. </author> <title> Paradigms for Process Interaction in Distributed Programs. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(1) </volume> <pages> 49-90, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: A more recent surveys that focuses on the Linda model appears in [CG89]. (See [BZ91] [BZ92] [GC92] for more recent work on Linda.) A recent survey that focuses on object-oriented aspects is [WKH92]. A survey that focuses on distributed programs is <ref> [And91b] </ref>. Andrew's textbook on concurrent programming languages also contains material on program verification as well as some survey material [And91a]. Data flow languages are surveyed in [Ack82]. A recent introduction to concurrent programming techniques is [Sno92]. Actor languages are discussed in [Agh91].
Reference: [AO93] <author> Gregory R. Andrews and Ronald A. Olsson. </author> <title> The SR Programming Language: Concurrency in Practice. </title> <publisher> The Benjamin/Cummings Publishing Company, </publisher> <address> Redwood City, CA, </address> <year> 1993. </year>
Reference-contexts: A recent survey, with a focus on object-orientation is [CC91]. Other sources of references are is the collection of reprints [AS91], and the recent book [GR93]. Of particular interest are the languages Argus [LS83] [Wei90] and SR [AOC + 88] <ref> [AO93] </ref>. The Amoeba distributed operating system also has interesting implications for language designers [TvRvS + 90] [TKB92]. An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92].
Reference: [AOC + 88] <author> Gregory R. Andrews, Ronald A. Olsson, Michael Coffin, Irving Elshoff, Kelvin Nilsen, Titus Purdin, and Gregg Townsend. </author> <title> An Overview of the SR Language and Implementation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(1) </volume> <pages> 51-86, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: A survey appears in [BST89], which can be consulted for other references. A recent survey, with a focus on object-orientation is [CC91]. Other sources of references are is the collection of reprints [AS91], and the recent book [GR93]. Of particular interest are the languages Argus [LS83] [Wei90] and SR <ref> [AOC + 88] </ref> [AO93]. The Amoeba distributed operating system also has interesting implications for language designers [TvRvS + 90] [TKB92]. An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92].
Reference: [Apt90] <author> Krzysztof R. Apt. </author> <title> Logic Programming. </title> <editor> In J. van Leewen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Models and Semantics, chapter 10, </booktitle> <pages> pages 493-574. </pages> <publisher> The MIT Press, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference-contexts: A classic textbook on Prolog is the book by Clocksin and Mellish [CM81]; another good text is Sterling and Shapiro's [SS86]. A short description and evaluation of Prolog is found in the paper "The Prolog Phenomenon" [McD80]. A recent survey is <ref> [Apt90] </ref>. Several "AI languages" preceded the development of Prolog; for example, Planner [SWC71] and Conniver [MS74]. Much recent work has focused on concurrent logic programming languages [Sha89], which are perhaps more like CSP than logic programming.
Reference: [AS83] <author> Gregory R. Andrews and Fred B. Schneider. </author> <title> Concepts and Notations for Concurrent Programming. </title> <journal> ACM Computing Surveys, </journal> <volume> 15(1) </volume> <pages> 3-43, </pages> <month> March </month> <year> 1983. </year>
Reference-contexts: Important conferences not mentioned above include the annual ACM Symposium on Operating Systems Principles, ACM SIGPLAN Symposium on 7 Principles & Practice of Parallel Programming, and the ACM SIGACT-SIGOPS Symposium on Principles of Distributed Computing. An older, but still good, survey on parallel programming language issues is <ref> [AS83] </ref>. A more recent surveys that focuses on the Linda model appears in [CG89]. (See [BZ91] [BZ92] [GC92] for more recent work on Linda.) A recent survey that focuses on object-oriented aspects is [WKH92]. A survey that focuses on distributed programs is [And91b].
Reference: [AS91] <author> Akkihebba L. Ananda and Balasubramaniam Srinivasan. </author> <title> Distributed Computing Systems: Concepts and Structures. </title> <publisher> IEEE Computer Society Press Reprint Collection. IEEE Computer Society Press, Los Alamitos, </publisher> <address> California, </address> <year> 1991. </year> <month> 9 </month>
Reference-contexts: Distrbuted programming is a subarea of parallel programming with its own set of problems. A survey appears in [BST89], which can be consulted for other references. A recent survey, with a focus on object-orientation is [CC91]. Other sources of references are is the collection of reprints <ref> [AS91] </ref>, and the recent book [GR93]. Of particular interest are the languages Argus [LS83] [Wei90] and SR [AOC + 88] [AO93]. The Amoeba distributed operating system also has interesting implications for language designers [TvRvS + 90] [TKB92].
Reference: [ASS85] <author> Harold Abelson, Gerald Jay Sussman, and Julie Sussman. </author> <title> Structure and Interpretation of Computer Programs. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1985. </year>
Reference-contexts: MacLisp is a main-stream dialect that provided many system building tools [Pit83]. The successor to MacLisp is Common Lisp [Ste84] [Ste90]. Unlike most earlier dialects of Lisp, Common Lisp has static scoping. Scheme was the first dialect of Lisp to emphasize static scoping [SS78b] [RCA + 86] <ref> [ASS85] </ref>. See also the references in the Revised 4 report [CE91]. ZetaLisp (as found on Symbolics Lisp Machines) includes the influential Flavors mechanism for object-oriented programming [WM80] [SMW84] [Sym84]. The Flavors mechanism evolved into the Common Lisp Object System [Kee89] [Ste90] [Pae93].
Reference: [Ast91] <author> Edigio Astesiano. </author> <title> Inductive and Operational Semantics. </title> <editor> In E. J. Neuhold and M. Paul, editors, </editor> <booktitle> Formal Description of Programming Concepts, IFIP State-of-the-Art Reports, </booktitle> <pages> pages 51-136. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference: [AvdL90] <author> Pierre America and Frank van der Linden. </author> <title> A Parallel Object-Oriented Language with Inheritance and Subtyping. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 25(10) </volume> <pages> 161-168, </pages> <month> October </month> <year> 1990. </year> <booktitle> OOPSLA ECOOP '90 Proceedings, N. Meyrowitz (editor). </booktitle>
Reference-contexts: Snyder's analysis of the issues involved is insightful [Sny86], although his viewpoint is different from that of most advocates of multiple inheritance. My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and [Lea91b]. For a contrast, see also [BW90b] [Ame87] <ref> [AvdL90] </ref> [Mey88] [MOM90] [Coo92] [UR92] [LW93a] [LW93b]. The concept of delegation is explored in [Lie86], in Actra [LTP86] [LaL89], and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time.
Reference: [Bac78a] <author> John Backus. </author> <title> Can Programming Be Liberated from the von Neumann Style? A Functional Style and Its Algebra of Programs. </title> <journal> Communications of the ACM, </journal> <volume> 21(8) </volume> <pages> 613-641, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: For an introduction that also treats implementation issues, see [Pey87]. The articles in [Tur90b] make an interesting introduction to some research topics. John Backus, one of the designers of Fortran, proposed a new language for functional programming without any names called FP in his Turing Award Lecture <ref> [Bac78a] </ref>. A functional programming style using a more congenial notation based on Landin's ISWIM [Lan66] is developed in Henderson's book Functional Programming: Application and Implementation [Hen80]. More recent languages have emphasized lazy evaluation. <p> The development of FORTRAN IV is discussed in [BH64]. John Backus, who headed the team that developed FORTRAN, later became dissatisfied with the influence that FORTRAN had on programming languages <ref> [Bac78a] </ref>. 5.2 Algol 60 The Algol 60 report is a true classic [NBB + 63]. Among other innovations, it introduced the syntax formalism now known as BNF.
Reference: [Bac78b] <author> John Backus. </author> <title> The History of FORTRAN I, II, and III. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 13(8) </volume> <pages> 165-180, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: The "Grand Tour" book by Horowitz has articles about specific languages as well [Hor87]. See also the languages mentioned under the various paradigms above. 5.1 FORTRAN The first widely used programming language was FORTRAN. See <ref> [Bac78b] </ref> for a discussion of the history of FORTRAN, what early versions of FORTRAN were like, and early references. The development of FORTRAN IV is discussed in [BH64].
Reference: [Bac89] <author> R. C. Backhouse. </author> <title> Constructive Type Theory An Introduction. </title> <editor> In Manfred Broy, editor, </editor> <booktitle> Constructive Methods in Computing Science, volume F55 of NATO ASI Series, </booktitle> <pages> pages 9-60. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1989. </year>
Reference: [Bar84] <author> H. P. Barendregt. </author> <title> The Lambda Calculus: Its Syntax and Semantics. </title> <publisher> North-Holland Publishing Co., </publisher> <address> New York, N.Y., </address> <year> 1984. </year> <note> Revised Edition. </note>
Reference: [Bar90] <author> H. P. Barendregt. </author> <title> Functional Programming and Lambda Calculus. </title> <editor> In J. van Leewen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Models and Semantics, chapter 7, </booktitle> <pages> pages 321-363. </pages> <publisher> The MIT Press, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference-contexts: Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is <ref> [Bar90] </ref>. There are several good books on functional programming, including [Hen87] [BW88] [Hen80] [SF89]. For an introduction that also treats implementation issues, see [Pey87]. The articles in [Tur90b] make an interesting introduction to some research topics.
Reference: [BC91] <author> J. A. Brown and H. P. Crowder. APL2: </author> <title> Getting Started. </title> <journal> IBM Systems Journal, </journal> <volume> 30(4) </volume> <pages> 433-445, </pages> <year> 1991. </year>
Reference-contexts: More references on APL can be found by consulting the proceedings of the yearly International Conference on APL (sponsored by the ACM). (In the past this was often just called APL 83 or some such name.) The most recent version of APL, APL2, is described in [Bro88] <ref> [BC91] </ref>. 6 Parallel and Distributed Programming Languages Parallel programming languages are a hot topic of current research, and one with considerable overlap with operating systems, networking, and database systems. Many of the above areas and articles have implications for parallel programming.
Reference: [BCM + 93] <author> Kim B. Bruce, Jon Crabtree, Thomas P. Murtagh, Robert van Gent, Allyn Dimock, and Robert Muller. </author> <title> Safe and decidable type checking in an object-oriented language. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 28(10) </volume> <pages> 29-46, </pages> <month> October </month> <year> 1993. </year> <booktitle> OOPSLA '93 Proceedings, Andreas Paepcke (editor). </booktitle>
Reference-contexts: By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] [CM89] [AC90] [CMMS91] [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] <ref> [BCM + 93] </ref> [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models 4.1
Reference: [BCMS89] <author> Roland Backhouse, Paul Chisholm, Grant Malcolm, and Erik Saaman. </author> <title> Do-it-Yourself Type Theory. </title> <journal> Formal Aspects of Computing, </journal> <volume> 1(1) </volume> <pages> 19-84, </pages> <month> January March </month> <year> 1989. </year>
Reference: [BGHS91] <author> Bordon Blair, John Gallagher, David Hutchison, and Doug Shepherd, </author> <title> editors. Object-Oriented Langauges, Systems and Applications. </title> <publisher> Pitman Publishing, </publisher> <address> London, </address> <year> 1991. </year>
Reference-contexts: A more technical introduction is Budd's book [Bud91]. Meyer's book on Eiffel also has more technical meat [Mey88], as well as a focus on software engineering concerns. Another fairly complete treatment is given in Goldberg and Robson's book on Smalltalk-80 [GR83]. A graduate-level introduction is <ref> [BGHS91] </ref>. Descriptions of object-oriented design methods are found in [Boo91] [WBWW90] [dCLF92] [dCF92] [dCLF93]. Both [Boo91] and [dCLF93] have many recent references. A treatment of object-oriented design that focuses more on C++ is found in [Mul89]. See also the survey by [WBJ90]. A collection of papers is found in [Pet87].
Reference: [BH64] <author> J. W. Backus and W. P. Heising. </author> <title> FORTRAN. </title> <journal> IEEE Transactions on Electronic Computers, </journal> <volume> EC-13(4):382-385, </volume> <year> 1964. </year>
Reference-contexts: See also the languages mentioned under the various paradigms above. 5.1 FORTRAN The first widely used programming language was FORTRAN. See [Bac78b] for a discussion of the history of FORTRAN, what early versions of FORTRAN were like, and early references. The development of FORTRAN IV is discussed in <ref> [BH64] </ref>. John Backus, who headed the team that developed FORTRAN, later became dissatisfied with the influence that FORTRAN had on programming languages [Bac78a]. 5.2 Algol 60 The Algol 60 report is a true classic [NBB + 63]. Among other innovations, it introduced the syntax formalism now known as BNF.
Reference: [BH90] <author> Andrew P. Black and Norman C. Hutchinson. </author> <title> Typechecking Polymorphism in Emerald. </title> <type> Technical Report TR 90-34, </type> <institution> Department of Computer Science; The University of Arizona, </institution> <address> Tucson, AZ 85721, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: Much recent work involves object-oriented languages. For example, Trellis/Owl [SCB + 86] features strong type checking and a declared (i.e., by-name) subtype relation. By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] <ref> [BH90] </ref> [BH91] [Car91].
Reference: [BH91] <author> Andrew P. Black and Norman Hutchinson. </author> <title> Typechecking Polymorphism in Emerald. </title> <type> Technical Report CRL 91/1 (Revised), </type> <institution> Digital Equipment Corportation, Cambridge Research Lab, </institution> <address> Cambridge, Mass., </address> <month> July </month> <year> 1991. </year>
Reference-contexts: Much recent work involves object-oriented languages. For example, Trellis/Owl [SCB + 86] features strong type checking and a declared (i.e., by-name) subtype relation. By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] <ref> [BH91] </ref> [Car91].
Reference: [BHJ + 87] <author> Andrew Black, Norman Hutchinson, Eric Jul, Henry Levy, and Larry Carter. </author> <title> Distribution and Abstract Types in Emerald. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(1):65-76, </volume> <month> January </month> <year> 1987. </year>
Reference-contexts: Much recent work involves object-oriented languages. For example, Trellis/Owl [SCB + 86] features strong type checking and a declared (i.e., by-name) subtype relation. By contrast many other languages feature structural subtyping, including Emerald [BHJL86] <ref> [BHJ + 87] </ref> [BH90] [BH91] [Car91].
Reference: [BHJL86] <author> Andrew Black, Norman Hutchinson, Eric Jul, and Henry Levy. </author> <title> Object Structure in the Emerald System. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 21(11) </volume> <pages> 78-86, </pages> <month> November </month> <year> 1986. </year> <booktitle> OOPSLA '86 Conference Proceedings, </booktitle> <editor> Norman Meyrowitz (editor), </editor> <month> September </month> <year> 1986, </year> <institution> Portland, Oregon. </institution> <month> 10 </month>
Reference-contexts: Much recent work involves object-oriented languages. For example, Trellis/Owl [SCB + 86] features strong type checking and a declared (i.e., by-name) subtype relation. By contrast many other languages feature structural subtyping, including Emerald <ref> [BHJL86] </ref> [BHJ + 87] [BH90] [BH91] [Car91].
Reference: [BHR84] <author> S. D. Brookes, C. A. R. Hoare, and A. W. Roscoe. </author> <title> A Theory of Communicating Sequential Processes. </title> <journal> Journal of the ACM, </journal> <volume> 31(3) </volume> <pages> 560-599, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92]. A classic reference for the operational semantics of concurrent processes is Milner's book on CCS [Mil89b]. Another widely used approach is Hoare's CSP [Hoa78] <ref> [BHR84] </ref> [LS84] [Hoa85]. See [Hen88] [BM90] [Mil90b] [MPW92] for more recent work in the semantics of concurrency, and [LL90] and [Bro91] for recent work in the semantics of distributed systems. 7 The Future A (by now a bit dated) summary of research directions for language design is given in [LLM89].
Reference: [BHW89] <author> P. Brand, S. Haridi, and D.H.D. Warren. </author> <title> Andorra Prolog. New Generation Computing, </title> <address> 7(2-3):109-129, </address> <year> 1989. </year>
Reference-contexts: Much recent work has focused on concurrent logic programming languages [Sha89], which are perhaps more like CSP than logic programming. An evaluation of the Fifth-Generation project and some history of concurrent logic programming languages is found in [SW93]. A related language is Andorra Prolog <ref> [BHW89] </ref>. Work on type checking for logic programming languages is surveyed in the collection [Pfe92]. The language Prolog features type inference, type checking, and higher-order programming constructs [NM88] [Mil90a] [Mil89a] [NM90] [MNPS91]. 4.3 Other Declarative Programming Paradigms Constraint-based languages will probably be important in the future.
Reference: [BL90] <author> K. Bruce and G. Longo. </author> <title> A modest model of records, inheritance and bounded quantification. </title> <journal> Information and Computation, </journal> 87(1/2):196-240, 1990. 
Reference-contexts: By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] [CM89] [AC90] [CMMS91] [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] <ref> [BL90] </ref> [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A
Reference: [BM90] <author> Bard Bloom and Albert R. Meyer. </author> <title> Experimenting with Process Equivalence. </title> <editor> In M. Z. Kwiatkowska, M. W. Shields, and R. M. Thomas, editors, </editor> <title> Semantics for Concurrency, </title> <booktitle> Le-icester, Workshops in Computing, </booktitle> <pages> pages 81-95. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference-contexts: An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92]. A classic reference for the operational semantics of concurrent processes is Milner's book on CCS [Mil89b]. Another widely used approach is Hoare's CSP [Hoa78] [BHR84] [LS84] [Hoa85]. See [Hen88] <ref> [BM90] </ref> [Mil90b] [MPW92] for more recent work in the semantics of concurrency, and [LL90] and [Bro91] for recent work in the semantics of distributed systems. 7 The Future A (by now a bit dated) summary of research directions for language design is given in [LLM89].
Reference: [BM92] <author> Kim Bruce and John C. Mitchell. </author> <title> PER models of subtyping, recursive types and higher-order polymorphism. </title> <booktitle> In Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 316-327. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1992. </year>
Reference-contexts: By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] [CM89] [AC90] [CMMS91] [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] <ref> [BM92] </ref> [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A recent
Reference: [Boe89] <author> Hans-J. Boehm. </author> <title> Type Inference in the Presence of Type Abstraction. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 24(7) </volume> <pages> 192-206, </pages> <month> July </month> <year> 1989. </year> <booktitle> Proceedings of the SIGPLAN '89 Conference on Programming Language Design and Implementation, </booktitle> <address> Portland, Oregon, </address> <month> June. </month>
Reference: [Boo91] <author> Grady Booch. </author> <title> Object-Oriented Design: With Applications. </title> <publisher> Benjamin Cummings, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference-contexts: Meyer's book on Eiffel also has more technical meat [Mey88], as well as a focus on software engineering concerns. Another fairly complete treatment is given in Goldberg and Robson's book on Smalltalk-80 [GR83]. A graduate-level introduction is [BGHS91]. Descriptions of object-oriented design methods are found in <ref> [Boo91] </ref> [WBWW90] [dCLF92] [dCF92] [dCLF93]. Both [Boo91] and [dCLF93] have many recent references. A treatment of object-oriented design that focuses more on C++ is found in [Mul89]. See also the survey by [WBJ90]. A collection of papers is found in [Pet87]. <p> Another fairly complete treatment is given in Goldberg and Robson's book on Smalltalk-80 [GR83]. A graduate-level introduction is [BGHS91]. Descriptions of object-oriented design methods are found in <ref> [Boo91] </ref> [WBWW90] [dCLF92] [dCF92] [dCLF93]. Both [Boo91] and [dCLF93] have many recent references. A treatment of object-oriented design that focuses more on C++ is found in [Mul89]. See also the survey by [WBJ90]. A collection of papers is found in [Pet87]. More recent collections of edited research papers are [SW87] [KL89].
Reference: [Bro88] <author> James A. Brown. </author> <title> APL2 at a glance. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1988. </year>
Reference-contexts: More references on APL can be found by consulting the proceedings of the yearly International Conference on APL (sponsored by the ACM). (In the past this was often just called APL 83 or some such name.) The most recent version of APL, APL2, is described in <ref> [Bro88] </ref> [BC91]. 6 Parallel and Distributed Programming Languages Parallel programming languages are a hot topic of current research, and one with considerable overlap with operating systems, networking, and database systems. Many of the above areas and articles have implications for parallel programming.
Reference: [Bro91] <author> Manfred Broy. </author> <title> Formalization of Distributed, Concurrent, Reactive Systems. </title> <editor> In E. J. Neuhold and M. Paul, editors, </editor> <booktitle> Formal Description of Programming Concepts, IFIP State-of-the-Art Reports, </booktitle> <pages> pages 319-361. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference-contexts: A classic reference for the operational semantics of concurrent processes is Milner's book on CCS [Mil89b]. Another widely used approach is Hoare's CSP [Hoa78] [BHR84] [LS84] [Hoa85]. See [Hen88] [BM90] [Mil90b] [MPW92] for more recent work in the semantics of concurrency, and [LL90] and <ref> [Bro91] </ref> for recent work in the semantics of distributed systems. 7 The Future A (by now a bit dated) summary of research directions for language design is given in [LLM89].
Reference: [Bru93] <author> K. Bruce. </author> <title> Safe Type Checking in a Statically Typed Object-Oriented Programming Language. </title> <booktitle> In Proc. ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 285-298, </pages> <year> 1993. </year>
Reference-contexts: By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] [CM89] [AC90] [CMMS91] [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] <ref> [Bru93] </ref>. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A recent survey of
Reference: [BST89] <author> Henri E. Bal, Jennifer G. Steiner, and Andrew S. Tanenbaum. </author> <title> Programming Languages for Distributed Computing Systems. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 261-322, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: A concurrent version of ML is described in [Rep93]. Some aspects of data parallel programming languages are described in [HS86] [Gri93]. The language Jade is described in [RL92] [RSL93]. Distrbuted programming is a subarea of parallel programming with its own set of problems. A survey appears in <ref> [BST89] </ref>, which can be consulted for other references. A recent survey, with a focus on object-orientation is [CC91]. Other sources of references are is the collection of reprints [AS91], and the recent book [GR93]. Of particular interest are the languages Argus [LS83] [Wei90] and SR [AOC + 88] [AO93].
Reference: [BTGS90] <author> V. Breazu-Tannen, C. A. Gunter, and A. Scedrov. </author> <title> Computing with Coercions. </title> <booktitle> In Proceedings of the 1990 ACM Conference on LISP and Functional Programming, Nice, France, </booktitle> <pages> pages 44-60. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] [CM89] [AC90] [CMMS91] [Car93] [CCH + 89] [CHC90] [Coo89] <ref> [BTGS90] </ref> [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative
Reference: [Bud91] <author> Timothy Budd. </author> <title> Object-Oriented Programming. </title> <publisher> Addison-Wesley, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference-contexts: A standard example is OBJ [FGJM85], which also has an interesting module system [Gog84]. 4.4 Object-Oriented Programming A good, but not very technical, introduction to object-oriented concepts is given by Cox [Cox86]; his book also discusses the language Objective-C. A more technical introduction is Budd's book <ref> [Bud91] </ref>. Meyer's book on Eiffel also has more technical meat [Mey88], as well as a focus on software engineering concerns. Another fairly complete treatment is given in Goldberg and Robson's book on Smalltalk-80 [GR83]. A graduate-level introduction is [BGHS91].
Reference: [BW88] <author> Richard J. Bird and Philip Wadler. </author> <title> Introduction to Functional Programming. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice-Hall, Inc., </publisher> <address> New York, N.Y., </address> <year> 1988. </year>
Reference-contexts: Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90]. There are several good books on functional programming, including [Hen87] <ref> [BW88] </ref> [Hen80] [SF89]. For an introduction that also treats implementation issues, see [Pey87]. The articles in [Tur90b] make an interesting introduction to some research topics.
Reference: [BW90a] <author> Michael Barr and Charles Wells. </author> <booktitle> Category Theory for Computing Science. International Series in Computer Science. </booktitle> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1990. </year> <note> ISBN 0-13-120486-6. </note>
Reference: [BW90b] <author> Kim B. Bruce and Peter Wegner. </author> <title> An Algebraic Model of Subtype and Inheritance. </title> <editor> In Francois Ban~cilhon and Peter Buneman, editors, </editor> <booktitle> Advances in Database Programming Languages, </booktitle> <pages> pages 75-96. </pages> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Snyder's analysis of the issues involved is insightful [Sny86], although his viewpoint is different from that of most advocates of multiple inheritance. My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and [Lea91b]. For a contrast, see also <ref> [BW90b] </ref> [Ame87] [AvdL90] [Mey88] [MOM90] [Coo92] [UR92] [LW93a] [LW93b]. The concept of delegation is explored in [Lie86], in Actra [LTP86] [LaL89], and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time.
Reference: [BWP87] <author> Manfred Broy, Martin Wirsing, and Petter Pepper. </author> <title> On the Algebraic Definition of Programming Languages. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 9(1) </volume> <pages> 54-99, </pages> <month> January </month> <year> 1987. </year>
Reference: [BZ91] <author> Paul Butcher and Hussein Zedan. </author> <title> Lucinda-An Overview. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 26(8) </volume> <pages> 90-100, </pages> <month> August </month> <year> 1991. </year> <month> 11 </month>
Reference-contexts: An older, but still good, survey on parallel programming language issues is [AS83]. A more recent surveys that focuses on the Linda model appears in [CG89]. (See <ref> [BZ91] </ref> [BZ92] [GC92] for more recent work on Linda.) A recent survey that focuses on object-oriented aspects is [WKH92]. A survey that focuses on distributed programs is [And91b]. Andrew's textbook on concurrent programming languages also contains material on program verification as well as some survey material [And91a].
Reference: [BZ92] <author> Paul Butcher and Hussein Zedan. </author> <title> Lucinda A Polymorphic Linda. </title> <editor> In J. P. Banatre and D. Le Metayer, editors, </editor> <booktitle> Research Directions in High-Level Parallel Programming Languages, </booktitle> <address> Mont Saint-Michel, France, </address> <month> June </month> <year> 1991, </year> <booktitle> Proceedings, volume 574 of Lecture Notes in Computer Science, </booktitle> <pages> pages 126-146. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1992. </year>
Reference-contexts: An older, but still good, survey on parallel programming language issues is [AS83]. A more recent surveys that focuses on the Linda model appears in [CG89]. (See [BZ91] <ref> [BZ92] </ref> [GC92] for more recent work on Linda.) A recent survey that focuses on object-oriented aspects is [WKH92]. A survey that focuses on distributed programs is [And91b]. Andrew's textbook on concurrent programming languages also contains material on program verification as well as some survey material [And91a].
Reference: [Car87] <author> Luca Cardelli. </author> <title> Basic Polymorphic Typechecking. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(2), </volume> <month> April </month> <year> 1987. </year>
Reference: [Car88a] <author> Luca Cardelli. </author> <title> A Semantics of Multiple Inheritance. </title> <journal> Information and Computation, </journal> 76(2/3):138-164, February/March 1988. A revised version of the paper that appeared in the 1984 Semantics of Data Types Symposium, LNCS <volume> 173, </volume> pages <pages> 51-66. </pages>
Reference-contexts: For example, Trellis/Owl [SCB + 86] features strong type checking and a declared (i.e., by-name) subtype relation. By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] <ref> [Car88a] </ref> [CM89] [AC90] [CMMS91] [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), <p> A more widely used language is C++ [ES90]. Good introductions to C++ include [Str91] and [Lip91]. Multiple inheritance, a feature not found in Smalltalk-80, seems to be quite useful. Cardelli gives a semantics for inheritance in his paper "A Semantics of Multiple Inheritance" <ref> [Car88a] </ref>. Snyder's analysis of the issues involved is insightful [Sny86], although his viewpoint is different from that of most advocates of multiple inheritance. My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and [Lea91b].
Reference: [Car88b] <author> Luca Cardelli. </author> <title> Structural Subtyping and the Notion of Power Type. </title> <booktitle> In Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Diego, Calif., </address> <pages> pages 70-79. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1988. </year>
Reference-contexts: Much recent work involves object-oriented languages. For example, Trellis/Owl [SCB + 86] features strong type checking and a declared (i.e., by-name) subtype relation. By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following <ref> [Car88b] </ref> [Car88a] [CM89] [AC90] [CMMS91] [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in
Reference: [Car91] <author> Luca Cardelli. </author> <title> Typeful Programming. </title> <editor> In E. J. Neuhold and M. Paul, editors, </editor> <booktitle> Formal Description of Programming Concepts, IFIP State-of-the-Art Reports, </booktitle> <pages> pages 431-507. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference-contexts: Much recent work involves object-oriented languages. For example, Trellis/Owl [SCB + 86] features strong type checking and a declared (i.e., by-name) subtype relation. By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] <ref> [Car91] </ref>.
Reference: [Car93] <author> Luca Cardelli. </author> <title> An Implementation of F &lt;: </title> . <type> Technical Report 97, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <address> 130 Lytton Avenue, Palo Alto, California 94301, </address> <month> February </month> <year> 1993. </year> <title> Order from src-report@src.dec.com. </title>
Reference-contexts: For example, Trellis/Owl [SCB + 86] features strong type checking and a declared (i.e., by-name) subtype relation. By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] [CM89] [AC90] [CMMS91] <ref> [Car93] </ref> [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a]
Reference: [Cas93] <author> G. Castagna. </author> <title> F & : integrating parametric and "ad hoc" second order polymorphism. </title> <booktitle> In Proc. of the 4th International Workshop on Database Programming Languages, Workshops in Computing, </booktitle> <address> New York City, </address> <month> September </month> <year> 1993. </year> <note> Springer-Verlag. To appear. </note>
Reference-contexts: [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] <ref> [Cas93] </ref>. 4 Alternative Programming Models 4.1 Functional Programming A recent survey of functional programming is [Hud89], which also discusses the language Haskell [HF92] [HJW + 92] [Sno92] [Dav92]. Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90].
Reference: [CC91] <author> Roger S. Chin and Samuel T. Chanson. </author> <title> Distributed Object-Based Programming Systems. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(1) </volume> <pages> 91-124, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: The language Jade is described in [RL92] [RSL93]. Distrbuted programming is a subarea of parallel programming with its own set of problems. A survey appears in [BST89], which can be consulted for other references. A recent survey, with a focus on object-orientation is <ref> [CC91] </ref>. Other sources of references are is the collection of reprints [AS91], and the recent book [GR93]. Of particular interest are the languages Argus [LS83] [Wei90] and SR [AOC + 88] [AO93]. The Amoeba distributed operating system also has interesting implications for language designers [TvRvS + 90] [TKB92].
Reference: [CCH + 89] <author> Peter Canning, William Cook, Walter Hill, John Mitchell, and Walter Olthoff. </author> <title> F-Bounded Polymorphism for Object-Oriented Programming. </title> <booktitle> In Fourth International Conference on Functional Programming and Computer Architecture. ACM, </booktitle> <month> September </month> <year> 1989. </year> <note> Also technical report STL-89-5, </note> <institution> from Software Technology Laboratory, Hewlett-Packard Laboratories. </institution>
Reference-contexts: For example, Trellis/Owl [SCB + 86] features strong type checking and a declared (i.e., by-name) subtype relation. By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] [CM89] [AC90] [CMMS91] [Car93] <ref> [CCH + 89] </ref> [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92]
Reference: [CDJ + 89] <author> Luca Cardelli, Jim Donahue, Mick Jordan, Bill Kalsow, and Greg Nelson. </author> <title> The Modula-3 Type System. </title> <booktitle> In Conference Record of the Sixteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> Austin, Texas, </address> <pages> pages 202-212. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1989. </year>
Reference-contexts: Pascal is, in part, a response to the complexity of Algol 68. All this attention has provoked Wirth to reassessing Pascal [Wir75] and to the design of Modula-2 [Wir85], and Oberon [Wir88]. Oberon has object-oriented features, as does the (non-Wirth) language Modula-3 <ref> [CDJ + 89] </ref> [Nel91]. 5.6 Euclid Euclid is an attempt to improve on Pascal in a different direction [PHL + 77] [LGH + 78].
Reference: [CE91] <editor> William Clinger and Jonathan Rees (Editors). </editor> <title> Revised 4 Report on the Algorithmic Language Scheme. Obtained from the Scheme repository nexus.yorku.ca under directory pub/scheme., </title> <month> November </month> <year> 1991. </year>
Reference-contexts: The successor to MacLisp is Common Lisp [Ste84] [Ste90]. Unlike most earlier dialects of Lisp, Common Lisp has static scoping. Scheme was the first dialect of Lisp to emphasize static scoping [SS78b] [RCA + 86] [ASS85]. See also the references in the Revised 4 report <ref> [CE91] </ref>. ZetaLisp (as found on Symbolics Lisp Machines) includes the influential Flavors mechanism for object-oriented programming [WM80] [SMW84] [Sym84]. The Flavors mechanism evolved into the Common Lisp Object System [Kee89] [Ste90] [Pae93].
Reference: [CG89] <author> Nicholas Carriero and David Gelernter. </author> <title> How to Write Parallel Programs: A Guide for the Perplexed. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 323-357, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: An older, but still good, survey on parallel programming language issues is [AS83]. A more recent surveys that focuses on the Linda model appears in <ref> [CG89] </ref>. (See [BZ91] [BZ92] [GC92] for more recent work on Linda.) A recent survey that focuses on object-oriented aspects is [WKH92]. A survey that focuses on distributed programs is [And91b]. Andrew's textbook on concurrent programming languages also contains material on program verification as well as some survey material [And91a].
Reference: [CGL92] <author> Giuseppe Castagna, Giorgio Ghelli, and Giuseppe Longo. </author> <title> A Calculus for Overloaded Functions with Subtyping. </title> <booktitle> In ACM Conference on LISP and Functional Programming, </booktitle> <pages> pages 182-192. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1992. </year> <note> To appear in Information and Computation. </note>
Reference-contexts: [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] <ref> [CGL92] </ref> [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A recent survey of functional programming is [Hud89], which also discusses the language Haskell [HF92] [HJW + 92] [Sno92] [Dav92]. Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90].
Reference: [CGL93] <author> G. Castagna, G. Ghelli, and G. Longo. </author> <title> A semantics for &-early: a calculus with overloading and early binding. </title> <editor> In M. Bezem and J.F. Groote, editors, </editor> <booktitle> International Conference on Typed Lambda Calculi and Applications, number 664 in Lecture Notes in Computer Science, </booktitle> <pages> pages 107-123, </pages> <address> Utrecht, The Netherlands, March 1993. </address> <publisher> Springer-Verlag. TLCA'93. </publisher>
Reference-contexts: 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] <ref> [CGL93] </ref> [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A recent survey of functional programming is [Hud89], which also discusses the language Haskell [HF92] [HJW + 92] [Sno92] [Dav92]. Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90].
Reference: [CH88] <author> Thierry Coquand and Gerard Huet. </author> <title> The Calculus of Constructions. </title> <journal> Information and Compu tation, </journal> 76(2/3):95-120, February/March 1988. <volume> 12 </volume>
Reference: [Cha92] <author> Craig Chambers. </author> <title> Object-Oriented Multi-Methods in Cecil. </title> <editor> In Ole Lehrmann Madsen, editor, </editor> <booktitle> ECOOP '92, European Conference on Object-Oriented Programming, Utrecht, The Nether-lands, volume 615 of Lecture Notes in Computer Science, </booktitle> <pages> pages 33-56. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1992. </year>
Reference-contexts: + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] <ref> [Cha92] </ref> [CGL93] [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A recent survey of functional programming is [Hud89], which also discusses the language Haskell [HF92] [HJW + 92] [Sno92] [Dav92]. Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90].
Reference: [CHC90] <author> William R. Cook, Walter L. Hill, and Peter S. Canning. </author> <title> Inheritance is Not Subtyping. </title> <booktitle> In Conference Record of the Seventeenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Francisco, California, </address> <pages> pages 125-135, </pages> <month> January </month> <year> 1990. </year> <note> Also STL-89-17, </note> <institution> Software Technology Laboratory, Hewlett-Packard Laboratories, Palo Alto, Calif., </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] [CM89] [AC90] [CMMS91] [Car93] [CCH + 89] <ref> [CHC90] </ref> [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. <p> The concept of delegation is explored in [Lie86], in Actra [LTP86] [LaL89], and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time. Some relevant semantic models are discussed in [Mit90a] and <ref> [CHC90] </ref>. A somewhat dated survey of the literature on object-oriented programming is [Lea91a]. 5 Language Case Studies The following entries are intended to be selective rather than comprehensive. Instead they are biased towards the most interesting languages and references for the programming language designer.
Reference: [Chu41] <author> A. Church. </author> <title> The Calculi of Lambda Conversion, </title> <booktitle> volume 6 of Annals of Mathematics Studies. </booktitle> <publisher> Princeton University Press, </publisher> <address> Princeton, N.J., </address> <year> 1941. </year> <title> Reprinted by Klaus Reprint Corp., </title> <address> New York in 1965. </address>
Reference: [CL90] <author> Luca Cardelli and Xavier Leroy. </author> <title> Abstract Types and the Dot Notation. </title> <type> Technical Report 56, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <address> 130 Lytton Avenue, Palo Alto, CA 94301, </address> <month> March </month> <year> 1990. </year> <title> Order from src-report@src.dec.com. </title>
Reference-contexts: introduction is <ref> [CL90] </ref>. Another excellent paper is [Coo91], which distinguishes between programming with abstract data types and object-oriented programming. CLU is a language designed around data abstraction [LSAS77] [LAB + 81] [LG86]. It also has an interesting control abstraction and exception handling mechanisms [LS79].
Reference: [CM81] <author> W. F. Clocksin and C. S. Mellish. </author> <title> Programming in Prolog. </title> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1981. </year>
Reference-contexts: A classic textbook on Prolog is the book by Clocksin and Mellish <ref> [CM81] </ref>; another good text is Sterling and Shapiro's [SS86]. A short description and evaluation of Prolog is found in the paper "The Prolog Phenomenon" [McD80]. A recent survey is [Apt90]. Several "AI languages" preceded the development of Prolog; for example, Planner [SWC71] and Conniver [MS74].
Reference: [CM89] <author> Luca Cardelli and John C. Mitchell. </author> <title> Operations on Records (Summary). </title> <editor> In M. Main, A. Melton, M. Mislove, and D. Schmidt, editors, </editor> <booktitle> Mathematical Foundations of Programming Semantics, 5th International Conference, Tulane University, volume 442 of Lecture Notes in Computer Science, </booktitle> <pages> pages 22-52. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <month> March </month> <year> 1989. </year>
Reference-contexts: For example, Trellis/Owl [SCB + 86] features strong type checking and a declared (i.e., by-name) subtype relation. By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] <ref> [CM89] </ref> [AC90] [CMMS91] [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see
Reference: [CMMS91] <author> Luca Cardelli, Simone Martini, John C. Mitchell, and Andre Scedrov. </author> <title> An Extension of System F with Subtyping. </title> <type> Technical Report 80, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <address> 130 Lytton Avenue, Palo Alto, CA 94301, </address> <month> December </month> <year> 1991. </year> <note> Extended abstract in Theoretical Aspects of Computer Software, </note> <author> T. Ito and A. R. Meyer (editors), </author> <note> LNCS Vol 526. To appear in Information and Control. </note>
Reference-contexts: For example, Trellis/Owl [SCB + 86] features strong type checking and a declared (i.e., by-name) subtype relation. By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] [CM89] [AC90] <ref> [CMMS91] </ref> [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b]
Reference: [Coh90] <author> Edward Cohen. </author> <title> Programming in the 1990s: An Introduction to the Calculation of Programs. </title> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference: [Con89] <author> Robert L. Constable. </author> <title> Assigning Meaing to Proofs: a semantic basis for problem solving environments. </title> <editor> In Manfred Broy, editor, </editor> <booktitle> Constructive Methods in Computing Science, volume F55 of NATO ASI Series, </booktitle> <pages> pages 63-91. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1989. </year>
Reference: [Coo89] <author> W. R. Cook. </author> <title> A Proposal for Making Eiffel Type-safe. </title> <journal> The Computer Journal, </journal> <volume> 32(4) </volume> <pages> 305-311, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] [CM89] [AC90] [CMMS91] [Car93] [CCH + 89] [CHC90] <ref> [Coo89] </ref> [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4
Reference: [Coo91] <author> William R. Cook. </author> <title> Object-Oriented Programming Versus Abstract Data Types. </title> <editor> In J. W. de Bakker, W. P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Foundations of Object-Oriented Languages, REX School/Workshop, Noordwijkerhout, The Netherlands, May/June 1990, volume 489 of Lecture Notes in Computer Science, </booktitle> <pages> pages 151-178. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference-contexts: introduction is [CL90]. Another excellent paper is <ref> [Coo91] </ref>, which distinguishes between programming with abstract data types and object-oriented programming. CLU is a language designed around data abstraction [LSAS77] [LAB + 81] [LG86]. It also has an interesting control abstraction and exception handling mechanisms [LS79].
Reference: [Coo92] <author> W. R. Cook. </author> <title> Interfaces and Specifications for the Smalltalk-80 Collection Classes. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(10) </volume> <pages> 1-15, </pages> <month> October </month> <year> 1992. </year> <booktitle> OOPSLA '92 Proceedings, Andreas Paepcke (editor). </booktitle>
Reference-contexts: My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and [Lea91b]. For a contrast, see also [BW90b] [Ame87] [AvdL90] [Mey88] [MOM90] <ref> [Coo92] </ref> [UR92] [LW93a] [LW93b]. The concept of delegation is explored in [Lie86], in Actra [LTP86] [LaL89], and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time. Some relevant semantic models are discussed in [Mit90a] and [CHC90].
Reference: [Cou90] <author> Patrick Cousot. </author> <title> Methods and Logics for Proving Programs. </title> <editor> In J. van Leewen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Models and Semantics, chapter 15, </booktitle> <pages> pages 841-993. </pages> <publisher> The MIT Press, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference: [Cox86] <author> Brad J. Cox. </author> <title> Object Oriented Programming: an Evolutionary Approach. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mass., </address> <year> 1986. </year> <month> 13 </month>
Reference-contexts: Languages based on term rewriting without logic variables also allow for parallelism. A standard example is OBJ [FGJM85], which also has an interesting module system [Gog84]. 4.4 Object-Oriented Programming A good, but not very technical, introduction to object-oriented concepts is given by Cox <ref> [Cox86] </ref>; his book also discusses the language Objective-C. A more technical introduction is Budd's book [Bud91]. Meyer's book on Eiffel also has more technical meat [Mey88], as well as a focus on software engineering concerns. Another fairly complete treatment is given in Goldberg and Robson's book on Smalltalk-80 [GR83].
Reference: [CW85] <author> Luca Cardelli and Peter Wegner. </author> <title> On Understanding Types, Data Abstraction and Polymor--phism. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(4) </volume> <pages> 471-522, </pages> <month> December </month> <year> 1985. </year>
Reference: [CW90] <author> G. V. Cormack and A. K. Wright. </author> <title> Type-dependent Parameter Inference. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 25(6) </volume> <pages> 127-136, </pages> <month> June </month> <year> 1990. </year> <booktitle> Proceedings of the ACM SIGPLAN '90 Conference on Programming Language Design and Implementation, </booktitle> <address> White Plains, NY. </address>
Reference: [CZ84] <author> Robert L. Constable and Daniel R. Zlatin. </author> <title> The Type Theory of PL/CV3. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 6(1) </volume> <pages> 94-117, </pages> <month> January </month> <year> 1984. </year>
Reference: [Dav92] <author> Anthony J. T. Davie. </author> <title> An Introduction to Functional Programming Systems Using Haskell. </title> <publisher> Cambridge Computer Science Texts. Cambridge University Press, </publisher> <address> New York, N.Y., </address> <year> 1992. </year>
Reference-contexts: will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A recent survey of functional programming is [Hud89], which also discusses the language Haskell [HF92] [HJW + 92] [Sno92] <ref> [Dav92] </ref>. Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90]. There are several good books on functional programming, including [Hen87] [BW88] [Hen80] [SF89]. For an introduction that also treats implementation issues, see [Pey87].
Reference: [dB80] <author> N. G. de Bruijn. </author> <title> A Survey of the Project AUTOMATH. </title> <editor> In J. P. Seldin and J. R. Hindley, editors, To H. B. </editor> <booktitle> Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism, </booktitle> <pages> pages 579-606. </pages> <publisher> Academic Press, Inc., </publisher> <address> New York, N.Y., </address> <year> 1980. </year>
Reference: [dCF92] <author> Dennis de Champeaux and Penelope Faure. </author> <title> A Comparative Study of object-oriented analysis methods. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 5(1) </volume> <pages> 21-33, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Meyer's book on Eiffel also has more technical meat [Mey88], as well as a focus on software engineering concerns. Another fairly complete treatment is given in Goldberg and Robson's book on Smalltalk-80 [GR83]. A graduate-level introduction is [BGHS91]. Descriptions of object-oriented design methods are found in [Boo91] [WBWW90] [dCLF92] <ref> [dCF92] </ref> [dCLF93]. Both [Boo91] and [dCLF93] have many recent references. A treatment of object-oriented design that focuses more on C++ is found in [Mul89]. See also the survey by [WBJ90]. A collection of papers is found in [Pet87]. More recent collections of edited research papers are [SW87] [KL89].
Reference: [dCLF92] <author> Dennis de Champeaux, Doug Lea, and Penelope Faure. </author> <title> The Process of Object-Oriented Design. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(10) </volume> <pages> 45-62, </pages> <month> October </month> <year> 1992. </year> <booktitle> OOPSLA '92 Proceedings, Andreas Papecke (editor). </booktitle>
Reference-contexts: Meyer's book on Eiffel also has more technical meat [Mey88], as well as a focus on software engineering concerns. Another fairly complete treatment is given in Goldberg and Robson's book on Smalltalk-80 [GR83]. A graduate-level introduction is [BGHS91]. Descriptions of object-oriented design methods are found in [Boo91] [WBWW90] <ref> [dCLF92] </ref> [dCF92] [dCLF93]. Both [Boo91] and [dCLF93] have many recent references. A treatment of object-oriented design that focuses more on C++ is found in [Mul89]. See also the survey by [WBJ90]. A collection of papers is found in [Pet87]. More recent collections of edited research papers are [SW87] [KL89].
Reference: [dCLF93] <author> Dennis de Champeaux, Doug Lea, and Penelope Faure. </author> <title> Object Oriented System Development. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Mass,, </address> <year> 1993. </year>
Reference-contexts: Another fairly complete treatment is given in Goldberg and Robson's book on Smalltalk-80 [GR83]. A graduate-level introduction is [BGHS91]. Descriptions of object-oriented design methods are found in [Boo91] [WBWW90] [dCLF92] [dCF92] <ref> [dCLF93] </ref>. Both [Boo91] and [dCLF93] have many recent references. A treatment of object-oriented design that focuses more on C++ is found in [Mul89]. See also the survey by [WBJ90]. A collection of papers is found in [Pet87]. More recent collections of edited research papers are [SW87] [KL89]. <p> Another fairly complete treatment is given in Goldberg and Robson's book on Smalltalk-80 [GR83]. A graduate-level introduction is [BGHS91]. Descriptions of object-oriented design methods are found in [Boo91] [WBWW90] [dCLF92] [dCF92] <ref> [dCLF93] </ref>. Both [Boo91] and [dCLF93] have many recent references. A treatment of object-oriented design that focuses more on C++ is found in [Mul89]. See also the survey by [WBJ90]. A collection of papers is found in [Pet87]. More recent collections of edited research papers are [SW87] [KL89].
Reference: [DD85] <author> James Donahue and Alan Demers. </author> <title> Data Types are Values. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(3) </volume> <pages> 426-445, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: The language Russell was developed at Cornell to investigate how types can be treated as values. There are many papers that have appeared about Russell, but perhaps the best introduction to the language is the paper "Data Types are Values" <ref> [DD85] </ref>, which can be consulted for other references. Much recent work involves object-oriented languages. For example, Trellis/Owl [SCB + 86] features strong type checking and a declared (i.e., by-name) subtype relation. By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91].
Reference: [Dij76] <author> Edsger W. Dijkstra. </author> <title> A Discipline of Programming. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1976. </year>
Reference: [DS90] <author> Edsger W. Dijkstra and Carel S. Scholten. </author> <title> Predicate Calculus and program semantics. </title> <publisher> Springer-Verlag, </publisher> <address> NY, </address> <year> 1990. </year>
Reference: [DT88] <author> Scott Danforth and Chris Tomlinson. </author> <title> Type Theories and Object-Oriented Programming. </title> <journal> ACM Computing Surveys, </journal> <volume> 20(1) </volume> <pages> 29-72, </pages> <month> March </month> <year> 1988. </year>
Reference: [Dyb90] <author> Peter Dybjer. </author> <title> Comparing Integrated and External Logics of Functional Programs. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 14(1) </volume> <pages> 59-79, </pages> <month> June </month> <year> 1990. </year>
Reference: [ES90] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mass., </address> <year> 1990. </year>
Reference-contexts: ECOOP and OOPSLA had a joint conference in 1990. The Journal of Object-Oriented Programming (JOOP) is perhaps the best journal exclusively devoted to object-oriented programming. The best documented and the cleanest object-oriented programming language is Smalltalk-80 [Ing81] [GR83]. A more widely used language is C++ <ref> [ES90] </ref>. Good introductions to C++ include [Str91] and [Lip91]. Multiple inheritance, a feature not found in Smalltalk-80, seems to be quite useful. Cardelli gives a semantics for inheritance in his paper "A Semantics of Multiple Inheritance" [Car88a].
Reference: [Fel90] <author> Matthias Felleisen. </author> <title> On the Expressive Power of Programming Langauges. </title> <editor> In N. Jones, editor, </editor> <booktitle> ESOP '90 3rd European Symposium on Programming, Copenhagen, Denmark, volume 432 of Lecture Notes in Computer Science, </booktitle> <pages> pages 134-151. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <month> May </month> <year> 1990. </year>
Reference: [FGJM85] <author> Kokichi Futatsugi, Joseph A. Goguen, Jean-Pierre Jouannaud, and Jose Meseguer. </author> <booktitle> Principles of OBJ2. In Conference Record of the Twelfth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 52-66. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1985. </year>
Reference-contexts: An early attempt was embodied in Steele and Sussman's work, as described in [SS80]. A more recent account is Leler's book [Lel88]. Languages based on term rewriting without logic variables also allow for parallelism. A standard example is OBJ <ref> [FGJM85] </ref>, which also has an interesting module system [Gog84]. 4.4 Object-Oriented Programming A good, but not very technical, introduction to object-oriented concepts is given by Cox [Cox86]; his book also discusses the language Objective-C. A more technical introduction is Budd's book [Bud91].
Reference: [Flo75] <author> Lawrence Flon. </author> <title> On Research in Structured Programming. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 10(10) </volume> <pages> 16-17, </pages> <month> October </month> <year> 1975. </year>
Reference: [Flo79] <author> Robert W. Floyd. </author> <title> The Paradigms of Programming. </title> <journal> Communications of the ACM, </journal> <volume> 22(8) </volume> <pages> 455-460, </pages> <month> August </month> <year> 1979. </year> <month> 14 </month>
Reference: [FWH92] <author> Daniel P. Friedman, Mitchell Wand, and Christopher T. Haynes. </author> <title> Essentials of Programming Languages. </title> <publisher> McGraw-Hill Book Co., </publisher> <address> New York, N.Y., </address> <year> 1992. </year>
Reference: [Gab93] <author> Richard P. Gabriel. </author> <title> The end of history and the last programming language. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 6(4) </volume> <pages> 90-94, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Consumers of programming languages (programmers and language standardization committees) seem to be fairly conservative, and interested more in performance than elegance or expressive power. See <ref> [Gab93] </ref> for a pessimistic view of what this means for language design. 8
Reference: [GC92] <author> David Gelernter and Nicholas Carriero. </author> <title> Coordination Languages and their Significance. </title> <journal> Communications of the ACM, </journal> <volume> 35(2) </volume> <pages> 97-107, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: An older, but still good, survey on parallel programming language issues is [AS83]. A more recent surveys that focuses on the Linda model appears in [CG89]. (See [BZ91] [BZ92] <ref> [GC92] </ref> for more recent work on Linda.) A recent survey that focuses on object-oriented aspects is [WKH92]. A survey that focuses on distributed programs is [And91b]. Andrew's textbook on concurrent programming languages also contains material on program verification as well as some survey material [And91a].
Reference: [GG83] <author> Ralph E. Griswold and Madge T. Griswold. </author> <title> The Icon Programming Language. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1983. </year>
Reference-contexts: The language SL5, one attempt in this direction, is notable for its flexible procedure mechanism [HG78]. Another descendent of SNOBOL4, Icon, is a more conventional programming language with innovative control structures <ref> [GG83] </ref>. 5.10 APL Another unconventional language is APL [Ive62] [Ive91]. APL has array processing features without equal and generic operators that can be combined in interesting ways [Ive79].
Reference: [Ghe91a] <author> G. Ghelli. </author> <title> A Static Type System for Late Binding Overloading. </title> <editor> In A. Paepcke, editor, </editor> <booktitle> Proc. of the Sixth Intl. ACM Conference on Object-Oriented Programming Systems Languages and Applications (OOPSLA), Phoenix, Arizona, number 26 (11) in ACM SIGPLAN Notices, </booktitle> <pages> pages 129-145, </pages> <address> Reading, MA, 1991. </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] <ref> [Ghe91a] </ref> [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A recent survey of functional programming is [Hud89], which also discusses the language Haskell [HF92] [HJW + 92] [Sno92] [Dav92]. Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90].
Reference: [Ghe91b] <author> Giorgio Ghelli. </author> <title> Modelling Features of Object-Oriented Languages in Second Order Functional Languages with Subtypes. </title> <editor> In J. W. de Bakker, W. P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Foundations of Object-Oriented Languages, REX School/Workshop, Noordwijkerhout, The Netherlands, May/June 1990, volume 489 of Lecture Notes in Computer Science, </booktitle> <pages> pages 311-340. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference-contexts: [CMMS91] [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] <ref> [Ghe91b] </ref> [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A recent survey of functional programming is [Hud89], which also discusses the language Haskell [HF92] [HJW + 92] [Sno92] [Dav92]. Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90].
Reference: [Gir71] <author> Jean-Yves Girard. </author> <title> Une extension de l'interpretation de Godel a l'analyse, et son application a l'elimination des coupures dans l'analyse et la theorie des types. </title> <booktitle> In Proceedings 2nd Scandina-vian Logic Symposium, </booktitle> <pages> pages 63-92, </pages> <address> Amsterdam, 1971. </address> <publisher> North-Holland. </publisher>
Reference: [Gir86] <author> J. Y. Girard. </author> <title> The System F of variable types, fifteen years later. </title> <journal> Theoretical Computer Science, </journal> <volume> 45 </volume> <pages> 159-192, </pages> <year> 1986. </year>
Reference: [Gir93] <author> Jean-Yves Girard. </author> <title> Linear Logic: A Survey. </title> <editor> In F. L. Bauer, W. Brauer, and H. Schwichtenberg, editors, </editor> <booktitle> Logic and Algebra of Specification, volume 94 of NATO ASI Series. Series F : Computer and System Sciences, </booktitle> <pages> pages 63-112. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1993. </year>
Reference: [GJ87] <author> Carlo Ghezzi and Mehdi Jazayeri. </author> <title> Programming Language Concepts 2/E. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, N.Y., </address> <year> 1987. </year>
Reference: [GL86] <author> David K. Gifford and John M. Lucassen. </author> <title> Integrating Functional and Imperative Programming. </title> <booktitle> In ACM Conference on LISP and Functional Programming, </booktitle> <pages> pages 28-38. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1986. </year>
Reference: [GLT89] <author> Jean-Yves Girard, Yves Lafont, and Paul Taylor. </author> <title> Proofs and Types. </title> <publisher> Cambridge University Press, </publisher> <address> New York, N.Y., </address> <year> 1989. </year>
Reference: [GMW79] <author> Michael J. Gordon, Robin Milner, and Christopher P. Wadsworth. </author> <title> Edinburgh LCF, </title> <booktitle> volume 78 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1979. </year> <note> The second author is listed on the cover as Arthur J. Milner, which is clearly a mistake. </note>
Reference: [Gog84] <author> Joseph A. Goguen. </author> <title> Parameterized Programming. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(5):528-543, </volume> <month> September </month> <year> 1984. </year>
Reference-contexts: An early attempt was embodied in Steele and Sussman's work, as described in [SS80]. A more recent account is Leler's book [Lel88]. Languages based on term rewriting without logic variables also allow for parallelism. A standard example is OBJ [FGJM85], which also has an interesting module system <ref> [Gog84] </ref>. 4.4 Object-Oriented Programming A good, but not very technical, introduction to object-oriented concepts is given by Cox [Cox86]; his book also discusses the language Objective-C. A more technical introduction is Budd's book [Bud91].
Reference: [Gol84] <author> R. Goldblatt. </author> <title> Topoi: The Categorial Analysis of Logic (Revised Edition), </title> <booktitle> volume 98 of Studies in Logic and the Foundations of Mathematics. </booktitle> <publisher> North-Holland, </publisher> <address> New York, N.Y., </address> <year> 1984. </year>
Reference: [Gor79] <author> Michael J. C. Gordon. </author> <title> The Denotational Description of Programming Languages. </title> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1979. </year>
Reference: [Gor88] <author> Michael J. C. Gordon. </author> <title> Programming Language Theory and its Implementation. </title> <publisher> Prentice Hall International Series in Computer Science. Prentice-Hall, Inc., </publisher> <address> New York, N.Y., </address> <year> 1988. </year> <month> 15 </month>
Reference: [GPP71] <author> R. E. Griswold, J. F. Poage, and I. P. Polonsky. </author> <title> The SNOBOL4 Programming Language (second edition). </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1971. </year>
Reference-contexts: The meta-object system of Common Lisp is described in [KdRB91]; it provides a very flexible way to extend the language. 5.9 Snobol, SL5, and Icon SNOBOL4 is a language for string processing that is unlike any other <ref> [GPP71] </ref>. Because it is so unstructured, its designers have tried to place its powerful features in a more structured framework. The language SL5, one attempt in this direction, is notable for its flexible procedure mechanism [HG78].
Reference: [GR83] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80, The Language and its Implementation. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mass., </address> <year> 1983. </year>
Reference-contexts: A more technical introduction is Budd's book [Bud91]. Meyer's book on Eiffel also has more technical meat [Mey88], as well as a focus on software engineering concerns. Another fairly complete treatment is given in Goldberg and Robson's book on Smalltalk-80 <ref> [GR83] </ref>. A graduate-level introduction is [BGHS91]. Descriptions of object-oriented design methods are found in [Boo91] [WBWW90] [dCLF92] [dCF92] [dCLF93]. Both [Boo91] and [dCLF93] have many recent references. A treatment of object-oriented design that focuses more on C++ is found in [Mul89]. See also the survey by [WBJ90]. <p> ECOOP and OOPSLA had a joint conference in 1990. The Journal of Object-Oriented Programming (JOOP) is perhaps the best journal exclusively devoted to object-oriented programming. The best documented and the cleanest object-oriented programming language is Smalltalk-80 [Ing81] <ref> [GR83] </ref>. A more widely used language is C++ [ES90]. Good introductions to C++ include [Str91] and [Lip91]. Multiple inheritance, a feature not found in Smalltalk-80, seems to be quite useful. Cardelli gives a semantics for inheritance in his paper "A Semantics of Multiple Inheritance" [Car88a].
Reference: [GR93] <author> Jim Gray and Andreas Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufman, </publisher> <year> 1993. </year>
Reference-contexts: A survey appears in [BST89], which can be consulted for other references. A recent survey, with a focus on object-orientation is [CC91]. Other sources of references are is the collection of reprints [AS91], and the recent book <ref> [GR93] </ref>. Of particular interest are the languages Argus [LS83] [Wei90] and SR [AOC + 88] [AO93]. The Amoeba distributed operating system also has interesting implications for language designers [TvRvS + 90] [TKB92]. An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92].
Reference: [Gri81] <editor> David Gries. </editor> <booktitle> The Science of Programming. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1981. </year>
Reference: [Gri93] <author> Andrew S. Grimshaw. </author> <title> Easy-to-Use Object-Oriented Parallel Processing with Mentat. </title> <journal> IEEE Computer, </journal> <volume> 26(5) </volume> <pages> 39-51, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Data flow languages are surveyed in [Ack82]. A recent introduction to concurrent programming techniques is [Sno92]. Actor languages are discussed in [Agh91]. A concurrent version of ML is described in [Rep93]. Some aspects of data parallel programming languages are described in [HS86] <ref> [Gri93] </ref>. The language Jade is described in [RL92] [RSL93]. Distrbuted programming is a subarea of parallel programming with its own set of problems. A survey appears in [BST89], which can be consulted for other references. A recent survey, with a focus on object-orientation is [CC91].
Reference: [GS93] <author> David Gries and Fred B. Schneider. </author> <title> A Logical Approach to Discrete Math. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1993. </year>
Reference: [Gun92] <author> C. A. Gunter. </author> <title> Semantics of Programming Languages: Structures and Techniques. </title> <booktitle> Foundations of Computing. </booktitle> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1992. </year>
Reference: [Hab73] <author> A. N. Habermann. </author> <title> Critical Comments on the Programming Language Pascal. </title> <journal> Acta Informatica, </journal> <volume> 3(1) </volume> <pages> 47-57, </pages> <year> 1973. </year>
Reference-contexts: Wirth's language Pascal [Wir71] [JW74] has been enormously popular, attracting detractors <ref> [Hab73] </ref> and defenders [LD75]. Pascal is, in part, a response to the complexity of Algol 68. All this attention has provoked Wirth to reassessing Pascal [Wir75] and to the design of Modula-2 [Wir85], and Oberon [Wir88].
Reference: [Har84] <author> D. M. Harland. </author> <title> Polymorphic Programming Languages: Design and Implementation. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, N.Y., </address> <year> 1984. </year>
Reference: [Hen80] <author> Peter Henderson. </author> <title> Functional Programming: Application and Implementation. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1980. </year>
Reference-contexts: Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90]. There are several good books on functional programming, including [Hen87] [BW88] <ref> [Hen80] </ref> [SF89]. For an introduction that also treats implementation issues, see [Pey87]. The articles in [Tur90b] make an interesting introduction to some research topics. John Backus, one of the designers of Fortran, proposed a new language for functional programming without any names called FP in his Turing Award Lecture [Bac78a]. <p> A functional programming style using a more congenial notation based on Landin's ISWIM [Lan66] is developed in Henderson's book Functional Programming: Application and Implementation <ref> [Hen80] </ref>. More recent languages have emphasized lazy evaluation. A good example is Miranda [Tur90a], which also has an interesting notion of data abstraction. 4 4.2 Logic Programming Kowalski's paper "Algorithm = Logic + Control" is a good introduction to logic programming in an idealized setting [Kow79].
Reference: [Hen87] <author> Martin C. Henson. </author> <title> Elements of Functional Languages. </title> <publisher> Blackwell Scientific Publications, Oxford, </publisher> <address> England, </address> <year> 1987. </year>
Reference-contexts: Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90]. There are several good books on functional programming, including <ref> [Hen87] </ref> [BW88] [Hen80] [SF89]. For an introduction that also treats implementation issues, see [Pey87]. The articles in [Tur90b] make an interesting introduction to some research topics.
Reference: [Hen88] <author> Matthew Hennessy. </author> <title> Algebraic Theory of Processes. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1988. </year>
Reference-contexts: An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92]. A classic reference for the operational semantics of concurrent processes is Milner's book on CCS [Mil89b]. Another widely used approach is Hoare's CSP [Hoa78] [BHR84] [LS84] [Hoa85]. See <ref> [Hen88] </ref> [BM90] [Mil90b] [MPW92] for more recent work in the semantics of concurrency, and [LL90] and [Bro91] for recent work in the semantics of distributed systems. 7 The Future A (by now a bit dated) summary of research directions for language design is given in [LLM89].
Reference: [Hen90] <author> Matthew Hennessy. </author> <title> The Semantics of Programming Languages: an Elementary Introduction using Structural Operational Semantics. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference: [Hes92] <author> Wim H. Hesselink. </author> <title> Programs, Recursion, and Unbounded Choice, </title> <booktitle> volume 27 of Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <address> New York, N.Y., </address> <year> 1992. </year>
Reference: [HF92] <author> Paul Hudak and Joseph H. Fasel. </author> <title> A Gentle Introduction to Haskell. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(5), </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A recent survey of functional programming is [Hud89], which also discusses the language Haskell <ref> [HF92] </ref> [HJW + 92] [Sno92] [Dav92]. Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90]. There are several good books on functional programming, including [Hen87] [BW88] [Hen80] [SF89]. For an introduction that also treats implementation issues, see [Pey87].
Reference: [HG78] <author> David R. Hanson and Ralph E. Griswold. </author> <title> The SL5 Procedure Mechanism. </title> <journal> Communications of the ACM, </journal> <volume> 21(5) </volume> <pages> 392-400, </pages> <month> May </month> <year> 1978. </year>
Reference-contexts: Because it is so unstructured, its designers have tried to place its powerful features in a more structured framework. The language SL5, one attempt in this direction, is notable for its flexible procedure mechanism <ref> [HG78] </ref>. Another descendent of SNOBOL4, Icon, is a more conventional programming language with innovative control structures [GG83]. 5.10 APL Another unconventional language is APL [Ive62] [Ive91]. APL has array processing features without equal and generic operators that can be combined in interesting ways [Ive79].
Reference: [Hig78] <institution> High Order Language Working Group, Department of Defense. Department of Defense Requirements for High Order Computer Programming Languages: </institution> <type> Steelman. Technical report, </type> <institution> U. S. Department of Defense, </institution> <month> June </month> <year> 1978. </year>
Reference-contexts: Specifically, it attempts to support program verification. 5.7 Ada Ada was designed by first setting out requirements for the language <ref> [Hig78] </ref> and then designing and revising a language to meet those requirements [IBH + 79] [Ada83] [IBFW91]. 5.8 Lisp-like Languages The original LISP is described in the LISP 1.5 Programmer's Manual [MAE + 65]. The language has since evolved in many directions.
Reference: [HJW + 92] <editor> Paul Hudak, Simon Peyton Jones, Philip Wadler, et al. </editor> <title> Report on the Programming Language Haskell: A Non-strict, Purely Functional Langauge, version 1.2. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(5), </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A recent survey of functional programming is [Hud89], which also discusses the language Haskell [HF92] <ref> [HJW + 92] </ref> [Sno92] [Dav92]. Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90]. There are several good books on functional programming, including [Hen87] [BW88] [Hen80] [SF89]. For an introduction that also treats implementation issues, see [Pey87].
Reference: [Hoa69] <author> C. A. R. Hoare. </author> <title> An Axiomatic Basis for Computer Programming. </title> <journal> Communications of the ACM, </journal> <volume> 12(10) </volume> <pages> 576-583, </pages> <month> October </month> <year> 1969. </year>
Reference: [Hoa78] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <journal> Communications of the ACM, </journal> <volume> 21(8) </volume> <pages> 666-677, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92]. A classic reference for the operational semantics of concurrent processes is Milner's book on CCS [Mil89b]. Another widely used approach is Hoare's CSP <ref> [Hoa78] </ref> [BHR84] [LS84] [Hoa85].
Reference: [Hoa80] <author> C. A. R. Hoare. </author> <title> Hints on Programming Language Design. </title> <editor> In Anthony I. Wasserman, editor, </editor> <booktitle> Tutorial Programming Language Design, </booktitle> <pages> pages 43-52. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1980. </year> <month> 16 </month>
Reference: [Hoa85] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1985. </year>
Reference-contexts: An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92]. A classic reference for the operational semantics of concurrent processes is Milner's book on CCS [Mil89b]. Another widely used approach is Hoare's CSP [Hoa78] [BHR84] [LS84] <ref> [Hoa85] </ref>. See [Hen88] [BM90] [Mil90b] [MPW92] for more recent work in the semantics of concurrency, and [LL90] and [Bro91] for recent work in the semantics of distributed systems. 7 The Future A (by now a bit dated) summary of research directions for language design is given in [LLM89].
Reference: [Hoa89] <author> C. A. R. Hoare. </author> <title> Notes on an Approach to Category Theory for Computer Scientists. </title> <editor> In Manfred Broy, editor, </editor> <booktitle> Constructive Methods in Computing Science, volume F55 of NATO ASI Series, </booktitle> <pages> pages 245-305. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1989. </year>
Reference: [Hor87] <author> Ellis Horowitz. </author> <title> Programming Languages: A Grand Tour (Third Edition). </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1987. </year>
Reference-contexts: Other resources for case studies include Kamin's book [Kam90], which has several case studies put in a common framework. The "Grand Tour" book by Horowitz has articles about specific languages as well <ref> [Hor87] </ref>. See also the languages mentioned under the various paradigms above. 5.1 FORTRAN The first widely used programming language was FORTRAN. See [Bac78b] for a discussion of the history of FORTRAN, what early versions of FORTRAN were like, and early references. The development of FORTRAN IV is discussed in [BH64].
Reference: [How80] <author> W. A. Howard. </author> <title> The Formulae-as-Types notion of Construction. </title> <editor> In J. P. Seldin and J. R. Hind-ley, editors, To H. B. </editor> <booktitle> Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism, </booktitle> <pages> pages 479-490. </pages> <publisher> Academic Press, Inc., </publisher> <address> New York, N.Y., </address> <year> 1980. </year>
Reference: [HP90] <author> Robert W. Harper and Benjamin C. Pierce. </author> <title> Extensible Records Without Subtypes. </title> <type> Technical Report CMU-CS-90-102, </type> <institution> School of Computer Science, Carnegie Mellon University, Pittsburgh, Penn., </institution> <month> February </month> <year> 1990. </year> <note> See also the 1991 POPL proceedings. </note>
Reference-contexts: By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] [CM89] [AC90] [CMMS91] [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] <ref> [HP90] </ref> [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming
Reference: [HS86] <author> W. Daniel Hillis and Guy L. Steele Jr. </author> <title> Data Parallel Algorithms. </title> <journal> Communications of the ACM, </journal> <volume> 29(12) </volume> <pages> 1170-1183, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: Data flow languages are surveyed in [Ack82]. A recent introduction to concurrent programming techniques is [Sno92]. Actor languages are discussed in [Agh91]. A concurrent version of ML is described in [Rep93]. Some aspects of data parallel programming languages are described in <ref> [HS86] </ref> [Gri93]. The language Jade is described in [RL92] [RSL93]. Distrbuted programming is a subarea of parallel programming with its own set of problems. A survey appears in [BST89], which can be consulted for other references. A recent survey, with a focus on object-orientation is [CC91].
Reference: [Hud89] <author> Paul Hudak. </author> <title> Conception, Evolution, and Application of Functional Programming Languages. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 359-411, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A recent survey of functional programming is <ref> [Hud89] </ref>, which also discusses the language Haskell [HF92] [HJW + 92] [Sno92] [Dav92]. Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90]. There are several good books on functional programming, including [Hen87] [BW88] [Hen80] [SF89].
Reference: [HW73] <author> C. A. R. Hoare and N. Wirth. </author> <title> An Axiomatic Definition of the Programming Language Pascal. </title> <journal> Acta Informatica, </journal> <volume> 2(4) </volume> <pages> 335-355, </pages> <year> 1973. </year>
Reference: [IBFW91] <author> J. Ichbiah, J. Barnes, R. Firth, and M. Woodger. </author> <title> Rationale for the Design of the Ada Programming Language. </title> <publisher> Cambridge University Press, </publisher> <address> New York, N.Y., </address> <year> 1991. </year> <note> ISBN 0-521-39267-5. </note>
Reference-contexts: Specifically, it attempts to support program verification. 5.7 Ada Ada was designed by first setting out requirements for the language [Hig78] and then designing and revising a language to meet those requirements [IBH + 79] [Ada83] <ref> [IBFW91] </ref>. 5.8 Lisp-like Languages The original LISP is described in the LISP 1.5 Programmer's Manual [MAE + 65]. The language has since evolved in many directions. MacLisp is a main-stream dialect that provided many system building tools [Pit83]. The successor to MacLisp is Common Lisp [Ste84] [Ste90].
Reference: [IBH + 79] <author> J. D. Ichbiah, J. G. P. Barnes, J. C. Heliard, B. Krieg-Brueckner, O. Roubine, and B. A. Wichmann. </author> <title> Reference Manual and Rationale for the Ada Programming Language. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 14(6), </volume> <month> June </month> <year> 1979. </year> <title> This version of the language is now obsolete, but the rationale (part B) is still valuable. </title>
Reference-contexts: Specifically, it attempts to support program verification. 5.7 Ada Ada was designed by first setting out requirements for the language [Hig78] and then designing and revising a language to meet those requirements <ref> [IBH + 79] </ref> [Ada83] [IBFW91]. 5.8 Lisp-like Languages The original LISP is described in the LISP 1.5 Programmer's Manual [MAE + 65]. The language has since evolved in many directions. MacLisp is a main-stream dialect that provided many system building tools [Pit83].
Reference: [Ing81] <author> D. H. H. Ingalls. </author> <title> Design Principles Behind Smalltalk. </title> <journal> BYTE, </journal> <volume> 6(8) </volume> <pages> 286-298, </pages> <month> August </month> <year> 1981. </year>
Reference-contexts: ECOOP and OOPSLA had a joint conference in 1990. The Journal of Object-Oriented Programming (JOOP) is perhaps the best journal exclusively devoted to object-oriented programming. The best documented and the cleanest object-oriented programming language is Smalltalk-80 <ref> [Ing81] </ref> [GR83]. A more widely used language is C++ [ES90]. Good introductions to C++ include [Str91] and [Lip91]. Multiple inheritance, a feature not found in Smalltalk-80, seems to be quite useful. Cardelli gives a semantics for inheritance in his paper "A Semantics of Multiple Inheritance" [Car88a].
Reference: [Ive62] <author> K. Iverson. </author> <title> A Programming Language. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, N.Y., </address> <year> 1962. </year>
Reference-contexts: The language SL5, one attempt in this direction, is notable for its flexible procedure mechanism [HG78]. Another descendent of SNOBOL4, Icon, is a more conventional programming language with innovative control structures [GG83]. 5.10 APL Another unconventional language is APL <ref> [Ive62] </ref> [Ive91]. APL has array processing features without equal and generic operators that can be combined in interesting ways [Ive79].
Reference: [Ive79] <author> Kenneth E. Iverson. </author> <title> Operators. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 1(2) </volume> <pages> 161-176, </pages> <month> October </month> <year> 1979. </year>
Reference-contexts: Another descendent of SNOBOL4, Icon, is a more conventional programming language with innovative control structures [GG83]. 5.10 APL Another unconventional language is APL [Ive62] [Ive91]. APL has array processing features without equal and generic operators that can be combined in interesting ways <ref> [Ive79] </ref>.
Reference: [Ive91] <author> Kenneth E. Iverson. </author> <title> A Personal view of APL. </title> <journal> IBM Systems Journal, </journal> <volume> 30(4) </volume> <pages> 582-593, </pages> <year> 1991. </year>
Reference-contexts: The language SL5, one attempt in this direction, is notable for its flexible procedure mechanism [HG78]. Another descendent of SNOBOL4, Icon, is a more conventional programming language with innovative control structures [GG83]. 5.10 APL Another unconventional language is APL [Ive62] <ref> [Ive91] </ref>. APL has array processing features without equal and generic operators that can be combined in interesting ways [Ive79].
Reference: [JW74] <author> Kathleen Jensen and Niklaus Wirth. </author> <title> PASCAL User Manual and Report (second edition). </title> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1974. </year>
Reference-contexts: The language has recently been standardized, and incorporates several changes from its variant C++ [Str91]. 6 5.5 Algol W, Pascal, Modula-2, and Oberon Wirth and Hoare's language known as Algol W can be thought of as an improved version of Algol 60 [WH66]. Wirth's language Pascal [Wir71] <ref> [JW74] </ref> has been enormously popular, attracting detractors [Hab73] and defenders [LD75]. Pascal is, in part, a response to the complexity of Algol 68. All this attention has provoked Wirth to reassessing Pascal [Wir75] and to the design of Modula-2 [Wir85], and Oberon [Wir88].
Reference: [Kam90] <author> Samuel N. Kamin. </author> <title> Programming Languages: An Interpreter-Based Approach. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mass., </address> <year> 1990. </year>
Reference-contexts: Many of the more established languages have their definitions standardized. These are often published by the American National Standards Institute (ANSI), the International Standards Organization (ISO), or the IEEE. Other resources for case studies include Kamin's book <ref> [Kam90] </ref>, which has several case studies put in a common framework. The "Grand Tour" book by Horowitz has articles about specific languages as well [Hor87]. See also the languages mentioned under the various paradigms above. 5.1 FORTRAN The first widely used programming language was FORTRAN.
Reference: [KdRB91] <author> Gregor Kiczales, Jim des Rivieres, and Daniel G. Bobrow. </author> <title> The Art of the Metaobject Protocol. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1991. </year>
Reference-contexts: ZetaLisp (as found on Symbolics Lisp Machines) includes the influential Flavors mechanism for object-oriented programming [WM80] [SMW84] [Sym84]. The Flavors mechanism evolved into the Common Lisp Object System [Kee89] [Ste90] [Pae93]. The meta-object system of Common Lisp is described in <ref> [KdRB91] </ref>; it provides a very flexible way to extend the language. 5.9 Snobol, SL5, and Icon SNOBOL4 is a language for string processing that is unlike any other [GPP71]. Because it is so unstructured, its designers have tried to place its powerful features in a more structured framework.
Reference: [Kee89] <author> Sonya E. Keene. </author> <title> Object-Oriented Programming in Common Lisp. </title> <publisher> Addison Wesley, </publisher> <address> Reading, Mass., </address> <year> 1989. </year>
Reference-contexts: See also the references in the Revised 4 report [CE91]. ZetaLisp (as found on Symbolics Lisp Machines) includes the influential Flavors mechanism for object-oriented programming [WM80] [SMW84] [Sym84]. The Flavors mechanism evolved into the Common Lisp Object System <ref> [Kee89] </ref> [Ste90] [Pae93]. The meta-object system of Common Lisp is described in [KdRB91]; it provides a very flexible way to extend the language. 5.9 Snobol, SL5, and Icon SNOBOL4 is a language for string processing that is unlike any other [GPP71].
Reference: [KL89] <author> Won Kim and Frederick H. </author> <title> Lochovsky, editors. Object-Oriented Concepts, Databases, and Applications. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mass., </address> <year> 1989. </year>
Reference-contexts: Both [Boo91] and [dCLF93] have many recent references. A treatment of object-oriented design that focuses more on C++ is found in [Mul89]. See also the survey by [WBJ90]. A collection of papers is found in [Pet87]. More recent collections of edited research papers are [SW87] <ref> [KL89] </ref>. The major annual conferences on object-oriented programming are the European Conference on Object-Oriented Programming (ECOOP) and Object-Oriented Programming Systems, Languages and Applications (OOPSLA). The ECOOP tends to be more academic, while OOPSLA is more practical.
Reference: [Knu67] <author> Donald E. Knuth. </author> <title> The Remaining Trouble Spots in Algol 60. </title> <journal> Communications of the ACM, </journal> <volume> 10(1) </volume> <pages> 611-617, </pages> <month> October </month> <year> 1967. </year> <month> 17 </month>
Reference-contexts: Among other innovations, it introduced the syntax formalism now known as BNF. Despite the precise use of English in the report, Knuth and others were able to find problems with the language definition <ref> [Knu67] </ref>. 5.3 Algol 68 Algol 68 is a direct descendent of Algol. It is a more powerful and more complete language than Algol 60; for example, it has user-defined types, overloading of operators, and mechanisms for parallel processing.
Reference: [Kow79] <author> Robert Kowalski. </author> <title> Algorithm = Logic + Control. </title> <journal> Communications of the ACM, </journal> <volume> 22(7) </volume> <pages> 424-435, </pages> <month> July </month> <year> 1979. </year>
Reference-contexts: More recent languages have emphasized lazy evaluation. A good example is Miranda [Tur90a], which also has an interesting notion of data abstraction. 4 4.2 Logic Programming Kowalski's paper "Algorithm = Logic + Control" is a good introduction to logic programming in an idealized setting <ref> [Kow79] </ref>. A classic textbook on Prolog is the book by Clocksin and Mellish [CM81]; another good text is Sterling and Shapiro's [SS86]. A short description and evaluation of Prolog is found in the paper "The Prolog Phenomenon" [McD80]. A recent survey is [Apt90].
Reference: [KR78] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1978. </year>
Reference-contexts: Because the revised report is difficult to follow, Tanenbaum's tutorial is probably a better place to start [Tan76]. Those seriously interested in Algol 68 will want to consult [LvdM77]. 5.4 C A popular descendent of Algol 68 is the lower-level language C <ref> [KR78] </ref>. C represents the best of several languages that support low-level programming while maintaining the portability of the resulting program.
Reference: [LAB + 81] <author> Barbara Liskov, Russell Atkinson, Toby Bloom, Eliot Moss, J. Craig Schaffert, Robert Scheifler, and Alan Snyder. </author> <title> CLU Reference Manual, </title> <booktitle> volume 114 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1981. </year>
Reference-contexts: introduction is [CL90]. Another excellent paper is [Coo91], which distinguishes between programming with abstract data types and object-oriented programming. CLU is a language designed around data abstraction [LSAS77] <ref> [LAB + 81] </ref> [LG86]. It also has an interesting control abstraction and exception handling mechanisms [LS79]. Alphard, designed around the same time as CLU and with many of the same goals, has surprising differences [SWL77] [Sha81].
Reference: [LaL89] <author> Wilf R. LaLonde. </author> <title> Designing Families of Data Types Using Exemplars. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 11(2) </volume> <pages> 212-248, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and [Lea91b]. For a contrast, see also [BW90b] [Ame87] [AvdL90] [Mey88] [MOM90] [Coo92] [UR92] [LW93a] [LW93b]. The concept of delegation is explored in [Lie86], in Actra [LTP86] <ref> [LaL89] </ref>, and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time. Some relevant semantic models are discussed in [Mit90a] and [CHC90].
Reference: [Lan64] <author> P. J. Landin. </author> <title> The Mechanical Evaluation of Expressions. </title> <journal> Computer Journal, </journal> <volume> 6 </volume> <pages> 308-320, </pages> <year> 1964. </year> <note> See also Landin's paper "A Lambda-Calculus Approach" in Advances in Programming and Non-Numerical Computation, </note> <editor> L. Fox (ed.), </editor> <publisher> Pergamon Press, Oxford, </publisher> <year> 1966. </year>
Reference: [Lan65] <author> P. J. Landin. </author> <title> A Correspondence Algol 60 and Church's Lambda Notation. </title> <journal> Communications of the ACM, </journal> <volume> 8 </volume> <pages> 89-101, 158-165, </pages> <year> 1965. </year>
Reference: [Lan66] <author> P. J. Landin. </author> <title> The Next 700 Programming Languages. </title> <journal> Communications of the ACM, </journal> <volume> 9(3) </volume> <pages> 157-166, </pages> <month> March </month> <year> 1966. </year>
Reference-contexts: John Backus, one of the designers of Fortran, proposed a new language for functional programming without any names called FP in his Turing Award Lecture [Bac78a]. A functional programming style using a more congenial notation based on Landin's ISWIM <ref> [Lan66] </ref> is developed in Henderson's book Functional Programming: Application and Implementation [Hen80]. More recent languages have emphasized lazy evaluation.
Reference: [Lan71] <author> Saunders Mac Lane. </author> <title> Categories for the Working Mathematician, volume 5 of Graduate Texts in Mathematics. </title> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1971. </year>
Reference: [LD75] <author> O. Lecarme and P. Desjardins. </author> <title> Reply to a paper by A. N. Habermann on the Programming Language Pascal. </title> <journal> Acta Informatica, </journal> <volume> 4(3) </volume> <pages> 231-243, </pages> <year> 1975. </year> <note> An earlier version appeared in ACM SIGPLAN Notices, </note> <month> October, </month> <year> 1974. </year>
Reference-contexts: Wirth's language Pascal [Wir71] [JW74] has been enormously popular, attracting detractors [Hab73] and defenders <ref> [LD75] </ref>. Pascal is, in part, a response to the complexity of Algol 68. All this attention has provoked Wirth to reassessing Pascal [Wir75] and to the design of Modula-2 [Wir85], and Oberon [Wir88].
Reference: [Lea91a] <author> Gary T. Leavens. </author> <title> Introduction to the Literature on Object-Oriented Design, </title> <journal> Programming, and Languages. OOPS Messenger, </journal> <volume> 2(4), </volume> <month> October </month> <year> 1991. </year>
Reference-contexts: Some relevant semantic models are discussed in [Mit90a] and [CHC90]. A somewhat dated survey of the literature on object-oriented programming is <ref> [Lea91a] </ref>. 5 Language Case Studies The following entries are intended to be selective rather than comprehensive. Instead they are biased towards the most interesting languages and references for the programming language designer.
Reference: [Lea91b] <author> Gary T. Leavens. </author> <title> Modular Specification and Verification of Object-Oriented Programs. </title> <journal> IEEE Software, </journal> <volume> 8(4) </volume> <pages> 72-80, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Snyder's analysis of the issues involved is insightful [Sny86], although his viewpoint is different from that of most advocates of multiple inheritance. My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and <ref> [Lea91b] </ref>. For a contrast, see also [BW90b] [Ame87] [AvdL90] [Mey88] [MOM90] [Coo92] [UR92] [LW93a] [LW93b]. The concept of delegation is explored in [Lie86], in Actra [LTP86] [LaL89], and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time.
Reference: [Lel88] <author> Wm Leler. </author> <title> Constraint Programming Languages: Their Specification and Generation. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mass., </address> <year> 1988. </year>
Reference-contexts: An early attempt was embodied in Steele and Sussman's work, as described in [SS80]. A more recent account is Leler's book <ref> [Lel88] </ref>. Languages based on term rewriting without logic variables also allow for parallelism.
Reference: [LG86] <author> Barbara Liskov and John Guttag. </author> <title> Abstraction and Specification in Program Development. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1986. </year>
Reference-contexts: introduction is [CL90]. Another excellent paper is [Coo91], which distinguishes between programming with abstract data types and object-oriented programming. CLU is a language designed around data abstraction [LSAS77] [LAB + 81] <ref> [LG86] </ref>. It also has an interesting control abstraction and exception handling mechanisms [LS79]. Alphard, designed around the same time as CLU and with many of the same goals, has surprising differences [SWL77] [Sha81]. The language Russell was developed at Cornell to investigate how types can be treated as values.
Reference: [LG88] <author> John M. Lucassen and David K. Gifford. </author> <title> Polymorphic Effect Systems. </title> <booktitle> In Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Diego, Calif., </address> <pages> pages 47-57. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1988. </year>
Reference: [LGH + 78] <author> R. L. London, J. V. Guttag, J. J. Horning, B. W. Lampson, J. G. Mitchell, and G. J. Popek. </author> <title> Proof Rules for the Programming Language Euclid. </title> <journal> Acta Informatica, </journal> <volume> 10(1) </volume> <pages> 1-26, </pages> <year> 1978. </year>
Reference-contexts: Oberon has object-oriented features, as does the (non-Wirth) language Modula-3 [CDJ + 89] [Nel91]. 5.6 Euclid Euclid is an attempt to improve on Pascal in a different direction [PHL + 77] <ref> [LGH + 78] </ref>.
Reference: [Lie86] <author> Henry Lieberman. </author> <title> Using Prototypical Objects to Implement Shared Behavior in Object Oriented Systems. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 21(11) </volume> <pages> 214-223, </pages> <month> November </month> <year> 1986. </year> <booktitle> OOPSLA '86 Conference Proceedings, </booktitle> <editor> Norman Meyrowitz (editor), </editor> <month> September </month> <year> 1986, </year> <institution> Portland, Oregon. </institution>
Reference-contexts: My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and [Lea91b]. For a contrast, see also [BW90b] [Ame87] [AvdL90] [Mey88] [MOM90] [Coo92] [UR92] [LW93a] [LW93b]. The concept of delegation is explored in <ref> [Lie86] </ref>, in Actra [LTP86] [LaL89], and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time. Some relevant semantic models are discussed in [Mit90a] and [CHC90].
Reference: [Lip91] <author> Stanley B. Lippman. </author> <title> C++ Primer: 2nd Edition. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mass., </address> <year> 1991. </year>
Reference-contexts: The Journal of Object-Oriented Programming (JOOP) is perhaps the best journal exclusively devoted to object-oriented programming. The best documented and the cleanest object-oriented programming language is Smalltalk-80 [Ing81] [GR83]. A more widely used language is C++ [ES90]. Good introductions to C++ include [Str91] and <ref> [Lip91] </ref>. Multiple inheritance, a feature not found in Smalltalk-80, seems to be quite useful. Cardelli gives a semantics for inheritance in his paper "A Semantics of Multiple Inheritance" [Car88a].
Reference: [LL90] <author> Leslie Lamport and Nancy Lynch. </author> <title> Distributed Computing: Models and Methods. </title> <editor> In J. van Leewen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Models and Semantics, chapter 19, </booktitle> <pages> pages 1157-1199. </pages> <publisher> The MIT Press, </publisher> <address> New York, N.Y., </address> <year> 1990. </year> <month> 18 </month>
Reference-contexts: A classic reference for the operational semantics of concurrent processes is Milner's book on CCS [Mil89b]. Another widely used approach is Hoare's CSP [Hoa78] [BHR84] [LS84] [Hoa85]. See [Hen88] [BM90] [Mil90b] [MPW92] for more recent work in the semantics of concurrency, and <ref> [LL90] </ref> and [Bro91] for recent work in the semantics of distributed systems. 7 The Future A (by now a bit dated) summary of research directions for language design is given in [LLM89].
Reference: [LLM89] <author> Gary Lindstrom, Barbara Liskov, and David MacQueen. </author> <title> Critical Research Directions in Pro--gramming Languages. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 24(11) </volume> <pages> 10-25, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: See [Hen88] [BM90] [Mil90b] [MPW92] for more recent work in the semantics of concurrency, and [LL90] and [Bro91] for recent work in the semantics of distributed systems. 7 The Future A (by now a bit dated) summary of research directions for language design is given in <ref> [LLM89] </ref>. Consumers of programming languages (programmers and language standardization committees) seem to be fairly conservative, and interested more in performance than elegance or expressive power. See [Gab93] for a pessimistic view of what this means for language design. 8
Reference: [LS79] <author> Barbara H. Liskov and Alan Snyder. </author> <title> Exception Handling in CLU. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-5(6):546-558, </volume> <month> November </month> <year> 1979. </year>
Reference-contexts: introduction is [CL90]. Another excellent paper is [Coo91], which distinguishes between programming with abstract data types and object-oriented programming. CLU is a language designed around data abstraction [LSAS77] [LAB + 81] [LG86]. It also has an interesting control abstraction and exception handling mechanisms <ref> [LS79] </ref>. Alphard, designed around the same time as CLU and with many of the same goals, has surprising differences [SWL77] [Sha81]. The language Russell was developed at Cornell to investigate how types can be treated as values.
Reference: [LS83] <author> Barbara Liskov and Robert Scheifler. </author> <title> Guardians and Actions: Linguistic Support for Robust, Distributed Programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 5(3) </volume> <pages> 381-404, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: A survey appears in [BST89], which can be consulted for other references. A recent survey, with a focus on object-orientation is [CC91]. Other sources of references are is the collection of reprints [AS91], and the recent book [GR93]. Of particular interest are the languages Argus <ref> [LS83] </ref> [Wei90] and SR [AOC + 88] [AO93]. The Amoeba distributed operating system also has interesting implications for language designers [TvRvS + 90] [TKB92]. An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92].
Reference: [LS84] <author> Leslie Lamport and Fred B. Schneider. </author> <title> The "Hoare Logic" of CSP and All That. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 6(2) </volume> <pages> 281-296, </pages> <month> April </month> <year> 1984. </year>
Reference-contexts: An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92]. A classic reference for the operational semantics of concurrent processes is Milner's book on CCS [Mil89b]. Another widely used approach is Hoare's CSP [Hoa78] [BHR84] <ref> [LS84] </ref> [Hoa85]. See [Hen88] [BM90] [Mil90b] [MPW92] for more recent work in the semantics of concurrency, and [LL90] and [Bro91] for recent work in the semantics of distributed systems. 7 The Future A (by now a bit dated) summary of research directions for language design is given in [LLM89].
Reference: [LS91] <author> F. W. Lawvere and Stephen H. Schanuel. </author> <title> Conceptual Mathematics: a first introduction to categories. </title> <booktitle> Buffalo Workshop Press, </booktitle> <address> Buffalo, NY, </address> <year> 1991. </year>
Reference: [LSAS77] <author> Barbara Liskov, Alan Snyder, Russell Atkinson, and Craig Schaffert. </author> <title> Abstraction Mechanisms in CLU. </title> <journal> Communications of the ACM, </journal> <volume> 20(8) </volume> <pages> 564-576, </pages> <month> August </month> <year> 1977. </year>
Reference-contexts: introduction is [CL90]. Another excellent paper is [Coo91], which distinguishes between programming with abstract data types and object-oriented programming. CLU is a language designed around data abstraction <ref> [LSAS77] </ref> [LAB + 81] [LG86]. It also has an interesting control abstraction and exception handling mechanisms [LS79]. Alphard, designed around the same time as CLU and with many of the same goals, has surprising differences [SWL77] [Sha81].
Reference: [LTP86] <author> Wilf R. LaLonde, Dave A. Thomas, and John R. Pugh. </author> <title> An Exemplar Based Smalltalk. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 21(11) </volume> <pages> 322-330, </pages> <month> November </month> <year> 1986. </year> <booktitle> OOPSLA '86 Conference Proceedings, </booktitle> <editor> Norman Meyrowitz (editor), </editor> <month> September </month> <year> 1986, </year> <institution> Portland, Oregon. </institution>
Reference-contexts: My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and [Lea91b]. For a contrast, see also [BW90b] [Ame87] [AvdL90] [Mey88] [MOM90] [Coo92] [UR92] [LW93a] [LW93b]. The concept of delegation is explored in [Lie86], in Actra <ref> [LTP86] </ref> [LaL89], and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time. Some relevant semantic models are discussed in [Mit90a] and [CHC90].
Reference: [LvdM77] <author> C. H. Lindsey and S. G. van der Meulen. </author> <title> Informal Introduction to ALGOL 68 (revised edition). </title> <publisher> North-Holland Publishing Co., </publisher> <address> New York, N.Y., </address> <year> 1977. </year>
Reference-contexts: The revised report is a forbidding document, which has an innovative formal mechanism for defining the language's semantics [vWMP + 77]. Because the revised report is difficult to follow, Tanenbaum's tutorial is probably a better place to start [Tan76]. Those seriously interested in Algol 68 will want to consult <ref> [LvdM77] </ref>. 5.4 C A popular descendent of Algol 68 is the lower-level language C [KR78]. C represents the best of several languages that support low-level programming while maintaining the portability of the resulting program.
Reference: [LW90] <author> Gary T. Leavens and William E. Weihl. </author> <title> Reasoning about Object-oriented Programs that use Subtypes (extended abstract). </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 25(10) </volume> <pages> 212-223, </pages> <month> October </month> <year> 1990. </year> <booktitle> OOPSLA ECOOP '90 Proceedings, N. Meyrowitz (editor). </booktitle>
Reference-contexts: Snyder's analysis of the issues involved is insightful [Sny86], although his viewpoint is different from that of most advocates of multiple inheritance. My own views on the subject of object-oriented specification, verification, and subtyping can be found in <ref> [LW90] </ref> and [Lea91b]. For a contrast, see also [BW90b] [Ame87] [AvdL90] [Mey88] [MOM90] [Coo92] [UR92] [LW93a] [LW93b].
Reference: [LW93a] <author> Barbara Liskov and Jeannette M. Wing. </author> <title> A New Definition of the Subtype Relation. </title> <editor> In Oscar M. Nierstrasz, editor, </editor> <booktitle> ECOOP '93 | Object-Oriented Programming, 7th European Conference, Kaiserslautern, Germany, volume 707 of Lecture Notes in Computer Science, </booktitle> <pages> pages 118-141. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <month> July </month> <year> 1993. </year>
Reference-contexts: My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and [Lea91b]. For a contrast, see also [BW90b] [Ame87] [AvdL90] [Mey88] [MOM90] [Coo92] [UR92] <ref> [LW93a] </ref> [LW93b]. The concept of delegation is explored in [Lie86], in Actra [LTP86] [LaL89], and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time. Some relevant semantic models are discussed in [Mit90a] and [CHC90].
Reference: [LW93b] <author> Barbara Liskov and Jeannette M. Wing. </author> <title> Specifications and Their Use in Defining Subtypes. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 28(10) </volume> <pages> 16-28, </pages> <month> October </month> <year> 1993. </year> <booktitle> OOPSLA '93 Proceedings, Andreas Paepcke (editor). </booktitle>
Reference-contexts: My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and [Lea91b]. For a contrast, see also [BW90b] [Ame87] [AvdL90] [Mey88] [MOM90] [Coo92] [UR92] [LW93a] <ref> [LW93b] </ref>. The concept of delegation is explored in [Lie86], in Actra [LTP86] [LaL89], and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time. Some relevant semantic models are discussed in [Mit90a] and [CHC90].
Reference: [MA86] <author> Ernest G. Manes and Michael A. Arbib. </author> <title> Algebraic Approaches to Program Semantics. </title> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1986. </year>
Reference: [MA89] <author> C. McDonald and L. Allison. </author> <title> Denotational Semantics of a Command Interpreter and their Implementation in Standard ML. </title> <journal> The Computer Journal, </journal> <volume> 32(5) </volume> <pages> 422-431, </pages> <month> October </month> <year> 1989. </year>
Reference: [Mac87] <author> Bruce J. MacLennan. </author> <booktitle> Principles of Programming Languages. </booktitle> <publisher> Holt, Rinehart and Winston, </publisher> <address> New York, N.Y., </address> <note> second edition, </note> <year> 1987. </year>
Reference: [MAE + 65] <author> John McCarthy, Paul W. Abrahams, Daniel J. Edwards, Timothy P. Hart, and Michael I. Levin. </author> <title> LISP 1.5 Programmer's Manual. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1965. </year>
Reference-contexts: it attempts to support program verification. 5.7 Ada Ada was designed by first setting out requirements for the language [Hig78] and then designing and revising a language to meet those requirements [IBH + 79] [Ada83] [IBFW91]. 5.8 Lisp-like Languages The original LISP is described in the LISP 1.5 Programmer's Manual <ref> [MAE + 65] </ref>. The language has since evolved in many directions. MacLisp is a main-stream dialect that provided many system building tools [Pit83]. The successor to MacLisp is Common Lisp [Ste84] [Ste90]. Unlike most earlier dialects of Lisp, Common Lisp has static scoping.
Reference: [Mat85a] <author> David C. J. Matthews. </author> <title> An overview of the Poly Programming Language. In Persistence and Data Types: </title> <booktitle> Papers for the Appin Workshop, </booktitle> <pages> pages 265-274. </pages> <institution> Universities of Glasgow and St. Andrews, Departments of Computer Science, </institution> <month> August </month> <year> 1985. </year> <note> Persistent Programming Research Report 16. </note>
Reference: [Mat85b] <author> David C. J. Matthews. </author> <title> Poly Manual. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 20(9) </volume> <pages> 52-76, </pages> <month> September </month> <year> 1985. </year>
Reference: [McD80] <author> Drew McDermott. </author> <title> The Prolog Phenomenon. </title> <journal> ACM SIGART Newsletter, </journal> <pages> pages 16-20, </pages> <month> July </month> <year> 1980. </year> <title> Number 72. </title> <type> 19 </type>
Reference-contexts: A classic textbook on Prolog is the book by Clocksin and Mellish [CM81]; another good text is Sterling and Shapiro's [SS86]. A short description and evaluation of Prolog is found in the paper "The Prolog Phenomenon" <ref> [McD80] </ref>. A recent survey is [Apt90]. Several "AI languages" preceded the development of Prolog; for example, Planner [SWC71] and Conniver [MS74]. Much recent work has focused on concurrent logic programming languages [Sha89], which are perhaps more like CSP than logic programming.
Reference: [Mey88] <author> Bertrand Meyer. </author> <title> Object-oriented Software Construction. </title> <publisher> Prentice Hall, </publisher> <address> New York, N.Y., </address> <year> 1988. </year>
Reference-contexts: A more technical introduction is Budd's book [Bud91]. Meyer's book on Eiffel also has more technical meat <ref> [Mey88] </ref>, as well as a focus on software engineering concerns. Another fairly complete treatment is given in Goldberg and Robson's book on Smalltalk-80 [GR83]. A graduate-level introduction is [BGHS91]. Descriptions of object-oriented design methods are found in [Boo91] [WBWW90] [dCLF92] [dCF92] [dCLF93]. Both [Boo91] and [dCLF93] have many recent references. <p> Snyder's analysis of the issues involved is insightful [Sny86], although his viewpoint is different from that of most advocates of multiple inheritance. My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and [Lea91b]. For a contrast, see also [BW90b] [Ame87] [AvdL90] <ref> [Mey88] </ref> [MOM90] [Coo92] [UR92] [LW93a] [LW93b]. The concept of delegation is explored in [Lie86], in Actra [LTP86] [LaL89], and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time. Some relevant semantic models are discussed in [Mit90a] and [CHC90].
Reference: [Mey90] <author> Bertrand Meyer. </author> <title> Introduction to the Theory of Programming Languages. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference: [MH88] <author> John C. Mitchell and Robert Harper. </author> <title> The Essence of ML. </title> <booktitle> In Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Diego, Calif., </address> <pages> pages 28-46. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1988. </year>
Reference: [Mil78] <author> Robin Milner. </author> <title> A Theory of Type Polymorphism in Programming. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 17(3) </volume> <pages> 348-375, </pages> <month> December </month> <year> 1978. </year>
Reference: [Mil89a] <author> Dale Miller. </author> <title> Abstractions in Logic Programs. </title> <editor> In P. Odifreddi, editor, </editor> <booktitle> Logic and Computer Science, </booktitle> <pages> pages 329-359. </pages> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: A related language is Andorra Prolog [BHW89]. Work on type checking for logic programming languages is surveyed in the collection [Pfe92]. The language Prolog features type inference, type checking, and higher-order programming constructs [NM88] [Mil90a] <ref> [Mil89a] </ref> [NM90] [MNPS91]. 4.3 Other Declarative Programming Paradigms Constraint-based languages will probably be important in the future. An early attempt was embodied in Steele and Sussman's work, as described in [SS80]. A more recent account is Leler's book [Lel88].
Reference: [Mil89b] <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <address> New York, N.Y., </address> <year> 1989. </year>
Reference-contexts: The Amoeba distributed operating system also has interesting implications for language designers [TvRvS + 90] [TKB92]. An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92]. A classic reference for the operational semantics of concurrent processes is Milner's book on CCS <ref> [Mil89b] </ref>. Another widely used approach is Hoare's CSP [Hoa78] [BHR84] [LS84] [Hoa85].
Reference: [Mil90a] <author> Dale Miller. </author> <title> A Logic Programming Language with Lambda-Abstraction Function Variables, and Simple Unification. </title> <editor> In Peter Schroeder-Heister, editor, </editor> <booktitle> Extensions of Logic Programming, International Workshop, Tubingen, </booktitle> <address> FRG, </address> <month> December, </month> <year> 1989, </year> <booktitle> volume 475 of Lecture Notes in Computer Science, </booktitle> <pages> pages 253-282. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference-contexts: A related language is Andorra Prolog [BHW89]. Work on type checking for logic programming languages is surveyed in the collection [Pfe92]. The language Prolog features type inference, type checking, and higher-order programming constructs [NM88] <ref> [Mil90a] </ref> [Mil89a] [NM90] [MNPS91]. 4.3 Other Declarative Programming Paradigms Constraint-based languages will probably be important in the future. An early attempt was embodied in Steele and Sussman's work, as described in [SS80]. A more recent account is Leler's book [Lel88].
Reference: [Mil90b] <author> Robin Milner. </author> <title> Operational and Algebraic Semantics of Concurrent Processes. </title> <editor> In J. van Leewen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Models and Semantics, chapter 19, </booktitle> <pages> pages 1201-1242. </pages> <publisher> The MIT Press, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference-contexts: An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92]. A classic reference for the operational semantics of concurrent processes is Milner's book on CCS [Mil89b]. Another widely used approach is Hoare's CSP [Hoa78] [BHR84] [LS84] [Hoa85]. See [Hen88] [BM90] <ref> [Mil90b] </ref> [MPW92] for more recent work in the semantics of concurrency, and [LL90] and [Bro91] for recent work in the semantics of distributed systems. 7 The Future A (by now a bit dated) summary of research directions for language design is given in [LLM89].
Reference: [Mit90a] <author> John C. Mitchell. </author> <title> Toward a typed foundation for method specialization and inheritance. </title> <booktitle> In Conference Record of the Seventeenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Francisco, Calif., </address> <pages> pages 109-124. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1990. </year>
Reference-contexts: The concept of delegation is explored in [Lie86], in Actra [LTP86] [LaL89], and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time. Some relevant semantic models are discussed in <ref> [Mit90a] </ref> and [CHC90]. A somewhat dated survey of the literature on object-oriented programming is [Lea91a]. 5 Language Case Studies The following entries are intended to be selective rather than comprehensive. Instead they are biased towards the most interesting languages and references for the programming language designer.
Reference: [Mit90b] <author> John C. Mitchell. </author> <title> Type systems for programming languages. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Models and Semantics, chapter 8, </booktitle> <pages> pages 365-458. </pages> <publisher> North-Holland, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference: [Mit91] <author> John C. Mitchell. </author> <title> On abstraction and the expressive power of programming languages. </title> <booktitle> In Conference on Theoretical Aspects of Computer Software, </booktitle> <address> Sendi Japan, </address> <month> September </month> <year> 1991. </year>
Reference: [ML75] <author> P. Martin-Lof. </author> <title> An Intuitionistic Theory of Types: Predictive Part. </title> <editor> In H. E. Rose and J. C. Sheperdson, editors, </editor> <booktitle> Logic Colloquium '73, volume 80 of Studies in Logic, </booktitle> <pages> pages 73-118. </pages> <publisher> North-Holland Publishing Co., </publisher> <address> New York, N.Y., </address> <year> 1975. </year>
Reference: [ML82] <author> Per Martin-Lof. </author> <title> Constructive Mathematics and Computer Programming. </title> <editor> In L. J. Cohen et al., editors, </editor> <booktitle> Logic, Methodology, and Philosophy of Science VI (Proceedings of the Sixth International Congress; Hannover, 1979), volume 104 of Studies in Logic and the Foundations of Mathematics, </booktitle> <pages> pages 153-175. </pages> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1982. </year>
Reference: [MMM91] <author> John Mitchell, Sigurd Meldal, and Neel Madhav. </author> <title> An extension of Standard ML modules with subtyping and inheritance. </title> <booktitle> In Conference Record of the Eighteenth Annual ACM Symposium on Principles of Programming Languages, Orlando, </booktitle> <pages> pages 270-278. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1991. </year>
Reference-contexts: By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91]. Recent theoretical work in this area includes the following [Car88b] [Car88a] [CM89] [AC90] [CMMS91] [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] <ref> [MMM91] </ref> [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models
Reference: [MNPS91] <author> D. Miller, G. Nadathur, F. Pfenning, and A. Scedrov. </author> <title> Uniform Proofs as a Foundation for Logic Programming. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 51(1-2):125-158, </volume> <month> March </month> <year> 1991. </year>
Reference-contexts: A related language is Andorra Prolog [BHW89]. Work on type checking for logic programming languages is surveyed in the collection [Pfe92]. The language Prolog features type inference, type checking, and higher-order programming constructs [NM88] [Mil90a] [Mil89a] [NM90] <ref> [MNPS91] </ref>. 4.3 Other Declarative Programming Paradigms Constraint-based languages will probably be important in the future. An early attempt was embodied in Steele and Sussman's work, as described in [SS80]. A more recent account is Leler's book [Lel88]. Languages based on term rewriting without logic variables also allow for parallelism.
Reference: [MOM90] <author> Narciso Marti-Oliet and Jose Meseguer. </author> <title> Inclusions and Subtypes. </title> <type> Technical Report SRI-CSL-90-16, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> 333 Ravenswood Ave., Menlo Park, Calif., </address> <month> December </month> <year> 1990. </year>
Reference-contexts: My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and [Lea91b]. For a contrast, see also [BW90b] [Ame87] [AvdL90] [Mey88] <ref> [MOM90] </ref> [Coo92] [UR92] [LW93a] [LW93b]. The concept of delegation is explored in [Lie86], in Actra [LTP86] [LaL89], and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time. Some relevant semantic models are discussed in [Mit90a] and [CHC90].
Reference: [Mor73] <author> James H. Morris, Jr. </author> <title> Protection in Programming Languages. </title> <journal> Communications of the ACM, </journal> <volume> 16(1) </volume> <pages> 15-21, </pages> <month> January </month> <year> 1973. </year> <month> 20 </month>
Reference: [Mor90] <author> Carroll Morgan. </author> <title> Programming from Specifications. </title> <publisher> Prentice Hall International, </publisher> <address> Hempstead, UK, </address> <year> 1990. </year>
Reference: [Mos90] <author> Peter D. Mosses. </author> <title> Denotational Semantics. </title> <editor> In J. van Leewen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Models and Semantics, chapter 11, </booktitle> <pages> pages 577-631. </pages> <publisher> The MIT Press, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference: [Mos92] <author> Peter D. Mosses. </author> <title> Action Semantics, </title> <booktitle> volume 26 of Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <address> New York, N.Y., </address> <year> 1992. </year>
Reference: [MP85] <author> John C. Mitchell and Gordon D. Plotkin. </author> <title> Abstract Types have Existential Type. </title> <booktitle> In Conference Record of the 12th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> New Orleans, </address> <publisher> Louisana, </publisher> <pages> pages 37-51. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1985. </year>
Reference: [MPW92] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A Calculus of Mobile Processes, (Parts I and II). </title> <journal> Information and Computation, </journal> <volume> 100 </volume> <pages> 1-77, </pages> <year> 1992. </year>
Reference-contexts: An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92]. A classic reference for the operational semantics of concurrent processes is Milner's book on CCS [Mil89b]. Another widely used approach is Hoare's CSP [Hoa78] [BHR84] [LS84] [Hoa85]. See [Hen88] [BM90] [Mil90b] <ref> [MPW92] </ref> for more recent work in the semantics of concurrency, and [LL90] and [Bro91] for recent work in the semantics of distributed systems. 7 The Future A (by now a bit dated) summary of research directions for language design is given in [LLM89].
Reference: [MS74] <author> Drew V. McDermott and Gerald Jay Sussman. </author> <title> The CONNIVER Reference Manual. </title> <institution> AI Memo 295a, Massachusetts Institute of Technology, Artificial Intelligence Laboratory, </institution> <month> January </month> <year> 1974. </year>
Reference-contexts: A short description and evaluation of Prolog is found in the paper "The Prolog Phenomenon" [McD80]. A recent survey is [Apt90]. Several "AI languages" preceded the development of Prolog; for example, Planner [SWC71] and Conniver <ref> [MS74] </ref>. Much recent work has focused on concurrent logic programming languages [Sha89], which are perhaps more like CSP than logic programming. An evaluation of the Fifth-Generation project and some history of concurrent logic programming languages is found in [SW93]. A related language is Andorra Prolog [BHW89].
Reference: [MT91] <author> Robin Milner and Mads Tofte. </author> <title> Commentary on Standard ML. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1991. </year>
Reference: [MTH90] <author> Robin Milner, Mads Tofte, and Robert Harper. </author> <title> The Definition of Standard ML. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference: [Mul89] <author> Mark Mullin. </author> <title> Object Oriented Program Design With Examples in C++. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mass., </address> <year> 1989. </year>
Reference-contexts: A graduate-level introduction is [BGHS91]. Descriptions of object-oriented design methods are found in [Boo91] [WBWW90] [dCLF92] [dCF92] [dCLF93]. Both [Boo91] and [dCLF93] have many recent references. A treatment of object-oriented design that focuses more on C++ is found in <ref> [Mul89] </ref>. See also the survey by [WBJ90]. A collection of papers is found in [Pet87]. More recent collections of edited research papers are [SW87] [KL89]. The major annual conferences on object-oriented programming are the European Conference on Object-Oriented Programming (ECOOP) and Object-Oriented Programming Systems, Languages and Applications (OOPSLA).
Reference: [NBB + 63] <author> Peter Naur, J. W. Backus, F. L. Bauer, J. Green, C. Katz, J. McCarthy, A. J. Perlis, H. Rutishauser, K. Samelson, B. Vauquois, J. H. Wegstein, A. van Wijngaarden, and M. Woodger. </author> <title> Revised Report on the Algorithmic Language ALGOL 60. </title> <journal> Communications of the ACM, </journal> <volume> 1(17), </volume> <month> January </month> <year> 1963. </year>
Reference-contexts: The development of FORTRAN IV is discussed in [BH64]. John Backus, who headed the team that developed FORTRAN, later became dissatisfied with the influence that FORTRAN had on programming languages [Bac78a]. 5.2 Algol 60 The Algol 60 report is a true classic <ref> [NBB + 63] </ref>. Among other innovations, it introduced the syntax formalism now known as BNF. Despite the precise use of English in the report, Knuth and others were able to find problems with the language definition [Knu67]. 5.3 Algol 68 Algol 68 is a direct descendent of Algol.
Reference: [Nel91] <author> Greg Nelson. </author> <title> Systems Programming with Modula-3. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: Pascal is, in part, a response to the complexity of Algol 68. All this attention has provoked Wirth to reassessing Pascal [Wir75] and to the design of Modula-2 [Wir85], and Oberon [Wir88]. Oberon has object-oriented features, as does the (non-Wirth) language Modula-3 [CDJ + 89] <ref> [Nel91] </ref>. 5.6 Euclid Euclid is an attempt to improve on Pascal in a different direction [PHL + 77] [LGH + 78].
Reference: [NM88] <author> Gopalan Nadathur and Dale Miller. </author> <title> An Overview of Prolog. </title> <type> Technical Report ERGO-90-093, </type> <institution> Department of Computer and Information Science, University of Pennsylvania, </institution> <month> August </month> <year> 1988. </year> <booktitle> Appears in Fifth International Conference Symposium on Logic Programming. </booktitle>
Reference-contexts: A related language is Andorra Prolog [BHW89]. Work on type checking for logic programming languages is surveyed in the collection [Pfe92]. The language Prolog features type inference, type checking, and higher-order programming constructs <ref> [NM88] </ref> [Mil90a] [Mil89a] [NM90] [MNPS91]. 4.3 Other Declarative Programming Paradigms Constraint-based languages will probably be important in the future. An early attempt was embodied in Steele and Sussman's work, as described in [SS80]. A more recent account is Leler's book [Lel88].
Reference: [NM90] <author> G. Nadathur and D. Miller. </author> <title> Higher-Order Horn Clauses. </title> <journal> Journal of the ACM, </journal> <volume> 37(4) </volume> <pages> 777-814, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: A related language is Andorra Prolog [BHW89]. Work on type checking for logic programming languages is surveyed in the collection [Pfe92]. The language Prolog features type inference, type checking, and higher-order programming constructs [NM88] [Mil90a] [Mil89a] <ref> [NM90] </ref> [MNPS91]. 4.3 Other Declarative Programming Paradigms Constraint-based languages will probably be important in the future. An early attempt was embodied in Steele and Sussman's work, as described in [SS80]. A more recent account is Leler's book [Lel88]. Languages based on term rewriting without logic variables also allow for parallelism.
Reference: [NN92] <author> F. Nielson and H.R. Neilson. </author> <title> Semantics with Applications A Formal Introduction. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, N.Y., </address> <year> 1992. </year>
Reference: [NP83] <author> Bengt Nordstrom and Kent Peterson. </author> <title> Types and Specifications. </title> <editor> In R. E. A. Mason, editor, </editor> <booktitle> Information Processing 83, </booktitle> <pages> pages 915-920. </pages> <publisher> Elsevier Science Publishers B.V. (North-Holland), </publisher> <month> September </month> <year> 1983. </year> <booktitle> Proceedings of the IFIP 9th World Computer Congress, </booktitle> <address> Paris, France. </address>
Reference: [OG89] <author> James William O'Toole and David K. Gifford. </author> <title> Type Reconstruction with First-Class Polymorphic Values. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 24(7) </volume> <pages> 207-217, </pages> <month> July </month> <year> 1989. </year> <booktitle> Proceedings of the SIGPLAN '89 Conference on Programming Language Design and Implementation, </booktitle> <address> Portland, Oregon, </address> <month> June. </month>
Reference: [Pae93] <author> Andreas Paepcke. </author> <title> Object-Oriented Programming: The CLOS Perspective. </title> <publisher> The MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: See also the references in the Revised 4 report [CE91]. ZetaLisp (as found on Symbolics Lisp Machines) includes the influential Flavors mechanism for object-oriented programming [WM80] [SMW84] [Sym84]. The Flavors mechanism evolved into the Common Lisp Object System [Kee89] [Ste90] <ref> [Pae93] </ref>. The meta-object system of Common Lisp is described in [KdRB91]; it provides a very flexible way to extend the language. 5.9 Snobol, SL5, and Icon SNOBOL4 is a language for string processing that is unlike any other [GPP71].
Reference: [Pau91] <author> Laurence C. Paulson. </author> <title> ML for the Working Programmer. </title> <publisher> Cambridge University Press, </publisher> <address> New York, N.Y., </address> <year> 1991. </year> <month> 21 </month>
Reference: [PC92] <author> Yiannis E. Papelis and Thomas L. Casavant. </author> <title> Specification and Analysis of Parallel/Distributed Software and Systems by using Petri Nets with Transition Enabling Functions. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(3) </volume> <pages> 252-261, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Of particular interest are the languages Argus [LS83] [Wei90] and SR [AOC + 88] [AO93]. The Amoeba distributed operating system also has interesting implications for language designers [TvRvS + 90] [TKB92]. An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] <ref> [PC92] </ref>. A classic reference for the operational semantics of concurrent processes is Milner's book on CCS [Mil89b]. Another widely used approach is Hoare's CSP [Hoa78] [BHR84] [LS84] [Hoa85].
Reference: [PDM89] <author> Benjamin Pierce, Scott Dietzen, and Spiro Michaylov. </author> <title> Programming in Higher-Order Typed Lambda-Calculi. </title> <type> Technical Report CMU-CS-89-111, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> March </month> <year> 1989. </year>
Reference: [Pet77] <author> J. L. Peterson. </author> <title> Petri Nets. </title> <journal> ACM Computing Surveys, </journal> <volume> 9(3) </volume> <pages> 221-252, </pages> <month> September </month> <year> 1977. </year>
Reference-contexts: Of particular interest are the languages Argus [LS83] [Wei90] and SR [AOC + 88] [AO93]. The Amoeba distributed operating system also has interesting implications for language designers [TvRvS + 90] [TKB92]. An older but still heavily used approach to the semantics of concurrent processes is Petri nets <ref> [Pet77] </ref> [PC92]. A classic reference for the operational semantics of concurrent processes is Milner's book on CCS [Mil89b]. Another widely used approach is Hoare's CSP [Hoa78] [BHR84] [LS84] [Hoa85].
Reference: [Pet87] <author> Gerald E. Peterson, </author> <title> editor. Tutorial: Object-Oriented Computing. </title> <publisher> IEEE Computer Society Press, </publisher> <address> Los Angeles, Calif., </address> <year> 1987. </year> <booktitle> Volume 1: concepts; volume 2: implementations. </booktitle>
Reference-contexts: Descriptions of object-oriented design methods are found in [Boo91] [WBWW90] [dCLF92] [dCF92] [dCLF93]. Both [Boo91] and [dCLF93] have many recent references. A treatment of object-oriented design that focuses more on C++ is found in [Mul89]. See also the survey by [WBJ90]. A collection of papers is found in <ref> [Pet87] </ref>. More recent collections of edited research papers are [SW87] [KL89]. The major annual conferences on object-oriented programming are the European Conference on Object-Oriented Programming (ECOOP) and Object-Oriented Programming Systems, Languages and Applications (OOPSLA). The ECOOP tends to be more academic, while OOPSLA is more practical.
Reference: [Pey87] <editor> S. L. Peyton Jones. </editor> <booktitle> The Implementation of Functional Programming Languages. </booktitle> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1987. </year>
Reference-contexts: Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90]. There are several good books on functional programming, including [Hen87] [BW88] [Hen80] [SF89]. For an introduction that also treats implementation issues, see <ref> [Pey87] </ref>. The articles in [Tur90b] make an interesting introduction to some research topics. John Backus, one of the designers of Fortran, proposed a new language for functional programming without any names called FP in his Turing Award Lecture [Bac78a].
Reference: [Pfe92] <editor> Frank Pfenning, editor. </editor> <booktitle> Types in Logic Programming. Logic Programming Series. </booktitle> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1992. </year>
Reference-contexts: An evaluation of the Fifth-Generation project and some history of concurrent logic programming languages is found in [SW93]. A related language is Andorra Prolog [BHW89]. Work on type checking for logic programming languages is surveyed in the collection <ref> [Pfe92] </ref>. The language Prolog features type inference, type checking, and higher-order programming constructs [NM88] [Mil90a] [Mil89a] [NM90] [MNPS91]. 4.3 Other Declarative Programming Paradigms Constraint-based languages will probably be important in the future. An early attempt was embodied in Steele and Sussman's work, as described in [SS80].
Reference: [PHL + 77] <author> G. J. Popek, J. J. Horning, B. W. Lampson, J. G. Mitchell, and R. L. </author> <title> London. Notes on the Design of Euclid. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 12(3) </volume> <pages> 11-18, </pages> <month> March </month> <year> 1977. </year> <booktitle> Proceedings of an ACM Conference on Language Design for Reliable Software, </booktitle> <address> Raliegh, North Carolina, </address> <month> March, </month> <year> 1977. </year>
Reference-contexts: All this attention has provoked Wirth to reassessing Pascal [Wir75] and to the design of Modula-2 [Wir85], and Oberon [Wir88]. Oberon has object-oriented features, as does the (non-Wirth) language Modula-3 [CDJ + 89] [Nel91]. 5.6 Euclid Euclid is an attempt to improve on Pascal in a different direction <ref> [PHL + 77] </ref> [LGH + 78].
Reference: [Pie91] <author> Benjamin C. Pierce. </author> <title> Basic Category Theory for Computer Scientists. </title> <publisher> The MIT Press, </publisher> <address> Cam-bridge, Mass, </address> <year> 1991. </year>
Reference: [Pit83] <author> Kent M. </author> <title> Pitman. The Revised MacLisp Manual. </title> <type> Technical Report TR-295, </type> <institution> Massachusetts Institute of Technology, Laboratory for Computer Science, </institution> <month> May </month> <year> 1983. </year>
Reference-contexts: The language has since evolved in many directions. MacLisp is a main-stream dialect that provided many system building tools <ref> [Pit83] </ref>. The successor to MacLisp is Common Lisp [Ste84] [Ste90]. Unlike most earlier dialects of Lisp, Common Lisp has static scoping. Scheme was the first dialect of Lisp to emphasize static scoping [SS78b] [RCA + 86] [ASS85]. See also the references in the Revised 4 report [CE91].
Reference: [Plo77] <author> G. D. Plotkin. </author> <title> LCF Considered as a Programming Language. </title> <journal> Theoretical Computer Science, </journal> <volume> 5 </volume> <pages> 223-255, </pages> <year> 1977. </year>
Reference: [RCA + 86] <author> Jonathan Rees, William Clinger, H. Abelson, N. I. Adams IV, D. H. Bartley, G. Brooks, R. K. Dybvig, D. P. Friedman, R. Halstead, C. Hanson, C. T. Haynes, E. Kohlbecker, D. Oxley, K. M. Pitman, G. J. Rozas, G. J. Sussman, and M. Wand. </author> <title> Revised 3 Report on the Algorithmic Language Scheme. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 21(12) </volume> <pages> 37-79, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: MacLisp is a main-stream dialect that provided many system building tools [Pit83]. The successor to MacLisp is Common Lisp [Ste84] [Ste90]. Unlike most earlier dialects of Lisp, Common Lisp has static scoping. Scheme was the first dialect of Lisp to emphasize static scoping [SS78b] <ref> [RCA + 86] </ref> [ASS85]. See also the references in the Revised 4 report [CE91]. ZetaLisp (as found on Symbolics Lisp Machines) includes the influential Flavors mechanism for object-oriented programming [WM80] [SMW84] [Sym84]. The Flavors mechanism evolved into the Common Lisp Object System [Kee89] [Ste90] [Pae93].
Reference: [Rep93] <author> John H. Reppey. </author> <title> Concurrent Programming with Events The Concurrent ML Manual. </title> <type> Technical report, </type> <institution> AT&T Bell Labs, </institution> <month> February </month> <year> 1993. </year> <note> Available by anonymous ftp from research.att.com. </note>
Reference-contexts: Andrew's textbook on concurrent programming languages also contains material on program verification as well as some survey material [And91a]. Data flow languages are surveyed in [Ack82]. A recent introduction to concurrent programming techniques is [Sno92]. Actor languages are discussed in [Agh91]. A concurrent version of ML is described in <ref> [Rep93] </ref>. Some aspects of data parallel programming languages are described in [HS86] [Gri93]. The language Jade is described in [RL92] [RSL93]. Distrbuted programming is a subarea of parallel programming with its own set of problems. A survey appears in [BST89], which can be consulted for other references.
Reference: [Rey74] <author> J. C. Reynolds. </author> <title> Towards a Theory of Type Structure. </title> <booktitle> In Programming Symposium, Proceedings, Colloque sur la Programmation, </booktitle> <address> Paris, </address> <month> April </month> <year> 1974, </year> <booktitle> volume 19 of Lecture Notes in Computer Science, </booktitle> <pages> pages 408-425. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1974. </year>
Reference: [Rey80] <author> John C. Reynolds. </author> <title> Using Category Theory to Design Implicit Conversions and Generic Operators. </title> <editor> In Neil D. Jones, editor, </editor> <booktitle> Semantics-Directed Compiler Generation, Proceedings of a Workshop, Aarhus, Denmark, volume 94 of Lecture Notes in Computer Science, </booktitle> <pages> pages 211-258. </pages> <publisher> Springer-Verlag, </publisher> <month> January </month> <year> 1980. </year>
Reference-contexts: [AC90] [CMMS91] [Car93] [CCH + 89] [CHC90] [Coo89] [BTGS90] [HP90] [MMM91] [BCM + 93] [BL90] [BM92] [Aba93] [Bru93]. (Cardelli is one of the most active in this area, and most of the literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see <ref> [Rey80] </ref> [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A recent survey of functional programming is [Hud89], which also discusses the language Haskell [HF92] [HJW + 92] [Sno92] [Dav92]. Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90].
Reference: [Rey85] <author> John C. Reynolds. </author> <title> Three Approaches to Type Structure. </title> <editor> In Hartmut Ehrig, Christiane Floyd, Maurice Nivat, and James Thatcher, editors, </editor> <booktitle> Mathematical Foundations of Software Development, Proceedings of the International Joint Conference on Theory and Practice of Software Development (TAPSOFT), Berlin. Volume 1: Colloquium on Trees in Algebra and Programming (CAAP '85), volume 185 of Lecture Notes in Computer Science, </booktitle> <pages> pages 97-138. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <month> March </month> <year> 1985. </year>
Reference: [RL92] <author> Martin C. Rinard and Monica S. Lam. </author> <booktitle> Semantic Foundations of Jade. In Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 105-118. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1992. </year> <month> 22 </month>
Reference-contexts: Data flow languages are surveyed in [Ack82]. A recent introduction to concurrent programming techniques is [Sno92]. Actor languages are discussed in [Agh91]. A concurrent version of ML is described in [Rep93]. Some aspects of data parallel programming languages are described in [HS86] [Gri93]. The language Jade is described in <ref> [RL92] </ref> [RSL93]. Distrbuted programming is a subarea of parallel programming with its own set of problems. A survey appears in [BST89], which can be consulted for other references. A recent survey, with a focus on object-orientation is [CC91].
Reference: [RSL93] <author> Martin C. Rinard, Daniel J. Scales, and Monica S. Lam. </author> <title> Jade: A High Level Machine Inde--pendent Language for Parallel Programming. </title> <journal> COMPUTER, </journal> <volume> 26(6) </volume> <pages> 28-38, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: A recent introduction to concurrent programming techniques is [Sno92]. Actor languages are discussed in [Agh91]. A concurrent version of ML is described in [Rep93]. Some aspects of data parallel programming languages are described in [HS86] [Gri93]. The language Jade is described in [RL92] <ref> [RSL93] </ref>. Distrbuted programming is a subarea of parallel programming with its own set of problems. A survey appears in [BST89], which can be consulted for other references. A recent survey, with a focus on object-orientation is [CC91].
Reference: [SCB + 86] <author> Craig Schaffert, Topher Cooper, Bruce Bullis, Mike Kilian, and Carrie Wilpolt. </author> <title> An Introduction to Trellis/Owl. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 21(11) </volume> <pages> 9-16, </pages> <month> November </month> <year> 1986. </year> <booktitle> OOPSLA '86 Conference Proceedings, </booktitle> <editor> Norman Meyrowitz (editor), </editor> <month> September </month> <year> 1986, </year> <institution> Portland, Oregon. </institution>
Reference-contexts: There are many papers that have appeared about Russell, but perhaps the best introduction to the language is the paper "Data Types are Values" [DD85], which can be consulted for other references. Much recent work involves object-oriented languages. For example, Trellis/Owl <ref> [SCB + 86] </ref> features strong type checking and a declared (i.e., by-name) subtype relation. By contrast many other languages feature structural subtyping, including Emerald [BHJL86] [BHJ + 87] [BH90] [BH91] [Car91].
Reference: [Sce90] <author> Andre Scedrov. </author> <title> A Guide to Polymorphic Types. </title> <editor> In P. Odifreddi, editor, </editor> <booktitle> Logic and Computer Science, volume 31 of APIC Series, </booktitle> <pages> pages 387-420. </pages> <publisher> Academic Press, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference: [Sch86] <author> David A. Schmidt. </author> <title> Denotational Semantics: A Methodology for Language Development. </title> <publisher> Allyn and Bacon, Inc., </publisher> <address> Boston, Mass., </address> <year> 1986. </year>
Reference: [Sco81] <author> Dana Scott. </author> <title> Lectures on a Mathematical Theory of Computation. </title> <type> Technical Monograph PRG-19, </type> <institution> Oxford University Computing Laboratory, Programming Research Group, </institution> <year> 1981. </year> <booktitle> Appears in Theoretical foundations of programming methodology : lecture notes of an international summer school, directed by F.L. Bauer, E.W. Dijkstra, and C.A.R. Hoare (Ridel, </booktitle> <year> 1982). </year>
Reference: [Seb92] <author> Robert W. </author> <title> Sebesta. </title> <booktitle> Concepts of Programming Languages. </booktitle> <address> Benjamin/Cummings, Redwood City, Calif., </address> <note> second edition, </note> <year> 1992. </year>
Reference: [Set89] <author> Ravi Sethi. </author> <title> Programming Languages: Concepts and Constructs. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1989. </year>
Reference: [SF89] <author> George Springer and Daniel P. Friedman. </author> <title> Scheme and the Art of Programming. </title> <publisher> McGraw-Hill, </publisher> <address> New York, N.Y., </address> <year> 1989. </year>
Reference-contexts: Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90]. There are several good books on functional programming, including [Hen87] [BW88] [Hen80] <ref> [SF89] </ref>. For an introduction that also treats implementation issues, see [Pey87]. The articles in [Tur90b] make an interesting introduction to some research topics. John Backus, one of the designers of Fortran, proposed a new language for functional programming without any names called FP in his Turing Award Lecture [Bac78a].
Reference: [Sha81] <author> Mary Shaw. </author> <title> ALPHARD: Form and Content. </title> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1981. </year>
Reference-contexts: CLU is a language designed around data abstraction [LSAS77] [LAB + 81] [LG86]. It also has an interesting control abstraction and exception handling mechanisms [LS79]. Alphard, designed around the same time as CLU and with many of the same goals, has surprising differences [SWL77] <ref> [Sha81] </ref>. The language Russell was developed at Cornell to investigate how types can be treated as values. There are many papers that have appeared about Russell, but perhaps the best introduction to the language is the paper "Data Types are Values" [DD85], which can be consulted for other references.
Reference: [Sha89] <author> Ehud Shapiro. </author> <title> The Family of Concurrent Logic Programming Languages. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 413-510, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: A short description and evaluation of Prolog is found in the paper "The Prolog Phenomenon" [McD80]. A recent survey is [Apt90]. Several "AI languages" preceded the development of Prolog; for example, Planner [SWC71] and Conniver [MS74]. Much recent work has focused on concurrent logic programming languages <ref> [Sha89] </ref>, which are perhaps more like CSP than logic programming. An evaluation of the Fifth-Generation project and some history of concurrent logic programming languages is found in [SW93]. A related language is Andorra Prolog [BHW89]. Work on type checking for logic programming languages is surveyed in the collection [Pfe92].
Reference: [SMW84] <author> Richard Stallman, David Moon, and Daniel Weinreb. </author> <title> Lisp Machine Manual (sixth edition). </title> <institution> Massachusetts Institute of Technology, Artificial Intelligence Laboratory, </institution> <address> Cambridge, Mass., </address> <month> June </month> <year> 1984. </year>
Reference-contexts: Scheme was the first dialect of Lisp to emphasize static scoping [SS78b] [RCA + 86] [ASS85]. See also the references in the Revised 4 report [CE91]. ZetaLisp (as found on Symbolics Lisp Machines) includes the influential Flavors mechanism for object-oriented programming [WM80] <ref> [SMW84] </ref> [Sym84]. The Flavors mechanism evolved into the Common Lisp Object System [Kee89] [Ste90] [Pae93].
Reference: [Sno92] <author> C. R. Snow. </author> <title> Concurrent Programming, </title> <booktitle> volume 26 of Cambridge Computer Science Texts. </booktitle> <publisher> Cambridge University Press, </publisher> <address> New York, N.Y., </address> <year> 1992. </year>
Reference-contexts: literature will cite one of his papers.) For work that directly bears on multimethods (as in CLOS), see [Rey80] [Ghe91b] [Ghe91a] [CGL92] [Cha92] [CGL93] [Cas93]. 4 Alternative Programming Models 4.1 Functional Programming A recent survey of functional programming is [Hud89], which also discusses the language Haskell [HF92] [HJW + 92] <ref> [Sno92] </ref> [Dav92]. Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90]. There are several good books on functional programming, including [Hen87] [BW88] [Hen80] [SF89]. For an introduction that also treats implementation issues, see [Pey87]. <p> A survey that focuses on distributed programs is [And91b]. Andrew's textbook on concurrent programming languages also contains material on program verification as well as some survey material [And91a]. Data flow languages are surveyed in [Ack82]. A recent introduction to concurrent programming techniques is <ref> [Sno92] </ref>. Actor languages are discussed in [Agh91]. A concurrent version of ML is described in [Rep93]. Some aspects of data parallel programming languages are described in [HS86] [Gri93]. The language Jade is described in [RL92] [RSL93]. Distrbuted programming is a subarea of parallel programming with its own set of problems.
Reference: [Sny86] <author> Alan Snyder. </author> <title> Encapsulation and Inheritance in Object-Oriented Programming Languages. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 21(11) </volume> <pages> 38-45, </pages> <month> November </month> <year> 1986. </year> <booktitle> OOPSLA '86 Conference Proceedings, </booktitle> <editor> Norman Meyrowitz (editor), </editor> <month> September </month> <year> 1986, </year> <institution> Portland, Oregon. </institution>
Reference-contexts: Good introductions to C++ include [Str91] and [Lip91]. Multiple inheritance, a feature not found in Smalltalk-80, seems to be quite useful. Cardelli gives a semantics for inheritance in his paper "A Semantics of Multiple Inheritance" [Car88a]. Snyder's analysis of the issues involved is insightful <ref> [Sny86] </ref>, although his viewpoint is different from that of most advocates of multiple inheritance. My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and [Lea91b]. For a contrast, see also [BW90b] [Ame87] [AvdL90] [Mey88] [MOM90] [Coo92] [UR92] [LW93a] [LW93b].
Reference: [Sok91] <author> S. </author> <title> Sokolowski. Applicative High Order Programming. </title> <publisher> Chapman and Hall Computing Series. Chapman & Hall Computing, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference: [SS78a] <author> Guy Lewis Steele Jr. and Gerald Jay Sussman. </author> <title> The Art of the Interpreter or, The Modularity Complex (Parts Zero, One, and Two). </title> <type> AI Memo 453, </type> <institution> Massachusetts Institute of Technology, Artificial Intelligence Laboratory, </institution> <month> May </month> <year> 1978. </year>
Reference: [SS78b] <author> Guy Lewis Steele Jr. and Gerald Jay Sussman. </author> <title> Revised Report on SCHEME A Dialect of LISP. </title> <type> AI Memo 452, </type> <institution> Massachusetts Institute of Technology, Artificial Intelligence Laboratory, </institution> <month> January </month> <year> 1978. </year>
Reference-contexts: MacLisp is a main-stream dialect that provided many system building tools [Pit83]. The successor to MacLisp is Common Lisp [Ste84] [Ste90]. Unlike most earlier dialects of Lisp, Common Lisp has static scoping. Scheme was the first dialect of Lisp to emphasize static scoping <ref> [SS78b] </ref> [RCA + 86] [ASS85]. See also the references in the Revised 4 report [CE91]. ZetaLisp (as found on Symbolics Lisp Machines) includes the influential Flavors mechanism for object-oriented programming [WM80] [SMW84] [Sym84]. The Flavors mechanism evolved into the Common Lisp Object System [Kee89] [Ste90] [Pae93].
Reference: [SS80] <author> G. Sussman and G. Steele. </author> <title> Constraints: a Language for Expressing Almost-Hierarchical Descriptions. </title> <journal> Artificial Intelligence, </journal> <volume> 14 </volume> <pages> 1-39, </pages> <year> 1980. </year>
Reference-contexts: The language Prolog features type inference, type checking, and higher-order programming constructs [NM88] [Mil90a] [Mil89a] [NM90] [MNPS91]. 4.3 Other Declarative Programming Paradigms Constraint-based languages will probably be important in the future. An early attempt was embodied in Steele and Sussman's work, as described in <ref> [SS80] </ref>. A more recent account is Leler's book [Lel88]. Languages based on term rewriting without logic variables also allow for parallelism.
Reference: [SS86] <author> Leon Sterling and Ehud Shapiro. </author> <title> The Art of Prolog. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1986. </year>
Reference-contexts: A classic textbook on Prolog is the book by Clocksin and Mellish [CM81]; another good text is Sterling and Shapiro's <ref> [SS86] </ref>. A short description and evaluation of Prolog is found in the paper "The Prolog Phenomenon" [McD80]. A recent survey is [Apt90]. Several "AI languages" preceded the development of Prolog; for example, Planner [SWC71] and Conniver [MS74].
Reference: [Sta92] <author> Ryan Stanisfer. </author> <title> ML Primer. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1992. </year> <month> 23 </month>
Reference: [Ste84] <author> Guy L. Steele Jr. </author> <title> Common LISP: The Language. </title> <publisher> Digital Press, </publisher> <address> Burlington, Mass., </address> <year> 1984. </year>
Reference-contexts: The language has since evolved in many directions. MacLisp is a main-stream dialect that provided many system building tools [Pit83]. The successor to MacLisp is Common Lisp <ref> [Ste84] </ref> [Ste90]. Unlike most earlier dialects of Lisp, Common Lisp has static scoping. Scheme was the first dialect of Lisp to emphasize static scoping [SS78b] [RCA + 86] [ASS85]. See also the references in the Revised 4 report [CE91].
Reference: [Ste90] <author> Guy L. Steele Jr. </author> <title> Common LISP: The Language. </title> <publisher> Digital Press, </publisher> <address> Burlington, Mass., </address> <note> second edition, </note> <year> 1990. </year>
Reference-contexts: The language has since evolved in many directions. MacLisp is a main-stream dialect that provided many system building tools [Pit83]. The successor to MacLisp is Common Lisp [Ste84] <ref> [Ste90] </ref>. Unlike most earlier dialects of Lisp, Common Lisp has static scoping. Scheme was the first dialect of Lisp to emphasize static scoping [SS78b] [RCA + 86] [ASS85]. See also the references in the Revised 4 report [CE91]. <p> See also the references in the Revised 4 report [CE91]. ZetaLisp (as found on Symbolics Lisp Machines) includes the influential Flavors mechanism for object-oriented programming [WM80] [SMW84] [Sym84]. The Flavors mechanism evolved into the Common Lisp Object System [Kee89] <ref> [Ste90] </ref> [Pae93]. The meta-object system of Common Lisp is described in [KdRB91]; it provides a very flexible way to extend the language. 5.9 Snobol, SL5, and Icon SNOBOL4 is a language for string processing that is unlike any other [GPP71].
Reference: [Sto77] <author> J. Stoy. </author> <title> Denotational Semantics: The Scott-Strachey Approach to Programming Language Theory. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1977. </year>
Reference: [Str91] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language: Second Edition. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mass., </address> <year> 1991. </year>
Reference-contexts: The Journal of Object-Oriented Programming (JOOP) is perhaps the best journal exclusively devoted to object-oriented programming. The best documented and the cleanest object-oriented programming language is Smalltalk-80 [Ing81] [GR83]. A more widely used language is C++ [ES90]. Good introductions to C++ include <ref> [Str91] </ref> and [Lip91]. Multiple inheritance, a feature not found in Smalltalk-80, seems to be quite useful. Cardelli gives a semantics for inheritance in his paper "A Semantics of Multiple Inheritance" [Car88a]. <p> C represents the best of several languages that support low-level programming while maintaining the portability of the resulting program. The language has recently been standardized, and incorporates several changes from its variant C++ <ref> [Str91] </ref>. 6 5.5 Algol W, Pascal, Modula-2, and Oberon Wirth and Hoare's language known as Algol W can be thought of as an improved version of Algol 60 [WH66]. Wirth's language Pascal [Wir71] [JW74] has been enormously popular, attracting detractors [Hab73] and defenders [LD75].
Reference: [SW80] <author> Mary Shaw and William A. Wulf. </author> <title> Toward Relaxing Assumptions in Languages and Their Implementations. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 15(3) </volume> <pages> 45-61, </pages> <month> March </month> <year> 1980. </year>
Reference: [SW87] <editor> Bruce Shriver and Peter Wegner, editors. </editor> <booktitle> Research Directions in Object-Oriented Programming. </booktitle> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1987. </year>
Reference-contexts: Both [Boo91] and [dCLF93] have many recent references. A treatment of object-oriented design that focuses more on C++ is found in [Mul89]. See also the survey by [WBJ90]. A collection of papers is found in [Pet87]. More recent collections of edited research papers are <ref> [SW87] </ref> [KL89]. The major annual conferences on object-oriented programming are the European Conference on Object-Oriented Programming (ECOOP) and Object-Oriented Programming Systems, Languages and Applications (OOPSLA). The ECOOP tends to be more academic, while OOPSLA is more practical.
Reference: [SW93] <author> Ehud Shapiro and David H.D. Warren. </author> <title> The Fifth Generation Project: Personal Perspectives. </title> <journal> Communications of the ACM, </journal> <volume> 36(3) </volume> <pages> 46-48, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Much recent work has focused on concurrent logic programming languages [Sha89], which are perhaps more like CSP than logic programming. An evaluation of the Fifth-Generation project and some history of concurrent logic programming languages is found in <ref> [SW93] </ref>. A related language is Andorra Prolog [BHW89]. Work on type checking for logic programming languages is surveyed in the collection [Pfe92].
Reference: [SWC71] <author> Gerald Jay Sussman, Terry Winograd, and Eugene Charniak. </author> <title> Micro-PLANNER Reference Manual. </title> <institution> AI Memo 203A, Massachusetts Institute of Technology, Artificial Intelligence Laboratory, </institution> <month> December </month> <year> 1971. </year>
Reference-contexts: A short description and evaluation of Prolog is found in the paper "The Prolog Phenomenon" [McD80]. A recent survey is [Apt90]. Several "AI languages" preceded the development of Prolog; for example, Planner <ref> [SWC71] </ref> and Conniver [MS74]. Much recent work has focused on concurrent logic programming languages [Sha89], which are perhaps more like CSP than logic programming. An evaluation of the Fifth-Generation project and some history of concurrent logic programming languages is found in [SW93]. A related language is Andorra Prolog [BHW89].
Reference: [SWL77] <author> Mary Shaw, William A. Wulf, and R. L. </author> <title> London. Abstraction and Verification in Alphard: Defining and Specifying Iteration and Generators. </title> <journal> Communications of the ACM, </journal> <volume> 20(8) </volume> <pages> 553-564, </pages> <month> August </month> <year> 1977. </year>
Reference-contexts: CLU is a language designed around data abstraction [LSAS77] [LAB + 81] [LG86]. It also has an interesting control abstraction and exception handling mechanisms [LS79]. Alphard, designed around the same time as CLU and with many of the same goals, has surprising differences <ref> [SWL77] </ref> [Sha81]. The language Russell was developed at Cornell to investigate how types can be treated as values. There are many papers that have appeared about Russell, but perhaps the best introduction to the language is the paper "Data Types are Values" [DD85], which can be consulted for other references.
Reference: [Sym84] <author> Symbolics, Inc. </author> <title> Lisp Machine Manual. </title> <address> Cambridge, Mass., </address> <month> March </month> <year> 1984. </year> <title> Eight volumes. </title>
Reference-contexts: Scheme was the first dialect of Lisp to emphasize static scoping [SS78b] [RCA + 86] [ASS85]. See also the references in the Revised 4 report [CE91]. ZetaLisp (as found on Symbolics Lisp Machines) includes the influential Flavors mechanism for object-oriented programming [WM80] [SMW84] <ref> [Sym84] </ref>. The Flavors mechanism evolved into the Common Lisp Object System [Kee89] [Ste90] [Pae93].
Reference: [Tan76] <author> Andrew S. Tanenbaum. </author> <title> A Tutorial on Algol 68. </title> <journal> ACM Computing Surveys, </journal> <volume> 8(2), </volume> <month> June </month> <year> 1976. </year>
Reference-contexts: The revised report is a forbidding document, which has an innovative formal mechanism for defining the language's semantics [vWMP + 77]. Because the revised report is difficult to follow, Tanenbaum's tutorial is probably a better place to start <ref> [Tan76] </ref>. Those seriously interested in Algol 68 will want to consult [LvdM77]. 5.4 C A popular descendent of Algol 68 is the lower-level language C [KR78]. C represents the best of several languages that support low-level programming while maintaining the portability of the resulting program.
Reference: [Ten76] <author> R. D. Tennent. </author> <title> The Denotational Semantics of Programming Languages. </title> <journal> Communications of the ACM, </journal> <volume> 19 </volume> <pages> 437-453, </pages> <month> August </month> <year> 1976. </year>
Reference: [Ten77] <author> R. D. Tennent. </author> <title> Language Design Methods Based on Semantic Principles. </title> <journal> Acta Informatica, </journal> <volume> 8 </volume> <pages> 97-112, </pages> <year> 1977. </year>
Reference: [Ten81] <author> R. D. Tennent. </author> <booktitle> Principles of Programming Languages. Prentice-Hall International, </booktitle> <address> Englewood Cliffs, N.J., </address> <year> 1981. </year>
Reference: [Tho91] <author> Simon Thompson. </author> <title> Type Theory and Functional Programming. </title> <booktitle> International Computer Science Series. </booktitle> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1991. </year>
Reference: [Tiu90] <author> Jerzy Tiuryn. </author> <title> Type Inference Probelms: A Survey. </title> <editor> In B. Rovan, editor, </editor> <booktitle> Mathematical Foundations of Computer Science 1990, Banska Bystrica, Czechoslovakia, volume 452 of Lecture Notes in Computer Science, </booktitle> <pages> pages 105-120. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference: [TKB92] <author> Andrew S. Tanenbaum, M. Frans Kaashoek, and Henri E. Bal. </author> <title> Parallel Programming Using Shared Objects and Broadcasting. </title> <journal> Computer, </journal> <volume> 25(8) </volume> <pages> 10-19, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: Other sources of references are is the collection of reprints [AS91], and the recent book [GR93]. Of particular interest are the languages Argus [LS83] [Wei90] and SR [AOC + 88] [AO93]. The Amoeba distributed operating system also has interesting implications for language designers [TvRvS + 90] <ref> [TKB92] </ref>. An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92]. A classic reference for the operational semantics of concurrent processes is Milner's book on CCS [Mil89b]. Another widely used approach is Hoare's CSP [Hoa78] [BHR84] [LS84] [Hoa85].
Reference: [Tur90a] <author> David A. Turner. </author> <title> An Overview of Miranda. </title> <editor> In David A. Turner, editor, </editor> <booktitle> Research Topics in Functional Programming, University of Texas at Austin Year of Programming Series, </booktitle> <pages> pages 1-16. </pages> <publisher> Addison-Wesley Publishing Co., </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference-contexts: A functional programming style using a more congenial notation based on Landin's ISWIM [Lan66] is developed in Henderson's book Functional Programming: Application and Implementation [Hen80]. More recent languages have emphasized lazy evaluation. A good example is Miranda <ref> [Tur90a] </ref>, which also has an interesting notion of data abstraction. 4 4.2 Logic Programming Kowalski's paper "Algorithm = Logic + Control" is a good introduction to logic programming in an idealized setting [Kow79].
Reference: [Tur90b] <editor> David A. Turner, editor. </editor> <booktitle> Research Topics in Functional Programming. University of Texas at Austin Year of Programming Series. </booktitle> <publisher> Addison-Wesley Publishing Co., </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference-contexts: Some interesting aspects of Haskell's type system are discussed in [WB89]. Another recent survey is [Bar90]. There are several good books on functional programming, including [Hen87] [BW88] [Hen80] [SF89]. For an introduction that also treats implementation issues, see [Pey87]. The articles in <ref> [Tur90b] </ref> make an interesting introduction to some research topics. John Backus, one of the designers of Fortran, proposed a new language for functional programming without any names called FP in his Turing Award Lecture [Bac78a].
Reference: [TvRvS + 90] <author> Andrew S. Tanenbaum, Robert van Renesse, Hans van Staveren, Gregory J. Sharp, Sape J. Mullender, Jack Jansen, and Guido van Rossum. </author> <title> Experience with the Amoeba Distributed Operating System. </title> <journal> Communications of the ACM, </journal> <volume> 33(12) </volume> <pages> 46-63, </pages> <month> December </month> <year> 1990. </year> <month> 24 </month>
Reference-contexts: Other sources of references are is the collection of reprints [AS91], and the recent book [GR93]. Of particular interest are the languages Argus [LS83] [Wei90] and SR [AOC + 88] [AO93]. The Amoeba distributed operating system also has interesting implications for language designers <ref> [TvRvS + 90] </ref> [TKB92]. An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92]. A classic reference for the operational semantics of concurrent processes is Milner's book on CCS [Mil89b]. Another widely used approach is Hoare's CSP [Hoa78] [BHR84] [LS84] [Hoa85].
Reference: [UR92] <author> Mark Utting and Ken Robinson. </author> <title> Modular Reasoning in an Object-Oriented Refinement Cal--culus. </title> <editor> In R. S. Bird, C. C. Morgan, and J. C. P. Woodcock, editors, </editor> <booktitle> Mathematics of Program Construction, Second International Conference, Oxford, U.K., June/July, volume 669 of Lecture Notes in Computer Science, </booktitle> <pages> pages 344-367. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1992. </year>
Reference-contexts: My own views on the subject of object-oriented specification, verification, and subtyping can be found in [LW90] and [Lea91b]. For a contrast, see also [BW90b] [Ame87] [AvdL90] [Mey88] [MOM90] [Coo92] <ref> [UR92] </ref> [LW93a] [LW93b]. The concept of delegation is explored in [Lie86], in Actra [LTP86] [LaL89], and in Ungar's language "Self" [US87]. 5 The contrast between message passing and other kinds of polymorphism is one of binding time. Some relevant semantic models are discussed in [Mit90a] and [CHC90].
Reference: [US87] <author> David Ungar and Randall B. Smith. </author> <title> Self: The Power of Simplicity. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 22(12) </volume> <pages> 227-241, </pages> <month> December </month> <year> 1987. </year> <booktitle> OOPSLA '87 Conference Proceedings, </booktitle> <editor> Norman Meyrowitz (editor), </editor> <address> October 1987, Orlando, Florida. </address>
Reference-contexts: For a contrast, see also [BW90b] [Ame87] [AvdL90] [Mey88] [MOM90] [Coo92] [UR92] [LW93a] [LW93b]. The concept of delegation is explored in [Lie86], in Actra [LTP86] [LaL89], and in Ungar's language "Self" <ref> [US87] </ref>. 5 The contrast between message passing and other kinds of polymorphism is one of binding time. Some relevant semantic models are discussed in [Mit90a] and [CHC90].
Reference: [vL90] <editor> Jan van Leeuwen. </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Models and Semantics. </booktitle> <publisher> The MIT Press, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference: [vWMP + 77] <author> A. van Wijngaarden, B. J. Mailloux, J. E. L. Peck, C. H. Koster, M. Sintzoff, C. H. Lindsey, L. G. L. T. Meertens, and R. G. Fisker. </author> <title> Revised Report on the Algorithmic Language ALGOL 68. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 12(5) </volume> <pages> 1-70, </pages> <year> 1977. </year> <note> This has also been published by Springer-Verlag, </note> <author> New York, N. </author> <title> Y., </title> <journal> and in Acta Informatica, </journal> <volume> volume 5, </volume> <pages> pages 1-236 (1975). </pages>
Reference-contexts: The language design is fascinating and bristles with examples of orthogonality (one of many terms coined in the Algol 68 design). The revised report is a forbidding document, which has an innovative formal mechanism for defining the language's semantics <ref> [vWMP + 77] </ref>. Because the revised report is difficult to follow, Tanenbaum's tutorial is probably a better place to start [Tan76]. Those seriously interested in Algol 68 will want to consult [LvdM77]. 5.4 C A popular descendent of Algol 68 is the lower-level language C [KR78].
Reference: [Wal91] <author> R. F. C. </author> <title> Walters. </title> <booktitle> Categories and Computer Science, volume 28 of Cambridge Computer Science Texts. </booktitle> <publisher> Cambridge University Press, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference: [Was80] <author> Anthony I. Wasserman. </author> <title> TUTORIAL Programming Language Design. </title> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> Calif., </address> <year> 1980. </year> <booktitle> Initally presented at Compsac80, The IEEE Computer Society's Fourth International Computer Software & Applications Conference, </booktitle> <month> October 27-31, </month> <year> 1980. </year> <note> The IEEE catalog number is EHO 164-4. </note>
Reference: [Wat86] <author> D. A. Watt. </author> <title> Executable Denotational Semantics. </title> <journal> Software: Practice and Experience, </journal> <volume> 16(1) </volume> <pages> 13-43, </pages> <year> 1986. </year>
Reference: [Wat90] <author> David A. Watt. </author> <title> Programming Language Concepts and Paradigms. </title> <publisher> Prentice Hall International Series in Computer Science. Prentice-Hall, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference: [Wat91] <author> David A. Watt. </author> <title> Programming Language Syntax and Semantics. </title> <publisher> Prentice Hall International Series in Computer Science. Prentice-Hall, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference: [WB89] <author> Philip Wadler and Stephen Blott. </author> <title> How to make ad-hoc Polymorphism less ad hoc. </title> <booktitle> In Conference Record of the Sixteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> Austin, Texas, </address> <pages> pages 60-76. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1989. </year>
Reference-contexts: Some interesting aspects of Haskell's type system are discussed in <ref> [WB89] </ref>. Another recent survey is [Bar90]. There are several good books on functional programming, including [Hen87] [BW88] [Hen80] [SF89]. For an introduction that also treats implementation issues, see [Pey87]. The articles in [Tur90b] make an interesting introduction to some research topics.
Reference: [WBJ90] <author> Rebecca J. Wirfs-Brock and Ralph E. Johnson. </author> <title> Surveying Current Research in Object-Oriented Design. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 105-124, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: A graduate-level introduction is [BGHS91]. Descriptions of object-oriented design methods are found in [Boo91] [WBWW90] [dCLF92] [dCF92] [dCLF93]. Both [Boo91] and [dCLF93] have many recent references. A treatment of object-oriented design that focuses more on C++ is found in [Mul89]. See also the survey by <ref> [WBJ90] </ref>. A collection of papers is found in [Pet87]. More recent collections of edited research papers are [SW87] [KL89]. The major annual conferences on object-oriented programming are the European Conference on Object-Oriented Programming (ECOOP) and Object-Oriented Programming Systems, Languages and Applications (OOPSLA).
Reference: [WBWW90] <author> Rebecca Wirfs-Brock, Brian Wilkerson, and Lauren Wiener. </author> <title> Designing Object-Oriented Software. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ 07632, </address> <year> 1990. </year>
Reference-contexts: Meyer's book on Eiffel also has more technical meat [Mey88], as well as a focus on software engineering concerns. Another fairly complete treatment is given in Goldberg and Robson's book on Smalltalk-80 [GR83]. A graduate-level introduction is [BGHS91]. Descriptions of object-oriented design methods are found in [Boo91] <ref> [WBWW90] </ref> [dCLF92] [dCF92] [dCLF93]. Both [Boo91] and [dCLF93] have many recent references. A treatment of object-oriented design that focuses more on C++ is found in [Mul89]. See also the survey by [WBJ90]. A collection of papers is found in [Pet87]. More recent collections of edited research papers are [SW87] [KL89].
Reference: [Weg74] <author> Ben Wegbreit. </author> <title> The Treatment of Data Types in EL1. </title> <journal> Communications of the ACM, </journal> <volume> 17(5) </volume> <pages> 251-264, </pages> <month> May </month> <year> 1974. </year>
Reference: [Wei90] <author> William E. Weihl. </author> <title> Linguistic Support for Atomic Data Types. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(2) </volume> <pages> 178-202, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: A survey appears in [BST89], which can be consulted for other references. A recent survey, with a focus on object-orientation is [CC91]. Other sources of references are is the collection of reprints [AS91], and the recent book [GR93]. Of particular interest are the languages Argus [LS83] <ref> [Wei90] </ref> and SR [AOC + 88] [AO93]. The Amoeba distributed operating system also has interesting implications for language designers [TvRvS + 90] [TKB92]. An older but still heavily used approach to the semantics of concurrent processes is Petri nets [Pet77] [PC92].
Reference: [Wex78] <editor> Richard L. Wexelblat, editor. </editor> <booktitle> Preprints | History of Programming Languages Conference, </booktitle> <address> Los Angeles, California. </address> <publisher> ACM, </publisher> <month> June </month> <year> 1978. </year> <journal> ACM SIGPLAN Notices, </journal> <volume> Volume 13, Number 8, </volume> <month> August </month> <year> 1978. </year>
Reference-contexts: While the languages discussed below are often obscure, they demonstrate interesting issues in language design. Those interested in history for its own sake, or in delving further into early languages, should look at the proceedings of the two History of Programming Languages Conferences <ref> [Wex78] </ref> [Wex93]. The first conference covers the earliest languages, including COBOL, BASIC, and many others not discussed below. Many of the more established languages have their definitions standardized. These are often published by the American National Standards Institute (ANSI), the International Standards Organization (ISO), or the IEEE.
Reference: [Wex93] <editor> Richard L. Wexelblat, editor. </editor> <booktitle> ACM SIGPLAN History of Programming Languages Conference (HOPL II), Preprints, </booktitle> <address> Cambridge, MA, USA. </address> <publisher> ACM, </publisher> <month> March </month> <year> 1993. </year> <journal> ACM SIGPLAN Notices, </journal> <volume> Volume 28, Number 3. </volume>
Reference-contexts: While the languages discussed below are often obscure, they demonstrate interesting issues in language design. Those interested in history for its own sake, or in delving further into early languages, should look at the proceedings of the two History of Programming Languages Conferences [Wex78] <ref> [Wex93] </ref>. The first conference covers the earliest languages, including COBOL, BASIC, and many others not discussed below. Many of the more established languages have their definitions standardized. These are often published by the American National Standards Institute (ANSI), the International Standards Organization (ISO), or the IEEE.
Reference: [WH66] <author> N. Wirth and C. A. R. Hoare. </author> <title> A Contribution to the development of ALGOL. </title> <journal> Communications of the ACM, </journal> <volume> 9(6) </volume> <pages> 413-432, </pages> <month> June </month> <year> 1966. </year> <month> 25 </month>
Reference-contexts: The language has recently been standardized, and incorporates several changes from its variant C++ [Str91]. 6 5.5 Algol W, Pascal, Modula-2, and Oberon Wirth and Hoare's language known as Algol W can be thought of as an improved version of Algol 60 <ref> [WH66] </ref>. Wirth's language Pascal [Wir71] [JW74] has been enormously popular, attracting detractors [Hab73] and defenders [LD75]. Pascal is, in part, a response to the complexity of Algol 68. All this attention has provoked Wirth to reassessing Pascal [Wir75] and to the design of Modula-2 [Wir85], and Oberon [Wir88].
Reference: [Win93] <editor> Glynn Winskel. </editor> <booktitle> The Formal Semantics of Programming Languages. Foundations of Computer Science Series. </booktitle> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1993. </year>
Reference: [Wir71] <author> N. Wirth. </author> <title> The Programming Language Pascal. </title> <journal> Acta Informatica, </journal> <volume> 1(1) </volume> <pages> 35-63, </pages> <year> 1971. </year>
Reference-contexts: The language has recently been standardized, and incorporates several changes from its variant C++ [Str91]. 6 5.5 Algol W, Pascal, Modula-2, and Oberon Wirth and Hoare's language known as Algol W can be thought of as an improved version of Algol 60 [WH66]. Wirth's language Pascal <ref> [Wir71] </ref> [JW74] has been enormously popular, attracting detractors [Hab73] and defenders [LD75]. Pascal is, in part, a response to the complexity of Algol 68. All this attention has provoked Wirth to reassessing Pascal [Wir75] and to the design of Modula-2 [Wir85], and Oberon [Wir88].
Reference: [Wir74] <author> Niklaus Wirth. </author> <booktitle> On the Design of Programming Languages. In Information Processing 74, </booktitle> <pages> pages 386-393, </pages> <address> New York, N.Y., 1974. </address> <publisher> North-Holland Publishing Co. </publisher>
Reference: [Wir75] <author> Niklaus Wirth. </author> <title> An Assessment of the Programming Language Pascal. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 192-198, </pages> <month> June </month> <year> 1975. </year>
Reference-contexts: Wirth's language Pascal [Wir71] [JW74] has been enormously popular, attracting detractors [Hab73] and defenders [LD75]. Pascal is, in part, a response to the complexity of Algol 68. All this attention has provoked Wirth to reassessing Pascal <ref> [Wir75] </ref> and to the design of Modula-2 [Wir85], and Oberon [Wir88]. Oberon has object-oriented features, as does the (non-Wirth) language Modula-3 [CDJ + 89] [Nel91]. 5.6 Euclid Euclid is an attempt to improve on Pascal in a different direction [PHL + 77] [LGH + 78].
Reference: [Wir85] <author> Niklaus Wirth. </author> <title> Programming in Modula-2 (3rd corrected edition). </title> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1985. </year>
Reference-contexts: Wirth's language Pascal [Wir71] [JW74] has been enormously popular, attracting detractors [Hab73] and defenders [LD75]. Pascal is, in part, a response to the complexity of Algol 68. All this attention has provoked Wirth to reassessing Pascal [Wir75] and to the design of Modula-2 <ref> [Wir85] </ref>, and Oberon [Wir88]. Oberon has object-oriented features, as does the (non-Wirth) language Modula-3 [CDJ + 89] [Nel91]. 5.6 Euclid Euclid is an attempt to improve on Pascal in a different direction [PHL + 77] [LGH + 78].
Reference: [Wir88] <author> N. Wirth. </author> <title> Type Extensions. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(2) </volume> <pages> 204-214, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: Wirth's language Pascal [Wir71] [JW74] has been enormously popular, attracting detractors [Hab73] and defenders [LD75]. Pascal is, in part, a response to the complexity of Algol 68. All this attention has provoked Wirth to reassessing Pascal [Wir75] and to the design of Modula-2 [Wir85], and Oberon <ref> [Wir88] </ref>. Oberon has object-oriented features, as does the (non-Wirth) language Modula-3 [CDJ + 89] [Nel91]. 5.6 Euclid Euclid is an attempt to improve on Pascal in a different direction [PHL + 77] [LGH + 78].
Reference: [WKH92] <author> Barbara B. Wyatt, Krishna Kavi, and Steve Hufnagel. </author> <title> Parallelism in Object-Oriented Languages: A Survey. </title> <journal> IEEE Software, </journal> <volume> 9(6) </volume> <pages> 56-66, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: An older, but still good, survey on parallel programming language issues is [AS83]. A more recent surveys that focuses on the Linda model appears in [CG89]. (See [BZ91] [BZ92] [GC92] for more recent work on Linda.) A recent survey that focuses on object-oriented aspects is <ref> [WKH92] </ref>. A survey that focuses on distributed programs is [And91b]. Andrew's textbook on concurrent programming languages also contains material on program verification as well as some survey material [And91a]. Data flow languages are surveyed in [Ack82]. A recent introduction to concurrent programming techniques is [Sno92].
Reference: [WM80] <author> Daniel Weinreb and David Moon. </author> <title> Flavors: Message Passing in the Lisp Machine. </title> <type> AI Memo 602, </type> <institution> Massachusetts Institute of Technology, Artificial Intelligence Laboratory, </institution> <month> November </month> <year> 1980. </year> <month> 26 </month>
Reference-contexts: Scheme was the first dialect of Lisp to emphasize static scoping [SS78b] [RCA + 86] [ASS85]. See also the references in the Revised 4 report [CE91]. ZetaLisp (as found on Symbolics Lisp Machines) includes the influential Flavors mechanism for object-oriented programming <ref> [WM80] </ref> [SMW84] [Sym84]. The Flavors mechanism evolved into the Common Lisp Object System [Kee89] [Ste90] [Pae93].
References-found: 307

