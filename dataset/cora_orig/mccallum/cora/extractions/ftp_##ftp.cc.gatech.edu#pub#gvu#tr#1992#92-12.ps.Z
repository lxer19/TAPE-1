URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1992/92-12.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/reports/1992/
Root-URL: 
Email: E-mail: fshilling, staskog@cc.gatech.edu  
Title: Using Animation to Design, Document and Trace Object-Oriented Systems  
Author: John J. Shilling John T. Stasko 
Address: Atlanta, GA 30332-0280  
Affiliation: Graphics, Visualization, and Usability Center College of Computing Georgia Institute of Technology  
Pubnum: Technical Report GIT-GVU-92-12  
Abstract: Current diagramming techniques for the development and documentation of object-oriented designs largely emphasize capturing relationships among classes. Such techniques cannot capture full designs because the static nature of class relationships makes them inadequate for describing the dynamics of object collaboration. Other techniques attempt to diagram dynamic behavior but are limited by their media to producing essentially passive description of dynamic operations. What is still needed is a technique that models message ordering, changing visibility and temporal object lifetimes in a manner that is concise and immediate. We have developed an approach in which developers use animation to develop and capture object-oriented designs. This allows developers to design object-oriented scenarios in the way that they visualize them: by animating the actions of the objects in the scenario. The same animation then acts as the documentation for the design. Its playback makes immediately evident the temporal relationship of object messages, object creation, object destruction, and changing object visibility. Our technique is supported as part of a suite of object-oriented development tools we call GROOVE. 
Abstract-found: 1
Intro-found: 1
Reference: [BC89] <author> Kent Beck and Ward Cunningham. </author> <title> A laboratory for teaching object-oriented thinking. </title> <booktitle> In Proceedings of the ACM OOPSLA '89 Conference, </booktitle> <pages> pages 1-6, </pages> <address> New Orleans, LA, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: Objects and message ordering are identified but the dynamics of object lifetimes and visibility are not. An interesting design technique from our point of view is the use of CRC cards as described by Beck and Cunningham <ref> [BC89] </ref>. In this work designers are encouraged to physically animate a design as they narrate it: We encourage learners to pick up the card whose role they are assuming while "executing" a scenario.
Reference: [BH90] <author> Heinz-Dieter Bocker and Jurgen Herczeg. </author> <title> What tracers are made of. </title> <booktitle> In Proceedings of the ECOOP/OOPSLA '90 Conference, </booktitle> <pages> pages 89-99, </pages> <address> Ottawa, Ontario, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: The tool's displays mainly involved graph diagrams consisting of nodes and arcs. Animation, however, was restricted to simply highlighting and annotating graph nodes. Bocker and Herczeg provide more extensive animation of Smalltalk-80 traces with the Track system <ref> [BH90] </ref>. Track allows programmers to visually specify message tracing as a debugging aid. At execution time, the system presents an animation of the messages sent between objects.
Reference: [Boo91] <author> Grady Booch. </author> <title> Object Oriented Design with Applications. </title> <publisher> Benjamin Cummings, </publisher> <year> 1991. </year>
Reference-contexts: This approach clearly fails to provide the clarity and conciseness required of good documentation. Booch <ref> [Boo91] </ref> combines object diagrams without explicit ordering with timing diagrams which show the ordering of messages in a diagram. Several timing diagrams may be associated with a single object diagram to show how different scenarios may unfold based on the same underlying object structure.
Reference: [CB86] <author> Ward Cunningham and Kent Beck. </author> <title> A diagram for object-oriented programs. </title> <booktitle> In Proceedings of the ACM OOPSLA '86 Conference, </booktitle> <pages> pages 361-367, </pages> <address> Portland, OR, </address> <month> September </month> <year> 1986. </year>
Reference-contexts: This difference in behavior would be difficult to notice in a debugger trace but the different visual pattern will be immediately noticeable. 6 Further Related Work Cunningham and Beck created a system for diagraming object-oriented computations, primarily displaying message passing and inheritance among Smalltalk classes <ref> [CB86] </ref>. They used a box (class) and arc (message) notation in order to help teach object-oriented programming. Although they briefly experimented with adding dynamic behavior, their system displayed static imagery without timing or sequencing information.
Reference: [CHB92] <author> Derek Coleman, Fiona Hayes, and Stephen Bear. </author> <title> Introducing objectcharts or how to use statecharts in object-oriented design. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(1) </volume> <pages> 9-18, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Rumbaugh uses state diagrams (also called statecharts [Har87]) as part of dynamic models for describing the states that an object instance can enter and how the states change in response to events. The objectcharts of Coleman, Hayes, and Bear <ref> [CHB92] </ref> extend the notion of statecharts to include the effect of transitions on attributes and to take into consideration messages and subtyping.
Reference: [Har87] <author> David Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8 </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: They used a box (class) and arc (message) notation in order to help teach object-oriented programming. Although they briefly experimented with adding dynamic behavior, their system displayed static imagery without timing or sequencing information. Rumbaugh uses state diagrams (also called statecharts <ref> [Har87] </ref>) as part of dynamic models for describing the states that an object instance can enter and how the states change in response to events.
Reference: [HS91] <author> Paul Harmon and Brian Sawyer. ObjectCraft: </author> <title> A Graphical Programming Tool for Object-Oriented Applications. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1991. </year>
Reference-contexts: At execution time, the system presents an animation of the messages sent between objects. These systems give animation of existing programs, but they fail to give an emphasis to the proactive use of animation in the design of object-oriented systems. The commercial system ObjectCraft <ref> [HS91] </ref> supports graphical design of object-oriented programs with post-design code generation.
Reference: [KG88] <author> Michael F. Kleyn and Paul C. Gingrich. </author> <title> GraphTrace understanding object-oriented systems using concurrently animated views. </title> <booktitle> In Proceedings of the ACM OOPSLA '88 Conference, </booktitle> <pages> pages 191-205, </pages> <address> San Diego, CA, </address> <month> September </month> <year> 1988. </year>
Reference-contexts: We also feel the techniques will be enhanced by the ability to animate the state changes that can occur within the operation of a system. Kleyn and Gingrich sought to go beyond static displays by examining the dynamic behavior of object-oriented systems written in a Common Lisp-style language <ref> [KG88] </ref>. Their GraphTrace tool illustrated structural and behavioral views of object-oriented systems by recording message traffic for subsequent replay. The tool's displays mainly involved graph diagrams consisting of nodes and arcs. Animation, however, was restricted to simply highlighting and annotating graph nodes.
Reference: [RBP + 91] <author> James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy, and William Lorensen. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference: [Sta90] <author> John T. Stasko. </author> <title> The Path-Transition Paradigm: A practical methodology for adding animation to program interfaces. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 1(3) </volume> <pages> 213-236, </pages> <month> September </month> <year> 1990. </year> <month> 15 </month>
Reference-contexts: An overview of GROOVE's system configuration is shown in Figure 8. We implement the graphics and animation portion of GROOVE using a derivation of the path-transition animation paradigm <ref> [Sta90] </ref>. The paradigm allows us to query image positions and construct paths between any pair of these positions.
References-found: 10

