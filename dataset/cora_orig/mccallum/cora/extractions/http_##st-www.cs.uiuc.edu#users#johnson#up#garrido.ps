URL: http://st-www.cs.uiuc.edu/users/johnson/up/garrido.ps
Refering-URL: http://st-www.cs.uiuc.edu/users/johnson/up/
Root-URL: http://www.cs.uiuc.edu
Email: Email: [garrido,gustavo]@sol.info.unlp.edu.ar  
Title: Using Patterns to Define a Frameworks Architecture  
Author: Alejandra Garrido* and Gustavo Rossi** LIFIA. Laboratorio de Investigacin Formacin en Informtica Avanzada. 
Address: C.C. 11, (1900) La Plata, Buenos Aires, Argentina.  CONICET, Argentina  
Affiliation: Dto. de Informtica, Fac. Cs. Exactas, Universidad Nacional de La Plata.  also at Dto de Informtica, PUC-RIO, Brazil and  
Abstract: The state-of-the-art solution for building complex and reusable architectures in the objectoriented field, is the construction of frameworks modeling an specific domain. However, the design of an application framework is difficult because many iterations are needed to obtain an abstract representation of the outstanding features of most applications in that domain. This paper addresses our experience on the design of an objectoriented framework that allows extending with hypermedia functionality any objectoriented application. We show the basis for our architectural design decisions and how design patterns helped in that process. We first motivate our work, explaining the reason of building a framework for hypermedia; we briefly discuss its architecture and finally explain how we used, adapted and extended some well-known design patterns during the design process. 
Abstract-found: 1
Intro-found: 1
Reference: [Balasubramanian94] <author> V. Balasubramanian, M. Turoff. </author> <title> Incorporating Hypertext Functionality into Software Systems. Workshop on Incorporating Hypertext Functionality into Software Systems. </title> <publisher> ACM, </publisher> <address> ECHT'94, Edinburgh, </address> <month> September </month> <year> 1994 </year> <month> [Bieber95]Bieber, </month> <title> M. On integrating hypermedia into decision support and other information systems. </title> <booktitle> Decision Support Systems 14 (1995), </booktitle> <pages> 251-267. </pages>
Reference-contexts: Introduction Hypermedia technology has been growing fast in some areas such as distributed repositories (like for example the WWW) and collaborative work <ref> [Balasubramanian94] </ref>. Furthermore, hypermedia features are being recognized as helpful and necessary, even though the user may not be fully aware of its presence [Oinas95].
Reference: [Davis92] <author> H. Davis, W. Hall, I. Heath, G. Hill & R. Wilkins. </author> <title> "Towards an Integrated Environment with Open Hypermedia Systems". </title> <booktitle> Proceedings of the ACM Conference on Hypertext, ECHT' 92. </booktitle> <address> Milan, Italy, </address> <month> December </month> <year> 1992, </year> <pages> pp 181-190. </pages> <note> ACM. 1992. </note> <author> [Gamma95]Gamma, E., Helm, R., Johnson, R. and Vlissides, J. </author> <title> Design patterns: elements of reusable objectoriented software. </title> <publisher> Addison Wesley, </publisher> <address> Reading, Mass., </address> <year> 1995. </year>
Reference-contexts: Furthermore, hypermedia features are being recognized as helpful and necessary, even though the user may not be fully aware of its presence [Oinas95]. For example, help systems in commercial applications, e.g., Microsoft's Windows standard Help System, give the user the chance of exploring an information base, while Microcosm <ref> [Davis92] </ref> allows the definition of links between different third-party applications. Key features that characterize hypermedia applications include facilities as: forward and backward navigation, annotation, map browsing, history maintenance, access structures to a navigational subspace as indexes or guided tours, contextsensitive access, bookmark facilities, etc [Bieber95].
Reference: [Garzotto91] <author> F.Garzotto, P. Paolini, D. Schwabe. </author> <title> "HDM - A Model for the Design of Hypertext Applications". </title> <booktitle> Hypertext'91 Proceedings. </booktitle>
Reference-contexts: For each meaningful relationship in the Object Model we will create links connecting the corresponding nodes. Indexes and other access structures <ref> [Garzotto91] </ref> can be defined by selecting objects by attributes, thus providing faster access to nodes. Each node-view will be in turn connected to one or more interface objects.
Reference: [Garzotto94] <author> Garzotto, F., Mainetti, L. and Paolini, P. </author> <title> Adding Multimedia Collections to the Dexter Model. </title> <booktitle> In: Proceedings of the European Conference on Hypermedia Technology, </booktitle> <address> ECHT'94 (Edinburgh, Scotland, September 18-23). New York: </address> <publisher> ACM Press, </publisher> <year> 1994, </year> <pages> 70-80. </pages> <editor> [Oinas95]Oinas-Kukkonen, H. </editor> <title> Developing Hypermedia Systems - The Hypertext Functionality approach. </title> <booktitle> In: Proccedings of the Basque Intern. Workshop on Information Technology, </booktitle> <address> BIWIT95 (San Sebastian, Spain, July 1995). </address> <publisher> Los Alamitos, North Carolina: IEEE Society Press, </publisher> <year> 1995, </year> <pages> 2-8. </pages>
Reference-contexts: There is consequently a separate hierarchy of AccessStructures (not defined in this paper for lack of space). * A CollectionNode may be defined in different ways <ref> [Garzotto94] </ref> and so the Strategy Pattern [Gamma95] was used to make its creation flexible. Extending an existing interface with hypermedia functionality: Pattern Decorator Context of usage Sometimes we have applications in which it is difficult or even unfeasible to modify parts of them such as their user interfaces .
Reference: [Rossi96] <author> Rossi, G., Garrido, A. and Carvalho, S. </author> <title> Design Patterns for ObjectOriented Hypermedia Applications. Vlissides, </title> <editor> Coplien and Kerth Eds. </editor> <booktitle> Pattern Languages of Program Design 2. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1996, </year> <pages> pp. 177-191. </pages>
Reference-contexts: StaticEndpointLink, ComputedEndpointLink, DanglingEndpointLink) is not a good solution because Link is subclassified for other criteria. Solution: Use the Navigational Strategy design pattern <ref> [Rossi96] </ref> as follows : * A separate hierarchy of EndpointSolver is defined, and Link refers to it. * There is a subclass of EndpointSolver dealing with FixedEndpoints, another for ComputedEndpoints, DanglingEndpoints and EndpointFactory. * An instance of EndpointFactory maintains the nodeClass for nodes that it is supposed to create. <p> Even when the instantiation of a pattern required major implementation decisions we could always recast the conceptual pattern intent to the original one. We have also discovered some new patterns like Navigation Strategy and Navigation Observer <ref> [Rossi96] </ref> as variations of their counterparts in [Gamma95] for the hypermedia field. The use of patterns has also helped us to make the framework evolve from a white-box to a black-box one.
Reference: [Schwabe96] <author> Schwabe, D., Rossi, G. and Barbosa, S. </author> <title> Systematic Hypermedia Design with OOHDM. </title> <booktitle> Proceedings of the ACM International Conference on Hypertext, </booktitle> <address> Hypertext'96 , (Washington, </address> <month> March </month> <year> 1996). </year>
Reference-contexts: be used when structuring is needed beyond pure navigation, reflecting a components hierarchy previously defined by the underlying model. * CollectionNodes are created when a subset of related nodes is to be defined, as a way to organize the navigational subspace. * CollectionNode may be used to implement Navigational Contexts <ref> [Schwabe96] </ref>. Implications for other patterns usage * As we said above the subclassification of ObjectNodes provoked a subclassification of NodeClass. * The way CollectionNodes will be accessed is defined separately, and so the same collectionNode may be accessed in different ways.
Reference: [Woolf95] <author> B. Woolf. </author> <title> Understanding and Using the ValueModel Framework in VisualWorks Smalltalk. Chapter 25 of Pattern Languages of Program Design I . Addison-Wesley, </title> <year> 1995. </year>
Reference-contexts: Then ObjectNodes become dependants of the associated objects by way of the data slots. The latter are in fact implemented as Aspect Adaptors <ref> [Woolf95] </ref> with the adition of anchors for links to be inserted over the interface of that data. * ObjectNodes in a hypermedia network may observe more than one object at a time: for example suppose an object standing for a picture. <p> In this way Nodes may observe many related objects by defining the way they are associated. * HyperNodes are also aggregations of NodeViews, but are not associated with objects. The data they display (as a presentation or multimedia page) is stored in Value Holders <ref> [Woolf95] </ref> or Proxies [Gamma94] if the case of multimedia data stored in files. * Links can also map associative objects of the application, i.e., objects that express relationships among others. These are called ObjectLinks and they become dependants of that objects.
Reference: [Woolf96] <author> B. Woolf and R. Johnson. </author> <title> The Type Object Pattern. </title> <note> Submitted to PLoP96. </note>
Reference-contexts: Thus, each node is an aggregation of node views. Solution: The Type-Object Pattern <ref> [Woolf96] </ref> was used in the following way (structure depicted in Fig. 3): * We defined the class NodeClass which instances are like classes for ObjectNode instances. * As a node is an aggregation of views, it was necessary to apply the same pattern nested again, so each NodeClass is an aggregation
References-found: 8

