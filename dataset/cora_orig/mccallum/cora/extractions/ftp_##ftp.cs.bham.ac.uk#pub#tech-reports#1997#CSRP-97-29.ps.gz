URL: ftp://ftp.cs.bham.ac.uk/pub/tech-reports/1997/CSRP-97-29.ps.gz
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fW.B.Langdon,R.Polig@cs.bham.ac.uk  
Phone: Tel: +44 (0) 121 414 4791, Fax: +44 (0) 121 414 4281  
Title: Genetic Programming Bloat with Dynamic Fitness  
Author: W. B. Langdon and R. Poli 
Web: http://www.cs.bham.ac.uk/~wbl, ~rmp  
Address: B15 2TT, UK  
Affiliation: School of Computer Science, University of Birmingham, Birmingham  
Date: 16-17 April, 1998  
Note: Submitted to EuroGP-98, Paris,  
Abstract: Technical Report: CSRP-97-29, 3 December 1997 Abstract In artificial evolution individuals which perform as their parents are usually rewarded identically to their parents. We note that Nature is more dynamic and there may be a penalty to pay for doing the same thing as your parents. We report two sets of experiments where static fitness functions are firstly augmented by a penalty for unchanged offspring and secondly the static fitness case is replaced by randomly generated dynamic test cases. We conclude genetic programming, when evolving artificial ant control programs, is surprisingly little effected by large penalties and program growth is observed in all our experiments. 
Abstract-found: 1
Intro-found: 1
Reference: [Ang94] <author> Peter John Angeline. </author> <title> Genetic programming and emergent intelligence. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 4, </booktitle> <pages> pages 75-98. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year> <month> 10 </month>
Reference-contexts: 1 Introduction The tendency for programs in genetic programming (GP) populations to grow in length has been widely reported <ref> [Tac93, Tac94, Ang94, Tac95, Lan95, NB95, SFD96] </ref>. In our previous work on this phenomenon (referred to as "bloat") [LP97, Lan97a, Lan97b] we have investigated the effect of commonly used fitness functions with a variety of genetic algorithm, population based and non-population based search techniques.
Reference: [Koz92] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1992. </year>
Reference-contexts: We continue to use the well known genetic programming bench mark problem of evolving control programs to guide an artificial ant along an intermediate trail of food pellets. The first experiments use the well known Santa Fe trail <ref> [Koz92] </ref>, while this is replaced in the second set of experiments by randomly generated trails which are changed each generation (i.e. the population "sees" each trail only once). In these experiments the effects of changing the fitness function are studied, all the other parameters are the same in each experiment. <p> Our results are given in Sects. 4 and 5, which are followed by our conclusions in Sect. 6. 2 The Artificial Ant Problem The artificial ant problem is described in <ref> [Koz92, pages 147-155] </ref>. It is a well studied problem and was chosen as it has a simple fitness function. Briefly the problem is to devise a program which can successfully navigate an artificial ant along a twisting trail on a square 32fi32 toroidal grid. <p> The details are given in Table 1, parameters not shown are as [Koz94, page 655]. Note in these experiments we allow the evolved programs to be far bigger than required to solve the problem. For example the 100% correct solution given in <ref> [Koz92, page 154] </ref> takes about 543 time steps to traverse the Santa Fe trail but has a length of only 18 nodes and this is not the most compact solution possible. 3 Fitness Functions 3.1 Santa Fe trail The artificial ant must follow the "Santa Fe trail", which consists of 144 <p> Fig. 17. The random trails seem to be a harder problem than the Santa Fe trail, only three runs evolved programs which could follow all 50 trails. Another aspect of this increased difficulty is the evolved solution given in <ref> [Koz92, page 154] </ref> to the Santa Fe trail scores less than half marks on the random trails. In contrast each of the first programs found which could pass all 50 random trails can also follow the Santa Fe trail.
Reference: [Koz94] <author> John R. Koza. </author> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <publisher> MIT Press, </publisher> <address> Cambridge Massachusetts, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The details are given in Table 1, parameters not shown are as <ref> [Koz94, page 655] </ref>. Note in these experiments we allow the evolved programs to be far bigger than required to solve the problem.
Reference: [Lan95] <author> W. B. Langdon. </author> <title> Evolving data structures using genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 295-302, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: 1 Introduction The tendency for programs in genetic programming (GP) populations to grow in length has been widely reported <ref> [Tac93, Tac94, Ang94, Tac95, Lan95, NB95, SFD96] </ref>. In our previous work on this phenomenon (referred to as "bloat") [LP97, Lan97a, Lan97b] we have investigated the effect of commonly used fitness functions with a variety of genetic algorithm, population based and non-population based search techniques.
Reference: [Lan96] <author> W. B. Langdon. </author> <title> Data Structures and Genetic Programming. </title> <type> PhD thesis, </type> <institution> University College, </institution> <address> London, </address> <month> 27 September </month> <year> 1996. </year>
Reference-contexts: This would appear to require constant innovation on the part of the population. Current GP can "run out of steam" so that GP populations stop producing improved solutions <ref> [Lan96, pages 216-219] </ref>. Therefore techniques which encourage constant innovation are potentially very interesting. Acknowledgements This research is supported by the Defence Research Agency in Malvern and the British Council.
Reference: [Lan97a] <author> W. B. Langdon. </author> <title> Fitness causes bloat in variable size representations. </title> <type> Technical Report CSRP-97-14, </type> <institution> University of Birmingham, School of Computer Science, </institution> <month> 14 May </month> <year> 1997. </year> <title> Position paper at the Workshop on Evolutionary Computation with Variable Size Representation at ICGA-97. </title>
Reference-contexts: 1 Introduction The tendency for programs in genetic programming (GP) populations to grow in length has been widely reported [Tac93, Tac94, Ang94, Tac95, Lan95, NB95, SFD96]. In our previous work on this phenomenon (referred to as "bloat") <ref> [LP97, Lan97a, Lan97b] </ref> we have investigated the effect of commonly used fitness functions with a variety of genetic algorithm, population based and non-population based search techniques.
Reference: [Lan97b] <author> W. B. Langdon. </author> <title> Fitness causes bloat: Simulated annealing, hill climbing and populations. </title> <type> Technical Report CSRP-97-22, </type> <institution> University of Birmingham, School of Computer Science, </institution> <month> 2 September </month> <year> 1997. </year>
Reference-contexts: 1 Introduction The tendency for programs in genetic programming (GP) populations to grow in length has been widely reported [Tac93, Tac94, Ang94, Tac95, Lan95, NB95, SFD96]. In our previous work on this phenomenon (referred to as "bloat") <ref> [LP97, Lan97a, Lan97b] </ref> we have investigated the effect of commonly used fitness functions with a variety of genetic algorithm, population based and non-population based search techniques. <p> These experiments have shown that bloat is not a unique phenomenon to genetic programming and we argue that it is inherent in discrete variable length representations using a simple scalar static fitness function. <ref> [Lan97b] </ref> also contains evidence to suggest that non-performance effecting code (sometimes referred to as "introns") may also be a contributing factor. These explanations stress the role of simple static scalar fitness functions in selecting children which behave in the same way as their parents.
Reference: [LP97] <author> W. B. Langdon and R. Poli. </author> <title> Fitness causes bloat. </title> <editor> In P. K. Chawdhry, R. Roy, and R. K. Pan, editors, </editor> <booktitle> Second On-line World Conference on Soft Computing in Engineering Design and Manufacturing. </booktitle> <publisher> Springer-Verlag London, </publisher> <month> 23-27 June </month> <year> 1997. </year>
Reference-contexts: 1 Introduction The tendency for programs in genetic programming (GP) populations to grow in length has been widely reported [Tac93, Tac94, Ang94, Tac95, Lan95, NB95, SFD96]. In our previous work on this phenomenon (referred to as "bloat") <ref> [LP97, Lan97a, Lan97b] </ref> we have investigated the effect of commonly used fitness functions with a variety of genetic algorithm, population based and non-population based search techniques. <p> Population Size: 500 Max program size: no effective limit Initial population: Created using "ramped half-and-half" with a max depth of 6 Parameters: 90% crossover, 10% reproduction, no mutation Termination: Maximum number of generations G = 50 The evolutionary system we use is identical to <ref> [LP97] </ref> except the limit on the size of programs has been effectively removed by setting it to a very large value. The details are given in Table 1, parameters not shown are as [Koz94, page 655]. <p> genetic operators are unbiased with respect to length, the expected change in mean program length from one generation to the next is given by the covariance between program length and normalised fitness in the previous generation. (Normal GP crossover is unbiased provided size or depth restrictions don't effect the population <ref> [LP97] </ref>). Figure 10 shows in the first few generations there is a strong covariance between length and fitness. We suggest this is because in the initial random populations long programs tend to do better simply because they are more likely to contain useful primitives such as Move.
Reference: [NB95] <author> Peter Nordin and Wolfgang Banzhaf. </author> <title> Complexity compression and evolution. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 310-317, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: 1 Introduction The tendency for programs in genetic programming (GP) populations to grow in length has been widely reported <ref> [Tac93, Tac94, Ang94, Tac95, Lan95, NB95, SFD96] </ref>. In our previous work on this phenomenon (referred to as "bloat") [LP97, Lan97a, Lan97b] we have investigated the effect of commonly used fitness functions with a variety of genetic algorithm, population based and non-population based search techniques.
Reference: [Pri70] <author> George R. Price. </author> <title> Selection and covariance. </title> <journal> Nature, </journal> <volume> 227, August 1 </volume> <pages> 520-521, </pages> <year> 1970. </year>
Reference-contexts: high penalties there is more variation (on average 29.7 different scores acting as first parents to children in the final population of runs with a 100% penalty). 4.1 Correlation of Fitness and Program Size In GP program size is inherited and so we can apply Price's Covariance and Selection Theorem <ref> [Pri70] </ref> to it.
Reference: [SFD96] <author> Terence Soule, James A. Foster, and John Dickinson. </author> <title> Code growth in genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 215-223, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: 1 Introduction The tendency for programs in genetic programming (GP) populations to grow in length has been widely reported <ref> [Tac93, Tac94, Ang94, Tac95, Lan95, NB95, SFD96] </ref>. In our previous work on this phenomenon (referred to as "bloat") [LP97, Lan97a, Lan97b] we have investigated the effect of commonly used fitness functions with a variety of genetic algorithm, population based and non-population based search techniques.
Reference: [Tac93] <author> Walter Alden Tackett. </author> <title> Genetic programming for feature discovery and image discrimination. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 303-309, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: 1 Introduction The tendency for programs in genetic programming (GP) populations to grow in length has been widely reported <ref> [Tac93, Tac94, Ang94, Tac95, Lan95, NB95, SFD96] </ref>. In our previous work on this phenomenon (referred to as "bloat") [LP97, Lan97a, Lan97b] we have investigated the effect of commonly used fitness functions with a variety of genetic algorithm, population based and non-population based search techniques.
Reference: [Tac94] <author> Walter Alden Tackett. </author> <title> Recombination, Selection, and the Genetic Construction of Computer Programs. </title> <type> PhD thesis, </type> <institution> University of Southern California, Department of Electrical Engineering Systems, </institution> <year> 1994. </year>
Reference-contexts: 1 Introduction The tendency for programs in genetic programming (GP) populations to grow in length has been widely reported <ref> [Tac93, Tac94, Ang94, Tac95, Lan95, NB95, SFD96] </ref>. In our previous work on this phenomenon (referred to as "bloat") [LP97, Lan97a, Lan97b] we have investigated the effect of commonly used fitness functions with a variety of genetic algorithm, population based and non-population based search techniques.
Reference: [Tac95] <author> Walter Alden Tackett. </author> <title> Greedy recombination and genetic search on the space of computer programs. </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 271-297, </pages> <address> Estes Park, Colorado, USA, 31 July-2 August 1994 1995. </address> <publisher> Morgan Kaufmann. </publisher> <pages> 11 </pages>
Reference-contexts: 1 Introduction The tendency for programs in genetic programming (GP) populations to grow in length has been widely reported <ref> [Tac93, Tac94, Ang94, Tac95, Lan95, NB95, SFD96] </ref>. In our previous work on this phenomenon (referred to as "bloat") [LP97, Lan97a, Lan97b] we have investigated the effect of commonly used fitness functions with a variety of genetic algorithm, population based and non-population based search techniques.
References-found: 14

