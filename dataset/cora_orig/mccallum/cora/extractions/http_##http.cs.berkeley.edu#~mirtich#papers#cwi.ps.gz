URL: http://http.cs.berkeley.edu/~mirtich/papers/cwi.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~mirtich/impulse.html
Root-URL: 
Title: Hybrid Simulation: Combining Constraints and Impulses  
Author: Brian Mirtich 
Abstract: Impulse-based simulation has been shown to be a useful paradigm for rigid body simulation [12, 11], especially for systems which are collision intensive, or undergo many changes in contact configuration. In this paper we briefly describe the simulator Impulse, and report some recent results in the domain of part feeding. Since the impulse- and constraint-based approaches work best for orthogonal situations, it is advantageous to use both methods simultaneously. After describing the range of impulse- to constraint-based contact interaction, we examine how the impulsive collision resolution may be extended to constrained systems. We also discuss some important open problems related to developing an efficient simulator that uses both contact interaction paradigms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David Baraff. </author> <title> Issues in computing contact forces for non-penetrating rigid bodies. </title> <journal> Algorithmica, </journal> <volume> 10 </volume> <pages> 292-352, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Many simulators for simple physical systems employ constraint-based approaches <ref> [1, 3, 5, 15] </ref>. Constraints are used to describe the interactions between objects, which often occur only through physical contact.
Reference: [2] <author> David Baraff. </author> <title> Fast contact force compuation for nonpenetrating rigid bodies. In SIGGRAPH. </title> <publisher> ACM Press, </publisher> <year> 1994. </year>
Reference-contexts: Nonetheless, there are usually relatively large ranges of motion over which the contact configuration does not change, and constraint-based simulation works well. Baraff's blockfeeder and double-action jack are excellent examples of constrained simulation of 2D mechanisms <ref> [2] </ref>. On the other end of the spectrum are part feeders and similar systems. For these collision intensive systems, impulse-based dynamics is a natural choice for simulation. Moving to the right, we encounter billiards and bowling.
Reference: [3] <author> Ronen Barzel and Alan H. Barr. </author> <title> A modeling system based on dynamic constraints. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 179-188, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Many simulators for simple physical systems employ constraint-based approaches <ref> [1, 3, 5, 15] </ref>. Constraints are used to describe the interactions between objects, which often occur only through physical contact.
Reference: [4] <author> Brian Carlisle, Ken Goldberg, Anil Rao, and Jeff Wiegley. </author> <title> A pivoting gripper for feeding industrial parts. </title> <booktitle> In International Conference on Robotics and Automation. IEEE, </booktitle> <year> 1994. </year>
Reference-contexts: A more recent "real world" problem solved with Impulse was the estimation of the stable pose distribution for a small part dropped onto a flat surface. This is an important problem in designing production lines and parts for automated assembly <ref> [4] </ref>. Such knowledge is useful in estimating feeder throughput as well as in modifying part designs to optimize assembly speed or success rates. For the experiment, we used the small, plastic test part shown in figure 4.
Reference: [5] <author> James F. Cremer and A. James Stewart. </author> <title> The architecture of newton, a general-purpose dynamics simulator. </title> <booktitle> In International Conference on Robotics and Automation, </booktitle> <pages> pages 1806-1811. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Many simulators for simple physical systems employ constraint-based approaches <ref> [1, 3, 5, 15] </ref>. Constraints are used to describe the interactions between objects, which often occur only through physical contact.
Reference: [6] <author> R. Featherstone. </author> <title> The calculation of robot dynamics using articulated-body inertias. </title> <journal> International Journal of Robotics Research, </journal> <volume> 2(1) </volume> <pages> 13-30, </pages> <year> 1983. </year>
Reference-contexts: The motion of these systems of rigid links is governed by explicit, well-understood, and permanent constraints, such as those imposed by revolute or prismatic joints. Computing the forward dynamics of these systems is a classical problem of robotics, and a variety of methods exist for doing so <ref> [6, 9] </ref>. Note that the interaction between the manipulator and the environment (typically occurring at the end effector) is not so clearly a constraint-based interaction, since often this contact is transient or not as accurately modeled by a hard constraint.
Reference: [7] <author> James K. Hahn. </author> <title> Realistic animation of rigid bodies. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 299-308, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: More details on the impulse-based approach may be found in [12, 11]. 2.1 Collision detection Impulse-based dynamic simulation is inherently collision intensive, since collisions are used to affect all types of interaction between objects. Hahn found collision detection to be the bottleneck in dynamic simulation <ref> [7] </ref>, and efficient data structures and algorithms are needed to make impulse-based simulation feasible. All objects in Impulse are geometrically modeled as convex polyhedra or compositions of them. A collision is declared when the distance between two such objects falls below some threshold.
Reference: [8] <author> Oussama Khatib. </author> <title> A unified approach for the motion and force control of robot manipulators: The operational space formulation. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-3(1):43-53, </volume> <month> February </month> <year> 1987. </year>
Reference-contexts: The key feature is that u and p are related by a constant matrix. Incidentally, this constant matrix is exactly the operational space inertia matrix fl (x) developed by Khatib <ref> [8] </ref>. The assumptions that the object the manipulator contacts is fixed, and that the collision occurs at the end effector can both be relaxed.
Reference: [9] <author> Kathryn W. Lilly. </author> <title> Efficient Dynamic Simulation of Robotic Mechanisms. </title> <publisher> Kluwer Academic Publishers, Norwell, </publisher> <year> 1993. </year>
Reference-contexts: The motion of these systems of rigid links is governed by explicit, well-understood, and permanent constraints, such as those imposed by revolute or prismatic joints. Computing the forward dynamics of these systems is a classical problem of robotics, and a variety of methods exist for doing so <ref> [6, 9] </ref>. Note that the interaction between the manipulator and the environment (typically occurring at the end effector) is not so clearly a constraint-based interaction, since often this contact is transient or not as accurately modeled by a hard constraint. <p> Analogous to the situation for colliding (unconstrained) rigid bodies, this is done by relating the change in relative contact velocity to the collision impulse. Let q be the vector of manipulator joint positions. The dynamics of the manipulator are given by <ref> [9] </ref>: q = H 1 (q) t C (q; _q) _q G (q) + J T (q) f ; (3) where t is the vector of joint torques (or forces), q is the vector of joint positions, H is the joint space inertia matrix, C is the matrix of Coriolis and
Reference: [10] <author> Ming C. Lin and John F. Canny. </author> <title> A fast algorithm for incremental distance calculation. </title> <booktitle> In International Conference on Robotics and Automation, </booktitle> <pages> pages 1008-1014. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: All objects in Impulse are geometrically modeled as convex polyhedra or compositions of them. A collision is declared when the distance between two such objects falls below some threshold. At the heart of the collision detection system is the Lin-Canny closest features algorithm <ref> [10] </ref>. This efficient algorithm exploits coherence to return the closest pair of features (faces, edges, or vertices) between two polyhedra in near constant time. From this information, the intervening distance is easily computed. Collision checks are prioritized in a heap (figure 3).
Reference: [11] <author> Brian Mirtich and John Canny. </author> <title> Impulse-based dynamic simulation. </title> <editor> In K. Goldberg, D. Halperin, J.C. Latombe, and R. Wil-son, editors, </editor> <booktitle> The Algorithmic Foundations of Robotics. </booktitle> <editor> A. K. Peters, </editor> <address> Boston, MA, </address> <year> 1995. </year> <note> Proceedings from the workshop held in February, </note> <year> 1994. </year>
Reference-contexts: We conclude in section 5. 2 Impulse-based simulation The simulator Impulse demonstrates the feasibility of modeling contact with collisions. We briefly describe collision detection and response in this system, as well as some results pertaining to efficiency and accuracy. More details on the impulse-based approach may be found in <ref> [12, 11] </ref>. 2.1 Collision detection Impulse-based dynamic simulation is inherently collision intensive, since collisions are used to affect all types of interaction between objects. Hahn found collision detection to be the bottleneck in dynamic simulation [7], and efficient data structures and algorithms are needed to make impulse-based simulation feasible. <p> Let u be the relative velocity between the two bodies at the contact point, and u be the change in this quantity over the course of the collision. If p is the collision impulse imparted by one body on the other, one can show <ref> [11] </ref> that u (fl) = M p (fl): (1) Here M is a 3 fi 3 matrix dependent only upon the masses and mass matrices of the colliding bodies, and the locations of the contact points in the body frames. Note that M is constant for a given collision.
Reference: [12] <author> Brian Mirtich and John Canny. </author> <title> Impulse-based simulation of rigid bodies. In Symposium on Interactive 3D Graphics, </title> <address> New York, 1995. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Instead, the correct macroscopic behavior results from processing individual collisions. The approach works well for systems like those shown in figures 1 and 2. It is very efficient, and produces physically valid simulations for a wide variety of problems <ref> [12] </ref>. However, impulse-based contact modeling is not always a good choice, especially in situations which involve prolonged, close contact. A challenge is to combine these two very different simulation paradigms, using each one when appropriate. <p> We conclude in section 5. 2 Impulse-based simulation The simulator Impulse demonstrates the feasibility of modeling contact with collisions. We briefly describe collision detection and response in this system, as well as some results pertaining to efficiency and accuracy. More details on the impulse-based approach may be found in <ref> [12, 11] </ref>. 2.1 Collision detection Impulse-based dynamic simulation is inherently collision intensive, since collisions are used to affect all types of interaction between objects. Hahn found collision detection to be the bottleneck in dynamic simulation [7], and efficient data structures and algorithms are needed to make impulse-based simulation feasible. <p> Impulse is roughly an order of magnitude off real time simulation for systems of this size. 2.4 Physical accuracy Physical accuracy is of paramount importance for a dynamic simulator. We have tested the accuracy Impulse with several experiments, many of which are detailed in <ref> [12] </ref>. A more recent "real world" problem solved with Impulse was the estimation of the stable pose distribution for a small part dropped onto a flat surface. This is an important problem in designing production lines and parts for automated assembly [4].
Reference: [13] <author> M. Overmars. </author> <title> Point location in fat subdivisions. </title> <journal> Information Processing Letters, </journal> <volume> 44 </volume> <pages> 261-265, </pages> <year> 1992. </year>
Reference-contexts: Object pairs are only kept in the heap if the objects are "close." Closeness can be rapidly determined by storing the positions of all objects in a large hash table, based on a cubical tiling of physical space, as described in <ref> [13] </ref>.
Reference: [14] <author> Jeff Wiegley, Anil Rao, and Ken Goldberg. </author> <title> Computing a statistical distribution of stable poses for a polyhedron. </title> <booktitle> In 30th Annual Allerton Conference on Communications, Control, and Computing, </booktitle> <year> 1992. </year>
Reference-contexts: Experimental results were obtained by performing over 1000 physical drop tests with this part, under controlled conditions. Two predictions for the stable pose distribution were also obtained, one from a quasi-static algorithm <ref> [14] </ref>, and the other from a series of over 2000 drop tests using Impulse, performed under similar conditions to the actual drop tests. As can be seen by the histograms of figure 5, the results from dynamic simulation are quite good; the maximum deviation from the experimental data is 4%.
Reference: [15] <author> Andrew Witkin, Michael Gleicher, and William Welch. </author> <title> Interactive dynamics. </title> <journal> Computer Graphics, </journal> <volume> 24(2) </volume> <pages> 11-22, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Many simulators for simple physical systems employ constraint-based approaches <ref> [1, 3, 5, 15] </ref>. Constraints are used to describe the interactions between objects, which often occur only through physical contact.
References-found: 15

