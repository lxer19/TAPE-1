URL: ftp://ftp.cm.deakin.edu.au/pub/TR/Computing/rhodos/TR-C94-04.ps.gz
Refering-URL: http://gollum.cm.deakin.edu.au/techreports.html
Root-URL: 
Email: gjw-@deakin.edu.au  
Title: RHODOS A Microkernel based Distributed Operating System: An Overview of the 1993 Version  
Author: D. De Paoli, A. Goscinski, M. Hobbs, G. Wickham -ddp, ang, mick, 
Note: *This work was partly supported by Australian Research Council under Grants A48831034, A49232429 and the Deakin University Research Grant 0504054151.  
Address: Geelong Victoria 3217, Australia.  
Affiliation: School of Computing and Mathematics Deakin University,  
Date: September 8, 1994  
Pubnum: RHODOS  
Abstract: The current direction of computer systems is increasingly moving away from centralised system and moving towards distributed sets of workstations and personal computers connected by a network, known as distributed systems. This has led to the development of specialised operating systems to take full advantage of the resource sharing potential that a distributed system provides. The specialised operating systems being developed for these situations are known as Distributed Operating Systems. Research into this area is still at the primary stage with little firm evidence indicating what components of Distributed Operating systems are more important than others. RHODOS is a microkernel based distributed operating system that has been designed and detailed from the study of a number of existing Distributed Operating Systems. The primary object of RHODOS is to enable the study and testing of all components that combine to form a distributed operating system and not just a limited few. This paper introduces the architecture of RHODOS, highlighting the benefits envisaged by our design and the extra research areas we consider important that are not being investigated by other builders of distributed operating systems. 
Abstract-found: 1
Intro-found: 1
Reference: [Accetta et al. 86] <author> J. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevavian, M. Young. </author> <title> Mach: A New Kernel Foundation for Unix Development. </title> <booktitle> Proceedings of the Summer 1986 USENIX Conference, </booktitle> <month> July, </month> <year> 1986, </year> <pages> pp. 93-113. </pages>
Reference-contexts: Examples of systems using the kernel based architecture include: Sprite [Ousterhout et al. 88] and Amoeba [Tanenbaum and van Renesse 85]; whilst examples of systems using the microkernel based architecture include: Mach 3.0 <ref> [Accetta et al. 86] </ref> and QNX [Hildebrand 92]. In these systems, the microkernel only provides: support for scheduling, virtual memory, and cross-address space IPC as in the case of Mach; and process scheduling and interprocess communication, low-level network communication, and interrupt dispatching in the case of QNX.
Reference: [Almes et al. 85] <author> G. Almes, A. Black, E. Lazowska, J. Noe. </author> <title> The Eden system: A Technical Review. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11, </volume> <pages> 43-59. </pages>
Reference-contexts: The first method (star based) is faster than the second method (ring based) however, it is not as secure. 6 Conclusion The main goals and design assumptions for RHODOS have been strongly inuenced by a detailed study of a number of existing experimental distributed systems <ref> [Almes et al. 85] </ref>, [Cheri-ton 88], [Finkel et al. 86], [Popek and Walker 85], [Tanenbaum and van Renesse 85], [Tavenian and Rashid 87], [Rozer et al. 88] presented in [Hildebrand 92]. They are as follows: Existing distributed operating systems only cover such areas as IPC, naming and protection.
Reference: [Cheriton 88] <author> D. Cheriton. </author> <title> The V Distributed System. </title> <journal> Communications of the ACM, </journal> <volume> 31(3), </volume> <pages> 314-33. </pages>
Reference: [De Paoli and Goscinski 93] <author> D. De Paoli and A. Goscinski. </author> <title> Times of Cryptographic Parameter RHODOS September 8, 1994 References Page 27 Generation, and Key Computation and Distribution for the Star-based and Ring-based Conference Authentication Facilities. </title> <type> Technical Report TR C93/14, </type> <institution> School of Computing and Mathematics, Deakin University, Geelong, </institution> <month> May, </month> <year> 1993. </year>
Reference-contexts: These parameters are used by the agents to perform one-way, two-way and conference authentication, without any need to consult the central authentication server. Thus, this security scheme is well suited to a distributed operating system. Conference authentication is unfortunately a time consuming action <ref> [De Paoli and Goscinski 93] </ref>. For this reason RHODOS authentication server provides two versions of conference authentication. The first method of conference authentication places the participants into a star formation. The second method places the participants into a ring formation.
Reference: [Finkel et al. 86] <editor> R. Finkel, et al. </editor> <booktitle> The Charlotte Distributed Operating System. </booktitle> <institution> Computer Science Technical Report #653, University of Wisconsin-Madison, Computer Science Department. </institution> <year> 1986. </year>
Reference-contexts: first method (star based) is faster than the second method (ring based) however, it is not as secure. 6 Conclusion The main goals and design assumptions for RHODOS have been strongly inuenced by a detailed study of a number of existing experimental distributed systems [Almes et al. 85], [Cheri-ton 88], <ref> [Finkel et al. 86] </ref>, [Popek and Walker 85], [Tanenbaum and van Renesse 85], [Tavenian and Rashid 87], [Rozer et al. 88] presented in [Hildebrand 92]. They are as follows: Existing distributed operating systems only cover such areas as IPC, naming and protection.
Reference: [Gerrity et al. 91] <author> G. Gerrity, A. Goscinski, J. Indulska, W. Toomey and Z. Zhu. </author> <title> RHODOS A test bed for the studying Design Issues in Distributed Operating Systems. </title> <booktitle> Proceedings of the 2nd Singapore International Conference on Networks (SINCON91). </booktitle> <month> September </month> <year> 1991. </year>
Reference-contexts: theory of distributed operating systems resulted in a project concerned with the development of a ResearcH Oriented Distributed Operating System (RHODOS), which was to be both a high performance distributed operating system, and a test bed to study research, design and development issues related to this class of operating systems <ref> [Gerrity et al. 91] </ref>. We investigate and compare alternative contending structures and methodologies for implementing the components a distributed and open operating systems.
Reference: [Goscinski 91] <author> A. Goscinski. </author> <title> Distributed Operating Systems: A Logical Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference: [Goscinski et al. 94] <author> A. Goscinski, M. Hobbs, G. Wickham, P. Joyce. </author> <title> Message Passing and RPC-based Interprocess Communication Mechanisms in the RHODOS Microkernel. </title> <type> Technical Report TR C94/, </type> <institution> School of Computing and Mathematics, Deakin University, </institution> <note> Geelong, (in preparation). </note>
Reference-contexts: RHODOS provides two fundamental message passing primitives send and recv. These primitives implement the Inter Process Communication (IPC), which is complete in the sense that it can accomplish any sort of blocking or non-blocking communication <ref> [Goscinski et al. 94] </ref>. Send and receive are combined within another system call to form the third and final IPC primitive, call, which is used for remote procedure calls (RPC).
Reference: [Goscinski and Indulska 92] <author> A. Goscinski and J. Indulska. </author> <title> The RHODOS Naming Facility. </title> <note> Distributed Processing Technical Committee Newsletter, invited paper, No 1. </note>
Reference: [Goscinski and Ni 93] <author> A. Goscinski and Y. Ni. </author> <title> Object Trading in Open Systems. </title> <booktitle> Proceedings of the International Conference on Open Distributed Processing ICODP93, </booktitle> <address> Berlin, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: In addition to the naming services, the RHODOS name server allows both the provision of autonomy to individual users in an open distributed environment and the quality and efficiency of a users work to be improved by providing the trading service in the user level and the distributed system level <ref> [Goscinski and Ni 93] </ref>. This is achieved by exploiting the concept of the naming domain, as well as by introducing the operations of object export, import and withdrawal.
Reference: [Goscinski and Toomey 92] <author> A. Goscinski and W. Toomey. </author> <title> A Fast Reliable Transport Protocol for Real-Time Distributed Systems. </title> <booktitle> Proceedings of the IEEE International Workshop on Emerging Technologies and Factory Automation EFTAs92, </booktitle> <pages> August 11-14, </pages> <address> Melbourne. </address>
Reference-contexts: The Network Manager utilises a transport protocol designed specifically for distributed systems; this transport protocol is known as the RHODOS Reliable Datagram Protocol (RRDP) [Goscinski and Zhu 90] <ref> [Goscinski and Toomey 92] </ref>. Mechanisms which are provided by the RRDP allow a process to specify the need for reliable or unreliable delivery of a message.
Reference: [Goscinski and Zhu 90] <author> A. Goscinski, W. Zhu. </author> <title> The Development and Performance Study of the RHODOS Reliable Datagram Protocol (RRDP). </title> <booktitle> Proceedings of the 10th International Conference on Computer Communication, ICCC90, November 1990, </booktitle> <address> New Delhi, India, </address> <publisher> Naroasa Publishing House. </publisher>
Reference-contexts: The Network Manager utilises a transport protocol designed specifically for distributed systems; this transport protocol is known as the RHODOS Reliable Datagram Protocol (RRDP) <ref> [Goscinski and Zhu 90] </ref> [Goscinski and Toomey 92]. Mechanisms which are provided by the RRDP allow a process to specify the need for reliable or unreliable delivery of a message.
Reference: [Hildebrand 92] <author> D. Hildebrand. </author> <title> An Architectural Overview of QNX. </title> <booktitle> Proceedings of Workshop on Microkernel and other Kernel Architectures. </booktitle> <month> April </month> <year> 1992. </year>
Reference-contexts: Examples of systems using the kernel based architecture include: Sprite [Ousterhout et al. 88] and Amoeba [Tanenbaum and van Renesse 85]; whilst examples of systems using the microkernel based architecture include: Mach 3.0 [Accetta et al. 86] and QNX <ref> [Hildebrand 92] </ref>. In these systems, the microkernel only provides: support for scheduling, virtual memory, and cross-address space IPC as in the case of Mach; and process scheduling and interprocess communication, low-level network communication, and interrupt dispatching in the case of QNX. <p> and design assumptions for RHODOS have been strongly inuenced by a detailed study of a number of existing experimental distributed systems [Almes et al. 85], [Cheri-ton 88], [Finkel et al. 86], [Popek and Walker 85], [Tanenbaum and van Renesse 85], [Tavenian and Rashid 87], [Rozer et al. 88] presented in <ref> [Hildebrand 92] </ref>. They are as follows: Existing distributed operating systems only cover such areas as IPC, naming and protection.
Reference: [Hobbs et al. 92] <author> M. Hobbs, W. Toomey, G. Wickham. </author> <title> Booting of the RHODOS Distributed Operating System. </title> <type> Technical Report TR C92/3, </type> <institution> School of Computing and Mathematics, Deakin University, Geelong, </institution> <month> August </month> <year> 1992. </year>
Reference-contexts: Allocation of other resources can be performed using a centralized approach; Construction using a highly-modular fashion, with hooks for test instrumentation, allows RHODOS to be used as a test bed for system ideas <ref> [Hobbs et al. 92] </ref>. At the same time, its mod ularity will enable it to be configured as a working product.
Reference: [Maeda and Bershad 92] <author> C. Maeda and B. Bershad. </author> <title> Networking Performance for RHODOS September 8, </title> <note> 1994 References Page 28 Microkernels. </note>
Reference: [Ousterhout et al. 88] <author> J. Ousterhout, A. Cherensen, F. Douglis, M. Nelson, B. Welch. </author> <title> The Sprite Network Operating System. </title> <journal> Computer, </journal> <volume> 21(2), </volume> <pages> pages 23-36. </pages>
Reference-contexts: A number of commercial and research operating systems have been designed utilising the variety of operating system architectures stated above. Kernel based architectures lead to systems that provide complete operating system functionality within the kernel code itself. Examples of systems using the kernel based architecture include: Sprite <ref> [Ousterhout et al. 88] </ref> and Amoeba [Tanenbaum and van Renesse 85]; whilst examples of systems using the microkernel based architecture include: Mach 3.0 [Accetta et al. 86] and QNX [Hildebrand 92].
Reference: [Popek and Walker 85] <author> G. Popek, B. Walker. </author> <title> The LOCUS Distributed System Architecture. </title> <address> Cambridge, Mass: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: is faster than the second method (ring based) however, it is not as secure. 6 Conclusion The main goals and design assumptions for RHODOS have been strongly inuenced by a detailed study of a number of existing experimental distributed systems [Almes et al. 85], [Cheri-ton 88], [Finkel et al. 86], <ref> [Popek and Walker 85] </ref>, [Tanenbaum and van Renesse 85], [Tavenian and Rashid 87], [Rozer et al. 88] presented in [Hildebrand 92]. They are as follows: Existing distributed operating systems only cover such areas as IPC, naming and protection.
Reference: [Rozer et al. 88] <author> M. Rozier, V. Abrossimov, F. Armand, M. Gien, M. Guillemont, F. Hermann and C. Kaiser. </author> <title> Overview of the Chorus Distributed Operating System. </title> <address> Montigny-le-Bretonneux (France), </address> <month> June </month> <year> 1988. </year>
Reference-contexts: secure. 6 Conclusion The main goals and design assumptions for RHODOS have been strongly inuenced by a detailed study of a number of existing experimental distributed systems [Almes et al. 85], [Cheri-ton 88], [Finkel et al. 86], [Popek and Walker 85], [Tanenbaum and van Renesse 85], [Tavenian and Rashid 87], <ref> [Rozer et al. 88] </ref> presented in [Hildebrand 92]. They are as follows: Existing distributed operating systems only cover such areas as IPC, naming and protection.
Reference: [Tanenbaum and van Renesse 85] <author> A. Tanenbaum, R. van Renesse. </author> <title> Distributed Operating Systems. </title> <journal> Computing Surveys, </journal> <volume> 17(4). </volume>
Reference-contexts: Kernel based architectures lead to systems that provide complete operating system functionality within the kernel code itself. Examples of systems using the kernel based architecture include: Sprite [Ousterhout et al. 88] and Amoeba <ref> [Tanenbaum and van Renesse 85] </ref>; whilst examples of systems using the microkernel based architecture include: Mach 3.0 [Accetta et al. 86] and QNX [Hildebrand 92]. <p> second method (ring based) however, it is not as secure. 6 Conclusion The main goals and design assumptions for RHODOS have been strongly inuenced by a detailed study of a number of existing experimental distributed systems [Almes et al. 85], [Cheri-ton 88], [Finkel et al. 86], [Popek and Walker 85], <ref> [Tanenbaum and van Renesse 85] </ref>, [Tavenian and Rashid 87], [Rozer et al. 88] presented in [Hildebrand 92]. They are as follows: Existing distributed operating systems only cover such areas as IPC, naming and protection.
Reference: [Tavenian and Rashid 87] <author> A. Tevanian, R. Rashid. </author> <title> Mach: A Basis for Future UNIX Development. </title> <institution> Carnegie-Mellon University, Department of Computer Science. </institution>
Reference-contexts: it is not as secure. 6 Conclusion The main goals and design assumptions for RHODOS have been strongly inuenced by a detailed study of a number of existing experimental distributed systems [Almes et al. 85], [Cheri-ton 88], [Finkel et al. 86], [Popek and Walker 85], [Tanenbaum and van Renesse 85], <ref> [Tavenian and Rashid 87] </ref>, [Rozer et al. 88] presented in [Hildebrand 92]. They are as follows: Existing distributed operating systems only cover such areas as IPC, naming and protection.
Reference: [Toomey 90] <author> W. Toomey. </author> <title> Memory Management in RHODOS. </title> <type> Technical Report CS90/19, </type> <institution> Department of Computer Science, University College, University of New South Wales. </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: As RHODOS Space Manager provides hardware independent functions, thus it is totally portable. The RHODOS Space Manager performs all the management and control of memory spaces in RHODOS <ref> [Toomey 90] </ref>. A space in RHODOS is a virtual mapping of memory to a physical store (physical memory, file, etc.). As was mentioned earlier, each process is comprised of three spaces: Text, Data and Stack spaces.
Reference: [Panadiwal and Goscinski 94] <author> R. Panadiwal and A. Goscinski. </author> <title> A High Performance and Reliable Distributed File Facility. </title> <booktitle> Proceedings of the 14th International Conference on Distributed Computing Systems. </booktitle> <address> Poznan, Poland, </address> <month> June 21-24, </month> <year> 1994. </year>
Reference-contexts: owner of an exported object may withdrawal the object from the tar get domain, if he/she does not want the object being exported an more. 5.2 File Server The RHODOS File Server uses separate strategies for the storage of file data and for the data structures required for file management <ref> [Panadiwal and Goscinski 94] </ref>. This alleviates the typical problem of loss in performance due to disk I/O in an efficient manner. Furthermore, to make the design very reliable, stable storage is provided.
Reference: [Wang and Goscinski 92] <author> M. Wang and A. Goscinski. </author> <title> The Development and Testing of an Authentication Service for RHODOS. </title> <type> Technical Report CS90/7, </type> <institution> Department of Computer Science, University College, University of New South Wales, </institution> <month> September </month> <year> 1992. </year>
Reference: [Wickham, et al., 94a] <author> G. Wickham, D. De Paoli, M. Hobbs. </author> <title> The RHODOS Space Manager 1993. </title> <type> Technical Report TR C94/, </type> <institution> School of Computing and Mathematics, Deakin University, </institution> <note> Geelong, (in preparation). </note>
Reference-contexts: However, one of the goals of RHODOS is portability across hardware platforms. Thus, RHODOS memory management has been separated into two sections: hardware dependant and hardware independent. The small hardware dependant section is found in the microkernel and the larger hardware independent section comprises RHODOS Space Manager <ref> [Wickham, et al., 94a] </ref>. As RHODOS Space Manager provides hardware independent functions, thus it is totally portable. The RHODOS Space Manager performs all the management and control of memory spaces in RHODOS [Toomey 90].
Reference: [Wickham et al. 94b] <author> G. Wickham, M. Hobbs, A. Goscinski. </author> <title> Research into the Development of the RHODOS Multi Threaded Microkernel. </title> <type> Technical Report TR C94/, </type> <institution> School of Computing and Mathematics, Deakin University, </institution> <note> Geelong, (in preparation). </note>
Reference-contexts: Therefore the current direction of our research and development has been in the area of multi-threaded micro-kernels <ref> [Wickham et al. 94b] </ref>. A multi-threaded microkernel and an enhancing the memory management enables us to overcome the problems faced with the present system (single-threaded).
Reference: [Zhu and Goscinski 90] <author> W. Zhu and A. Goscinski. </author> <title> The Development of a Load Balancing Server and Process Migration Manager for RHODOS. </title> <type> Technical Report CS90/47, </type> <institution> Department of Computer Science, University College, University of New South Wales, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: Global Scheduling is concerned with making the load of all hosts within a distributed system equal, therefore improving the overall performance and throughput of processes. A combination of dynamic load balancing <ref> [Zhu and Goscinski 90] </ref> and static allocation techniques are employed to actively and passively move processes between various host CPUs.
References-found: 26

