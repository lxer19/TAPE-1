URL: http://ftp.cs.yale.edu/pub/obfuscated-c/src/chaps/tcl6.2/doc/usenix.ps
Refering-URL: http://ftp.cs.yale.edu/pub/obfuscated-c/src/chaps/tcl6.2/doc/
Root-URL: http://www.cs.yale.edu
Email: ouster@sprite.berkeley.edu  
Title: Tcl: An Embeddable Command Language  
Author: John K. Ousterhout 
Note: The work described here was supported in part by the National Science Foundation under Grant ECS-8351961.  
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division Electrical Engineering and Computer Sciences University of California at Berkeley  
Abstract: Tcl is an interpreter for a tool command language. It consists of a library package that is embedded in tools (such as editors, debuggers, etc.) as the basic command interpreter. Tcl provides (a) a parser for a simple textual command language, (b) a collection of built-in utility commands, and (c) a C interface that tools use to augment the built-in commands with tool-specific commands. Tcl is particularly attractive when integrated with the widget library of a window system: it increases the programmability of the widgets by providing mechanisms for variables, procedures, expressions, etc; it allows users to program both the appearance and the actions of widgets; and it offers a simple but powerful communication mechanism between interactive programs. This paper will appear in the 1990 Winter USENIX Conference Proceedings 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abelson, H. and Sussman, G.J. </author> <title> Structure and Interpretation of Computer Programs, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1985. </year>
Reference-contexts: The Tcl Language In a sense, the syntax of the Tcl language is unimportant: any programming language, whether it is C [6], Forth [4], Lisp <ref> [1] </ref>, or Postscript [2], could provide many of the same programmability and communication advantages as Tcl. This suggests that the best implementation approach is to borrow an existing language and concentrate on providing a convenient framework for the use of that language. <p> Tcl is unusual because it presents two different interfaces: a textual interface to users who issue Tcl commands, and a procedural interface to the applications in which it is embedded. Each of these interfaces must be simple, powerful, and efficient. There were four major factors in the language design: <ref> [1] </ref> The language is for commands. Almost all Tcl ``programs'' will be short, many only one line long. Most programs will be typed in, executed once or perhaps a few times, and then discarded.
Reference: [2] <author> Adobe Systems, Inc. </author> <title> Postscript Language Tutorial and Cookbook, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1985. </year>
Reference-contexts: The Tcl Language In a sense, the syntax of the Tcl language is unimportant: any programming language, whether it is C [6], Forth [4], Lisp [1], or Postscript <ref> [2] </ref>, could provide many of the same programmability and communication advantages as Tcl. This suggests that the best implementation approach is to borrow an existing language and concentrate on providing a convenient framework for the use of that language. <p> This suggests that the language should have a simple syntax so that it is easy to type commands. Most existing programming languages have complex syntax; the syntax is helpful when writing long programs but would be clumsy if used for a command language. <ref> [2] </ref> The language must be programmable. It should contain general programming constructs such as variables, procedures, conditionals, and loops, so that users can extend the built-in command set by writing Tcl procedures.
Reference: [3] <author> Birrell, A. and Nelson, B. </author> <title> ``Implementing Remote Procedure Calls.'' </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 2, No. 1, </volume> <month> February </month> <year> 1986, </year> <pages> pp. 39-59. </pages>
Reference-contexts: It should contain general programming constructs such as variables, procedures, conditionals, and loops, so that users can extend the built-in command set by writing Tcl procedures. Extensibility also argues for a simple syntax: this makes it easier for Tcl programs to generate other Tcl programs. <ref> [3] </ref> The language must permit a simple and efficient interpreter. For the Tcl library to be included in many small programs, particularly on machines without shared-library facilities, the interpreter must not occupy much memory. <p> The only easy-to-use form of communication for today's applications is the selection or cut buffer: a single string of text that may be set by one application and read by another. Send provides a more general form of communication akin to remote procedure call <ref> [3] </ref>.
Reference: [4] <author> Brodie, L. </author> <title> Starting FORTH: An Introduction to the FORTH Language and Operating System for Beginners and Professionals, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1981. </year>
Reference-contexts: The Tcl Language In a sense, the syntax of the Tcl language is unimportant: any programming language, whether it is C [6], Forth <ref> [4] </ref>, Lisp [1], or Postscript [2], could provide many of the same programmability and communication advantages as Tcl. This suggests that the best implementation approach is to borrow an existing language and concentrate on providing a convenient framework for the use of that language. <p> The mechanism for interpreting Tcl commands must be fast enough to be usable for events that occur hundreds of times a second, such as mouse motion. <ref> [4] </ref> The language must permit a simple interface to C applications. It must be easy for C applications to invoke the interpreter and easy for them to extend the built-in commands with application-specific commands.
Reference: [5] <author> Kernighan, B.W. and Pike, R. </author> <title> The UNIX Programming Environment, </title> <publisher> Prentice Hall, </publisher> <address> Engle-wood Cliffs, NJ, </address> <year> 1984. </year>
Reference-contexts: The first observation is that a general-purpose programmable command language amplifies the power of a tool by allowing users to write programs in the command language in order to extend the tool's built-in facilities. Among the best-known examples of powerful command languages are those of the UNIX shells <ref> [5] </ref> and the Emacs editor [8]. In each case a computing environment of unusual power has arisen, in large part because of the availability of a programmable command language. The second motivating observation is that the number of interactive applications is increasing.
Reference: [6] <author> Kernighan, B.W. and Ritchie, </author> <title> D.M. The C Programming Language, Second Edition, </title> <publisher> Pren-tice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year>
Reference-contexts: Section 7 compares Tcl to Lisp, Emacs, and NeWS, and Section 8 concludes the paper. - 1 - Tcl: An Embeddable Command Language December 22, 1989 2. The Tcl Language In a sense, the syntax of the Tcl language is unimportant: any programming language, whether it is C <ref> [6] </ref>, Forth [4], Lisp [1], or Postscript [2], could provide many of the same programmability and communication advantages as Tcl. This suggests that the best implementation approach is to borrow an existing language and concentrate on providing a convenient framework for the use of that language.
Reference: [7] <author> Mackey, K., Downs, M., Duffy, J., and Leege, J. </author> <title> ``An Interactive Interface Builder for Use with Ada Programs,'' </title> <booktitle> Xhibition Conference Proceedings, </booktitle> <year> 1989. </year>
Reference-contexts: The interface editor could then output information about the interface as a Tcl command file to be read by the application when it starts up. Some current interface editors output C code which must then be compiled into the application <ref> [7] </ref>; unfortunately this approach requires an application to be recompiled in order to change its interface (or, alternatively, it requires a dynamic-code-loading facility). If Tcl were used as the interface specification language then no recompilation would be necessary and a single application binary could support many different interfaces. 5.
Reference: [8] <author> Stallman, R. </author> <title> GNU Emacs Manual, </title> <note> Fourth Edition, Version 17, </note> <month> February </month> <year> 1986. </year>
Reference-contexts: Among the best-known examples of powerful command languages are those of the UNIX shells [5] and the Emacs editor <ref> [8] </ref>. In each case a computing environment of unusual power has arisen, in large part because of the availability of a programmable command language. The second motivating observation is that the number of interactive applications is increasing.
Reference: [9] <author> Sun Microsystems, Inc. </author> <title> NeWS Technical Overview, Sun Microsystems, </title> <publisher> Inc. </publisher> <address> PN 800-1498-05, </address> <year> 1987. </year>
Reference-contexts: The Tcl approach is decentralized: each application has its own command interpreter and applications may communicate directly with each other. Lastly, it is interesting to compare Tcl to NeWS <ref> [9] </ref>, a window system that is based on the Postscript language. NeWS allows applications to down-load Postscript programs into the window server in order to change the user interface and modify other aspects of the system.
References-found: 9

