URL: http://www.cs.utoronto.ca/~cogrobo/fgcs.ps.Z
Refering-URL: http://www.cs.utoronto.ca/~cogrobo/
Root-URL: 
Email: email: reiter@ai.toronto.edu  
Title: Formalizing Database Evolution in the Situation Calculus  
Author: Raymond Reiter 
Note: and The Canadian Institute for Advanced Research  
Address: Toronto, Canada M5S 1A4  
Affiliation: Department of Computer Science University of Toronto  
Abstract: We continue our exploration of a theory of database updates (Re-iter [21, 23]) based upon the situation calculus. The basic idea is to take seriously the fact that databases evolve in time, so that updatable relations should be endowed with an explicit state argument representing the current database state. Database transactions are treated as functions whose effect is to map the current database state into a successor state. The formalism is identical to that arising in the artificial intelligence planning literature and indeed, borrows shamelessly from those ideas. Within this setting, we consider several topics, specifically: 1. A logic programming implementation of query evaluation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Baker. </author> <title> A simple solution to the Yale shooting problem. </title> <editor> In R. Brach man, H.J. Levesque, and R. Reiter, editors, </editor> <booktitle> Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning (KR'89), </booktitle> <pages> pages 11-20. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1989. </year>
Reference-contexts: indirect effects implicit in the state constraint be embodied in the successor state axioms so as to guarantee that the constraint will be an inductive entailment of the database? A variety of circumscriptive proposals for addressing the ramification problem have been proposed in the artificial intelligence literature, notably by Baker <ref> [1] </ref>, Baker and Ginsberg [2], Ginsberg and Smith [5], Lifschitz [10] and Lin and Shoham [11]. Our formulation of the problem in terms of inductive entailments of the database seems to be new.
Reference: [2] <author> A. Baker and M. Ginsberg. </author> <title> Temporal projection and explanation. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 906-911, </pages> <address> Detroit, MI, </address> <year> 1989. </year>
Reference-contexts: the state constraint be embodied in the successor state axioms so as to guarantee that the constraint will be an inductive entailment of the database? A variety of circumscriptive proposals for addressing the ramification problem have been proposed in the artificial intelligence literature, notably by Baker [1], Baker and Ginsberg <ref> [2] </ref>, Ginsberg and Smith [5], Lifschitz [10] and Lin and Shoham [11]. Our formulation of the problem in terms of inductive entailments of the database seems to be new.
Reference: [3] <author> K.L. Clark. </author> <title> Negation as failure. </title> <editor> In H. Gallaire and J. Minker, editors, </editor> <booktitle> Logic and Data Bases, </booktitle> <pages> pages 292-322. </pages> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: We sketch a logic programming implementation of the axioms defining a database under updates. While we give no proof of its correctness, we observe that under suitable assumptions, Clark completion axioms (Clark <ref> [3] </ref>) should yield such a proof. 2. We show how our approach can accommodate database views. 3. The so-called ramification problem, as defined in the AI planning liter ature, arises in specifying database updates. <p> The remaining problem is to characterize what these conditions are, and to prove correctness of such an implementation with respect to the logical specification of this paper. In this connection, notice that the equivalences in the successor state and transaction precondition axioms are reminiscent of Clark's <ref> [3] </ref> completion semantics for logic programs, and our unique names axioms for states and transactions provide part of the equality theory required for Clark's semantics (Lloyd [12], pp.79, 109). 4 Views In our setting, a view is an updatable database relation V (~x; s) defined in terms of so-called base predicates:
Reference: [4] <author> J. </author> <title> Finger. Exploiting Constraints in Design Synthesis. </title> <type> PhD thesis, </type> <institution> Stan ford University, Stanford, </institution> <address> CA, </address> <year> 1986. </year>
Reference-contexts: The example illustrates the subtleties involved in getting the successor state axioms to reflect the intent of a state constraint. These difficulties are a manifestation of the so-called ramification problem in artificial intelligence planning domains (Finger <ref> [4] </ref>). Transactions might have ramifications, or indirect effects.
Reference: [5] <author> M.L. Ginsberg and D.E. Smith. </author> <title> Reasoning about actions I: A possible worlds approach. </title> <journal> Artificial Intelligence, </journal> <volume> 35 </volume> <pages> 165-195, </pages> <year> 1988. </year>
Reference-contexts: embodied in the successor state axioms so as to guarantee that the constraint will be an inductive entailment of the database? A variety of circumscriptive proposals for addressing the ramification problem have been proposed in the artificial intelligence literature, notably by Baker [1], Baker and Ginsberg [2], Ginsberg and Smith <ref> [5] </ref>, Lifschitz [10] and Lin and Shoham [11]. Our formulation of the problem in terms of inductive entailments of the database seems to be new.
Reference: [6] <author> C. C. Green. </author> <title> Theorem proving by resolution as a basis for question answering systems. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence 4, </booktitle> <pages> pages 183-205. </pages> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1969. </year>
Reference-contexts: for the database ever to be in a state in which J ohn is enrolled in both C100 and C200? (9s):S 0 s ^ enrolled (J ohn; C100; s) ^ enrolled (J ohn; C200; s): Answering queries of this form is precisely the problem of plan synthesis in AI (Green <ref> [6] </ref>).
Reference: [7] <author> A. R. Haas. </author> <title> The case for domain-specific frame axioms. </title> <editor> In F. M. Brown, editor, </editor> <booktitle> The frame problem in artificial intelligence. Proceedings of the 1987 workshop, </booktitle> <pages> pages 343-348, </pages> <address> Los Altos, California, 1987. </address> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: One way to extend the theory to include indeterminate transactions is by appealing to a simple idea due to Haas <ref> [7] </ref>, as elaborated by Schubert [24]. As an example, consider the indeterminate transaction drop-a-student (c), meaning that some student we don't know whom is to be dropped from course c.
Reference: [8] <author> S. Hanks and D. McDermott. </author> <title> Default reasoning, nonmonotonic logics, and the frame problem. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 328-333, </pages> <year> 1986. </year>
Reference-contexts: the transaction sequence drop (J ohn; C100); register (M ary; C100) has been `executed', we must determine whether Database j= (9c):enrolled (J ohn; c; do (register (M ary; C100); do (drop (J ohn; C100); S 0 ))): Querying an evolving database is precisely the temporal projection problem in AI planning <ref> [8] </ref>. 4 Definition: A Regression Operator R Let W be first order formula.
Reference: [9] <author> R. Kowalski. </author> <title> Database updates in the event calculus. </title> <journal> Journal of Logic Programming, </journal> <volume> 12 </volume> <pages> 121-146, </pages> <year> 1992. </year>
Reference-contexts: In this paper, we shall have a different use for regression, in connection with defining database views (Section 4). 4 This property of our axiomatization makes the resulting approach quite different than Kowalski's situation calculus formalization of updates <ref> [9] </ref>, in which each database update is accompanied by the addition of an atomic formula to the theory axiomatizing the database. 9 3 Updates in the Logic Programming Con text It seems that our approach to database updates can be implemented in a fairly straightforward way as a logic program, thereby
Reference: [10] <author> V. Lifschitz. </author> <title> Toward a metatheory of action. </title> <editor> In J. Allen, R. Fikes, and E. Sandewall, editors, </editor> <booktitle> Proceedings of the Second International Conference on Principles of Knowledge Representation and Reasoning 23 (KR'91), </booktitle> <pages> pages 376-386, </pages> <address> Los Altos, CA, 1991. </address> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: the successor state axioms so as to guarantee that the constraint will be an inductive entailment of the database? A variety of circumscriptive proposals for addressing the ramification problem have been proposed in the artificial intelligence literature, notably by Baker [1], Baker and Ginsberg [2], Ginsberg and Smith [5], Lifschitz <ref> [10] </ref> and Lin and Shoham [11]. Our formulation of the problem in terms of inductive entailments of the database seems to be new.
Reference: [11] <author> F. Lin and Y. Shoham. </author> <title> Provably correct theories of action. </title> <booktitle> In Proceed ings of the National Conference on Artificial Intelligence, </booktitle> <year> 1991. </year>
Reference-contexts: as to guarantee that the constraint will be an inductive entailment of the database? A variety of circumscriptive proposals for addressing the ramification problem have been proposed in the artificial intelligence literature, notably by Baker [1], Baker and Ginsberg [2], Ginsberg and Smith [5], Lifschitz [10] and Lin and Shoham <ref> [11] </ref>. Our formulation of the problem in terms of inductive entailments of the database seems to be new.
Reference: [12] <author> J.W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer Verlag, </publisher> <address> second edition, </address> <year> 1987. </year>
Reference-contexts: This can be realized procedurally by retaining the clause sequence as shown, and simply deleting the inequality a 6= change (st; c; g 0 ). 6 We have here invoked some of the program transformation rules of (Lloyd <ref> [12] </ref>, p.113) to convert the non-clausal formula f (8p):prerequ (p; c) (9g):grade (st; c; g; s) ^ g 50g P oss (register (st; c); s) to a Prolog executable form. <p> In this connection, notice that the equivalences in the successor state and transaction precondition axioms are reminiscent of Clark's [3] completion semantics for logic programs, and our unique names axioms for states and transactions provide part of the equality theory required for Clark's semantics (Lloyd <ref> [12] </ref>, pp.79, 109). 4 Views In our setting, a view is an updatable database relation V (~x; s) defined in terms of so-called base predicates: (8~x; s):V (~x; s) B (~x; s); (4) where B is a simple formula with free variables among ~x and s, and which mentions only base
Reference: [13] <author> J. McCarthy. </author> <title> Programs with common sense. </title> <editor> In M. Minsky, editor, </editor> <booktitle> Se mantic Information Processing, </booktitle> <pages> pages 403-418. </pages> <publisher> The MIT Press, </publisher> <address> Cam-bridge, MA, </address> <year> 1968. </year>
Reference-contexts: 1 Introduction Elsewhere (Reiter [21, 23]), we have described how one may represent databases and their update transactions within the situation calculus (McCarthy <ref> [13] </ref>). The basic idea is to take seriously the fact that databases evolve in time, so that updatable relations should be endowed with an explicit state argument representing the current database state.
Reference: [14] <author> J. McCarthy and P. Hayes. </author> <title> Some philosophical problems from the stand point of artificial intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence 4, </booktitle> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, </publisher> <address> Edin-burgh, Scotland, </address> <year> 1969. </year>
Reference-contexts: Of course, conventional first order theorem-proving does provide a query evaluator for such an axiomatization. For example, the following are entailments of the above axioms, together with 14 It is these explanation closure axioms which provide a succinct alternative to the frame axioms (McCarthy and Hayes <ref> [14] </ref>) which would normally be required to represent dynamically changing worlds like databases (Reiter [23]). 15 This assumption is already implicit in our successor state axioms of Section 2.2 21 unique names axioms for transactions and for J ohn and M ary: enrolled (J ohn; C100; S 0 ) ^ enrolled
Reference: [15] <editor> J. Minker, editor. </editor> <booktitle> Foundations of Deductive Databases and Logic Pro gramming. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> Los Altos, CA, </address> <year> 1988. </year>
Reference-contexts: addition of an atomic formula to the theory axiomatizing the database. 9 3 Updates in the Logic Programming Con text It seems that our approach to database updates can be implemented in a fairly straightforward way as a logic program, thereby directly complementing the logic programming perspective on databases (Minker <ref> [15] </ref>).
Reference: [16] <author> E.P.D. Pednault. </author> <title> Synthesizing plans that contain actions with context dependent effects. </title> <journal> Computational Intelligence, </journal> <volume> 4 </volume> <pages> 356-372, </pages> <year> 1988. </year>
Reference-contexts: The use of the regression operator R is a classical plan synthesis technique (Waldinger [25]). See also (Pednault <ref> [16, 17] </ref>). Regression corresponds to the operation of unfolding in logic programming. For the class of databases of this paper, Reiter [23, 19] provides a sound and complete query evaluator based on regression.
Reference: [17] <author> E.P.D. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <editor> In R.J. Brachman, H. Levesque, and R. Re-iter, editors, </editor> <booktitle> Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning (KR'89), </booktitle> <pages> pages 324-332. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1989. </year>
Reference-contexts: The use of the regression operator R is a classical plan synthesis technique (Waldinger [25]). See also (Pednault <ref> [16, 17] </ref>). Regression corresponds to the operation of unfolding in logic programming. For the class of databases of this paper, Reiter [23, 19] provides a sound and complete query evaluator based on regression.
Reference: [18] <author> R. Reiter. </author> <title> The frame problem in the situation calculus: a simple so lution (sometimes) and a completeness result for goal regression. </title> <editor> In Vladimir Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 359-380. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: Database transactions are treated as functions, and the effect of a transaction is to map the current database state into a successor state. The resulting formalism becomes identical to theories of planning in the AI literature (See, for example, (Reiter <ref> [18] </ref>)). Following a review of some of the requisite basic concepts and results, we consider several topics in this paper: 1. We sketch a logic programming implementation of the axioms defining a database under updates. <p> For the class of databases of this paper, Reiter <ref> [22, 18] </ref> shows how regression provides a sound and complete evaluator for such queries. 7 Indeterminate Transactions A limitation of our formalism is that it requires all transactions to be determinate, by which we mean that in the presence of complete information about the initial database state a transaction completely determines
Reference: [19] <author> R. Reiter. </author> <title> The projection problem in the situation calculus: A soundness and completeness result, with an application to database updates. </title> <note> 1992. submitted for publication. 24 </note>
Reference-contexts: By appealing to some ideas of Haas ([7]) and Schubert ([24]), we indicate how to axiomatize indeterminate database transactions. 2 2 Preliminaries This section reviews some of the basic concepts and results of (Reiter <ref> [23, 21, 19] </ref>) which provide the necessary background for presenting the material of this paper. <p> The use of the regression operator R is a classical plan synthesis technique (Waldinger [25]). See also (Pednault [16, 17]). Regression corresponds to the operation of unfolding in logic programming. For the class of databases of this paper, Reiter <ref> [23, 19] </ref> provides a sound and complete query evaluator based on regression. <p> See (Reiter <ref> [19] </ref>) for details, and a procedure for verifying the legality of a transaction sequence. 12 The correctness of this simple-minded list processing procedure relies on some assumptions, notable suitable unique names axioms. 17 Then, on the assumption that the transaction sequence T is legal, it is simple to prove that the
Reference: [20] <author> R. Reiter. </author> <title> Proving properties of states in the situation calculus. </title> <note> 1992. submitted for publication. </note>
Reference-contexts: (8s; s 0 ):s &lt; s 0 [(8a; s 1 ; s 2 ):P oss (a; s 2 ) ^ P (s 1 ; s 2 ) P (s; s 0 ): (8s; s 0 )s s 0 s &lt; s 0 _ s = s 0 : (2) Reiter <ref> [20] </ref> shows how these axioms entail the following induction axiom suitable for proving properties of states s when S 0 s: (8W ):fW (S 0 ) ^ (8s):S 0 s W (s): 3 There could even be infinitely many successors whenever an action is parameterized by a real number, as for <p> Reiter <ref> [23, 20] </ref> provides an approach to database integrity constraints in which the concept of a database satisfying its constraints is defined in terms of inductive entailment from the database, using this and other axioms of induction for the situation calculus. <p> The information conveyed in axioms like (7) must already be embodied in D S 0 together with the successor state and transaction precondition axioms. We 12 have already seen hints of this observation. Reiter <ref> [20] </ref> proposes that dynamic integrity constraints should be viewed as inductive entailments of the database, and gives several examples of such derivations. <p> In particular, it does not depend on successor state axioms. It follows that we can continue to use induction to prove properties of database states and integrity constraints in the more generalized setting of indeterminate transactions. The fundamental perspective on integrity constraints of (Reiter <ref> [20] </ref>) namely that they are inductive entailments of the database remains the same. Acknowledgements Many of my colleagues provided important conceptual and technical advice.
Reference: [21] <author> R. Reiter. </author> <title> On specifying database updates. </title> <type> Technical report, </type> <institution> Depart ment of Computer Science, University of Toronto, </institution> <note> in preparation. </note>
Reference-contexts: 1 Introduction Elsewhere (Reiter <ref> [21, 23] </ref>), we have described how one may represent databases and their update transactions within the situation calculus (McCarthy [13]). <p> By appealing to some ideas of Haas ([7]) and Schubert ([24]), we indicate how to axiomatize indeterminate database transactions. 2 2 Preliminaries This section reviews some of the basic concepts and results of (Reiter <ref> [23, 21, 19] </ref>) which provide the necessary background for presenting the material of this paper. <p> By appealing to explanation closure axioms, we can now specify indeterminate transactions. The price we pay is the loss of the simple regression-based query evaluator of (Reiter <ref> [23, 21] </ref>); we no longer have a simple sound and complete query evaluator. Of course, conventional first order theorem-proving does provide a query evaluator for such an axiomatization.
Reference: [22] <author> R. Reiter. </author> <title> A simple solution to the frame problem (sometimes). </title> <type> Techni cal report, </type> <institution> Department of Computer Science, University of Toronto, </institution> <note> in preparation. </note>
Reference-contexts: For the class of databases of this paper, Reiter <ref> [22, 18] </ref> shows how regression provides a sound and complete evaluator for such queries. 7 Indeterminate Transactions A limitation of our formalism is that it requires all transactions to be determinate, by which we mean that in the presence of complete information about the initial database state a transaction completely determines
Reference: [23] <author> R. Reiter. </author> <title> On formalizing database updates: preliminary report. </title> <booktitle> In Proc. 3rd International Conference on Extending Database Technology, </booktitle> <address> Vienna, March 23 - 27, </address> <year> 1992. </year> <note> to appear. </note>
Reference-contexts: 1 Introduction Elsewhere (Reiter <ref> [21, 23] </ref>), we have described how one may represent databases and their update transactions within the situation calculus (McCarthy [13]). <p> By appealing to some ideas of Haas ([7]) and Schubert ([24]), we indicate how to axiomatize indeterminate database transactions. 2 2 Preliminaries This section reviews some of the basic concepts and results of (Reiter <ref> [23, 21, 19] </ref>) which provide the necessary background for presenting the material of this paper. <p> These include a motivating example, a precise specification of the axioms used to formalize update transactions and databases, an induction axiom suitable for proving properties of database states, and a discussion of query evaluation. 2.1 The Basic Approach: An Example In (Reiter <ref> [23] </ref>), the idea of representing databases and their update transactions within the situation calculus was illustrated with an example education domain, which we repeat here. <p> Reiter <ref> [23, 20] </ref> provides an approach to database integrity constraints in which the concept of a database satisfying its constraints is defined in terms of inductive entailment from the database, using this and other axioms of induction for the situation calculus. <p> The use of the regression operator R is a classical plan synthesis technique (Waldinger [25]). See also (Pednault [16, 17]). Regression corresponds to the operation of unfolding in logic programming. For the class of databases of this paper, Reiter <ref> [23, 19] </ref> provides a sound and complete query evaluator based on regression. <p> By appealing to explanation closure axioms, we can now specify indeterminate transactions. The price we pay is the loss of the simple regression-based query evaluator of (Reiter <ref> [23, 21] </ref>); we no longer have a simple sound and complete query evaluator. Of course, conventional first order theorem-proving does provide a query evaluator for such an axiomatization. <p> For example, the following are entailments of the above axioms, together with 14 It is these explanation closure axioms which provide a succinct alternative to the frame axioms (McCarthy and Hayes [14]) which would normally be required to represent dynamically changing worlds like databases (Reiter <ref> [23] </ref>). 15 This assumption is already implicit in our successor state axioms of Section 2.2 21 unique names axioms for transactions and for J ohn and M ary: enrolled (J ohn; C100; S 0 ) ^ enrolled (M ary; C100; S 0 ) enrolled (J ohn; C100; do (drop (M ary;
Reference: [24] <author> L.K. Schubert. </author> <title> Monotonic solution of the frame problem in the situa tion calculus: an efficient method for worlds with fully specified actions. In H.E. </title> <editor> Kyberg, R.P. Loui, and G.N. Carlson, editors, </editor> <booktitle> Knowledge Representation and Defeasible Reasoning, </booktitle> <pages> pages 23-67. </pages> <publisher> Kluwer Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: One way to extend the theory to include indeterminate transactions is by appealing to a simple idea due to Haas [7], as elaborated by Schubert <ref> [24] </ref>. As an example, consider the indeterminate transaction drop-a-student (c), meaning that some student we don't know whom is to be dropped from course c. <p> s)) a = register (st; c)g: 13 (9!st) denotes the existence of a unique st. 20 P oss (a; s) fenrolled (st; c; s) ^ :enrolled (st; c; do (a; s)) a = drop (st; c) _ a = drop-a-student (c)g: The last two formulas are examples of what Schubert <ref> [24] </ref> calls explanation closure axioms.
Reference: [25] <author> R. Waldinger. </author> <title> Achieving several goals simultaneously. </title> <editor> In E. Elcock and D. Michie, editors, </editor> <booktitle> Machine Intelligence 8, </booktitle> <pages> pages 94-136. </pages> <publisher> Ellis Horwood, Edinburgh, </publisher> <address> Scotland, </address> <year> 1977. </year> <month> 25 </month>
Reference-contexts: The use of the regression operator R is a classical plan synthesis technique (Waldinger <ref> [25] </ref>). See also (Pednault [16, 17]). Regression corresponds to the operation of unfolding in logic programming. For the class of databases of this paper, Reiter [23, 19] provides a sound and complete query evaluator based on regression.
References-found: 25

