URL: http://www.eecs.umich.edu/~hakan/PS/iccad96.ps
Refering-URL: http://www.eecs.umich.edu/~hakan/research.html
Root-URL: http://www.cs.umich.edu
Note: This research was supported by the Semiconductor Research Corporation under Contract #93-DJ-338. Abstract  
Abstract: We present a novel timing analysis method ACD that computes an approximate value for the delay of datapath circuits. Based on the conditional delay matrix (CDM) formalism we introduced earlier, the ACD method exploits the fact that most datapath signals are directed by a small set of control inputs. The signal propagation conditions are restricted to a set of predefined control inputs, which results in significant reductions in the size of the conditions as well as computation time. We have implemented ACD and experimented with reverse-engineered high-level versions of the ISCAS-85 benchmarks. Our results demonstrate up to three orders of magnitude speedup in computation time over exact methods, with little or no loss in accuracy. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.I. Bahar et al., </author> <title> Timing analysis of combinational circuits using ADDs, </title> <booktitle> Proc. Euro. Design & Test Conf. </booktitle> <pages> 625-629. </pages>
Reference-contexts: 1 Introduction The exact timing analysis methods used to calculate delays in logic circuits tend to be computationally expensive. In symbolic methods <ref> [1, 6, 12] </ref>, the signal propagation conditions can grow too rapidly with circuit size, while in search-based methods [3, 8, 10], the size of the search space can become extremely large. These problems result in excessive computation time or memory overow.
Reference: [2] <author> S. Bhattacharya et al., </author> <title> Provably correct high-level timing analysis without path sensitization, </title> <booktitle> Proc. </booktitle> <address> ICCAD 736-742. </address>
Reference: [3] <author> S. Devadas et al., </author> <title> Computation of floating mode delay in combinational circuits: practice and implementation, </title> <journal> IEEE Trans. </journal> <volume> CAD , vol. 12, </volume> <year> 1993, </year> <pages> pp. 1924-1936. </pages>
Reference-contexts: 1 Introduction The exact timing analysis methods used to calculate delays in logic circuits tend to be computationally expensive. In symbolic methods [1, 6, 12], the signal propagation conditions can grow too rapidly with circuit size, while in search-based methods <ref> [3, 8, 10] </ref>, the size of the search space can become extremely large. These problems result in excessive computation time or memory overow. Although precise delay values are desirable in the final stage of design development, easily-computed approximate values usually suffice in the early stages. <p> As a result, the computational savings are less for c2670 (2) and c3540 (2) than for c2670 (1) and c3540 (1). The c6288 benchmark, a 16-bit multiplier with a huge number of I/O paths, is very difficult to analyze at the gate level <ref> [3, 8] </ref>. The exact delay of 123 was found by applying HCD at the high level [12]. To apply ACD, all inputs are specified as data, thus reducing the analysis to topological delay computation. The longest topological path length is 124, only 1 more than the actual delay of 123. <p> To apply ACD, all inputs are specified as data, thus reducing the analysis to topological delay computation. The longest topological path length is 124, only 1 more than the actual delay of 123. However, the CPU time is orders of magnitude less than those of exact gate-level methods <ref> [3, 8] </ref>. The results in Table 1 indicate that, on average, with only 24% of primary inputs specified as control, the delay estimates are within 2% of the exact values.
Reference: [4] <author> M.C. Hansen and J.P. Hayes, </author> <title> High-level test generation using physically induced faults, </title> <booktitle> Proc. VLSI Test Symp. </booktitle> <year> 1995, </year> <pages> pp. 20-28. </pages>
Reference-contexts: The ISCAS-85 circuits have been widely used as benchmarks for exact timing analysis methods that apply to low (gate) level circuits. The high-level models for these circuits have recently been reverse engineered by Hansen and Hayes <ref> [4] </ref>, and demonstrate that a clear, natural dichotomy exists between data and control signals in most cases. We therefore decided to apply the ACD method the ISCAS-85 circuits. For five of the ISCAS-85 benchmarks, namely c432, c499, c880, c1355 and c6288, we used the models of [4]. <p> by Hansen and Hayes <ref> [4] </ref>, and demonstrate that a clear, natural dichotomy exists between data and control signals in most cases. We therefore decided to apply the ACD method the ISCAS-85 circuits. For five of the ISCAS-85 benchmarks, namely c432, c499, c880, c1355 and c6288, we used the models of [4]. We have derived the high-level models for the remaining benchmarks by reverse engineering their netlists.
Reference: [5] <author> V.M. Hrapcenko, </author> <title> Depth and delay in a network, </title> <journal> Soviet Math. Dokl. </journal> , <volume> vol. 19, </volume> <year> 1978, </year> <pages> pp. 1006-1009. </pages>
Reference-contexts: Although precise delay values are desirable in the final stage of design development, easily-computed approximate values usually suffice in the early stages. One widely used approximate method is topological delay calculation. It is relatively fast but can be arbitrarily inaccurate <ref> [5] </ref>. Other methods have been proposed that aim to achieve more accurate results. For example, Huang et al. give two methods [6, 7] to simplify the propagation conditions. However, their results for the ISCAS-85 benchmark circuits are no better than topological delays in most cases.
Reference: [6] <author> S.-T. Huang, et al., </author> <title> Timed Boolean calculus and its applications in timing analysis, </title> <journal> IEEE Trans. </journal> <volume> CAD , vol. 13, </volume> <year> 1994, </year> <pages> pp. 318-337. </pages>
Reference-contexts: 1 Introduction The exact timing analysis methods used to calculate delays in logic circuits tend to be computationally expensive. In symbolic methods <ref> [1, 6, 12] </ref>, the signal propagation conditions can grow too rapidly with circuit size, while in search-based methods [3, 8, 10], the size of the search space can become extremely large. These problems result in excessive computation time or memory overow. <p> One widely used approximate method is topological delay calculation. It is relatively fast but can be arbitrarily inaccurate [5]. Other methods have been proposed that aim to achieve more accurate results. For example, Huang et al. give two methods <ref> [6, 7] </ref> to simplify the propagation conditions. However, their results for the ISCAS-85 benchmark circuits are no better than topological delays in most cases. The main rea son is that their approximation methods are in the func tional domain, which does not reect timing behavior well.
Reference: [7] <author> S.-T. Huang et al., </author> <title> A polynomial-time heuristic approach to approximate a solution to the false path problem, </title> <booktitle> Proc. Design Autom. Conf. </booktitle>
Reference-contexts: One widely used approximate method is topological delay calculation. It is relatively fast but can be arbitrarily inaccurate [5]. Other methods have been proposed that aim to achieve more accurate results. For example, Huang et al. give two methods <ref> [6, 7] </ref> to simplify the propagation conditions. However, their results for the ISCAS-85 benchmark circuits are no better than topological delays in most cases. The main rea son is that their approximation methods are in the func tional domain, which does not reect timing behavior well.
Reference: [8] <author> P.C. McGeer and R.K. Brayton, </author> <title> Integrating Functional and Temporal Domains in Logic Design , Kluwer Boston, </title> <year> 1991. </year>
Reference-contexts: 1 Introduction The exact timing analysis methods used to calculate delays in logic circuits tend to be computationally expensive. In symbolic methods [1, 6, 12], the signal propagation conditions can grow too rapidly with circuit size, while in search-based methods <ref> [3, 8, 10] </ref>, the size of the search space can become extremely large. These problems result in excessive computation time or memory overow. Although precise delay values are desirable in the final stage of design development, easily-computed approximate values usually suffice in the early stages. <p> In constructing signal propagation conditions, the ACD method uses only the control inputs; the data inputs are eliminated via the smoothing operator <ref> [8] </ref>. In Section 2, we review the CDM model and the HCD timing analysis approach. The proposed ACD approximate method is described in Section 3. We have implemented the ACD method in a symbolic timing analysis program. <p> Since the number of control inputs is typically small compared to the number of data inputs, the conditions will be much smaller in size than those in the original method. To remove the dependency of the conditions on the data inputs, ACD uses the smoothing or abstraction operator <ref> [8] </ref>. Given a function of variables , the smoothing with respect to , denoted , is defined as (3) where and are the cofactors of with respect to The smoothing operator is extended to multiple variables by repeatedly applying it to each variable in any order, e.g., . <p> However, their method performs critical path analysis with path sensitization for each microinstruction in an RT-level description of a circuit, which can be computationally expensive. In addition, it is limited to static sensitization, a propagation condition that can underestimate the circuit delay <ref> [8] </ref>. We have implemented the ACD method in a timing anal ysis program which computes the propagation conditions symbolically. The program takes as input a netlist with primary input signals identified as C or D, an optional lower bound (threshold) on the delay, and the choice of propagation condition. <p> As a result, the computational savings are less for c2670 (2) and c3540 (2) than for c2670 (1) and c3540 (1). The c6288 benchmark, a 16-bit multiplier with a huge number of I/O paths, is very difficult to analyze at the gate level <ref> [3, 8] </ref>. The exact delay of 123 was found by applying HCD at the high level [12]. To apply ACD, all inputs are specified as data, thus reducing the analysis to topological delay computation. The longest topological path length is 124, only 1 more than the actual delay of 123. <p> To apply ACD, all inputs are specified as data, thus reducing the analysis to topological delay computation. The longest topological path length is 124, only 1 more than the actual delay of 123. However, the CPU time is orders of magnitude less than those of exact gate-level methods <ref> [3, 8] </ref>. The results in Table 1 indicate that, on average, with only 24% of primary inputs specified as control, the delay estimates are within 2% of the exact values.
Reference: [9] <author> C. Ramachandran and F.J. Kurdahi, </author> <title> Combined topological and functionality based delay estimation using a layout-driven approach for high level applications, </title> <booktitle> Proc. Euro. Design Autom. Conf. </booktitle>
Reference: [10] <author> K. Roy and J.A. Abraham, </author> <title> The use of RTL descriptions in accurate timing verification and test generation, </title> <journal> IEEE J. SolidState Ccts. </journal> , <volume> vol. 26, </volume> <year> 1991, </year> <pages> pp. 1230-1239. </pages>
Reference-contexts: 1 Introduction The exact timing analysis methods used to calculate delays in logic circuits tend to be computationally expensive. In symbolic methods [1, 6, 12], the signal propagation conditions can grow too rapidly with circuit size, while in search-based methods <ref> [3, 8, 10] </ref>, the size of the search space can become extremely large. These problems result in excessive computation time or memory overow. Although precise delay values are desirable in the final stage of design development, easily-computed approximate values usually suffice in the early stages. <p> Comparing this to (1), we see that the false path is discov ered and the same delays are found by ACD. However, the conditions are now much simpler, and they satisfy (2). Roy and Abraham <ref> [10] </ref> also make use of control signals to facilitate delay calculation. However, their method performs critical path analysis with path sensitization for each microinstruction in an RT-level description of a circuit, which can be computationally expensive.
Reference: [11] <author> H. Yalcin, M.C. Hansen, and J.P. Hayes, </author> <title> Functional modeling of the ISCAS-85 circuits, </title> <type> Tech. </type> <institution> Rept., EECS Dept., Univ. of Michigan, </institution> <note> in preparation. </note>
Reference-contexts: We have derived the high-level models for the remaining benchmarks by reverse engineering their netlists. The function of each circuit is shown in Table 1. (More information about these models is given in <ref> [11] </ref>.) In this paper, we present high-level model and detailed timing analysis for c1908 and c51315; the remaining benchmarks are summarized. The results obtained with ACD are compared with those of HCD which were obtained with the timing analysis program CAT [12] applied at the gate level.

References-found: 11

