URL: http://www.cs.purdue.edu/coast/archive/clife/GA/papers/icga93-2.ps.gz
Refering-URL: http://www.cs.purdue.edu/coast/archive/clife/GA/papers/
Root-URL: http://www.cs.purdue.edu
Title: A Promising genetic Algorithm Approach to Job-Shop Scheduling, Rescheduling, and Open-Shop Scheduling Problems  
Author: Hsiao-Lan Fang, Peter Ross, and Dave Corne DAI 
Note: Research Paper No. 623 Appears in: Proceedings of the Fifth International Conference on Genetic Algorithms, S. Forrest (ed.), San Mateo: Morgan Kaufmann, 1993, pages 375-382.  
Abstract-found: 0
Intro-found: 1
Reference: <author> S. Bagchi, S. Uckun, Y. Miyabe, & K. </author> <title> Kawamura (1991). Exploring problem-specific recombination operators for job shop. </title> <editor> In R.K. Belew & L.B. </editor> <booktitle> Booker (eds) Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> pages 10-17. </pages> <address> San Mateo: </address> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: Eg: (Whitley et al 1989) defined a new edge recombination operator for the TSP, although noted that performance degraded when applied to more typical scheduling problems; <ref> (Bagchi et al 1991) </ref> used problem-specific information in the representation and genetic operators, addressing a limited form of JSSP in which certain batches of tasks must be scheduled continuously.
Reference: <author> D. Beasley, D. R. Bull, & R. R. </author> <title> Martin (1993). Reducing Epistasis in Combinatorial Problems by Expansive Coding. </title> <editor> In S. Forrest (ed), </editor> <booktitle> Genetic Algorithms; Proceedings of the Fifth International Conference (GA93), </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA. </address>
Reference-contexts: For example (Grefenstette 1987) discusses the general idea of incorporating problem-specific knowledge into various parts of the GA, while <ref> (Beasley et al 1993) </ref>, describes a GA approach to combinatorial problems based on an epistasis reducing representation, which may be of use for the JSSP.
Reference: <author> J. E. </author> <title> Beasley (1990). OR-Library: Distributing test problems by electronic mail. </title> <journal> In Journal of the Operational Research Society, </journal> <volume> Vol 41, </volume> <pages> pp. 1069-1072. </pages>
Reference-contexts: Table 3 shows a standard 5 fi5 benchmark OSSP (that is, j = 5; m = 5) taken from <ref> (Beasley 1990) </ref>. <p> The OSSP problems referred to in table 6 can be obtained via <ref> (Beasley 1990) </ref>. The OR library referred to in the latter article is an electronic library from which may be obtained benchmarks for a wide range of OR problems. These are distributed in the form of Pascal code which generates the problems.
Reference: <author> L. </author> <title> Booker (1987). Improving Search in Genetic Algorithms. In L. Davis (ed) Genetic Algorithms and Simulated Annealing, </title> <address> San Mateo: </address> <publisher> Morgan Kaufmann, </publisher> <year> 1987, </year> <pages> pages 61-73. </pages>
Reference-contexts: However, whenever significant variation in convergence rate does occur (smooth or not), the gvot strategy, targeting operators solely on the basis of dynamically sampled variance, should work just as well. This performance enhancement method complements those discussed in, for example, <ref> (Booker 1987) </ref> and (Eshelman & Schaffer 1991), which present ways of improving performance by, eg, encouraging recombination between adequately `different' genomes (incest prevention), and avoiding wasted crossover operations by only recombining the `reduced surrogate' of two parents (the smaller genome made up of those sites at which the parents are different).
Reference: <author> J. Carlier & E. </author> <title> Pinson (1989). An algorithm for solving the job-shop problem. </title> <booktitle> In Management Science, </booktitle> <volume> 35(2) </volume> <pages> 164-176, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: There are two similar benchmarks, of sizes 10 fi 10 and 20 fi 5. The best results on these benchmarks for traditional (B & B branch& bound search) and GA methods published so far are shown in table 2 2 The branch & bound method (eg: see <ref> (Carlier & Pin-son 1989) </ref>) produces good results but takes considerable computer time even for the 10 fi 10 problem because of the significant amount of schedule generation implicit in the method. (Davis 1985) was the first to suggest and demonstrate the feasibility of using a 2 Adapted from (Nakano 1991). mark
Reference: <author> L. </author> <title> Davis (1985). Job shop scheduling with genetic algorithms. </title> <editor> In J. J. Grefenstette, </editor> <booktitle> (ed) Proceedings of the First International Conference on Genetic Algorithms and their Applications, </booktitle> <pages> pages 136-140. </pages> <address> San Mateo: </address> <publisher> Morgan Kaufmann, </publisher> <year> 1985. </year>
Reference-contexts: and GA methods published so far are shown in table 2 2 The branch & bound method (eg: see (Carlier & Pin-son 1989)) produces good results but takes considerable computer time even for the 10 fi 10 problem because of the significant amount of schedule generation implicit in the method. <ref> (Davis 1985) </ref> was the first to suggest and demonstrate the feasibility of using a 2 Adapted from (Nakano 1991). mark Paper Method 6x6 10x10 20x5 McMahon 75 B & B 55 972 1165 Baker 85 B & B 55 960 1303 Carlier 89 B & B 55 930 1165 Nakano 91
Reference: <editor> L. J. Eshelman & J. D. Schaffer (1991). </editor> <title> Preventing Premature Convergence in Genetic Algorithms by Preventing Incest. </title> <editor> In R. K. Belew & L. B. </editor> <booktitle> Booker (eds) Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <address> San Mateo: </address> <publisher> Morgan Kaufmann, </publisher> <year> 1991, </year> <pages> pages 115-120. </pages>
Reference-contexts: However, whenever significant variation in convergence rate does occur (smooth or not), the gvot strategy, targeting operators solely on the basis of dynamically sampled variance, should work just as well. This performance enhancement method complements those discussed in, for example, (Booker 1987) and <ref> (Eshelman & Schaffer 1991) </ref>, which present ways of improving performance by, eg, encouraging recombination between adequately `different' genomes (incest prevention), and avoiding wasted crossover operations by only recombining the `reduced surrogate' of two parents (the smaller genome made up of those sites at which the parents are different).
Reference: <author> M. R. Gary & D. S. </author> <title> Johnson (1979) Computers and Intractability: a Guide to the Theory of NP-Completeness. </title> <publisher> Freeman. </publisher>
Reference-contexts: 1 INTRODUCTION The job-shop scheduling problem (JSSP) is a very important practical problem. Efficient methods of solving it can have major effects on profitability and product quality, but with the JSSP being among the worst members of the class of NP-complete problems <ref> (Gary & Johnson 1979) </ref> there remains much room for improvement in current techniques. In general, the difficulty of the general JSSP makes it very hard for conventional search-based methods to find near-optima in reasonable time. This has led to recent interest in using genetic algorithms (GAs) to address these problems.
Reference: <author> J. J. Grefenstette, R. Gopal, B. Rosmaita, & D. Van Gucht (1985). </author> <title> Genetic algorithms for the traveling salesman problem. </title> <editor> In J. J. </editor> <booktitle> Grefenstette (ed) Proceedings of the First International Conference on Genetic Algorithms and their Applications, </booktitle> <pages> pages 160-168. </pages> <address> San Mateo: </address> <publisher> Morgan Kaufmann, </publisher> <year> 1985. </year>
Reference-contexts: Our approach uses a variant of the ordinal representation introduced in <ref> (Grefenstette et al 1985) </ref> and used for the TSP. This representation has the considerable merit of producing only legal schedules under crossover and mutation. <p> Thus the notion of "a-th uncompleted job" is taken modulo the length of the circular list to find the actual uncompleted job. Note: instead of employing a circular list, <ref> (Grefenstette et al 1985) </ref> constrains alleles of the i-th chunk to range from 1 to N i + 1 in value; it is unclear how to directly extend this technique to a JSSP (with more than one machine), hence our use of a circular list.
Reference: <author> J. J. </author> <title> Grefenstette (1987). Incorporating Problem-Specific Knowledge into Genetic Algorithms. In L. Davis (ed) Genetic Algorithms and Simulated Annealing, </title> <address> San Mateo: </address> <publisher> Morgan Kaufmann, </publisher> <year> 1987, </year> <pages> pages 43-60. </pages>
Reference-contexts: Finally, we hope to have shown further promise for GA-based approaches to job-shop problems, and hope and expect that further improvements will be reported (by us and others) via the use of various problem-specific heuristic improvements, as well as via approaches based on different genome representations. For example <ref> (Grefenstette 1987) </ref> discusses the general idea of incorporating problem-specific knowledge into various parts of the GA, while (Beasley et al 1993), describes a GA approach to combinatorial problems based on an epistasis reducing representation, which may be of use for the JSSP.
Reference: <author> S. Louis, G. McGraw, & R. O. </author> <title> Wyckoff (1993). Case-based reasoning assisted explanation of genetic algorithm results. </title> <journal> J. Expt. Theor. Artif. Intell., </journal> <volume> Vol. 5, </volume> <year> 1993, </year> <pages> pp. 21-37. </pages>
Reference-contexts: Rescheduling from scratch is obviously to be avoided in the light of the large processing time required for large problems and the frequency of the need to reschedule. Also, sophisticated use of previous work is very difficult to achieve with a typical GA (although see <ref> (Louis et al 1993) </ref> for a recent attempt at storing schema information in a case base). Nominal use of previous work done could involve seeding; we have not yet tried this.
Reference: <author> J. F. Muth & G. L. </author> <title> Thompson (1963). Industrial Scheduling. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1963. </year>
Reference-contexts: Eg:, table 1 shows a standard 6 fi 6 benchmark problem (ie, j = 6; m = 6), from <ref> (Muth & Thompson 1963) </ref>. <p> OSS Problem Best Known Results: mean/best 4 fi 4 193 193 / 193 7 fi 7 438 447.1 / 439 15 fi 15 937 980.0 / 969 Table 6: Results on benchmark OSSPs The JSSP benchmark problems used in this paper can be obtained from <ref> (Muth & Thompson 1963) </ref>. The OSSP problems referred to in table 6 can be obtained via (Beasley 1990). The OR library referred to in the latter article is an electronic library from which may be obtained benchmarks for a wide range of OR problems.
Reference: <author> R. </author> <title> Nakano (1991). Conventional Genetic Algorithms for Job-Shop Problems. </title> <editor> In R. K. Belew & L. B. </editor> <booktitle> Booker (eds) Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <address> San Mateo: </address> <publisher> Mor-gan Kaufmann, </publisher> <year> 1991, </year> <pages> pages 474-479. </pages>
Reference-contexts: (eg: see (Carlier & Pin-son 1989)) produces good results but takes considerable computer time even for the 10 fi 10 problem because of the significant amount of schedule generation implicit in the method. (Davis 1985) was the first to suggest and demonstrate the feasibility of using a 2 Adapted from <ref> (Nakano 1991) </ref>. mark Paper Method 6x6 10x10 20x5 McMahon 75 B & B 55 972 1165 Baker 85 B & B 55 960 1303 Carlier 89 B & B 55 930 1165 Nakano 91 GA 55 965 1215 Table 2: Some published benchmark results GA on a simple JSSP, employing an <p> More recently, <ref> (Nakano 1991) </ref> used a conventional (binary) GA for the JSSP, supplemented with algorithms for interpreting and repairing genomes, and was successful in improving on the performance of some previously reported branch & bound search methods on benchmark problems, though did not improve on the best results found with these methods. <p> Our approach uses a variant of the ordinal representation introduced in (Grefenstette et al 1985) and used for the TSP. This representation has the considerable merit of producing only legal schedules under crossover and mutation. When applied to the JSSP, it produces better results than those of <ref> (Nakano 1991) </ref> with pleasingly small computational effort, and thus provides a convenient way to handle the rescheduling problem too. The rescheduling problem involves modifying a schedule in process of execution in order to take account of changed, canceled or new jobs. <p> In the two following tables, `average' figures refer to the mean result over 10 trials; these are not available for Nakano's technique. Also, Nakano's `without-forcing' result on the 10 fi 10 benchmark is read from a graph in <ref> (Nakano 1991) </ref>, hence our estimated error margin. <p> forcing, showing how, the representation we describe leads to better results when false competition is highly evident in both approaches 3 . 10 fi 10 20 fi 5 Average sol'n without GVOT (Fang et al) 985 1225 Best sol'n without GVOT (Fang et al) 960 1213 Best sol'n without forcing <ref> (Nakano 91) </ref> 1160 (10) | Table 4: Our approach vs. Nakano's, without GVOT With performance-enhancements in place, our results using gvot are compared with Nakano's results using forcing in table 5. <p> have not yet found other reported GA approaches which use the benchmarks. solutions without GVOT are marginally better than Nakano's with forcing. 10 fi 10 20 fi 5 Average sol'n with GVOT (Fang et al) 977 1215 Best sol'n with GVOT (Fang et al) 949 1189 Best sol'n with forcing <ref> (Nakano 91) </ref> 965 1215 Table 5: Our approach vs.
Reference: <author> N. J. </author> <title> Radcliffe (1990). Equivalence Class Analysis of Genetic Algorithms. </title> <journal> In Complex Systems Volume 5, </journal> <volume> No. 2, pp.183-205, </volume> <year> 1990. </year>
Reference-contexts: However, false competition will still be manifest with different representations of the same building block or, to be more correct, the same forma. A forma <ref> (Radcliffe 1990) </ref> can be viewed as any dimension along which two genomes are equivalent. False competition will then be relevant if the schemata in the representation do not directly coincide with the formae which (intuitively) represent the important building blocks; this is typically the case in sophisticated GA applications.
Reference: <author> D. Whitley, T. Starkweather, </author> & <title> D'Ann Fuquay (1989). Scheduling problems and traveling salesmen: The genetic edge recombination operator. </title> <editor> In J. D. </editor> <booktitle> Schaffer (ed) Proceedings of the Third International Conference on Genetic Algorithms and their Applications, </booktitle> <pages> pages 133-140. </pages> <address> San Mateo: </address> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year>
Reference-contexts: Meanwhile, the general success of GAs on other kinds of hard scheduling problems, such as the traveling salesman problem (TSP), started to lead to clues for more effective representations and operators for GA approaches. Eg: <ref> (Whitley et al 1989) </ref> defined a new edge recombination operator for the TSP, although noted that performance degraded when applied to more typical scheduling problems; (Bagchi et al 1991) used problem-specific information in the representation and genetic operators, addressing a limited form of JSSP in which certain batches of tasks must
References-found: 15

