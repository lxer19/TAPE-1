URL: ftp://cse.ogi.edu/pub/pacsoft/papers/effects.ps
Refering-URL: http://www.cse.ogi.edu/~dick/dick.html
Root-URL: http://www.cse.ogi.edu
Title: Towards Algebras of Encapsulated Effects  
Author: Richard B. Kieburtz John Launchbury 
Affiliation: Oregon Graduate Institute of Science Technology  
Abstract: Side effects in imperative programming languages are ubiquitous, which makes it difficult to reason about programs in other than operational terms. Functional programming languages, on the other hand, claim the advantage that equational logics are sufficient for reasoning, but at the price that useful effects, such as interactive input, exceptions, and explicit updates of state cannot be accommodated. This paper shows a way to bring these two worlds of programming style closer together, by characterizing the effects-producing semantics features that one wishes to use to design useful and efficient programs as algebras, whose axioms are given by sets of first-order equations whose variables range over program terms. 
Abstract-found: 1
Intro-found: 1
Reference: [BCG87] <author> Gerard Berry, Philippe Couronne, and Georges Gonthier. </author> <title> Synchronous programming of reactive systems: An introduction to ESTEREL. </title> <type> Technical Report 647, </type> <institution> INRIA, </institution> <month> March </month> <year> 1987. </year>
Reference-contexts: This axiom constrains the interaction of concurrency with other effects. It formalizes the synchrony hypothesis discussed by Berry <ref> [BCG87] </ref> and others.
Reference: [JD94] <author> Mark Jones and Luc Duponcheel. </author> <title> Composing monads. </title> <type> Technical Report YALEU/DCS/RR-1004, </type> <institution> Yale University, </institution> <month> De-cember </month> <year> 1994. </year>
Reference-contexts: It is well known that monads do not compose in general [Mog91a]. Nevertheless, composite monads do exist under a variety of particular circumstances. In some cases, more than one composite can be formed of the same constituent monads. Jones and Duponcheel <ref> [JD94] </ref> have studied conditions under which composite monads exist. We have independently confirmed most of their results through the use of slightly different methods, but the topic of composite monad structures is too lengthy and technical to be included in this paper.
Reference: [LHJ95] <author> Sheng Liang, Paul Hudak, and Mark Jones. </author> <title> Monad transformers and modular interpreters. </title> <booktitle> In Conference Record of the Twenty Second Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 1-11, </pages> <month> January </month> <year> 1995. </year>
Reference: [LJ95] <author> John Launchbury and Simon Peyton Jones. </author> <title> State in Haskell. Lisp and Symbolic Computation, </title> <note> (to appear) 1995. </note>
Reference-contexts: For some monads it presents no difficulties, such as the simple version of the state monad described earlier. In a richer state setting which provides first class variables (pointers) care must be taken with eval M . Thus the equivalent in Launchbury and Peyton Jones <ref> [LJ95] </ref> called runST is elevated to the position of a language construct with its own typing judgement to ensure references generated in one state thread are not accessed in another. In other monads it may not be possible to define eval M at all.
Reference: [Man76] <author> E. Manes. </author> <title> Algebraic Theories, volume 26 of Graduate Texts in Mathematics. </title> <publisher> Springer Verlag, </publisher> <year> 1976. </year>
Reference: [Mil78] <author> Robin Milner. </author> <title> A theory of type polymor-phism in programming. </title> <journal> Jour. of Computer and Systems Science, </journal> <volume> 17 </volume> <pages> 348-375, </pages> <year> 1978. </year>
Reference: [Mog91a] <author> Eugenio Moggi. </author> <title> An abstract view of programming languages. </title> <type> Technical Report LFCS-90-113, </type> <institution> Department of Computer Science, University of Edinburgh, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: It is well known that monads do not compose in general <ref> [Mog91a] </ref>. Nevertheless, composite monads do exist under a variety of particular circumstances. In some cases, more than one composite can be formed of the same constituent monads. Jones and Duponcheel [JD94] have studied conditions under which composite monads exist.
Reference: [Mog91b] <author> Eugenio Moggi. </author> <title> Notions of computations and monads. </title> <journal> Information and Computation, </journal> <volume> 93(1) </volume> <pages> 55-92, </pages> <month> July </month> <year> 1991. </year>
Reference: [TJ92] <author> J.-P. Talpin and P. Jouvelot. </author> <title> Polymorphic types, region and effect inference. </title> <journal> Journal of Functional Programming, </journal> <volume> 2 </volume> <pages> 245-271, </pages> <year> 1992. </year>
Reference: [Wad92] <editor> Philip Wadler. </editor> <booktitle> The essence of functional programming. In Conference Record of the Nineteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 1-14. </pages> <publisher> ACM Press, </publisher> <month> January </month> <year> 1992. </year>
References-found: 10

