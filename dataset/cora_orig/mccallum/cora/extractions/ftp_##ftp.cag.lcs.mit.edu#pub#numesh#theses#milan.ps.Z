URL: ftp://ftp.cag.lcs.mit.edu/pub/numesh/theses/milan.ps.Z
Refering-URL: http://cag-www.lcs.mit.edu:80/numesh/papers/theses/milan.html
Root-URL: 
Title: Scheduled Routing for the Numesh  
Author: by Milan Singh Minsky Stephen A. Ward 
Degree: 1986 Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Master of Science at the  All rights reserved. Author:  Certified by  Professor of Electrical Engineering and Computer Science Thesis Supervisor Accepted by Fredric R. Morgenthaler Chairman, Committee on Graduate Students  
Date: September 1993  August 6, 1993  
Affiliation: B.S., Electrical Engineering and Computer Science Massachusetts Institute of Technology,  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  c Massachusetts Institute of Technology 1993.  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [ACD + 91] <author> Anant Agarwal, David Chaiken, Godfrey D'Souza, Kirk Johnson, David Kranz, John Kubiatowicz, Kiyoshi Kurihara, Beng-Hong Lim, Gino Maa, Dan Nussbaum, Mike Parkin, and Donald Yeung. </author> <title> The MIT Alewife machine: A large-scale distributed-memory multiprocessor. </title> <booktitle> In Proceedings of Workshop on Scalable Shared Memory Multiprocessors. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year> <note> An extended version of this paper has been submitted for publication, and appears as MIT/LCS Memo TM-454, </note> <year> 1991. </year>
Reference-contexts: Several popular concurrent architectures including shared memory machines such as the M.I.T. Alewife and Stanford Dash architectures as well as distributed memory model based systems such as the M.I.T. J Machine and Caltech Cosmic Cube, <ref> [ACD + 91, D + 89, DS87, G + 91, Sei85] </ref> have opted for a general purpose network design which is optimized for a dynamic approach to handling network traffic.
Reference: [Aga91] <author> Anant Agarwal. </author> <title> Limits on interconnection network performance. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 2(4) </volume> <pages> 398-412, </pages> <month> Oct </month> <year> 1991. </year>
Reference-contexts: A Model For Direct Buffered Networks Models of traffic congestion in a data network are often developed in terms of the statistics of the arrival of packets at the network queues. In a model developed by <ref> [Aga91] </ref>, the author derives expressions for network performance in the presence of contention for a direct buffered network using oblivious wormhole routing.
Reference: [Ber] <author> M.R.C.M. Berkelaar. </author> <title> Lp solve, a shareware program to solve mixed integer linear programming problems. </title> <institution> Eindhoven University of Technology, Design Automation Section, michel@es.ele.tue.nl. </institution>
Reference-contexts: Linear Programming Module: lp solve Given the constraints described in the previous section, it is straightforward to set up a system of equations and associated objective functions which can then be solved by a linear programming module. Lp solve <ref> [Ber] </ref>, a shareware program integrated into the current system to handle message scheduling problems, was developed to solve mixed integer linear programming problems. Lp solve uses a `Simplex' algorithm and sparse matrix methods for pure LP problems.
Reference: [D + 89] <author> W. J. Dally et al. </author> <title> The J-Machine: A fine-grain concurrent computer. </title> <booktitle> In Information Processing 89, </booktitle> <publisher> Elsevier, </publisher> <year> 1989. </year>
Reference-contexts: Several popular concurrent architectures including shared memory machines such as the M.I.T. Alewife and Stanford Dash architectures as well as distributed memory model based systems such as the M.I.T. J Machine and Caltech Cosmic Cube, <ref> [ACD + 91, D + 89, DS87, G + 91, Sei85] </ref> have opted for a general purpose network design which is optimized for a dynamic approach to handling network traffic.
Reference: [Dah90] <author> E. Denning Dahl. </author> <title> Mapping and compiled communication on the connection machine. </title> <journal> IEEE, </journal> <pages> pages 756-766, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Maximal matching, a general technique applied to the problem of optimally routing network traffic has been used by researchers at the University of Oregon [LRea90] and by <ref> [Dah90] </ref> in a comparison of Connection Machine [Hil85] performance of some scientific computing code with and without static routing.
Reference: [DS87] <author> W. J. Dally and C. L. Seitz. </author> <title> Deadlock-free message routing in multiprocessor interconnection networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(5):547-553, </volume> <month> May </month> <year> 1987. </year>
Reference-contexts: Several popular concurrent architectures including shared memory machines such as the M.I.T. Alewife and Stanford Dash architectures as well as distributed memory model based systems such as the M.I.T. J Machine and Caltech Cosmic Cube, <ref> [ACD + 91, D + 89, DS87, G + 91, Sei85] </ref> have opted for a general purpose network design which is optimized for a dynamic approach to handling network traffic. <p> an entire message in node memory before the message can be transferred to the next node in its path, cut through routing which still requires buffering at intermediate nodes when messages collide but which allows messages to traverse several hops if the links involved are not busy, and wormhole routing <ref> [DS87] </ref> which is essentially a blocking version of cut through routing. The head of a message advances along its path as long as the required links are available. If the message encounters a link which is occupied, the message blocks. <p> Since this technique uses only local information to decide which way to route a message, it is possible for it to make suboptimal decisions. Offline routing can use global information to make routing decisions at compile time. Adaptive routing is also susceptible to deadlock. Deadlock Avoidance Deadlock <ref> [DS87] </ref> is a condition in which traffic can not advance in the network because of a circularity in network resource usage. Routing techniques which are susceptible to deadlock must reliably avoid it.
Reference: [Duj92] <author> Rajeev Dujari. </author> <title> Parallel viterbi search algorithm for speech recognition. </title> <type> Master's thesis, </type> <institution> MIT, 545 Technology Square, </institution> <address> Cambridge MA 02139, </address> <year> 1992. </year>
Reference-contexts: As an example real-time application, Figure 2-2 shows a task level description of code written for the NuMesh as part of an implementation of a real time speech recognition system. <ref> [Duj92] </ref>. <p> In future versions of this system the data shown here travelling thru a linear pipeline from host to nodes 1 - 7 would be simultaneously transmitted from the host node 0 to the destination Viterbi nodes. 1 which had previously been manually implemented for the NuMesh environment <ref> [Duj92] </ref> CHAPTER 5. RESULTS 50 CHAPTER 5. RESULTS 51 CHAPTER 5. RESULTS 52 CHAPTER 5.
Reference: [Fet90] <author> Michael A. Fetterman. </author> <title> Backend code generation with highly accurate timing models for numesh. </title> <type> Master's thesis, </type> <institution> MIT, 545 Technology Square, </institution> <address> Cambridge MA 02139, </address> <year> 1990. </year>
Reference-contexts: A high performance approach <ref> [Fet90] </ref> relies on a precise cycle count of the computation performed on each node's processor to efficiently schedule communication between the nodes.
Reference: [Fox88] <author> Geoffrey C. Fox. </author> <title> Solving Problems On Concurrent Processors: Volume I. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: In systems which support dynamic placement, changing communication and processing requirements can result in task migration from node to node at run time <ref> [Fox88] </ref>. Static placement however tries to map a group of tasks to processor nodes based on information about an application's communication requirements specified at compile time.
Reference: [G + 91] <author> D. Gustavson et al. </author> <title> Scalable Coherent Interface: Logical, physical, and cache coherence specifications, </title> <month> January </month> <year> 1991. </year> <note> Preliminary draft, </note> <institution> P1596 Working Group of the IEEE Microprocessor Standards Committee. </institution> <type> 66 BIBLIOGRAPHY 67 </type>
Reference-contexts: Several popular concurrent architectures including shared memory machines such as the M.I.T. Alewife and Stanford Dash architectures as well as distributed memory model based systems such as the M.I.T. J Machine and Caltech Cosmic Cube, <ref> [ACD + 91, D + 89, DS87, G + 91, Sei85] </ref> have opted for a general purpose network design which is optimized for a dynamic approach to handling network traffic.
Reference: [GJ79] <author> M.R. Garey and D.S. Johnson. Computers and Intractability. W. H. Freeman and Company, </author> <year> 1979. </year>
Reference-contexts: Task assignment formulations are known to be NP-complete in all but a very few restricted cases <ref> [GJ79] </ref>. Solutions to this assignment problem impact the resulting routing and scheduling problems and optimal placement of tasks is a key component of any system designed to efficiently allocate network resources (whether statically or dynamically).
Reference: [Hil85] <author> D.W. Hillis. </author> <title> The Connection Machine. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass, </address> <year> 1985. </year>
Reference-contexts: Maximal matching, a general technique applied to the problem of optimally routing network traffic has been used by researchers at the University of Oregon [LRea90] and by [Dah90] in a comparison of Connection Machine <ref> [Hil85] </ref> performance of some scientific computing code with and without static routing. Routing by maximal matching proceeds by examining in a given cycle, the messages emitted by each node in the system and building a bipartite graph with messages as source nodes and links as destination nodes of the graph.
Reference: [HL87] <author> N. Hasan and C.L. Liu. </author> <title> A force-directed global router. </title> <booktitle> In Advanced Research in VLSI. </booktitle> <publisher> The MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: Computing link utilization as described above avoids this problem by incorporating temporal information into route assignment. Since link utilization includes message activity times, the value computed is actually an estimate of the fraction of time a link will be occupied. Force Driven Routing In <ref> [HL87] </ref>, the authors introduce a global router for IC layout based on the novel idea of allocating paths by computing the trajectory of a moving particle in a force field created by point masses representing the path source and destination. This method has some advantages.
Reference: [Hon92] <author> Frank Honore. </author> <title> Redesign of a prototype numesh module. M.I.T. </title> <type> Bachelor's Thesis, </type> <institution> EECS, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: An important goal of the NuMesh project is to study the degree to which dynamic routing is a necessary component of parallel computer network design. This research goal is being pursued at several different levels. At the hardware level several different network node designs <ref> [Hon92, Pez92] </ref> are currently being explored in order to decide what hardware mechanisms will best support the mix of communication requirements characteristic of applications typically executed on parallel machines.
Reference: [Hor71] <author> W. A. Horn. </author> <title> Some simple scheduling algorithms. </title> <journal> Naval Journal of Operations Research, </journal> <month> February </month> <year> 1971. </year>
Reference-contexts: This formulation is based on standard scheduling techniqes used to schedule processes on multiple processors <ref> [Hor71] </ref>. If the problem is feasible, solution of the formulation generates cycle by cycle switching schedules for communication processors. The technique has the advantage of expressing the problem globally. All constraints are solved for simultaneously.
Reference: [KJV83] <author> S. Kirkpatrick, C.D. Gelatt Jr., </author> <title> and M.P. Vecchi. Optimization by simulated annealing. </title> <journal> Science, </journal> 200(4598) 671-680, May 1983. 
Reference-contexts: These results are discussed in more detail in Chapter 5. If mappings are not available, the placement module tries to optimally place tasks using simulated annealing. Simulated Annealing Simulated annealing <ref> [KJV83] </ref> provides a powerful method of solving optimization problems. The technique, which is rooted in statistical mechanics, has been used extensively to optimize the allocation of resources in computer design. Simulated annealing uses iterative improvement to arrive at a system configuration which minimizes some objective function.
Reference: [KP93] <author> Pekka A. Kauranen and John S. Pezaris. </author> <title> Graph embedding to the diamond lattice. </title> <booktitle> In Proceedings of the Student VLSI Conference, </booktitle> <publisher> M.I.T., </publisher> <year> 1993. </year>
Reference-contexts: An even more detailed placement algorithm might schedule all the communication and calculate the placement cost based 5 For which canned mappings did not exist at the time this subsystem was being developed, although they are an area of active exploration within the NuMesh project <ref> [KP93] </ref> CHAPTER 4. IMPLEMENTATION OF THE BACKEND. 31 on actual collisions between messages in both space and time. Clearly the placement algorithm's running time is strongly affected by the choice of cost function. routing and rerouting in the current system.
Reference: [Kru83] <author> Clyde P. Kruskal. </author> <title> The performance of multistage interconnection networks for multiprocessors. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-32(12):1091-1098, </volume> <month> Dec </month> <year> 1983. </year>
Reference-contexts: These second order effects are hard to model; the above expression for latency has been compared to simulation results under varying conditions and has proven surprisingly accurate. A Model For Indirect Buffered Networks In <ref> [Kru83] </ref>, a model applicable to buffered Banyan networks results in an equation for average network transit time: T = log k N t k Where t k , the average transit time of a packet through a kXk switch, is given by: t k = t r + t c k
Reference: [Kun82] <author> H. T. Kung. </author> <title> Why systolic architectures. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 37-44, </pages> <month> January </month> <year> 1982. </year>
Reference-contexts: While this approach results in general purpose network architectures, there is a potential loss in network performance for applications with highly predictable communication needs. An alternative approach, systolic architectures <ref> [Kun82] </ref> uses compile-time approaches to communication scheduling that offer potential cost/performance advantages in applications where communication patterns are largely predictable. An important goal of the NuMesh project is to study the degree to which dynamic routing is a necessary component of parallel computer network design. <p> The aggregate CFSM circuitry constitutes a distributed switching network that is customized for each application; its programmability allows this customization to be highly optimized. CHAPTER 3. THE NUMESH 22 3.2 Comparison With Systolic Arrays Arrays of synchronous processors connected together in fixed interconnection topologies <ref> [Kun82] </ref> offer a high peformance environment for certain kinds of applications. Code which can be partitioned into a tightly coupled set of computations exchanging data in fixed communication patterns fits very well into this model of distributed computing.
Reference: [Kun88] <author> H. T. Kung. </author> <title> Deadlock avoidance for systolic communication. </title> <booktitle> In Proc. 15th Symposium on Computer Architecture, </booktitle> <address> Honolulu, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: Message MA can not be waiting for resources currently occupied by another message, MB which is in turn waiting for resources occupied by message MA. A method to avoid deadlock when the existence of communication operations but not their execution times are predictable at compile time is outlined in <ref> [Kun88] </ref>. Developed for a systolic communication environment, this technique defines a `crossing off' procedure which analyzes a given communication program to determine if it is deadlock free.
Reference: [Lam89] <author> M. Lam. </author> <title> A Systolic Array Optimizing Compiler. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1989. </year>
Reference-contexts: Software technology developed for this kind of environment may offer a good starting point for further development of compilation technology which predicts and schedules communication in the broader set of topologies and applications currently being studied in the NuMesh project. A scheduling compiler in particular <ref> [Lam89] </ref> as well as improvements to the lower level static routing methods implemented for this thesis will need to be implemented. 3.3 The NuMesh Programming Environment: Work to Date Previous work on the NuMesh programming environment has centered on a static programming model.
Reference: [LMP + 91] <author> Tom Leighton, Fillia Makedon, Serge Plotkin, Clofford Stein, Eva Tardos, and Spyros Tragoudas. </author> <title> Fast approximation algorithms for multicommodity flow problems. </title> <booktitle> In Proceedings of the 23rd Annual Symposium on Theory of Computing, </booktitle> <pages> pages 101-111, </pages> <year> 1991. </year>
Reference-contexts: Multiflow Approach Probably the most promising approach to solving the problem of optimally allocating routes and transmission intervals to messages is the use of network flow algorithms. Recent work by <ref> [LMP + 91] </ref> presents a fast method for solving the multicommodity flow problem.
Reference: [Lo88] <author> Virginia Mary Lo. </author> <title> Heuristic algorithms for task assignment in distributed systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(11) </volume> <pages> 1384-1397, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: Graph theoretic techniques to derive optimal mappings for regular communication topologies exist and are often available as system level software in parallel machine environments <ref> [Lo88] </ref>. When the communication topology is irregular, however, there is no standard way of assigning tasks to physical processors. The approach for this thesis has been to implement a task assignment module which automates placement when required using a very simple version of the more general method of simulated annealing.
Reference: [LRea90] <author> Virginia M. Lo, Sanjay Rajopadhye, and et. al. Oregami: </author> <title> Software tools for mapping parallel computations to parallel architectures. </title> <type> Technical Report CIS-TR-89-18, </type> <institution> Dept. Of Computer Scienve, University of Oregon, Eugene, Oregon 97403-1202, </institution> <year> 1990. </year>
Reference-contexts: The approach taken here is similar to, though less sophisticated than the work done to develop LaRCS <ref> [LRea90] </ref>, a language to express regular communication structures. T (ask) T (raffic) D (escription) L (anguage) is a simple intermediate representation in which static communication patterns characteristic of a particular application can be expressed as functional definitions in a Lisp like syntax. <p> Maximal matching, a general technique applied to the problem of optimally routing network traffic has been used by researchers at the University of Oregon <ref> [LRea90] </ref> and by [Dah90] in a comparison of Connection Machine [Hil85] performance of some scientific computing code with and without static routing.
Reference: [Met91] <author> Chris Metcalf. </author> <title> A NuMesh simulator. </title> <note> NuMesh Systems Memo 4, </note> <institution> MIT Computer Architecture Group, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: As test examples I chose some simple problems which had previously been hand-coded for the NuMesh environment. An implementation of the Multigrid algorithm was programmed manually and simulated in the NuMesh simulation environment <ref> [Met91] </ref> when the simulator was first developed. The Jacobi relaxation problem which has similar, though less complicated, communication characteristics was expressed in TTDL and routed and scheduled by the backend.
Reference: [Nga89] <author> John Y. Ngai. </author> <title> A Framework for Adaptive Routing in Multicomputer Networks. </title> <type> PhD thesis, </type> <institution> California Institute of Technology, </institution> <year> 1989. </year> <note> BIBLIOGRAPHY 68 </note>
Reference-contexts: While oblivious routing determines a single possible route based on a message's source and destination, adaptive routing strategies exploit multiple available paths from source to destination. Simulation of adaptive routing techniques <ref> [Nga89] </ref> have shown that the point at which a network saturates under high load conditions shifts by a factor of two when adaptive rather than oblivious routing is used. However the complexity of switching decisions made by routers increases when adaptive routing techniques are used.
Reference: [Ngu91] <author> John Nguyen. </author> <title> A C interface for NuMesh. </title> <note> NuMesh Systems Memo 3, </note> <institution> MIT Computer Architecture Group, </institution> <month> February </month> <year> 1991. </year>
Reference-contexts: A C-language interface for writing programs with flow controlled communication requirements has also been implemented <ref> [Ngu91] </ref>. The user of this system is able to write programs in a restricted subset of C and produce compiled processing element code as well as binary executables for CFSMs. This thesis extends some of the language and user interface components required to express static communication.
Reference: [Opp75] <author> Alan V. Oppenheim. </author> <title> Digital Signal Processing. </title> <publisher> Prentice Hall, </publisher> <year> 1975. </year>
Reference-contexts: The Jacobi-3d function was invoked on a three dimensional network object to generate a graph representing the communication pattern and this graph was passed to the backend. 5.2 One Dimensional FFT Problem The Fast Fourier Transform (FFT) <ref> [Opp75] </ref> is a common operation in real time processing of video and audio signals. Figure 5-10 shows the communication graph for a decomposition of a one dimensional FFT. Computation times are shown in the circles representing tasks.
Reference: [Pez92] <author> John S. Pezaris. </author> <title> Numesh cfsm revision 2: A comparative analysis of three candidate architectures. </title> <type> Master's thesis, </type> <institution> MIT, 545 Technology Square, </institution> <address> Cambridge MA 02139, </address> <year> 1992. </year>
Reference-contexts: An important goal of the NuMesh project is to study the degree to which dynamic routing is a necessary component of parallel computer network design. This research goal is being pursued at several different levels. At the hardware level several different network node designs <ref> [Hon92, Pez92] </ref> are currently being explored in order to decide what hardware mechanisms will best support the mix of communication requirements characteristic of applications typically executed on parallel machines.
Reference: [PN93] <author> Gill Pratt and John Nguyen. </author> <title> Distributed synchronous clocking. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <year> 1993. </year>
Reference-contexts: Each CFSM also contains an oscillator to generate the node's clock (the local processor has the option of an independent clock), and circuitry to control the phase of the oscillator. The clocks can be kept globally synchronized by any of a number of methods <ref> [PN93] </ref>). <p> The actual degree of synchronization between processor clocks and between the processor and network clock is assumed to be quite accurate <ref> [PN93] </ref>. Message objects created by the execution of the special forms write-stream and read-stream are assigned release and deadline times based on the execution environment's representation of time. A short description defining the semantics of each primitive form and some simple programming examples are presented in the following section.
Reference: [PSW91] <author> C. Peterson, J. Sutton, and P. Wiley. </author> <title> iWarp: A 100-MOPS, LIW multiprocessor for multicomputers. </title> <booktitle> IEEE Micro, </booktitle> <pages> pages 26-29, 81-87, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Code which can be partitioned into a tightly coupled set of computations exchanging data in fixed communication patterns fits very well into this model of distributed computing. Reconfigurable communication paths have not been a part of traditional systolic array designs. However the IWarp <ref> [PSW91] </ref> computer does allow 1D and 2D mesh connectivity between computing units.
Reference: [PW92] <author> Gill Pratt and S. A. Ward. </author> <title> Rationally clocked computing. Internal Memo, </title> <institution> MIT Computer Architecture Group, </institution> <year> 1992. </year>
Reference-contexts: This representation is then used to assign release and deadline times. Time in the current system is assumed to be expressed in terms of network clock cycles, and the processor and network are assumed to have an integer ratio <ref> [PW92] </ref>. The actual degree of synchronization between processor clocks and between the processor and network clock is assumed to be quite accurate [PN93]. Message objects created by the execution of the special forms write-stream and read-stream are assigned release and deadline times based on the execution environment's representation of time.
Reference: [PWM + 93] <author> Gill Pratt, Stephen Ward, Chris Metcalf, John Nguyen, and John Pezaris. </author> <title> The diamond interconnect. In process, </title> <year> 1993. </year>
Reference-contexts: IMPLEMENTATION OF THE BACKEND. 30 was desired, 5 automating the placement process using simulated annealing seemed like a useful approach. The diamond lattice is currently being studied within the NuMesh project as an alternative four neighbor topology. Details of the topology can be found in <ref> [PWM + 93, WAD + 93] </ref> The task placement module allows a two-fold strategy for placing. If a mapping from a particular logical configuration to a physical network has been defined within TTDL, it is used to place tasks.
Reference: [SA91] <author> Shridhar B. Shukla and Dharma P. Agrawal. </author> <title> Scheduling pipelined communication in distributed memory multiprocessors for real-time applications. </title> <booktitle> In 18th Annual ACM SIGARCH Computer Architecture News, </booktitle> <volume> Vol. 19 No. 3, </volume> <year> 1991. </year>
Reference-contexts: Applications which are periodic and have real time constraints are targeted in particular. Methods from an approach developed by researchers at the North Carolina State University <ref> [SA91] </ref>, called scheduled routing have been adapted and modified here in a first attempt to provide network resource allocation software for the NuMesh environment. This thesis is divided into 6 chapters. <p> Especially if they are executed in a pipelined fashion, these applications are susceptible to throughput loss if the network's routing protocol handles data transfers without regard to the hard real time constraints governing the generation and arrival times of messages communicated through the network. In <ref> [SA91] </ref> the authors argue that cut-through and wormhole routing techniques, while offering minimum latency for traffic under light load conditions, do not meet real time constraints when the network loading is high. <p> The framework for the system, tasks are first placed, routes are then assigned, and finally messages scheduled on network links, as well as the algorithms used to solve the scheduling problems use scheduled routing techniques described in <ref> [SA91] </ref>. These techniques were originally developed to solve the problem of handling high bandwidth communication for vision processing code with hard real time constraints. <p> If the multicommodity flow formulation can be modified to accomodate message traffic which starts and stops intermittently it may be very useful in the current context. 4.2.4 Linear Programming Formulation of the Scheduling Problem <ref> [SA91] </ref> have developed a linear programming formulation of the problem of scheduling messages onto network links once the messsages have been assigned routes. This formulation is based on standard scheduling techniqes used to schedule processes on multiple processors [Hor71].
Reference: [Sei85] <author> C. L. Seitz. </author> <title> The Cosmic Cube. </title> <journal> Communications of the ACM, </journal> <volume> 28(1), </volume> <month> January </month> <year> 1985. </year>
Reference-contexts: Several popular concurrent architectures including shared memory machines such as the M.I.T. Alewife and Stanford Dash architectures as well as distributed memory model based systems such as the M.I.T. J Machine and Caltech Cosmic Cube, <ref> [ACD + 91, D + 89, DS87, G + 91, Sei85] </ref> have opted for a general purpose network design which is optimized for a dynamic approach to handling network traffic.
Reference: [Shu91] <author> S. B. Shukla. </author> <title> On Parallel Processing For Real-Time Artificial Vision. </title> <type> PhD thesis, </type> <institution> North Carolina State University, </institution> <year> 1991. </year>
Reference-contexts: In particular, the peak link utilization <ref> [Shu91] </ref> is required to be below one at the completion of the routing phase. This requirement increases the likelihood of computing a feasible set of switching schedules for the communication finite state machine during the scheduling phase. <p> Once the paths are assigned, a link utilization function <ref> [Shu91] </ref> is calculated for each link in the network. This utilization function measures the amount of traffic supported by each link in the entire time interval during which traffic is being analyzed. <p> Taking a longer than physically shortest path is a degree of freedom available to messages which do not affect the critical path of the computation. If messages are forced to choose from a precomputed set of physically shortest paths, as in <ref> [Shu91] </ref>, this flexibility is not exploited. Rerouting Using Weighted Shortest Path Once the placement phases and initial routing phases are complete, the simulated annealing code is reused yet again in a rerouting phase.
Reference: [Ste90] <author> Guy Steele. </author> <title> Common Lisp The Language. </title> <institution> Digital Equipment Corp., </institution> <year> 1990. </year>
Reference-contexts: A regular expression describes the traffic which flows along a stream during a particular communication phase. The regular expression represents statically the traffic which will be present on a stream during a real time interval. The TTDL intermediate form evaluation environment is written in Common Lisp <ref> [Ste90] </ref> The choice of Common Lisp as an intermediate form and interpretation environment has several advantages over using C. 3 Since parsing and lexical analysis are implemented as part of the primitive Common Lisp read facility, this analysis need not be reimplemented as part of the current system.
Reference: [Tho87] <author> Clarke D. Thompson. </author> <title> Experimental results for a linear program global router. </title> <journal> In Computers and Artificial Intelligence, </journal> <volume> Vol. 6, No. 3., </volume> <pages> pages 229-242. </pages> <year> 1987. </year>
Reference-contexts: It may be worthwhile to test this algorithm or some variant as an alternative routing strategy for the current system. CHAPTER 4. IMPLEMENTATION OF THE BACKEND. 38 A Linear Program Global Router <ref> [Tho87] </ref> presents a linear programming formulation for a global router. This approach, similar to the one adopted here for scheduling has the advantage that the entire problem is solved globally. Nets are routed simultaneously rather than sequentially, with no backtracking. <p> As an objective function I chose the excess capacity on network links. This choice of objective function is similar to the approach taken by <ref> [Tho87] </ref>, where a linear programming formulation for global routing of VLSI components is developed. The excess capacity of a link is the difference between the amount of traffic allocated to the link in a given interval and the size of the interval.
Reference: [Tro89] <author> Sean Edwin Trowbridge. </author> <title> A programming environment for the numesh computer. </title> <type> Master's thesis, </type> <institution> MIT, 545 Technology Square, </institution> <address> Cambridge MA 02139, </address> <year> 1989. </year>
Reference-contexts: Language and user interface issues associated with providing the programmer with an environment in which to develop programs whose dynamic behavior does not depend on run-time data have also been investigated in some detail <ref> [Tro89] </ref> Results include a pictorial stream-based front end implemented for the development of real time applications such as digital signal processing for speech and video applications. A C-language interface for writing programs with flow controlled communication requirements has also been implemented [Ngu91].
Reference: [WAD + 93] <author> Steve Ward, Karim Abdalla, Rajeev Dujari, Michael Fetterman, Frank Honor e, Ricardo Jenez, Philippe Laffont, Ken Mackenzie, Chris Metcalf, Milan Minsky, John Nguyen, John Pezaris, Gill Pratt, and Russell Tessier. </author> <title> The numesh: A modular scalable communications substrate". </title> <booktitle> In The International Conference on Supercomputing, </booktitle> <year> 1993. </year>
Reference-contexts: IMPLEMENTATION OF THE BACKEND. 30 was desired, 5 automating the placement process using simulated annealing seemed like a useful approach. The diamond lattice is currently being studied within the NuMesh project as an alternative four neighbor topology. Details of the topology can be found in <ref> [PWM + 93, WAD + 93] </ref> The task placement module allows a two-fold strategy for placing. If a mapping from a particular logical configuration to a physical network has been defined within TTDL, it is used to place tasks. <p> Many applications <ref> [WAD + 93] </ref> require flow controlled communication, where message transmission times are not well defined at compile time but the order of communication is predictable. In such cases, it may be worthwhile to extract contention information from a dependency analysis of the communication.
References-found: 40

