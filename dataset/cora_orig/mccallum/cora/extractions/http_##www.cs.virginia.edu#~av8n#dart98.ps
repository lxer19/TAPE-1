URL: http://www.cs.virginia.edu/~av8n/dart98.ps
Refering-URL: http://www.cs.virginia.edu/~av8n/research.html
Root-URL: http://www.cs.virginia.edu
Title: Resource Management and Transaction Model in BeeHive  
Author: Chenyang Lu, James M. Patten, Sang H. Son, John A. Stankovic, Norris P. Thomlinson, Anand Victor, and Robert H. Zimmerman 
Address: Charlottesville, VA 22903  
Affiliation: Department of Computer Science University of Virginia  
Abstract: The confluence of computers, communications and databases is quickly creating a global virtual database where many applications require real-time access to both temporally accurate and multimedia data. We are developing a global virtual database, called BeeHive, which is enterprise -specific and offers features along real-time, fault tolerance, quality of service for audio and video, and security dimensions. Support of all these features and tradeoffs between them will provide significant improvement in performance and functionality over browsers, browsers connected to databases, and, in general, today's distributed databases. In this paper, we describe the architecture of the BeeHive Resource Manager and the BeeHive Transaction Object Model. We also present the current implementation status. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. J. Carey, D. J. DeWitt, M. J. Franklin, N. E. Hall, M. L. McAuliffe, J. F. Naughton, D. T. Schuh, M. H. Solomon, C. K. Tan, O. G. Tsatalos, S. J. White, and M. J. Zwilling, </author> <title> Shoring Up Persistent Applications. </title> <booktitle> SIGMOD '94. Proceedings of the 1994 ACM SIGMOD international conference on Management of data, </booktitle> <pages> pp. 383-394 </pages>
Reference-contexts: The whole platform is connected by a 100 Mbps ethernet. It is also connected to the Internet via a vBNS port. The BeeHive development plan has been divided into five phases that are described below. Phase Zero: This phase involved running the Shore Storage Manager (SSM) <ref> [1] </ref> obtained with source code from the University of Wisconsin. The code has been modified to develop an initial version of the BeeHive Database Server (see Figure 3), which functions as a value added server over the SSM.
Reference: [2] <author> Y. Kim and S. H. Son, </author> <title> Supporting Predictability in Real-Time Database Systems, </title> <booktitle> IEEE Real-Time Technology and Application Symposium (RTAS'96), </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: The Real-time requirement includes start time, deadline, periodicity information (i.e., period for periodic transactions, or the minimum inter-arrival time for sporadic transactions), real-time type based on the effect of missing its deadline (i.e., hard, firm, or soft) and guaranteed level 1 <ref> [2] </ref> for firm or soft real-time transactions. The QoS requirement 2 includes frame size and resolution. The security requirement includes security levels, encryption, authentication and authorization.
Reference: [3] <author> S.H. Son and C. Chaney, </author> <title> Supporting the Requirements for Multilevel Secure and Real-Time Databases in Distributed Environments, Database Security: Status and Prospects, T.Y. </title> <editor> Lin and S. Qian (eds.), </editor> <publisher> Chapman and Hall Publishing. </publisher> <year> 1998 </year>
Reference-contexts: The Java GUI in addition to the Transaction Requirements interface shown in Figure 7, will also have interfaces for a Workload Generator and also to display Monitor statistics. Simultaneously, research is also being carried out on the security issues pertinent to BeeHive <ref> [3] </ref>. Phase Two: This will involve implementing increased support for real-time audio and video to and from the database. Work will also be carried out on implementing time cognizant concur-rency control protocols for the BeeHive Storage Manager.
Reference: [4] <author> J. A. Stankovic and S. H. Son, </author> <title> Architecture and Object Model for Distributed Object-Oriented Real-Time Databases, </title> <booktitle> IEEE Symposium on Object-Oriented Real-Time Distributed Computing (ISORC'98), </booktitle> <address> Kyoto, Japan, </address> <month> April </month> <year> 1998. </year>
Reference-contexts: Included is the need to provide end-to-end guarantees to a diverse set of real-time and non-real-time applications over the current and the next generation Internet. The collection of software services that support this vision is called BeeHive <ref> [4, 5] </ref>. The BeeHive system that is currently developed includes an external interface from BeeHive to open databases on Internet [6], a Java graphical user interface, an object-oriented test database, a database server and a resource management system. An overview of BeeHive system design can be found at [4, 5]. 1 <p> called BeeHive <ref> [4, 5] </ref>. The BeeHive system that is currently developed includes an external interface from BeeHive to open databases on Internet [6], a Java graphical user interface, an object-oriented test database, a database server and a resource management system. An overview of BeeHive system design can be found at [4, 5]. 1 In this paper, we present in section 2 the architecture of the BeeHive resource manager. The BeeHive Transaction Object Model (BTOM) is described in section 3. Current implementation of BeeHive is covered in section 4 and we conclude this paper by summarizing some future work. 2. <p> Based on these comparatively primitive resource management systems, BeeHive implements a sophisticated end-to-end adaptive resource management system that supports applications with widely varying service requirements, such as requirements on timeliness, QoS, fault tolerance, and security. A high level design of BeeHive resource management system can be found in <ref> [4] </ref>. The resource manager of BeeHive, referred to as the BeeKeeper, is the central entity of the resource management process. <p> This information includes transaction execution time, resource requirements, and other constraints that must be considered in resource management, scheduling, and trading-off among different types of requirements. An overview of BOM including the BeeHive objects, transactions and rules can be found in <ref> [4] </ref>. In this section we describe the BeeHive transaction object model (BTOM). A transaction is one element of the BeeHive system that brings information from applications to objects, and returns information from objects to applications.
Reference: [5] <author> J. A. Stankovic, S. H. Son and J. Liebeherr, BeeHive: </author> <title> Global Multimedia Database Support for Dependable, Real-Time Applications, chapter in Real-Time Databases and Information Systems, </title> <editor> A. Bestavros, K. J. Lin, and S .H. Son (eds.), </editor> <publisher> Kluwer Academic Publishers, </publisher> <year> 1997, </year> <pages> pp. 409-422. </pages>
Reference-contexts: Included is the need to provide end-to-end guarantees to a diverse set of real-time and non-real-time applications over the current and the next generation Internet. The collection of software services that support this vision is called BeeHive <ref> [4, 5] </ref>. The BeeHive system that is currently developed includes an external interface from BeeHive to open databases on Internet [6], a Java graphical user interface, an object-oriented test database, a database server and a resource management system. An overview of BeeHive system design can be found at [4, 5]. 1 <p> called BeeHive <ref> [4, 5] </ref>. The BeeHive system that is currently developed includes an external interface from BeeHive to open databases on Internet [6], a Java graphical user interface, an object-oriented test database, a database server and a resource management system. An overview of BeeHive system design can be found at [4, 5]. 1 In this paper, we present in section 2 the architecture of the BeeHive resource manager. The BeeHive Transaction Object Model (BTOM) is described in section 3. Current implementation of BeeHive is covered in section 4 and we conclude this paper by summarizing some future work. 2. <p> Figure 5, shows a list of airplane objects in the database, a partial listing of the data associated with an airplane object, and the video of that airplane object being played. The BeeHive Cogency Monitor <ref> [5] </ref> that acts as a gateway between BeeHive and the external Internet has been completed. The cogency monitor filters, shapes, and controls the flow of information to guarantee specified properties along the real-time, fault tolerance, quality of service, and security dimensions [6].
Reference: [6] <author> J. A. Stankovic, S. H. Son, and C. D. Nguyen, </author> <title> The Cogency Monitor: An External Interface Architecture for a Distributed Object-Oriented Real-Time Database System. </title> <booktitle> IEEE Real-Time Technology and Application Symposium (RTAS'98), </booktitle> <address> Denver, Co, </address> <month> June </month> <year> 1998. </year>
Reference-contexts: The collection of software services that support this vision is called BeeHive [4, 5]. The BeeHive system that is currently developed includes an external interface from BeeHive to open databases on Internet <ref> [6] </ref>, a Java graphical user interface, an object-oriented test database, a database server and a resource management system. An overview of BeeHive system design can be found at [4, 5]. 1 In this paper, we present in section 2 the architecture of the BeeHive resource manager. <p> The guaranteed levels of hard and soft real-time transactions can be specified as 1 and 0, respectively 2 There are different layers of QoS (i.e., the user QoS, application QoS, system QoS and device QoS) <ref> [6] </ref>. The QoS requirement described here is user QoS 5 transaction. For example, it may be appropriate for a transaction to execute only if some specified event has occurred, such as after the successful execution of a related transaction. 4. <p> The BeeHive Cogency Monitor [5] that acts as a gateway between BeeHive and the external Internet has been completed. The cogency monitor filters, shapes, and controls the flow of information to guarantee specified properties along the real-time, fault tolerance, quality of service, and security dimensions <ref> [6] </ref>. Phase One: We are currently in the process of completing this phase, by the end of which we will be having a working BeeHive system with time cognizant transaction scheduling, and a first design and implementation of a resource manager.
Reference: [7] <author> J. A. Stankovic, S. H. Son, Jorgen Hansson, </author> <title> Misconceptions about Real-Time Databases, </title> <note> Computer Science Report no. CS-98-20, </note> <month> July </month> <year> 1998. </year>
Reference-contexts: Support of these features and potential tradeoffs between them could provide a significant improvement in performance and functionality over current distributed database and object management systems. There are many research problems that must be solved to support global, real-time databases <ref> [7] </ref>. Solutions to these problems are needed both in terms of a distributed environment at the database level, as well as real-time resource management below the database level, i.e., in both the operating system and the network layers.
Reference: [8] <author> R. Steinmetz and K. Nahrstedt, </author> <title> Multimedia Computing, Communications and Applications, </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year> <month> 10 </month>
References-found: 8

