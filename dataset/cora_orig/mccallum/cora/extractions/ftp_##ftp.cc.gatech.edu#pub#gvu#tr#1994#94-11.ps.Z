URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1994/94-11.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/reports/1994/
Root-URL: 
Email: -martin,foley-@cc.gatech.edu  
Title: DEMONSTRATION into an existing design environment that provides an interactive object editor. limiting the number
Author: Martin R. Frank James D. Foley 
Address: Atlanta, Georgia 30332-0280  
Affiliation: Graphics, Visualization Usability Center Georgia Institute of Technology  
Note: PROGRAMMING BY  The engine can easily be incorporated  The first goal, responsiveness, is best accommodated by  This, however, is in obvious con-ict with the second goal, generality.  
Abstract: 1 This is Frank, M. and J. Foley, A Pure Reasoning Engine for Programming By Demonstration, Technical Report git-gvu-94-11, Georgia Institute of Technology, Graphics, Visualization & Usability Center, April 1994. A PURE REASONING ENGINE FOR ABSTRACT We present an inference engine that can be used for creating Programming By Demonstration systems. The class of systems addressed are those which infer a state change description from examples of state [9,11]. The main design goals of the inference engine are responsiveness and generality. All demonstrational systems must respond quickly because of their interactive use. They should also be general - they should be able to make inferences for any attribute that the user may want to def ine by demonstration, and they should be able to treat any other attributes as parameters of this definition. This conflict is intrinsic to the class of demonstrational system described above. The challenge is to f ind an algorithm which responds quickly but does not heuristically limit the number of objects it looks at. We present such an algorithm in this paper. A companion paper describes Inference Bear [3], an actual demonstrational system that we have built using this inference engine and an existing user interface builder [5]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Cypher, A., Eager: </author> <title> Programming Repetitive Tasks by Example, </title> <booktitle> Proceedings of CHI91, </booktitle> <address> New Orleans, </address> <publisher> Louisiana, </publisher> <pages> pp. 33-39. </pages>
Reference-contexts: These systems can often infer relationships from a single example. Other systems that are not addressed are those that automate repetition by watching the user , such as Eager <ref> [1] </ref> and 2 Metamouse [7]. AIDE (in [2]) is a proposed domain-independent framework for this class of demonstrational system. PHILOSOPHY OF THE INFERENCE ENGINE Our inference engine is based on the following principles. It contains no domain knowledge.
Reference: [2] <author> Cypher, A. (ed.), </author> <title> Watch What I Do: Programming By D e m o n s t r a t i o n , M I T P r e s s , C a m b r i d g e , Massachusetts, </title> <year> 1993. </year>
Reference-contexts: They can then demonstrate how user interface elements are created, deleted and modified in response to run-time events. Programming By Demonstration is a young discipline which has just recently emerged as a recognized subfield of user interface software <ref> [2] </ref>. This becomes apparent when one compares the prototypes that have been built - the most striking observation is that each one uses a unique approach and that most are tightly coupled to the domain they were built for. <p> These systems can often infer relationships from a single example. Other systems that are not addressed are those that automate repetition by watching the user , such as Eager [1] and 2 Metamouse [7]. AIDE (in <ref> [2] </ref>) is a proposed domain-independent framework for this class of demonstrational system. PHILOSOPHY OF THE INFERENCE ENGINE Our inference engine is based on the following principles. It contains no domain knowledge. The design goal of the inference engine is to be useful for a range of application domains.
Reference: [3] <author> Frank, M. and J. Foley, </author> <title> Inference Bear: Inferring Behavior from Before and After Snapshots, Technical R e p o r t g i t - g v u - 9 4 - 1 2 , G e o r g i a I n s t i t u t e o f Technology, Graphics, Visualization and Usability Center, </title> <month> Apr. </month> <year> 1994. </year>
Reference: [4] <author> Hudson, S. and R. King, </author> <title> Semantic Feedback in the Higgens UIMS, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 14, No. 8, </volume> <month> August </month> <year> 1988, </year> <pages> pp. 1 188-1206. </pages>
Reference: [5] <author> Khme, T. and M. Schneider-Hufschmidt, </author> <title> SX/Tools - A n O p e n D e s i g n E n v i r o n m e n t f o r A d a p t a b l e Multimedia User Interfaces, </title> <journal> Computer Graphics Forum, </journal> <volume> 11(3), </volume> <month> Sept. </month> <year> 1992, </year> <pages> pp. 93-105. </pages>
Reference: [6] <author> Kurlander, D. and S. Feiner, </author> <title> Inferring Constraints from Multiple Snapshots, </title> <type> Technical Report CUCS-008-91, </type> <institution> Computer Science Department, Columbia University, </institution> <note> May 1991 (also to appear in the ACM Transactions On Graphics). </note>
Reference-contexts: This subclass consists of systems that infer a generalized state change description given several examples of state. Existing demonstrational systems that fall into that category are DEMO [11] and the Geometric Interactive Technique Solver [9]. The constraint solver of Chimera <ref> [6] </ref> roughly falls into this class, but has no notion of time - it uses valid states rather than before and after states. Demonstrational systems not addressed by our engine include those that use a domain-specific rule base to guess relationships between objects, such as Peridot [8] and Druid [10].
Reference: [7] <author> Maulsby, D., I. Witten and K. Kittlitz, Metamouse: </author> <title> Specifying Graphical Pr ocedures by Example , Proceedings of Siggraph89, </title> <address> Boston, Massachusetts, </address> <pages> pp. 127-136. </pages>
Reference-contexts: These systems can often infer relationships from a single example. Other systems that are not addressed are those that automate repetition by watching the user , such as Eager [1] and 2 Metamouse <ref> [7] </ref>. AIDE (in [2]) is a proposed domain-independent framework for this class of demonstrational system. PHILOSOPHY OF THE INFERENCE ENGINE Our inference engine is based on the following principles. It contains no domain knowledge.
Reference: [8] <author> Myers, B., </author> <title> Creating User Interfaces By Demonstration, </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: Demonstrational systems not addressed by our engine include those that use a domain-specific rule base to guess relationships between objects, such as Peridot <ref> [8] </ref> and Druid [10]. These systems can often infer relationships from a single example. Other systems that are not addressed are those that automate repetition by watching the user , such as Eager [1] and 2 Metamouse [7]. <p> It does not guess. A specialized demonstrational system can incorporate domain knowledge to help it make inferences. For example, Peridot <ref> [8] </ref> has built-in knowledge about the concepts of centering and aligning. This allows it to guess the user s intention when they are centering elements, making the system easy to use.
Reference: [9] <author> O lse n, </author> <title> D . an d K . A lla n, Crea ting In te rac tiv e Techniques by Symbolically Solving Geometric Constraints, </title> <booktitle> Proceedings of UIST90, </booktitle> <address> Snowbird, Utah, </address> <month> Oct </month> <year> 1990, </year> <pages> pp. 102-107. </pages>
Reference-contexts: We present such an engine which addresses a subclass of demonstrational systems. This subclass consists of systems that infer a generalized state change description given several examples of state. Existing demonstrational systems that fall into that category are DEMO [11] and the Geometric Interactive Technique Solver <ref> [9] </ref>. The constraint solver of Chimera [6] roughly falls into this class, but has no notion of time - it uses valid states rather than before and after states.
Reference: [10] <author> Singh, G., C. Kok and T. Ngan, Druid: </author> <title> A System For Demonstrational Rapid User Interface Development , Proceedings of UIST90, </title> <address> Snowbird, Utah, </address> <month> Oct. </month> <year> 1990, </year> <pages> pp. 167-177. </pages>
Reference-contexts: Demonstrational systems not addressed by our engine include those that use a domain-specific rule base to guess relationships between objects, such as Peridot [8] and Druid <ref> [10] </ref>. These systems can often infer relationships from a single example. Other systems that are not addressed are those that automate repetition by watching the user , such as Eager [1] and 2 Metamouse [7]. AIDE (in [2]) is a proposed domain-independent framework for this class of demonstrational system.
Reference: [11] <author> Wolbe r, D. and G. </author> <title> Fishe r , A Demonstrational Te c h n i q u e F o r D e v e l o p i n g I n t e r f a c e s W i t h Dynamically Created Objects , Proceedings of UIST91, </title> <type> Hilton Head, </type> <institution> South Carolina, </institution> <month> November </month> <year> 1991, </year> <pages> pp. 221-230. </pages>
Reference-contexts: We present such an engine which addresses a subclass of demonstrational systems. This subclass consists of systems that infer a generalized state change description given several examples of state. Existing demonstrational systems that fall into that category are DEMO <ref> [11] </ref> and the Geometric Interactive Technique Solver [9]. The constraint solver of Chimera [6] roughly falls into this class, but has no notion of time - it uses valid states rather than before and after states. <p> A demonstration can consist of a single example for simple behavior or two or more examples for more complex behavior. An example consists of a Before snapshot, a parameterized event, and an After snapshot. The event is the stimulus, the After snapshot the response in the terminology of <ref> [11] </ref> (the Before snapshot provides context). The inference engine generalizes from the examples and returns a script. A script describes a change of state triggered by an event. Scripts can create, delete and change objects.
References-found: 11

