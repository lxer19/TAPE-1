URL: http://www.cs.ucsd.edu/users/russell/search.ps
Refering-URL: http://www.cs.ucsd.edu/users/russell/
Root-URL: http://www.cs.ucsd.edu
Email: beame@cs.washington.edu  sacook@cs.toronto.edu  edmonds@icsi.berkeley.edu  russell@cs.ucsd.edu  toni@cs.pitt.edu  
Title: The Relative Complexity of NP Search Problems  
Author: Paul Beame Stephen Cook Jeff Edmonds Russell Impagliazzo Toniann Pitassi 
Note: Research supported by an NSERC operating grant and the Information Technology Research Centre Supported by an NSF postdoctoral fellowship and by a Canadian NSERC postdoctoral fellowship Research Supported by NSF YI Award CCR-92-570979, Sloan Research Fellowship BR-3311, grant #93025 of the joint US-Czechoslovak Science and Technology Program, and USA-Israel BSF Grant 92-00043 Research supported by an NSF postdoctoral fellowship and by NSF Grant CCR-9457782  
Address: Washington  Toronto  Berkeley, CA 94704-1198  UC, San Diego 9500 Gilman Drive La Jolla, CA 92093-0114  Pittsburgh  
Affiliation: Computer Science and Engineering University of  Computer Science Dept. University of  I.C.S.I.  Computer Science and Engineering  Mathematics and Computer Science University of  
Abstract: Papadimitriou introduced several classes of NP search problems based on combinatorial principles which guarantee the existence of solutions to the problems. Many interesting search problems not known to be solvable in polynomial time are contained in these classes, and a number of them are complete problems. We consider the question of the relative complexity of these search problem classes. We prove several separations which show that in a generic relativized world, the search classes are distinct and there is a standard search problem in each of them that is not computation-ally equivalent to any decision problem. (Naturally, absolute separations would imply that P 6= NP.) Our separation proofs have interesting combinatorial content and go to the heart of the combinatorial principles on which the classes are based. We derive one result via new lower bounds on the degrees of polynomials asserted to exist by Hilbert's Null-stellensatz over finite fields. fl Research supported by NSF grants CCR-8858799 and CCR-9303017
Abstract-found: 1
Intro-found: 1
Reference: [BI87] <author> M. Blum and R. Impagliazzo. </author> <title> Generic oracles and oracle classes. </title> <booktitle> In 28th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 118-126, </pages> <address> Los Angeles, </address> <month> October </month> <year> 1987. </year>
Reference-contexts: Notice that (CQ) A = CQ when A 2 P. The following theorem shows that the problem of separating relativized NP search classes is equivalent to separating them relative to any generic oracle <ref> [BI87] </ref>, and also equivalent to showing that there is no reduction between the corresponding type 2 problems. Theorem 1: Let Q 1 ; Q 2 2 TFNP 2 . <p> [?] which is itself similar to the proof that if a Boolean function and its negation both can be written in disjunctive normal form with terms of size d, then the function has a Boolean decision tree of height d 2 . (This last result was implicit in [HH87], [HH90]. <ref> [BI87] </ref>, [Tar], and appears explicitly in [IN88]) We describe H j implicitly as a strategy for querying the purported matching ff. The strategy proceeds in at most k stages, and makes at most 2k queries in each stage. <p> Since SOURCE.OR.SINK reduces to all of the other problems mentioned in the statement of the theorem, it suffices to show this for SOURCE.OR.SINK. A slightly weaker version of the following theorem is implicit in [HH87], <ref> [BI87] </ref>. [Tar]; the theorem as stated is implicit in [IN88]: Theorem 18: NP 2 " coNP 2 (P 2 ) (TFNP) Thus, if SOURCE.OR.SINK were reducible to a problem in NP 2 "coNP 2 , it would be in (FP 2 ) A for some type 1 oracle A (moreover, A
Reference: [BIK+94] <author> P. Beame, R. Impagliazzo, J. Krajicek, T. Pitassi, and P. </author> <booktitle> Pudlak Lower bounds on Hilbert's Nullstel-lensatz and propositional proofs In 35th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 794-806, </pages> <address> Santa Fe, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: The proofs of our separations have quite interesting combinatorial content. In one example, via a series of reductions using methods similar to those in <ref> [BIK+94] </ref>, we derive our result via new lower bounds on the degrees of polynomials asserted to exist by Hilbert's Nullstellensatz over finite fields. <p> The lower bound we obtain for the degree of these polynomials is (n 1=4 ) where n is the number of variables and this is substantially stronger than the (log fl n) bound that was shown (for a somewhat different system) in <ref> [BIK+94] </ref>. 2 The Search Classes 2.1 Type 1 and type 2 problems A decision problem in NP can be given by a polynomial time relation R and a polynomial p such that R (x; c) implies jcj p (jxj). <p> In this section we again reduce our problem to a similar combinatorial question with a somewhat different kind of decision tree. This question is more difficult than our previous one and we need to apply a new method of attack, introduced in <ref> [BIK+94] </ref>, that is based on lower bounds on the degrees of polynomials given by Hilbert's Nullstellensatz. More precisely, we show how we can naturally associate an unsatisfiable system of polynomial equations fQ i (x) = 0g over GF [2] with each family of decision trees with the spec ified properties. <p> This is an interesting result in its own right since the bound for the coefficients of the system in <ref> [BIK+94] </ref> was only (log fl n). We give the proof of this result in the next section. Theorem 6: SINK is not reducible to LONELY. (The Appendix contains a weaker result with a simpler proof.) Proof: Suppose to the contrary that SINK LONELY . <p> Note that all the trees in T fl now have height at most ` = 2` 0 and that M = jT fl j is odd. Such a collection T fl is very similar to the generic systems considered in <ref> [BIK+94] </ref>.
Reference: [BP93] <author> P. Beame and T. Pitassi. </author> <title> An exponential separation between the matching principle and the pigeonhole principle. </title> <booktitle> In 8th Annual IEEE Symposium on Logic in Computer Science, </booktitle> <address> Montreal, Quebec, </address> <month> June </month> <year> 1993. </year>
Reference: [Bus86] <author> S. Buss. </author> <title> Bounded Arithmetic. Bibliopolis, Napoli, </title> <booktitle> 1986. Volume 3 of Studies in Proof Theory. </booktitle>
Reference: [HH87] <author> J. Hartmanis and L. A. Hemachandra, </author> <title> One-way functions, robustness, and the non-isomorphism of NP-complete sets, </title> <booktitle> in: Proceedings of the 2nd Conference on Structure in Complexity Theory (1987), </booktitle> <pages> 160-174. </pages>
Reference-contexts: to Riis [?] which is itself similar to the proof that if a Boolean function and its negation both can be written in disjunctive normal form with terms of size d, then the function has a Boolean decision tree of height d 2 . (This last result was implicit in <ref> [HH87] </ref>, [HH90]. [BI87], [Tar], and appears explicitly in [IN88]) We describe H j implicitly as a strategy for querying the purported matching ff. The strategy proceeds in at most k stages, and makes at most 2k queries in each stage. <p> Since SOURCE.OR.SINK reduces to all of the other problems mentioned in the statement of the theorem, it suffices to show this for SOURCE.OR.SINK. A slightly weaker version of the following theorem is implicit in <ref> [HH87] </ref>, [BI87]. [Tar]; the theorem as stated is implicit in [IN88]: Theorem 18: NP 2 " coNP 2 (P 2 ) (TFNP) Thus, if SOURCE.OR.SINK were reducible to a problem in NP 2 "coNP 2 , it would be in (FP 2 ) A for some type 1 oracle A (moreover,
Reference: [HH90] <author> J. Hartmanis and L. A. Hemachandra, </author> <title> Robust machines accept easy sets, </title> <type> Theoret. </type> <institution> Comput. Sci. </institution> <month> 74 </month> <year> (1990), </year> <pages> 217-225. </pages>
Reference-contexts: Riis [?] which is itself similar to the proof that if a Boolean function and its negation both can be written in disjunctive normal form with terms of size d, then the function has a Boolean decision tree of height d 2 . (This last result was implicit in [HH87], <ref> [HH90] </ref>. [BI87], [Tar], and appears explicitly in [IN88]) We describe H j implicitly as a strategy for querying the purported matching ff. The strategy proceeds in at most k stages, and makes at most 2k queries in each stage.
Reference: [HH91] <author> J. Hartmanis and L. A. Hemachandra, </author> <title> One-way functions and the non-isomorphism of NP-complete sets, </title> <institution> Theor. Comput. Sci. </institution> <month> 81 </month> <year> (1991), </year> <pages> 155-163. </pages>
Reference: [IN88] <author> R. Impagliazzo and M. Naor. </author> <title> Decision trees and downward closures. </title> <booktitle> In Third Annual Conference on Structure in Complexity Theory, </booktitle> <pages> pages 29-38, </pages> <year> 1988. </year>
Reference-contexts: the proof that if a Boolean function and its negation both can be written in disjunctive normal form with terms of size d, then the function has a Boolean decision tree of height d 2 . (This last result was implicit in [HH87], [HH90]. [BI87], [Tar], and appears explicitly in <ref> [IN88] </ref>) We describe H j implicitly as a strategy for querying the purported matching ff. The strategy proceeds in at most k stages, and makes at most 2k queries in each stage. Let t s represent the set of known edges of G at the beginning of stage s. <p> Since SOURCE.OR.SINK reduces to all of the other problems mentioned in the statement of the theorem, it suffices to show this for SOURCE.OR.SINK. A slightly weaker version of the following theorem is implicit in [HH87], [BI87]. [Tar]; the theorem as stated is implicit in <ref> [IN88] </ref>: Theorem 18: NP 2 " coNP 2 (P 2 ) (TFNP) Thus, if SOURCE.OR.SINK were reducible to a problem in NP 2 "coNP 2 , it would be in (FP 2 ) A for some type 1 oracle A (moreover, A could be a search problem in TFNP, but this <p> The above outline was used in the proof of <ref> [IN88] </ref> (Proposition 4.2) which shows that for a generic oracle G, TFNP G is not contained in FP G .
Reference: [JPY88] <author> D. S. Johnson, C. H. Papadimitriou, and M. Yan-nakakis. </author> <title> How easy is local search? Journal of Computer and System Sciences, </title> <address> pages 79-100, </address> <year> 1988. </year>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial re sult called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution.
Reference: [Pap90] <author> C. H. Papadimitriou. </author> <title> On graph-theoretic lemmata and complexity classes. </title> <booktitle> In 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 794-801, </pages> <address> St. Louis, MO, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial re sult called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution. <p> The problem Pigeonhole Circuit is a natural complete problem for PPP. The class PPADS is called PSK in <ref> [Pap90] </ref>, where it is incorrectly said to be equivalent to PPAD. <p> This will make 0...0 into the standard leaf, and make all even-degree nodes into odd-degree nodes and vice versa. Finally, ODD m LEAF follows from the "chessplayer algorithm" of <ref> [Pap90, Pap94] </ref> which makes explicit the local edge-pairing argument that is involved in the standard construction of Euler tours. For completeness we give this construction: Given an input graph G to ODD we transform it to an input graph GL to LEAF.
Reference: [Pap91] <author> C. H. Papadimitriou. </author> <title> On inefficient proofs of existence and complexity classes. </title> <booktitle> In Proceedings of the 4th Czechoslovakian Symposium on Combinatorics, </booktitle> <year> 1991. </year>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial re sult called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution.
Reference: [Pap94] <author> C. H. Papadimitriou. </author> <title> On the complexity of the parity argument and other inefficient proofs of existence. </title> <journal> Journal of Computer and System Sciences, </journal> <pages> pages 498-532, </pages> <year> 1994. </year>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial re sult called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution. <p> The class PPAD is a directed version of PPA; the combinatorial lemma here is this: "Every directed graph with an imbalanced node (indegree different from outdegree) must have another imbalanced node." It is shown in <ref> [Pap94] </ref> that all these classes can be defined in a syntactic way. As demonstrated in the papers listed above, these classes satisfy the key litmus test for an interesting complexity class: they contain many natural problems, some of which are complete. <p> The classes defined from these problems are interesting for more than just the lemmas on which they are based. There are many natural problems in them. Here are some examples in the first order classes PPAD, PPA, and PPP from <ref> [Pap94] </ref>. <p> A statement similar to Theorem 1 holds for the case of Turing reductions with the many-one closures replaced by Turing closures for the type 1 classes. All reductions we exhibit are many-one reductions, so with this theorem they give inclusions or alternative characterizations of the classes defined in <ref> [Pap94] </ref>. <p> This will make 0...0 into the standard leaf, and make all even-degree nodes into odd-degree nodes and vice versa. Finally, ODD m LEAF follows from the "chessplayer algorithm" of <ref> [Pap90, Pap94] </ref> which makes explicit the local edge-pairing argument that is involved in the standard construction of Euler tours. For completeness we give this construction: Given an input graph G to ODD we transform it to an input graph GL to LEAF.
Reference: [PSY90] <author> C. H. Papadimitriou, A. S. Schaffer, and M. Yan-nakis. </author> <title> On the complexity of local search. </title> <booktitle> In Proceedings of the Twenty Second Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 438-445, </pages> <address> Baltimore, MD, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial re sult called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution.
Reference: [Tar] <author> G.Tardos, </author> <title> Query complexity, or why is it difficult to separate NP A " co-NP A from P A by random oracle A ?, Combinatorica 9 (1989), </title> <type> 385-392. </type>
Reference-contexts: which is itself similar to the proof that if a Boolean function and its negation both can be written in disjunctive normal form with terms of size d, then the function has a Boolean decision tree of height d 2 . (This last result was implicit in [HH87], [HH90]. [BI87], <ref> [Tar] </ref>, and appears explicitly in [IN88]) We describe H j implicitly as a strategy for querying the purported matching ff. The strategy proceeds in at most k stages, and makes at most 2k queries in each stage. <p> Since SOURCE.OR.SINK reduces to all of the other problems mentioned in the statement of the theorem, it suffices to show this for SOURCE.OR.SINK. A slightly weaker version of the following theorem is implicit in [HH87], [BI87]. <ref> [Tar] </ref>; the theorem as stated is implicit in [IN88]: Theorem 18: NP 2 " coNP 2 (P 2 ) (TFNP) Thus, if SOURCE.OR.SINK were reducible to a problem in NP 2 "coNP 2 , it would be in (FP 2 ) A for some type 1 oracle A (moreover, A could
Reference: [Tow90] <author> M. Townsend. </author> <title> Complexity for type-2 relations. </title> <journal> Notre Dame J. Formal Logic 31, </journal> <pages> pages 241-262, </pages> <year> 1990. </year>
Reference-contexts: Proceeding more formally, we consider strings x over the binary alphabet f0,1g, functions ff from strings to strings, and type 2 functions (i.e. operators) F taking a pair (ff; x) to a string y. We follow Townsend <ref> [Tow90] </ref> in defining such an F to be polynomial time computable if it is computable in deterministic time that is polynomial in jxj with calls to ff at unit cost.
Reference: [Yam93] <author> T. Yamakami. </author> <title> A tight relationship between 1-generic oracles and type-2 complexity theory. </title> <type> Unpublished manuscript, </type> <pages> pages 1-14, </pages> <year> 1993. </year>
Reference-contexts: The proof appears in <ref> [Yam93] </ref>.
References-found: 16

