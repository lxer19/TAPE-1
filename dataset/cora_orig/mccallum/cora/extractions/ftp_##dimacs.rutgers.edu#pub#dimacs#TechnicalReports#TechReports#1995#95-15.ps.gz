URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1995/95-15.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1995.html
Root-URL: http://www.cs.rutgers.edu
Title: by  
Author: Jon Berry Nathaniel Dean ; Patricia Fasel ; Mark Goldberg Elizabeth Johnson ; John MacCuish ; Gregory Shannon ; and Steven Skiena ; 
Keyword: LINK: A Combinatorics and Graph Theory Workbench  
Address: New York, Stony Brook  
Affiliation: 2 AT&T Bell Laboratories 3 Los Alamos National Laboratory 4 Rensselaer Polytechnic Institute 5 Indiana University 6 Los Alamos National Laboratory 7 InfoStructure Services Technologies, Inc. 8 State University of  
Note: for Applications and Research  DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Bell Laboratories and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 95-15 June 1995 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. K. Ahuja, T. L. Magnanti, and J. B. Orlin. </author> <title> Network Flows: theory, algorithms, and applications. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1993. </year> <month> - 26 </month> - 
Reference-contexts: Maxflow, for example, only works on directed binary graphs presently. The algorithms contained in the Graph Properties section, however, run on both directed and undirected binary graphs. Relatively little time was spent implementing these algorithms, most of which can be found in standard books on algorithm <ref> [9, 21, 22, 1] </ref>. The LINK libraries are built to facilitate rapid algorithm implementation. Even complex and sophisticated algorithms can be written without too much trouble.
Reference: [2] <author> G. Di Battista, P. Eades, and R. Tamassia. </author> <title> Algorithms for drawing graphs: an annotated bibliography. </title> <type> Technical report, </type> <institution> Department of Computer Science, Brown University, Providence, RI, </institution> <year> 1993. </year>
Reference-contexts: The generators are useful in the testing of algorithms and layouts. Presently the set of generators is very small. However, more sophisticated random and deterministic generators can be implemented very easily in LINK. 3.5 Layout Library Various binary and hypergraph layouts are provided in the layout library <ref> [2] </ref>. For binary graphs, the circle layout is probably the most useful for viewing a small graph, but there are several additional binary random graph layouts, including Random and Poisson. The Poisson layout embeds the vertices on the unit square using the poisson disk algorithm commonly used in sampling.
Reference: [3] <author> C. Berge. </author> <title> Hypergraphs. </title> <publisher> North-Holland, </publisher> <year> 1989. </year>
Reference-contexts: The other graph classes are straightforward modifications that benefit heavily from inheritance and make only slight changes. (See <ref> [4, 3, 7, 15] </ref> for a discussion of graphs and hypergraphs.) The methods defined on a Graph include: - 9 - addVertex (name) create a Vertex and add to the graph addVertex (vertex) add the given vertex to the graph addUndirectedEdge (v1, v2) add edge of two vertices to the graph
Reference: [4] <author> C. Berge. </author> <title> Graphs. </title> <publisher> North-Holland, </publisher> <year> 1991. </year>
Reference-contexts: The other graph classes are straightforward modifications that benefit heavily from inheritance and make only slight changes. (See <ref> [4, 3, 7, 15] </ref> for a discussion of graphs and hypergraphs.) The methods defined on a Graph include: - 9 - addVertex (name) create a Vertex and add to the graph addVertex (vertex) add the given vertex to the graph addUndirectedEdge (v1, v2) add edge of two vertices to the graph
Reference: [5] <author> D. Berque, R. Cecchini, M. Goldberg, and R. Rivenburgh. </author> <title> The setplayer system for symbolic computation on power sets. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 14 </volume> <pages> 645-662, </pages> <year> 1992. </year>
Reference-contexts: the development of GraphLab [23], Nate Dean was largely responsible for the package NETPAD at Bellcore [20] , Steve Skiena at State University at New York at Stony Brook had produced Combinatorica on top of Mathematica [24], and Mark Goldberg and his students at Rensselaer Polytechnic Institute had implemented SetPlayer <ref> [5] </ref>. Though these packages have many useful features, some overlapping and some not, none - 2 - was complete or without significant drawbacks depending on the user and the application.
Reference: [6] <author> B. Bollobas. </author> <title> Random Graphs. </title> <publisher> Academic Press, </publisher> <year> 1985. </year>
Reference-contexts: For instance, when a Selection is deleted through the GUI operations, the actual GraphObject must be removed as well as the Graphic from the GraphView. 3.4 Generator Library The generator library contains both random and deterministic graph generators <ref> [6] </ref>. Arguments to the random binary graph generators include the graph type, the number of vertices, and an edge probability p which represents the probability that an edge exists between a pair of vertices. There are also several simple random hypergraph generators for both directed and undirected hypergraphs.
Reference: [7] <author> J. Bondy and U. Murty. </author> <title> Graph Theory with Applications. </title> <publisher> North-Holland, </publisher> <year> 1976. </year>
Reference-contexts: The other graph classes are straightforward modifications that benefit heavily from inheritance and make only slight changes. (See <ref> [4, 3, 7, 15] </ref> for a discussion of graphs and hypergraphs.) The methods defined on a Graph include: - 9 - addVertex (name) create a Vertex and add to the graph addVertex (vertex) add the given vertex to the graph addUndirectedEdge (v1, v2) add edge of two vertices to the graph
Reference: [8] <author> J. Cohen. </author> <title> Drawing graphs to convey proximity: An incremental arrangement method. </title> <type> Technical Report R53-07-94 S-241,681, </type> <institution> Department of Defense, </institution> <year> 1994. </year>
Reference-contexts: A force-directed placement embedding of a graph is then used to lay out these points on a 2-dimensional surface <ref> [12, 13, 8] </ref>. The graph need not be complete. For instance, distances above or below a threshold may be the only relationships between points that are important. In this case, edges with metric values below or above the threshold are not included.
Reference: [9] <author> T. Cormen, C. Leiserson, and R. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> McGraw-Hill, </publisher> <year> 1990. </year>
Reference-contexts: Maxflow, for example, only works on directed binary graphs presently. The algorithms contained in the Graph Properties section, however, run on both directed and undirected binary graphs. Relatively little time was spent implementing these algorithms, most of which can be found in standard books on algorithm <ref> [9, 21, 22, 1] </ref>. The LINK libraries are built to facilitate rapid algorithm implementation. Even complex and sophisticated algorithms can be written without too much trouble.
Reference: [10] <author> M. Damanshek. </author> <title> Gauging similarity via n-grams: Language-independent categorization of text. </title> <journal> Science, </journal> <volume> 267, </volume> <year> 1995. </year>
Reference-contexts: Examples of this include LandSat image signatures and medical image signatures. The signatures showed very nice grouping, consistent with the types of images. Other similarity or dissimilarity measures could easily be used with other data. We hope to experiment soon with document signatures <ref> [10] </ref>. Another project involves two groups of data intermingled in the same dimensional space. The goal is to determine if there are clusters of one group separable from the other or at least large differences in density of one group compared to another in a given cluster.
Reference: [11] <author> N. Dean and G. E. Shannon, </author> <title> editors. Computational Support for Discrete Mathematics. </title> <journal> American Mathematical Society, 1993. DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </journal> <volume> Volume 15. </volume>
Reference-contexts: The magnitude of such a project exceeds the efforts made so far by the researchers and research groups responsible for the existing systems. A good discussion of software packages for discrete math is found in <ref> [11, 25, 19] </ref>. From the standpoint of a theoretician or an applications researcher, there are several features which characterize a useful software tool for their work. First, it is essential to have a set of libraries that are efficient, easy to use, robust, and extensible.
Reference: [12] <author> P. Eades and K. Sugiyama. </author> <title> How to draw a graph. </title> <journal> J. of Information Processing, </journal> <volume> 13(4) </volume> <pages> 424-437, </pages> <year> 1990. </year>
Reference-contexts: A force-directed placement embedding of a graph is then used to lay out these points on a 2-dimensional surface <ref> [12, 13, 8] </ref>. The graph need not be complete. For instance, distances above or below a threshold may be the only relationships between points that are important. In this case, edges with metric values below or above the threshold are not included.
Reference: [13] <author> T. Fruchterman and E. Reingold. </author> <title> Graph drawing by force-directed placement. </title> <type> Technical Report UIUCDCS-R-90-1609, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: A force-directed placement embedding of a graph is then used to lay out these points on a 2-dimensional surface <ref> [12, 13, 8] </ref>. The graph need not be complete. For instance, distances above or below a threshold may be the only relationships between points that are important. In this case, edges with metric values below or above the threshold are not included.
Reference: [14] <author> A. Goldberg and R. Tarjan. </author> <title> A new approach to the maximum flow problem. </title> <booktitle> In Proceedings of the 18th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 136-146, </pages> <year> 1986. </year>
Reference-contexts: Relatively little time was spent implementing these algorithms, most of which can be found in standard books on algorithm [9, 21, 22, 1]. The LINK libraries are built to facilitate rapid algorithm implementation. Even complex and sophisticated algorithms can be written without too much trouble. The Maxflow algorithm <ref> [14] </ref> was written with the idea of exercising many of the LINK library features, including the graph data structures as well as the Container class and its ability to vary implementation types.
Reference: [15] <author> F. Harary. </author> <title> Graph Theory. </title> <publisher> Addison-Wesley, </publisher> <year> 1969. </year>
Reference-contexts: The other graph classes are straightforward modifications that benefit heavily from inheritance and make only slight changes. (See <ref> [4, 3, 7, 15] </ref> for a discussion of graphs and hypergraphs.) The methods defined on a Graph include: - 9 - addVertex (name) create a Vertex and add to the graph addVertex (vertex) add the given vertex to the graph addUndirectedEdge (v1, v2) add edge of two vertices to the graph
Reference: [16] <author> A. Jain and R. Dubes. </author> <title> Algorithms for Clustering Data. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: Discussions are taking place as to whether to make use of the LINK graph library only, or to also use the general LINK interface library, supplying new hooks for drawing in a Galaxy environment rather than in Motif. 4.2.3 Cluster Analysis Several exploratory projects involving the clustering of data <ref> [16] </ref> are currently being developed using LINK. One uses the layout features of LINK to visualize multi-dimensional data. Points in a multi-dimensional space are related to one another by a distance metric over that space. Typically, the number of dimensions far exceeds 2 or 3.
Reference: [17] <editor> D. Johnson and C. McGeoch, editors. </editor> <title> Network Flows and Matching: First DIMACS Implementation Challenge. </title> <publisher> AMS, </publisher> <year> 1993. </year> <month> - 27 </month> - 
Reference-contexts: In a modest amount of code using combinations of heuristics and methods, 21 variations of the push-relabel algorithm are included. These variations are parameterized so that the user can experiment effectively. (For a review of experimental analysis see <ref> [18, 17] </ref>.) 4 LINK Applications A LINK application can be built by accessing the necessary LINK libraries and then adding application-specific user interface code and libraries. A prototype application, LINKGUI, was developed in tandem with LINK.
Reference: [18] <author> C. McGeoch. </author> <title> Experimental Analysis of Algorithms. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <month> August </month> <year> 1986. </year>
Reference-contexts: In a modest amount of code using combinations of heuristics and methods, 21 variations of the push-relabel algorithm are included. These variations are parameterized so that the user can experiment effectively. (For a review of experimental analysis see <ref> [18, 17] </ref>.) 4 LINK Applications A LINK application can be built by accessing the necessary LINK libraries and then adding application-specific user interface code and libraries. A prototype application, LINKGUI, was developed in tandem with LINK.
Reference: [19] <author> K. Mehlhorn and S. Nahger. Leda: </author> <title> A platform for combinatorial and geometric computing. </title> <journal> CACM, </journal> <volume> 38(1) </volume> <pages> 96-102, </pages> <month> Jan </month> <year> 1995. </year>
Reference-contexts: The magnitude of such a project exceeds the efforts made so far by the researchers and research groups responsible for the existing systems. A good discussion of software packages for discrete math is found in <ref> [11, 25, 19] </ref>. From the standpoint of a theoretician or an applications researcher, there are several features which characterize a useful software tool for their work. First, it is essential to have a set of libraries that are efficient, easy to use, robust, and extensible.
Reference: [20] <author> M. Mevenkamp, N. Dean, and C. Monma. </author> <title> NETPAD user's guide and reference guide, </title> <year> 1990. </year>
Reference-contexts: Each had already directed similar projects. Greg Shannon of Indiana University had organized the development of GraphLab [23], Nate Dean was largely responsible for the package NETPAD at Bellcore <ref> [20] </ref> , Steve Skiena at State University at New York at Stony Brook had produced Combinatorica on top of Mathematica [24], and Mark Goldberg and his students at Rensselaer Polytechnic Institute had implemented SetPlayer [5].
Reference: [21] <author> B. M. E. Moret and H. D. Shapiro. </author> <title> Algorithms from P to NP: Volume 1, Design and Efficiency. </title> <publisher> The Benjamin/Cummings Publishing Company, </publisher> <year> 1991. </year>
Reference-contexts: Maxflow, for example, only works on directed binary graphs presently. The algorithms contained in the Graph Properties section, however, run on both directed and undirected binary graphs. Relatively little time was spent implementing these algorithms, most of which can be found in standard books on algorithm <ref> [9, 21, 22, 1] </ref>. The LINK libraries are built to facilitate rapid algorithm implementation. Even complex and sophisticated algorithms can be written without too much trouble.
Reference: [22] <author> C. Papadimitriou and K. Steiglitz. </author> <title> Combinatorial Optimization: Algorithms and Complexity. </title> <publisher> Prentice-Hall, </publisher> <year> 1982. </year>
Reference-contexts: Maxflow, for example, only works on directed binary graphs presently. The algorithms contained in the Graph Properties section, however, run on both directed and undirected binary graphs. Relatively little time was spent implementing these algorithms, most of which can be found in standard books on algorithm <ref> [9, 21, 22, 1] </ref>. The LINK libraries are built to facilitate rapid algorithm implementation. Even complex and sophisticated algorithms can be written without too much trouble.
Reference: [23] <author> G. Shannon, L. Meeden, and D. Friedman. SchemeGraphs: </author> <title> An object-oriented environment for manipulating graphs, </title> <booktitle> 1990. Software and documentation. </booktitle>
Reference-contexts: Each had already directed similar projects. Greg Shannon of Indiana University had organized the development of GraphLab <ref> [23] </ref>, Nate Dean was largely responsible for the package NETPAD at Bellcore [20] , Steve Skiena at State University at New York at Stony Brook had produced Combinatorica on top of Mathematica [24], and Mark Goldberg and his students at Rensselaer Polytechnic Institute had implemented SetPlayer [5].
Reference: [24] <author> S. Skiena. </author> <title> Implementing Discrete Mathematics: Combinatorics and Graph Theory with Mathematica. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Each had already directed similar projects. Greg Shannon of Indiana University had organized the development of GraphLab [23], Nate Dean was largely responsible for the package NETPAD at Bellcore [20] , Steve Skiena at State University at New York at Stony Brook had produced Combinatorica on top of Mathematica <ref> [24] </ref>, and Mark Goldberg and his students at Rensselaer Polytechnic Institute had implemented SetPlayer [5]. Though these packages have many useful features, some overlapping and some not, none - 2 - was complete or without significant drawbacks depending on the user and the application.
Reference: [25] <editor> R. Tamassia and I. G. Tollis, editors. </editor> <booktitle> Proceedings of the DIMACS International Workshop on Graph Drawing, 1994. Lecture Notes in Computer Science, </booktitle> <pages> 894. </pages>
Reference-contexts: The magnitude of such a project exceeds the efforts made so far by the researchers and research groups responsible for the existing systems. A good discussion of software packages for discrete math is found in <ref> [11, 25, 19] </ref>. From the standpoint of a theoretician or an applications researcher, there are several features which characterize a useful software tool for their work. First, it is essential to have a set of libraries that are efficient, easy to use, robust, and extensible.
Reference: [26] <author> R. Tarjan. </author> <title> An improved algorithm for hierarchical clustering using strong components. </title> <journal> Information Processing Letters, </journal> <volume> 17 </volume> <pages> 37-41, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: The goal is to determine if there are clusters of one group separable from the other or at least large differences in density of one group compared to another in a given cluster. We have implemented a hierarchical clustering algorithm <ref> [26] </ref> which uses k-connected components to cluster the groups. The percentages of each group within a particular component can easily be computed from the decomposition tree created by the hierarchical clustering algorithm.
References-found: 26

