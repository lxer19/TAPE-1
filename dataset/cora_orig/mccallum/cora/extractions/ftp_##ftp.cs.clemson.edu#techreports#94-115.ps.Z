URL: ftp://ftp.cs.clemson.edu/techreports/94-115.ps.Z
Refering-URL: http://www.cs.clemson.edu/html/research/techrpt.shtml
Root-URL: http://www.cs.clemson.edu
Title: Restricted Permutation Trees: Construction and Semantics  
Author: Nandakumar Sankaran Harold C. Grossman D. E. Stevenson Jeffrey B. Green 
Date: October 25, 1994  
Affiliation: Computer Science Department Clemson University  
Pubnum: Technical Report TR 94-115  
Abstract: We present a new intermediate program representation form, the Restricted Permutation Trees (RPT), and describe its construction and semantics via rewrite rules along with proofs of correctness. The RPT inherently reflects most of the legal permutations of the statements in a program and hence is suited to optimizations that involve code reordering. We illustrate the use of RPTs for performing Register Allocation and Instruction Scheduling, the performance of both of which depends upon the ordering of statements in a program. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Sethi A. V. Aho and J. D. Ullman. </author> <booktitle> Compilers: Principles, Techniques and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: Running time of the algorithm increases exponentially with the complexity of the machine architecture. Dynamic programming techniques have further been examined by Christopher et. al.[10] for Code Generation strategies. A Directed Acyclic Graph (DAG) <ref> [1] </ref> is contructed from expressions within basic blocks. A "parent" node is a subexpression that is formed from the child nodes. The information content in a DAG is also contained in our RPT.
Reference: [2] <author> A. V. Aho, Y. Savig, T. G. Szymanski, and J. D. Ullman. </author> <title> Inferring a tree from the lowest common ancestors with an application to the optimization of relational expressions. </title> <journal> SIAM Journal of Computing, </journal> <volume> 10(3) </volume> <pages> 405-421, </pages> <year> 1981. </year>
Reference-contexts: Since the RPT reflects the fact that the immediate children of a P-vertex could be listed in any order but the left subtree of an R-vertex should be visited before the right. Inorder traversal ensures that this is satisfied. Definition 4.6 The Least Common Ancestor (LCA) <ref> [22, 3, 17, 2] </ref> of any set of vertices is the vertex that is an ancestor of every vertex in the set and a descendant of all other ancestors. The LCA of a singleton set is the vertex itself.
Reference: [3] <author> H. A it-Kaci, R. Boyer, P. Lincoln, and R. Nasr. </author> <title> Efficient implementation of lattice operations. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 11(1) </volume> <pages> 115-146, </pages> <year> 1989. </year>
Reference-contexts: Since the RPT reflects the fact that the immediate children of a P-vertex could be listed in any order but the left subtree of an R-vertex should be visited before the right. Inorder traversal ensures that this is satisfied. Definition 4.6 The Least Common Ancestor (LCA) <ref> [22, 3, 17, 2] </ref> of any set of vertices is the vertex that is an ancestor of every vertex in the set and a descendant of all other ancestors. The LCA of a singleton set is the vertex itself.
Reference: [4] <author> Wolfgang Ambrosch, M. Anton Ertl, Felix Beer, and Andreas Krall. </author> <title> Dependence-conscious global register allocation. </title> <editor> In Jurg Gutknecht, editor, </editor> <booktitle> International Conference on Programming Languages and System Architectures, </booktitle> <pages> pages 125-136, </pages> <address> Zurich, Switzerland, March 1994. </address> <publisher> Springer LNCS 782. </publisher>
Reference-contexts: The information content in a DAG is also contained in our RPT. However, our representation of statements in a basic block also includes information on legal permutations of statements so our representation is more general than a DAG. The closest work to ours is that of Ambrosch et al <ref> [4] </ref>. In the context of register allocation, they do not assume that the order of statements that the programmer creates is necessarily the best one. They construct live ranges from a DAG of data dependencies rather than based on the specified statement order.
Reference: [5] <author> Kellogg S. Booth and George S. Lueker. </author> <title> Testing for the consecutive ones property, interval graphs and graph planarity using PQ-tree algorithms. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 13 </volume> <pages> 335-379, </pages> <year> 1976. </year>
Reference-contexts: consecutive ones property with the permutation (2,1,4,3,5) applied on the rows whereas the second does not. 1 3 5 B 1 1 0 1 1 0 1 0 0 0 1 0 C 0 @ 1 1 0 1 1 0 0 1 0 1 1 A Booth and Leuker <ref> [6, 5] </ref> developed PQ-Trees that computed in linear time, a permutation P for a (0,1) matrix M such that PM had the consecutive ones property, if such a permutation existed. In many cases, a given matrix may not possess the consecutive ones property.
Reference: [6] <author> Kellogg Speed Booth and George S. Lueker. </author> <title> Linear algorithms to recognize interval graphs and test for the consecutive ones property. </title> <booktitle> In Proceedings of the Seventh Annual STOC, </booktitle> <pages> pages 255-265, </pages> <year> 1975. </year>
Reference-contexts: consecutive ones property with the permutation (2,1,4,3,5) applied on the rows whereas the second does not. 1 3 5 B 1 1 0 1 1 0 1 0 0 0 1 0 C 0 @ 1 1 0 1 1 0 0 1 0 1 1 A Booth and Leuker <ref> [6, 5] </ref> developed PQ-Trees that computed in linear time, a permutation P for a (0,1) matrix M such that PM had the consecutive ones property, if such a permutation existed. In many cases, a given matrix may not possess the consecutive ones property.
Reference: [7] <author> Preston Briggs and Keith D. Cooper. </author> <title> Effective partial redundancy elimination. </title> <booktitle> In PLDI [20], </booktitle> <pages> pages 159-170. 14 </pages>
Reference-contexts: We overcome this limitation by using the RPT in conjunction with global optimizations like Partial Dead Code Elimination [18] and Partial Redundancy Elimination <ref> [7] </ref>. Such global optimizations move statements across basic blocks so that the values computed are used immediately. RPT transformations then order statements within each block optimally. Our tree construction rules operate under the assumption that every variable in the program is defined exactly once but potentially used more than once.
Reference: [8] <author> Gregory J. Chaitin. </author> <title> Register allocation and spilling via graph coloring. </title> <booktitle> In Proceedings of the Annual ACM SIGPLAN Symposium on Programming Language Design and Implementation, </booktitle> <pages> pages 98-105, </pages> <year> 1982. </year>
Reference-contexts: The register allocation method that we target is based on variable live ranges. Registers are allocated and/or spilled depending upon the live ranges of the program variables <ref> [8, 9] </ref>. We observe that a code reordering scheme that reduces the length of live ranges will result in a lower likelihood that a variable will have to be spilled.
Reference: [9] <author> Gregory J. Chaitin, Marc A. Auslander, K. Ashok Chandra, John Cocke, Martin E. Hopkins, and Peter W. Markstein. </author> <title> Register allocation via coloring. </title> <journal> Computer Languages, </journal> <volume> 6 </volume> <pages> 47-57, </pages> <year> 1981. </year>
Reference-contexts: The register allocation method that we target is based on variable live ranges. Registers are allocated and/or spilled depending upon the live ranges of the program variables <ref> [8, 9] </ref>. We observe that a code reordering scheme that reduces the length of live ranges will result in a lower likelihood that a variable will have to be spilled.
Reference: [10] <author> Thomas W. Christopher, Philip J. Hatcher, and Ronald C. Kukuk. </author> <title> Using dynamic programming to generate optimized code in a graham glanville style code generator. </title> <booktitle> In Proceedings of the SIGPLAN '84 Symposium on Compiler Construction, </booktitle> <pages> pages 25-36, </pages> <address> Montreal, Quebec, </address> <year> 1984. </year> <journal> ACM, ACM. SIGPLAN Notices 19(6). </journal>
Reference: [11] <author> Ron Cytron, Jean Ferrante, Barry K. Rosen, Mark Wegman, and Kenneth F. Zadeck. </author> <title> Efficiently computing the static single assignment form and the control dependence graph. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 13(4) </volume> <pages> 451-490, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Since the RPT reflects many permutations of the statements, we propose another set of rewrite rules to nondeterministically select an ordering in Section 7. Finally, Section 8 describes the applications of our tree representation to program optimization. 2 Overview Assignment form <ref> [12, 11] </ref> before computing the data dependence constraints among the statements. The constraints must be satisfied to retain the meaning of the program irrespective of the statement ordering. Next, we construct the RPT by incrementally applying the constraints in an arbitrary order.
Reference: [12] <author> Ron K. Cytron and Jeanne Ferrante. </author> <title> Efficiently computing -nodes on-the-fly (extended abstract). </title> <editor> In Utpal Banerjee, David Gelernter, Alex Nicolau, and David Padua, editors, </editor> <booktitle> 6 th International Workshop on Languages and Compilers for Parallel Computing, number 768 in LNCS, </booktitle> <pages> pages 461-476. </pages> <publisher> Springer-Verlag, </publisher> <address> Portland, OR, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Since the RPT reflects many permutations of the statements, we propose another set of rewrite rules to nondeterministically select an ordering in Section 7. Finally, Section 8 describes the applications of our tree representation to program optimization. 2 Overview Assignment form <ref> [12, 11] </ref> before computing the data dependence constraints among the statements. The constraints must be satisfied to retain the meaning of the program irrespective of the statement ordering. Next, we construct the RPT by incrementally applying the constraints in an arbitrary order.
Reference: [13] <author> K. P. Eswaran. </author> <title> Consecutive Retrieval Information Systems. </title> <type> PhD thesis, </type> <institution> University of California, Electronics Research Laboratory, Univ. Calif., Berkeley, </institution> <address> CA 94720, </address> <month> May </month> <year> 1973. </year> <note> Also Report ERL-M384. </note>
Reference-contexts: The consecutive ones property have been subsequently studied in information retrieval and arrangement strategies <ref> [13, 15, 16, 19, 23] </ref>. Definition 3.1 Let M be a (0,1)-matrix. M has the consecutive ones property provided there exists a permutation matrix P such that the 1's in each column of PM occur consecutively. <p> To permit some of the columns of 1's to be split into shorter chains. The k-column number of a matrix M is the least number such that M has the consecutive 1's property after k-column splits. Eswaran <ref> [13] </ref> states the two cases above and provides dynamic programming solutions to the problem Both the cases have been proved to be NP-complete by Kou [19].
Reference: [14] <author> D. R. Fulkerson and O. A. Gross. </author> <title> Incidence matrices and interval graphs. </title> <journal> Pacific Journal of Mathematics, </journal> <volume> 15(3) </volume> <pages> 835-855, </pages> <year> 1965. </year> <title> Interval Graphs are Characterized as those graphs whose dominant-clique vs. vertex matrices have the consecutive ones property. This is the first appearance of consecutive ones in the literature. The Fulkerson-Gross algorithm has two parts: Find the dominant sliques and them check the matrix for consecutive ones. Both require O(n 3 ) steps. </title>
Reference-contexts: Since not all programs are written in 2 this manner, we apply the Static Single Assignment transformation to ensure that this assumption always holds. 3 Related Work Fulkerson and Gross <ref> [14] </ref> defined the Consecutive One's problem to recognize interval graphs. The consecutive ones property have been subsequently studied in information retrieval and arrangement strategies [13, 15, 16, 19, 23]. Definition 3.1 Let M be a (0,1)-matrix.
Reference: [15] <author> S. P. Ghosh. </author> <title> File organization: The consecutive retrieval property. </title> <journal> Communications of the ACM, </journal> <volume> 15(9) </volume> <pages> 802-808, </pages> <month> September </month> <year> 1972. </year>
Reference-contexts: The consecutive ones property have been subsequently studied in information retrieval and arrangement strategies <ref> [13, 15, 16, 19, 23] </ref>. Definition 3.1 Let M be a (0,1)-matrix. M has the consecutive ones property provided there exists a permutation matrix P such that the 1's in each column of PM occur consecutively.
Reference: [16] <author> S. P. Ghosh. </author> <title> Consecutive storage of relevant records with redundancy. </title> <journal> Communications of the ACM, </journal> <volume> 18(8) </volume> <pages> 464-471, </pages> <year> 1975. </year> <title> Minimum Redundancy Solutions are found for some special cases of query systems. The general solution is shown to be NP-complete by Kou. </title>
Reference-contexts: The consecutive ones property have been subsequently studied in information retrieval and arrangement strategies <ref> [13, 15, 16, 19, 23] </ref>. Definition 3.1 Let M be a (0,1)-matrix. M has the consecutive ones property provided there exists a permutation matrix P such that the 1's in each column of PM occur consecutively.
Reference: [17] <author> Dov Harel and R. E. Tarjan. </author> <title> Fast algorithms for finding nearest common ancestors. </title> <journal> SIAM Journal of Computing, </journal> <volume> 13(2) </volume> <pages> 338-355, </pages> <month> May </month> <year> 1984. </year>
Reference-contexts: Since the RPT reflects the fact that the immediate children of a P-vertex could be listed in any order but the left subtree of an R-vertex should be visited before the right. Inorder traversal ensures that this is satisfied. Definition 4.6 The Least Common Ancestor (LCA) <ref> [22, 3, 17, 2] </ref> of any set of vertices is the vertex that is an ancestor of every vertex in the set and a descendant of all other ancestors. The LCA of a singleton set is the vertex itself.
Reference: [18] <author> Jens Knoop, Oliver Ruthing, and Bernhard Steffen. </author> <title> Partial dead code elimination. </title> <booktitle> In PLDI [20], </booktitle> <pages> pages 147-158. </pages>
Reference-contexts: We overcome this limitation by using the RPT in conjunction with global optimizations like Partial Dead Code Elimination <ref> [18] </ref> and Partial Redundancy Elimination [7]. Such global optimizations move statements across basic blocks so that the values computed are used immediately. RPT transformations then order statements within each block optimally.
Reference: [19] <author> L. T. Kou. </author> <title> Polynomial complete consecutive information retrieval problems. </title> <journal> SIAM Jornal of Computing, </journal> <volume> 6(1), </volume> <month> March </month> <year> 1977. </year> <title> Two Extensions to the consecutive ones property: minimising the number of consecutive blocks of ones appearing in columns and minimizing the number 15 of times a tow must be split into two pieces to attain consecutive ones, are shown to be NP--complete. It is suggested that in light of these results heuristic methods must be developed for attaining close approximations to consecutive ones. </title>
Reference-contexts: The consecutive ones property have been subsequently studied in information retrieval and arrangement strategies <ref> [13, 15, 16, 19, 23] </ref>. Definition 3.1 Let M be a (0,1)-matrix. M has the consecutive ones property provided there exists a permutation matrix P such that the 1's in each column of PM occur consecutively. <p> The k-column number of a matrix M is the least number such that M has the consecutive 1's property after k-column splits. Eswaran [13] states the two cases above and provides dynamic programming solutions to the problem Both the cases have been proved to be NP-complete by Kou <ref> [19] </ref>. To make a connection between the (0,1) matrices and compiler optimizations, think of the rows of a matrix M as statements in a given program and each column as corresponding to a distinct variable in the program.
Reference: [20] <institution> Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation, </institution> <address> Orlando, Florida, June 1994. </address> <publisher> ACM Press. </publisher>
Reference: [21] <author> K. Ripken. Formale Beschreibung von Mascninen, Implementierungen and Optimierender Maschinencodeerzeugung aus attributierten Programmgraphen. </author> <type> Ph.d dissertation, </type> <institution> Technische Universitat Munchen, Germany, </institution> <month> July </month> <year> 1977. </year> <title> Introduced the idea of dynamic programming techniques to systematically consider the numerous possible sequences that can compute a given expression tree. Running time of algorithm increases exponentially with the complexity of the machine architecture. </title>
Reference-contexts: The concession that we study in this paper is to compute the k'-column number of the matrix corresponding to a program such that k' is as close to k as we can compute in a reasonable time. Ripkin <ref> [21] </ref> introduced the idea of dynamic programming techniques to systematically consider the numerous possible code sequences that can compute a given expression tree. Running time of the algorithm increases exponentially with the complexity of the machine architecture.
Reference: [22] <author> B. Schieber and U. Vishkin. </author> <title> On finding lowest common ancestors: Simplification and paral-lelization. </title> <journal> SIAM J of Computing, </journal> <volume> 17(6) </volume> <pages> 1253-1262, </pages> <month> December </month> <year> 1988. </year> <note> Also TR 63/87, Comp. </note> <institution> Sci., Tel Aviv University, </institution> <month> Jan </month> <year> 1987. </year>
Reference-contexts: Since the RPT reflects the fact that the immediate children of a P-vertex could be listed in any order but the left subtree of an R-vertex should be visited before the right. Inorder traversal ensures that this is satisfied. Definition 4.6 The Least Common Ancestor (LCA) <ref> [22, 3, 17, 2] </ref> of any set of vertices is the vertex that is an ancestor of every vertex in the set and a descendant of all other ancestors. The LCA of a singleton set is the vertex itself.
Reference: [23] <author> A. Waksman and M. W. Green. </author> <title> On the consecutive retrieval property in file organization. </title> <journal> IEEE transactions on computers, </journal> <volume> C-23:173-174, </volume> <year> 1974. </year> <month> 16 </month>
Reference-contexts: The consecutive ones property have been subsequently studied in information retrieval and arrangement strategies <ref> [13, 15, 16, 19, 23] </ref>. Definition 3.1 Let M be a (0,1)-matrix. M has the consecutive ones property provided there exists a permutation matrix P such that the 1's in each column of PM occur consecutively.
References-found: 23

