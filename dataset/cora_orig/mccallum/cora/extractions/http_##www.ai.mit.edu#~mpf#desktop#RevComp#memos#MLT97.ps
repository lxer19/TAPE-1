URL: http://www.ai.mit.edu/~mpf/desktop/RevComp/memos/MLT97.ps
Refering-URL: 
Root-URL: 
Title: Reversible Space Equals Deterministic Space (Extended Astract)  
Author: Klaus-J orn Lange Pierre McKenzie Alain Tapp 
Address: Montr eal  
Affiliation: Univ. T ubingen  Univ. de Montr eal  Univ. de  
Abstract: This paper describes the simulation of an S(n) space-bounded deterministic Turing machine by a reversible Tur-ing machine operating in space S(n). It thus answers a question posed by Bennett in 1989 and refutes the conjecture, made by Li and Vitanyi in 1996, that any reversible simulation of an irreversible computation must obey Bennett's reversible pebble game rules. 
Abstract-found: 1
Intro-found: 1
Reference: [Be73] <author> C. BENNETT, </author> <title> Logical reversibility of computation, IBM. </title> <journal> J. Res. Develop. </journal> <volume> 17 (1973), </volume> <pages> pp. 525-532. </pages>
Reference-contexts: More recently, renewed interest in the notion of reversibility was sparked by the prospect of quantum computers, whose observation-free computational steps are intrinsically reversible [De85, Sh94, Br95]. Early strategies to make a Turing machine reversible were terribly wasteful in terms of space: Lecerf's method [Le63], rediscovered by Bennett <ref> [Be73] </ref>, required space T to simulate a T (n)-time S (n)-space machine reversibly in time O (T ). Bennett then greatly improved on this by reducing the space to O (S log T ) at the expense of an increase in time to T 1+* [Be89].
Reference: [Be89] <author> C. BENNETT, </author> <title> Time/space trade-offs for reversible computation, </title> <journal> SIAM J. Comput. </journal> <month> 81:4 </month> <year> (1989), </year> <pages> pp. </pages> <month> 766-776. </month> <title> 2 In a symmetric machine each transition can be done in both directions: forward and backward. </title> <type> 5 </type>
Reference-contexts: Bennett then greatly improved on this by reducing the space to O (S log T ) at the expense of an increase in time to T 1+* <ref> [Be89] </ref>. Levine and Sherman refined the analysis of Bennett's algorithm and characterized the tradeoff between time and space even more precisely [LeSh90]. Bennett questioned [Be89] whether the reversible simulation of an irreversible computation necessarily incurs fl Wilhelm-Schickard-Institut fur Informatik, Universitat Tubingen, Sand 13, D-72076 Tubingen, Germany. lange@informatik.uni-tuebingen.de y Dep. d'informatique et <p> then greatly improved on this by reducing the space to O (S log T ) at the expense of an increase in time to T 1+* <ref> [Be89] </ref>. Levine and Sherman refined the analysis of Bennett's algorithm and characterized the tradeoff between time and space even more precisely [LeSh90]. Bennett questioned [Be89] whether the reversible simulation of an irreversible computation necessarily incurs fl Wilhelm-Schickard-Institut fur Informatik, Universitat Tubingen, Sand 13, D-72076 Tubingen, Germany. lange@informatik.uni-tuebingen.de y Dep. d'informatique et de recherche operationnelle, Universite de Montreal, C.P. 6128 succursale Centre-Ville, Montreal, H3C 3J7 Canada. <p> A Turing machine is reversible iff the infinite graph of M 's configurations, in which an arc (C; C 0 ) indicates that M can go from configuration C to configuration C 0 in a single transition, has indegree and outdegree at most one. Following Bennett <ref> [Be89] </ref>, we impose the following restrictions on the transitions of a Turing machine and claim that these are sufficient to imply reversibility. A transition is either moving (i.e. the tape head moves), or stationary. <p> Since spoiled memory is no longer useful, it is important that the memory be restored to its initial state at the end of a reversible computation. Two notions of memory cleanliness have been studied in the literature: These correspond to input-saving and to input-erasing Turing machines <ref> [Be89] </ref>. In an input-saving computation, the final tape content is #x#f (x)#. In an input-erasing computation, only f (x) remains on the tape. The latter notion was only considered useful when f is in-jective. <p> It is interesting to compare this with the equivalence of deterministic time and reversible time, which is simply shown by storing the whole computational history on a separate write-only tape <ref> [Le63, Be89] </ref>. It is remarkable that this is the very same construction which proves the equivalence of nondeterministic time and symmetric 2 time [LePa82].
Reference: [Br95] <editor> G. BRASSARD, </editor> <booktitle> A quantum jump in Computer Science, in Computer Science Today, </booktitle> <editor> ed. J. van Leeuwen, </editor> <booktitle> Lecture Notes in Computer Science, Volume 1000 (special anniversary volume), </booktitle> <publisher> Springer-Verlag (1995), </publisher> <pages> pp. 1-14. </pages>
Reference-contexts: More recently, renewed interest in the notion of reversibility was sparked by the prospect of quantum computers, whose observation-free computational steps are intrinsically reversible <ref> [De85, Sh94, Br95] </ref>. Early strategies to make a Turing machine reversible were terribly wasteful in terms of space: Lecerf's method [Le63], rediscovered by Bennett [Be73], required space T to simulate a T (n)-time S (n)-space machine reversibly in time O (T ).
Reference: [Ne66] <author> J. VON NEUMANN, </author> <title> Theory of self-reproducing automata, </title> <editor> A.W. Burks, Ed., </editor> <publisher> Univ. Illinois Press, </publisher> <address> Urbana (1966). </address>
Reference-contexts: 1 Introduction A Turing machine M is reversible iff the infinite graph of all configurations of M has indegree and outdegree one. Interest in reversibility arose at first in connection with the thermodynamics of computation, following Landauer's demonstration in 1961 that, contrary to earlier intuition (see <ref> [Ne66] </ref>), physical laws do not preclude using an arbitrarily small amount of energy to perform logically reversible computing steps [La61]. More recently, renewed interest in the notion of reversibility was sparked by the prospect of quantum computers, whose observation-free computational steps are intrinsically reversible [De85, Sh94, Br95].
Reference: [Co85] <author> S.A. COOK, </author> <title> A taxonomy of problems with fast parallel algorithms, </title> <booktitle> Information and Control 64 (1985), </booktitle> <pages> pp. 2-22. </pages>
Reference: [CoMc87] <author> S.A. COOK AND P. MCKENZIE, </author> <title> Problems complete for deterministic logarithmic space, </title> <editor> J. </editor> <booktitle> Algorithms 8 (1987), </booktitle> <pages> pp. 385-394. </pages>
Reference-contexts: The difficulty is to ensure reversibility of R at the transition function level. To simplify the presentation of the machine R, we will make use of a construction developed in <ref> [CoMc87] </ref> for the purpose of showing that permutation representation problems and tree traversal problems are logspace-complete. We now recall this construction. <p> Although we have described the construction of T and T in the context of a simple example, the construction as it applies to a general tree T should be clear. Among the properties of T T proved in <ref> [CoMc87] </ref>, we will only make use of the property that T T is a single cycle which includes precisely all the elements in T . Our reversible Turing machine R will simulate the computation of G w G w .
Reference: [De85] <author> D. DEUTSCH, </author> <title> Quantum theory, the Church-Turing principle and the universal quantum computer, </title> <journal> Proc. Royal Soc. London, Series A 400 (1985), </journal> <pages> pp. 97-117. </pages>
Reference-contexts: More recently, renewed interest in the notion of reversibility was sparked by the prospect of quantum computers, whose observation-free computational steps are intrinsically reversible <ref> [De85, Sh94, Br95] </ref>. Early strategies to make a Turing machine reversible were terribly wasteful in terms of space: Lecerf's method [Le63], rediscovered by Bennett [Be73], required space T to simulate a T (n)-time S (n)-space machine reversibly in time O (T ).
Reference: [HoUl79] <author> J.E. HOPCROFT AND J.D. ULLMAN, </author> <title> Introduction to Automata Theory, Languages, and Computation, </title> <publisher> Addison-Wesley (1979). </publisher>
Reference-contexts: Section 4 concludes with a discussion. 1 2 Preliminaries We assume familiarity with basic notions of complexity theory such as can be found in <ref> [HoUl79] </ref>. We refer to the finite set of states of a Turing machine as to its set of local states.
Reference: [KaWi93] <author> M. KARCHMER AND A. WIGDERSON, </author> <title> On span programs, </title> <booktitle> Proc. 8th IEEE Structure in Complexity Theory Conference (1993), </booktitle> <pages> pp. 102-111. </pages>
Reference-contexts: The duality mentioned above and our new results point to the question of the relationship between nondeterministic space and symmetric space. In this case however, some recent results like the inclusion of symmetric logspace in parity logspace, SC 2 , or DSPACE (log 1:5 n) <ref> [KaWi93, Ni92, NiSzWi92] </ref> suggest that the computational power of nondeterministic space and symmetric space differ. Acknowledgments Special thanks go to Michael Frank, who pointed out that the reversible constructibility condition imposed on S (n) in a former version of Theorem 3.3 was not required.
Reference: [La61] <author> R. LANDAUER, </author> <title> Irreversibility and heat generation in the computing process, </title> <journal> IBM J. Res. Develop. </journal> <volume> 5 (1961), </volume> <pages> pp. 183-191. </pages>
Reference-contexts: Interest in reversibility arose at first in connection with the thermodynamics of computation, following Landauer's demonstration in 1961 that, contrary to earlier intuition (see [Ne66]), physical laws do not preclude using an arbitrarily small amount of energy to perform logically reversible computing steps <ref> [La61] </ref>. More recently, renewed interest in the notion of reversibility was sparked by the prospect of quantum computers, whose observation-free computational steps are intrinsically reversible [De85, Sh94, Br95].
Reference: [Le63] <author> Y. LECERF, </author> <title> Machines de Turing reversibles. Insolubilite recursive en n 2 N de l'equation u = n , ou est un isomorphisme de codes, </title> <booktitle> Comptes Rendus 257 (1963), </booktitle> <pages> pp. 2597-2600. </pages>
Reference-contexts: More recently, renewed interest in the notion of reversibility was sparked by the prospect of quantum computers, whose observation-free computational steps are intrinsically reversible [De85, Sh94, Br95]. Early strategies to make a Turing machine reversible were terribly wasteful in terms of space: Lecerf's method <ref> [Le63] </ref>, rediscovered by Bennett [Be73], required space T to simulate a T (n)-time S (n)-space machine reversibly in time O (T ). Bennett then greatly improved on this by reducing the space to O (S log T ) at the expense of an increase in time to T 1+* [Be89]. <p> It is interesting to compare this with the equivalence of deterministic time and reversible time, which is simply shown by storing the whole computational history on a separate write-only tape <ref> [Le63, Be89] </ref>. It is remarkable that this is the very same construction which proves the equivalence of nondeterministic time and symmetric 2 time [LePa82].
Reference: [LeSh90] <author> R. LEVINE AND A. SHERMAN, </author> <title> A note on Bennett's time-space trade-off for reversible computation, </title> <journal> SIAM J. Comput. </journal> <month> 19:4 </month> <year> (1990), </year> <pages> pp. 673-677. </pages>
Reference-contexts: Bennett then greatly improved on this by reducing the space to O (S log T ) at the expense of an increase in time to T 1+* [Be89]. Levine and Sherman refined the analysis of Bennett's algorithm and characterized the tradeoff between time and space even more precisely <ref> [LeSh90] </ref>. Bennett questioned [Be89] whether the reversible simulation of an irreversible computation necessarily incurs fl Wilhelm-Schickard-Institut fur Informatik, Universitat Tubingen, Sand 13, D-72076 Tubingen, Germany. lange@informatik.uni-tuebingen.de y Dep. d'informatique et de recherche operationnelle, Universite de Montreal, C.P. 6128 succursale Centre-Ville, Montreal, H3C 3J7 Canada.
Reference: [LePa82] <author> P. LEWIS AND C. PAPADIMITRIOU, </author> <title> Symmetric space-bounded computation, </title> <type> Theoret. </type> <institution> Comput. Sci. </institution> <month> 19 </month> <year> (1982), </year> <pages> 161-187. </pages>
Reference-contexts: It is remarkable that this is the very same construction which proves the equivalence of nondeterministic time and symmetric 2 time <ref> [LePa82] </ref>. This duality of the pairs nondeterminism versus symmetry and determinism versus reversibility is tied to the question of whether transitions can be regarded as directed or as undirected: This makes no difference if the indegree of every configuration is at most one.
Reference: [LiVi96a] <author> M. LI AND P. VITANYI, </author> <title> Reversible simulation of irreversible computation, </title> <booktitle> Proc. 11th IEEE Conference on Computational Complexity (1996), </booktitle> <pages> pp. 301-306. </pages>
Reference-contexts: At the 1996 IEEE Computational Complexity conference, Li and Vitanyi took up Bennett's suggestion and performed an in-depth analysis of Bennett's pebble game <ref> [LiVi96a, LiVi96b] </ref>.
Reference: [LiVi96b] <author> M. LI AND P. VITANYI, </author> <title> Reversibility and adiabatic computation: trading time and space for energy, </title> <journal> Proc. Royal Soc. London, Series A 452 (1996), </journal> <pages> pp. 769-789. </pages>
Reference-contexts: At the 1996 IEEE Computational Complexity conference, Li and Vitanyi took up Bennett's suggestion and performed an in-depth analysis of Bennett's pebble game <ref> [LiVi96a, LiVi96b] </ref>.
Reference: [Ni92] <author> N. NISAN, </author> <title> RL SL, </title> <booktitle> Proc. 24th ACM Symp. on Theory of Computing (1992), </booktitle> <pages> pp. 619-623. </pages>
Reference-contexts: The duality mentioned above and our new results point to the question of the relationship between nondeterministic space and symmetric space. In this case however, some recent results like the inclusion of symmetric logspace in parity logspace, SC 2 , or DSPACE (log 1:5 n) <ref> [KaWi93, Ni92, NiSzWi92] </ref> suggest that the computational power of nondeterministic space and symmetric space differ. Acknowledgments Special thanks go to Michael Frank, who pointed out that the reversible constructibility condition imposed on S (n) in a former version of Theorem 3.3 was not required.
Reference: [NiSzWi92] <author> N. NISAN, E. SZEMEREDI, AND A. WIGDERSON, </author> <title> Undirected connectivity in O(log 1:5 n) space, </title> <booktitle> Proc. 34th IEEE Symp. on Foundations of Computer Science (1992), </booktitle> <pages> pp. 24-29. </pages>
Reference-contexts: The duality mentioned above and our new results point to the question of the relationship between nondeterministic space and symmetric space. In this case however, some recent results like the inclusion of symmetric logspace in parity logspace, SC 2 , or DSPACE (log 1:5 n) <ref> [KaWi93, Ni92, NiSzWi92] </ref> suggest that the computational power of nondeterministic space and symmetric space differ. Acknowledgments Special thanks go to Michael Frank, who pointed out that the reversible constructibility condition imposed on S (n) in a former version of Theorem 3.3 was not required.
Reference: [Sh94] <author> P. SHOR, </author> <title> Algorithms for quantum computation: Discrete log and factoring, </title> <booktitle> Proc. 35th IEEE Symp. Foundations of Comp. Sci. </booktitle> <year> (1994), </year> <pages> pp. 124-134. </pages>
Reference-contexts: More recently, renewed interest in the notion of reversibility was sparked by the prospect of quantum computers, whose observation-free computational steps are intrinsically reversible <ref> [De85, Sh94, Br95] </ref>. Early strategies to make a Turing machine reversible were terribly wasteful in terms of space: Lecerf's method [Le63], rediscovered by Bennett [Be73], required space T to simulate a T (n)-time S (n)-space machine reversibly in time O (T ).
Reference: [Si80] <author> MICHAEL SIPSER, </author> <title> Halting Space-Bounded Computations, </title> <booktitle> Theoretical Computer Science 10 (1990),pp. </booktitle> <pages> 335-338. 6 </pages>
Reference-contexts: For our purposes, it will suffice to consider the configuration tree as an undirected tree, in which each edge is duplicated. We will then in effect perform an Euler tour of the resulting tree. A similar technique was used by Sipser <ref> [Si80] </ref> to simulate an S (n) space-bounded Tur-ing machine accepting a language Y (i.e. with no bounds on space when the input w =2 Y ) by a Turing machine deciding Y in space S (n).
References-found: 19

