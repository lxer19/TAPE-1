URL: http://robotics.stanford.edu/~ronnyk/euroML94.ps
Refering-URL: http://robotics.stanford.edu/users/ronnyk/ronnyk-bib.html
Root-URL: 
Email: E-mail: Ronnyk@CS.Stanford.EDU  
Title: Bottom-Up Induction of Oblivious Read-Once Decision Graphs  
Author: Ron Kohavi 
Address: Stanford, CA. 94305  
Affiliation: Computer Science Department, Stanford University  
Note: Accepted to ECML-94  
Abstract: We investigate the use of oblivious, read-once decision graphs as structures for representing concepts over discrete domains, and present a bottom-up, hill-climbing algorithm for inferring these structures from labelled instances. The algorithm is robust with respect to irrelevant attributes, and experimental results show that it performs well on problems considered difficult for symbolic induction methods, such as the Monk's problems and parity.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Sheldon B. Akers. </author> <title> Binary decision diagrams. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-27(6):509-516, </volume> <year> 1978. </year>
Reference-contexts: He showed that it is possible to represent any switching function in O ( 2 n n ) such instructions. Akers <ref> [1] </ref> described binary decision diagrams, and gave a top-down procedure for building them using the Boole-Shannon expansion [3, 26]: f = x i f j x i =1 + x i f j x i =0 where f j x i =b is the restriction, or cofactor, of the function f
Reference: 2. <author> David A. Barrington. </author> <title> Bounded-width polynomial-size branching programs recognize exactly those languages in NC 1 . Journal of Computer and System Sciences, </title> <booktitle> 38(1) </booktitle> <pages> 150-164, </pages> <year> 1989. </year>
Reference-contexts: Two important theorems tell us that an algorithm in SPACE (S (n)) for S (n) log n has a branching program complexity of at most c S (n) for some constant c [16], and that constant-width branching programs are very powerful, being able to accept all NC 1 languages <ref> [2] </ref>. In the machine learning community, general decision graphs were investigated by Oliver [21, 22] whose algorithm constructs the graphs top-down, by doing a hill-climbing search through the space of graphs, estimating the usefulness of each graph by Wallace's MMLP (minimum message length principle).
Reference: 3. <author> George Boole. </author> <title> An investigation of the laws of thought, on which are founded the theories of logic and probabilities. </title> <publisher> London, Walton and Maberly; Macmillan and Co., 1854. Reprinted by Dover Books, </publisher> <address> New York, </address> <year> 1954. </year>
Reference-contexts: He showed that it is possible to represent any switching function in O ( 2 n n ) such instructions. Akers [1] described binary decision diagrams, and gave a top-down procedure for building them using the Boole-Shannon expansion <ref> [3, 26] </ref>: f = x i f j x i =1 + x i f j x i =0 where f j x i =b is the restriction, or cofactor, of the function f f j x i =b (x 1 ; : : : ; x n ) = f
Reference: 4. <author> Ravi B. Boppana and Michael Sipser. </author> <title> The complexity of finite functions. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science. </booktitle> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: In the computer science theory community, binary decision graphs have been called branching programs, and have been extensively studied in the hope of separating some complexity classes and for studying the amount of space needed to compute various functions <ref> [4] </ref>.
Reference: 5. <author> Karl S. Brace, Richard L. Rudell, and Randal E. Bryant. </author> <title> Efficient implementation of a BDD package. </title> <booktitle> In 27th ACM/IEEE Design Automation Conference. Proceedings, </booktitle> <pages> pages 40-45, </pages> <year> 1990. </year>
Reference-contexts: Bryant [6] introduced Ordered Binary Decision Diagrams (OBDDs), which spawned a plethora of articles and a whole subcommunity dealing with OBDDs <ref> [7, 5, 19, 13] </ref>. OBDDs are a restriction of Binary Decision Diagrams (BDDs), where a total ordering is defined over the set of variables and all paths must test variables in accordance with the given ordering. Note that OBDDs are not necessarily levelled.
Reference: 6. <author> Randal E. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on computers, </journal> <volume> C-35(8):677-691, </volume> <year> 1986. </year>
Reference-contexts: These properties help us understand the strengths and weaknesses of the OODG structure. Proofs of these properties for OBDDs can be found in <ref> [7, 6, 17] </ref>, and can be generalized to OODGs. An OODG can represent any k-categorization function. For any k-categorization function f, and for a given ordering of the variables for the levels, there is a unique (up to isomorphism) reduced OODG imple menting f . <p> There are functions for which no variable ordering results in a polynomial size OODG representation (the Shannon effect). Wegener [28] has shown that almost all Boolean functions result in exponentially sized branching programs (and hence OODGs) under all orderings. Bryant <ref> [6] </ref> showed that at least one of the 2n bits of integer multiplication is an inherently complex function, requiring exponential sized OBDD (and hence OODG) for all orderings. <p> Bryant <ref> [6] </ref> introduced Ordered Binary Decision Diagrams (OBDDs), which spawned a plethora of articles and a whole subcommunity dealing with OBDDs [7, 5, 19, 13].
Reference: 7. <author> Randal E. Bryant. </author> <title> Symbolic boolean manipulation with ordered binary-decision diagrams. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(3) </volume> <pages> 293-318, </pages> <year> 1992. </year>
Reference-contexts: These properties help us understand the strengths and weaknesses of the OODG structure. Proofs of these properties for OBDDs can be found in <ref> [7, 6, 17] </ref>, and can be generalized to OODGs. An OODG can represent any k-categorization function. For any k-categorization function f, and for a given ordering of the variables for the levels, there is a unique (up to isomorphism) reduced OODG imple menting f . <p> Bryant [6] introduced Ordered Binary Decision Diagrams (OBDDs), which spawned a plethora of articles and a whole subcommunity dealing with OBDDs <ref> [7, 5, 19, 13] </ref>. OBDDs are a restriction of Binary Decision Diagrams (BDDs), where a total ordering is defined over the set of variables and all paths must test variables in accordance with the given ordering. Note that OBDDs are not necessarily levelled.
Reference: 8. <author> J. R. Burch, E. M. Clarke, and D. E. </author> <title> Long. Representing circuits more efficiently in symbolic model checking. </title> <booktitle> In 28th ACM/IEEE Design Automation Conference. Proceedings, </booktitle> <pages> pages 403-407, </pages> <year> 1991. </year>
Reference-contexts: OBDDs have been used for automatically verifying finite state machines, including 64-bit ALUs, with up to 10 120 states by representing the state space symbolically instead of explicitly <ref> [9, 8] </ref>. These applications show, at least empirically, that many functions occurring in engineering domains seem to be representable in small (polynomial) OBDD structures (and hence in OODGs).
Reference: 9. <author> J. R. Burch, E. M. Clarke, K. L. McMillan, D. L. Dill, and L. J. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <booktitle> In Fifth Annual IEEE Symposium on Logic in Computer Science., </booktitle> <pages> pages 428-439. </pages> <publisher> IEEE Comput. Soc. Press, </publisher> <year> 1990. </year>
Reference-contexts: OBDDs have been used for automatically verifying finite state machines, including 64-bit ALUs, with up to 10 120 states by representing the state space symbolically instead of explicitly <ref> [9, 8] </ref>. These applications show, at least empirically, that many functions occurring in engineering domains seem to be representable in small (polynomial) OBDD structures (and hence in OODGs).
Reference: 10. <author> Vaclav Dvorak. </author> <title> An optimization technique for ordered (binary) decision diagrams. </title> <editor> In P. Dewilde and J. Vandewalle, editors, </editor> <booktitle> Compeuro Proceedings. Computer Systems and Software Engineering, </booktitle> <pages> pages 1-4. </pages> <publisher> IEEE Comput. Soc. Press, </publisher> <year> 1992. </year>
Reference-contexts: Operations that increase the message-length are never performed, hence the algorithm is guaranteed to terminate. The algorithm is (heuristically) able to overcome the replication and fragmentation problem associated with decision-trees. Dvorak independently discovered the bottom-up technique we have used here to minimize OBDDs <ref> [10] </ref>. Although his work resembles ours, his motivation is to minimize functions with Don't Cares, while ours is to induce structures with high predictive power. The relations between the different models, that is, OBDD, Branching Programs, and Decision Trees are summarized by Meinel in [17].
Reference: 11. <author> Steven J. Friedman and Kenneth J. Suppowit. </author> <title> Finding the optimal variable ordering for binary decision diagrams. </title> <booktitle> In 24th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 348-355, </pages> <year> 1987. </year>
Reference-contexts: Given the full instance space, it is possible to find the optimal ordering using dynamic programming by checking "only" 2 n orderings, as described in <ref> [11, 12] </ref>. In our implementation, we chose to greedily select the variable that yields the smallest width (minimal number of nodes) at the next level (equivalent to a one-ply lookahead).
Reference: 12. <author> Steven J. Friedman and Kenneth J. Suppowit. </author> <title> Finding the optimal variable ordering for binary decision diagrams. </title> <journal> IEEE Transactions On Computers, </journal> <volume> 39(5) </volume> <pages> 710-713, </pages> <year> 1990. </year>
Reference-contexts: Given the full instance space, it is possible to find the optimal ordering using dynamic programming by checking "only" 2 n orderings, as described in <ref> [11, 12] </ref>. In our implementation, we chose to greedily select the variable that yields the smallest width (minimal number of nodes) at the next level (equivalent to a one-ply lookahead).
Reference: 13. <author> Masahiro Fujita, Hisanori Fujisawa, and Jusuke Matsunaga. </author> <title> Variable ordering algorithms for ordered binary decision diagrams and their evaluation. </title> <journal> IEEE Transactions On Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 12(1) </volume> <pages> 6-12, </pages> <year> 1993. </year>
Reference-contexts: Bryant [6] introduced Ordered Binary Decision Diagrams (OBDDs), which spawned a plethora of articles and a whole subcommunity dealing with OBDDs <ref> [7, 5, 19, 13] </ref>. OBDDs are a restriction of Binary Decision Diagrams (BDDs), where a total ordering is defined over the set of variables and all paths must test variables in accordance with the given ordering. Note that OBDDs are not necessarily levelled.
Reference: 14. <author> Nagisa Ishiura, Hiroshi Sawada, and Shuzo Yajima. </author> <title> Minimization of binary decision diagrams based on exchanges of variables. </title> <booktitle> In IEEE International Conference On Computer-Aided Design. Digest of Technical Papers, </booktitle> <pages> pages 472-475. </pages> <publisher> IEEE Comput. Soc. Press, </publisher> <year> 1991. </year>
Reference-contexts: Entering the diagram at a different node allows sharing functions. 7 Future Work Since our algorithm is essentially a hill-climbing algorithm, it may not find a global minimum. Researchers working on OBDDs (cf. <ref> [18, 14] </ref>) have experimented with exchanging variables after building the graph, and have achieved good results. Deeper lookahead for variable selection is an obvious possible extension, especially since one motivation for growing the graph from the bottom is the asymmetric shape (the kite shape depicted in Fig.2) bounding the OODG.
Reference: 15. <author> C. Y. Lee. </author> <title> Representation of switching circuits by binary-decision programs. </title> <journal> The Bell System Technical Journal, </journal> <volume> 38(4) </volume> <pages> 985-999, </pages> <year> 1959. </year>
Reference-contexts: It is interesting to note that while C4.5 gets 100% on the original training set for Monk 1, it has a large variance when executed on different training sets of the same size. 6 Related Work Lee <ref> [15] </ref> introduced binary decision programs that are evaluated by executing a series of instructions that test a variable and make a two way branch. He showed that it is possible to represent any switching function in O ( 2 n n ) such instructions.
Reference: 16. <author> William J. Masek. </author> <title> A fast algorithm for the string editing problem and decision graph complexity. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1976. </year>
Reference-contexts: Two important theorems tell us that an algorithm in SPACE (S (n)) for S (n) log n has a branching program complexity of at most c S (n) for some constant c <ref> [16] </ref>, and that constant-width branching programs are very powerful, being able to accept all NC 1 languages [2].
Reference: 17. <author> Christoph Meinel. </author> <title> Branching programs | an efficient data structure for computer-aided circuit design. </title> <journal> Bulletin of the European Association For Theoretical Computer Science, </journal> <volume> 46 </volume> <pages> 149-170, </pages> <year> 1992. </year>
Reference-contexts: These properties help us understand the strengths and weaknesses of the OODG structure. Proofs of these properties for OBDDs can be found in <ref> [7, 6, 17] </ref>, and can be generalized to OODGs. An OODG can represent any k-categorization function. For any k-categorization function f, and for a given ordering of the variables for the levels, there is a unique (up to isomorphism) reduced OODG imple menting f . <p> Although his work resembles ours, his motivation is to minimize functions with Don't Cares, while ours is to induce structures with high predictive power. The relations between the different models, that is, OBDD, Branching Programs, and Decision Trees are summarized by Meinel in <ref> [17] </ref>. Translating Meinel results to the terms used in this paper, we get the following lemmas: There exists a Boolean function for which the smallest decision tree representing it has size O (2 n ), while there is an OODG representing it of size O (n).
Reference: 18. <author> Shin-ichi Minato. </author> <title> Minimum-width method of variable ordering for binary decision diagrams. </title> <journal> IEICE Transactions On Fundamentals of Electronics, Communications and Computer Sciences, </journal> <volume> E75-A(3):392-399, </volume> <year> 1992. </year>
Reference-contexts: Entering the diagram at a different node allows sharing functions. 7 Future Work Since our algorithm is essentially a hill-climbing algorithm, it may not find a global minimum. Researchers working on OBDDs (cf. <ref> [18, 14] </ref>) have experimented with exchanging variables after building the graph, and have achieved good results. Deeper lookahead for variable selection is an obvious possible extension, especially since one motivation for growing the graph from the bottom is the asymmetric shape (the kite shape depicted in Fig.2) bounding the OODG.
Reference: 19. <author> Shin-ichi Minato, Nagisa Ishiura, and Shuzo Yajima. </author> <title> Shared binary decision diagram with attributed edges for efficient boolean function manipulation. </title> <booktitle> In 27th ACM/IEEE Design Automation Conference. Proceedings, </booktitle> <pages> pages 24-28, </pages> <year> 1990. </year>
Reference-contexts: Bryant [6] introduced Ordered Binary Decision Diagrams (OBDDs), which spawned a plethora of articles and a whole subcommunity dealing with OBDDs <ref> [7, 5, 19, 13] </ref>. OBDDs are a restriction of Binary Decision Diagrams (BDDs), where a total ordering is defined over the set of variables and all paths must test variables in accordance with the given ordering. Note that OBDDs are not necessarily levelled. <p> An interesting point, first mentioned by Lee and Akers and studied in <ref> [19] </ref>, is that a decision diagram actually represents more than one function. Entering the diagram at a different node allows sharing functions. 7 Future Work Since our algorithm is essentially a hill-climbing algorithm, it may not find a global minimum.
Reference: 20. <author> Bernard M. E. Moret. </author> <title> Decision trees and diagrams. </title> <journal> ACM Computing Surveys, </journal> <volume> 14(4) </volume> <pages> 593-623, </pages> <year> 1982. </year>
Reference-contexts: 1 Introduction Top down induction of decision trees <ref> [25, 24, 20] </ref> has been one of the principal induction methods for symbolic, supervised learning. The tree structure, which is used for representing the hypothesized target concept, suffers from some well-known problems, most notably the replication problem and the fragmentation problem [23]. <p> i =b is the restriction, or cofactor, of the function f f j x i =b (x 1 ; : : : ; x n ) = f (x 1 ; : : : ; x i1 ; b; x i+1 ; : : : ; x n ) Moret <ref> [20] </ref> gives an excellent survey of work on decision trees and diagrams, with over 100 references. Bryant [6] introduced Ordered Binary Decision Diagrams (OBDDs), which spawned a plethora of articles and a whole subcommunity dealing with OBDDs [7, 5, 19, 13].
Reference: 21. <author> J.J. Oliver, D.L. Dowe, and C.S. Wallace. </author> <title> Inferring decision graphs using the minimum message length principle. </title> <editor> In A. Adams and L. Sterling, editors, </editor> <booktitle> Proceedings of the 5th Australian Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 361-367. </pages> <publisher> World Scientific, </publisher> <address> Singapore, </address> <year> 1992. </year>
Reference-contexts: The name OODG is a combination of the terms "Oblivious" and "read-Once" that are used in theoretical complexity analysis of branching programs, and the term "Decision Graph" that is used in the artificial intelligence community, most notably the recent use of the term by Oliver, Dowe, and Wal-lace in <ref> [22, 21] </ref>. Given n discrete variables (or attributes), X 1 ; X 2 ; : : : ; X n , with domains D 1 ; : : : ; D n respectively, the instance space X is the cross-product of the domains, i.e., D 1 fi fiD n . <p> In the machine learning community, general decision graphs were investigated by Oliver <ref> [21, 22] </ref> whose algorithm constructs the graphs top-down, by doing a hill-climbing search through the space of graphs, estimating the usefulness of each graph by Wallace's MMLP (minimum message length principle).
Reference: 22. <author> Jonathan J. Oliver. </author> <title> Decision graphs | an extension of decision trees. </title> <booktitle> In Proceedings of the fourth International workshop on Artificial Intelligence and Statistics, </booktitle> <pages> pages 343-350, </pages> <year> 1993. </year>
Reference-contexts: The name OODG is a combination of the terms "Oblivious" and "read-Once" that are used in theoretical complexity analysis of branching programs, and the term "Decision Graph" that is used in the artificial intelligence community, most notably the recent use of the term by Oliver, Dowe, and Wal-lace in <ref> [22, 21] </ref>. Given n discrete variables (or attributes), X 1 ; X 2 ; : : : ; X n , with domains D 1 ; : : : ; D n respectively, the instance space X is the cross-product of the domains, i.e., D 1 fi fiD n . <p> In the machine learning community, general decision graphs were investigated by Oliver <ref> [21, 22] </ref> whose algorithm constructs the graphs top-down, by doing a hill-climbing search through the space of graphs, estimating the usefulness of each graph by Wallace's MMLP (minimum message length principle).
Reference: 23. <author> Giulia Pagallo and David Haussler. </author> <title> Boolean feature discovery in empirical learning. </title> <journal> Machine Learning, </journal> <volume> 5 </volume> <pages> 71-99, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction Top down induction of decision trees [25, 24, 20] has been one of the principal induction methods for symbolic, supervised learning. The tree structure, which is used for representing the hypothesized target concept, suffers from some well-known problems, most notably the replication problem and the fragmentation problem <ref> [23] </ref>. The replication problem forces duplication of subtrees in disjunctive concepts, such as (A ^ B) _ (C ^ D); the fragmentation problem causes partitioning of the data into fragments, when a high-arity attribute is tested at a node.
Reference: 24. <author> J. R. Quinlan. </author> <title> Induction of decision trees. </title> <journal> Machine Learning, </journal> <volume> 1 </volume> <pages> 81-106, </pages> <year> 1986. </year> <note> Reprinted in Shavlik and Dietterich (eds.) Readings in Machine Learning. </note>
Reference-contexts: 1 Introduction Top down induction of decision trees <ref> [25, 24, 20] </ref> has been one of the principal induction methods for symbolic, supervised learning. The tree structure, which is used for representing the hypothesized target concept, suffers from some well-known problems, most notably the replication problem and the fragmentation problem [23].
Reference: 25. <author> J. Ross Quinlan. C4.5: </author> <title> Programs for Machine Learning. </title> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, California, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction Top down induction of decision trees <ref> [25, 24, 20] </ref> has been one of the principal induction methods for symbolic, supervised learning. The tree structure, which is used for representing the hypothesized target concept, suffers from some well-known problems, most notably the replication problem and the fragmentation problem [23].
Reference: 26. <author> C. E. Shannon. </author> <title> The synthesis of two-terminal switching circuits. </title> <journal> The Bell System Technical Journal, </journal> <volume> 28(1) </volume> <pages> 59-98, </pages> <year> 1949. </year>
Reference-contexts: He showed that it is possible to represent any switching function in O ( 2 n n ) such instructions. Akers [1] described binary decision diagrams, and gave a top-down procedure for building them using the Boole-Shannon expansion <ref> [3, 26] </ref>: f = x i f j x i =1 + x i f j x i =0 where f j x i =b is the restriction, or cofactor, of the function f f j x i =b (x 1 ; : : : ; x n ) = f
Reference: 27. <author> S.B. Thrun, J. Bala, E. Bloedorn, I. Bratko, B. Cestnik, J. Cheng, K. De Jong, S. Dzeroski andS.E. Fahlman, D. Fisher, R. Hamann, K. Kaufman, S. Keller, I. Kononenko, J. Kreuziger, R.S. Michalski, T. Mitchell, P. Pachowicz, Y. Reich, H. Vafaie, W. Van de Weldel, W. Wenzel, J. Wnek, and J. Zhang. </author> <title> The monk's problems: A performance comparison of different learning algorithms. </title> <type> Technical Report CMU-CS-91-197, </type> <institution> Carnegie Mellon University, </institution> <year> 1991. </year>
Reference-contexts: Equality is possible only if each projected instance has exactly jDj instances in the sets before the projection, where jDj is domain size of the irrelevant variable. Example 2. The Monk's Problems The Monk's problems are three artificial problems that allow comparison of algorithms. In <ref> [27] </ref>, 24 authors have compared 25 machine learning algorithms on these problems. In the given domain, robots have six different nominal attributes as follows: Head-shape 2 fround, square, octagong. Body-shape 2 fround, square, octagong. Is-smiling 2 fyes, nog. Holding 2 fsword, balloon, flagg. Jacket-color 2 fred, yellow, green, blueg.
Reference: 28. <author> Ingo Wegener. </author> <title> The Complexity of Boolean Functions. </title> <editor> B. G. Tuebner, </editor> <year> 1987. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: There are functions for which no variable ordering results in a polynomial size OODG representation (the Shannon effect). Wegener <ref> [28] </ref> has shown that almost all Boolean functions result in exponentially sized branching programs (and hence OODGs) under all orderings. Bryant [6] showed that at least one of the 2n bits of integer multiplication is an inherently complex function, requiring exponential sized OBDD (and hence OODG) for all orderings.
References-found: 28

