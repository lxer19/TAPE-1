URL: http://www.cms.dmu.ac.uk/~sp/postscripts/Polish.ps
Refering-URL: http://www.cms.dmu.ac.uk:80/~sp/
Root-URL: 
Phone: 2  
Title: Case Study in Migration to ObjectOriented System Structure Using Design Transformation Methods  
Author: Sagar Pidaparthi Grzegorz Cysewski 
Address: UK.  Gdansk, Gdansk, Poland.  
Affiliation: 1 Department of Computer Science, DeMontfort University, Leicester,  Department of Applied Informatics, Technical University of  
Abstract: Procedural programming languages are currently being used extensively in the software industry for a wide range of applications. Most of the old procedural programs, used today may not have any documentation which can be used in maintenance processes. In the recent time, there has been a paradigm shift towards object oriented design and programming, from algorithmic decomposition, structured design and procedural implementation. Hence, there is a growing need to restructure old programs which have a poor structure, during evolutionary processes. It is more economic to restructure existing software into object oriented structure by identifying objects within the subject system than to redesign software starting from scratch. Object identification relies upon program analysis and a study of inter component relationships and dependencies. Researchers in reverse engineering have proposed some guidelines to identify objects from within the subject systems. Design Transformation is the first step in restructuring existing programs, which can be followed by program translation methods to transform a procedural program into the newly identified structure. This paper reports the results of the application of three object identification methods on a sample procedural program. Secondly it provides a design of a system for program component storage and object identification. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bergstra, J.A., Heering, J., Klint,, </author> <title> P (1990) Module Algebra, </title> <journal> JACM Vol. </journal> <volume> 37 No 2 pp. </volume> <pages> 335-372. Booch, </pages> <year> G.,(1991), </year> <title> Object Oriented Design with Applications, </title> <publisher> The Benjamin/Cummings Publishing Company. </publisher>
Reference-contexts: Thus there is a need for several design level transformations of of software system, which result into algebraic operations on design elements in class algebra. In order to prove the correctness of transformations it is necessary to use formal methods for for software at design level. Module Algebra <ref> (Bergstra, Heering, Klint 1990) </ref> describes modules as terms consisting of module constants/variables and operators. According to this model modules are nothing but terms and the ways of fitting modules together are algebraic operators in the language of algebraic system.
Reference: <author> Chen, Y.F., Nishimoto, M.Y., Ramamoorthy, </author> <title> C.V.,(1990) The C Information Abstraction System, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 16, No. </volume> <pages> 3. </pages>
Reference-contexts: One of the options is to use design specification or module inter connection languages like NuMIL (Choi and Scacchi,1990), as in SOFTMAN. The second option is to use the relational databases, which was employed in OMEGA (Linton,1984), CIA <ref> (Chen, Nishimoto, Ramamoorthy, 1990) </ref> and others. Dietrich and Calliss (1991) , in a variation from OMEGA and CIA, use deductive databases for storing the program component details. In RESTRUCT, a relational database is employed for storing details of program components.
Reference: <author> Choi, S.C. and Scacchi, W., </author> <year> (1990), </year> <title> Extracting and Restructuring the design of large systems, </title> <journal> IEEE Software. </journal>
Reference-contexts: DATABASE DESIGN There are two possible options for storing and using the extracted information from software programs. One of the options is to use design specification or module inter connection languages like NuMIL <ref> (Choi and Scacchi,1990) </ref>, as in SOFTMAN. The second option is to use the relational databases, which was employed in OMEGA (Linton,1984), CIA (Chen, Nishimoto, Ramamoorthy, 1990) and others. Dietrich and Calliss (1991) , in a variation from OMEGA and CIA, use deductive databases for storing the program component details.
Reference: <author> Chikofsky, E.J., Cross II, J.H., </author> <year> (1990), </year> <title> Reverse engineering and design recovery : A taxonomy", </title> <journal> IEEE Software,Vol. </journal> <volume> 7, No. 1, </volume> <pages> pp 13-17. </pages>
Reference: <author> Dietrich, </author> <title> S.W., Calliss, F.W.,(1991) The Application of Deductive Databases to Inter-Module Code Analysis", </title> <booktitle> Proceedings of IEEE conference on software maintenance, </booktitle> <pages> pp 120-128. </pages>
Reference: <author> Feijs, L. </author> <title> (1993) Formalisation of Design Methods, Ellis Horwood Series in Computers and their Applications. </title>
Reference-contexts: Section 7 provides a description of object identification in a subject system, which is followed by presentation of results and conclusions. 2. Design Transformations Design of a software system can be viewed as organisation of software components in a program. Design is hierarchically structured and component-wise specified software system <ref> (Feijs, 1993) </ref>. Each component has a specification and an optional implementation. Usually there is one component which is called the system, which represents the system to be developed. Components in a software system are: classes, procedures, functions, types, varibales.
Reference: <author> Harandi, M.T., Ning, J.Q., </author> <year> (1990), </year> <title> Knowledge Based Program Analysis", </title> <journal> IEEE Software. </journal>
Reference: <author> Kernighan, B.W., Ritchie, </author> <title> D.M., ANSI C Language. </title>
Reference: <author> Linton, M.A.,1984, </author> <title> Implementing relational views of programs, </title> <booktitle> Proc. ACM SIGSOFT/SIGPLAN Software Engineering Symposium Practical Software Development Environment. Livadas,P.E.,Roy,P.K.,(1992), Program dependence analysis",IEEE Conference on Software Maintenance. </booktitle>
Reference-contexts: One of the options is to use design specification or module inter connection languages like NuMIL (Choi and Scacchi,1990), as in SOFTMAN. The second option is to use the relational databases, which was employed in OMEGA <ref> (Linton,1984) </ref>, CIA (Chen, Nishimoto, Ramamoorthy, 1990) and others. Dietrich and Calliss (1991) , in a variation from OMEGA and CIA, use deductive databases for storing the program component details. In RESTRUCT, a relational database is employed for storing details of program components.
Reference: <author> Liu, S.S., Wilde, N., </author> <title> (1990) Identifying Objects in a Conventional Procedural Language : An Example of Data Design Recovery", </title> <booktitle> in Proceedings of the Conference on Software Maintenance. </booktitle>
Reference-contexts: Three algorithms have been implemented in RESTRUCT project so far. The first one is a global based object identifier ( gboi ) which clusters together global variables with functions that manipulate these variables. The second algorithm, is type based object identifier ( tboi ) (Livadas and Roy, 1992), <ref> (Liu and Wilde,1990) </ref> which clusters together types defined by programmer with functions which use these types for formal parameters or return values. And the third algorithm, is a receiver based object identifier ( rboi )(Livadas and Roy, 1992) which clusters together types and functions which modify variables of these types. <p> The second step is based on the intuition that if a routine must be clustered with one of its parameter types, it should be clustered with the most complex of these types <ref> (Liu and Wilde,1990) </ref> : a) if type x is used to define type y, then we say that x is a subtype of y and y is a super_type of x, denoted by x &lt;&lt; y; b) if x &lt;&lt; y and y &lt;&lt; z then x &lt;&lt; z.
Reference: <author> McFall, D., Sleith, G., MacRae, J., </author> <title> Towards an Object Oriented Representation of Structured Code. </title>
Reference: <author> Pidaparthi, S., </author> <title> (1994)Forward and Reverse Engineering CASE Tool Supporting Multiple Views for Software Development". </title> <institution> Internal Report for De Montfort University, Leicester, U.K. </institution>
Reference-contexts: The new program structure information can be used to synthesise the object oriented source code. This paper reports on object identification algorithms implemented for integrated forward and reverse engineering workbench <ref> (Pidaparthi, 1994) </ref> supporting multiple views for restructuring procedural programs. It also provides results of application of object identification techniques on a subject system and provides a discussion on these results. In order to migrate from procedural programs to object oriented software, transformations at design level have to be performed.
Reference: <author> Sneed, H.M., </author> <title> (1992),Migration of Procedurally Oriented Cobol Programs in an ObjectOriented Architecture, </title> <booktitle> IEEE Conference on Software Maintenance. </booktitle>
References-found: 13

