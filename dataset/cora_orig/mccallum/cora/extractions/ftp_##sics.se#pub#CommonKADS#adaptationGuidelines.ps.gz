URL: ftp://sics.se/pub/CommonKADS/adaptationGuidelines.ps.gz
Refering-URL: http://www.dsv.su.se/~henke/ML/ml-publ.html
Root-URL: 
Email: E-mail: fklasorsv,olleo,heshamg@sics.se  
Title: Guidelines for Adapting an Interpretation Model in an Application  
Author: Klas Orsvarn, Olle Olsson, Hesham A. Hassan 
Date: March 15, 1995  
Address: Box 1263, 164 28 Kista, Sweden  
Affiliation: Swedish Institute of Computer Science Knowledge Technology and Methodology Group  
Abstract: In the context of the CommonKADS approach to knowledge acquisition, we present general guidelines for adapting a selected interpretation model to the specific needs of an application. The guidelines are framed in a description of the select-and-modify modelling process, and the factors involved in it. The cornerstone of the guidelines is that the requirements of the modification should be carefully investigated before making the adaptation. We have found that this investigation can be supported by the same conceptual framework of application features that are used to index libraries of generic modelling components, called task features in CommonKADS. The requirements analysis should be used to drive the adaptation activity, but strong support for this is beyond the current scope of the guidelines.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aamodt, B. Benus, C. Duursma, C. Tomlinson, R. Schrooten, and W. Van de Velde. </author> <title> Task features and their use in CommonKADS. </title> <institution> ESPRIT Project P5248 Deliverable D1.5 KADS-II/T1.5/VUB/TR/014/1.0, Free University of Brussels & University of Amsterdam & Lloyd's Register, </institution> <year> 1992. </year>
Reference-contexts: familiar with the basic terminology of expertise modelling in CommonKADS [24]. 2 Overview of the Select-and-Modify Approach The Select-and-Modify approach is decomposed into the following four activities, which are illustrated in figure 1: Select-IM: Select an interpretation model (IM), on the basis of selection critera called task features in CommonKADS <ref> [1] </ref>. Evaluate-IM: Investigate whether the selected interpretation model is suitable in the application, or whether it is necessary to modify it. Modify-IM: Modify the interpretation model, to match the requirements identified in the evaluation. The result of the modification is again evaluated. <p> We recommend that modification requirements are expressed in terms of task features. A task feature in CommonKADS is any characteristic of the world which is relevant for accomplishing a real-life task. In its original definition <ref> [1] </ref>, it refers to features that guide construction of an expertise model from generic models and components in the CommonKADS library. We propose to use task features also to denote the characteristic of the world that necessitates (and thus justifies) a modification. 5 The task feature framework of CommonKADS [1] gives <p> definition <ref> [1] </ref>, it refers to features that guide construction of an expertise model from generic models and components in the CommonKADS library. We propose to use task features also to denote the characteristic of the world that necessitates (and thus justifies) a modification. 5 The task feature framework of CommonKADS [1] gives guidance in identifying and expressing relevant features of applications. It shows categories of features to look for, and it encourages separation between features that are in some sense independent. The framework contains a classification hierarchy of different types of task features. <p> An example feature could be that the user is providing discriminating observations, and the cost of data-gathering is critical. These three categories in turn have a hierarchy of sub-categories, which is partly illustrated in figure 2. The rest of the hierarchy is found in <ref> [1] </ref>. The task features of a model discrepancy are found by trying to explain why a modification is necessary, and to explain it in terms of task features. <p> This should ideally be complemented with a result oriented description, which is more general. 10 We have found that the task feature framework of CommonKADS <ref> [1] </ref> provides guidance in characterizing the requirements of modifications, but we believe it would be possible to provide stronger support by extending that framework, e.g. the classification and inventory of task features, and the instructions for task feature acquisition (the notion of task setting feature, introduced here, is an example).
Reference: [2] <author> J. M. Akkermans, B. J. Wielinga, and A. Th. Schreiber. </author> <title> Steps in constructing problem-solving methods. </title> <editor> In N. Aussenac, G. Boy, B. Gaines, M. Linster, J.-G. Ganascia, and Y. Kodratoff, editors, </editor> <title> Knowledge Acquisition for Knowledge-Based Systems. </title> <booktitle> Proceedings of the 7th European Workshop EKAW'93, Toulouse and Caylus, France, number 723 in Lecture Notes in Computer Science, </booktitle> <pages> pages 45-65, </pages> <address> Berlin Heidelberg, Germany, </address> <month> September </month> <year> 1993. </year> <note> Springer-Verlag. </note>
Reference-contexts: We have developed guidelines for the select-and-modify approach [13] in CommonKADS [24], the successor of KADS-I. (The Expertise Model Definition Document of CommonKADS [23] also contains guidelines for the approaches called data-driven, function-structure refinement [19], and competence directed refinement <ref> [2] </ref>.) This paper gives a shortened presentation of those select-and-modify guidelines, with some extensions.
Reference: [3] <author> J. Breuker and W. Van de Velde, </author> <title> editors. CommonKADS Library for Expertise Modelling: Reusable Problem Solving Components. </title> <address> IOS-Press, Amsterdam, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: In CommonKADS, the library contains hierarchies of problem solving methods that are more suited to capture variations between tasks of the same kind <ref> [3] </ref>. Expertise models will typically be developed by gradual refinement using that library rather than direct selection of a complete interpretation model. Nevertheless, modification of the result will still often be required, since no library can satisfy every requirement. <p> That is where we have found the major difficulties of the select-and-modify approach. Furthermore, the selection from the library is intimately dependent on aspects of the specific library. For example, in the current CommonKADS library <ref> [3] </ref>, the different parts of the library (e.g. for different problem types) are presented with their own associated guidelines for selection. <p> A comprehensive task feature framework is also needed to build better libraries (note that the CommonKADS task feature framework was hardly used at all in the CommonKADS library <ref> [3] </ref>). This brings us to another interesting prospect for the future; to extend these guidelines to cover how to incorporate new IMs into the library, i.e. models that have been created by modifying a selected IM.
Reference: [4] <author> J. A. Breuker, </author> <title> editor. Model Driven Knowledge Acquisition: Interpretation Models. </title> <institution> University of Amsterdam and STL Ltd, </institution> <year> 1987. </year> <title> ESPRIT Project P1098, Deliverable D1 (task A1). </title>
Reference-contexts: 1 Introduction Select-and-Modify denotes an approach to expertise modelling where a fairly complete generic model is selected from a set of predefined models, is subsequently modified to suit the needs of the application, resulting in a complete expertise model after additional domain knowledge acquisition. This modelling approach distinguished KADS-I <ref> [4] </ref> from other model driven approaches of the late 80's, like Generic Tasks [5] and Role Limiting Methods [9], where the generic models were hardwired into tools, and could not be modified. <p> His permanent position is at Cairo University, Institute of Statistical Studies and Research, Computer Science Department. 1 In KADS-I, the library of reusable modelling components consisted of a set of interpretation models <ref> [4] </ref>, containing complete inference structures and corresponding task (control) structures, classified in a taxonomy of problem types, e.g. assessment, diagnosis, and configuration. The prevailing experience from KADS-I is that interpretation models need to be adapted to the application to serve as the task and inference knowledge in an expertise model. <p> It may be much easier to eliminate the discrepancy by interpreting and completing the IM in the intended way, than to start modifying the IM. For example, in a case-study of using the IM called Systematic Diagnosis by Localization <ref> [4] </ref> to model a diagnosis application [11], we interpreted the associated domain structure, the sub-component relation, as the sub-component 6 If learning from experience were part of the agent's role, this distinction would be less clear. 7 relation in the device design.
Reference: [5] <author> B. Chandrasekaran. </author> <title> Generic tasks in knowledge based reasoning: High level building blocks for expert system design. </title> <journal> IEEE Expert, </journal> <volume> 1(3) </volume> <pages> 23-30, </pages> <year> 1986. </year>
Reference-contexts: This modelling approach distinguished KADS-I [4] from other model driven approaches of the late 80's, like Generic Tasks <ref> [5] </ref> and Role Limiting Methods [9], where the generic models were hardwired into tools, and could not be modified.
Reference: [6] <author> Elliot J. Chikofsky and James H. </author> <title> Cross II. Reverse engineering and design recovery: A taxonomy. </title> <journal> IEEE Software, </journal> <pages> pages 13-17, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: other agents are specified in the communication model in CommonKADS, and are not considered in this evaluation. 4 The notion of purely syntactic discrepancy is analogous to the notion of restructuring as a special case of reengineering in software engineering, where the latter may also lead to changes in behaviour <ref> [6] </ref>. 5 * We may discover that the apparent discrepancy was due to misinterpretation of the IM. * We can work systematically from the requirements in the modification activity. * The (syntactic) description of a model discrepancy may no longer be applicable after modifying the IM to eliminate other discrepancies, even
Reference: [7] <author> Isaac Khabaza and Steven Wells. KADS-II and RED: </author> <title> SAT current expertise model. ESPRIT Project P5248 KADS-II/TN/V.2/LR/0097/1.0, Lloyd's Register, </title> <year> 1993. </year>
Reference-contexts: Note that the specific modifications always depend on what the current IM looks like. 6 Examples and Empirical Evaluation The guidelines described in this paper were first tested by preparing a detailed example scenario [14] of developing the SAT expertise model <ref> [7] </ref> according to the guidelines. That model was originally developed using a select-and-modify approach, but without any guidelines. The scenario is a reconstruction of the process, which naturally deviates substantially from the original process.
Reference: [8] <author> Georg Klinker, David Marques, and John McDermott. </author> <title> The Active Glossary: Taking integration seriously. </title> <journal> Knowledge Acquisition, </journal> <volume> 5 </volume> <pages> 173-197, </pages> <year> 1993. </year>
Reference-contexts: But it still remains to be shown that the guidelines can be applied by others than the authors. For a wider audience, they could be presented more pedagogically, avoiding some notions that are of more theoretical interest. 7 Related Work The Spark-Burn-Firefighter (SBF) framework <ref> [8] </ref>, and the prot eg e-ii system [15], both have an indexing scheme for selection of reusable methods and mechanisms, that corresponds to the task feature framework of CommonKADS. <p> Both approaches anticipate that selected configurations may have to be further adapted, to suit an application, but the SBF framework does not provide any guidance for this <ref> [8, 25] </ref>, and as far as we are aware of, prot eg e-ii does not either. <p> Both approaches anticipate that selected configurations may have to be further adapted, to suit an application, but the SBF framework does not provide any guidance for this [8, 25], and as far as we are aware of, prot eg e-ii does not either. However, Klinker <ref> [8] </ref> mentions that if there are activity lables (indexing information in SBF) that do not overlap with the lables of the selected mechanism (in need of modification), this can be used by the programmer as a high-level specification to refine an existing programming construct or define a new one.
Reference: [9] <author> J. McDermott. </author> <title> Preliminary steps towards a taxonomy of problem-solving methods. </title> <editor> In S. Mar-cus, editor, </editor> <booktitle> Automating Knowledge Acquisition for Expert Systems, </booktitle> <pages> pages 225-255. </pages> <publisher> Kluwer, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: This modelling approach distinguished KADS-I [4] from other model driven approaches of the late 80's, like Generic Tasks [5] and Role Limiting Methods <ref> [9] </ref>, where the generic models were hardwired into tools, and could not be modified.
Reference: [10] <author> K. Orsvarn and J-O. Carlsson. </author> <title> Analysis of Buster. </title> <institution> ESPRIT Project P5248 KADS-II/M2.3/WP/SICS/006/0.1, SICS, </institution> <year> 1993. </year>
Reference-contexts: in the guidelines as a source of information for modelling the future KBS, but this does not require an explicit model of current expertise. 3 Problems Addressed The guidelines reported here are based on our experiences of expertise modelling by the select-and-modify approach, in the fields of technical diagnosis ([11], <ref> [10] </ref>), and diagnosis and assessment in agriculture [17, 18].
Reference: [11] <author> Klas Orsvarn. </author> <title> Adaptation of a task specific problem solving method to the features of an application. </title> <booktitle> In Proc. 7th Banff Knowledge-Acquisition for Knowledge-Based Systems Workshop, </booktitle> <pages> pages 19-1 - 19-. </pages> <institution> SRDG Publications, University of Calgary, </institution> <month> October </month> <year> 1992. </year> <month> 11 </month>
Reference-contexts: This is a cornerstone of these guidelines, and we address this in the evaluation activity. This general idea derives from one of the knowledge modelling experiences mentioned above <ref> [11] </ref>, where discrepancies between the interpretation model and the actual application features, identified by rational justification, were used to drive the adaptation process. <p> It may be much easier to eliminate the discrepancy by interpreting and completing the IM in the intended way, than to start modifying the IM. For example, in a case-study of using the IM called Systematic Diagnosis by Localization [4] to model a diagnosis application <ref> [11] </ref>, we interpreted the associated domain structure, the sub-component relation, as the sub-component 6 If learning from experience were part of the agent's role, this distinction would be less clear. 7 relation in the device design.
Reference: [12] <author> Klas Orsvarn. </author> <title> Case-study with Benjamins' library of diagnosis methods. </title> <booktitle> Submitted to Knowl--edge Engineering Forum, </booktitle> <address> Sankt Augustin, Germany, </address> <year> 1995. </year>
Reference-contexts: Later, the guidelines have also been applied in a case-study of knowledge modelling using Richard Benjamins' library of problem solving methods for diagnosis tasks <ref> [12] </ref>. The target of knowledge modelling was reverse engineering of an existing diagnosis application, called HP. The best IM of HP that could be generated with the library was not quite suitable, but needed modification.
Reference: [13] <author> Klas Orsvarn, Olle Olsson, and Hesham A. Hassan. </author> <title> Guidelines for the Select-and-Modify approach. </title> <editor> In B. Wielinga, editor, </editor> <title> Expertise Model Definition Document. </title> <institution> University of Ams-terdam, </institution> <year> 1994. </year>
Reference-contexts: This modelling approach distinguished KADS-I [4] from other model driven approaches of the late 80's, like Generic Tasks [5] and Role Limiting Methods [9], where the generic models were hardwired into tools, and could not be modified. We have developed guidelines for the select-and-modify approach <ref> [13] </ref> in CommonKADS [24], the successor of KADS-I. (The Expertise Model Definition Document of CommonKADS [23] also contains guidelines for the approaches called data-driven, function-structure refinement [19], and competence directed refinement [2].) This paper gives a shortened presentation of those select-and-modify guidelines, with some extensions. <p> but it does not include the agent itself, the nature of its knowledge, or how the agent acquired it (the KA process). 5 We use the general term requirements since there may be relevant requirements that cannot be expressed in terms of task features, as discussed in the original guidelines <ref> [13] </ref>. Vanwelkenhuysen emphasizes the need for other kinds of requirements than task features [22], but the examples he gives are closely related to task features. 6 feature categories: domain, purpose, and environment. <p> It is often desirable to make modifications by refinement if possible. Examples of such refinements can be found in [19]. The complete version of the guidelines reported here <ref> [13] </ref>, describes some general categories of task features that often occur as modification requirements, together with modifications that may achieve the desired result. <p> Acknowledgements Bob Wielinga and Steve Wells provided helpful comments on an earlier version of the complete guidelines <ref> [13] </ref>. Steve has also given us very valuable feedback on the guidelines while reconstructing the above mentioned modelling scenario of the SAT expertise model.
Reference: [14] <author> Klas Orsvarn and Steve Wells. </author> <title> Modelling scenario: SAT expertise model. </title> <editor> In B. Wielinga, editor, </editor> <title> Expertise Model Definition Document. </title> <institution> University of Amsterdam, </institution> <year> 1994. </year>
Reference-contexts: Note that the specific modifications always depend on what the current IM looks like. 6 Examples and Empirical Evaluation The guidelines described in this paper were first tested by preparing a detailed example scenario <ref> [14] </ref> of developing the SAT expertise model [7] according to the guidelines. That model was originally developed using a select-and-modify approach, but without any guidelines. The scenario is a reconstruction of the process, which naturally deviates substantially from the original process. <p> An elaboration of how to do this would be valuable. This is the focus of Vanwelkenhuysen's guidelines [21, 22]. This mapping could be facilitated by providing tool support for the whole select-and-modify process. As noted in the SAT scenario <ref> [14] </ref>, a promising use of the kind of task feature analysis proposed here is in validation/verification, as all modelling decisions, and the reasons for them, are completely explicit. 10 The main reason why our guidelines are expressed in terms of activities and steps is that this was the general format of
Reference: [15] <author> A. Puerta, J. Egar, S. Tu, and M. Musen. </author> <title> A multiple-method knowledge-acquisition shell for the automatic generation of knowledge-acquisition tools. </title> <journal> Knowledge Acquisition, </journal> <volume> 4 </volume> <pages> 171-196, </pages> <year> 1992. </year>
Reference-contexts: For a wider audience, they could be presented more pedagogically, avoiding some notions that are of more theoretical interest. 7 Related Work The Spark-Burn-Firefighter (SBF) framework [8], and the prot eg e-ii system <ref> [15] </ref>, both have an indexing scheme for selection of reusable methods and mechanisms, that corresponds to the task feature framework of CommonKADS.
Reference: [16] <author> Philip Rademakers and Johan Vanwelkenhuysen. </author> <title> Generic models and their support in modeling problem solving behaviour. </title> <editor> In Jean-Marc David, Jean-Paul Krivine, and Reid Simmons, editors, </editor> <booktitle> Second Generation Expert Systems, </booktitle> <pages> pages 360-374. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin Heidel-berg, Germany, </address> <year> 1993. </year>
Reference-contexts: From these experiences, we have identified the following difficulties in the adaptation process; difficulties that have motivated the contents of these guidelines (others have reported difficulties in the selection process <ref> [16] </ref>, but these are beyond the current scope of our guidelines). * In the worst case, modification is as hard as purely data-driven (bottom-up) modelling. * It may be difficult to decide exactly which part of the structure needs to be modified, which entails backtracking in the modification process, when decisions <p> However, it is important to keep in mind that there are other goals in a project that influence the suitability criteria of the IM <ref> [16] </ref>. For example, the domain knowledge should not be too costly to acquire, and the resulting EM should be easy enough to validate and maintain. It should also be possible to explain the line of reasoning to the end user. <p> This seems similar to our proposed use of task features to guide the adaptation process. Rademakers and Vanwelkenhuysen have described their experiences of KBS development with the use of generic models in general (of which IM's is one kind), and have provided some advice based on that <ref> [16] </ref>. They identify several problems, of which the need to modify the generic models to adapt them to the application is only one.
Reference: [17] <author> A. Rafea, H. Hassan, S. Edrees, M. Mahmoud, S. El-Azhary, K. Tawfik, I. Ibrahim, and M. Meshref. </author> <title> Experience with KADS as an expert systems development methodology for crop production management. </title> <booktitle> In Proc. 2nd National Expert Systems and Development Workshop, </booktitle> <address> Cairo, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: information for modelling the future KBS, but this does not require an explicit model of current expertise. 3 Problems Addressed The guidelines reported here are based on our experiences of expertise modelling by the select-and-modify approach, in the fields of technical diagnosis ([11], [10]), and diagnosis and assessment in agriculture <ref> [17, 18] </ref>.
Reference: [18] <author> A. Salah, A. Rafea, and E. Mohamed. </author> <title> An expert system for citrus cultivation feasibility. </title> <booktitle> In Proc. First International Conference On Expert System and Development., </booktitle> <address> Cairo, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: information for modelling the future KBS, but this does not require an explicit model of current expertise. 3 Problems Addressed The guidelines reported here are based on our experiences of expertise modelling by the select-and-modify approach, in the fields of technical diagnosis ([11], [10]), and diagnosis and assessment in agriculture <ref> [17, 18] </ref>.
Reference: [19] <author> A. Th. Schreiber and B. J. Wielinga. </author> <title> Model construction. </title> <editor> In A. Th. Schreiber, B. J. Wielinga, and J. A. Breuker, editors, KADS: </editor> <booktitle> A Principled Approach to Knowledge-Based System Development, </booktitle> <pages> pages 93-118. </pages> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1993. </year>
Reference-contexts: We have developed guidelines for the select-and-modify approach [13] in CommonKADS [24], the successor of KADS-I. (The Expertise Model Definition Document of CommonKADS [23] also contains guidelines for the approaches called data-driven, function-structure refinement <ref> [19] </ref>, and competence directed refinement [2].) This paper gives a shortened presentation of those select-and-modify guidelines, with some extensions. <p> We recommend a systematic analysis of how the requirements can be satisfied, based on the available sources of knowledge, which may also require further analysis of the requirements themselves. It is often desirable to make modifications by refinement if possible. Examples of such refinements can be found in <ref> [19] </ref>. The complete version of the guidelines reported here [13], describes some general categories of task features that often occur as modification requirements, together with modifications that may achieve the desired result. <p> Therefore, his guidelines and ours can be regarded as complementary. Schreiber and Wielinga have described a top-down model construction process, in which a selected inference structure for diagnosis tasks is successively refined according to different characteristics of diagnosis applications <ref> [19] </ref> (called the function-structure refinement approach in Com-monKADS [23]). <p> There is a need to provide stronger support for the Modify-IM activity. The present guidelines are focused on identifying the requirements for modification, but more could be said about how to find the appropriate modification. Schreiber and Wielinga <ref> [19] </ref> have described examples of how to drive inference structure refinement in a seemingly systematic way by task features. We believe that other modifications (structural change rather than refinement) can be described in a similar way, as generalization followed by the same kind of refinement.
Reference: [20] <author> A. Valente and C. Lockenhoff. </author> <title> Assessment models for the CommonKADS library. </title> <institution> ESPRIT Project P5248 KADS-II/T1.3/UvA/36/1.0, University of Amsterdam, </institution> <year> 1993. </year>
Reference-contexts: After that, we will discuss how to describe the specific requirements of the application that cause the discrepancy. 1 If the library produces only inference structures, as for example the library of assessment models by Valente and Lockenhoff <ref> [20] </ref>, adding the task knowledge is part of completing the IM. 2 Descriptions of evaluation criteria and techniques would of course be useful in these guidelines, but that will be the topic of future work. 4 4.2.1 Describe model discrepancies Model discrepancies can be divided into two categories: (i) behaviour discrepancies
Reference: [21] <author> Johan Vanwelkenhuysen. </author> <title> Participative Conceptual System Design of Industrial Knowledge Systems. </title> <type> PhD thesis, </type> <institution> Vrije Universiteit Brussel, AI Lab, </institution> <year> 1993. </year>
Reference-contexts: Johan Vanwelkenhuysen has also identified requirements analysis as a key to guidance in the modification of generic models <ref> [21, 22] </ref>. 4 Evaluate-IM The goal of the Evalate-IM activity is to evaluate whether the selected interpretation model (IM) is suitable in the application, and if not, point out the requirements of the application that make it not suitable, ideally in terms of task features. 3 We will describe the evaluation <p> They highlight selection of a generic model as the main problem. 9 In our experience, the main problem has been to find out how to make a good 9 The wrong model was selected in one of their applications. The application is described in more detail in <ref> [21] </ref>, where it is clear that the "right" model was not even considered in the initial selection. <p> They also give some advice on how to avoid the problems, but they do not address the adaptation problem. Vanwelkenhuysen has later addressed the problem of adapting generic models, in an approach to expertise modelling called requirements-structure driven design <ref> [21, 22] </ref>. Although his work has been independent of ours, the conclusions he has reached are very similar to ours, which is encouraging. Most importantly, he too identifies analysis of modification requirements as a key to success. However, his work emphasizes quite different aspects of the process from ours. <p> The scenario and case-study mentioned in section 6 support this claim to a large extent, and we conclude that the guidelines reported here are very promising as support for the knowledge engineer. The fact that Vanwelkenhuysen's analysis of the process of adapting generic models <ref> [21, 22] </ref> is consistent with ours, is also encouraging. This paper has provided a map of the select-and-modify process, which improves the understanding of what it involves. This can be used to facilitate future research, towards stronger and extended guidance. <p> The guidelines for the Modify-IM activity recommend that modifications are documented as a mapping from requirements to modifications, for validation and traceability during the system life-cycle. An elaboration of how to do this would be valuable. This is the focus of Vanwelkenhuysen's guidelines <ref> [21, 22] </ref>. This mapping could be facilitated by providing tool support for the whole select-and-modify process.
Reference: [22] <author> Johan Vanwelkenhuysen. </author> <title> Embedding non-functional requirements analyses in conceptual knowledge system designs. </title> <booktitle> In Proc. 9th Banff Knowledge-Acquisition for Knowledge-Based Systems Workshop, </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: Johan Vanwelkenhuysen has also identified requirements analysis as a key to guidance in the modification of generic models <ref> [21, 22] </ref>. 4 Evaluate-IM The goal of the Evalate-IM activity is to evaluate whether the selected interpretation model (IM) is suitable in the application, and if not, point out the requirements of the application that make it not suitable, ideally in terms of task features. 3 We will describe the evaluation <p> Vanwelkenhuysen emphasizes the need for other kinds of requirements than task features <ref> [22] </ref>, but the examples he gives are closely related to task features. 6 feature categories: domain, purpose, and environment. <p> They also give some advice on how to avoid the problems, but they do not address the adaptation problem. Vanwelkenhuysen has later addressed the problem of adapting generic models, in an approach to expertise modelling called requirements-structure driven design <ref> [21, 22] </ref>. Although his work has been independent of ours, the conclusions he has reached are very similar to ours, which is encouraging. Most importantly, he too identifies analysis of modification requirements as a key to success. However, his work emphasizes quite different aspects of the process from ours. <p> The scenario and case-study mentioned in section 6 support this claim to a large extent, and we conclude that the guidelines reported here are very promising as support for the knowledge engineer. The fact that Vanwelkenhuysen's analysis of the process of adapting generic models <ref> [21, 22] </ref> is consistent with ours, is also encouraging. This paper has provided a map of the select-and-modify process, which improves the understanding of what it involves. This can be used to facilitate future research, towards stronger and extended guidance. <p> The guidelines for the Modify-IM activity recommend that modifications are documented as a mapping from requirements to modifications, for validation and traceability during the system life-cycle. An elaboration of how to do this would be valuable. This is the focus of Vanwelkenhuysen's guidelines <ref> [21, 22] </ref>. This mapping could be facilitated by providing tool support for the whole select-and-modify process. <p> If there are relevant requirements that cannot be expressed in terms of task features, as suggested in <ref> [22] </ref>, a wider framework of requirements may need to be developed. A comprehensive task feature framework is also needed to build better libraries (note that the CommonKADS task feature framework was hardly used at all in the CommonKADS library [3]).
Reference: [23] <author> B. J. Wielinga, </author> <title> editor. Expertise Model Definition Document. </title> <institution> University of Amsterdam, </institution> <month> July </month> <year> 1994. </year> <title> Deliverable DM2.1c, ESPRIT Project P-5248, </title> <publisher> /KADS-II/M2/UvA/026/5.0. </publisher>
Reference-contexts: We have developed guidelines for the select-and-modify approach [13] in CommonKADS [24], the successor of KADS-I. (The Expertise Model Definition Document of CommonKADS <ref> [23] </ref> also contains guidelines for the approaches called data-driven, function-structure refinement [19], and competence directed refinement [2].) This paper gives a shortened presentation of those select-and-modify guidelines, with some extensions. <p> Therefore, his guidelines and ours can be regarded as complementary. Schreiber and Wielinga have described a top-down model construction process, in which a selected inference structure for diagnosis tasks is successively refined according to different characteristics of diagnosis applications [19] (called the function-structure refinement approach in Com-monKADS <ref> [23] </ref>). <p> kind of task feature analysis proposed here is in validation/verification, as all modelling decisions, and the reasons for them, are completely explicit. 10 The main reason why our guidelines are expressed in terms of activities and steps is that this was the general format of expertise modelling guidelines in CommonKADS <ref> [23] </ref>.
Reference: [24] <author> B. J. Wielinga, W. Van de Velde, A. Th. Schreiber, and J. M. Akkermans. </author> <title> Towards a unification of knowledge modelling approaches. </title> <editor> In Jean-Marc David, Jean-Paul Krivine, and Reid Simmons, editors, </editor> <booktitle> Second Generation Expert Systems, </booktitle> <pages> pages 299-335. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin Heidelberg, Germany, </address> <year> 1993. </year>
Reference-contexts: This modelling approach distinguished KADS-I [4] from other model driven approaches of the late 80's, like Generic Tasks [5] and Role Limiting Methods [9], where the generic models were hardwired into tools, and could not be modified. We have developed guidelines for the select-and-modify approach [13] in CommonKADS <ref> [24] </ref>, the successor of KADS-I. (The Expertise Model Definition Document of CommonKADS [23] also contains guidelines for the approaches called data-driven, function-structure refinement [19], and competence directed refinement [2].) This paper gives a shortened presentation of those select-and-modify guidelines, with some extensions. <p> After that, we briefly describe the results of empirical evaluation. Finally, we discuss related work, draw some conclusions and outline future work. Due to space-limitations, we have to assume that the reader is familiar with the basic terminology of expertise modelling in CommonKADS <ref> [24] </ref>. 2 Overview of the Select-and-Modify Approach The Select-and-Modify approach is decomposed into the following four activities, which are illustrated in figure 1: Select-IM: Select an interpretation model (IM), on the basis of selection critera called task features in CommonKADS [1].
Reference: [25] <author> G. Yost, G. Klinker, M. Linster, D. Marques, and J. McDermott. </author> <title> The SBF framework, </title> <type> 1989-1994: </type> <note> From applications to workplaces. </note> <editor> In L. Steels, G. Schreiber, and W. Van de Velde, editors, </editor> <booktitle> Proc. EKAW`94, number 867 in LNAI, </booktitle> <pages> pages 318-339. </pages> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1994. </year> <note> The publications by the first author are available at http://www.sics.se/ktm/kads.html. Other KADS-II reports are found at http://swi.psy.uva.nl/projects/CommonKADS/home.html 12 </note>
Reference-contexts: Both approaches anticipate that selected configurations may have to be further adapted, to suit an application, but the SBF framework does not provide any guidance for this <ref> [8, 25] </ref>, and as far as we are aware of, prot eg e-ii does not either.
References-found: 25

