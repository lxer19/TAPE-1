URL: http://www.cs.indiana.edu/database/Ode/doc/att-db-89-3.ps.Z
Refering-URL: http://www.cs.indiana.edu/database/Ode/doc/
Root-URL: http://www.cs.indiana.edu
Title: Rationale for the Design of Persistence and Query Processing Facilities in the Database Programming Language O++  
Author: R. Agrawal N. H. Gehani 
Address: Murray Hill, New Jersey 07974  
Affiliation: AT&T Bell Laboratories  
Abstract: ODE is a database system and environment based on the object paradigm. It offers one integrated data model for both database and general purpose manipulation. The database is defined, queried, and manipulated in the database programming language O++, an extension of C++. O++ uses the C++ object definition facility, called the class, to provide data encapsulation and multiple inheritance. O++ extends C++ by providing facilities for creating persistent and versioned objects, defining and manipulating sets, organizing persistent objects into clusters, iterating clusters of persistent objects, and associating constraints and triggers with objects. In this paper, we present the O++ facilities for persistence and query processing, the alternatives considered, and the rationale behind the design choices. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, </author> <title> ``Alpha: An Extension of Relational Algebra to Express a Class of Recursive Queries'', </title> <booktitle> Proc. IEEE 3rd Int'l Conf. Data Engineering, </booktitle> <address> Los Angeles, California, </address> <month> Feb. </month> <year> 1987, </year> <pages> 580-590. </pages>
Reference-contexts: Considerable research has been devoted recently to developing notations for expressing recursive queries in a relational framework and designing algorithms for evaluating them (see, for example, <ref> [1, 7] </ref>). Providing capability to express recursive queries in a form that can be used to recognize and optimize recursive queries was another design goal of O++. The distinguished clusters mirror the hierarchy relationship of the corresponding types.
Reference: [2] <author> R. Agrawal and N. H. Gehani, </author> <title> ``Ode (Object Database and Environment): The Language and the Data Model'', </title> <booktitle> Proc. ACM-SIGMOD 1989 Int'l Conf. Management of Data, </booktitle> <address> Portland, Oregon, </address> <month> May-June </month> <year> 1989, </year> <pages> 36-45. </pages>
Reference: [3] <author> A. V. Aho and J. D. Ullman, </author> <title> ``Universality of Data Retrieval Languages'', </title> <booktitle> Proc. 6th ACM Symp. Principles of Programming Languages, </booktitle> <address> San-Antonio, Texas, </address> <month> Jan. </month> <year> 1979, </year> <pages> 110-120. </pages>
Reference-contexts: Multiple loop variables in for loops are also allowed in Rigel [28]. 4.3 Recursive Queries When iterating over a set or a cluster, we allow iteration to also be performed over the elements that are added during the iteration, which allows the expression of recursive queries <ref> [3] </ref>.
Reference: [4] <author> A. Albano, L. Cardelli and R. Orsini, </author> <title> ``Galileo: A Strongly Typed Interactive Conceptual Language'', </title> <journal> ACM Trans. Database Syst. </journal> <volume> 10, </volume> <month> 2 (June </month> <year> 1985), </year> <pages> 230-260. </pages>
Reference-contexts: It is for these reasons that we decided to add new iteration facilities to O++. 5. RELATED WORK Many research efforts have attempted to add the notion of persistence and database-oriented constructs in programming languages (see, for example, <ref> [4, 5, 8, 13, 16, 22-26, 28, 30, 31, 34, 37] </ref>). Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in [6, 10, 11, 26, 33, 38].
Reference: [5] <author> T. Andrews and C. Harris, </author> <title> ``Combining Language and Database Advances in an Object-Oriented development Environment'', </title> <booktitle> Proc. OOPSLA '87, </booktitle> <address> Orlando, Florida, </address> <month> Oct. </month> <year> 1987, </year> <pages> 430-440. </pages>
Reference-contexts: It is for these reasons that we decided to add new iteration facilities to O++. 5. RELATED WORK Many research efforts have attempted to add the notion of persistence and database-oriented constructs in programming languages (see, for example, <ref> [4, 5, 8, 13, 16, 22-26, 28, 30, 31, 34, 37] </ref>). Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in [6, 10, 11, 26, 33, 38]. <p> The pinning and unpinning operations are provided by the class recoverable. A syntactic extension, the ``pinning'' block is provided to support the accessing of persistent objects. From what we know, Avalon/C++ does not provide query facilities nor does it support the notion of organizing objects into clusters/subclusters. Vbase <ref> [5] </ref> combines an object model with C. It presents to the user two languages: the type definition language TDL for specifying classes and operations, and the C superset COP for writing methods to implement the operations.
Reference: [6] <author> M. P. Atkinson and O. P. Buneman, </author> <title> ``Types and Persistence in Database Programming Languages'', </title> <journal> ACM Computing Surveys 19, </journal> <month> 2 (June </month> <year> 1987), </year> <pages> 105-190. </pages>
Reference-contexts: We shall also refer to this object identity as a pointer to a persistent object. 3.1 Design Goals When incorporating persistence in O++, we kept the following design goals in perspective. Persistence should be orthogonal to type <ref> [6] </ref>. Persistence should be a property of object instances and not types. It should be possible to allocate objects of any type in either volatile or persistent store. There should be no run-time penalty for code that does not deal with persistent objects. <p> This lack of capability to express arbitrary ``join'' queries has been cited as another major deficiency of the current object-oriented database systems [21]. A design goal of O++ was to correct this deficiency. In <ref> [6] </ref>, Atkinson and Buneman proposed four database programming tasks as benchmarks to study the expressiveness of various database programming languages. One of the tasks, the computation of the bill of materials which involves recursive traversal, was found particularly awkward to express in many of the database programming languages discussed. <p> RELATED WORK Many research efforts have attempted to add the notion of persistence and database-oriented constructs in programming languages (see, for example, [4, 5, 8, 13, 16, 22-26, 28, 30, 31, 34, 37]). Some of these database programming languages have been surveyed and compared in <ref> [6] </ref>. Issues in integrating databases and programming languages have been discussed in [6, 10, 11, 26, 33, 38]. In the remainder of this section, we limit our discussion to some other ongoing work on combining C and C++ with databases. <p> Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in <ref> [6, 10, 11, 26, 33, 38] </ref>. In the remainder of this section, we limit our discussion to some other ongoing work on combining C and C++ with databases. Closely related to our work is the language E [26, 27], which also started with C++ and added persistence to it. <p> At the same time, we tried to maintain the spirit of C++ (and C) by adding only those facilities that we considered essential for making O++ a database programming language. In the appendix, we give the O++ versions of the benchmark tasks used in <ref> [6] </ref> to compare database programming languages. We feel that O++ provides a clean fusion of database concepts in an object-oriented programming language. 7. ACKNOWLEDGMENTS Our design of persistence has been influenced by the discussions we had with Steve Buroff, Mike Carey, Keith Kelleman, Dennis Shasha, and Bill Weber. <p> ACKNOWLEDGMENTS Our design of persistence has been influenced by the discussions we had with Steve Buroff, Mike Carey, Keith Kelleman, Dennis Shasha, and Bill Weber. We appreciate the suggestions of Chandra Kintala. 8. APPENDIX In <ref> [6] </ref>, Atkinson and Buneman proposed four database programming tasks as benchmarks to study the expressiveness of various database programming languages. In this Appendix, we code these tasks in O++. The reader is encouraged to compare these programs with the solutions given in [6] for the same tasks but written in other <p> APPENDIX In <ref> [6] </ref>, Atkinson and Buneman proposed four database programming tasks as benchmarks to study the expressiveness of various database programming languages. In this Appendix, we code these tasks in O++. The reader is encouraged to compare these programs with the solutions given in [6] for the same tasks but written in other database programming languages. We (of course!) feel that the O++ solutions to these tasks are quite elegant and natural. Atkinson and Buneman considered a manufacturing company's parts database.
Reference: [7] <author> F. Bancilhon and R. Ramakrishnan, </author> <title> ``An Amateur's Introduction to Recursive Query Processing Strategies'', </title> <booktitle> Proc. ACM-SIGMOD 1986 Int'l Conf. on Management of Data, </booktitle> <address> Washington D.C., </address> <month> May </month> <year> 1986, </year> <pages> 16-52. </pages>
Reference-contexts: Considerable research has been devoted recently to developing notations for expressing recursive queries in a relational framework and designing algorithms for evaluating them (see, for example, <ref> [1, 7] </ref>). Providing capability to express recursive queries in a form that can be used to recognize and optimize recursive queries was another design goal of O++. The distinguished clusters mirror the hierarchy relationship of the corresponding types.
Reference: [8] <author> F. Bancilhon, T. Briggs, S. Khoshafian and P. Valduriez, </author> <title> ``FAD, a Powerful and Simple Database Language'', </title> <booktitle> Proc. 13th Int'l Conf. Very Large Data Bases, </booktitle> <address> Brighton, England, </address> <month> Sept. </month> <year> 1987, </year> <pages> 97-105. </pages>
Reference-contexts: It is for these reasons that we decided to add new iteration facilities to O++. 5. RELATED WORK Many research efforts have attempted to add the notion of persistence and database-oriented constructs in programming languages (see, for example, <ref> [4, 5, 8, 13, 16, 22-26, 28, 30, 31, 34, 37] </ref>). Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in [6, 10, 11, 26, 33, 38].
Reference: [9] <author> J. Banerjee, H. T. Chou, J. F. Garza, W. Kim, D. Woelk and N. Ballou, </author> <title> ``Data Model Issues for Object-Oriented Applications'', </title> <journal> ACM Trans. Office Information Systems 5, </journal> <month> 1 (Jan. </month> <year> 1987), </year> <pages> 3-26. </pages>
Reference-contexts: It is sometimes necessary to collectively access objects in a cluster and those in related ``derived'' clusters. POSTQUEL [29] allows a * to be specified after the relation name to retrieve tuples from the named relation and all relations that inherit attributes from it. Orion <ref> [9] </ref> also provides similar functionality. Providing capability for such accesses was another design goal. 4.2 Set-Oriented Constructs Recall that the persistent objects of a type implicitly belong to the corresponding distinguished cluster which has the same name as the type.
Reference: [10] <author> T. Bloom and S. B. Zdonik, </author> <booktitle> ``Issues in the Design of Object-Oriented Database Programming Languages'', Proc. OOPSLA, </booktitle> <address> Orlando, Florida, </address> <month> Oct. </month> <year> 1987, </year> <pages> 441-451. </pages>
Reference-contexts: Additional information (such as indexing) may be provided to the object manager to assist in implementing efficient accesses to objects in the cluster. A cluster, together with all the objects in it, can be destroyed by invoking the destroy macro. Bloom and Zdonik <ref> [10] </ref> discuss issues in using type extents to partition the database. Although this scheme frees the programmer from explicitly specifying the cluster in which a persistent object should reside, it suffers from the following disadvantages: i. <p> Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in <ref> [6, 10, 11, 26, 33, 38] </ref>. In the remainder of this section, we limit our discussion to some other ongoing work on combining C and C++ with databases. Closely related to our work is the language E [26, 27], which also started with C++ and added persistence to it.
Reference: [11] <author> P. Buneman, </author> <title> ``Can We Reconcile Programming Languages and Databases?'', in Databases - Role and Structure: An Advanced Course, </title> <publisher> Cambridge Univ. Press, </publisher> <address> Cambridge, England, </address> <year> 1984, </year> <pages> 225-243. </pages>
Reference-contexts: Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in <ref> [6, 10, 11, 26, 33, 38] </ref>. In the remainder of this section, we limit our discussion to some other ongoing work on combining C and C++ with databases. Closely related to our work is the language E [26, 27], which also started with C++ and added persistence to it.
Reference: [12] <author> P. Buneman and M. Atkinson, </author> <title> ``Inheritance and Persistence in Database Programming Languages'', </title> <booktitle> Proc. ACM-SIGMOD 1986 Int'l Conf. on Management of Data, </booktitle> <address> Washington D.C., </address> <month> May </month> <year> 1986, </year> <pages> 4-15. </pages>
Reference-contexts: Initially, we decided that there would be a one-to-one correspondence between cluster names and the corresponding type names. Whenever a persistent object of a type was created, it was automatically put in the corresponding cluster. Thus, our clusters were type extents <ref> [12] </ref>. This strategy preserved the inheritance relationship between the different objects in the persistent store, and worked nicely with our iteration facilities (discussed in the next section) allowing us to iterate over a cluster, or over a cluster and clusters ``derived'' from it 3 .
Reference: [13] <author> L. Cardelli, </author> <title> ``Amber'', </title> <publisher> LNCS 242, </publisher> <year> 1986. </year>
Reference-contexts: It is for these reasons that we decided to add new iteration facilities to O++. 5. RELATED WORK Many research efforts have attempted to add the notion of persistence and database-oriented constructs in programming languages (see, for example, <ref> [4, 5, 8, 13, 16, 22-26, 28, 30, 31, 34, 37] </ref>). Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in [6, 10, 11, 26, 33, 38].
Reference: [14] <author> D. D. Chamberlin, M. M. Astrahan, K. P. Eswaran, P. P. Griffiths, R. A. Lorie, J. W. Mehl, P. Reisner and B. W. Wade, </author> <title> ``SEQUEL 2: A Unified Approach To Data Definition, Manipulation, and Control'', </title> <address> RJ 1978, </address> <institution> IBM, </institution> <month> June </month> <year> 1976. </year>
Reference-contexts: In O++, angle brackets &lt;&gt; denote a set. The suchthat and by clauses were inspired by similar clauses in SQL <ref> [14] </ref> and Concurrent C [18]. Similar for loops have been provided, among others, in Pascal/R [31], Rigel [28], Plain [37] and Trellis/Owl [23].
Reference: [15] <author> W. P. Cockshot, M. P. Atkinson, K. J. Chisholm, P. J. Bailey and R. Morrison, </author> <title> ``Persistent Object Management System'', </title> <journal> Software Practice and Experience 14, </journal> <volume> 1 (1984), </volume> <pages> 49-71. </pages>
Reference-contexts: Some of these problems were pointed out by S. Buroff. As a brief aside, let us remark that a technique called ``pointer swizzling'' has been used in some systems (for example, PS-Algol <ref> [15] </ref>) to optimize accesses to persistent objects. 2 The first reference to a persistent object results in its being cached in volatile memory and the original pointer is replaced by the pointer to the cache location.
Reference: [16] <author> G. Copeland and D. Maier, </author> <title> ``Making Smalltalk a Database System'', </title> <booktitle> Proceedings of the 1984 ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <address> Boston, Massachusetts, </address> <month> June </month> <year> 1984, </year> <pages> 316-325. </pages>
Reference-contexts: It is for these reasons that we decided to add new iteration facilities to O++. 5. RELATED WORK Many research efforts have attempted to add the notion of persistence and database-oriented constructs in programming languages (see, for example, <ref> [4, 5, 8, 13, 16, 22-26, 28, 30, 31, 34, 37] </ref>). Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in [6, 10, 11, 26, 33, 38].
Reference: [17] <author> D. D. Detlefs, M. P. Herlihy and J. M. Wing, </author> <title> ``Inheritance of Synchronization and Recovery Properties in Avalon/C++'', </title> <booktitle> IEEE Computer 21, </booktitle> <month> 12 (Dec. </month> <year> 1988), </year> <pages> 57-69. </pages>
Reference-contexts: E is intended to be a database implementation language rather than a database system. It therefore does not provide constructs for set-oriented query processing. E has been implemented, and an interesting discussion of the implementation issues appear in [26]. Avalon/C++ <ref> [17] </ref>, a programming language designed for writing reliable distributed systems, also provides facilities for persistence. Types whose objects are to be allocated in persistent store must be derived from the class recoverable.
Reference: [18] <author> N. H. Gehani and W. D. Roome, </author> <title> ``Concurrent C'', </title> <journal> SoftwarePractice & Experience 16, </journal> <volume> 9 (1986), </volume> <pages> 821-844. </pages>
Reference-contexts: In O++, angle brackets &lt;&gt; denote a set. The suchthat and by clauses were inspired by similar clauses in SQL [14] and Concurrent C <ref> [18] </ref>. Similar for loops have been provided, among others, in Pascal/R [31], Rigel [28], Plain [37] and Trellis/Owl [23].
Reference: [19] <author> S. N. Khoshafian and G. P. Copeland, </author> <title> ``Object Identity'', </title> <booktitle> Proc. OOPSLA '86, </booktitle> <address> Portland, Oregon, </address> <month> Sept. </month> <year> 1986, </year> <pages> 406-416. </pages>
Reference-contexts: Persistent objects are allocated in persistent store and they continue to exist after the program creating them has terminated. A database is a collection of persistent objects, each identified by a unique identifier, called the object identity <ref> [19] </ref>. We shall also refer to this object identity as a pointer to a persistent object. 3.1 Design Goals When incorporating persistence in O++, we kept the following design goals in perspective. Persistence should be orthogonal to type [6]. Persistence should be a property of object instances and not types.
Reference: [20] <author> C. Lecluse, P. Richard and F. Velez, </author> <title> ``O 2 , an Object-Oriented Data Model'', </title> <booktitle> Proc. ACM-SIGMOD 1988 Int'l Conf. on Management of Data, </booktitle> <address> Chicago, Illinois, </address> <month> June </month> <year> 1988, </year> <pages> 424-433. </pages>
Reference-contexts: A new product Vbase+, more closely tied to C++, is being currently designed that proposes to implement persistence through library routines. The O2 system <ref> [20] </ref> also integrates an object model with C. Type definitions are written in one language and methods are written in the C superset CO2. A class in O2 implicitly owns a persistent collection of objects of the class, which is similar to our notion of a cluster. 6.
Reference: [21] <author> E. Neuhold and M. Stonebraker, </author> <title> ``Future Directions in DBMS Research'', </title> <type> Tech. </type> <institution> Rep.-88-001, Int'l Computer Science Inst., Berkeley, California, </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: Indeed, the major criticism of the current object-oriented database systems is that the query processing in these systems ``smells'' of pointer chasing and that they may take us back to the days of CODASYL database systems in which data is accessed by ``using pointers to navigate through the database'' <ref> [21] </ref>. One of the design goals of O++ was to provide set-processing constructs similar to those found in relational query languages. Object-oriented languages are ``reference'' oriented, in that the relationship between two objects is established by embedding the identity of one object in another. <p> Relational systems are ``value'' oriented and relationships between objects (tuples) are established by comparing the values of some or all attributes of the objects involved. This lack of capability to express arbitrary ``join'' queries has been cited as another major deficiency of the current object-oriented database systems <ref> [21] </ref>. A design goal of O++ was to correct this deficiency. In [6], Atkinson and Buneman proposed four database programming tasks as benchmarks to study the expressiveness of various database programming languages.
Reference: [22] <author> B. Nixon, L. Chung, D. Lauzon, A. Borgida, J. Mylopoulis and M. Stanley, </author> <title> ``Implementation of a Compiler for a Semantic Data Model'', </title> <booktitle> Proc. ACM-SIGMOD 1987 Int'l Conf. on Management of Data, </booktitle> <address> San Fransisco, California, </address> <month> May </month> <year> 1987, </year> <pages> 118-131. </pages>
Reference: [23] <author> P. O'Brien, P. Bullis and C. Schaffert, </author> <title> ``Persistent and Shared Objects in Trellis/Owl'', </title> <booktitle> Proc. Int'l Workshop Object-Oriented Database Systems, Asilomar, </booktitle> <address> California, </address> <month> Sept. </month> <year> 1986, </year> <pages> 113-123. </pages>
Reference-contexts: In O++, angle brackets &lt;&gt; denote a set. The suchthat and by clauses were inspired by similar clauses in SQL [14] and Concurrent C [18]. Similar for loops have been provided, among others, in Pascal/R [31], Rigel [28], Plain [37] and Trellis/Owl <ref> [23] </ref>. Multiple loop variables in for loops are also allowed in Rigel [28]. 4.3 Recursive Queries When iterating over a set or a cluster, we allow iteration to also be performed over the elements that are added during the iteration, which allows the expression of recursive queries [3].
Reference: [24] <author> Persistent Programming Research Group, </author> <title> ``The PS-Algol Reference Manual, 2d ed.'', </title> <type> Tech. Rep. </type> <institution> PPR-12-85, Computing Science Dept., Univ. </institution> <address> Glasgow, Glasgow, Scotland, </address> <year> 1985. </year>
Reference: [25] <author> J. E. Richardson and M. J. Carey, </author> <title> ``Programming Constructs for Database System Implementation in EXODUS'', </title> <booktitle> Proc. ACM-SIGMOD 1987 Int'l Conf. on Management of Data, </booktitle> <address> San Fransisco, California, </address> <month> May </month> <year> 1987, </year> <pages> 208-219. </pages>
Reference: [26] <author> J. E. Richardson and M. J. Carey, </author> <title> ``Persistence in the E Language: Issues and Implementation'', </title> <note> SoftwarePractice & Experience 19, 12 (Dec. </note> <year> 1989), </year> <pages> 1115-1150. </pages>
Reference-contexts: All employees could then be referenced using the cluster employee, while employees belonging only to company A or company B could be referenced by using clusters A-employee or B-employee, respectively. Different indices could also be created for the two clusters. __________________ 2. See <ref> [26] </ref> for a lucid discussion of pointer swizzling, problems with it, and an alternative approach to optimizing accesses to persis tent objects. 3. To be precise, clusters are not derived; they simply mirror the inheritance (derivation) relationship between the corresponding classes. 4. <p> Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in <ref> [6, 10, 11, 26, 33, 38] </ref>. In the remainder of this section, we limit our discussion to some other ongoing work on combining C and C++ with databases. Closely related to our work is the language E [26, 27], which also started with C++ and added persistence to it. <p> Issues in integrating databases and programming languages have been discussed in [6, 10, 11, 26, 33, 38]. In the remainder of this section, we limit our discussion to some other ongoing work on combining C and C++ with databases. Closely related to our work is the language E <ref> [26, 27] </ref>, which also started with C++ and added persistence to it. However, persistent objects in E must be of special types called ``db'' types. Objects of such types can be volatile or persistent. <p> Objects of such types can be volatile or persistent. Persistence orthogonality in E can thus be realized by programming exclusively in ``db'' types, but all references to volatile objects in that case would incur run time check to see if they need to be read into memory <ref> [26] </ref>. Otherwise, one has to have two class definitions, one ``db'' type and one ``non-db'' type, if objects of the same type are to be allocated both in volatile memory and in persistent store. <p> E is intended to be a database implementation language rather than a database system. It therefore does not provide constructs for set-oriented query processing. E has been implemented, and an interesting discussion of the implementation issues appear in <ref> [26] </ref>. Avalon/C++ [17], a programming language designed for writing reliable distributed systems, also provides facilities for persistence. Types whose objects are to be allocated in persistent store must be derived from the class recoverable.
Reference: [27] <author> J. E. Richardson, M. J. Carey and D. H. Schuh, </author> <title> ``The Design of the E Programming Language'', </title> <institution> Computer Sciences Tech. </institution> <type> Rep. #824, </type> <institution> Univ. Wisconsin, Madison, </institution> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: Issues in integrating databases and programming languages have been discussed in [6, 10, 11, 26, 33, 38]. In the remainder of this section, we limit our discussion to some other ongoing work on combining C and C++ with databases. Closely related to our work is the language E <ref> [26, 27] </ref>, which also started with C++ and added persistence to it. However, persistent objects in E must be of special types called ``db'' types. Objects of such types can be volatile or persistent.
Reference: [28] <author> L. Rowe and K. Shoens, </author> <title> ``Data Abstraction, Views and Updates in RIGEL'', </title> <booktitle> Proc. ACM-SIGMOD 1979 Int'l Conf. on Management of Data, </booktitle> <address> Boston, Massachusetts, </address> <month> May-June </month> <year> 1979, </year> <pages> 77-81. </pages>
Reference-contexts: In O++, angle brackets &lt;&gt; denote a set. The suchthat and by clauses were inspired by similar clauses in SQL [14] and Concurrent C [18]. Similar for loops have been provided, among others, in Pascal/R [31], Rigel <ref> [28] </ref>, Plain [37] and Trellis/Owl [23]. Multiple loop variables in for loops are also allowed in Rigel [28]. 4.3 Recursive Queries When iterating over a set or a cluster, we allow iteration to also be performed over the elements that are added during the iteration, which allows the expression of recursive <p> The suchthat and by clauses were inspired by similar clauses in SQL [14] and Concurrent C [18]. Similar for loops have been provided, among others, in Pascal/R [31], Rigel <ref> [28] </ref>, Plain [37] and Trellis/Owl [23]. Multiple loop variables in for loops are also allowed in Rigel [28]. 4.3 Recursive Queries When iterating over a set or a cluster, we allow iteration to also be performed over the elements that are added during the iteration, which allows the expression of recursive queries [3]. <p> It is for these reasons that we decided to add new iteration facilities to O++. 5. RELATED WORK Many research efforts have attempted to add the notion of persistence and database-oriented constructs in programming languages (see, for example, <ref> [4, 5, 8, 13, 16, 22-26, 28, 30, 31, 34, 37] </ref>). Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in [6, 10, 11, 26, 33, 38].
Reference: [29] <author> L. A. Rowe and M. R. Stonebraker, </author> <title> ``The POSTGRES Data Model'', </title> <booktitle> Proc. 13th Int'l Conf. Very Large Data Bases, </booktitle> <address> Brighton, England, </address> <month> Sept. </month> <year> 1987, </year> <pages> 83-96. </pages>
Reference-contexts: The distinguished clusters mirror the hierarchy relationship of the corresponding types. If type x is derived from type y, then the corresponding clusters also have the same relationship. It is sometimes necessary to collectively access objects in a cluster and those in related ``derived'' clusters. POSTQUEL <ref> [29] </ref> allows a * to be specified after the relation name to retrieve tuples from the named relation and all relations that inherit attributes from it. Orion [9] also provides similar functionality.
Reference: [30] <author> G. Schlageter, R. Unland, W. Wilkes, R. Zieschang, G. Maul, M. Nagl and R. Meyer, </author> <title> ``OOPS - An Object Oriented Programming System with Integrated Data Management Facility'', </title> <booktitle> Proc. IEEE 4th Int'l Conf. Data Engineering, </booktitle> <address> Los Angeles, California, </address> <month> Feb. </month> <year> 1988, </year> <pages> 118-125. </pages>
Reference-contexts: It is for these reasons that we decided to add new iteration facilities to O++. 5. RELATED WORK Many research efforts have attempted to add the notion of persistence and database-oriented constructs in programming languages (see, for example, <ref> [4, 5, 8, 13, 16, 22-26, 28, 30, 31, 34, 37] </ref>). Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in [6, 10, 11, 26, 33, 38].
Reference: [31] <author> J. W. Schmidt, </author> <title> ``Some High Level Language Constructs for Data of Type Relation'', </title> <journal> ACM Trans. Database Syst. </journal> <volume> 2, </volume> <month> 3 (Sept. </month> <year> 1977), </year> <pages> 247-261. </pages>
Reference-contexts: In O++, angle brackets &lt;&gt; denote a set. The suchthat and by clauses were inspired by similar clauses in SQL [14] and Concurrent C [18]. Similar for loops have been provided, among others, in Pascal/R <ref> [31] </ref>, Rigel [28], Plain [37] and Trellis/Owl [23]. <p> It is for these reasons that we decided to add new iteration facilities to O++. 5. RELATED WORK Many research efforts have attempted to add the notion of persistence and database-oriented constructs in programming languages (see, for example, <ref> [4, 5, 8, 13, 16, 22-26, 28, 30, 31, 34, 37] </ref>). Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in [6, 10, 11, 26, 33, 38].
Reference: [32] <author> P. G. Selinger, M. M. Astrahan, D. D. Chamberlin, R. A. Lorie and T. G. Price, </author> <title> ``Access Path Selection in a Relational Database Management System'', </title> <booktitle> Proc. ACM-SIGMOD 1979 Int'l Conf. on Management of Data, </booktitle> <month> May </month> <year> 1979, </year> <pages> 23-34. </pages>
Reference-contexts: QUERY PROCESSING CONSTRUCTS 4.1 Design Goals An important contribution of the relational query languages was the introduction of the set processing constructs. This capability allows users to express queries in a declarative form without concern for physical organization of data. A query optimizer (see, for example, <ref> [32] </ref>) is made responsible for translating queries into a form appropriate for execution that takes into account the available access structures. Object-oriented languages, on the other hand, typically do not provide set-oriented processing capabilities.
Reference: [33] <author> M. Shaw and W. A. Wulf, </author> <title> ``Toward Relaxing Assumptions in Languages and their Implementations'', </title> <journal> SIGPLAN Notices Notices 15, </journal> <month> 3 (March </month> <year> 1980), </year> <pages> 45-61. </pages>
Reference-contexts: Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in <ref> [6, 10, 11, 26, 33, 38] </ref>. In the remainder of this section, we limit our discussion to some other ongoing work on combining C and C++ with databases. Closely related to our work is the language E [26, 27], which also started with C++ and added persistence to it.
Reference: [34] <author> J. M. Smith, S. Fox and T. Landers, ADAPLEX: </author> <title> Rationale and Reference Manual, 2nd ed., </title> <institution> Computer Corp. America, </institution> <address> Cambridge, Mass., </address> <year> 1983. </year>
Reference-contexts: It is for these reasons that we decided to add new iteration facilities to O++. 5. RELATED WORK Many research efforts have attempted to add the notion of persistence and database-oriented constructs in programming languages (see, for example, <ref> [4, 5, 8, 13, 16, 22-26, 28, 30, 31, 34, 37] </ref>). Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in [6, 10, 11, 26, 33, 38].
Reference: [35] <author> B. Stroustrup, </author> <title> ``Multiple Inheritance for C++'', </title> <booktitle> Proc. European UNIX User's Group, </booktitle> <address> Helsinki, </address> <month> May </month> <year> 1987, </year> <pages> 189-208. </pages>
Reference-contexts: The public part consists of one variable name, and the functions item, weight_lbs and weight_kg. C++ supports inheritance, including multiple inheritance <ref> [35] </ref>, which is used for object specialization. The specialized object types inherit the properties of the base object type, i.e., the data and functions, of the ``base'' object type.
Reference: [36] <author> B. Stroustrup, </author> <title> The C++ Programming Language (2nd Ed.), </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: We have only given the details of class definitions that are necessary for the discussion in this paper. Please see <ref> [36] </ref> for further details. 3. PERSISTENCE We visualize memory as consisting of two parts: volatile and persistent. Volatile objects are allocated in volatile memory and are the same as those created in ordinary programs.
Reference: [37] <author> A. Wasserman, </author> <title> ``The Data Management Facilities of PLAIN'', </title> <booktitle> Proc. ACM-SIGMOD 1979 Int'l Conf. on Management of Data, </booktitle> <address> Boston, Massachusetts, </address> <month> May-June </month> <year> 1979. </year>
Reference-contexts: In O++, angle brackets &lt;&gt; denote a set. The suchthat and by clauses were inspired by similar clauses in SQL [14] and Concurrent C [18]. Similar for loops have been provided, among others, in Pascal/R [31], Rigel [28], Plain <ref> [37] </ref> and Trellis/Owl [23]. <p> It is for these reasons that we decided to add new iteration facilities to O++. 5. RELATED WORK Many research efforts have attempted to add the notion of persistence and database-oriented constructs in programming languages (see, for example, <ref> [4, 5, 8, 13, 16, 22-26, 28, 30, 31, 34, 37] </ref>). Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in [6, 10, 11, 26, 33, 38].
Reference: [38] <author> S. N. Zilles, </author> <title> ``Types, Algebras and Modeling'', </title> <journal> SIGPLAN Notices Notices 16, </journal> <month> 1 (Jan. </month> <year> 1981), </year> <pages> 207-209. </pages>
Reference-contexts: Some of these database programming languages have been surveyed and compared in [6]. Issues in integrating databases and programming languages have been discussed in <ref> [6, 10, 11, 26, 33, 38] </ref>. In the remainder of this section, we limit our discussion to some other ongoing work on combining C and C++ with databases. Closely related to our work is the language E [26, 27], which also started with C++ and added persistence to it.
References-found: 38

