URL: http://www.cs.purdue.edu/homes/fudos/distribution/Erep/Erep3.ps
Refering-URL: http://www.cs.purdue.edu/people/fudos/
Root-URL: http://www.cs.purdue.edu
Title: A Geometric Constraint Solver  
Author: William Bouma Ioannis Fudos Christoph Hoffmann Jiazhen Cai Robert Paige 
Address: West Lafayette, IN 47907-1398  251 Mercer Str., New York, NY 10012  
Affiliation: Department of Computer Science, Purdue University  Department of Computer Science, Courant Institute  
Pubnum: Report CSD-TR-93-054  
Abstract: We report on the development of a two-dimensional geometric constraint solver. The solver is a major component of a new generation of CAD systems that we are developing based on a high-level geometry representation. The solver uses a graph-reduction directed algebraic approach, and achieves interactive speed. We describe the architecture of the solver and its basic capabilities. Then, we discuss in detail how to extend the scope of the solver, with special emphasis placed on the theoretical and human factors involved in finding a solution | in an exponentially large search space | so that the solution is appropriate to the application and the way of finding it is intuitive to an untrained user.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Aldefeld. </author> <title> Variation of geometries based on a geometric-reasoning method. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 20(3) </volume> <pages> 117-126, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: Bruderlin and Sohrt [3, 28] solve constraints in this way and incorporate the Knuth-Bendix critical-pairs algorithm [16]. They show that their method is correct and solves all problems that can be constructed using ruler and compass. Other rule-constructive solvers include Aldefeld <ref> [1] </ref> and Sunde [30]. In [35] and in [33] the problem of nonunique solutions is considered.
Reference: [2] <author> P. Borras, D. Clement, T. Despeyroux, J. Incerpi, G. Kahn, B. Lang, and V. Pascual. </author> <title> Centaur: the system. </title> <type> Technical Report Rapports de Recherche 777, </type> <institution> INRIA, </institution> <year> 1987. </year>
Reference-contexts: The special syntactic, semantic, and transformational capabilities of APTS are also well suited to a flexible, experimental development of a logical framework with an evolving Erep language and corresponding solver. Like systems such as Centaur <ref> [2] </ref> the Synthesizer Generator [25], and Refine [24], APTS has a single uniform formalism for lexical analysis, syntactic analysis, and pretty-printing. However, the semantic formalism in APTS has several advantages over the more conventional attribute grammar approach [15] that is used in the Synthesizer Generator.
Reference: [3] <author> B. Bruderlin. </author> <title> Constructing Three-Dimensional Geometric Objects Defined by Constraints. </title> <booktitle> In Workshop on Interactive 3D Graphics, </booktitle> <pages> pages 111-129. </pages> <publisher> ACM, </publisher> <month> October 23-24 </month> <year> 1986. </year>
Reference-contexts: This is more natural for the user and makes the approach suitable for interactively debugging a sketch. 2.2.1 Rule-Constructive Solvers Rule-constructive solers use rewrite rules to discover and execute the construction steps. Bruderlin and Sohrt <ref> [3, 28] </ref> solve constraints in this way and incorporate the Knuth-Bendix critical-pairs algorithm [16]. They show that their method is correct and solves all problems that can be constructed using ruler and compass. Other rule-constructive solvers include Aldefeld [1] and Sunde [30].
Reference: [4] <author> B. </author> <title> Buchberger. Grobner Bases: An Algorithmic Method in Polynomial Ideal Theory. </title> <editor> In N. K. Bose, editor, </editor> <booktitle> Multidimensional Systems Theory, </booktitle> <pages> pages 184-232. </pages> <address> D. </address> <publisher> Reidel Publishing Co., </publisher> <year> 1985. </year>
Reference-contexts: in canonical order, we either prescribe a canonical sequence a-priori in which the geometric elements have to be computed, or else we compute a canonical basis for the ideal generated by the constraint equations that describe the geometric problem, and then enumerate the associated variety in a canonical way; e.g., <ref> [4] </ref>. In the first case, we would prescribe the solver algorithm to belong to a certain family. In the second case, the ideal basis computation is equivalent to solving the constraint problem and thus constitutes committing to a canonical solver. 2 Both ways compromise devising a neutral format of archiving.
Reference: [5] <author> B. Buchberger, G. Collins, and B. Kutzler. </author> <title> Algebraic methods for geometric reasoning. </title> <booktitle> Annual Reviews in Computer Science, </booktitle> <volume> 3 </volume> <pages> 85-120, </pages> <year> 1988. </year>
Reference-contexts: This report and others are available via anonymous ftp to arthur.cs.purdue.edu, in directory pub/cmh and subsidiaries. context of automatically deriving and proving theorems from analytic geome-try, and applying these techniques to vision problems; <ref> [5, 8, 14] </ref>. The geometric modeling community has considered the problem for the purpose of developing sketching systems in which a rough sketch, annotated with dimension and constraints, is instantiated to satisfy all constraints. This work will be reviewed in the next section. <p> For a detailed review see [20, 28]. 2.4 Symbolic Constraint Solvers The constraints are translated into a system of algebraic equations. The system is solved with symbolic algebraic methods, such as Grobner's bases, e.g., <ref> [5, 11] </ref>, or the Wu-Ritt method, e.g., [34, 8]. Both methods can solve general nonlinear systems of algebraic equations, but may require exponential running times. <p> Both methods can solve general nonlinear systems of algebraic equations, but may require exponential running times. In [17, 18], Kondo considers the addition and deletion of constraints using the Buchberger's Algorithm <ref> [5] </ref> to derive a polynomial that gives the relationship between the deleted and added constraints. 3 The Constraint Solving System 3.1 Information Flow and Rationale The overall architecture of the constraint solver is shown in Figure 1. The user draws a sketch and annotates it with geometric constraints.
Reference: [6] <author> J. Cai. </author> <title> A language for semantic analysis. </title> <type> Technical Report 635, </type> <institution> New York University, Dept. of Comp. Science, </institution> <year> 1993. </year>
Reference-contexts: However, the semantic formalism in APTS has several advantages over the more conventional attribute grammar approach [15] that is used in the Synthesizer Generator. APTS uses a logic-based approach to semantics in which semantic rules that define relations are written in a Datalog-like language <ref> [6] </ref> but with the full expressive power of Prolog. These rules are written independently of the individual grammar productions and without reference to the parse tree structure. They define relations over a rich assortment of primitive and constructed domains, and have the brevity and convenience of unrestricted circular attribute grammars.
Reference: [7] <author> J. Cai and R. Paige. </author> <title> Towards increased productivity of algorithm implementation. </title> <booktitle> ACM SIGSOFT, </booktitle> <year> 1993. </year>
Reference-contexts: Aside from well-known special purpose tools such as LEX and Yacc, our constraint solver also makes use of the high level language SETL2 [27] to specify complex combinatorial algorithms and the transformational system APTS <ref> [7, 23] </ref> to perform syntactic analysis and symbolic manipulation of geometrical constraint specifications. 3. We study a number of neglected aspects of constraint solving. <p> The user-prepared sketch is changed into an Erep specification and is passed as text to the constraint solver. The solver is written using two novel software tools | the APTS transformational programming system <ref> [7, 23] </ref> and the high-level language SETL2 [27] | each having special features that the solver exploits. The front-end to the constraint solver engine is an APTS program that reads the Erep program and type checks it. For example, we check that only lines participate in angle constraints. <p> Using these tools has allowed us to implement our algorithms with surprising speed. In the future we also hope to make use of a promising new technology for mechanically transforming prototype SETL2 programs into high performance C code <ref> [7] </ref>. The special syntactic, semantic, and transformational capabilities of APTS are also well suited to a flexible, experimental development of a logical framework with an evolving Erep language and corresponding solver.
Reference: [8] <author> C.-S. Chou. </author> <title> Mechanical Theorem Proving. </title> <address> D. </address> <publisher> Reidel Publishing, </publisher> <address> Dordrecht, </address> <year> 1987. </year>
Reference-contexts: This report and others are available via anonymous ftp to arthur.cs.purdue.edu, in directory pub/cmh and subsidiaries. context of automatically deriving and proving theorems from analytic geome-try, and applying these techniques to vision problems; <ref> [5, 8, 14] </ref>. The geometric modeling community has considered the problem for the purpose of developing sketching systems in which a rough sketch, annotated with dimension and constraints, is instantiated to satisfy all constraints. This work will be reviewed in the next section. <p> For a detailed review see [20, 28]. 2.4 Symbolic Constraint Solvers The constraints are translated into a system of algebraic equations. The system is solved with symbolic algebraic methods, such as Grobner's bases, e.g., [5, 11], or the Wu-Ritt method, e.g., <ref> [34, 8] </ref>. Both methods can solve general nonlinear systems of algebraic equations, but may require exponential running times.
Reference: [9] <author> I. Fudos. </author> <title> Editable representations for 2d geometric design. </title> <type> Master's thesis, </type> <institution> Purdue University, Dept. of Comp. Sci., </institution> <year> 1993. </year>
Reference-contexts: Before describing our approach to Task 1, we characterize other approaches in the literature. Many constraint solvers use a combination of these methods. To satisfy editorial requirements, our review is very brief. For a more detailed analysis of the extensive prior work on constraint solving see <ref> [9] </ref>. 2.1 Numerical Constraint Solvers In numerical constraint solvers, the constraints are translated into a system of equations and are solved using an iterative method. When based on Newton iteration, such solvers require good initial values, so that the initial sketch must almost satisfy all constraints already. <p> However, blue prints are usually overdimensioned, although not for reasons of eliminating unwanted solutions, but for limiting errors through redundancy. Again, it is unfortunate that even for the simple case of placing parallel lines the overconstrained problem is NP-complete <ref> [9] </ref>. Since adding constraints even in such simple situations results in NP-complete problems, it seems to us that the attractive idea of adding more constraints to narrow the range of possible solutions will not work very well in practice.
Reference: [10] <author> I. Fudos and C. M. Hoffmann. </author> <title> Correctness proof of a geometric constraint solver. </title> <type> Technical Report 93-076, </type> <institution> Purdue University, Computer Science, </institution> <year> 1993. </year>
Reference-contexts: They in clude (a) redirecting the solver to a different solution of a well-constrained sketch, (b) devising generic techniques for extending the capabilities of the solver while preserving interactive speed, and (c) a rigorous correctness proof of the solver. Note that the correctness proof is reported separately <ref> [10] </ref>. This paper reports substantial progress in all three problem dimensions, and identifies a number of open issues that remain. 2 2 Approaches to Geometric Constraint Solving We consider only well-constrained, two-dimensional sketches formed from points, lines, circles, segments and arcs. <p> We can prove that an underconstrained sketch can be partially solved in a unique way, using the given constraints; <ref> [10] </ref>. However, adding constraints deduced from the metric properties of the user-supplied rough sketch must rely on a heuristic selection. We explain in Section 5 why this is difficult. <p> While Owen's solver is top-down, determining first the interaction between clusters of geometric elements, our basic method is bottom-up. This allows us to prove correctness of the basic algorithm, both with respect to the constraint graph analysis and to the subsequent geometric construction; <ref> [10] </ref>. It also permits systematic extensions of the expressive power of the solver, and makes the algorithm easy to describe, implement, and understand. We begin in the basic algorithm by placing geometric elements until a cluster has been determined. The construction steps needed are described later.
Reference: [11] <author> C. M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, </address> <institution> Cal., </institution> <year> 1989. </year>
Reference-contexts: For a detailed review see [20, 28]. 2.4 Symbolic Constraint Solvers The constraints are translated into a system of algebraic equations. The system is solved with symbolic algebraic methods, such as Grobner's bases, e.g., <ref> [5, 11] </ref>, or the Wu-Ritt method, e.g., [34, 8]. Both methods can solve general nonlinear systems of algebraic equations, but may require exponential running times.
Reference: [12] <author> C. M. Hoffmann. </author> <title> On the semantics of generative geometry representations. </title> <booktitle> In Proc. 19th ASME Design Automation Conference, </booktitle> <pages> pages 411-420, </pages> <year> 1993. </year> <note> Vol. 2. 28 </note>
Reference-contexts: Such a representation can become the basis for archiving sketches in a neutral format, with the ability to retrieve the archived sketch and edit it; <ref> [13, 12] </ref>. Our solution is also a building block for a larger project of developing a new generation of CAD systems based on a neutral, high-level geometry representation that expresses design intent and preserves the ability to redesign. 2. <p> In case a different solution is wanted, the solver can be redirected to the intended solution interactively. Our system is a component of a constraint-driven variational CAD system based on a high-level, declarative, editable geometry representation (Erep) as discussed in <ref> [13, 12] </ref>. Such an overall architecture poses several challenges. One of them is efficient variational constraint solving, and we address this problem here. Another, key challenge is to formulate the language in a neutral way, committing it neither to the particulars of the user interface nor of the solver algorithms. <p> In constraint-based, feature-based design, it is common to have available a variational constraint solver for 2D constraint problems, but not for 3D geometric constraints. This is particularly apparent in the persistent id problem discussed in <ref> [12] </ref>. A well-conceived 3D constraint solver conceivably can avoid these problems and assist in devising graphical techniques for generic design. In manufacturing applications one is interested in functional relationships between dimension variables, because such relationships can express design intent very flexibly.
Reference: [13] <author> C. M. Hoffmann and R. Juan. Erep, </author> <title> a editable, high-level representation for geometric design and analysis. </title> <editor> In P. Wilson, M. Wozny, and M. Pratt, editors, </editor> <booktitle> Geometric and Product Modeling, </booktitle> <pages> pages 129-164. </pages> <publisher> North Holland, </publisher> <year> 1993. </year>
Reference-contexts: Such a representation can become the basis for archiving sketches in a neutral format, with the ability to retrieve the archived sketch and edit it; <ref> [13, 12] </ref>. Our solution is also a building block for a larger project of developing a new generation of CAD systems based on a neutral, high-level geometry representation that expresses design intent and preserves the ability to redesign. 2. <p> The user interface translates the specification into a textual language that records the problem faithfully. The user could edit this textual problem specification, but this is unnecessary, because the specification is edited and updated automatically by the user interface. The language has been designed to achieve the objectives of <ref> [13] </ref> | a neutral problem specification that makes no assumptions about the architecture of the underlying constraint solving algorithm. Thus, it is quite easy to federate any constraint solver capable of handling the geometric configurations we consider. <p> In case a different solution is wanted, the solver can be redirected to the intended solution interactively. Our system is a component of a constraint-driven variational CAD system based on a high-level, declarative, editable geometry representation (Erep) as discussed in <ref> [13, 12] </ref>. Such an overall architecture poses several challenges. One of them is efficient variational constraint solving, and we address this problem here. Another, key challenge is to formulate the language in a neutral way, committing it neither to the particulars of the user interface nor of the solver algorithms. <p> When editable design is archived, it requires a proprietary format native to the particular CAD system, and is typically a record of the internal data structures of the CAD system. In <ref> [13] </ref> we have presented alternatives. Current trends in data exchange standards indicate a growing interest in archiving constraint-based designs in which this additional information has been formalized without commitment to a particular CAD system.
Reference: [14] <author> D. Kapur. </author> <title> A refutational approach to geometry theorem proving. </title> <editor> In D. Kapur and J. Mundy, editors, </editor> <booktitle> Geometric Reasoning, </booktitle> <pages> pages 61-93. </pages> <publisher> M.I.T. Press, </publisher> <year> 1989. </year>
Reference-contexts: This report and others are available via anonymous ftp to arthur.cs.purdue.edu, in directory pub/cmh and subsidiaries. context of automatically deriving and proving theorems from analytic geome-try, and applying these techniques to vision problems; <ref> [5, 8, 14] </ref>. The geometric modeling community has considered the problem for the purpose of developing sketching systems in which a rough sketch, annotated with dimension and constraints, is instantiated to satisfy all constraints. This work will be reviewed in the next section.
Reference: [15] <author> D. Knuth. </author> <title> Semantics of context-free languages. </title> <journal> Mathematical Systems Theory, </journal> <volume> 2 </volume> <pages> 127-145, </pages> <year> 1968. </year>
Reference-contexts: Like systems such as Centaur [2] the Synthesizer Generator [25], and Refine [24], APTS has a single uniform formalism for lexical analysis, syntactic analysis, and pretty-printing. However, the semantic formalism in APTS has several advantages over the more conventional attribute grammar approach <ref> [15] </ref> that is used in the Synthesizer Generator. APTS uses a logic-based approach to semantics in which semantic rules that define relations are written in a Datalog-like language [6] but with the full expressive power of Prolog.
Reference: [16] <author> D. Knuth and P. Bendix. </author> <title> Simple word problems in universal algebras. </title> <editor> In J. Leech, editor, </editor> <booktitle> Computational Problems in Abstract Algebra, </booktitle> <pages> pages 263-297. </pages> <publisher> Pergammon Press, Oxford, </publisher> <year> 1970. </year>
Reference-contexts: This is more natural for the user and makes the approach suitable for interactively debugging a sketch. 2.2.1 Rule-Constructive Solvers Rule-constructive solers use rewrite rules to discover and execute the construction steps. Bruderlin and Sohrt [3, 28] solve constraints in this way and incorporate the Knuth-Bendix critical-pairs algorithm <ref> [16] </ref>. They show that their method is correct and solves all problems that can be constructed using ruler and compass. Other rule-constructive solvers include Aldefeld [1] and Sunde [30]. In [35] and in [33] the problem of nonunique solutions is considered. <p> DCM can solve the configuration sometimes, depending on the way the problem is posed. We suspect that a complete ruler-and-compass constructible solver for the larger class of geometric elements requires graph rewriting rules that are equivalent to the Knuth-Bendix algorithm <ref> [16] </ref>. We also discuss a general method for extending the solver to configurations that cannot be done with the basic algorithm. Our strategy places two clusters related by three constraints. The extension goes beyond ruler-and-compass constructions, and requires a root finder for univariate polynomials.
Reference: [17] <author> K. Kondo. PIGMOD: </author> <title> parametric and interactive geometric modeller for mechanical design. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 22(10) </volume> <pages> 633-644, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: The system is solved with symbolic algebraic methods, such as Grobner's bases, e.g., [5, 11], or the Wu-Ritt method, e.g., [34, 8]. Both methods can solve general nonlinear systems of algebraic equations, but may require exponential running times. In <ref> [17, 18] </ref>, Kondo considers the addition and deletion of constraints using the Buchberger's Algorithm [5] to derive a polynomial that gives the relationship between the deleted and added constraints. 3 The Constraint Solving System 3.1 Information Flow and Rationale The overall architecture of the constraint solver is shown in Figure 1.
Reference: [18] <author> K. Kondo. </author> <title> Algebraic method for manipulation of dimensional relationships in geometric models. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(3) </volume> <pages> 141-147, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: The system is solved with symbolic algebraic methods, such as Grobner's bases, e.g., [5, 11], or the Wu-Ritt method, e.g., [34, 8]. Both methods can solve general nonlinear systems of algebraic equations, but may require exponential running times. In <ref> [17, 18] </ref>, Kondo considers the addition and deletion of constraints using the Buchberger's Algorithm [5] to derive a polynomial that gives the relationship between the deleted and added constraints. 3 The Constraint Solving System 3.1 Information Flow and Rationale The overall architecture of the constraint solver is shown in Figure 1.
Reference: [19] <author> G. Kramer. </author> <title> Solving Geometric Constraint Systems. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Algebraically, this is equivalent to solving only quadratic equations, so that the specific coordinate computations do not require sophisticated mathematical computations. [22] argues that the solver is complete for ruler-and-compass constructible point configurations with prescribed distances that are algebraically independent. Kramer <ref> [19] </ref> describes a 3D constraint solver that deals with constraints from kinematics that are characterized by basic joint types.
Reference: [20] <author> W. Leler. </author> <title> Constraint Programming Languages: Their Specification and Generation. </title> <publisher> Addison Wesley, </publisher> <year> 1988. </year>
Reference-contexts: To succeed, various propagation techniques have been tried, but none of them is guaranteed to derive a solution when one exists, and most fail when presented with a circularly constrained problem. For a detailed review see <ref> [20, 28] </ref>. 2.4 Symbolic Constraint Solvers The constraints are translated into a system of algebraic equations. The system is solved with symbolic algebraic methods, such as Grobner's bases, e.g., [5, 11], or the Wu-Ritt method, e.g., [34, 8].
Reference: [21] <author> R. Light and D. Gossard. </author> <title> Modification of geometric models through variational geometry. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 14 </volume> <pages> 209-214, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: When based on Newton iteration, such solvers require good initial values, so that the initial sketch must almost satisfy all constraints already. Such solvers are quite general, and are capable of dealing with overconstrained, consistent constraint problems. Examples include Solano and Brunet [29], and Gossard and Light <ref> [21] </ref>. Nonlinear systems have an exponential number of solutions, but Newton iteration will find only one.
Reference: [22] <author> J. Owen. </author> <title> Algebraic solution for geometry from dimensional constraints. </title> <booktitle> In ACM Symp. Found. of Solid Modeling, </booktitle> <pages> pages 397-407, </pages> <address> Austin, Tex, </address> <year> 1991. </year>
Reference-contexts: However, as the repertoire of possible constraints increases, the graph-analysis algorithm has to be modified. Requicha [26] uses dimensioned trees that allow only horizontal and vertical distances. Todd [32] generalizes the dimension trees and gives a characterization of the expressive power of the solver. In <ref> [22] </ref>, Owen presents an extension of this principle to include circularly dimensioned sketches, and DCM is a commercial constraint solver using this method. Since our core algorithm is similar to [22], we describe Owen's solvers in more detail. Owen analyzes the constraint graph for triconnected components. <p> Todd [32] generalizes the dimension trees and gives a characterization of the expressive power of the solver. In <ref> [22] </ref>, Owen presents an extension of this principle to include circularly dimensioned sketches, and DCM is a commercial constraint solver using this method. Since our core algorithm is similar to [22], we describe Owen's solvers in more detail. Owen analyzes the constraint graph for triconnected components. Each triconnected component is reduced to a number of elements that interact with other components, and a determination is made how these elements fit together. Thereafter, each component is separately determined. <p> A key aspect of the solver is that only ruler-and-compass construction construction steps are allowed. Algebraically, this is equivalent to solving only quadratic equations, so that the specific coordinate computations do not require sophisticated mathematical computations. <ref> [22] </ref> argues that the solver is complete for ruler-and-compass constructible point configurations with prescribed distances that are algebraically independent. Kramer [19] describes a 3D constraint solver that deals with constraints from kinematics that are characterized by basic joint types.
Reference: [23] <author> R. Paige. </author> <title> Apts external specification manual. internal documentation, </title> <year> 1993. </year>
Reference-contexts: Aside from well-known special purpose tools such as LEX and Yacc, our constraint solver also makes use of the high level language SETL2 [27] to specify complex combinatorial algorithms and the transformational system APTS <ref> [7, 23] </ref> to perform syntactic analysis and symbolic manipulation of geometrical constraint specifications. 3. We study a number of neglected aspects of constraint solving. <p> The user-prepared sketch is changed into an Erep specification and is passed as text to the constraint solver. The solver is written using two novel software tools | the APTS transformational programming system <ref> [7, 23] </ref> and the high-level language SETL2 [27] | each having special features that the solver exploits. The front-end to the constraint solver engine is an APTS program that reads the Erep program and type checks it. For example, we check that only lines participate in angle constraints.
Reference: [24] <institution> Reasoning Systems. </institution> <note> Refine User's Guide, 1990. Version 3.0. </note>
Reference-contexts: The special syntactic, semantic, and transformational capabilities of APTS are also well suited to a flexible, experimental development of a logical framework with an evolving Erep language and corresponding solver. Like systems such as Centaur [2] the Synthesizer Generator [25], and Refine <ref> [24] </ref>, APTS has a single uniform formalism for lexical analysis, syntactic analysis, and pretty-printing. However, the semantic formalism in APTS has several advantages over the more conventional attribute grammar approach [15] that is used in the Synthesizer Generator.
Reference: [25] <author> T. Reps and T. Teitelbaum. </author> <title> The Synthsizer Generator. </title> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: The special syntactic, semantic, and transformational capabilities of APTS are also well suited to a flexible, experimental development of a logical framework with an evolving Erep language and corresponding solver. Like systems such as Centaur [2] the Synthesizer Generator <ref> [25] </ref>, and Refine [24], APTS has a single uniform formalism for lexical analysis, syntactic analysis, and pretty-printing. However, the semantic formalism in APTS has several advantages over the more conventional attribute grammar approach [15] that is used in the Synthesizer Generator.
Reference: [26] <author> A. Requicha. Dimensionining and tolerancing. </author> <type> Technical report, </type> <institution> Production Automation Project, University of Rochester, </institution> <month> May </month> <year> 1977. </year> <note> PADL TM-19. </note>
Reference-contexts: Second, the construction steps are carried out to derive the solution. This approach is fast and more methodical than the rule-constructive approach. However, as the repertoire of possible constraints increases, the graph-analysis algorithm has to be modified. Requicha <ref> [26] </ref> uses dimensioned trees that allow only horizontal and vertical distances. Todd [32] generalizes the dimension trees and gives a characterization of the expressive power of the solver.
Reference: [27] <author> K. Snyder. </author> <title> The SETL2 programming language. </title> <type> Technical report, </type> <institution> New York University, Computer Science, Courant Institute, </institution> <year> 1990. </year> <month> 29 </month>
Reference-contexts: Aside from well-known special purpose tools such as LEX and Yacc, our constraint solver also makes use of the high level language SETL2 <ref> [27] </ref> to specify complex combinatorial algorithms and the transformational system APTS [7, 23] to perform syntactic analysis and symbolic manipulation of geometrical constraint specifications. 3. We study a number of neglected aspects of constraint solving. <p> The user-prepared sketch is changed into an Erep specification and is passed as text to the constraint solver. The solver is written using two novel software tools | the APTS transformational programming system [7, 23] and the high-level language SETL2 <ref> [27] </ref> | each having special features that the solver exploits. The front-end to the constraint solver engine is an APTS program that reads the Erep program and type checks it. For example, we check that only lines participate in angle constraints.
Reference: [28] <author> W. Sohrt. </author> <title> Interaction with Constraints in three-dimensional Modeling. </title> <type> Master's thesis, </type> <institution> Dept of Computer Science, The University of Utah, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: This is more natural for the user and makes the approach suitable for interactively debugging a sketch. 2.2.1 Rule-Constructive Solvers Rule-constructive solers use rewrite rules to discover and execute the construction steps. Bruderlin and Sohrt <ref> [3, 28] </ref> solve constraints in this way and incorporate the Knuth-Bendix critical-pairs algorithm [16]. They show that their method is correct and solves all problems that can be constructed using ruler and compass. Other rule-constructive solvers include Aldefeld [1] and Sunde [30]. <p> To succeed, various propagation techniques have been tried, but none of them is guaranteed to derive a solution when one exists, and most fail when presented with a circularly constrained problem. For a detailed review see <ref> [20, 28] </ref>. 2.4 Symbolic Constraint Solvers The constraints are translated into a system of algebraic equations. The system is solved with symbolic algebraic methods, such as Grobner's bases, e.g., [5, 11], or the Wu-Ritt method, e.g., [34, 8].
Reference: [29] <author> L. Solano and P. Brunet. </author> <title> A system for constructive constraint-based modeling. </title> <editor> In B. Falcidieno and T. Kunii, editors, </editor> <booktitle> Modeling in Computer Graphics, </booktitle> <pages> pages 61-84. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: When based on Newton iteration, such solvers require good initial values, so that the initial sketch must almost satisfy all constraints already. Such solvers are quite general, and are capable of dealing with overconstrained, consistent constraint problems. Examples include Solano and Brunet <ref> [29] </ref>, and Gossard and Light [21]. Nonlinear systems have an exponential number of solutions, but Newton iteration will find only one.
Reference: [30] <author> G. Sunde. </author> <title> Specification of shape by dimensions and other geometric constraints. </title> <editor> In M. J. Wozny, H. W. McLaughlin, and J. L. Encarnacao, editors, </editor> <booktitle> Geometric Modeling for CAD Applications, </booktitle> <pages> pages 199-213. </pages> <publisher> North Holland, IFIP, </publisher> <year> 1988. </year>
Reference-contexts: Bruderlin and Sohrt [3, 28] solve constraints in this way and incorporate the Knuth-Bendix critical-pairs algorithm [16]. They show that their method is correct and solves all problems that can be constructed using ruler and compass. Other rule-constructive solvers include Aldefeld [1] and Sunde <ref> [30] </ref>. In [35] and in [33] the problem of nonunique solutions is considered. Although a Logic Programming style of constraint solving is a good approach for prototyping and experimentation, the extensive computations searching and matching rewrite rules constitute a liability. 4 2.2.2 Graph-Constructive Solvers Graph-constructive solvers have two phases.
Reference: [31] <author> I. Sutherland. </author> <title> Sketchpad, a man-machine graphical communication system. </title> <booktitle> In Proc. of the spring Joint Comp. Conference, </booktitle> <pages> pages 329-345. IFIPS, </pages> <year> 1963. </year>
Reference-contexts: Numerical solvers are therefore inappropriate when the initial sketch is only topologically correct, or when the solver locks into a solution that is unsuited to the application and has no method with which to find more suitable alternatives. Sutherland's Sketchpad <ref> [31] </ref> was the first system to use the method of numerical relaxation.
Reference: [32] <author> P. Todd. </author> <title> A k-tree generalization that characterizes consistency of dimensioned engineering drawings. </title> <journal> SIAM J. DISC. MATH., </journal> <volume> 2(2) </volume> <pages> 255-261, </pages> <year> 1989. </year>
Reference-contexts: This approach is fast and more methodical than the rule-constructive approach. However, as the repertoire of possible constraints increases, the graph-analysis algorithm has to be modified. Requicha [26] uses dimensioned trees that allow only horizontal and vertical distances. Todd <ref> [32] </ref> generalizes the dimension trees and gives a characterization of the expressive power of the solver. In [22], Owen presents an extension of this principle to include circularly dimensioned sketches, and DCM is a commercial constraint solver using this method.
Reference: [33] <author> A. Verroust, F. Schonek, and D. </author> <title> Roller. Rule-oriented method for parameterized computer-aided design. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(3) </volume> <pages> 531-540, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Bruderlin and Sohrt [3, 28] solve constraints in this way and incorporate the Knuth-Bendix critical-pairs algorithm [16]. They show that their method is correct and solves all problems that can be constructed using ruler and compass. Other rule-constructive solvers include Aldefeld [1] and Sunde [30]. In [35] and in <ref> [33] </ref> the problem of nonunique solutions is considered. Although a Logic Programming style of constraint solving is a good approach for prototyping and experimentation, the extensive computations searching and matching rewrite rules constitute a liability. 4 2.2.2 Graph-Constructive Solvers Graph-constructive solvers have two phases.
Reference: [34] <author> Wu Wen-Tsun. </author> <title> Basic principles of mechanical theorem proving in geometries. </title> <journal> J. of Systems Sciences and Mathematical Sciences, </journal> <volume> 4 </volume> <pages> 207-235, </pages> <year> 1986. </year>
Reference-contexts: For a detailed review see [20, 28]. 2.4 Symbolic Constraint Solvers The constraints are translated into a system of algebraic equations. The system is solved with symbolic algebraic methods, such as Grobner's bases, e.g., [5, 11], or the Wu-Ritt method, e.g., <ref> [34, 8] </ref>. Both methods can solve general nonlinear systems of algebraic equations, but may require exponential running times.
Reference: [35] <author> Y. Yamaguchi and F. Kimura. </author> <title> A constraint modeling system for variational geometry. </title> <editor> In M. J. Wozny, J. U. Turner, and K. Preiss, editors, </editor> <booktitle> Geometric Modeling for Product Engineering, </booktitle> <pages> pages 221-233. </pages> <publisher> Elsevier North Holland, </publisher> <year> 1990. </year>
Reference-contexts: Bruderlin and Sohrt [3, 28] solve constraints in this way and incorporate the Knuth-Bendix critical-pairs algorithm [16]. They show that their method is correct and solves all problems that can be constructed using ruler and compass. Other rule-constructive solvers include Aldefeld [1] and Sunde [30]. In <ref> [35] </ref> and in [33] the problem of nonunique solutions is considered. Although a Logic Programming style of constraint solving is a good approach for prototyping and experimentation, the extensive computations searching and matching rewrite rules constitute a liability. 4 2.2.2 Graph-Constructive Solvers Graph-constructive solvers have two phases.
References-found: 35

