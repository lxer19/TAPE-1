URL: http://www.cs.utexas.edu/users/cpg/pub/95-RTSS.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/cpg/pub/abs.html
Root-URL: 
Title: Compiling Modechart Specifications  
Author: Carlos Puchol, Aloysius K. Mok and Douglas A. Stuart 
Address: Austin, TX 78712-1188  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Date: December 1995.  
Note: In Proc. of the 16th Real-Time Systems Symposium,  
Abstract: The Modechart specification language is a formalism for the specification of real-time systems. A toolset for specification, analysis and simulation for Modechart specifications exists for supporting the design and construction of real-time systems [CHLR93]. This paper introduces a new tool in the the toolset: a compiler for a class of Modechart specifications, namely, that of deterministic system specifications, extended by a subclass of the non-deterministic system specifications. The object code that the compiler generates is in ESTEREL, a member of the synchronous family of programming languages for real-time systems. We discuss a broad approach to the implementation of timing specifications, providing a range of implementation options, from the basic time step unrolling of states in ESTEREL, to the use of system timers. The compiler presented herein allows the specifier to obtain a correct implementation of a mod-echart program, including timing constraints. 
Abstract-found: 1
Intro-found: 1
Reference: [AGE89] <institution> AGEL workshop manual version 3.0, </institution> <year> 1989. </year> <title> Produced by ILOG, </title> <address> Mountain View, CA, USA. </address>
Reference-contexts: The output of this compiler for a given input modechart is a piece of ES TEREL code, the object code, which implements the original specification. The object code in turn is compiled into a finite state machine by the ESTEREL compiler <ref> [AGE89] </ref>. The translation thus relies on an ESTEREL compiler to produce a state machine in a conventional language such as C or Ada and on a compiler for the latter languages to produce an executable state machine.
Reference: [BG92] <author> G. Berry and G. Gonthier. </author> <title> The ESTEREL synchronous programming language: design, semantics, </title> <booktitle> implementation. Science of Computer Programming, </booktitle> <address> 19:87152, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction While defining Statecharts [Har87], Harel already pointed out the similarities between Statecharts and ES TEREL <ref> [BG92] </ref>, such as the synchrony hypothesis, broadcast of signals and instantaneous propagation of events. <p> Our approach consists of presenting a customized semantics (an interpreter) for the ESTEREL object code. The conventional behavioral semantics for ESTEREL <ref> [BG92] </ref> is based on syntactic program transformation. Given a program and an input event sequence, the semantics determines the output event generated by the reaction of the program to the first input event and a new program (to treat the rest of the input).
Reference: [CHLR93] <author> P. C. Clements, C. L. Heitmeyer, B. G. Labaw, and A.T. Rose. </author> <title> MT:A Toolset for Specifying and Analyzing RealTime Systems. </title> <booktitle> In Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 1222, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Modechart borrows from Statecharts the use of hierarchical graphical formalisms to extend conventional state-transition diagrams. However, the semantics of Modechart is defined axiomatically in terms of RTL (Real Time Logic [JM86]), which is a logic especially amenable to reasoning about the absolute timing of events. A set of tools <ref> [CHLR93] </ref> has been developed for the specification and analysis of real-time systems within the SARTOR environment, to which we now add implementation capabilities. In this paper we describe a compiler for the class of deterministic Modechart programs and a subset of the class of non-deterministic Modechart programs.
Reference: [Har87] <author> D. Harel. Statecharts: </author> <title> A Visual Formalism for Complex Systems. </title> <booktitle> Sci. of Computer Programming, </booktitle> <address> 8:231274, </address> <year> 1987. </year>
Reference-contexts: 1 Introduction While defining Statecharts <ref> [Har87] </ref>, Harel already pointed out the similarities between Statecharts and ES TEREL [BG92], such as the synchrony hypothesis, broadcast of signals and instantaneous propagation of events.
Reference: [JM86] <author> F. Jahanian and A.K. Mok. </author> <title> Safety Analysis of Timing Properties of Real-Time Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12(9):890904, </volume> <month> September </month> <year> 1986. </year>
Reference-contexts: Modechart borrows from Statecharts the use of hierarchical graphical formalisms to extend conventional state-transition diagrams. However, the semantics of Modechart is defined axiomatically in terms of RTL (Real Time Logic <ref> [JM86] </ref>), which is a logic especially amenable to reasoning about the absolute timing of events. A set of tools [CHLR93] has been developed for the specification and analysis of real-time systems within the SARTOR environment, to which we now add implementation capabilities.
Reference: [JM94] <author> F. Jahanian and A. Mok. Modechart: </author> <title> a specification language for real-time systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(12):933947, </volume> <month> December </month> <year> 1994. </year>
Reference-contexts: Harel pointed out as well one crucial strength of ESTEREL that compiler techniques are available to generate very efficient implementations of the state machines described by ESTEREL code. The Modechart specification language <ref> [JM94] </ref> is a language designed for the specification of real-time systems. It fl This research is supported by a grant from the Office of Naval Research under grant number N00014-94-1-0582, and also by a grant from the Texas Advanced Research Program. <p> Eventually, within the same reaction, all the proper modes are entered. This captures the mode entry semantics of Modechart <ref> [JM94, PSM95] </ref>. During the first reaction, the root mode, m 1 , is entered (i.e. its corresponding code GM (m 1 ) is executed in the first time instant), by virtue of the signal ENTER m 1 being present in the first reaction only. <p> This restriction in fact partly determines the class of Modechart specifications supported by the compiler. The code for each active transition then forces termination of the modes that it (explicitly or implicitly) exits and forces the entry of other modes, the landing modes of the transition <ref> [JM94] </ref>. This is in essence the execution dynamics of the output code when transitions are taken in one time instant.
Reference: [JS88] <author> F. Jahanian and D. Stuart. </author> <title> A method for verifying properties of modechart specifications. </title> <booktitle> In Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1988. </year>
Reference-contexts: The input modechart presented in Figure 4 is a refinement of the actual specification in <ref> [JS88] </ref> to make the timing transitions deterministic. The following is the corresponding object code output. The declarations of the code have been generated by using an interfacing guide from the user. The gate controller itself compiles into a 7-state state machine.
Reference: [Mok85] <author> A. Mok. </author> <title> SARTOR a design environment for real-time systems. </title> <booktitle> In Proceedings 9th IEEE COMPSAC, </booktitle> <year> 1985. </year>
Reference-contexts: The first author is partially supported by a Fulbright fellowship from Spain's Ministry of Science. is part of the SARTOR project <ref> [Mok85] </ref>, an effort towards providing an integrated environment for the design, analysis and implementation of real-time systems. Modechart borrows from Statecharts the use of hierarchical graphical formalisms to extend conventional state-transition diagrams.
Reference: [PSM95] <author> C. Puchol, D. Stuart, and A.K. Mok. </author> <title> An operational semantics for Modechart specifications. </title> <type> Technical Report UTCS-TR95-37, </type> <institution> Department of Computer Sciences, The University of Texas at Austin, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: Eventually, within the same reaction, all the proper modes are entered. This captures the mode entry semantics of Modechart <ref> [JM94, PSM95] </ref>. During the first reaction, the root mode, m 1 , is entered (i.e. its corresponding code GM (m 1 ) is executed in the first time instant), by virtue of the signal ENTER m 1 being present in the first reaction only. <p> The rest of auxiliary functions are similar to some of the functions in the translation above. The next step is to prove that this specialized ESTEREL semantics in fact implements the semantics of Modechart by equating this semantics to the operational semantics of Modechart <ref> [PSM95] </ref>. The operational semantics defines a two-level Kripke structure on which lower level steps in the transition system correspond to instantaneous reactions and the top level steps correspond to individual time instants.
References-found: 9

