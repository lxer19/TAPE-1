URL: file://ftp.cs.ucla.edu/pub/ficus/reiher/tw.papers/tw_experience.ps.gz
Refering-URL: http://ficus-www.cs.ucla.edu/project-members/reiher/available_papers.html
Root-URL: http://www.cs.ucla.edu
Email: reiher@onyx.jpl.nasa.gov  
Title: Experiences With Optimistic Synchronization For Distributed Operating Systems  
Author: Peter L. Reiher 
Affiliation: Jet Propulsion Laboratory  
Abstract: Optimistic synchronization is a method of synchronizing parallel and distributed computations without the use of blocking. When non-optimistic systems would block, optimistic synchronization mechanisms permit operations to go ahead. If such optimism causes improper synchronization, the missynchronized work is undone and the entire system restored to a consistent state. This paper discusses the experiences of developing a distributed operating system based around optimistic synchronization, the Time Warp Operating System (TWOS). It covers the challenges of implementing such a system, the advantages of optimistic synchronization, and how well optimistic synchronization works in practice in TWOS, and offers advice for others developing systems using optimistic synchronization. 
Abstract-found: 1
Intro-found: 1
Reference: [Bellenot 90] <author> Steven Bellenot, </author> <title> Global Virtual Time Algorithms, </title> <booktitle> Proceedings of the 1990 SCS Conference on Distributed Simulation , Volume 22, </booktitle> <volume> No. 2, </volume> <booktitle> Society for Computer Simulation, </booktitle> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: Because it is a distributed computation, a carelessly written GVT algorithm can fail to consider a message sent in the middle of GVT calculation, leading to an incorrectly high estimate of GVT. <ref> [Bellenot 90] </ref> discusses some of the problems of correctly estimating GVT and presents an efficient algorithm for doing so. 3.2 Performance Issues for Optimistic Synchronization Systems Optimistic synchronization systems can achieve very good performance. <p> An earlier, less clever algorithm, which used substantially more messages and longer delays in calculation, had around a 1% impact on the total elapsed time of typical simulations, suggesting that even a bad GVT algorithm will not have terrible effects on the performance of the system <ref> [Bellenot 90] </ref>. 3.2.2 Performance Design Choices For Optimistic Synchronization Systems Some of the design choices for an optimistic synchronization system that can have profound effects on performance include: Scheduling and Priority Mechanisms Memory Management Strategies Load Management and Migration The following sections discuss these issues in more detail. 3.2.2.1 Scheduling and
Reference: [Bellenot 92] <author> Steven Bellenot, </author> <title> State Skipping Performance With the Time Warp Operating System, </title> <booktitle> Proceedings of the 1992 SCS Conference on Distributed Simulation , Vol. </booktitle> <volume> 24, No. 3, </volume> <booktitle> Society for Computer Simulation, </booktitle> <month> Jan. </month> <year> 1992. </year>
Reference: [Bhargava 82] <author> Bharat Bhargava, </author> <title> Performance Evaluation of the Optimistic Approach to Distributed Database Systems and Its Comparison To Locking, </title> <booktitle> Proceedings of the IEEE Conference on Distributed Computer Systems , 1982. </booktitle>
Reference-contexts: In certain cases, the probability that an action can produce correct results even when done out of order can affect the performance of optimistic synchronization. Optimistic synchronization has been used in a limited way in certain distributed database systems <ref> [Bhargava 82] </ref>, [Carey 88]; and for some special purposes in operating systems.
Reference: [Burdorf 90] <author> Christopher Burdorf and Jed Marti, </author> <title> Non-Preemptive Time Warp Scheduling Algorithms, </title> <journal> Operating Systems Review , Volume 24, </journal> <volume> No. 2, </volume> <month> Apr. </month> <year> 1990. </year>
Reference-contexts: Other implementations of Jeffersons virtual time mechanism for distributed discrete event simulation exist. They include a shared memory implementation by Fujimoto [Fujimoto 89], Jades commercial implementation of Time Warp [Lomow 88], a LISP version written by Rand <ref> [Burdorf 90] </ref>, and a C++ version that runs on the Caltech/JPL Mark 3 Hypercube [Steinman 91]. These implementations all differ somewhat from TWOS in various ways. <p> The major differences between the many correct scheduling policies is their effect on system performance. Preemptive lowest virtual time first has proven to perform well in most cases <ref> [Burdorf 90] </ref>. Whatever scheduling policy is chosen, however, the system designers must be certain that it will never indefinitely delay the lowest timestamped event in the system. 3.1.3 Non-Determinism In many, though not necessarily all, distributed systems, determinism is desirable at the user level. <p> As discussed in section 3.1, many scheduler policies can give correct results for optimistic execution systems. However, the policy that has given the best results for TWOS, and most other optimistic execution system, is preemptive lowest virtual time event first. <ref> [Burdorf 90] </ref> investigated some particular cases for various scheduling policies under the Rand implementation of Time Warp, and found that no tested policy did very much better than lowest virtual time first. There is a superior policy, however.
Reference: [Carey 88] <author> Michael J. Carey and Miron Livny, </author> <title> Distributed Concurrency Control Performance: </title>
Reference-contexts: In certain cases, the probability that an action can produce correct results even when done out of order can affect the performance of optimistic synchronization. Optimistic synchronization has been used in a limited way in certain distributed database systems [Bhargava 82], <ref> [Carey 88] </ref>; and for some special purposes in operating systems.
References-found: 5

