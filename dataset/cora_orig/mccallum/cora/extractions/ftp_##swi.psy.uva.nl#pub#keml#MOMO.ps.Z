URL: ftp://swi.psy.uva.nl/pub/keml/MOMO.ps.Z
Refering-URL: ftp://swi.psy.uva.nl/pub/keml/keml.html
Root-URL: 
Title: Concurrency constraints as control speciflcations for the MoMo language  
Author: Friedrich Gebhardt, Eckehard Gro and Hans Vo 
Affiliation: Gesellschaft fur Mathematik und Datenverarbeitung mbH (GMD)  
Abstract: The modelling language MoMo is based on the notions and concepts of the KADS model of expertise. In particular, it formalizes the inference and task layer of KADS. Provided with a concrete domain layer and explicit links from the generic interpretation model to domain entities, it allows to build operational systems. MoMo is currently under revision. In the "old" language, task bodies were deflned by structured control constructs that ultimately deflne a sequence of activations of inference actions. In the new task layer language we take the opposite approach: The inference structure as a dataow speciflcation is interpreted like a coloured Petri net, thus retaining the full nondeterminism and concurrency as implicitly deflned by such nets, unless restrictions are explicitly specifled. We propose a separate scheme of control speciflca-tions, and we argue why expressing control by augmenting the dataow Petri net with Petri net means was not our favorite choice. This new control regime with its inherent concurrency shall serve as a technical ground for the development of cooperative and distributed systems.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> D. Fensel, J. Angele, and D. Landes. KARL:: </author> <title> A knowledge acquisition and representation language. </title> <editor> In J. Rault, editor, </editor> <booktitle> Proceedings of the 11th International Conference Expert systems and their applications, volume 1 (Tools, Techniques & Methods), </booktitle> <pages> pages 513-528, </pages> <address> Avignon, 1991. </address> <publisher> EC2. </publisher>
Reference-contexts: It w as also supported by the German Ministry for Research and Technology (BMFT) within the joint project BEHAVIOR under contract No. 01-IW-203-C0. restricted to MoMo but could also be applied at the task layer of other KADS-oriented languages such as (ML) 2 [5] or KARL <ref> [1] </ref>. We start with sketching the overall structure of MoMo and then present in Section 3 the principles of the new version of the task layer.
Reference: 2. <author> Manfred Fidelak. </author> <title> Integritatsbedingungen in Petri-Netzen. </title> <type> PhD thesis, </type> <institution> Universitat Koblenz-Landau, Koblenz, </institution> <year> 1993. </year>
Reference-contexts: Although we studied such an approach quite intensively including in our considerations the process logic of <ref> [2] </ref>, we didn't accept it, and it may be of interest to sketch here the main reasons. There are simple problems where one would like to apply a kind of procedural language. Even if this is quite opposite to a freely occurring net, it must somehow be achievable.
Reference: 3. <author> Friedrich Gebhardt, Eckehard Gro, and Hans Vo. </author> <title> Concurrency constraints as control speciflcations for the MoMo language. </title> <type> Fabel-Report 21, </type> <institution> Gesellschaft fur Mathematik und Datenverarbeitung mbH (GMD), Sankt Augustin, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Due to space limitations, we have to omit examples as well as many technical details. These can be found in <ref> [3] </ref>. 2 KADS as a starting point MoMo uses KADS as a methodological basis and permits to execute inferences for solving a problem. As in the KADS model of expertise, there are four layers. The domain layer is assumed to pre-exist. <p> Even if this is quite opposite to a freely occurring net, it must somehow be achievable. It is in fact achievable with net extensions; however, things become too complicated. A simple example, originally used in [7], is analyzed in <ref> [3] </ref>. It leads to an augmented net that is rather complicated; in addition, one has to introduce priorities. It seems possible to devise a language with procedural elements that can be translated by a computer into such net extensions. <p> Given the translator exists, the net may not work as expected and the user has to flnd the mistake; then he will have to delve into the extended net. It is already tedious to comprehend the simple example in <ref> [3] </ref>. More complicated situations appear rather hopeless. A major reason for using Petri nets is that there exist several algebraic methods for analyzing nets. This again seems rather hopeless for sizeable Coloured Petri Nets augmented by possibly even more administrative transitions.
Reference: 4. <author> Kurt Jensen. </author> <title> Coloured Petri Nets: a high level language for system design and analysis. </title> <editor> In Grzegorz Rozenberg, editor, </editor> <booktitle> Advances in Petri Nets 1990. </booktitle> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: The domain layer is assumed to pre-exist. The data constituting the domain knowledge are stored somehow in an orderly fashion. MoMo provides for means to access data in various formats (views on the data). The inference layer is essentially realized as a Coloured Petri Net (CPN) <ref> [4] </ref>. KADS roles correspond to places of the net, KADS inferences to actions (transitions). <p> Another type of higher level constructs are hierarchies, see Section 4. Additional constructs may evolve when more practical experience is available. 4 Hierarchies At the inference layer, MoMo is augmented by hierarchies in the sense of <ref> [4] </ref>. Thus it is possible to replace an action (then called a substitution action) by an action bounded subnet (a page). The semantics of the hierarchical net is that of the at net that results from the expansion.
Reference: 5. <author> F. van Harmelen and J. Balder. </author> <title> (ML) 2 : A formal language for kads models of expertise. </title> <institution> ESPRIT Project P5248 KADS-II KADS-II/T1.2/PP/UvA/17/1.0, University of Amsterdam, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: It w as also supported by the German Ministry for Research and Technology (BMFT) within the joint project BEHAVIOR under contract No. 01-IW-203-C0. restricted to MoMo but could also be applied at the task layer of other KADS-oriented languages such as (ML) 2 <ref> [5] </ref> or KARL [1]. We start with sketching the overall structure of MoMo and then present in Section 3 the principles of the new version of the task layer.
Reference: 6. <author> J. Walther, A. Vo, T. Hemmann, and H. Vo. MoMo. </author> <booktitle> In 3rd KADS Meeting on CommonKADS, </booktitle> <pages> pages 189-205, </pages> <address> Munchen, </address> <year> 1993. </year> <institution> Siemens AG. </institution>
Reference-contexts: The existing MoMo functionality <ref> [7, 6] </ref> will essentially remain unchanged; it does not belong to the scope of this report.
Reference: 7. <author> J. Walther, A. Vo, M. Linster, T. Hemmann, H. Vo, and W. Karbach. </author> <month> MoMo. </month> <institution> Arbeitspapiere der GMD 658, Gesellschaft fur Mathematik und Datenverarbeitung mbH (GMD), Sankt Augustin, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction 1 MoMo is a knowledge modelling language based on the KADS model of expertise [8]. It uses a structure similar to Coloured Petri Nets on the inference level and, in its flrst version which is working for a couple of years <ref> [7] </ref>, a procedural language on the task level. One major goal of the ongoing revision and extension of MoMo is to replace this procedural language by a less stringent speciflcation. Ideally, it should not be necessary to specify any irrelevant control details, e. g. artiflcial sequentialization of inherently concurrent activities. <p> The existing MoMo functionality <ref> [7, 6] </ref> will essentially remain unchanged; it does not belong to the scope of this report. <p> Even if this is quite opposite to a freely occurring net, it must somehow be achievable. It is in fact achievable with net extensions; however, things become too complicated. A simple example, originally used in <ref> [7] </ref>, is analyzed in [3]. It leads to an augmented net that is rather complicated; in addition, one has to introduce priorities. It seems possible to devise a language with procedural elements that can be translated by a computer into such net extensions.
Reference: 8. <author> Bob J. Wielinga, A. Th. Schreiber, and J. A. Breuker. Kads: </author> <title> a modelling approach to knowledge engineering. </title> <journal> Knowledge Acquisition, </journal> <volume> 4 </volume> <pages> 5-53, </pages> <year> 1992. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: 1 Introduction 1 MoMo is a knowledge modelling language based on the KADS model of expertise <ref> [8] </ref>. It uses a structure similar to Coloured Petri Nets on the inference level and, in its flrst version which is working for a couple of years [7], a procedural language on the task level.
References-found: 8

