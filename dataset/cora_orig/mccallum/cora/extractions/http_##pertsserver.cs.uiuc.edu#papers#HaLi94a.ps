URL: http://pertsserver.cs.uiuc.edu/papers/HaLi94a.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Email: frhanha, janeliug@cs.uiuc.edu  
Title: Validating Timing Constraints in Multiprocessor and Distributed Real-Time Systems  
Author: Rhan Ha and Jane W. S. Liu 
Address: Urbana, Illinois 61801  
Affiliation: Department of Computer Science University of Illinois  
Note: Appeared in the Proceedings of IEEE 14th International Conference on Distributed Computing Systems, 1994.  
Abstract: In multiprocessor and distributed real-time systems, scheduling jobs dynamically on processors is likely to achieve better performance. However, analytical and efficient validation methods to determine whether all the timing constraints are met do not exist for systems using modern dynamic scheduling strategies, and exhaustive simulation and testing are unreliable and expensive. This paper describes several worst-case bounds and efficient algorithms for validating systems in which jobs have arbitrary timing constraints and variable execution times and are scheduled on processors dynamically in a priority-driven manner. The special cases of the validation problem considered here are concerned with independent jobs that are (1) pre-emptable and migratable, or (2) preemptable and non-migratable, or (3) nonpreemptable. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. A. Stankovic, K. Ramamritham, and S. Cheng. </author> <title> Evaluation of a flexible task scheduling algorithm for distributed hard real-time systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 34(12) </volume> <pages> 1130-1143, </pages> <month> December </month> <year> 1985. </year>
Reference: [2] <author> K.G. Shin and Y.C. Chang. </author> <title> Load sharing in distributed real-time systems with state-change broadcasts. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 38(8) </volume> <pages> 1124-1142, </pages> <month> August </month> <year> 1989. </year>
Reference: [3] <author> K. Schwan and H. Zhou. </author> <title> Dynamic scheduling of hard real-time tasks and real-time threads. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(8) </volume> <pages> 736-748, </pages> <month> August </month> <year> 1992. </year>
Reference: [4] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard-real-time environment. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: By statically binding jobs to processors, the traditional approach allows timing constraints to be validated using analytical methods or by efficient algorithms <ref> [4, 10] </ref>. In contrast, such validation methods do not exist for systems using modern dynamic scheduling strategies, and exhaustive simulation and testing are unreliable and expensive. Until reliable and efficient validation methods become available, the modern approaches to scheduling can not be used in real-life, safety-critical systems.
Reference: [5] <author> S. K. Dhall and C. L. Liu. </author> <title> On a real-time scheduling problem. </title> <journal> Operations Research, </journal> <volume> 26(1) </volume> <pages> 127-140, </pages> <month> February </month> <year> 1978. </year>
Reference: [6] <author> J. Leung and J. Whitehead. </author> <title> On the complexity of fixed-priority scheduling of periodic, real-time tasks. Performance Evaluation, </title> <booktitle> 2 </booktitle> <pages> 237-250, </pages> <year> 1982. </year>
Reference: [7] <author> R. Rajkumar, L. Sha, and J. P. Lehoczky. </author> <title> Real-time synchronization protocols for multiprocessors. </title> <booktitle> In Proceedings of IEEE 9th Real-Time Systems Symposium, </booktitle> <pages> pages 259-269, </pages> <month> December </month> <year> 1988. </year>
Reference: [8] <author> L. Sha, R. Rajkumar, and J. P. Lehoczky. </author> <title> Priority inheritance protocols: An approach to real-time synchronization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(9) </volume> <pages> 1175-1185, </pages> <month> September </month> <year> 1990. </year>
Reference: [9] <author> T. P. Baker. </author> <title> A stack-based allocation policy for real-time processes. </title> <booktitle> In Proceedings of IEEE 11th Real-Time Systems Symposium, </booktitle> <pages> pages 191-200, </pages> <month> December </month> <year> 1990. </year>
Reference: [10] <author> J. P. Lehoczky, L. Sha, and Y. Ding. </author> <title> The rate monotone scheduling algorithm: Exact characterization and average case behavior. </title> <booktitle> In Proceedings of IEEE 10th Real-Time Systems Symposium, </booktitle> <pages> pages 166-171, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: By statically binding jobs to processors, the traditional approach allows timing constraints to be validated using analytical methods or by efficient algorithms <ref> [4, 10] </ref>. In contrast, such validation methods do not exist for systems using modern dynamic scheduling strategies, and exhaustive simulation and testing are unreliable and expensive. Until reliable and efficient validation methods become available, the modern approaches to scheduling can not be used in real-life, safety-critical systems.
Reference: [11] <author> J. Blazewicz. </author> <title> Selected topics in scheduling theory. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 31 </volume> <pages> 1-60, </pages> <year> 1987. </year>
Reference-contexts: These methods can be easily generalized to deal with jobs with arbitrary release times. Many worst-case performance bounds for priority-driven multiprocessor scheduling algorithms can be found in literature on classical scheduling theory <ref> [11] </ref>. These bounds are typically too pessimistic to be of practical use. Worse, they cannot be extended to the case where jobs have arbitrary release times and deadlines. The rest of the paper is organized as follows. Section 2 gives the formal definition of the schedulability analysis problem. <p> We are developing an algorithm to handle the case where each job can execute on several types of processors. Our model of heterogeneous processors is known as the uniform-processor model <ref> [11] </ref>. Jobs are pre-emptable and migratable and have fixed release times. The reliability and performance of this algorithm (in terms of the tightness of the upper bounds produced by it) remain to be ascertained.
Reference: [12] <author> R. Ha and J. W. S. Liu. </author> <title> Validating timing constraints in multiprocessor and distributed real-time systems. </title> <type> Technical Report UIUCDCS-R-93-1833, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1993. </year>
Reference-contexts: It discusses future work as well as how the results here can be applied when the system contains heteroge-neous processors. Due to space limitation only proofs that offer some insights into the conditions that lead to predictable or unpredictable executions are included here; other proofs can be found in <ref> [12] </ref>. 2 Definitions and Notation We characterize the workload to be scheduled and analyzed as a set J = fJ 1 ; J 2 ; : : : ; J n g of jobs. The jobs in J are independent and can execute in any order. <p> Because of the limitation in space and the lengthiness of the proofs, we present here only the proof of Lemma 4.4 to provide some insight into why job execution is predictable when the condition stated in the lemma is true. Again, the other proofs can be found in <ref> [12] </ref>. <p> We note that the completion times of the jobs in bounds given by Theorem 4.3. This example, as well as similar examples in <ref> [12] </ref>, causes us to ask whether the bounds in Theorem 4.3 are tight in some sense when there is preemption in the maximal schedule. <p> The fol lowing lemmas give us the basis to find upper bounds of the start times and completion times of independent N/N/F jobs. The proofs of these lemmas can be found in <ref> [12] </ref>. Lemma 5.1 Every job J i is blocked for at most the duration of one lower-priority job with release time earlier than r i . <p> The proof of a theorem stating that if H i can complete by the deadline d i of J i in the schedule generated by IN N F algorithm, J i is schedulable can be found in <ref> [12] </ref>. Because no job is ever blocked by a preemptable lower-priority job, we can use Algorithm IN N F with very little change to find the completion times of all jobs when some jobs are preemptable and migratable. <p> When preemptable jobs are not migratable, Lemma 5.2 no longer holds. Similarly, the schedule of J n constructed by assuming all the jobs are preemptable and nonmigratable gives us no information on which lower-priority jobs can actually start before J i . Counterexamples can be found in <ref> [12] </ref>. Algorithm IN N F N can be used to bound the completion times in this case. It consists of two steps. Step 1 considers the delays in the start time of each job J i by nonpreemptable lower-priority jobs.
Reference: [13] <author> R. L. Graham. </author> <title> Bounds on multiprocessing timing anomalies. </title> <journal> SIAM Journal of Applied Mathematics, </journal> <volume> 17(2) </volume> <pages> 416-429, </pages> <month> March </month> <year> 1969. </year>
Reference-contexts: This question remains to be addressed in the future. 5 Some Jobs are Nonpreemptable It is well known that when some of the jobs are nonpreemptable their execution is not predictable <ref> [13] </ref>. We consider here three cases: when all jobs are non-preemptable, when preemptable jobs are migratable, and when preemptable jobs are not migratable. For all three cases, the release times of all jobs are assumed to be fixed, and jobs are independent.
References-found: 13

