URL: http://ptolemy.eecs.berkeley.edu/papers/97/ultrasparc/msthesisfinal.ps
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/97/ultrasparc/
Root-URL: 
Title: Real-time Signal Processing on the Ultrasparc  Approval for the Report and Comprehensive Examination:  
Author: William Chen 
Note: Research Project Submitted to the  Plan II.  Research Advisor Date Professor J. Rabaey Second Reader Date  
Address: Berkeley, California 94720  
Affiliation: 1 of 41 Department of Electrical Engineering and Computer Science University of California  Electronics Research Labs, 1/17/97  Department of Electrical Engineering and Computer Sciences, University of California, Berkeley,  
Pubnum: Technical Memorandum M97/4,  
Degree: in partial satisfaction of the requirements for the degree of Master of Science in Engineering,  Committee: Professor E.A. Lee  
Date: February 21, 1997  
Abstract-found: 0
Intro-found: 1
Reference: <institution> Real-time Signal Processing on the Ultrasparc 41 of 41 9.0 References </institution>
Reference: [1] <institution> Visual Instruction Set Users Guide, Sun Microsystems, </institution> <year> 1995. </year>
Reference-contexts: There are several advantages to this approach. The Ptolemy CGC domain already contains a rich library of signal processing stars. Thus any application can leverage off of this infrastructure. Furthermore, the majority of VIS instructions have a C interface via an inline mechanism <ref> [1] </ref>. As such, the CGC domain can be easily extended to generate VIS code. In this manner, applications can be developed with and without VIS so that speed and quantization performance of basic signal processing kernels can be measured.
Reference: [2] <author> David L. Weaver and Tom Germond, </author> <title> The Sparc Architecture Manual, Version 9, </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1994 </year>
Reference-contexts: Finally, Section 6 presents the development of a real time audio application with the VIS. Ultrasparc Processor and VIS 6 of 41 Real-time Signal Processing on the Ultrasparc 4.0 Ultrasparc Processor and VIS 4.1 Overview The Ultrasparc processor is a superscalar processor that implements a 64 bit RISC architecture <ref> [2] </ref>. The significant features of the architecture are its ability to issue four instructions per cycle and the enhancement of its oating point unit to support the Visual Instruction Set. <p> Non-aligned data can be accessed with vis_alignaddr () and vis_faligndata () instructions, but these are very cycle expensive operations. Therefore, to optimize the VIS instructions, the coefficient matrix and the vector of current and past input data (x) are aligned along an 8-byte boundary. x [0] x <ref> [2] </ref> x [6] x [5] x [0] x [2] x [3] x [5] W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N <p> Therefore, to optimize the VIS instructions, the coefficient matrix and the vector of current and past input data (x) are aligned along an 8-byte boundary. x [0] x <ref> [2] </ref> x [6] x [5] x [0] x [2] x [3] x [5] W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N
Reference: [3] <author> Edward A. Lee, </author> <title> Programmable DSP Architectures: Part 1, </title> <journal> IEEE ASSP Magazine, </journal> <volume> Vol. 5, No. 4, </volume> <pages> pp 4-19, </pages> <month> October, </month> <year> 1988. </year>
Reference-contexts: When computing with fixed point numbers, the programmer should minimize overow and minimize the loss of precision. The loss of precision is introduced by quantization effects from two sources: A/D and D/A conversions and multiplication <ref> [3] </ref>. The former is discussed in section 5.4 Quantization Performance, and the second, multiplication, is presented below. When two fixed point numbers are multiplied, there can be a loss of precision through quantization and a scale change. Figure 4.10 shows the multiplication of two fixed point numbers of length N. <p> Therefore, to optimize the VIS instructions, the coefficient matrix and the vector of current and past input data (x) are aligned along an 8-byte boundary. x [0] x [2] x [6] x [5] x [0] x [2] x <ref> [3] </ref> x [5] W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N
Reference: [4] <author> Alan V. Oppenheim and R. Schafer, </author> <title> Discrete-Time Signal Processing, </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1989. </year>
Reference-contexts: For example, Figure 4.11 shows the addition of two sine waves that results in wraparound. Wraparound is used because it is simple to implement. Also the accumulation of several overows can still lead to the correct value even if intermediate ones wraparound <ref> [4] </ref>. CGCVIS 20 of 41 Real-time Signal Processing on the Ultrasparc 5.0 CGCVIS The code generation domains in Ptolemy consist of a set of Stars, Targets, and Schedulers that generate code for a particular computational model.
Reference: [5] <author> D. Mitra and J. F. Kaiser, eds., </author> <title> Handbook of Digital Signal Processing, </title> <publisher> John Wiley and Sons, </publisher> <year> 1993. </year>
Reference-contexts: Remember the optimal VIS multiplications and additions are 4x4. Also Figure 6.2 shows that the state vector must be updated for every new output. Another approach is to eliminate this feedback dependency This approach, shown in Figure 6.3, is called the inner product method <ref> [5] </ref>. The inner product method eliminates the dependency of the feedback by recursively expanding the difference equation. The entire set of outputs -y [n], y [n+1], y [n+2], y [n+3]- depends on the same previous outputs -y [n-1] and y [n-2]-. <p> Therefore, to optimize the VIS instructions, the coefficient matrix and the vector of current and past input data (x) are aligned along an 8-byte boundary. x [0] x [2] x [6] x <ref> [5] </ref> x [0] x [2] x [3] x [5] W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N <p> Therefore, to optimize the VIS instructions, the coefficient matrix and the vector of current and past input data (x) are aligned along an 8-byte boundary. x [0] x [2] x [6] x <ref> [5] </ref> x [0] x [2] x [3] x [5] W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N FFT decimation <p> A pole (zero) grid is helpful in visualizing this <ref> [5] </ref>. It displays the z-plane with the allowed pole (zero) positions. Two quantization effects are evident. First, the poles (zeros) of the desired transfer function are shifted to new positions. <p> The audible effect of coefficient quantization was greater in the latter. One approach to analyzing the effects of coefficient quantization is by designing a series of filters with different wordlengths and measuring the error in the frequency responses <ref> [5] </ref>.
Reference: [6] <author> Dale J. Shpak, </author> <title> Analytical Design of Biquadratic Filter Sections for Parametric Filters, </title> <journal> Journal of Audio Engineering Society, </journal> <volume> Vol. 40, No. 11, </volume> <year> 1992. </year>
Reference-contexts: Non-aligned data can be accessed with vis_alignaddr () and vis_faligndata () instructions, but these are very cycle expensive operations. Therefore, to optimize the VIS instructions, the coefficient matrix and the vector of current and past input data (x) are aligned along an 8-byte boundary. x [0] x [2] x <ref> [6] </ref> x [5] x [0] x [2] x [3] x [5] W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N W N <p> To make the parametric filter truly interactive, it must update the filter coefficients in real time. The design of such parametric filters is given by Schpak <ref> [6] </ref>. 7.1 Parametric filter design There are many ways to design a parametric filter, but in order to meet the real time constraint, three design choices are made. First, IIR filters are chosen. Although FIR filters are stable and have linear phases, they require high filter orders.
References-found: 7

