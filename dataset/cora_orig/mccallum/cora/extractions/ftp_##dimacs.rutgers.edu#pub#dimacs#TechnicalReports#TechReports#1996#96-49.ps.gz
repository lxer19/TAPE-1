URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1996/96-49.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1996.html
Root-URL: http://www.cs.rutgers.edu
Title: by  
Author: Stephen J. Bellantoni 
Note: Ranking Arithmetic Proofs by Implicit Ramification 1  Center for Discrete Mathematics and Theoretical Computer Science. DIMACS is a partnership of Rutgers University, Princeton University, AT&T Research, Bellcore, and Bell Laboratories. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 96-49 November 1996 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Beeson, </author> <title> Foundations of Constructive Mathematics, Metamathematical Studies, </title> <publisher> Springer-Verlag (1985). </publisher>
Reference-contexts: A special predicate letter is used to delimit the numbers in Peano's original formulation. Leivant extends this to a series of special predicate letters corresponding to ramification levels [13]. A typical constructive approach to non-convergence of functions is given in Beeson's logic of partial terms <ref> [1] </ref> p. 97. For free logic one can start with Lambert's collection [11], particularly the contributions by Garson (p. 111) and Posy (p. 49). The present development is, as far as I know, original.
Reference: [2] <author> S. Bellantoni, </author> <title> "Predicative Recursion and Computational Complexity", </title> <type> T.R. 264/92, </type> <institution> Department of Computer Science, University of Toronto, </institution> <month> September </month> <year> 1992. </year>
Reference: [3] <author> S. Bellantoni, </author> <title> "Predicative Recursion and the Polytime Hierarchy", in Feasible Mathematics II, </title> <editor> P. Clote and J. B. Remmel eds.; </editor> <publisher> Birkhauser, </publisher> <address> Boston, (1995) p. </address> <pages> 15-29. </pages>
Reference: [4] <author> S. Bellantoni, </author> <title> "Ranking Primitive Recursions: The Low Grzegorczyck Classes Revisited", </title> <type> manuscript, </type> <year> 1996. </year>
Reference-contexts: One of the hierarchies defined using such a ranking consists of the polynomial-time computable functions at level 1, and at higher levels consists of certain of the Grzegorczyk classes <ref> [4] </ref>. The current work shows how to rank arithmetic proofs containing inductions, such that the ranking of proofs corresponds exactly to this ranking of recursions. It is shown that a function can be proven convergent by a rank r proof if and only if it is a rank r function. <p> Each input position i of each primitive recursive function f is labeled with a `rank' number (f; i) that, intuitively, tells how much understanding of the ith input is required in order to have any understanding at all of the output <ref> [4] </ref>. One defines (f ) = max i (f; i). <p> We would like to generalize this idea to functions defined by various ranks of recursion and proofs having corresponding ranks of induction. As it has been shown - 4 - that these ranks of recursion characterize various function classes with limited computational complexity <ref> [4] </ref>, one expects the corresponding ranks of induction to characterize various proof systems having limited computational complexity. Remarkably, the result holds even when quantifiers are unrestricted in the induction formulas. <p> In particular, PR 2 includes all the primitive recursive functions and separates at all levels, while the system in [14] collapses to level 2. Theorem 2.1 (Bellantoni & Cook [5]) PR 1 2 consists of exactly the polynomial time computable functions. Theorem 2.2 (Bellantoni <ref> [4] </ref>) For r 2, PR r 2 = E r+1 , the Grzegorczyk class of level r + 1. In particular, PR 2 2 = the Kalmar elementary functions. - 6 - 3 Synthetic Arithmetic Now a proof system is developed that is suitable for counting the rank of inductions. <p> The rule of "full recursion on notation" now becomes "full primitive recursion", replacing p with P . The definition of (f ) is carried over unchanged, except that the set of initial functions is different. It is shown in the companion paper <ref> [4] </ref> that for r 1, one has PR r 1 = E r+1 , the Grzegorczyk functions of level r + 1. By Ritchie's theorem, PR 1 1 consists of exactly the linear-space computable functions.
Reference: [5] <author> S. Bellantoni and S. Cook, </author> <title> "A New Recursion-Theoretic Characterization of the Poly-time Functions", in Computational Complexity v. </title> <booktitle> 2, p. </booktitle> <pages> 97-110, </pages> <year> 1992. </year>
Reference-contexts: In particular, PR 2 includes all the primitive recursive functions and separates at all levels, while the system in [14] collapses to level 2. Theorem 2.1 (Bellantoni & Cook <ref> [5] </ref>) PR 1 2 consists of exactly the polynomial time computable functions. Theorem 2.2 (Bellantoni [4]) For r 2, PR r 2 = E r+1 , the Grzegorczyk class of level r + 1.
Reference: [6] <author> S. Buss, </author> <title> Bounded Arithmetic, </title> <type> Ph.D. Dissertation, </type> <institution> Princeton University, </institution> <note> 1985; reprinted Bibliopolis, Naples, </note> <year> 1986. </year>
Reference-contexts: r 2, a function is SA r 1 -provably convergent (using a PR 1 derivation) if and only if it is SA r 2 -provably convergent (using a PR 2 derivation). 9 Conclusion The current work provides a contrast to earlier weak subsystems of arithmetic such as those of Buss <ref> [6] </ref> (for an overview see Krajicek [10]). The system SA 1 2 is equivalent to Buss's S 1 2 in the sense that they both prove convergence of exactly the polytime computable functions.
Reference: [7] <author> P. Clote, </author> <title> "Computation Models and Function Algebras", in Handbook of Recursion Theory, </title> <editor> Ed Griffor, ed., </editor> <publisher> Elsevier, </publisher> <year> 1996. </year> <month> - 24 </month> - 
Reference-contexts: I propose instead to directly restrict the layering of inductions. A review of earlier work in weak subsystems of arithmetic is given by Krajicek [10]. For relevant background in recursion theory and computational complexity, see Clote's survey <ref> [7] </ref>. 2 Ranking Recursions The development begins by defining a recursive function class which is equivalent to the class of primitive recursive functions. A function derivation is a tree structure with leaves labeled by initial functions and internal nodes appropriately labeled by functions defined using one of the derivation rules.
Reference: [8] <author> R. Fagin, J. Halpern, Y. Moses, M. Vardi, </author> <title> Reasoning About Knowledge, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA. </address> <year> 1995. </year>
Reference-contexts: On the one hand, this certainly seems awkward from the viewpoint of traditional approaches to logic and earlier approaches to feasible arithmetic. On the other hand, it is also precisely the kind of feature described by Fagin et. al. as desirable for reasoning about knowledge using limited computational resources <ref> [8] </ref> p. 309. The present work refers to modal concepts by reading "x = y" as "x is (feasibly, constructively) known to be equal to y". The logical connectives and quantifiers are treated classically. <p> An alternative viewpoint is that a system formalizing the idea of reasoning with limited resources shouldn't be closed under modus ponens <ref> [8] </ref>. Connections remain to be drawn between SA r 2 , SA r 1 , and earlier arithmetics. It should happen that the full systems SA 2 and SA 1 are both equivalent to Peano arithmetic, under a suitable translation of signatures and relativization to K.
Reference: [9] <author> N. Goodman, </author> <title> "Epistemic Arithmetic is a Conservative Extension of Intuitionistic Arithmetic", </title> <journal> in The Journal of Symbolic Logic, v. </journal> <volume> 49, </volume> <editor> n. </editor> <volume> 1, </volume> <month> March </month> <year> 1984. </year>
Reference-contexts: For lack of a better word I call the system "synthetic", in respect of the synthetic (constructive, non-analytic) reading of "t = t". There already is such a thing as "epistemic" arithmetic; see Goodman <ref> [9] </ref> and Shapiro [20]. A constructibility predicate Kx was defined by Lifschitz in his contribution to Shapiro's volume [19]; the semantic meaning is given by a form of realizability. A special predicate letter is used to delimit the numbers in Peano's original formulation.
Reference: [10] <author> J. Krajicek, </author> <title> Bounded Arithmetic, Propositional Logic, and Complexity Theory, </title> <publisher> Cam-bridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: I propose instead to directly restrict the layering of inductions. A review of earlier work in weak subsystems of arithmetic is given by Krajicek <ref> [10] </ref>. For relevant background in recursion theory and computational complexity, see Clote's survey [7]. 2 Ranking Recursions The development begins by defining a recursive function class which is equivalent to the class of primitive recursive functions. <p> r 1 -provably convergent (using a PR 1 derivation) if and only if it is SA r 2 -provably convergent (using a PR 2 derivation). 9 Conclusion The current work provides a contrast to earlier weak subsystems of arithmetic such as those of Buss [6] (for an overview see Krajicek <ref> [10] </ref>). The system SA 1 2 is equivalent to Buss's S 1 2 in the sense that they both prove convergence of exactly the polytime computable functions. It seems quite remarkable that this definition of polynomial time provability admits unrestricted quantifier complexity in the induction formula.
Reference: [11] <author> K. Lambert, ed., </author> <title> Philosophical Applications of Free Logic, </title> <publisher> Oxford University Press, </publisher> <year> 1991. </year>
Reference-contexts: Leivant extends this to a series of special predicate letters corresponding to ramification levels [13]. A typical constructive approach to non-convergence of functions is given in Beeson's logic of partial terms [1] p. 97. For free logic one can start with Lambert's collection <ref> [11] </ref>, particularly the contributions by Garson (p. 111) and Posy (p. 49). The present development is, as far as I know, original.
Reference: [12] <author> D. Leivant, ed., </author> <title> Logic and Computational Complexity: </title> <booktitle> International Workshop LCC '94, Indianapolis, IN, </booktitle> <address> USA, </address> <month> October </month> <year> 1994, </year> <title> Selected Papers, </title> <editor> D. Leivant, ed.; </editor> <booktitle> Lecture Notes in Computer Science 960, </booktitle> <publisher> Springer (1995). </publisher>
Reference: [13] <author> D. Leivant, </author> <title> "Intrinsic Theories and Computational Complexity", </title> <booktitle> in [12], </booktitle> <pages> p 177-194. </pages>
Reference-contexts: Thus, induction is a principle that generates the next ramification level. Ramification levels are analogous to the `tiers' that Leivant defined in order to control impredicativity <ref> [13] </ref>. In Leivant's work, the strength of the logic is constrained by the explicit syntactic presence of special unary predicates. <p> A special predicate letter is used to delimit the numbers in Peano's original formulation. Leivant extends this to a series of special predicate letters corresponding to ramification levels <ref> [13] </ref>. A typical constructive approach to non-convergence of functions is given in Beeson's logic of partial terms [1] p. 97. For free logic one can start with Lambert's collection [11], particularly the contributions by Garson (p. 111) and Posy (p. 49). <p> If one were to admit general recursion or higher-type primitive recursion, then one could define e.g. a function with exponential output length, using only a single recursion on notation. Correspondingly, such a function could be proved convergent using a single induction (see Leivant <ref> [13] </ref> lemma 3.7). It would be interesting to see whether a polytime logic is obtained when one restricts Leivant's "intrinsic theory" over W 0 and W 1 by requiring that the recursive equations be primitive recursive, rather than by requiring only existential formulas in induction rules [13]. <p> single induction (see Leivant <ref> [13] </ref> lemma 3.7). It would be interesting to see whether a polytime logic is obtained when one restricts Leivant's "intrinsic theory" over W 0 and W 1 by requiring that the recursive equations be primitive recursive, rather than by requiring only existential formulas in induction rules [13]. A distinction has been made between `zero' used as the base case of an induction and unrelated references to `zero' in the induction formula. It is not clear whether this distinction is fundamental or can be eliminated.
Reference: [14] <author> D. Leivant, </author> <title> "Ramified Recurrence and Computational Complexity I: Word recurrence and poly-time", in Feasible Mathematics II, </title> <editor> P. Clote and J. B. Remmel eds.; </editor> <publisher> Birkhauser, </publisher> <address> Boston, (1995) p. </address> <pages> 321-343. </pages>
Reference-contexts: Define the rank of derivations by: (f ) = max (f (f; i) : 1 i m f g [ f0g): Define PR r 2 = ff 2 PR 2 : (f ) rg: Rank differs from "tiers" (Leivant <ref> [14] </ref>) because rank is not a type system. This is not merely a syntactic distinction, as the present system admits more instances of composition and recursion than the stricter system in [14]. <p> f0g): Define PR r 2 = ff 2 PR 2 : (f ) rg: Rank differs from "tiers" (Leivant <ref> [14] </ref>) because rank is not a type system. This is not merely a syntactic distinction, as the present system admits more instances of composition and recursion than the stricter system in [14]. In particular, PR 2 includes all the primitive recursive functions and separates at all levels, while the system in [14] collapses to level 2. Theorem 2.1 (Bellantoni & Cook [5]) PR 1 2 consists of exactly the polynomial time computable functions. <p> This is not merely a syntactic distinction, as the present system admits more instances of composition and recursion than the stricter system in <ref> [14] </ref>. In particular, PR 2 includes all the primitive recursive functions and separates at all levels, while the system in [14] collapses to level 2. Theorem 2.1 (Bellantoni & Cook [5]) PR 1 2 consists of exactly the polynomial time computable functions. Theorem 2.2 (Bellantoni [4]) For r 2, PR r 2 = E r+1 , the Grzegorczyk class of level r + 1.
Reference: [15] <author> D. Leivant, </author> <booktitle> "Stratified Functional Programs and Computational Complexity" in Conference Record of the Twentieth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> New York, </address> <year> 1993, </year> <institution> Association for Computing Machinery. </institution>
Reference: [16] <author> A. Margaris, </author> <title> First Order Mathematical Logic, </title> <publisher> Blaisdell Publishing Co., </publisher> <year> 1967. </year>
Reference-contexts: In (KS) below, ~a and ~ b are terms with free variables ~z. The (FO) axioms are the axioms of classical first-order predicate calculus without equality (adapted from <ref> [16] </ref>). The other axioms are modifications of the usual axioms for equality.
Reference: [17] <author> E. Mendelson, </author> <title> Introduction To Mathematical Logic, </title> <publisher> Van Nostrand, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: Proof. The required ranking function assigns the first limit ordinal, !, when there is a cycle in G (). Fact: if 0 d &lt; ! then d + ! = !, although ! + d &gt; !. See Mendelson <ref> [17] </ref> p. 204. (1). For u 2 V [ f 0 i : i 0g, let P u be the set of finite-length paths terminating at u in G (). Note P u is nonempty because it contains the trivial path terminating at u .
Reference: [18] <author> D. Prawitz, </author> <title> "Ideas and Results In Proof Theory", </title> <booktitle> in Proceedings of the Second Scandi-navian Logic Symposium, </booktitle> <editor> J. E. Fenstad, ed., </editor> <booktitle> Studies in Logic and the Foundations of Mathematics, v. </booktitle> <volume> 63, </volume> <publisher> North Holland, </publisher> <year> 1971. </year>
Reference: [19] <author> S. Shapiro, ed., </author> <title> Intensional Mathematics, Studies in Logic V113, </title> <publisher> North-Holland, </publisher> <year> 1985. </year>
Reference-contexts: There already is such a thing as "epistemic" arithmetic; see Goodman [9] and Shapiro [20]. A constructibility predicate Kx was defined by Lifschitz in his contribution to Shapiro's volume <ref> [19] </ref>; the semantic meaning is given by a form of realizability. A special predicate letter is used to delimit the numbers in Peano's original formulation. Leivant extends this to a series of special predicate letters corresponding to ramification levels [13].
Reference: [20] <author> S. Shapiro, </author> <title> "Epistemic and Intuitionistic Arithmetic", </title> <booktitle> in [19]. </booktitle>
Reference-contexts: For lack of a better word I call the system "synthetic", in respect of the synthetic (constructive, non-analytic) reading of "t = t". There already is such a thing as "epistemic" arithmetic; see Goodman [9] and Shapiro <ref> [20] </ref>. A constructibility predicate Kx was defined by Lifschitz in his contribution to Shapiro's volume [19]; the semantic meaning is given by a form of realizability. A special predicate letter is used to delimit the numbers in Peano's original formulation.
References-found: 20

