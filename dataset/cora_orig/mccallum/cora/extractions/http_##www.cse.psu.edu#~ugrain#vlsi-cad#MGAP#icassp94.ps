URL: http://www.cse.psu.edu/~ugrain/vlsi-cad/MGAP/icassp94.ps
Refering-URL: http://www.cse.psu.edu/~ugrain/publications.html
Root-URL: 
Note: Copyright  
Abstract: c fl1994 IEEE. All rights reserved. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution must be obtained from the IEEE. For information on obtaining permission, send a blank email message to info.pub.permission@ieee.org. By choosing to view this document, you agree to all provisions of the copyright laws protecting it. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. M. Arnold, D. A. Buell, and E. G. Davis. </author> <title> Splash 2. </title> <booktitle> In Proc. 4th Annu. ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> pages 316-324, </pages> <year> 1992. </year>
Reference-contexts: Our algorithm uses only simple operations and data movements. Therefore it is ideal for VLSI implementation and it can be easily mapped onto fine-grain mesh processors [2, 4, 6] and FPGA-based architectures <ref> [1] </ref>. It achieves a factor of two speedup over a previous implementation of the same algorithm [11] by virtue of digit pipelining made possible by the use of signed-digit arithmetic. <p> This would require an additional phase to differentiate the high-and the low-pass computations. But it would result in a 50 % savings in the filter hardware. The algorithm is suitable for implementation on programmable fine-grain architectures such as the PAM [2], CM [4], MGAP [6], SPLASH <ref> [1] </ref> and others. The architecture presented in [11] generates two outputs every 4 clock cycles, where a clock cycle is the time taken for a complete word operation.
Reference: [2] <author> P. Bertin, D. Roncin, and J. Vuillemin. </author> <title> Introduction to Programmable Active Memories. </title> <booktitle> In Proc. of International Conference on Systolic Array Processors, </booktitle> <pages> pages 301-309, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: In this paper, we describe a digit pipelined architecture for the 1-D Discrete Wavelet Transform, assuming a digit-serial model of computation. Our algorithm uses only simple operations and data movements. Therefore it is ideal for VLSI implementation and it can be easily mapped onto fine-grain mesh processors <ref> [2, 4, 6] </ref> and FPGA-based architectures [1]. It achieves a factor of two speedup over a previous implementation of the same algorithm [11] by virtue of digit pipelining made possible by the use of signed-digit arithmetic. <p> This would require an additional phase to differentiate the high-and the low-pass computations. But it would result in a 50 % savings in the filter hardware. The algorithm is suitable for implementation on programmable fine-grain architectures such as the PAM <ref> [2] </ref>, CM [4], MGAP [6], SPLASH [1] and others. The architecture presented in [11] generates two outputs every 4 clock cycles, where a clock cycle is the time taken for a complete word operation.
Reference: [3] <author> J.F. Cavanagh. </author> <title> Digital Computer Arithmetic, Design and Implementation, chapter 4. </title> <publisher> McGraw-Hill Computer Science Series, </publisher> <year> 1984. </year>
Reference-contexts: The limit on w i is met by recoding the filter coefficient, which is a variation of Booth's recoding <ref> [3] </ref> since signed-digits have to be handled. The limits on the other values are ensured by a correction (Corr) step following the basic multiply-add (MA) step.
Reference: [4] <author> W. D. Hillis. </author> <title> The Connection Machine. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1986. </year>
Reference-contexts: In this paper, we describe a digit pipelined architecture for the 1-D Discrete Wavelet Transform, assuming a digit-serial model of computation. Our algorithm uses only simple operations and data movements. Therefore it is ideal for VLSI implementation and it can be easily mapped onto fine-grain mesh processors <ref> [2, 4, 6] </ref> and FPGA-based architectures [1]. It achieves a factor of two speedup over a previous implementation of the same algorithm [11] by virtue of digit pipelining made possible by the use of signed-digit arithmetic. <p> This would require an additional phase to differentiate the high-and the low-pass computations. But it would result in a 50 % savings in the filter hardware. The algorithm is suitable for implementation on programmable fine-grain architectures such as the PAM [2], CM <ref> [4] </ref>, MGAP [6], SPLASH [1] and others. The architecture presented in [11] generates two outputs every 4 clock cycles, where a clock cycle is the time taken for a complete word operation.
Reference: [5] <author> M. J. Irwin. </author> <title> A Digit Pipelined Dynamic Time Warp Processor. </title> <journal> IEEE Trans. on ASSP, </journal> <volume> 36(9) </volume> <pages> 1412-1422, </pages> <month> Sep </month> <year> 1988. </year>
Reference-contexts: Although it has been recognized that digit-serial and digit-pipelined processing can lead to significant speedups in a number of applications <ref> [5, 10] </ref>, the authors are not aware of any previous digit-pipelined implementations for the DWT. The target architecture is a 2-D mesh of fine-grain processing elements.
Reference: [6] <author> M. J. Irwin and R. M. Owens. </author> <title> A Micro-Grained VLSI Signal Processor. </title> <booktitle> In ICASSP-92, </booktitle> <pages> pages 641-644, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: In this paper, we describe a digit pipelined architecture for the 1-D Discrete Wavelet Transform, assuming a digit-serial model of computation. Our algorithm uses only simple operations and data movements. Therefore it is ideal for VLSI implementation and it can be easily mapped onto fine-grain mesh processors <ref> [2, 4, 6] </ref> and FPGA-based architectures [1]. It achieves a factor of two speedup over a previous implementation of the same algorithm [11] by virtue of digit pipelining made possible by the use of signed-digit arithmetic. <p> This would require an additional phase to differentiate the high-and the low-pass computations. But it would result in a 50 % savings in the filter hardware. The algorithm is suitable for implementation on programmable fine-grain architectures such as the PAM [2], CM [4], MGAP <ref> [6] </ref>, SPLASH [1] and others. The architecture presented in [11] generates two outputs every 4 clock cycles, where a clock cycle is the time taken for a complete word operation.
Reference: [7] <author> S. C. Knowles. </author> <title> VLSI Architecture for the Discrete Wavelet Transform. Elect. </title> <journal> Letters, </journal> <volume> 26(15) </volume> <pages> 1184-1185, </pages> <month> Jul </month> <year> 1990. </year>
Reference-contexts: It has been shown by Knowles <ref> [7] </ref> that only one high pass and one low pass convolver are sufficient to implement the DWT algorithm at full speed by interleaving higher octave computations with the computation of the first octave output. <p> Only half the outputs are used at every step of the wavelet transform (equations (1) and (2)). The strategy adopted in <ref> [7, 11] </ref> and this paper is to compute only these and use the intermediate time periods to compute the higher octave outputs. At a word level, our architecture (Fig 1) is similar to that in [11].
Reference: [8] <author> S. G. Mallat. </author> <title> A Theory for Multiresolution Signal Decomposition: The Wavelet Representation. </title> <journal> IEEE Trans. Pattern Analysis and Machine Intell., </journal> <volume> 11(7) </volume> <pages> 674-693, </pages> <year> 1989. </year>
Reference-contexts: 1. INTRODUCTION The DWT or multiresolution signal decomposition is becoming popular because of its effectiveness in analyzing the information content of images, image and speech compression, solving partial differential equations, etc <ref> [8] </ref>. In this paper, we describe a digit pipelined architecture for the 1-D Discrete Wavelet Transform, assuming a digit-serial model of computation. Our algorithm uses only simple operations and data movements.
Reference: [9] <author> C. Nagendra, R.M. Owens, and M.J. Irwin. </author> <title> Digit Systolic Algorithms for Fine-grain Architectures. </title> <type> Technical Report Rep. </type> <institution> CS-93-15, Dept. Comp. Sci., The Pennsylvania State University, Univeristy Park, </institution> <address> PA, </address> <month> Jun </month> <year> 1993. </year>
Reference-contexts: The basic structure of the MAC (Multiply-Accumulate Component) we use is modeled after the lsd first, O (k) time, O (k) area, k-digit fixed-point multiplier described in <ref> [9] </ref>. Both the input and the output digits flow through the module in a fully systolic fashion, using only nearest neighbor interconnect. The speed disadvantages of serial processing are overcome by pipelining at the digit level. <p> The limits on the other values are ensured by a correction (Corr) step following the basic multiply-add (MA) step. In order to interleave higher octave computations with the computation of the first octave in the same filter, the basic structure of the DP used in <ref> [9] </ref> is expanded (see Fig 2c). Only the ls DP of each filter cell is of type A. The rest are of type B.
Reference: [10] <author> K. K. Parhi. </author> <title> A Systematic Approach for Design of Digit-Serial Signal Processing Architectures. </title> <journal> IEEE Trans. on Circuits and Systems, </journal> <volume> 38(4) </volume> <pages> 358-375, </pages> <month> Apr </month> <year> 1991. </year>
Reference-contexts: Although it has been recognized that digit-serial and digit-pipelined processing can lead to significant speedups in a number of applications <ref> [5, 10] </ref>, the authors are not aware of any previous digit-pipelined implementations for the DWT. The target architecture is a 2-D mesh of fine-grain processing elements.
Reference: [11] <author> M. Vishwanath. </author> <title> Time-Frequency Distributions: Complexity, Algorithms and Architectures. </title> <type> PhD thesis, </type> <institution> The Penn State Univ., Univ. Park, </institution> <year> 1993. </year>
Reference-contexts: Our algorithm uses only simple operations and data movements. Therefore it is ideal for VLSI implementation and it can be easily mapped onto fine-grain mesh processors [2, 4, 6] and FPGA-based architectures [1]. It achieves a factor of two speedup over a previous implementation of the same algorithm <ref> [11] </ref> by virtue of digit pipelining made possible by the use of signed-digit arithmetic. Further, the system can be clocked faster since it uses only nearest neighbor connections on a mesh, thus avoiding the signal propagation delays associated with long routing paths, which is a common problem in FPGAs [13]. <p> However the suggested architecture uses large multiplexers to route the intermediate results and is therefore not suitable for VLSI. On the other hand, Vishwanath <ref> [11] </ref> uses an elegant systolic routing network, ideal for VLSI implementation. The output schedule is governed by the Recursive Pyramid Algorithm (RPA) which generates an ith octave output once every 2 i steps. <p> Only half the outputs are used at every step of the wavelet transform (equations (1) and (2)). The strategy adopted in <ref> [7, 11] </ref> and this paper is to compute only these and use the intermediate time periods to compute the higher octave outputs. At a word level, our architecture (Fig 1) is similar to that in [11]. <p> The strategy adopted in [7, 11] and this paper is to compute only these and use the intermediate time periods to compute the higher octave outputs. At a word level, our architecture (Fig 1) is similar to that in <ref> [11] </ref>. Unless otherwise specified, a cycle refers to the time taken to complete one digit operation such as digit 1 type A and B and (d) Limits on the values multiply-accumulate or copying a digit from one register to another. <p> But it would result in a 50 % savings in the filter hardware. The algorithm is suitable for implementation on programmable fine-grain architectures such as the PAM [2], CM [4], MGAP [6], SPLASH [1] and others. The architecture presented in <ref> [11] </ref> generates two outputs every 4 clock cycles, where a clock cycle is the time taken for a complete word operation.
Reference: [12] <author> R. F. Woods, S. C. Knowles, J. V. McCanny, and J. G. McWhirter. </author> <title> Systolic IIR Filters with Bit Level Pipelining. </title> <booktitle> In ICASSP-88, </booktitle> <volume> volume 4, </volume> <pages> pages 2072-2075, </pages> <month> Apr </month> <year> 1988. </year>
Reference-contexts: A DIGIT-SYSTOLIC FIR FILTER The basic operation in convolution/filtering is multiply-accumulate. In <ref> [12] </ref>, a bit-level systolic architecture for IIR filtering is given; but it assumes parallel inputs and O (k 2 ) area, where k is the operand precision.

References-found: 12

