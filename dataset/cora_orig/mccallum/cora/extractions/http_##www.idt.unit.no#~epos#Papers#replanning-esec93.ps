URL: http://www.idt.unit.no/~epos/Papers/replanning-esec93.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Title: Automatic Replanning of Task Networks for Process Model Evolution in EPOS  
Author: Chunnian Liu Reidar Conradi 
Address: Trondheim, Norway  
Affiliation: Beijing Polytechnic University, Beijing, China Norwegian Institute of Technology,  
Abstract: Evolution is crucial in Software Process Modeling (PM) and its support systems. EPOS is a PM support system, using the same Configuration Management (CM) techniques for the Process Schema (types and meta-types) as for instances of these (tasks with related products and tools etc.). Further, EPOS merges CM and PM with AI, applying AI planning to an important area of Software Engineering. Given a goal, the EPOS Planner instantiates a hierarchical task network based on the available task types and the current Product Structure. When the Product Structure or task types change, the network may have to be partially reconstructed. This paper presents a general, incremental replanning algorithm, which readjusts the existing task network to reflect the changes in the Product Structure and/or in task types. The mechanism to automatically initiate replanning upon changes is also discussed.
Abstract-found: 1
Intro-found: 1
Reference: [AIS88] <author> Jose A. Ambros-Ingerson and Sam Steel. </author> <title> Integrating planning, execution and monitoring. </title> <booktitle> In Proc. of AAAI'88, </booktitle> <pages> pages 83-88, </pages> <year> 1988. </year>
Reference-contexts: However, they only cover partly the functionality of a full-fledged PM system. 2.2 Related Work on AI Planning Typical domain-independent, non-linear planning algorithms can be found in IPEM <ref> [AIS88] </ref> and TWEAK [Cha87]. TWEAK gives a formal treatment to the subject of non-linear planning. IPEM tries to integrate planning, execution and monitoring in fine granularity, mainly for exception handling. <p> Close cooperation between the Execution Manager and the Planner is achieved by our hierarchical planning mechanism. The non-linear, core planning layer works efficiently, and actually faster than IPEM when we execute it on the Block World examples cited in <ref> [AIS88] </ref>. The Planner has also been customised by a PM-specific outer layer, offering the PM user with intelligent assistance on both the product and project level. As demonstrated in this paper, most of this planning functionality can survive in dynamically evolving Process Schemas and product structures.
Reference: [BF93] <author> Sergio Bandinelli and Alfonso Fuggetta. </author> <title> Computational Reflection in Software Process Modeling: the SLANG Approach. </title> <booktitle> In Proc. ICSE'15, </booktitle> <address> Balti-more, USA, </address> <publisher> IEEE-CS Press (forthcoming), </publisher> <month> May </month> <year> 1993. </year>
Reference-contexts: Some transition nodes can represent modification points, to be be manually expanded before executing it. The network can only evolve vertically, not horizontally, and redoing a network dynamically is probably not possible. SPADE, employing an extended Petri net formalism, has recently introduced reflection to manage process evolution <ref> [BF93] </ref>. Here, a meta Petri net will dynamically and incrementally be invoked to produce an enactable Petri net, based on existing product structures and type information. However, network generation is rather low-level and not goal-oriented, and remaking the network upon later changes is problematic.
Reference: [CFFS92] <author> Reidar Conradi, Christer Fernstrom, Alfonso Fuggetta, and Robert Snow-don. </author> <title> Towards a Reference Framework for Process Concepts. </title> <editor> In J.-C. Derni-ame (ed.): </editor> <booktitle> Proc. from EWSPT'92, </booktitle> <month> Sept. </month> <pages> 7-8, </pages> <address> Trondheim, Norway, </address> <publisher> Springer Verlag LNCS 635, </publisher> <pages> pages 3-17, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: However, several authors use "process model" only about a Process Schema (types, templates, rules). Software Processes and their Process Modeling (PM) support systems are intended to operate in human-oriented systems <ref> [CFFS92] </ref>. Their overall control and planning facilities should therefore serve as an intelligent and cooperative assistant, not as a strait-jacketing controller. During the process life-cycle, evolution (both customisation and refinement) of the Process Schema and its instances is crucial.
Reference: [Cha87] <author> David Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 333-377, </pages> <year> 1987. </year>
Reference-contexts: However, they only cover partly the functionality of a full-fledged PM system. 2.2 Related Work on AI Planning Typical domain-independent, non-linear planning algorithms can be found in IPEM [AIS88] and TWEAK <ref> [Cha87] </ref>. TWEAK gives a formal treatment to the subject of non-linear planning. IPEM tries to integrate planning, execution and monitoring in fine granularity, mainly for exception handling. Both TWEAK and IPEM address the non-linear planning problem in a domain-independent way, with examples mainly from the Block World domain (robot applications).
Reference: [CJM + 92] <author> Reidar Conradi, M. Letizia Jaccheri, Cristina Mazzi, Amund Aarsten, and Minh Ngoc Nguyen. </author> <title> Design, use, and implementation of SPELL, a language 16 for software process modeling and evolution. </title> <editor> In J.-C. Derniame (ed.): </editor> <booktitle> Proc. from EWSPT'92, </booktitle> <month> Sept. </month> <pages> 7-8, </pages> <address> Trondheim, Norway, </address> <publisher> Springer Verlag LNCS 635, </publisher> <pages> pages 167-177, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: A transaction is executed on the current database version, i.e. the visible sub-database. 3.2 The SPELL process specification language EPOSDB supports a DDL for a structurally object-oriented data model to describe entity and relationship types with simple inheritance. The client DML interface is expressed in Prolog. The SPELL <ref> [CJM + 92] </ref> process specification language unifies the DDL and DML of the underlying EPOSDB, and offers extensions in two levels. The lower SPELL layer supports behavioural and reflexive object-orientation in Prolog: schema types and meta-types stored as TypeDescrs, type-level attributes, type- and instance-level procedures, and triggers for these.
Reference: [CLJ91] <author> Reidar Conradi, Chunnian Liu, and M. Letizia Jaccheri. </author> <title> Process Modeling Paradigms. </title> <booktitle> In 7th International Software Process Workshop - ISPW'7, </booktitle> <address> Yountville (Napa Valley), CA, USA, 16-18 Oct. </address> <year> 1991. </year> <note> Proceedings forthcoming on IEEE Press, page 3 p., </note> <year> 1991. </year>
Reference-contexts: But then also the functionality is rather low-level: e.g. there are problems to distinguish a task derivation graph from a product dependency graph, and 3 Enact has often been used to cover both automatic and manual interpretation and execution. 2 to express and reason about decomposed and delayed/long-term activities; see <ref> [CLJ91] </ref> for a discussion. In MELMAC, process models are expressed as refinable FUNSOFT nets. Some transition nodes can represent modification points, to be be manually expanded before executing it. The network can only evolve vertically, not horizontally, and redoing a network dynamically is probably not possible.
Reference: [CM91] <author> Reidar Conradi and Carl Chr. Malm. </author> <title> Cooperating Transactions and Workspaces in EPOS: Design and Preliminary Implementation. </title> <editor> In Rudolf Andersen, Janis A. Bubenko jr., and Arne Stlvberg, editors, </editor> <booktitle> Proc. of CAiSE'91, the 3rd International Conference on Advanced Information Systems, </booktitle> <address> Trondheim, Norway, </address> <month> 13-15 May </month> <year> 1991, </year> <pages> pages 375-392. </pages> <publisher> LNCS 498, Springer Verlag, </publisher> <address> 578 p., </address> <year> 1991. </year>
Reference-contexts: Thus, conventional CM technology can, at least partially, be used to manage the model, guided by an explicitly modeled meta-process. However, changing a "process program" during its execution is never easy, cf. dynamic reconfiguration in telecommunication and distributed systems. EPOSDB is a client-server database with nested and cooperative transactions <ref> [CM91] </ref> against checked-out workspaces containing files. It implements a Change Oriented Versioning model (COV) [LCD + 89]. <p> A long EPOSDB transaction is associated to a Project task. Its most important subtasks are the Schema Manager (meta-process PM2), a Project Manager (in PM3) to start and finish child projects/transactions, a Cooperation Manager (mostly in PM3-PM4) with a Workspace Manager to coordinate with possibly overlapping sibling tasks <ref> [CM91] </ref>, and a Develop task (PM4) that contains the real production subtasks. We get started by manually generating a transaction, that defines a database version of the entire process model, and a local Project governing this.
Reference: [COWL91] <author> Reidar Conradi, Espen Osjord, Per H. Westby, and Chunnian Liu. </author> <title> Initial Software Process Management in EPOS. </title> <journal> Software Engineering Journal (Special Issue on Software process and its support), </journal> <volume> 6(5) </volume> <pages> 275-284, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Project customisation can be done by simple rule grouping and substitution, even if the rule space is rather flat. Process evolution can generally be supported by replanning and re-execution. 3 3 An Overview of EPOS EPOS <ref> [COWL91] </ref> is a multi-user, kernel software engineering environment, covering both Configuration Management (CM), PM and Process Management. In the next subsections we will present the EPOSDB, the SPELL language, some examples using SPELL, and the three basic EPOS PM tools: Schema Manager, Execution Manager, and Planner.
Reference: [Fer93] <author> Christer Fernstrom. </author> <title> Process WEAVER: Adding Process Support to UNIX. </title> <editor> In Leon Osterweil (ed.): </editor> <booktitle> Proc. from 2nd Int'l Conference on Software Process (ICSP'2), </booktitle> <address> Berlin. </address> <publisher> IEEE-CS Press, </publisher> <pages> pages 12-26, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Grapple [Huf89] adopts a state-based hierarchical planning approach. Processes are defined by special planning operators. An operator consists of a precondition, effects, goal (post-condition), and a constraint clause. Plans are constructed dynamically by instantiating operators. Only products, not operators or plans are stored in the database. Process WEAVER <ref> [Fer93] </ref> from Cap Gemini Innovation allows dynamic growth of enacted tasks. A task network (process model) is modeled as a set of inter-linked Petri nets that execute C++ programs, but the links cannot be dynamically restructured.
Reference: [Huf89] <author> Karen E. Huff. </author> <title> Plan-Based Intelligent Assistance: An Approach to Supporting the Software Development Process. </title> <type> PhD thesis, </type> <institution> University of Mas-sachusetts, </institution> <month> September </month> <year> 1989. </year>
Reference-contexts: IPSE 2.5 [Sno92] enables to express Process Schemas in terms of Roles and Interactions that are described by object-oriented classes. Executing roles may be evolved also by changing the network topology of interacting instances. Grapple <ref> [Huf89] </ref> adopts a state-based hierarchical planning approach. Processes are defined by special planning operators. An operator consists of a precondition, effects, goal (post-condition), and a constraint clause. Plans are constructed dynamically by instantiating operators. Only products, not operators or plans are stored in the database.
Reference: [JHO90] <author> Stanley M. Sutton Jr., Dennis Heimbigner, and Leon Osterweil. </author> <title> Language Constructs for Managing Change in Process-Centered Environments. </title> <booktitle> In Proc. of the 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <address> Irvine, California. </address> <booktitle> In ACM SIGPLAN Notices, </booktitle> <month> Dec. </month> <year> 1990, </year> <pages> pages 206-217, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Here, a meta Petri net will dynamically and incrementally be invoked to produce an enactable Petri net, based on existing product structures and type information. However, network generation is rather low-level and not goal-oriented, and remaking the network upon later changes is problematic. APPL/A <ref> [JHO90] </ref> extends Ada with persistent relations, triggers, predicates, and transaction statements. Some support for task network evolution is reported, but the compiled nature of Ada is an inconvenience. IPSE 2.5 [Sno92] enables to express Process Schemas in terms of Roles and Interactions that are described by object-oriented classes.
Reference: [JLC92] <author> M. Letizia Jaccheri, Jens-Otto Larsen, and Reidar Conradi. </author> <title> Software Process Modeling and Evolution in EPOS. </title> <booktitle> In Proc. IEEE 4th International Conference on Software Engineering and Knowledge Engineering, </booktitle> <address> Capri, Italy, </address> <month> June </month> <year> 1992. </year> <note> 13 p. </note>
Reference-contexts: As an extension of the above model, there might be a Develop parent task (Section 4). This could be decomposed into a Design task, feeding into the above Implemented task. 3.4 Schema Manager The Schema Manager <ref> [JLC92] </ref> is responsible to browse, edit, and generally manage the set of types. The type-level procedures t create, t change, and t delete are used to manipulate the Process Schema. This happens during the PM2-Design when customising the Schema, and later during PM4-Enactment for corrections and supplements. <p> Hard type changes are allowed to some degree in EPOS, using the convert procedure to convert some of the old instances. This usually involves delicate human intervention, see <ref> [JLC92] </ref> on aspects of this. Type changes can also be soft or behavioural (and complex!). These involve changing procedures/triggers or type-level attributes. Although such type changes easily can be implemented in SPELL, they may have big consequences for the Execution Manager and Planner.
Reference: [LCD + 89] <author> Anund Lie, Reidar Conradi, Tor M. Didriksen, Even-Andre Karlsson, Svein O. Hallsteinsen, and Per Holager. </author> <title> Change Oriented Versioning in a Software Engineering Database. </title> <editor> In Walter F. Tichy (Ed.): </editor> <booktitle> Proc. of the 2nd International Workshop on Software Configuration Management, </booktitle> <address> Prince-ton, USA, 25-27 Oct. </address> <year> 1989, </year> <title> 178 p. </title> <booktitle> In ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 14 (7), </volume> <pages> pages 56-65, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: However, changing a "process program" during its execution is never easy, cf. dynamic reconfiguration in telecommunication and distributed systems. EPOSDB is a client-server database with nested and cooperative transactions [CM91] against checked-out workspaces containing files. It implements a Change Oriented Versioning model (COV) <ref> [LCD + 89] </ref>. A transaction is executed on the current database version, i.e. the visible sub-database. 3.2 The SPELL process specification language EPOSDB supports a DDL for a structurally object-oriented data model to describe entity and relationship types with simple inheritance. The client DML interface is expressed in Prolog.
Reference: [Liu91] <author> Chunnian Liu. </author> <title> Software Process Planning and Execution: Coupling vs. Integration. </title> <editor> In Rudolf Andersen, Janis A. Bubenko jr., and Arne Stlvberg, editors, </editor> <booktitle> Proc. of CAiSE'91, the 3rd International Conference on Advanced Information Systems, </booktitle> <address> Trondheim, Norway, </address> <month> 13-15 May </month> <year> 1991, </year> <pages> pages 356-374. </pages> <publisher> LNCS 498, Springer Verlag, </publisher> <address> 578 p., </address> <year> 1991. </year>
Reference-contexts: It applies backward chaining and hierarchical decomposition, combined with domain-specific knowledge, to build a proper subtask network (a plan in AI terms). The planning is based on the Process Schema as a Knowledge Base (KB), and a representation/model of the Product Structure (PS) as a World State Description (WSD) <ref> [Liu91] </ref>. The paper addresses replanning of task networks, in case of evolving Process Schema and PS. There are two layers in the Planner. The inner layer or core of the Planner is a domain-independent, AI non-linear planning algorithm, resembling that in TWEAK and IPEM. <p> We are working on the extension of the mechanism to cover case 6 as well. We first recite the original planning algorithm of <ref> [Liu91] </ref>: ALGORITHM1: Non-Linear Planning 11 INPUT: I1. Composite task A. I2. Current PS. OUTPUT: Plan of A, i.e. a (sub)task network carrying out A's job. PLANNING METHOD: 1. Create AI goals G for A from its POST_STATIC/FORMALS_OUT, and PS; 2.
Reference: [Sno92] <author> Robert Snowdon. </author> <title> An example of process change. </title> <editor> In J.-C. Derniame (ed.): </editor> <booktitle> Proc. from EWSPT'92, </booktitle> <month> Sept. </month> <pages> 7-8, </pages> <address> Trondheim, Norway, </address> <publisher> Springer Verlag LNCS 635, </publisher> <pages> pages 178-195, </pages> <month> September </month> <year> 1992. </year> <month> epos/papers/replanning-esec93.tex September 6, </month> <title> 1993 17 This article was processed using the L a T E X macro package with LLNCS style 18 </title>
Reference-contexts: However, network generation is rather low-level and not goal-oriented, and remaking the network upon later changes is problematic. APPL/A [JHO90] extends Ada with persistent relations, triggers, predicates, and transaction statements. Some support for task network evolution is reported, but the compiled nature of Ada is an inconvenience. IPSE 2.5 <ref> [Sno92] </ref> enables to express Process Schemas in terms of Roles and Interactions that are described by object-oriented classes. Executing roles may be evolved also by changing the network topology of interacting instances. Grapple [Huf89] adopts a state-based hierarchical planning approach. Processes are defined by special planning operators.
References-found: 15

