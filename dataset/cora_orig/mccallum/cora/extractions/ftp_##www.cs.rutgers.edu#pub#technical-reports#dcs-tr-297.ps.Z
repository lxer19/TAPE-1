URL: ftp://www.cs.rutgers.edu/pub/technical-reports/dcs-tr-297.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: LOWER BOUNDS FOR UNIFORM CONSTANT DEPTH CIRCUITS  Written under the direction of  
Author: BY VIVEK KASHINATH GORE 
Degree: A dissertation submitted to the Graduate School|New Brunswick  in partial fulfillment of the requirements for the degree of Doctor of Philosophy  Professor Eric Allender and approved by  
Date: May, 1993  
Note: Graduate Program in Computer Science  
Address: New Jersey  Brunswick, New Jersey  
Affiliation: Rutgers, The State University of  New  
Abstract-found: 0
Intro-found: 1
Reference: [ABFR91] <author> J. Aspnes, R. Beigel, M. Furst, and S. Rudich. </author> <title> The expressive power of voting polynomials. </title> <booktitle> In Proc. 23rd ACM Symposium on Theory of Computing, </booktitle> <pages> pages 402-409, </pages> <year> 1991. </year>
Reference-contexts: They showed that constant depth circuits that use NOT gates, and AND and OR gates of unbounded fan-in need superpolynomial size for computing the PARITY (MOD 2 ) function. Their techniques were later refined by Yao [Yao85], H-astad [H-as87] and Aspnes, Beigel, Furst and Rudich <ref> [ABFR91] </ref> who improved the lower bound to exponential. Since PARITY is reducible to other functions such as MAJORITY, Multiplication and Transitive Closure [FSS84], these functions are outside AC 0 as well.
Reference: [ABHH90] <author> E. Allender, R. Beigel, U. Hertrampf, and S. Homer. </author> <title> A note on the almost-everywhere hierarchy for nondeterministic time. </title> <booktitle> In Proc. 7th Symposium on Theoretical Aspects of Computer Science, Lecture Notes in Computer Science 415, </booktitle> <pages> pages 1-11. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: For guidance, we turn to the better-understood notions of time and space complexity. Almost-everywhere complexity has been studied in a variety of settings dealing with time and space complexity <ref> [BS85, GHS91, GK90, ABHH90] </ref>, and in all instances it has been shown to be intimately connected with immunity. Recall (from Section 1.3) that an infinite set L is immune to a class C if L has no infinite subset in C. <p> Our primary interest in initiating this study was to find sets that are almost-everywhere complex to AC 0 . Since almost-everywhere complexity is well-known to be connected to immunity <ref> [BS85, GHS91, GK90, ABHH90] </ref>, it is necessary to study sets that are immune to AC 0 . In this chapter we focus on finding sets that are immune to AC 0 . It is easy to find sets with small space complexity that are immune to AC 0 .
Reference: [AG91a] <author> E. Allender and V. </author> <title> Gore. </title> <booktitle> On strong separations from AC 0 . In Proc. 8th International Symposium on Fundamentals of Computation Theory (FCT '91), Lecture Notes in Computer Science 529, </booktitle> <pages> pages 1-15. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: In Chapter 6 we show that proof techniques that relativize will not be able to prove anything about the existence or nonexistence of a strong separation between NP and AC 0 . The results in Chapters 4, 5 and 6 have appeared in <ref> [AG91a] </ref> and [AG93]. The characterization of uniform AC 0 in terms of the log-bounded rudimentary reductions is presented in Chapter 7. This result has appeared in [AG91b].
Reference: [AG91b] <author> E. Allender and V. Gore. </author> <title> Rudimentary reductions revisited. </title> <journal> Inform. Process. Lett., </journal> <volume> 40 </volume> <pages> 89-95, </pages> <year> 1991. </year>
Reference-contexts: The results in Chapters 4, 5 and 6 have appeared in [AG91a] and [AG93]. The characterization of uniform AC 0 in terms of the log-bounded rudimentary reductions is presented in Chapter 7. This result has appeared in <ref> [AG91b] </ref>.
Reference: [AG92] <author> E. Allender and V. Gore. </author> <title> A uniform circuit lower bound for the permanent. </title> <note> Submitted to SIAM J. Comput. (in review), </note> <year> 1992. </year>
Reference-contexts: The notation and preliminary definitions are presented in Chapter 2. In Chapter 3 we present the results from <ref> [AG92] </ref>, namely the lower bounds for PERM and PP. In Chapter 4 we show that P PP contains sets that are immune to uniform ACC (and hence immune to uniform AC 0 as well). This follows from the results proved in Chapter 3.
Reference: [AG93] <author> E. Allender and V. Gore. </author> <note> On strong separations from AC 0 . Accepted for publication in the DIMACS-AMS Special Volume on Complexity Theory, </note> <year> 1993. </year>
Reference-contexts: In Chapter 6 we show that proof techniques that relativize will not be able to prove anything about the existence or nonexistence of a strong separation between NP and AC 0 . The results in Chapters 4, 5 and 6 have appeared in [AG91a] and <ref> [AG93] </ref>. The characterization of uniform AC 0 in terms of the log-bounded rudimentary reductions is presented in Chapter 7. This result has appeared in [AG91b].
Reference: [AH90] <author> E. Allender and U. Hertrampf. </author> <title> On the power of uniform families of constant depth threshold circuits. </title> <booktitle> In Proc. 15th International Symposium on Mathematical Foundations of Computer Science, Lecture Notes in Computer Science 452. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Additional char acterizations of AC 0 may be found in [Clo90]. The lower bound results for AC 0 mentioned in the Section 1.2 apply to nonuniform AC 0 and hence to uniform AC 0 as well. Allender and Hertrampf <ref> [AH90] </ref> showed that the result in [All89a] also holds in the uniform setting. In Chapter 3 we show that the simulation of Beigel and Tarui [BT91] holds in the uniform setting as well. We define a notion of uniformity to deal with circuit families of subexponential size. <p> Proof. By Lemma 3.13, we may assume that fC n g is nice. Let n be fixed. The transformation C n ! D n is carried out by performing the following sequence of steps: * By a construction in the proof of Lemma 13 in <ref> [AH90] </ref>, one can replace the AND and OR gates in the circuit by nice depth 6 probabilistic circuits with MOD 2 gates and small fan-in AND gates. (This construction is based on an idea of Valiant and Vazirani in [VV86]; similar constructions may be found in work by Toda [Tod91] and <p> We then show that PrDtime ((log n) O (1) ) is contained in a small subclass of P PP , such that P PP contains sets that are immune to this subclass. Lemma 4.5 AC 0 BPDtime ((log n) O (1) ). Proof. It is shown in <ref> [AH90] </ref> that every language in uniform AC 0 is accepted by a uniform family of depth two probabilistic circuits of size 2 (log n) O (1) , consisting of a single PARITY gate on level two, and AND gates of fan-in (log n) O (1) on level one, where the circuits <p> Although <ref> [AH90] </ref> claims only Dspace ((log n) O (1) ) uniformity for these circuits, an examination of the proof of [AH90] shows that the circuits are uniform according to the notion of uniformity in Definition 2.13 as well. <p> Although <ref> [AH90] </ref> claims only Dspace ((log n) O (1) ) uniformity for these circuits, an examination of the proof of [AH90] shows that the circuits are uniform according to the notion of uniformity in Definition 2.13 as well.
Reference: [Ajt83] <author> M. Ajtai. </author> <title> 1 1 -formulae on finite structures. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 24 </volume> <pages> 1-48, </pages> <year> 1983. </year>
Reference-contexts: It is easy to see that addition can be done using a depth three AC 0 circuit family. AC 0 circuit families are also known for many regular and context free languages. However, the lower bounds for AC 0 suggest that it is a very tiny complexity class. Ajtai <ref> [Ajt83] </ref> and Furst, Saxe and Sipser [FSS84], in their quest to separate the levels of the polynomial hierarchy by oracles, proved the first lower bounds for AC 0 .
Reference: [AKS83] <author> M. Ajtai, J. Komlos, and E. Szemeredi. </author> <title> Sorting in c log n parallel steps. </title> <journal> Combinatorica, </journal> <volume> 3 </volume> <pages> 1-19, </pages> <year> 1983. </year>
Reference-contexts: This implies that TC 0 NC 1 . In fact, monotone circuits of polynomial size and O (log n) depth for computing T n k are implied by the sorting network due to Ajtai, Komlos and Szemeredi <ref> [AKS83] </ref>. Using the intuition of Toda's result [Tod91] and some known connections between the polynomial hierarchy and constant depth circuits [FSS84], Allender [All89a] showed that every language in AC 0 can be recognized by depth three threshold circuits of size 2 (log n) O (1) .
Reference: [All89a] <author> E. Allender. </author> <title> A note on the power of threshold circuits. </title> <booktitle> In Proc. 30th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 580-584, </pages> <year> 1989. </year>
Reference-contexts: Using the intuition of Toda's result [Tod91] and some known connections between the polynomial hierarchy and constant depth circuits [FSS84], Allender <ref> [All89a] </ref> showed that every language in AC 0 can be recognized by depth three threshold circuits of size 2 (log n) O (1) . <p> Additional char acterizations of AC 0 may be found in [Clo90]. The lower bound results for AC 0 mentioned in the Section 1.2 apply to nonuniform AC 0 and hence to uniform AC 0 as well. Allender and Hertrampf [AH90] showed that the result in <ref> [All89a] </ref> also holds in the uniform setting. In Chapter 3 we show that the simulation of Beigel and Tarui [BT91] holds in the uniform setting as well. We define a notion of uniformity to deal with circuit families of subexponential size.
Reference: [All89b] <author> E. Allender. </author> <title> P-uniform circuit complexity. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 36 </volume> <pages> 912-928, </pages> <year> 1989. </year>
Reference-contexts: Pippenger [Pip79] and Ruzzo [Ruz81] have given alternate characterizations of NC. Another related class that has been considered is the P-uniform version of NC called PUNC. Allender <ref> [All89b] </ref> studied this class and provided alternate characterizations in terms of alternating Turing machines and other parallel machines. He provides evidence that NC does not adequately model the notion of "feasible parallelism" and argues that PUNC is a better candidate.
Reference: [All89c] <author> E. Allender. </author> <title> Some consequences of the existence of pseudorandom generators. </title> <journal> J. Comput. System Sci., </journal> <volume> 39(1) </volume> <pages> 101-124, </pages> <year> 1989. </year> <month> 91 </month>
Reference-contexts: It is easy to see that using f we can generate an infinite subset of L that is P-printable. The following paragraphs introduce the notion of time-bounded Kolmogorov complexity that we use. The definitions below were introduced in <ref> [Lev84, All89c] </ref>; more formal definitions and background may be found there and in [All92]. Definition 2.20 Kt (x) = minfjyj + log t : M u (y) = x in at most t stepsg where M u is a "universal" Turing machine. Let L f0; 1g fl .
Reference: [All92] <author> E. Allender. </author> <title> Applications of time-bounded Kolmogorov complexity in complexity theory. </title> <editor> In O. Watanabe, editor, </editor> <title> Kolmogorov Complexity: Theory and Relations to Computational Complexity. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <note> To appear. </note>
Reference-contexts: The following paragraphs introduce the notion of time-bounded Kolmogorov complexity that we use. The definitions below were introduced in [Lev84, All89c]; more formal definitions and background may be found there and in <ref> [All92] </ref>. Definition 2.20 Kt (x) = minfjyj + log t : M u (y) = x in at most t stepsg where M u is a "universal" Turing machine. Let L f0; 1g fl . Then K L (n) = minfKt (x) : x 2 L =n g. <p> Proposition 2.3 * Every NE-predicate is E-solvable iff for every set L in P, K L (n) = O (log n). * No NE-predicate is E-immune iff for every set L in P, K L (n) 6= !(log n). Proof. Follows from Theorem 6 in <ref> [All92] </ref> (see also [AW88, Theorem 4]). The above proposition holds relative to an arbitrary oracle, and this fact is used in the proof of Proposition 6.3. 2.5 Rudimentary Reductions In the following paragraphs, we present the definitions of Jones [Jon75] to define the class of space-bounded rudimentary predicates and reductions.
Reference: [AR88] <author> E. Allender and R. Rubinstein. </author> <title> P-printable sets. </title> <journal> SIAM J. Comput., </journal> <volume> 17(6) </volume> <pages> 1193-1202, </pages> <year> 1988. </year>
Reference-contexts: Definition 2.16 A set L is called P-printable if the function 1 n 7! L =n is computable in polynomial time. P-printable sets were defined by Hartmanis and Yesha [HY84]; they have been studied in detail by Allender and Rubinstein <ref> [AR88] </ref>. An important lemma about P-printable sets that will be useful is the following: Lemma 2.1 Every infinite set in P has an infinite P-printable subset only if every infinite set in NP has an infinite subset in P-uniform AC 0 . Proof. Theorem 7 in [AR88] says that every infinite <p> by Allender and Rubinstein <ref> [AR88] </ref>. An important lemma about P-printable sets that will be useful is the following: Lemma 2.1 Every infinite set in P has an infinite P-printable subset only if every infinite set in NP has an infinite subset in P-uniform AC 0 . Proof. Theorem 7 in [AR88] says that every infinite set in P has an infinite P-printable subset iff every infinite set in NP has an infinite P-printable subset. Note that every P-printable set is in P-uniform AC 0 . Hence, the lemma follows.
Reference: [AW88] <author> E. Allender and O. Watanabe. </author> <title> Kolmogorov complexity and degrees of tally sets. </title> <booktitle> In Proc. 3rd Structure in Complexity Theory Conference, </booktitle> <pages> pages 102-111, </pages> <year> 1988. </year>
Reference-contexts: Let E-solvable informally (formal definitions are given in Chapter 2) denote the notion "solvable in deterministic time 2 O (n) ." The question "Is every NE-predicate E-solvable?" is the natural exponential time analog of the so called witness finding question regarding NP and P. It was studied initially by <ref> [AW88] </ref>. Even though the P = NP question is usually formulated as a question about the complexity of recognizing languages, it is equivalent to the question of witness finding (e.g., finding a satisfying assignment, instead of merely reporting that a satisfying assignment exists). <p> Call an NE-predicate E-immune if it is immune to Dtime (2 O (n) ). NE-predicates and P-printability are related by the following lemma by Allender and Watanabe <ref> [AW88] </ref>: Lemma 2.2 Every infinite set in P has an infinite P-printable subset () No NE predicate is E-immune. Proof. ()) Suppose every infinite set in P has an infinite P-printable subset. Let R be an NE-predicate defined by the NE machine M that accepts an infinite language. <p> Proposition 2.3 * Every NE-predicate is E-solvable iff for every set L in P, K L (n) = O (log n). * No NE-predicate is E-immune iff for every set L in P, K L (n) 6= !(log n). Proof. Follows from Theorem 6 in [All92] (see also <ref> [AW88, Theorem 4] </ref>). The above proposition holds relative to an arbitrary oracle, and this fact is used in the proof of Proposition 6.3. 2.5 Rudimentary Reductions In the following paragraphs, we present the definitions of Jones [Jon75] to define the class of space-bounded rudimentary predicates and reductions.
Reference: [Bab87] <author> L. Babai. </author> <title> Random oracles separate PSPACE from the polynomial time hierarchy. </title> <journal> Inform. Process. Lett., </journal> <volume> 26 </volume> <pages> 51-53, </pages> <year> 1987. </year>
Reference-contexts: Also, it is known that the PARITY language is Church-random with respect to AC 0 <ref> [Cai89, Bab87, H-as87] </ref>. However, even languages that are Church-random may have infinitely many "easy" special-case inputs. For example, any string of the form 0 n is trivially not in the PARITY language, and any string of the form 0 n 1 is trivially in the language.
Reference: [Bar86] <editor> D. Barrington. </editor> <booktitle> Bounded-width polynomial-size branching programs recognize exactly those languages in NC 1 . In Proc. 18th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 1-5, </pages> <year> 1986. </year>
Reference-contexts: The class of languages computed by these circuit families is called ACC. ACC is an acronym for "AC 0 with counters", where the various MOD gates are the counters. This class was first mentioned implicitly by Barrington <ref> [Bar86] </ref> (see also [Bar89]), who was studying the classes of languages recognized by group programs over different group structures. Barrington and Therien [BT88] showed that ACC is equal to the class of languages recognized by polynomial length programs over solvable monoids.
Reference: [Bar89] <author> D. Barrington. </author> <title> Bounded-width polynomial-size branching programs recognize exactly those languages in NC 1 . J. </title> <journal> Comput. System Sci., </journal> <volume> 38(1) </volume> <pages> 150-164, </pages> <year> 1989. </year>
Reference-contexts: The class of languages computed by these circuit families is called ACC. ACC is an acronym for "AC 0 with counters", where the various MOD gates are the counters. This class was first mentioned implicitly by Barrington [Bar86] (see also <ref> [Bar89] </ref>), who was studying the classes of languages recognized by group programs over different group structures. Barrington and Therien [BT88] showed that ACC is equal to the class of languages recognized by polynomial length programs over solvable monoids. <p> 2.11 (<ref> [MT89, Bar89, BT88] </ref>) A language L is in ACC if there exists a positive integer m such that L is recognized by a family of constant depth polynomial size circuits containing NOT gates, and unbounded fan-in AND, OR and MOD m gates. ACC was first defined and studied in [MT89, Bar89, BT88] under the name ACC 0 . Yao [Yao90] defines ACC a little differently; he allows a fixed finite set of moduli S instead of a single modulus m.
Reference: [Bar90] <author> D. Barrington. </author> <title> Extensions of an idea of McNaughton. </title> <journal> Math. Sys. Theory, </journal> <volume> 23 </volume> <pages> 147-164, </pages> <year> 1990. </year>
Reference-contexts: The use of this framework may be traced back to McNaughton [MP71] (see also <ref> [Bar90] </ref>). Immerman and Fagin are primarily responsible for the application of this tool to complexity theory. We provide a sketch of the relevant information on the first order framework below. For more detailed definitions and background information, see [Imm83, Imm87, Imm89].
Reference: [Bar92] <author> D. Barrington. </author> <title> Quasipolynomial size circuit classes. </title> <booktitle> In Proc. 7th Structure in Complexity Theory Conference, </booktitle> <pages> pages 86-93, </pages> <year> 1992. </year>
Reference-contexts: We define a notion of uniformity to deal with circuit families of subexponential size. A similar notion has been defined by Venkateswaran in [Ven92] where he gives a uniform circuit characterization of NP and other classes. In <ref> [Bar92] </ref>, Barrington shows that the notion of uniformity introduced for constant depth circuits of polynomial size in [BIS90] can be extended to quasipolynomial (2 (logn) O (1) ) size as well. This extended notion of uniformity coincides with the one we use. <p> In addition to observing that there are sets in 1 In [BT91], the class SYM + was called SYMMC. The name SYM + has been suggested by Barrington in his recent survey <ref> [Bar92] </ref>. Beigel, Tarui and Toda have used the name SYM + in their recent paper [BTT92] as well. 87 superlogarithmic deterministic space classes and superpolynomial deterministic time classes, we have also shown that there are sets in P PP that are immune to AC 0 .
Reference: [BCGR92] <author> S. Buss, S. Cook, A. Gupta, and V. Ramachandran. </author> <title> An optimal parallel algorithm for formula evaluation. </title> <journal> SIAM J. Comput., </journal> <volume> 21(4) </volume> <pages> 755-780, </pages> <year> 1992. </year>
Reference-contexts: We shall hereafter refer to this notion as dlogtime-uniformity. They show that dlogtime-uniform NC 1 is in fact equal to NC 1 -uniform NC 1 . They also give persuasive arguments (see also <ref> [BCGR92] </ref>) to show that dlogtime-uniformity is the right notion to study AC 0 and ACC. In particular, dlogtime-uniform AC 0 is known to have many different characterizations demonstrating its robustness. <p> This convention is necessary to allow machines with sublinear running times to have access to all of the input. Consult <ref> [BIS90, BCGR92] </ref> for examples illustrating how these machines compute. In order to prove some of the results in Chapter 3, we make use of a slightly enhanced version of the ATM. <p> This convention has been introduced to simplify the proof. (It is worthwhile to note that the input length can be computed deterministically in logarithmic time (see <ref> [BCGR92] </ref>) but this requires multiple accesses to the input along a given computation path.) We consider ATMs that access their input only at the leaves. (That is, the only configurations that depend on the input are halting configurations.
Reference: [BCH84] <author> P. Beame, S. Cook, and H. </author> <title> Hoover. Log depth circuits for division and related problems. </title> <booktitle> In Proc. 25th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 1-11, </pages> <year> 1984. </year>
Reference-contexts: Division and some related problems are known to have P-uniform NC 1 circuits by the results of Beame, Cook and Hoover <ref> [BCH84] </ref>. It is still not known if Division has logspace-uniform NC 1 circuits. Barrington, Immerman and Straubing [BIS90] investigated a variety of notions of uniformity for studying subclasses of NC 1 .
Reference: [BDG89] <author> J. Balcazar, J. Daz, and J. Gabarro. </author> <title> Structural Complexity II. </title> <editor> In W. Brauer, G. Rozenberg, and A. Salomaa, editors, </editor> <booktitle> EATCS Monographs on Theoretical Computer Science, </booktitle> <volume> volume 22. </volume> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: We assume that the reader is familiar with the basic concepts like computation trees, accepting subtrees and time and space bounded ATM's. Results and precise definitions relating to alternation may be found in [CKS81] and <ref> [BDG89] </ref>. The polynomial hierar chy (PH) is the class of languages accepted by ATM's that run in polynomial time and make a constant number of alternations.
Reference: [BFL91] <author> L. Babai, L. Fortnow, and C. Lund. </author> <title> Non-deterministic exponential time has two-prover interactive protocols. </title> <journal> Computational Complexity, </journal> <volume> 1 </volume> <pages> 3-40, </pages> <year> 1991. </year>
Reference-contexts: Thus it may seem contradictory to assume simultaneously that deterministic time 2 O (n) is powerful enough to solve every NE-predicate. Note also that if E = RUD, then the polynomial hierarchy 14 collapses. However, the non-relativizing proof techniques developed in <ref> [FKLN90, Sha90, BFL91] </ref> have not been shown to be relevant for questions concerning deterministic and nondeterministic time classes; new non-relativizing proof techniques are still needed to answer these questions. <p> We should emphasize that the results in this chapter do not indicate that the problem of strongly separating NP from AC 0 is hard. We hope that the new proof techniques developed in [FKLN90], [Sha90] and <ref> [BFL91] </ref> can be used to answer this question. We think that our oracle results can point to some of the problems that would have to be overcome in answering this question in the unrelativized setting.
Reference: [BGS75] <author> T. Baker, J. Gill, and R. Solovay. </author> <title> Relativizations of the P =? NP question. </title> <journal> SIAM J. Comput., </journal> <volume> 4 </volume> <pages> 431-442, </pages> <year> 1975. </year>
Reference-contexts: One of the earliest and ground breaking results was proved by Baker, Gill and Solovay <ref> [BGS75] </ref> who showed the existence of oracles A and B such that P A = NP A and P B 6= NP B . This shows that any technique that relativizes will not be able to resolve the P vs. NP question.
Reference: [BIS90] <author> D. Barrington, N. Immerman, and H. Straubing. </author> <title> On uniformity within NC 1 . J. </title> <journal> Comput. System Sci., </journal> <volume> 41 </volume> <pages> 274-306, </pages> <year> 1990. </year>
Reference-contexts: Division and some related problems are known to have P-uniform NC 1 circuits by the results of Beame, Cook and Hoover [BCH84]. It is still not known if Division has logspace-uniform NC 1 circuits. Barrington, Immerman and Straubing <ref> [BIS90] </ref> investigated a variety of notions of uniformity for studying subclasses of NC 1 . One of the important notions that they studied is based on deterministic logarithmic time and the alternating logarithmic time hierarchy of Sipser [Sip83]. <p> Ruzzo introduced a similar notion of uniformity in [Ruz81]. He defines the direct connection language of a circuit family and the notion of uniformity requires that this language be decidable by an alternating Turing machine running in logarithmic time. The condition in <ref> [BIS90] </ref> is more restrictive and it requires that the direct connection language be decidable by a deterministic machine running in logarithmic time. We shall hereafter refer to this notion as dlogtime-uniformity. They show that dlogtime-uniform NC 1 is in fact equal to NC 1 -uniform NC 1 . <p> They also give persuasive arguments (see also [BCGR92]) to show that dlogtime-uniformity is the right notion to study AC 0 and ACC. In particular, dlogtime-uniform AC 0 is known to have many different characterizations demonstrating its robustness. Theorem 1.1 <ref> [BIS90] </ref> The following classes of sets are equal: * The class of sets accepted by dlogtime-uniform circuits with NOT gates, AND and OR gates of unbounded fan-in, constant depth and polynomial size. 8 * The class of sets accepted in O (1) time on a CRAM 4 with polynomially many processors. <p> A similar notion has been defined by Venkateswaran in [Ven92] where he gives a uniform circuit characterization of NP and other classes. In [Bar92], Barrington shows that the notion of uniformity introduced for constant depth circuits of polynomial size in <ref> [BIS90] </ref> can be extended to quasipolynomial (2 (logn) O (1) ) size as well. This extended notion of uniformity coincides with the one we use. In the same paper, Barrington provides a different proof that shows that the simulation of Beigel and Tarui [BT91] holds for uniform circuits. <p> The proof is presented in Chapter 7 and uses some of the alternate characterizations of AC 0 given in <ref> [BIS90] </ref>. This provides further evidence that the notion of dlogtime-uniformity proposed by [BIS90] for studying small complexity classes such as AC 0 is indeed the "right" notion. 1.7 Outline The rest of the thesis is organized as follows. The notation and preliminary definitions are presented in Chapter 2. <p> The proof is presented in Chapter 7 and uses some of the alternate characterizations of AC 0 given in <ref> [BIS90] </ref>. This provides further evidence that the notion of dlogtime-uniformity proposed by [BIS90] for studying small complexity classes such as AC 0 is indeed the "right" notion. 1.7 Outline The rest of the thesis is organized as follows. The notation and preliminary definitions are presented in Chapter 2. <p> This convention is necessary to allow machines with sublinear running times to have access to all of the input. Consult <ref> [BIS90, BCGR92] </ref> for examples illustrating how these machines compute. In order to prove some of the results in Chapter 3, we make use of a slightly enhanced version of the ATM. <p> For example, the sentence (9i)(8j)(:(i &lt; j) _ X (j)) ^ (:(j &lt; i) _ :X (j)) defines the language 1 fl 0 fl . Let FO denote the set of all languages expressible in first order logic in this way. Theorem 2.4 <ref> [BIS90] </ref> AC 0 = LH = FO. Two minor complications arise from the statement of Theorem 2.4: 1. Alternating Turing machines can accept input over any alphabet , whereas FO and AC 0 are classes of languages over the alphabet f0; 1g. <p> Then we say that f is in LH (or FO) if A f is in LH (or FO). It has been noticed by many authors (e.g., <ref> [BIS90] </ref>) that f is computed by AC 0 circuits iff A f 2 AC 0 . 2 1 That is, there is some polynomial p such that for all x; jf (x)j p (jxj). 2 Again, for equivalence to hold, the output of the circuit must be interpreted in such a <p> Therefore, un (L) 2 S k k Time (log n). Since AC 0 = S k k Time (log n) by the result of <ref> [BIS90] </ref>, un (L) 2 AC 0 . (() Suppose there exists an alternating Turing machine M that accepts un (L) in O (log n) time and makes a constant number of alternations. Consider the machine M 0 that behaves as follows: On input n, M 0 starts simulating M . <p> Using the characterization of AC 0 in terms of first-order logic as presented by <ref> [BIS90] </ref>, it is clear that L 2 is in AC 0 . It is easy to see how to generalize this to show that each L k is in AC 0 . <p> Thus Jones was probably the first to study this complexity class, which has loomed large in importance in recent years. We believe that this augments the (already compelling) arguments of <ref> [BIS90] </ref> in favor of using the dlogtime-uniformity condition when studying small circuit complexity classes. It is instructive to note some of the open questions posed by Jones in [Jon75].
Reference: [BNS89] <author> L. Babai, N. Nisan, and M. Szegedy. </author> <title> Multiparty protocols and logspace-hard pseudorandom sequences. </title> <booktitle> In Proc. 21st ACM Symposium on Theory of Computing, </booktitle> <pages> pages 1-11, </pages> <year> 1989. </year> <month> 92 </month>
Reference-contexts: However, Hajnal, Maass et al [HMP + 87] have shown that for threshold circuits of polynomial size, depth three is more powerful than depth two. H-astad and Goldmann [HG90] have proved that computing the "generalized inner product function" (considered in <ref> [BNS89] </ref>) with depth three threshold circuits requires exponential size if the bottom level fan-in is restricted to be &lt; 1 2 log n. As far as the relationship between TC 0 and NC 1 is concerned, we have competing conjectures.
Reference: [Boo78] <author> R. </author> <title> Book. Simple representations of certain classes of languages. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 25 </volume> <pages> 23-31, </pages> <year> 1978. </year>
Reference-contexts: Let E = Dtime (2 O (n) ), NE = Ntime (2 O (n) ) and let RUD denote the class of Rudimentary sets. RUD is the linear time analog of the polynomial hierarchy. It was defined by Smullyan [Smu61] and has been studied extensively (see, e.g., <ref> [Wra78, Lip78, Boo78, PD80, Vol83] </ref>). One result of [Wra78] shows that the rudimentary sets can also be characterized in terms of linear-time nondeterministic oracle Turing machines, in analogy to the usual definition of the polynomial hierarchy.
Reference: [Bor77] <author> A. Borodin. </author> <title> On relating time and space to size and depth. </title> <journal> SIAM J. Com-put., </journal> <volume> 6(4) </volume> <pages> 733-743, </pages> <year> 1977. </year>
Reference-contexts: This gives us a weak uniformity condition that can be strengthened by placing resource bounds on the Turing machine. The notion of uniform circuit complexity was suggested by Borodin <ref> [Bor77] </ref>. Ruzzo 3 A symmetric function is a Boolean function whose output depends only on the number of 1's in the input. A symmetric gate computes a symmetric function. 6 [Ruz81] argued that uniform circuit complexity is a reasonable model of parallel complexity.
Reference: [BS85] <author> J. Balcazar and U. Schoning. </author> <title> Bi-immune sets for complexity classes. </title> <journal> Math. Sys. Theory, </journal> <volume> 18 </volume> <pages> 1-10, </pages> <year> 1985. </year>
Reference-contexts: For guidance, we turn to the better-understood notions of time and space complexity. Almost-everywhere complexity has been studied in a variety of settings dealing with time and space complexity <ref> [BS85, GHS91, GK90, ABHH90] </ref>, and in all instances it has been shown to be intimately connected with immunity. Recall (from Section 1.3) that an infinite set L is immune to a class C if L has no infinite subset in C. <p> Recall (from Section 1.3) that an infinite set L is immune to a class C if L has no infinite subset in C. For example, in <ref> [BS85] </ref> it is shown that for any time-constructible function T , a set L is almost-everywhere complex with respect to Dtime (T (n)) if and only if both L and its complement are immune to Dtime (T (n)). <p> Our primary interest in initiating this study was to find sets that are almost-everywhere complex to AC 0 . Since almost-everywhere complexity is well-known to be connected to immunity <ref> [BS85, GHS91, GK90, ABHH90] </ref>, it is necessary to study sets that are immune to AC 0 . In this chapter we focus on finding sets that are immune to AC 0 . It is easy to find sets with small space complexity that are immune to AC 0 .
Reference: [BT88] <author> D. Barrington and D. Therien. </author> <title> Finite monoids and the fine structure of NC 0 . J. </title> <journal> Assoc. Comput. Mach., </journal> <volume> 35(4) </volume> <pages> 941-952, </pages> <year> 1988. </year>
Reference-contexts: ACC is an acronym for "AC 0 with counters", where the various MOD gates are the counters. This class was first mentioned implicitly by Barrington [Bar86] (see also [Bar89]), who was studying the classes of languages recognized by group programs over different group structures. Barrington and Therien <ref> [BT88] </ref> showed that ACC is equal to the class of languages recognized by polynomial length programs over solvable monoids. Proving lower bounds for ACC has not been easy at all; it is consistent with our knowledge that an ACC circuit family can compute the SATISFIABILITY problem. <p> 2.11 (<ref> [MT89, Bar89, BT88] </ref>) A language L is in ACC if there exists a positive integer m such that L is recognized by a family of constant depth polynomial size circuits containing NOT gates, and unbounded fan-in AND, OR and MOD m gates. ACC was first defined and studied in [MT89, Bar89, BT88] under the name ACC 0 . Yao [Yao90] defines ACC a little differently; he allows a fixed finite set of moduli S instead of a single modulus m.
Reference: [BT91] <author> R. Beigel and J. Tarui. </author> <booktitle> On ACC. In Proc. 32nd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 783-792, </pages> <year> 1991. </year>
Reference-contexts: Beigel and Tarui <ref> [BT91] </ref> improved Yao's result by showing deterministic (instead of probabilistic) circuits of the above kind for ACC. These results imply that all of ACC can be computed by depth three threshold circuits of size 2 (log n) O (1) . <p> These results imply that all of ACC can be computed by depth three threshold circuits of size 2 (log n) O (1) . Green, Kobler and Toran [GKT92] have improved upon Beigel and Tarui's <ref> [BT91] </ref> result by showing that the top gate in the depth two circuit can be a fixed symmetric gate, which they call a MidBit gate. 1.3 Uniform Circuits So far we have talked about circuits in their most general form; this is usually referred to as the nonuniform version. <p> Allender and Hertrampf [AH90] showed that the result in [All89a] also holds in the uniform setting. In Chapter 3 we show that the simulation of Beigel and Tarui <ref> [BT91] </ref> holds in the uniform setting as well. We define a notion of uniformity to deal with circuit families of subexponential size. A similar notion has been defined by Venkateswaran in [Ven92] where he gives a uniform circuit characterization of NP and other classes. <p> This extended notion of uniformity coincides with the one we use. In the same paper, Barrington provides a different proof that shows that the simulation of Beigel and Tarui <ref> [BT91] </ref> holds for uniform circuits. He shows that the result of Green, Kobler and Toran [GKT92] holds in the uniform setting as well. In this thesis we deal exclusively with uniform circuits. We use different notions of uniformity, but they are all derived from the dlogtime-uniformity discussed above. <p> We also show that there are languages in PP and C = P that cannot be computed by uniform ACC type circuits of subsubexponential size. Our lower bound results use the techniques developed by Beigel and Tarui <ref> [BT91] </ref>, Yao [Yao90] and Toda [Tod91]. As a corollary, we also get the important result that uniform ACC is properly contained in PP (as well as C = P). <p> To prove the main tool, we will first use the results of Toda [Tod91], Yao [Yao90] and Beigel and Tarui <ref> [BT91] </ref> to convert a circuit family in ACC (subexp) into an equivalent circuit family of depth two circuits with a symmetric gate at level two, AND gates of small fan-in at level one and the input gates at level zero. <p> The above theorem is the most important part of the argument and most of the chapter hereafter is devoted to its proof. The proof uses techniques developed by Beigel and Tarui <ref> [BT91] </ref>, Yao [Yao90] and Toda [Tod91]. The reader who is willing to accept the fact that the construction of [BT91] can be carried out uniformly can simply skip Section 3.2 (where Theorem 3.1 is proved). <p> The proof uses techniques developed by Beigel and Tarui <ref> [BT91] </ref>, Yao [Yao90] and Toda [Tod91]. The reader who is willing to accept the fact that the construction of [BT91] can be carried out uniformly can simply skip Section 3.2 (where Theorem 3.1 is proved). The rest of this section assumes that Theorem 3.1 is true, and uses it to prove our main results. We start with the proof of the main tool. <p> The definitions, lemmas and theorems presented in this section all lead up to the proof. Since the proof of Theorem 3.1 is fairly involved, we first start with a very high level outline. Outline: Since our goal in this section is to prove that the construction of <ref> [BT91] </ref> can be done uniformly, it is necessary to prove some preliminary results about uniform constant depth circuits. To that end, we define the notions of "clean" and "nice" circuits, which are circuits that have certain properties that we find essential in presenting our uniformity results. <p> Suppose C 2 n contains a MOD p e gate G for some prime p and e &gt; 1. This step uses the following result (for references, see e.g. <ref> [BT91] </ref>): x is congruent to 0 (mod p e ) if and only if each of x; x x x gruent to 0 (mod p). <p> Proof. Our proof again follows the outline given in <ref> [BT91] </ref>, where we must be careful to see that the transformation can be done uniformly. Suppose G is an AND gate (the output gate of some C n;t that has r MOD p gates G 1 ; G 2 ; : : : ; G r as inputs). <p> Then there is an equivalent SYMACC circuit family fD n g satisfying the same conditions, such that each path from the output gate to an input gate passes through k 1 MOD gates. Proof. Our proof follows the outline in <ref> [BT91] </ref>, using techniques developed in [Yao90, Tod91]. <p> Note that k (n) is computable in time (log s (n)) O (1) . For the rest of this discussion, fix n, and let k denote k (n). It is shown in <ref> [BT91] </ref> that the polynomial P k defined by P k (y) = (1) k+1 (y 1) k ( j=0 j y j ) + 1 satisfies the property that for every m 1 and y 0, y 0 (mod m) ) P k (y) 0 (mod m k ) y 1 <p> The proofs are based on a simulation of ACC given by Beigel and Tarui in <ref> [BT91] </ref>. We have shown how to carry out this simulation in the setting of uniform circuits. Some of the obvious open problems are: * Is uniformity really necessary? Our lower bound proofs work only in the uniform setting. <p> Beigel and Tarui <ref> [BT91] </ref> showed 1 that ACC SYM + in the nonuniform setting. The techniques used in the proof of Theorem 3.1 enable us to show that ACC SYM + holds in the setting of uniform circuits as well. <p> In this thesis we also began an investigation into the immunity properties of AC 0 and other circuit complexity classes. In addition to observing that there are sets in 1 In <ref> [BT91] </ref>, the class SYM + was called SYMMC. The name SYM + has been suggested by Barrington in his recent survey [Bar92].
Reference: [BTT92] <author> R. Beigel, J. Tarui, and S. </author> <title> Toda. On probabilistic ACC circuits with an exact-threshold output gate. </title> <booktitle> In Proc. 3rd Annual International Symposium on Algorithms and Computation, Lecture Notes in Computer Science 650, </booktitle> <pages> pages 420-429. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: In addition to observing that there are sets in 1 In [BT91], the class SYM + was called SYMMC. The name SYM + has been suggested by Barrington in his recent survey [Bar92]. Beigel, Tarui and Toda have used the name SYM + in their recent paper <ref> [BTT92] </ref> as well. 87 superlogarithmic deterministic space classes and superpolynomial deterministic time classes, we have also shown that there are sets in P PP that are immune to AC 0 . In fact, we have shown that P PP contains sets that are immune to ACC (subexp) (Theorem 4.3). <p> In fact, we have shown that P PP contains sets that are immune to ACC (subexp) (Theorem 4.3). Corollary 8.1 trivially implies that P PP contains sets that are immune to uniform SYM + . In <ref> [BTT92] </ref>, Beigel, Tarui and Toda have considered augmented ACC circuit families where the circuits are allowed to have probabilistic inputs and are also allowed to have an exact-threshold gate as the output gate (an exact-threshold gate outputs 1 if exactly k of its inputs are 1, where k is a parameter; <p> They are able to show that every Boolean function computed by these augmented ACC circuits is still in SYM + . Since it seems that the results of <ref> [BTT92] </ref> also hold in the setting of uniform circuits, it follows that P PP contains sets that are immune to the augmented version of ACC as well.
Reference: [Bus87] <author> S. Buss. </author> <title> The boolean formula value problem is in ALOGTIME. </title> <booktitle> In Proc. 19th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 123-131, </pages> <year> 1987. </year>
Reference-contexts: Barrington, Immerman and Straubing [BIS90] investigated a variety of notions of uniformity for studying subclasses of NC 1 . One of the important notions that they studied is based on deterministic logarithmic time and the alternating logarithmic time hierarchy of Sipser [Sip83]. This notion is also used by Buss <ref> [Bus87] </ref> in his proof that the Boolean formula value problem is in alternating logarithmic time. Ruzzo introduced a similar notion of uniformity in [Ruz81].
Reference: [Cai89] <author> J. Cai. </author> <title> With probability 1, a random oracle separates PSPACE from the polynomial-time hierarchy. </title> <journal> J. Comput. System Sci., </journal> <volume> 38 </volume> <pages> 68-85, </pages> <year> 1989. </year>
Reference-contexts: Also, it is known that the PARITY language is Church-random with respect to AC 0 <ref> [Cai89, Bab87, H-as87] </ref>. However, even languages that are Church-random may have infinitely many "easy" special-case inputs. For example, any string of the form 0 n is trivially not in the PARITY language, and any string of the form 0 n 1 is trivially in the language.
Reference: [CKS81] <author> A. Chandra, D. Kozen, and L. Stockmeyer. </author> <title> Alternation. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 28 </volume> <pages> 114-133, </pages> <year> 1981. </year>
Reference-contexts: We assume that the reader is familiar with the basic concepts like computation trees, accepting subtrees and time and space bounded ATM's. Results and precise definitions relating to alternation may be found in <ref> [CKS81] </ref> and [BDG89]. The polynomial hierar chy (PH) is the class of languages accepted by ATM's that run in polynomial time and make a constant number of alternations. <p> Consult [BIS90, BCGR92] for examples illustrating how these machines compute. In order to prove some of the results in Chapter 3, we make use of a slightly enhanced version of the ATM. The ATM is also allowed to have MOD states, apart from the conventional (see <ref> [CKS81] </ref>) existential (9) and universal (8) states. The concept of a MOD state is defined as follows: Definition 2.7 For a modulus m, a MOD m configuration (say ) is always the root of a subtree of configurations in which all the other configurations (except the root) 19 are existential.
Reference: [Clo90] <author> P. Clote. </author> <title> Bounded Arithmetic and Computational Complexity. </title> <booktitle> In Proc. 5th IEEE Structure in Complexity Theory Conference, </booktitle> <pages> pages 196-199, </pages> <year> 1990. </year>
Reference-contexts: This class is sometimes denoted FO + &lt; + BIT . In Chapter 7, we provide another characterization of dlogtime-uniform AC 0 in terms of the log-bounded rudimentary reductions defined by Jones [Jon75]. Additional char acterizations of AC 0 may be found in <ref> [Clo90] </ref>. The lower bound results for AC 0 mentioned in the Section 1.2 apply to nonuniform AC 0 and hence to uniform AC 0 as well. Allender and Hertrampf [AH90] showed that the result in [All89a] also holds in the uniform setting.
Reference: [Coo85] <author> S. Cook. </author> <title> A taxonomy of problems with fast parallel algorithms. </title> <journal> Inform. and Cont., </journal> <volume> 64 </volume> <pages> 2-22, </pages> <year> 1985. </year>
Reference-contexts: Therefore, a variety of uniformity conditions suitable for studying AC 0 , ACC, TC 0 and NC 1 have been considered. Ruzzo [Ruz81] came up with the notion of NC 1 -uniformity (which he calls U E fl - uniformity; see also Cook <ref> [Coo85] </ref>). He showed that NC 1 -uniform NC 1 is equal to 7 alternating logarithmic time.
Reference: [FKLN90] <author> L. Fortnow, H. Karloff, C. Lund, and N. Nisan. </author> <title> Algebraic methods for interactive proof systems. </title> <booktitle> In Proc. 31st IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-10, </pages> <year> 1990. </year>
Reference-contexts: Thus it may seem contradictory to assume simultaneously that deterministic time 2 O (n) is powerful enough to solve every NE-predicate. Note also that if E = RUD, then the polynomial hierarchy 14 collapses. However, the non-relativizing proof techniques developed in <ref> [FKLN90, Sha90, BFL91] </ref> have not been shown to be relevant for questions concerning deterministic and nondeterministic time classes; new non-relativizing proof techniques are still needed to answer these questions. <p> We should emphasize that the results in this chapter do not indicate that the problem of strongly separating NP from AC 0 is hard. We hope that the new proof techniques developed in <ref> [FKLN90] </ref>, [Sha90] and [BFL91] can be used to answer this question. We think that our oracle results can point to some of the problems that would have to be overcome in answering this question in the unrelativized setting.
Reference: [FL92] <author> U. Feige and C. Lund. </author> <title> On the hardness of computing the Permanent of random matrices. </title> <booktitle> In Proc. 24th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 643-654, </pages> <year> 1992. </year>
Reference-contexts: Our results (as well as the results in [GKT92]) imply that ModPH P PP . It should be emphasized that our results about the complexity of PERM do not rely on any unproven complexity-theoretic assumptions. This is in contrast to other results such as <ref> [FL92] </ref>, which proves stronger intractability results about PERM under the hypothesis that the polynomial hierarchy is infinite.
Reference: [FMS78] <author> M. Fischer, A. Meyer, and J. Seiferas. </author> <title> Separating nondeterministic time complexity classes. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 25 </volume> <pages> 146-167, </pages> <year> 1978. </year>
Reference-contexts: (n O (1) ) E = Dtime (2 O (n) ) NE = Ntime (2 O (n) ) DLOG = Dspace (log n) NLOG = Nspace (log n) PSPACE = Dspace (n O (1) ) We also assume familiarity with the hierarchy theorems for deterministic time [HS65] and nondeterministic time <ref> [FMS78] </ref>. We use the following reformulation of the almost-everywhere hierarchy theorem for deterministic time classes proved by Geske, Huynh and Seiferas [GHS91]. <p> Therefore, Ntime (n 3 ) Z NP Z NP ACC = NP P = NP = ACC Ntime (n 2 ) Z , which contradicts the hierarchy theorem of <ref> [FMS78] </ref> for nondeterministic time classes. Theorem 3.6 The permanent function (PERM) does not have ACC (subexp) circuits. Proof. Corollary 3.4 implies that ACC (subexp) Dtime (n 2 ) PERM [1] . <p> Therefore, C = Time (subsubexp) ACC (subexp). Since ACC (subexp) is closed under complement, we also have that co-C = Time (subsubexp) ACC (subexp). Using the result in Corollary 3.4 and the hierarchy theorem of <ref> [FMS78] </ref> for nondeterministic time, we know that there are sets in NP C = P that are not in ACC (subexp).
Reference: [FS88] <author> L. Fortnow and M. Sipser. </author> <title> Are there Interactive Protocols for co-NP Languages? Inform. Process. </title> <journal> Lett., </journal> <volume> 28 </volume> <pages> 249-251, </pages> <year> 1988. </year>
Reference-contexts: We know that IP (the set of languages with efficient Interactive Proof Systems) contains P PP ([FKLN90]) and is in fact equal to PSPACE ([Sha90]). Contrast this with a previous result of Fortnow and Sipser <ref> [FS88] </ref> that showed the existence of an oracle relative to which co-NP 6 IP. With that in mind, we conjecture that the hypothesis to Proposition 1.4 is false.
Reference: [FSS84] <author> M. Furst, J. Saxe, and M. Sipser. </author> <title> Parity, circuits and the polynomial time hierarchy. </title> <journal> Math. Sys. Theory, </journal> <volume> 17 </volume> <pages> 13-27, </pages> <year> 1984. </year> <month> 93 </month>
Reference-contexts: AC 0 circuit families are also known for many regular and context free languages. However, the lower bounds for AC 0 suggest that it is a very tiny complexity class. Ajtai [Ajt83] and Furst, Saxe and Sipser <ref> [FSS84] </ref>, in their quest to separate the levels of the polynomial hierarchy by oracles, proved the first lower bounds for AC 0 . <p> Their techniques were later refined by Yao [Yao85], H-astad [H-as87] and Aspnes, Beigel, Furst and Rudich [ABFR91] who improved the lower bound to exponential. Since PARITY is reducible to other functions such as MAJORITY, Multiplication and Transitive Closure <ref> [FSS84] </ref>, these functions are outside AC 0 as well. These lower bounds prompted people to look at a slightly more powerful model, namely constant depth, polynomial size circuits consisting of NOT gates, and unbounded fan-in AND and OR gates with the addition of unbounded fan-in PARITY gates. <p> In fact, monotone circuits of polynomial size and O (log n) depth for computing T n k are implied by the sorting network due to Ajtai, Komlos and Szemeredi [AKS83]. Using the intuition of Toda's result [Tod91] and some known connections between the polynomial hierarchy and constant depth circuits <ref> [FSS84] </ref>, Allender [All89a] showed that every language in AC 0 can be recognized by depth three threshold circuits of size 2 (log n) O (1) .
Reference: [GHS91] <editor> J. Geske, D. Huynh, and J. Seiferas. </editor> <title> A note on almost-everywhere-complex sets and separating deterministic time complexity classes. </title> <journal> Inform. and Comput., </journal> <volume> 92 </volume> <pages> 97-104, </pages> <year> 1991. </year>
Reference-contexts: More formally, a set L is said to be almost-everywhere complex with respect to Dtime (T (n)) if any machine recognizing L must run for more than T (jxj) steps on all large inputs x. As with Church-randomness, there are very tight hierarchies for almost-everywhere complexity <ref> [GHS91] </ref>. We are interested in the study of almost-everywhere complexity because, unlike the case of Church-randomness, little is known about sets that are almost-everywhere complex with respect to circuit complexity classes like AC 0 and ACC. <p> For guidance, we turn to the better-understood notions of time and space complexity. Almost-everywhere complexity has been studied in a variety of settings dealing with time and space complexity <ref> [BS85, GHS91, GK90, ABHH90] </ref>, and in all instances it has been shown to be intimately connected with immunity. Recall (from Section 1.3) that an infinite set L is immune to a class C if L has no infinite subset in C. <p> We use the following reformulation of the almost-everywhere hierarchy theorem for deterministic time classes proved by Geske, Huynh and Seiferas <ref> [GHS91] </ref>. Theorem [GHS91] For k 2, if T (n) is the exact running time of a k-tape Turing machine, and if t (n) is such that t (n) log t (n) = o (T (n)), then there is a f0; 1g-valued function computable by a k-tape Turing machine in time O <p> We use the following reformulation of the almost-everywhere hierarchy theorem for deterministic time classes proved by Geske, Huynh and Seiferas <ref> [GHS91] </ref>. Theorem [GHS91] For k 2, if T (n) is the exact running time of a k-tape Turing machine, and if t (n) is such that t (n) log t (n) = o (T (n)), then there is a f0; 1g-valued function computable by a k-tape Turing machine in time O (T (n)), <p> Our primary interest in initiating this study was to find sets that are almost-everywhere complex to AC 0 . Since almost-everywhere complexity is well-known to be connected to immunity <ref> [BS85, GHS91, GK90, ABHH90] </ref>, it is necessary to study sets that are immune to AC 0 . In this chapter we focus on finding sets that are immune to AC 0 . It is easy to find sets with small space complexity that are immune to AC 0 . <p> It is easy to find sets with small space complexity that are immune to AC 0 . Merely note that AC 0 is contained in Dspace (log n), and then use the almost-everywhere hierarchy theorem of <ref> [GHS91] </ref> to obtain the following result: Proposition 4.1 Let S be a space-constructible function such that log n = o (S (n)). Then there is a set in Dspace (S (n)) that is immune to AC 0 . <p> The proof is direct consequence of Theorem 3.2. Using Theorem 3.2, we have that there is a set Y 2 PP such that ACC (subexp) Dtime (n 2 ) Y . Now observe merely that the almost-everywhere hierarchy theorem of <ref> [GHS91] </ref> relativizes, so that there is a set in Dtime (n 3 ) Y that is immune to Dtime (n 2 ) Y , and thus is also immune to ACC (subexp). <p> Proof. (of Theorem 4.4) Lemmas 4.5 and 4.7 imply that AC 0 is contained in Dtime (n 6 ) Y for some Y 2 PP (letting k = 1). By the almost-everywhere hierarchy theorem of <ref> [GHS91] </ref> there is a set in Dtime (n 7 ) Y that is immune to Dtime (n 6 ) Y and hence to AC 0 . Proof. (of Lemma 4.7) Let L 2 PrDtime (n k ). <p> Proof. If A is any oracle relative to which P = NP, then relative to A, S k k Time (n) P = PH. Since the almost-everywhere hierarchy theorem of <ref> [GHS91] </ref> relativizes, there is a set in E that is immune to P relative to any oracle.
Reference: [GK90] <editor> J. Geske and D. Kakihara. </editor> <title> Almost-everywhere complexity, bi-immunity and nondeterministic space. </title> <booktitle> In Advances in Computing and Information (ICCI '90), Lecture Notes in Computer Science 468, </booktitle> <pages> pages 44-51. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: For guidance, we turn to the better-understood notions of time and space complexity. Almost-everywhere complexity has been studied in a variety of settings dealing with time and space complexity <ref> [BS85, GHS91, GK90, ABHH90] </ref>, and in all instances it has been shown to be intimately connected with immunity. Recall (from Section 1.3) that an infinite set L is immune to a class C if L has no infinite subset in C. <p> Our primary interest in initiating this study was to find sets that are almost-everywhere complex to AC 0 . Since almost-everywhere complexity is well-known to be connected to immunity <ref> [BS85, GHS91, GK90, ABHH90] </ref>, it is necessary to study sets that are immune to AC 0 . In this chapter we focus on finding sets that are immune to AC 0 . It is easy to find sets with small space complexity that are immune to AC 0 .
Reference: [GKT92] <author> F. Green, J. Kobler, and J. Toran. </author> <title> The power of the middle bit. </title> <booktitle> In Proc. 7th Structure in Complexity Theory Conference, </booktitle> <pages> pages 111-117, </pages> <year> 1992. </year>
Reference-contexts: Beigel and Tarui [BT91] improved Yao's result by showing deterministic (instead of probabilistic) circuits of the above kind for ACC. These results imply that all of ACC can be computed by depth three threshold circuits of size 2 (log n) O (1) . Green, Kobler and Toran <ref> [GKT92] </ref> have improved upon Beigel and Tarui's [BT91] result by showing that the top gate in the depth two circuit can be a fixed symmetric gate, which they call a MidBit gate. 1.3 Uniform Circuits So far we have talked about circuits in their most general form; this is usually referred <p> This extended notion of uniformity coincides with the one we use. In the same paper, Barrington provides a different proof that shows that the simulation of Beigel and Tarui [BT91] holds for uniform circuits. He shows that the result of Green, Kobler and Toran <ref> [GKT92] </ref> holds in the uniform setting as well. In this thesis we deal exclusively with uniform circuits. We use different notions of uniformity, but they are all derived from the dlogtime-uniformity discussed above. <p> It would be interesting to see if this result translates upwards to exponential analogs of ACC and PP. The exponential size analog of ACC has been considered before. In 86 <ref> [GKT92] </ref>, Green, Kobler and Toran define the class ModPH (see Definition 2.10). It is not hard to see that ModPH = ACC (2 n O (1) ). <p> Definition 2.7) that make a constant number of alternations. It would be interesting if we can show that ModPH ( PrTime (2 n O (1) ) using the fact that ACC ( PP. Our results (as well as the results in <ref> [GKT92] </ref>) imply that ModPH P PP . It should be emphasized that our results about the complexity of PERM do not rely on any unproven complexity-theoretic assumptions.
Reference: [H-as87] <author> J. H-astad. </author> <title> Computational limitations for small depth circuits. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1987. </year>
Reference-contexts: They showed that constant depth circuits that use NOT gates, and AND and OR gates of unbounded fan-in need superpolynomial size for computing the PARITY (MOD 2 ) function. Their techniques were later refined by Yao [Yao85], H-astad <ref> [H-as87] </ref> and Aspnes, Beigel, Furst and Rudich [ABFR91] who improved the lower bound to exponential. Since PARITY is reducible to other functions such as MAJORITY, Multiplication and Transitive Closure [FSS84], these functions are outside AC 0 as well. <p> Also, it is known that the PARITY language is Church-random with respect to AC 0 <ref> [Cai89, Bab87, H-as87] </ref>. However, even languages that are Church-random may have infinitely many "easy" special-case inputs. For example, any string of the form 0 n is trivially not in the PARITY language, and any string of the form 0 n 1 is trivially in the language. <p> He mentions on more than one occasion the question of whether or not RUD S = Dspace (S (n)), and he explicitly considers the possibility that RUD log = Nspace (log n) ([Jon75], Theorem 23). However, the results of <ref> [H-as87, Yao85] </ref> show that for any function S such that for all *, S (n) = o (n * ), the PARITY language is in REG RUD S . 89 (Here, REG denotes the class of regular sets.) However, any generalization of this result for larger functions S will require entirely
Reference: [HG90] <author> J. H-astad and M. Goldmann. </author> <title> On the power of small-depth threshold circuits. </title> <booktitle> In Proc. 31st IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 610-618, </pages> <year> 1990. </year>
Reference-contexts: However, Hajnal, Maass et al [HMP + 87] have shown that for threshold circuits of polynomial size, depth three is more powerful than depth two. H-astad and Goldmann <ref> [HG90] </ref> have proved that computing the "generalized inner product function" (considered in [BNS89]) with depth three threshold circuits requires exponential size if the bottom level fan-in is restricted to be &lt; 1 2 log n.
Reference: [HMP + 87] <author> A. Hajnal, W. Maass, P. Pudlak, M. Szegedy, and G. Turan. </author> <title> Threshold circuits of bounded depth. </title> <booktitle> In Proc. 28th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 99-110, </pages> <year> 1987. </year>
Reference-contexts: Threshold circuits are probably quite powerful; it is not known if there is a language in NP that cannot be recognized by depth three, polynomial size threshold circuits. However, Hajnal, Maass et al <ref> [HMP + 87] </ref> have shown that for threshold circuits of polynomial size, depth three is more powerful than depth two.
Reference: [HS65] <author> J. Hartmanis and R. Stearns. </author> <title> On the computational complexity of algorithms. </title> <journal> Trans. AMS, </journal> <volume> 117 </volume> <pages> 285-306, </pages> <year> 1965. </year>
Reference-contexts: ) NP = Ntime (n O (1) ) E = Dtime (2 O (n) ) NE = Ntime (2 O (n) ) DLOG = Dspace (log n) NLOG = Nspace (log n) PSPACE = Dspace (n O (1) ) We also assume familiarity with the hierarchy theorems for deterministic time <ref> [HS65] </ref> and nondeterministic time [FMS78]. We use the following reformulation of the almost-everywhere hierarchy theorem for deterministic time classes proved by Geske, Huynh and Seiferas [GHS91]. <p> Since ACC PP, suppose for the sake of contradiction that ACC = PP. Then ACC = P = PP. Therefore, Dtime (n 3 ) Y P Y P = ACC Dtime (n 2 ) Y . But this contradicts the time hierarchy theorem of <ref> [HS65] </ref>. Corollary 3.4 The following statements are true: 1. ACC (subexp) Dtime (n 2 ) PERM [1] where PERM [1] refers to the case when only one call is made to PERM. 2. <p> Theorem 3.6 The permanent function (PERM) does not have ACC (subexp) circuits. Proof. Corollary 3.4 implies that ACC (subexp) Dtime (n 2 ) PERM [1] . By the hierarchy theorem of <ref> [HS65] </ref>, we know that Dtime (n 2 ) PERM [1] ( Dtime (n 3 ) PERM [1] . Suppose PERM has ACC (subexp) circuits. Let L 2 Dtime (n 3 ) PERM [1] and let M be the oracle machine that accepts L making at most one call to PERM. <p> Since L 0 , L 00 and PERM all have ACC (subexp) circuit families, the resulting family for L is also in ACC (subexp). Therefore, using the result in Theorem 3.2, L 2 Dtime (n 2 ) PERM [1] which contradicts the hierarchy theorem of <ref> [HS65] </ref> since we started with an arbitrary L in Dtime (n 3 ) PERM [1] . Theorem 3.7 PP 6 ACC (subsubexp): Proof. We claim that if PP ACC (subsubexp), then PrTime (subsubexp) ACC (subexp). <p> Since by assumption L 0 2 ACC (subsubexp), one can build subexponential size circuits for L because the composition of two functions in subsubexp is in subexp. This implies that PrTime (subsubexp) ACC (subexp). Note that using the result in Theorem 3.2 and the hierarchy theorem of <ref> [HS65] </ref>, we know that there are sets in P PP that are not in ACC (subexp). However, if PP is contained in ACC (subsubexp), then P PP P ACC (subsubexp) P Dtime (subsubexp) Dtime (subsubexp) PrTime (subsubexp) ACC (subexp) The last step follows from the claim above. <p> Proof. (of Corollary 5.4) It is a well known result that P = NP ) P = PH. Therefore, P = NP ) k k Time (n) P. The hierarchy theorem in <ref> [HS65] </ref> implies that E has a set that is immune to P, therefore E has a set that is immune to S k k Time (n).
Reference: [HU79] <author> J. Hopcroft and J. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1979. </year>
Reference-contexts: A good introduction to this material can be found in <ref> [HU79] </ref>. We also assume that the reader is familiar with the concept of Turing machine computation relative to an oracle.
Reference: [HY84] <author> J. Hartmanis and Y. Yesha. </author> <title> Computation times of NP sets of different densities. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 34 </volume> <pages> 17-32, </pages> <year> 1984. </year>
Reference-contexts: For a language L, let L =n = fx : jxj = n ^ x 2 Lg. Definition 2.16 A set L is called P-printable if the function 1 n 7! L =n is computable in polynomial time. P-printable sets were defined by Hartmanis and Yesha <ref> [HY84] </ref>; they have been studied in detail by Allender and Rubinstein [AR88].
Reference: [IL89] <author> N. Immerman and S. Landau. </author> <title> The complexity of iterated multiplication. </title> <booktitle> In Proc. 4th IEEE Structure in Complexity Theory Conference, </booktitle> <pages> pages 104-111, </pages> <year> 1989. </year>
Reference-contexts: As far as the relationship between TC 0 and NC 1 is concerned, we have competing conjectures. Immerman and Landau <ref> [IL89] </ref> have conjectured that TC 0 = NC 1 , while Yao [Yao89] talks about the possibility of TC 0 6= NC 1 . Some very interesting upper bound results are also known for the constant depth circuit classes.
Reference: [Imm83] <author> N. Immerman. </author> <title> Languages which capture complexity classes. </title> <booktitle> In Proc. 15th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 347-354, </pages> <year> 1983. </year> <note> Also appeared in revised form in SIAM J. Comput., 16(4), </note> <year> 1987. </year>
Reference-contexts: Immerman and Fagin are primarily responsible for the application of this tool to complexity theory. We provide a sketch of the relevant information on the first order framework below. For more detailed definitions and background information, see <ref> [Imm83, Imm87, Imm89] </ref>. In the first order framework, we have a first order language such that every sentence in the language expresses a property of strings. Given a string x, either x satisfies (in which case we write x j= ) or it doesn't. <p> Since the composition of two functions in LH is easily seen to be in 84 LH, it follows that Jones' rationale for imposing the stronger length requirement was unfounded. Another closely related type of reducibility is the class of first order translations introduced by Immerman in <ref> [Imm83] </ref>. (A more complete definition, modified to allow the BIT predicate as a primitive, is presented in [Imm87].
Reference: [Imm87] <author> N. Immerman. </author> <title> Expressibility as a complexity measure: Results and directions. </title> <booktitle> In Proc. 2nd Structure in Complexity Theory Conference, </booktitle> <pages> pages 194-202, </pages> <year> 1987. </year>
Reference-contexts: Immerman and Fagin are primarily responsible for the application of this tool to complexity theory. We provide a sketch of the relevant information on the first order framework below. For more detailed definitions and background information, see <ref> [Imm83, Imm87, Imm89] </ref>. In the first order framework, we have a first order language such that every sentence in the language expresses a property of strings. Given a string x, either x satisfies (in which case we write x j= ) or it doesn't. <p> Another closely related type of reducibility is the class of first order translations introduced by Immerman in [Imm83]. (A more complete definition, modified to allow the BIT predicate as a primitive, is presented in <ref> [Imm87] </ref>. We use that definition in the following discussion.) In Immerman's formulation, a first-order translation takes as input a structure on f1; ng and outputs a structure on f1; n k g, where elements of f1; n k g are identified with k-tuples of elements from f1; ng. <p> As Immerman has observed in <ref> [Imm87] </ref>, a first-order translation may be viewed as a many-one reduction computed by dlogtime-uniform AC 0 circuits.
Reference: [Imm89] <author> N. Immerman. </author> <title> Expressibility and parallel complexity. </title> <journal> SIAM J. Comput., </journal> <volume> 18(3) </volume> <pages> 625-638, </pages> <year> 1989. </year>
Reference-contexts: The 4 A CRAM (Concurrent Random Access Machine) is essentially a concurrent read, concurrent write parallel random access machine (CRCW PRAM) that has an extra instruction called Shift in its in struction set. For more details, see <ref> [Imm89] </ref>. 9 notions will be made precise in Chapter 2. We are interested in uniform circuits for two reasons. Firstly, some of the results that we prove seem to work only for uniform circuits. <p> Immerman and Fagin are primarily responsible for the application of this tool to complexity theory. We provide a sketch of the relevant information on the first order framework below. For more detailed definitions and background information, see <ref> [Imm83, Imm87, Imm89] </ref>. In the first order framework, we have a first order language such that every sentence in the language expresses a property of strings. Given a string x, either x satisfies (in which case we write x j= ) or it doesn't.
Reference: [IN88] <author> R. Impagliazzo and M. Naor. </author> <title> Decision trees and downward closures. </title> <booktitle> In Proc. 3rd IEEE Structure in Complexity Theory Conference, </booktitle> <pages> pages 29-38, </pages> <year> 1988. </year>
Reference-contexts: Any answer to the question Are there sets in NP that are immune to AC 0 ? yields non-relativizing proof techniques for attacking questions concerning deterministic and nondeterministic time-bounded computation. Earlier work by Impagliazzo and Naor <ref> [IN88] </ref> showed that many relationships among very small complexity classes (such as Dtime ((log n) O (1) ) and Ntime ((log n) O (1) )) cannot be resolved without first answering long-standing questions such as whether P = NP " co-NP.
Reference: [IT89] <author> R. Impagliazzo and G. Tardos. </author> <title> Decision versus search in super-polynomial time. </title> <booktitle> In Proc. 30th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 222-227, </pages> <year> 1989. </year> <month> 94 </month>
Reference-contexts: However, for exponential time, the corresponding questions are not known to be equivalent. In <ref> [IT89] </ref> it is shown that there is an oracle relative to which E = NE but not all NE-predicates are E-solvable (solvable in exponential time). Thus at least in some relativized worlds, assuming that all NE-predicates are E-solvable is strictly stronger than merely assuming E = NE.
Reference: [Jon75] <author> N. Jones. </author> <title> Space-bounded reducibility among combinatorial problems. </title> <journal> J. Comput. System Sci., </journal> <volume> 11 </volume> <pages> 68-85, </pages> <year> 1975. </year> <note> Also see corrigendum on page 241 in J. Comput. System Sci. 15, </note> <year> 1977. </year>
Reference-contexts: This class is sometimes denoted FO + &lt; + BIT . In Chapter 7, we provide another characterization of dlogtime-uniform AC 0 in terms of the log-bounded rudimentary reductions defined by Jones <ref> [Jon75] </ref>. Additional char acterizations of AC 0 may be found in [Clo90]. The lower bound results for AC 0 mentioned in the Section 1.2 apply to nonuniform AC 0 and hence to uniform AC 0 as well. <p> Any progress made here would result in new techniques for attacking the Dtime vs. Ntime question. 1.6 Rudimentary Reductions Logspace reductions were defined and studied independently by Stockmeyer and Meyer [SM73] and Jones <ref> [Jon75] </ref> as a tool for studying the relative complexity of problems in P. Jones [Jon75] also introduced a restricted version of logspace-reducibility, called log-bounded rudimentary reducibility. <p> Any progress made here would result in new techniques for attacking the Dtime vs. Ntime question. 1.6 Rudimentary Reductions Logspace reductions were defined and studied independently by Stockmeyer and Meyer [SM73] and Jones <ref> [Jon75] </ref> as a tool for studying the relative complexity of problems in P. Jones [Jon75] also introduced a restricted version of logspace-reducibility, called log-bounded rudimentary reducibility. <p> In <ref> [Jon75] </ref>, Jones goes on to show that a number of problems are complete for various complexity classes under log-bounded rudimentary reducibility. For a function S, he defines RUD S , the class of S ()- bounded rudimentary predicates. <p> Proof. Follows from Theorem 6 in [All92] (see also [AW88, Theorem 4]). The above proposition holds relative to an arbitrary oracle, and this fact is used in the proof of Proposition 6.3. 2.5 Rudimentary Reductions In the following paragraphs, we present the definitions of Jones <ref> [Jon75] </ref> to define the class of space-bounded rudimentary predicates and reductions. Definition 2.21 Let be an alphabet. <p> To resolve this difficulty, we use a standard technique that has been used since at least <ref> [Jon75] </ref>. For a function f with polynomial growth rate 1 , let A f (c; i; z) def = the i th symbol of f (z) is c. Then we say that f is in LH (or FO) if A f is in LH (or FO). <p> This completes the proof of correctness of the construction and we have an oracle A = [ i A i such that E A = 2 Time A (n) and K A S (A) (n) = O (log n). 78 Chapter 7 A new characterization of AC 0 In <ref> [Jon75] </ref>, Jones introduced logspace reductions to study the relative complexity of problems in P (see [SM73] for independent work on logspace reductions). <p> The constant 1 is explicitly definable in RUD log , and Jones <ref> [Jon75] </ref> has already observed that the relations u + v = w; u v = w; u v = w and juj = w are all in RUD log , so long as u; v; w are constrained to have length c log jxj for some c. <p> There was one additional restriction that Jones imposed in defining his logspace-rudimentary reducibility (denoted rud log ); he required that there be some constant c such that for all x, log jf (x)j = c log jxj. In <ref> [Jon75] </ref>, Jones comments that this final restriction is stronger than the more natural restriction of simply having f have polynomial growth rate, but explains that it "seems to be necessary" in order to have the rud log relation be transitive (i.e., in order for the composition of two log-bounded rudimentary functions <p> It seems possible that techniques could be developed in this setting to prove non-relativizing results, using the logic-based characterizations of uniform AC 0 . In this thesis we also considered the log-bounded rudimentary predicates defined by Jones in <ref> [Jon75] </ref> and we have shown that they correspond exactly to the class of sets accepted by dlogtime-uniform AC 0 circuits. Thus Jones was probably the first to study this complexity class, which has loomed large in importance in recent years. <p> We believe that this augments the (already compelling) arguments of [BIS90] in favor of using the dlogtime-uniformity condition when studying small circuit complexity classes. It is instructive to note some of the open questions posed by Jones in <ref> [Jon75] </ref>. He mentions on more than one occasion the question of whether or not RUD S = Dspace (S (n)), and he explicitly considers the possibility that RUD log = Nspace (log n) ([Jon75], Theorem 23).
Reference: [KVVY92] <author> R. Kannan, H. Venkateswaran, V. Vinay, and A. Yao. </author> <title> A circuit-based proof of Toda's theorem. </title> <note> To appear in Information and Computation, </note> <year> 1992. </year>
Reference-contexts: and OR gates in the circuit by nice depth 6 probabilistic circuits with MOD 2 gates and small fan-in AND gates. (This construction is based on an idea of Valiant and Vazirani in [VV86]; similar constructions may be found in work by Toda [Tod91] and Kannan, Venkateswaran, Vinay and Yao <ref> [KVVY92] </ref>.) The size of the new circuit is only polynomially more than that of the old one. If the AND or OR gate being replaced has r inputs, then the probabilistic circuit that replaces it uses O ((log r) 3 ) random bits.
Reference: [Lad77] <author> R. Ladner. </author> <title> Application of model theoretic games to discrete linear orders and finite automata. </title> <journal> Inform. and Comput., </journal> <volume> 33 </volume> <pages> 281-303, </pages> <year> 1977. </year>
Reference-contexts: However, it should be noted that the class FO + &lt; is exactly the star-free regular sets, and thus each language in that class has a linear time algorithm [MP71] (see also <ref> [Lad77] </ref>). Some (but clearly not all) of the combinatorial techniques that are used to prove this characterization of FO + &lt; apply also to the system FO + &lt; + BIT .
Reference: [Lev84] <author> L. Levin. </author> <title> Randomness conservation inequalities; information and independence in mathematical theories. </title> <journal> Inform. and Cont., </journal> <volume> 61 </volume> <pages> 15-37, </pages> <year> 1984. </year>
Reference-contexts: It is easy to see that using f we can generate an infinite subset of L that is P-printable. The following paragraphs introduce the notion of time-bounded Kolmogorov complexity that we use. The definitions below were introduced in <ref> [Lev84, All89c] </ref>; more formal definitions and background may be found there and in [All92]. Definition 2.20 Kt (x) = minfjyj + log t : M u (y) = x in at most t stepsg where M u is a "universal" Turing machine. Let L f0; 1g fl .
Reference: [Lip78] <author> R. Lipton. </author> <title> Model theoretic aspects of computational complexity. </title> <booktitle> In Proc. 19th IEEE Symposium on Foudations of Computer Science, </booktitle> <pages> pages 193-200, </pages> <year> 1978. </year>
Reference-contexts: Let E = Dtime (2 O (n) ), NE = Ntime (2 O (n) ) and let RUD denote the class of Rudimentary sets. RUD is the linear time analog of the polynomial hierarchy. It was defined by Smullyan [Smu61] and has been studied extensively (see, e.g., <ref> [Wra78, Lip78, Boo78, PD80, Vol83] </ref>). One result of [Wra78] shows that the rudimentary sets can also be characterized in terms of linear-time nondeterministic oracle Turing machines, in analogy to the usual definition of the polynomial hierarchy.
Reference: [Lis90] <author> G. Lischke. </author> <title> Impossibilities and possibilities of weak separation between NP and exponential time. </title> <booktitle> In Proc. 5th IEEE Structure in Complexity Theory Conference, </booktitle> <pages> pages 245-253, </pages> <year> 1990. </year>
Reference-contexts: Thus, a study of sets that are immune to a complexity class is necessary in order to study the notion of almost-everywhere complex sets. Because of these and other considerations, immunity has often been studied in complexity theory. (For example, see <ref> [Lis90] </ref> and the papers cited there.) In the literature, a class D is said to be strongly separated from a class C if there is a set in D that is immune to C.
Reference: [MP71] <author> R. McNaughton and S. Papert. </author> <title> Counter-free Automata. </title> <publisher> MIT Press, </publisher> <year> 1971. </year>
Reference-contexts: The use of this framework may be traced back to McNaughton <ref> [MP71] </ref> (see also [Bar90]). Immerman and Fagin are primarily responsible for the application of this tool to complexity theory. We provide a sketch of the relevant information on the first order framework below. For more detailed definitions and background information, see [Imm83, Imm87, Imm89]. <p> However, it should be noted that the class FO + &lt; is exactly the star-free regular sets, and thus each language in that class has a linear time algorithm <ref> [MP71] </ref> (see also [Lad77]). Some (but clearly not all) of the combinatorial techniques that are used to prove this characterization of FO + &lt; apply also to the system FO + &lt; + BIT .
Reference: [MT89] <author> P. McKenzie and D. Therien. </author> <title> Automata theory meets circuit complexity. </title> <booktitle> In Proc. 16th Annual International Colloquium on Automata, Languages and Programming, Lecture Notes in Computer Science 372. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: 2.11 (<ref> [MT89, Bar89, BT88] </ref>) A language L is in ACC if there exists a positive integer m such that L is recognized by a family of constant depth polynomial size circuits containing NOT gates, and unbounded fan-in AND, OR and MOD m gates. ACC was first defined and studied in [MT89, Bar89, BT88] under the name ACC 0 . Yao [Yao90] defines ACC a little differently; he allows a fixed finite set of moduli S instead of a single modulus m.
Reference: [Nep70] <author> V. Nepomnjasci i. </author> <title> Rudimentary predicates and Turing calculations. </title> <journal> Soviet Math. Dokl., </journal> <volume> 11 </volume> <pages> 1462-1465, </pages> <year> 1970. </year>
Reference-contexts: * ), the PARITY language is in REG RUD S . 89 (Here, REG denotes the class of regular sets.) However, any generalization of this result for larger functions S will require entirely different techniques and will have to take uniformity into account in some way, since the techniques of <ref> [Nep70] </ref> (see also [Vol83]) show that for each * &gt; 0, NLOG RUD n * , and it follows from [Wra78] that RUD n * contains complete sets for each level of the polynomial hierarchy.
Reference: [PD80] <author> J. Paris and C. Dimitracopoulos. </author> <title> Truth definitions for 0 formulae. In Logic and Arithmetic: an Internatinal Symposium Held in Honour of Ernst Specker, Monographie no. </title> <booktitle> 30 de l'Enseignement Mathematique, </booktitle> <pages> pages 317-329, </pages> <year> 1980. </year>
Reference-contexts: Let E = Dtime (2 O (n) ), NE = Ntime (2 O (n) ) and let RUD denote the class of Rudimentary sets. RUD is the linear time analog of the polynomial hierarchy. It was defined by Smullyan [Smu61] and has been studied extensively (see, e.g., <ref> [Wra78, Lip78, Boo78, PD80, Vol83] </ref>). One result of [Wra78] shows that the rudimentary sets can also be characterized in terms of linear-time nondeterministic oracle Turing machines, in analogy to the usual definition of the polynomial hierarchy. <p> this restriction came from (1) the desire to have a tool for talking about the structure of very small complexity classes such as Dspace (log n), and (2) an interest in generalizing the notion of "rudimentary relations," which at that time was the object of a considerable amount of attention <ref> [Smu61, Wra78, Sal73, PD80, Wil79, PHW85] </ref>. In [Jon75], Jones goes on to show that a number of problems are complete for various complexity classes under log-bounded rudimentary reducibility. For a function S, he defines RUD S , the class of S ()- bounded rudimentary predicates.
Reference: [PHW85] <author> J. Paris, W. Handley, and A. Wilkie. </author> <title> Characterizing some low arithmetic classes. </title> <editor> In L. Lovasz and E. Szemeredi, editors, </editor> <title> Theory of Algorithms, </title> <journal> Colloquia Mathematica Societatis Janos Bolyai, </journal> <volume> 44, </volume> <pages> pages 353-364. </pages> <publisher> North-Holland, </publisher> <year> 1985. </year>
Reference-contexts: this restriction came from (1) the desire to have a tool for talking about the structure of very small complexity classes such as Dspace (log n), and (2) an interest in generalizing the notion of "rudimentary relations," which at that time was the object of a considerable amount of attention <ref> [Smu61, Wra78, Sal73, PD80, Wil79, PHW85] </ref>. In [Jon75], Jones goes on to show that a number of problems are complete for various complexity classes under log-bounded rudimentary reducibility. For a function S, he defines RUD S , the class of S ()- bounded rudimentary predicates.
Reference: [Pip79] <author> N. Pippenger. </author> <title> On simultaneous resource bounds (preliminary version). </title> <booktitle> In Proc. 20th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 307-311, </pages> <year> 1979. </year>
Reference-contexts: The class NC is the union of the classes NC k over all k 1. Many natural problems have been shown to be in NC; in particular, it is known that nondeterministic logspace (NLOG) is in NC 2 [Sud75, Ruz80]. Pippenger <ref> [Pip79] </ref> and Ruzzo [Ruz81] have given alternate characterizations of NC. Another related class that has been considered is the P-uniform version of NC called PUNC. Allender [All89b] studied this class and provided alternate characterizations in terms of alternating Turing machines and other parallel machines.
Reference: [Raz87] <author> A. Razborov. </author> <title> Lower bounds for the size of circuits of bounded depth with basis f^; g. </title> <journal> Math. notes of the Academy of Sciences of the USSR, </journal> <volume> 41(4) </volume> <pages> 333-338, </pages> <year> 1987. </year>
Reference-contexts: These lower bounds prompted people to look at a slightly more powerful model, namely constant depth, polynomial size circuits consisting of NOT gates, and unbounded fan-in AND and OR gates with the addition of unbounded fan-in PARITY gates. However, Razborov <ref> [Raz87] </ref> showed that these circuits could not compute the MAJORITY function. Smolensky [Smo87] extended Razborov's method to show that constant depth, polynomial size circuits with NOT gates, and unbounded fan-in AND, OR and MOD p gates cannot compute the MOD q function if p and q are distinct primes.
Reference: [Ruz80] <author> W. Ruzzo. </author> <title> Tree-size bounded alternation. </title> <journal> J. Comput. System Sci., </journal> <volume> 21 </volume> <pages> 218-235, </pages> <year> 1980. </year> <month> 95 </month>
Reference-contexts: For all k 0, AC k NC k+1 AC k+1 . The class NC is the union of the classes NC k over all k 1. Many natural problems have been shown to be in NC; in particular, it is known that nondeterministic logspace (NLOG) is in NC 2 <ref> [Sud75, Ruz80] </ref>. Pippenger [Pip79] and Ruzzo [Ruz81] have given alternate characterizations of NC. Another related class that has been considered is the P-uniform version of NC called PUNC. Allender [All89b] studied this class and provided alternate characterizations in terms of alternating Turing machines and other parallel machines.
Reference: [Ruz81] <author> W. Ruzzo. </author> <title> On uniform circuit complexity. </title> <journal> J. Comput. System Sci., </journal> <volume> 21(2) </volume> <pages> 365-383, </pages> <year> 1981. </year>
Reference-contexts: The notion of uniform circuit complexity was suggested by Borodin [Bor77]. Ruzzo 3 A symmetric function is a Boolean function whose output depends only on the number of 1's in the input. A symmetric gate computes a symmetric function. 6 <ref> [Ruz81] </ref> argued that uniform circuit complexity is a reasonable model of parallel complexity. He also investigated various definitions of uniform circuit complexity and showed that it is fairly insensitive to the choice of definition. <p> The class NC is the union of the classes NC k over all k 1. Many natural problems have been shown to be in NC; in particular, it is known that nondeterministic logspace (NLOG) is in NC 2 [Sud75, Ruz80]. Pippenger [Pip79] and Ruzzo <ref> [Ruz81] </ref> have given alternate characterizations of NC. Another related class that has been considered is the P-uniform version of NC called PUNC. Allender [All89b] studied this class and provided alternate characterizations in terms of alternating Turing machines and other parallel machines. <p> This has the annoying consequence of making the complexity class fairly sensitive to the notion of uniformity that is used to define it. Therefore, a variety of uniformity conditions suitable for studying AC 0 , ACC, TC 0 and NC 1 have been considered. Ruzzo <ref> [Ruz81] </ref> came up with the notion of NC 1 -uniformity (which he calls U E fl - uniformity; see also Cook [Coo85]). He showed that NC 1 -uniform NC 1 is equal to 7 alternating logarithmic time. <p> This notion is also used by Buss [Bus87] in his proof that the Boolean formula value problem is in alternating logarithmic time. Ruzzo introduced a similar notion of uniformity in <ref> [Ruz81] </ref>. He defines the direct connection language of a circuit family and the notion of uniformity requires that this language be decidable by an alternating Turing machine running in logarithmic time. <p> We will usually denote this class by S k k Time (n) (or by RUD sometimes). Some of the results in this thesis use the model of alternating Turing machine used by Ruzzo <ref> [Ruz81] </ref> in which access to the input is provided via a special tape which we call the input address tape onto which an address i may be written in binary, following which in unit time the i th input symbol is available. <p> Letting m to be the least common multiple of the elements in S makes the two definitions equivalent. We now present the notions of uniformity that we use in this thesis. Definition 2.12 Let fC n g be a family of circuits. Following <ref> [Ruz81] </ref>, we define the direct connection language L of fC n g as: L = fhn; g 1 ; g 2 i : g 1 = g 2 and g 1 is a gate in C n or g 1 6= g 2 and g 2 is an input to g <p> Furthermore, if M has well-behaved universal configurations, then fC n g has small fan-in AND gates. Proof. The proof of this lemma is by a standard simulation of the sort introduced by <ref> [Ruz81] </ref>. The output gate of C n will be labeled by the initial configuration of N on an input of length n (i.e., with n recorded on the worktape, as per the conventions of our ATM model).
Reference: [Sal73] <author> A. Salomaa. </author> <title> Formal Languages. </title> <publisher> Academic Press, </publisher> <year> 1973. </year>
Reference-contexts: this restriction came from (1) the desire to have a tool for talking about the structure of very small complexity classes such as Dspace (log n), and (2) an interest in generalizing the notion of "rudimentary relations," which at that time was the object of a considerable amount of attention <ref> [Smu61, Wra78, Sal73, PD80, Wil79, PHW85] </ref>. In [Jon75], Jones goes on to show that a number of problems are complete for various complexity classes under log-bounded rudimentary reducibility. For a function S, he defines RUD S , the class of S ()- bounded rudimentary predicates.
Reference: [Sha90] <author> A. Shamir. </author> <title> IP = PSPACE. </title> <booktitle> In Proc. 31st IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 11-15, </pages> <year> 1990. </year>
Reference-contexts: Thus it may seem contradictory to assume simultaneously that deterministic time 2 O (n) is powerful enough to solve every NE-predicate. Note also that if E = RUD, then the polynomial hierarchy 14 collapses. However, the non-relativizing proof techniques developed in <ref> [FKLN90, Sha90, BFL91] </ref> have not been shown to be relevant for questions concerning deterministic and nondeterministic time classes; new non-relativizing proof techniques are still needed to answer these questions. <p> We should emphasize that the results in this chapter do not indicate that the problem of strongly separating NP from AC 0 is hard. We hope that the new proof techniques developed in [FKLN90], <ref> [Sha90] </ref> and [BFL91] can be used to answer this question. We think that our oracle results can point to some of the problems that would have to be overcome in answering this question in the unrelativized setting.
Reference: [Sip83] <author> M. Sipser. </author> <title> Borel sets and circuit complexity. </title> <booktitle> In Proc. 15th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 61-69, </pages> <year> 1983. </year>
Reference-contexts: Barrington, Immerman and Straubing [BIS90] investigated a variety of notions of uniformity for studying subclasses of NC 1 . One of the important notions that they studied is based on deterministic logarithmic time and the alternating logarithmic time hierarchy of Sipser <ref> [Sip83] </ref>. This notion is also used by Buss [Bus87] in his proof that the Boolean formula value problem is in alternating logarithmic time. Ruzzo introduced a similar notion of uniformity in [Ruz81]. <p> The class of sets accepted in O (1) time on a CRAM 4 with polynomially many processors. * The class of sets accepted by alternating Turing machines in O (log n) time and O (1) alternations (i.e., the logarithmic time hierarchy (also referred to as LH) defined by Sipser in <ref> [Sip83] </ref>). * The class of sets definable in first-order logic with additional predicates &lt; (linear order) and BIT (where BIT (i; j) means that bit i of the binary representation of j is 1). This class is sometimes denoted FO + &lt; + BIT . <p> These are of two types: those that accept if and only if bit i of the input is 1, and those that accept if and only if the complement of bit i is 1 (for some i that is recorded on the address tape). The results in <ref> [Sip83] </ref> show that this convention can be introduced without loss of generality.) 37 It is necessary for us to define a notion of "clean" ATMs corresponding to our notion of "clean" circuit families. <p> Proposition 5.3 L 2 S k k Time (n) () un (L) 2 AC 0 . Proof. This result is proved using elementary translational (i.e, "padding") techniques. The proof is somewhat easier if one observes (as is done in <ref> [Sip83] </ref>) that, if L is accepted by an alternating Turing machine M in time O (log n) with O (1) alternations, then L is accepted by a similar machine that, along any computation path, uses its address tape to access the input only once. ()) Let L 2 k k Time <p> Let k time (log n) denote the class of languages accepted by alternating Turing machines running in O (log n) time, beginning in an existential configuration, and making at most k 1 alternations between existential and universal configurations on any computation path. Let LH (the logtime hierarchy of <ref> [Sip83] </ref>) denote S k k time (log n). 1 A circuit can easily compute a function by having multiple output gates. 79 Theorem 7.1 AC 0 = RUD log .
Reference: [SM73] <author> L. Stockmeyer and A. Meyer. </author> <title> Word problems requiring exponential time: Preliminary report. </title> <booktitle> In Proc. 5th ACM Symposium on Theory of Computing, </booktitle> <year> 1973. </year>
Reference-contexts: Any progress made here would result in new techniques for attacking the Dtime vs. Ntime question. 1.6 Rudimentary Reductions Logspace reductions were defined and studied independently by Stockmeyer and Meyer <ref> [SM73] </ref> and Jones [Jon75] as a tool for studying the relative complexity of problems in P. Jones [Jon75] also introduced a restricted version of logspace-reducibility, called log-bounded rudimentary reducibility. <p> A = [ i A i such that E A = 2 Time A (n) and K A S (A) (n) = O (log n). 78 Chapter 7 A new characterization of AC 0 In [Jon75], Jones introduced logspace reductions to study the relative complexity of problems in P (see <ref> [SM73] </ref> for independent work on logspace reductions). In the same paper, he also introduced a restricted version of logspace reductions called log-bounded rudimentary reductions and went on to demonstrate a lot of complete problems for various complexity classes under these reductions.
Reference: [Smo87] <author> R. Smolensky. </author> <title> Algebraic methods in the theory of lower bounds for Boolean circuit complexity. </title> <booktitle> In Proc. 19th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 77-82, </pages> <year> 1987. </year>
Reference-contexts: However, Razborov [Raz87] showed that these circuits could not compute the MAJORITY function. Smolensky <ref> [Smo87] </ref> extended Razborov's method to show that constant depth, polynomial size circuits with NOT gates, and unbounded fan-in AND, OR and MOD p gates cannot compute the MOD q function if p and q are distinct primes.
Reference: [Smu61] <author> R. </author> <title> Smullyan. </title> <journal> Theory of formal systems. In Annals of Math. </journal> <volume> Studies 47. </volume> <publisher> Princeton University Press, </publisher> <year> 1961. </year>
Reference-contexts: Let E = Dtime (2 O (n) ), NE = Ntime (2 O (n) ) and let RUD denote the class of Rudimentary sets. RUD is the linear time analog of the polynomial hierarchy. It was defined by Smullyan <ref> [Smu61] </ref> and has been studied extensively (see, e.g., [Wra78, Lip78, Boo78, PD80, Vol83]). One result of [Wra78] shows that the rudimentary sets can also be characterized in terms of linear-time nondeterministic oracle Turing machines, in analogy to the usual definition of the polynomial hierarchy. <p> this restriction came from (1) the desire to have a tool for talking about the structure of very small complexity classes such as Dspace (log n), and (2) an interest in generalizing the notion of "rudimentary relations," which at that time was the object of a considerable amount of attention <ref> [Smu61, Wra78, Sal73, PD80, Wil79, PHW85] </ref>. In [Jon75], Jones goes on to show that a number of problems are complete for various complexity classes under log-bounded rudimentary reducibility. For a function S, he defines RUD S , the class of S ()- bounded rudimentary predicates.
Reference: [Sud75] <author> I. Sudborough. </author> <title> A note on tape-bounded complexity classes and linear context-free languages. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 22(4) </volume> <pages> 499-500, </pages> <year> 1975. </year>
Reference-contexts: For all k 0, AC k NC k+1 AC k+1 . The class NC is the union of the classes NC k over all k 1. Many natural problems have been shown to be in NC; in particular, it is known that nondeterministic logspace (NLOG) is in NC 2 <ref> [Sud75, Ruz80] </ref>. Pippenger [Pip79] and Ruzzo [Ruz81] have given alternate characterizations of NC. Another related class that has been considered is the P-uniform version of NC called PUNC. Allender [All89b] studied this class and provided alternate characterizations in terms of alternating Turing machines and other parallel machines.
Reference: [Tod89] <author> S. </author> <title> Toda. </title> <booktitle> On the computational power of PP and P. In Proc. 30th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 514-519, </pages> <year> 1989. </year>
Reference-contexts: For each input y of length n, 1. #acc M (y) 1 (mod 2 q (n) ) if y 2 X, 3. M runs in time (q (n)) 2 n k . Proof. The proof follows directly from the proof of Lemma 4.2 in <ref> [Tod89] </ref>. Lemma 4.7 There exists Y 2 PP such that PrDtime (n k ) Dtime (n 2k 2 +4k ) Y for every k 1.
Reference: [Tod91] <author> S. </author> <title> Toda. PP is as hard as the polynomial-time hierarchy. </title> <journal> SIAM J. Comput., </journal> <volume> 20(5) </volume> <pages> 865-877, </pages> <year> 1991. </year>
Reference-contexts: This implies that TC 0 NC 1 . In fact, monotone circuits of polynomial size and O (log n) depth for computing T n k are implied by the sorting network due to Ajtai, Komlos and Szemeredi [AKS83]. Using the intuition of Toda's result <ref> [Tod91] </ref> and some known connections between the polynomial hierarchy and constant depth circuits [FSS84], Allender [All89a] showed that every language in AC 0 can be recognized by depth three threshold circuits of size 2 (log n) O (1) . <p> We also show that there are languages in PP and C = P that cannot be computed by uniform ACC type circuits of subsubexponential size. Our lower bound results use the techniques developed by Beigel and Tarui [BT91], Yao [Yao90] and Toda <ref> [Tod91] </ref>. As a corollary, we also get the important result that uniform ACC is properly contained in PP (as well as C = P). <p> The class MOD 2 P is usually referred to as PARITY P (P) in literature. 18 The class P PP is simply the class of languages that are p T reducible to languages in PP. Toda <ref> [Tod91] </ref> proved the very important result that the polynomial hierarchy is contained in P PP . 2.2 Alternating Turing Machines Alternating Turing machines (ATM) are a generalization of nondeterministic Turing machines and the concept of alternation has proved to be very useful in complexity theory, particularly in explicating the difference between <p> Our main tool in proving these results is the following result: Main Tool There is a set Y in PP such that ACC (subexp) Dtime (n 2 ) Y . To prove the main tool, we will first use the results of Toda <ref> [Tod91] </ref>, Yao [Yao90] and Beigel and Tarui [BT91] to convert a circuit family in ACC (subexp) into an equivalent circuit family of depth two circuits with a symmetric gate at level two, AND gates of small fan-in at level one and the input gates at level zero. <p> The above theorem is the most important part of the argument and most of the chapter hereafter is devoted to its proof. The proof uses techniques developed by Beigel and Tarui [BT91], Yao [Yao90] and Toda <ref> [Tod91] </ref>. The reader who is willing to accept the fact that the construction of [BT91] can be carried out uniformly can simply skip Section 3.2 (where Theorem 3.1 is proved). The rest of this section assumes that Theorem 3.1 is true, and uses it to prove our main results. <p> At the beginning of the inductive step, the circuit consists of a symmetric gate on the output level, where the inputs to the symmetric gate are "nice" ACC type circuits with MOD p gates feeding into the symmetric gate. Then, using techniques developed by Toda <ref> [Tod91] </ref> and Yao [Yao90], we create an equivalent circuit with a new symmetric gate that "absorbs" the level of MOD p gates; thus the new circuit has smaller depth. 35 3.2.1 Nice Circuits Definition 3.1 A circuit family fC n g is well-named if for every n, the name of the <p> in [AH90], one can replace the AND and OR gates in the circuit by nice depth 6 probabilistic circuits with MOD 2 gates and small fan-in AND gates. (This construction is based on an idea of Valiant and Vazirani in [VV86]; similar constructions may be found in work by Toda <ref> [Tod91] </ref> and Kannan, Venkateswaran, Vinay and Yao [KVVY92].) The size of the new circuit is only polynomially more than that of the old one. If the AND or OR gate being replaced has r inputs, then the probabilistic circuit that replaces it uses O ((log r) 3 ) random bits. <p> Then there is an equivalent SYMACC circuit family fD n g satisfying the same conditions, such that each path from the output gate to an input gate passes through k 1 MOD gates. Proof. Our proof follows the outline in [BT91], using techniques developed in <ref> [Yao90, Tod91] </ref>. Let L and fC n g be as in the statement of the lemma, where the output gate of C n computes the function A (n; ), where is the number of elements of fC n;i : 1 i f (n)g that evaluate to 1. <p> Even though Theorem 4.3 provides us the strongest immunity result that we can prove, we present a different proof to show that P PP is strongly separated from AC 0 that is of independent interest. The proof is interesting because it follows very simply from Toda's proof <ref> [Tod91] </ref> that PH P PP . Theorem 4.4 There is a set in P PP that is immune to AC 0 . For the proof, we first need to introduce some notation. Let X be a finite set of strings and R a predicate over strings. <p> We now define a few operators that act on complexity classes and produce new ones. These operators are very similar to the ones defined by Toda <ref> [Tod91] </ref>. We then state and prove some lemmas about the complexity classes that we get using the operators. Definition 4.1 Let t : N ! N, and let C be a class of sets. <p> Define the set Y to be fhi; x; li : x 2 f0; 1g fl and h i (x) lg. Toda <ref> [Tod91] </ref> has observed that Y is in PP (for essentially the same reason that the set Y in the proof of Theorem 3.2 is in PP). <p> Now define the function g such that for each x, g (x) = jfw 2 f0; 1g jxj k : x#w 2 Xgj. Let x be any string of length n. By definition, x 2 L () g (x) &gt; 2 n k 1 . Toda has proved in <ref> [Tod91] </ref> that h i (x) g (x) (mod 2 (n+1+n k ) ).
Reference: [Val79] <author> L. Valiant. </author> <title> The complexity of computing the Permanent. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 8 </volume> <pages> 189-201, </pages> <year> 1979. </year>
Reference-contexts: Then #P = f#acc M : M is an NP machineg. Definition 2.2 Let A = [A i;j ] be an n fi n matrix. Then PERM (A) = X n Y A i;(i) where S n is the symmetric group on n. It is well known from <ref> [Val79] </ref> that PERM is complete for #P under p T (in fact, p m ) reducibility. <p> We then show that the language recognized by the new circuit family can be quickly recognized by a deterministic Turing machine that has access to a particular oracle set in PP. Results about PERM then follow from Valiant's <ref> [Val79] </ref> results about the class #P. 3.1 The main results For the proof of the main tool, we will first show the following. 29 Theorem 3.1 Suppose L is accepted by an ACC (subexp) circuit family fC n g of s (n) sized circuits. <p> Clearly, L 0 2 P. Similarly, let L 00 = fhx; ii : the i th bit of the query by M on input x is 1g. Clearly, 32 L 00 2 P as well. A careful reading of Valiant's proof <ref> [Val79] </ref> reveals that the membership question for any set in P can be reduced to PERM via uniform AC 0 circuits. Therefore, by the hypothesis, P has ACC (subexp) circuits. Now we can describe an ACC (subexp) circuit family for L.
Reference: [Ven92] <author> H. Venkateswaran. </author> <title> Circuit definitions of nondeterministic complexity classes. </title> <journal> SIAM J. Comput., </journal> <volume> 21(4) </volume> <pages> 655-670, </pages> <year> 1992. </year>
Reference-contexts: In Chapter 3 we show that the simulation of Beigel and Tarui [BT91] holds in the uniform setting as well. We define a notion of uniformity to deal with circuit families of subexponential size. A similar notion has been defined by Venkateswaran in <ref> [Ven92] </ref> where he gives a uniform circuit characterization of NP and other classes. In [Bar92], Barrington shows that the notion of uniformity introduced for constant depth circuits of polynomial size in [BIS90] can be extended to quasipolynomial (2 (logn) O (1) ) size as well.
Reference: [Vol83] <author> H. Volger. </author> <title> Rudimentary relations and Turing machines with linear alternation. In Logic and Machines : Decision Problems and Complexity, </title> <booktitle> Lecture Notes in Computer Science 171, </booktitle> <pages> pages 131-136. </pages> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: Let E = Dtime (2 O (n) ), NE = Ntime (2 O (n) ) and let RUD denote the class of Rudimentary sets. RUD is the linear time analog of the polynomial hierarchy. It was defined by Smullyan [Smu61] and has been studied extensively (see, e.g., <ref> [Wra78, Lip78, Boo78, PD80, Vol83] </ref>). One result of [Wra78] shows that the rudimentary sets can also be characterized in terms of linear-time nondeterministic oracle Turing machines, in analogy to the usual definition of the polynomial hierarchy. <p> Let LH (the logtime hierarchy of [Sip83]) denote S k k time (log n). 1 A circuit can easily compute a function by having multiple output gates. 79 Theorem 7.1 AC 0 = RUD log . Proof. () This containment is mentioned in Proposition 5 of <ref> [Vol83] </ref> (where the converse containment is left as an open question). We present a complete proof here. The proof proceeds by induction on the definition of RUD log , showing that each language in RUD log is in LH. <p> PARITY language is in REG RUD S . 89 (Here, REG denotes the class of regular sets.) However, any generalization of this result for larger functions S will require entirely different techniques and will have to take uniformity into account in some way, since the techniques of [Nep70] (see also <ref> [Vol83] </ref>) show that for each * &gt; 0, NLOG RUD n * , and it follows from [Wra78] that RUD n * contains complete sets for each level of the polynomial hierarchy.
Reference: [VV86] <author> L. Valiant and V. Vazirani. </author> <title> NP is as easy as detecting unique solutions. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 47 </volume> <pages> 85-93, </pages> <year> 1986. </year>
Reference-contexts: * By a construction in the proof of Lemma 13 in [AH90], one can replace the AND and OR gates in the circuit by nice depth 6 probabilistic circuits with MOD 2 gates and small fan-in AND gates. (This construction is based on an idea of Valiant and Vazirani in <ref> [VV86] </ref>; similar constructions may be found in work by Toda [Tod91] and Kannan, Venkateswaran, Vinay and Yao [KVVY92].) The size of the new circuit is only polynomially more than that of the old one.
Reference: [Wil79] <author> A. Wilkie. </author> <title> Applications of complexity theory to 0 -definability of problems in arithmetic. </title> <booktitle> In Lecture Notes in Mathematics, </booktitle> <volume> volume 834, </volume> <pages> pages 363-369. </pages> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference-contexts: this restriction came from (1) the desire to have a tool for talking about the structure of very small complexity classes such as Dspace (log n), and (2) an interest in generalizing the notion of "rudimentary relations," which at that time was the object of a considerable amount of attention <ref> [Smu61, Wra78, Sal73, PD80, Wil79, PHW85] </ref>. In [Jon75], Jones goes on to show that a number of problems are complete for various complexity classes under log-bounded rudimentary reducibility. For a function S, he defines RUD S , the class of S ()- bounded rudimentary predicates.
Reference: [Wil83] <author> R. Wilber. </author> <title> Randomness and the density of hard problems. </title> <booktitle> In Proc. 24th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 335-342, </pages> <year> 1983. </year> <month> 96 </month>
Reference-contexts: 2 .) Very tight Church-randomness hierarchies are known; for all functions t and T such that Dtime (t (n)) is known to be properly contained in Dtime (T (n)), it is known that there is a set in Dtime (T (n)) that is Church-random with respect to Dtime (t (n)) <ref> [Wil83] </ref>. Also, it is known that the PARITY language is Church-random with respect to AC 0 [Cai89, Bab87, H-as87]. However, even languages that are Church-random may have infinitely many "easy" special-case inputs.
Reference: [Wra78] <author> C. Wrathall. </author> <title> Rudimentary predicates and relative computation. </title> <journal> SIAM J. Comput., </journal> <volume> 7 </volume> <pages> 194-209, </pages> <year> 1978. </year>
Reference-contexts: Let E = Dtime (2 O (n) ), NE = Ntime (2 O (n) ) and let RUD denote the class of Rudimentary sets. RUD is the linear time analog of the polynomial hierarchy. It was defined by Smullyan [Smu61] and has been studied extensively (see, e.g., <ref> [Wra78, Lip78, Boo78, PD80, Vol83] </ref>). One result of [Wra78] shows that the rudimentary sets can also be characterized in terms of linear-time nondeterministic oracle Turing machines, in analogy to the usual definition of the polynomial hierarchy. <p> RUD is the linear time analog of the polynomial hierarchy. It was defined by Smullyan [Smu61] and has been studied extensively (see, e.g., [Wra78, Lip78, Boo78, PD80, Vol83]). One result of <ref> [Wra78] </ref> shows that the rudimentary sets can also be characterized in terms of linear-time nondeterministic oracle Turing machines, in analogy to the usual definition of the polynomial hierarchy. It is not known if there is a set in E that is immune to RUD. <p> this restriction came from (1) the desire to have a tool for talking about the structure of very small complexity classes such as Dspace (log n), and (2) an interest in generalizing the notion of "rudimentary relations," which at that time was the object of a considerable amount of attention <ref> [Smu61, Wra78, Sal73, PD80, Wil79, PHW85] </ref>. In [Jon75], Jones goes on to show that a number of problems are complete for various complexity classes under log-bounded rudimentary reducibility. For a function S, he defines RUD S , the class of S ()- bounded rudimentary predicates. <p> These alternative definitions are easily seen to be equivalent. For more formal arguments along these lines, see <ref> [Wra78] </ref>. It has been proved in [Wra78] that if the space bound S is linear then RUD S (viewed as a set of languages) is the same as RUD (the class of rudimentary sets; also denoted as S k k Time (n)). <p> These alternative definitions are easily seen to be equivalent. For more formal arguments along these lines, see <ref> [Wra78] </ref>. It has been proved in [Wra78] that if the space bound S is linear then RUD S (viewed as a set of languages) is the same as RUD (the class of rudimentary sets; also denoted as S k k Time (n)). <p> This completes the proof. We remark that standard translational techniques may be used to prove the following generalization of Theorem 7.1. Note that for the case of S (n) = n, this is the well-known theorem of Wrathall <ref> [Wra78] </ref>. <p> However, any generalization of this result for larger functions S will require entirely different techniques and will have to take uniformity into account in some way, since the techniques of [Nep70] (see also [Vol83]) show that for each * &gt; 0, NLOG RUD n * , and it follows from <ref> [Wra78] </ref> that RUD n * contains complete sets for each level of the polynomial hierarchy. Thus the question of whether or not RUD n * = Dspace (n * ) remains an interesting open problem.
Reference: [Yao85] <author> A. Yao. </author> <title> Separating the polynomial-time hierarchy by oracles. </title> <booktitle> In Proc. 26th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 1-10, </pages> <year> 1985. </year>
Reference-contexts: They showed that constant depth circuits that use NOT gates, and AND and OR gates of unbounded fan-in need superpolynomial size for computing the PARITY (MOD 2 ) function. Their techniques were later refined by Yao <ref> [Yao85] </ref>, H-astad [H-as87] and Aspnes, Beigel, Furst and Rudich [ABFR91] who improved the lower bound to exponential. Since PARITY is reducible to other functions such as MAJORITY, Multiplication and Transitive Closure [FSS84], these functions are outside AC 0 as well. <p> He mentions on more than one occasion the question of whether or not RUD S = Dspace (S (n)), and he explicitly considers the possibility that RUD log = Nspace (log n) ([Jon75], Theorem 23). However, the results of <ref> [H-as87, Yao85] </ref> show that for any function S such that for all *, S (n) = o (n * ), the PARITY language is in REG RUD S . 89 (Here, REG denotes the class of regular sets.) However, any generalization of this result for larger functions S will require entirely
Reference: [Yao89] <author> A. Yao. </author> <title> Circuits and local computation. </title> <booktitle> In Proc. 21st ACM Symposium on Theory of Computing, </booktitle> <pages> pages 186-196, </pages> <year> 1989. </year>
Reference-contexts: As far as the relationship between TC 0 and NC 1 is concerned, we have competing conjectures. Immerman and Landau [IL89] have conjectured that TC 0 = NC 1 , while Yao <ref> [Yao89] </ref> talks about the possibility of TC 0 6= NC 1 . Some very interesting upper bound results are also known for the constant depth circuit classes.
Reference: [Yao90] <author> A. Yao. </author> <title> On ACC and threshold circuits. </title> <booktitle> In Proc. 31st IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 619-627, </pages> <year> 1990. </year> <month> 97 </month>
Reference-contexts: This was improved by Yao <ref> [Yao90] </ref> who showed that every language in ACC can be computed by probabilistic depth two circuits of size 2 (log n) O (1) with a symmetric 3 gate at the top and AND gates of (log n) O (1) fan-in at the second level. <p> We also show that there are languages in PP and C = P that cannot be computed by uniform ACC type circuits of subsubexponential size. Our lower bound results use the techniques developed by Beigel and Tarui [BT91], Yao <ref> [Yao90] </ref> and Toda [Tod91]. As a corollary, we also get the important result that uniform ACC is properly contained in PP (as well as C = P). <p> ACC was first defined and studied in [MT89, Bar89, BT88] under the name ACC 0 . Yao <ref> [Yao90] </ref> defines ACC a little differently; he allows a fixed finite set of moduli S instead of a single modulus m. However, it is easy to see that a MOD m gate can simulate a MOD k gate for any k that divides m. <p> Our main tool in proving these results is the following result: Main Tool There is a set Y in PP such that ACC (subexp) Dtime (n 2 ) Y . To prove the main tool, we will first use the results of Toda [Tod91], Yao <ref> [Yao90] </ref> and Beigel and Tarui [BT91] to convert a circuit family in ACC (subexp) into an equivalent circuit family of depth two circuits with a symmetric gate at level two, AND gates of small fan-in at level one and the input gates at level zero. <p> The above theorem is the most important part of the argument and most of the chapter hereafter is devoted to its proof. The proof uses techniques developed by Beigel and Tarui [BT91], Yao <ref> [Yao90] </ref> and Toda [Tod91]. The reader who is willing to accept the fact that the construction of [BT91] can be carried out uniformly can simply skip Section 3.2 (where Theorem 3.1 is proved). <p> At the beginning of the inductive step, the circuit consists of a symmetric gate on the output level, where the inputs to the symmetric gate are "nice" ACC type circuits with MOD p gates feeding into the symmetric gate. Then, using techniques developed by Toda [Tod91] and Yao <ref> [Yao90] </ref>, we create an equivalent circuit with a new symmetric gate that "absorbs" the level of MOD p gates; thus the new circuit has smaller depth. 35 3.2.1 Nice Circuits Definition 3.1 A circuit family fC n g is well-named if for every n, the name of the output gate of <p> Then there is an equivalent SYMACC circuit family fD n g satisfying the same conditions, such that each path from the output gate to an input gate passes through k 1 MOD gates. Proof. Our proof follows the outline in [BT91], using techniques developed in <ref> [Yao90, Tod91] </ref>. Let L and fC n g be as in the statement of the lemma, where the output gate of C n computes the function A (n; ), where is the number of elements of fC n;i : 1 i f (n)g that evaluate to 1.
References-found: 92

