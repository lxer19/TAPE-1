URL: http://www.cis.ufl.edu/~sharma/courses/cop6755/fall98/vp.ps
Refering-URL: http://www.cis.ufl.edu/~sharma/courses/cop6755/fall98/ddb-design-read.html
Root-URL: http://www.cis.ufl.edu
Note: Contents  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P. M. G. Apers. </author> <title> Data Allocation in Distributed Database Systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 13, No. 3, </volume> <pages> pp. 263-304, </pages> <month> Dec. </month> <year> 1988. </year>
Reference-contexts: There are different alternatives for performing fragmentation and allocation. Apers <ref> [1] </ref> considers data fragmentation and allocation as a single problem. In this paper, we take the approach in which fragmentation is followed by an allocation phase as our primary objective is to obtain an objective function that can be used to compare earlier work/algorithms on data fragmentation.
Reference: [2] <author> M. Babad. </author> <title> A Record and File Partitioning Model. </title> <journal> Communications of ACM, </journal> <volume> Vol. 20, No. 1, </volume> <pages> pp. 22-30, </pages> <month> Jan. </month> <year> 1977. </year>
Reference-contexts: Hoffer [9] developed a non-linear, zero-one program which minimizes a linear combination of storage, retrieval and update costs, with capacity constraints for each file. Babad <ref> [2] </ref> formulated a less restrictive vertical partitioning problem for variable length attributes as a non-linear zero-one program. Hammer and Niamir [8] use a file design cost estimator and a heuristic to arrive at a "bottom up" partitioning scheme.
Reference: [3] <author> S. Ceri, S.B. Navathe, G. Weiderhold. </author> <title> Distribution Design of Logical Database Schemas. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol SE-9, No.4, </volume> <pages> pp. 487-503, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: The overall methodology for distributed database design can be found in <ref> [3] </ref>. Only the distribution aspect of data differs from the conventional non-distributed database design. Conceptually, the distribution design involves data acquisition, partitioning of the database, allocation and replication of the partitions, and local optimization. Partitioning of the database can be done in several ways: vertical, horizontal, and hybrid or mixed.
Reference: [4] <author> S. Ceri, S. Pernici, and G. Weiderhold. </author> <title> Optimization Problems and Solution Methods in the Design of Data Distribution. </title> <journal> Information Sciences, </journal> <volume> Vol 69, No. 3, </volume> <pages> pp. 261-272, </pages> <month> Sept. </month> <year> 1989. </year>
Reference-contexts: Navathe, et al [18] extend the BEA approach and propose a two phase approach for vertical partitioning. Cornell and Yu [6] apply the work of Navathe [18] to the physical design of relational databases. Ceri, Pernici and Wiederhold <ref> [4] </ref> extend the work of Navathe [18] by considering it as a `divide' tool and by adding a `conquer' tool. Navathe and Ra [19] construct a graph-based algorithm to the vertical partitioning problem using heuristics.
Reference: [5] <author> P. Chu. </author> <title> A Transaction-Oriented Approach to Attribute Partitioning. </title> <journal> Information Systems, </journal> <volume> Vol. 17, No. 4, </volume> <pages> pp. 329-342, </pages> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: Ceri, Pernici and Wiederhold [4] extend the work of Navathe [18] by considering it as a `divide' tool and by adding a `conquer' tool. Navathe and Ra [19] construct a graph-based algorithm to the vertical partitioning problem using heuristics. Recently, Chu <ref> [5] </ref> has proposed a transaction-oriented approach to vertical partitioning in which the transaction is used as the decision variable. Eisner and Severance [7] partition a file into primary and secondary subfiles. March and Severance [15] extended this model to incorporate block factors for both primary and secondary memories.
Reference: [6] <author> D. Cornell, and P. Yu. </author> <title> A Vertical Partitioning Algorithm for Relational Databases. </title> <booktitle> Proceedings of the Third International Conference on Data Engineering, </booktitle> <pages> pp. 30-35, </pages> <month> Feb. </month> <year> 1987. </year>
Reference-contexts: Hammer and Niamir [8] use a file design cost estimator and a heuristic to arrive at a "bottom up" partitioning scheme. Navathe, et al [18] extend the BEA approach and propose a two phase approach for vertical partitioning. Cornell and Yu <ref> [6] </ref> apply the work of Navathe [18] to the physical design of relational databases. Ceri, Pernici and Wiederhold [4] extend the work of Navathe [18] by considering it as a `divide' tool and by adding a `conquer' tool.
Reference: [7] <author> M. Eisner, and D. Severance. </author> <title> Mathematical Techniques for Efficient Record Segmentation in Large Shared Databases. </title> <journal> Journal of Association for Computing Machinery, </journal> <volume> Vol. 23, No. 4, </volume> <pages> pp. 619-635, </pages> <month> Oct. </month> <year> 1976. </year>
Reference-contexts: Navathe and Ra [19] construct a graph-based algorithm to the vertical partitioning problem using heuristics. Recently, Chu [5] has proposed a transaction-oriented approach to vertical partitioning in which the transaction is used as the decision variable. Eisner and Severance <ref> [7] </ref> partition a file into primary and secondary subfiles. March and Severance [15] extended this model to incorporate block factors for both primary and secondary memories.
Reference: [8] <author> M. Hammer, and B. Niamir. </author> <title> A Heuristic Approach to Attribute Partitioning. </title> <booktitle> In Proceedings of ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Boston, MA, </address> <pages> pp. 93-101, </pages> <month> May </month> <year> 1979. </year>
Reference-contexts: Hoffer [9] developed a non-linear, zero-one program which minimizes a linear combination of storage, retrieval and update costs, with capacity constraints for each file. Babad [2] formulated a less restrictive vertical partitioning problem for variable length attributes as a non-linear zero-one program. Hammer and Niamir <ref> [8] </ref> use a file design cost estimator and a heuristic to arrive at a "bottom up" partitioning scheme. Navathe, et al [18] extend the BEA approach and propose a two phase approach for vertical partitioning.
Reference: [9] <author> J. Hoffer. </author> <title> An Integer Programming Formulation of Computer Database Design Problems. </title> <journal> Information Sciences, </journal> <volume> Vol. 56, No. 1, </volume> <pages> pp. 29-48, </pages> <month> March </month> <year> 1976. </year>
Reference-contexts: Several algorithms for vertically partitioning relations have been proposed in the literature. Hof-fer and Severance [10] measure the affinity between pairs of attributes and try to cluster attributes according to their pairwise affinity by using the bond energy algorithm (BEA) [14]. Hoffer <ref> [9] </ref> developed a non-linear, zero-one program which minimizes a linear combination of storage, retrieval and update costs, with capacity constraints for each file. Babad [2] formulated a less restrictive vertical partitioning problem for variable length attributes as a non-linear zero-one program.
Reference: [10] <author> J. Hoffer, and D. </author> <title> Severance. </title> <booktitle> The Uses of Cluster Analysis in Physical Database Design In Proceedings of the 1st International Conference on Very Large Databases, </booktitle> <address> Framingham, MA, </address> <pages> pp. 69-86, </pages> <month> August </month> <year> 1975. </year>
Reference-contexts: Lu and Fu [13] used another graph-based approach called "Nearest-Neighbor clustering algorithm" to cluster patterns during character recognition [11]. Several algorithms for vertically partitioning relations have been proposed in the literature. Hof-fer and Severance <ref> [10] </ref> measure the affinity between pairs of attributes and try to cluster attributes according to their pairwise affinity by using the bond energy algorithm (BEA) [14]. Hoffer [9] developed a non-linear, zero-one program which minimizes a linear combination of storage, retrieval and update costs, with capacity constraints for each file.
Reference: [11] <author> A. Jain, and R. Dubes. </author> <title> Algorithms for Clustering Data. </title> <publisher> Prentice Hall Advanced Reference Series, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year> <month> 18 </month>
Reference-contexts: In a later section, we indicate how additional information can be folded into the objective function developed in this paper. The approach presented in this paper also demonstrates the applicability of data clustering criterion used in pattern classification <ref> [11, 23, 13] </ref> for distributed database design 3 . In fact, we use the square-error criterion proposed for data clustering and modify/extend it to an objective function for vertical partitioning. <p> pattern classification and analysis that address the problem of grouping or clustering data using 3 Schkolnick [20] uses data clustering techniques for partitioning a hierarchical structure for an IMS database using detailed cost information which is different from the problem addressed in this paper. 3 various criteria (e.g., square-error clustering <ref> [11] </ref>, Gestalt principle [23], Nearest-neighbor clustering [13] and Fuzzy [11] clustering). The most commonly used partition clustering strategy is based on the square-error criterion. The objective is to obtain a partition which, for a fixed number of clusters, minimizes the square-error. <p> grouping or clustering data using 3 Schkolnick [20] uses data clustering techniques for partitioning a hierarchical structure for an IMS database using detailed cost information which is different from the problem addressed in this paper. 3 various criteria (e.g., square-error clustering <ref> [11] </ref>, Gestalt principle [23], Nearest-neighbor clustering [13] and Fuzzy [11] clustering). The most commonly used partition clustering strategy is based on the square-error criterion. The objective is to obtain a partition which, for a fixed number of clusters, minimizes the square-error. Minimizing square-error, or within-cluster variation, has been shown to be equivalent to maximizing the between-cluster variation. <p> Shaffer et al [21] demonstrate the similarity of the mode-seeking partitioning algorithm [12] to the graph algorithm of Zahn [23] based on minimum spanning trees. Lu and Fu [13] used another graph-based approach called "Nearest-Neighbor clustering algorithm" to cluster patterns during character recognition <ref> [11] </ref>. Several algorithms for vertically partitioning relations have been proposed in the literature. Hof-fer and Severance [10] measure the affinity between pairs of attributes and try to cluster attributes according to their pairwise affinity by using the bond energy algorithm (BEA) [14]. <p> Below, we explain how each of the two components of our Partition Evaluator is derived. 8 3.5 Irrelevant local attribute access cost For the first component, we use the square-error criterion as given in <ref> [11] </ref> for data clustering. The objective here is to obtain a partition which will minimize the square-error for a fixed number of fragments. This criterion assigns a penalty factor whenever irrelevant attributes are accessed in a particular fragment. <p> We would like to have a number of fragments which is typically much less than n and still having the least E 2 L value. In some data clustering techniques, the number of data clusters is minimized using an index called Davies-Bouldwin (DB) index <ref> [11] </ref> which is a measure of the spread between centers of the clusters. <p> For this particular example, other algorithms such as Ra's [19], Zahn's [23], and Binary Vertical Partitioning [18] identify the above mentioned partition set (i.e., 3 fragments) as optimum. In Zahn's approach, once the maximum spanning tree is obtained two different conditions can be used to determine the partitions <ref> [11] </ref>. For this example, when these two conditions were applied to Zahn's algorithm, they produce two different partitioning schemes. One of them is the same as the optimal partitioning scheme obtained as above and the other one is not.
Reference: [12] <author> J. Kittler. </author> <title> A Locally Sensitive Method for Cluster Analysis. </title> <journal> Pattern Recognition, </journal> <volume> Vol. 8, No. 1, </volume> <pages> pp. 22-33, </pages> <month> Jan. </month> <year> 1976. </year>
Reference-contexts: His choice of MST was influenced by the Gestalt principle, which favors the grouping of attribute patterns based on Euclidean distance measure. Shaffer et al [21] demonstrate the similarity of the mode-seeking partitioning algorithm <ref> [12] </ref> to the graph algorithm of Zahn [23] based on minimum spanning trees. Lu and Fu [13] used another graph-based approach called "Nearest-Neighbor clustering algorithm" to cluster patterns during character recognition [11]. Several algorithms for vertically partitioning relations have been proposed in the literature.
Reference: [13] <author> S. Lu, and K. Fu. </author> <title> A Sentence-to-Sentence Clustering Procedure for Pattern Analysis. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> Vol. SMC-8, No. 4, </volume> <pages> pp. 381-389, </pages> <month> Oct. </month> <year> 1978. </year>
Reference-contexts: In a later section, we indicate how additional information can be folded into the objective function developed in this paper. The approach presented in this paper also demonstrates the applicability of data clustering criterion used in pattern classification <ref> [11, 23, 13] </ref> for distributed database design 3 . In fact, we use the square-error criterion proposed for data clustering and modify/extend it to an objective function for vertical partitioning. <p> the problem of grouping or clustering data using 3 Schkolnick [20] uses data clustering techniques for partitioning a hierarchical structure for an IMS database using detailed cost information which is different from the problem addressed in this paper. 3 various criteria (e.g., square-error clustering [11], Gestalt principle [23], Nearest-neighbor clustering <ref> [13] </ref> and Fuzzy [11] clustering). The most commonly used partition clustering strategy is based on the square-error criterion. The objective is to obtain a partition which, for a fixed number of clusters, minimizes the square-error. <p> Shaffer et al [21] demonstrate the similarity of the mode-seeking partitioning algorithm [12] to the graph algorithm of Zahn [23] based on minimum spanning trees. Lu and Fu <ref> [13] </ref> used another graph-based approach called "Nearest-Neighbor clustering algorithm" to cluster patterns during character recognition [11]. Several algorithms for vertically partitioning relations have been proposed in the literature.
Reference: [14] <author> W. McCormick, P. Schweitzer, and T. White. </author> <title> Problem Decomposition and Data Reorganization by a Clustering Technique. </title> <journal> Operations Research, </journal> <volume> Vol. 20, No. 4, </volume> <pages> pp. 741-751, </pages> <month> July </month> <year> 1972. </year>
Reference-contexts: Several algorithms for vertically partitioning relations have been proposed in the literature. Hof-fer and Severance [10] measure the affinity between pairs of attributes and try to cluster attributes according to their pairwise affinity by using the bond energy algorithm (BEA) <ref> [14] </ref>. Hoffer [9] developed a non-linear, zero-one program which minimizes a linear combination of storage, retrieval and update costs, with capacity constraints for each file. Babad [2] formulated a less restrictive vertical partitioning problem for variable length attributes as a non-linear zero-one program. <p> The testbed includes several different vertical partitioning algorithms and modules that compare and evaluate the results of these algorithms. The algorithms that have been incorporated into the testbed are: * Bond Energy Algorithm <ref> [14] </ref>. * Binary Vertical Partitioning Algorithm [18]. * Minyoung Ra's Graphical Algorithm [19]. 14 * Exhaustive Enumeration Algorithm [16]. provided explicitly by the user; it can also be generated by the testbed using a random number generator for a given number of attributes and transactions.
Reference: [15] <author> S. March, and D. Severance. </author> <title> The Determination of Efficient Record Segmentation and Blocking Factors for Shared Data Files. </title> <journal> ACM Transactions on Database Systems Vol. </journal> <volume> 2, No. 3, </volume> <pages> pp. 279-296, </pages> <month> Sept. </month> <year> 1977. </year>
Reference-contexts: Recently, Chu [5] has proposed a transaction-oriented approach to vertical partitioning in which the transaction is used as the decision variable. Eisner and Severance [7] partition a file into primary and secondary subfiles. March and Severance <ref> [15] </ref> extended this model to incorporate block factors for both primary and secondary memories.
Reference: [16] <author> R. Muthuraj. </author> <title> A Formal Approach To The Vertical Partitioning Problem In Distributed Database Design. M.S. </title> <type> Thesis, </type> <institution> Computer and Information Science Department, University of Florida, Gainesville, </institution> <month> August </month> <year> 1992. </year>
Reference-contexts: The algorithms that have been incorporated into the testbed are: * Bond Energy Algorithm [14]. * Binary Vertical Partitioning Algorithm [18]. * Minyoung Ra's Graphical Algorithm [19]. 14 * Exhaustive Enumeration Algorithm <ref> [16] </ref>. provided explicitly by the user; it can also be generated by the testbed using a random number generator for a given number of attributes and transactions. If necessary, the attribute affinity matrix (AAM) is computed by the testbed using AUM depending on the algorithm chosen.
Reference: [17] <author> R. Muthuraj, S. Chakravarthy, R. Varadarajan, and S. B. Navathe. </author> <title> A Formal Approach To The Vertical Partitioning Problem In Distributed Database Design. </title> <booktitle> In Proceedings of Parallel and Distributed Information Systems (PDIS-2), </booktitle> <address> San Diego, </address> <pages> pp. 26-34, </pages> <month> Jan </month> <year> 1993. </year>
Reference-contexts: In fact, we use the square-error criterion proposed for data clustering and modify/extend it to an objective function for vertical partitioning. Our formulation of the objective function for generating n-ary partitions consists of two components that provide the desirable behavior for minimizing transaction processing cost <ref> [17] </ref>. Our long-term objective is to develop a distributed database design testbed in which different algorithms for various phases of distribution design can be mixed and matched. A testbed with a graphical interface that includes various fragmentation algorithms is described in a later section.
Reference: [18] <author> S. Navathe, S. Ceri, G. Wiederhold, and J. Dou. </author> <title> Vertical Partitioning Algorithms for Database Design ACM Transactions on Database Systems, </title> <journal> Vol. </journal> <volume> 9, No. 4, </volume> <pages> pp. 680-710, </pages> <month> Dec. </month> <year> 1984. </year>
Reference-contexts: Furthermore, we delimit our discussion to one of the data fragmentation problems, namely the vertical partitioning problem. Vertical Partitioning (also called attribute partitioning) is a technique that is used during the design of a distributed database to improve the performance of transactions <ref> [18] </ref>. In vertical partitioning, attributes of a relation R 1 are clustered into non-overlapping 2 groups and the relation R is projected into fragment relations according to these attribute groups. These fragments are allocated to different sites of the distributed database. <p> If the fragments closely match the requirements of the set of transactions provided, then the transaction processing cost could be minimized. Vertical partitioning also has its use in partitioning individual files in centralized databases, and dividing data among different levels of memory hierarchies etc. <ref> [18, 20] </ref>. In the case of distributed databases, transaction processing cost is minimized by increasing the local processing of transactions (at a site) as well as by reducing the amount of accesses to data items that are not local. <p> Babad [2] formulated a less restrictive vertical partitioning problem for variable length attributes as a non-linear zero-one program. Hammer and Niamir [8] use a file design cost estimator and a heuristic to arrive at a "bottom up" partitioning scheme. Navathe, et al <ref> [18] </ref> extend the BEA approach and propose a two phase approach for vertical partitioning. Cornell and Yu [6] apply the work of Navathe [18] to the physical design of relational databases. Ceri, Pernici and Wiederhold [4] extend the work of Navathe [18] by considering it as a `divide' tool and by <p> Hammer and Niamir [8] use a file design cost estimator and a heuristic to arrive at a "bottom up" partitioning scheme. Navathe, et al <ref> [18] </ref> extend the BEA approach and propose a two phase approach for vertical partitioning. Cornell and Yu [6] apply the work of Navathe [18] to the physical design of relational databases. Ceri, Pernici and Wiederhold [4] extend the work of Navathe [18] by considering it as a `divide' tool and by adding a `conquer' tool. Navathe and Ra [19] construct a graph-based algorithm to the vertical partitioning problem using heuristics. <p> Navathe, et al <ref> [18] </ref> extend the BEA approach and propose a two phase approach for vertical partitioning. Cornell and Yu [6] apply the work of Navathe [18] to the physical design of relational databases. Ceri, Pernici and Wiederhold [4] extend the work of Navathe [18] by considering it as a `divide' tool and by adding a `conquer' tool. Navathe and Ra [19] construct a graph-based algorithm to the vertical partitioning problem using heuristics. Recently, Chu [5] has proposed a transaction-oriented approach to vertical partitioning in which the transaction is used as the decision variable. <p> The Partition Evaluator values above are the minimum of the values where the second component of the PE is calculated using optimistic (minimum value) estimate. For this particular example, other algorithms such as Ra's [19], Zahn's [23], and Binary Vertical Partitioning <ref> [18] </ref> identify the above mentioned partition set (i.e., 3 fragments) as optimum. In Zahn's approach, once the maximum spanning tree is obtained two different conditions can be used to determine the partitions [11]. <p> Since producing any partitioning scheme using the Bond Energy algorithm is subjective in nature, this Partition Evaluator can be used to guide the partitioning once the Bond Energy Algorithm is applied. Ra's and Binary Vertical Partitioning algorithms were applied to another example with twenty attributes and fifteen transactions <ref> [18] </ref>. The results of these two algorithms were different. Ra's algorithm produces five fragments and Binary Vertical partitioning algorithm produced four fragments. The Partition Evaluator was applied to both the results and it was found that indeed the four fragment result is better than the five fragment result. <p> The testbed includes several different vertical partitioning algorithms and modules that compare and evaluate the results of these algorithms. The algorithms that have been incorporated into the testbed are: * Bond Energy Algorithm [14]. * Binary Vertical Partitioning Algorithm <ref> [18] </ref>. * Minyoung Ra's Graphical Algorithm [19]. 14 * Exhaustive Enumeration Algorithm [16]. provided explicitly by the user; it can also be generated by the testbed using a random number generator for a given number of attributes and transactions.
Reference: [19] <author> S. Navathe and M. Ra. </author> <title> Vertical Partitioning For Database Design: A Graphical Algorithm. </title> <booktitle> In Proceedings of ACM SIGMOD International Conference on Management of Data, Portland, Oregon, </booktitle> <pages> pp. 440-450, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Cornell and Yu [6] apply the work of Navathe [18] to the physical design of relational databases. Ceri, Pernici and Wiederhold [4] extend the work of Navathe [18] by considering it as a `divide' tool and by adding a `conquer' tool. Navathe and Ra <ref> [19] </ref> construct a graph-based algorithm to the vertical partitioning problem using heuristics. Recently, Chu [5] has proposed a transaction-oriented approach to vertical partitioning in which the transaction is used as the decision variable. Eisner and Severance [7] partition a file into primary and secondary subfiles. <p> The Partition Evaluator values above are the minimum of the values where the second component of the PE is calculated using optimistic (minimum value) estimate. For this particular example, other algorithms such as Ra's <ref> [19] </ref>, Zahn's [23], and Binary Vertical Partitioning [18] identify the above mentioned partition set (i.e., 3 fragments) as optimum. In Zahn's approach, once the maximum spanning tree is obtained two different conditions can be used to determine the partitions [11]. <p> The testbed includes several different vertical partitioning algorithms and modules that compare and evaluate the results of these algorithms. The algorithms that have been incorporated into the testbed are: * Bond Energy Algorithm [14]. * Binary Vertical Partitioning Algorithm [18]. * Minyoung Ra's Graphical Algorithm <ref> [19] </ref>. 14 * Exhaustive Enumeration Algorithm [16]. provided explicitly by the user; it can also be generated by the testbed using a random number generator for a given number of attributes and transactions.
Reference: [20] <author> M. Schkolnic. </author> <title> A Clustering Algorithm for Hierarchical Structures, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 2, No. 1, </volume> <pages> pp. 27-44, </pages> <month> March </month> <year> 1977. </year>
Reference-contexts: If the fragments closely match the requirements of the set of transactions provided, then the transaction processing cost could be minimized. Vertical partitioning also has its use in partitioning individual files in centralized databases, and dividing data among different levels of memory hierarchies etc. <ref> [18, 20] </ref>. In the case of distributed databases, transaction processing cost is minimized by increasing the local processing of transactions (at a site) as well as by reducing the amount of accesses to data items that are not local. <p> The derivation of the objective function is given in Appendix A. 2 Related Work A number of data clustering algorithms have been developed in application areas such as statistics and pattern classification and analysis that address the problem of grouping or clustering data using 3 Schkolnick <ref> [20] </ref> uses data clustering techniques for partitioning a hierarchical structure for an IMS database using detailed cost information which is different from the problem addressed in this paper. 3 various criteria (e.g., square-error clustering [11], Gestalt principle [23], Nearest-neighbor clustering [13] and Fuzzy [11] clustering). <p> Eisner and Severance [7] partition a file into primary and secondary subfiles. March and Severance [15] extended this model to incorporate block factors for both primary and secondary memories. Schkolnick <ref> [20] </ref> has examined the problem of partitioning a hierarchical structure (for a hierarchical database) in order to minimize the access time to it for a given access pattern. 2.1 Differences There are important differences in the criteria that are used in traditional clustering and data fragmentation problems.
Reference: [21] <author> E. Shaffer, R. Dubes, and A. Jain. </author> <title> Single-Link Characteristics of a Mode-Seeking Algorithm. </title> <journal> Pattern Recognition, </journal> <volume> Vol. 11, No. 1, </volume> <pages> pp. 65-73, </pages> <month> Jan </month> <year> 1979. </year>
Reference-contexts: Zahn [23] has demonstrated how the minimum spanning tree (MST) can be used to detect clusters. His choice of MST was influenced by the Gestalt principle, which favors the grouping of attribute patterns based on Euclidean distance measure. Shaffer et al <ref> [21] </ref> demonstrate the similarity of the mode-seeking partitioning algorithm [12] to the graph algorithm of Zahn [23] based on minimum spanning trees. Lu and Fu [13] used another graph-based approach called "Nearest-Neighbor clustering algorithm" to cluster patterns during character recognition [11].
Reference: [22] <author> A. Torn. </author> <title> Cluster Analysis Using Seed Points and Density-Determined Hyperspheres as an Aid to Global Optimization. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> Vol. SMC-7, No. 8, </volume> <pages> pp. 610-616, </pages> <month> Oct. </month> <year> 1977. </year>
Reference-contexts: Clusters can also be viewed as regions of the attribute pattern space in which the patterns are dense, separated by regions of low attribute pattern density. In the mode-seeking partitioning algorithm due to Torn <ref> [22] </ref>, clusters are identified by searching for regions of high density, called modes, in the pattern space. Each mode is associated with a cluster center and each pattern is assigned to the cluster with the closest center.
Reference: [23] <author> C. Zahn. </author> <title> Graph-Theoretical Methods for Detecting and Describing Gestalt Clusters. </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-20, No. 1, </volume> <pages> pp. 68-86, </pages> <month> Jan </month> <year> 1971. </year>
Reference-contexts: In a later section, we indicate how additional information can be folded into the objective function developed in this paper. The approach presented in this paper also demonstrates the applicability of data clustering criterion used in pattern classification <ref> [11, 23, 13] </ref> for distributed database design 3 . In fact, we use the square-error criterion proposed for data clustering and modify/extend it to an objective function for vertical partitioning. <p> analysis that address the problem of grouping or clustering data using 3 Schkolnick [20] uses data clustering techniques for partitioning a hierarchical structure for an IMS database using detailed cost information which is different from the problem addressed in this paper. 3 various criteria (e.g., square-error clustering [11], Gestalt principle <ref> [23] </ref>, Nearest-neighbor clustering [13] and Fuzzy [11] clustering). The most commonly used partition clustering strategy is based on the square-error criterion. The objective is to obtain a partition which, for a fixed number of clusters, minimizes the square-error. <p> In the mode-seeking partitioning algorithm due to Torn [22], clusters are identified by searching for regions of high density, called modes, in the pattern space. Each mode is associated with a cluster center and each pattern is assigned to the cluster with the closest center. Zahn <ref> [23] </ref> has demonstrated how the minimum spanning tree (MST) can be used to detect clusters. His choice of MST was influenced by the Gestalt principle, which favors the grouping of attribute patterns based on Euclidean distance measure. <p> His choice of MST was influenced by the Gestalt principle, which favors the grouping of attribute patterns based on Euclidean distance measure. Shaffer et al [21] demonstrate the similarity of the mode-seeking partitioning algorithm [12] to the graph algorithm of Zahn <ref> [23] </ref> based on minimum spanning trees. Lu and Fu [13] used another graph-based approach called "Nearest-Neighbor clustering algorithm" to cluster patterns during character recognition [11]. Several algorithms for vertically partitioning relations have been proposed in the literature. <p> The Partition Evaluator values above are the minimum of the values where the second component of the PE is calculated using optimistic (minimum value) estimate. For this particular example, other algorithms such as Ra's [19], Zahn's <ref> [23] </ref>, and Binary Vertical Partitioning [18] identify the above mentioned partition set (i.e., 3 fragments) as optimum. In Zahn's approach, once the maximum spanning tree is obtained two different conditions can be used to determine the partitions [11].
References-found: 23

