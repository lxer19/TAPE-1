URL: ftp://ftp.cs.washington.edu/tr/1996/09/UW-CSE-96-09-02.PS.Z
Refering-URL: http://www.cs.washington.edu/homes/fix/papers/
Root-URL: 
Title: Sorting by Parallel Insertion on a One-Dimensional Sub-Bus Array  
Author: James D. Fix and Richard E. Ladner 
Address: Seattle 98195  
Affiliation: Department of Computer Science and Engineering University of Washington,  
Pubnum: Technical Report 96-09-02  
Abstract: We consider the problem of sorting on a one-dimensional sub-bus array of processors. The sub-bus broadcast operation makes possible a new class of parallel sorting algorithms whose complexity we analyze with the parallel insertion model. A sorting method, or sorting strategy, in the parallel insertion model, uses a sequence of left and right insertion steps, of which we give two types: greedy insertion steps and simple insertion steps. For two restricted classes of parallel insertion sorting, the one-way and the alternating sorting strategies, we give lower bounds and optimal sorting strategies that exactly match the lower bounds. Optimal alternating sorting strategies are demonstrated to use a factor of two fewer insertion steps on average than odd-even transposition sort and any optimal one-way sorting strategy. For general sorting strategies, we give a weak lower bound and consider a sorting strategy that uses the fewest greedy insertion steps. Finally, we discuss the issues involved in implementing parallel insertion sorting strategies on sub-bus machines. We evaluate the performance of our sorting strategies by applying them to shearsort, a common two-dimensional mesh sorting algorithm, and by contrasting the results with our theoretical results from the parallel insertion model. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Blank. </author> <title> The MasPar MP-1 architecture. </title> <booktitle> In Proceedings of COMPCON Spring 90 The Thirty-Fifth IEEE Computer Society International Conference, </booktitle> <pages> pp. 20-24, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: Fix's research was supported by an Osberg Family Trust Fellowship and by the National Science Foundation under Grant CCR-9301186. z ladner@cs.washington.edu. 1 Sorting by Parallel Insertion on a One-Dimensional Sub-Bus Array 2 been implemented on the MasPar MP-1 and MP-2 parallel computers <ref> [1] </ref>. The MasPar computers are two-dimensional arrays of processors which are controlled by a SIMD parallel program. One-dimensional sub-bus operations are available in each of eight directions with wrap around. <p> As we briefly noted earlier, the sequential sorting algorithm bubble sort is strongly related to our greedy sorting strategies. Suppose that we are sorting a permutation in a standard sequential model. Recall that bubble sort proceeds by making several passes over the permutation, say, from [n] to <ref> [1] </ref>. With each pass of bubble sort, we compare [i] and [i + 1], and exchange their values if they are out of order. The value that moves to the left in each exchange is the least value seen during the pass.
Reference: [2] <author> A. Condon, R. E. Ladner, J. Lampe, and R. Sinha. </author> <title> Complexity of sub-bus mesh computations. </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 25, No. 3, </volume> <pages> pp. 520-539, </pages> <year> 1996. </year> <title> Sorting by Parallel Insertion on a One-Dimensional Sub-Bus Array 33 </title>
Reference-contexts: This suffix minimum computation requires fi (log n) sub-bus operations <ref> [2] </ref>. A logarithmic number of sub-bus steps per insertion step implies that the greedy strategies are unsuitable for practical use on a sub-bus machine.
Reference: [3] <author> M. H. </author> <title> DeGroot. Probability and Statistics, </title> <publisher> Addison-Wesley, </publisher> <year> 1975, 1986. </year>
Reference-contexts: So off (bn=2c; ) has a hypergeometric distribution <ref> [3] </ref> whose mean is H (n) = n Since M (n) H (n) the statement of the theorem follows. 2 We can use this bound in conjunction with theorem 4.1 to say the following about the expected number of steps required by sorting strategies Theorem 4.3 The expected number of steps
Reference: [4] <author> H. B. Demuth. </author> <title> Electronic Data Sorting. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> October, </month> <year> 1956. </year>
Reference-contexts: The number of passes used by bubble sort to sort a permutation is exactly the number of insertion steps used by the left greedy sorting strategy. In fact, our average-case analysis of the left greedy sorting strategy is an alternative to the analysis of bubble sort given by Demuth <ref> [4] </ref> and Knuth [9]. A common improvement of bubble sort is to alternate the directions of the sorting passes over the input. This "cocktail shaker sort" has been observed to use about half as many sorting passes as bubble sort. <p> Because of this connection, any analysis of the number of passes made by bubble sort are relevant to the study of one-way sorting in the parallel insertion model. Such analysis was provided in Demuth's thesis from 1956 <ref> [4] </ref> (a more condensed version of this work appears in [5]) including a derivation of E (n). Knuth [9] gives this analysis in full detail, and also derives the number of sequential sorting operations (exchanges and comparisons) made by bubble sort.
Reference: [5] <author> H. B. Demuth, </author> <title> Electronic Data Sorting. </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 34, No. 4, </volume> <pages> pp. 296-310, </pages> <year> 1985. </year>
Reference-contexts: Because of this connection, any analysis of the number of passes made by bubble sort are relevant to the study of one-way sorting in the parallel insertion model. Such analysis was provided in Demuth's thesis from 1956 [4] (a more condensed version of this work appears in <ref> [5] </ref>) including a derivation of E (n). Knuth [9] gives this analysis in full detail, and also derives the number of sequential sorting operations (exchanges and comparisons) made by bubble sort. For their analyses, Demuth and Knuth considered the number of inversions removed by each pass.
Reference: [6] <author> J. D. Fix and R. E. Ladner. </author> <title> Optimal one-way sorting on a one-dimensional sub-bus array. </title> <booktitle> In Proceedings of the 6th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pp. 586-594, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: 1 Introduction A one-dimensional sub-bus array has a bus connecting the processors which can be segmented into sub-buses on which an active processor can broadcast. The sub-bus broadcast capability has fl A preliminary version of this work was presented in the Sixth Annual Symposium on Discrete Algorithms, 1995 <ref> [6] </ref>. Use of the MasPar MP-1 for this research was made possible by the Parallel Processing Laboratory at the Purdue University School of Electrical and Computer Engineering and NSF award number CDA-9015696. y fix@cs.washington.edu. <p> Our analysis and simulation of alternating greedy sort gives evidence as to why this is the case. We discuss the parallel insertion model's connections with bubble sort in section 5. In our preliminary paper <ref> [6] </ref>, we defined the left adaptive insertion step which is closely related to our left simple insertion step. We proved that the left adaptive sort is an optimal left-only sorting strategy using arguments similar to theorem 3.5 and lemma 3.2 for the left simple insertion sorting strategy.
Reference: [7] <author> N. Haberman. </author> <title> Parallel neighbor-sort (or the glory of the induction principle). </title> <type> Technical Report AD-759 248, </type> <institution> National Technical Information Service, </institution> <year> 1972. </year>
Reference-contexts: The end result is that the versions of shearsort that use oblivious odd-even transposition steps and simple insertion steps perform similarly but shearsort using early-stopping odd-even transposition sort performs best. 1.2 Related Work Odd-even transposition sort <ref> [7, 10] </ref> is used for sorting on linear arrays without sub-buses where only nearest neighbor communication is possible. In odd-even transposition sort, processors swap values with their adjacent processors until order is achieved. <p> Equivalently, in the parallel insertion model you could consider insertion steps where there is at most one consecutive inactive processor. We can then formulate odd-even transposition sort <ref> [10, 7] </ref> which uses value exchanges as another example of a parallel insertion sorting strategy.
Reference: [8] <author> D. E. Knuth. </author> <title> The Art of Computer Programming Volume I: Fundamental Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1973, 1968. </year>
Reference-contexts: Knuth Vol. 1, pages 112-117 <ref> [8] </ref>). Combining this fact with the previous two theorems we have: Theorem 3.3 The expected number of steps in any left-only sorting strategy is at least n n + 3 2 ): Thus, the advantage of a left-only sorting strategy over oblivious odd-even transposition sort can only be slight.
Reference: [9] <author> D. E. Knuth. </author> <title> The Art of Computer Programming Volume III: Sorting and Searching. </title> <publisher> Addison-Wesley, </publisher> <year> 1973, 1968. </year>
Reference-contexts: We have found an interesting relationship between our greedy sorting strategies and sequential sorting algorithms: the permutation that results from the application of a left greedy insertion step is the same as what would result from applying one pass of the sequential sorting algorithm bubble sort <ref> [9] </ref>. The number of passes used by bubble sort to sort a permutation is exactly the number of insertion steps used by the left greedy sorting strategy. <p> In fact, our average-case analysis of the left greedy sorting strategy is an alternative to the analysis of bubble sort given by Demuth [4] and Knuth <ref> [9] </ref>. A common improvement of bubble sort is to alternate the directions of the sorting passes over the input. This "cocktail shaker sort" has been observed to use about half as many sorting passes as bubble sort. <p> The set of inversions and the number of inversions of a permuta tion are useful measures of order within a permutation, and have been applied to the analysis of sequential sorting <ref> [9] </ref>. The only permutation with no inversions is the sorted permutation. <p> Such analysis was provided in Demuth's thesis from 1956 [4] (a more condensed version of this work appears in [5]) including a derivation of E (n). Knuth <ref> [9] </ref> gives this analysis in full detail, and also derives the number of sequential sorting operations (exchanges and comparisons) made by bubble sort. For their analyses, Demuth and Knuth considered the number of inversions removed by each pass.
Reference: [10] <author> F. T. Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees, Hypercubes. </title> <publisher> Mor-gan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: The end result is that the versions of shearsort that use oblivious odd-even transposition steps and simple insertion steps perform similarly but shearsort using early-stopping odd-even transposition sort performs best. 1.2 Related Work Odd-even transposition sort <ref> [7, 10] </ref> is used for sorting on linear arrays without sub-buses where only nearest neighbor communication is possible. In odd-even transposition sort, processors swap values with their adjacent processors until order is achieved. <p> Equivalently, in the parallel insertion model you could consider insertion steps where there is at most one consecutive inactive processor. We can then formulate odd-even transposition sort <ref> [10, 7] </ref> which uses value exchanges as another example of a parallel insertion sorting strategy.
Reference: [11] <author> J. Y-T. Leung and S. M. Shende. </author> <title> On Multi-dimensional Packet Routing for Meshes with Buses. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 20, No. 2, </volume> <pages> pp. 187-197, </pages> <year> 1994. </year>
Reference-contexts: These buses connect rows of processors along each dimension and cannot be segmented into sub-buses (see, for example, [13], <ref> [11] </ref>). A reconfigurable mesh is a general term describing mesh architectures where each processor can dynamically configure connections with its nearest neighbors. The connections give rise to buses connecting arbitrary subsets of processors in the mesh. (e.g., see [12]).
Reference: [12] <author> R. Miller, V. K. Prasanna-Kumar, D. I. Reisis, and Q. F. Stout. </author> <title> Parallel Computations on Reconfigurable Meshes. </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 42, No. 6, </volume> <pages> pp. 678-692, </pages> <year> 1993. </year>
Reference-contexts: A reconfigurable mesh is a general term describing mesh architectures where each processor can dynamically configure connections with its nearest neighbors. The connections give rise to buses connecting arbitrary subsets of processors in the mesh. (e.g., see <ref> [12] </ref>). With only a constant factor of overhead, the reconfigurable meshes can simulate a sub-bus mesh, the sub-bus mesh can simulate a mesh with fixed buses, and a mesh with buses can simulate a conventional mesh. One-dimensional versions of the sub-bus array and the reconfigurable arrays are essentially equivalent.
Reference: [13] <author> V. K. Prasanna-Kumar and C. S. Raghavendra. </author> <title> Array Processor with Multiple Broadcasting. </title> <journal> Journal of Parallel and Distributed Computing Vol. </journal> <volume> 4, No. 2, </volume> <pages> pp. 173-190, </pages> <year> 1987. </year>
Reference-contexts: These buses connect rows of processors along each dimension and cannot be segmented into sub-buses (see, for example, <ref> [13] </ref>, [11]). A reconfigurable mesh is a general term describing mesh architectures where each processor can dynamically configure connections with its nearest neighbors. The connections give rise to buses connecting arbitrary subsets of processors in the mesh. (e.g., see [12]).
Reference: [14] <author> S. Rajasekaran. </author> <title> Mesh Connected Computers with Fixed and Reconfigurable Buses: Packet Routing and Sorting. </title> <journal> IEEE Transactions on Computers Vol. </journal> <volume> 45, No. 5, </volume> <pages> pp. 529-539, </pages> <year> 1996. </year>
Reference-contexts: With only a constant factor of overhead, the reconfigurable meshes can simulate a sub-bus mesh, the sub-bus mesh can simulate a mesh with fixed buses, and a mesh with buses can simulate a conventional mesh. One-dimensional versions of the sub-bus array and the reconfigurable arrays are essentially equivalent. Rajasekaran <ref> [14] </ref> provides a summary and pointers to many of the sorting results on fixed bus and reconfigurable mesh architectures, as well as results for the related problem of routing.
Reference: [15] <author> K. Sado and Y. Igarashi. </author> <title> Some parallel sorts on a mesh-connected processor array and their time efficiency. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 3, </volume> <pages> pp. 398-410, </pages> <year> 1986. </year>
Reference-contexts: In odd-even transposition sort, processors swap values with their adjacent processors until order is achieved. It is commonly used as a subcomponent of optimal sorting algorithms for a two-dimensional array of processors <ref> [15, 16, 17] </ref>. In a similar way, our one-dimensional sorts could be used as subcomponents of these same algorithms for application on a two-dimensional sub-bus array.
Reference: [16] <author> I. Scherson, S. Sen, and A. Shamir. Shear-sort: </author> <title> A true two-dimensional sorting technique for VLSI networks. </title> <booktitle> In IEEE-ACM International Conference on Parallel Processing, </booktitle> <pages> pp. 903-908, </pages> <year> 1986. </year>
Reference-contexts: In odd-even transposition sort, processors swap values with their adjacent processors until order is achieved. It is commonly used as a subcomponent of optimal sorting algorithms for a two-dimensional array of processors <ref> [15, 16, 17] </ref>. In a similar way, our one-dimensional sorts could be used as subcomponents of these same algorithms for application on a two-dimensional sub-bus array. <p> Sorting by Parallel Insertion on a One-Dimensional Sub-Bus Array 29 Table 3: Sub-bus operations per insertion step of the shearsort algorithms. shift broadcast global or Oblivious Odd-Even Shearsort 2 0 0 Odd-Even Shearsort 2 0 1 Simple Shearsort 2 1 1 The shearsort algorithm <ref> [16] </ref> on an n fi n array of processors proceeds in 2dlog 2 ne + 1 phases. The even phases sort the columns of the array independently, moving the smallest values to the top.
Reference: [17] <author> C. Schnorr and A. Shamir. </author> <title> An optimal sorting algorithm for mesh connected computers. </title> <booktitle> In Proceedings of the 18th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 255-263, </pages> <year> 1986. </year>
Reference-contexts: In odd-even transposition sort, processors swap values with their adjacent processors until order is achieved. It is commonly used as a subcomponent of optimal sorting algorithms for a two-dimensional array of processors <ref> [15, 16, 17] </ref>. In a similar way, our one-dimensional sorts could be used as subcomponents of these same algorithms for application on a two-dimensional sub-bus array.
References-found: 17

