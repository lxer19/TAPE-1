URL: http://www.isi.edu/sims/papers/95-sigart.ps
Refering-URL: http://www.isi.edu/~knoblock/
Root-URL: 
Email: qyang@logos.uwaterloo.ca knoblock@isi.edu  
Title: Relating the Performance of Partial-Order Planning Algorithms to Domain Features  
Author: Craig A. Knoblock Qiang Yang 
Address: 4676 Admiralty Way Waterloo, Ont., Canada N2L 3G1 Marina del Rey, CA 90292  
Affiliation: Information Sciences Institute University of Waterloo University of Southern California Computer Science Department  
Abstract: The AI planning field has a long history of introducing yet another search algorithm that is believed to be the best in all domains. Some recent examples are nonlin, tweak and snlp. In this paper we show, by directly comparing the above three planners, that the quest for an overall winner is doomed to fail. We first argue that these three planners differ in a variety of ways, including methods for termination check, causal-link protection, and subgoal selection. These differences entail different search behaviors in terms of factors such as the branching factor, the search depth and the time spent by the algorithm on each search node. Furthermore, the search behavior is closely related to the characteristics of the problem domain in which a planner is operating. In this paper we identify one such domain feature, expressed as the ratio of the number of negative threats to the number of positive threats. We present an artificial domain where we can control this ratio and show that in fact the planners show radically different performance as the ratio is varied in this domain. The implication of this result for someone implementing a planning system is that the most appropriate algorithm will depend on the types of problems to be solved by the planner. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Anthony Barrett and Daniel S. Weld. </author> <title> Partial-order planning: Evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <volume> 67(1) </volume> <pages> 71-112, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction There has been a great deal of work recently on comparing total-order and partial-order planning systems <ref> [1, 9] </ref>, but little has been done in comparing different partial-order planners themselves. Furthermore, there has been a great deal of speculation on whether a particular partial-order planner is always better than another. <p> First, we present the snlp algorithm based on the algorithm descriptions of McAllester and Rosen-blitt's Find-Completion algorithm [8] and Barrett and Weld's POCL algorithm <ref> [1] </ref>. We start with this algorithm because we can build on the elegant algorithm description and implementation provided in previous work. <p> Then, we describe the changes necessary to transform the snlp algorithm into algorithms that implement nonlin [10] and tweak [2]. 2.1 The snlp Algorithm In the planning algorithms that we consider below, we follow the notations used by Barrett and Weld <ref> [1] </ref>. A plan is a 3-tuple, represented as hS; O; Bi, where S is a number of steps, O is a set of ordering constraints, and B the set of variable binding constraints associated with a plan. <p> The following algorithm which is an adaptation of McAllester and Rosenblitt's Find-Completion algorithm [8] and Bar-rett and Weld's POCL algorithm <ref> [1] </ref>, has been shown to be sound, complete, and systematic (never generates redundant plans). Let the notation codesignate (R) denote the codesignation constraints imposed on a set of variable pairs R. <p> Below, we present the results of our empirical tests on different points of the spectrum of as defined by the ratio R. In the experiments, each problem was run in snlp <ref> [1] </ref>, a version of nonlin and a version of tweak that were modified from snlp. The problems were solved using a best-first search on the solution size in order to fairly compare the size of the problem spaces being searched by each system.
Reference: [2] <author> David Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3) </volume> <pages> 333-377, </pages> <year> 1987. </year>
Reference-contexts: We start with this algorithm because we can build on the elegant algorithm description and implementation provided in previous work. Then, we describe the changes necessary to transform the snlp algorithm into algorithms that implement nonlin [10] and tweak <ref> [2] </ref>. 2.1 The snlp Algorithm In the planning algorithms that we consider below, we follow the notations used by Barrett and Weld [1]. <p> of goal protection methods employed by snlp and nonlin are relatively minor. 2.3 The tweak Algorithm The primary difference between tweak and the two previous algorithms is that instead of building explicit causal links for each condition established by the planner, tweak uses what is called the Modal Truth Criterion <ref> [2] </ref> to check the truth of each precondition in the plan. This difference results in four changes from the snlp algorithm and only three changes from the nonlin algorithm. The differences are in termination, separation, goal selection, and threat identification. Each of these are discussed in turn. <p> Each of these are discussed in turn. Since tweak does not maintain explicit causal links for each precondition, it must test the truth of all of the precondi tions in the plan to determine when the plan is complete. It does this using the Modal Truth Criterion check <ref> [2] </ref>. This algorithm takes O (n 3 ) time, as compared with the O (1) time termination routine of snlp. We will refer to the algorithm that implements the Modal Truth Criterion as mtc.
Reference: [3] <author> Subbarao Kambhampati. </author> <title> On the utility of systematic-ity: Understanding tradeoffs between redundancy and commitment in partial order planning. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Chambery, France, </address> <year> 1993. </year>
Reference-contexts: An exception Detected by each of the Algorithms the Algorithms is the work by Kambhampati <ref> [3, 4] </ref>, who (concurrently with our work) carried out a set of experiments to test the merits of different partial-order planners. In that work, a pair of partial-order planners MP and MP-I are proposed that build upon snlp and nonlin by making use of multiple contributors to achieve a precondition. <p> Experiments in a set of closely related domains were conducted, and the resulting comparison of snlp, nonlin, tweak, MP, and MP-I show that MP-I outperforms all of the rest, and that nonlin in one test performed much better than both snlp and tweak (Figure 8, <ref> [3] </ref>). Contrasting Kambhampati's results to ours, we note that the former is based on a small set of fixed domains.
Reference: [4] <author> Subbarao Kambhampati. </author> <title> Multi-contributor causal structures for planning: A formalization and evaluation. </title> <booktitle> Artificial Intelligence, Fall, </booktitle> <year> 1994. </year>
Reference-contexts: An exception Detected by each of the Algorithms the Algorithms is the work by Kambhampati <ref> [3, 4] </ref>, who (concurrently with our work) carried out a set of experiments to test the merits of different partial-order planners. In that work, a pair of partial-order planners MP and MP-I are proposed that build upon snlp and nonlin by making use of multiple contributors to achieve a precondition.
Reference: [5] <author> Subbarao Kambhampati. </author> <title> Refinement search as a unifying framework for analyzing planning algorithms. </title> <booktitle> In Fourth International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <address> Bonn, Ger-many, </address> <year> 1994. </year>
Reference-contexts: From this perspective, the work by Kambhampati can be seen as orthogonal to ours; while we search for domain features by which to determine the relative performance of each system, Kambhampati looks for the best planner on a single point in the spectrum of features. Kambhampati <ref> [5] </ref> has also developed a general framework for Planning Agents 7 SIGART Bulletin, Vol. 6, No. 1 comparing the different design choices in a partial-order plan-ning algorithm. His paper provides an excellent analysis of the different design tradeoffs, but does not provide an empirical validation for his conclusions.
Reference: [6] <author> Subbarao Kambhampati, Craig Knoblock, and Qiang Yang. </author> <title> Planning as refinement search: A unified framework for evaluating the design tradeoffs in partial order planning. </title> <type> Technical Report 94-002, </type> <institution> Department of Computer Science and Engineering, Arizona State University, </institution> <year> 1994. </year>
Reference-contexts: His paper provides an excellent analysis of the different design tradeoffs, but does not provide an empirical validation for his conclusions. More recently, we merged the work described here [7] with the design framework developed by Kambhampati to provide a comprehensive framework, analysis, and evaluation <ref> [6] </ref>. 6 Conclusions In summary, we have presented a detailed comparison of three specific versions of the snlp, nonlin, and tweak planning algorithms. We have classified their differences along several dimensions, including termination check, subgoal selection and causal-link protection.
Reference: [7] <author> Craig A. Knoblock and Qiang Yang. </author> <title> Evaluating the tradeoffs in partial-order planning algorithms. </title> <booktitle> In Proceedings of the Canadian Artificial Intelligence Conference, </booktitle> <year> 1994. </year>
Reference-contexts: We start by fixing particular versions of the three planners, and analyzing their inherent differences. On the surface, the fl This is a revised version of an earlier paper <ref> [7] </ref> that won the Best Paper Award at the Canadian Artificial Intelligence Conference. The first author is supported by Rome Laboratory of the Air Force Systems Command and the Defense Advanced Research Projects Agency under contract no. F30602-91-C-0081. <p> His paper provides an excellent analysis of the different design tradeoffs, but does not provide an empirical validation for his conclusions. More recently, we merged the work described here <ref> [7] </ref> with the design framework developed by Kambhampati to provide a comprehensive framework, analysis, and evaluation [6]. 6 Conclusions In summary, we have presented a detailed comparison of three specific versions of the snlp, nonlin, and tweak planning algorithms.
Reference: [8] <author> David McAllester and David Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <address> Anaheim, CA, </address> <year> 1991. </year>
Reference-contexts: Finally, we present empirical results on an artificial domain to support the analysis. 2 Comparison of the Algorithms This section presents the snlp, tweak, and nonlin planning algorithms. First, we present the snlp algorithm based on the algorithm descriptions of McAllester and Rosen-blitt's Find-Completion algorithm <ref> [8] </ref> and Barrett and Weld's POCL algorithm [1]. We start with this algorithm because we can build on the elegant algorithm description and implementation provided in previous work. <p> Likewise, S k is a negative threat if it can possibly be between S i and S j , and deletes a literal q that can possibly be bound to p. The following algorithm which is an adaptation of McAllester and Rosenblitt's Find-Completion algorithm <ref> [8] </ref> and Bar-rett and Weld's POCL algorithm [1], has been shown to be sound, complete, and systematic (never generates redundant plans). Let the notation codesignate (R) denote the codesignation constraints imposed on a set of variable pairs R.
Reference: [9] <author> Steven Minton, John Bresina, and Mark Drummond. </author> <title> Commitment strategies in planning: A comparative analysis. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence, </booktitle> <address> Australia, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction There has been a great deal of work recently on comparing total-order and partial-order planning systems <ref> [1, 9] </ref>, but little has been done in comparing different partial-order planners themselves. Furthermore, there has been a great deal of speculation on whether a particular partial-order planner is always better than another.
Reference: [10] <author> Austin Tate. </author> <title> Generating project networks. </title> <booktitle> In Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 888-900, </pages> <address> Cambridge, MA, </address> <year> 1977. </year> <journal> Planning Agents 8 SIGART Bulletin, </journal> <volume> Vol. 6, No. </volume> <pages> 1 </pages>
Reference-contexts: We start with this algorithm because we can build on the elegant algorithm description and implementation provided in previous work. Then, we describe the changes necessary to transform the snlp algorithm into algorithms that implement nonlin <ref> [10] </ref> and tweak [2]. 2.1 The snlp Algorithm In the planning algorithms that we consider below, we follow the notations used by Barrett and Weld [1]. <p> Recursive invocation: snlp (hS 0 ; O 0 ; B 0 i; T 0 ; G 0 ; L 0 ). 2.2 The nonlin Algorithm snlp is a descendant of nonlin <ref> [10] </ref>, so the algorithms are quite similar and differ mainly in which threats they protect against and how they perform separation.
References-found: 10

