URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1993/UM-CS-1993-066.ps
Refering-URL: http://laser.cs.umass.edu/abstracts/93-066.html
Root-URL: 
Title: An Information Flow Model of Fault Detection  
Author: Margaret C. Thompson Debra J. Richardson Lori A. Clarke 
Address: Amherst, MA 01003  Irvine, CA 92717  
Affiliation: Department of Computer Science Department of Information University of Massachusetts and Computer Science  University of California  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [ABD + 79] <author> A.T. Acree, T. A. Budd, R.A. DeMillo, R.J. Lip-ton, and F.G. Sayward. </author> <title> Mutation analysis. </title> <type> Technical Report TR GIT-ICS-79/08, </type> <institution> Georgia Institute of Technology, </institution> <month> September </month> <year> 1979. </year>
Reference: [BDLS78] <author> T.A. Budd, R.A. DeMillo, R.J. Lipton, and F.G. Sayward. </author> <title> The design of a prototype mutation system for program testing. </title> <booktitle> In Proceedings NCC, </booktitle> <year> 1978. </year>
Reference: [BMD91a] <institution> The Procurement of Safety-Critical Software in Defence Equipment. British Ministry of Defence, </institution> <note> Interim Defence Standard 00-55, Issue 1, </note> <month> April </month> <year> 1991. </year>
Reference-contexts: This information might be based on safety-critical or mission-critical analyses (such as those proposed by the British MOD Standard 0055 & 0056 <ref> [BMD91a, BMD91b] </ref>) or software safety analysis [LH83]. Testing approaches must determine and test for the potentially catastrophic faults associated with these components.
Reference: [BMD91b] <institution> Hazard Analysis and Safety Classification of the Computer and Programmable Electronic System elements of Defence Equipment. British Ministry of Defence, </institution> <note> Interim Defence Standard 00-56, Issue 1, </note> <month> April </month> <year> 1991. </year>
Reference-contexts: This information might be based on safety-critical or mission-critical analyses (such as those proposed by the British MOD Standard 0055 & 0056 <ref> [BMD91a, BMD91b] </ref>) or software safety analysis [LH83]. Testing approaches must determine and test for the potentially catastrophic faults associated with these components.
Reference: [Bud83] <author> Timothy A. Budd. </author> <title> The portable mutation testing suite. </title> <type> Technical Report TR 83-8, </type> <institution> University of Arizona, </institution> <month> March </month> <year> 1983. </year>
Reference: [CPRZ86] <author> L.A. Clarke, A. Podgursky, D.J. Richardson, and S.J. Zeil. </author> <title> An investigation of data flow path selection criteria. </title> <booktitle> In Proceedings of the ACM SIGSOFT/IEEE Workshop on Software Testing, </booktitle> <pages> pages 23-32, </pages> <address> Banff, Canada, </address> <month> July </month> <year> 1986. </year>
Reference-contexts: Moreover, while other research has only considered transfer along a particular path, Relay considers how transfer may occur concurrently along several intersecting information flow chains. Interactions occur at these intersection points and may mask potential failures. The Relay model pulls together research in fault-based testing, data flow path selection <ref> [Nta81, Nta82, Nta84, LK83, CPRZ86, RW85] </ref>, program slices [Wei84], and program dependence analysis [PC90]. The Relay model provides an interesting basis for future work in software analysis and testing. Additional research is needed in how the comprehensive transfer information provided by Relay may be used in guiding testing.
Reference: [DLS79] <editor> R.A. DeMillo, R.J. Lipton, and F.G. Sayward. </editor> <title> Program mutation: A new approach to program testing. In InfoTech State of the Art Report: </title> <journal> Software Testing, </journal> <volume> Vol. 2, </volume> <pages> pages 107-128, </pages> <year> 1979. </year>
Reference: [Fos80] <author> Kenneth A. Foster. </author> <title> Error sensitive test case analysis (ESTCA). </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-6(3):258-264, </volume> <month> May </month> <year> 1980. </year>
Reference: [FOW87] <author> J. Ferrante, K.J. Ottenstein, and J.D. Warren. </author> <title> The program dependence graph and its use in optimization. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 9(5) </volume> <pages> 319-349, </pages> <month> July </month> <year> 1987. </year>
Reference: [How82] <author> William E. Howden. </author> <title> Weak mutation testing and completeness of test sets. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-8(2):371-379, </volume> <month> July </month> <year> 1982. </year>
Reference: [LH83] <author> Nancy G. Leveson and Peter R. Harvey. </author> <title> Analyzing software safety. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 9(5) </volume> <pages> 569-579, </pages> <month> September </month> <year> 1983. </year>
Reference-contexts: This information might be based on safety-critical or mission-critical analyses (such as those proposed by the British MOD Standard 0055 & 0056 [BMD91a, BMD91b]) or software safety analysis <ref> [LH83] </ref>. Testing approaches must determine and test for the potentially catastrophic faults associated with these components. For example, in an x-ray machine, the component controlling the level of radiation requires particular scrutiny, and faults that could lead to lethal doses, if possible, should be identified and analyzed. <p> We can analyze this failure condition and transfer route information to determine if a hypothetical fault or state potential failure could lead to a critical failure. A failure condition leading to a critical failure is similar to the "failure scenarios" constructed by software fault tree analysis <ref> [LH83] </ref>. Third, we may use the failure condition to direct selection of additional test data for execution. 5 Major Contributions and Summary This paper presents the Relay model of faults and failures, focusing on transfer of an incorrect intermediate state, or potential failure, from a faulty statement to output.
Reference: [LK83] <author> Janusz W. Laski and Bogdan Korel. </author> <title> A data flow oriented program testing strategy. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-9(3):347-354, </volume> <month> May </month> <year> 1983. </year>
Reference-contexts: Moreover, while other research has only considered transfer along a particular path, Relay considers how transfer may occur concurrently along several intersecting information flow chains. Interactions occur at these intersection points and may mask potential failures. The Relay model pulls together research in fault-based testing, data flow path selection <ref> [Nta81, Nta82, Nta84, LK83, CPRZ86, RW85] </ref>, program slices [Wei84], and program dependence analysis [PC90]. The Relay model provides an interesting basis for future work in software analysis and testing. Additional research is needed in how the comprehensive transfer information provided by Relay may be used in guiding testing.
Reference: [Mor84] <author> Larry J. Morell. </author> <title> A Theory of Error-Based Testing. </title> <type> PhD thesis, </type> <institution> University of Maryland, </institution> <month> April </month> <year> 1984. </year>
Reference: [Nta81] <author> Simeon C. Ntafos. </author> <title> On testing with required elements. </title> <booktitle> In Proceedings of COMPSAC '81, </booktitle> <pages> pages 132-139, </pages> <month> November </month> <year> 1981. </year>
Reference-contexts: Moreover, while other research has only considered transfer along a particular path, Relay considers how transfer may occur concurrently along several intersecting information flow chains. Interactions occur at these intersection points and may mask potential failures. The Relay model pulls together research in fault-based testing, data flow path selection <ref> [Nta81, Nta82, Nta84, LK83, CPRZ86, RW85] </ref>, program slices [Wei84], and program dependence analysis [PC90]. The Relay model provides an interesting basis for future work in software analysis and testing. Additional research is needed in how the comprehensive transfer information provided by Relay may be used in guiding testing.
Reference: [Nta82] <author> Simeon C. Ntafos. </author> <title> On required element testing. </title> <type> Technical Report 123, </type> <institution> Computer Science Program, University of Texas at Dallas, </institution> <month> November </month> <year> 1982. </year>
Reference-contexts: Moreover, while other research has only considered transfer along a particular path, Relay considers how transfer may occur concurrently along several intersecting information flow chains. Interactions occur at these intersection points and may mask potential failures. The Relay model pulls together research in fault-based testing, data flow path selection <ref> [Nta81, Nta82, Nta84, LK83, CPRZ86, RW85] </ref>, program slices [Wei84], and program dependence analysis [PC90]. The Relay model provides an interesting basis for future work in software analysis and testing. Additional research is needed in how the comprehensive transfer information provided by Relay may be used in guiding testing.
Reference: [Nta84] <author> Simeon C. Ntafos. </author> <title> On required element testing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(6):795-803, </volume> <month> November </month> <year> 1984. </year>
Reference-contexts: Moreover, while other research has only considered transfer along a particular path, Relay considers how transfer may occur concurrently along several intersecting information flow chains. Interactions occur at these intersection points and may mask potential failures. The Relay model pulls together research in fault-based testing, data flow path selection <ref> [Nta81, Nta82, Nta84, LK83, CPRZ86, RW85] </ref>, program slices [Wei84], and program dependence analysis [PC90]. The Relay model provides an interesting basis for future work in software analysis and testing. Additional research is needed in how the comprehensive transfer information provided by Relay may be used in guiding testing.
Reference: [Off88] <author> A. Jefferson Offutt. </author> <title> Automatic Test Data Generation. </title> <type> PhD thesis, </type> <institution> Georgia Institute of Technology, </institution> <month> August </month> <year> 1988. </year>
Reference: [PC90] <author> H. Andy Podgurski and Lori A. Clarke. </author> <title> A formal model of program dependences and its implications for software testing, debugging, and maintenance. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(9) </volume> <pages> 965-979, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Interactions occur at these intersection points and may mask potential failures. The Relay model pulls together research in fault-based testing, data flow path selection [Nta81, Nta82, Nta84, LK83, CPRZ86, RW85], program slices [Wei84], and program dependence analysis <ref> [PC90] </ref>. The Relay model provides an interesting basis for future work in software analysis and testing. Additional research is needed in how the comprehensive transfer information provided by Relay may be used in guiding testing. Although we have hypothesized its applicability to safety critical systems, in depth studies are needed.
Reference: [RT88] <author> Debra J. Richardson and Margaret C. Thomp-son. </author> <title> The relay model of error detection and its application. </title> <booktitle> In Proceedings of the Second Workshop on Software Testing, Verification, and Analysis, </booktitle> <month> July </month> <year> 1988. </year>
Reference-contexts: To develop such conditions for use in testing and analysis, we hypothesize the existence of a fault and then derive the failure condition for the fault. The formula for a failure condition is summarized in original state potential failure condition, the derivation of which is presented in <ref> [RT88, Tho91a] </ref>, and the condition to guarantee transfer, the construction of which is demonstrated here.
Reference: [RT93] <author> Debra J. Richardson and Margaret C. Thomp-son. </author> <title> An analysis of test data selection criteria using the relay model of faults and failures. </title> <note> to appear IEEE Transactions on Software Engineering, </note> <month> May </month> <year> 1993. </year>
Reference: [RW85] <author> Sandra Rapps and Elaine J. Weyuker. </author> <title> Selecting software test data using data flow information. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(4):367-375, </volume> <month> April </month> <year> 1985. </year>
Reference-contexts: Moreover, while other research has only considered transfer along a particular path, Relay considers how transfer may occur concurrently along several intersecting information flow chains. Interactions occur at these intersection points and may mask potential failures. The Relay model pulls together research in fault-based testing, data flow path selection <ref> [Nta81, Nta82, Nta84, LK83, CPRZ86, RW85] </ref>, program slices [Wei84], and program dependence analysis [PC90]. The Relay model provides an interesting basis for future work in software analysis and testing. Additional research is needed in how the comprehensive transfer information provided by Relay may be used in guiding testing.
Reference: [Tho91a] <author> Margaret C. Thompson. </author> <title> An Investigation of Fault-Based Testing Using the Relay Model. </title> <type> PhD thesis, </type> <institution> University of Massachusetts at Amherst, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: To develop such conditions for use in testing and analysis, we hypothesize the existence of a fault and then derive the failure condition for the fault. The formula for a failure condition is summarized in original state potential failure condition, the derivation of which is presented in <ref> [RT88, Tho91a] </ref>, and the condition to guarantee transfer, the construction of which is demonstrated here. <p> Fortunately, in some cases fault independent conditions may exist while at other times sufficient (but not necessary) conditions can be constructed. Fault independence and dependence of the conditions is discussed more fully in <ref> [TRC92, Tho91a] </ref>. The transfer set condition for T S X is derived in the following 4 steps. <p> Although we have hypothesized its applicability to safety critical systems, in depth studies are needed. Another area of future research is in empirical studies. The rigor of the Relay model has been beneficial in demonstrating weaknesses in previous studies on fault based testing approaches <ref> [TRC92, Tho91a] </ref>. Given the insight of Relay, we hope to investigate whether certain constructs in the code are more prone to coincidental correctness by looking at transfer through different information flow constructs. Such studies should provide insight into how to handle different types of code.
Reference: [Tho91b] <author> Margaret C. Thompson. </author> <title> Single iteration chain loop analysis and identification of transfer sets and transfer routes for the relay model. </title> <type> Technical Report 91-22, </type> <institution> Computer and Information Science, University of Massachusetts, Amherst, </institution> <month> May </month> <year> 1991. </year>
Reference: [TRC92] <author> Margaret C. Thompson, Debra J. Richardson, and Lori A. Clarke. </author> <title> Information flow transfer in the Relay model. </title> <type> Technical Report 92-62, </type> <institution> Computer Science, University of Massachusetts, Amherst, </institution> <month> August </month> <year> 1992. </year>
Reference-contexts: Fortunately, in some cases fault independent conditions may exist while at other times sufficient (but not necessary) conditions can be constructed. Fault independence and dependence of the conditions is discussed more fully in <ref> [TRC92, Tho91a] </ref>. The transfer set condition for T S X is derived in the following 4 steps. <p> Although we have hypothesized its applicability to safety critical systems, in depth studies are needed. Another area of future research is in empirical studies. The rigor of the Relay model has been beneficial in demonstrating weaknesses in previous studies on fault based testing approaches <ref> [TRC92, Tho91a] </ref>. Given the insight of Relay, we hope to investigate whether certain constructs in the code are more prone to coincidental correctness by looking at transfer through different information flow constructs. Such studies should provide insight into how to handle different types of code.
Reference: [Wei84] <author> Mark Weiser. </author> <title> Program slicing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(4), </volume> <month> July </month> <year> 1984. </year>
Reference-contexts: Interactions occur at these intersection points and may mask potential failures. The Relay model pulls together research in fault-based testing, data flow path selection [Nta81, Nta82, Nta84, LK83, CPRZ86, RW85], program slices <ref> [Wei84] </ref>, and program dependence analysis [PC90]. The Relay model provides an interesting basis for future work in software analysis and testing. Additional research is needed in how the comprehensive transfer information provided by Relay may be used in guiding testing.
Reference: [WH88] <author> M.R. Woodward and K. Halewood. </author> <title> From weak to strong, dead or alive? an analysis of some mutation testing issues. </title> <booktitle> In Proceedings of the Second Workshop on Software Testing, Verification, and Analysis, </booktitle> <month> July </month> <year> 1988. </year>
Reference-contexts: Such studies should provide insight into how to handle different types of code. If such code is identified, then some partial information flow transfer conditions through such code, resulting in a mutation approach between strong and weak, known as firm mutation testing <ref> [WH88] </ref>, may prove sufficient to achieve high fault detection.
Reference: [Zei83] <author> Steven J. Zeil. </author> <title> Testing for perturbations of program statements. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-9(3):335-346, </volume> <month> May </month> <year> 1983. </year>
References-found: 27

