URL: ftp://ftp.eecs.umich.edu/groups/gasm/systems.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.cs.umich.edu
Email: glaesser@uni-paderborn.de  
Title: Systems Level Specification and Modelling of Reactive Systems: Concepts, Methods, and Tools  
Author: Uwe Glasser 
Address: D-33098 Paderborn, Germany  
Affiliation: Heinz Nixdorf Institut, Universitat-GH Paderborn,  
Abstract: As part of a comprehensive design concept for complex reactive systems we investigate the derivation of formal requirements and design specifications at systems level. We discuss the meaning of correctness with respect to the embedding of mathematical models into the physical world. A crucial aspect in our attempt to make the logic link between the application domain specific view and the formal view explicit is the concept of evolving algebra [13, 14]; it provides the formal basis of a specification methodology which has successfully been applied to a variety of specification and verification problems. We introduce an evolving algebra abstract machine as a conceptual framework for the development of tools for machine based analysis and execution of evolving algebra specifications.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Ch. Beierle, E. Borger, I. D - urd -anovic U. Glasser, and E. Riccobene. </author> <title> An evolving algebra solution to the steam-boiler control specification problem. Seminar on Methods for Specification and Semantics (Dagstuhl, </title> <month> June </month> <year> 1995), </year> <type> Report, </type> <year> 1995. </year>
Reference-contexts: In such a context the use of evolving algebras allows an incremental derivation of the ground model out of the informal description. It is then possible to construct the EA rules together with the signature of static state representations in a straightforward manner <ref> [1] </ref>. A special problem in the construction of the ground model is the definition of the interface to the real world. To attach the model to the real world, one usually needs to refer certain non-mathematical entities expressing conditions or assumptions about events outside the model.
Reference: 2. <author> E. Borger. </author> <title> Annotated bibliography on evolving algebras. </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: and the familiar description style, EA specifications enable an intuitive understanding as `pseudocode over abstract data.' 4 Evolving algebras have been applied with considerable success to various problems in mathematical modelling of non-trivial architectures [5, 8, 9], languages [3, 4, 6], and protocols [15, 18] (for further references see also <ref> [2] </ref>). The basic concept of sequential evolving algebras is introduced in [13].
Reference: 3. <author> E. Borger, U. Glasser, and W. Mueller. </author> <title> Formal definition of an abstract VHDL'93 simulator by EA-machines. </title> <editor> In C. Delgado Kloos and Peter T. Breuer, editors, </editor> <booktitle> Semantics of VHDL, volume 307 of The Kluwer International Series in Engineering and Computer Science. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995. </year>
Reference-contexts: Due to the operational view and the familiar description style, EA specifications enable an intuitive understanding as `pseudocode over abstract data.' 4 Evolving algebras have been applied with considerable success to various problems in mathematical modelling of non-trivial architectures [5, 8, 9], languages <ref> [3, 4, 6] </ref>, and protocols [15, 18] (for further references see also [2]). The basic concept of sequential evolving algebras is introduced in [13]. <p> The example is part of a semantic definition for the hardware description language VHDL <ref> [3] </ref>. Note that it is not really necessary to be familiar with VHDL for the purpose we use it here. The required details will be explained on the way.
Reference: 4. <author> E. Borger and D. Rosenzweig. </author> <title> A mathematical definition of full Prolog. </title> <booktitle> Science of Computer Programming, </booktitle> <year> 1994. </year>
Reference-contexts: Due to the operational view and the familiar description style, EA specifications enable an intuitive understanding as `pseudocode over abstract data.' 4 Evolving algebras have been applied with considerable success to various problems in mathematical modelling of non-trivial architectures [5, 8, 9], languages <ref> [3, 4, 6] </ref>, and protocols [15, 18] (for further references see also [2]). The basic concept of sequential evolving algebras is introduced in [13].
Reference: 5. <author> E. Borger and D. Rosenzweig. </author> <title> The WAM definition and compiler correctness. </title> <editor> In L. C. Beierle and L. Plumer, editors, </editor> <booktitle> Logic Programming: Formal Methods and Practical Applications, Series in Computer Science and Artificial Intelligence. El-sevier Science B.V./North-Holland, </booktitle> <year> 1995. </year>
Reference-contexts: Due to the operational view and the familiar description style, EA specifications enable an intuitive understanding as `pseudocode over abstract data.' 4 Evolving algebras have been applied with considerable success to various problems in mathematical modelling of non-trivial architectures <ref> [5, 8, 9] </ref>, languages [3, 4, 6], and protocols [15, 18] (for further references see also [2]). The basic concept of sequential evolving algebras is introduced in [13].
Reference: 6. <author> E. Borger, I. D - urd -anovic, and D. Rosenzweig. </author> <title> Occam: Specification and compiler correctness. Part I: The primary model. </title> <editor> In E.-R. Olderog, editor, </editor> <booktitle> Proc. of PRO-COMET'94 (IFIP Working Conference on Programming Concepts, Methods and Calculi), </booktitle> <pages> pages 489-508. </pages> <publisher> North-Holland, </publisher> <year> 1994. </year>
Reference-contexts: Due to the operational view and the familiar description style, EA specifications enable an intuitive understanding as `pseudocode over abstract data.' 4 Evolving algebras have been applied with considerable success to various problems in mathematical modelling of non-trivial architectures [5, 8, 9], languages <ref> [3, 4, 6] </ref>, and protocols [15, 18] (for further references see also [2]). The basic concept of sequential evolving algebras is introduced in [13].
Reference: 7. <author> Egon Borger. </author> <title> Three pragmatic suggestions for making formal methods practical. </title> <institution> Dipartimento di Informatica, Universita di Pisa, </institution> <type> Report, </type> <year> 1995. </year>
Reference-contexts: Being aware of the fact that there is no way to ensure the correctness of ground models other than validating them by experimentation and inspection, their definition requires to take special care. In a detailed investigation of this subject <ref> [7] </ref> Egon Borger convincingly argues that there are at least three basic requirements to be satisfied by a ground model: it must be precise, abstract, and it must have a rigorous foundation.
Reference: 8. <author> Egon Borger, Giuseppe Del Castillo, Paola Glavan, and Dean Rosenzweig. </author> <title> Towards a mathematical specification of the APE100 architecture: The apese model. </title> <editor> In B. Pehrson and I. Simon, editors, </editor> <booktitle> Proc. of the IFIP 13th World Computer Congress 1994, Volume I: Technology and Foundations, </booktitle> <pages> pages 396-401. </pages> <publisher> Elsevier Science Publishers B. V., </publisher> <year> 1994. </year>
Reference-contexts: Due to the operational view and the familiar description style, EA specifications enable an intuitive understanding as `pseudocode over abstract data.' 4 Evolving algebras have been applied with considerable success to various problems in mathematical modelling of non-trivial architectures <ref> [5, 8, 9] </ref>, languages [3, 4, 6], and protocols [15, 18] (for further references see also [2]). The basic concept of sequential evolving algebras is introduced in [13].
Reference: 9. <author> Egon Borger and Uwe Glasser. </author> <title> A formal specification of the PVM architecture. </title> <editor> In B. Pehrson and I. Simon, editors, </editor> <booktitle> Proc. of the IFIP 13th World Computer Congress 1994, Volume I: Technology and Foundations, </booktitle> <pages> pages 402-409. </pages> <publisher> Elsevier Science Publishers B. V., </publisher> <year> 1994. </year>
Reference-contexts: Due to the operational view and the familiar description style, EA specifications enable an intuitive understanding as `pseudocode over abstract data.' 4 Evolving algebras have been applied with considerable success to various problems in mathematical modelling of non-trivial architectures <ref> [5, 8, 9] </ref>, languages [3, 4, 6], and protocols [15, 18] (for further references see also [2]). The basic concept of sequential evolving algebras is introduced in [13].
Reference: 10. <author> Manfred Broy, Frank Dederichs, Claus Dendorfer, Max Fuchs, Thomas F. Gritzner, and Rainer Weber. </author> <title> The design of distributed systems an introduction to FOCUS. </title> <type> Technical Report TUM-19202-2 (SFB-Bericht Nr. </type> <institution> 342/2-2/92/A), Institut fur Informatik, Technische Universitat Munchen, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: The interface specification explicitly describes how the system is influenced by its environment. Such an approach corresponds to an open system view, which is in contrast to a closed world assumption (closed system view) where everything relevant is included in the system <ref> [10] </ref>. According to widely accepted principles of systems engineering, for instance, the concept of ? In Computer Aided Systems Theory-EUROCAST'95 (Proc. of the Fifth International Workshop on Computer Aided Systems Theory), F. Pichler, R. Moreno-Daz and R.
Reference: 11. <author> Igor D - urd -anovic and Uwe Glasser. </author> <title> An evolving algebra abstract machine. </title> <institution> FB Mathematik & Informatik, Universitat-GH Paderborn, </institution> <type> Report, </type> <month> May </month> <year> 1995. </year>
Reference-contexts: Our formal definition of the EAM comes as an EA specification <ref> [11] </ref>. <p> Such a uniform representation scheme offers a high degree of regularity, which is the basis for an efficient implementation of the current prototype of the EAM. For further details see <ref> [11] </ref>. 6 Conclusions Formal methods are a reasonable and vital means for specifying and verifying complex reactive systems. There is a great variety of different formal approaches; they all have their particular strengths, but also their limitations and weaknesses.
Reference: 12. <author> George Gratzer. </author> <title> Universal Algebra. </title> <publisher> Van Nostrand, </publisher> <year> 1968. </year>
Reference-contexts: A regular first-order structure consists of domains, functions, and relations, while structures without relations are called algebras <ref> [12] </ref>. (Note that relations can also be expressed through their characteristic functions.) 4 This analogy was contributed by Egon Borger. 5 Strictly speaking the D i are all subsets of a single set, called the superuniverse [13].
Reference: 13. <author> Yuri Gurevich. </author> <title> Evolving algebras a tutorial introduction. </title> <journal> Bulletin of the EATCS, </journal> (43):264-284, February 1991. 
Reference-contexts: Correctness here can not have an absolute meaning (since there is no way to prove it), rather it means correctness with respect to certain assumptions about the physical world (as represented by the external environment). 2 Theoretical Foundations The concept of evolving algebra 3 as defined by Yuri Gurevich in <ref> [13, 14] </ref> provides the formal basis of our specification methodology. Evolving algebras are abstract machines specifying the operational semantics of algorithmic descriptions of discrete dynamic systems. <p> The basic concept of sequential evolving algebras is introduced in <ref> [13] </ref>. <p> structure consists of domains, functions, and relations, while structures without relations are called algebras [12]. (Note that relations can also be expressed through their characteristic functions.) 4 This analogy was contributed by Egon Borger. 5 Strictly speaking the D i are all subsets of a single set, called the superuniverse <ref> [13] </ref>. Modelling Dynamic Behaviour Computations are modeled by finite or infinite sequences of static algebras S 0 S 1 S 2 : : : such that S i+1 is obtained from S i by executing one step of the EA program.
Reference: 14. <author> Yuri Gurevich. </author> <title> Evolving Algebra 1993: Lipari Guide. </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: Correctness here can not have an absolute meaning (since there is no way to prove it), rather it means correctness with respect to certain assumptions about the physical world (as represented by the external environment). 2 Theoretical Foundations The concept of evolving algebra 3 as defined by Yuri Gurevich in <ref> [13, 14] </ref> provides the formal basis of our specification methodology. Evolving algebras are abstract machines specifying the operational semantics of algorithmic descriptions of discrete dynamic systems. <p> The basic concept of sequential evolving algebras is introduced in [13]. For a rigorous mathematical foundation of sequential and distributed evolving algebras we refer to <ref> [14] </ref>. 2.1 Sequential Evolving Algebras Static State Representations For the user it is convenient to consider an EA machine M as consisting of an EA program and a first-order many-sorted structure representing the initial computation state of M. <p> Operating independently, each agent runs its own copy of a module. Agents may communicate with each other through the globally shared structure representing the current state. For a detailed definition of the notion of run with respect to distributed evolving algebras, we refer to <ref> [14] </ref>. 6 Functions are treated as data structures which are subject to local modifications.
Reference: 15. <author> Yuri Gurevich, Jim Huggins, and Raghu Mani. </author> <title> The generalized railroad crossing problem: An evolving algebra based solution. </title> <type> CSE Technical Report CSE-TR-230-95, </type> <institution> EECS Department, University of Michigan-Ann Arbor, </institution> <year> 1995. </year>
Reference-contexts: Due to the operational view and the familiar description style, EA specifications enable an intuitive understanding as `pseudocode over abstract data.' 4 Evolving algebras have been applied with considerable success to various problems in mathematical modelling of non-trivial architectures [5, 8, 9], languages [3, 4, 6], and protocols <ref> [15, 18] </ref> (for further references see also [2]). The basic concept of sequential evolving algebras is introduced in [13]. <p> This does not necessarily mean that external functions may change their values in an arbitrary manner. The declaration of external functions allows to restrict their behaviour through the definition of integrity constraints. As an example of the use of external functions consider the specification of real-time constraints in <ref> [15, 18] </ref>. Time is modeled through an external nullary function CT : Real indicating the current time.
Reference: 16. <author> D. Harel and A. Pnueli. </author> <title> On the development of reactive systems. </title> <editor> In Krzysztof R. Apt, editor, </editor> <booktitle> Logics and Models of Concurrent Systems, </booktitle> <pages> pages 477-498. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Pichler, R. Moreno-Daz and R. Albrecht, editors, vol. 1030 of LNCS, Springer-Verlag, 1996. 1 We refer to the notion as defined by D. Harel and A. Pnueli in <ref> [16] </ref> and [22]. model-based system design as stated by Wayne Wymore in his book on model- based systems engineering [24]: To design a system is to develop a model on the basis of which a real system can be built, developed, or deployed that will satisfy all its re quirements. the
Reference: 17. <author> Gerald J. </author> <title> Holzman. The theory and practice of a formal method: </title> <editor> NewCoRe. In B. Pehrson and I. Simon, editors, </editor> <booktitle> Proc. of the IFIP 13th World Computer Congress 1994, Volume I: Technology and Foundations, </booktitle> <pages> pages 35-44. </pages> <publisher> Elsevier Science Publishers B. V., </publisher> <year> 1994. </year>
Reference-contexts: From a pragmatic point of view a specification methodology is not really applicable to complex systems engineering and design tasks, especially not for industrial purposes, as long as there is no appropriate tool support <ref> [17] </ref>. In the specific context of reactive system design special requirements on tools are imposed by the reactive nature of the systems. Ch. Schaffer and H. Prahofer have investigated this aspect in [23] from a systems theory point of view.
Reference: 18. <author> Jim Huggins. </author> <title> Kermit: Specification and verification. </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: Due to the operational view and the familiar description style, EA specifications enable an intuitive understanding as `pseudocode over abstract data.' 4 Evolving algebras have been applied with considerable success to various problems in mathematical modelling of non-trivial architectures [5, 8, 9], languages [3, 4, 6], and protocols <ref> [15, 18] </ref> (for further references see also [2]). The basic concept of sequential evolving algebras is introduced in [13]. <p> This does not necessarily mean that external functions may change their values in an arbitrary manner. The declaration of external functions allows to restrict their behaviour through the definition of integrity constraints. As an example of the use of external functions consider the specification of real-time constraints in <ref> [15, 18] </ref>. Time is modeled through an external nullary function CT : Real indicating the current time.
Reference: 19. <institution> The Institute of Electrical and Electronics Engineering. IEEE Standard VHDL Language Reference Manual|IEEE Std 1076-1993, </institution> <address> New York, NY, USA, </address> <year> 1994. </year> <title> Order Code SH16840. </title>
Reference-contexts: Note that it is not really necessary to be familiar with VHDL for the purpose we use it here. The required details will be explained on the way. The language VHDL'93, the current version of VHDL, is defined by the IEEE VHDL'93 standard language reference manual (LRM) <ref> [19] </ref> on the basis of an event-driven simulator specifying the effect of VHDL programs. Our behavioral specification is derived out of the informal description in the LRM in such a way that it faithfully reflects and supports the view given there. The resulting ground model defines an abstract VHDL'93 interpreter.
Reference: 20. <author> T. Lindner C. Lewerentz, </author> <title> editor. Formal Development of Reactive Systems, </title> <booktitle> volume 891 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Practical experiences with applications of formal methods, like the "Production Cell" case study <ref> [20] </ref>, have indeed shown that such mismatchings do frequently occur. As part of a comprehensive design concept for complex reactive systems we investigate the derivation of formal requirements specifications from given informal system descriptions.
Reference: 21. <author> Franz Pichler, Heinz Schwartzel, and Roberto Moreno-Diaz. </author> <title> System Science and Systems Technology: From conceptual frameworks to applicable solutions. </title> <booktitle> In Proceedings of the Fourth International Workshop on Computer Aided Systems Technology (Ottawa, </booktitle> <address> Ont., </address> <month> May 16-20), </month> <year> 1994. </year>
Reference-contexts: Ch. Schaffer and H. Prahofer have investigated this aspect in [23] from a systems theory point of view. According to more general considerations of systems science and systems technology,e.g., as discussed in <ref> [21] </ref>, CAST tools and environments should also provide the necessary support to relate complex systems specifications to given design constraints.
Reference: 22. <author> A. Pnueli. </author> <title> Applications of temporal logic to the specification and verification of reactive systems: A survey of current trends. </title> <editor> In J. W. de Bakker, W.-P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Current Trends in Concurrency|Overviews and Tuto--rials, volume 224 of Lecture Notes in Computer Science, </booktitle> <pages> pages 510-584. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: Pichler, R. Moreno-Daz and R. Albrecht, editors, vol. 1030 of LNCS, Springer-Verlag, 1996. 1 We refer to the notion as defined by D. Harel and A. Pnueli in [16] and <ref> [22] </ref>. model-based system design as stated by Wayne Wymore in his book on model- based systems engineering [24]: To design a system is to develop a model on the basis of which a real system can be built, developed, or deployed that will satisfy all its re quirements. the functional system
Reference: 23. <author> Christoph Schaffer and Herbert Prahofer. </author> <title> On requirements for a CAST-tool for complex, reactive system analysis, design and evaluation. </title> <editor> In F. Pichler and R. Moreno-Diaz, editors, </editor> <booktitle> Computer Aided Systems Theory - EUROCAST'93, volume 763 of Lecture Notes in Computer Science, </booktitle> <pages> pages 137-159. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: In the specific context of reactive system design special requirements on tools are imposed by the reactive nature of the systems. Ch. Schaffer and H. Prahofer have investigated this aspect in <ref> [23] </ref> from a systems theory point of view. According to more general considerations of systems science and systems technology,e.g., as discussed in [21], CAST tools and environments should also provide the necessary support to relate complex systems specifications to given design constraints.
Reference: 24. <author> A. Wayne Wymore, </author> <title> editor. Model-Based Systems Engineering: An Introduction to the Mathematical Theory of System Design, </title> <booktitle> chapter 1. Systems Engineering Series. </booktitle> <publisher> CRC Press, </publisher> <year> 1993. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: Pichler, R. Moreno-Daz and R. Albrecht, editors, vol. 1030 of LNCS, Springer-Verlag, 1996. 1 We refer to the notion as defined by D. Harel and A. Pnueli in [16] and [22]. model-based system design as stated by Wayne Wymore in his book on model- based systems engineering <ref> [24] </ref>: To design a system is to develop a model on the basis of which a real system can be built, developed, or deployed that will satisfy all its re quirements. the functional system requirements should be specified as complete, precise, and unambiguous as possible.
References-found: 24

