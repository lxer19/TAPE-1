URL: http://http.cs.berkeley.edu/~harchol/lb.ps
Refering-URL: http://www.cs.umd.edu/~keleher/818.html
Root-URL: 
Title: Exploiting Process Lifetime Distributions for Dynamic Load Balancing  
Author: Mor Harchol-Balter and Allen B. Downey 
Address: Berkeley, California 94720  
Affiliation: Computer Science Division (EECS) University of California  
Date: November 1995  
Pubnum: Report No. UCB/CSD-95-887  
Abstract-found: 0
Intro-found: 1
Reference: [AE87] <author> Rakesh Agrawal and Ahmed Ezzet. </author> <title> Location independent remote execution in NEST. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(8) </volume> <pages> 905-912, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: do, the majority are based on implicit remote execution of newborn processes; few use preemptive migration. (The following taxonomy is based in large part on [Nut94].) Systems that have implemented user-controlled (explicit) remote execution and/or preemptive migration include: Accent [Zay87], Locus [Thi91], Utopia [ZWZD93], DEMOS/MP [PM83], V [TLC85], and NEST <ref> [AE87] </ref>. Several of these also provide some form of automated location policy. Some other systems provide implicit remote execution, but perform preemptive migration only at the request of a user or for reasons other than load-balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte [AF89], Sprite [DO91], and Condor [LLM88].
Reference: [AF89] <author> Y. Artsy and R. Finkel. </author> <title> Designing a process migration facility: </title> <booktitle> The Charlotte experience. IEEE Computer, </booktitle> <pages> pages 47-56, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Several of these also provide some form of automated location policy. Some other systems provide implicit remote execution, but perform preemptive migration only at the request of a user or for reasons other than load-balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte <ref> [AF89] </ref>, Sprite [DO91], and Condor [LLM88]. Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that preempts processes for purposes of load-balancing.
Reference: [BF81] <author> Raymond M. Bryant and Raphael A. Finkel. </author> <title> A stable distributed scheduling algorithm. </title> <booktitle> In 2nd International Conference on Distributed Computing Systems, </booktitle> <pages> pages 314-323, </pages> <year> 1981. </year>
Reference-contexts: The workload we observed, and used in our trace-driven simulations, exhibits serial correlation; i.e. it is more bursty than a Poisson process. Also, our migration policy differs from [KL88] in that our proposed migration policy uses preemptive migration exclusively, rather than in addition to, remote execution. Like us, <ref> [BF81] </ref> discusses the distribution of process lifetimes and its effect on preemptive migration policy, but their hypothetical distributions are not based on system measurements.
Reference: [BK90] <author> Flavio Bonomi and Anurag Kumar. </author> <title> Adaptive optimal load balancing in a nonhomogeneous multiserver system with a central job scheduler. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(10) </volume> <pages> 1232-1250, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Thus, the median remaining life time of a process is equal to its current age. Despite the [LO86] study, many researchers have continued to assume an exponential process lifetime distribution in their analysis of migration strategies (e.g., [MTS90], <ref> [BK90] </ref> [EB93], [LR93]). The reasons for assuming an exponential lifetime distribution include: (1) analytic tractability, and (2) the belief that the exponential distribution is close enough to real distributions that the results of the analyses would not be impacted.
Reference: [Bra95] <author> Avner Braverman, </author> <year> 1995. </year> <type> Personal Communication. </type>
Reference-contexts: On Sprite preemptive migrations took :33 seconds plus 2:0 seconds per megabyte of memory transferred. By implementing migration at the kernel level, MOSIX reduces the fixed cost, f , to only 6 ms; the inverse memory transfer bandwidth, 1=b, is :44 seconds per megabyte <ref> [Bra95] </ref>. It appears that the fixed part of the cost of preemptive migration is determined by the implementation of migration; the memory transfer cost depends mostly on properties of the network. 5 Trace-driven Simulation In this section we present the results of a trace-driven simulation of process migration.
Reference: [BSW93] <author> Amnon Barak, Guday Shai, and Richard G. Wheeler. </author> <title> The MOSIX Distributed Operating System:Load Balancing for UNIX. </title> <publisher> Springer Ver-lag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: But simulation studies (which can use more realistic workload descriptions) and implemented systems have shown greater benefits for preemptive migration ([KL88] and <ref> [BSW93] </ref>). This fl Supported by National Physical Science Consortium (NPSC) Fellowship. Also supported by NSF grant number CCR-9201092. <p> In general, non-preemptive load-balancing strategies depend on a priori information about processes; e.g., explicit knowledge about the runtimes of processes or user-provided lists of migratable processes ([AE87], [LL90], [DO91], [ZWZD93]). Only a few systems have implemented automated load-balancing policies with preemptive migration: MOSIX <ref> [BSW93] </ref> and RHODOS [GGI + 91]. <p> Thus, we require 1 2 ( c a + m +n) &lt; n, which implies Minimum migration age = Migration cost nm This analysis extends easily to the case of heterogeneous processor speeds by applying a scale factor to n or m. The MOSIX migration policy <ref> [BSW93] </ref> is based on a similar, but simpler restriction: the age of the process must exceed the migration cost. Thus, the slowdown imposed on the migrant process (due to migration) must be less than 2.0.
Reference: [CK87] <author> Thomas L. Cassavant and Jon G. Kuhl. </author> <title> Analysis of three dynamic distributed load-balancing strategies with varying global information requirements. </title> <booktitle> In 7th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 185-192, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], <ref> [CK87] </ref>, [Zho89], [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([ELZ88], [KL88]). Our work differs from [ELZ88] in both system model and workload description. [ELZ88] model a server farm in which incoming jobs have no affinity for a particular processor.
Reference: [DHB95] <author> Allen B. Downey and Mor Harchol-Balter. </author> <title> A note on "The limited performance benefits of migrating active processes for load sharing". </title> <type> Technical Report UCB//CSD-95-888, </type> <institution> University of California, Berkeley, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: Also, [ELZ88] use a degenerate hyperexponen-tial distribution of lifetimes that includes many jobs with zero lifetime, and far fewer short jobs (0 - 1 seconds) than we observed. For a more detailed explanation of this distribution and its effect on the study, see <ref> [DHB95] </ref>. [KL88] use a hyperexponential distribution which approximates very closely the distribution we observed; as a result, their findings are largely in accord with ours. One difference between their work and ours is that they used a synthetic workload with Poisson arrivals.
Reference: [DO91] <author> Fred Douglis and John Ousterhout. </author> <title> Transparent process migration: Design alternatives and the sprite implementation. </title> <journal> Software Practice and Experience, </journal> <volume> 21(8) </volume> <pages> 757-785, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Several of these also provide some form of automated location policy. Some other systems provide implicit remote execution, but perform preemptive migration only at the request of a user or for reasons other than load-balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte [AF89], Sprite <ref> [DO91] </ref>, and Condor [LLM88]. Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that preempts processes for purposes of load-balancing. <p> In general, non-preemptive load-balancing strategies depend on a priori information about processes; e.g., explicit knowledge about the runtimes of processes or user-provided lists of migratable processes ([AE87], [LL90], <ref> [DO91] </ref>, [ZWZD93]). Only a few systems have implemented automated load-balancing policies with preemptive migration: MOSIX [BSW93] and RHODOS [GGI + 91]. <p> thus: cost of remote execution = r cost of preemptive migration = f + m=b We refer to the quotient m=b as the memory transfer cost. 4.1 Memory transfer costs The amount of a process' memory that must be transferred during preemptive migration depends on properties of the distributed system. <ref> [DO91] </ref> have an excellent discussion of this issue, and we borrow from them here. At the most, it might be necessary to transfer a process' entire memory. <p> The cost of remote execution, r, on a typical UNIX workstation connected to an Ethernet is 1 - 4 seconds. Systems which use remote execution for load sharing have made an effort to reduce this cost. On Sprite <ref> [DO91] </ref> r :33 seconds. Similarly for GLUNIX [VGA94], an operating system designed for networks of workstations connected by an ATM network, r = :25 - :5 seconds [Vah95].
Reference: [EB93] <author> D. J. Evans and W. U. N. Butt. </author> <title> Dynamic load balancing using task-transfer probablilites. </title> <journal> Parallel Computing, </journal> <volume> 19 </volume> <pages> 897-916, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Thus, the median remaining life time of a process is equal to its current age. Despite the [LO86] study, many researchers have continued to assume an exponential process lifetime distribution in their analysis of migration strategies (e.g., [MTS90], [BK90] <ref> [EB93] </ref>, [LR93]). The reasons for assuming an exponential lifetime distribution include: (1) analytic tractability, and (2) the belief that the exponential distribution is close enough to real distributions that the results of the analyses would not be impacted.
Reference: [ELZ86] <author> Derek L. Eager, Edward D. La-zowska, and John Zahorjan. </author> <title> Adaptive load sharing in homogeneous distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12(5) </volume> <pages> 662-675, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], [CK87], [Zho89], [PTS88], [Kun91], [HJ90], <ref> [ELZ86] </ref>); others have compared the performance of systems with and without preemptive migration ([ELZ88], [KL88]). Our work differs from [ELZ88] in both system model and workload description. [ELZ88] model a server farm in which incoming jobs have no affinity for a particular processor.
Reference: [ELZ88] <author> Derek L. Eager, Edward D. La-zowska, and John Zahorjan. </author> <title> The limited performance benefits of migrating active processes for load 16 sharing. </title> <booktitle> In SIGMETRICS, </booktitle> <pages> pages 662-675, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], [CK87], [Zho89], [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration (<ref> [ELZ88] </ref>, [KL88]). Our work differs from [ELZ88] in both system model and workload description. [ELZ88] model a server farm in which incoming jobs have no affinity for a particular processor. In this context, non-preemptive migration can maintain load balance simply by placing jobs at lightly-loaded hosts. <p> Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], [CK87], [Zho89], [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration (<ref> [ELZ88] </ref>, [KL88]). Our work differs from [ELZ88] in both system model and workload description. [ELZ88] model a server farm in which incoming jobs have no affinity for a particular processor. In this context, non-preemptive migration can maintain load balance simply by placing jobs at lightly-loaded hosts. <p> In this context, non-preemptive migration can maintain load balance simply by placing jobs at lightly-loaded hosts. This is different from our model, a network of workstations, in which incoming jobs arrive at a particular host and the cost of moving them away, even by remote execution, is non-trivial. Also, <ref> [ELZ88] </ref> use a degenerate hyperexponen-tial distribution of lifetimes that includes many jobs with zero lifetime, and far fewer short jobs (0 - 1 seconds) than we observed.
Reference: [GGI + 91] <author> G.W. Gerrity, A. Goscinski, J. In-dulska, W. Toomey, and W. Zhu. </author> <title> RHODOS-a testbed for studying design issues in distributed operating systems. In Towards Network Globalization (SICON 91): </title> <booktitle> 2nd International Conference on Networks, </booktitle> <pages> pages 268-274, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: In general, non-preemptive load-balancing strategies depend on a priori information about processes; e.g., explicit knowledge about the runtimes of processes or user-provided lists of migratable processes ([AE87], [LL90], [DO91], [ZWZD93]). Only a few systems have implemented automated load-balancing policies with preemptive migration: MOSIX [BSW93] and RHODOS <ref> [GGI + 91] </ref>.
Reference: [HJ90] <author> Anna Hac and Xiaowei Jin. </author> <title> Dynamic load balancing in a distributed system using a sender-initiated algorithm. </title> <journal> Journal of Systems Software, </journal> <volume> 11 </volume> <pages> 79-94, </pages> <year> 1990. </year>
Reference-contexts: Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], [CK87], [Zho89], [PTS88], [Kun91], <ref> [HJ90] </ref>, [ELZ86]); others have compared the performance of systems with and without preemptive migration ([ELZ88], [KL88]). Our work differs from [ELZ88] in both system model and workload description. [ELZ88] model a server farm in which incoming jobs have no affinity for a particular processor.
Reference: [HP90] <author> John L. Hennessy and David A. Patterson. </author> <booktitle> Computer Architecture </booktitle>
Reference-contexts: For each run, we then take the ratio of the means (standard deviations) of the two strategies. Lastly we take the geometric mean <ref> [HP90] </ref> of the eight ratios. The two axes in Figures 4 and 5 represent the two components of the cost of preemptive migration, namely the fixed cost (f ) and the MMTC (m=b). As mentioned above, the cost of non-preemptive migration (r) is fixed at :3 seconds.
References-found: 15

