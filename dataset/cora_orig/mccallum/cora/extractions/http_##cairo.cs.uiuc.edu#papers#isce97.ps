URL: http://cairo.cs.uiuc.edu/papers/isce97.ps
Refering-URL: http://cairo.cs.uiuc.edu/papers.html
Root-URL: http://www.cs.uiuc.edu
Title: IS MPEG ENCRYPTION BY USING RANDOM LIST INSTEAD OF ZIGZAG ORDER SECURE?  
Author: Lintian Qiao and Klara Nahrstedt Ming-Chit Tam Heng Mui Keng Terrace, Kent l qiao@cs:uiuc:edu; klara@cs:uiuc:edu; mtam@iss:nus:sg 
Address: 1304 West Springfield Avenue, Urbana, IL 61801, U.S.A.  Singapore  
Affiliation: Department of Computer Science, University of Illinois at Urbana-Champaign  Institute of System Science, NUS  Ridge,  
Abstract: This paper discusses the problems of the MPEG video encryption algorithm by using random permutation list instead of zigzag order within the MPEG compression process. We show that 1) the encryption method causes a significant size increase of the MPEG video stream, hence defeats the purpose of compression, and 2) the encryption method can not withstand the known-plaintext attack, therefore, should NOT be considered as secure. We also discuss other solutions to achieve secure, time-efficient, and size-preserving MPEG-video encryption. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> I. Agi and L. Gong. </author> <title> An Empirical Study of Mpeg Video Transmissions. </title> <booktitle> In Proceedings of the Internet Society Symposium on Network and Distributed System Security, </booktitle> <pages> pages 137-144, </pages> <address> San Diego, CA, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: Section 6 concludes our paper. 2 RELATED WORK Several algorithms to secure MPEG streams have been reported. The most straight-forward method is to encrypt the entire MPEG stream using standard encryption methods such as DES [4]. This is called the naive algorithm approach <ref> [1] </ref>. The greatest concern about this approach is the speed of encryption/decryption due to the large size of MPEG files.
Reference: [2] <author> Y. Li, Z. Chen, S. Tan, and R. Campbell. </author> <title> Security enhanced mpeg player. </title> <booktitle> In Proceedings of IEEE First International Workshop on Multimedia Software Development (MMSD'96), </booktitle> <address> Berlin, Germany, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Frame Number of I-blocks Name Pattern in I in P in B I:P:B frames frames frames bus.mpg 10:40:98 13200 11920 3744 hula1.mpg 10:30:0 13200 2588 - space.mpg 647:0:0 207040 - twister.mpg 206:206:824 247200 74400 76828 Table 1: Number of I-blocks in some MPEG streams the I-frames of MPEG streams ([3], <ref> [2] </ref>). However, Agi and Gong have shown that great portions of the video are visible partly because of interframe correlation and mainly from unencrypted I-blocks in the P and B frames. Table 1 shows this behavior on some video examples.
Reference: [3] <author> T.B. Maples and G.A. Spanos. </author> <title> Performace Study of a Selective Encryption Scheme for the Security of Networked, Real-time Video. </title> <booktitle> In Proceedings of 4th International Conference on Computer Communications and Networks, </booktitle> <address> Las Vegas, Nevada, </address> <month> September </month> <year> 1995. </year>
Reference: [4] <author> NIST. </author> <title> Data Encryption Standard. </title> <note> FIPS Publication 46-2, </note> <year> 1993. </year>
Reference-contexts: Section 5 outlines briefly possible solutions to achieve secure and efficient MPEG video encryption. Section 6 concludes our paper. 2 RELATED WORK Several algorithms to secure MPEG streams have been reported. The most straight-forward method is to encrypt the entire MPEG stream using standard encryption methods such as DES <ref> [4] </ref>. This is called the naive algorithm approach [1]. The greatest concern about this approach is the speed of encryption/decryption due to the large size of MPEG files.
Reference: [5] <author> L. Qiao and K. Nahrstedt. </author> <title> A New Algorithm for MPEG Video Encryption. </title> <booktitle> In Proceedings of The First International Conference on Imaging Science, Systems, and Technology (CISST'97), </booktitle> <address> Las Vegas, Nevada, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: The statistical analysis shows that the byte-values of a portion of a frame, for example, 1/8 or 1/16 of a frame, are almost uniformly distributed with very low occurrence frequency of digrams (pair of bytes) and other grouping. Please refer to the paper <ref> [5] </ref> for the details about the MPEG statistical results. This encryption method can withstand the Known-plaintext attack because each frame (I frame) has a new key. The key can be encrypted by using standard encryption algorithm such as DES and transmitted together with each frame. <p> We call this method Pure Permutation Algorithm. Based on the special statistical behavior of MPEG streams, we have also designed a new method Video Encryption Algorithm (VEA) which is described in detail in <ref> [5] </ref>. We briefly describe the basic approach of VEA here.
Reference: [6] <author> L. Tang. </author> <title> Methods for Encrypting and Decrypting MPEG Video Data Efficiently. </title> <booktitle> In Proceedings of The Fourth ACM International Multimedia Conference (ACM Multimedia'96), </booktitle> <pages> pages 219-230, </pages> <address> Boston, MA, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: The algorithm was presented in the paper "Methods for Encrypting fl This work was supported by the ICLASS Grant and National Science Foundation Career Grant CCR-96-23867. and Decrypting MPEG Video Data Efficiently" <ref> [6] </ref>. We will refer to that algorithm as the ZigZag-Permutation Algorithm. <p> Table 1 shows this behavior on some video examples. This fact, coupled with the time-consuming process of identifying I-blocks, makes the naive algorithm a better choice in many cases. ZigZag-Permutation Algorithm presents a method where the encryption is an integral part of the MPEG compression process <ref> [6] </ref>. The basic idea is that, instead of mapping the 8x8 block to a 1x64 vector in "zig-zag" order, it uses a random permutation list to map the individual 8x8 block to a 1x64 vector.
References-found: 6

