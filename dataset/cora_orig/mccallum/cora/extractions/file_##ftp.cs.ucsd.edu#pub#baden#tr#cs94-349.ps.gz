URL: file://ftp.cs.ucsd.edu/pub/baden/tr/cs94-349.ps.gz
Refering-URL: http://www.cs.ucsd.edu/groups/hpcl/scg/tr.html
Root-URL: http://www.cs.ucsd.edu
Address: La Jolla, California 92093-0114 USA  
Affiliation: Department of Computer Science and Engineering University of California, San Diego  
Abstract: Partitioning with Spacefilling Curves John R. Pilkington Scott B. Baden CSE Technical Report Number CS94-349 March 1994 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. W. Hockney and J. W. Eastwood, </author> <title> Computer Simulation Using Particles. </title> <publisher> McGraw-Hill, </publisher> <year> 1981. </year>
Reference-contexts: 1 Introduction Dynamic, non-uniform computations arise in diverse scientific applications including particle methods <ref> [1, 2] </ref>, and the Finite Element Method [3]. As compared with uniform methods, these computations offer substantially increased accuracy for the same cost. Because they locally concentrate computational effort unpredictably and non-uniformly with position and time, they introduce a load balancing problem when implemented on a parallel computer.
Reference: [2] <author> J. Carrier, L. Greengard, and V. Rokhlin, </author> <title> "A fast adaptive multipole algorithm for particle simulations," </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <month> September </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Dynamic, non-uniform computations arise in diverse scientific applications including particle methods <ref> [1, 2] </ref>, and the Finite Element Method [3]. As compared with uniform methods, these computations offer substantially increased accuracy for the same cost. Because they locally concentrate computational effort unpredictably and non-uniformly with position and time, they introduce a load balancing problem when implemented on a parallel computer. <p> When a region is refined, it is divided into subregions defined by equidistant bisectors on all axes (see Fig. 7). Adaptivity may also be represented in terms of a quadtree or oct-tree (in 2 and 3 dimensions), i.e. in adaptive multipole algorithms <ref> [2] </ref>. Adaptive meshes can be handled by modifying the algorithm in Table 1. When the curve enters a region of the mesh which has been refined by equidistant bisectors on all axes, then the curve visits this region with a level 1 curve instead of a level 0 curve.
Reference: [3] <author> C. Johnson, </author> <title> Numerical Solution of Partial Differential Equations by the Finite Element Method. </title> <publisher> Cambridge University Press, </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction Dynamic, non-uniform computations arise in diverse scientific applications including particle methods [1, 2], and the Finite Element Method <ref> [3] </ref>. As compared with uniform methods, these computations offer substantially increased accuracy for the same cost. Because they locally concentrate computational effort unpredictably and non-uniformly with position and time, they introduce a load balancing problem when implemented on a parallel computer.
Reference: [4] <author> S. B. Baden and S. R. Kohn, </author> <title> "A comparison of load balancing strategies for particle methods running on mimd multiprocessors," </title> <booktitle> in Proceedings of the Fifth SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <address> (Houston, Texas), </address> <month> March </month> <year> 1991. </year> <note> Also Tech Report CS91-199, </note> <institution> Computer Science and Engineering, Univ. of California, </institution> <address> San Diego, </address> <month> April, </month> <year> 1991. </year>
Reference-contexts: It is difficult to meet all these performance criteria at once <ref> [4] </ref>. For example, a partitioning algorithm could obtain the optimal partition but at the cost of a combinatorially explosive partition time. Or the algorithm may not do a good job of minimizing communication because it is unable to exploit locality, e.g. scatter decomposition [5]. fl Scott B.
Reference: [5] <author> D. M. Nichol and J. Saltz, </author> <title> "Principles for problem aggregation and assignment in medium-scale multiprocessors," </title> <type> Tech. Rep. ICASE 87-39, </type> <institution> NASA Langley Research Center, </institution> <month> September </month> <year> 1987. </year> <month> 16 </month>
Reference-contexts: For example, a partitioning algorithm could obtain the optimal partition but at the cost of a combinatorially explosive partition time. Or the algorithm may not do a good job of minimizing communication because it is unable to exploit locality, e.g. scatter decomposition <ref> [5] </ref>. fl Scott B. Baden is supported by ONR contract N00014-93-1-0152. John R. Pilkington is supported in part by NSF contract number ASC-9106465. Pilkington and Baden are with the CSE department of University of California at San Diego, CSE 0114, La Jolla, CA 92093.
Reference: [6] <author> M. J. Berger and S. H. Bokhari, </author> <title> "A partitioning strategy for nonuniform problems on multiprocessors," </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. C-36, </volume> <pages> pp. 570-580, </pages> <month> May </month> <year> 1987. </year>
Reference: [7] <author> S. B. Baden, </author> <title> "Programming abstractions for dynamically partitioning and coordinating localized scientific calculations running on multiprocessors," </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> vol. 12, </volume> <pages> pp. 145-157, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: After the first partition, subsequent partitions could be made by moving the boundaries between processors. Assuming that the particles do not move quickly, the boundaries should only have to move a little. (This is realistic in vortex dynamics for example, owing to a Courant-like stability condition <ref> [7] </ref>.) This may be quicker than scanning the entire line. However, if many data move between partitions, then the linear approach is faster. The partitioning is parallelized by performing a parallel prefix on the workload of the mapping to get the incremental workload sums. <p> The choice of numerical simulation parameters for this computation is described elsewhere [15]. A second order Runge-Kutta time-integration scheme was employed, which performs two force evaluations per timestep. As previously reported, load balancing can be done every few velocity evaluations <ref> [7] </ref>, and a frequency of 4 timesteps will be assumed in the ensuing analysis. The significance of this is that the cost of load balancing is small relative to the cost of transmitting dependence information. <p> As previously reported, localized communication is inexpensive, on the order of five percent or less, for example, on the iPSC/860 [18]. This simulation used a computational cost model which has been verified experimentally <ref> [7] </ref>. Each mesh point, A, contains some number of marker particles fi i;j .
Reference: [8] <author> S. H. Bokhari, T. W. Crockett, and D. M. Nicol, </author> <title> "Parametric binary dissection," </title> <type> Tech. Rep. ICASE 93-39, </type> <institution> NASA Langley Research Center, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: Computer time on the San Diego Supercomputing Center's Cray Y-MP was provided by a UCSD School of Engineering Block Grant. 1 Recursive Coordinate Bisection (RCB)[6, 7] is a popular technique for load balancing; this low-overhead strategy includes methods for trading-off load balance efficiency and communication <ref> [8] </ref>, and is useful for particle methods. It repeatedly collapses d dimensions onto a line, bisects the line, and recurses on each corresponding half-space. This strategy gains the partitioning time advantage of partitioning a line rather than a higher dimensional space. <p> We extend previous results in several ways: we establish analytic lower bounds on performance, make detailed empirical comparisons of ISP with RCB, generalize the algorithm to non-hypercubic spaces and higher dimensions, and apply it to flat mesh-based computations. Parametric Binary Dissection <ref> [8] </ref> uses chain-embedding in a mesh of processors to preserve the spatially locality of data between processors. While the algorithm employs recursive bisection (allowing for better shaped regions), the placement of the regions on the processors follows a spacefilling curve. ISP could adopt this placement algorithm after partitioning the data.
Reference: [9] <author> J. P. Singh, C. Holt, J. L. Hennessy, and A. Gupta, </author> <title> "A parallel adaptive fast multipole method," </title> <booktitle> in Supercomputing, </booktitle> <pages> pp. 54-65, </pages> <year> 1993. </year>
Reference-contexts: Moreover we observed only a negligible increase in the size of messages, and in their number, due to the irregular mappings. ISP has recently been applied to tree-based N -body computations <ref> [9, 10] </ref>. We provide a rigorous analytical and empirical analysis of performance, and useful extensions. The underlying idea of ISP is to create a bijective mapping of a 1-dimensional array to grid points in the hyperspace. <p> This follows directly from the construction of the spacefilling mapping. In general, only some spacefilling curves have this property (e.g. see <ref> [9, 10] </ref>), in particular the Hilbert curve we use does. 2 Theorem 1 Regions in the hyperspace defined by continuous segments of the spacefilling curve must be simply connected. By lemma 1, adjacent mesh points on the curve must be adjacent in the hyperspace. <p> We note that the exact comparison generally depends on the computation speed and communication latency of the architecture. However, for heavily localized communication-bound problems the increase in communication should not be noticed. Partitionings based on inverse space filling curves have been previously employed by Singh and Hennessy <ref> [9] </ref> and Warren and Salmon [10] in hierarchical N-body tree algorithms. We extend previous results in several ways: we establish analytic lower bounds on performance, make detailed empirical comparisons of ISP with RCB, generalize the algorithm to non-hypercubic spaces and higher dimensions, and apply it to flat mesh-based computations.
Reference: [10] <author> M. S. Warren and J. K. Salmon, </author> <title> "A parallel hashed oct-tree n-body algorithm," </title> <booktitle> in Supercomputing, </booktitle> <pages> pp. 12-21, </pages> <year> 1993. </year>
Reference-contexts: Moreover we observed only a negligible increase in the size of messages, and in their number, due to the irregular mappings. ISP has recently been applied to tree-based N -body computations <ref> [9, 10] </ref>. We provide a rigorous analytical and empirical analysis of performance, and useful extensions. The underlying idea of ISP is to create a bijective mapping of a 1-dimensional array to grid points in the hyperspace. <p> This follows directly from the construction of the spacefilling mapping. In general, only some spacefilling curves have this property (e.g. see <ref> [9, 10] </ref>), in particular the Hilbert curve we use does. 2 Theorem 1 Regions in the hyperspace defined by continuous segments of the spacefilling curve must be simply connected. By lemma 1, adjacent mesh points on the curve must be adjacent in the hyperspace. <p> However, for heavily localized communication-bound problems the increase in communication should not be noticed. Partitionings based on inverse space filling curves have been previously employed by Singh and Hennessy [9] and Warren and Salmon <ref> [10] </ref> in hierarchical N-body tree algorithms. We extend previous results in several ways: we establish analytic lower bounds on performance, make detailed empirical comparisons of ISP with RCB, generalize the algorithm to non-hypercubic spaces and higher dimensions, and apply it to flat mesh-based computations.
Reference: [11] <author> L. K. Platzman and J. J. B. III, </author> <title> "Spacefilling curves and the planar travelling salesman problem," </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> vol. 36, </volume> <pages> pp. 719-737, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: The ideas of spacefilling curves and spatial locality has also been employed previously to approximate a solution to the Traveling Salesman Problem <ref> [11] </ref>. 3.1 2-Dimensional Hilbert Curve The spacefilling curve generalized here is the 2-dimensional Hilbert curve [12] designed by the German mathematician David Hilbert. The Hilbert curve can be thought of as a U shape curve which visits each of the plane's four quadrants in the first level.
Reference: [12] <author> H. Abelson and A. A. diSessa, </author> <title> Turtle Geometry, The Computer as a Medium for Exploring Mathematics. </title> <address> Cambridge, Massachusetts: </address> <publisher> The MIT Press, </publisher> <year> 1984. </year>
Reference-contexts: The ideas of spacefilling curves and spatial locality has also been employed previously to approximate a solution to the Traveling Salesman Problem [11]. 3.1 2-Dimensional Hilbert Curve The spacefilling curve generalized here is the 2-dimensional Hilbert curve <ref> [12] </ref> designed by the German mathematician David Hilbert. The Hilbert curve can be thought of as a U shape curve which visits each of the plane's four quadrants in the first level.
Reference: [13] <author> M. J. Berger and P. Colella, </author> <title> "Local adaptive mesh refinement for shock hydrodynamics," </title> <journal> JCP, </journal> <volume> vol. 82, </volume> <pages> pp. 64-84, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: For the 2d mesh, this can be accomplished by stretching the curve in the top level's major direction and adding new curves in the top level's minor direction. (See Fig. 6.) Modifications for higher dimensions have not been addressed. 4.3 Mapping Adaptive Meshes Adaptive meshes <ref> [13] </ref> employ a base grid which has been selectively refined to give higher resolution in critical portions of the space. When a region is refined, it is divided into subregions defined by equidistant bisectors on all axes (see Fig. 7).
Reference: [14] <author> C. Ozturan, B. Szymanski, and J. E. Flaherthy, </author> <title> "Adaptive methods and rectangular partitioning problem," </title> <booktitle> in SHPCC, </booktitle> <address> (Williamsburg, Virginia), </address> <pages> pp. 409-415, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: These partioning strategies, along with RCB, are less than optimal in efficiency. There exists an optimal O (pn 3d ) algorithm which reduces the problem of partitioning a 1-dimensional grid to a shortest-path-like problem <ref> [14] </ref>. Although this is optimal for the mapped line, it may not be optimal for the hyperspace since there could be other mapped lines which have better partitions. However, these other lines might not preserve locality.
Reference: [15] <author> S. B. Baden, </author> <title> "Very large vortex calculations in two dimensions," </title> <booktitle> Lecture Notes in Mathematics, </booktitle> <volume> vol. 1360, </volume> <pages> pp. 96-120, </pages> <year> 1988. </year>
Reference-contexts: The computation was run for 1500 timesteps, and trace data were sampled every other timestep for a total of 750 snapshots. The choice of numerical simulation parameters for this computation is described elsewhere <ref> [15] </ref>. A second order Runge-Kutta time-integration scheme was employed, which performs two force evaluations per timestep. As previously reported, load balancing can be done every few velocity evaluations [7], and a frequency of 4 timesteps will be assumed in the ensuing analysis.
Reference: [16] <author> C. R. Anderson, </author> <title> "A method of local corrections for computing the velocity field due to a distribution of vortex blobs," </title> <journal> J. Computational Phys., </journal> <volume> vol. 62, </volume> <pages> pp. 111-123, </pages> <year> 1986. </year>
Reference: [17] <author> A. J. Chorin, </author> <title> "Numerical study of slightly viscous flow," </title> <journal> J. Fluid Mech., </journal> <volume> vol. 57, </volume> <pages> pp. 785-796, </pages> <year> 1973. </year>
Reference-contexts: We performed trace-driven simulations using trace-data obtained from a 2-dimensional vortex dynamics computation.[15, 16], 12 which solves the incompressible Euler's equations in vorticity stream function form using the vortex blob method <ref> [17] </ref>, which is an N-body method. The calculation spends most of its time computing interactions among nearby particles, and the cost of updating a particle's position is proportional to the number of interacting neighbors.
Reference: [18] <author> S. R. Kohn and S. B. Baden, </author> <title> "An implementation of the lpar parallel programming model for scientific computations," </title> <booktitle> in Proceedings of the Sixth SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <address> (Norfolk, Va.), </address> <pages> pp. 759-766, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: The significance of this is that the cost of load balancing is small relative to the cost of transmitting dependence information. As previously reported, localized communication is inexpensive, on the order of five percent or less, for example, on the iPSC/860 <ref> [18] </ref>. This simulation used a computational cost model which has been verified experimentally [7]. Each mesh point, A, contains some number of marker particles fi i;j .
Reference: [19] <author> S. R. Kohn and S. B. Baden, </author> <title> "A robust parallel programming model for dynamic, nonuniform scientific computations." </title> <booktitle> Submitted to the 1994 Scalable High Performance Computer Conference., </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: Another issue is that unlike RCB, ISP's partitions are not rectangular. For certain implementations, this may impose an additional concern for the programmer in managing the irregular regions. A plausible solution is to use a programming library such as LPAR-X <ref> [19] </ref> or PARTI [20] to manage the partitioned regions and initiate boundary and load balancing communication. We are currently implementing a particle calculation employing ISP under LPAR-X. This implementation will also give us valuable performance data to balance the software engineering issues.
Reference: [20] <author> A. Sussman, J. Saltz, R. Das, S. Gupta, D. Mavriplis, and R. Ponnusamy, </author> <title> "Parti primitives for unstructured and block structured problems," </title> <booktitle> Computing Systems in Engineering, </booktitle> <year> 1992. </year> <month> 17 </month>
Reference-contexts: Another issue is that unlike RCB, ISP's partitions are not rectangular. For certain implementations, this may impose an additional concern for the programmer in managing the irregular regions. A plausible solution is to use a programming library such as LPAR-X [19] or PARTI <ref> [20] </ref> to manage the partitioned regions and initiate boundary and load balancing communication. We are currently implementing a particle calculation employing ISP under LPAR-X. This implementation will also give us valuable performance data to balance the software engineering issues.
Reference: [21] <author> S. R. Kohn, S. B. Baden, and J. R. Pilkington, </author> <title> "Performance and software tradeoffs in dynamic load balancing." </title> <note> in preparation | 1994. </note>
Reference-contexts: We are currently implementing a particle calculation employing ISP under LPAR-X. This implementation will also give us valuable performance data to balance the software engineering issues. We report elsewhere on the performance of real applications running on parallel hardware <ref> [21] </ref>. Load balance is a prime concern of many non-uniform problems. Previous algorithms have delivered load balances that were less efficient than necessary. ISP creates higher efficiency distributions of work with less partitioning complexity while conserving locality.

References-found: 21

