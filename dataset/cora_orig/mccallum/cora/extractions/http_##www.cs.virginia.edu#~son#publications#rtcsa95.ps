URL: http://www.cs.virginia.edu/~son/publications/rtcsa95.ps
Refering-URL: http://www.cs.virginia.edu/~son/publications.html
Root-URL: http://www.cs.virginia.edu
Title: Abstract  
Abstract: In conventional database systems, performance is primarily measured by the number of transactions completed within a unit time. In real-time applications, timing and criticality characteristics of transactions must be taken into account. In this paper, we examine the performance of StarBase, a firm real-time database system. The deadline guarantee ratio and average response times are the primary performance measures. There have been performance studies on real-time database systems, but most of them were performed using simulation. This work demonstrates the feasibility of developing a real-time database system with an acceptable performance. 
Abstract-found: 1
Intro-found: 1
Reference: [Geo93] <author> Geroge, D., </author> <title> Implementation of Indexing and Concurrency Control Mechanism in a Real-Time Database, </title> <institution> M.S. Project, University of Virginia, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: T-tree indexing was proposed specifically for in-memory retrieval to improve the performance over indexing mechanisms for disk-based data [Leh86]. The T-tree is a binary tree which contains multiple elements in each node. The description and implementation of the T-Tree indexing mechanism in StarBase is described in <ref> [Geo93] </ref>. 3. Real-Time Mach StarBase currently runs on a 486 DX2/50E machine running the RT-Mach MK83i operating system. RT-Mach, a variant of Mach, provides many of the priority-based real-time features that StarBase relies on to ser vice transactions in a real-time environment.
Reference: [Har91] <author> Haritsa, J., </author> <title> Transaction Scheduling in Firm Real-Time Database Systems, </title> <type> Ph.D. thesis, </type> <institution> University of Wisconsin-Madison, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: In general, lock-based methods delay transactions to avoid having them access data in an inconsistent way, whereas optimistic methods abort transactions. StarBase uses a real-time optimistic concurrency control method called WAIT-X <ref> [Har91] </ref>, which has been experimentally shown to outperform lock-based concurrency control methods in a firm real-time setting.
Reference: [Hua91] <author> Huang, J., </author> <title> Real-Time Transaction Processing: Design, Implementation, and Performance Evaluation, </title> <type> Ph.D. thesis, </type> <institution> University of Massachusetts at Amherst, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Ideally, StarBase should incorporate the fixed-priority round robin scheduling policy, which allocates a higher time quantum of execution for threads with higher priorities [Tok90]. 4. StarBase Transaction Workload Generator The workload generator is modelled after previous work on two-phase locking (2PL) and optimistic concurrency control (OCC) <ref> [Lee95, Hua91] </ref>. In each of these studies, the workload generator provides adjustable runtime parameters to alter the workload submitted to the database system. This section describes how the StarBase transaction workload generator creates different workload and environments to test the performance of Star-Base. 4.1. <p> These transactions may or may not have timing constraints, and therefore have soft deadlines. An airline reservation system is a good example of this application area <ref> [Hua91] </ref>. The other application area is the real-time process control systems. Unlike transactions in information management systems, these transactions have hard timing constraints that must be met to prevent a catastrophic event from occurring. Transactions in such a system arrive periodically and with hard real-time constraints. <p> Transaction Priority Calculation Longer length transactions are more likely to miss their deadlines due to the increased probability of data con-icts as they access more tuples in the relation. To avoid the starvation problem mentioned in <ref> [Hua91] </ref>, priorities are assigned according to the number of tuples each transaction accesses. Given that thread priorities are considered in IPC, synchronization, and scheduling in RT-Mach, longer transactions with higher priorities have a better chance to complete. <p> The results show that longer transactions (i.e. those transactions that update/select more tuples) have a lower deadline guarantee ratio than shorter length transactions. As the execution time increases, the possibility of data conict increases as well. Given enough short transactions, we may eventually get a transaction starvation <ref> [Hua91] </ref> situation where long transactions are constantly being restarted because of conicts with short transactions. The starvation problem can be avoided by assigning long transactions a higher priority. The results of running the same workload with the new priority assignment is shown in Figure 6.
Reference: [Kim95] <author> Kim, Y., </author> <title> Predictability and Consistency in Real-Time Transaction Processing, </title> <type> Ph.D. thesis, </type> <institution> University of Virginia, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Unlike transactions in information management systems, these transactions have hard timing constraints that must be met to prevent a catastrophic event from occurring. Transactions in such a system arrive periodically and with hard real-time constraints. Network management, traffic control, and nuclear power plants all fall in this application area <ref> [Kim95] </ref>. Since StarBase is a firm real-time database, it is reason-able to ask why a hard real-time and soft real-time environment is being used to test performance. This is the first time StarBase has undergone any rigorous performance testing.
Reference: [Kit93] <author> Kitayama, T., T. Nakajima, and H. Tokuda, RT-IPC: </author> <title> An IPC Extension for Real-Time Mach. </title> <booktitle> Proceedings of the Second Microkernel Workshop, </booktitle> <month> Sep </month> <year> 1993. </year>
Reference-contexts: To prevent such a situation from occurring in StarBase, the transaction managers are initialized with the lowest system priority level possible. The inheritance mechanism will always then correctly raise the priority level of the transaction manager to reect the importance of the transaction request <ref> [Kit93] </ref>. 3.3. Real-Time Synchronization (RT-Sync) Currently, StarBase relies on the mutual exclusion with a lock variable supplied by RT-Mach to provide synchronization between transactions during the read, validation, and write phase of the WAIT-50 scheme.
Reference: [Lee95] <author> Lee, J and S. H. Son, </author> <title> Performance of Con-currency Control Algorithms in Real-Time Database Systems, Performance of Concurrency Control Mechanisms in Centralized Database Systems, </title> <editor> V. Kumar (ed), </editor> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: Ideally, StarBase should incorporate the fixed-priority round robin scheduling policy, which allocates a higher time quantum of execution for threads with higher priorities [Tok90]. 4. StarBase Transaction Workload Generator The workload generator is modelled after previous work on two-phase locking (2PL) and optimistic concurrency control (OCC) <ref> [Lee95, Hua91] </ref>. In each of these studies, the workload generator provides adjustable runtime parameters to alter the workload submitted to the database system. This section describes how the StarBase transaction workload generator creates different workload and environments to test the performance of Star-Base. 4.1.
Reference: [Leh87] <author> Lehman, T. and M. Carey, </author> <title> A Recovery Algorithm for a High Performance Memory-Resident Database System, </title> <booktitle> ACM SIGMOD Conference, </booktitle> <month> May </month> <year> 1987. </year>
Reference: [Leh95] <author> Lehr, M., Y. Kim, and S. H. Son, </author> <title> Managing Contention and Timing Constraints in a Real-Time Database System, </title> <booktitle> 16th IEEE Real-Time System Symposium, </booktitle> <address> Pisa, Italy, </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: One of our goal is to demonstrate the feasibility of developing a real-time database system with an acceptable performance. 2. StarBase StarBase is a firm real-time database system which supports the concurrent execution of transactions and seeks to minimize the number of high-priority transactions that miss their deadlines <ref> [Leh95] </ref>. StarBase uses no a priori information about the transaction workload and discards tardy transactions at their deadline points. Star-Base runs on top of RT-Mach, a real-time operating system under development at Carnegie Mellon University [Tok90].
Reference: [Son94] <author> Kim, Y., M. Lehr, D. George, and S. H. </author> <note> Son, </note>
Reference-contexts: A real-time database system, however, must adopt goals which are consistent with any real-time system: providing the best service to the most critical transactions and ensuring some degree of predictability in transaction processing <ref> [Son94] </ref>. In conventional database systems, all transactions should have the same opportunity to obtain system resources to help complete their execution.
References-found: 9

