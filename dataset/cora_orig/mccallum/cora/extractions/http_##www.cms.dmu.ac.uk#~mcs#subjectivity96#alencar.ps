URL: http://www.cms.dmu.ac.uk/~mcs/subjectivity96/alencar.ps
Refering-URL: http://www.cms.dmu.ac.uk/~mcs/subjectivity96/papers.html
Root-URL: 
Title: Towards a Formal Link Between Viewpoints in Analysis and Implementation  
Author: Paulo S. C. Alencar, Donald D. Cowan, Carlos J. P. Lucena, Torsten Nelson 
Keyword: ADVs (Abstract Design Views), viewpoints, roles, aspects, modes, interfaces, patterns, design patterns, software process, object-orientation, component-based software, case tools, code generation, formal methods.  
Note: OOPSLA'96 WORKSHOP 19: SUBJECTS AND VIEWPOINTS THROUGHOUT THE LIFECYCLE 1  
Abstract: In this position paper we outline a formal approach to relating and integrating the concept of viewpoint between the analysis and implementation phases of the software life cycle. We describe our viewpoint/pattern-based software-process model, and then discuss how to integrate the concept of viewpoint among the levels of analysis (roles), design (design viewpoints), and implementation (subjects) using our model. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Albano, R. Bergamini, G. Ghelli, and R. Orsini, </author> <title> An Object Data Model with Roles, </title> <booktitle> Proceedings of the 18th Conference on Very Large Databases, </booktitle> <pages> pp. 39-51, </pages> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference: [2] <author> Paulo S. C. Alencar, Donald D. Cowan, Carlos J. P. Lucena, and Luis C. M. </author> <title> Nova, Formal Specification of Reusable Interface Objects, </title> <booktitle> Proceedings of the Symposium on Software Reusability (SSR'95), </booktitle> <pages> pages 88-96, </pages> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: The design model we have chosen is object-oriented and divides the domain of objects into two types of objects called Abstract Design Objects (ADOs) and Abstract Design Views (ADVs) [11], [6], <ref> [2] </ref>. We informally call these two types objects and views. Views are interfaces that know the identity of the object they are viewing, whereas objects do not have any knowledge of the identity of their views. <p> Each object is defined by a formal schema that allows for the definition of the object's state, interface and semantics. These abstract schemas for the specification of ADVs and ADOs are described in <ref> [2] </ref>, and were initially based on the structures of TROLL light [10]. This schematic specification language describes both the interconnection of ADVs and ADOs, and the functions and properties of objects in terms of a programming language or logic formalism.
Reference: [3] <author> Paulo S. C. Alencar, Donald D. Cowan, and Carlos J. P. </author> <note> Lucena, </note>
Reference-contexts: action to take place in a control system? Since the semantics of ADVs and ADOs can be specified in a logic formalism and the module interconnection language (MIL) is based on category theory we can prove properties of the system from local properties, that is properties of its constituent objects <ref> [3] </ref>. If we have a library of objects we can connect them together using the MIL and directly produce a working system.
References-found: 3

