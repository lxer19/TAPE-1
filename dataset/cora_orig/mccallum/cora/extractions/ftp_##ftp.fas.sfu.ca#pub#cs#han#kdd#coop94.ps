URL: ftp://ftp.fas.sfu.ca/pub/cs/han/kdd/coop94.ps
Refering-URL: http://fas.sfu.ca/cs/research/groups/DB/sections/publication/kdd/kdd.html
Root-URL: 
Email: fhan, yongjiang@cs.sfu.ca  rng@cs.ubc.ca  
Title: Cooperative Query Answering Using Multiple Layered Databases Research  
Author: Jiawei Han Yongjian Fu Raymond T. Ng 
Address: Burnaby, B.C., Canada V5A 1S6  Vancouver, B.C., Canada  
Affiliation: School of Computing Science Simon Fraser University  Department of Computer Science University of British Columbia  
Abstract: How can a real-estate agent respond to inquiries quickly and intelligently? The `trick' could be using a simple table to briefly outline the general information and a complete book to reference the details. Such a method can be generalized to the construction of a multiple layered database (MLDB), a useful database organization technique for cooperative query answering, database browsing, query optimization and querying cooperative information systems. In this paper, we study the construction of MLDBs using generalization and knowledge discovery techniques and the application of MLDBs to cooperative/intelligent query answering in database systems.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, S. Ghosh, T. Imielinski, B. Iyer, and A. Swami. </author> <title> An interval classifier for database mining applications. </title> <booktitle> In Proc. 18th Int. Conf. 11 Very Large Data Bases, </booktitle> <pages> pages 560-573, </pages> <address> Vancou--ver, Canada, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: Furthermore, a given concept hierarchy can be adjusted dynamically based on the analysis of the statistical distribution of the relevant data sets. Generalization on numerical attributes can be performed similarly but in a more automatic way by the examination of data distribution characteristics <ref> [1, 9, 7] </ref>. In many cases, it may not require any predefined concept hierarchies. For example, the household income of customers can be clustered into several groups, such as fbelow 30K, 30K-50K, 50K-70K, over 70Kg, according to a relatively uniform data distribution criteria or using some statistical clustering analysis tools.
Reference: [2] <author> P. Bosc and O. Pivert. </author> <title> Some approaches for relational databases flexible querying. </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 1 </volume> <pages> 323-354, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Cooperative (or intelligent) query answering refers to a mechanism which answers queries cooperatively and intelligently by analyzing the intent of a query and providing some generalized, neighborhood, or associated answers <ref> [5, 11, 2] </ref>. <p> Such kind of queries are better to be treated as information probes and be answered by providing general or associated information with data distribution statistics, which may help users understand the data better and form more accurate queries <ref> [5, 2, 6] </ref>. In an MLDB system, probe queries can be mapped to a relatively higher concept layer and be processed in such a layer. Such answers may provide associative and summary information and assist users to refine their queries.
Reference: [3] <editor> M. Brodie, J. Mylopoulos, and J. Schmidt. </editor> <booktitle> On Conceptual Modeling. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: Many interesting techniques [14, 6, 5, 10, 13, 15] have been developed for cooperative query answering, by integration of the methods developed in several related fields, such as semantic data modeling <ref> [3] </ref>, fl Research partially supported by the Natural Sciences and Engineering Research Council of Canada under grant OGP0037230 and the Centre for Systems Science of Simon Fraser University. y Research partially supported by the Natural Sciences and Engineering Research Council of Canada under grants OGP0138055 and STR0134419. deductive databases [14], knowledge
Reference: [4] <author> Y. Cai, N. Cercone, and J. Han. </author> <title> Attribute-oriented induction in relational databases. </title> <editor> In G. Piatetsky-Shapiro and W. J. Frawley, editors, </editor> <booktitle> Knowledge Discovery in Databases, </booktitle> <pages> pages 213-228. </pages> <publisher> AAAI/MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: supported by the Natural Sciences and Engineering Research Council of Canada under grant OGP0037230 and the Centre for Systems Science of Simon Fraser University. y Research partially supported by the Natural Sciences and Engineering Research Council of Canada under grants OGP0138055 and STR0134419. deductive databases [14], knowledge discovery in databases <ref> [4, 15] </ref>, etc. Cooperative query answering can be realized by generalization and summarization of answers, explanation of answers or returning intensional answers, query rewriting using associated or neighborhood information, comparison of answers with those of similar queries, etc. <p> Generalization is performed by removing a set of less-interested attributes, substituting the concepts in one or a set of attributes by their corresponding higher level concepts <ref> [4] </ref>, performing aggregation or approximation on certain attributes, etc. <p> Otherwise, it is called information-preserving join. 3.2.2 An MLDB construction algorithm Based on the previous discussion, the construction of an MLDB can be summarized into the following algorithm, which is similar to attribute-oriented generalization in knowledge discovery in databases <ref> [4, 12] </ref>. Algorithm 1 Construction of an MLDB. Input: A relational database, a set of concept hierarchies, and a set of frequently referenced attributes and frequently used query patterns. Output: A multiple layered database. Method. An MLDB is constructed in the follow ing steps. 1. <p> Obviously, the frequently referenced attributes should be preserved in higher layers, and the frequently referenced concept levels should be considered as the candidate concept levels in the construction of higher layers. Steps 2 and 3 are performed in a way similar to the attribute-oriented induction, studied previously <ref> [12, 4] </ref>.
Reference: [5] <author> W. W. Chu and Q. Chen. </author> <title> Neighborhood and associative query answering. </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 1 </volume> <pages> 355-382, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Cooperative (or intelligent) query answering refers to a mechanism which answers queries cooperatively and intelligently by analyzing the intent of a query and providing some generalized, neighborhood, or associated answers <ref> [5, 11, 2] </ref>. <p> 1 Introduction Cooperative (or intelligent) query answering refers to a mechanism which answers queries cooperatively and intelligently by analyzing the intent of a query and providing some generalized, neighborhood, or associated answers [5, 11, 2]. Many interesting techniques <ref> [14, 6, 5, 10, 13, 15] </ref> have been developed for cooperative query answering, by integration of the methods developed in several related fields, such as semantic data modeling [3], fl Research partially supported by the Natural Sciences and Engineering Research Council of Canada under grant OGP0037230 and the Centre for Systems <p> Such kind of queries are better to be treated as information probes and be answered by providing general or associated information with data distribution statistics, which may help users understand the data better and form more accurate queries <ref> [5, 2, 6] </ref>. In an MLDB system, probe queries can be mapped to a relatively higher concept layer and be processed in such a layer. Such answers may provide associative and summary information and assist users to refine their queries. <p> an explanation that the returned information is for the range of $250k-$300k instead of $280k-$300k to avoid misunderstanding. 2 4.2 Cooperative query answering in an MLDB Since an MLDB stores general database information in higher layers, many techniques investigated in previous researches on cooperative query answering in (single layered) databases <ref> [14, 6, 5, 10, 13] </ref> can be extended to cooperative query answering in MLDBs, easily, effectively and efficiently. The following reasoning may convince us that an MLDB may greatly facilitate cooperative query answering. <p> The following reasoning may convince us that an MLDB may greatly facilitate cooperative query answering. Many cooperative query answering techniques need certain kinds of generalization <ref> [5, 11] </ref>; whereas different kinds of frequently used generalizations are performed and stored in the higher layers of an MLDB. Also, they often need to compare the "neighborhood" information [6, 5]. The generalized neighborhood tuples are usually stored in the same higher layer relations, ready for comparison and investigation. <p> Many cooperative query answering techniques need certain kinds of generalization [5, 11]; whereas different kinds of frequently used generalizations are performed and stored in the higher layers of an MLDB. Also, they often need to compare the "neighborhood" information <ref> [6, 5] </ref>. The generalized neighborhood tuples are usually stored in the same higher layer relations, ready for comparison and investigation. Moreover, they often need to summarize answer-related information, associated with data statistics or certain aggregations [5, 23]. <p> Also, they often need to compare the "neighborhood" information [6, 5]. The generalized neighborhood tuples are usually stored in the same higher layer relations, ready for comparison and investigation. Moreover, they often need to summarize answer-related information, associated with data statistics or certain aggregations <ref> [5, 23] </ref>. Interestingly, a higher-layered relation not only presents the generalized tuples but also the counts of the identical tuples or other computed aggregation values (such as sum, average, etc.). Such high-level information with counts conveys important information for data summarization and statistical data investigation.
Reference: [6] <author> F. Cuppens and R. Demolombe. </author> <title> Extending answers to neighbor entities in a cooperative answering context. </title> <booktitle> Decision Support Systems, </booktitle> <volume> 7 </volume> <pages> 1-11, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Cooperative (or intelligent) query answering refers to a mechanism which answers queries cooperatively and intelligently by analyzing the intent of a query and providing some generalized, neighborhood, or associated answers [5, 11, 2]. Many interesting techniques <ref> [14, 6, 5, 10, 13, 15] </ref> have been developed for cooperative query answering, by integration of the methods developed in several related fields, such as semantic data modeling [3], fl Research partially supported by the Natural Sciences and Engineering Research Council of Canada under grant OGP0037230 and the Centre for Systems <p> Such kind of queries are better to be treated as information probes and be answered by providing general or associated information with data distribution statistics, which may help users understand the data better and form more accurate queries <ref> [5, 2, 6] </ref>. In an MLDB system, probe queries can be mapped to a relatively higher concept layer and be processed in such a layer. Such answers may provide associative and summary information and assist users to refine their queries. <p> an explanation that the returned information is for the range of $250k-$300k instead of $280k-$300k to avoid misunderstanding. 2 4.2 Cooperative query answering in an MLDB Since an MLDB stores general database information in higher layers, many techniques investigated in previous researches on cooperative query answering in (single layered) databases <ref> [14, 6, 5, 10, 13] </ref> can be extended to cooperative query answering in MLDBs, easily, effectively and efficiently. The following reasoning may convince us that an MLDB may greatly facilitate cooperative query answering. <p> Many cooperative query answering techniques need certain kinds of generalization [5, 11]; whereas different kinds of frequently used generalizations are performed and stored in the higher layers of an MLDB. Also, they often need to compare the "neighborhood" information <ref> [6, 5] </ref>. The generalized neighborhood tuples are usually stored in the same higher layer relations, ready for comparison and investigation. Moreover, they often need to summarize answer-related information, associated with data statistics or certain aggregations [5, 23].
Reference: [7] <author> B. de Ville. </author> <title> Applying statistical knowledge to database analysis and knowledge base construction. </title> <booktitle> In Proc. 6th Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 30-36, </pages> <address> Santa Barbara, CA, </address> <year> 1990. </year>
Reference-contexts: Furthermore, a given concept hierarchy can be adjusted dynamically based on the analysis of the statistical distribution of the relevant data sets. Generalization on numerical attributes can be performed similarly but in a more automatic way by the examination of data distribution characteristics <ref> [1, 9, 7] </ref>. In many cases, it may not require any predefined concept hierarchies. For example, the household income of customers can be clustered into several groups, such as fbelow 30K, 30K-50K, 50K-70K, over 70Kg, according to a relatively uniform data distribution criteria or using some statistical clustering analysis tools.
Reference: [8] <author> T. Duong and J. Hiller. </author> <title> Modelling the real world by multi-world data model. </title> <booktitle> In Proc. Int. Conf. Intelligent and Cooperative Information System, </booktitle> <pages> pages 279-290, </pages> <year> 1993. </year>
Reference-contexts: Since a database may contain different kinds of complex data, it is important to examine the method for generalization of each kind of data, including unstructured and structured values, spatial and multimedia data, etc <ref> [17, 8] </ref>. 3.1 Generalization of different kinds of data 3.1.1 Generalization on simple values Simple (containing no internal structures) numerical and nonnumerical data are the most popularly encountered attribute values in databases.
Reference: [9] <author> D. Fisher. </author> <title> Improving inference through conceptual clustering. </title> <booktitle> In Proc. 1987 AAAI Conf., </booktitle> <pages> pages 461-465, </pages> <address> Seattle, Washington, </address> <month> July </month> <year> 1987. </year>
Reference-contexts: Furthermore, a given concept hierarchy can be adjusted dynamically based on the analysis of the statistical distribution of the relevant data sets. Generalization on numerical attributes can be performed similarly but in a more automatic way by the examination of data distribution characteristics <ref> [1, 9, 7] </ref>. In many cases, it may not require any predefined concept hierarchies. For example, the household income of customers can be clustered into several groups, such as fbelow 30K, 30K-50K, 50K-70K, over 70Kg, according to a relatively uniform data distribution criteria or using some statistical clustering analysis tools.
Reference: [10] <author> T. Gaasterland. </author> <title> Restricting query relaxation through user constraints. </title> <booktitle> In Proc. Int. Conf. Intelligent and Cooperative Information System, </booktitle> <pages> pages 359-366, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Cooperative (or intelligent) query answering refers to a mechanism which answers queries cooperatively and intelligently by analyzing the intent of a query and providing some generalized, neighborhood, or associated answers [5, 11, 2]. Many interesting techniques <ref> [14, 6, 5, 10, 13, 15] </ref> have been developed for cooperative query answering, by integration of the methods developed in several related fields, such as semantic data modeling [3], fl Research partially supported by the Natural Sciences and Engineering Research Council of Canada under grant OGP0037230 and the Centre for Systems <p> an explanation that the returned information is for the range of $250k-$300k instead of $280k-$300k to avoid misunderstanding. 2 4.2 Cooperative query answering in an MLDB Since an MLDB stores general database information in higher layers, many techniques investigated in previous researches on cooperative query answering in (single layered) databases <ref> [14, 6, 5, 10, 13] </ref> can be extended to cooperative query answering in MLDBs, easily, effectively and efficiently. The following reasoning may convince us that an MLDB may greatly facilitate cooperative query answering.
Reference: [11] <author> T. Gaasterland, P. Godgrey, and J. Minker. </author> <title> Relaxation as a platform for cooperative answering. </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 1 </volume> <pages> 293-321, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Cooperative (or intelligent) query answering refers to a mechanism which answers queries cooperatively and intelligently by analyzing the intent of a query and providing some generalized, neighborhood, or associated answers <ref> [5, 11, 2] </ref>. <p> The following reasoning may convince us that an MLDB may greatly facilitate cooperative query answering. Many cooperative query answering techniques need certain kinds of generalization <ref> [5, 11] </ref>; whereas different kinds of frequently used generalizations are performed and stored in the higher layers of an MLDB. Also, they often need to compare the "neighborhood" information [6, 5]. The generalized neighborhood tuples are usually stored in the same higher layer relations, ready for comparison and investigation.
Reference: [12] <author> J. Han, Y. Cai, and N. Cercone. </author> <title> Knowledge discovery in databases: An attribute-oriented approach. </title> <booktitle> In Proc. 18th Int. Conf. Very Large Data Bases, </booktitle> <pages> pages 547-559, </pages> <address> Vancouver, Canada, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: Otherwise, it is called information-preserving join. 3.2.2 An MLDB construction algorithm Based on the previous discussion, the construction of an MLDB can be summarized into the following algorithm, which is similar to attribute-oriented generalization in knowledge discovery in databases <ref> [4, 12] </ref>. Algorithm 1 Construction of an MLDB. Input: A relational database, a set of concept hierarchies, and a set of frequently referenced attributes and frequently used query patterns. Output: A multiple layered database. Method. An MLDB is constructed in the follow ing steps. 1. <p> Obviously, the frequently referenced attributes should be preserved in higher layers, and the frequently referenced concept levels should be considered as the candidate concept levels in the construction of higher layers. Steps 2 and 3 are performed in a way similar to the attribute-oriented induction, studied previously <ref> [12, 4] </ref>.
Reference: [13] <author> J. Han, Y. Huang, and N. Cercone. </author> <title> Intelligent query answering by knowledge discovery techniques. </title> <journal> In submitted to IEEE Trans. Knowledge and Data Engineering, </journal> <year> 1993. </year>
Reference-contexts: 1 Introduction Cooperative (or intelligent) query answering refers to a mechanism which answers queries cooperatively and intelligently by analyzing the intent of a query and providing some generalized, neighborhood, or associated answers [5, 11, 2]. Many interesting techniques <ref> [14, 6, 5, 10, 13, 15] </ref> have been developed for cooperative query answering, by integration of the methods developed in several related fields, such as semantic data modeling [3], fl Research partially supported by the Natural Sciences and Engineering Research Council of Canada under grant OGP0037230 and the Centre for Systems <p> an explanation that the returned information is for the range of $250k-$300k instead of $280k-$300k to avoid misunderstanding. 2 4.2 Cooperative query answering in an MLDB Since an MLDB stores general database information in higher layers, many techniques investigated in previous researches on cooperative query answering in (single layered) databases <ref> [14, 6, 5, 10, 13] </ref> can be extended to cooperative query answering in MLDBs, easily, effectively and efficiently. The following reasoning may convince us that an MLDB may greatly facilitate cooperative query answering.
Reference: [14] <author> T. Imielinski. </author> <title> Intelligent query answering in rule based systems. </title> <journal> J. Logic Programming, </journal> <volume> 4 </volume> <pages> 229-257, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction Cooperative (or intelligent) query answering refers to a mechanism which answers queries cooperatively and intelligently by analyzing the intent of a query and providing some generalized, neighborhood, or associated answers [5, 11, 2]. Many interesting techniques <ref> [14, 6, 5, 10, 13, 15] </ref> have been developed for cooperative query answering, by integration of the methods developed in several related fields, such as semantic data modeling [3], fl Research partially supported by the Natural Sciences and Engineering Research Council of Canada under grant OGP0037230 and the Centre for Systems <p> modeling [3], fl Research partially supported by the Natural Sciences and Engineering Research Council of Canada under grant OGP0037230 and the Centre for Systems Science of Simon Fraser University. y Research partially supported by the Natural Sciences and Engineering Research Council of Canada under grants OGP0138055 and STR0134419. deductive databases <ref> [14] </ref>, knowledge discovery in databases [4, 15], etc. Cooperative query answering can be realized by generalization and summarization of answers, explanation of answers or returning intensional answers, query rewriting using associated or neighborhood information, comparison of answers with those of similar queries, etc. <p> an explanation that the returned information is for the range of $250k-$300k instead of $280k-$300k to avoid misunderstanding. 2 4.2 Cooperative query answering in an MLDB Since an MLDB stores general database information in higher layers, many techniques investigated in previous researches on cooperative query answering in (single layered) databases <ref> [14, 6, 5, 10, 13] </ref> can be extended to cooperative query answering in MLDBs, easily, effectively and efficiently. The following reasoning may convince us that an MLDB may greatly facilitate cooperative query answering.
Reference: [15] <author> K. A. Kaufman, R. S. Michalski, and L. Ker-schberg. </author> <title> Mining for knowledge in databases: Goals and general description of the INLEN system. </title> <editor> In G. Piatetsky-Shapiro and W. J. Frawley, editors, </editor> <booktitle> Knowledge Discovery in Databases, </booktitle> <pages> pages 449-462. </pages> <publisher> AAAI/MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction Cooperative (or intelligent) query answering refers to a mechanism which answers queries cooperatively and intelligently by analyzing the intent of a query and providing some generalized, neighborhood, or associated answers [5, 11, 2]. Many interesting techniques <ref> [14, 6, 5, 10, 13, 15] </ref> have been developed for cooperative query answering, by integration of the methods developed in several related fields, such as semantic data modeling [3], fl Research partially supported by the Natural Sciences and Engineering Research Council of Canada under grant OGP0037230 and the Centre for Systems <p> supported by the Natural Sciences and Engineering Research Council of Canada under grant OGP0037230 and the Centre for Systems Science of Simon Fraser University. y Research partially supported by the Natural Sciences and Engineering Research Council of Canada under grants OGP0138055 and STR0134419. deductive databases [14], knowledge discovery in databases <ref> [4, 15] </ref>, etc. Cooperative query answering can be realized by generalization and summarization of answers, explanation of answers or returning intensional answers, query rewriting using associated or neighborhood information, comparison of answers with those of similar queries, etc.
Reference: [16] <author> H. F. Korth and A. Silberschatz. </author> <title> Database System Concepts, </title> <publisher> 2ed. McGraw-Hill, </publisher> <year> 1991. </year>
Reference-contexts: Similar to many extended relational databases, a route map can be represented by an extended E-R (entity-relationship) diagram [21], in which the entities and relationships at layer-0 (the original database) can be represented in a conventional E-R diagram <ref> [16] </ref>; whereas generalization is represented by a double-line arrow pointed from the generalizing entity (or relationship) to the generalized entity (or relationship). For example, house 0 is a higher layered entity generalized from a lower layer entity house, as shown in Fig. 1. <p> It is represented as a generalization from a relationship obtained by joining one entity and one relationship in the route map (Fig. 1). Since an extended E-R database can be easily mapped into an extended relational one <ref> [16] </ref>, our discussion assumes such mappings and still adopts the terminologies from an extended relational model. 6 A generalization path is created for each high layer relation to represent how the relation is obtained in the generalization.
Reference: [17] <author> M. Manago and Y. Kodratoff. </author> <title> Induction of decision trees from complex structured data. </title> <editor> In G. Piatetsky-Shapiro and W. J. Frawley, editors, </editor> <booktitle> Knowledge Discovery in Databases, </booktitle> <pages> pages 289-306. </pages> <publisher> AAAI/MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: Since a database may contain different kinds of complex data, it is important to examine the method for generalization of each kind of data, including unstructured and structured values, spatial and multimedia data, etc <ref> [17, 8] </ref>. 3.1 Generalization of different kinds of data 3.1.1 Generalization on simple values Simple (containing no internal structures) numerical and nonnumerical data are the most popularly encountered attribute values in databases.
Reference: [18] <author> J. Mylopoulos, V. K. Chaudhri, D. Plexousakis, and T. Topaloglou. </author> <title> Adapting database implementation techniques to managing very large knowledge bases. </title> <booktitle> In Proc. Int. Conf. Building and Sharing of Very Large-Scale Knowledge Bases'93, </booktitle> <pages> pages 215-224, </pages> <address> Tokyo, Japan, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: An MLDB system may preprocess and generalize some primitive data, resolve certain semantic ambiguities of heterogeneous data, and store the preprocessed data at a more general concept layer, which may facilitate high-level querying and reduce the cost of query processing <ref> [19, 22, 18] </ref>. Secondly, a database user may not be familiar 1 with a database schema, a query language, or spe-cific data constraints. It is likely that such a user may pose queries which are not exactly what (s)he wants to know.
Reference: [19] <author> R.L. Read, D.S. Fussell, and A. Silberschatz. </author> <title> A multi-resolution relational data model. </title> <booktitle> In Proc. 18th Int. Conf. Very Large Data Bases, </booktitle> <pages> pages 139-150, </pages> <address> Vancouver, Canada, </address> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: An MLDB system may preprocess and generalize some primitive data, resolve certain semantic ambiguities of heterogeneous data, and store the preprocessed data at a more general concept layer, which may facilitate high-level querying and reduce the cost of query processing <ref> [19, 22, 18] </ref>. Secondly, a database user may not be familiar 1 with a database schema, a query language, or spe-cific data constraints. It is likely that such a user may pose queries which are not exactly what (s)he wants to know. <p> Direct and cooperative query answering in such a MLDB are studied with the implementation techniques examined and the benefits and limitations analyzed. Although there have been some studies on the construction of multiple resolution databases <ref> [19] </ref>, more studies are needed in the construction and utilization of multiple layered databases in cooperative query answering. We plan to perform a more detailed performance study and quantitative analysis of the methods related to the construction, maintenance and application of MLDBs and report our further investigations in the future.
Reference: [20] <author> C. Shum and R. Muntz. </author> <title> An information-theoretic study on aggregate responses. </title> <editor> In F. Bancilhon and D. J. Dewit, editors, </editor> <booktitle> 14th Int. Conf. Very Large Data Bases. </booktitle> <address> Los Angeles, USA, </address> <month> August, </month> <year> 1988. </year>
Reference-contexts: structures by high-level concepts or aggregation, and (4) return the type or an overview of the structure. 3.1.3 Aggregation and approximation as a means of generalization Besides concept tree ascension (i.e., replacing concepts by their corresponding higher level concepts in a concept hierarchy) and structured data summarization, aggregation and approximation <ref> [20] </ref> should be considered as an important means of generalization, which is especially useful for generalization of attributes with large sets of values, complex structures, spatial or multimedia data, etc. Take spatial data as an example.
Reference: [21] <author> T. J. Teorey, D. Yang, and J. P. Fry. </author> <title> A logical design methodology for relational databases using the extended entity-relationship model. </title> <journal> ACM Comput. Surv., </journal> <volume> 18 </volume> <pages> 197-222, </pages> <year> 1986. </year>
Reference-contexts: A set of generalization paths, each of which shows how a higher layered relation is generalized from one or a set of lower layered rela tions. Similar to many extended relational databases, a route map can be represented by an extended E-R (entity-relationship) diagram <ref> [21] </ref>, in which the entities and relationships at layer-0 (the original database) can be represented in a conventional E-R diagram [16]; whereas generalization is represented by a double-line arrow pointed from the generalizing entity (or relationship) to the generalized entity (or relationship).
Reference: [22] <author> S.V. Vrbsky and J. W. S. Liu. </author> <title> An object-oriented query processor that returns monotonically improving answers. </title> <booktitle> In Proc. 7th IEEE Conf. on Data Engineering, </booktitle> <pages> pages 472-481, </pages> <address> Kobe, Japan, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: An MLDB system may preprocess and generalize some primitive data, resolve certain semantic ambiguities of heterogeneous data, and store the preprocessed data at a more general concept layer, which may facilitate high-level querying and reduce the cost of query processing <ref> [19, 22, 18] </ref>. Secondly, a database user may not be familiar 1 with a database schema, a query language, or spe-cific data constraints. It is likely that such a user may pose queries which are not exactly what (s)he wants to know. <p> It facilitates progressive query refinement, from general information browsing to specific data retrieval. Such a process represents a top-down information searching process, which matches human's reasoning and learning process naturally, thus provides a cooperative process for step-by-step information exploration <ref> [22, 24] </ref>. Clearly, with these advantages, MLDB may become a valuable tool in cooperative query answering.
Reference: [23] <author> C. Wittemann and H. Kunst. </author> <title> Intelligent assistance in flexible decisions. </title> <booktitle> In Proc. Int. Conf. Intelligent and Cooperative Information System, </booktitle> <pages> pages 377-381, </pages> <year> 1993. </year>
Reference-contexts: Also, they often need to compare the "neighborhood" information [6, 5]. The generalized neighborhood tuples are usually stored in the same higher layer relations, ready for comparison and investigation. Moreover, they often need to summarize answer-related information, associated with data statistics or certain aggregations <ref> [5, 23] </ref>. Interestingly, a higher-layered relation not only presents the generalized tuples but also the counts of the identical tuples or other computed aggregation values (such as sum, average, etc.). Such high-level information with counts conveys important information for data summarization and statistical data investigation.
Reference: [24] <author> M.F. Wolf. </author> <title> Successful integration of databases, knowledge-based systems, and human judgement. </title> <booktitle> In Proc. Int. Conf. Intelligent and Cooperative Information System, </booktitle> <pages> pages 154-162, </pages> <year> 1993. </year> <month> 12 </month>
Reference-contexts: It facilitates progressive query refinement, from general information browsing to specific data retrieval. Such a process represents a top-down information searching process, which matches human's reasoning and learning process naturally, thus provides a cooperative process for step-by-step information exploration <ref> [22, 24] </ref>. Clearly, with these advantages, MLDB may become a valuable tool in cooperative query answering.
References-found: 24

