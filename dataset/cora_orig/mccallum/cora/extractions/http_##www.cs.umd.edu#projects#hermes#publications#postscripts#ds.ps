URL: http://www.cs.umd.edu/projects/hermes/publications/postscripts/ds.ps
Refering-URL: http://www.cs.umd.edu/projects/hermes/publications/abstracts/ds.html
Root-URL: 
Title: An Event-Based Model for Continuous Media Data on Heterogeneous Disk Servers  
Author: K. Sel~cuk Candan, Eenjun Hwang, and V.S. Subrahmanian 
Note: QuickSOL works well in practice.  
Abstract: Over the last few years, there has been intense work on the problem of retrieval of continuous media (CM) data from disk. However, no single unified framework exists within which such retrieval problems can be studied. In this paper, we first propose a formal model for CM-data retrieval from heterogeneous disk servers. This model can be used to characterize CM-data retrieval problems independently of how data is laid-out on disk, and what objectives (e.g. minimize client delay, maximize buffer utilization, etc.) the system manager is interested in. We then show how using this formal model, we can neatly define what it means to optimally handle events that occur in movie-on-demand (MOD) systems. Examples of such events include new clients entering the system, old clients leaving the system, continuing clients doing pause, rewind and fast-forward operations. Multiple events may occur simultaneously and we show how such events trigger state-transitions in the system. We then develop an algorithm called the QuickSOL algorithm that handles events occurring in MOD systems. This algorithm works in two phases: in the first phase it quickly finds a way of handling as many of the events occurring at time t as possible. In the second phase, it optimizes the solution found in the first phase. The advantage is that the algorithm can be interrupted anytime after the first phase is completed. We report on experiments showing that 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Adali, K.S. Candan, S.-S. Chen, K. Erol, and V.S.Subrahmanian. </author> <title> Advanced Video Information Systems, </title> <note> Accepted for publication in: ACM Multimedia Journal. </note>
Reference-contexts: Other Efforts: Other authors such as [9] are developing comprehensive video servers including media players and file servers. Muntz and his colleagues [3] are developing performance metrics to assess fault tolerant construction of multimedia servers. Content-based methods to index and retrieve multimedia data have been developed in <ref> [1, 13] </ref> these approaches develop models and representations of the information contained in multimedia data, but do not attempt to specify how to retrieve and presented uninterrupted streams of such data from disk which is the topic of this paper. 7 Conclusions Over the last few years, there have been significant
Reference: [2] <author> S. Berson and S. Ghandeharizadeh. </author> <title> (1994) Staggered Striping in Multimedia Information Systems, </title> <booktitle> Proc. 1994 ACM SIGMOD Conf. on Management of Data, </booktitle> <address> Minneapolis, MN, pps 79-90. </address>
Reference-contexts: 1 Introduction During the last few years, the problem of efficiently retrieving continuous media data (CM-data, for short) from disk has been recognized as a major problem that must be solved if applications such as video-on-demand are to become a commercial reality. Towards this end, several authors <ref> [2, 17, 18, 21, 24] </ref> have proposed frameworks for organizing CM-data on disk furthermore, a wide variety of impressive experimental results [3, 10, 8, 12, 15] have been reported in the literature. In this paper, we will propose a unified framework for the modeling and evaluation of CM-disk servers. <p> When a disk server has n disks in it, we will assume that the bandwidth of the server is n fi 1:6 MB/s - this assumes that data has been striped across the disks accessed by this server. This is a reasonable assumption <ref> [2] </ref>. As more and more clients enter the system, the system becomes "less responsive." Appendix A contains 10 figures showing how FindSOL behaves during the last 200 cycles of this 4000 cycle run - in these cycles, the system is more or less "maximally" loaded. <p> Work on Placement Mappings: Vin et. al.[24] develop two different ways of placing media data on disk arrays and analyze the performance of media systems based on these placement strategies. Similarly, Berson and Ghandeharizadeh <ref> [2] </ref> argue that staggered striping (a particular kind of placement mapping) enhances performance in video on demand systems. Ozden et. al. [17] propose movie on demand systems where each movie is stored on a separate disk which, of course, is a special kind of placement mapping. <p> We have developed the QuickSOL algorithm that efficiently computes new states that handle a set of client transactions. QuickSOL is independent of placement mappings, and independent of objective functions, and hence, it can work with many different placement mappings <ref> [2, 18, 21, 24] </ref>. We have implemented our QuickSOL algorithm and conducted experiments to determine how many clients can be effectively serviced by QuickSOL. Furthermore, QuickSOL applies to many situations to which previous special-purpose algorithms do not apply, thus making it much more widely usable. Acknowledgements.
Reference: [3] <author> S. Berson, L. Golubchik and R. Muntz. </author> <title> (1995) Fault Tolerant Design of Multimedia Servers, </title> <booktitle> Proc. 1995 ACM SIGMOD Conf. on Management of Data, </booktitle> <address> San Jose, CA, pps 364-375. </address>
Reference-contexts: Towards this end, several authors [2, 17, 18, 21, 24] have proposed frameworks for organizing CM-data on disk furthermore, a wide variety of impressive experimental results <ref> [3, 10, 8, 12, 15] </ref> have been reported in the literature. In this paper, we will propose a unified framework for the modeling and evaluation of CM-disk servers. This unified model will have the following features, many of which are new: 1. <p> By "plugging" in this enhanced bandwidth rate in our model, our QuickSOL algorithm will be able to effectively satisfy more clients. Other Efforts: Other authors such as [9] are developing comprehensive video servers including media players and file servers. Muntz and his colleagues <ref> [3] </ref> are developing performance metrics to assess fault tolerant construction of multimedia servers.
Reference: [4] <author> A. Brink, S. Marcus and V.S. Subrahmanian. </author> <title> Heterogeneous Multimedia Reasoning. </title> <journal> IEEE Computer, </journal> <volume> 28, 9, </volume> <pages> pps 33-39, </pages> <month> Sep. </month> <year> 1995. </year>
Reference: [5] <author> H.J. Chen, A. Krishnamurthy, T.D.C. Little and D. Venkatesh. </author> <title> (1995) A Scalable Video-on-Demand Service for the Provision of VCR-like Functions, </title> <booktitle> Proc. 1995 IEEE Intl. Conf. on Multimedia Computing Systems, </booktitle> <address> pps 65-72. </address>
Reference-contexts: As a consequence, our model allows media-service providers to "plug in" different kinds of objective functions in an attempt to evaluate how well these objective functions match observed performance. VCR Capabilities: Several authors <ref> [5, 7, 8] </ref> develop disk models that facilitate supporting different kinds of VCR operations such as fast forward, rewind, pause, etc. [5] provides ways of scheduling "rewind" operations. [7] develop techniques to support browsing video sequences at variable rates (thus implicitly supporting fast forward, rewind, etc.). <p> VCR Capabilities: Several authors [5, 7, 8] develop disk models that facilitate supporting different kinds of VCR operations such as fast forward, rewind, pause, etc. <ref> [5] </ref> provides ways of scheduling "rewind" operations. [7] develop techniques to support browsing video sequences at variable rates (thus implicitly supporting fast forward, rewind, etc.).
Reference: [6] <author> K.S. Candan, E. Hwang and V.S. Subrahmanian. </author> <title> (1995) A Unified Model for Continuous Media Data on Heterogeneous Disk Servers, </title> <institution> Univ. of Md. </institution> <type> Tech. Report, </type> <month> Oct. </month> <year> 1995. </year>
Reference: [7] <author> M.-S.Chen, D.D. Kandlur, and P.S. Yu. </author> <title> (1994) Support for Fully Interactive Playout in a Disk-Array-Based Video Server, </title> <booktitle> Proc. ACM Multimedia 1994, </booktitle> <address> pps 391-398. </address> <month> 29 </month>
Reference-contexts: As a consequence, our model allows media-service providers to "plug in" different kinds of objective functions in an attempt to evaluate how well these objective functions match observed performance. VCR Capabilities: Several authors <ref> [5, 7, 8] </ref> develop disk models that facilitate supporting different kinds of VCR operations such as fast forward, rewind, pause, etc. [5] provides ways of scheduling "rewind" operations. [7] develop techniques to support browsing video sequences at variable rates (thus implicitly supporting fast forward, rewind, etc.). <p> VCR Capabilities: Several authors [5, 7, 8] develop disk models that facilitate supporting different kinds of VCR operations such as fast forward, rewind, pause, etc. [5] provides ways of scheduling "rewind" operations. <ref> [7] </ref> develop techniques to support browsing video sequences at variable rates (thus implicitly supporting fast forward, rewind, etc.). <p> Our paper provides a single unified framework within which different objective functions 27 can be tried out. Furthermore, though <ref> [7] </ref> allows access from disk arrays (the other papers in this group do not), these arrays are assumed to be homogeneous.
Reference: [8] <author> J.K. Dey-Sircar, J.D. Salehi, J.F. Kurose and D. Towsley. </author> <title> (1994) Providing VCR Capabilities in Large-scale Video Servers, </title> <booktitle> Proc. ACM Multimedia 1994, </booktitle> <address> pps 25-32. </address>
Reference-contexts: Towards this end, several authors [2, 17, 18, 21, 24] have proposed frameworks for organizing CM-data on disk furthermore, a wide variety of impressive experimental results <ref> [3, 10, 8, 12, 15] </ref> have been reported in the literature. In this paper, we will propose a unified framework for the modeling and evaluation of CM-disk servers. This unified model will have the following features, many of which are new: 1. <p> As a consequence, our model allows media-service providers to "plug in" different kinds of objective functions in an attempt to evaluate how well these objective functions match observed performance. VCR Capabilities: Several authors <ref> [5, 7, 8] </ref> develop disk models that facilitate supporting different kinds of VCR operations such as fast forward, rewind, pause, etc. [5] provides ways of scheduling "rewind" operations. [7] develop techniques to support browsing video sequences at variable rates (thus implicitly supporting fast forward, rewind, etc.). <p> They are interested in sampling segments of video and minimizing the variation on the number of vide segments skipped during fast forward/rewind. <ref> [8] </ref> develop a statistical model of vide retrieval that maximizes statistical quality of service under some conditions. The observant reader would have noticed that all the above works optimize different objective functions, even though they all have the same common goal, viz. to efficiently support the standard VCR operations.
Reference: [9] <author> C. Federighi and L. Rowe. </author> <title> (1994) A Distributed Hierarchical Storage manager for a Video-on-Demand System, </title> <booktitle> Proc. of the 2nd SPIE Symp. on Sotrage and Retrieval of Video Databases, </booktitle> <address> pps 185-197. </address>
Reference-contexts: By "plugging" in this enhanced bandwidth rate in our model, our QuickSOL algorithm will be able to effectively satisfy more clients. Other Efforts: Other authors such as <ref> [9] </ref> are developing comprehensive video servers including media players and file servers. Muntz and his colleagues [3] are developing performance metrics to assess fault tolerant construction of multimedia servers.
Reference: [10] <author> C. Freedman and D.J. Dewitt. </author> <title> (1995) The SPIFFI Scalable Video-on-Demand System, </title> <booktitle> Proc. 1995 ACM SIGMOD Conf. on Management of Data, </booktitle> <address> San Jose, CA, pps 352-363. </address>
Reference-contexts: Towards this end, several authors [2, 17, 18, 21, 24] have proposed frameworks for organizing CM-data on disk furthermore, a wide variety of impressive experimental results <ref> [3, 10, 8, 12, 15] </ref> have been reported in the literature. In this paper, we will propose a unified framework for the modeling and evaluation of CM-disk servers. This unified model will have the following features, many of which are new: 1. <p> Intuitively at any given point in time t, each disk server i has a "read-period" - slices of this read-period are allocated to the different clients (any time in the read-period not allocated to a client may be used for other operations such as pre-fetching <ref> [15, 10] </ref>, etc.) 3. dtr (i): the total disk bandwidth associated with disk server i. 4. switchtime (i; t): this specifies the time required for disk server i to switch from one client's job to another client's job at time t. * Client Characteristics: Different clients participating in an MOD system <p> Buffering and Prefetching Issues: Ng and his colleagues [12, 15] have developed efficient buffer management techniques to handle video data and ensure that the clients' consumption rate requirements are met. They show that pre-fetching techniques enhance performance and that multiple media-streams may neatly share buffers. Freedman and Dewitt <ref> [10] </ref> develop simulation studies showing that certain buffer page replacement and prefetching algorithms perform better than algorithms such as the group sweeping scheme algorithm of Yu et. al.
Reference: [11] <author> D.J. </author> <title> Gemmell. (1993) Multimedia Network File Servers: Multi-channel Delay Sensitive Data Retrieval, </title> <booktitle> Proc. ACM Multimedia 1993, </booktitle> <address> pps 243-250. </address>
Reference: [12] <author> D. Makaroff and R. T. Ng. </author> <title> (1994) Schemes for Implementing Buffer Sharing in Continuous Media Systems, </title> <journal> Information Systems, </journal> <volume> 19, 4, </volume> <pages> pps 33-54. </pages>
Reference-contexts: Towards this end, several authors [2, 17, 18, 21, 24] have proposed frameworks for organizing CM-data on disk furthermore, a wide variety of impressive experimental results <ref> [3, 10, 8, 12, 15] </ref> have been reported in the literature. In this paper, we will propose a unified framework for the modeling and evaluation of CM-disk servers. This unified model will have the following features, many of which are new: 1. <p> Our analytic model can be used to model any set of heterogeneous disks/servers as long as some information about the characteristics of these servers can be provided to us. 2. Most existing disk scheduling algorithms are tightly-coupled to a specific goal - e.g. maximize disk utilization <ref> [15, 12] </ref>, minimize jitter, minimize delay time maximize buffer utilization [15, 19, 12], to name a few. In this paper, we discuss which goals should be used to improve the efficiency of a video disk system, and we show how MOD systems can handle a combination of such goals. <p> Most existing disk scheduling algorithms are tightly-coupled to a specific goal - e.g. maximize disk utilization [15, 12], minimize jitter, minimize delay time maximize buffer utilization <ref> [15, 19, 12] </ref>, to name a few. In this paper, we discuss which goals should be used to improve the efficiency of a video disk system, and we show how MOD systems can handle a combination of such goals. <p> Finally, we report on results obtained by a simulation of our algorithms using simulation parameters in <ref> [12, 15, 19, 20] </ref>. The experimental data allows us to derive specific numbers of clients that can be supported using QuickSOL given certain assumptions on disk server and client characteristics. <p> However, different disk servers may access different, heterogeneous disks. The characteristics of each disk server may be obtained from the characteristics of the disks in the disk array by using methods such as those of Ng. et. al. <ref> [12, 15] </ref>. These characteristics include: 1. buf (i): the total buffer space associated with disk server i, for 1 i N . 4 2. cyctime (i; t): the total cycle time [20, 19, 15] for a read-operation performed by disk server i at time t. <p> In contrast, in our paper, we have tried to provide a single unified framework within which different objective functions can be tried out under different placement mappings using heterogeneous disk servers. Buffering and Prefetching Issues: Ng and his colleagues <ref> [12, 15] </ref> have developed efficient buffer management techniques to handle video data and ensure that the clients' consumption rate requirements are met. They show that pre-fetching techniques enhance performance and that multiple media-streams may neatly share buffers.
Reference: [13] <author> S. Marcus and V.S. Subrahmanian. </author> <title> (1994) Foundations of Multimedia Database Systems, </title> <note> accepted for publication in: Journal of the ACM. </note>
Reference-contexts: Other Efforts: Other authors such as [9] are developing comprehensive video servers including media players and file servers. Muntz and his colleagues [3] are developing performance metrics to assess fault tolerant construction of multimedia servers. Content-based methods to index and retrieve multimedia data have been developed in <ref> [1, 13] </ref> these approaches develop models and representations of the information contained in multimedia data, but do not attempt to specify how to retrieve and presented uninterrupted streams of such data from disk which is the topic of this paper. 7 Conclusions Over the last few years, there have been significant
Reference: [14] <author> G. Miller, G. Baber, and M. Gillilana. </author> <title> (1993) News-on-Demand for Multimedia Networks, </title> <booktitle> Proc. ACM Multimedia 1993, </booktitle> <address> pps 383-392. </address>
Reference: [15] <author> R.T. Ng and J. Yang. </author> <title> (1995) An Analysis of Buffer Sharing and Prefetching Techniques for Multimedia Systems, </title> <note> accepted for publication in: ACM Multimedia Journal. </note>
Reference-contexts: Towards this end, several authors [2, 17, 18, 21, 24] have proposed frameworks for organizing CM-data on disk furthermore, a wide variety of impressive experimental results <ref> [3, 10, 8, 12, 15] </ref> have been reported in the literature. In this paper, we will propose a unified framework for the modeling and evaluation of CM-disk servers. This unified model will have the following features, many of which are new: 1. <p> Our analytic model can be used to model any set of heterogeneous disks/servers as long as some information about the characteristics of these servers can be provided to us. 2. Most existing disk scheduling algorithms are tightly-coupled to a specific goal - e.g. maximize disk utilization <ref> [15, 12] </ref>, minimize jitter, minimize delay time maximize buffer utilization [15, 19, 12], to name a few. In this paper, we discuss which goals should be used to improve the efficiency of a video disk system, and we show how MOD systems can handle a combination of such goals. <p> Most existing disk scheduling algorithms are tightly-coupled to a specific goal - e.g. maximize disk utilization [15, 12], minimize jitter, minimize delay time maximize buffer utilization <ref> [15, 19, 12] </ref>, to name a few. In this paper, we discuss which goals should be used to improve the efficiency of a video disk system, and we show how MOD systems can handle a combination of such goals. <p> Finally, we report on results obtained by a simulation of our algorithms using simulation parameters in <ref> [12, 15, 19, 20] </ref>. The experimental data allows us to derive specific numbers of clients that can be supported using QuickSOL given certain assumptions on disk server and client characteristics. <p> However, different disk servers may access different, heterogeneous disks. The characteristics of each disk server may be obtained from the characteristics of the disks in the disk array by using methods such as those of Ng. et. al. <ref> [12, 15] </ref>. These characteristics include: 1. buf (i): the total buffer space associated with disk server i, for 1 i N . 4 2. cyctime (i; t): the total cycle time [20, 19, 15] for a read-operation performed by disk server i at time t. <p> These characteristics include: 1. buf (i): the total buffer space associated with disk server i, for 1 i N . 4 2. cyctime (i; t): the total cycle time <ref> [20, 19, 15] </ref> for a read-operation performed by disk server i at time t. <p> Intuitively at any given point in time t, each disk server i has a "read-period" - slices of this read-period are allocated to the different clients (any time in the read-period not allocated to a client may be used for other operations such as pre-fetching <ref> [15, 10] </ref>, etc.) 3. dtr (i): the total disk bandwidth associated with disk server i. 4. switchtime (i; t): this specifies the time required for disk server i to switch from one client's job to another client's job at time t. * Client Characteristics: Different clients participating in an MOD system <p> One then could continue the process with the next unsatisfiable event until no more unsatisfied events remain. 5 Experiments We have developed an experimental version of the QuickSOL algorithm described earlier. The experimental version uses the following assumptions: (1) cycle-time: 2 secs (as in <ref> [15] </ref>), (2) buffer size: average buffer size is 4.3 MB, (3) disk rate: 1.6 MB/sec, (4) number of movies: 40, each with 35000 blocks where a block is one frame, (5) segment size per disk: 6000 blocks (average), (6) total amount of time: 2000 cycles, (7) number of servers: 350, (8) <p> In contrast, in our paper, we have tried to provide a single unified framework within which different objective functions can be tried out under different placement mappings using heterogeneous disk servers. Buffering and Prefetching Issues: Ng and his colleagues <ref> [12, 15] </ref> have developed efficient buffer management techniques to handle video data and ensure that the clients' consumption rate requirements are met. They show that pre-fetching techniques enhance performance and that multiple media-streams may neatly share buffers.
Reference: [16] <author> N.J. Nilsson. </author> <booktitle> (1980) Principles of Artificial Intelligence, </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This algorithm encodes a procedure to search a search tree using the "best-first" search strategy studied in artificial intelligence <ref> [16] </ref>. One may think of OptimizeSOL as constructing a search tree where each node is a state, and NextStates represent the children of any given node by the application of Step 5 (c) of the OptimizeSOL algorithm.
Reference: [17] <author> B. Ozden, R. Rastogi and A. Silberschatz. </author> <title> (1994) A Low-Cost Storage Server for Movie-on-Demand Databases, </title> <booktitle> Proc. 20th Conf. on Very Large Databases, </booktitle> <address> pps 594-605, Santiago, Chile. </address>
Reference-contexts: 1 Introduction During the last few years, the problem of efficiently retrieving continuous media data (CM-data, for short) from disk has been recognized as a major problem that must be solved if applications such as video-on-demand are to become a commercial reality. Towards this end, several authors <ref> [2, 17, 18, 21, 24] </ref> have proposed frameworks for organizing CM-data on disk furthermore, a wide variety of impressive experimental results [3, 10, 8, 12, 15] have been reported in the literature. In this paper, we will propose a unified framework for the modeling and evaluation of CM-disk servers. <p> Similarly, Berson and Ghandeharizadeh [2] argue that staggered striping (a particular kind of placement mapping) enhances performance in video on demand systems. Ozden et. al. <ref> [17] </ref> propose movie on demand systems where each movie is stored on a separate disk which, of course, is a special kind of placement mapping. Our work complements these efforts our QuickSOL algorithm can work with any placement policy whatsoever and hence may be used in conjunction with the approaches.
Reference: [18] <author> D. Patterson, G. Gibson, and R. Katz. </author> <title> (1988) A Case for Redundant Arrays of Inexpensive Disks, </title> <booktitle> Proc. ACM SIGMOD Conf. on Management of Data 1988. </booktitle>
Reference-contexts: 1 Introduction During the last few years, the problem of efficiently retrieving continuous media data (CM-data, for short) from disk has been recognized as a major problem that must be solved if applications such as video-on-demand are to become a commercial reality. Towards this end, several authors <ref> [2, 17, 18, 21, 24] </ref> have proposed frameworks for organizing CM-data on disk furthermore, a wide variety of impressive experimental results [3, 10, 8, 12, 15] have been reported in the literature. In this paper, we will propose a unified framework for the modeling and evaluation of CM-disk servers. <p> To our knowledge, this is the first provably correct, optimal algorithm for retrieving continuous media data from disk. 4. Most existing algorithms assume that the CM-data being accessed is laid out on disk in a specific way - e.g. by striping <ref> [21, 18] </ref>. We expect (and hope !) that techniques to lay out data on disk will improve as time goes by. <p> One can think of this as a form of striping <ref> [21, 18] </ref> however, there are significant differences also. In striping, data is striped across disks to effect an increase bandwidth. In contrast, in event splitting, a client request (i.e. event) is broken up into smaller events that may be satisfied by distributing the load across multiple servers. <p> We have developed the QuickSOL algorithm that efficiently computes new states that handle a set of client transactions. QuickSOL is independent of placement mappings, and independent of objective functions, and hence, it can work with many different placement mappings <ref> [2, 18, 21, 24] </ref>. We have implemented our QuickSOL algorithm and conducted experiments to determine how many clients can be effectively serviced by QuickSOL. Furthermore, QuickSOL applies to many situations to which previous special-purpose algorithms do not apply, thus making it much more widely usable. Acknowledgements.
Reference: [19] <author> D. Rotem and J.L. Zhao. </author> <title> (1995) Buffer Management for Video Database Systems, </title> <booktitle> Proc. 1995 IEEE Intl.Conf. on Data Engineering, </booktitle> <address> pps 439-448. </address>
Reference-contexts: Most existing disk scheduling algorithms are tightly-coupled to a specific goal - e.g. maximize disk utilization [15, 12], minimize jitter, minimize delay time maximize buffer utilization <ref> [15, 19, 12] </ref>, to name a few. In this paper, we discuss which goals should be used to improve the efficiency of a video disk system, and we show how MOD systems can handle a combination of such goals. <p> Finally, we report on results obtained by a simulation of our algorithms using simulation parameters in <ref> [12, 15, 19, 20] </ref>. The experimental data allows us to derive specific numbers of clients that can be supported using QuickSOL given certain assumptions on disk server and client characteristics. <p> These characteristics include: 1. buf (i): the total buffer space associated with disk server i, for 1 i N . 4 2. cyctime (i; t): the total cycle time <ref> [20, 19, 15] </ref> for a read-operation performed by disk server i at time t. <p> (4) number of movies: 40, each with 35000 blocks where a block is one frame, (5) segment size per disk: 6000 blocks (average), (6) total amount of time: 2000 cycles, (7) number of servers: 350, (8) user arrival rate: between 2-6 new clients per second (compare with Rotem and Zhao <ref> [19] </ref> who consider 1-2 viewer per second when 350 servers are used), (8) user consumption rate: 200 KB/s. In the experiments outlined in this paper, we started a system "from scratch" (i.e. no clients) and injected clients into the system over a period of 2000 cycles (approx. 375 minutes). <p> As can be easily seen from the figures, even though we have a much higher arrival rate of client requests and a fully loaded system, FindSOL often responds faster than existing algorithms <ref> [19] </ref>. 6 Related Work Over the last few years, there has been growing interest in the efficient retrieval of multimedia data from disk. Venkat Rangan et. al.[23] provides an excellent survey of the state of the art techniques used in video storage and retrieval.
Reference: [20] <author> L. Rowe and B. Smith. </author> <title> (1992) A Continuous Media Player, </title> <booktitle> Proc. 3rd Intl. Workshop on Networks and Operating Systems Support for Digital Audio and Video. </booktitle>
Reference-contexts: Finally, we report on results obtained by a simulation of our algorithms using simulation parameters in <ref> [12, 15, 19, 20] </ref>. The experimental data allows us to derive specific numbers of clients that can be supported using QuickSOL given certain assumptions on disk server and client characteristics. <p> These characteristics include: 1. buf (i): the total buffer space associated with disk server i, for 1 i N . 4 2. cyctime (i; t): the total cycle time <ref> [20, 19, 15] </ref> for a read-operation performed by disk server i at time t.
Reference: [21] <author> K. Salem and H. Garcia-Molina. </author> <title> (1986) Disk Striping, </title> <booktitle> Proc. 1986 IEEE Conf. on Data Engineering. </booktitle>
Reference-contexts: 1 Introduction During the last few years, the problem of efficiently retrieving continuous media data (CM-data, for short) from disk has been recognized as a major problem that must be solved if applications such as video-on-demand are to become a commercial reality. Towards this end, several authors <ref> [2, 17, 18, 21, 24] </ref> have proposed frameworks for organizing CM-data on disk furthermore, a wide variety of impressive experimental results [3, 10, 8, 12, 15] have been reported in the literature. In this paper, we will propose a unified framework for the modeling and evaluation of CM-disk servers. <p> To our knowledge, this is the first provably correct, optimal algorithm for retrieving continuous media data from disk. 4. Most existing algorithms assume that the CM-data being accessed is laid out on disk in a specific way - e.g. by striping <ref> [21, 18] </ref>. We expect (and hope !) that techniques to lay out data on disk will improve as time goes by. <p> One can think of this as a form of striping <ref> [21, 18] </ref> however, there are significant differences also. In striping, data is striped across disks to effect an increase bandwidth. In contrast, in event splitting, a client request (i.e. event) is broken up into smaller events that may be satisfied by distributing the load across multiple servers. <p> We have developed the QuickSOL algorithm that efficiently computes new states that handle a set of client transactions. QuickSOL is independent of placement mappings, and independent of objective functions, and hence, it can work with many different placement mappings <ref> [2, 18, 21, 24] </ref>. We have implemented our QuickSOL algorithm and conducted experiments to determine how many clients can be effectively serviced by QuickSOL. Furthermore, QuickSOL applies to many situations to which previous special-purpose algorithms do not apply, thus making it much more widely usable. Acknowledgements.
Reference: [22] <author> P. Venkat Rangan, H. Vin and S. Ramanathan. </author> <title> (1992) Designing and On-Demand Multimedia Service, </title> <journal> IEEE Communications Magazine, </journal> <volume> pps 56-64, </volume> <month> July </month> <year> 1992. </year>
Reference: [23] <author> M. M. Buddhikot, S. S. Kumar, G. M. Parulkar, P. </author> <title> Venkat Rangan (1995) Storage Hierarchies and Video Servers, to appear in Handbook of Multimedia Systems, </title> <publisher> Prentice Hall, ed. Bill Grosky. </publisher>
Reference: [24] <author> H. Vin, S.S. Rao and P. Goyal. </author> <title> (1995) Optimizing the Placement of Multimedia Objects on Disk Arrays, </title> <booktitle> Proc. 1995 IEEE Intl. Conf. on Multimedia Computing Systems, </booktitle> <address> pps 158-165. </address> <month> 30 </month>
Reference-contexts: 1 Introduction During the last few years, the problem of efficiently retrieving continuous media data (CM-data, for short) from disk has been recognized as a major problem that must be solved if applications such as video-on-demand are to become a commercial reality. Towards this end, several authors <ref> [2, 17, 18, 21, 24] </ref> have proposed frameworks for organizing CM-data on disk furthermore, a wide variety of impressive experimental results [3, 10, 8, 12, 15] have been reported in the literature. In this paper, we will propose a unified framework for the modeling and evaluation of CM-disk servers. <p> We have developed the QuickSOL algorithm that efficiently computes new states that handle a set of client transactions. QuickSOL is independent of placement mappings, and independent of objective functions, and hence, it can work with many different placement mappings <ref> [2, 18, 21, 24] </ref>. We have implemented our QuickSOL algorithm and conducted experiments to determine how many clients can be effectively serviced by QuickSOL. Furthermore, QuickSOL applies to many situations to which previous special-purpose algorithms do not apply, thus making it much more widely usable. Acknowledgements.
References-found: 24

