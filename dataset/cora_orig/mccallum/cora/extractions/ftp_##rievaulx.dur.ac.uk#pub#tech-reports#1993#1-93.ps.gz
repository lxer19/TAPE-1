URL: ftp://rievaulx.dur.ac.uk/pub/tech-reports/1993/1-93.ps.gz
Refering-URL: http://www.progsoc.uts.edu.au/~geldridg/cpp/
Root-URL: 
Email: EMail C.D.Turner@durham.ac.uk  
Title: State-Based Testing and Inheritance  
Author: C. D. Turner and Dr D. J. Robson 
Date: 16 April, 1993  
Address: Durham, England  
Affiliation: Computer Science Division School of Engineering and Computer Science (SECS) University of Durham  
Pubnum: Technical Report No.: TR 1/93  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Doong. R. K. and Frankl, P., </author> <title> Case Studies in Testing ObjectOriented Programs, </title> <booktitle> in The 4th Testing, Analysis and Verification Symposium, </booktitle> <pages> pp. 165 - 177, </pages> <publisher> ACM Inc., </publisher> <address> New York, New York, </address> <year> 1991 </year>
Reference-contexts: The generation of the test case suites (TS, TP, TIS and TIP) are dependent upon the testing method chosen. Techniques such as the specification based technique of Frankl and Doong (see [2] and <ref> [1] </ref>) can be used for generating TIS. TS, TP and TIP can be produced by various traditional testing techniques that have been adapted to the objectoriented paradigm. For suggestions on the adaptation, see [6].
Reference: [2] <author> Frankl, P. G. and Doong, R., </author> <title> Tools for Testing ObjectOriented Programs, </title> <booktitle> in proceedings of the 8th Pacific NorthWest Conference on Software Quality, </booktitle> <pages> pp. 309 - 324, </pages> <year> 1990 </year>
Reference-contexts: The generation of the test case suites (TS, TP, TIS and TIP) are dependent upon the testing method chosen. Techniques such as the specification based technique of Frankl and Doong (see <ref> [2] </ref> and [1]) can be used for generating TIS. TS, TP and TIP can be produced by various traditional testing techniques that have been adapted to the objectoriented paradigm. For suggestions on the adaptation, see [6].
Reference: [3] <author> Harrold M. J., McGregor, J. D. and Fitzpatrick K. J., </author> <title> Incremental Testing of ObjectOriented Class Structure, </title> <booktitle> in 14th International Conference on Software Engineering, ACM, </booktitle> <year> 1992 </year>
Reference-contexts: 1. Introduction This report combines the work of Chris Turner [6], and that of Mary Jean Harrold et al. <ref> [3] </ref>. Turner (the author) has developed a new testing technique for objectoriented programs that complements the traditional approaches of both functional and structural testing. Harrold has developed an algorithm for the incremental testing of classes within a class hierarchy. <p> Integration testing between the two classes will be required. C.D.Turner - 15 - 16/04/93 5. Incremental Testing of Object- <p>- Oriented Programs This section describes the incremental testing method for objectoriented programs developed by M.J. Harrold et al. (see <ref> [3] </ref>). The algorithm uses a testing history which stores and controls the execution of the test cases for each class. As each class is analysed for testing, its test cases are formed by combining existing tests from its parent classes with new ones designed specifically for the new class.
Reference: [4] <editor> IEEE Standard 610.12-1990, </editor> <title> IEEE Standard Glossary of Software Engineering Terminology, </title> <publisher> IEEE, </publisher> <year> 1990 </year>
Reference-contexts: component under specified conditions, observing or recording the results, and making an evaluation of some aspect of the system or component. (2) The process of analysing a software item to detect the differences between existing and required conditions (that is, bugs) and to evaluate the features of the software items. <ref> [4] </ref> The process of testing consists of a number of activities such as unit, integration, and system testing. Only unit and integration testing are within the scope of this report; they are the main two testing activities that are dependent upon the paradigm used for the construction of the software. <p> Nevertheless, it is quite conceivable that individual test cases may concentrate their efforts on a single feature. The IEEE define integration testing as Testing in which software components, hardware components, or both are combined and tested to evaluate the interaction between them. <ref> [4] </ref> Integration testing for objectoriented programs involves the careful creation of all of the objects involved and the careful monitoring of the messages that are sent between them. These messages are akin to calls to functions provided as part of a module's external interface. C.D.Turner - 5 - 16/04/93 3.
Reference: [5] <author> Perry, D. E. and Kaiser, G. E., </author> <title> Adequate Testing and Object Oriented Programming, </title> <journal> Journal of ObjectOriented Programming, pp. </journal> <volume> 13 - 19, </volume> <month> January/Febuary </month> <year> 1990 </year>
Reference-contexts: This report aims to integrate the two areas to form a more complete algorithm for testing object- oriented programs. The original algorithm developed by Harrold et al. uses premises developed by Elaine Weyuker (see [7]) which were later applied to objectoriented programming by DeWayne Perry and Gail Kaiser (see <ref> [5] </ref>). Therefore, both the original work by Weyuker and its application by Perry and Kaiser are described in detail. The remainder of this report is as follows: An outline of the terms and concepts that will be used during this report. <p> C.D.Turner - 13 - 16/04/93 4.2. Adequate Testing and ObjectOriented Programming The previously described adequacy principles have been applied to the objectoriented programming paradigm by D. Perry and G. Kaiser (see <ref> [5] </ref>). Of the 11 principles, they deem that only four have any special significance for objectoriented programming. They are: The antiextensionality principle (summarised): if two programs compute the same function, a test set adequate for one program is not necessarily adequate for the other. <p> This must be done for all substates whose range of values have been extended. C.D.Turner - 24 - 16/04/93 This explicitly deals with any changes to the use of the data-representation. This problem is outlined by Perry and Kaiser in <ref> [5] </ref> when they discuss the antidecomposition criteria. 5.1.2. Technique Two The second of the two methods for integrating state-based testing into the incremental algorithm considers state-based testing as part of the functional testing process. At first glance this may seem to abuse the definition of functional testing.
Reference: [6] <author> Turner, C. D., </author> <title> The Testing of ObjectOriented Programs, </title> <type> Tech. Rep. TR 13/92, </type> <institution> University of Durham, </institution> <address> England, 1992 C.D.Turner - 28 - 16/04/93 </address>
Reference-contexts: 1. Introduction This report combines the work of Chris Turner <ref> [6] </ref>, and that of Mary Jean Harrold et al. [3]. Turner (the author) has developed a new testing technique for objectoriented programs that complements the traditional approaches of both functional and structural testing. Harrold has developed an algorithm for the incremental testing of classes within a class hierarchy. <p> The size of the unit (component) is dependent upon a number of factors. Including the paradigm used for the software's construction and the testing method used for validation. In <ref> [6] </ref> it is argued that the class is the smallest sensible unit of test when using the objectoriented C.D.Turner - 4 - 16/04/93 paradigm. <p> C.D.Turner - 5 - 16/04/93 3. State-based Testing of Object- <p>- Oriented Programs This section outlines the state-based testing technique developed by the author. It will be discussed in sufficient detail to facilitate the later description of alterations to the algorithm in subsequent sections. For more details, see <ref> [6] </ref>. State-based testing as the name suggested, places emphasis on the state of an object. The state is determined by the values stored in each of the variables that constitute its data representation. <p> Techniques such as the specification based technique of Frankl and Doong (see [2] and [1]) can be used for generating TIS. TS, TP and TIP can be produced by various traditional testing techniques that have been adapted to the objectoriented paradigm. For suggestions on the adaptation, see <ref> [6] </ref>. The work by Weyuker is satisfied by the algorithm in the following ways: When a REDEFINED, or VIRTUAL_REDEFINED feature is defined, the algorithm reuses the specification test cases as there is likely to be little change in the specification. <p> TSB (the state-based test cases for the testing of a feature in isolation) are generated by the method described in <ref> [6] </ref>. TISB (the state-based test cases for the testing of the interaction between features) are simply a validation that the states produced by one feature are the states required by another feature to produce the required functionality. <p> These test cases are usually nonexecutable and therefore are generally performed by hand. 5.1.1.1. Variations in the use of the State For each new data-member defined by the class, the specification must be analysed for the substate-values, see <ref> [6] </ref> for more details. This process must also be carefully repeated for inherited data-members. Derived classes may increase the number of specificsubstate-values for a particular substate, therefore requiring the retesting of features from the parent class.
Reference: [7] <author> Weyuker, E. J., </author> <title> How to Decide When to Stop Testing, </title> <booktitle> in Proceedings of the 5th Annual Pacific NorthWest Conference on Software Quality, </booktitle> <year> 1987 </year>
Reference-contexts: Harrold has developed an algorithm for the incremental testing of classes within a class hierarchy. This report aims to integrate the two areas to form a more complete algorithm for testing object- oriented programs. The original algorithm developed by Harrold et al. uses premises developed by Elaine Weyuker (see <ref> [7] </ref>) which were later applied to objectoriented programming by DeWayne Perry and Gail Kaiser (see [5]). Therefore, both the original work by Weyuker and its application by Perry and Kaiser are described in detail. <p> The principles can be divided into two categories: the program-based principles, and the nonprogram-based principles. The program-based principles rely on the program's structure, whereas the nonprogram-based principles rely purely on the programs intended functionality. The first 9 principles are taken from <ref> [7] </ref> and the remaining 2 are taken from [8]. 4.1. Test Adequacy Criteria When testing is performed, a testing criteria is used both to guide the test data selection and to determine when the testing process is to be terminated. <p> The work described below was undertaken to allow some comparison to be drawn between the different testing criteria available. C.D.Turner - 9 - 16/04/93 The principles (taken from <ref> [7] </ref> and [8]) are: principle 1 The applicability property: for every program there must be some way to adequately test it as determined by the adequacy criterion.
Reference: [8] <author> Weyuker, E. J., </author> <title> The Evaluation of Program-Based Software Test Data Adequacy Criteria, </title> <journal> Communications of the ACM, </journal> <volume> vol. 31, no. 6, </volume> <pages> pp. 668 - 675, </pages> <month> June </month> <year> 1988 </year> <month> C.D.Turner - 29 - 16/04/93 </month>
Reference-contexts: The principles can be divided into two categories: the program-based principles, and the nonprogram-based principles. The program-based principles rely on the program's structure, whereas the nonprogram-based principles rely purely on the programs intended functionality. The first 9 principles are taken from [7] and the remaining 2 are taken from <ref> [8] </ref>. 4.1. Test Adequacy Criteria When testing is performed, a testing criteria is used both to guide the test data selection and to determine when the testing process is to be terminated. <p> The work described below was undertaken to allow some comparison to be drawn between the different testing criteria available. C.D.Turner - 9 - 16/04/93 The principles (taken from [7] and <ref> [8] </ref>) are: principle 1 The applicability property: for every program there must be some way to adequately test it as determined by the adequacy criterion.
References-found: 8

