URL: http://theory.lcs.mit.edu/~ponzio/links.ps
Refering-URL: http://theory.lcs.mit.edu/~ponzio/links.html
Root-URL: 
Title: Bounds on the Time to Detect Failures Using Bounded-capacity Message Links  
Author: Stephen Ponzio 
Affiliation: MIT Laboratory for Computer Science  
Abstract: We consider a system of distributed processors that communicate by passing messages and that have inexact information about time. Specifically, a processor knows that a single message is delayed by at most time d and the time between any two of its consecutive steps is at least c 1 and at most c 2 ; it has no other way of estimating elapsed time. This simple model is very close to traditional models used in distributed computing theory, and has been studied by Attiya and Lynch [2, 1] among others. We extend the model by making a realistic assumption about how the delay of messages is affected by the rate at which they are sent. We define a model of message links with bounded capacity, which are guaranteed to deliver messages at only a given rate. If a processor sends messages at a greater rate, they may incur greater delay. We quantify the effect of this bounded capacity on the time necessary to detect processor failures. We consider a system of two processors connected by a bi-directional message link of (integral) capacity . First we give two very simple protocols that guarantee any stopping failure will be detected within time 2Cd + d and C 2 d= + Cd + d respectively, where C = c 2 =c 1 . The main result is an almost-matching lower bound of 2Cd+d= or C 2 d=+Cd+d, whichever is less. If the link is uni-directional, our result specializes to give a matching upper and lower bound of C 2 d= + Cd + d. fl Supported by an NSF Graduate Fellowship
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Attiya, C. Dwork, N. Lynch, and L. Stock-meyer. </author> <title> Bounds on the time to reach agreement in the presence of timing uncertainty. </title> <type> Report TM-435, </type> <institution> Laboratory for Computer Science, MIT, </institution> <month> November </month> <year> 1990. </year> <note> Also in STOC 1991. </note>
Reference-contexts: These bounds hold for each processor and are common knowledge to each. A processor cannot tell directly how much time has elapsed between two particular steps|only that the 1 In <ref> [1] </ref>, where systems of n processors are considered, it is assumed that each pair of processors is connected by a private bidirectional message link. There, it is natural to assume that a timeout protocol executes independently for each pair of processors. <p> Our model gleans this rate by the following reasoning. The maximum total delay d of a single message may account for several levels of processing. It is therefore 2 This is the strategy employed in the algorithms of <ref> [1] </ref> and [6], which assume such unbounded-capacity message links. likely that although one message is sent at time t and delivered at time t + d, another message may be sent before time t + d without affecting the total delay of the second message. <p> If the link is uni-directional, our result specializes to give a matching upper and lower bound of C 2 d= + Cd + d. 2 Model and definitions Our underlying formal model is that proposed by Lynch and Attiya <ref> [2, 1] </ref>, following the timed automata model of [5]. We consider a system of two processors, p and q. Each processor is a deterministic (possibly infinite) state machine. Formally, an execution of the algorithm is a sequence of configurations alternated with events. <p> In all subsequent steps, it remains in the failed state. For further details and precise formalism, we refer the reader to <ref> [1] </ref>. Our formalism for messages links captures their interaction with processors by considering a message m sent by p to q at time t to be "delivered" at time t to the message link connecting p and q. <p> That is, we consider only executions in which every computation event at which a message m is sent is followed by a delivery event del (m; `) with the same real time, where ` is the appropriate message link. If the message link has unbounded capacity (like those in <ref> [1, 6] </ref>), then valid executions must include an event no later than time t + d corresponding to the delivery of m at q. For simplicity, we will assume that message links deliver messages in the order sent. <p> This analysis is not needed for a theorem about the unidirectional case and hence the entire proof specializes to the unidirectional case to give a lower bound of C 2 d= + Cd + d. 5 Conclusion We have attempted to reconcile an important assumption of <ref> [2, 1, 6] </ref> with the reality that processors can, but should not, send messages faster than they can be delivered.
Reference: [2] <author> H. Attiya and N. A. Lynch. </author> <title> Time bounds for real-time process control in the presence of timing uncertainty. </title> <booktitle> Proc. 10th IEEE Real-Time Systems Symposium, </booktitle> <year> 1989, </year> <pages> pp. 268-284. </pages> <note> Also: Technical Memo MIT/LCS/TM-403, </note> <institution> Laboratory for Computer Science, MIT, </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: If the link is uni-directional, our result specializes to give a matching upper and lower bound of C 2 d= + Cd + d. 2 Model and definitions Our underlying formal model is that proposed by Lynch and Attiya <ref> [2, 1] </ref>, following the timed automata model of [5]. We consider a system of two processors, p and q. Each processor is a deterministic (possibly infinite) state machine. Formally, an execution of the algorithm is a sequence of configurations alternated with events. <p> Therefore in this execution q does not detect the failure of p within time B. Thus the protocol cannot be correct; this contradiction proves the lemma. Our lower bound proof uses the retiming techniques of "shifting" events in time and "shrinking" portions of executions that were used in <ref> [2] </ref> and [4]. The basic strategy of the proof is as follows. <p> This analysis is not needed for a theorem about the unidirectional case and hence the entire proof specializes to the unidirectional case to give a lower bound of C 2 d= + Cd + d. 5 Conclusion We have attempted to reconcile an important assumption of <ref> [2, 1, 6] </ref> with the reality that processors can, but should not, send messages faster than they can be delivered.
Reference: [3] <author> M. Fischer, N. Lynch and M. Paterson. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> Journal of the ACM, </journal> <volume> Vol. 32, No. 2 (1985), </volume> <pages> pp. 374-382. </pages>
Reference: [4] <author> J. Lundelius and N. Lynch. </author> <title> An upper and lower bound for clock synchronization. </title> <journal> Information and Control, </journal> <volume> Vol. 62, </volume> <pages> Nos. </pages> <month> 2/3 (August/September </month> <year> 1984), </year> <pages> pp. 190-204. </pages>
Reference-contexts: Thus the protocol cannot be correct; this contradiction proves the lemma. Our lower bound proof uses the retiming techniques of "shifting" events in time and "shrinking" portions of executions that were used in [2] and <ref> [4] </ref>. The basic strategy of the proof is as follows. Beginning with an execution fi given by Lemma 4.1, we know that if p were to fail during the step at which it sends m 1 , then q would declare p faulty by time t 1 + T .
Reference: [5] <author> M. Merritt, F. Modugno and M. Tuttle. </author> <title> Time constrained automata. </title> <booktitle> CONCUR'91 Proceedings Workshop on Theories of Concurrency: Unification and Extension, </booktitle> <year> 1991. </year>
Reference-contexts: If the link is uni-directional, our result specializes to give a matching upper and lower bound of C 2 d= + Cd + d. 2 Model and definitions Our underlying formal model is that proposed by Lynch and Attiya [2, 1], following the timed automata model of <ref> [5] </ref>. We consider a system of two processors, p and q. Each processor is a deterministic (possibly infinite) state machine. Formally, an execution of the algorithm is a sequence of configurations alternated with events. A configuration is a vector of the processors' local states.
Reference: [6] <author> S. Ponzio. </author> <title> Consensus in the presence of timing uncertainty: omission and Byzantine failures. </title> <booktitle> Proc. 10th ACM Symp. on Principles of Distributed Computing, </booktitle> <year> 1991, </year> <pages> pp. </pages> <month> 125-138. </month> <title> Also: The real-time cost of timing uncertainty: consensus and failure detection. </title> <type> MIT SM Thesis, </type> <month> June </month> <year> 1991. </year> <note> Available as MIT Lab. for Computer Science Technical Report MIT/LCS/TR-518, </note> <month> October </month> <year> 1991. </year>
Reference-contexts: Our model gleans this rate by the following reasoning. The maximum total delay d of a single message may account for several levels of processing. It is therefore 2 This is the strategy employed in the algorithms of [1] and <ref> [6] </ref>, which assume such unbounded-capacity message links. likely that although one message is sent at time t and delivered at time t + d, another message may be sent before time t + d without affecting the total delay of the second message. <p> That is, we consider only executions in which every computation event at which a message m is sent is followed by a delivery event del (m; `) with the same real time, where ` is the appropriate message link. If the message link has unbounded capacity (like those in <ref> [1, 6] </ref>), then valid executions must include an event no later than time t + d corresponding to the delivery of m at q. For simplicity, we will assume that message links deliver messages in the order sent. <p> This analysis is not needed for a theorem about the unidirectional case and hence the entire proof specializes to the unidirectional case to give a lower bound of C 2 d= + Cd + d. 5 Conclusion We have attempted to reconcile an important assumption of <ref> [2, 1, 6] </ref> with the reality that processors can, but should not, send messages faster than they can be delivered.
References-found: 6

