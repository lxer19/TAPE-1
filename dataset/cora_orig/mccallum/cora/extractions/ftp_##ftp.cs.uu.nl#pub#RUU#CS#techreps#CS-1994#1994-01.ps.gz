URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1994/1994-01.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Data structures and program transformation. Science of Computer Programming, 14:255-279, 1990. programming as a mathematical
Author: J.H. Fasel, P. Hudak, S. Peyton Jones, and P. Wadler. [] G. Malcolm. [] L. Meertens. Algorithmics|towards J.W. de Bakker, M. Hazewinkel, and J.K. Lenstra, [] Ulrich Moncke and Reinhard Wilhelm. Simon L. Peyton Jones. . [] P. Wadler. 
Date: 2:461-493, 1992.  
Address: 1992.  
Affiliation: Group, Oxford University,  
Note: 6 Conclusions References [1] R.S. Bird. An introduction to the theory of lists. In M. Broy, editor, Logic of Programming and Calculi of Discrete Design, volume F36 of NATO ASI Series, pages 5-42. Springer-Verlag, 1987. [2] B.A. Davey and H.A. Priestley. Introduction to Lattices and Order. Cambridge University Press, 1990. [3]  Sigplan Notices Special Issue on the Functional Programming Language Haskell. ACM SIGPLAN notices, 27(5), 1992. [4] J. Jeuring. Theories for Algorithm Calculation. PhD thesis, Utrecht University, 1993. [5] M.P. Jones. Introduction to Gofer 2.20. Programming Research  editors, Proceedings of the CWI Symposium on Mathematics and Computer Science, volume 1 of CWI Monographs, pages 289-334. North-Holland, 1986.  pages 151-186. Springer-Verlag, New York, 1991. LNCS 545. [10]  
Pubnum: Computer Science,  
Abstract: Function lfp applies a function f to an argument x until it reaches a fixed point. In order to determine whether an argument is a fixed point, f x is compared with x. In the case of grammar analysis problems, the first components of the elements of the grammar analysis problems are always the nonterminals of the given grammar. It follows that the first components of the elements of f x and x are always equal, and that equality depends just on the second components of the problems. The first condition of function lfp may be replaced by map snd x = map snd (f x). This paper discusses bottom-up grammar analysis problems. We give a very general specification of bottom-up grammar analysis problems, and from this specification we derive, by means of program transformation applying laws to the components of the intermediate expressions, an algorithm for performing bottom-up grammar analysis. The driving force in the derivation of the algorithm is the construction of a fixed point. To obtain such a fixed point a number of conditions have to be imposed upon the components of the bottom-up grammar analysis problem. Thus we derive both the algorithm and the conditions under which the fixed point exists in one go. The derivation is an example of a derivation of a real-world program, which would have been difficult to obtain without a derivation. The research reported on in this paper is still in progress: in the next version we want to split the calculation in two parts. The first part of the derivation assumes that the function that computes the property of a parse tree is a Rosetree catamorphism and the second part of the derivation adds, if necessary, the extra information (for example in the case of firsts, where we use information about the empties). This simplifies the derivation. Future research will be directed towards the derivation of an algorithm for top-down grammar analysis. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.S. Bird. </author> <title> An introduction to the theory of lists. </title> <editor> In M. Broy, editor, </editor> <booktitle> Logic of Programming and Calculi of Discrete Design, volume F36 of NATO ASI Series, </booktitle> <pages> pages 5-42. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference: [2] <author> B.A. Davey and H.A. Priestley. </author> <title> Introduction to Lattices and Order. </title> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference: [3] <author> J.H. Fasel, P. Hudak, S. Peyton Jones, and P. </author> <title> Wadler. </title> <journal> Sigplan Notices Special Issue on the Functional Programming Language Haskell. ACM SIGPLAN notices, </journal> <volume> 27(5), </volume> <year> 1992. </year>
Reference: [4] <author> J. Jeuring. </author> <title> Theories for Algorithm Calculation. </title> <type> PhD thesis, </type> <institution> Utrecht University, </institution> <year> 1993. </year>
Reference: [5] <author> M.P. Jones. </author> <title> Introduction to Gofer 2.20. Programming Research Group, </title> <publisher> Oxford University, </publisher> <year> 1992. </year>
Reference: [6] <author> G. Malcolm. </author> <title> Data structures and program transformation. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 14 </volume> <pages> 255-279, </pages> <year> 1990. </year>
Reference: [7] <author> L. Meertens. </author> <title> Algorithmics|towards programming as a mathematical activity. </title> <editor> In J.W. de Bakker, M. Hazewinkel, and J.K. Lenstra, editors, </editor> <booktitle> Proceedings of the CWI Symposium on Mathematics and Computer Science, volume 1 of CWI Monographs, </booktitle> <pages> pages 289-334. </pages> <publisher> North-Holland, </publisher> <year> 1986. </year>
Reference: [8] <author> Torben Mogensen. </author> <title> Ratatosk a parser generator and scanner generator for Gofer. </title> <note> Published on comp.lang.functional, </note> <year> 1993. </year>
Reference: [9] <author> Ulrich Moncke and Reinhard Wilhelm. </author> <title> Grammar flow analysis. In Attribute Grammars, </title> <journal> Applications and Systems, </journal> <volume> SAGA '91, </volume> <pages> pages 151-186. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991. </year> <note> LNCS 545. </note>
Reference: [10] <author> Simon L. Peyton Jones. </author> <title> Yacc in Sasl an exercise in functional programming. </title> <journal> Software-Practice and Experience, </journal> <volume> 15(8) </volume> <pages> 807-820, </pages> <year> 1985. </year>


References-found: 10

