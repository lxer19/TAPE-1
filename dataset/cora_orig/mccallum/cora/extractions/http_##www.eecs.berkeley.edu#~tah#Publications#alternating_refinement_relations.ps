URL: http://www.eecs.berkeley.edu/~tah/Publications/alternating_refinement_relations.ps
Refering-URL: http://www.eecs.berkeley.edu/~tah/Publications/alternating_refinement_relations.html
Root-URL: 
Email: Email: alur@cis.upenn.edu  Email: ftah,ornag@eecs.berkeley.edu  Email: vardi@cs.rice.edu  
Phone: 2  3  
Title: Alternating Refinement Relations  
Author: Rajeev Alur Thomas A. Henzinger Orna Kupferman Moshe Y. Vardi 
Note: To appear in the Proceedings of the Tenth International Conference on Concurrency Theory (CONCUR), Lecture Notes in Computer Science, Springer-Verlag, 1998. This work is supported in part by the ONR YIP award N00014-95-1-0520, by the NSF CAREER award CCR-9501708, by the NSF grants CCR-9504469, CCR-9628400, and CCR-9700061, by the DARPA/NASA grant NAG2-1214, by the ARO MURI grant DAAH-04-96-1-0341, by the SRC contract 97-DC-324.041, and by a grant from the Intel Corporation.  
Web: URL: www.cis.upenn.edu/~alur  URL: www.eecs.berkeley.edu/~ftah,ornag  URL: http://www.cs.rice.edu/~vardi  
Address: Philadelphia, PA 19104, USA  Berkeley, CA 94720-1770, USA  Houston, TX 77005-1892, USA  
Affiliation: 1 Department of Computer and Information Science, University of Pennsylvania,  Department of Electrical Engineering and Computer Sciences, University of California,  Department of Computer Science, Rice University,  
Abstract: Alternating transition systems are a general model for composite systems which allows the study of collaborative as well as adversarial relationships between individual system components. Unlike in labeled transition systems, where each transition corresponds to a possible step of the system (which may involve some or all components), in alternating transition systems, each transition corresponds to a possible move in a game between the components. In this paper, we study refinement relations between alternating transition systems, such as "Does the implementation refine the set A of specification components without constraining the components not in A?" In particular, we generalize the definitions of the simulation and trace containment preorders from labeled transition systems to alternating transition systems. The generalizations are called alternating simulation and alternating trace containment. Unlike existing refinement relations, they allow the refinement of individual components within the context of a composite system description. We show that, like ordinary simulation, alternating simulation can be checked in polynomial time using a fixpoint computation algorithm. While ordinary trace containment is PSPACE-complete, we prove alternating trace containment to be EXPTIME-complete. Finally, we present logical characterizations for the two preorders in terms of ATL, a temporal logic capable of referring to games between system components. 
Abstract-found: 1
Intro-found: 1
Reference: [AHK97] <author> R. Alur, T.A. Henzinger, and O. Kupferman. </author> <title> Alternating-time temporal logic. </title> <booktitle> In Proc. 38th Symp. on Foundations of Computer Science, </booktitle> <pages> pp. 100-109. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1997. </year> <note> Full version in Compositionality-The Significant Difference. Springer-Verlag Lecture Notes in Computer Science, </note> <year> 1998. </year>
Reference-contexts: We model multi-agents systems by alternating transition systems (ATS), proposed in <ref> [AHK97] </ref>. In each move of the game between the agents of an ATS, the choice of an agent at a state is a set of states, and the successor state is determined by considering the intersection of the choices made by all agents. <p> First, when restricted to ATS with a single agent|i.e., to labeled transition systems|the two notions coincide. Second, we show that for finite ATS, deciding A-simulation, for a given set A of agents, is solvable in polynomial time. Third, we present a logical characterization of alternating simulation. In <ref> [AHK97] </ref>, we proposed alternating temporal logic as a language for specifying properties of system components. In particular, ATL and ATL ? are the alternating versions of the branching temporal logics CTL and CTL ? . <p> In alternating transition systems (ATS, for short), introduced in <ref> [AHK97] </ref>, each transition corresponds to a possible move in the game between the underlying components of the system. We refer to the components as agents. In each move of the game, every agent chooses a set of successor states. <p> The size of T is exponential in . Then, the model-checking problem S j= hhenv ii can be reduced to the alternating trace-containment problem T env S. Since the model-checking problem for A-LTL is 2EXPTIME-complete <ref> [AHK97] </ref>, the EXPTIME lower bound follows. ut 5 Logical Characterizations Simulation and trace containment between labeled transition systems can be logically characterized by temporal logics. We give logical characterizations of alternating simulation and alternating trace containment. Alternating temporal logic Alternating-time temporal logics are introduced in [AHK97] as a formalism for specifying <p> problem for A-LTL is 2EXPTIME-complete <ref> [AHK97] </ref>, the EXPTIME lower bound follows. ut 5 Logical Characterizations Simulation and trace containment between labeled transition systems can be logically characterized by temporal logics. We give logical characterizations of alternating simulation and alternating trace containment. Alternating temporal logic Alternating-time temporal logics are introduced in [AHK97] as a formalism for specifying properties of individual system components. The alternating-time temporal logic ATL ? is defined with respect to a finite set of propositions and a finite set of agents.
Reference: [BGS92] <author> J. Balcazar, J. Gabarro, and M. Santha. </author> <title> Deciding bisimilarity is P-complete. </title> <journal> Formal Aspects of Computing, </journal> <volume> 4 </volume> <pages> 638-648, </pages> <year> 1992. </year>
Reference-contexts: Since the number of checks for each H i is bounded by jQ fi Q 0 j, the overall effort is polynomial in S and S 0 . Hardness in PTIME follows from the PTIME-hardness of ordinary simulation on labeled transition systems <ref> [BGS92, KV98] </ref>. ut Recall that alternating simulation can be used on labeled transition systems to specify both directions of simulation.
Reference: [HF89] <author> J.Y. Halpern and R. Fagin. </author> <title> Modeling knowledge and action in distributed systems. </title> <journal> Distributed Computing, </journal> <volume> 3 </volume> <pages> 159-179, </pages> <year> 1989. </year>
Reference-contexts: The resulting alternating refinement preorders allow us to check refinement with respect to any subset of the system components. Composite systems can be viewed as multi-agent systems <ref> [Sha53, HF89] </ref>. While in labeled transition systems, each transition corresponds to a possible step of the system (which may involve some or all components), in multi-agent systems each transition corresponds to a possible move in a game between the components (which are called agents).
Reference: [HHK95] <author> M.R. Henzinger, T.A. Henzinger, and P.W. Kopke. </author> <title> Computing simulations on finite and infinite graphs. </title> <booktitle> In Proc. 36rd Symp. on Foundations of Computer Science, </booktitle> <pages> pp. 453-462. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1995. </year>
Reference-contexts: The local definition of ordinary simulation for labeled transition systems makes its decidability easy. Specifically, given two labeled transition systems S and S 0 , it is possible to determine whether S S 0 in time that is quadratic in the sizes of S and S 0 <ref> [HHK95] </ref>, and a witnessing relation for simulation can be computed using a symbolic fixpoint procedure [Mil90]. We show that alternating simulation can also be computed in polynomial time, as well as symbolically. Theorem 3. The alternating-simulation problem is PTIME-complete. Proof.
Reference: [Imm81] <author> N. Immerman. </author> <title> Number of quantifiers is better than number of tape cells. </title> <journal> J. Computer and System Sciences, </journal> <volume> 22 </volume> <pages> 384-406, </pages> <year> 1981. </year>
Reference: [KV98] <author> O. Kupferman and M.Y. Vardi. </author> <title> Verification of fair transition systems. </title> <institution> Chicago J. Theoretical Computer Science, 1998(2). </institution>
Reference-contexts: Since the number of checks for each H i is bounded by jQ fi Q 0 j, the overall effort is polynomial in S and S 0 . Hardness in PTIME follows from the PTIME-hardness of ordinary simulation on labeled transition systems <ref> [BGS92, KV98] </ref>. ut Recall that alternating simulation can be used on labeled transition systems to specify both directions of simulation. <p> Since the complexity of the simulation problem S sys S 0 for labeled transition systems S and S 0 is hard for PTIME already for a fixed specification S 0 <ref> [KV98] </ref>, it follows that the alternating-simulation problem is PTIME-complete even when either S or S 0 is fixed. 4 Alternating Trace Containment We now study the refinement relation on ATS that corresponds to trace containment on labeled transition systems.
Reference: [Mil71] <author> R. Milner. </author> <title> An algebraic definition of simulation between programs. </title> <booktitle> In Proc. 2nd Int. Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 481-489. </pages> <publisher> British Computer Society, </publisher> <year> 1971. </year> <month> 17 </month>
Reference-contexts: The former leads to refinement as trace containment, or one of its relatives; the latter leads to refinement as simulation <ref> [Mil71] </ref>, or one of its relatives. Consider now a composite implementation A I jjB and specification A S jjB. Suppose we want to check that the A-component A I of the implementation refines the A-component A S of the specification. <p> Recall that a labeled transition system corresponds to an ATS with the single agent sys. Our definition of alternating simulation then coincides with Mil-ner's definition of simulation between labeled transition systems <ref> [Mil71] </ref>.
Reference: [Mil90] <author> R. Milner. </author> <title> Operational and algebraic semantics of concurrent processes. </title> <booktitle> In Handbook of Theoretical Computer Science, </booktitle> <volume> Vol. B, </volume> <pages> pp. 1201-1242. </pages> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: Specifically, given two labeled transition systems S and S 0 , it is possible to determine whether S S 0 in time that is quadratic in the sizes of S and S 0 [HHK95], and a witnessing relation for simulation can be computed using a symbolic fixpoint procedure <ref> [Mil90] </ref>. We show that alternating simulation can also be computed in polynomial time, as well as symbolically. Theorem 3. The alternating-simulation problem is PTIME-complete. Proof. <p> Following <ref> [Mil90] </ref>, we characterize alternating simulation as a greatest fixpoint. Let H 0 = fhq; q 0 i : q 2 Q; q 0 2 Q 0 ; and (q) = (q 0 )g: Thus, H 0 is the maximal relation whose pairs satisfy condition (1) of A-simulation. <p> Thus, there exists a finite number i such that every strategy of the protagonist fails to match the antagonist's choice in the i-th round of the game or before, when the antagonist follows the winning strategy. Similar to the case of Milner's simulation <ref> [Mil90] </ref>, it is then possible to construct a formula with i nested hhAii f operators that is satisfied in S but not in S 0 . ut Logical characterization of alternating trace containment Trace containment in labeled transition systems guarantees correct implementation with respect to properties specified in linear-time logics.
Reference: [MS87] <author> D.E. Muller and P.E. Schupp. </author> <title> Alternating automata on infinite trees. </title> <journal> Theoretical Computer Science, </journal> <volume> 54 </volume> <pages> 267-276, </pages> <year> 1987. </year>
Reference-contexts: Conversely, every limit-closed !-language over the alphabet can be represented as a language tree. It follows that we can encode the trace set trace S (F A ) that is consistent with a set F A of strategies as a language tree. An alternating Buchi tree automaton <ref> [MS87] </ref> A = h; d; S; s in ; M; ffi runs on -labeled -trees with j j = d, say, = f1; : : : ; dg.
Reference: [MS95] <author> D.E. Muller and P.E. Schupp. </author> <title> Simulating alternating tree automata by nondeterministic automata: new results and new proofs of theorems of Rabin, McNaughton, and Safra. </title> <journal> Theoretical Computer Science, </journal> <volume> 141 </volume> <pages> 69-107, </pages> <year> 1995. </year>
Reference-contexts: Since the size of the automata A A S and A A linear in S and S 0 , respectively, and the language containment problem for alternating Buchi tree automata can be solved in exponential time <ref> [VW86, MS95] </ref>, the EXPTIME upper bound follows. For the lower bound, we use a reduction from fsysg-LTL model checking (for the formal definition of fsysg-LTL see Section 5).
Reference: [Sha53] <author> L.S. Shapley. </author> <title> Stochastic games. </title> <booktitle> In Proc. National Academy of Science, </booktitle> <volume> 39 </volume> <pages> 1095-1100, </pages> <year> 1953. </year>
Reference-contexts: The resulting alternating refinement preorders allow us to check refinement with respect to any subset of the system components. Composite systems can be viewed as multi-agent systems <ref> [Sha53, HF89] </ref>. While in labeled transition systems, each transition corresponds to a possible step of the system (which may involve some or all components), in multi-agent systems each transition corresponds to a possible move in a game between the components (which are called agents).
Reference: [VW86] <author> M.Y. Vardi and P. Wolper. </author> <title> Automata-theoretic techniques for modal logics of programs. </title> <journal> J. Computer and System Sciences, </journal> <volume> 32 </volume> <pages> 182-221, </pages> <year> 1986. </year>
Reference-contexts: Since the size of the automata A A S and A A linear in S and S 0 , respectively, and the language containment problem for alternating Buchi tree automata can be solved in exponential time <ref> [VW86, MS95] </ref>, the EXPTIME upper bound follows. For the lower bound, we use a reduction from fsysg-LTL model checking (for the formal definition of fsysg-LTL see Section 5).
Reference: [VW94] <author> M.Y. Vardi and P. Wolper. </author> <title> Reasoning about infinite computations. </title> <journal> Information and Computation, </journal> <volume> 115 </volume> <pages> 1-37, </pages> <year> 1994. </year> <month> 18 </month>
Reference-contexts: Given an LTL formula , one can construct, following <ref> [VW94] </ref>, a two-agent ATS T , as above, such that T has exactly the traces that satisfy (for this purpose, the ATS T is augmented with Buchi fairness constraints; the proof generalizes to ATS without fairness as in the nonalternating case). The size of T is exponential in .
References-found: 13

