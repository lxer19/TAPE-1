URL: ftp://ftp.sics.se/pub/SICS-reports/Reports/SICS-R--95-01--SE.ps.Z
Refering-URL: http://www.sics.se/libindex.html
Root-URL: 
Email: fred@sics.se  fjfg korverg@phil.ruu.nl  
Phone: 8, 3584  
Title: Formal Verification of a Leader Election Protocol in Process Algebra  
Author: Lars-ake Fredlund Jan Friso Groote Henri Korver 
Keyword: Formal Methods, Process algebra, Protocol verification.  
Address: Box 1263, S-164 28 Kista, Sweden  Heidelberglaan  Netherlands  
Affiliation: SICS,  Department of Philosophy, Utrecht University  CS Utrecht, The  
Abstract: In 1982 Dolev, Klawe & Rodeh presented an O(n log n) unidirectional distributed algorithm for the circular extrema-finding (or leader-election) problem. At the same time Peterson came up with a nearly identical solution. In this paper, we bring the correctness of this algorithm to a completely formal level. This relatively small protocol, which can be described on half a page, requires a rather involved proof for guaranteeing that it behaves well in all possible circumstances. To our knowledge, this is one of the more advanced case-studies in formal verification based on process algebra.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 18. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: We also give the Concrete Invariant Corollary for referencing purposes. All the process algebra axioms used to prove the leader election protocol can be found in Table 1-6. We do not explain the axioms (see <ref> [1, 4, 14] </ref>) but only include them to give an exact and complete overview of the axioms that we used. Actually, the renaming axioms are superfluous, but have been included for completeness.
Reference: [2] <author> M.A. Bezem, R. Bol and J.F. Groote. </author> <title> A formal verification of the alternating bit protocol in the calculus of constructions (revised version). </title> <note> Original version appeared as M.A. </note> <editor> Bezem and J.F. Groote. </editor> <title> A formal verification of the alternating bit protocol in the calculus of constructions. </title> <type> Technical Report 88, </type> <institution> Logic Group Preprint Series, Utrecht University, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: The proof is now ready to be proof checked conform <ref> [2, 12, 16, 20] </ref>. It is shown that process algebra, in particular CRL, is suited to prove correctness of highly non trivial protocols. A drawback of the current verification is that it is rather complex and lengthy.
Reference: [3] <author> M.A. Bezem and J.F. Groote. </author> <title> A correctness proof of a one bit sliding window protocol in CRL. </title> <journal> The Computer Journal, </journal> <volume> 37(4): </volume> <pages> 289-307, </pages> <year> 1994. </year>
Reference-contexts: It is primarily intended to verify statements of the form Condition ! Specification = Implementation: This system has been applied to verify a number of data transfer and distributed scheduling protocols of considerable complexity <ref> [3, 11, 12, 15] </ref>. It incorporates several old and new techniques [4, 3]. Due to the logical nature of the proof system proofs can be verified by computer. Some sizable examples of proofs verified using the proof checker Coq [9] are reported in [14, 16]. <p> It is primarily intended to verify statements of the form Condition ! Specification = Implementation: This system has been applied to verify a number of data transfer and distributed scheduling protocols of considerable complexity [3, 11, 12, 15]. It incorporates several old and new techniques <ref> [4, 3] </ref>. Due to the logical nature of the proof system proofs can be verified by computer. Some sizable examples of proofs verified using the proof checker Coq [9] are reported in [14, 16]. <p> Then, in Section 3.3, we define a (focus) condition on the tabular data structure such that if the condition holds then no internal computation is any longer possible in the protocol, i.e., no t -steps can be made <ref> [3] </ref>. The focus condition is used in Lemma 3.10, in Section 3.6, to separate the proof that the linear specification can be proven equivalent to a simple process into two parts. Lemma 3.10 together with Lemma 3.3 then immediately proves the correctness theorem of the protocol, i.e., Theorem 2.1.
Reference: [4] <author> M.A. Bezem and J.F. Groote. </author> <title> Invariants in process algebra with data. </title> <booktitle> In Proceedings of the CONCUR '94 Conference on Concurrency Theory, volume 836 of Lecture Notes in Computer Science, </booktitle> <pages> pages 401-416. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: It is primarily intended to verify statements of the form Condition ! Specification = Implementation: This system has been applied to verify a number of data transfer and distributed scheduling protocols of considerable complexity [3, 11, 12, 15]. It incorporates several old and new techniques <ref> [4, 3] </ref>. Due to the logical nature of the proof system proofs can be verified by computer. Some sizable examples of proofs verified using the proof checker Coq [9] are reported in [14, 16]. <p> Lemma 3.10 together with Lemma 3.3 then immediately proves the correctness theorem of the protocol, i.e., Theorem 2.1. The proof of Lemma 3.10 makes use of the Concrete Invariant Corollary (see Appendix A and <ref> [4] </ref>), i.e., a number of invariance properties are defined (in Section 3.4) on the tabular data structure such that regardless which execution step the linear specification performs, the properties remain true after the step if they were true before the execution of the step. <p> As X is convergent (proven in Lemma 3.7) it follows with the Concrete Invariant Corollary <ref> [4] </ref> that Spec (T; n) and X (T; n) are equal. The invariant `test (j; T ) = j &lt; n' is used and easy to show true. 4. By induction on m, using associativity and commutativity of the merge. 5. Directly from the previous case, i.e. Lemma 3.3.4. 6. <p> As (I) is convergent, the lemma follows from the Concrete Invariant Corollary (see <ref> [4] </ref>). First suppose F C (T; n) holds. <p> We also give the Concrete Invariant Corollary for referencing purposes. All the process algebra axioms used to prove the leader election protocol can be found in Table 1-6. We do not explain the axioms (see <ref> [1, 4, 14] </ref>) but only include them to give an exact and complete overview of the axioms that we used. Actually, the renaming axioms are superfluous, but have been included for completeness. <p> We do not explain the axioms (see [1, 4, 14]) but only include them to give an exact and complete overview of the axioms that we used. Actually, the renaming axioms are superfluous, but have been included for completeness. Besides the axioms we have used the Concrete Invariant Corollary <ref> [4] </ref> that says that if two processes p and q can be shown a solution of a well founded recursive specification using an invariant, then p and q are equal, for all starting states where the invariant holds.
Reference: [5] <editor> M.A. Bezem, J.F. Groote and M.P.A. Sellink. </editor> <title> Confluency for Process Verification. </title> <note> To appear 1995. </note>
Reference-contexts: A possible lead towards improvement is given by Frits Vaandrager in [21], where by using the notion of confluency (see e.g. [18]) one only needs to consider one trace to establish correctness. Currently we are formalising this notion in <ref> [5] </ref>. We expect that using this idea our proof can be simplified significantly. 16 A AN OVERVIEW OF THE PROOF THEORY FOR CRL A An overview of the proof theory for CRL We provide here a very short account of the axioms that have been used.
Reference: [6] <author> J.J. Brunekreef. </author> <title> Process Specification in a UNITY Format. </title> <editor> In A. Ponse, C. Verhoef, and S.F.M. van Vlijmen, editors, </editor> <booktitle> Proceedings of the workshop on Algebra of Communicating Processes ACP94, Workshops in Computing, </booktitle> <pages> pages 319-337. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: This is proven in Section 3.5. 3.1 Linearisation As a first the step leader election protocol is described as a CRL process in a state based style, as this is far more convenient for proving purposes. The state based style very much resembles the Unity format <ref> [6, 8] </ref> or the I/O automata format [17]. Following [6] we call this format the Unity format or a process specification in Unity style. Inspection of the processes Active and Relay indicates that there are 7 different major states between the actions. <p> The state based style very much resembles the Unity format [6, 8] or the I/O automata format [17]. Following <ref> [6] </ref> we call this format the Unity format or a process specification in Unity style. Inspection of the processes Active and Relay indicates that there are 7 different major states between the actions. The states in Active are numbered 0,1,2,3,6 and those in Relay get numbers 4 and 5.
Reference: [7] <author> J.J. Brunekreef, J.-P. Katoen, R.L.C. Koymans and S. Mauw, </author> <title> Algebraic specification of dynamic leader election protocols in broadcast networks. </title> <editor> In A. Ponse, C. Verhoef, and S.F.M. van Vlijmen, editors, </editor> <booktitle> Proceedings of the workshop on Algebra of Communicating Processes ACP94, Workshops in Computing, </booktitle> <pages> pages 338-358. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: At the same time, Peterson published a nearly identical version of this protocol, see [19]. This protocol is efficient, O (n log n), and highly parallel. As far as we know this is the first leader election protocol verified in a process algebraic style. In <ref> [7] </ref> a number of leader election protocols for carrier sense networks have been specified and some (informal) proof sketches are given in modal logic. In Section 2 we specify Dolev, Klawe and Rodeh's leader election protocol formally in CRL.
Reference: [8] <author> K.M. Chandy and J. Misra. </author> <title> Parallel Program Design. A Foundation. </title> <publisher> Addison Wesley, </publisher> <year> 1988. </year>
Reference-contexts: This is proven in Section 3.5. 3.1 Linearisation As a first the step leader election protocol is described as a CRL process in a state based style, as this is far more convenient for proving purposes. The state based style very much resembles the Unity format <ref> [6, 8] </ref> or the I/O automata format [17]. Following [6] we call this format the Unity format or a process specification in Unity style. Inspection of the processes Active and Relay indicates that there are 7 different major states between the actions.
Reference: [9] <author> T. Coquand and G. Huet. </author> <title> The calculus of constructions. </title> <journal> Information and Control, </journal> <volume> (76), </volume> <year> 1988. </year>
Reference-contexts: It incorporates several old and new techniques [4, 3]. Due to the logical nature of the proof system proofs can be verified by computer. Some sizable examples of proofs verified using the proof checker Coq <ref> [9] </ref> are reported in [14, 16]. If one develops a new technique then it is important that it is validated that the technique meets its purpose. For CRL this means that it is applied to a wide range of distributed systems.
Reference: [10] <author> D. Dolev, M. Klawe, and M. Rodeh. </author> <title> An O(n log n) unidirectional distributed algorithm for extrema finding in a circle. </title> <journal> Journal of Algorithms, </journal> (3):245-260, 1982. 
Reference-contexts: For CRL this means that it is applied to a wide range of distributed systems. In this paper we show its applicability on Dolev, Klawe and Rodeh's leader election or extrema finding protocol <ref> [10] </ref> that has been designed for a network with a unidirectional ring topology. At the same time, Peterson published a nearly identical version of this protocol, see [19]. This protocol is efficient, O (n log n), and highly parallel. <p> The task of an algorithm for solving the leader election problem is then to make sure that eventually exactly one process will announce itself to be the leader. In Dolev, Klawe and Rodeh's algorithm <ref> [10] </ref> each process in the ring carries out the following task: Active: d:= ident do forever send (d) receive (e) if d=e then begin announce leader stop end send (e) receive (f) if e &gt; max (d ; f ) then d:=e else goto Relay end Relay : do forever receive <p> The protocol described earlier is faster. It is bounded by 2n log n + 2n actions because in every round at least one process becomes inactive. 1 For an explanation of these complexity bounds one is referred to <ref> [10] </ref>. <p> The measure M eas is certainly not optimal. It suggest that the algorithm requires about 6n 4 (n + 2) actions to select a leader. This is a very rough measure; looking at the far sharper bound in <ref> [10] </ref> suggests that the bound can actually be improved to 4n log 2 n + 2n actions. 3.6 Final calculations We now prove the following crucial lemma that links the leader action to X.
Reference: [11] <author> J.F. Groote and H. Korver. </author> <title> A correctness proof of the bakery protocol in CRL. </title> <editor> In A. Ponse, C. Verhoef, and S.F.M. van Vlijmen, editors, </editor> <booktitle> Proceedings of the workshop on Algebra of Communicating Processes ACP94, Workshops in Computing, </booktitle> <pages> pages 63-105. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: It is primarily intended to verify statements of the form Condition ! Specification = Implementation: This system has been applied to verify a number of data transfer and distributed scheduling protocols of considerable complexity <ref> [3, 11, 12, 15] </ref>. It incorporates several old and new techniques [4, 3]. Due to the logical nature of the proof system proofs can be verified by computer. Some sizable examples of proofs verified using the proof checker Coq [9] are reported in [14, 16].
Reference: [12] <author> J.F. Groote and J. van de Pol. </author> <title> A bounded retransmission protocol for large data packets. A case study in computer checked algebraic verification. </title> <type> Technical Report 100, </type> <institution> Department of Philosophy, Utrecht University, </institution> <year> 1993. </year>
Reference-contexts: It is primarily intended to verify statements of the form Condition ! Specification = Implementation: This system has been applied to verify a number of data transfer and distributed scheduling protocols of considerable complexity <ref> [3, 11, 12, 15] </ref>. It incorporates several old and new techniques [4, 3]. Due to the logical nature of the proof system proofs can be verified by computer. Some sizable examples of proofs verified using the proof checker Coq [9] are reported in [14, 16]. <p> The proof is now ready to be proof checked conform <ref> [2, 12, 16, 20] </ref>. It is shown that process algebra, in particular CRL, is suited to prove correctness of highly non trivial protocols. A drawback of the current verification is that it is rather complex and lengthy.
Reference: [13] <author> J.F. Groote and A. Ponse. </author> <title> The syntax and semantics of CRL. </title> <editor> In A. Ponse, C. Verhoef, and S.F.M. van Vlijmen, editors, </editor> <booktitle> Proceedings of the workshop on Algebra of Communicating Processes ACP94, Workshops in Computing, </booktitle> <pages> pages 26-62. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <type> Technical Report CS-R9076, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: We are convinced that more precise proof techniques need to be used, which should allow for computer based proof checking. Concretely this means that a logic based approach should be taken. The language CRL (micro Common Representation Language) <ref> [13] </ref> has been defined as a combination of process algebra and (equational) data types to describe and verify distributed systems.
Reference: [14] <author> J.F. Groote and A. Ponse. </author> <title> Proof theory for CRL: a language for processes with data. In D.J. Andrews, </title> <editor> J.F. Groote, and C.A. Middelburg, editors. </editor> <booktitle> Proceedings of the International Workshop on Semantics of Specification Languages. Workshops in Computing, </booktitle> <pages> pages 231-250, </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Computer Science in the Netherlands (SION) with financial support from the Netherlands Organization for Scientific Research (NWO). 1 2 2 SPECIFICATION AND CORRECTNESS OF THE LEADER ELECTION PROTOCOL accordance with the philosophy outlined in the first paragraph this is a very precisely defined language provided with a logical proof system <ref> [14] </ref>. It is primarily intended to verify statements of the form Condition ! Specification = Implementation: This system has been applied to verify a number of data transfer and distributed scheduling protocols of considerable complexity [3, 11, 12, 15]. It incorporates several old and new techniques [4, 3]. <p> It incorporates several old and new techniques [4, 3]. Due to the logical nature of the proof system proofs can be verified by computer. Some sizable examples of proofs verified using the proof checker Coq [9] are reported in <ref> [14, 16] </ref>. If one develops a new technique then it is important that it is validated that the technique meets its purpose. For CRL this means that it is applied to a wide range of distributed systems. <p> We also give the Concrete Invariant Corollary for referencing purposes. All the process algebra axioms used to prove the leader election protocol can be found in Table 1-6. We do not explain the axioms (see <ref> [1, 4, 14] </ref>) but only include them to give an exact and complete overview of the axioms that we used. Actually, the renaming axioms are superfluous, but have been included for completeness.
Reference: [15] <author> H. Korver. </author> <title> Protocol Verification in CRL. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <year> 1994. </year> <note> 24 REFERENCES </note>
Reference-contexts: It is primarily intended to verify statements of the form Condition ! Specification = Implementation: This system has been applied to verify a number of data transfer and distributed scheduling protocols of considerable complexity <ref> [3, 11, 12, 15] </ref>. It incorporates several old and new techniques [4, 3]. Due to the logical nature of the proof system proofs can be verified by computer. Some sizable examples of proofs verified using the proof checker Coq [9] are reported in [14, 16].
Reference: [16] <author> H. Korver and J. Springintveld. </author> <title> A computer-checked verification of Milner's scheduler. </title> <booktitle> In Proceedings of the 2 nd International Symposium on Theoretical Aspects of Computer Software, Sendai, Japan, volume 789 of Lecture Notes in Computer Science, </booktitle> <pages> pages 161-178. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: It incorporates several old and new techniques [4, 3]. Due to the logical nature of the proof system proofs can be verified by computer. Some sizable examples of proofs verified using the proof checker Coq [9] are reported in <ref> [14, 16] </ref>. If one develops a new technique then it is important that it is validated that the technique meets its purpose. For CRL this means that it is applied to a wide range of distributed systems. <p> Spec 0 (m; n) = Act (init (m); n) k Q (init (m); n), 5. Spec (n) = Spec (init (n); n), 6. Spec (n) = X (init (n); n). Proof. 1. A standard expansion using induction on T (cf. <ref> [16] </ref>). 2. Again a straightforward expansion. 3.2 Notation 7 3. Spec (T; n) = t fcg @ fr;sg ( Act (T; n) k Q (T; n)) = t fcg @ fr;sg (X Act (T; n) k X Q (T; n)). <p> The proof is now ready to be proof checked conform <ref> [2, 12, 16, 20] </ref>. It is shown that process algebra, in particular CRL, is suited to prove correctness of highly non trivial protocols. A drawback of the current verification is that it is rather complex and lengthy.
Reference: [17] <author> N.A. Lynch and M.R. Tuttle. </author> <title> An introduction to input/output automata. </title> <journal> CWI Quarterly, </journal> <volume> 2(3) </volume> <pages> 219-246, </pages> <year> 1989. </year>
Reference-contexts: The state based style very much resembles the Unity format [6, 8] or the I/O automata format <ref> [17] </ref>. Following [6] we call this format the Unity format or a process specification in Unity style. Inspection of the processes Active and Relay indicates that there are 7 different major states between the actions.
Reference: [18] <author> R. Milner. </author> <title> A Calculus of Communicating Systems, </title> <booktitle> volume 92 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: A drawback of the current verification is that it is rather complex and lengthy. A possible lead towards improvement is given by Frits Vaandrager in [21], where by using the notion of confluency (see e.g. <ref> [18] </ref>) one only needs to consider one trace to establish correctness. Currently we are formalising this notion in [5].
Reference: [19] <author> G.L. Peterson. </author> <title> An O(n log n) unidirectional algorithm for the circular extrema problem. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(4) </volume> <pages> 758-762, </pages> <month> October </month> <year> 1982. </year>
Reference-contexts: In this paper we show its applicability on Dolev, Klawe and Rodeh's leader election or extrema finding protocol [10] that has been designed for a network with a unidirectional ring topology. At the same time, Peterson published a nearly identical version of this protocol, see <ref> [19] </ref>. This protocol is efficient, O (n log n), and highly parallel. As far as we know this is the first leader election protocol verified in a process algebraic style.
Reference: [20] <author> M.P.A. </author> <title> Sellink. Verifying process algebra proofs in type theory. In D.J. Andrews, </title> <editor> J.F. Groote, and C.A. Middelburg, editors. </editor> <booktitle> Proceedings of the International Workshop on Semantics of Specification Languages, </booktitle> <pages> pages 314-338. </pages> <booktitle> Workshops in Computing, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The proof is now ready to be proof checked conform <ref> [2, 12, 16, 20] </ref>. It is shown that process algebra, in particular CRL, is suited to prove correctness of highly non trivial protocols. A drawback of the current verification is that it is rather complex and lengthy.
Reference: [21] <author> F.W. Vaandrager. Uitwerking Take-home Tentamen Protocolverificatie. </author> <title> Unpublished manuscript, </title> <booktitle> in Dutch, </booktitle> <year> 1993. </year>
Reference-contexts: It is shown that process algebra, in particular CRL, is suited to prove correctness of highly non trivial protocols. A drawback of the current verification is that it is rather complex and lengthy. A possible lead towards improvement is given by Frits Vaandrager in <ref> [21] </ref>, where by using the notion of confluency (see e.g. [18]) one only needs to consider one trace to establish correctness. Currently we are formalising this notion in [5].
References-found: 21

