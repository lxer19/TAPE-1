URL: ftp://ftp.lcs.mit.edu/student-workshop/1996/abstracts/Myers.ps
Refering-URL: http://www.cag.lcs.mit.edu/student96/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: andru@lcs.mit.edu  
Title: ALSO: A Language for Extensible Multi-user Systems  
Author: Andrew C. Myers 
Affiliation: MIT Laboratory for Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Pavel Curtis. </author> <note> LambdaMOO Programmer's Manual. Available at ftp://parcftp.xerox.com.edu/pub/MOO, </note> <month> May </month> <year> 1996. </year>
Reference-contexts: It was originally designed for writing MUD servers (programmable multi-user virtual worlds), but it is also applicable to other servers. For example, it provides much of the key functionality of languages like Safe-Tcl and JavaScript. ALSO supports even more flexible MUD systems than MOO <ref> [1] </ref>, and can be used to implement other kinds of servers too (e.g., HTTP, SMTP). ALSO contains several uncommon or unique features that make it easier to safely extend a running system. This note provides an overview and rationale for ALSO'S design. More details are available [2].
Reference: [2] <author> Andrew C. Myers. </author> <note> ALSO: The Language. Available at ftp://ftp.pmg.lcs.mit.edu/pub/also/- manual.ps.gz, </note> <month> March </month> <year> 1994. </year>
Reference-contexts: ALSO contains several uncommon or unique features that make it easier to safely extend a running system. This note provides an overview and rationale for ALSO'S design. More details are available <ref> [2] </ref>. A running ALSO server can be experimented with at telnet://also.lcs.mit.edu:4201. 2 Overview ALSO is designed to be familiar in those areas where being different yields no benefit.
Reference: [3] <author> David Ungar and Randall B. Smith. </author> <title> SELF: The power of simplicity. </title> <booktitle> In OOPSLA '87 Conference Proceedings, </booktitle> <month> October </month> <year> 1987. </year> <month> 2 </month>
Reference-contexts: The following example is the Fibonacci function: fib (x) = ( if (x &lt; 0) fail (rangeerror, x) if (x &lt; 2) 1 else fib (x 1) + fib (x 2) ) Computation is typically performed on objects. Like SELF <ref> [3] </ref>, ALSO has prototype-based inheritance; that is, objects inherit directly from other objects. Typically, exemplar or template objects fill the role of classes in class-based systems. Objects can contain references to each other, and are stored in a garbage-collected heap. Andrew Myers is supported in part by ARPA contract N00014-91-J-4136.
References-found: 3

