URL: http://www.cs.wisc.edu/~devise/devise/siam96.ps.gz
Refering-URL: http://www.cs.wisc.edu/~devise/
Root-URL: 
Title: INTEGRATED VISUALIZATION OF PARALLEL PROGRAM PERFORMANCE DATA  
Author: KAREN L. KARAVANIC JUSSI MYLLYMAKI MIRON LIVNY AND BARTON P. MILLER 
Keyword: data visualization, parallel programming, performance profiling  
Abstract: Performance tuning a parallel application involves integrating performance data from many components of the system, including the message passing library, performance monitoring tool, resource manager, operating system, and the application itself. The current practice of visualizing these data streams using a separate, customized tool for each source is inconvenient from a usability perspective, and there is no easy way to visualize the data in an integrated fashion. We demonstrate a solution to this problem using Devise, a generic visualization tool which is designed to allow an arbitrary number of different but related data streams to be integrated and explored visually in a flexible manner. We display data emanating from a variety of sources side by side in three case studies. First we interface the Paradyn Parallel Performance Tool and Devise, using two simple data export modules and Paradyn's simple visualization interface. We show several Devise/Paradyn visualizations which are useful for performance tuning parallel codes, and which incorporate data from Unix utilities and application output. Next we describe the visualization of trace data from a parallel application running in a Condor cluster of workstations. Finally we demonstrate the utility of Devise visualizations in a study of Condor cluster activity. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Cheng, </author> <title> Visual Exploration of Large Amounts of Record Based Sequence Data, </title> <type> PhD thesis, </type> <institution> University of Wisconsin-Madison, </institution> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: The visualization and integration efforts we describe in this paper are equally applicable to these fields as well. 2. Devise: A Data Exploration and Visualization System. Devise is a data exploration and visualization system designed to handle multiple, large data sets using off-the-shelf hardware with limited main memory sizes <ref> [2, 6, 1] </ref>. Data can be large in volume and complex in structure (multi-dimensional and/or hierarchical), and may be imported from a variety of sources such as disk and tape files, database servers, external programs, and World Wide Web resources.
Reference: [2] <author> M. Cheng, M. Livny, and R. Ramakrishnan, </author> <title> Visual analysis of stream data, </title> <journal> in Proc. of SPIE Int. Soc. Opt. Eng., </journal> <volume> vol. </volume> <pages> 2410, </pages> <address> San Jose, CA, </address> <month> Apr. </month> <year> 1995, </year> <pages> pp. 108-119. </pages>
Reference-contexts: The ability to explore the detailed data of all components participating in the execution of the program in a unified manner could lead to better understanding of how the components interact and work together. In this paper we describe a generic visualization tool called Devise <ref> [2, 6] </ref> which is designed to allow an arbitrary number of different but related data streams to be integrated and explored visually in a flexible manner. <p> The visualization and integration efforts we describe in this paper are equally applicable to these fields as well. 2. Devise: A Data Exploration and Visualization System. Devise is a data exploration and visualization system designed to handle multiple, large data sets using off-the-shelf hardware with limited main memory sizes <ref> [2, 6, 1] </ref>. Data can be large in volume and complex in structure (multi-dimensional and/or hierarchical), and may be imported from a variety of sources such as disk and tape files, database servers, external programs, and World Wide Web resources.
Reference: [3] <author> G. A. Geist, M. T. Heath, B. W. Peyton, and P. H. Worley, PICL: </author> <title> A portable instrumented communication library, </title> <type> Tech. Report ORNL/TM-11130, </type> <institution> Oak Ridge National Laboratory, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: We demonstrate visualizations with application data, output from the Paradyn Parallel Performance Tool, and operating system data generated with the Unix utilities iostat and vmstat. We have also successfully used Devise to visualize MPI [7] log files and PICL <ref> [3] </ref> log files. 4.1. Exporting Paradyn Data. We created two new visualizations that generate both schema and data files ready to be imported into Devise. The actual data reported varies with the user's selection of metric/focus pairs.
Reference: [4] <author> R. L. Graham, </author> <title> Bounds on multiprocessing timing anomalies, </title> <journal> Siam Journal of Applied Mathematics, </journal> <volume> 17 (1969), </volume> <pages> pp. 416-429. </pages>
Reference-contexts: Two focus views are displayed in the lower left area. The window on the lower right shows statistics on the execution time of work steps. The application was first run with a greedy work step distribution algorithm <ref> [4] </ref>. The resulting work step data stream is displayed in Figure 6. The top window contains two graphs, an activity plot and an idle plot. Both plots have time on the X axis, measured in days, hours, minutes and seconds. The workstation number is shown on the Y axis.
Reference: [5] <author> M. Litzkow, M. Livny, and M. </author> <title> Mutka, Condor: A hunter of idle workstations, </title> <booktitle> in Proc. of the Eighth Int. Conf. of Distributed Computing Systems, </booktitle> <address> San Jose, CA, </address> <month> June </month> <year> 1988, </year> <pages> pp. 104-111. </pages>
Reference-contexts: Visualization of Condor Application Traces. Next we describe the visualization of trace data from a parallel application running in a Condor cluster of workstations. Condor is a distributed resource management system for large heterogeneous clusters of workstations <ref> [5] </ref>. Its design has been motivated by the needs of users who would like to use the unutilized capacity of such clusters for their long-running, computation-intensive jobs. Condor schedules batch jobs on idle workstations within the cluster.
Reference: [6] <author> M. Livny, R. Ramakrishnan, and J. Myllymaki, </author> <title> Visual exploration of large data sets, </title> <journal> in Proc. of SPIE Int. Soc. Opt. Eng., </journal> <volume> vol. </volume> <pages> 2657, </pages> <address> San Jose, CA, </address> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: The ability to explore the detailed data of all components participating in the execution of the program in a unified manner could lead to better understanding of how the components interact and work together. In this paper we describe a generic visualization tool called Devise <ref> [2, 6] </ref> which is designed to allow an arbitrary number of different but related data streams to be integrated and explored visually in a flexible manner. <p> The visualization and integration efforts we describe in this paper are equally applicable to these fields as well. 2. Devise: A Data Exploration and Visualization System. Devise is a data exploration and visualization system designed to handle multiple, large data sets using off-the-shelf hardware with limited main memory sizes <ref> [2, 6, 1] </ref>. Data can be large in volume and complex in structure (multi-dimensional and/or hierarchical), and may be imported from a variety of sources such as disk and tape files, database servers, external programs, and World Wide Web resources.
Reference: [7] <author> Message Passing Interface Forum, </author> <title> MPI: A message-passing interface standard, </title> <booktitle> The International Journal of Supercomputer Applications and High Performance Computing, </booktitle> <month> 8 </month> <year> (1994). </year>
Reference-contexts: Another useful feature is the ability to visualize data from distinct sources. We demonstrate visualizations with application data, output from the Paradyn Parallel Performance Tool, and operating system data generated with the Unix utilities iostat and vmstat. We have also successfully used Devise to visualize MPI <ref> [7] </ref> log files and PICL [3] log files. 4.1. Exporting Paradyn Data. We created two new visualizations that generate both schema and data files ready to be imported into Devise. The actual data reported varies with the user's selection of metric/focus pairs.
Reference: [8] <author> B. P. Miller, M. Callaghan, J. Cargille, J. Hollingsworth, R. Irvin, K. Karavanic, K. Kunchithapadam, and T. Newhall, </author> <title> The Paradyn parallel performance measurement tool, </title> <booktitle> IEEE Computer, </booktitle> <month> 28 </month> <year> (1995). </year>
Reference-contexts: The size and location of the cursor symbol is determined by the zoom level and scroll position of the focus view. 3. Paradyn: A Tool for Scalable Parallel Performance Tuning. Paradyn <ref> [8] </ref> is a tool for measuring and understanding the performance of parallel and distributed programs. It consists of a data collection facility, an automated bottleneck search tool, and a data visualization interface.
Reference: [9] <author> J. K. Ousterhout, </author> <title> Tcl and the Tk Toolkit, </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: The library also provides aggregation functions, such a minimum, maximum, current, average, and total, that can be invoked over each DataGrid element. Also included is an interface which allows access to the visualization interface calls via Tcl <ref> [9] </ref> commands. Integrated Visualization of Parallel Program Performance Data 5 4. Combining the Power of Paradyn and Devise. Devise can be used to develop visualizations spanning multiple program executions, allowing us to detect trends and patterns that might be difficult to see from a single run.
Reference: [10] <author> J. Pruyne and M. Livny, </author> <title> Parallel processing on dynamic resources with CARMI, in Job Scheduling Strategies for Parallel Processing, </title> <editor> D. G. Feitelson and L. Rudolph, eds., </editor> <volume> vol. </volume> <booktitle> 949 of Lecture notes in Compter Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: If a resource is lost, the master can give the work step which was being computed there to the next available worker. The application is implemented using the Condor Application Resource Management Interface (CARMI) <ref> [10] </ref>. The application is a Materials Science program which is designed to predict the properties of new materials based on first principles [13].
Reference: [11] <author> R. Ramakrishnan, M. Cheng, M. Livny, and P. Seshadri, </author> <title> What's next? Sequence queries, </title> <booktitle> in Proc. Int. Conf. Management of Data, </booktitle> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: Our focus on stream data allows Devise to provide a more flexible mapping mechanism to the user, and to incorporate performance optimizations specific to stream data. It also lets us efficiently interface Devise to record-based data servers such as SQL relational databases or a SEQ sequence database <ref> [12, 11] </ref>. Common to exploratory data analysis and trace file visualization is the need for a powerful browser.
Reference: [12] <author> P. Seshadri, M. Livny, and R. Ramakrishnan, </author> <title> Sequence query processing, </title> <booktitle> in Proc. ACM SIGMOD, </booktitle> <address> Minneapolis, MN, </address> <month> May </month> <year> 1994, </year> <pages> pp. 430-441. </pages>
Reference-contexts: Our focus on stream data allows Devise to provide a more flexible mapping mechanism to the user, and to incorporate performance optimizations specific to stream data. It also lets us efficiently interface Devise to record-based data servers such as SQL relational databases or a SEQ sequence database <ref> [12, 11] </ref>. Common to exploratory data analysis and trace file visualization is the need for a powerful browser.
Reference: [13] <author> W. A. Shelton, G. M. Stocks, R. G. Jordan, Y. Liu, L. Qui, D. D. Johnson, F. J. P. J. B. Staunton, and B. Ginatempo, </author> <title> First principles simulation of materials properties, </title> <booktitle> in Proc. of SHPCC, </booktitle> <month> May </month> <year> 1994, </year> <pages> pp. 103-110. </pages>
Reference-contexts: The application is implemented using the Condor Application Resource Management Interface (CARMI) [10]. The application is a Materials Science program which is designed to predict the properties of new materials based on first principles <ref> [13] </ref>. Logically, this application consists of two nested loops in which all work for the inner loop (comprising one cycle) must be completed before any work for the next cycle of the outer loop can be started. <p> The visualization created earlier using one data set was applied to two data sets; the two visualizations are displayed here side by side for comparison. Next we compared the greedy work distribution algorithm with the original, se 12 Karavanic et al. quential ordering of work steps described in <ref> [13] </ref>. Figure 7 shows the activity plots for both orderings and demonstrates Devise's capability of allowing for easy comparison of related datasets. The visualization we created earlier, in Figure 6, is now applied to two data sets, and the two visualizations can be displayed side by side.
Reference: [14] <author> D. Webb, </author> <title> An ocean model code for array processor computers, </title> <type> Tech. Report Internal Document No.324, </type> <institution> Institute of Oceanographic Sciences, Wormley, U.K., </institution> <year> 1993. </year>
Reference-contexts: There is no fixed maximum to the amount of data that may be generated by this approach. This visi was designed primarily for future use as a link to Devise for real-time visualization of performance data as it is being collected by Paradyn. 4.2. The Application. Moma.pvm <ref> [14] </ref> is a PVM message passing implementation of the 'moma' ocean model code, a version of the Bryan-Cox-Semtner code which was developed for use with array processor computers.
References-found: 14

