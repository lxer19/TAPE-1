URL: ftp://ftp.eecs.umich.edu/people/durfee/daiw94-sd.ps.Z
Refering-URL: http://ai.eecs.umich.edu/people/durfee/vita.html
Root-URL: http://www.cs.umich.edu
Email: sandip@kolkata.mcs.utulsa.edu durfee@engin.umich.edu  
Title: Adaptive surrogate agents  
Author: Sandip Sen Edmund H. Durfee 
Address: 600 South College Avenue 1101 Beal Avenue Tulsa, OK 74104 Ann Arbor, MI 48109  
Affiliation: Dept of Mathematical Computer Sciences Department of EECS, University of Tulsa University of Michigan  
Abstract: Computational infrastructures for cooperative work should contain embedded agents for handling many routine tasks [3], but as the number of agents increases and the agents become geographically and/or conceptually dispersed, supervision of the agents will become increasingly problematic. We argue that agents should be provided with deep domain knowledge that allows them to make quantitatively justifiable decisions, rather than shallow models of users to mimic. In this paper, we use the application domain of distributed meeting scheduling to investigate how agents embodying deeper domain knowledge can choose among alternative strategies for searching their calendars in order to create flexible schedules within reasonable cost. In particular, we are interested in developing mechanisms by which agents can adapt their strategy choices to suit the demands imposed by a dynamically changing environment. In this paper, we first enumerate various strategies we have investigated to focus distributed negotiation between scheduling agents. Next, we demonstrate the necessity for such a scheduler to be adaptive in its choice of options for the various strategy dimensions, so that it can perform effectively over time. In order to build an adaptive scheduler that can effectively choose from available strategy options, we develop quantitative performance estimates of these options using detailed probabilistic analysis. Results from these analyses are used to provide guidelines to choose the most appropriate strategy combination given current environmental conditions and local problem-solving states.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Bogart. </author> <title> Introductory Combinatorics. </title> <publisher> Pitman, </publisher> <address> Boston, MA, </address> <year> 1983. </year>
Reference-contexts: The probability that at least one of the events 7 A 1 ; : : : ; A a (l;x) occurs can be calculated as follows. Algebraic counting techniques based on an inclusion-exclusion argument <ref> [1] </ref> can be used to show that, for n such events we have: P r (A 1 _ A 2 _ : : : _ A n ) P r (A 1 ^ A 2 ) P r (A i ^ A j ) . . . (2) We define p
Reference: [2] <author> S. E. Conry, R. A. Meyer, and V. R. Lesser. </author> <title> Multistage negotiation in distributed planning. </title> <editor> In A. H. Bond and L. Gasser, editors, </editor> <booktitle> Readings in Distributed Artificial Intelligence, </booktitle> <pages> pages 367-384. </pages> <publisher> Morgan Kaufman, </publisher> <year> 1988. </year>
Reference-contexts: To facilitate information exchange, the agents need a common communication protocol for negotiating over meeting times. For our agents, we have chosen to adapt the multistage negotiation protocol <ref> [2] </ref>, which is a generalization of the contract net protocol [11]. In our protocol, each meeting has a particular agent who is responsible for it, called the host. The host contacts other attendees of the meeting (who are called invitees) to announce the meeting, and collects bids (availability information).
Reference: [3] <author> J. Galegher, R. E. Kraut, and C. Egido. </author> <title> Intellectual Teamwork: Social and Technological Foundations of Cooperative Work. </title> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, NJ, </address> <year> 1990. </year>
Reference: [4] <author> R. Johansen. </author> <title> Groupware: Computer Support for Business Teams. </title> <publisher> Free Press, </publisher> <address> New York, NY, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction In characterizing computational tools for supporting cooperative work, researchers have often considered how dimensions of time and space lead to different tools. The result is often a characterization <ref> [4] </ref> of tools like that shown in Figure 1, with representative entries in each of the matrix elements. fl This research has been sponsored, in part, by the National Science Foundation under Coordination Theory and Collaboration Technology grant IRI-9015423, and by a grant from Bellcore.
Reference: [5] <author> T. W. Malone, K. R. Grant, F. A. Turbak, S. A. Brobst, and M. D. Cohen. </author> <title> Intelligent information-sharing systems. </title> <journal> Communications of the ACM, </journal> <volume> 30(5) </volume> <pages> 390-402, </pages> <year> 1987. </year>
Reference-contexts: For such tasks, there are two general approaches to providing computational support. One approach is to use computer processes to prioritize tasks, which serves to conceptually push the problem back into the "different times" column. These processes can, for example, filter and sort email <ref> [5] </ref>, and can solve scheduling problems to help the user navigate among competing tasks so as to attend to them one at a time in the proper order. Hence, this approach performs "triage" on the tasks, but the user has to eventually attend to them all.
Reference: [6] <author> S. Sen. </author> <title> Predicting Tradeoffs in Contract-Based Distributed Scheduling. </title> <type> PhD thesis, </type> <institution> University of Michigan, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: Our particular domain of inquiry has been the meeting-scheduling application, and we have been working on the design of an automated meeting scheduling agent that can schedule meetings on behalf of associated users <ref> [7, 6, 10] </ref>. The agents preserve privacy requirements of users, and reveal only restricted amount of information about calendar states, as and when required, to schedule meetings with other users. <p> The jth factor in the expression, where j &gt; 1, is of the following form (see <ref> [6] </ref> for the proof) 2 : 1 P r (i j + 1ji; i 1; : : : ; i j + 2) = y=0 (1) y j 1 ! x=1 K y 1 ! x=1 K ! y=0 (1) y j 2 ! x=1 K y 1 ! x=1 K
Reference: [7] <author> S. Sen and E. H. Durfee. </author> <title> A formal study of distributed meeting scheduling: Preliminary results. </title> <booktitle> In Proceedings of the ACM Conference on Organizational Computing Systems '91, </booktitle> <pages> pages 55-68, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: Our particular domain of inquiry has been the meeting-scheduling application, and we have been working on the design of an automated meeting scheduling agent that can schedule meetings on behalf of associated users <ref> [7, 6, 10] </ref>. The agents preserve privacy requirements of users, and reveal only restricted amount of information about calendar states, as and when required, to schedule meetings with other users.
Reference: [8] <author> S. Sen and E. H. Durfee. </author> <title> A formal analysis of communication and commitment in distributed meeting scheduling. </title> <booktitle> In Working Papers of the 11th International Workshop on Distributed Artificial Intelligence, </booktitle> <pages> pages 333-342, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: full agreement on a meeting time is reached). 1 While some of this information could be obtained indirectly, we assume in this paper that agents will directly communicate about the densities of various intervals, with a resulting decrease in privacy. 4 3 Adaptive scheduling Our analysis of various strategy options <ref> [8] </ref> show that no one strategy combination dominates another over all circumstances. Changing environmental factors like system load, organization size, etc., can produce a change in the strategy combination that will produce the best results on any given performance metric.
Reference: [9] <author> S. Sen and E. H. Durfee. </author> <title> Dependent subtask processing in a contract-net for manufacturing. </title> <booktitle> In Proc. of AAAI-93 Workshop on Intelligent Manufacturing Technology, </booktitle> <pages> pages 7-13, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: As such, our techniques can be used on a broader class of problems if the multi-stage negotiation protocol is applied to solve those problems. In particular, we have showed that our proposed system of distributed contract-based negotiation can be effectively used in a manufacturing environment <ref> [9] </ref>. We have not addressed the problems of constructing efficient user interface, calendar browsing software, encoding all possible user requirements, etc. These concerns need to be adequately resolved before a working application can be implemented.
Reference: [10] <author> S. Sen and E. H. Durfee. </author> <title> The role of commitment in cooperative negotiation. </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <note> 1994. (to appear). </note>
Reference-contexts: Our particular domain of inquiry has been the meeting-scheduling application, and we have been working on the design of an automated meeting scheduling agent that can schedule meetings on behalf of associated users <ref> [7, 6, 10] </ref>. The agents preserve privacy requirements of users, and reveal only restricted amount of information about calendar states, as and when required, to schedule meetings with other users.
Reference: [11] <author> R. G. Smith. </author> <title> The contract net protocol: High-level communication and control in a distributed problem solver. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-29(12):1104-1113, </volume> <month> Dec. </month> <year> 1980. </year>
Reference-contexts: To facilitate information exchange, the agents need a common communication protocol for negotiating over meeting times. For our agents, we have chosen to adapt the multistage negotiation protocol [2], which is a generalization of the contract net protocol <ref> [11] </ref>. In our protocol, each meeting has a particular agent who is responsible for it, called the host. The host contacts other attendees of the meeting (who are called invitees) to announce the meeting, and collects bids (availability information).
Reference: [12] <author> E. Taub. </author> <title> Sharing schedules. </title> <booktitle> MacUser, </booktitle> <pages> pages 155-162, </pages> <month> July </month> <year> 1993. </year> <title> 14 different search biases for the second example. different search biases for the third example. </title> <type> 15 </type>
Reference-contexts: We present the probabilistic analysis used by agents to choose between strategy options, and illustrate the benefit of adaptive scheduling by using example problem scenarios. Our work promises to provide efficient automated meeting scheduling capabilities that are not available with the current top-of-the-line calendar management software <ref> [12] </ref>. 2 Distributed Meeting Scheduling The agents in a Distributed Meeting Scheduling (DMS) system exchange relevant information to build local schedules that fit into a globally consistent schedule. To facilitate information exchange, the agents need a common communication protocol for negotiating over meeting times.
References-found: 12

