URL: http://ki.cs.tu-berlin.de/~scheffer/artikel/ilp96.ps
Refering-URL: http://ki.cs.tu-berlin.de/~scheffer/publications.html
Root-URL: 
Email: email: scheffer@cs.tu-berlin.de  
Title: Efficient -Subsumption based on Graph Algorithms  
Author: Tobias Scheffer, Ralf Herbrich and Fritz Wysotzki 
Address: Sekr. FR 5-8, Franklinstr. 28/29, D-10587 Berlin,  
Affiliation: Technische Universitat Berlin, Artificial Intelligence Research Group,  
Abstract: The -subsumption problem is crucial to the efficiency of ILP learning systems. We discuss two -subsumption algorithms based on strategies for preselecting suitable matching literals. The class of clauses, for which subsumption becomes polynomial, is a superset of the deterministic clauses. We further map the general problem of -subsumption to a certain problem of finding a clique of fixed size in a graph, and in return show that a specialization of the pruning strategy of the Car-raghan and Pardalos clique algorithm provides a dramatic reduction of the subsumption search space. We also present empirical results for the mesh design data set.
Abstract-found: 1
Intro-found: 1
Reference: [BM92] <author> B. Bolsak and S. Muggleton. </author> <title> The application of inductive logic programming to finite-element mesh design. </title> <booktitle> In Inductive Logic Programming, Lon-don, 1992. </booktitle> <publisher> Academic Press. </publisher>
Reference-contexts: share the same set of adjacent nodes, then there are at least two cliques of identical size containing exactly one of these nodes, and it is irrelevant, which one of them is chosen. 6 Empirical results Our experiments are based on the well known finite element mesh design data set <ref> [BM92] </ref>. We used the complete and non-determinate data set, provided by the MLnet server at the GMD.
Reference: [CP90] <author> R. Carraghan and P. Pardalos. </author> <title> An exact algorithm for the maximum clique problem. </title> <journal> Operations Research Letters, </journal> <volume> 9 </volume> <pages> 375-382, </pages> <year> 1990. </year>
Reference-contexts: The clique problem is to find the largest subset of mutually adjacent nodes in a graph. This problem is well known to be NP-complete, e.g. [FGL + 91], yet much effort has been spent in the search for algorithms that behave efficient in the average, e.g. <ref> [JT96, CP90, GHP96] </ref>. <p> We will show, that subsumption can be tested by finding a clique of size n, and we will show that a specialization of the Carraghan and Pardalos pruning strategy <ref> [CP90] </ref> strongly reduces the search space, we will show that this space is smaller than the cartesian product space proposed by Kim and Cho [KC92]. <p> Again we can match the clauses in polynomial time, without any need for backtracking. 5 Clique and the general subsumption problem In this section we show that the subsumption problem can be mapped to the clique problem. We present a specialization of the Carraghan and Pardalos <ref> [CP90] </ref> pruning strategy. Definition 12. A pair (V; E) of vertices and edges with E V fi V we call a graph. Definition 13. <p> n different literals of C and n = jCj, each literal of C is embedded into some literal of D, hence for = 1 : : : n C D holds. 5.2 Searching for MAXCLIQUE Carraghan and Pardalos present the following algorithm to determine the largest clique of a graph <ref> [CP90] </ref>: 1. Start with initial sets nodes containing all nodes, best-clique, initially empty, and a recursion depth, initially 1. 2.
Reference: [DB93] <author> L. DeRaedt and M. Bruynooghe. </author> <title> A theory of clausal discovery. </title> <booktitle> In Proc. Workshop on ILP, </booktitle> <year> 1993. </year>
Reference-contexts: A clause C -subsumes D (C ` D), iff there is a substitution , such that C D. -subsumption is used as a consequence relation in many ILP systems, for the decision if a rule covers an example as well as for the reduction of clauses, e.g. <ref> [MF90, vdLNC93, DB93] </ref>. Especially the consistency test, i.e. the test if a newly generalized clause covers negative samples, requires a large amount of subsumption tests.
Reference: [DMR92] <author> S. Dzeroski, S. Muggleton, and S. Russel. </author> <title> Pac-learnability of determinate logic programs. </title> <booktitle> In Proc. 5th ACM Workshop on Computational Learning Theory, </booktitle> <pages> pages 128-135, </pages> <year> 1992. </year>
Reference-contexts: If in a clause a literal can be found, that matches exactly one literal of the other clause, this literal can be matched deterministically <ref> [DMR92, KL94] </ref> and no backtracking needs to be done. Thus, the complexity grows exponentially with the number of remaining, non-deterministic literals.
Reference: [Eis81] <author> N. Eisinger. </author> <title> Subsumption and connection graphs. </title> <booktitle> In Proc. IJCAI, </booktitle> <year> 1981. </year>
Reference-contexts: We will present a second approach as well and characterize the set of clauses, that can be subsumed in polynomial time by this algorithm. Eisinger <ref> [Eis81] </ref> introduces S-links into the framework of the connection graph resolution proof procedure [Kow75, Sic76]. Eisinger further points out that a subsuming substitution exists, if there is a strongly compatible tuple of substitutions in the cartesian product of the literal matches. <p> A pair (V; E) of vertices and edges with E V fi V we call a graph. Definition 13. A set of nodes C V is a clique of a graph (V; E), iff E C fiC, i.e. all nodes are mutually adjacent. 5.1 S-link method of subsumption Eisinger <ref> [Eis81] </ref> proposes a subsumption test that is based on selecting a compatible tuple of substitutions. Definition 14. Two substitutions 1 and 2 are called strongly compatible iff 1 2 = 2 1 , i.e. no variable is assigned different terms in 1 and 2 .
Reference: [FGL + 91] <author> U. Feige, S. Goldwasser, L. Lovasz, S. Safra, and M. Szegedy. </author> <title> Approximating the maxclique is almost NP-complete. </title> <booktitle> In Proc. 32nd IEEE Symp. on Foundations of Comp. Sci., </booktitle> <year> 1991. </year>
Reference-contexts: The maximum clique problem is strongly related to the subsumption problem. The clique problem is to find the largest subset of mutually adjacent nodes in a graph. This problem is well known to be NP-complete, e.g. <ref> [FGL + 91] </ref>, yet much effort has been spent in the search for algorithms that behave efficient in the average, e.g. [JT96, CP90, GHP96].
Reference: [GHP96] <author> L. Gibbons, D. Hearn, and P. Pardalos. </author> <title> A continuous based heuristic for the maximum clique problem. In Clique, Graph Coloring and Satisfiability: Second DIMACS Implementation Challenge, </title> <year> 1996. </year>
Reference-contexts: The clique problem is to find the largest subset of mutually adjacent nodes in a graph. This problem is well known to be NP-complete, e.g. [FGL + 91], yet much effort has been spent in the search for algorithms that behave efficient in the average, e.g. <ref> [JT96, CP90, GHP96] </ref>.
Reference: [GL85] <author> G. Gottlob and A. Leitsch. </author> <title> On the efficiency of subsumption algorithms. </title> <journal> J. ACM, </journal> <volume> 32(2) </volume> <pages> 280-295, </pages> <year> 1985. </year>
Reference-contexts: complexity of subsumption, that can be combined with all previously mentioned approaches: If a clause contains classes (locals) of literals, such that there are no common variables in different classes, then each class can be matched independently and the complexity grows exponentially with the size of the largest local only <ref> [GL85, KL94] </ref>. In sections 3 and 4, we describe two alternative context based algorithms, while in section 5 we describe our clique based approach. These sections may be read independently. 2 The -subsumption problem -subsumption [Rob65, Plo70] is an approximation of the logical implication. <p> In the negative case, there are very few problems that are extremely expensive. The proposed combination of the context and the clique based subsumption algorithm can in turn be combined with the k-local match <ref> [GL85, KL94] </ref>. If C contains classes of literals such that there are no common variables in different classes, then each class can be matched independently and the complexity grows exponentially with the size of the largest local only. Each class can be matched using the presented algorithm.
Reference: [Got87] <author> G. Gottlob. </author> <title> Subsumption and implication. </title> <journal> Information Processing Letters, </journal> <volume> 24 </volume> <pages> 109-111, </pages> <year> 1987. </year>
Reference-contexts: While implication is undecidable in general for first-order languages, - subsumption is decidable but incomplete, i.e. there may exist clauses C and D, such that C 6` D but C j= D. This occurs, if C is self-resolving (recursive) or if D is tautological <ref> [Got87] </ref>. If tautologies and self-resolution are excluded, then C ` D , C j= D [Got87, Mug93, KL94]. The -subsumption problem is NP-complete in general [KN86]. The worst case time complexity is O (vars (D) vars (C) ), or O (jDj jCj ). Definition 1. <p> This occurs, if C is self-resolving (recursive) or if D is tautological [Got87]. If tautologies and self-resolution are excluded, then C ` D , C j= D <ref> [Got87, Mug93, KL94] </ref>. The -subsumption problem is NP-complete in general [KN86]. The worst case time complexity is O (vars (D) vars (C) ), or O (jDj jCj ). Definition 1. A substitution is a mapping from variables to terms.
Reference: [GW96a] <author> P. Geibel and F. Wysotzki. </author> <title> Learning relational concepts with decision trees. </title> <booktitle> In Proc. ICML, </booktitle> <year> 1996. </year>
Reference-contexts: International Workshop on Inductive Logic Programming, 1996 For the similar problem of graph isomorphism, there are several approaches, <ref> [Tin76, Wei76, WSK81, UW81, GW96a, GW96b] </ref>, to reducing matching candidates using context information. We will adapt a very general approach to the problem of subsumption and show, that characteristic matrices [Soc88] are a special case of this approach. <p> It was applied to obtaining attribute-value data for machine learning of graph classification rules <ref> [GW96a, GW96b] </ref>. The approach is based on the idea, that nodes may be matched to those nodes only, that possess the same context, i.e. the same relations up to an arbitrary depth. We will propose an approach to the subsumption problem that reflects this principle.
Reference: [GW96b] <author> P. Geibel and F. Wysotzki. </author> <title> Relational learning with decision trees. </title> <booktitle> In Proc. ECAI, </booktitle> <year> 1996. </year>
Reference-contexts: International Workshop on Inductive Logic Programming, 1996 For the similar problem of graph isomorphism, there are several approaches, <ref> [Tin76, Wei76, WSK81, UW81, GW96a, GW96b] </ref>, to reducing matching candidates using context information. We will adapt a very general approach to the problem of subsumption and show, that characteristic matrices [Soc88] are a special case of this approach. <p> It was applied to obtaining attribute-value data for machine learning of graph classification rules <ref> [GW96a, GW96b] </ref>. The approach is based on the idea, that nodes may be matched to those nodes only, that possess the same context, i.e. the same relations up to an arbitrary depth. We will propose an approach to the subsumption problem that reflects this principle.
Reference: [JT96] <author> D. S. Johnson and M. A. </author> <title> Trick, editors. Clique, Graph Coloring and Satisfi-ability: Second DIMACS Implementation Challenge, </title> <booktitle> DIMACS series, </booktitle> <year> 1996. </year>
Reference-contexts: The clique problem is to find the largest subset of mutually adjacent nodes in a graph. This problem is well known to be NP-complete, e.g. [FGL + 91], yet much effort has been spent in the search for algorithms that behave efficient in the average, e.g. <ref> [JT96, CP90, GHP96] </ref>.
Reference: [KC92] <author> B. M. Kim and J. W. Cho. </author> <title> A new subsumption method in the connection graph proof procedure. </title> <journal> Theoretical Computer Science, </journal> <volume> 103 </volume> <pages> 283-309, </pages> <year> 1992. </year>
Reference-contexts: Eisinger [Eis81] introduces S-links into the framework of the connection graph resolution proof procedure [Kow75, Sic76]. Eisinger further points out that a subsuming substitution exists, if there is a strongly compatible tuple of substitutions in the cartesian product of the literal matches. Kim and Cho <ref> [KC92] </ref> propose a pruning strategy that reduces the computational effort of finding a compatible substitution. The maximum clique problem is strongly related to the subsumption problem. The clique problem is to find the largest subset of mutually adjacent nodes in a graph. <p> that subsumption can be tested by finding a clique of size n, and we will show that a specialization of the Carraghan and Pardalos pruning strategy [CP90] strongly reduces the search space, we will show that this space is smaller than the cartesian product space proposed by Kim and Cho <ref> [KC92] </ref>. <p> We will now compare this algorithm to the algorithm proposed by Kim and Cho <ref> [KC92] </ref>. 1. Generate the set of matching substitutions 2. Delete those substitutions, that are strongly compatible with less than jCj1 different substitutions 3. enumerate the cartesian product of the remaining substitutions of dimension n and check, if there is a strongly compatible n-tuple. <p> Delete those substitutions, that are strongly compatible with less than jCj1 different substitutions 3. enumerate the cartesian product of the remaining substitutions of dimension n and check, if there is a strongly compatible n-tuple. This notation of the algorithm is essentially identical to the algorithm in <ref> [KC92] </ref>, that is expressed in terms of bit vectors.
Reference: [KL94] <author> J.-U. Kietz and M. Lubbe. </author> <title> An efficient subsumption algorithm for inductive logic programming. </title> <booktitle> In Proc. International Conference on Machine Learning, </booktitle> <year> 1994. </year>
Reference-contexts: Hence, efficient subsumption algorithms that do not come along with restrictions of the hypothesis language, are an important contribution to ILP. -subsumption of two clauses is NP-complete in general [KN86], even if the second clause is fixed <ref> [KL94] </ref>; the NP-completeness results from the ambiguity of variable identification. As subsumption is performed very often in ILP, the efficiency is crucial to the power of ILP learners; many approaches to speeding up subsumption were studied. <p> If in a clause a literal can be found, that matches exactly one literal of the other clause, this literal can be matched deterministically <ref> [DMR92, KL94] </ref> and no backtracking needs to be done. Thus, the complexity grows exponentially with the number of remaining, non-deterministic literals. <p> complexity of subsumption, that can be combined with all previously mentioned approaches: If a clause contains classes (locals) of literals, such that there are no common variables in different classes, then each class can be matched independently and the complexity grows exponentially with the size of the largest local only <ref> [GL85, KL94] </ref>. In sections 3 and 4, we describe two alternative context based algorithms, while in section 5 we describe our clique based approach. These sections may be read independently. 2 The -subsumption problem -subsumption [Rob65, Plo70] is an approximation of the logical implication. <p> This occurs, if C is self-resolving (recursive) or if D is tautological [Got87]. If tautologies and self-resolution are excluded, then C ` D , C j= D <ref> [Got87, Mug93, KL94] </ref>. The -subsumption problem is NP-complete in general [KN86]. The worst case time complexity is O (vars (D) vars (C) ), or O (jDj jCj ). Definition 1. A substitution is a mapping from variables to terms. <p> if for each literal there is exactly one possible match that is consistent with the previously matched literals [MF90] or, more generally, if there is an ordering of literals, such that at each step for each literal there is exactly one match that is consistent with the previously matched literals <ref> [KL94] </ref>. Definition 4 deterministic subsumption. Let C = c 0 fc i g and D = d 0 d 1 ; : : : ; d m be Horn clauses. <p> As Kietz and Lubbe point out <ref> [KL94] </ref>, the definition of determinate subsump-tion between two clauses is identical to the definition with respect to one clause, a set of background literals and an example [MF90]: if an observation e follows from a clause C and a set of background literals l i , then C ` e fl <p> C ` DET D can be tested with at most O (jCj 2 jDj) unification attempts <ref> [KL94] </ref> by the following algorithm: 1. While there is a literal l 1 2 C that matches exactly one literal l 2 2 D with l 1 = l 2 , substitute C with . 2. <p> In these cases, C D can be tested in O (jCj 2 jDj 2 2d ), because jCj 2 jDj is the complexity of deterministic subsumption <ref> [KL94] </ref> and we need to compare O (2 d ) paths to test for con gra (l i ) con gra (l j ), where d is the fixed depth. Example 3. <p> Fig. 2 shows the time results in the positive case for 100%, fig. 3 for 95% of the observed problems. The strong similarity between the two diagrams indicates that the exclusion of 5% extrema successfully eliminates the noise but does not influence the obtained results. In contrast to Kietz <ref> [KL94] </ref> who obtained an improvement of performance using deterministic subsumption (based on an artificial data set), we cannot confirm that deterministic subsumption yields an improvement on the mesh design data set in the positive case. <p> In the negative case, there are very few problems that are extremely expensive. The proposed combination of the context and the clique based subsumption algorithm can in turn be combined with the k-local match <ref> [GL85, KL94] </ref>. If C contains classes of literals such that there are no common variables in different classes, then each class can be matched independently and the complexity grows exponentially with the size of the largest local only. Each class can be matched using the presented algorithm.
Reference: [KN86] <author> D. Kapur and P. Narendran. </author> <title> NP-completeness of the set unification and matching problems. </title> <booktitle> In Proc. 8th International Conference on Automated Deduction, </booktitle> <year> 1986. </year>
Reference-contexts: Hence, efficient subsumption algorithms that do not come along with restrictions of the hypothesis language, are an important contribution to ILP. -subsumption of two clauses is NP-complete in general <ref> [KN86] </ref>, even if the second clause is fixed [KL94]; the NP-completeness results from the ambiguity of variable identification. As subsumption is performed very often in ILP, the efficiency is crucial to the power of ILP learners; many approaches to speeding up subsumption were studied. <p> This occurs, if C is self-resolving (recursive) or if D is tautological [Got87]. If tautologies and self-resolution are excluded, then C ` D , C j= D [Got87, Mug93, KL94]. The -subsumption problem is NP-complete in general <ref> [KN86] </ref>. The worst case time complexity is O (vars (D) vars (C) ), or O (jDj jCj ). Definition 1. A substitution is a mapping from variables to terms. We denote substitutions = fx 1 ! t 1 ; : : : ; x n ! t n g.
Reference: [Kow75] <author> R. Kowalski. </author> <title> A proof procedure using connection graphs. </title> <journal> J. ACM, </journal> <volume> 22(4) </volume> <pages> 572-595, </pages> <year> 1975. </year>
Reference-contexts: We will present a second approach as well and characterize the set of clauses, that can be subsumed in polynomial time by this algorithm. Eisinger [Eis81] introduces S-links into the framework of the connection graph resolution proof procedure <ref> [Kow75, Sic76] </ref>. Eisinger further points out that a subsuming substitution exists, if there is a strongly compatible tuple of substitutions in the cartesian product of the literal matches. Kim and Cho [KC92] propose a pruning strategy that reduces the computational effort of finding a compatible substitution.
Reference: [Lov78] <author> D. W. Loveland. </author> <title> Automated theorem proving: A logical basis. </title> <publisher> Elsevier, North Holland, </publisher> <year> 1978. </year>
Reference-contexts: A clause C -subsumes a clause D, written C ` D, iff there is a substitution , such that C D and jCj jDj. We use the term subsumption instead of -subsumption (in contrast to Loveland <ref> [Lov78] </ref>, who defines subsumption as implication). While implication is undecidable in general for first-order languages, - subsumption is decidable but incomplete, i.e. there may exist clauses C and D, such that C 6` D but C j= D.
Reference: [MF90] <author> S. Muggleton and C. Feng. </author> <title> Efficient induction of logic programs. </title> <booktitle> In Proc. 1st Conf. on Algorithmic Learning Theory, </booktitle> <pages> pages 368-381, </pages> <year> 1990. </year>
Reference-contexts: A clause C -subsumes D (C ` D), iff there is a substitution , such that C D. -subsumption is used as a consequence relation in many ILP systems, for the decision if a rule covers an example as well as for the reduction of clauses, e.g. <ref> [MF90, vdLNC93, DB93] </ref>. Especially the consistency test, i.e. the test if a newly generalized clause covers negative samples, requires a large amount of subsumption tests. <p> A clause is said to be determinate, if for each literal there is exactly one possible match that is consistent with the previously matched literals <ref> [MF90] </ref> or, more generally, if there is an ordering of literals, such that at each step for each literal there is exactly one match that is consistent with the previously matched literals [KL94]. Definition 4 deterministic subsumption. <p> As Kietz and Lubbe point out [KL94], the definition of determinate subsump-tion between two clauses is identical to the definition with respect to one clause, a set of background literals and an example <ref> [MF90] </ref>: if an observation e follows from a clause C and a set of background literals l i , then C ` e fl 1 ; : : : ; l n g.
Reference: [Mug93] <author> S. Muggleton. </author> <title> Inverting implication. </title> <journal> Artificial Intelligence Journal, </journal> <year> 1993. </year>
Reference-contexts: This occurs, if C is self-resolving (recursive) or if D is tautological [Got87]. If tautologies and self-resolution are excluded, then C ` D , C j= D <ref> [Got87, Mug93, KL94] </ref>. The -subsumption problem is NP-complete in general [KN86]. The worst case time complexity is O (vars (D) vars (C) ), or O (jDj jCj ). Definition 1. A substitution is a mapping from variables to terms.
Reference: [Plo70] <author> G. D. Plotkin. </author> <title> A note on inductive generalization. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence, </booktitle> <volume> volume 5, </volume> <pages> pages 153-163, </pages> <year> 1970. </year>
Reference-contexts: In sections 3 and 4, we describe two alternative context based algorithms, while in section 5 we describe our clique based approach. These sections may be read independently. 2 The -subsumption problem -subsumption <ref> [Rob65, Plo70] </ref> is an approximation of the logical implication. A clause C -subsumes a clause D, written C ` D, iff there is a substitution , such that C D and jCj jDj. <p> To obtain clauses C of any size, we set up clauses that contained a mesh/2 literal as a head and the set of literals linked to the head via an increasing variable depth as the body. We computed the lgg <ref> [Plo70] </ref> of two such clauses and drew a random subset of the body literals to more precisely adjust the clause size. The D clauses were generated using a fixed variable depth, they are of approximately the same size (approximately 130 literals).
Reference: [Rob65] <author> J. A. Robinson. </author> <title> A machine-oriented logic based on the resolution principle. </title> <journal> J. ACM, </journal> <volume> 12(1) </volume> <pages> 23-41, </pages> <year> 1965. </year>
Reference-contexts: 1 Introduction -subsumption <ref> [Rob65] </ref> is a correct but incomplete, decidable consequence relation, while implication is undecidable in general. <p> In sections 3 and 4, we describe two alternative context based algorithms, while in section 5 we describe our clique based approach. These sections may be read independently. 2 The -subsumption problem -subsumption <ref> [Rob65, Plo70] </ref> is an approximation of the logical implication. A clause C -subsumes a clause D, written C ` D, iff there is a substitution , such that C D and jCj jDj.
Reference: [Sic76] <author> Sharon Sickel. </author> <title> A search technique for clause interconnectivity graphs. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-25(8):823-835, </volume> <year> 1976. </year>
Reference-contexts: We will present a second approach as well and characterize the set of clauses, that can be subsumed in polynomial time by this algorithm. Eisinger [Eis81] introduces S-links into the framework of the connection graph resolution proof procedure <ref> [Kow75, Sic76] </ref>. Eisinger further points out that a subsuming substitution exists, if there is a strongly compatible tuple of substitutions in the cartesian product of the literal matches. Kim and Cho [KC92] propose a pruning strategy that reduces the computational effort of finding a compatible substitution.
Reference: [Soc88] <author> R. Socher. </author> <title> A subsumption algorithm based on characteristic matrices. </title> <booktitle> In Proc. 9th Int. Conf. on Automated Deduction, </booktitle> <year> 1988. </year>
Reference-contexts: International Workshop on Inductive Logic Programming, 1996 For the similar problem of graph isomorphism, there are several approaches, [Tin76, Wei76, WSK81, UW81, GW96a, GW96b], to reducing matching candidates using context information. We will adapt a very general approach to the problem of subsumption and show, that characteristic matrices <ref> [Soc88] </ref> are a special case of this approach. We will present a second approach as well and characterize the set of clauses, that can be subsumed in polynomial time by this algorithm. Eisinger [Eis81] introduces S-links into the framework of the connection graph resolution proof procedure [Kow75, Sic76]. <p> But l a and l b cannot be element of D, because they share a common variable and we assumed that there is no corresponding path in D. The graph context of a literal at depth 1 contains the same amount of information as the characteristic matrix <ref> [Soc88] </ref> of the literal does. Element C ij of a characteristic matrix of a literal l contains the predicate names of those literals l k , such that there is a variable, that occurs at position i of l and on position j of l k . <p> Hence, both literals can be matched deterministically and the substitution was found without backtracking. If a clause C is not a datalog clause, i.e. the clause contains non-trivial terms, then we compute a datalog clause C 0 according to <ref> [Soc88] </ref> and generate the context w.r.t the new datalog clause.
Reference: [Tin76] <editor> G. Tinhofer. Zum algorithmischen Nachweis der Isomorphie von endlichen Graphen. In H. Noltemeier, editor, Graphen, Algorithmen, Datenstruk-turen. </editor> <booktitle> 2. Fachtagung uber Graphentheoretische Konzepte der Informatik. </booktitle> <publisher> Carl Hanser Verlag, </publisher> <year> 1976. </year>
Reference-contexts: International Workshop on Inductive Logic Programming, 1996 For the similar problem of graph isomorphism, there are several approaches, <ref> [Tin76, Wei76, WSK81, UW81, GW96a, GW96b] </ref>, to reducing matching candidates using context information. We will adapt a very general approach to the problem of subsumption and show, that characteristic matrices [Soc88] are a special case of this approach. <p> condition holds more often and the set of clauses, to be subsumed deterministically, grows. 3 Reduction of matching candidates using graph context Wysotzki [WSK81, UW81] proposes an approach to reducing the number of matching candidates for the graph isomorphism problem that is based on results of Weisfeiler [Wei76] and Tinhofer <ref> [Tin76] </ref>. It was applied to obtaining attribute-value data for machine learning of graph classification rules [GW96a, GW96b]. The approach is based on the idea, that nodes may be matched to those nodes only, that possess the same context, i.e. the same relations up to an arbitrary depth.
Reference: [UW81] <editor> S. Unger and F. Wysotzki. Lernfahige Klassifizierungssysteme. </editor> <publisher> Akademie Verlag Berlin, </publisher> <year> 1981. </year>
Reference-contexts: International Workshop on Inductive Logic Programming, 1996 For the similar problem of graph isomorphism, there are several approaches, <ref> [Tin76, Wei76, WSK81, UW81, GW96a, GW96b] </ref>, to reducing matching candidates using context information. We will adapt a very general approach to the problem of subsumption and show, that characteristic matrices [Soc88] are a special case of this approach. <p> If the number of matching candidates for some literals in C can be reduced, as is done by the following two algorithms, the condition holds more often and the set of clauses, to be subsumed deterministically, grows. 3 Reduction of matching candidates using graph context Wysotzki <ref> [WSK81, UW81] </ref> proposes an approach to reducing the number of matching candidates for the graph isomorphism problem that is based on results of Weisfeiler [Wei76] and Tinhofer [Tin76]. It was applied to obtaining attribute-value data for machine learning of graph classification rules [GW96a, GW96b]. <p> But for not too large a k this is feasible and it showed, that almost any isomorphism test can be performed in polynomial time <ref> [Wei76, WSK81, UW81] </ref>. It is known, that two nodes cannot match if their context paths do not match, but it is unknown, if a match of the context implies a match of the nodes for any fixed context depth (note that the complexity of the graph isomorphism problem is unknown).
Reference: [vdLNC93] <author> P. van der Laag and S. Nienhuys-Cheng. </author> <title> Subsumption and refinement in model inference. </title> <booktitle> In Machine Learning: ECML, </booktitle> <year> 1993. </year>
Reference-contexts: A clause C -subsumes D (C ` D), iff there is a substitution , such that C D. -subsumption is used as a consequence relation in many ILP systems, for the decision if a rule covers an example as well as for the reduction of clauses, e.g. <ref> [MF90, vdLNC93, DB93] </ref>. Especially the consistency test, i.e. the test if a newly generalized clause covers negative samples, requires a large amount of subsumption tests.
Reference: [Wei76] <author> B. Weisfeiler. </author> <title> On Construction and Identification of Graphs. </title> <booktitle> Number 558 in Lecture Notes in Mathematics. </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1976. </year>
Reference-contexts: International Workshop on Inductive Logic Programming, 1996 For the similar problem of graph isomorphism, there are several approaches, <ref> [Tin76, Wei76, WSK81, UW81, GW96a, GW96b] </ref>, to reducing matching candidates using context information. We will adapt a very general approach to the problem of subsumption and show, that characteristic matrices [Soc88] are a special case of this approach. <p> two algorithms, the condition holds more often and the set of clauses, to be subsumed deterministically, grows. 3 Reduction of matching candidates using graph context Wysotzki [WSK81, UW81] proposes an approach to reducing the number of matching candidates for the graph isomorphism problem that is based on results of Weisfeiler <ref> [Wei76] </ref> and Tinhofer [Tin76]. It was applied to obtaining attribute-value data for machine learning of graph classification rules [GW96a, GW96b]. The approach is based on the idea, that nodes may be matched to those nodes only, that possess the same context, i.e. the same relations up to an arbitrary depth. <p> But for not too large a k this is feasible and it showed, that almost any isomorphism test can be performed in polynomial time <ref> [Wei76, WSK81, UW81] </ref>. It is known, that two nodes cannot match if their context paths do not match, but it is unknown, if a match of the context implies a match of the nodes for any fixed context depth (note that the complexity of the graph isomorphism problem is unknown).
Reference: [WSK81] <author> F. Wysotzki, J. Selbig, and W. Kolbe. </author> <title> Concept learning by structured examples an algebraic approach. </title> <booktitle> In Proceedings of the 7th International Joint Conference on Artificial Intelligence, </booktitle> <year> 1981. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: International Workshop on Inductive Logic Programming, 1996 For the similar problem of graph isomorphism, there are several approaches, <ref> [Tin76, Wei76, WSK81, UW81, GW96a, GW96b] </ref>, to reducing matching candidates using context information. We will adapt a very general approach to the problem of subsumption and show, that characteristic matrices [Soc88] are a special case of this approach. <p> If the number of matching candidates for some literals in C can be reduced, as is done by the following two algorithms, the condition holds more often and the set of clauses, to be subsumed deterministically, grows. 3 Reduction of matching candidates using graph context Wysotzki <ref> [WSK81, UW81] </ref> proposes an approach to reducing the number of matching candidates for the graph isomorphism problem that is based on results of Weisfeiler [Wei76] and Tinhofer [Tin76]. It was applied to obtaining attribute-value data for machine learning of graph classification rules [GW96a, GW96b]. <p> But for not too large a k this is feasible and it showed, that almost any isomorphism test can be performed in polynomial time <ref> [Wei76, WSK81, UW81] </ref>. It is known, that two nodes cannot match if their context paths do not match, but it is unknown, if a match of the context implies a match of the nodes for any fixed context depth (note that the complexity of the graph isomorphism problem is unknown).
References-found: 28

