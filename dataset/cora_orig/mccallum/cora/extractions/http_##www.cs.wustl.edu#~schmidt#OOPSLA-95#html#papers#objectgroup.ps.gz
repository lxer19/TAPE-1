URL: http://www.cs.wustl.edu/~schmidt/OOPSLA-95/html/papers/objectgroup.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/OOPSLA-95/html/papers.html
Root-URL: 
Email: maffeis@acm.org  
Phone: Phone: 607-255-9222, Fax: 607-255-4428  
Title: Object Group an Object Behavioral Pattern for Fault-Tolerance and Group Communication in Distributed Systems  
Author: Silvano Maffeis 
Web: http://www.cs.cornell.edu/Info/People/maffeis  
Affiliation: Dept. of Computer Science Cornell University  
Abstract: This paper describes "Object Group", an Object Behavioral Pattern for groupware applications and fault-tolerant client/server systems. The Object Group pattern allows the implementation of replicated objects, object migration, and efficient multicast communication over protocols like Deering-IP and UDP multi-cast. Events within an Object Group respect the Virtual Synchrony model. Owing to Virtual Synchrony, the replication degree of an object can be increased at runtime, even when client applications are interacting with the object. The replicated state remains consistent in spite of objects entering and leaving the group dynamically and in spite of failures. The Object Group pattern has been implemented in the Electra and in the Orbix+Isis CORBA Object Request Broker. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Amir, Y., Dolev, D., Kramer, S., and Malki, D. Transis: </author> <title> A Communication SubSystem for High Availability. </title> <booktitle> In 22nd International Symposium on Fault-Tolerant Computing (July 1992), IEEE. </booktitle>
Reference-contexts: Communication Subsystem (Also referred to as the runtime). Provides a low-level interface to reliable multicast of marshaled data, group management, and light-weight processes. The Communication Subsystem should be implemented atop of a toolkit like Horus [14], Isis [2], Consul [10], Transis <ref> [1] </ref>, etc. For the sake of flexibility and portability, the Communication Subsystem implements a generic interface. An Adaptor Object is used to map the generic interface onto the real interface provided by Horus or Isis (Figure 3). Object Implementation (Server application). <p> A view is an ordered list of object references, there is one reference per group member. The first entry of a view (view [0]) represents the oldest member, the second entry (view <ref> [1] </ref>) the second oldest, and so forth. Each group member knows about its index in the view. This ranking is consistent at all group members. Join and leave operations trigger the installation of a new view at each group member's runtime system. <p> The view is stable and the members may submit requests. If the coordinator fails, the group members will receive a failure notification from the runtime, and the member with object reference view <ref> [1] </ref> will become the new coordinator. The view transfer is then restarted with the new coordinator. The view management mechanisms are mostly transparent to the user of the Object Group pattern.
Reference: [2] <author> Birman, K. P., and van Renesse, R., Eds. </author> <title> Reliable Distributed Computing with the Isis Toolkit. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: The underlying group management protocols guarantee consistent replicated state of the Directory, even when several clients fire install and remove operations while a new object is joining the group. This execution style is called Virtual Synchrony <ref> [2] </ref>. Group communication is reliable, i.e., each operational group member will eventually receive a request. As another example, consider a ticker application that multicasts stock exchange quotes to a large number of trader-workstations (Figure 1). <p> Communication Subsystem (Also referred to as the runtime). Provides a low-level interface to reliable multicast of marshaled data, group management, and light-weight processes. The Communication Subsystem should be implemented atop of a toolkit like Horus [14], Isis <ref> [2] </ref>, Consul [10], Transis [1], etc. For the sake of flexibility and portability, the Communication Subsystem implements a generic interface. An Adaptor Object is used to map the generic interface onto the real interface provided by Horus or Isis (Figure 3). Object Implementation (Server application).
Reference: [3] <author> Golding, R. A., and Taylor, K. </author> <title> Group Membership in the Epidemic Style. </title> <type> Tech. rep., </type> <institution> University of California, Santa Cruz, </institution> <year> 1992. </year>
Reference-contexts: However, by overloading certain member functions, an application specific action can be triggered whenever an object requests to join a group, whenever a new view is installed, and so forth. Variations of above view management protocol are discussed in <ref> [12, 11, 6, 3] </ref>. 8 Consequences The Object Group pattern offers following benefits: * An important CORBA Object Implementation can be made resilient to failures with only mini mal effort. * Existing CORBA applications can be made resilient to failures without modifying their client parts (transparent multicast). * Groupware applications can
Reference: [4] <author> Hadzilacos, V., and Toueg, S. </author> <title> Fault-Tolerant Broadcasts and Related Problems. In Distributed Systems, </title> <editor> S. Mullender, Ed., second ed. </editor> <publisher> Addison Wesley, </publisher> <year> 1993. </year>
Reference-contexts: The reference can be installed in a name server or converted to a human-readable string by the ORB::object to string operation. The policy argument is used to tell the underlying toolkit what kind of multicast protocol to employ, e.g., for total ordering or causal ordering <ref> [7, 4] </ref>. If the BOA is configured to run on Isis, the policy object will select either the Isis abcast, cbcast, fbcast, or gbcast protocol to transmit a multicast. In the Horus configuration, the policy object serves to compose a Horus protocol stack [13].
Reference: [5] <institution> Isis Distributed Systems, Inc., Iona Technologies, Ltd. </institution> <note> Orbix+Isis Programmer's Guide, 1995. Document D071-00. </note>
Reference-contexts: Smith is " &lt;< number &lt;< "nn"; g; delete entries; g 11 Known Uses The Object Group Pattern has been implemented in the Electra [8, 9] and in the Orbix+Isis <ref> [5] </ref> ORB. Electra Electra is a flexible CORBA-2 Object Request Bro ker based upon the Object Group paradigm. In Electra, the Object Group pattern is implemented in the BOA, as was proposed in Section 9.
Reference: [6] <author> Jahanian, F., Fakhouri, S., and Rajku-mar, R. </author> <title> Processor Group Membership Protocols: Specification, </title> <booktitle> Design and Implementation. In Proceedings of the 12th Symposium on Reliable Distributed Systems (Princeton, </booktitle> <address> New Jersey, </address> <month> Oct. </month> <year> 1993), </year> <note> IEEE. </note>
Reference-contexts: However, by overloading certain member functions, an application specific action can be triggered whenever an object requests to join a group, whenever a new view is installed, and so forth. Variations of above view management protocol are discussed in <ref> [12, 11, 6, 3] </ref>. 8 Consequences The Object Group pattern offers following benefits: * An important CORBA Object Implementation can be made resilient to failures with only mini mal effort. * Existing CORBA applications can be made resilient to failures without modifying their client parts (transparent multicast). * Groupware applications can
Reference: [7] <author> Lamport, L. </author> <title> Time, Clocks and the Ordering of Events in a Distributed System. </title> <journal> Communications of the ACM 21, </journal> <month> 7 (July </month> <year> 1978). </year>
Reference-contexts: The reference can be installed in a name server or converted to a human-readable string by the ORB::object to string operation. The policy argument is used to tell the underlying toolkit what kind of multicast protocol to employ, e.g., for total ordering or causal ordering <ref> [7, 4] </ref>. If the BOA is configured to run on Isis, the policy object will select either the Isis abcast, cbcast, fbcast, or gbcast protocol to transmit a multicast. In the Horus configuration, the policy object serves to compose a Horus protocol stack [13].
Reference: [8] <author> Maffeis, S. </author> <title> Adding Group Communication and Fault-Tolerance to CORBA. </title> <booktitle> In Proceedings of the 1995 USENIX Conference on Object-Oriented Technologies (Monterey, </booktitle> <address> CA, June 1995), </address> <publisher> USENIX. </publisher>
Reference-contexts: Smith is " &lt;< number &lt;< "nn"; g; delete entries; g 11 Known Uses The Object Group Pattern has been implemented in the Electra <ref> [8, 9] </ref> and in the Orbix+Isis [5] ORB. Electra Electra is a flexible CORBA-2 Object Request Bro ker based upon the Object Group paradigm. In Electra, the Object Group pattern is implemented in the BOA, as was proposed in Section 9.
Reference: [9] <author> Maffeis, S. </author> <title> Run-Time Support for Object-Oriented Distributed Programming. </title> <type> PhD thesis, </type> <institution> University of Zurich, Department of Computer Science, </institution> <year> 1995. </year>
Reference-contexts: Smith is " &lt;< number &lt;< "nn"; g; delete entries; g 11 Known Uses The Object Group Pattern has been implemented in the Electra <ref> [8, 9] </ref> and in the Orbix+Isis [5] ORB. Electra Electra is a flexible CORBA-2 Object Request Bro ker based upon the Object Group paradigm. In Electra, the Object Group pattern is implemented in the BOA, as was proposed in Section 9.
Reference: [10] <author> Mishra, S., Peterson, L. L., and Schlicht-ing, R. D. </author> <title> Consul: A Communication Substrate for Fault-Tolerant Distributed Programs. </title> <journal> Distributed Systems Engineering Journal 1, </journal> <month> 2 (Dec. </month> <year> 1993). </year>
Reference-contexts: Communication Subsystem (Also referred to as the runtime). Provides a low-level interface to reliable multicast of marshaled data, group management, and light-weight processes. The Communication Subsystem should be implemented atop of a toolkit like Horus [14], Isis [2], Consul <ref> [10] </ref>, Transis [1], etc. For the sake of flexibility and portability, the Communication Subsystem implements a generic interface. An Adaptor Object is used to map the generic interface onto the real interface provided by Horus or Isis (Figure 3). Object Implementation (Server application).
Reference: [11] <author> Ricciardi, A. M. </author> <title> The Group Membership Problem in Asynchronous Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Cornell University, </institution> <address> Ithaca, New York, </address> <month> Nov. </month> <year> 1992. </year> <note> No. 92-1313. [12] van Renesse, </note> <author> R. </author> <title> The Horus Uniform Group Interface. Horus Documentation. [13] van Renesse, </title> <editor> R., and Birman, K. P. </editor> <title> Protocol Composition in Horus. </title> <booktitle> In Proceedings of the 14th Annual ACM Symposium on Principles of Distributed Computing (Ottawa, </booktitle> <address> Ontario Canada, </address> <month> Aug. </month> <year> 1995). </year> <note> [14] van Renesse, </note> <author> R., Birman, K. P., and Maf-feis, S. Horus: </author> <title> A Flexible Group Communication System. </title> <journal> Communications of the ACM (1996). </journal> <note> (to appear). 7 </note>
Reference-contexts: However, by overloading certain member functions, an application specific action can be triggered whenever an object requests to join a group, whenever a new view is installed, and so forth. Variations of above view management protocol are discussed in <ref> [12, 11, 6, 3] </ref>. 8 Consequences The Object Group pattern offers following benefits: * An important CORBA Object Implementation can be made resilient to failures with only mini mal effort. * Existing CORBA applications can be made resilient to failures without modifying their client parts (transparent multicast). * Groupware applications can
References-found: 11

