URL: file://dream.dai.ed.ac.uk/pub/papers/PS/pub445.ps.gz
Refering-URL: http://www.dai.ed.ac.uk:80/staff/personal_pages/bundy/drafts/proof-plans-faq.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Science of Reasoning  for assessing the association of a proof plan with a proof.  
Author: Alan Bundy 
Note: Criteria are given  
Address: 80 South Bridge Edinburgh EH1 1HN Scotland  
Affiliation: Department of Artificial Intelligence University of Edinburgh  
Abstract: This paper addresses the question of how we can understand reasoning in general and mathematical proofs in particular. It argues the need for a high-level understanding of proofs to complement the low-level understanding provided by Logic. It proposes a role for computation in providing this high-level understanding, namely by the association of proof plans with proofs. Proof plans are defined and examples are given for two families of proofs. 
Abstract-found: 1
Intro-found: 1
Reference: [Aubin 75] <author> R. Aubin. </author> <title> Some generalization heuristics in proofs by induction. </title> <editor> In G. Huet and G. Kahn, editors, </editor> <booktitle> Actes du Colloque Construction: </booktitle> <institution> Amelioration et verification de Programmes. Institut de recherche d'informatique et d'automatique, </institution> <year> 1975. </year>
Reference-contexts: These tactics and methods are based on an analysis and rational reconstruction of the work of Boyer and Moore, [Boyer & Moore 79], and Aubin, <ref> [Aubin 75] </ref>. In particular, the term `fertilize' is due to Boyer and Moore, and the term `ripple out' is due to Aubin (although we have considerably extended the usage of these two terms). The idea of tactics came originally from the lcf system, [Gordon et al 79].
Reference: [Bledsoe et al 72] <author> W.W. Bledsoe, </author> <title> R.S. Boyer, and W.H. Henneman. Computer proofs of limit theorems. </title> <journal> Artificial Intelligence, </journal> <volume> 3 </volume> <pages> 27-60, </pages> <year> 1972. </year>
Reference-contexts: For instance, * <ref> [Bledsoe et al 72] </ref> describes the common structure in theorems about limits of functions in analysis. This common structure was implemented as the limit heuristic and used to guide proofs of such theorems. * [Wos & McCune 88] describes the common structure in attempts to find fixed-points com-binators.
Reference: [Boyer & Moore 79] <author> R.S. Boyer and J.S. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <address> 1979. </address> <publisher> ACM monograph series. </publisher>
Reference-contexts: These tactics and methods are based on an analysis and rational reconstruction of the work of Boyer and Moore, <ref> [Boyer & Moore 79] </ref>, and Aubin, [Aubin 75]. In particular, the term `fertilize' is due to Boyer and Moore, and the term `ripple out' is due to Aubin (although we have considerably extended the usage of these two terms). <p> The purpose of these steps is to prepare the way for the fertilize tactic, which matches the induction hypothesis against sub-expressions of the induction conclusion, and replaces these sub-expressions with true. The heuristic associated with these `ripple out' steps in <ref> [Boyer & Moore 79] </ref> is what they call symbolic evaluation, but others have called unfolding, [Burstall & Darlington 77]. We have implemented this heuristic as the sym eval proof plan, and used it in other parts of inductive proofs.
Reference: [Bundy & Welham 81] <author> A. Bundy and B. Welham. </author> <title> Using meta-level inference for selective application of multiple rewrite rules in algebraic manipulation. </title> <journal> Artificial Intelligence, </journal> <volume> 16(2) </volume> <pages> 189-212, </pages> <year> 1981. </year> <note> Also available from Ed-inburgh as DAI Research Paper 121. </note>
Reference-contexts: Oyster is based on the Nuprl system, [Constable et al 86]. The idea of formally specifying tactics using methods and reasoning with methods to form proof plans, is first described in [Bundy 88]. This idea developed from earlier work on meta-level inference in the Press system, <ref> [Bundy & Welham 81] </ref>. Press is a symbolic equation solver for equations such as those in figure 4. Polya advocates the use of plans in human problem solving in [Polya 65] and gives examples of their use.
Reference: [Bundy 88] <author> A. Bundy. </author> <title> The use of explicit plans to guide inductive proofs. </title> <editor> In R. Lusk and R. Overbeek, editors, </editor> <booktitle> 9th Conference on Automated Deduction, </booktitle> <pages> pages 111-120. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year> <note> Longer version available from Edinburgh as DAI Research Paper No. 349. </note>
Reference-contexts: Many commonly observed phenomena of reasoning cannot be explained without such a high-level understanding. Furthermore, automatic reasoning is impractical without a high-level understanding. We propose a science of reasoning which provides both a low- and a high-level understanding of reasoning. It combines Logic with the concept of proof plans, <ref> [Bundy 88] </ref>. We illustrate this with examples from mathematical reasoning, but it is intended that the science should eventually apply to all kinds of reasoning. fl The research reported in this paper was supported by SERC grant GR/E/44598 and an SERC Senior Fellowship to the author. <p> The idea of tactics came originally from the lcf system, [Gordon et al 79]. Oyster is based on the Nuprl system, [Constable et al 86]. The idea of formally specifying tactics using methods and reasoning with methods to form proof plans, is first described in <ref> [Bundy 88] </ref>. This idea developed from earlier work on meta-level inference in the Press system, [Bundy & Welham 81]. Press is a symbolic equation solver for equations such as those in figure 4. <p> For this maturation of an initial intuition we need some non-psychological criteria. * We can borrow two non-psychological criteria from the list of desirable properties of proof plans given in <ref> [Bundy 88] </ref>, namely expectancy and generality. Expectancy means that there must be a basis for predicting the successful outcome of a proof plan.
Reference: [Bundy et al 88] <author> A. Bundy, F. van Harmelen, J. Hesketh, and A. Smaill. </author> <title> Experiments with proof plans for induction. </title> <type> Research Paper 413, </type> <institution> Dept. of Artificial Intelligence, Edinburgh, </institution> <year> 1988. </year> <note> To appear in JAR. 17 </note>
Reference-contexts: Preconditions are normally checked in a partially instantiated state, with unbound variables being instantiated during checking. This has the side effect of analysing the current conjecture and, hence, determining the rules of inference that the tactic will apply. Proof plans have been implemented within the Clam-Oyster system, <ref> [Bundy et al 88] </ref>. Oyster is a theorem prover for Intuitionist Type Theory. Clam is a plan formation program which has access to a number of general-purpose tactics and methods for inductive proofs. This system has been used to control the search for inductive proofs about natural numbers and lists.
Reference: [Bundy et al 89] <author> A. Bundy, F. van Harmelen, J. Hesketh, A. Smaill, and A. Stevens. </author> <title> A rational reconstruction and extension of recursion analysis. </title> <editor> In N.S. Sridharan, editor, </editor> <booktitle> Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 359-365. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year> <note> Also available from Edinburgh as DAI Research Paper 419. </note>
Reference-contexts: They use this analysis to suggest a form of induction that is likely to lead to a successful ripple out (for details see <ref> [Bundy et al 89] </ref>). <p> Our sym eval proof plan replaces all defined terms by their definitions, until no further rewriting is possible. In particular, recursively defined functions are rewritten with the base or step cases of their recursive definitions. The rival proof plan, proposed in <ref> [Bundy et al 89] </ref>, is ripple out. The idea is to rewrite the induction conclusion, selectively, using wave rules, in an attempt to create within the rewritten induction conclusion one or more sub-expressions which match the induction hypothesis.
Reference: [Burstall & Darlington 77] <author> R.M. Burstall and J. Darlington. </author> <title> A transformation system for developing recursive programs. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 24(1) </volume> <pages> 44-67, </pages> <year> 1977. </year>
Reference-contexts: The heuristic associated with these `ripple out' steps in [Boyer & Moore 79] is what they call symbolic evaluation, but others have called unfolding, <ref> [Burstall & Darlington 77] </ref>. We have implemented this heuristic as the sym eval proof plan, and used it in other parts of inductive proofs. Our sym eval proof plan replaces all defined terms by their definitions, until no further rewriting is possible.
Reference: [Constable et al 86] <editor> R.L. Constable, S.F. Allen, H.M. Bromley, et al. </editor> <title> Implementing Mathematics with the Nuprl Proof Development System. </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year>
Reference-contexts: The idea of tactics came originally from the lcf system, [Gordon et al 79]. Oyster is based on the Nuprl system, <ref> [Constable et al 86] </ref>. The idea of formally specifying tactics using methods and reasoning with methods to form proof plans, is first described in [Bundy 88]. This idea developed from earlier work on meta-level inference in the Press system, [Bundy & Welham 81].
Reference: [Funt 73] <author> B. V. Funt. </author> <title> A procedural approach to constructions in euclidean geometry. Unpublished M.Sc. </title> <type> thesis, </type> <institution> University of British Columbia, </institution> <month> October </month> <year> 1973. </year>
Reference-contexts: This common structure was implemented as the kernel method and used to guide the search for such fixed-points. * [Polya 65] describes the common structure in ruler and compass constructions. This common structure was implemented by <ref> [Funt 73] </ref> and used to guide the search for such con structions. 7 One approach to capturing such common structure is to build a derived rule of inference out of a sequence of rules of inference and axioms (see, for instance, work on partial evaluation in logic programming, [Komorowski 82], explanation
Reference: [Gordon et al 79] <author> M.J. Gordon, A.J. Milner, </author> <title> and C.P. Wadsworth. Edinburgh LCF - A mechanised logic of computation, </title> <booktitle> volume 78 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1979. </year>
Reference-contexts: In particular, the term `fertilize' is due to Boyer and Moore, and the term `ripple out' is due to Aubin (although we have considerably extended the usage of these two terms). The idea of tactics came originally from the lcf system, <ref> [Gordon et al 79] </ref>. Oyster is based on the Nuprl system, [Constable et al 86]. The idea of formally specifying tactics using methods and reasoning with methods to form proof plans, is first described in [Bundy 88].
Reference: [Komorowski 82] <author> H.J. Komorowski. </author> <title> Partial evaluation as a means for inferencing data structures in an applicative language: A theory and implementation in the case of PROLOG. </title> <booktitle> In Proceedings of the ninth conference on the Principles of Programming Languages (POPL), </booktitle> <pages> pages 225-267, </pages> <address> Albuquerque, New Mexico, 1982. </address> <publisher> ACM. </publisher>
Reference-contexts: implemented by [Funt 73] and used to guide the search for such con structions. 7 One approach to capturing such common structure is to build a derived rule of inference out of a sequence of rules of inference and axioms (see, for instance, work on partial evaluation in logic programming, <ref> [Komorowski 82] </ref>, explanation based generalization, [Mitchell et al 86], or the Isabelle system, [Paulson 88]). It is not possible to capture the common structures observed here in a derived rule of inference. Note that different wave rules are used in different examples of ripple out.
Reference: [Mitchell et al 86] <author> T.M. Mitchell, R.M. Keller, and S.T. Kedar-Cabelli. </author> <title> Explanation-based generalization: A unifying view. </title> <journal> Machine Learning, </journal> <volume> 1(1) </volume> <pages> 47-80, </pages> <year> 1986. </year> <note> Also available as Tech. Report ML-TR-2, </note> <institution> SUNJ Rutgers, </institution> <year> 1985. </year>
Reference-contexts: used to guide the search for such con structions. 7 One approach to capturing such common structure is to build a derived rule of inference out of a sequence of rules of inference and axioms (see, for instance, work on partial evaluation in logic programming, [Komorowski 82], explanation based generalization, <ref> [Mitchell et al 86] </ref>, or the Isabelle system, [Paulson 88]). It is not possible to capture the common structures observed here in a derived rule of inference. Note that different wave rules are used in different examples of ripple out.
Reference: [Paulson 88] <author> L. Paulson. </author> <title> Experience with Isabelle: A generic theorem prover. </title> <booktitle> In COLOG 88. Institute of Cybernetics of the Estonian SSR, </booktitle> <year> 1988. </year>
Reference-contexts: structions. 7 One approach to capturing such common structure is to build a derived rule of inference out of a sequence of rules of inference and axioms (see, for instance, work on partial evaluation in logic programming, [Komorowski 82], explanation based generalization, [Mitchell et al 86], or the Isabelle system, <ref> [Paulson 88] </ref>). It is not possible to capture the common structures observed here in a derived rule of inference. Note that different wave rules are used in different examples of ripple out.
Reference: [Polya 65] <author> G. Polya. </author> <title> Mathematical discovery. </title> <publisher> John Wiley & Sons, Inc, </publisher> <year> 1965. </year> <title> Two volumes. </title>
Reference-contexts: These observations are so common that they have, as far as we are aware, escaped the attention of psychologists, although they have been noticed by mathematicians reflecting on the processes of theorem proving, e.g. <ref> [Polya 65] </ref>. We list them below and hope that other mathematicians will immediately recognise their validity. * Mathematicians distinguish between understanding each step of a proof and understanding the whole proof. It is possible to understand at one level without understanding at the other | either way round. <p> This common structure was implemented as the kernel method and used to guide the search for such fixed-points. * <ref> [Polya 65] </ref> describes the common structure in ruler and compass constructions. <p> This idea developed from earlier work on meta-level inference in the Press system, [Bundy & Welham 81]. Press is a symbolic equation solver for equations such as those in figure 4. Polya advocates the use of plans in human problem solving in <ref> [Polya 65] </ref> and gives examples of their use. This work is a major source of inspiration for proof plans. 9 6 The High-Level Understanding of Proofs Thus a high-level explanation of a proof of a conjecture is obtained by associating a proof plan with it.
Reference: [Robinson 65] <author> J.A. Robinson. </author> <title> A machine oriented logic based on the resolution principle. </title> <journal> J Assoc. Comput. Mach., </journal> <volume> 12 </volume> <pages> 23-41, </pages> <year> 1965. </year>
Reference-contexts: There have also been psychological studies of how people and animals actually do reason. The work on Logic has been especially influential in the automation of reasoning. For instance, resolution, <ref> [Robinson 65] </ref>, the paradigm technique for automatic reasoning, was based on the work of logicians such as Herbrand. Logic has been used for the representation of knowledge in artificial intelligence, where it has inspired the invention of new kinds of logics 1 , e.g. for non-monotonic reasoning.
Reference: [Wos & McCune 88] <author> L. Wos and W. McCune. </author> <title> Searching for fixed point combinators by using automated theorem proving: a preliminary report. </title> <type> Technical Report ANL-88-10, </type> <institution> Argonne National Laboratory, </institution> <year> 1988. </year> <month> 18 </month>
Reference-contexts: For instance, * [Bledsoe et al 72] describes the common structure in theorems about limits of functions in analysis. This common structure was implemented as the limit heuristic and used to guide proofs of such theorems. * <ref> [Wos & McCune 88] </ref> describes the common structure in attempts to find fixed-points com-binators. This common structure was implemented as the kernel method and used to guide the search for such fixed-points. * [Polya 65] describes the common structure in ruler and compass constructions.
References-found: 17

