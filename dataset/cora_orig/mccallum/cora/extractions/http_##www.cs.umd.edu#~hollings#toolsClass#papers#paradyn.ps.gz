URL: http://www.cs.umd.edu/~hollings/toolsClass/papers/paradyn.ps.gz
Refering-URL: http://www.cs.umd.edu/~hollings/toolsClass/papers/
Root-URL: 
Email: -bart,markc,jon,hollings,rbi,karavan,krishna,newhall-@cs.wisc.edu  
Title: The Paradyn Parallel Performance Measurement Tools system, hardware, and application specific performance data. It also
Author: Barton P. Miller Mark D. Callaghan Jonathan M. Cargille Jeffrey K. Hollingsworth R. Bruce Irvin Karen L. Karavanic Krishna Kunchithapadam Tia Newhall 
Note: The instrumentation in Paradyn can easily be configured to accept new operating  these systems.  
Address: 1210 W. Dayton Street Madison, WI 53706  
Affiliation: Computer Sciences Department University of Wisconsin-Madison  
Abstract: Paradyn is based on a dynamic notion of performance instrumentation and measurement. Unmodified executable files are placed into execution and then performance instrumentation is inserted into the application program and modified during execution. The instrumentation is controlled by the Performance Consultant module, that automatically directs the placement of instrumentation. The Performance Consultant has a well-defined notion of performance bottlenecks and program structure, so that it can associate bottlenecks with specific causes and specific parts of a program. Paradyn controls its instrumentation overhead by monitoring the cost of its data collection, limiting its instrumentation to a (user controllable) threshold. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> T. Ball and J. R. Larus, </author> <title> "Optimally Profiling and Tracing Programs", </title> <booktitle> 19th ACM Symposium on Principles of Programming Languages, </booktitle> <address> Albuquerque, NM, </address> <month> January 19-22, </month> <year> 1992, </year> <pages> pp. 59-70. </pages>
Reference-contexts: In the best case, users should not have to modify their source program or use special compiling techniques. Dynamic instrumentation in Paradyn avoids the need to modify, recompile, or re-link an application. This same characteristic is shared by some implementations of binary rewriting, such as qpt <ref> [1] </ref> and Pixie [6]. Dynamic instrumentation also allows us to attach to an already-running program (such as a parallel database server), monitor its performance for some interval, and then detach. 1.2.
Reference: 2. <author> M. T. Heath and J. A. Etheridge, </author> <title> "Visualizing Performance of Parallel Programs", </title> <booktitle> IEEE Software 8, </booktitle> <month> 5 (Sept </month> <year> 1991), </year> . 
Reference-contexts: Open interfaces for visualization and new data sources : Graphical and tabular displays are important mechanisms for understanding performance data. There are several projects, such as Paragraph <ref> [2] </ref> and Pablo [8], that have developed a large collection of visualization routines. We want our tool to leverage off these existing visualizations. Paradyn has a set of standard visualizations (time-histograms, bar graphs, tables, and profiles) and provides a simple interface to incorporate displays from other sources. <p> It is not difficult to build a visi to provide data to commercial data visualization packages such as AVS [9], or incorporate the visualization displays of systems such as Paragraph <ref> [2] </ref> or Pablo [8]. The visi interface and library also can provide performance data for other uses, such as evaluating performance predicates for application steering, or logging performance data for experiment management.
Reference: 3. <author> J. K. Hollingsworth, R. B. Irvin and B. P. Miller, </author> <title> "The Integration of Application and System Based Metrics in A Parallel Program Performance Tool", </title> <booktitle> 1991 ACM SIGPLAN Notices Symposium on Principles and Practice of Parallel Programming, </booktitle> <month> April </month> <year> 1991, </year> <pages> pp. 189-200. </pages>
Reference-contexts: The Performance Consultant and visualizations receive performance data by specifying one or more metric-focus grids. Paradyn stores performance data internally in a data structure called a time histogram <ref> [3] </ref>. A time histogram is a fixed-size array whose elements (buckets) store values of a metric for successive time intervals. Two parameters determine the granularity of the data stored in time histograms: initial bucket width (time interval) and number of buckets.
Reference: 4. <author> J. K. Hollingsworth, B. P. Miller and J. Cargille, </author> <title> "Dynamic Program Instrumentation for Scalable Performance Tools", </title> <booktitle> 1994 Scalable High-Performance Computing Conf., </booktitle> <address> Knoxville, Tenn., </address> <year> 1994. </year>
Reference-contexts: Users can also create an application-specific PCL file that describes details of the application and how it is run. 3. DYNAMIC INSTRUMENTATION Paradyn uses dynamic instrumentation to instrument only those parts of the program relevant to finding the current performance problem <ref> [4] </ref>. Dynamic instrumentation defers instrumenting the program until it is in execution and dynamically inserts, alters, and deletes instrumentation during program execution. This section describes the dynamic instrumentation interface and implementation, how dynamic instrumentation collects mapping information for high-level language views, and how users may describe their own metrics.
Reference: 5. <author> J. K. Hollingsworth and B. P. Miller, </author> <title> "Dynamic Control of Performance Monitoring on Large Scale Parallel Systems", </title> <booktitle> 7th ACM International Conf. on Supercomputing, </booktitle> <address> Tokyo, </address> <month> July </month> <year> 1993, </year> <pages> pp. 185-194. </pages>
Reference-contexts: A single execution of a program may contain several problems. To assist in finding performance problems, Paradyn has a well-defined model, called the W 3 Search Model <ref> [5] </ref>, that organizes information about a program's performance. Performance problems are found by searching through the space defined by W 3 . Paradyn's Performance Consultant module uses the W 3 Search Model to automate the searching for performance problems.
Reference: 6. <institution> RISCompiler Languages Programmer's Guide, MIPS Computer Systems, Inc., </institution> <month> December, </month> <year> 1988. </year>
Reference-contexts: In the best case, users should not have to modify their source program or use special compiling techniques. Dynamic instrumentation in Paradyn avoids the need to modify, recompile, or re-link an application. This same characteristic is shared by some implementations of binary rewriting, such as qpt [1] and Pixie <ref> [6] </ref>. Dynamic instrumentation also allows us to attach to an already-running program (such as a parallel database server), monitor its performance for some interval, and then detach. 1.2.
Reference: 7. <author> J. K. Ousterhout, </author> <title> "An X11 Toolkit Based on the Tcl Language", </title> <booktitle> Proc. USENIX Winter Conference, </booktitle> <month> January </month> <year> 1991. </year>
Reference-contexts: The Data Manager handles requests from other threads for data collection, delivers performance data from the Paradyn daemon (s) to the requesting thread (s), and maintains and distributes information about the metrics and resource hierarchies for the currently defined application. The User Interface Manager thread was developed using Tcl/Tk <ref> [7] </ref>, and provides the user with visual access to the system's main controls and performance data. The Performance Consultant controls the automated search for performance problems, requesting and receiving performance data from the Data Manager.
Reference: 8. <author> D. A. Reed, R. A. Aydt, R. J. Noe, P. C. Roth, K. A. Shields, B. W. Schwartz and L. F. Tavera, </author> <title> Scalable Performance Analysis: The Pablo Performance Analysis Environment, </title> <booktitle> in Scalable Parallel Libraries Conference, IEEE Computer Society, </booktitle> <year> 1993. </year>
Reference-contexts: Open interfaces for visualization and new data sources : Graphical and tabular displays are important mechanisms for understanding performance data. There are several projects, such as Paragraph [2] and Pablo <ref> [8] </ref>, that have developed a large collection of visualization routines. We want our tool to leverage off these existing visualizations. Paradyn has a set of standard visualizations (time-histograms, bar graphs, tables, and profiles) and provides a simple interface to incorporate displays from other sources. <p> It is not difficult to build a visi to provide data to commercial data visualization packages such as AVS [9], or incorporate the visualization displays of systems such as Paragraph [2] or Pablo <ref> [8] </ref>. The visi interface and library also can provide performance data for other uses, such as evaluating performance predicates for application steering, or logging performance data for experiment management.
Reference: 9. <author> C. Upson, T. F. Jr., D. Kamins, D. Laidlaw, D. Schlegel, J. Vroom, R. Gurwitz and A. Dam, </author> <title> The Application Visualization System: A Computational Environment for Scientific Visualization, </title> <journal> Vol. </journal> <volume> 9, </volume> <month> July </month> <year> 1989. </year> <month> - 23 </month> - 
Reference-contexts: All performance visualizations are implemented as visi's. Paradyn currently provides visi's for time-histograms (``strip plots''), bar charts, and tables; examples of these displays are given in the next section. It is not difficult to build a visi to provide data to commercial data visualization packages such as AVS <ref> [9] </ref>, or incorporate the visualization displays of systems such as Paragraph [2] or Pablo [8]. The visi interface and library also can provide performance data for other uses, such as evaluating performance predicates for application steering, or logging performance data for experiment management.
References-found: 9

