URL: http://www.cs.utexas.edu/users/cpg/RTS/papers/rtss94.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/cpg/RTS/abs.html
Root-URL: 
Title: Response-Time Bounds of Rule-Based Programs under Rule Priority Structure  
Author: Rwo-Hsi Wang Aloysius K. Mok 
Address: Austin, TX 78712-1188  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Abstract: A key index of the performance of a rule-based program used in real-time monitoring and control is its response time, defined by the maximum number of rule firings before a fixed point of the program is reached from a start state. Previous work in computing the response-time bounds for rule-based programs assumes that if two rules are enabled, then either one of them may be scheduled for firing. This assumption may be too conservative in the case programmers choose to impose a priority structure on the set of rules. In this paper, we discuss how to get tighter bounds by taking rule-priority information into account. We show that the rule-suppression relation we previously introduced can be extended to incorporate rule-priority information. A bound-derivation algorithm for programs whose potential-trigger relations satisfy an acyclicity condition is presented, followed by its correctness proof and an analysis example. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Benda, M., </author> <booktitle> "Real-Time Applications of AI in the Aerospace Industry," Presentation at the Fall School on Artificial Intelligence. </booktitle> <institution> The Research Institute of Ecole Normal Superieure, France, </institution> <month> Sep. </month> <year> 1987. </year>
Reference-contexts: Such computation must be completed sufficiently fast so that the system can react to environmental changes in a predictable fashion. The verification/validation of the behavior of rule-based programs is of both practical and theoretical interest. Related work in real-time AI systems can be found in <ref> [1] </ref> [7] [10] [9] [6]. fl The research reported herein is supported by the Office of Naval Research under grant number N00014-94-1-0582 and by a grant from the Texas Advanced Research Program.
Reference: [2] <author> Cheng, A. M. K., "EQL: </author> <title> A Rule-Based Language for Programming Real-Time Decision Systems," </title> <type> Technical Report, </type> <institution> Dept. of Computer Sciences, Univ. of Texas at Austin, </institution> <month> Mar. </month> <year> 1989. </year>
Reference-contexts: An anal-ysis example is presented in Section 5, followed by concluding remarks and future research topics in Section 6. 2 The EQL language EQL is a rule-based programming language designed for developing real-time decision systems where the set of decision variables is fixed a priori <ref> [2] </ref>. This seems to be the class of rule-based programs that are most commonly found in real-time expert system applications.
Reference: [3] <author> Cheng, A. M. K., Browne, J. C., Mok, A. K. and Wang, R.-H., </author> <title> "Analysis of Real-Time Rule-Based Systems with Behavioral Constraint Assertions Specified in Estella," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> vol. 19, no. 9, </volume> <month> Sep. </month> <year> 1993. </year>
Reference-contexts: It was shown in that paper that the determination of the response time for arbitrary programs is in general undecidable, and is PSPACE-hard for finite-state programs. Recently there have been several papers presenting efficient methods of computing response-time bounds for rule-based programs [5] [4] [11] <ref> [3] </ref>. However, none of those methods makes use of the rule-priority information in the program. Rule priority is a common feature in rule-based languages. It is used to constrain rule-firing order.
Reference: [4] <author> Cheng, A. M. K. and Chen, C.-H., </author> <title> "Efficient Response Time Bound Analysis of Real-Time Rule-Based Systems," </title> <booktitle> in Proc. IEEE COMPASS '92, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: It was shown in that paper that the determination of the response time for arbitrary programs is in general undecidable, and is PSPACE-hard for finite-state programs. Recently there have been several papers presenting efficient methods of computing response-time bounds for rule-based programs [5] <ref> [4] </ref> [11] [3]. However, none of those methods makes use of the rule-priority information in the program. Rule priority is a common feature in rule-based languages. It is used to constrain rule-firing order.
Reference: [5] <author> Cheng, A. M. K. and Wang, C.-K., </author> <title> "Fast Static Analysis of Real-Time Rule-Based Systems to Verify Their Fixed Point Convergence," </title> <booktitle> in Proc. IEEE COMPASS '90, </booktitle> <month> June </month> <year> 1990. </year>
Reference-contexts: It was shown in that paper that the determination of the response time for arbitrary programs is in general undecidable, and is PSPACE-hard for finite-state programs. Recently there have been several papers presenting efficient methods of computing response-time bounds for rule-based programs <ref> [5] </ref> [4] [11] [3]. However, none of those methods makes use of the rule-priority information in the program. Rule priority is a common feature in rule-based languages. It is used to constrain rule-firing order.
Reference: [6] <author> Garvey, A. and Lesser, V., </author> <booktitle> "A survey of Research in Deliberative Real-Time Artificial Intelligence," Real-Time Systems J., </booktitle> <volume> vol. 6, no. 3, </volume> <month> May </month> <year> 1994. </year>
Reference-contexts: Such computation must be completed sufficiently fast so that the system can react to environmental changes in a predictable fashion. The verification/validation of the behavior of rule-based programs is of both practical and theoretical interest. Related work in real-time AI systems can be found in [1] [7] [10] [9] <ref> [6] </ref>. fl The research reported herein is supported by the Office of Naval Research under grant number N00014-94-1-0582 and by a grant from the Texas Advanced Research Program.
Reference: [7] <author> Hendler, J. and Agrawala, A., </author> <title> "Mission Critical Planning: </title> <booktitle> AI on the MARUTI Real-Time Operating System," in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 77-84, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: Such computation must be completed sufficiently fast so that the system can react to environmental changes in a predictable fashion. The verification/validation of the behavior of rule-based programs is of both practical and theoretical interest. Related work in real-time AI systems can be found in [1] <ref> [7] </ref> [10] [9] [6]. fl The research reported herein is supported by the Office of Naval Research under grant number N00014-94-1-0582 and by a grant from the Texas Advanced Research Program.
Reference: [8] <author> Mok, A. K., </author> <title> "Formal Analysis of Real-Time Equational Rule-Based Systems," </title> <booktitle> in Proc. the 10th Real-Time Systems Symp., </booktitle> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: Related work in real-time AI systems can be found in [1] [7] [10] [9] [6]. fl The research reported herein is supported by the Office of Naval Research under grant number N00014-94-1-0582 and by a grant from the Texas Advanced Research Program. In <ref> [8] </ref>, the concept of a response time is defined for the equational rule-based program (EQL) by the (maximum) number of rule-firings before the program reaches a fixed point (a program state where all the program variables attain stable values).
Reference: [9] <author> Musliner, D. J., Durfee, E. H., and Shin, K. G., </author> <title> "CIRCA: A Cooperative Intelligent Real-Time Control Architecture," </title> <journal> IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> vol. 23, no. 6, </volume> <pages> pp. 1561-1574, </pages> <year> 1993. </year>
Reference-contexts: Such computation must be completed sufficiently fast so that the system can react to environmental changes in a predictable fashion. The verification/validation of the behavior of rule-based programs is of both practical and theoretical interest. Related work in real-time AI systems can be found in [1] [7] [10] <ref> [9] </ref> [6]. fl The research reported herein is supported by the Office of Naval Research under grant number N00014-94-1-0582 and by a grant from the Texas Advanced Research Program.
Reference: [10] <author> Paul, C. J., Acharya, A., Black, B. and Stros-nider, J. K., </author> <title> "Reducing Problem-Solving Variance to Improve Predictability," </title> <journal> CACM, </journal> <volume> vol. 34, no.8, </volume> <pages> pp. 81-93, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: Such computation must be completed sufficiently fast so that the system can react to environmental changes in a predictable fashion. The verification/validation of the behavior of rule-based programs is of both practical and theoretical interest. Related work in real-time AI systems can be found in [1] [7] <ref> [10] </ref> [9] [6]. fl The research reported herein is supported by the Office of Naval Research under grant number N00014-94-1-0582 and by a grant from the Texas Advanced Research Program.
Reference: [11] <author> Wang, R.-H., Mok, A. K., </author> <title> "Deriving Response-Time Bounds for Equational Rule-Based Programs," </title> <booktitle> in Proc. International Computer Symp., </booktitle> <address> Taiwan, R.O.C., </address> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: It was shown in that paper that the determination of the response time for arbitrary programs is in general undecidable, and is PSPACE-hard for finite-state programs. Recently there have been several papers presenting efficient methods of computing response-time bounds for rule-based programs [5] [4] <ref> [11] </ref> [3]. However, none of those methods makes use of the rule-priority information in the program. Rule priority is a common feature in rule-based languages. It is used to constrain rule-firing order. <p> With the presence of rule priorities, a program has fewer possible firing sequences, therefore possibly shorter response time, compared with the same program without rule priorities. In this paper, we address the rule-priority issue in computing response-time bounds. We show that the rule-suppression relation we previously introduced in <ref> [11] </ref> can be extended to incorporate rule-priority information. Since the rule-suppression relation is useful in deriving tighter bounds and rule priority can now be viewed as a form of rule suppression, making use of such information in bound derivation can result in tighter bounds. <p> The goal of our response-time analysis is to determine whether the response time of an EQL pro-gram is bounded, and if it is, to find a reasonably tight bound. In <ref> [11] </ref>, we introduced two rule relations, potential-trigger and suppression, which are useful in response-time bound derivation. We also presented an algorithm to compute a bound on program's response-time based on the two rule relations. The analysis in [11] does not make any assumption about how non-determinism is resolved in an execution, <p> In <ref> [11] </ref>, we introduced two rule relations, potential-trigger and suppression, which are useful in response-time bound derivation. We also presented an algorithm to compute a bound on program's response-time based on the two rule relations. The analysis in [11] does not make any assumption about how non-determinism is resolved in an execution, i.e., priority information is ignored. In the following we extend our previous results to incorporate rule-priority information. Proofs of some of the lemmas have been omitted for brevity. <p> Proof. The theorem follows from Corollary 2 and Lemma 16. 2 5 An analysis example Based on the bound-derivation algorithm in the previous section and the approximation conditions presented in <ref> [11] </ref>, we implemented a response-time analyzer for EQL programs with acyclic PT graphs. To demonstrate the analysis process we present the analysis example of the following contrived EQL program.
References-found: 11

