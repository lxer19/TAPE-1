URL: http://sctest.cse.ucsc.edu/papers/1992/ucsc-crl-92-42.ps
Refering-URL: http://www.cse.ucsc.edu/~larrabee/publications.html
Root-URL: http://www.cse.ucsc.edu
Title: Evidence for a Satisfiability Threshold for Random 3CNF Formulas  
Author: Tracy Larrabee Yumi Tsuji 
Keyword: backtracking, logic, reasoning, satisfiability, threshold behavior  
Note: 95064. Supported by NSF grant MIP-9158490.  Supported by NSF grant CCR-8958590.  
Address: Santa Cruz, CA 95064 USA  Santa Cruz, CA  Santa Cruz, CA 95064.  
Affiliation: Baskin Center for Computer Engineering Information Sciences University of California, Santa Cruz  Computer Engineering Board of Studies, University of California,  Computer and Information Sciences Board of Studies, University of California,  
Date: November 6, 1992  
Pubnum: UCSC-CRL-92-42  
Abstract: This paper presents empirical evidence of a satisfiability threshold in random 3CNF formulas. The paper also expands on and supports the conjecture of Mitchell, Selman, and Levesque [13] that hard randomly generated CNF formulas will be hard for any reasonable satisfiability algorithm. We report statistics for a much larger set of variables than have been previously reported; in particular, we show that for each clause to variable ratio less than 4.2, the percentage of satisfiable formulas increases, and for each clause to variable ratio greater than 4.2, the percentage of satisfiable formulas decreases as a function of number of variables. We found that several algorithms behaved qualitatively in the same fashion. We report on the relative performance of each algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Aspvall, M. Plass, and R. Tarjan. </author> <title> A linear-time algorithm for testing the truth of certain quantified boolean formulas. </title> <journal> Information Processing Letters, </journal> <volume> 8 </volume> <pages> 121-123, </pages> <year> 1979. </year>
Reference-contexts: The Second Algorithm Accordingly, we decided to use the 2SAT satisfier proposed by Aspvall, Tarjan, and Plass <ref> [1] </ref> in order to generate a satisfying assignment for a 3CNF expression. To summarize the method: if necessary we assign values to a few variables until we have a portion of the formula that is purely 2CNF.
Reference: [2] <author> B. Bollobas. </author> <title> Random Graphs. </title> <publisher> Academic Press, </publisher> <year> 1985. </year>
Reference-contexts: For most of this paper we will be concerned with random formulas containing clauses of size 3: random 3CNF formulas. It has long been conjectured that random formulas exhibit a threshold phenomenon, much like the threshold behavior of certain well-studied properties of random graphs (cf. Bollobas <ref> [2] </ref>). The precise formulation of this conjecture is that for every integer k &gt; 1, there is a constant c k such that a random k-CNF formula with the clause-to-variable ratio 2 3.
Reference: [3] <author> A. Broder, A. Frieze, and E. Upfal. </author> <title> On the satisfiability and maximum satisfiability of random 3-CNF formulae. </title> <booktitle> In Proceedings of Symposium on Discrete Algorithms, </booktitle> <year> 1993. </year>
Reference-contexts: Broder, Frieze, and Upfal have recently tightened the lower bound on c 3 to 1.63 <ref> [3] </ref>. Several researchers have conjectured that c 3 is somewhere around 4.
Reference: [4] <author> M. Chao and J Franco. </author> <title> Probabilistic analysis of two heuristics for the 3-satisfiability problem. </title> <journal> SIAM Journal of Computation, </journal> <volume> 15 </volume> <pages> 1106-1118, </pages> <year> 1986. </year> <note> References 9 </note>
Reference-contexts: Franco with Chao, Ho and Paull have published several papers over the last decade that have shown that c 3 must be at least 1 and c 3 must be no more than 5.2 <ref> [10, 4, 9, 5] </ref>. Broder, Frieze, and Upfal have recently tightened the lower bound on c 3 to 1.63 [3]. Several researchers have conjectured that c 3 is somewhere around 4.
Reference: [5] <author> V. Chvatal and B. Reeds. </author> <title> Nick gets some (the odds are on his side). </title> <booktitle> In Proceedings of the IEEE Symposium on the Foundations of Computer Science, </booktitle> <volume> volume 33, </volume> <year> 1992. </year>
Reference-contexts: Goerdt as well as Chvatal and Reed have proved this conjecture for the case k = 2 by establishing that c 2 = 1 <ref> [11, 5] </ref>. Franco with Chao, Ho and Paull have published several papers over the last decade that have shown that c 3 must be at least 1 and c 3 must be no more than 5.2 [10, 4, 9, 5]. <p> Franco with Chao, Ho and Paull have published several papers over the last decade that have shown that c 3 must be at least 1 and c 3 must be no more than 5.2 <ref> [10, 4, 9, 5] </ref>. Broder, Frieze, and Upfal have recently tightened the lower bound on c 3 to 1.63 [3]. Several researchers have conjectured that c 3 is somewhere around 4.
Reference: [6] <author> M. Davis, G. Logemann, and D. Loveland. </author> <title> A machine program for theorem-proving. </title> <journal> Communications of the Association for Computing Machinery, </journal> <volume> 5 </volume> <pages> 394-397, </pages> <year> 1962. </year>
Reference-contexts: Van Gelder [14]; it will be presented in three different forms, which will be called VG-normal, VG-dp, and VG-mis. They all include the basic Davis-Putnam rules (unit clause and pure literal) as originally described [7] and the implementation of the backtracking techniques described by Davis, Logemann, and Loveland <ref> [6] </ref>. The major difference among the three forms is in the strategy for selecting branch variables when the splitting rule is applied resulting in 4 4. The First Algorithm effectively three different algorithms. * VG-normal: The full algorithm described by Van Gelder [14].
Reference: [7] <author> M. Davis and H. Putman. </author> <title> A computing procedure for quantification theory. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 7 </volume> <pages> 201-215, </pages> <year> 1960. </year>
Reference-contexts: Van Gelder [14]; it will be presented in three different forms, which will be called VG-normal, VG-dp, and VG-mis. They all include the basic Davis-Putnam rules (unit clause and pure literal) as originally described <ref> [7] </ref> and the implementation of the backtracking techniques described by Davis, Logemann, and Loveland [6]. The major difference among the three forms is in the strategy for selecting branch variables when the splitting rule is applied resulting in 4 4.
Reference: [8] <author> F. J. Ferguson and T. Larrabee. </author> <title> Test pattern generation for realistic bridge faults in CMOS ICs. </title> <booktitle> In Proceedings of International Test Conference, </booktitle> <pages> pages 492-499. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: Having observed this phenomenon, we tried all of our algorithms on four very difficult, very large (2500 variables and 8000 clauses) CNF formulas representing the legal test sets for detecting bridge faults in CMOS ICs <ref> [8] </ref>. The four formulas each caused the test pattern generation system to "time out" when attempting to generate a test (or prove that no test existed).
Reference: [9] <author> J Franco and Y. Ho. </author> <title> Probabilistic performance of a heuristic for the satisfiability problem. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 22 </volume> <pages> 35-51, </pages> <year> 1989. </year>
Reference-contexts: Franco with Chao, Ho and Paull have published several papers over the last decade that have shown that c 3 must be at least 1 and c 3 must be no more than 5.2 <ref> [10, 4, 9, 5] </ref>. Broder, Frieze, and Upfal have recently tightened the lower bound on c 3 to 1.63 [3]. Several researchers have conjectured that c 3 is somewhere around 4.
Reference: [10] <author> J. Franco and M. Paull. </author> <title> Probabilistic analysis of the Davis-Putnam procedure for solving the satisfiability problem. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 5 </volume> <pages> 77-87, </pages> <year> 1983. </year>
Reference-contexts: Franco with Chao, Ho and Paull have published several papers over the last decade that have shown that c 3 must be at least 1 and c 3 must be no more than 5.2 <ref> [10, 4, 9, 5] </ref>. Broder, Frieze, and Upfal have recently tightened the lower bound on c 3 to 1.63 [3]. Several researchers have conjectured that c 3 is somewhere around 4.
Reference: [11] <author> A. Goerdt. </author> <title> A threshold for unsatisfiability. </title> <booktitle> In Proceedings of the International Symposium on Mathematical Foundations of Computer Science, </booktitle> <month> August </month> <year> 1992. </year>
Reference-contexts: Goerdt as well as Chvatal and Reed have proved this conjecture for the case k = 2 by establishing that c 2 = 1 <ref> [11, 5] </ref>. Franco with Chao, Ho and Paull have published several papers over the last decade that have shown that c 3 must be at least 1 and c 3 must be no more than 5.2 [10, 4, 9, 5].
Reference: [12] <author> T. Larrabee. </author> <title> Test pattern generation using Boolean satisfiability. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <pages> pages 6-22, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: two versions, VG-mis and VG-dp, with the similar qualitative result; VG-normal performed, on the average, two times faster than VG-mis, while VG-mis performed, on the average, ten times faster than VG-dp. 5 The Second Algorithm Our second satisfiability algorithm is part of Nemesis, a successful Automatic Test Pattern Generation system <ref> [12] </ref>. Nemesis generates a Boolean formula that includes all the constraints that must be satisfied in order to generate a test pattern for a particular fault in a circuit, and then it satisfies the resultant formula. <p> Random Versus Non-random Formulas 7 from 4.2 to 4.5. In general, we also observed that the Nemesis algorithm, the largest average time for a given n is twice the time of n 10. For further details, see the description of the Nemesis ATPG system <ref> [12] </ref>. 6 Random Versus Non-random Formulas We have also applied these algorithms to a certain set of structured non-clausal formulas derived from cycle-covering problems 1 provided us by Dan Pehoushek of Stanford University.
Reference: [13] <author> D. Mitchell, B. Selman, and H. Levesque. </author> <title> Hard and easy distributions of SAT problems. </title> <booktitle> In Proceedings of AAAI, </booktitle> <year> 1992. </year>
Reference-contexts: Applications of satisfiability include program and machine verification, and many aspects of VLSI design and test. In comparing satisfiability algorithms, it is important to agree on what family of instance distributions to consider and how to parameterize the varying degree of difficulty across the distributions. Mitchell, Selman, and Levesque <ref> [13] </ref>, among others, have pointed out that the ratio of the number of clauses to the number of variables could be used as a parameter to characterize difficulty levels for the random k-CNF problems. <p> As the number of variables is increased (up to n = 170), the threshold behavior at formulas with 4:2n clauses becomes more and more sharply pronounced. Mitchell, Selman, and Levesque have recently reported similar empirical results for much smaller values of n (n = 50) <ref> [13] </ref>. * All of the curves (showing the percentage of random formulas satisfiable as the number of clauses is increased from 3:6n to 5:2n) go through the point (4:2; 68% 3%). <p> In summary, VG-normal as applied to clausal formulas employs unit-clause and pure-literal rules. It also selects branch variables dynamically according to its own scoring scheme, which weights the variables. * VG-dp: VG-normal degraded to simulate the Davis-Putnam like procedure used by Mitchell, Selman, and Levesque <ref> [13] </ref>. * VG-mis: VG-normal with a new branch-variable selection criterion; it transforms the input formula guided by a scheme using an algorithm which finds maximal inde pendent set among the variables with certain properties. As the only variation that has not be fully detailed before, we describe VG-mis below. <p> The time varies from less than 10 seconds at either end of the graph to almost 45 minutes at the "hard-spot", which is centered around 4.3. This result is consistent with that reported by Mitchell, et al. <ref> [13] </ref>, which reported number of recursive calls instead of CPU time. The graphs for each size n that we have investigated has the same basic shape, though the extreme in cpu time for formulas with a given number of variables has occurred 6. <p> We also appreciate the personal interaction with and programs received from Dr. Selman; we used the same random formula generator as was used by Mitchell, Selman, and Levesque <ref> [13] </ref>, and we were also able to do a consistency check between our results and theirs by running their algorithm directly on our machines. We are indebted to Allen Van Gelder for initially suggesting the "maximal independent set" strategy as a new branching strategy to his original algorithm.
Reference: [14] <author> A. Van Gelder. </author> <title> A satisfiability tester for non-clausal propositional calculus. </title> <journal> Information and Computation, </journal> <volume> 79, </volume> <month> October </month> <year> 1988. </year>
Reference-contexts: We see this as experimental evidence that the value of c 3 is very close to 4.2. 4. The First Algorithm 3 4 The First Algorithm Our first algorithm will be referred to herein as VG as it was developed by A. Van Gelder <ref> [14] </ref>; it will be presented in three different forms, which will be called VG-normal, VG-dp, and VG-mis. They all include the basic Davis-Putnam rules (unit clause and pure literal) as originally described [7] and the implementation of the backtracking techniques described by Davis, Logemann, and Loveland [6]. <p> The major difference among the three forms is in the strategy for selecting branch variables when the splitting rule is applied resulting in 4 4. The First Algorithm effectively three different algorithms. * VG-normal: The full algorithm described by Van Gelder <ref> [14] </ref>. In summary, VG-normal as applied to clausal formulas employs unit-clause and pure-literal rules.
References-found: 14

