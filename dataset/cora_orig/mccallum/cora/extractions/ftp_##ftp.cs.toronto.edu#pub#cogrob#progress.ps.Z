URL: ftp://ftp.cs.toronto.edu/pub/cogrob/progress.ps.Z
Refering-URL: 
Root-URL: 
Email: email: @ai.toronto.edu reiter@ai.toronto.edu  
Title: How to Progress a Database  
Author: Fangzhen Lin and Ray Reiter 
Web: http://www.cs.toronto.edu/~cogrobo/  
Address: Toronto, Canada M5S 1A4  
Affiliation: Department of Computer Science University of Toronto  
Abstract: One way to think about STRIPS is as a mapping from databases to databases, in the following sense: Suppose we want to know what the world would be like if an action, represented by the STRIPS operator ff, were done in some world, represented by the STRIPS database D 0 . To find out, simply perform the operator ff on D 0 (by applying ff's elementary add and delete revision operators to D 0 ). We describe this process as progressing the database D 0 in response to the action ff. In this paper, we consider the general problem of progressing an initial database in response to a given sequence of actions. We appeal to the situation calculus and an axiomatization of actions which addresses the frame problem (Reiter [21]). This setting is considerably more general than STRIPS. Our results concerning progression are mixed. The (surprising) bad news is that, in general, to characterize a progressed database we must appeal to second order logic. The good news is that there are many useful special cases for which we can compute the progressed database in first order logic; not only that, we can do so efficiently. Finally, we relate these results about progression to STRIPS-like systems by providing a semantics for such systems in terms of a purely declarative situation calculus axiomatization for actions and their effects. On our view, STRIPS is a mechanism for computing the progression of an initial situation calculus database under the effects of an action. We illustrate this idea by describing two different STRIPS mechanisms, and proving their correctness with respect to their situation calculus specifications. fl This paper revises, and combines, results that first appeared in Lin and Reiter [12, 14]. y Fellow of the Canadian Institute for Advanced Research 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul. </author> <title> Updates, a new frontier. </title> <booktitle> In Second International Conference on Database Theory, </booktitle> <pages> pages 1-18, </pages> <address> New York, 1988. </address> <publisher> Springer. </publisher>
Reference-contexts: Unfortunately, regression suffers from a number of drawbacks in this application: 1. After the robot has been functioning for a long period, the sequence A, con 1 This is also the way that database practitioners think about database updates (Abiteboul <ref> [1] </ref>). In fact, the STRIPS action and the database update paradigms are essentially the same. Accordingly, this paper is as much about database updates as it is about STRIPS actions and their generalizations.
Reference: [2] <author> F. Bacchus and Q. Yang. </author> <title> Downward refinement and the efficiency of hierarchical problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 71(1) </volume> <pages> 41-100, </pages> <year> 1994. </year> <month> 39 </month>
Reference-contexts: There have been many proposals in the literature (e.g. Lifschitz [11], Erol, Nau and Subrahmanian [4], Bacchus and Yang <ref> [2] </ref>). These all have in common a reliance on meta-theoretic operations on logical theories to capture the add and delete lists of STRIPS operators, but it has never been clear exactly what these operations correspond to declaratively, especially when they are applied to logically incomplete theories.
Reference: [3] <author> E. W. Dijkstra and C. S. Scholten. </author> <title> Predicate Calculus and Program Semantics. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: If D S ff j= ', then D j= ' by Proposition 4.1. This theorem informs us that D S ff is a strongest post-condition (cf. Pednault [16], Dijkstra and Scholten <ref> [3] </ref>, and others) of the pre-condition D S 0 with respect to the action ff. Pednault [16] shows that his definition of progression cannot in general be a finite set of first-order sentences in L S ff . By Theorem 1, this result applies to our definition as well.
Reference: [4] <author> K. Erol, D. Nau, and V. Subrahmanian. </author> <title> On the complexity of domain-independent planning. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence (AAAI-92), </booktitle> <pages> pages 381-386. </pages> <booktitle> The American Association for Artificial Intelligence, </booktitle> <address> Menlo Park, CA, </address> <year> 1992. </year>
Reference-contexts: There have been many proposals in the literature (e.g. Lifschitz [11], Erol, Nau and Subrahmanian <ref> [4] </ref>, Bacchus and Yang [2]). These all have in common a reliance on meta-theoretic operations on logical theories to capture the add and delete lists of STRIPS operators, but it has never been clear exactly what these operations correspond to declaratively, especially when they are applied to logically incomplete theories.
Reference: [5] <author> O. Etzioni, S. Hanks, D. Weld, D. Draper, N. Lesh, and M. Williamson. </author> <title> An approach to planning with incomplete information. </title> <booktitle> In Proceedings of the Third International Conference on Principles of Knowledge Representation and Reasoning (KR'92), </booktitle> <pages> pages 115 - 125, </pages> <year> 1992. </year>
Reference-contexts: One such case concerns actions with finitary effects, namely, when for every fluent, the action changes the fluent's truth value at only a finite number of instances. This and other special cases of progression need to be explored. In this connection, Etzioni et al <ref> [5] </ref> have recently proposed an extension of STRIPS to accommodate sensing actions, i.e. actions that obtain (at plan execution time) information about the world.
Reference: [6] <author> R. E. Fikes and N. J. Nilsson. </author> <title> STRIPS: A new approach to theorem proving in problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year>
Reference-contexts: In fact, a result by Pednault [16] shows that for context-free actions and arbitrary D S 0 , progression is not always guaranteed to yield finite first-order theories. 7 STRIPS Ever since STRIPS was first introduced (Fikes and Nilsson <ref> [6] </ref>), its logical semantics has been problematic. There have been many proposals in the literature (e.g. Lifschitz [11], Erol, Nau and Subrahmanian [4], Bacchus and Yang [2]).
Reference: [7] <author> S. C. Kleene. </author> <title> Mathematical Logic. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1967. </year>
Reference-contexts: We now show that there is a model M 1 of D such that for any sentence ' in L S A , M 1 j= ' iff M 2 j= '. By Skolem's theorem (cf. Kleene <ref> [7] </ref>, page 326), there is a first-order structure M fl such that for any sentence ' in L S A , M 2 j= ' iff M fl j= ', and (M 2 ; 0; succ) and (M fl ; 0; succ) are not isomorphic, i.e., M 2 and M fl
Reference: [8] <author> Y. Lesperance, H. Levesque, F. Lin, D. Marcu, R. Reiter, and R. Scherl. </author> <title> Foundations of a logical approach to agent programming. </title> <editor> In M. Wooldridge, J. Muller, and M. Tambe, editors, </editor> <booktitle> Intelligent Agents Volume II Proceedings of the 1995 Workshop on Agent Theories, Architectures, and Languages (ATAL-95), </booktitle> <pages> pages 331-346. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1996. </year>
Reference: [9] <author> H. Levesque. </author> <title> What is planning in the presence of sensing? Technical report, </title> <institution> Dept. of Computer Science, Univ. of Toronto, </institution> <year> 1995. </year>
Reference-contexts: This and other special cases of progression need to be explored. In this connection, Etzioni et al [5] have recently proposed an extension of STRIPS to accommodate sensing actions, i.e. actions that obtain (at plan execution time) information about the world. As Levesque <ref> [9] </ref> has observed, the resulting planner suffers from a number of limitations and drawbacks, stemming primarily from the lack of a declarative specification of their system. As it happens, a situation calculus account of sensing actions already exists (Scherl and Levesque [25]).
Reference: [10] <author> H. Levesque, R. Reiter, Y. Lesperance, F. Lin, and R. Scherl. GOLOG: </author> <title> A logic programming language for dynamic domains. </title> <journal> Journal of Logic Programming, </journal> <note> Special issue on Reasoning about Action and Change, To appear. </note>
Reference: [11] <author> V. Lifschitz. </author> <title> On the semantics of STRIPS. </title> <booktitle> In Reasoning about Actions and Plans: Proceedings of the 1986 Workshop, </booktitle> <pages> pages 1-9. </pages> <publisher> Morgan Kauffmann Publishers, Inc., </publisher> <address> 1986. June 30-July 2, Timberline, Oregon. </address>
Reference-contexts: There have been many proposals in the literature (e.g. Lifschitz <ref> [11] </ref>, Erol, Nau and Subrahmanian [4], Bacchus and Yang [2]). <p> ADL, Pednault's generalization of STRIPS, is just such a mapping between structures. For us, as for Lifschitz <ref> [11] </ref>, STRIPS is a mapping from first order theories to (possibly second order) theories, where this mapping is effected by add and delete lists of sentences applied to the theory.
Reference: [12] <author> F. Lin and R. Reiter. </author> <title> How to progress a database (and why) I. </title> <booktitle> Logical foundations. In Proceedings of the Fourth International Conference on Principles of Knowledge Representation and Reasoning (KR'94), </booktitle> <pages> pages 425-436, </pages> <year> 1994. </year>
Reference: [13] <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <journal> Journal of Logic and Computation, Special Issue on Actions and Processes, </journal> <volume> 4(5) </volume> <pages> 655-678, </pages> <year> 1994. </year>
Reference-contexts: In this paper, we consider the general problem of progressing an initial database in response to a given sequence of actions. We appeal to the situation calculus and an axiomatization of actions which addresses the frame problem (Reiter [21], Lin and Reiter <ref> [13] </ref>). This setting is considerably more general than STRIPS. Our results concerning progression are mixed. The (surprising) bad news is that, in general, to characterize a progressed database we must appeal to second order logic. <p> We denote by L 2 the second-order extension of L. Our foundational axioms for the situation calculus will be in L 2 (Lin and Reiter <ref> [13] </ref>), because we need induction on situations (Reiter [22]). Often, we must restrict the situation calculus to a particular situation. <p> Reiter [23] and Lin and Reiter <ref> [13] </ref>): D = [ D ss [ D ap [ D una [ D S 0 ; where * , given below, is the set of the foundational axioms for situations. 4 * D ss is a set of successor state axioms of the form: 2 P oss (a; s) [F
Reference: [14] <author> F. Lin and R. Reiter. </author> <title> How to progress a database II: The STRIPS connection. </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence (IJCAI-95), </booktitle> <publisher> IJCAI Inc. Distributed by Morgan Kaufmann, </publisher> <address> San Mateo, CA., </address> <pages> pages 2001-2007, </pages> <year> 1995. </year>
Reference: [15] <editor> F. Lin and R. Reiter. Forget it! In R. Greiner and D. Subramanian, editors, </editor> <booktitle> Working Notes of AAAI Fall Symposium on Relevance, </booktitle> <pages> pages 154-159. </pages> <booktitle> The American Association for Artificial Intelligence, </booktitle> <address> Menlo Park, CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: This view of progression leads to an interesting notion of what it means for a knowledge base to forget about some of its contents that is investigated further in (Lin and Reiter <ref> [15] </ref>). Acknowledgements For their generous advice and feedback, we wish to thank the other members of the University of Toronto Cognitive Robotics Group: Yves Lesperance, Hector Levesque, Daniel Marcu, and Richard Scherl.
Reference: [16] <author> E. P. Pednault. </author> <title> Toward a Mathematical Theory of Plan Synthesis. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering, Stanford University, Stanford, </institution> <address> CA, </address> <year> 1986. </year>
Reference-contexts: To find out, simply perform the operator ff on D 0 (by applying ff's elementary add and delete revision operators to D 0 ). We describe this process as progressing the database D 0 in response to the action ff (cf. Rosenschein [24] and Pednault <ref> [16] </ref>). The resulting database describes the effects of the action on the world represented by the initial database. 1 However, it may not always be convenient or even possible to describe the effects of actions as a simple process of progressing an initial world description. <p> If D S ff j= ', then D j= ' by Proposition 4.1. This theorem informs us that D S ff is a strongest post-condition (cf. Pednault <ref> [16] </ref>, Dijkstra and Scholten [3], and others) of the pre-condition D S 0 with respect to the action ff. Pednault [16] shows that his definition of progression cannot in general be a finite set of first-order sentences in L S ff . <p> If D S ff j= ', then D j= ' by Proposition 4.1. This theorem informs us that D S ff is a strongest post-condition (cf. Pednault <ref> [16] </ref>, Dijkstra and Scholten [3], and others) of the pre-condition D S 0 with respect to the action ff. Pednault [16] shows that his definition of progression cannot in general be a finite set of first-order sentences in L S ff . By Theorem 1, this result applies to our definition as well. <p> In view of this, one may wonder why we did not define progression to be the set of first-order sentences in L S ff entailed by D. Indeed, this is basically what Pednault did <ref> [16] </ref>, and will, by definition, side step our negative result that in general, progression cannot be captured in first-order logic. There are several reasons why we did not do this. First, such a definition is purely syntactic, and hence has an arbitrary quality to it. <p> We emphasize that the results of this section depend on the fact that the initial database has a certain specific form. In fact, a result by Pednault <ref> [16] </ref> shows that for context-free actions and arbitrary D S 0 , progression is not always guaranteed to yield finite first-order theories. 7 STRIPS Ever since STRIPS was first introduced (Fikes and Nilsson [6]), its logical semantics has been problematic. There have been many proposals in the literature (e.g. <p> D: on (X; Y ). A: clear (X); clear (Y ); ontable (X). 8.3 Pednault's ADL The only prior literature similar to our progression semantics for STRIPS-like systems is by Pednault ([18], <ref> [16] </ref>). Like us, Pednault relates a STRIPS database to the initial 36 situation of a situation calculus axiomatization. But our interpretation of such a database, namely as a situation-suppressed situation calculus theory, distinguishes our approach from Pednault's, in which these databases are first order structures. <p> In both cases, we gave efficient procedures for computing the progression. On the other hand, as Pednault has shown <ref> [16] </ref>, even for context free successor state axioms, when the initial database is an 37 arbitrary finite first order theory, progression need not be finitely first-order axiomatizable. 4.
Reference: [17] <author> E. P. Pednault. </author> <title> Synthesizing plans that contain actions with context-dependent effects. </title> <journal> Computational Intelligence, </journal> <volume> 4 </volume> <pages> 356-372, </pages> <year> 1988. </year>
Reference-contexts: This can be done using regression (cf. Waldinger [27], Pednault <ref> [17] </ref>, and Reiter [21]) to reduce the projection problem to one of entailment from the initial database, consisting of sentences about the initial situation S 0 . Unfortunately, regression suffers from a number of drawbacks in this application: 1.
Reference: [18] <author> E. P. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <booktitle> In Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning (KR'89), </booktitle> <pages> pages 324-332. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1989. </year>
Reference-contexts: The consistency condition (14) deserves a brief explanation. Following Pednault <ref> [18] </ref> and Schubert [26], Reiter [21] provides a solution to the frame problem in the absence of state constraints which syntactically transforms a pair of effect axioms for a given fluent F into a successor state axiom for F . <p> This can indeed be done, and an appropriate semantics defined in terms of a situation calculus axiomatization that relaxes the context free restriction on successor state axioms of Section 8.2. In this connection, Pednault's ADL <ref> [18] </ref> provides for just such a generalized relational STRIPS, but without the rela tional algebra. 4. In a sense, progressing a database to S ff amounts to forgetting about the initial situation and all those situations that are reachable from S 0 but not from S ff .
Reference: [19] <author> P. Peppas, N. Foo, and M.-A. Williams. </author> <title> On the expressibility of propositions. </title> <journal> Logique et Analyse, </journal> <pages> pages 251-272, </pages> <note> 1992 (Vol 139-140). </note>
Reference-contexts: Secondly, Peppas et al <ref> [19] </ref> show that, for quite general action theories, progression defined in terms of first order entailments, may lose information, in the sense that a first-order sentence about a future situation of S ff may be a consequence of D but not of (D D S 0 ) [ D S ff
Reference: [20] <author> R. Reiter. </author> <title> Towards a logical reconstruction of relational database theory. </title> <editor> In M. Brodie, J. Mylopoulos, and J. Schmidt, editors, </editor> <booktitle> On Conceptual Modelling: Perspectives from artificial intelligence, databases and programming languages, </booktitle> <pages> pages 191-233. </pages> <publisher> Springer, </publisher> <address> New York, </address> <year> 1984. </year>
Reference-contexts: This, we claim, is what some versions of STRIPS do (but suppressing the situation argument). This is also what relational databases do; in fact, the unique names assumption together with the condition (21) on D S 0 are the defining properties for a relational database (Reiter <ref> [20] </ref>).
Reference: [21] <author> R. Reiter. </author> <title> The frame problem in the situation calculus: a simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In V. Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 418-420. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: In this paper, we consider the general problem of progressing an initial database in response to a given sequence of actions. We appeal to the situation calculus and an axiomatization of actions which addresses the frame problem (Reiter <ref> [21] </ref>, Lin and Reiter [13]). This setting is considerably more general than STRIPS. Our results concerning progression are mixed. The (surprising) bad news is that, in general, to characterize a progressed database we must appeal to second order logic. <p> This can be done using regression (cf. Waldinger [27], Pednault [17], and Reiter <ref> [21] </ref>) to reduce the projection problem to one of entailment from the initial database, consisting of sentences about the initial situation S 0 . Unfortunately, regression suffers from a number of drawbacks in this application: 1. <p> D ss is a set of context-free successor state axioms. 4. ff is a ground action term, and is possible initially: D j= P oss (ff; S 0 ). 5. For each fluent F , the following consistency condition (Reiter <ref> [21] </ref>) is satisfied: D ap [ D una j= :(9~x; a; s):P oss (a; s) ^ fl + F (~x; a); (14) where F 's successor state axiom has the form (12). The consistency condition (14) deserves a brief explanation. Following Pednault [18] and Schubert [26], Reiter [21] provides a solution <p> consistency condition (Reiter <ref> [21] </ref>) is satisfied: D ap [ D una j= :(9~x; a; s):P oss (a; s) ^ fl + F (~x; a); (14) where F 's successor state axiom has the form (12). The consistency condition (14) deserves a brief explanation. Following Pednault [18] and Schubert [26], Reiter [21] provides a solution to the frame problem in the absence of state constraints which syntactically transforms a pair of effect axioms for a given fluent F into a successor state axiom for F . <p> It is a completely mechanical process to obtain the OCF-STRIPS operators from the action precondition and successor state axioms of a situation calculus axiomatization of some domain. Similarly for RCF-STRIPS. In other words, these purely declarative situation calculus specifications can be compiled into appropriate STRIPS systems. Moreover, Reiter's <ref> [21] </ref> solution to the frame problem provides an algorithm for computing the successor state axioms from the effect axioms specifying the causal laws of the domain being modeled.
Reference: [22] <author> R. Reiter. </author> <title> Proving properties of states in the situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 64 </volume> <pages> 337-351, </pages> <year> 1993. </year>
Reference-contexts: We denote by L 2 the second-order extension of L. Our foundational axioms for the situation calculus will be in L 2 (Lin and Reiter [13]), because we need induction on situations (Reiter <ref> [22] </ref>). Often, we must restrict the situation calculus to a particular situation. For example, the initial database is a finite set of sentences in L that do not mention any situation terms except S 0 , and do not mention P oss and &lt;. <p> Next, let the domain dom M sit for the sort situation be the smallest subset of the situation domain of M such that: 1. S M sit . 3 For a discussion of the use of induction in the situation calculus, see (Reiter <ref> [22] </ref>). 4 M; - j= ' means that M satisfies ' under the variable assignment -. 6 2. If 2 dom M sit and if ff is an element of the action domain of M , then do M (ff; ) 2 sit .
Reference: [23] <author> R. Reiter. </author> <title> On specifying database updates. </title> <journal> Journal of Logic Programming, </journal> <volume> 25(1) </volume> <pages> 53-91, </pages> <year> 1995. </year>
Reference-contexts: In fact, the STRIPS action and the database update paradigms are essentially the same. Accordingly, this paper is as much about database updates as it is about STRIPS actions and their generalizations. For more on the database perspective, see Reiter <ref> [23] </ref>. 2 sisting of all the actions it has performed since the initial situation, has become extremely long, and regressing over such a sequence becomes computationally expensive. 2. <p> Reiter <ref> [23] </ref> and Lin and Reiter [13]): D = [ D ss [ D ap [ D una [ D S 0 ; where * , given below, is the set of the foundational axioms for situations. 4 * D ss is a set of successor state axioms of the form: 2 <p> The conditions of the proposition follow from the properties of M . The following is an example of a basic action theory. Example 3.1 An educational database (Reiter <ref> [23] </ref>). There are two fluents: * enrolled (st; course; s): student st is enrolled in course course in situation s. * grade (st; course; grade; s): the grade of st in course is grade in situation s.
Reference: [24] <author> S. J. Rosenschein. </author> <title> Plan synthesis: A logical perspective. </title> <booktitle> In Proceedings of IJCAI 7, </booktitle> <pages> pages 331-337, </pages> <year> 1981. </year>
Reference-contexts: To find out, simply perform the operator ff on D 0 (by applying ff's elementary add and delete revision operators to D 0 ). We describe this process as progressing the database D 0 in response to the action ff (cf. Rosenschein <ref> [24] </ref> and Pednault [16]). The resulting database describes the effects of the action on the world represented by the initial database. 1 However, it may not always be convenient or even possible to describe the effects of actions as a simple process of progressing an initial world description.
Reference: [25] <author> R. Scherl and H. Levesque. </author> <title> The frame problem and knowledge-producing actions. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence (AAAI-93), </booktitle> <publisher> AAAI Press, </publisher> <address> Menlo Park, CA., </address> <year> 1993. </year>
Reference-contexts: Similarly, after a long while, the initial world state often becomes so rearranged that significantly many final steps of the regression become entirely unnecessary. 3. Most significantly, for robotics, perceptual actions (Scherl and Levesque <ref> [25] </ref>) lead to new facts being added to the database. But such facts are true in the current situation the one immediately following the perceptual action whereas the other (old) database facts are true in S 0 . <p> As Levesque [9] has observed, the resulting planner suffers from a number of limitations and drawbacks, stemming primarily from the lack of a declarative specification of their system. As it happens, a situation calculus account of sensing actions already exists (Scherl and Levesque <ref> [25] </ref>). Accordingly, it should be possible to incorporate sensing actions into our notion of progression, and use this to generalize STRIPS to 38 include such actions.
Reference: [26] <author> L. K. Schubert. </author> <title> Monotonic solution to the frame problem in the situation calculus: an efficient method for worlds with fully specified actions. </title> <editor> In H. Kyberg, R. Loui, and G. Carlson, editors, </editor> <booktitle> Knowledge Representation and Defeasible Reasoning, </booktitle> <pages> pages 23-67. </pages> <publisher> Kluwer Academic Press, </publisher> <address> Boston, MA, </address> <year> 1990. </year> <month> 41 </month>
Reference-contexts: The consistency condition (14) deserves a brief explanation. Following Pednault [18] and Schubert <ref> [26] </ref>, Reiter [21] provides a solution to the frame problem in the absence of state constraints which syntactically transforms a pair of effect axioms for a given fluent F into a successor state axiom for F . <p> The effect axioms are assumed to have the syntactic forms: 6 P oss (a; s) ^ fl + and F (~x; a; s) :F (~x; do (a; s)): 6 In general, fl + F and fl F may be situation dependent. 23 Reiter applies the explanation closure idea of Schubert <ref> [26] </ref> to obtain the following frame axioms for F : P oss (a; s) ^ :F (~x; s) ^ F (~x; do (a; s)) fl + P oss (a; s) ^ F (~x; s) ^ :F (~x; do (a; s)) fl The successor state axiom P oss (a; s) F (~x;
Reference: [27] <author> R. Waldinger. </author> <title> Achieving several goals simultaneously. </title> <editor> In E. Elcock and D. Michie, editors, </editor> <booktitle> Machine Intelligence, </booktitle> <pages> pages 94-136. </pages> <publisher> Ellis Horwood, Edinburgh, </publisher> <address> Scotland, </address> <year> 1977. </year> <month> 42 </month>
Reference-contexts: This can be done using regression (cf. Waldinger <ref> [27] </ref>, Pednault [17], and Reiter [21]) to reduce the projection problem to one of entailment from the initial database, consisting of sentences about the initial situation S 0 . Unfortunately, regression suffers from a number of drawbacks in this application: 1.
References-found: 27

