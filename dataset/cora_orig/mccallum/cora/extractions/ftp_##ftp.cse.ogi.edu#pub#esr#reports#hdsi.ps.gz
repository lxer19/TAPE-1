URL: ftp://ftp.cse.ogi.edu/pub/esr/reports/hdsi.ps.gz
Refering-URL: http://www.cse.ogi.edu/DISC/projects/tp/rpts-chrono.html
Root-URL: http://www.cse.ogi.edu
Email: Internet: calton@cs.columbia.edu  
Title: Asynchronous Transaction Processing with Epsilon-Serializability  
Author: Calton Pu 
Address: New York, NY 10027  
Affiliation: Department of Computer Science Columbia University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D. Barbara and H. Garcia-Molina. </author> <title> The case for controlled inconsistency in replicated data. </title> <booktitle> In Proceedings of the Workshop on Management of Replicated Data, </booktitle> <pages> pages 35-42, </pages> <address> Houston, </address> <month> November </month> <year> 1990. </year>
Reference-contexts: Similarly, other works in controlling inconsistency in asynchronous database systems include asynchronous replication <ref> [1] </ref> and eventual consistency [15], which have more specific applications. 2
Reference: [2] <author> P.A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> first edition, </address> <year> 1987. </year>
Reference-contexts: This happens when a transaction reads uncommitted data and sometimes is not allowed to provide the recoverability <ref> [2] </ref> property. In a large distributed TP system, the communications latency is aggravated by this synchronous nature of atomic transactions. In addition, the integration of a heterogeneous TP system would require translations between the different components that need to synchronize with each other.
Reference: [3] <author> P.K. Chrysanthis and K. Ramamritham. </author> <title> ACTA: A framework for specifying and reasoning about transaction structure and behavior. </title> <booktitle> In Proceedings of SIGMOD Conference on Management of Data, </booktitle> <pages> pages 194-203, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: In addition, we have also described some applications that require more autonomy in distributed TP than the allowed by classic serializability [13]. Currently, we are using the ACTA framework <ref> [3] </ref> to characterize ESR formally [14].
Reference: [4] <author> W. Du and A. Elmagarmid. </author> <title> Quasi serializability: a correctness criterion for global concur-rency control in InterBase. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases, </booktitle> <pages> pages 347-355, </pages> <address> Amsterdam, The Netherlands, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: Currently, we are using the ACTA framework [3] to characterize ESR formally [14]. ESR has three main advantages over previous "weak consistency" models such as locking levels [5] and quasi-serializability <ref> [4] </ref>: (1) ESR is a general framework, applicable to a wide range of application semantics; (2) ESR is upward-compatible, since it reduces to serializability as *-spec ! 0; and (3) a number of efficient algorithms support ESR.
Reference: [5] <author> J.N. Gray, R.A. Lorie, </author> <title> G.R. Putzolu, and I.L. Traiger. Granularity of locks and degrees of consistency in a shared data base. </title> <booktitle> In Proceedings of the IFIP Working Conference on Modeling of Data Base Management Systems, </booktitle> <pages> pages 1-29, </pages> <year> 1979. </year>
Reference-contexts: In addition, we have also described some applications that require more autonomy in distributed TP than the allowed by classic serializability [13]. Currently, we are using the ACTA framework [3] to characterize ESR formally [14]. ESR has three main advantages over previous "weak consistency" models such as locking levels <ref> [5] </ref> and quasi-serializability [4]: (1) ESR is a general framework, applicable to a wide range of application semantics; (2) ESR is upward-compatible, since it reduces to serializability as *-spec ! 0; and (3) a number of efficient algorithms support ESR.
Reference: [6] <author> T. Haerder and A. Reuter. </author> <title> Principles of transaction-oriented database recovery. </title> <journal> ACM Computing Surveys, </journal> <volume> 15(4) </volume> <pages> 287-317, </pages> <month> December </month> <year> 1983. </year>
Reference-contexts: 1 Introduction Traditional transaction processing (TP) requires each transaction to be atomic. This means that each transaction should happen entirely, when it commits, or not at all, when it aborts. ACID properties <ref> [6] </ref> imply that by the time a transaction commits, its results should be durable and fully visible to other transactions. Consequently, distributed TP systems have a synchronous flavor: * Synchronization is necessary for the uniform commitment of several subtransactions.
Reference: [7] <author> M. Hsu and A. Silberschatz. </author> <title> Persistent transmission and unilateral commit. </title> <booktitle> In Proceedings of the Workshop on Muldatabases and Semantic Interoperability, </booktitle> <pages> pages 48-52, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Some previous work has proposed solutions based on application 1 This research is partially supported by Oki Electric and NSF. 1 semantics and the idea of compensations. For example, the Unilateral Commit Proto--col [8] uses Persistent Pipes <ref> [7] </ref> to allow different subtransactions commit to be processed asynchronously. If the subtransaction commit has been decided beforehand without a distributed commit protocol, this protocol supports more concurrency than traditional TP. Another example is Optimistic Commit Protocol [10] used to implement Compensating Transactions [9].
Reference: [8] <author> M. Hsu and A. Silberschatz. </author> <title> Unilateral commit: A new paradigm for reliable distributed transaction processing. </title> <booktitle> In Proceedings of the Seventh International Conference on Data Engineering, </booktitle> <address> Kobe, Japan, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: Another example is that some uncommitted/aborted data may be seen by other transactions. Some previous work has proposed solutions based on application 1 This research is partially supported by Oki Electric and NSF. 1 semantics and the idea of compensations. For example, the Unilateral Commit Proto--col <ref> [8] </ref> uses Persistent Pipes [7] to allow different subtransactions commit to be processed asynchronously. If the subtransaction commit has been decided beforehand without a distributed commit protocol, this protocol supports more concurrency than traditional TP. Another example is Optimistic Commit Protocol [10] used to implement Compensating Transactions [9].
Reference: [9] <author> H. Korth, E. Levy, and A. Silberschatz. </author> <title> A formal approach to recovery by compensating transactions. </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Data Bases, </booktitle> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: If the subtransaction commit has been decided beforehand without a distributed commit protocol, this protocol supports more concurrency than traditional TP. Another example is Optimistic Commit Protocol [10] used to implement Compensating Transactions <ref> [9] </ref>. If the application semantics can use compensations to restore database consistency, this approach also improves TP performance oer traditional systems. 2 Epsilon Serializability We have introduced the notion of epsilon serializability (ESR) [11, 12, 13, 16] as a generalization of serializability used in traditional TP.
Reference: [10] <author> H. Korth, E. Levy, and A. Silberschatz. </author> <title> Optimistic commit in multidatabase systems. </title> <booktitle> In Proceedings of Workshop on Muldatabases and Semantic Interoperability, </booktitle> <pages> pages 65-69, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: For example, the Unilateral Commit Proto--col [8] uses Persistent Pipes [7] to allow different subtransactions commit to be processed asynchronously. If the subtransaction commit has been decided beforehand without a distributed commit protocol, this protocol supports more concurrency than traditional TP. Another example is Optimistic Commit Protocol <ref> [10] </ref> used to implement Compensating Transactions [9].
Reference: [11] <author> C. Pu. </author> <title> Generalized transaction processing with epsilon-serializability. </title> <booktitle> In Proceedings of Fourth International Workshop on High Performance Transaction Systems, Asilomar, </booktitle> <address> Cal-ifornia, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Another example is Optimistic Commit Protocol [10] used to implement Compensating Transactions [9]. If the application semantics can use compensations to restore database consistency, this approach also improves TP performance oer traditional systems. 2 Epsilon Serializability We have introduced the notion of epsilon serializability (ESR) <ref> [11, 12, 13, 16] </ref> as a generalization of serializability used in traditional TP. ESR explicitly allows some limited amount of inconsistency. Therefore, ESR can be used to model the inconsistency in asynchronous TP and provide efficient algorithms that are not explicitly dependent on application semantics.
Reference: [12] <author> C. Pu and A. Leff. </author> <title> Replica control in distributed systems: An asynchronous approach. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 377-386, </pages> <address> Denver, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Another example is Optimistic Commit Protocol [10] used to implement Compensating Transactions [9]. If the application semantics can use compensations to restore database consistency, this approach also improves TP performance oer traditional systems. 2 Epsilon Serializability We have introduced the notion of epsilon serializability (ESR) <ref> [11, 12, 13, 16] </ref> as a generalization of serializability used in traditional TP. ESR explicitly allows some limited amount of inconsistency. Therefore, ESR can be used to model the inconsistency in asynchronous TP and provide efficient algorithms that are not explicitly dependent on application semantics.
Reference: [13] <author> C. Pu and A. Leff. </author> <title> Autonomous transaction execution with epsilon-serializability. </title> <booktitle> In Proceedings of 1992 RIDE Workshop on Transaction and Query Processing, Phoenix, </booktitle> <month> February </month> <year> 1992. </year> <journal> IEEE/Computer Society. </journal>
Reference-contexts: Another example is Optimistic Commit Protocol [10] used to implement Compensating Transactions [9]. If the application semantics can use compensations to restore database consistency, this approach also improves TP performance oer traditional systems. 2 Epsilon Serializability We have introduced the notion of epsilon serializability (ESR) <ref> [11, 12, 13, 16] </ref> as a generalization of serializability used in traditional TP. ESR explicitly allows some limited amount of inconsistency. Therefore, ESR can be used to model the inconsistency in asynchronous TP and provide efficient algorithms that are not explicitly dependent on application semantics. <p> We have developed efficient algorithms to guarantee ESR, called divergence control algorithms [16] that are extensions of classic concurrency control algorithms. In addition, we have also described some applications that require more autonomy in distributed TP than the allowed by classic serializability <ref> [13] </ref>. Currently, we are using the ACTA framework [3] to characterize ESR formally [14].
Reference: [14] <author> K. Ramamrithan and C. Pu. </author> <title> A formal characterization of epsilon serializability. </title> <type> Technical Report Forthcoming, </type> <institution> Department of Computer Science, Columbia University, </institution> <year> 1991. </year>
Reference-contexts: In addition, we have also described some applications that require more autonomy in distributed TP than the allowed by classic serializability [13]. Currently, we are using the ACTA framework [3] to characterize ESR formally <ref> [14] </ref>.
Reference: [15] <author> A. Sheth, Yungho Leu, and Ahmed Elmagarmid. </author> <title> Maintaining consistency of interdependent data in multidatabase systems. </title> <type> Technical Report CSD-TR-91-016, </type> <institution> Computer Science Department, Purdue University, </institution> <month> March </month> <year> 1991. </year> <month> 3 </month>
Reference-contexts: Similarly, other works in controlling inconsistency in asynchronous database systems include asynchronous replication [1] and eventual consistency <ref> [15] </ref>, which have more specific applications. 2
Reference: [16] <author> K.L. Wu, P. S. Yu, and C. Pu. </author> <title> Divergence control for epsilon-serializability. </title> <booktitle> In Proceed--ings of Eighth International Conference on Data Engineering, Phoenix, </booktitle> <month> February </month> <year> 1992. </year> <journal> IEEE/Computer Society. </journal> <volume> 4 </volume>
Reference-contexts: Another example is Optimistic Commit Protocol [10] used to implement Compensating Transactions [9]. If the application semantics can use compensations to restore database consistency, this approach also improves TP performance oer traditional systems. 2 Epsilon Serializability We have introduced the notion of epsilon serializability (ESR) <ref> [11, 12, 13, 16] </ref> as a generalization of serializability used in traditional TP. ESR explicitly allows some limited amount of inconsistency. Therefore, ESR can be used to model the inconsistency in asynchronous TP and provide efficient algorithms that are not explicitly dependent on application semantics. <p> For example, ignoring a transfer of $500 would mean very little to the final result. Therefore, a query ET could specify an *-spec of $100,000 and execute without synchronization until the accumulated interference reaches the *-spec. We have developed efficient algorithms to guarantee ESR, called divergence control algorithms <ref> [16] </ref> that are extensions of classic concurrency control algorithms. In addition, we have also described some applications that require more autonomy in distributed TP than the allowed by classic serializability [13]. Currently, we are using the ACTA framework [3] to characterize ESR formally [14].
References-found: 16

