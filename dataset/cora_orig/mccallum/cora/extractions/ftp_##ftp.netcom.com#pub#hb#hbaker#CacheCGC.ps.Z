URL: ftp://ftp.netcom.com/pub/hb/hbaker/CacheCGC.ps.Z
Refering-URL: ftp://ftp.netcom.com/pub/hb/hbaker/home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: (818) 501-4956(818) 986-1360 (FAX)  
Title: Cache-Conscious Copying Collectors  
Author: Henry G. Baker 
Keyword: 2.Copying Garbage Collection  
Address: 16231 Meadow Ridge Way, Encino, CA 91436  
Affiliation: Nimble Computer Corporation,  
Note: Presented at GC'91 Workshop on Garbage Collection in ObjectOriented Systems at OOPSLA'91. 1991 Nimble Computer Corporation 1  1 I n t r o d u c t i o n  
Abstract: Garbage collectors must minimize the scarce resources of cache space and off-chip communications bandwidth to optimize performance on modern single-chip computer architectures. Strategies for achieving these goals in the context of copying garbage collection are discussed. A multiprocessor mutator/collector system is analyzed. Finally, the Intel 80860XP architecture is studied. The ubiquity of on-chip caches in modern processor architectures is forced by the increasing latency of on-chip memory relative to off-chip memory. Unfortunately, this latency is also accompanied by the restricted bandwidth of small pin-outs. As a result, the management of on-chip memory space and off-chip communications traffic has become the major problem in gaining fast execution times on these processors. Lam et al [Lam91] graphically demonstrate this issue for the problem of multiplying large matrices, where the measured performance of one processor was increased from 0.9 MFLOPS to 4 MFLOPS through the more careful management of these scarce resources. In other words, modern processor chips are no longer "CPU-bound", but "I/O-bound". Symbolic processing has always been more "I/O-bound" than "CPU-bound" because very few symbolic processing algorithms involve the heavy bittwiddling of floating-point arithmetic. Numeric processing with special-purpose floating-point hardware can also be "I/O-bound" [Lam91], and the traditional remedy is increased bandwidth to memory. Since the control structures of numeric programs tend to be quite oblivious to the actual data values, a programmer or compiler can utilize quite sophisticated prefetching strategies (e.g., vector registers) to ensure that the data is available when it is needed. This traditional strategy is no longer appropriate for today's limited bandwidth processors, hence the great interest in SIMD architectures in which the required bandwidth is spread over many memories and processors. Unfortunately, the control structures of symbolic processing programs tend to be extremely data-dependente.g., runtime method determination in objectoriented programming languagesand hence the potential for programmer-directed and compiler-directed prefetching strategies is limited. While the general problem of optimizing highspeed symbolic processing with modern chip technology is quite difficult, at least one portion of symbolic processing seems regular enough to be amenable to more sophisticated memory space and bandwidth management strategiesgarbage collection. Minsky is credited with the first copying garbage collector [Minsky63], Cheney with an elegant 2-space model [Cheney70], and Baker with a real-time version of Cheney's algorithm [Baker78]. Because the first garbage collector did not copy, and because a large fraction of implemented garbage collectors do not copy, it is important to review the pro's and con's of copying garbage collection. A non-copying garbage collector (NCGC) has the advantage of requiring less address space, because objects do not ever occupy two different locations at the same time. NCGC does not move objects behind the compiler's back, and so does not invalidate certain pointer register caching compiler optimizations [Chase87]. NCGC can be used in a "conservative" garbage collection environment because it is necessary to find only one pointer to each active object, instead of all 
Abstract-found: 1
Intro-found: 1
Reference: <author> Appel, Andrew W. </author> <title> "Garbage Collection Can Be Faster Than Stack Allocation". </title> <journal> Info. Proc. Let. </journal> <volume> 25 (1987),275-279. </volume>
Reference: <author> Appel, Andrew W.; Ellis, John R.; and Li, Kai. </author> <title> "Real-time concurrent garbage collection on stock multiprocessors". </title> <journal> ACM Prog. Lang. </journal> <note> Des. and Impl., June1988,11-20. </note>
Reference: <author> Appel, Andrew W. </author> <title> "Simple Generational Garbage Collection and Fast Allocation". Soft. </title> <address> Prac. & Exper. 19,2 (Feb.1989),171-183. </address>
Reference: <author> Appel, A.W., and Bendiksen, A. </author> <title> "Vectorized Garbage Collection". </title> <editor> J. </editor> <booktitle> Supercomputing 3 (1989),151-160. </booktitle>
Reference: <author> Baker, Henry G. </author> <title> "List Processing in Real Time on a Serial Computer". </title> <journal> CACM 21,4 (April1978), </journal> <pages> 280-294. </pages>
Reference: <author> Baker, Henry G. </author> <title> "The Paging Behavior of the Cheney List Copying Algorithm". </title> <type> Tech. </type> <institution> Rept., CS Dept., U. of Rochester, NY, </institution> <note> 1980; copies available from the author. </note>
Reference: <author> Baker, Henry G. </author> <title> "Unify and Conquer (Garbage, Updating, Aliasing, </title> ...) <booktitle> in Functional Languages". Proc. 1990 ACM Conf. on Lisp and Functional Progr., June1990, </booktitle> <pages> 218-226. </pages>
Reference: <author> Baker, Henry G. </author> <title> "CONS Should not CONS its Arguments, or, A Lazy Alloc is a Smart Alloc". </title> <journal> ACM Sigplan Not. 27,3 (March1992), </journal> <pages> 24-34. </pages>
Reference: <author> Baker, Henry G. </author> <title> "Equal Rights for Functional Objects or, The More Things Change, The More They Are the Same". </title> <journal> ACM OOPS Messenger 4,4 (Oct.1993), </journal> <pages> 2-27. </pages>
Reference: <author> Baker, Henry G. </author> <title> "The Treadmill: Real-Time Garbage Collection Without Motion Sickness". </title> <journal> ACM Sigplan Not. 27,3 (March1992), </journal> <pages> 66-70. </pages>
Reference: <author> Barbacci, M. </author> <title> "A LISP Processor for C.ai". Memo CMU-CS-71-103, </title> <address> CMU, Pittsburgh, </address> <year> 1971. </year>
Reference: <author> Bishop, P.B. </author> <title> Computer Systems with a very large address space and garbage collection. </title> <type> Ph.D. Thesis, </type> <institution> TR-178, MIT Lab. for Comp. Sci., Camb., </institution> <address> MA, May1977. </address>
Reference: <author> Boehm, Hans-J., and Demers, Alan. </author> <title> "Garbage Collection in an Uncooperative Environment". Soft. </title> <editor> Pract. & Exper. 18,9 (Sept.1988),807-820. </editor> <title> 5 This cache behavior means that high-level language compilers must not "optimize" away certain apparently redundant loads, which are used only to load the cache. </title> <booktitle> Presented at GC'91 Workshop on Garbage Collection in ObjectOriented Systems at OOPSLA'91. 1991 Nimble Computer Corporation 8 Chase, </booktitle> <editor> David. </editor> <title> "Garbage Collection and Other Optimizations". </title> <type> PhD Thesis, </type> <institution> Rice University Comp. Sci. Dept., Nov.1987. </institution>
Reference: <author> Cheney, C.J. </author> <title> "A Nonrecursive List Compacting Algorithm". </title> <journal> CACM 13,11 (Nov.1970),677-678. </journal>
Reference: <author> Clark, D.W., and Green, </author> <title> C.C. "An Empirical Study of List Structure in LISP". </title> <journal> CACM 20,2 (Feb.1977),78-87. </journal>
Reference: <author> Fisher, D.A. </author> <title> "Bounded Workspace Garbage Collection in an Address-Order Preserving List Processing Environment". </title> <address> Inf.Proc.Lett. 3,1 (July1974),29-32. </address>
Reference: <editor> Gelernter, H., et al. </editor> <title> "A Fortran-Compiled List-Processing Language". </title> <journal> J. ACM 7,2 (Sept.1960),87-101. </journal>
Reference: <author> Hederman, Lucy. </author> <title> "Compile Time Garbage Collection". </title> <type> MS Thesis, </type> <institution> Rice University Computer Science Dept., Sept.1988. </institution>
Reference: <author> Lam, Monica S., et al. </author> <title> "The Cache Performance and Optimizations of Blocked Algorithms". </title> <journal> ACM ASPLOS-IV, Sigplan Not. 26,4 (April1991),63-74. </journal>
Reference: <author> Lieberman, H., and Hewitt, C. </author> <title> "A Real-Time Garbage Collector Based on the Lifetimes of Objects". </title> <journal> CACM 26, </journal> <volume> 6 (June1983),419-429. </volume>
Reference: <author> MacLennan, B.J. </author> <title> "Values and Objects in Programming Languages". Sigplan Not. </title> <publisher> 17,12 (Dec.1982),70-79. </publisher>
Reference: <author> McDermott, D. </author> <title> "An Efficient Environment Allocation Scheme in an Interpreter for a Lexically-scoped LISP". </title> <booktitle> 1980 Lisp Conference, </booktitle> <address> Stanford, CA, Aug.1980,154-162. </address>
Reference: <author> Minsky, </author> <title> M.L. "A LISP garbage collector algorithm using serial secondary storage". </title> <publisher> MIT AI Memo 58, Oct.1963. </publisher>
Reference: <author> Mogul, J.C., and Borg, A. </author> <title> "The Effect of Context Switches on Cache Performance". </title> <journal> ACM ASPLOS-IV, Sigplan Not. 26,4 (April1991),75-84. </journal>
Reference: <author> Moon, D. </author> <title> "Garbage Collection in a Large Lisp System". </title> <booktitle> ACM Symp. on Lisp and Functional Prog., </booktitle> <address> Austin, TX, </address> <year> 1984, </year> <pages> 235-246. </pages>
Reference: <author> Moss, J.E.B. </author> <title> "Managing Stack Frames in Smalltalk". </title> <booktitle> SIGPLAN '87 Symp. on Interpreters and Interpretive Techniques, in Sigplan Notices 22,7 (July1987), </booktitle> <pages> 229-240. </pages>
Reference: <author> Moyer, Steven A. </author> <title> "Performance of the iPSC/860 Node Architecture". </title> <type> IPC-TR-91-007, </type> <institution> Inst. for Parallel Comp., Eng. & Applied Sci., U. of Va., </institution> <month> May </month> <year> 1991. </year>
Reference: <editor> Rees, J. and Clinger, W., et al. </editor> <title> "Revised Report on the Algorithmic Language Scheme". </title> <journal> Sigplan Notices 21,12 (Dec.1986),37-79. </journal>
Reference: <author> Ruggieri, Cristina; and Murtagh, Thomas P. </author> <title> "Lifetime analysis of dynamically allocated objects". </title> <booktitle> ACM POPL '88,285-293. </booktitle>
Reference: <author> Shaw, Robert A. </author> <title> "Improving Garbage Collector Performance in Virtual Memory". </title> <publisher> Stanford CSL-TR-87-323, March1987. </publisher>
Reference: <author> Terashima, M., and Goto, E. </author> <title> "Genetic Order and Compactifying Garbage Collectors". </title> <journal> IPL 7,1 (Jan.1978),27-32. </journal>
Reference: <author> Unger, D. </author> <title> "Generation Scavenging: A nondisruptive, high performance storage reclamation algorithm". </title> <journal> ACM Soft. Eng. Symp. on Prac. Software Dev. Envs., Sigplan Notices 19,6 (June1984),157-167. </journal>
Reference: <author> Weizenbaum, J. </author> <title> "Knotted List Structures". </title> <journal> CACM 5,3 (March1962),161-165. </journal>
Reference: <author> Wilson, Paul R. </author> <title> "Some Issues and Strategies in Heap Management and Memory Hierarchies". </title> <journal> ACM Sigplan Not. 26,3 (March1991),45-52. </journal>
Reference: <author> Wise, D.S., and Friedman, </author> <title> D.P. "The One-Bit Reference Count". </title> <note> BIT 17 (1977),351-359. </note>
Reference: <author> Zorn, Benjamin. </author> <title> "The Effect of Garbage Collection on Cache Performance". </title> <type> TR CU-CS-528-91, </type> <institution> U. Colorado, Boulder, </institution> <month> May </month> <year> 1991,41p. </year>
References-found: 36

