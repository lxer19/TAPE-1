URL: http://www.cs.utah.edu/~cs686/Previous/a97/farkas.ps
Refering-URL: http://www.cs.utah.edu/~cs686/Previous/a97/
Root-URL: 
Email: farkas@eecg.toronto.edu  jouppi@pa.dec.com  pc@eecg.toronto.edu  
Title: Register File Design Considerations in Dynamically Scheduled Processors  
Author: Keith I. Farkas Norman P. Jouppi Paul Chow 
Address: 10 Kings College Road Toronto, Ontario, Canada  250 University Avenue Palo Alto, California 94301  
Affiliation: Dept. of Electrical and Computer Engineering University of Toronto  Digital Equipment Corporation Western Research Lab  
Note: To appear at HPCA'96. Please do not distribute.  
Pubnum: M5S 1A4  
Abstract: We have investigated the register file requirements of dynamically scheduled processors using register renaming and dispatch queues running the SPEC92 benchmarks. We looked at processors capable of issuing either four or eight instructions per cycle and found that in most cases implementing precise exceptions requires a relatively small number of additional registers compared to imprecise exceptions. Systems with aggressive non-blocking load support were able to achieve performance similar to processors with perfect memory systems at the cost of some additional registers. Given our machine assumptions, we found that the performance of a four-issue machine with a 32-entry dispatch queue tends to saturate around 80 registers. For an eight-issue machine with a 64-entry dispatch queue performance does not saturate until about 128 registers. Assuming the machine cycle time is proportional to the register file cycle time, the 8-issue machine yields only 20% higher performance than the 4-issue machine due in part to the cycle time impact of additional hardware. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David Patterson and John Hennessy. </author> <title> Computer Architecture: A Quantitative Approach. </title> <publisher> Morgan Kaufman Publishers, </publisher> <address> 2nd edition, </address> <year> 1995. </year>
Reference-contexts: Hardware is required to control the issuing instructions, to track data flow, and to recover from exceptions. A number of techniques have been used to implement this functionality. Scoreboarding, a technique first employed in the CDC 6600 <ref> [1] </ref>, allows instructions to be dispatched in order but execute out of order. A similar but more powerful technique is that of reservation stations, an idea pioneered by the IBM 360/91 [2]. Implicit in the design of a reservation station is the technique of renaming registers. <p> Although both reservation stations and scoreboards allow instructions to complete out of order, in-order completion can be implemented with the addition of a reorder buffer <ref> [1] </ref>. Reorder buffers, reservation stations and explicit register renaming hardware are used in the PowerPC 604 processor [3] to implement dynamic scheduling. An alternate technique and one which subsumes the functionality of reorder buffers, reservation stations, and scoreboards, is dispatch queues with explicit register renaming hardware. <p> Although machines with truly imprecise exceptions are rare these days in general purpose systems (since it prohibits multiprogramming and modern OS systems), we have examined a true imprecise exception model as a best case limit for other hybrid exception approaches <ref> [1] </ref>. The freeing of registers is also affected by branch prediction. Branch prediction is typically used in dynamically scheduled processors to allow the processor to move instructions across branches and thereby increase the pool of those instructions available for issue. Branch prediction, however, can negatively affect performance in two ways.
Reference: [2] <author> D. W. Anderson, F. J. Sparacio, and R. M. Tomasulo. </author> <title> The IBM 360 Model 91: Machine philosophy and instruction handling. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 11(1) </volume> <pages> 8-24, </pages> <month> January </month> <year> 1967. </year>
Reference-contexts: Scoreboarding, a technique first employed in the CDC 6600 [1], allows instructions to be dispatched in order but execute out of order. A similar but more powerful technique is that of reservation stations, an idea pioneered by the IBM 360/91 <ref> [2] </ref>. Implicit in the design of a reservation station is the technique of renaming registers. Register renaming involves the mapping of the registers named in the instructions, the virtual registers, to the actual or physical registers.
Reference: [3] <author> S. Peter Song. </author> <title> Power PC 604. </title> <booktitle> In the proceedings of Hot Chips VI, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: Although both reservation stations and scoreboards allow instructions to complete out of order, in-order completion can be implemented with the addition of a reorder buffer [1]. Reorder buffers, reservation stations and explicit register renaming hardware are used in the PowerPC 604 processor <ref> [3] </ref> to implement dynamic scheduling. An alternate technique and one which subsumes the functionality of reorder buffers, reservation stations, and scoreboards, is dispatch queues with explicit register renaming hardware. With this technique, which is used in the MIPS R10000 [4], in-order completion is implemented by the register control logic. <p> To investigate the relationship between the register file and these components, we simulated a number of machine configurations using scheduling rules and functional unit latencies that resemble those of a number of commercial processors including the PowerPC 604 <ref> [3] </ref>, the DEC 21164 [8], the MIPS R10000 [4] and the SUN Ul-traSPARC [9]. Each configuration we simulated used the same hardware with the exception of the hardware required to implement the components listed above.
Reference: [4] <author> John Brennan. T5: </author> <title> A high-performance superscalar MIPS processor. </title> <booktitle> In the proceedings of MicroProcessor Forum, </booktitle> <month> October </month> <year> 1994. </year> <note> See also http://www.mips.com/HTMLs/T5 B.html. </note>
Reference-contexts: An alternate technique and one which subsumes the functionality of reorder buffers, reservation stations, and scoreboards, is dispatch queues with explicit register renaming hardware. With this technique, which is used in the MIPS R10000 <ref> [4] </ref>, in-order completion is implemented by the register control logic. Processors using this technique have been implemented with one or more different dispatch queues for different types of instructions. <p> To investigate the relationship between the register file and these components, we simulated a number of machine configurations using scheduling rules and functional unit latencies that resemble those of a number of commercial processors including the PowerPC 604 [3], the DEC 21164 [8], the MIPS R10000 <ref> [4] </ref> and the SUN Ul-traSPARC [9]. Each configuration we simulated used the same hardware with the exception of the hardware required to implement the components listed above. The processor model implements a RISC, superscalar processor whose instruction set is based on the DEC Alpha instruction set.
Reference: [5] <author> David W. Wall. </author> <title> Limits of instruction-level parallelism. </title> <type> Technical Report 93/6, </type> <institution> Digital Equipment Corporation Western Research Lab, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: An exception is an investigation carried out by Wall on the limits of instruction-level parallelism that included looking at the impact of varying the number of registers for a 64-issue, 2048-instruction window machine with unit operation latencies <ref> [5] </ref>. Bradlee, Eggers, and Henry investigated the performance tradeoffs of the number of registers for a RISC instruction set architecture with various kinds of compiler support, but this study was for a statically-scheduled, single-issue processor [6].
Reference: [6] <author> David Bradlee, Susan Eggers, and Robert Henry. </author> <title> The effect on risc performance of register set size and structure versus code generation strategy. </title> <booktitle> Proceedings of the 18th Intl. Symp. on Computer Architecture, </booktitle> <pages> pages 330-339, </pages> <year> 1991. </year>
Reference-contexts: Bradlee, Eggers, and Henry investigated the performance tradeoffs of the number of registers for a RISC instruction set architecture with various kinds of compiler support, but this study was for a statically-scheduled, single-issue processor <ref> [6] </ref>.
Reference: [7] <author> Manoj Franklin and Gurindar Sohi. </author> <title> Register traffic analysis for streamlining inter-operation communication in fine-grain parallel processors. </title> <booktitle> Proceedings of the 25th Annual International Symposium on Mi-croarchitecture, </booktitle> <pages> pages 236-245, </pages> <year> 1992. </year>
Reference-contexts: Franklin and Sohi also considered a statically-scheduled, single-issue processor in their study of register life times and the replacement of the register file with a distributed mechanism <ref> [7] </ref>. 2 Simulation Methodology The design requirements of the register file for a dynamically scheduled processor are in part defined by the functionality offered by other system components.
Reference: [8] <author> John Edmondson and Paul Rubinfeld. </author> <title> An overview of the 21164 Alpha AXP Microprocessor. </title> <booktitle> In the proceedings of Hot Chips VI, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: To investigate the relationship between the register file and these components, we simulated a number of machine configurations using scheduling rules and functional unit latencies that resemble those of a number of commercial processors including the PowerPC 604 [3], the DEC 21164 <ref> [8] </ref>, the MIPS R10000 [4] and the SUN Ul-traSPARC [9]. Each configuration we simulated used the same hardware with the exception of the hardware required to implement the components listed above. The processor model implements a RISC, superscalar processor whose instruction set is based on the DEC Alpha instruction set.
Reference: [9] <author> Anant Agrawal. Utrasparc: </author> <title> A 64-bit, high-performance SPARC processor. </title> <booktitle> In the proceedings of MicroProcessor Forum, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: investigate the relationship between the register file and these components, we simulated a number of machine configurations using scheduling rules and functional unit latencies that resemble those of a number of commercial processors including the PowerPC 604 [3], the DEC 21164 [8], the MIPS R10000 [4] and the SUN Ul-traSPARC <ref> [9] </ref>. Each configuration we simulated used the same hardware with the exception of the hardware required to implement the components listed above. The processor model implements a RISC, superscalar processor whose instruction set is based on the DEC Alpha instruction set.
Reference: [10] <author> J.S. Liptay. </author> <title> Design of the IBM Enterprise System/9000 high-end processor. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 36(4) </volume> <pages> 713-731, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The register file includes a configurable and equal number of integer and floating-point registers. The register renaming scheme we use is modeled after the scheme used in the IBM ES/9000 <ref> [10] </ref>, while the dispatch queue is similar to the fast dispatch stack of Dwyer and Torng [11]. The simulator implements both precise and imprecise exceptions. In our simulations, the only source of exceptions is mispredicted branches; arithmetic exceptions are not modeled.
Reference: [11] <author> Harry Dwyer and H. C. Torng. </author> <title> An out-of-order superscalar processor with speculative execution and fast, precise interrupts. </title> <booktitle> Proceedings of the 25th Annual International Symposium on Microarchitecture, </booktitle> <pages> pages 272-281, </pages> <year> 1992. </year>
Reference-contexts: The register file includes a configurable and equal number of integer and floating-point registers. The register renaming scheme we use is modeled after the scheme used in the IBM ES/9000 [10], while the dispatch queue is similar to the fast dispatch stack of Dwyer and Torng <ref> [11] </ref>. The simulator implements both precise and imprecise exceptions. In our simulations, the only source of exceptions is mispredicted branches; arithmetic exceptions are not modeled. We use a branch prediction scheme proposed by McFarling [12] that includes two branch predictors and a mechanism to select between them.
Reference: [12] <author> Scott McFarling. </author> <title> Combining branch predictors. </title> <note> DEC WRL Technical Note TN-36, </note> <year> 1993. </year>
Reference-contexts: The simulator implements both precise and imprecise exceptions. In our simulations, the only source of exceptions is mispredicted branches; arithmetic exceptions are not modeled. We use a branch prediction scheme proposed by McFarling <ref> [12] </ref> that includes two branch predictors and a mechanism to select between them. <p> The branch misprediction rates are given along with the overall cache miss rates for loads under the columns headed Rates. The misprediction rates shown are larger than those reported by McFarling <ref> [12] </ref> for the same branch prediction scheme and a statically scheduled processor. The increase is in part due to the use of the dispatch queue in a dynamically scheduled processor.
Reference: [13] <author> Keith I. Farkas and Norman P. Jouppi. </author> <title> Complexity/performance tradeoffs with non-blocking loads. </title> <booktitle> Proceedings of the 21st Intl. Symp. on Computer Architecture, </booktitle> <pages> pages 211-222, </pages> <year> 1994. </year>
Reference-contexts: This assumption prevents any stalls due to a full write buffer and prevents stores from delaying the servicing of cache fetches. The data cache can be configured to be lockup or lockup-free. The lockup-free cache employs an inverted MSHR (Miss Status Holding Register) organization <ref> [13] </ref> to process cache misses. An inverted MSHR organization can support as many in-flight cache misses as there are registers and other destinations for data in the processor.
Reference: [14] <author> Amitabh Srivastava and Alan Eustace. </author> <title> Atom: A system for building customized program analysis tools. </title> <booktitle> Proceedings of the ACM SIGPLAN `94 Conference on Programming Languages, </booktitle> <month> March </month> <year> 1994. </year>
Reference-contexts: results are for one with 64. registers to be freed earlier, and allow the exact state of the machine to be recovered without assistance from software when a mispredicted branch does occur. 3 Performance Trends This study is based on execution-driven simulations using an object code instrumentation system called ATOM <ref> [14] </ref>, which is available for Alpha AXP workstations. The results presented correspond to simulations of nine of the SPEC92 benchmarks representing a balance between floating-point-intensive and integer-intensive applications. The benchmarks are listed in Table 1 along with some run-time characteristics for the four-way and eight-way issue processors.
Reference: [15] <author> Steven J. E. Wilton and Norman P. Jouppi. </author> <title> An enhanced access and cycle time model for on-chip caches. </title> <type> Technical Report 93/5, </type> <institution> Digital Equipment Corporation Western Research Lab, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: The number of read and write ports was set by the issue width of the processor while the register file sizes correspond to those used in Figure 6. For these simulations, we modified the cache access and cycle time model of Wilton and Jouppi <ref> [15] </ref> to generate cycle times for multiported register files using the register file cell shown in Figure 9. This cell uses two bitlines per write port and one bitline per read port. One wordline is required per port.
Reference: [16] <author> Gurindar S. Sohi, Scott E. Breach, and T. N. Vijayku-mar. </author> <title> Multiscalar processors. </title> <booktitle> Proceedings of the 22st Intl. Symp. on Computer Architecture, </booktitle> <pages> pages 414-425, </pages> <year> 1995. </year>
Reference-contexts: Although the data presented in this figure is for a dynamically scheduled processor, a VLIW processor with centralized integer and floating-point register files would also be subject to performance limits similar to Figure 10. Hence, there is a need for new decentralized architectures, such as the proposed Multiscalar architecture <ref> [16] </ref>. 4 Conclusions We have investigated a number of issues in the design of register files for dynamically scheduled superscalar processors. From these investigations we draw the following conclusions. First, the additional register requirements for providing precise exceptions in these processors is relatively small.
References-found: 16

