URL: ftp://ftp.cs.umass.edu/pub/lesser/neiman-aaai94.ps
Refering-URL: http://dis.cs.umass.edu/~dann/dann-pubs.html
Root-URL: 
Email: DANN@CS.UMASS.EDU  
Title: Exploiting Meta-Level Information in a Distributed Scheduling System  
Author: Daniel E. Neiman, David W. Hildum, Victor R. Lesser Tuomas W. Sandholm 
Date: May 13, 1994  
Address: Amherst, MA 01003  
Affiliation: Computer Science Department University of Massachusetts  
Abstract: In this paper, we study the problem of achieving efficient interaction in a distributed scheduling system whose scheduling agents may borrow resources from one another. Specifically, we expand on Sycara's use of resource texture measures in a distributed scheduling system with a central resource monitor for each resource type and apply it to the decentralized case. We show how analysis of the abstracted resource requirements of remote agents can guide an agent's choice of local scheduling activities not only in determining local constraint tightness, but also in identifying activities that reduce global uncertainty. We also exploit meta-level information to allow the scheduling agents to make reasoned decisions about when to attempt to solve impasses locally through backtracking and constraint relaxation and when to request resources from remote agents. Finally, we describe the current state of negotiation in our system and discuss plans for integrating a more sophisticated cost model into the negotiation protocol. This work is presented in the context of the Distributed Airport Resource Management System, a multi-agent system for solving airport ground service scheduling problems. fl This work was partly supported by DARPA contract N00014-92-J-1698 and NSF contracts CDA-8922572 and IRI-9208920. The content of this paper does not necessarily reflect the position or the policy of the Government and no official endorsement should be inferred. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Carver and V. Lesser. </author> <title> The evolution of blackboard control architectures,. </title> <journal> Expert Systems with Applications- Special Issue on the Blackboard Paradigm and Its Applications, </journal> <volume> 7(1) </volume> <pages> 1-30, </pages> <month> Jan-Mar </month> <year> 1994. </year>
Reference-contexts: Additionally, DSS is equipped to manage the scheduling of shared tasks connecting otherwise separate orders, and handle RCSPs that involve mobile resources with significant travel requirements. DSS is implemented as an agenda-based blackboard system <ref> [6, 1] </ref> using GBB (the Generic Blackboard System) [2]. It maintains a blackboard structure upon which a developing schedule is constructed, and where the sets of orders and resources for a particular RCSP are stored. A group of knowledge sources are provided for securing the necessary resource reservations.
Reference: [2] <author> D. D. Corkill, K. Q. Gallagher, and K. E. Murray. </author> <title> GBB: A generic blackboard development system. </title> <booktitle> In Proceedings of the Fifth National Conference on Artificial Intelligence, </booktitle> <pages> pages 1008-1014, </pages> <address> Philadelphia, PA., </address> <month> August </month> <year> 1986. </year>
Reference-contexts: Additionally, DSS is equipped to manage the scheduling of shared tasks connecting otherwise separate orders, and handle RCSPs that involve mobile resources with significant travel requirements. DSS is implemented as an agenda-based blackboard system [6, 1] using GBB (the Generic Blackboard System) <ref> [2] </ref>. It maintains a blackboard structure upon which a developing schedule is constructed, and where the sets of orders and resources for a particular RCSP are stored. A group of knowledge sources are provided for securing the necessary resource reservations.
Reference: [3] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Generalizing the partial global planning algorithm. </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 1(2) </volume> <pages> 319-346, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: This work has been extended by Decker and Lesser <ref> [3, 4] </ref> to incorporate more sophisticated coordination relationships. According to this framework, we can view our detection of potential loan requests using texture measures to be an identification of facilitating relationships, and our modification of the scheduling algorithm as an attempt to exploit this perceived relationship.
Reference: [4] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Quantitative modeling of complex computational task environments. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 217-224, </pages> <address> Washington, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: This work has been extended by Decker and Lesser <ref> [3, 4] </ref> to incorporate more sophisticated coordination relationships. According to this framework, we can view our detection of potential loan requests using texture measures to be an identification of facilitating relationships, and our modification of the scheduling algorithm as an attempt to exploit this perceived relationship.
Reference: [5] <author> E.H. Durfee and V.R. Lesser. </author> <title> Partial global planning: A coordination framework for distributed hypothesis formation. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(5) </volume> <pages> 1167-1183, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: We discuss our heuristics in the context of a specific testbed application, the Distributed Airport Resource Management System (DIS-ARM). 2 Related Work The use of meta-level information to define the interactions between agents has been studied extensively by Durfee and Lesser via the use of partial global plans <ref> [5] </ref>. This work has been extended by Decker and Lesser [3, 4] to incorporate more sophisticated coordination relationships.
Reference: [6] <author> Lee D. Erman, Frederick Hayes-Roth, Victor R. Lesser, and D. Raj Reddy. </author> <title> The hearsay-ii speech-understanding system: Integrating knowledge to resolve uncertainty. </title> <journal> Computing Surveys, </journal> <volume> 12(2) </volume> <pages> 213-253, </pages> <month> June </month> <year> 1980. </year>
Reference-contexts: Additionally, DSS is equipped to manage the scheduling of shared tasks connecting otherwise separate orders, and handle RCSPs that involve mobile resources with significant travel requirements. DSS is implemented as an agenda-based blackboard system <ref> [6, 1] </ref> using GBB (the Generic Blackboard System) [2]. It maintains a blackboard structure upon which a developing schedule is constructed, and where the sets of orders and resources for a particular RCSP are stored. A group of knowledge sources are provided for securing the necessary resource reservations.
Reference: [7] <author> Mark S. Fox. </author> <title> Constraint-Directed Search: A Case Study of Job-Shop Scheduling. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh PA, </address> <month> December </month> <year> 1983. </year>
Reference-contexts: 1 Introduction The problem of scheduling resources and activities is known to be extremely challenging <ref> [8, 7, 14, 11] </ref>. The complexity increases when the scheduling process becomes dependent upon the activities of other concurrent schedulers. Such interactions between scheduling agents arise when, for example, agents must borrow resources from other agents in order to resolve local impasses or improve the quality of a local solution.
Reference: [8] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: 1 Introduction The problem of scheduling resources and activities is known to be extremely challenging <ref> [8, 7, 14, 11] </ref>. The complexity increases when the scheduling process becomes dependent upon the activities of other concurrent schedulers. Such interactions between scheduling agents arise when, for example, agents must borrow resources from other agents in order to resolve local impasses or improve the quality of a local solution.
Reference: [9] <author> David W. Hildum. </author> <title> Flexibility in a Knowledge-Based System for Solving Dynamic Resource-Constrained Scheduling Problems. </title> <type> PhD thesis, </type> <institution> Computer Science Dept., University of Massachusetts, </institution> <address> Amherst, MA 01003, </address> <month> May </month> <year> 1994. </year> <month> 13 </month>
Reference-contexts: to lead to poor schedules within the airport ground service scheduling domain. 3 Overview: The Distributed Dynamic Scheduling System In order to test our approach to solving distributed resource-constrained scheduling problems (RCSPs), we have designed a distributed version of a reactive, knowledge-based scheduling system called DSS (the Dynamic Scheduling System) <ref> [9] </ref>. DSS provides a foundation for representing a wide variety of real-world RCSPs. Its flexible scheduling 3 approach is capable of reactively producing quality schedules within dynamic environ-ments that exhibit unpredictable resource and order behavior.
Reference: [10] <author> Theresa A. Moehlman, Victor R. Lesser, and Brandon L. Buteau. </author> <title> Decentralized negotiation: An approach to the distributed planning problem. Group Decision and Negotiation, </title> (2):161-191, 1992. 
Reference-contexts: This model of a decentralized group of agents performing independent tasks in a resource-constrained environment is similar to the architecture of Moehlman's Distributed Fireboss <ref> [10] </ref>. We distinguish our work from Moehlman's by our use of meta-level information to control the decision process by which agents choose to resolve impasses locally, through backtracking and constraint relaxation, or through requests to remote agents.
Reference: [11] <author> Norman Sadeh. </author> <title> Look-Ahead Techniques for Micro-Opportunistic Job Shop Scheduling. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh PA, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: 1 Introduction The problem of scheduling resources and activities is known to be extremely challenging <ref> [8, 7, 14, 11] </ref>. The complexity increases when the scheduling process becomes dependent upon the activities of other concurrent schedulers. Such interactions between scheduling agents arise when, for example, agents must borrow resources from other agents in order to resolve local impasses or improve the quality of a local solution.
Reference: [12] <author> Tuomas Sandholm. </author> <title> An implementation of the contract net protocol based on marginal cost calculations. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 256-262, </pages> <address> Washington, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: schedules, and communication overheads. * Agents are cooperative and will lend a resource if it is available. * Agents will only request a resource from one agent at a time this is to avoid the possibility of redundant computation and communication if multiple agents attempt to provide the resource cf. <ref> [12] </ref>. * Once agents have lent a resource to another agent, they will never renege on this agreement.
Reference: [13] <author> Sandip Sen and Edmund Durfee. </author> <title> A formal analysis of communication and commitment in distributed meeting scheduling. </title> <booktitle> In Proceedings of the Twelfth Workshop on Distributed AI, </booktitle> <address> Hidden Valley, PA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Such interactions between scheduling agents arise when, for example, agents must borrow resources from other agents in order to resolve local impasses or improve the quality of a local solution. Distributed scheduling applications are not uncommon, for example, the classic meeting planning problem <ref> [13] </ref> can be considered as a distributed scheduling problem; the airport ground service scheduling (AGSS) problem we address in this paper is another; and similar problems may arise in factory floor manufacturing domains.
Reference: [14] <author> Stephen F. Smith, Mark S. Fox, </author> <title> and Peng Si Ow. Constructing and maintaining detailed production plans: Investigations into the development of knowledge-based factory scheduling systems. </title> <journal> AI Magazine, </journal> <volume> 7(4) </volume> <pages> 45-61, </pages> <month> Fall </month> <year> 1986. </year>
Reference-contexts: 1 Introduction The problem of scheduling resources and activities is known to be extremely challenging <ref> [8, 7, 14, 11] </ref>. The complexity increases when the scheduling process becomes dependent upon the activities of other concurrent schedulers. Such interactions between scheduling agents arise when, for example, agents must borrow resources from other agents in order to resolve local impasses or improve the quality of a local solution.
Reference: [15] <author> K. Sycara, S. Roth, N. Sadeh, and M. Fox. </author> <title> Distributed constrained heuristic search. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(6) </volume> <pages> 1446-1461, </pages> <month> November/December </month> <year> 1991. </year>
Reference-contexts: The formulation of distributed constraint satisfaction problems as distributed AI was described by Yakoo [16], however, this work concentrated more on the problem of distributed backtracking rather than on coordinating agents. The problem of coordinating distributed schedulers has been studied extensively by Sycara and colleagues <ref> [15] </ref>. They describe a mechanism for transmitting abstractions of resource requirements (textures ) between agents. Each agent uses these texture measures to form a model of the aggregate system demand for resources. This model is used 2 to allocate resources using various heuristics. <p> Because resources are owned by specific agents and possess unique characteristics regarding location and travel times that are known only to the owning agent, we can not define central resource monitors responsible for allocating each type of resource. This, again, distinguishes our approach from that of Sycara, et al. <ref> [15] </ref>. Agents requiring a resource must communicate directly with the agent owning a resource of that type and negotiate for its loan.
Reference: [16] <author> M. Yakoo, T. Ishida, and K. Kuwabara. </author> <title> Distributed constraint satisfaction for DAI problems. </title> <booktitle> In Proceedings of the 10th International Workshop on Distributed Artificial Intelligence, </booktitle> <month> October </month> <year> 1990. </year> <month> 14 </month>
Reference-contexts: The formulation of distributed constraint satisfaction problems as distributed AI was described by Yakoo <ref> [16] </ref>, however, this work concentrated more on the problem of distributed backtracking rather than on coordinating agents. The problem of coordinating distributed schedulers has been studied extensively by Sycara and colleagues [15]. They describe a mechanism for transmitting abstractions of resource requirements (textures ) between agents.
References-found: 16

