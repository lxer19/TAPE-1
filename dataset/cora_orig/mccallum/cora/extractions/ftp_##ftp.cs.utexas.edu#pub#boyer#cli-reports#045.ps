URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/045.ps
Refering-URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/index.html
Root-URL: http://www.cs.utexas.edu
Phone: (512) 322-9951  
Title: Comparing Specification Paradigms: Gypsy and Z  
Author: William D. Young 
Note: This work was supported in part at Computational Logic, Inc., by the Defense Advanced Research Projects Agency, ARPA Orders 6082 and 9151. The views and conclusions contained in this document are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc., the Defense Advanced Research Projects Agency or the U.S. Government.  
Address: 1717 W. 6th St. Suite 290 Austin, Texas 78703  
Affiliation: Computational Logic Inc.  
Date: 45 June, 1989  
Pubnum: Technical Report  
Abstract: This paper will be presented at the 12th National Computer Security Conference, Baltimore, Maryland, October 10-13, 1989. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> W.E. Boebert, W.D. Young, R.Y. Kain, S.A. Hansohn. </author> <title> Secure ADA Target: Issues, System Design, and Verification. </title> <booktitle> Proc. Symposium on Security and Privacy, IEEE, </booktitle> <year> 1985. </year>
Reference-contexts: It has been used extensively in secure system specification and verification projects including the Encrypted Packet Interface [21], Message Flow Modulator [8], Honeywell SCOMP [5], Honeywell LOCK <ref> [1] </ref>, and ACCAT Guard [14]. The Z specification language [9, 22] evolved within the Programming Research Group at Oxford University.
Reference: 2. <author> M. Cheheyl, M. Gasser, G. Huff, J. Millen. </author> <title> "Verifying Security". </title> <journal> ACM Computing Surveys 13, </journal> <month> 3 (September </month> <year> 1981), </year> <pages> 279-340. </pages>
Reference-contexts: The alternation of evaluation with informed refinement and selection can incrementally improve the research environment for 1 all. The verification community has been quite willing to compare and contrast various technologies and systems <ref> [15, 2, 16, 13] </ref> though it is unclear how much these comparisons have led to specific changes. One of the most entrenched tools for providing assurance in the security area is the Gypsy Verification Environment [7] (GVE).
Reference: 3. <institution> Department of Defense. Trusted Computer Systems Evaluation Criteria. DOD 5200.28-STD, </institution> <month> December, </month> <year> 1985. </year>
Reference-contexts: In the security arena advances in program verification methodologies, automated reasoning systems, specification techniques, and security modeling have been met with continuing reassessment of acceptable levels of assurance. System developers contemplating certification at the A1 level as outlined in the Trusted Computer Systems Evaluation Criteria <ref> [3] </ref>, for example, can expect that the assurance requirements will become more rigorous with each year that passes. Conversely, the desire for enhanced assurance drives the evolution of tools and techniques for providing it. <p> This is evident particularly in the requirements of the "beyond A1" certification level of DoD's Trusted Computer Systems Evaluation Criteria <ref> [3] </ref>. Z has been used for specifying some "real" software systems of impressive size including one system of over 80,000 lines of code at IBM-Hursley. There is no reason why a specification in Z cannot be as detailed and as near the code level as is required.
Reference: 4. <author> Bill Flinn and Ib Holm Sorensen. CAVIAR: </author> <title> A Case Study in Specification. </title> <editor> In Ian Hayes, Ed., </editor> <title> Specification Case Studies, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1987, </year> <pages> pp. 141-188. </pages>
Reference-contexts: We are not aware of its use within the security community though it has been used to specify significant software systems including a subset of the Unix filing system [18], the Computer Aided Visitor Information and Retrieval System <ref> [4] </ref>, the ICL Data Dictionary [23], and a CICS System at IBM in the U.K. These examples suggest that Z might provide a viable specification language for secure systems. One goal of our research was to investigate this suggestion.
Reference: 5. <author> D.I. </author> <title> Good. SCOMP Trusted Processes. ICSCA Internal Note 138, </title> <institution> The University of Texas at Austin. </institution>
Reference-contexts: The GVE is one of two systems endorsed by the National Computer Security Center for use in meeting the verification requirements for A1 certification. It has been used extensively in secure system specification and verification projects including the Encrypted Packet Interface [21], Message Flow Modulator [8], Honeywell SCOMP <ref> [5] </ref>, Honeywell LOCK [1], and ACCAT Guard [14]. The Z specification language [9, 22] evolved within the Programming Research Group at Oxford University.
Reference: 6. <author> D.I. Good, R.L. Akers, L.M. Smith. </author> <title> Report on Gypsy 2.05. </title> <type> Tech. </type> <institution> Rept. ICSCA-CMP-48, Institute for Computer Science and Computing Applications, The University of Texas at Austin, </institution> <month> February, </month> <year> 1986. </year>
Reference-contexts: On the basis of this comparison, certain conclusions are drawn which we hope can suggest refinements to the two languages and possibly a direction for future language designs which will avoid the pitfalls and capitalize on the strong points of each. 2. The Two Languages 2.1 Gypsy 3 Gypsy <ref> [6] </ref> is a program description language composed of two strongly intersecting components: a programming language and a specification language. Some parts of the language are used for programming, some for specification, and some for both. <p> The Gypsy Verification Environment [7] is a collection of software tools which form a development environment for creating, specifying, maintaining, and verifying Gypsy programs. These tools include a parser, verification condition generator, interactive proof checker, and algebraic simplifier. Gypsy is fully described in <ref> [6] </ref> and a methodology for using the language effectively is documented in [7]. 2 We are experts in the use of Gypsy but did not feel confident to write a creditable Z specification.
Reference: 7. <author> D.I. Good, B.L. Divito, M.K. Smith. </author> <title> Using The Gypsy Methodology. </title> <institution> Institute for Computing Science, University of Texas at Austin, </institution> <month> June, </month> <year> 1984. </year>
Reference-contexts: One of the most entrenched tools for providing assurance in the security area is the Gypsy Verification Environment <ref> [7] </ref> (GVE). The GVE is one of two systems endorsed by the National Computer Security Center for use in meeting the verification requirements for A1 certification. <p> The specification component of the language contains the full expressive power of the predicate calculus and the ability to write recursive functions. Specifications may be written as Floyd-Hoare style program annotations, algebraic-style axioms, or state machine descriptions. The Gypsy Verification Environment <ref> [7] </ref> is a collection of software tools which form a development environment for creating, specifying, maintaining, and verifying Gypsy programs. These tools include a parser, verification condition generator, interactive proof checker, and algebraic simplifier. <p> These tools include a parser, verification condition generator, interactive proof checker, and algebraic simplifier. Gypsy is fully described in [6] and a methodology for using the language effectively is documented in <ref> [7] </ref>. 2 We are experts in the use of Gypsy but did not feel confident to write a creditable Z specification.
Reference: 8. <author> D.I. Good, A.E. Siebert, L.M. Smith. </author> <title> Message Flow Modulator Final Report. </title> <type> Tech. </type> <institution> Rept. ICSCA-CMP-34, Institute for Computing Science, University of Texas at Austin, </institution> <month> December, </month> <year> 1982. </year>
Reference-contexts: The GVE is one of two systems endorsed by the National Computer Security Center for use in meeting the verification requirements for A1 certification. It has been used extensively in secure system specification and verification projects including the Encrypted Packet Interface [21], Message Flow Modulator <ref> [8] </ref>, Honeywell SCOMP [5], Honeywell LOCK [1], and ACCAT Guard [14]. The Z specification language [9, 22] evolved within the Programming Research Group at Oxford University.
Reference: 9. <author> Ian Hayes (editor). </author> <title> Specification Case Studies. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1987. </year>
Reference-contexts: It has been used extensively in secure system specification and verification projects including the Encrypted Packet Interface [21], Message Flow Modulator [8], Honeywell SCOMP [5], Honeywell LOCK [1], and ACCAT Guard [14]. The Z specification language <ref> [9, 22] </ref> evolved within the Programming Research Group at Oxford University. <p> less attention to the description of Gypsy than to Z since most security researchers have at least a passing acquaintance with Gypsy. 3 2.2 The Z Specification Language Key to understanding Z is the designers' "conviction that real software can be specified and that ordinary mathematics is the proper tool" <ref> [9] </ref>. Z purports to offer a standard mathematical notation which is "easy for a scientifically trained reader to understand; is rigorous; denotes rich concepts; and is an open notation, because you can enlarge it at will" [9]. The basic structuring concept is the schema [24]. <p> that real software can be specified and that ordinary mathematics is the proper tool" <ref> [9] </ref>. Z purports to offer a standard mathematical notation which is "easy for a scientifically trained reader to understand; is rigorous; denotes rich concepts; and is an open notation, because you can enlarge it at will" [9]. The basic structuring concept is the schema [24]. A schema is an association of variable declarations and observations about those variables. An observation merely expresses some relation among variables. An observation can be viewed as placing a constraint upon any implementation of the specification. <p> Schemata can be written in either a tabular or linear form; the tabular form seems to be the preferred form. Consider the following schema for a portion of a specification of a symbol table abstraction <ref> [9] </ref>. ___ LOOKUP____________________________ st, st' : ST v! : VAL st' = st v! = st (s?) The top portion of the schema defines a collection of variables: a variable st which is a mapping from symbols (SYM) to values (VAL), an input variable s?, and an output variable v! of <p> These are merely predicate calculus expressions involving the variables of the schema and may involve any of the standard operations of predicate calculus, elementary set theory, or mathematics. A standard notation is defined in <ref> [9] </ref>. In the example above, the observations indicate that the state variable is unchanged by the LOOKUP operation. A precondition of the operation is that input symbol s? is in the domain of the state mapping. <p> Z suffers from no such lack of expressiveness. In addition to the huge notational variety suggested 15 by the language designers <ref> [9] </ref>, the writer of Z specifications is free to use or invent notation at will. This gives the Z user freedom to write the cleanest specifications possible. On the other hand, the free and easy use of notation in Z may have some disadvantages.
Reference: 10. <author> C.A.R. Hoare. </author> <title> "The Emperor's Old Clothes: </title> <booktitle> 1980 Turing Award Lecture". Communications of the ACM 24, </booktitle> <month> 2 (February </month> <year> 1981), </year> <pages> 75-83. </pages>
Reference-contexts: On the other hand, many would argue that the desire to include too much in a formal language is exactly the cause of complexity and inelegance in languages such as PL/I and ADA. <ref> [10] </ref> 6 3.2 Writing Files 3.2-A The Z Version: The operation of writing a file is defined in the Z specification by the schema: ___ writeFILE____________________________ file, file' : FILE offset? : N data? : seq BYTE _________________ offset? file' = zero file (data?pred ) offset? where zero = (ln:N |
Reference: 11. <author> K. Jensen and N. Wirth. </author> <title> Pascal User Manual and Report. </title> <publisher> Springer-Verlag, </publisher> <year> 1974. </year>
Reference-contexts: A potential disadvantage is that it is quite easy in Gypsy to write specifications which are semantically quite similar to the implementation. Gypsy is descended from Pascal <ref> [11] </ref> and contains features for data abstraction, condition handling, dynamic memory management, and concurrency. The specification component of the language contains the full expressive power of the predicate calculus and the ability to write recursive functions.
Reference: 12. <author> C.B. Jones. </author> <title> "Tentative Steps Toward a Development Method for Interfering Programs". </title> <journal> ACM Trans. on Programming Languages and Systems 5, </journal> <month> 4 (October </month> <year> 1983), </year> <pages> 596-619. </pages>
Reference-contexts: The mechanisms of abstraction in Gypsy procedural and data abstraction are less flexible 7 There is apparently ongoing research on specifying concurrent programs in Z based on the approach of <ref> [12] </ref>. 19 than schema abstraction. In particular, it is difficult to associate components of a system into various different aggregations. 3. Schema based specifications tend to be more succinct and abstract than the procedural specifications of Gypsy.
Reference: 13. <author> Matt Kaufmann and W.D. Young. </author> <title> Comparing Specification Paradigms for Secure Systems: Gypsy and the Boyer-Moore Logic. </title> <booktitle> Proceedings of the 10th National Computer Security Conference, </booktitle> <institution> National Bureau of Standards, </institution> <month> September, </month> <year> 1987. </year>
Reference-contexts: The alternation of evaluation with informed refinement and selection can incrementally improve the research environment for 1 all. The verification community has been quite willing to compare and contrast various technologies and systems <ref> [15, 2, 16, 13] </ref> though it is unclear how much these comparisons have led to specific changes. One of the most entrenched tools for providing assurance in the security area is the Gypsy Verification Environment [7] (GVE).
Reference: 14. <author> J. Keeton-Williams, S.R. Ames, B.A. Hartman, </author> <title> and R.C. Tyler. Verification of the ACCAT-Guard Downgrade Trusted Process. </title> <type> Tech. </type> <institution> Rept. NTR-8463, The Mitre Corporation, Bedford, </institution> <address> MA., </address> <year> 1982. </year>
Reference-contexts: It has been used extensively in secure system specification and verification projects including the Encrypted Packet Interface [21], Message Flow Modulator [8], Honeywell SCOMP [5], Honeywell LOCK [1], and ACCAT Guard <ref> [14] </ref>. The Z specification language [9, 22] evolved within the Programming Research Group at Oxford University.
Reference: 15. <author> Richard Kemmerer. </author> <title> Verification Assessment Study Final Report. </title> <note> In 5 volumes, unpublished. </note>
Reference-contexts: The alternation of evaluation with informed refinement and selection can incrementally improve the research environment for 1 all. The verification community has been quite willing to compare and contrast various technologies and systems <ref> [15, 2, 16, 13] </ref> though it is unclear how much these comparisons have led to specific changes. One of the most entrenched tools for providing assurance in the security area is the Gypsy Verification Environment [7] (GVE).
Reference: 16. <author> Carl E. Landwehr. </author> <title> "The Best Available Technologies for Computer Security". </title> <booktitle> IEEE Computer 16, </booktitle> <month> 7 (July </month> <year> 1983), </year> <pages> 86-100. </pages>
Reference-contexts: The alternation of evaluation with informed refinement and selection can incrementally improve the research environment for 1 all. The verification community has been quite willing to compare and contrast various technologies and systems <ref> [15, 2, 16, 13] </ref> though it is unclear how much these comparisons have led to specific changes. One of the most entrenched tools for providing assurance in the security area is the Gypsy Verification Environment [7] (GVE).
Reference: 17. <author> C. Morgan, K. Robinson, P. Gardiner. </author> <title> On the Refinement Calculus. </title> <type> Draft, </type> <month> July </month> <year> 1988. </year>
Reference-contexts: There is no reason why a specification in Z cannot be as detailed and as near the code level as is required. There is also ongoing research into refining Z specifications into code in a guarded command language <ref> [17] </ref>. Presumably this could then be translated into C or other suitable implementation language. 5 It might be possible to supply some such notion for Z as well. Logic programming gives a procedural as well as a declarative interpretation to logical formulae.
Reference: 18. <author> Carroll Morgan and Bernard Sufrin. </author> <title> Specification of the UNIX Filing System. </title> <editor> In Ian Hayes, Ed., </editor> <title> Specification Case Studies, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1987, </year> <pages> pp. 91-140. </pages>
Reference-contexts: The Z specification language [9, 22] evolved within the Programming Research Group at Oxford University. We are not aware of its use within the security community though it has been used to specify significant software systems including a subset of the Unix filing system <ref> [18] </ref>, the Computer Aided Visitor Information and Retrieval System [4], the ICL Data Dictionary [23], and a CICS System at IBM in the U.K. These examples suggest that Z might provide a viable specification language for secure systems. One goal of our research was to investigate this suggestion. <p> Our example is a previous specification of a subset of the Unix file system functionality <ref> [18] </ref> in Z and the translation of this specification into Gypsy. We compare and contrast the two specifications. <p> We chose a problem which had been specified by Z experts to present Z favorably; we wish to make it absolutely clear from the outset that all of the Z text in this paper is taken almost verbatim from <ref> [18] </ref>. <p> The Unix File System Example A specification in Z of part of the functionality of the Unix filing system is given in <ref> [18] </ref>. The system modeled is UNIX Level 6. Operations covered include nine system calls read, write, create, seek, open, close, fstat, link, and unlink and the commands ls and move. <p> Though we stop our exposition of the specifications here, the interested reader is invited to investigate the complete specifications. The Z version of the full spec is described in <ref> [18] </ref>. Our Gypsy version is available upon request. 4. Comparing the Specifications Our investigation of the UNIX Filing System example has highlighted various features of the two specification languages. Though the resulting specifications are superficially quite different, we have attempted to point out the underlying similarities. <p> These tools include a parser, database system, verification condition generator, interactive proof checker, and algebraic simplifier. A mechanical parser is particularly beneficial from the point of view of writing consistent specifications. We noticed in studying the Z Unix File System specification <ref> [18] </ref> that there was a least one 6 schema (createCS) which is referenced but never defined. This sort of oversight is very easy to eliminate with mechanical parsing. 4.6 Proofs about the Specifications For both languages, it is possible to do proofs about the specifications.
Reference: 19. <author> A.E. Siebert and D.I. </author> <title> Good. General Message Flow Modulator. </title> <type> Tech. </type> <institution> Rept. ICSCA-CMP-42, Institute for Computing Science, University of Texas at Austin, </institution> <month> March, </month> <year> 1984. </year>
Reference-contexts: Logic programming gives a procedural as well as a declarative interpretation to logical formulae. However, Z is a much richer language than typical logic programming languages. 17 Gypsy has been used for code level specification and verification on several projects. <ref> [21, 19] </ref> For these projects Gypsy was used as the implementation language and mechanically translated into Bliss which was then compiled. [20] Most current uses of Gypsy in the development of secure system applications, however, have been for specification at the design level.
Reference: 20. <author> L.M. Smith. </author> <title> Compiling from the Gypsy Verification Environment. </title> <type> Tech. </type> <institution> Rept. ICSCA-CMP-20, Institute for Computing Science, The University of Texas at Austin, </institution> <month> August, </month> <year> 1980. </year>
Reference-contexts: However, Z is a much richer language than typical logic programming languages. 17 Gypsy has been used for code level specification and verification on several projects. [21, 19] For these projects Gypsy was used as the implementation language and mechanically translated into Bliss which was then compiled. <ref> [20] </ref> Most current uses of Gypsy in the development of secure system applications, however, have been for specification at the design level. There is currently no Gypsy compiler available except a prototype verified compiler for a very small subset of the language [25].
Reference: 21. <author> M.K. Smith, A. Siebert, B. Divito, and D. </author> <title> Good. "A Verified Encrypted Packet Interface". </title> <booktitle> Software Engineering Notes 6, </booktitle> <month> 3 (July </month> <year> 1981). </year>
Reference-contexts: The GVE is one of two systems endorsed by the National Computer Security Center for use in meeting the verification requirements for A1 certification. It has been used extensively in secure system specification and verification projects including the Encrypted Packet Interface <ref> [21] </ref>, Message Flow Modulator [8], Honeywell SCOMP [5], Honeywell LOCK [1], and ACCAT Guard [14]. The Z specification language [9, 22] evolved within the Programming Research Group at Oxford University. <p> Logic programming gives a procedural as well as a declarative interpretation to logical formulae. However, Z is a much richer language than typical logic programming languages. 17 Gypsy has been used for code level specification and verification on several projects. <ref> [21, 19] </ref> For these projects Gypsy was used as the implementation language and mechanically translated into Bliss which was then compiled. [20] Most current uses of Gypsy in the development of secure system applications, however, have been for specification at the design level.
Reference: 22. <author> J.M. Spivey. </author> <title> Understanding Z: a Specification Language and its Formal Semantics. </title> <publisher> Cambridge University Press, </publisher> <year> 1988. </year>
Reference-contexts: It has been used extensively in secure system specification and verification projects including the Encrypted Packet Interface [21], Message Flow Modulator [8], Honeywell SCOMP [5], Honeywell LOCK [1], and ACCAT Guard [14]. The Z specification language <ref> [9, 22] </ref> evolved within the Programming Research Group at Oxford University.
Reference: 23. <author> Bernard Sufrin. </author> <title> Towards a Formal Specification of the ICL Data Dictionary. </title> <editor> In Ian Hayes, Ed., </editor> <title> Specification Case Studies, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1987, </year> <pages> pp. 189-217. 21 </pages>
Reference-contexts: We are not aware of its use within the security community though it has been used to specify significant software systems including a subset of the Unix filing system [18], the Computer Aided Visitor Information and Retrieval System [4], the ICL Data Dictionary <ref> [23] </ref>, and a CICS System at IBM in the U.K. These examples suggest that Z might provide a viable specification language for secure systems. One goal of our research was to investigate this suggestion.
Reference: 24. <author> J.C.P. Woodcock. </author> <title> Structuring Specifications: Notes on the Schema Notation. </title> <institution> Oxford University Computing Laboratory, </institution> <month> August, </month> <year> 1987. </year>
Reference-contexts: Z purports to offer a standard mathematical notation which is "easy for a scientifically trained reader to understand; is rigorous; denotes rich concepts; and is an open notation, because you can enlarge it at will" [9]. The basic structuring concept is the schema <ref> [24] </ref>. A schema is an association of variable declarations and observations about those variables. An observation merely expresses some relation among variables. An observation can be viewed as placing a constraint upon any implementation of the specification.
Reference: 25. <author> W.D. Young. </author> <title> A Verified Code Generator for a Subset of Gypsy. </title> <type> Tech. </type> <institution> Rept. CLI-33, CLInc, </institution> <month> November, </month> <year> 1988. </year>
Reference-contexts: There is currently no Gypsy compiler available except a prototype verified compiler for a very small subset of the language <ref> [25] </ref>. The result is that Gypsy design level specifications are translated by hand into C or some other suitable implementation language, an error-prone process [26]. <p> The VC's often bear little obvious relation to the code. However, this seems to be a necessary price for having procedural constructs in the language. It is possible to reason about procedural programs directly with respect to a formal semantics, but it is much more difficult to do so <ref> [25] </ref>. 5. Conclusions We have compared and contrasted two specification languages Gypsy and Z in light of a common example. Each provided some obvious advantages and disadvantages. Z allows the construction of very clear and elegant specifications. It has been used with good results in specifying large software systems.
Reference: 26. <author> W.D. Young, J. McHugh. </author> <title> Coding for a Believable Specification to Implementation Mapping. </title> <booktitle> Proceedings of the 1987 Symposium on Security and Privacy, IEEE, </booktitle> <year> 1987. </year> <title> Table of Contents </title>
Reference-contexts: There is currently no Gypsy compiler available except a prototype verified compiler for a very small subset of the language [25]. The result is that Gypsy design level specifications are translated by hand into C or some other suitable implementation language, an error-prone process <ref> [26] </ref>. Arguably, Gypsy has an advantage over Z in this process in that there is a clearer mapping from procedural Gypsy code to an implementation than from a non-procedural Z specification to an implementation.
Reference: 1. <institution> Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 </institution>
Reference-contexts: It has been used extensively in secure system specification and verification projects including the Encrypted Packet Interface [21], Message Flow Modulator [8], Honeywell SCOMP [5], Honeywell LOCK <ref> [1] </ref>, and ACCAT Guard [14]. The Z specification language [9, 22] evolved within the Programming Research Group at Oxford University.



Reference: 5. <institution> Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 i </institution>
Reference-contexts: The GVE is one of two systems endorsed by the National Computer Security Center for use in meeting the verification requirements for A1 certification. It has been used extensively in secure system specification and verification projects including the Encrypted Packet Interface [21], Message Flow Modulator [8], Honeywell SCOMP <ref> [5] </ref>, Honeywell LOCK [1], and ACCAT Guard [14]. The Z specification language [9, 22] evolved within the Programming Research Group at Oxford University.
References-found: 28

