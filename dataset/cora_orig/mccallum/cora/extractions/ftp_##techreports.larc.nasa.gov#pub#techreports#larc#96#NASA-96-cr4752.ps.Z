URL: ftp://techreports.larc.nasa.gov/pub/techreports/larc/96/NASA-96-cr4752.ps.Z
Refering-URL: http://www.csl.sri.com/pvs.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Using Formal Methods to Assist in the Requirements Analysis of the Space Shuttle GPS Change Request  
Author: Ben L. Di Vito Larry W. Roberts 
Date: August 1996  
Address: Hampton, Virginia 23681-0001  Houston, Texas  
Affiliation: Administration Langley Research Center  ViGYAN Inc. Hampton, Virginia  Lockheed Martin Space Information Systems  
Note: National Aeronautics and Space  NASA Contractor Report 4752  Prepared for Langley Research Center under Contracts NAS1-19341 and NAS9-18817  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Ricky W. Butler, James L. Caldwell, Victor A. Carreno, C. Michael Holloway, Paul S. Miner, and Ben L. Di Vito. </author> <title> NASA Langley's research and technology transfer program in formal methods. </title> <booktitle> In Tenth Annual Conference on Computer Assurance (COMPASS 95), </booktitle> <address> Gaithersburg, MD, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: We focus in this report on the formal methods-based analysis of a new Global Positioning System (GPS) navigation capability being added to the Shuttle [4]. This work was performed in the context of a broader program of formal methods activity at LaRC <ref> [1] </ref>. The effort consisted of formalizing selected Shuttle software (sub)system modifications and additions using the PVS specification language and interactive proof-checker [10]. Our objective was to explore and document the feasibility of formalizing critical Shuttle software requirements.
Reference: [2] <author> Judith Crow and Ben L. Di Vito. </author> <title> Formalizing space shuttle software requirements. </title> <booktitle> In Workshop on Formal Methods in Software Practice (FMSP '96), </booktitle> <pages> pages 40-48, </pages> <address> San Diego, California, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: The Space Shuttle program has been cooperating in several pilot projects to apply formal methods to real-world requirements analysis activities such as upgrades supporting the recent MIR docking missions, improved algorithms for newly automated three-engine-out contingency abort maneuvers (3E/O) <ref> [2, 3] </ref>, and the recent optimization of Reaction Control System Jet Selection (JS) [5]. We focus in this report on the formal methods-based analysis of a new Global Positioning System (GPS) navigation capability being added to the Shuttle [4].
Reference: [3] <author> Judy Crow. </author> <title> FiniteState Analysis of Space Shuttle Contingency Guidance Requirements. </title> <type> Technical Report SRI-CSL-95-17, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, California, </address> <month> December </month> <year> 1995. </year> <note> Also published as NASA Contractor Report 4741, </note> <month> May </month> <year> 1996. </year>
Reference-contexts: The Space Shuttle program has been cooperating in several pilot projects to apply formal methods to real-world requirements analysis activities such as upgrades supporting the recent MIR docking missions, improved algorithms for newly automated three-engine-out contingency abort maneuvers (3E/O) <ref> [2, 3] </ref>, and the recent optimization of Reaction Control System Jet Selection (JS) [5]. We focus in this report on the formal methods-based analysis of a new Global Positioning System (GPS) navigation capability being added to the Shuttle [4].
Reference: [4] <author> Ben L. Di Vito. </author> <title> Formalizing new navigation requirements for NASA's space shuttle. </title> <booktitle> In Formal Methods Europe (FME '96), </booktitle> <pages> pages 160-178, </pages> <address> Oxford, England, </address> <month> March </month> <year> 1996. </year> <note> Also Lecture Notes in Computer Science 1051, Springer. </note>
Reference-contexts: We focus in this report on the formal methods-based analysis of a new Global Positioning System (GPS) navigation capability being added to the Shuttle <ref> [4] </ref>. This work was performed in the context of a broader program of formal methods activity at LaRC [1]. The effort consisted of formalizing selected Shuttle software (sub)system modifications and additions using the PVS specification language and interactive proof-checker [10].
Reference: [5] <author> David Hamilton, Rick Covington, and John Kelly. </author> <title> Experiences in applying formal methods to the analysis of software and system requirements. </title> <booktitle> In WIFT '95: Workshop on IndustrialStrength Formal Specification Techniques, </booktitle> <pages> pages 30-43, </pages> <address> Boca Raton, FL, 1995. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: Shuttle program has been cooperating in several pilot projects to apply formal methods to real-world requirements analysis activities such as upgrades supporting the recent MIR docking missions, improved algorithms for newly automated three-engine-out contingency abort maneuvers (3E/O) [2, 3], and the recent optimization of Reaction Control System Jet Selection (JS) <ref> [5] </ref>. We focus in this report on the formal methods-based analysis of a new Global Positioning System (GPS) navigation capability being added to the Shuttle [4]. This work was performed in the context of a broader program of formal methods activity at LaRC [1].
Reference: [6] <author> Robyn R. Lutz and Yoko Ampo. </author> <title> Experience Report: Using Formal Methods for Requirements Analysis of Critical Spacecraft Software. </title> <booktitle> In 19th Annual Software Engineering Workshop, </booktitle> <pages> pages 231-248. </pages> <address> NASA GSFC, 1994. Greenbelt, MD. </address>
Reference-contexts: The goal of NASA's Formal Methods Demonstration Project for Space Applications is to find effective ways to use formal methods in requirements analysis and other phases of the development lifecycle <ref> [6, 7] </ref>.
Reference: [7] <institution> Multi-Center NASA Team from Jet Propulsion Laboratory, </institution> <note> Johnson Space Center, </note> <author> and Langley Research Center. </author> <title> Formal Methods Demonstration Project for Space Applications Phase I Case Study: Space Shuttle Orbit DAP Jet Select, </title> <month> December </month> <year> 1993. </year> <title> NASA Code Q Final Report. </title>
Reference-contexts: The goal of NASA's Formal Methods Demonstration Project for Space Applications is to find effective ways to use formal methods in requirements analysis and other phases of the development lifecycle <ref> [6, 7] </ref>.
Reference: [8] <author> National Aeronautics and Space Administration, </author> <title> Office of Safety and Mission Assurance, Washington, DC. Formal Methods Specification and Verification Guidebook for Software and Computer Systems, Volume I: Planning and Technology Insertion, </title> <month> July </month> <year> 1995. </year>
Reference-contexts: Formal methods play an important role in many activities including certification, reuse, and assurance. Additional background and overview material on formal methods can be found in a recent NASA guidebook <ref> [8] </ref>, excerpts of which appear below, and in Rushby's formal methods handbooks [11, 12]. 2.1 Range of Formal Methods Formal methods allow the logical properties of a computer system to be predicted from a mathematical model of the system by means of a logical calculation, which is a process analogous to
Reference: [9] <institution> National Research Council Committee for Review of Oversight Mechanisms for Space Shuttle Flight Software Processes, National Academy Press, </institution> <address> Washington, DC. </address> <booktitle> An Assessment of Space Shuttle Flight Software Development Practices, </booktitle> <year> 1993. </year> <month> 46 </month>
Reference-contexts: Such upgrades underscore the need recognized in the NASA community, and in a recent assessment of Shuttle flight software development, for "state-of-the-art technology" and "leading-edge methodologies" to meet the demands of software development for increasingly large and complex systems <ref> [9, p. 91] </ref>. Over the last three years, NASA has investigated the use of formal methods (FM) in space applications, as part of a three-center demonstration project involving the Langley Research Center (LaRC), the Jet Propulsion Laboratory (JPL), and the Johnson Space Center (JSC).
Reference: [10] <author> Sam Owre, John Rushby, Natarajan Shankar, and Friedrich von Henke. </author> <title> Formal verification for fault-tolerant architectures: Prolegomena to the design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 107-125, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: This work was performed in the context of a broader program of formal methods activity at LaRC [1]. The effort consisted of formalizing selected Shuttle software (sub)system modifications and additions using the PVS specification language and interactive proof-checker <ref> [10] </ref>. Our objective was to explore and document the feasibility of formalizing critical Shuttle software requirements. The key technical results of the project include a clear demonstration of the utility of formal methods as a complement to the conventional Shuttle requirements analysis process. <p> on analysis of early work products (e.g., requirements), the use of FM could potentially reduce lifecycle cost by augmenting or replacing ad-hoc techniques with more effective and systematic ones. 2.3 Prototype Verification System (PVS) PVS is an environment for formal specification and verification developed at SRI International's Computer Science Laboratory <ref> [10] </ref>. The following sections are excerpted from SRI's WorldWide Web description of PVS located at URL http://www.csl.sri.com/pvs/overview.html. <p> Those techniques were adapted to accommodate the needs of GPS for the Shuttle software. All work has been mechanically assisted by the PVS toolset <ref> [10] </ref>.
Reference: [11] <author> John Rushby. </author> <title> Formal methods and digital systems validation for airborne systems. </title> <type> NASA Contractor Report 4551, </type> <month> December </month> <year> 1993. </year>
Reference-contexts: Formal methods play an important role in many activities including certification, reuse, and assurance. Additional background and overview material on formal methods can be found in a recent NASA guidebook [8], excerpts of which appear below, and in Rushby's formal methods handbooks <ref> [11, 12] </ref>. 2.1 Range of Formal Methods Formal methods allow the logical properties of a computer system to be predicted from a mathematical model of the system by means of a logical calculation, which is a process analogous to numerical calculation.
Reference: [12] <author> John Rushby. </author> <title> Formal methods and their role in digital systems validation for airborne systems. </title> <type> NASA Contractor Report 4673, </type> <institution> NASA, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Formal methods play an important role in many activities including certification, reuse, and assurance. Additional background and overview material on formal methods can be found in a recent NASA guidebook [8], excerpts of which appear below, and in Rushby's formal methods handbooks <ref> [11, 12] </ref>. 2.1 Range of Formal Methods Formal methods allow the logical properties of a computer system to be predicted from a mathematical model of the system by means of a logical calculation, which is a process analogous to numerical calculation.
Reference: [13] <author> A. John van Schouwen. </author> <title> The A-7 Requirements Model: ReExamination for Real-Time Systems and an Application to Monitoring Systems. </title> <type> Technical Report 90-276, </type> <institution> Department of Computing and Information Science, Queen's University, Kingston, </institution> <address> Ontario, Canada, </address> <month> May </month> <year> 1990. </year> <month> 47 </month>
Reference-contexts: Each principal function is modeled as a state machine that takes inputs and local state values, and produces outputs and new state values. This method provides a simple computational model similar to popular state-based methods such the A-7 model <ref> [13] </ref>. One transition of the state machine model corresponds to one scheduled execution of the principal function, e.g., one cycle at rate 6.25 Hz or other applicable rate. All of the inputs to the principal function are bundled together and a similar bundling of the outputs is arranged.
References-found: 13

