URL: ftp://ftp.cs.washington.edu/pub/orca/papers/siam95.ps
Refering-URL: http://www.cs.washington.edu/research/projects/zpl/papers/abstracts/siam95.html
Root-URL: 
Title: A Portable Parallel N-body Solver  
Author: E Christopher Lewis Calvin Lin Lawrence Snyder George Turkiyyah 
Abstract: We present parallel solutions for direct and fast n-body solvers written in the ZPL language. We describe the direct solver, compare its performance against a sequential C program, and show performance results for two very different parallel machines: the KSR-2 and the Paragon. We also discuss the implementation of the fast solver in ZPL, including factors pertinent to data movement. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gail Alverson, William Griswold, David Notkin, and Lawrence Snyder. </author> <title> A flexible communication abstraction for nonshared memory parallel computing. </title> <booktitle> In Proceedings of Supercomputing '90, </booktitle> <month> November </month> <year> 1990. </year>
Reference-contexts: Similarly sequential functions can be promoted, i.e., applied to ensemble array arguments, which encourages code re-use. ZPL programs have sequential semantics, which allow them to be developed and debugged on workstations. The portability and good performance of ZPL programs stem from the parallel programming model|the Phase Abstractions <ref> [1, 3, 6] </ref>|upon which it is built. This programming model encourages locality of reference and parameterized control over granularity and communication. Previous studies have presented evidence that this model supports portability across diverse parallel machines [4].
Reference: [2] <author> Christopher R. Anderson. </author> <title> An implementation of the fast multipole method without multipoles. </title> <journal> SIAM Journal of Sci. Stat. Computing, </journal> <volume> 13(4) </volume> <pages> 923-947, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Fast solvers construct and evaluate these cluster approximations in a hierarchical fashion, much like multigrid solvers. The approximations we use are based on Poisson's formula <ref> [2] </ref>. The data structure consists of a hierarchy of distributed grids that store these ring approximations and transfer information between adjacent levels. <p> [1..N/2, 1..M/2]; -- N and M can be set at runtime R4 = [1..N, 1..M]; type part_list = record count: integer; list : array [1..Max] of particle; end; var vortices : [R4] part_list; ring4 : [R4] ring; ring3 : [R3] ring; A Portable Parallel N-body Solver 5 direction sw2 = <ref> [2, -2] </ref>; north = [-1, 0]; The implementation of this solver is similar to that of one V-cycle of a multigrid method. As shown below, a first sweep starts from the finest level and builds outer approximations of the velocity vector at all levels. <p> The compiler does not generate communication for "neighbors" that lie outside the data space (i.e., when the thick arrow enters the shaded region). The 3-neighbor communication is analogous, although not all 3-neighbors are needed. procedure visit_2_neighbors (var ring: <ref> [2] </ref> Box); -- ring is a 2D ensemble array var tmp : [R] Box; i : integer; begin 6 Lewis et al. tmp := ring; -- add the contributions of the 2-neighbors tmp := tmp@sw2; -- translate to southwest for i := 1 to 4 do tmp := tmp@north; add_contributions_OR_lm (ring,
Reference: [3] <author> William Griswold, Gail Harrison, David Notkin, and Lawrence Snyder. </author> <title> Scalable abstractions for parallel programming. </title> <booktitle> In Proceedings of the Fifth Distributed Memory Computing Conference, 1990. </booktitle> <address> Charleston, South Carolina. </address>
Reference-contexts: Similarly sequential functions can be promoted, i.e., applied to ensemble array arguments, which encourages code re-use. ZPL programs have sequential semantics, which allow them to be developed and debugged on workstations. The portability and good performance of ZPL programs stem from the parallel programming model|the Phase Abstractions <ref> [1, 3, 6] </ref>|upon which it is built. This programming model encourages locality of reference and parameterized control over granularity and communication. Previous studies have presented evidence that this model supports portability across diverse parallel machines [4].
Reference: [4] <author> Calvin Lin and Lawrence Snyder. </author> <title> A portable implementation of SIMPLE. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 20(5) </volume> <pages> 363-401, </pages> <year> 1991. </year>
Reference-contexts: This programming model encourages locality of reference and parameterized control over granularity and communication. Previous studies have presented evidence that this model supports portability across diverse parallel machines <ref> [4] </ref>. Finally, an important feature of ZPL is the flexibility to specify at runtime key parameters that can affect communication granularity and data mapping.
Reference: [5] <author> Calvin Lin and Lawrence Snyder. ZPL: </author> <title> An array sublanguage. </title> <editor> In Uptal Banerjee, David Gelernter, Alexandru Nicolau, and David Padua, editors, </editor> <booktitle> Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 96-114. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: However, the portability and performance of these languages have typically been established only for toy programs, and these languages have not been embraced by engineers and scientists interested in high performance computing. This paper demonstrates the feasibility of writing portable parallel programs in a high level language, ZPL <ref> [5] </ref>, to solve a realistic problem: the N-body solution kernel of a high Reynolds number wind engineering simulation. Using ZPL, the parallel application has a clean and concise solution that achieves good performance on two widely different parallel architectures: the Kendall Square KSR-2 and the Intel Paragon. <p> We conclude by examining adaptive techniques that would make the fast solver applicable to problems with more irregular point distributions. 2 The ZPL Language ZPL is an array sublanguage that provides support for data parallel computations <ref> [5] </ref>. As a sublanguage of Orca C|a lower level, more general language that supports MIMD parallelism|ZPL is free to be extremely clean and concise, avoiding any complicating features that do not pertain directly to data parallelism.
Reference: [6] <author> Lawrence Snyder. </author> <booktitle> Foundations of practical parallel programming languages. In Proceedings of the Second International Conference of the Austrian Center for Parallel Computation. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Similarly sequential functions can be promoted, i.e., applied to ensemble array arguments, which encourages code re-use. ZPL programs have sequential semantics, which allow them to be developed and debugged on workstations. The portability and good performance of ZPL programs stem from the parallel programming model|the Phase Abstractions <ref> [1, 3, 6] </ref>|upon which it is built. This programming model encourages locality of reference and parameterized control over granularity and communication. Previous studies have presented evidence that this model supports portability across diverse parallel machines [4].
Reference: [7] <author> George Turkiyyah, Dorothy Reed, and Jiyao Yang. </author> <title> Fast vortex methods for predicting wind-induced pressures on building systems. </title> <note> submitted for publication, </note> <year> 1993. </year>
Reference-contexts: Using ZPL, the parallel application has a clean and concise solution that achieves good performance on two widely different parallel architectures: the Kendall Square KSR-2 and the Intel Paragon. The context of the problem is a wind engineering simulation for studying wind effects on buildings <ref> [7] </ref>. The objective is to understand the temporal and spatial distributions of the velocity and pressure fields around buildings and building complexes, and to assess the significance of geometric effects (building shape, nearby buildings, etc.) on the wind response so that improved design recommendations can be developed.
References-found: 7

