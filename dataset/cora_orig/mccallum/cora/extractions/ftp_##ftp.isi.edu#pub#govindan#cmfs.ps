URL: ftp://ftp.isi.edu/pub/govindan/cmfs.ps
Refering-URL: http://www.isi.edu/~govindan/papers.html
Root-URL: http://www.isi.edu
Title: A File System for Continuous Media  
Author: DAVID P. ANDERSON Sonic Solutions YOSHITOMO OSAWA RAMESH GOVINDAN 
Keyword: Categories and Subject Descriptors: D.4.3 [Operating Systems]: File System Management access methods, file organization; D.4.8 [Operating Systems]: Organization and Design real-time systems General Terms: Algorithms, Design, Performance Additional Key Words and Phrases: Multimedia, disk scheduling  
Address: Berkeley  
Affiliation: Sony Corporation and  University of California at  
Abstract: The Continuous Media File System, CMFS, supports real-time storage and retrieval of continuous media data (digital audio and video) on disk. CMFS clients read or write files in ``sessions'', each with a guaranteed minimum data rate. Multiple sessions, perhaps with different rates, and non-real-time access can proceed concurrently. CMFS addresses several interrelated design issues: real-time semantics of sessions, disk layout, acceptance test for new sessions, and disk scheduling policy. We use simulation to compare different design choices. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Abbott, </author> <title> ``Efficient Editing of Digital Sound on Disk'', </title> <journal> J. Audio Eng. Soc. </journal> <volume> 32, </volume> <month> 6 (June </month> <year> 1984), </year> <month> 394. </month>
Reference-contexts: These projects do not concentrate on performance or scheduling issues, and the systems cannot make performance guarantees. Other projects have addressed performance but without hard guarantees. Abbott gives a qualitative discussion of disk scheduling for playback of multiple audio tracks <ref> [1] </ref>. He compares a ``balanced'' policy in which read-ahead is divided among sessions, to a shortest-seek-first policy. His analysis does not, however, provide an acceptance test or performance guarantees. Park and English [9] describe a system supporting single channel audio playback.
Reference: [2] <author> D. P. Anderson, </author> <title> ``Meta-Scheduling for Distributed Continuous Media'', </title> <institution> UC Berkeley, EECS Dept., </institution> <note> Technical Report No. UCB/CSD 90/599, </note> <month> Oct. </month> <year> 1990. </year> <month> 25 </month>
Reference-contexts: CMFS is meant to serve as part of a distributed system that handles integrated audio and video. End-to-end performance guarantees cannot, of course, be achieved by disk scheduling alone. CMFS conforms to the ``meta-scheduling'' model <ref> [2] </ref>, which provides a mechanism for making such guarantees. The role of CMFS in this larger context is discussed in Section 3. 2. CLIENT INTERFACE CMFS clients access real-time files in sessions. Each session has a FIFO buffer for data transfer between the client and CMFS. <p> To provide applications with deterministic end-to-end performance, we must integrate the scheduling of all these resources. CMFS is designed to serve as part of such a ``meta-scheduling'' scheme, the CM-resource model <ref> [2] </ref>. In this scheme, each resource can be reserved in ``sessions'' with fixed workload and delay bounds. The parameterization of workload and delay lets resources ``work ahead'' on real-time streams so they can response quickly to non-real-time workload.
Reference: [3] <author> D. P. Anderson and G. Homsy, </author> <title> ``A Continuous Media I/O Server and its Synchronization Mechanism'', </title> <booktitle> IEEE Computer, </booktitle> <month> Oct. </month> <year> 1991, </year> <pages> 51-57. </pages>
Reference-contexts: The I/O server on the workstation handles the synchronization; it begins output only when sufficient data has been received on each connection (as done, for example, by the ACME server <ref> [3] </ref>). CMFS handles this case with no client intervention: logical clocks pause during the initial synchronization period, and resume thereafter. g The client can, if the hardware is fast enough, read arbitrarily far ahead of the logical clock.
Reference: [4] <author> P. J. Denning, </author> <title> ``Effects of Scheduling on File Memory Operations'', </title> <booktitle> Proceedings of the AFIPS National Computer Conf. Proc. Spring Joint Computer Conference, </booktitle> <year> 1967, </year> <pages> 9-21. </pages>
Reference-contexts: Second, the scheduling policy could take disk head position into account in various ways. For example, it could yield a session ordering that is more efficient than smallest-workahead-first (Section 6.1). Similarly, the use of a policy such as SCAN <ref> [4] </ref> for ordering non-real-time operations could improve their performance. Although we have presented the CMFS algorithms in the context of a single-spindle disk drive, they are equally applicable to a disk array in which files are ``striped'' across multiple disks [10].
Reference: [5] <author> J. Gemmell and S. Christodoulakis, </author> <booktitle> ``Principles of Delay-Sensitive Multimedia Data Storage and Retrieval'', ACM TOIS 10, </booktitle> <month> 1 (Jan. </month> <year> 1992), </year> <pages> 51-90. </pages>
Reference-contexts: Yu et al. [15] discuss the layout of interleaved data streams with different data rates on a compact disk for guaranteed-performance playback. Their assumptions (single session, fixed rates, small buffers, no non-real-time traffic) are more restrictive than ours. Gemmell and Christodoulakis <ref> [5] </ref> describe a file system supporting multiple audio channel playback with concurrent non-real-time traffic. Like CMFS, this work provides a basis for hard performance guarantees. However, it differs from CMFS in several respects. The channels must have the same (constant) data rate and must start at the same time.
Reference: [6] <author> R. Govindan and D. P. Anderson, </author> <title> ``Scheduling and IPC Mechanisms for Continuous Media'', </title> <booktitle> Proc. of the 13th ACM Symp. on Operating System Prin., </booktitle> <address> Pacific Grove, California, </address> <month> Oct. </month> <pages> 14-16, </pages> <year> 1991, </year> <pages> 68-80. </pages>
Reference-contexts: Data is removed from the FIFO whenever the protocol allows it. If the client is a user-level process on the same machine as CMFS, the FIFO could be a shared-memory buffer or ``memory-mapped stream'' <ref> [6] </ref>. Finally, if the data is consumed by an I/O device on the same machine as CMFS, the FIFO might reside in kernel memory, accessed directly by the I/O device interrupt handler. These alternatives have different performance implications.
Reference: [7] <author> C. L. Liu and J. W. Layland, </author> <title> ``Scheduling Algorithms for Multiprogramming in a Hard-Real-Time Environment'', </title> <journal> J. ACM 20, </journal> <volume> 1 (1973), </volume> <pages> 47-61. </pages>
Reference-contexts: Such a policy must prevent starvation of current sessions, and must delay the return of the request_session () call for a newly accepted session until it is safe to do so. It should also handle non-real-time workload efficiently. Policies for real-time CPU scheduling, such as earliest-deadline-first <ref> [7] </ref>, are not immediately relevant because of seeks. In this section we describe several possible disk scheduling policies. Some of these policies are defined in terms of slack time, which we will now define. 6.1.
Reference: [8] <author> M. K. McKusick, W. N. Joy, S. J. Leffler and R. S. Fabry, </author> <title> ``A Fast File System for UNIX'', </title> <journal> ACM Transactions on Computer Systems 2, </journal> <month> 3 (Aug. </month> <year> 1984), </year> <pages> 181-197. </pages>
Reference-contexts: A contiguous layout policy is feasible for read-only file systems or if disk space is abundant. For more flexibility, a variant of the 4.2BSD UNIX file system layout <ref> [8] </ref> could be used. A real-time file might consist of clusters of n contiguous blocks, with every sequence of k clusters constrained to a single cylinder group. n and k are per-file parameters; they are related to the max_rate parameter of the file.
Reference: [9] <author> A. Park and P. </author> <title> English, ``A Variable Rate Strategy for Retrieving Audio Data From Secondary Storage'', </title> <booktitle> Proceedings of the International Conference on Multimedia Information Systems, </booktitle> <address> Singapore, </address> <month> Jan. </month> <year> 1991, </year> <pages> 135-146. </pages>
Reference-contexts: Abbott gives a qualitative discussion of disk scheduling for playback of multiple audio tracks [1]. He compares a ``balanced'' policy in which read-ahead is divided among sessions, to a shortest-seek-first policy. His analysis does not, however, provide an acceptance test or performance guarantees. Park and English <ref> [9] </ref> describe a system supporting single channel audio playback.
Reference: [10] <author> D. Patterson, G. Gibson and R. Katz, </author> <title> ``A Case for Redundant Arrays of Inexpensive Disks (RAID)'', </title> <booktitle> ACM SIGMOD 88, </booktitle> <address> Chicago, </address> <month> June </month> <year> 1988, </year> <pages> 109-116. </pages>
Reference-contexts: Similarly, the use of a policy such as SCAN [4] for ordering non-real-time operations could improve their performance. Although we have presented the CMFS algorithms in the context of a single-spindle disk drive, they are equally applicable to a disk array in which files are ``striped'' across multiple disks <ref> [10] </ref>. A client-level session could be composed of sessions on multiple disks, with each disk reserved and scheduled as described here. This could be used to provide sessions with data rates higher than those of the underlying disk drives.
Reference: [11] <author> P. V. Rangan and H. M. Vin, </author> <title> ``Designing File Systems For Digital Audio and Video'', </title> <booktitle> Proc. of the 13th ACM Symp. on Operating System Prin., </booktitle> <address> Pacific Grove, California, </address> <month> Oct. </month> <year> 1991, </year> <pages> 81-94. </pages>
Reference-contexts: For non-real-time traffic, this static policy may perform worse than CMFS because 1) CMFS can ``interrupt'' a WAS, allowing non-real-time traffic to start immediately, and 2) CMFS can use accumulated system slack to handle long bursts of non-real-time traffic. Rangan and Vin <ref> [11] </ref> describe a system that combines disk input and display-device output for multiple data streams. They give expressions for admission control under the assumption that streams have equal data rates. Their disk scheduling policy is similar to Static/Minimum. 9.
Reference: [12] <author> J. M. Roth, G. S. Kendall and S. L. Decker, </author> <title> ``A Network Sound System for UNIX'', </title> <booktitle> Proceedings of the 1985 International Computer Music Conference, Burnaby, </booktitle> <address> B.C., Canada, </address> <month> Aug. </month> <pages> 19-22, </pages> <year> 1985, </year> <pages> 61-67. </pages>
Reference-contexts: RELATED WORK Structural issues for multi-media files (sharing, parallel composition, annotations, etc.) have been addressed in the Xerox Etherphone system [14], the Sun Multimedia File System [13], and the Northwestern Network Sound System <ref> [12] </ref>. These projects do not concentrate on performance or scheduling issues, and the systems cannot make performance guarantees. Other projects have addressed performance but without hard guarantees. Abbott gives a qualitative discussion of disk scheduling for playback of multiple audio tracks [1].
Reference: [13] <author> D. Steinberg and T. Learmont, </author> <title> ``The Multimedia File System'', </title> <booktitle> Proc. 1989 International Computer Music Conference, </booktitle> <address> Columbus, Ohio, </address> <month> Nov. </month> <pages> 2-3, </pages> <year> 1989, </year> <pages> 307-311. </pages>
Reference-contexts: This problem can be solved by storing an initial segment of each sound file in memory. 8. RELATED WORK Structural issues for multi-media files (sharing, parallel composition, annotations, etc.) have been addressed in the Xerox Etherphone system [14], the Sun Multimedia File System <ref> [13] </ref>, and the Northwestern Network Sound System [12]. These projects do not concentrate on performance or scheduling issues, and the systems cannot make performance guarantees. Other projects have addressed performance but without hard guarantees. Abbott gives a qualitative discussion of disk scheduling for playback of multiple audio tracks [1].
Reference: [14] <author> D. B. Terry and D. C. Swinehart, </author> <title> ``Managing Stored Voice in the Etherphone System'', </title> <journal> Trans. Computer Systems 6, </journal> <month> 1 (Feb. </month> <year> 1988), </year> <pages> 3-27. </pages>
Reference-contexts: This problem can be solved by storing an initial segment of each sound file in memory. 8. RELATED WORK Structural issues for multi-media files (sharing, parallel composition, annotations, etc.) have been addressed in the Xerox Etherphone system <ref> [14] </ref>, the Sun Multimedia File System [13], and the Northwestern Network Sound System [12]. These projects do not concentrate on performance or scheduling issues, and the systems cannot make performance guarantees. Other projects have addressed performance but without hard guarantees.

References-found: 14

