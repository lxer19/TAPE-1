URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1995/1995-17.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: thomas@cs.ruu.nl  
Phone: Tel. 31 30 531454  
Title: Termination of constructor systems using semantic unification  
Author: Thomas Arts and Hans Zantema 
Address: P.O. Box 80.089 3508 TB Utrecht The Netherlands  Padualaan 14, P.O. Box 80.089, 3508 TB Utrecht, The Netherlands,  
Affiliation: Utrecht University Department of Computer Science  Utrecht University Department of Computer Science  
Pubnum: UU-CS-1995-17  
Abstract-found: 0
Intro-found: 1
Reference: [AM93] <author> G. Aguzzi and U. Modigliani. </author> <title> Proving termination of logic programs by transforming them into equivalent term rewriting systems. </title> <booktitle> Proceedings of FST&TCS 13, Lecture Notes in Computer Science(761):114-124, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: Krishna Rao et al. [KKS91], is to transform the logic program into a term rewrite system (TRS) such that the termination property is preserved. More precisely, if the TRS terminates, then the original well-moded logic program is left-terminating. Other authors followed this approach and came up with transformations <ref> [GW92, CR93, AM93, AZ94, Mar94] </ref> suitable for proving termination of more logic programs. Most transformation algorithms transform the logic programs into constructor systems (CSs), a subclass of the TRSs. This paper describes a technique that is able to prove termination of CSs.
Reference: [AZ94] <author> Thomas Arts and Hans Zantema. </author> <title> Termination of logic programs via labelled term rewrite systems. </title> <type> Technical Report UU-CS-1994-20, </type> <institution> Utrecht University, </institution> <address> PO box 80.089, 3508 TB Utrecht, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Krishna Rao et al. [KKS91], is to transform the logic program into a term rewrite system (TRS) such that the termination property is preserved. More precisely, if the TRS terminates, then the original well-moded logic program is left-terminating. Other authors followed this approach and came up with transformations <ref> [GW92, CR93, AM93, AZ94, Mar94] </ref> suitable for proving termination of more logic programs. Most transformation algorithms transform the logic programs into constructor systems (CSs), a subclass of the TRSs. This paper describes a technique that is able to prove termination of CSs. <p> This paper describes a technique that is able to prove termination of CSs. The technique is in particular suitable for, but not limited to, those CSs that are obtained from the transformation algorithm described in <ref> [AZ94] </ref>. <p> In <ref> [AZ94] </ref> we described an algorithm to transform well-moded logic programs into constructor systems and proved that termination of the logic program follows from termination of the obtained constructor system. Therefore, we concentrate on techniques to prove termination of constructor systems. <p> (ys 1 ; cons (y; ys 2 ))) ! k 4 (y; append (ys 1 ; ys 2 )) k 4 (y; appout (zs)) ! k 5 (y; perm (zs)) k 5 (y; permout (ys)) ! permout (cons (y; ys)) which is obtained by applying the transformation as described in <ref> [AZ94] </ref> on the logic program of Example 1.1. The set of defined symbols of this constructor system is fappend; k 1 ; split; k 2 ; perm; k 3 ; k 4 ; k 5 g; all other function symbols are constructor symbols. 3.1.
Reference: [CR93] <author> Maher Chtourou and Michael Rusinowitch. </author> <title> Methode transformation-nelle pour la preuve de terminaison des programmes logiques. Unpublished manuscript in French, </title> <year> 1993. </year>
Reference-contexts: Krishna Rao et al. [KKS91], is to transform the logic program into a term rewrite system (TRS) such that the termination property is preserved. More precisely, if the TRS terminates, then the original well-moded logic program is left-terminating. Other authors followed this approach and came up with transformations <ref> [GW92, CR93, AM93, AZ94, Mar94] </ref> suitable for proving termination of more logic programs. Most transformation algorithms transform the logic programs into constructor systems (CSs), a subclass of the TRSs. This paper describes a technique that is able to prove termination of CSs.
Reference: [Der87] <author> N. Dershowitz. </author> <title> Termination of rewriting. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 3(1) </volume> <pages> 69-116, </pages> <year> 1987. </year>
Reference-contexts: This technique is not applicable to all TRSs. For example it is not applicable to terminating TRSs that are not simply terminating. A direct consequence of the recursive path order (among others in <ref> [Der87, FZ94] </ref>) is the following theorem 2.8. Proposition. Let . be a well-founded order on the signature of a TRS R.
Reference: [dSD93] <author> Danny de Schreye and Stefaan Decorte. </author> <title> Termination of logic programs: The never-ending story. </title> <journal> Journal of Logic Programming, </journal> <volume> 12 </volume> <pages> 1-199, </pages> <year> 1993. </year>
Reference-contexts: 1. Introduction There are several approaches to prove termination of logic programs, for a survey see <ref> [dSD93] </ref>. One of the approaches, introduced by M.R.K. Krishna Rao et al. [KKS91], is to transform the logic program into a term rewrite system (TRS) such that the termination property is preserved. More precisely, if the TRS terminates, then the original well-moded logic program is left-terminating.
Reference: [FZ94] <author> Maria Ferreira and Hans Zantema. </author> <title> Syntactical analysis of total termination. </title> <booktitle> Proceedings of ALP'94, Lecture Notes in Computer Science(850):204-222, </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: This technique is not applicable to all TRSs. For example it is not applicable to terminating TRSs that are not simply terminating. A direct consequence of the recursive path order (among others in <ref> [Der87, FZ94] </ref>) is the following theorem 2.8. Proposition. Let . be a well-founded order on the signature of a TRS R.
Reference: [Gra93] <author> Bernhard Gramlich. </author> <title> Relating innermost, weak, uniform and modular termination of term rewriting systems. </title> <type> Technical Report SR-93-09, </type> <institution> Universitat Kaiserslautern, </institution> <month> June </month> <year> 1993. </year> <month> 15 </month>
Reference-contexts: A TRS is called finite if both F and R are finite. Constructor systems are a subclass of TRSs. 2.4. Definition (cf. [MT91], <ref> [Gra93] </ref>).
Reference: [GW92] <author> Harald Ganzinger and Uwe Waldmann. </author> <title> Termination proofs of well--moded logic programs via conditional rewrite systems. </title> <booktitle> Proceedings of CTRS, Lecture Notes in Computer Science(656):430-437, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: Krishna Rao et al. [KKS91], is to transform the logic program into a term rewrite system (TRS) such that the termination property is preserved. More precisely, if the TRS terminates, then the original well-moded logic program is left-terminating. Other authors followed this approach and came up with transformations <ref> [GW92, CR93, AM93, AZ94, Mar94] </ref> suitable for proving termination of more logic programs. Most transformation algorithms transform the logic programs into constructor systems (CSs), a subclass of the TRSs. This paper describes a technique that is able to prove termination of CSs.
Reference: [H 89] <author> S. Holldobler. </author> <title> Foundations of Equational Logic Programming, </title> <booktitle> volume 353 of Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1989. </year> <booktitle> Subseries of Lecture Notes in Computer Science. </booktitle>
Reference-contexts: So syntactical unification is semantical unification with empty E. Narrowing is a technique to solve equations t 1 = t 2 in the presence of an equational theory E. We will not discuss the technique, but refer to [Hul80, Klo92] for the basic principles of narrowing, and to <ref> [Sie89, H 89, Han94] </ref> for surveys in the area. Let E be an equational theory and t 1 = t 2 an equation in the presence of this theory. A substitution is called an E-unifier if t 1 = E t 2 .
Reference: [Han94] <author> M. Hanus. </author> <title> The intergration of functions into logic programming: From theory to practice. </title> <journal> Journal of Logic Programming, </journal> <volume> 19-20:583-628, </volume> <year> 1994. </year>
Reference-contexts: So syntactical unification is semantical unification with empty E. Narrowing is a technique to solve equations t 1 = t 2 in the presence of an equational theory E. We will not discuss the technique, but refer to [Hul80, Klo92] for the basic principles of narrowing, and to <ref> [Sie89, H 89, Han94] </ref> for surveys in the area. Let E be an equational theory and t 1 = t 2 an equation in the presence of this theory. A substitution is called an E-unifier if t 1 = E t 2 .
Reference: [Hul80] <author> J.M. Hullot. </author> <title> Canonical forms and unification. </title> <booktitle> 5th International Conference on Automated Deduction, Lecture Notes in Computer Science(87):318-334, </booktitle> <year> 1980. </year>
Reference-contexts: So syntactical unification is semantical unification with empty E. Narrowing is a technique to solve equations t 1 = t 2 in the presence of an equational theory E. We will not discuss the technique, but refer to <ref> [Hul80, Klo92] </ref> for the basic principles of narrowing, and to [Sie89, H 89, Han94] for surveys in the area. Let E be an equational theory and t 1 = t 2 an equation in the presence of this theory.
Reference: [KKS91] <author> M.R.K. Krishna Rao, Deepak Kapur, and R.K. Shyamasundar. </author> <title> A transformational methodology for proving termination of logic programs. </title> <booktitle> Proceedings of CSL, Lecture Notes in Computer Science(626):213-226, </booktitle> <year> 1991. </year>
Reference-contexts: 1. Introduction There are several approaches to prove termination of logic programs, for a survey see [dSD93]. One of the approaches, introduced by M.R.K. Krishna Rao et al. <ref> [KKS91] </ref>, is to transform the logic program into a term rewrite system (TRS) such that the termination property is preserved. More precisely, if the TRS terminates, then the original well-moded logic program is left-terminating.
Reference: [Klo92] <author> J.W. Klop. </author> <title> Term rewriting systems. </title> <editor> In S. Abramsky, D.M. Gab-bay, and T.S.E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 2, </volume> <pages> pages 1-116. </pages> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: So syntactical unification is semantical unification with empty E. Narrowing is a technique to solve equations t 1 = t 2 in the presence of an equational theory E. We will not discuss the technique, but refer to <ref> [Hul80, Klo92] </ref> for the basic principles of narrowing, and to [Sie89, H 89, Han94] for surveys in the area. Let E be an equational theory and t 1 = t 2 an equation in the presence of this theory. <p> To perform as much as possible automatically, we want to have an effective method for this E-unification. Therefore, we demand that the equational theory can be described by a complete TRS M, such that narrowing <ref> [Sie89, Klo92] </ref> suffices to check whether R is contained in the equational theory. Note that, although many efficient narrowing strategies exist, finding all E-unifiers of a given equation is in general undecidable. In Section 4.3 we shortly discuss this. <p> All dependency pairs are premated. With the embedding order we can show that all basic chains, and with Corollary 4.4 all chains, are descending. Hence, the constructor system is terminating. 4.3. Narrowing Efficient methods based on narrowing strategies to solve systems of equations have been devised <ref> [Klo92, Sie89] </ref>. For the purpose of our technique we may 14 use any narrowing strategy. Although the equational theories that we consider are of a very specific form, we know no strategy that will always succeed in giving all most general E-unifiers for any equational theory E.
Reference: [Mar94] <author> Massimo Marchiori. </author> <title> Logic programs as term rewrite systems. </title> <booktitle> Proceedings of ALP'94, Lecture Notes in Computer Science(850):223-241, </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: Krishna Rao et al. [KKS91], is to transform the logic program into a term rewrite system (TRS) such that the termination property is preserved. More precisely, if the TRS terminates, then the original well-moded logic program is left-terminating. Other authors followed this approach and came up with transformations <ref> [GW92, CR93, AM93, AZ94, Mar94] </ref> suitable for proving termination of more logic programs. Most transformation algorithms transform the logic programs into constructor systems (CSs), a subclass of the TRSs. This paper describes a technique that is able to prove termination of CSs.
Reference: [MT91] <author> Aart Middeldorp and Yoshihito Toyama. </author> <title> Completeness of combinations of constructor systems. </title> <booktitle> Proceedings of RTA-91, Lecture Notes in Computer Science(488):188-199, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: A TRS is called finite if both F and R are finite. Constructor systems are a subclass of TRSs. 2.4. Definition (cf. <ref> [MT91] </ref>, [Gra93]).
Reference: [Sie89] <author> J.H. Siekmann. </author> <title> Unification theory. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 7 </volume> <pages> 207-274, </pages> <year> 1989. </year>
Reference-contexts: So syntactical unification is semantical unification with empty E. Narrowing is a technique to solve equations t 1 = t 2 in the presence of an equational theory E. We will not discuss the technique, but refer to [Hul80, Klo92] for the basic principles of narrowing, and to <ref> [Sie89, H 89, Han94] </ref> for surveys in the area. Let E be an equational theory and t 1 = t 2 an equation in the presence of this theory. A substitution is called an E-unifier if t 1 = E t 2 . <p> To perform as much as possible automatically, we want to have an effective method for this E-unification. Therefore, we demand that the equational theory can be described by a complete TRS M, such that narrowing <ref> [Sie89, Klo92] </ref> suffices to check whether R is contained in the equational theory. Note that, although many efficient narrowing strategies exist, finding all E-unifiers of a given equation is in general undecidable. In Section 4.3 we shortly discuss this. <p> All dependency pairs are premated. With the embedding order we can show that all basic chains, and with Corollary 4.4 all chains, are descending. Hence, the constructor system is terminating. 4.3. Narrowing Efficient methods based on narrowing strategies to solve systems of equations have been devised <ref> [Klo92, Sie89] </ref>. For the purpose of our technique we may 14 use any narrowing strategy. Although the equational theories that we consider are of a very specific form, we know no strategy that will always succeed in giving all most general E-unifiers for any equational theory E.
Reference: [Zan93] <author> Hans Zantema. </author> <title> Termination of term rewriting by semantic labelling. </title> <type> Technical Report RUU-CS-93-24, </type> <institution> Utrecht University, </institution> <month> July </month> <year> 1993. </year> <note> Accepted for special issue on term rewriting of Fundamenta Informaticae. </note>
Reference-contexts: Find a well-founded order that is closed under substitution that satisfies these requirements. Termination of R then follows from Theorem 3.6. Before we present this the orem, we first introduce semantic labelling, as it is needed in the proof of the theorem. 3.4. Semantic labelling Semantic labelling <ref> [Zan93] </ref> is a technique to transform a TRS, of which termination has to be proved, into a TRS that might be easier to prove terminating. The transformation is sound and complete with respect to termination, such that termination of the TRS may be concluded from termination of the transformed TRS. <p> Since we are mainly interested in constructor systems, we describe semantic labelling in this section restricted to constructor systems. For a complete and more detailed description of the technique we refer to <ref> [Zan93] </ref>. For the reader who is already familiar with the technique, we can remark that we perform a self-labelling on all defined symbols. <p> It is not hard to see that R is indeed a constructor system with D as set of defined symbols and C as set of constructor symbols. The following proposition directly follows from the main result of semantic labelling (for a proof we refer to <ref> [Zan93] </ref>). 3.5. Proposition. Let M be a model for a CS R and let R be defined as above.
Reference: [Zan94] <author> H. Zantema. </author> <title> Termination of term rewriting: interpretation and type elimination. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 17 </volume> <pages> 23-50, </pages> <year> 1994. </year> <note> Our technical reports are available at http://www.cs.ruu.nl/ 16 </note>
Reference-contexts: These rules are called the embedding rules. A stronger notion of termination, called simple termination, can be defined. This definition is motivated by <ref> [Zan94] </ref>. 3 2.7. Definition. A TRS R over a set F of function symbols is called simply terminating if R [ Emb (F ) is terminating. A standard technique to prove termination of TRSs, of which several implementations exist, is called RPO (recursive path order).
References-found: 18

