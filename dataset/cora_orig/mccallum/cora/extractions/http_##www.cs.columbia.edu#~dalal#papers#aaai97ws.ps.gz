URL: http://www.cs.columbia.edu/~dalal/papers/aaai97ws.ps.gz
Refering-URL: http://www.cs.columbia.edu/~dalal/papers.html
Root-URL: http://www.cs.columbia.edu
Email: Email: fdalal, lyangg@cs.columbia.edu.  
Phone: Phone: (212) 939f7114, 7116g  
Author: Mukesh Dalal and Li Yang 
Address: New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  
Abstract: Preliminary Empirical Results on Anytime Propositional Reasoning (Abstract) fl Abstract An anytime family of propositional reasoners is a sequence ` 0 ; ` 1 ; : : : of inference relations such that each ` k is sound, tractable, and makes more inferences than ` k1 , and each theory has a complete reasoner in the family. Anytime families are useful for resource-bounded reasoning in knowledge representation systems. We describe implementations of an anytime family f` k g of clausal propositional reasoners using three different strategies. We present empirical results comparing the three strategies, the completeness of reasoning, the time for making inferences, and the space used for reasoning. Our results show that the reasoners with higher values of k infer significantly more formulas than reason-ers with lower values of k, and the time for inferencing decreases significantly as k is increased from 0 to 2. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Boddy, M., and Dean, T. </author> <year> 1988. </year> <title> Solving time dependent planning problems. </title> <type> Technical report, </type> <institution> Dept. of Computer Science, Brown University. </institution>
Reference-contexts: The incompleteness of these rea-soners make them unsuitable for several tasks where more inferences are needed (Doyle & Patil 1991). An attractive approach that is tractable as well as complete in the limit is based on the notion of anytime reasoners <ref> (Boddy & Dean 1988) </ref>. They are complete reasoners that provide partial answers even if stopped prematurely; the degree of completeness of the answer improves with the time used in computing the answer. They are often used for providing a quick first cut to a problem, which can be later improved.
Reference: <author> Cadoli, M. </author> <year> 1996. </year> <title> Panel on knowledge compilation and approximations: terminology, questions, and references. </title> <booktitle> In Fourth International Symposium on Artificial Intelligence and Mathematics (AI/MATH-96), </booktitle> <pages> 183186. </pages>
Reference: <author> Crawford, J., ed. </author> <year> 1992. </year> <booktitle> Proceedings of the AAAI Workshop on Tractable Reasoning. </booktitle> <address> San Jose, California: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference-contexts: Introduction Since deductive reasoning is intractable for propositional knowledge representation systems, several tractable approaches for making incomplete inferences have been proposed <ref> (Crawford 1992) </ref>. The incompleteness of these rea-soners make them unsuitable for several tasks where more inferences are needed (Doyle & Patil 1991). An attractive approach that is tractable as well as complete in the limit is based on the notion of anytime reasoners (Boddy & Dean 1988).
Reference: <author> Dalal, M., and Feng, Y. </author> <year> 1996. </year> <title> Anytime temporal reasoning based on propositional satisfiability (extended abstract). </title> <editor> In Freuder, E. C., ed., </editor> <booktitle> Proceedings of Second International Conference on Principles and Practice of Constraint Programming (CP96), 535536. </booktitle> <address> Cambridge, Mas-sachusetts: </address> <publisher> Springer. </publisher>
Reference-contexts: The data shows that the sizes increase with increase in level, as expected. Conclusions We presented some empirical results demonstrating that vivification using BCP increases the completeness as well as efficiency of reasoning, at least until Level 2. We have used vivification for anytime temporal reasoning <ref> (Dalal & Feng 1996) </ref>. Our current work involves removing redundant clauses to offset the increases in sizes of the theories.
Reference: <author> Dalal, M. </author> <year> 1996a. </year> <note> Anytime clausal reasoning. Submitted to Annals of Mathematics and Artificial Intelligence. </note>
Reference: <author> Dalal, M. </author> <year> 1996b. </year> <title> Anytime families of tractable propositional reasoners. </title> <booktitle> In Fourth International Symposium on Artificial Intelligence and Mathematics (AI/MATH-96), </booktitle> <pages> 4245. </pages>
Reference: <author> Dalal, M. </author> <year> 1996c. </year> <title> Semantics of an anytime family of rea-soners. </title> <editor> In Wahlster, W., ed., </editor> <booktitle> Proceedings Twelveth Eu-ropean Conference on Artificial Intelligence (ECAI 96), 360364. </booktitle> <address> Budapest, Hungary: </address> <publisher> John Wiley and Sons, Ltd. </publisher>
Reference-contexts: In contrast to some other resource-bounded approaches (for example, see (Zilberstein 1993)) for dealing with limited computational resources, our anytime approach does not provide explicit quality measures with the answers, but instead provides semantic justifications <ref> (Dalal 1996c) </ref>. In particular, each reasoner ` k is also characterized by a model-theoretic semantics. Since our family f` k g is defined using boolean constraint propagation (BCP) (McAllester 1990), the semantics of each ` k is based on the semantics of BCP (Dalal 1996d). <p> Note that Viv (; k) augments the theory , rather than replacing it, by the theory lfp (T ;k ), since this allows more clauses to be inferred from it using ` BCP . In <ref> (Dalal 1996c) </ref>, we show that for any theory , any clause , and any number k: Viv (; k) and Viv (; k) ` BCP iff ` k . Thus, vivification can be used for anytime reasoning using the family f` k g of reasoners.
Reference: <author> Dalal, M. </author> <year> 1996d. </year> <title> Semantics of an efficient propositional reasoner: Preliminary report. </title> <editor> In Stewman, J. H., ed., </editor> <booktitle> Proceedings Ninth Florida AI Research Symposium (FLAIRS-96), </booktitle> <pages> 101105. </pages>
Reference-contexts: In particular, each reasoner ` k is also characterized by a model-theoretic semantics. Since our family f` k g is defined using boolean constraint propagation (BCP) (McAllester 1990), the semantics of each ` k is based on the semantics of BCP <ref> (Dalal 1996d) </ref>. In this document, we describe implementations of our anytime family f` k g of reasoners using three different strategies. We present empirical results comparing the three strategies, the completeness of reasoning, the time for making inferences, and the space used for reasoning.
Reference: <author> Doyle, J., and Patil, R. </author> <year> 1991. </year> <title> Two theses of knowledge representation: language restrictions, taxanomic classification, and the utility of representation services. </title> <journal> Artificial Intelligence 48(3):261297. </journal>
Reference-contexts: Introduction Since deductive reasoning is intractable for propositional knowledge representation systems, several tractable approaches for making incomplete inferences have been proposed (Crawford 1992). The incompleteness of these rea-soners make them unsuitable for several tasks where more inferences are needed <ref> (Doyle & Patil 1991) </ref>. An attractive approach that is tractable as well as complete in the limit is based on the notion of anytime reasoners (Boddy & Dean 1988).
Reference: <author> Dubois, O.; Andre, P.; Boufkhad, Y.; and Carlier, J. </author> <year> 1995. </year> <title> SAT versus UNSAT. </title> <booktitle> DIMACS series in Discrete MAthematics and Theoretical Computer Science 24. </booktitle>
Reference-contexts: If pos falls to 0, it means that no new clause of current size can be generated. Among all possible choices at any position, the literal which occurs most often is chosen. We have tried another strategy <ref> (Dubois et al. 1995) </ref> that uses the weighted counts of both the literal and its negation. In Section 4, we provide empirical evidence that our strategy is faster than the one with weighted counts. Procedure Ask-Lit (lit) determines whether lit is entailed using BCP from the current theory.
Reference: <author> Levesque, H. </author> <year> 1986. </year> <title> Making believers out of computers. </title> <journal> Artificial Intelligence 30:81108. </journal>
Reference-contexts: We have shown that any theory can be transformed into a logically equivalent theory from which BCP can make all allowed inferences such theories are called vivid. The term vivid is inspired by <ref> (Levesque 1986) </ref>, where vivid theories are ones where an answer can be read off quickly. For a knowledge base that is accessed frequently, it might be useful to compile its theory into an equivalent vivid theory (Selman, Levesque, & Mitchell 1992; Cadoli 1996).
Reference: <author> McAllester, D. </author> <year> 1990. </year> <title> Truth maintenance. </title> <booktitle> In Proceedings Eighth National Conference on Artificial Intelligence (AAAI-90), </booktitle> <pages> 11091116. </pages>
Reference-contexts: In particular, each reasoner ` k is also characterized by a model-theoretic semantics. Since our family f` k g is defined using boolean constraint propagation (BCP) <ref> (McAllester 1990) </ref>, the semantics of each ` k is based on the semantics of BCP (Dalal 1996d). In this document, we describe implementations of our anytime family f` k g of reasoners using three different strategies.
Reference: <author> Mendelson, E. </author> <year> 1964. </year> <note> Introduction to Mathematical Logic. </note>
Reference-contexts: Our algorithms for anytime reasoning are based on partial vivification. A Family of Anytime Reasoners In this section, we review the definitions of the anytime family and vivification (Dalal 1996b; 1996c). For this, we restrict our attention to clausal propositional theories <ref> (Mendelson 1964) </ref>, that is, a theory is a set of propositional clauses. The empty clause is denoted by f . Clausal boolean constraint propagation (BCP) is a variant of unit resolution.
Reference: <institution> Princeton, </institution> <address> N.J.: </address> <publisher> Van Nostrand. </publisher>
Reference: <author> Selman, B.; Levesque, H.; and Mitchell, D. </author> <year> 1992. </year> <title> A new method for solving hard satisfiability problems. </title> <booktitle> In Proceedings Tenth National Conference on Artificial Intelligence (AAAI-92), </booktitle> <pages> 440446. </pages>
Reference: <author> Tarski, A. </author> <year> 1955. </year> <title> A lattice-theoretical fixpoint theorem and its applications. </title> <journal> Pacific J. Math. 5:285309. </journal>
Reference-contexts: The operator T ;k on any set S of k-clauses produces the set of k-clauses that can be BCP-inferred from [ S, that is: Since T ;k is a monotonic operator over a finite lattice, it has a least fixpoint <ref> (Tarski 1955) </ref>, which we denote by lfp (T ;k ). We will refer to lfp (T ;k ) as the kth fixpoint of ; k is said to be the index of this fixpoint.
Reference: <author> Zhang, H., and Stickel, M. E. </author> <year> 1996. </year> <title> An efficient algorithm for unit propagation. </title> <booktitle> In Fourth International Symposium on Artificial Intelligence and Mathematics (AI/MATH-96), </booktitle> <pages> 166169. </pages>
Reference-contexts: Procedure BCP 1. while Stack is not empty do 2. lit = pop (Stack); 3. for all cls in Head (lit) do 4. ShortenHead (cls); 5. for all cls in Tail (lit) do 6. ShortenTail (cls); end (BCP). For each literal popped from the Stack, BCP (see <ref> (Zhang & Stickel 1996) </ref>) unit-resolves on the clauses having the negation of the literal either as the first (head) or the last atom (tail). Procedure ShortenHead (cls) examines the clause cls from its second literal to the last one.
Reference: <author> Zilberstein, S. </author> <year> 1993. </year> <title> Operational Rationality through Compilation of Anytime Algorithms. </title> <type> Ph.D. Dissertation, </type> <institution> University of California, Berkeley, California. </institution>
Reference-contexts: In contrast to some other resource-bounded approaches (for example, see <ref> (Zilberstein 1993) </ref>) for dealing with limited computational resources, our anytime approach does not provide explicit quality measures with the answers, but instead provides semantic justifications (Dalal 1996c). In particular, each reasoner ` k is also characterized by a model-theoretic semantics.
References-found: 18

