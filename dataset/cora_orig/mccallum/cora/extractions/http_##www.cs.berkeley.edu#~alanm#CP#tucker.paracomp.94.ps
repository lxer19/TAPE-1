URL: http://www.cs.berkeley.edu/~alanm/CP/tucker.paracomp.94.ps
Refering-URL: http://www.cs.berkeley.edu/~alanm/CP/bib.html
Root-URL: 
Title: CMMD: Active Messages on the CM-5  
Author: Lewis W. Tucker and Alan Mainwaring 
Keyword: Message passing, active messages, massively parallel systems  
Affiliation: Thinking Machines Corporation  
Date: December 21, 1993  November 7, 1993  
Abstract: Active messages provide an important new communication primitive for building message passing systems. CMMD, the message passing system of the CM-5, uses active messages as a basic substrate for constructing multiple, low overhead, communication paradigms. Examples are also given which show how developers may incorporate active messages in application-specific ways. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Eicken, T., Culler, D., Goldstein, S. and Schauser, K. </author> <title> Active Messages: A mechanism for integrated communication and computation. </title> <booktitle> In Proceedings of the Nine teenth International Symposium on Computer Architecture. </booktitle> <publisher> ACM Press (May 1992). </publisher>
Reference-contexts: Active Messages 2 CMMD: Active Messages on the CM-5 2. Active Messages Active messages have their origin in the Threaded Abstraction Machine (TAM) work of Culler et al. at the University of California, Berkeley <ref> [1] </ref>. Originally designed to support a data ow execution model, active messages are used on the CM-5 as a unifying paradigm for a multitude of communication modalities.
Reference: 2. <institution> Thinking Machines Corporation, </institution> <type> Connection Machine CM-5 Technical Summary. </type> <month> (November </month> <year> 1993). </year> <title> TABLE 3. Remote Table Lookup Distance Time (microseconds) 0-3 8.0 16-63 10.4 References CMMD: Active Messages on the CM-5 19 </title>
Reference-contexts: Application writers are free to develop their own communication methods. 4. CM-5 Communications Architecture The CM-5 processor network interface and communication networks are specifically designed for low-latency communication between processing elements <ref> [2] </ref>. Two networks are used: a Data Router Network (DR) for point-to-point communication, and a Active Messages on the CM-5 4 CMMD: Active Messages on the CM-5 Control Network (CN) for cooperative operations such as broadcast, reduce, and sync. <p> The receiving process may selectively choose whether the arrival of a packet interrupts or not. The CM-5s CMOST operating system supports a Single Program, Multiple Data (SPMD) parallel processing model. A parallel task consists of two parts: a host process and a set of node processes <ref> [2] </ref>. The host process executes on a CM-5 partition manager. Node processes, although executing from identical process images, exercise independent threads of control. The host and node processes are gang-scheduled by the CMOST operating system. CMMD provides message passing within the set of processes making up the parallel task. 5.
Reference: 3. <author> Leiserson, C.E., et al. </author> <title> The network architecture of the connection machine CM-5. </title> <booktitle> In the Fourth Annual ACM Symposium on Parallel Algorithms and Architecture (June 1992). </booktitle>
Reference-contexts: To avoid potential deadlock when fetching remote data, the DR is actually implemented as two independent, left and right networks. Requests for data can be sent on one network, while responses are delivered on the other. The network topology is that of a fat-tree <ref> [3] </ref>. The CM-5 Network Interface (NI) is a memory-mapped device. Each NI responds to a range of processor memory bus addresses. Operating systems map this address region into kernel and user virtual address spaces. <p> This provides maximum bisection bandwidth, and dynamically balances usage of sending and receive resources. In other cases, in order to construct deadlock-free remote memory access, it is necessary to restrict certain message types to either the left or right networks <ref> [3] </ref>. CMAML therefore maps these two networks according to a request and reply usage model. CMAML_request () and CMAML_reply () are used for this purpose to send active messages on their corresponding subnetworks.
Reference: 4. <author> Stuettgen, Wilfried. </author> <title> Personal communication. For information regarding PAR-MACS for the CM-5 contact wilfried@think.com. </title>
Reference-contexts: arg0 arg2 Data Address Data 0 Data 1 Data 2 Data 3 Data Deposit Function invoked upon packet receipt Data deposited upon packet receipt CMMD Message Passing Library 6 CMMD: Active Messages on the CM-5 such library that has been implemented on the CM-5 using the active message passing interface <ref> [4] </ref>. The separation of protocol from data transport not only simplifies the implementation of different message passing paradigms, it also allows the application developer to skip the protocol processing steps entirely when they are not needed.
Reference: 5. <institution> Thinking Machines Corporation, </institution> <note> CMMD Reference Manual V 3.0. </note> <month> (May </month> <year> 1993). </year> <title> The authors wish the express their appreciation to the developers of CMMD at Thinking Machines: </title> <note> Adam Greenberg, </note> <author> Alan Mainwaring, Randy Smith, Mike Drumheller, Gary Drescher, Greg Kaufman, and Mike Best. </author> <title> Authors Tucker and Mainwaring may be reached via email using tucker@think.com and amm@think.com </title>
Reference-contexts: To facilitate the portability of programs between different architectures, CMMD contains many of the features found in the Intel NX, nCUBE, and Parasoft Express environments. As of CMMD V3.0, the library contains over 140 functions including those for parallel I/O <ref> [5] </ref>. Programming language interfaces are provided for C, C++, FORTRAN 77, and the parallel languages C* and CM Fortran. For the purposes of this paper only a subset of the functions are discussed here. Send/Receive. These functions provide traditional point-to-point message passing and inquiry functions. Virtual channels.
References-found: 5

