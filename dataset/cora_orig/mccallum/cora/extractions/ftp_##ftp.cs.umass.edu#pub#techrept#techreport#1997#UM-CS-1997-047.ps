URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1997/UM-CS-1997-047.ps
Refering-URL: http://laser.cs.umass.edu/abstracts/97-047.html
Root-URL: 
Email: fshan, lerner, clarkeg@cs.umass.edu  
Phone: +1 413 545 3787  
Title: An Evaluation of Object Management System Architectures for Software Engineering Applications  
Author: Jayavel Shanmugasundaram, Barbara Staudt Lerner, Lori Clarke 
Keyword: Distributed object management, experimental evaluation  
Address: Amherst, MA 01003 USA  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: Software engineering applications require sophisticated object management system support for creating and manipulating software objects. One of the key issues for object management systems is distribution. Address- ing this issue in the context of software engineering applications is particularly challenging because they have widely varying object access profiles. Two fundamental approaches to dealing with distribution are the object server architecture, where objects are shipped to the application program, and the operation server architecture, where operation requests are shipped to where the objects reside. We compare these architectures experimentally to determine the conditions under which each performs better. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Ambriola, R. Conradi, A. </author> <title> Fuggetta. </title> <journal> Assessing process-centered software engineering environ-ments. ACM Transactions on Software Engineering and Methodology, </journal> <volume> 6(3) </volume> <pages> 283-328, </pages> <month> (July </month> <year> 1997). </year>
Reference-contexts: With the advent of global networking, software engineering activities are becoming increasingly distributed as can be witnessed in new and emerging applications such as collaborative software engineering (e.g., [2, 7, 9, 10]) and software processes (e.g., <ref> [1, 6] </ref>). As a result, one of the key issues to be addressed by object management systems for software engineering is distribution, where objects and the application programs accessing the objects are located on different machines, perhaps located at various geographical sites.
Reference: [2] <author> S. Bandinelli, E. Di Nitto, A. Fuggetta. </author> <title> Supporting cooperation in the SPADE-1 Environment. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(12) </volume> <pages> 9-20, </pages> <month> (December </month> <year> 1996). </year>
Reference-contexts: With the advent of global networking, software engineering activities are becoming increasingly distributed as can be witnessed in new and emerging applications such as collaborative software engineering (e.g., <ref> [2, 7, 9, 10] </ref>) and software processes (e.g., [1, 6]). As a result, one of the key issues to be addressed by object management systems for software engineering is distribution, where objects and the application programs accessing the objects are located on different machines, perhaps located at various geographical sites.
Reference: [3] <author> D. DeWitt, P. Futtersack, D. Maier, F. Velez. </author> <title> A study of three alternative workstation-server archi-tectures for object-oriented database systems. </title> <booktitle> Proceedings of the 16th VLDB Conference, </booktitle> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: These two approaches, which we call the object server architecture and the operation server architecture respectively, represent two ends in a spectrum of architectures for distributed object management systems. Most object oriented databases use an architecture similar to the object server architecture <ref> [3, 4] </ref> while most relational databases use an architecture similar to the operation server architecture [12]. Addressing this issue of distribution is particularly challenging in the context of software engineering applications because they have widely varying object access profiles, unlike most traditional database applications. <p> The architecture is so named because the interaction between the client and the server is at the level of objects. This architecture is similar to the "data-shipping" architecture commonly used in object oriented database systems <ref> [3] </ref>. <p> The empirical model also needs to be validated using actual application programs. Further, the empirical model does not currently take into account the effects of caching strategies. Sophisticated caching strategies such as page level caching of objects, where each page could have more than one object <ref> [3] </ref>, and caching objects in the object cache between sessions could be used in the object server architecture. Operation result caching, where the return value of a read only operation is cached at the client for future use [12], could be used for the operation server architecture.
Reference: [4] <author> M. Franklin. </author> <title> Client Data Caching, </title> <publisher> Kluwer Academic Press, </publisher> <address> Boston, </address> <year> 1996. </year>
Reference-contexts: These two approaches, which we call the object server architecture and the operation server architecture respectively, represent two ends in a spectrum of architectures for distributed object management systems. Most object oriented databases use an architecture similar to the object server architecture <ref> [3, 4] </ref> while most relational databases use an architecture similar to the operation server architecture [12]. Addressing this issue of distribution is particularly challenging in the context of software engineering applications because they have widely varying object access profiles, unlike most traditional database applications.
Reference: [5] <author> M. Franklin, B. T. Jonsson, D. Kossmann. </author> <title> Performance tradeoffs for client-server query processing. </title> <booktitle> Proceedings of the SIGMOD Conference, </booktitle> <pages> pages 149160, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: While these two architectures are not new, there has been little work comparing the performance of the two architectures in order that such predictions can be made in a scientific manner. Most of the work comparing the architectures has been in the context of query optimization <ref> [5, 8] </ref>. In this paper, we evaluate the performance of the object server architecture and the operation server architecture and present an empirical model to aid in the selection of the appropriate architecture for a particular application. The rest of the paper is organized as follows.
Reference: [6] <editor> A. Fuggetta, A. Wolf, eds. </editor> <booktitle> Trends in Software: Software Process, </booktitle> <volume> Volume 4, </volume> <publisher> John Wiley and Sons, </publisher> <address> New York, </address> <year> 1996. </year> <title> size = 50 bytes, Operation complexity = 1 size = 50 bytes, Operation complexity = 4 size = 2098 bytes, Operation complexity = 1 bytes, Operation complexity = 1 bytes, Operation complexity = 4 size = 2098 bytes, Operation complexity = 1 </title>
Reference-contexts: With the advent of global networking, software engineering activities are becoming increasingly distributed as can be witnessed in new and emerging applications such as collaborative software engineering (e.g., [2, 7, 9, 10]) and software processes (e.g., <ref> [1, 6] </ref>). As a result, one of the key issues to be addressed by object management systems for software engineering is distribution, where objects and the application programs accessing the objects are located on different machines, perhaps located at various geographical sites.
Reference: [7] <author> W. H. Harrison, H. Ossher, P. F. Sweeney. </author> <title> Co-ordinating concurrent development. </title> <booktitle> Proceedings of the Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 157-168, </pages> <address> Los Angeles, California, </address> <year> 1990. </year>
Reference-contexts: With the advent of global networking, software engineering activities are becoming increasingly distributed as can be witnessed in new and emerging applications such as collaborative software engineering (e.g., <ref> [2, 7, 9, 10] </ref>) and software processes (e.g., [1, 6]). As a result, one of the key issues to be addressed by object management systems for software engineering is distribution, where objects and the application programs accessing the objects are located on different machines, perhaps located at various geographical sites.
Reference: [8] <author> B. P. Jenq, D. Woelk, W. Kim, W. Lee. </author> <title> Query pro-cessing in distributed ORION. </title> <booktitle> Proceedings of the International Conference on Extending Database Technology, </booktitle> <pages> pages 169-187, </pages> <address> Venice, Italy, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: While these two architectures are not new, there has been little work comparing the performance of the two architectures in order that such predictions can be made in a scientific manner. Most of the work comparing the architectures has been in the context of query optimization <ref> [5, 8] </ref>. In this paper, we evaluate the performance of the object server architecture and the operation server architecture and present an empirical model to aid in the selection of the appropriate architecture for a particular application. The rest of the paper is organized as follows.
Reference: [9] <author> G. Junkerman, B. Peuschel, W. Schafer, S. Wolf. MERLIN: </author> <title> Supporting cooperation in software de-velopment through a knowledge-based environment. Software Process Modeling and Technology, </title> <publisher> Research Studies Press Ltd, </publisher> <year> 1994. </year>
Reference-contexts: With the advent of global networking, software engineering activities are becoming increasingly distributed as can be witnessed in new and emerging applications such as collaborative software engineering (e.g., <ref> [2, 7, 9, 10] </ref>) and software processes (e.g., [1, 6]). As a result, one of the key issues to be addressed by object management systems for software engineering is distribution, where objects and the application programs accessing the objects are located on different machines, perhaps located at various geographical sites.
Reference: [10] <author> S. M. Kaplan, W. J. Tolone, A. M. Carrol, D. P. Bogia, C. Bignoli, </author> <title> Supporting collaborative software development with Conversation Builder. </title> <booktitle> Proceedings of the Fifth ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: With the advent of global networking, software engineering activities are becoming increasingly distributed as can be witnessed in new and emerging applications such as collaborative software engineering (e.g., <ref> [2, 7, 9, 10] </ref>) and software processes (e.g., [1, 6]). As a result, one of the key issues to be addressed by object management systems for software engineering is distribution, where objects and the application programs accessing the objects are located on different machines, perhaps located at various geographical sites.
Reference: [11] <author> M. J. Maybee, D. M. Heimbigner, L. J. Osterweil. </author> <title> Multilanguage interoperability in distributed systems. </title> <booktitle> Proceedings of the 18th International Conference on Software Engineering, </booktitle> <pages> pages 451-463, </pages> <address> Berlin, Germany, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: In the case of both the object server and the operation server architectures, the client and server components resided on different machines. The machines were connected using a 10 Mbps ethernet LAN and the client and server machines communicated using Q remote procedure calls <ref> [11] </ref>. All experiments were performed when there were no other user processes running on the machines and when there was little network traffic. Each experiment was repeated four times and the average time for the last three runs was used as the measured time.
Reference: [12] <author> N. Roussopoulos, C. M. Chen, S. Kelley, A. Delis, Y. Papakonstantinou. </author> <title> The ADMS project: Views R Us. </title> <booktitle> IEEE Conference on Data Engineering, </booktitle> <pages> pages 19-28, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: Most object oriented databases use an architecture similar to the object server architecture [3, 4] while most relational databases use an architecture similar to the operation server architecture <ref> [12] </ref>. Addressing this issue of distribution is particularly challenging in the context of software engineering applications because they have widely varying object access profiles, unlike most traditional database applications. <p> Operation result caching, where the return value of a read only operation is cached at the client for future use <ref> [12] </ref>, could be used for the operation server architecture. The usage of these caching strategies may significantly affect the tradeoffs between the two architectures and thus needs to be explored.
Reference: [13] <author> M. Stonebraker, P. M. Aoki, R. Devine, W. Litwin, M. A. Olson. Mariposa: </author> <title> A new architecture for dis-tributed data. </title> <booktitle> IEEE Data Engineering Conference, </booktitle> <pages> pages 54-65, </pages> <month> February </month> <year> 1994. </year>
Reference: [14] <author> P. L. Tarr, L. A. Clarke. PLEIADES: </author> <title> An object management system for software engineering envi-ronments. </title> <booktitle> ACM SIGSOFT Symposium on Foundations of Software Engineering, </booktitle> <pages> pages 56-70, </pages> <address> Los Angeles, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: server architecture the operation server architecture is expected to perform better when an operation accesses many different objects while the object server architecture is expected to perform better when there are many operations invoked on the same object. 3.3 Experimental Setup For the purpose of this evaluation, we used Pleiades <ref> [14] </ref>, an ADT based object management system, as the underlying object management system and modified it to implement the object server and operation server architectures by replacing local procedure calls with the appropriate remote procedure calls.
References-found: 14

