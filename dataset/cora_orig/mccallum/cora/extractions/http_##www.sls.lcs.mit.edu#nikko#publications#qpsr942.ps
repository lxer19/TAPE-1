URL: http://www.sls.lcs.mit.edu/nikko/publications/qpsr942.ps
Refering-URL: http://www.sls.lcs.mit.edu/nikko/publications/index.html
Root-URL: 
Title: Optimising the lexical representation to improve A* lexical search  
Author: Nikko Strm 
Abstract: The A* algorithm is defined in a directed graph formalism. Pruning, path merging and modification of the algorithm to output word graphs rather than N-best lists are discussed. The concept of quotient graphs is utilised to improve the lexical graph. Results from experiments with the continuous speech recognition task of the WAXHOLM project are reported. The use of a particular quotient graph in the first pass of the A* algorithm is shown to speed up the search significantly without degrading the accuracy. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Blomberg M., Carlson R., Elenius K., Granstrm B., Gustafson J., Hunnicut S., Lindell R., & Neovius L. </author> <year> (1993): </year> <title> "An Experimental Dialogue System: </title> <booktitle> Waxholm," Proc EUROSPEECH '93, </booktitle> <pages> pp. 1867-1870. </pages>
Reference-contexts: In these cases the reduction of the size of the graph will still be significant. A lexicon from the WAXHOLM project <ref> (Blomberg et al. 1993) </ref> is used to give some quantitative figures. The lexicon has 643 words in 23 different word classes. The original word graph has 5 398 nodes and 4 755 phone arcs.
Reference: <author> Hetherington I. Lee, Phillips Michael S., Glass James R. & Zue Victor W. </author> <year> (1993): </year> <title> A* Word Network Search For Continuous Speech Recognition, </title> <booktitle> Proc IEEE ICASSP '93, </booktitle> <pages> pp. 1533-1536. </pages>
Reference-contexts: This implies that the output of the lexical search component must be a representation of a collection of possible word strings. A popular representation is simply an N-best list of word strings (Schwartz et al. 1992, Zue et al. 1991). More compact representations are word graphs <ref> (Hetherington et al. 1993) </ref> or word lattices (Murveit et al. 1993). Other components may then analyse the word strings further and rescore them. Searching for multiple word strings is a much more complex task than just searching for the best string. <p> This makes a graph representation more efficient (see Figure 2). Generation of such a representation can easily be incorporated in the stack search <ref> (Hetherington et al. 1993) </ref>. Each node in the search matrix is a potential node in the word graph. Each time a path is extended, an arc from the start node to the end node of the extension is created in the word graph.
Reference: <author> Kenny P., Hollan V., Gupta V., Lennig M., Mermelstiein P. & OShaughnessy D. </author> <year> (1991): </year> <title> A* - Admissible Heuristics For Rapid Lexical Access, </title> <booktitle> Proc IEEE ICASSP '91, </booktitle> <pages> pp. 689-692. </pages>
Reference-contexts: The first pass is usually where most of the computation is done. By replacing the original lexical representation by a quotient graph in the first pass, the computational effort can be considerably reduced <ref> (Kenny et al. 1991) </ref>. In contrast to (Kenny et al. 1991), we construct quotient graphs that generate exactly the same language as the original lexical graph. Thus, the speedup in the Viterbi pass is not traded against degraded performance of the second search pass. <p> The first pass is usually where most of the computation is done. By replacing the original lexical representation by a quotient graph in the first pass, the computational effort can be considerably reduced <ref> (Kenny et al. 1991) </ref>. In contrast to (Kenny et al. 1991), we construct quotient graphs that generate exactly the same language as the original lexical graph. Thus, the speedup in the Viterbi pass is not traded against degraded performance of the second search pass. <p> Identify the nodes -n i - of L with the equivalence classes of L by ~. Following the terminology of <ref> (Kenny et al. 1991) </ref>, let (n , a, n ) be a branch in L if n 1 2 are nodes in L and a is an arc from n 1 2 (n , a, n ) be a branch in L if (n 1 2 ) is a branch in <p> The Viterbi search is performed on L . Then the stack search is performed on L and the h* estimate for node n is equal to h* for node n in L , where n is the equivalence class of n. As pointed out by <ref> (Kenny et al. 1991) </ref>, any quotient graph will give an A*-admissible heuristic, but this particular quotient graph reduces the size of the Viterbi search without degrading the performance of the stack search phase. Again the WAXHOLM project lexicon serves as an example.
Reference: <author> Murveit H., Butzberger J., Digalakis V. & Wientraub M. </author> <year> (1993): </year> <title> Large-Vocabulary Dictation Using SRIs Decipher Speech Recognition System: Progressive Seach Techniques, </title> <booktitle> Proc IEEE ICASSP '93, </booktitle> <pages> pp. </pages> <address> II-319 - II-322. </address>
Reference-contexts: A popular representation is simply an N-best list of word strings (Schwartz et al. 1992, Zue et al. 1991). More compact representations are word graphs (Hetherington et al. 1993) or word lattices <ref> (Murveit et al. 1993) </ref>. Other components may then analyse the word strings further and rescore them. Searching for multiple word strings is a much more complex task than just searching for the best string.
Reference: <author> Table I. </author> <title> Graph sizes for the different lexical representations (compare Figure 8). Type of object Nodes Phone arcs Word connecting arcs Original lexical graph 5 398 4 755 15 432 Lexical tree 3 424 3 401 1 172 Forward and backward tree structure 2 028 2 627 529 12 Murveit H., </title> <editor> Monaco P., Digalakis V. & Butzberger J. </editor> <year> (1994): </year> <title> Techniques To Achieve An Accurate Real-Time Large Vocabulary Speech Recognition System, </title> <booktitle> Proc ARPA Workshop on Human Language Technology, </booktitle> <address> March 94, Plainsboro, NJ, pp369-373. </address>
Reference: <author> Nilsson N. </author> <year> (1971): </year> <booktitle> ProblemSolving Methods in Artificial Intelligence, </booktitle> <publisher> Morgan Kaufman Publishers, Inc., </publisher> <address> ISBN 0-934613-10-9. </address> <booktitle> Sedgewick Robert (1988): Algorithms, 2nd edition, </booktitle> <publisher> Addison-Wesley Publishing Company Inc., </publisher> <editor> ISBN 0-201-06673-4. Schwartz Richard & Chow Yen-Lu (1990): </editor> <title> The N-best Algorithm: An Efficient And Exact Procedure For Finding The Most Likely Sentence Hypotheses, </title> <booktitle> Proc IEEE ICASSP '90, </booktitle> <pages> pp. 81-84. </pages>
Reference: <author> Schwartz R., Austin S., Kubala F., Makhoul J., Nguyen L., Placeway P. & Zavaliagkos G. </author> <year> (1992): </year> <title> New Uses For The N-best Sentence Hypotheses Within The Byblos Speech Recognition System, </title> <booktitle> Proc IEEE ICASSP '92, </booktitle> <volume> Vol I, </volume> <pages> pp. </pages> <editor> 1-4 Soong F. & Huang E. </editor> <year> (1991): </year> <title> A Tree-Trellis Based Fast Search for Finding the N Best Sentence Hypotheses in Continuous Speech Recogniton, </title> <booktitle> Proc IEEE ICASSP '91, </booktitle> <pages> pp. 705-708. </pages>
Reference-contexts: This implies that the output of the lexical search component must be a representation of a collection of possible word strings. A popular representation is simply an N-best list of word strings <ref> (Schwartz et al. 1992, Zue et al. 1991) </ref>. More compact representations are word graphs (Hetherington et al. 1993) or word lattices (Murveit et al. 1993). Other components may then analyse the word strings further and rescore them.
Reference: <author> Zue V., Glass J., Goodine D., Leung H., Phillips M., Polifroni J. & Seneff S. </author> <year> (1991): </year> <title> "Integration Of Speech Recognition And Natural Language Processing In The MIT Voyager System," </title> <booktitle> Proc IEEE ICASSP '91, </booktitle> <pages> pp. 713-716. </pages>
References-found: 8

