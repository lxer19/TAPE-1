URL: http://www-sal.cs.uiuc.edu/~kamin/cs497/papers/hawkIntro.ps
Refering-URL: http://www-sal.cs.uiuc.edu/~kamin/cs497/papers.html
Root-URL: http://www.cs.uiuc.edu
Email: johnm@cse.ogi.edu  byron@cse.ogi.edu  jl@cse.ogi.edu  
Title: Microprocessor Specification in Hawk  
Author: John Matthews Byron Cook John Launchbury 
Abstract: Modern microprocessors require an immense investment of time and effort to create and verify, from the high-level architectural design downwards. We are exploring ways to increase the productivity of design engineers by creating a domain-specific language for specifying and simulating processor architectures. We believe that the structuring principles used in modern functional programming languages, such as static typing, parametric polymorphism, first-class functions, and lazy evaluation provide a good formalism for such a domain-specific language, and have made initial progress by creating a library on top of the functional language Haskell. We have specified the integer subset of an out-of-order, superscalar DLX microprocessor, with register-renaming, a reorder buffer, a global reservation station, multiple execution units, and speculative branch execution. Two key abstractions of this library are the signal abstract data type (ADT), which models the simulation history of a wire, and the transaction ADT, which models the state of an entire instruction as it travels through the microprocessor. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aagaard, M., and Leeser, M. </author> <title> Reasoning about pipelines with structural hazards. </title> <booktitle> In Second International Conference on Theorem Provers in Circuit Design (Bad Herrenalb, </booktitle> <address> Germany, </address> <month> Sept. </month> <year> 1994). </year>
Reference-contexts: The Delay circuits in turn require us to add Select circuits to act as bypasses. The logic controlling the Select circuits is not shown. Aagaard and Leeser <ref> [1] </ref>). A transaction holds an instruction's source operand values, the ALU command, and the destination operand value.
Reference: [2] <author> Barton, D. </author> <title> Advanced modeling features of MHDL. </title> <booktitle> In International Conference on Electronic Hardware Description Languages (Jan. </booktitle> <year> 1995). </year>
Reference-contexts: There are combinators to specify where circuits are located in relation to each other and to external wires. Hawk's emphasis is on behavioral correctness, so we do not need to address layout issues. Two other languages that are strongly related are HML [8] and MHDL <ref> [2] </ref>. HML is a hardware modeling language based on the functional language ML. It also has higher-order functions and polymorphic types, allowing many of the same abstraction techniques that are used in Hawk, with similar safety guarantees.
Reference: [3] <author> Gill, A., Launchbury, J., and Jones, S. P. </author> <title> A short-cut to deforestation. </title> <booktitle> In ACM Conference on Functional Programming and Computer Architecture (Copenhagen, </booktitle> <address> Denmark, </address> <month> June </month> <year> 1993). </year>
Reference-contexts: Isabelle is well-suited for Hawk; it has built-in support for manipulating higher-order functions and polymorphic types. It also has well-developed rewriting tactics. Thus simplification strategies for functional languages like partial evaluation and deforestation <ref> [3] </ref> can be directly implemented. We also expect that transactions will aid the verification process. Transactions make explicit much of the pipeline state needed to prove correctness.
Reference: [4] <author> Hennessy, J. L., and Patterson, D. A. </author> <title> Computer Architecture: A Quantitative Approach. </title> <publisher> Morgan Kauf-mann, </publisher> <year> 1995. </year>
Reference-contexts: The library makes essential use of these features. As an example, we have used Hawk to specify and simulate the integer portion of a pipelined DLX microprocessor <ref> [4] </ref>. The DLX is a complete microprocessor and is a widely used model among researchers. Several DLX simulators exist, as well as a version of the Gnu C compiler that generates DLX assembly instructions. The processor includes the most common instructions found in commercial RISC processors.
Reference: [5] <author> Hudak, P., Peterson, J., and Fasel, J. </author> <title> A gentle introduction to Haskell. </title> <note> Available at www.haskell.org, Dec. </note> <year> 1997. </year>
Reference-contexts: In the long term we plan for Hawk to be a standalone language. In the meantime we have embedded our language into Haskell, a strongly-typed functional language with lazy (demand-driven) evaluation, first-class functions, and parametric polymorphism <ref> [5] </ref> [12]. The library makes essential use of these features. As an example, we have used Hawk to specify and simulate the integer portion of a pipelined DLX microprocessor [4]. The DLX is a complete microprocessor and is a widely used model among researchers.
Reference: [6] <author> Johnson, M. </author> <title> Superscalar Microprocessor Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Contact: Manager, Copyrights and Permissions / IEEE Service Center / 445 Hoes Lane / P.O. Box 1331 / Piscataway, NJ 08855-1331, USA. Telephone: + Intl. 908-562-3966. increase processor speed <ref> [6] </ref>. All of these technologies dramatically increase design complexity. In fact, creating and verifying these designs is a significant proportion of the total microprocessor development life-cycle. As the number of possible gates in future microprocessors increases exponentially, so too does design complexity.
Reference: [7] <author> Jones, G., and Sheeran, M. </author> <title> Circuit design in Ruby. In Formal Methods for VLSI Design, </title> <editor> J. Staunstrup, Ed. </editor> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: However, Verilog and VHDL are large languages with complex semantics, which makes circuit verification more difficult. Also, neither of these languages support polymorphic circuits, nor higher-order circuit combinators, as well as Hawk. The Ruby language, created by Jones and Sheeran <ref> [7] </ref>, is a specification and simulation language based on relations, rather than functions. Ruby is more general than Hawk in that relations can describe more circuits than functions can. On the other hand, existing Ruby simulators require Ruby relations to be causal, i.e. to be implementable as functions.
Reference: [8] <author> Li, Y., and Leeser, M. HML: </author> <title> An innovative hardware design language and its translation to VHDL. </title> <booktitle> In Conference on Hardware Design Languages (June 1995). </booktitle>
Reference-contexts: There are combinators to specify where circuits are located in relation to each other and to external wires. Hawk's emphasis is on behavioral correctness, so we do not need to address layout issues. Two other languages that are strongly related are HML <ref> [8] </ref> and MHDL [2]. HML is a hardware modeling language based on the functional language ML. It also has higher-order functions and polymorphic types, allowing many of the same abstraction techniques that are used in Hawk, with similar safety guarantees.
Reference: [9] <author> Melham, T. </author> <title> Abstraction mechanisms for hardware verification. In VLSI Specification, Verification and Synthesis, </title> <editor> G. Birtwhistle and P. A. Subrahmanyam, Eds. </editor> <publisher> Kluwer Academic Publishers, </publisher> <year> 1988. </year>
Reference-contexts: Circuits and components of circuits are represented as functions from signals to signals. This view of signals is used extensively in the hardware verification community <ref> [9] </ref> [14]. Equivalently, we can think of signals as infinite sequences of values. In the resettable counter example above, the constant 0 circuit outputs zero on every clock cycle. The select component chooses between its inputs on each clock cycle depending on the value of reset.
Reference: [10] <author> O'Donnell, J. </author> <title> From transistors to computer architecture: Teaching functional circuit specification in Hydra. </title> <booktitle> In Symposium on Functional Programming Languages in Education (July 1995). </booktitle>
Reference-contexts: We will pick an example or two from these two categories. Haskell has been used to directly model hardware circuits at the gate level. O'Donnell <ref> [10] </ref> has developed a Haskell library called Hydra that models gates at several levels of abstraction, ranging from implementations of gates using CMOS and NMOS pass-transistors, up to abstract gate representations using lazy lists to denote time-varying values.
Reference: [11] <author> Paulson, L. </author> <title> Isabelle: A Generic Theorem Prover. </title> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Beyond this, we intend to push in a number of directions. * We hope to use Hawk to formally verify the correctness of microprocessors through the mechanical theorem prover Isabelle <ref> [11] </ref>. Isabelle is well-suited for Hawk; it has built-in support for manipulating higher-order functions and polymorphic types. It also has well-developed rewriting tactics. Thus simplification strategies for functional languages like partial evaluation and deforestation [3] can be directly implemented. We also expect that transactions will aid the verification process.
Reference: [12] <author> Peterson, J., and et al. </author> <title> Report on the programming language Haskell: A non-strict, purely functional language, </title> <note> version 1.4. Available at www.haskell.org, Apr. </note> <year> 1997. </year>
Reference-contexts: In the long term we plan for Hawk to be a standalone language. In the meantime we have embedded our language into Haskell, a strongly-typed functional language with lazy (demand-driven) evaluation, first-class functions, and parametric polymorphism [5] <ref> [12] </ref>. The library makes essential use of these features. As an example, we have used Hawk to specify and simulate the integer portion of a pipelined DLX microprocessor [4]. The DLX is a complete microprocessor and is a widely used model among researchers.
Reference: [13] <author> Sinderson, E., and et al. Hawk: </author> <title> A hardware specification language, </title> <note> version 1. Available at www.cse.ogi.edu/PacSoft/projects/Hawk/, Oct. </note> <year> 1997. </year>
Reference-contexts: Rather than attempting a detailed explanation of the whole of the DLX with all of its inherent complexity, we have chosen to exhibit the techniques on a considerably simplified model. A corresponding annotated specification of the DLX itself can be found in <ref> [13] </ref>. 2 The Hawk Library We start with a simple example that introduces several functions used in later examples. Consider the resettable counter circuit of Figure 1. The reset wire is Boolean valued, while the other that counts the number of clock cycles between reset signals. wires are integer valued.
Reference: [14] <author> Windley, P., and Coe, M. </author> <title> A correctness model for pipelined microprocessors. </title> <booktitle> In Second International Conference on Theorem Provers in Circuit Design (Sept. </booktitle> <year> 1994). </year>
Reference-contexts: Circuits and components of circuits are represented as functions from signals to signals. This view of signals is used extensively in the hardware verification community [9] <ref> [14] </ref>. Equivalently, we can think of signals as infinite sequences of values. In the resettable counter example above, the constant 0 circuit outputs zero on every clock cycle. The select component chooses between its inputs on each clock cycle depending on the value of reset.
References-found: 14

