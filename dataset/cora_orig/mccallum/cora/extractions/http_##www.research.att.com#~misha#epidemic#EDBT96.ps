URL: http://www.research.att.com/~misha/epidemic/EDBT96.ps
Refering-URL: http://www.cs.umd.edu/class/spr97/cmsc828f-s97/
Root-URL: 
Title: Scalable Update Propagation in Epidemic Replicated Databases  
Author: Michael Rabinovich, Narain Gehani, and Alex Kononov 
Address: 600 Mountain Ave, Murray Hill, NJ 07974  
Affiliation: AT&T Bell Laboratories  
Abstract: Many distributed databases use an epidemic approach to manage replicated data. In this approach, user operations are executed on a single replica. Asynchronously, a separate activity performs periodic pair-wise comparison of data item copies to detect and bring up to date obsolete copies. The overhead due to comparison of data copies grows linearly with the number of data items in the database, which limits the scalability of the system. We propose an epidemic protocol whose overhead is linear in the number of data items being copied during update propagation. Since this number is typically much smaller than the total number of data items in the database, our protocol promises significant reduction of overhead. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> D. Agrawal and A. Malpani. </author> <title> Efficient dissemination of information in computer networks. </title> <journal> The Computer Journal, </journal> <volume> 6(34), </volume> <pages> pp. 534-541, </pages> <year> 1991. </year>
Reference-contexts: The Two-phase Gossip protocol [7] improves [15] by sending fewer version vectors in a gossip message. It also describes a more general method for garbage-collecting log records. Agrawal and Malpani's protocol <ref> [1] </ref> decouples sending update logs from sending version vector information. Thus, separate policies can be used to schedule both types of exchanges.
Reference: 2. <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1987. </year>
Reference-contexts: In the latter approach, when conflicting updates are discovered, they are resolved in an application-specific manner (which often involves manual intervention). 1 Neither do we assume anything about the transactional model supported by the system. The system may use two-phase locking <ref> [2] </ref> on an individual server while relying on optimism for replica consistency. The system can also choose to provide guaranteed serializability of transactions by executing on top of a pessimistic replica control protocol. (See [2] for the serializability theory in replicated systems.) Finally, the system may not support any notion of <p> The system may use two-phase locking <ref> [2] </ref> on an individual server while relying on optimism for replica consistency. The system can also choose to provide guaranteed serializability of transactions by executing on top of a pessimistic replica control protocol. (See [2] for the serializability theory in replicated systems.) Finally, the system may not support any notion of multi-data-item transactions at all (like Lotus Notes, [9]).
Reference: 3. <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <journal> ACM Trans. on Comp. Sys. </journal> <volume> Vol. 9, No. 3, </volume> <pages> pp. 272-314, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Version vectors have also been used to prevent out-of-order delivery of causally related messages in a distributed system <ref> [3, 6] </ref>. The Ficus replicated file system [5] (a descendant of Locus) divides anti-entropy activity into update notification and replica reconciliation processes. Each node i periodically notifies all other nodes about files updated locally. Other nodes then obtain the new copy from i.
Reference: 4. <author> A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry. </author> <title> Epidemic algorithms for replicated database maintenance. </title> <booktitle> In Proc. of the 6th Symp. on Principles of Distr. Computing, </booktitle> <pages> pp. 1-12, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction Data replication is often used in distributed systems to improve system availability and performance. Examples of replicated systems abound and include both research prototypes (e.g., [5, 14]) and commercial systems (e.g., [8, 10]). Many of these systems use an epidemic <ref> [4] </ref> approach to maintain replica consistency. In this approach, user operations are performed on a single replica. Asynchronously, a separate activity (termed anti-entropy in [4]) compares version information (e.g., timestamps) of different copies of data items and propagates updates to older replicas. <p> Many of these systems use an epidemic <ref> [4] </ref> approach to maintain replica consistency. In this approach, user operations are performed on a single replica. Asynchronously, a separate activity (termed anti-entropy in [4]) compares version information (e.g., timestamps) of different copies of data items and propagates updates to older replicas.
Reference: 5. <author> R. G. Guy, J. S. Heidemann, W. Mak, T. W. Page, G. J. Popek, G. J. Rothmeier. </author> <title> Implementation of the Ficus replicated file system. </title> <booktitle> In Proc. of Usenix Summer Conf., </booktitle> <pages> pp. 63-71, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction Data replication is often used in distributed systems to improve system availability and performance. Examples of replicated systems abound and include both research prototypes (e.g., <ref> [5, 14] </ref>) and commercial systems (e.g., [8, 10]). Many of these systems use an epidemic [4] approach to maintain replica consistency. In this approach, user operations are performed on a single replica. <p> Version vectors have also been used to prevent out-of-order delivery of causally related messages in a distributed system [3, 6]. The Ficus replicated file system <ref> [5] </ref> (a descendant of Locus) divides anti-entropy activity into update notification and replica reconciliation processes. Each node i periodically notifies all other nodes about files updated locally. Other nodes then obtain the new copy from i.
Reference: 6. <author> C. Fidge. </author> <title> Timestamps in message-passing systems that preserve the partial ordering. </title> <booktitle> In Proc. of the 11th Australian Computer Science Conf., </booktitle> <pages> pp. 56-66, </pages> <year> 1988. </year>
Reference-contexts: Version vectors have also been used to prevent out-of-order delivery of causally related messages in a distributed system <ref> [3, 6] </ref>. The Ficus replicated file system [5] (a descendant of Locus) divides anti-entropy activity into update notification and replica reconciliation processes. Each node i periodically notifies all other nodes about files updated locally. Other nodes then obtain the new copy from i.
Reference: 7. <author> A. Heddaya, M. Hsu, and W. Weihl. </author> <title> Two phase gossip: managing distributed event histories. </title> <journal> Information Sciences, </journal> <volume> 49, </volume> <pages> pp. 35-57, </pages> <year> 1989. </year>
Reference-contexts: In Wuu and Berntein's protocol [15], anti-entropy is done by nodes exchanging gossip messages <ref> [9, 7] </ref>. A gossip message from j to i contains log records of updates that j believes are missed by i, and version vector information describ-ing the state of j as well as the extent of j's knowledge about the state of other nodes in the system. <p> A gossip message from j to i contains log records of updates that j believes are missed by i, and version vector information describ-ing the state of j as well as the extent of j's knowledge about the state of other nodes in the system. The Two-phase Gossip protocol <ref> [7] </ref> improves [15] by sending fewer version vectors in a gossip message. It also describes a more general method for garbage-collecting log records. Agrawal and Malpani's protocol [1] decouples sending update logs from sending version vector information. Thus, separate policies can be used to schedule both types of exchanges.
Reference: 8. <author> L. Kawell Jr., S. Beckhardt, T. Halvorsen, R. Ozzie, and I. Greif. </author> <title> Replicated document management in a group communication system. </title> <booktitle> Presented at the 2d Conf. on Computer-Supported Cooperative Work. </booktitle> <month> September </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Data replication is often used in distributed systems to improve system availability and performance. Examples of replicated systems abound and include both research prototypes (e.g., [5, 14]) and commercial systems (e.g., <ref> [8, 10] </ref>). Many of these systems use an epidemic [4] approach to maintain replica consistency. In this approach, user operations are performed on a single replica. <p> We then consider Oracle Symmetric Replication approach in Section 8.2, and replicated database and file systems that employ version vectors in Section 8.3. 8.1 Lotus Notes Protocol The Lotus Notes protocol <ref> [8] </ref> associates a sequence number with every data item copy, which records the number of updates seen by this copy. Similar to our protocol, Lotus assumes that whole databases are replicated, so that anti-entropy is normally invoked once for all data items in the database.
Reference: 9. <author> R. Ladin, B. Liskov, L. Shrira, and S. Ghemawat. </author> <title> Providing high availability using lazy replication. </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> 4(10), </volume> <pages> pp. 360-391, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: The system can also choose to provide guaranteed serializability of transactions by executing on top of a pessimistic replica control protocol. (See [2] for the serializability theory in replicated systems.) Finally, the system may not support any notion of multi-data-item transactions at all (like Lotus Notes, <ref> [9] </ref>). Finally, to simplify the presentation, we assume that the set of servers across which a database is replicated is fixed. 2.1 Correctness Criteria We assume that actions performed by individual nodes are atomic. <p> In Wuu and Berntein's protocol [15], anti-entropy is done by nodes exchanging gossip messages <ref> [9, 7] </ref>. A gossip message from j to i contains log records of updates that j believes are missed by i, and version vector information describ-ing the state of j as well as the extent of j's knowledge about the state of other nodes in the system. <p> Thus, their total overhead is at least linear in the total number of data items. 4 The protocol proposed in <ref> [9] </ref> uses version vectors to enforce causally monotonic ordering of user operations on every replica. If an operation arrives out of order, it is delayed until the previous operations arrive.
Reference: 10. <institution> Oracle 7 Distributed Database Technology and Symmetric Replication. Oracle White Paper, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Data replication is often used in distributed systems to improve system availability and performance. Examples of replicated systems abound and include both research prototypes (e.g., [5, 14]) and commercial systems (e.g., <ref> [8, 10] </ref>). Many of these systems use an epidemic [4] approach to maintain replica consistency. In this approach, user operations are performed on a single replica. <p> It will override x j in the next execution of update propagation. Thus, Lotus protocol does not satisfy the correctness criteria of Section 2.1. 8.2 Oracle Symmetric Replication Protocol Oracle's Symmetric Replication protocol <ref> [10] </ref> is not an epidemic protocol is a strict sense. It does not perform comparison of replica control state to determine obsolete replicas. Instead, it uses a simple approach outlined in the Introduction of this paper.
Reference: 11. <author> D. S. Parker, G. J. Popek, G. Rudisin, A. Stoughton, B. J. Walker, E. Walton, J. M. Chow, D. Edwards, S. Kiser, and C. Kline. </author> <title> Detection of mutual inconsistency in distributed systems. </title> <journal> IEEE Trans. on Software Eng. </journal> <volume> 9(3), </volume> <pages> pp. 240-246, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: The following fact about version vectors has been shown <ref> [11] </ref>. Theorem 3. At any time, v ij (x) = u if and only if i's replica of x reflects the first u updates that were made to this data item on server j. In particular, these corollaries hold: 1.
Reference: 12. <author> G. Popek, B. Walker, J. Chow, D. Edwards, C. Kline, G. Rudisin, and G. Thiel. </author> <title> LOCUS: A network transparent, high reliability distributed system. </title> <booktitle> In Proc. 8th Symp. on Operating Systems Principles, </booktitle> <pages> pp. 169-177, </pages> <year> 1981. </year>
Reference-contexts: Thus, our protocol promises significant reduction of overhead. Our protocol is based on version vectors, first proposed in <ref> [12] </ref> to detect inconsistencies between replicas of a data item and widely used for various purposes in distributed systems. In existing replicated systems based on version vectors, a server i associates a version vector with every data item replica x i stored on this server. <p> The ideas we present here are equally applicable to both approaches. 3 Background: Version Vectors Version vectors were proposed in <ref> [12] </ref> to detect inconsistency among replicas in distributed systems, and have been widely used for various purposes in distributed systems. We describe some existing applications of version vectors in the review of related work (Section 8). <p> The price our protocol pays for this, the periodic comparison of database version vectors, is very small. 8.3 Protocols Using Version Vectors To our knowledge, version vectors were first introduced in the Locus file system <ref> [12] </ref> and have been used in several epidemic distributed database and file systems. Version vectors have also been used to prevent out-of-order delivery of causally related messages in a distributed system [3, 6].
Reference: 13. <author> M. Rabinovich, N. Gehani, and A. Kononov. </author> <title> Scalable update propagation in epidemic replicated databases. </title> <institution> AT&T Bell Labs Technical Memorandum 112580-951213-11TM, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: Theorem 5. If update propagation is scheduled in such a way that every node eventually performs update propagation transitively from every other node, then correctness criteria from Section 2.1 are satisfied. Proof. See <ref> [13] </ref>. 8 Related work In this section, we compare our work with existing approaches. Several epidemic protocols have been proposed for replica management. The common feature of existing systems is that they perform anti-entropy and maintain replica consistency at the same data granularity level.
Reference: 14. <author> D. Terry, A. Demers, K. Peterson, M. Spreitzer, M. Theimer, and B. Welch. </author> <title> Session guarantees for weakly consistent replicated data. </title> <booktitle> In Proc. of the Int. Conf. on Parallel and Distributed Information Systems, </booktitle> <year> 1994. </year>
Reference-contexts: 1 Introduction Data replication is often used in distributed systems to improve system availability and performance. Examples of replicated systems abound and include both research prototypes (e.g., <ref> [5, 14] </ref>) and commercial systems (e.g., [8, 10]). Many of these systems use an epidemic [4] approach to maintain replica consistency. In this approach, user operations are performed on a single replica. <p> If an operation arrives out of order, it is delayed until the previous operations arrive. A client stores the version vector returned by last server it contacted and uses it to ensure causal ordering of operations when it connects to different servers. This approach was extended further in <ref> [14] </ref>. The protocol of [14] provides more levels of consistency. It also allows to localize consistency control to an individual session between a client and the system, independently of other sessions. These two protocols concentrate on taking advantage of weak-consistency models to improve availability and performance of user operations. <p> A client stores the version vector returned by last server it contacted and uses it to ensure causal ordering of operations when it connects to different servers. This approach was extended further in <ref> [14] </ref>. The protocol of [14] provides more levels of consistency. It also allows to localize consistency control to an individual session between a client and the system, independently of other sessions. These two protocols concentrate on taking advantage of weak-consistency models to improve availability and performance of user operations. <p> So the overhead is linear in the number of data items plus the number of updates exchanged. 5 The protocol of <ref> [14] </ref> uses a database as the granule for consistency control; it does not specify how anti-entropy is done. As already mentioned, doing consistency control at a coarse granularity reduces overhead but increases the possibility of false sharing.
Reference: 15. <author> G. T. Wuu and A. J. Bernstein. </author> <title> Efficient solution to the replicated log and dictio-nary problems. </title> <booktitle> In Proc. of the 3d ACM Symp. on Principles of Distr. Computing, </booktitle> <pages> pp. 233-242, </pages> <year> 1984. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: In Wuu and Berntein's protocol <ref> [15] </ref>, anti-entropy is done by nodes exchanging gossip messages [9, 7]. <p> The Two-phase Gossip protocol [7] improves <ref> [15] </ref> by sending fewer version vectors in a gossip message. It also describes a more general method for garbage-collecting log records. Agrawal and Malpani's protocol [1] decouples sending update logs from sending version vector information. Thus, separate policies can be used to schedule both types of exchanges.
References-found: 15

