URL: ftp://ftp.cs.rochester.edu/pub/papers/ai/96.tr625.Lineal_feature_extraction_by_parallel_stick_growing.ps.gz
Refering-URL: http://www.cs.rochester.edu/u/gchunt/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fgchunt,nelsong@@cs.rochester.edu  
Title: Lineal Feature Extraction by Parallel Stick Growing  
Author: Galen C. Hunt and Randal C. Nelson 
Address: Rochester, Rochester, NY 14627, USA  
Affiliation: Department of Computer Science University of  
Abstract: Finding lineal features in an image is an important step in many object recognition and scene analysis procedures. Previous feature extraction algorithms exhibit poor parallel performance because features often extend across large areas of the data set. This paper describes a parallel method for extracting lineal features based on an earlier sequential algorithm, stick growing. The new method produces results qualitatively similar to the sequential method. Experimental results show a significant parallel processing speed-up attributable to three key features of the method: a large numbers of lock preemptible search jobs, a random priority assignment to source search regions, and an aggressive deadlock detection and resolution algorithm. This paper also describes a portable generalized thread model. The model supports a light-weight job abstraction that greatly simplifies parallel vision programming.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. B. Burns, A. R. Hanson, and E. M. Riseman. </author> <title> Extracting Straight Lines. </title> <booktitle> In Proc. DARPA IU Workshop, </booktitle> <pages> pages 165-168, </pages> <address> New Orleans, LA, </address> <year> 1984. </year>
Reference-contexts: The method also has trouble finding short segments in busy images. Princen et al. [13] address some of these problems using a hierarchical grouping process in conjunction with a local Hough transform. A third method of lineal feature detection due to Burns et al. <ref> [1] </ref> utilizes the gradient direction to partition the image into a set of support regions, each of which will presumably be associated with a single feature. A least-squares fitting procedure is then used to fit a line segment to each region.
Reference: [2] <author> R. O. Duda and P. E. Hart. </author> <title> Use of the Hough Transform to Detect Lines and Curves in Pictures. </title> <journal> Communications of the ACM, </journal> <volume> 15 </volume> <pages> 11-15, </pages> <year> 1972. </year>
Reference-contexts: Some of these problems can be ameliorated using multi-resolution representations e.g., [4], and grouping techniques [7]. A second method of line detection is based on the Hough transform <ref> [2] </ref>. Here local edges vote for all possible lines they are consistent with, and the votes are tallied up later to determine what lines are actually present. The main problems with this approach are complexity, coarse resolution, and lack of locality. <p> They report a weighted speedup of 78 using 4096 processors on a MasPar MP-2 and a speedup of 307 on a 512 processor CM-5 [12]. Gerogiannus and Orphanoudakis [3] describe a parallel implementation of the Hough transform <ref> [2] </ref>. The image is broken into discrete regions with each region assigned to a processor. Each processor calculates the votes by the edges within its region for lines in the Hough space. The votes are then summed across processors. Using an iPCS/2, they report speedups of 4 for 64 processors.
Reference: [3] <author> D. Gerogiannus and S. C. Orphanoudakis. </author> <title> Load balancing requirement in parallel implementations of image feature extraction tasks. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(9) </volume> <pages> 994-1013, </pages> <year> 1993. </year>
Reference-contexts: They report a weighted speedup of 78 using 4096 processors on a MasPar MP-2 and a speedup of 307 on a 512 processor CM-5 [12]. Gerogiannus and Orphanoudakis <ref> [3] </ref> describe a parallel implementation of the Hough transform [2]. The image is broken into discrete regions with each region assigned to a processor. Each processor calculates the votes by the edges within its region for lines in the Hough space. The votes are then summed across processors.
Reference: [4] <author> T. H. Hong, M. O. Shneier, R. L. Hartley, and A. Rosenfeld. </author> <title> Using pyramids to detect good continuation. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 13 </volume> <pages> 631-635, </pages> <year> 1983. </year>
Reference-contexts: Some of these problems can be ameliorated using multi-resolution representations e.g., <ref> [4] </ref>, and grouping techniques [7]. A second method of line detection is based on the Hough transform [2]. Here local edges vote for all possible lines they are consistent with, and the votes are tallied up later to determine what lines are actually present.
Reference: [5] <author> C.-C. Lin, V. K. Prasanna, and A. Khokhar. </author> <title> Scalable Parallel Extraction of Linear Features on MP-2. </title> <editor> In M. A. Bayoumi, L. S. Davis, and K. P. Valavanis, editors, </editor> <booktitle> Proceedings of the IEEE Workshop on Computer Architectures for Machine Perception, </booktitle> <pages> pages 352-361, </pages> <address> New Orleans, LA, </address> <year> 1993. </year>
Reference-contexts: Each processor is assigned a fixed unique integer identifier. At every step of the algorithm each processor exchanges with its linked neighbors the maximum identifier known to belong to the contour. Little's algorithm provides edgel detection and linking, but does not segment contours into extended features. Lin et al. <ref> [5] </ref> describe a parallel algorithm in which each processor performs a variant of the Nevatia-Babu [11] algorithm on a small region of the image. If the pixels of a contour cross a region boundary, the lines from each region are joined using a linear approximation algorithm credited to Williams [14].
Reference: [6] <author> J. J. Little. </author> <title> Parallel Algorithms for Computer Vision on the Connection Machine. </title> <institution> AIM-928, Massachusetts Institute of Technology, Artificial Intelligence Laboratory, </institution> <year> 1986. </year>
Reference-contexts: Prior works have parallelized regular algorithms with limited extraction capabilities. Little <ref> [6] </ref> describes a feature extraction implementation on the massively parallel Connection Machine with 64K processors. Each pixel in the image is assigned to a separate virtual processor. Edgel detection is performed by convolving the image with a Gaussian operator. Each pixel is linked with any existing neighboring pixel.
Reference: [7] <author> D. G. Lowe. </author> <title> Perceptual Organization and Visual Recognition. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Hingham, MA, </address> <year> 1985. </year>
Reference-contexts: Some of these problems can be ameliorated using multi-resolution representations e.g., [4], and grouping techniques <ref> [7] </ref>. A second method of line detection is based on the Hough transform [2]. Here local edges vote for all possible lines they are consistent with, and the votes are tallied up later to determine what lines are actually present.
Reference: [8] <author> A. Mansouri, A. S. Malowany, and M. D. Levine. </author> <title> Line Detection in Digital Pictures: A Hypothesis Prediction / Verification Paradigm. Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 40 </volume> <pages> 95-114, </pages> <year> 1987. </year>
Reference-contexts: A least-squares fitting procedure is then used to fit a line segment to each region. This method can detect low-contrast features, but the segmentation can be unstable. Also features can rather easily be broken up by local perturbations. Finally, there are statistical approaches. For example, Mansouri et al. <ref> [8] </ref> propose a hypothesize and test algorithm to find line segments of a given length by hypothesizing their existence based on local information, and attempting to verify that hypothesis statistically on the basis of a digital model of an ideal segment edge.
Reference: [9] <author> V. S. Nalwa and E. Pauchon. </author> <title> Edgel Aggregation and Edge Description. Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 40 </volume> <pages> 79-94, </pages> <year> 1987. </year>
Reference-contexts: The classic example of this approach is the Nevatia Babu line detector [11]. Other examples include work by Zhou et al. [15] and Nalwa and Pauchon <ref> [9] </ref>. Difficulties with the linking approach are basically due to its locality, and include unreliability of the low-level edge finder, instability of segmentation in the presence of bumps or many low-level edges, and difficulty hooking up long features if the data are sparse.
Reference: [10] <author> R. C. Nelson. </author> <title> Finding Line Segments by Stick Growing. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 16(5) </volume> <pages> 519-523, </pages> <year> 1994. </year>
Reference-contexts: Using an iPCS/2, they report speedups of 4 for 64 processors. An implementation of the Hough transform using lock-free increment instructions for voting could achieve significantly higher speedup. 2 Stick Growing Our parallel algorithm is based on a sequential line finding procedure described in <ref> [10] </ref>. The essence of the method is to define a metric that assigns a score to any possible line segment, based on the underlying image data, and repeatedly extract the best segment from the image.
Reference: [11] <author> R. Nevatia and K. R. Babu. </author> <title> Linear Feature Extraction and Description. </title> <booktitle> Computer Vision Graphics and Image Processing, </booktitle> <volume> 13 </volume> <pages> 257-269, </pages> <year> 1980. </year>
Reference-contexts: The classic example of this approach is the Nevatia Babu line detector <ref> [11] </ref>. Other examples include work by Zhou et al. [15] and Nalwa and Pauchon [9]. <p> Little's algorithm provides edgel detection and linking, but does not segment contours into extended features. Lin et al. [5] describe a parallel algorithm in which each processor performs a variant of the Nevatia-Babu <ref> [11] </ref> algorithm on a small region of the image. If the pixels of a contour cross a region boundary, the lines from each region are joined using a linear approximation algorithm credited to Williams [14].
Reference: [12] <author> V. K. Prasanna, C.-L. Wang, and A. Khokhar. </author> <title> Low Level Vision Processing on Connection Machine CM-5. </title> <editor> In M. A. Bayoumi, L. S. Davis, and K. P. Valavanis, editors, </editor> <booktitle> Proceedings of the IEEE Workshop on Computer Architectures for Machine Perception, </booktitle> <pages> pages 117-126, </pages> <address> New Orleans, LA, </address> <year> 1993. </year>
Reference-contexts: They report a weighted speedup of 78 using 4096 processors on a MasPar MP-2 and a speedup of 307 on a 512 processor CM-5 <ref> [12] </ref>. Gerogiannus and Orphanoudakis [3] describe a parallel implementation of the Hough transform [2]. The image is broken into discrete regions with each region assigned to a processor. Each processor calculates the votes by the edges within its region for lines in the Hough space.
Reference: [13] <author> J. Princen, J. Illingworth, and J. Kittler. </author> <title> A hierarchical approach to line extraction based on the Hough transform. </title> <booktitle> Computer Vision Graphics and Image Processing, </booktitle> <volume> 52 </volume> <pages> 57-77, </pages> <year> 1990. </year>
Reference-contexts: This problem is sometimes addressed in a post-processing, verification phase. The method also has trouble finding short segments in busy images. Princen et al. <ref> [13] </ref> address some of these problems using a hierarchical grouping process in conjunction with a local Hough transform.
Reference: [14] <author> C. M. Williams. </author> <title> An Efficient Algorithm for the Piecewise Linear Approximation of Planar Curves. </title> <journal> Computer Graphics and Image Processing, </journal> <volume> 8 </volume> <pages> 286-293, </pages> <year> 1978. </year>
Reference-contexts: If the pixels of a contour cross a region boundary, the lines from each region are joined using a linear approximation algorithm credited to Williams <ref> [14] </ref>. They report a weighted speedup of 78 using 4096 processors on a MasPar MP-2 and a speedup of 307 on a 512 processor CM-5 [12]. Gerogiannus and Orphanoudakis [3] describe a parallel implementation of the Hough transform [2].
Reference: [15] <author> Y. T. Zhou, V. Venkateswar, and R. Chellappa. </author> <title> Edge Detection and Linear Feature Extraction Using a 2-D Random Field Model. </title> <journal> IEEE Trans. Pattern Analysis and Machine Intelligence, </journal> <volume> 11 </volume> <pages> 84-95, </pages> <year> 1989. </year>
Reference-contexts: The classic example of this approach is the Nevatia Babu line detector [11]. Other examples include work by Zhou et al. <ref> [15] </ref> and Nalwa and Pauchon [9]. Difficulties with the linking approach are basically due to its locality, and include unreliability of the low-level edge finder, instability of segmentation in the presence of bumps or many low-level edges, and difficulty hooking up long features if the data are sparse.
References-found: 15

