URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/LisaPromo.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Email: E-mail: farthur,erikp,tvdwg@cs.kun.nl  
Title: A Conceptual Language for the Description and Manipulation of Complex Information Models A Conceptual Language
Author: A.H.M. ter Hofstede, H.A. Proper and Th.P. van der Weide A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. G. Gupta, 
Date: January 1994.  
Note: Published as:  editor, Seventeenth Annual Computer Science Conference, volume 16 of Australian Computer Science Communications, pages 157-167,  
Address: Toernooiveld, 6525 ED Nijmegen, The Netherlands  Christchurch, New Zealand,  terbury.  
Affiliation: Department of Information Systems, University of Nijmegen  University of Can  
Abstract: Conceptual data modelling techniques aim at the representation of data (structures) at a high level of abstraction. This implies that conceptual data modelling techniques should not only be capable of representing complex structures in a natural way, but also the rules (constraints) that must hold for these structures. Contemporary data modelling techniques, however, do not provide a language which, on the one hand, has a formal semantics and, on the other hand, leads to natural looking expressions. In this paper, an informal introduction to such a language (LISA-D) for the data modelling technique (PSM), is presented. PSM is a generalisation of object-role models (such as ER, NIAM and FORM). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul and R. Hull. </author> <title> IFO: A Formal Semantic Database Model. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(4) </volume> <pages> 525-565, </pages> <month> December </month> <year> 1987. </year>
Reference: [2] <author> P. van Bommel, A.H.M. ter Hofstede, and Th.P. van der Weide. </author> <title> Semantics and verification of object-role models. </title> <journal> Information Systems, </journal> <volume> 16(5) </volume> <pages> 471-495, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: ER). In [17], the conceptual data modelling technique PSM (Predicator Set Model) has been defined, which is capable of representing complex object structures without violating the Conceptualisa-tion Principle. PSM is an extension of PM (Predicator Model <ref> [2] </ref>) which on its turn is a formalisa-tion of NIAM ([20], [31], [13]). This means that all NIAM schemas can be seen as PSM schemas.
Reference: [3] <author> T. Brus, M.C.J.D. van Eekelen, M. van Leer, and M.J. Plasmeijer. </author> <title> Clean A Language for Functional Graph Rewriting. </title> <booktitle> In Proceedings of the Third International Conference for Functional Programming Languages and Computer Architectures (FPCA '87), volume 274 of Lecture Notes in Computer Science, </booktitle> <pages> pages 364-384, </pages> <address> Portland, Oregon, USA, 1987. </address> <publisher> Springer-Verlag. </publisher> <pages> Page </pages>
Reference: [4] <author> P.D. Bruza and Th.P. van der Weide. </author> <title> Strat--ified Hypermedia Structures for Information Disclosure. </title> <journal> The Computer Journal, </journal> <volume> 35(3) </volume> <pages> 208-220, </pages> <year> 1992. </year>
Reference-contexts: Currently prototype implementations of LISA-D are being further developed, and used in an educational environment. In order to improve the support of the query formulation process the suitability of a hypertext approach is being studied ([5], <ref> [4] </ref>, [22]). When using such an approach, the user is able to navigate through the information structure (index), meanwhile formulating the information need (Query By Navigation).
Reference: [5] <author> C.A.J. Burgers, H.A. Proper, and Th.P. van der Weide. </author> <title> Organising an Information System as Stratified Hypermedia. </title> <editor> In H.A. Wijshoff, editor, </editor> <booktitle> Proceedings of the Computing Science in the Netherlands Conference, </booktitle> <pages> pages 109-120, </pages> <address> Utrecht, The Netherlands, </address> <month> November </month> <year> 1993. </year>
Reference: [6] <author> P.P. Chen. </author> <title> The Entity-Relationship Model: Toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference: [7] <author> O.M.F. De Troyer, R. Meersman, and F. Ponsaert. </author> <title> RIDL User Guide. Research report, International Centre for Information Analysis Services, Control Data Belgium, </title> <publisher> Inc., </publisher> <address> Brussels, Belgium, </address> <year> 1984. </year>
Reference-contexts: As a result, sentences in this language are meaningful expressions within the context of the UffiD, understandable and expressible by domain experts. The sentences, verbalis-ing the original examples, form extensional specifications, while queries (in general) correspond to intentional specifications. The language RIDL (Reference and IDea Language <ref> [7] </ref>, [19]) was developed for this purpose. However, due to its informal definition, no rigid base for both its syntax and semantics was provided, the language never got much acceptance. Furthermore, RIDL was based on the restricted binary version of NIAM ([29]).
Reference: [8] <author> R. Elmasri, J. Weeldreyer, and A. Hevner. </author> <title> The category concept: An extension to the entity-relationship model. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 1 </volume> <pages> 75-116, </pages> <year> 1985. </year>
Reference-contexts: In figure 6 we have chosen to represent the power type Air-force by putting an extra square around the corresponding element type Squadron (the graphical symbol for entity types in ER). Some extended ER versions (e.g. <ref> [8] </ref>) can indeed handle some of these concepts. Generally, graphical descriptions tend to be incomplete, as, for example, not all constraints can be represented graphically.
Reference: [9] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> Evolving Information Systems: Beyond Temporal Information Systems. </title> <editor> In A.M. Tjoa and I. Ramos, editors, </editor> <booktitle> Proceedings of the Data Base and Expert System Applications Conference (DEXA 92), </booktitle> <pages> pages 282-287, </pages> <address> Valencia, Spain, </address> <month> September </month> <year> 1992. </year> <note> Springer-Verlag. </note>
Reference: [10] <editor> J.J. van Griethuysen, editor. </editor> <title> Concepts and Terminology for the Conceptual Schema and the Information Base. </title> <publisher> Publ. nr. </publisher> <address> ISO/TC97/SC5-N695, </address> <year> 1982. </year>
Reference: [11] <author> T.A. Halpin. </author> <title> A logical analysis of information systems: static aspects of the data-oriented perspective. </title> <type> PhD thesis, </type> <institution> University of Queensland, Brisbane, Australia, </institution> <year> 1989. </year>
Reference-contexts: It also means that the design procedure supporting the construction of NIAM schemas (the way of working [30]) and the NIAM philosophy are not lost, they only need to be extended to support the additional constructs as well. An alternative formalization of NIAM is FORM ([13], <ref> [11] </ref>). The NIAM analysis method is based on an analysis method for natural language. The method starts from verbalisations of examples, which form a (partial) description of the underlying do Page main, and are provided by domain experts.
Reference: [12] <author> T.A. Halpin and J. Harding. </author> <title> Automated Support for Verbalization of Conceptual Schemas. </title> <editor> In S. Brinkkemper and F. Harm-sen, editors, </editor> <booktitle> Proceedings of the Fourth Workshop on the Next Generation of CASE Tools, </booktitle> <pages> pages 151-161, </pages> <address> Paris, France, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: It is only natural that the language for manipulating and querying also has the format of a semi natural language, and is designated to approximate the expert language as close as possible. The rationale behind this has also been addressed in <ref> [12] </ref>. As a result, sentences in this language are meaningful expressions within the context of the UffiD, understandable and expressible by domain experts. The sentences, verbalis-ing the original examples, form extensional specifications, while queries (in general) correspond to intentional specifications.
Reference: [13] <author> T.A. Halpin and M.E. Orlowska. </author> <title> Fact-oriented modelling for data analysis. </title> <journal> Journal of Information Systems, </journal> <volume> 2(2) </volume> <pages> 97-119, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: ER). In [17], the conceptual data modelling technique PSM (Predicator Set Model) has been defined, which is capable of representing complex object structures without violating the Conceptualisa-tion Principle. PSM is an extension of PM (Predicator Model [2]) which on its turn is a formalisa-tion of NIAM ([20], [31], <ref> [13] </ref>). This means that all NIAM schemas can be seen as PSM schemas.
Reference: [14] <author> A.H.M. ter Hofstede. </author> <title> Information Mod-elling in Data Intensive Domains. </title> <type> PhD thesis, </type> <institution> University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <year> 1993. </year>
Reference-contexts: However, due to its informal definition, no rigid base for both its syntax and semantics was provided, the language never got much acceptance. Furthermore, RIDL was based on the restricted binary version of NIAM ([29]). In [16] and <ref> [14] </ref> the language LISA-D (Language for Information Structure and Access Descriptions) has been formally introduced, covering both its syntax and semantics. This language is based on PSM. Its functionality far exceeds the intended functionality of RIDL.
Reference: [15] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Data Modelling in Complex Application Domains. </title> <editor> In P. Loucopoulos, editor, </editor> <booktitle> Proceedings of the Fourth International Conference CAiSE'92 on Advanced Information Systems Engineering, volume 593 of Lecture Notes in Computer Science, </booktitle> <pages> pages 364-377, </pages> <address> Manch-ester, United Kingdom, May 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Firstly, choices that are not relevant with respect to the UoD may have to be made, leading to overspecification. Secondly, even worse, the UoD may have to be adapted to meet the requirements of the modelling technique, e.g. by the introduction of extra object types (see <ref> [15] </ref>). These problems are caused by the lack of sufficiently powerful construction mechanisms. A second important principle of conceptual data modelling is the 100% Principle ([10]), stating that a conceptual schema completely prescribes all the permitted states and transitions of the conceptual data base.
Reference: [16] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Formal definition of a conceptual language for the description and manipulation of information models. </title> <journal> Information Systems, </journal> <volume> 18(7) </volume> <pages> 489-523, </pages> <year> 1993. </year>
Reference-contexts: However, due to its informal definition, no rigid base for both its syntax and semantics was provided, the language never got much acceptance. Furthermore, RIDL was based on the restricted binary version of NIAM ([29]). In <ref> [16] </ref> and [14] the language LISA-D (Language for Information Structure and Access Descriptions) has been formally introduced, covering both its syntax and semantics. This language is based on PSM. Its functionality far exceeds the intended functionality of RIDL.
Reference: [17] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in conceptual data modelling. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(1) </volume> <pages> 65-100, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Besides constraints, it would also be convenient to be able to express queries and updates on a conceptual level. Many query and manipulation languages (e.g. SQL) require a fairly high level of training, or are based on a rather primitive data modelling technique (e.g. ER). In <ref> [17] </ref>, the conceptual data modelling technique PSM (Predicator Set Model) has been defined, which is capable of representing complex object structures without violating the Conceptualisa-tion Principle. PSM is an extension of PM (Predicator Model [2]) which on its turn is a formalisa-tion of NIAM ([20], [31], [13]).
Reference: [18] <author> J.W.G.M. Hubbers. </author> <title> Automated Support for Verification & Validation of Graphical Constraints in PSM. </title> <type> Technical Report 93/01, </type> <institution> Software Engineering Research Centre (SERC), </institution> <address> Utrecht, The Netherlands, </address> <year> 1993. </year>
Reference-contexts: Furthermore, we introduce a user interface for this CASE-Tool supporting the special constructs of LISA-D. Several prototype implementations of Doolittle have been set up. We mention [21], an implementa tion in the functional language Clean ([3]), and <ref> [18] </ref>, which is based on the language Prolog.
Reference: [19] <author> R. Meersman. </author> <title> The RIDL Conceptual Language. Research report, International Cen-tre for Information Analysis Services, Control Data Belgium, </title> <publisher> Inc., </publisher> <address> Brussels, Belgium, </address> <year> 1982. </year>
Reference-contexts: As a result, sentences in this language are meaningful expressions within the context of the UffiD, understandable and expressible by domain experts. The sentences, verbalis-ing the original examples, form extensional specifications, while queries (in general) correspond to intentional specifications. The language RIDL (Reference and IDea Language [7], <ref> [19] </ref>) was developed for this purpose. However, due to its informal definition, no rigid base for both its syntax and semantics was provided, the language never got much acceptance. Furthermore, RIDL was based on the restricted binary version of NIAM ([29]).
Reference: [20] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Syd-ney, Australia, </address> <year> 1989. </year>
Reference: [21] <author> A.Th. Peters, M.C.J.D. van Eekelen, M.J. Plasmeijer, and Th.P. van der Weide. </author> <title> A CASE-tool for the development of Information Systems implemented in a pure functional language. </title> <type> Technical Report, </type> <note> to be published, </note> <institution> Information Systems Group, Computing Science Institute, University of Nijmegen, </institution> <address> The Netherlands, </address> <year> 1993. </year>
Reference-contexts: The behaviour of this CASE-Tool is described in terms of an interpret ing automaton (see [31]). Furthermore, we introduce a user interface for this CASE-Tool supporting the special constructs of LISA-D. Several prototype implementations of Doolittle have been set up. We mention <ref> [21] </ref>, an implementa tion in the functional language Clean ([3]), and [18], which is based on the language Prolog.
Reference: [22] <author> H.A. Proper. </author> <title> A Theory for Conceptual Modelling of Evolving Application Domains. </title> <type> PhD thesis, </type> <institution> University of Nijmegen, </institution> <address> Ni-jmegen, The Netherlands, </address> <year> 1994. </year>
Reference-contexts: Furthermore, research is being performed in the development of Elisa-D, a version of LISA-D supporting the (on line) evolution of information systems ([9], [24], [25], [23], <ref> [22] </ref>). Currently prototype implementations of LISA-D are being further developed, and used in an educational environment. In order to improve the support of the query formulation process the suitability of a hypertext approach is being studied ([5], [4], [22]). <p> supporting the (on line) evolution of information systems ([9], [24], [25], [23], <ref> [22] </ref>). Currently prototype implementations of LISA-D are being further developed, and used in an educational environment. In order to improve the support of the query formulation process the suitability of a hypertext approach is being studied ([5], [4], [22]). When using such an approach, the user is able to navigate through the information structure (index), meanwhile formulating the information need (Query By Navigation).
Reference: [23] <author> H.A. Proper and Th.P. van der Weide. </author> <title> Information Disclosure in Evolving Information Page Systems: Taking a shot at a moving tar-get. </title> <type> Technical Report 93-22, </type> <institution> Information Systems Group, Computing Science Institute, University of Nijmegen, The Nether-lands, </institution> <year> 1993. </year>
Reference-contexts: Furthermore, research is being performed in the development of Elisa-D, a version of LISA-D supporting the (on line) evolution of information systems ([9], [24], [25], <ref> [23] </ref>, [22]). Currently prototype implementations of LISA-D are being further developed, and used in an educational environment. In order to improve the support of the query formulation process the suitability of a hypertext approach is being studied ([5], [4], [22]).
Reference: [24] <author> H.A. Proper and Th.P. van der Weide. </author> <title> Towards a General Theory for the Evolution of Application Models. In M.E. </title> <editor> Orlowska and M. Papazoglou, editors, </editor> <booktitle> Proceedings of the Fourth Australian Database Conference, Advances in Database Research, </booktitle> <pages> pages 346-362. </pages> <publisher> World Scientific, </publisher> <address> Brisbane, Australia, </address> <month> February </month> <year> 1993. </year>
Reference-contexts: Furthermore, research is being performed in the development of Elisa-D, a version of LISA-D supporting the (on line) evolution of information systems ([9], <ref> [24] </ref>, [25], [23], [22]). Currently prototype implementations of LISA-D are being further developed, and used in an educational environment. In order to improve the support of the query formulation process the suitability of a hypertext approach is being studied ([5], [4], [22]).
Reference: [25] <author> H.A. Proper and Th.P. van der Weide. EVORM: </author> <title> A Conceptual Modelling Technique for Evolving Application Domains. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(12) </volume> <pages> 313-359, </pages> <year> 1994. </year>
Reference-contexts: Furthermore, research is being performed in the development of Elisa-D, a version of LISA-D supporting the (on line) evolution of information systems ([9], [24], <ref> [25] </ref>, [23], [22]). Currently prototype implementations of LISA-D are being further developed, and used in an educational environment. In order to improve the support of the query formulation process the suitability of a hypertext approach is being studied ([5], [4], [22]).
Reference: [26] <editor> G. Scheschonk. Eine auf Petri-Netzen ba-sierende Konstruktions, </editor> <title> Analyse und (Teil)- Verificationsmethode zur Modellierungsun-terstutzung bei der Entwicklung von Infor-mationssystemen. </title> <type> PhD thesis, </type> <institution> Berlin University of Technology, </institution> <address> Berlin, Germany, </address> <year> 1984. </year> <note> (In German). </note>
Reference-contexts: A schema type is a composition of some underlying (sub)schema, called its decomposition. An instance of a schema type is a population of its decomposition. For example, figure 4 contains a meta model of activity graphs (see <ref> [26] </ref>), using schema decomposition. Activity graphs are used for modellling processes and information passing between processes. They are bipartite directed graphs, consisting of Activities (processes) and States. States can be input for, or output of activities. In an activity graph, both activities and states may be subject to refinement.
Reference: [27] <author> D.W. Shipman. </author> <title> The Functional Data Model and the Data Language DAPLEX. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(1) </volume> <pages> 140-173, </pages> <month> March </month> <year> 1981. </year>
Reference: [28] <author> J.D. Ullman. </author> <title> Principles of Database and Knowledgebase Systems, volume I, chapter 3. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1989. </year>
Reference: [29] <author> G.M.A. Verheijen and J. van Bekkum. </author> <title> NIAM: an Information Analysis Method. </title> <editor> In T.W. Olle, H.G. Sol, and A.A. Verrijn-Stuart, editors, </editor> <booktitle> Information Systems Design Methodologies: A Comparative Review, </booktitle> <pages> pages 537-590. </pages> <address> North-Holland/IFIP, Ams-terdam, The Netherlands, </address> <year> 1982. </year>
Reference: [30] <author> G.M. Wijers. </author> <title> Modelling Support in Information Systems Development. </title> <type> PhD thesis, </type> <institution> Delft University of Technology, Delft, </institution> <address> The Netherlands, </address> <year> 1991. </year>
Reference-contexts: This means that all NIAM schemas can be seen as PSM schemas. It also means that the design procedure supporting the construction of NIAM schemas (the way of working <ref> [30] </ref>) and the NIAM philosophy are not lost, they only need to be extended to support the additional constructs as well. An alternative formalization of NIAM is FORM ([13], [11]). The NIAM analysis method is based on an analysis method for natural language. <p> Testing whether this property is uni-versially valid, is part of the schema verification process. As an example, consider the information structure from figure 1. This schema (omitting the constraints) is described as follows: LABEL TYPE H-nr HAS DOMAIN Int; S-name HAS DOMAIN String <ref> [30] </ref>; C-name HAS DOMAIN String [30]; Page - Commu nity r r (C-name) r Street r r r (S-name) r Address r r r ? 6 - in ? 6 ffi ffi ENTITY TYPE Address HAS ATTRIBUTE H-nr; Street HAS ATTRIBUTE S-name; Community HAS ATTRIBUTE C-name; FACT TYPE In-street (in: Address, <p> Testing whether this property is uni-versially valid, is part of the schema verification process. As an example, consider the information structure from figure 1. This schema (omitting the constraints) is described as follows: LABEL TYPE H-nr HAS DOMAIN Int; S-name HAS DOMAIN String <ref> [30] </ref>; C-name HAS DOMAIN String [30]; Page - Commu nity r r (C-name) r Street r r r (S-name) r Address r r r ? 6 - in ? 6 ffi ffi ENTITY TYPE Address HAS ATTRIBUTE H-nr; Street HAS ATTRIBUTE S-name; Community HAS ATTRIBUTE C-name; FACT TYPE In-street (in: Address, from: Street); In-community (in: Street,
Reference: [31] <author> J.J.V.R. Wintraecken. </author> <title> The NIAM Information Analysis Method: Theory and Practice. </title> <publisher> Kluwer, </publisher> <address> Deventer, The Netherlands, </address> <year> 1990. </year>
Reference-contexts: ER). In [17], the conceptual data modelling technique PSM (Predicator Set Model) has been defined, which is capable of representing complex object structures without violating the Conceptualisa-tion Principle. PSM is an extension of PM (Predicator Model [2]) which on its turn is a formalisa-tion of NIAM ([20], <ref> [31] </ref>, [13]). This means that all NIAM schemas can be seen as PSM schemas. <p> The behaviour of this CASE-Tool is described in terms of an interpret ing automaton (see <ref> [31] </ref>). Furthermore, we introduce a user interface for this CASE-Tool supporting the special constructs of LISA-D. Several prototype implementations of Doolittle have been set up. We mention [21], an implementa tion in the functional language Clean ([3]), and [18], which is based on the language Prolog.
Reference: [32] <author> E. Yourdon. </author> <title> Modern Structured Analysis. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year> <pages> Page </pages>
References-found: 32

