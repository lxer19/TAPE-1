URL: ftp://ftp.cs.ucla.edu/pub/ficus/mcsa94.ps.gz
Refering-URL: http://ficus-www.cs.ucla.edu/project-members/geoff/pubs.html
Root-URL: http://www.cs.ucla.edu
Email: geoff@ficus.cs.ucla.edu  
Title: The Design of the Seer Predictive Caching System  
Author: Geoffrey H. Kuenning 
Address: Los Angeles Los Angeles, CA 90024  
Affiliation: Computer Science Department University of California,  
Abstract: Supporting portable computers in a disconnected environment will require persistent caching of files without user intervention. Seer is a system that uses semantic information to predict which files the user is likely to work on, and arranges to transparently cache them on the portable platform prior to disconnection. We present the overall design of the Seer system and the algorithms used to determine semantic relationships. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Rafael Alonso, Daniel Barbara, and Luis L. Cova. </author> <title> Using stashing to increase node autonomy in distributed file systems. </title> <booktitle> In Proceedings of the Ninth IEEE Symposium on Reliability in Distributed Software and Database Systems, </booktitle> <pages> pages 12-21, </pages> <month> Oc-tober </month> <year> 1990. </year>
Reference-contexts: In such situations, the portable machine must create copies of important files in a locally persistent (on-disk) cache while it is still well-connected, so that they will be available after disconnection <ref> [1, 4, 6] </ref>. Because of the high cost of a cache miss (often stopping all work on a given task), accuracy in caching is of critical importance. In previous work [7], we observed that simple algorithms such as least-recently-used (LRU) are not sufficient to guarantee availability.
Reference: [2] <author> James Griffioen and Randy Appleton. </author> <title> Reducing file system latency using a predictive approach. </title> <booktitle> In Proceedings of the Summer USENIX Conference Proceedings, </booktitle> <address> Boston, MA, June 1994. </address> <publisher> USENIX. </publisher>
Reference-contexts: to tune the system's performance further once implementation is complete. 5 Other Applications Although Seer was designed to solve the problems of portable computers, the techniques can be useful in other applications, such as the related problem of disconnected home use [3] and more distantly-related ones such as file prefetching <ref> [2] </ref> for performance. Prediction can also be useful beyond the file-system paradigm. For example, file transfer protocols such as ftp can use prediction to fetch files that are expected to be heavily accessed.
Reference: [3] <author> John S. Heidemann, Thomas W. Page, Jr., Rich-ard G. Guy, and Gerald J. Popek. </author> <title> Primarily disconnected operation: Experiences with Ficus. </title> <booktitle> In Proceedings of the Second Workshop on Management of Replicated Data. IEEE, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: We expect to tune the system's performance further once implementation is complete. 5 Other Applications Although Seer was designed to solve the problems of portable computers, the techniques can be useful in other applications, such as the related problem of disconnected home use <ref> [3] </ref> and more distantly-related ones such as file prefetching [2] for performance. Prediction can also be useful beyond the file-system paradigm. For example, file transfer protocols such as ftp can use prediction to fetch files that are expected to be heavily accessed.
Reference: [4] <author> Peter Honeyman, Larry Huston, Jim Rees, and Dave Bachmann. </author> <title> The Little Work project. </title> <booktitle> In Proceedings of the Third Workshop on Workstation Operating Systems, </booktitle> <pages> pages 11-14, </pages> <address> Key Bis-cayne, FL, </address> <month> April </month> <year> 1992. </year> <note> IEEE. </note>
Reference-contexts: In such situations, the portable machine must create copies of important files in a locally persistent (on-disk) cache while it is still well-connected, so that they will be available after disconnection <ref> [1, 4, 6] </ref>. Because of the high cost of a cache miss (often stopping all work on a given task), accuracy in caching is of critical importance. In previous work [7], we observed that simple algorithms such as least-recently-used (LRU) are not sufficient to guarantee availability.
Reference: [5] <author> R. A. Jarvis and E. A. Patrick. </author> <title> Clustering using a similarity measure based on shared near neighbors. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-22(11):1025-1034, </volume> <month> November </month> <year> 1973. </year>
Reference-contexts: As discussed in Section 3.3, these clusters may have overlapping membership. Our current clustering algorithm is a variant of an efficient aggregation method devised by Jarvis and Patrick <ref> [5] </ref>. In this method, each file is initially assigned to its own cluster. Then each file is scanned, and if it is close to some other file (by a parameterized definition of "close"), the file's clusters are combined.
Reference: [6] <author> James J. Kistler and Mahadev Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <year> 1992. </year>
Reference-contexts: In such situations, the portable machine must create copies of important files in a locally persistent (on-disk) cache while it is still well-connected, so that they will be available after disconnection <ref> [1, 4, 6] </ref>. Because of the high cost of a cache miss (often stopping all work on a given task), accuracy in caching is of critical importance. In previous work [7], we observed that simple algorithms such as least-recently-used (LRU) are not sufficient to guarantee availability.
Reference: [7] <author> Geoffrey H. Kuenning, Gerald J. Popek, and Peter Reiher. </author> <title> An analysis of trace data for predictive file caching in mobile computing. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 291-306. </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: Because of the high cost of a cache miss (often stopping all work on a given task), accuracy in caching is of critical importance. In previous work <ref> [7] </ref>, we observed that simple algorithms such as least-recently-used (LRU) are not sufficient to guarantee availability. Nor can users be expected to perform this task by hand on a modern computer where the interrelationships among programs are complex and deliberately hidden. <p> "hidden" connections among files and recognizing fl This work was partially supported by the Advanced Research Projects Agency under contract N00174-91-C-0107. their relationship to the user's activities, Seer ensures that work will be able to continue after disconnection. 2 Feasibility A 10-week study of three different real-world environments was conducted <ref> [7] </ref> to determine whether it is feasible to predict the files needed by a user. Table 1 summarizes the working-set sizes we observed in this study. It can be seen that the average working-set sizes were quite small, and can be easily stored on the average portable computer's disk. <p> It can be seen that attention-shift rates are relatively high in all three environments, indicating that it will not be trivial to devise a successful prediction algorithm. The reader is referred to <ref> [7] </ref> for a description of how we characterized attention shifts and for more detailed statistics. 3 Semantic Relationships Among Files Most tasks performed by computer users require access to a number of files that are interrelated by virtue of being necessary for that task, either naturally or incidentally.
Reference: [8] <author> Thomas W. Page, Jr., Richard G. Guy, Gerald J. Popek, and John S. Heidemann. </author> <title> Architecture of the Ficus scalable replicated file system. </title> <type> Technical Report CSD-910005, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: Seer can benefit from the following additional features: 1. Automatic resolution of conflicting updates 2. Automatic propagation of file updates 5 3. Unified name space 4. Transparent access to remotely-stored files These capabilities can be provided by the Ficus distributed file system <ref> [8, 9] </ref>. In this implementation, the portable behaves as a full-featured workstation when connected to the network, yet can be used as a fully-independent peer when disconnected, even sharing file updates with other disconnected portables when appropriate.
Reference: [9] <author> David H. Ratner. </author> <title> Selective replication: Fine-grain control of replicated files. </title> <type> Master's thesis, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <year> 1995. </year>
Reference-contexts: Seer can benefit from the following additional features: 1. Automatic resolution of conflicting updates 2. Automatic propagation of file updates 5 3. Unified name space 4. Transparent access to remotely-stored files These capabilities can be provided by the Ficus distributed file system <ref> [8, 9] </ref>. In this implementation, the portable behaves as a full-featured workstation when connected to the network, yet can be used as a fully-independent peer when disconnected, even sharing file updates with other disconnected portables when appropriate.
Reference: [10] <author> Mahadev Satyanarayanan, James J. Kistler, Pu-neet Kumar, Maria E. Okasaki, Ellen H. Siegel, and David C. Steere. Coda: </author> <title> A highly available file system for a distributed workstation environment. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(4) </volume> <pages> 447-459, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: reasonable for small 2 Number Per Number Per User Per Day User Per Week Environment Mean Max Mean Max First 0.4 (0.3) 0.8 0.7 (0.2) 0.8 Second 0.3 (0.2) 0.5 0.5 (0.1) 0.6 Third 0.3 (0.3) 0.9 0.5 (0.4) 1.0 Table 2: Daily and Weekly Attention Shifts (All Users) files <ref> [10] </ref> and appropriate for our purposes (since the Seer system caches whole files), we found that a system based only on opens failed to detect important relationships. For example, consider the common case of a C program that is built from three source files, a.c, b.c, and c.c.
Reference: [11] <author> Carl D. Tait and Dan Duchamp. </author> <title> Detection and exploitation of file working sets. </title> <booktitle> In Proceedings of the Eleventh International Conference on Distributed Computing Systems, </booktitle> <pages> pages 2-9, </pages> <year> 1991. </year> <month> 7 </month>
Reference-contexts: However, the "single-threaded" nature of human consciousness will tend to reduce this effect, and the averaging process inherent in our definition will remove the noise it introduces. (It is possible to apply the methods of Tait and Duchamp <ref> [11] </ref> to reduce or eliminate this noise, though we do not currently attempt to do so.) 3.3 Shared Libraries and Utility Programs A difficulty of much more practical significance is caused by the use of shared libraries and similar files in modern systems.
References-found: 11

