URL: http://www.tns.lcs.mit.edu/~djw/library/coots96-riggs.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/
Root-URL: 
Title: Pickling State in the Java(tm) System  
Author: Roger Riggs, Jim Waldo, and Ann Wollrath 
Address: Toronto, Ontario, Canada,  
Affiliation: Technologies  Sun Microsystems, Inc.  
Note: The following paper was originally published in the Proceedings of the USENIX 1996 Conference on Object-Oriented  For more information about USENIX Association contact:  
Email: Email: office@usenix.org  
Phone: 1. Phone: 510 528-8649 2. FAX: 510 548-5738 3.  4.  
Date: June 1996.  
Web: WWW URL: http://www.usenix.org  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Arnold, Ken, and James Gosling, </author> <title> The Java Programming Language, </title> <publisher> Addison-Wesley (1996). </publisher>
Reference: [2] <author> Birrell, Andrew, Michael B. Jones, and Edward P. Wobber, </author> <title> A simple and efficient implementation for small databases, </title> <institution> Digital Equipment Corporation Systems Research Center Technical Report 24 (1987). </institution>
Reference: [3] <author> Birrell, Andrew, Greg Nelson, Susan Owicki, and Edward Wobber, </author> <title> Network Objects. </title> <institution> Digital Equipment Corporation Systems Research Center Technical Report 115 (1994). </institution>
Reference: [4] <author> Gosling, James, and Bill Joy, Guy Steele, </author> <title> The Java Language Specification, </title> <note> in preparation. </note>
Reference-contexts: The Java Virtual Machine retains descriptions of Ja va object classes for its o wn use in loading and v erifying classes. Pickling uses this information about objects to save and restore the state of objects. The Java language is described in full else where <ref> [4] </ref> so only those aspects rele vant to sa ving an object s state will be described here. The Ja va language is a strongly typed objectoriented language with a syntax similar to C. Java classes inherit implementations from at most one other class.
Reference: [5] <author> Herlihy, M and B. Liskov, </author> <title> A Value Transmission Method for Abstract Data Types, </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Volume 4, Number 4, </volume> <year> (1982). </year>
Reference-contexts: SHA is described in detail in [7]. We use SHA Version 3. Java Type Specifiers The strings and v alues that are input to the hash algorithm are all defined by the formats and constants defined by the Ja va Virtual Machine Specification <ref> [5] </ref>. Class names, method names, method signatures, field names and signatures are strings. Method and field signatures use the same encoding as defined by the type system in the Ja va V irtual Machine.
Reference: [6] <author> Lindholm, Tim and Frank Yellin, </author> <title> The Java Virtual Machine Specification, </title> <note> Addison-Wesley (1996), in preparation. </note>
Reference: [7] <author> Schneier, Bruce, </author> <title> Applied Cryptography, </title> <publisher> John Wiley & Sons, Inc (1994). </publisher>
Reference-contexts: SHA produces secure 160 bit hash v alues from data of arbitrary length. SHA pro vides all the guarantees mentioned abo ve. SHA is described in detail in <ref> [7] </ref>. We use SHA Version 3. Java Type Specifiers The strings and v alues that are input to the hash algorithm are all defined by the formats and constants defined by the Ja va Virtual Machine Specification [5]. Class names, method names, method signatures, field names and signatures are strings.

References-found: 7

