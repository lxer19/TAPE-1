URL: http://www.cs.washington.edu/research/projects/lis/www/papers/postscript/burns-tau95.ps
Refering-URL: http://www.cs.washington.edu/research/projects/lis/www/papers/
Root-URL: 
Email: fdarrenc,burnsg@cs.washington.edu  
Title: Synthesis and Analysis of a Delay-Insensitive Folded FIFO  
Author: Darren C. Cronquist and Steven M. Burns 
Address: Box 352350 Seattle, WA 98195-2350  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: Fall-through FIFOs provide high data throughput with a small overhead for control but also yield a latency dependent on the size of the FIFO. Non-fallthrough FIFOs remove this latency dependency by adding more complex control to allow data to bypass stages. An organization achieving low latency folds the FIFO in half and uses arbitration to choose between passing data along the top half or bypassing directly to the bottom half. Current implementations of the folded FIFO require non-local communication via daisy chained full/empty status lines, and hence are not quasi-delay-insensitive. In this paper, we describe an asynchronous non-fallthrough folded FIFO which is quasi-delay-insensitive but still exhibits reasonable throughput and latency. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Erik Brunvand. </author> <title> Low latency self-timed flow-through fifos. </title> <editor> In William J. Dally, John W. Poulton, and Alexander T. Ishii, editors, </editor> <booktitle> Proceedings of the Sixteenth Conference on Advanced Research in VLSI, </booktitle> <pages> pages 76-90. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> California, </address> <year> 1995. </year>
Reference-contexts: Ideally, one would like to construct a FIFO with high throughput, low latency, and small area overhead for control. The ubiquitous fall-through FIFO, implemented with a micropipeline [9], has a latency dependent on the FIFO size since data must flow through every stage to reach the output. Recently, Brunvand <ref> [1] </ref> analyzed a variety of non-fallthrough FIFO organizations achieving lower latencies. In particular, his folded FIFO improves over the micropipeline latency by folding the FIFO on top of itself and allowing data to jump over empty stages.
Reference: [2] <author> S. M. Burns. </author> <title> Performance Analysis and Optimization of Asynchronous Circuits. </title> <type> Ph.D. thesis, </type> <institution> California Institute of Technology, </institution> <year> 1991. </year> <month> CS-TR-91-1. </month>
Reference-contexts: Three gates from the resulting production rules were further decomposed into smaller rules [4], and the entire set of rules was bubble reshu*ed, paying careful attention to the critical cycle delays of the resulting system <ref> [2] </ref>. These production rules define a unique circuit for one stage of the FIFO and are shown in figure 6 (inverters are listed together with their input signals). In our notation, the parity of the underscores within a variable name determines the sense of that variable.
Reference: [3] <author> S. M. Burns. </author> <title> Hierarchical Synthesis Engine: A BDD-based tool for the synthesis of asynchronous circuits. </title> <note> in preparation, </note> <month> November </month> <year> 1995. </year>
Reference-contexts: One other variable, m, marks the state between the completion of an Out!X and the start of a zip or Get?X (as in the CSP description). A new synthesis and analysis tool, called the Hierarchical Synthesis Engine (HSE) <ref> [3] </ref>, was used to transform the handshaking expansion into production rules using methods based on implicitly enumerating the system's reachable state space.
Reference: [4] <author> S. M. Burns. </author> <title> General conditions for the decomposition of state holding elements. </title> <note> submitted to Async '96, </note> <month> March </month> <year> 1996. </year>
Reference-contexts: A new synthesis and analysis tool, called the Hierarchical Synthesis Engine (HSE) [3], was used to transform the handshaking expansion into production rules using methods based on implicitly enumerating the system's reachable state space. Three gates from the resulting production rules were further decomposed into smaller rules <ref> [4] </ref>, and the entire set of rules was bubble reshu*ed, paying careful attention to the critical cycle delays of the resulting system [2]. These production rules define a unique circuit for one stage of the FIFO and are shown in figure 6 (inverters are listed together with their input signals).
Reference: [5] <author> H. Hulgaard and S. M. Burns. </author> <title> Bounded delay timing analysis of a class of CSP programs with choice. </title> <booktitle> In International Symposium on Advanced Research in Asynchronous Circuits and Systems, </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: Either four or five elements are in the FIFO during this part of the experiment. Thus the latency per number of elements stored in the FIFO is about 16ns. This is close to the 15ns compute in the final experiment. 6 Formal Timing Analysis Using techniques from <ref> [5, 6] </ref>, we have performed an extreme-case timing analysis directly on the flat Petri net specification shown in figure 3. This analysis differs from the HSPICE experiments because it demonstrates that for all possible executions of the net, not just a single simulation, that certain timing properties hold.
Reference: [6] <author> H. Hulgaard and S. M. Burns. </author> <title> Efficient timing analysis of a class of petri nets. </title> <booktitle> In Computer Aided Verification (CAV). </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: However, arbitration is required to choose between firing transitions Zip and In?Y when both are enabled. In our drawings, we indicate that a place requires arbitration (i.e., is not a unique choice place <ref> [6] </ref>) by using a double circle. In between each stage are three communication channels: (P ut; In) to transfer new data, (Get; Out) to pass current data, and (Zip; Zipped) to communicate the zipped status of adjoining stages. <p> Either four or five elements are in the FIFO during this part of the experiment. Thus the latency per number of elements stored in the FIFO is about 16ns. This is close to the 15ns compute in the final experiment. 6 Formal Timing Analysis Using techniques from <ref> [5, 6] </ref>, we have performed an extreme-case timing analysis directly on the flat Petri net specification shown in figure 3. This analysis differs from the HSPICE experiments because it demonstrates that for all possible executions of the net, not just a single simulation, that certain timing properties hold.
Reference: [7] <author> Henrik Hulgaard. </author> <title> Timing Analysis and Verification of Timed Asynchronous Circuits. </title> <type> Ph.D. thesis, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: The same can not be said of the insert response time, as was demonstrated in the HSPICE experiments. The maximum time between a "Insert Request" transition and a "Insert Acknowl 181 182 183 edge" transition grows linearly with increasing FIFO size. A complete description can be found in <ref> [7] </ref>. 7 Conclusion We have introduced, synthesized, and analyzed a delay-insensitive folded FIFO, the Zipper FIFO. Our simulations show that the FIFO typically exhibits a steady-state cycle period of 17ns and a comparable latency per number of elements in the FIFO.
Reference: [8] <author> A. J. Martin. </author> <title> Programming in VLSI: From communicating processes to delay-insensitive circuits. In C.A.R. Hoare, editor, </title> <booktitle> UT Year of Programming Institute on Concurrent Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: For example, figure 3 shows the Petri net description for a five stage FIFO with a simple environment. 3 CSP and Handshaking Expansion To convert the Petri net description into a circuit we use the VLSI programming techniques developed by Martin <ref> [8] </ref>.
Reference: [9] <author> Ivan E. Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <volume> 32(6) </volume> <pages> 720-738, </pages> <year> 1989. </year> <month> 184 </month>
Reference-contexts: 1 Introduction The design of asynchronous FIFOs involves tradeoffs between throughput, latency, and area. Ideally, one would like to construct a FIFO with high throughput, low latency, and small area overhead for control. The ubiquitous fall-through FIFO, implemented with a micropipeline <ref> [9] </ref>, has a latency dependent on the FIFO size since data must flow through every stage to reach the output. Recently, Brunvand [1] analyzed a variety of non-fallthrough FIFO organizations achieving lower latencies.
References-found: 9

