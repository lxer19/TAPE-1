URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1994/tr-94-054.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1994.html
Root-URL: http://www.icsi.berkeley.edu
Title: Therapy Plan Generation in Complex Dynamic Environments  
Author: Oksana Arnold and Klaus P. Jantke 
Note: Part of this work was done while the author was visiting the "International  
Address: Natur-wissenschaften, P.O.Box 66, 04251 Leipzig, Germany.  Natur-wissenschaften, P.O.Box 66, 04251 Leipzig, Germany  
Affiliation: Hochschule fur Technik, Wirtschaft und Kultur Leipzig (FH), Fachbereich Informatik, Mathematik  Computer Science Institute", Berkeley, CA Hochschule fur Technik, Wirtschaft und Kultur Leipzig (FH), Fachbereich Informatik, Mathematik  
Date: October 1994  
Pubnum: TR-94-054  
Abstract: There has been developed a methodology for the automatic synthesis of therapy plans for complex dynamic systems. An algorithm has been implemented and testet. This is the core of some control synthesis module which is embedded in a larger knowledge-based system for control, diagnosis and therapy. There are several applications. The approach is based on certain concepts of structured graphs. The overall search space is a family of hierarchically structured plans. Together with some goal specification it is forming a so-called rooted family. Simple concepts of graph substitution and rewriting are introduced. The output of the planner is a hierarchically structured plan. This has a uniquely determined normal form taken for execution. Plan generation is interpreted as inductive program synthesis. Indeed, the planner developed and implemented works as an inductive inference machine. It turns out that consistency and executability are two fundamental, but distinguished concepts. When describing the program synthesis algorithm, we focus on constraint monitoring. This is taken as a basis for generating programs being consistent with the underlying technology representation. fl The work has been partially supported by the German Federal Ministry for Research and Technology (BMFT) within the Joint Project (BMFT-Verbundprojekt) Wiscon on Development of Methods for Intelligent Monitoring and Control under contract no. 413-4001-01 IW 204 B. 
Abstract-found: 1
Intro-found: 1
Reference: [AJ94a] <editor> Oksana Arnold and Klaus P. Jantke. Grundbegriffe der Planung I. Studie der Forschungs-gruppe Algorithmisches Lernen, </editor> <address> HTWK Leipzig (FH), </address> <institution> FB Informatik, Mathematik & Natur-wissenschaften, </institution> <month> August </month> <year> 1994. </year> <note> Studie #01/94, Version 1.0. </note>
Reference-contexts: Due to a couple of pecularities of the intended target domain, this approach is considerably distinguished from most other planning approaches. The authors' survey <ref> [AJ94a] </ref> is devoted to some comparison in this respect. In current process automation, there is an obvious development towards more complex, more efficient and less controllable dynamic processes. <p> Chapter 4 is briefly relating the authors' approach to the activities of the relevant community. This will complete the preliminaries. A careful inspection of some representative sample of current work in planning (cf. <ref> [AJ94a] </ref>) exhibits some lack of precision. The deficiency of precise concepts 1 has some implications. As long as certain formalisms are unclear, a couple of detailed questions cannot be answered. For instance, it seems a crucial problem in plan generation and plan execution to model properly simultaneuous actions. <p> sense. [AJ94b] is focussed on this particular insight. 1 Surprisingly, 6 out of the most recent (and best) 10 German Ph.D. theses which deal with planning ([Gun92], [Woh92], [Hor92], [Fis93], [Sau93], [Koh93], [Wer93], [Win94], [Koh94], [Thi94]) are suffering from the lack of a somehow formal and explicit plan concept (cf. <ref> [AJ94a] </ref> for an analysis). 2 2 Towards Knowledge-Based Supervision and Control The present chapter is intended to briefly sketch the knowledge processing problems surrounding our present approach. We do not aim at a comprehensive introduction to knowledge-based process supervision and control. Let us start with an illustrative example.
Reference: [AJ94b] <author> Oksana Arnold and Klaus P. </author> <title> Jantke. Therapy plan generation as program synthesis. </title> <editor> In Setsuo Arikawa and K.P. Jantke, editors, </editor> <booktitle> Algorithmic Learning Theory, AII'94 and ALT'94, volume 872 of LNAI, </booktitle> <pages> pages 40-55. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Chapter 5 is presenting our formalisms to describe plans based on concepts of hierarchically structured graphs. These concepts are adopted from computational complexity investigations and tailored to the needs of therapy plan generation. The fundamentals, which have been outlined in [AJ94c], <ref> [AJ94b] </ref> and [AJ94d] first, are developed in some detail. Based on this formal background, chapter 6 contains the therapy plan generation approach. Interestingly, the generation of therapy plans as developed turns out to be inductive program synthesis, in some sense. [AJ94b] is focussed on this particular insight. 1 Surprisingly, 6 out <p> The fundamentals, which have been outlined in [AJ94c], <ref> [AJ94b] </ref> and [AJ94d] first, are developed in some detail. Based on this formal background, chapter 6 contains the therapy plan generation approach. Interestingly, the generation of therapy plans as developed turns out to be inductive program synthesis, in some sense. [AJ94b] is focussed on this particular insight. 1 Surprisingly, 6 out of the most recent (and best) 10 German Ph.D. theses which deal with planning ([Gun92], [Woh92], [Hor92], [Fis93], [Sau93], [Koh93], [Wer93], [Win94], [Koh94], [Thi94]) are suffering from the lack of a somehow formal and explicit plan concept (cf. [AJ94a] for <p> In dependence on the discovered fault, the current reserves of the system, and the state of the process, the control synthesis should derive and execute an appropriate therapy plan. Thus, therapy plans are formal objects having some operational semantics in the process under consideration. They are programs (cf. <ref> [AJ94b] </ref>). The module for therapy plan generation is interacting with a large number of modules in its knowledge processing environment. <p> These may be very briefly described as follows. First, therapy plan generation is necessarily based on incomplete information. Second, it is generating programs for execution. Thus, in its right perspective, therapy plan generation turns out to be inductive program synthesis. This has been made explicit in <ref> [AJ94b] </ref>, for the first time. 3.3.1 Program Synthesis For automatic program synthesis, [BB93] is an excellent recent reference: The design and implementation of correct software meeting given requirements continues to be most relevant, practical, and scientifically challenging problem. There are many lines of research directed towards solving this problem. <p> Second, there are inductive inference problems for which inconsistent algorithms are remarkably more efficient than consistent algorithms (cf. [Wie92] and references therein). 10 Our basic planning algorithm developed below (cf. [Arn92a], [AJ94c], <ref> [AJ94b] </ref>) works consis-tently. In fact, refuting inconsistent action scripts during plan generation is the main deductive task involved. But we can imagine particular circumstances where inconsistent planning may gain an advantage over consistent algorithms.
Reference: [AJ94c] <author> Oksana Arnold and Klaus P. </author> <title> Jantke. Therapy plans as hierarchically structured graphs. </title> <type> WISCON Report 02/94, </type> <institution> HTWK Leipzig (FH), Fachbereich IMN, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: Chapter 5 is presenting our formalisms to describe plans based on concepts of hierarchically structured graphs. These concepts are adopted from computational complexity investigations and tailored to the needs of therapy plan generation. The fundamentals, which have been outlined in <ref> [AJ94c] </ref>, [AJ94b] and [AJ94d] first, are developed in some detail. Based on this formal background, chapter 6 contains the therapy plan generation approach. <p> Second, there are inductive inference problems for which inconsistent algorithms are remarkably more efficient than consistent algorithms (cf. [Wie92] and references therein). 10 Our basic planning algorithm developed below (cf. [Arn92a], <ref> [AJ94c] </ref>, [AJ94b]) works consis-tently. In fact, refuting inconsistent action scripts during plan generation is the main deductive task involved. But we can imagine particular circumstances where inconsistent planning may gain an advantage over consistent algorithms. <p> For understanding the program synthesis approach below, which allows to generate therapy plans in combining action scripts, both the syntax above and the knowledge that only elementary action scripts are carrying operational semantics will do. 5.2 Therapy Plans Plans are introduced as particular graphs (cf. <ref> [AJ94c] </ref>). Hence, therapy plan synthesis resp. program synthesis is synthesis of certain hierarchically structured graphs. There has been introduced a hierarchy of formal concepts denoted * a hierarchically structured family of plans, * a rooted family, * a hierarchically structured plan, * a plan.
Reference: [AJ94d] <author> Oksana Arnold and Klaus P. </author> <title> Jantke. Therapy plans as hierarchically structured graphs. </title> <booktitle> In Fifth International Workshop on Graph Grammars and their Application to Computer Science, </booktitle> <address> Williamsburg, Virginia, USA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Chapter 5 is presenting our formalisms to describe plans based on concepts of hierarchically structured graphs. These concepts are adopted from computational complexity investigations and tailored to the needs of therapy plan generation. The fundamentals, which have been outlined in [AJ94c], [AJ94b] and <ref> [AJ94d] </ref> first, are developed in some detail. Based on this formal background, chapter 6 contains the therapy plan generation approach.
Reference: [All83] <author> James F. Allen. </author> <title> Maintaining knowledge about temporal intervals. </title> <journal> Comm. ACM, </journal> <volume> 26(11) </volume> <pages> 832-843, </pages> <year> 1983. </year>
Reference-contexts: Those approaches are distinguished from the ground version by abandoning one or the other assumption. The following not mutually exclusive categorization reflects the state of the art by stressing typical issues: * Another time model ([Ver83], <ref> [All83] </ref>, [All84], [Pel91]), * incompleteness of information ([MW86], [DW91]), * computation time restrictions incl. anytime planning ([DB88], [RW91]), * dynamics and unforeseeable effects in plan execution ([Ped87], [GL87], [Dru89], [Fir92]), * abstraction ([Sac74], [Sac77], [Ten89]), * distributed reasoning ([BG88], [LB89], [Mar93]), * refinement by learning ([Ham89], [GD92], [DeJ94]), and * case-based
Reference: [All84] <author> James F. Allen. </author> <title> Towards a general theory of action and time. </title> <journal> Artificial Intelligence, </journal> <volume> 23(2) </volume> <pages> 123-154, </pages> <year> 1984. </year>
Reference-contexts: Those approaches are distinguished from the ground version by abandoning one or the other assumption. The following not mutually exclusive categorization reflects the state of the art by stressing typical issues: * Another time model ([Ver83], [All83], <ref> [All84] </ref>, [Pel91]), * incompleteness of information ([MW86], [DW91]), * computation time restrictions incl. anytime planning ([DB88], [RW91]), * dynamics and unforeseeable effects in plan execution ([Ped87], [GL87], [Dru89], [Fir92]), * abstraction ([Sac74], [Sac77], [Ten89]), * distributed reasoning ([BG88], [LB89], [Mar93]), * refinement by learning ([Ham89], [GD92], [DeJ94]), and * case-based reasoning
Reference: [AMM92] <author> Oksana Arnold, Volker May, and Uwe Metzner. </author> <title> Wissensverarbeitung in dynamischen Prozeumgebungen - Eine Anforderungsspezifikation. </title> <type> WISCON Report 01/92, </type> <institution> HTWK Leipzig (FH), Fachbereich IMN, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: Motivated by a comprehensive approach towards knowledge-based supervision and control undertaken in the joint project Wiscon supported by the German Federal Ministry for Research and Technology (BMFT), there has been developed an approach to therapy plan synthesis within an integrated knowledge processing architecture (cf. <ref> [AMM92] </ref>). The general approach is outlined in some detail in [Arn92a]. Chapter 2 of the present paper is dedicated to a brief up-to-date motivation relating therapy plan generation to the overall approach. There is a particular class of target processes focussed on.
Reference: [Ang92] <author> Dana Angluin. </author> <title> Computational learning theory: Survey and selected bibliography. </title> <booktitle> In ACM Symposium on Theory of Computing, STOC'92, </booktitle> <pages> pages 351-368. </pages> <publisher> ACM Press, </publisher> <year> 1992. </year>
Reference-contexts: Generating therapy plans for process control in dynamic environments needs to be based on incomplete information, only. Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], [KW80], <ref> [Ang92] </ref>, [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], [Sum77], [Bau79], [Sha81], [Sha83], [JK83], [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.).
Reference: [Arn92a] <author> Oksana Arnold. </author> <note> Reaktive Therapieplanung in dynamischen Prozeumgebungen. WISCON Report 03/92, </note> <institution> HTWK Leipzig (FH), Fachbereich IMN, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: The general approach is outlined in some detail in <ref> [Arn92a] </ref>. Chapter 2 of the present paper is dedicated to a brief up-to-date motivation relating therapy plan generation to the overall approach. There is a particular class of target processes focussed on. Chapter 3 is aimed at briefly characterizing the pecularities of those processes. <p> Second, there are inductive inference problems for which inconsistent algorithms are remarkably more efficient than consistent algorithms (cf. [Wie92] and references therein). 10 Our basic planning algorithm developed below (cf. <ref> [Arn92a] </ref>, [AJ94c], [AJ94b]) works consis-tently. In fact, refuting inconsistent action scripts during plan generation is the main deductive task involved. But we can imagine particular circumstances where inconsistent planning may gain an advantage over consistent algorithms.
Reference: [Arn92b] <author> Oksana Arnold. </author> <note> Wissensverarbeitung in dynamischen Prozeumgebungen: Reaktive Ther-apieplanung in dynamischen Prozeumgebungen. WISCON Report 10/92, </note> <institution> Technische Hochschule Leipzig, FB Mathematik & Informatik, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: R = [F 0 ; G i ] is taken as the recent search space for planning. Here, we are going to describe the planning algorithm, i.e. the program synthesis algorithm, in some detail. Basic procedures are discussed in <ref> [Arn92b] </ref> much more intensively.
Reference: [Arn93] <author> Oksana Arnold. </author> <title> Using multiple models for therapy planning in dynamic environments. </title> <note> In submitted, </note> <year> 1993. </year>
Reference-contexts: This is the type of work we want to relate to therapy plan generation. However, the type of control problems to be attacked below require a more explicit handling of multiple knowledge (cf. <ref> [Arn93] </ref>, [Arn94b]) than considered in most of the papers mentioned 9 above.
Reference: [Arn94a] <author> Oksana Arnold. </author> <title> An expert system architecture to support process supervision and control. In Eberhard Kohler, editor, 39. </title> <journal> Internationales Wissenschaftliches Kolloquium, </journal> <volume> Band 3, </volume> <pages> pages 30-36. </pages> <institution> Technische Universitat Ilmenau, </institution> <year> 1994. </year>
Reference-contexts: The authors' approach has been investigated and described in <ref> [Arn94a] </ref>. If possible, insights gained from such an investigation should be utilized for structuring the knowledge base under development. First, the knowledge about possible faults and control measures depends on the constructive performance of technological components. Second, technological equipments usually have a remarkable number of repeatedly occurring units. <p> Thus, the plan generation process is a highly interactive one. 2 Within the Wiscon architecture, a simulation module implemented on a dedicated transputer architecture is integrated. 3 The formalisms will be developed in chapter 5 of the present paper. 5 2.3 Issues of Knowledge Representation As developed in <ref> [Arn94a] </ref>, the structure of the knowledge base should reflect essential structural properties of the target process. Therefore, we provide a frame-oriented language called the technology representation, which permits the definition of technological classes and instances.
Reference: [Arn94b] <author> Oksana Arnold. </author> <title> Towards structure and management of knowledge bases for controlling technological equipments. </title> <note> In submitted, </note> <year> 1994. </year>
Reference-contexts: This is the type of work we want to relate to therapy plan generation. However, the type of control problems to be attacked below require a more explicit handling of multiple knowledge (cf. [Arn93], <ref> [Arn94b] </ref>) than considered in most of the papers mentioned 9 above.
Reference: [AS83] <author> Dana Angluin and Carl H. Smith. </author> <title> A survey of inductive inference: Theory and methods. </title> <journal> Computing Surveys, </journal> <volume> 15 </volume> <pages> 237-269, </pages> <year> 1983. </year>
Reference-contexts: Generating therapy plans for process control in dynamic environments needs to be based on incomplete information, only. Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. <ref> [AS83] </ref>, [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], [Sum77], [Bau79], [Sha81], [Sha83], [JK83], [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). <p> Inductive inference is a well-studied research area of theoretical computer science which focusses on the problem of learning from incomplete information. This research area has its origins in the early papers [Sol64] and [Gol67]. We consider [Gol67] the seminal publication of inductive inference. <ref> [AS83] </ref> and [KW80] are very good surveys. Additionally, there is a large number of easy introductions, like [Jan89], for instance. Therefore, we won't give a new introduction into inductive inference. Instead, we stress some selected aspects which have guided our investigations below. <p> In fact, the core part of our control synthesis system is acting as an inductive inference machine (cf. <ref> [AS83] </ref>, [KW80], for instance) getting fed in some information about the underlying process and generating plans resp. programs as hypotheses.
Reference: [Bar79] <author> David R. Barstow. </author> <title> An experiment in knowledge-based automatic programming. </title> <journal> Artificial Intelligence, </journal> <volume> 12(1) </volume> <pages> 73-119, </pages> <year> 1979. </year>
Reference-contexts: However, the type of control problems to be attacked below require a more explicit handling of multiple knowledge (cf. [Arn93], [Arn94b]) than considered in most of the papers mentioned 9 above. In this regard, approaches like <ref> [Bar79] </ref>, [MW74], [MW83], and [Neu92] seem more ap-propriate, although the latter three are deductively oriented. 3.3.2 Inductive Hypothesizing As explained in some detail above, in dependence on the complexity and dynamics of the target processes as well as in dependence on the available knowledge representation, therapy plan generation may be essentially
Reference: [Bau79] <author> Michael A. Bauer. </author> <title> Programming by examples. </title> <journal> Artificial Intelligence, </journal> <volume> 12(1) </volume> <pages> 1-21, </pages> <year> 1979. </year>
Reference-contexts: Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], [Sum77], <ref> [Bau79] </ref>, [Sha81], [Sha83], [JK83], [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation.
Reference: [BB93] <author> W. Bibel and A. W. Biermann. </author> <title> Special issue: Automatic programming foreword of the guest editors. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 15(5 </volume> & 6):463-465, 1993. 
Reference-contexts: Second, it is generating programs for execution. Thus, in its right perspective, therapy plan generation turns out to be inductive program synthesis. This has been made explicit in [AJ94b], for the first time. 3.3.1 Program Synthesis For automatic program synthesis, <ref> [BB93] </ref> is an excellent recent reference: The design and implementation of correct software meeting given requirements continues to be most relevant, practical, and scientifically challenging problem. There are many lines of research directed towards solving this problem. Automatic Programming is one among those.
Reference: [BBP75] <author> Alan W. Biermann, Richard I. Baum, and Frederick E. Petry. </author> <title> Speeding up the synthesis of programs from traces. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 24(2) </volume> <pages> 122-136, </pages> <year> 1975. </year> <month> 27 </month>
Reference-contexts: Generating therapy plans for process control in dynamic environments needs to be based on incomplete information, only. Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], <ref> [BBP75] </ref>, [BK76], [Sum77], [Bau79], [Sha81], [Sha83], [JK83], [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation.
Reference: [BG88] <editor> A.H. Bond and L. Gasser. </editor> <booktitle> Readings in Distributed Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference: [BGH + 93] <author> Susanne Biundo, Andreas Gunter, Joachim Hertzberg, Josef Schneeberger, and Wolfgang Tank. </author> <title> Planen und Konfigurieren. </title> <editor> In Gunther Gorz, editor, </editor> <booktitle> Einfuhrung in die kunstliche Intelligenz, </booktitle> <pages> pages 767-828. </pages> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: One leading principle is that operators are characterized by preconditions and postconditions. Time is implicitly given by the (partial) ordering of situations. There are only a few efforts to classify approaches to planning. [Her93] and [Her94] present one of the first attempts. According to [Her94] and <ref> [BGH + 93] </ref>, there are several categories of non-classical approaches to planning. Those approaches are distinguished from the ground version by abandoning one or the other assumption.
Reference: [BK76] <author> Alan W. Biermann and Ramachandran Krishnaswamy. </author> <title> Constructing programs from example computations. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-2(3):141-153, </volume> <year> 1976. </year>
Reference-contexts: Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], <ref> [BK76] </ref>, [Sum77], [Bau79], [Sha81], [Sha83], [JK83], [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation.
Reference: [BK86] <author> Alvis Brazma and Efim B. Kinber. </author> <title> Generalized regular expressions a language for synthesis of programs with branching in loops. </title> <journal> Theoretical Computer Science, </journal> <volume> 46 </volume> <pages> 175-195, </pages> <year> 1986. </year>
Reference-contexts: Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], [Sum77], [Bau79], [Sha81], [Sha83], [JK83], <ref> [BK86] </ref>, [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation.
Reference: [BKM92] <author> Dietrich Balzer, Volkmar Kirbach, and Volker May. </author> <title> Knowledge based process control. </title> <editor> In Hartwig Steusloff and Martin Polke, editors, </editor> <booktitle> Integration of Design, Implementation and Application on Measurement, Automation and Control, Intercama Congress 92, </booktitle> <pages> pages 33-49, </pages> <address> Munchen, 1992. </address> <publisher> Oldenbourg. </publisher>
Reference-contexts: These tasks should be done by both sending new setpoint values, control values, and alarm boundaries to a conventional supervision and control system as well as informing the operator about some mechanical measures (cf. [BMHC90], <ref> [BKM92] </ref>, [Fri93]). In dependence on the discovered fault, the current reserves of the system, and the state of the process, the control synthesis should derive and execute an appropriate therapy plan. Thus, therapy plans are formal objects having some operational semantics in the process under consideration.
Reference: [BMHC90] <author> R. Bhatnagar, D. W. Miller, B.K. Hajek, and B. Chandasekaran. DPRL: </author> <title> A language for representation of operation and safety maintenance procedures of nuclear power plants. </title> <booktitle> In IEA/AIE-90, </booktitle> <pages> pages 593-600. </pages> <publisher> ACM, </publisher> <year> 1990. </year>
Reference-contexts: These tasks should be done by both sending new setpoint values, control values, and alarm boundaries to a conventional supervision and control system as well as informing the operator about some mechanical measures (cf. <ref> [BMHC90] </ref>, [BKM92], [Fri93]). In dependence on the discovered fault, the current reserves of the system, and the state of the process, the control synthesis should derive and execute an appropriate therapy plan. Thus, therapy plans are formal objects having some operational semantics in the process under consideration.
Reference: [Cha87] <author> David Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 333-377, </pages> <year> 1987. </year>
Reference: [DB88] <author> Thomas Dean and Mark Boddy. </author> <title> An analysis of time-dependent planning. </title> <booktitle> In Proceedings AAAI-National Conference on Artifical Intelligence, </booktitle> <address> St. Paul, Minnesota, USA, </address> <year> 1988, </year> <pages> pages 49-54. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference: [DeJ94] <author> F. DeJongGerald. </author> <title> Learning to plan in continuous domains. </title> <journal> Artificial Intelligence, </journal> <volume> 65 </volume> <pages> 71-141, </pages> <year> 1994. </year>
Reference-contexts: time model ([Ver83], [All83], [All84], [Pel91]), * incompleteness of information ([MW86], [DW91]), * computation time restrictions incl. anytime planning ([DB88], [RW91]), * dynamics and unforeseeable effects in plan execution ([Ped87], [GL87], [Dru89], [Fir92]), * abstraction ([Sac74], [Sac77], [Ten89]), * distributed reasoning ([BG88], [LB89], [Mar93]), * refinement by learning ([Ham89], [GD92], <ref> [DeJ94] </ref>), and * case-based reasoning ([KH92]). The pecularities of our target domains introduced above exhibit serious difficulties in specifying postconditions assigned to operators. This key difficulty is rarely considered in the recent literature.
Reference: [DP90] <author> Nachum Dershowitz and Eli Pinchover. </author> <title> Inductive synthesis of equational programs. </title> <booktitle> In AAAI-90, Proceedings, Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 234-239. </pages> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], [Sum77], [Bau79], [Sha81], [Sha83], [JK83], [BK86], <ref> [DP90] </ref>, [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation.
Reference: [DR93] <author> Nachum Dershowitz and Uday S. Reddy. </author> <title> Deductive and inductive synthesis of equational programs. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 15(5 </volume> & 6):467-494, 1993. 
Reference-contexts: Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], [Sum77], [Bau79], [Sha81], [Sha83], [JK83], [BK86], [DP90], [FD93], <ref> [DR93] </ref>, e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation.
Reference: [Dru89] <author> M. Drummond. </author> <title> Situated control rules. </title> <booktitle> In Proc. KR-89, </booktitle> <pages> pages 103-113, </pages> <year> 1989. </year>
Reference-contexts: The following not mutually exclusive categorization reflects the state of the art by stressing typical issues: * Another time model ([Ver83], [All83], [All84], [Pel91]), * incompleteness of information ([MW86], [DW91]), * computation time restrictions incl. anytime planning ([DB88], [RW91]), * dynamics and unforeseeable effects in plan execution ([Ped87], [GL87], <ref> [Dru89] </ref>, [Fir92]), * abstraction ([Sac74], [Sac77], [Ten89]), * distributed reasoning ([BG88], [LB89], [Mar93]), * refinement by learning ([Ham89], [GD92], [DeJ94]), and * case-based reasoning ([KH92]). The pecularities of our target domains introduced above exhibit serious difficulties in specifying postconditions assigned to operators.
Reference: [DW91] <author> T.L. Dean and M.P. Wellman. </author> <title> Planning and Control. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: Those approaches are distinguished from the ground version by abandoning one or the other assumption. The following not mutually exclusive categorization reflects the state of the art by stressing typical issues: * Another time model ([Ver83], [All83], [All84], [Pel91]), * incompleteness of information ([MW86], <ref> [DW91] </ref>), * computation time restrictions incl. anytime planning ([DB88], [RW91]), * dynamics and unforeseeable effects in plan execution ([Ped87], [GL87], [Dru89], [Fir92]), * abstraction ([Sac74], [Sac77], [Ten89]), * distributed reasoning ([BG88], [LB89], [Mar93]), * refinement by learning ([Ham89], [GD92], [DeJ94]), and * case-based reasoning ([KH92]). <p> The following steps are describing the essen-tials of the therapy plan synthesis process itself. Implementation details are suppressed. The refinement of action scripts means substitutions formally expressed by G 0 = G [c - G j ] above. In <ref> [DW91] </ref>, this is called task reduction. In the sequel, we will put some emphasis on the use of constraints and the difficulties of constraint monitoring. These aspects are basic to understand the differences between the central concepts of consistency and executability.
Reference: [FD93] <author> P. Flener and Y. Deville. </author> <title> Logic program synthesis from incomplete specifications. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 15(5 </volume> & 6):775-805, 1993. 
Reference-contexts: Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], [Sum77], [Bau79], [Sha81], [Sha83], [JK83], [BK86], [DP90], <ref> [FD93] </ref>, [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation.
Reference: [Fir92] <author> R. James Firby. </author> <title> Building symbolic primitives with continuous control routines. </title> <editor> In James Hendler, editor, </editor> <booktitle> AIPS92, </booktitle> <pages> pages 62-69. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: The following not mutually exclusive categorization reflects the state of the art by stressing typical issues: * Another time model ([Ver83], [All83], [All84], [Pel91]), * incompleteness of information ([MW86], [DW91]), * computation time restrictions incl. anytime planning ([DB88], [RW91]), * dynamics and unforeseeable effects in plan execution ([Ped87], [GL87], [Dru89], <ref> [Fir92] </ref>), * abstraction ([Sac74], [Sac77], [Ten89]), * distributed reasoning ([BG88], [LB89], [Mar93]), * refinement by learning ([Ham89], [GD92], [DeJ94]), and * case-based reasoning ([KH92]). The pecularities of our target domains introduced above exhibit serious difficulties in specifying postconditions assigned to operators.
Reference: [Fis93] <author> Klaus Fischer. </author> <title> Verteiltes und kooperatives Planen in einer flexiblen Fertigungsumgebung, </title> <booktitle> volume 26 of DISKI, Dissertationen zur Kunstlichen Intelligenz. infix, </booktitle> <year> 1993. </year>
Reference-contexts: Interestingly, the generation of therapy plans as developed turns out to be inductive program synthesis, in some sense. [AJ94b] is focussed on this particular insight. 1 Surprisingly, 6 out of the most recent (and best) 10 German Ph.D. theses which deal with planning ([Gun92], [Woh92], [Hor92], <ref> [Fis93] </ref>, [Sau93], [Koh93], [Wer93], [Win94], [Koh94], [Thi94]) are suffering from the lack of a somehow formal and explicit plan concept (cf. [AJ94a] for an analysis). 2 2 Towards Knowledge-Based Supervision and Control The present chapter is intended to briefly sketch the knowledge processing problems surrounding our present approach. <p> A careful inspection exhibits that this is a crucial point, indeed. 4.2 Plan Concepts To the authors' big surprise, as already mentioned initially, about half of the recent publications of the DISKI 7 series (cf. [Gun92], [Woh92], [Hor92], <ref> [Fis93] </ref>, [Sau93], [Koh93], [Wer93], [Win94], [Koh94], [Thi94], ) which deal with planning do not contain an explicit plan concept.
Reference: [FN71] <author> Richard E. Fikes and Nils J. Nilsson. </author> <title> STRIPS: A new approach to theorem proving in problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year>
Reference: [Fri93] <author> Gerhard Friedrich. </author> <title> Model-based diagnosis and repair. </title> <journal> AICOM, </journal> 6(3/4):187-206, 1993. 
Reference-contexts: These tasks should be done by both sending new setpoint values, control values, and alarm boundaries to a conventional supervision and control system as well as informing the operator about some mechanical measures (cf. [BMHC90], [BKM92], <ref> [Fri93] </ref>). In dependence on the discovered fault, the current reserves of the system, and the state of the process, the control synthesis should derive and execute an appropriate therapy plan. Thus, therapy plans are formal objects having some operational semantics in the process under consideration. They are programs (cf. [AJ94b]).
Reference: [GD92] <author> J. Gratch and Gerald F. DeJong. </author> <title> A framework of simplifications in learning to plan. </title> <booktitle> In AIPS92, </booktitle> <pages> pages 78-87. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: Another time model ([Ver83], [All83], [All84], [Pel91]), * incompleteness of information ([MW86], [DW91]), * computation time restrictions incl. anytime planning ([DB88], [RW91]), * dynamics and unforeseeable effects in plan execution ([Ped87], [GL87], [Dru89], [Fir92]), * abstraction ([Sac74], [Sac77], [Ten89]), * distributed reasoning ([BG88], [LB89], [Mar93]), * refinement by learning ([Ham89], <ref> [GD92] </ref>, [DeJ94]), and * case-based reasoning ([KH92]). The pecularities of our target domains introduced above exhibit serious difficulties in specifying postconditions assigned to operators. This key difficulty is rarely considered in the recent literature.
Reference: [GL87] <author> Michael P. Georgeff and Amy L. Lansky. </author> <title> Reactive reasoning and planning. </title> <booktitle> In Proc. AAAI-87, </booktitle> <pages> pages 677-682, </pages> <year> 1987. </year> <month> 28 </month>
Reference-contexts: The following not mutually exclusive categorization reflects the state of the art by stressing typical issues: * Another time model ([Ver83], [All83], [All84], [Pel91]), * incompleteness of information ([MW86], [DW91]), * computation time restrictions incl. anytime planning ([DB88], [RW91]), * dynamics and unforeseeable effects in plan execution ([Ped87], <ref> [GL87] </ref>, [Dru89], [Fir92]), * abstraction ([Sac74], [Sac77], [Ten89]), * distributed reasoning ([BG88], [LB89], [Mar93]), * refinement by learning ([Ham89], [GD92], [DeJ94]), and * case-based reasoning ([KH92]). The pecularities of our target domains introduced above exhibit serious difficulties in specifying postconditions assigned to operators.
Reference: [Gol67] <author> E Mark Gold. </author> <title> Language identification in the limit. </title> <journal> Information and Control, </journal> <volume> 14 </volume> <pages> 447-474, </pages> <year> 1967. </year>
Reference-contexts: This motivates the following brief excursion to inductive inference research. Inductive inference is a well-studied research area of theoretical computer science which focusses on the problem of learning from incomplete information. This research area has its origins in the early papers [Sol64] and <ref> [Gol67] </ref>. We consider [Gol67] the seminal publication of inductive inference. [AS83] and [KW80] are very good surveys. Additionally, there is a large number of easy introductions, like [Jan89], for instance. Therefore, we won't give a new introduction into inductive inference. <p> This motivates the following brief excursion to inductive inference research. Inductive inference is a well-studied research area of theoretical computer science which focusses on the problem of learning from incomplete information. This research area has its origins in the early papers [Sol64] and <ref> [Gol67] </ref>. We consider [Gol67] the seminal publication of inductive inference. [AS83] and [KW80] are very good surveys. Additionally, there is a large number of easy introductions, like [Jan89], for instance. Therefore, we won't give a new introduction into inductive inference. Instead, we stress some selected aspects which have guided our investigations below.
Reference: [Gun92] <author> Andreas Gunter. </author> <title> Flexible Kontrolle in Expertensystemen zur Planung und Konfigurierung in technischen Domanen, </title> <booktitle> volume 3 of DISKI, Dissertationen zur Kunstlichen Intelligenz. infix, </booktitle> <year> 1992. </year>
Reference-contexts: A key parameter for classifying planning approaches is the plan concept in use. A careful inspection exhibits that this is a crucial point, indeed. 4.2 Plan Concepts To the authors' big surprise, as already mentioned initially, about half of the recent publications of the DISKI 7 series (cf. <ref> [Gun92] </ref>, [Woh92], [Hor92], [Fis93], [Sau93], [Koh93], [Wer93], [Win94], [Koh94], [Thi94], ) which deal with planning do not contain an explicit plan concept.
Reference: [Ham89] <author> K. Hammond. </author> <title> Case Based Planning. Viewing Planning as a Memory Task. </title> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference: [Her93] <editor> Joachim Hertzberg. KI-Handlungsplanung - Woran wir arbeiten, und woran wir arbeiten sollten. In Otthein Herzog, Thomas Christaller, and Dieter Schutt, editors, </editor> <booktitle> Grundlagen und Anwendungen der Kunstlichen Intelligenz. 17. Fachtagung fur Kunstliche Intelligenz (KI'93), </booktitle> <pages> pages 3-27. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: These approaches have some common characteristics. One leading principle is that operators are characterized by preconditions and postconditions. Time is implicitly given by the (partial) ordering of situations. There are only a few efforts to classify approaches to planning. <ref> [Her93] </ref> and [Her94] present one of the first attempts. According to [Her94] and [BGH + 93], there are several categories of non-classical approaches to planning. Those approaches are distinguished from the ground version by abandoning one or the other assumption.
Reference: [Her94] <author> Joachim Hertzberg. </author> <title> Planen von Aktionen und Reaktionen. </title> <note> Forschungsbericht des Lehrstuhls VIII (KI) LS-8 Report 7, </note> <institution> Universitat Dortmund, Fachbereich Informatik, </institution> <year> 1994. </year>
Reference-contexts: These approaches have some common characteristics. One leading principle is that operators are characterized by preconditions and postconditions. Time is implicitly given by the (partial) ordering of situations. There are only a few efforts to classify approaches to planning. [Her93] and <ref> [Her94] </ref> present one of the first attempts. According to [Her94] and [BGH + 93], there are several categories of non-classical approaches to planning. Those approaches are distinguished from the ground version by abandoning one or the other assumption. <p> One leading principle is that operators are characterized by preconditions and postconditions. Time is implicitly given by the (partial) ordering of situations. There are only a few efforts to classify approaches to planning. [Her93] and <ref> [Her94] </ref> present one of the first attempts. According to [Her94] and [BGH + 93], there are several categories of non-classical approaches to planning. Those approaches are distinguished from the ground version by abandoning one or the other assumption. <p> The pecularities of our target domains introduced above exhibit serious difficulties in specifying postconditions assigned to operators. This key difficulty is rarely considered in the recent literature. There is one relaxation of the standard approach worth to be mentioned: <ref> [Her94] </ref> takes 11 non-deterministic effects of actions into account. Although this is a first step towards a higher degree of flexibility, it is still far from the needs of the process class circumscribed in chapter 2 above. <p> In <ref> [Her94] </ref>, there is a quite general formulation 8 characterizing a plan as a structure containing descriptions of actions and goals for reasoning about the effects of future actions and for controlling goal-oriented actions.
Reference: [Hor92] <editor> Andreas Hormann. Begleitende Montageablaufplanung fur ein sensorgestutztes Zweiarm-Manipulatorsystem, </editor> <booktitle> volume 11 of DISKI, Dissertationen zur Kunstlichen Intelligenz. infix, </booktitle> <year> 1992. </year>
Reference-contexts: Interestingly, the generation of therapy plans as developed turns out to be inductive program synthesis, in some sense. [AJ94b] is focussed on this particular insight. 1 Surprisingly, 6 out of the most recent (and best) 10 German Ph.D. theses which deal with planning ([Gun92], [Woh92], <ref> [Hor92] </ref>, [Fis93], [Sau93], [Koh93], [Wer93], [Win94], [Koh94], [Thi94]) are suffering from the lack of a somehow formal and explicit plan concept (cf. [AJ94a] for an analysis). 2 2 Towards Knowledge-Based Supervision and Control The present chapter is intended to briefly sketch the knowledge processing problems surrounding our present approach. <p> A careful inspection exhibits that this is a crucial point, indeed. 4.2 Plan Concepts To the authors' big surprise, as already mentioned initially, about half of the recent publications of the DISKI 7 series (cf. [Gun92], [Woh92], <ref> [Hor92] </ref>, [Fis93], [Sau93], [Koh93], [Wer93], [Win94], [Koh94], [Thi94], ) which deal with planning do not contain an explicit plan concept. <p> Unfortunately, most authors tend to avoid the problems occurring with properly concurring and, perhaps, conflicting actions. In [Pel91], for instance, the problem is eliminated as expressed by the statement: ...if two actions can be executed individually and they do not interfere, then they can be executed together.. In <ref> [Hor92] </ref>, the author is investigating planning problems in robotics for two-arm systems where properly simultaneous actions may occur. This comes very close to the type of problems we are interested in. However, in [Hor92] on page 116 there is the explicit requirement that, whenever any effective concurrency may occur, one of <p> In <ref> [Hor92] </ref>, the author is investigating planning problems in robotics for two-arm systems where properly simultaneous actions may occur. This comes very close to the type of problems we are interested in. However, in [Hor92] on page 116 there is the explicit requirement that, whenever any effective concurrency may occur, one of the actors is paralyzed by definition. To sum up, the consideration of planning approaches and plan concepts gave rise to some important insights.
Reference: [Jan84] <author> Klaus P. </author> <title> Jantke. The main proof-theoretic problems in inductive inference. </title> <editor> In G. Wechsung, editor, </editor> <booktitle> Frege Conference, </booktitle> <pages> pages 321-330. </pages> <publisher> Akademie-Verlag Berlin, </publisher> <year> 1984. </year>
Reference-contexts: Usually, there is no way to prove a guess correct. Instead, if a former guess becomes provably incompatible with recent information, it has to be changed. In other words, the key deductive task to be performed by an inductive inference device is disproving, not proving formulae. In <ref> [Jan84] </ref>, this phenomenon has been made explicit.
Reference: [Jan89] <author> Klaus P. </author> <title> Jantke. Algorithmic learning from incomplete information: Principles and problems. </title> <editor> In J. Dassow and J. Kelemen, editors, </editor> <booktitle> Machines, Languages, and Complexity, Lecture Notes in Computer Science, </booktitle> <pages> pages 188-207. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: This research area has its origins in the early papers [Sol64] and [Gol67]. We consider [Gol67] the seminal publication of inductive inference. [AS83] and [KW80] are very good surveys. Additionally, there is a large number of easy introductions, like <ref> [Jan89] </ref>, for instance. Therefore, we won't give a new introduction into inductive inference. Instead, we stress some selected aspects which have guided our investigations below. The first aspect is the one of disproving instead of proving formulae. The second one is the problem of consistent vs. inconsistent inductive inference.
Reference: [Jan92] <author> Klaus P. </author> <title> Jantke. Case based learning in inductive inference. </title> <booktitle> In Proc. of the 5th ACM Workshop on Computational Learning Theory, </booktitle> <address> COLT'92, July 27-29, 1992, Pittsburgh, PA, USA, </address> <pages> pages 218-223. </pages> <publisher> ACM Press, </publisher> <year> 1992. </year>
Reference-contexts: For example, the standard property of consistency needs to be complemented by the executability concept, at least in application areas like complex dynamic processes. Besides introducing new concepts, this suggests certain architectures of learning algorithms. Note that in <ref> [Jan92] </ref> we have found a similar idea of AI motivated architectures for inductive inference. 25 algorithm: planner3 input: G i ; t 0 ; R = [F 0 ; G i ] output: P = [F 000 ; G i ] 1. G := G i 2.
Reference: [JB81] <author> Klaus P. Jantke and Hans-Rainer Beick. </author> <title> Combining postulates of naturalness in inductive inference. </title> <journal> EIK, </journal> 17(8/9):465-484, 1981. 
Reference-contexts: There are results of two different types. First, there are inductive inference problems which are solvable, but only if the inference algorithm used is not required to work consistently (cf. <ref> [JB81] </ref> contains both a couple of results and references to further publications). Second, there are inductive inference problems for which inconsistent algorithms are remarkably more efficient than consistent algorithms (cf. [Wie92] and references therein). 10 Our basic planning algorithm developed below (cf. [Arn92a], [AJ94c], [AJ94b]) works consis-tently.
Reference: [JK83] <author> Jean-Pierre Jouannaud and Yves Kodratoff. </author> <title> Program synthesis from examples of behavior. </title> <editor> In Alan W. Biermann and Gerard Guiho, editors, </editor> <booktitle> Computer Program Synthesis Methodologies, </booktitle> <pages> pages 213-250. </pages> <address> D. </address> <publisher> Reidel Publ. Co., </publisher> <year> 1983. </year>
Reference-contexts: Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], [Sum77], [Bau79], [Sha81], [Sha83], <ref> [JK83] </ref>, [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation.
Reference: [KH92] <author> Subbaro Kambhampati and James A. Hendler. </author> <title> A validation-structure-based theory of plan modification and reuse. </title> <journal> Artificial Intelligence, </journal> <volume> 55 </volume> <pages> 193-258, </pages> <year> 1992. </year>
Reference: [Koh93] <author> Axel Kohne. </author> <title> Integration von Aktionsplanung und Konfigurierung, </title> <booktitle> volume 38 of DISKI, Dis-sertationen zur Kunstlichen Intelligenz. infix, </booktitle> <year> 1993. </year>
Reference-contexts: Interestingly, the generation of therapy plans as developed turns out to be inductive program synthesis, in some sense. [AJ94b] is focussed on this particular insight. 1 Surprisingly, 6 out of the most recent (and best) 10 German Ph.D. theses which deal with planning ([Gun92], [Woh92], [Hor92], [Fis93], [Sau93], <ref> [Koh93] </ref>, [Wer93], [Win94], [Koh94], [Thi94]) are suffering from the lack of a somehow formal and explicit plan concept (cf. [AJ94a] for an analysis). 2 2 Towards Knowledge-Based Supervision and Control The present chapter is intended to briefly sketch the knowledge processing problems surrounding our present approach. <p> A careful inspection exhibits that this is a crucial point, indeed. 4.2 Plan Concepts To the authors' big surprise, as already mentioned initially, about half of the recent publications of the DISKI 7 series (cf. [Gun92], [Woh92], [Hor92], [Fis93], [Sau93], <ref> [Koh93] </ref>, [Wer93], [Win94], [Koh94], [Thi94], ) which deal with planning do not contain an explicit plan concept.
Reference: [Koh94] <editor> Jana Kohler. Wiederverwendung von Planen in deduktiven Planungssystemen, </editor> <booktitle> volume 65 of DISKI, Dissertationen zur Kunstlichen Intelligenz. infix, </booktitle> <year> 1994. </year>
Reference-contexts: the generation of therapy plans as developed turns out to be inductive program synthesis, in some sense. [AJ94b] is focussed on this particular insight. 1 Surprisingly, 6 out of the most recent (and best) 10 German Ph.D. theses which deal with planning ([Gun92], [Woh92], [Hor92], [Fis93], [Sau93], [Koh93], [Wer93], [Win94], <ref> [Koh94] </ref>, [Thi94]) are suffering from the lack of a somehow formal and explicit plan concept (cf. [AJ94a] for an analysis). 2 2 Towards Knowledge-Based Supervision and Control The present chapter is intended to briefly sketch the knowledge processing problems surrounding our present approach. <p> A careful inspection exhibits that this is a crucial point, indeed. 4.2 Plan Concepts To the authors' big surprise, as already mentioned initially, about half of the recent publications of the DISKI 7 series (cf. [Gun92], [Woh92], [Hor92], [Fis93], [Sau93], [Koh93], [Wer93], [Win94], <ref> [Koh94] </ref>, [Thi94], ) which deal with planning do not contain an explicit plan concept. In [Her94], there is a quite general formulation 8 characterizing a plan as a structure containing descriptions of actions and goals for reasoning about the effects of future actions and for controlling goal-oriented actions. <p> On the other hand, those syntactic objects must have some semantics carrying substantial properties important both for reasoning about plans and for plan execution. In some well-formalized approaches (cf. <ref> [Koh94] </ref>, e.g.), plans are particular formulae. In many approaches which come closer to the needs of complex dynamics processes, plans are somehow formalized as partially ordered structures. This provides, at least potentially, some background to describe concurrent or even simultaneous actions.
Reference: [KW80] <author> Reinhard Klette and Rolf Wiehagen. </author> <title> Research in the theory of inductive inference by GDR mathematicians a survey. </title> <journal> Information Sciences, </journal> <volume> 22 </volume> <pages> 149-169, </pages> <year> 1980. </year>
Reference-contexts: Generating therapy plans for process control in dynamic environments needs to be based on incomplete information, only. Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], <ref> [KW80] </ref>, [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], [Sum77], [Bau79], [Sha81], [Sha83], [JK83], [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). <p> Inductive inference is a well-studied research area of theoretical computer science which focusses on the problem of learning from incomplete information. This research area has its origins in the early papers [Sol64] and [Gol67]. We consider [Gol67] the seminal publication of inductive inference. [AS83] and <ref> [KW80] </ref> are very good surveys. Additionally, there is a large number of easy introductions, like [Jan89], for instance. Therefore, we won't give a new introduction into inductive inference. Instead, we stress some selected aspects which have guided our investigations below. <p> In fact, the core part of our control synthesis system is acting as an inductive inference machine (cf. [AS83], <ref> [KW80] </ref>, for instance) getting fed in some information about the underlying process and generating plans resp. programs as hypotheses. Replanning is working iteratively by stepwise modification of plans within the given rooted family. 6.3 Implementation The sketched planning algorithm is implemented in LISP and running under SUN/OS on Sparc Stations.
Reference: [LB89] <author> Gerd Lorscheid and Christian Bauer. </author> <note> Verteiltes Planen verteilter Problemlosungen. </note> <institution> Ar-beitspapiere der GMD 357, Gesellschaft fur Mathematik und Datenverarbeitung, </institution> <year> 1989. </year>
Reference-contexts: the art by stressing typical issues: * Another time model ([Ver83], [All83], [All84], [Pel91]), * incompleteness of information ([MW86], [DW91]), * computation time restrictions incl. anytime planning ([DB88], [RW91]), * dynamics and unforeseeable effects in plan execution ([Ped87], [GL87], [Dru89], [Fir92]), * abstraction ([Sac74], [Sac77], [Ten89]), * distributed reasoning ([BG88], <ref> [LB89] </ref>, [Mar93]), * refinement by learning ([Ham89], [GD92], [DeJ94]), and * case-based reasoning ([KH92]). The pecularities of our target domains introduced above exhibit serious difficulties in specifying postconditions assigned to operators. This key difficulty is rarely considered in the recent literature.
Reference: [Lif87] <author> V. Lifschitz. </author> <title> On the semantics of STRIPS. </title> <editor> In Michael P. Georgeff and Amy L. Lansky, editors, </editor> <booktitle> Proc. Workshop Reasoning about Actions and Plans, </booktitle> <address> Timberline, OR, USA, </address> <year> 1986, </year> <pages> pages 1-9. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: Situations may be understood as snapshots of the domain under consideration. They are described by sets of formulae. Operators are representing actions in the domain. They formally describe the way in which one situation may be transformed into another one. Classical approaches to planning like STRIPS ([FN71], <ref> [Lif87] </ref>), NONLIN ([Tat77]), NOAH ([Sac77]), and TWEAK ([Cha87]) adopted this view. These approaches have some common characteristics. One leading principle is that operators are characterized by preconditions and postconditions. Time is implicitly given by the (partial) ordering of situations.
Reference: [Mar93] <editor> Frank von Martial. Planen in Multi-Agenten Systemen. In J. Muller, editor, </editor> <booktitle> Verteilte Kunstliche Intelligenz: Methoden und Anwendungen, Reihe Informatik, chapter 4. </booktitle> <address> BI-Wissenschaftsverlag, </address> <year> 1993. </year> <month> 29 </month>
Reference-contexts: art by stressing typical issues: * Another time model ([Ver83], [All83], [All84], [Pel91]), * incompleteness of information ([MW86], [DW91]), * computation time restrictions incl. anytime planning ([DB88], [RW91]), * dynamics and unforeseeable effects in plan execution ([Ped87], [GL87], [Dru89], [Fir92]), * abstraction ([Sac74], [Sac77], [Ten89]), * distributed reasoning ([BG88], [LB89], <ref> [Mar93] </ref>), * refinement by learning ([Ham89], [GD92], [DeJ94]), and * case-based reasoning ([KH92]). The pecularities of our target domains introduced above exhibit serious difficulties in specifying postconditions assigned to operators. This key difficulty is rarely considered in the recent literature.
Reference: [MH69] <author> John McCarthy and Patrick J. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <journal> Machine Intelligence, </journal> <volume> 4 </volume> <pages> 463-502, </pages> <year> 1969. </year>
Reference-contexts: Papers and systems are mushrooming. It exceeds the authors' competence considerably to survey the area. But there is some methodological need to relate the own approach. 4.1 Planning Approaches Planning has its origins in the situation calculus (cf. <ref> [MH69] </ref>) usually ascribed to McCarthy, although many researchers contributed to its development. From a quite general and somehow vague perspective, planning is searching for certain actions to transfer some given intial state into some desired goal state. The result generated during planning is called a plan.
Reference: [MW74] <author> Zohar Manna and Richard Waldinger. </author> <title> Knowledge and reasoning in program synthesis. </title> <type> Technical Note 98, </type> <institution> Stanford Research Institute, </institution> <address> Menlo Park, CA, USA, </address> <month> November </month> <year> 1974. </year>
Reference-contexts: However, the type of control problems to be attacked below require a more explicit handling of multiple knowledge (cf. [Arn93], [Arn94b]) than considered in most of the papers mentioned 9 above. In this regard, approaches like [Bar79], <ref> [MW74] </ref>, [MW83], and [Neu92] seem more ap-propriate, although the latter three are deductively oriented. 3.3.2 Inductive Hypothesizing As explained in some detail above, in dependence on the complexity and dynamics of the target processes as well as in dependence on the available knowledge representation, therapy plan generation may be essentially inductive.
Reference: [MW83] <author> Zohar Manna and Richard Waldinger. </author> <title> Deductive synthesis of the unification algorithm. </title> <editor> In Alan W. Biermann and Gerard Guiho, editors, </editor> <booktitle> Computer Program Synthesis Methodologies, </booktitle> <pages> pages 251-307. </pages> <address> D. </address> <publisher> Reidel Publ. Co., </publisher> <year> 1983. </year>
Reference-contexts: However, the type of control problems to be attacked below require a more explicit handling of multiple knowledge (cf. [Arn93], [Arn94b]) than considered in most of the papers mentioned 9 above. In this regard, approaches like [Bar79], [MW74], <ref> [MW83] </ref>, and [Neu92] seem more ap-propriate, although the latter three are deductively oriented. 3.3.2 Inductive Hypothesizing As explained in some detail above, in dependence on the complexity and dynamics of the target processes as well as in dependence on the available knowledge representation, therapy plan generation may be essentially inductive.
Reference: [MW86] <author> Zohar Manna and Richard Waldinger. </author> <title> A theory of plans. </title> <booktitle> In Proceedings of the Workshop on Reasoning about Actions and Plans, </booktitle> <pages> pages 11-45. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1986. </year>
Reference: [Neu92] <author> Gerd Neugebauer. Pragmatische Programmsynthese, </author> <booktitle> volume 18 of DISKI, Dissertationen zur Kunstlichen Intelligenz. infix, </booktitle> <year> 1992. </year>
Reference-contexts: However, the type of control problems to be attacked below require a more explicit handling of multiple knowledge (cf. [Arn93], [Arn94b]) than considered in most of the papers mentioned 9 above. In this regard, approaches like [Bar79], [MW74], [MW83], and <ref> [Neu92] </ref> seem more ap-propriate, although the latter three are deductively oriented. 3.3.2 Inductive Hypothesizing As explained in some detail above, in dependence on the complexity and dynamics of the target processes as well as in dependence on the available knowledge representation, therapy plan generation may be essentially inductive.
Reference: [Ped87] <author> Edwin P.D. Pednault. </author> <title> Formulating multiagent, dynamic-world problems in the classical planning framework. </title> <editor> In Michael P. Georgeff and Amy L. Lansky, editors, </editor> <booktitle> Reasoning about Actions and Plans: Proceedings of the 1986 Workshop, </booktitle> <pages> pages 47-82. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1987. </year>
Reference: [Pel91] <author> Richard N. Pelavin. </author> <title> Planning with simultaneous actions and external events. </title> <editor> In James F. Allen, Henry A. Kautz, Richard N. Pelavin, and Josh D. Tenenberg, editors, </editor> <booktitle> Reasoning about Plans, chapter 3, </booktitle> <pages> pages 127-211. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: Those approaches are distinguished from the ground version by abandoning one or the other assumption. The following not mutually exclusive categorization reflects the state of the art by stressing typical issues: * Another time model ([Ver83], [All83], [All84], <ref> [Pel91] </ref>), * incompleteness of information ([MW86], [DW91]), * computation time restrictions incl. anytime planning ([DB88], [RW91]), * dynamics and unforeseeable effects in plan execution ([Ped87], [GL87], [Dru89], [Fir92]), * abstraction ([Sac74], [Sac77], [Ten89]), * distributed reasoning ([BG88], [LB89], [Mar93]), * refinement by learning ([Ham89], [GD92], [DeJ94]), and * case-based reasoning ([KH92]). <p> This provides, at least potentially, some background to describe concurrent or even simultaneous actions. Unfortunately, most authors tend to avoid the problems occurring with properly concurring and, perhaps, conflicting actions. In <ref> [Pel91] </ref>, for instance, the problem is eliminated as expressed by the statement: ...if two actions can be executed individually and they do not interfere, then they can be executed together.. In [Hor92], the author is investigating planning problems in robotics for two-arm systems where properly simultaneous actions may occur.
Reference: [RW91] <author> S. Russell and E. Wefald. </author> <title> Do the Right Thing. Studies on Limited Rationality. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: The following not mutually exclusive categorization reflects the state of the art by stressing typical issues: * Another time model ([Ver83], [All83], [All84], [Pel91]), * incompleteness of information ([MW86], [DW91]), * computation time restrictions incl. anytime planning ([DB88], <ref> [RW91] </ref>), * dynamics and unforeseeable effects in plan execution ([Ped87], [GL87], [Dru89], [Fir92]), * abstraction ([Sac74], [Sac77], [Ten89]), * distributed reasoning ([BG88], [LB89], [Mar93]), * refinement by learning ([Ham89], [GD92], [DeJ94]), and * case-based reasoning ([KH92]).
Reference: [Sac74] <author> E.D. Sacerdoti. </author> <title> Planning in a hierarchy of abstraction spaces. </title> <journal> Artificial Intelligence, </journal> <volume> 5(2) </volume> <pages> 115-135, </pages> <year> 1974. </year>
Reference: [Sac77] <author> E.D. Sacerdoti. </author> <title> A Structure for Plans and Behavior. </title> <publisher> Elsevier/North Holland, </publisher> <year> 1977. </year>
Reference-contexts: exclusive categorization reflects the state of the art by stressing typical issues: * Another time model ([Ver83], [All83], [All84], [Pel91]), * incompleteness of information ([MW86], [DW91]), * computation time restrictions incl. anytime planning ([DB88], [RW91]), * dynamics and unforeseeable effects in plan execution ([Ped87], [GL87], [Dru89], [Fir92]), * abstraction ([Sac74], <ref> [Sac77] </ref>, [Ten89]), * distributed reasoning ([BG88], [LB89], [Mar93]), * refinement by learning ([Ham89], [GD92], [DeJ94]), and * case-based reasoning ([KH92]). The pecularities of our target domains introduced above exhibit serious difficulties in specifying postconditions assigned to operators. This key difficulty is rarely considered in the recent literature.
Reference: [Sau93] <author> Jurgen Sauer. </author> <title> Wissensbasiertes Losen von Ablaufplanungsproblemen durch explizite Heuris-tiken, </title> <booktitle> volume 37 of DISKI, Dissertationen zur Kunstlichen Intelligenz. infix, </booktitle> <year> 1993. </year>
Reference-contexts: Interestingly, the generation of therapy plans as developed turns out to be inductive program synthesis, in some sense. [AJ94b] is focussed on this particular insight. 1 Surprisingly, 6 out of the most recent (and best) 10 German Ph.D. theses which deal with planning ([Gun92], [Woh92], [Hor92], [Fis93], <ref> [Sau93] </ref>, [Koh93], [Wer93], [Win94], [Koh94], [Thi94]) are suffering from the lack of a somehow formal and explicit plan concept (cf. [AJ94a] for an analysis). 2 2 Towards Knowledge-Based Supervision and Control The present chapter is intended to briefly sketch the knowledge processing problems surrounding our present approach. <p> A careful inspection exhibits that this is a crucial point, indeed. 4.2 Plan Concepts To the authors' big surprise, as already mentioned initially, about half of the recent publications of the DISKI 7 series (cf. [Gun92], [Woh92], [Hor92], [Fis93], <ref> [Sau93] </ref>, [Koh93], [Wer93], [Win94], [Koh94], [Thi94], ) which deal with planning do not contain an explicit plan concept.
Reference: [Sha81] <author> Ehud Y. Shapiro. </author> <title> An algorithm that infers theories from facts. </title> <booktitle> In Proc. 7th Intern. Joint Conference on Artificial Intelligence, </booktitle> <address> Vancouver, Canada, </address> <pages> pages 446-451, </pages> <year> 1981. </year>
Reference-contexts: Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], [Sum77], [Bau79], <ref> [Sha81] </ref>, [Sha83], [JK83], [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation. <p> attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], [Sum77], [Bau79], <ref> [Sha81] </ref>, [Sha83], [JK83], [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation. However, the type of control problems to be attacked below require a more explicit handling of multiple knowledge (cf. [Arn93], [Arn94b]) than considered in most of the papers mentioned 9 above.
Reference: [Sha83] <author> Ehud Y. Shapiro. </author> <title> Algorithmic Program Debugging. </title> <publisher> MIT Press, </publisher> <year> 1983. </year>
Reference-contexts: Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], [Sum77], [Bau79], [Sha81], <ref> [Sha83] </ref>, [JK83], [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation. <p> by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], [Sum77], [Bau79], [Sha81], <ref> [Sha83] </ref>, [JK83], [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation. However, the type of control problems to be attacked below require a more explicit handling of multiple knowledge (cf. [Arn93], [Arn94b]) than considered in most of the papers mentioned 9 above.
Reference: [Sol64] <author> R. Solomonoff. </author> <title> A formal theory of inductive inference, Part I and Part II. </title> <journal> Information and Control, </journal> <volume> 7 </volume> <pages> 1-22 and 234-254, </pages> <year> 1964. </year>
Reference-contexts: This motivates the following brief excursion to inductive inference research. Inductive inference is a well-studied research area of theoretical computer science which focusses on the problem of learning from incomplete information. This research area has its origins in the early papers <ref> [Sol64] </ref> and [Gol67]. We consider [Gol67] the seminal publication of inductive inference. [AS83] and [KW80] are very good surveys. Additionally, there is a large number of easy introductions, like [Jan89], for instance. Therefore, we won't give a new introduction into inductive inference.
Reference: [Sum75] <author> Philip D. Summers. </author> <title> Program Construction from Examples. </title> <type> PhD thesis, </type> <institution> Yale University, Dept. Comp. Sci., </institution> <year> 1975. </year>
Reference-contexts: Generating therapy plans for process control in dynamic environments needs to be based on incomplete information, only. Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. <ref> [Sum75] </ref>, [BBP75], [BK76], [Sum77], [Bau79], [Sha81], [Sha83], [JK83], [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation.
Reference: [Sum77] <author> Philip D. Summers. </author> <title> A methodology for LISP program construction from examples. </title> <journal> Journal of the ACM, </journal> <volume> 24(1) </volume> <pages> 161-175, </pages> <year> 1977. </year>
Reference-contexts: Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], <ref> [Sum77] </ref>, [Bau79], [Sha81], [Sha83], [JK83], [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation. <p> problems attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], [Wie92]), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], <ref> [Sum77] </ref>, [Bau79], [Sha81], [Sha83], [JK83], [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). This is the type of work we want to relate to therapy plan generation. However, the type of control problems to be attacked below require a more explicit handling of multiple knowledge (cf. [Arn93], [Arn94b]) than considered in most of the papers mentioned 9 above.
Reference: [Tat77] <author> Austin Tate. </author> <title> Generating project networks. </title> <booktitle> In Proc. International Joint Conference on Artificial Intelligence, IJCAI-77, </booktitle> <pages> pages 888-893. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1977. </year>
Reference: [Ten89] <author> Josh D. Tenenberg. </author> <title> Inheritance in automated planning. </title> <editor> In Ronald J. Brachman, Hector J. Levesque, and Raymond Reiter, editors, </editor> <booktitle> Proceedings of the 1st Intern. Conf. on Knowledge Representation and Reasoning, </booktitle> <address> San Mateo, CA, USA, </address> <year> 1989, </year> <pages> pages 475-485. </pages> <publisher> Morgan Kauf-mann Publ. Co., </publisher> <year> 1989. </year>
Reference-contexts: categorization reflects the state of the art by stressing typical issues: * Another time model ([Ver83], [All83], [All84], [Pel91]), * incompleteness of information ([MW86], [DW91]), * computation time restrictions incl. anytime planning ([DB88], [RW91]), * dynamics and unforeseeable effects in plan execution ([Ped87], [GL87], [Dru89], [Fir92]), * abstraction ([Sac74], [Sac77], <ref> [Ten89] </ref>), * distributed reasoning ([BG88], [LB89], [Mar93]), * refinement by learning ([Ham89], [GD92], [DeJ94]), and * case-based reasoning ([KH92]). The pecularities of our target domains introduced above exhibit serious difficulties in specifying postconditions assigned to operators. This key difficulty is rarely considered in the recent literature.
Reference: [Thi94] <author> Markus A. Thies. Planbasierte Hilfeverfahren fur direkt-manipulative Systeme: Erkennung, </author> <title> Vervollstandigung und Visualisierung von Interaktionsplanen, </title> <booktitle> volume 67 of DISKI, Disserta-tionen zur Kunstlichen Intelligenz. infix, </booktitle> <year> 1994. </year> <month> 30 </month>
Reference-contexts: generation of therapy plans as developed turns out to be inductive program synthesis, in some sense. [AJ94b] is focussed on this particular insight. 1 Surprisingly, 6 out of the most recent (and best) 10 German Ph.D. theses which deal with planning ([Gun92], [Woh92], [Hor92], [Fis93], [Sau93], [Koh93], [Wer93], [Win94], [Koh94], <ref> [Thi94] </ref>) are suffering from the lack of a somehow formal and explicit plan concept (cf. [AJ94a] for an analysis). 2 2 Towards Knowledge-Based Supervision and Control The present chapter is intended to briefly sketch the knowledge processing problems surrounding our present approach. <p> A careful inspection exhibits that this is a crucial point, indeed. 4.2 Plan Concepts To the authors' big surprise, as already mentioned initially, about half of the recent publications of the DISKI 7 series (cf. [Gun92], [Woh92], [Hor92], [Fis93], [Sau93], [Koh93], [Wer93], [Win94], [Koh94], <ref> [Thi94] </ref>, ) which deal with planning do not contain an explicit plan concept. In [Her94], there is a quite general formulation 8 characterizing a plan as a structure containing descriptions of actions and goals for reasoning about the effects of future actions and for controlling goal-oriented actions.
Reference: [Ver83] <author> S.A. Vere. </author> <title> Planning in time: Windows and durations for activities and goals. </title> <journal> IEEE Trans. Pattern Analysis and Machine Intelligence, </journal> <volume> (PALMI-5):246-267, </volume> <year> 1983. </year>
Reference: [Wer93] <editor> Gerhard Werling. Produktorientierte automatische Planung von Prufoperationen bei der robotergestutzten Montage, </editor> <booktitle> volume 46 of DISKI, Dissertationen zur Kunstlichen Intelligenz. infix, </booktitle> <year> 1993. </year>
Reference-contexts: Interestingly, the generation of therapy plans as developed turns out to be inductive program synthesis, in some sense. [AJ94b] is focussed on this particular insight. 1 Surprisingly, 6 out of the most recent (and best) 10 German Ph.D. theses which deal with planning ([Gun92], [Woh92], [Hor92], [Fis93], [Sau93], [Koh93], <ref> [Wer93] </ref>, [Win94], [Koh94], [Thi94]) are suffering from the lack of a somehow formal and explicit plan concept (cf. [AJ94a] for an analysis). 2 2 Towards Knowledge-Based Supervision and Control The present chapter is intended to briefly sketch the knowledge processing problems surrounding our present approach. <p> A careful inspection exhibits that this is a crucial point, indeed. 4.2 Plan Concepts To the authors' big surprise, as already mentioned initially, about half of the recent publications of the DISKI 7 series (cf. [Gun92], [Woh92], [Hor92], [Fis93], [Sau93], [Koh93], <ref> [Wer93] </ref>, [Win94], [Koh94], [Thi94], ) which deal with planning do not contain an explicit plan concept. In [Her94], there is a quite general formulation 8 characterizing a plan as a structure containing descriptions of actions and goals for reasoning about the effects of future actions and for controlling goal-oriented actions.
Reference: [Wie92] <author> Rolf Wiehagen. </author> <title> From inductive inference to algorithmic learning theory. </title> <editor> In S. Doshita, K. Furukawa, K.P. Jantke, and T. Nishida, editors, </editor> <booktitle> Proc. 3rd Workshop on Algorithmic Learning Theory, </booktitle> <address> (ALT'92), </address> <month> October 20-22, </month> <year> 1992, </year> <title> Tokyo, </title> <booktitle> volume 743 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 13-24. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Generating therapy plans for process control in dynamic environments needs to be based on incomplete information, only. Processing incomplete information for coming up with complete solutions is the crux of problems attacked by inductive inference research (cf. [AS83], [KW80], [Ang92], <ref> [Wie92] </ref>), in general, and inductive program synthesis (cf. [Sum75], [BBP75], [BK76], [Sum77], [Bau79], [Sha81], [Sha83], [JK83], [BK86], [DP90], [FD93], [DR93], e.g.), in particular. The approaches referred to vary from purely recursion-theoretic to those synthesizing LISP expressions or Prolog programs ([Sum75], [Sum77], [Sha81], [Sha83] e.g.). <p> First, most inductive inference algorithms developed work consistently. Second, and this is one of the deeper insights provided by inductive inference research it may be more efficient to use an inference algorithm which has the freedom to generate, at least sometimes, inconsistent guesses. <ref> [Wie92] </ref> is a recent reference, in this respect. There are results of two different types. First, there are inductive inference problems which are solvable, but only if the inference algorithm used is not required to work consistently (cf. [JB81] contains both a couple of results and references to further publications). <p> Second, there are inductive inference problems for which inconsistent algorithms are remarkably more efficient than consistent algorithms (cf. <ref> [Wie92] </ref> and references therein). 10 Our basic planning algorithm developed below (cf. [Arn92a], [AJ94c], [AJ94b]) works consis-tently. In fact, refuting inconsistent action scripts during plan generation is the main deductive task involved. But we can imagine particular circumstances where inconsistent planning may gain an advantage over consistent algorithms.
Reference: [Win94] <author> Andreas Winklhofer. </author> <title> Zeitreprasentation und merkmalsgesteuerte Suche zur Terminplanung, </title> <booktitle> volume 58 of DISKI, Dissertationen zur Kunstlichen Intelligenz. infix, </booktitle> <year> 1994. </year>
Reference-contexts: Interestingly, the generation of therapy plans as developed turns out to be inductive program synthesis, in some sense. [AJ94b] is focussed on this particular insight. 1 Surprisingly, 6 out of the most recent (and best) 10 German Ph.D. theses which deal with planning ([Gun92], [Woh92], [Hor92], [Fis93], [Sau93], [Koh93], [Wer93], <ref> [Win94] </ref>, [Koh94], [Thi94]) are suffering from the lack of a somehow formal and explicit plan concept (cf. [AJ94a] for an analysis). 2 2 Towards Knowledge-Based Supervision and Control The present chapter is intended to briefly sketch the knowledge processing problems surrounding our present approach. <p> A careful inspection exhibits that this is a crucial point, indeed. 4.2 Plan Concepts To the authors' big surprise, as already mentioned initially, about half of the recent publications of the DISKI 7 series (cf. [Gun92], [Woh92], [Hor92], [Fis93], [Sau93], [Koh93], [Wer93], <ref> [Win94] </ref>, [Koh94], [Thi94], ) which deal with planning do not contain an explicit plan concept. In [Her94], there is a quite general formulation 8 characterizing a plan as a structure containing descriptions of actions and goals for reasoning about the effects of future actions and for controlling goal-oriented actions.
Reference: [Woh92] <editor> Gunter Wohlke. Wissensbasierte Greifplanung fur Mehrfinger-Roboterhande, </editor> <booktitle> volume 6 of DISKI, Dissertationen zur Kunstlichen Intelligenz. infix, </booktitle> <year> 1992. </year> <month> 31 </month>
Reference-contexts: Interestingly, the generation of therapy plans as developed turns out to be inductive program synthesis, in some sense. [AJ94b] is focussed on this particular insight. 1 Surprisingly, 6 out of the most recent (and best) 10 German Ph.D. theses which deal with planning ([Gun92], <ref> [Woh92] </ref>, [Hor92], [Fis93], [Sau93], [Koh93], [Wer93], [Win94], [Koh94], [Thi94]) are suffering from the lack of a somehow formal and explicit plan concept (cf. [AJ94a] for an analysis). 2 2 Towards Knowledge-Based Supervision and Control The present chapter is intended to briefly sketch the knowledge processing problems surrounding our present approach. <p> A key parameter for classifying planning approaches is the plan concept in use. A careful inspection exhibits that this is a crucial point, indeed. 4.2 Plan Concepts To the authors' big surprise, as already mentioned initially, about half of the recent publications of the DISKI 7 series (cf. [Gun92], <ref> [Woh92] </ref>, [Hor92], [Fis93], [Sau93], [Koh93], [Wer93], [Win94], [Koh94], [Thi94], ) which deal with planning do not contain an explicit plan concept.
References-found: 80

