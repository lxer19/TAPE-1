URL: file://ftp.cs.utexas.edu/pub/qsim/papers/Franke-PhD-92.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/qr/abstracts.html
Root-URL: http://www.cs.utexas.edu
Title: A THEORY OF TELEOLOGY  
Degree: APPROVED BY DISSERTATION COMMITTEE:  
Abstract-found: 0
Intro-found: 0
Reference: [AS85] <author> Harold Abelson, Gerald J. Sussman, </author> <title> The Structure and Interpretation of Computer Programs, </title> <publisher> MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: We discuss this capability further when comparing the TeD language to other work in Chapter 10. 30 3.2 Structure Many languages for representing structure have been put forth (see structure languages proposed by Abelson and Sussman <ref> [AS85] </ref>, Davis [Dav85], de Kleer and Brown [dKB85], Forbus [For85], Franke and Dvorak [FD90], Kuipers [Kui85, Kui86], Williams [Wil85], and VHDL [VHDL87]) and each has associated behavior languages and envisioning semantics (discussed by de Kleer [deK77], de Kleer and Brown [dKB82], and Kuipers [Kui82, Kui86]). <p> At the appropriate level of abstraction, a design description may consist of processes or generic mechanisms as opposed to physical components. Structure languages used here describe models (designs) hierarchically composed from simpler models called components <ref> [AS85, dKB85] </ref>. Hierarchy is achieved by applying this decomposition recursively to components. Each component has an interface, expressed in terms of terminals, that can be connected to terminals of other components. Interactions between two components are restricted to these connections.
Reference: [AEH*89] <author> Harold Abelson, Michael Eisenberg, Matthew Halfant, Jacob Katz-enelson, Elisha Sacks, Gerald J. Sussman, Jack Wisdom, Kenneth Yip, </author> <booktitle> "Intelligence in Scientific Computing" in Communications of the ACM, </booktitle> <volume> Vol. 32, No. </volume> <month> 5 (May </month> <year> 1989), </year> <pages> pp. 546-562. </pages>
Reference-contexts: By examining the changes to the structure in light of the specifications, descriptions as to the purpose of the design modifications can be inferred, as we will demonstrate with an example. A hypothetical design system described by Abelson et al. <ref> [AEH*89] </ref> supports interaction between a designer and an intelligent computer assistant that aides in the analysis and evaluation of a proposed design. During interaction with the design assistant, the designer identifies an undesirable behavior of the design (specifically, an oscillation at a particular frequency). <p> The system proposed by Abelson et al. <ref> [AEH*89] </ref> provides such an approach, with designer interactions such as "Add an active stabilizer to damp the family B motions." * Automatic the acquisition program observes design activity, noting design modifications and evaluations, and automatically generates teleolog ical descriptions.
Reference: [Alf82] <author> Mack W. Alford, </author> <title> "A Graph Model Based Approach to Specifications", in Distributed Systems: Methods and Tools for Specification, </title> <editor> M. Paul and H. J. Siegert (eds.), </editor> <booktitle> Lecture Notes in Computer Science No. </booktitle> <volume> 190, </volume> <editor> G. Goos and J. Hartmanis (eds.), </editor> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1982, </year> <pages> pp. 131-201. </pages>
Reference-contexts: The designer or design team elaborates the design specifications based on past knowledge of such designs and on the initial functional and structural decompositions of the design (see discussions by Alford <ref> [Alf82] </ref> and Rich and Shrobe [RS84]).
Reference: [BSZ89] <author> Catherine Baudin, Cecilia Sivard, </author> <title> Monte Zweben, "Model-Based Approach to Design Rationale Conservation", </title> <booktitle> in Proceedings of the 1989 Workshop on Model-Based Reasoning, </booktitle> <address> Detroit, </address> <month> August 20, </month> <year> 1989, </year> <pages> pp. 88-90. </pages>
Reference-contexts: Representing purpose in design systems is addressed in Steinberg and Mitchell's REDESIGN system [SM84], and an approach to diagnosis called the theory of responsibilities has been developed by 14 Milne [Mil85]. More recent efforts in representing purpose have been undertaken by the Conservation of Design Knowledge (CDK) Project <ref> [BSZ89] </ref> at NASA Ames Research Center, in Gruber's ASK system [Gru91], and in medical reasoning research in Downing's BIOTIC system [Dow90]. de Kleer's EQUAL system [deK85] expresses teleological descriptions in terms of behaviors of a component. Each description is based on causal assumptions on the parameters of the component. <p> The Conservation of Design Knowledge (CDK) Project <ref> [BSZ89] </ref> at NASA Ames Research Center addresses the problems of representing and acquiring design rationale using a philosophy similar to TeD. TeD provides a formal language for representing design rationale descriptions captured in the CDK acquisition work, and the CDK work complements TeD by providing acquisition techniques. <p> The two most significant contributions discussed in the literature are de Kleer's EQUAL system [deK85] and the Functional Representation [SC85] work at Ohio State University. More recent efforts in representing purpose have been undertaken by the Conservation of Design Knowledge (CDK) Project <ref> [BSZ89] </ref> at NASA Ames Research Center and in Gruber's ASK system [Gru91], and in medical reasoning research in Downing's BIOTIC system [Dow90]. Representing purpose in design systems is addressed in the REDESIGN system [SM84] and an approach to diagnosis called the theory of responsibilities has been developed by Milne [Mil85]. <p> The CDK acquisition approach is very similar to the approach taken in this work, and is based on a similar philosophy of design rationale. <ref> [BSZ89] </ref> states: This work assumes that the goal of the designer is to satisfy a set of (changing) requirements and that the rationale for design decisions can be inferred by comparing how different design alternatives 162 meet the design requirements. : : : Our first strategy is to simulate the behavior <p> This independence is demonstrated in the examples described in Chapters 2 and 6. 2. An acquisition technique is described in Chapter 9 and has been implemented. Other research (cf. [Gru91], <ref> [BSZ89] </ref>) addresses the acquisition problem directly, providing additional acquisition approaches. 3. Teleological descriptions can be classified and retrieved as described in Chapter 8.
Reference: [BR86] <author> Ted Biggerstaff, Charles Richter, </author> <title> "Reusability Framework, Assessment, and Directions", </title> <type> MCC (Non Proprietary) Technical Report No. </type> <institution> STP-345-86, </institution> <month> October </month> <year> 1986. </year>
Reference-contexts: mechanical, and hydraulic. 8 1.2.3 Design Reuse Design reuse is an area of current research in both CAE (computer aided engineering) environments (see work reported by Mostow [Mos85], Mostow and Barley [MB87], and Huhns and Acosta [HA88]) and CASE (computer aided software engineering) environments (see discussions by Biggerstaff and Richter <ref> [BR86] </ref> and Prieto-Diaz and Freeman [PF87], and collections of papers examining reuse in software engineering [IEEE88, IEEE87, IEEE84]). In each, the reuse problem can be addressed by providing: 1. Techniques for capturing and representing information by which a design component should be classified for subsequent retrieval, and 2.
Reference: [BC85] <author> Tom Bylander, B. Chandrasekaran, </author> <title> "Qualitative Reasoning About Physical Structures", in SIGART Newsletter, Special Section on Rea 57 58 soning About Structure, Behavior, and Function, </title> <editor> B. Chandrasekaran, Robert Milne eds., </editor> <volume> No. </volume> <month> 93 (July </month> <year> 1985), </year> <pages> pp. 22-24. </pages>
Reference-contexts: point out that in the domain of VLSI circuits, the role of information regarding the purpose of a circuit element is very similar in the problem-solving tasks of design and diagnosis. 1.2.1 Diagnosis Deriving and utilizing causal relationships is an approach currently used in explanation systems (e.g., Bylander and Chandrasekaran <ref> [BC85] </ref>, Doyle [Doy86], and Kuipers [Kui87]) and diagnosis systems (e.g., Cantone et al. [CLMG85], Davis [Dav85], De Jong [DeJ85], Genesereth [Gen85], Milne [Mil85], Sembugamoorthy and Chandrasekaran [SC85], Steinberg and Mitchell [SM84], and White and Frederiksen [WF85]).
Reference: [CLMG85] <author> Richard R. Cantone, W. Brent Lander, Michael P. Marrone, Michael W. Gaynor, </author> <title> "Automated Knowledge Acquisition in IN-ATE Using Component Information and Connectivity", in SIGART Newsletter, Special Section on Reasoning About Structure, Behavior, and Function, </title> <editor> B. Chandrasekaran, Robert Milne eds., </editor> <volume> No. </volume> <month> 93 (July </month> <year> 1985), </year> <pages> pp. 32-34. </pages>
Reference-contexts: regarding the purpose of a circuit element is very similar in the problem-solving tasks of design and diagnosis. 1.2.1 Diagnosis Deriving and utilizing causal relationships is an approach currently used in explanation systems (e.g., Bylander and Chandrasekaran [BC85], Doyle [Doy86], and Kuipers [Kui87]) and diagnosis systems (e.g., Cantone et al. <ref> [CLMG85] </ref>, Davis [Dav85], De Jong [DeJ85], Genesereth [Gen85], Milne [Mil85], Sembugamoorthy and Chandrasekaran [SC85], Steinberg and Mitchell [SM84], and White and Frederiksen [WF85]).
Reference: [CM88] <author> K. Many Chandra, Jayadev Misra, </author> <title> Parallel Program Design: A Foundation, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1988. </year>
Reference-contexts: For purposes involving temporal relationships, one representation approach for specification predicates is temporal logic, such as those described by Chandra and Misra <ref> [CM88] </ref>, Emerson (CTL fl ) [ES85], Moszkowski [Mosz85], and Turner [Tur84] (temporal logics of McDermott, Allen, and Halpern, Manna, and Moszkowski). We give thirteen definitions limited to expressions involving scenarios ( i ) and the specification predicate occursIn ( i ,b).
Reference: [CM85] <author> B. Chandrasekaran, Rob Milne, (eds.) </author> <title> "Special Section on Reasoning About Structure, Behavior, and Function", </title> <journal> in SIGART Newsletter, </journal> <volume> No. </volume> <month> 93 (July </month> <year> 1985), </year> <pages> pp. 4-54. </pages>
Reference-contexts: For example, in their introduction to <ref> [CM85] </ref> Chan-drasekaran and Milne state: 156 In simple cases, the behavior [: : : ] can be the function, but in general, functional specifications involve teleology, i.e., an account of the intentions for which the device is used.
Reference: [Cha90] <author> B. Chandrasekaran, </author> <title> "Design Problem Solving: A Task Analysis", </title> <journal> in AI Magazine, </journal> <volume> Vol. 11 No. </volume> <month> 4 (Winter </month> <year> 1990), </year> <pages> pp. 59-71. </pages>
Reference-contexts: Teleological descriptions captured during design can be used in later stages when diagnosing, explaining, or reusing the designed artifact. The design process model used here is of the Propose-Critique-Modify family described by Chandrasekaran <ref> [Cha90] </ref>. Our design process model starts with a set of specifications for the design, including physical characteristics and descriptions of (required, prohibited, ...) behaviors.
Reference: [Che80] <author> Brian F. Chellas, </author> <title> Modal Logic: An Introduction, </title> <publisher> Cambridge University Press, </publisher> <year> 1980. </year>
Reference-contexts: of the ToMake clause of functional representation described by Sembugamoorthy and Chandrasekaran [SC85], namely "given an initial set of conditions, the purpose is to bring about (ToMake) some other set of conditions." As a formal basis we have defined the teleological operator in terms of the operators of modal logic <ref> [Tur84, Che80] </ref>. If one formulates the possible static characterizations or dynamic behaviors of a mechanism as possible worlds, then specifications can be viewed as "possibly," "necessarily," or "not 4 The teleological operator Guarantees is defined formally in Sections 3.7.1 and 3.7.2. 25 possibly" holding in those possible worlds. <p> Modal logic (see Chellas <ref> [Che80] </ref>) adds the operators necessarily (written 2) and possibly (written 3) to first order logic. <p> Model-checking techniques for verifying the truth of a set of logical sen tences exist for various languages 13 . A model is expressed as an instance of a schema called a standard model. We use the definition of a standard model from <ref> [Che80, p. 68] </ref>. Given M = hW; R; P i with 1. W a set, 13 A model-checking algorithm has been implemented in this work, based on the behavior abstraction relations defined in Chapter 4. 48 2. R a binary relation on W , and 3. <p> These properties imply the validity of schemata D (2A ! 3A), T (2A ! A), B (A ! 23A), 4 (2A ! 22A) and 5 (3A ! 23A), respectively. See <ref> [Che80, p. 80] </ref>. 49 * P 0 (i) = fff j ff 2 W 0 ^ i in ffg. Now we can express teleological operator Guarantees in terms of the modal operators 2 (necessarily) and 3 (possibly).
Reference: [CM84] <author> W. F. Clocksin, C. S. Mellish, </author> <title> Programming in Prolog, Second Edition, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1984. </year>
Reference-contexts: index, but are considered during search. 138 answer the following questions: * Explanation: "What is the purpose of component X?" * Design Reuse: "How have previous designs addressed specification ?" * Diagnosis: "What components have purposes referencing behavior B?" For presentation purposes, we express these queries via the following Prolog <ref> [CM84] </ref> predicates: * td (design-history,modification,operator, spec) Succeeds when teleological description modification operator spec occurs in design-history. * references (modification,component) Succeeds when modification references structural entity component. * msg (spec,generalization) Succeeds when generalization is a most specific generalization of specifi cation spec. * mgs (spec,specialization) Succeeds when specializations is a most general
Reference: [CF82] <author> Paul R. Cohen, Edward A. Feigenbaum, </author> <booktitle> The Handbook of Artificial Intelligence, Vol. III, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. </address>
Reference-contexts: Consequently, a teleological description will associate a modification with a specification of the "nearest" structural parent (hierarchically) within which the modification is made. 9.4 Planning Planning systems (cf. Cohen and Feigenbaum <ref> [CF82] </ref>, Nilsson [Nil80]) including linear planning, nonlinear planning (cf. Fikes, Nilsson [FN71], and Hart [FHN72]), and hierarchical planning (cf. Sacerdoti [Sac74, Sac77]) provide additional examples of initial and evolved specifications in design.
Reference: [Dav85] <author> Randall Davis, </author> <title> "Diagnostic Reasoning Based on Structure and Behavior", in Qualitative Reasoning About Physical Systems, </title> <editor> Daniel G. 59 Bobrow, ed., </editor> <publisher> The MIT Press, </publisher> <address> Cambridge, MA 1985, </address> <pages> pp. 347-410. </pages> <note> Reprinted from Artificial Intelligence Vol. 24, </note> <year> 1984. </year>
Reference-contexts: purpose of a circuit element is very similar in the problem-solving tasks of design and diagnosis. 1.2.1 Diagnosis Deriving and utilizing causal relationships is an approach currently used in explanation systems (e.g., Bylander and Chandrasekaran [BC85], Doyle [Doy86], and Kuipers [Kui87]) and diagnosis systems (e.g., Cantone et al. [CLMG85], Davis <ref> [Dav85] </ref>, De Jong [DeJ85], Genesereth [Gen85], Milne [Mil85], Sembugamoorthy and Chandrasekaran [SC85], Steinberg and Mitchell [SM84], and White and Frederiksen [WF85]). <p> We discuss this capability further when comparing the TeD language to other work in Chapter 10. 30 3.2 Structure Many languages for representing structure have been put forth (see structure languages proposed by Abelson and Sussman [AS85], Davis <ref> [Dav85] </ref>, de Kleer and Brown [dKB85], Forbus [For85], Franke and Dvorak [FD90], Kuipers [Kui85, Kui86], Williams [Wil85], and VHDL [VHDL87]) and each has associated behavior languages and envisioning semantics (discussed by de Kleer [deK77], de Kleer and Brown [dKB82], and Kuipers [Kui82, Kui86]).
Reference: [DH88] <author> Randall Davis, Walter Hamscher, </author> <title> "Model-based Reasoning: </title> <booktitle> Troubleshooting" in Exploring Artificial Intelligence: Survey Talks from the National Conferences on Artificial Intelligence, </booktitle> <editor> Howard Shrobe, ed., </editor> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA 1988, </address> <pages> pp. 297-346. </pages>
Reference-contexts: Davis and Hamscher's discussion of model-based troubleshooting <ref> [DH88] </ref> and the proceedings of the model-based reasoning workshops [MBR89, MBR90, MBR91]). <p> The structure and behavior languages described herein abstract these existing language definitions to avoid basing the teleology language on a specific structure or behavior language and associated envisioning semantics. Davis and Hamscher <ref> [DH88] </ref> identify several common themes in representing structure: * Structure representation should be hierarchical; 31 * Structure representation should be object centered and isomorphic to the organization of the device; * Behavior can be represented by a set of expressions that capture the interrelationships among the values on the terminals of <p> This selection task is called candidate or hypothesis generation in model-based diagnosis. When performing model-based diagnosis (see Davis and Hamscher <ref> [DH88] </ref>), a set of candidate structure components is generated. This set contains those structural components that can possibly account for the missing or undesirable behaviors. Candidate evaluation is performed to determine whether each candidate can account for the aberrant behavior.
Reference: [DeJ85] <author> Kenneth De Jong, </author> <title> "Expert Systems for Diagnosing Complex System Failures", in SIGART Newsletter, Special Section on Reasoning About Structure, Behavior, and Function, </title> <editor> B. Chandrasekaran, Robert Milne eds., </editor> <volume> No. </volume> <month> 93 (July </month> <year> 1985), </year> <pages> pp. 29-32. </pages>
Reference-contexts: circuit element is very similar in the problem-solving tasks of design and diagnosis. 1.2.1 Diagnosis Deriving and utilizing causal relationships is an approach currently used in explanation systems (e.g., Bylander and Chandrasekaran [BC85], Doyle [Doy86], and Kuipers [Kui87]) and diagnosis systems (e.g., Cantone et al. [CLMG85], Davis [Dav85], De Jong <ref> [DeJ85] </ref>, Genesereth [Gen85], Milne [Mil85], Sembugamoorthy and Chandrasekaran [SC85], Steinberg and Mitchell [SM84], and White and Frederiksen [WF85]). However, in mechanisms with highly interconnected structure or feedback loops, causal relationships can exist between virtually every pair of components of the mechanism (and between variables of a mechanism model).
Reference: [deK77] <author> Johan de Kleer, </author> <title> "Multiple Representation of Knowledge in a Mechanics Problem Solver, </title> <booktitle> in Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <address> Cambridge, MA, </address> <pages> pp. 299-304. </pages>
Reference-contexts: for representing structure have been put forth (see structure languages proposed by Abelson and Sussman [AS85], Davis [Dav85], de Kleer and Brown [dKB85], Forbus [For85], Franke and Dvorak [FD90], Kuipers [Kui85, Kui86], Williams [Wil85], and VHDL [VHDL87]) and each has associated behavior languages and envisioning semantics (discussed by de Kleer <ref> [deK77] </ref>, de Kleer and Brown [dKB82], and Kuipers [Kui82, Kui86]). The structure and behavior languages described herein abstract these existing language definitions to avoid basing the teleology language on a specific structure or behavior language and associated envisioning semantics. <p> This characterization is called an envisionment 7 <ref> [deK77, dKB82, Kui82, Kui86] </ref>. The qualitative modeling approach attempts to derive all the possible behaviors from a given set of initial states, and hence provides the capability to generate such an envisionment.
Reference: [deK85] <author> Johan de Kleer, </author> <title> "How Circuits Work", in Qualitative Reasoning About Physical Systems, </title> <editor> Daniel G. Bobrow, ed., </editor> <publisher> The MIT Press, </publisher> <address> Cambridge, MA 1985, </address> <pages> pp. 205-280. </pages> <note> Reprinted from Artificial Intelligence Vol. 24, </note> <year> 1984. </year>
Reference-contexts: One can understand both the utility of descriptions of structure, behavior, causality, and purpose and the differences among these descriptions by considering the questions that can be answered with this information. A 1 As de Kleer points out <ref> [deK85] </ref>, the goals of efficient design, manufacture, and maintenance of artifacts dictate that designers avoid superfluous components in the design, and hence each component should contribute to the ultimate purpose of the design in some way. 1 2 structure description addresses questions of the form "How is this mechanism constructed?" and <p> What's the Purpose? We have characterized teleological descriptions as addressing questions of the form "Why is this portion of the mechanism designed in this way?" or "What is the purpose of this piece of the mechanism?" This identifies one important use of teleological descriptions, namely explanation. de Kleer's EQUAL system <ref> [deK85] </ref> generates teleological descriptions (of a form different than that defined herein) for the purpose of explanation of electrical circuits. <p> Franck [Fra89] points out that "Design is a form of teleological reasoning, in that from the intended purpose or anticipated behavior one can select elements that have the adequate structure to do so." Teleological descriptions provide a means for representing design rationale. de Kleer <ref> [deK85] </ref> notes that disciplines such as electrical engineering have developed specialized vocabularies for denoting the purpose of mechanisms and components. Given the ability to capture and represent teleological descriptions (either generated by humans or programs), these descriptions can be used to classify mechanism descriptions. <p> Detailed comparison of the work described in this dissertation (i.e., the Teleological Description (TeD) language) with previous research appears in Chapter 10. The two most significant contributions discussed in the literature are de Kleer's EQUAL system <ref> [deK85] </ref> and the Functional Representation [SC85] work at Ohio State University. Representing purpose in design systems is addressed in Steinberg and Mitchell's REDESIGN system [SM84], and an approach to diagnosis called the theory of responsibilities has been developed by 14 Milne [Mil85]. <p> More recent efforts in representing purpose have been undertaken by the Conservation of Design Knowledge (CDK) Project [BSZ89] at NASA Ames Research Center, in Gruber's ASK system [Gru91], and in medical reasoning research in Downing's BIOTIC system [Dow90]. de Kleer's EQUAL system <ref> [deK85] </ref> expresses teleological descriptions in terms of behaviors of a component. Each description is based on causal assumptions on the parameters of the component. EQUAL identifies a functional characterization (teleological description) by matching derived behavior with prescribed behavior prototypes that have been enumerated, named, and added as domain specific knowledge. <p> The two most significant contributions discussed in the literature are de Kleer's EQUAL system <ref> [deK85] </ref> and the Functional Representation [SC85] work at Ohio State University. More recent efforts in representing purpose have been undertaken by the Conservation of Design Knowledge (CDK) Project [BSZ89] at NASA Ames Research Center and in Gruber's ASK system [Gru91], and in medical reasoning research in Downing's BIOTIC system [Dow90]. <p> In particular, the term function is used to describe behavior, teleology, or various combinations of behavior and teleology. We will attempt to clarify the meaning of the term function for work referenced in this chapter. 10.3 EQUAL (de Kleer) de Kleer's EQUAL system <ref> [deK85] </ref> expresses teleological descriptions in terms of behaviors of a component. Each such description is based on a causal assumption (s) on the parameters of the component. <p> The relevance of this approach to causal reasoning is debated in [IS86a, IS86b] and [dKB86]. 10.3.1 Function vs. Teleology In the EQUAL work, de Kleer uses the terms function and teleology interchangeably (": : : the function of a circuit (i.e., its purpose) : : : ", <ref> [deK85, p. 205] </ref>). In EQUAL, function is a combination of causal information (changes in voltage "cause" changes in current) and behavior (voltage and current change).
Reference: [dKB82] <author> Johan de Kleer, John Seely Brown, </author> <title> "Foundations of Envisioning", </title> <booktitle> in Proceedings of the Second National Conference on Artificial Intelligence, </booktitle> <pages> pp. 434-437. </pages>
Reference-contexts: put forth (see structure languages proposed by Abelson and Sussman [AS85], Davis [Dav85], de Kleer and Brown [dKB85], Forbus [For85], Franke and Dvorak [FD90], Kuipers [Kui85, Kui86], Williams [Wil85], and VHDL [VHDL87]) and each has associated behavior languages and envisioning semantics (discussed by de Kleer [deK77], de Kleer and Brown <ref> [dKB82] </ref>, and Kuipers [Kui82, Kui86]). The structure and behavior languages described herein abstract these existing language definitions to avoid basing the teleology language on a specific structure or behavior language and associated envisioning semantics. <p> This characterization is called an envisionment 7 <ref> [deK77, dKB82, Kui82, Kui86] </ref>. The qualitative modeling approach attempts to derive all the possible behaviors from a given set of initial states, and hence provides the capability to generate such an envisionment. <p> a total envisionment of D is written as E (S) and abbreviated as E. 7 The term envisionment is intended to include descriptions of behaviors generated from a design instance whose initial state is not an equilibrium, as well descriptions of behaviors resulting from perturbations to a system in equilibrium <ref> [dKB82] </ref>. 41 (SB vessel T) = (AT* nil) (SB flame T) = (FT* std) (SB air T) = (AT* std) 3.5.3 Example To demonstrate behavior description and envisionment, we return to the steam boiler example and use the envisioning semantics and behavior language of Qsim.
Reference: [dKB85] <author> Johan de Kleer, John Seely Brown, </author> <title> "A Qualitative Physics Based on Confluences", in Qualitative Reasoning About Physical Systems, </title> <editor> 60 Daniel G. Bobrow, ed., </editor> <publisher> The MIT Press, </publisher> <address> Cambridge, MA 1985, </address> <pages> pp. 7-83. </pages> <note> Reprinted from Artificial Intelligence Vol. 24, </note> <year> 1984. </year>
Reference-contexts: We discuss this capability further when comparing the TeD language to other work in Chapter 10. 30 3.2 Structure Many languages for representing structure have been put forth (see structure languages proposed by Abelson and Sussman [AS85], Davis [Dav85], de Kleer and Brown <ref> [dKB85] </ref>, Forbus [For85], Franke and Dvorak [FD90], Kuipers [Kui85, Kui86], Williams [Wil85], and VHDL [VHDL87]) and each has associated behavior languages and envisioning semantics (discussed by de Kleer [deK77], de Kleer and Brown [dKB82], and Kuipers [Kui82, Kui86]). <p> At the appropriate level of abstraction, a design description may consist of processes or generic mechanisms as opposed to physical components. Structure languages used here describe models (designs) hierarchically composed from simpler models called components <ref> [AS85, dKB85] </ref>. Hierarchy is achieved by applying this decomposition recursively to components. Each component has an interface, expressed in terms of terminals, that can be connected to terminals of other components. Interactions between two components are restricted to these connections. <p> The process of envisioning produces a characterization of the (possibly infinite) set of possible behaviors of the mechanism. We describe a behavior language, adopting existing terminology of behavior descriptions (see behavior language descriptions of de Kleer and Brown <ref> [dKB85] </ref>, Forbus [For85], and Kuipers [Kui85, Kui86]). For each pair of structure and behavior languages there is an envisioning semantics addressing issues such as valid transitions between variable values, valid transitions between states, and representations of time. <p> A finite, positive value can be expressed as (0 inf), but this form makes (0 (0 inf)) somewhat awkward. 133 * Negative, zero, or positive. This quantity space is used in the qualitative reasoning approaches of de Kleer and Brown <ref> [dKB85] </ref> and Williams [Wil85] 2 and can be expressed in this Qsim quantity space as (minf 0), 0, and (0 inf). * A positive value bounded above, or (0 +). * A negative value bounded below, or (- 0). * A finite, positive value with a positive lower bound, or (+
Reference: [dKB86] <author> Johan de Kleer, John Seely Brown, </author> <title> "Theories of Causal Ordering", </title> <booktitle> in Artificial Intelligence Vol. </booktitle> <volume> 29, No. </volume> <month> 1 (July </month> <year> 1986), </year> <pages> pp. 33-61. </pages>
Reference-contexts: The relevance of this approach to causal reasoning is debated in [IS86a, IS86b] and <ref> [dKB86] </ref>. 10.3.1 Function vs. Teleology In the EQUAL work, de Kleer uses the terms function and teleology interchangeably (": : : the function of a circuit (i.e., its purpose) : : : ", [deK85, p. 205]).
Reference: [Dow90] <editor> Keith Downing "The Qualitative Criticism of Circulatory Models via Bipartite Teleological Analysis", </editor> <booktitle> in Proceedings of the 1990 Workshop on Qualitative Reasoning. </booktitle>
Reference-contexts: More recent efforts in representing purpose have been undertaken by the Conservation of Design Knowledge (CDK) Project [BSZ89] at NASA Ames Research Center, in Gruber's ASK system [Gru91], and in medical reasoning research in Downing's BIOTIC system <ref> [Dow90] </ref>. de Kleer's EQUAL system [deK85] expresses teleological descriptions in terms of behaviors of a component. Each description is based on causal assumptions on the parameters of the component. <p> TeD provides a formal language for representing design rationale descriptions captured in the CDK acquisition work, and the CDK work complements TeD by providing acquisition techniques. Downing's BIOTIC system <ref> [Dow90] </ref> critiques natural (e.g., human and reptilian) circulatory models with respect to teleologies, desired global behaviors of a system. The teleologies of BIOTIC correspond to design specifications of the TeD language, and hence are prescribed. Gruber's ASK system [Gru91] elicits justifications from experts via an interactive dialogue with the expert. <p> More recent efforts in representing purpose have been undertaken by the Conservation of Design Knowledge (CDK) Project [BSZ89] at NASA Ames Research Center and in Gruber's ASK system [Gru91], and in medical reasoning research in Downing's BIOTIC system <ref> [Dow90] </ref>. Representing purpose in design systems is addressed in the REDESIGN system [SM84] and an approach to diagnosis called the theory of responsibilities has been developed by Milne [Mil85]. <p> The CDK work complements the work on TeD by providing acquisition techniques. Insufficient information regarding the details of the CDK project representation is available to judge its strengths and weaknesses with respect to TeD. 10.7 BIOTIC (Downing) BIOTIC <ref> [Dow90] </ref> critiques natural (e.g., human, reptilian) circulatory models with respect to teleologies, desired global behaviors of a system. For circulatory systems, example teleologies are oxygen transport or carbon dioxide dissipation.
Reference: [Doy86] <author> Richard J. Doyle, </author> <title> "Constructing and Refining Causal Explanations from an Inconsistent Domain Theory", </title> <booktitle> in Proceedings of the Fifth National Conference on Artificial Intelligence, </booktitle> <year> 1986, </year> <pages> pp. 538-544. </pages>
Reference-contexts: that in the domain of VLSI circuits, the role of information regarding the purpose of a circuit element is very similar in the problem-solving tasks of design and diagnosis. 1.2.1 Diagnosis Deriving and utilizing causal relationships is an approach currently used in explanation systems (e.g., Bylander and Chandrasekaran [BC85], Doyle <ref> [Doy86] </ref>, and Kuipers [Kui87]) and diagnosis systems (e.g., Cantone et al. [CLMG85], Davis [Dav85], De Jong [DeJ85], Genesereth [Gen85], Milne [Mil85], Sembugamoorthy and Chandrasekaran [SC85], Steinberg and Mitchell [SM84], and White and Frederiksen [WF85]).
Reference: [ES85] <author> Allen Emerson, A. Prasad Sistla, </author> <title> "Deciding Full Time Branching Logic", </title> <journal> in Information and Control, </journal> <volume> Vol. 61, No. 3, </volume> <pages> pp. 175-201. </pages>
Reference-contexts: For purposes involving temporal relationships, one representation approach for specification predicates is temporal logic, such as those described by Chandra and Misra [CM88], Emerson (CTL fl ) <ref> [ES85] </ref>, Moszkowski [Mosz85], and Turner [Tur84] (temporal logics of McDermott, Allen, and Halpern, Manna, and Moszkowski). We give thirteen definitions limited to expressions involving scenarios ( i ) and the specification predicate occursIn ( i ,b).
Reference: [FKKP90] <author> Kenneth W. Fiduk, Sally Kleinfeldt, Marta Kosarchyn, Eileen B. Perez, </author> <title> "Design Methodology Management A CAD Framework Initiative Perspective", </title> <booktitle> in Proceedings of the 27 th ACM/IEEE Design Automation Conference, </booktitle> <address> June 24 - 28, 1990, Orlando. </address>
Reference-contexts: design methodologies in which capture of teleological information can be included, these systems do not explicitly represent a methodology and hence do not reason about or with the methodology. 3 However, support of development and verification methodology has been researched (e.g., the Programmer's Apprentice [RS84, Wat84]), and Fiduk et al. <ref> [FKKP90] </ref> describe 3 Systems currently provide a suite of tools, and the designers themselves are responsible for applying the appropriate tool to the appropriate data, in the correct sequence. 23 current research in explicitly representing methodologies and reasoning about design activity with respect to methodologies.
Reference: [FHN72] <author> Richard E. Fikes, P. E. Hart, Nils J. Nilsson, </author> <title> "Learning and Executing Generalized Plans", </title> <journal> in Artificial Intelligence, </journal> <volume> Vol. 3, </volume> <pages> (1972) pp. 251-288. </pages>
Reference-contexts: Consequently, a teleological description will associate a modification with a specification of the "nearest" structural parent (hierarchically) within which the modification is made. 9.4 Planning Planning systems (cf. Cohen and Feigenbaum [CF82], Nilsson [Nil80]) including linear planning, nonlinear planning (cf. Fikes, Nilsson [FN71], and Hart <ref> [FHN72] </ref>), and hierarchical planning (cf. Sacerdoti [Sac74, Sac77]) provide additional examples of initial and evolved specifications in design. Planning systems attempt to achieve some goal state, given an initial state and a set of operators on states.
Reference: [FN71] <author> Richard E. Fikes, Nils J. Nilsson, </author> <title> "STRIPS: A New Approach to the Application of Theorem Proving to Problem Solving", </title> <journal> in Artificial Intelligence, </journal> <volume> Vol. 2, </volume> <pages> (1971) pp. 189-208. 61 </pages>
Reference-contexts: Consequently, a teleological description will associate a modification with a specification of the "nearest" structural parent (hierarchically) within which the modification is made. 9.4 Planning Planning systems (cf. Cohen and Feigenbaum [CF82], Nilsson [Nil80]) including linear planning, nonlinear planning (cf. Fikes, Nilsson <ref> [FN71] </ref>, and Hart [FHN72]), and hierarchical planning (cf. Sacerdoti [Sac74, Sac77]) provide additional examples of initial and evolved specifications in design. Planning systems attempt to achieve some goal state, given an initial state and a set of operators on states.
Reference: [For85] <author> Kenneth D. Forbus, </author> <title> "Qualitative Process Theory", in Qualitative Reasoning About Physical Systems, </title> <editor> Daniel G. Bobrow, ed., </editor> <publisher> The MIT Press, </publisher> <address> Cambridge, MA 1985, </address> <pages> pp. 85-168. </pages> <note> Reprinted from Artificial Intelligence Vol. 24, </note> <year> 1984. </year>
Reference-contexts: We discuss this capability further when comparing the TeD language to other work in Chapter 10. 30 3.2 Structure Many languages for representing structure have been put forth (see structure languages proposed by Abelson and Sussman [AS85], Davis [Dav85], de Kleer and Brown [dKB85], Forbus <ref> [For85] </ref>, Franke and Dvorak [FD90], Kuipers [Kui85, Kui86], Williams [Wil85], and VHDL [VHDL87]) and each has associated behavior languages and envisioning semantics (discussed by de Kleer [deK77], de Kleer and Brown [dKB82], and Kuipers [Kui82, Kui86]). <p> While the structure language described here supports these themes, it allows structure ontologies other than one component per physical object. For example, the ontological elements might be processes <ref> [For85] </ref> or generic mechanisms [Kui89b] with descriptions of purpose associated with these elements. At the appropriate level of abstraction, a design description may consist of processes or generic mechanisms as opposed to physical components. Structure languages used here describe models (designs) hierarchically composed from simpler models called components [AS85, dKB85]. <p> The process of envisioning produces a characterization of the (possibly infinite) set of possible behaviors of the mechanism. We describe a behavior language, adopting existing terminology of behavior descriptions (see behavior language descriptions of de Kleer and Brown [dKB85], Forbus <ref> [For85] </ref>, and Kuipers [Kui85, Kui86]). For each pair of structure and behavior languages there is an envisioning semantics addressing issues such as valid transitions between variable values, valid transitions between states, and representations of time.
Reference: [Fra89] <author> Bruno Franck, </author> <title> "Qualitative Engineering at Various Levels of Conception for Design and Evaluation of Structures", </title> <booktitle> in Proceedings of the Conference on Industrial and Engineering Application of AI and ES, ACM, </booktitle> <year> 1989. </year>
Reference-contexts: Hence, teleological descriptions can provide a more productive initial focus of attention for diagnosis. 1.2.2 Design Mostow [Mos85] discusses the potential for improving the design process through capture and representation of design rationale. Franck <ref> [Fra89] </ref> points out that "Design is a form of teleological reasoning, in that from the intended purpose or anticipated behavior one can select elements that have the adequate structure to do so." Teleological descriptions provide a means for representing design rationale. de Kleer [deK85] notes that disciplines such as electrical engineering
Reference: [FD90] <author> David W. Franke, Daniel L. Dvorak, </author> <title> "CC: Component Connection Models for Qualitative Simulation, A User's Guide", </title> <type> TR AI90-126, </type> <institution> Dept. of Computer Sciences, The University of Texas at Austin. </institution>
Reference-contexts: We discuss this capability further when comparing the TeD language to other work in Chapter 10. 30 3.2 Structure Many languages for representing structure have been put forth (see structure languages proposed by Abelson and Sussman [AS85], Davis [Dav85], de Kleer and Brown [dKB85], Forbus [For85], Franke and Dvorak <ref> [FD90] </ref>, Kuipers [Kui85, Kui86], Williams [Wil85], and VHDL [VHDL87]) and each has associated behavior languages and envisioning semantics (discussed by de Kleer [deK77], de Kleer and Brown [dKB82], and Kuipers [Kui82, Kui86]). <p> To demonstrate structure description, we describe the steam boiler example in the structure language CC <ref> [FD90] </ref> which uses Kuipers' Qsim [Kui85, Kui86] behavior language. 3 In this example we model temperatures, pressure and heat inside the boiler vessel, and the heat flow from the heat source to the boiler vessel to the surrounding air, a heat sink. <p> We next describe the behavior language and envisionment properties required by the TeD language. 5 A flat representation expresses a model at the lowest level of abstraction, and is produced from a hierarchical representation. See <ref> [FD90] </ref> for details of the CC flattening procedure. 6 Modeling techniques such as time-scale abstraction [Kui87] may have lower abstraction levels which are effectively instantaneous from the point of view of the current model, and hence can be described by variables of the current abstraction level. 40 3.5.1 Single Behaviors Two <p> design explanation, design reuse, design by analogy, case-based reasoning, and diagnosis because queries are posed in terms of the problem to be solved as opposed to the technique for solving the problem. 171 11.2 Implementation The ideas put forth in this dissertation have been implemented for the structure language CC <ref> [FD90] </ref> and the behavior language of Qsim [Kui85, Kui86]. The example designs for the steam boiler (Chapter 3), input selection circuit (Chapter 6), and electromechanical motor (Chapter 6) are represented in CC and simulated in Qsim.
Reference: [Gen85] <author> Michael R. Genesereth, </author> <title> "The Use of Design Descriptions in Automated Diagnosis", in Qualitative Reasoning About Physical Systems, </title> <editor> Daniel G. Bobrow, ed., </editor> <publisher> The MIT Press, </publisher> <address> Cambridge, MA 1985, </address> <pages> pp. 411-436. </pages> <note> Reprinted from Artificial Intelligence Vol. 24, </note> <year> 1984. </year>
Reference-contexts: is very similar in the problem-solving tasks of design and diagnosis. 1.2.1 Diagnosis Deriving and utilizing causal relationships is an approach currently used in explanation systems (e.g., Bylander and Chandrasekaran [BC85], Doyle [Doy86], and Kuipers [Kui87]) and diagnosis systems (e.g., Cantone et al. [CLMG85], Davis [Dav85], De Jong [DeJ85], Genesereth <ref> [Gen85] </ref>, Milne [Mil85], Sembugamoorthy and Chandrasekaran [SC85], Steinberg and Mitchell [SM84], and White and Frederiksen [WF85]). However, in mechanisms with highly interconnected structure or feedback loops, causal relationships can exist between virtually every pair of components of the mechanism (and between variables of a mechanism model).
Reference: [Goe89] <author> Ashok Goel, B. Chandrasekaran, </author> <title> "Functional Representation of Designs and Redesign Problem Solving", </title> <booktitle> in Proceedings of the Eleventh Joint International Conference on Artificial Intelligence, </booktitle> <month> August </month> <year> 1989, </year> <pages> Detroit, pp. 1388-1394. </pages>
Reference-contexts: Limitations of this approach are that teleological descriptions are prescribed, domain specific, and limited to describing relationships among variables of a single component. Functional representation (FR) described by Sembugamoorthy, Chan-drasekaran [SC85], Goel <ref> [Goe89] </ref>, Sticklen, and Bond [SCB89] and functional modeling (FM) described by Sticklen et al. [ST90, SKB90] address 1) representing "how a device functions" and 2) applying this information to explanation, diagnosis, and design. <p> Similar approaches to redesign are design plans (Steinberg and Mitchell [SM84]) and functional representations (Goel and Chandrasekaran <ref> [Goe89] </ref>). <p> Because the teleological descriptions of a component are defined in terms of the behaviors observed at the component terminals, teleological descriptions in EQUAL will necessarily map one-to-one to these behaviors. 10.4 Functional Representation, Functional Modeling The functional representation (FR) <ref> [SC85, Goe89, SCB89] </ref> and functional modeling (FM) [ST90, SKB90] address 1) representing "how a device functions" and 2) applying this information to explanation, diagnosis, and design.
Reference: [Gre83] <author> James G. Greeno, </author> <title> "Conceptual Entities", in Mental Models, Dedre Gentner, </title> <editor> Albert L. Stevens (eds.), </editor> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, NJ, </address> <year> 1983, </year> <pages> pp. 227-252. </pages>
Reference-contexts: language TeD are: * Design specifications (desired static and dynamic characteristics) * Design descriptions (structure, behavior) * Design modifications The ontological elements identified by Simon are realized in TeD as follows: * Purpose or goal Design specifications 1 The ontology identifies the entities that are available for representing problem situations <ref> [Gre83] </ref>. 29 * Character of the artifact Design descriptions (structure, behavior) * Environment Derived behaviors We describe the ontological elements of TeD in this chapter. Structure, design modification, and design history languages are described first. We then describe behavior and specification languages, and finally the teleology language TeD.
Reference: [Gru91] <author> Thomas Gruber, </author> <title> "Learning Why by Being Told What", </title> <journal> in IEEE Expert Vol. </journal> <volume> 6, No. </volume> <month> 4 (August </month> <year> 1991), </year> <pages> pp. 65-75. 62 </pages>
Reference-contexts: More recent efforts in representing purpose have been undertaken by the Conservation of Design Knowledge (CDK) Project [BSZ89] at NASA Ames Research Center, in Gruber's ASK system <ref> [Gru91] </ref>, and in medical reasoning research in Downing's BIOTIC system [Dow90]. de Kleer's EQUAL system [deK85] expresses teleological descriptions in terms of behaviors of a component. Each description is based on causal assumptions on the parameters of the component. <p> Downing's BIOTIC system [Dow90] critiques natural (e.g., human and reptilian) circulatory models with respect to teleologies, desired global behaviors of a system. The teleologies of BIOTIC correspond to design specifications of the TeD language, and hence are prescribed. Gruber's ASK system <ref> [Gru91] </ref> elicits justifications from experts via an interactive dialogue with the expert. TeD provides a formal language for representing ASK explanations (teleological descriptions), provides indexing capabilities for ASK explanations, and addresses acquisition of teleological descriptions during design. 16 1.5 Claims of This Work The claims of this work are: 1. <p> More recent efforts in representing purpose have been undertaken by the Conservation of Design Knowledge (CDK) Project [BSZ89] at NASA Ames Research Center and in Gruber's ASK system <ref> [Gru91] </ref>, and in medical reasoning research in Downing's BIOTIC system [Dow90]. Representing purpose in design systems is addressed in the REDESIGN system [SM84] and an approach to diagnosis called the theory of responsibilities has been developed by Milne [Mil85]. <p> We avoid the concomitant philosophical and theological debate. 164 of teleological descriptions (BIOTIC explanations). 10.8 ASK (Gruber) The ASK <ref> [Gru91] </ref> system elicits justifications from experts via an interactive dialogue with the expert. The characteristics of these justifications are [Gru91, p. 73]: 1. Justifications are represented in terms of SITUATIONS (structure, assumed operating conditions), CHOICES (design alternatives), and FEA TURES (models, initial conditions, predicted behaviors). 2. <p> We avoid the concomitant philosophical and theological debate. 164 of teleological descriptions (BIOTIC explanations). 10.8 ASK (Gruber) The ASK [Gru91] system elicits justifications from experts via an interactive dialogue with the expert. The characteristics of these justifications are <ref> [Gru91, p. 73] </ref>: 1. Justifications are represented in terms of SITUATIONS (structure, assumed operating conditions), CHOICES (design alternatives), and FEA TURES (models, initial conditions, predicted behaviors). 2. The representation is implemented in a TASK-SPECIFIC ARCHITEC TURE that can apply justifications to perform some task 3. <p> This independence is demonstrated in the examples described in Chapters 2 and 6. 2. An acquisition technique is described in Chapter 9 and has been implemented. Other research (cf. <ref> [Gru91] </ref>, [BSZ89]) addresses the acquisition problem directly, providing additional acquisition approaches. 3. Teleological descriptions can be classified and retrieved as described in Chapter 8.
Reference: [Hel88] <author> David H. Helman (ed.), </author> <title> Analogical Reasoning, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, The Netherlands, </address> <year> 1988. </year>
Reference-contexts: Chapter 9 Acquisition 9.1 The Problem For knowledge-based systems, acquiring the knowledge in a form usable by that system is a principal concern. This is particularly true for systems that rely on a database (knowledge base) of examples, such as analogical reasoning systems <ref> [Hel88] </ref>, design support systems, and case-based reasoning systems [RS89]. Once captured, an effective indexing technique for classifying and retrieving this knowledge is required.
Reference: [HW87] <author> Michael R. Herbert, Gareth H. Williams, </author> <title> "An Initial Evaluation of the Detection and Diagnosis of Power Plant Faults Using a Deep Knowledge Representation of Physical Behaviour", </title> <journal> in Expert Systems, </journal> <volume> Vol. 4, No. 2, </volume> <month> (May </month> <year> 1987), </year> <pages> pp. 90-99. </pages>
Reference-contexts: In fact, descriptions of purpose are very valuable in communicating and understanding design descriptions, since they convey an aspect of the design process here-to-fore not (automatically) captured or derivable from a declarative design description, namely the designers' intent. Consider the following design description segment in which Herbert and Williams <ref> [HW87, p. 91] </ref> discuss modeling a pressurizer subsystem of a power plant: purpose of which is to control the pressure of the primary circuit by maintaining a steam-water interface within the vessel through the controlled addition of heat and water spray. 3 This brief excerpt contains a description of purpose, ": <p> These languages express the purpose of adding the feedback transistor as ffi Guarantees where ffi denotes the design modification that adds the feedback transistor and denotes the specification (specification 5). 2.2 Specifications as Drivers for Design In examining human generated descriptions of purpose (cf. <ref> [HW87] </ref>, [Kow85], [McC88], [Ray86], [SS88], and [WMK89]), a common theme emerges. These descriptions relate design features (i.e., particular design decisions) to design goals (specifications).
Reference: [Ham91] <author> Walter Hamscher, </author> <title> "Modeling Digital Circuits for Troubleshooting", </title> <booktitle> in Artificial Intelligence Vol. </booktitle> <volume> 51, </volume> <pages> Nos. </pages> <month> 1-3 (October </month> <year> 1991), </year> <pages> pp. 223-271. </pages>
Reference-contexts: The behavior in which the internal pressure of the boiler vessel instance vessel starts at 0 and goes to the positive value Pmax* is written as a sequence of three states, hf ((vessel pressure) (0 nil))g, f ((vessel pressure) ((0 Pmax*) inc))g, f ((vessel pressure) (Pmax* std))gi 1 Hamscher <ref> [Ham91] </ref> discusses the relevance of behavior abstraction in the problem solving domain of diagnosis. 59 60 This behavior abstracts the behavior of the entire system, since variables other than pressure are ignored. <p> For example, Hamscher <ref> [Ham91] </ref> identifies synchronize as an interesting abstraction in describing the behavior of electronic circuits. 76 2. ffi Synchronizes 1 ; 2 , 8 &gt; &gt; &gt; &gt; &gt; &gt; : 9 b 2 E (occursIn ( 1 ; b) ^ occursIn ( 2 ; b)) ^ :occursIn ([ 1 k 2
Reference: [HA88] <author> Michael N. Huhns, Ramon D. Acosta, "ARGO: </author> <title> A System for Design by Analogy", </title> <journal> in IEEE Expert Vol. </journal> <volume> 3, No. </volume> <month> 3 (Fall </month> <year> 1988), </year> <pages> pp. 53-68. </pages>
Reference-contexts: allow teleological descriptions for mechanisms that include components from several domains, such as electrical, mechanical, and hydraulic. 8 1.2.3 Design Reuse Design reuse is an area of current research in both CAE (computer aided engineering) environments (see work reported by Mostow [Mos85], Mostow and Barley [MB87], and Huhns and Acosta <ref> [HA88] </ref>) and CASE (computer aided software engineering) environments (see discussions by Biggerstaff and Richter [BR86] and Prieto-Diaz and Freeman [PF87], and collections of papers examining reuse in software engineering [IEEE88, IEEE87, IEEE84]). In each, the reuse problem can be addressed by providing: 1. <p> In this way, the operator applications (each with their respective teleological descriptions) used 151 to achieve the various subgoals of a goal g can be referenced as a group, or macro modification (see Huhns and Acosta <ref> [HA88] </ref>), by a teleological description that also references the goal g. In our blocks world example, assume that the initial state is described by onTable (C) ^ onTable (B) ^ on (A,B).
Reference: [IEEE84] <institution> IEEE Transactions on Software Engineering issue on Software Reusability, </institution> <note> Vol. SE-10, No. </note> <month> 5 (September </month> <year> 1984). </year>
Reference-contexts: in both CAE (computer aided engineering) environments (see work reported by Mostow [Mos85], Mostow and Barley [MB87], and Huhns and Acosta [HA88]) and CASE (computer aided software engineering) environments (see discussions by Biggerstaff and Richter [BR86] and Prieto-Diaz and Freeman [PF87], and collections of papers examining reuse in software engineering <ref> [IEEE88, IEEE87, IEEE84] </ref>). In each, the reuse problem can be addressed by providing: 1. Techniques for capturing and representing information by which a design component should be classified for subsequent retrieval, and 2.
Reference: [IEEE87] <editor> IEEE Software issue on Reuse Tools, </editor> <volume> Vol. 4, No. </volume> <month> 4 (July </month> <year> 1987). </year>
Reference-contexts: in both CAE (computer aided engineering) environments (see work reported by Mostow [Mos85], Mostow and Barley [MB87], and Huhns and Acosta [HA88]) and CASE (computer aided software engineering) environments (see discussions by Biggerstaff and Richter [BR86] and Prieto-Diaz and Freeman [PF87], and collections of papers examining reuse in software engineering <ref> [IEEE88, IEEE87, IEEE84] </ref>). In each, the reuse problem can be addressed by providing: 1. Techniques for capturing and representing information by which a design component should be classified for subsequent retrieval, and 2.
Reference: [IEEE88] <institution> IEEE Software issue on CASE, </institution> <note> Vol. 5, No. </note> <month> 2 (March </month> <year> 1988). </year>
Reference-contexts: in both CAE (computer aided engineering) environments (see work reported by Mostow [Mos85], Mostow and Barley [MB87], and Huhns and Acosta [HA88]) and CASE (computer aided software engineering) environments (see discussions by Biggerstaff and Richter [BR86] and Prieto-Diaz and Freeman [PF87], and collections of papers examining reuse in software engineering <ref> [IEEE88, IEEE87, IEEE84] </ref>). In each, the reuse problem can be addressed by providing: 1. Techniques for capturing and representing information by which a design component should be classified for subsequent retrieval, and 2.
Reference: [IS86a] <author> Yumi Iwasaki, Herbert A. Simon, </author> <title> "Causality in Device Behavior", </title> <booktitle> in Artificial Intelligence Vol. </booktitle> <volume> 29, No. </volume> <month> 1 (July </month> <year> 1986), </year> <pages> pp. 3-32. </pages>
Reference-contexts: The relevance of this approach to causal reasoning is debated in <ref> [IS86a, IS86b] </ref> and [dKB86]. 10.3.1 Function vs. Teleology In the EQUAL work, de Kleer uses the terms function and teleology interchangeably (": : : the function of a circuit (i.e., its purpose) : : : ", [deK85, p. 205]).
Reference: [IS86b] <author> Yumi Iwasaki, Herbert A. Simon, </author> <title> "Theories of Causal Ordering: Reply to de Kleer and Brown", </title> <booktitle> in Artificial Intelligence Vol. </booktitle> <volume> 29, No. </volume> <month> 1 (July </month> <year> 1986), </year> <pages> pp. 63-72. </pages>
Reference-contexts: The relevance of this approach to causal reasoning is debated in <ref> [IS86a, IS86b] </ref> and [dKB86]. 10.3.1 Function vs. Teleology In the EQUAL work, de Kleer uses the terms function and teleology interchangeably (": : : the function of a circuit (i.e., its purpose) : : : ", [deK85, p. 205]).
Reference: [Ked85] <author> Smadar Kedar-Cabelli, </author> <title> "Purpose-Directed Analogy", </title> <booktitle> in Proceedings of the Seventh Annual Conference of the Cognitive Science Society, 1985, </booktitle> <address> Irvine CA, </address> <pages> pp. 150-159. 63 </pages>
Reference-contexts: Teleology The REDESIGN work makes a distinction between function and purpose, where function defines the (expected) behavior at component terminals, and purpose identifies the component's role in the larger context of the behavior of the design that includes the component. 167 10.10 Purpose-Directed Analogy (Kedar-Cabelli) The purpose-directed analogy system of <ref> [Ked85] </ref> requires a representation of purpose or function of artifacts to direct the construction of analogies. In particular, these descriptions of purpose are used to identify the relevant attributes of artifacts to be used in the analogy.
Reference: [Keu91] <author> Anne M. Kueneke, </author> <title> "Device Representation", </title> <booktitle> in IEEE Expert Special Track on Functional Reasoning, </booktitle> <volume> Vol. 6, No. </volume> <month> 2 (April </month> <year> 1991), </year> <pages> pp. 22-25. </pages>
Reference-contexts: Each function definition in FR contains a ToMake clause that references a particular behavior that the FR function is supposed to achieve. Keuneke <ref> [Keu91] </ref> extends the ToMake clause of FR to include the "function types" ToMaintain, ToPrevent, and ToControl. The TeD language can formally capture the semantics of these "purposes," providing an effective means of classifying and indexing FR descriptions. <p> Consequently, TeD provides a formal language for expressing the ToMake clause and condition clauses in FR. Keuneke <ref> [Keu91] </ref> extends the ToMake clause of FR to include the "function types" ToMaintain, ToPre-vent, and ToControl. The TeD language can formally capture the semantics of these "purposes", or function types as shown in Chapters 3 and 4.
Reference: [KTY91] <author> Takashi Kiriyama, Tetsuo Tomiyama, Hiroyuki Yoshikawa, </author> <title> "Model Generation in Design", </title> <booktitle> in Working Papers for QR-91, Fifth International Workshop on Qualitative Reasoning about Physical Systems, </booktitle> <address> May 19-22, 1991, Austin, TX, </address> <pages> pp. 93-108. </pages>
Reference-contexts: Acquisition issues are discussed in Chapter 9, and indexing teleological descriptions for explanation, design reuse, and diagnosis is discussed in Chapter 8. The two examples explored here are * Input selection logic from a CMOS arithmetic logic unit (ALU) design [Ray86]. * An electric motor design <ref> [KTY91] </ref>. Both examples start with initial designs and specifications characterizing aspects of the desired behavior. The initial designs are found to be inconsistent with the design specifications, and a series of design modifications are made to make the designs meet their respective specifications. <p> Let ffi 3 represent the design modification of replacing t1 with transmission gate T m (Figure 6.23), Then ffi 3 Prevents 1 : (6.4) 6.3 Electric Motor Example The electric motor example discussed here is taken from Kiriyama, Tomiyama, and Yoshikawa <ref> [KTY91] </ref>, who give an initial design and a series 106 107 of design modifications in an investigation of model building techniques for analysis in various domains, specifically electrical, mechanical (rotation), and thermal. 6 The desired behavior of the electric motor is to translate electric current into mechanical rotation for use in <p> The top level of the hierarchical structure description (in CC) is given in Figure 6.28, for positive positions of the rotor-shaft assembly. Appendix C gives the complete motor example. 6 The larger goal discussed in <ref> [KTY91] </ref> is an intelligent CAD system expected to serve as an integrated modeling environment in which aspect models are automatically generated and their consistency are maintained.
Reference: [Kow85] <author> Thaddeus J. Kowalski, </author> <title> An Artificial Intelligence Approach to VLSI Design, 1985, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston. </address>
Reference-contexts: These languages express the purpose of adding the feedback transistor as ffi Guarantees where ffi denotes the design modification that adds the feedback transistor and denotes the specification (specification 5). 2.2 Specifications as Drivers for Design In examining human generated descriptions of purpose (cf. [HW87], <ref> [Kow85] </ref>, [McC88], [Ray86], [SS88], and [WMK89]), a common theme emerges. These descriptions relate design features (i.e., particular design decisions) to design goals (specifications).
Reference: [Kui82] <author> Benjamin J. Kuipers, </author> <title> "Getting the Envisionment Right", </title> <booktitle> in Proceedings of the Second National Conference on Artificial Intelligence, </booktitle> <pages> pp. 209-212. </pages>
Reference-contexts: structure languages proposed by Abelson and Sussman [AS85], Davis [Dav85], de Kleer and Brown [dKB85], Forbus [For85], Franke and Dvorak [FD90], Kuipers [Kui85, Kui86], Williams [Wil85], and VHDL [VHDL87]) and each has associated behavior languages and envisioning semantics (discussed by de Kleer [deK77], de Kleer and Brown [dKB82], and Kuipers <ref> [Kui82, Kui86] </ref>). The structure and behavior languages described herein abstract these existing language definitions to avoid basing the teleology language on a specific structure or behavior language and associated envisioning semantics. <p> This characterization is called an envisionment 7 <ref> [deK77, dKB82, Kui82, Kui86] </ref>. The qualitative modeling approach attempts to derive all the possible behaviors from a given set of initial states, and hence provides the capability to generate such an envisionment.
Reference: [Kui85] <author> Benjamin J. Kuipers, </author> <title> "Commonsense Reasoning about Causality: Deriving Behavior from Structure", in Qualitative Reasoning About Physical Systems, </title> <editor> Daniel G. Bobrow, ed., </editor> <publisher> The MIT Press, </publisher> <address> Cam-bridge, MA 1985, </address> <pages> pp. 169-203. </pages> <note> Reprinted from Artificial Intelligence Vol. 24, </note> <year> 1984. </year>
Reference-contexts: Design modifications (e.g., addition of a component, modification of a specific parameter value) made during the design process, and 2. Effects these changes have with respect to the design meeting its specifi cations. Consider the case of a pressure release valve on the steam boiler, described by Kuipers in <ref> [Kui85] </ref>. The steam boiler has a design specification stating that the internal pressure should not exceed some maximum value, beyond which the boiler vessel might explode. The design modification made to address this specification is the addition of a pressure activated release valve. <p> The need expressed here for languages for structure, behavior, causal, and teleology descriptions originates from Kuipers' identification of structural, behavioral, and functional descriptions <ref> [Kui85, p. 170] </ref>, where he states: The structural description consists of the individual variables that characterize the system and their interactions; it is derived from the components of the physical device and their physical connections. <p> In this chapter, we give the essential features of structure, design modification, design history, behavior, and teleology languages, with an example language for each. To demonstrate the languages and concepts, we use an idealized model of a steam boiler (the double heat flow system defined by Kuipers <ref> [Kui85, p. 175] </ref>, shown in Figure 3.1). The behaviors exhibited by the steam boiler demonstrate the qualitative description of a system reaching equilibrium. In one possible behavior, equilibrium occurs after the vessel's internal pressure has exceeded some maximum value. <p> discuss this capability further when comparing the TeD language to other work in Chapter 10. 30 3.2 Structure Many languages for representing structure have been put forth (see structure languages proposed by Abelson and Sussman [AS85], Davis [Dav85], de Kleer and Brown [dKB85], Forbus [For85], Franke and Dvorak [FD90], Kuipers <ref> [Kui85, Kui86] </ref>, Williams [Wil85], and VHDL [VHDL87]) and each has associated behavior languages and envisioning semantics (discussed by de Kleer [deK77], de Kleer and Brown [dKB82], and Kuipers [Kui82, Kui86]). <p> To demonstrate structure description, we describe the steam boiler example in the structure language CC [FD90] which uses Kuipers' Qsim <ref> [Kui85, Kui86] </ref> behavior language. 3 In this example we model temperatures, pressure and heat inside the boiler vessel, and the heat flow from the heat source to the boiler vessel to the surrounding air, a heat sink. <p> The process of envisioning produces a characterization of the (possibly infinite) set of possible behaviors of the mechanism. We describe a behavior language, adopting existing terminology of behavior descriptions (see behavior language descriptions of de Kleer and Brown [dKB85], Forbus [For85], and Kuipers <ref> [Kui85, Kui86] </ref>). For each pair of structure and behavior languages there is an envisioning semantics addressing issues such as valid transitions between variable values, valid transitions between states, and representations of time. <p> level of the structure hierarchy * Support for indexing and classification * Teleological descriptions can be acquired by automated techniques * Teleological descriptions are task independent, and can be applied to ex planation, design reuse, redesign, analogical design, case-based reasoning, and diagnosis. 10.2 Function versus Teleology As pointed by Kuipers <ref> [Kui85] </ref>, the existing literature frequently obscures the distinction between purpose and behavior by using the term function to refer to behavior. <p> case-based reasoning, and diagnosis because queries are posed in terms of the problem to be solved as opposed to the technique for solving the problem. 171 11.2 Implementation The ideas put forth in this dissertation have been implemented for the structure language CC [FD90] and the behavior language of Qsim <ref> [Kui85, Kui86] </ref>. The example designs for the steam boiler (Chapter 3), input selection circuit (Chapter 6), and electromechanical motor (Chapter 6) are represented in CC and simulated in Qsim.
Reference: [Kui86] <author> Benjamin J. Kuipers, </author> <title> "Qualitative Simulation", </title> <journal> in Artificial Intelligence, </journal> <volume> Vol. 29, No. 3, </volume> <month> (September </month> <year> 1986), </year> <pages> pp. 289-338. </pages>
Reference-contexts: discuss this capability further when comparing the TeD language to other work in Chapter 10. 30 3.2 Structure Many languages for representing structure have been put forth (see structure languages proposed by Abelson and Sussman [AS85], Davis [Dav85], de Kleer and Brown [dKB85], Forbus [For85], Franke and Dvorak [FD90], Kuipers <ref> [Kui85, Kui86] </ref>, Williams [Wil85], and VHDL [VHDL87]) and each has associated behavior languages and envisioning semantics (discussed by de Kleer [deK77], de Kleer and Brown [dKB82], and Kuipers [Kui82, Kui86]). <p> structure languages proposed by Abelson and Sussman [AS85], Davis [Dav85], de Kleer and Brown [dKB85], Forbus [For85], Franke and Dvorak [FD90], Kuipers [Kui85, Kui86], Williams [Wil85], and VHDL [VHDL87]) and each has associated behavior languages and envisioning semantics (discussed by de Kleer [deK77], de Kleer and Brown [dKB82], and Kuipers <ref> [Kui82, Kui86] </ref>). The structure and behavior languages described herein abstract these existing language definitions to avoid basing the teleology language on a specific structure or behavior language and associated envisioning semantics. <p> To demonstrate structure description, we describe the steam boiler example in the structure language CC [FD90] which uses Kuipers' Qsim <ref> [Kui85, Kui86] </ref> behavior language. 3 In this example we model temperatures, pressure and heat inside the boiler vessel, and the heat flow from the heat source to the boiler vessel to the surrounding air, a heat sink. <p> The process of envisioning produces a characterization of the (possibly infinite) set of possible behaviors of the mechanism. We describe a behavior language, adopting existing terminology of behavior descriptions (see behavior language descriptions of de Kleer and Brown [dKB85], Forbus [For85], and Kuipers <ref> [Kui85, Kui86] </ref>). For each pair of structure and behavior languages there is an envisioning semantics addressing issues such as valid transitions between variable values, valid transitions between states, and representations of time. <p> This characterization is called an envisionment 7 <ref> [deK77, dKB82, Kui82, Kui86] </ref>. The qualitative modeling approach attempts to derive all the possible behaviors from a given set of initial states, and hence provides the capability to generate such an envisionment. <p> case-based reasoning, and diagnosis because queries are posed in terms of the problem to be solved as opposed to the technique for solving the problem. 171 11.2 Implementation The ideas put forth in this dissertation have been implemented for the structure language CC [FD90] and the behavior language of Qsim <ref> [Kui85, Kui86] </ref>. The example designs for the steam boiler (Chapter 3), input selection circuit (Chapter 6), and electromechanical motor (Chapter 6) are represented in CC and simulated in Qsim.
Reference: [Kui87] <author> Benjamin J. Kuipers, </author> <title> "Qualitative Simulation as Causal Explanation", </title> <journal> in IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> Vol. SMC-17, No. 3 (May/June 1987), </volume> <pages> pp. 432-444. </pages>
Reference-contexts: domain of VLSI circuits, the role of information regarding the purpose of a circuit element is very similar in the problem-solving tasks of design and diagnosis. 1.2.1 Diagnosis Deriving and utilizing causal relationships is an approach currently used in explanation systems (e.g., Bylander and Chandrasekaran [BC85], Doyle [Doy86], and Kuipers <ref> [Kui87] </ref>) and diagnosis systems (e.g., Cantone et al. [CLMG85], Davis [Dav85], De Jong [DeJ85], Genesereth [Gen85], Milne [Mil85], Sembugamoorthy and Chandrasekaran [SC85], Steinberg and Mitchell [SM84], and White and Frederiksen [WF85]). <p> See [FD90] for details of the CC flattening procedure. 6 Modeling techniques such as time-scale abstraction <ref> [Kui87] </ref> may have lower abstraction levels which are effectively instantaneous from the point of view of the current model, and hence can be described by variables of the current abstraction level. 40 3.5.1 Single Behaviors Two states s 1 and s 2 are said to be adjacent states if for each
Reference: [Kui87] <author> Benjamin J. Kuipers, </author> <title> "Abstraction by Time-Scale in Qualitative Simulation", </title> <booktitle> in Proceedings of the Sixth National Conference on Artificial Intelligence, </booktitle> <address> Seattle, </address> <month> July </month> <year> 1987, </year> <pages> pp. 621-625. 64 </pages>
Reference-contexts: domain of VLSI circuits, the role of information regarding the purpose of a circuit element is very similar in the problem-solving tasks of design and diagnosis. 1.2.1 Diagnosis Deriving and utilizing causal relationships is an approach currently used in explanation systems (e.g., Bylander and Chandrasekaran [BC85], Doyle [Doy86], and Kuipers <ref> [Kui87] </ref>) and diagnosis systems (e.g., Cantone et al. [CLMG85], Davis [Dav85], De Jong [DeJ85], Genesereth [Gen85], Milne [Mil85], Sembugamoorthy and Chandrasekaran [SC85], Steinberg and Mitchell [SM84], and White and Frederiksen [WF85]). <p> See [FD90] for details of the CC flattening procedure. 6 Modeling techniques such as time-scale abstraction <ref> [Kui87] </ref> may have lower abstraction levels which are effectively instantaneous from the point of view of the current model, and hence can be described by variables of the current abstraction level. 40 3.5.1 Single Behaviors Two states s 1 and s 2 are said to be adjacent states if for each
Reference: [Kui89a] <author> Benjamin J. Kuipers, </author> <title> "Qualitative Reasoning: Modeling and Simulation with Incomplete Knowledge", </title> <journal> Automatica, </journal> <volume> Vol 25, No. 4 (1989), </volume> <pages> pp. 571-585. </pages>
Reference-contexts: The choice of Qsim 147 allows strong statements about guarantees of the presence or absence of particular behaviors since Qsim guarantees that all possible behaviors of the model appear in the Qsim generated behavior tree <ref> [Kui89a] </ref>. To evaluate a design, we compare each behavior with the scenario to determine the truth value of the specification predicate occursIn (,b).
Reference: [Kui89b] <author> Benjamin Kuipers, </author> <title> "Generic Mechanisms". </title>
Reference-contexts: While the structure language described here supports these themes, it allows structure ontologies other than one component per physical object. For example, the ontological elements might be processes [For85] or generic mechanisms <ref> [Kui89b] </ref> with descriptions of purpose associated with these elements. At the appropriate level of abstraction, a design description may consist of processes or generic mechanisms as opposed to physical components. Structure languages used here describe models (designs) hierarchically composed from simpler models called components [AS85, dKB85].
Reference: [MC80] <author> Carver Mead, Lynn Conway, </author> <title> Introduction to VLSI Systems, </title> <publisher> Addison-Wesley Publishing, </publisher> <address> Reading Mass., </address> <year> 1980. </year>
Reference-contexts: std) (ISC t1 Cg) = (Cg* std) The operating characteristics of t1 (an n-channel MOS transistor) are such that when the signal data has value Vhi and the signal ctl has the value Vhi, the value transmitted to signal in is Vhi minus the threshold value (&gt; 0) of t1 <ref> [MC80] </ref>. Landmark VhiVtp represents the value Vhi minus the threshold value of t1. The landmark VhiVtp is between the landmark 0 and Vhi, and hence not a desired value for signal in.
Reference: [MBR89] <institution> Proceedings of the 1989 Workshop on Model-Based Reasoning. </institution>
Reference-contexts: Davis and Hamscher's discussion of model-based troubleshooting [DH88] and the proceedings of the model-based reasoning workshops <ref> [MBR89, MBR90, MBR91] </ref>).
Reference: [MBR90] <institution> Proceedings of the 1990 Workshop on Model-Based Reasoning. </institution>
Reference-contexts: Davis and Hamscher's discussion of model-based troubleshooting [DH88] and the proceedings of the model-based reasoning workshops <ref> [MBR89, MBR90, MBR91] </ref>).
Reference: [MBR91] <institution> Proceedings of the 1991 Workshop on Model-Based Reasoning. </institution>
Reference-contexts: Davis and Hamscher's discussion of model-based troubleshooting [DH88] and the proceedings of the model-based reasoning workshops <ref> [MBR89, MBR90, MBR91] </ref>).
Reference: [McC88] <author> Anna Marguerite McCann, </author> <title> "The Roman Port of Cosa", </title> <journal> in Scientific American, </journal> <volume> Vol. 258, No. 3, </volume> <month> (March </month> <year> 1988), </year> <pages> pp. 102-109. </pages>
Reference-contexts: These languages express the purpose of adding the feedback transistor as ffi Guarantees where ffi denotes the design modification that adds the feedback transistor and denotes the specification (specification 5). 2.2 Specifications as Drivers for Design In examining human generated descriptions of purpose (cf. [HW87], [Kow85], <ref> [McC88] </ref>, [Ray86], [SS88], and [WMK89]), a common theme emerges. These descriptions relate design features (i.e., particular design decisions) to design goals (specifications).
Reference: [Mil85] <author> Robert Milne, </author> <title> "A Theory of Responsibilities", in SIGART Newsletter, Special Section on Reasoning About Structure, Behavior, and Function, </title> <editor> B. Chandrasekaran, Robert Milne eds., </editor> <volume> No. </volume> <month> 93 (July </month> <year> 1985), </year> <pages> pp. 25-29. </pages>
Reference-contexts: similar in the problem-solving tasks of design and diagnosis. 1.2.1 Diagnosis Deriving and utilizing causal relationships is an approach currently used in explanation systems (e.g., Bylander and Chandrasekaran [BC85], Doyle [Doy86], and Kuipers [Kui87]) and diagnosis systems (e.g., Cantone et al. [CLMG85], Davis [Dav85], De Jong [DeJ85], Genesereth [Gen85], Milne <ref> [Mil85] </ref>, Sembugamoorthy and Chandrasekaran [SC85], Steinberg and Mitchell [SM84], and White and Frederiksen [WF85]). However, in mechanisms with highly interconnected structure or feedback loops, causal relationships can exist between virtually every pair of components of the mechanism (and between variables of a mechanism model). <p> Representing purpose in design systems is addressed in Steinberg and Mitchell's REDESIGN system [SM84], and an approach to diagnosis called the theory of responsibilities has been developed by 14 Milne <ref> [Mil85] </ref>. <p> REDESIGN expresses teleological descriptions as "rules that embody [...] general knowledge about circuit design tactics." These rules spec 15 ify decomposition steps for realizing a design in available components, and are captured independently of the design process and added to the design system as domain specific knowledge. Milne <ref> [Mil85] </ref> describes an approach to automated troubleshooting called the theory of responsibilities. Responsibilities relate a particular component of a design to a desired output (behavior). <p> Representing purpose in design systems is addressed in the REDESIGN system [SM84] and an approach to diagnosis called the theory of responsibilities has been developed by Milne <ref> [Mil85] </ref>. We compare the work described in this dissertation to these systems and approaches, and we point out where the TeD language has extended previous capabilities and how TeD represents the descriptions used in previous work. <p> Teleology As is obvious from the definition of FR ontological elements, function in FR describes a desired behavior via the ToMake clause and condition clauses, and also references a causal description (the FR behavior) of how the FR function (behavior) is achieved. 10.5 Responsibilities (Milne) <ref> [Mil85] </ref> describes an approach to automated troubleshooting called the theory of responsibilities.
Reference: [Moo89] <author> Raymond Mooney, </author> <title> private communication. </title>
Reference-contexts: The example of a spark plug's purpose in an automobile, suggested by Mooney <ref> [Moo89] </ref>, best demonstrates this issue.
Reference: [Mos85] <author> Jack Mostow, </author> <title> "Towards a Better Model of the Design Process", </title> <journal> in AI Magazine, </journal> <volume> Vol. 6, No. </volume> <month> 1 (Spring </month> <year> 1985), </year> <pages> pp. 44-57. </pages>
Reference-contexts: Certainly, teleological descriptions would not introduce any relationship not discovered via causal analysis, as purpose necessarily requires causality. Hence, teleological descriptions can provide a more productive initial focus of attention for diagnosis. 1.2.2 Design Mostow <ref> [Mos85] </ref> discusses the potential for improving the design process through capture and representation of design rationale. <p> of any particular domain of mechanisms, the language will allow teleological descriptions for mechanisms that include components from several domains, such as electrical, mechanical, and hydraulic. 8 1.2.3 Design Reuse Design reuse is an area of current research in both CAE (computer aided engineering) environments (see work reported by Mostow <ref> [Mos85] </ref>, Mostow and Barley [MB87], and Huhns and Acosta [HA88]) and CASE (computer aided software engineering) environments (see discussions by Biggerstaff and Richter [BR86] and Prieto-Diaz and Freeman [PF87], and collections of papers examining reuse in software engineering [IEEE88, IEEE87, IEEE84]).
Reference: [MB87] <author> Jack Mostow, Mike Barley, </author> <title> "Automated Reuse of Design Plans", </title> <booktitle> in Proceedings of the International Conference on Engineering Design, August 1987, </booktitle> <address> Boston, MA, </address> <pages> pp. 632-647. 65 </pages>
Reference-contexts: of mechanisms, the language will allow teleological descriptions for mechanisms that include components from several domains, such as electrical, mechanical, and hydraulic. 8 1.2.3 Design Reuse Design reuse is an area of current research in both CAE (computer aided engineering) environments (see work reported by Mostow [Mos85], Mostow and Barley <ref> [MB87] </ref>, and Huhns and Acosta [HA88]) and CASE (computer aided software engineering) environments (see discussions by Biggerstaff and Richter [BR86] and Prieto-Diaz and Freeman [PF87], and collections of papers examining reuse in software engineering [IEEE88, IEEE87, IEEE84]). In each, the reuse problem can be addressed by providing: 1. <p> Techniques for capturing and representing information by which a design component should be classified for subsequent retrieval, and 2. A language for describing the characteristics of the design component the designer wishes to examine as a candidate for reuse. As stated by Mostow and Barley <ref> [MB87] </ref> in discussing reuse of design plans, For design by analogy, finding a suitable design to retrieve from a repository of previous designs requires knowing where to look.
Reference: [Mosz85] <author> Ben Moszkowski, </author> <title> "A Temporal Logic for Multilevel Reasoning about Hardware", </title> <booktitle> in Computer, </booktitle> <volume> Vol. 18, No. </volume> <month> 5 (February </month> <year> 1985), </year> <pages> pp. 10-19. </pages>
Reference-contexts: For purposes involving temporal relationships, one representation approach for specification predicates is temporal logic, such as those described by Chandra and Misra [CM88], Emerson (CTL fl ) [ES85], Moszkowski <ref> [Mosz85] </ref>, and Turner [Tur84] (temporal logics of McDermott, Allen, and Halpern, Manna, and Moszkowski). We give thirteen definitions limited to expressions involving scenarios ( i ) and the specification predicate occursIn ( i ,b). The first two operators describe the manner in which two scenarios may be related in time.
Reference: [NJA91] <author> P. Pandurang Nayak, Leo Joskowicz, Sanjaya Addanki, </author> <title> "Automated Model Selection using Context-Dependent Behaviors", </title> <booktitle> in Working Papers for QR-91, Fifth International Workshop on Qualitative Reasoning about Physical Systems, </booktitle> <address> May 19-22, 1991, Austin, TX, </address> <pages> pp. 10-24. </pages>
Reference-contexts: replacing an element (e.g., component name) with a generalization of that component. 3 For example, in the domain of electronic circuits, a two input AND gate and a three input AND gate can be 3 For example, see the model hierarchy based on behavior described by Nayak, Joskowicz, and Addanki <ref> [NJA91] </ref>. 62 generalized to n-input AND gate. Similarly, a two input OR and a three input OR gate are generalized to n-input OR, and n-input AND and n-input OR can be generalized to n-input Boolean gate, as shown in Figure 4.1.
Reference: [Nil80] <author> Nils J. Nilsson, </author> <booktitle> Principles of Artificial Intelligence, </booktitle> <publisher> Tioga, </publisher> <address> Palo Alto, CA, </address> <year> 1980. </year>
Reference-contexts: Consequently, a teleological description will associate a modification with a specification of the "nearest" structural parent (hierarchically) within which the modification is made. 9.4 Planning Planning systems (cf. Cohen and Feigenbaum [CF82], Nilsson <ref> [Nil80] </ref>) including linear planning, nonlinear planning (cf. Fikes, Nilsson [FN71], and Hart [FHN72]), and hierarchical planning (cf. Sacerdoti [Sac74, Sac77]) provide additional examples of initial and evolved specifications in design. Planning systems attempt to achieve some goal state, given an initial state and a set of operators on states.
Reference: [Pol73] <author> George Polya, </author> <title> How To Solve It: A New Aspect of Mathematical Method, Second Edition, </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1973. </year>
Reference-contexts: A more fundamental reason for this observation is that much of what has been formalized here is understood and practiced intuitively by designers. This type of contribution is noted by Polya <ref> [Pol73, p. 57] </ref> when he quotes the nineteenth century mathematician Bernard Bolanzo: I do not think at all that I am able to present here any procedure of investigation that was not perceived long ago by all men of talent; and I do not promise at all that you will find
Reference: [PF87] <author> Ruben Prieto-Diaz, Peter Freeman, </author> <title> "Classifying Software for Reusability", </title> <journal> in IEEE Software, </journal> <volume> Vol. 4, No. </volume> <month> 1 (January </month> <year> 1987), </year> <pages> pp. 6-16. </pages>
Reference-contexts: Design Reuse Design reuse is an area of current research in both CAE (computer aided engineering) environments (see work reported by Mostow [Mos85], Mostow and Barley [MB87], and Huhns and Acosta [HA88]) and CASE (computer aided software engineering) environments (see discussions by Biggerstaff and Richter [BR86] and Prieto-Diaz and Freeman <ref> [PF87] </ref>, and collections of papers examining reuse in software engineering [IEEE88, IEEE87, IEEE84]). In each, the reuse problem can be addressed by providing: 1. Techniques for capturing and representing information by which a design component should be classified for subsequent retrieval, and 2.
Reference: [Ray86] <author> Joe Raymond, </author> <title> private communication. </title>
Reference-contexts: These languages express the purpose of adding the feedback transistor as ffi Guarantees where ffi denotes the design modification that adds the feedback transistor and denotes the specification (specification 5). 2.2 Specifications as Drivers for Design In examining human generated descriptions of purpose (cf. [HW87], [Kow85], [McC88], <ref> [Ray86] </ref>, [SS88], and [WMK89]), a common theme emerges. These descriptions relate design features (i.e., particular design decisions) to design goals (specifications). <p> Acquisition issues are discussed in Chapter 9, and indexing teleological descriptions for explanation, design reuse, and diagnosis is discussed in Chapter 8. The two examples explored here are * Input selection logic from a CMOS arithmetic logic unit (ALU) design <ref> [Ray86] </ref>. * An electric motor design [KTY91]. Both examples start with initial designs and specifications characterizing aspects of the desired behavior. The initial designs are found to be inconsistent with the design specifications, and a series of design modifications are made to make the designs meet their respective specifications.
Reference: [RS84] <author> Charles Rich, Howard E. Shrobe, </author> <title> "Initial Report on a LISP Programmer's Apprentice", in Interactive Programming Environments, </title> <editor> D. Barstow, H. Shrobe, E. Sandewall (eds.), McGraw-Hiull, </editor> <address> New York, </address> <year> 1984, </year> <pages> pp. 443-463. </pages> <note> Reprinted from IEEE Transactions on Software Engineering, Vol. SE-4, No. </note> <month> 6 (November </month> <year> 1978), </year> <pages> pp. 456-467. </pages>
Reference-contexts: CAE (computer aided engineering) systems support design methodologies in which capture of teleological information can be included, these systems do not explicitly represent a methodology and hence do not reason about or with the methodology. 3 However, support of development and verification methodology has been researched (e.g., the Programmer's Apprentice <ref> [RS84, Wat84] </ref>), and Fiduk et al. [FKKP90] describe 3 Systems currently provide a suite of tools, and the designers themselves are responsible for applying the appropriate tool to the appropriate data, in the correct sequence. 23 current research in explicitly representing methodologies and reasoning about design activity with respect to methodologies. <p> The designer or design team elaborates the design specifications based on past knowledge of such designs and on the initial functional and structural decompositions of the design (see discussions by Alford [Alf82] and Rich and Shrobe <ref> [RS84] </ref>).
Reference: [RS89] <author> Christopher K. Riesbeck, Roger C. Schank, </author> <title> "Case-Based Reasoning: An Overview", in Inside Case-Based Reasoning, </title> <publisher> Lawrence Erlbaum, </publisher> <address> Hillsdale, NJ, </address> <year> 1989. </year> <month> 66 </month>
Reference-contexts: As Riesbeck and Schank state in <ref> [RS89] </ref>, "A case-based reasoner: * finds those cases in memory that solved problems similar to the current problem, and 129 * adapts the previous solution or solutions to fit the current problem, taking into account any difference between the current and previous situations." Riesbeck and Schank [RS89] also point out that <p> and Schank state in <ref> [RS89] </ref>, "A case-based reasoner: * finds those cases in memory that solved problems similar to the current problem, and 129 * adapts the previous solution or solutions to fit the current problem, taking into account any difference between the current and previous situations." Riesbeck and Schank [RS89] also point out that "Finding the relevant cases involves: * characterizing the input problem by assigning the appropriate features, and * retrieving the cases from memory with those features." The behavior and teleological description languages provide a means for characterizing the (input) problem, namely what (behavior) specification is of interest, <p> This is particularly true for systems that rely on a database (knowledge base) of examples, such as analogical reasoning systems [Hel88], design support systems, and case-based reasoning systems <ref> [RS89] </ref>. Once captured, an effective indexing technique for classifying and retrieving this knowledge is required. The semantics and form of teleological descriptions developed in this research provide a means for addressing the acquisition problem in the context of the design process model of Figure 1.2.
Reference: [RK83] <author> Ronald C. Rosenberg, Dean C. Karnopp, </author> <title> Introduction to Physical System Dynamics, </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: Variable type can be generalized via the generic variable types in bond graph modeling, described by Rosenberg and Karnopp <ref> [RK83] </ref>. Domain specific types such as voltage and current (electrical domain) can be generalized to effort and flow, respectively. The most general type is designated &gt;, (read "top").
Reference: [Sac74] <author> Earl D. Sacerdoti, </author> <title> "Planning in a Hierarchy of Abstraction Spaces", </title> <journal> in Artificial Intelligence, </journal> <volume> Vol. 5 (1974), </volume> <pages> pp. 115-135. </pages>
Reference-contexts: Cohen and Feigenbaum [CF82], Nilsson [Nil80]) including linear planning, nonlinear planning (cf. Fikes, Nilsson [FN71], and Hart [FHN72]), and hierarchical planning (cf. Sacerdoti <ref> [Sac74, Sac77] </ref>) provide additional examples of initial and evolved specifications in design. Planning systems attempt to achieve some goal state, given an initial state and a set of operators on states. An example planning domain is robot manipulation, a 150 simple characterization of which is the blocks world.
Reference: [Sac77] <author> Earl D. Sacerdoti, </author> <title> A Structure for Plans and Behavior, </title> <publisher> Elsevier, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: Cohen and Feigenbaum [CF82], Nilsson [Nil80]) including linear planning, nonlinear planning (cf. Fikes, Nilsson [FN71], and Hart [FHN72]), and hierarchical planning (cf. Sacerdoti <ref> [Sac74, Sac77] </ref>) provide additional examples of initial and evolved specifications in design. Planning systems attempt to achieve some goal state, given an initial state and a set of operators on states. An example planning domain is robot manipulation, a 150 simple characterization of which is the blocks world.
Reference: [SJD85] <author> Ethan A. Scarl, John R. Jamieson, Carl I. Delaune, </author> <title> "Process Monitoring and Fault Location at the Kennedy Space Center", in SIGART Newsletter, Special Section on Reasoning About Structure, Behavior, and Function, </title> <editor> B. Chandrasekaran, Robert Milne eds., </editor> <volume> No. </volume> <month> 93 (July </month> <year> 1985), </year> <pages> pp. 38-44. </pages>
Reference-contexts: The need for representing and expressing the purpose of a particular command or command sequence is identified for the LOX Expert System (LES) <ref> [SJD85] </ref>, both for human consumption and for analysis by automated systems. The ability to express such explanations implies their use not only by humans but also by systems that automate problem-solving tasks.
Reference: [Sch91] <author> Roger C. </author> <title> Schank, </title> <journal> "Where's the AI", in AI Magazine. </journal> <volume> Vol. 12, No. </volume> <month> 4 (Winter </month> <year> 1991), </year> <pages> pp. 38-49. </pages>
Reference-contexts: We believe that this is an important endeavor for artificial intelligence, as Schank points out more generally: : : : the AI [is] also in collecting the actual experiences of the experts and indexing them so that reminding and, hence, learning [can] take place. <ref> [Sch91, p. 45] </ref> The crux of AI is in the representation of [this] knowledge, the content-based indexing of [this] knowledge, and the adaptation and modification of this knowledge through the exercise of this knowl edge. [Sch91, p. 47] This work has addressed the first two points here, namely the representation of <p> of the experts and indexing them so that reminding and, hence, learning [can] take place. [Sch91, p. 45] The crux of AI is in the representation of [this] knowledge, the content-based indexing of [this] knowledge, and the adaptation and modification of this knowledge through the exercise of this knowl edge. <ref> [Sch91, p. 47] </ref> This work has addressed the first two points here, namely the representation of teleological descriptions (knowledge) and the content-based indexing of this knowledge. The claims laid out in Chapter 1 for this work were: 1.
Reference: [SC85] <author> V. Sembugamoorthy, B. Chandrasekaran, </author> <title> "Functional Representation of Devices as Deep Models", in SIGART Newsletter, Special Section on Reasoning About Structure, Behavior, and Function, </title> <editor> B. Chandrasekaran, Robert Milne eds., </editor> <volume> No. </volume> <month> 93 (July </month> <year> 1985), </year> <pages> pp. 21-22. </pages>
Reference-contexts: tasks of design and diagnosis. 1.2.1 Diagnosis Deriving and utilizing causal relationships is an approach currently used in explanation systems (e.g., Bylander and Chandrasekaran [BC85], Doyle [Doy86], and Kuipers [Kui87]) and diagnosis systems (e.g., Cantone et al. [CLMG85], Davis [Dav85], De Jong [DeJ85], Genesereth [Gen85], Milne [Mil85], Sembugamoorthy and Chandrasekaran <ref> [SC85] </ref>, Steinberg and Mitchell [SM84], and White and Frederiksen [WF85]). However, in mechanisms with highly interconnected structure or feedback loops, causal relationships can exist between virtually every pair of components of the mechanism (and between variables of a mechanism model). <p> Detailed comparison of the work described in this dissertation (i.e., the Teleological Description (TeD) language) with previous research appears in Chapter 10. The two most significant contributions discussed in the literature are de Kleer's EQUAL system [deK85] and the Functional Representation <ref> [SC85] </ref> work at Ohio State University. Representing purpose in design systems is addressed in Steinberg and Mitchell's REDESIGN system [SM84], and an approach to diagnosis called the theory of responsibilities has been developed by 14 Milne [Mil85]. <p> Limitations of this approach are that teleological descriptions are prescribed, domain specific, and limited to describing relationships among variables of a single component. Functional representation (FR) described by Sembugamoorthy, Chan-drasekaran <ref> [SC85] </ref>, Goel [Goe89], Sticklen, and Bond [SCB89] and functional modeling (FM) described by Sticklen et al. [ST90, SKB90] address 1) representing "how a device functions" and 2) applying this information to explanation, diagnosis, and design. <p> This is most easily demonstrated in a stimulus-response specification of behavior: "When set of conditions (state) A occurs, the mechanism should bring about condition set (state) B, possibly within a specified time constraint." This is the essence of the ToMake clause of functional representation described by Sembugamoorthy and Chandrasekaran <ref> [SC85] </ref>, namely "given an initial set of conditions, the purpose is to bring about (ToMake) some other set of conditions." As a formal basis we have defined the teleological operator in terms of the operators of modal logic [Tur84, Che80]. <p> The two most significant contributions discussed in the literature are de Kleer's EQUAL system [deK85] and the Functional Representation <ref> [SC85] </ref> work at Ohio State University. More recent efforts in representing purpose have been undertaken by the Conservation of Design Knowledge (CDK) Project [BSZ89] at NASA Ames Research Center and in Gruber's ASK system [Gru91], and in medical reasoning research in Downing's BIOTIC system [Dow90]. <p> Because the teleological descriptions of a component are defined in terms of the behaviors observed at the component terminals, teleological descriptions in EQUAL will necessarily map one-to-one to these behaviors. 10.4 Functional Representation, Functional Modeling The functional representation (FR) <ref> [SC85, Goe89, SCB89] </ref> and functional modeling (FM) [ST90, SKB90] address 1) representing "how a device functions" and 2) applying this information to explanation, diagnosis, and design. <p> The functional representation expresses functional knowledge at multiple levels of abstraction in the following ontology <ref> [SC85] </ref>: * Structure relationships among components and abstractions of compo nents * Function the response (what we call behavior) of the component to ex ternal or internal stimuli 159 FUNCTIONS: buzz: TOMAKE buzzing (buzzer) IF pressed (manual-switch)* PROVIDED assumption1 BY behavior1 : : : END FUNCTIONS * Behavior how a device
Reference: [SS88] <author> Lawrence K. Shapiro, Howard I. Shapiro, </author> <title> "Construction Cranes", </title> <journal> in Scientific American, </journal> <volume> Vol. 258, No. 3, </volume> <month> (March </month> <year> 1988), </year> <pages> pp. 72-79. </pages>
Reference-contexts: These languages express the purpose of adding the feedback transistor as ffi Guarantees where ffi denotes the design modification that adds the feedback transistor and denotes the specification (specification 5). 2.2 Specifications as Drivers for Design In examining human generated descriptions of purpose (cf. [HW87], [Kow85], [McC88], [Ray86], <ref> [SS88] </ref>, and [WMK89]), a common theme emerges. These descriptions relate design features (i.e., particular design decisions) to design goals (specifications).
Reference: [Sim81] <author> Herbert A. Simon, </author> <booktitle> Sciences of the Artificial, Second Edition, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1981. </year>
Reference-contexts: The engineer, and more generally the designer, is concerned with how things ought to be how they ought to be in order to attain goals, and to function. <ref> [Sim81, p. 7] </ref> Design specifications are described in terms of behavioral (dynamic) characteristics, such as the desired range for the operating temperature of a steam boiler, and physical (static) characteristics, such as dimensions or weight of the desired artifact. <p> An important fact about this kind of explanation is that it demands an understanding mainly of the outer environment. : : : In this manner, the properties with which the inner environment has been endowed are placed at the service of the goals in the context of the outer environment. <ref> [Sim81, p. 11,15] </ref> Clearly, structure descriptions make sense independent of the context of the enclosing system, since the structure of each component is described independent of any specific enclosing system. <p> Simon char acterizes an ontology for purpose as follows: Fulfillment of purpose or adaptation to a goal involves a relation among three terms: the purpose or goal, the character of the artifact, and the environment in which the artifact performs. <ref> [Sim81, p. 8] </ref> The ontological elements of the teleology language TeD are: * Design specifications (desired static and dynamic characteristics) * Design descriptions (structure, behavior) * Design modifications The ontological elements identified by Simon are realized in TeD as follows: * Purpose or goal Design specifications 1 The ontology identifies the
Reference: [SM84] <author> Louis I. Steinberg, Tom M. Mitchell, </author> <title> "A Knowledge Based Approach to VLSI CAD: The REDESIGN System", </title> <booktitle> in Proceedings of the 21 st Design Automation Conference, </booktitle> <year> 1984, </year> <pages> pp. 412-418. 67 </pages>
Reference-contexts: The task 6 domains of diagnosis and design are two domains that can utilize teleological descriptions to extend the applicability and performance of automated problem-solving systems. Steinberg and Mitchell <ref> [SM84] </ref> point out that in the domain of VLSI circuits, the role of information regarding the purpose of a circuit element is very similar in the problem-solving tasks of design and diagnosis. 1.2.1 Diagnosis Deriving and utilizing causal relationships is an approach currently used in explanation systems (e.g., Bylander and Chandrasekaran <p> diagnosis. 1.2.1 Diagnosis Deriving and utilizing causal relationships is an approach currently used in explanation systems (e.g., Bylander and Chandrasekaran [BC85], Doyle [Doy86], and Kuipers [Kui87]) and diagnosis systems (e.g., Cantone et al. [CLMG85], Davis [Dav85], De Jong [DeJ85], Genesereth [Gen85], Milne [Mil85], Sembugamoorthy and Chandrasekaran [SC85], Steinberg and Mitchell <ref> [SM84] </ref>, and White and Frederiksen [WF85]). However, in mechanisms with highly interconnected structure or feedback loops, causal relationships can exist between virtually every pair of components of the mechanism (and between variables of a mechanism model). As stated by Steinberg and Mitchell [SM84], The resulting focus (of causal reasoning) is generally <p> [Mil85], Sembugamoorthy and Chandrasekaran [SC85], Steinberg and Mitchell <ref> [SM84] </ref>, and White and Frederiksen [WF85]). However, in mechanisms with highly interconnected structure or feedback loops, causal relationships can exist between virtually every pair of components of the mechanism (and between variables of a mechanism model). As stated by Steinberg and Mitchell [SM84], The resulting focus (of causal reasoning) is generally broader than that determined from [the representation of purpose] because out of the many places in the circuit that can impact any given output specification, only a small proportion of these involve circuitry whose main purpose is to implement that specification. <p> Teleological descriptions also help the designer understand the original purpose of components in the mechanism design. For example, a particular component may have been selected for certain static properties like size, as well as the behavioral consequences of the component. Steinberg and Mitchell's REDESIGN system <ref> [SM84] </ref> applies both causal reasoning and reasoning about purpose to accomplish the redesign of a circuit based on changes in the specification for the circuit. <p> The two most significant contributions discussed in the literature are de Kleer's EQUAL system [deK85] and the Functional Representation [SC85] work at Ohio State University. Representing purpose in design systems is addressed in Steinberg and Mitchell's REDESIGN system <ref> [SM84] </ref>, and an approach to diagnosis called the theory of responsibilities has been developed by 14 Milne [Mil85]. <p> Keuneke [Keu91] extends the ToMake clause of FR to include the "function types" ToMaintain, ToPrevent, and ToControl. The TeD language can formally capture the semantics of these "purposes," providing an effective means of classifying and indexing FR descriptions. Steinberg and Mitchell's REDESIGN system <ref> [SM84] </ref> utilizes representations of purpose to focus the selection of candidate components for the redesign task. <p> First, as a specification is changed, any design modifications and components with teleological descriptions that reference the specification (e.g., required or prohibited behavior) are primary candidates for modification to meet the new specifications. Similar approaches to redesign are design plans (Steinberg and Mitchell <ref> [SM84] </ref>) and functional representations (Goel and Chandrasekaran [Goe89]). <p> Representing purpose in design systems is addressed in the REDESIGN system <ref> [SM84] </ref> and an approach to diagnosis called the theory of responsibilities has been developed by Milne [Mil85]. <p> The contribution of TeD is a formal language for representing teleological descriptions (ASK explanations) and the associated indexing capabilities provided by the language. The TeD representation also supports more automated acquisition of teleological descriptions during design. 10.9 REDESIGN (Steinberg, Mitchell) The REDESIGN system <ref> [SM84] </ref> utilizes representations of purpose to focus the selection of candidate components for the redesign task. These teleological descriptions occur in a design plan, which "is characterized in terms of implementation rules that embody [...] general knowledge about circuit design tactics".
Reference: [SCB89] <author> Jon Sticklen, B. Chandrasekaran, W. E. Bond, </author> <title> "Applying a Functional Approach for Model-Based Reasoning", </title> <booktitle> in Proceedings of the 1989 Workshop on Model-Based Reasoning, </booktitle> <address> Detroit, </address> <month> August 20, </month> <year> 1989, </year> <pages> pp. 165-176. </pages>
Reference-contexts: Limitations of this approach are that teleological descriptions are prescribed, domain specific, and limited to describing relationships among variables of a single component. Functional representation (FR) described by Sembugamoorthy, Chan-drasekaran [SC85], Goel [Goe89], Sticklen, and Bond <ref> [SCB89] </ref> and functional modeling (FM) described by Sticklen et al. [ST90, SKB90] address 1) representing "how a device functions" and 2) applying this information to explanation, diagnosis, and design. <p> Because the teleological descriptions of a component are defined in terms of the behaviors observed at the component terminals, teleological descriptions in EQUAL will necessarily map one-to-one to these behaviors. 10.4 Functional Representation, Functional Modeling The functional representation (FR) <ref> [SC85, Goe89, SCB89] </ref> and functional modeling (FM) [ST90, SKB90] address 1) representing "how a device functions" and 2) applying this information to explanation, diagnosis, and design.
Reference: [ST90] <author> Jon Sticklen, Rula Tufankji, </author> <title> "Utilizing a Functional Approach for Modeling Biological Systems", </title> <institution> AI/KBS Laboratory Report 1990:#2, Department of Computer Science, Michigan State University, </institution> <year> 1990. </year>
Reference-contexts: Limitations of this approach are that teleological descriptions are prescribed, domain specific, and limited to describing relationships among variables of a single component. Functional representation (FR) described by Sembugamoorthy, Chan-drasekaran [SC85], Goel [Goe89], Sticklen, and Bond [SCB89] and functional modeling (FM) described by Sticklen et al. <ref> [ST90, SKB90] </ref> address 1) representing "how a device functions" and 2) applying this information to explanation, diagnosis, and design. Each function definition in FR contains a ToMake clause that references a particular behavior that the FR function is supposed to achieve. <p> Because the teleological descriptions of a component are defined in terms of the behaviors observed at the component terminals, teleological descriptions in EQUAL will necessarily map one-to-one to these behaviors. 10.4 Functional Representation, Functional Modeling The functional representation (FR) [SC85, Goe89, SCB89] and functional modeling (FM) <ref> [ST90, SKB90] </ref> address 1) representing "how a device functions" and 2) applying this information to explanation, diagnosis, and design.
Reference: [SKB90] <author> Jon Sticklen, Ahmed Kamel, W. E. Bond, </author> <title> "A Model-Based Approach for Organizing Quantitative Computations", </title> <institution> AI/KBS Laboratory Report 1990:#3, Department of Computer Science, Michigan State University, </institution> <year> 1990. </year>
Reference-contexts: Limitations of this approach are that teleological descriptions are prescribed, domain specific, and limited to describing relationships among variables of a single component. Functional representation (FR) described by Sembugamoorthy, Chan-drasekaran [SC85], Goel [Goe89], Sticklen, and Bond [SCB89] and functional modeling (FM) described by Sticklen et al. <ref> [ST90, SKB90] </ref> address 1) representing "how a device functions" and 2) applying this information to explanation, diagnosis, and design. Each function definition in FR contains a ToMake clause that references a particular behavior that the FR function is supposed to achieve. <p> Because the teleological descriptions of a component are defined in terms of the behaviors observed at the component terminals, teleological descriptions in EQUAL will necessarily map one-to-one to these behaviors. 10.4 Functional Representation, Functional Modeling The functional representation (FR) [SC85, Goe89, SCB89] and functional modeling (FM) <ref> [ST90, SKB90] </ref> address 1) representing "how a device functions" and 2) applying this information to explanation, diagnosis, and design.
Reference: [Sto77] <author> Joseph E. Stoy, </author> <title> Denotational Semantics: The Scott-Strachey Approach to Programming Language Theory, </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1977. </year>
Reference-contexts: Computing the abstraction relation is the basis for indexing and classifying teleological descriptions (see Chapter 8) and the model checking algorithm used in acquiring teleological descriptions (see Chapter 9). The particular 2 We use the definition of a partial ordering relation in <ref> [Sto77, p. 82] </ref>. 61 Relation Space Defined in Terms of v c component types assumed v n variable names component types v t variable types generic variable types v v variable references v n , v t v x values qualitative/quantitative values v s states v v , v x v
Reference: [Tur84] <author> Raymond Turner, </author> <booktitle> "Logics for Artificial Intelligence", </booktitle> <publisher> Halsted Press, </publisher> <address> New York, </address> <year> 1984. </year>
Reference-contexts: of the ToMake clause of functional representation described by Sembugamoorthy and Chandrasekaran [SC85], namely "given an initial set of conditions, the purpose is to bring about (ToMake) some other set of conditions." As a formal basis we have defined the teleological operator in terms of the operators of modal logic <ref> [Tur84, Che80] </ref>. If one formulates the possible static characterizations or dynamic behaviors of a mechanism as possible worlds, then specifications can be viewed as "possibly," "necessarily," or "not 4 The teleological operator Guarantees is defined formally in Sections 3.7.1 and 3.7.2. 25 possibly" holding in those possible worlds. <p> For purposes involving temporal relationships, one representation approach for specification predicates is temporal logic, such as those described by Chandra and Misra [CM88], Emerson (CTL fl ) [ES85], Moszkowski [Mosz85], and Turner <ref> [Tur84] </ref> (temporal logics of McDermott, Allen, and Halpern, Manna, and Moszkowski). We give thirteen definitions limited to expressions involving scenarios ( i ) and the specification predicate occursIn ( i ,b). The first two operators describe the manner in which two scenarios may be related in time.
Reference: [VHDL87] <editor> IEEE Standard VHDL Language Reference Manual, </editor> <booktitle> IEEE Std. </booktitle> <pages> 1076-1987. </pages>
Reference-contexts: the TeD language to other work in Chapter 10. 30 3.2 Structure Many languages for representing structure have been put forth (see structure languages proposed by Abelson and Sussman [AS85], Davis [Dav85], de Kleer and Brown [dKB85], Forbus [For85], Franke and Dvorak [FD90], Kuipers [Kui85, Kui86], Williams [Wil85], and VHDL <ref> [VHDL87] </ref>) and each has associated behavior languages and envisioning semantics (discussed by de Kleer [deK77], de Kleer and Brown [dKB82], and Kuipers [Kui82, Kui86]).
Reference: [Wat84] <author> Richard C. Waters, </author> <title> "The Programmer's Apprentice: Knowledge Based Program Editing", in Interactive Programming Environments, </title> <editor> D. Barstow, H. Shrobe, E. Sandewall (eds.), McGraw-Hiull, </editor> <address> New York, </address> <year> 1984, </year> <pages> pp. 464-486. </pages> <note> Reprinted from IEEE Transactions on Software Engineering, Vol. SE-8, No. </note> <month> 1 (January </month> <year> 1982), </year> <pages> pp. 1-12. 68 </pages>
Reference-contexts: CAE (computer aided engineering) systems support design methodologies in which capture of teleological information can be included, these systems do not explicitly represent a methodology and hence do not reason about or with the methodology. 3 However, support of development and verification methodology has been researched (e.g., the Programmer's Apprentice <ref> [RS84, Wat84] </ref>), and Fiduk et al. [FKKP90] describe 3 Systems currently provide a suite of tools, and the designers themselves are responsible for applying the appropriate tool to the appropriate data, in the correct sequence. 23 current research in explicitly representing methodologies and reasoning about design activity with respect to methodologies.
Reference: [WF85] <author> Barbara Y. White, John R. Frederiksen, </author> <title> "QUEST: Qualitative Understanding of Electrical System Troubleshooting", in SIGART Newsletter, Special Section on Reasoning About Structure, Behavior, and Function, </title> <editor> B. Chandrasekaran, Robert Milne eds., </editor> <volume> No. </volume> <month> 93 (July </month> <year> 1985), </year> <pages> pp. 34-37. </pages>
Reference-contexts: utilizing causal relationships is an approach currently used in explanation systems (e.g., Bylander and Chandrasekaran [BC85], Doyle [Doy86], and Kuipers [Kui87]) and diagnosis systems (e.g., Cantone et al. [CLMG85], Davis [Dav85], De Jong [DeJ85], Genesereth [Gen85], Milne [Mil85], Sembugamoorthy and Chandrasekaran [SC85], Steinberg and Mitchell [SM84], and White and Frederiksen <ref> [WF85] </ref>). However, in mechanisms with highly interconnected structure or feedback loops, causal relationships can exist between virtually every pair of components of the mechanism (and between variables of a mechanism model).
Reference: [Wil85] <author> Brian C. Williams, </author> <title> "Qualitative Analysis of MOS Circuits", in Qualitative Reasoning About Physical Systems, </title> <editor> Daniel G. Bobrow, ed., </editor> <publisher> The MIT Press, </publisher> <address> Cambridge, MA 1985, </address> <pages> pp. 281-346. </pages> <note> Reprinted from Artificial Intelligence Vol. 24, </note> <year> 1984. </year>
Reference-contexts: further when comparing the TeD language to other work in Chapter 10. 30 3.2 Structure Many languages for representing structure have been put forth (see structure languages proposed by Abelson and Sussman [AS85], Davis [Dav85], de Kleer and Brown [dKB85], Forbus [For85], Franke and Dvorak [FD90], Kuipers [Kui85, Kui86], Williams <ref> [Wil85] </ref>, and VHDL [VHDL87]) and each has associated behavior languages and envisioning semantics (discussed by de Kleer [deK77], de Kleer and Brown [dKB82], and Kuipers [Kui82, Kui86]). <p> A finite, positive value can be expressed as (0 inf), but this form makes (0 (0 inf)) somewhat awkward. 133 * Negative, zero, or positive. This quantity space is used in the qualitative reasoning approaches of de Kleer and Brown [dKB85] and Williams <ref> [Wil85] </ref> 2 and can be expressed in this Qsim quantity space as (minf 0), 0, and (0 inf). * A positive value bounded above, or (0 +). * A negative value bounded below, or (- 0). * A finite, positive value with a positive lower bound, or (+ inf). * A

References-found: 89

