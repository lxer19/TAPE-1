URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR416.ps.Z
Refering-URL: http://www.cs.rice.edu/~kfisler/publications.html
Root-URL: 
Email: kfisler@cs.indiana.edu  
Title: A Logical Formalization of Hardware Design Diagrams  
Author: Kathi Fisler 
Address: Lindley Hall 215  Bloomington, IN 47401  
Affiliation: Department of Computer Science  Indiana University  
Abstract: Diagrams have been left as an informal tool in hardware reasoning, thus rendering them unacceptable representations within formal reasoning systems. We demonstrate some advantages of formally supporting diagrams in hardware verification systems via a simple example and provide a logical formalization of hardware diagrams upon which we are constructing a verification tool.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jon Barwise. </author> <title> Heterogeneous reasoning. </title> <editor> In G. Mineau, B. Mouline, and J. Sowa, editors, </editor> <title> Conceptual Graphs and Knowledge Representation. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Given this, it would seem that the development of logical systems in which sentential and diagrammatic representations could interact formally would be the best choice for hardware formal methods. Barwise and Etchemendy have demonstrated the feasibility of such heterogeneous logics via their Hyperproof system <ref> [1] </ref> [2]. Our goal in this project is to apply the logical underpinnings of Hyperproof to the domain of hardware design and verification. The first step in developing a heterogeneous logic for the hardware domain is the formalization of the diagrammatic notations; this portion of the project is presented here.
Reference: [2] <editor> Jon Barwise and John Etchemendy. Hyperproof, </editor> <booktitle> CSLI Lecture Notes, </booktitle> <institution> University of Chicago Press. </institution> <note> To appear, </note> <year> 1994. </year>
Reference-contexts: Given this, it would seem that the development of logical systems in which sentential and diagrammatic representations could interact formally would be the best choice for hardware formal methods. Barwise and Etchemendy have demonstrated the feasibility of such heterogeneous logics via their Hyperproof system [1] <ref> [2] </ref>. Our goal in this project is to apply the logical underpinnings of Hyperproof to the domain of hardware design and verification. The first step in developing a heterogeneous logic for the hardware domain is the formalization of the diagrammatic notations; this portion of the project is presented here.
Reference: [3] <author> Viktor Cingel. </author> <title> A graph-based method for timing diagrams representation and verification. </title> <editor> In George J. Milne and Laurence Pierre, editors, </editor> <booktitle> Correct Hardware Design and Verification Methods, </booktitle> <pages> pages 1-14. </pages> <address> CHARME, </address> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The third rule would be derived from the primitive rules involving circuit diagrams, timing diagrams, and sentential logic. 25 systems for reasoning about some aspects of systems using diagrammatic representations have appeared over the past year [4] <ref> [3] </ref> [10] [14]. Many systems provide formalizations of timing diagrams [3] [10] [14] and some even provide formal definitions of the interaction between timing diagrams and sentential representations [14]; none of these support multiple diagrammatic representations. <p> The third rule would be derived from the primitive rules involving circuit diagrams, timing diagrams, and sentential logic. 25 systems for reasoning about some aspects of systems using diagrammatic representations have appeared over the past year [4] <ref> [3] </ref> [10] [14]. Many systems provide formalizations of timing diagrams [3] [10] [14] and some even provide formal definitions of the interaction between timing diagrams and sentential representations [14]; none of these support multiple diagrammatic representations.
Reference: [4] <author> L.K. Dillon, G. Kutty, L.E. Moser, P.M. Melliar-Smith, and Y.S. Ramakrishna. </author> <title> A graphical interval logic for specifying concurrent systems. </title> <type> Technical report, </type> <institution> UCSB, </institution> <year> 1993. </year>
Reference-contexts: The third rule would be derived from the primitive rules involving circuit diagrams, timing diagrams, and sentential logic. 25 systems for reasoning about some aspects of systems using diagrammatic representations have appeared over the past year <ref> [4] </ref> [3] [10] [14]. Many systems provide formalizations of timing diagrams [3] [10] [14] and some even provide formal definitions of the interaction between timing diagrams and sentential representations [14]; none of these support multiple diagrammatic representations. <p> Another distinguishing feature of this research is that the logic has been developed directly on the diagrammatic forms rather than on an underlying sentential logic. <ref> [4] </ref> present a system in which a user can reason about system states using a graphical interval logic, but they translate their visual representations into a sentential logic for purposes of formal manipulation.
Reference: [5] <author> Ruth Eberle, </author> <month> April </month> <year> 1994. </year> <type> Personal communication. 26 </type>
Reference-contexts: Though we have no measured results to support this, 5 empirical evidence using Hyperproof indicates that proofs are often substantially shorter than their purely sentential equivalents <ref> [5] </ref>. The above presentation argues the benefits of using diagrammatic representations in formal verification, but it does not adequately address our particular approach of developing a logic of hardware diagrams.
Reference: [6] <author> Simon Finn, Michael P. Fourman, Michael Francis, and Robert Harris. </author> <title> Formal system design | interactive synthesis based on computer-assisted formal reasoning. </title> <editor> In Luc Claesen, editor, </editor> <title> Formal VLSI Specification and Synthesis: VLSI Design-Methods-I. </title> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: Various design tools and description languages have employed diagrammatic representations <ref> [6] </ref> [7] [15], and 24 the rules given in Fig. 10. The second is an example of a primitive rule between timing diagrams and our sentential logic.
Reference: [7] <author> Graham Hutton. </author> <title> The Ruby interpreter. </title> <type> Technical Report 72, </type> <institution> Chalmers University of Tech nology, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Various design tools and description languages have employed diagrammatic representations [6] <ref> [7] </ref> [15], and 24 the rules given in Fig. 10. The second is an example of a primitive rule between timing diagrams and our sentential logic.
Reference: [8] <author> Steven D. Johnson, Gerard Allwein, and Jon Barwise. </author> <title> Toward the rigorous use of diagrams in reasoning about hardware. </title> <booktitle> IULG Preprint Series, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: We can implement this conjunction in a device and we claim that the original timing diagram describes this device by construction. 2 Theorem 6 There exist timing diagrams that cannot be described by any well-connected device. Proof As pointed out in <ref> [8] </ref>, the timing diagram for a single-pulser that generates the output pulse in the middle of the input pulse is such a timing diagram; such a diagram is given in Fig. 9. 2 4 Rules of Inference Using the semantics developed in the previous four sections, we can now state the <p> A previous attempt at defining a heterogeneous logic for hardware, along with arguments supporting the use of diagrams in hardware formal methods is presented in <ref> [8] </ref>. The logic in [8] is less fine-grained than the one presented here; their logic is based only on behavioral relationships while this work allows for reasoning about structural relationships between components. 6 Conclusions Diagrams offer several potential advantages to hardware reasoning: they offer clear, compact, and user-transferable representations, and they <p> A previous attempt at defining a heterogeneous logic for hardware, along with arguments supporting the use of diagrams in hardware formal methods is presented in <ref> [8] </ref>. The logic in [8] is less fine-grained than the one presented here; their logic is based only on behavioral relationships while this work allows for reasoning about structural relationships between components. 6 Conclusions Diagrams offer several potential advantages to hardware reasoning: they offer clear, compact, and user-transferable representations, and they lack the high learning
Reference: [9] <author> Steven D. Johnson, Paul Miner, and Shyam Pullela. </author> <title> Studies of the single-pulser in various reasoning systems. </title> <booktitle> In Theorem-Provers and Circuit Design Proceedings, </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: The diagrams corresponding to a single-pulser appear in Fig. 1; the timing diagram in Fig. 1 provides a visual description of the component's behavior. Various sentential verifications of the single-pulser have been studied by <ref> [9] </ref>; for sake of comparison, we will contrast their sentential theorem-prover verification with our intended diagrammatic verification. We have chosen to use their theorem-prover verification because one of our goals is to develop a proof-checker with support for diagrammatic representations. PVS is the theorem prover used in [9], which we take <p> been studied by <ref> [9] </ref>; for sake of comparison, we will contrast their sentential theorem-prover verification with our intended diagrammatic verification. We have chosen to use their theorem-prover verification because one of our goals is to develop a proof-checker with support for diagrammatic representations. PVS is the theorem prover used in [9], which we take as representative of sentential theorem provers. 2 Verifying hardware using a theorem prover involves writing a statement for the component's specification, writing a statement for an implementation of the component, and then proving that the implementation logically implies the specification. <p> Depending upon the theorem prover in question, the statements are given in some variant of higher-order logic. To address the issue of clarity, consider the PVS implementation and specification of the single-pulser proposed by <ref> [9] </ref>. <p> The first part, spec1, expresses that "whenever there is a pulse on the input signal i, say from time n to time m, there is a unique time k in the vicinity of the input pulse so that the output signal is asserted <ref> [9] </ref>." spec1 (i; O) : bool = (8n; m :P ulse (i; n; m) 9k : n k ^ k m ^ O (k) = 1 ^ P ulse (f; n; m) : bool = (n &lt; m ^ f (n 1) = 0 ^ f (m) = 0^ (8t : <p> negation, and the gate on the right represents boolean and. 4 We could consider the lengths of wires in the circuit diagram as information not available in the sentential representation, but that information is more fine-grained than our logic is tuned to handle at present. 3 As pointed out by <ref> [9] </ref>, spec1 is not sufficient because it does not expresses the desired behavior of the single-pulser between input pulses. <p> We now turn to comparing the sentential single-pulser verification to our proposed diagrammatic verification. There are two aspects to consider: the time to develop proofs and the conciseness of the resulting proof. The PVS proof referenced in <ref> [9] </ref> took an estimated half-hour of proof time for a relatively novice PVS user. The main time expenditure was in properly formulating the specification, which took considerably longer than the actual verification [12]. <p> Instantiate value of n, 3 c. Instantiate value of n, 4 d. And Rule, 5b, 5c 6. a. n &gt; 1 Assume b. Repetition expansion, 3 c. Repetition expansion, 4 d. And Rule, 6b, 6c 7. Merge, 5d, 6d Comparing this proof to the PVS proof trace from <ref> [9] </ref> (reproduced in appendix A), it seems reasonable to argue that the diagrammatic proof is easier to follow and quite possibly easier to produce than the one required to verify spec1 in PVS.
Reference: [10] <author> K. Khordoc, M. Dufresne, E. Cerny, P.A. Babkine, and A. Silburt. </author> <title> Integrating behavior and timing in executable specifications. </title> <booktitle> In CHDL, </booktitle> <pages> pages 385-402, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: The third rule would be derived from the primitive rules involving circuit diagrams, timing diagrams, and sentential logic. 25 systems for reasoning about some aspects of systems using diagrammatic representations have appeared over the past year [4] [3] <ref> [10] </ref> [14]. Many systems provide formalizations of timing diagrams [3] [10] [14] and some even provide formal definitions of the interaction between timing diagrams and sentential representations [14]; none of these support multiple diagrammatic representations. <p> The third rule would be derived from the primitive rules involving circuit diagrams, timing diagrams, and sentential logic. 25 systems for reasoning about some aspects of systems using diagrammatic representations have appeared over the past year [4] [3] <ref> [10] </ref> [14]. Many systems provide formalizations of timing diagrams [3] [10] [14] and some even provide formal definitions of the interaction between timing diagrams and sentential representations [14]; none of these support multiple diagrammatic representations.
Reference: [11] <author> Thomas Frederick Melham. </author> <title> Formalizing abstraction mechanisms for hardware verification in higher order logic. </title> <type> Technical Report TR 201, </type> <institution> University of Cambridge Computer Laboratory, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: These three diagrammatic representations have been chosen because they address three of the four principle aspects of hardware design: control, architecture, and timing <ref> [11] </ref>. 1 Examples of these diagrammatic forms are given in Fig. 1.
Reference: [12] <author> Paul S. Miner, </author> <month> July </month> <year> 1994. </year> <type> Personal communication. </type>
Reference-contexts: The PVS proof referenced in [9] took an estimated half-hour of proof time for a relatively novice PVS user. The main time expenditure was in properly formulating the specification, which took considerably longer than the actual verification <ref> [12] </ref>. Although we have no evidence to support this, we believe that specifications may be easier to state and debug using diagrammatic representations that are more familiar to practicing designers. Understanding our diagrammatic proof requires understanding our rules of inference.
Reference: [13] <author> Franklin P. Prosser and David E. </author> <title> Winkel. </title> <booktitle> The Art of Digital Design. Prentice-Hall, 2nd edition, </booktitle> <year> 1987. </year>
Reference-contexts: Each conditional oval contains one or more assignments of T or F to signal variables. Examples of ASM graphs appear in Fig. 7; more extensive examples and details can be found in <ref> [13] </ref>. When using an ASM chart for computation, each state is viewed as lasting a single tick of a system clock, with the underlying hardware for a state being combinational in nature. <p> Using these definitions, we can identify properties of ASM graphs required for implementation in devices. There are various algorithms for implementing an ASM graph in physical hardware; the interested reader is referred to <ref> [13] </ref> for examples of such algorithms. Definition 39 1. g describes D if there exists a state map and a signal map that are feasible for g and D. 2.
Reference: [14] <author> Rainer Schlor and Werner Damm. </author> <title> Specification and verification of system-level hardware designs using timing diagrams. </title> <booktitle> In Proc. European Conf. on Design and Automation, </booktitle> <address> Paris, </address> <month> February </month> <year> 1993. </year>
Reference-contexts: The third rule would be derived from the primitive rules involving circuit diagrams, timing diagrams, and sentential logic. 25 systems for reasoning about some aspects of systems using diagrammatic representations have appeared over the past year [4] [3] [10] <ref> [14] </ref>. Many systems provide formalizations of timing diagrams [3] [10] [14] and some even provide formal definitions of the interaction between timing diagrams and sentential representations [14]; none of these support multiple diagrammatic representations. <p> The third rule would be derived from the primitive rules involving circuit diagrams, timing diagrams, and sentential logic. 25 systems for reasoning about some aspects of systems using diagrammatic representations have appeared over the past year [4] [3] [10] <ref> [14] </ref>. Many systems provide formalizations of timing diagrams [3] [10] [14] and some even provide formal definitions of the interaction between timing diagrams and sentential representations [14]; none of these support multiple diagrammatic representations. <p> and sentential logic. 25 systems for reasoning about some aspects of systems using diagrammatic representations have appeared over the past year [4] [3] [10] <ref> [14] </ref>. Many systems provide formalizations of timing diagrams [3] [10] [14] and some even provide formal definitions of the interaction between timing diagrams and sentential representations [14]; none of these support multiple diagrammatic representations.
Reference: [15] <author> Mandayam Srivas and Mark Bickford. SPECTOOL: </author> <title> A computer-aided verification tool for hardware designs, vol I. </title> <type> Technical Report RL-TR-91-339, </type> <institution> Rome Laboratory, Griffiss Air Force Base, </institution> <address> NY, </address> <month> December </month> <year> 1991. </year> <month> 27 </month>
Reference-contexts: Various design tools and description languages have employed diagrammatic representations [6] [7] <ref> [15] </ref>, and 24 the rules given in Fig. 10. The second is an example of a primitive rule between timing diagrams and our sentential logic.
References-found: 15

