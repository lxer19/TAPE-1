URL: ftp://ftp.cs.man.ac.uk/pub/IPG/bw89.ps.Z
Refering-URL: http://www.cs.man.ac.uk/ipg/publications.html
Root-URL: http://www.cs.man.ac.uk
Title: The IPSE 2.5 Project: Process Modelling as a Basis for a Support Environment  
Author: B.C. Warboys, 
Note: Published in Proceedings of the First International Conference on System Development Environments and Factories SDEF1, May, 1989, Berlin, Pitman 1990.  
Address: Manchester M13 9PL, England.  
Affiliation: Department of Computer Science, University of Manchester,  
Abstract-found: 0
Intro-found: 1
Reference: [alv] <institution> Alvey Programme Software Engineering Strategy, </institution> <month> November </month> <year> 1983 </year>
Reference-contexts: 1 Introduction 1.1 Introduction to the project The IPSE 2.5 project is concerned with the problems of how computer systems can be used in the development of software based information systems. The name "IPSE 2.5" is due directly to the identification in the Alvey <ref> [alv] </ref> programme of three generations of the so called Integrated Project Support Environment - IPSE 1, IPSE 2, IPSE 3.
Reference: [djp] <institution> D.Pearson "CADES" Computer Weekly,July 26th,August 2nd,August 9th 1973 </institution>
Reference-contexts: The environment in question is known as the CADES <ref> [djp, bcw76] </ref> system and has been used since 1972 for the support of the development of the ICL Operating System VME [bcw80]. This system accurately reflects the industrial concerns prevalent in the late 1960's. <p> They would have to encourage the codes of good practice which prevailed within the computer industry, i.e. structured programming, data/entity driven design, delayed fixing and binding, design for resilence etc." 2.3 The solution Structural modelling was first described in detail in <ref> [djp] </ref> in 1973. It followed the philosophy that system development should be primarily a data-driven top-down process. The emphasis was on the modular structure of the system being designed to manipulate defined data items, rather than data items being invented to support the encoding of abstract functional requirements.
Reference: [bcw76] <institution> B.C.Warboys and G.D.Pratten "CADES Principles" Seminar Oxford University February 4th 1976 </institution>
Reference-contexts: The environment in question is known as the CADES <ref> [djp, bcw76] </ref> system and has been used since 1972 for the support of the development of the ICL Operating System VME [bcw80]. This system accurately reflects the industrial concerns prevalent in the late 1960's. <p> Early documents <ref> [bcw76] </ref> state : "The large development team would need to be able to identify and preserve the overall structure of the operating system. Experience on earlier systems had shown how difficult it was to protect a large system from structural decay.
Reference: [bcw80] <institution> B.C.Warboys "VME/B a model for the realisa-tion of a total system concept" ICL Technical Journal November 1980 </institution>
Reference-contexts: The environment in question is known as the CADES [djp, bcw76] system and has been used since 1972 for the support of the development of the ICL Operating System VME <ref> [bcw80] </ref>. This system accurately reflects the industrial concerns prevalent in the late 1960's. The focus on these concerns was due in no small measure to the two successful NATO Software Engineering conferences of 1968/69 [jnb, pn] which are arguably responsible for the very term Software Engineering.
Reference: [jnb] <institution> J.N.Buxton and B.Randell "Software Engineering Techniques" Report on NATO Science Conference October 1969 </institution>
Reference-contexts: This system accurately reflects the industrial concerns prevalent in the late 1960's. The focus on these concerns was due in no small measure to the two successful NATO Software Engineering conferences of 1968/69 <ref> [jnb, pn] </ref> which are arguably responsible for the very term Software Engineering. Examination of our experiences with this system over the last 16 years lead to some interesting observations on both what has changed and unfortunately what has not during this period.
Reference: [pn] <institution> P.Naur and B.Randell "Software Engineering" Report on NATO Science Conference 1968 </institution>
Reference-contexts: This system accurately reflects the industrial concerns prevalent in the late 1960's. The focus on these concerns was due in no small measure to the two successful NATO Software Engineering conferences of 1968/69 <ref> [jnb, pn] </ref> which are arguably responsible for the very term Software Engineering. Examination of our experiences with this system over the last 16 years lead to some interesting observations on both what has changed and unfortunately what has not during this period.
Reference: [ak] <institution> A.Koestler "The Act of Creation" Macmillan 1964 </institution>
Reference-contexts: The emphasis was on the modular structure of the system being designed to manipulate defined data items, rather than data items being invented to support the encoding of abstract functional requirements. Each code entity was termed a holon, a term borrowed from Koestler <ref> [ak] </ref> to describe utilities in an hierarchic system. A language called SDL (System Development Language) was devised to allow the expressions of holon-holon and holon-data relationships.
Reference: [ras1] <institution> R.A.Snowdon "IPSE 2.5 Technical Strategy" IPSE 2.5 project document 060-00131-2.2 </institution>
Reference-contexts: Our experience is that any attempt to base the Support Environment on the entities to be developed rather than the process to be used for the development is doomed to the same constraints as the CADES system imposed. Clearly a major influence on the IPSE 2.5 <ref> [ras1] </ref> project was the desire to build a Support Environment with a Process Modelling paradigm at its core rather than an operating system style core with an interface fashioned primarily to entity manipulation.
Reference: [cbj1] <institution> C.B.Jones and R.Moore "An experimental user interface for a Theorem Proving Assistant" IPSE 2.5 document SE13/29/234 </institution>
Reference-contexts: As workstations increase in power with improved screen and "tactile" support so the notion of a reasoning assistant will become increasingly tractable <ref> [cbj1] </ref>. However it is also clear that the Environment is still required to support the conventional level of granu-larity as represented in the CADES system. The second major influence on the IPSE 2.5 project was therefore the desire to investigate the integration of these coarse and fine grain support systems.
Reference: [ewd] <institution> E.W.Dijkstra "The Humble Programmer" CACM No 10,Vol 15 1972 </institution>
Reference-contexts: People are involved in this process because of the intellectual nature of the various tasks. We should not forget that no tool, as yet, can remove the essential involvement of the human being. As Dijkstra <ref> [ewd] </ref> said in 1972, "We shall do a much better programming job ..... provided we respect the intrinsic limitations of the human mind." The IPSE is thus a means of supporting the whole process rather than being a collection of tools which assist particular activities or classes of activities within that
Reference: [sjg] <institution> S.J.Greenspan "Requirements Modelling; A Knowledge Representation Approach to Software Requirements Definition" Technical Report CSRG-155 University of Toronto, </institution> <month> March </month> <year> 1984 </year>
Reference-contexts: Thus we have outlined five principal notions of the Modelling language (PML) : Role, Interaction, Action, Entity and Assertion. Further PML adopts a number of concepts employed in object-oriented languages (cf Requirements Modelling Language <ref> [sjg] </ref> and Smalltalk [gol]) for the purposes of expressing models. These are the concepts : * classification/instantiation * specialisation * aggregation/decomposition A class is a group of objects that share a set of common definitional properties.
Reference: [gol] <institution> A.Goldberg "Smalltalk-80 The Interactive Programming Environment" </institution>
Reference-contexts: Thus we have outlined five principal notions of the Modelling language (PML) : Role, Interaction, Action, Entity and Assertion. Further PML adopts a number of concepts employed in object-oriented languages (cf Requirements Modelling Language [sjg] and Smalltalk <ref> [gol] </ref>) for the purposes of expressing models. These are the concepts : * classification/instantiation * specialisation * aggregation/decomposition A class is a group of objects that share a set of common definitional properties. <p> The WpManager for this Work Package is called wp. 6.3 Work Package Manager This section describes how a Work Package manager models a Work Package. We might hope that the approach would be something like the use of VDM [cbj86] as a Specification Method and Smalltalk <ref> [gol] </ref> as the Implementation Language. * Choosing the Work Package Method The bc.mon instantiates wp with a tor which tells it to run a project to build a TPA : Goal- Build a Theorem Proving Assistant (TPA) Constraints- Implement the system in Smalltalk. Use VDM as the specification method.
Reference: [pra] <author> K.Harrison-Broninski, </author> <title> A.Jones and C.Roberts "A Scenario for Management Support in IPSE 2.5" IPSE 2.5 document 060/00164/1.0 </title>
Reference-contexts: My thanks in particular go to Clive Roberts, Alun Jones and Keith Harrison-Broninski of Praxis <ref> [pra] </ref> who provided the mini-Praxis model from which the GSF example is constructed. To Bob Snowdon of STL for both base material [ras2] and a most helpful set of comments on the original draft and finally to all the members of the IPSE 2.5 project who unwittingly provided me with material.
Reference: [ras2] <institution> R.A.Snowdon "A Brief Overview of the IPSE 2.5 Project" IPSE 2.5 document 060/RAS026/1.1 </institution>
Reference-contexts: My thanks in particular go to Clive Roberts, Alun Jones and Keith Harrison-Broninski of Praxis [pra] who provided the mini-Praxis model from which the GSF example is constructed. To Bob Snowdon of STL for both base material <ref> [ras2] </ref> and a most helpful set of comments on the original draft and finally to all the members of the IPSE 2.5 project who unwittingly provided me with material.
Reference: [cbj86] <institution> C.B.Jones "Systematic Software Development Using VDM" Prentice-Hall 1986 </institution>
Reference-contexts: The WpManager for this Work Package is called wp. 6.3 Work Package Manager This section describes how a Work Package manager models a Work Package. We might hope that the approach would be something like the use of VDM <ref> [cbj86] </ref> as a Specification Method and Smalltalk [gol] as the Implementation Language. * Choosing the Work Package Method The bc.mon instantiates wp with a tor which tells it to run a project to build a TPA : Goal- Build a Theorem Proving Assistant (TPA) Constraints- Implement the system in Smalltalk.
References-found: 15

