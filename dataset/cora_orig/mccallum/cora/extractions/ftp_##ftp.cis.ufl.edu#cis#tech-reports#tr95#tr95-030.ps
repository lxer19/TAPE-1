URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr95/tr95-030.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr95-abstracts.html
Root-URL: http://www.cis.ufl.edu
Abstract-found: 0
Intro-found: 1
Reference: [ABC + 90] <author> W. Alexander, H. Boral, L. Clay, G. Copel, S. Danforth, M. Franklin, B. Hart, M. Smith, and P. Valduriez. </author> <title> Prototyping bubba, a highly parallel database system. </title> <journal> IEEE Transaction on Knowledge and Data Engineering, </journal> <pages> pages 4-24, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: There is a large body of work aimed at improving the performance of relational databases by means of parallel computing using specialized/proprietary hardware such as database machines. For example, Gamma [D + 86, BDG + 90], Bubba <ref> [Bor88, ABC + 90] </ref>, Grace [FKT86], Volcano [Gra92] 3 are some of the research prototypes. NonStop SQL [Tan88], TBC/1012 [Cor83] are commercial products. 1.2 Related Work Hash-based join algorithms show great potential in multiprocessor systems because they can be easily parallelized.
Reference: [ABCE76] <author> M. Astrhan, M. W. Blasgen, D. D. Chamberlin, and P. Eswaran. </author> <title> System r: Relational approach to database management. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(2) </volume> <pages> 119-120, </pages> <month> June </month> <year> 1976. </year>
Reference-contexts: Hash-based join has been proved to be more efficient than other join algorithms in most cases [DKO + 84, Bra84, Ger86]. Historically, the sort-merge join was considered as the most efficient join method [BE77] because System R did not measure the performance of hash-based join <ref> [ABCE76] </ref>. However, since the work of [DKO + 84, Bra84], hash-based join has received considerable attention: a large number of hash-based join algorithms have been proposed, implemented and evaluated.
Reference: [BDG + 90] <author> A. Bricker, D. J. DeWitt, S. Ghandeharizaeh, H. I. Hsiao, and D. A. Schneider. </author> <title> The gamma database machine project. </title> <journal> IEEE Transaction on Knowledge and Data Engineering, </journal> <volume> 2(1):44, </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: There is a large body of work aimed at improving the performance of relational databases by means of parallel computing using specialized/proprietary hardware such as database machines. For example, Gamma <ref> [D + 86, BDG + 90] </ref>, Bubba [Bor88, ABC + 90], Grace [FKT86], Volcano [Gra92] 3 are some of the research prototypes. NonStop SQL [Tan88], TBC/1012 [Cor83] are commercial products. 1.2 Related Work Hash-based join algorithms show great potential in multiprocessor systems because they can be easily parallelized.
Reference: [BDT83] <author> D. Bitton, D. DeWitt, and C. Tubyfill. </author> <title> Benchmarking database systems a systematic approach. </title> <booktitle> In Proceedings of International Conference on VLDB, </booktitle> <address> Florence, Italy, </address> <year> 1983. </year>
Reference-contexts: It is much more meaningful to investigate the Grace hash join algorithm with relations of large size rather than small relations. The size of relations and tuples used in our experiments are similar to the one proposed in the Wisconsin benchmark <ref> [BDT83] </ref>. The join attribute is a 4-byte integer; each tuple is 208-bytes long; The source relations R and S both consist of 250,000 tuples. The join selectivity is 60%, which means that the result relation has 150,000 tuples. We use uniformly distributed data for all the experiments.
Reference: [BE77] <author> M. W. Blasgen and K. P. Eswaran. </author> <title> Storage and access in relational databases. </title> <journal> IBM System Journal, </journal> <volume> 16(4) </volume> <pages> 21-33, </pages> <year> 1977. </year>
Reference-contexts: Hash-based join has been proved to be more efficient than other join algorithms in most cases [DKO + 84, Bra84, Ger86]. Historically, the sort-merge join was considered as the most efficient join method <ref> [BE77] </ref> because System R did not measure the performance of hash-based join [ABCE76]. However, since the work of [DKO + 84, Bra84], hash-based join has received considerable attention: a large number of hash-based join algorithms have been proposed, implemented and evaluated.
Reference: [Bhi88] <author> A. Bhide. </author> <title> An analysis of three transaction processing architectures. </title> <booktitle> In Proceedings of International Conference on VLDB, </booktitle> <pages> page 339, </pages> <address> Long Beach, CA, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: Several researchers <ref> [Bhi88, BS88, LMR87] </ref> have investigated the suitability of each architecture from the view point of DBMS design. Although the shared-nothing architecture can provide high scalability, the processors can only communicate with each other through message passing, which is typically much slower than the shared-everything case.
Reference: [Bor88] <author> H. Boral. </author> <title> Parallelism in bubba. </title> <booktitle> In Proceedings of International Symposium on Database in Parallel and Distributed Systems, </booktitle> <address> Austin, TX, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: There is a large body of work aimed at improving the performance of relational databases by means of parallel computing using specialized/proprietary hardware such as database machines. For example, Gamma [D + 86, BDG + 90], Bubba <ref> [Bor88, ABC + 90] </ref>, Grace [FKT86], Volcano [Gra92] 3 are some of the research prototypes. NonStop SQL [Tan88], TBC/1012 [Cor83] are commercial products. 1.2 Related Work Hash-based join algorithms show great potential in multiprocessor systems because they can be easily parallelized.
Reference: [Bra84] <author> Kjell Bratbergsengen. </author> <title> Hashing methods and relational algebra operations. </title> <booktitle> In Proceedings of International Conference on VLDB, </booktitle> <address> Singapore, </address> <month> August </month> <year> 1984. </year>
Reference-contexts: For space optimization, the smaller relation is scanned once to build the in-memory hash table, and the larger relation is also scanned once to probe the hash table. Hash-based join has been proved to be more efficient than other join algorithms in most cases <ref> [DKO + 84, Bra84, Ger86] </ref>. Historically, the sort-merge join was considered as the most efficient join method [BE77] because System R did not measure the performance of hash-based join [ABCE76]. <p> Historically, the sort-merge join was considered as the most efficient join method [BE77] because System R did not measure the performance of hash-based join [ABCE76]. However, since the work of <ref> [DKO + 84, Bra84] </ref>, hash-based join has received considerable attention: a large number of hash-based join algorithms have been proposed, implemented and evaluated. The technology makes large amounts of memory possible, which is not necessary but desirable for the hash-based join to achieve its best performance.
Reference: [BS88] <author> A. Bhide and M. Stonebraker. </author> <title> A performance comparison of two architectures for fast transaction processing. </title> <booktitle> In Proceedings IEEE Conference on Data Engineering, </booktitle> <pages> page 536, </pages> <address> Los Angeles, CA, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: Several researchers <ref> [Bhi88, BS88, LMR87] </ref> have investigated the suitability of each architecture from the view point of DBMS design. Although the shared-nothing architecture can provide high scalability, the processors can only communicate with each other through message passing, which is typically much slower than the shared-everything case.
Reference: [CD + 83] <author> H-T Chou, , D. J. DeWitt, R. Katz, and T. Klug. </author> <title> Design and implementation of the wisconsin storage system. </title> <type> Technical Report 524, </type> <institution> University of Wisconsin, </institution> <month> November </month> <year> 1983. </year>
Reference-contexts: They implemented and evaluated Simple hash join, Grace hash join, Hybrid hash join and sort-merge join using the Wisconsin Storage System (Wiss) <ref> [CD + 83] </ref>.
Reference: [Cor83] <author> Teradata Corp. </author> <title> Dbc/1012 data base computer concepts & facilities. </title> <type> Technical Report C02-0001-00, </type> <institution> Teradata Corp., </institution> <year> 1983. </year>
Reference-contexts: For example, Gamma [D + 86, BDG + 90], Bubba [Bor88, ABC + 90], Grace [FKT86], Volcano [Gra92] 3 are some of the research prototypes. NonStop SQL [Tan88], TBC/1012 <ref> [Cor83] </ref> are commercial products. 1.2 Related Work Hash-based join algorithms show great potential in multiprocessor systems because they can be easily parallelized.
Reference: [D + 86] <author> D. DeWitt et al. </author> <title> GAMMA A High Performance Backend Database Machine. </title> <booktitle> In Proceedings 12th International Conference on Very Large Data Bases, </booktitle> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: There is a large body of work aimed at improving the performance of relational databases by means of parallel computing using specialized/proprietary hardware such as database machines. For example, Gamma <ref> [D + 86, BDG + 90] </ref>, Bubba [Bor88, ABC + 90], Grace [FKT86], Volcano [Gra92] 3 are some of the research prototypes. NonStop SQL [Tan88], TBC/1012 [Cor83] are commercial products. 1.2 Related Work Hash-based join algorithms show great potential in multiprocessor systems because they can be easily parallelized.
Reference: [DG85] <author> David J. DeWitt and Robert Gerber. </author> <title> Multiprocessor hash-based join algorithms. </title> <booktitle> In Proceedings of International Conference on VLDB, </booktitle> <address> Stockholm, </address> <year> 1985. </year>
Reference-contexts: NonStop SQL [Tan88], TBC/1012 [Cor83] are commercial products. 1.2 Related Work Hash-based join algorithms show great potential in multiprocessor systems because they can be easily parallelized. Many researchers have proposed parallel algorithms for hash join and studied their behavior and performance using simulation, implementation and analytical models <ref> [DKO + 84, DG85, DS89, LST90, Omi91, KNiT92] </ref>. Based on an analytical model, [DKO + 84] compared various query processing algorithms in a centralized database system with large memory. <p> The results showed that hash-based algorithms outperform all the other algorithms when the size of available memory is larger than the square root of the size of involved relations. <ref> [DG85] </ref> extended the hash-based join algorithms to a multiprocessor environment. They implemented and evaluated Simple hash join, Grace hash join, Hybrid hash join and sort-merge join using the Wisconsin Storage System (Wiss) [CD + 83].
Reference: [DKO + 84] <author> David J. DeWitt, Randy H. Katz, Frank Olken, Leonard D. Shapiro, Michael R. Stone-braker, and David Wood. </author> <title> Implementation techniques for main memory database systems. </title> <booktitle> In Proceedings of ACM SIGMOD Conference, </booktitle> <address> Boston, MA, </address> <year> 1984. </year>
Reference-contexts: For space optimization, the smaller relation is scanned once to build the in-memory hash table, and the larger relation is also scanned once to probe the hash table. Hash-based join has been proved to be more efficient than other join algorithms in most cases <ref> [DKO + 84, Bra84, Ger86] </ref>. Historically, the sort-merge join was considered as the most efficient join method [BE77] because System R did not measure the performance of hash-based join [ABCE76]. <p> Historically, the sort-merge join was considered as the most efficient join method [BE77] because System R did not measure the performance of hash-based join [ABCE76]. However, since the work of <ref> [DKO + 84, Bra84] </ref>, hash-based join has received considerable attention: a large number of hash-based join algorithms have been proposed, implemented and evaluated. The technology makes large amounts of memory possible, which is not necessary but desirable for the hash-based join to achieve its best performance. <p> NonStop SQL [Tan88], TBC/1012 [Cor83] are commercial products. 1.2 Related Work Hash-based join algorithms show great potential in multiprocessor systems because they can be easily parallelized. Many researchers have proposed parallel algorithms for hash join and studied their behavior and performance using simulation, implementation and analytical models <ref> [DKO + 84, DG85, DS89, LST90, Omi91, KNiT92] </ref>. Based on an analytical model, [DKO + 84] compared various query processing algorithms in a centralized database system with large memory. <p> Many researchers have proposed parallel algorithms for hash join and studied their behavior and performance using simulation, implementation and analytical models [DKO + 84, DG85, DS89, LST90, Omi91, KNiT92]. Based on an analytical model, <ref> [DKO + 84] </ref> compared various query processing algorithms in a centralized database system with large memory. <p> They implemented and evaluated Simple hash join, Grace hash join, Hybrid hash join and sort-merge join using the Wisconsin Storage System (Wiss) [CD + 83]. The results of the performance evaluation not only verified the analytical conclusions in <ref> [DKO + 84] </ref>, but also showed that both Grace hash join and Hybrid hash join algorithms provide linear increases in performance when resources increase. [DS89] studied the performance of Simple hash join, Grace hash join, Hybrid hash join and sort-merge join algorithms within a shared-nothing architecture.
Reference: [DS89] <author> David J. DeWitt and Donovan A. Schneider. </author> <title> A performance evaluation of four parallel join algorithms in a shared-nothing multiprocessor environment. </title> <booktitle> In Proceedings of ACM SIGMOD Conference, </booktitle> <address> Portland, OR, </address> <month> June </month> <year> 1989. </year> <month> 19 </month>
Reference-contexts: NonStop SQL [Tan88], TBC/1012 [Cor83] are commercial products. 1.2 Related Work Hash-based join algorithms show great potential in multiprocessor systems because they can be easily parallelized. Many researchers have proposed parallel algorithms for hash join and studied their behavior and performance using simulation, implementation and analytical models <ref> [DKO + 84, DG85, DS89, LST90, Omi91, KNiT92] </ref>. Based on an analytical model, [DKO + 84] compared various query processing algorithms in a centralized database system with large memory. <p> The results of the performance evaluation not only verified the analytical conclusions in [DKO + 84], but also showed that both Grace hash join and Hybrid hash join algorithms provide linear increases in performance when resources increase. <ref> [DS89] </ref> studied the performance of Simple hash join, Grace hash join, Hybrid hash join and sort-merge join algorithms within a shared-nothing architecture. They found that non-uniform distribution of join attribute values has a great impact on the performance of hash-based join algorithms.
Reference: [EM92] <author> Margaret H. Eich and Priti Mishra. </author> <title> Join processing in relational databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(1):63, </volume> <month> March </month> <year> 1992. </year>
Reference-contexts: It is frequently used, computationally expensive, and difficult to optimize. During the last decade, research work has focused on developing efficient join algorithms. Consequently, various join methods are available for current database systems: nested-loops join, sort-merge join, hash-based join <ref> [EM92] </ref>. Nested-loops join is directly based on the definition of the join operation. In the nested-loops join, the source relations are named as inner and outer relations. For each tuple of the outer relation, every tuple of the inner relation is retrieved and compared with it.
Reference: [FKT86] <author> S. Fushimi, M. Kitsuregawa, and H. Tanaka. </author> <title> An overview of the system software of a parallel relational database machine grace. </title> <booktitle> In Proceedings of International Conference on VLDB, </booktitle> <address> Kyoto, Japan, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: There is a large body of work aimed at improving the performance of relational databases by means of parallel computing using specialized/proprietary hardware such as database machines. For example, Gamma [D + 86, BDG + 90], Bubba [Bor88, ABC + 90], Grace <ref> [FKT86] </ref>, Volcano [Gra92] 3 are some of the research prototypes. NonStop SQL [Tan88], TBC/1012 [Cor83] are commercial products. 1.2 Related Work Hash-based join algorithms show great potential in multiprocessor systems because they can be easily parallelized.
Reference: [Ger86] <author> R. J. Gerber. </author> <title> Dataflow query processing using multiprocessor hash-partitioned algorithms. </title> <type> Technical Report 672, </type> <institution> University of Wisconsin,, Madison, WI, </institution> <year> 1986. </year>
Reference-contexts: For space optimization, the smaller relation is scanned once to build the in-memory hash table, and the larger relation is also scanned once to probe the hash table. Hash-based join has been proved to be more efficient than other join algorithms in most cases <ref> [DKO + 84, Bra84, Ger86] </ref>. Historically, the sort-merge join was considered as the most efficient join method [BE77] because System R did not measure the performance of hash-based join [ABCE76].
Reference: [Gra92] <author> G. Graefe. Volcano, </author> <title> an extensible and parallel dataflow query processing system. </title> <journal> IEEE Transaction on Knowledge and Data Engineering, </journal> <pages> pages 14-21, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: There is a large body of work aimed at improving the performance of relational databases by means of parallel computing using specialized/proprietary hardware such as database machines. For example, Gamma [D + 86, BDG + 90], Bubba [Bor88, ABC + 90], Grace [FKT86], Volcano <ref> [Gra92] </ref> 3 are some of the research prototypes. NonStop SQL [Tan88], TBC/1012 [Cor83] are commercial products. 1.2 Related Work Hash-based join algorithms show great potential in multiprocessor systems because they can be easily parallelized.
Reference: [Hwa93] <author> Kai Hwang. </author> <title> Advanced Computer Architecture: Parallelism, Scalability, Programmability. </title> <publisher> McGraw-Hill, Inc., </publisher> <address> Reading, MA, </address> <year> 1993. </year>
Reference-contexts: The first is Uniform Memory Access model (UMA), in which every processor can access each memory unit in a uniform way, no matter where the memory unit is. All processors have equal access time to all memory units <ref> [Hwa93] </ref>. The second is Nonuniform Memory Access model (NUMA), which means that the way a processor accesses a memory unit depends on the location of the particular memory unit. For example, different interconnect networks may be traversed.
Reference: [Ken93] <institution> Kendall Square Research, </institution> <address> Boston, MA. </address> <booktitle> KSR1 Principles of Operation, </booktitle> <year> 1993. </year>
Reference-contexts: It is assumed that N is found in the local cache of processor A. A page is allocated in the local cache of processor B, and the subpage containing address N is copied from A's local cache to B's local cache <ref> [Ken93] </ref>. If processor B needs to write address N, the ALLCACHE engine invalidates all the copies of address N. Therefore, after processor B updates the address N, the copy of N in processor B's local cache is the only valid copy.
Reference: [KNiT92] <author> Masaru Kitsuregawa, Miyuki Nakano, and Shin ichiro Tsudaka. </author> <title> Parallel grace hash join on shared-everything multiprocessor: Implementation and performance evaluation on symmetry s81. </title> <booktitle> IEEE 8th International Conference on Data Engineering, </booktitle> <year> 1992. </year>
Reference-contexts: NonStop SQL [Tan88], TBC/1012 [Cor83] are commercial products. 1.2 Related Work Hash-based join algorithms show great potential in multiprocessor systems because they can be easily parallelized. Many researchers have proposed parallel algorithms for hash join and studied their behavior and performance using simulation, implementation and analytical models <ref> [DKO + 84, DG85, DS89, LST90, Omi91, KNiT92] </ref>. Based on an analytical model, [DKO + 84] compared various query processing algorithms in a centralized database system with large memory. <p> They implemented the modified Grace hash join algorithm on a 10 node Sequent Symmetry multiprocessor system. Both the theoretical analysis and implementation results showed that the modified algorithm provides much better performance when the data is skewed. <ref> [KNiT92] </ref> implemented and evaluated the parallel Grace hash join algorithm on a shared-everything multiprocessor system which is Sequent Symmetry S81. They exploited the parallelism with respect to I/O page size, parallel disk access, number of processors and number of buckets.
Reference: [Knu73] <author> Donald E. Knuth. </author> <title> Sorting and Searching, </title> <booktitle> volume 3 of The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1973. </year>
Reference-contexts: The second hash function used in both the building and probing phases is: h (k) = bm (kA bkAc)c, where k is the join attribute (s), A is a constant in the range 0 &lt; A &lt; 1, and m is an integer. <ref> [Knu73] </ref> suggests that when A = ( p 5 1)=2 0:618034, the hash function provides good performance. The advantage of this hash function is that the value of m is independent of the performance.
Reference: [LMR87] <author> H. Lu, K. Mikkilineni, and J . P. Richardson. </author> <title> Design and evaluation of parallel pipelined join algorithms. </title> <booktitle> In Proceedings of ACM SIGMOD Conference, </booktitle> <address> San Francisco, CA, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: Several researchers <ref> [Bhi88, BS88, LMR87] </ref> have investigated the suitability of each architecture from the view point of DBMS design. Although the shared-nothing architecture can provide high scalability, the processors can only communicate with each other through message passing, which is typically much slower than the shared-everything case.
Reference: [LST90] <author> Hongjun Lu, Ming-Chien Shan, and Kian-Lee Tan. </author> <title> Hash-based join algorithms for multiprocessor computers with shared memory. </title> <booktitle> In Proceedings of International Conference on VLDB, </booktitle> <address> Brisbane, Australia, </address> <year> 1990. </year>
Reference-contexts: NonStop SQL [Tan88], TBC/1012 [Cor83] are commercial products. 1.2 Related Work Hash-based join algorithms show great potential in multiprocessor systems because they can be easily parallelized. Many researchers have proposed parallel algorithms for hash join and studied their behavior and performance using simulation, implementation and analytical models <ref> [DKO + 84, DG85, DS89, LST90, Omi91, KNiT92] </ref>. Based on an analytical model, [DKO + 84] compared various query processing algorithms in a centralized database system with large memory. <p> They found that non-uniform distribution of join attribute values has a great impact on the performance of hash-based join algorithms. The Hybrid hash join algorithm was shown to dominate the others unless the join attribute values are non-uniformly distributed and the memory is relatively small. <ref> [LST90] </ref> analyzed the hash-based join algorithms in a shared-memory environment. Their analytical model considered two key features to optimize the performance: the overlap between CPU processing and I/O operations and the contention of writing to the same memory.
Reference: [Omi91] <author> Edward Omiecinski. </author> <title> Performance analysis of a load balancing hash-join algorithm for a shared memory multiprocessor. </title> <booktitle> In Proceedings of International Conference on VLDB, </booktitle> <address> Barcelona, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: NonStop SQL [Tan88], TBC/1012 [Cor83] are commercial products. 1.2 Related Work Hash-based join algorithms show great potential in multiprocessor systems because they can be easily parallelized. Many researchers have proposed parallel algorithms for hash join and studied their behavior and performance using simulation, implementation and analytical models <ref> [DKO + 84, DG85, DS89, LST90, Omi91, KNiT92] </ref>. Based on an analytical model, [DKO + 84] compared various query processing algorithms in a centralized database system with large memory. <p> The study concluded that the Hybrid hash join algorithm does not always outperform the other algorithms because of the contention. The authors also proposed a modified Hybrid hash join algorithm to reduce contention. Omiecinski <ref> [Omi91] </ref> proposed a new version of parallel Grace hash join algorithm for a shared-everything environment. The modification of this algorithm was designed to improve load balancing in the presence of data skew. They implemented the modified Grace hash join algorithm on a 10 node Sequent Symmetry multiprocessor system.
Reference: [Tan88] <author> Performance Group Tandem. </author> <title> A benchmark of non-stop sql on the debit credit transaction. </title> <booktitle> In Proceedings of ACM SIGMOD Conference, </booktitle> <address> Chicago, IL, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: For example, Gamma [D + 86, BDG + 90], Bubba [Bor88, ABC + 90], Grace [FKT86], Volcano [Gra92] 3 are some of the research prototypes. NonStop SQL <ref> [Tan88] </ref>, TBC/1012 [Cor83] are commercial products. 1.2 Related Work Hash-based join algorithms show great potential in multiprocessor systems because they can be easily parallelized.
Reference: [Zha94] <author> X. Zhang. </author> <title> Performance evaluation and analysis of grace hash-join algorithm on a ksr-1 multiprocessor system. </title> <type> Master's thesis, </type> <institution> University of Florida, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: The rest of this paper is organized as follows: Section 2 describes motivation and the COMA architecture of the KSR-1 system. Section 3 presents our implementation, results obtained and analysis. Finally, section 4 gives conclusions. 2 Motivation This section first presents the motivation for our work (see <ref> [Zha94] </ref> for more details) and the COMA architecture of the KSR-1 shared-everything multiprocessor system. 4 As summarized in the previous section, hash-based join algorithms have been implemented and evaluated on both shared-nothing systems, shared-disk systems, and some shared-everything systems.
References-found: 28

