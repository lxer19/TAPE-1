URL: http://ballade.cs.ucla.edu:8080/~cong/papers/ieeedt92.ps.gz
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Title: DAG-Map: Graph Based FPGA Technology Mapping For Delay Optimization  
Author: Kuang-Chien Chen Jason Cong, Yuzheng Ding, Andrew Kahng, Peter Trajmar 
Address: 3055 Orchard Drive, San Jose, CA 95134  Los Angeles, CA 90024  
Affiliation: Fujitsu America, Inc.  Department of Computer Science University of California,  
Abstract: In this paper, we present a graph based technology mapping algorithm, called DAG-Map, for delay optimization in lookup-table based FPGA designs. Our algorithm carries out technology mapping and delay optimization on the entire Boolean network, instead of decomposing the network into fanout-free trees and mapping each tree separately as in most previous FPGA technology mapping algorithms. As a preprocessing step of DAG-Map, we introduce a general algorithm for transforming an arbitrary n-input network into a two-input network with only O (1) factor increase in the network depth; previous transformation procedures may result in an W(log n) factor increase in the network depth. Finally, we present a graph matching based technique which performs area optimization without increasing the network delay; this is used as a postprocessing step for DAG-Map. We implemented the DAG-Map algorithm and tested it on the MCNC logic synthesis benchmarks. Compared with previous FPGA technology mapping algorithms for delay optimization (Chortle-d and MIS-pga), DAG-Map reduces both the network depth and the number of lookup-tables. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Brayton, R. K., R. Rudell, and A. L. Sangiovanni-Vincentelli, </author> <title> ``MIS: A Multiple-Level Logic Optimization,'' </title> <journal> IEEE Transactions on CAD, </journal> <pages> pp. 1062-1081, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: Fig. 2 Algorithm DMIG. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 4 If the network has complex gates, we can represent each complex gate in the sum-of-products form and then replace it with by two levels of simple gates. In particular, we use the technology decomposition command tech_decomp -o 1000 -a 1000 in MIS <ref> [1] </ref>, which realizes such a transformation. 5 The gate type of each node in the binary tree is the same as the gate type of the original multiple-input node. <p> Clearly d DMIG is much smaller than d BBT when n is large. The experimental results in Section 4 show that the two-input networks obtained using our transformation procedure lead to smaller network depths and better mapping solutions than those obtained using the transformation procedure in MIS <ref> [1] </ref>. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 7 Here we assume that depth (G) = W (log I), which is true for most networks in practice. This excludes the unrealistic case where log I is the dominating term in the right-hand side of the inequality in Theorem 1. -9- 3.2.
Reference: [2] <author> Cong, J. and Y. Ding, </author> <title> ``An Optimal Technology Mapping Algorithm fo Delay Optimization in Lookup-Table Based FPGA Designs,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 48-53, </pages> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: In conclusion, this work shows that the graph-based technology-mapping approach is more effective than the existing tree-based technology-mapping approaches in LUT-based FPGA designs. After this work was submitted, Cong and Ding recently showed that the LUT-based FPGA technology mapping-problem for delay optimization can be solved optimally in polynomial time <ref> [2] </ref>. 6. Acknowledgments We thank Dr. Masakatsu Sugimoto for his support of this research. Support from the NSF via grants MIP-9110511 and MIP-9110696 is also gratefully acknowledged. We thank Professor Jonathan Rose and Robert Francis for providing the Chortle programs and necessary assistance for our comparative study.
Reference: [3] <author> Detjens, E., G. Gannot, R. Rudell, A. Sangiovanni-Vincentelli, and A. Wang, </author> <title> ``Technology Mapping in MIS,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 116-119, </pages> <month> Nov. </month> <year> 1987. </year> <month> -22- </month>
Reference-contexts: Given a synthesized Boolean network, the technology mapping problem is to implement the network using logic cells from a prescribed cell family. Much work has been done on the technology mapping problem for conventional gate array or standard cell designs (e.g. <ref> [13, 3] </ref>). In particular, it was shown that a Boolean network can be decomposed into a set of fanout-free trees and that the technology mapping problem can be solved optimally for each tree independently using a dynamic programming approach [13].
Reference: [4] <author> El Gamal, A. et al, </author> <title> ``An Architecture for Electrically Configurable Gate Arrays,'' </title> <journal> IEEE J. Solid-State Circuits, </journal> <volume> Vol. 24, </volume> <pages> pp. 394-398, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: An FPGA chip usually consists of three components: programmable logic blocks, programmable interconnections, and programmable I/O blocks. Current technology implements programmable logic blocks using either K-input RAM/ROM lookup-tables (K-LUTs) [21] or programmable multiplexors <ref> [4] </ref>. Programmable interconnections consist of one-dimensional segmented channels or two-dimensional routing grids with switch-matrices. Programmable I/O blocks provide a user configurable interface between internal logic blocks and I/O pads. The design process for FPGAs is similar to that for conventional gate arrays or standard cells.
Reference: [5] <author> Francis, R. J., J. Rose, and K. Chung, ``Chortle: </author> <title> A Technology Mapping Program for Lookup Table-Based Field Programmable Gate Arrays,'' </title> <booktitle> Proc. 27th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 613-619, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: In the improved MIS-pga (new) [17] more decomposition techniques are incorporated, including bin-packing, cofactoring, and AND-OR decomposition. The covering problem is solved more efficiently via certain preprocessing operations. The Chortle program and its successor Chortle-crf, developed by Francis et al. <ref> [5, 6] </ref>, decomposes a given Boolean network into a set of fanout-free trees and then carries out technology mapping on each tree using the dynamic programming approach.
Reference: [6] <author> Francis, R. J., J. Rose, and Z. Vranesic, ``Chortle-crf: </author> <title> Fast Technology Mapping for Lookup Table-Based FPGAs,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 613-619, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: In the improved MIS-pga (new) [17] more decomposition techniques are incorporated, including bin-packing, cofactoring, and AND-OR decomposition. The covering problem is solved more efficiently via certain preprocessing operations. The Chortle program and its successor Chortle-crf, developed by Francis et al. <ref> [5, 6] </ref>, decomposes a given Boolean network into a set of fanout-free trees and then carries out technology mapping on each tree using the dynamic programming approach. <p> Transforming Arbitrary Networks into Two-Input Networks As in <ref> [6, 7] </ref>, we assume that each node in the given Boolean network is a simple gate (i.e. <p> Note that in this subsection, each node in the network is a K-LUT instead of a simple gate as in the preceding subsections. The first operation is called gate decomposition, which is inspired by the gate decomposition concept used in Chortle-crf <ref> [6] </ref>. The basic idea is as follows.
Reference: [7] <author> Francis, R. J., J. Rose, and Z. Vranesic, </author> <title> ``Technology Mapping of Lookup Table-Based FPGAs for Performance,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 568-571, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: A given network is first partitioned into subgraphs of reasonable size, and then an exhaustive procedure is used to determine the invisible edges in each subgraph. Previous work on FPGA mapping for delay optimization consists of Chortle-d, developed by Francis et al. <ref> [7] </ref>, and an extension of MIS-pga, developed by Murgai et al. [16]. <p> Our algorithm carries out technology mapping and delay optimization on the entire Boolean network, instead of decomposing it into fanout-free trees as in Chortled. Our algorithm is optimal for trees for any K-LUTs while Chortle-d is optimal for trees only when K is no more than six <ref> [7] </ref>. For the preprocessing phase of DAG-Map, we introduce a general algorithm which transforms an arbitrary n-node network into a two-input network with only O (1) factor increase in the network depth, while the previous transformation procedure may result in W (log n) factor increase in the network depth. <p> Transforming Arbitrary Networks into Two-Input Networks As in <ref> [6, 7] </ref>, we assume that each node in the given Boolean network is a simple gate (i.e. <p> However, since T is a tree, we have c input (C v ) c c input (N p (v) -v -) c &gt; K, which contradicts the fact that C v is K-feasible. ` A result along similar lines was shown for Chortle-d in <ref> [7] </ref>, but holds only for K 6 since the Chortle-d bin-packing heuristics are no longer optimal for K &gt; 6. 9 Although the DAG-Map algorithm is optimal for trees, it may not be optimal for general networks. Fig. 6 shows an example where DAG-Map produces a sub-optimal mapping solution. <p> We integrated our program as an extension of the MIS system so that we could exploit input/output routines and other functions provided by MIS. DAG-Map was tested on a large number of MCNC benchmark examples and results were compared with both those produced by Chortle-d <ref> [7] </ref>, and those produced by the mapping phase of the MIS-pga delay optimization algorithm [16]. As in [7, 16], we chose the size of the K-LUT to be K = 5, reflecting, e.g. the XC 3000 FPGA family produced by Xilinx [21]. <p> DAG-Map was tested on a large number of MCNC benchmark examples and results were compared with both those produced by Chortle-d [7], and those produced by the mapping phase of the MIS-pga delay optimization algorithm [16]. As in <ref> [7, 16] </ref>, we chose the size of the K-LUT to be K = 5, reflecting, e.g. the XC 3000 FPGA family produced by Xilinx [21]. For each input network, we first applied the DMIG algorithm to transform it into a two-input network. <p> c c c c c c c c c c Table 1 Comparison with Chortle-d and MIS-pga (delay optimization) programs. -19- The input networks to Chortle-d and DAG-Map are obtained from the original benchmarks using the same standard MIS technology independent optimization script which was used by Francis et al. <ref> [7] </ref>, except that Chortle-d also goes through another speed-up step for delay optimization. A direct comparison with MIS-pga is difficult since it combines logic optimization and technology mapping. Nevertheless, we include the mapping results produced by the MIS-pga delay optimization algorithm (quoted from [16]) for reference.
Reference: [8] <author> Gabow, H., </author> <title> ``An Efficient Implementation of Edmonds' Algorithm for Maximum Matching on Graphs,'' </title> <journal> Journal of the ACM, </journal> <volume> Vol. 23, </volume> <pages> pp. 221-234, </pages> <month> Apr. </month> <year> 1976. </year>
Reference-contexts: The experimental results show that this matching based merge algorithm usually converges after only one or two iterations. Since the maximum graph matching problem can be solved in O (n 3 ) time <ref> [8] </ref>, our area optimization procedure can be implemented efficiently. 11 -15- Note that in the above discussion concerning these two operations we assume that each node in a mergeable pair has only a single fanout, unless it is also the base of the merge for predecessor packing. <p> We call the edges in E 2 the simple edges, and call the edges in E - E 2 , each of hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 11 We used a standard procedure for maximum cardinality matching in undirected graphs, written by Ed Rothberg, that implements Gabow's algorithm <ref> [8] </ref>. -16- 5-LUT 5-LUT 5-LUT 5-LUT 5-LUT 5-LUT 5-LUT 5-LUT 5-LUT 5-LUT 5-LUT 5-LUT 5-LUT (a) Original network (b) Multiple gate decomposition (c) Multiple predecessor packing (d) Mixed type merging u 1 2 u u u v v v v v v u 2 u 2 1 2 1 u Fig. <p> Then, we identify the subgraph G =(V,E 2 ) of H, consisting of all the simple edges in H. Next, we find a maximum cardinality matching M 2 E 2 in G using Gabow's algorithm <ref> [8] </ref>. This matching will be included in the approximate solution for hypergraph matching. Let E m be the set of non-simple edges in H that are disjoint from the edges in M 2 .
Reference: [9] <author> Hill, D., </author> <title> ``A CAD System for the Design of Field Programmable Gate Arrays,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 187-192, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: The depth of a network is the largest node level in the network. We assume that each programmable logic block in an FPGA is a K-input lookup-table (K-LUT) that can implement any K-input Boolean function (this is true for the FPGA chips produced by Xilinx and AT&T <ref> [21, 9, 20] </ref> ). Thus, each K-LUT can implement any K-feasible cone of a Boolean network. The technology mapping problem is then to cover a given Boolean network with K-feasible cones 3 .
Reference: [10] <author> Hoover, H. J., M. M. Klawe, and N. J. Pippenger, </author> <title> ``Bounding Fan-out in Logic Networks,'' </title> <journal> Journal of Association for Computing Machinery, </journal> <volume> Vol. 31, </volume> <pages> pp. 13-18, </pages> <month> Jan. </month> <year> 1984. </year>
Reference-contexts: The proof will be presented in the Appendix; similar analysis was carried out by Hoover, Klawe, and Pippenger in bounding the maximum degree of fanout in a Boolean network <ref> [10] </ref>. Theorem 1 For an arbitrary Boolean network G of simple gates 6 , let G be the network obtained by applying the DMIG algorithm to each multi-input gate in topological order starting from the PI nodes.
Reference: [11] <author> Huffman, D. A., </author> <title> ``A method for the construction of minimum redundancy codes,'' </title> <booktitle> Proc. IRE 40, </booktitle> <pages> pp. 1098-1101, </pages> <year> 1952. </year>
Reference-contexts: We process the nodes in G in topological order starting from the PI nodes. At each multiple-input node v, we construct a binary tree T (v ) rooted at v using an algorithm similar to Huffman's algorithm for constructing a prefix code of minimum average length <ref> [11] </ref>.
Reference: [12] <author> Karplus, K., ``Xmap: </author> <title> A Technology Mapper for Table-lookup Field-Programmable Gate Arrays,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 240-243, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Bin-packing heuristics are used in Chortle-crf for gate-level decomposition, yielding significant improvement over its predecessor in the quality of solutions and the running time. The Xmap program developed by Karplus <ref> [12] </ref> transforms a given Boolean network into an if-then-else DAG representation and then goes through a simple marking process to determine the final mapping.
Reference: [13] <author> Keutzer, K., ``DAGON: </author> <title> Technology Binding and Local Optimization by DAG Matching,'' </title> <booktitle> Proc. 24th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 341-347, </pages> <year> 1987. </year>
Reference-contexts: Given a synthesized Boolean network, the technology mapping problem is to implement the network using logic cells from a prescribed cell family. Much work has been done on the technology mapping problem for conventional gate array or standard cell designs (e.g. <ref> [13, 3] </ref>). In particular, it was shown that a Boolean network can be decomposed into a set of fanout-free trees and that the technology mapping problem can be solved optimally for each tree independently using a dynamic programming approach [13]. <p> In particular, it was shown that a Boolean network can be decomposed into a set of fanout-free trees and that the technology mapping problem can be solved optimally for each tree independently using a dynamic programming approach <ref> [13] </ref>.
Reference: [14] <author> Lawler, E. L., K. N. Levitt, and J. Turner, </author> <title> ``Module Clustering to Minimize Delay in Digital Networks,'' </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. </volume> <pages> C-18(1) pp. 47-57, </pages> <month> January </month> <year> 1969. </year>
Reference-contexts: Technology Mapping for Delay Minimization After we obtain a two-input Boolean network, we carry out technology mapping directly on the entire network. We use a method similar to that of Lawler et al. for module clustering to minimize delay in digital networks <ref> [14] </ref>. Our algorithm consists of two steps. We first label the network to determine the level of each node in the final mapping solution. We then generate the logically equivalent network of K-LUTs. <p> Fig. 6 shows an example where DAG-Map produces a sub-optimal mapping solution. However, DAG-Map would be optimal if the mapping constraint for each programmable logic block is monotone. As defined in <ref> [14] </ref>, a constraint X is monotone if a network H satisfying X implies that any subgraph of H also satisfies X. For example, if we limit the number of gates a programmable logic block may cover, it will be a monotone constraint.
Reference: [15] <author> Murgai, R., Y. Nishizaki, N. Shenay, R. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Logic Synthesis Algorithms for Programmable Gate Arrays,'' </title> <booktitle> Proc. 27th ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 620-625, </pages> <year> 1990. </year>
Reference-contexts: The MIS-pga program developed by Murgai et al. <ref> [15] </ref> first decomposes a given Boolean network into a feasible network using Roth-Karp decomposition and kernel extraction so that the number of inputs at each node is bounded.
Reference: [16] <author> Murgai, R., N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Performance Directed Synthesis for Table Look Up Programmable Gate Arrays,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 572-575, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: Previous work on FPGA mapping for delay optimization consists of Chortle-d, developed by Francis et al. [7], and an extension of MIS-pga, developed by Murgai et al. <ref> [16] </ref>. The basic approach used in Chortle-d is similar to that in Chortle-crf, i.e., decompose the network into fanout-free trees and then use dynamic programming and bin-packing heuristics to map each tree independently, minimizing at each step the depth of the node being processed. <p> Second, Chortle-d uses many more lookup-tables than are used by area optimization -4- algorithms (MIS-pga and Chortle-crf). The MIS-pga extension of <ref> [16] </ref> contains two phases, mapping and placement/routing. The mapping phase first computes a delay-optimized two-input network, then traverses the network from the primary inputs, collapsing the nodes in the longest paths into their fanouts to reduce the network depth. <p> DAG-Map was tested on a large number of MCNC benchmark examples and results were compared with both those produced by Chortle-d [7], and those produced by the mapping phase of the MIS-pga delay optimization algorithm <ref> [16] </ref>. As in [7, 16], we chose the size of the K-LUT to be K = 5, reflecting, e.g. the XC 3000 FPGA family produced by Xilinx [21]. For each input network, we first applied the DMIG algorithm to transform it into a two-input network. <p> DAG-Map was tested on a large number of MCNC benchmark examples and results were compared with both those produced by Chortle-d [7], and those produced by the mapping phase of the MIS-pga delay optimization algorithm [16]. As in <ref> [7, 16] </ref>, we chose the size of the K-LUT to be K = 5, reflecting, e.g. the XC 3000 FPGA family produced by Xilinx [21]. For each input network, we first applied the DMIG algorithm to transform it into a two-input network. <p> A direct comparison with MIS-pga is difficult since it combines logic optimization and technology mapping. Nevertheless, we include the mapping results produced by the MIS-pga delay optimization algorithm (quoted from <ref> [16] </ref>) for reference. The running time (sec) of our algorithm, which includes transformation, mapping, and postprocessing, was recorded on a Sun SPARC IPC (15.8 MIPS); the running time of the other two algorithms is quoted from [16], where the authors used a DEC5500 machine (28 MIPS). <p> we include the mapping results produced by the MIS-pga delay optimization algorithm (quoted from <ref> [16] </ref>) for reference. The running time (sec) of our algorithm, which includes transformation, mapping, and postprocessing, was recorded on a Sun SPARC IPC (15.8 MIPS); the running time of the other two algorithms is quoted from [16], where the authors used a DEC5500 machine (28 MIPS). Overall, the solutions of Chortle-d used 60% more lookup-tables and had 2% larger network depth, and the solutions of MIS-pga with delay optimization used 4% more lookup-tables and had 6% larger network depth.
Reference: [17] <author> Murgai, R., N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Improved Logic Synthesis Algorithms for Table Look Up Architectures ,'' Proc. </title> <booktitle> IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 564-567, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: MIS-pga then enumerates all the possible realizations of each network node and solves the binate covering problem to get a mapping solution using the least number of lookup-tables. In the improved MIS-pga (new) <ref> [17] </ref> more decomposition techniques are incorporated, including bin-packing, cofactoring, and AND-OR decomposition. The covering problem is solved more efficiently via certain preprocessing operations.
Reference: [18] <author> Roth, J. P. and R. M. Karp, </author> <title> ``Minimization Over Boolean Graphs,'' </title> <journal> IBM Journal of Research and Development, </journal> <pages> pp. 227-238, </pages> <month> April </month> <year> 1962. </year>
Reference-contexts: This method can be generalized to the case where the decomposed node v implements a complex function. In this case, we apply Roth-Karp decomposition <ref> [18] </ref> to determine if the node can be feasibly decomposed to v ij and v as in the preceding paragraph. <p> The details can be found in <ref> [18] </ref>. -14- 5-LUT v 5-LUT 5-LUT 5-LUT 5-LUT v w u j u j Fig. 9 Predecessor packing for area optimization (assume K=5). Another postprocessing operation for area optimization is called predecessor packing. The concept behind this method is simple.
Reference: [19] <author> Wang, A., </author> <title> ``Algorithms for Multi-level Logic Optimization,'' </title> <note> U.C.Berkeley Memorandum No. UCB/ERL M89/50, </note> <month> April </month> <year> 1989. </year>
Reference-contexts: The DMIG algorithm is shown in Fig. 2. If we apply the DMIG algorithm to the example in Fig. 1 (a), we indeed obtain the binary tree shown in Fig. 1 (c). An algorithm similar to DMIG was proposed by Wang <ref> [19] </ref> for timing-driven decomposition in the synthesis of multi-level Boolean network. We have shown that the DMIG algorithm increases the network depth after the two-input decomposition by at most a small constant factor.
Reference: [20] <author> Woo, N.-S., </author> <title> ``A Heuristic Method for FPGA Technology Mapping Based on the Edge Visibility,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 248-251, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: The Xmap program developed by Karplus [12] transforms a given Boolean network into an if-then-else DAG representation and then goes through a simple marking process to determine the final mapping. Another FPGA technology mapping algorithm was proposed by Woo <ref> [20] </ref>, who introduces the notion of invisible edges to denote the edges which do not appear in the resulting network after mapping. A given network is first partitioned into subgraphs of reasonable size, and then an exhaustive procedure is used to determine the invisible edges in each subgraph. <p> The depth of a network is the largest node level in the network. We assume that each programmable logic block in an FPGA is a K-input lookup-table (K-LUT) that can implement any K-input Boolean function (this is true for the FPGA chips produced by Xilinx and AT&T <ref> [21, 9, 20] </ref> ). Thus, each K-LUT can implement any K-feasible cone of a Boolean network. The technology mapping problem is then to cover a given Boolean network with K-feasible cones 3 .
Reference: [21] <author> Xilinx, </author> <title> User Guide and Tutorials, </title> <address> Xilinx, San Jose (1991). </address>
Reference-contexts: An FPGA chip usually consists of three components: programmable logic blocks, programmable interconnections, and programmable I/O blocks. Current technology implements programmable logic blocks using either K-input RAM/ROM lookup-tables (K-LUTs) <ref> [21] </ref> or programmable multiplexors [4]. Programmable interconnections consist of one-dimensional segmented channels or two-dimensional routing grids with switch-matrices. Programmable I/O blocks provide a user configurable interface between internal logic blocks and I/O pads. The design process for FPGAs is similar to that for conventional gate arrays or standard cells. <p> The fast turn-around time and low manufacturing cost have made the FPGA technology popular for system prototyping and low- or medium-volume production. Moreover, the lookup-table based FPGAs (such as those developed by Xilinx <ref> [21] </ref>) allow dynamic reconfiguration of the chip functionality, which leads to many interesting applications. However, the field programmable components usually introduce larger delay than conventional devices. Therefore, performance is a major consideration in many applications that use FPGA technology. <p> The depth of a network is the largest node level in the network. We assume that each programmable logic block in an FPGA is a K-input lookup-table (K-LUT) that can implement any K-input Boolean function (this is true for the FPGA chips produced by Xilinx and AT&T <ref> [21, 9, 20] </ref> ). Thus, each K-LUT can implement any K-feasible cone of a Boolean network. The technology mapping problem is then to cover a given Boolean network with K-feasible cones 3 . <p> As in [7, 16], we chose the size of the K-LUT to be K = 5, reflecting, e.g. the XC 3000 FPGA family produced by Xilinx <ref> [21] </ref>. For each input network, we first applied the DMIG algorithm to transform it into a two-input network. We then used DAG-Map to map into a 5-LUT network. Finally, the matching based postprocessing step was performed.
References-found: 21

