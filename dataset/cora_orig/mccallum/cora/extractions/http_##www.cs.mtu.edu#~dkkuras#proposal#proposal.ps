URL: http://www.cs.mtu.edu/~dkkuras/proposal/proposal.ps
Refering-URL: http://www.cs.mtu.edu/~dkkuras/proposal/proposal.html
Root-URL: http://www.cs.mtu.edu
Title: Efficient Code Generation for Software Pipelined Loops on LCVLIW Architectures  
Author: Darla K. Kuras 
Degree: Thesis Proposal  
Date: December 4, 1997  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Nicolau, N. Dutt, and A. Capitanio. </author> <title> Partitioned Register Files for VLIWs: A Preliminary Analysis of Tradeoffs. </title> <booktitle> Proceedings of the 25th Annual Workshop on Microprogramming (MICRO-25), </booktitle> <pages> pp. 292-300, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: The work proposed here considers VLIWs. The ideal, although unrealistic, VLIW architecture has several functional units all connected to one large register file. This scheme requires too many access ports from the register file, hindering access time <ref> [1] </ref>. As an alternative, the register file can be partitioned into several banks, each functional unit connected to one bank. This grouping of registers and functional units is termed clustering.
Reference: [2] <author> J.R. Ellis. Bulldog: </author> <title> A Compiler for VLIW Architectures. </title> <publisher> The MIT Press, </publisher> <year> 1986. </year> <type> PhD thesis, </type> <institution> Yale, </institution> <year> 1994. </year>
Reference-contexts: Our goal is to find a partitioning scheme that is sucessful for all schedules. 5 3 Previous Work Several researchers have studied the partitioned register file problem. A brief summary and discussion of their approaches and results follows. 3.1 BUG In <ref> [2] </ref>, J. R. Ellis describes how code is generated for the Bulldog compiler using trace scheduling. The compiler picks a trace (a path through several basic blocks) from the intermediate code flow graph and generates code for the trace, repeating this process until the entire graph is done. <p> However, their architecture is more like the ideal and is too expensive. 3.3 Nicolau et al. 3.3.1 Cost Estimation In <ref> [2] </ref>, Nicolau et al. present results obtained by a code partitioning scheme on LCVLIW architectures. Their partitioning algorithm consists of three phases. Phase one generates a directed cyclic graph (DCG) representation of a loop. The graph is constructed from code generated for an ideal VLIW machine.
Reference: [3] <author> Johan Janssen and Henk Corporaal. </author> <title> Partitioned Register Files for TTAs. </title> <booktitle> Proceedings of the 28th Annual Workshop on Microprogramming MICRO-28), </booktitle> <pages> pp. 303-312, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: This strategy works only when the number of registers needed is close to the actual number supported by the hardware, if it is not, the compiler will fail to find a legal schedule. 6 3.2 Janssen and Corporaal In <ref> [3] </ref>, Janssen and Corporaal examine the effect of a partitioned register file on transport triggered architectures (TTAs). Their approach differs from the LCVLIW in that the register file is partitioned, but all functional units still have direct access to each register.
Reference: [4] <author> A. Capitanio, N. Dutt, and A. Nicolau. </author> <title> Toward Register Allocation for Multiple Register File VLIW Architectures. </title> <type> Technical Report TR94-6, </type> <month> June </month> <year> 1994. </year>
Reference-contexts: Nicolau et al. handle only straight-line loops, thereby limiting the applicability of their approach, as conditional branches are frequently used within loops. 3.3.2 Hypergraph Coloring In <ref> [4] </ref>, Nicolau et al. present a hypergraph coloring algorithm for assigning registers to banks in a partitioned architecture. Their architecture includes an interconnection network where each functional unit has a fixed connection from one register file and a switch between that file and another.
Reference: [5] <author> Saurabh Jang. </author> <title> Generating Efficient Code of VLIW Architectures with Partitioned Register Files. </title> <type> MS thesis, </type> <institution> Michigan Technological University, </institution> <year> 1996. </year>
Reference-contexts: However, like the TTA considered by Janssen and Corporaal, their target architecture is too expensive. 3.4 Jang An initial study of the partition problem using a graph emphasizing operands was done by Saurabh Jang for his MS thesis work at Michigan Technological University <ref> [5] </ref>. 8 3.4.1 The Register Component Graph Central to his partitioning scheme is the use of a register component graph. This graph is built for each function in the intermediate code.
Reference: [6] <author> Philip H. Sweany and Steven J. Beaty. </author> <title> Overview of the Rocket Retargetable C Compiler. </title> <type> Technical Report CS-94-01, </type> <institution> Department of Computer Science, Michigan Technological University, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: While cloning requires some extra instuctions, we believe they will be far outweighed by the copies spared. In addition, cloning allows for parallel execution of instructions that read the same cloned value. 5.1 Implementation and Evaluation The work proposed will be implemented in the Rocket compiler <ref> [6] </ref>. Rocket is a compiler retar-getable to several ILP architectures. We will generate code for the Unlimited Resource Machine (URM) [7]. The URM is a hypothetical ILP architecture that allows grouping of its instructions for treatment as a single instruction, thereby simulating a VLIW.
Reference: [7] <author> David Poplawski. </author> <title> The Unlimited Resource Machine (URM). </title> <type> Technical Report CS-TR 95-1, </type> <institution> Department of Computer Science, Michigan Technological University, </institution> <month> February </month> <year> 1995. </year> <month> 13 </month>
Reference-contexts: In addition, cloning allows for parallel execution of instructions that read the same cloned value. 5.1 Implementation and Evaluation The work proposed will be implemented in the Rocket compiler [6]. Rocket is a compiler retar-getable to several ILP architectures. We will generate code for the Unlimited Resource Machine (URM) <ref> [7] </ref>. The URM is a hypothetical ILP architecture that allows grouping of its instructions for treatment as a single instruction, thereby simulating a VLIW. After implementation, the partitioning method will be evaluated by testing its performance on several loops.
References-found: 7

