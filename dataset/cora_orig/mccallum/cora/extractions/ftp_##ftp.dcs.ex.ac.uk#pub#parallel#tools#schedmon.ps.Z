URL: ftp://ftp.dcs.ex.ac.uk/pub/parallel/tools/schedmon.ps.Z
Refering-URL: http://www.dcs.ex.ac.uk/reports/reports.html
Root-URL: 
Title: Process Scheduling and Program Monitoring on Transputers  
Author: Wentong Cai Stephen J. Turner 
Keyword: parallel programming environment, program monitoring, monitoring intrusiveness, transputer scheduling.  
Address: Canada K7L 3N6  Exeter, Exeter EX4 4PT England  
Affiliation: Department of Computing and Information Science Queen's University at Kingston,  Department of Computer Science University of  
Abstract: Parallel program monitoring is a key to success in parallel program development. We have developed a novel approach, called the logical clock approach, for the highly transparent monitoring of parallel programs. To apply the logical clock approach in monitoring occam programs on transputer-based systems, we first study the (micro-coded) process scheduler of the transputer, and then demonstrate how the information on process scheduling can be employed for correctly updating logical clocks and controlling inter-process communication in logical clock monitoring. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Aspnas and T. L-angbacka, </author> <title> A monitoring system for a transputer-based multipro cessor. </title> <editor> In: Peter Welch et al (Ed.), </editor> <booktitle> Proceedings of Transputing'91, </booktitle> <volume> vol. 1, </volume> <publisher> IOS Press, </publisher> <month> April </month> <year> 1991, </year> <pages> 78-93. </pages>
Reference-contexts: Program monitoring on transputer-based systems can be carried out either by hardware or by software. The hardware approach requires extensive hardware support, which is expensive and only applicable to some systems (e.g. <ref> [1] </ref>). The software approach, which is more flexible and inexpensive, normally relies on monitoring hooks inserted in the program to extract information.
Reference: [2] <author> Wentong Cai and Stephen J. Turner, </author> <title> Highly transparent monitoring of parallel sys tems using `Logical Clocks'. </title> <editor> In: A. Bakkers (Ed.), </editor> <title> Applying Transputer Based Parallel Machines, </title> <publisher> IOS Press, </publisher> <month> April </month> <year> 1989, </year> <pages> 59-70. </pages>
Reference-contexts: We say that transparency in monitoring is achieved if the behaviour of the monitored program is identical to that observed when running without monitoring. We have developed a novel approach, referred to as the logical clock approach, for the highly transparent monitoring of parallel programs <ref> [2, 3] </ref>. The basic idea of the logical clock approach is to introduce a logical clock for each process which can reflect the real time execution of that process when running without monitoring, and to control inter-process communication according to logical time rather than real time. <p> The monitor and monitored processes are coordinated by monitoring hooks inserted in the monitored program, where a hook has the following general form: ... ... send request and extract information event, E j= changed to ) wait for permission ... event, E ... In our preliminary implementation (described in <ref> [2] </ref>), the interaction between the monitor and monitored processes is achieved through channel communication. For each process, there are two channels, to.monitor and from.monitor, connected to the monitor, as shown in figure 1. <p> Thus, the monitor will not accumulate any delay for the logical clock register of a descheduled process. But, it will subsequently synchronize the logical clock using the rules introduced in <ref> [2] </ref> if the process is descheduled for communication (state D-INT and D-EXT), or it will 13 Pipeline Buffer R2 R1 B2 deMM B1 W2 set the logical clock according to the rules described in [3] if the process is descheduled for the timer (state D-TIM).
Reference: [3] <author> Wentong Cai and Stephen J. Turner, </author> <title> Highly transparent monitoring of real-time occam programs. </title> <editor> In: J.A. Board (Ed.), </editor> <booktitle> Transputer Research and Applications 2, </booktitle> <publisher> IOS Press, </publisher> <month> Oct </month> <year> 1989, </year> <pages> 42-53. </pages>
Reference-contexts: We say that transparency in monitoring is achieved if the behaviour of the monitored program is identical to that observed when running without monitoring. We have developed a novel approach, referred to as the logical clock approach, for the highly transparent monitoring of parallel programs <ref> [2, 3] </ref>. The basic idea of the logical clock approach is to introduce a logical clock for each process which can reflect the real time execution of that process when running without monitoring, and to control inter-process communication according to logical time rather than real time. <p> But, it will subsequently synchronize the logical clock using the rules introduced in [2] if the process is descheduled for communication (state D-INT and D-EXT), or it will 13 Pipeline Buffer R2 R1 B2 deMM B1 W2 set the logical clock according to the rules described in <ref> [3] </ref> if the process is descheduled for the timer (state D-TIM). Each monitoring interruption not only delays the currently running process, but also postpones the execution of all concurrent processes on the active process list.
Reference: [4] <author> A. d'Acierno, G. De Pietro, and U. Villano, </author> <title> A method for monitoring occam internal channels. </title> <editor> In: S.J. Turner (ed.), </editor> <title> Tools and Techniques for Transputer Applications, </title> <publisher> IOS Press, </publisher> <month> April </month> <year> 1990, </year> <pages> 190-197. </pages>
Reference-contexts: We will briefly introduce the logical clock approach in section 2, and will discuss its software implementation in monitoring occam programs on transputers. Using transputer process scheduling to obtain useful information about processor utilization and channel communication has been exploited by other researchers <ref> [4, 8] </ref>. In this paper, however, we will focus on how information on transputer process scheduling can be employed for correctly updating logical clocks and controlling inter-process communication in logical clock monitoring (sections 4 and 5).
Reference: [5] <author> U. De Carlini, </author> <title> A simple algorithm for clock synchronization in transputer networks. </title> <journal> Software Practice and Experience, </journal> <volume> 18 (4), </volume> <month> April </month> <year> 1988, </year> <pages> 331-347. </pages>
Reference-contexts: Thus, if a process is a top level process, its logical clock register is initialized to zero. However, it is necessary to synchronize the real-time clocks of the network using a clock synchronization algorithm such as <ref> [5] </ref>. If a process is a component process of a PAR construct, it may have to wait on the active process list for a period of time before starting to execute.
Reference: [6] <author> K. M. Chandy and J. Misra, </author> <title> Distributed simulation: A case study in design and verification of distributed programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-5 (5), </volume> <year> 1979, </year> <pages> 440-425. </pages>
Reference-contexts: This deadlock situation is very similar to that which arises in conservative parallel discrete-event simulation (PDES), with logical time having the role of simulation time. A deadlock avoidance algorithm developed for PDES (for example, the null-message algorithm <ref> [6] </ref>) should therefore be adopted to avoid such deadlocks in logical clock monitoring. 5.3. Logical Clock Update A logical clock register is allocated to a process when it starts to execute. The start of a process is detected when the monitor is woken up by a process.start hook.
Reference: [7] <author> R. D. Dowsing, </author> <title> Introduction to Concurrency Using Occam. </title> <publisher> Van Nostrand Reinhold, </publisher> <year> 1988. </year>
Reference-contexts: So, the intrusiveness of monitoring can be reduced to an acceptable level. To demonstrate this transparency, we use our implementation of this approach to monitor a multiple readers and writers program on both a single transputer and a network of transputers. The multiple readers and writers program <ref> [7] </ref>, shown in figure 8, is one in which several writers compete for sending their books (or whatever) to the readers, and several readers also compete for receiving these books.
Reference: [8] <author> D. N. M. Ho, S. W. Lau, and F. C. M. Lau, </author> <title> Efficient tools for Transputer monitoring. </title> <editor> In: J.A. Board (Ed.), </editor> <booktitle> Transputer Research and Applications 2, </booktitle> <publisher> IOS Press, </publisher> <month> Oct </month> <year> 1989, </year> <pages> 27-40. </pages>
Reference-contexts: We will briefly introduce the logical clock approach in section 2, and will discuss its software implementation in monitoring occam programs on transputers. Using transputer process scheduling to obtain useful information about processor utilization and channel communication has been exploited by other researchers <ref> [4, 8] </ref>. In this paper, however, we will focus on how information on transputer process scheduling can be employed for correctly updating logical clocks and controlling inter-process communication in logical clock monitoring (sections 4 and 5).
Reference: [9] <author> INMOS, </author> <title> Transputer Instruction Set | A Compiler Writer's Guide. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: Processes on the low priority active list are executed in a time-sliced fashion. A low priority occam process can be in one of eleven states, as shown in figure 2: this diagram (which is based on one given in [13]) also describes graphically the scheduling of an occam process <ref> [9, 11] </ref>. In the following sections, the policies for logical clock update and communication control are constructed mainly in accordance with this diagram. The transputer also supports message passing between concurrent processes.
Reference: [10] <author> Leslie Lamport, </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21 (7), </volume> <month> July </month> <year> 1978, </year> <pages> 558-565. </pages>
Reference-contexts: Usually, the monitoring of a parallel program influences program behaviour, because the attempt to gain information from the program may slow down the execution of the monitored processes by various degrees. Therefore, the original temporal relations <ref> [10] </ref> between those processes will be destroyed. However, in general, parallel and sequential programs differ only in the inter-process communication. Thus, if the monitor can ensure that the communication ordering on each process is kept unchanged, the original temporal relations will remain unaffected.
Reference: [11] <author> D. A. P. Mitchell, J. A. Thompson, G. A. Manson, and G. R. Brookes, </author> <title> Inside the Transputer. </title> <publisher> Blackwell Scientific Publications, </publisher> <year> 1990. </year>
Reference-contexts: Processes on the low priority active list are executed in a time-sliced fashion. A low priority occam process can be in one of eleven states, as shown in figure 2: this diagram (which is based on one given in [13]) also describes graphically the scheduling of an occam process <ref> [9, 11] </ref>. In the following sections, the policies for logical clock update and communication control are constructed mainly in accordance with this diagram. The transputer also supports message passing between concurrent processes.
Reference: [12] <author> Roger Shepherd and Peter Thompson, </author> <title> T9000 Systems Workshop, </title> <institution> University of Kent, </institution> <month> Sept </month> <year> 1992. </year>
Reference-contexts: This paper has described a novel approach to the monitoring of parallel programs. Although the mechanism has been described in terms of the monitoring of occam programs on the current generation of transputers, most of the techniques described may readily be applied to the T9000 transputer <ref> [12] </ref>. In addition, there are some features of 15 the T9000 which should significantly simplify the implementation of the logical clock approach, in particular, the availability of an atomic operation to swap the front and back registers of an active list as a pair.
Reference: [13] <institution> Polytechnic of Central London, Transim User Manual. PCL, </institution> <year> 1989. </year>
Reference-contexts: There is an active process list for each priority. Processes on the low priority active list are executed in a time-sliced fashion. A low priority occam process can be in one of eleven states, as shown in figure 2: this diagram (which is based on one given in <ref> [13] </ref>) also describes graphically the scheduling of an occam process [9, 11]. In the following sections, the policies for logical clock update and communication control are constructed mainly in accordance with this diagram. The transputer also supports message passing between concurrent processes.
Reference: [14] <author> N. Youngman, </author> <title> Static analysis and transformation of Occam code for Transputer mon itoring. M.Sc. </title> <type> thesis, </type> <institution> Dept. of Computer Science, University of Exeter, </institution> <month> Sept </month> <year> 1989. </year> <month> 16 </month>
Reference-contexts: An example of this is the monitoring of occam ALT communications. * Inserting monitoring hooks at the source level presents many problems <ref> [14] </ref>. For example, it involves unacceptable increases in the size of many occam programs, and it also makes it difficult to obtain information about program structure.
References-found: 14

