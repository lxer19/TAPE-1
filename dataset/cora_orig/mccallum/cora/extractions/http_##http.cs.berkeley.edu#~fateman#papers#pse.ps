URL: http://http.cs.berkeley.edu/~fateman/papers/pse.ps
Refering-URL: http://http.cs.berkeley.edu/~fateman/algebra.html
Root-URL: http://www.cs.berkeley.edu
Title: Problem Solving Environments and Symbolic Computing  
Author: Richard J. Fateman 
Note: Contents  
Date: July 14, 1997  
Affiliation: University of California, Berkeley  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> V. Anupam and C. Bajaj. </author> <title> Collaborative Multimedia Scientific Design in SHASTRA. </title> <booktitle> Proc. of the 1993 ACM SIGGRAPH Symposium on Multimedia. </booktitle> <address> Anaheim, CA. </address>
Reference: [2] <author> Grant O. Cook, Jr. </author> <title> Code Generation in ALPAL using Symbolic Techniques, </title> <booktitle> in Proceedings of the International Symposium on Symbolic and Algebraic Computation, </booktitle> <year> 1992, </year> <editor> P. Wang, Ed., </editor> <address> Berkeley CA, 1992, </address> <publisher> ACM, </publisher> <address> New York, </address> <pages> pp. 27-35. </pages>
Reference-contexts: Finite element code is but one example of an area where symbolic manipulation seems plausible as an adjunct to numerical code generation. Other systems (e.g. <ref> [2] </ref>) aimed at other application techniques or even specific problems are under investigation, and there is a substantial literature developing here.
Reference: [3] <author> D. Barton, K. M. Willers, and R. V. M.Zahar. </author> <title> "Taylor Series Methods for Ordinary Differential Equations An evaluation," </title> <note> in Mathematical Software J. </note> <editor> R. Rice (ed). </editor> <publisher> Academic Press (1971) 369-390. </publisher>
Reference-contexts: Some of the more immediate results seem quite pleasing. We suspect they are totally ignored by the numerical computing establishment. The basic idea is quite simple and elegant, and an excellent account may be found in a paper by Barton et al <ref> [3] </ref>. <p> How good are these methods? It is hard to evaluate them against rou tines whose measure of goodness is "number of function evaluations" because 15 the Taylor series does NOT evaluate the function at all! To quote from Bar--ton <ref> [3] </ref>, "[The method of Taylor series] has been resetricted and its numerical theory neglected merely because adequate software in the form of automatic programs for the method has been nonexistent.
Reference: [4] <author> R. Fateman. </author> <title> "Symbolic Mathematical Computing: Orbital dynamics and applications to accelerators," </title> <booktitle> Particle Accelerators 19 Nos.1-4, </booktitle> <pages> pp. 237-245. </pages>
Reference-contexts: An example from celestial mechanics (or equivalently, accelerator physics <ref> [4] </ref>) is the solution to the "Euler equation" E = u + e sin (E) which is solved iteratively to form an expansion in powers of the small quan-tity e. Let A 0 be 0. Then suppose E = u+A k is the solution correct to order k in e.
Reference: [5] <author> R. Fateman and W. Kahan. </author> <title> Improving Exact Integrals from Symbolic Algebra Systems. </title> <type> Ctr. </type> <institution> for Pure and Appl. Math. </institution> <type> Report 386, </type> <institution> U.C. Berkeley. </institution> <year> 1986. </year>
Reference-contexts: Even a moment's thought suggests a better answer is log (b=a). Or if we are going to do this right, a numerically preferable formula would be something like "if 0:5 &lt; b=a &lt; 2:0 then 2 arctanh ((b a)=(b + a)) else log (b=a)." <ref> [5] </ref>. Consider, in IEEE double precision, b = 10 15 and a = b + 1: the first formula gives 7:1e 15, the second gives the far more accurate 10:e 15.
Reference: [6] <author> R. Fateman. </author> <title> "Honest Plotting, Global Extrema, and Interval Arithmetic," </title> <booktitle> Proc. Int'l Symp. on Symbolic and Algebraic Computation (ACM Press), </booktitle> <address> (ISSAC-92) Berkeley, CA. </address> <month> July, </month> <year> 1992. </year> <pages> 216-223. </pages>
Reference-contexts: Points of inflection can be found. Asymptotes and other limiting behaviors can be detect (e.g. "for large x approaches log x from below). By using interval arithmetic <ref> [6] </ref>, areas of the function in which additional sampling might be justified, can be detected. In some cases exact arithmetic, rather than floating-point, may be justified; perhaps a limit calculation is appropriate.
Reference: [7] <author> P. Fritzson and D. Fritzson. </author> <title> The need for high-level programming support in scientific computing applied to mechanical analysis. </title> <journal> Computer and Structures 45 no. </journal> <volume> 2, </volume> <pages> (1992) pp. 387-395. </pages>
Reference-contexts: At the moment, this latter approach seems more immediately illuminating, and likely to demonstrate application sucesses. We discuss these approaches in slightly more detail below. 24 4.1 Learning from specifics As an example of assessing the compromises needed to solve problems effectively, consider the work of Fritzson and Fritzson <ref> [7] </ref> who discuss several real-life mechanical design scenarios. One is modeling the behavior of a 20-link saw chain when cutting wood, another is the modeling of a roller-bearing.
Reference: [8] <author> E. Gallopoulos, E. Houstis and J. R. Rice. </author> <title> "Future Research Directions in Problem Solving Environments for Computational Science," </title> <booktitle> Report 33 of a Workshop on Research Directions in Integrating Numerical Analy--sis, Symbolic Computing, Computational Geometry, and Artificial Intelligence for Computational Science, </booktitle> <address> April, 1991 Washington DC Ctr. </address> <institution> for Supercomputing Res. Univ. of Ill. </institution> <address> Urbana (rpt 1259), </address> <pages> 51 pp. </pages>
Reference-contexts: In fact, we generally have to shift gears considerably so as to consider the design of a system that is relatively "open" and expressive. We turn to the currently evolving concept: that of a "problem solving environment" (PSE <ref> [8] </ref>) to help a user define a problem clearly, search for its solution, and understand that solution. We are also concerned with a kind of meta-PSE: a PSE for programmers of PSEs. <p> The timely retrieval of this data may be a legitimate problem to address as a component of a problem solving environment 7 . 3 Symbolic Manipulation Systems as Glue Gallopoulos et al <ref> [8] </ref> suggest that symbolic manipulation systems already have some of the critical characteristics of the glue for assembling a PSE but are not explicit in how this might actually work. Let's be more specific about aspects of glue, as well as help in providing organizing principles (a backbone).
Reference: [9] <author> K. O. Geddes, S. R. Czapor and G. Labahn. </author> <title> Algorithms for Computer Algebra. </title> <publisher> Kluwer, </publisher> <year> 1992. </year>
Reference: [10] <author> A. Griewank and G. F. Corliss (eds.) </author> <title> Automatic Differentiation of Algorithms: Theory, Implementation, and Application. </title> <booktitle> Proc. of the First SIAM Workshop on Automatic Differentiation. </booktitle> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1991. </year>
Reference-contexts: Especially if you do not wish to waste time, the task is rather more difficult. A recent book edited by Griewank and Corliss <ref> [10] </ref>. considers a wide range of tools: from numerical differentiation, through pre-processing of languages to produce Fortran, to new language designs entirely (for example, embodying Taylor-series representations of scalar values).
Reference: [11] <author> P. Henrici. </author> <title> Applied and Computational Complex Analysis vol. 1 (Power series, integration, conformal mapping, location of zeros) Wiley-Interscience, </title> <year> 1974. </year>
Reference-contexts: There is a large literature on the solution of ordinary differential equations. Almost all of it concerns numerical solutions, but there is a small corner of it devoted to solution by power series and analytic continuation. There is a detailed exposition by Henrici <ref> [11] </ref> of the background including "applications" of analytic continuation. In fact his results are somewhat theoretical, but they provide a rigorous if pessimistic foundation. Some of the more immediate results seem quite pleasing. We suspect they are totally ignored by the numerical computing establishment.
Reference: [12] <author> Richard D. Jenks and Robert S. Sutor. </author> <title> AXIOM, the Scientific Computation System. </title> <publisher> NAG and Springer Verlag, </publisher> <address> NY, </address> <year> 1992. </year>
Reference-contexts: Two alternative views that have emerged from the mathematics and computer science (not AI) community resemble the "top-down" vs "bottom-up" design controversy that reappears in many contexts. A top-down approach is epitomized by AXIOM <ref> [12] </ref>. The goal is to lay out a hierarchy of concepts and relationships starting with "Set" and build upon it all of mathematics (as well as abstract and concrete data structures).
Reference: [13] <author> N. Kajler, </author> <title> A Portable and Extensible Interface for Computer Algebra Systems, </title> <booktitle> in Proceedings of the International Symposium on Symbolic and Algebraic Computation, </booktitle> <year> 1992, </year> <editor> P. Wang Ed., </editor> <address> Berkeley CA, 1992, </address> <publisher> ACM New York, </publisher> <pages> pp. 376-386. </pages>
Reference-contexts: Do we really even understand how to link programs together? [21] CAS/PI <ref> [13] </ref> We have direct calls, multiple interconnected processes, input/ouput streams, files, etc.
Reference: [14] <author> W. Kahan. </author> <title> "Handheld Calculator Evaluates Integrals," </title> <journal> Hewlett-Packard Journal 31, </journal> <volume> 8, </volume> <year> 1980, </year> <pages> 23-32. </pages>
Reference-contexts: Example: f (x) = 1=(1 + z 64 ) whose integral is F (z) = 32 k=1 c k arctanh z + 1=z s k arctan z 1=z where c k := cos ((2k 1)=64) and s k := sin ((2k 1)=64). <ref> [14] </ref> Other examples abound when the closed form, at least under usual numerical evaluation rules, is either not stable for computing, or inefficient. Perhaps the most trivial example is R b a x 1 dx which most computer algebra systems give as log b log a.
Reference: [15] <author> E. Kant, R. Keller, S. </author> <title> Steinberg (prog. </title> <booktitle> comm.) AAAI Fall 1992 Symposium Series Intelligent Scientific Computation, Working Notes. </booktitle> <address> Oct. 1992, Cambridge MA. </address>
Reference: [16] <author> D. E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol 1. </volume> <publisher> Addison-Wesley, </publisher> <year> 1968. </year>
Reference: [17] <author> Edmund A. Lamagna, M. B. Hayden, and C. W. </author> <title> Johnson The Design of a User Interface to a Computer Algebra System for Introductory Calculus, </title> <booktitle> in Proceedings of the International Symposium on Symbolic and Algebraic Computation, </booktitle> <year> 1992, </year> <editor> P. Wang Ed., </editor> <address> Berkeley CA, 1992, </address> <publisher> ACM New York, </publisher> <pages> pp. 358-368. </pages>
Reference: [18] <author> J. C. R. Licklider, </author> <title> "Man-Computer Symbiosis," IRE Trans. </title> <booktitle> on Human Factors in Electronics, </booktitle> <month> March </month> <year> 1960. </year> <month> 34 </month>
Reference-contexts: What have we learned in this time about prospects for automation of mathematics? The grand goal of some early CAS research was the development of either an automated problem solver, or the development of a "symbiotic" human-machine system that could be used in analyzing mathematical models or similar tasks <ref> [18] </ref>. As an easily achievable goal, the computer system would be an interactive desk-calculator with symbols. At some intermediate level, a system would be a kind of "robotic graduate student equivalent": a tireless, algebra engine capable of exhibiting some cleverness in limited circumstances.
Reference: [19] <author> W. A. Martin and R. J. Fateman. </author> <booktitle> "The MACSYMA System" Proc. 2nd Symp. on Symbolic and Algeb. </booktitle> <address> Manip. March, 1971, Los Angeles, CA. p. </address> <pages> 59-75. </pages>
Reference-contexts: At some intermediate level, a system would be a kind of "robotic graduate student equivalent": a tireless, algebra engine capable of exhibiting some cleverness in limited circumstances. In the optimistic view of pioneers in the 1960s, some researchers (e.g. W. A. Martin <ref> [19] </ref>) felt that by continuing to amass more "mathematical facts" in computer systems, we would eventually see a computer system that, in important application areas, would be a reasonably complete problem solver: one that can bridge the gap between a problem and a solution 1 Although some numeric programs deal with <p> We hope to benefit from the current increase in exploration and design of languages for interaction, scripting, and communication. 4 Two short-term directions for symbolic com puting Martin's <ref> [19] </ref> goal of building a general assistant, an artificially intelligent robot mathematician composed of a collection of "facts" seems, in retrospect, too vague and ambitious.
Reference: [20] <author> W. H. Press, B. P. Flannery, S. A. Teukolsky and W. T. Vetterling. </author> <title> Numerical Recipes (Fortran), </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge UK, </address> <year> 1989. </year>
Reference-contexts: It seems that handling this with a program is like swatting a fly with a cannon. Nevertheless, even polynomial evaluation has its subtleties, and we will start with a somewhat real-life exercise related to this. Consider the Fortran program segment from <ref> [20] </ref> (p. 178) computing an approximation to a Bessel function: ... DATA Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9/0.39894228D0,-0.3988024D-1, * -0.362018D-2,0.163801D-2,-0.1031555D-1,0.2282967D-1, ...
Reference: [21] <author> James Purilo. </author> <title> Polylith: An Environment to Support Management of Tool Interfaces, </title> <journal> ACM SIGPLAN Notices, </journal> <volume> vol 20 no. </volume> <month> 7 (July, </month> <pages> 1985) pp 7-12. </pages>
Reference-contexts: Do we really even understand how to link programs together? <ref> [21] </ref> CAS/PI [13] We have direct calls, multiple interconnected processes, input/ouput streams, files, etc.
Reference: [22] <author> Warren Teitelman. </author> <title> Pilot: A Step toward Man-computer Symbiosis, MAC-TR-32 Project Mac, </title> <publisher> MIT Sept. </publisher> <year> 1966, </year> <pages> 193 pages. </pages>
Reference-contexts: Often we see experimentation in program manipulation within the Lisp programming language because the data representations and the program representations have been so close 6 . For example, in an interesting and influential thesis project, Warren Teit-elman <ref> [22] </ref> at MIT in 1966 described the use of an interactive environment to assist in developing a high-level view of the programming task itself. His PILOT system showed how the user could "advise" arbitrary programs - generally without knowing their internal structure at all to modify their behavior.
Reference: [23] <author> P. S. Wang. </author> <title> "FINGER: A Symbolic System for Automatic Generation of Numerical Programs in Finite Element Analysis," </title> <journal> J. </journal> <note> Symbolic Computing 2 no. 3 Sept. </note> <year> 1986). </year> <pages> 305-316. </pages>
Reference-contexts: physical simulation result can be difficult when you have exhausted your fixed maximum double-precision format, and are still uncertain. 2.6 Finite element analysis, and similar environments Formula generation needed to automate the use of finite element analysis code has been a target for several packages using symbolic mathematics (see Wang <ref> [23] </ref> for example). It is notable that even though some of the manipulations would seem to be routine differentiation and integration there are nevertheless subtleties that make naive versions of algorithms inadequate to solve large problems.
Reference: [24] <author> Michael C. Wirth. </author> <title> On the Automation of Computational Physics. </title> <type> PhD. </type> <institution> diss. Univ. Calif., Davis School of Aplied Science, Lawrence Livermore Lab., </institution> <month> Sept. </month> <year> 1980. </year> <month> 35 </month>
Reference-contexts: We can date back to at least the late 1970s, ambitious efforts using symbolic mathematics systems (e.g. M. Wirth <ref> [24] </ref> who used Macsyma to automate work in computational physics).
References-found: 24

