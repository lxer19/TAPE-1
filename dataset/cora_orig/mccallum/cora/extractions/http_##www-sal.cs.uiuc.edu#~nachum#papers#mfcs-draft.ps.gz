URL: http://www-sal.cs.uiuc.edu/~nachum/papers/mfcs-draft.ps.gz
Refering-URL: http://sal.cs.uiuc.edu/~nachum/papers/
Root-URL: http://www.cs.uiuc.edu
Email: nachum@uiuc.edu  
Title: When are Two Rewrite Systems More than None?  
Author: Nachum Dershowitz 
Address: Urbana, IL 61801, USA  
Affiliation: Department of Computer Science, University of Illinois  
Abstract: It is important for programs to have modular correctness properties. We look at non-deterministic programs expressed as term-rewriting systems (which compute normal forms of input terms) and consider the case where individual systems share constructors, but not defined symbols. We present some old and new sufficient conditions under which termination (existence of normal forms, regardless of computation strategy) and confluence (uniqueness) are preserved by such combina tions.
Abstract-found: 1
Intro-found: 1
Reference: [Avenhaus and Madlener, 1990] <author> Jurgen Avenhaus and Klaus Madlener. </author> <title> Term rewriting and equational reasoning. </title> <editor> In R. B. Banerji, editor, </editor> <booktitle> Formal Techniques in Artificial Intelligence: A Sourcebook, </booktitle> <pages> pages 1-41. </pages> <publisher> Elsevier, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference: [Bachmair and Dershowitz, 1986] <author> Leo Bachmair and Nachum Dershowitz. </author> <title> Commutation, transformation, and termination. </title> <editor> In J. H. Siekmann, editor, </editor> <booktitle> Proceedings of the Eighth International Conference on Automated Deduction (Oxford, England), volume 230 of Lecture Notes in Computer Science, </booktitle> <pages> pages 5-20, </pages> <address> Berlin, July 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In the following circumstances, it is known that the union of two constructor sharing terminating systems is terminating: (a) One system is left-linear; the other is right linear (no variable appears more than once on the right side) and bright <ref> [ Bachmair and Dershowitz, 1986 ] </ref> . (b) The systems are each finitely-branching (no term rewrites in one step to infinitely many terms) and remain terminating when combined with the (non-confluent, nonbright) system fh (x; y) ! x; h (x; y) ! yg (for new function symbol h) [ Gramlich, 1994
Reference: [Bidoit, 1981] <author> Michel Bidoit. </author> <title> Une methode de presentation de types abstraits: Applications. </title> <type> PhD thesis, </type> <institution> Universite de Paris-Sud, Orsay, France, </institution> <month> June </month> <year> 1981. </year> <note> Rapport 3045. </note>
Reference-contexts: Confluence of the union follows from termination of the union by Knuth's Critical Pair Lemma [ Knuth and Bendix, 1970 ] , so one needs to find conditions under which termination is preserved for confluent systems. Modularity of convergence was investigated in <ref> [ Bidoit, 1981 ] </ref> .
Reference: [Dershowitz and Jouannaud, 1990] <author> Nachum Dershowitz and Jean-Pierre Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Methods and Semantics, chapter 6, </booktitle> <pages> pages 243-320. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference: [Dershowitz et al., 1997] <author> Nachum Dershowitz, Maribel Fernandez, and Jean-Pierre Jouannaud. </author> <title> Modular confluence revisited: The constructor-sharing case, </title> <note> 1997. In preparation. </note>
Reference-contexts: A careful analysis of why modularity fails <ref> [ Dershowitz et al., 1997 ] </ref> shows that at the crux of the problem lie certain instances s and tt of terms s and t appearing in left sides of one system such that tt contains s as a subterm, but no other defined symbols.
Reference: [Dershowitz, 1981] <author> Nachum Dershowitz. </author> <title> Termination of linear rewriting systems (preliminary version). </title> <booktitle> In Proceedings of the Eighth International Colloquium on Automata, Languages and Programming (Acre, Israel), volume 115 of Lecture Notes in Computer Science, </booktitle> <pages> pages 448-458, </pages> <address> Berlin, </address> <month> July </month> <year> 1981. </year> <booktitle> European Association of Theoretical Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The above results follow from this observation. 3 Termination A rewrite system (or any binary relation) is terminating if there are no infinite derivations t 1 ! t 2 ! . Modularity of termination was considered in <ref> [ Dershowitz, 1981 ] </ref> .
Reference: [Dershowitz, 1995] <author> Nachum Dershowitz. </author> <title> Hierarchical termination. </title> <editor> In N. Dershowitz and N. Lindenstrauss, editors, </editor> <booktitle> Proceedings of the Fourth International Workshop on Conditional and Typed Rewriting Systems (Jerusalem, </booktitle> <address> Israel, </address> <month> July </month> <year> 1994), </year> <booktitle> volume 968 of Lecture Notes in Computer Science, </booktitle> <pages> pages 89-105, </pages> <address> Berlin, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: x; h (x; y) ! yg (for new function symbol h) [ Ohlebusch, 1994b ] . (d) Both systems bright [ Gramlich, 1994; Ohlebusch, 1994b ] . (e) The systems are both non-duplicating (that is, each rule's right side contains no more occurrences of any variable than does the left) <ref> [ Dershowitz, 1995; Ohlebusch, 1994b ] </ref> . (f) One of the systems is both bright and non-duplicating [ Dershowitz, 1995; Ohlebusch, 1994b ] . <p> Both systems bright [ Gramlich, 1994; Ohlebusch, 1994b ] . (e) The systems are both non-duplicating (that is, each rule's right side contains no more occurrences of any variable than does the left) <ref> [ Dershowitz, 1995; Ohlebusch, 1994b ] </ref> . (f) One of the systems is both bright and non-duplicating [ Dershowitz, 1995; Ohlebusch, 1994b ] . <p> In the following circumstances, it is known that the union of two constructor sharing convergent systems is convergent: (a) For each system no left side unifies with a proper subterm of any left side (with variables of the two sides considered disjoint) <ref> [ Gramlich, 1992; Dershowitz, 1995 ] </ref> . (b) They have no shared constructors and both are left-linear [ Toyama et al., 1995 ] . (c) One is constructor-based (proper subterms of left sides do not contain defined symbols) and left-linear [ Dershowitz, 1997 ] .
Reference: [Dershowitz, 1997] <editor> Nachum Dershowitz. Innocuous constructor-sharing combinations. In H. Comon, editor, </editor> <booktitle> Proceedings of the Eighth International Conference on Rewriting Techniques and Applications (Sitges, Spain), number 1232 in Lecture Notes in Computer Science, </booktitle> <pages> pages 203-216, </pages> <address> Berlin, June 1997. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: each rule is a defined symbol, not a variable or constructor) [ Ohlebusch, 1994a ] . (d) Each system is normalizing (in the sense that every term has at least one normal form) [ Ohlebusch, 1994a ] . (e) One system is terminating and left-linear and the other is bright <ref> [ Dershowitz, 1997 ] </ref> . (This list and those in the sequel omit some known conditions that involve undecidable properties of the union.) The necessity of these conditions may be seen from the following standard example [ Huet, 1980 ] : g (x; x) ! 0 a ! c (a) The <p> left side (with variables of the two sides considered disjoint) [ Gramlich, 1992; Dershowitz, 1995 ] . (b) They have no shared constructors and both are left-linear [ Toyama et al., 1995 ] . (c) One is constructor-based (proper subterms of left sides do not contain defined symbols) and left-linear <ref> [ Dershowitz, 1997 ] </ref> . The case when both are constructor-based [ Middeldorp and Toyama, 1993 ] fol lows from (a).
Reference: [Drosten, 1989] <author> K. Drosten. Termersetzungssysteme. </author> <type> PhD thesis, </type> <institution> Universitat Passau, Passau, </institution> <address> Germany, 1989. Informatik Fachberichte 210, </address> <publisher> Springer-Verlag (Berlin). </publisher>
Reference-contexts: The case when both are constructor-based [ Middeldorp and Toyama, 1993 ] fol lows from (a). Even without shared constructors, modularity fails in general (as seen, for example, from the following nonterminating combination due to <ref> [ Drosten, 1989 ] </ref> ): g (x; x; y) ! y f (a; b; x) ! f (x; x; x) a ! 0 (C) The upper part is not left-linear; the lower part is not constructor-based and a and b appear as proper subterms on its left.
Reference: [Gramlich, 1992] <author> Bernhard Gramlich. </author> <title> Relating innermost, weak, uniform and modular termination of term rewriting systems. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> Proceedings of the Conference on Logic Programming and Automated Reasoning (St. Petersburg, Rus-sia), volume 624 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 285-296, </pages> <address> Berlin, July 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In the following circumstances, it is known that the union of two constructor sharing convergent systems is convergent: (a) For each system no left side unifies with a proper subterm of any left side (with variables of the two sides considered disjoint) <ref> [ Gramlich, 1992; Dershowitz, 1995 ] </ref> . (b) They have no shared constructors and both are left-linear [ Toyama et al., 1995 ] . (c) One is constructor-based (proper subterms of left sides do not contain defined symbols) and left-linear [ Dershowitz, 1997 ] .
Reference: [Gramlich, 1994] <author> Bernhard Gramlich. </author> <title> Generalized sufficient conditions for modular termination of rewriting. Applicable Algebra in Engineering, </title> <journal> Communication and Computing, </journal> <volume> 5 </volume> <pages> 131-158, </pages> <year> 1994. </year>
Reference-contexts: and bright [ Bachmair and Dershowitz, 1986 ] . (b) The systems are each finitely-branching (no term rewrites in one step to infinitely many terms) and remain terminating when combined with the (non-confluent, nonbright) system fh (x; y) ! x; h (x; y) ! yg (for new function symbol h) <ref> [ Gramlich, 1994 ] </ref> . (c) The systems do not share constructors and each remains terminating when combined with fh (x; y) ! x; h (x; y) ! yg (for new function symbol h) [ Ohlebusch, 1994b ] . (d) Both systems bright [ Gramlich, 1994; Ohlebusch, 1994b ] . (e) <p> ! yg (for new function symbol h) [ Gramlich, 1994 ] . (c) The systems do not share constructors and each remains terminating when combined with fh (x; y) ! x; h (x; y) ! yg (for new function symbol h) [ Ohlebusch, 1994b ] . (d) Both systems bright <ref> [ Gramlich, 1994; Ohlebusch, 1994b ] </ref> . (e) The systems are both non-duplicating (that is, each rule's right side contains no more occurrences of any variable than does the left) [ Dershowitz, 1995; Ohlebusch, 1994b ] . (f) One of the systems is both bright and non-duplicating [ Dershowitz, 1995; Ohlebusch,
Reference: [Hindley, 1964] <author> J. Roger Hindley. </author> <title> The Church-Rosser Property and a Result in Com-binatory Logic. </title> <type> PhD thesis, </type> <year> 1964. </year>
Reference-contexts: Confluence is equivalent to the Church-Rosser property: s; t ! fl v whenever s $ fl t. The confluence of unions of confluent relations was considered early on in <ref> [ Hindley, 1964; Rosen, 1973; Staples, 1975 ] </ref> .
Reference: [Huet, 1980] <author> Gerard Huet. </author> <title> Confluent reductions: Abstract properties and applications to term rewriting systems. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 27(4) </volume> <pages> 797-821, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: Since we are interested here in combinations of conceptually independent programs, we must rule out such cases from our discussions (as is indeed the convention of some authors, including <ref> [ Huet, 1980 ] </ref> ): a rule with a new variable on the right could introduce arbitrary nesting of variegated symbols; a rule with a variable for left side would apply at all positions of all terms and interfere with any other intended computation step. <p> ] . (e) One system is terminating and left-linear and the other is bright [ Dershowitz, 1997 ] . (This list and those in the sequel omit some known conditions that involve undecidable properties of the union.) The necessity of these conditions may be seen from the following standard example <ref> [ Huet, 1980 ] </ref> : g (x; x) ! 0 a ! c (a) The upper part is not left-linear; the lower is not normalizing; c is a shared constructor; neither is bright.
Reference: [Klop, 1992] <author> Jan Willem Klop. </author> <title> Term rewriting systems. </title> <editor> In S. Abramsky, D. M. Gab-bay, and T. S. E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 2, chapter 1, </volume> <pages> pages 1-117. </pages> <publisher> Oxford University Press, Oxford, </publisher> <year> 1992. </year>
Reference: [Knuth and Bendix, 1970] <author> Donald E. Knuth and P. B. Bendix. </author> <title> Simple word problems in universal algebras. </title> <editor> In J. Leech, editor, </editor> <booktitle> Computational Problems in Abstract Algebra, </booktitle> <pages> pages 263-297. </pages> <publisher> Pergamon Press, Oxford, </publisher> <editor> U. K., </editor> <booktitle> 1970. Reprinted in Automation of Reasoning 2, </booktitle> <publisher> Springer-Verlag, Berlin, </publisher> <pages> pp. </pages> <month> 342-376 </month> <year> (1983). </year>
Reference-contexts: Confluence of the union follows from termination of the union by Knuth's Critical Pair Lemma <ref> [ Knuth and Bendix, 1970 ] </ref> , so one needs to find conditions under which termination is preserved for confluent systems. Modularity of convergence was investigated in [ Bidoit, 1981 ] .
Reference: [Marchiori, 1995] <author> Massimo Marchiori. </author> <title> Modularity of completeness revisited. </title> <booktitle> In Proceedings of the Sixth International Conference on Rewriting Techniques and Applications (Kaiserslautern, Germany), volume 914 of Lecture Notes in Computer Science, </booktitle> <pages> pages 2-10, </pages> <address> Berlin, April 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference: [Middeldorp and Toyama, 1993] <author> Aart Middeldorp and Yoshihito Toyama. </author> <title> Completeness of combinations of constructor systems. </title> <journal> J. Symbolic Computation, </journal> <volume> 15 </volume> <pages> 331-348, </pages> <year> 1993. </year>
Reference-contexts: The case when both are constructor-based <ref> [ Middeldorp and Toyama, 1993 ] </ref> fol lows from (a).
Reference: [Ohlebusch, 1994a] <author> Enno Ohlebusch. </author> <title> On the modularity of confluence of constructor-sharing term rewriting systems. </title> <editor> In S. Tison, editor, </editor> <booktitle> Proceedings of the Nineteenth International Colloquium on Trees in Algebra and Programming (Edinburgh, UK), volume 787 of Lecture Notes in Computer Science, </booktitle> <pages> pages 262-275, </pages> <address> Berlin, April 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: no variable appears more than once on the left side) [ Raoult and Vuillemin, 1980 ] . (b) There are no shared constructors [ Toyama, 1987b ] . (c) Both systems are bright (meaning that the right-hand side of each rule is a defined symbol, not a variable or constructor) <ref> [ Ohlebusch, 1994a ] </ref> . (d) Each system is normalizing (in the sense that every term has at least one normal form) [ Ohlebusch, 1994a ] . (e) One system is terminating and left-linear and the other is bright [ Dershowitz, 1997 ] . (This list and those in the sequel <p> constructors [ Toyama, 1987b ] . (c) Both systems are bright (meaning that the right-hand side of each rule is a defined symbol, not a variable or constructor) <ref> [ Ohlebusch, 1994a ] </ref> . (d) Each system is normalizing (in the sense that every term has at least one normal form) [ Ohlebusch, 1994a ] . (e) One system is terminating and left-linear and the other is bright [ Dershowitz, 1997 ] . (This list and those in the sequel omit some known conditions that involve undecidable properties of the union.) The necessity of these conditions may be seen from the following
Reference: [Ohlebusch, 1994b] <author> Enno Ohlebusch. </author> <title> On the modularity of termination of term rewriting systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 136(2) </volume> <pages> 333-360, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: system fh (x; y) ! x; h (x; y) ! yg (for new function symbol h) [ Gramlich, 1994 ] . (c) The systems do not share constructors and each remains terminating when combined with fh (x; y) ! x; h (x; y) ! yg (for new function symbol h) <ref> [ Ohlebusch, 1994b ] </ref> . (d) Both systems bright [ Gramlich, 1994; Ohlebusch, 1994b ] . (e) The systems are both non-duplicating (that is, each rule's right side contains no more occurrences of any variable than does the left) [ Dershowitz, 1995; Ohlebusch, 1994b ] . (f) One of the systems <p> ! yg (for new function symbol h) [ Gramlich, 1994 ] . (c) The systems do not share constructors and each remains terminating when combined with fh (x; y) ! x; h (x; y) ! yg (for new function symbol h) [ Ohlebusch, 1994b ] . (d) Both systems bright <ref> [ Gramlich, 1994; Ohlebusch, 1994b ] </ref> . (e) The systems are both non-duplicating (that is, each rule's right side contains no more occurrences of any variable than does the left) [ Dershowitz, 1995; Ohlebusch, 1994b ] . (f) One of the systems is both bright and non-duplicating [ Dershowitz, 1995; Ohlebusch, <p> x; h (x; y) ! yg (for new function symbol h) [ Ohlebusch, 1994b ] . (d) Both systems bright [ Gramlich, 1994; Ohlebusch, 1994b ] . (e) The systems are both non-duplicating (that is, each rule's right side contains no more occurrences of any variable than does the left) <ref> [ Dershowitz, 1995; Ohlebusch, 1994b ] </ref> . (f) One of the systems is both bright and non-duplicating [ Dershowitz, 1995; Ohlebusch, 1994b ] . <p> Both systems bright [ Gramlich, 1994; Ohlebusch, 1994b ] . (e) The systems are both non-duplicating (that is, each rule's right side contains no more occurrences of any variable than does the left) <ref> [ Dershowitz, 1995; Ohlebusch, 1994b ] </ref> . (f) One of the systems is both bright and non-duplicating [ Dershowitz, 1995; Ohlebusch, 1994b ] .
Reference: [Plaisted, 1993] <author> David A. Plaisted. </author> <title> Term rewriting systems. </title> <editor> In D. M. Gabbay, C. J. Hogger, and J. A. Robinson, editors, </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> volume 4, chapter 2. </volume> <publisher> Oxford University Press, Oxford, </publisher> <year> 1993. </year> <note> To appear. </note>
Reference: [Raoult and Vuillemin, 1980] <author> Jean-Claude Raoult and Jean Vuillemin. </author> <title> Operational and semantic equivalence between recursive programs. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 27(4) </volume> <pages> 772-796, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: In the following circumstances, it is known that the union of two confluent systems is confluent: (a) The systems are both left-linear (that is, no variable appears more than once on the left side) <ref> [ Raoult and Vuillemin, 1980 ] </ref> . (b) There are no shared constructors [ Toyama, 1987b ] . (c) Both systems are bright (meaning that the right-hand side of each rule is a defined symbol, not a variable or constructor) [ Ohlebusch, 1994a ] . (d) Each system is normalizing (in
Reference: [Rosen, 1973] <author> Barry K. Rosen. </author> <title> Tree-manipulating systems and Church-Rosser theorems. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 20(1) </volume> <pages> 160-187, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: Confluence is equivalent to the Church-Rosser property: s; t ! fl v whenever s $ fl t. The confluence of unions of confluent relations was considered early on in <ref> [ Hindley, 1964; Rosen, 1973; Staples, 1975 ] </ref> .
Reference: [Staples, 1975] <author> John Staples. </author> <title> Church-Rosser theorem for replacement systems. </title> <editor> In J. N. Crossley, editor, </editor> <booktitle> Algebra and Logic: 1974 Summer Research Institute of the Australian Mathematical Society, volume 450 of Lecture Notes in Mathematics, </booktitle> <pages> pages 291-307, </pages> <address> Berlin, West Germany, 1975. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Confluence is equivalent to the Church-Rosser property: s; t ! fl v whenever s $ fl t. The confluence of unions of confluent relations was considered early on in <ref> [ Hindley, 1964; Rosen, 1973; Staples, 1975 ] </ref> .
Reference: [Toyama et al., 1995] <author> Yoshihito Toyama, Jan Willem Klop, and Hendrik Pieter Baren-dregt. </author> <title> Termination for direct sums of left-linear complete term rewriting systems. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 42(6) </volume> <pages> 1275-1304, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: union of two constructor sharing convergent systems is convergent: (a) For each system no left side unifies with a proper subterm of any left side (with variables of the two sides considered disjoint) [ Gramlich, 1992; Dershowitz, 1995 ] . (b) They have no shared constructors and both are left-linear <ref> [ Toyama et al., 1995 ] </ref> . (c) One is constructor-based (proper subterms of left sides do not contain defined symbols) and left-linear [ Dershowitz, 1997 ] . The case when both are constructor-based [ Middeldorp and Toyama, 1993 ] fol lows from (a).
Reference: [Toyama, 1987a] <author> Yoshihito Toyama. </author> <title> Counterexamples to termination for the direct sum of term rewriting systems. </title> <journal> Information Processing Letters, </journal> <volume> 25 </volume> <pages> 141-143, </pages> <year> 1987. </year>
Reference-contexts: The necessity of most of these conditions can be seen from the following nonterminating union <ref> [ Toyama, 1987a ] </ref> : g (x; y) ! x f (0; 1; x) ! f (x; x; x) Its upper half is not bright; its lower half duplicates x, is not right linear, and is nonterminating when conjoined with the rules for h. 4 Convergence A convergent system is one
Reference: [Toyama, 1987b] <author> Yoshihito Toyama. </author> <title> On the Church-Rosser property for the direct sum of term rewriting systems. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 34(1) </volume> <pages> 128-143, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: In the following circumstances, it is known that the union of two confluent systems is confluent: (a) The systems are both left-linear (that is, no variable appears more than once on the left side) [ Raoult and Vuillemin, 1980 ] . (b) There are no shared constructors <ref> [ Toyama, 1987b ] </ref> . (c) Both systems are bright (meaning that the right-hand side of each rule is a defined symbol, not a variable or constructor) [ Ohlebusch, 1994a ] . (d) Each system is normalizing (in the sense that every term has at least one normal form) [ Ohlebusch,
References-found: 26

