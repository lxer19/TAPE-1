URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/project/fox/mosaic/papers/mdl-sharing.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/project/fox/mosaic/papers.html
Root-URL: http://www.cs.cmu.edu
Title: A Type-Theoretic Approach to Higher-Order Modules with Sharing  
Author: Robert Harper Mark Lillibridge 
Note: Also published as Fox Memorandum CMU-CS-FOX-93-04. This research was sponsored by the Defense Advanced Research Projects Agency, CSTO, under the title "The Fox Project: Advanced Development of Systems Software", ARPA Order No. 8313, issued by ESD/AVS under Contract No. F19628-91-C-0168. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the U.S. Government.  
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: October 1993  
Pubnum: CMU-CS-93-197  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Andrew W. Appel. </author> <title> Compiling with Continuations. </title> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference: [2] <author> Andrew W. Appel and David B. MacQueen. </author> <title> Standard ML of New Jersey. </title> <editor> In J. Maluszynski and M. Wirsing, editors, </editor> <booktitle> Third Int'l Symp. on Prog. Lang. Implementation and Logic Programming, </booktitle> <pages> pages 1-13, </pages> <address> New York, </address> <month> August </month> <year> 1991. </year> <note> Springer-Verlag. </note>
Reference: [3] <author> Edoardo Biagioni, Nicholas Haines, Robert Harper, Peter Lee, Brian G. Milnes, and Eliot B. Moss. </author> <title> ML signatures for a protocol stack. </title> <note> Fox Memorandum CMU-CS-93-170, </note> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> July </month> <year> 1993. </year>
Reference: [4] <author> Hans-Jurgen Bohm, Alan Demers, and James Donahue. </author> <title> An informal description of Russell. </title> <type> Technical Report 80-430, </type> <institution> Computer Science Department, Cornell University, </institution> <address> Ithaca, New York, </address> <year> 1980. </year>
Reference-contexts: The type-theoretic analysis of the SML modules system was initiated by MacQueen [27], and further developed by Harper and Mitchell [33, 20, 19]. This work is summarized and compared with the present work in the introduction. Our language bears some relationship to Russell <ref> [4] </ref> and Poly [30], but a detailed comparison seems difficult in the absence of a type-theoretic analysis of these languages (see [21] for an early attempt).
Reference: [5] <author> Rod Burstall and Butler Lampson. </author> <title> A kernel language for abstract data types and modules. </title> <editor> In Kahn et al. </editor> <volume> [22], </volume> <pages> pages 1-50. </pages>
Reference-contexts: For example, we could use one particular hash table implementation for small tables and another for large ones. 5 Related Work An early influential attempt to give a comprehensive type-theoretic analysis of modularity and abstraction was undertaken by Burstall and Lampson with the experimental language Pebble <ref> [5] </ref>. Their work stresses the role of dependent types and the mechanisms required to support abstraction, but does not address the problem of controlling the "degree" of abstraction. In particular, Pebble supports type and value bindings as primitive notions, but with an "opaque" typing discipline, in contrast to our calculus.
Reference: [6] <author> Luca Cardelli. </author> <title> A semantics of multiple inheritance. </title> <editor> In Kahn et al. </editor> <volume> [22], </volume> <pages> pages 51-67. </pages>
Reference: [7] <author> Luca Cardelli. </author> <title> Typeful programming. </title> <type> Technical Report 45, </type> <institution> DEC SRC, </institution> <year> 1989. </year>
Reference-contexts: In particular, Pebble supports type and value bindings as primitive notions, but with an "opaque" typing discipline, in contrast to our calculus. Cardelli's language Quest <ref> [7] </ref> has exerted a strong influence on the present work. Our approach shares with Quest the emphasis on type-theoretic methods, and is similarly based on Girard's F ! enriched with a notion of subsumption (though we depart from Cardelli's approach by omitting bounded quantification).
Reference: [8] <author> Luca Cardelli, James Donahue, Lucille Glassman, Mick Jordan, Bill Kalsow, and Greg Nelson. </author> <type> Modula-3 report (revised). Technical Report 52, </type> <institution> DEC Systems Research Center, </institution> <address> Palo Alto, CA, </address> <month> November </month> <year> 1989. </year> <month> 14 </month>
Reference: [9] <author> Luca Cardelli and Peter Wegner. </author> <title> On understanding types, data abstraction, and polymorphism. </title> <journal> Computing Surveys, </journal> <volume> 18(4), </volume> <month> December </month> <year> 1986. </year>
Reference: [10] <author> Luca Cardelli and Leroy Xavier. </author> <title> Abstract types and the dot notation. </title> <type> Technical Report 56, </type> <institution> DEC SRC, </institution> <address> Palo Alto, CA, </address> <month> March </month> <year> 1990. </year>
Reference: [11] <author> Eric Cooper, Robert Harper, and Peter Lee. </author> <title> The Fox project: Advanced development of systems software. </title> <type> Technical Report CMU-CS-91-178, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> August </month> <year> 1991. </year>
Reference: [12] <author> Nicolas G. de Bruijn. </author> <title> A survey of the project AUTOMATH. </title> <editor> In J. P. Seldin and J. R. Hindley, editors, To H. B. </editor> <booktitle> Curry: Essays in Combinatory Logic, Lambda Calculus and Formalism, </booktitle> <pages> pages 589-606. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference: [13] <editor> Emden Gansner and John Reppy. eXene. In Robert Harper, editor, </editor> <booktitle> Third International Workshop on Standard ML, </booktitle> <address> Pittsburgh, PA, </address> <month> September </month> <year> 1991. </year> <institution> School of Computer Science, Carnegie Mellon University. </institution>
Reference: [14] <author> Jean-Yves Girard. </author> <title> Interpretation Fonctionnelle et Elimination des Coupures dans l'Arithmetique d'Ordre Superieure. </title> <type> PhD thesis, </type> <institution> Universite Paris VII, </institution> <year> 1972. </year>
Reference: [15] <author> Robert Harper. </author> <title> Introduction to Standard ML. </title> <type> Technical Report ECS-LFCS-86-14, </type> <institution> Laboratory for the Foundations of Computer Science, Edinburgh University, </institution> <month> September </month> <year> 1986. </year>
Reference: [16] <author> Robert Harper and Mark Lillibridge. </author> <title> Explicit polymorphism and CPS conversion. </title> <booktitle> In Twentieth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 206-219, </pages> <address> Charleston, SC, </address> <month> January </month> <year> 1993. </year> <note> ACM, ACM. </note>
Reference: [17] <author> Robert Harper, David MacQueen, and Robin Milner. </author> <title> Standard ML. </title> <type> Technical Report ECS-LFCS-86-2, </type> <institution> Laboratory for the Foundations of Computer Science, Edinburgh University, </institution> <month> March </month> <year> 1986. </year>
Reference: [18] <author> Robert Harper, David MacQueen, and Robin Milner. </author> <title> Standard ML. </title> <type> Technical Report ECS-LFCS-86-2, </type> <institution> Laboratory for the Foundations of Computer Science, Edinburgh University, </institution> <month> March </month> <year> 1986. </year>
Reference: [19] <author> Robert Harper and John C. Mitchell. </author> <title> On the type structure of Standard ML. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(2) </volume> <pages> 211-252, </pages> <month> April </month> <year> 1993. </year> <note> (See also [33].). </note>
Reference-contexts: A comparison with their work is given in Section 4.6. The type-theoretic analysis of the SML modules system was initiated by MacQueen [27], and further developed by Harper and Mitchell <ref> [33, 20, 19] </ref>. This work is summarized and compared with the present work in the introduction. Our language bears some relationship to Russell [4] and Poly [30], but a detailed comparison seems difficult in the absence of a type-theoretic analysis of these languages (see [21] for an early attempt).
Reference: [20] <author> Robert Harper, John C. Mitchell, and Eugenio Moggi. </author> <title> Higher-order modules and the phase distinction. </title> <booktitle> In Seventeenth ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Francisco, CA, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: A comparison with their work is given in Section 4.6. The type-theoretic analysis of the SML modules system was initiated by MacQueen [27], and further developed by Harper and Mitchell <ref> [33, 20, 19] </ref>. This work is summarized and compared with the present work in the introduction. Our language bears some relationship to Russell [4] and Poly [30], but a detailed comparison seems difficult in the absence of a type-theoretic analysis of these languages (see [21] for an early attempt).
Reference: [21] <author> James G. Hook. </author> <title> Understanding russell: A first attempt. </title> <editor> In Kahn et al. </editor> <volume> [22], </volume> <pages> pages 69-85. </pages>
Reference-contexts: This work is summarized and compared with the present work in the introduction. Our language bears some relationship to Russell [4] and Poly [30], but a detailed comparison seems difficult in the absence of a type-theoretic analysis of these languages (see <ref> [21] </ref> for an early attempt).
Reference: [22] <editor> Gilles Kahn, David MacQueen, and Gordon Plotkin, editors. </editor> <booktitle> Semantics of Data Types, volume 173 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1984. </year>
Reference: [23] <author> Xavier Leroy. </author> <title> Manifest types, modules, and separate compilation. </title> <booktitle> In Proceedings of the Twenty-first Annual ACM Symposium on Principles of Programming Languages, Portland. ACM, </booktitle> <month> January </month> <year> 1994. </year>
Reference-contexts: It is easily implemented using a global variable. 13 translucent sum types. See Leroy's paper <ref> [23] </ref> for a description of his system and some comments on its relationship to ours. 6 Conclusions The main contribution of this work is the design of a calculus of modularity with the following features: * Fine control over the "degree" of abstraction through the notion of a translucent sum type.
Reference: [24] <author> Barbara Liskov and John Guttag. </author> <title> Abstraction and Specification in Program Development. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference: [25] <author> Zhaolui Luo, Robert Pollack, and Paul Taylor. </author> <title> How to use Lego: A preliminary user's manual. </title> <type> Technical Report LFCS-TN-27, </type> <institution> Laboratory for the Foundations of Computer Science, Edinburgh University, </institution> <month> October </month> <year> 1989. </year>
Reference: [26] <author> David MacQueen. </author> <title> Modules for Standard ML. </title> <booktitle> In 1984 ACM Conference on LISP and Functional Programming, </booktitle> <pages> pages 198-207, </pages> <year> 1984. </year> <note> Revised version appears in [18]. </note>
Reference: [27] <author> David MacQueen. </author> <title> Using dependent types to express modular structure. </title> <booktitle> In Thirteenth ACM Symposium on Principles of Programming Languages, </booktitle> <year> 1986. </year>
Reference-contexts: Their paper is primarily concerned with illustrating an interesting language design rather than with the type-theoretic underpinnings of such a language, though a brief sketch is provided. A comparison with their work is given in Section 4.6. The type-theoretic analysis of the SML modules system was initiated by MacQueen <ref> [27] </ref>, and further developed by Harper and Mitchell [33, 20, 19]. This work is summarized and compared with the present work in the introduction.
Reference: [28] <author> David B. MacQueen. </author> <title> An implementation of Standard ML modules. </title> <booktitle> In Proceedings of the 1988 ACM Conference on LISP and Functional Programming, Snowbird, Utah, </booktitle> <pages> pages 212-223. </pages> <publisher> ACM Press, </publisher> <month> July </month> <year> 1988. </year>
Reference: [29] <author> Per Martin-Lof. </author> <title> Constructive mathematics and computer programming. </title> <booktitle> In Sixth International Congress for Logic, Methodology, and Philosophy of Science, </booktitle> <pages> pages 153-175. </pages> <publisher> North-Holland, </publisher> <year> 1982. </year>
Reference: [30] <author> David C. J. Matthews. </author> <type> POLY report. Technical Report 28, </type> <institution> Computer Laboratory, University of Cambridge, </institution> <year> 1982. </year>
Reference-contexts: The type-theoretic analysis of the SML modules system was initiated by MacQueen [27], and further developed by Harper and Mitchell [33, 20, 19]. This work is summarized and compared with the present work in the introduction. Our language bears some relationship to Russell [4] and Poly <ref> [30] </ref>, but a detailed comparison seems difficult in the absence of a type-theoretic analysis of these languages (see [21] for an early attempt).
Reference: [31] <author> Robin Milner and Mads Tofte. </author> <title> Commentary on Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference: [32] <author> Robin Milner, Mads Tofte, and Robert Harper. </author> <title> The Definition of Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference: [33] <author> John Mitchell and Robert Harper. </author> <title> The essence of ML. </title> <booktitle> In Fifteenth ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Diego, California, </address> <month> January </month> <year> 1988. </year>
Reference-contexts: A comparison with their work is given in Section 4.6. The type-theoretic analysis of the SML modules system was initiated by MacQueen [27], and further developed by Harper and Mitchell <ref> [33, 20, 19] </ref>. This work is summarized and compared with the present work in the introduction. Our language bears some relationship to Russell [4] and Poly [30], but a detailed comparison seems difficult in the absence of a type-theoretic analysis of these languages (see [21] for an early attempt).
Reference: [34] <author> John Mitchell, Sigurd Meldal, and Neel Madhav. </author> <title> An extension of Standard ML modules with subtyping and inheritance. </title> <booktitle> In Eighteenth ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1991. </year> <month> 15 </month>
Reference-contexts: In order to make the if type check, we must give them equal types. The only way to do this is to use the subsumption rule to coerce both of their types to fb . ff::; y . x:(ff; ff!ff)g. The system described in <ref> [34] </ref> displays similar behavior, namely a forced loss of typing information when using modules in conditionals and other primitives. In that system, types are divided into two universes, U 1 , the universe of "normal" types like Int and Bool!Int, and U 2 , the universe of module types. <p> Quest does not provide an adequate treatment of modularity; our work can be seen as providing the type-theoretic basis for an extension of Quest with an expressive module system. Mitchell, et al. <ref> [34] </ref> consider an extension of the SML module system with first-class modules as a means of supporting certain object-oriented programming idioms. Their paper is primarily concerned with illustrating an interesting language design rather than with the type-theoretic underpinnings of such a language, though a brief sketch is provided.
Reference: [35] <author> John C. Mitchell and Gordon Plotkin. </author> <title> Abstract types have existential type. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(3) </volume> <pages> 470-502, </pages> <year> 1988. </year>
Reference-contexts: This coercion causes a total loss of typing information. Our system is more flexible than this because it only loses just enough information to ensure soundness. The possible uses for first-class modules have not been well explored. One known use discussed in <ref> [35] </ref> is to select at runtime between two or more ADTs which implement the same abstraction using different algorithms based on expected usage conditions.
Reference: [36] <author> Greg Nelson, </author> <title> editor. Systems Programming with Modula-3. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference: [37] <author> Benjamin Pierce. </author> <title> Bounded quantification is undecidable. </title> <booktitle> In Proceedings of the Nineteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> Albuquerque. </address> <publisher> ACM, </publisher> <month> January </month> <year> 1992. </year>
Reference: [38] <author> Benjamin C. Pierce. </author> <title> Programming with Intersection Types and Bounded Polymorphism. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> December </month> <year> 1991. </year>
Reference: [39] <author> Chris Reade. </author> <title> Elements of Functional Programming. </title> <booktitle> International Computer Science Series. </booktitle> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference: [40] <author> Nick Rothwell. </author> <title> Functional compilation from the Standard ML core language to lambda calculus. </title> <type> Technical Report ECS-LFCS-92-235, </type> <institution> Laboratory for the Foundations of Computer Science, Edinburgh University, Edinburgh, </institution> <address> Scotland, </address> <month> September </month> <year> 1992. </year>
Reference: [41] <author> Nick Rothwell. </author> <title> Miscellaneous design issues in the ML kit. </title> <type> Technical Report ECS-LFCS-92-237, </type> <institution> Laboratory for the Foundations of Computer Science, Edinburgh University, Edinburgh, </institution> <address> Scotland, </address> <month> September </month> <year> 1992. </year>
Reference: [42] <author> Zhong Shao and Andrew Appel. </author> <title> Smartest recompilation. </title> <booktitle> In Twentieth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 439-450, </pages> <address> Charleston, SC, </address> <month> January </month> <year> 1993. </year>
Reference: [43] <author> Mads Tofte. </author> <title> Principal signatures for higher-order program modules. </title> <booktitle> In Nineteenth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 189-199, </pages> <month> January </month> <year> 1992. </year>
Reference: [44] <author> Mads Tofte. </author> <title> Type abbreviations in signatures. </title> <type> Unpublished manuscript, </type> <month> August </month> <year> 1993. </year>
Reference: [45] <author> Diedrik T. van Daalen. </author> <title> The Language Theory of AUTOMATH. </title> <type> PhD thesis, </type> <institution> Technical University of Eindhoven, Eindhoven, Netherlands, </institution> <year> 1980. </year>
Reference: [46] <author> Niklaus Wirth. </author> <title> Programming in Modula-2. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
References-found: 46

