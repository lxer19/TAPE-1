URL: ftp://ftp.eecs.umich.edu/groups/gasm/reuse.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.eecs.umich.edu
Email: fheberle,loeweg@ipd.info.uni-karlsruhe.de  
Title: On ASM-Based Specification of Programming Language Semantics and Reusable Correct Compilations  
Author: Andreas Heberle and Welf Lowe 
Address: 76128 Karlsruhe, Germany,  
Affiliation: IPD, Universitat Karlsruhe,  
Abstract: We define general transformations on ASM specifications of programming language semantics. These transformations preserve the semantics of the programming language and can thus be used for the definition of correct compilations. Additionally, we define an extensible language AL for the specification of dynamic programming language semantics and describe how this allows reuse of verified transformations. Together with a library of object-oriented verified implementations this leads to a framework for the construction of correct compilers based on the formal specification of source and intermediate language. 
Abstract-found: 1
Intro-found: 1
Reference: [BS98] <author> E. Borger and W. Schulte. </author> <title> Programmer Friendly Modular Definition of the Semantics of Java. </title> <editor> In J. Alves-Foss, editor, </editor> <title> Formal Syntax and Semantics of Java, </title> <publisher> LNCS. Springer, </publisher> <year> 1998. </year>
Reference: [DiF97] <author> B. DiFranco. </author> <title> Semantica Statica e Dinamica di SQL diretto (ISO 9075) mediante i Montaggi. </title> <type> Master's thesis, </type> <institution> Universita di L'Aquila, </institution> <year> 1997. </year> <note> In preparation (in italian). </note>
Reference: [GDG + 96] <author> W. Goerigk, A. Dold, T. Gaul, G. Goos, A. Heberle, F. von Henke, U. Hoff-mann, H. Langmaack, H. Pfeifer, H. Ruess, and W. Zimmermann. </author> <title> Compiler Correctness and Implementation Verification: The Verifix Approach. </title> <booktitle> In Compiler Construction, volume 1060 of LNCS. </booktitle> <publisher> Springer, </publisher> <year> 1996. </year> <title> Poster Session, </title> <booktitle> International Conference on Compiler Construction 1996. </booktitle>
Reference-contexts: A detailed discussion of observable behavior and our notion of compiler correctness can be found in <ref> [GDG + 96] </ref> and [ZG97]. r r I/O I/O r q 4 r Fig. 1.
Reference: [GH93] <author> Yuri Gurevich and James K. Huggins. </author> <title> The Semantics of the C Programming Language. </title> <booktitle> In LNCS, </booktitle> <volume> volume 702, </volume> <pages> pages 274-308. </pages> <publisher> Springer-Verlag, </publisher> <month> February </month> <year> 1993. </year>
Reference: [Gur95] <author> Y. Gurevich. </author> <title> Evolving Algebras: Lipari Guide. </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: Finally, section 5 concludes the results and shows directions of future work. 2 Basics and Related Work We use abstract state machines (ASM), <ref> [Gur95] </ref>, as the basic formalism to define the dynamic semantics of programming languages. An extension which allows the specification of complete programming languages including context free syntax, static and dynamic semantic are Montages [KP97b]. Montages allow the generation of syntactical and semantical analysis.
Reference: [GZG + 98] <author> Wolfgang Goerigk, Wolf Zimmermann, Thilo Gaul, Andreas Heberle, and Ulrich Hoffmann. </author> <title> Correct compilation of a while-language with parame-terless recursive procedures. </title> <type> Technical report, IPD, </type> <institution> Universitat Karlsruhe, </institution> <year> 1998. </year>
Reference-contexts: The correctness proof is quite complex but the mapping itself can be defined generic. A definition of the memory mapping together with a detailed correctness discussion can be found in <ref> [GZG + 98] </ref>. 5 Conclusions We presented general transformations of ASM based operational programming language semantics. The transformations preserve the observable behavior of a program and can thus be used to simplify the definition and verification of compilations.
Reference: [Heu98] <author> Dirk Heuzeroth. </author> <title> Spezifikation und Verifikation von standardisierten Trans-formationen am Beispiel der Ubersetzung der imperativen Sprache IS . Master's thesis, </title> <institution> University of Karlsruhe, </institution> <year> 1998. </year> <note> In preparation. </note>
Reference-contexts: A more detailed application of the methodology to a real life C like programming language together with examples of AL extensions can be found in <ref> [Heu98] </ref>. Mapping of Structured Data Types: The set data type in AL is quite general. Though it is not difficult to define a record type or an array type in terms of set.
Reference: [HH97] <author> Dirk Heuzeroth and Andreas Heberle. </author> <title> Algebraische Spezifikation eines generischen Integer-Datentyps. </title> <type> Technical report, IPD, </type> <institution> Universitat Karl-sruhe, </institution> <month> Oktober </month> <year> 1997. </year>
Reference-contexts: First CreateStaticArray creates a set object and then it creates size objects of type element type and assigns the references to the corresponding selectors. The resulting task graph is the AL implementation of CreateStaticArray. Compilation of Basic Types: Integer and floating point types in AL are generic. <ref> [HH97] </ref> defines the semantics of the integer data type together with a generic transformation scheme between different integer data types. The definition of floating point numbers is according to the IEEE standard. The definition of a generic conversion routine remains to be done.
Reference: [IEE85] <author> IEEE. </author> <title> Standard for Binary Floating-Point Arithmetic, Std. </title> <type> 754-1985. Technical report, </type> <institution> ANSI/IEEE, </institution> <year> 1985. </year>
Reference: [KP97a] <author> P.W. Kutter and A. Pierantonio. </author> <title> The Formal Specification of Oberon. </title> <journal> J.UCS, </journal> <volume> 3(5):443 - 503, </volume> <year> 1997. </year>
Reference: [KP97b] <author> P.W. Kutter and A. Pierantonio. </author> <title> Montages: Specifications of Realistic Programming Languages. </title> <journal> J.UCS, </journal> <volume> 3(5):416 - 442, </volume> <year> 1997. </year>
Reference-contexts: An extension which allows the specification of complete programming languages including context free syntax, static and dynamic semantic are Montages <ref> [KP97b] </ref>. Montages allow the generation of syntactical and semantical analysis. They define a first restriction on the definition of ASMs since they require a program counter and a successor function on tasks. Beside this, the user is free in the specification of dynamic semantics.
Reference: [PH97] <author> A. Poetzsch-Heffter. </author> <title> Prototyping realistic programming languages based on formal specifications. </title> <journal> Acta Informatica, </journal> <volume> 34(10) </volume> <pages> 737-772, </pages> <year> 1997. </year>
Reference-contexts: We do not need the rule part of Montages because we only allow predefined tasks with fixed semantics in the static part. The interpretation of syntax and static semantics as an attribute grammar is similar to the approach with the MAX system, cf. <ref> [PH97] </ref> where occurrence algebras together with ASMs are used to specifiy programming languages. The focus of the MAX framework is not the construction of verified compilers but the prototyping of realistic programming languages and the generation of language-specific software.
Reference: [Wal94] <author> C. Wallace. </author> <title> The Semantics of the C++ Programming Language. </title> <editor> In E. Borger, editor, </editor> <booktitle> Specification and Validation Methods, </booktitle> <pages> pages 131-164. </pages> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference: [ZG97] <author> W. Zimmermann and T. Gaul. </author> <title> On the Construction of Correct Compiler Back-Ends: An ASM Approach. </title> <journal> Journal of Universal Computer Science, </journal> <volume> 3(5) </volume> <pages> 504-567, </pages> <year> 1997. </year>
Reference-contexts: A detailed discussion of observable behavior and our notion of compiler correctness can be found in [GDG + 96] and <ref> [ZG97] </ref>. r r I/O I/O r q 4 r Fig. 1.
References-found: 14

