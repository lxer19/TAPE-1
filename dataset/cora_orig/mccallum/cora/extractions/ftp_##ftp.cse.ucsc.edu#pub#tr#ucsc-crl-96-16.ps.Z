URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-96-16.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Direct Volume Rendering with Shading via Three-Dimensional Textures  
Author: Allen Van Gelder Kwansik Kim 
Keyword: Computer Graphics, Scientific Visualization, Texture Map, Direct Volume Rendering, Spherical Tesselation.  
Address: Santa Cruz, CA 95064 USA  
Affiliation: Baskin Center for Computer Engineering and Computer Science University of California  
Pubnum: UCSC-CRL-96-16  
Email: E-mail: avg@cse.ucsc.edu, ksk@cse.ucsc.edu  
Date: July 19, 1996  
Abstract: A new and easy-to-implement method for direct volume rendering that uses 3D texture maps for acceleration, and incorporates directional lighting, is described. The implementation, called Voltx, produces high-quality images at nearly interactive speeds on workstations with hardware support for three-dimensional texture maps. Previously reported methods did not incorporate a light model, and did not address issues of multiple texture maps for large volumes. Our research shows that these extensions impact performance by about a factor of ten. Voltx supports orthographic, perspective, and stereo views. This paper describes the theory and implementation of this technique, and compares it to the shear-warp factorization approach. A rectilinear data set is converted into a three-dimensional texture map containing color and opacity information. Quantized normal vectors and a lookup table provide efficiency. A new tesselation of the sphere is described, which serves as the basis for normal-vector quantization. A new gradient-based shading criterion is described, in which the gradient magnitude is interpreted in the context of the field-data value and the material classification parameters, and not in isolation. In the rendering phase, the texture map is applied to a stack of parallel planes, which effectively cut Note: This report appears in Proceedings of ACM/IEEE Symposium on Volume Visualization, San Francisco, Oct., 1996, except for the following modifications. The appendix of this report does not appear in the proceedings. References to the appendices are replaced by references to this report, in the proceedings. The proceedings includes 1/2 page of color images that are not included in the report, as distributed electronically. The color images are available separately from the authors. the texture into many slabs. The slabs are composited to form an image.
Abstract-found: 1
Intro-found: 1
Reference: [Ake93] <author> Kurt Akeley. </author> <title> RealityEngine graphics. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 27 </volume> <pages> 109-116, </pages> <year> 1993. </year>
Reference-contexts: They might be addressed as described in Section 3.3. Several other papers describe the use of 3D texture-mapping hardware for direct volume rendering. Akeley briefly mentioned the possibility for the SGI Reality Engine <ref> [Ake93] </ref>. Cullip and Neumann sketch two approaches, which they call object space (somewhat related to shear-warp) and image space, and apply them to CT data [CN93]. Guan and Lipes discuss hardware issues [GL94]. Cabral, Cam and Foran describe how to use texture-mapping hardware to accelerate numerical Radon transforms [CCF94].
Reference: [CCF94] <author> Brian Cabral, Nancy Cam, and Jim Foran. </author> <title> Accelerated volume rendering and tomographic reconstruction using texture mapping hardware. </title> <booktitle> In ACM Symposium on Volume Visualization, </booktitle> <pages> pp. 91-98, </pages> <address> Washington, </address> <year> 1994. </year>
Reference-contexts: Cullip and Neumann sketch two approaches, which they call object space (somewhat related to shear-warp) and image space, and apply them to CT data [CN93]. Guan and Lipes discuss hardware issues [GL94]. Cabral, Cam and Foran describe how to use texture-mapping hardware to accelerate numerical Radon transforms <ref> [CCF94] </ref>. All of the methods described in these papers require substantial programming to hand compute transformations, clipping, and the like, details of which are omitted. Wilson et al. reported on an earlier version of Voltx [WVGW94]. <p> Previously reported methods for volume rendering with 3D texture maps did not allow for directional lighting effects, and therefore could avoid recalculation after rotation of the volume <ref> [CN93, CCF94, WVGW94] </ref>. 3.1.4 Gradient Quantization We quantize the gradient direction space into a finite number of unit gradients. The goal is to distribute a set of points on a unit sphere as evenly as possible, and take the vectors from origin to the points as the quantized gradients.
Reference: [CN93] <author> T. J. Cullip and U. Neumann. </author> <title> Accelerating volume reconstruction with 3D texture hardware. </title> <type> Technical Report TR93-027, </type> <institution> University of North Carolina, </institution> <address> Chapel Hill, N. C., </address> <year> 1993. </year>
Reference-contexts: Several other papers describe the use of 3D texture-mapping hardware for direct volume rendering. Akeley briefly mentioned the possibility for the SGI Reality Engine [Ake93]. Cullip and Neumann sketch two approaches, which they call object space (somewhat related to shear-warp) and image space, and apply them to CT data <ref> [CN93] </ref>. Guan and Lipes discuss hardware issues [GL94]. Cabral, Cam and Foran describe how to use texture-mapping hardware to accelerate numerical Radon transforms [CCF94]. All of the methods described in these papers require substantial programming to hand compute transformations, clipping, and the like, details of which are omitted. <p> Previously reported methods for volume rendering with 3D texture maps did not allow for directional lighting effects, and therefore could avoid recalculation after rotation of the volume <ref> [CN93, CCF94, WVGW94] </ref>. 3.1.4 Gradient Quantization We quantize the gradient direction space into a finite number of unit gradients. The goal is to distribute a set of points on a unit sphere as evenly as possible, and take the vectors from origin to the points as the quantized gradients.
Reference: [CT82] <author> Robert L. Cook and Kenneth E. Torrance. </author> <title> A reflectance model for computer graphics. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 1(1) </volume> <pages> 7-24, </pages> <year> 1982. </year>
Reference-contexts: Our implementation uses the half-way vector specularity model <ref> [TM67, CT82] </ref>, as well as Lambertian diffuse shading. Gradient quantization is discussed in Section 3.1.4. The resulting color intensities, clamped if necessary, are real numbers in the range [0; 1:0] where 0 is black and 1.0 is full color.
Reference: [CU92] <author> G. G. Cameron and P. E. Undrill. </author> <title> Rendering volumetric medical image data on a SIMD-architecture computer. </title> <booktitle> In Third Eurographics Workshop on Rendering, </booktitle> <address> Bristol, UK, </address> <month> MAy </month> <year> 1992. </year>
Reference-contexts: Some object-order methods use hardware-assisted Gouraud-shading capabilities to accelerate rendering, by calculating the projections of volume regions and treating them as polygons [ST90, LH91, WVG91, Wil92, VGW93, WVG94]. Shear-warp factorization methods have been developed for parallel volume rendering <ref> [CU92, SS92] </ref>, and serial [LL94]. The method of this paper is compared with shear-warp in Section 4. This paper presents a new method for direct volume rendering, called Voltx, that takes advantage of hardware-assisted, 3D texture mapping, and incorporates a light model.
Reference: [DCH88] <author> Robert A. Drebin, Loren Carpenter, and Pat Hanrahan. </author> <title> Volume rendering. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 22(4) </volume> <pages> 65-74, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction Rendering speed has always been a major problem in direct volume rendering, because all regions of the volume may contribute to the image, and because new orientations generally require considerable re-computation. A spectrum of methods offering different combinations of rendering speed versus image quality have been presented <ref> [DCH88, Sab88, UK88, Lev88, Kru90, Lev90a, MHC90, Wes90, LH91, Lev92] </ref>. Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92].
Reference: [DH92] <author> John Danskin and Pat Hanrahan. </author> <title> Fast algorithms for volume ray tracing. </title> <booktitle> In ACM Workshop on Volume Visualization, </booktitle> <pages> pp. 91-98, </pages> <address> Boston, </address> <year> 1992. </year>
Reference-contexts: A spectrum of methods offering different combinations of rendering speed versus image quality have been presented [DCH88, Sab88, UK88, Lev88, Kru90, Lev90a, MHC90, Wes90, LH91, Lev92]. Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly <ref> [Lev90b, DH92] </ref>. Some object-order methods use hardware-assisted Gouraud-shading capabilities to accelerate rendering, by calculating the projections of volume regions and treating them as polygons [ST90, LH91, WVG91, Wil92, VGW93, WVG94]. Shear-warp factorization methods have been developed for parallel volume rendering [CU92, SS92], and serial [LL94].
Reference: [GL94] <author> S. Guan and R. G. Lipes. </author> <title> Innovative volume rendering using 3D texture mapping. In Image Capture, Formatting and Display. </title> <booktitle> SPIE 2164, </booktitle> <year> 1994. </year>
Reference-contexts: Akeley briefly mentioned the possibility for the SGI Reality Engine [Ake93]. Cullip and Neumann sketch two approaches, which they call object space (somewhat related to shear-warp) and image space, and apply them to CT data [CN93]. Guan and Lipes discuss hardware issues <ref> [GL94] </ref>. Cabral, Cam and Foran describe how to use texture-mapping hardware to accelerate numerical Radon transforms [CCF94]. All of the methods described in these papers require substantial programming to hand compute transformations, clipping, and the like, details of which are omitted.
Reference: [Kru90] <author> Wolfgang Krueger. </author> <title> Volume rendering and data feature enhancement. </title> <booktitle> Computer Graphics (Proceedings of the San Diego Workshop on Volume Visualization), </booktitle> <volume> 24(5):21 - 26, </volume> <year> 1990. </year>
Reference-contexts: 1 Introduction Rendering speed has always been a major problem in direct volume rendering, because all regions of the volume may contribute to the image, and because new orientations generally require considerable re-computation. A spectrum of methods offering different combinations of rendering speed versus image quality have been presented <ref> [DCH88, Sab88, UK88, Lev88, Kru90, Lev90a, MHC90, Wes90, LH91, Lev92] </ref>. Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92].
Reference: [Lev88] <author> Marc Levoy. </author> <title> Display of surfaces from volume data. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 8(3) </volume> <pages> 29-37, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Rendering speed has always been a major problem in direct volume rendering, because all regions of the volume may contribute to the image, and because new orientations generally require considerable re-computation. A spectrum of methods offering different combinations of rendering speed versus image quality have been presented <ref> [DCH88, Sab88, UK88, Lev88, Kru90, Lev90a, MHC90, Wes90, LH91, Lev92] </ref>. Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92].
Reference: [Lev90a] <author> Marc Levoy. </author> <title> Efficient ray tracing of volume data. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 9(3) </volume> <pages> 245-261, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction Rendering speed has always been a major problem in direct volume rendering, because all regions of the volume may contribute to the image, and because new orientations generally require considerable re-computation. A spectrum of methods offering different combinations of rendering speed versus image quality have been presented <ref> [DCH88, Sab88, UK88, Lev88, Kru90, Lev90a, MHC90, Wes90, LH91, Lev92] </ref>. Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92]. <p> The final shading for the voxel combines the ambient and reflecting colors and opacities according to the probability. Thus the gradient magnitude is interpreted in the context of the data value and the classification parameters, and not in isolation, departing from earlier work <ref> [Lev90a, LL94] </ref>. 3.1.3 Reflected Light Component As mentioned, for each combination of quantized gradient and material, the material's surface response to directional lights is calculated, added to the ambient component, and stored in a lookup table.
Reference: [Lev90b] <author> Marc Levoy. </author> <title> A hybrid ray tracer for rendering polygon and volume data. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 10(2) </volume> <pages> 33-40, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: A spectrum of methods offering different combinations of rendering speed versus image quality have been presented [DCH88, Sab88, UK88, Lev88, Kru90, Lev90a, MHC90, Wes90, LH91, Lev92]. Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly <ref> [Lev90b, DH92] </ref>. Some object-order methods use hardware-assisted Gouraud-shading capabilities to accelerate rendering, by calculating the projections of volume regions and treating them as polygons [ST90, LH91, WVG91, Wil92, VGW93, WVG94]. Shear-warp factorization methods have been developed for parallel volume rendering [CU92, SS92], and serial [LL94].
Reference: [Lev92] <author> Marc Levoy. </author> <title> Volume rendering using the fourier projection-slice theorem. </title> <booktitle> In Proceedings of Graphics Interface '92, </booktitle> <address> Vancouver, B.C., </address> <year> 1992. </year> <note> Also Stanford University Technical Report CSL-TR-92-521. 12 </note>
Reference-contexts: 1 Introduction Rendering speed has always been a major problem in direct volume rendering, because all regions of the volume may contribute to the image, and because new orientations generally require considerable re-computation. A spectrum of methods offering different combinations of rendering speed versus image quality have been presented <ref> [DCH88, Sab88, UK88, Lev88, Kru90, Lev90a, MHC90, Wes90, LH91, Lev92] </ref>. Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92].
Reference: [LH91] <author> David Laur and Pat Hanrahan. </author> <title> Hierarchical splatting: A progressive refinement algorithm for volume rendering. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 25(4) </volume> <pages> 285-288, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Rendering speed has always been a major problem in direct volume rendering, because all regions of the volume may contribute to the image, and because new orientations generally require considerable re-computation. A spectrum of methods offering different combinations of rendering speed versus image quality have been presented <ref> [DCH88, Sab88, UK88, Lev88, Kru90, Lev90a, MHC90, Wes90, LH91, Lev92] </ref>. Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92]. <p> Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92]. Some object-order methods use hardware-assisted Gouraud-shading capabilities to accelerate rendering, by calculating the projections of volume regions and treating them as polygons <ref> [ST90, LH91, WVG91, Wil92, VGW93, WVG94] </ref>. Shear-warp factorization methods have been developed for parallel volume rendering [CU92, SS92], and serial [LL94]. The method of this paper is compared with shear-warp in Section 4.
Reference: [LL94] <author> Philippe Lacroute and Marc Levoy. </author> <title> Fast volume rendering using a shear-warp factorization of the viewing transformation. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <pages> pp. 451-458, </pages> <year> 1994. </year>
Reference-contexts: Some object-order methods use hardware-assisted Gouraud-shading capabilities to accelerate rendering, by calculating the projections of volume regions and treating them as polygons [ST90, LH91, WVG91, Wil92, VGW93, WVG94]. Shear-warp factorization methods have been developed for parallel volume rendering [CU92, SS92], and serial <ref> [LL94] </ref>. The method of this paper is compared with shear-warp in Section 4. This paper presents a new method for direct volume rendering, called Voltx, that takes advantage of hardware-assisted, 3D texture mapping, and incorporates a light model. <p> Also, rotations of the volume do not introduce artifacts, and perspective projections do not degrade the performance. All of these problems were reported for LL by Lacroute and Levoy <ref> [LL94] </ref>. Their paper suggests ways to get around some of the problems. Some limitations of Voltx are the restriction to rectilinear volumes, the need to redefine 3D texture maps whenever the volume is viewed from a new rotation, and the fact that color, not data, is loaded into texture memory. <p> The final shading for the voxel combines the ambient and reflecting colors and opacities according to the probability. Thus the gradient magnitude is interpreted in the context of the data value and the classification parameters, and not in isolation, departing from earlier work <ref> [Lev90a, LL94] </ref>. 3.1.3 Reflected Light Component As mentioned, for each combination of quantized gradient and material, the material's surface response to directional lights is calculated, added to the ambient component, and stored in a lookup table. <p> Figure 4, right, shows the comparable situation for Voltx, assuming 20 pixels and 8 rendered planes. In effect, a ray is shot from each pixel, and the sample is computed by trilinear interpolation. Lacroute and Levoy have reported on a fast shear-warp implementation <ref> [LL94] </ref>, a limited version of which has been distributed. It will be called LL in this discussion. It is apparent from their paper and their code that speed was a major design objective of LL, and they have succeeded admirably in attaining this objective.
Reference: [MHC90] <author> Nelson Max, Pat Hanrahan, and Roger Crawfis. </author> <title> Area and volume coherence for efficient visualization of 3D scalar functions. </title> <booktitle> ACM Workshop on Volume Visualization, </booktitle> <volume> 24(5) </volume> <pages> 27-33, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction Rendering speed has always been a major problem in direct volume rendering, because all regions of the volume may contribute to the image, and because new orientations generally require considerable re-computation. A spectrum of methods offering different combinations of rendering speed versus image quality have been presented <ref> [DCH88, Sab88, UK88, Lev88, Kru90, Lev90a, MHC90, Wes90, LH91, Lev92] </ref>. Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92].
Reference: [Sab88] <author> Paolo Sabella. </author> <title> A rendering algorithm for visualizing 3D scalar fields. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 51-58, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction Rendering speed has always been a major problem in direct volume rendering, because all regions of the volume may contribute to the image, and because new orientations generally require considerable re-computation. A spectrum of methods offering different combinations of rendering speed versus image quality have been presented <ref> [DCH88, Sab88, UK88, Lev88, Kru90, Lev90a, MHC90, Wes90, LH91, Lev92] </ref>. Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92].
Reference: [SS92] <author> Peter Schroeder and Gordon Stoll. </author> <title> Data parallel volume rendering as line drawing. </title> <booktitle> In ACM Workshop on Volume Visualization, </booktitle> <pages> pp. 25-32, </pages> <address> Boston, </address> <year> 1992. </year>
Reference-contexts: Some object-order methods use hardware-assisted Gouraud-shading capabilities to accelerate rendering, by calculating the projections of volume regions and treating them as polygons [ST90, LH91, WVG91, Wil92, VGW93, WVG94]. Shear-warp factorization methods have been developed for parallel volume rendering <ref> [CU92, SS92] </ref>, and serial [LL94]. The method of this paper is compared with shear-warp in Section 4. This paper presents a new method for direct volume rendering, called Voltx, that takes advantage of hardware-assisted, 3D texture mapping, and incorporates a light model.
Reference: [ST90] <author> Peter Shirley and Allan Tuchman. </author> <title> A polygonal approximation to direct scalar volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 63-70, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92]. Some object-order methods use hardware-assisted Gouraud-shading capabilities to accelerate rendering, by calculating the projections of volume regions and treating them as polygons <ref> [ST90, LH91, WVG91, Wil92, VGW93, WVG94] </ref>. Shear-warp factorization methods have been developed for parallel volume rendering [CU92, SS92], and serial [LL94]. The method of this paper is compared with shear-warp in Section 4.
Reference: [TM67] <author> Kenneth E. Torrance and Sparrow E. M. </author> <title> Theory for off-specular reflection from roughened surfaces. </title> <journal> Journal of the Optical Society of America, </journal> <volume> 57(9) </volume> <pages> 1105-1114, </pages> <year> 1967. </year>
Reference-contexts: Our implementation uses the half-way vector specularity model <ref> [TM67, CT82] </ref>, as well as Lambertian diffuse shading. Gradient quantization is discussed in Section 3.1.4. The resulting color intensities, clamped if necessary, are real numbers in the range [0; 1:0] where 0 is black and 1.0 is full color.
Reference: [UK88] <author> Craig Upson and Michael Keeler. </author> <title> The v-buffer: Visible volume rendering. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 22(4) </volume> <pages> 59-64, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction Rendering speed has always been a major problem in direct volume rendering, because all regions of the volume may contribute to the image, and because new orientations generally require considerable re-computation. A spectrum of methods offering different combinations of rendering speed versus image quality have been presented <ref> [DCH88, Sab88, UK88, Lev88, Kru90, Lev90a, MHC90, Wes90, LH91, Lev92] </ref>. Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92].
Reference: [VGW93] <author> Allen Van Gelder and Jane Wilhelms. </author> <title> Rapid exploration of curvilinear grids using direct volume rendering. </title> <booktitle> In IEEE Visualization '93, </booktitle> <year> 1993. </year> <note> (extended abstract) Also, </note> <institution> Univ. of California technical report UCSC-CRL-93-02. </institution>
Reference-contexts: Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92]. Some object-order methods use hardware-assisted Gouraud-shading capabilities to accelerate rendering, by calculating the projections of volume regions and treating them as polygons <ref> [ST90, LH91, WVG91, Wil92, VGW93, WVG94] </ref>. Shear-warp factorization methods have been developed for parallel volume rendering [CU92, SS92], and serial [LL94]. The method of this paper is compared with shear-warp in Section 4. <p> These values are computed at each voxel of the volume based on the client-supplied classification function and transfer function. The color C (p) and opacity A that must go into the texture map are computed by now-standard methods <ref> [WVG91, VGW93] </ref>. Briefly, the formulas are: ff = ln 1 ffD A = 1 e ffD where p ranges over Red, Green and Blue. Note that C is well-defined as ff approaches 0, by taking a power series expansion.
Reference: [Wes90] <author> Lee Westover. </author> <title> Footprint evaluation for volume rendering. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 24(4) </volume> <pages> 367-76, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction Rendering speed has always been a major problem in direct volume rendering, because all regions of the volume may contribute to the image, and because new orientations generally require considerable re-computation. A spectrum of methods offering different combinations of rendering speed versus image quality have been presented <ref> [DCH88, Sab88, UK88, Lev88, Kru90, Lev90a, MHC90, Wes90, LH91, Lev92] </ref>. Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92].
Reference: [Wil92] <author> Peter Williams. </author> <title> Interactive splatting of nonrectilinear volumes. </title> <booktitle> In IEEE Visualization '92, </booktitle> <pages> pp. 37-44, </pages> <year> 1992. </year>
Reference-contexts: Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92]. Some object-order methods use hardware-assisted Gouraud-shading capabilities to accelerate rendering, by calculating the projections of volume regions and treating them as polygons <ref> [ST90, LH91, WVG91, Wil92, VGW93, WVG94] </ref>. Shear-warp factorization methods have been developed for parallel volume rendering [CU92, SS92], and serial [LL94]. The method of this paper is compared with shear-warp in Section 4.
Reference: [WVG91] <author> Jane Wilhelms and Allen Van Gelder. </author> <title> A coherent projection approach for direct volume rendering. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 25(4) </volume> <pages> 275-284, </pages> <year> 1991. </year>
Reference-contexts: Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92]. Some object-order methods use hardware-assisted Gouraud-shading capabilities to accelerate rendering, by calculating the projections of volume regions and treating them as polygons <ref> [ST90, LH91, WVG91, Wil92, VGW93, WVG94] </ref>. Shear-warp factorization methods have been developed for parallel volume rendering [CU92, SS92], and serial [LL94]. The method of this paper is compared with shear-warp in Section 4. <p> These values are computed at each voxel of the volume based on the client-supplied classification function and transfer function. The color C (p) and opacity A that must go into the texture map are computed by now-standard methods <ref> [WVG91, VGW93] </ref>. Briefly, the formulas are: ff = ln 1 ffD A = 1 e ffD where p ranges over Red, Green and Blue. Note that C is well-defined as ff approaches 0, by taking a power series expansion.
Reference: [WVG94] <author> Jane Wilhelms and Allen Van Gelder. </author> <title> Multi-dimensional trees for controlled volume rendering and compression. </title> <booktitle> In ACM Symposium on Volume Visualization, </booktitle> <address> Washington, </address> <year> 1994. </year>
Reference-contexts: Image-order algorithms like ray casting produce superior quality images, but have to traverse the data structure redundantly [Lev90b, DH92]. Some object-order methods use hardware-assisted Gouraud-shading capabilities to accelerate rendering, by calculating the projections of volume regions and treating them as polygons <ref> [ST90, LH91, WVG91, Wil92, VGW93, WVG94] </ref>. Shear-warp factorization methods have been developed for parallel volume rendering [CU92, SS92], and serial [LL94]. The method of this paper is compared with shear-warp in Section 4. <p> This produces the greatest accuracy in the presence of nonlinear mappings from data to color <ref> [WVG94] </ref>. For such interpolation to make sense, the texture memory must be a continuous function of the data and gradient values. 2 For rendering without directional lighting, the gradient is irrelevant, and a one-parameter texture lookup table, as offered in the SGI Reality Engine, suffices. <p> The buffer shown in the Open GL alternative is encoded and maintained by the application program.) Thus the hardware interpolates color, rather than data. This leads to inaccuracies in the presence of nonlinear mappings from data to color <ref> [WVG94] </ref>. The inaccuracies are more pronounced in close-up views.

References-found: 26

