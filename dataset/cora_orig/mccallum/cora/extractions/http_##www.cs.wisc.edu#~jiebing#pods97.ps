URL: http://www.cs.wisc.edu/~jiebing/pods97.ps
Refering-URL: http://www.cs.wisc.edu/~jiebing/jiebing.html
Root-URL: 
Email: jgoldst@cs.wisc.edu  raghu@cs.wisc.edu  uri@cs.wisc.edu  jiebing@cs.wisc.edu  
Title: Processing Queries By Linear Constraints  
Author: Jonathan Goldstein Raghu Ramakrishnan Uri Shaft Jie-Bing Yu 
Note: This work was partially supported by a David and Lucile Packard Foundation Fellowship in Science and Engineering, a Presidential Young Investigator Award, NASA Research Grant NAGW-3921, and ORD contract 144-ET33.  
Address: 1210 W. Dayton St., Madison, WI 53706  1210 W. Dayton St., Madison, WI 53706  1210 W. Dayton St., Madison, WI 53706  1210 W. Dayton St., Madison, WI 53706  
Affiliation: Computer Sciences Department University of Wisconsin-Madison  Computer Sciences Department University of Wisconsin-Madison  Computer Sciences Department University of Wisconsin-Madison  Computer Sciences Department University of Wisconsin-Madison  
Abstract: This paper focuses attention on a form of selection query, expressible in SQL but not evaluated efficiently by current DBMSs, with wide applicability in these new problem domains. We introduce a processing strategy for this class of queries, which we call queries by linear constraints (QBLC). This processing strategy can be implemented with a wide variety of multidimensional indexing structures that include the R-Tree variants, the k-d-B-Tree, the Buddy-Tree, and many more. Note that any processing strategy meant for general database use must guarantee that all correct answers are returned. Therefore, all numerical techniques we employ uphold this guarantee. Thus the most distinguishing characteristic of this processing strategy is its safe handling of numerical error (which can result in the dismissal of valid answers). This paper presents several theoretical results about our processing strategy, and the results of several experiments which show that the processing cost of selection queries by linear constraints can be reduced dramatically by using our processing strategy. Copyright c fl1997 by the Association for Computing Machinery, Inc. Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or direct commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from Publications Dept., ACM Inc., fax +1 (212) 869-0481, or (permissions@acm.org). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Beckmann, H.-P. Kriegel, R. Schneider, and B. Seeger. </author> <title> The R fl -Tree: An efficient and robust access method for points and rectangles. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 322-331, </pages> <year> 1992. </year>
Reference-contexts: Algorithmically, this requires a test that determines whether a particular section of data space overlaps the query region. Our solution is designed to work with indexing structures that use hyper-rectangles as regions. Such structures are variants of the R-Tree <ref> [7, 1, 15] </ref>, the k-d-B-Tree [14] (described further in section 4), the Buddy-Tree [8, 9], and many more. We chose to implement our strategy with the R fl -Tree [1] (which is a variant of the R-Tree). These indexing structures support range selection queries. <p> Such structures are variants of the R-Tree [7, 1, 15], the k-d-B-Tree [14] (described further in section 4), the Buddy-Tree [8, 9], and many more. We chose to implement our strategy with the R fl -Tree <ref> [1] </ref> (which is a variant of the R-Tree). These indexing structures support range selection queries. These queries are conjunctions of range constraints. Range constraints are linear constraints that involve only one attribute. For example, the first and second constraints of the Restaurants example from Section 1.1 are range constraints. <p> In this section, for convenience, we discuss R-Trees only. We briefly discuss some other indexing structures in Section 4. 2.1.1 The R-Tree indexing structure R-Trees <ref> [7, 1, 15] </ref> are a family of height-balanced trees designed specifically for indexing multi-dimensional spatial data. An R-Tree hierarchically decomposes the data space into progressively smaller hyper-rectangular regions. Each node (a disk page) in the R-Tree is either an internal node or a leaf node. <p> All MBHs are oriented orthogonally with respect to the (fixed) axes for the R-Tree. The above description concerns R-Tree structure and is applicable to any of the variants of the R-Tree, including R + -Trees [15] and R fl -Trees <ref> [1] </ref>. The variants were created to reduce search time through improved space utilization, and reduced overlap.
Reference: [2] <author> G. B. Dantzig. </author> <title> Linear Programming and Extensions. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, N.J., </address> <year> 1963. </year>
Reference-contexts: We replace the overlap test between two hyper-rectangles in the indexing structures' search algorithms with one that determines whether a conjunction of linear constraints overlaps a hyper-rectangle. For years linear programming researchers have been studying a related problem (e.g. see <ref> [2, 4] </ref>). Indeed, the overlap test can be framed as a linear program! While this seems like a reasonable solution at first, there is a serious problem. Linear programming solutions involve a complex series of floating point operations.
Reference: [3] <author> D. DeWitt, N. Kabra, J. Luo, J. Patel, and J. Yu. </author> <title> Client-server paradise. </title> <booktitle> In Proc. 20th Int. Conf. on VLDB, </booktitle> <pages> pages 558-569, </pages> <year> 1994. </year> <title> Overlap of query and its 0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% bounding box Ratio of clipping test I/O 33:5% 84:8% 90:1% 93:4% 95:4% 96:6% 97:6% 98:2% 98:8% 99:4% 100% over simple test I/O Table 2: Ratio of I/O for clipping test vs. simple test. Same data set used for Figure 13. </title>
Reference-contexts: Internal nodes' entries point to children, which represent sub-regions of the original internal node. Internal nodes' entries also contain the Minimum Bounding Hyper-rectangle (MBH) of space represented by the child. Entries 1 Paradise <ref> [3] </ref> is a prototype object-relational DBMS for GIS applications developed at University of Wisconsin, and is built on top of the SHORE storage manager. in leaf nodes contain the object IDs of the actual spatial objects (or, optionally, the objects themselves), and the MBH of the objects.
Reference: [4] <author> S. C. Fang and S. Puthenpura. </author> <title> Linear Optimization and Extensions: Theory and Algorithms. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: We replace the overlap test between two hyper-rectangles in the indexing structures' search algorithms with one that determines whether a conjunction of linear constraints overlaps a hyper-rectangle. For years linear programming researchers have been studying a related problem (e.g. see <ref> [2, 4] </ref>). Indeed, the overlap test can be framed as a linear program! While this seems like a reasonable solution at first, there is a serious problem. Linear programming solutions involve a complex series of floating point operations.
Reference: [5] <author> J. Goldstein, R. Ramakrishnan, and U. Shaft abd J.- B. Yu. </author> <title> Using constraints to query R fl -Trees. </title> <type> Technical Report TR1301, </type> <institution> Comp. Sci. Dept., Univ. of Wisconsin-Madison, </institution> <year> 1996. </year>
Reference-contexts: It was very easy to install the changes to R fl -Trees in Paradise and the results on testing the strategy in Paradise demonstrated that the gains we observed in our experimental environment were similar to the gains observed in the real system. For details see <ref> [5] </ref>. 2 Description of Our Solution 2.1 Issues in Modifying Indices' Search Algorithms In addition to describing the R-Tree, this section discusses the modifications to R-Tree query execution needed to support QBLC. In this section, for convenience, we discuss R-Trees only. <p> We present here only a summary of the main results. For more detailed description of the experiments, including an experiment with a real high dimensional business data set, see <ref> [5] </ref>. Throughout this study, performance results of finite area QBLC queries are compared to performance results of the corresponding MBH query, based on a careful implementation of R-Trees with the search algorithms.
Reference: [6] <author> O. Gunther and E. Wong. </author> <title> A dual approach to detect polyhedral intersection in arbitrary dimensions. </title> <booktitle> In Proc. 25th Annual Allerton Conf. on Comm., Control and Comp., </booktitle> <pages> pages 859-868, </pages> <year> 1987. </year>
Reference-contexts: The number of vertices in the hyper-rectangle from the index structure scales exponentially with respect to dimensionality while the number of faces (constraints) scales linearly. In addition, some algorithms, like Gunther and Wong's <ref> [6] </ref>, scale exponentially with the number of dimensions. 1.3 Summary of Main Results We present several theoretical results about the correctness and efficiency of our algorithms. We have also implemented our processing strategy using R fl -Trees and performed many experiments on various data sets.
Reference: [7] <author> A. Guttman. R-Trees: </author> <title> A dynamic index structure for spatial searching. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 47-57, </pages> <year> 1984. </year>
Reference-contexts: Algorithmically, this requires a test that determines whether a particular section of data space overlaps the query region. Our solution is designed to work with indexing structures that use hyper-rectangles as regions. Such structures are variants of the R-Tree <ref> [7, 1, 15] </ref>, the k-d-B-Tree [14] (described further in section 4), the Buddy-Tree [8, 9], and many more. We chose to implement our strategy with the R fl -Tree [1] (which is a variant of the R-Tree). These indexing structures support range selection queries. <p> In this section, for convenience, we discuss R-Trees only. We briefly discuss some other indexing structures in Section 4. 2.1.1 The R-Tree indexing structure R-Trees <ref> [7, 1, 15] </ref> are a family of height-balanced trees designed specifically for indexing multi-dimensional spatial data. An R-Tree hierarchically decomposes the data space into progressively smaller hyper-rectangular regions. Each node (a disk page) in the R-Tree is either an internal node or a leaf node. <p> For instance, there are indexing structures like R-Trees <ref> [7] </ref>, Buddy Trees [9] , k-d-B Trees [14], and Grid Files [12], which either implicitly or explicitly use hyper-rectangles as their means of spatial subdivision. For example, our tests can also be used search k-d-B Trees.
Reference: [8] <author> H.-P. Kriegel, M. Schiwietz, R. Schneider, and B. Seeger. </author> <title> Performance comparison of point and spatial access methods. </title> <booktitle> In SSD, </booktitle> <pages> pages 89-113, </pages> <year> 1989. </year>
Reference-contexts: Our solution is designed to work with indexing structures that use hyper-rectangles as regions. Such structures are variants of the R-Tree [7, 1, 15], the k-d-B-Tree [14] (described further in section 4), the Buddy-Tree <ref> [8, 9] </ref>, and many more. We chose to implement our strategy with the R fl -Tree [1] (which is a variant of the R-Tree). These indexing structures support range selection queries. These queries are conjunctions of range constraints. Range constraints are linear constraints that involve only one attribute.
Reference: [9] <author> H.-P. Kriegel, M. Schiwietz, R. Schneider, and B. Seeger. </author> <title> The buddy-tree: An efficient and robust method for spatial data base systems. </title> <booktitle> In Proc. 16th VLDB Conf., </booktitle> <pages> pages 590-601, </pages> <year> 1990. </year>
Reference-contexts: Our solution is designed to work with indexing structures that use hyper-rectangles as regions. Such structures are variants of the R-Tree [7, 1, 15], the k-d-B-Tree [14] (described further in section 4), the Buddy-Tree <ref> [8, 9] </ref>, and many more. We chose to implement our strategy with the R fl -Tree [1] (which is a variant of the R-Tree). These indexing structures support range selection queries. These queries are conjunctions of range constraints. Range constraints are linear constraints that involve only one attribute. <p> For instance, there are indexing structures like R-Trees [7], Buddy Trees <ref> [9] </ref> , k-d-B Trees [14], and Grid Files [12], which either implicitly or explicitly use hyper-rectangles as their means of spatial subdivision. For example, our tests can also be used search k-d-B Trees.
Reference: [10] <author> Scott T. Leutenegger, Jeffrey M. Edington, and Mario A. Lopez. STR: </author> <title> A simple and efficient algorithm for R-Tree packing. </title> <type> Technical Report 96-02, </type> <institution> Mathematics and Computer Science Dept., University of Denver, </institution> <year> 1996. </year>
Reference-contexts: The data set used in this experiment contained 6 million five dimensional tuples (the data set size is 120MB), where the dimensions were independent and uniformly distributed. This artificial data set was bulk loaded using the STR bulk loading algorithm <ref> [10] </ref>. The experiments were of the same variety as the 2D experiments. We examined the ratio of I/O costs incurred by running linear constraint queries and their corresponding bounding hyper-rectangles. We varied the ratio of hyper-volumes between the linear constraint queries and their hyper-rectangles.
Reference: [11] <author> Ketan Mulmuley. </author> <title> Computational Geometry: An Introduction Through Randomized Algorithms. </title> <publisher> Prentice-Hall, Simon and Schuster Company at Englewood Cliffs, </publisher> <address> NJ, </address> <year> 1994. </year>
Reference-contexts: We have therefore developed more efficient tests that are numerically safe (guaranteed not to drop valid answers) for the problem of testing if a QBLC region overlaps an MBH. Computational geometry <ref> [13, 11] </ref> seemingly provides us with another possible source of algorithms for our overlap test. If one restricts the queries to finite hyper-volume, the conjunction of linear constraints with the bounding box from the index structure describes a convex polyhedron. <p> Determining if the set of vertices that describe this polyhedron is empty is equivalent to solving the intersection problem. Such an algorithm is presented in <ref> [11] </ref>. Unfortunately it scales factorially with respect to dimensionality. It is easy to see why it is not possible to solve the problem this way in better than exponential time when one considers that the result, in many cases, is a hyper-rectangle.
Reference: [12] <author> J. Nievergelt, H. Hinterberger, and S. C. Sevcik. </author> <title> The grid file: An adaptable, symmetric multikey file structure. </title> <booktitle> In Readings in Database Systems. </booktitle> <publisher> Morgan Kauf-mann, </publisher> <year> 1988. </year>
Reference-contexts: For instance, there are indexing structures like R-Trees [7], Buddy Trees [9] , k-d-B Trees [14], and Grid Files <ref> [12] </ref>, which either implicitly or explicitly use hyper-rectangles as their means of spatial subdivision. For example, our tests can also be used search k-d-B Trees. A k-d-B tree is a binary tree where each node splits some dimension along some value for that dimension.
Reference: [13] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> 3rd printing. </note>
Reference-contexts: We have therefore developed more efficient tests that are numerically safe (guaranteed not to drop valid answers) for the problem of testing if a QBLC region overlaps an MBH. Computational geometry <ref> [13, 11] </ref> seemingly provides us with another possible source of algorithms for our overlap test. If one restricts the queries to finite hyper-volume, the conjunction of linear constraints with the bounding box from the index structure describes a convex polyhedron.
Reference: [14] <author> J. Robinson. </author> <title> The k-d-b tree: A search structure for large multi-dimensional dynamic indexes. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 10-18, </pages> <year> 1981. </year>
Reference-contexts: Algorithmically, this requires a test that determines whether a particular section of data space overlaps the query region. Our solution is designed to work with indexing structures that use hyper-rectangles as regions. Such structures are variants of the R-Tree [7, 1, 15], the k-d-B-Tree <ref> [14] </ref> (described further in section 4), the Buddy-Tree [8, 9], and many more. We chose to implement our strategy with the R fl -Tree [1] (which is a variant of the R-Tree). These indexing structures support range selection queries. These queries are conjunctions of range constraints. <p> For instance, there are indexing structures like R-Trees [7], Buddy Trees [9] , k-d-B Trees <ref> [14] </ref>, and Grid Files [12], which either implicitly or explicitly use hyper-rectangles as their means of spatial subdivision. For example, our tests can also be used search k-d-B Trees. A k-d-B tree is a binary tree where each node splits some dimension along some value for that dimension.
Reference: [15] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos. </author> <title> The R + - Tree: A dynamic index for multi-dimensional objects. </title> <booktitle> In Proc. 13th Inf. Conf. on VLDB, </booktitle> <pages> pages 507-518, </pages> <year> 1987. </year>
Reference-contexts: Algorithmically, this requires a test that determines whether a particular section of data space overlaps the query region. Our solution is designed to work with indexing structures that use hyper-rectangles as regions. Such structures are variants of the R-Tree <ref> [7, 1, 15] </ref>, the k-d-B-Tree [14] (described further in section 4), the Buddy-Tree [8, 9], and many more. We chose to implement our strategy with the R fl -Tree [1] (which is a variant of the R-Tree). These indexing structures support range selection queries. <p> In this section, for convenience, we discuss R-Trees only. We briefly discuss some other indexing structures in Section 4. 2.1.1 The R-Tree indexing structure R-Trees <ref> [7, 1, 15] </ref> are a family of height-balanced trees designed specifically for indexing multi-dimensional spatial data. An R-Tree hierarchically decomposes the data space into progressively smaller hyper-rectangular regions. Each node (a disk page) in the R-Tree is either an internal node or a leaf node. <p> Note that two entries in the same internal node may contain MBHs that overlap. All MBHs are oriented orthogonally with respect to the (fixed) axes for the R-Tree. The above description concerns R-Tree structure and is applicable to any of the variants of the R-Tree, including R + -Trees <ref> [15] </ref> and R fl -Trees [1]. The variants were created to reduce search time through improved space utilization, and reduced overlap.
References-found: 15

