URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/iccad91.FTKC.ps.gz
Refering-URL: http://www.eecs.berkeley.edu/~kukimoto/
Root-URL: http://www.cs.berkeley.edu
Title: literals CPU time(sec) rd53-73 5 0.99 Table 1: Redesign Table 2: Minimization of Boolean Relations
Author: GYOCRO D. Bostick, G. D. Hachtel, R. Jacoby, M. R. Lightner, P. Moceyunas, C. R. Morrison, and D. Ravenscroft. [] R. K. Brayton, R. Rudell, A. L. Sangiovanni-Vincentelli, and A. R. Wang. [] Randal E. Bryant. [] W. Buttner and H. Simonis. [] M. Fujita, T. Kakuda, and Y. Matsunaga. [] A. Ghosh, S. Devadas, and A. R. [] S. Minato, N. Ishiura, and S. Yajima. [] U. Martin and T. Nipkow. [] U. Martin and T. Nipkow. [] S. Muroga, Y. Kambayashi, H. C. Lai, and J. N. Culliney. [] F. Somenzi and R. K. Brayton. [] Y. Watanabe and R. K. Brayton. 
Keyword: b  
Note: The CPU time on these two tables consists of the processing  6 Conclusion References [1]  In Proc. ICCAD, pages  IEEE Trans. on Computer, C-35(8):677-691,  Proc. ICCD, pages  In Proc. DAC, pages  In Proc. ICCAD, pages 316-319,  In Proc. MCNC International Workshop on Logic Synthesis,  
Address: literals(fac/sop) literals CPU time(sec)  
Affiliation: MIS BU MIS  
Pubnum: Computer,  
Phone: int3 13/19 12/15 0.03 int15 437/588 447/560 700.5 b9 162/284 163/278 5.69  
Date: 62-65, November 1987.  August 1986.  277-281, September 1990.  52-57, June  38(10):1404-1424, October 1989.  November 1989.  May 1991.  
Abstract: 8). We order newly introduced variables first so that we can see how large the number of nodes below those variables is. By counting the number of nodes below the nodes of the variable t, we can get the complexity of the logic functions when we assign constant values to t. In this case, if we assign 0 to t, the total number of nodes below t is 8, and if we assign 1 to t, it is 7. Thus the latter substitution is expected to give a more efficient result. However, this is not the simplest solution, i.e., if we assign b to t, we get: This shows that the quality of the initial circuit is restricted if the substitutions to newly introduced variables are limited to constants. To exploit don't care sets of Boolean unification completely, minimization of the initial circuit is essential. An extended transduction method is a promising procedure for this purpose, where the general solutions of Boolean unification are used as permissible functions [10]. The details can be found in a forthcoming paper. 5 Implementation and Results We have implemented Boole's method using shared BDD's with negative edges [7] on Sparc station 2. As the variable ordering of BDD's, we select variables to be unified(p i ) first followed by non-unified variables(q i ). A case splitting variable in figure 1 is selected in the same order as the variable ordering of BDD's. The synthesis method shown in the previous section has been also implemented using BDD's. Experimental results for redesign are summarized in table 1. We assume that we have a circuit rd73 as an existing circuit, which is rectified to function as rd53 by attaching an extra circuit to the input part of the circuit. Table 2 shows experimental results on multi-level minimization of Boolean relations. An initial circuit is obtained from a general solution by substituting appropriate single literals or constants to newly introduced variables and minimized with MIS2.2 standard script. These are compared with the minimization results of heuristic minimizer GYOCRO [13]. The two-level minimization results of GYOCRO are processed with MIS2.2 standard script to get multi-level circuits. We have shown that Boolean unification gives powerful methods for various problems in combinational logic synthesis, and also presented some experimental results using BDD's. We are now working on constructing a more general logic synthesis method from the results of Boolean unification, and on the application of Boolean unification to sequential logic synthesis. Acknowledgment: The authors are grateful to Mr. Y. Watanabe of UC Berkeley for providing us Boolean relation benchmarks and his minimization results. x = a
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Bostick, G. D. Hachtel, R. Jacoby, M. R. Lightner, P. Moceyunas, C. R. Morrison, and D. Ravenscroft. </author> <title> Boulder optimal logic design system. </title> <booktitle> In Proc. ICCAD, </booktitle> <pages> pages 62-65, </pages> <month> November </month> <year> 1987. </year>
Reference: [2] <author> R. K. Brayton, R. Rudell, A. L. Sangiovanni-Vincentelli, and A. R. Wang. </author> <title> MIS: A multiple-level interactive logic optimization system. </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 6(6) </volume> <pages> 1062-1081, </pages> <month> November </month> <year> 1987. </year>
Reference: [3] <author> Randal E. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Trans. on Computer, </journal> <volume> C-35(8):677-691, </volume> <month> August </month> <year> 1986. </year>
Reference: [4] <author> W. Buttner and H. Simonis. </author> <title> Embedding boolean expressions into logic programming. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 4 </volume> <pages> 191-205, </pages> <year> 1987. </year>
Reference: [5] <author> M. Fujita, T. Kakuda, and Y. Matsunaga. </author> <title> Redesign and automatic error correction of combinational circuits. </title> <booktitle> In Proc. IFIP Working Conference on Logic and Architectural Synthesis, </booktitle> <month> May </month> <year> 1990. </year>
Reference: [6] <author> A. Ghosh, S. Devadas, and A. R. </author> <title> Newton. Heuristic minimization of boolean relations using testing techniques. </title> <booktitle> In Proc. ICCD, </booktitle> <pages> pages 277-281, </pages> <month> September </month> <year> 1990. </year>
Reference: [7] <author> S. Minato, N. Ishiura, and S. Yajima. </author> <title> Shared binary decision diagrams with attributed edges for efficient boolean function manipulation. </title> <booktitle> In Proc. DAC, </booktitle> <pages> pages 52-57, </pages> <month> June </month> <year> 1990. </year>
Reference: [8] <author> U. Martin and T. Nipkow. </author> <title> Unification in boolean rings. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 4 </volume> <pages> 381-396, </pages> <year> 1988. </year>
Reference: [9] <author> U. Martin and T. Nipkow. </author> <title> Boolean unification | the story so far. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 7 </volume> <pages> 275-293, </pages> <year> 1989. </year>
Reference: [10] <author> S. Muroga, Y. Kambayashi, H. C. Lai, and J. N. Culliney. </author> <title> The transduction method design of logic network based on permissible functions. </title> <journal> IEEE Trans. on Computer, </journal> <volume> 38(10) </volume> <pages> 1404-1424, </pages> <month> October </month> <year> 1989. </year>
Reference: [11] <author> H. Simonis. </author> <title> Test generation using the constraint logic programming language CHIP. </title> <booktitle> In Proc. 6th International Conference on Logic Programming, </booktitle> <month> June </month> <year> 1989. </year>
Reference: [12] <author> F. Somenzi and R. K. Brayton. </author> <title> An exact minimizer for boolean relations. </title> <booktitle> In Proc. ICCAD, </booktitle> <pages> pages 316-319, </pages> <month> November </month> <year> 1989. </year>

References-found: 12

