URL: ftp://ftp.cs.utexas.edu/pub/lam/icnp94.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/lam/seminar/mypapers.html
Root-URL: 
Title: Design, Verification and Implementation of an Authentication Protocol  
Author: Thomas Y.C. Woo Simon S. Lam 
Address: Austin, Texas 78712-1188  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: We present an account of the entire development cycle (i.e., design, specification and verification, and implementation) of a realistic authentication protocol, which is part of a security architecture proposed by us. The protocol's design follows a stepwise refinement process, which we illustrate. Our account of its specification and verification provides a practical demonstration of a proposed formal analysis approach. For its implementation, we adopt the recently proposed GSS-API standard. We describe the mapping from our protocol to GSS-API, which can serve as a reference for other protocol implementations. We believe that the global perspective presented in this paper would be of great value to protocol designers, verifiers, and implementors, and contribute toward bridging the gap between the theory and practice of authentication protocol design. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi and R. Needham. </author> <title> Good engineering practice for security in cryptographic protocols. </title> <type> Manuscript, </type> <month> November </month> <year> 1993. </year>
Reference-contexts: Then we successively analyze and refine it to relax certain assumptions. We try to make small changes in each refinement step, so that we can informally observe that the desirable security properties are preserved. Most of our refinements steps are based on known design principles <ref> [1] </ref>. We caution however that such a refinement process is informal, and does not obviate a formal analysis of the protocol at the end. <p> a sign operation; this is sufficient because secrecy is already provided by the outer encryption under the respective intended receiver's public key. 5 Discussion A systematic way of designing authentication protocols is to follow a stepwise refinement process (starting with small and intuitively correct protocols), while observing known design principles <ref> [1] </ref>. From our experience and that of others, such a process can help avoid many common protocol errors, and often provide protocols that are easier to verify. Much research is needed to identify useful design principles and refinement heuristics. <p> Hopefully, this global perspective on authentication protocol development would be a valuable reference to protocol designers, verifiers, and implementors. The protocol was derived through a systematic stepwise refinement process. Although the process is informal, it is useful in light of the highly error-prone nature of authentication protocol design <ref> [1] </ref>. The protocol presented is part of an overall security architecture we have proposed. An implementation of the basic protocol have been completed. An application programming interface for the protocol along with more details of the implementation are reported in [21].
Reference: [2] <institution> CCITT Recommendation X.208 Specification of Abstract Syntax Notation one (ASN.1), </institution> <year> 1988. </year> <note> See also ISO/IEC 8824, </note> <year> 1989. </year>
Reference-contexts: We encode all protocol messages in XDR format [19]. This allows our implementation to be portable in a heterogeneous environment. We pick XDR over other representation schemes (e.g., ASN.1 encoding <ref> [2] </ref>) mainly for its simplicity and availability. We choose respectively RSA [17] and DES [14] as the underlying asymmetric and symmetric cryptosystems. Both are de facto standards for their respective purposes. 8 We use MD5 [16] as our message digest algorithm.
Reference: [3] <author> R. Bird, I. Gopal, A. Herzberg, P.A. Janson, S. Kutten, R. Molva, and M. Yung. </author> <title> Systematic design of a family of attack-resistant authentication protocols. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 11(5) </volume> <pages> 679-693, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Recently, much research has been directed toward remedying these two problems. To address (i), basic design principles corresponding to symmetric and asymmetric cryp-tosystems are discussed in [22], and the design of a family of authentication protocols is systematically demonstrated in <ref> [3] </ref>. To address (ii), a number of formal approaches have been proposed specifically for the analysis of authentication protocols [4, 6, 9, 24]. These research efforts represent useful steps toward understanding how to design and analyze authentication protocols. <p> On the other hand, a protocol obtained from such a refinement process, using known design principles, is more likely to be correct and easier to be proved correct. A stepwise derivation procedure has previously been used in <ref> [3] </ref>; their focus is on a much lower level of detail (e.g., message content) while we focus more on protocol steps. A key idea in our design is separation of key distribution and mutual authentication functions. <p> is already shared between the principals. (M1) P : generate nonce n P (M2) P ! Q : P; n P (M3) Q : generate nonce n Q (M4) Q ! P : fn P ; n Q g k It might appear that M is susceptible to interleaving attacks <ref> [3] </ref>. This is, however, not the case because we assume that k is distributed afresh each time just prior to an authentication exchange. Thus, unlike the typical setting of a usual two-party mutual authentication, authentication is never performed again using the same key k. <p> Thus, unlike the typical setting of a usual two-party mutual authentication, authentication is never performed again using the same key k. A number of other two-party mutual authentication protocols have been proposed in the literature <ref> [3] </ref>. Several of them fit our requirements; we prefer the above for its simplicity.
Reference: [4] <author> M. Burrows, M. Abadi, and R.M. Needham. </author> <title> A logic of authentication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(1) </volume> <pages> 18-36, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: The design of authentication protocols is notoriously error-prone. Indeed, many authentication protocols have been published and later found to contain subtle weaknesses or flaws <ref> [4, 13] </ref>. Two factors contribute to this: (i) the lack of well-established guiding principles for authentication protocol design; and (ii) the use of informal operational reasoning in protocol analysis. Recently, much research has been directed toward remedying these two problems. <p> To address (i), basic design principles corresponding to symmetric and asymmetric cryp-tosystems are discussed in [22], and the design of a family of authentication protocols is systematically demonstrated in [3]. To address (ii), a number of formal approaches have been proposed specifically for the analysis of authentication protocols <ref> [4, 6, 9, 24] </ref>. These research efforts represent useful steps toward understanding how to design and analyze authentication protocols. However, there is still a significant lag between the development of formal methods and their practical application. <p> Woo and Lam's methodology is based on the use of transition-based semantics for both specification and verification, and allows a simple mapping from the formal protocol to the actual implementation. On the other hand, most logical approaches (e.g., <ref> [4, 6] </ref>) assume a very high level of abstraction, making them prone to misuse and misinterpretation. For example, BAN logic [4] application requires a protocol to be first idealized. The idealization process is at best informal, and at worst error prone. <p> On the other hand, most logical approaches (e.g., [4, 6]) assume a very high level of abstraction, making them prone to misuse and misinterpretation. For example, BAN logic <ref> [4] </ref> application requires a protocol to be first idealized. The idealization process is at best informal, and at worst error prone. Indeed, there have been several cases where invalid conclusions were drawn from its application, mainly resulting from invalid idealizations [12, 15].
Reference: [5] <author> M.H. Cheheyl, M. Gasser, G.A. Huff, and J.K. Millen. </author> <title> Verifying security. </title> <journal> ACM Computing Surveys, </journal> <volume> 13(3) </volume> <pages> 279-339, </pages> <month> September </month> <year> 1981. </year>
Reference-contexts: We explore the main issues, and their relationships, encountered in each of these phases. Our work is in the same spirit as a number of previous studies where a realistic system is formally specified and verified, except that our study is for a different problem domain <ref> [5, 8] </ref>. Additionally, this paper has several other contributions. First, it presents a stepwise refinement process for deriving authentication protocols. The process, albeit informal, is useful in developing new protocols. Second, the authentication protocol presented in this paper is interesting in its own right.
Reference: [6] <author> L. Gong, R.M. Needham, and R. Yahalom. </author> <title> Reasoning about belief in cryptographic protocols. </title> <booktitle> In Proceedings of 11th IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 234-248, </pages> <address> Oakland, California, </address> <month> May 7-9 </month> <year> 1990. </year>
Reference-contexts: To address (i), basic design principles corresponding to symmetric and asymmetric cryp-tosystems are discussed in [22], and the design of a family of authentication protocols is systematically demonstrated in [3]. To address (ii), a number of formal approaches have been proposed specifically for the analysis of authentication protocols <ref> [4, 6, 9, 24] </ref>. These research efforts represent useful steps toward understanding how to design and analyze authentication protocols. However, there is still a significant lag between the development of formal methods and their practical application. <p> Woo and Lam's methodology is based on the use of transition-based semantics for both specification and verification, and allows a simple mapping from the formal protocol to the actual implementation. On the other hand, most logical approaches (e.g., <ref> [4, 6] </ref>) assume a very high level of abstraction, making them prone to misuse and misinterpretation. For example, BAN logic [4] application requires a protocol to be first idealized. The idealization process is at best informal, and at worst error prone.
Reference: [7] <institution> Information Sciences Institute, Marina Del Rey, </institution> <month> California. </month> <title> DARPA Internet Program Protocol Specification, Transmission Control Protocol, </title> <month> September </month> <year> 1981. </year> <note> RFC 793. </note>
Reference-contexts: It is based on the use of both symmetric and asymmetric cryptosystems and can be made adaptive in systems with a changing communication topology. The protocol can be viewed as a simple extension of the three-way handshake protocol used in the connection establishment phase of TCP <ref> [7] </ref>, and hence can be readily adapted to provide transport level authentication. Third, it provides a detailed and practical demonstration of the application of a particular analysis approach. Fourth, we adopt the recently proposed Generic Security Service Application Program Interface (GSS-API) draft standard [11] for our protocol implementation.
Reference: [8] <author> R.A. Kemmerer. </author> <title> Formal Verification of an Operating System Security Kernel. </title> <publisher> UMI Research Press, </publisher> <year> 1982. </year>
Reference-contexts: We explore the main issues, and their relationships, encountered in each of these phases. Our work is in the same spirit as a number of previous studies where a realistic system is formally specified and verified, except that our study is for a different problem domain <ref> [5, 8] </ref>. Additionally, this paper has several other contributions. First, it presents a stepwise refinement process for deriving authentication protocols. The process, albeit informal, is useful in developing new protocols. Second, the authentication protocol presented in this paper is interesting in its own right.
Reference: [9] <author> R.A. Kemmerer. </author> <title> Analyzing encryption protocols using formal techniques. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 7(4) </volume> <pages> 448-457, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: To address (i), basic design principles corresponding to symmetric and asymmetric cryp-tosystems are discussed in [22], and the design of a family of authentication protocols is systematically demonstrated in [3]. To address (ii), a number of formal approaches have been proposed specifically for the analysis of authentication protocols <ref> [4, 6, 9, 24] </ref>. These research efforts represent useful steps toward understanding how to design and analyze authentication protocols. However, there is still a significant lag between the development of formal methods and their practical application.
Reference: [10] <author> B. Lampson, M. Abadi, M. Burrows, and T. Wobber. </author> <title> Authentication in distributed systems: Theory and practice. </title> <booktitle> In Proceedings of 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 165-182, </pages> <booktitle> Asilomar Conference Center, </booktitle> <address> Pacific Grove, California, </address> <month> October 13-16 </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Authentication is a fundamental concern in the design of secure distributed systems <ref> [10, 22] </ref>. For example, in the prevalent client-server computing paradigm, a server must verify a client's identity before it can make authorization decisions; similarly, a client must ascertain a server's legitimacy before it would proceed with its service request.
Reference: [11] <author> J. Linn. </author> <title> Generic Security Service Application Program Interface, </title> <month> September </month> <year> 1993. </year> <note> RFC 1508. </note>
Reference-contexts: Third, it provides a detailed and practical demonstration of the application of a particular analysis approach. Fourth, we adopt the recently proposed Generic Security Service Application Program Interface (GSS-API) draft standard <ref> [11] </ref> for our protocol implementation. We describe the mapping from our protocol to GSS-API, which can serve as a valuable reference for other implementations. The balance of this paper is organized as follows. <p> Using the above lemmas, we can prove that KM satisfies GSC, (C1) and (C2). Thus we conclude that the protocol is correct. Proposition. KM is correct with respect to (f (C1); (C2)g; f (S)g). 4 Protocol Implementation Our protocol implementation adopts the recently published GSS-API draft standard <ref> [11] </ref>. GSS-API is an implementation-independent interface through which security services are provided to callers. Specifically, it provides mutual authentication and per-message security services (e.g., confidentiality, integrity). Any application that makes use of the GSS-API interface can choose to use our protocol implementation as its underlying authentication mechanism. <p> In particular, we will discuss mainly context level calls, and mention per-message and support calls only to the extent that they are related. The ensuing discussion assumes basic familiarity with the design of GSS-API. The reader should consult <ref> [11] </ref> for clarification of any unfamiliar concepts. Consider protocol KM in Figure 1. The basic control flow of the initiator and responder is described below (Figure 4): 1. A principal must first acquire a set of credentials that allow verification of its identity by other principals.
Reference: [12] <author> W. Mao and C. Boyd. </author> <title> Towards formal analysis of security protocols. </title> <booktitle> In Proceedings of The Computer Security Foundations Workshop VI, </booktitle> <pages> pages 147-158, </pages> <address> Franconia, New Hampshire, </address> <year> 1993. </year>
Reference-contexts: For example, BAN logic [4] application requires a protocol to be first idealized. The idealization process is at best informal, and at worst error prone. Indeed, there have been several cases where invalid conclusions were drawn from its application, mainly resulting from invalid idealizations <ref> [12, 15] </ref>. The verification in Section 3 is carried out on KM , rather than on its components K and M . That is, the modularity of KM is not exploited in its verification.
Reference: [13] <author> J.H. Moore. </author> <title> Protocol failures in cryptosystems. </title> <booktitle> Proceedings of IEEE, </booktitle> <volume> 76(5) </volume> <pages> 594-602, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: The design of authentication protocols is notoriously error-prone. Indeed, many authentication protocols have been published and later found to contain subtle weaknesses or flaws <ref> [4, 13] </ref>. Two factors contribute to this: (i) the lack of well-established guiding principles for authentication protocol design; and (ii) the use of informal operational reasoning in protocol analysis. Recently, much research has been directed toward remedying these two problems.
Reference: [14] <institution> National Bureau of Standards, Washingtion, D.C. </institution> <note> Data Encryption Standarad FIPS Pub 46, January 15 1977. </note>
Reference-contexts: We encode all protocol messages in XDR format [19]. This allows our implementation to be portable in a heterogeneous environment. We pick XDR over other representation schemes (e.g., ASN.1 encoding [2]) mainly for its simplicity and availability. We choose respectively RSA [17] and DES <ref> [14] </ref> as the underlying asymmetric and symmetric cryptosystems. Both are de facto standards for their respective purposes. 8 We use MD5 [16] as our message digest algorithm. In par-ticular, it is used in the signing of all certificates.
Reference: [15] <author> D. Nessett. </author> <title> A critique of the Burrows, Abadi and Needham logic. </title> <journal> ACM Operating Systems Review, </journal> <volume> 24(2) </volume> <pages> 35-38, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: For example, BAN logic [4] application requires a protocol to be first idealized. The idealization process is at best informal, and at worst error prone. Indeed, there have been several cases where invalid conclusions were drawn from its application, mainly resulting from invalid idealizations <ref> [12, 15] </ref>. The verification in Section 3 is carried out on KM , rather than on its components K and M . That is, the modularity of KM is not exploited in its verification.
Reference: [16] <author> R. Rivest. </author> <title> The MD5 Message-Digest Algorithm, </title> <month> April </month> <year> 1992. </year> <note> RFC 1321. </note>
Reference-contexts: We pick XDR over other representation schemes (e.g., ASN.1 encoding [2]) mainly for its simplicity and availability. We choose respectively RSA [17] and DES [14] as the underlying asymmetric and symmetric cryptosystems. Both are de facto standards for their respective purposes. 8 We use MD5 <ref> [16] </ref> as our message digest algorithm. In par-ticular, it is used in the signing of all certificates.
Reference: [17] <author> R.L. Rivest, A. Shamir, and L. Adleman. </author> <title> A method for obtaining digital signatures and public-key cryptosys-tems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <month> Febru-ary </month> <year> 1978. </year>
Reference-contexts: We encode all protocol messages in XDR format [19]. This allows our implementation to be portable in a heterogeneous environment. We pick XDR over other representation schemes (e.g., ASN.1 encoding [2]) mainly for its simplicity and availability. We choose respectively RSA <ref> [17] </ref> and DES [14] as the underlying asymmetric and symmetric cryptosystems. Both are de facto standards for their respective purposes. 8 We use MD5 [16] as our message digest algorithm. In par-ticular, it is used in the signing of all certificates.
Reference: [18] <author> J.G. Steiner, C. Neuman, and J.I. Schiller. </author> <title> Kerberos: An authentication service for open network systems. </title> <booktitle> In Proceedings of USENIX Winter Conference, </booktitle> <pages> pages 191-202, </pages> <address> Dallas, TX, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: First, it presents a stepwise refinement process for deriving authentication protocols. The process, albeit informal, is useful in developing new protocols. Second, the authentication protocol presented in this paper is interesting in its own right. It overcomes many of the drawbacks found in existing client-server authentication protocols (e.g., Ker-beros <ref> [18] </ref>, SPX [20]). It is based on the use of both symmetric and asymmetric cryptosystems and can be made adaptive in systems with a changing communication topology. <p> Section 6 is our conclusion. Due to length limitation, we omit the detailed proofs in this paper. 2 Protocol Design The protocol in this paper is a peer-to-peer authentication protocol. It is similar in functionality and structure to most existing authentication protocols (e.g., Kerberos <ref> [18] </ref>, SPX [20]). Specifically, it mutually authenticates two communicating peers with the help of a trusted third-party server. In this paper, we consider only intradomain authentication; that is, we assume that all principals are under a single authority and trust a common server.
Reference: [19] <author> Sun Microsystems, Inc. XDR: </author> <title> External Data Representation Standard, </title> <month> June </month> <year> 1987. </year> <note> RFC 1057. </note>
Reference-contexts: Our implementation is based on approach (3); but it falls back to approach (2) when a certificate is not locally available (e.g., following expiration). We encode all protocol messages in XDR format <ref> [19] </ref>. This allows our implementation to be portable in a heterogeneous environment. We pick XDR over other representation schemes (e.g., ASN.1 encoding [2]) mainly for its simplicity and availability. We choose respectively RSA [17] and DES [14] as the underlying asymmetric and symmetric cryptosystems.
Reference: [20] <author> J.J. Tardo and K. Alagappan. SPX: </author> <title> Global authentication using public key certificates. </title> <booktitle> In Proceedings of 12th IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 232-244, </pages> <address> Oakland, California, </address> <month> May 20-22 </month> <year> 1991. </year>
Reference-contexts: The process, albeit informal, is useful in developing new protocols. Second, the authentication protocol presented in this paper is interesting in its own right. It overcomes many of the drawbacks found in existing client-server authentication protocols (e.g., Ker-beros [18], SPX <ref> [20] </ref>). It is based on the use of both symmetric and asymmetric cryptosystems and can be made adaptive in systems with a changing communication topology. <p> Section 6 is our conclusion. Due to length limitation, we omit the detailed proofs in this paper. 2 Protocol Design The protocol in this paper is a peer-to-peer authentication protocol. It is similar in functionality and structure to most existing authentication protocols (e.g., Kerberos [18], SPX <ref> [20] </ref>). Specifically, it mutually authenticates two communicating peers with the help of a trusted third-party server. In this paper, we consider only intradomain authentication; that is, we assume that all principals are under a single authority and trust a common server.
Reference: [21] <author> T.Y.C. Woo, R. Bindignavle, S. Su, and S.S. Lam. SNP: </author> <title> An interface for secure network programming. </title> <booktitle> In Proceedings of USENIX Summer Technical Conference, </booktitle> <address> Boston, Mas-sachusetts, </address> <month> June 6-10 </month> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: The protocol presented is part of an overall security architecture we have proposed. An implementation of the basic protocol have been completed. An application programming interface for the protocol along with more details of the implementation are reported in <ref> [21] </ref>. We are 9 currently integrating the protocol implementation with the rest of the security architecture. Due to length limitation, we have omitted many practical details. We hope to include them in a future paper which describes the entire architecture.
Reference: [22] <author> T.Y.C. Woo and S.S. Lam. </author> <title> Authentication for distributed systems. </title> <journal> Computer, </journal> <volume> 25(1) </volume> <pages> 39-52, </pages> <month> January </month> <year> 1992. </year> <note> See also [23]. </note>
Reference-contexts: 1 Introduction Authentication is a fundamental concern in the design of secure distributed systems <ref> [10, 22] </ref>. For example, in the prevalent client-server computing paradigm, a server must verify a client's identity before it can make authorization decisions; similarly, a client must ascertain a server's legitimacy before it would proceed with its service request. <p> Recently, much research has been directed toward remedying these two problems. To address (i), basic design principles corresponding to symmetric and asymmetric cryp-tosystems are discussed in <ref> [22] </ref>, and the design of a family of authentication protocols is systematically demonstrated in [3]. To address (ii), a number of formal approaches have been proposed specifically for the analysis of authentication protocols [4, 6, 9, 24].
Reference: [23] <author> T.Y.C. Woo and S.S. Lam. </author> <title> Authentication revisited. </title> <booktitle> Computer, </booktitle> <address> 25(3):10, </address> <month> March </month> <year> 1992. </year>
Reference: [24] <author> T.Y.C. Woo and S.S. Lam. </author> <title> A semantic model for authentication protocols. </title> <booktitle> In Proceedings of 14th IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 178-194, </pages> <address> Oakland, California, </address> <month> May 24-26 </month> <year> 1993. </year>
Reference-contexts: To address (i), basic design principles corresponding to symmetric and asymmetric cryp-tosystems are discussed in [22], and the design of a family of authentication protocols is systematically demonstrated in [3]. To address (ii), a number of formal approaches have been proposed specifically for the analysis of authentication protocols <ref> [4, 6, 9, 24] </ref>. These research efforts represent useful steps toward understanding how to design and analyze authentication protocols. However, there is still a significant lag between the development of formal methods and their practical application. <p> In this paper, we employ the verification methodology proposed by Woo and Lam <ref> [24, 25] </ref>, which was designed at a level of abstraction relatively close to that of protocol implementation. <p> In the next subsection, we provide a brief overview of Woo and Lam's methodology. Then in the following subsections, we present, in order, a formal specification of KM in the notation of <ref> [24] </ref>, a correctness specification and a summary of the proof that the correctness specification is satisfied by the formal protocol specification. 3.1 Methodology Overview Typical high-level goals of an authentication protocol are the following: * Authentication For each participating principal, upon successful termination of its protocol execution, it should be assured <p> Kg k 1 S (R7) Receive (i; [fng K ]) (R8) Accept (K) (R9) EndRespond (i) Server (S) Protocol: (S1) Receive (r; [i; n; r; n 0 ]) (S2) NewSecret (fi; rg; k) (S3) Send (r; [ffi; n; r; n 0 ; kg k 1 S The reader should consult <ref> [24, 25] </ref> for a more thorough presentation. 3.2 Protocol Specification The formal specification of KM , denoted by KM , is given in Figure 2. We explain the notation: SYS denotes the set of all principals in the system.
Reference: [25] <author> T.Y.C. Woo and S.S. Lam. </author> <title> Verifying authentication protocols: Methodology and example. </title> <booktitle> In Proceedings of International Conference on Network Protocols, </booktitle> <pages> pages 36-45, </pages> <address> San Francisco, California, </address> <month> October 19-22 </month> <year> 1993. </year> <month> 10 </month>
Reference-contexts: In this paper, we employ the verification methodology proposed by Woo and Lam <ref> [24, 25] </ref>, which was designed at a level of abstraction relatively close to that of protocol implementation. <p> Kg k 1 S (R7) Receive (i; [fng K ]) (R8) Accept (K) (R9) EndRespond (i) Server (S) Protocol: (S1) Receive (r; [i; n; r; n 0 ]) (S2) NewSecret (fi; rg; k) (S3) Send (r; [ffi; n; r; n 0 ; kg k 1 S The reader should consult <ref> [24, 25] </ref> for a more thorough presentation. 3.2 Protocol Specification The formal specification of KM , denoted by KM , is given in Figure 2. We explain the notation: SYS denotes the set of all principals in the system.
References-found: 25

