URL: http://www.cs.toronto.edu/~jglu/pub/lopstr.ps
Refering-URL: http://www.cs.toronto.edu/~jglu/pub/
Root-URL: http://www.cs.toronto.edu
Title: Recursive Query Rewriting by Transforming Logic Programs  
Author: Jianguo Lu, Liren Chen, Katia Sycara Jian Lu 
Note: Keywords: industrial application, transformation  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Oliver M. Duschka, </author> <title> Query planning and optimization in information intehration, </title> <type> Ph.D. dissertation, </type> <institution> Stanford University, </institution> <month> December </month> <year> 1997. </year>
Reference-contexts: Query rewriting has applications in query optimization in centralized databases, query processing in distributed databases, and query answering in federated databases. With the widespread use of WWW-based information retrieval, the ability to answer queries using views becoming especially important in integrating semistructured information sources <ref> [1] </ref>. An example to integrate databases is: Example 1 Assume there are two databases (or web site) that provide flight and bus information. The first database provides information on cities connected by Greyhound with one stop-over, and pairs of cities between which Northwest Airlines has non-stop flights. <p> The approximate query could be either the generalization or the specialization of the original query, depending on the requirement of the application. <ref> [1] </ref> studied the the recursive query rewriting using conjunctive views (each view containing only one clause). In their study, a more specific Datalog program is returned as the result of rewriting. This paper addresses the problem of recursive query rewriting using disjunctive views (each view may contain multiple clauses). <p> Hence, the notion of generalization beyond logical implication is introduced, and a corresponding method is proposed. Comparing the results in the query rewriting community, rewriting recursive queries is a recognized difficult problem, especially when views are not restricted as conjunctive <ref> [1] </ref>. We contributed to this area in that we can deal with not only conjunctive views, but also disjunctive views.
Reference: [2] <author> A.Y. Levy, A.O.Mendelzpn, Y.Sagiv, and D. Srivastava, </author> <title> Answering queries using views. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Principles of Database Systems, </booktitle> <year> 1996, </year> <pages> page 95-104. </pages>
Reference-contexts: This is the problem our paper addresses. Rewriting of conjunctive queries using conjunctive views is well understood, and shown to be NP-complete <ref> [2] </ref>. For a subclass of conjunctive queries, the acyclic conjunctive queries, there is a polynomial algorithm [9]. In the context of recursive queries, in general it is undecidable for the problem of whether a Datalog program can be rewritten into an equivalent program that only use views.
Reference: [3] <author> Jianguo Lu, Jun Arima, </author> <title> Inductive logic programming beyond logical implication, </title> <booktitle> Proceedings of the 7th International Workshop on Arithmetic Learning Theory, 1996 Lecture Notes in Artificial Intelligence 1160. </booktitle>
Reference-contexts: In their study, a more specific Datalog program is returned as the result of rewriting. This paper addresses the problem of recursive query rewriting using disjunctive views (each view may contain multiple clauses). As an application of generalization beyond logical implication <ref> [3] </ref>, we provide a method to generalize the recursive query when equivalent rewriting is not obtainable. In the following, we first introduce some preliminary concepts of query rewriting. Secondly, we argue that generalization under the logical implication is not sufficient.
Reference: [4] <author> Maher, M.J., </author> <title> Equivalence of logic programs, Foundations of Deductive Databases and Logic Programming, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference: [5] <author> Muggleton, S., L. De Raedt. </author> <title> Inductive logic programming: theory and methods. </title> <journal> Journal of Logic Programming, </journal> <volume> 19,20:629-679, </volume> <year> 1994. </year>
Reference-contexts: Especially in inductive logic programming, people are using various methods that approximate logical implication, such as inverse resolution and inverse implication to generalize clauses <ref> [5] </ref>. However, there are many cases that generalization under logical implication relation is not adequate. To illustrate this, we have the following very simple example: Example 5 Suppose we have two programs Q1, Q2: Q1: grandparent (X,Y):-parent (X,U), parent (U,Y). ancestor (X,Y):-grandparent (X,Y).
Reference: [6] <author> Muggleton, S., </author> <title> Inverting the resolution principle. </title> <booktitle> In Machine Intelligence 12. </booktitle> <publisher> Oxford University Press, </publisher> <year> 1991. </year>
Reference-contexts: what is the more desirable ordering based on which we generalize programs? As illustrated by the above figure and Example 5, we argue that the notion of set inclusion ordering between semantics of logic programs (i.e., S ) should be used as a basis for generalization. 4 3.2 Rules Following <ref> [6] </ref>, we view the generalization as a program transformation process. Given a program P 0 , by successively applying one of the following transformation rules, a transformation sequence P 0 ; :::; P n is generated.
Reference: [7] <author> Plotkin, G. D., </author> <title> A note on inductive generalization, </title> <booktitle> Machine Intelligence 5, </booktitle> <publisher> Edinburgh University Press 1970, </publisher> <pages> pp. 153-163. </pages>
Reference-contexts: V: v (X,Y):-flight (X,Y). v (X,Y):-bus (X,Y). The generalizing rewriting of Q using V is Q': q (X,Y):-v (X,Y). q (X,Y):-v (X,U),q (U,Y). 3 Generalization beyond logical implication Since the seminal paper on generalization of clauses based on subsumption <ref> [7] </ref>, there are various extensions in this area. Especially in inductive logic programming, people are using various methods that approximate logical implication, such as inverse resolution and inverse implication to generalize clauses [5]. However, there are many cases that generalization under logical implication relation is not adequate.
Reference: [8] <author> Pettorossi, A., M. Proietti, </author> <title> Transformation of logic programs: foundations and techniques, </title> <journal> J. Logic programming, </journal> <year> 1994, </year> <month> 19(20), </month> <pages> pp. 261-320. </pages>
Reference-contexts: Now we are ready to give the unf olding and f olding rules to produce generalization beyond implication, similar to the rules in <ref> [8] </ref>. Rule 1 (Unfolding) Let P k be the program fE 1 ; :::; E r ; C; E r+1 ; :::; E s g, and let C be the clause H:-F,A,G, where A is a positive literal and F and G are (possibly empty) sequences of literals.
Reference: [9] <author> X. Qian. </author> <title> "Query folding". </title> <booktitle> In Proceedings of the Twelfth International Conference on Data Engineering, </booktitle> <pages> pages 48-55. </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: This is the problem our paper addresses. Rewriting of conjunctive queries using conjunctive views is well understood, and shown to be NP-complete [2]. For a subclass of conjunctive queries, the acyclic conjunctive queries, there is a polynomial algorithm <ref> [9] </ref>. In the context of recursive queries, in general it is undecidable for the problem of whether a Datalog program can be rewritten into an equivalent program that only use views. Besides, in many cases, equivalent rewriting may not exist.
Reference: [10] <author> Rouveirol, C., Jean Francois Puget, </author> <title> Beyond inversion of resolution, </title> <editor> in Bruce W. Porter and Ray J. Mooney(eds.) </editor> <booktitle> Machine learning: Proceedings of the seventh international conference on machine learning, 1990. </booktitle> <publisher> Morgan Kaufmann. </publisher> <pages> pp. 122-130. </pages>
Reference-contexts: Here we omit the condition that for any clause D of P k not in fD 1 ; :::; D n g, hd (D) is not unifiable with A. Hence, it is a generalization operation, essentially the same as the absorption in <ref> [10] </ref>. Here we use a more complicated form than absorption because this rule is also intended to fold multiple clauses at the same time. Condition 3 is necessary to ensure P k+1 S P k .
Reference: [11] <author> Jeffrey D. Ullman, </author> <title> Information Integration Using Logical Views, </title> <type> Invited paper for ICDT '97. 8 </type>
Reference-contexts: 1 Introduction This paper proposes to rewrite database queries by logic program transformations. Query rewriting refers to the activity of determining if and how a query can be answered using a given set of resources, or, using a given set of materialized views <ref> [11] </ref>. Query rewriting is important because the base relations referred to in a query might be stored remotely and hence too expensive to access, or might be conceptual relations only and hence not existent physically.
References-found: 11

