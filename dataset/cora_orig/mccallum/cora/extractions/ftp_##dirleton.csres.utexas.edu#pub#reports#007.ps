URL: ftp://dirleton.csres.utexas.edu/pub/reports/007.ps
Refering-URL: http://www.cli.com/reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: (512) 322-9951  
Title: The Mechanical Verification of Distributed Systems  
Author: J. M. Crawford D. M. Goldschlag 
Address: 1717 W. 6th St. Suite 290 Austin, Texas 78703  
Affiliation: Computational Logic Inc.  
Abstract: Technical Report #7 July 1987 Computational Logic, Inc. 1717 West Sixth Street Suite 290 Austin, Texas 78703 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Boyer, R. S., Moore, J S., </author> <title> A Computational Logic, </title> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: INTRODUCTION This paper describes a theory for the mechanical verification of distributed systems which has been implemented on the Boyer-Moore theorem prover <ref> [1] </ref> [2]. The Boyer-Moore Logic, the language of the theorem prover, is a quantifier free version of predicate calculus, with recursion. Our theory has been used to mechanically prove safety and liveness properties for a solution to the N-processor mutual exclusion problem. <p> The previous technique cannot be used, since the left and right channels are the same. Theorem 16: WEIGHT-OF-SYSTEM-STATE-INVARIANT-OVER-ME-N=1 (REWRITE) (EQUAL (PLUS (WEIGHT-OF-CHANNELS 1 (ME 0 1 CLOCK SYSTEM-STATE)) (WEIGHT-OF-PROCESSES 1 <ref> (ME 0 1 CLOCK 79 SYSTEM-STATE) </ref>)) (PLUS (WEIGHT-OF-CHANNELS 1 SYSTEM-STATE) (WEIGHT-OF-PROCESSES 1 SYSTEM-STATE))) ((USE (WEIGHT-OF-PROCESSES (N 1) (SYSTEM-STATE (ME 0 1 CLOCK SYSTEM-STATE))) (WEIGHT-OF-CHANNELS (N 1) (SYSTEM-STATE (ME 0 1 CLOCK SYSTEM-STATE))) (WEIGHT-OF-PROCESSES (N 1) (SYSTEM-STATE SYSTEM-STATE)) (WEIGHT-OF-CHANNELS (N 1) (SYSTEM-STATE SYSTEM-STATE)))) Show that if N is less that or equal
Reference: 2. <author> Boyer, R. S., Moore, J S., </author> <title> ``The Addition of Bounded Quantification and Partial Functions to A Computational Logic and Its Theorem Prover'', </title> <type> Tech. report ICSCA-CMP-52, </type> <institution> Institute for Computer Sciences and Computer Applications, </institution> <month> January </month> <year> 1987. </year>
Reference-contexts: INTRODUCTION This paper describes a theory for the mechanical verification of distributed systems which has been implemented on the Boyer-Moore theorem prover [1] <ref> [2] </ref>. The Boyer-Moore Logic, the language of the theorem prover, is a quantifier free version of predicate calculus, with recursion. Our theory has been used to mechanically prove safety and liveness properties for a solution to the N-processor mutual exclusion problem. <p> However, such proofs are facilitated by proof rules. The proof rules we develop in this section offer an abstract mechamism for verifying distributed systems. We have stated the proof rules in a version of the Boyer-Moore logic which defines second order functions <ref> [2] </ref>, and have mechanically verified their derivation from the definition of Int. 2.5.1 Compositionality The first proof rule states that Int is composable: Theorem 26: Compositionality (Implies (And (Not (Lessp Time Clock)) (Not (Lessp Max-Clock Time))) (Equal (Int Process-List Time Max-Clock (Int Process-List Clock Time System-State)) (Int Process-List Clock Max-Clock System-State))) <p> Progress Statement #1. Theorem 20: LEFT-FULL-NON-CRITICAL-WAIT-IS-STABLE-1 (REWRITE) (IMPLIES (AND (NOT (EQUAL CINDEX INDEX1)) (NUMBERP CINDEX) (LESSP CINDEX N) (NUMBERP INDEX1) (LESSP INDEX1 N) (NUMBERP INDEX2) (LESSP INDEX2 N) <ref> (LEFT-FULL-NON-CRITICAL-WAIT INDEX1 INDEX2 N 87 SYSTEM-STATE) </ref>) (LEFT-CHANNEL-FULL INDEX1 (ME CINDEX N CLOCK SYSTEM-STATE))) Theorem 21: LEFT-FULL-NON-CRITICAL-WAIT-IS-STABLE-2 (REWRITE) (IMPLIES (AND (NOT (EQUAL CINDEX INDEX1)) (NUMBERP CINDEX) (LESSP CINDEX N) (NUMBERP INDEX1) (LESSP INDEX1 N) (NUMBERP INDEX2) (LESSP INDEX2 N) (LEFT-FULL-NON-CRITICAL-WAIT INDEX1 INDEX2 N SYSTEM-STATE)) (PROCESS-NON-CRITICAL INDEX1 (ME CINDEX N CLOCK SYSTEM-STATE))) ((DISABLE
Reference: 3. <author> Chandy, K. M., Misra, J., </author> <title> Parallel Program Design: A Foundation, </title> <note> To be published by Addison-Wesley, </note> <year> 1987. </year>
Reference-contexts: From this operational semantics, we derive several general 3 theorems which hold for any set of processes and facilitate the proofs of safety and liveness properties. We call these general theorems proof rules because they are similar to the proof rules taken as axioms in other theories <ref> [3] </ref> [4]. <p> Our theory is most closely related to [4] [5] [6] and to Unity <ref> [3] </ref>. The proof rules which we mechanically derive from our operational semantics are strongly influenced by those taken as axioms in Unity. Our theory differs from previous work because our proofs are mechanically verified.
Reference: 4. <author> Manna, A., Pnueli, A., </author> <title> ``How to cook a Temporal Proof System for your Pet Language'', </title> <booktitle> Proc. 10th ACM POPL, ACM, </booktitle> <year> 1983. </year> <note> [5] Owicki, </note> <author> S., Lamport, L., </author> <title> ``Proving Liveness Properties of Concurrent Programs'', </title> <journal> ACM TOPLAS 4,3, </journal> <year> 1982, </year> <pages> pp. 455-495. </pages>
Reference-contexts: From this operational semantics, we derive several general 3 theorems which hold for any set of processes and facilitate the proofs of safety and liveness properties. We call these general theorems proof rules because they are similar to the proof rules taken as axioms in other theories [3] <ref> [4] </ref>. <p> These transitions correspond to the effective transitions that one must demonstrate when proving liveness properties in temporal logic. 41 Chapter 4 CONCLUSION 4.1 Comparison to Related Work The transition system model of distributed systems has been used widely in the literature. Our theory is most closely related to <ref> [4] </ref> [5] [6] and to Unity [3]. The proof rules which we mechanically derive from our operational semantics are strongly influenced by those taken as axioms in Unity. Our theory differs from previous work because our proofs are mechanically verified.
Reference: 6. <author> Pnueli, A., </author> <title> Applications of Temporal Logic to the Specification and Verification of Reactive Systems: A Survey of Current Trends. </title> <booktitle> Current Trends in Concurrency. Overviews and Tutorials, </booktitle> <publisher> Springer Verlag LNCS 224, </publisher> <year> 1986, </year> <editor> J.W. de Bakker, W.P. de Roever and G. </editor> <booktitle> Rozenberg eds. </booktitle>
Reference-contexts: Our theory is most closely related to [4] [5] <ref> [6] </ref> and to Unity [3]. The proof rules which we mechanically derive from our operational semantics are strongly influenced by those taken as axioms in Unity. Our theory differs from previous work because our proofs are mechanically verified.

References-found: 5

