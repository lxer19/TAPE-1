URL: http://actor.cs.vt.edu/~siva/workshop/papers/siva.ps
Refering-URL: http://actor.cs.vt.edu/~siva/workshop/papers.html
Root-URL: http://www.cs.vt.edu
Title: Towards an Interoperable, Reflective Common Object Model for Statically Typed Object-Oriented Languages  
Author: Siva Challa 
Note: Modula-3.  
Address: VA 24061-0106  
Affiliation: Department of Computer Science Virginia Tech Blacksburg,  
Abstract: Existing object-oriented software systems have insufficient support for interoperability (in distributed, heterogeneous environments) among objects developed in languages with different object models. This impedes reuse and hinders application development. Improving interoperability by a broad domain approach, combining non object-oriented programming languages and object-oriented programming languages, supports different programming paradigms but results in weaker object models. This approach has failed to provide a clear understanding of what constitutes a "core set" of object-oriented features. In this paper we choose a narrow domain approach seeks a more powerful object model by including of a subset of object-oriented languages. We present a set of candidate object-oriented features (obtained as a result of a preliminary study) that can be included in the object model, and a prototype developed to reify the semantics of method invocation in a distributed environment between the two statically typed object-oriented languages C++ and 
Abstract-found: 1
Intro-found: 1
Reference: [Agha86] <author> Gul A. Agha, </author> <title> ACTORS: A Model of Concurrent Computation in Distributed Systems, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1986. </year> <month> 5 </month>
Reference-contexts: The Actor model's asynchronous communication is used for communication between objects. The prototype is implemented in C++ and Modula-3. Active objects <ref> [Agha86] </ref> called actors are responsible for all activity of a system based on the actor model. As each actor has its own thread of execution, there can be more than one actor processing at the same time. The communication mechanism adopted by the actor model is asynchronous.
Reference: [Broc94] <author> K. Brockschmidt, </author> <title> Inside OLE 2, </title> <publisher> Microsoft Press, </publisher> <address> Redmond, </address> <year> 1994. </year>
Reference: [Chib93] <author> Shigeru Chiba, </author> <title> Open C++ Release 1.2 Programmer's Guide, </title> <type> Technical Report no. 93-3, </type> <institution> University of Tokyo, </institution> <year> 1993. </year>
Reference: [Cron91] <institution> BBN Systems and Technologies, </institution> <note> Cronus Technical Summary, Release 2.0, </note> <month> March, </month> <year> 1991. </year>
Reference: [Cutt93] <author> Doug Cutting, Bill Janssen, Mike Spreitzer and Farrel Wymore, </author> <title> ILU Reference Manual, </title> <institution> Xerox Corporation, Palo Alto, </institution> <year> 1993. </year>
Reference: [Ferb89] <author> Jacques Ferber, </author> <title> Computational Reflection in Class Based Object Oriented Languages, </title> <booktitle> OOPSLA '89 Proceedings, </booktitle> <month> October, </month> <year> 1989, </year> <pages> pp 317-326. </pages>
Reference-contexts: Communication between the client object and the server object takes place through common object model interfaces. 2 The intersection models can be partitioned into Extensible Models and Non-Extensible Models. The extensible models consist of a "core object model" whose few basic features are specialized or combined using reflection techniques <ref> [Ferb89] </ref> (or special translations [Omg91]) to incorporate other object-oriented features. This core object model is mapped into non object-oriented Models [Som93][Omg91][Mano93]. <p> Object-Oriented Reification is the representation of the specific aspects of an object-oriented program as objects within that program. These aspects include method binding, inheritance, object structure etc. The various reflection techniques available are the metaclass approach, the metaobject approach and the metacommunication approach <ref> [Ferb89] </ref>. An experimental prototype (that uses the actor model) has been developed to reify the semantics of method invocation between objects in a distributed, multi-language environment. This prototype is motivated by the desire to implement reflection techniques in statically typed object-oriented languages to modify the semantics of object-oriented features dynamically.
Reference: [Kons93] <author> Dimitri Konstantas, </author> <title> Object Oriented Interoperability, Visual Objects, </title> <editor> D. Tsichritzis (Ed.), </editor> <address> University of Geneva, </address> <year> 1993. </year>
Reference-contexts: information services, interoperability among the many autonomous computer systems forming the global network is becoming a critical software challenge. "Interoperability is the ability of two or more entities such as programs, objects, applications or environments, to communicate and cooperate despite differences in implementation languages, execution environments or the model abstractions" <ref> [Kons93] </ref>. Interoperability between software components is important since it is a key to reusability in distributed and heterogeneous environments.
Reference: [Lea93] <author> Rodger Lea, Christian Jacquemot and Eric Pillevesse, </author> <title> COOL: System support for Distributed Programming, </title> <journal> Communications of the ACM, </journal> <volume> Vol 36, No 9, Septem-ber,1993, </volume> <pages> pp 37-47. </pages>
Reference-contexts: Common Run Time architectures [Weis89] <ref> [Lea93] </ref>[Cron91] have a uniform run time layer over existing operating systems, that acts as an intermediary between the interacting objects using downcalls and upcalls. Both shared memory implementations [Weis89] and distributed memory implementations [Lea93] of the common run time models are available. Though this approach seems promising, it is not a popular approach because of the existence of an additional runtime, and primitive (i.e., many object-oriented features are not supported) object models. Protocol Based architectures rely on a message-based protocol to achieve interoperability.
Reference: [Mano93] <author> Frank Manola and Sandra Heiler, </author> <title> A "RISC" Object Model for Object System Interoperation: Concepts and Applications, Document No. </title> <institution> TR-0231-08-93-165, GTE Laboratories Inc., Waltham, Massachusetts, </institution> <month> December, </month> <year> 1993. </year>
Reference: [Mano94] <editor> X3H7 Object Model Features Matrix, Frank Manola (Editor), x3h7-93-007v8, </editor> <address> Waltham, Massachusetts, </address> <month> May, </month> <year> 1994. </year>
Reference-contexts: The languages chosen for the research are C++ and Ada-9X due to their wide popularity, and Modula-3 because of its interesting features (e.g., Trestle Windowing system) and availability. A set of object-oriented features based on the X3H7 standard committee's recommendations <ref> [Mano94] </ref> are identified. These features are: object/interface identifier, object interface (s), object state, object type or class, method, request, message, operation, object life time, communication model, binding, polymorphism, encapsulation, inheritance, extensibility, templates/generics, persistence, and exceptions. The proposed approach in this research consists of developing an extensible object model.
Reference: [Maes87] <editor> Pattie Maes, </editor> <title> Concepts and Experiments in Computational Reflection, </title> <booktitle> OOP-SLA '87 Proceedings, </booktitle> <month> October, </month> <year> 1987, </year> <pages> pp 147-155. </pages>
Reference-contexts: This core set will be rich enough to incorporate other features (not part of the core set) into the model using reflection techniques. 3 3 Reflection and Prototype The reflection concepts introduced in <ref> [Maes87] </ref> are modified to suit the requirements of the interoperability of object-oriented systems. Object-Oriented Reflection is defined as the ability of an object-oriented system to make its own object model's features the subject (or domain) of its computation in a causally connected way.
Reference: [Meck91] <author> Robert W. Mecklenburg, </author> <title> Towards a Language Independent Object System, </title> <type> Ph.D. Thesis, </type> <institution> University of Utah, </institution> <address> Saltlake City, </address> <month> June, </month> <year> 1991. </year>
Reference-contexts: Solutions involving translations to some intermediate language are also not considered to be practical. The selection of languages from different programming paradigms to address the interoperability problem is not very promising because of the vast differences between the languages' features <ref> [Meck91] </ref>. So, a subset of statically typed object-oriented languages is considered in this research. The number of languages considered for the selection is three, because certain limiting assumptions made when only two languages are involved can be eliminated.
Reference: [Omg91] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification OMG Document Number 91.12.1, </title> <journal> Rev. </journal> <volume> 1.1, </volume> <year> 1991. </year>
Reference-contexts: The extensible models consist of a "core object model" whose few basic features are specialized or combined using reflection techniques [Ferb89] (or special translations <ref> [Omg91] </ref>) to incorporate other object-oriented features. This core object model is mapped into non object-oriented Models [Som93][Omg91][Mano93].
Reference: [Open93] <institution> Reference Model for Open Distributed Processing, WG7 N. 885, International Standards Organization, New South Wales, Australia, </institution> <month> November, </month> <year> 1993. </year>
Reference-contexts: Both Broad Domain and the Narrow Domain approaches can be sub-divided into two categories: Union Models and Intersection Models. In Union Models, an extensive set of object-oriented features (usually a union of the object-oriented features of all participating languages) is included in the model <ref> [Open93] </ref>. In the Intersection Models, typically a subset of all object-oriented features of the participating object-oriented programming languages is taken as the object model. This model is mapped into the non object-oriented programming languages supported by the system.
Reference: [Som93] <institution> SOMobjects Developer Toolkit Technical Overview, </institution> <note> Version 2.0, </note> <institution> IBM, </institution> <address> New York, </address> <month> November, </month> <year> 1993. </year>
Reference: [Weis89] <author> Mark Weiser, Alan Demers and Carl Hauser, </author> <title> The Portable Common Run Time Approach to Interoperability, </title> <booktitle> Proceedings of the Twelfth ACM Symposium on Operating Systems Principles, December,1989, </booktitle> <pages> pp 114-122. 6 </pages>
Reference-contexts: Common Run Time architectures <ref> [Weis89] </ref> [Lea93][Cron91] have a uniform run time layer over existing operating systems, that acts as an intermediary between the interacting objects using downcalls and upcalls. Both shared memory implementations [Weis89] and distributed memory implementations [Lea93] of the common run time models are available. <p> Common Run Time architectures <ref> [Weis89] </ref> [Lea93][Cron91] have a uniform run time layer over existing operating systems, that acts as an intermediary between the interacting objects using downcalls and upcalls. Both shared memory implementations [Weis89] and distributed memory implementations [Lea93] of the common run time models are available. Though this approach seems promising, it is not a popular approach because of the existence of an additional runtime, and primitive (i.e., many object-oriented features are not supported) object models.
References-found: 16

