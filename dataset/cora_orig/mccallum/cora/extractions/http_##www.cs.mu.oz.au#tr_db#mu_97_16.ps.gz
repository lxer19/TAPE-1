URL: http://www.cs.mu.oz.au/tr_db/mu_97_16.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Title: An Architecture for Mobile BDI Agents  
Author: Paolo Busetta Kotagiri Ramamohanarao 
Address: Parkville, Victoria 3052 Australia  
Affiliation: Department of Computer Science The University of Melbourne  
Pubnum: Technical Report 97/16  
Abstract: BDI (Belief, Desire, Intention) is a mature and commonly adopted architecture for Intelligent Agents. BDI Agents are autonomous entities able to work in teams and react to changing environmental conditions. However, the current computational model adopted by BDI has problems which, amongst other limitations, prevent the development of mobile agents. In this paper, we discuss an architecture, TOMAS (Transaction Oriented Multi Agent System), that addresses these issues by combining BDI and the distributed nested transaction paradigms. An algorithm is presented which enable agents in TOMAS to become mobile. 
Abstract-found: 1
Intro-found: 1
Reference: [Aus96] <institution> Australian Artificial Intelligence Institute, Melbourne, Australia. The dMARS V1.6.12 System Overview, </institution> <year> 1996. </year>
Reference-contexts: An approach to the study of rational agency which has received a great deal of attention is the so-called Belief, Desire, Intention (BDI) architecture. The BDI architecture has been used in some products (for instance, <ref> [Aus96] </ref>) and a number of applications ranging from air traffic control to air combact simulations, from telephone call centres to the handling of malfunctions on NASA's Space Shuttle. <p> The justification for this is that it allows an analysis of the agents' behaviour which otherwise would seem chaotic. Also, the default meta-level policies applied by an agent are extremely simple but very restrictive. In a typical system [GI89] <ref> [Aus96] </ref>, each intention is given a priority and intentions of the same priority are ordered with a LIFO or FIFO criteria for scheduling purposes. The scheduler picks the first executable intention at the highest priority level and runs it until it terminates or suspends itself.
Reference: [BGK + 95] <author> J. Bailey, M. Georgeff, D. Kemp, D. Kinny, and Kotagiri R. </author> <title> Active databases and agent systems a comparison. </title> <editor> In T. Sellis, editor, </editor> <booktitle> Proceedings of the Second International Workshop on Rules in Database Systems, </booktitle> <address> Athens, Greece, </address> <publisher> LNCS 985, </publisher> <pages> pages 342-356, </pages> <address> Eindhoven, The Netherlands, </address> <month> September </month> <year> 1995. </year> <note> Springer-Verlag. </note>
Reference-contexts: In this paper, we propose an architecture, TOMAS (Transaction Oriented Multi Agent System), that addresses these issues. TOMAS has been inspired by previous work <ref> [BGK + 95] </ref>, and combines computational aspects of BDI with distributed nested transactions. The nature of the problems discussed in this paper is the same of those faced by any distributed system. <p> However, researchers generally agree that for a computer program 1 to be called a rational agent, it must be embedded in a dynamic and partially unpredictable environment and must show the following characteristics ( [WJ95], [Sho93], <ref> [BGK + 95] </ref>): * autonomy: it operates without direct, continous supervision; * social ability: it is able to interact with other agents and possibly humans; * reactivity: it has perceptions of the world inside which it is acting and reacts to changes in a timely, quasi real-time fashion; * proactviness: its
Reference: [BR97] <author> P. Busetta and Kotagiri R. </author> <title> The BDIM Agent Toolkit Design. </title> <type> Technical Report 15, </type> <institution> University of Melbourne, Deparment of Computer Science, </institution> <address> Melbourne, Australia, </address> <year> 1997. </year> <month> 19 </month>
Reference-contexts: We then used it to develop a prototype of a computationally robust BDI multi-agent architecture, TOMAS (Transaction Oriented Multi Agent System), discussed in section 6. The design of the BDIM Toolkit and TOMAS are discussed in detail in <ref> [BR97] </ref>. Java was an almost unavoidable choice. The language offers a number of attractive features: platform-independence, a sufficiently rich standard class library including network programming facilities, support for dynamic loading of classes, and suitability for rapid prototyping.
Reference: [BSS94] <author> A. Beguelin, E. Seligman, and M. Starkey. Dome: </author> <title> Distributed Object Migration Environment. </title> <type> Technical Report 153, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, USA, </address> <year> 1994. </year>
Reference-contexts: If their execution context were transferable, it would become possible to move certain Intentions in the algorithm outlined above. 8 Comparisons TOMAS has strong similarities to concurrent languages and environments supporting fault tolerant computation and the mobility of objects (for instance, Arjuna [PSWL95], DOME <ref> [BSS94] </ref>, Electra [Maf95]). An interesting and very recent stream of research about multi-agent systems, inspired by advanced transaction concepts, is Interaction Oriented Programming (IOP) [Sin96] [Sin97]. IOP is essentially concerned with the coordination of agents which cooperate to achieve a common task, possibly over a long period of time.
Reference: [GI89] <author> M. P. Georgeff and F. F. Ingrand. </author> <title> Decision making in an embedded reasoning system. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence, </booktitle> <address> Detroit, Mi., USA, </address> <year> 1989. </year>
Reference-contexts: The BDI approach is based on the study of mental attitudes [RG92] and tackles the problems arising when trying to use traditional planning in situations requiring real-time reactivity (see, for instance, the discussion in <ref> [GI89] </ref>). Figure 1, extracted from [GI89], shows the basic components of a typical BDI agent. 2 The Beliefs represent the informational state of a BDI agent, that is, what it knows about itself and the world. <p> The BDI approach is based on the study of mental attitudes [RG92] and tackles the problems arising when trying to use traditional planning in situations requiring real-time reactivity (see, for instance, the discussion in <ref> [GI89] </ref>). Figure 1, extracted from [GI89], shows the basic components of a typical BDI agent. 2 The Beliefs represent the informational state of a BDI agent, that is, what it knows about itself and the world. Desires or goals are its motivational state, that is, what the agent is trying to achieve. <p> Desires or goals are its motivational state, that is, what the agent is trying to achieve. A typical BDI agent <ref> [GI89] </ref>, [RG92], [Rao96] has a so-called procedural knowledge constituted by a set of Plans which define sequences of actions and tests (steps) to be performed to achieve a certain goal or react to a specific situation. <p> The justification for this is that it allows an analysis of the agents' behaviour which otherwise would seem chaotic. Also, the default meta-level policies applied by an agent are extremely simple but very restrictive. In a typical system <ref> [GI89] </ref> [Aus96], each intention is given a priority and intentions of the same priority are ordered with a LIFO or FIFO criteria for scheduling purposes. The scheduler picks the first executable intention at the highest priority level and runs it until it terminates or suspends itself. <p> In other words, meta-planning is performed in BDIM when a specific EventIn-tentionManager is instantiated at startup and whenever a specific type of PlanInterpreter is selected for the execution of a Plan. 5.2 SimpleBdi SimpleBdi is a simplified but parallel implementation of [RG92], which mimics components and behaviour of <ref> [GI89] </ref>. Figure 3 depicts how its components cooperate. SimpleBdi contains a single database of Beliefs, shared by all running 10 Intentions. Its GUI is very rudimentary but supports any number of dia-logues with the human operator as required by the Intentions being executed concurrently. <p> The SimpleBdi EventIntentionManager starts a new Java thread for each Event it is notified of. This thread invokes the relevant IntentionInstantia-tors, collects the applicable Intentions and tries to run one of them, that is, it requests the execution of its first Plan to its PlanInterpreter. Similar to <ref> [GI89] </ref>, these actions are repeated until either a Plan terminates successfully or no applicable intention is generated which is different from those which have been already tried. The EventIntentionManager can be required to interrupt the service of an Event at any time.
Reference: [GR93] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kauffman Publishers, Inc., </publisher> <year> 1993. </year>
Reference-contexts: A transaction, as it is commonly defined <ref> [GR93] </ref>, is an ACID unit of work (Atomic, Consistent, Isolated, and Durable). Atomicity means all-or-nothing: either all actions happen or none happen. It is the responsibility of the transaction system to guarantee the atomicity of transactions. <p> It must be noted, however, that there are algorithms (not implemented by TOMAS at this stage) that automatically reduce the number of messages being exchanged or even avoid the Two Phase Commit in certain circumstances <ref> [GR93] </ref>. ACID transactions are not appropriate for long term activities. It is a common industrial practice, although, to break those activities into sequences of short term transactions, without adopting any esoteric transaction model. <p> Transactions move the state of the Beliefs of a team of agents from one consistent state to another. The ACID properties make the analysis of these state transitions extremely easy <ref> [GR93] </ref>, without imposing any arbitrary sequentialization of the execution of the steps of concurrent Intentions. If failures occur during the lifetime of a nested transaction, the transaction managers automatically restore a consistent state in all the involved agents.
Reference: [Gro97] <author> Object Management Group. </author> <title> Mobile Agent Facility RFP (Request For Proposal), </title> <type> draft. OMG, Framingham, </type> <address> MA, USA, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: This is surprising when considering the level of maturity of the field of mobile agents, with industrial standards being published (e.g., <ref> [Gro97] </ref>) and available products. Multi-agent systems could benefit from integration with mobility services in many ways; for example, * Teams could be formed by a mixture of "heavyweight", cognitively complex agents dispatching tasks to lightweight agents pursuing only a few goals.
Reference: [KLR + 94] <author> D. Kinny, M. Ljungberg, A. Rao, E. Sonenberg, G. Tidhar, and E. Werner. </author> <title> Planned team activity. </title> <editor> In C. Castelfranchi and E. Werner, editors, </editor> <booktitle> Artificial Social Systems, volume 830 of Lecture Notes in Computer Science, </booktitle> <pages> pages 227-256. </pages> <publisher> Springer Verlag, </publisher> <year> 1994. </year> <note> Also appears as Australian Artificial Intelligence Institute Technical Note 26, </note> <institution> Melbourne, Australia. </institution>
Reference-contexts: These can be overridden by user defined policies, usually invoked via the same event/plan/ intention mechanism described above (meta-level planning). In recent years, a lot of research has been done in the area of collaborative work for teams of BDI agents <ref> [KLR + 94] </ref>. The architecture has been extended to manage communication in a way largerly inspired by the paradigms of the speech acts theory [Sea70]: messages are qualified as informational (tell ) or directional (request, reply). <p> Existing BDI systems do not support the explicit expression of boundaries and states of cooperative work. Current research about BDI is looking at cognitive issues and, for multi-agent systems, is mostly concerned with the notions of shared beliefs, goals 6 and commitments and how these are built and communicated <ref> [KLR + 94] </ref>. It does not directly address any of the mentioned computational problems. Indeed, the two issues should be kept separated, since they are part of different levels of abstraction.
Reference: [Maf95] <author> S. Maffeis. </author> <title> Adding Group Communication and Fault-Tolerance to CORBA. </title> <booktitle> In Proceedings of the 1995 USENIX Conference on Object-Oriented Technologies, </booktitle> <address> Monterey, CA, </address> <year> 1995. </year>
Reference-contexts: If their execution context were transferable, it would become possible to move certain Intentions in the algorithm outlined above. 8 Comparisons TOMAS has strong similarities to concurrent languages and environments supporting fault tolerant computation and the mobility of objects (for instance, Arjuna [PSWL95], DOME [BSS94], Electra <ref> [Maf95] </ref>). An interesting and very recent stream of research about multi-agent systems, inspired by advanced transaction concepts, is Interaction Oriented Programming (IOP) [Sin96] [Sin97]. IOP is essentially concerned with the coordination of agents which cooperate to achieve a common task, possibly over a long period of time.
Reference: [PSWL95] <author> G.D. Parrington, S.K. Shrivastava, S.M. Wheater, and M.C. Little. </author> <title> The Design and Implementation of Arjuna. </title> <journal> USENIX Computing Systems Journal, </journal> <volume> 8(3), </volume> <year> 1995. </year>
Reference-contexts: If their execution context were transferable, it would become possible to move certain Intentions in the algorithm outlined above. 8 Comparisons TOMAS has strong similarities to concurrent languages and environments supporting fault tolerant computation and the mobility of objects (for instance, Arjuna <ref> [PSWL95] </ref>, DOME [BSS94], Electra [Maf95]). An interesting and very recent stream of research about multi-agent systems, inspired by advanced transaction concepts, is Interaction Oriented Programming (IOP) [Sin96] [Sin97].
Reference: [Rao94] <author> A. S. Rao. </author> <title> Means-end plan recognition: Towards a theory of reactive recognition. </title> <booktitle> In Proceedings of the Fourth International Conference on Principles of Knowledge Representation and Reasoning (KRR-94), </booktitle> <address> Bonn, Germany, </address> <year> 1994. </year>
Reference-contexts: The description of this behaviour is done in cognitive terms, i.e., by attributing mental attitudes. Research is being undertaken in a number of areas of relevance both to computer and cognitive sciences, for instance cooperative work and social commitments and recognition of intentions <ref> [Rao94] </ref>. 3 3 Mobility and BDI Agents At the time of writing, we are not aware of any specific work in the area of mobility of BDI agents.
Reference: [Rao96] <author> Anand S. Rao. AgentSpeak(L): </author> <title> BDI Agents speak out in a logical computable language. </title> <booktitle> In MAAMAW'96: 7th European Workshop on Modelling Autonomous Agents in a Multi-Agent World, </booktitle> <publisher> LNAI 1038, </publisher> <address> Eindhoven, The Netherlands, </address> <month> January </month> <year> 1996. </year> <note> Springer-Verlag. </note>
Reference-contexts: Desires or goals are its motivational state, that is, what the agent is trying to achieve. A typical BDI agent [GI89], [RG92], <ref> [Rao96] </ref> has a so-called procedural knowledge constituted by a set of Plans which define sequences of actions and tests (steps) to be performed to achieve a certain goal or react to a specific situation. <p> For instance, in spite of their inherent parallelism, BDI agents are usually described and implemented as sequential machines executing exactly one step of all the active intentions at a time [RG92], <ref> [Rao96] </ref>. The justification for this is that it allows an analysis of the agents' behaviour which otherwise would seem chaotic. Also, the default meta-level policies applied by an agent are extremely simple but very restrictive.
Reference: [RG92] <author> Anand S. Rao and Michael P. Georgeff. </author> <title> An abstract architecture for rational agents. </title> <editor> In W. Swartout C. Rich and B. Nebel, editors, </editor> <booktitle> Proceedings of the Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <address> San Mateo, CA, 1992. </address> <publisher> Morgan Kaufmann Publishers. </publisher> <pages> 20 </pages>
Reference-contexts: 1 Introduction Intelligent Agents are a very active area of AI research [WJ95] [Sho93]. Of the various agent architectures which have been proposed, BDI (Belief, Desire, Intention) <ref> [RG92] </ref> is probably the most mature and has been adopted by a few industrial applications. BDI Agents are autonomous entities able to work in teams and react to changing environmental conditions. Mobile multi-agent BDI systems would have many advantages. <p> The BDI approach is based on the study of mental attitudes <ref> [RG92] </ref> and tackles the problems arising when trying to use traditional planning in situations requiring real-time reactivity (see, for instance, the discussion in [GI89]). <p> Desires or goals are its motivational state, that is, what the agent is trying to achieve. A typical BDI agent [GI89], <ref> [RG92] </ref>, [Rao96] has a so-called procedural knowledge constituted by a set of Plans which define sequences of actions and tests (steps) to be performed to achieve a certain goal or react to a specific situation. <p> For instance, in spite of their inherent parallelism, BDI agents are usually described and implemented as sequential machines executing exactly one step of all the active intentions at a time <ref> [RG92] </ref>, [Rao96]. The justification for this is that it allows an analysis of the agents' behaviour which otherwise would seem chaotic. Also, the default meta-level policies applied by an agent are extremely simple but very restrictive. <p> In other words, meta-planning is performed in BDIM when a specific EventIn-tentionManager is instantiated at startup and whenever a specific type of PlanInterpreter is selected for the execution of a Plan. 5.2 SimpleBdi SimpleBdi is a simplified but parallel implementation of <ref> [RG92] </ref>, which mimics components and behaviour of [GI89]. Figure 3 depicts how its components cooperate. SimpleBdi contains a single database of Beliefs, shared by all running 10 Intentions.
Reference: [Sea70] <author> John R. Searle. </author> <title> Speech Acts: An Essay in the Philosophy of Language. </title> <publisher> Cambridge University Press, </publisher> <year> 1970. </year>
Reference-contexts: In recent years, a lot of research has been done in the area of collaborative work for teams of BDI agents [KLR + 94]. The architecture has been extended to manage communication in a way largerly inspired by the paradigms of the speech acts theory <ref> [Sea70] </ref>: messages are qualified as informational (tell ) or directional (request, reply). In multi-agents systems, the members can have very complex relationships with each other concerning the organization of the team, their shared goals and beliefs, and their reciprocal cooperation in order to accomplish tasks.
Reference: [Sho93] <author> Yoav Shoham. </author> <title> Agent-oriented programming. </title> <journal> Artificial Intelligence, </journal> <volume> 60(1) </volume> <pages> 51-92, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Intelligent Agents are a very active area of AI research [WJ95] <ref> [Sho93] </ref>. Of the various agent architectures which have been proposed, BDI (Belief, Desire, Intention) [RG92] is probably the most mature and has been adopted by a few industrial applications. BDI Agents are autonomous entities able to work in teams and react to changing environmental conditions. <p> However, researchers generally agree that for a computer program 1 to be called a rational agent, it must be embedded in a dynamic and partially unpredictable environment and must show the following characteristics ( [WJ95], <ref> [Sho93] </ref>, [BGK + 95]): * autonomy: it operates without direct, continous supervision; * social ability: it is able to interact with other agents and possibly humans; * reactivity: it has perceptions of the world inside which it is acting and reacts to changes in a timely, quasi real-time fashion; * proactviness:
Reference: [Sin96] <author> M. P. Singh. </author> <title> Toward Interaction-Oriented Programming (poster). </title> <booktitle> In International Conference on Multiagent Systems (ICMAS), </booktitle> <address> Kyoto, Japan, </address> <year> 1996. </year>
Reference-contexts: An interesting and very recent stream of research about multi-agent systems, inspired by advanced transaction concepts, is Interaction Oriented Programming (IOP) <ref> [Sin96] </ref> [Sin97]. IOP is essentially concerned with the coordination of agents which cooperate to achieve a common task, possibly over a long period of time.
Reference: [Sin97] <author> M. P. Singh. </author> <title> Commitments Among Autonomous Agents in Information-Rich Environments. </title> <booktitle> In 8th European Workshop on Modelling Autonomous Agents in a Multi-Agent World (MAA-MAW), </booktitle> <address> Ronneby, Sweden, </address> <year> 1997. </year>
Reference-contexts: An interesting and very recent stream of research about multi-agent systems, inspired by advanced transaction concepts, is Interaction Oriented Programming (IOP) [Sin96] <ref> [Sin97] </ref>. IOP is essentially concerned with the coordination of agents which cooperate to achieve a common task, possibly over a long period of time.
Reference: [WJ95] <author> M. Wooldridge and N. R. Jennings. </author> <title> Intelligent agents: </title> <journal> Theory and practice. Knowledge Engineering Review, </journal> <volume> 10(12), </volume> <year> 1995. </year> <month> 21 </month>
Reference-contexts: 1 Introduction Intelligent Agents are a very active area of AI research <ref> [WJ95] </ref> [Sho93]. Of the various agent architectures which have been proposed, BDI (Belief, Desire, Intention) [RG92] is probably the most mature and has been adopted by a few industrial applications. BDI Agents are autonomous entities able to work in teams and react to changing environmental conditions. <p> However, researchers generally agree that for a computer program 1 to be called a rational agent, it must be embedded in a dynamic and partially unpredictable environment and must show the following characteristics ( <ref> [WJ95] </ref>, [Sho93], [BGK + 95]): * autonomy: it operates without direct, continous supervision; * social ability: it is able to interact with other agents and possibly humans; * reactivity: it has perceptions of the world inside which it is acting and reacts to changes in a timely, quasi real-time fashion; *
References-found: 18

