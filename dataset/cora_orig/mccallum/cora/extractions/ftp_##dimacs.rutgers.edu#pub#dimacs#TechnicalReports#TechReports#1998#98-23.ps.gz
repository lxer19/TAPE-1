URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1998/98-23.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1998.html
Root-URL: http://www.cs.rutgers.edu
Author: Eric Allender ; Michael C. Loui Kenneth W. Regan 
Keyword: Complexity Classes  
Address: New Brunswick, New Jersey 08903  
Affiliation: Dept. of Computer Science Rutgers University  University of Illinois at Urbana-Champaign  State University of New York at Buffalo  
Note: by  2 Supported by the National Science Foundation under Grant CCR-9509603. Portions of this work DIMACS is a partnership of Rutgers University, Princeton University, AT&T Labs-Research, Bell Labs, Bellcore and NEC Research Institute. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 98-23 May 1998 were performed while a visiting scholar at the Institute of Mathematical Sciences, Madras, India. 3 Supported by the National Science Foundation under Grant CCR-9315696. 4 Supported by the National Science Foundation under Grant CCR-9409104. 
Abstract-found: 1
Intro-found: 1
Reference: [ Ajtai, 1983 ] <author> M. Ajtai. </author> <title> 1 1 formulae on finite structures. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 24 </volume> <pages> 1-48, </pages> <year> 1983. </year>
Reference: [ Barrington et al., 1990 ] <author> D. Mix Barrington, N. Immerman, and H. Straubing. </author> <title> On unifor-mity within NC 1 . J. </title> <journal> Comp. Sys. Sci., </journal> <volume> 41 </volume> <pages> 274-306, </pages> <year> 1990. </year>
Reference: [ Barrington, 1989 ] <author> D. </author> <title> Mix Barrington. Bounded-width polynomial-size branching programs recognize exactly those languages in NC 1 . J. </title> <journal> Comp. Sys. Sci., </journal> <volume> 38 </volume> <pages> 150-164, </pages> <year> 1989. </year>
Reference-contexts: NC 1 equals the class of languages definable by polynomial-size Boolean formulas (as opposed to polynomial-sized circuits; a formula is equivalent to a circuit of fan-out 1). Also, NC 1 equals the class of languages recognized by bounded-width branching programs, for which see <ref> [ Barrington, 1989 ] </ref> . Finally, NC 1 captures the circuit complexity of regular expressions. 4 Research Issues and Summary The complexity class is the fundamental notion of complexity theory. What makes a complexity class useful to the practitioner is the close relationship between complexity classes and real computational problems.
Reference: [ Berthiaume, 1997 ] <author> A. Berthiaume. </author> <title> Quantum computation. </title> <editor> In L. Hemaspaandra and A. Sel-man, editors, </editor> <booktitle> Complexity Theory Retrospective II, </booktitle> <pages> pages 23-51. </pages> <publisher> Springer Verlag, </publisher> <year> 1997. </year>
Reference: [ Blum, 1967 ] <author> M. Blum. </author> <title> A machine-independent theory of the complexity of recursive functions. </title> <journal> J. Assn. Comp. Mach., </journal> <volume> 14 </volume> <pages> 322-336, </pages> <year> 1967. </year>
Reference: [ Book et al., 1970 ] <author> R. Book, S. Greiback, and B. Wegbreit. </author> <title> Time- and tape-bounded turing acceptors and afls. </title> <journal> J. Comp. Sys. Sci., </journal> <volume> 4 </volume> <pages> 606-621, </pages> <year> 1970. </year>
Reference-contexts: Thus, we would fail to do the opposite of what M i does. The following careful argument guarantees that each machine M i is fooled on some input. It draws on a result of <ref> [ Book et al., 1970 ] </ref> that every language in NTIME [t (n)] is accepted by a two-tape nondeterministic Turing machine that runs in time t (n).
Reference: [ Book, 1974 ] <author> R. </author> <title> Book. Comparing complexity classes. </title> <journal> J. Comp. Sys. Sci., </journal> <volume> 9 </volume> <pages> 213-229, </pages> <year> 1974. </year>
Reference: [ Boppana and Sipser, 1990 ] <author> R. Boppana and M. Sipser. </author> <title> The complexity of finite functions. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume A, </booktitle> <pages> pages 757-804. </pages> <publisher> Elsevier and MIT Press, </publisher> <year> 1990. </year>
Reference: [ Borodin, 1972 ] <author> A. Borodin. </author> <title> Computational complexity and the existence of complexity gaps. </title> <journal> J. Assn. Comp. Mach., </journal> <volume> 19 </volume> <pages> 158-174, </pages> <year> 1972. </year>
Reference: [ Borodin, 1977 ] <author> A. Borodin. </author> <title> On relating time and space to size and depth. </title> <journal> SIAM J. Comput., </journal> <volume> 6 </volume> <pages> 733-744, </pages> <year> 1977. </year>
Reference: [ Chandra et al., 1981 ] <author> A. Chandra, D. Kozen, and L. Stockmeyer. </author> <title> Alternation. </title> <journal> J. Assn. Comp. Mach., </journal> <volume> 28 </volume> <pages> 114-133, </pages> <year> 1981. </year>
Reference: [ Chandra et al., 1984 ] <author> A. Chandra, L. Stockmeyer, and U. Vishkin. </author> <title> Constant-depth reducibility. </title> <journal> SIAM J. Comput., </journal> <volume> 13 </volume> <pages> 423-439, </pages> <year> 1984. </year>
Reference: [ Cook, 1985 ] <author> S. Cook. </author> <title> A taxonomy of problems with fast parallel algorithms. </title> <journal> Inform. and Control, </journal> <volume> 64 </volume> <pages> 2-22, </pages> <year> 1985. </year> <month> 36 </month>
Reference: [ Furst et al., 1984 ] <author> M. Furst, J. Saxe, and M. Sipser. </author> <title> Parity, circuits, and the polynomial--time hierarchy. </title> <journal> Math. Sys. Thy., </journal> <volume> 17 </volume> <pages> 13-27, </pages> <year> 1984. </year>
Reference: [ Garey and Johnson, 1988 ] <author> M. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <publisher> Freeman, </publisher> <year> 1988. </year> <note> First edition was 1979. </note>
Reference-contexts: Then why consider the other kinds of machines? There are two main reasons. The most potent reason comes from the computational problems whose complexity we are trying to understand. The most notorious examples are the hundreds of natural NP-complete problems (see <ref> [ Garey and Johnson, 1988 ] </ref> ). To the extent that we understand anything about the complexity of these problems, it is because of the model of nondeterministic Turing machines. Nondeterministic machines do not model physical computation devices, but they do model real computational problems.
Reference: [ Gurevich, 1991 ] <author> Y. Gurevich. </author> <title> Average case completeness. </title> <journal> J. Comp. Sys. Sci., </journal> <volume> 42 </volume> <pages> 346-398, </pages> <year> 1991. </year>
Reference: [ Hartmanis and Stearns, 1965 ] <author> J. Hartmanis and R. Stearns. </author> <title> On the computational complexity of algorithms. </title> <journal> Transactions of the AMS, </journal> <volume> 117 </volume> <pages> 285-306, </pages> <year> 1965. </year>
Reference: [ H-astad, 1989 ] <author> J. H-astad. </author> <title> Almost optimal lower bounds for small-depth circuits. </title> <editor> In S. Micali, editor, </editor> <booktitle> Randomness and Computation, volume 5 of Advances in Computing Research, </booktitle> <pages> pages 143-170. </pages> <publisher> JAI Press, </publisher> <address> Greenwich, CT, USA, </address> <year> 1989. </year>
Reference: [ Hofmeister, 1996 ] <author> T. Hofmeister. </author> <title> A note on the simulation of exponential threshold weights. </title> <booktitle> In Proc. 2nd International Computing and Combinatorics Conference (COCOON'96), volume 1090 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 136-141. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference: [ Hoover et al., 1984 ] <author> H. Hoover, M. Klawe, and N. Pippenger. </author> <title> Bounding fan-out in logical networks. </title> <journal> J. Assn. Comp. Mach., </journal> <volume> 31 </volume> <pages> 13-18, </pages> <year> 1984. </year>
Reference: [ Hopcroft and Ullman, 1979 ] <author> J. Hopcroft and J. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1979. </year>
Reference: [ Ibarra, 1972 ] <author> O. Ibarra. </author> <title> A note concerning nondeterministic tape complexities. </title> <journal> J. Assn. Comp. Mach., </journal> <volume> 19 </volume> <pages> 608-612, </pages> <year> 1972. </year>
Reference: [ Immerman and Landau, 1995 ] <author> N. Immerman and S. Landau. </author> <title> The complexity of iterated multiplication. </title> <journal> Inform. and Control, </journal> <volume> 116 </volume> <pages> 103-116, </pages> <year> 1995. </year>
Reference: [ Immerman, 1988 ] <author> N. Immerman. </author> <title> Nondeterministic space is closed under complementation. </title> <journal> SIAM J. Comput., </journal> <volume> 17 </volume> <pages> 935-938, </pages> <year> 1988. </year> <month> 37 </month>
Reference: [ Impagliazzo, 1995 ] <author> R. Impagliazzo. </author> <title> A personal view of average-case complexity. </title> <booktitle> In Proc. 10th Annual IEEE Conference on Structure in Complexity Theory, </booktitle> <pages> pages 134-147, </pages> <year> 1995. </year>
Reference: [ Johnson, 1990 ] <author> D.S. Johnson. </author> <title> A catalog of complexity classes. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume A, </booktitle> <pages> pages 67-161. </pages> <publisher> Elsevier and MIT Press, </publisher> <year> 1990. </year>
Reference: [ Karmarkar, 1984 ] <author> N. Karmarkar. </author> <title> A new polynomial-time algorithm for linear programming. </title> <journal> Combinatorica, </journal> <volume> 4 </volume> <pages> 373-395, </pages> <year> 1984. </year>
Reference-contexts: Linear programming may be the best known example. The breakthrough O (n 8 ) time algorithm of [ Khachiyan, 1979 ] , for n fi n instances, was impractical in itself, but it prompted an innovation by <ref> [ Karmarkar, 1984 ] </ref> 6 that produced an algorithm whose running time of about O (n 3 ) on all cases competes well commercially with the simplex method, which runs in O (n 3 ) time in most cases but takes 2 n time in some.
Reference: [ Karp and Lipton, 1982 ] <author> R. Karp and R. Lipton. </author> <title> Turing machines that take advice. </title> <journal> L'Enseignement Mathematique, </journal> <volume> 28 </volume> <pages> 191-210, </pages> <year> 1982. </year>
Reference-contexts: Non-uniform circuit classes can be approached by an alternative view introduced by <ref> [ Karp and Lipton, 1982 ] </ref> , by counting the number of bits of information needed to set up the preprocessing.
Reference: [ Khachiyan, 1979 ] <author> L. Khachiyan. </author> <title> A polynomial algorithm in linear programming. </title> <journal> Soviet Mathematics Doklady, </journal> <volume> 20(1) </volume> <pages> 191-194, </pages> <year> 1979. </year> <note> English translation. </note>
Reference-contexts: Moreover, once a polynomial-time algorithm for a problem is found, the foot is in the door, and an armada of mathematical and algorithmic techniques can be used to improve the algorithm. Linear programming may be the best known example. The breakthrough O (n 8 ) time algorithm of <ref> [ Khachiyan, 1979 ] </ref> , for n fi n instances, was impractical in itself, but it prompted an innovation by [ Karmarkar, 1984 ] 6 that produced an algorithm whose running time of about O (n 3 ) on all cases competes well commercially with the simplex method, which runs in
Reference: [ Kurtz et al., 1997 ] <author> S. Kurtz, S. Mahaney, J. Royer, and J. Simon. </author> <title> Biological computing. </title> <editor> In L. Hemaspaandra and A. Selman, editors, </editor> <booktitle> Complexity Theory Retrospective II, </booktitle> <pages> pages 179-195. </pages> <publisher> Springer Verlag, </publisher> <year> 1997. </year>
Reference: [ Levin, 1996 ] <author> Leonid A. Levin. </author> <title> Computational complexity of functions. </title> <journal> Theor. Comp. Sci., </journal> <volume> 157(2) </volume> <pages> 267-271, </pages> <year> 1996. </year>
Reference-contexts: For every language A there is a computable function t 0 such that for every time-constructible function t, there is some machine that accepts A within time t if and only if t = (t 0 ) <ref> [ Levin, 1996 ] </ref> .
Reference: [ Lewis II et al., 1965 ] <author> P. Lewis II, R. Stearns, and J. Hartmanis. </author> <title> Memory bounds for recognition of context-free and context-sensitive languages. </title> <booktitle> In Proceedings, Sixth Annual IEEE Symposium on Switching Circuit Theory and Logical Design (now FOCS), </booktitle> <pages> pages 191-202, </pages> <year> 1965. </year>
Reference: [ Papadimitriou, 1994 ] <author> C. Papadimitriou. </author> <title> Computational Complexity. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1994. </year>
Reference: [ Parberry, 1994 ] <author> I. Parberry. </author> <title> Circuit Complexity and Neural Networks. </title> <publisher> M.I.T. Press, </publisher> <address> Cam-bridge, Mass., </address> <year> 1994. </year>
Reference: [ Pippenger and Fischer, 1979 ] <author> N. Pippenger and M. Fischer. </author> <title> Relations among complexity measures. </title> <journal> J. Assn. Comp. Mach., </journal> <volume> 26 </volume> <pages> 361-381, </pages> <year> 1979. </year> <month> 38 </month>
Reference: [ Reif and Tate, 1992 ] <author> J. Reif and S. Tate. </author> <title> On threshold circuits and polynomial computa-tion. </title> <journal> SIAM J. Comput., </journal> <volume> 21 </volume> <pages> 896-908, </pages> <year> 1992. </year>
Reference: [ Ruby and Fischer, 1965 ] <author> S. Ruby and P. Fischer. </author> <title> Translational methods and computational complexity. </title> <booktitle> In Proceedings, Sixth Annual IEEE Symposium on Switching Circuit Theory and Logical Design (now FOCS), </booktitle> <pages> pages 173-178, </pages> <year> 1965. </year>
Reference: [ Ruzzo, 1981 ] <author> W. Ruzzo. </author> <title> On uniform circuit complexity. </title> <journal> J. Comp. Sys. Sci., </journal> <volume> 22 </volume> <pages> 365-383, </pages> <year> 1981. </year>
Reference: [ Savitch, 1970 ] <author> W. Savitch. </author> <title> Relationship between nondeterministic and deterministic tape complexities. </title> <journal> J. Comp. Sys. Sci., </journal> <volume> 4 </volume> <pages> 177-192, </pages> <year> 1970. </year>
Reference: [ Seiferas et al., 1978 ] <author> J. Seiferas, M. Fischer, and A. Meyer. </author> <title> Separating nondeterministic time complexity classes. </title> <journal> J. Assn. Comp. Mach., </journal> <volume> 25 </volume> <pages> 146-167, </pages> <year> 1978. </year>
Reference: [ Sipser, 1983 ] <author> M. Sipser. </author> <title> Borel sets and circuit complexity. </title> <booktitle> In Proc. 15th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 61-69, </pages> <year> 1983. </year>
Reference: [ Stockmeyer, 1974 ] <author> L. Stockmeyer. </author> <title> The complexity of decision problems in automata theory and logic. </title> <type> Technical Report MAC-TR-133, </type> <institution> Project MAC, M.I.T., </institution> <address> Cambridge, Mass., </address> <year> 1974. </year>
Reference-contexts: The choice of vocabulary for the logic is important here, as the next paragraph illustrates. One particular logic that was studied in <ref> [ Stockmeyer, 1974 ] </ref> is called WS1S. (We need not be concerned with any details of this logic.) Stockmeyer showed that any circuit that takes as input a formula with up to 616 symbols and produces as output a correct answer saying whether the formula is valid, requires at least 10
Reference: [ Stockmeyer, 1987 ] <author> L. Stockmeyer. </author> <title> Classifying the computational complexity of problems. </title> <journal> J. Symb. Logic, </journal> <volume> 52 </volume> <pages> 1-43, </pages> <year> 1987. </year>
Reference-contexts: According to <ref> [ Stockmeyer, 1987 ] </ref> , Even if gates were the size of a proton and were connected by infinitely thin wires, the network would densely fill the known universe.
Reference: [ Szelepcsenyi, 1988 ] <author> R. Szelepcsenyi. </author> <title> The method of forced enumeration for nondeterministic automata. </title> <journal> Acta Informatica, </journal> <volume> 26 </volume> <pages> 279-284, </pages> <year> 1988. </year>
Reference: [ Trakhtenbrot, 1964 ] <author> B. Trakhtenbrot. </author> <title> Turing computations with logarithmic delay. </title> <journal> Algebra i Logika, </journal> <volume> 3 </volume> <pages> 33-48, </pages> <year> 1964. </year>
Reference: [ van Emde Boas, 1990 ] <author> P. van Emde Boas. </author> <title> Machine models and simulations. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume A, </booktitle> <pages> pages 1-66. </pages> <publisher> Else-vier and MIT Press, </publisher> <year> 1990. </year> <month> 39 </month>
Reference: [ von zur Gathen, 1991 ] <author> J. von zur Gathen. </author> <title> Efficient exponentiation in finite fields. </title> <booktitle> In Proc. 32nd Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 384-391, </pages> <year> 1991. </year>
Reference: [ Wang, 1997 ] <author> J. Wang. </author> <title> Average-case computational complexity theory. </title> <editor> In L. Hemaspaan-dra and A. Selman, editors, </editor> <booktitle> Complexity Theory Retrospective II, </booktitle> <pages> pages 295-328. </pages> <publisher> Springer Verlag, </publisher> <year> 1997. </year>

References-found: 48

