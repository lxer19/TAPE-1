URL: http://www.cs.virginia.edu/~nr/toolkit/base/refman.ps
Refering-URL: http://www.cs.virginia.edu/~nr/toolkit/
Root-URL: http://www.cs.virginia.edu
Title: New Jersey Machine-Code Toolkit Reference Manual Version 0.5  
Author: Norman Ramsey Mary Fernandez 
Date: November 15, 1996  
Abstract-found: 0
Intro-found: 1
Reference: <author> Fraser, Christopher W. and David R. Hanson. </author> <year> 1991 </year> <month> (October). </month>
Reference-contexts: Many of the examples are target independent and are used by mld for each target architecture. The target-dependent excerpts are for the MIPS. 4.10.1 Using encoding procedures mld's code generators are based on those used in the lcc compiler, which emit assembly code <ref> (Fraser and Hanson 1991) </ref>. Much of each code generator is generated from a BURG specification (Fraser, Henry, and Proebsting 1992), which contains rules for rewriting intermediate-code subtrees to assembly-language templates; the rest of the code generator is written by hand.
Reference: <editor> A retargetable compiler for ANSI C. </editor> <booktitle> SIGPLAN Notices, </booktitle> <volume> 26(10) </volume> <pages> 29-43. </pages>
Reference: <author> Fraser, Christopher W., Robert R. Henry, and Todd A. Proebsting. </author> <year> 1992 </year> <month> (April). </month> <title> BURG|fast optimal instruction selection and tree parsing. </title> <journal> SIGPLAN Notices, </journal> <volume> 27(4) </volume> <pages> 68-76. </pages>
Reference-contexts: The target-dependent excerpts are for the MIPS. 4.10.1 Using encoding procedures mld's code generators are based on those used in the lcc compiler, which emit assembly code (Fraser and Hanson 1991). Much of each code generator is generated from a BURG specification <ref> (Fraser, Henry, and Proebsting 1992) </ref>, which contains rules for rewriting intermediate-code subtrees to assembly-language templates; the rest of the code generator is written by hand. Adapting a code generator means modifying both the BURG specification and the hand-written parts. The toolkit simplifies those modifications.
Reference: <author> Hanson, David R. </author> <year> 1996. </year> <title> C Interfaces and Implementations. </title> <publisher> Benjamin/Cummings. Forthcoming. </publisher>
Reference: <author> Joy, William. </author> <year> 1994. </year> <title> An Introduction to the C shell, chapter 4. </title> <address> Sebastopol, CA: O'Reilly. </address>
Reference-contexts: The regular expression syntax is the same as the syntax for C-shell "globbing" expressions <ref> (Joy 1994) </ref>. For example, the mappings applied to the parts of the constructor name add^"mrb" are: assembly component add is add The first rule maps add to itself and the second maps any string that matches *b to b.
Reference: <author> Milner, Robin, Mads Tofte, and Robert W. Harper. </author> <year> 1990. </year> <title> The Definition of Standard ML. </title> <address> Cambridge, Massachusetts: </address> <publisher> MIT Press. </publisher>
Reference-contexts: DECODING APPLICATIONS, MATCHING STATEMENTS 3.1 Matching statements The toolkit's matching statements are inspired by pattern matching in Standard ML <ref> (Milner, Tofte, and Harper 1990) </ref>. Matching statements are embedded directly in C or Modula-3 code. A matching statement begins with match code to on a line by itself. The code is an expression that computes a value of type "address," as specified by the address type template.
Reference: <author> Ramsey, Norman and Mary F. Fernandez. </author> <year> 1994 </year> <month> (October). </month> <title> New Jersey Machine-Code Toolkit architecture specifications. </title> <type> Technical Report TR-470-94, </type> <institution> Department of Computer Science, Princeton University. </institution> . <year> 1995a </year> <month> (January). </month> <title> The New Jersey Machine-Code Toolkit. </title> <booktitle> In Proceedings of the 1995 USENIX Technical Conference, </booktitle> <pages> pages 289-302, </pages> <address> New Orleans, LA. </address> . <year> 1995b </year> <month> (December). </month> <title> Specifying representations of machine instructions. </title> <note> Revised August, 1996. Submitted to ACM Transactions on Programming Languages and Systems. </note>
Reference-contexts: Introduction This is the reference manual for version 0.5 of the New Jersey Machine-Code toolkit. New users should read our overview (Ramsey and Fernandez 1995a) and study our annotated descriptions of real machines <ref> (Ramsey and Fernandez 1994) </ref> before tackling this manual. Our long paper on the specification language (Ramsey and Fernandez 1995b) is also worth reading. Here you will find: Chap. 1 Promises, cautions, and warnings. Chap. 2 A grammar for the specification language, with a detailed description of each construct.

References-found: 7

