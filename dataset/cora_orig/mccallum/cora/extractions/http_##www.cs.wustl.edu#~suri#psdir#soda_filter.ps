URL: http://www.cs.wustl.edu/~suri/psdir/soda_filter.ps
Refering-URL: http://www.cs.wustl.edu/~suri/research.html
Root-URL: http://www.cs.wustl.edu
Title: Packet Filtering in High Speed Networks  
Author: Subhash Suri George Varghese 
Abstract-found: 0
Intro-found: 1
Reference: [1] <institution> Merit Inc. IPMA statistics. (nic.merit.edu.) </institution>
Reference-contexts: Then, each filter F is a K-tuple (F <ref> [1] </ref>, F [2], : : :, F [k]), with each F [i] a variable length prefix bit string. <p> We will describe our algorithm in abstract terms, with the model that each field is specified using at most w bits. Our model assumes perfect hashing, which has been implemented in real systems. We say that a filter F = (F <ref> [1] </ref>; F [2]) belongs to tuple (` 1 ; ` 2 ) if F [i] is ` i bits long, for i = 1; 2. <p> The lower bound can be extended to r log (c=r) probes in a r fi c tuple space, where r c w. 2 5 Implementation Results and Discussion We used a standard database of IP addresses (Mae-East NAP <ref> [1] </ref>) to generate random filters of valid types: (D; fl; fl; fl), (D; S; fl; fl), (D; S; P 1 ; fl), (D; S; P 1 ; P 2 ), (D; fl; P 1 ; fl), (D; fl; P 1 ; P 2 ); here D; S; P 1 ; P
Reference: [2] <author> P. Newman, G. Minshall, and L. </author> <title> Huston. IP Switching and Gigabit Routers. </title> <journal> IEEE Communications Magazine, </journal> <month> January </month> <year> 1997. </year>
Reference-contexts: Then, each filter F is a K-tuple (F [1], F <ref> [2] </ref>, : : :, F [k]), with each F [i] a variable length prefix bit string. <p> Louis, MO 63130. 1 Existing firewall implementations do a linear search, and use caching to improve performance. Even assuming (very optimistically) a 80% hit rate <ref> [3, 2] </ref>, the cost of linear search through 20K filters is a bottleneck even if it occurs only 20% of the time. 4 Fast and Scalable Packet Filtering We briefly describe our ongoing research on the packet filtering problem [6]. <p> We will describe our algorithm in abstract terms, with the model that each field is specified using at most w bits. Our model assumes perfect hashing, which has been implemented in real systems. We say that a filter F = (F [1]; F <ref> [2] </ref>) belongs to tuple (` 1 ; ` 2 ) if F [i] is ` i bits long, for i = 1; 2.
Reference: [3] <author> C. Partridge. </author> <title> Locality and route caches. </title> <booktitle> In NSF Workshop on Internet Statistics Measurement and Analysis, </booktitle> <address> San Diego, CA, USA, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: Louis, MO 63130. 1 Existing firewall implementations do a linear search, and use caching to improve performance. Even assuming (very optimistically) a 80% hit rate <ref> [3, 2] </ref>, the cost of linear search through 20K filters is a bottleneck even if it occurs only 20% of the time. 4 Fast and Scalable Packet Filtering We briefly describe our ongoing research on the packet filtering problem [6].
Reference: [4] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: Packet filters can be viewed geometrically as rectangular boxes in a K-dimensional discrete space, and the packet filtering becomes the multidimensional range seaching problem, studied in computational geometry <ref> [4] </ref>. The best data structure for this problem requires O (N (log N ) K1 ) space, and search time O ((log N ) K1 + L), where N is the number of filters and L is the number of filters matching the packet.
Reference: [5] <author> R. Seidel. </author> <title> A randomized planar point location structure. </title> <note> Available at ftp://ftp.geom.umn.edu/pub/contrib/comp_geom/pploc.c </note>
Reference-contexts: For instance, when N = 20; 000 and K = 4, the worst-case search cost is at least 2916 steps and the memory cost is 2916 fi N . Even for disjoint (unambiguous) 2-dimensional filters, our experiments show that the optimized point location algorithm of Seidel <ref> [5] </ref> takes 40 secs for 20K filters, which is almost 2 orders of magnitude too slow. fl Department of Computer Science, Washington University, St. Louis, MO 63130. 1 Existing firewall implementations do a linear search, and use caching to improve performance.
Reference: [6] <author> V. Srinivasan, G. Varghese, S. Suri and M. Waldvogel. </author> <title> Fast Scalable Algorithms for Level Four Switching. </title> <note> To appear in SIGCOMM '98, Vancouver. 3 </note>
Reference-contexts: Even assuming (very optimistically) a 80% hit rate [3, 2], the cost of linear search through 20K filters is a bottleneck even if it occurs only 20% of the time. 4 Fast and Scalable Packet Filtering We briefly describe our ongoing research on the packet filtering problem <ref> [6] </ref>. A key development is a fast algorithm for 2-dimensional filters|for example, destination-source pair filters. This is an important case used in Virtual Private Networks (VPNs) as well as multicast forwarding. <p> For 20K 4-dimensional filters, the algorithm running on a 300 Mhz Pentium Pro required 2 MB of meomory and 2.4 sec worst-case search time. In the case of 20K 2-dimensional filters, the search time improved to 0.6 sec. More results and some other algorithms are described in <ref> [6] </ref>. While these numbers are promising, our current research is aimed at reducing worst-case search times further, and to look for more efficient algorithms for the filter problem.
References-found: 6

