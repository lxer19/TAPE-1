URL: http://www.csl.sri.com/sree/hldvt97.ps
Refering-URL: http://www.csl.sri.com/old-news.html
Root-URL: 
Phone: #34  
Title: High-Level Design and Validation of ATM Switch  High Level Design Validation and Test Workshop)  
Author: S.P. Rajan M. Fujita K. Yuan M. T-C. Lee 
Address: 3350 Scott Blvd.  1208 E. Arques Ave. Santa Clara, CA 95054 Tucson, AZ 85721 Sunnyvale, CA 94086  
Affiliation: Fujitsu Laboratories of America ECE Dept. Avant! Corporation  University of Arizona  
Note: (appears in proceedings of IEEE International  
Abstract: Asynchronous Transfer Mode (ATM) has emerged as a backbone for high-speed broadband communications networks. In this paper we present ATM switch design starting from a parametric high-level model, validating the model using a combination of formal verification and simulation. We used a combination of theorem proving and model checking to discover bugs in the high-level model that was presumed correct using simulation. Parametric design validation obviates the need to validate specific ATM switch designs derived from the parametric model. 
Abstract-found: 1
Intro-found: 1
Reference: [Bry92] <author> Randal E. Bryant. </author> <title> Symbolic boolean manipulation with ordered binary-decision diagrams. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(3) </volume> <pages> 293-318, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: The PVS verifier is used to determine if the desired properties hold in the specification of the model. The user interacts with the verifier by a small set of commands. The verifier contains procedures for Boolean reasoning, arithmetic and (conditional) rewriting. In particular, Binary Decision Diagram (BDD) <ref> [Bry92] </ref> based simplification may be invoked for Boolean reasoning. Model checking, in which properties are stated in fair-CTL and models are written as state transition relations, can be invoked within PVS as another proof rule. The PVS verifier also features a variety of general induction schemes to tackle large-scale verification.
Reference: [CFFT96] <author> Tom Chaney, J. Andrew Fingerhut, Mar-garet Flucke, and Jonathan Turner. </author> <title> Design of a gigabit ATM switching system. </title> <type> Technical Report WUCS-96-07, </type> <institution> Computer Science Department, Washington University, St. Louis, Missouri, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Asynchronous Transfer Mode (ATM) technology has emerged as a backbone for high-speed broadband communications networks <ref> [CFFT96] </ref>. An ATM network backbone typically consists of a number of small ATM switches interconnected in a matrix topology. An ATM switch takes data from input ports and forwards the input data to the proper output ports in the same order as the input data.
Reference: [Cur94] <author> Paul Curzon. </author> <title> The formal verification of the fairisle ATM switching element. </title> <type> Technical Report 328 and 329, </type> <institution> Computer Laboratory, University of Cambridge, </institution> <address> Cambridge, UK, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: We employ a pragmatic combination of theorem proving and model checking [RSS95] in conjunction with small-scale conventional simulation. There have been other efforts in ATM switch verification earlier <ref> [TZS + 96, Cur94] </ref>. However, a major drawback with earlier efforts is that with any change of switch design requirements such as the clock ratio and the number of input/output ports, one needs to repeatedly iterate through high-level modeling, validation, and synthesis cycle until the design satisfies the design objectives. <p> However, a major drawback with earlier efforts is that with any change of switch design requirements such as the clock ratio and the number of input/output ports, one needs to repeatedly iterate through high-level modeling, validation, and synthesis cycle until the design satisfies the design objectives. Furthermore, earlier efforts <ref> [CYF94, TZS + 96, Cur94] </ref> do not introduce formal validation early in the design cycle, rather describe application of formal verification on a completed design post-facto.
Reference: [CYF94] <author> B. Chen, M. Yamazaki, and M. Fujita. </author> <title> Bug identification of a real chip design by symbolic model checking. </title> <booktitle> In Proceedings of the European Conference on Design Automation, the European Test Conference, </booktitle> <pages> pages 132-136, </pages> <address> Paris, France, </address> <month> February </month> <year> 1994. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: However, a major drawback with earlier efforts is that with any change of switch design requirements such as the clock ratio and the number of input/output ports, one needs to repeatedly iterate through high-level modeling, validation, and synthesis cycle until the design satisfies the design objectives. Furthermore, earlier efforts <ref> [CYF94, TZS + 96, Cur94] </ref> do not introduce formal validation early in the design cycle, rather describe application of formal verification on a completed design post-facto. <p> property checked by simulation, we obtain the following overall correctness property: Theorem 3.5 (ATM Switch Correctness) Every input cell is switched to the proper output port, and the order among the cells at an output port is identical to that at the corresponding input port. 4 Summary In earlier work <ref> [CYF94] </ref>, a number of abstractions had to be manually applied without any computer-aided tool applied to formally verify an industrial ATM switch design using SMV-based model checking [McM93]. The verification successfully revealed the bugs and the design was corrected.
Reference: [LHCF96] <author> Mike T-C. Lee, Yu-Chin Hsu, Ben Chen, and Masahiro Fujita. </author> <title> Domain-specific high-level modeling and synthesis for ATM switch design using VHDL. </title> <booktitle> In Proceedings of the 33th Design Automation Conference. Association for Computing Machinery, </booktitle> <year> 1996. </year>
Reference-contexts: An ATM switch is typically designed as a RAM-embedded Application Specific Integrated Circuit (ASIC). High-level modeling and hardware synthesis has been shown to deliver good results in ATM switch design <ref> [LHCF96] </ref>. However, the high-level model presented earlier [LHCF96] works only for specific design requirements such as a fixed clock ratio and a fixed number of input/output ports. Furthermore, the model was presumed correct using simulation. However, by formal verification we discovered several bugs in the control part of the model. <p> An ATM switch is typically designed as a RAM-embedded Application Specific Integrated Circuit (ASIC). High-level modeling and hardware synthesis has been shown to deliver good results in ATM switch design <ref> [LHCF96] </ref>. However, the high-level model presented earlier [LHCF96] works only for specific design requirements such as a fixed clock ratio and a fixed number of input/output ports. Furthermore, the model was presumed correct using simulation. However, by formal verification we discovered several bugs in the control part of the model. <p> Every other bit has the value 0. It should be noted that such a cycle counter is needed as a sentinel <ref> [LHCF96] </ref> because the internal switch clock (sw clk) and the external network clock (HW clk) may not be synchronized with respect to the ris ing/falling clock edges. * Process iHW sp2 shifts contents of register i to register i+1 at every network clock cycle. <p> The parallel-to-serial (P/S) conversion module is modeled as a set of communicating processes similar to the S/P module, and is not discussed in this paper. 2.2 Parametrizing the number of ports In the model of the ATM switch presented earlier <ref> [LHCF96] </ref>, the two ports are each associated with a process, and each process communicates with other processes, such as the WC, using synchronization signals.
Reference: [McM93] <author> Kenneth L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic Pub., </publisher> <address> Boston, MA, </address> <year> 1993. </year>
Reference-contexts: the order among the cells at an output port is identical to that at the corresponding input port. 4 Summary In earlier work [CYF94], a number of abstractions had to be manually applied without any computer-aided tool applied to formally verify an industrial ATM switch design using SMV-based model checking <ref> [McM93] </ref>. The verification successfully revealed the bugs and the design was corrected. But, such a post-facto verification would not be economically feasible in an industrial setting.
Reference: [ORR + 96] <author> S. Owre, S. Rajan, J.M. Rushby, N. Shankar, and M.K. Srivas. PVS: </author> <title> Combining specification, proof checking, and model checking. </title> <editor> In R. Alur and T. A. Henzinger, editors, </editor> <booktitle> Computer-Aided Verification, CAV '96, volume 1102 of Lecture Notes in Computer Science, </booktitle> <pages> pages 411-414, </pages> <address> New Brunswick, NJ, July/August 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The validation of the parametric model is done by a combination of simulation and formal verification early in the design cycle, before attempting high-level synthesis. We use a combination of theorem proving and model checking within the framework of Prototype Verification System (PVS) <ref> [ORR + 96] </ref>. The rest of the paper is organized as follows: in Section 2 we discuss parametric model of the ATM switch. The validation process using a combination of theorem proving and model checking with an outline of simulation is discussed in Section 3. <p> The verification of the correctness properties of the serial-to-parallel conversion module is discussed in Section 3.2, and the address recycling module in Section 3.3. The verification of the correctness of the output parallel-to-serial conversion is similar to the input module. 3.1 Overview of PVS The Prototype Verification System (PVS) <ref> [ORR + 96] </ref> is an environment for specifying entities such as hardware/software models and algorithms, and verifying properties associated with the entities. The specification language features common programming language constructs such as arrays, functions, and records. It has built-in types for reals, integers, naturals, and lists.
Reference: [RSS95] <author> Sreeranga P. Rajan, N. Shankar, and M. Srivas. </author> <title> An integration of model-checking with automated proof checking. </title> <booktitle> In 7th Conference on Computer-Aided Verification, </booktitle> <month> July </month> <year> 1995. </year>
Reference-contexts: Parametric ATM switch validation by exclusively using either simulation or one of the formal verification methods such as theorem proving and model checking would be tedious and inefficient. We employ a pragmatic combination of theorem proving and model checking <ref> [RSS95] </ref> in conjunction with small-scale conventional simulation. There have been other efforts in ATM switch verification earlier [TZS + 96, Cur94].
Reference: [Sha96] <author> N. Shankar. PVS: </author> <title> Combining specification, proof checking, and model checking. </title> <editor> In M. Srivas and A. Camilleri, editors, </editor> <booktitle> Formal Methods in Computer-Aided Design (FMCAD '96), volume 1166 of Lecture Notes in Computer Science, </booktitle> <pages> pages 257-264, </pages> <address> Palo Alto, CA, </address> <month> November </month> <year> 1996. </year> <note> Springer-Verlag. </note>
Reference-contexts: The PVS verifier also features a variety of general induction schemes to tackle large-scale verification. Moreover, different verification schemes can be combined into general-purpose strategies for similar classes of problems, such as microprocessor verification <ref> [Sha96] </ref>. 3.2 Formal Verification of Serial to Paral lel conversion Module The correctness property to be verified is that an incoming cell word from the network to an ATM input port appears at the output of the S/P buffer (i.e. the input to cell FIFO) at least after n (n is <p> We can characterize property 3.2 as a safety property. Following earlier work on verification of Peterson's mutual exclusion algorithm for an arbitrary number of processes <ref> [Sha96] </ref>, we can show using simple induction, rewriting, and arithmetic proof rules of general purpose theorem proving in PVS that property 3.2 holds for * an arbitrary buffer size, and * an arbitrary number of ports.
Reference: [TZS + 96] <author> S. Tahar, A. Zhou, X. Song, E. Cerny, and M. Kangevin. </author> <title> Formal verification of an ATM switch fabric using mutiway decision graphs. </title> <booktitle> In Proceedings of IEEE Sixth Great Lakes Symposium on VLSI (GLS-VLSI'96), </booktitle> <address> Ames, Iowa, March 1996. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: We employ a pragmatic combination of theorem proving and model checking [RSS95] in conjunction with small-scale conventional simulation. There have been other efforts in ATM switch verification earlier <ref> [TZS + 96, Cur94] </ref>. However, a major drawback with earlier efforts is that with any change of switch design requirements such as the clock ratio and the number of input/output ports, one needs to repeatedly iterate through high-level modeling, validation, and synthesis cycle until the design satisfies the design objectives. <p> However, a major drawback with earlier efforts is that with any change of switch design requirements such as the clock ratio and the number of input/output ports, one needs to repeatedly iterate through high-level modeling, validation, and synthesis cycle until the design satisfies the design objectives. Furthermore, earlier efforts <ref> [CYF94, TZS + 96, Cur94] </ref> do not introduce formal validation early in the design cycle, rather describe application of formal verification on a completed design post-facto.
References-found: 10

