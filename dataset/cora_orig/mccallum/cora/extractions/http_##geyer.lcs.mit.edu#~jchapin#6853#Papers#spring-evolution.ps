URL: http://geyer.lcs.mit.edu/~jchapin/6853/Papers/spring-evolution.ps
Refering-URL: http://geyer.lcs.mit.edu/~jchapin/6853/readinglist.html
Root-URL: 
Email: email addresses: graham.hamilton@eng.sun.com sanjay.radia@eng.sun.com  
Title: Using Interface Inheritance to Address Problems in System Software Evolution  
Author: Graham Hamilton Sanjay Radia 
Address: M/S 29-01 2550 Garcia Avenue Mountain View, CA 94043  
Note: The solutions have been tested and refined through their use in the Spring system.  
Date: November 1993  
Pubnum: SMLI TR-93-21  
Abstract: Two specific problems faced in large distributed systems are: (1) evolving and managing different versions of an interface while minimizing the impact on existing clients; and (2) supporting the addition of auxiliary interfaces that are orthogonal to the main interface of an abstraction. In the context of the Spring distributed system, we addressed both problems using an object-oriented interface definition language. Different versions of an interface are represented as different types, with an inheritance relationship that minimizes the impact on existing clients, and allows easy management of versions. We distinguish between fundamental and auxiliary properties, each of which is defined as a separate type. Rather than use simple root inheritance, we use a combination of root and leaf inheritance. This provides exibility in supporting auxiliary properties, and allows us to add new auxiliary properties as the system evolves, without forcing the system to be recompiled. 
Abstract-found: 1
Intro-found: 1
Reference: [Birrell & Nelson 1984] <author> A. D. Birrell and B. J. Nelson. </author> <title> Implementing Remote Procedure Calls. </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> 2(1), </volume> <month> February </month> <year> 1984. </year>
Reference-contexts: Calls across address spaces are done using Remote Procedure Calls <ref> [Birrell & Nelson 1984] </ref>. 2.2 Terminology We use the term type to refer to the programming language types that one may define in a typed, object-oriented language such as Eiffel [Meyer 1991] or C++, or to types defined in an interface 5 definition language such as IDL.
Reference: [Bjornerstedt & Hulten 1989] <author> Anders Bjornerstedt and Christer Hulten. </author> <title> Version Control in an Object-Oriented Architecture. In Object-Oriented Concepts, Databases, and Applications, </title> <editor> edited by Won Kim and Frederick H. Lochovsky, </editor> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: While a fair amount of attention has been given to the problems of managing different versions of object instances or object implementations [Putz 83], particularly in the context of object-oriented databases [Skarra & Zdonik 86], <ref> [Bjornerstedt & Hulten 1989] </ref>, comparatively little attention has been paid to the problems of evolving interface types in a general purpose object-oriented system. 3.1 Versioning versus adding new abstractions This section distinguishes between versioning and adding new abstractions.
Reference: [Bobrow et al. 1988] <author> D. G. Bobrow, L. G. DeMichiel, R. P. Gabriel, S. E. Keene, G. Kiczales and D. A. Moon. </author> <title> Common Lisp Object System Specification. </title> <journal> ACM SIGPLAN Notices, Volume 23, Special Issue, </journal> <month> September </month> <year> 1988. </year>
Reference-contexts: In some systems, such as Smalltalk [Goldberg & Robson 1983] or CLOS <ref> [Bobrow et al. 1988] </ref>, type checking is performed dynamically at run time. A program attempts to operate on an object as though the object belongs to a particular type, and if the object is indeed of that type, then the operation succeeds; otherwise, an exception handling method is called.
Reference: [Bracha & Cook 1990] <author> Gilad Bracha and William Cook. </author> <title> Mixin-based inheritance. </title> <booktitle> OOPSLA90 Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <address> Ottawa, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: This is a fairly standard use of mixin inheritance to 11 define auxiliary properties <ref> [Bracha & Cook 1990] </ref>. Thus, for example, the standard type io inherited from the auxiliary types acl and authenticated. On close examination, this approach exhibited two fairly serious aws. First, many of the auxiliary properties appeared to be genuinely orthogonal to the main type of the object.
Reference: [Cardelli & Wegner 1985] <author> Luca Cardelli and Peter Wegner, </author> <title> On understanding Types, Data Abstraction and Polymor-phism. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(4), </volume> <month> December </month> <year> 1985. </year>
Reference-contexts: However, Spring always remains a strongly typed system, in that all operations must be type checked, either statically or dynamically <ref> [Cardelli & Wegner 1985] </ref>. 3 Interface Version Management When an interface is first defined and introduced into a system, it is rarely perfect. As experience is gained in using the interface, and as new requirements are identified, new features may be added, and old features may become obsolete.
Reference: [Ellis & Stroustrup 1990] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <address> Addi-son-Wesley, </address> <year> 1990. </year>
Reference-contexts: A surrogate object provides a language-specific mapping to the Spring interface it represents. For example, in our main implementation language, C++ <ref> [Ellis & Stroustrup 1990] </ref>, Spring objects are represented by C++ objects.
Reference: [Goldberg & Robson 1983] <author> A. Goldberg and D. Robson. </author> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: When a type foobar inherits from type foo, we say that foobar is the derived type of foo, and that foo is the base type of foobar. 2.3 Static and dynamic typing There are two main styles of type checking in object-oriented systems. In some systems, such as Smalltalk <ref> [Goldberg & Robson 1983] </ref> or CLOS [Bobrow et al. 1988], type checking is performed dynamically at run time.
Reference: [Khalidi & Nelson 1993] <author> Yousef A. Khalidi andMichael N. Nelson. </author> <title> An implementation of Unix on an object-oriented operating system. </title> <booktitle> Usenix Conference Proceedings, </booktitle> <address> San Diego, </address> <month> January </month> <year> 1993. </year>
Reference: [Meyer 1991] <author> Bertrand Meyer. </author> <title> Eiffel: The Language and Environment. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year> <month> 17 </month>
Reference-contexts: Calls across address spaces are done using Remote Procedure Calls [Birrell & Nelson 1984]. 2.2 Terminology We use the term type to refer to the programming language types that one may define in a typed, object-oriented language such as Eiffel <ref> [Meyer 1991] </ref> or C++, or to types defined in an interface 5 definition language such as IDL. We shall use the term abstraction to describe the conceptual entities that programmers think about. In general, each abstraction is expressed as a specific type.
Reference: [OMG 1991] <author> Object Management Group. </author> <title> Common Object Request Broker Architecture and Specification. OMG Document Number 91.12.1. </title>
Reference-contexts: The use of the object metaphor for representing system resources. 2.1 The interface definition language, IDL The unifying principle of Spring is that all the key interfaces are defined in an interface definition language. Currently, we use the Object Management Groups IDL interface definition language <ref> [OMG 1991] </ref>. IDL is object-oriented, and includes support for multiple inheritance. It is purely concerned with interface properties (the methods and their arguments), and does not provide any implementation information.
Reference: [Ossher & Harrison 1992] <author> Harold Ossher and William Harrison, </author> <title> Combination of Inheritance Hierarchies. </title> <booktitle> OOP-SLA 92 Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <address> Vancouver, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: Unfortunately, this seems to be a natural consequence of our goal of avoiding tying auxiliary properties to standard types. Fortunately, we are able to type-check the narrow operation to maintain strong typing. <ref> [Ossher & Harrison 1992] </ref> advocate an interesting technique for merging inheritance hierarchies as a way of adding extensions to an existing tree.
Reference: [Putz 1983] <author> Steve Putz, </author> <title> Managing the evolution of Smalltalk-80 systems. In Smalltalk-80: Bits of History, Words of Advice, edited by Glenn Krasner, </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference: [Schaffert et al. 1986] <author> C. Schaffert, T. Cooper, B. Bullis, M. Killian and C. Wilport. </author> <title> An introduction to Trellis/Owl. </title> <booktitle> OOPSLA86 Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <address> Portland, </address> <month> Septem-ber </month> <year> 1986. </year>
Reference-contexts: A program attempts to operate on an object as though the object belongs to a particular type, and if the object is indeed of that type, then the operation succeeds; otherwise, an exception handling method is called. In other systems, such as Eiffel or Trellis/Owl <ref> [Schaffert et al. 1986] </ref>, type checking is performed statically at compile time. A program knows statically that a given object has a particular type, and that it can therefore safely perform particular operations on the object.
Reference: [Skarra & Zdonik 1986] <author> Andrea H. Skarra, Stanley B. Zdonik. </author> <title> The Management of Changing Types in an Object-Oriented Database. </title> <booktitle> OOPSLA86 Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <address> Portland, </address> <month> September </month> <year> 1986. </year>

References-found: 14

