URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-94-25.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: High Performance Access to Radio Astronomy Data: A Case Study  
Phone: (804) 982-2200 FAX: (804) 982-2214  
Author: John F. Karpovich James C. French Andrew S. Grimshaw 
Note: Work partially sponsored by NSF, NASA, CESDIS and NRAO.  
Date: July 11, 1994  
Address: THORNTON HALL CHARLOTTESVILLE, VIRGINIA 22903-2442  
Affiliation: DEPARTMENT OF COMPUTER SCIENCE UNIVERSITY OF VIRGINIA  
Abstract: Appeared in Proceedings of the Seventh International Working Conferenence on Scientific and Statistical Database Management, pp. 240-249, Charlottesville, VA, September 1994. Also available as University of Virginia, Department of Computer Science Technical Report CS-94-25 via the web @ ftp:/ /ftp.cs.virginia.edu/pub/techreports/README.html. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. S. Grimshaw and E. C. Loyot, Jr., </author> <title> ELFS: Object-Oriented Extensible File Systems, </title> <institution> University of Virginia, Computer Science TR 91-14, </institution> <month> July </month> <year> 1991. </year>
Reference: [2] <author> John F. Karpovich, Andrew S. Grimshaw, James C. </author> <title> French, Extensible File Systems (ELFS): An Object-Oriented Approach to High Performance File I/O, </title> <booktitle> to appear in the proceedings of OOPSLA94, </booktitle> <address> Portland Or., </address> <month> October, </month> <year> 1994. </year>
Reference: [3] <author> J.L. Bentley and J.H. Friedman, </author> <title> Data Structures for Range Searching, </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 11, No. 4, </volume> <pages> pp. 397-409, </pages> <month> December </month> <year> 1979. </year>
Reference-contexts: The database literature contains many examples of creative file structures that are well suited for particular application needs or types of data. Examples include tree-based structures such as k-d trees <ref> [3] </ref> and R-trees [4], partitioning-based structures like grid files [5] and Piecewise Linear Order-Preserving-hashing (or PLOP) files [6,7], indexed sorted files, and many others. Each has advantages and disadvantages under different access requirements and data attributes.
Reference: [4] <author> A. Guttman, R-Trees: </author> <title> A Dynamic Index Structure for Spatial Searching, </title> <booktitle> Proceedings of Annual Meeting, ACM SIG-MOD Record, </booktitle> <volume> Vol. 14, No. 2, </volume> <pages> pp. 47-57, </pages> <year> 1984. </year>
Reference-contexts: The database literature contains many examples of creative file structures that are well suited for particular application needs or types of data. Examples include tree-based structures such as k-d trees [3] and R-trees <ref> [4] </ref>, partitioning-based structures like grid files [5] and Piecewise Linear Order-Preserving-hashing (or PLOP) files [6,7], indexed sorted files, and many others. Each has advantages and disadvantages under different access requirements and data attributes.
Reference: [5] <author> J. Nievergelt and H. Hinterberger, </author> <title> The Grid File: An Adaptable, Symmetric Multikey File Structure, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 9, No. 1, </volume> <pages> pp. 38-71, </pages> <month> March </month> <year> 1984. </year>
Reference-contexts: The database literature contains many examples of creative file structures that are well suited for particular application needs or types of data. Examples include tree-based structures such as k-d trees [3] and R-trees [4], partitioning-based structures like grid files <ref> [5] </ref> and Piecewise Linear Order-Preserving-hashing (or PLOP) files [6,7], indexed sorted files, and many others. Each has advantages and disadvantages under different access requirements and data attributes. For example, indexing schemes work well for single record retrieval when one or more of the indices can be used. <p> Structures evaluated include indexed sorted files, R and R+ trees [4,9], quadtrees [10], k-d and k-d-b trees [3,11], grid files <ref> [5] </ref> and PLOP-hashing files [6,7]. We found that both grid and PLOP-hashing files are good candidates for NRAO data because both are specifically designed to support high performance range searches, the dominant access pattern at NRAO.
Reference: [6] <author> H. Kriegel and B. Seeger, PLOP-Hashing: </author> <title> A Grid File without a Directory, </title> <booktitle> Proceedings of the Fourth International Conference on Data Engineering, </booktitle> <pages> pp. 369-376, </pages> <month> Feb-ruary </month> <year> 1988. </year>
Reference: [7] <author> H. Kriegel and B. Seeger, </author> <title> Techniques for Design and Implementation of Efficient Spatial Access Methods, </title> <booktitle> Proceedings of the 14th VLDB Conference, </booktitle> <pages> pp. 360-370, </pages> <year> 1988. </year>
Reference: [8] <author> Brian Pane, </author> <title> Efficient Manipulation of Out-of-Core Matrices, </title> <institution> University of Virginia, Department of Computer Science. </institution>
Reference-contexts: Unix also makes no attempt to provide an interface where the user can declare properties of the file or intended access patterns to help improve performance. An example of a better interface is presented by Pane for a two dimensional matrix file <ref> [8] </ref>. The matrix file interface presents data in meaningful units, i.e. rows and columns, provides functions for manipulating the file in terms of these units, and provides a way for programmers to express how the file will be accessed, for example a method to declare the stride for upcoming accesses.
Reference: [9] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos, </author> <note> The R+-Tree: </note>
References-found: 9

