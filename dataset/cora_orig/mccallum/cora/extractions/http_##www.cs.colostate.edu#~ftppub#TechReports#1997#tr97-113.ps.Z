URL: http://www.cs.colostate.edu/~ftppub/TechReports/1997/tr97-113.ps.Z
Refering-URL: http://www.cs.colostate.edu/~ftppub/
Root-URL: 
Phone: Phone: (970) 491-5792 Fax: (970) 491-2466  
Title: Measuring Class Cohesion in Java  
Author: Martin F. Shumway 
Degree: M.S. Thesis  
Web: WWW: http://www.cs.colostate.edu  
Address: Fort Collins, CO 80523-1873  
Affiliation: Computer Science Department Colorado State University  
Date: June 11, 1997  
Pubnum: Technical Report CS-97-113  
Abstract: Computer Science Technical Report 
Abstract-found: 1
Intro-found: 1
Reference: [Arnold96] <author> Ken Arnold, James Gosling. </author> <title> The Java Programming Language . New York: </title> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference-contexts: as cohesive as 0.8, but the statement is nonetheless meaningful. 23 24 25 26 Chapter 4 Java Models This section defines the language-specific issues concerning cohesion measurement in Java. 4.1 Java Language Model 4.1.1 Syntactic Organization and Language Features The top level syntactic organization of Java programs is the package <ref> [Arnold96] </ref>. A package consists of an optional name, which may qualify it with respect to enclosing super packages. In addition, any number of import declarations and type (class and interface) declarations may exist.
Reference: [Baker90] <author> A Baker, J Bieman, N Fenton, D Gustafson, A Melton, R Whitty, </author> <title> "A Philosophy for software Measurement," </title> <journal> Journal of Systems Software, </journal> <volume> vol 12, </volume> <month> July </month> <year> 1990. </year>
Reference-contexts: The contributions of <ref> [Baker90] </ref> [Fenton91] [Fenton94] [Melton90] [Kitchenham95] [Zuse91] have placed software measurement on a proper mathematical foundation. The work of [Bieman94] [Hitz95] [Briand96] are examples of modern software measures firmly grounded in measurement theory. We wish to apply the same rigor to the Bieman-Kang cohesion measure.
Reference: [Basili96] <author> Victor Basili, Lionel Briand, Walcelio Melo. </author> <title> "Validation of Object-Oriented Design Metrics as Quality Indicators." </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol 22 no 10, </volume> <month> October </month> <year> 1996. </year>
Reference: [Bieman93] <author> James Bieman and Byung-Kyoo Kang. </author> <title> "Measuring Functional Cohesion." </title> <institution> Computer Science Technical Report CS-93-109. Colorado State University, </institution> <year> 1993. </year>
Reference: [Bieman94] <author> James Bieman and Linda Ott. </author> <title> "Measuring Functional Cohesion." </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol 20 no 8, </volume> <month> August </month> <year> 1994. </year>
Reference-contexts: The contributions of [Baker90] [Fenton91] [Fenton94] [Melton90] [Kitchenham95] [Zuse91] have placed software measurement on a proper mathematical foundation. The work of <ref> [Bieman94] </ref> [Hitz95] [Briand96] are examples of modern software measures firmly grounded in measurement theory. We wish to apply the same rigor to the Bieman-Kang cohesion measure. The design of a measure should start with an understanding the entity being studied [Fenton94]. The entity in this research is a Java class.
Reference: [Bieman95] <author> James Bieman, Byung-Kyoo Kang. </author> <title> "Cohesion and Reuse in an Object-Oriented System." </title> <booktitle> Proceedings of the ACM Symposium Software Reusability (SSR'95), </booktitle> <pages> pp. 259-262, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Object-oriented cohesion is a concept still under development. The need to establish a firm basis for object-oriented cohesion motivates the current research. 1.2 Overview of Research This research applies the class cohesion measure of Bieman and Kang <ref> [Bieman95] </ref> to Java programs. Classes are measured as to their relative internal connectivity. <p> There are two variants of class cohesion: Tight Class Cohesion (TCC) and Loose Class Cohesion (LCC). The Bieman-Kang cohesion measures were informally proposed in <ref> [Bieman95] </ref>. The research places the Bieman and Kang proposal on a more firm mathematical foundation by demonstrating the representation condition of the measure [Fenton94]. This requires that the numerical measure of cohesion does 1 not contradict any notional properties of the empirical nature of cohesion. <p> Designers generally try to achieve "high" cohesion and "low" coupling for modules in their software products [Budd91]. A highly cohesive module is one which has a single basic function and is difficult to split <ref> [Bieman95] </ref>. <p> C indicates the extent to which the graph has deviated from the miminal graph required to maintain connectivity among a group of methods. 2.3.5 Relative Connectivity Measure of Bieman and Kang In their work on object-oriented cohesion, Bieman and Kang <ref> [Bieman95] </ref> adopt the notion of cohesion as the interaction of methods of a class through the instance variables of the class. Two measures are proposed: Loose Class Cohesion (LCC), which counts direct and indirect connections between methods, and Tight Class Cohesion (TCC), which counts only direct connections between methods. <p> Therefore, the class cohesion measures can be used to locate the classes that may have been designed inappropriately." <ref> [Bieman95] </ref> Chapter 3 is devoted to a formal validation of the Bieman-Kang cohesion measures. 2.3.6 Taxonomy of Briand Briand et al review the cohesion measures currently under proposal with the intent of unifying them under a common framework [Briand97a][Briand97b]. <p> For ordinal scale type, it is a monotonic increasing function remapping the values to a new total order. For a ratio scale type, it is multiplication by a scalar. 3.2 Definitions In their work on object-oriented cohesion, Bieman and Kang <ref> [Bieman95] </ref> adopt the notion of cohesion as the interaction of methods of a class through the instance variables of the class. This section states the measure's definition in terms where the representation condition for measures can be assessed. <p> The Java Virtual Machine specification defines a canonical representation (mangling) of the fully qualified method name [Lindholm96]. Use of the canonical qualification in naming makes overloaded methods distinct in the name space of the Java program. In the work of Bieman and Kang <ref> [Bieman95] </ref>, no distinction was made among overloaded methods. This vastly simplifies matters. Unfortunately, method overloading is very common in the Java idiom and must be tackled if any meaningful cohesion results are to be obtained. 4.1.3 Dynamic Method Dispatch Method dispatch is dynamic in Java. <p> This research addresses only Local Cohesion, or cohesion arising from definitions available within a class. This approach diverges from that of <ref> [Bieman95] </ref>, which admits to optional measurement of connections through super class instance variables. 4.3.3 Cohesion Established Through Composition Consider the following container class which is composed of a vector of complex values and performs certain vector operations on it. package ComplexNumber; import java.util.Vector; public class ComplexVector - private Vector v = <p> In our view, such methods should be excluded from analysis. One question that arises in cohesion measurement is whether highly cohesive modules are more readily reused. This question was studied in <ref> [Bieman95] </ref>, which hypothesized that high cohesion leads to high reuse. The study, which examined private reuse through inheritance, found the opposite: the most reused modules were of those having low cohesion.
Reference: [Bogart83] <author> Kenneth Bogart. </author> <title> Introductory Combinatorics. </title> <address> Marshfield MA: </address> <publisher> Pitman Publishing, </publisher> <year> 1983. </year>
Reference-contexts: The Integer Partition Problem tells us in how many ways an integer n can be represented by a multiset of positive numbers that add up to n. For example, P (4) = jf4g; f3+1g; f2+2g; f2+1+1g; f1+1+1+1gj = 5. The following theorem gives a recurrence for generating this sum <ref> [Bogart83] </ref> [Hall86]. The proof may be found in the references.
Reference: [Booch94] <author> Grady Booch. </author> <title> Object-Oriented Analysis and Design with Applications, 2nd Edition. </title> <publisher> Ben-jamin Cummings Publishing Co., Inc. (Addison-Wesley) 1994. </publisher>
Reference-contexts: We take many ideas from this work. Objects are instantiations of classes. A class is considered a design for the production of an object. Classes can be sub-classed (a more specific version can be derived through inheritance), factored into smaller classes, or composed into larger classes <ref> [Booch94] </ref>. This work makes an appeal to the deeper structure of classes, in which the combination of two classes yields a class whose properties are the union of those of the constituent classes.
Reference: [Briand94] <author> L Briand, S Morasca, V Basili. </author> <title> "Defining and Validating High-Level Design Metrics," </title> <institution> Computer Science Technical Report CS-TR 3301, University of Maryland at College Park, </institution> <year> 1994. </year>
Reference-contexts: Ott is currently pursuing this line of investigation. 2.3.2 Module Interactions of Briand, Morasca, and Basili Briand, Morasca, and Basili define cohesion in design terms <ref> [Briand94, Briand96] </ref>. They view the elements of the module as its exported features, and a module as an abstract data type (ADT).
Reference: [Briand96] <author> Lionel Briand, Sandro Moasca, Victor Basili. </author> <title> "Property-Based Software Engineering Measurement." </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol 22 no 1, </volume> <month> January </month> <year> 1996. </year>
Reference-contexts: Ott is currently pursuing this line of investigation. 2.3.2 Module Interactions of Briand, Morasca, and Basili Briand, Morasca, and Basili define cohesion in design terms <ref> [Briand94, Briand96] </ref>. They view the elements of the module as its exported features, and a module as an abstract data type (ADT). <p> The contributions of [Baker90] [Fenton91] [Fenton94] [Melton90] [Kitchenham95] [Zuse91] have placed software measurement on a proper mathematical foundation. The work of [Bieman94] [Hitz95] <ref> [Briand96] </ref> are examples of modern software measures firmly grounded in measurement theory. We wish to apply the same rigor to the Bieman-Kang cohesion measure. The design of a measure should start with an understanding the entity being studied [Fenton94]. The entity in this research is a Java class.
Reference: [Briand97a] <author> Lionel Briand, John Daly, Jurgen Wust. </author> <title> "A Unified Framework for Cohesion Measurement in Object-Oriented Systems." </title> <type> Technical Report ISERN-97-05. </type> <institution> Kaiserlautern: Ger-many: Fraunhofer Institute for Experimental Software Engineering, </institution> <year> 1997. </year> <note> Also available at http://www.iese.fhg.de/ISERN/pub/isern.biblio.html. </note>
Reference: [Briand97b] <author> Lionel Briand, John Daly, Jurgen Wust. </author> <title> "A Unified Framework for Cohesion Measurement in Object-Oriented Systems." </title> <booktitle> Proceedings of the International Software Metrics Symposium (upcoming). </booktitle> <pages> 61 </pages>
Reference-contexts: The Bieman-Kang cohesion measures are shown to fulfill this empirical relation system. The authors make some interesting observations about cohesion measures in general <ref> [Briand97b] </ref>: * Indirect connections appear to be better indicators than direct connections for showing whether a class should be split. * A class having maximum cohesion as measured by direct connections would be required to possess direct connections between every element to every other element.
Reference: [Budd91] <author> Timothy Budd, </author> <title> An Introduction to Object Oriented Programming New York: </title> <publisher> Addison-Wesley Publishing, </publisher> <year> 1991. </year>
Reference-contexts: These concepts were first introduced in 1974 by Stevens, Constantine, Myers [Stevens74] as a way of evaluating the effective use of modules. Designers generally try to achieve "high" cohesion and "low" coupling for modules in their software products <ref> [Budd91] </ref>. A highly cohesive module is one which has a single basic function and is difficult to split [Bieman95]. Cohesion of elements in a module can be characterized in an rank scale of desirability, with functional and data cohesion ranking highest [Budd91] [Fenton91]. * Coincidental : Elements occur together in a <p> and "low" coupling for modules in their software products <ref> [Budd91] </ref>. A highly cohesive module is one which has a single basic function and is difficult to split [Bieman95]. Cohesion of elements in a module can be characterized in an rank scale of desirability, with functional and data cohesion ranking highest [Budd91] [Fenton91]. * Coincidental : Elements occur together in a module for no reason. * Logical : Elements occurring together do similar things but otherwise have no formal connection. * Temporal : Elements occurring together execute at the same time. * Communication : Elements occurring together share input or output data.
Reference: [Chambers96] <author> Craig Chambers, Jeffrey Dean, David Grove. </author> <title> "Whole-Program Optimization of Object-Oriented Languages." </title> <type> Technical Report 96-06-02, </type> <institution> University of Washington, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: The omission of dynamic method dispatch analysis therefore may result in higher cohesion measurements than are warranted. It is possible through static analysis to determine the domain of possible method calls and thereby eliminate the local reference [Dean96] <ref> [Chambers96] </ref>. 4.1.4 Type Resolution in Expressions Another difficulty in resolving qualified method names arises from the fact that an argument to a method call must be evaluated as to its type so that the method qualification and lookup can take place. The argument may itself be an expression.
Reference: [Chidamber94] <author> Shyman Chidamber and Chris Kemerer. </author> <title> "A Metrics Suite for Object Oriented Design." </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol 20 no 6, </volume> <month> June </month> <year> 1994. </year>
Reference-contexts: The reason a module exhibits low cohesion is that its public procedures and data have few interactions with one another. 2.3.3 The Lack of Cohesion Measure of Chidamber and Kemerer Chidamber and Kemerer <ref> [Chidamber94] </ref> were one of the first to formulate a measure of cohesion based strictly on objects. We take many ideas from this work. Objects are instantiations of classes. A class is considered a design for the production of an object.
Reference: [Churcher95] <author> Neville Churcher, Martin Shepperd. </author> <title> "Comments on a Metrics Suite for Object -Oriented Design," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol 21 no 3, </volume> <month> March </month> <year> 1995. </year>
Reference-contexts: One key question is what constitutes a method. In a critique of Chidamber and Kemerer, Churcher and Shepherd <ref> [Churcher95] </ref> consider whether the number of methods should be equal to those defined within the current class, or those inherited from superclasses. The former view emphasizes the functionality of the class. The latter view admits to its state space.
Reference: [Dean96] <author> Jeffrey Dean, Greg DeFouw, David Grove, Vassily Litvinov, Craig Chambers. </author> <title> "Vortex: An Optimizing Compiler for Object-Oriented Languages." </title> <booktitle> Proceedings of OOPSLA'96, </booktitle> <address> San Jose, CA, </address> <month> October, </month> <year> 1996. </year>
Reference-contexts: The omission of dynamic method dispatch analysis therefore may result in higher cohesion measurements than are warranted. It is possible through static analysis to determine the domain of possible method calls and thereby eliminate the local reference <ref> [Dean96] </ref> [Chambers96]. 4.1.4 Type Resolution in Expressions Another difficulty in resolving qualified method names arises from the fact that an argument to a method call must be evaluated as to its type so that the method qualification and lookup can take place. The argument may itself be an expression.
Reference: [Fenton91] <author> Norman Fenton. </author> <title> Software Metrics, A Rigorous Approach. </title> <publisher> London: Chapman and Hall, </publisher> <year> 1991. </year>
Reference-contexts: A highly cohesive module is one which has a single basic function and is difficult to split [Bieman95]. Cohesion of elements in a module can be characterized in an rank scale of desirability, with functional and data cohesion ranking highest [Budd91] <ref> [Fenton91] </ref>. * Coincidental : Elements occur together in a module for no reason. * Logical : Elements occurring together do similar things but otherwise have no formal connection. * Temporal : Elements occurring together execute at the same time. * Communication : Elements occurring together share input or output data. * <p> The approaches taken to measure cohesiveness of these kind of programs have generally tried to evaluate cohesion on a procedure by procedure basis. The notional measure is one of "functional strength" of a procedure, meaning the degree to which data and procedures contribute to performing the basic function <ref> [Fenton91] </ref>. 2.2.1 Program Slice Abstraction of Bieman and Ott Bieman and Ott [Bieman93][Bieman94] formulate a measure of functional cohesion on procedures based on a relation between output tokens (output variables) and program slices. A program slice is a set of program statements which include references to a particular program variable. <p> The contributions of [Baker90] <ref> [Fenton91] </ref> [Fenton94] [Melton90] [Kitchenham95] [Zuse91] have placed software measurement on a proper mathematical foundation. The work of [Bieman94] [Hitz95] [Briand96] are examples of modern software measures firmly grounded in measurement theory. We wish to apply the same rigor to the Bieman-Kang cohesion measure. <p> Data flow is normally used to resolve types in this case. 4.2 Class Size Another measure of importance to this research is the size of the class being measured. Size is an internal software attribute known to correlate with a number of structure measures <ref> [Fenton91] </ref>. If a relationship between cohesion and size can be shown, then other relationships may follow.
Reference: [Fenton94] <author> Norman Fenton. </author> <title> "Software Measurement: A Necessary Basis." </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol 20 no 3, </volume> <month> March </month> <year> 1994. </year>
Reference-contexts: There are two variants of class cohesion: Tight Class Cohesion (TCC) and Loose Class Cohesion (LCC). The Bieman-Kang cohesion measures were informally proposed in [Bieman95]. The research places the Bieman and Kang proposal on a more firm mathematical foundation by demonstrating the representation condition of the measure <ref> [Fenton94] </ref>. This requires that the numerical measure of cohesion does 1 not contradict any notional properties of the empirical nature of cohesion. A scale type for the measure is also derived. The original Bieman and Kang cohesion measure was applied to C++ programs. <p> The contributions of [Baker90] [Fenton91] <ref> [Fenton94] </ref> [Melton90] [Kitchenham95] [Zuse91] have placed software measurement on a proper mathematical foundation. The work of [Bieman94] [Hitz95] [Briand96] are examples of modern software measures firmly grounded in measurement theory. We wish to apply the same rigor to the Bieman-Kang cohesion measure. <p> The work of [Bieman94] [Hitz95] [Briand96] are examples of modern software measures firmly grounded in measurement theory. We wish to apply the same rigor to the Bieman-Kang cohesion measure. The design of a measure should start with an understanding the entity being studied <ref> [Fenton94] </ref>. The entity in this research is a Java class. Next, the notional, or intuitive, meaning of the attribute which is to be measured must be understood. The attribute studied here is class cohesion. <p> Size is an internal software attribute known to correlate with a number of structure measures [Fenton91]. If a relationship between cohesion and size can be shown, then other relationships may follow. Historically, program size has been measured in lines of non-comment source code (LOC) <ref> [Fenton94] </ref>. 28 While LOC is an absolute measure (because it is a bijection to the natural numbers), it suffers from a general failure to meet its representation condition. <p> Be sure to keep a separate count of the number of methods. 46 Chapter 6 An Experiment to Investigate the Relationship between Class Cohesion and Class Size A new measure should undergo a process of empirical validation <ref> [Fenton94] </ref> [Kitchenham95]. This kind of validation does not require that the measure be shown to correlate with some external attribute it is thought to affect. Rather, we wish to see whether cohesion values obtained through measurement of real programs are consistent with the values predicted by our model of cohesion. <p> Neither empirical relation system completely captures the degree to which a class can be decomposed without changing any code (factorability). The question remains, "Why are we doing this?" Fenton speaks of the need to apply Basili's Goal-Question-Metric (GQM) paradigm prior to measurement definition <ref> [Fenton94] </ref>. Clearly the term class cohesion means different and possibly conflicting things. One task for the research community is to discern these differences and define more directed measures.
Reference: [Gamma95] <author> Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides. </author> <title> Design Patterns. </title> <address> Reading MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Consider the following class TreeIterator, which is a package-only iterator object associated strictly with class Tree and its subclasses, and modeled after the iterator design pattern of <ref> [Gamma95] </ref>. package Tree; import java.util.Enumeration; import java.util.Vector; class TreeIterator implements Enumeration - private Tree tree; private Vector vector; private Enumeration iterator; TreeIterator (Tree t) - tree = t; vector = new Vector (tree.size ()); if (!tree.isEmpty ()) - tree.setRoot (); // set the current pointer to the root tree.preorder (vector); // <p> Measurements are computed by traversing the structure nodes of the parse tree and gathering or depositing information. An iterator-visitor object is defined for each measurement task. Celebes implements several families of iterator-visitors. The basic pattern is inspired by the iterator and visitor patterns of object-oriented design <ref> [Gamma95] </ref>. These can be extended or subclassed to add additional metrics capabilities. * The Counter iterator-visitor counts the number of structure nodes of a certain type. <p> Then a proper experiment could be set up to test the conventional wisdom that highly cohesive components (those with a single function) are the most reused. The advent of automatic code generation by integrated development environments (IDEs) and pattern writing of code from recipe books <ref> [Gamma95] </ref> has caused classes to acquire more coupling, subclass deeper inheritance hierarchies, and implement more varied interfaces than would be manageable with hand-written code. It would be interesting to see whether cohesion is higher in these cases (the hypothesis being that classes are much more specific in their purpose).
Reference: [Graybill94] <author> Franklin Graybill and Hariharan Iyer. </author> <title> Regression Analysis. </title> <address> Belmont CA: </address> <publisher> Duxbury Press, </publisher> <year> 1994. </year>
Reference: [Gosling96] <author> James Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <address> New York: </address> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference: [Hall86] <author> Marshall Hall Jr. </author> <title> Combinatorial Theory, Second Edition. </title> <address> New York: </address> <publisher> John Wiley, </publisher> <year> 1986. </year>
Reference-contexts: For example, P (4) = jf4g; f3+1g; f2+2g; f2+1+1g; f1+1+1+1gj = 5. The following theorem gives a recurrence for generating this sum [Bogart83] <ref> [Hall86] </ref>. The proof may be found in the references. <p> There is no known analytic solution to the recurrence of Theorem 1. The terms for each MIG would have to be calculated using the recurrence. The number of possible partitions over a 100-node MIG exceeds 190 million <ref> [Hall86] </ref>. Fortunately, few classes have that many methods. 3.7 Scale Type of the Measure Here we wish to demonstrate that the cohesion measures are ratio scale measures. To do this we need to show that a statement like A twice as cohesive as B remains meaningful under rescaling.
Reference: [Hitz95] <author> Martin Hitz, Behzad Montazeri. </author> <title> "Measuring Coupling and Cohesion in Object Oriented Systems." </title> <booktitle> Proceedings of the International Symposium on Applied Corporate Computing, </booktitle> <address> Oct 25 - 27, 1995. Monterrey Mexico, </address> <year> 1995 </year>
Reference-contexts: The contributions of [Baker90] [Fenton91] [Fenton94] [Melton90] [Kitchenham95] [Zuse91] have placed software measurement on a proper mathematical foundation. The work of [Bieman94] <ref> [Hitz95] </ref> [Briand96] are examples of modern software measures firmly grounded in measurement theory. We wish to apply the same rigor to the Bieman-Kang cohesion measure. The design of a measure should start with an understanding the entity being studied [Fenton94]. The entity in this research is a Java class.
Reference: [Hitz96] <author> Martin Hitz, Behzad Montazeri. </author> <title> "Chidamber and Kemerer's Metrics Suite: A Measurement Theory Perspective." </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol 22 no 4, </volume> <month> April </month> <year> 1996. </year>
Reference-contexts: The Chidamber and Kemerer approach, while exhibiting key ideas, fails to meet the basic representation requirements of an empirical relation system. This is one of the first requirements of measurement theory, so the LCOM measure cannot be used as such. Hitz and Montazeri <ref> [Hitz96] </ref> point out some examples where LCOM fails to show enough sensitivity to changes in method connection configurations, or shows too much. One example shows LCOM to have different values for a constant number of splits of a graph of method connections. <p> connection graph yield marginal changes in the LCOM measure. 6 2.3.4 Relative Strength Measure of Hitz and Montazeri Hitz and Montazeri propose an improvement to the LCOM measure of Chidamber and Kemerer by making it more sensitive to small changes in structure when the graph of method connections is complete <ref> [Hitz96] </ref>. The idea here is to measure the "connectivity of degree K", where K is the number of edges which must be removed in order to disconnect the graph. This would be done to distinguish "ties" of the kind which happen when LCOM = 1.
Reference: [Kruglinksi96] <author> David Kruglinksi, </author> <title> Inside Visual C++. </title> <address> Redmond WA: </address> <publisher> Microsoft Press, </publisher> <year> 1996. </year> <title> [Javacc97] "Javacc, The Java Compiler Compiler." </title> <type> version 0.6. </type> <institution> http://www.suntest.com/JavaCC/ Sun Microsystems Inc, </institution> <month> 19 Feb </month> <year> 1997. </year> <title> [Javasoft97] "Inner Classes Specification." http://java.sun.com/products/jdk/1.1/docs/guide/innerclasses/spec/innerclasses.doc.html Sun Microsystems, </title> <publisher> Inc. </publisher> <month> 4 Feb, </month> <year> 1997. </year> <month> 62 </month>
Reference: [Kang96a] <author> Byung-Kyoo Kang, James Bieman. </author> <title> "Design-level Cohesion Measures: Derivation, Compari--son, and Applications." </title> <institution> Computer Science Technical Report CS-96-104. Colorado State University, </institution> <year> 1996. </year>
Reference-contexts: This is advantageous if the code has yet to be implemented. Building on their earlier work, Kang and Bieman <ref> [Kang96a] </ref> [Kang96b] show how the relationship between pairs of output tokens can indicate the relative "strength" of a module. 4 An ordinal scale of cohesion measures is defined: Coincidental, Conditional, Iterative, Communicative, Sequential, and Functional.
Reference: [Kang96b] <author> Byung-Kyoo Kang, James Bieman. </author> <title> "Using Design Cohesion to Visualize, </title> <type> Quantify, </type> <institution> and Restructure Software." Computer Science Technical Report CS-96-103. Colorado State University, </institution> <year> 1996. </year>
Reference-contexts: This is advantageous if the code has yet to be implemented. Building on their earlier work, Kang and Bieman [Kang96a] <ref> [Kang96b] </ref> show how the relationship between pairs of output tokens can indicate the relative "strength" of a module. 4 An ordinal scale of cohesion measures is defined: Coincidental, Conditional, Iterative, Communicative, Sequential, and Functional. <p> Both DLC and DFC measure the intuitive "relatedness" of module components. These measures can identify modules that perform multiple functions having little or nothing to do with one another. These modules may be poorly designed and present good candidates for restructuring. In <ref> [Kang96b] </ref> Kang and Bieman show how design level cohesion can be visualized. They propose program transformations which decompose modules exhibiting low cohesion. DLC and DFC are cohesion measures applied to procedural programs.
Reference: [Kitchenham95] <author> Barbara Kitchenham, Shari Lawrence Pfleeger, Norman Fenton. </author> <title> "Towards a Framework for Software Measurement Validation," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol 21 no 12, </volume> <month> December </month> <year> 1995. </year>
Reference-contexts: The contributions of [Baker90] [Fenton91] [Fenton94] [Melton90] <ref> [Kitchenham95] </ref> [Zuse91] have placed software measurement on a proper mathematical foundation. The work of [Bieman94] [Hitz95] [Briand96] are examples of modern software measures firmly grounded in measurement theory. We wish to apply the same rigor to the Bieman-Kang cohesion measure. <p> Be sure to keep a separate count of the number of methods. 46 Chapter 6 An Experiment to Investigate the Relationship between Class Cohesion and Class Size A new measure should undergo a process of empirical validation [Fenton94] <ref> [Kitchenham95] </ref>. This kind of validation does not require that the measure be shown to correlate with some external attribute it is thought to affect. Rather, we wish to see whether cohesion values obtained through measurement of real programs are consistent with the values predicted by our model of cohesion.
Reference: [Lindholm96] <author> Tim Lindholm and Frank Yellin. </author> <title> The Java Virtual Machine Specification. </title> <address> New York: </address> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference-contexts: The Java Virtual Machine specification defines a canonical representation (mangling) of the fully qualified method name <ref> [Lindholm96] </ref>. Use of the canonical qualification in naming makes overloaded methods distinct in the name space of the Java program. In the work of Bieman and Kang [Bieman95], no distinction was made among overloaded methods. This vastly simplifies matters.
Reference: [Melton90] <author> A Melton, D Gustafson, J Bieman, A Baker, </author> <title> "Mathematical Perspective of Software Measures Research," </title> <journal> IEE Software Engineering Journal, </journal> <volume> vol 5 no 5, </volume> <year> 1990. </year> <title> [ObjectSpace97] "Java Generic Library (JGL version 1.1. http://www.objectspace.com/jgl/ Object Space Inc. </title> <month> Jan </month> <year> 1997. </year>
Reference-contexts: The contributions of [Baker90] [Fenton91] [Fenton94] <ref> [Melton90] </ref> [Kitchenham95] [Zuse91] have placed software measurement on a proper mathematical foundation. The work of [Bieman94] [Hitz95] [Briand96] are examples of modern software measures firmly grounded in measurement theory. We wish to apply the same rigor to the Bieman-Kang cohesion measure.
Reference: [Ott95] <author> Linda Ott, James Bieman, Byung-Kyoo Kang, Bindu Mehra. </author> <title> "Developing Measures of Class Cohesion for Object-Oriented Software." </title> <booktitle> Proceedings of the Annual Oregon Workshop on Software Metrics (AOWSM95), </booktitle> <year> 1995. </year>
Reference-contexts: The cohesion measure of a class refers to the difficulty of factoring the class into separate classes: the more cohesive a class, the more difficult it is to factor. 2.3.1 Class Slice Abstraction of Ott and Mehra Ott and Mehra <ref> [Ott95] </ref> extend the earlier work of Bieman and Ott that uses program slices to measure connectedness of class slices. Ott is currently pursuing this line of investigation. 2.3.2 Module Interactions of Briand, Morasca, and Basili Briand, Morasca, and Basili define cohesion in design terms [Briand94, Briand96].
Reference: [Pohl93] <author> Ira Pohl. </author> <title> C++ for C Programmers, Second Edition. </title> <address> Redwood City, CA: </address> <publisher> Benjamin Cummings, </publisher> <year> 1993. </year>
Reference-contexts: The interface construct declares fields and methods available to a client from an object implementing the interface. In Java, the basic language construct is a class, which consists of methods and instance variables. Unlike C++, there exist no free functions or fields. <ref> [Pohl93] </ref>. The only way to implement functionality is within a class. Consequently, the subject of measurement is the Java class construct. There are two Java language definitions currently in use. Version 1.1 of the Java Development System (JDK) supports inner classes, a construct useful for implementing helper classes.
Reference: [Ross85] <author> Kenneth Ross, Charles Wright. </author> <title> Discrete Mathematics. </title> <address> Englewood Cliffs NJ: </address> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference: [Rumbaugh91] <author> James Rumbaugh et al. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference: [Stevens74] <author> W Stevens, G Myers, L Constantine. </author> <title> "Structured Design," </title> <journal> IBM Systems Journal, </journal> <volume> vol 13, </volume> <pages> pp 115-139, </pages> <year> 1974. </year>
Reference-contexts: The programming paradigm used determines what is an element and what is a module. A closely related concept called coupling indicates the degree of interconnectedness between modules. These concepts were first introduced in 1974 by Stevens, Constantine, Myers <ref> [Stevens74] </ref> as a way of evaluating the effective use of modules. Designers generally try to achieve "high" cohesion and "low" coupling for modules in their software products [Budd91]. A highly cohesive module is one which has a single basic function and is difficult to split [Bieman95].
Reference: [Yourdon79] <author> E Yourdon and L Constantine. </author> <title> Structured Design. Fundamentals of a Discipline of Computer Program and System Design. </title> <address> Englewood Cliffs, </address> <publisher> NJ:Prentice Hall, </publisher> <year> 1979. </year>
Reference-contexts: Highly cohesive software modules have a basic function and are difficult to decompose. Uncohesive modules are marked by components whose presence is completely coincidental. Such components could just as well be located in another module. Many software engineering researchers have asserted the importance of high cohesion in software construction <ref> [Yourdon79] </ref>. Highly cohesive program components have better external attributes, such as number of faults found (reliability), number of components that can be used without modification (reusability), and cost of modification and enhancement (comprehensibility and maintainability).
Reference: [Zuse91] <author> Horst Zuse. </author> <title> Software Complexity, Measures and Methods New York: </title> <publisher> Walter de Gruyter, </publisher> <year> 1991. </year> <month> 63 </month>
Reference-contexts: The contributions of [Baker90] [Fenton91] [Fenton94] [Melton90] [Kitchenham95] <ref> [Zuse91] </ref> have placed software measurement on a proper mathematical foundation. The work of [Bieman94] [Hitz95] [Briand96] are examples of modern software measures firmly grounded in measurement theory. We wish to apply the same rigor to the Bieman-Kang cohesion measure.
References-found: 38

