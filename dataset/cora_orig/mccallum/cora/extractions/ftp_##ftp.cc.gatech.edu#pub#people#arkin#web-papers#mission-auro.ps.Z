URL: ftp://ftp.cc.gatech.edu/pub/people/arkin/web-papers/mission-auro.ps.Z
Refering-URL: http://www.cs.gatech.edu/aimosaic/robot-lab/mrl-online-publications.html
Root-URL: 
Email: doug@cc.gatech.edu, arkin@cc.gatech.edu  jonathan.m.cameron@jpl.nasa.gov  
Title: Autonomous Robots, [Volumn  Multiagent Mission Specification and Execution  
Author: DOUGLAS C. MACKENZIE, RONALD C. ARKIN JONATHAN M. CAMERON 
Keyword: Autonomous Robotics, Mission Specification, Visual Programming  
Address: Atlanta, GA 30332  MS 198-326, 4800 Oak Grove Drive, Pasadena, CA 91109  
Affiliation: Mobile Robot Laboratory, College of Computing, Georgia Institute of Technology,  Jet Propulsion Laboratory,  
Note: Number], 1-25 ([Volumn Year]) c [Volumn Year] Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  
Abstract: Specifying a reactive behavioral configuration for use by a multiagent team requires both a careful choice of the behavior set and the creation of a temporal chain of behaviors which executes the mission. This difficult task is simplified by applying an object-oriented approach to the design of the mission using a construction called an assemblage and a methodology called temporal sequencing. The assemblage construct allows building high level primitives which provide abstractions for the designer. Assemblages consist of groups of basic behaviors and coordination mechanisms that allow the group to be treated as a new coherent behavior. Upon instantiation, the assemblage is parameterized based on the specific mission requirements. Assemblages can be re-parameterized and used in other states within a mission or archived as high level primitives for use in subsequent projects. Temporal sequencing partitions the mission into discrete operating states with perceptual triggers causing transitions between those states. Several smaller independent configurations (assemblages) can then be created which each implement one state. The Societal Agent theory is presented as a basis for constructions of this form. The Configuration Description Language (CDL) is developed to capture the recursive composition of configurations in an architecture- and robot-independent fashion. The MissionLab system, an implementation based on CDL, supports the graphical construction of configurations using a visual editor. Various multiagent missions are demonstrated in simulation and on our Denning robots using these tools. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M.A. Arbib, A.J. Kfoury, and R.N. Moll. </author> <title> A Basis for Theoretical Computer Science. </title> <publisher> Springer-Verlag, </publisher> <address> NY, </address> <year> 1981. </year>
Reference-contexts: Temporal Sequencing Temporal sequencing [4] is a state-based coordination mechanism which uses a Finite State Automaton (FSA)[20], <ref> [1] </ref> to select one of several possible operating states based on the current state, the transition function, and perceptual triggers. Each state in the FSA denotes a particular member agent which is dominant when that state is active.
Reference: 2. <author> R.C. Arkin. </author> <title> Towards Cosmopolitan Robots: Intelligent Navigation of a Mobile Robot in Extended Manmade Environments. </title> <type> PhD dissertation, </type> <institution> University of Massachusetts, Department of Computer and Information Science, </institution> <year> 1987. </year> <type> COINS TR 87-80. </type>
Reference-contexts: A transition back to the Look for can state repeats the process. Cooperation The cooperative class of coordination manages the actions of members of the society to present the appearance and utility of a single coherent agent. Vector summation in the AuRA [3], <ref> [2] </ref> architecture is such a mechanism. The AuRA gain-based cooperation operator can Fig. 8. Vector Summation in AuRA be represented functionally as a weighted vector summation, as shown in Equation 7. <p> We Multiagent Mission Specification and Execution 21 Fig. 32. The completed scout mission with the robots occupying the objective in a diamond formation. now survey the important robot architectures with an eye towards their suitability as targets for CDL. The Autonomous Robot Architecture (AuRA)[3], <ref> [2] </ref> is the platform in common use in the Georgia Tech mobile robot lab and is the system from which the MissionLab toolset grew. AuRA is a hybrid system spanning the range from deliberative to reactive modes of execution.
Reference: 3. <author> R.C. Arkin. </author> <title> Motor schema-based mobile robot navigation. </title> <journal> The International Journal of Robotics Research, </journal> <volume> 8(4) </volume> <pages> 92-112, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: 1. Introduction Reactive behavior-based architectures <ref> [3] </ref>, [8] decompose a robot's control program into a collection of behaviors and coordination mechanisms with the overt, visible behavior of the robot arising from the emergent interactions of these behaviors. <p> A transition back to the Look for can state repeats the process. Cooperation The cooperative class of coordination manages the actions of members of the society to present the appearance and utility of a single coherent agent. Vector summation in the AuRA <ref> [3] </ref>, [2] architecture is such a mechanism. The AuRA gain-based cooperation operator can Fig. 8. Vector Summation in AuRA be represented functionally as a weighted vector summation, as shown in Equation 7.
Reference: 4. <author> R.C. </author> <title> Arkin and D.C. MacKenzie. Temporal coordination of perceptual algorithms for mobile robot navigation. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 10(3) </volume> <pages> 276-286, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Level c shows the various operating states present in each of the two fish to support the mating ritual. The linear chain of behaviors shown in Figure 1 can be represented as a Finite State Automaton (FSA) using the methods of Temporal Sequencing <ref> [4] </ref>. Temporal sequencing formalizes methods for partitioning a mission into discrete operating states and describing the transitions between states. The FSA is partitioned into the relevant male and female portions and distributed within the respective robots (fish). <p> Temporal Sequencing Temporal sequencing <ref> [4] </ref> is a state-based coordination mechanism which uses a Finite State Automaton (FSA)[20], [1] to select one of several possible operating states based on the current state, the transition function, and perceptual triggers.
Reference: 5. <author> T. Balch, G. Boone, T. Collins, H. Forbes, D. MacK enzie, and J. Santamara. </author> <title> Io, ganymede and callisto amultiagent robot trash-collecting team. </title> <journal> AI Magazine, </journal> <volume> 16(2) </volume> <pages> 39-51, </pages> <month> Summer </month> <year> 1995. </year>
Reference-contexts: Consider specification of a configuration implementing a janitorial task for a team of robots (e.g., 1994 AAAI mobile robot competition <ref> [5] </ref>). Specifically, each robot should wander around looking for empty soda cans, pick them up, wander around looking for a recycling basket, and then place the can into the basket. Figure 7 is a graphical representation of an FSA for such a robotic trash collector. <p> Add (A = myAgent; B = f1g) ; is equivalent to the earlier nested agents declaration. Notice the uniformity with usage of the in-line anonymous agents. Multiagent Mission Specification and Execution 9 Fig. 9. Three trash collecting robots from AAAI94 <ref> [5] </ref> It is important to be aware that each agent instantiated from a particular primitive is a unique entity, disjoint from all other instantiations of the primitive. <p> Example Janitor Configuration The use of CDL will now be further demonstrated by constructing an example robot configuration for the cleanup the office (or janitor) task using three robots. This task is similar to the 1994 AAAI mobile robot competition <ref> [5] </ref> where the robots retrieved soda cans and placed them near wastebaskets. Reconsider the trash collecting state-transition diagram Figure 7 from Section 2. Let's call this the cleanup agent.
Reference: 6. <author> Tucker Balch and Ronald C. Arkin. </author> <title> Motor-schema based formation control for multiagent robotic teams. </title> <booktitle> In Proc. 1995 International Conference on Multia-gent Systems, </booktitle> <pages> pages 10-16, </pages> <address> San Francisco, CA, </address> <year> 1995. </year>
Reference-contexts: Simulated Robot Scouting Mission A four robot scouting mission has been constructed and evaluated in simulation. A MoveInFormation behavior was created which causes the robot to move to a specified map location while maintaining formation with other robots <ref> [6] </ref>. The robots each have an assigned spot in the formation and know the relative locations of the other robots. Each robot computes where it should be located relative to the other robots, and the Maintain Formation behavior tries to keep it in position as the formation moves.
Reference: 7. <author> Daniel G. Bobrow and et. al. </author> <title> Common lisp object system. </title> <editor> In Guy L. Steele Jr., editor, </editor> <title> Common Lisp: </title> <booktitle> The Language, chapter 28, </booktitle> <pages> pages 770-864. </pages> <publisher> Digital Press, </publisher> <year> 1990. </year>
Reference-contexts: Snapshot of SAUSAGES simulation display after executing the mission shown in Figure 23. Notice the same general route was taken by the robot. Fig. 30. The state transition diagram for the scouting mission REX [22], [43] language all are based on Lisp <ref> [7] </ref>. These languages suffer from a co-mingling of the configuration with the specification of the primitives. They also bury hardware specific binding information within the implementations of individual primitives. This greatly increases the amount of effort necessary to change the configuration or to re-deploy it on other robots.
Reference: 8. <author> R.A. Brooks. </author> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> 2(1) </volume> <pages> 14-23, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: 1. Introduction Reactive behavior-based architectures [3], <ref> [8] </ref> decompose a robot's control program into a collection of behaviors and coordination mechanisms with the overt, visible behavior of the robot arising from the emergent interactions of these behaviors. <p> The process of determining this collection of active members (arbitration) can use a variety of techniques including spreading activation, assigning fixed priorities, or using relevancy metrics. Architectures using competition mechanisms include spreading activation nets [31], and the subsump-tion architecture <ref> [8] </ref>. [12] with three behaviors and two suppression nodes (labeled S). The design is that if behavior 3 has something to contribute, then it overwrites 6 MacKenzie, Arkin, and Cameron Fig. 6. Example Colony Architecture Network any outputs generated by behaviors 1 and 2. <p> The Robot Independent Programming Language (RIPL) from Sandia [34] is built on top of C++. The SmartyCat Agent Language (SAL) developed at Grumman [27], the Behavior Language (BL)[10] from MIT targeting the Subsumption architecture <ref> [8] </ref>, and Kaelbling's Multiagent Mission Specification and Execution 19 1. Robots in start location 2. Moving towards dest1 3. Robots at location dest1 4. Moving towards dest2 5. Robots nearing location dest2 6. Completed mission Fig. 28. <p> AuRA is a hybrid system spanning the range from deliberative to reactive modes of execution. In configurations generated by MissionLab, the human replaces the deliberative system by crafting a suitable behavioral assemblage which completes the desired task. The Subsumption Architecture <ref> [8] </ref> is probably the most widely known behavior-based mobile robot architecture. It uses a layering construction where layers embody individual competencies and new skills are added by adding new layers on top of the existing network. The layers can take control when appropriate by overriding layers below them.
Reference: 9. <author> R.A. Brooks. </author> <title> A robot that walks: Emergent behaviors from a carefully evolved network. </title> <journal> Neural Computation, </journal> <volume> 1(2) </volume> <pages> 253-262, </pages> <year> 1989. </year> <note> Also MIT AI Memo 1091. 24 MacKenzie, Arkin, and Cameron </note>
Reference-contexts: It uses a layering construction where layers embody individual competencies and new skills are added by adding new layers on top of the existing network. The layers can take control when appropriate by overriding layers below them. The subsumption architecture has been used to construct complicated mobile robots <ref> [9] </ref> as well as societies of robots [32], [33]. All coordination in subsumption occurs via prioritized competition, precluding any cooperative interaction between behaviors. Due to the lack of support for cooperative coordination in Subsumption, only a subset of the possible CDL configurations can be targeted to this architecture.
Reference: 10. <author> R.A. Brooks. </author> <title> The behavior language: User's guide. AI Memo 1227, </title> <publisher> MIT, </publisher> <year> 1990. </year>
Reference: 11. <author> Jonathan M. Cameron and Douglas C. MacKen-zie. </author> <title> MissionLab User Manual. </title> <institution> College of Computing, Georgia Institute of Technology, </institution> <note> Available via http://www.cc.gatech.edu/ai/robot-lab/research/MissionLab/mlab manual.ps.gz, Version 1.0 edition, </note> <month> May </month> <year> 1996. </year>
Reference-contexts: Within the main display area robots, obstacles, and other features are visible. The solid round black circles are obstacles. The three robots are moving actively gathering trash and the paths they have taken are shown as trails. For more details on MissionLab, see <ref> [11] </ref>. Configurations properly constrained to use only the available behaviors can be bound to the UGV architecture. In this case the SAUSAGES code generator is used. There are currently three available behaviors; move to goal, follow road, and teleoperate.
Reference: 12. <author> J. Connell. </author> <title> A colony architecture for an artificial creature. </title> <type> AI Tech Report 1151, </type> <institution> MIT, </institution> <year> 1989. </year>
Reference-contexts: The process of determining this collection of active members (arbitration) can use a variety of techniques including spreading activation, assigning fixed priorities, or using relevancy metrics. Architectures using competition mechanisms include spreading activation nets [31], and the subsump-tion architecture [8]. <ref> [12] </ref> with three behaviors and two suppression nodes (labeled S). The design is that if behavior 3 has something to contribute, then it overwrites 6 MacKenzie, Arkin, and Cameron Fig. 6. Example Colony Architecture Network any outputs generated by behaviors 1 and 2. <p> The robots start on the left edge of the lab and proceed to the dest1 point in line formation. They then continue to location dest2 using column formation. They are shown in there final positions, with the trails marking the path they each traversed. colony architecture <ref> [12] </ref> and Parker's ALLIANCE architecture [36], [37], [38], [39] are two examples. Connell's efforts with the can collecting robot demonstrated that a collection of behaviors can perform complex tasks. Parker's work went a step further to show that cooperation can also occur between robots without explicit coordination strategies.
Reference: 13. <author> J. Firby. </author> <title> Adaptive execution in complex dynamic worlds. </title> <institution> Computer Science Tech Report YALEU/CSD/RR 672, Yale, </institution> <month> January </month> <year> 1989. </year>
Reference-contexts: The UM-PRS system [26], [21], [14] is a general purpose reasoning system able to exploit opportunism as the robot moves through the environment. UM-PRS is important since it has been considered for inclusion as the behavioral controller in the UGV architecture. Reactive Action Packages <ref> [13] </ref> (RAPs) are intended to be used as a set of primitive actions by a deliberative planner. Several different methods for accomplishing an action will exist within a given RAP and at execution time, one of the methods is chosen as most applicable based on precondition tests.
Reference: 14. <author> Michael P. Georgeff and Amy L. Lansky. </author> <title> Reactive reasoning and planning. </title> <booktitle> In Proceedings AAAI Conference, </booktitle> <pages> pages 677-682, </pages> <year> 1987. </year>
Reference-contexts: In a SAUSAGES program behaviors are operations which move along a link in the plan. SAUSAGES is supported as a target architecture from CDL, allowing testing configurations constructed with this system on the SAUSAGES simulation system available from CMU. The UM-PRS system [26], [21], <ref> [14] </ref> is a general purpose reasoning system able to exploit opportunism as the robot moves through the environment. UM-PRS is important since it has been considered for inclusion as the behavioral controller in the UGV architecture.
Reference: 15. <author> Matthew W. Gertz, Roy A. Maxion, and Pradeep K. Khosla. </author> <title> Visual programming and hypermedia implementation within a distributed laboratory environment. </title> <journal> Intelligent Automation and Soft Computing, </journal> <volume> 1(1) </volume> <pages> 43-62, </pages> <year> 1995. </year>
Reference-contexts: The user selects items from a library of procedures and places them on the work area as icons (called glyphs). Connecting dataflows between the glyphs completes construction of the "program". The program can be executed and the results be displayed within the system. The Onika system [47], <ref> [15] </ref> from CMU is optimized for the rapid graphical construction of con trol programs for robot arms. It is tightly integrated with the Chimera real-time operating system, also from CMU.
Reference: 16. <author> J. Gowdy. </author> <title> SAUSAGES Users Manual. </title> <journal> Robotics Institute, </journal> <note> Carnegie Mellon, version 1.0 edition, </note> <month> February 8 </month> <year> 1991. </year> <title> SAUSAGES: A Framework for Plan Specification, Execution, and Monitoring. </title>
Reference-contexts: The action with the most votes is undertaken. DAMN grew out of a fine-grained alternative to the subsumption architecture [42]. The System for AUtonomous Specification, Acquisition, Generation, and Execution of Schemata (SAUSAGES)[17], <ref> [16] </ref> provides a specification 22 MacKenzie, Arkin, and Cameron language as well as run-time execution and monitoring support. A variant of SAUSAGES called MRPL is used in the ARPA Unmanned Ground Vehicles (UGV's). In a SAUSAGES program behaviors are operations which move along a link in the plan.
Reference: 17. <author> J. Gowdy. Sausages: </author> <title> Between planning and action. </title> <type> Technical Report Draft, </type> <institution> Robotics Institute, Carnegie Mellon, </institution> <year> 1994. </year>
Reference: 18. <author> Thomas C. Henderson. </author> <title> Logical behaviors. </title> <journal> Journal of Robotic Systems, </journal> <volume> 7(3) </volume> <pages> 309-336, </pages> <year> 1990. </year>
Reference-contexts: Similar to sensors, actuators are not present in a free configuration. Instead, output binding points are used to mark where the actuator will be connected during binding. The output binding point is a dataflow sink in the configuration. Perceptual modules function as virtual sensors <ref> [18] </ref>, [19] which extract semantically meaningful features from one or more sensation streams and generate as output a stream of features (individual percepts). Viewing perceptual modules as virtual sensors facilitates hardware-independent perception and task-oriented perceptual processing relevant to the current needs of the configuration.
Reference: 19. <author> Thomas C. Henderson and Esther Shilcrat. </author> <title> Logical sensor systems. </title> <journal> Journal of Robotic Systems, </journal> <volume> 1(2) </volume> <pages> 169-193, </pages> <year> 1984. </year>
Reference-contexts: Similar to sensors, actuators are not present in a free configuration. Instead, output binding points are used to mark where the actuator will be connected during binding. The output binding point is a dataflow sink in the configuration. Perceptual modules function as virtual sensors [18], <ref> [19] </ref> which extract semantically meaningful features from one or more sensation streams and generate as output a stream of features (individual percepts). Viewing perceptual modules as virtual sensors facilitates hardware-independent perception and task-oriented perceptual processing relevant to the current needs of the configuration.
Reference: 20. <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation, page 79. </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: The Finite State Automaton (FSA) ff is specified by the quadruple <ref> [20] </ref> (Q; ffi; q 0 ; F ) with * Q the set of states, fq 0 ; q 1 ; : : : ; q m g where each q i is mapped to a i . * ffi the transition function mapping the current state (q i ) to
Reference: 21. <author> Marcus J. Huber, Jaeho Lee, Patrick Kenny, and Ed-mund H. Durfee. </author> <title> UM-PRS V1.0 Programmer and User Guide. </title> <institution> Artificial Intelligence Laboratory, The University of Michigan, </institution> <month> 28 October </month> <year> 1993. </year>
Reference-contexts: In a SAUSAGES program behaviors are operations which move along a link in the plan. SAUSAGES is supported as a target architecture from CDL, allowing testing configurations constructed with this system on the SAUSAGES simulation system available from CMU. The UM-PRS system [26], <ref> [21] </ref>, [14] is a general purpose reasoning system able to exploit opportunism as the robot moves through the environment. UM-PRS is important since it has been considered for inclusion as the behavioral controller in the UGV architecture.
Reference: 22. <author> L. P. Kaelbling. </author> <title> Rex programmer's manual. </title> <type> Technical Note 381, </type> <institution> SRI International, </institution> <year> 1986. </year>
Reference-contexts: Snapshot of SAUSAGES simulation display after executing the mission shown in Figure 23. Notice the same general route was taken by the robot. Fig. 30. The state transition diagram for the scouting mission REX <ref> [22] </ref>, [43] language all are based on Lisp [7]. These languages suffer from a co-mingling of the configuration with the specification of the primitives. They also bury hardware specific binding information within the implementations of individual primitives.
Reference: 23. <author> L. P. Kaelbling. </author> <title> Goals as parallel program specifications. </title> <booktitle> In Proceedings AAAI Conference, </booktitle> <volume> volume 1, </volume> <pages> pages 60-65, </pages> <address> St. Paul, MN, </address> <year> 1988. </year>
Reference-contexts: This greatly increases the amount of effort necessary to change the configuration or to re-deploy it on other robots. REX does support semantic analysis to formally prove run-time properties [43] if a detailed environmental model is available. Another class of existing languages are logic based. Gapps <ref> [23] </ref>, [24] is a declarative language providing goals for an off-line planner which generates REX programs for execution. Multivalued logic is used to control the robot Flakey, where the control program takes the form of a fuzzy logic rule-based system.
Reference: 24. <author> L. P. Kaelbling and S. J. Rosenschein. </author> <title> Action and planning in embedded agents. </title> <booktitle> Robotics and Autonomous Systems, </booktitle> <volume> 6 </volume> <pages> 35-48, </pages> <year> 1990. </year> <title> Also in Designing Autonomous Agents: Theory and Practice from Biology to Engineering and Back, </title> <editor> P. Maes Editor, </editor> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: This greatly increases the amount of effort necessary to change the configuration or to re-deploy it on other robots. REX does support semantic analysis to formally prove run-time properties [43] if a detailed environmental model is available. Another class of existing languages are logic based. Gapps [23], <ref> [24] </ref> is a declarative language providing goals for an off-line planner which generates REX programs for execution. Multivalued logic is used to control the robot Flakey, where the control program takes the form of a fuzzy logic rule-based system.
Reference: 25. <author> B. Lee and A.R. Hurson. </author> <title> Dataflow architectures and multithreading. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 27-39, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: The configuration from Figure 23 executing in the MissionLab simulator. The two circles are landmarks in the map overlay which were not used during this mission. of the configuration as its output. CNL is a hybrid dataflow language <ref> [25] </ref> using large grain parallelism where the atomic units are arbitrary C++ functions. CNL adds dataflow extensions to C++ which eliminate the need for users to include communication code. The output of the CNL compiler is a C++ file which is compiled into a robot executable.
Reference: 26. <author> Jaeho Lee, Marcus J. Huber, Edmund H. Durfee, and Patrick G. Kenny. UM-PRS: </author> <title> An implementation of the procedure reasoning system for multirobot applications. </title> <booktitle> In Proceedings AIAA/NASA Conference on Intelligent Robots in Field, Factory, Service, and Space (CIRFFSS '94), </booktitle> <year> 1994. </year>
Reference-contexts: In a SAUSAGES program behaviors are operations which move along a link in the plan. SAUSAGES is supported as a target architecture from CDL, allowing testing configurations constructed with this system on the SAUSAGES simulation system available from CMU. The UM-PRS system <ref> [26] </ref>, [21], [14] is a general purpose reasoning system able to exploit opportunism as the robot moves through the environment. UM-PRS is important since it has been considered for inclusion as the behavioral controller in the UGV architecture.
Reference: 27. <author> Willie Lim. </author> <title> Sal a language for developing an agent-based architecture for mobile robots. </title> <booktitle> In Proceedings SPIE Conference on Mobile Robots VII, </booktitle> <pages> pages 285-296, </pages> <address> Boston, MA., </address> <year> 1992. </year>
Reference-contexts: Related Work There are many robot programming languages with which CDL must compete, but several are rather loosely defined extensions to standard programming languages. The Robot Independent Programming Language (RIPL) from Sandia [34] is built on top of C++. The SmartyCat Agent Language (SAL) developed at Grumman <ref> [27] </ref>, the Behavior Language (BL)[10] from MIT targeting the Subsumption architecture [8], and Kaelbling's Multiagent Mission Specification and Execution 19 1. Robots in start location 2. Moving towards dest1 3. Robots at location dest1 4. Moving towards dest2 5. Robots nearing location dest2 6. Completed mission Fig. 28.
Reference: 28. <author> Damian M. Lyons. </author> <title> Representing and analyzing action plans as networks of concurrent processes. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 9(3) </volume> <pages> 241-256, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The computational model that the RS language embodies is rigorously defined, facilitating formal descriptions of complex robotic systems. CDL expands on the concept of recursive composition of sensorimotor behaviors, apparent here in the assemblage construct. The successor to RS is called RS-L3 <ref> [28] </ref> and combines RS with ideas from the Discrete Event Systems (DES)[41], [40] community. DES models systems as finite state automaton where the perception-action cycle is broken into discrete events to simplify modeling.
Reference: 29. <author> Damian M. Lyons and M. A. Arbib. </author> <title> A formal model of computation for sensory-based robotics. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> 5(3) </volume> <pages> 280-293, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: The Robot Schemas (RS) architecture <ref> [29] </ref> is based on the port automata model of computation. Primitive sensorimotor behaviors are called basic schemas and a group of schemas can be interconnected to form an assemblage, which is treated as a schema in subsequent constructions. The assemblage mechanism facilitates information hiding, modularity, and incremental development.
Reference: 30. <author> P. Maes. </author> <title> The dynamics of action selection. </title> <booktitle> In Proceedings Eleventh International Joint Conference on Artificial Intelligence, IJCAII-89, </booktitle> <volume> volume 2, </volume> <pages> pages 991-997, </pages> <year> 1989. </year>
Reference-contexts: Parker's work went a step further to show that cooperation can also occur between robots without explicit coordination strategies. Other researchers have evaluated certain types of coordination strategies. Maes has used spreading activation [31], <ref> [30] </ref> to arbitrate which behaviors are allowed to control the system and to interject goals into reactive systems.
Reference: 31. <author> P. Maes. </author> <title> Situated agents can have goals. </title> <booktitle> Robotics and Autonomous Systems, </booktitle> <volume> 6 </volume> <pages> 49-70, </pages> <year> 1990. </year> <title> Also in Designing Autonomous Agents: Theory and Practice from Biology to Engineering and Back, </title> <editor> P. Maes Editor, </editor> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: The process of determining this collection of active members (arbitration) can use a variety of techniques including spreading activation, assigning fixed priorities, or using relevancy metrics. Architectures using competition mechanisms include spreading activation nets <ref> [31] </ref>, and the subsump-tion architecture [8]. [12] with three behaviors and two suppression nodes (labeled S). The design is that if behavior 3 has something to contribute, then it overwrites 6 MacKenzie, Arkin, and Cameron Fig. 6. Example Colony Architecture Network any outputs generated by behaviors 1 and 2. <p> Parker's work went a step further to show that cooperation can also occur between robots without explicit coordination strategies. Other researchers have evaluated certain types of coordination strategies. Maes has used spreading activation <ref> [31] </ref>, [30] to arbitrate which behaviors are allowed to control the system and to interject goals into reactive systems.
Reference: 32. <author> M. J. Mataric. </author> <title> Designing emergent behaviors: From local interactions to collective intelligence. </title> <booktitle> In Proceedings From Animals to Animats, Second International Conference on Simulation of Adaptive Behavior (SAB92). </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: The layers can take control when appropriate by overriding layers below them. The subsumption architecture has been used to construct complicated mobile robots [9] as well as societies of robots <ref> [32] </ref>, [33]. All coordination in subsumption occurs via prioritized competition, precluding any cooperative interaction between behaviors. Due to the lack of support for cooperative coordination in Subsumption, only a subset of the possible CDL configurations can be targeted to this architecture.
Reference: 33. <author> M.J. Mataric. </author> <title> Minimizing complexity in controlling a mobile robot population. </title> <booktitle> In Proceedings 1992 IEEE International Conference on Robotics and Automation, </booktitle> <address> Nice, France, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: The layers can take control when appropriate by overriding layers below them. The subsumption architecture has been used to construct complicated mobile robots [9] as well as societies of robots [32], <ref> [33] </ref>. All coordination in subsumption occurs via prioritized competition, precluding any cooperative interaction between behaviors. Due to the lack of support for cooperative coordination in Subsumption, only a subset of the possible CDL configurations can be targeted to this architecture.
Reference: 34. <author> David J. Miller and R. Charleene Lennox. </author> <title> An object-oriented environment for robot system architectures. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 1, </volume> <pages> pages 352-361, </pages> <address> Cincin-nati, OH, </address> <year> 1990. </year>
Reference-contexts: Figure 28 shows a sequence of photographs of the robots executing this mission. 7. Related Work There are many robot programming languages with which CDL must compete, but several are rather loosely defined extensions to standard programming languages. The Robot Independent Programming Language (RIPL) from Sandia <ref> [34] </ref> is built on top of C++. The SmartyCat Agent Language (SAL) developed at Grumman [27], the Behavior Language (BL)[10] from MIT targeting the Subsumption architecture [8], and Kaelbling's Multiagent Mission Specification and Execution 19 1. Robots in start location 2. Moving towards dest1 3. Robots at location dest1 4.
Reference: 35. <author> M. Minsky. </author> <title> The Society of Mind. </title> <publisher> Simon and Schuster, </publisher> <address> New York, </address> <year> 1986. </year>
Reference-contexts: In each of these example societies, the components are physical objects such as animals or humans. Each buffalo, goose, ant and human can be thought of as possessing a behavior-based controller consisting of a society of agents (cf. <ref> [35] </ref>). This leads to the view of a flock of geese as a huge society with thousands of interacting agents. Recognizing each individual primitive behavior as an autonomous agent is generally intuitive. <p> In answer, one can easily view the inputs to the function as the stimulus and the computed output from this stimulus as the response. Therefore we expand the definition of an agent presented in Minsky's "Society of Mind" <ref> [35] </ref> to encompass all situated computable functions. For the function to be situated requires that the inputs are not simple constants but, in fact, dynamic dataflows providing temporally varying stimuli over the lifetime of the agent in response to environmental changes. 2.2.
Reference: 36. <author> Lynne E. Parker. </author> <title> Adaptive action selection for cooperative agent teams. </title> <booktitle> In Proceedings of 2nd International conference on Simulation of Adaptive Behavior, number 92 in SAB, </booktitle> <address> Honolulu, HA, </address> <year> 1992. </year>
Reference-contexts: They then continue to location dest2 using column formation. They are shown in there final positions, with the trails marking the path they each traversed. colony architecture [12] and Parker's ALLIANCE architecture <ref> [36] </ref>, [37], [38], [39] are two examples. Connell's efforts with the can collecting robot demonstrated that a collection of behaviors can perform complex tasks. Parker's work went a step further to show that cooperation can also occur between robots without explicit coordination strategies.
Reference: 37. <author> Lynne E. Parker. </author> <title> Local versus global control laws for cooperative agent teams. </title> <type> Technical Report AI Memo No. 1357, </type> <institution> MIT, </institution> <year> 1992. </year>
Reference-contexts: They then continue to location dest2 using column formation. They are shown in there final positions, with the trails marking the path they each traversed. colony architecture [12] and Parker's ALLIANCE architecture [36], <ref> [37] </ref>, [38], [39] are two examples. Connell's efforts with the can collecting robot demonstrated that a collection of behaviors can perform complex tasks. Parker's work went a step further to show that cooperation can also occur between robots without explicit coordination strategies.
Reference: 38. <author> Lynne E. Parker. </author> <title> A performance-based architecture for heterogeneous, situated agent cooperation. </title> <booktitle> In AAAI-1992 Workshop on Cooperation Among Heterogeneous Intelligent Systems, </booktitle> <address> San Jose, CA, </address> <year> 1992. </year>
Reference-contexts: They then continue to location dest2 using column formation. They are shown in there final positions, with the trails marking the path they each traversed. colony architecture [12] and Parker's ALLIANCE architecture [36], [37], <ref> [38] </ref>, [39] are two examples. Connell's efforts with the can collecting robot demonstrated that a collection of behaviors can perform complex tasks. Parker's work went a step further to show that cooperation can also occur between robots without explicit coordination strategies. Other researchers have evaluated certain types of coordination strategies.
Reference: 39. <author> Lynne E. Parker. </author> <title> Heterogeneous Multi-Robot Cooperation. </title> <type> PhD dissertation, </type> <institution> MIT, Department of Electrical Engineering and Computer Science, </institution> <year> 1994. </year>
Reference-contexts: They then continue to location dest2 using column formation. They are shown in there final positions, with the trails marking the path they each traversed. colony architecture [12] and Parker's ALLIANCE architecture [36], [37], [38], <ref> [39] </ref> are two examples. Connell's efforts with the can collecting robot demonstrated that a collection of behaviors can perform complex tasks. Parker's work went a step further to show that cooperation can also occur between robots without explicit coordination strategies. Other researchers have evaluated certain types of coordination strategies.
Reference: 40. <author> P.J. Ramadge and W.M. Wonham. </author> <title> Supervisory control of a class of discrete event processes. </title> <journal> SIAM J. Control Optimization, </journal> <volume> 25(1) </volume> <pages> 206-230, </pages> <year> 1987. </year>
Reference-contexts: CDL expands on the concept of recursive composition of sensorimotor behaviors, apparent here in the assemblage construct. The successor to RS is called RS-L3 [28] and combines RS with ideas from the Discrete Event Systems (DES)[41], <ref> [40] </ref> community. DES models systems as finite state automaton where the perception-action cycle is broken into discrete events to simplify modeling. RS-L3 is able to capture the specification of a robot control program and the situational expectations, allowing analysis of the system as a whole.
Reference: 41. <author> P.J. Ramadge and W.M. Wonham. </author> <title> The control of discrete event systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <address> 77-1(1):81-97, </address> <month> January </month> <year> 1989. </year>
Reference: 42. <author> J.K. Rosenblatt and D.W. Payton. </author> <title> A fine-grained alternative to the subsumption architecture for mobile robot control. </title> <booktitle> In IEEE INNS International Joint Conference on Neural Networks, </booktitle> <volume> volume 2, </volume> <pages> pages 317-323, </pages> <year> 1989. </year>
Reference-contexts: Each behavior has a number of votes available and is able to allocate them to the available actions. The action with the most votes is undertaken. DAMN grew out of a fine-grained alternative to the subsumption architecture <ref> [42] </ref>. The System for AUtonomous Specification, Acquisition, Generation, and Execution of Schemata (SAUSAGES)[17], [16] provides a specification 22 MacKenzie, Arkin, and Cameron language as well as run-time execution and monitoring support. A variant of SAUSAGES called MRPL is used in the ARPA Unmanned Ground Vehicles (UGV's).
Reference: 43. <author> S.J. </author> <title> Rosenschein and L.P. Kaelbling. The synthesis of digital machines with provable epistemic properties. </title> <type> Technical Note 412, </type> <institution> SRI International, </institution> <address> Menlo Park, California, </address> <month> April </month> <year> 1987. </year> <title> Multiagent Mission Specification and Execution 25 </title>
Reference-contexts: Snapshot of SAUSAGES simulation display after executing the mission shown in Figure 23. Notice the same general route was taken by the robot. Fig. 30. The state transition diagram for the scouting mission REX [22], <ref> [43] </ref> language all are based on Lisp [7]. These languages suffer from a co-mingling of the configuration with the specification of the primitives. They also bury hardware specific binding information within the implementations of individual primitives. <p> They also bury hardware specific binding information within the implementations of individual primitives. This greatly increases the amount of effort necessary to change the configuration or to re-deploy it on other robots. REX does support semantic analysis to formally prove run-time properties <ref> [43] </ref> if a detailed environmental model is available. Another class of existing languages are logic based. Gapps [23], [24] is a declarative language providing goals for an off-line planner which generates REX programs for execution.
Reference: 44. <author> A. Saffiotti, Kurt Konolige, and E Ruspini. </author> <title> A mul-tivalued logic approach to integrating planning and control. </title> <type> Technical Report 533, </type> <institution> SRI Artificial Intelligence Center, </institution> <address> Menlo Park, California, </address> <year> 1993. </year>
Reference-contexts: Multivalued logic is used to control the robot Flakey, where the control program takes the form of a fuzzy logic rule-based system. Multivalued logic also has been used to analyze how behaviors combine <ref> [44] </ref>. Given that each behavior has an explicit applica Fig. 31. The mission executing in the MissionLab simulator.
Reference: 45. <author> Stanley A. Schneider, Vincent W. Chen, and Gerardo Pardo-Castellote. </author> <title> The controlshell component-based real-time programming system. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 2381-2388, </pages> <year> 1995. </year>
Reference-contexts: Once programs are constructed, they can be saved to a library for later retrieval and deployment, or executed immediately. Onika includes a simulation system for evaluating control programs targeted for robot arms, but it does not include support for simulating or commanding mobile robots. ControlShell <ref> [45] </ref> is a commercial graphical programming toolset from Real-Time Innovations used to construct real-time control programs. It is very similar in presentation to the Engineering level of Onika, having a similar schematic-like look and feel.
Reference: 46. <author> L. Spector. </author> <title> Supervenience in Dynamic-World Planning. </title> <type> PhD dissertation, </type> <institution> University of Maryland, Department of Computer Science, </institution> <year> 1992. </year> <note> Also Tech Report CS-TR-2899 or UMIACS-TR-92-55. </note>
Reference-contexts: Several different methods for accomplishing an action will exist within a given RAP and at execution time, one of the methods is chosen as most applicable based on precondition tests. Each RAP coordinates itself until failure or success when the planner regains control. Supervenience <ref> [46] </ref> is a theory of abstraction defining a hierarchy where higher levels are more abstract with respect to their "distance from the world". Lower levels represent the world in greater detail and perhaps more correctly while higher levels represent the world more abstractly, possibly allowing erroneous beliefs to exist.
Reference: 47. <author> David B. Stewart and P.K. Khosla. </author> <title> Rapid development of robotic applications using component-based real-time software. </title> <booktitle> In Proc. Intelligent Robotics and Systems (IROS 95), </booktitle> <volume> volume 1, </volume> <pages> pages 465-470. </pages> <publisher> IEEE/RSJ, IEEE Press, </publisher> <year> 1995. </year>
Reference-contexts: The user selects items from a library of procedures and places them on the work area as icons (called glyphs). Connecting dataflows between the glyphs completes construction of the "program". The program can be executed and the results be displayed within the system. The Onika system <ref> [47] </ref>, [15] from CMU is optimized for the rapid graphical construction of con trol programs for robot arms. It is tightly integrated with the Chimera real-time operating system, also from CMU.
Reference: 48. <author> N. Tinbergen. </author> <title> The Study of Instinct. </title> <publisher> Oxford University Press, </publisher> <address> London, </address> <note> second edition, </note> <year> 1969. </year>
Reference-contexts: The construction and functionality of the Georgia Tech Mission 2 MacKenzie, Arkin, and Cameron Fig. 1. Sexual behavior of the three-spined stickleback, after <ref> [48] </ref> Lab software environment, based upon this procedure, is documented in this article. Support for users in the various stages of mission development (e.g., behavior implementation, assemblage construction, and mission specification) is provided. <p> All of this serves to abstract the group of soldiers into a "squad", a high-level agent which is as unified and concrete as an individual soldier. As a second example of complex agents consider the well-documented sexual behavior of the three-spined stickleback <ref> [48] </ref> shown in Figure 1. As the schematic shows, the sexual behavior involves a complex temporal chain of behaviors which transcends the individual male and female fish. The arrival of a female showing the "ready to spawn" Multiagent Mission Specification and Execution 3 Fig. 2.

References-found: 48

