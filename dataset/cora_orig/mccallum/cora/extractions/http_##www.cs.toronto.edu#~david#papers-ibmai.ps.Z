URL: http://www.cs.toronto.edu/~david/papers-ibmai.ps.Z
Refering-URL: http://www.cs.toronto.edu/~david/papers.html
Root-URL: http://www.cs.toronto.edu
Title: WAM Based Efficient Implementation of Logic Programming Languages|Final Report Research team:  
Author: Adriana Jergova, Ludek Matyska, Petr Mejzlik, Vaclav Racansky, David Toman, Jiri Zlatuska 
Date: September, 1, 1992  
Abstract-found: 0
Intro-found: 1
Reference: [9] <author> Borger, E.: </author> <title> A Logical Operational Semantics of Full Prolog, Part I, </title> <booktitle> Proc. </booktitle> <address> CSL'89, </address> <publisher> Springer LNCS 440, </publisher> <year> 1990. </year>
Reference: [10] <author> Borger, E.: </author> <title> A Logical Operational Semantics of Full Prolog, Part II, </title> <booktitle> Proc. </booktitle> <address> MFCS'90, </address> <publisher> Springer LNCS 452, </publisher> <year> 1990. </year>
Reference: [11] <author> Borger, E., Rosenzweig D.: </author> <title> WAM Algebras|A Mathematical Study of Implementation, part II, </title> <institution> CSE-TR-88-91, Univ. Michigan Dept. of CSEE, </institution> <year> 1991. </year>
Reference-contexts: Compiled Unification # # Indexing of Procedures Variables, Global data storage # # Full WAM instruction set and how to get it # Code sharing and database updates # WAM data structures All the necessary transformations are formally described in [7] except the last one: this may be found in <ref> [11] </ref> (this paper is more wide: it covers the whole transition from abstract Prolog definition to WAM, but it converts all the structures to the WAM implementation level immediately on the beginning. 7 That is not necessary and in many cases very tricky (e.g., the manipulation with the variables).
Reference: [12] <author> Debray, S. K.: </author> <title> Register Allocation in a Prolog Machine, </title> <booktitle> Symposium on Logic Programming, </booktitle> <pages> 267-275, </pages> <publisher> IEEE, </publisher> <year> 1986. </year>
Reference: [13] <author> Even, S.: </author> <title> Graph Algorithms, </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Mary-land, </address> <year> 1979, </year> <pages> 223-224. 9 </pages>
Reference: [14] <author> Gurievich, Y.: </author> <title> Evolving Algebras. A Tutorial Introduction. </title> <journal> Bull. </journal> <volume> EATCS 2, </volume> <year> 1991. </year>
Reference: [15] <author> Jaffar, J., Lassez, J.-L.: </author> <title> Constraint Logic Programming. </title> <booktitle> In Proc. 14th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> 111-119, </pages> <address> Munchen, </address> <publisher> ACM Press, </publisher> <year> 1987. </year>
Reference: [16] <author> Jaffar, J., Michaylov, S., Stuckey, P. J., Yap, R. H. C.: </author> <title> The CLP(R) Language and System. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 14(3), </volume> <pages> 339-395, </pages> <year> 1992. </year>
Reference: [17] <author> Janssens, G., Demoen, B. and Marten, A.: </author> <title> Improving the Register Allocation in WAM by Reordering Unification, </title> <booktitle> Proc. 5th Int. Conf. Symp. Logic Programming, </booktitle> <pages> 1388-1402, </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1988. </year>
Reference: [18] <author> Kurosawa, S. A. K. and Kiriyama, K.: </author> <title> A new Optimization Technique for a Prolog Compiler, </title> <publisher> IEEE COMPCON'86, </publisher> <address> San Francisco, CA, 241-245, </address> <publisher> Computer Society Press, </publisher> <address> Rockville, Maryland, </address> <year> 1986. </year>
Reference: [19] <author> Warren, D. H. D.: </author> <title> An Abstract Prolog Instruction Set, </title> <type> Tech. Report 309, </type> <institution> SRI International, AI Center, Palo Alto, </institution> <year> 1983. </year> <month> 10 </month>
References-found: 11

