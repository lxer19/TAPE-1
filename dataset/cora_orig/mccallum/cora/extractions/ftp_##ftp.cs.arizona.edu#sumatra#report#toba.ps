URL: ftp://ftp.cs.arizona.edu/sumatra/report/toba.ps
Refering-URL: http://www.cs.arizona.edu/sumatra/toba/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Toba: Java For Applications A Way Ahead of Time (WAT) Compiler  
Author: Todd A. Proebsting Gregg Townsend Patrick Bridges John H. Hartman Tim Newsham Scott A. Watterson 
Note: times faster than interpreted and Just-In-Time compiled applications.  
Address: 1  
Affiliation: The University of Arizona  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [ADH + 89] <author> Russ Atkinson, Alan J. Demers, Carl Hauser, Christian Jacobi, Peter Kessler, and Mark Weiser. </author> <title> Experiences creating a portable Cedar. </title> <address> pages 322-329, </address> <year> 1989. </year>
Reference-contexts: Compiling higher-level languages to C is not new. Many language systems leverage existing compilers and use C as an intermediate language in the compilation process. Systems for Smalltalk [Git94], SR [And82], Scheme [Bar89], Icon [Wal91], Forth [EM96], SML [TAL90], Pascal [Gil90], Cedar <ref> [ADH + 89] </ref>, and Fortran [FGMS90] are well known. For traditionally compiled languages like Pascal and Fortran, translation to C improved portability. For Scheme, Forth, and Icon, translation removed interpretation overhead. Similarly, Toba removes interpretation overhead from Java programs.
Reference: [And82] <author> G. R. Andrews. </author> <title> The distributed programming language SRmechanisms, design and implementation. </title> <journal> SoftwarePractice and Experience, </journal> <volume> 12 </volume> <pages> 719-753, </pages> <year> 1982. </year>
Reference-contexts: Compiling higher-level languages to C is not new. Many language systems leverage existing compilers and use C as an intermediate language in the compilation process. Systems for Smalltalk [Git94], SR <ref> [And82] </ref>, Scheme [Bar89], Icon [Wal91], Forth [EM96], SML [TAL90], Pascal [Gil90], Cedar [ADH + 89], and Fortran [FGMS90] are well known. For traditionally compiled languages like Pascal and Fortran, translation to C improved portability. For Scheme, Forth, and Icon, translation removed interpretation overhead.
Reference: [And96] <author> Yukio Andoh. j2c. </author> <note> URL: http://www.webcity.co.jp/info/andoh/java/j2c.html, 1996. </note>
Reference-contexts: For traditionally compiled languages like Pascal and Fortran, translation to C improved portability. For Scheme, Forth, and Icon, translation removed interpretation overhead. Similarly, Toba removes interpretation overhead from Java programs. Several other projects for compiling Java bytecodes to C are currently underway. j2c <ref> [And96] </ref> is a restricted byte-code to C compiler, currently ported to several platforms. j2c (version 1 beta 5) does not support threads, monitors, or network resources. In addition, native routines cannot throw exceptions in j2c. Toba does not have these restrictions.
Reference: [Bar84] <author> J.G.P. Barnes. </author> <title> Programming in Ada. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1984. </year> <note> ISBN 0-201-13799-2. </note>
Reference-contexts: As an optimization, Toba omits the switch wrapper in the absence of exception handling blocks and indirect jumps. at removing these. 4.2 Exception Handling The Java Virtual Machine supports exception handling in a manner similar to Ada <ref> [Bar84] </ref> or C++ [Str86]. Exceptions are thrown, either implicitly or explicitly, and are caught by the closest matching exception handler. Exceptions that cannot be caught in a procedure require the JVM to unwind the call stack and re-throw the exception in the caller's environment.
Reference: [Bar89] <author> Joel F. Bartlett. </author> <title> Scheme!C a portable Scheme-to-C compiler. </title> <type> Technical Report DEC-WRL-89-1, </type> <institution> Digital Equipment Corporation, Western Research Lab, </institution> <year> 1989. </year>
Reference-contexts: Compiling higher-level languages to C is not new. Many language systems leverage existing compilers and use C as an intermediate language in the compilation process. Systems for Smalltalk [Git94], SR [And82], Scheme <ref> [Bar89] </ref>, Icon [Wal91], Forth [EM96], SML [TAL90], Pascal [Gil90], Cedar [ADH + 89], and Fortran [FGMS90] are well known. For traditionally compiled languages like Pascal and Fortran, translation to C improved portability. For Scheme, Forth, and Icon, translation removed interpretation overhead. Similarly, Toba removes interpretation overhead from Java programs.
Reference: [BW88] <author> Hans Boehm and Mark Weiser. </author> <title> Garbage collection in an uncooperative environment. </title> <journal> SoftwarePractice and Experience, </journal> <pages> pages 807-820, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: Toba is a surprisingly small system: the translator is only 4000 lines of Java; the garbage collector is a modestly-altered version of the freely available Boehm-Demers-Weiser conservative collector <ref> [BW88] </ref>; the threads package is built on top of Solaris threads; the run-time library is only 5000 lines of C; and the API routines are simply translations of Sun's API class files. <p> Static-variable accesses include checks of the initialization flag. Often, these checks are not needed. Toba omits the checks for classes that have no initialization routine. 5 Garbage Collection Toba's garbage collector is based on the freely-available Boehm-Demers-Weiser (BDW) conservative garbage collector <ref> [BW88] </ref>. A conservative collector treats every register and word of allocated memory as a potential pointer and traces all memory reached from these pointers. Therefore, the BDW collector does not need type information for the memory it manages. This frees Toba and native routine developers from concerns about memory management.
Reference: [DDG + 96] <author> Jeffrey Dean, Greg DeFouw, David Grove, Vassily Litvinov, and Craig Chambers. </author> <title> Vortex: An optimizing compiler for object-oriented languages. </title> <booktitle> In Proceedings of OOPSLA'96, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: In addition, native routines cannot throw exceptions in j2c. Toba does not have these restrictions. Vortex <ref> [DDG + 96] </ref> is another project that compiles Java bytecodes to C. Vortex provides front ends for C++, Cecil, Modula-3, and Java. These languages are compiled to a common internal representation, and C code is generated from this representation. The Vortex project studies the effectiveness of optimizations for object-oriented languages.
Reference: [EM96] <author> M. Anton Ertl and Martin Maierhofer. </author> <title> Translating Forth to efficient C. </title> <year> 1996. </year>
Reference-contexts: Compiling higher-level languages to C is not new. Many language systems leverage existing compilers and use C as an intermediate language in the compilation process. Systems for Smalltalk [Git94], SR [And82], Scheme [Bar89], Icon [Wal91], Forth <ref> [EM96] </ref>, SML [TAL90], Pascal [Gil90], Cedar [ADH + 89], and Fortran [FGMS90] are well known. For traditionally compiled languages like Pascal and Fortran, translation to C improved portability. For Scheme, Forth, and Icon, translation removed interpretation overhead. Similarly, Toba removes interpretation overhead from Java programs.
Reference: [FGMS90] <author> S. I. Feldman, D. M. Gay, M. W. Maimone, and N. L. Schryer. </author> <note> A Fortran-to-C converter. Computing Science Technical Report No. 149, </note> <institution> AT&T Bell Laboratories, </institution> <address> Murray Hill, NJ, </address> <year> 1990. </year>
Reference-contexts: Compiling higher-level languages to C is not new. Many language systems leverage existing compilers and use C as an intermediate language in the compilation process. Systems for Smalltalk [Git94], SR [And82], Scheme [Bar89], Icon [Wal91], Forth [EM96], SML [TAL90], Pascal [Gil90], Cedar [ADH + 89], and Fortran <ref> [FGMS90] </ref> are well known. For traditionally compiled languages like Pascal and Fortran, translation to C improved portability. For Scheme, Forth, and Icon, translation removed interpretation overhead. Similarly, Toba removes interpretation overhead from Java programs.
Reference: [Gil90] <author> Dave Gillespie. p2c. </author> <title> p2c is one of several publicly available Pascal to C compilers, </title> <year> 1990. </year>
Reference-contexts: Compiling higher-level languages to C is not new. Many language systems leverage existing compilers and use C as an intermediate language in the compilation process. Systems for Smalltalk [Git94], SR [And82], Scheme [Bar89], Icon [Wal91], Forth [EM96], SML [TAL90], Pascal <ref> [Gil90] </ref>, Cedar [ADH + 89], and Fortran [FGMS90] are well known. For traditionally compiled languages like Pascal and Fortran, translation to C improved portability. For Scheme, Forth, and Icon, translation removed interpretation overhead. Similarly, Toba removes interpretation overhead from Java programs.
Reference: [Git94] <author> Claus Gittinger. Smalltalk/x. </author> <title> Smalltalk/X is a widely available Smalltalk to C compiler, </title> <year> 1994. </year>
Reference-contexts: Compiling higher-level languages to C is not new. Many language systems leverage existing compilers and use C as an intermediate language in the compilation process. Systems for Smalltalk <ref> [Git94] </ref>, SR [And82], Scheme [Bar89], Icon [Wal91], Forth [EM96], SML [TAL90], Pascal [Gil90], Cedar [ADH + 89], and Fortran [FGMS90] are well known. For traditionally compiled languages like Pascal and Fortran, translation to C improved portability. For Scheme, Forth, and Icon, translation removed interpretation overhead.
Reference: [GJS96] <author> James Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1996. </year> <note> ISBN 0-201-63451-1. </note>
Reference-contexts: Second, the behavior of finalizers and cyclic data structures in the JVM are slightly different from those supported by the BDW collector. The Java language specification (page 231-234 , <ref> [GJS96] </ref>), allows object finalizers to make previously unreachable objects reachable again, thereby resurrecting the objects. Although the BDW collector supported finalization and resurrection of objects, it did not collect cyclic data structures containing finalizable objects.
Reference: [GP96] <author> William G. Griswold and Paul S. Phillips. </author> <title> Microbenchmarks for java. </title> <note> URL: http://www-cse.uscd.edu/wgg/JavaProf/javaprof.html, 1996. </note>
Reference-contexts: For stand-alone applications that do not rely on dynamic loading, Toba provides large performance benefits over other systems. 7.3 Micro-benchmarks Table 3 describes the micro-benchmarks used to isolate the performance differences in the systems. These benchmarks are an expanded version of the UCSD Java Microbenchmarks <ref> [GP96] </ref>. Table 4 shows results of running the benchmarks on each system. For accurate timing, each micro-benchmark was iterated in a loop until the total execution time was at least 5 seconds. This varied between 100 and 100,000,000 iterations, depending on the benchmark.
Reference: [GYT96] <author> James Gosling, Frank Yellin, </author> <title> and The Java Team. The Java Application Programming Interface, volume 1. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1996. </year> <note> ISBN 0-201-63453-8. </note>
Reference-contexts: 1 Introduction Java <ref> [GYT96] </ref> is an object-oriented language designed by Sun Microsystems that supports mobile code, i.e., executable code that runs on a variety of platforms. Although the language is interesting in its own right, Java's popularity stems from its promise of write once, run anywhere.
Reference: [LY97] <author> Tim Lindholm and Frank Yellin. </author> <title> The Java Virtual Machine Specification. </title> <publisher> Addison-Wesley, </publisher> <year> 1997. </year> <note> ISBN 0-201-63452-X. </note>
Reference-contexts: Department of Computer Science, University of Arizona, Tucson, AZ 85721; Telephone: 520/621-4326; Email: todd@cs.arizona.edu. 2 Lake Toba is a prominent feature on Sumatra, the island just west of Java. 1 2 The Java Virtual Machine The Java Virtual Machine (JVM) defines a stack-based virtual machine that executes Java class files <ref> [LY97] </ref>. Each Java class compiles into a separate class file containing information describing the class's inheritance, fields, methods, etc., as well as nearly all of the compile-time type information.
Reference: [MDP96] <author> David Mosberger, Peter Druschel, and Larry L. Peterson. </author> <title> Implementing atomic sequences on uniproces-sors using rollforward. </title> <journal> SoftwarePractice and Experience, </journal> <volume> 26 </volume> <pages> 1-23, </pages> <year> 1996. </year>
Reference-contexts: The problem is that this may cause a thread to block (or even die) in the middle of a critical section, leaving the critical section locked. To eliminate this possibility Toba uses a limited form of roll-forward <ref> [MDP96] </ref> to allow a thread interrupted by a signal to exit the critical section before handling the signal.
Reference: [MW91] <author> H. Mossenbock and N. Wirth. </author> <title> The programming language Oberon-2. </title> <type> Technical report, </type> <institution> Institute for Computer systems, ETH, </institution> <year> 1991. </year> <month> 12 </month>
Reference-contexts: The method table is simply a vector of function pointers and unique method identifiers. The method identifiers are used when invoking interface functions, which must be found at run-time. The structure of the method table is typical of statically-bound object-oriented languages like Oberon-2 <ref> [MW91] </ref> and C++ [Str86]. Method tables include inherited methods as well as functions defined by the class itself. 2 Object Pointer Object Instance Instance Variables Class Struct Array Bit = 0 Instance Size . . . Object Pointer Array Instance Length . . .
Reference: [Sir96] <author> KB Siram. </author> <note> Jolt. URL: http://substance.blackdown.org/kbs/jolt.html, 1996. </note>
Reference-contexts: Toba does not currently perform any of these optimizations. Vortex does not support threads, which has a global impact on performance. No published information is available about other details of Java run-time system support from Vortex. 11 Jolt <ref> [Sir96] </ref> also compiles Java bytecodes to C. Jolt generates a C function for some methods in a class file, and then generates a new class file with these methods marked as native. Method overloading is not supported, and Jolt cannot compile class initialization methods.
Reference: [Str86] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1986. </year> <note> ISBN 0-201-12078-X. </note>
Reference-contexts: The method table is simply a vector of function pointers and unique method identifiers. The method identifiers are used when invoking interface functions, which must be found at run-time. The structure of the method table is typical of statically-bound object-oriented languages like Oberon-2 [MW91] and C++ <ref> [Str86] </ref>. Method tables include inherited methods as well as functions defined by the class itself. 2 Object Pointer Object Instance Instance Variables Class Struct Array Bit = 0 Instance Size . . . Object Pointer Array Instance Length . . . <p> As an optimization, Toba omits the switch wrapper in the absence of exception handling blocks and indirect jumps. at removing these. 4.2 Exception Handling The Java Virtual Machine supports exception handling in a manner similar to Ada [Bar84] or C++ <ref> [Str86] </ref>. Exceptions are thrown, either implicitly or explicitly, and are caught by the closest matching exception handler. Exceptions that cannot be caught in a procedure require the JVM to unwind the call stack and re-throw the exception in the caller's environment. Re-throwing continues until the exception is caught.
Reference: [TAL90] <author> David Tarditi, Anurag Acharya, and Peter Lee. </author> <title> No assembly required: Compiling standard ML to C. </title> <type> Technical Report CMU-CS-90-187, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> Nov 90. </month>
Reference-contexts: Compiling higher-level languages to C is not new. Many language systems leverage existing compilers and use C as an intermediate language in the compilation process. Systems for Smalltalk [Git94], SR [And82], Scheme [Bar89], Icon [Wal91], Forth [EM96], SML <ref> [TAL90] </ref>, Pascal [Gil90], Cedar [ADH + 89], and Fortran [FGMS90] are well known. For traditionally compiled languages like Pascal and Fortran, translation to C improved portability. For Scheme, Forth, and Icon, translation removed interpretation overhead. Similarly, Toba removes interpretation overhead from Java programs.
Reference: [Wal91] <author> Kenneth Walker. </author> <title> The implementation of an optimizing compiler for Icon. </title> <type> Technical Report TR 91-16, </type> <institution> University of Arizona, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: Compiling higher-level languages to C is not new. Many language systems leverage existing compilers and use C as an intermediate language in the compilation process. Systems for Smalltalk [Git94], SR [And82], Scheme [Bar89], Icon <ref> [Wal91] </ref>, Forth [EM96], SML [TAL90], Pascal [Gil90], Cedar [ADH + 89], and Fortran [FGMS90] are well known. For traditionally compiled languages like Pascal and Fortran, translation to C improved portability. For Scheme, Forth, and Icon, translation removed interpretation overhead. Similarly, Toba removes interpretation overhead from Java programs.
References-found: 21

