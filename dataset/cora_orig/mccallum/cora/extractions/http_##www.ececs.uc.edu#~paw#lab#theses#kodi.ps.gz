URL: http://www.ececs.uc.edu/~paw/lab/theses/kodi.ps.gz
Refering-URL: http://www.ececs.uc.edu/~paw/lab/theses.html
Root-URL: 
Title: A Framework for Proving Equivalences of VHDL Descriptions using PVS  
Degree: A Thesis Submitted to the  in partial fulfillment of the requirements for the degree of Master of Science in the Department of Electrical and Computer Engineering and Computer Science of The College of Engineering  by Kothanda Umamageswaran B.Tech., Indian Institute of Technology, Madras, India, 1995 Thesis Advisor and Committee Chair: Dr. Philip A. Wilsey  
Date: September 26, 1997  
Affiliation: Division of Graduate Studies and Research of the University of Cincinnati  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Bartsch, H. Eveking, H.-J. F arber, M. Kelelatchew, J. Pinder, and U. Schelling. </author> <title> LOVERT A logic verifier of register-transfer level descriptions. </title> <booktitle> In IMEC-IFIP Workshop on Applied Formal Methods for Correct VLSI Design (1989), </booktitle> <publisher> North-Holland, </publisher> <pages> pp. 522-531. </pages>
Reference-contexts: Nqthm has been integrated into Prevail to verify parameterized functions, library modules and to use induction capabilities (necessary to prove the correctness of the implementation of an n bit comparator for any n). Several other proof systems such as LOVERT <ref> [1] </ref> and SMOCK [9] are also embedded in the Prevail environment. 2.8 Summary A comparison of the works is shown in Table 2.1. In general, the semantic models the have been developed are not broad enough in their scope with respect to the VHDL that they characterize.
Reference: [2] <author> Agerwala, T. </author> <title> Putting Petri Nets to Work. </title> <booktitle> Computer 12, </booktitle> <month> 12 (December </month> <year> 1979), </year> <pages> 85-94. </pages>
Reference-contexts: These conditions are then proven using the Larch Prover. Properties of some simple circuits consisting of both combinational and state-holding devices have been proven. 2.5 Petri Nets A Petri Net is a graphical and mathematical modeling tool introduced by Petri <ref> [2] </ref>. Petri Nets are a promising tool for describing and studying systems that are characterized as being concurrent, asynchronous, distributed, parallel, nondeterministic, and/or stochastic. As a graphical tool, Petri Nets can be used as a visual-communication aid similar to flow charts, block diagrams, and networks. <p> The PVS prover uses sequent calculus to manipulate and prove lemmas and theorems. A sequent of the form 2 The term PVS prover may be misleading. It is mainly a proof-checker. 27 f-1g 1 [-3] 3 | <ref> [2] </ref> 2 . . . intuitively reads as ( 1 ^ 2 ^ 3 ) ` ( 1 _ 2 _ 3 ), where each i is termed an antecedent formula and each i is termed a consequent formula.
Reference: [3] <author> Ashenden, P. J. </author> <title> The VHDL Cookbook. </title> <institution> University of Adelaide, South Australia. </institution> <note> Available online at ftp://www.cs.adelaide.edu.au/pub/VHDL-Cookbook/. </note>
Reference-contexts: The current standard for the language is IEEE Std 1076-1993 and is specified in the Language Reference Manual [25]. In addition to the Language Reference Manual (LRM), several reader friendly books describing 33 VHDL are available <ref> [3, 4, 41] </ref>. VHDL is currently used in the design, development, verification, synthesis, and testing of hardware designs. The primary abstraction of a hardware description in VHDL is a design entity. It represents a hardware design that has a well-defined input and output and performs a well-defined function.
Reference: [4] <author> Ashenden, P. J. </author> <title> The Designer's Guide to VHDL. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1995. </year>
Reference-contexts: The current standard for the language is IEEE Std 1076-1993 and is specified in the Language Reference Manual [25]. In addition to the Language Reference Manual (LRM), several reader friendly books describing 33 VHDL are available <ref> [3, 4, 41] </ref>. VHDL is currently used in the design, development, verification, synthesis, and testing of hardware designs. The primary abstraction of a hardware description in VHDL is a design entity. It represents a hardware design that has a well-defined input and output and performs a well-defined function.
Reference: [5] <author> Barton, D. L. </author> <title> A functional characterization of elements of the VHDL simulation cycle. </title> <booktitle> In VHDL Users' Group Spring 1991 Conference (Cincinnati, </booktitle> <address> OH, </address> <month> April </month> <year> 1991), </year> <pages> pp. 91-96. </pages>
Reference-contexts: There are several widely used techniques for specifying the formal semantics of programming languages. Some of them are listed below. Denotational Semantics : describing what is computed by a program in-terms of mathematical functions for the program or the sub-elements of the program <ref> [5, 17, 30] </ref>. Algebraic Semantics : describing the meaning of a program using an algebra. The algebraic relationships are expressed using axioms 8 and equations [43]. Axiomatic Semantics : defining the meaning of the program using a set of ax ioms [6]. <p> A characterization of the VHDL simulation kernel is provided in terms of semantic algebras and valuation functions that map states to consecutive states. Transport delays, inertial delays, and propagation of signal values are characterized, but guarded signal assignments and communication between architectures are not. Barton <ref> [5] </ref> also provides a functional characterization of several of the language features but does not attempt to give a complete definition. Characterizations of drivers, delayed signal assignments, resolution and type conversion functions are provided. No proof methods are investigated.
Reference: [6] <author> Bickford, M., and Jamsek, D. </author> <title> Formal specification and verification of VHDL. </title> <booktitle> Lecture Notes in Computer Science 1166 (1996), </booktitle> <pages> 310-317. </pages>
Reference-contexts: Algebraic Semantics : describing the meaning of a program using an algebra. The algebraic relationships are expressed using axioms 8 and equations [43]. Axiomatic Semantics : defining the meaning of the program using a set of ax ioms <ref> [6] </ref>. It provides a set of assertions about the preconditions and the post-conditions that need to hold true. Properties of programs may be inferred from the set of axioms provided. Operational Semantics : specifying how the state of an abstract computer would change while executing the program [51, 53]. <p> Stated formally, P rocess Statement Semantics : DriverSet ! Episode: 2.4 Axiomatic Semantics Axiomatic semantics defines the meaning of the program implicitly by making assertions about relationships that hold at each point in the execution of the program <ref> [6] </ref>. Axioms define the properties of the control structures and state the properties that may be inferred. A property about a program is deduced by using these axioms. <p> A property about a program is deduced by using these axioms. Each program 13 has a pre-condition which describes the initial conditions required by the program prior to execution and a post-condition which describes, upon termination of the program, the desired program property. Bickford and Jamsek <ref> [6] </ref> define an axiomatic semantics of VHDL using the Larch Prover [20]. The mathematical conditions to be proven are specified in the Larch Shared Language [23] and the connection between these conditions and the VHDL entities is provided by special interface specifications. <p> Though the semantics of language constructs such as case statements, if statements, and loop statements have been formalized for other languages, similar work is almost non-existent for VHDL. Existing semantic definitions of VHDL restrict themselves to specific types in VHDL (an axiomatic definition by Bickford and Jamsek <ref> [6] </ref> being an exception). Although Van Tassel [52] provides a framework for proving symbolic equivalence of specific descriptions, there does not exist a semantic model that handles symbolic verification of general VHDL descriptions. <p> An operational semantics of VHDL would hence be able to prove properties about specific descriptions. In order to achieve this, the simulation kernel and the elaborated set of processes and the set of drivers must be embedded in the semantics. Bickford and Jamsek <ref> [6] </ref> state that from an operational semantics it is very difficult to prove properties about the descriptions. They found that most of the proofs are meta-level arguments where one needs to prove things by induction on the length of the run, quantifying over all possible environments.
Reference: [7] <author> B orger, E., Gl asser, U., and M uller, W. </author> <title> A formal definition of an abstract VHDL'93 simulator by EA-machines. In Formal Semantics for VHDL, C.D. </title> <editor> Kloos and P.T. Breuer, Eds., </editor> <volume> vol. </volume> <booktitle> 307 of The Kluwer international series in engineering and computer science. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <address> Madrid, Spain, </address> <month> Mar. </month> <year> 1995, </year> <note> ch. 4. </note>
Reference-contexts: Operational Semantics : specifying how the state of an abstract computer would change while executing the program [51, 53]. Most of the above techniques have been used in the specification of the semantics of VHDL. Other techniques such as Evolving Algebras <ref> [7] </ref>, Petri Nets [16, 32, 34, 35], and Higher Order Logic [21] have also been used and are discussed in detail in the following sections. In general, the formal semantics of a language has been used to clarify the informal semantics. <p> One of the limitations of the approach is that the features introduced in VHDL '93 such as postponed processes and pulse rejection limits have not been described and no investigations into equivalence proofs have been performed. 2.6 Evolving Algebras Evolving Algebras, as defined by Borger et al <ref> [7] </ref>, is pseudocode over abstract data without any particular theoretical pre-requisites. The abstract data elements are members of sets and represent the current state of a system. State transformations are reflected 15 as transformations on these algebras. <p> A rigorous, but transparent semantic model for VHDL '93 has been provided by Borger et al <ref> [7] </ref> using EA-machines. The semantics defines an abstract VHDL simulation engine in terms of a set of transition rules for an EA-machine. The definition covers the interaction of the simulation kernel with user-defined processes, their suspension and resumption.
Reference: [8] <author> Borrione, D. </author> <title> Special Issue on VHDL Semantics. Formal Methods in System Design 7, </title> <address> 1/2 (Aug. </address> <year> 1995). </year>
Reference: [9] <author> Borrione, D., Bouamama, H., Deharbe, D., and Le Faou, C. </author> <title> HDL-Based integration of formal methods and CAD tools in the prevail environment. </title> <booktitle> Lecture Notes in Computer Science 1166 (1996), </booktitle> <pages> 450-458. </pages>
Reference-contexts: The Prevail proof system <ref> [9] </ref> used by them, recognizes a synthesizable subset of VHDL extended with 17 generic parameters. The proof system provides capabilities for proving equivalences of two architectures, diagnosing incorrect architectures, and proving certain temporal properties of an architecture of the circuit. <p> Nqthm has been integrated into Prevail to verify parameterized functions, library modules and to use induction capabilities (necessary to prove the correctness of the implementation of an n bit comparator for any n). Several other proof systems such as LOVERT [1] and SMOCK <ref> [9] </ref> are also embedded in the Prevail environment. 2.8 Summary A comparison of the works is shown in Table 2.1. In general, the semantic models the have been developed are not broad enough in their scope with respect to the VHDL that they characterize.
Reference: [10] <author> Borrione, D., and Salem, A. </author> <title> Denotational Semantics of a Synchronous VHDL Subset. Formal Methods in System Design 7, </title> <address> 1/2 (Aug. </address> <year> 1995), </year> <pages> 53-72. </pages> <publisher> Kluwer Academic Publishers, ISSN: </publisher> <pages> 0925-9856. </pages>
Reference: [11] <author> Boulton, R., Gordon, A., Gordon, M., Harrison, J., Herbert, J., and Van Tassel, J. </author> <title> Experiences with embedding hardware description languages in HOL. In Theorem Provers in Circuit Design: </title> <journal> Theory, Practice and Experience, </journal> <volume> 88 V. </volume> <editor> Stavridou, T. F. Melham, and R. T. Boute, Eds. </editor> <publisher> North-Holland, </publisher> <month> June </month> <year> 1992, </year> <pages> pp. 129-156. </pages>
Reference-contexts: In the case of VHDL, it is also used for providing a basis for verifying the correctness of hardware designs and to directly reason about the descriptions. 2.1 Higher Order Logic Higher order logic is an extension of first order logic in which variables can range over functions and predicates <ref> [11] </ref>. A function is first order if none of its arguments is a function, i.e., all of its arguments are data. In higher order logic, functions may be arguments to other functions, and functions may be returned as a result of computing the value of expressions. <p> However, the semantics assumes that all the 10 signals are boolean valued, and that there are no resolved signals. In contrast to other efforts which provide a shallow embedding of VHDL [7,13,33], Van Tassel's effort provides a deep embedding of the language structure <ref> [11] </ref>. More precisely, the semantics includes the necessary and sufficient conditions for a Femto-VHDL program to be syntactically valid.
Reference: [12] <author> Boyer, R. S., and Yu, Y. </author> <title> Automated correctness proofs of machine code pro grams for a commercial microprocessor. </title> <type> Technical Report UTEXAS.CS//CS-TR-91-33, </type> <institution> University of Texas at Austin, Department of Computer Sciences, </institution> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: Issues relating to VHDL '93 constructs such as postponed processes, pulse rejection limits, and shared variables have been discussed. However, the semantics does not deal with guarded signals, generics, and component instantiations. No proof methodologies have been investigated. 2.7 Boyer-Moore Logic Boyer-Moore logic <ref> [12] </ref> is a quantifier free first order logic with equality. <p> For example, the operations of addition, subtraction, and so on are defined using the definitional principle. The rules of inference in the logic are propositional logic, equality, and mathematical induction. The logic is fully supported by the Nqthm theorem prover <ref> [12] </ref>. Read and Edwards [44] present a mathematical definition of a semantics preserving translation to a subset of VHDL. Essentially, the system operates by transforming VHDL descriptions into equivalent programs in Boyer-Moore Logic in two stages.
Reference: [13] <author> Breuer, P. T., Fernandez, L. S., and Kloos, C. D. </author> <title> A Functional Seman tics for Unit-Delay VHDL. In Formal Semantics for VHDL, C.D. </title> <editor> Kloos and P.T. Breuer, Eds., </editor> <volume> vol. </volume> <booktitle> 307 of The Kluwer International Series in Engineering and Computer Science. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <address> Madrid, Spain, </address> <month> Mar. </month> <year> 1995, </year> <note> ch. 2. </note>
Reference-contexts: However, the semantics restricts itself to a single architectural specification and a set of explicit process statements. More precisely, communication between architectures is ignored. 12 2.3 Functional Semantics Functional Semantics as defined by Breuer et al <ref> [13] </ref> is one that is declarative in style and concept but can also be executed. <p> More precisely, it is a semantics which (i) when executed provides results that resemble the execution of a program in that language (when compiled and simulated/executed using other compilers), and (ii) when read, resembles a high-level non-operational semantics (declarative semantics). Breuer et al <ref> [13] </ref> define a functional semantics for VHDL descriptions that contain unit delays only. The semantics covers signal assignment statements and wait statements. Delta-delayed signal signal assignments, variables, resolution functions, pulse-rejections limits, postponed processes, and other features included in VHDL '93 have not been characterized.
Reference: [14] <author> Butler, R. W. </author> <title> An elementary tutorial on formal specification and verification using PVS 2. </title> <type> NASA Technical Memorandum 108991, </type> <institution> NASA Langley Research Center, Hampton, VA, </institution> <month> June </month> <year> 1993. </year> <month> Revised June </month> <year> 1995. </year> <title> Available, with PVS specification files, from http://atb-www.larc.nasa.gov/ftp/larc/PVS-tutorial; use only files marked "revised.". </title>
Reference-contexts: Finally, we validate the process folding [29], process flattening, and signal collapsing optimizations to demonstrate its utility in CAD tool optimization. 20 Chapter 3 Overview of PVS Prototype Verification System (PVS) <ref> [14, 15, 36-39, 45-48] </ref> is an integrated environment for the development and the analysis of formal specifications, that supports the creation, analysis, and modification of theories and proofs. PVS uses GNU-emacs as its interface by extending emacs with pre-defined lisp functions and other packages.
Reference: [15] <author> Crow, J., Owre, S., Rushby, J., Shankar, N., and Srivas, M. </author> <title> A tutorial introduction to PVS. </title> <booktitle> Presented at WIFT '95: Workshop on Industrial-Strength Formal Specification Techniques, </booktitle> <address> Boca Raton, Florida, </address> <month> Apr. </month> <year> 1995. </year> <title> Available, with specification files, </title> <note> from http://www.csl.sri.com/wift-tutorial.html. </note>
Reference-contexts: Accordingly, optimizations that transform descriptions from one form to another can be formally verified. The framework consists of the following: 1. A translator that accepts two VHDL descriptions and a set of user-specified sig nals, and generates a theorem in PVS <ref> [15, 38, 39, 47] </ref>. 2. A static semantics embedded in PVS that facilitates the representation of VHDL constructs. 3. A dynamic semantics embedded in PVS that denotes what happens when a VHDL program is simulated. <p> Finally, we validate the process folding [29], process flattening, and signal collapsing optimizations to demonstrate its utility in CAD tool optimization. 20 Chapter 3 Overview of PVS Prototype Verification System (PVS) <ref> [14, 15, 36-39, 45-48] </ref> is an integrated environment for the development and the analysis of formal specifications, that supports the creation, analysis, and modification of theories and proofs. PVS uses GNU-emacs as its interface by extending emacs with pre-defined lisp functions and other packages.
Reference: [16] <author> Damm, W., Josko, B., and Schlor, R. </author> <title> A net-based semantics for VHDL. </title> <booktitle> In Proc. of the European Design Automation Conference with EURO-VHDL '93 (CCH Hamburg, </booktitle> <address> Germany, </address> <month> September </month> <year> 1993), </year> <pages> pp. 514-519. </pages>
Reference-contexts: Operational Semantics : specifying how the state of an abstract computer would change while executing the program [51, 53]. Most of the above techniques have been used in the specification of the semantics of VHDL. Other techniques such as Evolving Algebras [7], Petri Nets <ref> [16, 32, 34, 35] </ref>, and Higher Order Logic [21] have also been used and are discussed in detail in the following sections. In general, the formal semantics of a language has been used to clarify the informal semantics. <p> As a graphical tool, Petri Nets can be used as a visual-communication aid similar to flow charts, block diagrams, and networks. As a mathematical tool, it is possible to set up state equations, algebraic equations, and other mathematical models governing the behavior of systems. Damm et al <ref> [16] </ref> present a formal semantics of VHDL using a class of Petri Nets called AADL Nets.
Reference: [17] <author> Davis, K. C. </author> <title> A denotational definition of the VHDL simulation kernel. </title> <booktitle> Proc. 11th Int. Symp. on Computer Hardware Description Languages (1993), </booktitle> <pages> 509-521. </pages>
Reference-contexts: There are several widely used techniques for specifying the formal semantics of programming languages. Some of them are listed below. Denotational Semantics : describing what is computed by a program in-terms of mathematical functions for the program or the sub-elements of the program <ref> [5, 17, 30] </ref>. Algebraic Semantics : describing the meaning of a program using an algebra. The algebraic relationships are expressed using axioms 8 and equations [43]. Axiomatic Semantics : defining the meaning of the program using a set of ax ioms [6]. <p> The valuation functions map the syntactic constructs of the language to the semantic algebra. In the case of VHDL, most of the work done in this area has been towards describing the semantics of the simulation by representing the simulation kernel as a function. Davis <ref> [17] </ref> provides a denotational specification of the simulation cycle for a limited subset of VHDL '87. A characterization of the VHDL simulation kernel is provided in terms of semantic algebras and valuation functions that map states to consecutive states.
Reference: [18] <author> Fiore, M. P., Jung, A., Moggi, E., O'Hearn, P., Riecke, J., Rosolini, G., and Stark, I. </author> <title> Domains and denotational semantics: History, accomplishments and open problems. </title> <type> Tech. Rep. </type> <institution> CSR-96-2, University of Birmingham, School of Computer Science, </institution> <month> Jan. </month> <year> 1996. </year> <note> Available online at ftp://ftp.cs.bham.ac.uk/ pub/tech-reports/1996/CSR96-02.ps.gz. </note>
Reference-contexts: LAMBDA is that errors are detected and corrected at an early stage in the design cycle and the circuits generated are correct by construction. 11 2.2 Denotational Semantics Denotational semantics has traditionally been described as the theory of true meanings for programs, or, as the theory of what programs denote <ref> [18] </ref>. Denotations tell what is computed by giving a mathematical object (typically a function) which is the meaning of the program.
Reference: [19] <author> Fujimoto, R. </author> <title> Parallel discrete event simulation. </title> <journal> Communications of the ACM 33, </journal> <month> 10 (October </month> <year> 1990), </year> <pages> 30-53. </pages>
Reference-contexts: Typically, an HDL specification is compiled, elaborated, and then simulated. Although simulation is one of the more widely used methods for verifying hardware, existing simulators are slow. This inefficiency has led to the interest and research in the field of parallel simulation <ref> [19] </ref>. Although parallel simulation offers great potential for speeding HDL simulations, this potential is yet to be effectively realized and broadly utilized. The hardware description language (VHDL) [25] is one of the more widely supported language for specifying hardware designs. <p> This leads to the production of high-quality synthesis software and circuits with a very high degree of reliability. 59 Chapter 7 Developing Proofs of Optimizations Parallel Discrete Event VHDL Simulation (PDEVS) is the execution of a single discrete event VHDL simulation program on a parallel computer <ref> [19] </ref>. In PDEVS, sub-assemblies of simulation (also known as logical processes) operate autonomously and exchange time-stamped event messages. VHDL descriptions contain substantial amounts of parallelism; yet, it is surprisingly difficult to parallelize them in practice. This difficulty arises from the fine grained nature of the logical processes.
Reference: [20] <author> Garland, S. J., and Guttag, J. V. </author> <title> A guide to LP, the Larch Prover. </title> <type> Tech. rep., TR 82, </type> <institution> DEC/SRC, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: Each program 13 has a pre-condition which describes the initial conditions required by the program prior to execution and a post-condition which describes, upon termination of the program, the desired program property. Bickford and Jamsek [6] define an axiomatic semantics of VHDL using the Larch Prover <ref> [20] </ref>. The mathematical conditions to be proven are specified in the Larch Shared Language [23] and the connection between these conditions and the VHDL entities is provided by special interface specifications.
Reference: [21] <author> Gordon, M. </author> <title> Why higher order logic is a good formalism for specifying and verifying hardware. </title> <booktitle> Formal Aspects of VLSI design (1986), </booktitle> <pages> 153-177. </pages>
Reference-contexts: Most of the above techniques have been used in the specification of the semantics of VHDL. Other techniques such as Evolving Algebras [7], Petri Nets [16, 32, 34, 35], and Higher Order Logic <ref> [21] </ref> have also been used and are discussed in detail in the following sections. In general, the formal semantics of a language has been used to clarify the informal semantics. <p> A popular proof assistant that supports Higher Order Logic is HOL [22]. Specifications of digital circuits directly in HOL has been pursued by Gordon <ref> [21] </ref>. He formally describes circuits using pure logic. The inference mechanisms present in the logic form the necessary tools to prove properties about the circuits. Gordon models circuits as a conjunction of predicates where each predicate represents a component in the circuit.
Reference: [22] <author> Gordon, M. J. C. </author> <title> HOL: a proof generating system for higher-order logic. In VLSI Specification, Verification and Synthesis, </title> <editor> G. Birtwistle and P. A. Subrahmanyam, Eds. </editor> <publisher> Kluwer, </publisher> <address> Boston, </address> <year> 1988, </year> <pages> pp. 73-128. </pages>
Reference-contexts: A popular proof assistant that supports Higher Order Logic is HOL <ref> [22] </ref>. Specifications of digital circuits directly in HOL has been pursued by Gordon [21]. He formally describes circuits using pure logic. The inference mechanisms present in the logic form the necessary tools to prove properties about the circuits.
Reference: [23] <author> Guttag, J. V., and Horning, J. J. </author> <title> Larch: Languages and Tools for Formal Specification. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1993. </year> <month> 89 </month>
Reference-contexts: Bickford and Jamsek [6] define an axiomatic semantics of VHDL using the Larch Prover [20]. The mathematical conditions to be proven are specified in the Larch Shared Language <ref> [23] </ref> and the connection between these conditions and the VHDL entities is provided by special interface specifications. Using the specification of the architecture corresponding to the entity in VHDL, and the interface specifications, they generate a set of conditions that need to be verified.
Reference: [24] <institution> IEEE Standard VHDL Language Reference Manual. </institution> <address> New York, NY, </address> <year> 1988. </year>
Reference-contexts: The dynamic semantics is presented as a formalization of the simulation cycle presented in the VHDL LRM <ref> [24] </ref>. Using the static and dynamic semantics, and the embedding in the HOL proof assistant, proofs of equivalence of behavior and implementation of simple circuits such as NAND gates, flip-flops, and parity-checkers are demonstrated. <p> The result was the development of Very High Speed Integrated Circuit (VHSIC) Hardware Description Language (VHDL), a language for describing digital electronic systems. The requirements of the language came out in 1981, and in 1986 the creation of the IEEE Std 1076-1987 <ref> [24] </ref> began with the adoption of VHDL version 7.2 as the baseline language. The current standard for the language is IEEE Std 1076-1993 and is specified in the Language Reference Manual [25].
Reference: [25] <institution> IEEE Standard VHDL Language Reference Manual. </institution> <address> New York, NY, </address> <year> 1993. </year>
Reference-contexts: This inefficiency has led to the interest and research in the field of parallel simulation [19]. Although parallel simulation offers great potential for speeding HDL simulations, this potential is yet to be effectively realized and broadly utilized. The hardware description language (VHDL) <ref> [25] </ref> is one of the more widely supported language for specifying hardware designs. Academic and industrial researchers, along with CAD vendors have provided extensive tool support for VHDL. The official specification of the syntax and the semantics of VHDL is the Language Reference Manual [25] which describes the language informally in <p> The hardware description language (VHDL) <ref> [25] </ref> is one of the more widely supported language for specifying hardware designs. Academic and industrial researchers, along with CAD vendors have provided extensive tool support for VHDL. The official specification of the syntax and the semantics of VHDL is the Language Reference Manual [25] which describes the language informally in English prose form. Unfortunately, it is impossible to formally validate simulation results or optimizations to the simulation process using this informal specification. <p> on writing VHDL descriptions and proving their equivalence, thus saving the drudgery of translating VHDL specifications into the formal framework. 1.2 Scope of the Research The semantics presented in this work is a characterization of the elaborated form of VHDL '93 as defined in the language standard, IEEE Std 1076-1993 <ref> [25] </ref>. Although the semantics does not cover all the features of VHDL, it is self-contained and characterizes many of the important features. In particular the semantic model formally characterizes the following VHDL components, 1. <p> For example, the postponement field of a process statement can be selected and is denoted as postponement = [ postponed j not_postponed ]. * References to the IEEE Standard VHDL Language Reference Manual (Std 1079 1993) <ref> [25] </ref> will be of the form (xs, -p, Ll) where s denotes the section number, p denotes the page number, and l denotes the line number. Sometimes, one or more of these fields may be omitted. 1.4 Overview of the Thesis The remainder of the thesis is organized as follows. <p> The operational approach used in the currently available semantic models, and their close relationship to the simulation cycle defined by the VHDL LRM <ref> [25] </ref> complicate 18 V T assel Klo and Borger and Olcoz Borrione Bic kford RASSP Breuer Glasser Seman tics Op erational F unctional EA-mac hines P etriNets Bo er-Mo Axiomatic Axiomatic Pro cess Statemen t p p p W Statemen t p p p Signal Assignmen t p p p V <p> The formulas that define well-formedness are a set of axioms describing conditions which must hold true for the static model to be considered correct. For example, the VHDL LRM <ref> [25] </ref> asserts that a wait statement may not appear in a process statement which contains a sensitivity list (x8.1, -113, L75). A formal representation of this condition is a well-formedness formula (Figure 4.1). The VHDL LRM states that a process statement with a sensitivity list can be rewritten without one. <p> The current standard for the language is IEEE Std 1076-1993 and is specified in the Language Reference Manual <ref> [25] </ref>. In addition to the Language Reference Manual (LRM), several reader friendly books describing 33 VHDL are available [3, 4, 41]. VHDL is currently used in the design, development, verification, synthesis, and testing of hardware designs. The primary abstraction of a hardware description in VHDL is a design entity. <p> In short, VHDL has several features for modeling digital hardware circuits. The popularity and standardization of VHDL have led to an increased interest in VHDL and a reduction in interest for an alternative hardware description language. 4.2 Elaboration The VHDL LRM <ref> [25] </ref> defines elaboration to the "the process by which a declaration achieves its effect." Elaboration is performed on a design hierarchy once all the units present in it have been syntactically analyzed. <p> The dynamic model semantics consists of a set of functions that describe the transformations that a signal undergoes during the simulation process. 5.1 Introduction The semantics of the VHDL is defined operationally in the VHDL LRM <ref> [25] </ref> using the simulation cycle approach. An operational semantics of VHDL would hence be able to prove properties about specific descriptions. In order to achieve this, the simulation kernel and the elaborated set of processes and the set of drivers must be embedded in the semantics. <p> In this research, an attempt is made to define an axiomatic semantics, that is independent of the simulation cycle defined in the VHDL LRM <ref> [25] </ref>, thus providing a framework against which different simulation techniques could be developed and compared. For example, parallel simulators [28] for VHDL implemented using distributed synchronization protocols such as TimeWarp [19,26] can be constructed against this model. An operational specification of the simulation cycle complicates such investigations.
Reference: [26] <author> Jefferson, D. </author> <title> Virtual time. </title> <journal> ACM Transactions on Programming Languages and Systems 7, </journal> <month> 3 (July </month> <year> 1985), </year> <pages> 405-425. </pages>
Reference: [27] <editor> Kloos, C. D., and Breuer, P. T., Eds. </editor> <title> Formal Semantics for VHDL, </title> <booktitle> vol. 307 of The Kluwer international series in engineering and computer science. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <address> Madrid, Spain, </address> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: For most languages this is computationally infeasible, since it requires that all the features of the languages be tested for all possible inputs. It is hence, commonplace to test as many features of the language as possible (within a set of resource constraints). Kloos and Breuer <ref> [27] </ref> note that, for a semantics of VHDL to be considered cor-rect/acceptable, it has to be validated against Van Tassel's semantics [52] or another strongly established semantics. <p> However, note that since the semantics presented in this effort has a greater coverage than Van Tassel's semantics, we are only able to validate the semantics on the results of the common portion. Kloos and Breuer <ref> [27] </ref> assert that the tested or proven agreement on the common portion confers confidence in the overall correctness. Hence, in this effort we consider the case studies made by Van Tassel and prove them to be correct using our semantics. All the studies followed the following general pattern: 1.
Reference: [28] <author> Martin, D. E., McBrayer, T. J., and Wilsey, P. A. </author> <title> warped: A time warp simulation kernel for analysis and application development. </title> <booktitle> In 29th Hawaii International Conference on System Sciences (HICSS-29) (January 1996), </booktitle> <editor> H. El-Rewini and B. D. Shriver, Eds., </editor> <volume> vol. I, </volume> <pages> pp. 383-386. </pages> <note> "Available on the WWW at http://www.ececs.uc.edu/~paw/warped/. </note>
Reference-contexts: The methods that can be used by all allow the user to generate the VHDL source in a standard form, to publish C++ files that can be simulated after integration with the TyVIS and 70 the WARPED <ref> [28] </ref> kernels, and to transmute the constructs in the static model to the reduced model. The methods that are defined for restricted use are mainly typechecking routines and symbol-table manipulation functions. <p> In this research, an attempt is made to define an axiomatic semantics, that is independent of the simulation cycle defined in the VHDL LRM [25], thus providing a framework against which different simulation techniques could be developed and compared. For example, parallel simulators <ref> [28] </ref> for VHDL implemented using distributed synchronization protocols such as TimeWarp [19,26] can be constructed against this model. An operational specification of the simulation cycle complicates such investigations. The nature of the semantics supports proofs of equivalences of patterns of VHDL 74 descriptions.
Reference: [29] <author> McBrayer, T., and Wilsey, P. A. </author> <title> Process combination to increase event granularity in parallel logic simulation. </title> <booktitle> In 9th International Parallel Processing Symposium (April 1995), </booktitle> <pages> pp. 572-578. </pages>
Reference-contexts: This semantic definition provides a suitable platform for comparing alternative simulation techniques and for validating VHDL transformations that can be used as optimizations by these alternative simulation methods. Finally, we validate the process folding <ref> [29] </ref>, process flattening, and signal collapsing optimizations to demonstrate its utility in CAD tool optimization. 20 Chapter 3 Overview of PVS Prototype Verification System (PVS) [14, 15, 36-39, 45-48] is an integrated environment for the development and the analysis of formal specifications, that supports the creation, analysis, and modification of theories <p> increase the simulation speed is by eliminating unwanted signals. 60 In the remainder of this chapter we informally describe two optimizations to the simulation process: (1) Process folding and (2) Signal collapsing, and present a brief outline of the proofs for both. 7.1 Process Folding 7.1.1 Informal Specification Process folding <ref> [29] </ref> is an optimization that combines two VHDL process statements into a single VHDL process statement. Figure 7.1 presents two VHDL descriptions that are shown to be equivalent under certain conditions described later in this section. <p> The folding of the processes P and Q as the process PQ results in the increase in the granularity of simulation. Studies performed by McBrayer and Wilsey <ref> [29] </ref> show that there is a speed-up by a factor of 2.2. <p> Some examples that illustrate this have been shown in Chapter 6. The central design goal of PVS is not merely to prove theorems but also provide useful feedback from failed and partial proofs by serving as a rigorous skeptic. The initial specification <ref> [29] </ref> did not require that the folded processes not have any resolved signals. During the process of proving process folding without this pre-condition, we were stuck at a subgoal that could not be proved.
Reference: [30] <author> Mueller, W. </author> <title> Approaching the denotational semantics of behavioural VHDL descriptions. </title> <booktitle> In Proc. of the 1st Asian Pacific Conference on Hardware Description Languages, Standards & Application (December 1993), </booktitle> <publisher> IEEE Press, </publisher> <pages> pp. 1-4. </pages>
Reference-contexts: There are several widely used techniques for specifying the formal semantics of programming languages. Some of them are listed below. Denotational Semantics : describing what is computed by a program in-terms of mathematical functions for the program or the sub-elements of the program <ref> [5, 17, 30] </ref>. Algebraic Semantics : describing the meaning of a program using an algebra. The algebraic relationships are expressed using axioms 8 and equations [43]. Axiomatic Semantics : defining the meaning of the program using a set of ax ioms [6]. <p> Barton [5] also provides a functional characterization of several of the language features but does not attempt to give a complete definition. Characterizations of drivers, delayed signal assignments, resolution and type conversion functions are provided. No proof methods are investigated. Mueller <ref> [30] </ref> defines a static semantics of VHDL using a denotational approach and a dynamic semantics using an operational approach. The abstract syntax of the language is an mapping of the static constructs of VHDL onto the formal framework.
Reference: [31] <author> Naur, P. </author> <title> Revised to the algorithmic language ALGOL-60. </title> <booktitle> Communications of the ACM 6 (1963), </booktitle> <pages> 1-20. </pages>
Reference-contexts: It is concerned with the understanding or interpretation of programs written in the language and prediction of the the output of such programs. Early efforts in formalizing the syntax dates back to 1963 when Naur <ref> [31] </ref> defined the syntax of Algol 60 using the Backus Naur Form (BNF). Since then, context-free grammars that are similar to BNFs, have been used extensively to specify the syntax of programming languages. The formal specification of the semantics of programming languages has also been keenly pursued.
Reference: [32] <author> Olcoz, S. </author> <title> A formal model of VHDL using colored petri nets. In Formal Semantics for VHDL, C.D. </title> <editor> Kloos and P.T. Breuer, Eds., </editor> <volume> vol. </volume> <booktitle> 307 of The Kluwer international series in engineering and computer science. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <address> Madrid, Spain, </address> <month> Mar. </month> <year> 1995, </year> <note> ch. 5. </note>
Reference-contexts: Operational Semantics : specifying how the state of an abstract computer would change while executing the program [51, 53]. Most of the above techniques have been used in the specification of the semantics of VHDL. Other techniques such as Evolving Algebras [7], Petri Nets <ref> [16, 32, 34, 35] </ref>, and Higher Order Logic [21] have also been used and are discussed in detail in the following sections. In general, the formal semantics of a language has been used to clarify the informal semantics. <p> However, no proofs have yet been demonstrated. The characterization restricts itself to variables and signals of type bit, single entity-architecture pairs, and non-zero delayed signal assignments. Olcoz and Colom <ref> [32, 34, 35] </ref> use colored Petri Nets (CPNs) to model elaborated VHDL. The formalization using CPNs consists of the following basic elements: (i) a collection of user-defined processes, (ii) a kernel process, and (iii) a reliable network communication subsystem between the processes.
Reference: [33] <author> Olcoz, S., and Colom, J. M. </author> <title> Toward a formal semantics of IEEE standard VHDL 1076. In EuroDAC. </title> <publisher> IEEE Computer Society Press, </publisher> <address> Hamburg, Germany, </address> <year> 1993, </year> <pages> pp. 526-531. </pages>
Reference: [34] <author> Olcoz, S., and Colom, J. M. </author> <title> Toward a formal semantics of IEEE std. VHDL 1076. </title> <booktitle> In Proceedings of the European Design and Automation Conference with EURO-VHDL '93 (Hamburg, </booktitle> <address> FRG, </address> <month> Sept. </month> <year> 1993), </year> <editor> R. Camposano, Ed., </editor> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 526-533. </pages>
Reference-contexts: Operational Semantics : specifying how the state of an abstract computer would change while executing the program [51, 53]. Most of the above techniques have been used in the specification of the semantics of VHDL. Other techniques such as Evolving Algebras [7], Petri Nets <ref> [16, 32, 34, 35] </ref>, and Higher Order Logic [21] have also been used and are discussed in detail in the following sections. In general, the formal semantics of a language has been used to clarify the informal semantics. <p> However, no proofs have yet been demonstrated. The characterization restricts itself to variables and signals of type bit, single entity-architecture pairs, and non-zero delayed signal assignments. Olcoz and Colom <ref> [32, 34, 35] </ref> use colored Petri Nets (CPNs) to model elaborated VHDL. The formalization using CPNs consists of the following basic elements: (i) a collection of user-defined processes, (ii) a kernel process, and (iii) a reliable network communication subsystem between the processes.
Reference: [35] <author> Olcoz, S., and Colom, J. M. </author> <title> A Colored Petri Net Model of VHDL. For mal Methods in System Design 7, </title> <address> 1/2 (Aug. </address> <year> 1995), </year> <pages> 101-124. </pages> <publisher> Kluwer Academic Publishers, ISSN: </publisher> <pages> 0925-9856. </pages>
Reference-contexts: Operational Semantics : specifying how the state of an abstract computer would change while executing the program [51, 53]. Most of the above techniques have been used in the specification of the semantics of VHDL. Other techniques such as Evolving Algebras [7], Petri Nets <ref> [16, 32, 34, 35] </ref>, and Higher Order Logic [21] have also been used and are discussed in detail in the following sections. In general, the formal semantics of a language has been used to clarify the informal semantics. <p> However, no proofs have yet been demonstrated. The characterization restricts itself to variables and signals of type bit, single entity-architecture pairs, and non-zero delayed signal assignments. Olcoz and Colom <ref> [32, 34, 35] </ref> use colored Petri Nets (CPNs) to model elaborated VHDL. The formalization using CPNs consists of the following basic elements: (i) a collection of user-defined processes, (ii) a kernel process, and (iii) a reliable network communication subsystem between the processes.
Reference: [36] <author> Owre, S., Rajan, S., Rushby, J., Shankar, N., and Srivas, M. PVS: </author> <title> Combining specification, proof checking, and model checking. In Computer-Aided Verification, </title> <address> CAV '96 (New Brunswick, NJ, </address> <month> July/August </month> <year> 1996), </year> <editor> R. Alur and T. A. Henzinger, Eds., </editor> <volume> vol. </volume> <booktitle> 1102 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 411-414. </pages>
Reference: [37] <author> Owre, S., Rushby, J. M., and Shankar, N. PVS: </author> <title> A prototype verification sys tem. </title> <booktitle> In 11th International Conference on Automated Deduction (CADE) (Saratoga, </booktitle> <address> NY, </address> <month> June </month> <year> 1992), </year> <editor> D. Kapur, Ed., </editor> <volume> vol. </volume> <booktitle> 607 of Lecture Notes in Artificial Intelligence, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 748-752. </pages>
Reference: [38] <author> Owre, S., Shankar, N., and Rushby, J. M. </author> <title> The PVS Specification Language. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> Feb. </month> <year> 1993. </year> <note> A new edition for PVS Version 2 is expected in late 1996. </note>
Reference-contexts: Accordingly, optimizations that transform descriptions from one form to another can be formally verified. The framework consists of the following: 1. A translator that accepts two VHDL descriptions and a set of user-specified sig nals, and generates a theorem in PVS <ref> [15, 38, 39, 47] </ref>. 2. A static semantics embedded in PVS that facilitates the representation of VHDL constructs. 3. A dynamic semantics embedded in PVS that denotes what happens when a VHDL program is simulated. <p> The PVS Language Reference Manual <ref> [38] </ref> defines four main forms of type declarations, namely: (i) uninterpreted type declarations, (ii) uninterpreted subtype declarations, (iii) interpreted type declarations, and (iv) enumeration type declarations. Uninterpreted type declarations introduce a type that has almost no constraints on the implementation of the specification. <p> Since PVS follows higher-order logic the term constant also refers to functions and relations. Hence, the declaration cons : [ T, ud list -&gt; (cons?) ] declares a constant cons, the arity of which is non-zero. Recursive Definitions The PVS Language Reference Manual <ref> [38] </ref> defines that recursive definitions of functions are also treated as constant declarations. The defining expression contains the keyword RECURSIVE and a measure function. The measure function generates a termination type correctness condition which needs to be discharged in-order that the function be well-defined. <p> The defined rule induct applies a given induction rule on a variable name supplied. The variable must be universally quantified at the outermost level in the formula. For more information on strategies the reader in encouraged to refer the Prover Reference Manual <ref> [38] </ref>. 31 Chapter 4 The Static Model The Static Model is a representation of the static constructs of VHDL in terms of sets, tuples, and sequences. The static constructs are the elements of VHDL such as signals, variables, statements, types, and so on.
Reference: [39] <author> Owre, S., Shankar, N., and Rushby, J. M. </author> <title> User Guide for the PVS Specifi cation and Verification System. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> Feb. </month> <year> 1993. </year> <note> A new edition for PVS Version 2 is expected in late 1996. </note>
Reference-contexts: Accordingly, optimizations that transform descriptions from one form to another can be formally verified. The framework consists of the following: 1. A translator that accepts two VHDL descriptions and a set of user-specified sig nals, and generates a theorem in PVS <ref> [15, 38, 39, 47] </ref>. 2. A static semantics embedded in PVS that facilitates the representation of VHDL constructs. 3. A dynamic semantics embedded in PVS that denotes what happens when a VHDL program is simulated.
Reference: [40] <author> Pandey, S. L. </author> <title> A Model for the Dynamic Semantics of VHDL for CAD Tool Optimization. </title> <type> Master's thesis, </type> <institution> University of Cincinnati, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: In a similar fashion, if all the sequential statements that form a part of the loop statement do not contribute to a change in the driving value, a null value is contributed by the loop statement. In an earlier effort <ref> [40] </ref>, axioms were defined to assert that for a signal that has no source, its driving value is the initial value for all the time.
Reference: [41] <author> Perry, D. L. </author> <title> VHDL, 2nd ed. </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY, </address> <year> 1994. </year>
Reference-contexts: The current standard for the language is IEEE Std 1076-1993 and is specified in the Language Reference Manual [25]. In addition to the Language Reference Manual (LRM), several reader friendly books describing 33 VHDL are available <ref> [3, 4, 41] </ref>. VHDL is currently used in the design, development, verification, synthesis, and testing of hardware designs. The primary abstraction of a hardware description in VHDL is a design entity. It represents a hardware design that has a well-defined input and output and performs a well-defined function.
Reference: [42] <author> Peterson, G., Willis, J., and Wilsey, P. </author> <title> Advanced intermediate representa tion with extensibility. </title> <note> http://www.ececs.uc.edu/~paw/aire/, January 1997. </note>
Reference-contexts: A static semantics embedded in PVS that facilitates the representation of VHDL constructs. 3. A dynamic semantics embedded in PVS that denotes what happens when a VHDL program is simulated. The translator (SCRAM) <ref> [42, 54] </ref> consists of a front end parser that checks for syntactic 2 well-formedness of VHDL descriptions. The result of successful parsing is a representation for the input VHDL program in the AIRE/CE Intermediate Format (IF) [42, 54]. <p> The translator (SCRAM) <ref> [42, 54] </ref> consists of a front end parser that checks for syntactic 2 well-formedness of VHDL descriptions. The result of successful parsing is a representation for the input VHDL program in the AIRE/CE Intermediate Format (IF) [42, 54]. From the AIRE/CE representation for the two descriptions and an indication of the set of signals to watch, the PVS code generator outputs a theorem in PVS.
Reference: [43] <author> R. Chapman, and Deok-Hyun Hwang. </author> <title> A process-algebraic semantics for VHDL. </title> <booktitle> In SIG-VHDL Spring '96 Working Conference (Dresden, </booktitle> <address> Germany, </address> <month> May </month> <year> 1996), </year> <editor> W. Ecker, Ed., </editor> <publisher> Shaker Verlag, </publisher> <pages> pp. 157-168. </pages>
Reference-contexts: Denotational Semantics : describing what is computed by a program in-terms of mathematical functions for the program or the sub-elements of the program [5, 17, 30]. Algebraic Semantics : describing the meaning of a program using an algebra. The algebraic relationships are expressed using axioms 8 and equations <ref> [43] </ref>. Axiomatic Semantics : defining the meaning of the program using a set of ax ioms [6]. It provides a set of assertions about the preconditions and the post-conditions that need to hold true. Properties of programs may be inferred from the set of axioms provided.
Reference: [44] <author> Read, S., and Edwards, M. </author> <title> A Formal Semantics of VHDL in Boyer-Moore Logic. </title> <booktitle> In 2nd International Conference on Concurrent Engineering and EDA (San Diego, </booktitle> <address> CA, </address> <year> 1994), </year> <month> SCSI. </month>
Reference-contexts: For example, the operations of addition, subtraction, and so on are defined using the definitional principle. The rules of inference in the logic are propositional logic, equality, and mathematical induction. The logic is fully supported by the Nqthm theorem prover [12]. Read and Edwards <ref> [44] </ref> present a mathematical definition of a semantics preserving translation to a subset of VHDL. Essentially, the system operates by transforming VHDL descriptions into equivalent programs in Boyer-Moore Logic in two stages.
Reference: [45] <author> Rushby, J., and Stringer-Calvert, D. W. J. </author> <title> A less elementary tutorial for the PVS specification and verification system. </title> <type> Tech. Rep. </type> <institution> SRI-CSL-95-10, Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> June </month> <year> 1995. </year> <note> Revised, </note> <month> July </month> <year> 1996. </year> <title> Available, with specification files, </title> <note> from http://www.csl.sri. com/csl95-10.html. </note>
Reference: [46] <author> Shankar, N., and Owre, S. </author> <title> PVS Semantics. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <year> 1996. </year> <note> Draft available at URL http://www. csl.sri.com/shankar/datatypes-96.ps.gz. </note>
Reference: [47] <author> Shankar, N., Owre, S., and Rushby, J. M. </author> <title> The PVS Proof Checker: A Reference Manual. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> Feb. </month> <year> 1993. </year> <note> A new edition for PVS Version 2 is expected in late 1996. </note>
Reference-contexts: Accordingly, optimizations that transform descriptions from one form to another can be formally verified. The framework consists of the following: 1. A translator that accepts two VHDL descriptions and a set of user-specified sig nals, and generates a theorem in PVS <ref> [15, 38, 39, 47] </ref>. 2. A static semantics embedded in PVS that facilitates the representation of VHDL constructs. 3. A dynamic semantics embedded in PVS that denotes what happens when a VHDL program is simulated. <p> In order to facilitate proof maintenance, the prover allows partial and completed proofs to be edited and re-executed. The prover also presents the user with L A T E X outputs of the proof. However, PVS has thus far not been very successful in presenting user readable proofs <ref> [47] </ref>. The PVS prover uses sequent calculus to manipulate and prove lemmas and theorems. A sequent of the form 2 The term PVS prover may be misleading.
Reference: [48] <author> Shankar, N., Owre, S., and Rushby, J. M. </author> <title> PVS Tutorial. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> Feb. </month> <year> 1993. </year> <title> Also appears in Tutorial Notes, </title> <booktitle> Formal Methods Europe '93: Industrial-Strength Formal Methods, </booktitle> <pages> pages 357-406, </pages> <address> Odense, Denmark, </address> <month> April </month> <year> 1993. </year>
Reference: [49] <author> Sommerville, I. </author> <title> Software Engineering, 4th ed. </title> <publisher> Addison-Wesley Publishing Com pany, </publisher> <year> 1992. </year> <month> 91 </month>
Reference-contexts: The software life-cycle consists of requirements analysis, design, construction, testing, installation, and maintenance <ref> [49] </ref>. During requirements analysis, the needs of the project that a computer system must meet are identified. In the development of semantics, the constraints of the language, as specified in the Language Reference Manual, are captured formally.
Reference: [50] <author> Umamageswaran, K. </author> <title> PVS files on the framework for proving equivalences of vhdl descriptions, </title> <month> September </month> <year> 1997. </year> <note> Available on the WWW from http://www. ececs.uc.edu/~kodi/masters_thesis/proofs/. </note>
Reference-contexts: both the descriptions. 5.4.1 Effective Values The VHDL LRM (x12.6.2, L481) defines the effective value of a signal to be "the value obtainable by evaluating a reference to the signal within an expression." The effective 1 The compete set of axioms and the theorems can be found on the WWW <ref> [50] </ref> 47 value of a signal is computed using the driving values contributed by every process statement that drives the signal. If a process statement does not drive a signal it is ignored in the computation of effective value of the signal. <p> For more information on the dynamic model the interested reader is encouraged to read the specification and the proofs from the WWW <ref> [50] </ref>. 52 Chapter 6 Validation of the Semantics The evolution of a semantics is similar to that of software. The software life-cycle consists of requirements analysis, design, construction, testing, installation, and maintenance [49]. During requirements analysis, the needs of the project that a computer system must meet are identified. <p> This, however, cannot be true, since any signal assignment statement in the process PQ, must either be present in the process P, or the process Q; Case 7 is thus discharged. The proofs of cases 3 and 5 are complicated and can be found elsewhere <ref> [50] </ref>. 7.1.3 Proof embedding in PVS This section deals with the embedding of the proof of process folding in PVS, to give the reader an idea of how a proof is performed in PVS. <p> Hence, using the definition of the function no_resolved (shown below) the sub-goal is proven. The proof of other sub-goals is complicated and the interested reader is encouraged to read the proofs from the World Wide Web <ref> [50] </ref>. no_resolved (p_1, p_2): bool = (FORALL (s: signal_t): NOT (drives?(os_v (p_1), s) & drives?(os_v (p_1), s))) 7.2 Signal Collapsing 7.2.1 Informal Specification Signal Collapsing is an optimization that combines two conditional concurrent signal assignment statements into one by eliminating an intermediate signal. <p> Hence there cannot exist such an s. This leads to a contradiction and the sub-goal is discharged. The proof for case 5 is complicated and can be found elsewhere <ref> [50] </ref>. 67 Chapter 8 Applications to Practical Use A static and a dynamic model for VHDL embedded in PVS was proposed in Chapters 4 and 5 and the validity of the models was demonstrated in Chapter 6.
Reference: [51] <author> Van Tassel, J. P. </author> <title> A formalisation of the VHDL simulation cycle. </title> <type> Technical Report 249, </type> <institution> University of Cambridge Computer Laboratory, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: It provides a set of assertions about the preconditions and the post-conditions that need to hold true. Properties of programs may be inferred from the set of axioms provided. Operational Semantics : specifying how the state of an abstract computer would change while executing the program <ref> [51, 53] </ref>. Most of the above techniques have been used in the specification of the semantics of VHDL. Other techniques such as Evolving Algebras [7], Petri Nets [16, 32, 34, 35], and Higher Order Logic [21] have also been used and are discussed in detail in the following sections.
Reference: [52] <author> Van Tassel, J. P. Femto-VHDL: </author> <title> The Semantics of a Subset of VHDL and its Embedding in the HOL Proof Assistant. </title> <type> PhD thesis, </type> <institution> University of Cambridge Computer Laboratory, </institution> <address> Cambridge, England, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: Most current investigations into the formal semantics of VHDL attempt to prove the equivalence of two system descriptions at different levels of abstraction. The verification goal is often observational equivalence <ref> [52] </ref> of a behavioral level specification and an implementation level specification. Although informative and useful, such verifications apply only to specific design instances. The application of formal methods to prove the correctness of optimizations to the simulation process has not been investigated. <p> Existing semantic definitions of VHDL restrict themselves to specific types in VHDL (an axiomatic definition by Bickford and Jamsek [6] being an exception). Although Van Tassel <ref> [52] </ref> provides a framework for proving symbolic equivalence of specific descriptions, there does not exist a semantic model that handles symbolic verification of general VHDL descriptions. <p> (destn: signal_t, prejection: nat, waveform: property_t): sa? va (destn: variable_t, expression: property_t): va? if_ (condition: property_t, then_: list [seq_stmt_t], else_: list [seq_stmt_t]): if_? loop (condition: property_t, os: list [seq_stmt_t]): loop? END seq_stmt_t constant and hence the need for it is not felt in the formal representation. 5.3 Equivalence Van Tassel <ref> [52] </ref> defines equivalence of VHDL descriptions based on the user suppling some signals of interest. In this thesis two VHDL descriptions are equivalent if (i) the same set of input signals is provided to both the descriptions, and (ii) they produce the same waveforms for the set of user-specified signals. <p> It is hence, commonplace to test as many features of the language as possible (within a set of resource constraints). Kloos and Breuer [27] note that, for a semantics of VHDL to be considered cor-rect/acceptable, it has to be validated against Van Tassel's semantics <ref> [52] </ref> or another strongly established semantics. However, note that since the semantics presented in this effort has a greater coverage than Van Tassel's semantics, we are only able to validate the semantics on the results of the common portion.
Reference: [53] <author> Van Tassel, J. P. </author> <title> An operational semantics for a subset of VHDL. In Formal Semantics for VHDL, C.D. </title> <editor> Kloos and P.T. Breuer, Eds., </editor> <volume> vol. </volume> <booktitle> 307 of The Kluwer international series in engineering and computer science. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <address> Madrid, Spain, </address> <month> Mar. </month> <year> 1995, </year> <note> ch. 3. </note>
Reference-contexts: It provides a set of assertions about the preconditions and the post-conditions that need to hold true. Properties of programs may be inferred from the set of axioms provided. Operational Semantics : specifying how the state of an abstract computer would change while executing the program <ref> [51, 53] </ref>. Most of the above techniques have been used in the specification of the semantics of VHDL. Other techniques such as Evolving Algebras [7], Petri Nets [16, 32, 34, 35], and Higher Order Logic [21] have also been used and are discussed in detail in the following sections.
Reference: [54] <author> Willis, J. C., Wilsey, P. A., Peterson, G. D., Hines, J., Zamfirescu, A., Martin, D. E., and Newshutz, R. N. </author> <title> Advanced intermediate representation with extensibility (aire). </title> <booktitle> In VHDL Users' Group Fall 1996 Conference (October 1996), </booktitle> <pages> pp. 33-40. </pages>
Reference-contexts: A static semantics embedded in PVS that facilitates the representation of VHDL constructs. 3. A dynamic semantics embedded in PVS that denotes what happens when a VHDL program is simulated. The translator (SCRAM) <ref> [42, 54] </ref> consists of a front end parser that checks for syntactic 2 well-formedness of VHDL descriptions. The result of successful parsing is a representation for the input VHDL program in the AIRE/CE Intermediate Format (IF) [42, 54]. <p> The translator (SCRAM) <ref> [42, 54] </ref> consists of a front end parser that checks for syntactic 2 well-formedness of VHDL descriptions. The result of successful parsing is a representation for the input VHDL program in the AIRE/CE Intermediate Format (IF) [42, 54]. From the AIRE/CE representation for the two descriptions and an indication of the set of signals to watch, the PVS code generator outputs a theorem in PVS.
Reference: [55] <author> Wilsey, P. A. </author> <title> Formal models of digital systems compatible with VHDL, </title> <note> 1994. (available on the WWW at http://www.ececs.uc.edu/~paw/rassp/). </note>
Reference-contexts: The static constructs are the elements of VHDL such as signals, variables, statements, types, and so on. The static model provides a means for the representation of a VHDL program in a formal framework. The static model was developed as a part of an earlier effort <ref> [55] </ref> and includes formulas that define well-formedness, static equivalence, and reduction algebra. The formulas that define well-formedness are a set of axioms describing conditions which must hold true for the static model to be considered correct. <p> For a complete description of the static model and the well-formedness axioms, the interested reader is urged to refer the working document <ref> [55] </ref>. 4.5 Equivalence of Static Constructs The VHDL LRM describes the equivalence of certain static constructs of VHDL. For example, every concurrent statement has an equivalent process statement. The static model includes a set of formulas that assert these conditions. <p> The completeness property of the 40 algebra has been specified and verified using the PVS prover. A complete description of the reduction algebra and the completeness property can be found in the working document <ref> [55] </ref>. 41 Chapter 5 The Dynamic Model Chapter 4 dealt with defining the static characteristics of a VHDL description by representing VHDL in terms of a mathematical model called the Static Model. A reduced model was then obtained by applying the reduction algebra to the Static Model.
Reference: [56] <author> Woodcock, J., and Davies, J. </author> <title> Using Z Specification, Refinement, and Proof. </title> <publisher> Prentice Hall, </publisher> <address> London, </address> <year> 1996. </year> <month> 92 </month>
Reference-contexts: The semantics defines rules for the operators on the boolean type, such as nand, not, and and. 6.3 DeMorgan Property DeMorgan property is a logical theorem that asserts that the complement of a conjunction is the disjunction of the complements and vice-versa <ref> [56] </ref>. In mathematical notation, :(A ^ B) = :A _ :B (6.1) 6.3.1 Negation of a Conjunction is a Disjunction of Negations This example specifies in VHDL, the DeMorgan property shown in the Equation 6.1, and demonstrates the equivalence.
References-found: 56

