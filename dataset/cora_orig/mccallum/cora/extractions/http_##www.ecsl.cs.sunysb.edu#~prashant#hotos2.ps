URL: http://www.ecsl.cs.sunysb.edu/~prashant/hotos2.ps
Refering-URL: http://www.cs.sunysb.edu/~prashant/
Root-URL: http://www.cs.sunysb.edu
Email: fchiueh, ganesh, prashantg@cs.sunysb.edu  
Title: Intra-Address Space Protection Using Segmentation Hardware  
Author: Tzi-cker Chiueh Ganesh Venkitachalam Prashant Pradhan 
Address: NY 11794-4400  
Affiliation: Computer Science Department State University of New York at Stony Brook Stony Brook,  
Abstract: The technological evolution towards extensible software systems and component-based software development requires efficient, flexible and easy-to-use protection mechanisms to isolate software modules residing in the same address space. While a number of software-based approaches have been proposed in the last several years, no clear winner emerges that satisfactorily addresses all the design issues involved in establishing multiple protection domains within an address space. This paper describes a novel intra-address space protection mechanism based on the segmentation and paging hardware in Intel's x86 architecture. Measurements from the prototype implementation indicate that a null protected procedure call and return costs about 147 CPU cycles on a Pentium 200MHz machine. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Stonebraker, M.; Kemnitz, G., </author> <title> "The POSTGRES next-generation database management system ," Communications of the ACM, </title> <editor> vol.34, no.10, p. </editor> <month> 78-92, Oct. </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Two major software applications trends call for operating systems support for establishing protection boundaries among modules that execute in the same address space. First, the notion of dynamic extensibility has prevailed in almost every major software systems area, ranging from extensible database systems <ref> [1] </ref> to which third-party data blades can be added to perform type-specific data processing, extensible operating systems [2, 3, 4] that support application-specific resource management policies, to programmable active network devices [6, 5] that allow protocol computation tailored to individual applications.
Reference: [2] <author> Bershad, B.N.; Savage, S.; Pardyak, P.; Sirer, E.G.; Fiuczynski, M.E.; Becker, D.; Chambers, C.; Eggers, S., </author> <title> "Extensibility, safety and performance in the SPIN operating system ," ACM Operating Systems Review, </title> <editor> vol.29, no.5, p. </editor> <month> 267-84, Dec. </month> <year> 1995. </year>
Reference-contexts: First, the notion of dynamic extensibility has prevailed in almost every major software systems area, ranging from extensible database systems [1] to which third-party data blades can be added to perform type-specific data processing, extensible operating systems <ref> [2, 3, 4] </ref> that support application-specific resource management policies, to programmable active network devices [6, 5] that allow protocol computation tailored to individual applications. A key feature of extensible systems is its support of live addition and removal of software modules into a running address space. <p> Although a number of approaches have been proposed to provide intra-address space protection, such as software fault isolation [8], extensions written in a type-safe language <ref> [2] </ref> or interpreted language [9], and proof-carrying code [10], there is no clear winner that addresses all the following issues: flexibility in specifying extensions, run-time performance overhead, and practical usability.
Reference: [3] <author> Kaashoek, M.F.; Engler, D.R.; Ganger, G.R.; Briceno, H.M.; Hunt, R.; Mazieres, D.; Pinckney, T.; Grimm, R.; Jannotti, J.; Mackenzie, K., </author> <title> "Application performance and flexibility on exokernel systems," </title> <journal> ACM Operating Systems Review, vol.31, no.5, </journal> <volume> p. </volume> <pages> 52-65, </pages> <month> Dec. </month> <year> 1997. </year>
Reference-contexts: First, the notion of dynamic extensibility has prevailed in almost every major software systems area, ranging from extensible database systems [1] to which third-party data blades can be added to perform type-specific data processing, extensible operating systems <ref> [2, 3, 4] </ref> that support application-specific resource management policies, to programmable active network devices [6, 5] that allow protocol computation tailored to individual applications. A key feature of extensible systems is its support of live addition and removal of software modules into a running address space.
Reference: [4] <author> Seltzer, M.I.; Endo, Y.; Small, C.; Smith, K.A., </author> <title> "Dealing with disaster: surviving misbehaved kernel extensions," </title> <journal> ACM Operating Systems Review, vol.30, </journal> <volume> p. </volume> <pages> 213-27, </pages> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: First, the notion of dynamic extensibility has prevailed in almost every major software systems area, ranging from extensible database systems [1] to which third-party data blades can be added to perform type-specific data processing, extensible operating systems <ref> [2, 3, 4] </ref> that support application-specific resource management policies, to programmable active network devices [6, 5] that allow protocol computation tailored to individual applications. A key feature of extensible systems is its support of live addition and removal of software modules into a running address space.
Reference: [5] <author> Tennenhouse, D.L.; Smith, J.M.; Sincoskie, W.D.; Wetherall, D.J.; Minden, G.J., </author> <title> "A survey of active network research," </title> <journal> IEEE Communications Magazine, vol.35, no.1, </journal> <volume> p. </volume> <pages> 80-6, </pages> <month> Jan. </month> <year> 1997. </year>
Reference-contexts: the notion of dynamic extensibility has prevailed in almost every major software systems area, ranging from extensible database systems [1] to which third-party data blades can be added to perform type-specific data processing, extensible operating systems [2, 3, 4] that support application-specific resource management policies, to programmable active network devices <ref> [6, 5] </ref> that allow protocol computation tailored to individual applications. A key feature of extensible systems is its support of live addition and removal of software modules into a running address space.
Reference: [6] <author> Alexander, D.S.; Arbaugh, W.A.; Keromytis, A.D.; Smith, J.M., </author> <title> "A secure active network environment architecture: realization in SwitchWare," </title> <journal> IEEE Network, vol.12, </journal> <volume> no.3, </volume> <pages> p. 37-45, </pages> <month> May-June </month> <year> 1998. </year>
Reference-contexts: the notion of dynamic extensibility has prevailed in almost every major software systems area, ranging from extensible database systems [1] to which third-party data blades can be added to perform type-specific data processing, extensible operating systems [2, 3, 4] that support application-specific resource management policies, to programmable active network devices <ref> [6, 5] </ref> that allow protocol computation tailored to individual applications. A key feature of extensible systems is its support of live addition and removal of software modules into a running address space.
Reference: [7] <author> Mendelsohn, N., </author> <title> "Operating Systems for Component Software Environments," </title> <booktitle> The 6th Workshop on Hot Topics in Operating Systems (HotOS-VI), </booktitle> <address> Cape Cod, MA., </address> <month> May </month> <year> 1997. </year>
Reference-contexts: Therefore, an effective and efficient mechanism to protect the running core system from dynamically inserted modules is crucial to the long-term viability of extensible systems. Second, component-based software development (CBSD) <ref> [7] </ref> is emerging as the dominant development methodology because it significantly improves software productivity by encouraging modularity and re-usability.
Reference: [8] <author> Wahbe, R.; Lucco, S.; Anderson, T.E.; Graham, </author> <title> S.L., "Efficient software-based fault isolation," </title> <journal> ACM Operating Systems Review, vol.27, no.5, </journal> <volume> p. </volume> <pages> 203-16, </pages> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: Although a number of approaches have been proposed to provide intra-address space protection, such as software fault isolation <ref> [8] </ref>, extensions written in a type-safe language [2] or interpreted language [9], and proof-carrying code [10], there is no clear winner that addresses all the following issues: flexibility in specifying extensions, run-time performance overhead, and practical usability.
Reference: [9] <author> McCanne, S.; Jacobson, V., </author> <title> "The BSD packet filter: a new architecture for user-level packet capture," </title> <booktitle> Proceedings of the Winter 1993 USENIX Conference, p. </booktitle> <pages> 259-69, </pages> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: Although a number of approaches have been proposed to provide intra-address space protection, such as software fault isolation [8], extensions written in a type-safe language [2] or interpreted language <ref> [9] </ref>, and proof-carrying code [10], there is no clear winner that addresses all the following issues: flexibility in specifying extensions, run-time performance overhead, and practical usability.
Reference: [10] <author> Necula, G.C.; Lee, P., </author> <title> "Safe kernel extensions without run-time checking," </title> <journal> ACM Operating Systems Review, vol.30, spec. issue., </journal> <volume> p. </volume> <pages> 229-43, </pages> <month> Oct. </month> <year> 1996. </year> <month> 6 </month>
Reference-contexts: Although a number of approaches have been proposed to provide intra-address space protection, such as software fault isolation [8], extensions written in a type-safe language [2] or interpreted language [9], and proof-carrying code <ref> [10] </ref>, there is no clear winner that addresses all the following issues: flexibility in specifying extensions, run-time performance overhead, and practical usability.
References-found: 10

