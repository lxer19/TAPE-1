URL: http://www.acm.org/jacm/papers/2055.ps
Refering-URL: http://www.acm.org/jacm/Upcoming.html
Root-URL: 
Email: [avg,satish]@research.nj.nec.com  
Title: Beyond the Flow Decomposition Barrier  
Author: Andrew V. Goldberg Satish Rao 
Keyword: tree problem, the parametric flow problem, and the approximate s-t cut problems. Keywords: Algorithms, combinatorial optimization, maximum flows. Categories and Subject Descriptions: F.2.2, G.2.2.  
Date: October 1997; revised April 1998  
Address: 4 Independence Way Princeton, NJ 08540  
Affiliation: NEC Research Institute  
Abstract: We introduce a new approach to the maximum flow problem. This approach is based on assigning arc lengths based on the residual flow value and the residual arc capacities. Our approach leads to an O(min(n 2=3 ; m 1=2 )m log( n 2 m ) log U ) time bound for a network with n vertices, m arcs, and integral arc capacities in the range [1; : : : ; U ]. This is a fundamental improvement over the previous time bounds. We also improve bounds for the Gomory-Hu 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. M. Adel'son-Vel'ski, E. A. Dinits, and A. V. Karzanov. </author> <title> Flow Algorithms. </title> <publisher> Nauka, </publisher> <address> Moscow, </address> <year> 1975. </year> <note> In Russian. </note>
Reference-contexts: A natural variant of this method, the shortest augmenting path algorithm, was shown to be polynomial by Dinitz [14] and Edmonds and Karp [16]. Capacity scaling, developed by Edmonds and Karp [16] and Dinitz [15], also gives polynomial algorithms for the problem. (See also [20].) Classical books <ref> [1, 19] </ref> describe earlier work in detail. Most efficient algorithms for the maximum flow problem are based on the blocking flow and the push-relabel methods. The first blocking flow algorithm was developed by Dinitz [14] in the framework of the augmenting path approach. <p> In the case of independent discoveries, we give the date of the first one. 2 vertices in the input network by n and the number of arcs by m. For polynomial algorithms, we assume that arc capacities are integers in the range <ref> [1; : : : ; U ] </ref>. Strongly polynomial algorithms do not need this assumption. We use the similarity assumption of Gabow [20], log U = O (log n), to compare polynomial and strongly polynomial algorithms.
Reference: [2] <author> R. K. Ahuja and J. B. Orlin. </author> <title> A Fast and Simple Algorithm for the Maximum Flow Problem. </title> <journal> Oper. Res., </journal> <volume> 37 </volume> <pages> 748-759, </pages> <year> 1989. </year>
Reference-contexts: 2 p m) [9] 9 1980 Galil & Naamad O (nm log 2 n) [21] 10 1983 Sleator & Tarjan O (nm log n) [41] 11 1986 Goldberg & Tarjan O (nm log (n 2 =m)) [26] 12 1987 Ahuja & Orlin O (nm + n 2 log U ) <ref> [2] </ref> 13 1987 Ahuja et al. O (nm log (n p 14 1989 Cheriyan & Hagerup E (nm + n 2 log 2 n) [7] 15 1990 Cheriyan et al.
Reference: [3] <author> R. K. Ahuja, J. B. Orlin, and R. E. Tarjan. </author> <title> Improved Time Bounds for the Maximum Flow Problem. </title> <journal> SIAM J. Comput., </journal> <volume> 18 </volume> <pages> 939-954, </pages> <year> 1989. </year>
Reference: [4] <author> N. Alon. </author> <title> Generating Pseudo-Random Permutations and Maximum Flow Algorithms. </title> <journal> Information Processing Let., </journal> <volume> 35 </volume> <pages> 201-204, </pages> <year> 1990. </year>
Reference-contexts: O (nm log (n p 14 1989 Cheriyan & Hagerup E (nm + n 2 log 2 n) [7] 15 1990 Cheriyan et al. O (n 3 = log n) [8] 16 1990 Alon O (nm + n 8=3 log n) <ref> [4] </ref> 17 1992 King et al. O (nm + n 2+* ) [33] 18 1993 Phillips & Westbrook O (nm (log m=n n + log 2+* n)) [39] 19 1994 King et al.
Reference: [5] <author> R. J. Anderson and J. C. Setubal. </author> <title> Goldberg's Algorithm for the Maximum Flow in Perspective: a Computational Study. </title> <editor> In D. S. Johnson and C. C. McGeoch, editors, </editor> <title> Network Flows and Matching: </title> <booktitle> First DIMACS Implementation Challenge, </booktitle> <pages> pages 1-18. </pages> <publisher> AMS, </publisher> <year> 1993. </year>
Reference-contexts: These implementations are the result of intensive experimental research; see for example <ref> [5, 10, 12, 24, 37] </ref>. It would be interesting to see if the ideas introduced in this paper lead to practical improvements. An interesting open problem is if the flow decomposition bound can be improved upon by a strongly polynomial algorithm.
Reference: [6] <author> A. A. Bentzur and D. R. Karger. </author> <title> Approximating s-t Minimum Cuts in ~ O(n 2 ) Time. </title> <booktitle> In Proc. 28th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 47-56, </pages> <year> 1996. </year>
Reference-contexts: Note that this time bound does not depend on U . In the special case of undirected graphs, Benczur and Karger <ref> [6] </ref> show that a cut with capacity of at most (1 + *) of optimal can be constructed in E fl (n 2 =* 2 ) time using nonuniform sampling. <p> We can find this set in O (m) time. This set defines an s-t cut of capacity at most mffi. Thus we set F = mffi. For the rest of this section we consider the special case of undirected graphs. For this case, Benczur and Karger <ref> [6] </ref> introduce a nonuniform random sampling technique that has the following properties. Lemma 7.2 [6] Given a graph G and an error parameter *, in O (m log 3 n) time we can construct a graph G 0 such that with high probability, G 0 has the following properties: * G <p> Thus we set F = mffi. For the rest of this section we consider the special case of undirected graphs. For this case, Benczur and Karger <ref> [6] </ref> introduce a nonuniform random sampling technique that has the following properties. Lemma 7.2 [6] Given a graph G and an error parameter *, in O (m log 3 n) time we can construct a graph G 0 such that with high probability, G 0 has the following properties: * G 0 has O ((n log n)=* 2 ) edges and * the value of
Reference: [7] <author> J. Cheriyan and T. Hagerup. </author> <title> A randomized maximum flow algorithm. </title> <journal> SIAM Journal on Computing, </journal> <volume> 24 </volume> <pages> 203-226, </pages> <year> 1995. </year>
Reference-contexts: O (nm log (n p 14 1989 Cheriyan & Hagerup E (nm + n 2 log 2 n) <ref> [7] </ref> 15 1990 Cheriyan et al. O (n 3 = log n) [8] 16 1990 Alon O (nm + n 8=3 log n) [4] 17 1992 King et al.
Reference: [8] <author> J. Cheriyan, T. Hagerup, and K. Mehlhorn. </author> <title> Can a Maximum Flow be Computed in o(nm) Time? In Proc. </title> <booktitle> ICALP, </booktitle> <year> 1990. </year>
Reference-contexts: O (nm log (n p 14 1989 Cheriyan & Hagerup E (nm + n 2 log 2 n) [7] 15 1990 Cheriyan et al. O (n 3 = log n) <ref> [8] </ref> 16 1990 Alon O (nm + n 8=3 log n) [4] 17 1992 King et al. O (nm + n 2+* ) [33] 18 1993 Phillips & Westbrook O (nm (log m=n n + log 2+* n)) [39] 19 1994 King et al. <p> However, in spite of numerous attempts, no previous algorithm achieves this lower bound in general. For dense graphs, the O (n 3 = log n) algorithm of Cheriyan et al. <ref> [8] </ref> beats this lower bound, but only by using word operations on (log n)-bit integers. The ballpark bound of nm was achieved in 1973 by Dinitz [15].
Reference: [9] <author> B. V. Cherkassky. </author> <title> Algorithm for Construction of Maximal Flows in Networks with Complexity of O(V 2 p E) Operations. Mathematical Methods of Solution of Economical Problems, </title> <booktitle> 7 </booktitle> <pages> 112-125, </pages> <year> 1977. </year> <note> (In Russian). </note>
Reference-contexts: 2 m) n 2 m [14] 5 1972 Edmonds & Karp O (m 2 log U ) m 2 [16] Dinitz [15] 6 1973 Dinitz O (nm log U ) nm [15] Gabow [20] 7 1974 Karzanov O (n 3 ) [32] 8 1977 Cherkassky O (n 2 p m) <ref> [9] </ref> 9 1980 Galil & Naamad O (nm log 2 n) [21] 10 1983 Sleator & Tarjan O (nm log n) [41] 11 1986 Goldberg & Tarjan O (nm log (n 2 =m)) [26] 12 1987 Ahuja & Orlin O (nm + n 2 log U ) [2] 13 1987 Ahuja
Reference: [10] <author> B. V. Cherkassky and A. V. Goldberg. </author> <title> On Implementing Push-Relabel Method for the Maximum Flow Problem. </title> <booktitle> In Proc. 4th Int. Programming and Combinatorial Optimization Conf., </booktitle> <pages> pages 157-171, </pages> <year> 1995. </year>
Reference-contexts: These implementations are the result of intensive experimental research; see for example <ref> [5, 10, 12, 24, 37] </ref>. It would be interesting to see if the ideas introduced in this paper lead to practical improvements. An interesting open problem is if the flow decomposition bound can be improved upon by a strongly polynomial algorithm.
Reference: [11] <author> G. B. Dantzig. </author> <title> Application of the Simplex Method to a Transportation Problem. </title> <editor> In T. C. Koop--mans, editor, </editor> <booktitle> Activity Analysis and Production and Allocation, </booktitle> <pages> pages 359-373. </pages> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1951. </year>
Reference-contexts: 1 Introduction The maximum flow problem and its dual, the minimum cut problem, are classical combinatorial problems with a wide variety of scientific and engineering applications. The maximum flow problem and related flow and cut problems have been studied intensively for over three decades. The network simplex method of Dantzig <ref> [11] </ref> for the transportation problem, published in 1951, solves the maximum flow problem as a natural special case. Soon thereafter, Ford and Fulkerson [18] developed the augmenting path method for the maximum flow problem. <p> Adaptivity is crucial for the time bound improvements. Table 1 gives the history of the maximum flow time bounds. We denote the number of 1 bounds # year discoverer (s) exact ballpark reference 1 1951 Dantzig O (n 2 mU ) n 2 mU <ref> [11] </ref> 2 1955 Ford & Fulkerson O (nmU ) nmU [18] 3 1970 Dinitz O (nm 2 ) nm 2 [14] Edmonds & Karp [16] 4 1970 Dinitz O (n 2 m) n 2 m [14] 5 1972 Edmonds & Karp O (m 2 log U ) m 2 [16] Dinitz
Reference: [12] <author> U. Derigs and W. Meier. </author> <title> Implementing Goldberg's Max-Flow Algorithm | A Computational Investigation. </title> <journal> ZOR | Methods and Models of Operations Research, </journal> <volume> 33 </volume> <pages> 383-403, </pages> <year> 1989. </year>
Reference-contexts: These implementations are the result of intensive experimental research; see for example <ref> [5, 10, 12, 24, 37] </ref>. It would be interesting to see if the ideas introduced in this paper lead to practical improvements. An interesting open problem is if the flow decomposition bound can be improved upon by a strongly polynomial algorithm.
Reference: [13] <author> R. B. Dial. </author> <title> Algorithm 360: Shortest Path Forest with Topological Ordering. </title> <journal> Comm. ACM, </journal> <volume> 12 </volume> <pages> 632-633, </pages> <year> 1969. </year>
Reference-contexts: Since the arc lengths are 0 and 1, we can compute d ` in linear time, for example using Dial's algorithm <ref> [13] </ref>. We compute u f (S k ; T k ) for k = 1; : : : ; d ` (s) as follows. For every k, we initialize u f (S k ; T k ) to zero. Then we examine all arcs (i; j).
Reference: [14] <author> E. A. Dinic. </author> <title> Algorithm for Solution of a Problem of Maximum Flow in Networks with Power Estimation. </title> <journal> Soviet Math. Dokl., </journal> <volume> 11 </volume> <pages> 1277-1280, </pages> <year> 1970. </year>
Reference-contexts: Soon thereafter, Ford and Fulkerson [18] developed the augmenting path method for the maximum flow problem. A natural variant of this method, the shortest augmenting path algorithm, was shown to be polynomial by Dinitz <ref> [14] </ref> and Edmonds and Karp [16]. Capacity scaling, developed by Edmonds and Karp [16] and Dinitz [15], also gives polynomial algorithms for the problem. (See also [20].) Classical books [1, 19] describe earlier work in detail. <p> Most efficient algorithms for the maximum flow problem are based on the blocking flow and the push-relabel methods. The first blocking flow algorithm was developed by Dinitz <ref> [14] </ref> in the framework of the augmenting path approach. Karzanov [32] was the first to state the finding of a blocking flow as a separate problem and to suggest the use of preflows to solve it. <p> We denote the number of 1 bounds # year discoverer (s) exact ballpark reference 1 1951 Dantzig O (n 2 mU ) n 2 mU [11] 2 1955 Ford & Fulkerson O (nmU ) nmU [18] 3 1970 Dinitz O (nm 2 ) nm 2 <ref> [14] </ref> Edmonds & Karp [16] 4 1970 Dinitz O (n 2 m) n 2 m [14] 5 1972 Edmonds & Karp O (m 2 log U ) m 2 [16] Dinitz [15] 6 1973 Dinitz O (nm log U ) nm [15] Gabow [20] 7 1974 Karzanov O (n 3 ) <p> (s) exact ballpark reference 1 1951 Dantzig O (n 2 mU ) n 2 mU [11] 2 1955 Ford & Fulkerson O (nmU ) nmU [18] 3 1970 Dinitz O (nm 2 ) nm 2 <ref> [14] </ref> Edmonds & Karp [16] 4 1970 Dinitz O (n 2 m) n 2 m [14] 5 1972 Edmonds & Karp O (m 2 log U ) m 2 [16] Dinitz [15] 6 1973 Dinitz O (nm log U ) nm [15] Gabow [20] 7 1974 Karzanov O (n 3 ) [32] 8 1977 Cherkassky O (n 2 p m) [9] 9 1980 Galil & Naamad <p> The ballpark bound of nm was achieved in 1973 by Dinitz [15]. In the unit capacity case, the total decomposition path length is O (m) and o (nm) bounds have been known for a long time: Karzanov [31] and independently Even and Tarjan [17] have shown that Dinitz's algorithm <ref> [14] </ref> runs in O (min (n 2=3 ; m 1=2 )m) time on unit capacity networks with no parallel arcs. (We define fl = min (n 2=3 ; m 1=2 ); this term will appear quite often.) This bound is based on the O (fl) bound on the number of blocking <p> A blocking flow in a directed flow network is a flow f where every directed s-t path contains an arc with zero residual capacity. The problem of finding blocking flows in layered networks has been introduced by Dinitz <ref> [14] </ref> in the context of maximum flow algorithms. For more general acyclic networks, the problem was studied by Goldberg and Tarjan [27] in the context of minimum cost flows. Many, but not all, results for layered networks work on acyclic networks and achieve the same time bounds.
Reference: [15] <editor> E. A. Dinic. Metod porazryadnogo sokrashcheniya nevyazok i transportnye zadachi. In Issle-dovaniya po Diskretno Matematike. </editor> <publisher> Nauka, </publisher> <address> Moskva, </address> <year> 1973. </year> <title> In Russian. Title translation: Excess Scaling and Transportation Problems. </title>
Reference-contexts: A natural variant of this method, the shortest augmenting path algorithm, was shown to be polynomial by Dinitz [14] and Edmonds and Karp [16]. Capacity scaling, developed by Edmonds and Karp [16] and Dinitz <ref> [15] </ref>, also gives polynomial algorithms for the problem. (See also [20].) Classical books [1, 19] describe earlier work in detail. Most efficient algorithms for the maximum flow problem are based on the blocking flow and the push-relabel methods. <p> 2 1955 Ford & Fulkerson O (nmU ) nmU [18] 3 1970 Dinitz O (nm 2 ) nm 2 [14] Edmonds & Karp [16] 4 1970 Dinitz O (n 2 m) n 2 m [14] 5 1972 Edmonds & Karp O (m 2 log U ) m 2 [16] Dinitz <ref> [15] </ref> 6 1973 Dinitz O (nm log U ) nm [15] Gabow [20] 7 1974 Karzanov O (n 3 ) [32] 8 1977 Cherkassky O (n 2 p m) [9] 9 1980 Galil & Naamad O (nm log 2 n) [21] 10 1983 Sleator & Tarjan O (nm log n) [41] <p> 3 1970 Dinitz O (nm 2 ) nm 2 [14] Edmonds & Karp [16] 4 1970 Dinitz O (n 2 m) n 2 m [14] 5 1972 Edmonds & Karp O (m 2 log U ) m 2 [16] Dinitz <ref> [15] </ref> 6 1973 Dinitz O (nm log U ) nm [15] Gabow [20] 7 1974 Karzanov O (n 3 ) [32] 8 1977 Cherkassky O (n 2 p m) [9] 9 1980 Galil & Naamad O (nm log 2 n) [21] 10 1983 Sleator & Tarjan O (nm log n) [41] 11 1986 Goldberg & Tarjan O (nm log (n 2 <p> For dense graphs, the O (n 3 = log n) algorithm of Cheriyan et al. [8] beats this lower bound, but only by using word operations on (log n)-bit integers. The ballpark bound of nm was achieved in 1973 by Dinitz <ref> [15] </ref>.
Reference: [16] <author> J. Edmonds and R. M. Karp. </author> <title> Theoretical Improvements in Algorithmic Efficiency for Network Flow Problems. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 19 </volume> <pages> 248-264, </pages> <year> 1972. </year>
Reference-contexts: Soon thereafter, Ford and Fulkerson [18] developed the augmenting path method for the maximum flow problem. A natural variant of this method, the shortest augmenting path algorithm, was shown to be polynomial by Dinitz [14] and Edmonds and Karp <ref> [16] </ref>. Capacity scaling, developed by Edmonds and Karp [16] and Dinitz [15], also gives polynomial algorithms for the problem. (See also [20].) Classical books [1, 19] describe earlier work in detail. Most efficient algorithms for the maximum flow problem are based on the blocking flow and the push-relabel methods. <p> Soon thereafter, Ford and Fulkerson [18] developed the augmenting path method for the maximum flow problem. A natural variant of this method, the shortest augmenting path algorithm, was shown to be polynomial by Dinitz [14] and Edmonds and Karp <ref> [16] </ref>. Capacity scaling, developed by Edmonds and Karp [16] and Dinitz [15], also gives polynomial algorithms for the problem. (See also [20].) Classical books [1, 19] describe earlier work in detail. Most efficient algorithms for the maximum flow problem are based on the blocking flow and the push-relabel methods. <p> To talk about distances, one has to define arc lengths. All these approaches use the unit length function: the length of every residual arc is defined to be one. Edmonds and Karp <ref> [16] </ref> discussed the use of general length functions in the context of maximum flows. Wallacher and Zimmermann [46] and Wallacher [45] study length functions in the context of the minimum-cost flow problem. <p> We denote the number of 1 bounds # year discoverer (s) exact ballpark reference 1 1951 Dantzig O (n 2 mU ) n 2 mU [11] 2 1955 Ford & Fulkerson O (nmU ) nmU [18] 3 1970 Dinitz O (nm 2 ) nm 2 [14] Edmonds & Karp <ref> [16] </ref> 4 1970 Dinitz O (n 2 m) n 2 m [14] 5 1972 Edmonds & Karp O (m 2 log U ) m 2 [16] Dinitz [15] 6 1973 Dinitz O (nm log U ) nm [15] Gabow [20] 7 1974 Karzanov O (n 3 ) [32] 8 1977 Cherkassky <p> mU [11] 2 1955 Ford & Fulkerson O (nmU ) nmU [18] 3 1970 Dinitz O (nm 2 ) nm 2 [14] Edmonds & Karp <ref> [16] </ref> 4 1970 Dinitz O (n 2 m) n 2 m [14] 5 1972 Edmonds & Karp O (m 2 log U ) m 2 [16] Dinitz [15] 6 1973 Dinitz O (nm log U ) nm [15] Gabow [20] 7 1974 Karzanov O (n 3 ) [32] 8 1977 Cherkassky O (n 2 p m) [9] 9 1980 Galil & Naamad O (nm log 2 n) [21] 10 1983 Sleator & Tarjan O (nm log
Reference: [17] <author> S. Even and R. E. Tarjan. </author> <title> Network Flow and Testing Graph Connectivity. </title> <journal> SIAM J. Comput., </journal> <volume> 4 </volume> <pages> 507-518, </pages> <year> 1975. </year>
Reference-contexts: The ballpark bound of nm was achieved in 1973 by Dinitz [15]. In the unit capacity case, the total decomposition path length is O (m) and o (nm) bounds have been known for a long time: Karzanov [31] and independently Even and Tarjan <ref> [17] </ref> have shown that Dinitz's algorithm [14] runs in O (min (n 2=3 ; m 1=2 )m) time on unit capacity networks with no parallel arcs. (We define fl = min (n 2=3 ; m 1=2 ); this term will appear quite often.) This bound is based on the O (fl)
Reference: [18] <author> L. R. Ford, Jr. and D. R. Fulkerson. </author> <title> Maximal Flow Through a Network. </title> <journal> Canadian Journal of Math., </journal> <volume> 8 </volume> <pages> 399-404, </pages> <year> 1956. </year>
Reference-contexts: The maximum flow problem and related flow and cut problems have been studied intensively for over three decades. The network simplex method of Dantzig [11] for the transportation problem, published in 1951, solves the maximum flow problem as a natural special case. Soon thereafter, Ford and Fulkerson <ref> [18] </ref> developed the augmenting path method for the maximum flow problem. A natural variant of this method, the shortest augmenting path algorithm, was shown to be polynomial by Dinitz [14] and Edmonds and Karp [16]. <p> Table 1 gives the history of the maximum flow time bounds. We denote the number of 1 bounds # year discoverer (s) exact ballpark reference 1 1951 Dantzig O (n 2 mU ) n 2 mU [11] 2 1955 Ford & Fulkerson O (nmU ) nmU <ref> [18] </ref> 3 1970 Dinitz O (nm 2 ) nm 2 [14] Edmonds & Karp [16] 4 1970 Dinitz O (n 2 m) n 2 m [14] 5 1972 Edmonds & Karp O (m 2 log U ) m 2 [16] Dinitz [15] 6 1973 Dinitz O (nm log U ) nm
Reference: [19] <author> L. R. Ford, Jr. and D. R. Fulkerson. </author> <title> Flows in Networks. </title> <publisher> Princeton Univ. Press, </publisher> <address> Princeton, NJ, </address> <year> 1962. </year>
Reference-contexts: A natural variant of this method, the shortest augmenting path algorithm, was shown to be polynomial by Dinitz [14] and Edmonds and Karp [16]. Capacity scaling, developed by Edmonds and Karp [16] and Dinitz [15], also gives polynomial algorithms for the problem. (See also [20].) Classical books <ref> [1, 19] </ref> describe earlier work in detail. Most efficient algorithms for the maximum flow problem are based on the blocking flow and the push-relabel methods. The first blocking flow algorithm was developed by Dinitz [14] in the framework of the augmenting path approach.
Reference: [20] <author> H. N. Gabow. </author> <title> Scaling Algorithms for Network Problems. </title> <journal> J. of Comp. and Sys. Sci., </journal> <volume> 31 </volume> <pages> 148-168, </pages> <year> 1985. </year>
Reference-contexts: A natural variant of this method, the shortest augmenting path algorithm, was shown to be polynomial by Dinitz [14] and Edmonds and Karp [16]. Capacity scaling, developed by Edmonds and Karp [16] and Dinitz [15], also gives polynomial algorithms for the problem. (See also <ref> [20] </ref>.) Classical books [1, 19] describe earlier work in detail. Most efficient algorithms for the maximum flow problem are based on the blocking flow and the push-relabel methods. The first blocking flow algorithm was developed by Dinitz [14] in the framework of the augmenting path approach. <p> Dinitz O (nm 2 ) nm 2 [14] Edmonds & Karp [16] 4 1970 Dinitz O (n 2 m) n 2 m [14] 5 1972 Edmonds & Karp O (m 2 log U ) m 2 [16] Dinitz [15] 6 1973 Dinitz O (nm log U ) nm [15] Gabow <ref> [20] </ref> 7 1974 Karzanov O (n 3 ) [32] 8 1977 Cherkassky O (n 2 p m) [9] 9 1980 Galil & Naamad O (nm log 2 n) [21] 10 1983 Sleator & Tarjan O (nm log n) [41] 11 1986 Goldberg & Tarjan O (nm log (n 2 =m)) [26] <p> For polynomial algorithms, we assume that arc capacities are integers in the range [1; : : : ; U ]. Strongly polynomial algorithms do not need this assumption. We use the similarity assumption of Gabow <ref> [20] </ref>, log U = O (log n), to compare polynomial and strongly polynomial algorithms. By a ballpark bound we mean an O fl bound under the similarity assumption. 1 For a randomized algorithm running in O (t) expected time, we denote its running time by E (t).
Reference: [21] <author> Z. Galil and A. Naamad. </author> <title> An O(EV log 2 V ) Algorithm for the Maximal Flow Problem. </title> <journal> J. Comput. System Sci., </journal> <volume> 21 </volume> <pages> 203-217, </pages> <year> 1980. </year>
Reference-contexts: O (m 2 log U ) m 2 [16] Dinitz [15] 6 1973 Dinitz O (nm log U ) nm [15] Gabow [20] 7 1974 Karzanov O (n 3 ) [32] 8 1977 Cherkassky O (n 2 p m) [9] 9 1980 Galil & Naamad O (nm log 2 n) <ref> [21] </ref> 10 1983 Sleator & Tarjan O (nm log n) [41] 11 1986 Goldberg & Tarjan O (nm log (n 2 =m)) [26] 12 1987 Ahuja & Orlin O (nm + n 2 log U ) [2] 13 1987 Ahuja et al.
Reference: [22] <author> G. Gallo, M. D. Grigoriadis, and R. E. Tarjan. </author> <title> A Fast Parametric Maximum Flow Algorithm. </title> <journal> SIAM J. Comput., </journal> <volume> 18 </volume> <pages> 30-55, </pages> <year> 1989. </year>
Reference-contexts: For example, a Gomory-Hu tree [28] can be constructed in n 1 maximum flow computations [28, 29], so we improve the corresponding time bound from the ballpark of n 2 m to flnm. For parametric flows, the combination of our results and those of <ref> [22] </ref> gives an O (flm log (n 2 =m) log 2 U ) time bound. Our bounds can be improved if an approximate solution is sufficient.
Reference: [23] <author> A. V. Goldberg. </author> <title> A New Max-Flow Algorithm. </title> <type> Technical Report MIT/LCS/TM-291, </type> <institution> Laboratory for Computer Science, M.I.T., </institution> <year> 1985. </year>
Reference-contexts: Karzanov [32] was the first to state the finding of a blocking flow as a separate problem and to suggest the use of preflows to solve it. The push-relabel method, implicit in Goldberg's algorithm <ref> [23] </ref>, was fully developed by Goldberg and Tarjan [26]. The shortest augmenting path algorithm, the blocking flow method, and the push-relabel method use a concept of distance. To talk about distances, one has to define arc lengths.
Reference: [24] <author> A. V. Goldberg. </author> <title> Efficient Graph Algorithms for Sequential and Parallel Computers. </title> <type> PhD thesis, </type> <institution> M.I.T., </institution> <month> January </month> <year> 1987. </year> <note> (Also available as Technical Report TR-374, </note> <institution> Lab. for Computer Science, M.I.T., </institution> <year> 1987). </year>
Reference-contexts: These implementations are the result of intensive experimental research; see for example <ref> [5, 10, 12, 24, 37] </ref>. It would be interesting to see if the ideas introduced in this paper lead to practical improvements. An interesting open problem is if the flow decomposition bound can be improved upon by a strongly polynomial algorithm.
Reference: [25] <author> A. V. Goldberg and S. Rao. </author> <title> Flows in Undirected Unit Capacity Networks. </title> <booktitle> In Proc. 38th IEEE Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 32-35, </pages> <year> 1997. </year>
Reference-contexts: The results of [45, 46] may be relevant here. Our ballpark bounds for directed capacitated flows cannot be improved without improving bounds for directed unit capacity flows. Recent improvements for the undirected unit capacity case <ref> [25, 30] </ref> suggest a possibility of improving the directed case as well, although the techniques of [25, 30] do not seem to apply directly. Acknowledgments We would like to thank Bob Tarjan for insightful discussions, helpful comments, and for bringing the wheels within wheels data structure to our attention. <p> Our ballpark bounds for directed capacitated flows cannot be improved without improving bounds for directed unit capacity flows. Recent improvements for the undirected unit capacity case <ref> [25, 30] </ref> suggest a possibility of improving the directed case as well, although the techniques of [25, 30] do not seem to apply directly. Acknowledgments We would like to thank Bob Tarjan for insightful discussions, helpful comments, and for bringing the wheels within wheels data structure to our attention. We are grateful to Efim Dinitz and Alexander Karzanov for comments on a draft of this paper.
Reference: [26] <author> A. V. Goldberg and R. E. Tarjan. </author> <title> A New Approach to the Maximum Flow Problem. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 35 </volume> <pages> 921-940, </pages> <year> 1988. </year>
Reference-contexts: Karzanov [32] was the first to state the finding of a blocking flow as a separate problem and to suggest the use of preflows to solve it. The push-relabel method, implicit in Goldberg's algorithm [23], was fully developed by Goldberg and Tarjan <ref> [26] </ref>. The shortest augmenting path algorithm, the blocking flow method, and the push-relabel method use a concept of distance. To talk about distances, one has to define arc lengths. All these approaches use the unit length function: the length of every residual arc is defined to be one. <p> [20] 7 1974 Karzanov O (n 3 ) [32] 8 1977 Cherkassky O (n 2 p m) [9] 9 1980 Galil & Naamad O (nm log 2 n) [21] 10 1983 Sleator & Tarjan O (nm log n) [41] 11 1986 Goldberg & Tarjan O (nm log (n 2 =m)) <ref> [26] </ref> 12 1987 Ahuja & Orlin O (nm + n 2 log U ) [2] 13 1987 Ahuja et al. O (nm log (n p 14 1989 Cheriyan & Hagerup E (nm + n 2 log 2 n) [7] 15 1990 Cheriyan et al. <p> They use this lemma in combination with the maximum flow algorithm of <ref> [26] </ref> to get an E fl (n 2 =* 2 ) algorithm to find a cut with capacity at most (1 + *) times the minimum cut capacity. We get an improvement using the algorithm in this paper instead of that of [26]. <p> in combination with the maximum flow algorithm of <ref> [26] </ref> to get an E fl (n 2 =* 2 ) algorithm to find a cut with capacity at most (1 + *) times the minimum cut capacity. We get an improvement using the algorithm in this paper instead of that of [26]. We can get a slightly different bound using Theorem 7.1. We set * 0 = *=2 and do the sampling with the parameter * 0 . We also use * 0 instead of * in our approximate flow algorithm.
Reference: [27] <author> A. V. Goldberg and R. E. Tarjan. </author> <title> Finding Minimum-Cost Circulations by Successive Approximation. </title> <journal> Math. of Oper. Res., </journal> <volume> 15 </volume> <pages> 430-466, </pages> <year> 1990. </year>
Reference-contexts: However, for over two decades, no algorithm improved upon the nm ballpark bound. We achieve a flm ballpark bound for general networks. Each iteration of our algorithm is dominated by a blocking flow computation on an acyclic graph. Using the blocking flow algorithm of <ref> [27] </ref>, we get an O (flm log (n 2 =m) log U ) bound. This result breaks the nm barrier by a polynomial factor. Consider sparse networks with m = O (n), which come up in practical applications, e.g. [36, 38, 40]. <p> The problem of finding blocking flows in layered networks has been introduced by Dinitz [14] in the context of maximum flow algorithms. For more general acyclic networks, the problem was studied by Goldberg and Tarjan <ref> [27] </ref> in the context of minimum cost flows. Many, but not all, results for layered networks work on acyclic networks and achieve the same time bounds. Our maximum flow algorithms need a subroutine for finding blocking flows in acyclic networks. <p> Many, but not all, results for layered networks work on acyclic networks and achieve the same time bounds. Our maximum flow algorithms need a subroutine for finding blocking flows in acyclic networks. The fastest known algorithm for the problem runs in O (m log (n 2 =m)) time <ref> [27] </ref>. 3 Length Functions By a length function we mean a function ` : A ! R + .
Reference: [28] <author> R. E. Gomory and T. C. Hu. </author> <title> Multi-terminal network flows. </title> <journal> J. SIAM, </journal> <volume> 9 </volume> <pages> 551-570, </pages> <year> 1961. </year>
Reference-contexts: Our results imply better bounds for those algorithms dominated by maximum flow 1 O fl (f (n)) = O ((log n) O (1) f (n)). computations. For example, a Gomory-Hu tree <ref> [28] </ref> can be constructed in n 1 maximum flow computations [28, 29], so we improve the corresponding time bound from the ballpark of n 2 m to flnm. <p> Our results imply better bounds for those algorithms dominated by maximum flow 1 O fl (f (n)) = O ((log n) O (1) f (n)). computations. For example, a Gomory-Hu tree [28] can be constructed in n 1 maximum flow computations <ref> [28, 29] </ref>, so we improve the corresponding time bound from the ballpark of n 2 m to flnm. For parametric flows, the combination of our results and those of [22] gives an O (flm log (n 2 =m) log 2 U ) time bound.
Reference: [29] <author> D. Gusfield. </author> <title> Very Simple Methods for All Pairs Network Flow Analysis. </title> <journal> SIAM Journal on Computing, </journal> <volume> 19 </volume> <pages> 143-155, </pages> <year> 1990. </year>
Reference-contexts: Our results imply better bounds for those algorithms dominated by maximum flow 1 O fl (f (n)) = O ((log n) O (1) f (n)). computations. For example, a Gomory-Hu tree [28] can be constructed in n 1 maximum flow computations <ref> [28, 29] </ref>, so we improve the corresponding time bound from the ballpark of n 2 m to flnm. For parametric flows, the combination of our results and those of [22] gives an O (flm log (n 2 =m) log 2 U ) time bound.
Reference: [30] <author> D. R. Karger. </author> <title> Using Random Sampling to Find Maximum Flows in Uncapacitated Undirected Graphs. </title> <booktitle> In Proc. 29th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 240-249, </pages> <year> 1997. </year> <month> 16 </month>
Reference-contexts: The results of [45, 46] may be relevant here. Our ballpark bounds for directed capacitated flows cannot be improved without improving bounds for directed unit capacity flows. Recent improvements for the undirected unit capacity case <ref> [25, 30] </ref> suggest a possibility of improving the directed case as well, although the techniques of [25, 30] do not seem to apply directly. Acknowledgments We would like to thank Bob Tarjan for insightful discussions, helpful comments, and for bringing the wheels within wheels data structure to our attention. <p> Our ballpark bounds for directed capacitated flows cannot be improved without improving bounds for directed unit capacity flows. Recent improvements for the undirected unit capacity case <ref> [25, 30] </ref> suggest a possibility of improving the directed case as well, although the techniques of [25, 30] do not seem to apply directly. Acknowledgments We would like to thank Bob Tarjan for insightful discussions, helpful comments, and for bringing the wheels within wheels data structure to our attention. We are grateful to Efim Dinitz and Alexander Karzanov for comments on a draft of this paper.
Reference: [31] <editor> A. V. Karzanov. O nakhozhdenii maksimal'nogo potoka v setyakh spetsial'nogo vida i nekotorykh prilozheniyakh. In Matematicheskie Voprosy Upravleniya Proizvodstvom, </editor> <volume> volume 5. </volume> <publisher> Moscow State University Press, </publisher> <address> Moscow, </address> <year> 1973. </year> <title> In Russian; title translation: On Finding Maximum Flows in Networks with Special Structure and Some Applications. </title>
Reference-contexts: The ballpark bound of nm was achieved in 1973 by Dinitz [15]. In the unit capacity case, the total decomposition path length is O (m) and o (nm) bounds have been known for a long time: Karzanov <ref> [31] </ref> and independently Even and Tarjan [17] have shown that Dinitz's algorithm [14] runs in O (min (n 2=3 ; m 1=2 )m) time on unit capacity networks with no parallel arcs. (We define fl = min (n 2=3 ; m 1=2 ); this term will appear quite often.) This bound
Reference: [32] <author> A. V. Karzanov. </author> <title> Determining the Maximal Flow in a Network by the Method of Preflows. </title> <journal> Soviet Math. Dok., </journal> <volume> 15 </volume> <pages> 434-437, </pages> <year> 1974. </year>
Reference-contexts: Most efficient algorithms for the maximum flow problem are based on the blocking flow and the push-relabel methods. The first blocking flow algorithm was developed by Dinitz [14] in the framework of the augmenting path approach. Karzanov <ref> [32] </ref> was the first to state the finding of a blocking flow as a separate problem and to suggest the use of preflows to solve it. The push-relabel method, implicit in Goldberg's algorithm [23], was fully developed by Goldberg and Tarjan [26]. <p> Edmonds & Karp [16] 4 1970 Dinitz O (n 2 m) n 2 m [14] 5 1972 Edmonds & Karp O (m 2 log U ) m 2 [16] Dinitz [15] 6 1973 Dinitz O (nm log U ) nm [15] Gabow [20] 7 1974 Karzanov O (n 3 ) <ref> [32] </ref> 8 1977 Cherkassky O (n 2 p m) [9] 9 1980 Galil & Naamad O (nm log 2 n) [21] 10 1983 Sleator & Tarjan O (nm log n) [41] 11 1986 Goldberg & Tarjan O (nm log (n 2 =m)) [26] 12 1987 Ahuja & Orlin O (nm +
Reference: [33] <author> V. King, S. Rao, and R. Tarjan. </author> <title> A Faster Deterministic Maximum Flow Algorithm. </title> <booktitle> In Proc. 3rd ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 157-164, </pages> <year> 1992. </year>
Reference-contexts: O (n 3 = log n) [8] 16 1990 Alon O (nm + n 8=3 log n) [4] 17 1992 King et al. O (nm + n 2+* ) <ref> [33] </ref> 18 1993 Phillips & Westbrook O (nm (log m=n n + log 2+* n)) [39] 19 1994 King et al.
Reference: [34] <author> V. King, S. Rao, and R. Tarjan. </author> <title> A Faster Deterministic Maximum Flow Algorithm. </title> <journal> J. Algorithms, </journal> <volume> 17 </volume> <pages> 447-474, </pages> <year> 1994. </year>
Reference-contexts: O (nm + n 2+* ) [33] 18 1993 Phillips & Westbrook O (nm (log m=n n + log 2+* n)) [39] 19 1994 King et al. O (nm log m=(n log n) n) <ref> [34] </ref> 20 1997 Goldberg & Rao O (m 3=2 log (n 2 =m) log U ) m 3=2 this O (n 2=3 m log (n 2 =m) log U ) n 2=3 m paper Table 1: History of maximum flow bounds.
Reference: [35] <author> D. E. Knuth. </author> <title> Wheels within Wheels. </title> <journal> J. of Combinatorial Theory, </journal> <volume> 16 </volume> <pages> 42-46, </pages> <year> 1974. </year>
Reference-contexts: Remark. The above procedure requires strongly connected component arc capacities to be at least 2 to route the total of flow through. Since we also need a slack of for the special arcs, we used 3 in (1). If we use the wheels within wheels data structure of Knuth <ref> [35] </ref> and the disjoint union data structure [42], we can route units of flow through strongly connected graphs with arc capacities of or more.
Reference: [36] <author> A. A. Middleton. </author> <title> Numerical Result for the Ground-State Interface in Random Medium. </title> <journal> Phys. Rev. E, </journal> <volume> 52:R3337-R3340, </volume> <year> 1995. </year>
Reference-contexts: Using the blocking flow algorithm of [27], we get an O (flm log (n 2 =m) log U ) bound. This result breaks the nm barrier by a polynomial factor. Consider sparse networks with m = O (n), which come up in practical applications, e.g. <ref> [36, 38, 40] </ref>. On these networks, our bound is better than the best previous bounds by a factor of ( p In addition to direct applications, maximum flow algorithms are used as subroutines in other algorithms.
Reference: [37] <author> Q. C. Nguyen and V. Venkateswaran. </author> <title> Implementations of Goldberg-Tarjan Maximum Flow Algorithm. </title> <editor> In D. S. Johnson and C. C. McGeoch, editors, </editor> <title> Network Flows and Matching: </title> <booktitle> First DIMACS Implementation Challenge, </booktitle> <pages> pages 19-42. </pages> <publisher> AMS, </publisher> <year> 1993. </year>
Reference-contexts: These implementations are the result of intensive experimental research; see for example <ref> [5, 10, 12, 24, 37] </ref>. It would be interesting to see if the ideas introduced in this paper lead to practical improvements. An interesting open problem is if the flow decomposition bound can be improved upon by a strongly polynomial algorithm.
Reference: [38] <author> A. T. Ogielski. </author> <title> Integer Optimization and Zero-Temperature Fixed Point in Ising Random-Field Systems. </title> <journal> Physical Review Lett., </journal> <volume> 57 </volume> <pages> 1251-1254, </pages> <year> 1986. </year>
Reference-contexts: Using the blocking flow algorithm of [27], we get an O (flm log (n 2 =m) log U ) bound. This result breaks the nm barrier by a polynomial factor. Consider sparse networks with m = O (n), which come up in practical applications, e.g. <ref> [36, 38, 40] </ref>. On these networks, our bound is better than the best previous bounds by a factor of ( p In addition to direct applications, maximum flow algorithms are used as subroutines in other algorithms.
Reference: [39] <author> S. Phillips and J. Westbrook. </author> <title> Online Load Balancing and Network Flow. </title> <booktitle> In Proc. 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 402-411, </pages> <year> 1993. </year>
Reference-contexts: O (n 3 = log n) [8] 16 1990 Alon O (nm + n 8=3 log n) [4] 17 1992 King et al. O (nm + n 2+* ) [33] 18 1993 Phillips & Westbrook O (nm (log m=n n + log 2+* n)) <ref> [39] </ref> 19 1994 King et al.
Reference: [40] <author> S. Roy and I. Cox. </author> <title> A Maximum-Flow Formulation to the Stereo Correspondence Problem. </title> <type> Technical report, </type> <institution> NEC Research Institute, Princeton, NJ, </institution> <year> 1997. </year>
Reference-contexts: Using the blocking flow algorithm of [27], we get an O (flm log (n 2 =m) log U ) bound. This result breaks the nm barrier by a polynomial factor. Consider sparse networks with m = O (n), which come up in practical applications, e.g. <ref> [36, 38, 40] </ref>. On these networks, our bound is better than the best previous bounds by a factor of ( p In addition to direct applications, maximum flow algorithms are used as subroutines in other algorithms.
Reference: [41] <author> D. D. Sleator and R. E. Tarjan. </author> <title> A Data Structure for Dynamic Trees. </title> <journal> J. Comput. System Sci., </journal> <volume> 26 </volume> <pages> 362-391, </pages> <year> 1983. </year>
Reference-contexts: [15] 6 1973 Dinitz O (nm log U ) nm [15] Gabow [20] 7 1974 Karzanov O (n 3 ) [32] 8 1977 Cherkassky O (n 2 p m) [9] 9 1980 Galil & Naamad O (nm log 2 n) [21] 10 1983 Sleator & Tarjan O (nm log n) <ref> [41] </ref> 11 1986 Goldberg & Tarjan O (nm log (n 2 =m)) [26] 12 1987 Ahuja & Orlin O (nm + n 2 log U ) [2] 13 1987 Ahuja et al. <p> This lower bound does not apply to algorithms that work with preflows or use data structures like dynamic trees <ref> [41] </ref> to manipulate flows. However, in spite of numerous attempts, no previous algorithm achieves this lower bound in general. For dense graphs, the O (n 3 = log n) algorithm of Cheriyan et al. [8] beats this lower bound, but only by using word operations on (log n)-bit integers.
Reference: [42] <author> R. E. Tarjan. </author> <title> Efficiency of a Good but not Linear Set Union Algorithm. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 22:1975, </volume> <year> 1975. </year>
Reference-contexts: Since we also need a slack of for the special arcs, we used 3 in (1). If we use the wheels within wheels data structure of Knuth [35] and the disjoint union data structure <ref> [42] </ref>, we can route units of flow through strongly connected graphs with arc capacities of or more.
Reference: [43] <author> R. E. Tarjan. </author> <title> Data Structures and Network Algorithms. </title> <institution> Society for Industrial and Applied Mathematics, </institution> <address> Philadelphia, PA, </address> <year> 1983. </year>
Reference-contexts: Since jf j is monotone and each phase reduces F by a factor of two, the theorem follows. Consider a bottleneck shortest path in G with respect to the length function 1=u. We can find such a path in O fl (m) time (see e.g. <ref> [43] </ref>). Let ffi the the smallest arc capacity on the path. We set the initial flow f to be ffi at the path arcs and zero everywhere else. Consider the set S of vertices reachable from s via paths of arcs with capacity greater than ffi.
Reference: [44] <author> U. Vishkin. </author> <title> A Parallel Blocking Flow Algorithm for Acyclic Networks. </title> <journal> J. Algorithms, </journal> <volume> 13 </volume> <pages> 489-501, </pages> <year> 1992. </year>
Reference-contexts: Finally when = 1, F fl, and the algorithm terminates in O (fl) update steps. Our results imply improved parallel bounds as well. Using the blocking flow algorithm of Vishkin <ref> [44] </ref>, we get the following parallel bound.
Reference: [45] <author> C. Wallacher. </author> <title> A Generalization of the Minimum-Mean Cycle Selection Rule in Cycle Canceling Algorithms. </title> <type> Technical report, </type> <note> Preprints in Optimization, </note> <institution> Institute fur Angewandte Mathematik, Technische Universitat Braunschweig, Germany, </institution> <year> 1991. </year>
Reference-contexts: All these approaches use the unit length function: the length of every residual arc is defined to be one. Edmonds and Karp [16] discussed the use of general length functions in the context of maximum flows. Wallacher and Zimmermann [46] and Wallacher <ref> [45] </ref> study length functions in the context of the minimum-cost flow problem. However, prior to our work, the bounds obtained using general length functions were no better then the bounds using the unit length function. <p> For example, is there an algorithm running in O fl (flm) time? 14 Another open problem is to extend our results and to obtain better bounds for the minimum--cost flow problem. The results of <ref> [45, 46] </ref> may be relevant here. Our ballpark bounds for directed capacitated flows cannot be improved without improving bounds for directed unit capacity flows.
Reference: [46] <author> C. Wallacher and U. Zimmermann. </author> <title> A Combinatorial Interior Point Method for Network Flow Problems. </title> <type> Technical report, </type> <note> Preprints in Optimization, </note> <institution> Institute fur Angewandte Mathematik, Technische Universitat Braunschweig, Germany, </institution> <year> 1991. </year> <month> 17 </month>
Reference-contexts: To talk about distances, one has to define arc lengths. All these approaches use the unit length function: the length of every residual arc is defined to be one. Edmonds and Karp [16] discussed the use of general length functions in the context of maximum flows. Wallacher and Zimmermann <ref> [46] </ref> and Wallacher [45] study length functions in the context of the minimum-cost flow problem. However, prior to our work, the bounds obtained using general length functions were no better then the bounds using the unit length function. <p> For example, is there an algorithm running in O fl (flm) time? 14 Another open problem is to extend our results and to obtain better bounds for the minimum--cost flow problem. The results of <ref> [45, 46] </ref> may be relevant here. Our ballpark bounds for directed capacitated flows cannot be improved without improving bounds for directed unit capacity flows.
References-found: 46

