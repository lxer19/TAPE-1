URL: http://www.win.tue.nl/cs/pa/janz/ptssub.ps
Refering-URL: http://www.win.tue.nl/cs/pa/janz/publications.html
Root-URL: http://www.win.tue.nl
Email: janz@win.tue.nl,  
Title: Pure Type Systems with Subtyping (Extended Abstract)  
Author: Jan Zwanenburg 
Note: Eindhoven University of Technology, The Netherlands c Springer-Verlag  
Abstract: We extend the framework of Pure Type Systems with sub-typing, as found in F ! . This leads to a concise description of many existing systems with subtyping, and also to some new interesting systems. We develop the meta-theory for this framework, including Subject Reduction and Minimal Typing. The main problem was how to formulate the rules of the framework in such a way that we avoid circularities between theory about typing and theory about subtyping. We solve this problem by a simple but rigorous design decision: the subtyping rules do not depend on the typing rules.
Abstract-found: 1
Intro-found: 1
Reference: [AC96] <author> David Aspinall and Adriana Compagnoni. </author> <title> Subtyping dependent types. </title> <booktitle> In 11th Annual IEEE Symposium on Logic in Computer Science, </booktitle> <address> New Brunswick, New Jersey, USA, </address> <year> 1996. </year>
Reference-contexts: Furthermore, the P T Ss also include many new interesting systems. We introduce a framework of Pure Type Systems with Subtyping (P T S s), which includes a number of P T Ss extended with subtyping, e.g. ! [Car88], F [CG92], F ! [PS94], P <ref> [AC96] </ref> and C [Che97]. This framework also yields new systems, e.g. the Calculus of Constructions with subtyping. The main problem is how to define it in such a way that we can develop the meta-theory. <p> The rule ( * ; 2 ) 2 R gives types depending on programs and corresponding type-constructors, for which lifted subtyping is possible. The system P as described in <ref> [AC96] </ref> is roughly the same as this P T S , and typing on programs in both systems is exactly equivalent. This system is the first calculus discussed here with mutual dependency between programs and type-constructors.
Reference: [Bar92] <author> H. Barendregt. </author> <title> Lambda calculi with types. </title> <editor> In S. Abramsky, D. M. Gabbai, and T. S. E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 2. </volume> <publisher> Oxford University Press, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction The Pure Type Systems (P T Ss, see <ref> [Bar92] </ref>) provide a framework of type systems, in which many particular systems, such as F , F ! , P and the Calculus of Constructions can be concisely expressed and easily compared. Furthermore, the P T Ss also include many new interesting systems. <p> We write (s 1 ; s 2 ) for a (bounded) rule, as abbreviation for (s 1 ; s 2 ; s 2 ). The first three elements of the tuple serve exactly the same purpose as in P T Ss <ref> [Bar92] </ref>. The subset of sorts S controls on which levels we can introduce subtyping. We can make a bounded declaration x a : A, which declares variable x as a subtype of a, if a : A and A : s and s 2 S . <p> Definition 6 (Unbounded typing rules). These rules are a slight reformulation of the rules for P T Ss <ref> [Bar92] </ref>, except for the absence of the conversion rule. (axiom) ` ok (s 1 : s 2 ) 2 A (var) ` x : A (-form) ` A : s 1 ; x : A ` B : s 2 (s 1 ; s 2 ; s 3 ) 2 R <p> Rule (-B) is called the kernel-Fun rule, since it appears in Cardelli and Wegner's original Fun calculus [CW85]. There are alternatives for this rule, but (-B) has the best meta-theoretical properties [CG92,Pie94,CP94]. 2.3 Examples of P T S s We show how examples of systems of the -cube <ref> [Bar92] </ref> extended with subtyping fit in our framework. These systems have S = f * ; 2 g, A = f ( * : 2 )g and R consists only of pairs. <p> Proof. By strengthening the IH as usual, and by induction on the derivation. All cases go straightforward by IH, except in the first clauses, when a is a redex. These cases are proved in a similar way as in <ref> [Bar92] </ref>, now using lemma 1. ut Subject Reduction has an important consequence on subtyping derivations: the subtyping rules do not introduce untypable terms. In other words, if the terms in the conclusion are typable, then all terms in the derivation are typable. Lemma 6.
Reference: [Bar96] <author> Gilles Barthe. </author> <title> Implicit coercions in type systems. </title> <booktitle> In Proceedings of the International Workshop Types '95, Torino, Italy, volume 1158 of Lecture Notes in Computer Science, </booktitle> <year> 1996. </year>
Reference-contexts: We do not have subtyping on sorts (e.g. as in [Luo89]), or coercive subtyping, which means that subtyping between existing types can be defined with coercions <ref> [Bar96] </ref>. Many existing type systems with subtyping can be seen as members of our framework, viz. ! , F , F ! , F ! , P and the calculus of [Che97].
Reference: [Car88] <author> Luca Cardelli. </author> <title> A semantics of multiple inheritance. </title> <journal> Information and Computation, </journal> <volume> 176 </volume> <pages> 138-164, </pages> <year> 1988. </year>
Reference-contexts: Furthermore, the P T Ss also include many new interesting systems. We introduce a framework of Pure Type Systems with Subtyping (P T S s), which includes a number of P T Ss extended with subtyping, e.g. ! <ref> [Car88] </ref>, F [CG92], F ! [PS94], P [AC96] and C [Che97]. This framework also yields new systems, e.g. the Calculus of Constructions with subtyping. The main problem is how to define it in such a way that we can develop the meta-theory. <p> Since 2 2 S we can make and use subtyping declarations. The system ! is the standard extension of ! with subtyping, e.g. defined in [Com95], and is the basis of <ref> [Car88] </ref>. The system 2 is specified by R = f ( * ; * ); ( 2 ; * )g and R = f ( 2 ; * )g. Since ( 2 ; * ) 2 R , we can make bounded quantifications.
Reference: [CG92] <author> Pierre-Louis Curien and Giorgio Ghelli. </author> <title> Coherence of subsumption, minimum typing and the type checking in F . Mathematical Structures in Computer Science, </title> <booktitle> 2(1) </booktitle> <pages> 55-91, </pages> <year> 1992. </year>
Reference-contexts: Furthermore, the P T Ss also include many new interesting systems. We introduce a framework of Pure Type Systems with Subtyping (P T S s), which includes a number of P T Ss extended with subtyping, e.g. ! [Car88], F <ref> [CG92] </ref>, F ! [PS94], P [AC96] and C [Che97]. This framework also yields new systems, e.g. the Calculus of Constructions with subtyping. The main problem is how to define it in such a way that we can develop the meta-theory. <p> This is incompatible with our approach, where subtyping does not depend on typing. The absence of Top types in P T S s is not as bad as it seems, since we also have ordinary quantifications. The system F (e.g. <ref> [CG92] </ref>) is equal to 2 except for a Top-type and a more liberal (-B) rule. The system ! is specified by R = f ( * ; * ); ( 2 ; * ); ( 2 ; 2 )g, R = f ( 2 ; * )g.
Reference: [CG97] <author> Adriana Compagnoni and Healfdene Goguen. </author> <title> Typed operational semantics for higher order subtyping. </title> <type> Technical Report ECS-LFCS-97-361, </type> <institution> University of Edinburgh, </institution> <year> 1997. </year>
Reference-contexts: The difference with ! is that we have ( 2 ; 2 ) 2 R . With this rule, we can type bounded constructor abstractions, i.e. terms like X Int : * : X ! X. The system ! + corresponds with the system F ! defined in <ref> [CG97] </ref>. There are two differences. First, we have no Top-types. Second, we do not have subtyping on these bounded abstractions, because it destroys the property we formulated in lemma 5. The meta-theory developed in [CG97] follows a quite different approach than works mentioned above and our work; by giving a typed <p> The system ! + corresponds with the system F ! defined in <ref> [CG97] </ref>. There are two differences. First, we have no Top-types. Second, we do not have subtyping on these bounded abstractions, because it destroys the property we formulated in lemma 5. The meta-theory developed in [CG97] follows a quite different approach than works mentioned above and our work; by giving a typed operational semantics they solve the mutual dependence between the typing and subtyping judgments occurring in F ! . We don't know whether this approach is applicable to P T S s.
Reference: [CH88] <author> Thierry Coquand and Gerard P. Huet. </author> <title> The calculus of constructions. </title> <journal> Information and Computation, </journal> <volume> 76 </volume> <pages> 95-120, </pages> <year> 1988. </year>
Reference-contexts: Just as in [PS94] the Minimal Typing property is proved using the typing algorithm. The P T S C is specified by R = S 2 and R = f ( 2 ; * ); ( 2 ; 2 )g. This is the Calculus of Constructions <ref> [CH88] </ref>, the most powerful system in the -cube, extended with subtyping and bounded quantifications. It includes all systems given above. The system C hasn't come up in the literature. The P T S C is specified by R = S 2 and R = ;.
Reference: [Che97] <author> Gang Chen. </author> <title> Subtyping calculus of construction. </title> <booktitle> In Mathematical Foundations of Computer Science (MFCS'97), Bratislava, Slovakia, </booktitle> <volume> volume 1295, </volume> <pages> pages 189-198. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1997. </year>
Reference-contexts: Furthermore, the P T Ss also include many new interesting systems. We introduce a framework of Pure Type Systems with Subtyping (P T S s), which includes a number of P T Ss extended with subtyping, e.g. ! [Car88], F [CG92], F ! [PS94], P [AC96] and C <ref> [Che97] </ref>. This framework also yields new systems, e.g. the Calculus of Constructions with subtyping. The main problem is how to define it in such a way that we can develop the meta-theory. <p> The P T S C is specified by R = S 2 and R = ;. This is the subsystem of C where bounded quantifications have been left out. The P T S C is exactly the same as the system defined in <ref> [Che97] </ref>. Here, programs and type constructors are also mutually dependent, but the typing judgments occurring in subtyping rules all have the simple form ` A : s. Using this in combination with the specific rules R of C , enough meta-theory for typing can be proved before subtyping is examined. <p> Many existing type systems with subtyping can be seen as members of our framework, viz. ! , F , F ! , F ! , P and the calculus of <ref> [Che97] </ref>. Other members, like C , are new systems which have promising features, both applicable in programming languages and in theorem proving. We developed the meta-theory for P T S s, including Subject Reduction and Minimal Typing.
Reference: [Com95] <author> Adriana B. Compagnoni. </author> <title> Higher-Order Subtyping with Intersection Types. </title> <type> PhD thesis, </type> <institution> University of Nijmegen, </institution> <address> The Netherlands, </address> <year> 1995. </year>
Reference-contexts: The P T S ! is specified by R = f ( * ; * )g and R = ;. Since 2 2 S we can make and use subtyping declarations. The system ! is the standard extension of ! with subtyping, e.g. defined in <ref> [Com95] </ref>, and is the basis of [Car88]. The system 2 is specified by R = f ( * ; * ); ( 2 ; * )g and R = f ( 2 ; * )g. Since ( 2 ; * ) 2 R , we can make bounded quantifications. <p> This has two effects on subtyping. First, we have bounded quantifications were the bound is a type-constructor. Second, we have lifted subtyping on type-constructors by rules (-app) and (-). The system ! is equal to F ! [PS94], except that F ! has a family of Top-types. In <ref> [Com95] </ref> a further extension of F ! is given. The meta-theory is developped in three stages: first the theory about typing type-constructors, then about the subtyping judgment and finally about typing programs.
Reference: [CP94] <author> Giuseppe Castagna and Benjamin C. Pierce. </author> <title> Decidable bounded quantification. </title> <booktitle> In Proceedings of the 21st ACM Symposium on Principles of Programming Languages (POPL), </booktitle> <address> Portland, Oregon. </address> <publisher> ACM, </publisher> <year> 1994. </year>
Reference: [CW85] <author> Luca Cardelli and Peter Wegner. </author> <title> On understanding types, data abstraction, and polymorphism. </title> <journal> Computing Surveys, </journal> <volume> 17(4) </volume> <pages> 471-522, </pages> <year> 1985. </year>
Reference-contexts: We can use this rule even if there is no interesting subtyping on B (or A). E.g. init ` Int ! * Nat ! * . Rule (-B) is called the kernel-Fun rule, since it appears in Cardelli and Wegner's original Fun calculus <ref> [CW85] </ref>. There are alternatives for this rule, but (-B) has the best meta-theoretical properties [CG92,Pie94,CP94]. 2.3 Examples of P T S s We show how examples of systems of the -cube [Bar92] extended with subtyping fit in our framework. <p> The system 2 is specified by R = f ( * ; * ); ( 2 ; * )g and R = f ( 2 ; * )g. Since ( 2 ; * ) 2 R , we can make bounded quantifications. The system 2 is equal to kernel-Fun <ref> [CW85] </ref>, except for their Top type. The subtyping rules for the Top type in 2 would be: (-Top) ` A Top We didn't include Top, since this subtyping rule essentially depends on a typing judgment. This is incompatible with our approach, where subtyping does not depend on typing.
Reference: [Luo89] <author> Zhaohui Luo. </author> <title> ECC: an Extended Calculus of Constructions. </title> <booktitle> In Proceedings of IEEE 4th Annual Symposium on Logic in Computer Science (LICS'89), Asilomar, </booktitle> <address> California, </address> <year> 1989. </year>
Reference-contexts: We do not have subtyping on sorts (e.g. as in <ref> [Luo89] </ref>), or coercive subtyping, which means that subtyping between existing types can be defined with coercions [Bar96]. Many existing type systems with subtyping can be seen as members of our framework, viz. ! , F , F ! , F ! , P and the calculus of [Che97].
Reference: [Pie94] <author> Benjamin C. Pierce. </author> <title> Bounded quantification is undecidable. </title> <journal> Information and Computation, </journal> <volume> 112(1) </volume> <pages> 131-165, </pages> <year> 1994. </year>
Reference: [PS94] <author> Benjamin Pierce and Martin Steffen. </author> <title> Higher-order subtyping. </title> <booktitle> In IFIP Working Conference on Programming Concepts, Methods and Calculi (PRO-COMET), </booktitle> <year> 1994. </year>
Reference-contexts: Furthermore, the P T Ss also include many new interesting systems. We introduce a framework of Pure Type Systems with Subtyping (P T S s), which includes a number of P T Ss extended with subtyping, e.g. ! [Car88], F [CG92], F ! <ref> [PS94] </ref>, P [AC96] and C [Che97]. This framework also yields new systems, e.g. the Calculus of Constructions with subtyping. The main problem is how to define it in such a way that we can develop the meta-theory. <p> This has two effects on subtyping. First, we have bounded quantifications were the bound is a type-constructor. Second, we have lifted subtyping on type-constructors by rules (-app) and (-). The system ! is equal to F ! <ref> [PS94] </ref>, except that F ! has a family of Top-types. In [Com95] a further extension of F ! is given. The meta-theory is developped in three stages: first the theory about typing type-constructors, then about the subtyping judgment and finally about typing programs. <p> The meta-theory is developped in three stages: first the theory about typing type-constructors, then about the subtyping judgment and finally about typing programs. This cannot be done in general for P T S s, since typing for the various categories of terms is mutually dependent. In <ref> [PS94] </ref> the Minimal Typing property is proved using the typing algorithm, whereas we prove this property separately. <p> This system is the first calculus discussed here with mutual dependency between programs and type-constructors. They avoid circularities between lemmas about typing and lemmas about subtyping by syn tactically distinguishing fi-reduction on programs and on type-constructors. This syntactical distinction is impossible in P T S s. Just as in <ref> [PS94] </ref> the Minimal Typing property is proved using the typing algorithm. The P T S C is specified by R = S 2 and R = f ( 2 ; * ); ( 2 ; 2 )g.
Reference: [Zwa99] <author> Jan Zwanenburg. </author> <title> An Object Oriented Programming Logic Based on Type Theory. </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1999. </year> <note> To appear. </note>
Reference-contexts: For many systems, these extensions make little sense and this drawback has no effect. A type-checking algorithm and decidability of typing for a range of P T S s is beyond the scope of this paper, but will appear elsewhere <ref> [Zwa99] </ref>. Acknowledgments The author wishes to thank Adriana Compagnoni, Kees Hemerik, Kruseman Aretz, Erik Poll and an anonymous referee for suggestions and corrections.
References-found: 15

