URL: http://www.cs.washington.edu/afs/transarc.com/public/trg/papers/usenix94.ps
Refering-URL: http://www.cs.washington.edu/homes/tom/590AT.html
Root-URL: 
Title: A Usage Profile and Evaluation of a Wide-Area Distributed File System  
Author: Mirjana Spasojevic M. Satyanarayanan 
Affiliation: Transarc Corporation  Carnegie Mellon University  
Abstract: collaboration and information dissemination on a much broader scale than ever before. In this paper, we examine AFS as a provider of wide-area file services to over 80 organizations around the world. We discuss usage characteristics of AFS derived from empirical measurements of the system, and from user responses to a questionnaire. Our observations indicate that AFS provides robust and efficient data access in its current configuration, thus confirming its viability as a design point for wide-area distributed file systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Baker, M.G., Hartman, J.H., Kupfer, M.D., Shirriff, K.W., Ousterhout, J.K., </author> <title> Measurements of a Distributed File System. </title> <booktitle> Proceedings of the Thirteenth ACM Symposium on Operating System Principles, </booktitle> <address> Pacific Grove, CA, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: The ability to easily access one's files from any machine enhances a user's mobility within his organization. Although the accessing of someone else's files is not a frequent event (a fact confirmed by many previous studies <ref> [1, 6] </ref>), ease of access once the need arises is perceived as a major benefit by users. In other words, while sharing may be rare, the payoff of being able to share easily is very high 1 . Third, transparency is preserved from the users' and applications' points of view.
Reference: [2] <author> Howard, J.H., Kazar, M.L., Menees, S.G., Nichols, D.A., Satyanarayanan, M., Sidebotham, R.N., West, M.J., </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> Vol. 6, No. 1, </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: While asymptotic limits to growth are inevitable, they do not appear to be just around the corner. 2. AFS Background The rationale, detailed design, and evolution of AFS have been well documented in previous papers <ref> [2, 5, 9, 10, 11, 15] </ref>. In this section, we only provide enough details of the current version of AFS (AFS-3) to make the rest of the paper understandable. Using a set of trusted servers, AFS presents a location-transparent Unix file name space to clients.
Reference: [3] <author> Kazar, </author> <title> M.L., Synchronization and Caching Issues in the Andrew File System. </title> <booktitle> Usenix Conference Proceedings, </booktitle> <month> Winter </month> <year> 1988. </year>
Reference-contexts: Using a set of trusted servers, AFS presents a location-transparent Unix file name space to clients. Files and directories are cached on the local disks of clients using a consistency mechanism based on callbacks <ref> [3] </ref>. Directories are cached in their entirety, while files are cached in 64 KB chunks. All updates to a file are propagated to its server upon close. Directory modifications are propagated immediately. Backup, disk quota enforcement, and most other administrative operations in AFS operate on volumes [13].
Reference: [4] <author> Kistler, J., Satyanarayanan, M., </author> <title> Disconnected Operation in the Coda File System. </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> Vol. 10, No. 1, </volume> <month> February </month> <year> 1992. </year>
Reference-contexts: Further, examination of the raw data shows that, on average, 15% of the clients referenced foreign data each day. We also repeated the study originally reported by Kistler and Satyanarayanan <ref> [4] </ref> on the extent of sequential write sharing on directories and files. Every time a user modified an AFS directory or file, the user's identity was compared to that of the user who made the previous modification. Our data, showing that 99.1% of 14 15.
Reference: [5] <author> Morris, J. H., Satyanarayanan, M., Conner, M.H., Howard, J.H., Rosenthal, D.S. and Smith, F.D. Andrew: </author> <title> A Distributed Personal Computing Environment. </title> <journal> Communications of the ACM, </journal> <volume> Vol. 29, No. 3, </volume> <month> March </month> <year> 1986. </year>
Reference-contexts: While asymptotic limits to growth are inevitable, they do not appear to be just around the corner. 2. AFS Background The rationale, detailed design, and evolution of AFS have been well documented in previous papers <ref> [2, 5, 9, 10, 11, 15] </ref>. In this section, we only provide enough details of the current version of AFS (AFS-3) to make the rest of the paper understandable. Using a set of trusted servers, AFS presents a location-transparent Unix file name space to clients.
Reference: [6] <author> Ousterhout, J., Da Costa, H., Harrison, D., Kunze, J., Kupfer, M., Thompson, J. </author> <title> A Trace-Driven Analysis of the 4.2BSD File System. </title> <booktitle> Proceedings of the 10th ACM Symposium on Operating System Principles, </booktitle> <month> December, </month> <year> 1985. </year> <month> 16 </month>
Reference-contexts: The ability to easily access one's files from any machine enhances a user's mobility within his organization. Although the accessing of someone else's files is not a frequent event (a fact confirmed by many previous studies <ref> [1, 6] </ref>), ease of access once the need arises is perceived as a major benefit by users. In other words, while sharing may be rare, the payoff of being able to share easily is very high 1 . Third, transparency is preserved from the users' and applications' points of view. <p> The collected statistics are summarized in Table 5. Our data indicates that the most frequently fetched chunks are in the range 1-8KB. These correspond to entire files or directories. This result is consistent with many earlier studies of file size distributions which have reported small average file size <ref> [6, 8] </ref>. The second most frequently fetched chunk size is even smaller, in the range 0-128B. The distribution of fetched data on file servers and clients is very similar. However, the distribution of stored data differs considerably.
Reference: [7] <author> Sandberg, R., Goldberg, D., Kleiman, S., Walsh, D., Lyon, B., </author> <title> Design and Implementation of the Sun Network Filesystem. </title> <booktitle> Summer Usenix Conference Proceedings, </booktitle> <year> 1985. </year>
Reference: [8] <author> Satyanarayanan, M., </author> <title> A Study of File Sizes and Functional Lifetimes. </title> <booktitle> Proceedings of the 8th ACM Symposium on Operating System Principles, Asilomar, </booktitle> <month> December </month> <year> 1981. </year>
Reference-contexts: The collected statistics are summarized in Table 5. Our data indicates that the most frequently fetched chunks are in the range 1-8KB. These correspond to entire files or directories. This result is consistent with many earlier studies of file size distributions which have reported small average file size <ref> [6, 8] </ref>. The second most frequently fetched chunk size is even smaller, in the range 0-128B. The distribution of fetched data on file servers and clients is very similar. However, the distribution of stored data differs considerably.
Reference: [9] <author> Satyanarayanan, M., Howard, J.H., Nichols, D.N., Sidebotham, R.N., Spector, A.Z. and West, M.J., </author> <title> The ITC Distributed File System: </title> <booktitle> Principles and Design. Proc. 10th ACM Symposium on Operating System Principles, </booktitle> <month> December </month> <year> 1985. </year>
Reference-contexts: While asymptotic limits to growth are inevitable, they do not appear to be just around the corner. 2. AFS Background The rationale, detailed design, and evolution of AFS have been well documented in previous papers <ref> [2, 5, 9, 10, 11, 15] </ref>. In this section, we only provide enough details of the current version of AFS (AFS-3) to make the rest of the paper understandable. Using a set of trusted servers, AFS presents a location-transparent Unix file name space to clients.
Reference: [10] <author> Satyanarayanan, M., </author> <title> Integrating Security in a Large Distributed System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 7, No. 3, </volume> <month> August </month> <year> 1989. </year>
Reference-contexts: While asymptotic limits to growth are inevitable, they do not appear to be just around the corner. 2. AFS Background The rationale, detailed design, and evolution of AFS have been well documented in previous papers <ref> [2, 5, 9, 10, 11, 15] </ref>. In this section, we only provide enough details of the current version of AFS (AFS-3) to make the rest of the paper understandable. Using a set of trusted servers, AFS presents a location-transparent Unix file name space to clients.
Reference: [11] <author> Satyanarayanan, M., </author> <title> Scalable, Secure, and Highly Available Distributed File Access. </title> <journal> IEEE Computer, </journal> <volume> Vol. 23, </volume> <editor> N. </editor> <volume> 5, </volume> <month> May </month> <year> 1990. </year>
Reference-contexts: While asymptotic limits to growth are inevitable, they do not appear to be just around the corner. 2. AFS Background The rationale, detailed design, and evolution of AFS have been well documented in previous papers <ref> [2, 5, 9, 10, 11, 15] </ref>. In this section, we only provide enough details of the current version of AFS (AFS-3) to make the rest of the paper understandable. Using a set of trusted servers, AFS presents a location-transparent Unix file name space to clients.
Reference: [12] <author> Satyanarayanan, M., </author> <title> The Influence of Scale on Distributed File System Design. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 18, No. 1, </volume> <month> January </month> <year> 1992. </year>
Reference-contexts: this success engenders a new question: "Is the distributed file system paradigm sustainable at very large scale?" In other words, how well can a very large distributed file system meet the goals of simplifying system administration, supporting effective sharing of data, and preserving transparency? Growth brings many problems with it <ref> [12] </ref>: the level of trust between users is lowered; failures tend to be more frequent; administrative coordination is more difficult; performance is degraded. Overall, mechanisms that work well at small scale tend to function less effectively as a system grows.
Reference: [13] <author> Sidebotham, R.N., </author> <title> Volumes: The Andrew File System Data Structuring Primitive. </title> <booktitle> European Unix User Group Conference Proceedings, </booktitle> <month> August </month> <year> 1986. </year>
Reference-contexts: Directories are cached in their entirety, while files are cached in 64 KB chunks. All updates to a file are propagated to its server upon close. Directory modifications are propagated immediately. Backup, disk quota enforcement, and most other administrative operations in AFS operate on volumes <ref> [13] </ref>. A volume is a set of files and directories located on one server and forming a partial subtree of the shared name space. A typical installation has one volume per user, one or more volumes per project, and a number of volumes containing system software.
Reference: [14] <author> Spector, A.Z., </author> <title> Thoughts on Large Distributed File Systems. </title> <booktitle> Proc. of the German National Computer Conference, </booktitle> <month> October </month> <year> 1986. </year>
Reference: [15] <author> Spector, A.Z., Kazar, </author> <title> M.L., Wide Area File Service and the AFS Experimental System. </title> <journal> Unix Review, </journal> <volume> Vol. 7, No. 3, </volume> <month> March </month> <year> 1989. </year>
Reference-contexts: While asymptotic limits to growth are inevitable, they do not appear to be just around the corner. 2. AFS Background The rationale, detailed design, and evolution of AFS have been well documented in previous papers <ref> [2, 5, 9, 10, 11, 15] </ref>. In this section, we only provide enough details of the current version of AFS (AFS-3) to make the rest of the paper understandable. Using a set of trusted servers, AFS presents a location-transparent Unix file name space to clients. <p> Each cell is a completely autonomous environment. But a federation of cells can cooperate in presenting users with a uniform, seamless file name space. The ability to decompose a distributed system into cells simplifies delegation of administrative responsibility <ref> [15] </ref>. As originally designed, AFS was intended for a LAN. However, the RPC protocol currently used in AFS has been designed to perform well both on LANs as well as on wide-area networks.
Reference: [16] <author> Steiner, J.G., Neuman, C., Schiller, J.I., </author> <title> Kerberos: An Authentication Service for Open Network Systems. </title> <booktitle> Usenix Conference Proceedings, </booktitle> <month> Winter </month> <year> 1988. </year>
Reference-contexts: AFS uses an access list mechanism for protection. The granularity of protection is an entire directory rather than individual files. Users may be members of groups, and access lists may specify rights for users and groups. Authentication relies on Kerberos <ref> [16] </ref>. AFS supports multiple administrative cells, each with its own servers, clients, system administrators and users. Each cell is a completely autonomous environment. But a federation of cells can cooperate in presenting users with a uniform, seamless file name space.

References-found: 16

