URL: http://www.sds.lcs.mit.edu/publications/postscript/infocom98lwg.ps
Refering-URL: http://www.sds.lcs.mit.edu/publications/infocom98lwg.html
Root-URL: 
Title: Improving the Performance of Distributed Applications Using Active Networks  
Author: Ulana Legedza, David Wetherall and John Guttag 
Keyword: active networks, caching, distributed applications, networking protocols, performance.  
Affiliation: Software Devices and Systems Group Laboratory for Computer Science Massachusetts Institute of Technology  
Date: April 1998  
Note: To appear in IEEE INFOCOM, San Francisco,  
Abstract: An active network allows applications to inject customized programs into network nodes. This enables faster protocol innovation by making it easier to deploy new network protocols, even over the wide area. In this paper, we argue that the ability to introduce active protocols offers important opportunities for end-to-end performance improvements of distributed applications. We begin by describing several active protocols that provide novel network services and discussing the potential impact of these kinds of services on end-to-end application performance. We then present and analyze the performance of an active networking protocol that uses caching within the network backbone to reduce load on both servers and backbone routers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Balakrishnan et al. </author> <title> A comparison of mechanisms for improving TCP performance over wireless links. </title> <booktitle> In SIGCOMM 1996, </booktitle> <address> Stanford, CA, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: Processing within the network has been limited largely to routing, simple QOS (quality of service) schemes, and congestion control. Today, however, there is considerable interest in pushing other kinds of processing into the network. Examples include the transport-level support for wireless links of snoop-TCP <ref> [1] </ref>, and the application-specific filtering of network firewalls [14]. Active networks [24, 23] take this trend to the extreme. They allow servers and clients to inject customized programs into the nodes of the network, thus interposing application-specified computation between communicating endpoints.
Reference: [2] <author> B. Bershad et al. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In 15th Symp. on Operating Systems Principles, </booktitle> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: It argues that the roles of application and network must be matched for efficient processing. Other instantiations of this philosophy include configurable protocol systems, notably the x-kernel [16] and protocol boosters [18]. Programmable network services are also supported by extensible operating systems technology <ref> [11, 8, 2] </ref>. For example, ASHs [25] allow user-defined handlers to be run by the kernel in response to packet arrivals, while Plexus [12] allows application-specific communication protocols to be incorporated into the kernel.
Reference: [3] <author> S. Bhattacharjee et al. </author> <title> On Active Networking and Congestion. </title> <type> Technical Report GIT-CC-96/02, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <year> 1996. </year>
Reference-contexts: Work at Georgia Tech investigates the benefits of supporting application-specific congestion control mechanisms (e.g., selective discard, lossless compression, transcoding) within the network <ref> [3] </ref>. They find that when transferring MPEG frames, selective discard improves useful throughput during periods of congestion.
Reference: [4] <author> S. Bhattacharjee et al. </author> <title> Self-organizing wide-area net-work caches. </title> <booktitle> In INFOCOM'98, </booktitle> <year> 1998. </year>
Reference-contexts: Because this protocol consumes storage resources rather greedily, in future implementations we may incorporate a more efficient space management scheme such as that described in <ref> [4] </ref>. The request and quote response capsules of our protocol were implemented using the primitives supplied by ants. The capsule processing routines capture the algorithms in a straightforward way.
Reference: [5] <author> K. Calvert and E. </author> <month> Zegura. </month> <institution> Georgia Tech In-ternetwork Topology Models (GT-ITM). Geor-gia Tech College of Computing. </institution> <note> Software on-line: http://www.cc.gatech.edu/fac/Ellen.Zegura/graphs.html. </note>
Reference-contexts: Given this, we assume client site caches large enough to hold all stocks and study the additional value of caching within the network. We do this with a series of simulations. There are several key parameters in our simulations: * T, the network topology. We used GT-ITM <ref> [5, 6] </ref> to generate a variety of random internetwork topologies. Each topology is a transit-stub network [30] supporting 1000 end nodes. The end nodes are organized into sites (of average size six) that are connected to the backbone.
Reference: [6] <author> K. L. Calvert et al. </author> <title> Modeling Internet Topology. </title> <journal> In IEEE Communications, </journal> <month> June </month> <year> 1997. </year>
Reference-contexts: Given this, we assume client site caches large enough to hold all stocks and study the additional value of caching within the network. We do this with a series of simulations. There are several key parameters in our simulations: * T, the network topology. We used GT-ITM <ref> [5, 6] </ref> to generate a variety of random internetwork topologies. Each topology is a transit-stub network [30] supporting 1000 end nodes. The end nodes are organized into sites (of average size six) that are connected to the backbone.
Reference: [7] <author> A. Chankuntod et al. </author> <title> A hierarchical internet object cache. </title> <booktitle> In Proceedings of 1996 USENIX, </booktitle> <year> 1996. </year>
Reference-contexts: In the case where N=1000, we see a decrease in server load of 54%. Caches shared between sites are clearly beneficial. Ultimately, we would like to compare intra-network caching to other systems of shared caches (such as <ref> [7, 26, 31] </ref>) that locate their caches at network endpoints. However, it is not yet clear which endpoint caching scheme is the most effective.
Reference: [8] <author> D. R. Cheriton and K. J. Duda. </author> <title> A caching model of operating system functionality. </title> <booktitle> In Proceedings of the First Symposium on Operating Systems Design and Implementation, </booktitle> <year> 1994. </year>
Reference-contexts: It argues that the roles of application and network must be matched for efficient processing. Other instantiations of this philosophy include configurable protocol systems, notably the x-kernel [16] and protocol boosters [18]. Programmable network services are also supported by extensible operating systems technology <ref> [11, 8, 2] </ref>. For example, ASHs [25] allow user-defined handlers to be run by the kernel in response to packet arrivals, while Plexus [12] allows application-specific communication protocols to be incorporated into the kernel.
Reference: [9] <author> D. D. Clark and D. L. Tennenhouse. </author> <title> Architectural Considerations for a New Generation of Protocols. </title> <note> In SIG-COMM '90, 1990. [10] eBay Inc. AuctionWeb server. http://www.ebay.com/. </note>
Reference-contexts: Other current projects building programmable networks are Switchware [22], whose Active Bridge demonstrates the benefits of active networking in terms of enhanced functionality rather than improved performance, and Netscript [29], which focuses on management tasks. Our work has been influenced by the philosophy of Application Level Framing (ALF) <ref> [9] </ref>, a design guideline that includes the semantics of the application in the design of its transport protocol. It argues that the roles of application and network must be matched for efficient processing. Other instantiations of this philosophy include configurable protocol systems, notably the x-kernel [16] and protocol boosters [18].
Reference: [11] <author> D. R. Engler et al. Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management. </title> <booktitle> In 15th Symp. on Operating Systems Principles, </booktitle> <year> 1995. </year>
Reference-contexts: It argues that the roles of application and network must be matched for efficient processing. Other instantiations of this philosophy include configurable protocol systems, notably the x-kernel [16] and protocol boosters [18]. Programmable network services are also supported by extensible operating systems technology <ref> [11, 8, 2] </ref>. For example, ASHs [25] allow user-defined handlers to be run by the kernel in response to packet arrivals, while Plexus [12] allows application-specific communication protocols to be incorporated into the kernel.
Reference: [12] <author> M. E. Fiuczynski and B. N. Bershad. </author> <title> An extensible protocol architecture for application-specific networking. </title> <booktitle> In Proceedings of the 1996 Winter USENIX Conference, </booktitle> <year> 1996. </year>
Reference-contexts: Programmable network services are also supported by extensible operating systems technology [11, 8, 2]. For example, ASHs [25] allow user-defined handlers to be run by the kernel in response to packet arrivals, while Plexus <ref> [12] </ref> allows application-specific communication protocols to be incorporated into the kernel.
Reference: [13] <author> S. Floyd et al. </author> <title> A Reliable Multicast Framework for Light-weight Sessions and Application Level Framing. </title> <booktitle> In ACM SIGCOMM'95, </booktitle> <year> 1995. </year>
Reference-contexts: Providing an efficient and scalable reliable multicast service over a wide-area network is a difficult problem; it has been a topic of considerable recent interest in the networking community <ref> [13, 15] </ref>. The key challenges include: managing bandwidth utilization of bottleneck links, not overloading the sender with retransmission requests, and keeping latency of retransmissions low. <p> At the level of the implementation, these challenges translate into finding mechanisms for preventing NACK (negative acknowledgment) implosion, distributing responsibility for sending retrans-missions, and limiting the delivery scope of retransmitted packets. In existing end-to-end approaches <ref> [13, 15] </ref>, considerable effort is made to control NACK implosion and distribute responsibility for repair, but at the cost of increased retransmission latency [13] and/or aggregate bandwidth utilization [15]. None of these approaches offer a particularly attractive scoping technique. <p> In existing end-to-end approaches [13, 15], considerable effort is made to control NACK implosion and distribute responsibility for repair, but at the cost of increased retransmission latency <ref> [13] </ref> and/or aggregate bandwidth utilization [15]. None of these approaches offer a particularly attractive scoping technique. Most of the difficulty stems from not having a good way to implement a hierarchy using only endpoint nodes.
Reference: [14] <author> M. Greenwald et al. </author> <title> Designing an academic firewall: Policy, practice and experience with SURF. </title> <booktitle> In Proceedings of the 1996 Symposium on Network and Distributed Systems Security, </booktitle> <address> San Diego, CA, </address> <year> 1996. </year>
Reference-contexts: Today, however, there is considerable interest in pushing other kinds of processing into the network. Examples include the transport-level support for wireless links of snoop-TCP [1], and the application-specific filtering of network firewalls <ref> [14] </ref>. Active networks [24, 23] take this trend to the extreme. They allow servers and clients to inject customized programs into the nodes of the network, thus interposing application-specified computation between communicating endpoints.
Reference: [15] <author> H. W. Holbrook et al. </author> <title> Log-Based Receiver-Reliable Multicast for Distributed Interactive Simulation. </title> <booktitle> In SIGCOMM'95. ACM, </booktitle> <year> 1995. </year>
Reference-contexts: Providing an efficient and scalable reliable multicast service over a wide-area network is a difficult problem; it has been a topic of considerable recent interest in the networking community <ref> [13, 15] </ref>. The key challenges include: managing bandwidth utilization of bottleneck links, not overloading the sender with retransmission requests, and keeping latency of retransmissions low. <p> At the level of the implementation, these challenges translate into finding mechanisms for preventing NACK (negative acknowledgment) implosion, distributing responsibility for sending retrans-missions, and limiting the delivery scope of retransmitted packets. In existing end-to-end approaches <ref> [13, 15] </ref>, considerable effort is made to control NACK implosion and distribute responsibility for repair, but at the cost of increased retransmission latency [13] and/or aggregate bandwidth utilization [15]. None of these approaches offer a particularly attractive scoping technique. <p> In existing end-to-end approaches [13, 15], considerable effort is made to control NACK implosion and distribute responsibility for repair, but at the cost of increased retransmission latency [13] and/or aggregate bandwidth utilization <ref> [15] </ref>. None of these approaches offer a particularly attractive scoping technique. Most of the difficulty stems from not having a good way to implement a hierarchy using only endpoint nodes.
Reference: [16] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-Kernel: An Architecture for Implementing Network Protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: It argues that the roles of application and network must be matched for efficient processing. Other instantiations of this philosophy include configurable protocol systems, notably the x-kernel <ref> [16] </ref> and protocol boosters [18]. Programmable network services are also supported by extensible operating systems technology [11, 8, 2]. For example, ASHs [25] allow user-defined handlers to be run by the kernel in response to packet arrivals, while Plexus [12] allows application-specific communication protocols to be incorporated into the kernel.
Reference: [17] <author> L.-W. Lehman et al. </author> <title> Active Reliable Multicast. </title> <booktitle> In INFOCOM'98, </booktitle> <year> 1998. </year>
Reference-contexts: As a result, new research in "end-to-end" approaches is exploring the potential improvements to be gained by expanding the services provided by network routers [21]. In another paper in these proceedings <ref> [17] </ref>, Lehman presents an active reliable multicast algorithm, ARM, that takes fuller advantage of the opportunities afforded by processing within the network. Here, we briefly outline some of the techniques used, which illustrate several ways of exploiting active nodes.
Reference: [18] <author> A. Mallet et al. </author> <title> Operating System Support for Protocol Boosters. </title> <type> Technical Report MS-CIS-96-13, </type> <institution> CIS Dept., Univ. of Pennsylvania, </institution> <year> 1996. </year>
Reference-contexts: It argues that the roles of application and network must be matched for efficient processing. Other instantiations of this philosophy include configurable protocol systems, notably the x-kernel [16] and protocol boosters <ref> [18] </ref>. Programmable network services are also supported by extensible operating systems technology [11, 8, 2]. For example, ASHs [25] allow user-defined handlers to be run by the kernel in response to packet arrivals, while Plexus [12] allows application-specific communication protocols to be incorporated into the kernel.
Reference: [19] <author> S. McCanne and S. Floyd. </author> <title> The LBNL network simulator. </title> <institution> Lawrence Berkeley Laboratory. </institution> <note> Software on-line: http://www-nrg.ee.lbl.gov/ns/. </note>
Reference-contexts: For a fixed currency, the hit rate in both network and client caches tends to go up with the request rate. In our simulations, each client generates one re quest per second (R = 1). We used a modified version of the ns <ref> [19] </ref> simulator to simulate our protocol. In order to keep this preliminary analysis simple, and to avoid having to make unsubstantiated assumptions about the relative throughputs of active and non-active routers, we simulate a high capacity network in which there are no congestion-related losses. We performed two sets of experiments.
Reference: [20] <author> ONSALE Inc. </author> <title> ONSALE web server. </title> <address> http://www.onsale.com/. </address>
Reference-contexts: Thus, unlike auctioneers in traditional auctions, the auction server is likely to receive bids that are too low and must be rejected. Current implementations of such servers <ref> [10, 20] </ref> perform all bid processing at the server. Our active protocol filters out low bids in the network, before they reach the server. When the server senses that it is heavily loaded, it activates the filters and periodically updates them with the current price of the popular item.
Reference: [21] <author> C. Papadopoulos et al. </author> <title> An error control scheme for large-scale multicast applications. </title> <institution> Unpublished manuscript from Washington Univ., </institution> <address> St. Louis (http://www.ccrc.wustl.edu/ christos), </address> <year> 1997. </year>
Reference-contexts: Most of the difficulty stems from not having a good way to implement a hierarchy using only endpoint nodes. As a result, new research in "end-to-end" approaches is exploring the potential improvements to be gained by expanding the services provided by network routers <ref> [21] </ref>. In another paper in these proceedings [17], Lehman presents an active reliable multicast algorithm, ARM, that takes fuller advantage of the opportunities afforded by processing within the network. Here, we briefly outline some of the techniques used, which illustrate several ways of exploiting active nodes.
Reference: [22] <author> J. Smith et al. </author> <title> SwitchWare Accelerating Network Evolution. </title> <type> Technical Report MS-CIS-96-38, </type> <institution> CIS Dept., Univ. of Pennsylvannia, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: Though their experiments did not address the impact of this processing on other network traffic, their results are consistent with ours, as are their conclusions about the utility of application-specific processing within the network. Other current projects building programmable networks are Switchware <ref> [22] </ref>, whose Active Bridge demonstrates the benefits of active networking in terms of enhanced functionality rather than improved performance, and Netscript [29], which focuses on management tasks.
Reference: [23] <author> D. Tennenhouse et al. </author> <title> A Survey of Active Network Research. </title> <journal> IEEE Communications Magazine, </journal> <year> 1997. </year>
Reference-contexts: Today, however, there is considerable interest in pushing other kinds of processing into the network. Examples include the transport-level support for wireless links of snoop-TCP [1], and the application-specific filtering of network firewalls [14]. Active networks <ref> [24, 23] </ref> take this trend to the extreme. They allow servers and clients to inject customized programs into the nodes of the network, thus interposing application-specified computation between communicating endpoints.
Reference: [24] <author> D. L. Tennenhouse and D. Wetherall. </author> <title> Towards an active network architecture. </title> <booktitle> In Multimedia Computing and Networking 96, </booktitle> <address> San Jose, CA, </address> <month> Jan </month> <year> 1996. </year>
Reference-contexts: Today, however, there is considerable interest in pushing other kinds of processing into the network. Examples include the transport-level support for wireless links of snoop-TCP [1], and the application-specific filtering of network firewalls [14]. Active networks <ref> [24, 23] </ref> take this trend to the extreme. They allow servers and clients to inject customized programs into the nodes of the network, thus interposing application-specified computation between communicating endpoints.
Reference: [25] <author> D. A. Wallach et al. ASHs: </author> <title> Application-specific handlers for high-performance messaging. </title> <booktitle> In SIGCOMM '96. ACM, </booktitle> <year> 1996. </year>
Reference-contexts: It argues that the roles of application and network must be matched for efficient processing. Other instantiations of this philosophy include configurable protocol systems, notably the x-kernel [16] and protocol boosters [18]. Programmable network services are also supported by extensible operating systems technology [11, 8, 2]. For example, ASHs <ref> [25] </ref> allow user-defined handlers to be run by the kernel in response to packet arrivals, while Plexus [12] allows application-specific communication protocols to be incorporated into the kernel.
Reference: [26] <author> Z. Wang and J. Crowcroft. Cachemesh: </author> <title> A distributed cache system for world wide web. NLANR Web Caching Workshop, </title> <month> June </month> <year> 1997. </year>
Reference-contexts: In the case where N=1000, we see a decrease in server load of 54%. Caches shared between sites are clearly beneficial. Ultimately, we would like to compare intra-network caching to other systems of shared caches (such as <ref> [7, 26, 31] </ref>) that locate their caches at network endpoints. However, it is not yet clear which endpoint caching scheme is the most effective.
Reference: [27] <author> D. Wetherall et al. </author> <title> ANTS: A Toolkit for Building and Dynamically Deploying Network Protocols. </title> <booktitle> In OPE-NARCH'98, </booktitle> <year> 1998. </year>
Reference-contexts: It clearly offers increased flexibility, but at some cost. Both the advantages and the costs can be examined along three independent dimensions: 1. Ease of creating and deploying protocols, 2. Impact on network services, and 3. Impact on network performance. In <ref> [27] </ref> we addressed the first of these issues. We described an architecture and a toolkit that facilitates the construction and deployment of active application-specific protocols. <p> We contrast our approach with related work in Sec--tion 5, and conclude in Section 6. 2 Network Architecture The protocols we consider in this paper are developed in the context of our active network architecture, called ants, and its prototype implementation. These are described in detail in <ref> [27] </ref>. Here we cover only those aspects needed to understand the programming model used to develop protocols. Our architecture is composed of a set of nodes connected by point-to-point or shared medium channels. Unlike IP, the network service provided by ants is not fixed it is flexible.
Reference: [28] <author> N. Yeadon. </author> <title> Quality of service for multimedia communications. </title> <type> PhD thesis, </type> <institution> Lancaster University, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: A straightforward design is for the network to passively forward each packet of the input streams to each receiver. Each receiver would then do its own mixing. An alternative is to use fusion to do some of the mixing within the network, as suggested in <ref> [28] </ref>. If multiple input signals pass through the same internal node at approximately the same time, that node can mix the signals. If the mixed signal is smaller than the sum of its constituents, this will reduce the total network traffic.
Reference: [29] <author> Y. Yemini and S. da Silva. </author> <title> Towards Programmable Networks. </title> <booktitle> In IFIP/IEEE Intl. Workshop on Distributed Systems: Operations and Management, </booktitle> <year> 1996. </year>
Reference-contexts: Other current projects building programmable networks are Switchware [22], whose Active Bridge demonstrates the benefits of active networking in terms of enhanced functionality rather than improved performance, and Netscript <ref> [29] </ref>, which focuses on management tasks. Our work has been influenced by the philosophy of Application Level Framing (ALF) [9], a design guideline that includes the semantics of the application in the design of its transport protocol.
Reference: [30] <author> E. W. Zegura et al. </author> <title> How to Model an Internetwork. </title> <booktitle> In INFOCOM'96. IEEE, </booktitle> <year> 1996. </year>
Reference-contexts: We do this with a series of simulations. There are several key parameters in our simulations: * T, the network topology. We used GT-ITM [5, 6] to generate a variety of random internetwork topologies. Each topology is a transit-stub network <ref> [30] </ref> supporting 1000 end nodes. The end nodes are organized into sites (of average size six) that are connected to the backbone. With an average of four sites per backbone node, the backbone consists of 40 nodes that are randomly connected with average degree of 3.5.
Reference: [31] <author> L. Zhang et al. </author> <title> Adaptive web caching. NLANR Web Caching Workshop, </title> <month> June </month> <year> 1997. </year>
Reference-contexts: In the case where N=1000, we see a decrease in server load of 54%. Caches shared between sites are clearly beneficial. Ultimately, we would like to compare intra-network caching to other systems of shared caches (such as <ref> [7, 26, 31] </ref>) that locate their caches at network endpoints. However, it is not yet clear which endpoint caching scheme is the most effective.
References-found: 30

