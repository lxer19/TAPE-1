URL: http://www.research.digital.com/SRC/tla/src127.ps.Z
Refering-URL: http://www.research.digital.com/SRC/tla/papers.html
Root-URL: http://www.research.digital.com
Title: TLA in Pictures  
Author: Leslie Lamport 
Keyword: Concurrency, specification, state-transition diagrams, temporal logic.  
Abstract: Predicate-action diagrams, which are similar to standard state-transition diagrams, are precisely defined as formulas of TLA (the Temporal Logic of Actions). We explain how these diagrams can be used to describe aspects of a specification|and those descriptions then proved correct| even when the complete specification cannot be written as a diagram. We also use the diagrams to illustrate proofs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. H. Mealy, </author> <title> "A method for synthesizing sequential circuits," </title> <journal> Bell System Technical Journal, </journal> <volume> vol. 34, </volume> <pages> pp. 1045-1079, </pages> <month> Sept. </month> <year> 1955. </year>
Reference-contexts: To write the specification , we let pc be a function with domain f1; 2g, with pc [i] indicating where control resides in process i. The formula PC (p; q) can then be defined by PC (p; q) = (pc <ref> [1] </ref> = p) ^ (pc [2] = q) 6 PC ("a"; "a") PC ("a"; "b") PC ("a"; "g") ffi V (sem) y 0 = y + 1 H H HjP (sem) ffi - PC ("a"; "a") PC ("a"; "b") PC ("a"; "g") ffi fl 1 fi 2 H H Hj ff <p> = "a") ^ (0 &lt; sem) ^ pc 0 = [pc except ![i] = "b"] ^ sem 0 = sem 1 fl i = ^ pc [i] = "g" ^ pc 0 = [pc except ![i] = "a"] ^ sem 0 = sem + 1 fi 1 = ^ pc <ref> [1] </ref> = "b" ^ pc 0 = [pc except ![1] = "g"] ^ x 0 = x + 1 ^ hy; semi 0 = hy; semi fi 2 = ^ pc [2] = "b" ^ pc 0 = [pc except ![2] = "g"] ^ y 0 = y + 1 ^
Reference: [2] <author> E. F. Moore, </author> <title> "Gedanken-experiments on sequential machines," in Automata Studies (C. </title> <editor> E. Shannon and J. McCarthy, </editor> <booktitle> eds.), </booktitle> <pages> pp. 129-153, </pages> <address> Princeton, New Jersey: </address> <publisher> Princeton University Press, </publisher> <year> 1956. </year>
Reference-contexts: To write the specification , we let pc be a function with domain f1; 2g, with pc [i] indicating where control resides in process i. The formula PC (p; q) can then be defined by PC (p; q) = (pc [1] = p) ^ (pc <ref> [2] </ref> = q) 6 PC ("a"; "a") PC ("a"; "b") PC ("a"; "g") ffi V (sem) y 0 = y + 1 H H HjP (sem) ffi - PC ("a"; "a") PC ("a"; "b") PC ("a"; "g") ffi fl 1 fi 2 H H Hj ff 2 ffi - sem = <p> 0 = [pc except ![i] = "a"] ^ sem 0 = sem + 1 fi 1 = ^ pc [1] = "b" ^ pc 0 = [pc except ![1] = "g"] ^ x 0 = x + 1 ^ hy; semi 0 = hy; semi fi 2 = ^ pc <ref> [2] </ref> = "b" ^ pc 0 = [pc except ![2] = "g"] ^ y 0 = y + 1 ^ hx; semi 0 = hx; semi N i = ff i _ fi i _ fl i w = hx; y; sem; pci = Init ^ 2 [N ] w ^
Reference: [3] <author> L. Lamport, </author> <title> "The temporal logic of actions," </title> <journal> ACM Trans. Programming Languages and Systems, </journal> <volume> vol. 16, </volume> <pages> pp. 872-923, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: IV. Illustrating Proofs In TLA, there is no distinction between a specification and a property; they are both formulas. Verification means proving that one formula implies another. A practical, relatively complete set of rules for proving such implications is described in <ref> [3] </ref>. We show here how predicate-action diagrams can be used to illustrate these proofs. We take as our example the same one treated in [3], that the specification defined in Section IV-A below implies the specification defined in Section II above. A. <p> Verification means proving that one formula implies another. A practical, relatively complete set of rules for proving such implications is described in <ref> [3] </ref>. We show here how predicate-action diagrams can be used to illustrate these proofs. We take as our example the same one treated in [3], that the specification defined in Section IV-A below implies the specification defined in Section II above. A. <p> This completes the proof of condition 3. Using the predicate-action diagram does not simplify the proof. If we were to make the argument given above rigorous, we would go through precisely the same steps as in the proof described in <ref> [3] </ref>. However, the diagram does allow us to visualize the proof, which can help us to understand it. V. <p> Diagrams (b) and (c) of Figure 10 look quite different, but they are diagrams for the same specification. * To illustrate proofs. The disjunction of the predicates labeling the nodes in Figure 12 equals the invariant I of the proof in Section 7.2 of <ref> [3] </ref>. The diagram provides a graphical representation of the invariance proof. TLA differs from traditional specification methods in two important ways. First, all TLA specifications are interpreted over the same set of states. <p> In TLA, there are only states, not events. Systems are described in terms of changes to interface variables rather than in terms of interface events. Variables describing the internal state are hidden with the existential quantifier 999 999 described in <ref> [3] </ref>. Changes to any variable, whether internal or interface, can be indicated by node labels or edge labels. Hence, a purely state-based approach like TLA allows more flexibility in how diagrams are drawn than a method based on states and events.
Reference: [4] <author> B. Alpern and F. B. Schneider, </author> <title> "Defining liveness," </title> <journal> Information Processing Letters, </journal> <volume> vol. 21, </volume> <pages> pp. 181-185, </pages> <month> Oct. </month> <year> 1985. </year>
Reference: [5] <author> C. Mead and L. Conway, </author> <title> Introduction to VLSI Systems, </title> <type> ch. 7. </type> <address> Reading, Massachusetts: </address> <publisher> Addison-Wesley, </publisher> <year> 1980. </year>
Reference: [6] <author> M. Abadi and L. Lamport, </author> <title> "Conjoining specifications," </title> <type> Research Report 118, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <year> 1993. </year> <note> To appear in ACM Transactions on Programming Languages and Systems. </note> <author> Leslie Lamport Leslie Lamport attended the Bronx High School of Science, </author> <title> where he took a course in mechanical drawing. He later received a Ph.D. in mathematics from Bran-deis University, where he studied the propagation of singularities in the Cauchy problem for analytic partial differential equations. Since 1985, he has been a member of Digital Equipment Corporation's Systems Research Laboratory, where he has written several biographical sketches. </title>
Reference-contexts: Because TLA formulas are invariant under stuttering, we draw diagrams of particular state functions|usually tuples of variables. TLA differs from most specification methods because it is a logic. It uses simple logical operations like implication and conjunction instead of more complicated automata-based notions of simulation and composition <ref> [6] </ref>. Everything we have done with predicate-action diagrams can be done with state-transition diagrams in any purely state-based formalism. However, conventional formalisms must use some notion of homomorphism between diagrams to describe what is expressed in TLA as logical implication.
References-found: 6

