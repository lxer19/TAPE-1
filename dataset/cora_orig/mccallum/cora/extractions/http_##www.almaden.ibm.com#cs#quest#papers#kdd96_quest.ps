URL: http://www.almaden.ibm.com/cs/quest/papers/kdd96_quest.ps
Refering-URL: http://www.almaden.ibm.com/cs/quest/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: The Quest Data Mining System  
Author: Rakesh Agrawal and Manish Mehta and John Shafer and Ramakrishnan Srikant Andreas Arning and Toni Bollinger 
Address: San Jose, California 95120, U.S.A.  
Affiliation: IBM Almaden Research Center  IBM German Software Development Laboratory Boeblingen, Germany  
Abstract-found: 0
Intro-found: 1
Reference: <author> Agrawal, R., and Psaila, G. </author> <year> 1995. </year> <title> Active data mining. </title> <booktitle> In Proc. of the 1st Int'l Conference on Knowledge Discovery in Databases and Data Mining. </booktitle>
Reference-contexts: The former may not have minimum support, and the latter may not have minimum confidence. This generalization of association rules and the algorithm used in Quest for finding such rules are described in <ref> (Srikant & Agrawal 1995) </ref>. Another generalization of the problem of mining association rules is to discover rules in data containing both quantitative and categorical attributes. An example of such a "quantitative" association rule might be that "10% of married people between age 50 and 60 have at least 2 cars". <p> This generalization and the algorithm for finding such rules used in Quest are presented in (Srikant & Agrawal 1996a). One potential problem that users experience in applying association rules to real problems is that many uninteresting or redundant rules may be generated along with the interesting rules. In <ref> (Srikant & Agrawal 1995) </ref> (further generalized in (Srikant & Agrawal 1996a)), a "greater-than-expected-value" interest measure was introduced, which is used in Quest to prune redundant rules. Sequential Patterns We introduced the problem of discovering sequential patterns in (Agrawal & Srikant 1995). <p> In (Srikant & Agrawal 1995) (further generalized in (Srikant & Agrawal 1996a)), a "greater-than-expected-value" interest measure was introduced, which is used in Quest to prune redundant rules. Sequential Patterns We introduced the problem of discovering sequential patterns in <ref> (Agrawal & Srikant 1995) </ref>. The input data is a set of sequences, called data-sequences. Each data-sequence is a list of transactions, where each transaction is a sets of items (literals). Typically there is a transaction-time associated with each transaction. <p> Incremental Mining As the data mining technology is applied in the production mode, the need for incremental/active mining arises <ref> (Agrawal & Psaila 1995) </ref>. Rather than applying a mining algorithm to the whole data, the data is first partitioned according to time periods. The granularity of the time period is application-dependent.
Reference: <author> Agrawal, R., and Shafer, J. </author> <year> 1996. </year> <title> Parallel mining of association rules: Design, implementation and experience. </title> <type> Research Report RJ 10004, </type> <institution> IBM Almaden Research Center, </institution> <address> San Jose, California. </address> <note> To appear in IEEE Transactions on Knowledge and Data Engineering. </note>
Reference-contexts: We therefore wanted to design a classifier that scales well and can handle training data of this magnitude (without resorting to sampling/partitioning). The ability to classify larger training data can also lead to improved classification accuracy. SLIQ (Supervised Learning In Quest), described in <ref> (Mehta, Agrawal, & Rissanen 1996) </ref>, is a decision tree classifier, designed to classify large training data. It uses a pre-sorting technique in the tree-growth phase. This sorting procedure is integrated with a breadth-first tree growing strategy to enable classification of disk-resident datasets. <p> We have recently designed a new decision-tree-based classification algorithm, called SPRINT (Scalable PaRallelizable INduction of decision Trees) that for the first time removes all of the memory restrictions, and is fast and scalable and easily parallelizable. The algorithm, presented in <ref> (Shafer, Agrawal, & Mehta 1996) </ref>, can classify data sets irrespective of the number of classes, attributes, and examples (records), making it an attractive tool for data mining. Incremental Mining As the data mining technology is applied in the production mode, the need for incremental/active mining arises (Agrawal & Psaila 1995). <p> Parallelism Given that mining can involve very large amounts of data, parallel algorithms are needed. Quest algorithms have been parallelized to run on IBM's shared-nothing multiprocessor SP2. The parallel implementation of the mining of association rules is described in <ref> (Agrawal & Shafer 1996) </ref>. This implementation shows linear scale-up for association rules. Mining of sequential patterns is also parallelized using similar techniques. We have also parallelized the SPRINT classification algorithm (Shafer, Agrawal, & Mehta 1996), where all processors work together to build a single classification model. <p> The parallel implementation of the mining of association rules is described in (Agrawal & Shafer 1996). This implementation shows linear scale-up for association rules. Mining of sequential patterns is also parallelized using similar techniques. We have also parallelized the SPRINT classification algorithm <ref> (Shafer, Agrawal, & Mehta 1996) </ref>, where all processors work together to build a single classification model. Measurements from these implementations show excellent scaleup, speedup and sizeup characteristics. System Architecture system. The mining algorithms run on the server close to the data source. <p> Databases can be accessed in a loosely-coupled mode using dynamic SQL. However, for better performance, it is possible to run the mining algorithm in a tightly-coupled mode described in <ref> (Agrawal & Shim 1996) </ref>. Future Directions We plan to continue on the current path of identifying new data mining operations and developing fast algorithms for their execution. Two operations that we are currently focusing on are deviation detection (Arning & Agrawal 1996) and segmentation of high-dimensional data. <p> Future Directions We plan to continue on the current path of identifying new data mining operations and developing fast algorithms for their execution. Two operations that we are currently focusing on are deviation detection <ref> (Arning & Agrawal 1996) </ref> and segmentation of high-dimensional data. We are also interested in mining data types other than structured data, such as text, particularly in the context of the world-wide web. Finally, we are also exploring the interaction between discovery-driven and verification-driven data mining, especially in OLAP databases.
Reference: <author> Agrawal, R., and Shim, K. </author> <year> 1996. </year> <title> Developing tightly-coupled data mining applications on a relational database system. </title> <booktitle> In Proc. of the 2nd Int'l Conference on Knowledge Discovery in Databases and Data Mining. </booktitle>
Reference-contexts: We therefore wanted to design a classifier that scales well and can handle training data of this magnitude (without resorting to sampling/partitioning). The ability to classify larger training data can also lead to improved classification accuracy. SLIQ (Supervised Learning In Quest), described in <ref> (Mehta, Agrawal, & Rissanen 1996) </ref>, is a decision tree classifier, designed to classify large training data. It uses a pre-sorting technique in the tree-growth phase. This sorting procedure is integrated with a breadth-first tree growing strategy to enable classification of disk-resident datasets. <p> We have recently designed a new decision-tree-based classification algorithm, called SPRINT (Scalable PaRallelizable INduction of decision Trees) that for the first time removes all of the memory restrictions, and is fast and scalable and easily parallelizable. The algorithm, presented in <ref> (Shafer, Agrawal, & Mehta 1996) </ref>, can classify data sets irrespective of the number of classes, attributes, and examples (records), making it an attractive tool for data mining. Incremental Mining As the data mining technology is applied in the production mode, the need for incremental/active mining arises (Agrawal & Psaila 1995). <p> Parallelism Given that mining can involve very large amounts of data, parallel algorithms are needed. Quest algorithms have been parallelized to run on IBM's shared-nothing multiprocessor SP2. The parallel implementation of the mining of association rules is described in <ref> (Agrawal & Shafer 1996) </ref>. This implementation shows linear scale-up for association rules. Mining of sequential patterns is also parallelized using similar techniques. We have also parallelized the SPRINT classification algorithm (Shafer, Agrawal, & Mehta 1996), where all processors work together to build a single classification model. <p> The parallel implementation of the mining of association rules is described in (Agrawal & Shafer 1996). This implementation shows linear scale-up for association rules. Mining of sequential patterns is also parallelized using similar techniques. We have also parallelized the SPRINT classification algorithm <ref> (Shafer, Agrawal, & Mehta 1996) </ref>, where all processors work together to build a single classification model. Measurements from these implementations show excellent scaleup, speedup and sizeup characteristics. System Architecture system. The mining algorithms run on the server close to the data source. <p> Databases can be accessed in a loosely-coupled mode using dynamic SQL. However, for better performance, it is possible to run the mining algorithm in a tightly-coupled mode described in <ref> (Agrawal & Shim 1996) </ref>. Future Directions We plan to continue on the current path of identifying new data mining operations and developing fast algorithms for their execution. Two operations that we are currently focusing on are deviation detection (Arning & Agrawal 1996) and segmentation of high-dimensional data. <p> Future Directions We plan to continue on the current path of identifying new data mining operations and developing fast algorithms for their execution. Two operations that we are currently focusing on are deviation detection <ref> (Arning & Agrawal 1996) </ref> and segmentation of high-dimensional data. We are also interested in mining data types other than structured data, such as text, particularly in the context of the world-wide web. Finally, we are also exploring the interaction between discovery-driven and verification-driven data mining, especially in OLAP databases.
Reference: <author> Agrawal, R., and Srikant, R. </author> <year> 1994. </year> <title> Fast Algorithms for Mining Association Rules. </title> <booktitle> In Proc. of the 20th Int'l Conference on Very Large Databases. </booktitle>
Reference-contexts: The rule holds only if r minimum confidence. Note that the rule will have minimum support because ABCD is frequent. The Apriori algorithm <ref> (Agrawal & Srikant 1994) </ref> used in Quest for finding all frequent itemsets is procedure AprioriAlg () begin L 1 := ffrequent 1-itemsetsg; for ( k := 2; L k1 6= ;; k++ ) do f C k := apriori-gen (L k1 ); // New candidates forall transactions t in the dataset
Reference: <author> Agrawal, R., and Srikant, R. </author> <year> 1995. </year> <title> Mining Sequential Patterns. </title> <booktitle> In Proc. of the 11th Int'l Conference on Data Engineering. </booktitle>
Reference-contexts: The former may not have minimum support, and the latter may not have minimum confidence. This generalization of association rules and the algorithm used in Quest for finding such rules are described in <ref> (Srikant & Agrawal 1995) </ref>. Another generalization of the problem of mining association rules is to discover rules in data containing both quantitative and categorical attributes. An example of such a "quantitative" association rule might be that "10% of married people between age 50 and 60 have at least 2 cars". <p> This generalization and the algorithm for finding such rules used in Quest are presented in (Srikant & Agrawal 1996a). One potential problem that users experience in applying association rules to real problems is that many uninteresting or redundant rules may be generated along with the interesting rules. In <ref> (Srikant & Agrawal 1995) </ref> (further generalized in (Srikant & Agrawal 1996a)), a "greater-than-expected-value" interest measure was introduced, which is used in Quest to prune redundant rules. Sequential Patterns We introduced the problem of discovering sequential patterns in (Agrawal & Srikant 1995). <p> In (Srikant & Agrawal 1995) (further generalized in (Srikant & Agrawal 1996a)), a "greater-than-expected-value" interest measure was introduced, which is used in Quest to prune redundant rules. Sequential Patterns We introduced the problem of discovering sequential patterns in <ref> (Agrawal & Srikant 1995) </ref>. The input data is a set of sequences, called data-sequences. Each data-sequence is a list of transactions, where each transaction is a sets of items (literals). Typically there is a transaction-time associated with each transaction. <p> Incremental Mining As the data mining technology is applied in the production mode, the need for incremental/active mining arises <ref> (Agrawal & Psaila 1995) </ref>. Rather than applying a mining algorithm to the whole data, the data is first partitioned according to time periods. The granularity of the time period is application-dependent.
Reference: <author> Agrawal, R.; Lin, K.-I.; Sawhney, H. S.; and Shim, K. </author> <year> 1995a. </year> <title> Fast similarity search in the presence of noise, scaling, and translation in time-series databases. </title> <booktitle> In Proc. of the 21st Int'l Conference on Very Large Databases. </booktitle>
Reference-contexts: Examples include identifying companies with similar pattern of growth, finding products with similar selling patterns, discovering stocks with similar price movements, determining portions of seismic waves that are not similar to spot geological irregularities, etc. We introduced a model of time-series similarity in <ref> (Agrawal et al. 1995a) </ref>. In this model, two time-series are considered to be similar if they have enough nonoverlapping time-ordered pieces (subseries) that are similar. <p> Two subsequences are considered similar if one lies within an envelope of * width around the other, ignoring outliers. The matching subseries need not be aligned along the time axis. Figure 3 captures the intuition underlying our similarity model. The matching system used in Quest is described in <ref> (Agrawal et al. 1995a) </ref>. It consists of three main parts: (i) "atomic" subseries matching, (ii) long subseries matching, and (iii) series matching.
Reference: <author> Agrawal, R.; Psaila, G.; Wimmers, E. L.; and Zat, M. </author> <year> 1995b. </year> <title> Querying shapes of histories. </title> <booktitle> In Proc. of the 21st Int'l Conference on Very Large Databases. </booktitle>
Reference-contexts: We can now query the database using predicates that select patterns based on the shape of the history of some or all parameters. A shape query language is presented for this purpose in <ref> (Agrawal et al. 1995b) </ref>. The user can specify triggers over the database in which the triggering condition is a query on the shape of the history.
Reference: <author> Agrawal, R.; Imielinski, T.; and Swami, A. </author> <year> 1993a. </year> <title> Database mining: A performance perspective. </title> <journal> IEEE Transactions on Knowledge and Data Engineering 5(6) </journal> <pages> 914-925. </pages>
Reference-contexts: This paper is a capsule summary of the current functionality and architecture of the Quest data mining System. Our overall approach has been to identify basic data mining operations that cut across applications and develop fast, scalable algorithms for their execution <ref> (Agrawal, Imielinski, & Swami 1993a) </ref>.
Reference: <author> Agrawal, R.; Imielinski, T.; and Swami, A. </author> <year> 1993b. </year> <title> Mining association rules between sets of items in large databases. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> 207-216. </pages>
Reference-contexts: Further information about Quest can be obtained from http://www.almaden.ibm.com/cs/quest. IBM is making the Quest technology commercially available through the data mining product, IBM Intelligent Miner. fl Current members of the Quest group. Association Rules We introduced the problem of discovering association rules in <ref> (Agrawal, Imielinski, & Swami 1993b) </ref>. Given a set of transactions, where each transaction is a set of literals (called items), an association rule is an expression of the form X ) Y , where X and Y are sets of items. <p> See (Nearhos, Roth-man, & Viveros 1996) for a case study of a successful application in health insurance. Apriori Algorithm The problem of mining association rules is decomposed into two subproblems <ref> (Agrawal, Imielinski, & Swami 1993b) </ref>: * Find all combinations of items that have transaction support above minimum support. Call those combi nations frequent itemsets. * Use the frequent itemsets to generate the desired rules.
Reference: <author> Arning, A., and Agrawal, R. </author> <year> 1996. </year> <title> A linear method for deviation detection in large databases. </title> <booktitle> In Proc. of the 2nd Int'l Conference on Knowledge Discovery in Databases and Data Mining. </booktitle>
Reference-contexts: Future Directions We plan to continue on the current path of identifying new data mining operations and developing fast algorithms for their execution. Two operations that we are currently focusing on are deviation detection <ref> (Arning & Agrawal 1996) </ref> and segmentation of high-dimensional data. We are also interested in mining data types other than structured data, such as text, particularly in the context of the world-wide web. Finally, we are also exploring the interaction between discovery-driven and verification-driven data mining, especially in OLAP databases.
Reference: <editor> Fayyad, U. M.; Piatetsky-Shapiro, G.; Smyth, P.; and Uthurusamy, R., eds. </editor> <year> 1995. </year> <title> Advances in Knowledge Discovery and Data Mining. </title> <publisher> AAAI/MIT Press. </publisher>
Reference-contexts: Unfortunately, for the same reason, we have not been able to include a discussion of the related work. Besides proceedings of the KDD, SIG-MOD, VLDB, and Data Engineering Conferences, other excellent sources of information about the data mining systems and algorithms include (Piatetsky-Shapiro & Frawley 1991) <ref> (Fayyad et al. 1995) </ref>. Further information about Quest can be obtained from http://www.almaden.ibm.com/cs/quest. IBM is making the Quest technology commercially available through the data mining product, IBM Intelligent Miner. fl Current members of the Quest group.
Reference: <author> Mehta, M.; Agrawal, R.; and Rissanen, J. </author> <year> 1996. </year> <title> SLIQ: A fast scalable classifier for data mining. </title> <booktitle> In Proc. of the Fifth Int'l Conference on Extending Database Technology (EDBT). </booktitle>
Reference-contexts: We therefore wanted to design a classifier that scales well and can handle training data of this magnitude (without resorting to sampling/partitioning). The ability to classify larger training data can also lead to improved classification accuracy. SLIQ (Supervised Learning In Quest), described in <ref> (Mehta, Agrawal, & Rissanen 1996) </ref>, is a decision tree classifier, designed to classify large training data. It uses a pre-sorting technique in the tree-growth phase. This sorting procedure is integrated with a breadth-first tree growing strategy to enable classification of disk-resident datasets. <p> We have recently designed a new decision-tree-based classification algorithm, called SPRINT (Scalable PaRallelizable INduction of decision Trees) that for the first time removes all of the memory restrictions, and is fast and scalable and easily parallelizable. The algorithm, presented in <ref> (Shafer, Agrawal, & Mehta 1996) </ref>, can classify data sets irrespective of the number of classes, attributes, and examples (records), making it an attractive tool for data mining. Incremental Mining As the data mining technology is applied in the production mode, the need for incremental/active mining arises (Agrawal & Psaila 1995). <p> The parallel implementation of the mining of association rules is described in (Agrawal & Shafer 1996). This implementation shows linear scale-up for association rules. Mining of sequential patterns is also parallelized using similar techniques. We have also parallelized the SPRINT classification algorithm <ref> (Shafer, Agrawal, & Mehta 1996) </ref>, where all processors work together to build a single classification model. Measurements from these implementations show excellent scaleup, speedup and sizeup characteristics. System Architecture system. The mining algorithms run on the server close to the data source.
Reference: <author> Nearhos, J.; Rothman, M.; and Viveros, M. </author> <year> 1996. </year> <title> Applying data mining techniques to a health insurance information system. </title> <booktitle> In Proc. of the 22nd Int'l Conference on Very Large Databases. </booktitle>
Reference-contexts: The problem is to find all association rules that satisfy user-specified minimum support and minimum confidence constraints. Applications include discovering affinities for market basket analysis and cross-marketing, catalog design, loss-leader analysis, store layout, customer segmentation based on buying patterns, etc. See <ref> (Nearhos, Roth-man, & Viveros 1996) </ref> for a case study of a successful application in health insurance. Apriori Algorithm The problem of mining association rules is decomposed into two subproblems (Agrawal, Imielinski, & Swami 1993b): * Find all combinations of items that have transaction support above minimum support.
Reference: <editor> Piatetsky-Shapiro, G., and Frawley, W. J., eds. </editor> <year> 1991. </year> <title> Knowledge Discovery in Databases. </title> <address> Menlo Park, CA: </address> <publisher> AAAI/MIT Press. </publisher>
Reference: <author> Shafer, J.; Agrawal, R.; and Mehta, M. </author> <year> 1996. </year> <title> Fast serial and parallel classification of very large data bases. </title> <booktitle> In Proc. of the 22nd Int'l Conference on Very Large Databases. </booktitle>
Reference-contexts: We have recently designed a new decision-tree-based classification algorithm, called SPRINT (Scalable PaRallelizable INduction of decision Trees) that for the first time removes all of the memory restrictions, and is fast and scalable and easily parallelizable. The algorithm, presented in <ref> (Shafer, Agrawal, & Mehta 1996) </ref>, can classify data sets irrespective of the number of classes, attributes, and examples (records), making it an attractive tool for data mining. Incremental Mining As the data mining technology is applied in the production mode, the need for incremental/active mining arises (Agrawal & Psaila 1995). <p> Parallelism Given that mining can involve very large amounts of data, parallel algorithms are needed. Quest algorithms have been parallelized to run on IBM's shared-nothing multiprocessor SP2. The parallel implementation of the mining of association rules is described in <ref> (Agrawal & Shafer 1996) </ref>. This implementation shows linear scale-up for association rules. Mining of sequential patterns is also parallelized using similar techniques. We have also parallelized the SPRINT classification algorithm (Shafer, Agrawal, & Mehta 1996), where all processors work together to build a single classification model. <p> The parallel implementation of the mining of association rules is described in (Agrawal & Shafer 1996). This implementation shows linear scale-up for association rules. Mining of sequential patterns is also parallelized using similar techniques. We have also parallelized the SPRINT classification algorithm <ref> (Shafer, Agrawal, & Mehta 1996) </ref>, where all processors work together to build a single classification model. Measurements from these implementations show excellent scaleup, speedup and sizeup characteristics. System Architecture system. The mining algorithms run on the server close to the data source.
Reference: <author> Shim, K.; Srikant, R.; and Agrawal, R. </author> <year> 1996. </year> <title> The *-k-d-b tree: A fast index structure for high-dimensional similarity joins. </title> <type> Research Report, </type> <institution> IBM Almaden Research Center, </institution> <address> San Jose, California. </address>
Reference-contexts: Databases can be accessed in a loosely-coupled mode using dynamic SQL. However, for better performance, it is possible to run the mining algorithm in a tightly-coupled mode described in <ref> (Agrawal & Shim 1996) </ref>. Future Directions We plan to continue on the current path of identifying new data mining operations and developing fast algorithms for their execution. Two operations that we are currently focusing on are deviation detection (Arning & Agrawal 1996) and segmentation of high-dimensional data.
Reference: <author> Srikant, R., and Agrawal, R. </author> <year> 1995. </year> <title> Mining Generalized Association Rules. </title> <booktitle> In Proc. of the 21st Int'l Conference on Very Large Databases. </booktitle>
Reference-contexts: The former may not have minimum support, and the latter may not have minimum confidence. This generalization of association rules and the algorithm used in Quest for finding such rules are described in <ref> (Srikant & Agrawal 1995) </ref>. Another generalization of the problem of mining association rules is to discover rules in data containing both quantitative and categorical attributes. An example of such a "quantitative" association rule might be that "10% of married people between age 50 and 60 have at least 2 cars". <p> This generalization and the algorithm for finding such rules used in Quest are presented in (Srikant & Agrawal 1996a). One potential problem that users experience in applying association rules to real problems is that many uninteresting or redundant rules may be generated along with the interesting rules. In <ref> (Srikant & Agrawal 1995) </ref> (further generalized in (Srikant & Agrawal 1996a)), a "greater-than-expected-value" interest measure was introduced, which is used in Quest to prune redundant rules. Sequential Patterns We introduced the problem of discovering sequential patterns in (Agrawal & Srikant 1995). <p> In (Srikant & Agrawal 1995) (further generalized in (Srikant & Agrawal 1996a)), a "greater-than-expected-value" interest measure was introduced, which is used in Quest to prune redundant rules. Sequential Patterns We introduced the problem of discovering sequential patterns in <ref> (Agrawal & Srikant 1995) </ref>. The input data is a set of sequences, called data-sequences. Each data-sequence is a list of transactions, where each transaction is a sets of items (literals). Typically there is a transaction-time associated with each transaction.
Reference: <author> Srikant, R., and Agrawal, R. </author> <year> 1996a. </year> <title> Mining Quantitative Association Rules in Large Relational Tables. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data. </booktitle>
Reference-contexts: We deal with quantitative attributes by fine-partitioning the values of the attribute and then combining adjacent partitions as necessary. We also have measures of partial completeness that quantify the information loss due to partitioning. This generalization and the algorithm for finding such rules used in Quest are presented in <ref> (Srikant & Agrawal 1996a) </ref>. One potential problem that users experience in applying association rules to real problems is that many uninteresting or redundant rules may be generated along with the interesting rules. In (Srikant & Agrawal 1995) (further generalized in (Srikant & Agrawal 1996a)), a "greater-than-expected-value" interest measure was introduced, which <p> for finding such rules used in Quest are presented in <ref> (Srikant & Agrawal 1996a) </ref>. One potential problem that users experience in applying association rules to real problems is that many uninteresting or redundant rules may be generated along with the interesting rules. In (Srikant & Agrawal 1995) (further generalized in (Srikant & Agrawal 1996a)), a "greater-than-expected-value" interest measure was introduced, which is used in Quest to prune redundant rules. Sequential Patterns We introduced the problem of discovering sequential patterns in (Agrawal & Srikant 1995). The input data is a set of sequences, called data-sequences.
Reference: <author> Srikant, R., and Agrawal, R. </author> <year> 1996b. </year> <title> Mining Sequential Patterns: Generalizations and Performance Improvements. </title> <booktitle> In Proc. of the Fifth Int'l Conference on Extending Database Technology (EDBT). </booktitle>
Reference-contexts: The patterns discovered using this data could be used in disease research to help identify symptoms/diseases that precede certain diseases. Generalizations The basic definition of sequential patterns was generalized in <ref> (Srikant & Agrawal 1996b) </ref> to incorporate following features: * Introduction of time constraints. Users often want to specify maximum and/or minimum time gaps between adjacent elements of the sequential pattern. <p> In addition, if there were taxonomies (is-a hierarchies) over the items in the data, the sequential patterns could now include items across different levels of the taxonomy. See <ref> (Srikant & Agrawal 1996b) </ref> for a description of the GSP algorithm used in Quest for finding such generalized sequential patterns. Time-Series Clustering Time-series data constitute a large portion of data stored in computers.
Reference: <author> Weiss, S. M., and Kulikowski, C. A. </author> <year> 1991. </year> <title> Computer Systems that Learn: Classification and Prediction Methods from Statistics, Neural Nets, Machine Learning, and Expert Systems. </title> <publisher> Morgan Kaufman. </publisher>
Reference-contexts: In every stage, the system allows for the flexibility of user/system-defined matching parameters without sacrificing efficiency. Classification Classification is a well recognized data mining operation and it has been studied extensively in statistics and machine learning literature <ref> (Weiss & Ku-likowski 1991) </ref>. However, most of the current classification algorithms have the restriction that the training data should fit in memory. In data mining applications, very large training sets with several million examples are common.
References-found: 20

