URL: http://www.tns.lcs.mit.edu/~djw/library/rm-usenix96.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/
Root-URL: 
Title: Why Use a Fishing Line When You Have a Net? An Adaptive Multicast Data Distribution Protocol  
Author: Jeremy R. Cooperstock and Steve Kotsopoulos 
Address: Toronto  
Affiliation: Department of Electrical and Computer Engineering University of  
Abstract: The design and implementation of a system to provide reliable and efficient distribution of large quantities of data to many hosts on a local area network or internetwork is described. By exploiting the one-to-many transmission capabilities of multicast and broadcast, it is possible to transmit data to multiple hosts simultaneously, using less bandwidth and thus obtaining greater efficiency than repeated unicasting. Although performance measurements indicate the superiority of multicast, we dynamically select from available transmission modes so as to maximize efficiency and throughput while providing reliable delivery of data to all hosts. Our results demonstrate that file-distribution programs based on our protocol can benefit from a substantial speed-up over TCP-based programs such as rdist. For example, our system has been used to distribute a 133 Kbyte password file to 68 hosts in 20 seconds, whereas the equivalent rdist took 251 seconds. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jon Postel. </author> <title> Transmission Control Protocol. </title> <type> RFC 793, </type> <institution> USC/Information Sciences Institute, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: 1 Introduction Distributing data to multiple hosts using connection-oriented protocols such as TCP <ref> [1] </ref> can be inefficient because the data must be transmitted over the network multiple times, once to each target. Popular file distribution programs, including rcp, rdist, and track [2], are all based on this protocol.
Reference: [2] <author> Daniel Nachbar. </author> <title> When Network File Systems Aren't Enough: Automatic Software Distribution Revisited. </title> <booktitle> In Proceedings of the Summer USENIX Conference, </booktitle> <address> Atlanta, GA, </address> <year> 1986. </year>
Reference-contexts: 1 Introduction Distributing data to multiple hosts using connection-oriented protocols such as TCP [1] can be inefficient because the data must be transmitted over the network multiple times, once to each target. Popular file distribution programs, including rcp, rdist, and track <ref> [2] </ref>, are all based on this protocol. The time they require to distribute files to a group of machines is proportional to the number of machines in that group. 1 fl Permission has been granted by the USENIX Association to reprint the above paper.
Reference: [3] <author> Michael A. Cooper. </author> <title> Overhauling Rdist for the '90s. </title> <booktitle> In Large Installation System Administrators Workshop Proceedings (LISA VI), </booktitle> <pages> pages 1-8, </pages> <address> Long Beach, CA, </address> <year> 1992. </year>
Reference-contexts: This paper was originally published in the 1996 USENIX Technical Conference Proceedings. Copyright c fl USENIX Association, 1996. 1 Recent improvements to rdist include provisions for parallel update <ref> [3] </ref>, which involves sending files to a number of clients simultaneously. Using this method, file dis Modern local area networks, such as Ethernet and FDDI, support one-to-many communication via broadcasting [4] and multicasting [5]. <p> Cooper agrees, but notes that this would require major changes to rdist. Therefore, we feel that this merge would best be accomplished as part of the re-write he is planning <ref> [3] </ref>. In the meantime, we developed our own rdist-like program, afdpdist, as a proof-of-concept. This allowed us to benchmark AFDP against other file distribution applications and to demonstrate the suitability of our protocol to such tasks.
Reference: [4] <author> Jeffrey Mogul. </author> <title> Broadcasting Internet Data-grams. </title> <type> RFC 919, </type> <month> October </month> <year> 1984. </year>
Reference-contexts: Copyright c fl USENIX Association, 1996. 1 Recent improvements to rdist include provisions for parallel update [3], which involves sending files to a number of clients simultaneously. Using this method, file dis Modern local area networks, such as Ethernet and FDDI, support one-to-many communication via broadcasting <ref> [4] </ref> and multicasting [5]. By exploiting these capabilities, it is possible for a system to send data to multiple hosts simultaneously, thereby greatly reducing network traffic, host load, and elapsed time.
Reference: [5] <author> Steve Deering. </author> <title> Host Extensions for IP Multi-casting. </title> <type> RFC 1112, </type> <month> August </month> <year> 1989. </year>
Reference-contexts: Copyright c fl USENIX Association, 1996. 1 Recent improvements to rdist include provisions for parallel update [3], which involves sending files to a number of clients simultaneously. Using this method, file dis Modern local area networks, such as Ethernet and FDDI, support one-to-many communication via broadcasting [4] and multicasting <ref> [5] </ref>. By exploiting these capabilities, it is possible for a system to send data to multiple hosts simultaneously, thereby greatly reducing network traffic, host load, and elapsed time.
Reference: [6] <author> Jon Postel. </author> <title> User Datagram Protocol. </title> <type> RFC 768, </type> <institution> USC/Information Sciences Institute, </institution> <month> August </month> <year> 1980. </year>
Reference-contexts: Since broadcast and multicast packets can be sent only as datagrams, it is necessary to forgo connection-oriented protocols and instead implement the system using connectionless protocols such as UDP <ref> [6] </ref>. Unfortunately, the UDP protocol is unreliable: neither delivery nor ordering of UDP data packets is guaranteed. A further problem is that broadcast packets cannot travel outside of a local area network, and while multicast does not suffer this limitation, it is not supported by all hosts.
Reference: [7] <author> Brian Whetten, Simon Kaplan, and Todd Montgomery. </author> <title> A High Performance Totally Ordered Multicast Protocol. </title> <note> Submitted for publication, </note> <year> 1995. </year>
Reference-contexts: We now survey related work to AFDP, then describe the AFDP protocol. Following this, we discuss the performance of our system and summarize some applications of AFDP including afdpdist. 2 Related Work The most relevant related work is that of the Reliable Multicast Protocol (RMP) <ref> [7] </ref>, recently implemented by Whetten et al. Similar to the MBusI [8] and the Totem protocol [9], it provides reliable, ordered delivery of data. Like AFDP, RMP goes beyond these earlier systems by allowing multiple, simultaneous senders, and does not rely on hosts to provide multicast support.
Reference: [8] <author> Alan Carroll. ConversationBulider: </author> <title> A Collaborative Erector Set. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Univeristy of Illi-nois, </institution> <year> 1993. </year>
Reference-contexts: Following this, we discuss the performance of our system and summarize some applications of AFDP including afdpdist. 2 Related Work The most relevant related work is that of the Reliable Multicast Protocol (RMP) [7], recently implemented by Whetten et al. Similar to the MBusI <ref> [8] </ref> and the Totem protocol [9], it provides reliable, ordered delivery of data. Like AFDP, RMP goes beyond these earlier systems by allowing multiple, simultaneous senders, and does not rely on hosts to provide multicast support.
Reference: [9] <author> D. A. Agarwal, P. M. Melliar-Smith, and L. E. Moser. Totem: </author> <title> A Protocol for Message Ordering in a Wide-Area Network. </title> <booktitle> In Proceedings of the First ISMM International Conference on Computer Communications and Networks, </booktitle> <pages> pages 1-5, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Following this, we discuss the performance of our system and summarize some applications of AFDP including afdpdist. 2 Related Work The most relevant related work is that of the Reliable Multicast Protocol (RMP) [7], recently implemented by Whetten et al. Similar to the MBusI [8] and the Totem protocol <ref> [9] </ref>, it provides reliable, ordered delivery of data. Like AFDP, RMP goes beyond these earlier systems by allowing multiple, simultaneous senders, and does not rely on hosts to provide multicast support. Similar systems have been proposed and implemented, but these generally rely on a single transmission mechanism.
Reference: [10] <author> J. Ioannidis and G. Maguire Jr. </author> <title> The Coherent File Distribution Protocol. </title> <type> RFC 1235, </type> <month> June </month> <year> 1991. </year>
Reference-contexts: Like AFDP, RMP goes beyond these earlier systems by allowing multiple, simultaneous senders, and does not rely on hosts to provide multicast support. Similar systems have been proposed and implemented, but these generally rely on a single transmission mechanism. For instance, Ioannidis et al. implemented CFDP <ref> [10] </ref>, a one-to-many distribution system without any flow control facilities. Oki et al. implemented The Information Bus [11], which uses a retransmission protocol to provide reliable delivery semantics. Because these systems implement their group communications using broadcast, exclusively, they cannot be used to distribute data beyond a LAN. <p> As a result of the multicast data packet size limit being over six times that of broadcast packets, we obtain a corresponding improvement in peak throughput, as seen in table 1. Hence, we strongly favor multicast over broadcast whenever both are supported. Ioannidis' CFDP <ref> [10] </ref> uses a packet size of 512 bytes to avoid fragmentation but we did not observe any benefit in doing so. 3.4 Internetwork Extensions There are two considerations in scaling this protocol to an internetwork environment.
Reference: [11] <author> Brian Oki, Manfred Pfuegl, Alex Siegel, and Dale Skeen. </author> <title> The Information Bus An Architecture for Extensible Distributed Systems. </title> <booktitle> In Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 58-68, </pages> <address> Asheville, NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Similar systems have been proposed and implemented, but these generally rely on a single transmission mechanism. For instance, Ioannidis et al. implemented CFDP [10], a one-to-many distribution system without any flow control facilities. Oki et al. implemented The Information Bus <ref> [11] </ref>, which uses a retransmission protocol to provide reliable delivery semantics. Because these systems implement their group communications using broadcast, exclusively, they cannot be used to distribute data beyond a LAN. Clark et al. describe the NETBLT protocol [12] for rapid transfer of large quantities of data between computers.
Reference: [12] <author> David D. Clark, Mark L. Lambert, and Lixia Zhang. NETBLT: </author> <title> A Bulk Data Transfer Protocol. </title> <type> RFC 998, </type> <month> March </month> <year> 1987. </year>
Reference-contexts: Oki et al. implemented The Information Bus [11], which uses a retransmission protocol to provide reliable delivery semantics. Because these systems implement their group communications using broadcast, exclusively, they cannot be used to distribute data beyond a LAN. Clark et al. describe the NETBLT protocol <ref> [12] </ref> for rapid transfer of large quantities of data between computers. To achieve high throughput, NETBLT uses a transmission rate-control algorithm similar to ours. However, since this is a connection-oriented protocol, it is not applicable to efficient group communications.
Reference: [13] <author> David R. Cheriton. </author> <title> The V Distributed System. </title> <journal> Communications of the ACM, </journal> <volume> 31(2), </volume> <month> March </month> <year> 1988. </year>
Reference-contexts: To achieve high throughput, NETBLT uses a transmission rate-control algorithm similar to ours. However, since this is a connection-oriented protocol, it is not applicable to efficient group communications. Other research has dealt with multicast transport protocols and flow control problems. For example, Cheriton describes the V Distributed System <ref> [13] </ref>, which also utilizes multicast communication primitives, but only offers "best-effort," not reliable delivery. Armstrong et al. propose a Reliable Multicast Transport [14] protocol to provide a network service that could be used to implement a system such as ours.
Reference: [14] <author> S. Armstrong, A. Freier, and K. Marzullo. </author> <title> Multicast Transport Protocol. </title> <type> RFC 1301, </type> <month> February </month> <year> 1992. </year>
Reference-contexts: Other research has dealt with multicast transport protocols and flow control problems. For example, Cheriton describes the V Distributed System [13], which also utilizes multicast communication primitives, but only offers "best-effort," not reliable delivery. Armstrong et al. propose a Reliable Multicast Transport <ref> [14] </ref> protocol to provide a network service that could be used to implement a system such as ours. Unlike AFDP, though, it cannot be supported by hosts that do not have multicast capability.
Reference: [15] <author> Kenneth P. Birman and Thomas Joseph. </author> <title> Exploiting Replication. </title> <publisher> Addison-Wesley/ACM Press Series, </publisher> <editor> Sape J. Mullender, ed., </editor> <month> June </month> <year> 1988. </year>
Reference-contexts: Armstrong et al. propose a Reliable Multicast Transport [14] protocol to provide a network service that could be used to implement a system such as ours. Unlike AFDP, though, it cannot be supported by hosts that do not have multicast capability. Birman et al. constructed the ISIS system <ref> [15, 16] </ref>, which offers reliable broadcast and multi-cast as part of its toolkit approach to distributed systems design. Unfortunately, ISIS requires separate acknowledgements from each destination, which limits performance and scalability. 3 The Adaptive File Distri bution Protocol AFDP was designed with the goals of efficiency and flexibility.
Reference: [16] <author> Kenneth P. Birman. </author> <title> The Process Group Approach to Reliable Distributed Computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(12) </volume> <pages> 37-53, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Armstrong et al. propose a Reliable Multicast Transport [14] protocol to provide a network service that could be used to implement a system such as ours. Unlike AFDP, though, it cannot be supported by hosts that do not have multicast capability. Birman et al. constructed the ISIS system <ref> [15, 16] </ref>, which offers reliable broadcast and multi-cast as part of its toolkit approach to distributed systems design. Unfortunately, ISIS requires separate acknowledgements from each destination, which limits performance and scalability. 3 The Adaptive File Distri bution Protocol AFDP was designed with the goals of efficiency and flexibility.
Reference: [17] <author> Eva Henriksen, Gisle Aas, and Jan B. Ryd-ningen. </author> <title> A Transport Protocol Supporting Multicast File Transfer over Satellite Links. </title> <booktitle> In Proceedings of Eleventh IEEE Phoenix Conference on Computers and Communications (IPCCC), </booktitle> <pages> pages 590-596, </pages> <address> Scottsdale, Arizona, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: If a network partition arises between group members, or a host fails, we make no attempt to recover from the error. This is an area for future work. 3.1 Flow Control Traditional flow control in transport protocols including stop-and-wait and go-back-N were designed with point-to-point connections in mind <ref> [17] </ref>. Because these techniques require positive ac-knowledgements from hosts receiving data, their performance tends to suffer as the group size, and hence return traffic to the sender increases. <p> However, this technique may suffer if the network is frequently dropping data, thus requiring the sender to retransmit many packets. AFDP combines selective-repeat with a rate-based flow control strategy to prevent unacceptable packet losses. Like Henriksen <ref> [17] </ref>, we wish to 2 The current range of sequence numbers allows AFDP to support up to 4 terabyte files. avoid wasting bandwidth by unnecessary retrans--missions. <p> provided all hosts are approximately the same speed and under the same load. nique reduces publisher throughput, it keeps the number of retransmissions reasonably low. 3.3 Packet size Table 1 demonstrates that using larger packets to transmit data provides greater throughput by reducing protocol overhead and thus increasing efficiency [19] <ref> [17] </ref>. Therefore, we are motivated to avoid the use of broadcast, as this transmission mode imposes a limit of 1472 bytes on packet size.
Reference: [18] <author> M.L. Powell and D. L. </author> <title> Presotto. </title> <publisher> Publishing: </publisher>
Reference-contexts: Therefore, our system attempts to maintain a transmission rate that is as high as possible without resulting in dropped packets. 3.2 Protocol Overview AFDP is based on the publishing model <ref> [18] </ref>, in which any host receiving data is called a subscriber while any host sending data is called a publisher. One special subscriber is designated as the secretary for each group; this host is responsible for managing group membership, authorizing publishers, and determining the appropriate transmission mode to be used.
References-found: 18

