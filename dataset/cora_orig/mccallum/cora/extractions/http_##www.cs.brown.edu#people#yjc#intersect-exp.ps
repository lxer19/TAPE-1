URL: http://www.cs.brown.edu/people/yjc/intersect-exp.ps
Refering-URL: http://www.cs.brown.edu/people/yjc/
Root-URL: http://www.cs.brown.edu/
Email: yjc@cs.brown.edu  
Title: Experiments on the Practical I/O Efficiency of Geometric Algorithms: Distribution Sweep vs. Plane Sweep  
Author: Yi-Jen Chiang 
Date: (1995)  
Note: Extended abstract to appear in Proc. Workshop on Algorithms and Data Structures  (April 1995)  
Address: Providence, R. I. 02912-1910  
Affiliation: Department of Computer Science Brown University  
Abstract: We present an extensive experimental study comparing the performance of four algorithms for the following orthogonal segment intersection problem: given a set of horizontal and vertical line segments in the plane, report all intersecting horizontal-vertical pairs. The problem has important applications in VLSI layout and graphics, which are large-scale in nature. The algorithms under evaluation are distribution sweep and three variations of plane sweep. Distribution sweep is specifically designed for the situations in which the problem is too large to be solved in internal memory, and theoretically has optimal I/O cost. Plane sweep is a well-known and powerful technique in computational geometry, and is optimal for this particular problem in terms of internal computation. The three variations of plane sweep differ by the sorting methods (external vs. internal sorting) used in the preprocessing phase and the dynamic data structures (B tree vs. 2-3-4 tree) used in the sweeping phase. We generate the test data by three programs that use a random number generator while producing some interesting properties that are predicted by our theoretical analysis. The sizes of the test data range from 250 thousand segments to 2.5 million segments. The experiments provide detailed quantitative evaluation of the performance of the four algorithms, and the observed behavior of the algorithms is consistent with their theoretical properties. This is the first experimental work comparing the practical performance between external-memory algorithms and conventional algorithms with large-scale test data. fl An extended abstract of this paper will be presented at the 4th Workshop on Algorithms and Data Structures, Kingston, Ontario, Canada, August, 1995. Research supported in part by the National Science Foundation, by the U.S. Army Research Office, and by the Office of Naval Research and the Advanced Research Projects Agency. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal and J. S. Vitter. </author> <title> The input/output complexity of sorting and related problems. </title> <journal> Communications of the ACM, </journal> <volume> 31(9) </volume> <pages> 1116-1127, </pages> <year> 1988. </year>
Reference-contexts: Early work on algorithms for parallel disk systems concentrates largely on fundamental problems such as sorting, matrix multiplication, and FFT <ref> [1, 24, 31] </ref>. The main focus of this early work is therefore directed at problems that involve permutation at a basic level. Indeed, just the problem of implementing various classes of permutation has been a central theme in external-memory I/O research [1, 12, 13, 15, 31]. <p> The main focus of this early work is therefore directed at problems that involve permutation at a basic level. Indeed, just the problem of implementing various classes of permutation has been a central theme in external-memory I/O research <ref> [1, 12, 13, 15, 31] </ref>. More recently, external-memory research has moved towards solving graph and geometric problems. Work on graph problems includes transitive closure computations [28], some graph traversal problems [19], and memory management problems for maintaining connectivity information and paths on graphs [16]. <p> Distribution sweep theoretically has optimal I/O cost [20]. Plane sweep is a well-known and powerful technique in computational geometry, and is optimal for this particular problem in terms 1 of internal computation [25]. The three variations of plane sweep differ by the sorting methods (external merge sort <ref> [1] </ref> vs. internal merge sort) used in the preprocessing phase and the dynamic data structures (B tree [4, 11, 14] vs. 2-3-4 tree [14]) used in the sweeping phase. <p> Using any dynamic balanced tree, plane sweep takes optimal O (N log N ) time in terms of internal computation. Our three variations of plane sweep differ by the sorting methods and the dynamic data structures used. The first variation, B-Tree, uses external merge sort <ref> [1] </ref> and a B tree [4, 11, 14]; this is a direct way to implement plane sweep in secondary memory. The number of I/O operations performed in the first phase is optimal O ( N B log M N B ) [1], and in the second phase is O (N log <p> The first variation, B-Tree, uses external merge sort <ref> [1] </ref> and a B tree [4, 11, 14]; this is a direct way to implement plane sweep in secondary memory. The number of I/O operations performed in the first phase is optimal O ( N B log M N B ) [1], and in the second phase is O (N log B N B ). <p> Viewing the internal memory as virtually having an infinite size is conceptually the simplest, and is actually the most commonly used strategy today in practice. 2.2 Distribution Sweep Distribution sweep [20] is an external-memory version of plane sweep based on the subdivision technique used in the "distribution sort" algorithms of <ref> [1, 23, 31] </ref>. When applied to the orthogonal segment intersection problem, it works as follows. In the preprocessing phase, we sort the endpoints of all segments into two lists, one by x and the other by y. Again we use external merge sort.
Reference: [2] <author> L. Arge. </author> <title> The buffer tree: A new technique for optimal I/O-algorithms. </title> <booktitle> In Proc. Workshop on Algorithms and Data Structures (to appear), </booktitle> <year> 1995. </year>
Reference-contexts: Further results in this area have been obtained in [17, 32]. Also, Kanellakis et al. [21] and Ra-maswamy and Subramanian [26, 27] give efficient data structures for performing range searching in external memory. Very recently, a new data structure called buffer tree and its applications are given in <ref> [2, 3] </ref>, and an external-memory version of the directed topology tree ([18]) called topology B-tree is given in [9]. For excellent examples of experimental work in computational geometry, see Bentley [5, 6, 7, 8].
Reference: [3] <author> L. Arge, D. E. Vengroff, and J. S. Vitter. </author> <title> External-memory algorithms for processing line segments in geographic information systems. </title> <type> Manuscript, </type> <year> 1995. </year>
Reference-contexts: Further results in this area have been obtained in [17, 32]. Also, Kanellakis et al. [21] and Ra-maswamy and Subramanian [26, 27] give efficient data structures for performing range searching in external memory. Very recently, a new data structure called buffer tree and its applications are given in <ref> [2, 3] </ref>, and an external-memory version of the directed topology tree ([18]) called topology B-tree is given in [9]. For excellent examples of experimental work in computational geometry, see Bentley [5, 6, 7, 8].
Reference: [4] <author> R. Bayer and E. McCreight. </author> <title> Organization of large ordered indexes. </title> <journal> Acta Inform., </journal> <volume> 1 </volume> <pages> 173-189, </pages> <year> 1972. </year>
Reference-contexts: The three variations of plane sweep differ by the sorting methods (external merge sort [1] vs. internal merge sort) used in the preprocessing phase and the dynamic data structures (B tree <ref> [4, 11, 14] </ref> vs. 2-3-4 tree [14]) used in the sweeping phase. We generate the test data by three programs that use a random number generator while producing some interesting properties that are predicted by our theoretical analysis. <p> Our three variations of plane sweep differ by the sorting methods and the dynamic data structures used. The first variation, B-Tree, uses external merge sort [1] and a B tree <ref> [4, 11, 14] </ref>; this is a direct way to implement plane sweep in secondary memory. The number of I/O operations performed in the first phase is optimal O ( N B log M N B ) [1], and in the second phase is O (N log B N B ).
Reference: [5] <author> J. L. Bentley. </author> <title> Experiments on traveling salesman heuristics. </title> <booktitle> In Proc. 1st ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 91-99, </pages> <year> 1990. </year>
Reference-contexts: Very recently, a new data structure called buffer tree and its applications are given in [2, 3], and an external-memory version of the directed topology tree ([18]) called topology B-tree is given in [9]. For excellent examples of experimental work in computational geometry, see Bentley <ref> [5, 6, 7, 8] </ref>. As for experimental work on I/O-efficient computation, very recently Vengroff has built an environment called TPIE for programming external-memory algorithms as he proposed earlier in [29], and also Vengroff and Vitter [30] have reported some benchmarks of TPIE on sorting and matrix multiplication.
Reference: [6] <author> J. L. Bentley. </author> <title> K-d trees for semidynamic point sets. </title> <booktitle> In Proc. 6th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 187-197, </pages> <year> 1990. </year>
Reference-contexts: Very recently, a new data structure called buffer tree and its applications are given in [2, 3], and an external-memory version of the directed topology tree ([18]) called topology B-tree is given in [9]. For excellent examples of experimental work in computational geometry, see Bentley <ref> [5, 6, 7, 8] </ref>. As for experimental work on I/O-efficient computation, very recently Vengroff has built an environment called TPIE for programming external-memory algorithms as he proposed earlier in [29], and also Vengroff and Vitter [30] have reported some benchmarks of TPIE on sorting and matrix multiplication.
Reference: [7] <author> J. L. Bentley. </author> <title> Tools for experiments on algorithms. </title> <booktitle> In Proc. CMU 25th Anniversary Symp., </booktitle> <year> 1990. </year>
Reference-contexts: Very recently, a new data structure called buffer tree and its applications are given in [2, 3], and an external-memory version of the directed topology tree ([18]) called topology B-tree is given in [9]. For excellent examples of experimental work in computational geometry, see Bentley <ref> [5, 6, 7, 8] </ref>. As for experimental work on I/O-efficient computation, very recently Vengroff has built an environment called TPIE for programming external-memory algorithms as he proposed earlier in [29], and also Vengroff and Vitter [30] have reported some benchmarks of TPIE on sorting and matrix multiplication.
Reference: [8] <author> J. L. Bentley. </author> <title> Fast algorithms for geometric traveling salesman problems. </title> <journal> ORSA J. Comput., </journal> <volume> 4(4) </volume> <pages> 387-411, </pages> <year> 1992. </year>
Reference-contexts: Very recently, a new data structure called buffer tree and its applications are given in [2, 3], and an external-memory version of the directed topology tree ([18]) called topology B-tree is given in [9]. For excellent examples of experimental work in computational geometry, see Bentley <ref> [5, 6, 7, 8] </ref>. As for experimental work on I/O-efficient computation, very recently Vengroff has built an environment called TPIE for programming external-memory algorithms as he proposed earlier in [29], and also Vengroff and Vitter [30] have reported some benchmarks of TPIE on sorting and matrix multiplication.
Reference: [9] <author> P. Callahan, M. T. Goodrich, and K. Ramaiyer. </author> <title> Topology B-trees and their applications. </title> <booktitle> In Proc. Workshop on Algorithms and Data Structures (to appear), </booktitle> <year> 1995. </year>
Reference-contexts: Very recently, a new data structure called buffer tree and its applications are given in [2, 3], and an external-memory version of the directed topology tree ([18]) called topology B-tree is given in <ref> [9] </ref>. For excellent examples of experimental work in computational geometry, see Bentley [5, 6, 7, 8].
Reference: [10] <author> Y.-J. Chiang, M. T. Goodrich, E. F. Grove, R. Tamassia, D. E. Vengroff, and J. S. Vitter. </author> <title> External-memory graph algorithms. </title> <booktitle> In Proc. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 139-149, </pages> <year> 1995. </year>
Reference-contexts: More recently, external-memory research has moved towards solving graph and geometric problems. Work on graph problems includes transitive closure computations [28], some graph traversal problems [19], and memory management problems for maintaining connectivity information and paths on graphs [16]. Recently, Chiang et al. <ref> [10] </ref> present a collection of new techniques for designing and analyzing I/O-efficient graph algorithms, and apply these techniques to a wide variety of specific problems. For geometric problems, Goodrich et al. [20] study a number of problems in computational geometry and develop several paradigms for I/O-optimal geometric computations.
Reference: [11] <author> D. Comer. </author> <title> The ubiquitous B-tree. </title> <journal> ACM Comput. Surv., </journal> <volume> 11 </volume> <pages> 121-137, </pages> <year> 1979. </year>
Reference-contexts: The three variations of plane sweep differ by the sorting methods (external merge sort [1] vs. internal merge sort) used in the preprocessing phase and the dynamic data structures (B tree <ref> [4, 11, 14] </ref> vs. 2-3-4 tree [14]) used in the sweeping phase. We generate the test data by three programs that use a random number generator while producing some interesting properties that are predicted by our theoretical analysis. <p> Our three variations of plane sweep differ by the sorting methods and the dynamic data structures used. The first variation, B-Tree, uses external merge sort [1] and a B tree <ref> [4, 11, 14] </ref>; this is a direct way to implement plane sweep in secondary memory. The number of I/O operations performed in the first phase is optimal O ( N B log M N B ) [1], and in the second phase is O (N log B N B ).
Reference: [12] <author> T. H. Cormen. </author> <title> Virtual Memory for Data Parallel Computing. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, </institution> <year> 1992. </year>
Reference-contexts: The main focus of this early work is therefore directed at problems that involve permutation at a basic level. Indeed, just the problem of implementing various classes of permutation has been a central theme in external-memory I/O research <ref> [1, 12, 13, 15, 31] </ref>. More recently, external-memory research has moved towards solving graph and geometric problems. Work on graph problems includes transitive closure computations [28], some graph traversal problems [19], and memory management problems for maintaining connectivity information and paths on graphs [16].
Reference: [13] <author> T. H. Cormen. </author> <title> Fast permuting in disk arrays. </title> <journal> Journal of Parallel and Distributed Computing, 17(1-2):41-57, </journal> <volume> Jan./Feb. </volume> <year> 1993. </year>
Reference-contexts: The main focus of this early work is therefore directed at problems that involve permutation at a basic level. Indeed, just the problem of implementing various classes of permutation has been a central theme in external-memory I/O research <ref> [1, 12, 13, 15, 31] </ref>. More recently, external-memory research has moved towards solving graph and geometric problems. Work on graph problems includes transitive closure computations [28], some graph traversal problems [19], and memory management problems for maintaining connectivity information and paths on graphs [16].
Reference: [14] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: The three variations of plane sweep differ by the sorting methods (external merge sort [1] vs. internal merge sort) used in the preprocessing phase and the dynamic data structures (B tree <ref> [4, 11, 14] </ref> vs. 2-3-4 tree [14]) used in the sweeping phase. We generate the test data by three programs that use a random number generator while producing some interesting properties that are predicted by our theoretical analysis. <p> The three variations of plane sweep differ by the sorting methods (external merge sort [1] vs. internal merge sort) used in the preprocessing phase and the dynamic data structures (B tree [4, 11, 14] vs. 2-3-4 tree <ref> [14] </ref>) used in the sweeping phase. We generate the test data by three programs that use a random number generator while producing some interesting properties that are predicted by our theoretical analysis. The sizes of the test data range from 250 thousand segments to 2.5 million segments. <p> Our three variations of plane sweep differ by the sorting methods and the dynamic data structures used. The first variation, B-Tree, uses external merge sort [1] and a B tree <ref> [4, 11, 14] </ref>; this is a direct way to implement plane sweep in secondary memory. The number of I/O operations performed in the first phase is optimal O ( N B log M N B ) [1], and in the second phase is O (N log B N B ). <p> The number of I/O operations performed in the first phase is optimal O ( N B log M N B ) [1], and in the second phase is O (N log B N B ). The second variation, 234-Tree, uses external merge sort and a 2-3-4 tree <ref> [14] </ref>, viewing the internal memory as having an infinite size and letting the virtual memory feature of the OS handle page faults during the second (sweeping) phase.
Reference: [15] <author> T. H. Cormen, T. Sundquist, and L. F. Wisniewski. </author> <title> Asymptotically tight bounds for performing BMMC permutations on parallel disk systems. </title> <type> Technical Report PCS-TR94-223, </type> <institution> Dartmouth College Dept. of Computer Science, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: The main focus of this early work is therefore directed at problems that involve permutation at a basic level. Indeed, just the problem of implementing various classes of permutation has been a central theme in external-memory I/O research <ref> [1, 12, 13, 15, 31] </ref>. More recently, external-memory research has moved towards solving graph and geometric problems. Work on graph problems includes transitive closure computations [28], some graph traversal problems [19], and memory management problems for maintaining connectivity information and paths on graphs [16].
Reference: [16] <author> E. Feuerstein and A. Marchetti-Spaccamela. </author> <title> Memory paging for connectivity and path problems in graphs. </title> <booktitle> In Proc. Int. Symp. on Algorithms and Comp., </booktitle> <year> 1993. </year>
Reference-contexts: More recently, external-memory research has moved towards solving graph and geometric problems. Work on graph problems includes transitive closure computations [28], some graph traversal problems [19], and memory management problems for maintaining connectivity information and paths on graphs <ref> [16] </ref>. Recently, Chiang et al. [10] present a collection of new techniques for designing and analyzing I/O-efficient graph algorithms, and apply these techniques to a wide variety of specific problems.
Reference: [17] <author> P. G. Franciosa and M. Talamo. </author> <title> Orders, implicit k-sets representation and fast halfplane searching. </title> <booktitle> In Proc. Workshop on Orders, Algorithms and Applications (ORDAL'94), </booktitle> <pages> pages 117-127, </pages> <year> 1994. </year>
Reference-contexts: For geometric problems, Goodrich et al. [20] study a number of problems in computational geometry and develop several paradigms for I/O-optimal geometric computations. Further results in this area have been obtained in <ref> [17, 32] </ref>. Also, Kanellakis et al. [21] and Ra-maswamy and Subramanian [26, 27] give efficient data structures for performing range searching in external memory.
Reference: [18] <author> G. N. Frederickson. </author> <title> A data structure for dynamically maintaining rooted trees. </title> <booktitle> In Proc. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 175-184, </pages> <year> 1993. </year>
Reference: [19] <author> M. T. Goodrich, M. H. Nodine, and J. S. Vitter. </author> <title> Blocking for external graph searching. </title> <booktitle> In Proc. ACM SIGACT-SIGMOD-SIGART Symp. on Principles of Database Sys., </booktitle> <pages> pages 222-232, </pages> <year> 1993. </year>
Reference-contexts: Indeed, just the problem of implementing various classes of permutation has been a central theme in external-memory I/O research [1, 12, 13, 15, 31]. More recently, external-memory research has moved towards solving graph and geometric problems. Work on graph problems includes transitive closure computations [28], some graph traversal problems <ref> [19] </ref>, and memory management problems for maintaining connectivity information and paths on graphs [16]. Recently, Chiang et al. [10] present a collection of new techniques for designing and analyzing I/O-efficient graph algorithms, and apply these techniques to a wide variety of specific problems.
Reference: [20] <author> M. T. Goodrich, J.-J. Tsay, D. E. Vengroff, and J. S. Vitter. </author> <title> External-memory computational 15 geometry. </title> <booktitle> In IEEE Foundations of Comp. Sci., </booktitle> <pages> pages 714-723, </pages> <year> 1993. </year>
Reference-contexts: Recently, Chiang et al. [10] present a collection of new techniques for designing and analyzing I/O-efficient graph algorithms, and apply these techniques to a wide variety of specific problems. For geometric problems, Goodrich et al. <ref> [20] </ref> study a number of problems in computational geometry and develop several paradigms for I/O-optimal geometric computations. Further results in this area have been obtained in [17, 32]. Also, Kanellakis et al. [21] and Ra-maswamy and Subramanian [26, 27] give efficient data structures for performing range searching in external memory. <p> The problem has important applications in VLSI layout and graphics, which are large-scale in nature. The algorithms under evaluation are distribution sweep of Goodrich et al. <ref> [20] </ref> and three variations of plane sweep [25]. Distribution sweep theoretically has optimal I/O cost [20]. Plane sweep is a well-known and powerful technique in computational geometry, and is optimal for this particular problem in terms 1 of internal computation [25]. <p> The problem has important applications in VLSI layout and graphics, which are large-scale in nature. The algorithms under evaluation are distribution sweep of Goodrich et al. <ref> [20] </ref> and three variations of plane sweep [25]. Distribution sweep theoretically has optimal I/O cost [20]. Plane sweep is a well-known and powerful technique in computational geometry, and is optimal for this particular problem in terms 1 of internal computation [25]. <p> Viewing the internal memory as virtually having an infinite size is conceptually the simplest, and is actually the most commonly used strategy today in practice. 2.2 Distribution Sweep Distribution sweep <ref> [20] </ref> is an external-memory version of plane sweep based on the subdivision technique used in the "distribution sort" algorithms of [1, 23, 31]. When applied to the orthogonal segment intersection problem, it works as follows. <p> The observed K values of data-long are indeed 1 8 N (see Fig. 1), and the observed values of the average number of vertical overlaps are also 1 8 N (see Fig. 3). In program gen-rect, we generate horizontal and vertical segments with lengths uniformly distributed over <ref> [20; 60] </ref> and over [0; 2N ], respectively.
Reference: [21] <author> P. C. Kanellakis, S. Ramaswamy, D. E. Vengroff, and J. S. Vitter. </author> <title> Indexing for data models with constraints and classes. </title> <booktitle> In Proc. ACM Symp. on Principles of Database Sys., </booktitle> <pages> pages 233-243, </pages> <year> 1993. </year>
Reference-contexts: For geometric problems, Goodrich et al. [20] study a number of problems in computational geometry and develop several paradigms for I/O-optimal geometric computations. Further results in this area have been obtained in [17, 32]. Also, Kanellakis et al. <ref> [21] </ref> and Ra-maswamy and Subramanian [26, 27] give efficient data structures for performing range searching in external memory.
Reference: [22] <author> C. M. Kenyon-Mathieu and J. S. Vitter. </author> <title> The maximum size of dynamic data structures. </title> <journal> SIAM J. Comput., </journal> <volume> 20 </volume> <pages> 807-823, </pages> <year> 1991. </year>
Reference-contexts: The average is taken over all sweeping events. Notice that this average number is exactly the average number of items stored in the data structure when an update/query operation is performed during plane sweep. A related problem has been studied in <ref> [22] </ref>. Intuitively, we would estimate this average number to be proportional to the average length of vertical segments, which is fi ( p N ). A rigorous analysis is given next. 5 Let V be a random variable for the number of vertical segments cut by l for an event.
Reference: [23] <author> M. H. Nodine and J. S. Vitter. </author> <title> Deterministic distribution sort in shared and distributed memory multiprocessors. </title> <booktitle> In Proc. 5th ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: Viewing the internal memory as virtually having an infinite size is conceptually the simplest, and is actually the most commonly used strategy today in practice. 2.2 Distribution Sweep Distribution sweep [20] is an external-memory version of plane sweep based on the subdivision technique used in the "distribution sort" algorithms of <ref> [1, 23, 31] </ref>. When applied to the orthogonal segment intersection problem, it works as follows. In the preprocessing phase, we sort the endpoints of all segments into two lists, one by x and the other by y. Again we use external merge sort.
Reference: [24] <author> M. H. Nodine and J. S. Vitter. </author> <title> Paradigms for optimal sorting with multiple disks. </title> <booktitle> In Proc. of the 26th Hawaii Int. Conf. on Systems Sciences, </booktitle> <month> January </month> <year> 1993. </year>
Reference-contexts: Early work on algorithms for parallel disk systems concentrates largely on fundamental problems such as sorting, matrix multiplication, and FFT <ref> [1, 24, 31] </ref>. The main focus of this early work is therefore directed at problems that involve permutation at a basic level. Indeed, just the problem of implementing various classes of permutation has been a central theme in external-memory I/O research [1, 12, 13, 15, 31].
Reference: [25] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: an Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: The problem has important applications in VLSI layout and graphics, which are large-scale in nature. The algorithms under evaluation are distribution sweep of Goodrich et al. [20] and three variations of plane sweep <ref> [25] </ref>. Distribution sweep theoretically has optimal I/O cost [20]. Plane sweep is a well-known and powerful technique in computational geometry, and is optimal for this particular problem in terms 1 of internal computation [25]. <p> algorithms under evaluation are distribution sweep of Goodrich et al. [20] and three variations of plane sweep <ref> [25] </ref>. Distribution sweep theoretically has optimal I/O cost [20]. Plane sweep is a well-known and powerful technique in computational geometry, and is optimal for this particular problem in terms 1 of internal computation [25]. The three variations of plane sweep differ by the sorting methods (external merge sort [1] vs. internal merge sort) used in the preprocessing phase and the dynamic data structures (B tree [4, 11, 14] vs. 2-3-4 tree [14]) used in the sweeping phase. <p> Each I/O operation transfers one page of data. 2.1 Three Variations of Plane Sweep The well-known plane sweep paradigm <ref> [25] </ref> is a powerful technique in computational geometry, and is optimal for the orthogonal segment intersection problem in terms of internal computation. The method consists of preprocessing and sweeping phases. In the preprocessing phase, we sort all endpoints by the y-coordinates in non-decreasing order.
Reference: [26] <author> S. Ramaswamy and S. Subramanian. </author> <title> Path caching: A technique for optimal external searching. </title> <booktitle> In Proc. ACM Symp. on Principles of Database Sys., </booktitle> <pages> pages 25-35, </pages> <year> 1994. </year>
Reference-contexts: For geometric problems, Goodrich et al. [20] study a number of problems in computational geometry and develop several paradigms for I/O-optimal geometric computations. Further results in this area have been obtained in [17, 32]. Also, Kanellakis et al. [21] and Ra-maswamy and Subramanian <ref> [26, 27] </ref> give efficient data structures for performing range searching in external memory. Very recently, a new data structure called buffer tree and its applications are given in [2, 3], and an external-memory version of the directed topology tree ([18]) called topology B-tree is given in [9].
Reference: [27] <author> S. Subramanian and S. Ramaswamy. </author> <title> The P-range tree: A new data structure for range searching in secondary memory. </title> <booktitle> In Proc. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 378-387, </pages> <year> 1995. </year>
Reference-contexts: For geometric problems, Goodrich et al. [20] study a number of problems in computational geometry and develop several paradigms for I/O-optimal geometric computations. Further results in this area have been obtained in [17, 32]. Also, Kanellakis et al. [21] and Ra-maswamy and Subramanian <ref> [26, 27] </ref> give efficient data structures for performing range searching in external memory. Very recently, a new data structure called buffer tree and its applications are given in [2, 3], and an external-memory version of the directed topology tree ([18]) called topology B-tree is given in [9].
Reference: [28] <author> J. D. Ullman and M. Yannakakis. </author> <title> The input/output complexity of transitive closure. </title> <journal> Annals of Mathematics and Artificial Intellegence, </journal> <volume> 3 </volume> <pages> 331-360, </pages> <year> 1991. </year>
Reference-contexts: Indeed, just the problem of implementing various classes of permutation has been a central theme in external-memory I/O research [1, 12, 13, 15, 31]. More recently, external-memory research has moved towards solving graph and geometric problems. Work on graph problems includes transitive closure computations <ref> [28] </ref>, some graph traversal problems [19], and memory management problems for maintaining connectivity information and paths on graphs [16]. Recently, Chiang et al. [10] present a collection of new techniques for designing and analyzing I/O-efficient graph algorithms, and apply these techniques to a wide variety of specific problems.
Reference: [29] <author> D. E. Vengroff. </author> <title> A transparent parallel I/O environment. </title> <booktitle> In Proc. 1994 DAGS Symposium on Parallel Computation, </booktitle> <month> July </month> <year> 1994. </year>
Reference-contexts: For excellent examples of experimental work in computational geometry, see Bentley [5, 6, 7, 8]. As for experimental work on I/O-efficient computation, very recently Vengroff has built an environment called TPIE for programming external-memory algorithms as he proposed earlier in <ref> [29] </ref>, and also Vengroff and Vitter [30] have reported some benchmarks of TPIE on sorting and matrix multiplication. This work, however, is mainly on providing a programming environment and not on performance comparisons between external-memory algorithms and conventional algorithms.
Reference: [30] <author> D. E. Vengroff and J. S. Vitter. </author> <title> I/O-efficient scientific computation using TPIE. </title> <type> Manuscript, </type> <year> 1995. </year>
Reference-contexts: For excellent examples of experimental work in computational geometry, see Bentley [5, 6, 7, 8]. As for experimental work on I/O-efficient computation, very recently Vengroff has built an environment called TPIE for programming external-memory algorithms as he proposed earlier in [29], and also Vengroff and Vitter <ref> [30] </ref> have reported some benchmarks of TPIE on sorting and matrix multiplication. This work, however, is mainly on providing a programming environment and not on performance comparisons between external-memory algorithms and conventional algorithms.
Reference: [31] <author> J. S. Vitter and E. A. M. Shriver. </author> <title> Algorithms for parallel memory I: Two-level memories. </title> <journal> Algorithmica, </journal> <volume> 12(2), </volume> <year> 1994. </year>
Reference-contexts: Early work on algorithms for parallel disk systems concentrates largely on fundamental problems such as sorting, matrix multiplication, and FFT <ref> [1, 24, 31] </ref>. The main focus of this early work is therefore directed at problems that involve permutation at a basic level. Indeed, just the problem of implementing various classes of permutation has been a central theme in external-memory I/O research [1, 12, 13, 15, 31]. <p> The main focus of this early work is therefore directed at problems that involve permutation at a basic level. Indeed, just the problem of implementing various classes of permutation has been a central theme in external-memory I/O research <ref> [1, 12, 13, 15, 31] </ref>. More recently, external-memory research has moved towards solving graph and geometric problems. Work on graph problems includes transitive closure computations [28], some graph traversal problems [19], and memory management problems for maintaining connectivity information and paths on graphs [16]. <p> Viewing the internal memory as virtually having an infinite size is conceptually the simplest, and is actually the most commonly used strategy today in practice. 2.2 Distribution Sweep Distribution sweep [20] is an external-memory version of plane sweep based on the subdivision technique used in the "distribution sort" algorithms of <ref> [1, 23, 31] </ref>. When applied to the orthogonal segment intersection problem, it works as follows. In the preprocessing phase, we sort the endpoints of all segments into two lists, one by x and the other by y. Again we use external merge sort.
Reference: [32] <author> B. Zhu. </author> <title> Further computational geometry in secondary memory. </title> <booktitle> In Proc. Int. Symp. on Algorithms and Computation, </booktitle> <year> 1994. </year> <month> 16 </month>
Reference-contexts: For geometric problems, Goodrich et al. [20] study a number of problems in computational geometry and develop several paradigms for I/O-optimal geometric computations. Further results in this area have been obtained in <ref> [17, 32] </ref>. Also, Kanellakis et al. [21] and Ra-maswamy and Subramanian [26, 27] give efficient data structures for performing range searching in external memory.
References-found: 32

