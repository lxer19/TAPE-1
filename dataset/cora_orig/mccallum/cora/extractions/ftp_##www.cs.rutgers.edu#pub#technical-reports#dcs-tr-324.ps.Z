URL: ftp://www.cs.rutgers.edu/pub/technical-reports/dcs-tr-324.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: 
Email: e-mail:fbadri@cs, phatak@paulg.rutgers.edu  
Title: Database Server Organization for Handling Mobile Clients 1  
Author: B. R. Badrinath Shirish Phatak 
Address: New Brunswick, NJ 08903  
Affiliation: Department of Computer Science Rutgers University  
Abstract: The use of mobile computers is gaining popularity. The number of users with laptops, notebooks is increasing and this trend is likely to continue in to the future where the number of mobile clients will far exceed the number of traditional "fixed" clients. Applications running on the mobile clients download information by periodically connecting to repositories of data stored in either databases or file systems. Such mobile clients constitute a new and different kind of work load and exhibit a different access pattern than seen in traditional client server systems. Though file systems have been modified to handle clients that can download information, disconnect, and later reintegrate, databases have not been redesigned to accommodate mobile clients. There is a need to support mobile clients in the context of client server databases This paper is about organizing the database server to take into consideration the access patterns of mobile clients. We propose a concept of hoard key which captures these access patterns. Three different techniques for organizing data at the server based on the hoard key are presented. We argue that each technique is suited for a particular workload. The workload is a combination of requests from mobile clients and traditional clients. This reorganization also allows us to address issues of concurrency control, disconnection, replica control in mobile databases. We present simulation results that show the performance of server reorganization using hoard keys. We also provide an elaborate discussion of issues resulting from this new reorganization in this new paradigm that includes mobile clients and traditional clients.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alonso and H. F. Korth, </author> <title> Database System Issues in Nomadic Computing, </title> <booktitle> Proceedings of the ACM SIGMOD, </booktitle> <month> Jun. </month> <year> 1993, </year> <pages> pages 388-392. </pages>
Reference: [2] <author> K. P. Brown, M. J. Carey and M. Livny, </author> <title> Goal-Oriented Buffer Management Revisited, </title> <booktitle> Proceedings of the ACM SIGMOD, </booktitle> <month> Jun. </month> <year> 1996, </year> <pages> pages 353-364. </pages>
Reference-contexts: A hot general purpose query is defined as a query that accesses consecutive tuples ordered by the primary index. A "cold" query accesses tuples at random. In each case the tuples are picked at random from different physical fragments. The concept of hot and cold access is defined in <ref> [2] </ref>. We assume that within a physical fragment the tuples are ordered by primary key and that there is uniform distribution of tuples across physical fragments. The hoard query source generates a sequence of hoard queries.
Reference: [3] <author> M. J. Carey, M. J. Franklin, M. Livny, E. J. Shekita, </author> <title> Data Caching Tradeoffs in Client-Server DBMS Architectures, </title> <booktitle> Proceedings of the ACM SIGMOD, </booktitle> <month> May </month> <year> 1991, </year> <pages> pages 357-366. </pages>
Reference: [4] <author> S. Ceri and G. Pelagatti, </author> <title> Distributed Databases|Principles and Systems, </title> <publisher> McGraw-Hill, </publisher> <year> 1984. </year>
Reference-contexts: Hoard keys are supposed to capture typical access patterns for mobile clients. Each hoard key partitions the relation into a disjoint set of logical horizontal fragments <ref> [4, 23] </ref>. These fragments constitute the hoard granularity, i.e., hoard clients can hoard and reintegrate within the scope of these fragments. There are two distinct mechanisms to provide access to these fragments. <p> The physical organization of the database depends on the number of physical hoard keys. For example, consider the following schema modeled from <ref> [4] </ref> with two hoard keys: 6 SUPPLY (SNUM,PNUM,DEPTNUM,QUAN) Secondary Key is SNUM, Hoard Keys are DEPTNUM and PNUM The domain of DEPTNUM is [0; : : : ; 30] and that of PNUM is [0; : : : ; 4000].
Reference: [5] <author> E. F. Codd, E. S. Codd and C. T. Salley, </author> <title> Beyond Decision Support, </title> <booktitle> Computerworld 27:30, </booktitle> <month> July </month> <year> 1993, </year> <pages> pages 87-89. </pages>
Reference-contexts: None of the above work deals specifically with server organization of data to accommodate mobile clients. However the idea of reorganizing databases for specific applications is not new. For example, in Multidimensional Online Analytical Processing or MOLAP <ref> [5] </ref>, a flat relational database is reorganized into a multidimensional read-only store to support analytical queries involving operators such as min, max and sum. Each dimension holds the result of applying some operators to the database.
Reference: [6] <author> A. Demers, K. Petersen, M. Spreitzer, D. Terry, M. Theimer and B. Welch, </author> <title> The BAYOU Architecture: Support for Data Sharing Among Mobile Users, </title> <booktitle> Proceedings of IEEE Workshop on Mobile Computing Systems and Applications, </booktitle> <month> Dec. </month> <year> 1994, </year> <pages> pages 2-7. </pages>
Reference-contexts: The CODA approach can be extended to other applications by allowing the application programmers to specify application specific resolvers that 3 allow programmers to handle reintegration on a per application basis. Another approach is provided by BAYOU <ref> [6] </ref>. Here the the hoard is replaced by a local copy of the entire database. Each host accessing the database must maintain such a copy. All the hosts are assumed to be intermittently connected.
Reference: [7] <author> M. J. Franklin, B. T. Jonsson and D. Kossmann, </author> <title> Performance Tradeoffs for Client-Server Query Processing, </title> <booktitle> Proceedings of the ACM SIGMOD, </booktitle> <month> Jun. </month> <year> 1996, </year> <pages> pages 149-160. </pages>
Reference: [8] <author> J. Gray, P. Helland, P. E. O'Neil and D. Shasha, </author> <title> The Dangers of Replication and a Solution, </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <month> Jun. </month> <year> 1996, </year> <pages> pages 173-182. </pages>
Reference-contexts: The responsibility of handling conflicts between updates is left to the user and the system does not provide any global concurrency control. Another suggestion is an update anytime, anywhere model proposed in <ref> [8] </ref>. The database here is a collection of replicated objects with primary copies at certain sites known as object masters. The model distinguishes between mobile nodes that remain disconnected most of the time and base nodes which are alway connected.
Reference: [9] <author> J. Gray and A. Reuter, </author> <title> Transaction Processing: Concepts and Techniques, </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: For example, consider DEPTNUM as a physical hoard key and PNUM as a logical hoard key as in Figure 6. The database is physically fragmented for each P i . In this case there are three fragments consisting of tuples with DEPTNUM with values in the range <ref> [0; : : : ; 9] </ref>, [11; : : : ; 19] and [20; : : : ; 30] respectively. Furthermore an index is created for each of the Q i 's.
Reference: [10] <author> T. Imielinski and B. R. Badrinath, </author> <title> Mobile Wireless Computing: </title> <booktitle> Challenges in Data Management Communications of the ACM, </booktitle> <volume> 37(10), </volume> <year> 1994, </year> <pages> pages 18-28. </pages>
Reference: [11] <author> R. Katz and S. Weiss, </author> <title> Design Transaction Management, </title> <booktitle> Proceedings of the 21st Design Automation Conference, </booktitle> <year> 1984, </year> <pages> pages 692-693. </pages>
Reference-contexts: The database is physically fragmented for each P i . In this case there are three fragments consisting of tuples with DEPTNUM with values in the range [0; : : : ; 9], <ref> [11; : : : ; 19] </ref> and [20; : : : ; 30] respectively. Furthermore an index is created for each of the Q i 's. <p> Thus, either the synchronization must be performed a priori while hoarding or during reintegration. A very common model that uses the former is the checkout/checkin model <ref> [11] </ref> that locks all the tuples hoarded by a client. The latter approach can be implemented by performing some form of time-stamping and comparing timestamps on reintegration.
Reference: [12] <author> G. Kuenning, G. J. Popek and P. Reiher, </author> <title> An Analysis of Trace Data for Predictive File Caching in Mobile Computing, </title> <booktitle> Proceedings of the USENIX Summer Conference, </booktitle> <year> 1994, </year> <pages> pages 291-303. </pages>
Reference-contexts: In the latter case, the index data structures and the physical layout of the database might change dynamically. Thus, efficient schemes for tracing and evaluating database activity and dynamically reorganizing the database would be needed (see <ref> [12] </ref>). Furthermore, hoard profiles could be generated for all the users of the database. How exactly to reorganize the database for a given set of hoard profiles is an open research problem. * Concurrency Control There are also the problems of managing concurrency control.
Reference: [13] <author> P. Kumar and M. Satyanarayanan, </author> <title> Supporting Application-Specific Resolution in an Opti--mistically Replicated File System, </title> <booktitle> Proceedings of the Fourth IEEE Workshop on Workstation Operating Systems, </booktitle> <month> Oct. </month> <year> 1993, </year> <pages> pages 66-70. </pages>
Reference-contexts: If so, the client copy of the file replaces the server copy. Since the granularity of hoarding and reintegration is entire files each file is individually guaranteed to be consistent. The CODA model has been extended to other applications using Application Specific Resolvers <ref> [13] </ref>. To use CODA semantics with databases, all tuples of the relations need to be mapped onto files. There are two distinct possibilities. Either an entire relation can be mapped onto a single file or subsets of tuples of a given relation can be mapped onto separate files.
Reference: [14] <author> N. Krishnakumar and R. Jain, </author> <title> Mobile Support for Sales and Inventory Applications, in Mobile Computing, </title> <editor> T. Imielinski and H. F. </editor> <publisher> Korth Ed. </publisher>
Reference: [15] <author> M. L. McAuliffe, M. J. Carey and M. H. Solomon, </author> <title> Towards Effective and Efficient Free Space Management, </title> <booktitle> Proceedings of the ACM SIGMOD, </booktitle> <month> Jun. </month> <year> 1996, </year> <pages> pages 389-400. </pages>
Reference: [16] <author> K. Mogi and M. Kitsuregawa, </author> <title> Hot Mirroring: A Method of Hiding Parity Update Penalty and Degradation during Rebuilds for RAID5, </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <month> Jun. </month> <year> 1996, </year> <pages> pages 183-194. </pages>
Reference: [17] <author> L. B. Mummert, M. R. Ebling and M. Satyanarayanan, </author> <title> Exploiting Weak Connectivity for Mobile File Access, </title> <booktitle> Proceedings of the 15th ACM Symposium on Operating System Principles 29(5), </booktitle> <month> Dec. </month> <year> 1995, </year> <pages> pages 143-155. </pages>
Reference-contexts: Such links can be used to perform limited synchronization between the client and server, such as locking, tuple invalidations to flag a tuple as modified and trickle reintegration to reintegrate low volume updates <ref> [17] </ref>. Such solutions are interesting even without disconnection since increasing number of users are connecting to information servers via low bandwidth dial up lines.
Reference: [18] <author> P. E. O'Neil, </author> <title> The Escrow Transactional Method, </title> <journal> ACM TODS 11(4), </journal> <month> Dec. </month> <year> 1986, </year> <pages> pages 405-430. </pages>
Reference: [19] <author> P. E. O'Neil, Database|Principles, </author> <title> Programming, and Performance, </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: The database is physically fragmented for each P i . In this case there are three fragments consisting of tuples with DEPTNUM with values in the range [0; : : : ; 9], <ref> [11; : : : ; 19] </ref> and [20; : : : ; 30] respectively. Furthermore an index is created for each of the Q i 's.
Reference: [20] <author> M. Satyanarayanan, CODA: </author> <title> A Highly Available File System for a Distributed Workstation Environment, </title> <booktitle> Proceedings of the Second IEEE Workshop on Workstation Operating Systems, </booktitle> <month> Sep. </month> <year> 1989, </year> <pages> pages 447-459. </pages>
Reference-contexts: Whenever the client reconnects, this local server resynchronizes its hoard with the server by reintegrating any local updates. 1.1 File Systems versus Databases The model given here has been successfully implemented for File Systems such as CODA <ref> [20] </ref>. The granularity of hoarding chosen in CODA is an entire file. The client is allowed to hoard a set of 2 files based on a hoard profile, e.g., all files in her home directory. The client can then perform local updates on the files after disconnection. <p> The database is physically fragmented for each P i . In this case there are three fragments consisting of tuples with DEPTNUM with values in the range [0; : : : ; 9], [11; : : : ; 19] and <ref> [20; : : : ; 30] </ref> respectively. Furthermore an index is created for each of the Q i 's.
Reference: [21] <author> A. Silberschatz, H. Korth and S. Sudarshan, </author> <title> Database System Concepts, </title> <publisher> McGraw-Hill, </publisher> <year> 1997. </year>
Reference: [22] <author> V. Srinivasan and M. Carey, </author> <title> Performance of B-Tree Concurrency Control Algorithms, </title> <booktitle> Proceedings of the ACM SIGMOD, </booktitle> <month> May </month> <year> 1991, </year> <pages> pages 416-425. </pages>
Reference: [23] <author> M. Tamer Ozsu and P. Valduriez, </author> <title> Principles of Distributed Database Systems, </title> <publisher> Prentice Hall Inc., </publisher> <year> 1991. </year>
Reference-contexts: Hoard keys are supposed to capture typical access patterns for mobile clients. Each hoard key partitions the relation into a disjoint set of logical horizontal fragments <ref> [4, 23] </ref>. These fragments constitute the hoard granularity, i.e., hoard clients can hoard and reintegrate within the scope of these fragments. There are two distinct mechanisms to provide access to these fragments.
Reference: [24] <author> G. Walborn and P. Chrysanthis, </author> <title> Supporting Semantics-Based Transaction Processing in Mobile Database Systems, </title> <booktitle> Proceedings on the 14th Symposium on Reliable Database Systems, </booktitle> <month> Sep. </month> <year> 1995. </year>
Reference: [25] <author> G. Walborn and P. Chrysanthis, </author> <title> Transaction Processing in Mobile Computing Environment, </title> <booktitle> IEEE Workshop on Advances in Parallel and Distributed Systems, </booktitle> <month> Oct. </month> <year> 1993, </year> <pages> pages 77-82. 19 </pages>
References-found: 25

