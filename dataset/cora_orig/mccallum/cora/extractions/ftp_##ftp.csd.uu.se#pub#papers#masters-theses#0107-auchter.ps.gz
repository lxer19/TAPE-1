URL: ftp://ftp.csd.uu.se/pub/papers/masters-theses/0107-auchter.ps.gz
Refering-URL: http://www.csd.uu.se/cgi-bin/homepage/?dirk
Root-URL: 
Title: Tool Support for Requirements Engineering: Applying the ARENA Methodology  
Author: Dirk Auchter Supervisors: Roland Bol (CSD), Tomas Grelsson (TEAB) Examiner: Roland Bol 
Address: Box 311 S-751 05 Uppsala Sweden  Vitsandsgatan 9 S-123 86 Farsta Sweden  
Affiliation: Computing Science Department Uppsala University  Telia Engineering AB  Passed:  
Note: Uppsala Master's Thesis in Computing Science 107 Examensarbete DV3 1997-04-22 ISSN 1100-1836  This work has been carried out at  
Abstract-found: 0
Intro-found: 1
Reference: [ARE96] <author> Participants of ARENA. </author> <title> Requirements Engineering and For-malisation in a Telecommunication Environment. Draft of March 11, 1996. </title> <type> ASTEC Technical Report 96/02. </type>
Reference-contexts: A major motivation for SICS and Uppsala University is to gain experience from developing and applying formal specification methods in the context of a real life example. To handle the first goal noted above, an initial approach has been developed and is described in <ref> [ARE96] </ref>. The basis for the development of this requirements engineering method was the specification of the TeleBud service 1 . This Voice Mail service functions as a centrally located answering machine which allows calling customers to store voice messages on the telephone network. <p> It should also be kept in mind, that the observations on the requirements management tools DOORS and RTM are to be judged from an adaptation of a concrete information model to the tools. 8 Chapter 2 ARENA's methodology The ARENA methodology, as described in <ref> [ARE96] </ref>, eventually encompasses methods for both capturing and structuring requirements, and formalis-ing those requirements that are amenable to formalisation. However, I will not deal with the formalisation of requirements, the reader is referred to [ARE97a] for a discussion.
Reference: [ARE97a] <author> Participants of ARENA. </author> <title> Formalisation of a Structured Set of Requirements within the ARENA Methodology. </title> <note> Draft of January 23, </note> <year> 1997. </year>
Reference-contexts: However, I will not deal with the formalisation of requirements, the reader is referred to <ref> [ARE97a] </ref> for a discussion. I will restrict the RE process, that is summarized in figure 2.1, to the white boxes and blobs. The boxes represent collections of requirements and/or a model of the service. The irregular blobs represent activities.
Reference: [ARE97b] <author> Participants of ARENA. </author> <title> DOORS and the ARENA methodology: A proposed working method. </title> <month> February 19, </month> <year> 1997. </year>
Reference-contexts: The results have to be judged from the fact that the work proceeded in a reverse engineering fashion. Nevertheless a working method to be used when developing a new service "forwards" is proposed in <ref> [ARE97b] </ref>, at least for the tool DOORS.
Reference: [DOO95] <institution> DOORS PC Reference Manual, </institution> <note> Version 2.1. </note> <institution> Quality Systems and Software Ltd., </institution> <address> Oxford, United Kingdom, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: The software tool DOORS <ref> [DOO95] </ref> is designed to help manage requirements, but it also supports the modeling of most system and software development methodologies. Each requirement is handled in DOORS as a discrete object that can be tagged with an unlimited range of attributes.
Reference: [EKW92] <author> David W. Embley, Barry D. Kurtz, Scott N. Woodfield. </author> <title> Object-Oriented Systems Analysis, A Model-Driven Approach. </title> <publisher> Yourdon Press Computing Series, Prentice-Hall, Inc., </publisher> <year> 1992. </year> <note> ISBN 0-13-629973-3. </note>
Reference-contexts: For a complete discussion of object-oriented modeling and system analysis the reader is referred to <ref> [RBP + 91, EKW92, Jac92] </ref>. In order to write concise requirements, we should have something to write about. That is, we need a model of the service. In ARENA terminology such a model is called object model.
Reference: [F 3 94] <author> F3 Consortium. </author> <title> F3 Reference Manual (Esprit III Project 6612). </title> <address> SISU, Kista (Sweden), </address> <year> 1994. </year>
Reference-contexts: The ARENA methodology applied and evaluated in this report and supported by current requirement management tools, makes its contribution to this "new age". Another contribution that is worth mentioning is the From Fuzzy to Formal (F 3 ) approach. Guidance in using this approach can be found in <ref> [F 3 94] </ref>. 1.3 Outline The structure of this report is as follows. Chapter 2 introduces the basic approach and concepts of the ARENA methodology. Chapter 3 presents briefly basic concepts and functionalities of the require ments management tools DOORS and RTM.
Reference: [HKNO95] <editor> M. Hjelte, B. Kranqvist, U. Nyman, S. Oldgren. </editor> <address> Krav pa krav. Sveriges Verkstadsindustrier, </address> <year> 1995. </year>
Reference-contexts: Hence, to satisfy demands for shorter development cycles, telecom companies today must be able to produce and handle high-quality requirements specifications by means of a more systematic product development <ref> [HKNO95] </ref>. A major motivation for SICS and Uppsala University is to gain experience from developing and applying formal specification methods in the context of a real life example. To handle the first goal noted above, an initial approach has been developed and is described in [ARE96].
Reference: [IT92] <author> ITU. </author> <title> Principles for a Telecommunications Management Network. CCITT recommendations M.3010. </title> <month> October </month> <year> 1992. </year>
Reference-contexts: Since the case study for DOORS, time was spent to further develop the actor model. The most recent model is taken for the RTM case study as explained earlier. It is based on chapter 8.1 of [TAB96] and the TMN hierarchy according to appendix II in <ref> [IT92] </ref>. Figure 4.5 extracts parts of this 36 revised actor model, with the intention to clarify how a keyword hierarchy can be established with each node in the tree stated as a keyword. For integrity reasons not the complete hierarchy is shown.
Reference: [IT94] <author> ITU-T. </author> <title> Recommendation Z.120. Message sequence chart (MSC). In Criteria for the use and applicability of formal description techniques, </title> <month> September </month> <year> 1994. </year>
Reference-contexts: Dialogues can be seen as use cases between an actor and the system. The difference is that for a dialogue the system is a black box, whereas a use case will in general also contain the interactions between parts of the system. Message Sequence Charts <ref> [IT94] </ref> are often used to formalise use-cases. 2.2.3 Traceability During specification and development of services and systems there is always a need to understand the interdependencies between specifications and re-alisations. <p> Each entity of the extended interface component can be linked to a set of dialogues, each of which specifies a possible sequence of interactions between an actor and various operations from the corresponding interface. One way of representing dialogues is by MSCs (Message Sequence Charts) <ref> [IT94] </ref>. All of the above described components of the information model have to be created each time a (new) service is specified.
Reference: [Jac92] <editor> I. Jacobson et al. </editor> <booktitle> Object-Oriented Software Engineering. </booktitle> <year> 1992. </year> <note> ISBN 0-201-54435-0. </note>
Reference-contexts: For a complete discussion of object-oriented modeling and system analysis the reader is referred to <ref> [RBP + 91, EKW92, Jac92] </ref>. In order to write concise requirements, we should have something to write about. That is, we need a model of the service. In ARENA terminology such a model is called object model.
Reference: [Pohl94] <author> K. Pohl. </author> <title> The Three Dimensions of Requirements Engineering: A Framework and its Application. </title> <journal> Information Systems, </journal> <volume> 19(2), </volume> <year> 1994. </year>
Reference-contexts: It was subsequently thought that if software development is to be approached in an engineering manner, then the same should apply to individual stages therein. As a result the term Requirements Engineering (RE) was adopted to describe an engineering approach to early stages of software construction. In <ref> [Pohl94] </ref>, a three dimensional framework is suggested to handle the RE process. Of interest is also the brief overview of the RE 2 IEEE-Std. 610, 1990 7 literature on ongoing research in this field given therein. A more general framework for describing the RE process is presented in [RG94].
Reference: [RBP + 91] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy and W. Lorensen. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall International, Inc., </publisher> <year> 1991. </year> <note> ISBN 0-13-629841-9. </note>
Reference-contexts: For a complete discussion of object-oriented modeling and system analysis the reader is referred to <ref> [RBP + 91, EKW92, Jac92] </ref>. In order to write concise requirements, we should have something to write about. That is, we need a model of the service. In ARENA terminology such a model is called object model. <p> This object model was transferred unchanged to RTM. As RTM provides interfaces to several CASE tools, for example Teamwork 1 and StP 2 , it allows to concentrate on a real object modeling technique, such as OMT (defined in <ref> [RBP + 91] </ref>), including graphical representation of detailed design elements of a service. This is in contrast to DOORS, where an object model is just constructed in textual form.
Reference: [RG94] <author> C. Rolland, G. Grosz. </author> <title> A General Framework for Describing the Requirements Engineering Process. </title> <booktitle> International Conf. on Systems, Man and Cybernetics, </booktitle> <address> San Antonio, Texas USA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: In [Pohl94], a three dimensional framework is suggested to handle the RE process. Of interest is also the brief overview of the RE 2 IEEE-Std. 610, 1990 7 literature on ongoing research in this field given therein. A more general framework for describing the RE process is presented in <ref> [RG94] </ref>. We conclude that since the early days the area of RE research has expanded in scope and point of view and there are many strands of investigation and practice nowadays that go beyond the strict confines of software construction.
Reference: [RTM96] <author> RTM User Guide, </author> <note> Version 3.6. </note> <institution> Marconi Systems Technology, Camberley, Surrey England, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: For a detailed description of these tools (and more) see <ref> [RTM96] </ref>. Object Editor: The Object Editor enables the creation, modification and deletion of objects from the database. This involves expanding complex objects, focusing duplicate objects into a single object and editing object text or attributes. Furthermore this tool allows objects to be categorized by associating keywords to it.
Reference: [Som96] <author> I. Sommerville. </author> <booktitle> Software Engineering, 5th edition, 1996. </booktitle> <publisher> Addison-Wesley. </publisher>
Reference: [TAB96] <editor> Telia AB. Telias barande principer. </editor> <volume> LZTA 802 820 R1. </volume> <month> April </month> <year> 1996. </year>
Reference-contexts: Since the case study for DOORS, time was spent to further develop the actor model. The most recent model is taken for the RTM case study as explained earlier. It is based on chapter 8.1 of <ref> [TAB96] </ref> and the TMN hierarchy according to appendix II in [IT92]. Figure 4.5 extracts parts of this 36 revised actor model, with the intention to clarify how a keyword hierarchy can be established with each node in the tree stated as a keyword. <p> The current view of the general requirements model is shown in figure 4.6. It follows international/national standards, legislation and Telias processes described in chapter 9 of <ref> [TAB96] </ref>. Here again not the complete hierarchy is shown for integrity reasons. <p> In this early stage not only requirements on the new service should be taken into account, but also requirements on the product developers internal processes. Concerning Telia these internal product (service) development processes are most recently outlined and described. A short overview of these processes is given in <ref> [TAB96] </ref>. Therefore I consider it important to make these considerations explicit in the information model represented respectively in DOORS or RTM.
Reference: [TRAB93] <institution> Telia Research AB. </institution> <note> Np 93 005 Rev. E. Forstudie Rostbrevl-ada, 1993. Telia internal information, not externally available. </note>
Reference-contexts: The modules of figure 4.2 and their relations are specified for TeleBud below. 4.2.1 Constructing the object model As a first step, an abstract object model of TeleBud was constructed. As input material the existing specification of TeleBud [TRAB94] and some other documents such as the pre-study of TeleBud <ref> [TRAB93] </ref> were used. The high level object classes with their corresponding attributes and operations were identified and included in the model. As a result of this process we identified the structure of TeleBud's object model shown in figure 4.3. <p> User 1.1 Sender 1.2 Receiver 2. Customer 3. Telia 3.1 Product owner 3.2 Product manager 3.3 Marketing 3.4 Sale 3.5 Customer-/User support 3.6 Network 3.7 Service operation 3.8 Monitoring 3.9 Billing Table 4.1: Telia's actor model * Core Concept. As the core concept a pre-study of TeleBud <ref> [TRAB93] </ref> was taken (imported into DOORS), that describes the basic functionality of TeleBud. Important parts were marked up and later linked to their corresponding requirements in the Applied Requirements formal module or to some object class (attribute/operation) in the Core Model module. * Core Model.
Reference: [TRAB94] <institution> Telia Research AB. </institution> <note> Np 93 090 Rev. </note> <author> B. Kravspecifikation Rostbrevl-ada, </author> <year> 1994. </year> <note> Telia internal information, not externally available. 55 </note>
Reference-contexts: The modules of figure 4.2 and their relations are specified for TeleBud below. 4.2.1 Constructing the object model As a first step, an abstract object model of TeleBud was constructed. As input material the existing specification of TeleBud <ref> [TRAB94] </ref> and some other documents such as the pre-study of TeleBud [TRAB93] were used. The high level object classes with their corresponding attributes and operations were identified and included in the model. As a result of this process we identified the structure of TeleBud's object model shown in figure 4.3.
References-found: 18

