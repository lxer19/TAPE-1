URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/cav94.SP.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/~vigyan/publications/index.html
Root-URL: http://www.cs.berkeley.edu
Email: vigyan@ic.eecs.berkeley.edu pixley@math.sps.mot.com  
Title: The Verification Problem for Safe Replaceability  
Author: Vigyan Singhal Carl Pixley 
Address: MD OE321  6501 Wm Cannon Drive West Berkeley, CA 94720 Austin, TX 78735  
Affiliation: Computer Science Division Motorola Inc.,  University of California  
Abstract: This paper addresses the problem of verifying that a sequential digital design is a safe replacement for an existing design without making any assumptions about a known initial state of the design or about its environment. We formulate a safe replacement condition which guarantees that if an original design is replaced by a new design, the interacting environment cannot detect the change by observing the input-output behavior of the new design. Examples are given to show that safe replacement () allows simplification of the state transition diagram of an original design. It is showed that if D 1 is a safe replacement for design D 0 then every closed strongly connected component of D 1 is contained in D 0 . We present a decision procedure for determining whether a re placement design satisfies our safe replacement condition. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> H. Cho, G. D. Hachtel, S.-W. Jeong, B. Plessier, E. Schwarz, and F. Somenzi. </author> <title> ATPG Aspects of FSM Verification. </title> <booktitle> In Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 134-137, </pages> <year> 1990. </year>
Reference-contexts: In this paper, we will refer to the design outside of D0 as the environment of D0. The problem of implementation verification for sequential designs is not a new one. Efficient methods exist for the verification of sequential designs <ref> [3, 8, 1] </ref>. ? Research supported by NSF/DARPA Grant MIP-8719546 and a summer internship from Motorola, Inc. Fig. 1. Replacement of a sequential design However, these methods only work for designs where all latches have a reset line which determines the designated initial state for the circuit.
Reference: 2. <author> H. Cho, S.-W. Jeong, F. Somenzi, and C. Pixley. </author> <title> Synchronizing Sequences and Symbolic Traversal Techniques in Test Generation. </title> <journal> Journal of Electronic Testing: Theory and Applications, </journal> <volume> 4(12) </volume> <pages> 19-31, </pages> <year> 1993. </year>
Reference-contexts: Lemma 14 (Lemma 2 in <ref> [2] </ref>). Suppose that DFSM's M 0 and M 1 have no equivalent states then there is an input sequence such that for any states s 0 of M 0 and s 1 of M 1 , M 0 (s 0 ; ) 6= M 1 (s 1 ; ).
Reference: 3. <author> O. Coudert, C. Berthet, and J. C. Madre. </author> <title> Verification of Sequential Machines Based on Symbolic Execution. </title> <editor> In J. Sifakis, editor, </editor> <booktitle> Proc. of the Workshop on Automatic Verification Methods for Finite State Systems, volume 407 of Lecture Notes in Computer Science, </booktitle> <pages> pages 365-373, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: In this paper, we will refer to the design outside of D0 as the environment of D0. The problem of implementation verification for sequential designs is not a new one. Efficient methods exist for the verification of sequential designs <ref> [3, 8, 1] </ref>. ? Research supported by NSF/DARPA Grant MIP-8719546 and a summer internship from Motorola, Inc. Fig. 1. Replacement of a sequential design However, these methods only work for designs where all latches have a reset line which determines the designated initial state for the circuit.
Reference: 4. <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability. </title> <editor> W. H. </editor> <publisher> Freeman and Co., </publisher> <year> 1979. </year>
Reference-contexts: Also, F A i = Q D i and I A i = Q D i . However, since the problem of language containment between two NFA's is PSPACE-complete <ref> [4, page 265] </ref>, this approach is not likely to be more efficient that Method I.
Reference: 5. <author> J. Hartmanis and R. E. Stearns. </author> <title> Algebraic Structure Theory of Sequential Machines. </title> <booktitle> Intl. Series in Applied Mathematics. </booktitle> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1966. </year>
Reference-contexts: Although this condition is strong enough so that the interacting environment cannot detect the replacement, it does not require that every state in one design be equivalent to one in the other design (the classical notion of machine equivalence, as presented in <ref> [5] </ref>). Our condition also preserves possible interactions with the environment during initialization. We also explore the methods which can be used to verify the necessary and sufficient conditions for a new (replacement) design to be a safe replacement for an old (existing) design. <p> We say that distinguishes s 0 and s 1 if D 0 (s 0 ; ) 6= D 1 (s 1 ; ). We now give a classical notion of equivalence between two DFSM's <ref> [5, page 23] </ref>. Definition 5. <p> For example, state 111 in D 0 (Figure 4) is not equivalent to any state in D 1 (Figure 5); also, state 10 in D 1 is not equivalent to any state in D 0 . Thus classical machine equivalence <ref> [5] </ref>, that requires that every state in each design be equivalent to be some state in the other design, is not necessary for safe replacement, although it is sufficient. Remark 2: As is obvious from Definition 11, the relation is reflexive and transitive. However, the relation is not symmetric.
Reference: 6. <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: The language of A, denoted by L (A), is a set of finite strings of the alphabet, and is defined as in <ref> [6] </ref>.
Reference: 7. <author> C. Pixley. </author> <title> Introduction to a Computational Theory and Implementation of Sequential Hardware Equivalence. </title> <editor> In E. M. Clarke and R. P. Kurshan, editors, </editor> <booktitle> Proc. of the Conf. on Computer-Aided Verification, volume 531 of Lecture Notes in Computer Science, </booktitle> <pages> pages 54-64, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: is "when can we replace a design with another, so that while the replacement design can power up in any state, there is no way the environment can detect the replacement"? A notion of sequential hardware equivalence for designs which may not have a designated initial state is presented in <ref> [7] </ref>. Efficient BDD-based techniques are presented which verify this equivalence for two given designs. We will show that for sub-designs embedded in a large design (or the environment), this notion of equivalence is not always applicable. In this paper, we will present our condition for safe design replacement. <p> there is a state t in M 2 such that s ~ t, and for each state t in M 2 there is a state s in M 1 such that s ~ t. 3 Sequential Hardware Equivalence (she) In this section we will briefly review the work presented in <ref> [7] </ref> about the theory of sequential hardware equivalence for equivalence between two gate-level hardware designs without assuming any knowledge of initial state. When the design powers up, the state it powers up in cannot be predicted. <p> The sequence is called an aligning sequence. Definition 8. Designs D 0 and D 1 are equivalent (D 0 D 1 ) if all state pairs are alignable. Definition 8 defines the notion of sequential hardware equivalence. The following results were shown in <ref> [7] </ref>. Theorem 9. D 0 D 1 if and only if there is a single (but not necessarily unique) aligning sequence that aligns all state pairs in Q D 0 fi Q D 1 . Theorem 10. The relation is symmetric and transitive, but not reflexive. <p> Edges of the graph are labeled by a single input a 2 I. We presume that the equivalent state pairs of D 0 and D 1 have already been computed, see <ref> [7] </ref>.
Reference: 8. <author> H. Touati, H. Savoj, B. Lin, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> Implicit State Enumeration of Finite State Machines using BDD's. </title> <booktitle> In Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 130-133, </pages> <month> November </month> <year> 1990. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: In this paper, we will refer to the design outside of D0 as the environment of D0. The problem of implementation verification for sequential designs is not a new one. Efficient methods exist for the verification of sequential designs <ref> [3, 8, 1] </ref>. ? Research supported by NSF/DARPA Grant MIP-8719546 and a summer internship from Motorola, Inc. Fig. 1. Replacement of a sequential design However, these methods only work for designs where all latches have a reset line which determines the designated initial state for the circuit.
References-found: 8

