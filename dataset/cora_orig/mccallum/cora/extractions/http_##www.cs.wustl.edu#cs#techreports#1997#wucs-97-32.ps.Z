URL: http://www.cs.wustl.edu/cs/techreports/1997/wucs-97-32.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: http://www.cs.wustl.edu
Title: The Programmers Playground Application Management System User Guide  
Author: William M. Shapiro, T. Paul McCartney, and E.F. Berkley Shands 
Date: August 1997  
Address: Campus Box 1045 One Brookings Drive Saint Louis, MO 63130-4899  
Affiliation: Department of Computer Science Washington University  
Pubnum: WUCS-97-32  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Kenneth J. Goldman, Joe Hoffert, T. Paul McCartney, Jerome Plun, Todd Rodgers. </author> <title> The Playground Veneer Reference Manual. </title>
Reference-contexts: introduction to Playground can be found in <ref> [1] </ref>, [2]. Application Management refers to a software approach for automating the process of launching and configuring complete distributed multimedia applications created using The Programmers Playground. With such a software system, end-users can use complex distributed multimedia applications without knowing the internal details of the application. <p> The Launcher ID of each Launcher serving as a provider must then be made available to remote users (see Section 2.5). Application Management provides two mechanisms for advertising Launcher IDs: directly, by creating a file with the suffix .pgmid containing the Launchers Playground module ID <ref> [1] </ref> and indirectly, by publishing the URL of the file with the suffix .url. Launch service providers can put their .pgmid and/or .url files in a well known location, such as the World Wide Web, where users can easily locate and download the files. <p> Normally, only a PGDAD or PGMOM <ref> [1] </ref> is allowed to kill a module. -pgdir &lt;path&gt; Specifies that &lt;path&gt; should be used instead of ~/.pgdir. This option should be used for a Broker running as nobody. -nobodyuid &lt;uid&gt; If run as root, this option runs the Broker as the provided uid (e.g., nobody).
Reference: [2] <author> Goldman, K.J., et. al. </author> <note> Welcome to the Programmers Playground! http://www.cs.wustl.edu/cs/ playground/ </note>
Reference-contexts: introduction to Playground can be found in [1], <ref> [2] </ref>. Application Management refers to a software approach for automating the process of launching and configuring complete distributed multimedia applications created using The Programmers Playground. With such a software system, end-users can use complex distributed multimedia applications without knowing the internal details of the application. <p> The user creates a new.spec file for an application by launching and configuring the application in the Mediator <ref> [2] </ref> and saving the configuration to a file called new.spec. The file grammar for an application description is provided in Appendix C for developers who would like to generate the new.spec file some other way.
Reference: [3] <author> T. Paul McCartney, Kenneth J. Goldman. </author> <title> EUPHORIA Reference Manual. </title> <institution> Washington Universi-tyDepartment of Computer Science WUCS-97-13, </institution> <month> February </month> <year> 1997. </year>
Reference-contexts: An example application directory is shown in Publishing a new application on the web for use with the Application Management system requires creating a new application subdirectory containing an application page (HTML), a new.spec file, and whatever other files are associated with the application (e.g., EUPHORIA files <ref> [3] </ref>). .../apps ... liaison.jar .../apps/Syrup index.html .../apps/Toys new.spec index.html new.spec button1.jpg button2.jpg Application Management User Guide Chapter 4: Customizing the Launch System - 17 - 4.2 Creating the Application Page Root Directory The root application page directory contains several files and all application page subdirectories.
Reference: [4] <author> T. Paul McCartney. </author> <title> Mediator Reference Manual. </title> <note> In preparation. </note>
Reference-contexts: The Broker delegates the task of module launching to its Launchers, gathers module IDs of newly launched modules, configures the communication among modules, and communicates the set of IDs back to the Application Daemon. In addition, the Mediator visual configuration tool <ref> [4] </ref> can be used to view, manipulate and launch modules in conjunction with the Broker. The Launcher is responsible for launching a collection of modules and optimizing module allocation to processors according to heuristics based on module performance requirements, hardware configurations, and other factors.
References-found: 4

