URL: http://www.cs.colorado.edu/~hal/Papers/pttn.comp.ps
Refering-URL: http://www.cs.colorado.edu/~hal/Home.html
Root-URL: http://www.cs.colorado.edu
Email: e-mail: jbj@imada.ou.dk  e-mail: hal@cs.colorado.edu  e-mail: tibor@imada.ou.dk  e-mail: szigeti@ec.ibp.fr  
Title: EDGE-CONNECTIVITY AUGMENTATION WITH PARTITION CONSTRAINTS  
Author: Jtrgen Bang-Jensen Harold N. Gabow Tibor Jordan Zoltan Szigeti 
Note: Denmark. Supported in part by the Danish Natural Science Research Council Grant Number 28808.  
Address: Campusvej 55, DK-5230 Odense, Denmark.  Boulder, Boulder, Colorado 80309-0430, USA.  Campusvej 55, DK-5230 Odense,  4, place Jussieu, 75252 Paris, France.  
Affiliation: Department of Mathematics and Computer Science, Odense University,  Department of Computer Science, University of Colorado at  Department of Mathematics and Computer Science, Odense University,  Equipe Combinatoire, Universite Paris VI,  
Date: July 10, 1997  
Abstract: In the well-solved edge-connectivity augmentation problem we must find a minimum cardinality set F of edges to add to a given undirected graph to make it kedge-connected. This paper solves the generalization where every edge of F must go between two different sets of a given partition of the vertex set. A special case of this partition-constrained problem, previously unsolved, is increasing the edge-connectivity of a bipartite graph to k while preserving bipartiteness. Based on this special case we present an application of our results in statics. Our solution to the general partition-constrained problem gives a min-max formula for jF j which includes as a special case the original min-max formula of Cai and Sun [3] for the problem without partition constraints. When k is even the min-max formula for the partition-constrained problem is a natural generalization of [3]. However this generalization fails when k is odd. We show that at most one more edge is needed when k is odd and we characterize the graphs that require such an extra edge. We give a strongly polynomial algorithm that solves our problem in time O(n(m + n log n) log n). Here n and m denote the number of vertices and distinct edges of the graph respectively. This bound is identical to the best-known time bound for the problem without partition constraints. Our algorithm is based on the splitting off technique of Lovasz, like several known efficient algorithms for the unconstrained problem. However unlike previous splitting algorithms, when k is odd our algorithm must handle "obstacles" that prevent all edges from being split off. Our algorithm is of interest even when specialized to the unconstrained problem, because it produces an asymptotically optimum number of distinct splits. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Bang-Jensen and T. Jordan, </author> <title> Edge-connectivity augmentation preserving simplicity, </title> <type> Preprint no. 7, </type> <institution> Department of Mathematics and Computer Science, Odense University (1997). </institution> <note> To appear in the Proceedings of the Symposium on Foundations of Computer Science (FOCS) '97. </note>
Reference-contexts: Optimally augmenting a bipartite graph to achieve 2-vertex-connectivity while preserving bipartiteness was solved in [10]. Optimally augmenting to achieve k-edge-connectivity preserving simplicity of the graph is NP-hard, but polynomially solvable for fixed k, see <ref> [1] </ref> and [11]. Preserving planarity was investigated in some vertex-connectivity problems, see [13]. Other types of constraints were also studied. In [4] an optimal augmenting set F is to be found which can be extended to an optimal augmentation with respect to an arbitrary higher target.
Reference: [2] <author> E.D. Bolker and H. Crapo, </author> <title> How to brace a one-story building, Environ. Plan. </title> <journal> B, </journal> <volume> 4, </volume> <pages> 125-152, </pages> <year> 1977. </year>
Reference-contexts: Observe that G S is a bipartite graph and if at most one extra rod may be put into each square, G S is simple as well. 51 Theorem 7.1 <ref> [2] </ref> The square-grid framework S is rigid if and only if the corresponding graph G S is connected. 2 One may want to brace a framework, by adding more extra rods, so it can survive the failure of k 0 1 extra rods, that is, removing any set of at most
Reference: [3] <author> G. -R. Cai and Y.-G. Sun, </author> <title> The minimum augmentation of any graph to a k-edge-connected graph, </title> <booktitle> Networks 19 (1989) 151-172. </booktitle>
Reference-contexts: The first polynomial-time algorithm solving this problem is due to Watanabe and Nakamura [22]. Other approaches were later developed which led to more efficient algorithms. Cai and Sun <ref> [3] </ref> gave a min-max characterization for the corresponding optimum value, using the splitting off method. "Splitting off" a pair su; sv of edges means replacing su and sv by a new edge uv. Using this method Frank [6] solved several extensions of the problem. <p> Corollary 5.11 <ref> [3] </ref> Let H = (V; E) be an undirected graph and k 2. * Let ff = maxfd P 2 e : F a subpartition of V g.
Reference: [4] <author> E. Cheng and T. Jordan, </author> <title> Successive edge-connectivity augmentation problems, </title> <note> to appear. </note>
Reference-contexts: Optimally augmenting to achieve k-edge-connectivity preserving simplicity of the graph is NP-hard, but polynomially solvable for fixed k, see [1] and [11]. Preserving planarity was investigated in some vertex-connectivity problems, see [13]. Other types of constraints were also studied. In <ref> [4] </ref> an optimal augmenting set F is to be found which can be extended to an optimal augmentation with respect to an arbitrary higher target. Section 2 contains definitions and some basic results. Section 3 proves the new splitting off theorem. <p> The algorithm of [18] is based on the (strong) successive augmentation property <ref> [4] </ref>: It first executes splits to achieve connectivity k 1, and then augments the connectivity of the resulting graph to k. Our algorithm is a modification of the algorithm for k even, again based on contraction. We present the algorithm by specifying the changes made to the k even algorithm.
Reference: [5] <author> K.P. Eswaran and R. E. Tarjan, </author> <title> Augmentation problems, </title> <journal> SIAM J. Computing 5,4, </journal> <year> 1976, </year> <pages> pp 653-665. </pages>
Reference-contexts: We close this section by mentioning other extensions of the edge-connectivity augmentation problem that have been investigated. Finding a k-edge-connected augmentation that has minimum cost is NP-complete (even when k = 2 and there are only two distinct edge costs), see <ref> [5] </ref>. Optimally augmenting a bipartite graph to achieve 2-vertex-connectivity while preserving bipartiteness was solved in [10]. Optimally augmenting to achieve k-edge-connectivity preserving simplicity of the graph is NP-hard, but polynomially solvable for fixed k, see [1] and [11]. Preserving planarity was investigated in some vertex-connectivity problems, see [13].
Reference: [6] <author> A. Frank, </author> <title> Augmenting Graphs to Meet Edge-Connectivity Requirements, </title> <journal> SIAM J. Disc. Math. </journal> <volume> 5, </volume> <month> 25-53 </month> <year> (1992). </year>
Reference-contexts: Cai and Sun [3] gave a min-max characterization for the corresponding optimum value, using the splitting off method. "Splitting off" a pair su; sv of edges means replacing su and sv by a new edge uv. Using this method Frank <ref> [6] </ref> solved several extensions of the problem. For example he showed it is tractable even if local connectivity demands or vertex costs are given. A different approach due to Naor et al. [19] resulted in a faster algorithm. The currently fastest algorithm was developed by Nagamochi et al. [17], [18]. <p> The following result of Lovasz [14] Theorem 2.12 (a) below turned out to be a useful tool in augmentation problems, see <ref> [6] </ref>. Here we formulate an easy extension, Theorem 2.12 (b), which plays an important role in some of our arguments. The proof follows from the proof of part (a) given by A. Frank in [6, pages 35-36]. <p> Here we formulate an easy extension, Theorem 2.12 (b), which plays an important role in some of our arguments. The proof follows from the proof of part (a) given by A. Frank in <ref> [6, pages 35-36] </ref>. We assume that the reader is familiar with his proof and give only the necessary additional details below. Theorem 2.12 Suppose that (1) holds in G = (V + s; E), k 2 and d (s) &gt; 0 is even. <p> Proof of (b): In the proof of (a) in <ref> [6, pages 35-36] </ref> it is shown that for any given edge st all the neighbours u of s for which the pair st; su is not admissible are contained in the union of at most two maximal dangerous sets, both containing t; furthermore when there are two such sets they are <p> Frank's algorithm uses the splitting operation and Theorem 2.12 (a) as the main tool. We now summarize Frank's algorithm <ref> [6] </ref>. <p> It was shown in <ref> [6] </ref> that there exists a subpartition F = fX 1 ; :::; X t g of V such that jF j = t X (k d (X i )) (6) where as usual d denotes the degree function in G. (PHASE 2) If d 0 (s) is odd in G 0 <p> Step 2c. At this point X u P i for every edge su, u 2 P i . Let F i be the collection of maximal sets X u . The same proof as <ref> [6, page 35] </ref> shows that F i is a subpartition of P i and d (s; P i ) = fk d (Y ) : Y 2 F i g. <p> The resulting degree function d 0 is a minimal degree function satisfying (1) for subsets of X " P i . By <ref> [6] </ref>, d 0 (s; X " P i ) equals the maximum possible value of the sum in (14). Note that the left-hand side of (14) (which is computed in G s) equals d (s; X) (since X is critical).
Reference: [7] <author> A. Frank, </author> <title> Connectivity augmentation problems in network design, </title> <booktitle> in: Mathematical Programming: State of the Art 1994, </booktitle> <editor> (Eds: J.R. Birge and K.G. </editor> <title> Murty), </title> <institution> The University of Michigan, </institution> <address> Ann Arbor, MI, 34-63, </address> <year> 1994. </year>
Reference-contexts: the splitting off method, runs in time O (n (m + n log n) log n). (The parameters n and m denote the number of vertices and distinct edges of the graph respectively.) For further related results and the directed- and vertex-connectivity versions of the problem see the survey paper <ref> [7] </ref>. This paper solves a generalization of the above problem which we call edge-connectivity augmentation with partition constraints.
Reference: [8] <author> M. Grotschel, C.L. Monma and M. Stoer, </author> <title> Design of survivable networks, </title> <booktitle> in: Handbook in Operations Research and Management Science Vol. </booktitle> <month> 7, </month> <title> Network Models (M.O. Ball, T.L. </title> <editor> Magnanti, C.L. Monma and G.L. Nemhauser, eds.) </editor> <publisher> North-Holland, Amsterdam, </publisher> <pages> 617-672, </pages> <year> 1994. </year>
Reference-contexts: Note that E as well as F may contain parallel edges. This optimization problem has been extensively investigated, in part due to possible practical applications in the design of reliable networks (see <ref> [8] </ref>, [21]). The first polynomial-time algorithm solving this problem is due to Watanabe and Nakamura [22]. Other approaches were later developed which led to more efficient algorithms.
Reference: [9] <author> S. Hakimi, </author> <title> On the realizability of a set of integers as degrees of the vertices of a graph, </title> <journal> J. SIAM Appl. Math. </journal> <volume> 10, </volume> <year> 1962, </year> <pages> pp. 496-506. </pages>
Reference-contexts: This section solves this problem. Before discussing the problem recall that the degree sequence of a graph consists of the integers d (x), where x ranges over every vertex. Hakimi <ref> [9] </ref> proved that given integers d i , i = 1; : : : ; p are the degree sequence of a multigraph with no self-loops if and only if P even and d 1 P i&gt;1 d i , where the indexing is chosen so d 1 = maxfd i
Reference: [10] <author> T-S. Hsu and M-Y. Kao, </author> <title> Optimal augmentation for bipartite componentwise biconnec-tivity in linear time, </title> <booktitle> Algorithms and Computation (Proc. ISAAC '96), Springer Lecture Notes in Computer Science 1178, </booktitle> <pages> 213-222, </pages> <year> 1996. </year>
Reference-contexts: Finding a k-edge-connected augmentation that has minimum cost is NP-complete (even when k = 2 and there are only two distinct edge costs), see [5]. Optimally augmenting a bipartite graph to achieve 2-vertex-connectivity while preserving bipartiteness was solved in <ref> [10] </ref>. Optimally augmenting to achieve k-edge-connectivity preserving simplicity of the graph is NP-hard, but polynomially solvable for fixed k, see [1] and [11]. Preserving planarity was investigated in some vertex-connectivity problems, see [13]. Other types of constraints were also studied.
Reference: [11] <author> T. Jordan, </author> <title> Two NP-complete augmentation problems, </title> <type> Preprint no. 8, </type> <institution> Department of Mathematics and Computer Science, Odense University (1997). </institution>
Reference-contexts: Optimally augmenting a bipartite graph to achieve 2-vertex-connectivity while preserving bipartiteness was solved in [10]. Optimally augmenting to achieve k-edge-connectivity preserving simplicity of the graph is NP-hard, but polynomially solvable for fixed k, see [1] and <ref> [11] </ref>. Preserving planarity was investigated in some vertex-connectivity problems, see [13]. Other types of constraints were also studied. In [4] an optimal augmenting set F is to be found which can be extended to an optimal augmentation with respect to an arbitrary higher target.
Reference: [12] <author> T. Jordan, Ph. D. </author> <title> Thesis. Also: Strongly connected augmentations preserving bipar-titeness, </title> <type> manuscript. </type>
Reference-contexts: new copy of the edge uv.) Note also that the third author gave a polynomial-time algorithm which solves the special case k = 1 of the directed version of this bipartite augmentation problem almost optimally, that is, by finding a solution with size at most OP T + 1, see <ref> [12] </ref>. 8 Remarks Another type of "partition-constrained" augmentation problem is the following (let us call it Problem PC2). INSTANCE G = (V; E) an undirected graph, P = fP 1 ; :::; P r g a partition of V , k and M integers.
Reference: [13] <author> G. Kant and H.L. Bodlaender, </author> <title> Planar graph augmentation problems, </title> <booktitle> Algorithms and Data Structures (Proc. WADS '91), Springer Lecture Notes in Computer Science 519, </booktitle> <pages> 286-298, </pages> <year> 1991. </year>
Reference-contexts: Optimally augmenting a bipartite graph to achieve 2-vertex-connectivity while preserving bipartiteness was solved in [10]. Optimally augmenting to achieve k-edge-connectivity preserving simplicity of the graph is NP-hard, but polynomially solvable for fixed k, see [1] and [11]. Preserving planarity was investigated in some vertex-connectivity problems, see <ref> [13] </ref>. Other types of constraints were also studied. In [4] an optimal augmenting set F is to be found which can be extended to an optimal augmentation with respect to an arbitrary higher target. Section 2 contains definitions and some basic results. Section 3 proves the new splitting off theorem.
Reference: [14] <author> L. Lovasz, </author> <title> Combinatorial Problems and Exercises, </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1979. </year> <month> 54 </month>
Reference-contexts: This improves [17], [18] by a logarithmic factor. It gives a similar savings in space. The splitting off method used in algorithms for edge-connectivity-augmentation and a number of other problems is based on the well-known splitting off theorem of Lovasz <ref> [14] </ref>. The partition-constrained problem requires a more powerful result: When k is odd we must avoid certain splits that would mistakenly force an extra edge to be added. We give a new splitting off theorem that characterizes when this can be done. <p> The following result of Lovasz <ref> [14] </ref> Theorem 2.12 (a) below turned out to be a useful tool in augmentation problems, see [6]. Here we formulate an easy extension, Theorem 2.12 (b), which plays an important role in some of our arguments. The proof follows from the proof of part (a) given by A. <p> Frank in [6, pages 35-36]. We assume that the reader is familiar with his proof and give only the necessary additional details below. Theorem 2.12 Suppose that (1) holds in G = (V + s; E), k 2 and d (s) &gt; 0 is even. Then (a) <ref> [14] </ref> for every edge st there exists an edge su such that the pair st; su is admissible. (b) for every edge st the number of edges su (t 6= u) for which the pair st; su is admissible is at least d (s)=2 when k is even and at least
Reference: [15] <author> W. Mader, </author> <title> A reduction method for edge-connectivity in graphs, </title> <journal> Annals of Discrete Math. </journal> <volume> 3, </volume> <year> 1978, </year> <pages> pp. 145-164. </pages>
Reference-contexts: Set X is contractible if any collection of splits in G that is admissible in G=X is admissible in G. (Recall a collection of splits is admissible if executing the splits results in a graph satisfying (1).) We will generalize the following well-known fact first proved by Mader <ref> [15] </ref>. Proposition 6.1 A critical set is contractible. Proof: Consider a critical set C and a collection of splits in G that is admissible in G=C. Let G 0 be the result of executing the splits in G.
Reference: [16] <author> H. Nagamochi and T. Ibaraki, </author> <title> Computing edge-connectivity of multigraphs and capac-itated graphs, </title> <journal> SIAM J. Discrete Math. </journal> <volume> 5, </volume> <year> 1992, </year> <pages> pp. 54-66. </pages>
Reference-contexts: And if sx; sy is a foolish split giving a set Y = fx; yg, the Contraction Step does not change the graph when it processes Y . The Contraction Step tests if Y has a k-bisection by using the algorithm of <ref> [16] </ref> to find a minimum cut of H [Y ]. Lemma 6.3 (c) shows this cut is the k-bisection, if one exists. It is a simple matter to check if the cut is a k-bisection. We proceed to analyze GENERAL-SPLIT. <p> The previous paragraph shows each graph H i has O (m + n s ) = O (m) edges. Each call to HOOKUP takes time O (n (m+n log n)). Testing each graph H [Y ] for a k-bisection involves running the edge connectivity algorithm of <ref> [16] </ref>. It uses time O (n (m + n log n)) on a graph of n vertices and m edges. In one Contraction Step, the total number of vertices in all graphs H [Y ] is at most n and each H [Y ] has at most m edges. <p> Lemma 6.6 (a) shows there are O (log n s ) iterations, so the desired time bound follows. The same analysis shows that the time on unit capacity graphs is O (nm log n s ). We use the fact that the edge connectivity algorithm of <ref> [16] </ref> runs in time O (nm) on these graphs. In summary we have proved the following refinement of [18]. Theorem 6.7 Procedure GENERAL-SPLIT finds a complete admissible splitting at a vertex s in time O (n (m + n log n) log n s ) and space O (m). <p> The splitting exists by Theorem 3.6. To find it try every possible complete splitting that respects the partition constraints. Test every resulting graph for k-edge-connectivity using the procedure of <ref> [16] </ref>. Return the desired complete allowed splitting. The algorithm for partition-constrained edge-connectivity augmentation starts by executing the algorithm of Section 6.6 to define the initial degree function d (s; x). Next execute PARTITION-SPLIT.
Reference: [17] <author> H. Nagamochi and T. Ibaraki, </author> <title> Deterministic O ~ (nm) time edge-splitting algorithm in undirected graphs, </title> <booktitle> Proc. 28th Annual ACM Symp. on Theory of Computing, </booktitle> <year> 1996, </year> <pages> pp. 64-73. </pages>
Reference-contexts: For example he showed it is tractable even if local connectivity demands or vertex costs are given. A different approach due to Naor et al. [19] resulted in a faster algorithm. The currently fastest algorithm was developed by Nagamochi et al. <ref> [17] </ref>, [18]. <p> When specialized to the unconstrained problem our algorithm is a modified version of the splitting-off algorithm of [18]. This specialization is also of interest because, like our general algorithm, it produces an asymptotically optimum number of distinct splits. This improves <ref> [17] </ref>, [18] by a logarithmic factor. It gives a similar savings in space. The splitting off method used in algorithms for edge-connectivity-augmentation and a number of other problems is based on the well-known splitting off theorem of Lovasz [14]. <p> This section presents our splitting algorithm for even k. We first summarize the algorithm of Nagamochi et.al. [18] (see also <ref> [17] </ref>). It is based on two routines. The first routine, C-SPLIT, finds a complete splitting at s. This splitting need not be admissible. However it has the following property. C-SPLIT is called with a subpartition of V whose sets contain all neighbours of s. <p> We call this a near-complete allowed splitting. This section adapts the algorithm of Section 6.3 to find such a splitting. We note that Nagamochi and Ibaraki <ref> [17] </ref> give an algorithm for this task when k is even. The algorithm achieves the same time bound as ours in the special case that all edges have unit capacity. The new algorithm is a straightforward extension of GENERAL-SPLIT, but we state it below for convenience.
Reference: [18] <author> H. Nagamochi, S. Nakamura and T. Ibaraki, </author> <title> A simple O ~ (nm) time edge-splitting algorithm in undirected graphs, </title> <type> Technical Report #96013, </type> <institution> Kyoto University, Department of Applied Mathematics and Physics, </institution> <year> 1996. </year>
Reference-contexts: For example he showed it is tractable even if local connectivity demands or vertex costs are given. A different approach due to Naor et al. [19] resulted in a faster algorithm. The currently fastest algorithm was developed by Nagamochi et al. [17], <ref> [18] </ref>. <p> It finds an optimum solution in the same time as the algorithm of Nagamochi et al. for the unconstrained problem, O (n (m + n log n) log n). When specialized to the unconstrained problem our algorithm is a modified version of the splitting-off algorithm of <ref> [18] </ref>. This specialization is also of interest because, like our general algorithm, it produces an asymptotically optimum number of distinct splits. This improves [17], [18] by a logarithmic factor. It gives a similar savings in space. <p> When specialized to the unconstrained problem our algorithm is a modified version of the splitting-off algorithm of <ref> [18] </ref>. This specialization is also of interest because, like our general algorithm, it produces an asymptotically optimum number of distinct splits. This improves [17], [18] by a logarithmic factor. It gives a similar savings in space. The splitting off method used in algorithms for edge-connectivity-augmentation and a number of other problems is based on the well-known splitting off theorem of Lovasz [14]. <p> A complete allowed splitting at a vertex s is a sequence of d (s)=2 splittings at s such that the ith splitting is allowed when performed in the graph obtained after performing the first i 1 splittings. The following fact was also observed in <ref> [18] </ref> (in a different context). Lemma 2.13 Let k be even and let G = (V + s; E) be a graph satisfying (1) with d (s) even. <p> We present an algorithm that runs in time O (n (m + n log n) log n s ). Here n s is the number of neighbours of s, n s n. Our algorithm is a modification of the algorithm of Nagamochi et.al. <ref> [18] </ref>, using contraction as the main operation. The main advantage of our approach is that it can be extended to find a complete allowed splitting for odd k. (Both algorithms can be so extended for even k.) In addition there is a slight efficiency advantage: The algorithm of [18] finds a <p> Nagamochi et.al. <ref> [18] </ref>, using contraction as the main operation. The main advantage of our approach is that it can be extended to find a complete allowed splitting for odd k. (Both algorithms can be so extended for even k.) In addition there is a slight efficiency advantage: The algorithm of [18] finds a complete splitting with O (n s log n s ) distinct splits. Our splitting contains O (n s ) distinct splits, the asymptotically optimum number. This implies fewer distinct edges get added to the graph. <p> Our splitting contains O (n s ) distinct splits, the asymptotically optimum number. This implies fewer distinct edges get added to the graph. It improves the space bound, from O (m + n s log n s ) to O (m). Also while the time bound of <ref> [18] </ref> for k even is the same as our bound, for k odd it is our bound with log n s changed to log n (so in some cases our algorithm is slightly faster). This section presents our splitting algorithm for even k. <p> This section presents our splitting algorithm for even k. We first summarize the algorithm of Nagamochi et.al. <ref> [18] </ref> (see also [17]). It is based on two routines. The first routine, C-SPLIT, finds a complete splitting at s. This splitting need not be admissible. However it has the following property. C-SPLIT is called with a subpartition of V whose sets contain all neighbours of s. <p> Increasing any value fl 0 destroys admissiblity. If fl 0 &lt; fl then x and y are in the same set of Y.) HOOK-UP runs in time O (n (m + n log n)). (The time is O (nm) on a unit capacity graph.) The algorithm of <ref> [18] </ref> for even k is as follows. The algorithm is a loop that terminates when d (s) = 0, i.e., vertex s has been completely split off. <p> If d (s) = 0 then a complete admissible splitting at s has been executed, so the algorithm halts. It is proved in <ref> [18] </ref> that in each iteration the size of the family Y is halved. This implies there are O (log n s ) iterations. Each iteration uses time O (n (m + n log n)), so the total time is O (n (m + n log n) log n s ). <p> The argument is the same as above, with the observation that G and H always have O (m) edges because each split decreases the number of edges. 6.3 The splitting algorithm for odd k We turn to our splitting algorithm for k an odd integer. The algorithm of <ref> [18] </ref> is based on the (strong) successive augmentation property [4]: It first executes splits to achieve connectivity k 1, and then augments the connectivity of the resulting graph to k. Our algorithm is a modification of the algorithm for k even, again based on contraction. <p> The same analysis shows that the time on unit capacity graphs is O (nm log n s ). We use the fact that the edge connectivity algorithm of [16] runs in time O (nm) on these graphs. In summary we have proved the following refinement of <ref> [18] </ref>. Theorem 6.7 Procedure GENERAL-SPLIT finds a complete admissible splitting at a vertex s in time O (n (m + n log n) log n s ) and space O (m). The splitting contains O (n s ) distinct splits. <p> We discuss each of these. Our approach is to simulate the procedures given in previous sections using an efficient algorithm for computing the initial edges of an admissible splitting. Nagamochi et. al. <ref> [18] </ref> give an algorithm MINIMAL that starts with a graph G = (V + s; E) satisfying (1), and deletes edges incident to s so (1) still holds but decreasing any value d (s; x) destroys (1). <p> The graph that is returned satisfies (1), has `(s; x) d (s; x) for every x 2 V , and no value d (s; x) can be decreased subject to these constraints. It is simple to modify the algorithm of <ref> [18] </ref> to handle these lower bounds. (Specifically the algorithm of [18] initializes the solution graph to G with each value d (s; x) decreased to 0. It proceeds to add back a minimal set of edges of G incident to s that achieves (1). <p> It is simple to modify the algorithm of <ref> [18] </ref> to handle these lower bounds. (Specifically the algorithm of [18] initializes the solution graph to G with each value d (s; x) decreased to 0. It proceeds to add back a minimal set of edges of G incident to s that achieves (1). <p> We do this using the original algorithm MINIMAL of <ref> [18] </ref>. The rest of Step 1 ensures that d (s) is even, specifically d (s) = 2ff for ff as defined in Section 4. This part is trivial to implement. <p> Acknowledgments The authors gratefully thank Andras Frank. He invited us to the Second Budapest Workshop on Network Design where this work was begun, and he suggested the application of Section 7. We thank Hiroshi Nagamochi for making a preprint of <ref> [18] </ref> available. 53
Reference: [19] <author> D. Naor, D. Gusfield and Ch. Martel, </author> <title> A fast algorithm for optimally increasing the edge-connectivity, </title> <booktitle> 31st Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1990, </year> <pages> pp 698-707. </pages>
Reference-contexts: Using this method Frank [6] solved several extensions of the problem. For example he showed it is tractable even if local connectivity demands or vertex costs are given. A different approach due to Naor et al. <ref> [19] </ref> resulted in a faster algorithm. The currently fastest algorithm was developed by Nagamochi et al. [17], [18].
Reference: [20] <author> A. Recski, </author> <title> Matroid Theory and its Applications in Electric Network Theory and in Statics, </title> <publisher> Akademiai Kiado, </publisher> <address> Budapest, </address> <year> 1989. </year>
Reference-contexts: The time is O (nm log n) on unit capacity graphs. 2 7 An application in statics In this section we show how one of our results (Corollary 5.10) solves an open question raised by A. Frank (and implicitly by A. Recski in his book <ref> [20, pages 63-64] </ref>) and hence present a possible application in statics, a new field where connectivity augmentation algorithms may be useful. <p> A framework (possibly containing extra rods) is rigid if, roughly speaking, it has no nontrivial deformations, that is, fixing the position of a rod of the grid to the plane, the positions of all other rods (and joints) are uniquely determined. (For a precise description and more details see <ref> [20, Section 2.6] </ref>.) How can we decide whether or not a framework (with extra rods) is rigid? The answer which was found by Bolker and Crapo depends only on the graph of the framework.
Reference: [21] <author> M. Stoer, </author> <title> Design of Survivable Networks, </title> <type> Ph.D. Thesis, </type> <note> Springer Lecture Notes in Mathematics 1531, </note> <year> 1992. </year>
Reference-contexts: Note that E as well as F may contain parallel edges. This optimization problem has been extensively investigated, in part due to possible practical applications in the design of reliable networks (see [8], <ref> [21] </ref>). The first polynomial-time algorithm solving this problem is due to Watanabe and Nakamura [22]. Other approaches were later developed which led to more efficient algorithms.
Reference: [22] <author> T. Watanabe and A. Nakamura, </author> <title> Edge-Connectivity Augmentation Problems, </title> <journal> Journal of Computer and System Sciences 35, </journal> <month> 96-144 </month> <year> (1987). </year> <month> 55 </month>
Reference-contexts: Note that E as well as F may contain parallel edges. This optimization problem has been extensively investigated, in part due to possible practical applications in the design of reliable networks (see [8], [21]). The first polynomial-time algorithm solving this problem is due to Watanabe and Nakamura <ref> [22] </ref>. Other approaches were later developed which led to more efficient algorithms. Cai and Sun [3] gave a min-max characterization for the corresponding optimum value, using the splitting off method. "Splitting off" a pair su; sv of edges means replacing su and sv by a new edge uv.
References-found: 22

