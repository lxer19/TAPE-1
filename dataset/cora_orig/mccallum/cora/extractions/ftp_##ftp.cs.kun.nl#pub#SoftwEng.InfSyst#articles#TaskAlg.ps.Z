URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/TaskAlg.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Phone: 2  
Title: Task Structure Semantics through Process Algebra  Task structure semantics through process algebra. Software  
Author: A.H.M. ter Hofstede ; E.R. Nieuwland ; A.H.M. ter Hofstede and E.R. Nieuwland. 
Note: Published as:  Engineering Journal,  
Date: January, 1993  8(1):14-20, January 1993.  
Address: P.O. Box 80.089 3508 TB Utrecht The Netherlands  P.O. Box 424 3500 AK Utrecht The Netherlands  
Affiliation: 1 Department of Computer Science University of Utrecht  Software Engineering Research Centre SERC  
Abstract: The task structure diagramming technique can be used to graphically denote process specifications. In task structure diagrams, sequential execution, iteration, choice and parallelism can be expressed. In this paper task structure diagrams are extended with a synchronisation mechanism and a formal semantics is given by means of a translation to Process Algebra. By using known techniques for proving equivalence of process specifications in Process Algebra, the translation provides a basis for proving equivalence of task structures.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P.S. Seligmann, G.M. Wijers, and H.G. Sol. </author> <title> Analyzing the structure of I.S. methodologies, an alternative approach. </title> <editor> In R. Maes, editor, </editor> <booktitle> Proceedings of the First Dutch Conference on Information Systems, </booktitle> <year> 1989. </year>
Reference-contexts: 1 Introduction In information system development methods a distinction can be made between (1) a way of modelling, describing the possible models and their components and (2) a way of working, describing how the modelling process is structured and carried out (see <ref> [1] </ref>). In [2] task structure diagrams were introduced as a technique to describe the way of working of a development method. Task structure diagrams consist of tasks and decisions, where decisions represent moments of choice. In tasks structure diagrams, sequential execution, iteration, choice and parallelism can be expressed.
Reference: [2] <author> G.M. Wijers, A.H.M. ter Hofstede, and N.E. van Oosterom. </author> <title> Representation of Information Modelling Knowledge. </title> <editor> In V.-P. Tahvanainen and K. Lyytinen, editors, </editor> <title> Next Generation CASE Tools, </title> <booktitle> volume 3 of Studies in Computer and Communication Systems, </booktitle> <pages> pages 167 - 223. </pages> <publisher> IOS Press, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction In information system development methods a distinction can be made between (1) a way of modelling, describing the possible models and their components and (2) a way of working, describing how the modelling process is structured and carried out (see [1]). In <ref> [2] </ref> task structure diagrams were introduced as a technique to describe the way of working of a development method. Task structure diagrams consist of tasks and decisions, where decisions represent moments of choice. In tasks structure diagrams, sequential execution, iteration, choice and parallelism can be expressed. <p> If performing a task involves choices between subtasks, decisions represent these moments of choice. Decisions coordinate the sequence of tasks. In figure 1 the important notions of task structure diagrams as presented in <ref> [2] </ref> are represented graphically. In figure 1 triggers, graphically represented as arrows, model sequential order. Initial items are those task objects, i.e. tasks or decisions, that have to be performed first as part of the execution of a decomposed task. <p> Finally, an important rule in task structure diagrams is that tasks with the same name have the same decomposition, e.g. the tasks named B in figure 1. For practical examples of the application of task structure diagrams we refer to [7]. In the task structure diagrams as defined in <ref> [2] </ref>, every decision implicitly has the option "termination". Choosing this option implies termination of the execution path of that decision. If this execution path is the only active execution path of the supertask, the supertask is also terminated. <p> a if a =2 H (D1) @ H (X + Y ) = @ H (X) + @ H (Y ) (D3) Table 9: @ H axioms 4.2 Translating Task Structures to Process Algebra In this section we will first define the semantics of task structure diagrams as defined in <ref> [2] </ref>, then we will define the semantics of the extended task structure diagrams. Task structure diagrams as defined in [2], have the property that S = ; and D t = D. For every task object o 2 O, we define the object E o . <p> (Y ) (D3) Table 9: @ H axioms 4.2 Translating Task Structures to Process Algebra In this section we will first define the semantics of task structure diagrams as defined in <ref> [2] </ref>, then we will define the semantics of the extended task structure diagrams. Task structure diagrams as defined in [2], have the property that S = ; and D t = D. For every task object o 2 O, we define the object E o . Intuitively, E o should be seen as an entry point for basic task object o. <p> The semantics of these task structure diagrams have been defined by means of a translation to Process Algebra. Compared to the formalisation of task structure diagrams in Predicate-Transition nets ([11]) as documented in <ref> [2] </ref>, this definition is more compact and comprehensible. Furthermore, it allows to prove equivalence between task structures using techniques developed for Process Algebra. This equivalence can be used to prove that two seemingly different ways of working are equal.
Reference: [3] <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <publisher> Cambridge University Press, </publisher> <address> Cam-bridge, United Kingdom, </address> <year> 1990. </year>
Reference-contexts: As an algebraic theory Process Algebra belongs to the same family as CCS [8] and CSP [9]. In section 4.1 we will present a short introduction to the important ingredients of Process Algebra. For an in depth treatment we refer to <ref> [3] </ref>. In section 4.2 we will then define the translation of task structure diagrams to Process Algebra. 4 4.1 Process Algebra Although the name Process Algebra suggests a single algebra to describe processes, it actually refers to a whole family of algebras based on the same principles. <p> The theory of bisimulation identifies processes which are observationally the same. Roughly speaking, two processes are bisimilar if they can perform the same actions in the same order. For a complete discussion on bisimulation in the context of Process Algebra, we refer to <ref> [3] </ref>. Process graphs are an important aid in determining bisimulation. A process graph is a directed graph with labeled edges, representing atomic actions. Sequential composition of processes X and Y is accomplished by appending copies of Y at the end nodes of X.
Reference: [4] <editor> J.C.M. Baeten, editor. </editor> <title> Applications of Process Algebra. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, United Kingdom, </address> <year> 1990. </year>
Reference-contexts: Since there are many views of what exactly constitutes a process, the theory avoids trying to capture all possible properties a process may have. Instead it treats processes in an axiomatic way. Throughout the years Process Algebra has proven its value in various application domains (see e.g. <ref> [4] </ref>). The need for formal foundations of specifications and specification techniques has been stressed by various authors (see e.g. [5, 6]). In this paper, we will focus on the definition of the formal semantics of task structure diagrams through a translation to Process Algebra. <p> Process Algebra has been applied to specify and verify a variety of processes and protocols (see e.g. <ref> [4] </ref>). One of its virtues is the ability to prove equivalence of process specifications. Another advantage of Process Algebra is that it has few concepts but a great expressive power. As an algebraic theory Process Algebra belongs to the same family as CCS [8] and CSP [9]. <p> The theory of bisimulation offers an extended notion of equivalence. The theory of Process Algebra provides techniques for proving equivalence of process specifications. Examples of the use of these techniques can be found in <ref> [4] </ref>. The most straightforward approach to proving equivalence is to apply the axioms of ACP " to rewrite process specifications. As an example consider the set of equations of example 4.2.
Reference: [5] <author> B. Cohen. </author> <title> Justification of formal methods for system specification. </title> <journal> Software Engineering Journal, </journal> <volume> 4(1) </volume> <pages> 26-35, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: Instead it treats processes in an axiomatic way. Throughout the years Process Algebra has proven its value in various application domains (see e.g. [4]). The need for formal foundations of specifications and specification techniques has been stressed by various authors (see e.g. <ref> [5, 6] </ref>). In this paper, we will focus on the definition of the formal semantics of task structure diagrams through a translation to Process Algebra. Furthermore, we will extend task structure diagrams with the possibility to define explicit synchronisation and include this extension in the translation to Process Algebra.
Reference: [6] <author> B. Cohen. </author> <title> A rejustification of formal notations. </title> <journal> Software Engineering Journal, </journal> <volume> 4(1) </volume> <pages> 36-38, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: Instead it treats processes in an axiomatic way. Throughout the years Process Algebra has proven its value in various application domains (see e.g. [4]). The need for formal foundations of specifications and specification techniques has been stressed by various authors (see e.g. <ref> [5, 6] </ref>). In this paper, we will focus on the definition of the formal semantics of task structure diagrams through a translation to Process Algebra. Furthermore, we will extend task structure diagrams with the possibility to define explicit synchronisation and include this extension in the translation to Process Algebra.
Reference: [7] <author> T.F. Verhoef, A.H.M. ter Hofstede, and G.M. Wijers. </author> <title> Structuring modelling knowledge for CASE shells. </title> <editor> In R. Andersen, J.A. Bubenko, and A. Stlvberg, editors, </editor> <booktitle> Proceedings of the Third International Conference CAiSE'91 on Advanced Information Systems Engineering, volume 498 of Lecture Notes in Computer Science, </booktitle> <pages> pages 502-524, </pages> <address> Trondheim, Norway, </address> <month> May </month> <year> 1991. </year> <note> Springer-Verlag. 15 </note>
Reference-contexts: Therefore this has to be (graphically) indicated explicitly. Finally, an important rule in task structure diagrams is that tasks with the same name have the same decomposition, e.g. the tasks named B in figure 1. For practical examples of the application of task structure diagrams we refer to <ref> [7] </ref>. In the task structure diagrams as defined in [2], every decision implicitly has the option "termination". Choosing this option implies termination of the execution path of that decision. If this execution path is the only active execution path of the supertask, the supertask is also terminated.
Reference: [8] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year>
Reference-contexts: One of its virtues is the ability to prove equivalence of process specifications. Another advantage of Process Algebra is that it has few concepts but a great expressive power. As an algebraic theory Process Algebra belongs to the same family as CCS <ref> [8] </ref> and CSP [9]. In section 4.1 we will present a short introduction to the important ingredients of Process Algebra. For an in depth treatment we refer to [3].
Reference: [9] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1985. </year>
Reference-contexts: One of its virtues is the ability to prove equivalence of process specifications. Another advantage of Process Algebra is that it has few concepts but a great expressive power. As an algebraic theory Process Algebra belongs to the same family as CCS [8] and CSP <ref> [9] </ref>. In section 4.1 we will present a short introduction to the important ingredients of Process Algebra. For an in depth treatment we refer to [3].
Reference: [10] <author> R.J. van Glabbeek and W.P. Weijland. </author> <title> Refinement in branching time semantics. </title> <type> Technical Report CS-R8922, </type> <institution> Centre for Mathematics and Computer Science, </institution> <address> Amsterdam, The Netherlands, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: Traditionally, one presents only the family member used. The units of Process Algebra are atomic actions. The set of all atomic actions is called A. Although units of calculation, atomic actions need not be indivisible (see <ref> [10] </ref>). Starting with atomic actions new processes can be constructed applying sequential and alternative composition (" " resp. "+" ). Table 1 summarises the axioms defining these operators. The algebra that results is called basic process algebra (BPA).
Reference: [11] <editor> H. Genrich. Predicate/Transition Nets. In W. Brauer, W. Reisig, and G. Rozenberg, editors, </editor> <title> Petri Nets: Central Models and Their Properties, </title> <booktitle> Advances in Petri Nets 1986 Part I, volume 254 of Lecture Notes in Computer Science, </booktitle> <pages> pages 207-247. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year> <month> 16 </month>
References-found: 11

