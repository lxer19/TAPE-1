URL: http://ftp.eecs.umich.edu/people/rundenst/papers/r-96-15.ps
Refering-URL: http://ftp.eecs.umich.edu/people/rundenst/papers/
Root-URL: http://www.eecs.umich.edu
Email: ywh@eecs.umich.edu  jning@eecs.umich.edu  rundenst@eecs.umich.edu  
Title: Effective Graph Clustering for Path Queries in Digital Map Databases  
Author: Yun-Wu Huang Ning Jing Elke A. Rundensteiner 
Address: Michigan  Michigan  
Affiliation: University of  Changsha Institute of Technology  University of  
Abstract: In this paper, we present an experimental evaluation of graph clustering strategies in terms of their effectiveness in optimizing I/O for path query processing in digital map databases. Clustering optimization is attractive because it does not incurs any run-time cost, and is complimentary to many of the existing techniques in path query optimization. We first propose a novel graph clustering technique, called Spatial Partition Clustering (SPC), that creates balanced partitions of links based on the spatial proximity of their origin nodes. We then select three alternative clustering techniques from the literature, namely two-way partitioning, approximately topological clustering, and random clustering, to compare their performance in path query processing with SPC. Experimental evaluation indicates that our SPC performs the best for the high-locality graphs (such as GIS maps), whereas the two-way partitioning approach performs the best for no-locality random graphs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Agrawal, R., Dar, S., and Jagadish, H. V., </author> <title> Direct Transitive Closure Algorithms: Design and Performance Evaluation, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 15, No. 3, </volume> <month> Sep. </month> <year> 1990, </year> <pages> pp. 427 - 458. </pages>
Reference-contexts: For attributes that do not change frequently, clustering can be done off-line with no dynamic update costs. Furthermore, clustering is at a level lower than many other path query solutions that focus on auxiliary access structures [2, 16] or on algorithmic techniques <ref> [1, 3] </ref>. Therefore results emerging from the comparative evaluation of our clustering research can be deployed by solutions that do not employ specific link clustering [1, 3, 16]. <p> Therefore results emerging from the comparative evaluation of our clustering research can be deployed by solutions that do not employ specific link clustering <ref> [1, 3, 16] </ref>. In this paper, we first present a clustering technique that partitions links in a GIS map based on the spatial proximity of the origin nodes of the links. We call it Spatial Partition Clustering (SPC). <p> Most of such research has focused on pure transitive closure (tc) computation <ref> [1, 3, 10] </ref>. In our previous work, we have explored a hierarchical path view approach which fragments a large graph into smaller subgraphs and pre-computes the path transitive closure for each subgraph [8, 9, 11]. <p> This may not be feasible in practice. Second, some link weights may change very frequently. In order for the tc computed based on such weights to remain current, recomputation may need to be conducted very frequently. However, performance results in <ref> [1, 10] </ref> showed that such techniques are not efficient in computing the shortest path tc for cyclic graphs such as GIS maps managed by digital map databases. Recomputation of the shortest path tc using such techniques therefore cannot be done frequently, undercutting the correctness of the computed paths.
Reference: [2] <author> Agrawal, R. and Kiernan, J., </author> <title> An Access Structure for Generalized Transitive Closure Queries, </title> <booktitle> IEEE 9th Int. Conf. on Data Engineering, </booktitle> <year> 1993, </year> <pages> pp. 429 - 438. </pages>
Reference-contexts: For attributes that do not change frequently, clustering can be done off-line with no dynamic update costs. Furthermore, clustering is at a level lower than many other path query solutions that focus on auxiliary access structures <ref> [2, 16] </ref> or on algorithmic techniques [1, 3]. Therefore results emerging from the comparative evaluation of our clustering research can be deployed by solutions that do not employ specific link clustering [1, 3, 16]. <p> Because GIS links are short, most nearby links are grouped into the same partition by SPC. Since graph-traversal algorithms exhibit high expansion locality on GIS maps, SPC is expected to optimize I/O incurred during path search. Next, we implement three other alternative clustering strategies, namely approximately topological clustering <ref> [2] </ref>, two-way partition clustering [5], and random clustering. For our benchmark studies of these techniques, we select the Dijkstra algorithm [6] because it is one of the most popular and effective single path search algorithms 3 for sparse graphs such as GIS maps. <p> Topological clustering techniques have been previously proposed to reduce the path query processing I/O costs <ref> [2, 4, 13] </ref>. Pure topological clustering [4, 13] does not apply to cyclic graphs such as GIS maps. In [2], an approximately topological clustering was proposed that handles cyclic graphs using heuristics which break cycles to decompose a graph into acyclic subgraphs. <p> Topological clustering techniques have been previously proposed to reduce the path query processing I/O costs [2, 4, 13]. Pure topological clustering [4, 13] does not apply to cyclic graphs such as GIS maps. In <ref> [2] </ref>, an approximately topological clustering was proposed that handles cyclic graphs using heuristics which break cycles to decompose a graph into acyclic subgraphs. It is suggested that such a technique may not be very effective for highly cyclic graphs [14, 16]. <p> dx | 3 3 p = 4 A Stoppage Point (c) Sort 3 f-pages links by y-value of their origin nodes 4 f-pages 3 f-pages are spatially clustered Links sorted by y-value of their origin nodes all f-pages are spatial clustered Partition Clustering (TWPC) [5], the approximately Topological Clustering (TopoC) <ref> [2] </ref>, and the Random Clustering (RandC). We assume that for each clustering technique, links of the same origin are always clustered together in the link table. <p> With an adequate buffer size, such an ordering can facilitate path query processing with only one pass of the link table. Pure topological clustering however is not applicable to cyclic graphs such as GIS maps. <ref> [2] </ref> proposed an approach which extended topological clustering to cyclic graphs by recursively breaking cycles and preserving acyclic subgraphs for a cyclic graph. This approach is called approximately topological clustering. In this paper, we implement the approximately topological clustering algorithm proposed in [2] and call it TopoC. <p> applicable to cyclic graphs such as GIS maps. <ref> [2] </ref> proposed an approach which extended topological clustering to cyclic graphs by recursively breaking cycles and preserving acyclic subgraphs for a cyclic graph. This approach is called approximately topological clustering. In this paper, we implement the approximately topological clustering algorithm proposed in [2] and call it TopoC. The following is a description of the main steps of TopoC: 1 Iteratively move a root-link 5 in the graph into the clustered link table, until no root-link exists.
Reference: [3] <author> Bancilhon, F. and Ramakrishnan, R., </author> <title> An Amateur's Introduction to Recursive Query Processing Strategies, </title> <booktitle> Proc. of the 1986 ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <year> 1986. </year>
Reference-contexts: For attributes that do not change frequently, clustering can be done off-line with no dynamic update costs. Furthermore, clustering is at a level lower than many other path query solutions that focus on auxiliary access structures [2, 16] or on algorithmic techniques <ref> [1, 3] </ref>. Therefore results emerging from the comparative evaluation of our clustering research can be deployed by solutions that do not employ specific link clustering [1, 3, 16]. <p> Therefore results emerging from the comparative evaluation of our clustering research can be deployed by solutions that do not employ specific link clustering <ref> [1, 3, 16] </ref>. In this paper, we first present a clustering technique that partitions links in a GIS map based on the spatial proximity of the origin nodes of the links. We call it Spatial Partition Clustering (SPC). <p> Most of such research has focused on pure transitive closure (tc) computation <ref> [1, 3, 10] </ref>. In our previous work, we have explored a hierarchical path view approach which fragments a large graph into smaller subgraphs and pre-computes the path transitive closure for each subgraph [8, 9, 11].
Reference: [4] <author> Banerjee, J., Kim, W., Kim, S.J., and Garza, J.F., </author> <title> Clustering a DAG for CAD Databases, </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> Vol. 14, No. 11, </volume> <year> 1988. </year>
Reference-contexts: Topological clustering techniques have been previously proposed to reduce the path query processing I/O costs <ref> [2, 4, 13] </ref>. Pure topological clustering [4, 13] does not apply to cyclic graphs such as GIS maps. In [2], an approximately topological clustering was proposed that handles cyclic graphs using heuristics which break cycles to decompose a graph into acyclic subgraphs. <p> Topological clustering techniques have been previously proposed to reduce the path query processing I/O costs [2, 4, 13]. Pure topological clustering <ref> [4, 13] </ref> does not apply to cyclic graphs such as GIS maps. In [2], an approximately topological clustering was proposed that handles cyclic graphs using heuristics which break cycles to decompose a graph into acyclic subgraphs. <p> Therefore the optimal cut that goes through the link between nodes x and y is lost. 4.2 Approximately Topological Graph Clustering Pure topological clustering <ref> [4, 13] </ref> arranges links in a topological order. With an adequate buffer size, such an ordering can facilitate path query processing with only one pass of the link table.
Reference: [5] <author> Cheng, C.K. and Wei, </author> <title> T.C., An Improved Two-Way Partitioning Algorithm with Stable Performance, </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> Vol. 10, No. 12, </volume> <month> Dec. </month> <year> 1991, </year> <pages> pp. 1502 - 1511. </pages>
Reference-contexts: Since graph-traversal algorithms exhibit high expansion locality on GIS maps, SPC is expected to optimize I/O incurred during path search. Next, we implement three other alternative clustering strategies, namely approximately topological clustering [2], two-way partition clustering <ref> [5] </ref>, and random clustering. For our benchmark studies of these techniques, we select the Dijkstra algorithm [6] because it is one of the most popular and effective single path search algorithms 3 for sparse graphs such as GIS maps. <p> It is suggested that such a technique may not be very effective for highly cyclic graphs [14, 16]. In this paper, a version of this clustering technique is implemented, benchmarked on real GIS maps, and compared against alternative strategies. Heuristic partitioning techniques <ref> [5, 7, 12, 15] </ref> commonly deployed in VLSI (Very Large Scale Integrated Circuit) design can be used for graph clustering. <p> Heuristic partitioning techniques [5, 7, 12, 15] commonly deployed in VLSI (Very Large Scale Integrated Circuit) design can be used for graph clustering. Such techniques are based on certain objectives, such as minimizing the total distance of inter-partition links. [14] uses the two-way parti 216 tioning algorithm <ref> [5] </ref> as a clustering mechanism for the pro-posed access structure for aggregate queries for transportation networks. Their aggregate query experimentation considered only linear path traversal such as evaluation of an existing path. Recursive path search such as the ones discussed in this paper was not considered. <p> Their aggregate query experimentation considered only linear path traversal such as evaluation of an existing path. Recursive path search such as the ones discussed in this paper was not considered. In this paper, we implement the two-way partition algorithm <ref> [5] </ref> as one of the clustering optimizations for path query processing. 3 Spatial Partition Clustering (SPC) 3.1 Exploiting GIS Road Map Characteristics The Spatial Partition Clustering (SPC) is designed to exploit the unique GIS road map characteristics to achieve I/O optimization in path query processing. <p> d3 = |(dy / 3) - dx | 3 3 p = 4 A Stoppage Point (c) Sort 3 f-pages links by y-value of their origin nodes 4 f-pages 3 f-pages are spatially clustered Links sorted by y-value of their origin nodes all f-pages are spatial clustered Partition Clustering (TWPC) <ref> [5] </ref>, the approximately Topological Clustering (TopoC) [2], and the Random Clustering (RandC). We assume that for each clustering technique, links of the same origin are always clustered together in the link table. <p> Grouping links by their origin nodes makes sure such expansions exhibit good I/O behavior. 4.1 Two-Way Partition Clustering Partitioning algorithms have been widely deployed in the design and fabrication of VLSI (Very Large Scale Integrated circuit) chips. Most such algorithms partition a network into two subnetworks <ref> [5, 7, 12] </ref>, and through a divide-and-conquer process, reduce a complex problem into smaller and hence more manageable subproblems. The common objective of such partitioning is to shorten the total interconnection distance between all subnetworks in achieving a reduced layout cost and better system performance. <p> To remedy such a restriction, multiple iterations of swapping runs may be necessary to achieve a better result. The two-way partitioning algorithm we implement extends the two-stage heuristics to include a contraction stage that was shown to be an improvement over the traditional two-stage approach <ref> [5] </ref>. Such an algorithm cuts a network into two partitions based on ratio-cut heuristics. To adapt it to our page clustering, we recursively apply it until each partition fits into one page.
Reference: [6] <author> Dijkstra, E. W. </author> <title> A Note on Two Problems in Connection with Graphs, </title> <journal> Numer. </journal> <month> March, </month> <year> 1959, </year> <pages> pp. 269 - 271. </pages>
Reference-contexts: Next, we implement three other alternative clustering strategies, namely approximately topological clustering [2], two-way partition clustering [5], and random clustering. For our benchmark studies of these techniques, we select the Dijkstra algorithm <ref> [6] </ref> because it is one of the most popular and effective single path search algorithms 3 for sparse graphs such as GIS maps. We conduct experiments using a real GIS map of Ann Arbor (5,596 nodes, 14,033 links) and randomly generated graphs of similar size.
Reference: [7] <author> Fiduccia, </author> <title> C.M. and Mattheyses, R.M., A Linear Time Heuristic for Improving Network Partitions, </title> <booktitle> Proc. ACM/IEEE 19th Design Automat. Conf., </booktitle> <year> 1982, </year> <pages> pp. 175 - 181. </pages>
Reference-contexts: It is suggested that such a technique may not be very effective for highly cyclic graphs [14, 16]. In this paper, a version of this clustering technique is implemented, benchmarked on real GIS maps, and compared against alternative strategies. Heuristic partitioning techniques <ref> [5, 7, 12, 15] </ref> commonly deployed in VLSI (Very Large Scale Integrated Circuit) design can be used for graph clustering. <p> Grouping links by their origin nodes makes sure such expansions exhibit good I/O behavior. 4.1 Two-Way Partition Clustering Partitioning algorithms have been widely deployed in the design and fabrication of VLSI (Very Large Scale Integrated circuit) chips. Most such algorithms partition a network into two subnetworks <ref> [5, 7, 12] </ref>, and through a divide-and-conquer process, reduce a complex problem into smaller and hence more manageable subproblems. The common objective of such partitioning is to shorten the total interconnection distance between all subnetworks in achieving a reduced layout cost and better system performance. <p> partition in G is a node in G 0 and each interconnection link between two partitions is a link between the two corresponding nodes in G 0 . 2 Swapping stage: 2.1 Randomly select a cut that creates two partitions in G 0 . 2.2 Iteratively apply the Fiduccia-Mattheyses algorithm <ref> [7] </ref> to the partitioned G 0 i times for a better swapping result, with the size constraints of the two resulting partitions set to s1 and s2. The i, s1, s2 are pre specified parameters. <p> Patition A subgraph Partition B subgraph x cut Contraction. a b x Partition A subgraph subgraph Partition B cut without Contraction. The ratio-cut routine [15] in step 1.1 and the Fiduccia-Mattheyses algorithm <ref> [7] </ref> in steps 2.2 and 3.3 are two min-cut algorithms based on the two-stage heuristics described previously. The intuition behind the contraction approach is that nodes that are grouped into the same partition by the ratio-cut algorithm [15] are more strongly connected.
Reference: [8] <author> Huang, Y. W., Jing, N. and Rundensteiner, E., </author> <title> Hierarchical Path Views: A Model Based on Fragmentation and Transportation Road Types, </title> <booktitle> The Third ACM Workshop on Geographic Information Systems, </booktitle> <address> Washington, D.C., </address> <month> Nov. </month> <year> 1995, </year> <pages> pp. 93 - 100. </pages>
Reference-contexts: Most of such research has focused on pure transitive closure (tc) computation [1, 3, 10]. In our previous work, we have explored a hierarchical path view approach which fragments a large graph into smaller subgraphs and pre-computes the path transitive closure for each subgraph <ref> [8, 9, 11] </ref>. The advantage of such a technique is more efficient computation in both transitive closures of the subgraphs and path search through the hierarchy. Two potential problems exist in using tc pre-computation to answer path queries for digital map databases.
Reference: [9] <author> Huang, Y. W., Jing, N. and Rundensteiner, E., </author> <title> Evaluation of Hierarchical Path Finding Techniques for ITS Route Guidance, </title> <booktitle> Proc. of ITS-america, </booktitle> <address> Houston, </address> <month> April, </month> <year> 1996. </year>
Reference-contexts: Most of such research has focused on pure transitive closure (tc) computation [1, 3, 10]. In our previous work, we have explored a hierarchical path view approach which fragments a large graph into smaller subgraphs and pre-computes the path transitive closure for each subgraph <ref> [8, 9, 11] </ref>. The advantage of such a technique is more efficient computation in both transitive closures of the subgraphs and path search through the hierarchy. Two potential problems exist in using tc pre-computation to answer path queries for digital map databases.
Reference: [10] <author> Ioannidis, Y. E., Ramakrishnan, R., and Winger, L., </author> <title> Transitive Closure Algorithms Based on Graph Traversal, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 18, No. 3, </volume> <month> Sep. </month> <year> 1993, </year> <pages> pp. 512 - 576. </pages>
Reference-contexts: Most of such research has focused on pure transitive closure (tc) computation <ref> [1, 3, 10] </ref>. In our previous work, we have explored a hierarchical path view approach which fragments a large graph into smaller subgraphs and pre-computes the path transitive closure for each subgraph [8, 9, 11]. <p> This may not be feasible in practice. Second, some link weights may change very frequently. In order for the tc computed based on such weights to remain current, recomputation may need to be conducted very frequently. However, performance results in <ref> [1, 10] </ref> showed that such techniques are not efficient in computing the shortest path tc for cyclic graphs such as GIS maps managed by digital map databases. Recomputation of the shortest path tc using such techniques therefore cannot be done frequently, undercutting the correctness of the computed paths.
Reference: [11] <author> Jing, N., Huang, Y.W., and Rundensteiner, E., </author> <title> Hierarchical Optimization of Optimal Path Finding for Transportation Applications, </title> <booktitle> Proc. of the 5th Int. Conf. on Information and Knowledge Management, </booktitle> <year> 1996. </year>
Reference-contexts: Most of such research has focused on pure transitive closure (tc) computation [1, 3, 10]. In our previous work, we have explored a hierarchical path view approach which fragments a large graph into smaller subgraphs and pre-computes the path transitive closure for each subgraph <ref> [8, 9, 11] </ref>. The advantage of such a technique is more efficient computation in both transitive closures of the subgraphs and path search through the hierarchy. Two potential problems exist in using tc pre-computation to answer path queries for digital map databases.
Reference: [12] <author> Kernighan, B.W. and Lin, S., </author> <title> An Efficient Heuristic Procedure for Partitioning Graphs, </title> <journal> Bell Syst. Tech. J., </journal> <volume> vol. 49, no. </volume> <month> 2 Feb. </month> <year> 1970, </year> <pages> pp. 291 - 307. </pages>
Reference-contexts: It is suggested that such a technique may not be very effective for highly cyclic graphs [14, 16]. In this paper, a version of this clustering technique is implemented, benchmarked on real GIS maps, and compared against alternative strategies. Heuristic partitioning techniques <ref> [5, 7, 12, 15] </ref> commonly deployed in VLSI (Very Large Scale Integrated Circuit) design can be used for graph clustering. <p> Grouping links by their origin nodes makes sure such expansions exhibit good I/O behavior. 4.1 Two-Way Partition Clustering Partitioning algorithms have been widely deployed in the design and fabrication of VLSI (Very Large Scale Integrated circuit) chips. Most such algorithms partition a network into two subnetworks <ref> [5, 7, 12] </ref>, and through a divide-and-conquer process, reduce a complex problem into smaller and hence more manageable subproblems. The common objective of such partitioning is to shorten the total interconnection distance between all subnetworks in achieving a reduced layout cost and better system performance. <p> Because the partition problem with specified size constraints belongs to the class of NP-complete problems, all partition algorithms focus on finding heuristics in providing solutions in polynomial time. The most common heuristic 218 used in two-way partitioning is based a two-stage process <ref> [12] </ref>. First, an initial cut that separates a network into two is derived. Next, nodes are swapped between partitions for a better cut. Swapping can be done with a single node moving from one partition to the other, or with two nodes from different partitions moving to the opposite partition.
Reference: [13] <author> Larson, P.A. and Deshpande, V., </author> <title> A File Structure Supporting Traversal Recursion, </title> <booktitle> Proc. of the 1989 ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <month> May </month> <year> 1989, </year> <pages> pp. 243 - 252. </pages>
Reference-contexts: Topological clustering techniques have been previously proposed to reduce the path query processing I/O costs <ref> [2, 4, 13] </ref>. Pure topological clustering [4, 13] does not apply to cyclic graphs such as GIS maps. In [2], an approximately topological clustering was proposed that handles cyclic graphs using heuristics which break cycles to decompose a graph into acyclic subgraphs. <p> Topological clustering techniques have been previously proposed to reduce the path query processing I/O costs [2, 4, 13]. Pure topological clustering <ref> [4, 13] </ref> does not apply to cyclic graphs such as GIS maps. In [2], an approximately topological clustering was proposed that handles cyclic graphs using heuristics which break cycles to decompose a graph into acyclic subgraphs. <p> Therefore the optimal cut that goes through the link between nodes x and y is lost. 4.2 Approximately Topological Graph Clustering Pure topological clustering <ref> [4, 13] </ref> arranges links in a topological order. With an adequate buffer size, such an ordering can facilitate path query processing with only one pass of the link table.
Reference: [14] <author> Shekar, S. and Liu, D.R., CCAM: </author> <title> A Connectivity-Clustered Access Method for Aggregate Queries on Transportation Networks : A Summary of Results, </title> <booktitle> IEEE 11th Int. Conf. on Data Engineering, </booktitle> <year> 1995, </year> <pages> pp. 410 - 419. </pages>
Reference-contexts: In [2], an approximately topological clustering was proposed that handles cyclic graphs using heuristics which break cycles to decompose a graph into acyclic subgraphs. It is suggested that such a technique may not be very effective for highly cyclic graphs <ref> [14, 16] </ref>. In this paper, a version of this clustering technique is implemented, benchmarked on real GIS maps, and compared against alternative strategies. Heuristic partitioning techniques [5, 7, 12, 15] commonly deployed in VLSI (Very Large Scale Integrated Circuit) design can be used for graph clustering. <p> Heuristic partitioning techniques [5, 7, 12, 15] commonly deployed in VLSI (Very Large Scale Integrated Circuit) design can be used for graph clustering. Such techniques are based on certain objectives, such as minimizing the total distance of inter-partition links. <ref> [14] </ref> uses the two-way parti 216 tioning algorithm [5] as a clustering mechanism for the pro-posed access structure for aggregate queries for transportation networks. Their aggregate query experimentation considered only linear path traversal such as evaluation of an existing path. <p> Although TopoC has the worst performance among the three clustering optimizations, it is still much more effective than RandC. This is contradictory to the suggestion in <ref> [14, 16] </ref> that topological clustering is not effective for highly cyclic graphs. Note that when the buffer size is greater than 512 Kbytes, the difference between the three clustering strategies is becoming small.
Reference: [15] <author> Wei, Y.-C. and Cheng, C.-K, </author> <title> Ratio Cut Partitioning for Hierarchical Designs, </title> <type> Tech. Rep. </type> <institution> CS90-164, Univ. California, </institution> <address> San Diego, </address> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: It is suggested that such a technique may not be very effective for highly cyclic graphs [14, 16]. In this paper, a version of this clustering technique is implemented, benchmarked on real GIS maps, and compared against alternative strategies. Heuristic partitioning techniques <ref> [5, 7, 12, 15] </ref> commonly deployed in VLSI (Very Large Scale Integrated Circuit) design can be used for graph clustering. <p> We abbreviate this clustering technique as TWPC. We now give an overview of the algorithm. The two-way partitioning algorithm: 1 Contracting stage: 1.1 Initially, the network G has only one partition. Based on divide-and-conquer, recursively apply the ratio-cut routine in <ref> [15] </ref> to the partitions whose sizes are greater than a specified value p. 1.2 Based on the resulting partitions, contract G to a condensed graph G 0 such that each partition in G is a node in G 0 and each interconnection link between two partitions is a link between the <p> Patition A subgraph Partition B subgraph x cut Contraction. a b x Partition A subgraph subgraph Partition B cut without Contraction. The ratio-cut routine <ref> [15] </ref> in step 1.1 and the Fiduccia-Mattheyses algorithm [7] in steps 2.2 and 3.3 are two min-cut algorithms based on the two-stage heuristics described previously. The intuition behind the contraction approach is that nodes that are grouped into the same partition by the ratio-cut algorithm [15] are more strongly connected. <p> The ratio-cut routine <ref> [15] </ref> in step 1.1 and the Fiduccia-Mattheyses algorithm [7] in steps 2.2 and 3.3 are two min-cut algorithms based on the two-stage heuristics described previously. The intuition behind the contraction approach is that nodes that are grouped into the same partition by the ratio-cut algorithm [15] are more strongly connected. Treating them as one node reduces the chance of separating them into different partitions by a bad split. For example, in Figure 2, the ratio-cut routine may group the circle nodes and triangle nodes into two different subgraphs A and B.
Reference: [16] <author> Zhao, J.L. and Zaki, A., </author> <title> Spatial Data Traversal in Road Map Databases: A Graph Indexing Approach, </title> <booktitle> Proc. of the 3th Int. Conf. on Information and Knowledge Management, </booktitle> <year> 1994, </year> <pages> pp. 355 - 362. 222 </pages>
Reference-contexts: For attributes that do not change frequently, clustering can be done off-line with no dynamic update costs. Furthermore, clustering is at a level lower than many other path query solutions that focus on auxiliary access structures <ref> [2, 16] </ref> or on algorithmic techniques [1, 3]. Therefore results emerging from the comparative evaluation of our clustering research can be deployed by solutions that do not employ specific link clustering [1, 3, 16]. <p> Therefore results emerging from the comparative evaluation of our clustering research can be deployed by solutions that do not employ specific link clustering <ref> [1, 3, 16] </ref>. In this paper, we first present a clustering technique that partitions links in a GIS map based on the spatial proximity of the origin nodes of the links. We call it Spatial Partition Clustering (SPC). <p> Recomputation of the shortest path tc using such techniques therefore cannot be done frequently, undercutting the correctness of the computed paths. In <ref> [16] </ref>, a graph indexing technique is proposed to improve paging performance for graph traversal by building an auxiliary structure to predict nodes that are to be accessed in the future. [16] gave a cost model but did not present experimental results on real GIS maps. <p> In <ref> [16] </ref>, a graph indexing technique is proposed to improve paging performance for graph traversal by building an auxiliary structure to predict nodes that are to be accessed in the future. [16] gave a cost model but did not present experimental results on real GIS maps. Topological clustering techniques have been previously proposed to reduce the path query processing I/O costs [2, 4, 13]. Pure topological clustering [4, 13] does not apply to cyclic graphs such as GIS maps. <p> In [2], an approximately topological clustering was proposed that handles cyclic graphs using heuristics which break cycles to decompose a graph into acyclic subgraphs. It is suggested that such a technique may not be very effective for highly cyclic graphs <ref> [14, 16] </ref>. In this paper, a version of this clustering technique is implemented, benchmarked on real GIS maps, and compared against alternative strategies. Heuristic partitioning techniques [5, 7, 12, 15] commonly deployed in VLSI (Very Large Scale Integrated Circuit) design can be used for graph clustering. <p> Although TopoC has the worst performance among the three clustering optimizations, it is still much more effective than RandC. This is contradictory to the suggestion in <ref> [14, 16] </ref> that topological clustering is not effective for highly cyclic graphs. Note that when the buffer size is greater than 512 Kbytes, the difference between the three clustering strategies is becoming small.
References-found: 16

