URL: http://www.pdos.lcs.mit.edu/~kaashoek/fbs.ps
Refering-URL: http://www.pdos.lcs.mit.edu/~kaashoek/seminar.html
Root-URL: 
Email: bressoud@isis.com  fbs@cs.cornell.edu  
Title: Hypervisor-based Fault-tolerance  
Author: Thomas C. Bressoud Fred B. Schneider 
Address: 55 Fairbanks Blvd. Marlborough, MA 01752  Ithaca, New York 14853  
Affiliation: Isis Distributed Systems  Computer Science Department Cornell University  
Abstract: Protocols to implement a fault-tolerant computing system are described. These protocols augment the hypervisor of a virtual-machine manager and coordinate a primary virtual machine with its backup. No modifications to the hardware, operating system, or application programs are required. A prototype system was constructed for HP's PA-RISC instruction-set architecture. Even though the prototype was not carefully tuned, it ran programs about a factor of 2 slower than a bare machine would. 
Abstract-found: 1
Intro-found: 1
Reference: [AD76] <author> Alsberg, </author> <title> P.A. and J.D. Day. A principle for resilient sharing of distributed resources. </title> <booktitle> Proc. Second International Conference on Software Engineering (San Francisco, Calif., </booktitle> <month> Oct </month> <year> 1976), </year> <pages> 627-644. </pages>
Reference-contexts: If messages can be lost, then the sending hypervisor must wait for an acknowledgment before proceedinga round-trip communications delay that cannot be eliminated. The actual implementation of our scheme resembles the primary/backup approach to fault-tolerance <ref> [AD76] </ref>. One replica is designated the primary and the others are designated backups. All non-deterministic choices are made by the hypervisor at the primary and all interactions with the environment are through the primary 2 . If the primary fails, then some backup assumes its responsibilities.
Reference: [B87] <author> Bernstein, P.A., V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1987 </year>
Reference-contexts: Or, the programmers must be constrained to use a given inter face (e.g. causal group broadcasts [B93] ) or abstraction (e.g. transactions <ref> [B87] </ref>). These problems drove us to explore alternatives to the hardware, the operating system, and the application programs as the place for implementing replica coordination in a computing system.
Reference: [B93] <author> Birman, </author> <title> K.P. The process group approach to reliable distributed computing. </title> <journal> Communications of the ACM 36, </journal> <month> 12 (Dec. </month> <year> 1993), </year> <pages> 37-52. </pages>
Reference-contexts: Or, the programmers must be constrained to use a given inter face (e.g. causal group broadcasts <ref> [B93] </ref> ) or abstraction (e.g. transactions [B87]). These problems drove us to explore alternatives to the hardware, the operating system, and the application programs as the place for implementing replica coordination in a computing system.
Reference: [B81] <author> Bartlett, J.F. </author> <title> A nonstop kernel. </title> <booktitle> Proc. Eighth Symposium on Operating Systems Principles (Asilomar, Calif., </booktitle> <month> Dec. </month> <year> 1981), </year> <pages> 22-29. </pages>
Reference-contexts: In some systems, like one offered by Stratus, the same inputs are presented by the bus to the replicas and the bus is driven by only a single replica (even though all replicas generate the same outputs) [SS92]. In the pioneering work of Tandem <ref> [B81] </ref>, the applications themselves are responsible for ensuring coordination between the processes comprising a process-pair, the unit of replication there. Other systems exploit a bus or broadcast network to implement fault-tolerant processes on top of an operating system. The work described in [BBG83] [BBGHO89], and in [PP83] exemplify this approach.
Reference: [B96] <author> Bressoud, Thomas C. </author> <title> Hypervisor-based Fault-tolerance. </title> <type> Ph.D. Dissertation. </type> <institution> Computer Science Department, Cornell Universtity, </institution> <address> Ithaca, New York. Expected, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: See <ref> [B96] </ref> for details. -11 mately 442 msec an an HP 9000/720 processor 6 , as follows. 25 msec hypervisor entry code 42 msec Ethernet controller setup 141 msec transmission time for [end, E] and backup's acknowledgment 220 msec await backup's receipt of [end, E] and sending acknowledgment 14 msec hypervisor exit <p> Table 2 shows predicted normalized performance for the three workloads. Details can be found in <ref> [B96] </ref>. Workload Epoch Len CPU Intense Write Intense Read Intense Old New Old New Old New 2K 11.83 4.49 1.71 1.66 2.10 1.76 8K 3.83 2.20 1.64 1.64 1.98 1.70 Table 1. Normalized Performance of Original and Revised Protocol -16 Workload Norm. Perf.
Reference: [BBG83] <author> Borg, A., J. Baumbach, and S. Glazer. </author> <title> A message system for supporting fault tolerance. </title> <booktitle> Proc. Ninth Symposium on Operating Systems Principles (Bretton Woods, </booktitle> <address> New Hampshire, </address> <month> Oct. </month> <year> 1983), </year> <pages> 90-99. </pages>
Reference-contexts: In the pioneering work of Tandem [B81], the applications themselves are responsible for ensuring coordination between the processes comprising a process-pair, the unit of replication there. Other systems exploit a bus or broadcast network to implement fault-tolerant processes on top of an operating system. The work described in <ref> [BBG83] </ref> [BBGHO89], and in [PP83] exemplify this approach. Novell's NetWare [MPN92] [MMP94] is the most similar to our system. Both are structured as state machines and both employ a primary-backup scheme with failovers.
Reference: [BBGHO89] <author> Borg, A., W. Blau, W. Graetsch, F. Herrmann, and W. Oberle. </author> <title> Fault tolerance under UNIX. </title> <journal> ACM Tr ansactions on Computer Systems 3,1 (Feb 1985), </journal> <pages> 63-75. </pages> <month> -18 </month>
Reference-contexts: In the pioneering work of Tandem [B81], the applications themselves are responsible for ensuring coordination between the processes comprising a process-pair, the unit of replication there. Other systems exploit a bus or broadcast network to implement fault-tolerant processes on top of an operating system. The work described in [BBG83] <ref> [BBGHO89] </ref>, and in [PP83] exemplify this approach. Novell's NetWare [MPN92] [MMP94] is the most similar to our system. Both are structured as state machines and both employ a primary-backup scheme with failovers. However, in NetWare, a rigid internal structure is forced on the operating system, including the proscription of preemption.
Reference: [CMJ88] <author> Cutts, Richard W., Nikhil A. Mehta, and Douglas E. Jewett. </author> <title> Multiple processor system having shared memory with private-write capability. </title> <type> U.S. Patent 4,965,717. </type> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: Despite the engineering and time-to-market costs, manufacturers continue to design and sell processors that implement replica coordination in hardware. A design from Tandem <ref> [CMJ88] </ref> and DEC's VAXft 3000 are examples. See [SS92] for a survey of such hardware-implemented fault-tolerant computing systems.
Reference: [C95] <author> Coweles, R. </author> <title> Private communication. </title>
Reference-contexts: This leads to the following I/O benchmarks. A large file is pre-allocated on the disk. Then, for measuring the performance of reads, the benchmark randomly selects a disk block, issues a read, and awaits the data. This 7 Anecdotal evidence <ref> [C95] </ref> for a mature VM/370 installation places normalized performance at around 1.40. The significantly higher cost for VM/370 is undoubtedly due to supporting multiple virtual machines as well as differences in the workload. -13 is iterated 2048 times.
Reference: [E95] <author> Elnozahy, </author> <title> E.N. An efficient technique for tracking nondeterministic execution and its applications. </title> <type> Technical Report CMU-CS-95-157, </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: We believe that we have succeeded. Recent work of <ref> [E95] </ref> (that we just learned about) is now exploring a variety of ways that a recovery register can be employed in operating system and applications software, including support for fault-tolerance without introducing a hypervisor.
Reference: [G74] <author> Goldberg, Robert P. </author> <title> Survey of virtual machine research. </title> <journal> Computer Magazine (June 1974), </journal> <pages> 34-45. </pages>
Reference-contexts: Perhaps the best known hypervisor is CP-67 [MS70], developed by IBM Corp. for 360/67 and later evolved into VM/370 [IBM72] for System 370 mainframes. Hypervisors for other machines have also been constructed [PK75] [K82]. An excellent survey on virtual machines appears in <ref> [G74] </ref>. Problems (1) through (3) above can be addressed by using a hypervisor to implement replica coordination. Replica coordination implemented in a hypervisor instantly becomes available to all hardware realizations of the given instruction-set architecture, including realizations that do not exist when the hypervisor was built.
Reference: [G79] <author> Gray, J. </author> <title> Notes on Data Base Operating Systems. Operating Systems: An Advanced Course, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 60, </volume> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1978, </year> <pages> 393-481. </pages>
Reference-contexts: The output of this mechanism ideally is a sequence that would be produced by a single fault-tolerant state machine. This ideal is unattainable in our system, because all outputs during a given epoch are produced by a single state machine replica. In particular, the unsolvability of the two-generals problem <ref> [G79] </ref> implies that no protocol can exist to inform one replica whether another replica produced an output before failing, since distinct operations are required (i) for a replica to perform an output and (ii) for one replica to communicate with another. 4 Consequently, there is no way for a state machine <p> We saw at the end of 2.1 that failures may prevent an interrupt that was delivered by the primary's hypervisor from reaching the backup's hypervisor. This cannot be avoided, again demonstrated by reduction to the two-generals problem <ref> [G79] </ref>. Since arbitrary constraints on interrupt delivery could not be satisfied, our solution was to define a set of constraints for I/O interrupt delivery that could be satisfied. We did so by giving a model that all I/O devices were expected to satisfy.
Reference: [G94] <author> Gleeson, B. </author> <title> Fault tolerant computer system with provision for handling external events. </title> <type> U.S. Patent 5,363,503. </type> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Instruction-Stream Interrupt Assumption: A mechanism is available to invoke the hypervisor when a specified point in the instruction stream is reached. In addition to the recovery register on HP's PA-RISC, the DEC Alpha [S92] performance counters could be adapted, as could counters for any of a variety of events <ref> [G94] </ref>. Object-code editing [ML89] [GLW95] gives yet another way to ensure that the primary and backup hypervisors are invoked at identical points in a virtual machine's instruction stream.
Reference: [GLW95] <author> Graham, Susan L., Steven Lucco, and Robert Wahbe. </author> <title> Adaptable binary programs. </title> <booktitle> Proc. 1995 Usenix Winter Conference (New Orleans, Lousiana, </booktitle> <month> Jan. </month> <year> 1995), </year> <pages> 315-325. </pages>
Reference-contexts: In addition to the recovery register on HP's PA-RISC, the DEC Alpha [S92] performance counters could be adapted, as could counters for any of a variety of events [G94]. Object-code editing [ML89] <ref> [GLW95] </ref> gives yet another way to ensure that the primary and backup hypervisors are invoked at identical points in a virtual machine's instruction stream. In this scheme, the object code for the operating system kernel and all user processes is edited so that the hypervisor is invoked periodically.
Reference: [HP87] <institution> Precision Architecture and Instruction Reference Manual. Part Number 09740-90014. Hewlett Packard Corporation, Cupertino, Calif., </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: These protocols ensure that the sequence of instructions executed by two virtual machines running on different physical processors are identical. The protocols also coordinate I/O issued by these virtual machines. Our prototype is discussed in 3. To construct this prototype, we implemented a hypervisor for HP's PA-RISC architecture <ref> [HP87] </ref> and augmented that hypervisor with replica-coordination protocols. We report in 4 on our prototype's performance. In addition to discussing performance measurements, we consider variations that might improve performance. Next, 5 discusses related work; a summary and future research directions are given in 6. 2. <p> This is because instruction-execution timing on most modern processors is unpredictable. We must employ some other mechanism for transferring control to the hypervisor when a virtual machine reaches a predetermined point in its instruction stream. The recovery register on HP's PA-RISC processors <ref> [HP87] </ref> is a register that is decremented each time an instruction completes; an interrupt is caused when the recovery register becomes negative. With a recovery register, a hypervisor can run a virtual machine for an epoch comprising a fixed number of virtual-machine instructions and then receive control.
Reference: [IBM72] <institution> IBM Virtual Machine Facility/370 Planning Guide Publication No. GC20-1801-0. IBM Corporation, </institution> <address> White Plains, New York. </address>
Reference-contexts: Because the virtual machine's instruction-set architecture is indistinguishable from the bare hardware, software run on a virtual machine cannot determine whether a hypervisor is present. Perhaps the best known hypervisor is CP-67 [MS70], developed by IBM Corp. for 360/67 and later evolved into VM/370 <ref> [IBM72] </ref> for System 370 mainframes. Hypervisors for other machines have also been constructed [PK75] [K82]. An excellent survey on virtual machines appears in [G74]. Problems (1) through (3) above can be addressed by using a hypervisor to implement replica coordination.
Reference: [K82] <author> Karger, Paul A. </author> <title> Preliminary design of a VAX-11 virtual machine monitor security kernel. </title> <institution> DEC TR-126. Digital Equipment Corporation, Hudson, </institution> <address> Mass., </address> <month> Jan. </month> <year> 1982. </year>
Reference-contexts: Perhaps the best known hypervisor is CP-67 [MS70], developed by IBM Corp. for 360/67 and later evolved into VM/370 [IBM72] for System 370 mainframes. Hypervisors for other machines have also been constructed [PK75] <ref> [K82] </ref>. An excellent survey on virtual machines appears in [G74]. Problems (1) through (3) above can be addressed by using a hypervisor to implement replica coordination.
Reference: [L78] <author> Lamport, L. </author> <title> Time, clocks and the ordering of events in a distributed system. </title> <type> CACM 21, </type> <month> 7 (July </month> <year> 1978), </year> <pages> 558-565. </pages>
Reference-contexts: Next, 5 discusses related work; a summary and future research directions are given in 6. 2. Replica-Coordination Protocols The theory of managing replicated, deterministic state machines is well understood. It is called the state machine approach in <ref> [L78] </ref> [S90]. A deterministic state machine M reads a sequence of commands, where each command causes a state transition that is completely determined by the command and the current state of M . State transitions may produce outputs.
Reference: [ML89] <author> Mellor-Crummey, J.M. and T.J. LeBlanc. </author> <title> A software instruction counter. </title> <booktitle> Proc. 3rd International Conference on Architectural Support for Programming Languages and Operating Systems (Boston, </booktitle> <address> Mass., </address> <month> April </month> <year> 1989), </year> <pages> 78-86. </pages>
Reference-contexts: In addition to the recovery register on HP's PA-RISC, the DEC Alpha [S92] performance counters could be adapted, as could counters for any of a variety of events [G94]. Object-code editing <ref> [ML89] </ref> [GLW95] gives yet another way to ensure that the primary and backup hypervisors are invoked at identical points in a virtual machine's instruction stream. In this scheme, the object code for the operating system kernel and all user processes is edited so that the hypervisor is invoked periodically.
Reference: [MMP94] <author> Major, Drew, Greg Minshall, and Kyle Powell. </author> <title> An overview of the NetWare Operating System. </title> <booktitle> Proc. 1994 Winter USENIX (San Francisco, </booktitle> <address> CA, </address> <month> Jan. </month> <year> 1994), </year> <pages> 355-372. </pages>
Reference-contexts: Other systems exploit a bus or broadcast network to implement fault-tolerant processes on top of an operating system. The work described in [BBG83] [BBGHO89], and in [PP83] exemplify this approach. Novell's NetWare [MPN92] <ref> [MMP94] </ref> is the most similar to our system. Both are structured as state machines and both employ a primary-backup scheme with failovers. However, in NetWare, a rigid internal structure is forced on the operating system, including the proscription of preemption.
Reference: [MPN92] <author> Major, Drew, Kyle Powell, and Dale Nelbaur. </author> <title> Fault tolerant computer system. </title> <type> U.S. Patent 5,157,663. </type> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: Other systems exploit a bus or broadcast network to implement fault-tolerant processes on top of an operating system. The work described in [BBG83] [BBGHO89], and in [PP83] exemplify this approach. Novell's NetWare <ref> [MPN92] </ref> [MMP94] is the most similar to our system. Both are structured as state machines and both employ a primary-backup scheme with failovers. However, in NetWare, a rigid internal structure is forced on the operating system, including the proscription of preemption.
Reference: [MS70] <author> Meyer, </author> <title> P.A. and L.H. Seawright. A virtual machine time-sharing system. </title> <journal> IBM Systems Journal 9,3 (1970), </journal> <pages> 199-218. </pages>
Reference-contexts: Because the virtual machine's instruction-set architecture is indistinguishable from the bare hardware, software run on a virtual machine cannot determine whether a hypervisor is present. Perhaps the best known hypervisor is CP-67 <ref> [MS70] </ref>, developed by IBM Corp. for 360/67 and later evolved into VM/370 [IBM72] for System 370 mainframes. Hypervisors for other machines have also been constructed [PK75] [K82]. An excellent survey on virtual machines appears in [G74].
Reference: [PK74] <author> Popek, G.J. and C. Kline. </author> <title> Verifiable secure operating system software. </title> <booktitle> AFIPS Conference Proceedings, </booktitle> <year> 1974. </year>
Reference: [PK75] <author> Popek, G.J. and C. Kline. </author> <title> The PDP-11 virtual machine architecture: A case study. </title> <booktitle> Proc. Fifth Symposium on Operating Systems Principles (Austin, </booktitle> <address> Texas, </address> <month> Nov. </month> <year> 1975), </year> <pages> 97-105. </pages>
Reference-contexts: Perhaps the best known hypervisor is CP-67 [MS70], developed by IBM Corp. for 360/67 and later evolved into VM/370 [IBM72] for System 370 mainframes. Hypervisors for other machines have also been constructed <ref> [PK75] </ref> [K82]. An excellent survey on virtual machines appears in [G74]. Problems (1) through (3) above can be addressed by using a hypervisor to implement replica coordination.
Reference: [PP83] <author> Powell, </author> <title> M.L. and D.L. Presotto. Publishing: A reliable broadcast communication mechanism. </title> <booktitle> Proc. Ninth Symposium on Operating Systems Principles (Bretton Woods, </booktitle> <address> New Hampshire, </address> <month> Oct. </month> <year> 1983), </year> <pages> 100-109. </pages>
Reference-contexts: Other systems exploit a bus or broadcast network to implement fault-tolerant processes on top of an operating system. The work described in [BBG83] [BBGHO89], and in <ref> [PP83] </ref> exemplify this approach. Novell's NetWare [MPN92] [MMP94] is the most similar to our system. Both are structured as state machines and both employ a primary-backup scheme with failovers. However, in NetWare, a rigid internal structure is forced on the operating system, including the proscription of preemption.
Reference: [SS83] <author> Schlichting, R. and F.B. Schneider. </author> <title> Failstop processors: An approach to designing fault-tolerant computing systems. </title> <journal> ACM Transactions on Computer Systems 1,3 (Aug. </journal> <year> 1983), </year> <pages> 222-238. </pages>
Reference-contexts: A consequence of this primary/backup architecture is that all replicas must have access to the system's environment. 2 The primary/backup approach works only when processors exhibit failstop behaviorin response to a failure, the primary must halt and do so detectably <ref> [SS83] </ref>. Arbitrary behavior in response to a failure is not tolerated. By using timeouts, today's hardware can appear to approximate the failstop model with sufficient fidelity so that it is reasonable to make this assumption unless the system must satisfy the most stringent fault-tolerance requirements.
Reference: [S90] <author> Schneider, </author> <title> F.B. Implementing fault-tolerant services using the state machine approach: A tutorial. </title> <journal> ACM Computing Surveys 22,4 (December 1990), </journal> <pages> 299-319. </pages>
Reference-contexts: Next, 5 discusses related work; a summary and future research directions are given in 6. 2. Replica-Coordination Protocols The theory of managing replicated, deterministic state machines is well understood. It is called the state machine approach in [L78] <ref> [S90] </ref>. A deterministic state machine M reads a sequence of commands, where each command causes a state transition that is completely determined by the command and the current state of M . State transitions may produce outputs.
Reference: [S92] <author> Sites, Richard. </author> <title> Alpha Architecture Reference Manual. </title> <publisher> Digital Press, </publisher> <address> Bedford, Mass., </address> <year> 1992. </year>
Reference-contexts: A recovery register or some similar mechanism is, therefore, assumed. Instruction-Stream Interrupt Assumption: A mechanism is available to invoke the hypervisor when a specified point in the instruction stream is reached. In addition to the recovery register on HP's PA-RISC, the DEC Alpha <ref> [S92] </ref> performance counters could be adapted, as could counters for any of a variety of events [G94]. Object-code editing [ML89] [GLW95] gives yet another way to ensure that the primary and backup hypervisors are invoked at identical points in a virtual machine's instruction stream.
Reference: [SS92] <author> Siewiorek, D.P. and Robert S. Swarz. </author> <title> Reliable Computer System Design and Evaluation. </title> <publisher> Digital Press, </publisher> <address> Bedford, Mass. </address> <year> 1992. </year>
Reference-contexts: Despite the engineering and time-to-market costs, manufacturers continue to design and sell processors that implement replica coordination in hardware. A design from Tandem [CMJ88] and DEC's VAXft 3000 are examples. See <ref> [SS92] </ref> for a survey of such hardware-implemented fault-tolerant computing systems. In some systems, like one offered by Stratus, the same inputs are presented by the bus to the replicas and the bus is driven by only a single replica (even though all replicas generate the same outputs) [SS92]. <p> See <ref> [SS92] </ref> for a survey of such hardware-implemented fault-tolerant computing systems. In some systems, like one offered by Stratus, the same inputs are presented by the bus to the replicas and the bus is driven by only a single replica (even though all replicas generate the same outputs) [SS92]. In the pioneering work of Tandem [B81], the applications themselves are responsible for ensuring coordination between the processes comprising a process-pair, the unit of replication there. Other systems exploit a bus or broadcast network to implement fault-tolerant processes on top of an operating system.
Reference: [TL93] <author> Thekkath, C.A. and Hank M. Levy. </author> <title> Low-Latency Communication on High-Speed Networks. </title> <journal> ACM Tr ansactions on Computer Systems 11,2 (May 1993), </journal> <pages> 179-203. </pages> <month> -19 </month>
Reference-contexts: 25 msec hypervisor entry code 42 msec Ethernet controller setup 141 msec transmission time for [end, E] and backup's acknowledgment 220 msec await backup's receipt of [end, E] and sending acknowledgment 14 msec hypervisor exit code Our Ethernet controller-setup and transmission measurements are consistent with the experimental data reported in <ref> [TL93] </ref>.
References-found: 30

