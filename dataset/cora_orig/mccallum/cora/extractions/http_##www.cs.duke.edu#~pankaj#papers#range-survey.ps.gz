URL: http://www.cs.duke.edu/~pankaj/papers/range-survey.ps.gz
Refering-URL: http://www.cs.duke.edu/CGC/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: CS-1996-05 Range Searching 1  
Author: Pankaj K. Agarwal 
Date: September 8, 1996  
Address: 27708-0129  
Affiliation: Department of Computer Science Duke University Durham, North Carolina  
Abstract: 1 Work ion this paper has been supported by National Science Foundation Grant CCR-93-01259, by an Army Research Office MURI grant DAAH04-96-1-0013, by a Sloan fellowship, by an NYI award, and by matching funds from Xerox Corporation. 2 Department of Computer Science, Duke University, pankaj@cs.duke.edu 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, </author> <title> Ray shooting and other applications of spanning trees with low stabbing number, </title> <journal> SIAM J. Comput., </journal> <volume> 21 (1992), </volume> <pages> 540-570. </pages>
Reference-contexts: But this technique does not give a linear-size data structure with O (n 11=d log n) query time, for d 3, under any reasonable model of computation (e.g., pointer machine, RAM), See <ref> [1, 82, 112] </ref> for other applications of spanning trees with low stabbing number. Matousek and Welzl [81] gave an entirely different algorithm for the halfspace range-counting problem in the plane, using a combinatorial result of Erd-os and Szekeres [57].
Reference: [2] <author> P. K. Agarwal, B. Aronov, and M. Sharir, </author> <title> Computing envelopes in four dimensions with applications, </title> <booktitle> Proc. 10th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1994, </year> <pages> pp. 348-358. </pages>
Reference-contexts: n= p m [8, 47] Counting Circles n 2+" log n [13] Counting Circular arcs m n=m 1=3 [13] Counting Planes m n=m 1=3 [5] Counting d = 3 Triangles m n=m 1=4 [6] Counting Spheres m n=m 1=4 [6] Counting Spheres n 3+" (k + 1) log 2 n <ref> [2] </ref> Reporting A special case of segment intersection searching, in which the objects are horizontal segments in the plane and query ranges are vertical segments, has been widely studied. <p> [13] Disjoint arcs n p convex polytope n log n [53] c-oriented polytopes n log n [51] s convex polytopes s 2 n 2+" log 2 n [10] d = 3 Halfplanes m n= p Terrain m n= p Triangles m n=m 1=4 [6] Spheres n 3+" log 2 n <ref> [2] </ref> Hyperplanes m n=m 1=d [5] d &gt; 3 Hyperplanes n d log n [5] Convex polytope m n=m 1=bd=2c [5, 80] Convex polytope n bd=2c log n [80] can be reported quickly.
Reference: [3] <author> P. K. Agarwal, B. Aronov, and S. Suri, </author> <title> Line stabbing bounds in three dimensions, </title> <booktitle> Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1995, </year> <pages> pp. 267-276. </pages>
Reference-contexts: Hershberger and Suri [69] showed that a triangulation with O (log n) query time can be constructed when S is the boundary of a simple polygon in the plane. See <ref> [3, 91, 54, 78] </ref> and the references therein for other ray-shooting results using this approach. Agarwal et al. [3] proved worst-case bounds for many cases on the number of cells in the subdivision that a line can intersect. <p> Hershberger and Suri [69] showed that a triangulation with O (log n) query time can be constructed when S is the boundary of a simple polygon in the plane. See [3, 91, 54, 78] and the references therein for other ray-shooting results using this approach. Agarwal et al. <ref> [3] </ref> proved worst-case bounds for many cases on the number of cells in the subdivision that a line can intersect.
Reference: [4] <author> P. K. Agarwal, A. Efrat, and M. Sharir, </author> <title> Vertical decomposition of shallow levels in 3-dimensional arrangements and its applications, </title> <booktitle> Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1995, </year> <pages> pp. 39-50. </pages>
Reference-contexts: n log n + k [14] Reporting d = 2 Triangles m n m log 3 n [8] Counting Fat triangles n log 2 n log 3 n + k [73] Reporting Tarski cells n 2+" log n [37] Counting d = 3 Functions n 1+" log n + k <ref> [4] </ref> Reporting Simplices m n m 1=d log d+1 n Counting d 3 Balls n d+" log n [6] Counting Balls m n m 1=dd=2e log c n + k [79] Reporting Tarski cells n 2d3+" log n [37] Counting Point location in arrangement of surfaces, especially determining whether a query
Reference: [5] <author> P. K. Agarwal and J. Matousek, </author> <title> Ray shooting and parametric search, </title> <journal> SIAM J. Com-put., </journal> <volume> 22 (1993), </volume> <pages> 794-806. </pages> <note> 24 Pankaj K. Agarwal </note>
Reference-contexts: Segment intersection searching d Objects S (n) Q (n) Source Notes Simple polygon n (k + 1) log n [69] Reporting d = 2 Segments m n= p m [8, 47] Counting Circles n 2+" log n [13] Counting Circular arcs m n=m 1=3 [13] Counting Planes m n=m 1=3 <ref> [5] </ref> Counting d = 3 Triangles m n=m 1=4 [6] Counting Spheres m n=m 1=4 [6] Counting Spheres n 3+" (k + 1) log 2 n [2] Reporting A special case of segment intersection searching, in which the objects are horizontal segments in the plane and query ranges are vertical segments, <p> Recently, efficient solutions to many other geometric problems have also been developed using ray-shooting data structures. A general approach to the ray-shooting problem, using segment intersection-detection structures and Megiddo's parametric searching technique [87], was proposed by Agarwal and Matousek <ref> [5] </ref>. The basic idea of their approach is as follows. Suppose we have a segment intersection-detection data structure for S, based on partition trees. Let be a query ray. <p> convex polytope n log n [53] c-oriented polytopes n log n [51] s convex polytopes s 2 n 2+" log 2 n [10] d = 3 Halfplanes m n= p Terrain m n= p Triangles m n=m 1=4 [6] Spheres n 3+" log 2 n [2] Hyperplanes m n=m 1=d <ref> [5] </ref> d &gt; 3 Hyperplanes n d log n [5] Convex polytope m n=m 1=bd=2c [5, 80] Convex polytope n bd=2c log n [80] can be reported quickly. This query can be formulated as an instance of the ray-shooting problem in a convex polyhedron in R d+1 , as follows. <p> log n [51] s convex polytopes s 2 n 2+" log 2 n [10] d = 3 Halfplanes m n= p Terrain m n= p Triangles m n=m 1=4 [6] Spheres n 3+" log 2 n [2] Hyperplanes m n=m 1=d <ref> [5] </ref> d &gt; 3 Hyperplanes n d log n [5] Convex polytope m n=m 1=bd=2c [5, 80] Convex polytope n bd=2c log n [80] can be reported quickly. This query can be formulated as an instance of the ray-shooting problem in a convex polyhedron in R d+1 , as follows. <p> s 2 n 2+" log 2 n [10] d = 3 Halfplanes m n= p Terrain m n= p Triangles m n=m 1=4 [6] Spheres n 3+" log 2 n [2] Hyperplanes m n=m 1=d [5] d &gt; 3 Hyperplanes n d log n [5] Convex polytope m n=m 1=bd=2c <ref> [5, 80] </ref> Convex polytope n bd=2c log n [80] can be reported quickly. This query can be formulated as an instance of the ray-shooting problem in a convex polyhedron in R d+1 , as follows.
Reference: [6] <author> P. K. Agarwal and J. Matousek, </author> <title> On range searching with semialgebraic sets, </title> <journal> Discrete Comput. Geom., </journal> <volume> 11 (1994), </volume> <pages> 393-418. </pages>
Reference-contexts: If the points in S lie on a k-dimensional algebraic surface of constant degree, a simplex range-counting query can be answered in time O (n 1fl ) using linear space, where fl = 1= b (d + k)=2c <ref> [6] </ref>. Since the query time of a linear-size simplex range-searching data structure is only n 1=d factor faster than the naive method, researchers have developed practical data structures that work well most of the time. <p> We will refer to the range-searching problem in which the ranges are from the set f as the f -range searching. TABLE 6 Semialgebraic range counting d Range S (n) Q (n) Source Notes d = 2 Disk n log n p Tarski cell n n 1=2+" <ref> [6] </ref> Partition tree d 3 Tarski cell n n 1 1 2d3 +" [6] Partition tree Tarski cell n n 1 1 +" [6] Linearization One approach to answer f -range queries is to use linearization, originally proposed by Yao and Yao [118]. <p> TABLE 6 Semialgebraic range counting d Range S (n) Q (n) Source Notes d = 2 Disk n log n p Tarski cell n n 1=2+" <ref> [6] </ref> Partition tree d 3 Tarski cell n n 1 1 2d3 +" [6] Partition tree Tarski cell n n 1 1 +" [6] Linearization One approach to answer f -range queries is to use linearization, originally proposed by Yao and Yao [118]. <p> TABLE 6 Semialgebraic range counting d Range S (n) Q (n) Source Notes d = 2 Disk n log n p Tarski cell n n 1=2+" <ref> [6] </ref> Partition tree d 3 Tarski cell n n 1 1 2d3 +" [6] Partition tree Tarski cell n n 1 1 +" [6] Linearization One approach to answer f -range queries is to use linearization, originally proposed by Yao and Yao [118]. <p> Agarwal and Matousek <ref> [6] </ref> have described an algorithm for computing a linearization of smallest dimension. A f -range query can now be answered using a k-dimensional halfspace range-searching data structure. <p> One of the most widely used linearization in computational geometry is the so-called Plucker coordinates, which map a line in R 3 to a point in R 5 ; see [39, 105] for more details on Plucker coordinates. Agarwal and Matousek <ref> [6] </ref> have also proposed another approach to answer f - range queries by extending Theorem 4 to Tarski cells and by constructing partition trees using this extension. Table 6 summarizes the known results on f range-counting queries; here is the dimension of linearization. <p> Counting Fat triangles n log 2 n log 3 n + k [73] Reporting Tarski cells n 2+" log n [37] Counting d = 3 Functions n 1+" log n + k [4] Reporting Simplices m n m 1=d log d+1 n Counting d 3 Balls n d+" log n <ref> [6] </ref> Counting Balls m n m 1=dd=2e log c n + k [79] Reporting Tarski cells n 2d3+" log n [37] Counting Point location in arrangement of surfaces, especially determining whether a query point lies above a given set of regions of the form x d+1 f (x 1 ; : <p> Source Notes Simple polygon n (k + 1) log n [69] Reporting d = 2 Segments m n= p m [8, 47] Counting Circles n 2+" log n [13] Counting Circular arcs m n=m 1=3 [13] Counting Planes m n=m 1=3 [5] Counting d = 3 Triangles m n=m 1=4 <ref> [6] </ref> Counting Spheres m n=m 1=4 [6] Counting Spheres n 3+" (k + 1) log 2 n [2] Reporting A special case of segment intersection searching, in which the objects are horizontal segments in the plane and query ranges are vertical segments, has been widely studied. <p> + 1) log n [69] Reporting d = 2 Segments m n= p m [8, 47] Counting Circles n 2+" log n [13] Counting Circular arcs m n=m 1=3 [13] Counting Planes m n=m 1=3 [5] Counting d = 3 Triangles m n=m 1=4 <ref> [6] </ref> Counting Spheres m n=m 1=4 [6] Counting Spheres n 3+" (k + 1) log 2 n [2] Reporting A special case of segment intersection searching, in which the objects are horizontal segments in the plane and query ranges are vertical segments, has been widely studied. <p> n= p Circlular arcs n n=m 1=3 [13] Disjoint arcs n p convex polytope n log n [53] c-oriented polytopes n log n [51] s convex polytopes s 2 n 2+" log 2 n [10] d = 3 Halfplanes m n= p Terrain m n= p Triangles m n=m 1=4 <ref> [6] </ref> Spheres n 3+" log 2 n [2] Hyperplanes m n=m 1=d [5] d &gt; 3 Hyperplanes n d log n [5] Convex polytope m n=m 1=bd=2c [5, 80] Convex polytope n bd=2c log n [80] can be reported quickly.
Reference: [7] <author> P. K. Agarwal and J. Matousek, </author> <title> Dynamic half-space range reporting and its applications, </title> <journal> Algorithmica, </journal> <volume> 14 (1995), </volume> <pages> 325-345. </pages>
Reference-contexts: Mulmuley [92] has shown that there exists a dynamic halfspace range-reporting data structure that can process a random update sequence of length m in expected time O (m bd=2c+" ) and can answer a halfspace range-reporting query in time O (k log n). Agarwal and Matousek <ref> [7] </ref> developed a dynamic data structure for halfspace range-reporting that can process an arbitrary update sequence efficiently; its update time is O (n bd=2c1+" ), and it can answer a query in time O (log n + k).
Reference: [8] <author> P. K. Agarwal and M. Sharir, </author> <title> Applications of a new partition scheme, </title> <journal> Discrete Com-put. Geom., </journal> <volume> 9 (1993), </volume> <pages> 11-38. </pages>
Reference-contexts: Although these techniques do not extend to deletions, many range-searching data structures, such as orthogonal and simplex range-searching structures, can handle deletions at polylogarithmic or n " overhead in query and update time, by exploiting the fact that a point is stored at roughly S (n)=n nodes <ref> [8] </ref>. Table 7 summarizes the known results on dynamic 2D orthogonal range-searching data structures; these results can be extended to higher dimensions at a cost of log d2 n factor in the storage, in the query time, and in the update time. <p> TABLE 9 Point intersection searching d Objects S (n) Q (n) Source Notes Disks m (n 4=3 =m 2=3 ) log (m=n) Counting Disks n log n log n + k [14] Reporting d = 2 Triangles m n m log 3 n <ref> [8] </ref> Counting Fat triangles n log 2 n log 3 n + k [73] Reporting Tarski cells n 2+" log n [37] Counting d = 3 Functions n 1+" log n + k [4] Reporting Simplices m n m 1=d log d+1 n Counting d 3 Balls n d+" log n <p> TABLE 10 Segment intersection searching d Objects S (n) Q (n) Source Notes Simple polygon n (k + 1) log n [69] Reporting d = 2 Segments m n= p m <ref> [8, 47] </ref> Counting Circles n 2+" log n [13] Counting Circular arcs m n=m 1=3 [13] Counting Planes m n=m 1=3 [5] Counting d = 3 Triangles m n=m 1=4 [6] Counting Spheres m n=m 1=4 [6] Counting Spheres n 3+" (k + 1) log 2 n [2] Reporting A special
Reference: [9] <author> P. K. Agarwal and M. Sharir, </author> <title> Ray shooting amidst convex polygons in 2D, </title> <journal> J. </journal> <note> Algorithms, XX (1996), to appear. </note>
Reference-contexts: a point in S closest to a query point ~ Range Searching 21 TABLE 11 Ray shooting d Objects S (n) Q (n) Source Simple polygon n log n [69] s disjoint simple polygons n p log s log n s convex polygons sn log s log s log n <ref> [9] </ref> d = 2 Segments m n= p Circlular arcs n n=m 1=3 [13] Disjoint arcs n p convex polytope n log n [53] c-oriented polytopes n log n [51] s convex polytopes s 2 n 2+" log 2 n [10] d = 3 Halfplanes m n= p Terrain m n=
Reference: [10] <author> P. K. Agarwal and M. Sharir, </author> <title> Ray shooting amidst convex polytopes in three dimensions, </title> <journal> SIAM J. Comput., </journal> <volume> 25 (1996), </volume> <pages> 100-116. </pages>
Reference-contexts: s convex polygons sn log s log s log n [9] d = 2 Segments m n= p Circlular arcs n n=m 1=3 [13] Disjoint arcs n p convex polytope n log n [53] c-oriented polytopes n log n [51] s convex polytopes s 2 n 2+" log 2 n <ref> [10] </ref> d = 3 Halfplanes m n= p Terrain m n= p Triangles m n=m 1=4 [6] Spheres n 3+" log 2 n [2] Hyperplanes m n=m 1=d [5] d &gt; 3 Hyperplanes n d log n [5] Convex polytope m n=m 1=bd=2c [5, 80] Convex polytope n bd=2c log n
Reference: [11] <author> P. K. Agarwal, M. Sharir, and S. Toledo, </author> <title> Applications of parametric searching in geometric optimization, </title> <journal> J. Algorithms, </journal> <volume> 17 (1994), </volume> <pages> 292-318. </pages>
Reference-contexts: A placement p of B is free if and only if p does not intersect any of K i 's. See [76] for a survey of known results on the collision-detection problem and <ref> [11, 37, 38] </ref> for a few other applications of point intersection-searching structures. SEGMENT INTERSECTION SEARCHING Preprocess a set of objects in R d into a data structure so that all the objects of S intersected by a query segment can be reported (or counted) efficiently.
Reference: [12] <author> P. K. Agarwal and M. van Kreveld, </author> <title> Connected component and simple polygon intersection searching, </title> <booktitle> Proc. 3rd Workshop Algorithms Data Struct., Lecture Notes in Computer Science, </booktitle> <volume> Vol. 709, </volume> <publisher> Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 36-47. </pages>
Reference-contexts: Therefore logarithmic query-time intersection-searching data structures can easily be modified for colored intersection-reporting, but very little is known about linear-size colored intersection-searching data structures, except in some special cases <ref> [12, 65, 66, 67, 72] </ref>. Gupta et al. [65] have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space. <p> Gupta et al. [65] have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space. Agarwal and van Kreveld <ref> [12] </ref> presented a linear-size data structure with O (n 1=2+k + k) query time for colored segment intersection-reporting queries amid a set of segments in the plane, assuming that the segments of the same color form a connected planar graph, or if they form the boundary of a simple polygon; these
Reference: [13] <author> P. K. Agarwal, M. van Kreveld, and M. Overmars, </author> <title> Intersection queries in curved objects, </title> <journal> J. Algorithms, </journal> <volume> 15 (1993), </volume> <pages> 229-266. </pages>
Reference-contexts: TABLE 10 Segment intersection searching d Objects S (n) Q (n) Source Notes Simple polygon n (k + 1) log n [69] Reporting d = 2 Segments m n= p m [8, 47] Counting Circles n 2+" log n <ref> [13] </ref> Counting Circular arcs m n=m 1=3 [13] Counting Planes m n=m 1=3 [5] Counting d = 3 Triangles m n=m 1=4 [6] Counting Spheres m n=m 1=4 [6] Counting Spheres n 3+" (k + 1) log 2 n [2] Reporting A special case of segment intersection searching, in which the <p> TABLE 10 Segment intersection searching d Objects S (n) Q (n) Source Notes Simple polygon n (k + 1) log n [69] Reporting d = 2 Segments m n= p m [8, 47] Counting Circles n 2+" log n <ref> [13] </ref> Counting Circular arcs m n=m 1=3 [13] Counting Planes m n=m 1=3 [5] Counting d = 3 Triangles m n=m 1=4 [6] Counting Spheres m n=m 1=4 [6] Counting Spheres n 3+" (k + 1) log 2 n [2] Reporting A special case of segment intersection searching, in which the objects are horizontal segments in the plane <p> TABLE 11 Ray shooting d Objects S (n) Q (n) Source Simple polygon n log n [69] s disjoint simple polygons n p log s log n s convex polygons sn log s log s log n [9] d = 2 Segments m n= p Circlular arcs n n=m 1=3 <ref> [13] </ref> Disjoint arcs n p convex polytope n log n [53] c-oriented polytopes n log n [51] s convex polytopes s 2 n 2+" log 2 n [10] d = 3 Halfplanes m n= p Terrain m n= p Triangles m n=m 1=4 [6] Spheres n 3+" log 2 n [2]
Reference: [14] <author> A. Aggarwal, M. Hansen, and T. Leighton, </author> <title> Solving query-retrieval problems by compacting Voronoi diagrams, </title> <booktitle> Proc. 22nd Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1990, </year> <pages> pp. 331-340. </pages>
Reference-contexts: Using a standard duality transform, this problem can be reduced to the Range Searching 11 TABLE 4 Halfspace range-searching. d S (n) Q (n) Source Notes d = 2 n log n + k [41] Reporting d = 3 n log n log n + k <ref> [14] </ref> Reporting d = 3 n log n [52] Emptiness d &gt; 3 n log log n n 11=bd=2c log c n [79] Reporting d &gt; 3 n n 11=d 2 O (log fl n) [79] Emptiness following problem: Given a set H of n hyperplanes, determine the number of hy-perplanes <p> Table 9 gives some of the known results. TABLE 9 Point intersection searching d Objects S (n) Q (n) Source Notes Disks m (n 4=3 =m 2=3 ) log (m=n) Counting Disks n log n log n + k <ref> [14] </ref> Reporting d = 2 Triangles m n m log 3 n [8] Counting Fat triangles n log 2 n log 3 n + k [73] Reporting Tarski cells n 2+" log n [37] Counting d = 3 Functions n 1+" log n + k [4] Reporting Simplices m n m
Reference: [15] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman, </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1974. </year>
Reference-contexts: We assume that each memory cell can store log n bits. The upper bounds will be given on pointer-machine or RAM models, which are described in <ref> [15, 107] </ref>. The main difference between the two models is that on the pointer machine a memory cell can be accessed only through a series of pointers while in the RAM model any memory cell can be accessed in constant time.
Reference: [16] <author> A. Andersson and K. Swanson, </author> <title> On the difficulty of range searching, </title> <booktitle> Proc. 4th Workshop Algorithms Data Struct., Lecture Notes in Computer Science, </booktitle> <volume> Vol. 955, </volume> <publisher> Springer-Verlag, </publisher> <year> 1995, </year> <pages> pp. 473-481. </pages>
Reference-contexts: Agarwal pointer machine that answers a d-dimensional range-reporting query in O (log c n+k) time, for any constant c, is (n (log n= log log n) d1 ); see also <ref> [16] </ref>. Notice that this lower bound is greater than the known upper bound on the RAM model (see Table 1).
Reference: [17] <author> M. Anthony and N. Biggs, </author> <title> Computational Learning Theory, </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1992. </year>
Reference-contexts: The "-nets have turned out to be a powerful tool in developing divide-and-conquer algorithms for several geometric problems and in learning theory; see the books by Mulmuley [94] and Anthony and Biggs <ref> [17] </ref>. Building on the theory developed by Haussler and Welzl, Welzl [111] proved that one can construct a spanning path of S of O (n 11=d log n) stabbing number; the bound was improved by Chazelle and Welzl [45] to fi (n 11=d ).
Reference: [18] <author> S. Arya and D. Mount, </author> <title> Approximate range searching, </title> <booktitle> Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1995, </year> <pages> pp. 172-181. </pages>
Reference-contexts: Since the query time of a linear-size simplex range-searching data structure is only n 1=d factor faster than the naive method, researchers have developed practical data structures that work well most of the time. For example, Arya and Mount <ref> [18] </ref> have developed a linear-size data structure for answering approximate range-counting queries, in the sense that the points lying within distance ffi diam () distance of the boundary of the query simplex may or may not be counted. Its query time is O (log n + 1=ffi d1 ).
Reference: [19] <author> R. Bar-Yehuda and S. Fogel, </author> <title> Variations on ray shooting, </title> <journal> Algorithmica, </journal> <volume> 11 (1994), </volume> <pages> 133-145. </pages>
Reference-contexts: If subtractions are allowed, their algorithm can be extended to the triangle range-counting problem. This technique has also been applied to solve a number of related problems, including ray shooting and intersection searching <ref> [19] </ref>. The best-known linear-size data structure for simplex range searching, which 10 Pankaj K. Agarwal almost matches the lower bounds mentioned above, is by Matousek [85]. He showed that a simplex range-counting (resp. range-reporting) query in R d can be answered in time O (n 11=d ) (resp.
Reference: [20] <author> J. L. Bentley, </author> <title> Multidimensional divide-and-conquer, </title> <journal> Commun. ACM, </journal> <volume> 23 (1980), </volume> <pages> 214-229. </pages>
Reference-contexts: UPPER BOUNDS Most of the recent orthogonal range-searching data structures are based on range trees, introduced by Bentley <ref> [20] </ref>. For d = 1, the range tree of S is an array storing S in a nondecreasing order. For d &gt; 1, let S 1 be the sequence of x-coordinates of points in S sorted in a nondecreasing order.
Reference: [21] <author> J. L. Bentley and J. H. Friedman, </author> <title> Data structures for range searching, </title> <journal> ACM Comput. Surv., </journal> <volume> 11 (1979), </volume> <pages> 397-409. </pages>
Reference-contexts: This is an abstraction of the `multi-key' searching; see <ref> [21, 115] </ref>. For example, the points of S may correspond to employees of a company, each coordinate corresponding to a key such as age, salary, experience, etc. <p> Discusses practical data structures for ray tracing and intersection searching. * de Berg [50]: A monograph on ray shooting and related problems. * Schwarzkopf [103]: This PhD thesis includes many results on randomized dynamic data structures. SURVEY PAPERS * Bentley and Friedman <ref> [21] </ref>: A survey of earlier results on orthogonal range searching. * Chazelle [32]: A general survey of recent developments in computational geometry.
Reference: [22] <author> J. L. Bentley and J. B. Saxe, </author> <title> Decomposable searching problems I: static-to-dynamic transformation, </title> <journal> J. Algorithms, </journal> <volume> 1 (1980), </volume> <pages> 301-358. </pages>
Reference-contexts: If we allow only insertions (i.e., a point cannot be deleted from the structure), the static data structure can be modified, using the standard techniques <ref> [22, 95] </ref>, so that a point can be inserted in time O (P (n) log n=n) and a query can be answered in time O (Q (n) log n), where Q (n) is the query time of the original static data structure; in some cases the logarithmic overheard in the query
Reference: [23] <author> H. Bronnimann, B. Chazelle, and J. Pach, </author> <title> How hard is halfspace range searching, </title> <journal> Discrete Comput. Geom., </journal> <volume> 10 (1993), </volume> <pages> 143-155. </pages> <note> Range Searching 25 </note>
Reference: [24] <author> T. Chan, </author> <title> Fixed-dimensional linear programming queries made easy, </title> <booktitle> Proc. 12th ACM Symp. </booktitle> <institution> Comput. Geom., </institution> <year> 1996, </year> <note> p. to appear. </note>
Reference-contexts: For higher dimensions, Matousek [84] showed that, using multidimensional parametric searching and the data structure for answering halfspace emptiness queries, a linear-programming query can be answered in O ((n=m 1=bd=2c ) log c n) with O (m) storage. Recently Chan <ref> [24] </ref> has described a randomized procedure whose expected query time is slightly faster.
Reference: [25] <author> B. Chazelle, </author> <title> Filtering search: a new approach to query-answering, </title> <journal> SIAM J. Comput., </journal> <volume> 15 (1986), </volume> <pages> 703-724. </pages>
Reference-contexts: A range tree can also answer a range- counting query in time O (log d1 n). The best-known data structures for orthogonal range searching are by Chazelle <ref> [25, 27] </ref>, who used compressed range trees and other techniques (such as filtering search) to improve the storage and query time. His results in the plane, under various models of computation, are summarized in Table 1; the preprocessing time of each data structure is O (n log n).
Reference: [26] <author> B. Chazelle, </author> <title> An algorithm for segment-dragging and its implementation, </title> <journal> Algorithmica, </journal> <volume> 3 (1988), </volume> <pages> 205-221. </pages>
Reference-contexts: This query can be answered in O ((n= p time, with O (m) storage, using segment intersection-searching structures and the parametric-search technique. Chazelle <ref> [26] </ref> gave a linear-size, O (log n) query-time data structure for the special case in which S is a set of points, e is a horizontal segment, and is the vertical direction.
Reference: [27] <author> B. Chazelle, </author> <title> A functional approach to data structures and its use in multidimensional searching, </title> <journal> SIAM J. Comput., </journal> <volume> 17 (1988), </volume> <pages> 427-462. </pages>
Reference-contexts: A range tree can also answer a range- counting query in time O (log d1 n). The best-known data structures for orthogonal range searching are by Chazelle <ref> [25, 27] </ref>, who used compressed range trees and other techniques (such as filtering search) to improve the storage and query time. His results in the plane, under various models of computation, are summarized in Table 1; the preprocessing time of each data structure is O (n log n). <p> Chazelle <ref> [27] </ref> has shown that the bounds mentioned in Table 1 hold for this problem also. OPEN PROBLEMS 1. No nontrivial lower bounds are known for answering emptiness queries. 2. <p> Klein et al. [74] have described an optimal data structure for a special case of 2D range-reporting where the query ranges are translates of a polygon. TABLE 7 Dynamic 2D orthogonal range-searching Mode S (n) Q (n) U (n) Source Counting n log 2 n log 2 n <ref> [27] </ref> n k log 2 (2n=k) log 2 n [27] Reporting n log n log n log log n + k log n log log n [89] n log n log 2+" n + k log log n Semigroup n log 4 n log 4 n [27] Range Searching 15 Since <p> TABLE 7 Dynamic 2D orthogonal range-searching Mode S (n) Q (n) U (n) Source Counting n log 2 n log 2 n <ref> [27] </ref> n k log 2 (2n=k) log 2 n [27] Reporting n log n log n log log n + k log n log log n [89] n log n log 2+" n + k log log n Semigroup n log 4 n log 4 n [27] Range Searching 15 Since an arbitrary sequence of deletions is difficult to handle <p> n log 2 n <ref> [27] </ref> n k log 2 (2n=k) log 2 n [27] Reporting n log n log n log log n + k log n log log n [89] n log n log 2+" n + k log log n Semigroup n log 4 n log 4 n [27] Range Searching 15 Since an arbitrary sequence of deletions is difficult to handle in general, researchers have examined whether a random sequence of insertions and deletions can be handled efficiently; see [92, 93, 102].
Reference: [28] <author> B. Chazelle, </author> <title> Lower bounds on the complexity of polytope range searching, </title> <journal> J. Amer. Math. Soc., </journal> <volume> 2 (1989), </volume> <pages> 637-666. </pages>
Reference-contexts: Range Model S (n) Q (n) Source Semigroup (d = 2) n m Semigroup (d &gt; 2) m m 1=d log n Simplex Group n log n log n [33] Pointer (Reporting) m m 1=d + k [43] Halfspace Semigroup m log n d 2 +d 1 Theorem 2 (Chazelle <ref> [28] </ref>) Let (S; ) be a faithful semigroup.
Reference: [29] <author> B. Chazelle, </author> <title> Lower bounds for orthogonal range searching, I: the reporting case, </title> <journal> J. ACM, </journal> <volume> 37 (1990), </volume> <pages> 200-212. </pages>
Reference-contexts: In fact, Chazelle's lower bound holds even for the average-case complexity. A rather surprising result of Chazelle <ref> [29] </ref> shows that the size of any data structure on a 6 Pankaj K. Agarwal pointer machine that answers a d-dimensional range-reporting query in O (log c n+k) time, for any constant c, is (n (log n= log log n) d1 ); see also [16].
Reference: [30] <author> B. Chazelle, </author> <title> Lower bounds for orthogonal range searching, II: the arithmetic model, </title> <journal> J. ACM, </journal> <volume> 37 (1990), </volume> <pages> 439-463. </pages>
Reference-contexts: [96] showed that if S is a subset of a ufi u grid U in the plane and the Range Searching 5 TABLE 2 Higher-dimensional orthogonal range reporting S (n) Q (n) Source Notes n log d1+" n log n d1 + k [88] Pointer machine m log n d1 <ref> [30] </ref> Semigroup model n log d1 n log d1 n + k [114] Fusion trees n log d1 n log d2 n log fl n + k [101] P fl -trees vertices of query rectangles are also a subset of U , then a range-reporting query can be answered in time <p> He showed that if only m units of storage is available, a query, under the semigroup model, takes (log n= log ((m=n) log n)) in the worst case. See also [108]. Later Chazelle extended the lower bound to higher dimensions and improved it slightly <ref> [30] </ref>. In particular he showed that Theorem 1 (Chazelle [30]) Let (S; ) be a faithful semigroup. <p> See also [108]. Later Chazelle extended the lower bound to higher dimensions and improved it slightly <ref> [30] </ref>. In particular he showed that Theorem 1 (Chazelle [30]) Let (S; ) be a faithful semigroup. <p> If points are allowed to insert into S, the query time is (log n= log log n) [117] for the one-dimensional case; the bounds were extended by Chazelle <ref> [30] </ref> to ((log n= log log n) d ), for any fixed dimension d. * Rectangle-rectangle searching: Preprocess a set S of n rectangles in R d so that for a query rectangle q, the rectangles of S that intersect q can be reported (or counted) efficiently.
Reference: [31] <author> B. Chazelle, </author> <title> Cutting hyperplanes for divide-and-conquer, </title> <journal> Discrete Comput. Geom., </journal> <volume> 9 (1993), </volume> <pages> 145-158. </pages>
Reference-contexts: The following theorem by Chazelle <ref> [31] </ref> yields an O ((n= log n) d ) size data structure, with O (log n) query time, for halfspace range counting. Theorem 5 (Chazelle [31]) Given a set H of n hyperplanes and a parameter r n, a (1=r)-cutting of H of size O (r d ) can be computed <p> The following theorem by Chazelle <ref> [31] </ref> yields an O ((n= log n) d ) size data structure, with O (log n) query time, for halfspace range counting. Theorem 5 (Chazelle [31]) Given a set H of n hyperplanes and a parameter r n, a (1=r)-cutting of H of size O (r d ) can be computed in O (nr d1 ) time. The above approach can be extended to the simplex range-counting problem as well.
Reference: [32] <author> B. Chazelle, </author> <title> Computational geometry: A retrospective, </title> <booktitle> Proc. 26th Annu. ACM Sym-pos. Theory Comput., </booktitle> <year> 1994, </year> <pages> pp. 75-94. </pages>
Reference-contexts: SURVEY PAPERS * Bentley and Friedman [21]: A survey of earlier results on orthogonal range searching. * Chazelle <ref> [32] </ref>: A general survey of recent developments in computational geometry.
Reference: [33] <author> B. Chazelle, </author> <title> A spectral approach to lower bounds, </title> <booktitle> Proc. 35th Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <year> 1994, </year> <pages> pp. 674-682. </pages>
Reference-contexts: Agarwal TABLE 3 Lower bounds for simplex range searching. Range Model S (n) Q (n) Source Semigroup (d = 2) n m Semigroup (d &gt; 2) m m 1=d log n Simplex Group n log n log n <ref> [33] </ref> Pointer (Reporting) m m 1=d + k [43] Halfspace Semigroup m log n d 2 +d 1 Theorem 2 (Chazelle [28]) Let (S; ) be a faithful semigroup. <p> As we will see below, faster data structures are known for the halfspace-emptiness queries. The lower bound under the pointer-machine model is by Chazelle and Rosen-berg [43], and it holds only for range-reporting queries. No nontrivial lower bound was known under the group model until Chazelle's recent result <ref> [33] </ref>. LINEAR-SIZE DATA STRUCTURES Most of the linear-size data structures for simplex range searching are based on the so-called partition trees, originally introduced by Willard [113]. His partition tree is a 4-way tree, constructed as follows.
Reference: [34] <author> B. Chazelle, </author> <title> Lower bounds for off-line range searching, </title> <booktitle> Proc. 27th Annu. ACM Sym-pos. Theory Comput., </booktitle> <year> 1995, </year> <pages> pp. 733-740. </pages>
Reference-contexts: These lower bounds do not hold for off-line orthogonal range searching, where given a set of n weighted points in R d and a set of n rectangles, one wants to compute the weight of points in each rectangle. Recently, Chazelle <ref> [34] </ref> proved that the off-line version takes (n (log n= log log n) d1 ) time in the semigroup model, and (n log log n) time in the group model.
Reference: [35] <author> B. Chazelle and H. Edelsbrunner, </author> <title> Optimal solutions for a class of point retrieval problems, </title> <journal> J. Symbolic Comput., </journal> <volume> 1 (1985), </volume> <pages> 47-56. </pages>
Reference-contexts: If the ranges are ho-mothets of a given triangle, or translates of a convex polygon with constant number of edges, a two-dimensional range-reporting query can be answered in O (log n + k) time using linear space <ref> [35, 36] </ref>. If the ranges are octants in R 3 , a range-reporting query can be answered in either O ((k + 1) log n) or O (log 2 n + k) time using linear space [36].
Reference: [36] <author> B. Chazelle and H. Edelsbrunner, </author> <title> Linear space data structures for two types of range search, </title> <journal> Discrete Comput. Geom., </journal> <volume> 2 (1987), </volume> <pages> 113-126. </pages>
Reference-contexts: If the ranges are ho-mothets of a given triangle, or translates of a convex polygon with constant number of edges, a two-dimensional range-reporting query can be answered in O (log n + k) time using linear space <ref> [35, 36] </ref>. If the ranges are octants in R 3 , a range-reporting query can be answered in either O ((k + 1) log n) or O (log 2 n + k) time using linear space [36]. <p> If the ranges are octants in R 3 , a range-reporting query can be answered in either O ((k + 1) log n) or O (log 2 n + k) time using linear space <ref> [36] </ref>. LOWER BOUNDS Fredman [59, 60, 61] was the first to prove nontrivial lower bounds on orthogonal range searching, but he considered the framework in which the points were allowed to insert and delete dynamically.
Reference: [37] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir, </author> <title> A singly-exponential stratification scheme for real semi-algebraic varieties and its applications, </title> <type> Theoret. </type> <institution> Comput. Sci., </institution> <month> 84 </month> <year> (1991), </year> <pages> 77-105. </pages>
Reference-contexts: m (n 4=3 =m 2=3 ) log (m=n) Counting Disks n log n log n + k [14] Reporting d = 2 Triangles m n m log 3 n [8] Counting Fat triangles n log 2 n log 3 n + k [73] Reporting Tarski cells n 2+" log n <ref> [37] </ref> Counting d = 3 Functions n 1+" log n + k [4] Reporting Simplices m n m 1=d log d+1 n Counting d 3 Balls n d+" log n [6] Counting Balls m n m 1=dd=2e log c n + k [79] Reporting Tarski cells n 2d3+" log n [37] <p> <ref> [37] </ref> Counting d = 3 Functions n 1+" log n + k [4] Reporting Simplices m n m 1=d log d+1 n Counting d 3 Balls n d+" log n [6] Counting Balls m n m 1=dd=2e log c n + k [79] Reporting Tarski cells n 2d3+" log n [37] Counting Point location in arrangement of surfaces, especially determining whether a query point lies above a given set of regions of the form x d+1 f (x 1 ; : : : ; x d ), has found many applications in computational geometry. <p> A placement p of B is free if and only if p does not intersect any of K i 's. See [76] for a survey of known results on the collision-detection problem and <ref> [11, 37, 38] </ref> for a few other applications of point intersection-searching structures. SEGMENT INTERSECTION SEARCHING Preprocess a set of objects in R d into a data structure so that all the objects of S intersected by a query segment can be reported (or counted) efficiently.
Reference: [38] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir, </author> <title> Diameter, width, closest line pair and parametric searching, </title> <journal> Discrete Comput. Geom., </journal> <volume> 10 (1993), </volume> <pages> 183-196. </pages>
Reference-contexts: A placement p of B is free if and only if p does not intersect any of K i 's. See [76] for a survey of known results on the collision-detection problem and <ref> [11, 37, 38] </ref> for a few other applications of point intersection-searching structures. SEGMENT INTERSECTION SEARCHING Preprocess a set of objects in R d into a data structure so that all the objects of S intersected by a query segment can be reported (or counted) efficiently.
Reference: [39] <author> B. Chazelle, H. Edelsbrunner, L. J. Guibas, and M. Sharir, </author> <title> Lines in space: </title> <booktitle> combinatorics, algorithms, and applications, Proc. 21st Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1989, </year> <pages> pp. 382-393. </pages>
Reference-contexts: One of the most widely used linearization in computational geometry is the so-called Plucker coordinates, which map a line in R 3 to a point in R 5 ; see <ref> [39, 105] </ref> for more details on Plucker coordinates. Agarwal and Matousek [6] have also proposed another approach to answer f - range queries by extending Theorem 4 to Tarski cells and by constructing partition trees using this extension.
Reference: [40] <author> B. Chazelle and L. J. Guibas, Fractional cascading: I. </author> <title> A data structuring technique, </title> <journal> Algorithmica, </journal> <volume> 1 (1986), </volume> <pages> 133-162. </pages>
Reference-contexts: Otherwise, we recursively visit both children of v. The query time of this procedure is O (log d n + k), which can be improved to O (log d1 n + k), using the fractional-cascading technique <ref> [40, 77] </ref>. A range tree can also answer a range- counting query in time O (log d1 n). The best-known data structures for orthogonal range searching are by Chazelle [25, 27], who used compressed range trees and other techniques (such as filtering search) to improve the storage and query time.
Reference: [41] <author> B. Chazelle, L. J. Guibas, and D. T. Lee, </author> <title> The power of geometric duality, </title> <journal> BIT, </journal> <volume> 25 (1985), </volume> <pages> 76-90. </pages> <note> 26 Pankaj K. Agarwal </note>
Reference-contexts: Using a standard duality transform, this problem can be reduced to the Range Searching 11 TABLE 4 Halfspace range-searching. d S (n) Q (n) Source Notes d = 2 n log n + k <ref> [41] </ref> Reporting d = 3 n log n log n + k [14] Reporting d = 3 n log n [52] Emptiness d &gt; 3 n log log n n 11=bd=2c log c n [79] Reporting d &gt; 3 n n 11=d 2 O (log fl n) [79] Emptiness following problem:
Reference: [42] <author> B. Chazelle and B. Rosenberg, </author> <title> Computing partial sums in multidimensional arrays, </title> <booktitle> Proc. 5th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1989, </year> <pages> pp. 131-139. </pages>
Reference-contexts: Yao [116] showed that, for d = 1, a partial-sum query can be answered in O (ff (n)) time using O (n) space. For d &gt; 1, Chazelle and Rosenberg <ref> [42] </ref> gave a data structure of size O (n log d1 n) that can answer a query in time O (ff (n) log d2 n).
Reference: [43] <author> B. Chazelle and B. Rosenberg, </author> <title> Lower bounds on the complexity of simplex range reporting on a pointer machine, </title> <booktitle> in: Proc. 19th International Colloquium on Automata, Languages, and Programming, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 623, </volume> <publisher> Springer-Verlag, </publisher> <year> 1992, </year> <pages> pp. 439-449. </pages> <note> Also to appear in Comput. Geom. Theory Appl. </note>
Reference-contexts: Agarwal TABLE 3 Lower bounds for simplex range searching. Range Model S (n) Q (n) Source Semigroup (d = 2) n m Semigroup (d &gt; 2) m m 1=d log n Simplex Group n log n log n [33] Pointer (Reporting) m m 1=d + k <ref> [43] </ref> Halfspace Semigroup m log n d 2 +d 1 Theorem 2 (Chazelle [28]) Let (S; ) be a faithful semigroup. <p> Theorem 2 gives a lower bound for the simplex range-counting queries because (Z; +) is a faithful group, but not for emptiness queries. As we will see below, faster data structures are known for the halfspace-emptiness queries. The lower bound under the pointer-machine model is by Chazelle and Rosen-berg <ref> [43] </ref>, and it holds only for range-reporting queries. No nontrivial lower bound was known under the group model until Chazelle's recent result [33]. LINEAR-SIZE DATA STRUCTURES Most of the linear-size data structures for simplex range searching are based on the so-called partition trees, originally introduced by Willard [113]. <p> The data structure by Sub-ramanian and Ramaswamy [106] for 3-sided queries supports insertion/deletion of a point in time O (log B n + (log B n) 2 =B). Extending the lower-bound proof by Chazelle <ref> [43] </ref>, they also proved that any secondary-memory data structure that answers a range-reporting query in time O (log c B n+k=B) requires ((n=B) log (n=B)= log log B n) storage.
Reference: [44] <author> B. Chazelle, M. Sharir, and E. Welzl, </author> <title> Quasi-optimal upper bounds for simplex range searching and new zone theorems, </title> <journal> Algorithmica, </journal> <volume> 8 (1992), </volume> <pages> 407-429. </pages>
Reference-contexts: That is, store the solution of every combinatorially distinct simplex (two simplices are combinatorially distinct if they do not contain the same subset of S). Since there are fi (n d (d+1) ) combinatorially distinct simplices, such an approach will require (n d (d+1) ) storage. Chazelle et al. <ref> [44] </ref> showed that the size can be reduced to O (n d+" ), for any " &gt; 0, using a multi-level data structure. The space bound can be reduced to O (n d ) by increasing the query time to O (log d+1 n) [85] . <p> Halfspace range-reporting queries can be answered in O (log n + k) time, using O (n bd=2c+" ) space. A space/query-time tradeoff can be attained by combining the linear-size and logarithmic query-time data structures, as described in <ref> [44, 85] </ref>. The results are summarized in Table 5. OPEN PROBLEMS 1. Bridge the gap between upper and lower bounds in the group model. 2. Can the lower bound on the query time in Theorem 2 be improved to n=m 1=d ? 3.
Reference: [45] <author> B. Chazelle and E. Welzl, </author> <title> Quasi-optimal range searching in spaces of finite VC-dimension, </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 (1989), </volume> <pages> 467-489. </pages>
Reference-contexts: Building on the theory developed by Haussler and Welzl, Welzl [111] proved that one can construct a spanning path of S of O (n 11=d log n) stabbing number; the bound was improved by Chazelle and Welzl <ref> [45] </ref> to fi (n 11=d ). Preprocessing the sequence of weights of points along the path, using Yao's data structure for the partial-sum problem, one can obtain a linear-size data structure for simplex range searching, with O (n 11=d ff (n)) query time, under the semigroup model.
Reference: [46] <author> S. W. Cheng and R. Janardan, </author> <title> Efficient dynamic algorithms for some geometric intersection problems, </title> <journal> Inform. Process. Lett., </journal> <volume> 36 (1990), </volume> <pages> 251-258. </pages>
Reference-contexts: If we also allow insertions and deletions, the query and update time are O (log n log log n + k) and O (log n log log n) [89], or O (log 2 n + k) and O (log n) using only linear space <ref> [46] </ref>; if we allow only insertions, the query and update time become O (log n + k) and O (log n) [71]. A problem related to segment intersection searching is the stabbing problem.
Reference: [47] <author> S. W. Cheng and R. Janardan, </author> <title> Algorithms for ray-shooting and intersection searching, </title> <journal> J. Algorithms, </journal> <volume> 13 (1992), </volume> <pages> 670-692. </pages>
Reference-contexts: TABLE 10 Segment intersection searching d Objects S (n) Q (n) Source Notes Simple polygon n (k + 1) log n [69] Reporting d = 2 Segments m n= p m <ref> [8, 47] </ref> Counting Circles n 2+" log n [13] Counting Circular arcs m n=m 1=3 [13] Counting Planes m n=m 1=3 [5] Counting d = 3 Triangles m n=m 1=4 [6] Counting Spheres m n=m 1=4 [6] Counting Spheres n 3+" (k + 1) log 2 n [2] Reporting A special
Reference: [48] <author> Y.-J. Chiang and R. Tamassia, </author> <title> Dynamic algorithms in computational geometry, </title> <booktitle> Proc. IEEE, 80 (1992), </booktitle> <pages> 1412-1434. </pages>
Reference-contexts: SURVEY PAPERS * Bentley and Friedman [21]: A survey of earlier results on orthogonal range searching. * Chazelle [32]: A general survey of recent developments in computational geometry. It contains most of the references on simplex and semialgebraic range searching. * Chiang and Tamassia <ref> [48] </ref>: A survey of dynamic data structures. * Goodman et al. [63]: A survey of stabbing problems and related topics. * Matousek [86]: A comprehensive survey of simplex range searching and re lated topics.
Reference: [49] <author> R. Cole, </author> <title> Partitioning point sets in 4 dimensions, </title> <booktitle> Proc. 12th Internat. Colloq. Automata Lang. Program., Lecture Notes in Computer Science, </booktitle> <volume> Vol. 194, </volume> <publisher> Springer-Verlag, </publisher> <year> 1985, </year> <pages> pp. 111-119. </pages>
Reference-contexts: A similar procedure can answer a simplex range-counting query within the same time bound, and a simplex range-reporting query in time O (n :792 + k). After a few initial improvements and extensions on Willard's data structure <ref> [55, 56, 49] </ref>, a major breakthrough in simplex range searching was made by Haussler and Welzl [68].
Reference: [50] <author> M. de Berg, </author> <title> Ray Shooting, Depth Orders and Hidden Surface Removal, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: Chapters 2 includes earlier results on orthogonal range searching. * Foley et al. [58]: A text book on graphics. Discusses practical data structures for ray tracing and intersection searching. * de Berg <ref> [50] </ref>: A monograph on ray shooting and related problems. * Schwarzkopf [103]: This PhD thesis includes many results on randomized dynamic data structures.
Reference: [51] <author> M. de Berg and M. Overmars, </author> <title> Hidden surface removal for c-oriented polyhedra, </title> <journal> Com-put. Geom. Theory Appl., </journal> <volume> 1 (1992), </volume> <pages> 247-268. </pages>
Reference-contexts: [69] s disjoint simple polygons n p log s log n s convex polygons sn log s log s log n [9] d = 2 Segments m n= p Circlular arcs n n=m 1=3 [13] Disjoint arcs n p convex polytope n log n [53] c-oriented polytopes n log n <ref> [51] </ref> s convex polytopes s 2 n 2+" log 2 n [10] d = 3 Halfplanes m n= p Terrain m n= p Triangles m n=m 1=4 [6] Spheres n 3+" log 2 n [2] Hyperplanes m n=m 1=d [5] d &gt; 3 Hyperplanes n d log n [5] Convex polytope
Reference: [52] <author> D. Dobkin, J. Hershberger, D. Kirkpatrick, and S. Suri, </author> <title> Implicitly searching convolutions and computing depth of collision, </title> <booktitle> Proc. 1st Annu. SIGAL Internat. Sym-pos. Algorithms, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 450, </volume> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 165-180. </pages>
Reference-contexts: transform, this problem can be reduced to the Range Searching 11 TABLE 4 Halfspace range-searching. d S (n) Q (n) Source Notes d = 2 n log n + k [41] Reporting d = 3 n log n log n + k [14] Reporting d = 3 n log n <ref> [52] </ref> Emptiness d &gt; 3 n log log n n 11=bd=2c log c n [79] Reporting d &gt; 3 n n 11=d 2 O (log fl n) [79] Emptiness following problem: Given a set H of n hyperplanes, determine the number of hy-perplanes of H lying above a query point.
Reference: [53] <author> D. P. Dobkin and D. G. Kirkpatrick, </author> <title> A linear algorithm for determining the separation of convex polyhedra, </title> <journal> J. Algorithms, </journal> <volume> 6 (1985), </volume> <pages> 381-392. </pages>
Reference-contexts: Source Simple polygon n log n [69] s disjoint simple polygons n p log s log n s convex polygons sn log s log s log n [9] d = 2 Segments m n= p Circlular arcs n n=m 1=3 [13] Disjoint arcs n p convex polytope n log n <ref> [53] </ref> c-oriented polytopes n log n [51] s convex polytopes s 2 n 2+" log 2 n [10] d = 3 Halfplanes m n= p Terrain m n= p Triangles m n=m 1=4 [6] Spheres n 3+" log 2 n [2] Hyperplanes m n=m 1=d [5] d &gt; 3 Hyperplanes n
Reference: [54] <author> D. P. Dobkin and D. G. Kirkpatrick, </author> <title> Determining the separation of preprocessed polyhedra a unified approach, </title> <booktitle> Proc. 17th Internat. Colloq. Automata Lang. Program., Lecture Notes in Computer Science, </booktitle> <volume> Vol. 443, </volume> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 400-413. </pages>
Reference-contexts: Hershberger and Suri [69] showed that a triangulation with O (log n) query time can be constructed when S is the boundary of a simple polygon in the plane. See <ref> [3, 91, 54, 78] </ref> and the references therein for other ray-shooting results using this approach. Agarwal et al. [3] proved worst-case bounds for many cases on the number of cells in the subdivision that a line can intersect.
Reference: [55] <author> D. P. Dobkin, F. F. Yao, H. Edelsbrunner, and M. S. Paterson, </author> <title> Partitioning space for range queries, </title> <journal> SIAM J. Comput., </journal> <volume> 18 (1989), </volume> <pages> 371-384. </pages>
Reference-contexts: A similar procedure can answer a simplex range-counting query within the same time bound, and a simplex range-reporting query in time O (n :792 + k). After a few initial improvements and extensions on Willard's data structure <ref> [55, 56, 49] </ref>, a major breakthrough in simplex range searching was made by Haussler and Welzl [68].
Reference: [56] <author> H. Edelsbrunner and E. Welzl, </author> <title> Halfplanar range search in linear space and O(n 0:695 ) query time, </title> <journal> Inform. Process. Lett., </journal> <volume> 23 (1986), </volume> <pages> 289-293. </pages>
Reference-contexts: A similar procedure can answer a simplex range-counting query within the same time bound, and a simplex range-reporting query in time O (n :792 + k). After a few initial improvements and extensions on Willard's data structure <ref> [55, 56, 49] </ref>, a major breakthrough in simplex range searching was made by Haussler and Welzl [68].
Reference: [57] <author> P. Erd-os and G. Szekeres, </author> <title> A combinatorial problem in geometry, </title> <journal> Compositio Math., </journal> <volume> 2 (1935), </volume> <pages> 463-470. </pages>
Reference-contexts: Matousek and Welzl [81] gave an entirely different algorithm for the halfspace range-counting problem in the plane, using a combinatorial result of Erd-os and Szekeres <ref> [57] </ref>. The query time of their data structure is O ( p n log n), and it uses O (n) space and O (n 3=2 ) preprocessing time. If subtractions are allowed, their algorithm can be extended to the triangle range-counting problem.
Reference: [58] <author> J. D. Foley, A. van Dam, S. K. Feiner, and J. F. Hughes, </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year> <title> Range Searching 27 </title>
Reference-contexts: Chapters 6 and 8 cover range-searching, intersection-searching, and ray-shooting data structures. * Preparata and Shamos [99]: A text book on basic topics in computational geometry. Chapters 2 includes earlier results on orthogonal range searching. * Foley et al. <ref> [58] </ref>: A text book on graphics. Discusses practical data structures for ray tracing and intersection searching. * de Berg [50]: A monograph on ray shooting and related problems. * Schwarzkopf [103]: This PhD thesis includes many results on randomized dynamic data structures.
Reference: [59] <author> M. L. Fredman, </author> <title> Inherent complexity of range query problems, </title> <booktitle> Proc. 17th Allerton Conf. </booktitle> <institution> Commun. Control Comput., </institution> <year> 1979, </year> <pages> pp. 231-240. </pages>
Reference-contexts: If the ranges are octants in R 3 , a range-reporting query can be answered in either O ((k + 1) log n) or O (log 2 n + k) time using linear space [36]. LOWER BOUNDS Fredman <ref> [59, 60, 61] </ref> was the first to prove nontrivial lower bounds on orthogonal range searching, but he considered the framework in which the points were allowed to insert and delete dynamically. He showed that a mixed sequence of n insertions, deletions, and queries takes (n log d n) time.
Reference: [60] <author> M. L. Fredman, </author> <title> The inherent complexity of dynamic data structures which accommodate range queries, </title> <booktitle> Proc. 21st Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <year> 1980, </year> <pages> pp. 191-199. </pages>
Reference-contexts: If the ranges are octants in R 3 , a range-reporting query can be answered in either O ((k + 1) log n) or O (log 2 n + k) time using linear space [36]. LOWER BOUNDS Fredman <ref> [59, 60, 61] </ref> was the first to prove nontrivial lower bounds on orthogonal range searching, but he considered the framework in which the points were allowed to insert and delete dynamically. He showed that a mixed sequence of n insertions, deletions, and queries takes (n log d n) time.
Reference: [61] <author> M. L. Fredman, </author> <title> A lower bound on the complexity of orthogonal range queries, </title> <journal> J. ACM, </journal> <volume> 28 (1981), </volume> <pages> 696-705. </pages>
Reference-contexts: Most of the lower bounds will be given in the so-called semigroup model , which was originally introduced by Fredman <ref> [61] </ref> and which is much weaker than the pointer machine or the RAM model. In the arithmetic model, a data structure is regarded as a set of precomputed sums in the underlying semigroup. <p> If the ranges are octants in R 3 , a range-reporting query can be answered in either O ((k + 1) log n) or O (log 2 n + k) time using linear space [36]. LOWER BOUNDS Fredman <ref> [59, 60, 61] </ref> was the first to prove nontrivial lower bounds on orthogonal range searching, but he considered the framework in which the points were allowed to insert and delete dynamically. He showed that a mixed sequence of n insertions, deletions, and queries takes (n log d n) time.
Reference: [62] <author> J. H. Friedman, J. L. Bentley, and R. A. Finkel, </author> <title> An algorithm for finding best matches in logarithmic expected time, </title> <journal> ACM Trans. Math. Softw., </journal> <volume> 3 (1977), </volume> <pages> 209-226. </pages>
Reference-contexts: Its query time is O (log n + 1=ffi d1 ). Overmars and van der Stappen [97] developed fast data structures for the special case in which the ranges are `fat' and have bounded size. See <ref> [62, 70] </ref> for some other `heuristic based' data structures. We conclude this subsection by noting that better bounds can be obtained for the halfspace range-reporting problem, using the so-called filtering search; see Table 4.
Reference: [63] <author> J. E. Goodman, R. Pollack, and R. Wenger, </author> <title> Geometric transversal theory, in: New Trends in Discrete and Computational Geometry (J. Pach, </title> <editor> ed.), </editor> <publisher> Springer-Verlag, </publisher> <address> Heidelberg-New York-Berlin, </address> <year> 1993, </year> <pages> pp. 163-198. </pages>
Reference-contexts: Such queries can also be answered efficiently using semialgebraic range-searching data structures. A line-stabbing query amid a set of triangles in R 3 can be answered in O (log n) time using O (n 2+" ) storage [98]. The Range Searching 19 paper by Goodman et al. <ref> [63] </ref> is an excellent survey of this topic. COLORED INTERSECTION SEARCHING Preprocess a given set S of colored objects in R d (i.e., each object in S is assigned a color) so that the we can report (or count) the colors of the objects that intersect the query range. <p> It contains most of the references on simplex and semialgebraic range searching. * Chiang and Tamassia [48]: A survey of dynamic data structures. * Goodman et al. <ref> [63] </ref>: A survey of stabbing problems and related topics. * Matousek [86]: A comprehensive survey of simplex range searching and re lated topics.
Reference: [64] <author> M. T. Goodrich and R. Tamassia, </author> <title> Dynamic ray shooting and shortest paths via balanced geodesic triangulations, </title> <booktitle> Proc. 9th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1993, </year> <pages> pp. 318-327. </pages>
Reference-contexts: The ray-shooting structures for d-dimensional convex polyhedra assume that the source point of the query ray lies inside the polytope. All the ray-shooting data structures mentioned in Table 11 can be dynamized at a cost of polylogarithmic or n " factor in the query time. Goodrich and Tamassia <ref> [64] </ref> have developed a dynamic ray-shooting data structure for connected planar subdivisions, with O (log 2 n) query and update time. Like simplex range searching, many practical data structures have been proposed that, despite having bad worst-case performance, work well in practice.
Reference: [65] <author> P. Gupta, R. Janardan, and M. Smid, </author> <title> Efficient algorithms for generalized intersection searching on non-iso-oriented objects, </title> <booktitle> Proc. 10th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1994, </year> <pages> pp. 369-378. </pages>
Reference-contexts: Therefore logarithmic query-time intersection-searching data structures can easily be modified for colored intersection-reporting, but very little is known about linear-size colored intersection-searching data structures, except in some special cases <ref> [12, 65, 66, 67, 72] </ref>. Gupta et al. [65] have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space. <p> Therefore logarithmic query-time intersection-searching data structures can easily be modified for colored intersection-reporting, but very little is known about linear-size colored intersection-searching data structures, except in some special cases [12, 65, 66, 67, 72]. Gupta et al. <ref> [65] </ref> have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space. <p> Gupta et al. <ref> [65, 67] </ref> present segment intersection-reporting structures for many other special cases. OPEN PROBLEMS 1. Faster algorithms for point intersection searching in Tarski cells. 2. An O (log n+k) query-time and linear-size segment intersection-reporting data structure for a simple polygon. 3.
Reference: [66] <author> P. Gupta, R. Janardan, and M. Smid, </author> <title> On intersection searching problems involving curved objects, </title> <booktitle> Proc. 4th Scand. Workshop Algorithm Theory, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 824, </volume> <publisher> Springer-Verlag, </publisher> <year> 1994, </year> <pages> pp. 183-194. </pages>
Reference-contexts: Therefore logarithmic query-time intersection-searching data structures can easily be modified for colored intersection-reporting, but very little is known about linear-size colored intersection-searching data structures, except in some special cases <ref> [12, 65, 66, 67, 72] </ref>. Gupta et al. [65] have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space.
Reference: [67] <author> P. Gupta, R. Janardan, and M. Smid, </author> <title> Further results on generalized intersection searching problems: counting, </title> <editor> reporting and dynamization, J. </editor> <booktitle> Algorithms, 19 (1995), </booktitle> <pages> 282-317. </pages>
Reference-contexts: Therefore logarithmic query-time intersection-searching data structures can easily be modified for colored intersection-reporting, but very little is known about linear-size colored intersection-searching data structures, except in some special cases <ref> [12, 65, 66, 67, 72] </ref>. Gupta et al. [65] have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space. <p> Gupta et al. <ref> [65, 67] </ref> present segment intersection-reporting structures for many other special cases. OPEN PROBLEMS 1. Faster algorithms for point intersection searching in Tarski cells. 2. An O (log n+k) query-time and linear-size segment intersection-reporting data structure for a simple polygon. 3.
Reference: [68] <author> D. Haussler and E. Welzl, </author> <title> Epsilon-nets and simplex range queries, </title> <journal> Discrete Comput. Geom., </journal> <volume> 2 (1987), </volume> <pages> 127-151. </pages>
Reference-contexts: After a few initial improvements and extensions on Willard's data structure [55, 56, 49], a major breakthrough in simplex range searching was made by Haussler and Welzl <ref> [68] </ref>. They formulated the range searching in an abstract setting and, using elegant probabilistic methods, gave a randomized algorithm to construct a linear-size partition tree with O (n ff ) query time, where ff = 1 1 d (d1)+1 + " for any " &gt; 0. <p> The constant of proportionality hidden in the big-O notation depends on the value of ". The major contribution of their paper is the abstract framework and the notion of "-nets. The following theorem gives a slightly stronger version of their main result. Theorem 3 (Haussler-Welzl <ref> [68] </ref>, Komlos et al. [75]) For any finite range space (X; R) of VC-dimension d and for 0 &lt; "; ffi &lt; 1, if N is a subset of X obtained by d 1 + 2 log log " random independent draws, then N is an "-net of (X; R) with
Reference: [69] <author> J. Hershberger and S. Suri, </author> <title> A pedestrian approach to ray shooting: Shoot a ray, take a walk, </title> <booktitle> Proc. 4th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <year> 1993, </year> <pages> pp. 54-63. </pages>
Reference-contexts: For the sake of clarity, we have omitted polylogarithmic terms from the query-search time whenever it is of the form n=m ff . TABLE 10 Segment intersection searching d Objects S (n) Q (n) Source Notes Simple polygon n (k + 1) log n <ref> [69] </ref> Reporting d = 2 Segments m n= p m [8, 47] Counting Circles n 2+" log n [13] Counting Circular arcs m n=m 1=3 [13] Counting Planes m n=m 1=3 [5] Counting d = 3 Triangles m n=m 1=4 [6] Counting Spheres m n=m 1=4 [6] Counting Spheres n 3+" <p> The worst-case query time is proportional to the maximum number of cells intersected by a segment that does not intersect any object in S. Hershberger and Suri <ref> [69] </ref> showed that a triangulation with O (log n) query time can be constructed when S is the boundary of a simple polygon in the plane. See [3, 91, 54, 78] and the references therein for other ray-shooting results using this approach. <p> query problem is defined as follows: preprocess a set S of points in R d into a data structure so that a point in S closest to a query point ~ Range Searching 21 TABLE 11 Ray shooting d Objects S (n) Q (n) Source Simple polygon n log n <ref> [69] </ref> s disjoint simple polygons n p log s log n s convex polygons sn log s log s log n [9] d = 2 Segments m n= p Circlular arcs n n=m 1=3 [13] Disjoint arcs n p convex polytope n log n [53] c-oriented polytopes n log n [51]
Reference: [70] <author> P. Houthuys, </author> <title> Box sort, a multidimensional binary sorting method for rectangular boxes, used for quick range searching, </title> <journal> Visual Comput., </journal> <volume> 3 (1987), </volume> <pages> 236-249. </pages>
Reference-contexts: Its query time is O (log n + 1=ffi d1 ). Overmars and van der Stappen [97] developed fast data structures for the special case in which the ranges are `fat' and have bounded size. See <ref> [62, 70] </ref> for some other `heuristic based' data structures. We conclude this subsection by noting that better bounds can be obtained for the halfspace range-reporting problem, using the so-called filtering search; see Table 4.
Reference: [71] <author> H. Imai and T. Asano, </author> <title> Dynamic orthogonal segment intersection search, </title> <journal> J. Algorithms, </journal> <volume> 8 (1987), </volume> <pages> 1-18. </pages>
Reference-contexts: n log log n + k) and O (log n log log n) [89], or O (log 2 n + k) and O (log n) using only linear space [46]; if we allow only insertions, the query and update time become O (log n + k) and O (log n) <ref> [71] </ref>. A problem related to segment intersection searching is the stabbing problem. Given a set S of objects in R d , determine whether a query k-flat (0 &lt; k &lt; d) intersects all objects of S. Such queries can also be answered efficiently using semialgebraic range-searching data structures.
Reference: [72] <author> R. Janardan and M. Lopez, </author> <title> Generalized intersection searching problems, </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 3 (1993), </volume> <pages> 39-69. </pages>
Reference-contexts: Therefore logarithmic query-time intersection-searching data structures can easily be modified for colored intersection-reporting, but very little is known about linear-size colored intersection-searching data structures, except in some special cases <ref> [12, 65, 66, 67, 72] </ref>. Gupta et al. [65] have shown that the colored halfplane-reporting queries in the plane can be answered in O (log 2 n + k) using O (n log n) space.
Reference: [73] <author> M. J. Katz, </author> <title> 3-D vertical ray shooting and 2-D point enclosure, range searching, and arc shooting amidst convex fat objects, </title> <type> Unpublished manuscript, </type> <year> 1995. </year>
Reference-contexts: Objects S (n) Q (n) Source Notes Disks m (n 4=3 =m 2=3 ) log (m=n) Counting Disks n log n log n + k [14] Reporting d = 2 Triangles m n m log 3 n [8] Counting Fat triangles n log 2 n log 3 n + k <ref> [73] </ref> Reporting Tarski cells n 2+" log n [37] Counting d = 3 Functions n 1+" log n + k [4] Reporting Simplices m n m 1=d log d+1 n Counting d 3 Balls n d+" log n [6] Counting Balls m n m 1=dd=2e log c n + k [79]
Reference: [74] <author> R. Klein, O. Nurmi, T. Ottmann, and D. Wood, </author> <title> A dynamic fixed windowing problem, </title> <journal> Algorithmica, </journal> <volume> 4 (1989), </volume> <pages> 535-550. </pages>
Reference-contexts: Table 7 summarizes the known results on dynamic 2D orthogonal range-searching data structures; these results can be extended to higher dimensions at a cost of log d2 n factor in the storage, in the query time, and in the update time. Klein et al. <ref> [74] </ref> have described an optimal data structure for a special case of 2D range-reporting where the query ranges are translates of a polygon.
Reference: [75] <author> J. Komlos, J. Pach, and G. Woeginger, </author> <title> Almost tight bounds for *-nets, </title> <journal> Discrete Comput. Geom., </journal> <volume> 7 (1992), </volume> <pages> 163-173. </pages> <note> 28 Pankaj K. Agarwal </note>
Reference-contexts: The constant of proportionality hidden in the big-O notation depends on the value of ". The major contribution of their paper is the abstract framework and the notion of "-nets. The following theorem gives a slightly stronger version of their main result. Theorem 3 (Haussler-Welzl [68], Komlos et al. <ref> [75] </ref>) For any finite range space (X; R) of VC-dimension d and for 0 &lt; "; ffi &lt; 1, if N is a subset of X obtained by d 1 + 2 log log " random independent draws, then N is an "-net of (X; R) with probability at least 1
Reference: [76] <author> J.-C. Latombe, </author> <title> Robot Motion Planning, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: If B and the obstacles are semialgebraic sets, then each K i is also a semialgebraic set. A placement p of B is free if and only if p does not intersect any of K i 's. See <ref> [76] </ref> for a survey of known results on the collision-detection problem and [11, 37, 38] for a few other applications of point intersection-searching structures.
Reference: [77] <author> G. S. Lueker, </author> <title> A data structure for orthogonal range queries, </title> <booktitle> Proc. 19th Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <year> 1978, </year> <pages> pp. 28-34. </pages>
Reference-contexts: Otherwise, we recursively visit both children of v. The query time of this procedure is O (log d n + k), which can be improved to O (log d1 n + k), using the fractional-cascading technique <ref> [40, 77] </ref>. A range tree can also answer a range- counting query in time O (log d1 n). The best-known data structures for orthogonal range searching are by Chazelle [25, 27], who used compressed range trees and other techniques (such as filtering search) to improve the storage and query time.
Reference: [78] <author> J. MacDanold and K. Booth, </author> <title> Heuristics for ray tracing using space subdivision, </title> <booktitle> The Visual Computer, 6 (1990), </booktitle> <pages> 153-166. </pages>
Reference-contexts: Hershberger and Suri [69] showed that a triangulation with O (log n) query time can be constructed when S is the boundary of a simple polygon in the plane. See <ref> [3, 91, 54, 78] </ref> and the references therein for other ray-shooting results using this approach. Agarwal et al. [3] proved worst-case bounds for many cases on the number of cells in the subdivision that a line can intersect.
Reference: [79] <author> J. Matousek, </author> <title> Reporting points in halfspaces, </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 2 (1992), </volume> <pages> 169-186. </pages>
Reference-contexts: range-searching. d S (n) Q (n) Source Notes d = 2 n log n + k [41] Reporting d = 3 n log n log n + k [14] Reporting d = 3 n log n [52] Emptiness d &gt; 3 n log log n n 11=bd=2c log c n <ref> [79] </ref> Reporting d &gt; 3 n n 11=d 2 O (log fl n) [79] Emptiness following problem: Given a set H of n hyperplanes, determine the number of hy-perplanes of H lying above a query point. <p> n + k [41] Reporting d = 3 n log n log n + k [14] Reporting d = 3 n log n [52] Emptiness d &gt; 3 n log log n n 11=bd=2c log c n <ref> [79] </ref> Reporting d &gt; 3 n n 11=d 2 O (log fl n) [79] Emptiness following problem: Given a set H of n hyperplanes, determine the number of hy-perplanes of H lying above a query point. <p> [73] Reporting Tarski cells n 2+" log n [37] Counting d = 3 Functions n 1+" log n + k [4] Reporting Simplices m n m 1=d log d+1 n Counting d 3 Balls n d+" log n [6] Counting Balls m n m 1=dd=2e log c n + k <ref> [79] </ref> Reporting Tarski cells n 2d3+" log n [37] Counting Point location in arrangement of surfaces, especially determining whether a query point lies above a given set of regions of the form x d+1 f (x 1 ; : : : ; x d ), has found many applications in computational
Reference: [80] <author> J. Matousek and O. Schwarzkopf, </author> <title> On ray shooting in convex polytopes, </title> <journal> Discrete Comput. Geom., </journal> <volume> 10 (1993), </volume> <pages> 215-232. </pages>
Reference-contexts: s 2 n 2+" log 2 n [10] d = 3 Halfplanes m n= p Terrain m n= p Triangles m n=m 1=4 [6] Spheres n 3+" log 2 n [2] Hyperplanes m n=m 1=d [5] d &gt; 3 Hyperplanes n d log n [5] Convex polytope m n=m 1=bd=2c <ref> [5, 80] </ref> Convex polytope n bd=2c log n [80] can be reported quickly. This query can be formulated as an instance of the ray-shooting problem in a convex polyhedron in R d+1 , as follows. <p> d = 3 Halfplanes m n= p Terrain m n= p Triangles m n=m 1=4 [6] Spheres n 3+" log 2 n [2] Hyperplanes m n=m 1=d [5] d &gt; 3 Hyperplanes n d log n [5] Convex polytope m n=m 1=bd=2c [5, 80] Convex polytope n bd=2c log n <ref> [80] </ref> can be reported quickly. This query can be formulated as an instance of the ray-shooting problem in a convex polyhedron in R d+1 , as follows.
Reference: [81] <author> J. Matousek and E. Welzl, </author> <title> Good splitters for counting points in triangles, </title> <journal> J. Algorithms, </journal> <volume> 13 (1992), </volume> <pages> 307-319. </pages>
Reference-contexts: But this technique does not give a linear-size data structure with O (n 11=d log n) query time, for d 3, under any reasonable model of computation (e.g., pointer machine, RAM), See [1, 82, 112] for other applications of spanning trees with low stabbing number. Matousek and Welzl <ref> [81] </ref> gave an entirely different algorithm for the halfspace range-counting problem in the plane, using a combinatorial result of Erd-os and Szekeres [57]. The query time of their data structure is O ( p n log n), and it uses O (n) space and O (n 3=2 ) preprocessing time.
Reference: [82] <author> J. Matousek, E. Welzl, and L. Wernisch, </author> <title> Discrepancy and "-approximations for bounded VC-dimension, </title> <journal> Combinatorica, </journal> <volume> 13 (1993), </volume> <pages> 455-466. </pages>
Reference-contexts: But this technique does not give a linear-size data structure with O (n 11=d log n) query time, for d 3, under any reasonable model of computation (e.g., pointer machine, RAM), See <ref> [1, 82, 112] </ref> for other applications of spanning trees with low stabbing number. Matousek and Welzl [81] gave an entirely different algorithm for the halfspace range-counting problem in the plane, using a combinatorial result of Erd-os and Szekeres [57].
Reference: [83] <author> J. Matousek, </author> <title> Efficient partition trees, </title> <journal> Discrete Comput. Geom., </journal> <volume> 8 (1992), </volume> <pages> 315-334. </pages>
Reference-contexts: He showed that a simplex range-counting (resp. range-reporting) query in R d can be answered in time O (n 11=d ) (resp. O (n 11=d + k)). His algorithm is based on the following theorem. Theorem 4 (Matousek <ref> [83] </ref>) Let S be a set of n points in R d , and let 1 &lt; r n=2 be a given parameter.
Reference: [84] <author> J. Matousek, </author> <title> Linear optimization queries, </title> <editor> J. </editor> <booktitle> Algorithms, </booktitle> <month> 14 </month> <year> (1993), </year> <month> 432-448. </month> <title> The results combined with results of O. </title> <note> Schwarzkopf also appear in Proc. 8th ACM Sympos. Comput. Geom., </note> <year> 1992, </year> <pages> pages 16-25. </pages>
Reference-contexts: For d 3, such a query can be answered in O (log n) time using O (n) storage, by constructing the normal diagram of the convex polytope T h2S h and preprocessing it for point-location queries. For higher dimensions, Matousek <ref> [84] </ref> showed that, using multidimensional parametric searching and the data structure for answering halfspace emptiness queries, a linear-programming query can be answered in O ((n=m 1=bd=2c ) log c n) with O (m) storage. Recently Chan [24] has described a randomized procedure whose expected query time is slightly faster.
Reference: [85] <author> J. Matousek, </author> <title> Range searching with efficient hierarchical cuttings, </title> <journal> Discrete Comput. Geom., </journal> <volume> 10 (1993), </volume> <pages> 157-182. </pages>
Reference-contexts: This technique has also been applied to solve a number of related problems, including ray shooting and intersection searching [19]. The best-known linear-size data structure for simplex range searching, which 10 Pankaj K. Agarwal almost matches the lower bounds mentioned above, is by Matousek <ref> [85] </ref>. He showed that a simplex range-counting (resp. range-reporting) query in R d can be answered in time O (n 11=d ) (resp. O (n 11=d + k)). His algorithm is based on the following theorem. <p> Although the query time can be improved to O (n 11=d log c n) by choosing r to be n " , a stronger version of Theorem 4, which was proved in <ref> [85] </ref>, and some other sophisticated techniques are needed to obtain O (n 11=d ) query time. <p> Chazelle et al. [44] showed that the size can be reduced to O (n d+" ), for any " &gt; 0, using a multi-level data structure. The space bound can be reduced to O (n d ) by increasing the query time to O (log d+1 n) <ref> [85] </ref> . Halfspace range-reporting queries can be answered in O (log n + k) time, using O (n bd=2c+" ) space. A space/query-time tradeoff can be attained by combining the linear-size and logarithmic query-time data structures, as described in [44, 85]. The results are summarized in Table 5. <p> Halfspace range-reporting queries can be answered in O (log n + k) time, using O (n bd=2c+" ) space. A space/query-time tradeoff can be attained by combining the linear-size and logarithmic query-time data structures, as described in <ref> [44, 85] </ref>. The results are summarized in Table 5. OPEN PROBLEMS 1. Bridge the gap between upper and lower bounds in the group model. 2. Can the lower bound on the query time in Theorem 2 be improved to n=m 1=d ? 3.
Reference: [86] <author> J. Matousek, </author> <title> Geometric range searching, </title> <journal> ACM Comput. Surv., </journal> <volume> 26 (1994), </volume> <pages> 421-461. </pages>
Reference-contexts: See the survey paper by Matousek <ref> [86] </ref> for an excellent review of the techniques developed for the simplex range searching. Unlike orthogonal range searching, no simplex range-searching data structure is known that can answer a query in polylogarithmic time using near-linear storage. <p> It contains most of the references on simplex and semialgebraic range searching. * Chiang and Tamassia [48]: A survey of dynamic data structures. * Goodman et al. [63]: A survey of stabbing problems and related topics. * Matousek <ref> [86] </ref>: A comprehensive survey of simplex range searching and re lated topics.
Reference: [87] <author> N. Megiddo, </author> <title> Applying parallel computation algorithms in the design of serial algorithms, </title> <journal> J. ACM, </journal> <volume> 30 (1983), </volume> <pages> 852-865. </pages>
Reference-contexts: This problem arises in ray tracing, hidden-surface removal, radiosity, and other graphics problems. Recently, efficient solutions to many other geometric problems have also been developed using ray-shooting data structures. A general approach to the ray-shooting problem, using segment intersection-detection structures and Megiddo's parametric searching technique <ref> [87] </ref>, was proposed by Agarwal and Matousek [5]. The basic idea of their approach is as follows. Suppose we have a segment intersection-detection data structure for S, based on partition trees. Let be a query ray.
Reference: [88] <author> K. Mehlhorn, </author> <title> Multi-dimensional Searching and Computational Geometry, </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1984. </year>
Reference-contexts: Because of its numerous applications, orthogonal range searching has been studied extensively for the last 25 years. A survey of earlier results can be found in the books by Mehlhorn <ref> [88] </ref> and Preparata and Shamos [99]. In this section we review the more recent data structures and the lower bounds. GLOSSARY EPM A pointer machine with + operation. APM A pointer machine with basic arithmetic and shift operations. <p> Overmars [96] showed that if S is a subset of a ufi u grid U in the plane and the Range Searching 5 TABLE 2 Higher-dimensional orthogonal range reporting S (n) Q (n) Source Notes n log d1+" n log n d1 + k <ref> [88] </ref> Pointer machine m log n d1 [30] Semigroup model n log d1 n log d1 n + k [114] Fusion trees n log d1 n log d2 n log fl n + k [101] P fl -trees vertices of query rectangles are also a subset of U , then a <p> Can a ray-shooting query in a nonconvex polytope in R 3 be answered any faster than a ray-shooting query amid triangles? 4. No nontrivial lower bounds are known for the ray-shooting problem. 6 SOURCES AND RELATED MATERIAL BOOKS AND MONOGRAPHS * Mehlhorn <ref> [88] </ref>: A text book on computational geometry. The first part of the book covers multidimensional searching. Range Searching 23 * Mulmuley [94]: A text book on randomized techniques in computational geometry.
Reference: [89] <author> K. Mehlhorn and S. Naher, </author> <title> Dynamic fractional cascading, </title> <journal> Algorithmica, </journal> <volume> 5 (1990), </volume> <pages> 215-241. </pages>
Reference-contexts: TABLE 7 Dynamic 2D orthogonal range-searching Mode S (n) Q (n) U (n) Source Counting n log 2 n log 2 n [27] n k log 2 (2n=k) log 2 n [27] Reporting n log n log n log log n + k log n log log n <ref> [89] </ref> n log n log 2+" n + k log log n Semigroup n log 4 n log 4 n [27] Range Searching 15 Since an arbitrary sequence of deletions is difficult to handle in general, researchers have examined whether a random sequence of insertions and deletions can be handled efficiently; <p> If we also allow insertions and deletions, the query and update time are O (log n log log n + k) and O (log n log log n) <ref> [89] </ref>, or O (log 2 n + k) and O (log n) using only linear space [46]; if we allow only insertions, the query and update time become O (log n + k) and O (log n) [71]. A problem related to segment intersection searching is the stabbing problem.
Reference: [90] <author> J. S. B. Mitchell, </author> <title> Shortest paths among obstacles in the plane, </title> <booktitle> Proc. 9th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1993, </year> <pages> pp. 308-317. </pages>
Reference-contexts: Instead of dragging a segment along a ray, one can ask the same question for dragging along a more complex trajectory (along a curve and allowing both translation and rotation). These problems arise quite often in motion planning and manufacturing. See <ref> [90, 101] </ref> for a few such examples. OPEN PROBLEMS 1. Ray shooting amid a set of intersecting arcs in the plane. 2. Ray shooting amid triangles in R 3 in n=m 1=3 . 3.
Reference: [91] <author> J. S. B. Mitchell, D. M. Mount, and S. Suri, </author> <title> Query-sensitive ray shooting, </title> <booktitle> Proc. 10th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1994, </year> <pages> pp. 359-368. </pages>
Reference-contexts: Hershberger and Suri [69] showed that a triangulation with O (log n) query time can be constructed when S is the boundary of a simple polygon in the plane. See <ref> [3, 91, 54, 78] </ref> and the references therein for other ray-shooting results using this approach. Agarwal et al. [3] proved worst-case bounds for many cases on the number of cells in the subdivision that a line can intersect.
Reference: [92] <author> K. Mulmuley, </author> <title> Randomized multidimensional search trees: dynamic sampling, </title> <booktitle> Proc. 7th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1991, </year> <pages> pp. 121-131. </pages>
Reference-contexts: log n log 2+" n + k log log n Semigroup n log 4 n log 4 n [27] Range Searching 15 Since an arbitrary sequence of deletions is difficult to handle in general, researchers have examined whether a random sequence of insertions and deletions can be handled efficiently; see <ref> [92, 93, 102] </ref>. Mulmuley [92] has shown that there exists a dynamic halfspace range-reporting data structure that can process a random update sequence of length m in expected time O (m bd=2c+" ) and can answer a halfspace range-reporting query in time O (k log n). <p> Mulmuley <ref> [92] </ref> has shown that there exists a dynamic halfspace range-reporting data structure that can process a random update sequence of length m in expected time O (m bd=2c+" ) and can answer a halfspace range-reporting query in time O (k log n).
Reference: [93] <author> K. Mulmuley, </author> <title> Randomized multidimensional search trees: further results in dynamic sampling, </title> <booktitle> Proc. 32nd Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <year> 1991, </year> <pages> pp. 216-227. </pages>
Reference-contexts: log n log 2+" n + k log log n Semigroup n log 4 n log 4 n [27] Range Searching 15 Since an arbitrary sequence of deletions is difficult to handle in general, researchers have examined whether a random sequence of insertions and deletions can be handled efficiently; see <ref> [92, 93, 102] </ref>. Mulmuley [92] has shown that there exists a dynamic halfspace range-reporting data structure that can process a random update sequence of length m in expected time O (m bd=2c+" ) and can answer a halfspace range-reporting query in time O (k log n).
Reference: [94] <author> K. Mulmuley, </author> <title> Computational Geometry: An Introduction Through Randomized Algorithms, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1993. </year>
Reference-contexts: Theorem 3 implies that any finite range space of VC-dimension d has an "-net of size (1 + o (1))(d=") log 1=". The "-nets have turned out to be a powerful tool in developing divide-and-conquer algorithms for several geometric problems and in learning theory; see the books by Mulmuley <ref> [94] </ref> and Anthony and Biggs [17]. Building on the theory developed by Haussler and Welzl, Welzl [111] proved that one can construct a spanning path of S of O (n 11=d log n) stabbing number; the bound was improved by Chazelle and Welzl [45] to fi (n 11=d ). <p> No nontrivial lower bounds are known for the ray-shooting problem. 6 SOURCES AND RELATED MATERIAL BOOKS AND MONOGRAPHS * Mehlhorn [88]: A text book on computational geometry. The first part of the book covers multidimensional searching. Range Searching 23 * Mulmuley <ref> [94] </ref>: A text book on randomized techniques in computational geometry. Chapters 6 and 8 cover range-searching, intersection-searching, and ray-shooting data structures. * Preparata and Shamos [99]: A text book on basic topics in computational geometry.
Reference: [95] <author> M. H. Overmars, </author> <title> The design of dynamic data structures, </title> <publisher> Springer-Verlag, </publisher> <year> 1983. </year> <title> Range Searching 29 </title>
Reference-contexts: If we allow only insertions (i.e., a point cannot be deleted from the structure), the static data structure can be modified, using the standard techniques <ref> [22, 95] </ref>, so that a point can be inserted in time O (P (n) log n=n) and a query can be answered in time O (Q (n) log n), where Q (n) is the query time of the original static data structure; in some cases the logarithmic overheard in the query
Reference: [96] <author> M. H. Overmars, </author> <title> Efficient data structures for range searching on a grid, </title> <journal> J. Algorithms, </journal> <volume> 9 (1988), </volume> <pages> 254-275. </pages>
Reference-contexts: Table 2 summarizes a few additional results on higher-dimensional orthogonal range-searching results. Overmars <ref> [96] </ref> showed that if S is a subset of a ufi u grid U in the plane and the Range Searching 5 TABLE 2 Higher-dimensional orthogonal range reporting S (n) Q (n) Source Notes n log d1+" n log n d1 + k [88] Pointer machine m log n d1 [30]
Reference: [97] <author> M. H. Overmars and A. F. van der Stappen, </author> <title> Range searching and point location among fat objects, </title> <editor> Algorithms - ESA'94 (J. van Leeuwen, ed.), </editor> <volume> LNCS 855, </volume> <month> September </month> <year> 1994, </year> <pages> pp. 240-253. </pages>
Reference-contexts: Its query time is O (log n + 1=ffi d1 ). Overmars and van der Stappen <ref> [97] </ref> developed fast data structures for the special case in which the ranges are `fat' and have bounded size. See [62, 70] for some other `heuristic based' data structures.
Reference: [98] <author> M. Pellegrini and P. Shor, </author> <title> Finding stabbing lines in 3-space, </title> <journal> Discrete Comput. Geom., </journal> <volume> 8 (1992), </volume> <pages> 191-208. </pages>
Reference-contexts: Such queries can also be answered efficiently using semialgebraic range-searching data structures. A line-stabbing query amid a set of triangles in R 3 can be answered in O (log n) time using O (n 2+" ) storage <ref> [98] </ref>. The Range Searching 19 paper by Goodman et al. [63] is an excellent survey of this topic.
Reference: [99] <author> F. P. Preparata and M. I. Shamos, </author> <title> Computational Geometry: An Introduction, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: Because of its numerous applications, orthogonal range searching has been studied extensively for the last 25 years. A survey of earlier results can be found in the books by Mehlhorn [88] and Preparata and Shamos <ref> [99] </ref>. In this section we review the more recent data structures and the lower bounds. GLOSSARY EPM A pointer machine with + operation. APM A pointer machine with basic arithmetic and shift operations. <p> The first part of the book covers multidimensional searching. Range Searching 23 * Mulmuley [94]: A text book on randomized techniques in computational geometry. Chapters 6 and 8 cover range-searching, intersection-searching, and ray-shooting data structures. * Preparata and Shamos <ref> [99] </ref>: A text book on basic topics in computational geometry. Chapters 2 includes earlier results on orthogonal range searching. * Foley et al. [58]: A text book on graphics.
Reference: [100] <author> S. Ramaswamy and S. Subramanian, </author> <title> Path caching: A technique for optimal external searching, </title> <booktitle> Proc. 13th ACM Symp. on Principles of Database Systems, </booktitle> <year> 1994, </year> <pages> pp. 25-35. </pages>
Reference-contexts: TABLE 8 Secondary memory structures d Range Q (n) S (n) Source d = 1 Interval log B n + k=B n=B Quadrant log B n + k=B (n=B) log log B <ref> [100] </ref> d = 2 3-sided rect. log B n + k=B + log fl B n=B [106] 3-sided rect. log B n + k=B (n=B) log B log log B [100] Rectangle log B n + k=B + log fl B (n=B) log (n=B)= log log B n [106] d = <p> d = 1 Interval log B n + k=B n=B Quadrant log B n + k=B (n=B) log log B <ref> [100] </ref> d = 2 3-sided rect. log B n + k=B + log fl B n=B [106] 3-sided rect. log B n + k=B (n=B) log B log log B [100] Rectangle log B n + k=B + log fl B (n=B) log (n=B)= log log B n [106] d = 3 Octant fi (n; B) log B n + k=B (n=B) log (n=B) [110] Rectangle fi (n; B) log B n + k=B (n=B) log 4 (n=B) [110] 16 Pankaj
Reference: [101] <author> E. Schomer and C. Thiel, </author> <title> Efficient collision detection for moving polyhedra, </title> <booktitle> Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1995, </year> <pages> pp. 51-60. </pages>
Reference-contexts: reporting S (n) Q (n) Source Notes n log d1+" n log n d1 + k [88] Pointer machine m log n d1 [30] Semigroup model n log d1 n log d1 n + k [114] Fusion trees n log d1 n log d2 n log fl n + k <ref> [101] </ref> P fl -trees vertices of query rectangles are also a subset of U , then a range-reporting query can be answered in time O ( p log u+k), using O (n log n) storage and preprocessing; or in O (log log u + k) time, using O (n log n) <p> Instead of dragging a segment along a ray, one can ask the same question for dragging along a more complex trajectory (along a curve and allowing both translation and rotation). These problems arise quite often in motion planning and manufacturing. See <ref> [90, 101] </ref> for a few such examples. OPEN PROBLEMS 1. Ray shooting amid a set of intersecting arcs in the plane. 2. Ray shooting amid triangles in R 3 in n=m 1=3 . 3.
Reference: [102] <author> O. Schwarzkopf, </author> <title> Dynamic maintenance of geometric structures made easy, </title> <booktitle> Proc. 32nd Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <year> 1991, </year> <pages> pp. 197-206. </pages>
Reference-contexts: log n log 2+" n + k log log n Semigroup n log 4 n log 4 n [27] Range Searching 15 Since an arbitrary sequence of deletions is difficult to handle in general, researchers have examined whether a random sequence of insertions and deletions can be handled efficiently; see <ref> [92, 93, 102] </ref>. Mulmuley [92] has shown that there exists a dynamic halfspace range-reporting data structure that can process a random update sequence of length m in expected time O (m bd=2c+" ) and can answer a halfspace range-reporting query in time O (k log n).
Reference: [103] <author> O. Schwarzkopf, </author> <title> Dynamic Maintenance of Convex Polytopes and Related Structures, </title> <type> Ph.D. Thesis, </type> <institution> Fachbereich Mathematik, Freie Universitat Berlin, </institution> <address> Berlin, Germany, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Chapters 2 includes earlier results on orthogonal range searching. * Foley et al. [58]: A text book on graphics. Discusses practical data structures for ray tracing and intersection searching. * de Berg [50]: A monograph on ray shooting and related problems. * Schwarzkopf <ref> [103] </ref>: This PhD thesis includes many results on randomized dynamic data structures. SURVEY PAPERS * Bentley and Friedman [21]: A survey of earlier results on orthogonal range searching. * Chazelle [32]: A general survey of recent developments in computational geometry.
Reference: [104] <author> M. Smid, </author> <title> Maintaining the minimal distance of a point set in less than linear time, </title> <journal> Algorithms Rev., </journal> <volume> 2 (1991), </volume> <pages> 33-44. </pages>
Reference: [105] <author> D. M. H. Sommerville, </author> <title> Analytical Geometry in Three Dimensions, </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1951. </year>
Reference-contexts: One of the most widely used linearization in computational geometry is the so-called Plucker coordinates, which map a line in R 3 to a point in R 5 ; see <ref> [39, 105] </ref> for more details on Plucker coordinates. Agarwal and Matousek [6] have also proposed another approach to answer f - range queries by extending Theorem 4 to Tarski cells and by constructing partition trees using this extension.
Reference: [106] <author> S. Subramanian and S. Ramaswamy, </author> <title> The p-range tree: A new data structure for range searching in secondary memory, </title> <booktitle> Proc. 6th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1995, </year> <pages> pp. 378-387. </pages>
Reference-contexts: Table 8 summarizes the known results on secondary-memory structures for orthogonal range searching; here fi (n) = log log log B n. The data structure by Sub-ramanian and Ramaswamy <ref> [106] </ref> for 3-sided queries supports insertion/deletion of a point in time O (log B n + (log B n) 2 =B). <p> TABLE 8 Secondary memory structures d Range Q (n) S (n) Source d = 1 Interval log B n + k=B n=B Quadrant log B n + k=B (n=B) log log B [100] d = 2 3-sided rect. log B n + k=B + log fl B n=B <ref> [106] </ref> 3-sided rect. log B n + k=B (n=B) log B log log B [100] Rectangle log B n + k=B + log fl B (n=B) log (n=B)= log log B n [106] d = 3 Octant fi (n; B) log B n + k=B (n=B) log (n=B) [110] Rectangle fi <p> log B [100] d = 2 3-sided rect. log B n + k=B + log fl B n=B <ref> [106] </ref> 3-sided rect. log B n + k=B (n=B) log B log log B [100] Rectangle log B n + k=B + log fl B (n=B) log (n=B)= log log B n [106] d = 3 Octant fi (n; B) log B n + k=B (n=B) log (n=B) [110] Rectangle fi (n; B) log B n + k=B (n=B) log 4 (n=B) [110] 16 Pankaj K. Agarwal OPEN PROBLEMS 1.
Reference: [107] <author> R. E. Tarjan, </author> <title> Data Structures and Network Algorithms, </title> <institution> Society for Industrial and Applied Mathematics, </institution> <address> Philadelphia, PA, </address> <year> 1987. </year>
Reference-contexts: We assume that each memory cell can store log n bits. The upper bounds will be given on pointer-machine or RAM models, which are described in <ref> [15, 107] </ref>. The main difference between the two models is that on the pointer machine a memory cell can be accessed only through a series of pointers while in the RAM model any memory cell can be accessed in constant time.
Reference: [108] <author> P. M. Vaidya, </author> <title> Space-time tradeoffs for orthogonal range queries, </title> <journal> SIAM J. Comput., </journal> <volume> 18 (1989), </volume> <pages> 748-758. </pages>
Reference-contexts: Yao [117] proved a lower bound for the 2D static orthogonal range searching data structures. He showed that if only m units of storage is available, a query, under the semigroup model, takes (log n= log ((m=n) log n)) in the worst case. See also <ref> [108] </ref>. Later Chazelle extended the lower bound to higher dimensions and improved it slightly [30]. In particular he showed that Theorem 1 (Chazelle [30]) Let (S; ) be a faithful semigroup.
Reference: [109] <author> V. K. Vaishnavi and D. Wood, </author> <title> Rectilinear line segment intersection, layered segment trees and dynamization, </title> <journal> J. Algorithms, </journal> <volume> 3 (1982), </volume> <pages> 160-176. </pages>
Reference-contexts: In this case a query can be answered in time O (log n + k) using O (n log n) space and preprocessing <ref> [109] </ref>.
Reference: [110] <author> J. Vitter and D. Vengroff, </author> <title> Efficient 3-d range searching in external memory, </title> <booktitle> Proc. 28th ACM Symp. Theory of Computing, </booktitle> <year> 1996, </year> <note> p. to appear. </note>
Reference-contexts: B n=B [106] 3-sided rect. log B n + k=B (n=B) log B log log B [100] Rectangle log B n + k=B + log fl B (n=B) log (n=B)= log log B n [106] d = 3 Octant fi (n; B) log B n + k=B (n=B) log (n=B) <ref> [110] </ref> Rectangle fi (n; B) log B n + k=B (n=B) log 4 (n=B) [110] 16 Pankaj K. Agarwal OPEN PROBLEMS 1. Can a ball range-counting query be answered in O (log n) time using O (n 2 ) space? 2. <p> log B [100] Rectangle log B n + k=B + log fl B (n=B) log (n=B)= log log B n [106] d = 3 Octant fi (n; B) log B n + k=B (n=B) log (n=B) <ref> [110] </ref> Rectangle fi (n; B) log B n + k=B (n=B) log 4 (n=B) [110] 16 Pankaj K. Agarwal OPEN PROBLEMS 1. Can a ball range-counting query be answered in O (log n) time using O (n 2 ) space? 2. Can a f range-counting query be answered in time O (n 11=d+" ) using near linear space? 3.
Reference: [111] <author> E. Welzl, </author> <title> Partition trees for triangle counting and other range searching problems, </title> <booktitle> Proc. 4th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1988, </year> <pages> pp. 23-33. </pages>
Reference-contexts: The "-nets have turned out to be a powerful tool in developing divide-and-conquer algorithms for several geometric problems and in learning theory; see the books by Mulmuley [94] and Anthony and Biggs [17]. Building on the theory developed by Haussler and Welzl, Welzl <ref> [111] </ref> proved that one can construct a spanning path of S of O (n 11=d log n) stabbing number; the bound was improved by Chazelle and Welzl [45] to fi (n 11=d ).
Reference: [112] <author> E. Welzl, </author> <title> On spanning trees with low crossing numbers, </title> <booktitle> in: ??, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 594, </volume> <publisher> Springer-Verlag, </publisher> <year> 1992, </year> <pages> pp. 233-249. </pages>
Reference-contexts: But this technique does not give a linear-size data structure with O (n 11=d log n) query time, for d 3, under any reasonable model of computation (e.g., pointer machine, RAM), See <ref> [1, 82, 112] </ref> for other applications of spanning trees with low stabbing number. Matousek and Welzl [81] gave an entirely different algorithm for the halfspace range-counting problem in the plane, using a combinatorial result of Erd-os and Szekeres [57].
Reference: [113] <author> D. E. Willard, </author> <note> Polygon retrieval, SIAM J. Comput., 11 (1982), 149-165. 30 Pankaj K. Agarwal </note>
Reference-contexts: No nontrivial lower bound was known under the group model until Chazelle's recent result [33]. LINEAR-SIZE DATA STRUCTURES Most of the linear-size data structures for simplex range searching are based on the so-called partition trees, originally introduced by Willard <ref> [113] </ref>. His partition tree is a 4-way tree, constructed as follows. Let us assume that n is of the form 4 k for some integer k, and that the points of S are in general position.
Reference: [114] <author> D. E. Willard, </author> <title> Applications of the fusion tree method to computational geometry and searching, </title> <booktitle> Proc. 3rd ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <year> 1992, </year> <pages> pp. 286-296. </pages>
Reference-contexts: grid U in the plane and the Range Searching 5 TABLE 2 Higher-dimensional orthogonal range reporting S (n) Q (n) Source Notes n log d1+" n log n d1 + k [88] Pointer machine m log n d1 [30] Semigroup model n log d1 n log d1 n + k <ref> [114] </ref> Fusion trees n log d1 n log d2 n log fl n + k [101] P fl -trees vertices of query rectangles are also a subset of U , then a range-reporting query can be answered in time O ( p log u+k), using O (n log n) storage and
Reference: [115] <author> D. E. Willard, </author> <title> Applications of range query theory to relational data base join and selection operations, </title> <journal> J. Comput. Sys. Sci., </journal> <volume> 52 (1996), </volume> <pages> 157-169. </pages>
Reference-contexts: This is an abstraction of the `multi-key' searching; see <ref> [21, 115] </ref>. For example, the points of S may correspond to employees of a company, each coordinate corresponding to a key such as age, salary, experience, etc.
Reference: [116] <author> A. C. Yao, </author> <title> Space-time trade-off for answering range queries, </title> <booktitle> Proc. 14th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1982, </year> <pages> pp. 128-136. </pages>
Reference-contexts: In the off-line version, given A and m rectangles q 1 ; : : : ; q m , we wish to compute (A; q i ) for every i m. Yao <ref> [116] </ref> showed that, for d = 1, a partial-sum query can be answered in O (ff (n)) time using O (n) space.
Reference: [117] <author> A. C. Yao, </author> <title> On the complexity of maintaining partial sums, </title> <journal> SIAM J. Comput., </journal> <volume> 14 (1985), </volume> <pages> 277-288. </pages>
Reference-contexts: He showed that a mixed sequence of n insertions, deletions, and queries takes (n log d n) time. These bounds were extended by Willard to a group model, under some fairly restrictive assumptions. Yao <ref> [117] </ref> proved a lower bound for the 2D static orthogonal range searching data structures. He showed that if only m units of storage is available, a query, under the semigroup model, takes (log n= log ((m=n) log n)) in the worst case. See also [108]. <p> They also showed that the off-line version takes (n + mff (m; n)) time for any fixed d 1; here ff (m; n) is the inverse Ackerman function. If points are allowed to insert into S, the query time is (log n= log log n) <ref> [117] </ref> for the one-dimensional case; the bounds were extended by Chazelle [30] to ((log n= log log n) d ), for any fixed dimension d. * Rectangle-rectangle searching: Preprocess a set S of n rectangles in R d so that for a query rectangle q, the rectangles of S that intersect
Reference: [118] <author> A. C. Yao and F. F. Yao, </author> <title> A general approach to D-dimensional geometric queries, </title> <booktitle> Proc. 17th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1985, </year> <pages> pp. 163-168. </pages>
Reference-contexts: log n p Tarski cell n n 1=2+" [6] Partition tree d 3 Tarski cell n n 1 1 2d3 +" [6] Partition tree Tarski cell n n 1 1 +" [6] Linearization One approach to answer f -range queries is to use linearization, originally proposed by Yao and Yao <ref> [118] </ref>. We represent the polynomial f (x; a) in the form f (x; a) = 0 (a) + 1 (a)' 1 (x) + + k (a)' k (x) where ' 1 ; : : : ; ' k ; 0 ; : : : ; k are real functions.
References-found: 118

