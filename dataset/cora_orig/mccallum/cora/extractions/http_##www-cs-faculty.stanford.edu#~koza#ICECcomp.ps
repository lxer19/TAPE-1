URL: http://www-cs-faculty.stanford.edu/~koza/ICECcomp.ps
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: 
Email: koza@cs.stanford.edu  fhb3@slip.net  jlohn7@leland.stanford.edu  makeane@ix.netcom.com  dandre@cs.berkeley.edu  
Title: Automated Synthesis of Computational Circuits Using Genetic Programming  
Author: John R. Koza Forrest H Bennett III Jason Lohn Frank Dunlap Martin A. Keane David Andre 
Web: http://www-cs faculty.stanford.edu/~koza/  
Address: 258 Gates Building  Stanford, California 94305-9020  Stanford, California 94305  Stanford, California 94305  Palo Alto, California  5733 West Grover Chicago, Illinois 60630  Berkeley, California  
Affiliation: Computer Science Dept.  Stanford University  Visiting Scholar Computer Science Dept. Stanford University  Visiting Scholar Computer Science Dept. Stanford University  Dunlap Consulting  Martin Keane Inc.  Computer Science Division University of California  
Abstract: Analog electrical circuits that perform mathematical functions (e.g., cube root, square) are called computational circuits. Computational circuits are of special practical importance when the small number of required mathematical functions does not warrant converting an analog signal into a digital signal, performing the mathematical function in the digital domain, and then converting the result back to the analog domain. The design of computational circuits is difficult even for mundane mathematical functions and often relies on the clever exploitation of some aspect of the underlying device physics of the components. Moreover, implementation of each different mathematical function typically requires an entirely different clever insight. This paper demonstrates that computational circuits can be designed without such problemspecific insights using a single uniform approach involving genetic programming. Both the circuit topology and the sizing of all circuit components are created by genetic programming. This uniform approach to the automated synthesis of computational circuits is illustrated by evolving circuits that perform the cube root function (for which no circuit was found in the published literature) as well as for the square root, square, and cube functions.
Abstract-found: 1
Intro-found: 1
Reference: <author> Andre, David and Koza, John R. </author> <year> 1996. </year> <title> Parallel genetic programming: A scalable implementation using the transputer architecture. </title> <editor> In Angeline, P. J. and Kinnear, K. E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming 2. </booktitle> <address> Cambridge: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Various electrical circuits have been designed using genetic programming, including lowpass filters (Koza, Bennett, Andre, and Keane 1996a, 1996b), crossover (woofer and tweeter) filters (Koza, Bennett, Andre, and Keane 1996c), asymmetric bandpass filters (Koza, Bennett, Andre, and Keane 1996d), and a 60 dB operational amplifier <ref> (Bennett, Koza, Andre, and Keane 1996) </ref>, and the use of automatically defined functions and architecture-altering operations for creating useful electrical subcircuits (Koza, Andre, Bennett, and Keane 1996). 3 . <p> Keane 1996a, 1996b), crossover (woofer and tweeter) filters (Koza, Bennett, Andre, and Keane 1996c), asymmetric bandpass filters (Koza, Bennett, Andre, and Keane 1996d), and a 60 dB operational amplifier (Bennett, Koza, Andre, and Keane 1996), and the use of automatically defined functions and architecture-altering operations for creating useful electrical subcircuits <ref> (Koza, Andre, Bennett, and Keane 1996) </ref>. 3 .
Reference: <editor> Angeline, Peter J. and Kinnear, Kenneth E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming 2. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Babanezhad, J. N. and Temes, G. C. </author> <year> 1986. </year> <title> Analog MOS Computational Circuits. </title> <booktitle> Proceedings of the IEEE Circuits and System International Symposium. </booktitle> <pages> Pages 11561160. </pages>
Reference: <author> Bennett III, Forrest H, Koza, John R., Andre, David, and Keane, Martin A. </author> <year> 1996. </year> <title> Evolution of a 60 Decibel op amp using genetic programming. </title> <booktitle> In Proceedings of International Conference on Evolvable Systems: From Biology to Hardware. Lecture Notes in Computer Science. </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Various electrical circuits have been designed using genetic programming, including lowpass filters (Koza, Bennett, Andre, and Keane 1996a, 1996b), crossover (woofer and tweeter) filters (Koza, Bennett, Andre, and Keane 1996c), asymmetric bandpass filters (Koza, Bennett, Andre, and Keane 1996d), and a 60 dB operational amplifier <ref> (Bennett, Koza, Andre, and Keane 1996) </ref>, and the use of automatically defined functions and architecture-altering operations for creating useful electrical subcircuits (Koza, Andre, Bennett, and Keane 1996). 3 . <p> Keane 1996a, 1996b), crossover (woofer and tweeter) filters (Koza, Bennett, Andre, and Keane 1996c), asymmetric bandpass filters (Koza, Bennett, Andre, and Keane 1996d), and a 60 dB operational amplifier (Bennett, Koza, Andre, and Keane 1996), and the use of automatically defined functions and architecture-altering operations for creating useful electrical subcircuits <ref> (Koza, Andre, Bennett, and Keane 1996) </ref>. 3 .
Reference: <author> Gilbert, Barrie. </author> <year> 1968. </year> <title> A precise four-quadrant multiplier with subnanosecond response. </title> <journal> IEEE Journal of SolidState Circuits. Volume SC-3. </journal> <volume> Number 4. </volume> <month> December </month> <year> 1968. </year> <pages> Pages 365373. </pages>
Reference-contexts: The design of computational circuits is difficult even for mundane mathematical functions and often relies on clever exploitation of some aspect of the underlying physics of the components. Each function usually requires a different clever insight <ref> (Gilbert 1968, Sheingold 1976, Babanezhad and Temes 1986) </ref>. This paper demonstrates that computational circuits can be designed by means of a single uniform approach using genetic programming. Both the circuit topology and the sizing of all circuit components are created by genetic programming.
Reference: <author> Gruau, Frederic. </author> <year> 1996. </year> <title> Artificial cellular development in optimization and compilation. </title> <editor> In Sanchez, Eduardo and Tomassini, Marco (editors). </editor> <year> 1996. </year> <title> Towards Evolvable Hardware. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 1062. </volume> <publisher> Berlin: Springer-Verlag. </publisher> <pages> Pages 4875. </pages>
Reference: <author> Higuchi, Tetsuya, Niwa, Tatsuya, Tanaka, Toshio, Iba, Hitoshi, de Garis, Hugo, and Furuya, Tatsumi. </author> <year> 1993. </year> <editor> In Meyer, Jean-Arcady, Roitblat, Herbert L. and Wilson, Stewart W. (editors). </editor> <booktitle> From Animals to Animats 2: Proceedings of the Second International Conference on Simulation of Adaptive Behavior. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher> <year> 1993. </year> <pages> Pages 417 424. </pages>
Reference: <author> Holland, John H. </author> <year> 1975. </year> <booktitle> Adaptation in Natural and Artificial Systems. </booktitle> <address> Ann Arbor, MI: </address> <publisher> University of Michigan Press. </publisher>
Reference: <editor> Kinnear, Kenneth E. Jr. (editor). </editor> <booktitle> 1994. Advances in Genetic Programming. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1992. </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1994a. </year> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Connection-modifying functions have one or more construction-continuing subtrees, but no arithmetic-performing subtrees. Component-creating functions have one construction-continuing subtree and typically have one arithmetic-performing subtree. This constrained syntactic structure is preserved by using structure-preserving crossover with point typing <ref> (Koza 1994a) </ref>. Component-creating functions insert a component into the developing circuit and assign component value (s) to the component. Each component-creating function has a writing head that points to an associated highlighted component in the developing circuit and modifies the highlighted component in a specified way.
Reference: <author> Koza, John R. </author> <year> 1994b. </year> <title> Genetic Programming II Videotape: The Next Generation. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1995. </year> <title> Gene duplication to enable genetic programming to concurrently evolve both the architecture and work-performing steps of a computer program. </title> <booktitle> Proceedings of the 14th International Joint Conference on Artificial Intelligence. </booktitle> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann. </publisher> <pages> Pages 734740. </pages>
Reference: <author> Koza, John R., Andre, David, Bennett III, Forrest H, and Keane, Martin A. </author> <year> 1996. </year> <title> Use of automatically defined functions and architecture-altering operations in automated circuit synthesis using genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Various electrical circuits have been designed using genetic programming, including lowpass filters (Koza, Bennett, Andre, and Keane 1996a, 1996b), crossover (woofer and tweeter) filters (Koza, Bennett, Andre, and Keane 1996c), asymmetric bandpass filters (Koza, Bennett, Andre, and Keane 1996d), and a 60 dB operational amplifier <ref> (Bennett, Koza, Andre, and Keane 1996) </ref>, and the use of automatically defined functions and architecture-altering operations for creating useful electrical subcircuits (Koza, Andre, Bennett, and Keane 1996). 3 . <p> Keane 1996a, 1996b), crossover (woofer and tweeter) filters (Koza, Bennett, Andre, and Keane 1996c), asymmetric bandpass filters (Koza, Bennett, Andre, and Keane 1996d), and a 60 dB operational amplifier (Bennett, Koza, Andre, and Keane 1996), and the use of automatically defined functions and architecture-altering operations for creating useful electrical subcircuits <ref> (Koza, Andre, Bennett, and Keane 1996) </ref>. 3 .
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996a. </year> <title> Toward evolution of electronic animals using genetic programming. </title> <booktitle> Artificial Life V: Proceedings of the Fifth International Workshop on the Synthesis and Simulation of Living Systems. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Space does not permit a detailed description of each function herein. Various electrical circuits have been designed using genetic programming, including lowpass filters <ref> (Koza, Bennett, Andre, and Keane 1996a, 1996b) </ref>, crossover (woofer and tweeter) filters (Koza, Bennett, Andre, and Keane 1996c), asymmetric bandpass filters (Koza, Bennett, Andre, and Keane 1996d), and a 60 dB operational amplifier (Bennett, Koza, Andre, and Keane 1996), and the use of automatically defined functions and architecture-altering operations for creating
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996b. </year> <title> Automated design of both the topology and sizing of analog electrical circuits using genetic programming. </title> <editor> In Gero, John S. and Sudweeks, Fay (editors). </editor> <booktitle> Artificial Intelligence in Design '96. </booktitle> <address> Dordrecht: </address> <publisher> Kluwer. </publisher> <pages> Pages 151-170. </pages>
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996c. </year> <title> Four problems for which a computer program evolved by genetic programming is competitive with human performance. </title> <booktitle> Proceedings of the 1996 IEEE International Conference on Evolutionary Computation. </booktitle> <publisher> IEEE Press. </publisher> <pages> Pages 110. </pages>
Reference-contexts: Space does not permit a detailed description of each function herein. Various electrical circuits have been designed using genetic programming, including lowpass filters (Koza, Bennett, Andre, and Keane 1996a, 1996b), crossover (woofer and tweeter) filters <ref> (Koza, Bennett, Andre, and Keane 1996c) </ref>, asymmetric bandpass filters (Koza, Bennett, Andre, and Keane 1996d), and a 60 dB operational amplifier (Bennett, Koza, Andre, and Keane 1996), and the use of automatically defined functions and architecture-altering operations for creating useful electrical subcircuits (Koza, Andre, Bennett, and Keane 1996). 3 .
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996d. </year> <title> Automated WYWIWYG design of both the topology and component values of analog electrical circuits using genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Space does not permit a detailed description of each function herein. Various electrical circuits have been designed using genetic programming, including lowpass filters (Koza, Bennett, Andre, and Keane 1996a, 1996b), crossover (woofer and tweeter) filters (Koza, Bennett, Andre, and Keane 1996c), asymmetric bandpass filters <ref> (Koza, Bennett, Andre, and Keane 1996d) </ref>, and a 60 dB operational amplifier (Bennett, Koza, Andre, and Keane 1996), and the use of automatically defined functions and architecture-altering operations for creating useful electrical subcircuits (Koza, Andre, Bennett, and Keane 1996). 3 .
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996e. </year> <title> Reuse, parameterized reuse, and hierarchical reuse of substructures in evolving electrical circuits using genetic programming. </title> <booktitle> In Proceedings of International Conference on Evolvable Systems: From Biology to Hardware. Lecture Notes in Computer Science. </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag. </publisher>
Reference: <editor> Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Various electrical circuits have been designed using genetic programming, including lowpass filters (Koza, Bennett, Andre, and Keane 1996a, 1996b), crossover (woofer and tweeter) filters (Koza, Bennett, Andre, and Keane 1996c), asymmetric bandpass filters (Koza, Bennett, Andre, and Keane 1996d), and a 60 dB operational amplifier <ref> (Bennett, Koza, Andre, and Keane 1996) </ref>, and the use of automatically defined functions and architecture-altering operations for creating useful electrical subcircuits (Koza, Andre, Bennett, and Keane 1996). 3 . <p> Keane 1996a, 1996b), crossover (woofer and tweeter) filters (Koza, Bennett, Andre, and Keane 1996c), asymmetric bandpass filters (Koza, Bennett, Andre, and Keane 1996d), and a 60 dB operational amplifier (Bennett, Koza, Andre, and Keane 1996), and the use of automatically defined functions and architecture-altering operations for creating useful electrical subcircuits <ref> (Koza, Andre, Bennett, and Keane 1996) </ref>. 3 .
Reference: <author> Koza, John R., and Rice, J. P. </author> <year> 1992. </year> <title> Genetic Programming: The Movie. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher> <editor> Kruiskamp, Marinum Wilhelmus and Leenaerts, Domine. </editor> <year> 1995. </year> <title> DARWIN: CMOS opamp synthesis by means of a genetic algorithm. </title> <booktitle> Proceedings of the 32nd Design Automation Conference. </booktitle> <address> New York: </address> <institution> Association for Computing Machinery. </institution> <month> 433438. </month>
Reference: <author> Quarles, Thomas, Newton, A. R., Pederson, D. O., and Sangiovanni-Vincentelli, A. </author> <year> 1994. </year> <note> SPICE 3 Version 3F5 User's Manual. </note> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <address> CA. </address> <month> March </month> <year> 1994. </year>
Reference-contexts: The 217,000-line SPICE simulator was modified to run as a submodule within the genetic programming system. SPICE is a large family of programs written over several decades at the University of California at Berkeley for the simulation of analog, digital, and mixed analog/digital electrical circuits <ref> (Quarles et al. 1994) </ref>. The input to a SPICE simulation consists of a netlist describing the circuit to be analyzed and certain commands that instruct SPICE as to the type of analysis to be performed and output to be produced.
Reference: <author> Rutenbar, R. A. </author> <year> 1993. </year> <title> Analog design automation: Where are we? Where are we going? Proceedings of the l5th IEEE CICC. </title> <address> New York: </address> <publisher> IEEE. </publisher> <editor> 13.1.1-13.1.8. Sanchez, Eduardo and Tomassini, Marco (editors). </editor> <year> 1996. </year> <title> Towards Evolvable Hardware. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 1062. </volume> <publisher> Berlin: Springer-Verlag. </publisher> <editor> Sheingold, Daniel H. (editor). </editor> <year> 1976. </year> <title> Nonlinear Circuits Handbook. Norwood, MA: Analog Devices. </title>
Reference-contexts: The problem of circuit synthesis involves designing an electrical circuit that satisfies userspecified design goals. The design of analog circuits and mixed analog-digital circuits has not proved to be amenable to automation <ref> (Rutenbar 1993) </ref>. Thompson (1996) used a genetic algorithm to evolve a frequency discriminator on a Xilinx 6216 reconfigurable gate array in analog mode.

References-found: 23

