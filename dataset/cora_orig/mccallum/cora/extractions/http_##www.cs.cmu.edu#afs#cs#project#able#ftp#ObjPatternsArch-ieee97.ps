URL: http://www.cs.cmu.edu/afs/cs/project/able/ftp/ObjPatternsArch-ieee97.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/able/www/paper_abstracts/ObjPatternsArch-ieee.html
Root-URL: 
Title: Stylized Architecture, Design Patterns, and Objects September  Stylized Architecture, Design Patterns, and Objects  
Author: Robert T. Monroe, Drew Kompanek, Ralph Melton, and David Garlan 
Date: 1996 1  
Pubnum: 16,  
Abstract: Software system builders are increasingly recognizing the importance of exploiting design knowledge in the engineering of new systems. One way to do this is to define an architectural style for a collection of related systems. The style determines a coherent vocabulary of system design elements and rules for their composition. By structuring the design space for a family of related systems a style can, in principle, drastically simplify the process of building a system, reduce costs of implementation through reusable infrastructure, and improve system integrity through style-specific analyses and checks. Like architectural style, object-oriented design patterns attempt to capture and exploit design knowledge to ease the process of designing software systems and reusing proven designs. There are, however, significant differences in the roles and capabilities of architectural styles and object-oriented design patterns, as there are between architectural design and object-oriented design. In this paper we illustrate the relationship between software architecture and object-oriented design, as well as the relationship between architectural styles and design patterns. We begin by defining our terms and then proceed to compare and contrast the various approaches with examples. This research was sponsored by the National Science Foundation under Grant Number CCR-9357792, by the Wright Laboratory, Aeronautical Systems Center, Air Force Materiel Command, USAF, and the Advanced Research Projects Agency (ARPA) under grant number F33615-93-1-1330,and by Siemens Corporate Research. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of Wright Laboratory, the U.S.~Government, or Siemens Corporation. The U.S.~Government is authorized to reproduce and distribute reprints for Government purposes notwithstanding any copyright notation thereon. 
Abstract-found: 1
Intro-found: 1
Reference: [AAG93] <author> Abowd, G., Allen, R. and Garlan, D. </author> <title> Using Style to Give Meaning to Software Architecture. </title> <booktitle> In Proc. of SIGSOFT 93: Foundations of Software Engineering, Software Engineering Notes 118(3), </booktitle> <pages> pp 9-20, </pages> <publisher> ACM Press, </publisher> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: These convey widespread, if informal, understanding of the descriptions, and allow engineers to quickly communicate their designs to others. In many cases, such as those mentioned above, architectural idioms represent what has been termed an architectural style <ref> [AAG93] </ref>. As we describe later, an architectural style provides a design vocabulary (clients and servers, pipes and filters, blackboards and knowledge sources, etc.) together with rules for how elements in that vocabulary can be combined. In essence, a style provides a specialized design language for a specific class of systems. <p> An important class of architectural idioms constitute what some researchers have termed architectural styles. An architectural style characterizes a family of systems that are related by shared structural and semantic properties <ref> [AAG93] </ref>. More specifically, styles typically provide four things: 1) A Vocabulary of design elements component and connector types such as pipes, filters, clients, servers, parsers, databases, etc. 2) Design rules or constraints that determine the permitted compositions of those ele ments.
Reference: [AG94] <author> Robert Allen and David Garlan. </author> <title> Formalizing architectural connection. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <pages> pages 71-80, </pages> <address> Sorrento, Italy, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Thus, the graphical diagram actually has a firm semantic grounding for specification and analysis. For a more detailed description of the pipe and filter style please see <ref> [AG94] </ref>. The example system has two primary components (labelled as stage 1 and stage 2), each of which perform a transformation on a stream of data and then send the transformed data to the next component downstream. The components interact via the pipe protocol specified in figure 2.
Reference: [AG96] <author> Robert Allen and David Garlan, </author> <title> The Wright Architectural Description Language, </title> <type> Technical Report, </type> <institution> Carnegie Mel-lon University. </institution> <note> To be published, </note> <month> summer </month> <year> 1996. </year>
Reference-contexts: Figure 2 provides a more formal definition of the pipe-and-filter style using the Wright notation <ref> [AG96] </ref>, which is based on the CSP notation and calculus. <p> fi Sink.end-of-data fi Sink.close fi Killed = Source.write fi Killed [] Source.close fi Constraints " c : Connectors Type (c) = Pipe " c : Components Filter (c) where Filter (c:Component) = " p : Ports (c) Type (p) = DataInput Type (p) = DataOutput End Style architecture description language <ref> [AG96] </ref>. DataInput DataOutput DataOutput DataInput DataInput DataOutput September 16, 1996 9 pipe connector a first-class object. In this diagram we have introduced a pipe class that is used to connect two filters.
Reference: [GHJV95] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Although the principles underlying design patterns are not inherently tied to object-oriented design, much of the recent work in the area has focused on design patterns for composing objects <ref> [GHJV95, Pree95] </ref>. Like architectural styles, design patterns provide guidance for combining design elements in principled and proven ways. In this paper we illustrate the relationship between software architecture and object-oriented design, as well as the relationship between architectural styles and design patterns. <p> Figure 7 provides two design patterns done in the RTP/C style the forked-memory pattern and the message-replicator pattern. Each pattern is depicted here using the structure for pattern descriptions provided in <ref> [GHJV95] </ref>. The patterns have been trimmed of some details for simplicity and conservation of space. Along with a diagram, each pattern provides information describing its applicability, consequences of use, etc. The framework for specifying patterns given in [GHJV95] works well for architectural patterns as well as OO Patterns. <p> Each pattern is depicted here using the structure for pattern descriptions provided in <ref> [GHJV95] </ref>. The patterns have been trimmed of some details for simplicity and conservation of space. Along with a diagram, each pattern provides information describing its applicability, consequences of use, etc. The framework for specifying patterns given in [GHJV95] works well for architectural patterns as well as OO Patterns. The primary difference between architectural patterns and the OO patterns given in the [GHJV95] book and others like it is that architectural patterns address a a more specific set of design issues than the OO patterns. <p> Along with a diagram, each pattern provides information describing its applicability, consequences of use, etc. The framework for specifying patterns given in <ref> [GHJV95] </ref> works well for architectural patterns as well as OO Patterns. The primary difference between architectural patterns and the OO patterns given in the [GHJV95] book and others like it is that architectural patterns address a a more specific set of design issues than the OO patterns. Specifically, they address the architectural issues enumerated in section 2. <p> It follows, then, that OMT and the design patterns notations from the OOD patterns handbooks can be used to specify architectural patterns also. In fact, a number of the design patterns in <ref> [GHJV95] </ref> appear to be quite applicable for architectural design. <p> None of the listed patterns are limited to being only architectural patterns. All have applicability at lower levels of design (such as detailed design or implementation code). In addition to the architectural patterns listed here there are a number of patterns in <ref> [GHJV95] </ref> that do not address architectural issues. Examples include the Factory Method pattern (p.107) and the Flyweight pattern (p. 195). Both of these patterns deal with lower-level implementation issues than architectures generally specify. <p> September 16, 1996 16 instances and patterns of common architectural design idioms. As a result, the constructs and concepts underlying architectural style are comparable to those underlying an object-oriented design methodology like OMT, rather than a set of design patterns such as those given in <ref> [GHJV95] </ref>. A specific architectural style is better thought of as a language for building patterns than an instance of a design pattern itself. 6 Conclusion and Future Work Architectures, architectural style, objects, and design patterns represent complementary aspects of design.
Reference: [JC94] <author> G.R. Ribeiro Just and P.R. Freire Cunha. </author> <title> Deadlock-free configuration programming. </title> <booktitle> In Proceedings of the Second International Workshop on Configurable Distributed Systems. </booktitle> <month> March, </month> <year> 1994. </year>
Reference-contexts: Examples include schedula bility analysis for a style oriented toward real-time processing [Ves94] and deadlock detection for client-server message passing <ref> [JC94] </ref>. A specific, but important, special case of analysis is system generation: many styles support application generators (e.g., parser generators), or lead to reuse of certain shared implementation base (e.g., user interface frameworks or support for communication between distributed processes).
Reference: [Jef93] <author> Kevin Jeffay. </author> <title> The Real-Time Producer/Consumer Paradigm: A paradigm for the construction of efficient, predictable real-time systems. </title> <booktitle> Proc.of the 1993 ACM/SIGAPP Symposium on Applied Computing, </booktitle> <publisher> ACM Press, </publisher> <month> February </month> <year> 1993, </year> <pages> pp. 796-804. </pages>
Reference-contexts: This style, described as the Real-Time Producer/Consumer style (RTP/C) is designed to assist architects putting together real-time multimedia systems that will run on a uniprocessor computer. Detailed descriptions of the semantics and analyses underlying the RTP/C style can be found in <ref> [Jef93] </ref>. design vocabulary used by designs constructed in the style, design rules and constraints that specify how the elements may be composed, and analyses that can be performed on the design.
Reference: [Ker95] <author> N.L. Kerth. </author> <title> Caterpillars fate: A pattern language for transformations from analysis to design. </title> <editor> In James O. Coplien and Douglas C. Schmidt, editors, </editor> <booktitle> Pattern Languages of Program Design. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1995 </year>
Reference-contexts: Pattern languages then allow knowledgeable designers to codify proven designs, design fragments, and frameworks for subsequent reuse. Architectural styles are closely related to design patterns in two ways. First, architectural styles can be viewed as kinds of patterns [Sha96] or perhaps more accurately as pattern languages <ref> [Ker95] </ref>. Describing an architectural style as a design pattern requires, however, a rather broad definition of the scope of design patterns.
Reference: [Pree95] <author> Wolfgang Pree. </author> <title> Design Patterns for Object-Oriented Software Development, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Although the principles underlying design patterns are not inherently tied to object-oriented design, much of the recent work in the area has focused on design patterns for composing objects <ref> [GHJV95, Pree95] </ref>. Like architectural styles, design patterns provide guidance for combining design elements in principled and proven ways. In this paper we illustrate the relationship between software architecture and object-oriented design, as well as the relationship between architectural styles and design patterns. <p> A number of notations for expressing these patterns have arisen over the past four or five years, most of which have focused on patterns for object-oriented design <ref> [e.g. GHJV95, Pree95] </ref>. The utility of design patterns, however, extends beyond object-oriented design.
Reference: [PW92] <author> Dewayne Perry and Alexander Wolf. </author> <title> Foundations for the Study of Software Architecture. </title> <journal> ACM Software Engineering Notes, </journal> <volume> 17(4), </volume> <month> October </month> <year> 1992, </year> <pages> pp. 40-52. </pages>
Reference-contexts: By characterizing the crucial system design assumptions, a good architectural design guides the process of system enhancement indicating what aspects of the system can be easily changed without compromising system integrity. By analogy to building blueprints, an architectural design makes explicit the load-bearing walls <ref> [PW92] </ref> of the software. Thus a well-documented architecture helps not only at design time, but also throughout the lifecycle of a system. To satisfy its multiple roles throughout the software lifecycle, an architectural description must be simple enough to permit system-level reasoning and prediction.
Reference: [Rum+91] <author> James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy, William Lorensen, </author> <title> Object-oriented modeling and design, </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Figures 1 and 2 use common architectural notations (see ADL breakout box) to present an architectural view of the system. Figures 3-5 describe progressively more refined versions of the same system using the popular Object Modeling Technique (OMT) object-oriented design notation <ref> [Rum+91] </ref>. described in a pipe-and-filter style that specifies the design vocabulary of components and connectors. In the pipe-and-filter style all components are filters that transform a stream of data and provide specially typed input and output interfaces.
Reference: [SG96] <author> Mary Shaw and David Garlan. </author> <title> Software Architecture: Perspectives on an Emerging Discipline. </title> <publisher> Prentice Hall, </publisher> <year> 1996 </year>
Reference-contexts: Key issues illuminated by an architectural design are the assignment of functionality to design elements, protocols of interaction between the elements, scaling and portability, and global system properties such as rates of processing, end-to-end capacities, and overall performance <ref> [SG96] </ref>. Architectural descriptions have long been recognized as an essential ingredient of a well-designed system. These descriptions tend to be informal and idiosyncratic, consisting of box-and-line diagrams that convey the essential system structure, together with prose that explains the meaning of the symbols.
Reference: [Sha96] <author> Mary Shaw. </author> <title> Some patterns for software architectures. </title> <booktitle> In Proceedings of the Second Pattern Languages of Program Design Workshop. To appear, </booktitle> <year> 1996. </year>
Reference-contexts: Pattern languages then allow knowledgeable designers to codify proven designs, design fragments, and frameworks for subsequent reuse. Architectural styles are closely related to design patterns in two ways. First, architectural styles can be viewed as kinds of patterns <ref> [Sha96] </ref> or perhaps more accurately as pattern languages [Ker95]. Describing an architectural style as a design pattern requires, however, a rather broad definition of the scope of design patterns.
Reference: [SM92] <author> Sally Shlaer and Steve Mellor, </author> <title> Object lifecycles : modeling the world in states, </title> <publisher> Yourdon Press, </publisher> <year> 1992. </year>
Reference-contexts: Groups of objects interact by passing messages amongst themselves. Object-oriented design (OOD) has proven to be quite popular in practice, and sophisticated OOD methodologies provide significant leverage for designing software <ref> [i.e. Rum+91, SM92] </ref>. There is growing recognition, however, that although OOD provides a number of benefits, including ease of decomposing and partitioning system elements, functionality, and responsibility, it is not, by itself, particularly well suited to describing complex interactions between groups of objects.
Reference: [Ves94] <author> Steve Vestal. </author> <title> Mode changes in real-time architecture description language. </title> <booktitle> In Proceedings of the Second International Workshop on Configurable Distributed Systems, </booktitle> <month> March </month> <year> 1994. </year>
Reference-contexts: Examples include schedula bility analysis for a style oriented toward real-time processing <ref> [Ves94] </ref> and deadlock detection for client-server message passing [JC94]. A specific, but important, special case of analysis is system generation: many styles support application generators (e.g., parser generators), or lead to reuse of certain shared implementation base (e.g., user interface frameworks or support for communication between distributed processes).
References-found: 14

