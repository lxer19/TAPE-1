URL: http://www.cs.washington.edu/homes/savage/papers/CMU-CS-93-157.ps
Refering-URL: http://www.cs.washington.edu/homes/savage/
Root-URL: http://www.cs.washington.edu
Title: Processor Capacity Reserves for Multimedia Operating Systems  
Author: Clifford W. Mercer, Stefan Savage, and Hideyuki Tokuda 
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: May 1993  
Abstract: Multimedia applications have timing requirements that cannot generally be satisfied using time-sharing scheduling algorithms and system structures. To effectively support these types of programs, operating systems must support processor capacity reservation. A capacity reservation and enforcement mechanism isolates programs from the timing and execution characteristics of other programs in the same way that a memory protection system isolates programs from memory access by other programs. In this paper, we characterize the timing requirements and processor capacity reservation requirements for multimedia applications, we describe a scheduling framework to support reservation and admission control, and we introduce a novel reserve abstraction, specifically designed for the microkernel architecture, for controlling processor usage. This work was supported in part by a National Science Foundation Graduate Fellowship, by Bellcore, and by the U.S. Naval Ocean Systems Center under contract number N00014-91-J-4061. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing official policies, either expressed or implied, of NSF, Bellcore, NOSC, or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. P. Anderson, R. G. Herrtwich, and C. Schaefer. SRP: </author> <title> A Resource Reservation Protocol for Guaranteed-Performance Communication in the Internet. </title> <type> Technical Report TR-90-006, </type> <institution> International Computer Science Institute, </institution> <month> February </month> <year> 1990. </year>
Reference-contexts: Their reservation method is based 12 on earliest deadline scheduling as in the DASH system. Other work, particularly work related to network communication, relies on reservation in network nodes (gateways and hosts) to support bandwidth reservation and rate-based protocols <ref> [1, 3] </ref>. Our work provides a basis for software implementation of these kinds of protocols. Fair share schedulers [7, 9, 18] ensure that users who pay more for the compute time actually get better service than others who pay less.
Reference: [2] <author> D. P. Anderson, S. Tzou, R. Wahbe, R. Govindan, and M. Andrews. </author> <title> Support for Continuous Media in the DASH System. </title> <booktitle> In Proceedings of the 10th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 54-61, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: 1. Introduction Many personal workstations provide audio and video devices for multimedia applications. To support these applications, the operating system must be responsive to the strenuous timing constraints of real-time digital audio and video data streams (continuous media <ref> [2] </ref>). Unfortunately, the time-sharing scheduling policy found in most workstation operating systems is an historical artifact from a time when many users with interactive and batch computing requirements shared a single processor. <p> Herrtwich [8] gives an argument for resource reservation and careful scheduling in these systems. Rangan and Vin [16] describe a file system with an admission control algorithm that is designed to support the real-time constraints of requests. Anderson et al. <ref> [2] </ref> give additional arguments for introducing more sophisticated timing and scheduling features into continuous media operating systems, and their DASH system design supports reservation and uses earliest deadline scheduling for real-time traffic.
Reference: [3] <author> D. Ferrari and D. C. Verma. </author> <title> A Scheme for Real-Time Channel Establishment in Wide-Area Networks. </title> <journal> IEEE Journal on Selected Areas in Communication, </journal> <volume> 8(3) </volume> <pages> 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Their reservation method is based 12 on earliest deadline scheduling as in the DASH system. Other work, particularly work related to network communication, relies on reservation in network nodes (gateways and hosts) to support bandwidth reservation and rate-based protocols <ref> [1, 3] </ref>. Our work provides a basis for software implementation of these kinds of protocols. Fair share schedulers [7, 9, 18] ensure that users who pay more for the compute time actually get better service than others who pay less.
Reference: [4] <author> D. Golub, R. W. Dean, A. Forin, and R. F. Rashid. </author> <title> Unix as an Application Program. </title> <booktitle> In Proceedings of Summer 1990 USENIX Conference, </booktitle> <month> June </month> <year> 1990. </year>
Reference-contexts: We use a kernel abstraction called a reserve which keeps track of the reservation and measures the processor usage of each program. Microkernel operating systems employ separately scheduled servers to provide various system services <ref> [4] </ref>, and consequently, the true processor usage of a program includes the processor usage of the servers invoked by that program. Unfortunately, some microkernels measure user time and system time for each process, thus the usage statistics do not reflect the true computation time of programs.
Reference: [5] <author> R. Govindan and D. P. Anderson. </author> <title> Scheduling and IPC Mechanisms for Continuous Media. </title> <booktitle> In Proceedings of the Thirteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 68-80, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: We demonstrate why rate monotonic scheduling and earliest deadline scheduling are suitable for processor reservation, and we compare these two approaches. In addition, we explain how reservations can be enforced and how non-real-time programs can be integrated with real-time programs in the scheduling framework. Govindan and Anderson <ref> [5] </ref> propose deadline/workahead scheduling and indicate that this method can be used for reservation systems or for systems without reservations. Their reservation method is based 12 on earliest deadline scheduling as in the DASH system.
Reference: [6] <author> G. Harter and K. Geihs. </author> <title> An Accounting Service for Heterogeneous Distributed Environments. </title> <booktitle> In Proceedings of the 8th International Conference on Distributed Computing Systems, </booktitle> <year> 1988. </year>
Reference-contexts: Harter and Geihs describe an accounting strategy for distributed systems in which accounts are known throughout the system, and clients can charge services at various nodes to their accounts <ref> [6] </ref>. This is similar to our microkernel accounting strategy in that our reserves can be passed around the system. Our reservation strategy requires additional accuracy and control to be incorporated into our accounting scheme.
Reference: [7] <author> G. J. Henry. </author> <title> The Fair Share Scheduler. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 63(8) </volume> <pages> 1845-1858, </pages> <month> October </month> <year> 1984. </year>
Reference-contexts: The coarse grain of such built-in performance measurement mechanisms yields 10 coarse grain control of the computation, and represents a best effort kind of system design. The ubiquitous multi-level feedback queue found in many time-sharing systems uses coarse grain feedback to adjust priorities [12]. The Fair Share Scheduler (FSS) <ref> [7] </ref> extends this model with reservations in the same spirit as ours except that FSS is a best-effort scheduler which does not accurately enforce its reservations. <p> Other work, particularly work related to network communication, relies on reservation in network nodes (gateways and hosts) to support bandwidth reservation and rate-based protocols [1, 3]. Our work provides a basis for software implementation of these kinds of protocols. Fair share schedulers <ref> [7, 9, 18] </ref> ensure that users who pay more for the compute time actually get better service than others who pay less. The scheduler reserves capacity for each user or group of users and uses usage measurements to try to match usage with reservation in the long term.
Reference: [8] <author> R. G. Herrtwich. </author> <title> The Role of Performance, Scheduling, and Resource Reservation in Multimedia Systems. </title> <editor> In A. Karshmer and J. Nehmer, editors, </editor> <booktitle> Operating Systems of the 90s and Beyond, number 563 in Lecture Notes in Computer Science, </booktitle> <pages> pages 279-284. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: This makes it possible to use the unreserved capacity or unused reservations for time-sharing or background processing. 6. Related work and future directions Many researchers consider resource reservation desirable if not absolutely necessary for continuous media operating systems. Herrtwich <ref> [8] </ref> gives an argument for resource reservation and careful scheduling in these systems. Rangan and Vin [16] describe a file system with an admission control algorithm that is designed to support the real-time constraints of requests.
Reference: [9] <author> J. Kay and P. Lauder. </author> <title> A Fair Share Scheduler. </title> <journal> CACM, </journal> <volume> 31(1) </volume> <pages> 44-55, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: Other work, particularly work related to network communication, relies on reservation in network nodes (gateways and hosts) to support bandwidth reservation and rate-based protocols [1, 3]. Our work provides a basis for software implementation of these kinds of protocols. Fair share schedulers <ref> [7, 9, 18] </ref> ensure that users who pay more for the compute time actually get better service than others who pay less. The scheduler reserves capacity for each user or group of users and uses usage measurements to try to match usage with reservation in the long term.
Reference: [10] <author> B. W. Lampson. </author> <title> A Scheduling Philosophy for Multiprocessing Systems. </title> <journal> CACM, </journal> <volume> 11(5) </volume> <pages> 347-360, </pages> <month> May </month> <year> 1968. </year>
Reference-contexts: This work is similar in spirit to ours, but their reservations are statically defined by system administrators, and none of these schedulers provides accurate short-term reservation enforcement. Lampson proposed a fixed time scheduling approach <ref> [10] </ref> for scheduling periodic processes and conjectured that a suitable analysis would predict the performance characteristics of processes. Our strategy uses Liu and Layland's results for periodic processes along with a reservation enforcement mechanism to implement predictable service for periodic processes.
Reference: [11] <author> B. W. Lampson and H. E. Sturgis. </author> <title> Reflections on an Operating System Design. </title> <journal> CACM, </journal> <volume> 19(5) </volume> <pages> 251-265, </pages> <month> May </month> <year> 1976. </year>
Reference-contexts: Although our scheme is intended to be accurate, we do not require that program usage characteristics be consistent over different executions. This is in contrast to the approach taken in Cal <ref> [11] </ref> where many design decisions were influenced by the requirement that program execution should cost the same every time. This approach, as noted by Lampson and Sturgis, leads to much larger overhead charges.
Reference: [12] <author> S. J. Leffler, M. K. McKusick, M. J. Karels, and J. S. Quarterman. </author> <title> The Design and Implementation of the 4.3BSD UNIX Operating System. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: The second requirement, that the scheduler accurately measure the computation time consumed by each program, demands precise performance monitoring software which typical operating systems do not provide. Operating systems usually accumulate usage statistics for each process by sampling during regular clock interrupts <ref> [12] </ref>, but this information is not very precise over short intervals. Furthermore, the execution behavior of the monitored program must be independent of the sampling period. <p> Usage statistics in traditional operating systems consist of system-level usage time and user-level time for each process <ref> [12] </ref>. For monolithic operating systems, this approach is sufficient, but for microkernel systems where operating system services are offered by different user-level servers, the usage statistics of an activity cannot be found in the usage statistics of a single process. <p> For example, if a computation is in the (non-preemptive) kernel or in a critical region when it overruns its reservation, it cannot be summarily truncated, although the scheduler can easily penalize the program in its next period based on the duration of the violation. Other operating systems <ref> [12] </ref> use sampling methods to measure the processor time consumed by different programs. Sampling periods are typically on the order of 10 ms [12], so the accuracy of the measurement is low. <p> Other operating systems <ref> [12] </ref> use sampling methods to measure the processor time consumed by different programs. Sampling periods are typically on the order of 10 ms [12], so the accuracy of the measurement is low. The coarse grain of such built-in performance measurement mechanisms yields 10 coarse grain control of the computation, and represents a best effort kind of system design. <p> The coarse grain of such built-in performance measurement mechanisms yields 10 coarse grain control of the computation, and represents a best effort kind of system design. The ubiquitous multi-level feedback queue found in many time-sharing systems uses coarse grain feedback to adjust priorities <ref> [12] </ref>. The Fair Share Scheduler (FSS) [7] extends this model with reservations in the same spirit as ours except that FSS is a best-effort scheduler which does not accurately enforce its reservations.
Reference: [13] <author> J. P. Lehoczky, L. Sha, and Y. Ding. </author> <title> The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior. </title> <booktitle> In Proceedings of the 10th IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 166-171, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Such a policy would leave a lot of idle computation time which could not be reserved. One possibility is to use that time for unreserved background computations. Another possibility is to use the exact analysis of Lehoczky et al. <ref> [13] </ref> to determine whether a specific collection of programs can be scheduled successfully, although the exact analysis is more expensive than the simple, pessimistic analysis above. Lehoczky et al. also gave an average case analysis showing that on average, task sets can be scheduled up to 88% utilization.
Reference: [14] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling Algorithms for Multiprogramming in a Hard Real Time Environment. </title> <journal> JACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <year> 1973. </year>
Reference-contexts: Admission control under fixed priority scheduling Using fixed priority scheduling in our framework requires a method of assigning priorities to programs which ensures that each program will progress at its assigned rate. The rate monotonic (RM) priority assignment <ref> [14] </ref> does just that. Under this regime, programs are ordered from highest rate to lowest rate and then priorities are assigned with the highest priority assigned to the highest rate program and the lowest priority assigned to the lowest rate program. <p> The rate monotonic scheduling algorithm was analyzed under simplifying conditions, and the results of this analysis provide a basis for processor reservation strategies. Liu and Layland <ref> [14] </ref> made the following assumptions to enable their analysis: 1. programs are periodic, and the computation during one period must finish by the end of the period (its deadline) to allow the next computation to start, 5 2. the computation time of each program during each period is constant, 3. programs <p> We define the deadline of a computation to be the end of the period in which it started, and the earliest deadline policy chooses, at a given point in time, the program which has the smallest deadline value. Liu and Layland <ref> [14] </ref> showed that, under the same assumptions outlined in the section on rate monotonic scheduling, all programs will successfully meet their deadlines under earliest deadline scheduling if n X C i 1: The reservation strategy that arises from this analysis is similar to the RM strategy.
Reference: [15] <author> G. J. Nutt. </author> <title> Tutorial: Computer System Monitors. </title> <journal> IEEE Computer, </journal> <volume> 8(11) </volume> <pages> 51-61, </pages> <month> November </month> <year> 1975. </year>
Reference-contexts: Our strategy uses Liu and Layland's results for periodic processes along with a reservation enforcement mechanism to implement predictable service for periodic processes. Performance measurement and accounting techniques have a long history in computer systems <ref> [15] </ref>. Most systems use sampling techniques or complete traces. Our approach is to use a short-term trace where we measure the duration of processor time each program gets, but we summarize this information in an accumulator for each program rather than keep the detailed trace information around.
Reference: [16] <author> P. V. Rangan and H. M. Vin. </author> <title> Designing File Systems for Digital Video and Audio. </title> <booktitle> In Proceedings of the Thirteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 81-94, </pages> <month> October </month> <year> 1991. </year> <month> 14 </month>
Reference-contexts: Related work and future directions Many researchers consider resource reservation desirable if not absolutely necessary for continuous media operating systems. Herrtwich [8] gives an argument for resource reservation and careful scheduling in these systems. Rangan and Vin <ref> [16] </ref> describe a file system with an admission control algorithm that is designed to support the real-time constraints of requests.
Reference: [17] <author> M. V. Wilkes. </author> <title> Automatic Load Adjustment in Time-Sharing Systems. </title> <booktitle> In ACM SIGOPS Workshop on System Performance Evaluation, </booktitle> <pages> pages 308-320, </pages> <month> April </month> <year> 1971. </year>
Reference-contexts: Self-tuning mechanisms have been proposed and implemented for time-sharing systems. The idea is to keep load under control by rejecting new logins when the load is above a certain level <ref> [17] </ref>. Harter and Geihs describe an accounting strategy for distributed systems in which accounts are known throughout the system, and clients can charge services at various nodes to their accounts [6]. This is similar to our microkernel accounting strategy in that our reserves can be passed around the system.
Reference: [18] <author> C. M. Woodside. </author> <title> Controllability of Computer Performance Tradeoffs Obtained Using Controlled-Share Queue Schedulers. </title> <journal> IEEE Transaction on Software Engineering, </journal> <volume> SE-12(10):1041-1048, </volume> <month> October </month> <year> 1986. </year> <month> 15 </month>
Reference-contexts: Other work, particularly work related to network communication, relies on reservation in network nodes (gateways and hosts) to support bandwidth reservation and rate-based protocols [1, 3]. Our work provides a basis for software implementation of these kinds of protocols. Fair share schedulers <ref> [7, 9, 18] </ref> ensure that users who pay more for the compute time actually get better service than others who pay less. The scheduler reserves capacity for each user or group of users and uses usage measurements to try to match usage with reservation in the long term.
References-found: 18

