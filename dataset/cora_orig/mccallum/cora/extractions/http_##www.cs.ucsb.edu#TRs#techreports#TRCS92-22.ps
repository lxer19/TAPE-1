URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS92-22.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Formal Verification of Realtime Systems in ASTRAL  
Author: Alberto Coen-Porisini Richard A. Kemmerer Dino Mandrioli 
Keyword: Key Words: Formal Methods, Formal specification and verification, Realtime systems, Timing requirements, State machines, ASLAN, TRIO.  
Address: Santa Barbara, CA 93106  20133 Milano, Italia  
Affiliation: Reliable Software Group Department of Computer Science University of California  Dipartimento di Elettronica Politecnico di Milano  
Abstract: ASTRAL is a formal specification language for realtime systems. It is intended to support formal software development, and therefore has been formally defined. This paper focuses on formally proving the mathematical correctness of ASTRAL specifications. ASTRAL is provided with structuring mechanisms that allow one to build modularized specifications of complex systems with layering. In this paper, we exploit and enhance ASTRAL's structure and provide a proof method that allows one to build well structured proofs. Correctness proofs in ASTRAL can be divided into two categories: inter-level proofs and intra-level proofs. The former deal with proving that the specification of level i+1 is consistent with the specification of level i, while the latter deal with proving that the specification of level i is correct. In this paper we concentrate on intra-level proofs. 
Abstract-found: 1
Intro-found: 1
Reference: [ACD 90] <author> Alur, R., C. Courcoubetis and D. Dill, </author> <title> "Model-Checking for Real-Time Systems," </title> <booktitle> 5th IEEE LICS 90, IEEE, </booktitle> <pages> pp. 414-425, </pages> <year> 1990. </year>
Reference: [CHS 90] <author> Chang, C., H. Huang and C. Song, </author> <title> "An Approach to Verifying Concurrency Behavior of Real-Time Systems Based On Time Petri Net and Temporal Logic," </title> <booktitle> InfoJapan 90, IPSJ, </booktitle> <pages> pp. 307-314, </pages> <year> 1990. </year> <month> 31 </month>
Reference: [FMM 91] <author> Felder, M., D. Mandrioli and A. Morzenti, </author> <title> "Proving Properties of Real-Time Systems through Logical Specifications and Petri Net Models," </title> <type> Tech. </type> <institution> Rept. 91-72, Dip. di Elettronica-Politecnico di Milano, </institution> <month> December, </month> <year> 1991. </year>
Reference: [GF 91] <author> Gabrielian, A. and M. Franklin, </author> <title> "Multilevel Specification of Real-Time Systems," </title> <journal> CACM 34, </journal> <volume> 5, </volume> <pages> pp. 51-60, </pages> <month> May, </month> <year> 1991. </year>
Reference: [GK 91a] <author> Ghezzi, C. and R. Kemmerer, "ASTRAL: </author> <title> An Assertion Language for Specifying Realtime Systems," </title> <booktitle> Proceedings of the Third European Software Engineering Conference, Milano, Italy, </booktitle> <pages> pp. 122-146, </pages> <month> October, </month> <year> 1991. </year>
Reference-contexts: 1. Introduction ASTRAL is a formal specification language for realtime systems. It is intended to support formal software development, and therefore has been formally defined. <ref> [GK 91a] </ref> discusses the rational of ASTRAL's design and demonstrates how the language builds on previous language experiments. [GK 91b] discusses how ASTRAL's semantics are specified in terms of TRIO, which is a formal realtime logic. <p> As a consequence, the proofs lack structure, which makes them unsuitable for dealing with complex real-life systems. On the contrary, ASTRAL is provided with structuring mechanisms that allow one to build modularized specifications of complex systems with layering <ref> [GK 91a, GK 91b] </ref>. In this report further details of the ASTRAL environment components and the critical requirements components, which were not fully developed in previous papers, are presented. Formal proofs in ASTRAL can be divided into two categories: inter-level proofs and intra-level proofs. <p> A detailed description of ASTRAL and of its underlying motivations is provided in <ref> [GK 91a] </ref>, which also contains a complete specification of a phone system example. In this report only the concepts of ASTRAL that are needed to present the proof theory are discussed in detail.
Reference: [GK 91b] <author> Ghezzi, C. and R. Kemmerer, </author> <title> "Executing Formal Specifications: the ASTRAL to TRIO Translation Approach, </title> <booktitle> "Proceedings of TAV4: the Symposium on Testing, Analysis, and Verification, </booktitle> <address> Victoria, B.C., Canada, </address> <pages> pp. 112-119, </pages> <month> October, </month> <year> 1991. </year>
Reference-contexts: 1. Introduction ASTRAL is a formal specification language for realtime systems. It is intended to support formal software development, and therefore has been formally defined. [GK 91a] discusses the rational of ASTRAL's design and demonstrates how the language builds on previous language experiments. <ref> [GK 91b] </ref> discusses how ASTRAL's semantics are specified in terms of TRIO, which is a formal realtime logic. It also outlines how ASTRAL specifications can be formally analyzed by translating them into TRIO and then using the TRIO validation theory. <p> As a consequence, the proofs lack structure, which makes them unsuitable for dealing with complex real-life systems. On the contrary, ASTRAL is provided with structuring mechanisms that allow one to build modularized specifications of complex systems with layering <ref> [GK 91a, GK 91b] </ref>. In this report further details of the ASTRAL environment components and the critical requirements components, which were not fully developed in previous papers, are presented. Formal proofs in ASTRAL can be divided into two categories: inter-level proofs and intra-level proofs. <p> It has duration N_T_Dur. 2 An earlier version of this specification that did not take into account the environment and with different invariants and schedules was presented in <ref> [GK 91b] </ref>. 6 TRANSITION Notify_Timeout N_T_Dur ENTRY EXISTS t1: Time (Start (New_Info,t1) & Now - t1 Input_Tout) & ~Channel_Closed EXIT Msg [Data_Part] = Closed & Msg [Count] = Msg [Count]' + 1 & Msg [ID_Part] = Self & Channel_Closed The packet maker specification also has two transitions: Process_Msg and Deliver, which
Reference: [Ost 89] <author> Ostroff, J., </author> <title> Temporal Logic For Real-Time Systems, </title> <publisher> Research Studies Press LTD., </publisher> <address> Taunton, Somerset, </address> <booktitle> England , Advanced Software Development Series, </booktitle> <volume> 1, </volume> <year> 1989. </year>
Reference-contexts: Recently, a number of approaches have been proposed to build formal proofs for real-time systems [Ost 89, ACD 90, CHS 90, Suz 90, FMM 91, GF 91]. Many of them exploit the so called "dual language approach" <ref> [Pnu 77, Ost 89] </ref> where a system is modeled as an abstract machine (e.g., a finite state machine or a Petri net) and its properties are described through some assertion language (e.g., a logic or an algebraic language).
Reference: [Pnu 77] <author> Pnueli, A., </author> <title> "The Temporal Logic of Programs," </title> <booktitle> Proceedings of the 18th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 46-57, </pages> <year> 1977. </year>
Reference-contexts: Recently, a number of approaches have been proposed to build formal proofs for real-time systems [Ost 89, ACD 90, CHS 90, Suz 90, FMM 91, GF 91]. Many of them exploit the so called "dual language approach" <ref> [Pnu 77, Ost 89] </ref> where a system is modeled as an abstract machine (e.g., a finite state machine or a Petri net) and its properties are described through some assertion language (e.g., a logic or an algebraic language).
Reference: [Suz 90] <author> Suzuki, I., </author> <title> "Formal Analysis of Alternating Bit Protocol by Temporal Petri Nets," </title> <address> I E E E - T S E 1 6 , 11, </address> <pages> pp. 1273-1281, </pages> <month> November, </month> <year> 1990. </year>
Reference: [Zav 87] <author> Zave, P., </author> <title> PAISLey User Documentation Volume 3: Case Studies, </title> <institution> Computer Technology Research Laboratory Report, AT&T Bell Laboratories, </institution> <address> Murray Hill, New Jersey, </address> <year> 1987. </year> <month> 32 </month>
Reference-contexts: In this report only the concepts of ASTRAL that are needed to present the proof theory are discussed in detail. These concepts are illustrated via a simple example that is a variation of the packet assembler described in <ref> [Zav 87] </ref>: 1 Note that there may be a delay from the time a transition Op i is called until it is actually started. 5 "The system contains an object which assembles data items (in the order in which it receives them) into fixed-size packets, and sends these packets to the
References-found: 10

