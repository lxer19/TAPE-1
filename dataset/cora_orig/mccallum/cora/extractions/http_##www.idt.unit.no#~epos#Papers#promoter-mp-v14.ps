URL: http://www.idt.unit.no/~epos/Papers/promoter-mp-v14.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Title: Concepts for Evolving Software Processes  
Author: Reidar Conradi 
Note: Submitted for PROMOTER book, V.14  
Address: CEFRIEL, Italy  Telematics, NTH, N-7034 Trondheim, Norway.  7 Chemin du Vieux Ch^ene, F-38240 Meylan, France.  Piazza Leonardo da Vinci 32, I-20133 Milano, Italy.  
Affiliation: Norwegian Institute of Technology, Norway Christer Fernstrom CAP Gemini Innovation, France Alfonso Fuggetta Politecnico di Milano and  Dept. of Computer Systems and  CAP Gemini Innovation,  Politecnico di Milano, Dipartimento di Elettronica e Informazione,  
Email: E-Mail: conradi@idt.unit.no.  E-Mail: christer@capsogeti.fr.  E-Mail: Alfonso.Fuggetta@mailer.cefriel.it.  
Phone: Tel.: +47-73-593444, Fax: +47-73-594466,  Tel.: +33-76-764720, Fax: +33-76-764748,  Tel.: +39-2-239.93623, Fax: +39-2-239.93411,  
Date: December 2, 1993  
Abstract: Software processes are complex entities that may last for long periods of time and are carried out through the interaction of humans and computerised tools. They need to continuously evolve in order to cope with different kinds of changes or customisations both in the or-ganisation and in the technologies used to support software production activities. In recent years, many software process technologies have been developed, and have currently been further extended and used in trial projects. Moreover, some research prototypes have generated commercial products, that are marketed and currently used in industrial organisations. Despite these significant efforts and results, however, there is still little conceptual characterisation and assessment of the properties of software processes and related support environments. It is difficult to compare and assess existing approaches. Even a common characterisation of the problems to be addressed seems to be problematic and difficult to achieve. This is particularly true when we consider software process evolution, for which it seems that an agreed-upon and satisfactory solution has not been established yet. 
Abstract-found: 1
Intro-found: 1
Reference: [AHM91] <author> Tarek K. Abdel-Hamid and Stuart E. Madnick. </author> <title> Software Project Dynamics. </title> <address> Prentice-Hall,1991, Englewood Cliffs, New Jersey. </address>
Reference-contexts: Process assessment: Here it seems that the emerging process capability methods such as the SEI CMM [PC+93] or the ESPRIT BOOTSTRAP approach [Boo93] will have their application. Moreover, the role of quantitative modeling methods based on product and process metrics is becoming crucial <ref> [AHM91] </ref>. We must regretfully conclude this section by saying that there is very little (new) method work on systematic support for process evolution, both in the production process and meta-process.
Reference: [ABD + 89] <author> Malcolm Atkinson, Francois Bancilhon, David DeWitt, Klaus Dittrich, David Maier, and Stanley Zdonik. </author> <title> The Object-Oriented Database System Manifesto. </title> <booktitle> In Proceedings from DOOD'89, </booktitle> <address> Ky-oto, Japan, </address> <month> Dec. </month> <year> 1989, </year> <pages> 40-57. </pages>
Reference-contexts: It should not act as a mere check-list, e.g. does system X offer formal "meta-process tools" or "enacting template models". Rather, it should provide a systematic way to understand, assess, and compare process support systems. We can compare it with the Object-Oriented Database System manifesto <ref> [ABD + 89] </ref>. Section 1 in the paper points at some related work. Much underlying technology can be taken and adapted from general software engineering, including dynamic instrumentation and binding facilities.
Reference: [BCN90] <author> Hugh R. Beyer, Kathy Chapman, and Chris Nolan. </author> <title> The ATIS reference model. </title> <type> Technical Report ZK02-3N30, </type> <institution> Digital Equipment Corp., 110 Spirit Brook Rd., Nashua, </institution> <address> NH 03062, </address> <month> April </month> <year> 1990. </year>
Reference: [BFG93] <author> Sergio Bandinelli and Alfonso Fuggetta and Carlo Ghezzi. </author> <title> Soft ware Process Model Evolution in the SPADE Environment. </title> <journal> IEEE TSE, </journal> <month> December </month> <year> 1993, </year> <note> 37 p. </note>
Reference-contexts: Operations of model variations are implemented by the tools of the process support, e.g. the process language editor, the process model interpreter, the debugger for enacting variations etc.. Let us consider as examples the three process support systems the authors are involved in. In SLANG <ref> [BFG93] </ref>, there are multiple instances of a Process Engine tool, which create enactable and enacting variations (in an intertwined way) starting from the template variation of the process model.
Reference: [B + 87] <author> Jay Banerjee et al. </author> <title> Semantics and implementation of schema evo lution in object-oriented databases. </title> <booktitle> In Proceedings of ACM SIG-MOD '87, </booktitle> <pages> pages 311-322, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Schema evolution has been discussed extensively in the database literature <ref> [B + 87] </ref>. It has a fundamental impact on persistent data, structured according to a given schema. * Impact analysis: This is needed to assess the effect of changes before applying them.
Reference: [BL79] <author> L.A. Belady and M. M. Lehman. </author> <title> Characteristics of large systems. </title> <editor> In Peter Wegner, editor, </editor> <booktitle> Research directions in Software Technology. </booktitle> <publisher> MIT Press, </publisher> <year> 1979. </year>
Reference-contexts: This fact further increases the complexity of the resulting software process, and puts hard demands on management. Finally, software processes may last for long periods of time, and are thus likely to undergo many changes during their lifetime in order to cope with new requirements <ref> [BL79] </ref>. Examples of such changes are the substitution of (part of ) the technologies used to produce software applications, or the modification of the development strategy and procedures.
Reference: [Boo93] <author> The Bootstrap Project Team. </author> <title> Bootstrap: Europe's Assessment Method. </title> <journal> IEEE Software, </journal> <pages> pages 93-95, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Especially in the domain of process evolution will this activity entangle new methods and techniques, both technical and managerial. 5. Process assessment: Here it seems that the emerging process capability methods such as the SEI CMM [PC+93] or the ESPRIT BOOTSTRAP approach <ref> [Boo93] </ref> will have their application. Moreover, the role of quantitative modeling methods based on product and process metrics is becoming crucial [AHM91].
Reference: [CJM + 92] <author> Reidar Conradi, M. Letizia Jaccheri, Cristina Mazzi, Amund Aarsten, and Ngoc Minh Nguyen. </author> <title> Design, use, and implementation of SPELL, a language for software process modeling and evolution. </title> <booktitle> In [Der92], </booktitle> <pages> pages 167-177. </pages>
Reference-contexts: It is well-known that CM is a complex process that can benefit from an explicit process model to control activities related to updating, change propagation, auditing, rebuilding etc.. Conversely, the process elements themselves are (or should be) under CM control, with corresponding "meta-activities" see next section and <ref> [CJM + 92] </ref>. 3 Software Process Evolution: the Meta-process In the previous section, a process has been defined as the composition of a production process, its meta-process, and the corresponding process support.
Reference: [CFFS92] <author> Reidar Conradi, Christer Fernstrom, Alfonso Fuggetta, and Bob Snowdon. </author> <title> Towards a Reference Framework for Fundamental (Soft-ware) Process Concepts. </title> <booktitle> In [Der92], </booktitle> <pages> pages 3-17. </pages>
Reference-contexts: These two factors are strongly interrelated: advances in the technology enable creation of new products, services and activities, or modification of old ones, which in their turn produce new needs, feedbacks, and requirements to software technology providers. Further, software processes are human-oriented <ref> [CFFS92] </ref>, and the interactions among humans and between humans and the tools, that support their activities are charac-terised by high variability and unpredictability. This fact further increases the complexity of the resulting software process, and puts hard demands on management. <p> The aim is to facilitate communication and assessment of emerging software process technologies, especially with respect to software process evolution (see below). Similar efforts have been done in the recent past (see [DNR91], [FH93], <ref> [CFFS92] </ref>, and [Lon93]), but further work is still needed.
Reference: [Con93] <author> Reidar Conradi. </author> <title> Resume from Session on Process Change at ISPW'8. </title> <booktitle> In [Scha93], </booktitle> <pages> pages 18-21. </pages>
Reference-contexts: Its own evolution will drive and thus evolve the entire process support <ref> [Con93] </ref>. A process model is composed of several model variations, holding refined or customised embodiments and representations of the same model. Variations can be classified into three different categories (or levels): 1. Template model variation: This is the definition of the process model as expressed in the PML.
Reference: [Der92] <editor> Jean-Claude Derniame, editor. </editor> <booktitle> Proceedings Second European Workshop on Software Process Technology (EWSPT'92), </booktitle> <address> Trond-heim (Norway), 7-8 Sept. 1992. </address> <publisher> LNCS 635, Springer Verlag, </publisher> <address> 253 p. </address>
Reference-contexts: more recent initiative is the European Software Engineering Institute, established in 1993 as a pan-European industrial action, partly supported by the Commission of the European Community. * A new research area has grown up, supported by scientific events that facilitate the exchange and discussion of results, problems and early experiences <ref> [Der92] </ref> [Ost93] [Scha93]. * Outside the area of software production, similar efforts emerge for production processes within Information systems, Office automation, and various CAD/CIM systems. These may be carried out under names of workflow support, groupware, or concurrent engineering. So far, there has been little cross-fertilisation between these areas.
Reference: [DNR91] <author> Mark Dowson, Brian Nejmeh, and William Riddle. </author> <title> Fundamental Software Process Concepts. </title> <booktitle> In [FCA91], </booktitle> <pages> pages 15-37. </pages>
Reference-contexts: The aim is to facilitate communication and assessment of emerging software process technologies, especially with respect to software process evolution (see below). Similar efforts have been done in the recent past (see <ref> [DNR91] </ref>, [FH93], [CFFS92], and [Lon93]), but further work is still needed.
Reference: [Est92] <author> Jacky Estublier. </author> <title> In discussing dynamic typing in the Adele ver sioned software engineering database. </title> <booktitle> At EWSPT'92, </booktitle> <address> Trondheim, </address> <month> Sept. </month> <year> 1992. </year>
Reference: [FER93] <author> Christer Fernstrom. </author> <title> Process WEAVER: Adding Process Support to UNIX. </title> <booktitle> In [Ost93], </booktitle> <pages> pages 12-26. 20 </pages>
Reference-contexts: In EPOS [JC93], there is a Planner tool to create the enactable variation, and an Execution Manager tool to create and operate on (execute) enacting variations (the two tools work intertwined). In Process WEAVER <ref> [FER93] </ref>, there is a process instantiation tool which copies a template, provides it with enactment parameters and links it with an interpreter to create the enactable variation. An enacting variation is created by a process starter tool and is then simply managed as a UNIX process.
Reference: [FH93] <author> Peter H. Feiler and Watts S. Humphrey. </author> <title> Software Process De velopment and Enactment: Concepts and Definitions. </title> <booktitle> In [Ost93], </booktitle> <pages> pages 28-40. </pages>
Reference-contexts: The aim is to facilitate communication and assessment of emerging software process technologies, especially with respect to software process evolution (see below). Similar efforts have been done in the recent past (see [DNR91], <ref> [FH93] </ref>, [CFFS92], and [Lon93]), but further work is still needed.
Reference: [FCA91] <author> Alfonso Fuggetta, Reidar Conradi and Vincenzo Ambriola. </author> <booktitle> Pro ceedings of the First European Workshop on Software Process Modeling (EWSP'91), Milano, 1991. AICA (Italian National Computer Science Society), </booktitle> <address> 272 p. </address>
Reference: [FG93] <author> Alfonso Fuggetta, Carlo Ghezzi. </author> <title> Process Formalisms Need to be Fully Reflective. </title> <booktitle> In [Scha93], </booktitle> <pages> pages 78-80. </pages>
Reference-contexts: This is necessary to make it possible to dynamically reason upon, manipulate, and interpret a model ("code"), e.g. represented by "reified" classes and meta-classes [MN88] <ref> [FG93] </ref>. This is needed if we want to describe the process as a single, integrated model.
Reference: [JC93] <author> M. Letizia Jaccheri, Reidar Conradi. </author> <title> Techniques for Process Model Evolution in EPOS. </title> <note> Accepted for special issue of IEEE TSE, December 1993, 18 p. </note>
Reference-contexts: Let us consider as examples the three process support systems the authors are involved in. In SLANG [BFG93], there are multiple instances of a Process Engine tool, which create enactable and enacting variations (in an intertwined way) starting from the template variation of the process model. In EPOS <ref> [JC93] </ref>, there is a Planner tool to create the enactable variation, and an Execution Manager tool to create and operate on (execute) enacting variations (the two tools work intertwined).
Reference: [Lon93] <author> Jacques Lonchamp. </author> <title> A structured conceptual and terminological framework for software process engineering. </title> <booktitle> In [Ost93], </booktitle> <pages> pages 41-53. </pages>
Reference-contexts: The aim is to facilitate communication and assessment of emerging software process technologies, especially with respect to software process evolution (see below). Similar efforts have been done in the recent past (see [DNR91], [FH93], [CFFS92], and <ref> [Lon93] </ref>), but further work is still needed.
Reference: [Mad91] <author> Nazim H. Madhavji. </author> <title> The process cycle. </title> <journal> Software Engineering Journal, </journal> <volume> 6(5) </volume> <pages> 234-242, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: A large repertoire of technologies is available, both for process and meta-process modelling and instrumentation, but a complete method base is missing. One significant example, however, of a method encompassing both the production process and the meta-process, is the PRISM model of change <ref> [Mad91] </ref>.
Reference: [MN88] <editor> P. Maes and D. Nardi, editors. </editor> <title> Meta-Level Architectures and Re flection. </title> <publisher> North Holland, </publisher> <year> 1988. </year>
Reference-contexts: This is necessary to make it possible to dynamically reason upon, manipulate, and interpret a model ("code"), e.g. represented by "reified" classes and meta-classes <ref> [MN88] </ref> [FG93]. This is needed if we want to describe the process as a single, integrated model.
Reference: [Ost93] <editor> Leon Osterweil, editor. </editor> <booktitle> Proceedings of the Second International Conference on Software Process (ICSP-2), </booktitle> <address> Berlin (Germany), </address> <month> February </month> <year> 1993. </year> <note> IEEE-CS Press. </note>
Reference-contexts: recent initiative is the European Software Engineering Institute, established in 1993 as a pan-European industrial action, partly supported by the Commission of the European Community. * A new research area has grown up, supported by scientific events that facilitate the exchange and discussion of results, problems and early experiences [Der92] <ref> [Ost93] </ref> [Scha93]. * Outside the area of software production, similar efforts emerge for production processes within Information systems, Office automation, and various CAD/CIM systems. These may be carried out under names of workflow support, groupware, or concurrent engineering. So far, there has been little cross-fertilisation between these areas.
Reference: [PC+93] <author> M. Paulk, B. Curtis, M.B. Chrissis, and C.V. Weber. </author> <title> Capability Maturity Model for Software, </title> <note> Version 1.1. CMU/SEI Tecnical Report, No. 93-TR-24, </note> <month> February </month> <year> 1993. </year>
Reference-contexts: Especially in the domain of process evolution will this activity entangle new methods and techniques, both technical and managerial. 5. Process assessment: Here it seems that the emerging process capability methods such as the SEI CMM <ref> [PC+93] </ref> or the ESPRIT BOOTSTRAP approach [Boo93] will have their application. Moreover, the role of quantitative modeling methods based on product and process metrics is becoming crucial [AHM91].
Reference: [Ros77] <author> D. T. Ross and K. E. Schuman. </author> <title> Structured Analysis for Require ments Definition. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-3(1), </volume> <pages> pages 16-34. </pages> <month> January </month> <year> 1977. </year>
Reference-contexts: Due to their research-oriented nature, it should be expected that technology provision will be prototype-oriented with evolutionary introduction of new features. 2. Process requirement analysis: Generally, we believe that conventional methods for analysing information systems (like SADT <ref> [Ros77] </ref>, semantic modelling, object-oriented analysis) can be used for certain aspects. However, our current knowledge of especially the fine-grained process aspects is very low, and we will need to rely on combinations of knowledge acquisition techniques and formal techniques. 3.
Reference: [Roy70] <author> W. W. </author> <title> Royce. Managing the Development of Large Software Sys tems: Concept and Techniques. </title> <booktitle> In Proceedings of WesCon, </booktitle> <month> August </month> <year> 1970. </year>
Reference-contexts: Process assessment This meta-activity provides quantitative and qualitative information describing the performance of the whole process. Such information is used by the process requirements analysis meta-activity. We want to stress once again that the proposed set of meta-activities does not impose any specific meta-process lifecycle (cf. waterfall model <ref> [Roy70] </ref>), but should give an indication of the fundamental steps that have to be taken in order to manage a process. Depending on the requirements and constraints of the development organization, it should be possible to support a meta-process following an evolutionary and incremental lifecycle, or also other non-traditional approaches.
Reference: [Scha93] <author> Wilhelm Schafer, </author> <title> editor. </title> <booktitle> Proceedings of the Eight International Software Process Workshop, </booktitle> <address> Dagstuhl (Germany), 2-5 March 1993. </address> <publisher> IEEE-CS Press. </publisher> <month> epos/papers/promoter-mp-v14.tex December 2, </month> <year> 1993 </year> <month> 21 </month>
Reference-contexts: initiative is the European Software Engineering Institute, established in 1993 as a pan-European industrial action, partly supported by the Commission of the European Community. * A new research area has grown up, supported by scientific events that facilitate the exchange and discussion of results, problems and early experiences [Der92] [Ost93] <ref> [Scha93] </ref>. * Outside the area of software production, similar efforts emerge for production processes within Information systems, Office automation, and various CAD/CIM systems. These may be carried out under names of workflow support, groupware, or concurrent engineering. So far, there has been little cross-fertilisation between these areas.
References-found: 26

