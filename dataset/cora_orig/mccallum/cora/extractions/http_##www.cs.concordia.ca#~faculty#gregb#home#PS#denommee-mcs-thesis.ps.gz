URL: http://www.cs.concordia.ca/~faculty/gregb/home/PS/denommee-mcs-thesis.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/gregb/home/paper.html
Root-URL: http://www.cs.concordia.ca
Title: A CASE STUDY IN DOCUMENTING AND DEVELOPING FRAMEWORKS  
Author: Pierre D enomm ee 
Degree: A Thesis in The Department of Computer Science Presented in Partial Fulfillment of the Requirements For the Degree of Master of Computer Science  
Note: c Pierre D enomm ee, 1998  
Date: April 1998  
Address: Montr eal, Qu ebec, Canada  
Affiliation: Concordia University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Ackermann, P. </author> <title> Developing Object-Oriented Multimedia Software. </title> <publisher> dpunkt Publishing, </publisher> <address> Heidelberg, </address> <year> 1996. </year>
Reference: [2] <institution> Apple Computer, </institution> <note> Macapp 2.0 General Reference Manual, </note>
Reference-contexts: The large learning curve faced by the first-time user of a framework is a serious impediment to successfully reaping the benefits of reuse. Early examples of application frameworks were for graphical user interfaces (GUI), including MacApp <ref> [2] </ref>, and Interviews [22]. There is now an abundance of GUI frameworks that have been used successfully on many platforms ranging from Dos to Unix, such as MacApp for MacIntosh, Owl-Windows for Dos/Windows, and Motif for Unix.
Reference: [3] <author> Arango, G., Schoen, E., and Pettengill, R. </author> <title> A process for consolidating and reusing design knowledge. </title> <booktitle> In Proceedings of 15th International Conference on Software Engineering. </booktitle> <publisher> IEEE Computer Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1993, </year> <pages> pp. 231-242. </pages>
Reference-contexts: Design Notebooks A design notebook collects together information related to the design of hardware. The information will include background theory, analyses of situations, and a discussion of engineering trade-offs. While not specifically intended for frameworks, Schlumberger <ref> [3] </ref> has adopted this approach with issue-driven design (of Potts and Brun) to capture the design rationale of software systems, as well as 12 hardware systems and combined hardware/software systems. They call them technol-ogy books and product books.
Reference: [4] <author> Beck, K. and Johnson, R. </author> <title> Patterns generate architectures. In Object-Oriented Programming. </title> <editor> M. Tokoro and R. Pareschi (eds), </editor> <publisher> LNCS 821, Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994, </year> <pages> pp. 139-149. </pages>
Reference-contexts: A collaboration diagram may be used to represent the same information. Examples of the solution being applied in concrete situations may be provided. The analysis of benefits and trade-offs of applying the pattern is an important part of the design pattern description. Beck and Johnson <ref> [4] </ref> illustrate the use of design patterns in developing the architecture for HotDraw , a framework for drawing editors.
Reference: [5] <author> Roger P. Beck, Satish R. Desai, Doris R. Ryan, Ronald W. Tower, Dennis Q. Vroom, Linda Mayer Wood, </author> <title> Architecture for large-scale reuse, </title>
Reference-contexts: ET++, an editor toolkit [32] which has recently been used in MET++ which is a 5 framework for multimedia applications; RTL framework [18] for code optimization in compiler s; Choices for object-oriented operating systems [9]; BEE++ for analyzing and monitoring distributed programs [7]; and others for network management and telecommunications <ref> [5] </ref>, and financial engineering [6]. 2.1.1 Developing a Framework An application framework evolves in response to feedback from reusers. An initial framework is based on past experience or by careful construction of one or two applications, keeping in mind the need for flexibility, reusability and clarity of concepts.
Reference: [6] <author> A. Birrer and T. Eggenschwiler, </author> <title> Frameworks in the financial engineering domain: An experience report, ECOOP'93 | Object-Oriented Programming, O.M. </title> <editor> Nierstrasz (ed.), </editor> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1993, </year> <month> pp.21-35. </month>
Reference-contexts: [32] which has recently been used in MET++ which is a 5 framework for multimedia applications; RTL framework [18] for code optimization in compiler s; Choices for object-oriented operating systems [9]; BEE++ for analyzing and monitoring distributed programs [7]; and others for network management and telecommunications [5], and financial engineering <ref> [6] </ref>. 2.1.1 Developing a Framework An application framework evolves in response to feedback from reusers. An initial framework is based on past experience or by careful construction of one or two applications, keeping in mind the need for flexibility, reusability and clarity of concepts.
Reference: [7] <author> B. Bruegge, T. Gottschalk, B. Luo, </author> <title> A framework for dynamic program analyzers, </title> <publisher> OOPSLA'93, pp.65-82. </publisher>
Reference-contexts: a broad range of application domains such as ET++, an editor toolkit [32] which has recently been used in MET++ which is a 5 framework for multimedia applications; RTL framework [18] for code optimization in compiler s; Choices for object-oriented operating systems [9]; BEE++ for analyzing and monitoring distributed programs <ref> [7] </ref>; and others for network management and telecommunications [5], and financial engineering [6]. 2.1.1 Developing a Framework An application framework evolves in response to feedback from reusers.
Reference: [8] <author> Buhr, R.J.A. and Casselman, </author> <title> R.S. Architectures with pictures. </title> <booktitle> In Proceedings of OOPSLA'92. ACM/SIGPLAN, </booktitle> <address> New York, </address> <year> 1992, </year> <pages> pp. 466-483. </pages>
Reference-contexts: A hypermedia system supports access and navigation of the books. Other Recipes describe how to adapt the functionality of the framework. As such they may refer to, or be documented in terms of, use cases or scenarios [15] that describe the intended functionality. Similarly, a time thread <ref> [8] </ref> for a scenario can depict when and where the scenario involves the framework and when and where it involves the customized code. 2.4 New C++ Features Used in the Code The C++ language has evolved to the extent that now there is a draft ISO C++ standard.
Reference: [9] <author> Roy H. Campbell, Nayeem Islam, David Raila, Peter Madany, </author> <title> Designing and implementing Choices: An object-oriented system in C++, </title> <journal> Communications ACM 36, </journal> <month> 9 (September </month> <year> 1993) </year> <month> 117-126. 55 </month>
Reference-contexts: Frameworks now exist for a broad range of application domains such as ET++, an editor toolkit [32] which has recently been used in MET++ which is a 5 framework for multimedia applications; RTL framework [18] for code optimization in compiler s; Choices for object-oriented operating systems <ref> [9] </ref>; BEE++ for analyzing and monitoring distributed programs [7]; and others for network management and telecommunications [5], and financial engineering [6]. 2.1.1 Developing a Framework An application framework evolves in response to feedback from reusers.
Reference: [10] <author> Cotter, S. </author> <title> with Potel, </title> <editor> M. </editor> <booktitle> Inside Taligent Technology. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1995. </year>
Reference-contexts: Active cookbooks [28] support the developer by combining the cookbook recipes with a visual design and development environment. Cookbooks have been used with several frameworks, such as MVC (Model-View-Controller), MacApp [20], HotDraw [16], ET++ , MET++ , and Taligent's CommonPoint framework <ref> [10] </ref>. Many application developers have successfully learned a framework from a cookbook and the framework source code.
Reference: [11] <author> L. Peter Deutsch, </author> <booktitle> Reusability in the Smalltalk-80 programming system, </booktitle> <pages> (pp. 72-76, </pages> <booktitle> ITT Proceedings of the Workshop on Reusability in Programming 1983) in Tutorial: Software Reusability, </booktitle> <editor> Peter Freeman (ed.), </editor> <publisher> IEEE Computer Society Press, </publisher> <year> 1987, </year> <month> pp.91-95. </month>
Reference-contexts: The framework consists of the abstract classes, the operations they implement, and the expectations placed on the concrete subclasses" <ref> [11, p.92] </ref> A framework exists to support the development of a family of applications. Typically a framework is developed by expert designers who have a deep knowledge of the application domain and long experience of software design.
Reference: [12] <author> Gamma, E., Helm, R., Johnson, R., and Vlissides, J. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1994. </year>
Reference-contexts: A contract supports a cookbook recipe with additional rigor in case a developer needs to consult a specification of collaborative behavior of classes. Design Patterns A design pattern presents a solution to a design problem that might arise in a given context <ref> [12] </ref>. A design pattern provides an abstraction above the level of classes and objects. Design patterns capture design experience at the micro-architecture level, by specifying the relationship between classes and objects involved in a particular design problem. A design pattern is meta-knowledge about how to incorporate flexibility into a framework. <p> I have created this pattern as a small variation on the Mediator design pattern <ref> [12] </ref>, and will describe it in the same manner. 5.5.1 Name : Referee Object Behavioral 5.5.2 Intent A mediator promotes loose coupling by keeping objects from referring to each other explicitly, and lets you vary their interaction independently.
Reference: [13] <author> Helm, R., Holland, I.M., and Gangopadhyay, D. </author> <title> Contracts: specifying behavioral compositions in object-oriented systems. </title> <booktitle> In Proceedings of OOPSLA'90. ACM/SIGPLAN, </booktitle> <address> New York, </address> <year> 1990, </year> <pages> pp. 169-180. </pages>
Reference-contexts: The frameworks under consideration are often chosen from toolkits for user interfaces and drawing programs. The emphasis is on documentation rather than specification, and, with the exception of the Contracts paper <ref> [13] </ref>, there is no concern for verification of correctness. Unfortunately, there is often little, or only anecdotal evidence of the impact of the style of documentation on actual reuse of the framework. In this section we discuss the various styles of documentation used. <p> While the traditional interface contract [24] of a class provides a specification of the class interface and class invariants in isolation, an interaction contract <ref> [13, 14] </ref> deals with the co-operative behavior of several participants that interact to achieve a joint goal.
Reference: [14] <author> Holland, </author> <title> I.M. Specifying reusable components with contracts. </title> <booktitle> In ECOOP'92. LCNS 615, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992, </year> <pages> pp. 287-308. </pages>
Reference-contexts: While the traditional interface contract [24] of a class provides a specification of the class interface and class invariants in isolation, an interaction contract <ref> [13, 14] </ref> deals with the co-operative behavior of several participants that interact to achieve a joint goal.
Reference: [15] <author> Jacobson, I., Christorson, M., Jonsson, P. and Overgaard, G. </author> <title> Object-Oriented Software Engineering: A Use Case Driven Approach. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1992. </year>
Reference-contexts: Background theory or domain information and analyses of trade-offs are crucial information. A hypermedia system supports access and navigation of the books. Other Recipes describe how to adapt the functionality of the framework. As such they may refer to, or be documented in terms of, use cases or scenarios <ref> [15] </ref> that describe the intended functionality.
Reference: [16] <author> Johnson, R. </author> <title> Documenting frameworks using patterns. </title> <booktitle> In Proceedings of OOP-SLA'92. ACM/SIGPLAN, </booktitle> <address> New York, </address> <year> 1992, </year> <pages> pp. 63-76. </pages>
Reference-contexts: The organization follows a spiral approach where recipes for the most frequent forms of reuse are presented early, and where concepts and details are delayed as long as possible. The first recipe is an overview of the framework concepts and the other recipes. Johnson <ref> [16] </ref> introduced an informal pattern language that can be used for documenting a framework in a natural language. <p> Active cookbooks [28] support the developer by combining the cookbook recipes with a visual design and development environment. Cookbooks have been used with several frameworks, such as MVC (Model-View-Controller), MacApp [20], HotDraw <ref> [16] </ref>, ET++ , MET++ , and Taligent's CommonPoint framework [10]. Many application developers have successfully learned a framework from a cookbook and the framework source code. <p> Cookbooks have been used with several frameworks, such as MVC (Model-View-Controller), MacApp [20], HotDraw [16], ET++ , MET++ , and Taligent's CommonPoint framework [10]. Many application developers have successfully learned a framework from a cookbook and the framework source code. Johnson <ref> [16, page 67] </ref> states that his cookbook is " the only documentation for a version of HotDraw that has been distributed since early 1992, and users say they are satisfied with it. " Contracts A contract is a specification of obligations and collaborations.
Reference: [17] <author> R.E. Johnson and B. Foote, </author> <title> Designing reusable classes, </title> <note> Journal of Object-Oriented Programming 1 (1988) 22-35. </note>
Reference-contexts: These classes can be taken from a class library, or can be application-specific." <ref> [17, p.25] </ref> A framework allows the user to reuse abstract designs, and pre-fabricated components in order to develop a system in the domain. A user may also customize existing components by subclassing. <p> By addressing the issues raised, the framework evolves, gaining flexibility, coverage of domain concepts, and clarity of the concepts and the dimensions along which they vary. The major steps in developing an application framework can be summarized as follows <ref> [17, 31] </ref>: 1. Identify and analyze the application domain and identify the framework. If the application domain is large, it should be decomposed into a set of possible frameworks that can be used to build a solution. Analyze existing software solutions to identify their commonalities and the differences. 2. <p> Johnson and Foote <ref> [17] </ref> provide a set of rules to this end: designing reusable classes. 2.2 Kinds of Framework Reuse It is important to realize that the styles of documentation for frameworks discussed in the literature really address different audiences, or sometimes a combination of audiences.
Reference: [18] <author> R.E. Johnson, C. McConnell, J.M. </author> <title> Lake, The RTL system: A framework for code optimization, Code Generation | Concepts, Tools, techniques, </title> <editor> R. Giegerich and S.L. Graham (eds), </editor> <publisher> Springer-Verlag, </publisher> <address> London, </address> <year> 1991, </year> <month> pp.255-274. </month>
Reference-contexts: Frameworks now exist for a broad range of application domains such as ET++, an editor toolkit [32] which has recently been used in MET++ which is a 5 framework for multimedia applications; RTL framework <ref> [18] </ref> for code optimization in compiler s; Choices for object-oriented operating systems [9]; BEE++ for analyzing and monitoring distributed programs [7]; and others for network management and telecommunications [5], and financial engineering [6]. 2.1.1 Developing a Framework An application framework evolves in response to feedback from reusers.
Reference: [19] <author> Lajoie, R. and Keller, R.K. </author> <title> Design and reuse in object-oriented frameworks: Patterns, contracts, and motifs in concert. In Object-Oriented Technology for Database and Software Systems. V.S. </title> <editor> Alagar and R. Missaoui (eds). </editor> <publisher> World Scientific Publishing, </publisher> <address> Singapore, </address> <year> 1995, </year> <pages> pp. 295-312. </pages>
Reference-contexts: Each pattern possesses the same format. The elements of a pattern are: description of its purposes, explanation of how to use it, description of its design, and some examples. Lajoie and Keller <ref> [19] </ref> introduce the term motif for Johnson's patterns in order to avoid confusion with design patterns. They use a template for a motif description that has a name and intent, a description of the reuse situation, the steps involved in customization, and cross references to motifs, design patterns, and contracts. <p> Contracts can be refined by either specializing the type of a participant, extending its actions, or deriving a new invariant which implies the old. Consequently, the refinement of a contract specifies a more specialized behavioral composition. The role of contracts in Lajoie and Keller's <ref> [19] </ref> documentation of ET++ is much more pragmatic than the original intent of Helm et al. A contract supports a cookbook recipe with additional rigor in case a developer needs to consult a specification of collaborative behavior of classes. <p> Design patterns are good at describing architectures, but a close look at the patterns used by Beck and Johnson for HotDraw show that they are of little use to an application developer, since they deal with internal structure of the framework. Lajoie and Keller <ref> [19] </ref> relegate design patterns to a support role for recipes. A design pattern illustrates relevant architectural issues, in case the application developer 11 needs a deeper understanding of a recipe. Framework Overview Setting the context of a framework is a first step in helping an application developer reuse a framework.
Reference: [20] <author> Lewis, T. </author> <title> Object-Oriented Application Frameworks. </title> <publisher> Manning Publications, </publisher> <address> Greenwich, CT, </address> <year> 1995. </year> <month> 56 </month>
Reference-contexts: Active cookbooks [28] support the developer by combining the cookbook recipes with a visual design and development environment. Cookbooks have been used with several frameworks, such as MVC (Model-View-Controller), MacApp <ref> [20] </ref>, HotDraw [16], ET++ , MET++ , and Taligent's CommonPoint framework [10]. Many application developers have successfully learned a framework from a cookbook and the framework source code.
Reference: [21] <author> Linn, M.C. and Clancy, M.J. </author> <title> The case for case studies in programming problems. </title> <journal> Comm. of ACM 35, </journal> <month> 3 (Mar. </month> <year> 1992) </year> <month> 121-132. </month>
Reference-contexts: Documentation requires a graded set of training examples. Each should illustrate a single new hotspot, starting with the simplest and most common form of reuse for that hotspot, and eventually providing a complete coverage. Linn and Clancy <ref> [21] </ref> offer valuable advise on designing and using examples. The ET++ framework comes with an extensive set of example applications. Most cookbooks (see the next section) revolve around a small number of simple example applications.
Reference: [22] <author> M.A. Linton, J.M. Vlissides, P.R. Calder, </author> <title> Composing user interfaces with Interviews, </title> <booktitle> IEEE Computer 22, </booktitle> <month> 2 (February </month> <year> 1989) </year> <month> 8-22. </month>
Reference-contexts: The large learning curve faced by the first-time user of a framework is a serious impediment to successfully reaping the benefits of reuse. Early examples of application frameworks were for graphical user interfaces (GUI), including MacApp [2], and Interviews <ref> [22] </ref>. There is now an abundance of GUI frameworks that have been used successfully on many platforms ranging from Dos to Unix, such as MacApp for MacIntosh, Owl-Windows for Dos/Windows, and Motif for Unix.
Reference: [23] <author> Meusel, M., Czarnecki, K. and Kopf, W. </author> <title> A model for structuring user documentation of object-oriented frameworks using patterns and hypertext. </title> <booktitle> Proceedings of ECOOP'97. LCNS 1241, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1997, </year> <pages> pp. 496-510. </pages>
Reference-contexts: There will be cross-references between recipes, and between recipes and source code. There may also be cross-references to any other available documentation (such as a reference manual, contracts, or design patterns). A good cookbook can use just pen and paper, however, a hypertext browser will help navigate cross-references <ref> [23] </ref>.
Reference: [24] <author> Meyer, B. </author> <title> Applying design by contract. </title> <booktitle> IEEE Computer 25, </booktitle> <address> 10 (Oct. </address> <year> 1992) </year> <month> 40-51. </month>
Reference-contexts: Johnson [16, page 67] states that his cookbook is " the only documentation for a version of HotDraw that has been distributed since early 1992, and users say they are satisfied with it. " Contracts A contract is a specification of obligations and collaborations. While the traditional interface contract <ref> [24] </ref> of a class provides a specification of the class interface and class invariants in isolation, an interaction contract [13, 14] deals with the co-operative behavior of several participants that interact to achieve a joint goal. <p> Traditional techniques for modules, such as the Larch family of interface languages can be used for describing class interfaces and extended to include the obligations on subclasses as in Larch /C++ . The Eiffel language supports design-by-contract <ref> [24] </ref> through the declaration of assertions, preconditions, and postconditions. Reference manuals by themselves are not a very useful way to learn a framework. Design Notebooks A design notebook collects together information related to the design of hardware.
Reference: [25] <author> Parker Brothers, </author> <title> Code Name: Sector, game. </title>
Reference-contexts: This is short for "Sink that U-Boat", and is inspired by an existing game <ref> [25] </ref>. In Sub four surface ships try to sink an invisible submarine using only information about the target range. The game is designed to be played by children, so it will emphasize ease of play over realism and historical reality.
Reference: [26] <author> Pree, W. </author> <title> Design Patterns for Object-Oriented Software Development. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1995. </year>
Reference: [27] <author> Rational Corporation, </author> <title> Unified Modeling Language, </title> <institution> Home page: </institution> <note> http://www.rational.com/uml/index.html </note>
Reference-contexts: We will then describe the game and its user interface, followed by a cookbook. We will continue with a description of the framework itself introducing a new design pattern: the Referee pattern. After that we will conclude. We assume the reader is familiar with the Unified Modeling Language (UML) <ref> [27] </ref>, and with the features of the draft ANSI standard C++ programming language [30]. 3 Chapter 2 Background 2.1 Frameworks A framework is a collection of abstract classes that provides an infrastructure common to a family of applications. <p> An overview of the classes, their associations and collaborations is presented first, using the UML notation <ref> [27] </ref>. The central design decision is the use of the Referee design pattern to enforce the rules of the game.
Reference: [28] <author> Schappert, A., Sommerlad, P. and Pree, W. </author> <title> Automated framework development. </title> <booktitle> Symposium on Software Reusability (SSR'95), ACM Software Engineering Notes (Aug. </booktitle> <year> 1995) </year> <month> 123-127. </month>
Reference-contexts: The design patterns provide information about the internal architecture, and the contracts provide more rigorous description of the collaborations relevant to the motif. Active cookbooks <ref> [28] </ref> support the developer by combining the cookbook recipes with a visual design and development environment. Cookbooks have been used with several frameworks, such as MVC (Model-View-Controller), MacApp [20], HotDraw [16], ET++ , MET++ , and Taligent's CommonPoint framework [10].
Reference: [29] <author> Sparks, S., Benner, K., and Faris, C. </author> <title> Managing object-oriented framework reuse. </title> <booktitle> IEEE Computer 29, </booktitle> <month> 9 (Sep. </month> <year> 1996) </year> <month> 52-61. </month> <year> 1990. </year> <note> AT&T Technical Journal 71, 6 (1992) 34-45. </note>
Reference-contexts: Such examples however are complete applications often selected for their elaborate use of features and functionality. Sparks et al <ref> [29, page 60] </ref> found that, by themselves, these examples are too difficult for novice application developers, and that the introduction to framework hotspots needs to be more incremental, gradually going from the simplest forms of reuse to more advanced forms. Documentation requires a graded set of training examples.
Reference: [30] <author> Stroustrup, B. </author> <title> The C++ Programming Language, 3rd edition, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1997. </year>
Reference-contexts: We will continue with a description of the framework itself introducing a new design pattern: the Referee pattern. After that we will conclude. We assume the reader is familiar with the Unified Modeling Language (UML) [27], and with the features of the draft ANSI standard C++ programming language <ref> [30] </ref>. 3 Chapter 2 Background 2.1 Frameworks A framework is a collection of abstract classes that provides an infrastructure common to a family of applications. The design of the framework fixes certain roles and responsibilities amongst the classes, as well as standard protocols for their collaboration.
Reference: [31] <author> Taligent, Inc., </author> <title> Building object-oriented frameworks, A Taligent White Paper, </title> <year> 1994. </year>
Reference-contexts: By addressing the issues raised, the framework evolves, gaining flexibility, coverage of domain concepts, and clarity of the concepts and the dimensions along which they vary. The major steps in developing an application framework can be summarized as follows <ref> [17, 31] </ref>: 1. Identify and analyze the application domain and identify the framework. If the application domain is large, it should be decomposed into a set of possible frameworks that can be used to build a solution. Analyze existing software solutions to identify their commonalities and the differences. 2.
Reference: [32] <author> A. Weinand, E. Gamma, R. Marty, </author> <title> Design and implementation of ET++, a seamless object-oriented application framework, Structured Programming 10, </title> <month> 2 </month> <year> (1989) </year> <month> 63-87. </month>
Reference-contexts: There is now an abundance of GUI frameworks that have been used successfully on many platforms ranging from Dos to Unix, such as MacApp for MacIntosh, Owl-Windows for Dos/Windows, and Motif for Unix. Frameworks now exist for a broad range of application domains such as ET++, an editor toolkit <ref> [32] </ref> which has recently been used in MET++ which is a 5 framework for multimedia applications; RTL framework [18] for code optimization in compiler s; Choices for object-oriented operating systems [9]; BEE++ for analyzing and monitoring distributed programs [7]; and others for network management and telecommunications [5], and financial engineering [6].
References-found: 32

