URL: http://www.cis.upenn.edu/~switchware/papers/plan.ps
Refering-URL: http://www.cis.upenn.edu/~switchware/home.html
Root-URL: 
Title: PLAN: A Packet Language for Active Networks  
Author: Michael Hicks, Pankaj Kakkar, Jonathan T. Moore, Carl A. Gunter, and Scott Nettles 
Note: This work was supported by DARPA under Contracts #DABT63-95-C-0073, #N66001-96-C-852, and #MDA972-95-1-0013, and by the National Science Foundation CAREER Grant #CCR-9702107, with additional support from the Hewlett-Packard and Intel Corporations and the University of Pennsylvania Research Foundation. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. Government.  
Affiliation: Department of Computer and Information Science University of Pennsylvania  
Abstract: PLAN (Packet Language for Active Networks) is a new language for programs that form the packets of a programmable network. These programs replace the packet headers (which can be viewed as very rudimentary programs) used in current networks. As such, PLAN programs are lightweight and of restricted functionality. These limitations are mitigated by allowing PLAN code to call node-resident service routines written in other, more powerful languages. This two-level architecture, in which PLAN serves as a scripting or `glue' language for more general services, is the primary contribution of this paper. We have successfully applied the PLAN programming environment to implement an IP-free internetwork. PLAN is based on the simply typed lambda calculus and provides a restricted set of primitives and datatypes. PLAN defines a special construct called a chunk used to describe the remote execution of PLAN programs on other nodes. Primitive operations on chunks are used to provide basic data transport in the network and to support layering of protocols. Remote execution can make debugging difficult, so PLAN provides strong static guarantees to the programmer, such as type safety. A more novel property aimed at protecting network availability is a guarantee that PLAN programs use a bounded amount of network resources. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Scott Alexander, William A. Arbaugh, Angelos D. Keromytis, and Jonathan M. Smith. </author> <title> A secure active network architecture. </title> <journal> IEEE Network Special Issue on Active and Controllable Networks, </journal> <note> 1998. To appear. </note>
Reference-contexts: Therefore, we have chosen to restrict PLAN's expressibility so that it may be authentication-free. Functionality requiring authentication can be made available by using services, and we expect to leverage active networking security research like the SANE project <ref> [1] </ref>. 2.3 Performance PLAN should offer new functionality without compromising the performance of functionality offered by the current network, particularly payload delivery. This would be impossible if all PLAN packets had to be authenticated.
Reference: [2] <author> D. Scott Alexander, Marianne Shaw, Scott M. Nettles, and Jonathan M. Smith. </author> <title> Active bridging. </title> <booktitle> In Proceedings, 1997 SIGCOMM Conference. ACM, </booktitle> <year> 1997. </year>
Reference-contexts: Numerous other motivations for the advent of active networks are described in [28]. Several other active networking projects address parts of the same design space as PLAN. The Active Bridge <ref> [2] </ref> is part of the SwitchWare Project [26] at the University of Pennsylvania. It uses OCaml [4] as a service language for constructing an extensible bridge. The dynamic loading infrastructure provided by the Active Bridge forms a basis for the PLANet internetwork.
Reference: [3] <author> Bell Communications Research Inc. </author> <title> AIN Release 1 Service Logic Program Framework Generic Requirements. </title> <publisher> FA-NWT-001132. </publisher>
Reference-contexts: The first application of programmable network routing may be the Softnet [30] system, which provided for the execution of packets of multi-threaded M-FORTH code. The potential of active networks 6 has been demonstrated by Advanced Intelligent Network--ing (AIN) <ref> [3] </ref>, which was successful in reducing the deployment time of some telecommunication services from years to weeks. A motivating technology called Protocol Boosters [6] provides customizable protocols, but these customizations would be difficult to deploy without some of the capabilities provided by active packets.
Reference: [4] <institution> Caml home page. </institution> <note> http://pauillac.inria.fr/caml/index-eng.html. </note>
Reference-contexts: Second, the heterogeneous nature of an internetwork means that the implementation language should be easily portable. Third, our implementation language needed to provide strong typing for safety. We have completed implementations of PLAN in two languages that meet these requirements: OCaml <ref> [4] </ref> and the Pizza [19] extension to Java [7]. Our most current implementation is in OCaml due to the need for access to the source code to provide Ethernet access for our internetwork PLANet. <p> Numerous other motivations for the advent of active networks are described in [28]. Several other active networking projects address parts of the same design space as PLAN. The Active Bridge [2] is part of the SwitchWare Project [26] at the University of Pennsylvania. It uses OCaml <ref> [4] </ref> as a service language for constructing an extensible bridge. The dynamic loading infrastructure provided by the Active Bridge forms a basis for the PLANet internetwork. ANTS [29] (Active Network Transfer System), is a toolkit for deploying Java protocols on active nodes.
Reference: [5] <author> D. Clark, Scott Shenker, and L. Zhang. </author> <title> Supporting real-time applications in an integrated service packet 7 network: Architecture and mechanism. </title> <booktitle> In Proceed--ings, 1992 SIGCOMM Conference, </booktitle> <pages> pages 14-26, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: As a consequence, the introduction of new network services at this level is very slow. For example, there was a span of five or more years from the time RSVP was conceptualized <ref> [5] </ref> to the time it was deployed [17], even in a very limited manner. Active networks are an approach to getting more flexibility at the IP (or similarly standardized) level by making the network infrastructure programmable.
Reference: [6] <author> David C. Feldmeier, A. McAuley, and Jonathan M. Smith. </author> <title> Protocol boosters. </title> <journal> IEEE Journal on Special Aspects of Communication, </journal> <note> 1998. To appear in the issue on Protocol Architectures for the 21st Century. </note>
Reference-contexts: The potential of active networks 6 has been demonstrated by Advanced Intelligent Network--ing (AIN) [3], which was successful in reducing the deployment time of some telecommunication services from years to weeks. A motivating technology called Protocol Boosters <ref> [6] </ref> provides customizable protocols, but these customizations would be difficult to deploy without some of the capabilities provided by active packets. Numerous other motivations for the advent of active networks are described in [28]. Several other active networking projects address parts of the same design space as PLAN.
Reference: [7] <author> James Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Second, the heterogeneous nature of an internetwork means that the implementation language should be easily portable. Third, our implementation language needed to provide strong typing for safety. We have completed implementations of PLAN in two languages that meet these requirements: OCaml [4] and the Pizza [19] extension to Java <ref> [7] </ref>. Our most current implementation is in OCaml due to the need for access to the source code to provide Ethernet access for our internetwork PLANet. We currently transmit abstract syntax trees in our packets, and use an RPC-style marshalling scheme for the arguments to the invocation function. <p> One common comment was on the ease of dynamically installing services written in Java (Pizza was the main implementation language at the time), thus validating our initial design decision of following a two-level approach. 6 Related Work Postscript [27] and Java <ref> [7] </ref> are the most well known examples of using programmability and mobile code to increase the flexibility of a system. The first application of programmable network routing may be the Softnet [30] system, which provided for the execution of packets of multi-threaded M-FORTH code.
Reference: [8] <author> Carl A. Gunter, Scott Nettles, and Peter Homeier. </author> <title> Infrastructure for proof-referencing code. </title> <booktitle> In International Conference on Theorem Proving in Higher Order Logics, </booktitle> <year> 1997. </year>
Reference-contexts: Although we have worked hard to keep the language simple and close to areas in which programming language theory is advanced, there are still major challenges in the formulation of service safety and security requirements. It is possible that approaches like proof carrying code <ref> [16, 15, 8] </ref> might provide some guidance. A topic of particular interest is how to improve the performance of PLAN processing by active routers. The mobile programming environment provides some unique opportunities for optimization.
Reference: [9] <author> C. Hendrick. </author> <title> Routing Information Protocol. </title> <type> RFC 1058, </type> <institution> Rutgers University, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: PLANet's basic protocols are based on ones used in IP, but with a key difference: all packets are PLAN programs. PLANet currently provides a number of application services, such as reliable and unreliable datagram delivery mechanisms, as well standard network services, such as RIP-style routing <ref> [9] </ref> and ARP-like address resolution [20]. The basic performance of our user-space implementation using the OCaml bytecode interpreter is quite respectable: a PLANet router running on a dual 300 MHz Pentium II can switch packets at 48 Mbps over a 100 Mbps Ethernet.
Reference: [10] <author> Michael Hicks. </author> <title> PLAN system security. </title> <type> Technical Report MS-CIS-98-25, </type> <institution> Department of Computer and Information Science, University of Pennsylvania, </institution> <month> April </month> <year> 1998. </year>
Reference-contexts: We are also exploring ways to modify PLAN itself to obtain better security at the expense of expressiveness (one such approach was described in Section 3.5). Preliminary results may be found in <ref> [10] </ref>. Two topics related to security are that of namespaces and formal semantics. We currently have a very basic method for managing service namespaces; a much more sophisticated mechanism will eventually be needed for scalability. Another related topic is the formal specification of PLAN and its guarantees.
Reference: [11] <author> Michael Hicks, Jonathan T. Moore, D. Scott Alexander, Carl A. Gunter, and Scott Nettles. </author> <title> PLANet: An active internetwork. </title> <address> http://www.cis.upenn.edu/~switchware/ papers/planet.ps. </address>
Reference-contexts: The basic performance of our user-space implementation using the OCaml bytecode interpreter is quite respectable: a PLANet router running on a dual 300 MHz Pentium II can switch packets at 48 Mbps over a 100 Mbps Ethernet. More details about PLANet and its performance may be found in <ref> [11] </ref>, but the use of the PLAN programming environment to implement it deserves mention. In PLANet, distributed protocols used to maintain the network, such as routing and address resolution protocols, are implemented as a combination of PLAN programs and services.
Reference: [12] <author> Dag Johansen, Robbert van Renesse, and Fred B. Schneider. </author> <title> Operating system support for mobile agents. </title> <booktitle> In Proceedings of the 5th Workshop on Hot Topics in Operating Systems, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: There are a variety of projects related to networks, distributed computing, and operating systems that are related to PLAN's philosophy of active networks. For example, the Tacoma Project <ref> [12] </ref> is a programming-language-based system for communications between mobile agents. Inter-packet communication, which is forbidden in PLAN, is the core of their approach. As such, they have done more extensive security work than many other active networking projects.
Reference: [13] <author> Peter Lee and Mark Leone. </author> <title> Optimizing ML with run-time code generation. </title> <booktitle> In Proccedings of the ACM SIG-PLAN '96 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 137-148, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: We might alternatively consider a byte-code representation which could presumably further improve PLAN execution times. Applying runtime code generation techniques <ref> [13] </ref> to service extensions seems very likely to provide substantial service time improvements.
Reference: [14] <author> Luc Moreau and Christian Queinnec. </author> <title> Design and semantics of quantum: a language to control resource consumption in distributed computing. </title> <booktitle> In USENIX Conference on Domain Specific Languages (DSL'97), </booktitle> <pages> pages 183-197, </pages> <month> October </month> <year> 1997. </year>
Reference-contexts: It uses a special-purpose byte-code language and like PLAN has as a design goal of providing flexible network diagnostics, although it makes no provision for extending its service level dynamically. Sprocket, like PLAN, provides for resource control, although it uses both hop and instruction counts. The Quantum <ref> [14] </ref> language model provides resource control for distributed computing, including the ability to grant and revoke resources to processes. It is not clear, however, how applicable this more complex model of resource usage would be in the realm of ephemeral active packets.
Reference: [15] <author> George C. Necula. </author> <title> Proof-carrying code. </title> <booktitle> In Proceedings of the 24th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL '97). </booktitle> <publisher> ACM Press, </publisher> <year> 1997. </year>
Reference-contexts: Although we have worked hard to keep the language simple and close to areas in which programming language theory is advanced, there are still major challenges in the formulation of service safety and security requirements. It is possible that approaches like proof carrying code <ref> [16, 15, 8] </ref> might provide some guidance. A topic of particular interest is how to improve the performance of PLAN processing by active routers. The mobile programming environment provides some unique opportunities for optimization.
Reference: [16] <author> George C. Necula and Peter Lee. </author> <title> Safe kernel extensions without run-time checking. </title> <booktitle> In Second Symposium on Operating System Design and Implementation (OSDI '96), </booktitle> <year> 1996. </year>
Reference-contexts: Although we have worked hard to keep the language simple and close to areas in which programming language theory is advanced, there are still major challenges in the formulation of service safety and security requirements. It is possible that approaches like proof carrying code <ref> [16, 15, 8] </ref> might provide some guidance. A topic of particular interest is how to improve the performance of PLAN processing by active routers. The mobile programming environment provides some unique opportunities for optimization.
Reference: [17] <author> D. Pappalardo. </author> <title> BBN to test RSVP. Network World, </title> <address> 13(50):1,14, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: As a consequence, the introduction of new network services at this level is very slow. For example, there was a span of five or more years from the time RSVP was conceptualized [5] to the time it was deployed <ref> [17] </ref>, even in a very limited manner. Active networks are an approach to getting more flexibility at the IP (or similarly standardized) level by making the network infrastructure programmable.
Reference: [18] <author> C. Partridge and A. Jackson. </author> <title> Smart packets. </title> <type> Technical report, </type> <institution> BBN, </institution> <year> 1996. </year> <note> http://www.net-tech.bbn.com/ smtpkts/smtpkts-index.html. </note>
Reference-contexts: Hence ANTS seems more attractive as a service-level system than as a packet language; using ANTS to transport service extensions within a PLAN system is something we hope to investigate in the near future. Sprocket is a language from the Smart Packets project at BBN <ref> [18] </ref>. It uses a special-purpose byte-code language and like PLAN has as a design goal of providing flexible network diagnostics, although it makes no provision for extending its service level dynamically. Sprocket, like PLAN, provides for resource control, although it uses both hop and instruction counts.
Reference: [19] <institution> Pizza home page. </institution> <note> http://www.math.luc.edu/pizza. </note>
Reference-contexts: Second, the heterogeneous nature of an internetwork means that the implementation language should be easily portable. Third, our implementation language needed to provide strong typing for safety. We have completed implementations of PLAN in two languages that meet these requirements: OCaml [4] and the Pizza <ref> [19] </ref> extension to Java [7]. Our most current implementation is in OCaml due to the need for access to the source code to provide Ethernet access for our internetwork PLANet.
Reference: [20] <author> David C. Plummer. </author> <title> An Ethernet Address Resolution Protocol. </title> <type> RFC 826, </type> <month> November </month> <year> 1982. </year>
Reference-contexts: PLANet currently provides a number of application services, such as reliable and unreliable datagram delivery mechanisms, as well standard network services, such as RIP-style routing [9] and ARP-like address resolution <ref> [20] </ref>. The basic performance of our user-space implementation using the OCaml bytecode interpreter is quite respectable: a PLANet router running on a dual 300 MHz Pentium II can switch packets at 48 Mbps over a 100 Mbps Ethernet.
Reference: [21] <author> J. Postel. </author> <title> User Datagram Protocol. </title> <type> RFC 768, ISI, </type> <month> August </month> <year> 1980. </year>
Reference-contexts: In addition, PLAN provides an eval primitive to invoke a chunk. Together, these features allow chunks to be manipulated, `encapsulated,' dispatched, extracted, and finally executed| essentially providing for protocol layering within PLAN. For an example of chunk encapsulation, let us consider how to do UDP-like <ref> [21] </ref> delivery in the PLAN system. Our program appears in Figure 4.
Reference: [22] <author> J. Postel. </author> <title> Internet Control Message Protocol. </title> <type> RFC 792, ISI, </type> <month> September </month> <year> 1981. </year>
Reference-contexts: Therefore, PLAN can be viewed as a network-level `glue' language. More concretely, consider ping, one of the most basic network diagnostics. In the current network, it must be provided as a special packet type in the ICMP <ref> [22] </ref> protocol. In an active network, it can just be a program provided by a user.
Reference: [23] <author> J. Postel. </author> <title> Internet Protocol. </title> <type> RFC 791, ISI, </type> <month> September </month> <year> 1981. </year>
Reference-contexts: If new functionality needs to be added to the protocol then the packet format and its semantics must change. Or, using our analogy, the programming language and its specification must change. For a widely deployed protocol, such as IP <ref> [23] </ref>, changes to the packet format must be deliberated and agreed upon by a standards body. As a consequence, the introduction of new network services at this level is very slow.
Reference: [24] <institution> Query Certificate Manager project home page. </institution> <note> http://www.cis.upenn.edu/~qcm. </note>
Reference-contexts: In particular we are looking at mechanisms for trust management and resource bounding. Trust management is important for authorizing the use of sensitive services, such as the ability to modify a routing table. We are looking into using QCM <ref> [24] </ref>, which allows us to easily define a distributed key and authorization infrastructure which should scale nicely in a large network. We are also exploring ways to modify PLAN itself to obtain better security at the expense of expressiveness (one such approach was described in Section 3.5).
Reference: [25] <author> Jonathan M. Smith, Dave J. Farber, David C. Feldmeier, Carl A. Gunter, Scott M. Nettles, William D. Sincoskie, and Scott Alexander. Switchware: </author> <title> Accelerating network evolution. </title> <address> http://www.cis.upenn.edu/~switchware/ papers/sware.ps, </address> <year> 1996. </year>
Reference-contexts: Inter-packet communication, which is forbidden in PLAN, is the core of their approach. As such, they have done more extensive security work than many other active networking projects. The reader is referred to the SwitchWare white paper <ref> [25] </ref> for more information about systems-related issues in active networking. 7 Future Work We are currently focusing much of our effort in the area of security. In particular we are looking at mechanisms for trust management and resource bounding.
Reference: [26] <institution> SwitchWare project home page. </institution> <note> http://www.cis.upenn.edu/~switchware. </note>
Reference-contexts: Numerous other motivations for the advent of active networks are described in [28]. Several other active networking projects address parts of the same design space as PLAN. The Active Bridge [2] is part of the SwitchWare Project <ref> [26] </ref> at the University of Pennsylvania. It uses OCaml [4] as a service language for constructing an extensible bridge. The dynamic loading infrastructure provided by the Active Bridge forms a basis for the PLANet internetwork.
Reference: [27] <author> Adobe Systems. </author> <title> PostScript Language Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1985. </year>
Reference-contexts: Feedback from the students on the PLAN system was encouraging. One common comment was on the ease of dynamically installing services written in Java (Pizza was the main implementation language at the time), thus validating our initial design decision of following a two-level approach. 6 Related Work Postscript <ref> [27] </ref> and Java [7] are the most well known examples of using programmability and mobile code to increase the flexibility of a system. The first application of programmable network routing may be the Softnet [30] system, which provided for the execution of packets of multi-threaded M-FORTH code.
Reference: [28] <author> David L. Tennenhouse, Jonathan M. Smith, W. David Sincoskie, David J. Wetherall, and Gary J. Minden. </author> <title> A survey of active network research. </title> <journal> IEEE Communications Magazine, </journal> <volume> 35(1) </volume> <pages> 80-86, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: A motivating technology called Protocol Boosters [6] provides customizable protocols, but these customizations would be difficult to deploy without some of the capabilities provided by active packets. Numerous other motivations for the advent of active networks are described in <ref> [28] </ref>. Several other active networking projects address parts of the same design space as PLAN. The Active Bridge [2] is part of the SwitchWare Project [26] at the University of Pennsylvania. It uses OCaml [4] as a service language for constructing an extensible bridge.
Reference: [29] <author> David J. Wetherall, John Guttag, and David L. Ten-nenhouse. </author> <title> ANTS: A toolkit for building and dynamically deploying network protocols. </title> <booktitle> In IEEE OPE-NARCH, </booktitle> <month> April </month> <year> 1998. </year>
Reference-contexts: The Active Bridge [2] is part of the SwitchWare Project [26] at the University of Pennsylvania. It uses OCaml [4] as a service language for constructing an extensible bridge. The dynamic loading infrastructure provided by the Active Bridge forms a basis for the PLANet internetwork. ANTS <ref> [29] </ref> (Active Network Transfer System), is a toolkit for deploying Java protocols on active nodes. It provides implicit demand loading of protocols, essentially using Java for both its packet and service languages. The key disadvantages of this approach are that Java is not as secure, simple, or lightweight as PLAN.
Reference: [30] <author> J. Zander and R. Forchheimer. </author> <title> Softnet|An approach to higher level packet radio. </title> <booktitle> In Proceedings, AMRAD Conference, </booktitle> <address> San Francisco, </address> <year> 1983. </year> <month> 8 </month>
Reference-contexts: The first application of programmable network routing may be the Softnet <ref> [30] </ref> system, which provided for the execution of packets of multi-threaded M-FORTH code. The potential of active networks 6 has been demonstrated by Advanced Intelligent Network--ing (AIN) [3], which was successful in reducing the deployment time of some telecommunication services from years to weeks.
References-found: 30

