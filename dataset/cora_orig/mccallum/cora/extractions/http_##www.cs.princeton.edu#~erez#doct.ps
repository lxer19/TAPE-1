URL: http://www.cs.princeton.edu/~erez/doct.ps
Refering-URL: http://www.cs.princeton.edu/~erez/publications.html
Root-URL: http://www.cs.princeton.edu
Title: KNOWLEDGE COMPLEXITY VERSUS COMPUTATIONAL COMPLEXITY AND THE HARDNESS OF APPROXIMATIONS  
Author: Erez Petrank 
Abstract-found: 0
Intro-found: 1
Reference: [ABV-95] <author> W. Aiello, M. Bellare, and R. </author> <title> Venekatesan . Knowledge on the Average Perfect, Statistical and Logarithmic. </title> <booktitle> Proceedings of the 27rd Annual ACM Symposium on the Theory of Computing, ACM (1995). </booktitle>
Reference-contexts: We believe that this generator is useful also in other settings, and 22 in fact, it has already been used in papers that followed this work (see <ref> [BFK-95, ABV-95] </ref>). In this section, we show an efficient implementation of the universal almost uniform generator. 2.2.1 Definition and history The generator samples "almost uniformly" from a given set S 2 NP.
Reference: [AH-87] <author> W. Aiello and J. H -astad. </author> <title> Perfect Zero-Knowledge can be Recognized in Two Rounds. </title> <booktitle> Proceedings of the 28th Annual IEEE Symposium on the Foundations of Computer Science, IEEE (1987). </booktitle>
Reference-contexts: Previous works have provided information only concerning the zero level of these hierarchies. Fortnow has pioneered the attempts to investigate the computational complexity of (perfect/statistical) zero-knowledge [F-89], and was followed by Aiello and Hastad <ref> [AH-87] </ref>. Their results can be summarized by the following theorem that bounds the computational complexity of languages having zero-knowledge proofs. Theorem [F-89, AH-87]: SKC (0) AM co-AM Hence, languages having statistical zero-knowledge must lie in the second level of the polynomial-time hierarchy. <p> Fortnow has pioneered the attempts to investigate the computational complexity of (perfect/statistical) zero-knowledge [F-89], and was followed by Aiello and Hastad [AH-87]. Their results can be summarized by the following theorem that bounds the computational complexity of languages having zero-knowledge proofs. Theorem <ref> [F-89, AH-87] </ref>: SKC (0) AM co-AM Hence, languages having statistical zero-knowledge must lie in the second level of the polynomial-time hierarchy. Needless to say that PKC (k ()) SKC (k ()), for any function k and in particular for k 0. <p> In particular, there is a flaw in the AM-protocol presented in [F-89] for the complement language (see Section 2.6). However, the paper of Aiello and Hastad provides all the necessary machinery for proving Fortnow's result as well <ref> [AH-87, H-94] </ref>. <p> However, the paper of Aiello and Hastad provides all the necessary machinery for proving Fortnow's result as well [AH-87, H-94]. Needless to say that the basic approach presented by Fortnow (i.e., looking at the "simulator-based prover") is valid and has inspired all subsequent works (e.g., <ref> [AH-87, BMO-90, Ost-91, BP-92a, OW-93] </ref>) as well as the current one. 1.2 The Hardness of Approximations The importance of approximation algorithms became evident in the early 70's, when it was discovered that unless P=NP (which is very unlikely) many important optimization problems cannot be solved precisely in polynomial time [Coo-71, Kar-72]. <p> The following lemma follows from Lemma 4.1 in Aiello-H-astad <ref> [AH-87] </ref>, which in turn is based on ideas of Sipser [Si-83] and Babai [Bab-85]. Lemma 2.6 Let b; k be positive integers, ffi &gt; 0 and S f0; 1g k . Let l = 16 lg (2ffi 1 ). <p> We use the almost uniform generator to implement it efficiently. The simulation based prover was first used by Fortnow [F-89], and it was used in many works since <ref> [AH-87, BMO-90, Os-91] </ref>. Definition 2.11 Let S be a simulator of a g rounds interactive proof with message length l. <p> This claim, as we are going to show, is wrong. Yet, the result SZK co-AM does hold, since the work of Aiello and Hastad contains the necessary refinements which enable to present a modified AM-protocol for L (see <ref> [AH-87, H-94] </ref>). Furthermore, Fortnow's basic approach is valid, and indeed it was used in subsequent works (e.g., [AH-87, BMO-90, Ost-91, BP-92a, OW-93]). Fortnow's basic approach starts with the observation that the simulator M must behave differently on x 2 L and x 62 L. <p> Yet, the result SZK co-AM does hold, since the work of Aiello and Hastad contains the necessary refinements which enable to present a modified AM-protocol for L (see [AH-87, H-94]). Furthermore, Fortnow's basic approach is valid, and indeed it was used in subsequent works (e.g., <ref> [AH-87, BMO-90, Ost-91, BP-92a, OW-93] </ref>). Fortnow's basic approach starts with the observation that the simulator M must behave differently on x 2 L and x 62 L. Clearly, the difference cannot be recognized in polynomial-time, unless L 2 BPP. <p> Fortnow suggests a characterization of the simulator's behavior on x 2 L and uses this characterization in his protocol for L, yet this characterization is wrong. Aiello and Hastad present a refinement of Fortnow's characterization <ref> [AH-87] </ref>, their characterization is correct and can be used to show that SZK AM (which is the goal of their paper) as well as SZK co-AM. 51 Fortnow's characterization Given an interactive proof (P; V ) for L and a simulator M , and fixing a common input x 2 f0; <p> Indeed, this is exactly the nature of the refinement suggested by Aiello and Hastad <ref> [AH-87] </ref>. 54 2.7 Concluding Remarks We consider our main result as a very first step towards a classification of languages according to the knowledge complexity of their interactive proof systems. Indeed there is much to be known. Below we first mention two questions which do not seem too ambitious.
Reference: [AJ-87] <author> M. Ajtai. </author> <title> Recursive Construction for 3-Regular Expanders. </title> <booktitle> In Proc. 28th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 295-304, </pages> <year> 1987. </year>
Reference-contexts: Bipartite expanders on 2 fi n nodes can be efficiently constructed for any n 2 IN <ref> [Mar-73, GG-81, AJ-87] </ref>.
Reference: [ADLRY-92] <author> N. Alon, R.A. Duke, H. Lefmann, V. Rodl, and R. Yuster, </author> <title> The Algorithmic Aspects of the Regularity Lemma. </title> <booktitle> In Proc. 33th Ann. Symp. </booktitle> <institution> Found. Comput. Sci., </institution> <year> 1992, </year> <pages> 473-482. </pages>
Reference-contexts: Most problems shown as having a hard gap in this paper have related positive results asserting that it is possible to approximate them to within some constant ratio in polynomial time. A different kind of positive result was given by Alon et al. <ref> [ADLRY-92] </ref>. They showed that for any * &gt; 0, there is a polynomial time algorithm that, given k-colorable graphs having jEj = (jV j 2 ), finds a k-coloring in which the number of consistent edges exceeds (1 *)jEj.
Reference: [ALMSS-92] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, M. Szegedy, </author> <title> "Proof Verification and Intractability of Approximation Problems." </title> <booktitle> 33st FOCS, </booktitle> <year> 1992. </year>
Reference-contexts: Their result was improved by Arora and Safra [AS-92], who showed that if there exists a polynomial time algorithm that approximates the clique problem to within a ratio of 2 log n=(log log n) O (1) then P=NP. The following work, by Arora, Lund, Motwani, Sudan, and Szegedi <ref> [ALMSS-92] </ref>, improved over this result by showing that no polynomial time algorithm can approximate MAXIMUM CLIQUE to within a ratio of n * for some * &gt; 0 unless P=NP. <p> Approximation problems can be partitioned in the same manner and so can results concerning the difficulty of approximations. The first category contains problems such as approximating the size of the biggest clique in the input graph (the hardness of this problem was shown by <ref> [FGLSS-91, AS-92, ALMSS-92] </ref>), or the minimum number of colors needed to properly color the input graph (see [LY-92]). <p> The second category includes problems such as approximating the maximum number of clauses that can be simultaneously satisfied in an input formula <ref> [ALMSS-92] </ref>, or approximating the maximum number of consistent edges in a best 3-coloring of the input graph (Papadimitriou & Yannakakis 1991). (see [PY-91]). <p> approximating max-sat was shown by proving that there exists a constant * 0 &gt; 0 such that, unless P=NP, one can not distinguish in polynomial time between formulae for which all clauses can be satisfied and formulae for which only a fraction 1 * 0 of clauses can be satisfied <ref> [ALMSS-92] </ref>. The L-reductions that were used by Papadimitriou & Yannakakis [PY-91], preserve the existence of such gaps and thus, polynomial time inseparable gaps appear in all max-snp-hard problems. This implies that these problems have no polynomial time approximation schemes. <p> The first class contains optimization problems for which it is NP-hard to determine whether an input I has OP T (I) = N (I). This class contains problems as max-sat (proven hard to approximate by Arora et al. <ref> [ALMSS-92] </ref>) and max k-colorability (for k 3) [PY-91] and Section 3.2). The other class contains problems for which it is easy to decide whether an input I has OP T (I) = N (I).
Reference: [AS-92] <author> S. Arora and S. Safra. </author> <title> Probabilistic Checking of Proofs: A New Characterization of NP. </title> <booktitle> In Proc. 33rd IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: They were able to show that if there exists a polynomial time algorithm which approximates MAXIMUM CLIQUE to within a factor 2 log 1* n then all languages in NP can be determined in almost polynomial deterministic time. Their result was improved by Arora and Safra <ref> [AS-92] </ref>, who showed that if there exists a polynomial time algorithm that approximates the clique problem to within a ratio of 2 log n=(log log n) O (1) then P=NP. <p> Approximation problems can be partitioned in the same manner and so can results concerning the difficulty of approximations. The first category contains problems such as approximating the size of the biggest clique in the input graph (the hardness of this problem was shown by <ref> [FGLSS-91, AS-92, ALMSS-92] </ref>), or the minimum number of colors needed to properly color the input graph (see [LY-92]).
Reference: [Bab-85] <author> L. Babai. </author> <title> Trading group theory for randomness. </title> <booktitle> In Proc. 17th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 421-420, </pages> <year> 1985. </year>
Reference-contexts: Meanwhile, with no apparent connection, the research in the area of interactive proofs was making a rapid progress. The research was initiated by Goldwasser Micali and Rackoff [GMR-89] and Babai <ref> [Bab-85] </ref>. The extended model of multi-provers interactive proofs was suggested by Ben-Or, Goldwasser, Kilian, and Wigderson [BGKW-88], and was shown equivalent to the model of transparent proofs [FRS-88]. <p> The following lemma follows from Lemma 4.1 in Aiello-H-astad [AH-87], which in turn is based on ideas of Sipser [Si-83] and Babai <ref> [Bab-85] </ref>. Lemma 2.6 Let b; k be positive integers, ffi &gt; 0 and S f0; 1g k . Let l = 16 lg (2ffi 1 ).
Reference: [BFL-90] <author> L. Babai, L. Fortnow, and C. Lund, </author> <title> "Non-Deterministic Exponential Time Has Two-Prover Interactive Protocols," </title> <booktitle> 31st FOCS, </booktitle> <year> 1990, </year> <pages> pp. 16-25. </pages>
Reference: [BBFG-91] <author> R. Beigel, M. Bellare, J. Feigenbaum and S. Goldwasser. </author> <title> Languages that are Easier than their Proofs. </title> <booktitle> Proceedings of the 32nd Annual IEEE Symposium on the Foundations of Computer Science, IEEE (1991). </booktitle> <pages> 73 </pages>
Reference: [B-92] <author> M. Bellare. </author> <title> Interactive Proofs and Approximations. </title> <type> Research Report 17969 (#78973), </type> <institution> IBM research Division, T.J. Watson Research Center, </institution> <address> Yorktown Heights, NY 10598. </address> <year> 1992. </year>
Reference: [BFK-95] <author> M. Bellare, U. Feige, J. Kilian. </author> " <title> On the Role of Shared Randomness in Two Proof Systems", </title> <booktitle> In Proceedings of the Third Israel Symposium on the Theory of Computing and Systems, </booktitle> <pages> pp. 199-208, </pages> <year> 1995. </year>
Reference-contexts: We believe that this generator is useful also in other settings, and 22 in fact, it has already been used in papers that followed this work (see <ref> [BFK-95, ABV-95] </ref>). In this section, we show an efficient implementation of the universal almost uniform generator. 2.2.1 Definition and history The generator samples "almost uniformly" from a given set S 2 NP.
Reference: [BGLR-93] <author> M. Bellare, S. Goldwasser, C. Lund, and K. Russel. </author> <title> "Efficient Probabilistically Checkable Proofs: Applications to Approximation", </title> <booktitle> Proceedings of the 25rd Annual ACM Symposium on the Theory of Computing, ACM (1993). </booktitle>
Reference-contexts: Recently, the second result was improved by Bellare, Goldwasser, Lund, and Russel <ref> [BGLR-93] </ref> by reducing the assumption to NP6DTIME [n loglog n ]. In this work, we relate the study of approximation algorithms to a new parameter called the gap location. Let us begin by presenting a partition of the class of optimization problems into two categories.
Reference: [BMO-90] <author> M. Bellare, S. Micali and R. Ostrovsky. </author> <title> The (True) Complexity of Statistical Zero-Knowledge. </title> <booktitle> Proceedings of the 22nd Annual ACM Symposium on the Theory of Computing, ACM (1990). </booktitle>
Reference-contexts: However, the paper of Aiello and Hastad provides all the necessary machinery for proving Fortnow's result as well [AH-87, H-94]. Needless to say that the basic approach presented by Fortnow (i.e., looking at the "simulator-based prover") is valid and has inspired all subsequent works (e.g., <ref> [AH-87, BMO-90, Ost-91, BP-92a, OW-93] </ref>) as well as the current one. 1.2 The Hardness of Approximations The importance of approximation algorithms became evident in the early 70's, when it was discovered that unless P=NP (which is very unlikely) many important optimization problems cannot be solved precisely in polynomial time [Coo-71, Kar-72]. <p> We use the almost uniform generator to implement it efficiently. The simulation based prover was first used by Fortnow [F-89], and it was used in many works since <ref> [AH-87, BMO-90, Os-91] </ref>. Definition 2.11 Let S be a simulator of a g rounds interactive proof with message length l. <p> Yet, the result SZK co-AM does hold, since the work of Aiello and Hastad contains the necessary refinements which enable to present a modified AM-protocol for L (see [AH-87, H-94]). Furthermore, Fortnow's basic approach is valid, and indeed it was used in subsequent works (e.g., <ref> [AH-87, BMO-90, Ost-91, BP-92a, OW-93] </ref>). Fortnow's basic approach starts with the observation that the simulator M must behave differently on x 2 L and x 62 L. Clearly, the difference cannot be recognized in polynomial-time, unless L 2 BPP.
Reference: [BP-92a] <author> M. Bellare and E. Petrank. </author> <title> Making Zero-Knowledge Provers Efficient. </title> <booktitle> Proceedings of the 24rd Annual ACM Symposium on the Theory of Computing, ACM (1992). </booktitle>
Reference-contexts: However, the paper of Aiello and Hastad provides all the necessary machinery for proving Fortnow's result as well [AH-87, H-94]. Needless to say that the basic approach presented by Fortnow (i.e., looking at the "simulator-based prover") is valid and has inspired all subsequent works (e.g., <ref> [AH-87, BMO-90, Ost-91, BP-92a, OW-93] </ref>) as well as the current one. 1.2 The Hardness of Approximations The importance of approximation algorithms became evident in the early 70's, when it was discovered that unless P=NP (which is very unlikely) many important optimization problems cannot be solved precisely in polynomial time [Coo-71, Kar-72]. <p> case this means that for every c Prob (M (x; !) = c j ! 2 S x ) = Prob ((P; V )(x) = c) where M (x; !) denotes the output of the simulator M on input x and coin tosses sequence !. 2 The analysis of the <ref> [BP-92a] </ref> procedure is easier when using the fraction version, whereas the transfor mation from statistical to perfect is easier when using the oracle version. 21 As mentioned above, these two measures are almost equal. Theorem [GP-91]: The fraction measure and the oracle measure are equal up to an additive constant. <p> Yet, the result SZK co-AM does hold, since the work of Aiello and Hastad contains the necessary refinements which enable to present a modified AM-protocol for L (see [AH-87, H-94]). Furthermore, Fortnow's basic approach is valid, and indeed it was used in subsequent works (e.g., <ref> [AH-87, BMO-90, Ost-91, BP-92a, OW-93] </ref>). Fortnow's basic approach starts with the observation that the simulator M must behave differently on x 2 L and x 62 L. Clearly, the difference cannot be recognized in polynomial-time, unless L 2 BPP.
Reference: [BP-92b] <author> M. Bellare and E. Petrank. </author> <title> Quadratic Equations Over the Rationals. </title> <type> private communication, </type> <year> 1992. </year>
Reference-contexts: We include a simple proof of this fact which is due to Bellare & Petrank <ref> [BP-92b] </ref>, Theorem 5.7. The same problem when the field is GF (p) (p a prime) was considered by H-astad, Phillips, and Safra [HPS-93]; they showed that if P 6= NP, then max-qe (p) cannot be approximated to within a factor of 1 p (1=poly) . 16 k-coloring.
Reference: [B+-88] <author> M. Ben-Or, S. Goldwasser, O. Goldreich, J. H -astad, J. Kilian, S. Micali and P. Rogaway. </author> <title> Everything Provable is Provable in Zero-Knowledge. </title> <booktitle> Advances in Cryptology | Proceedings of CRYPTO 88, Lecture Notes in Computer Science 403, </booktitle> <publisher> Springer-Verlag (1989). </publisher> <editor> S. Goldwasser, </editor> <publisher> ed. </publisher>
Reference-contexts: Actually, there are three hierarchies extending the three standard definitions of zero-knowledge; namely perfect, statistical and computational. Let us denote the corresponding hierarchies by PKC (), SKC (), and CKC (). Assuming the existence of one-way functions, the third hierarchy collapses, namely CKC (0) = IP = CKC (poly) <ref> [GMW-86, IY-87, B+-88] </ref>. Put differently, the zero level of computational knowledge-complexity extends to the maximum possible. Anyhow, in the rest of this work we will be only interested in the other two hierarchies. Previous works have provided information only concerning the zero level of these hierarchies.
Reference: [BR-92] <author> M. Bellare and P. Rogaway. </author> <title> The Complexity of Approximating a Nonlinear Program. </title> <institution> Research Report 17831 (#78493) IBM Research Division, T.J. Watson Research Center, </institution> <address> Yorktown Heights, NY 10598. </address> <year> 1992. </year>
Reference: [BGKW-88] <author> M. Ben-Or, S. Goldwasser, J. Kilian and A. Wigderson. </author> <title> Multi-prover interactive proofs: How to remove intractability. </title> <booktitle> In Proc. 20th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 113-131, </pages> <year> 1988. </year>
Reference-contexts: Meanwhile, with no apparent connection, the research in the area of interactive proofs was making a rapid progress. The research was initiated by Goldwasser Micali and Rackoff [GMR-89] and Babai [Bab-85]. The extended model of multi-provers interactive proofs was suggested by Ben-Or, Goldwasser, Kilian, and Wigderson <ref> [BGKW-88] </ref>, and was shown equivalent to the model of transparent proofs [FRS-88]. It was then discovered that the languages, for which interactive proofs exist, are exactly the languages in PSPACE [LFKN-90, Sha-90] and that languages, for which multi-provers interactive proofs exist, are exactly the languages in NEXP-TIME.
Reference: [Ber-73] <author> C. Berge. </author> <title> Graphs and Hypergraphs. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1973. </year>
Reference-contexts: In this case, it is not hard to approximate the size of the smallest solution since there is a polynomial time algorithm that colors the edges of a graph of degree k with k + 1 colors (Vizing's Theorem, see <ref> [Ber-73] </ref>). Again, we treat the version that seeks the quality of the best solution (i.e., a best k edge-coloring of a k-degree graph). * set splitting [Lov-73].
Reference: [BMT-78] <author> E.R. Berlekamp, R.J. McEliece, and H.C.A. van Tilborg. </author> <title> On the Inherent Intractability of Certain Coding Problems. </title> <journal> IEEE Trans. Information Theory, </journal> <year> 1978. </year>
Reference: [BP-89] <author> M. Bern and P. Plassmann. </author> <title> The Steiner problem with edge lengths 1 and 2. </title> <journal> Information Processing Letters, </journal> <volume> vol. 32, </volume> <pages> pages 171-176, </pages> <year> 1989. </year>
Reference-contexts: That is, if a MAX-SNP-Hard problem has a polynomial time approximation scheme then all problems in MAX-SNP have polynomial time approximation schemes. The class MAX-SNP-Hard contains problems as MAX-3SAT-B, INDEPENDENT-SET-B, VERTEX-COVER-B, MAX-CUT, MAX-k-COLORABILITY [PY-91], metric TRAVELLING SALESMAN [PY-92], STEINER TREE <ref> [BP-89] </ref> SHORTEST SUPERSTRING [BJLTY-90], MUL 9 TIWAY CUTS [DJPSY-92] and bounded 3-DIMENSIONAL MATCHING [Kan-91]. Meanwhile, with no apparent connection, the research in the area of interactive proofs was making a rapid progress. The research was initiated by Goldwasser Micali and Rackoff [GMR-89] and Babai [Bab-85].
Reference: [BJLTY-90] <author> A. Blum, T. Jiang, M. Li, J. Tromp, and M. Yannakakis. </author> <title> Linear Approximation of Shortest Superstrings. </title> <booktitle> Proc. 31st Symp. on Foundations of Comp. Sc., </booktitle> <pages> pages 554-562, </pages> <year> 1990. </year>
Reference-contexts: That is, if a MAX-SNP-Hard problem has a polynomial time approximation scheme then all problems in MAX-SNP have polynomial time approximation schemes. The class MAX-SNP-Hard contains problems as MAX-3SAT-B, INDEPENDENT-SET-B, VERTEX-COVER-B, MAX-CUT, MAX-k-COLORABILITY [PY-91], metric TRAVELLING SALESMAN [PY-92], STEINER TREE [BP-89] SHORTEST SUPERSTRING <ref> [BJLTY-90] </ref>, MUL 9 TIWAY CUTS [DJPSY-92] and bounded 3-DIMENSIONAL MATCHING [Kan-91]. Meanwhile, with no apparent connection, the research in the area of interactive proofs was making a rapid progress. The research was initiated by Goldwasser Micali and Rackoff [GMR-89] and Babai [Bab-85].
Reference: [BK-89] <author> M. Blum and S. Kannan. </author> <title> Designing Programs that Check their Work. </title> <booktitle> Proceedings of the 21st Annual ACM Symposium on the Theory of Computing, ACM (1989). </booktitle>
Reference: [BHZ-87] <author> R. Boppana, J. H -astad and S. Zachos. </author> <title> Does coN P Have Short Interactive Proofs". </title> <journal> Information Processing Letters, </journal> <volume> Vol 25 (1987), No. 2, </volume> <pages> pp 127-132. </pages>
Reference-contexts: A possible avenue for proving this conjecture is to show that languages having logarithmic knowledge complexity are in co-AM, rather than in BPP N P (recall that NP is unlikely to be in co-AM see also <ref> [BHZ-87] </ref>). The second suggestion is to try to provide indications that there are languages in PSPACE which do not have interactive proofs of linear (rather than logarithmic) knowledge complexity. The reader can easily envision more moderate and more ambitious challenges in this direction.
Reference: [CW-79] <author> L. Carter and M. Wegman. </author> <title> Universal Classes of Hash Functions. </title> <journal> J. Computer and System Sciences 18, </journal> <month> 143-154 </month> <year> (1979). </year>
Reference-contexts: This result is established by combining techniques from Jerrum, Valiant and Vazirani [JVV-86] and Stockmeyer [St-83] with Carter-Wegman universal hash function <ref> [CW-79] </ref> based techniques for estimating set sizes (Sipser [Si-83]). The details are in Section 2.2.1. 7 1.1.3 Motivation for studying KC In addition to the self-evident fundamental appeal of knowledge complexity, we wish to point out some practical motivation for considering knowledge-complexity greater than zero. <p> The reason that we do not achieve exactly the uniform distribution is that the approximate counter fails with some (very small, but greater than 0) probability. The details follow. 2.2.3 The construction We use universal hash functions <ref> [CW-79] </ref>.
Reference: [Coo-71] <author> S. A. Cook. </author> <title> The complexity of theorem-proving procedures. </title> <booktitle> In Proc. 3rd ACM Symp. on Theory of Computing, </booktitle> <pages> pages 151-158, </pages> <year> 1971. </year>
Reference-contexts: (e.g., [AH-87, BMO-90, Ost-91, BP-92a, OW-93]) as well as the current one. 1.2 The Hardness of Approximations The importance of approximation algorithms became evident in the early 70's, when it was discovered that unless P=NP (which is very unlikely) many important optimization problems cannot be solved precisely in polynomial time <ref> [Coo-71, Kar-72] </ref>. The practical need to solve these problems led researchers to relax the precision requirement and try to find approximation algorithms to these problems. Let be a maximization (resp. minimization) problem, and let OP T (I) be the precise solution of an instance I.
Reference: [DJPSY-92] <author> E. Dahlhaus, D. S. Johnson, C. H. Papaditriou, P. D. Seymour and M. Yan-nakakis. </author> <title> The complexity of multiway cuts. </title> <booktitle> In Proc. 24th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 241-251, </pages> <year> 1992. </year>
Reference-contexts: That is, if a MAX-SNP-Hard problem has a polynomial time approximation scheme then all problems in MAX-SNP have polynomial time approximation schemes. The class MAX-SNP-Hard contains problems as MAX-3SAT-B, INDEPENDENT-SET-B, VERTEX-COVER-B, MAX-CUT, MAX-k-COLORABILITY [PY-91], metric TRAVELLING SALESMAN [PY-92], STEINER TREE [BP-89] SHORTEST SUPERSTRING [BJLTY-90], MUL 9 TIWAY CUTS <ref> [DJPSY-92] </ref> and bounded 3-DIMENSIONAL MATCHING [Kan-91]. Meanwhile, with no apparent connection, the research in the area of interactive proofs was making a rapid progress. The research was initiated by Goldwasser Micali and Rackoff [GMR-89] and Babai [Bab-85].
Reference: [DL-81] <author> W. Fernandez de la Vega and G.S. Lueker. </author> <title> Bin Packing can be solved within 1 + * in Linear Time. </title> <journal> Combinatorica, </journal> <volume> vol. 1, </volume> <pages> pages 349-355, </pages> <year> 1981. </year>
Reference: [Fe-87] <author> U. Feige. </author> <title> Interactive Proofs. </title> <type> M.Sc Thesis, </type> <institution> Weizmann Institute of Science. </institution> <month> August </month> <year> 1987. </year>
Reference: [FGLSS-91] <author> U. Feige, S. Goldwasser, L. Lovasz, S. Safra, and M. Szegedy. </author> <title> Approximating clique is almost NP-complete. </title> <booktitle> In Proc. 32nd IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 2-12, </pages> <year> 1991. </year>
Reference-contexts: It was then discovered that the languages, for which interactive proofs exist, are exactly the languages in PSPACE [LFKN-90, Sha-90] and that languages, for which multi-provers interactive proofs exist, are exactly the languages in NEXP-TIME. Feige, Goldwasser, Lovasz, Safra, and Szegedi <ref> [FGLSS-91] </ref> were the first to observe the connection between transparent proofs and the hardness of approximations. <p> Approximation problems can be partitioned in the same manner and so can results concerning the difficulty of approximations. The first category contains problems such as approximating the size of the biggest clique in the input graph (the hardness of this problem was shown by <ref> [FGLSS-91, AS-92, ALMSS-92] </ref>), or the minimum number of colors needed to properly color the input graph (see [LY-92]).
Reference: [F-89] <author> L. Fortnow. </author> <title> The Complexity of Perfect Zero-Knowledge. Advances in Computing Research (ed. </title> <editor> S. </editor> <volume> Micali) Vol. </volume> <month> 18 </month> <year> (1989). </year>
Reference-contexts: Anyhow, in the rest of this work we will be only interested in the other two hierarchies. Previous works have provided information only concerning the zero level of these hierarchies. Fortnow has pioneered the attempts to investigate the computational complexity of (perfect/statistical) zero-knowledge <ref> [F-89] </ref>, and was followed by Aiello and Hastad [AH-87]. Their results can be summarized by the following theorem that bounds the computational complexity of languages having zero-knowledge proofs. Theorem [F-89, AH-87]: SKC (0) AM co-AM Hence, languages having statistical zero-knowledge must lie in the second level of the polynomial-time hierarchy. <p> Fortnow has pioneered the attempts to investigate the computational complexity of (perfect/statistical) zero-knowledge [F-89], and was followed by Aiello and Hastad [AH-87]. Their results can be summarized by the following theorem that bounds the computational complexity of languages having zero-knowledge proofs. Theorem <ref> [F-89, AH-87] </ref>: SKC (0) AM co-AM Hence, languages having statistical zero-knowledge must lie in the second level of the polynomial-time hierarchy. Needless to say that PKC (k ()) SKC (k ()), for any function k and in particular for k 0. <p> Furthermore, by an interactive proof we mean one in which the error probability is negligible (i.e., smaller than any polynomial fraction). A few words of justification appear in Section 2.1.1. A remark concerning Fortnow's paper <ref> [F-89] </ref>. In course of this research, we found out that the proof that SKC (0) co-AM as it appears in [F-89] is not correct. In particular, there is a flaw in the AM-protocol presented in [F-89] for the complement language (see Section 2.6). <p> A few words of justification appear in Section 2.1.1. A remark concerning Fortnow's paper <ref> [F-89] </ref>. In course of this research, we found out that the proof that SKC (0) co-AM as it appears in [F-89] is not correct. In particular, there is a flaw in the AM-protocol presented in [F-89] for the complement language (see Section 2.6). However, the paper of Aiello and Hastad provides all the necessary machinery for proving Fortnow's result as well [AH-87, H-94]. <p> A few words of justification appear in Section 2.1.1. A remark concerning Fortnow's paper <ref> [F-89] </ref>. In course of this research, we found out that the proof that SKC (0) co-AM as it appears in [F-89] is not correct. In particular, there is a flaw in the AM-protocol presented in [F-89] for the complement language (see Section 2.6). However, the paper of Aiello and Hastad provides all the necessary machinery for proving Fortnow's result as well [AH-87, H-94]. <p> In Section 2.5 we consider interactive proofs with error probability which is not negligible. We show how our techniques yield non-trivial results also with respect to such error probabilities. In the next section (Section 2.6) we explain why the protocol given in <ref> [F-89] </ref> is not valid, and we explicitly give a counter example on which the protocol fails. In the last section of the chapter on knowledge complexity, (Section 2.7) we make some concluding remarks on the relation of knowledge compelxity to computational complexity and present a few interesting open problems. <p> (k ()) = languages having interactive proofs of perfect knowledge complexity k (). * SKC (k ()) = languages having interactive proofs of statistical knowledge complexity k (). 2.1.3 The simulation based prover An important ingredient in our proof is the notion of a simulation based prover, introduced by Fortnow <ref> [F-89] </ref>. Consider a simulator M that outputs conversations of an interaction between a prover P and a verifier V . We define a new prover P fl , called the simulation based prover, which selects its messages according to the conditional probabilities induced by the simulation. <p> We use the almost uniform generator to implement it efficiently. The simulation based prover was first used by Fortnow <ref> [F-89] </ref>, and it was used in many works since [AH-87, BMO-90, Os-91]. Definition 2.11 Let S be a simulator of a g rounds interactive proof with message length l. <p> an interactive proof of statistical knowledge complexity k (n), one-sided error probability * s (n), and with length l (n) so that there exists a polynomial p (n) for which the following inequality holds 1 l k (n) 1 Then L 2 BPP N P . 2.6 A Flaw in <ref> [F-89] </ref> As remarked in the introduction, In course of this research, we found out that the proof that SKC (0) co-AM as it appears in [F-89] is not correct. In particular, there is a flaw in the AM-protocol presented in [F-89] for the complement language. <p> polynomial p (n) for which the following inequality holds 1 l k (n) 1 Then L 2 BPP N P . 2.6 A Flaw in <ref> [F-89] </ref> As remarked in the introduction, In course of this research, we found out that the proof that SKC (0) co-AM as it appears in [F-89] is not correct. In particular, there is a flaw in the AM-protocol presented in [F-89] for the complement language. In this section, we explain the problem in the proof there and present a counter-example. In [F-89], Fortnow presents a constructive method for proving that SZK def contained in co-AM. <p> L 2 BPP N P . 2.6 A Flaw in <ref> [F-89] </ref> As remarked in the introduction, In course of this research, we found out that the proof that SKC (0) co-AM as it appears in [F-89] is not correct. In particular, there is a flaw in the AM-protocol presented in [F-89] for the complement language. In this section, we explain the problem in the proof there and present a counter-example. In [F-89], Fortnow presents a constructive method for proving that SZK def contained in co-AM. <p> we found out that the proof that SKC (0) co-AM as it appears in <ref> [F-89] </ref> is not correct. In particular, there is a flaw in the AM-protocol presented in [F-89] for the complement language. In this section, we explain the problem in the proof there and present a counter-example. In [F-89], Fortnow presents a constructive method for proving that SZK def contained in co-AM. Given an interactive proof (P; V ) for a languages L and a (statistical) zero-knowledge simulator M (for the honest verifier V ), he constructs a two-round protocol (P 0 ; V 0 ). <p> One may substitute ff 1 fi by ff 1 2 fi, and ff 2 fi by ff 1 The gap between the two is needed for the approximate lower/upper bound protocols. 52 A Counterexample The mistake is in the second item of the characterization. The false argument given in <ref> [F-89] </ref> confuses between the probability distribution of conversations output by the simulator and the probability distribution of the conversations between a simulator-based prover (denote P fl ) and the verifier. These distributions are not necessarily the same (note that we are in case x 62 L). <p> Consequently, the probability that "good" conversations (i.e., conversations for which jR 2 j jR 1 j for all prefixes) occur in the (P fl ; V ) interaction is not the same as the probability that the simulator outputs "good" conversations. This point is ignored in <ref> [F-89] </ref> and leads there to the false conclusion that the characterization holds. Bellow, we present an interactive proof (P; V ) and a (perfect) zero-knowledge simulator for which the characterization fails. The interactive proof that we present is for the empty language .
Reference: [FRS-88] <author> L. Fortnow, J. Rompel and M. Sipser. </author> <title> On the power of multi-prover interactive protocols. </title> <booktitle> In Proc. 3rd IEEE Symp. on Structure in Complexity Theory, </booktitle> <pages> pages 156-161, </pages> <year> 1988. </year>
Reference-contexts: The research was initiated by Goldwasser Micali and Rackoff [GMR-89] and Babai [Bab-85]. The extended model of multi-provers interactive proofs was suggested by Ben-Or, Goldwasser, Kilian, and Wigderson [BGKW-88], and was shown equivalent to the model of transparent proofs <ref> [FRS-88] </ref>. It was then discovered that the languages, for which interactive proofs exist, are exactly the languages in PSPACE [LFKN-90, Sha-90] and that languages, for which multi-provers interactive proofs exist, are exactly the languages in NEXP-TIME.
Reference: [GG-81] <author> O. Gabber and Z. Galil. </author> <title> Explicit Construction of linear sized superconcentrators. </title> <journal> J. of Comp. and Sci., </journal> <volume> vol 22, </volume> <pages> pages 407-420, </pages> <year> 1981. </year>
Reference-contexts: Bipartite expanders on 2 fi n nodes can be efficiently constructed for any n 2 IN <ref> [Mar-73, GG-81, AJ-87] </ref>.
Reference: [GJ-76] <author> M.R. Garey and D.S. Johnson. </author> <title> The complexity of near-optimal graph coloring. </title> <journal> J. of the ACM, </journal> <volume> vol 23, </volume> <pages> pages 43-49, </pages> <year> 1976. </year>
Reference: [GJ-79] <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <year> 1979. </year>
Reference-contexts: Lower bounds on the possibility of constructing polynomial time algorithms (even assuming P6=NP) were hardly known. Interesting such results concerning GRAPH COLORING, TRAVELLING SALESMAN (without the triangle inequality) and MAXIMUM CLIQUE can be found in <ref> [GJ-79] </ref> and [SG-76]. In a paper, that turned out to be somewhat prophetic, Papadimitriou and Yannakakis [PY-91] defined a class of optimization problems called MAX-SNP. They showed that all the problems in this class can be approximated to within some constant ratio. <p> Proof: A slight modification of the original reduction from sat to 3-dimensional matching [Kar-72] works as a gap preserving reduction from max-sat-B to max 3-dimensional 67 matching-3. We shortly describe the reduction, following the presentation of Garey & Johnson (1979). <ref> [GJ-79] </ref>. Given a formula ' with n variables and m clauses in which each variable appears at most B times, we construct three disjoint sets W ' ; Y ' ; Z ' and a set of triplets M ' W ' fi Y ' fi Z ' .
Reference: [GJS-76] <author> M.R. Garey, D.S. Johnson and L.J. </author> <title> Stockmeyer Some Simplified NP-Complete Graph Problems. </title> <journal> Theor. Comput. Sci., </journal> <volume> Vol 1, </volume> <pages> pages 237-267, </pages> <year> 1976. </year>
Reference-contexts: The reduction. We are given an instance of max 3sat-B, i.e., a 3-cnf formula ' with n variables and m clauses, such that each variable appears at most B times in the formula '. We use an extension of the standard reduction from 3sat to 3-colorability <ref> [St-73, GJS-76] </ref>. Let us shortly describe the original reduction, which uses a gadget with nine vertices and 10 edges (Figure 3.2). We call the top vertex g 4 the gadget head, and the three bottom vertices g 1 ; g 2 ; g 3 the gadget legs.
Reference: [GK-90] <author> O. Goldreich and H. Krawczyk. </author> <title> On the Composition of Zero-Knowledge Proof Systems. </title> <booktitle> Proceedings of ICALP 90 </booktitle> . 
Reference: [GMS-87] <author> O. Goldreich, Y. Mansour and M. Sipser. </author> <title> Interactive Proof Systems: Provers that never Fail and Random Selection. </title> <booktitle> Proceedings of the 28th Annual IEEE Symposium on the Foundations of Computer Science, IEEE (1987). </booktitle>
Reference-contexts: Then, given a two-sided interactive proof of some statistical knowledge complexity you could have transformed it to a one-sided error proof of the same knowledge complexity (cf., <ref> [GMS-87] </ref>). Applying the transformation for the one-sided case would have yielded an even better result. 20 additive constant otherwise [GP-91]. For further intuition and motivation see [GP-91]. It will be convenient to use both definitions in this paper 2 .
Reference: [GMW-86] <author> O. Goldreich, S. Micali, and A. Wigderson, </author> <title> "Proofs that Yield Nothing But their Validity and a Methodology of Cryptographic Protocol Design", </title> <booktitle> Proc. 27th FOCS 86, See also Jour. of ACM. </booktitle> <volume> Vol 38, No 1, </volume> <month> July </month> <year> 1991, </year> <pages> pp. 691-729. </pages>
Reference-contexts: Actually, there are three hierarchies extending the three standard definitions of zero-knowledge; namely perfect, statistical and computational. Let us denote the corresponding hierarchies by PKC (), SKC (), and CKC (). Assuming the existence of one-way functions, the third hierarchy collapses, namely CKC (0) = IP = CKC (poly) <ref> [GMW-86, IY-87, B+-88] </ref>. Put differently, the zero level of computational knowledge-complexity extends to the maximum possible. Anyhow, in the rest of this work we will be only interested in the other two hierarchies. Previous works have provided information only concerning the zero level of these hierarchies. <p> The reason being that these (logarithmically many) bits can be guessed with non-negligible probability, which in turn means that any attack due to the "leaked bits" can be simulated with non-negligible probability without them. But why use low knowledge-complexity protocols when one can use zero-knowledge ones (see, <ref> [GMW-86, GMW-87] </ref>)? The reason is that the non-zero-knowledge protocols may be more efficient and/or may require weaker computational assumptions (see, for example, [OVY-90]). 1.1.4 Remarks A remark concerning two definitions.
Reference: [GMW-87] <author> O. Goldreich, S. Micali, and A. Wigderson, </author> <title> "How to Play any Mental Game or a Completeness Theorems for Protocols of Honest Majority", </title> <type> STOC87. </type>
Reference-contexts: The reason being that these (logarithmically many) bits can be guessed with non-negligible probability, which in turn means that any attack due to the "leaked bits" can be simulated with non-negligible probability without them. But why use low knowledge-complexity protocols when one can use zero-knowledge ones (see, <ref> [GMW-86, GMW-87] </ref>)? The reason is that the non-zero-knowledge protocols may be more efficient and/or may require weaker computational assumptions (see, for example, [OVY-90]). 1.1.4 Remarks A remark concerning two definitions.
Reference: [GO-89] <author> O. Goldreich and Y. Oren. </author> <title> Definitions and Properties of Zero-Knowledge Proof Systems. </title> <type> Technical Report #570, </type> <institution> Technion (1989). </institution>
Reference: [GOP-94] <author> O. Goldreich, R. Ostrovsky, and E. Petrank. </author> <title> Computational Complexity and Knowledge Complexity. </title> <booktitle> Proceedings of the 26rd Annual ACM Symposium on the Theory of Computing, ACM (1994). </booktitle>
Reference: [GP-91] <author> O. Goldreich and E. Petrank. </author> <title> Quantifying Knowledge Complexity. </title> <booktitle> Proceedings of the 32nd Annual IEEE Symposium on the Foundations of Computer Science, </booktitle> <institution> IEEE (1991). </institution> <type> Technical Report 683, </type> <institution> Computer Science Dept., Technion - Israel Institue of Technology. </institution>
Reference-contexts: Knowledge-complexity (KC) is intended to measure the computational advantage gained by interaction. Satisfactory formulations of knowledge-complexity, for the case that it is not zero, have recently appeared in <ref> [GP-91] </ref>. A natural 4 suggestion, made by Goldwasser, Micali and Rackoff, is to classify languages according to the knowledge-complexity of their interactive-proofs [GMR-89]. We feel that it is worthwhile to give this suggestion a fair try. <p> On the other hand, if we allow polynomial amount of knowledge to be revealed, then every language in IP can be proven. Theorem [LFKN-90, Sha-90]: PKC (poly ()) = IP = PSPACE As indicated in <ref> [GP-91] </ref>, the first equality is a property of an adequate definition (of knowl edge complexity) rather than a result. In this work we study the class of languages that have interactive-proofs with logarith mic knowledge-complexity. <p> Then, given a two-sided interactive proof of some statistical knowledge complexity you could have transformed it to a one-sided error proof of the same knowledge complexity (cf., [GMS-87]). Applying the transformation for the one-sided case would have yielded an even better result. 20 additive constant otherwise <ref> [GP-91] </ref>. For further intuition and motivation see [GP-91]. It will be convenient to use both definitions in this paper 2 . By the oracle formulation, the knowledge-complexity of a protocol (P; V ) is the number of oracle (bit) queries that are needed to simulate the protocol efficiently. <p> Applying the transformation for the one-sided case would have yielded an even better result. 20 additive constant otherwise <ref> [GP-91] </ref>. For further intuition and motivation see [GP-91]. It will be convenient to use both definitions in this paper 2 . By the oracle formulation, the knowledge-complexity of a protocol (P; V ) is the number of oracle (bit) queries that are needed to simulate the protocol efficiently. <p> Theorem <ref> [GP-91] </ref>: The fraction measure and the oracle measure are equal up to an additive constant. Since none of our results is sensitive to a difference of an additive constant in the measure, we ignore this difference in the subsequent definition as well as in the statement of our results. <p> Without loss of generality, we may assume that all messages are of length 1. This message-length convention is merely a matter of encoding. Recall that Definition 2.1 only guarantees that the simulator produces output with probability 1 2 . Yet, employing Proposition 3.8 in <ref> [GP-91] </ref>, we get that there exists an oracle machine M , that after asking k (n) + 2 log log n queries, always produces an output so that the output is statistically close to the interaction of (P; V ).
Reference: [GMR-85] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The Knowledge Complexity of Interactive Proofs. </title> <booktitle> Proceedings of the 17th Annual ACM Symposium on the Theory of Computing, ACM (1985). </booktitle> <pages> 76 </pages>
Reference-contexts: In what follows we introduce each of the areas. The connection between the two areas is described while introducing the hardness of approximations (see Section 1.2). 1.1 Knowledge Complexity The notion of knowledge-complexity was introduced in the seminal paper of Goldwasser Micali and Rackoff <ref> [GMR-85, GMR-89] </ref>. Knowledge-complexity (KC) is intended to measure the computational advantage gained by interaction. Satisfactory formulations of knowledge-complexity, for the case that it is not zero, have recently appeared in [GP-91].
Reference: [GMR-89] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The Knowledge Complexity of Interactive Proofs. </title> <journal> SIAM J. Comput. </journal> <volume> 18 (1), </volume> <month> 186-208 (February </month> <year> 1989). </year>
Reference-contexts: In what follows we introduce each of the areas. The connection between the two areas is described while introducing the hardness of approximations (see Section 1.2). 1.1 Knowledge Complexity The notion of knowledge-complexity was introduced in the seminal paper of Goldwasser Micali and Rackoff <ref> [GMR-85, GMR-89] </ref>. Knowledge-complexity (KC) is intended to measure the computational advantage gained by interaction. Satisfactory formulations of knowledge-complexity, for the case that it is not zero, have recently appeared in [GP-91]. <p> Satisfactory formulations of knowledge-complexity, for the case that it is not zero, have recently appeared in [GP-91]. A natural 4 suggestion, made by Goldwasser, Micali and Rackoff, is to classify languages according to the knowledge-complexity of their interactive-proofs <ref> [GMR-89] </ref>. We feel that it is worthwhile to give this suggestion a fair try. The lowest level of the knowledge-complexity hierarchy is the class of languages having interactive proofs of knowledge-complexity zero, better known as zero-knowledge. <p> Meanwhile, with no apparent connection, the research in the area of interactive proofs was making a rapid progress. The research was initiated by Goldwasser Micali and Rackoff <ref> [GMR-89] </ref> and Babai [Bab-85]. The extended model of multi-provers interactive proofs was suggested by Ben-Or, Goldwasser, Kilian, and Wigderson [BGKW-88], and was shown equivalent to the model of transparent proofs [FRS-88]. <p> A function f : N ! [0; 1] is called negligible if for every polynomial p and all sufficiently large n's f (n) &lt; 1 p (n) . 2.1.1 Interactive proofs Let us recall the concept of interactive proofs, presented by <ref> [GMR-89] </ref>. For formal definitions and motivating discussions the reader is referred to [GMR-89]. A protocol between a (computationally unbounded) prover P and a (probabilistic polynomial-time) verifier V constitutes an interactive proof for a language L if there exists a negligible function * : N ! [0; 1] such that 1. <p> : N ! [0; 1] is called negligible if for every polynomial p and all sufficiently large n's f (n) &lt; 1 p (n) . 2.1.1 Interactive proofs Let us recall the concept of interactive proofs, presented by <ref> [GMR-89] </ref>. For formal definitions and motivating discussions the reader is referred to [GMR-89]. A protocol between a (computationally unbounded) prover P and a (probabilistic polynomial-time) verifier V constitutes an interactive proof for a language L if there exists a negligible function * : N ! [0; 1] such that 1.
Reference: [GS-89] <author> S. Goldwasser, and M. Sipser, </author> <title> Private Coins vs. Public Coins in Interactive Proof Systems, Advances in Computing Research (ed. </title> <editor> S. Micali), </editor> <booktitle> 1989, </booktitle> <volume> Vol. 5, </volume> <pages> pp. 73-90. </pages>
Reference: [H-94] <author> J. H -astad. </author> <title> Perfect Zero-Knowledge in AM " co-AM. Unpublished 2-page manuscript explaining the underlying ideas behind [AH-87]. </title> <year> 1994. </year>
Reference-contexts: In particular, there is a flaw in the AM-protocol presented in [F-89] for the complement language (see Section 2.6). However, the paper of Aiello and Hastad provides all the necessary machinery for proving Fortnow's result as well <ref> [AH-87, H-94] </ref>. <p> This claim, as we are going to show, is wrong. Yet, the result SZK co-AM does hold, since the work of Aiello and Hastad contains the necessary refinements which enable to present a modified AM-protocol for L (see <ref> [AH-87, H-94] </ref>). Furthermore, Fortnow's basic approach is valid, and indeed it was used in subsequent works (e.g., [AH-87, BMO-90, Ost-91, BP-92a, OW-93]). Fortnow's basic approach starts with the observation that the simulator M must behave differently on x 2 L and x 62 L.
Reference: [HPS-93] <author> J. Hastad, S. Phillips, and S. Safra, </author> <title> A well Characterized Approximation Problem. </title> <booktitle> In Proceedings of the 2nd Israel Symposium on Theory of Computing and Systems, </booktitle> <year> 1993, </year> <pages> 261-265. </pages>
Reference-contexts: We include a simple proof of this fact which is due to Bellare & Petrank [BP-92b], Theorem 5.7. The same problem when the field is GF (p) (p a prime) was considered by H-astad, Phillips, and Safra <ref> [HPS-93] </ref>; they showed that if P 6= NP, then max-qe (p) cannot be approximated to within a factor of 1 p (1=poly) . 16 k-coloring.
Reference: [Hoy-81] <author> I. Hoyler. </author> <title> The NP-Competeness of Edge Coloring. </title> <journal> SIAM J. of Computation, </journal> <volume> vol. 10, </volume> <pages> pages 718-720, </pages> <year> 1981. </year>
Reference-contexts: In particular, we define approximation versions of: * vertex cover [Kar-72]. Note that the version that was treated by Papadimitriou & 14 Yannakakis [PY-91] is in the spirit of the largest solution. We treat the version that seeks the quality of the best solution. * kedge colorability (chromatic index) <ref> [Hoy-81, LG-83] </ref>. In this case, it is not hard to approximate the size of the smallest solution since there is a polynomial time algorithm that colors the edges of a graph of degree k with k + 1 colors (Vizing's Theorem, see [Ber-73]). <p> Note that jEj jV j B=2, and recall that the hard gap for min vertex cover-B was shown hard for K = fi (jV j). 2. Use the original reduction of max-sat to kedge colorability <ref> [Hoy-81, LG-83] </ref>) only let the domain of the reduction be max 3sat-B (shown hard in [PY-91]). Clearly, if there is a satisfying assignment to the input formula, then there is an edge-coloring of the output graph with k colors such that all the vertices are consistent.
Reference: [ILe-90] <author> R. Impagliazzo and L.A. Levin, </author> <title> No Better Ways to Generate Hard NP Instances than Picking Uniformly at Random, </title> <booktitle> 31st FOCS, </booktitle> <pages> pp. 812-821, </pages> <year> 1990. </year>
Reference: [ILL-89] <author> R. Impagliazzo, L. Levin and M. Luby. </author> <title> Pseudo-Random Generation from One-Way Functions. </title> <booktitle> Proceedings of the 21st Annual ACM Symposium on the Theory of Computing, ACM (1989). </booktitle>
Reference-contexts: If ffi = n c for some fixed constant c then techniques from Impagliazzo, Levin and Luby <ref> [ILL-89] </ref> can be used to do almost uniform generation in probabilistic, polynomial (in n) time with an NP oracle. However (for applications in this work in particular) we would like to be able to achieve values of ffi which are exponentially (in n) small, in the same complexity. <p> Let us now turn to approximations: we will be interested in computing a distribution which is ffi-close to P fl . If ffi = n c for some constant c then, following [Os-91], this can be done in probabilistic polynomial time with an NP oracle by using techniques from <ref> [ILL-89] </ref>. That result will not, however, suffice for the applications in this paper: we need to be able to achieve values of ffi which are exponentially small (in n). The following Theorem says we can do this, still in probabilistic polynomial time with an NP oracle.
Reference: [ILu-90] <author> R. Impagliazzo and M. Luby, </author> <title> One-Way Functions are Essential for Complexity Based Cryptography, </title> <booktitle> 30th FOCS, </booktitle> <pages> pp. 230-235, </pages> <year> 1990. </year>
Reference: [IY-87] <author> R. Impagliazzo and M. Yung. </author> <title> Direct Minimum-Knowledge computations. </title> <booktitle> Advances in Cryptology | Proceedings of CRYPTO 87, Lecture Notes in Computer Science 293, </booktitle> <publisher> Springer-Verlag (1987). </publisher>
Reference-contexts: Actually, there are three hierarchies extending the three standard definitions of zero-knowledge; namely perfect, statistical and computational. Let us denote the corresponding hierarchies by PKC (), SKC (), and CKC (). Assuming the existence of one-way functions, the third hierarchy collapses, namely CKC (0) = IP = CKC (poly) <ref> [GMW-86, IY-87, B+-88] </ref>. Put differently, the zero level of computational knowledge-complexity extends to the maximum possible. Anyhow, in the rest of this work we will be only interested in the other two hierarchies. Previous works have provided information only concerning the zero level of these hierarchies.
Reference: [JVV-86] <author> M. Jerrum, L. Valiant and V. Vazirani. </author> <title> Random Generation of Combinatorial Structures from a Uniform Distribution. </title> <booktitle> Theoretical Computer Science 43, </booktitle> <month> 169-188 </month> <year> (1986). </year>
Reference-contexts: The uniform generation problem is to generate, on input 1 n , an element of S n distributed uniformly at random. Jerrum, Valiant, and Vazirani <ref> [JVV-86] </ref>, using results of Stockmeyer [St-83] on approximate counting, showed that uniform generation can be done in probabilistic, polynomial time with a P 2 oracle. For our applications we would like a lower complexity than PPT with a P 2 oracle. <p> In Theorem 2.5 we actually prove something a little stronger: the almost uniform generation is "universal" (in the sense that A does not depend on S but rather gets a description of S as an input). This result is established by combining techniques from Jerrum, Valiant and Vazirani <ref> [JVV-86] </ref> and Stockmeyer [St-83] with Carter-Wegman universal hash function [CW-79] based techniques for estimating set sizes (Sipser [Si-83]). <p> The proof of Theorem 2.5 is derived by combining techniques from <ref> [JVV-86, St-83, Si-83] </ref>. First, we build an approximate counter. The approximate counter of Stockmeyer [St-83] took polynomial time with a P 2 oracle. We begin by relaxing the requirement on the approximate counter: we allow it to fail in approximating to within the required bounds with some small probability. <p> Our construction uses hashing techniques similar to the ones used by Sipser [Si-83]. Once we have this approximate counter, we use the probabilistic polynomial time reduction of Jerrum, Valiant and Vazirani <ref> [JVV-86] </ref> from uniform generation to approximate counting. The key observation now is the strength of the [JVV-86] reduction: it is capable of sampling distributions within an exponentially small distance from the uniform distribution, when given a primitive for estimating set sizes (namely approximate counting) that is only accurate to within the <p> Our construction uses hashing techniques similar to the ones used by Sipser [Si-83]. Once we have this approximate counter, we use the probabilistic polynomial time reduction of Jerrum, Valiant and Vazirani <ref> [JVV-86] </ref> from uniform generation to approximate counting. The key observation now is the strength of the [JVV-86] reduction: it is capable of sampling distributions within an exponentially small distance from the uniform distribution, when given a primitive for estimating set sizes (namely approximate counting) that is only accurate to within the reciprocal of a polynomial. <p> We now use the reduction of <ref> [JVV-86] </ref> which is strong enough in this sense. Given an approximation to within a factor of 1 + * (for an * which is a reciprocal of a polynomial) it samples a distribution which is very close to the uniform distribution. Specifically, they show the following: Theorem 2.9 [JVV-86]: If there <p> reduction of <ref> [JVV-86] </ref> which is strong enough in this sense. Given an approximation to within a factor of 1 + * (for an * which is a reciprocal of a polynomial) it samples a distribution which is very close to the uniform distribution. Specifically, they show the following: Theorem 2.9 [JVV-86]: If there exists a universal approximate counter to within a factor of (1 + *) for any 0 &lt; * &lt; 1 (that never fails) then there exists a universal (exact) uniform generator which, when given access to the approximate counter as an oracle, runs in polynomial time in n <p> The complexity of computing P fl is the question we address next. 28 Exact computation of P fl is clearly possible in probabilistic polynomial space, and this is easily improved to probabilistic polynomial time with a P 2 oracle by using the results of <ref> [JVV-86] </ref> on uniform generation. Let us now turn to approximations: we will be interested in computing a distribution which is ffi-close to P fl .
Reference: [Kan-91] <author> V. Kann. </author> <title> Maximum bounded 3-dimensional matching is MAX SNP-complete. </title> <journal> Information Processing Letters, </journal> <volume> vol. 37, </volume> <pages> pages 27-35, </pages> <year> 1991. </year>
Reference-contexts: The class MAX-SNP-Hard contains problems as MAX-3SAT-B, INDEPENDENT-SET-B, VERTEX-COVER-B, MAX-CUT, MAX-k-COLORABILITY [PY-91], metric TRAVELLING SALESMAN [PY-92], STEINER TREE [BP-89] SHORTEST SUPERSTRING [BJLTY-90], MUL 9 TIWAY CUTS [DJPSY-92] and bounded 3-DIMENSIONAL MATCHING <ref> [Kan-91] </ref>. Meanwhile, with no apparent connection, the research in the area of interactive proofs was making a rapid progress. The research was initiated by Goldwasser Micali and Rackoff [GMR-89] and Babai [Bab-85]. <p> We thus settle the problem raised in the previous subsection. In our proof, we use a different reduction than the one in [PY-91]). Two other problems that were previously shown hard to approximate using a gap location different from 1 are 3-dimensional matching <ref> [Kan-91] </ref> and not-all-equal-3sat [PY-91]. We strengthen these results by showing that these problems indeed possess a hard gap at location 1. Last, we define new approximation versions of some known NP-complete problems, in the spirit of approximating the quality of the best solution. <p> These are max not-all-equal 3sat [PY-91] and max 3-dimensional matching <ref> [Kan-91] </ref>. In this section, we show that these problems have a hard gap at the gap location 1. Let us begin with defining the problems. Definition 3.11 (The problem max not-all-equal 3sat). Input: A 3-CNF formula '.
Reference: [Kar-72] <author> R.M. Karp. </author> <title> Reducibility among combinatorial problems. </title> <editor> In Raymond E. Miller and James W. Thatcher, editors, </editor> <booktitle> Complexity of Computer Computations, </booktitle> <pages> pages 85-103. </pages> <publisher> Plenum Press, </publisher> <year> 1972. </year> <month> 77 </month>
Reference-contexts: (e.g., [AH-87, BMO-90, Ost-91, BP-92a, OW-93]) as well as the current one. 1.2 The Hardness of Approximations The importance of approximation algorithms became evident in the early 70's, when it was discovered that unless P=NP (which is very unlikely) many important optimization problems cannot be solved precisely in polynomial time <ref> [Coo-71, Kar-72] </ref>. The practical need to solve these problems led researchers to relax the precision requirement and try to find approximation algorithms to these problems. Let be a maximization (resp. minimization) problem, and let OP T (I) be the precise solution of an instance I. <p> We strengthen these results by showing that these problems indeed possess a hard gap at location 1. Last, we define new approximation versions of some known NP-complete problems, in the spirit of approximating the quality of the best solution. In particular, we define approximation versions of: * vertex cover <ref> [Kar-72] </ref>. Note that the version that was treated by Papadimitriou & 14 Yannakakis [PY-91] is in the spirit of the largest solution. We treat the version that seeks the quality of the best solution. * kedge colorability (chromatic index) [Hoy-81, LG-83]. <p> Theorem 3.14 For any B 3, max 3-dimensional matching-B possesses a hard gap at location 1. Proof: A slight modification of the original reduction from sat to 3-dimensional matching <ref> [Kar-72] </ref> works as a gap preserving reduction from max-sat-B to max 3-dimensional 67 matching-3. We shortly describe the reduction, following the presentation of Garey & Johnson (1979). [GJ-79].
Reference: [KMR-92] <author> D. Karger, R. Motwani and G. D. S. Ramkumar. </author> <title> On Approximating the Longest Path in a Graph. </title> <type> Manuscript, </type> <year> 1992. </year>
Reference: [KK-82] <author> N. Karmakar and R.M. Karp. </author> <title> An Efficient Approximation Scheme For The One-Dimensional Bin Packing Problem. </title> <booktitle> In Proc. 23rd IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 312-320, </pages> <year> 1982. </year>
Reference: [LG-83] <author> D. Leven and Z. Galil. </author> <title> NP-completness of finding the chromatic index of regular graphs. </title> <editor> J. </editor> <booktitle> of Algorithms 4, </booktitle> <pages> pages 35-44, </pages> <year> 1983. </year>
Reference-contexts: In particular, we define approximation versions of: * vertex cover [Kar-72]. Note that the version that was treated by Papadimitriou & 14 Yannakakis [PY-91] is in the spirit of the largest solution. We treat the version that seeks the quality of the best solution. * kedge colorability (chromatic index) <ref> [Hoy-81, LG-83] </ref>. In this case, it is not hard to approximate the size of the smallest solution since there is a polynomial time algorithm that colors the edges of a graph of degree k with k + 1 colors (Vizing's Theorem, see [Ber-73]). <p> Note that jEj jV j B=2, and recall that the hard gap for min vertex cover-B was shown hard for K = fi (jV j). 2. Use the original reduction of max-sat to kedge colorability <ref> [Hoy-81, LG-83] </ref>) only let the domain of the reduction be max 3sat-B (shown hard in [PY-91]). Clearly, if there is a satisfying assignment to the input formula, then there is an edge-coloring of the output graph with k colors such that all the vertices are consistent.
Reference: [Lev-73] <author> L. Levin. </author> <title> Universal'nye perebornye zadachi (Universal search problems, in Russian), </title> <journal> In Problemy Peredachi Informatsii, </journal> <volume> vol. 9, </volume> <pages> pages 265-266, </pages> <year> 1973. </year> <note> A corrected English translation appears in an appendix to Trakhtenbrot [Tra-84] </note>
Reference: [LFKN-90] <author> C. Lund, L. Fortnow, H. Karloff, and N. Nisan. </author> <title> Algebraic methods for interactive proof systems. </title> <booktitle> In Proc. 22nd ACM Symp. on Theory of Computing, </booktitle> <pages> pages 2-10, </pages> <year> 1990. </year>
Reference-contexts: Needless to say that PKC (k ()) SKC (k ()), for any function k and in particular for k 0. On the other hand, if we allow polynomial amount of knowledge to be revealed, then every language in IP can be proven. Theorem <ref> [LFKN-90, Sha-90] </ref>: PKC (poly ()) = IP = PSPACE As indicated in [GP-91], the first equality is a property of an adequate definition (of knowl edge complexity) rather than a result. In this work we study the class of languages that have interactive-proofs with logarith mic knowledge-complexity. <p> The extended model of multi-provers interactive proofs was suggested by Ben-Or, Goldwasser, Kilian, and Wigderson [BGKW-88], and was shown equivalent to the model of transparent proofs [FRS-88]. It was then discovered that the languages, for which interactive proofs exist, are exactly the languages in PSPACE <ref> [LFKN-90, Sha-90] </ref> and that languages, for which multi-provers interactive proofs exist, are exactly the languages in NEXP-TIME. Feige, Goldwasser, Lovasz, Safra, and Szegedi [FGLSS-91] were the first to observe the connection between transparent proofs and the hardness of approximations.
Reference: [Ost-91] <author> R. Ostrovsky. </author> <title> One-Way Functions, Hard on Average Problems, and Statistical Zero-Knowledge Proofs. </title> <note> Structures 1991. </note>
Reference-contexts: However, the paper of Aiello and Hastad provides all the necessary machinery for proving Fortnow's result as well [AH-87, H-94]. Needless to say that the basic approach presented by Fortnow (i.e., looking at the "simulator-based prover") is valid and has inspired all subsequent works (e.g., <ref> [AH-87, BMO-90, Ost-91, BP-92a, OW-93] </ref>) as well as the current one. 1.2 The Hardness of Approximations The importance of approximation algorithms became evident in the early 70's, when it was discovered that unless P=NP (which is very unlikely) many important optimization problems cannot be solved precisely in polynomial time [Coo-71, Kar-72]. <p> Yet, the result SZK co-AM does hold, since the work of Aiello and Hastad contains the necessary refinements which enable to present a modified AM-protocol for L (see [AH-87, H-94]). Furthermore, Fortnow's basic approach is valid, and indeed it was used in subsequent works (e.g., <ref> [AH-87, BMO-90, Ost-91, BP-92a, OW-93] </ref>). Fortnow's basic approach starts with the observation that the simulator M must behave differently on x 2 L and x 62 L. Clearly, the difference cannot be recognized in polynomial-time, unless L 2 BPP.
Reference: [OVY-91] <author> R. Ostrovsky, R. Venkatesan and M. Yung. </author> <title> Fair Games Against an All-Powerful Adversary. </title> <booktitle> AMS DIMACS Series in Discrete Mathematics and Theoretical Computer Science. </booktitle> <volume> Vol 13. </volume> <publisher> (Jin-Yi Cai ed.) </publisher> <pages> pp. 155-169. </pages>
Reference: [OW-93] <author> R. Ostrovsky and A. Wigderson. </author> <title> One-Way Functions are Essential For Non-Trivial Zero-Knowledge, </title> <booktitle> Proc. 2nd Israeli Symp. on Theory of Computing and Systems, </booktitle> <year> 1993. </year>
Reference-contexts: However, the paper of Aiello and Hastad provides all the necessary machinery for proving Fortnow's result as well [AH-87, H-94]. Needless to say that the basic approach presented by Fortnow (i.e., looking at the "simulator-based prover") is valid and has inspired all subsequent works (e.g., <ref> [AH-87, BMO-90, Ost-91, BP-92a, OW-93] </ref>) as well as the current one. 1.2 The Hardness of Approximations The importance of approximation algorithms became evident in the early 70's, when it was discovered that unless P=NP (which is very unlikely) many important optimization problems cannot be solved precisely in polynomial time [Coo-71, Kar-72]. <p> Yet, the result SZK co-AM does hold, since the work of Aiello and Hastad contains the necessary refinements which enable to present a modified AM-protocol for L (see [AH-87, H-94]). Furthermore, Fortnow's basic approach is valid, and indeed it was used in subsequent works (e.g., <ref> [AH-87, BMO-90, Ost-91, BP-92a, OW-93] </ref>). Fortnow's basic approach starts with the observation that the simulator M must behave differently on x 2 L and x 62 L. Clearly, the difference cannot be recognized in polynomial-time, unless L 2 BPP.
Reference: [Lov-73] <author> L. Lovasz. </author> <title> Coverings and Colorings of Hypergraphs. </title> <booktitle> Proc. 4-th Southern Conference on Combinatorics, Graph Theory, and Computing, </booktitle> <publisher> Utilitas Mathematica Publishing, </publisher> <address> Winnipeg 3-12, </address> <year> 1973. </year>
Reference-contexts: Again, we treat the version that seeks the quality of the best solution (i.e., a best k edge-coloring of a k-degree graph). * set splitting <ref> [Lov-73] </ref>. We show that all these problems possess a hard gap at gap-location 1. 1.2.4 Summary of the motivation for proving hardness at gap location 1 To complete the discussion, we summarize the arguments that motivate showing a hard gap at location 1.
Reference: [LY-92] <author> C. Lund and M. Yannakakis. </author> <title> On the Hardness of Approximating Minimization Problems. </title> <booktitle> Proceedings of the 25rd Annual ACM Symposium on the Theory of Computing, ACM (1993). </booktitle>
Reference-contexts: The first category contains problems such as approximating the size of the biggest clique in the input graph (the hardness of this problem was shown by [FGLSS-91, AS-92, ALMSS-92]), or the minimum number of colors needed to properly color the input graph (see <ref> [LY-92] </ref>). The second category includes problems such as approximating the maximum number of clauses that can be simultaneously satisfied in an input formula [ALMSS-92], or approximating the maximum number of consistent edges in a best 3-coloring of the input graph (Papadimitriou & Yannakakis 1991). (see [PY-91]).
Reference: [MS-81] <author> F. MacWilliams and N. Sloane. </author> <title> The Theory of Error-Correcting Codes. </title> <publisher> North-Holland, </publisher> <year> 1981. </year> <month> 78 </month>
Reference: [Mar-73] <author> G.A. Margulis. </author> <title> Explicit Constructions of Concentrators. </title> <journal> Prob. Per. Infor. </journal> <volume> vol. 9, </volume> <pages> pages 71-80, </pages> <year> 1973. </year> <title> (English translation in Problems of Infor. </title> <journal> Trans., </journal> <pages> pages 325-332, </pages> <year> 1975). </year>
Reference-contexts: Bipartite expanders on 2 fi n nodes can be efficiently constructed for any n 2 IN <ref> [Mar-73, GG-81, AJ-87] </ref>.
Reference: [Mot-92] <author> R. Motwani. </author> <title> Lecture Notes on Approximation Algorithms. </title> <type> Technical Report, </type> <institution> Dept. of Computer Science, Stanford University (1992). </institution>
Reference: [Or-87] <author> Y. Oren. </author> <title> On The Cunning Power of Cheating Verifiers: Some Observations About Zero Knowledge Proofs. </title> <booktitle> Proceedings of the 28th Annual IEEE Symposium on the Foundations of Computer Science, IEEE (1987). </booktitle>
Reference: [Os-91] <author> R. Ostrovsky. </author> <title> One-Way Functions, Hard on Average Problems, and Statistical Zero-Knowledge Proofs. </title> <note> Structures 1991. </note>
Reference-contexts: We use the almost uniform generator to implement it efficiently. The simulation based prover was first used by Fortnow [F-89], and it was used in many works since <ref> [AH-87, BMO-90, Os-91] </ref>. Definition 2.11 Let S be a simulator of a g rounds interactive proof with message length l. <p> Let us now turn to approximations: we will be interested in computing a distribution which is ffi-close to P fl . If ffi = n c for some constant c then, following <ref> [Os-91] </ref>, this can be done in probabilistic polynomial time with an NP oracle by using techniques from [ILL-89]. That result will not, however, suffice for the applications in this paper: we need to be able to achieve values of ffi which are exponentially small (in n).
Reference: [OVY-90] <author> R. Ostrovsky, R. Venkatesan and M. Yung. </author> <title> On the Complexity of Asymmetric Games. </title> <type> Manuscript (1990). </type>
Reference-contexts: But why use low knowledge-complexity protocols when one can use zero-knowledge ones (see, [GMW-86, GMW-87])? The reason is that the non-zero-knowledge protocols may be more efficient and/or may require weaker computational assumptions (see, for example, <ref> [OVY-90] </ref>). 1.1.4 Remarks A remark concerning two definitions. Throughout this work, SKC (k ()) and PKC (k ()) denote the classes of knowledge-complexity with respect to the honest verifier.
Reference: [PY-91] <author> C. H. Papadimitriou and M. Yannakakis. </author> <title> Optimization, Approximation, and Complexity Classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> vol. 43, </volume> <pages> pages 425-440, </pages> <year> 1991. </year>
Reference-contexts: Interesting such results concerning GRAPH COLORING, TRAVELLING SALESMAN (without the triangle inequality) and MAXIMUM CLIQUE can be found in [GJ-79] and [SG-76]. In a paper, that turned out to be somewhat prophetic, Papadimitriou and Yannakakis <ref> [PY-91] </ref> defined a class of optimization problems called MAX-SNP. They showed that all the problems in this class can be approximated to within some constant ratio. They also presented some very interesting problems that were hard for this class. <p> They also presented some very interesting problems that were hard for this class. That is, if a MAX-SNP-Hard problem has a polynomial time approximation scheme then all problems in MAX-SNP have polynomial time approximation schemes. The class MAX-SNP-Hard contains problems as MAX-3SAT-B, INDEPENDENT-SET-B, VERTEX-COVER-B, MAX-CUT, MAX-k-COLORABILITY <ref> [PY-91] </ref>, metric TRAVELLING SALESMAN [PY-92], STEINER TREE [BP-89] SHORTEST SUPERSTRING [BJLTY-90], MUL 9 TIWAY CUTS [DJPSY-92] and bounded 3-DIMENSIONAL MATCHING [Kan-91]. Meanwhile, with no apparent connection, the research in the area of interactive proofs was making a rapid progress. <p> The second category includes problems such as approximating the maximum number of clauses that can be simultaneously satisfied in an input formula [ALMSS-92], or approximating the maximum number of consistent edges in a best 3-coloring of the input graph (Papadimitriou & Yannakakis 1991). (see <ref> [PY-91] </ref>). <p> The L-reductions that were used by Papadimitriou & Yannakakis <ref> [PY-91] </ref>, preserve the existence of such gaps and thus, polynomial time inseparable gaps appear in all max-snp-hard problems. This implies that these problems have no polynomial time approximation schemes. <p> Can this relaxation be determined in polynomial time for any constant *? This question was not considered before. Instead, following the gap-preserving L-reductions used by Papadimitriou & Yannakakis <ref> [PY-91] </ref>, we get that there are constants 0 &lt; * 0 ; ff 0 &lt; 1 such that, unless P=NP, it is not possible to tell in polynomial time whether a given graph G (V; E) has a k-coloring with more than ff 0 jEj consistent edges, or whether for any <p> The importance of the gap at location ff 0 = 1 can also be expressed in terms of the analogous search problem. The implication of the result of <ref> [PY-91] </ref> is that given a graph G, we cannot find a k-coloring of G that is as close as desired to the optimal solution (unless P=NP). But, suppose we are given a k-colorable graph and we would like to color it such that as many edges as possible are consistent. <p> But, suppose we are given a k-colorable graph and we would like to color it such that as many edges as possible are consistent. There is no evidence given in <ref> [PY-91] </ref> to show that we cannot achieve this task in polynomial time such that the number of consistent edges is greater than (1 *)jEj for any constant *. 1.2.3 Summary of results The hardness of finding a k-coloring that has "almost" as many consistent edges as possible, for k-colorable graphs, is <p> We thus settle the problem raised in the previous subsection. In our proof, we use a different reduction than the one in <ref> [PY-91] </ref>). Two other problems that were previously shown hard to approximate using a gap location different from 1 are 3-dimensional matching [Kan-91] and not-all-equal-3sat [PY-91]. We strengthen these results by showing that these problems indeed possess a hard gap at location 1. <p> We thus settle the problem raised in the previous subsection. In our proof, we use a different reduction than the one in <ref> [PY-91] </ref>). Two other problems that were previously shown hard to approximate using a gap location different from 1 are 3-dimensional matching [Kan-91] and not-all-equal-3sat [PY-91]. We strengthen these results by showing that these problems indeed possess a hard gap at location 1. Last, we define new approximation versions of some known NP-complete problems, in the spirit of approximating the quality of the best solution. <p> Last, we define new approximation versions of some known NP-complete problems, in the spirit of approximating the quality of the best solution. In particular, we define approximation versions of: * vertex cover [Kar-72]. Note that the version that was treated by Papadimitriou & 14 Yannakakis <ref> [PY-91] </ref> is in the spirit of the largest solution. We treat the version that seeks the quality of the best solution. * kedge colorability (chromatic index) [Hoy-81, LG-83]. <p> The first class contains optimization problems for which it is NP-hard to determine whether an input I has OP T (I) = N (I). This class contains problems as max-sat (proven hard to approximate by Arora et al. [ALMSS-92]) and max k-colorability (for k 3) <ref> [PY-91] </ref> and Section 3.2). The other class contains problems for which it is easy to decide whether an input I has OP T (I) = N (I). <p> The other class contains problems for which it is easy to decide whether an input I has OP T (I) = N (I). This class contains problems such as max-cut (which can be also viewed as max 2-colorability), and max-2sat (both shown hard to approximate by Papadimitriou & Yannakakis <ref> [PY-91] </ref>). (While doing this partition, we do not claim that all decision problems are either NP-hard or easy, but practically all known interesting problems of this form do fall into one of these two categories, and we are interested only in these natural problems here.) Our second belief is that any <p> Theorem 3.8 For any k 3, max k-colorability possesses a hard gap at location 1. Proof: We use a reduction from max 3sat-B to max 3-colorability. Next, we can use techniques from <ref> [PY-91] </ref> to further reduce max 3-colorability to max k-colorability for any k &gt; 3. In the reduction, we use a bipartite expander, which helps us to preserve the hard gap. The use of expanders in preserving gaps was first noticed in [PY-91]. <p> Next, we can use techniques from <ref> [PY-91] </ref> to further reduce max 3-colorability to max k-colorability for any k &gt; 3. In the reduction, we use a bipartite expander, which helps us to preserve the hard gap. The use of expanders in preserving gaps was first noticed in [PY-91]. A bipartite graph on 2fin nodes is called a bipartite expander with degree d and expansion factor 1+fl if every subset S of at most n=2 nodes of one side of the graph is adjacent to at least (1 + fl)jSj nodes on the other side. <p> These are max not-all-equal 3sat <ref> [PY-91] </ref> and max 3-dimensional matching [Kan-91]. In this section, we show that these problems have a hard gap at the gap location 1. Let us begin with defining the problems. Definition 3.11 (The problem max not-all-equal 3sat). Input: A 3-CNF formula '. <p> Problem: Find the maximum number of edges in G that V 0 covers, over all subsets V 0 V of cardinality K. Note the difference between this problem and the optimization problem min vertex cover treated in <ref> [PY-91] </ref>. Their problem was to minimize the size of the vertex cover (which covers 70 all edges). In max vertex cover, we are given the size of the cover, K, in the input, and we are trying to maximize the number of edges that are covered. <p> Theorem 3.18 The following problems possess a hard gap at location 1: 1. max vertex cover-B 2. max k-edge colorability (chromatic index) 3. max set splitting Proof: 1. We use the identity reduction from min vertex cover-B (a problem that was shown hard in <ref> [PY-91] </ref>). If there is a vertex cover of G of cardinality K that covers at least (1 *)jEj edges in G, then there is a cover of all edges with at most K + *jEj vertices. <p> Use the original reduction of max-sat to kedge colorability [Hoy-81, LG-83]) only let the domain of the reduction be max 3sat-B (shown hard in <ref> [PY-91] </ref>). Clearly, if there is a satisfying assignment to the input formula, then there is an edge-coloring of the output graph with k colors such that all the vertices are consistent.
Reference: [PY-92] <author> C. H. Papadimitriou and M. Yannakakis. </author> <title> The traveling salesman problem with distances one and two, </title> <note> Mathematics of Operations Research, to appear. </note>
Reference-contexts: That is, if a MAX-SNP-Hard problem has a polynomial time approximation scheme then all problems in MAX-SNP have polynomial time approximation schemes. The class MAX-SNP-Hard contains problems as MAX-3SAT-B, INDEPENDENT-SET-B, VERTEX-COVER-B, MAX-CUT, MAX-k-COLORABILITY [PY-91], metric TRAVELLING SALESMAN <ref> [PY-92] </ref>, STEINER TREE [BP-89] SHORTEST SUPERSTRING [BJLTY-90], MUL 9 TIWAY CUTS [DJPSY-92] and bounded 3-DIMENSIONAL MATCHING [Kan-91]. Meanwhile, with no apparent connection, the research in the area of interactive proofs was making a rapid progress. The research was initiated by Goldwasser Micali and Rackoff [GMR-89] and Babai [Bab-85].
Reference: [P-92] <author> E. Petrank. </author> <title> The Hardness of Approximation : Gap Location. </title> <journal> Computational Complexity, </journal> <volume> Vol. 4, </volume> <year> 1994. </year> <pages> pp. 133-157. </pages> <note> A preliminary version of this paper appeared in the Second IEEE Israel Symp. on Theory of Computation and Systems, </note> <month> June </month> <year> 1993, </year> <pages> pp. 275-284. </pages>
Reference: [SG-76] <author> S. Sahni and T. Gonzalez. </author> <title> P-complete approximation problems. </title> <journal> JACM, </journal> <volume> vol. 23, </volume> <pages> pages 555-565, </pages> <year> 1976. </year>
Reference-contexts: Lower bounds on the possibility of constructing polynomial time algorithms (even assuming P6=NP) were hardly known. Interesting such results concerning GRAPH COLORING, TRAVELLING SALESMAN (without the triangle inequality) and MAXIMUM CLIQUE can be found in [GJ-79] and <ref> [SG-76] </ref>. In a paper, that turned out to be somewhat prophetic, Papadimitriou and Yannakakis [PY-91] defined a class of optimization problems called MAX-SNP. They showed that all the problems in this class can be approximated to within some constant ratio.
Reference: [Sha-90] <author> A. Shamir. IP=PSPACE. </author> <booktitle> In Proc. 22nd ACM Symp. on Theory of Computing, </booktitle> <pages> pages 11-15, </pages> <year> 1990. </year>
Reference-contexts: Needless to say that PKC (k ()) SKC (k ()), for any function k and in particular for k 0. On the other hand, if we allow polynomial amount of knowledge to be revealed, then every language in IP can be proven. Theorem <ref> [LFKN-90, Sha-90] </ref>: PKC (poly ()) = IP = PSPACE As indicated in [GP-91], the first equality is a property of an adequate definition (of knowl edge complexity) rather than a result. In this work we study the class of languages that have interactive-proofs with logarith mic knowledge-complexity. <p> The extended model of multi-provers interactive proofs was suggested by Ben-Or, Goldwasser, Kilian, and Wigderson [BGKW-88], and was shown equivalent to the model of transparent proofs [FRS-88]. It was then discovered that the languages, for which interactive proofs exist, are exactly the languages in PSPACE <ref> [LFKN-90, Sha-90] </ref> and that languages, for which multi-provers interactive proofs exist, are exactly the languages in NEXP-TIME. Feige, Goldwasser, Lovasz, Safra, and Szegedi [FGLSS-91] were the first to observe the connection between transparent proofs and the hardness of approximations.
Reference: [Si-83] <author> M. Sipser. </author> <title> A Complexity Theoretic Approach to Randomness. </title> <booktitle> Proceedings of the 15th Annual ACM Symposium on the Theory of Computing, ACM (1983). </booktitle>
Reference-contexts: This result is established by combining techniques from Jerrum, Valiant and Vazirani [JVV-86] and Stockmeyer [St-83] with Carter-Wegman universal hash function [CW-79] based techniques for estimating set sizes (Sipser <ref> [Si-83] </ref>). The details are in Section 2.2.1. 7 1.1.3 Motivation for studying KC In addition to the self-evident fundamental appeal of knowledge complexity, we wish to point out some practical motivation for considering knowledge-complexity greater than zero. <p> The proof of Theorem 2.5 is derived by combining techniques from <ref> [JVV-86, St-83, Si-83] </ref>. First, we build an approximate counter. The approximate counter of Stockmeyer [St-83] took polynomial time with a P 2 oracle. We begin by relaxing the requirement on the approximate counter: we allow it to fail in approximating to within the required bounds with some small probability. <p> We show that this relaxed version of approximate counting can be implemented in probabilistic polynomial time with an NP oracle. Our construction uses hashing techniques similar to the ones used by Sipser <ref> [Si-83] </ref>. Once we have this approximate counter, we use the probabilistic polynomial time reduction of Jerrum, Valiant and Vazirani [JVV-86] from uniform generation to approximate counting. <p> The following lemma follows from Lemma 4.1 in Aiello-H-astad [AH-87], which in turn is based on ideas of Sipser <ref> [Si-83] </ref> and Babai [Bab-85]. Lemma 2.6 Let b; k be positive integers, ffi &gt; 0 and S f0; 1g k . Let l = 16 lg (2ffi 1 ).
Reference: [St-73] <author> L.J. Stockmeyer, </author> <title> Planar 3-Colorability is NP-Complete In SIGACT News, </title> <booktitle> Vol 5(3), </booktitle> <pages> pages 19-25, </pages> <year> 1973. </year> <month> 79 </month>
Reference-contexts: The reduction. We are given an instance of max 3sat-B, i.e., a 3-cnf formula ' with n variables and m clauses, such that each variable appears at most B times in the formula '. We use an extension of the standard reduction from 3sat to 3-colorability <ref> [St-73, GJS-76] </ref>. Let us shortly describe the original reduction, which uses a gadget with nine vertices and 10 edges (Figure 3.2). We call the top vertex g 4 the gadget head, and the three bottom vertices g 1 ; g 2 ; g 3 the gadget legs.
Reference: [St-83] <author> L. Stockmeyer. </author> <title> The Complexity of Approximate Counting. </title> <booktitle> Proceedings of the 15th Annual ACM Symposium on the Theory of Computing, ACM (1983). </booktitle>
Reference-contexts: The uniform generation problem is to generate, on input 1 n , an element of S n distributed uniformly at random. Jerrum, Valiant, and Vazirani [JVV-86], using results of Stockmeyer <ref> [St-83] </ref> on approximate counting, showed that uniform generation can be done in probabilistic, polynomial time with a P 2 oracle. For our applications we would like a lower complexity than PPT with a P 2 oracle. <p> This result is established by combining techniques from Jerrum, Valiant and Vazirani [JVV-86] and Stockmeyer <ref> [St-83] </ref> with Carter-Wegman universal hash function [CW-79] based techniques for estimating set sizes (Sipser [Si-83]). <p> The proof of Theorem 2.5 is derived by combining techniques from <ref> [JVV-86, St-83, Si-83] </ref>. First, we build an approximate counter. The approximate counter of Stockmeyer [St-83] took polynomial time with a P 2 oracle. We begin by relaxing the requirement on the approximate counter: we allow it to fail in approximating to within the required bounds with some small probability. <p> The proof of Theorem 2.5 is derived by combining techniques from [JVV-86, St-83, Si-83]. First, we build an approximate counter. The approximate counter of Stockmeyer <ref> [St-83] </ref> took polynomial time with a P 2 oracle. We begin by relaxing the requirement on the approximate counter: we allow it to fail in approximating to within the required bounds with some small probability. <p> The notion of approximate counting to within a factor (1 + *) with 24 success probability at most (1 ffi) is as follows (cf. <ref> [St-83] </ref>). Definition 2.7 A universal approximate counter is a (probabilistic) machine C which, on inputs 1 n ; * &gt; 0; ffi &gt; 0; hM i outputs an estimate v which, with probability 1 ffi, satisfies 1 Let us now establish the result on approximate counting that we need.
Reference: [TW-87] <author> M. Tompa and H. Woll. </author> <title> Random Self-Reducibility and Zero-Knowledge Proofs of Possession of Information. </title> <booktitle> Proceedings of the 28th Annual IEEE Symposium on the Foundations of Computer Science, IEEE (1987). </booktitle>
Reference: [Tra-84] <author> B. A. Trakhtenbrot. </author> <title> A survey of Russian approaches to Perebor (brute-force search) algorithms. </title> <booktitle> In Annals of the History of Computing vol. </booktitle> <volume> 6, </volume> <pages> pages 384-400, </pages> <year> 1984. </year>
Reference: [Yan-92] <author> M. Yannakakis. </author> <title> On the Approximation of Maximum Satisfiability. </title> <booktitle> In Proc. 3rd Annual ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 1-9, </pages> <year> 1992. </year>
Reference: [Z-92] <author> D. Zuckerman. </author> <title> NP-Complete Problems Have a Version That's Hard to Approximate. </title> <type> Unpublished Manuscript. </type> <year> 1992. </year> <month> 80 </month>
References-found: 84

