URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/96-015.ps.Z
Refering-URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/FILE.html
Root-URL: http://www.cs.unc.edu
Email: email: fparama,plaistedg@cs.unc.edu  
Phone: phone: (919)962-f1795,1751g  
Title: Automated Deduction Techniques for Classification in Concept Languages  
Author: M. Paramasivam and David A. Plaisted 
Date: December 11, 1995  
Address: 3175 Sitterson Hall  Chapel Hill NC 27599-3175  
Affiliation: Department of Computer Science CB  University of North Carolina,  
Abstract: Mechanical theorem provers are becoming increasingly more powerful, and we believe that it is time to examine whether certain tasks that have formerly been accomplished by other means, can now be performed efficiently by a theorem prover. One such task is classification in description logic-based knowledge representation systems or Concept Language systems. Concept language systems provide a formalism for expressing knowledge based on concepts and roles. Subsumption checking is one important reasoning faculty offered by such sytems. In this paper we use a theorem prover coupled with a finite-model finder to perform subsumption checking. This approach is complete and sound for concept languages whose underlying description logic have the finite model property. The performance is compared with several other well-known concept language systems. Some efficient strategies to compute the subsumption hierarchy, known as classification, are also described.
Abstract-found: 1
Intro-found: 1
Reference: [BDS93] <author> Martin Buchheit, Francesco M. Donini, and Andrea Schaerf. </author> <title> Decidable reasoning in terminological knowledge representation systems. </title> <journal> J. Artificial Intelligence Research, </journal> <volume> 1 </volume> <pages> 109-138, </pages> <year> 1993. </year>
Reference-contexts: Concept definitions may be easily translated to sentences in first-order logic maintaining the intended semantics of the concept-forming constructs. For example, the first definition for PARENT would correspond to the following sentence: 8x parent (x) , (person (x) ^ 9y (child (x; y) ^ person (y))) Buchheit et al <ref> [BDS93] </ref> point out that concept language systems should provide mechanized methods to perform at least the following tasks: To check whether a knowledge-base is consistent| that is whether there exists a model for the knowledge-base; Determining whether a concept is satisfiable| whether there exists some model in which the concept is <p> It is interesting to note that not all theorem provers were able to derive all of the inferences described by these tests. 3.1 Subsumption Checking in First-Order Clause Sets Concepts are interpreted as subsets of some domain of interest, and roles as binary relations over the domain. Formally <ref> [BDS93] </ref>, an interpretation I = ( I ; : I ) consists of a non-empty set I | the domain of I and an interpretation function : I . The interpretation function : I maps concepts to be subsets of and roles to be subsets of fi . <p> On the other hand the system we propose is already complete for all sublogics that have the finite-model property. Buchheit et al <ref> [BDS93] </ref> introduce inclusion as a fundamental concept forming operator. For example, to express two concepts to be equivalent, it is sufficient to state that each one includes the other.
Reference: [BH91] <author> F. Baader and B. Hollunder. KRIS: </author> <title> Knowledge Representation and Inference System. </title> <journal> SIGART Bulletin, </journal> <volume> 2 </volume> <pages> 22-27, </pages> <month> June </month> <year> 1991. </year> <month> 20 </month>
Reference-contexts: 1 Introduction Concept language Systems 1 <ref> [BH91, Mac91, PSMB + 91, Pet91, BS85] </ref> provide a means for representing knowledge using concepts and roles. Although there is no single definitive concept language, many of the prevalent systems are descended from kl-one [BS85]. They are generally made of two distinguishable components. <p> Retrieval of information is usually based on some deductive processes involving both of these components. Concept languages are motivated by the search for expressive knowledge representation languages that also allow computationally decidable reasoning faculties. This has resulted in differing approaches to building systems: Some systems <ref> [BH91] </ref> have relatively rich formalisms to express concept definitions but suffer the possibility of having to deal with intractable and sometimes even undecidable problems sometimes causing the reasoner to not terminate. In fact [BH91] is a semantic-tableaux theorem prover for concept languages. <p> This has resulted in differing approaches to building systems: Some systems <ref> [BH91] </ref> have relatively rich formalisms to express concept definitions but suffer the possibility of having to deal with intractable and sometimes even undecidable problems sometimes causing the reasoner to not terminate. In fact [BH91] is a semantic-tableaux theorem prover for concept languages. Some provide extended expressivity [Mac91] but have reasoners that are 1 Also known as Terminological Knowledge Representation Systems or Description Logic Systems 1 incomplete for even decidable problems. <p> Starting from basic or atomic concepts and roles, complex concept and role descriptions may be defined. Although the specifics of such concept-forming (or role-forming) constructs vary across concept languages, most of them include conjunction, complementation and quantification over roles. Consider, for example, the definition of the concept PARENT from <ref> [BH91] </ref> PERSON u 9child:PERSON This defines the class of objects that are formed by the intersection of the following: objects defined by PERSON; and those objects for which some child role is filled by an object defined, again by PERSON. <p> The A-box, the assertional part, allows the user to assert information about the domain. The A-Box and the T-Box together constitute the knowledge-base. For example, the T-Box may have the following concept definitions <ref> [BH91] </ref> PARENT u gender:Male PARENT u gender:Female which define the concepts FATHER and MOTHER, respectively. The A-Box may contain the following assertions: PERSON (James) gender (James,Male) PERSON (Susan) gender (Susan,Female) child (James,Susan) From a logical perspective, concepts can be viewed as unary predicates, and roles as binary predicates. <p> Baader and Hollunder <ref> [BH91] </ref> state that kris was designed to include most of the concept language constructs with the restriction that the reasoner faces decidable problems when determining inferences such as subsumption checking.
Reference: [BHN + 92] <author> Franz Baader, Bernhard Hollunder, Bernhard Nebel, Hans-Jurgen Profitlich, and Enrico Franconi. </author> <title> An empirical analysis of optimization techniques for terminological representation systems. </title> <booktitle> In Principles of Knowledge Representation and Reasoning| Proceedings of the 3rd International Conference, </booktitle> <year> 1992. </year>
Reference-contexts: Suppose we have a clause of the form fC (X), :D (X)g; it is easy to see that C subsumes D. These obvious subsumptions are then extended by transitivity. Most concept language systems use similar syntactic methods to detect obvious subsumptions. In <ref> [BHN + 92] </ref>, C is said to be a 14 procedure make possible (Tbox,k) Concept concepts occurring in Tbox; n k; possible ; repeat n n + 1; compute G (T box; n); until G (T box; n) is satisfiable; for all C i 2 Concept do ground set (T box; <p> However, some index of the performance is discernible from the comparison. Note that these times do not reflect current versions of these systems. The current version of kris exhibits classification performances that rival the best concept language systems <ref> [BHN + 92] </ref>. We believe it is best to view our general-purpose system as a test prototype. There is a lot of room for improvement in implementing our classification methods. The classification times tabulated mostly reflect the model-generation phase. Model generation is much slower than generating unit consequences.
Reference: [BPS94] <author> Alex Borgida and Peter F. Patel-Schneider. </author> <title> A semantics and complete algorithm for subsumption in the classic description logic. </title> <journal> J. Artificial Intelligence Research, </journal> <volume> 1 </volume> <pages> 277-308, </pages> <year> 1994. </year>
Reference-contexts: Of these determining concept subsumption is the most fundamental task <ref> [BPS94, HN90] </ref>. To illustrate the notion of subsumption with an example: From the earlier definition for PARENT, we can infer the concept PERSON subsumes the concept PARENT. The subsumption relation defines 2 a partial ordering over concepts.
Reference: [BS85] <author> R. J. Brachman and J. G. Schmolze. </author> <title> An overview of the KL-ONE knoweldge representation system. </title> <journal> Cognitive Science, </journal> <volume> 9 </volume> <pages> 171-216, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: 1 Introduction Concept language Systems 1 <ref> [BH91, Mac91, PSMB + 91, Pet91, BS85] </ref> provide a means for representing knowledge using concepts and roles. Although there is no single definitive concept language, many of the prevalent systems are descended from kl-one [BS85]. They are generally made of two distinguishable components. <p> 1 Introduction Concept language Systems 1 [BH91, Mac91, PSMB + 91, Pet91, BS85] provide a means for representing knowledge using concepts and roles. Although there is no single definitive concept language, many of the prevalent systems are descended from kl-one <ref> [BS85] </ref>. They are generally made of two distinguishable components. One provides the user with a formalism to represent knowledge in an abstract sense| a provision to represent relationships between concepts and roles in a general sense.
Reference: [Chu94] <author> Heng Chu. </author> <note> CLIN-S User's Manual, </note> <year> 1994. </year>
Reference-contexts: The completeness of clin-s guarantees that we will find a proof of unsatisfiability if C 1 subsumes C 2 . If C 1 does not subsume C 2 , the finite-model finder can be relied upon to construct a contrary model with a finite domain. We examine how clin-s <ref> [CP94, Chu94] </ref>, a refutational theorem prover, augmented with a finite-model finder compares in performance with the concept language systems tested in [HKNP92]. We restrict our attention to the tests involving subsumptions.
Reference: [CP92] <author> Heng Chu and David Plaisted. </author> <title> Generating unit consequences of a ground clause set. </title> <type> Technical report, </type> <institution> University of North Carolina, Chapel Hill, NC, </institution> <year> 1992. </year>
Reference-contexts: For such cases a higher value of n can be tried to recompute ground set (T box; C i ; n; a). We use k to decide how small the domain we consider should be. Computing unit consequences of propositional clause sets is described in <ref> [CP92] </ref>. The technique to compute unit consequences of a propositional set has not been incorporated yet. However, the finite-model finder has been used to accomplish the same objective.
Reference: [CP94] <author> Heng Chu and David A. Plaisted. </author> <title> Model finding in semantically guided instance-based theorem proving. </title> <journal> Fundamenta Informaticae Journal, </journal> <month> September </month> <year> 1994. </year>
Reference-contexts: The completeness of clin-s guarantees that we will find a proof of unsatisfiability if C 1 subsumes C 2 . If C 1 does not subsume C 2 , the finite-model finder can be relied upon to construct a contrary model with a finite domain. We examine how clin-s <ref> [CP94, Chu94] </ref>, a refutational theorem prover, augmented with a finite-model finder compares in performance with the concept language systems tested in [HKNP92]. We restrict our attention to the tests involving subsumptions.
Reference: [Fit90] <author> Melvin Fitting. </author> <title> First-Order Logic and Automated Theorem Proving. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1990. </year>
Reference: [FLTZ93] <author> C. Fermuller, A. Leitsch, T. Tammet, and N Zamov. </author> <title> Resolution Methods and the Decision Problem. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <booktitle> Lecture Notes in Artificial Intelligence, </booktitle> <pages> 679. </pages>
Reference-contexts: The underlying logic of many concept languages has the finite model property. The idea of using a theorem prover with a model finder for performing inferences in concept language systems is not new. Hollunder and Nutt [HN90] mention it. Tammet <ref> [FLTZ93] </ref> describes how a resolution-based theorem prover and model finder, for a restricted form of predicate calculus, can be applied toward subsumption checking. However, the concept language considered is quite limited and the test example considered is very trivial. <p> A point to be made is that although the underlying logic for many concept language systems fall under the Goedel class of formulas, that is, the quantifier prefix is 9889 <ref> [FLTZ93] </ref>, the theorem prover and finite-model finder combination would work well for any extensions to concepts language provided the underlying logic still has the finite model property.
Reference: [Gel] <author> Van Gelder. </author> <type> Personal Communication. </type>
Reference-contexts: The ground satisfiability checker being used presently is sato [Zha]. It is quite fast in general. However, on occasion it is very slow. Preliminary results seem to indicate that the satisfiability program developed by Van Gelder <ref> [Gel] </ref> might do well. 19 Although this paper has mostly discussed inferencing in the terminological component, we believe that it is easy to accommodate assertional reasoning using the same techniques. Assertions can be represented as unit clauses.
Reference: [HKNP92] <author> J. Heinsohn, D. Kudenko, B. Nebel, and H. Profitlich. </author> <title> An emperical analysis of terminological representation systems. </title> <type> Technical report, </type> <note> DFKI Research Report, German Research Center for Artificial Intelligence (DFKI), Kaiserlautern, </note> <year> 1992. </year>
Reference-contexts: The subsumption relation defines 2 a partial ordering over concepts. Usually, concept language systems are equipped with the ca-pacity to construct this partial ordering involving all the defined concepts. This process is called classification. Heinsohn et al <ref> [HKNP92] </ref> describe an empirical analysis of the following Concept language systems| back, classic, kris, loom, meson and sb-one. The systems are compared for features and expressivity offered by the language, degree of inferential completeness, and classification speed. <p> However, the concept language considered is quite limited and the test example considered is very trivial. So far such approaches have been dismissed because standard theorem proving techniques have not been thought to be fast enough. We demonstrate that this is not the case using tests developed in <ref> [HKNP92] </ref>. The completeness of the theorem prover and the finite-model finder guarantees that the system either determines that a concept subsumes another, or presents a model that counters the subsumption. For the system to perform efficiently we have developed a number of preprocessing steps. <p> We examine how clin-s [CP94, Chu94], a refutational theorem prover, augmented with a finite-model finder compares in performance with the concept language systems tested in <ref> [HKNP92] </ref>. We restrict our attention to the tests involving subsumptions. This includes the inference tests, and the classification for the realistic knowledge-bases. clin-s is a semantically guided first-order theorem prover that uses hyper-linking. <p> We also discuss some tests designed to probe the inferential abilities of concept language reasoners. They have been used before to compare some concept languages <ref> [HKNP92] </ref>. Although these tests are not a comprehensive suite, they are varied and take into account several language constructs offered by concept languages. <p> We were also interested in the performance of some other theorem provers on these tests, and we ran these tests on otter [McC90], clin [LP92, Lee90] and sprfn [Pla88] as well. We compared their performance with those of the the concept languages based on reports in <ref> [HKNP92] </ref>. It is interesting to note that not all theorem provers were able to derive all of the inferences described by these tests. 3.1 Subsumption Checking in First-Order Clause Sets Concepts are interpreted as subsets of some domain of interest, and roles as binary relations over the domain. <p> So far all the tests were run without any semantics guidance from the user. The run times are not comparable at all because the systems were run on varying hardware. (Heinsohn <ref> [HKNP92] </ref> reports that back and meson were tested on a Solbourne 601/32, the other terminological systems on a MacIvory. clin-s and the model finder which are implemented in prolog ran on a dec 5000. <p> All the other theorem-provers were also run on the dec.) Moreover, many of the run times reported by <ref> [HKNP92] </ref> are no longer appropriate as the systems themselves have improved. <p> These predecessors and successors are determined by performing subsumption tests. Some sophisticated ordering traversal techniques are usually used to reduce the number of subsumption tests. Heinsohn et al <ref> [HKNP92] </ref> conjecture that in the worst case| for example if all the concepts in the knowledge-base are unrelated| classification can result in subsumption comparisons between all possible pairs of concepts. This is quadratic in the number of concepts. <p> We do not claim that such general-purpose systems are capable of replacing concept language systems, but it is interesting that a general-purpose prover performs comparably with specialized techniques. Besides, some concept language systems have improved since <ref> [HKNP92] </ref>. We note that some realistic knowledge-bases when translated run into several hundreds of clauses. We wonder how well this system would scale up to knowledge-bases that may result in tens of thousands, even hundreds of thousand clauses.
Reference: [HN90] <author> B. Hollunder and W. Nutt. </author> <title> Subsumption algorithms for concept languages. </title> <type> Technical report, </type> <note> DFKI Research Report RR-90-04, German Research Center for Artificial Intelligence (DFKI), Kaiserlautern, </note> <year> 1990. </year>
Reference-contexts: Of these determining concept subsumption is the most fundamental task <ref> [BPS94, HN90] </ref>. To illustrate the notion of subsumption with an example: From the earlier definition for PARENT, we can infer the concept PERSON subsumes the concept PARENT. The subsumption relation defines 2 a partial ordering over concepts. <p> The logic is then said to have the finite model property. The underlying logic of many concept languages has the finite model property. The idea of using a theorem prover with a model finder for performing inferences in concept language systems is not new. Hollunder and Nutt <ref> [HN90] </ref> mention it. Tammet [FLTZ93] describes how a resolution-based theorem prover and model finder, for a restricted form of predicate calculus, can be applied toward subsumption checking. However, the concept language considered is quite limited and the test example considered is very trivial. <p> This is a very descriptive language; it also corresponds to some sublogic of first-order logic that has the finite model property <ref> [HN90] </ref>. In fact [HN90] point out that the semantic tableaux calculus used in kris combines the characteristics of a theorem prover and a finite model finder for that sublogic. However, kris is not complete for all sublogics of first-order logic that have the finite model property. <p> This is a very descriptive language; it also corresponds to some sublogic of first-order logic that has the finite model property <ref> [HN90] </ref>. In fact [HN90] point out that the semantic tableaux calculus used in kris combines the characteristics of a theorem prover and a finite model finder for that sublogic. However, kris is not complete for all sublogics of first-order logic that have the finite model property.
Reference: [Lee90] <author> Shie-Jue Lee. </author> <title> CLIN: An Automated Reasoning System Using Clause Linking. </title> <type> PhD thesis, </type> <institution> University of North Carolina at Chapel Hill, </institution> <year> 1990. </year>
Reference-contexts: Although these tests are not a comprehensive suite, they are varied and take into account several language constructs offered by concept languages. We were also interested in the performance of some other theorem provers on these tests, and we ran these tests on otter [McC90], clin <ref> [LP92, Lee90] </ref> and sprfn [Pla88] as well. We compared their performance with those of the the concept languages based on reports in [HKNP92].
Reference: [LP92] <author> Shie-Jue Lee and David. A. Plaisted. </author> <title> Eliminating duplication with the hyper-linking strategy. </title> <journal> J. Automated Reasoning, </journal> <volume> 9 </volume> <pages> 25-42, </pages> <year> 1992. </year>
Reference-contexts: Although these tests are not a comprehensive suite, they are varied and take into account several language constructs offered by concept languages. We were also interested in the performance of some other theorem provers on these tests, and we ran these tests on otter [McC90], clin <ref> [LP92, Lee90] </ref> and sprfn [Pla88] as well. We compared their performance with those of the the concept languages based on reports in [HKNP92].
Reference: [Mac91] <author> R. MacGregor. </author> <title> Inside the LOOM description classifier. </title> <journal> SIGART Bulletin, </journal> <volume> 2 </volume> <pages> 88-82, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Concept language Systems 1 <ref> [BH91, Mac91, PSMB + 91, Pet91, BS85] </ref> provide a means for representing knowledge using concepts and roles. Although there is no single definitive concept language, many of the prevalent systems are descended from kl-one [BS85]. They are generally made of two distinguishable components. <p> In fact [BH91] is a semantic-tableaux theorem prover for concept languages. Some provide extended expressivity <ref> [Mac91] </ref> but have reasoners that are 1 Also known as Terminological Knowledge Representation Systems or Description Logic Systems 1 incomplete for even decidable problems. Another kind [PSMB + 91] prefer to provide a small and compact language for which reasoning is for the most part complete and efficient.
Reference: [McC90] <author> William W. McCune. </author> <title> OTTER 2.0 Users Guide. </title> <institution> Argonne National Laboratory, Argonne, Illinois, </institution> <month> March </month> <year> 1990. </year>
Reference-contexts: Although these tests are not a comprehensive suite, they are varied and take into account several language constructs offered by concept languages. We were also interested in the performance of some other theorem provers on these tests, and we ran these tests on otter <ref> [McC90] </ref>, clin [LP92, Lee90] and sprfn [Pla88] as well. We compared their performance with those of the the concept languages based on reports in [HKNP92].
Reference: [Neb90] <author> B. Nebel. </author> <title> Reasoning and Revision in Hybrid Representation Systems. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1990. </year>
Reference-contexts: This can be done by first finding all the clauses in all the alternating paths from some clause. In this way all the unrelated subsets can be found. Introducing auxiliary concepts has been used in speeding up the classification process <ref> [Neb90] </ref>. This idea can be used here as well.
Reference: [Pet91] <author> C. Petalson. </author> <title> The BACK system | an overview. </title> <journal> SIGART Bulletin, </journal> <volume> 2 </volume> <pages> 114-119, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Concept language Systems 1 <ref> [BH91, Mac91, PSMB + 91, Pet91, BS85] </ref> provide a means for representing knowledge using concepts and roles. Although there is no single definitive concept language, many of the prevalent systems are descended from kl-one [BS85]. They are generally made of two distinguishable components.
Reference: [Pla76] <author> David Plaisted. </author> <title> Theorem Proving and Semantic Trees. </title> <type> PhD thesis, </type> <institution> Stanford Univer--sity, </institution> <year> 1976. </year>
Reference-contexts: Also, for all i &lt; n, M i and the complement of L i+1 unify. An unsatisfiable set of clauses where every clause is relevant is called minimum unsatisfiable. Lemma 3.2 <ref> [Pla76] </ref>. Given a minimum unsatisfiable set of clauses S, there exists an alternating path between any two clauses in S. 3 Note that the symbol c is a skolem constant| a skolem function of arity zero, introduced to replace the outermost existentially quantified variable in a quantifier prefix. 8 Proof.
Reference: [Pla88] <author> David A. Plaisted. </author> <title> Non-Horn clause logic programming without contrapositives. </title> <journal> J. Automated Reasoning, </journal> <volume> 4 </volume> <pages> 287-325, </pages> <year> 1988. </year>
Reference-contexts: We were also interested in the performance of some other theorem provers on these tests, and we ran these tests on otter [McC90], clin [LP92, Lee90] and sprfn <ref> [Pla88] </ref> as well. We compared their performance with those of the the concept languages based on reports in [HKNP92].
Reference: [PSMB + 91] <author> P. F. Patel-Schneider, D. L. McGuiness, R. J. Brachman, L. Alperin Resnick, and A. Borgida. </author> <title> The CLASSIC knowledge representation system: Guiding principles and implementational rational. </title> <journal> SIGART Bulletin, </journal> <volume> 2 </volume> <pages> 108-113, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Concept language Systems 1 <ref> [BH91, Mac91, PSMB + 91, Pet91, BS85] </ref> provide a means for representing knowledge using concepts and roles. Although there is no single definitive concept language, many of the prevalent systems are descended from kl-one [BS85]. They are generally made of two distinguishable components. <p> In fact [BH91] is a semantic-tableaux theorem prover for concept languages. Some provide extended expressivity [Mac91] but have reasoners that are 1 Also known as Terminological Knowledge Representation Systems or Description Logic Systems 1 incomplete for even decidable problems. Another kind <ref> [PSMB + 91] </ref> prefer to provide a small and compact language for which reasoning is for the most part complete and efficient. Concepts are used to represent classes of objects in some domain of interest. Roles represent binary relations between objects.
Reference: [Zha] <author> Hantao Zhang. </author> <booktitle> Personal Communication. </booktitle> <volume> 22 Hard Inferences Result of System Test (sec) back classic kris loom meson sbone clin-s 1 (a) 1 2 3 1 1 11 1 1 (c) 2 5 2680 5 6 56 8 2 (b) 32 11 1867 22 23 859 16 3 (a) 25 4 459 28 29 372 7 3 (c) 6035 706 | 666 | 9500 30 4 (b) | | 49 8y | | &gt;10000x y Inference not computed. </volume> <editor> x When inferences were aided by lemmas times dropped to 200s and 800s respectively. </editor> <title> Table 4: Hard Cases </title>
Reference-contexts: The ground clauses are tested for satisfiability using a very fast Davis-Putnam procedure developed by H Zhang <ref> [Zha] </ref>. The model finding algorithm starts with a domain of size one and proceeds on to the next size if the ground clause set is unsatisfiable, or stops with the model if it is satisfiable. We have developed some preprocessing techniques that makes our system efficient. <p> We view the finite-model finder to be made of two distinct parts| a clause translator and a propositional prover. The clause translator takes a set of first-order formulas and obtains a set of propositional clauses. The propositional clauses are then tested for satisfiability with a very fast Davis-Putnam procedure <ref> [Zha] </ref>. If it is known that the formulas that have models, have small models, then we can start at some domain size, say 1, transform the formulas and test them for satisfiability. <p> This is surprising to us, despite the fact that we are aware that examples to the contrary can systematically be constructed. The finite model-finder is essentially a simple clause translation algorithm that relies on a good ground satisfiability checker. The ground satisfiability checker being used presently is sato <ref> [Zha] </ref>. It is quite fast in general. However, on occasion it is very slow.
References-found: 23

