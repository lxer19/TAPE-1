URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/96-06.ps.Z
Refering-URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/README.html
Root-URL: 
Email: fgolla-s, azhangg@cs.buffalo.edu  
Title: NetMedia: A Client-Server Distributed Multimedia Database Environment  
Author: Sreenivas Gollapudi and Aidong Zhang 
Address: Buffalo, NY 14260  
Affiliation: Department of Computer Science State University of New York at Buffalo  
Abstract: Advances in multimedia computing technologies offer new approaches to support on-line accesses to information from a variety of sources such as video clips, audio, images, and books. A client-server distributed multimedia system would be a practical approach to support such functionalities. In this paper, we present the design and implementation of a client-server distributed multimedia database environment that can be used to support large digital libraries. System architecture and design are described. Server functionalities, including client scheduling, data buffering and admission control, are investigated. A client request can only be admitted if both the quality-of-service (QoS) requirements from the client and the upper bound on total buffer consumption at the server are maintained. 
Abstract-found: 1
Intro-found: 1
Reference: [All83] <author> James F. Allen. </author> <title> Maintaining Knowledge about Temporal Intervals. </title> <journal> Communications of ACM, </journal> <volume> 26(11), </volume> <year> 1983. </year>
Reference-contexts: It may, for example, be necessary to display two distinct slide objects jointly within a single slide presentation stream. In general, the temporal relationship between two atomic objects in a single stream may conform to any of the thirteen temporal relationships described in <ref> [All83] </ref>. In our representation, each atomic object is associated with a relative start time and a time interval which specifies the duration of its retrieval, with the initial atomic objects in the media stream assumed to start at time zero.
Reference: [GC92] <author> Jim Gemmell and Stavros Christodoulakis. </author> <title> Principles of delay-sensitive multimedia data storage and retrieval. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(1) </volume> <pages> 51-90, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: In fact, it can be shown that the maximum number of client requests can be serviced simultaneously by the server when the amount of data retrieved for each client is proportional to the consumption rate of the client <ref> [GC92, LD93, HGP94] </ref>. 4.1 Scheduling Multiple Clients Consider a distributed multimedia server servicing n client requests simultaneously (say R 1 ; R 2 ; : : : R n , respectively).
Reference: [GDN95] <author> G.Neufeld, D.Makaroff, and N.Hutchinson. </author> <title> The Design of a Variable Bit Rate Continuous Media Server. </title> <type> Technical Report TR-95-06, </type> <institution> Dept. of Computer Science, University of British Columbia, Vancouver, Canada, </institution> <month> March </month> <year> 1995. </year> <month> 16 </month>
Reference-contexts: The minimum number of segments retrieved in a round can be calculated by uniformly spacing the segments across the disk thereby maximizing the seek times <ref> [GDN95] </ref>. Calculation of m proceeds as follows. Let R = fR 1 ; : : :; R n g denote the set of current requests being serviced. Each request R i has a maximum seek time l max i calculated as described in Section 4.1.
Reference: [GZ96] <author> Sreenivas Gollapudi and Aidong Zhang. </author> <title> Buffer Management in Multimedia Database Systems. </title> <booktitle> In the Third IEEE International Conference on Multimedia Computing and Systems (ICMCS'96), </booktitle> <address> Hiroshima, Japan, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: A buffer model that is the basis for buffer management at the client and server sites is presented in the next section. Figure 3 shows the logical layout of clients. Both scheduling and buffer management at the client site will not be discussed in this paper <ref> [GZ96, ZG95a] </ref>. 3 System Design In this section, we will introduce the system and data models that will be used in the rest of the paper. <p> In a different study <ref> [GZ96] </ref>, the authors have shown the advantage of buffer sharing over the simple buffer management strategy shown above. A full analysis of buffer sharing would involve finding the maximum buffer requirement applicable to all the segments presented in an interval. From the result obtained in [GZ96], we have Corollary 1 The <p> In a different study <ref> [GZ96] </ref>, the authors have shown the advantage of buffer sharing over the simple buffer management strategy shown above. A full analysis of buffer sharing would involve finding the maximum buffer requirement applicable to all the segments presented in an interval. From the result obtained in [GZ96], we have Corollary 1 The maximum buffer requirement over all the segments in interval [a; b] occurs at a time when at least one of the segments attains its maximum buffer requirement in that interval and is given by B shar = maxf n j=1 B i j (t kl
Reference: [HGP94] <author> H.M.Vin, A. Goyal, and P.Goyal. </author> <title> Algorithms for Designing Multimedia Servers. </title> <booktitle> In First IEEE Intl. Conf. Multimedia Computing and Systems (ICMCS'94), </booktitle> <pages> pages 234-243, </pages> <address> Boston, </address> <year> 1994. </year>
Reference-contexts: In fact, it can be shown that the maximum number of client requests can be serviced simultaneously by the server when the amount of data retrieved for each client is proportional to the consumption rate of the client <ref> [GC92, LD93, HGP94] </ref>. 4.1 Scheduling Multiple Clients Consider a distributed multimedia server servicing n client requests simultaneously (say R 1 ; R 2 ; : : : R n , respectively). <p> The service time of the server is divided into fixed size of intervals. Each interval is then dynamically divided into n rounds, assuming that there are currently n client requests. The server services all current n requests in terms of periodic rounds <ref> [HGP94] </ref>, retrieving a fraction of the segments for each client request in each round. Thus, interval I l consists of round l j ; j = 1; : : : ; n: The number of segments to be retrieved in 10 each round can be calculated as follows. <p> Due to difference in compression techniques of media data and differences in relative placement of segments on the disk, the actual time t ik taken to retrieve N i segments in round ik could be different in any two rounds. Vin and co-workers <ref> [HGP94] </ref> define overflow and underflow rounds if t ik &gt; d and t ik &lt; d respectively. In an underflow round, the server can read more segments into the buffer so long as the duration of the round does not exceed d. <p> A multimedia server can organize the storage of media data from the disk in terms of fixed size media blocks <ref> [HGP94] </ref> that correspond to the media segments. Thus, the buffer can be segmented into slots to hold the media blocks. Without loss of generality, let us assume that the size of media segments is equal to the size of a buffer slot. <p> Note that delaying the retrieval to the next round does not necessarily result in a discontinuity in the playback for client request R i depending on the amount of read-ahead N A ik , which determines the number of segments read from the disk prior to playback initiation <ref> [HGP94] </ref>.
Reference: [LD93] <author> P. Lougher and D.Shepard. </author> <title> The Design of a Storage Server for Continuous Media. </title> <journal> The Computer Journal, </journal> <volume> 36(1) </volume> <pages> 32-42, </pages> <year> 1993. </year>
Reference-contexts: The multimedia server, henceforth referred as the server, sits on top of a file or database system. The server is an event driven process that uses a time-ordered prioritized query queue to service requests. Figure 2 shows the organization of the server. The server is client-driven <ref> [LD93] </ref>, that is, all data transmitted from the server to the client is explicitly requested. It is the job of the server to guarantee sufficient bandwidth. The clients have to read data at the same rate as the transfer rate to minimize the buffer requirements at the client. <p> In fact, it can be shown that the maximum number of client requests can be serviced simultaneously by the server when the amount of data retrieved for each client is proportional to the consumption rate of the client <ref> [GC92, LD93, HGP94] </ref>. 4.1 Scheduling Multiple Clients Consider a distributed multimedia server servicing n client requests simultaneously (say R 1 ; R 2 ; : : : R n , respectively).
Reference: [LG90] <author> Thomas D.C. Little and Arif Ghafoor. </author> <title> Network Considerations for Distributed Multimedia Object Composition and Communication. </title> <journal> IEEE Network Magazine, </journal> <pages> pages 32-49, </pages> <year> 1990. </year>
Reference-contexts: We use &lt; o; t; 4t &gt; to denote that object o is to be delivered at time t and will last time period 4t. 3.2 QoS Specification Little and Ghafoor <ref> [LG90] </ref> have proposed several parameters to measure the QoS for multimedia data presentation. The following parameters have been listed: (1) average delay, (2) speed ratio, (3) utilization, (4) jitter, and (5) skew. The average delay is the average presentation delay of each object in a time interval.
Reference: [NY94] <author> R. T. Ng and J. Yang. </author> <title> Maximizing Buffer and Disk Utlilizations for News On-Demand. </title> <booktitle> In Proceedings of the 20th VLDB Conference, </booktitle> <pages> pages 451-462, </pages> <address> Santiago, Chile, </address> <year> 1994. </year>
Reference-contexts: For a detailed analysis of buffer consumption with streams with identical consumption rates, the reader is referred to <ref> [NY94] </ref>.
Reference: [TK95] <author> Heiko Thimm and Wolfgang Klas. </author> <title> Playout Management An Integrated Service of a Multimedia Database Management System, 1995. </title> <type> (Technical Report, </type> <institution> GMD-IPSI). </institution>
Reference-contexts: The main function of each client at a workstation is to display multiple media data to the user in the specified format. Such an architecture can provide adequate database support for multimedia applications demanding script-based interactive multimedia presentations <ref> [TK95] </ref>. 2 As shown in Figure 1, the distributed multimedia database management system contains two main modules: a multimedia task language (MTL) interpreter and a media manager (MM).
Reference: [ZG95a] <author> Aidong Zhang and Sreenivas Gollapudi. </author> <title> Multimedia Transaction Management in Database Systems. </title> <type> Technical Report CS-TR-95-44, </type> <institution> State University of New York at Buffalo, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: A buffer model that is the basis for buffer management at the client and server sites is presented in the next section. Figure 3 shows the logical layout of clients. Both scheduling and buffer management at the client site will not be discussed in this paper <ref> [GZ96, ZG95a] </ref>. 3 System Design In this section, we will introduce the system and data models that will be used in the rest of the paper.
Reference: [ZG95b] <author> Aidong Zhang and Sreenivas Gollapudi. </author> <title> QoS Management in Educational Digital Library Environments. </title> <type> Technical Report CS-TR-95-53, </type> <institution> State University of New York at Buffalo, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: There must be trade-offs among different QoS pa-rameters. Different application domains may have different QoS requirements. The specific QoS requirements for the domain of education or training in educational digital libraries were discussed in <ref> [ZG95b] </ref>. We will not discuss here the QoS specification for specific application domains. We assume that maximum allowable delays for individual media streams are pre-specified. These measures provide the permissible ranges for average delay and speed ratio.
References-found: 11

