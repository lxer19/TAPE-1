URL: ftp://ftp.cs.rutgers.edu/pub/allender/ipl.ps.Z
Refering-URL: http://www.cs.rutgers.edu/~allender/publications/
Root-URL: http://www.cs.rutgers.edu
Title: Rudimentary reductions revisited  
Author: Eric Allender Vivek Gore 
Date: April 23, 1997  
Address: New Brunswick, NJ 08903  New Brunswick, NJ 08903  
Affiliation: Department of Computer Science Rutgers University  Department of Computer Science Rutgers University  
Abstract: We show that log-bounded rudimentary reductions (defined and studied by Jones in 1975) characterize Dlogtime-uniform AC 0 . 
Abstract-found: 1
Intro-found: 1
Reference: [Ajt83] <author> M. Ajtai. </author> <title> P 1 1 -formulae on finite structures. </title> <note> Annals of Pure and Applied Logic 24 (1983) 1-48. </note>
Reference-contexts: He mentions on more than one occasion the question of whether or not RUD S = DSPACE (S (n)), and he explicitly considers the possibility that RUD log = NSPACE (log n) ([Jon75], Theorem 23). However, the results of <ref> [Ajt83] </ref> and [FSS84] refute this possibility by showing that PARITY is in NSPACE (log n) AC 0 .
Reference: [BIS90] <author> D. A. Mix Barrington, N. Immerman, and H. Straubing. </author> <note> On uniformity within N C 1 . Journal of Computer and System Sciences 41 (1990) 274-306. </note>
Reference-contexts: Competing definitions of "uniform AC 0 " were proposed by Immerman [Imm87, Imm89] and Buss [Bus87]. Then it was shown by Barrington, Immerman, and Straubing, that these definitions in fact coincide <ref> [BIS90] </ref>; they show that Dlogtime-uniform AC 0 may be defined alternatively in terms of first-order logic, O (1) time on a CRAM, inductive definitions with O (1) inductive depth, and Sipser's log-time hierarchy [Sip83]. Other characterizations of Dlogtime-uniform AC 0 are found in [Clo90]. <p> In Section 3, we show that RUD log = AC 0 . The proofs in this paper will not make use of the circuit formalism; thus detailed definitions of the Dlogtime-uniformity conditions are omitted here. (They may be found in <ref> [BIS90, BCGR90] </ref>.) Instead, we will use two characterizations of AC 0 that were shown to be equivalent in [BIS90] (see also [BCGR90]), one in terms of alternating Turing machines, and one in terms of first-order logic. <p> The proofs in this paper will not make use of the circuit formalism; thus detailed definitions of the Dlogtime-uniformity conditions are omitted here. (They may be found in [BIS90, BCGR90].) Instead, we will use two characterizations of AC 0 that were shown to be equivalent in <ref> [BIS90] </ref> (see also [BCGR90]), one in terms of alternating Turing machines, and one in terms of first-order logic. <p> This convention is necessary to allow machines with sublinear running times to have access to all of the input. Consult <ref> [BIS90, BCGR90] </ref> for examples illustrating how these machines compute. <p> Immerman [Imm87, Imm89] has studied the expressive power of first-order logic in defining languages; he calls the resulting class F O. Due to space limitations, we refer the reader to [Imm87, Imm89] for the relevant definitions. Theorem 3 <ref> [BIS90] </ref> AC 0 = LH = F O. Two minor complications arise from the statement of Theorem 3: 1. Alternating Turing machines can accept input over any alphabet , whereas F O and AC 0 are classes of languages over the alphabet f0; 1g. <p> Then we say that f is in LH (or F O) if A f is in LH 1 That is, there is some polynomial p such that for all x; jf (x)j p (jxj). 3 (or F O). It has been noticed by many authors (e.g., <ref> [BIS90] </ref>) that f is computed by AC 0 circuits iff A f 2 AC 0 . 2 Note that the composition of two functions in AC 0 is also a function in AC 0 . 3 Equivalence of AC 0 Theorem 4 AC 0 = RUD log . <p> Thus Jones was probably the first to study this complexity class, which has loomed large in importance in recent years. We believe that this augments the (already compelling) arguments of <ref> [BIS90] </ref> in favor of using the Dlogtime-uniformity condition when studying small circuit complexity classes. It is instructive to note some of the open questions posed by Jones in [Jon75].
Reference: [Bus87] <author> S. R. Buss. </author> <title> The Boolean formula value problem is in ALOGTIME. </title> <booktitle> In Proc. 19th ACM Symposium on Theory of Computing, </booktitle> <year> 1987, </year> <pages> pp. 123-131. 8 </pages>
Reference-contexts: Competing definitions of "uniform AC 0 " were proposed by Immerman [Imm87, Imm89] and Buss <ref> [Bus87] </ref>. Then it was shown by Barrington, Immerman, and Straubing, that these definitions in fact coincide [BIS90]; they show that Dlogtime-uniform AC 0 may be defined alternatively in terms of first-order logic, O (1) time on a CRAM, inductive definitions with O (1) inductive depth, and Sipser's log-time hierarchy [Sip83]. <p> It was observed in <ref> [Bus87] </ref> that this can be done in logarithmic time.
Reference: [BCGR90] <author> S. Buss, S. Cook, A. Gupta, and V. Ramachandran. </author> <title> An optimal parallel algorithm for formula evaluation. </title> <note> Submitted, </note> <year> 1990. </year>
Reference-contexts: In Section 3, we show that RUD log = AC 0 . The proofs in this paper will not make use of the circuit formalism; thus detailed definitions of the Dlogtime-uniformity conditions are omitted here. (They may be found in <ref> [BIS90, BCGR90] </ref>.) Instead, we will use two characterizations of AC 0 that were shown to be equivalent in [BIS90] (see also [BCGR90]), one in terms of alternating Turing machines, and one in terms of first-order logic. <p> The proofs in this paper will not make use of the circuit formalism; thus detailed definitions of the Dlogtime-uniformity conditions are omitted here. (They may be found in [BIS90, BCGR90].) Instead, we will use two characterizations of AC 0 that were shown to be equivalent in [BIS90] (see also <ref> [BCGR90] </ref>), one in terms of alternating Turing machines, and one in terms of first-order logic. <p> This convention is necessary to allow machines with sublinear running times to have access to all of the input. Consult <ref> [BIS90, BCGR90] </ref> for examples illustrating how these machines compute.
Reference: [Clo90] <author> P. Clote. </author> <title> Bounded arithmetic and computational complexity. </title> <booktitle> In Proc. 5th Structure in Complexity Theory Conference, </booktitle> <year> 1990, </year> <pages> pp. 186-199. </pages>
Reference-contexts: Other characterizations of Dlogtime-uniform AC 0 are found in <ref> [Clo90] </ref>. Since some of these notions were defined entirely independently of each other and independently of considerations of uniform circuit complexity, the fact that these notions coincide is taken as evidence for the "correctness" of the Dlogtime-uniformity condition when choosing a definition of uniform AC 0 .
Reference: [FSS84] <author> M. Furst, J. Saxe, and M. Sipser. </author> <title> Parity, circuits and the polynomial time hierarchy. </title> <note> Mathematical Systems Theory 17 (1984) 13-27. </note>
Reference-contexts: He mentions on more than one occasion the question of whether or not RUD S = DSPACE (S (n)), and he explicitly considers the possibility that RUD log = NSPACE (log n) ([Jon75], Theorem 23). However, the results of [Ajt83] and <ref> [FSS84] </ref> refute this possibility by showing that PARITY is in NSPACE (log n) AC 0 .
Reference: [H-as87] <author> J. H-astad. </author> <title> Computational limitations for small depth circuits. </title> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1987. </year>
Reference-contexts: However, the results of [Ajt83] and [FSS84] refute this possibility by showing that PARITY is in NSPACE (log n) AC 0 . The strongest results along this line are those of <ref> [H-as87] </ref> and [Yao85], showing that for any function S such that for all *, S (n) = o (n * ), the PARITY language is in DSPACE (1) RUD S . (Here, DSPACE (1) denotes the class of regular sets.) However, any generalization of this result for larger functions S will
Reference: [Imm87] <author> N. Immerman. </author> <title> Expressibility as a complexity measure: Results and directions. </title> <booktitle> In Proc. 2nd Structure in Complexity Theory Conference, </booktitle> <year> 1987, </year> <pages> pp. 194-202. </pages>
Reference-contexts: Competing definitions of "uniform AC 0 " were proposed by Immerman <ref> [Imm87, Imm89] </ref> and Buss [Bus87]. <p> Let LH (the logtime hierarchy of [Sip83]) denote S k k time (log n). Immerman <ref> [Imm87, Imm89] </ref> has studied the expressive power of first-order logic in defining languages; he calls the resulting class F O. Due to space limitations, we refer the reader to [Imm87, Imm89] for the relevant definitions. Theorem 3 [BIS90] AC 0 = LH = F O. <p> Let LH (the logtime hierarchy of [Sip83]) denote S k k time (log n). Immerman <ref> [Imm87, Imm89] </ref> has studied the expressive power of first-order logic in defining languages; he calls the resulting class F O. Due to space limitations, we refer the reader to [Imm87, Imm89] for the relevant definitions. Theorem 3 [BIS90] AC 0 = LH = F O. Two minor complications arise from the statement of Theorem 3: 1.
Reference: [Imm89] <author> N. Immerman. </author> <title> Expressibility and parallel complexity. </title> <note> SIAM Journal on Computing 18 (1989) 625-638. </note>
Reference-contexts: Competing definitions of "uniform AC 0 " were proposed by Immerman <ref> [Imm87, Imm89] </ref> and Buss [Bus87]. <p> Let LH (the logtime hierarchy of [Sip83]) denote S k k time (log n). Immerman <ref> [Imm87, Imm89] </ref> has studied the expressive power of first-order logic in defining languages; he calls the resulting class F O. Due to space limitations, we refer the reader to [Imm87, Imm89] for the relevant definitions. Theorem 3 [BIS90] AC 0 = LH = F O. <p> Let LH (the logtime hierarchy of [Sip83]) denote S k k time (log n). Immerman <ref> [Imm87, Imm89] </ref> has studied the expressive power of first-order logic in defining languages; he calls the resulting class F O. Due to space limitations, we refer the reader to [Imm87, Imm89] for the relevant definitions. Theorem 3 [BIS90] AC 0 = LH = F O. Two minor complications arise from the statement of Theorem 3: 1.
Reference: [Jon75] <author> N. D. Jones. </author> <title> Space-bounded reducibility among combinatorial problems. </title> <note> Journal of Computer and System Sciences 11 (1975) 68-85. Corrigendum: Journal of Computer and System Sciences 15 (1977) 241. </note>
Reference-contexts: 1 Introduction In the first part of the oft-cited paper <ref> [Jon75] </ref>, Jones introduced logspace reductions as a tool for studying the relative complexity of problems in P. In the second part of [Jon75], Jones introduced a restricted version of logspace reducibility, called log-bounded rudimentary reductions. <p> 1 Introduction In the first part of the oft-cited paper <ref> [Jon75] </ref>, Jones introduced logspace reductions as a tool for studying the relative complexity of problems in P. In the second part of [Jon75], Jones introduced a restricted version of logspace reducibility, called log-bounded rudimentary reductions. <p> In <ref> [Jon75] </ref>, Jones went on to show that a number of problems were complete for various complexity classes under log-bounded rudimentary reductions. <p> add to this body of evidence by showing that Jones' logspace rudimentary reductions provide yet another characterization of Dlogtime-uniform AC 0 . (Throughout the rest of this paper, all references to AC 0 will denote Dlogtime-uniform AC 0 .) 2 Preliminaries Definition 1 The following definitions are due to Jones <ref> [Jon75] </ref>. * Let be an alphabet. <p> See <ref> [Jon75] </ref> for a complete definition. Definition 2 A function f : fl ! fl is S ()-bounded rudimentary iff the predicate R defined by R (x; i; a) , (f (x); i; a) is in RUD S . <p> These alternative definitions are easily seen to be equivalent. For more formal arguments along these lines, see [Wra78]. In this paper (as in <ref> [Jon75] </ref>) we are interested primarily in RUD log , the class obtained when the space bound S () is logarithmic. In Section 3, we show that RUD log = AC 0 . <p> To resolve this difficulty, we use a standard technique that has been used since at least <ref> [Jon75] </ref>. For a function f with polynomial growth rate 1 , let A f (c; i; z) = the i th symbol of f (z) is c. <p> The constant 1 is explicitly definable in RUD log , and Jones <ref> [Jon75] </ref> has already observed that the relations u + v = w; u v = w; u v = w and juj = w are all in RUD log , so long as u; v; w are constrained to have length c log (jxj) for some c. <p> That is, the length of f (x) should be equal to a polynomial in jxj, and not just bounded by one. In <ref> [Jon75] </ref>, Jones comments that this final restriction is stronger than the more natural restriction of simply having f have polynomial growth rate, but explains that it "seems to be necessary" in order to have the rud log relation be transitive (i.e., in order for the composition of two log-bounded rudimentary functions <p> Since the composition of two functions in LH is easily seen to be in LH, it follows that Jones' rationale for imposing the stronger length requirement was unfounded. 5 Conclusion We have considered the log-bounded rudimentary predicates defined by Jones in <ref> [Jon75] </ref> and we have shown that they correspond exactly to the class of sets accepted by Dlogtime-uniform AC 0 circuits. Thus Jones was probably the first to study this complexity class, which has loomed large in importance in recent years. <p> We believe that this augments the (already compelling) arguments of [BIS90] in favor of using the Dlogtime-uniformity condition when studying small circuit complexity classes. It is instructive to note some of the open questions posed by Jones in <ref> [Jon75] </ref>. He mentions on more than one occasion the question of whether or not RUD S = DSPACE (S (n)), and he explicitly considers the possibility that RUD log = NSPACE (log n) ([Jon75], Theorem 23).
Reference: [Nep70] <author> V.A. Nepomnjasci. </author> <title> Rudimentary predicates and Turing calculations. </title> <journal> Soviet Math. Dokl. </journal> <month> 11 </month> <year> (1970) </year> <month> 1462-1465. </month>
Reference-contexts: ), the PARITY language is in DSPACE (1) RUD S . (Here, DSPACE (1) denotes the class of regular sets.) However, any generalization of this result for larger functions S will require entirely different techniques and will have to take uniformity into account in some way, since the techniques of <ref> [Nep70] </ref> (see also [Vol84]) show that for each * &gt; 0, NSPACE (log n) RUD n * , and it follows from [Wra78] that RUD n * contains complete sets for each level of the polynomial hierarchy.
Reference: [PD80] <author> J.B. Paris and C. Dimitracopoulos. </author> <title> Truth definitions for 0 formulae. </title> <booktitle> In Logic and Algorithmic: an International Symposium Held in Honour of Ernst Specker, Monographie no. </booktitle> <address> 30 de l'Enseignement Mathematique, </address> <year> 1980, </year> <pages> pp. 317-329. </pages>
Reference-contexts: introducing this restriction came from (1) the desire to have a tool for talking about the structure of very small complexity classes such as DSPACE (log n), and (2) interest in generalizing the notion of "rudimentary relations," which at that time was the object of a considerable amount of attention <ref> [Smu61, Sal73, Wra78, Wil79, PD80] </ref>. In [Jon75], Jones went on to show that a number of problems were complete for various complexity classes under log-bounded rudimentary reductions.
Reference: [Ruz81] <author> W.L. Ruzzo. </author> <title> On uniform circuit complexity. </title> <note> Journal of Computer and System Sciences 21 (1981) 365-383. </note>
Reference-contexts: We use the model of alternating Turing machine used by Ruzzo <ref> [Ruz81] </ref> in which access to the input is provided via a special tape which we call the input address tape onto which an address i may be written in binary, following which in unit time the i th input symbol is available.
Reference: [Sal73] <author> A. Salomaa. </author> <title> Formal Languages. </title> <publisher> Academic Press, </publisher> <year> 1973. </year>
Reference-contexts: introducing this restriction came from (1) the desire to have a tool for talking about the structure of very small complexity classes such as DSPACE (log n), and (2) interest in generalizing the notion of "rudimentary relations," which at that time was the object of a considerable amount of attention <ref> [Smu61, Sal73, Wra78, Wil79, PD80] </ref>. In [Jon75], Jones went on to show that a number of problems were complete for various complexity classes under log-bounded rudimentary reductions.
Reference: [Sip83] <author> M. Sipser. </author> <title> Borel sets and circuit complexity. </title> <booktitle> In Proc. 15th ACM Symposium on Theory of Computing, </booktitle> <year> 1983, </year> <pages> pp. 61-69. </pages>
Reference-contexts: Then it was shown by Barrington, Immerman, and Straubing, that these definitions in fact coincide [BIS90]; they show that Dlogtime-uniform AC 0 may be defined alternatively in terms of first-order logic, O (1) time on a CRAM, inductive definitions with O (1) inductive depth, and Sipser's log-time hierarchy <ref> [Sip83] </ref>. Other characterizations of Dlogtime-uniform AC 0 are found in [Clo90]. <p> Now let k time (log n) denote the class of languages accepted by alternating Turing machines running in O (log n) time, beginning in an existential configuration, and making at most k1 alternations between existential and universal configurations on any computation path. Let LH (the logtime hierarchy of <ref> [Sip83] </ref>) denote S k k time (log n). Immerman [Imm87, Imm89] has studied the expressive power of first-order logic in defining languages; he calls the resulting class F O. Due to space limitations, we refer the reader to [Imm87, Imm89] for the relevant definitions.
Reference: [Smu61] <author> R. </author> <title> Smullyan. </title> <journal> Theory of formal systems. In Annals of Math. </journal> <volume> Studies 47. </volume> <publisher> Princeton University Press, </publisher> <year> 1961. </year>
Reference-contexts: introducing this restriction came from (1) the desire to have a tool for talking about the structure of very small complexity classes such as DSPACE (log n), and (2) interest in generalizing the notion of "rudimentary relations," which at that time was the object of a considerable amount of attention <ref> [Smu61, Sal73, Wra78, Wil79, PD80] </ref>. In [Jon75], Jones went on to show that a number of problems were complete for various complexity classes under log-bounded rudimentary reductions.
Reference: [Vol84] <author> H. Volger. </author> <title> The role of rudimentary relations in complexity theory. Bulletin de la Societe Mathematique de France, </title> <booktitle> series 2, number 16 (1984) pp. </booktitle> <pages> 41-51. </pages>
Reference-contexts: Proof. () This containment is mentioned in Proposition 5 of <ref> [Vol84] </ref> (where the converse containment is left as an open question). We present a complete proof here. The proof proceeds by induction on the definition of RUD log , showing that each language in RUD log is in LH. <p> language is in DSPACE (1) RUD S . (Here, DSPACE (1) denotes the class of regular sets.) However, any generalization of this result for larger functions S will require entirely different techniques and will have to take uniformity into account in some way, since the techniques of [Nep70] (see also <ref> [Vol84] </ref>) show that for each * &gt; 0, NSPACE (log n) RUD n * , and it follows from [Wra78] that RUD n * contains complete sets for each level of the polynomial hierarchy.
Reference: [Wil79] <author> A. Wilkie. </author> <title> Applications of complexity theory to 0 -definability problems in arithmetic. </title> <booktitle> Lecture Notes in Mathematics vol. </booktitle> <volume> 834, </volume> <year> 1979, </year> <pages> pp. 363-369. </pages>
Reference-contexts: introducing this restriction came from (1) the desire to have a tool for talking about the structure of very small complexity classes such as DSPACE (log n), and (2) interest in generalizing the notion of "rudimentary relations," which at that time was the object of a considerable amount of attention <ref> [Smu61, Sal73, Wra78, Wil79, PD80] </ref>. In [Jon75], Jones went on to show that a number of problems were complete for various complexity classes under log-bounded rudimentary reductions.
Reference: [Wra78] <author> C. Wrathall. </author> <title> Rudimentary predicates and relative computation. </title> <note> SIAM Journal on Computing 7 (1978) 194-209. </note>
Reference-contexts: introducing this restriction came from (1) the desire to have a tool for talking about the structure of very small complexity classes such as DSPACE (log n), and (2) interest in generalizing the notion of "rudimentary relations," which at that time was the object of a considerable amount of attention <ref> [Smu61, Sal73, Wra78, Wil79, PD80] </ref>. In [Jon75], Jones went on to show that a number of problems were complete for various complexity classes under log-bounded rudimentary reductions. <p> These alternative definitions are easily seen to be equivalent. For more formal arguments along these lines, see <ref> [Wra78] </ref>. In this paper (as in [Jon75]) we are interested primarily in RUD log , the class obtained when the space bound S () is logarithmic. In Section 3, we show that RUD log = AC 0 . <p> This completes the proof. We remark that standard translational techniques may now be used to prove the following generalization of Theorem 4. Note that for the case of S (n) = n, this is the well-known theorem of Wrathall <ref> [Wra78] </ref>. <p> generalization of this result for larger functions S will require entirely different techniques and will have to take uniformity into account in some way, since the techniques of [Nep70] (see also [Vol84]) show that for each * &gt; 0, NSPACE (log n) RUD n * , and it follows from <ref> [Wra78] </ref> that RUD n * contains complete sets for each level of the polynomial hierarchy. Thus the question of whether or not RUD n * = DSPACE (n * ) remains an interesting open problem. (Note, however, that an affirmative answer would imply that the polynomial hierarchy is equal to PSPACE.)
Reference: [Yao85] <author> A. Yao. </author> <title> Separating the polynomial-time hierarchy by oracles. </title> <booktitle> In Proc. 26th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1985, </year> <pages> pp. 1-10. 9 </pages>
Reference-contexts: However, the results of [Ajt83] and [FSS84] refute this possibility by showing that PARITY is in NSPACE (log n) AC 0 . The strongest results along this line are those of [H-as87] and <ref> [Yao85] </ref>, showing that for any function S such that for all *, S (n) = o (n * ), the PARITY language is in DSPACE (1) RUD S . (Here, DSPACE (1) denotes the class of regular sets.) However, any generalization of this result for larger functions S will require entirely
References-found: 20

