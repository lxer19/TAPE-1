URL: http://www.cs.toronto.edu/~zilio/pub/cfgv1.ps
Refering-URL: http://www.cs.toronto.edu/~zilio/
Root-URL: 
Phone: 11/10/94,  
Title: Partitioning Key Selection for a Shared-Nothing Parallel Database System  
Author: Daniel C. Zilio Anant Jhingran Sriram Padmanabhan 
Date: Nov. 1994.  
Affiliation: IBM Research Division, T. J. Watson  Department of Computer Science, University of Toronto  IBM TJ Watson Research Center,  
Address: 19820 (87739)  Reaesrch Center, Yorktown Heights, NY,  Yorktown Heights, NY  
Note: Appears as IBM Research Report RC  
Abstract: A shared nothing database system which tries to leverage the knowledge of partitioning attributes of relations can outperform a system where such knowledge is either not available or not used. The performance improvements are typically obtained by function shipping more database operations (joins, aggregates etc.), thus minimizing the communication overhead. In such a system, it is critical that the correct partitioning keys are selected so that the query workload is optimized. Previous research has ignored the importance of selecting the partitioning keys and have mostly focused on the degree of declustering. In this study we show that by following a systematic methodology, especially for the partitioning key selection and associated relation grouping issues, the entire data placement strategy for a given database schema and workload can be determined in a very efficient manner. We describe different flavors of this methodology and demonstrate the performance improvements resulting from them. 
Abstract-found: 1
Intro-found: 1
Reference: [BZ93] <author> Chaitanya Baru and Daniel C. Zilio, </author> <title> "Data Reorganization in Parallel Database Systems", </title> <booktitle> IEEE Workshop on Advances in Parallel and Distributed Systems, </booktitle> <pages> pp. 102-107, </pages> <publisher> IEEE Computer Society, </publisher> <address> Princeton, NJ, </address> <month> Oct. </month> <year> 1993. </year>
Reference: [B+90] <author> H. Boral et al, </author> <title> "Prototyping Bubba, a highly parallel database system", </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> vol. 2, </volume> <pages> pp. 4-24, </pages> <month> Mar. </month> <year> 1990. </year>
Reference-contexts: Products announced from Teradata [FK92], IBM [DBPE94, Perna94], Tandem [CC93], Oracle [Linder93], Informix [Clay93], etc., as well as research projects such as Bubba <ref> [B+90] </ref> and GAMMA [D+90] all attest to this fact. Most parallel database systems require some form of Data Placement in order to partition the I/O and CPU workload among various processors thereby improving the response time and throughput of the workload.
Reference: [CABK88] <author> George Copeland, William Alexander, Ellen Boughter, and Tom Keller, </author> <title> "Data Placement in Bubba", </title> <booktitle> Proc. of the ACM SIGMOD Conf., </booktitle> <pages> pp. 99-108, </pages> <publisher> ACM Press, </publisher> <address> Chicago, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: Determine the degree of declustering for the grouped relations. 3. Determining the actual assignment for a group, i.e., the actual node numbers for the relations in the database. Past work has pointed out that data placement is necessary on the shared nothing systems <ref> [CABK88, GDa90, GDb90, D+90, LKB87, PB92, Padman92, MD94] </ref>. However, all the past work have focused on the declustering and assignment aspects of data placement and have paid minimal attention to the details of partition attribute selection. <p> However, all the past work have focused on the declustering and assignment aspects of data placement and have paid minimal attention to the details of partition attribute selection. Some of the past studies <ref> [CABK88, GDb90, Padman92] </ref>, have mentioned the importance of partition attributes but have not paid proper attention to the subject. In fact, they assume that the proper partitioning attributes have been chosen as a pre-requisite for their declustering and assignment steps. <p> The justification of separation of the declustering and assignment steps from other steps has been given in a lot of previous studies <ref> [CABK88, Padman92, PB92, GDa90, GDb90, Ghand90, MD94] </ref>. <p> The second is also not likely to occur since attributes with high skews are eliminated by the filtering step as partition key candidates. 4.1.4 Declustering and Assignment The declustering and assignment steps complete the data placement. We have based this step on ideas presented in past work <ref> [CABK88, MD94] </ref> with some extensions to the assignment phase. The main steps are: * Break the relations into subpartitions whose number is larger than the total number of nodes as in Ghandeharizadeh's hybrid-range partitioning method [GDb90]. <p> Full declustering of the large relations was found to achieve the best performance for queries using these relations. * For small relations, we use a variant of the Bubba assignment heuristic <ref> [CABK88] </ref>. The important variation in our method is that only the small relations are assigned in this step. The assignment details are described below. We use the cardinalities of the small relations as their weight.
Reference: [CC93] <author> L. Chambers and D. Cracknell, </author> <title> "Parallel Features of NonStop SQL", </title> <booktitle> Parallel and Distributed Information Systems Conf., </booktitle> <pages> pp. </pages> <publisher> 69-70 IEEE Computer Society, </publisher> <address> San Diego, </address> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: 1 Introduction It has been seen that in order to achieve the performance required for current and future decision support system (DSS) and on-line transaction processing (OLTP) applications, parallel database systems should be used [DG92]. Products announced from Teradata [FK92], IBM [DBPE94, Perna94], Tandem <ref> [CC93] </ref>, Oracle [Linder93], Informix [Clay93], etc., as well as research projects such as Bubba [B+90] and GAMMA [D+90] all attest to this fact.
Reference: [Clay93] <author> D. Clay, </author> <booktitle> "Informix Parallel Data Query" Parallel and Distributed Information Systems Conf., </booktitle> <pages> pp. 71-72, </pages> <publisher> IEEE Computer Society, </publisher> <address> San Diego, </address> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: 1 Introduction It has been seen that in order to achieve the performance required for current and future decision support system (DSS) and on-line transaction processing (OLTP) applications, parallel database systems should be used [DG92]. Products announced from Teradata [FK92], IBM [DBPE94, Perna94], Tandem [CC93], Oracle [Linder93], Informix <ref> [Clay93] </ref>, etc., as well as research projects such as Bubba [B+90] and GAMMA [D+90] all attest to this fact.
Reference: [DBPE94] <institution> Database Technology Group, "Database 2 AIX/6000 Parallel Technology", Technical brochure, IBM SWSD, North York, Canada, </institution> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: 1 Introduction It has been seen that in order to achieve the performance required for current and future decision support system (DSS) and on-line transaction processing (OLTP) applications, parallel database systems should be used [DG92]. Products announced from Teradata [FK92], IBM <ref> [DBPE94, Perna94] </ref>, Tandem [CC93], Oracle [Linder93], Informix [Clay93], etc., as well as research projects such as Bubba [B+90] and GAMMA [D+90] all attest to this fact. <p> In the case of database systems such as GAMMA [D+90], the only join strategy would be to repartition both t1 and t2 on a new set of nodes, and then perform the parallel join. In contrast, in a system such as DB2 Parallel Edition <ref> [DBPE94] </ref>, if t1 and t2 are partitioned on t1.a and t2.a respectively, then the entire communication cost of repartitioning both the relations can be avoided. In this paper we assume that the database software is able to optimize queries to use the database partitioning. <p> All relations in a group can consequently be joined without repartitioning (provided the joins are on their respective partitioning keys). By corollary, relations of a group have identical the degree of declustering and node assignments. DB2 Parallel Edition <ref> [DBPE94] </ref> provides such a flexibility using the concept of Node Groups. In addition, DB2 Parallel Edition can load balance different groups differently by using different mapping of partitioning key to node numbers.
Reference: [DG85] <author> David J. DeWitt and Robert Gerber, </author> <title> "Multiprocessor Hash-Based Join Algorithms", </title> <booktitle> Proc. of the Int. Conf. on VLDB, </booktitle> <pages> pp. 151-164, </pages> <publisher> Morgan-Kaufmann, </publisher> <address> Stockholm, </address> <month> Aug. </month> <year> 1985. </year>
Reference: [DG92] <author> David DeWitt and Jim Gray, </author> <title> "Parallel Database Systems: The Future of High Performance Database Systems", </title> <journal> Comm. of the ACM, </journal> <pages> pp. 85-98, </pages> <publisher> ACM Press, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction It has been seen that in order to achieve the performance required for current and future decision support system (DSS) and on-line transaction processing (OLTP) applications, parallel database systems should be used <ref> [DG92] </ref>. Products announced from Teradata [FK92], IBM [DBPE94, Perna94], Tandem [CC93], Oracle [Linder93], Informix [Clay93], etc., as well as research projects such as Bubba [B+90] and GAMMA [D+90] all attest to this fact. <p> Besides high capacity and complex query performance requirements, these applications also require scalability of both the data and the workload. It is 1 widely recognized that the Shared-Nothing database architecture is most suited for such require-ments <ref> [DG92] </ref>. By virtue of the underlying hardware, data must be partitioned and distributed across the different nodes in the system and a function shipping model of execution is required for query execution. <p> If they were not the partition keys, then this join would require repartitioning of one or both relations for the best case execution (e.g., hash-join algorithm <ref> [DG92] </ref>). Similarly, O ORDERKEY and L ORDERKEY choices would enable the join between Orders and Lineitem to be performed locally. Note, that there are now two partitioning candidates for the ORDERS relation, O CUSTKEY and O ORDERKEY. Choosing between the two is dependent on the importance of each join.
Reference: [D+90] <author> David J. DeWitt em et al, </author> <title> "The GAMMA database machine project", </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> vol. 2, </volume> <pages> pp. 44-62, </pages> <month> Mar. </month> <year> 1990. </year>
Reference-contexts: Products announced from Teradata [FK92], IBM [DBPE94, Perna94], Tandem [CC93], Oracle [Linder93], Informix [Clay93], etc., as well as research projects such as Bubba [B+90] and GAMMA <ref> [D+90] </ref> all attest to this fact. Most parallel database systems require some form of Data Placement in order to partition the I/O and CPU workload among various processors thereby improving the response time and throughput of the workload. <p> For example, consider the following query: "select * from t1, t2 where t1.a = t2.a". In the case of database systems such as GAMMA <ref> [D+90] </ref>, the only join strategy would be to repartition both t1 and t2 on a new set of nodes, and then perform the parallel join. <p> Determine the degree of declustering for the grouped relations. 3. Determining the actual assignment for a group, i.e., the actual node numbers for the relations in the database. Past work has pointed out that data placement is necessary on the shared nothing systems <ref> [CABK88, GDa90, GDb90, D+90, LKB87, PB92, Padman92, MD94] </ref>. However, all the past work have focused on the declustering and assignment aspects of data placement and have paid minimal attention to the details of partition attribute selection.
Reference: [DGGHKM86] <author> David J. DeWitt, Robert H. Gerber, Goetz Graefe, Michael L. Heytens, Krishna B. Kumar, and M. Muralikrishna, </author> <title> "GAMMA A High Performance Dataflow Database Machine", </title> <booktitle> Proc. of the Int. Conf. on VLDB, </booktitle> <pages> pp. 228-237, </pages> <publisher> Morgan-Kaufmann, </publisher> <address> Kyoto, </address> <month> Aug. </month> <year> 1986. </year>
Reference: [FK92] <author> Felipe Carino Jr. and Pekka Kostamaa, </author> <title> "Exegesis of DBC/1012 and P-90 Industrial Supercomputer Database Machines", </title> <booktitle> PARLE'92 Conf. Parallel Architectures and Languages Europe, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Paris, </address> <month> June </month> <year> 1992. </year> <month> 25 </month>
Reference-contexts: 1 Introduction It has been seen that in order to achieve the performance required for current and future decision support system (DSS) and on-line transaction processing (OLTP) applications, parallel database systems should be used [DG92]. Products announced from Teradata <ref> [FK92] </ref>, IBM [DBPE94, Perna94], Tandem [CC93], Oracle [Linder93], Informix [Clay93], etc., as well as research projects such as Bubba [B+90] and GAMMA [D+90] all attest to this fact.
Reference: [FM89] <author> Christos Faloutsos and Dimitrios Metaxas, </author> <title> "Declustering Using Error Correcting Codes", </title> <booktitle> Proc. of the ACM Symp. on Principles of Database Systems, </booktitle> <pages> pp. 253-258, </pages> <publisher> ACM Press, </publisher> <address> Philadel-phia, </address> <month> March </month> <year> 1989. </year>
Reference: [GDa90] <author> Shahram Ghandeharizadeh and David DeWitt, </author> <title> "A Multiuser Performance Analysis of Alternative Declustering Strategies", </title> <booktitle> IEEE Int. Conf. on Data Engineering, </booktitle> <pages> pp. 466-475, </pages> <publisher> IEEE Computer Society, </publisher> <address> Los Angeles, </address> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: Determine the degree of declustering for the grouped relations. 3. Determining the actual assignment for a group, i.e., the actual node numbers for the relations in the database. Past work has pointed out that data placement is necessary on the shared nothing systems <ref> [CABK88, GDa90, GDb90, D+90, LKB87, PB92, Padman92, MD94] </ref>. However, all the past work have focused on the declustering and assignment aspects of data placement and have paid minimal attention to the details of partition attribute selection. <p> The justification of separation of the declustering and assignment steps from other steps has been given in a lot of previous studies <ref> [CABK88, Padman92, PB92, GDa90, GDb90, Ghand90, MD94] </ref>.
Reference: [GDb90] <author> Shahram Ghandeharizadeh and David DeWitt, </author> <title> "Hybrid-Range Partitioning: A New Declustering Strategy for Multiprocessor Database Machines", </title> <booktitle> Proc. of the Int. Conf. on VLDB, </booktitle> <pages> pp. 481-492, </pages> <publisher> Morgan-Kaufmann, </publisher> <address> Brisbane, Australia, </address> <month> Aug. </month> <year> 1990 </year>
Reference-contexts: Determine the degree of declustering for the grouped relations. 3. Determining the actual assignment for a group, i.e., the actual node numbers for the relations in the database. Past work has pointed out that data placement is necessary on the shared nothing systems <ref> [CABK88, GDa90, GDb90, D+90, LKB87, PB92, Padman92, MD94] </ref>. However, all the past work have focused on the declustering and assignment aspects of data placement and have paid minimal attention to the details of partition attribute selection. <p> However, all the past work have focused on the declustering and assignment aspects of data placement and have paid minimal attention to the details of partition attribute selection. Some of the past studies <ref> [CABK88, GDb90, Padman92] </ref>, have mentioned the importance of partition attributes but have not paid proper attention to the subject. In fact, they assume that the proper partitioning attributes have been chosen as a pre-requisite for their declustering and assignment steps. <p> The justification of separation of the declustering and assignment steps from other steps has been given in a lot of previous studies <ref> [CABK88, Padman92, PB92, GDa90, GDb90, Ghand90, MD94] </ref>. <p> We have based this step on ideas presented in past work [CABK88, MD94] with some extensions to the assignment phase. The main steps are: * Break the relations into subpartitions whose number is larger than the total number of nodes as in Ghandeharizadeh's hybrid-range partitioning method <ref> [GDb90] </ref>. This excess in the number of subpartitions allows more flexibility in the assignment algorithm to balance data and loads across the partitions. The assignment algorithm will determine which subpartitions should be placed on which partitions.
Reference: [Ghand90] <author> Shahram Ghandeharizadeh, </author> <title> "Physical Database Design in Multiprocessor Database Systems", </title> <type> Tech. Report #964 (PhD Thesis), </type> <institution> Computer Sciences Dept., Univ. of Wisconsin-Madison, </institution> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: The justification of separation of the declustering and assignment steps from other steps has been given in a lot of previous studies <ref> [CABK88, Padman92, PB92, GDa90, GDb90, Ghand90, MD94] </ref>. <p> More than one attribute could be chosen as the partitioning attribute set for a relation. In the example, attributes G and H could both be partitioning attributes for Q, especially if some sort of multi-dimensional indexing like grid file and its extensions <ref> [Ghand90, NHS84] </ref> are used. Multi attribute partitioning keys often result in far lower data distribution skews and should be 13 considered if one attribute does not suffice.
Reference: [Ghand91] <author> Shahram Ghandeharizadeh, Luis Ramos, Zubair Asad, and Waheed Qureshi, </author> <title> "Object Placement in Parallel Hypermedia Systems", </title> <booktitle> Proc. of the Int. Conf. on VLDB, </booktitle> <pages> pp. 243-254, </pages> <publisher> Morgan-Kaufmann, </publisher> <address> Barcelona, </address> <month> Sept. </month> <year> 1991. </year>
Reference: [GJ78] <author> M.R. Garey and D.S. Johnson, </author> <title> "Computers and Intractability: A guide to the theory of NP-Completeness", W.H. </title> <publisher> Freeman and Co., </publisher> <year> 1978. </year>
Reference-contexts: The important variation in our method is that only the small relations are assigned in this step. The assignment details are described below. We use the cardinalities of the small relations as their weight. This step effectively performs a Bin Packing <ref> [GJ78] </ref> of the relations so that the data is well balanced. Both the declustering and assignment of the small relations are computed together. The algorithm will search for a placement such that the weight at each node is close to an average weight.
Reference: [Hsaio90] <author> Hui-I Hsaio, </author> <title> "Performance and Availability in Database Machines with Replicated Data", </title> <type> Tech. Report #963, </type> <institution> Computer Sciences Dept., University of Wisconsin-Madison, </institution> <month> Aug. </month> <year> 1990. </year>
Reference: [HL90] <author> Kien A. Hua and Chiang Lee, </author> <title> "An Adaptive Data Placement Scheme for Parallel Database Computer Systems", </title> <booktitle> Proc. of the Int. Conf. on VLDB, </booktitle> <pages> pp. 493-506, </pages> <publisher> Morgan-Kaufmann, </publisher> <address> Bris-bane, Australia, </address> <month> Aug. </month> <year> 1990. </year>
Reference: [KP88] <author> Myoung Ho Kim and Sakiti Pramanik, </author> <title> "Optimal File Distribution for Partial Match Retrieval", </title> <booktitle> Proc. of the ACM SIGMOD Conf., </booktitle> <pages> pp. 173-182, </pages> <publisher> ACM Press, </publisher> <address> Chicago, </address> <month> June </month> <year> 1988. </year>
Reference: [KS94] <author> Ralph Kimball and Kevin Strehlo, </author> <title> "Why Decision Support FAILS and How to FIX it", </title> <journal> Datamation, </journal> <pages> pp. </pages> <year> 1994, </year> <month> June </month> <year> 1994. </year>
Reference: [Linder93] <author> B. Linder, </author> <title> "Oracle Parallel RDBMS on Massively Parallel Systems", </title> <booktitle> Parallel and Distributed Information Systems Conf., </booktitle> <pages> pp. 67-68, </pages> <publisher> IEEE Computer Society, </publisher> <address> San Diego, </address> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: 1 Introduction It has been seen that in order to achieve the performance required for current and future decision support system (DSS) and on-line transaction processing (OLTP) applications, parallel database systems should be used [DG92]. Products announced from Teradata [FK92], IBM [DBPE94, Perna94], Tandem [CC93], Oracle <ref> [Linder93] </ref>, Informix [Clay93], etc., as well as research projects such as Bubba [B+90] and GAMMA [D+90] all attest to this fact.
Reference: [LS92] <author> Jianzhong Li and Jaideep Srivastava, "CMD: </author> <title> A Multidimensional Declustering Method for Parallel Database Systems", </title> <booktitle> Proc. of the Int. Conf. on VLDB, </booktitle> <publisher> Morgan-Kaufmann, </publisher> <address> Vancouver, </address> <month> Aug. </month> <year> 1992. </year>
Reference: [LKB87] <author> Miron Livny, Setrag Khoshafian, and Haran Boral, </author> <title> "Multi-Disk Management Algorithms", </title> <booktitle> Proc. of the ACM SIGMETRICS Conf., </booktitle> <pages> pp. 69-77, </pages> <publisher> ACM Press, </publisher> <month> May </month> <year> 1987. </year>
Reference-contexts: Determine the degree of declustering for the grouped relations. 3. Determining the actual assignment for a group, i.e., the actual node numbers for the relations in the database. Past work has pointed out that data placement is necessary on the shared nothing systems <ref> [CABK88, GDa90, GDb90, D+90, LKB87, PB92, Padman92, MD94] </ref>. However, all the past work have focused on the declustering and assignment aspects of data placement and have paid minimal attention to the details of partition attribute selection.
Reference: [MD94] <author> Manish Mehta and David J. DeWitt, </author> <title> "Data Placement in Shared-Nothing Parallel Database Systems", </title> <booktitle> Proc. of the ACM SIGMOD Conf., </booktitle> <pages> pp. </pages> ???, <publisher> ACM Press, </publisher> <address> Minneapolis, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Determine the degree of declustering for the grouped relations. 3. Determining the actual assignment for a group, i.e., the actual node numbers for the relations in the database. Past work has pointed out that data placement is necessary on the shared nothing systems <ref> [CABK88, GDa90, GDb90, D+90, LKB87, PB92, Padman92, MD94] </ref>. However, all the past work have focused on the declustering and assignment aspects of data placement and have paid minimal attention to the details of partition attribute selection. <p> The second algorithm, called Comb, considers different combinations of keys across relations (i.e. what happens when we choose t1.a and t2.b as partitioning keys) and combines it with the relation grouping step. Both the algorithms use a simple declustering and assignment methodology, similar to Mehta and De Witt's algorithms <ref> [MD94] </ref> as their final steps. The important focus in our algorithm is the partitioning attribute and grouping algorithms, so other declustering and assignment algorithms could generally replace the current ones in the future if required. The rest of the paper is structured as follows. <p> The justification of separation of the declustering and assignment steps from other steps has been given in a lot of previous studies <ref> [CABK88, Padman92, PB92, GDa90, GDb90, Ghand90, MD94] </ref>. <p> The second is also not likely to occur since attributes with high skews are eliminated by the filtering step as partition key candidates. 4.1.4 Declustering and Assignment The declustering and assignment steps complete the data placement. We have based this step on ideas presented in past work <ref> [CABK88, MD94] </ref> with some extensions to the assignment phase. The main steps are: * Break the relations into subpartitions whose number is larger than the total number of nodes as in Ghandeharizadeh's hybrid-range partitioning method [GDb90]. <p> The assignment algorithm will determine which subpartitions should be placed on which partitions. We use a simple assignment algorithm for the subpar-tition to partition mapping, e.g., round-robin assignment. 14 * Large relations are placed on all nodes of the system <ref> [MD94] </ref>. Typically, the system is configured for large relations, so placing them on all nodes is required for capacity as well as performance reasons.
Reference: [NHS84] <author> J. Nievergelt, H. Hinterberger, and K. C. Sevcik, </author> <title> "The Grid File: An Adaptable Symmetric Multikey File Structure", </title> <journal> ACM Trans. on Database Systems, </journal> <pages> pp. 38-71, </pages> <publisher> ACM Press, </publisher> <month> March </month> <year> 1984. </year> <month> 26 </month>
Reference-contexts: More than one attribute could be chosen as the partitioning attribute set for a relation. In the example, attributes G and H could both be partitioning attributes for Q, especially if some sort of multi-dimensional indexing like grid file and its extensions <ref> [Ghand90, NHS84] </ref> are used. Multi attribute partitioning keys often result in far lower data distribution skews and should be 13 considered if one attribute does not suffice.
Reference: [Padman92] <author> Sriram Padmanabhan, </author> <title> "Data Placement in Shared-Nothing Parallel Database Sys--tems", </title> <type> PhD Thesis, </type> <institution> EECS Dept., Univ. of Michigan-Ann Arbor, </institution> <year> 1992. </year>
Reference-contexts: It is this problem that we address in this paper: what is the correct choice of partitioning attributes (and the other associated data placement issues) so that the overall query workload is optimized? There are three aspects to data placement (and hence parallel database layout design) <ref> [Padman92] </ref>: 1. Choosing the partitioning attributes for the relations. Thus, in the examples above, we would like to determine whether to partition t1 on t1.a or t1.b. We would also like to group relations so that they share a "declustering strategy". <p> Determine the degree of declustering for the grouped relations. 3. Determining the actual assignment for a group, i.e., the actual node numbers for the relations in the database. Past work has pointed out that data placement is necessary on the shared nothing systems <ref> [CABK88, GDa90, GDb90, D+90, LKB87, PB92, Padman92, MD94] </ref>. However, all the past work have focused on the declustering and assignment aspects of data placement and have paid minimal attention to the details of partition attribute selection. <p> However, all the past work have focused on the declustering and assignment aspects of data placement and have paid minimal attention to the details of partition attribute selection. Some of the past studies <ref> [CABK88, GDb90, Padman92] </ref>, have mentioned the importance of partition attributes but have not paid proper attention to the subject. In fact, they assume that the proper partitioning attributes have been chosen as a pre-requisite for their declustering and assignment steps. <p> The justification of separation of the declustering and assignment steps from other steps has been given in a lot of previous studies <ref> [CABK88, Padman92, PB92, GDa90, GDb90, Ghand90, MD94] </ref>.
Reference: [PB92] <author> Sriram Padmanabhan and Chaitanya Baru, </author> <title> "Data Placement in Shared-Nothing Parallel Database Systems", </title> <booktitle> Conf. on Information and Knowledge Management, </booktitle> <pages> pp. 345-352, </pages> <address> Balti-more, </address> <year> 1992. </year>
Reference-contexts: Determine the degree of declustering for the grouped relations. 3. Determining the actual assignment for a group, i.e., the actual node numbers for the relations in the database. Past work has pointed out that data placement is necessary on the shared nothing systems <ref> [CABK88, GDa90, GDb90, D+90, LKB87, PB92, Padman92, MD94] </ref>. However, all the past work have focused on the declustering and assignment aspects of data placement and have paid minimal attention to the details of partition attribute selection. <p> The justification of separation of the declustering and assignment steps from other steps has been given in a lot of previous studies <ref> [CABK88, Padman92, PB92, GDa90, GDb90, Ghand90, MD94] </ref>.
Reference: [Perna94] <author> Janet Perna (editor), </author> <title> DB2 AIX/6000 Parallel Technology (Customer Information), </title> <institution> IBM Corporation, </institution> <year> 1994. </year>
Reference-contexts: 1 Introduction It has been seen that in order to achieve the performance required for current and future decision support system (DSS) and on-line transaction processing (OLTP) applications, parallel database systems should be used [DG92]. Products announced from Teradata [FK92], IBM <ref> [DBPE94, Perna94] </ref>, Tandem [CC93], Oracle [Linder93], Informix [Clay93], etc., as well as research projects such as Bubba [B+90] and GAMMA [D+90] all attest to this fact.
Reference: [Raab94] <author> Francois Raab (editor), </author> <title> TPC Benchmark D (Decision Support) Working Draft 6.5, Transaction Processing Council (TPC), </title> <month> Feb. </month> <year> 1994. </year>
Reference-contexts: Performance gains can be achieved when partitioning attributes are selected on the basis of their use in queries. An example of such a gain can be shown in the execution of a join operator which we will demonstrate using a query example from the evolving TPC-D <ref> [Raab94] </ref> industry standard benchmark. Figure 1 shows the schema of the relations involved in the query and the query description. The query performs joins on the Customers , Orders , and Lineitem relations. <p> The seek and rotational latency time for a new disk access is modeled as 16 ms and an average prefetch of 8 database pages is assumed. 5.2 Database and Workload Parameters We considered using the current specification of TPC-D benchmark <ref> [Raab94] </ref> as the basis of our database and workload specifications. However, the workload description of TPC-D simplifies the partition key selection of most tables to their respective primary keys and the relative merit of the Comb algorithm cannot be quantified.
Reference: [SD90] <author> D. Schneider and D. DeWitt, </author> <title> "Tradeoffs in processing complex join queries via hashing in multiprocessor database machines", </title> <booktitle> Proceedings of the 16th Intl. VLDB Conf., </booktitle> <address> Brisbane, Australia, </address> <year> 1990. </year>
Reference-contexts: The Select phase had a fixed selectivity of 0.1 for each relation, while the Joins had varying selectivity parameters. Projections are performed at the earliest possible level of the execution plan. The joins are modeled as Hash-based join algorithms <ref> [SD90] </ref> consisting of a Build phase and a Probe phase. The relations involved in the join may require Redistribution phases prior to the actual join. The cost of the Select and Join operators are estimated using the cost parameters described in Table 4.
Reference: [SG84] <author> Kenneth Salem and Hector Garcia-Molina, </author> <title> "Disk Striping", </title> <type> Tech. Report EECS-TR-332-84, </type> <institution> Dept. of Computer Science, Princeton University, </institution> <month> Dec. </month> <year> 1984. </year>
Reference: [TPCA91] <author> Transaction Processing Council, </author> <title> TPC Benchmark A Standard Specification, </title> <month> Sept. </month> <year> 1991. </year>
Reference: [WZS91] <author> Gerhard Weikum, Peter Zabback, and Peter Scheuermann, </author> <title> "Dynamic File Allocation in Disk Arrays", </title> <booktitle> Proc. of the ACM SIGMOD Conf., </booktitle> <pages> pp. 406-415, </pages> <publisher> ACM Press, </publisher> <address> Denver, </address> <month> May </month> <year> 1991. </year> <month> 27 </month>
References-found: 34

