URL: ftp://ftp.cse.ogi.edu/pub/tech-reports/1995/95-010.ps.gz
Refering-URL: http://www.cse.ogi.edu/~walpole/publications.html
Root-URL: http://www.cse.ogi.edu
Email: (jinouye,walpole,zhang@cse.ogi.edu)  
Title: Fast Byte Copying: A Re-Evaluation of the Opportunities for Optimization  
Author: Jon Inouye Jonathan Walpole Ke Zhang 
Date: June 1995  
Affiliation: Department of Computer Science and Engineering Oregon Graduate Institute of Science Technology  
Pubnum: Technical Report CSE-95-010  
Abstract: High-performance byte copying is important for many operating systems because it is the principle method used for transferring data between kernel and user protection domains. For example, byte copying is commonly used for transferring data from kernel buffers to user buffers during file system read and IPC recv calls and to kernel buffers from user buffers during write and send calls. Because of its impact on overall system performance, commercial operating systems tend to employ many specialized byte copy routines, each one optimized for a different circumstance. This paper revisits the opportunities for optimizing byte copy performance by discussing a series of experiments run under HP-UX 9.03 on a range of Hewlett-Packard PA-RISC processors. First, we compare the performance improvements that result from several existing byte copy optimizations. Then we show that byte copy performance is dominated by cache effects that arise when source and target addresses overlap. Finally, we discuss the opportunities and difficulties associated with choosing appropriate source and target addresses to optimize byte copy performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Vadim Abrossimov, Marc Rozier, and Marc Shapiro. </author> <title> Generic Virtual Memory Management for Operating System Kernels. </title> <booktitle> In Proceedings of the 12th ACM Symposium on Operating Systems Principles, </booktitle> <month> December 3-6 </month> <year> 1989. </year> <note> Also published as technical report CS/TR-89-18. </note>
Reference-contexts: Accent used copy-on-write memory for high-performance local IPC [6]. Many contemporary virtual memory designs support the notion of copy-on-write or copy-on-reference memory to support both local bulk data movement and efficient copying of address spaces using virtual memory (VM) techniques that manipulate the TLB and VM data structures <ref> [16, 1, 10] </ref>. VM techniques cannot be used in all cases, such as when the data being copied is smaller than a page or not page-aligned with the user's buffer address. This limits the number of cases where read can benefit from COW techniques.
Reference: [2] <author> Andrew Black, Charles Consel, Calton Pu, Jonathan Walpole, Crispin Cowan, Tito Autrey, Jon Inouye, Lakshmi Kethana, and Ke Zhang. </author> <title> Dream and Reality: Incremental Specializatoin in a Commercial Operating System. </title> <type> Technical Report CSE-95-001, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute of Science & Technology, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: 1 Introduction The motivation for this paper developed, almost by accident, as a result of our quest to understand some unexpected fluctuations in file system read performance in the Synthetix <ref> [2] </ref> and HP-UX [3] operating systems running on Hewlett-Packard PA-RISC processors. As part of our experiment we were attempting to measure the performance of the fast path through the read system call in both systems.
Reference: [3] <author> Frederick W. Clegg, Gary Shiu-Fan Ho, Steven R. Kusmer, and John R. Sontag. </author> <title> The HP-UX Operating System on HP Precision Architecture Computers. </title> <journal> Hewlett-Packard Journal, </journal> <volume> 37(12) </volume> <pages> 4-22, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: 1 Introduction The motivation for this paper developed, almost by accident, as a result of our quest to understand some unexpected fluctuations in file system read performance in the Synthetix [2] and HP-UX <ref> [3] </ref> operating systems running on Hewlett-Packard PA-RISC processors. As part of our experiment we were attempting to measure the performance of the fast path through the read system call in both systems. <p> The floating point (FP) co-processor has 64-bit registers and supports double word loads and stores. Using the FP registers may increase the amount of data transferred by each load and store. 3 2.2 copyout in HP-UX The HP-UX operating system <ref> [3] </ref> uses the routine copyout to copy data from the kernel's address space to the user's address space. copyout must ensure the target of the copy is a valid user virtual address and resident in physical memory.
Reference: [4] <author> Eric DeLano, Will Walker, and Mark Forsyth. </author> <title> A High Speed Superscalar PA-RISC Processor. </title> <booktitle> In COMPCON 92, </booktitle> <pages> pages 116-121, </pages> <address> San Francisco, CA, </address> <month> February 24-28 </month> <year> 1992. </year> <month> 11 </month>
Reference-contexts: The HP 720 has split instruction and data caches. The data cache is direct-mapped, 256 KB in size, with a line size of 32 bytes. The HP 755 uses the PA7100 CPU running at 99 MHz <ref> [4] </ref>. The 755's data cache is also direct-mapped, 256 KB in size, with a line size of 32 bytes. The 712-80 uses a PA7100LC CPU running at 80 MHz [12]. The 712 has a combined data and instruction cache of 256 KB.
Reference: [5] <author> Peter Druschel and Larry L. Peterson. Fbufs: </author> <title> A High Bandwidth Cross-Domain Transfer Facility. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Operating System Principles, </booktitle> <pages> pages 189-202, </pages> <address> Asheville, North Carolina, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Many research projects have implemented techniques that perform data movement without duplicating physical memory. A couple of examples are fbufs and Accent. Fbufs move data from network devices to user space and back again with a minimum of both virtual and physical memory duplication <ref> [5] </ref>. Accent used copy-on-write memory for high-performance local IPC [6].
Reference: [6] <author> Robert Fitzgerald and Richard Rashid. </author> <title> The Integration of Virtual Memory Management and Interprocess Communication in Accent. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 4(2) </volume> <pages> 147-177, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: A couple of examples are fbufs and Accent. Fbufs move data from network devices to user space and back again with a minimum of both virtual and physical memory duplication [5]. Accent used copy-on-write memory for high-performance local IPC <ref> [6] </ref>. Many contemporary virtual memory designs support the notion of copy-on-write or copy-on-reference memory to support both local bulk data movement and efficient copying of address spaces using virtual memory (VM) techniques that manipulate the TLB and VM data structures [16, 1, 10].
Reference: [7] <author> Mark Forsyth, Steve Mangelsdork, Eric DeLano, Craig Gleason, and Jeff Yetter. </author> <title> CMOS PA-RISC Processor for a New Family of Workstations. </title> <booktitle> In COMPCON 91, </booktitle> <pages> pages 202-207, </pages> <address> San Francisco, CA, </address> <month> February 25 March 1 </month> <year> 1991. </year>
Reference-contexts: The HP 720 uses an early PA-RISC 1.1 implementation CPU with a clock speed of 50 MHz <ref> [7] </ref>. The HP 720 has split instruction and data caches. The data cache is direct-mapped, 256 KB in size, with a line size of 32 bytes. The HP 755 uses the PA7100 CPU running at 99 MHz [4].
Reference: [8] <author> Hewlett-Packard. </author> <title> PA-RISC 1.1 Architecture and Instruction Set Reference Manual, </title> <note> second edition, </note> <month> September </month> <year> 1992. </year>
Reference-contexts: We conclude with a discussion about our experiences. 2 Byte Copying on HP Series 700 Workstations 2.1 Architectural Support for Efficient Byte Copying The Hewlett-Packard PA-RISC architecture <ref> [14, 8] </ref> has several features to improve the performance of byte copying. 1. Instructions for unaligned byte copies. If the source and destination addresses are not aligned 1 with each other, then it is impossible to transfer the data using word 2 loads and stores.
Reference: [9] <author> Jon Inouye, Ravindranath Konuru, Jonathan Walpole, and Bart Sears. </author> <title> The Effects of Virtually Addressed Caches on Virtual Memory Design & Performance. </title> <journal> Operating Systems Review, </journal> <volume> 26(4) </volume> <pages> 896-908, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Re-mapping the kernel buffer to a different virtual address is another option. While it avoids physical copying, re-mapping operations may require cache flushes to preserve address translation consistency <ref> [9] </ref>. In either case, removing the conflict can be expensive and only worthwhile if the conflict is persistent. Since read system calls tend to sequentially access a file there is little temporal locality in the kernel buffers so conflicts are rarely persistent.
Reference: [10] <author> Yousef A. Khalidi and Michael N. Nelson. </author> <title> The Spring Virtual Memory System. </title> <type> Technical Report SMLI TR-93-09, </type> <institution> Sun Microsystems Laboratories, Inc., </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: Accent used copy-on-write memory for high-performance local IPC [6]. Many contemporary virtual memory designs support the notion of copy-on-write or copy-on-reference memory to support both local bulk data movement and efficient copying of address spaces using virtual memory (VM) techniques that manipulate the TLB and VM data structures <ref> [16, 1, 10] </ref>. VM techniques cannot be used in all cases, such as when the data being copied is smaller than a page or not page-aligned with the user's buffer address. This limits the number of cases where read can benefit from COW techniques.
Reference: [11] <author> Gregor Kiczales and John Lamping. </author> <title> Operating Systems: </title> <booktitle> Why Object-Oriented? In Proceedings of Third International Workshop on Object Orientation in Operating Systems (IWOOOS-III), </booktitle> <pages> pages 25-30, </pages> <address> Asheville, NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Unfortunately, the operating system may not have sufficient information to make the right decision. Operating system can provide applications with meta-interfaces that allow programmers to specify the expected behavior of their programs <ref> [11] </ref>. For example, BSD UNIX introduced the madvise system call as a meta-interface for application programs to inform the operating system 8 Cache is divided into separate page-size colors.
Reference: [12] <author> Patrick Knebel, Barry Arnold, Mick Bass, Wayne Kever, Joel D. Lamb, Ruby B. Lee, Paul L. Perez, Stephen Undy, and Will Walker. PA7100LC: </author> <title> A Low-Cost Superscalar PA-RISC Processor. </title> <booktitle> In COMPCON 94, </booktitle> <pages> pages 441-447, </pages> <address> San Francisco, CA, </address> <month> February 22-26 </month> <year> 1993. </year>
Reference-contexts: The HP 755 uses the PA7100 CPU running at 99 MHz [4]. The 755's data cache is also direct-mapped, 256 KB in size, with a line size of 32 bytes. The 712-80 uses a PA7100LC CPU running at 80 MHz <ref> [12] </ref>. The 712 has a combined data and instruction cache of 256 KB. The cache is direct-mapped with a line size of 32 bytes. The DRAM memory speed of the machines was not specified in the documentation we had available. All machines were running HP-UX 9.03. <p> 42 150 Cold-Cold 16 106 Cold-Cold 20 85 Cold-Cold Time (in usecs) HP 720 HP 755 HP 712-80 One reason for this may be that the PA7100LC processor handles memory to memory copies better than the older PA7100 due to the additional features that mask the cost of cache misses <ref> [12] </ref>. We had hoped that the cache hints would improve the performance of the memory copy operation since it would avoid reading the line from memory. However, as figure 7 shows, cache hints have no effect on store performance to memory on any of the architectures.
Reference: [13] <author> Gordon Kurpanek, Jason Zheng, Eric DeLano, and William Bryg. PA7200: </author> <title> A PA-RISC Processor with Integrated High Performance MP Bus Interface. </title> <booktitle> In COMPCON 94, </booktitle> <pages> pages 375-382, </pages> <address> San Francisco, CA, </address> <month> February 28 March 4 </month> <year> 1994. </year>
Reference-contexts: There will be more architectural support for byte copying in future Hewlett-Packard workstations. The new PA7200 chip has an internal 64 entry, fully associative cache in addition to the traditional direct-mapped off-chip cache <ref> [13] </ref>. On each memory reference, the tag is compared to 65 entries (the 64 fully associative entries and the single entry returned by the off-chip cache). A cache line sent by memory to satisfy a miss is placed in the internal cache.
Reference: [14] <author> Ruby B. Lee. </author> <title> Precision Architecture. </title> <journal> IEEE Computer, </journal> <volume> 22(1) </volume> <pages> 78-91, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: We conclude with a discussion about our experiences. 2 Byte Copying on HP Series 700 Workstations 2.1 Architectural Support for Efficient Byte Copying The Hewlett-Packard PA-RISC architecture <ref> [14, 8] </ref> has several features to improve the performance of byte copying. 1. Instructions for unaligned byte copies. If the source and destination addresses are not aligned 1 with each other, then it is impossible to transfer the data using word 2 loads and stores.
Reference: [15] <author> Theodore H. Romer, Dennis Lee, Brian N. Bershad, and J. Bradley Chen. </author> <title> Dynamic Page Mapping Policies for Cache Conflict Resolution on Standard Hardware. </title> <booktitle> In Proceedings of the First USENIX Symposium on Operating System Design and Implementation (OSDI), </booktitle> <pages> pages 255-266, </pages> <address> Monterey, California, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: This limits the number of cases where read can benefit from COW techniques. In addition to these limitations, VM techniques have their own overhead and complexity associated with their use. There has been some work at removing persistent conflicts using dynamic page remapping policies <ref> [15] </ref>. These policies focus on conflicts within an application program running on a processor with a direct-mapped physically addressed cache. Possible conflicts are detected using coloring 8 information and hardware mechanisms such as cache miss counters.
Reference: [16] <author> Michael Young, Avadis Tevanian Jr., Richard Rashid, David Golub, Jeffrey Eppinger, Jonathan Chew, William Bolosky, and Robert Baron. </author> <title> The Duality of Memory and Communication in the Implementation of a Multiprocessor Operating System. </title> <booktitle> In Procedings of the 11th Symposium on Operating System Principles, </booktitle> <pages> pages 63-75, </pages> <month> November </month> <year> 1987. </year> <month> 12 </month>
Reference-contexts: Accent used copy-on-write memory for high-performance local IPC [6]. Many contemporary virtual memory designs support the notion of copy-on-write or copy-on-reference memory to support both local bulk data movement and efficient copying of address spaces using virtual memory (VM) techniques that manipulate the TLB and VM data structures <ref> [16, 1, 10] </ref>. VM techniques cannot be used in all cases, such as when the data being copied is smaller than a page or not page-aligned with the user's buffer address. This limits the number of cases where read can benefit from COW techniques.
References-found: 16

