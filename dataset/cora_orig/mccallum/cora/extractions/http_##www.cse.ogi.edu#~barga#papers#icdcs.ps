URL: http://www.cse.ogi.edu/~barga/papers/icdcs.ps
Refering-URL: http://www.cse.ogi.edu/~barga/
Root-URL: http://www.cse.ogi.edu
Email: email: lingliu@cs.ualberta.ca  email: calton,barga,tzhou@cse.ogi.edu  
Title: Differential Evaluation of Continual Queries  
Author: Ling Liu Calton Pu, Roger Barga, Tong Zhou 
Address: GSB 615, Edmonton, Alberta T6G 2H1 Canada  P.O.Box 91000 Portland Oregon 97291-1000 USA  
Affiliation: University of Alberta Department of Computing Science  Oregon Graduate Institute of Science and Technology Department of Computer Science  
Abstract: We define continual queries as a useful tool for monitoring of updated information. Continual queries are standing queries that monitor the source data and notify the users whenever new data matches the query. In addition to periodic refresh, continual queries include Epsilon Transaction concepts to allow users to specify query refresh based on the magnitude of updates. To support efficient processing of continual queries, we propose a differential re-evaluation algorithm (DRA), which exploits the structure and information contained in both the query expressions and the database update operations. The DRA design can be seen as a synthesis of previous research on differential files, incremental view maintenance, and active databases. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alonso, D. Barbara, and H. Garcia-Molina. </author> <title> Data caching issues in an information retrieval system. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(3) </volume> <pages> 359-384, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: The study on distributed materialized view management has been primarily focused on determining the optimal refresh sources and timing for multiple views defined on the same base data [22, 21]. Other works on distributed environments include quasi-copies for replication <ref> [1] </ref> and update anomalies in data warehouses [25] 3 Continual Query Semantics 3.1 Basic Semantics A continual query CQ is a triple (Q; T CQ ; Stop), consisting of a normal query Q (e.g., written in SQL), a triggering condition T CQ as specified below, and a termination condition Stop. (Since
Reference: [2] <author> D. Barbara and R. Alonso. </author> <title> Processing continuous queries in general environments. </title> <type> Technical report, </type> <institution> Matsushita Information Technology Laboratory, Princeton, NJ, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Epsilon specifications allow the users to specify and activate query refresh based on the magnitude of updates, in addition to triggering query refresh periodically as proposed in previous works <ref> [23, 2] </ref>. An example of the new specification capability is the query "show the IBM stock transactions that differ by more than $5 from $75 per share" (Q 3 ). <p> One of the significant assumptions that their proposal made is the limitation of database updates to append-only, disallowing deletions and modifications. Since this assumption is used in their query transformation algorithm, it has been difficult to relax it <ref> [2] </ref>, when following their definition of continuous queries. This is one of the motivations for our new definition in Section 3 under a new name, continual queries. Active Databases: Rules are used extensively in active databases [5, 14, 18, 20] for monitoring changes of database state.
Reference: [3] <author> J. Blakeley, P. Larson, and F. Tompa. </author> <title> Efficiently updating materialized views. </title> <booktitle> In Proceedings of the ACM-SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 61-71, </pages> <address> Washington, DC, </address> <month> May </month> <year> 1986. </year>
Reference-contexts: Trying to monitor the constant information flow in the Internet is both labor intensive for the user and resource intensive for the system. Unfortunately, traditional database techniques such as view materialization <ref> [3, 7] </ref>, active databases [20], and query optimization, while powerful by themselves, encounter difficulties in distributed interop-erable environments such as the Internet. The interoper-ation of these database techniques with each other and with the relatively unorganized storage and management of data, such as WWW pages [4] is completely non-trivial. <p> Materialized Views: Materialized views store a snapshot of selected database state. When a database is updated, the materialized view must be refreshed to reflect the updates. Three approaches have been described previously. The first approach refreshes the view immediately after each update to the base table <ref> [3] </ref>. The second defers the refresh until a query is issued against the view [19]. The third refreshes the view periodically [9]. The main tradeoff in choosing among these approaches is the stal-eness of the view data vs. the cost of updating it. <p> The second defers the refresh until a query is issued against the view [19]. The third refreshes the view periodically [9]. The main tradeoff in choosing among these approaches is the stal-eness of the view data vs. the cost of updating it. Most of the algorithms in the literature <ref> [3, 9, 7, 8, 6] </ref> work in a centralized database environment, in which the materialized view and its base tables co-reside. <p> The goal for defining differential relations, instead of using hypothetical relations described in <ref> [3, 7] </ref>, is to provide a unified treatment of changes, not separate treatments of insertions, deletions, and modifications resulting in several algorithms for generating and combining individual results. Due to the space limitation, we illustrate the concept of differential relation (R) by examples. <p> The concept of differential relations is, to some extent, similar to the concept of hypothetical relations used for incremental updating materialized views <ref> [3, 7] </ref>. The difference lies in the usage and the detailed structure.
Reference: [4] <author> C. Bowman, P. Danzig, D. Hardy, U. Manber, and M. F. Schwartz. </author> <title> The harvest information discovery and access system. </title> <booktitle> In Proceedings of the Second International World Wide Web Conference, </booktitle> <pages> pages 763-771, </pages> <address> Chicago, Illinois, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: 1 Introduction An unprecedented amount of new information is becoming available by the exponential growth of the Internet <ref> [4] </ref>. However, on the one side this flood of information can easily overwhelm the users, and on the other side naive query processing can easily overload the database system and network. <p> The interoper-ation of these database techniques with each other and with the relatively unorganized storage and management of data, such as WWW pages <ref> [4] </ref> is completely non-trivial. To address the interoperability problem in Internet environments we have developed the Distributed Interopera-ble Object Model (DIOM) [10], which supports a methodical and explicit composition of query results from inter-operable information sources. <p> The triggering condition T CQ is a specification of when the query Q should be executed. It can take several forms: * A direct specification of time. For example, Q should be executed once every Monday. This is the policy adopted by the Harvest information gatherers <ref> [4] </ref>. * A specification of time interval from a previous query result. For example, "a week since Q (S n1 ) was produced". (This can be interpreted as a time specifica tion relative to an event.) * A condition on the database state.
Reference: [5] <author> S. Chakravarthy. </author> <title> Architectures and monitoring tech-niques for active databases: An evaluation. </title> <note> In Technical Report TR-92-041, </note> <institution> University of Florida, </institution> <address> Gainesville, FL, </address> <year> 1992. </year>
Reference-contexts: This is one of the motivations for our new definition in Section 3 under a new name, continual queries. Active Databases: Rules are used extensively in active databases <ref> [5, 14, 18, 20] </ref> for monitoring changes of database state. Despite their conceptual generality, rules have been so far supported in a fairly restrictive form in practical systems, for example, by triggers in relational database management systems such as Oracle, Sybase, and Informix.
Reference: [6] <author> A. Gupta, I. Mumick, and V. Subrahmanian. </author> <title> Maintaining views incrementally. </title> <booktitle> In Proceedings of the ACM-SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 157-166, </pages> <address> Washington, DC, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: The second defers the refresh until a query is issued against the view [19]. The third refreshes the view periodically [9]. The main tradeoff in choosing among these approaches is the stal-eness of the view data vs. the cost of updating it. Most of the algorithms in the literature <ref> [3, 9, 7, 8, 6] </ref> work in a centralized database environment, in which the materialized view and its base tables co-reside.
Reference: [7] <author> E. N. Hanson. </author> <title> A performance analysis of view materialization strategies. </title> <booktitle> In Proceedings of the ACM-SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 440-453, </pages> <address> San Francisco, CA, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: Trying to monitor the constant information flow in the Internet is both labor intensive for the user and resource intensive for the system. Unfortunately, traditional database techniques such as view materialization <ref> [3, 7] </ref>, active databases [20], and query optimization, while powerful by themselves, encounter difficulties in distributed interop-erable environments such as the Internet. The interoper-ation of these database techniques with each other and with the relatively unorganized storage and management of data, such as WWW pages [4] is completely non-trivial. <p> The second defers the refresh until a query is issued against the view [19]. The third refreshes the view periodically [9]. The main tradeoff in choosing among these approaches is the stal-eness of the view data vs. the cost of updating it. Most of the algorithms in the literature <ref> [3, 9, 7, 8, 6] </ref> work in a centralized database environment, in which the materialized view and its base tables co-reside. <p> The goal for defining differential relations, instead of using hypothetical relations described in <ref> [3, 7] </ref>, is to provide a unified treatment of changes, not separate treatments of insertions, deletions, and modifications resulting in several algorithms for generating and combining individual results. Due to the space limitation, we illustrate the concept of differential relation (R) by examples. <p> The concept of differential relations is, to some extent, similar to the concept of hypothetical relations used for incremental updating materialized views <ref> [3, 7] </ref>. The difference lies in the usage and the detailed structure.
Reference: [8] <author> B. Kahler and O. Risnes. </author> <title> Extending logging for database snapshot refresh. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases, </booktitle> <pages> pages 389-398, </pages> <address> Brighton, England, </address> <month> September </month> <year> 1987. </year>
Reference-contexts: The second defers the refresh until a query is issued against the view [19]. The third refreshes the view periodically [9]. The main tradeoff in choosing among these approaches is the stal-eness of the view data vs. the cost of updating it. Most of the algorithms in the literature <ref> [3, 9, 7, 8, 6] </ref> work in a centralized database environment, in which the materialized view and its base tables co-reside.
Reference: [9] <author> B. Lindsay, L. Haas, and C. Mohan. </author> <title> A snapshot differential refresh algorithm. </title> <booktitle> In Proceedings of the ACM-SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 53-60, </pages> <address> Washington, DC, </address> <month> May </month> <year> 1986. </year>
Reference-contexts: Three approaches have been described previously. The first approach refreshes the view immediately after each update to the base table [3]. The second defers the refresh until a query is issued against the view [19]. The third refreshes the view periodically <ref> [9] </ref>. The main tradeoff in choosing among these approaches is the stal-eness of the view data vs. the cost of updating it. Most of the algorithms in the literature [3, 9, 7, 8, 6] work in a centralized database environment, in which the materialized view and its base tables co-reside. <p> The second defers the refresh until a query is issued against the view [19]. The third refreshes the view periodically [9]. The main tradeoff in choosing among these approaches is the stal-eness of the view data vs. the cost of updating it. Most of the algorithms in the literature <ref> [3, 9, 7, 8, 6] </ref> work in a centralized database environment, in which the materialized view and its base tables co-reside.
Reference: [10] <author> L. Liu and C. Pu. </author> <title> The distributed interoperable object model and its application to large-scale interop-erable database systems. </title> <booktitle> In ACM International Conference on Information and Knowledge Management (CIKM'95), </booktitle> <address> Baltimore, Maryland, USA, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: The interoper-ation of these database techniques with each other and with the relatively unorganized storage and management of data, such as WWW pages [4] is completely non-trivial. To address the interoperability problem in Internet environments we have developed the Distributed Interopera-ble Object Model (DIOM) <ref> [10] </ref>, which supports a methodical and explicit composition of query results from inter-operable information sources. The key idea of this paper is to generate new query results by incrementally updating previous query results, rather than re-evaluating the queries from scratch. <p> The key idea of this paper is to generate new query results by incrementally updating previous query results, rather than re-evaluating the queries from scratch. This approach builds on our previous results from the Diorama architecture <ref> [10, 11] </ref> and Epsilon Serializability [24, 17] to support flexible and efficient monitoring of information updates in the Internet environments. The first contribution of this paper is our use of DIOM and Epsilon Serializability to define a powerful mechanism for user specification of update monitoring. <p> Rather, these techniques have been proposed primarily for "data-centric" environments, where data is well organized and controlled. When applied to an Information Superhighway environment (for brevity and concreteness we refer to this environment as the Internet), these assumptions no longer hold (see <ref> [10] </ref> for a summary of desired system properties in the Internet). Therefore, we discuss these assumptions before we launch into our definition of continual queries (Section 3) and the DRA technique (Section 4.2) for efficient processing of continual queries. <p> DRA and CQ satisfy the USECA properties for information update monitoring on the Internet. Uniform access and composability are supported by DIOM <ref> [10] </ref>, the foundation of our work. Scalability is supported by DRA, which encourages the shifting of the processing to the client side.
Reference: [11] <author> L. Liu and C. Pu. </author> <title> An adaptive approach to query mediation across heterogeneous information sources. </title> <booktitle> In Proceedings of the International Conference on Cooperative Information Systems, </booktitle> <address> Brussels, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: The key idea of this paper is to generate new query results by incrementally updating previous query results, rather than re-evaluating the queries from scratch. This approach builds on our previous results from the Diorama architecture <ref> [10, 11] </ref> and Epsilon Serializability [24, 17] to support flexible and efficient monitoring of information updates in the Internet environments. The first contribution of this paper is our use of DIOM and Epsilon Serializability to define a powerful mechanism for user specification of update monitoring. <p> For the relational information source providers, the generation of different relations is quite straightforward. For those information sources other than relational databases, simple translators (as part of the DIOM services <ref> [11] </ref>) will be used to catch the updates in the form of differential relations. For example, file system updates can be captured by either operating system or middleware and translated into a differential relation and fed into DRA.
Reference: [12] <author> L. Liu, C. Pu, R. Barga, and T. Zhou. </author> <title> Differential evaluation of continual queries. </title> <type> Technical Report TR-95-17, </type> <institution> Department of Computer Science, University of Alberta, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Two basic operators deletion (R) and insertion (ffiR) are discussed, as they are used in the examples later to illustrate the DRA algorithm. Readers who are interested in formal definition of differential relations and their operators may refer to <ref> [12] </ref>. Example 1 Consider the relation Stocks with attributes such as name and price per 100 units. Stocks: tid Name Price 120992 DEC 150 032090 ODI 120 . . . . . . <p> Due to the space limitation, instead of presenting the formal development of these operators and proofs, we be low provide some examples to illustrate some of the main operators. Readers may refer to <ref> [12] </ref> for further detail. Example 2 Consider query price&gt;120 (Stocks) as a continual query Q.
Reference: [13] <author> D. Maier. </author> <title> The Theory of Relational Databases. </title> <publisher> Computer Science Press, </publisher> <year> 1983. </year>
Reference-contexts: We prove that the processing of a continual query, after its initial execution, can be reduced to the evaluation of the differential form of the query. We assume that readers are familiar with the basic concepts and notation concerning relational database, as described in <ref> [13] </ref>. 4.1 Differential Relations We introduce the concept of differential relation, a relation that can represent changes to another relation, and design a set of basic operations to facilitate the manipulation of such relations.
Reference: [14] <author> D. McCarthy and U. Dayal. </author> <title> The architecture of an active database management system. </title> <booktitle> In Proceedings of the ACM-SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 215-224, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: This is one of the motivations for our new definition in Section 3 under a new name, continual queries. Active Databases: Rules are used extensively in active databases <ref> [5, 14, 18, 20] </ref> for monitoring changes of database state. Despite their conceptual generality, rules have been so far supported in a fairly restrictive form in practical systems, for example, by triggers in relational database management systems such as Oracle, Sybase, and Informix.
Reference: [15] <author> C. Pu, W. Hseush, G. Kaiser, K.-L. Wu, and P. Yu. </author> <title> Divergence control for distributed database systems. </title> <journal> International Journal on Distributed and Parallel Databases, </journal> <volume> 3(1) </volume> <pages> 85-109, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: In Section 4.2 we describe a strategy to generate Q (S n ) from Q (S n1 ) incrementally, thus reducing both processing time and network transmission bandwidth. 3.2 Epsilon Specifications Epsilon specifications have been introduced as part of the work on Epsilon Serializability (ESR) <ref> [15, 16, 17] </ref>. A simple example of an epsilon query is the checking account sum-up query "a bank manager wants to know how many millions of dollars she has in all the checking accounts" with the error tolerance rate of half a million. <p> This way, we can define a CQ from an epsilon query plus a termination condition. Intuitively, the original epsilon query was defined to allow a bounded amount of inconsistency to be introduced into the query result. For example, divergence control algorithms <ref> [24, 15] </ref> allow limited non-serializable conflicts between updates and the epsilon query to happen, to increase system execution flexibility and concurrency.
Reference: [16] <author> C. Pu and A. Leff. </author> <title> Replica control in distributed systems: An asynchronous approach. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 377-386, </pages> <address> Denver, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: In Section 4.2 we describe a strategy to generate Q (S n ) from Q (S n1 ) incrementally, thus reducing both processing time and network transmission bandwidth. 3.2 Epsilon Specifications Epsilon specifications have been introduced as part of the work on Epsilon Serializability (ESR) <ref> [15, 16, 17] </ref>. A simple example of an epsilon query is the checking account sum-up query "a bank manager wants to know how many millions of dollars she has in all the checking accounts" with the error tolerance rate of half a million.
Reference: [17] <author> K. Ramamrithan and C. Pu. </author> <title> A formal characterization of epsilon serializability. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> June </month> <year> 1995. </year>
Reference-contexts: The key idea of this paper is to generate new query results by incrementally updating previous query results, rather than re-evaluating the queries from scratch. This approach builds on our previous results from the Diorama architecture [10, 11] and Epsilon Serializability <ref> [24, 17] </ref> to support flexible and efficient monitoring of information updates in the Internet environments. The first contribution of this paper is our use of DIOM and Epsilon Serializability to define a powerful mechanism for user specification of update monitoring. <p> The first contribution of this paper is our use of DIOM and Epsilon Serializability to define a powerful mechanism for user specification of update monitoring. Epsilon specifications <ref> [17] </ref>, a measure of distance in the database state space, is used in the marking of the triggering of query reevaluation. <p> In Section 4.2 we describe a strategy to generate Q (S n ) from Q (S n1 ) incrementally, thus reducing both processing time and network transmission bandwidth. 3.2 Epsilon Specifications Epsilon specifications have been introduced as part of the work on Epsilon Serializability (ESR) <ref> [15, 16, 17] </ref>. A simple example of an epsilon query is the checking account sum-up query "a bank manager wants to know how many millions of dollars she has in all the checking accounts" with the error tolerance rate of half a million.
Reference: [18] <author> A. Rosenthal, S. Chakravarthy, B. Blaustein, and J. Blakely. </author> <title> Situation monitoring for active databases. </title> <booktitle> In Proceedings of the 15th International Conference on Very Large Data Bases, </booktitle> <pages> pages 469-478, </pages> <address> Amster-dam, Holland, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: This is one of the motivations for our new definition in Section 3 under a new name, continual queries. Active Databases: Rules are used extensively in active databases <ref> [5, 14, 18, 20] </ref> for monitoring changes of database state. Despite their conceptual generality, rules have been so far supported in a fairly restrictive form in practical systems, for example, by triggers in relational database management systems such as Oracle, Sybase, and Informix.
Reference: [19] <author> N. Roussopoulos and H. Kang. </author> <title> Preliminary design of adms+: A workstation-mainframe integrated architecture fopr database management systems. </title> <booktitle> In Proceedings of the 12th International Conference on Very Large Data Bases, </booktitle> <pages> pages 355-364, </pages> <address> Kyoto, Japan, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: When a database is updated, the materialized view must be refreshed to reflect the updates. Three approaches have been described previously. The first approach refreshes the view immediately after each update to the base table [3]. The second defers the refresh until a query is issued against the view <ref> [19] </ref>. The third refreshes the view periodically [9]. The main tradeoff in choosing among these approaches is the stal-eness of the view data vs. the cost of updating it.
Reference: [20] <author> U. Schreier, H. Pirahesh, R. Agrawal, and C. Mo-han. Alert: </author> <title> An architecture for transforming a passive dbms into an active dbms. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases, </booktitle> <pages> pages 469-478, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Trying to monitor the constant information flow in the Internet is both labor intensive for the user and resource intensive for the system. Unfortunately, traditional database techniques such as view materialization [3, 7], active databases <ref> [20] </ref>, and query optimization, while powerful by themselves, encounter difficulties in distributed interop-erable environments such as the Internet. The interoper-ation of these database techniques with each other and with the relatively unorganized storage and management of data, such as WWW pages [4] is completely non-trivial. <p> This is one of the motivations for our new definition in Section 3 under a new name, continual queries. Active Databases: Rules are used extensively in active databases <ref> [5, 14, 18, 20] </ref> for monitoring changes of database state. Despite their conceptual generality, rules have been so far supported in a fairly restrictive form in practical systems, for example, by triggers in relational database management systems such as Oracle, Sybase, and Informix. <p> A trigger is an event-condition-action (ECA) rule in a restrictive form. Typically, triggers can be specified only on a single base table. Active query, introduced in Alert <ref> [20] </ref>, is yet another form of ECA rules, similar to continuous queries [23], and usually assumed to work in an append-only environment. Active queries are more sophisticated than triggers, since they can be defined on multiple tables, on views, and can be nested within other active queries.
Reference: [21] <author> A. Segev and W. Fang. </author> <title> Currency-based updates to distributed materialized views. </title> <booktitle> In Proceedings of the 6th International Conference on Data Engineering, </booktitle> <pages> pages 512-520, </pages> <address> Los Alamitos, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: The study on distributed materialized view management has been primarily focused on determining the optimal refresh sources and timing for multiple views defined on the same base data <ref> [22, 21] </ref>.
Reference: [22] <author> A. Segev and J. Park. </author> <title> Maintaining materialized views in distributed databases. </title> <booktitle> In Proceedings of the 5th International Conference on Data Engineering, </booktitle> <pages> pages 262-270, </pages> <address> Los Angeles, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: The study on distributed materialized view management has been primarily focused on determining the optimal refresh sources and timing for multiple views defined on the same base data <ref> [22, 21] </ref>.
Reference: [23] <author> D. Terry, D. Goldberg, D. Nichols, and B. </author> <title> Oki. Continuous queries over append-only databases. </title> <booktitle> In Proceedings of the ACM-SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 321-330, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: Epsilon specifications allow the users to specify and activate query refresh based on the magnitude of updates, in addition to triggering query refresh periodically as proposed in previous works <ref> [23, 2] </ref>. An example of the new specification capability is the query "show the IBM stock transactions that differ by more than $5 from $75 per share" (Q 3 ). <p> The second and more substantial contribution of this paper is an algorithm for incremental evaluation of continuous queries that supports general updates, including modifications, deletions, and inserts. This is a significant improvement over Continuous Queries <ref> [23] </ref> by Terry et al, which restricts database updates to append-only, disallowing deletions and in-place modifications. Besides the support for general updates, our differential re-evaluation algorithm (DRA) reduces data transmission by processing the query primarily on the changed data, rather than reevaluating the entire database. <p> Therefore, we discuss these assumptions before we launch into our definition of continual queries (Section 3) and the DRA technique (Section 4.2) for efficient processing of continual queries. Continuous Queries: Terry et al <ref> [23] </ref> proposed continuous queries for monitoring information change. One of the significant assumptions that their proposal made is the limitation of database updates to append-only, disallowing deletions and modifications. <p> A trigger is an event-condition-action (ECA) rule in a restrictive form. Typically, triggers can be specified only on a single base table. Active query, introduced in Alert [20], is yet another form of ECA rules, similar to continuous queries <ref> [23] </ref>, and usually assumed to work in an append-only environment. Active queries are more sophisticated than triggers, since they can be defined on multiple tables, on views, and can be nested within other active queries. However, like continuous queries [23], the append-only assumption seriously restricts the applicability of active queries to <p> is yet another form of ECA rules, similar to continuous queries <ref> [23] </ref>, and usually assumed to work in an append-only environment. Active queries are more sophisticated than triggers, since they can be defined on multiple tables, on views, and can be nested within other active queries. However, like continuous queries [23], the append-only assumption seriously restricts the applicability of active queries to the Internet environment where data is appended, removed, or replaced constantly. Materialized Views: Materialized views store a snapshot of selected database state. When a database is updated, the materialized view must be refreshed to reflect the updates.
Reference: [24] <author> K. Wu, P. S. Yu, and C. Pu. </author> <title> Divergence control for epsilon-serializability. </title> <booktitle> In Proceedings of Eighth International Conference on Data Engineering, </booktitle> <pages> pages 506-515, </pages> <address> Phoenix, </address> <month> February </month> <year> 1992. </year> <journal> IEEE/Computer Society. </journal>
Reference-contexts: The key idea of this paper is to generate new query results by incrementally updating previous query results, rather than re-evaluating the queries from scratch. This approach builds on our previous results from the Diorama architecture [10, 11] and Epsilon Serializability <ref> [24, 17] </ref> to support flexible and efficient monitoring of information updates in the Internet environments. The first contribution of this paper is our use of DIOM and Epsilon Serializability to define a powerful mechanism for user specification of update monitoring. <p> This way, we can define a CQ from an epsilon query plus a termination condition. Intuitively, the original epsilon query was defined to allow a bounded amount of inconsistency to be introduced into the query result. For example, divergence control algorithms <ref> [24, 15] </ref> allow limited non-serializable conflicts between updates and the epsilon query to happen, to increase system execution flexibility and concurrency.
Reference: [25] <author> Y. Zhuge, H. Garcia-Molina, J. Hammer, and J. Widom. </author> <title> View maintenance in a warehousing environment. </title> <booktitle> In Proceedings of the ACM-SIGMOD International Conference on Management of Data, </booktitle> <address> San Jose, CA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: The study on distributed materialized view management has been primarily focused on determining the optimal refresh sources and timing for multiple views defined on the same base data [22, 21]. Other works on distributed environments include quasi-copies for replication [1] and update anomalies in data warehouses <ref> [25] </ref> 3 Continual Query Semantics 3.1 Basic Semantics A continual query CQ is a triple (Q; T CQ ; Stop), consisting of a normal query Q (e.g., written in SQL), a triggering condition T CQ as specified below, and a termination condition Stop. (Since T CQ and Stop in general may
References-found: 25

