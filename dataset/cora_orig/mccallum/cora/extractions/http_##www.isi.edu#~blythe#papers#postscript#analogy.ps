URL: http://www.isi.edu/~blythe/papers/postscript/analogy.ps
Refering-URL: http://www.isi.edu/~blythe/cs541/syllabus.html
Root-URL: http://www.isi.edu
Email: jblythe,veloso@cs.cmu.edu  
Title: Analogical Replay for Efficient Conditional Planning  
Author: Jim Blythe Manuela Veloso 
Address: Pittsburgh, PA 15213, USA  
Affiliation: Computer Science Department Carnegie Mellon University  
Abstract: Recently, several planners have been designed that can create conditionally branching plans to solve problems which involve uncertainty. These planners represent an important step in broadening the applicability of AI planning techniques, but they typically must search a larger space than non-branching planners, since they must produce valid plans for each branch considered. In the worst case this can produce an exponential increase in the complexity of planning. If conditional planners are to become usable in real-world domains, this complexity must be controlled by sharing planning effort among branches. Analogical plan reuse should play a fundamental role in this process. We have implemented a conditional probabilistic planner that uses analogical plan replay to derive the maximum benefit from previously solved branches of the plan. This approach provides valuable guidance for when and how to merge different branches of the plan and exploits the high similarity between the different branches in a conditional plan, which have the same goal and typically a very similar state. We present experimental data in which analogical plan replay significantly reduces the complexity of conditional planning. Analogical replay can be applied to a variety of conditional planners, complementing the plan sharing that they may perform naturally. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Blythe, J. </author> <year> 1994. </year> <title> Planning with external events. </title> <editor> In de Mantaras, R. L., and Poole, D., eds., </editor> <booktitle> Proc. Tenth Conference on Uncertainty in Artificial Intelligence, </booktitle> <pages> 94-101. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Weaver builds a series of plans with increasing probabilities of success and iteratively calls B-prodigy to find improved versions of the plan <ref> (Blythe 1994) </ref>. At each iteration, Weaver decides which sources of uncertainty to account for and which to ignore. It hides the latter from B-prodigy, and allows B-prodigy to reason about the relevant external events by representing them as possible effects of actions.
Reference: <author> Boutilier, C.; Dean, T.; and Hanks, S. </author> <year> 1995. </year> <title> Planning under uncertainty: structural assumptions and computational leverage. </title> <booktitle> In Proc. European Workshop on Planning. </booktitle> <address> Assissi, Italy: </address> <publisher> IOS Press. </publisher>
Reference-contexts: Markov decision processes (mdps) such as policy iteration (Dean & Lin 1995), and those that extend AI planning algorithms such as snlp (Draper, Hanks, & Weld 1994). As remarked by Boutilier et al <ref> (Boutilier, Dean, & Hanks 1995) </ref>, the two groups of planners differ only in the emphasis of available techniques and do not make different assumptions. In this paper we concentrate on the efficiency problem for systems based on classical AI planners.
Reference: <author> Dean, T., and Lin, S.-H. </author> <year> 1995. </year> <title> Decomposition techniques for planning in stochastic domains. </title> <booktitle> In Proc. 14th International Joint Conference on Artificial Intelligence, </booktitle> <volume> 1121 - 1127. </volume> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: All rights reserved. This research is sponsored as part of the DARPA/RL Knowledge Based Planning and Scheduling Initiative under grant number F30602-95-1-0018. Markov decision processes (mdps) such as policy iteration <ref> (Dean & Lin 1995) </ref>, and those that extend AI planning algorithms such as snlp (Draper, Hanks, & Weld 1994). As remarked by Boutilier et al (Boutilier, Dean, & Hanks 1995), the two groups of planners differ only in the emphasis of available techniques and do not make different assumptions. <p> Markov decision processes (mdps) such as policy iteration (Dean & Lin 1995), and those that extend AI planning algorithms such as snlp (Draper, Hanks, & Weld 1994). As remarked by Boutilier et al <ref> (Boutilier, Dean, & Hanks 1995) </ref>, the two groups of planners differ only in the emphasis of available techniques and do not make different assumptions. In this paper we concentrate on the efficiency problem for systems based on classical AI planners.
Reference: <author> Draper, D.; Hanks, S.; and Weld, D. </author> <year> 1994. </year> <title> Probabilistic planning with information gathering and contingent execution. </title> <editor> In Hammond, K., ed., </editor> <booktitle> Proc. Second International Conference on Artificial Intelligence Planning Systems, </booktitle> <pages> 31-37. </pages> <publisher> AAAI Press. </publisher>
Reference-contexts: All rights reserved. This research is sponsored as part of the DARPA/RL Knowledge Based Planning and Scheduling Initiative under grant number F30602-95-1-0018. Markov decision processes (mdps) such as policy iteration (Dean & Lin 1995), and those that extend AI planning algorithms such as snlp <ref> (Draper, Hanks, & Weld 1994) </ref>. As remarked by Boutilier et al (Boutilier, Dean, & Hanks 1995), the two groups of planners differ only in the emphasis of available techniques and do not make different assumptions. <p> Several planning systems are capable of solving problems like this, such as cnlp (Peot & Smith 1992), Cas-sandra (Pryor & Collins 1993) and C-Buridan <ref> (Draper, Hanks, & Weld 1994) </ref>. We present here a conditional planner that is an extension to prodigy4.0 ((Veloso et al. 1995)), which we use to motivate and explore the use of analogy in conditional planners. <p> Related Work In (Peot & Smith 1992), Peot and Smith introduce a planner called cnlp with a representation for partial-order branching plans based on snlp (McAllester & Rosenblitt 1991). This representation uses contexts, and has been adopted in B-prodigy as well as Cas-sandra (Pryor & Collins 1993) and C-Buridan <ref> (Draper, Hanks, & Weld 1994) </ref>. All three planners keep track of the branches that steps belong to using context propagation, assigning contexts to steps based on those they are causally linked to.
Reference: <author> Hickman, A. K.; Shell, P.; and Carbonell, J. G. </author> <year> 1990. </year> <title> Internal analogy: Reducing search during problem solving. </title> <editor> In Copetas, C., ed., </editor> <booktitle> The Computer Science Research Review. </booktitle> <institution> Carnegie Mellon University. </institution>
Reference-contexts: The essence of the method is to flexibly reuse the planning experience across the conditional branches, thus avoiding the need for unnecessary repeated search effort. The use of derivational analogy in this context is similar to internal analogy <ref> (Hickman, Shell, & Carbonell 1990) </ref> in which repeated solutions to subproblems are reused within the same problem. We have implemented a conditional probabilistic planner that extends Prodigy 4.0 (Veloso et al. 1995). <p> In this integration of conditional planning and analogy, the analogical replay within the context of different branches of the same problem can be viewed as an instance of internal analogy <ref> (Hickman, Shell, & Car-bonell 1990) </ref>. The accumulation of a library of cases is not required, and there is no need to analyze the similarity between a new problem and a potentially large number of cases.
Reference: <author> McAllester, D., and Rosenblitt, D. </author> <year> 1991. </year> <title> Systematic nonlinear planning. </title> <booktitle> In Proc. Ninth National Conference on Artificial Intelligence, </booktitle> <pages> 634-639. </pages> <publisher> AAAI Press. </publisher>
Reference-contexts: Related Work In (Peot & Smith 1992), Peot and Smith introduce a planner called cnlp with a representation for partial-order branching plans based on snlp <ref> (McAllester & Rosenblitt 1991) </ref>. This representation uses contexts, and has been adopted in B-prodigy as well as Cas-sandra (Pryor & Collins 1993) and C-Buridan (Draper, Hanks, & Weld 1994).
Reference: <author> Peot, M. A., and Smith, D. E. </author> <year> 1992. </year> <title> Conditional nonlinear planning. </title> <editor> In Hendler, J., ed., </editor> <booktitle> Proc. First International Conference on Artificial Intelligence Planning Systems, </booktitle> <pages> 189-197. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Several planning systems are capable of solving problems like this, such as cnlp <ref> (Peot & Smith 1992) </ref>, Cas-sandra (Pryor & Collins 1993) and C-Buridan (Draper, Hanks, & Weld 1994). We present here a conditional planner that is an extension to prodigy4.0 ((Veloso et al. 1995)), which we use to motivate and explore the use of analogy in conditional planners. <p> Related Work In <ref> (Peot & Smith 1992) </ref>, Peot and Smith introduce a planner called cnlp with a representation for partial-order branching plans based on snlp (McAllester & Rosenblitt 1991).
Reference: <author> Pryor, L., and Collins, G. </author> <year> 1993. </year> <title> Cassandra: Planning for contingencies. </title> <type> Technical Report 41, </type> <institution> The Institute for the Learning Sciences. </institution>
Reference-contexts: Several planning systems are capable of solving problems like this, such as cnlp (Peot & Smith 1992), Cas-sandra <ref> (Pryor & Collins 1993) </ref> and C-Buridan (Draper, Hanks, & Weld 1994). We present here a conditional planner that is an extension to prodigy4.0 ((Veloso et al. 1995)), which we use to motivate and explore the use of analogy in conditional planners. <p> Related Work In (Peot & Smith 1992), Peot and Smith introduce a planner called cnlp with a representation for partial-order branching plans based on snlp (McAllester & Rosenblitt 1991). This representation uses contexts, and has been adopted in B-prodigy as well as Cas-sandra <ref> (Pryor & Collins 1993) </ref> and C-Buridan (Draper, Hanks, & Weld 1994). All three planners keep track of the branches that steps belong to using context propagation, assigning contexts to steps based on those they are causally linked to.
Reference: <author> Veloso, M.; Carbonell, J.; Perez, A.; Borrajo, D.; Fink, E.; and Blythe, J. </author> <year> 1995. </year> <title> Integrating planning and learning: The prodigy architecture. </title> <journal> Journal of Experimental and Theoretical AI 7 </journal> <pages> 81-120. </pages>
Reference-contexts: The use of derivational analogy in this context is similar to internal analogy (Hickman, Shell, & Carbonell 1990) in which repeated solutions to subproblems are reused within the same problem. We have implemented a conditional probabilistic planner that extends Prodigy 4.0 <ref> (Veloso et al. 1995) </ref>. We then integrated it with analogical plan replay to derive the maximum benefit from previously solved branches of the plan.
Reference: <author> Veloso, M. M. </author> <year> 1994. </year> <title> Planning and Learning by Analogical Reasoning. </title> <publisher> Springer Verlag. </publisher>
Reference-contexts: Analogy provides an elegant way to handle other kinds of shared steps as well. Analogical Replay in B-prodigy Analogical reasoning has been combined with classical operator-based planning in Prodigy as a method to learn to improve planning efficiency <ref> (Veloso 1994) </ref>. This integrated system, Prodigy/Analogy, has been re-implemented in prodigy4.0. Its replay functionality makes it suitable to be combined with B-prodigy. B-prodigy controlled by Weaver is integrated with Prodigy/Analogy. First, a previously visited branch is selected to guide planning for the new branch.
References-found: 10

