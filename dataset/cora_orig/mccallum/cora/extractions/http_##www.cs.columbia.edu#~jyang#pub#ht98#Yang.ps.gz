URL: http://www.cs.columbia.edu/~jyang/pub/ht98/Yang.ps.gz
Refering-URL: http://www.cs.columbia.edu/~jyang/pub/ht98/
Root-URL: http://www.cs.columbia.edu
Title: JPernLite: An Extensible Transaction Server for the World Wide Web desirable to construct collaborative hypermedia
Author: Jack J. Yang Gail E. Kaiser 
Keyword: Distributed Transactions, Extended  
Note: Further, it is  Transaction Models, WWW, Computer Supported Collaborative Work  
Address: New York, NY 10027, USA  New York, NY 10027, USA  
Affiliation: Department of Computer Science Columbia University  Department of Computer Science Columbia University  
Email: Email: jyang@cs.columbia.edu  Email: kaiser@cs.columbia.edu  
Phone: Tel: 1-212-939-7085  Tel: 1-212-939-7081  
Abstract: Concurrency control is a well-known problem in design and implementation of multiuser hypermedia systems. Most existing systems store data and links in specialized databases (link servers or hyperbases) with a built-in concurrency control policy, typically the conventional atomic/serializable transaction model, usually implemented via locking. But this conventional model may not be appropriate for collaborative hypermedia systems, where the multiple users work together in groups on shared tasks. We present a transaction server that operates independently of web servers or the hypermedia applications, to fill the concurrency control gap. The transaction server by default enforces the conventional transaction model, where sets of operations are performed in an all-or-nothing fashion and isolated from concurrent users. The server can be tailored dynamically to apply more sophisticated concurrency control policies appropriate for collaboration. The transaction server also supports applications employing information resources other than web servers, such as legacy databases, CORBA objects, and other hypermedia systems. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. Campbell and J. M. Goodman, </author> <title> HAM: A General Purpose Hypermedia Abstract Machine, </title> <booktitle> ACM Conference on Hypertext and Hypermedia, </booktitle> <year> 1987. </year>
Reference-contexts: Existing hypermedia systems usually employ the CC features of the underlying storage facility, normally a database system <ref> [1, 8, 9] </ref>. The CC features built into the database might then be customized to the needs of the specific hypermedia application. The WWW is by far the largest and most popular hypermedia system, and very attractive as an infrastructure for a variety of applications.
Reference: 2. <author> P. A. Bernstein, V. Hadzilacos and N. Goodman, </author> <title> Concurrency Control and Recovery in Database Systems, </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: INTRODUCTION Concurrency Control (CC) is an essential functionality of a multiuser hypermedia system: in order to maintain data consistency and the correct semantics of user operations, simultaneous access to data items must be coordinated. The concept of transactions <ref> [2] </ref> from database systems gives most of the features hypermedia system builders want, such as atomic operations, locking, and crash recovery.
Reference: 3. <editor> A. K. Elmagarmid, (ed), </editor> <title> Database Transaction Models for Advanced Applications, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: Extensions for multiparticipant tasks can range from the persistent locks of the checkout/checkin model, to shared locks for closely cooperating users, to a sophisticated implementation of one of the collaborative transaction models proposed in the literature <ref> [3] </ref>. Existing hypermedia systems usually employ the CC features of the underlying storage facility, normally a database system [1, 8, 9]. The CC features built into the database might then be customized to the needs of the specific hypermedia application. <p> During the past two decades, researchers in areas such as CAD/CAM, software development environments and distributed authoring have found the traditional database transaction model inappropriate for their systems <ref> [3] </ref>. One of the problems is that the traditional transaction model prevents partial results from being seen by other transactions, and therefore explicitly disallows the possibility of collaboration. As a result, they proposed a number of Extended Transaction Models (ETMs) that relax the traditional CC criteria.
Reference: 4. <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, OMG Document Number 91.12.1, Revision 1.1. </title> <publisher> QED Publishing Group, </publisher> <year> 1992. </year>
Reference: 5. <author> G. Kaiser, W. Hseush, S. Popovich, S. F. Wu, </author> <title> Multiple Concurrency Control Policies in an ObjectOriented Programming System, Research Directions in Concurrent Object Oriented Programming, </title> <editor> Gul Agha, Peter Wegner and Akinori Yonezawa, Editor, </editor> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference: 6. <author> U. K. Wiil, </author> <title> Concurrency Control in Collaborative Hypermedia Systems, </title> <booktitle> ACM Conference on Hypertext and Hypermedia, </booktitle> <year> 1993. </year>
Reference-contexts: CC Features Needed By Hypermedia Systems The concurrency control features required for collaborative hypermedia systems have previously been identified as <ref> [6] </ref>: Event notification: notifying collaborating users of data operations that may interest them. Fine-grained notification: the ability to distinguish operations on individual attributes of a datum. User controlled locking: locking is done explicitly by the users or applications, not implicitly by the data sources.
Reference: 7. <author> G. Heineman and G. Kaiser, </author> <title> An Architecture for Integrating Concurrency Control into Environment Frameworks, </title> <booktitle> 17th International Conference on Software Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: It is not clear how this approach could be applied to WWW, where the web servers are not under the control of the hypermedia system developer - meaning users cannot extend the CC policies by changing the code of the web servers. Pern Pern <ref> [7, 14] </ref> is a transaction management component previously developed in our lab. Its transaction management features are extensible via plugins invoked before and after each of its exported operations (begin transaction, commit-transaction, lock-object, etc.) [7] and by CC policy rules specifying how to handle lock conflicts [14]. <p> Pern Pern [7, 14] is a transaction management component previously developed in our lab. Its transaction management features are extensible via plugins invoked before and after each of its exported operations (begin transaction, commit-transaction, lock-object, etc.) <ref> [7] </ref> and by CC policy rules specifying how to handle lock conflicts [14]. Pern has been integrated with several systems (Oz, PCTE, and Process Weaver) to provide transaction functionality. <p> To make the job of building extended transaction managers easier, Pern introduced the idea of an extensible transaction component that can be integrated with various environment frameworks via a plugin mechanism <ref> [7] </ref>. In our recent research work, we adopted some ideas from Pern, especially how to make the transaction server extensible via callbacks. <p> Plugin Callback Code Application administrators (or, possibly, end-users) extend JPernLite by writing a Java plugin function that operates as a callback of a specified transaction operation. The idea of using plugin code to customize a concurrency control engine is discussed in more detail in <ref> [7] </ref>.
Reference: 8. <author> A. Bapat, J. Wasch, K. Aberer and J. M. Haake, HyperStorM: </author> <title> An Extensible ObjectOriented Hypermedia Engine, </title> <booktitle> ACM Conference on Hypertext and Hypermedia, </booktitle> <year> 1996. </year>
Reference-contexts: Existing hypermedia systems usually employ the CC features of the underlying storage facility, normally a database system <ref> [1, 8, 9] </ref>. The CC features built into the database might then be customized to the needs of the specific hypermedia application. The WWW is by far the largest and most popular hypermedia system, and very attractive as an infrastructure for a variety of applications.
Reference: 9. <author> U. K. Wiil and J. J. Leggett, Workspaces: </author> <title> The HyperDisco Approach to Internet Distribution, </title> <booktitle> ACM Conference on Hypertext and Hypermedia, </booktitle> <year> 1996. </year>
Reference-contexts: Existing hypermedia systems usually employ the CC features of the underlying storage facility, normally a database system <ref> [1, 8, 9] </ref>. The CC features built into the database might then be customized to the needs of the specific hypermedia application. The WWW is by far the largest and most popular hypermedia system, and very attractive as an infrastructure for a variety of applications.
Reference: 10. <institution> Transarc Corp., </institution> <note> Transarc DELight Web Client Technical Description, February 1996. http://www.transarc.com/afs/transarc.com/public/www/ Public/ProdServ/WWW/delov.html </note>
Reference-contexts: The server approach [19] introduces CC functionality into the web servers so that clients can explicitly submit operations as part of a transaction; a collection of cooperating web servers can then realize distributed transactions. The client approach <ref> [10, 15, 20] </ref> places CC policies into the clients, but still often requires the servers to provide very basic CC building blocks such as locks or versions. Neither of these approaches addresses the problem of how to dynamically extend the range of CC policies available to applications. <p> It supports atomic actions that guarantee the traditional all-or-nothing CC policy. The application is written in W3Otranss interface definition language, and a Java applet is generated for the client side to encapsulate the atomic actions. Similarly, the DCE Encina Lightweight Client (DE-Light) <ref> [10] </ref> provides access to transactional services in backend servers, which can be either a web server or a DCE or Encina Application Server. The client sends code to the browser in the form of Java applets that realize the atomic transaction model.
Reference: 11. <author> S. P. Hadjiefthymiades and D. I. Martakos, </author> <title> A generic framework for the deployment of structured databases on the World Wide Web, </title> <booktitle> 5 th International World Wide Web Conference, </booktitle> <year> 1996. </year>
Reference-contexts: Although all web servers speak HTTP, the kind of CC support they provide, if any, can be very different. Furthermore, some legacy database systems have been modified to respond to HTTP requests <ref> [11] </ref>, making the set of apparent web servers more diverse. Also, web servers are distributed around the world and the global network is far less stable and reliable than a local area network in terms of roundtrip delay and accessibility.
Reference: 12. <author> P. Ciancarini, A. Knoche, R. Tolksdorf and F. Vitali, PageSpace: </author> <title> An Architecture to Coordinate Distributed Applications on the Web, </title> <booktitle> 5 th International World Wide Web Conference, </booktitle> <year> 1996. </year>
Reference: 13. <author> U. K. Wiil and J. J. Leggett, Hyperform: </author> <title> A Hypermedia System Development Environment, </title> <journal> ACM Transactions on Information Systems, </journal> <year> 1997. </year>
Reference-contexts: The client sends code to the browser in the form of Java applets that realize the atomic transaction model. These approaches are limited by their focus on conventional transactions, with no capability for extended CC policies. Hyperform Hyperform <ref> [13] </ref> is a toolkit that assists development of dynamic, open and distributed multiuser hypermedia systems. Hyperform allows programmers to extend the data model and data management policies by subclassing the 2EMHFW class of its OODB. Limited extensibility in CC policies is also permitted, by subclassing the CC Object class. <p> Hyperform allows programmers to extend the data model and data management policies by subclassing the 2EMHFW class of its OODB. Limited extensibility in CC policies is also permitted, by subclassing the CC Object class. As hinted by <ref> [13] </ref>, the possible extensions apparently do not include shared locks, since the CC Object provides short databasestyle transactions that are directly integrated with the lower level OODB.
Reference: 14. <author> G. Heineman and G. Kaiser, </author> <title> The CORD Approach to Extensible Concurrency Control, </title> <booktitle> 13 th International Conference on Data Engineering, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: It is not clear how this approach could be applied to WWW, where the web servers are not under the control of the hypermedia system developer - meaning users cannot extend the CC policies by changing the code of the web servers. Pern Pern <ref> [7, 14] </ref> is a transaction management component previously developed in our lab. Its transaction management features are extensible via plugins invoked before and after each of its exported operations (begin transaction, commit-transaction, lock-object, etc.) [7] and by CC policy rules specifying how to handle lock conflicts [14]. <p> Pern Pern [7, 14] is a transaction management component previously developed in our lab. Its transaction management features are extensible via plugins invoked before and after each of its exported operations (begin transaction, commit-transaction, lock-object, etc.) [7] and by CC policy rules specifying how to handle lock conflicts <ref> [14] </ref>. Pern has been integrated with several systems (Oz, PCTE, and Process Weaver) to provide transaction functionality. The work presented in this paper inherits its plugin concept from Pern, but does not yet incorporate its rule-based extended transaction modeling notation.
Reference: 15. <author> M. C. Little, S. K. Shrivastava, S. J. Caughey and D. B. Ingham, </author> <title> Constructing Reliable Web Applications Using Atomic Actions, </title> <booktitle> 6 th International World Wide Web Conference, </booktitle> <year> 1997. </year>
Reference-contexts: The server approach [19] introduces CC functionality into the web servers so that clients can explicitly submit operations as part of a transaction; a collection of cooperating web servers can then realize distributed transactions. The client approach <ref> [10, 15, 20] </ref> places CC policies into the clients, but still often requires the servers to provide very basic CC building blocks such as locks or versions. Neither of these approaches addresses the problem of how to dynamically extend the range of CC policies available to applications. <p> The transaction server can leverage the commit protocol implemented by a TIP-compliant web server to implement its own form of distributed transactions (which might encompass nonstandard CC policies, not addressed by TIP). Atomic Transactions on WWW W3OTrans <ref> [15] </ref> is a toolkit that provides programmers with facilities for implementing web-based applications. It supports atomic actions that guarantee the traditional all-or-nothing CC policy. The application is written in W3Otranss interface definition language, and a Java applet is generated for the client side to encapsulate the atomic actions.
Reference: 16. <author> K. M. Anderson. </author> <title> Integrating Open Hypermedia Systems with the World Wide Web, </title> <booktitle> ACM Conference on Hypertext and Hypermedia, </booktitle> <year> 1997. </year>
Reference-contexts: The CC features built into the database might then be customized to the needs of the specific hypermedia application. The WWW is by far the largest and most popular hypermedia system, and very attractive as an infrastructure for a variety of applications. Building Collaborative Hypermedia Systems <ref> [16] </ref>, CSCW Systems [17], and Workflow Systems [18] on top of WWW have been research topics for several years and have recently moved into the commercial arena. However, the CC features that are required by multiuser hypermedia systems are missing from most WWW servers.
Reference: 17. <author> R. Bentley, W. Appelt, U. Busbach, E. Hinrichs, D. Kerr, S. Sikkel, J. Trevor and G. Woetzel, </author> <title> Basic Support for Cooperative Work on the World Wide Web, International Journal of Human-Computer Studies 46(6): Special issue on Innovative Applications of the World Wide Web, </title> <publisher> Academic Press, </publisher> <year> 1997. </year>
Reference-contexts: The CC features built into the database might then be customized to the needs of the specific hypermedia application. The WWW is by far the largest and most popular hypermedia system, and very attractive as an infrastructure for a variety of applications. Building Collaborative Hypermedia Systems [16], CSCW Systems <ref> [17] </ref>, and Workflow Systems [18] on top of WWW have been research topics for several years and have recently moved into the commercial arena. However, the CC features that are required by multiuser hypermedia systems are missing from most WWW servers.
Reference: 18. <author> G. E. Kaiser, S. E. Dossick, W. Jiang, J. J. Yang and S. X. Ye, </author> <title> WWW-based Collaboration Environments with Distributed Tool Services, Journal of World Wide Web, 1, </title> <publisher> 3-25,1998, Baltzer Science Publishers. </publisher>
Reference-contexts: The WWW is by far the largest and most popular hypermedia system, and very attractive as an infrastructure for a variety of applications. Building Collaborative Hypermedia Systems [16], CSCW Systems [17], and Workflow Systems <ref> [18] </ref> on top of WWW have been research topics for several years and have recently moved into the commercial arena. However, the CC features that are required by multiuser hypermedia systems are missing from most WWW servers.
Reference: 19. <author> TIP Working Group, J. Lyon and K. Evans, et al. </author> <title> Transaction Internet Protocol (TIP), </title> <year> 1997. </year> <month> ftp://ftp.ietf.org/internet-drafts/draft-lyon-itp-nodes-04.txt </month>
Reference-contexts: There have been attempts to build CC capabilities such as locking, checkout/checkin, and even distributed transactions into the WWW infrastructure. There are two major approaches, categorized according to where the bulk of the functionality is placed, the server side or the client side. The server approach <ref> [19] </ref> introduces CC functionality into the web servers so that clients can explicitly submit operations as part of a transaction; a collection of cooperating web servers can then realize distributed transactions. <p> This way, even clients that do not go through the transaction server also share the concurrency control states (and thus cannot break through the back door). Transaction Internet Protocol (TIP) TIP <ref> [19] </ref> is another Internet draft that proposes a simple two-phase commit protocol to support atomic transactions across distributed nodes (the TIP term for servers) on the Internet.
Reference: 20. <author> WEBDAV Working Group, Y. Goland, E. J. Whitehead, A. Faizi, S. Carter, et al. </author> <title> Extensions for Distributed Authoring and Versioning on the WWW WEBDAV, </title> <year> 1997. </year> <month> ftp://ds.internic.net/internet-drafts/draft-jensen-WEBDAV-ext-01.txt </month>
Reference-contexts: The server approach [19] introduces CC functionality into the web servers so that clients can explicitly submit operations as part of a transaction; a collection of cooperating web servers can then realize distributed transactions. The client approach <ref> [10, 15, 20] </ref> places CC policies into the clients, but still often requires the servers to provide very basic CC building blocks such as locks or versions. Neither of these approaches addresses the problem of how to dynamically extend the range of CC policies available to applications. <p> Our work concentrates on extensible CC policies and application semantics, while the scaling and heterogeneity problems are addressed to a lesser extent. RELATED WORK WEBDAV Web Distributed Authoring and Versioning (WEBDAV) <ref> [20] </ref> is an Internet draft proposal for web servers that intend to support locking and versioning of their web pages. WEBDAV defines the HTTP extension that the web servers should speak in order to provide such services.
Reference: 21. <author> Netcraft Corp., </author> <title> The Netcraft Web Server Survey, </title> <note> 1998. http://www.netcraft.com/survey/ </note>
Reference-contexts: Building hypermedia systems on top of WWW (as opposed to dedicated linkbases) also brings the following requirements because of the peculiarities of the WWW infrastructure: Large Scale and Heterogeneity With more than 1.6 million websites <ref> [21] </ref> and hundreds of millions of web pages, WWW is orders of magnitude larger than any other existing distributed database in both the number of objects and the number of sites.
Reference: 22. <author> J. Miller, D. Palaniswami, A. Sheth, K. Kochut and H. Singh, WebWork: </author> <title> METEOR's Web-based Workflow Management System, </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 10, 2, </volume> <month> March </month> <year> 1998. </year> <note> (in press) </note>
Reference-contexts: For example, the same application may need to access web pages, CORBA objects, tables in a relational database, and links and anchor information stored in a linkbase. In this case, if we build transaction functionality into the information resources, or in wrappers around them as in Meteor <ref> [22] </ref>, the adaptation effort is likely to be tedious and expensive. And the complexity of the system will be unnecessarily high. In our approach, the transaction server also acts as a CC gateway among the heterogeneous data sources.
Reference: 23. <author> I. Ben-Shaul and G. E. Kaiser, </author> <title> A Paradigm for Decentralized Process Modeling, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston MA, </address> <year> 1995 </year>
Reference-contexts: which may rise in size beyond 1000 users, we are working on the idea of alliances among distributed transaction servers, where two or more servers make agreements between themselves to cooperate on enforcing certain subsets of their CC policies, analogous to our labs previous work on alliances among workflow engines <ref> [23] </ref>. Multiple instances of transaction servers could share transaction state information with each other, resolve concurrency control conflicts, and allow users to collaborate across transaction servers. Concurrency Control without Locking Throughout this paper, we refer to locking as if it were the main CC mechanism.
References-found: 23

