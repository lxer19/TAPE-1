URL: file://cse.ogi.edu/pub/ogipvm/papers/ulp.ps.gz
Refering-URL: http://www.cse.ogi.edu/DISC/projects/mist/papers.html
Root-URL: http://www.cse.ogi.edu
Email: casasg@cse.ogi.edu  
Title: A User-Level Process Package for Concurrent Computing  
Author: Ravi Konuru, Steve Otto, Jonathan Walpole, Robert Prouty, Jeremy Casas fkonuru, otto, walpole, prouty, 
Keyword: Parallel Virtual Machine(PVM) interface[Sun90].  
Address: 20000 NW Walker Road, P. O. Box 91000, Portland OR 97291-1000  
Affiliation: Department of Computer Science Engineering Oregon Graduate Institute of Science Technology  
Pubnum: TR-93-016  
Abstract: A lightweight user-level process(ULP) package for parallel computing is described. Each ULP has its own register context, stack, data and heap space and communication with other ULPs is performed using locally synchronous, location transparent, message passing primitives. The aim of the package is to provide support for lightweight over-decomposition, optimized local communication and transparent dynamic migration. The package supports a subset of the 
Abstract-found: 1
Intro-found: 1
Reference: [ABLL91] <author> T. E. Anderson, B. N. Bershad, E. D. Lazowska, and H. M. Levy. </author> <title> Scheduler activations: Effective kernel support for user-level management of parallelism. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 95-109, </pages> <address> Pacific Grove, CA, </address> <month> October </month> <year> 1991. </year> <note> ACM. </note>
Reference: [AE85] <author> R. Agrawal and A. K. Ezzat. </author> <title> Processor sharing in NEST: A network of computer workstations. </title> <booktitle> In The 1st International Conference on Computer Workstations, </booktitle> <pages> pages 198-208. </pages> <publisher> IEEE, </publisher> <year> 1985. </year>
Reference: [CAL + 89] <author> J. Chase, F. Amador, E. Lazowska, H. Levy, and R. Littlefield. </author> <title> The Amber system: Parallel programming on a network of multiprocessors. </title> <type> Technical Report 89-04-01, </type> <institution> Dept of Computer Science and Engineering, University of Washington, </institution> <year> 1989. </year> <note> Also in 12th ACM SOSP. 13 </note>
Reference: [FM92] <author> E. W. Felten and D. McNamee. </author> <title> Improving the performance of message passing appli-cations by multithreading. </title> <type> Technical Report 92-09-07, </type> <institution> Dept of Computer Science and Engineering, University of Washington, </institution> <year> 1992. </year>
Reference-contexts: A return from a message receive primitive implies that the the requested message has been received. 1 and context switch requires no kernel intervention. Further, multi-threading through over--decomposition avoids the use of asynchronous message based programming and therefore greatly decreases the complexity of applications <ref> [FM92] </ref>. * Transparent migration: The ULP layer provides support for transparent migration of ULPs that perform all their non-computation related functions through the ULP interface. A higher level policy module, co-existing with the ULP package, can invoke the ULP package to perform ULP migration.
Reference: [LLM88] <author> M. Litzkow, M. Livny, and M. </author> <title> Mutka. Condor | a hunter of idle workstations. </title> <booktitle> In The 8th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 104-111, </pages> <address> San Jose, CA, </address> <month> June </month> <year> 1988. </year> <note> IEEE. </note>
Reference: [MSLM91] <author> B. D. Marsh, M. L. Scott, T. J. LeBlanc, and E. P. Markatos. </author> <title> First-class user-level threads. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 95-109, </pages> <address> Pacific Grove, CA, </address> <month> October </month> <year> 1991. </year> <note> ACM. </note>
Reference: [Op93] <author> Ogi-pvm. </author> <title> A distributed load manager for shared workstation networks. </title> <type> Technical report, </type> <institution> Oregon Graduate Institute of Sci. & Tech., </institution> <year> 1993. </year> <note> In Preparation. </note>
Reference-contexts: All policy issues related to detecting migration points and destination nodes for migration are handled by a global job scheduler in conjunction with a load monitor that runs as a separate process in the system (see fig 5). Whenever migration is necessary <ref> [Op93] </ref>, the global job scheduler asynchronously informs the ULP library that migration has to be performed and the destination of migration.
Reference: [PKB + 91] <author> M. L. Powell, S. R. Kleiman, S. Barton, D. Shah, D. Stein, and M. Weeks. </author> <title> SunOS multi-thread architecture. </title> <booktitle> In Usenix Symposium Proceedings, </booktitle> <pages> pages 1-14, </pages> <address> Dallas, TX, </address> <month> January </month> <year> 1991. </year> <booktitle> USENIX. </booktitle>
Reference: [PM83] <author> M. L. Powell and B. P. Miller. </author> <title> Process migration in DEMOS/MP. </title> <booktitle> In Proceedings of the 9th Symposium on Operating System Principles, </booktitle> <pages> pages 110-119, </pages> <month> October </month> <year> 1983. </year>
Reference-contexts: It is the responsibility of the ULP library to implement the mechanisms for achieving migration. 8 Our algorithm for migration is based on ideas similar to those of Mike Powell et al <ref> [PM83] </ref> and Jonathan Smith et al [SI89]. A level of indirection is maintained by the ULP library between the file operations executed by the application and the file operations implemented by the operating system, i.e., there is an indirection file descriptor table maintained by the ULP library.
Reference: [SCSK93] <author> M. Swanson, T. Critchlow, L. Stoller, and R. Kessler. </author> <title> The design of the schizophrenic workstation system. </title> <booktitle> In Usenix Symposium Proceedings, </booktitle> <pages> pages 291-306, </pages> <address> Santa Fe, NM, </address> <month> April </month> <year> 1993. </year> <booktitle> USENIX. </booktitle>
Reference: [SI89] <author> J. M. Smith and J. Ioannidis. </author> <title> Implementing remote fork() with checkpoint/restart. </title> <journal> IEEE Technical Committee on Operating Systems Newsletter, </journal> <volume> 3(1) </volume> <pages> 15-19, </pages> <month> Winter </month> <year> 1989. </year>
Reference-contexts: It is the responsibility of the ULP library to implement the mechanisms for achieving migration. 8 Our algorithm for migration is based on ideas similar to those of Mike Powell et al [PM83] and Jonathan Smith et al <ref> [SI89] </ref>. A level of indirection is maintained by the ULP library between the file operations executed by the application and the file operations implemented by the operating system, i.e., there is an indirection file descriptor table maintained by the ULP library.
Reference: [Sun90] <author> V. S. Sunderam. </author> <title> PVM: A framework for parallel distributed computing. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 2(4) </volume> <pages> 315-339, </pages> <month> December </month> <year> 1990. </year> <month> 14 </month>
Reference-contexts: The rest of this paper is organized as follows; The ULP programming model is described in section 2. The design of the ULP package is presented in section 3. The mapping of PVM interface <ref> [Sun90] </ref> to ULP operations and the scope for further optimizations is presented in section 4. The engineering choices made in the implementation of the ULP package raises several design and implementation issues and some of these are discussed in section 5.
References-found: 12

