URL: http://www-ksl.stanford.edu/knowledge-sharing/papers/redux-prime.ps
Refering-URL: http://www-ksl.stanford.edu/knowledge-sharing/papers/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: petrie@mcc.com  
Title: The Redux 0 Server  
Author: Charles Petrie 
Address: 3500 West Balcones Center Drive Austin, TX 78759  
Affiliation: MCC Enterprise Integration Division  
Abstract: Redux 0 is a subset of the full REDUX model[7]. The latter performs problem solving. In contrast Redux 0 does not and acts only as a decision maintenance server. It takes objects of types defined in an ontology of decision components and maintains dependencies between them. Redux 0 is domain-independent. The dependency relationships are maintained on the basis of proposition type and not content, except for some string matching. Redux 0 servers are proposed as a mechanism for federating heterogeneous design agents by encapsulating their design decisions within a simple model and providing coordination services, especially for design revision. This proposal is described within the context of the SHADE and PACT projects.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bridgeland, D. and M. Huhns, </author> <title> "Distributed Truth Maintenance," </title> <booktitle> Proc. AAAI-90, </booktitle> <pages> pp. 72-77, </pages> <year> 1990. </year>
Reference-contexts: There is another general principle that is useful here: requests for information should be recorded and used for notification upon revision of the information. This is the basic principle behind the distributed truth maintenance system of <ref> [1] </ref>. In this case, the fact that ENG-3 needed the motor identity from ENG-1 implies that ENG-1 should always tell ENG-3 if the motor identity changes. There is no requirement for a domain-specific SHADE relevance theory that if a component changes, its features may change.
Reference: [2] <author> Cutkosky, M., et al., </author> <title> "PACT An Experiment in Integrating Concurrent Engineering Systems,", </title> <note> To appear in IEEE Computer, January, 1993. Also available as EIT TR 92-02.1, </note> <institution> Enterprise Integration Technologies, Palo Alto. </institution>
Reference-contexts: This isolates the predicates on which the various agents must agree, and the degree to which the semantics are common. In an example from <ref> [2] </ref>, one agent mentions the domain-specific predicates closed-form and pmx in an assertion encapsulated in a KQML message using the domain-independent per-formative interested-in. This use of the performative identifies at least two points at which participating agents must perform semantic unification, rather than trying to unify complete models. <p> This was the case described in <ref> [2] </ref> because the first motor choice was determined to be inadequate for the load. In REDUX, the inadequacy of the motor would be represented as a constraint violation.
Reference: [3] <author> Finin, T., McKay, D., and Fritz-son, R., </author> <title> "An Overview of KQML: A Knowledge Query and Manipulation Language," </title> <type> Technical Report, </type> <institution> Computer Science Dept., U. of Maryland, </institution> <year> 1992. </year>
Reference-contexts: So it is possible to minimize how much the two systems have to agree upon the semantics of the terms that each formally represents. The PACT approach is for participating agents to communicate through a language, KQML <ref> [3] </ref>, that specifies a small set of performatives, such as assert, retract, or query. This isolates the predicates on which the various agents must agree, and the degree to which the semantics are common.
Reference: [4] <author> Genesereth, M. and Fikes, R., </author> <title> "Knowledge Interchange Format, Version 3.0 Reference Manual," </title> <type> Technical Report KSL 91-1, </type> <institution> Stanford University Logic Group, </institution> <year> 1992. </year>
Reference: [5] <author> Gruber, T., "Ontolingua: </author> <title> A Mechanism to Support Portable Ontologies," </title> <type> Technical Report KSL 91-66, </type> <institution> Stanford University, Knowledge Systems Laboratory, </institution> <year> 1992. </year>
Reference-contexts: If the requirement presented here is not small enough, then perhaps no general model is adequate for the problem of cooperating distributed design and planning. The Redux 0 theory is formally described below in Section 3. This formal description is intended for conversion to Ontolingua <ref> [5] </ref> or some other KIF [4]-based system for portability. The informal idea is that Redux 0 provides a theory for determining the effects upon decisions of changing conditions and the making and revision of other decisions. Redux 0 is presented here as a server.
Reference: [6] <author> Heimbinger, D. and McLeod D. </author> <title> "A Federated Architecture for Information Management," </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 3(3), </volume> <month> January </month> <year> 1985. </year>
Reference-contexts: 1 Introduction The SHADE and PACT [10] projects take a federating <ref> [6, 9] </ref> approach to the problem of coordinating distributed design.
Reference: [7] <author> Petrie, C., </author> <title> "Constrained Decision Revision," </title> <note> Proc. AAAI-92. Also MCC TR EID-414-91, </note> <month> December, </month> <year> 1991. </year>
Reference-contexts: But there is no theory of message types that would allow distributed agents to make value-added inferences. What one needs is a model of interactions among systems that minimizes the domain knowledge required for agents to cooperate. REDUX <ref> [7] </ref> is a general model of design and planning that emphasizes the propagation of the effects of change. We propose that it can be used as a framework for communication between systems. <p> Constraints are that which are violated by assignments, but it is up to the problem solvers to detect constraint violations and say which assignments need to be rejected in order to resolve the violation. Redux 0 7 This is an extension of the basic REDUX model of <ref> [7] </ref>. 8 G3 no longer has a supporting-decision as defined in Defi nition 4 in Section 3. 9 Rejection reasons are formally described in Definitions 5 and 6 in Section 3. servers only retract the necessary decisions and propagate the consequences. <p> Thus the optimality rationale of the second decision depends upon 13 This is also known as a truth maintenance graph. 14 The reader will note that not all of the required dependencies (e.g., goal satisfaction) are represented here. See <ref> [7] </ref> for detail not possible to give here. the validity of the reason for the rejection of the first. <p> The RE-DUX model has previously been implemented as a full problem solver useful for a certain class of problems as described in <ref> [7] </ref>. The idea presented here is to separate out the part of the model that performs decision maintenance and provide it as a network server to other problem solvers as a way to federate heterogeneous agents.
Reference: [8] <author> Petrie, C. </author> <title> "A Minimalist Model for Coordination", </title> <booktitle> AAAI-92 Workshop on Design Rationale. Also in Enterprise Intergration Modeling, </booktitle> <publisher> MIT Press, </publisher> <month> October, </month> <year> 1992. </year>
Reference-contexts: In effect, each copy of Redux 0 becomes an "agent in a box" for each user. 2 We begin with an example, loosely adapted from PACT and SHADE. 2 The knowledge acquisition problem is difficult: a phased implementation is suggested in <ref> [8] </ref>. 2 Example In the PACT/SHADE planar manipulator redesign scenario, the motor used is discovered to be inadequate for a new load specification. A larger motor is substituted. The change is annotated in a journal. Somehow, change notifications must be sent to other engineers.
Reference: [9] <author> Petrie, C. </author> <title> "Introduction", Enterprise Intergration Modeling, </title> <publisher> MIT Press, </publisher> <month> October, </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The SHADE and PACT [10] projects take a federating <ref> [6, 9] </ref> approach to the problem of coordinating distributed design.
Reference: [10] <author> Tenenbaum, J., Weber, J., and Gruber, T., </author> <title> "Enterprise Integration: Lessons from SHADE and PACT," Enterprise Intergration Modeling, </title> <editor> C. Petrie ed., </editor> <publisher> MIT Press, </publisher> <month> October, </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The SHADE and PACT <ref> [10] </ref> projects take a federating [6, 9] approach to the problem of coordinating distributed design. <p> A larger motor is substituted. The change is annotated in a journal. Somehow, change notifications must be sent to other engineers. To quote from <ref> [10] </ref>, One is for the manufacturing engineer responsible for milling the frame for the manipulator. The new motor has a larger shaft diameter, requiring a larger hole in the mounting bracket.
References-found: 10

