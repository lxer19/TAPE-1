URL: http://www.win.tue.nl/cs/ipa/uitp/papers/Backhouse.ps.gz
Refering-URL: http://www.win.tue.nl/cs/ipa/uitp/proceedings.html
Root-URL: http://www.win.tue.nl
Email: Email: frolandb,riverg@win.tue.nl  
Title: Extracting Proofs from Documents  
Author: Roland Backhouse and Richard Verhoeven 
Date: March 27, 1998  
Address: PO Box 513, 5600 MB Eindhoven, The Netherlands  
Affiliation: Department of Mathematics and Computing Science Eindhoven University of Technology  
Abstract: Often, theorem checkers like PVS are used to check an existing proof, which is part of some document. Since there is a large difference between the notations used in the documents and the notations used in the theorem checkers, it is usually a laborious task to convert an existing proof into a format which can be checked by a machine. In the system that we propose, the author is assisted in the process of converting an existing proof into the PVS language and having it checked by PVS. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Myla Archer and Constance Heitmeyer. </author> <title> Human-style theorem proving using PVS. </title> <editor> In Elsa Gunter and Amy Felty, editors, </editor> <title> Theorem Proving in Higher Order Logics: </title> <booktitle> 10th International Conference, TPHOLs '97, volume 1275 of Lecture Notes in Computer Science, </booktitle> <pages> pages 33-48, </pages> <address> Murray Hill, NJ, </address> <month> August </month> <year> 1997. </year> <note> Springer-Verlag. </note>
Reference-contexts: The best solution would be to block editing actions on certain parts of the document, such that PVS is always computing results which are still valid and needed. 6 Related work and conclusions There are already some projects to improve the interface of PVS. TAME <ref> [1] </ref> is a layer on top of PVS for reasoning about timed automata and consists of a number of strategies to reduce the number of steps made in a typical PVS proof to the number of steps made in a hand-made proof.
Reference: [2] <author> R.C. Backhouse, R. Verhoeven, and O. Weber. Matsad: </author> <title> A system for on-line preparation of mathematical documents. </title> <booktitle> Software Concepts and Tools, </booktitle> <volume> 18 </volume> <pages> 80-89, </pages> <year> 1997. </year> <month> 8 </month>
Reference-contexts: Ultimately, as argued by Simonyi [13], such systems will turn programmers into language designers. The basis for our own work in this direction is the Matsad editor <ref> [3, 2] </ref> which we have developed as a tool to assist those writing articles containing a large amount of advanced mathematics.
Reference: [3] <author> Roland Backhouse and Richard Verhoeven. </author> <note> Matsad Ergonomic Document Prepara--tion, version 0.60 edition, February 1996. Manual of the Matsad system. See also: http://www.win.tue.nl/cs/wp/mathspad/. </note>
Reference-contexts: Ultimately, as argued by Simonyi [13], such systems will turn programmers into language designers. The basis for our own work in this direction is the Matsad editor <ref> [3, 2] </ref> which we have developed as a tool to assist those writing articles containing a large amount of advanced mathematics.
Reference: [4] <author> Bettina Buth. </author> <title> Operation Refinement Proofs for VDM-like Specifications. </title> <type> PhD thesis, </type> <institution> Institute of Computer Science and Practical Mathematics of the Christian-Albrechts-University Kiel, </institution> <month> February </month> <year> 1995. </year> <note> See also: http://www.informatik.uni-bremen.de/ bb. </note>
Reference-contexts: However, since the PVS interface is used, there is still a gap between the notational conventions used by PVS and those used in the documentation. The system PAMELA <ref> [4] </ref> is designed to check partial correctness of VDM-like specifications in the area of code generators. By providing a connection with PVS, the system supports a larger class of specifications, using PVS to discharge proof obligations.
Reference: [5] <author> P. Naur (Ed.). </author> <title> Revised report on the algorithmic language ALGOL 60. </title> <journal> Comm. ACM, </journal> <volume> 6 </volume> <pages> 1-17, </pages> <month> January </month> <year> 1963. </year> <note> Also in The Computer Journal, 5: 349-67 (1963); Numerische Mathematik, 4: </note> <month> 420-52 </month> <year> (1963). </year>
Reference-contexts: 1 Introduction The now-classic ALGOL 60 report <ref> [5] </ref> recognized three different levels of language: a reference language, a publication language and several hardware representations, whereby the publication language was intended to admit variations on the reference language and was to be used for stating and communicating processes.
Reference: [6] <author> D.E. Knuth. </author> <title> Literate programming. </title> <journal> Computer Journal, </journal> <volume> 27(2) </volume> <pages> 97-111, </pages> <year> 1984. </year>
Reference-contexts: Since PAMELA provides its own interface, communication between PVS and another system seems to be feasible and some experience is available. Simons [12] has been working on a system to combine proofs in Isabelle [8] with documentation. The system uses the structured documentation technique introduced by Knuth <ref> [6] </ref> to allow one file to contain both the proofs and the documentation and uses programs to separate those.
Reference: [7] <author> S. Owre, N. Shankar, and J. M. Rushby. </author> <title> The PVS Specification Language. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> February </month> <year> 1993. </year> <note> See also: http://www.csl.sri.com/pvs.html. </note>
Reference-contexts: In his thesis, Vaccari discusses the calculational construction of hardware circuits, where the first 6 chapters contain theoretical discussions of relation algebra, circuits and regular language recognizers, while the later chapters contain simulations of circuits using Ruby [11] and Tangram [10] and a machine verification of the theory using PVS <ref> [7] </ref>. Vaccari used Matsad in the process of developing and documenting the "theoretical" designs in the initial chapters, and then hand-coded these into the forms acceptable to Ruby, Tangram and PVS. Inevitably there is a lot of duplication of information since each system requires its own format.
Reference: [8] <author> Lawrence C. Paulson. </author> <title> Isabelle: a Generic Theorem Prover. </title> <booktitle> Number 828 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer - Berlin, </publisher> <year> 1994. </year>
Reference-contexts: Since PAMELA provides its own interface, communication between PVS and another system seems to be feasible and some experience is available. Simons [12] has been working on a system to combine proofs in Isabelle <ref> [8] </ref> with documentation. The system uses the structured documentation technique introduced by Knuth [6] to allow one file to contain both the proofs and the documentation and uses programs to separate those.
Reference: [9] <author> Daniel Peeters. </author> <title> Towards a publication style of functional programming. </title> <type> Master's thesis, </type> <institution> Eindhoven University of Technology, Department of Mathematics and Computing Science, </institution> <month> June </month> <year> 1997. </year>
Reference-contexts: It would be better if all interaction could be directed with one interface and one format, which takes care of updating and manipulating all the files needed by the different systems. In an initial investigation <ref> [9] </ref> we have looked into linking Matsad with Jones' Gofer interpreter with the goal of allowing publication-style development of functional programs. The current paper is a preliminary investigation of the problems that occur in trying to link a Matsad-like system to a theorem prover.
Reference: [10] <author> Frits D. Schalij. </author> <title> Tangram manual. </title> <type> Technical Report UR 008/93, </type> <institution> Philips Electronics N.V., </institution> <year> 1996. </year>
Reference-contexts: In his thesis, Vaccari discusses the calculational construction of hardware circuits, where the first 6 chapters contain theoretical discussions of relation algebra, circuits and regular language recognizers, while the later chapters contain simulations of circuits using Ruby [11] and Tangram <ref> [10] </ref> and a machine verification of the theory using PVS [7]. Vaccari used Matsad in the process of developing and documenting the "theoretical" designs in the initial chapters, and then hand-coded these into the forms acceptable to Ruby, Tangram and PVS.
Reference: [11] <author> Robin Sharp and Ole Rasmussen. </author> <title> An introduction to Ruby. 2nd edition. </title> <type> Technical report, </type> <institution> Dept. of Computer Science, Technical University of Denmark, </institution> <year> 1995. </year> <note> Available at ftp://ftp.it.dtu.dk/pub/Ruby/intro.ps.Z. </note>
Reference-contexts: In his thesis, Vaccari discusses the calculational construction of hardware circuits, where the first 6 chapters contain theoretical discussions of relation algebra, circuits and regular language recognizers, while the later chapters contain simulations of circuits using Ruby <ref> [11] </ref> and Tangram [10] and a machine verification of the theory using PVS [7]. Vaccari used Matsad in the process of developing and documenting the "theoretical" designs in the initial chapters, and then hand-coded these into the forms acceptable to Ruby, Tangram and PVS.
Reference: [12] <author> Martin Simons. </author> <title> Proof presentation for Isabelle. </title> <editor> In Elsa Gunter and Amy Felty, editors, </editor> <title> Theorem Proving in Higher Order Logics: </title> <booktitle> 10th International Conference, TPHOLs '97, volume 1275 of Lecture Notes in Computer Science, </booktitle> <pages> pages 259-274, </pages> <address> Murray Hill, NJ, </address> <month> August </month> <year> 1997. </year> <note> Springer-Verlag. </note>
Reference-contexts: By providing a connection with PVS, the system supports a larger class of specifications, using PVS to discharge proof obligations. Since PAMELA provides its own interface, communication between PVS and another system seems to be feasible and some experience is available. Simons <ref> [12] </ref> has been working on a system to combine proofs in Isabelle [8] with documentation. The system uses the structured documentation technique introduced by Knuth [6] to allow one file to contain both the proofs and the documentation and uses programs to separate those.
Reference: [13] <author> Charles Simonyi. </author> <title> The death of computer languages, the birth of intentional programming. </title> <booktitle> Proceedings of the 28th Annual International Seminar on the Teaching of Computing Science at University Level, </booktitle> <institution> Sponsored by ICL and University of Newcastle upon Tyne, Department of Computing Science, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: A similar project (on a much larger scale) is the Intentional Programming project being conducted by Microsoft under the direction of Charles Simonyi. Ultimately, as argued by Simonyi <ref> [13] </ref>, such systems will turn programmers into language designers. The basis for our own work in this direction is the Matsad editor [3, 2] which we have developed as a tool to assist those writing articles containing a large amount of advanced mathematics.
Reference: [14] <author> Matteo Vaccari. </author> <title> Calculational Derivation of Circuits. </title> <type> PhD thesis, </type> <institution> Department of Computing Science, Universita degli Studi di Milan, </institution> <month> December </month> <year> 1997. </year> <note> Draft version, to be published. </note>
Reference-contexts: Our next priority | the subject of the current project| is to explore architectures that will enable the coupling of Matsad, or a similar system, to compilers and theorem provers. The recent Ph.D. thesis by Matteo Vaccari <ref> [14] </ref> is illustrative of what we ultimately want to achieve.
Reference: [15] <author> Joseph Weizenbaum. </author> <title> Contextual understanding by computers. </title> <journal> CACM, </journal> <volume> 10(8) </volume> <pages> 474-480, </pages> <year> 1967. </year> <month> 9 </month>
Reference-contexts: With this knowledge, much of the PVS input could be extracted. This form of extracting information can be compared with the methods used in the Eliza system <ref> [15] </ref> and other natural language processing systems. 5 Problems and Solutions It is obvious that constructing such a system is not trivial and that a lot of problems will occur while trying.
References-found: 15

