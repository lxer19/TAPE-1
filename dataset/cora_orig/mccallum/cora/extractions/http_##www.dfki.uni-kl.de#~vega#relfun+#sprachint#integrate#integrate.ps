URL: http://www.dfki.uni-kl.de/~vega/relfun+/sprachint/integrate/integrate.ps
Refering-URL: http://www.dfki.uni-kl.de/~vega/relfun.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: boley@informatik.uni-kl.de  
Title: A Relational-Functional Integration for Declarative Programming  
Author: Harold Boley 
Note: All abstract notions are illustrated by concrete declarative programs.  
Address: Box 2080, 67608 Kaiserslautern, Germany  
Affiliation: DFKI  
Abstract: A relational-functional kernel language is introduced that integrates essential declarative constructs: logic variables and non-determinism from the relational paradigm with nested and higher-order operations from the functional paradigm. Operator definitions use `valued clauses', subsuming relational Horn clauses and functional (conditional or unconditional) directed equations. Their semantics complements the atoms in relational Herbrand models by `molecules', which pair functions, applied to argument terms, with returned-value terms. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Harold Boley. </author> <title> Extended Logic-plus-Functional Programming. </title> <editor> In Lars-Henrik Eriks-son, Lars Hallnas, and Peter Schroeder-Heister, editors, </editor> <booktitle> Proceedings of the 2nd International Workshop on Extensions of Logic Programming, ELP '91, Stockholm 1991, volume 596 of LNAI. </booktitle> <publisher> Springer, </publisher> <year> 1992. </year>
Reference-contexts: Integrations of the relation and function constructs can be loose and tight, practically and theoretically oriented. Under this perspective, the integration in the historical Loglisp [7] is loose/practical, in the standard proposal Curry [5] is loose/theoretical, in Godel's successor Escher [6] is tight/theoretical, and in our Relfun <ref> [1] </ref> is tight/practical. In order to distinguish real integration constructs from additional `features', research on minimally necessary integrative notions is required. <p> Classical functions and relations become extrema in the 4-dimensional con struct space shown in the figure. Then, our new fundamental basis can be extended as a whole by finite do mains, sort hierarchies, determinism specifications, etc. <ref> [1] </ref>. Serialization Program (R1,F1,F2): Suppose we are given the task to trans-form a list of symbols into the list of their lexicographic serial numbers. A sample transformation is [d,a,l,l,a,s] ; [2,1,3,3,1,4]. <p> Soundness and completeness were shown generally [2]. 5 Conclusions The Relfun language is implemented by a combination of source-text transformers and compilers for Warren-Abstract-Machine (WAM) emulators [8] extended by value returning via the temporary WAM register X1 <ref> [1] </ref>.
Reference: 2. <author> Harold Boley. </author> <title> A Direct Semantic Characterization of RELFUN. </title> <editor> In E. Lamma and P. Mello, editors, </editor> <booktitle> Proceedings of the 3rd International Workshop on Extensions of Logic Programming, ELP '92, Bologna 1992, volume 660 of LNAI. </booktitle> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: Soundness and completeness were shown generally <ref> [2] </ref>. 5 Conclusions The Relfun language is implemented by a combination of source-text transformers and compilers for Warren-Abstract-Machine (WAM) emulators [8] extended by value returning via the temporary WAM register X1 [1].
Reference: 3. <author> Harold Boley, Markus Perling, and Michael Sintek. </author> <title> Transforming Workpiece Geometries into Lathe-NC Programs by Qualitative Simulation. </title> <booktitle> In 15th IMACS World Congress on Scientific Computation, Modelling and Applied Mathematics. </booktitle> <publisher> Wissenschaft und Technik Verlag, </publisher> <address> Berlin, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: of logic variables to the functional paradigm for computations with ground-I/O (encapsulated partial data structures). (4) Foundation of the semantics of functions on the same model-theoretic level as relations. (5) Development of relational-functional transformers, compilers, and abstract machines. (6) Application studies on declarative graph processing, materials selection, and NC-program generation <ref> [3] </ref>. Among the open questions let us mention search control (not only via determinism specifications but also via Relfun's sorts and modules), AND/OR-parallelism, more powerful higher-order operations, and denotational semantics for a full relational-functional language.
Reference: 4. <author> Michael Hanus. </author> <title> The Integration of Functions into Logic Programming: From Theory to Practice. </title> <journal> Journal of Logic Programming, </journal> <volume> 19,20:583-628, </volume> <year> 1994. </year>
Reference-contexts: While the declarative disadvantages have decreased with better compilers [8], their advantages are still disturbed by the relational-functional paradigm gap. Hence there are now stronger attempts to integrate these declarative paradigms <ref> [4] </ref>, especially motivated by the avoidance of duplication in documentation/standardization, development/maintenance/porting, and teaching, as well as by the research of common design principles, semantics (1st/higher-order operators), and implementation (WAM/SECD compilers). Integrations of the relation and function constructs can be loose and tight, practically and theoretically oriented.
Reference: 5. <author> Michael Hanus. </author> <title> A Unified Computation Model for Functional and Logic Programming. </title> <booktitle> In POPL'97, </booktitle> <address> Paris 1997. </address>
Reference-contexts: Integrations of the relation and function constructs can be loose and tight, practically and theoretically oriented. Under this perspective, the integration in the historical Loglisp [7] is loose/practical, in the standard proposal Curry <ref> [5] </ref> is loose/theoretical, in Godel's successor Escher [6] is tight/theoretical, and in our Relfun [1] is tight/practical. In order to distinguish real integration constructs from additional `features', research on minimally necessary integrative notions is required.
Reference: 6. <author> John W. Lloyd. </author> <booktitle> Combining Functional and Logic Programming Languages. In 1994 International Logic Programming Symposium, </booktitle> <address> ILPS'94. </address>
Reference-contexts: Integrations of the relation and function constructs can be loose and tight, practically and theoretically oriented. Under this perspective, the integration in the historical Loglisp [7] is loose/practical, in the standard proposal Curry [5] is loose/theoretical, in Godel's successor Escher <ref> [6] </ref> is tight/theoretical, and in our Relfun [1] is tight/practical. In order to distinguish real integration constructs from additional `features', research on minimally necessary integrative notions is required.
Reference: 7. <author> J. A. Robinson and E. E. Sibert. LOGLISP: </author> <title> An Alternative to Prolog. </title> <journal> Machine Intelligence, </journal> <volume> 10 </volume> <pages> 399-419, </pages> <year> 1982. </year>
Reference-contexts: Integrations of the relation and function constructs can be loose and tight, practically and theoretically oriented. Under this perspective, the integration in the historical Loglisp <ref> [7] </ref> is loose/practical, in the standard proposal Curry [5] is loose/theoretical, in Godel's successor Escher [6] is tight/theoretical, and in our Relfun [1] is tight/practical. In order to distinguish real integration constructs from additional `features', research on minimally necessary integrative notions is required.
Reference: 8. <author> Peter Van Roy. </author> <year> 1983-1993: </year> <title> The Wonder Years of Sequential Prolog Implementation. </title> <journal> The Journal of Logic Programming, </journal> <volume> 19,20:385-441, </volume> <year> 1994. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: In fact, separate declarative paradigms emerged, already before OOP, namely relational (logic) and functional (equational) programming. Relational languages have been developing from Prolog to Godel and Mercury; functional languages, from Lisp to ML and Haskell. While the declarative disadvantages have decreased with better compilers <ref> [8] </ref>, their advantages are still disturbed by the relational-functional paradigm gap. <p> Soundness and completeness were shown generally [2]. 5 Conclusions The Relfun language is implemented by a combination of source-text transformers and compilers for Warren-Abstract-Machine (WAM) emulators <ref> [8] </ref> extended by value returning via the temporary WAM register X1 [1].
References-found: 8

