URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3407/3407.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Updating Disjunctive Databases via Model Trees  
Author: John Grant Jaros law Gryz Jack Minker 
Address: College Park  College Park  
Affiliation: Computer and Information Sciences, Towson State University  Computer Science Department, University of Maryland,  UMIACS and Computer Science Department, University of Maryland,  
Abstract: In this paper we study the problem of updating disjunctive databases, which contain indefinite data given as positive disjunctive clauses. We give correct algorithms for the insertion of a clause into and the deletion of a clause from such databases. Although the algorithms presented here are oriented towards model trees, they apply to any representation of minimal models.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.A. Fernandez, J. Minker, and A. Yahya. </author> <title> Computing perfect and stable models using ordered model trees. </title> <institution> Technical Report CS-TR-3195 and UMIACS-TR-93-136, University of Maryland Institute for Advanced Computer Studies, College Park, MD 20742, </institution> <month> December </month> <year> 1993. </year> <note> Submitted to the Journal of Computational Intelligence. </note>
Reference-contexts: DB 0 consists of two unrelated sets of clauses (databases): DB 0 1 = f [a; b; c]; [b; d]g, and DB 0 1 For ordered model trees such representation is unique for a given database. See <ref> [1] </ref> for a description of ordered model trees. 3 fb d g f [e; f ]; [f; g]; [e; h]g.
Reference: [2] <author> Jose Alberto Fernandez. </author> <title> Disjunctive Deductive Databases. </title> <type> PhD thesis, </type> <institution> University of Maryland, Department of Computer Science, College Park, </institution> <year> 1994. </year>
Reference-contexts: Sometimes, a database can be partitioned into sets of related clauses called clusters each of which can be represented by a separate model tree. The representation of the database is then called a model forest. For a formal description of model forest see <ref> [2] </ref>. The following is an example of a database partitioned as a model forest. Example 2 Let DB 0 = f [a; b; c]; [b; d]; [e; f ]; [f; g]; [e; h]g.
Reference: [3] <author> Jose Alberto Fernandez, John Grant, and Jack Minker. </author> <title> Model theoretic approach to view updates in deductive databases. </title> <type> Technical Report CS-TR-3335, </type> <institution> Department of Computer Science, University of Maryland, College Park, MD 20742, </institution> <year> 1994. </year>
Reference-contexts: Algorithms for the view update problem for normal disjunctive databases are presented in [5] and <ref> [3] </ref>. The content of the rest of the paper is as follows. Section 2 contains basic definitions and notation. An algorithm for inserting a clause, including a proof of its correctness, is given in Section 3. <p> We note that this algorithm was implicitly given in [4]. The next Lemma is taken from <ref> [3] </ref> and thus presented here without a proof. Lemma 3.1 Let DB 1 and DB 2 be disjunctive databases. Then, DB 2 j= DB 1 iff 8M 2 MM DB 2 9M 0 2 MM DB 1 s.t. M 0 M . <p> While our work is oriented towards the representation of disjunctive databases by model trees, a compact representation, the algorithms apply to any representation of disjunctive databases in terms of minimal models. Putting our results together with the solution of the view update problem presented in [5] and <ref> [3] </ref> in terms of updating the underlying disjunctive database, we now have a complete solution of the view update problem for various classes of normal deductive disjunctive databases. We plan to develop an implementation of deductive disjunctive databases using the model tree representation technique. <p> We plan to develop an implementation of deductive disjunctive databases using the model tree representation technique. In this implementation we plan to use the algorithms given in this paper to implement the update operations. Also, by combining the algorithms here with the algorithms in [5] and <ref> [3] </ref>, we will be able to implement view updates for disjunctive databases. 21
Reference: [4] <author> Jose Alberto Fernandez and Jack Minker. </author> <title> Bottom-up evaluation of Hierarchical Disjunctive Deductive Databases. </title> <editor> In Koichi Furukawa, editor, </editor> <booktitle> Logic Programming Proceedings of the Eighth International Conference, </booktitle> <pages> pages 660-675. </pages> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: In such databases it is not a straightforward process to update data in certain representations. We consider the update problem for disjunctive databases represented by model trees. The concept of a model tree was introduced in <ref> [4] </ref> to provide a compact representation for disjunctive databases in terms of minimal models. fl This research has been supported by the following grants: NSF IRI-9200898, NSF IRI-8916059, and AFOSR 910350 1 Model trees were shown to be a useful data structure for the representation of disjunctive databases and query processing. <p> We note that this algorithm was implicitly given in <ref> [4] </ref>. The next Lemma is taken from [3] and thus presented here without a proof. Lemma 3.1 Let DB 1 and DB 2 be disjunctive databases. Then, DB 2 j= DB 1 iff 8M 2 MM DB 2 9M 0 2 MM DB 1 s.t. M 0 M .
Reference: [5] <author> J. Grant, J. Horty, J. Lobo, and J. Minker. </author> <title> View updates in stratified disjunctive databases. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 11 </volume> <pages> 249-267, </pages> <year> 1993. </year>
Reference-contexts: Algorithms for the view update problem for normal disjunctive databases are presented in <ref> [5] </ref> and [3]. The content of the rest of the paper is as follows. Section 2 contains basic definitions and notation. An algorithm for inserting a clause, including a proof of its correctness, is given in Section 3. <p> While our work is oriented towards the representation of disjunctive databases by model trees, a compact representation, the algorithms apply to any representation of disjunctive databases in terms of minimal models. Putting our results together with the solution of the view update problem presented in <ref> [5] </ref> and [3] in terms of updating the underlying disjunctive database, we now have a complete solution of the view update problem for various classes of normal deductive disjunctive databases. We plan to develop an implementation of deductive disjunctive databases using the model tree representation technique. <p> We plan to develop an implementation of deductive disjunctive databases using the model tree representation technique. In this implementation we plan to use the algorithms given in this paper to implement the update operations. Also, by combining the algorithms here with the algorithms in <ref> [5] </ref> and [3], we will be able to implement view updates for disjunctive databases. 21
Reference: [6] <author> A. Yahya. </author> <title> Notes on updates in logic databases. </title> <journal> (unpublished). </journal> <volume> 22 </volume>
Reference-contexts: Deletion of a disjunction together with some of its consequences by means of deleting one of its atoms from an arbitrarily chosen model. Since this type of deletion has been studied by Yahya in <ref> [6] </ref>, we will not consider it further. 2.
References-found: 6

