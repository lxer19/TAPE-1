URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr94/tr94-040.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr94-abstracts.html
Root-URL: http://www.cis.ufl.edu
Phone: 2  
Title: The IBS-tree: A Data Structure for Finding All Intervals That Overlap a Point  
Author: Eric N. Hanson ; Moez Chaabouni USAF Wright R. D. Center 
Date: November 22, 1994  
Address: Dayton, OH 45433  Dayton, OH 45435  
Affiliation: WRDC/TXI  Wright State University Dept. of Computer Science  
Abstract: A problem that arises in computational geometry, pattern matching, and other applications is the need to quickly determine which of a collection of intervals overlap a query point. A data structure specificly designed to handle these queries efficiently called the interval binary search tree (IBS-tree) is introduced here. The IBS-tree is dynamic | intervals can be inserted and deleted on-line, intermixed with queries, providing an advantage over other existing techniques for interval indexing. A balanced IBS-tree requires O(log(N) + L) time in the worst case for searches where L is the number of intervals that overlap the query point. Based on assumptions derived from a simulation study of the distribution of rotations in AVL-trees, the average case time for both insertions and deletions in balanced IBS-trees is O(log 2 N ). The worst- and best-case storage requirements for IBS-trees are O(N log N ) and O(N ), respectively.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. M. Adel'son-Vel'skii and E. M. Landis. </author> <title> An algorithm for the organization of information. </title> <journal> Soviet Math. Dokl., </journal> <volume> 3 </volume> <pages> 1259-1262, </pages> <year> 1962. </year>
Reference-contexts: The algorithm for IBS-trees described above does not guarantee that the tree will be balanced. Several balanced binary tree schemes have been proposed, including AVL-trees <ref> [1] </ref>, balanced binary 10 trees (or red-black trees) [2, 5] and self-adjusting binary trees [12]. A common theme in these algorithms is the use of rotations to rebalance the tree. <p> The next section analyzes the performance of a balanced IBS-tree scheme that makes use of rotations. 12 4 Performance Analysis Assume that the AVL-tree scheme is used to maintain the balance of an IBS-tree <ref> [1] </ref>. Searching the tree to find all intervals that overlap a point X requires time O (log (N ) + L) where N is the number of intervals indexed in the tree, and L is the number of intervals that overlap X. <p> It has been previously shown that the height of an AVL-tree with N elements always lies between log 2 (N + 1) and log (N + 2), where is the golden ratio 1 2 (1 + 5), which is approximately 1:618 <ref> [1, 9] </ref>. In addition, the number of nodes N in a tree of height h is always greater than h+2 = p 5 2, and always less than 2 h . An important factor in the analysis is the number of marks per node.
Reference: [2] <author> R. Bayer. </author> <title> Symetric binary B-trees: Data structure and maintenance algorithms. </title> <journal> Acta Informatica, </journal> <volume> 1 </volume> <pages> 290-306, </pages> <year> 1972. </year>
Reference-contexts: The algorithm for IBS-trees described above does not guarantee that the tree will be balanced. Several balanced binary tree schemes have been proposed, including AVL-trees [1], balanced binary 10 trees (or red-black trees) <ref> [2, 5] </ref> and self-adjusting binary trees [12]. A common theme in these algorithms is the use of rotations to rebalance the tree. In particular, during rebalancing operations, the balanced binary tree mechanisms cited make use of the single and double rotations shown in Figure 5.
Reference: [3] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections: Part I. </title> <journal> International Journal of Computer Mathematics, </journal> <volume> 13(3-4):209-219, </volume> <year> 1983. </year>
Reference-contexts: Open intervals have one boundary at positive or negative infinity, and points have both boundaries equal. Examples of intervals are [17,19), [12,12], [-inf,22]. Another data structure that can be used to process stabbing queries is the interval tree <ref> [3, 4] </ref>. Unfortunately, as with the segment tree, all the intervals must be known in advance to construct an interval tree. A data structure that can index intervals dynamically is the R-tree [6].
Reference: [4] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections: Part II. </title> <journal> International Journal of Computer Mathematics, </journal> <volume> 13(3-4):221-229, </volume> <year> 1983. </year>
Reference-contexts: Open intervals have one boundary at positive or negative infinity, and points have both boundaries equal. Examples of intervals are [17,19), [12,12], [-inf,22]. Another data structure that can be used to process stabbing queries is the interval tree <ref> [3, 4] </ref>. Unfortunately, as with the segment tree, all the intervals must be known in advance to construct an interval tree. A data structure that can index intervals dynamically is the R-tree [6].
Reference: [5] <author> L. J. Guibas and R. Sedgewick. </author> <title> A dichromatic framework for balanced binary trees. </title> <booktitle> In Proc. 19th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 8-21, </pages> <year> 1978. </year>
Reference-contexts: The algorithm for IBS-trees described above does not guarantee that the tree will be balanced. Several balanced binary tree schemes have been proposed, including AVL-trees [1], balanced binary 10 trees (or red-black trees) <ref> [2, 5] </ref> and self-adjusting binary trees [12]. A common theme in these algorithms is the use of rotations to rebalance the tree. In particular, during rebalancing operations, the balanced binary tree mechanisms cited make use of the single and double rotations shown in Figure 5.
Reference: [6] <author> A. Guttman. R-trees: </author> <title> A dynamic index structure for spatial searching. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 47-57, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: Another data structure that can be used to process stabbing queries is the interval tree [3, 4]. Unfortunately, as with the segment tree, all the intervals must be known in advance to construct an interval tree. A data structure that can index intervals dynamically is the R-tree <ref> [6] </ref>. R-trees are a multi-dimensional extension of B-trees in which each tree node contains a set of possibly overlapping n-dimensional rectangles. Subtrees of each index node contain only data that lies within a containing rectangle in the index node.
Reference: [7] <author> Eric N. Hanson. </author> <title> An initial report on the design of Ariel: a DBMS with an integrated production rule system. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 18(3) </volume> <pages> 12-19, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: The IBS-tree was motivated fl This work was supported by the Air Force Office of Scientific Research under grant number AFOSR-89-0286. by the need to be able to dynamically add and delete intervals while processing queries, which arose in designing a pattern matcher for a database rule system <ref> [7, 8] </ref>. In Section 2, other methods for solving stabbing queries are discussed. Section 3 describes the interval binary search tree data structure and methods for updating and searching it. Section 4 gives an analysis of the complexity of algorithms for manipulating IBS-trees.
Reference: [8] <author> Eric N. Hanson, Moez Chaabouni, Chang-ho Kim, and Yu-wang Wang. </author> <title> A predicate matching algorithm for database rule systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 271-280, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The IBS-tree was motivated fl This work was supported by the Air Force Office of Scientific Research under grant number AFOSR-89-0286. by the need to be able to dynamically add and delete intervals while processing queries, which arose in designing a pattern matcher for a database rule system <ref> [7, 8] </ref>. In Section 2, other methods for solving stabbing queries are discussed. Section 3 describes the interval binary search tree data structure and methods for updating and searching it. Section 4 gives an analysis of the complexity of algorithms for manipulating IBS-trees.
Reference: [9] <author> Donald E. Knuth. </author> <title> Sorting And Searching. </title> <publisher> Addison Wesley, </publisher> <year> 1973. </year>
Reference-contexts: It has been previously shown that the height of an AVL-tree with N elements always lies between log 2 (N + 1) and log (N + 2), where is the golden ratio 1 2 (1 + 5), which is approximately 1:618 <ref> [1, 9] </ref>. In addition, the number of nodes N in a tree of height h is always greater than h+2 = p 5 2, and always less than 2 h . An important factor in the analysis is the number of marks per node.
Reference: [10] <author> Edward M. McCreight. </author> <title> Priority search trees. </title> <journal> SIAM Journal of Computing, </journal> <volume> 14(2) </volume> <pages> 257-278, </pages> <year> 1985. </year>
Reference-contexts: Also, R-trees cannot accommodate open intervals. Another data structure which solves the stabbing query problem efficiently (among others), and does allow dynamic insertion and deletion of intervals is the priority search tree <ref> [10] </ref>.
Reference: [11] <author> Hanan Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addision Wesley, </publisher> <address> Reading, Mass., </address> <year> 1990. </year>
Reference-contexts: 1 Introduction An important problem that arises in a number of computer applications is the need to find all intervals in a collection that overlap a particular point. Queries of this kind are also called stabbing queries <ref> [11] </ref>. This paper introduces a data structure called the interval binary search tree (IBS-tree) designed to handle stabbing queries efficiently. <p> The most trivial solution is to place all the intervals in a list, and traverse the list sequentially, checking each interval to see if it overlaps the query point. This algorithm has search complexity of O (N ). A more sophisticated approach is based on the segment tree <ref> [11] </ref>. To form a segment tree, the set of all end points of intervals in Q is formed, and an ordered complete binary tree is built which has the end points as its leaves.
Reference: [12] <author> Robert Endre Tarjan. </author> <title> Data Structures and Network Algorithms. </title> <institution> Society for Industrial and Applied Mathematics, </institution> <year> 1983. </year> <month> 19 </month>
Reference-contexts: If X is greater than the Value of node R, the &gt; set of R is added to S and the right subtree or R is searched. 3.3 Deletion The standard algorithm for deletion in binary search trees is the following <ref> [12] </ref>. To delete a node x from a binary search tree, if x has no null child, swap x with its symmetric-order predecessor y, found by traversing right pointers from the left child of x until reaching a node with a null right child. <p> The algorithm for IBS-trees described above does not guarantee that the tree will be balanced. Several balanced binary tree schemes have been proposed, including AVL-trees [1], balanced binary 10 trees (or red-black trees) [2, 5] and self-adjusting binary trees <ref> [12] </ref>. A common theme in these algorithms is the use of rotations to rebalance the tree. In particular, during rebalancing operations, the balanced binary tree mechanisms cited make use of the single and double rotations shown in Figure 5.
References-found: 12

