URL: http://www.eecs.umich.edu/~thalerd/infocom98.ps
Refering-URL: http://www.eecs.umich.edu/~thalerd/docs.html
Root-URL: http://www.cs.umich.edu
Email: thalerd@eecs.umich.edu ravi@eecs.umich.edu  
Title: Distributed Top-Down Hierarchy Construction  
Author: David G. Thaler and Chinya V. Ravishankar 
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: Electrical Engineering and Computer Science Department The University of Michigan,  
Abstract: Hierarchies provide scalability in large networks and are integral to many widely-used protocols and applications. Previous approaches to constructing hierarchies have typically either assumed static hierarchy configuration, or have used bottom-up construction methods. We describe how to construct hierarchies in a top-down fashion, and show that our method is much more efficient than bottom-up methods. We also show that top-down hierarchy construction is a better choice when administrative policy constraints are imposed on hierarchy formation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Zahn. </author> <title> Graph-theoretical methods for detecting and describing gestalt clusters. </title> <journal> IEEE Trans. Computers, </journal> <volume> 20 </volume> <pages> 68-86, </pages> <year> 1971. </year>
Reference-contexts: These algorithms [4] generally require one or more of the following: * Construct a minimal spanning tree and then partition it in some way <ref> [1] </ref>. In networks, minimal cost trees spanning some subset of nodes are known as Steiner trees, whose construction is known to be NP-complete [14].
Reference: [2] <author> W. Koontz, P. Narendra, and K. Fukunaga. </author> <title> A graph-theoretic approach to nonparametric cluster analysis. </title> <journal> IEEE Trans. Computers, </journal> <volume> 25(9) </volume> <pages> 936-944, </pages> <month> Sep. </month> <year> 1976. </year>
Reference-contexts: Hence, these techniques are not suitable for use in large dynamic hierarchies of distributed agents. * Use a region of influence for each node, usually defined by distance (e.g., <ref> [2] </ref>). In a distributed version, this method would require broadcast advertisements within this region, such as those used by the Landmark scheme as de scribed above. * Find the k-nearest neighbors for each node (e.g., [3]).
Reference: [3] <author> Riichiro Mizoguchi and Masamichi Shimura. </author> <title> A nonparamet-ric algorithm for detecting clusters using hierarchical structure. </title> <journal> IEEE Trans. Pattern Analysis and Machine Intelligence, </journal> <volume> 2(4) </volume> <pages> 292-300, </pages> <month> July </month> <year> 1980. </year>
Reference-contexts: In a distributed version, this method would require broadcast advertisements within this region, such as those used by the Landmark scheme as de scribed above. * Find the k-nearest neighbors for each node (e.g., <ref> [3] </ref>). This approach does not lend itself well to a distributed algorithm for arbitrary topologies, for two reasons.
Reference: [4] <author> R. Urquhart. </author> <title> Graph theoretical clustering based on limited neighbourhood sets. </title> <journal> Pattern Recognition, </journal> <volume> 15(3), </volume> <year> 1982. </year>
Reference-contexts: Such clustering algorithms may be either agglomerative, working bottom-up from individual points by merging clusters, or divisive, working top-down from the entire space by successively dividing clusters. These algorithms <ref> [4] </ref> generally require one or more of the following: * Construct a minimal spanning tree and then partition it in some way [1]. In networks, minimal cost trees spanning some subset of nodes are known as Steiner trees, whose construction is known to be NP-complete [14].
Reference: [5] <author> Paul Mockapetris. </author> <title> Domain names concepts and facilities, </title> <month> Nov. </month> <year> 1987. </year> <month> RFC-1034. </month>
Reference-contexts: Section 5 describes our top-down construction algorithm. Section 6 gives simulation results, and Section 7 covers conclusions and future work. 2 Previous Work In this section, we describe related work in both distributed and centralized hierarchy construction. 2.1 DNS and X.500 Hierarchies in typical name services such as DNS <ref> [5] </ref> and X.500 [6] are constructed by manually configuring each agent with a list of potential parents, ordered by preference. An agent then uses the most preferred and reachable parent. Such manual configuration represents a significant administrative burden. <p> Secondly, comparing figures 8 and 9 gives an indication of the average and maximum CPU overhead imposed by a node failure. From this comparison, we see that the rate at which messages are received is much lower in the top-down scheme. 7 Conclusions Many applications, such as nameservice <ref> [5, 6] </ref> and network management [18], use hierarchies of distributed agents. In this paper, we presented a solution to the important problem of constructing hierarchies in distributed fashion. We presented a top-down approach to this problem, and described a specific top-down algorithm (TDH) with a number of desirable properties.
Reference: [6] <author> Gerald W. Neufeld. </author> <title> Descriptive names in X.500. </title> <booktitle> In Proc. ACM SIGCOMM'89, </booktitle> <pages> pages 64-70, </pages> <year> 1989. </year>
Reference-contexts: Section 6 gives simulation results, and Section 7 covers conclusions and future work. 2 Previous Work In this section, we describe related work in both distributed and centralized hierarchy construction. 2.1 DNS and X.500 Hierarchies in typical name services such as DNS [5] and X.500 <ref> [6] </ref> are constructed by manually configuring each agent with a list of potential parents, ordered by preference. An agent then uses the most preferred and reachable parent. Such manual configuration represents a significant administrative burden. <p> Secondly, comparing figures 8 and 9 gives an indication of the average and maximum CPU overhead imposed by a node failure. From this comparison, we see that the rate at which messages are received is much lower in the top-down scheme. 7 Conclusions Many applications, such as nameservice <ref> [5, 6] </ref> and network management [18], use hierarchies of distributed agents. In this paper, we presented a solution to the important problem of constructing hierarchies in distributed fashion. We presented a top-down approach to this problem, and described a specific top-down algorithm (TDH) with a number of desirable properties.
Reference: [7] <author> Paul F. Tsuchiya. </author> <title> The landmark hierarchy: A new hierarchy for routing in very large networks. </title> <booktitle> In Proceedings of the ACM SIGCOMM, </booktitle> <year> 1988. </year>
Reference-contexts: Scoped broadcast ("Push") For root discovery, the scope is simply the entire network, since all agents need to discover the same root. For neighbor discovery, the scope can be set based on hierarchy level, as in the Landmark <ref> [7] </ref> scheme. Thus, the higher up in the hierarchy an agent is, the farther away its neighbors may be. For example, if level 0 indicates a leaf and the scope is specified in network hops, the scope might be given by 2 (level+1) .
Reference: [8] <author> Paul F. Tsuchiya. </author> <title> The landmark hierarchy: Description and analysis. </title> <type> Technical Report MTR-87W00152, </type> <institution> MITRE Corporation, </institution> <month> June </month> <year> 1987. </year>
Reference: [9] <author> Paul F. Tsuchiya. </author> <title> Landmark routing: Architecture, algorithms, and issues. </title> <type> Technical Report MTR-87W00174, </type> <institution> MITRE Corporation, </institution> <month> Sep. </month> <year> 1987. </year>
Reference-contexts: Based on such advertisements, peers elect parents such that the maximum number of children per parent is bounded. As we will show in Section 4, the use of broadcast (or multicast) advertisements can result in significant overhead. In <ref> [9] </ref>, Tsuchiya describes a policy scheme for Landmark routing which requires configuring each node on the boundary of an administrative area. This allows broadcast scopes to be constrained by boundaries at various levels, so that a single subtree is built within a given boundary.
Reference: [10] <author> Paul F. Tsuchiya and Ron Zahavi. </author> <title> Landmark routing algorithms: Analysis and simulation results. </title> <type> Technical Report MTR-89W00277, </type> <institution> MITRE Corporation, </institution> <month> Dec. </month> <year> 1989. </year>
Reference: [11] <author> L. Kleinrock and F. Kamoun. </author> <title> Hierarchical routing for large networks: Performance evaluation and optimization. </title> <journal> Computer Networks, </journal> <volume> 1 </volume> <pages> 155-174, </pages> <year> 1977. </year>
Reference: [12] <author> Nachum Shacham and Jil Westcott. </author> <title> Future directions in packet radio architectures and protocols. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 75(1) </volume> <pages> 83-99, </pages> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: In an area hierarchy, however, a node is only aware of its children, its siblings, and the siblings of its direct ancestors; it is not necessarily aware of other nodes which are topologically close. Hagouel [13] and Shacham <ref> [12] </ref> both discuss general approaches to managing area hierarchies, although neither give detailed protocols or significant analysis. Their schemes both require that a pre-designated "primary" node oversee the formation of each cluster at any level. The primary node must be chosen either administratively or by running some suitable election algorithm.
Reference: [13] <author> Jacob Hagouel. </author> <title> Issues in routing for large and dynamic networks, </title> <month> May </month> <year> 1983. </year> <type> Ph.D. Thesis, </type> <institution> Columbia University. </institution>
Reference-contexts: In an area hierarchy, however, a node is only aware of its children, its siblings, and the siblings of its direct ancestors; it is not necessarily aware of other nodes which are topologically close. Hagouel <ref> [13] </ref> and Shacham [12] both discuss general approaches to managing area hierarchies, although neither give detailed protocols or significant analysis. Their schemes both require that a pre-designated "primary" node oversee the formation of each cluster at any level.
Reference: [14] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <month> June </month> <year> 1988. </year>
Reference-contexts: These algorithms [4] generally require one or more of the following: * Construct a minimal spanning tree and then partition it in some way [1]. In networks, minimal cost trees spanning some subset of nodes are known as Steiner trees, whose construction is known to be NP-complete <ref> [14] </ref>. Hence, these techniques are not suitable for use in large dynamic hierarchies of distributed agents. * Use a region of influence for each node, usually defined by distance (e.g., [2]).
Reference: [15] <author> Estrin, Handley, Helmy, Huang, and Thaler. </author> <title> A dynamic bootstrap mechanism for rendezvous-based multicast routing, </title> <note> 1997. Submitted to IEEE/ACM Trans. Networking. </note>
Reference-contexts: Pull All agents poll some location, which maintains common state. This requires knowledge of a location to poll. Such knowledge must be discovered using one of these four methods, resulting in a recursive problem known as the "Bootstrap Problem" <ref> [15] </ref>. Thus, while this scheme can be useful for decreasing the amount of information which is pushed or configured, it is not a complete solution with out one of the other three options. Scoped pull A request is broadcast within a given scope, and one or more agents reply. <p> When multicast is available, root election and discovery can be accomplished through an election procedure similar to the "Bootstrap Router" election used by PIM-SMv2 <ref> [15] </ref>. The root is chosen by a simple Bully election: the agent with the shortest maximal policy prefix wins, with ties broken by highest preconfigured "priority" value, and then by lowest address. This operates as follows.
Reference: [16] <author> H. Garcia-Molina. </author> <title> Elections in a distributed computing system. </title> <journal> IEEE Trans. Computers, </journal> <volume> C-31(1):48-59, </volume> <month> Jan. </month> <year> 1982. </year>
Reference-contexts: For example, the winner may be picked at random, or be the first one seen by the root in a top down scheme [20]. * The agent with the highest (or lowest) value of some attribute (e.g., address, or priority) wins. This is referred to as the "Bully" method <ref> [16] </ref>. * The agent which is the most "centralized" with respect to the others wins, so overhead is minimized. A comparison of such election algorithms can be found in [17]. 4 Analysis of Distribution Mechanisms We now turn to an analysis of the costs of various classes of algorithms.
Reference: [17] <author> David G. Thaler and Chinya V. Ravishankar. </author> <title> Distributed center-location algorithms. </title> <journal> IEEE J. Select. Areas in Com-mun., </journal> <volume> 15(3) </volume> <pages> 291-303, </pages> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: This is referred to as the "Bully" method [16]. * The agent which is the most "centralized" with respect to the others wins, so overhead is minimized. A comparison of such election algorithms can be found in <ref> [17] </ref>. 4 Analysis of Distribution Mechanisms We now turn to an analysis of the costs of various classes of algorithms. To create and maintain a distributed hierarchy, agents must keep some amount of state, and exchange some amount of control data via network messages.
Reference: [18] <author> David G. Thaler. </author> <title> An architecture for inter-domain network troubleshooting, 1998. </title> <type> Ph.D. Thesis, </type> <institution> University of Michigan. </institution>
Reference-contexts: This algorithm consists of two parts: determining the root, and determining one's parent. We will describe these two parts in turn. Figure 1 illustrates the state transition diagram used by each agent in the discussions below. Pseudocode is available in <ref> [18] </ref>. 5.2 Determining the Root If multicast or broadcast mechanisms are not available, then each agent must be configured with the address of one or more other agents to use initially as root. <p> Due to space limitations, we have omitted the details of the proof, which can be found in <ref> [18] </ref>. Briefly, it can be shown by contradiction that in steady state, the most preferred agent will be in state A, all others will be in states B and D, and P arent (i) 6= N U LL ) i 2 Children (P arent (i)). <p> From this comparison, we see that the rate at which messages are received is much lower in the top-down scheme. 7 Conclusions Many applications, such as nameservice [5, 6] and network management <ref> [18] </ref>, use hierarchies of distributed agents. In this paper, we presented a solution to the important problem of constructing hierarchies in distributed fashion. We presented a top-down approach to this problem, and described a specific top-down algorithm (TDH) with a number of desirable properties.
Reference: [19] <author> H. Schulzrinne, S. Casner, R. Frederick, and V. Jacobson. RTP: </author> <title> A transport protocol for real-time applications, </title> <month> Jan. </month> <year> 1996. </year> <month> RFC-1889. </month>
Reference-contexts: The choice of whether an agent should send announcements may be made based on any of several criteria. For example, it could be based on static configuration, or active prefix length (limiting broadcasters to those at the highest levels). Alternatively, an RTP-like scheme <ref> [19] </ref> could be used in which all agents broadcast, the broadcast periods being scaled back with the number of agents so that the overall frequency (and hence the bandwidth usage) remains the same.
Reference: [20] <author> David G. Thaler and C.V. Ravishankar. </author> <title> Using name-based mappings to increase hit rates. </title> <journal> IEEE/ACM Trans. Networking, </journal> <volume> 6(1), </volume> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: For example, the winner may be picked at random, or be the first one seen by the root in a top down scheme <ref> [20] </ref>. * The agent with the highest (or lowest) value of some attribute (e.g., address, or priority) wins. This is referred to as the "Bully" method [16]. * The agent which is the most "centralized" with respect to the others wins, so overhead is minimized. <p> To select between several equal parents, we could use any deterministic algorithm which operates as a purely local decision with negligible overhead. Our simulations chose the closest parent, using HRW <ref> [20] </ref> to break ties. HRW allows children to deterministically choose parents so that whenever several children may choose from the same set of parents, each parent gets roughly the same number of such children. The number of children per parent was unbounded.
Reference: [21] <author> Bernard M. Waxman. </author> <title> Routing of multipoint connections. </title> <journal> IEEE J. Select. Areas in Commun., </journal> <volume> 6(9), </volume> <month> Dec. </month> <year> 1988. </year>
Reference-contexts: The number of children per parent was unbounded. In both schemes, the periodic message interval was 60 seconds and all timer expirations were set to 130 seconds. We use the random graph model of Waxman <ref> [21] </ref>, which randomly places nodes over a Cartesian coordinate system, and creates edges as described in [21]. 6.1 Parameters of interest We are first interested in the steady-state distribution of CPU overhead (as summarized in Table 1). <p> In both schemes, the periodic message interval was 60 seconds and all timer expirations were set to 130 seconds. We use the random graph model of Waxman <ref> [21] </ref>, which randomly places nodes over a Cartesian coordinate system, and creates edges as described in [21]. 6.1 Parameters of interest We are first interested in the steady-state distribution of CPU overhead (as summarized in Table 1).
References-found: 21

