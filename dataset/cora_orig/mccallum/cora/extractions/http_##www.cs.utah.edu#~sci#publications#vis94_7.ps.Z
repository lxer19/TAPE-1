URL: http://www.cs.utah.edu/~sci/publications/vis94_7.ps.Z
Refering-URL: http://www.cs.utah.edu/~sci/publications/paper_archive.html
Root-URL: 
Email: E-mail: hwshen@cs.utah.edu and crj@cs.utah.edu  
Title: Differential Volume Rendering: A Fast Volume Visualization Technique for Flow Animation  
Author: Han-Wei Shen and Christopher R. Johnson 
Address: Salt Lake City, UT 84112.  
Affiliation: Department of Computer Science University of Utah  
Abstract: We present a direct volume rendering algorithm to speed up volume animation for flow visualizations. Data coherency between consecutive simulation time steps is used to avoid casting rays from those pixels retaining color values assigned to the previous image. The algorithm calculates the differential information among a sequence of 3D volumetric simulation data. At each time step the differential information is used to compute the locations of pixels that need updating and a ray-casting method is utilized to produce the updated image. We illustrate the utility and speed of the differential volume rendering algorithm with simulation data from computational bioelectric and fluid dynamics applications. We can achieve considerable disk-space savings and nearly real-time rendering of 3D flows using low-cost, single processor workstations fl for models which contain hundreds of thousands of data points. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.L. Helman and L. Hesselink. </author> <title> Visualizing vector field topology in fluid flows. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 11(3) </volume> <pages> 36-46, </pages> <year> 1991. </year>
Reference-contexts: Introduction While there is a rich history of numerical techniques for computing the dynamics of wave propagation, only recently have researchers been able to visualize the complex dynamics of large 3D flow simulations <ref> [1, 2, 3] </ref>. Visualizations of flow dynamics typically involve characterizing relevant features of vector and scalar fields.
Reference: [2] <author> A. Globus, C. Levit, and T. Lasinski. </author> <title> A tool for visualizing the topology of three dimensional vector fields. </title> <booktitle> In Proc. of Vis. </booktitle> <volume> '91, </volume> <pages> pages 33-40. </pages> <publisher> IEEE CS Press, </publisher> <year> 1991. </year>
Reference-contexts: Introduction While there is a rich history of numerical techniques for computing the dynamics of wave propagation, only recently have researchers been able to visualize the complex dynamics of large 3D flow simulations <ref> [1, 2, 3] </ref>. Visualizations of flow dynamics typically involve characterizing relevant features of vector and scalar fields.
Reference: [3] <author> K.-L. Ma and Smith P.J. </author> <title> Virtual smoke: An interactive 3d flow visualization technique. </title> <booktitle> In Proc. of Vis. </booktitle> <volume> '92, </volume> <pages> pages 46-53. </pages> <publisher> IEEE CS Press, </publisher> <year> 1992. </year>
Reference-contexts: Introduction While there is a rich history of numerical techniques for computing the dynamics of wave propagation, only recently have researchers been able to visualize the complex dynamics of large 3D flow simulations <ref> [1, 2, 3] </ref>. Visualizations of flow dynamics typically involve characterizing relevant features of vector and scalar fields. <p> Volume-rendered images can also be superimposed upon surface-oriented icons or textures, thus allowing for simultaneous scalar and vector field composite visualizations. A wide range of volume rendering techniques have been applied to the problem of flow visualization. Ma and Smith <ref> [3] </ref> introduced a virtual smoke technique to enhance visualization of gaseous fluid flows. This technique allows users to interactively insert a seed into an interesting location and only the region immediately surrounding the seed is rendered.
Reference: [4] <author> A. Kaufman. </author> <title> Volume Visualization. </title> <publisher> IEEE CS Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1990. </year>
Reference-contexts: Direct volume-rendering techniques, effective tools for exploring 3D scalar data, have been proposed as a methodology to visualize scalar features in the flow fl Such as the SGI Indy or comparable workstations field <ref> [4, 5, 6] </ref>. Unlike surface-rendering methods, direct volume-rendering methods can be used to visualize 3D scalar data without converting intermediate geometric primitives. By assigning appropriate colors and opacities to the scalar data, one can render objects semi-transparently to expand the amount of 3D information available at a fixed position. <p> Template Based Rays: When parallel projection is used, all rays fired from the image plane have the same slope and thus the same incremental form of forwarding path. Therefore, one can calculate the incremental form once and store it as a template <ref> [12, 4] </ref>. During the ray casting procedure, instead of computing the ray's new position at each time step, which increases computational complexity, we can use ray templates.
Reference: [5] <author> N. Max, R. Crawfis, and D. Williams. </author> <title> Visualizing wind velocities by advecting cloud textures. </title> <booktitle> In Proc. of Vis. </booktitle> <volume> '92, </volume> <pages> pages 171-178. </pages> <publisher> IEEE CS Press, </publisher> <year> 1992. </year>
Reference-contexts: Direct volume-rendering techniques, effective tools for exploring 3D scalar data, have been proposed as a methodology to visualize scalar features in the flow fl Such as the SGI Indy or comparable workstations field <ref> [4, 5, 6] </ref>. Unlike surface-rendering methods, direct volume-rendering methods can be used to visualize 3D scalar data without converting intermediate geometric primitives. By assigning appropriate colors and opacities to the scalar data, one can render objects semi-transparently to expand the amount of 3D information available at a fixed position. <p> Ma and Smith [3] introduced a virtual smoke technique to enhance visualization of gaseous fluid flows. This technique allows users to interactively insert a seed into an interesting location and only the region immediately surrounding the seed is rendered. Max et al. <ref> [5] </ref> introduced 3D textures advected by wind flow upon volume rendered climate images to visualize both the scalar and vector fields of the images. Crawfis and Max [7] make use of textured splats which utilize volume splatting and 3D texture mapping techniques to reveal scalar and vector information simultaneously.
Reference: [6] <author> P.G. Swann and S.K. Semwal. </author> <title> Volume rendering of flow-visualization point data. </title> <booktitle> In Proc. of Vis. </booktitle> <volume> '91, </volume> <pages> pages 25-32. </pages> <publisher> IEEE CS Press, </publisher> <year> 1991. </year>
Reference-contexts: Direct volume-rendering techniques, effective tools for exploring 3D scalar data, have been proposed as a methodology to visualize scalar features in the flow fl Such as the SGI Indy or comparable workstations field <ref> [4, 5, 6] </ref>. Unlike surface-rendering methods, direct volume-rendering methods can be used to visualize 3D scalar data without converting intermediate geometric primitives. By assigning appropriate colors and opacities to the scalar data, one can render objects semi-transparently to expand the amount of 3D information available at a fixed position.
Reference: [7] <author> R. Crawfis and N. Max. </author> <title> Texture splats for 3d scalar and vector field visualization. </title> <booktitle> In Proc. of Vis. </booktitle> <volume> '93, </volume> <pages> pages 261-265. </pages> <publisher> IEEE CS Press, </publisher> <year> 1993. </year>
Reference-contexts: Max et al. [5] introduced 3D textures advected by wind flow upon volume rendered climate images to visualize both the scalar and vector fields of the images. Crawfis and Max <ref> [7] </ref> make use of textured splats which utilize volume splatting and 3D texture mapping techniques to reveal scalar and vector information simultaneously. Additionally, Max et al. [8] developed the concept of flow volumes, volumetric equivalents of stream lines, to represent additional information about the vector field.
Reference: [8] <author> N. Max, Becker B., and R. Crawfis. </author> <title> Flow volume for interactive vector field visualization. </title> <booktitle> In Proc. of Vis. </booktitle> <volume> '93, </volume> <pages> pages 19-23. </pages> <publisher> IEEE CS Press, </publisher> <year> 1993. </year>
Reference-contexts: Crawfis and Max [7] make use of textured splats which utilize volume splatting and 3D texture mapping techniques to reveal scalar and vector information simultaneously. Additionally, Max et al. <ref> [8] </ref> developed the concept of flow volumes, volumetric equivalents of stream lines, to represent additional information about the vector field.
Reference: [9] <author> P. Ghapure and C.R. Johnson. </author> <title> A 3d cellular automata model of the heart. </title> <booktitle> In Proc. of 15th Annual IEEE EMBS Int. Conf. </booktitle> <publisher> IEEE Press, </publisher> <year> 1993. </year>
Reference-contexts: We are motivated to develop a more efficient way to visualize scalar fields by our attempts to visualize simulation data from a model of electrical wave propagation within the complex geometry of the heart and in large scale models of unsteady compressible fluid flow <ref> [9, 10] </ref>. Because of the regular structures used to characterize the simulation data, we can use direct volume-rendering techniques to visualize the states at each time step. We characterize states within the model by assigning different colors and opacities.
Reference: [10] <author> K.-L. Ma and K. Sikorski. </author> <title> A distributed algorithm for the three-dimensional compressible navier-stokes equations. Transputer Res. </title> <journal> and App., </journal> <volume> 4, </volume> <year> 1990. </year>
Reference-contexts: We are motivated to develop a more efficient way to visualize scalar fields by our attempts to visualize simulation data from a model of electrical wave propagation within the complex geometry of the heart and in large scale models of unsteady compressible fluid flow <ref> [9, 10] </ref>. Because of the regular structures used to characterize the simulation data, we can use direct volume-rendering techniques to visualize the states at each time step. We characterize states within the model by assigning different colors and opacities. <p> To test the differential rendering algorithms, we computed data at 100 time steps. For display we used a 256fi256 image plane. Figure 3 depicts the volume rendered images of the propagation of electrical activity within the heart. In the computational fluid dynamics simulation <ref> [10] </ref>, numerical results were computed by software which uses the MacCormack method to solve the three dimensional unsteady compressible Navier-Stokes equations. The results simulated a laminar flow entering a rectangular region.
Reference: [11] <author> R Yagel and Z. Shi. </author> <title> Accelerating volume animation by space-leaping. </title> <booktitle> In Proc. of Vis. </booktitle> <volume> '93, </volume> <pages> pages 62-69. </pages> <publisher> IEEE CS Press, </publisher> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: The method is independent of specific volume-rendering techniques and can be adapted into a variety of ray casting paradigms which can be used to further accelerate the visualization process <ref> [11, 12, 13] </ref>. Differential Volume Rendering From preliminary studies of our wave propagation simulations, we noticed that the only elements which changed values between consecutive time steps, when the time steps were small, were the activated cells and their neighbors. <p> By adopting the template-based ray casting method and utilizing pre-computed displacement and step templates, we can accurately and efficiently calculate the pixel positions. Acceleration of Ray Casting Coordinate Buffer: Yagel and Shi <ref> [11] </ref> proposed a coordinate buffer to store the first- and last-hit voxel positions for every pixel on the image plane allowing one to rapidly skip empty space for subsequent renderings. The differential volume rendering algorithm further utilizes this idea for volume animations to speed up the ray casting process.
Reference: [12] <author> R Yagel and A. Kaufman. </author> <title> Template-based volume viewing. </title> <booktitle> In Proceedings of EUROGRAPH-ICS '92, </booktitle> <pages> pages 153-157. </pages> <publisher> Blackwell, </publisher> <address> Cambridge, England, </address> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: The method is independent of specific volume-rendering techniques and can be adapted into a variety of ray casting paradigms which can be used to further accelerate the visualization process <ref> [11, 12, 13] </ref>. Differential Volume Rendering From preliminary studies of our wave propagation simulations, we noticed that the only elements which changed values between consecutive time steps, when the time steps were small, were the activated cells and their neighbors. <p> Template Based Rays: When parallel projection is used, all rays fired from the image plane have the same slope and thus the same incremental form of forwarding path. Therefore, one can calculate the incremental form once and store it as a template <ref> [12, 4] </ref>. During the ray casting procedure, instead of computing the ray's new position at each time step, which increases computational complexity, we can use ray templates.
Reference: [13] <author> K. L. Ma, M. F. Cohen, and J. S. Painter. </author> <title> Volume seeds: A volume exploration technique. </title> <journal> J. of Vis. and Comp. Animation, </journal> <volume> 2 </volume> <pages> 135-140, </pages> <year> 1991. </year>
Reference-contexts: The method is independent of specific volume-rendering techniques and can be adapted into a variety of ray casting paradigms which can be used to further accelerate the visualization process <ref> [11, 12, 13] </ref>. Differential Volume Rendering From preliminary studies of our wave propagation simulations, we noticed that the only elements which changed values between consecutive time steps, when the time steps were small, were the activated cells and their neighbors. <p> Sample Caching: During the ray casting, the local lighting calculation, which includes the trilinear interpolation and shading computation, constitutes the most expensive part of the process. Ma et al. <ref> [13] </ref> proposed a sample caching technique which stores the interpolated data value and local shading information at each sample point along a ray. This allows users to interactively change mapping parameters, such as color and opacity, so that one only need to composite the cached information to update the image.
Reference: [14] <author> J. Foley and A. van Dam. </author> <title> Computer Graphics: Principles and Practices. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: The pixels bound by the projected region then need to be updated. Discrete Rays and Zero-Order Interpolation: Discrete rays can be obtained by extending the digital differential analyzer (DDA) scan converting line algorithm <ref> [14] </ref> into three dimensions. In a zero-order interpolation scheme, at each forwarding step only the nearest voxel is sampled. No actual interpolation operation is performed.
References-found: 14

