URL: http://www.ai.sri.com/~wilkins/mpa/mpa-aips98.ps
Refering-URL: http://www.ai.sri.com/~wilkins/bib.html
Root-URL: 
Email: email: fwilkins, myersg@ai.sri.com  
Title: A Multiagent Planning Architecture  
Author: David E. Wilkins and Karen L. Myers 
Address: 333 Ravenswood Ave., Menlo Park, CA 94025  
Affiliation: Artificial Intelligence Center, SRI International  
Abstract: The Multiagent Planning Architecture (MPA) is a framework for integrating diverse technologies into a system capable of solving complex planning problems. Agents within MPA share well-defined, uniform interface specifications that facilitate integration of new technologies and experimentation with different problem-solving strategies. MPA provides a central repository for storing plan-related information in a shared plan representation, and metalevel agents that control and customize the interactions between other agents. The MPA framework has been validated through its use in developing several large-scale problem-solving systems for Air Campaign Planning. 1 
Abstract-found: 1
Intro-found: 1
Reference: <author> Arthur, R., and Stillman, J. </author> <year> 1992. </year> <title> Tachyon: A model and environment for temporal reasoning. </title> <type> Technical report, </type> <institution> GE Corporate Research and Development Center. </institution>
Reference-contexts: Single-Cell Configuration The single-cell configuration, illustrated in Figure 6, includes multiple planner and scheduler agents, together with a temporal reasoning agent, in addition to the Plan Server and PCM agents. The temporal reasoner role can be filled by either an OPIS-based agent or a Tachyon-based agent <ref> (Arthur & Stillman 1992) </ref>. The Tachyon agent is written in C; all other agents are written in LISP. The agents run on different machines, both locally and over the Internet. Within this configuration, the agents cooperatively generate a plan with the cell manager dynamically reconfiguring the planning cell during planning.
Reference: <author> Cohen, P.; Anderson, S.; and Westbrook, D. </author> <year> 1996. </year> <title> Simulation for ARPI and the Air Campaign Simulator. </title> <editor> In Tate, A., ed., </editor> <title> Advanced Planning Technology: Technological Achievements of the ARPA/Rome Laboratory Planning Initiative, </title> <type> 113118. </type>
Reference-contexts: The ARPI Plan Authoring Tool (APAT) from ISX, a legacy system written in Java, fills the role of user interface and advice manager (depicted in Figure 6) and plan visualization (a service also provided by the VISAGE system from MAYA). The Air Campaign Simulator (ACS) <ref> (Cohen, An-derson, & Westbrook 1996) </ref> from the University of Mas-sachusetts, written in LISP, provides Monte Carlo simulations of plans. The VISAGE system provides plan visualization for simulation outputs. Both of these agents read Acts from the Act Plan Server and translate them to their internal representations.
Reference: <author> Finin, T.; Weber, J.; Wiederhold, G.; Genesereth, M.; Fritzson, R.; McKay, D.; and McGuire, J. </author> <year> 1992. </year> <title> Specification of the KQML Agent-Communication Language. Technical Report EIT T R92-04, Enterprise Integration Technologies, </title> <address> Palo Alto, CA. </address>
Reference: <author> Georgeff, M. P. </author> <year> 1984. </year> <title> A theory of action for multiagent planning. </title> <booktitle> In Proceedings of the 1984 National Conference on Artificial Intelligence, </booktitle> <pages> 121125. </pages>
Reference-contexts: MPA provides the infrastructure necessary to support a broad range of distributed planning capabilities. At present, however, it does not include mechanisms for coordinating subplans generated by distributed planning agents <ref> (Georgeff 1984) </ref>. We intend to explore algorithms for distributed planning in the future, and believe that our infrastructure will support them. MPA Overview MPA is organized around the concept of a planning cell, which consists of a collection of agents committed to a particular planning process.
Reference: <author> Janssen, B.; Spreitzer, M.; Larner, D.; and Jacobi, C. </author> <year> 1997. </year> <title> ILU 2.0 reference manual. </title> <type> Technical report, </type> <note> Xe-rox PARC. </note>
Reference-contexts: MPA Communication MPA provides a rich interagent communication framework, composed of a set of MPA specific protocols layered on top of a lower-level communication substrate. Three software packages can provide this substrate for MPA: the Knowledge Query and Manipulation Language (KQML)(Finin et al. 1992), Inter-Language Unification <ref> (Janssen et al. 1997) </ref>, and the Open Agent Architecture (Moran et al. 1997). MPA is usually run on top of KQML, but preliminary implemen-tations on top of the other two also exist.
Reference: <author> Moran, D. B.; Cheyer, A. J.; Julia, L. E.; Martin, D. L.; and Park, S. </author> <year> 1997. </year> <title> Multimodal user interfaces in the Open Agent Architecture. </title> <booktitle> In Proc. of the 1997 International Conference on Intelligent User Interfaces (IUI97). </booktitle>
Reference-contexts: These technologies cooperated in the development and evaluation of a complex plan containing more than 4000 nodes. This integration has validated the utility of MPA for combining sophisticated stand-alone systems into a powerful integrated problem-solving framework. MPA is distinguished from other agent architectures (such as <ref> (Moran et al. 1997) </ref>) in its emphasis on application to large-scale planning problems. The architecture includes agents designed specifically to handle plans and planning-related activities. Interagent communication protocols are specialized for the exchange of planning information and tasks. <p> Three software packages can provide this substrate for MPA: the Knowledge Query and Manipulation Language (KQML)(Finin et al. 1992), Inter-Language Unification (Janssen et al. 1997), and the Open Agent Architecture <ref> (Moran et al. 1997) </ref>. MPA is usually run on top of KQML, but preliminary implemen-tations on top of the other two also exist. MPA provides both a message format and a message-handling protocol to support the exchange of knowledge and requests among agents involved in cooperative problem-solving.
Reference: <author> Myers, K. L. </author> <year> 1996. </year> <title> Strategic advice for hierarchical planners. </title> <editor> In Aiello, L. C.; Doyle, J.; and Shapiro, S. C., eds., </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fifth International Conference (KR '96). </booktitle> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference-contexts: Annotation messages advise the PCM of annotations that have been posted in the plan server. Such messages are sent by triggers posted by the PCM itself. Solve messages request the PCM to generate a plan. Advice messages provide problem-solving advice <ref> (Myers 1996) </ref> to be used by plan generation agents within the cell; the PCM will pass along specified advice to those agents when making planning requests. The roles in a PCM planning cell and their possible agent fillers are listed in Figure 4. <p> Plan-ok? causes the planner to apply all critics known to it; Schedule-ok? causes the agent to invoke the scheduler agent of the planning cell; Temporal-ok? causes the agent to invoke the temporal-reasoner agent of the planning cell. The SIPE2 planning system (Wilkins et al. 1995) and the Advisable Planner <ref> (Myers 1996) </ref> have been used as the basis for planner agents within all MPA applications to date. SIPE2 has a precise notion of a planning level, and plan critics that fit naturally into the above scheme.
Reference: <author> Smith, S. F.; Lassila, O.; and Becker, M. </author> <year> 1996. </year> <title> Configurable, mixed-initiative systems for planning and scheduling. </title> <editor> In Tate, A., ed., </editor> <booktitle> Advanced Planning Technology. </booktitle> <address> Menlo Park, CA: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Here we describe the modularization of legacy software systems into MPA agents. In particular, we describe the use of an existing planner (SIPE2 (Wilkins et al. 1995)) and an existing scheduler (OPIS <ref> (Smith, Lassila, & Becker 1996) </ref>) within MPA. (The integration of planning and scheduling within MPA has been a collaboration with Dr. Steve Smith of Carnegie Mellon University.) One shortcoming of the planner in our domain is its inability to perform a capacity analysis early in the planning process.
Reference: <author> Wilkins, D. E., and Myers, K. L. </author> <year> 1995. </year> <title> A common knowledge representation for plan generation and reactive execution. </title> <journal> Journal of Logic and Computation 5(6):731761. </journal>
Reference-contexts: The MPA architecture rests upon a significant amount of infrastructure. One component is a shared plan representation that can be understood by all planning agents. MPA employs the Act formalism for this purpose <ref> (Wilkins & My-ers 1995) </ref>. Additional components include a communication substrate to support asynchronous interagent message passing across networks, and tools to facilitate the construction of agents and planning cells. <p> Updating and querying a plan is more complex than adding and deleting something from a database. Therefore, a richer plan performative language is used for manipulating plans. Act Plan Server We have implemented a specific plan server, named the Act Plan Server, which employs the Act formalism <ref> (Wilkins & Myers 1995) </ref> for plan representation. An Act is the basic structure used to represent an action network in the Act formalism. Acts can be expressed either in a format with embedded graphical information or in plain-text format (to facilitate translation to other languages). <p> Plan and action-network queries support a range of views including the plain-text Act representation, the graphical Act representation, the subplans associated with a given plan, the resource constraints, and the resource allocations. The Act Plan Server is implemented as a PRS agent. PRS <ref> (Wilkins et al. 1995) </ref> was chosen as the implementation framework because of its ability to combine both declarative and procedural representations of knowledge, as well as to support a mixture of event- and goal-driven processing as required for the maintenance of annotations, the handling and distributing of incoming messages, and the <p> Integrating Planning and Scheduling The previous sections described agents that were created specifically for MPA: the Meta-PCM, the PCM, and the Act Plan Server. Here we describe the modularization of legacy software systems into MPA agents. In particular, we describe the use of an existing planner (SIPE2 <ref> (Wilkins et al. 1995) </ref>) and an existing scheduler (OPIS (Smith, Lassila, & Becker 1996)) within MPA. (The integration of planning and scheduling within MPA has been a collaboration with Dr. <p> Plan-ok? causes the planner to apply all critics known to it; Schedule-ok? causes the agent to invoke the scheduler agent of the planning cell; Temporal-ok? causes the agent to invoke the temporal-reasoner agent of the planning cell. The SIPE2 planning system <ref> (Wilkins et al. 1995) </ref> and the Advisable Planner (Myers 1996) have been used as the basis for planner agents within all MPA applications to date. SIPE2 has a precise notion of a planning level, and plan critics that fit naturally into the above scheme.
Reference: <author> Wilkins, D. E.; Myers, K. L.; Lowrance, J. D.; and Wes-ley, L. P. </author> <year> 1995. </year> <title> Planning and reacting in uncertain and dynamic environments. </title> <journal> Journal of Experimental and Theoretical AI 7(1):197227. </journal>
Reference-contexts: The MPA architecture rests upon a significant amount of infrastructure. One component is a shared plan representation that can be understood by all planning agents. MPA employs the Act formalism for this purpose <ref> (Wilkins & My-ers 1995) </ref>. Additional components include a communication substrate to support asynchronous interagent message passing across networks, and tools to facilitate the construction of agents and planning cells. <p> Updating and querying a plan is more complex than adding and deleting something from a database. Therefore, a richer plan performative language is used for manipulating plans. Act Plan Server We have implemented a specific plan server, named the Act Plan Server, which employs the Act formalism <ref> (Wilkins & Myers 1995) </ref> for plan representation. An Act is the basic structure used to represent an action network in the Act formalism. Acts can be expressed either in a format with embedded graphical information or in plain-text format (to facilitate translation to other languages). <p> Plan and action-network queries support a range of views including the plain-text Act representation, the graphical Act representation, the subplans associated with a given plan, the resource constraints, and the resource allocations. The Act Plan Server is implemented as a PRS agent. PRS <ref> (Wilkins et al. 1995) </ref> was chosen as the implementation framework because of its ability to combine both declarative and procedural representations of knowledge, as well as to support a mixture of event- and goal-driven processing as required for the maintenance of annotations, the handling and distributing of incoming messages, and the <p> Integrating Planning and Scheduling The previous sections described agents that were created specifically for MPA: the Meta-PCM, the PCM, and the Act Plan Server. Here we describe the modularization of legacy software systems into MPA agents. In particular, we describe the use of an existing planner (SIPE2 <ref> (Wilkins et al. 1995) </ref>) and an existing scheduler (OPIS (Smith, Lassila, & Becker 1996)) within MPA. (The integration of planning and scheduling within MPA has been a collaboration with Dr. <p> Plan-ok? causes the planner to apply all critics known to it; Schedule-ok? causes the agent to invoke the scheduler agent of the planning cell; Temporal-ok? causes the agent to invoke the temporal-reasoner agent of the planning cell. The SIPE2 planning system <ref> (Wilkins et al. 1995) </ref> and the Advisable Planner (Myers 1996) have been used as the basis for planner agents within all MPA applications to date. SIPE2 has a precise notion of a planning level, and plan critics that fit naturally into the above scheme.
Reference: <author> Wolverton, M. J., and desJardins, M. </author> <year> 1998. </year> <title> Controlling communication in distributed planning using irrelevance reasoning. </title> <booktitle> In Proceedings of the Fifteenth National Conference on Artificial Intelligence (AAAI-98). </booktitle> <publisher> AAAI Press. </publisher>
References-found: 11

