URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-93-3-1.ps.Z
Refering-URL: http://www.cs.man.ac.uk/cstechrep/Abstracts/UMCS-93-3-1.html
Root-URL: http://www.cs.man.ac.uk
Title: Implementing State Machines in Smalltalk  
Author: Trevor P. Hopkins 
Affiliation: Computer Science University of Manchester  
Pubnum: Technical Report UMCS-93-3-1  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Grady Booch, </author> <title> Object-Oriented Design with Applications, </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: The FSM approach is often utilized in both conventional and object-oriented systems; in object-oriented design, it is often recommended that the behaviours of classes are described as if they were FSMs. For example, Booch's design approach <ref> [1] </ref> recommends the use of FSMs to represent the abstract behaviours of classes. In this report, various techniques for the implementation of FSMs are considered, concentrating specifically on Smalltalk representations.
Reference: [2] <institution> An Investigation into the Feasibility of applying the Object-oriented Approach to the Development of OSI Communication Software, Lih Shiew Guo, M.Sc Thesis, Computer Science Department, University of Manchester, </institution> <month> October </month> <year> 1990. </year>
Reference-contexts: Object-oriented design approaches to network protocols <ref> [2] </ref> provided much of the motivation for the work described here. 3 Chapter 2 Implementation Techniques The flexibility of Smalltalk allows for a surprising variety of approaches to the implementation of FSMs.
Reference: [3] <institution> ObjectworksnSmalltalk Version 4.0 Reference Manual, ParcPlace Systems, </institution> <year> 1991. </year>
Reference-contexts: It is assumed that the reader is familiar with object-oriented development in general terms, and with Smalltalk in particular. Also, there are two major variants of Smalltalk currently available: ObjectworksnSmalltalk <ref> [3] </ref> from ParcPlace Systems, based on Smalltalk-80 [4], and the Digitalk products, such as Smalltalk/V for Windows [5] and Smalltalk/V for Presentation Manager [6]. There are also a number of Smalltalk-like systems; these include Opal [7], a language used with the Gemstone [8] object-oriented database.
Reference: [4] <author> David Robson and Adele Goldberg, </author> <title> Smalltalk-80: the Language and its Implementation, </title> <publisher> Addison-Wesley, </publisher> <year> 1984. </year>
Reference-contexts: It is assumed that the reader is familiar with object-oriented development in general terms, and with Smalltalk in particular. Also, there are two major variants of Smalltalk currently available: ObjectworksnSmalltalk [3] from ParcPlace Systems, based on Smalltalk-80 <ref> [4] </ref>, and the Digitalk products, such as Smalltalk/V for Windows [5] and Smalltalk/V for Presentation Manager [6]. There are also a number of Smalltalk-like systems; these include Opal [7], a language used with the Gemstone [8] object-oriented database.
Reference: [5] <author> Smalltalk/V for Windows: </author> <title> Tutorial and Reference Manual, </title> <publisher> Digitalk Inc., </publisher> <year> 1991. </year>
Reference-contexts: It is assumed that the reader is familiar with object-oriented development in general terms, and with Smalltalk in particular. Also, there are two major variants of Smalltalk currently available: ObjectworksnSmalltalk [3] from ParcPlace Systems, based on Smalltalk-80 [4], and the Digitalk products, such as Smalltalk/V for Windows <ref> [5] </ref> and Smalltalk/V for Presentation Manager [6]. There are also a number of Smalltalk-like systems; these include Opal [7], a language used with the Gemstone [8] object-oriented database.
Reference: [6] <author> Smalltalk/V for Presentation Manager: </author> <title> Tutorial and Reference Manual, </title> <publisher> Digitalk Inc., </publisher> <year> 1991. </year>
Reference-contexts: Also, there are two major variants of Smalltalk currently available: ObjectworksnSmalltalk [3] from ParcPlace Systems, based on Smalltalk-80 [4], and the Digitalk products, such as Smalltalk/V for Windows [5] and Smalltalk/V for Presentation Manager <ref> [6] </ref>. There are also a number of Smalltalk-like systems; these include Opal [7], a language used with the Gemstone [8] object-oriented database. Unless otherwise indicated, the techniques discussed here are thought to be appropriate for any of these variants, although the techniques have only been tried using ObjectworksnSmalltalk.
Reference: [7] <institution> Programming in Opal, Servio Corporation, Alameda, California, USA, </institution> <year> 1991. </year>
Reference-contexts: Also, there are two major variants of Smalltalk currently available: ObjectworksnSmalltalk [3] from ParcPlace Systems, based on Smalltalk-80 [4], and the Digitalk products, such as Smalltalk/V for Windows [5] and Smalltalk/V for Presentation Manager [6]. There are also a number of Smalltalk-like systems; these include Opal <ref> [7] </ref>, a language used with the Gemstone [8] object-oriented database. Unless otherwise indicated, the techniques discussed here are thought to be appropriate for any of these variants, although the techniques have only been tried using ObjectworksnSmalltalk.
Reference: [8] <institution> GemStone ODBMS for Sun SPARCstations, Servio Corporation, Alameda, California, USA, </institution> <year> 1993. </year>
Reference-contexts: There are also a number of Smalltalk-like systems; these include Opal [7], a language used with the Gemstone <ref> [8] </ref> object-oriented database. Unless otherwise indicated, the techniques discussed here are thought to be appropriate for any of these variants, although the techniques have only been tried using ObjectworksnSmalltalk.
Reference: [9] <author> Ralph Johnson and Brian Foote, </author> <title> Designing Reusable Classes, </title> <journal> Journal of Object-Oriented Programming, </journal> <month> June </month> <year> 1988, </year> <pages> pp. 22-35. </pages>
Reference-contexts: If consistently named `auxiliary' methods are used, then the class browser and other tools can provide some assistance with structuring and reviewing the code. Another criticism is that the `case' statement style is not really part of the object-oriented approach <ref> [9] </ref>. Instead, the object-oriented style recommends the use of multiple objects with different but compatible behaviours, perhaps instances of different classes, possibly but not necessarily related by inheritance.
Reference: [10] <author> Bertrand Meyer, </author> <title> Object-Oriented Software Construction, </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference: [11] <author> David Ungar and Randall B. Smith, </author> <title> Self: The Power of Simplicity, </title> <journal> ACM SIGPLAN Notices, </journal> <volume> vol. 22, no. 12, </volume> <month> December </month> <year> 1987, </year> <pages> pp. 227-242. </pages>
Reference-contexts: The approach described in section 2.6, where the class of the object representing the FSM changes in order to represent the change of state (and thus behaviour), has much in common with the approach used in languages like Self <ref> [11] </ref> and actors [12]. In Self, dynamic inheritance could be used in a straightforward way to change the behaviour of an object depending on the `state' currently supported, by updating a `parent' slot. Similarly, in actors, the more general delegation approach could be used.
Reference: [12] <author> Gul A. Agha, </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems, </title> <publisher> MIT Press, </publisher> <year> 1986. </year> <month> 31 </month>
Reference-contexts: The approach described in section 2.6, where the class of the object representing the FSM changes in order to represent the change of state (and thus behaviour), has much in common with the approach used in languages like Self [11] and actors <ref> [12] </ref>. In Self, dynamic inheritance could be used in a straightforward way to change the behaviour of an object depending on the `state' currently supported, by updating a `parent' slot. Similarly, in actors, the more general delegation approach could be used.
References-found: 12

