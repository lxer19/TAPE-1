URL: ftp://ftp.cs.caltech.edu/tr/cs-tr-95-11.ps.Z
Refering-URL: ftp://ftp.cs.caltech.edu/tr/INDEX.html
Root-URL: http://www.cs.caltech.edu
Title: RVM33 -1 Quasi-delay-insensitive circuits are Turing-complete  
Author: Rajit Manohar and Alain J. Martin 
Date: November 17, 1995  
Address: Pasadena, CA 91125.  
Affiliation: Department of Computer Science California Institute of Technology  
Abstract: Quasi-delay-insensitive (QDI) circuits are those whose correct operation does not depend on the delays of operators or wires, except for certain wires that form isochronic forks. In this paper we show that quasi-delay-insensitivity, stability and non-interference, and strong confluence are equivalent properties of a computation. In particular, this shows that QDI computations are deterministic. We show that the class of Turing-computable functions have QDI implementations by constructing a QDI Turing machine. Keywords: Quasi-delay-insensitive circuits; Turing machines; Determinism; Confluence; Stability 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> Leeuwen, J. van. </editor> <booktitle> Handbook of Theoretical Computer Science, Volume B: Formal models and semantics. </booktitle> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Since every gate is hazard-free, the circuit is QDI. 2 4. Confluence, Determinism, and Arbiters In this section we examine some of the consequences of stability and non-interference, the two properties that characterize QDI computations. The following definition can be found in <ref> [1] </ref>. Definition. (strong confluence) (8) Let t 1 and t 2 be two transitions that can fire in state s. Let s 1 be the state obtained by firing t 1 in s, and s 2 be the state obtained by firing t 2 in s.
Reference: [2] <author> Martin, Alain J. </author> <title> Compiling Communicating Processes into Delay-Insensitive VLSI Circuits. </title> <booktitle> Distributed Computing 1(4) </booktitle> <pages> 226-234, </pages> <year> 1986. </year>
Reference-contexts: Self-timed circuits assume that wires have negligible delay compared to gates in local isochronic regions [6]. Quasi-delay-insensitive circuit design assumes that both operators and wires can take an arbitrary time to switch, except for certain wires that form isochronic forks <ref> [2] </ref>. In this paper we show that the class of QDI circuits is Turing complete (modulo finite memory), i.e., any recursive function can be computed with QDI circuits. <p> Since the pull-up and pull-down networks are modelled as boolean functions, a gate can be represented by a pair of boolean functions. Such a representation can be expressed using production rules <ref> [2] </ref>. Definition. (production rule) (1) A production rule (PR) is a construct of the form G 7! t, where t is a simple assignment (a transition), and G is a boolean expression known as the guard of the PR.
Reference: [3] <author> Martin, Alain J. </author> <title> The Limitations to Delay-Insensitivity in Asynchronous Circuits. </title> <booktitle> Sixth MIT Conference on Advanced Research in VLSI, </booktitle> <year> 1990. </year>
Reference-contexts: These models typically assume that voltages represent boolean values, and that a transistor can be thought of as a switch. Delay-insensitive circuit design assumes that the correct operation of a circuit is independent of the delay in operators and wires. It was shown in <ref> [3] </ref> that the class of circuits that are entirely delay-insensitive is quite limited. Speed-independent circuit design assumes that operators can take an arbitrary amount of time to switch, but that wires have negligible delays compared to operators. <p> Hence, the completion of transition x 2" has to be justified by timing assumptions. We assume that, when transition x 1" has been acknowledged by transition y", transition x 2" is also completed. This assumption is called the "isochronicity assumption." <ref> [3] </ref>.
Reference: [4] <author> Martin, Alain J. </author> <title> Asynchronous Datapaths and the Design of an Asynchronous Adder. </title> <booktitle> Formal Methods in System Design 1(1) </booktitle> <pages> 119-137, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: For the remainder of this section, we concentrate on TM 2. RVM33 -8 A computation resembles a function block when it is of the form "read inputs", followed by "produce outputs." This computation has a standard QDI implementation <ref> [4] </ref>. <p> The rest of TM 1 can be compiled using the standard function block compilation technique <ref> [4] </ref>, and depends on the next move function ffi. The block diagram of TM 1 is shown in Fig. 6. Fig. 6: Compilation of TM1. 5.3. <p> efficient in any way!) The predicates R and W are given by: R (s = l) _ (s = t ^ LTin = R) W (LTin6=L ^ LTin6=R) ^ (s = t) Since both tapeelem1 and right are function blocks, they can be compiled using the standard technique outlined in <ref> [4] </ref>. We compile read assuming a one-bit dual-railed input on L; this compilation can be easily generalized to n-bits, for any n.
Reference: [5] <author> Miller, Raymond E. </author> <title> Sequential Circuits and Machines. </title> <publisher> John Wiley and Sons, </publisher> <year> 1965. </year>
Reference-contexts: We show that state transitions in QDI circuits must exhibit the diamond property and, as a consequence, all QDI computations are entirely deterministic. In particular, this implies that one cannot build a QDI arbiter. Strong confluence is closely related to the property of semi-modularity <ref> [5] </ref>. However, [5] only considers semi-modularity in the context of sequential machines. In addition, the computations considered are not semi-modular at every state, but only at some states. In [7], it is shown that hazard-free speed-independent asynchronous circuits are deterministic, but under a different gate model. <p> We show that state transitions in QDI circuits must exhibit the diamond property and, as a consequence, all QDI computations are entirely deterministic. In particular, this implies that one cannot build a QDI arbiter. Strong confluence is closely related to the property of semi-modularity <ref> [5] </ref>. However, [5] only considers semi-modularity in the context of sequential machines. In addition, the computations considered are not semi-modular at every state, but only at some states. In [7], it is shown that hazard-free speed-independent asynchronous circuits are deterministic, but under a different gate model.
Reference: [6] <author> Seitz, Charles L. </author> <title> Self-Timed VLSI Systems. </title> <booktitle> Proceedings of the 1st Caltech Conference on Very Large Scale Integration, </booktitle> <year> 1979. </year>
Reference-contexts: Speed-independent circuit design assumes that operators can take an arbitrary amount of time to switch, but that wires have negligible delays compared to operators. Self-timed circuits assume that wires have negligible delay compared to gates in local isochronic regions <ref> [6] </ref>. Quasi-delay-insensitive circuit design assumes that both operators and wires can take an arbitrary time to switch, except for certain wires that form isochronic forks [2].
Reference: [7] <author> Smith, S.F. and Zwarico, A.E. </author> <title> Correct Compilation of Specifications to Deterministic Asynchronous Circuits. </title> <booktitle> Formal Methods in System Design 7 </booktitle> <pages> 155-226, </pages> <year> 1995. </year>
Reference-contexts: Strong confluence is closely related to the property of semi-modularity [5]. However, [5] only considers semi-modularity in the context of sequential machines. In addition, the computations considered are not semi-modular at every state, but only at some states. In <ref> [7] </ref>, it is shown that hazard-free speed-independent asynchronous circuits are deterministic, but under a different gate model. In particular only AND, OR, NOT gates and C-elements are considered. In addition, gates that cannot be directly realized in CMOS are permitted in their model, since they allow gates with inverted inputs.
Reference: [8] <author> Lee, Tak-Kwan. </author> <title> Man page for bubble. Caltech Asynchronous Synthesis Tools, </title> <year> 1993. </year>
Reference-contexts: There are tools that automatically determine where inverters can be placed so that the resulting production rule set is directly implementable <ref> [8] </ref>. 3.2. Circuit malfunction We assume that the only way a QDI circuit can malfunction is if the output of any gate in the circuit glitches.
References-found: 8

