URL: http://www.dmi.usherb.ca/~kabanza/Papers/aaai96.ps
Refering-URL: 
Root-URL: 
Title: Planning for Temporally Extended Goals  
Author: Fahiem Bacchus Froduald Kabanza 
Address: Waterloo, Ontario Canada, N2L 3G1  Sherbrooke, Quebec Canada, J1K 2R1  
Affiliation: Dept. of Computer Science University of Waterloo  Dept. de Math et Informatique Universite de Sherbrooke  
Abstract: In planning, goals have been traditionally been viewed as specifying a set of desirable final states. Any plan that transforms the current state to one of these desirable states is viewed to be correct. Goals of this form are limited as they do not allow us to constrain the manner in which the plan achieves its objectives. We propose viewing goals as specifying desirable sequences of states, and a plan to be correct if its execution yields one of these desirable sequences. We present a logical language, a temporal logic, for specifying goals with this semantics. Our language is rich and allows the representation of a range of temporally extended goals, including classical goals, goals with temporal deadlines, quantified goals (with both universal and existential quantification), safety goals, and maintenance goals. Our formalism is simple and yet extends previous approaches in this area. We also present a planning algorithm that can generate correct plans for these goals. This algorithm has been implemented, and we provide some examples of the formalism at work. The end result is a planning system which can generate plans that satisfy a novel and useful set of conditions. 
Abstract-found: 1
Intro-found: 1
Reference: [AFH91] <author> Rajeev Alur, Tomas Feder, and Thomas Henzinger. </author> <title> The benefits of relaxing punctuality. </title> <booktitle> In Tenth Annual ACM Symposium on Principles of Distributed Computing (PODC 1991), </booktitle> <pages> pages 139-152, </pages> <year> 1991. </year>
Reference-contexts: In the rest of the paper we will first provide the details of the logic we propose for expressing goals. This logic is a temporal logic that is based on previous work by Alur et al. <ref> [AFH91] </ref>. We then present our approach to planning, provide examples to demonstrate the range of goals that our system can cope with, and discuss the heuristic adequacy of our approach to planning. Finally, we close with some conclusions and discussion of future work. <p> Finally, we close with some conclusions and discussion of future work. Expressing goals in MITL We use a logical language for expressing goals. The logic is based on Metric Interval Temporal Logic developed by Alur et al. <ref> [AFH91] </ref>, but we have extended it allow first-order quantification. Syntax We start with a collection of n-ary predicate (including equality and the predicate constants TRUE and FALSE) function and constant symbols, variables, and the connectives : (not) and ^ (and).
Reference: [AKRT91] <author> J. Allen, H. Kautz, Pelavin R., and J. Tenenberg. </author> <title> Reasoning about Plans. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: Kabanza et al. [Kab90, GK91, BKSD95] have developed methods for generating reactive plans that achieve temporally extended goals, as has Drummond [Dru89]. Plan ning systems and theories specifically designed to deal with temporal constraints (and sometimes other metric resources) have also been developed <ref> [Ver83, Wil88, AKRT91, CT91, Lan93, PW94] </ref>. The main difference between these previous works and what we present here, lies in our use of a temporal logic that supports a unique approach to computing plans, an approach based on formula progression.
Reference: [Bac95] <author> Fahiem Bacchus. </author> <note> Tlplan (version 2.0) user's manual. Available via the URL ftp://logos.uwaterloo.ca:/pub/bacchus/tlplan-manual.ps.Z, </note> <year> 1995. </year>
Reference-contexts: This proposition follows from the soundness of our termination test (Proposition 4). We have implemented the planning algorithm as an extension of the TLPLAN system <ref> [Bac95] </ref>. This allowed us to utilize many of the features already built into the TLPLAN system, including full support of the ADL formalism [Ped89] for specifying actions. Example and Empirical Results Types of Goals The domain we used is a variant of the classical STRIPS robot rooms domain [FN71].
Reference: [BK95] <author> Fahiem Bacchus and Froduald Kabanza. </author> <title> Using temporal logic to control search in a forward chaining planner. </title> <booktitle> In Proceedings of the 3rd European Workshop on Planning, </booktitle> <year> 1995. </year> <note> Available via the URL ftp://logos.uwaterloo.ca:/pub/tlplan/tlplan.ps.Z. </note>
Reference-contexts: The method of formula progression lends itself naturally to the specification and utilization of domain dependent search control knowledge. As shown in our previous work <ref> [BK95] </ref>, the approach of domain dependent search control offers considerable promise, and has motivated our approach to dealing with temporally extended goals. The other works that have constructed temporal planners have utilized complex constraint management techniques to deal with temporal information. <p> To generate plans that achieve the goals expressed in our formalism we present a planning algorithm that uses the logical mechanism of formula progression. This notion was previously utilized in our TLPLAN system <ref> [BK95] </ref>. In fact we have implemented the planning algorithm by extending the TLPLAN system. TLPLAN is planning system whose key feature is that it is able to utilize domain dependent search control information.. <p> P is a correct plan for g given s 0 iff M j= g. Generating Plans We will generate plans by adopting the methodology of our previous work <ref> [BK95] </ref>. In particular, we have constructed a forward-chaining planning engine that generates linear sequences of actions, and thus linear sequences of states. As these linear sequences of states are generated we incrementally check them against the goal. <p> The major advantage of our approach lies in the ability of the planner to utilize domain dependent search control information. Such information can be expressed as formulas of MITL and conjoined with the goal. We have explored this approach to search control in <ref> [BK95] </ref> where we demonstrate that is often possible to construct polynomial time planners using quite simple search control knowledge. We know of no other approach to increasing the efficiency of planners that has been able to produce polynomial time behavior in these domains.
Reference: [BKSD95] <author> M. Barbeau, F. Kabanza, and R. St-Denis. </author> <title> Synthesizing plant controllers using real-time goals. </title> <booktitle> In Proc. Thirteenth International Joint Conference on Artificial Intelligence (IJCAI '95), </booktitle> <pages> pages 791-798, </pages> <year> 1995. </year>
Reference-contexts: Temporally extended goals have previously been examined in the literature. Haddawy and Hanks [HH93] have provided utility models for some types of temporally extended goals. Kabanza et al. <ref> [Kab90, GK91, BKSD95] </ref> have developed methods for generating reactive plans that achieve temporally extended goals, as has Drummond [Dru89]. Plan ning systems and theories specifically designed to deal with temporal constraints (and sometimes other metric resources) have also been developed [Ver83, Wil88, AKRT91, CT91, Lan93, PW94]. <p> As shown in our previous work [BK95], the approach of domain dependent search control offers considerable promise, and has motivated our approach to dealing with temporally extended goals. The other works that have constructed temporal planners have utilized complex constraint management techniques to deal with temporal information. In <ref> [Kab90, GK91, BKSD95] </ref> similar temporal logics and similar notions of formula progression have been utilized.
Reference: [CT91] <author> K. Currie and A. Tate. O-plan: </author> <title> the open planning architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 52 </volume> <pages> 49-86, </pages> <year> 1991. </year> <title> 7 In general, in order to achieve some timed goals we may need to allow the robot to wait. But, in that case it is more effective to introduce a specific wait action and still outlaw pointless cycles. </title>
Reference-contexts: Kabanza et al. [Kab90, GK91, BKSD95] have developed methods for generating reactive plans that achieve temporally extended goals, as has Drummond [Dru89]. Plan ning systems and theories specifically designed to deal with temporal constraints (and sometimes other metric resources) have also been developed <ref> [Ver83, Wil88, AKRT91, CT91, Lan93, PW94] </ref>. The main difference between these previous works and what we present here, lies in our use of a temporal logic that supports a unique approach to computing plans, an approach based on formula progression.
Reference: [Dru89] <author> M. Drummond. </author> <title> Situated control rules. </title> <booktitle> In Proc. First International Conference on Principles of Knowledge Representation and Reasoning (KR '89), </booktitle> <pages> pages 103-113. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year>
Reference-contexts: Temporally extended goals have previously been examined in the literature. Haddawy and Hanks [HH93] have provided utility models for some types of temporally extended goals. Kabanza et al. [Kab90, GK91, BKSD95] have developed methods for generating reactive plans that achieve temporally extended goals, as has Drummond <ref> [Dru89] </ref>. Plan ning systems and theories specifically designed to deal with temporal constraints (and sometimes other metric resources) have also been developed [Ver83, Wil88, AKRT91, CT91, Lan93, PW94].
Reference: [EGW94] <author> O. Etzioni, K. Golden, and D. Weld. </author> <title> Tractable closed world reasoning with updates. </title> <booktitle> In Principles of Knowledge Representation and Reasoning: Proc. Forth International Conference (KR '94), </booktitle> <pages> pages 178-189, </pages> <year> 1994. </year>
Reference-contexts: The price that is paid however is efficiency, instead of a database lookup, theorem proving may be required to determine the truth of these two items. However, more conservative notions of incompleteness like locally closed worlds <ref> [EGW94] </ref> could be utilized in our framework without imposing a large computational burden. Also, it should be made clear that restricting ourselves to deterministic actions does not mean actions cannot have conditional effects.
Reference: [Eme90] <author> E. A. Emerson. </author> <title> Temporal and modal logic. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, Volume B, chapter 16, </booktitle> <pages> pages 997-1072. </pages> <publisher> MIT, </publisher> <year> 1990. </year>
Reference-contexts: Hence, it should not be surprising that the underlying semantics we assign to the formulas of MITL be in terms of state sequences. 1 The temporal modalities with the interval [0; 1] correspond precisely to the traditional untimed modalities of Linear Temporal Logic <ref> [Eme90] </ref>. A model for MITL is a timed sequence of states, M = hs 0 ; : : : ; s n ; : : :i. In particular, a model is an infinite sequence of states, and each state is a first-order model over a fixed domain D.
Reference: [FN71] <author> Richard Fikes and Nils Nilsson. </author> <title> Strips: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year>
Reference-contexts: This allowed us to utilize many of the features already built into the TLPLAN system, including full support of the ADL formalism [Ped89] for specifying actions. Example and Empirical Results Types of Goals The domain we used is a variant of the classical STRIPS robot rooms domain <ref> [FN71] </ref>. The configuration of the rooms is illustrated in Figure 1. In this domain there are objects and a robot, which can be located at any of the 2 locations in the corridor, C1 or C4, or any of the 4 rooms R1; : : : ; R4.
Reference: [GK91] <author> P. Godefroid and F. Kabanza. </author> <title> An efficient reactive planner for synthesizing reactive plans. </title> <booktitle> In Proc. National Conference on Artificial Intelligence (AAAI '91), </booktitle> <pages> pages 640-645, </pages> <year> 1991. </year>
Reference-contexts: Temporally extended goals have previously been examined in the literature. Haddawy and Hanks [HH93] have provided utility models for some types of temporally extended goals. Kabanza et al. <ref> [Kab90, GK91, BKSD95] </ref> have developed methods for generating reactive plans that achieve temporally extended goals, as has Drummond [Dru89]. Plan ning systems and theories specifically designed to deal with temporal constraints (and sometimes other metric resources) have also been developed [Ver83, Wil88, AKRT91, CT91, Lan93, PW94]. <p> As shown in our previous work [BK95], the approach of domain dependent search control offers considerable promise, and has motivated our approach to dealing with temporally extended goals. The other works that have constructed temporal planners have utilized complex constraint management techniques to deal with temporal information. In <ref> [Kab90, GK91, BKSD95] </ref> similar temporal logics and similar notions of formula progression have been utilized.
Reference: [HH93] <author> P. Haddawy and S. Hanks. </author> <title> Utility models for goal-directed decision-theoretic planners. </title> <type> Technical Report 93-06-04, </type> <institution> University of Washington, </institution> <year> 1993. </year> <type> Technical Report. </type>
Reference-contexts: Our formalism allows us to specify a wide range of temporally extended goals. This range includes classical goals of achieving some final state; goals with temporal deadlines; safety and maintenance goals like those discussed by Weld and Etzioni and others <ref> [HH93] </ref>; and quantified goals (both universally and existentially quantified). Furthermore, our formalism is a logical language that carries with it a precise, and quite intuitive, semantics. <p> This latter is important, as without a precise semantics for our goals we will not be able to analyze and verify exactly what it is our agents will be accomplishing. Temporally extended goals have previously been examined in the literature. Haddawy and Hanks <ref> [HH93] </ref> have provided utility models for some types of temporally extended goals. Kabanza et al. [Kab90, GK91, BKSD95] have developed methods for generating reactive plans that achieve temporally extended goals, as has Drummond [Dru89]. <p> Safety and Maintenance Goals: In [WE94] Weld and Et-zioni discuss the need for safety conditions in plans. Such conditions have also been studied in the verification literature [MP92]. MITL can express a wide range of such conditions. Maintenance goals (e.g., <ref> [HH93] </ref>) which involve keeping some condition intact, are very similar. Weld and Etzioni propose two specific constructions, don't-disturb and restore, as a start towards the general goal of expressing safety conditions. Both of these constructions are easily encoded as goals in MITL. Don't-disturb specifies a condition (x).
Reference: [Kab90] <author> F. Kabanza. </author> <title> Synthesis of reactive plans for multi-path environments. </title> <booktitle> In Proc. National Conference on Artificial Intelligence (AAAI '90), </booktitle> <pages> pages 164-169, </pages> <year> 1990. </year>
Reference-contexts: Temporally extended goals have previously been examined in the literature. Haddawy and Hanks [HH93] have provided utility models for some types of temporally extended goals. Kabanza et al. <ref> [Kab90, GK91, BKSD95] </ref> have developed methods for generating reactive plans that achieve temporally extended goals, as has Drummond [Dru89]. Plan ning systems and theories specifically designed to deal with temporal constraints (and sometimes other metric resources) have also been developed [Ver83, Wil88, AKRT91, CT91, Lan93, PW94]. <p> As shown in our previous work [BK95], the approach of domain dependent search control offers considerable promise, and has motivated our approach to dealing with temporally extended goals. The other works that have constructed temporal planners have utilized complex constraint management techniques to deal with temporal information. In <ref> [Kab90, GK91, BKSD95] </ref> similar temporal logics and similar notions of formula progression have been utilized.
Reference: [Lan93] <author> A. Lansky. </author> <title> Localized planning with diversified plan construction methods. </title> <type> Technical Report T.R. </type> <institution> FIA-93-17, NASA Ames Research Center, </institution> <year> 1993. </year> <type> Technical Report. </type>
Reference-contexts: Kabanza et al. [Kab90, GK91, BKSD95] have developed methods for generating reactive plans that achieve temporally extended goals, as has Drummond [Dru89]. Plan ning systems and theories specifically designed to deal with temporal constraints (and sometimes other metric resources) have also been developed <ref> [Ver83, Wil88, AKRT91, CT91, Lan93, PW94] </ref>. The main difference between these previous works and what we present here, lies in our use of a temporal logic that supports a unique approach to computing plans, an approach based on formula progression.
Reference: [MP92] <author> Zohar Manna and Amir Pnueli. </author> <title> The temporal logic of reactive and concurrent systems: </title> <publisher> Specication. Springer-Verlag, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: For example, Weld and Etzioni [WE94] present strong arguments for looking beyond the simple achievement of a final state, and suggest two additional constraints on plans, a notion of don't-disturb and restore. In this paper we present a richer formalism for specifying goals that borrows from work in verification <ref> [MP92] </ref>, and develop a planning algorithm for generating plans to achieve such goals. Our formalism suggests a different way of viewing goals in planning. <p> Safety and Maintenance Goals: In [WE94] Weld and Et-zioni discuss the need for safety conditions in plans. Such conditions have also been studied in the verification literature <ref> [MP92] </ref>. MITL can express a wide range of such conditions. Maintenance goals (e.g., [HH93]) which involve keeping some condition intact, are very similar. Weld and Etzioni propose two specific constructions, don't-disturb and restore, as a start towards the general goal of expressing safety conditions.
Reference: [Ped89] <author> E. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <booktitle> In Proc. First International Conference on Principles of Knowledge Representation and Reasoning (KR '89), </booktitle> <pages> pages 324-332, </pages> <year> 1989. </year>
Reference-contexts: Also, it should be made clear that restricting ourselves to deterministic actions does not mean actions cannot have conditional effects. In fact, the planner we implemented handles full ADL conditional actions <ref> [Ped89] </ref> including actions with disjunctive and existentially quantified preconditions. Plan Correctness Given a goal g expressed as a sentence of MITL we want to develop a method for generating plans that satisfy g. Sentences of MITL are satisfied by the timed state sequences described above. <p> This proposition follows from the soundness of our termination test (Proposition 4). We have implemented the planning algorithm as an extension of the TLPLAN system [Bac95]. This allowed us to utilize many of the features already built into the TLPLAN system, including full support of the ADL formalism <ref> [Ped89] </ref> for specifying actions. Example and Empirical Results Types of Goals The domain we used is a variant of the classical STRIPS robot rooms domain [FN71]. The configuration of the rooms is illustrated in Figure 1.
Reference: [PW94] <author> J. Scott Penberthy and Daniel Weld. </author> <title> Temporal planning with continuous change. </title> <booktitle> In Proc. National Conference on Artificial Intelligence (AAAI '94), </booktitle> <pages> pages 1010-1015. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Kabanza et al. [Kab90, GK91, BKSD95] have developed methods for generating reactive plans that achieve temporally extended goals, as has Drummond [Dru89]. Plan ning systems and theories specifically designed to deal with temporal constraints (and sometimes other metric resources) have also been developed <ref> [Ver83, Wil88, AKRT91, CT91, Lan93, PW94] </ref>. The main difference between these previous works and what we present here, lies in our use of a temporal logic that supports a unique approach to computing plans, an approach based on formula progression.
Reference: [Sch87] <author> M. J. Schoppers. </author> <title> Universal plans for reactive robots in unpredictable environments. </title> <booktitle> In Proc. Tenth International Joint Conference on Artificial Intelligence (IJ-CAI '87), </booktitle> <pages> pages 1039-1046, </pages> <year> 1987. </year>
Reference: [Ver83] <author> S. Vere. </author> <title> Planning in time: Windows and durations for activities and goals. </title> <journal> IEEE Trans. on Pattern Analysis and Machine Intelligence, </journal> <volume> 5, </volume> <year> 1983. </year>
Reference-contexts: Kabanza et al. [Kab90, GK91, BKSD95] have developed methods for generating reactive plans that achieve temporally extended goals, as has Drummond [Dru89]. Plan ning systems and theories specifically designed to deal with temporal constraints (and sometimes other metric resources) have also been developed <ref> [Ver83, Wil88, AKRT91, CT91, Lan93, PW94] </ref>. The main difference between these previous works and what we present here, lies in our use of a temporal logic that supports a unique approach to computing plans, an approach based on formula progression.
Reference: [WE94] <author> Daniel Weld and Oren Etzioni. </author> <title> The first law of robotics (a call to arms). </title> <booktitle> In Proc. National Conference on Artificial Intelligence (AAAI '94), </booktitle> <pages> pages 1042-1047, </pages> <year> 1994. </year>
Reference-contexts: However, there are many important constraints we might wish to place on the agent's behavior that simply cannot be expressed using these semantics for goals. The importance of specifying such constraints on the agent's plans has been recognized. For example, Weld and Etzioni <ref> [WE94] </ref> present strong arguments for looking beyond the simple achievement of a final state, and suggest two additional constraints on plans, a notion of don't-disturb and restore. <p> We can specify disjunctive goals, negated conditions, quantified goals, etc. The formula 3 (9 [x:object (x)] at (x; R4) _ at (robot; R4)), for example, specifies the goal state where some object or the robot is in room R4. Safety and Maintenance Goals: In <ref> [WE94] </ref> Weld and Et-zioni discuss the need for safety conditions in plans. Such conditions have also been studied in the verification literature [MP92]. MITL can express a wide range of such conditions. Maintenance goals (e.g., [HH93]) which involve keeping some condition intact, are very similar. <p> If we want to give restore conditions lower priority, as discussed in <ref> [WE94] </ref>, we could resort to the techniques of replanning suggested there. 6 Timings are taken on a SPARC station 20, and a breadth first strategy was used so as to find the shortest plans. G3: Now we change the initial state so all of the doors are closed.
Reference: [Wil88] <author> D. Wilkins. </author> <title> Practical Planning. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: Kabanza et al. [Kab90, GK91, BKSD95] have developed methods for generating reactive plans that achieve temporally extended goals, as has Drummond [Dru89]. Plan ning systems and theories specifically designed to deal with temporal constraints (and sometimes other metric resources) have also been developed <ref> [Ver83, Wil88, AKRT91, CT91, Lan93, PW94] </ref>. The main difference between these previous works and what we present here, lies in our use of a temporal logic that supports a unique approach to computing plans, an approach based on formula progression.
References-found: 21

