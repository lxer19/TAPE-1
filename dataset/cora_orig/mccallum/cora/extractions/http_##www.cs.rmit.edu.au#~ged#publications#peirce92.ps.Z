URL: http://www.cs.rmit.edu.au/~ged/publications/peirce92.ps.Z
Refering-URL: http://www.cs.rmit.edu.au/~ged/cg.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: on PEIRCE: A Conceptual Graphs Workbench  
Author: Gerard Ellis Robert Levinson 
Date: July 10, 1992  
Address: Las Cruces, New Mexico,  
Affiliation: (Eds)  
Note: Proceedings of the First International Workshop  
Abstract-found: 0
Intro-found: 1
Reference: <institution> 13.1 References </institution>
Reference: [AKBLN89] <author> Hassan At-Kaci, Robert Boyer, Patrick Lincoln, and Roger Nasr. </author> <title> Efficient implementation of lattice operations. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 11(1) </volume> <pages> 115-146, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: immediate-predecessors return the set of immediate predecessors of an element. 5. merge merge two posets. 6. statistics print statistics on cost of queries, structure of poset, etc. 7. display display the poset in a hierarchical form. 8. encode encode the hierarchy using the bit encoding method for posets described in <ref> [AKBLN89] </ref>. 9. code find the binary code for a element in the poset. 10. decode find the element (s) of the poset given a binary code. 11. glb compute the greatest lower bound (code) of two given elements of the poset. 12. lub compute the least upper bound (code) of two
Reference: [AKP91] <author> Hassan At-Kaci and Andreas Podelski. </author> <title> Towards a meaning of life. </title> <editor> In Jan Maluszynski and Martin Wirsing, editors, </editor> <booktitle> Proceedings of the 3rd International Symposium on Programming Language Implementation and Logic Programming (Passau, Germany), </booktitle> <pages> pages 255-274. </pages> <publisher> Springer-Verlag, LNCS 528, </publisher> <month> August </month> <year> 1991. </year>
Reference-contexts: The LINEAR group records any extensions to the syntax, such as including the programming languages: Prolog, LIFE <ref> [AKP91] </ref>, and CGC (Conceptual Graphs with Constraints). 1.1.5 Graphical Editor and Display (GRIP) The GRIP group is standardizing the graphical notation and developing graphical editors and displays. The editor will look something like the palette system for XFig, MacDraw etc. <p> The CGC group is also charged with investigating, documenting, and standardizing calls across programming languages used in PEIRCE. The languages supported initially are C ++ , Prolog and LIFE <ref> [AKP91] </ref>. Section 1.2 describes some of the general abstract data types needed for PEIRCE. For example a graph ADT in Prolog may call C ++ routines to do graph matching. A C ++ conceptual graphs ADT may call a Prolog routine for parsing conceptual graphs.
Reference: [ANS91] <author> ANSI. </author> <title> Task group x3h4.6 working paper on the conceptual schema. </title> <type> Technical report, </type> <institution> ANSI, </institution> <year> 1991. </year>
Reference-contexts: Within the normative schema layer the normative language can define all constructs that would be used in any modelling schema language. Thus the normative language "will be rich enough to include a superset of the semantics of all existing schema languages" <ref> [ANS91] </ref>. ANSI has approved the ANSI Task Group X3H4.6 proposal to use conceptual graphs for the normative language. Consequently it has become critical to solve the problem of using conceptual graphs as a conceptual schema language.
Reference: [BC91] <editor> A. L. Birnbaum and G. C. Collins, editors. </editor> <booktitle> Proceedings of the Eighth International Workshop on Machine Learning. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference: [BCH92] <author> Gary Berg-Cross and John Hanna. </author> <title> Exploration of conceptual structures in support of data modeling, </title> <booktitle> concepts, contextually distributed knowledge and the role of cognitive processes. In [Pfe92], </booktitle> <pages> pages 157-166, </pages> <year> 1992. </year>
Reference-contexts: In particular some of the immediate aims are to provide mappings between a number of schema languages (such as NIAM, ER and Express) and conceptual graphs and to describe these languages in terms of conceptual graphs. Other areas of interest include schema/model integration, the use of ontologies <ref> [BCH92] </ref> (which interfaces with the CCAT group) and incorporating conceptual graphs into CAiSE tools.
Reference: [Cre88] <author> Peter Creasy. </author> <title> An information systems view of conceptual graphs. </title> <booktitle> In Proceedings of the International Computer Symposium, </booktitle> <pages> pages 833-838, </pages> <address> Taipei, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: A few other papers have previously shown mappings between ER and conceptual graphs but these have avoided any examples that could not be simply represented in conceptual graphs. We have previously pointed out <ref> [Cre90, Cre88] </ref> some of the problems of using the basic form of conceptual graphs as a conceptual modelling language, due to the relatively complex nature of the specialised constraints required.
Reference: [Cre90] <author> Peter Creasy. </author> <title> Conceptual graphs from a knowledge systems viewpoint. </title> <booktitle> In Australian Joint Artificial Intelligence Conference, volume 406 of Lecture Notes in Computer Science, </booktitle> <pages> pages 256-271. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: A few other papers have previously shown mappings between ER and conceptual graphs but these have avoided any examples that could not be simply represented in conceptual graphs. We have previously pointed out <ref> [Cre90, Cre88] </ref> some of the problems of using the basic form of conceptual graphs as a conceptual modelling language, due to the relatively complex nature of the specialised constraints required.
Reference: [CU91] <author> J. Callan and P. Utgoff. </author> <title> A transformational approach to constructive induction. </title> <booktitle> In Proceedings of the Eighth International Workshop on Machine Learning, </booktitle> <pages> pages 122-126. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: For example, suppose a system has no problem-specific knowledge beyond the specification of the search problem itself (the initial state, the goal condition and the operator definitions). Tackling exactly this problem Callan and Utgoff <ref> [CU91] </ref> have shown how useful domain features can be abstracted from a problem specification in predicate calculus.
Reference: [Cul86] <author> R. E. Cullingford. </author> <title> Natural Language Processing. </title> <publisher> Rowman and Littlefield, </publisher> <year> 1986. </year>
Reference-contexts: We introduce a Natural Language Interface based on the Lexical Conceptual Grammar. Lexical Conceptual Grammar is compared with other grammars such as Lexical Functional Grammar and Cullingford's ERKS <ref> [Cul86] </ref>. 10.2.1 Introduction While it is not always taken to be one of the major concerns in grammar theories, we feel that the balance between a grammar and its associated lexicon for a language cannot be ignored without the grammar itself rendered impracticable. <p> For definiteness, we will use Cullingford's ERKS system <ref> [Cul86] </ref> and illustrate how it works using the example sentence below: 1] Olivia punched Muhammed in the nose. In order to parse/interpret this sentence, we need a dictionary for the content words and some directives for the so-called functor words. <p> The parser can be written so that it can use the information in constructing the overall semantic structure for the sentence containing the word. Purely for the sake of efficiency, Cullingford <ref> [Cul86] </ref> opts for the strategy used here. So for the definite article 'the', no wordsense is provided in the lexicon, instead a directive is provided how to modify the overall semantic structure when the parser encounters the article. <p> Cullingford's ERKS <ref> [Cul86] </ref> translates natural language expressions directly into semantic language expressions without going through a separate syntactic parsing step. Thus the conditions for filling in gaps are specified in both syntactic and semantic terms simultaneously. <p> Also all the constraints mentioned under the lexical entry for the word are satisfied. The referential equivalencies are also ensured in this conceptualization. The position of Cullingford's system <ref> [Cul86] </ref> is an extreme one in the sense that all syntactic information is implemented within the lexicon and there is no grammar rule. This allows for flexible treatment of sentences, even ungrammatical ones. <p> This allows for flexible treatment of sentences, even ungrammatical ones. Unlike two-step parser where all unparsable strings get discarded and never given to the semantic interpreter, one-step systems like Cullingford's attempt <ref> [Cul86] </ref> to give semantics for any word string. The drawback of the latter type systems is that they tend to be less disciplined. It is difficult to have a disciplined/principled way of dictionary writing and to avoid case by case improvisations. Also by necessity the dictionary is saturated with redundancies.
Reference: [Dix91] <author> R. M. W. Dixon. </author> <title> A New Approach to English Grammar on Semantic Principles. </title> <publisher> Oxford, </publisher> <year> 1991. </year>
Reference-contexts: This is to be used for natural language interface in an automated consultation system based on a conceptual graph theory. For further reading also see <ref> [Dix91, Sow91, Win83] </ref>.
Reference: [EG90] <editor> Peter Eklund and Laurie Gerholz, editors. </editor> <booktitle> Proceedings of the Fifth Annual Workshop on Conceptual Graphs, </booktitle> <address> ISBN 91-7870-718-8, Boston&Stockholm, </address> <year> 1990. </year> <institution> Linkoping University. </institution>
Reference: [Ekl88] <author> Peter Eklund. </author> <title> Using conceptual structures for knowledge-base systems development. </title> <type> Master's thesis, </type> <institution> 1988. Master of Philosophy thesis. </institution>
Reference-contexts: Eklund <ref> [Ekl88] </ref> constructed a conceptual structure interface for production rule acquisition in an existing knowledge-base system shell. The results, although favorable, indicated the direction for fundamental improvements and isolated some difficulties with the graphical form [Ekl88]. <p> Eklund <ref> [Ekl88] </ref> constructed a conceptual structure interface for production rule acquisition in an existing knowledge-base system shell. The results, although favorable, indicated the direction for fundamental improvements and isolated some difficulties with the graphical form [Ekl88]. This tool was constructed in the Poplog [Har92] AI environment using the now outdated Sunview graphics environment. More recently Eklund [Ekl91] has constructed a similar style of interface for semantic nets using CLOS (Common Lisp Object System), CLUE (Common Lisp User Interface) and CLX (Common Lisp Xwindows libraries).
Reference: [Ekl91] <author> Peter Eklund. </author> <title> An Epistemic Approach to Interactive Design in Multiple Inheritance Hierarchies. </title> <type> PhD thesis, </type> <institution> Linkoping University, Department of Computer and Information Science, </institution> <year> 1991. </year>
Reference-contexts: The results, although favorable, indicated the direction for fundamental improvements and isolated some difficulties with the graphical form [Ekl88]. This tool was constructed in the Poplog [Har92] AI environment using the now outdated Sunview graphics environment. More recently Eklund <ref> [Ekl91] </ref> has constructed a similar style of interface for semantic nets using CLOS (Common Lisp Object System), CLUE (Common Lisp User Interface) and CLX (Common Lisp Xwindows libraries).
Reference: [EL92] <author> Gerard Ellis and Robert A. Levinson, </author> <title> editors. </title> <booktitle> Proceedings of the First International Workshop on PEIRCE: A Conceptual Graphs Workbench, 1992. Held in association with the Seventh Annual Workshop on Conceptual Graphs, </booktitle> <address> Las Cruces, New Mexico, </address> <month> July 8-10. </month>
Reference-contexts: This group will look at massively parallel hardware to support contents addressable memories as the base for an intelligent platform for PEIRCE. 1.1.4 Linear Notation Input and Output (LINEAR) The LINEAR group is charged with standardizing the linear notation for conceptual graphs and providing parsers and generators for the notation. <ref> [EL92] </ref> contains a grammar for the standard notation. <p> The Birth of PEIRCE: A Conceptual Graphs Workbench 13 modules will give status reports <ref> [EL92] </ref>. The first public release of the PEIRCE Workbench is scheduled for demonstration at the International Conference on Conceptual Structures in Quebec City, Canada, in August 1993. It will include linear and graphical interfaces and a CG database with production rules designed to facilitate the integration of the other modules. <p> Key questions include what portions of PIERCE are parallelizable, and what grains of parallelism are efficiently realizable. Communication patterns specific to the various grains of parallelism in PEIRCE are particularly important. The distributed database issues discussed by Sowa <ref> [EL92] </ref> are also vital to the success of very large scale applications. In addition to a distributed database, distributed processing 1 Department of Computer Engineering, University of California Santa Cruz Santa Cruz CA 95064 U.S.A, (408)459-4043, ARPANET:donrob@cse.ucsc.edu 4. Hardware for PEIRCE 29 should also be investigated. <p> Initial work will be on the conceptual database module, PEIRCE's core, with emphasis on the conceptual graph and poset ADTs and methods presented by Ellis and Levinson in <ref> [EL92] </ref>. The following methods can particularly benefit from fine grain parallelism: * subsumption; * poset encoding, GLB, LUB, insert and delete; * immediate-successors and immediate-predecessors.
Reference: [Ell92a] <author> Gerard Ellis. </author> <title> Compiled hierarchical retrieval. </title> <booktitle> In [NNGE92], </booktitle> <pages> pages 285-310. </pages> <publisher> Ellis Hor-wood, </publisher> <year> 1992. </year> <note> 13. Bibliography 61 </note>
Reference-contexts: The Poset ADT will form the basis of the database provided by the DB group. It will also form the core of the CGC language. CGC will be compiled down to C++ code using the poset (conceptual_graph) ADT. This work will make use of the retrieval methods described in <ref> [Ell92a, LE91] </ref>. Some of the ideas in these papers have already been implemented and are in use in Morph [LS91]. <p> That is the relationship between the graph to be inserted and all of the graphs in the database are found. The graph is inserted by attaching links to the closest (least general) generalizations and closest (least special) specializations in the database. Classification is done in two phases <ref> [Lev92b, Ell92a] </ref>. Phase I is a constrained topological search of the generalization space to get the immediate generalizations of the query graph. That is a level order traversal of the hierarchy constrained to generalizations of the query. Phase II searches topologically the intersection of the subhierarchies found in Phase I.
Reference: [Ell92b] <author> Gerard Ellis. </author> <title> Compiling conceptual graphs. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <note> 1992. to appear. </note>
Reference-contexts: In the short term the graph mechanisms are being tested on graphs (not necessarily conceptual) that are automatically generated. For example the chess graphs generated by Morph [LS91] are being used to test classification and compilation techniques in the generalization hierarchy <ref> [Ell92b] </ref>. Database operations are encapsulated in a partially ordered set of conceptual graphs ADT, CGPoset (see Section 1.2), so that implementations of each of these methods can be easily replaced. Current implementations of the generalization hierarchy (CG database) [Lev92b, Ell92b] are data structures kept in memory. <p> Database operations are encapsulated in a partially ordered set of conceptual graphs ADT, CGPoset (see Section 1.2), so that implementations of each of these methods can be easily replaced. Current implementations of the generalization hierarchy (CG database) <ref> [Lev92b, Ell92b] </ref> are data structures kept in memory. This is hidden from the users of CGPoset. <p> We believe that strategies designed to compile and index large sets of graphs will outperform the general search technique of Prolog when applied to graphs. This is being investigated in the ongoing work on compilation of conceptual graphs in <ref> [Ell92b] </ref>. CGC will have all the powerful data structures of Prolog such as lists, trees, records etc, compiled efficiently. As well as having access to general graphs. <p> In [GT87] conceptual graphs are represented as differences between a graph and its neighbours in the generalization hierarchy. In <ref> [Ell92b] </ref> these differences are in the form of instances of the canonical formation rules. These rule instances are implemented by an abstract machine for conceptual graphs where the formation rules are abstract machine instructions. Alternatively, the rule instances can be expanded into C ++ code and optimized. <p> The learning algorithms themselves learn certain graphs, for example, an induction method over conceptual graphs generates generalizations of graphs in the database. These graphs are useful for representing graphs as differences in <ref> [Ell92b] </ref>. That is learning algorithms which generate new graphs have the potential to speed search in hierarchies. The CGC subgroup is developing Conceptual Graphs with Constraints (CGC) as a programming language. <p> Target applications include high-level neural network models in addition to semantic networks and conceptual graphs. Much of the inspiration for the MISC Machine came from work with Levinson's Morph chess program, particularly the partial order and node descriptors of Method IV [Lev92b] and Ellis' compilation techniques <ref> [Ell92b] </ref>. The Morph group has explored a distributed parallel implementation, but results have been poor due the high latency of local area networks. The MISC machine takes an alternative approach utilizing fine grain data parallelism, emphasizing content addressable memory (CAM) techniques. <p> We believe that strategies designed to compile and index large sets of graphs will outperform the general search technique of Prolog when applied to graphs. This is being investigated in the ongoing work on compilation of conceptual graphs in <ref> [Ell92b] </ref>. CGC will have all the powerful data structures of Prolog such as lists, trees, records etc, compiled efficiently. As well as having access to general graphs.
Reference: [ENYG89] <author> John W. Esch, Timothy E. Nagle, Morgan L. Yim, and Laurie L. Gerholz. </author> <title> CONSTRUCT. </title> <booktitle> In [NN89], </booktitle> <year> 1989. </year>
Reference-contexts: We need to be able to reason that "green ideas sleeping furiously" are ill-formed, so we must still be capable of storing these graphs. 3.2.3 CONSTRUCT: A Conceptual Graph Processor Esch, J. A major efficiency problem in CONSTRUCT <ref> [ENYG89] </ref> is that all arcs were kept as linked lists. If type and relation definitions can be "compiled", so their instances have direct references, performance would be at least an order of magnitude better. 3.2.4 Multi-Level Hierarchical Retrieval Levinson, R., and Ellis, G.
Reference: [Esc89] <author> John W. Esch. </author> <title> Conceptual graph linear forms. </title> <booktitle> In [NN89], </booktitle> <year> 1989. </year>
Reference-contexts: This task will be accomplished through the use of various presentations of the linear form notation, in particular <ref> [Esc89] </ref>, [Sow84] and [Sow89], and through discussion with the Conceptual Graph community. The development of this grammar will place the group in an excellent situation to define a standard for the linear form notation of a Conceptual Graph.
Reference: [FKS86] <author> Christer Fernstrom, Ivan Kruzela, and Bertil Svensson. </author> <title> LUCAS Associative Array Processor. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1986. </year>
Reference-contexts: Like other parallel processors, CAM based systems provide a factor of N speedup (where N is the number of data elements) for algorithms such as shortest path and minimum spanning tree, and similar speedups for matrix and relational database operations <ref> [FKS86] </ref>.
Reference: [GL91a] <author> B. J. Garner and D. Lukose. </author> <title> Expert advisor utilising goal interpretation methods. </title> <booktitle> In Proceedings of the World Congress On Expert Systems, </booktitle> <address> Florida, USA, </address> <month> December 16-19 </month> <year> 1991. </year>
Reference-contexts: A Generalised User Interface (GUI) platform for application kernels is also in prospect. 12.2 Progress The initial research of the Deakin CG Group has focussed on interactive classification. This work has been published <ref> [GT86, GT87, GLT87, GT88, GL91a, GTL + 92] </ref> and the software (in MU Prolog) is available to PEIRCE members for unrestricted use! (contact brian@deakin.oz.au). 1 Division of Computing and Mathematics, Deakin University, Geelong, Australia 3217. Email: brian@deakin.oz.au TEL: (6152) 271383 FAX: (6152) 272028 13
Reference: [GL91b] <author> Jeffrey Gould and Robert A. Levinson. </author> <title> Method integration for experience-based learning. </title> <editor> In R. Michalski, editor, </editor> <booktitle> Proc. International Workshop on Multi-Strategy Learning, </booktitle> <pages> pages 378-393, </pages> <address> Harpers Ferry, West Virginia, </address> <month> November 7-9 </month> <year> 1991. </year> <institution> George Mason University Press. </institution> <note> Also appears as Technical Report UCSC-CRL-91-27. Submitted to Machine Learning Journal. </note>
Reference: [GL92] <author> Jeffrey Gould and Robert A. Levinson. </author> <title> Experience-based adaptive search. </title> <editor> In R. Michalski and G. Tecuci, editors, </editor> <title> Machine Learning IV: A Multi-Strategy Approach. </title> <note> 1992. to appear. </note>
Reference-contexts: Morph is currently implemented in C. Much of the technology in Morph is built on top of a generic retrieval, learning and search model known as APS <ref> [GL92] </ref>. APS and Morph will form a valuable part of the PEIRCE Workbench. PEIRCE will also be used for knowledge based systems, graphical programming, computer assisted theorem proving, specification and verification. PEIRCE will fast track the introduction of new techniques into the community.
Reference: [GLT87] <author> B. J. Garner, D. Lukose, and E. Tsui. </author> <title> A batch processor for the knowledge base editor. </title> <type> Technical Report 87/4, </type> <institution> Xerox AI Laboratory, Division of Computing and Mathematics, Deakin University, </institution> <month> February </month> <year> 1987. </year>
Reference-contexts: A Generalised User Interface (GUI) platform for application kernels is also in prospect. 12.2 Progress The initial research of the Deakin CG Group has focussed on interactive classification. This work has been published <ref> [GT86, GT87, GLT87, GT88, GL91a, GTL + 92] </ref> and the software (in MU Prolog) is available to PEIRCE members for unrestricted use! (contact brian@deakin.oz.au). 1 Division of Computing and Mathematics, Deakin University, Geelong, Australia 3217. Email: brian@deakin.oz.au TEL: (6152) 271383 FAX: (6152) 272028 13
Reference: [GT86] <author> B.J. Garner and E. Tsui. </author> <title> An extendible graph processor for knowledge engineering. </title> <editor> In J.F. Gilmore, editor, </editor> <booktitle> Applications of AI III, </booktitle> <pages> pages 415-433, </pages> <year> 1986. </year> <booktitle> SPIE Proc. </booktitle> <pages> 635. </pages>
Reference-contexts: A Generalised User Interface (GUI) platform for application kernels is also in prospect. 12.2 Progress The initial research of the Deakin CG Group has focussed on interactive classification. This work has been published <ref> [GT86, GT87, GLT87, GT88, GL91a, GTL + 92] </ref> and the software (in MU Prolog) is available to PEIRCE members for unrestricted use! (contact brian@deakin.oz.au). 1 Division of Computing and Mathematics, Deakin University, Geelong, Australia 3217. Email: brian@deakin.oz.au TEL: (6152) 271383 FAX: (6152) 272028 13
Reference: [GT87] <author> Brian J. Garner and Eric Tsui. </author> <title> A self-organizing dictionary for conceptual structures. </title> <editor> In J. F. Gilmore, editor, </editor> <booktitle> Proceedings of the Conference on Applications of Artificial Intelligence, SPIE Proc. </booktitle> <volume> 784, </volume> <pages> pages 356-363, </pages> <year> 1987. </year>
Reference-contexts: These techniques are all based in memory, as yet there is no external database capability. The hierarchy is written out as a text file when shutting down the database, and is loaded from this file at startup time. 3.2.5 Compiling Conceptual Graphs Ellis, G., and Levinson, R. In <ref> [GT87] </ref> conceptual graphs are represented as differences between a graph and its neighbours in the generalization hierarchy. In [Ell92b] these differences are in the form of instances of the canonical formation rules. <p> A Generalised User Interface (GUI) platform for application kernels is also in prospect. 12.2 Progress The initial research of the Deakin CG Group has focussed on interactive classification. This work has been published <ref> [GT86, GT87, GLT87, GT88, GL91a, GTL + 92] </ref> and the software (in MU Prolog) is available to PEIRCE members for unrestricted use! (contact brian@deakin.oz.au). 1 Division of Computing and Mathematics, Deakin University, Geelong, Australia 3217. Email: brian@deakin.oz.au TEL: (6152) 271383 FAX: (6152) 272028 13
Reference: [GT88] <author> B. J. Garner and E. Tsui. </author> <title> General purpose inference engine for canonical graph models. </title> <journal> Knowledge Based Systems, </journal> <volume> 1(5) </volume> <pages> 266-278, </pages> <year> 1988. </year>
Reference-contexts: A Generalised User Interface (GUI) platform for application kernels is also in prospect. 12.2 Progress The initial research of the Deakin CG Group has focussed on interactive classification. This work has been published <ref> [GT86, GT87, GLT87, GT88, GL91a, GTL + 92] </ref> and the software (in MU Prolog) is available to PEIRCE members for unrestricted use! (contact brian@deakin.oz.au). 1 Division of Computing and Mathematics, Deakin University, Geelong, Australia 3217. Email: brian@deakin.oz.au TEL: (6152) 271383 FAX: (6152) 272028 13
Reference: [GTL + 92] <author> B. J. Garner, E. Tsui, D. Lui, D. Lukose, and J. Koh. </author> <title> Progress on an extendible graph processor for knowledge acquisition, planning and reasoning. In [NNGE92]. </title> <publisher> Ellis Horwood, </publisher> <year> 1992. </year>
Reference-contexts: A Generalised User Interface (GUI) platform for application kernels is also in prospect. 12.2 Progress The initial research of the Deakin CG Group has focussed on interactive classification. This work has been published <ref> [GT86, GT87, GLT87, GT88, GL91a, GTL + 92] </ref> and the software (in MU Prolog) is available to PEIRCE members for unrestricted use! (contact brian@deakin.oz.au). 1 Division of Computing and Mathematics, Deakin University, Geelong, Australia 3217. Email: brian@deakin.oz.au TEL: (6152) 271383 FAX: (6152) 272028 13
Reference: [H + 91] <author> Tetsuga Higuchi et al. IMX2: </author> <title> A parallel associative processor. </title> <journal> ACM SIGARCH, </journal> <volume> 19(3) </volume> <pages> 22-33, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: MISC emphasizes associative processing, a form of data parallelism in which memory is accessed by content rather than address, as the basis for intelligent systems. The architecture extends prior work such as SNAP [M + 92] and IMX2 <ref> [H + 91] </ref>, providing greater flexibility and scalability. MISC will support a variety of knowledge representations and AI approaches. Target applications include high-level neural network models in addition to semantic networks and conceptual graphs.
Reference: [Har92] <author> S. Hardy. </author> <title> The POP programming environment. </title> <type> Technical Report Cognitive Science Memo, </type> <institution> CSRP 005, University of Sussex, </institution> <year> 1992. </year>
Reference-contexts: Eklund [Ekl88] constructed a conceptual structure interface for production rule acquisition in an existing knowledge-base system shell. The results, although favorable, indicated the direction for fundamental improvements and isolated some difficulties with the graphical form [Ekl88]. This tool was constructed in the Poplog <ref> [Har92] </ref> AI environment using the now outdated Sunview graphics environment. More recently Eklund [Ekl91] has constructed a similar style of interface for semantic nets using CLOS (Common Lisp Object System), CLUE (Common Lisp User Interface) and CLX (Common Lisp Xwindows libraries).
Reference: [ISO90] <author> ISO/IEC. </author> <title> Portable Operating System Interface (POSIX) Part 1: System Application Program Interface (API) [C Language]. </title> <publisher> Publication Sales, IEEE Service Center, </publisher> <address> P.O.Box 1331, 445 Hoes Lane, Piscataway NJ 08855-1331, U.S.A., telephone (201) 981-0060., </address> <year> 1990. </year> <title> Reference number ISO/IEC 9945-1:1990(E), </title> <publisher> IEEE Std 1003.1-1990. </publisher>
Reference-contexts: It is based on UNIX, so most UNIX developers will be able to conform to it without much additional effort. Since POSIX supports the C programming language, it is the most reasonable operating system standard. Further details can be found in [Zlo91]. The standard itself <ref> [ISO90] </ref> is available from the publisher. 2.5.5 Graphic Interface The graphic interface will be X11R5. It is a window-based interface, supported by most UNIX systems. The X code is available free via FTP from export.lcs.mit.edu. Several tool sets are based on X11R5.
Reference: [Joh78] <author> S. C. Johnson. </author> <title> Yacc | yet another compiler-compiler. </title> <type> Technical Report 32, </type> <institution> Bell Laboratories, </institution> <month> July </month> <year> 1978. </year>
Reference-contexts: At present, we have begun work on a C ++ /LEX [LS]/YACC <ref> [Joh78] </ref> version of the parser that will be capable of parsing a small subset of the linear form grammar (see Appendix A). This initial form of the grammar is based on John Sowa's presentation in [Sow84]. The parser will accept, as input, ASCII descriptions of Conceptual Graphs in linear form.
Reference: [K + 89] <author> Peter Kogge et al. </author> <title> Vlsi and rule-based systems. </title> <editor> In Jose G. Delgado-Frias and Will R. Moore, editors, </editor> <booktitle> VLSI for Artificial Intelligence. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, 1989. </address> <publisher> 62 Ellis, </publisher> <editor> G., and Levinson, </editor> <publisher> R. </publisher>
Reference-contexts: This approach also appears encouraging in the light of prior results utilizing CAM in AI systems for backtracking, clause filtering, conflict resolution, demand driven reduction, garbage collection, inference, Rete, unification and variable binding <ref> [K + 89, Kog91] </ref>. CAM is also well known for its benefits in symbol and pattern matching. With full data parallelism many operations that require lengthy algorithms on conventional processors can be performed in constant time with simple code. This can radically alter how one conceptualizes and codes a problem.
Reference: [KB82] <author> R. M. Kaplan and Joan Bresnan. </author> <title> Lexical functional grammar: A formal system for grammatical representation. In Joan Bresnan, editor, In The Mental Representation of Grammatical Relations. </title> <publisher> MIT Press, </publisher> <year> 1982. </year>
Reference-contexts: NLP: Natural Language Parsers and Generators 49 a lexical conceptual grammar can be written, and then compare our grammar with Kaplan-Bresnan's lexical-functional grammar <ref> [KB82] </ref>. 10.2.2 Lexical Parsing and Interpretation First we will try to demonstrate how a NL system will parse a sentence. For definiteness, we will use Cullingford's ERKS system [Cul86] and illustrate how it works using the example sentence below: 1] Olivia punched Muhammed in the nose.
Reference: [Knu84] <author> Donald E. Knuth. </author> <title> The T E Xbook. </title> <publisher> Addison-Wesley, </publisher> <year> 1984. </year>
Reference-contexts: Developers must rely on written units to convey information to the community. 2.4.1 Manuals and Technical Reports The standard text format for manuals and technical reports shall be L a T E X, as described in [Lam86]. This is a subset of T E X, as described in <ref> [Knu84] </ref>. It is available via anonymous ftp from byron.u.washington.edu (128.95.48.32) in the directory ./pub/unixtex. It is large, so please be sure to observe proper ftp etiquette when getting it. It is also available through the University of Washington, for a small fee.
Reference: [Kog91] <author> Peter M. Kogge. </author> <title> The Architecture of Symbolic Computers. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: This approach also appears encouraging in the light of prior results utilizing CAM in AI systems for backtracking, clause filtering, conflict resolution, demand driven reduction, garbage collection, inference, Rete, unification and variable binding <ref> [K + 89, Kog91] </ref>. CAM is also well known for its benefits in symbol and pattern matching. With full data parallelism many operations that require lengthy algorithms on conventional processors can be performed in constant time with simple code. This can radically alter how one conceptualizes and codes a problem.
Reference: [KS90] <author> Shmuel Kliger and Ehud Shapiro. </author> <title> From decision trees to decision graphs. </title> <editor> In S. Debray and M. Hermengildo, editors, </editor> <booktitle> Proceedings of the North American Conference on Logic Programming, </booktitle> <pages> pages 97-116. </pages> <publisher> MIT Press, </publisher> <address> 1990. Austin, Texas, </address> <month> 29 October-1 November. </month>
Reference-contexts: Alternatively, the rule instances can be expanded into C ++ code and optimized. Methods have also been designed for compiling the hierarchy structure itself into C ++ code rather than left as a data structure to be interpreted by some algorithm. Decision Graphs <ref> [KS90] </ref> have been designed for indexing Prolog terms using matching. This method is a compilation of depth-first search through the hierarchy. Ellis is adapting the method to more general terms such as conceptual graphs. 3.2.6 Adaptive Maximal Join Creasy, P., and Ellis, G.
Reference: [Lam86] <author> Leslie Lamport. </author> <title> L a T E X: A Document Preparation System. </title> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: Developers must rely on written units to convey information to the community. 2.4.1 Manuals and Technical Reports The standard text format for manuals and technical reports shall be L a T E X, as described in <ref> [Lam86] </ref>. This is a subset of T E X, as described in [Knu84]. It is available via anonymous ftp from byron.u.washington.edu (128.95.48.32) in the directory ./pub/unixtex. It is large, so please be sure to observe proper ftp etiquette when getting it.
Reference: [LBS81] <author> P. Langley, G. L. Bradshaw, and H. A. Simon. </author> <title> BACON.5:the discovery of conservation laws. </title> <booktitle> In Proceedings of Int'l Joint Conference on Artificial Intelligence. AAAI, </booktitle> <year> 1981. </year>
Reference-contexts: Such guidelines are reminiscent of heuristics for concept discovery used in AM and Eurisko and other machine discovery systems <ref> [LBS81] </ref>, but here are meant to be purely syntactic based on the original state descriptions. Analysis shows that most of the patterns (and many others) considered by APS systems in a variety of domains would, in principle, be generated from these rules.
Reference: [LBS + 92] <author> Robert A. Levinson, B. Beach, Richard Snyder, T. Dayan, and K. Sohn. </author> <title> Adaptive-predictive game-playing programs. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <note> 1992. to appear. Also appears as Technical Report UCSC-CRL-90-12, </note> <institution> University of California, Computer Research Laboratory, </institution> <address> Santa Cruz, CA 95064. </address>
Reference: [LE91] <author> Robert A. Levinson and Gerard Ellis. </author> <title> Multi-level hierarchical retrieval. </title> <booktitle> In [Way91], </booktitle> <pages> pages 67-81, </pages> <address> Suny-Binghamton, </address> <month> July </month> <year> 1991. </year> <note> Also, to appear in special issue of Knowledge-Based Systems Journal on Conceptual Graphs. </note>
Reference-contexts: The Poset ADT will form the basis of the database provided by the DB group. It will also form the core of the CGC language. CGC will be compiled down to C++ code using the poset (conceptual_graph) ADT. This work will make use of the retrieval methods described in <ref> [Ell92a, LE91] </ref>. Some of the ideas in these papers have already been implemented and are in use in Morph [LS91]. <p> Levinson and Ellis have collaborated on designs for associative databases <ref> [LE91] </ref>. Levinson, Ellis, and Yang et al. are working on integrating their methods into the PEIRCE DB module implemented in C ++ . Each of these methods works on associative retrieval of graphs from a database. There is an exciting opportunity for synergism of these methods. <p> That is a level order traversal of the hierarchy constrained to generalizations of the query. Phase II searches topologically the intersection of the subhierarchies found in Phase I. The multi-hierarchical retrieval method <ref> [LE91] </ref> is based on hierarchies of the form * conceptual graph hierarchy (generalization hierarchy) * node descriptor hierarchy * node descriptor unit hierarchy * type hierarchy The conceptual graph hierarchy contains terms with a rich structure, node descriptors have less structure, node descriptors still less, with types having the minimal structure <p> In addition to supporting these methods we intend to support other learning mechanisms that are based on first order logic or graph matching. Each method could benefit by access to the node descriptor generation mechanisms of Method IV <ref> [LE91] </ref> as well as the associative retrieval algorithms themselves. Further utilities for reading in and out and displaying CG graphs are also critical. 9.2 Learning Structural Concepts from Noisy Examples Liquiere, M. <p> The current routines that have been built work in polynomial-time by using traditional statistical classification methods. Instead for PEIRCE we would like to write a routine that works directly with the node descriptors of Method IV retrieval <ref> [LE91] </ref>. These node descriptors are analogous to the rooted trees used in Liquiere's previous work and should facilitate matching.
Reference: [Lev92a] <author> Robert A. Levinson. </author> <title> APS: An architecture for experience-based knowledge acquisition. </title> <booktitle> In Proc. Workshop on Computational Architectures for Supporting Machine Learning and Knowledge Acquisition at Machine Learning Conference. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> 1992. Ab-erdeen, Scotland, </address> <month> July 4. </month>
Reference: [Lev92b] <author> Robert A. Levinson. </author> <title> Pattern associativity and the retrieval of semantic networks. </title> <journal> Computers & Mathematics with Applications Journal, </journal> <volume> 23(2) </volume> <pages> 573-600, </pages> <year> 1992. </year> <title> Part 2 of special issue on Semantic Networks in Artificial Intelligence, Fritz Lehman, Guest Editor, </title> <note> Perg-amon Press. Also to appear in the book "Semantic Networks for Artificial Inteligence", Pergamon Press. Also appears as Technical Report UCSC-CRL-90-30, </note> <institution> University of Cal-ifornia, Computer Research Laboratory, </institution> <address> Santa Cruz, CA 95064. </address>
Reference-contexts: Database operations are encapsulated in a partially ordered set of conceptual graphs ADT, CGPoset (see Section 1.2), so that implementations of each of these methods can be easily replaced. Current implementations of the generalization hierarchy (CG database) <ref> [Lev92b, Ell92b] </ref> are data structures kept in memory. This is hidden from the users of CGPoset. <p> That is the relationship between the graph to be inserted and all of the graphs in the database are found. The graph is inserted by attaching links to the closest (least general) generalizations and closest (least special) specializations in the database. Classification is done in two phases <ref> [Lev92b, Ell92a] </ref>. Phase I is a constrained topological search of the generalization space to get the immediate generalizations of the query graph. That is a level order traversal of the hierarchy constrained to generalizations of the query. Phase II searches topologically the intersection of the subhierarchies found in Phase I. <p> Target applications include high-level neural network models in addition to semantic networks and conceptual graphs. Much of the inspiration for the MISC Machine came from work with Levinson's Morph chess program, particularly the partial order and node descriptors of Method IV <ref> [Lev92b] </ref> and Ellis' compilation techniques [Ell92b]. The Morph group has explored a distributed parallel implementation, but results have been poor due the high latency of local area networks. The MISC machine takes an alternative approach utilizing fine grain data parallelism, emphasizing content addressable memory (CAM) techniques.
Reference: [LG92] <author> Robert A. Levinson and Jeffrey Gould. </author> <title> Experience-based adaptive search. </title> <editor> In Ryzard Michalski and George Tecuci, editors, </editor> <title> Machine Learning 4: A Multi-Strategy Approach. </title> <publisher> Morgan Kaufman, </publisher> <year> 1992. </year> <booktitle> Presented at Workshop on Machine Learning at Ninth Biennial Conference of the Canadian Society of Computational Studies (CSCSI), </booktitle> <address> Vancouver, Canada, </address> <month> May 12. </month>
Reference: [LPS90] <author> Michel Liquiere, P. Pingand, and J. Sallantin. </author> <title> The practical application of machine learning to the prediction of tertiary structure of proteins. </title> <booktitle> In Advances in Biomedical Computing and Human Reasoning. </booktitle> <year> 1990. </year>
Reference: [LS] <author> M. E. Lesk and E. Schmidt. </author> <title> Lex | a lexical analyzer generator. In Unix Programmer's Manual, Tenth Edition, </title> <institution> Bell Laboratories, </institution> <year> 1989. </year>
Reference: [LS89a] <author> Michel Liquiere and J. Sallantin. Inne: </author> <title> A structural learning algorithms for noisy data. </title> <booktitle> In EWSL, </booktitle> <year> 1989. </year>
Reference: [LS89b] <author> Michel Liquiere and J. Sallantin. Inne: </author> <title> Induction in networks. </title> <booktitle> In Proc. IEEE International workshop on Tools for AI, </booktitle> <address> Fairfax, USA, </address> <month> October </month> <year> 1989. </year>
Reference: [LS91] <author> Robert A. Levinson and Richard Snyder. </author> <title> Adaptive pattern oriented chess. </title> <booktitle> In Proceedings of AAAI-91, </booktitle> <pages> pages 601-605. </pages> <address> Morgan-Kaufman, </address> <year> 1991. </year> <note> 13. Bibliography 63 </note>
Reference-contexts: PEIRCE will allow developers to write / draw / parse / learn large conceptual graphs programs / databases / ontologies. A module will be included to demonstrate PEIRCE's support for natural language processing amajor application for many conceptual graphs researchers. An adaptive, pattern-oriented chess playing system <ref> [LS91] </ref>, Morph, will be used to verify and show the high-level support for learning mechanisms and databases of conceptual graphs. Morph is currently implemented in C. Much of the technology in Morph is built on top of a generic retrieval, learning and search model known as APS [GL92]. <p> Testing the database requires large numbers of conceptual graphs, thus the database is dependent on the conceptual catalog group. In the short term the graph mechanisms are being tested on graphs (not necessarily conceptual) that are automatically generated. For example the chess graphs generated by Morph <ref> [LS91] </ref> are being used to test classification and compilation techniques in the generalization hierarchy [Ell92b]. Database operations are encapsulated in a partially ordered set of conceptual graphs ADT, CGPoset (see Section 1.2), so that implementations of each of these methods can be easily replaced. <p> CGC will be compiled down to C++ code using the poset (conceptual_graph) ADT. This work will make use of the retrieval methods described in [Ell92a, LE91]. Some of the ideas in these papers have already been implemented and are in use in Morph <ref> [LS91] </ref>. <p> In the short term the graph mechanisms will be tested on graphs (not necessarily conceptual) which are automatically generated. For example the chess graphs generated by the adaptive, pattern-oriented chess playing system, Morph <ref> [LS91] </ref>, are being used to test classification and compilation techniques in the generalization hierarchy. 3.4 Interactions with other Subgroups: LRN, CGC The graphs generated by the learning algorithms from the LRN subgroup will supply the necessary numbers of graphs for testing large databases.
Reference: [M + 92] <author> Dan Moldovan et al. </author> <title> SNAP: Parallel processing applied to AI. </title> <journal> Computer, </journal> <volume> 25(5) </volume> <pages> 39-49, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: MISC emphasizes associative processing, a form of data parallelism in which memory is accessed by content rather than address, as the basis for intelligent systems. The architecture extends prior work such as SNAP <ref> [M + 92] </ref> and IMX2 [H + 91], providing greater flexibility and scalability. MISC will support a variety of knowledge representations and AI approaches. Target applications include high-level neural network models in addition to semantic networks and conceptual graphs.
Reference: [MC92] <author> Bernard Moulin and Peter Creasy. </author> <title> Extending the conceptual graph approach for data conceptual modelling. </title> <journal> Data and Knowledge Engineering, </journal> <volume> 8(3) </volume> <pages> 165-194, </pages> <year> 1992. </year>
Reference-contexts: It involves matching compatible structures from distinct schemas and using these as joining points. It normally is a mostly manual process. We propose to make it a semi-automatic process by using what we call adaptive maximal joins. The maximality is determined interactively. We have proposed <ref> [MC92] </ref> a two level approach to information systems design using conceptual graphs. In this approach the informal (but semantically undefined) relationships of NIAM would be defined in terms of the semantically richer conceptual graphs.
Reference: [MGG89] <author> Guy Mineau, J. Gecsei, and R. Godin. </author> <title> Improving consistencies within knowledge bases. </title> <editor> In M. Shader and W. Gaul, editors, </editor> <title> Knowledge, Data and Computer-Assisted Decisions, </title> <booktitle> volume F 61 of NATO ASI Series, </booktitle> <pages> pages 49-65. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Again it will be desirable to see how the node descriptors of Method IV can be used to accelerate Mineau's current algorithms. Liquiere's work with noise may also be an interesting addition, Related reading includes <ref> [MGG89, Min89, MGG90, Min90a, Min90b, Min92] </ref>. 44 Levinson, R. et al. 9.4 Experience-Based Knowledge Acquisition for State-Space Search Problems Levinson, R.
Reference: [MGG90] <author> Guy Mineau, J. Gecsei, and R. Godin. </author> <title> Structuring knowledge bases using automatic learning. </title> <booktitle> In Proc. of the 6th Int. Conf. on Data Engineering, </booktitle> <pages> pages 274-280. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: Again it will be desirable to see how the node descriptors of Method IV can be used to accelerate Mineau's current algorithms. Liquiere's work with noise may also be an interesting addition, Related reading includes <ref> [MGG89, Min89, MGG90, Min90a, Min90b, Min92] </ref>. 44 Levinson, R. et al. 9.4 Experience-Based Knowledge Acquisition for State-Space Search Problems Levinson, R.
Reference: [Min89] <author> Guy Mineau. </author> <title> Induction on conceptual graphs: Finding common generalizations and compatible projections. </title> <booktitle> In [NN89], </booktitle> <year> 1989. </year>
Reference-contexts: Again it will be desirable to see how the node descriptors of Method IV can be used to accelerate Mineau's current algorithms. Liquiere's work with noise may also be an interesting addition, Related reading includes <ref> [MGG89, Min89, MGG90, Min90a, Min90b, Min92] </ref>. 44 Levinson, R. et al. 9.4 Experience-Based Knowledge Acquisition for State-Space Search Problems Levinson, R.
Reference: [Min90a] <author> Guy Mineau. </author> <title> Normalizing conceptual graphs. </title> <booktitle> In [EG90], </booktitle> <year> 1990. </year>
Reference-contexts: Again it will be desirable to see how the node descriptors of Method IV can be used to accelerate Mineau's current algorithms. Liquiere's work with noise may also be an interesting addition, Related reading includes <ref> [MGG89, Min89, MGG90, Min90a, Min90b, Min92] </ref>. 44 Levinson, R. et al. 9.4 Experience-Based Knowledge Acquisition for State-Space Search Problems Levinson, R.
Reference: [Min90b] <author> Guy Mineau. </author> <title> Structuration de bases de connaissances par generalisation. </title> <type> PhD thesis, </type> <institution> Universite de Montreal, </institution> <month> June </month> <year> 1990. </year> <institution> These de Doctorat (Ph.D.). </institution>
Reference-contexts: Again it will be desirable to see how the node descriptors of Method IV can be used to accelerate Mineau's current algorithms. Liquiere's work with noise may also be an interesting addition, Related reading includes <ref> [MGG89, Min89, MGG90, Min90a, Min90b, Min92] </ref>. 44 Levinson, R. et al. 9.4 Experience-Based Knowledge Acquisition for State-Space Search Problems Levinson, R.
Reference: [Min92] <author> Guy Mineau. </author> <title> Acquisition d'objets structures destines a la classification symbolique. </title> <institution> In Actes des 1eres Journees Francophones sur l'Apprentissage et l'Explicitation des Connais-sances, Dourdan, France, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Again it will be desirable to see how the node descriptors of Method IV can be used to accelerate Mineau's current algorithms. Liquiere's work with noise may also be an interesting addition, Related reading includes <ref> [MGG89, Min89, MGG90, Min90a, Min90b, Min92] </ref>. 44 Levinson, R. et al. 9.4 Experience-Based Knowledge Acquisition for State-Space Search Problems Levinson, R.
Reference: [NH89] <author> G M Nijssen and T. Halpin. </author> <title> Fact-Based Conceptual Schema and Relational Database Design Using NIAM. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: The modelling process, which aims to capture as much as possible of the Universe of Discourse (UoD), is central to the implementation of database systems. Several of these tools (e.g. NIAM <ref> [NH89] </ref>) have been used commercially for a number of years. These languages capture the static aspects of the UoD, providing the ability to represent a few (but important) constraints, and permit a translation into a relational database schema.
Reference: [NN89] <author> Janice A. Nagle and Timothy E. </author> <title> Nagle, </title> <editor> editors. </editor> <booktitle> Proceedings of the Fourth Annual Workshop on Conceptual Graphs, </booktitle> <address> Detroit, </address> <year> 1989. </year>
Reference: [NNGE92] <author> Tim Nagle, Jan Nagle, Laurie Gerholz, and Peter Eklund, </author> <title> editors. Conceptual Structures: Current Research and Practice. </title> <publisher> Ellis Horwood, </publisher> <year> 1992. </year>
Reference-contexts: Each year an international conceptual graphs workshop is held, this being the seventh. Next year the first international conceptual graphs conference will be held. A survey of current research and practice in the conceptual graph community can be found in <ref> [NNGE92] </ref>. There are several very good implementations of subsets of conceptual graphs theory, and there are many people doing innovative work on particular aspects. But there is not as yet a robust, widely available set of tools for developing applications based on conceptual graphs.
Reference: [Pag90] <author> Maurice Pagnucco. </author> <title> Cogno a graphical user interface to conceptual graphs. </title> <type> Unpublished Honours Thesis, </type> <institution> University of Sydney, </institution> <month> November </month> <year> 1990. </year>
Reference-contexts: Subgroups working on each of the PEIRCE 3 The linear notation parser described in <ref> [Pag90] </ref> is being integrated with the database to demonstrate the database at the conceptual graph workshop and is the first test of PEIRCE's distributed development. 1. The Birth of PEIRCE: A Conceptual Graphs Workbench 13 modules will give status reports [EL92]. <p> It is written in Prolog [YCO92]. * Maurice Pagnucco (Coordinator) Honours degree thesis on graphical interfaces for Conceptual Graphs <ref> [Pag90] </ref>. A parser for the linear form of a Conceptual Graph which was developed as part of this project is available, in modified form, via ftp from: - cluster.cs.su.oz.au (129.78.8.1): /pub/peirce/cgparser.tar.Z - crl.nmsu.edu (128.123.1.18): /pub/cg/cgparser.tar.Z * Michel Wermelinger Implemented CGT (Conceptual Graph Tools) [Wer91] as part of his B.Sc. thesis.
Reference: [Pel91] <author> Barney Pell. </author> <title> A computer game-learning tournament. </title> <note> (In Preparation), </note> <year> 1991. </year>
Reference-contexts: Analysis of the operators might produce features about which legal moves each piece has and whether one piece can legally capture another, whether castling is legal and whether a pawn can promote. Barney Pell <ref> [Pel91] </ref> is applying further "general game-playing" analysis to produce features even more useful than these from the rules of the game.
Reference: [Pfe92] <author> Heather Pfeiffer, </author> <title> editor. </title> <booktitle> Proceedings of the Seventh Annual Workshop on Conceptual Graphs. </booktitle> <publisher> Springer Verlag, </publisher> <address> 1992. Las Cruces, New Mexico, </address> <month> July 8-10. </month>
Reference: [PH91] <author> Heather D. Pfeiffer and Roger T. </author> <title> Hartley. The conceptual programming environment, cp: Time, space and heuristic constraints. </title> <booktitle> In [Way91], </booktitle> <year> 1991. </year>
Reference-contexts: The database of conceptual graphs is implemented by storing the graphs into an internal hash table structure using 3-tuples from database theory. These graphs are stored as objects where the object follow a direct hierarchical structure of object types <ref> [PH91] </ref>. The CP environment handles linear and graphical input and can handle objects of multiple types, such as, FACTS, DEFINITIONS (schemas, relations, types), PROCEDURAL (time and space), and CONSTRAINTS (feasibility and runtime).
Reference: [Rob73] <author> Don D. Roberts. </author> <title> The Existential Graphs of Charles S. Peirce. </title> <publisher> Mouton, </publisher> <address> The Hague, </address> <year> 1973. </year>
Reference-contexts: Introduction The PEIRCE project is named after the American philosopher Charles Sanders Peirce who in 1896 developed the logic Existential Graphs <ref> [Rob73] </ref>. Peirce described existential graphs as "the logic of the future". It is nearly a century since Peirce made that statement, and only now is his logic poised to become a reality with the widespread use of powerful graphics workstations that can run the PEIRCE workbench. <p> The LINEAR group is working on extending the syntax of the parser to handle Prolog and LIFE programs. 10 Ellis, G., and Levinson, R. 1.1.8 Inference/Theorem-Proving Mechanisms (PROOF) The PROOF group will develop proof procedures for conceptual graphs. The alpha and beta rules of Existential Graphs <ref> [Rob73] </ref> will make excellent interactive proof tools. Eventually proof techniques developed by this group will be written in CGC. 1.1.9 Learning Mechanisms (LRN) LRN is providing mechanisms for learning search control knowledge, structural concepts from noisy examples, conceptual clustering and classification.
Reference: [Sow84] <author> John F. Sowa. </author> <title> Conceptual Structures: Information Processing in Mind and Machine. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1984. </year>
Reference-contexts: John Sowa introduced Peirce's Existential Graphs to the field of artificial intelligence, as the foundation of his Conceptual Graphs theory <ref> [Sow84] </ref>. Conceptual graphs is an order-sorted logic with a standard mapping to natural language. A diverse, active research community has grown up around Sowa's work. Each year an international conceptual graphs workshop is held, this being the seventh. Next year the first international conceptual graphs conference will be held. <p> At present, we have begun work on a C ++ /LEX [LS]/YACC [Joh78] version of the parser that will be capable of parsing a small subset of the linear form grammar (see Appendix A). This initial form of the grammar is based on John Sowa's presentation in <ref> [Sow84] </ref>. The parser will accept, as input, ASCII descriptions of Conceptual Graphs in linear form. Provided the description is syntactically correct, the relevant values will be placed in the appropriate PEIRCE core data structures. <p> This task will be accomplished through the use of various presentations of the linear form notation, in particular [Esc89], <ref> [Sow84] </ref> and [Sow89], and through discussion with the Conceptual Graph community. The development of this grammar will place the group in an excellent situation to define a standard for the linear form notation of a Conceptual Graph. <p> Oh 1 Steve Graham Wen-Jung Hsin Gi-Chul Yang Young Bae Choi Key-Sun Choi 2 Sung-Hyon Myaeng 3 10.1 Introduction A major application of Conceptual Graphs <ref> [Sow84] </ref> is natural language processing. The NLP subgroup consists of a number of groups. The following is a description of the work in this area by University of Missouri at Kansas City group. 10.2 Lexical Conceptual Grammar Oh, J.C., Graham, S., Hsin, W-J., Yang, G-C., Choi, Y.B. <p> NLP: Natural Language Parsers and Generators 53 10.2.5 Generation The Generation subgroup at UMKC has implemented the first version of language generator from CG to English in C++. This language generator closely follows <ref> [Sow84] </ref> Section 5.4. Because there are many relation types, our goal in the first version is to get a working implementation that allows for future expansion. Currently, we are working on providing a complete language generator for any conceptual graph.
Reference: [Sow89] <author> John F. Sowa. </author> <title> Conceptual graph notation. </title> <booktitle> In [NN89], </booktitle> <year> 1989. </year>
Reference-contexts: This task will be accomplished through the use of various presentations of the linear form notation, in particular [Esc89], [Sow84] and <ref> [Sow89] </ref>, and through discussion with the Conceptual Graph community. The development of this grammar will place the group in an excellent situation to define a standard for the linear form notation of a Conceptual Graph.
Reference: [Sow91] <editor> John F. Sowa, editor. </editor> <booktitle> Principles of Semantic Networks: Explorations in the Representation of Knowledge. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: This is to be used for natural language interface in an automated consultation system based on a conceptual graph theory. For further reading also see <ref> [Dix91, Sow91, Win83] </ref>.
Reference: [Str91] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year> <month> 2/e. </month>
Reference-contexts: Documentation must include test data sets, both for typical or usual function of the software, and for exceptional cases. 2.5.2 Programming Language The programming language for all implemented modules will be C++, version 2.1. A description of the language can be found in <ref> [Str91] </ref>. A version of C/C++ is available via anonymous ftp in /pub/gnu at prep.ai.mit.edu (the GNU archive) from the Open Software Foundation for non-profit distribution. 20 Ellis, G., and Levinson, R.
Reference: [Way91] <editor> Eileen Way, editor. </editor> <booktitle> Proceedings of the Sixth Annual Workshop on Conceptual Graphs, Binghamton, </booktitle> <year> 1991. </year> <title> SUNY Binghamton. </title> <publisher> 64 Ellis, </publisher> <editor> G., and Levinson, </editor> <publisher> R. </publisher>
Reference: [Wer91] <author> Michel Wermelinger. </author> <title> Get: Graph editor and tools | the incomplete reference. </title> <type> Technical Report RT-3/91-CIUNL, </type> <institution> Centro de Informatica da Universidade Nova de Lisboa, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: A parser for the linear form of a Conceptual Graph which was developed as part of this project is available, in modified form, via ftp from: - cluster.cs.su.oz.au (129.78.8.1): /pub/peirce/cgparser.tar.Z - crl.nmsu.edu (128.123.1.18): /pub/cg/cgparser.tar.Z * Michel Wermelinger Implemented CGT (Conceptual Graph Tools) <ref> [Wer91] </ref> as part of his B.Sc. thesis. CGT is written in Prolog and includes a DCG linear form parser and generator. <p> More recently Eklund [Ekl91] has constructed a similar style of interface for semantic nets using CLOS (Common Lisp Object System), CLUE (Common Lisp User Interface) and CLX (Common Lisp Xwindows libraries). More recent work on conceptual graphs and graphical interfaces is represented in Wermelinger <ref> [WL92, Wer91] </ref> where a Conceptual Graph Editor (CGE) for X-Windows has been constructed. CGE is coded in X-Prolog, a result of the ESPRIT project "Advanced Logic Programming Environments", 6.
Reference: [Win83] <author> T. Winograd. </author> <title> Language as a Cognitive Process. Vol 1. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: This is to be used for natural language interface in an automated consultation system based on a conceptual graph theory. For further reading also see <ref> [Dix91, Sow91, Win83] </ref>.
Reference: [WL92] <author> Michel Wermelinger and Jose Gabriel Lopes. </author> <title> An x-windows toolkit for knowledge acquisition and representation based on conceptual structures. </title> <booktitle> In [Pfe92], </booktitle> <pages> pages 233-242, </pages> <year> 1992. </year>
Reference-contexts: More recently Eklund [Ekl91] has constructed a similar style of interface for semantic nets using CLOS (Common Lisp Object System), CLUE (Common Lisp User Interface) and CLX (Common Lisp Xwindows libraries). More recent work on conceptual graphs and graphical interfaces is represented in Wermelinger <ref> [WL92, Wer91] </ref> where a Conceptual Graph Editor (CGE) for X-Windows has been constructed. CGE is coded in X-Prolog, a result of the ESPRIT project "Advanced Logic Programming Environments", 6.
Reference: [YCO92] <author> Gi-Chul Yang, Young Bae Choi, and Jonathan Oh. </author> <title> Cgma : A novel conceptual graph matching algorithm. </title> <booktitle> In [Pfe92], </booktitle> <pages> pages 69-78, </pages> <year> 1992. </year>
Reference-contexts: The version is selected when making the executable. 3.2.1 CGMA : A Novel Conceptual Graph Matching Algorithm Yang, G-C., Choi, Y.B., and Oh, J. A novel Conceptual Graph Matching Algorithm (CGMA) <ref> [YCO92] </ref> is proposed along with a knowledge base organization scheme. This method indexes each graph on its concepts and relations. Each concept and relation in a query graph is hashed to a set of graphs in the database. <p> It is written in Prolog <ref> [YCO92] </ref>. * Maurice Pagnucco (Coordinator) Honours degree thesis on graphical interfaces for Conceptual Graphs [Pag90]. <p> Currently, we are working on providing a complete language generator for any conceptual graph. We hope to see a much more complete package in the next version. We are also working on designing a new algorithm for generation. The new algorithm will use U-Form <ref> [YCO92] </ref> as its internal structure. The U-Form eliminates the necessity of explicit arc and contains the natural way of extracting subgraphs. This fact will help to find the lexical items of corresponding subgraphs easily.
Reference: [YO90] <author> Gi-Chul Yang and Jonathan Oh. </author> <title> An efficient dictionary management system for machine translation. </title> <booktitle> In Seoul International Conference on Natural Language Processing, </booktitle> <address> Seoul, </address> <year> 1990. </year>
Reference-contexts: CGMA allows the user to select the Degree of Matching and Degree of Inheritance, thus allowing close matches, rather than exact matches. A conceptual graph is represented in a special linear form (called U-Form) for CGMA. U-Form eliminates explicit arcs in the graph. The CGMA method builds on experience <ref> [YO90] </ref> in constructing an efficient dictionary management system for machine translation. 3.2.2 Canonical Databases Esch, J., and Ellis, G. When building conceptual graph databases, ill-formed graphs are often encountered. This occurs when separate well-formed pieces are joined in an attempt to construct a well-formed graph.
Reference: [Zlo91] <author> Fred Zlotnick. </author> <title> The POSIX.1 Standard, A Programmer's Guide. </title> <publisher> Benjamin Cummings, </publisher> <year> 1991. </year> <title> 13.2 For further information Please consult the detailed conceptual graphs bibliography in [NNGE92]. </title>
Reference-contexts: It is based on UNIX, so most UNIX developers will be able to conform to it without much additional effort. Since POSIX supports the C programming language, it is the most reasonable operating system standard. Further details can be found in <ref> [Zlo91] </ref>. The standard itself [ISO90] is available from the publisher. 2.5.5 Graphic Interface The graphic interface will be X11R5. It is a window-based interface, supported by most UNIX systems. The X code is available free via FTP from export.lcs.mit.edu. Several tool sets are based on X11R5.
References-found: 76

