URL: http://www.iro.umontreal.ca/labs/lasso/pdb/data/ps_files/1996/000008.ps.gz
Refering-URL: http://www.iro.umontreal.ca/people/zhouz/research/project_papers.html
Root-URL: http://www.iro.umontreal.ca
Email: fanon,bouleric,cerny,song,tahar,zhouzg@iro.umontreal.ca  fcorella@hprpcd.rose.hp.com  langevin@gmd.de  
Title: MDG Tools for the Verification of RTL Designs  
Author: K.D. Anon N. Boulerice E. Cerny F. Corella M. Langevin X. Song S. Tahar Y. Xu Z. Zhou 
Note: Hewlett-Packard Company, USA,  
Address: Montreal, Canada,  GMD-SET, Germany,  
Affiliation: D'IRO, Universite de  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Randal E. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 35(8) </volume> <pages> 677-691, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: 1 Introduction Although ROBDDs <ref> [1, 2] </ref> have proved to be a powerful tool for automated hardware verification, they require a Boolean representation of the circuit. Since the size of an ROBDD grows, sometimes exponentially, with the number of Boolean variables, ROBDD-based verification cannot be directly applied to circuits with complex datapaths.
Reference: [2] <author> J. R. Burch, E. M. Clarke, D. E. Long, K. L. McMillan, and D. L. Dill. </author> <title> Symbolic model checking for sequential circuit verification. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 13(4) </volume> <pages> 401-424, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Although ROBDDs <ref> [1, 2] </ref> have proved to be a powerful tool for automated hardware verification, they require a Boolean representation of the circuit. Since the size of an ROBDD grows, sometimes exponentially, with the number of Boolean variables, ROBDD-based verification cannot be directly applied to circuits with complex datapaths. <p> If needed, rewrite rules may be used to partially interpret the otherwise uninterpreted function symbols. Reachability Analysis. The reachability analysis for an ASM is based on a technique called abstract implicit enumeration [3] which is analogous to the implicit enumeration <ref> [2] </ref> used for FSMs. It verifies whether an invariant holds in all reachable states of the ASM. The image computation is based on the RelP operator. It uses transition relation partitioning and early quantification heuristics.
Reference: [3] <author> F. Corella, Z. Zhou, X. Song, M. Langevin, and E. Cerny. </author> <title> Multiway decision graphs for automated hardware verification. </title> <note> To appear in the journal Formal Methods in System Design. Available as IBM technical report RC19676. </note>
Reference-contexts: Since the size of an ROBDD grows, sometimes exponentially, with the number of Boolean variables, ROBDD-based verification cannot be directly applied to circuits with complex datapaths. We have recently proposed a new class of decision graphs, called Multiway Decision Graphs (MDGs) <ref> [3] </ref>, that comprises, but is much broader than, the class of ROBDDs. The underlying logic of MDGs is a subset of many-sorted first-order logic with a distinction between concrete and abstract sorts. A concrete sort has an enumeration while an abstract sort does not. <p> Here we briefly review the MDG operators and the utilities. For more details see <ref> [3, 6] </ref>. * Disjunction (Disj): performs disjunction for a set of MDGs. * Relational product (RelP): performs conjunction, abstraction by existential quantification and renaming operations in one traversal of graphs for a set of MDGs. <p> The major utilities provided with the package are term assembly and graph assembly, which construct terms and graphs using reduction tables, also implemented as hash tables. 4 Applications to Hardware Verification Abstract State Machines. The MDG tools are intended for Abstract State Machines (ASM) verification <ref> [4, 3] </ref> rather than Finite State Machine (FSM) verification. They can be used for FSMs as well, but they are less efficient than ROBDDs for this purpose, due in part to the space requirements of our current Prolog implementation. <p> If needed, rewrite rules may be used to partially interpret the otherwise uninterpreted function symbols. Reachability Analysis. The reachability analysis for an ASM is based on a technique called abstract implicit enumeration <ref> [3] </ref> which is analogous to the implicit enumeration [2] used for FSMs. It verifies whether an invariant holds in all reachable states of the ASM. The image computation is based on the RelP operator. It uses transition relation partitioning and early quantification heuristics. <p> This restriction, however, does not rule out using rewrite rules to exploit partial meaning of the uninterpreted function symbols. The reachability analysis procedure may not terminate in general. However, for a class of interesting problems, the non-termination problem can be avoided by state generalization <ref> [3] </ref> and/or by using the term rewriting facility. 5 Conclusions and Future Work We presented MDG tools which can reason at the abstract level and are thus suitable for RTL design verification.
Reference: [4] <author> F. Corella, M. Langevin, E. Cerny, Z. Zhou and X. Song. </author> <title> State enumeration with abstract descriptions of state machines. </title> <booktitle> In Proc. of IFIP WG 10.5 Advanced Research Working Conference on Correct Hardware Design and Verification Methods (Charme'95). </booktitle> <month> October, </month> <year> 1995, </year> <institution> Frankfurt, Germany. </institution>
Reference-contexts: In the middle layer, there are two modules: (i) the printing module provides various pretty-printing procedures; (ii) the reachability analysis module implements the reachability analysis algorithm for abstract state machines (ASMs) <ref> [4] </ref>. It also contains a counterexample facility which generates explanations when the invariant being verified is violated. Currently, there are two modules in the application layer. The combinational verification module provides the equivalence checking of combinational circuits. <p> The major utilities provided with the package are term assembly and graph assembly, which construct terms and graphs using reduction tables, also implemented as hash tables. 4 Applications to Hardware Verification Abstract State Machines. The MDG tools are intended for Abstract State Machines (ASM) verification <ref> [4, 3] </ref> rather than Finite State Machine (FSM) verification. They can be used for FSMs as well, but they are less efficient than ROBDDs for this purpose, due in part to the space requirements of our current Prolog implementation. <p> They can be used for FSMs as well, but they are less efficient than ROBDDs for this purpose, due in part to the space requirements of our current Prolog implementation. An abstract description of a state machine, called abstract state machine (ASM) <ref> [4] </ref>, is obtained by letting some data input, state or output variables 3 be of an abstract sort, and the datapath operations be uninterpreted function symbols. Just as ROBDDs for encoding FSMs, MDGs are used to compactly represent sets of (abstract) states and transition/output relations for ASMs.
Reference: [5] <author> S. Tahar, Z. Zhou, X. Song, E. Cerny and M. Langevin. </author> <title> Formal Verification of an ATM Switch Fabric using Multiway Decision Graphs. </title> <booktitle> In IEEE Proc. of Sixth Great Lakes Symposium on VLSI. </booktitle> <address> Iowa, USA, </address> <month> March, </month> <year> 1996. </year>
Reference-contexts: This additional feature would allow us to perform the verification for temporal properties. 5 The MDG home page [6] contains a complete list of MDG references, in-cluding algorithms, case studies and the most recent work on the verification of an ATM switch fabric <ref> [5] </ref>.
Reference: [6] <institution> The home page of the multi-site MDG verification group: </institution> <note> http://www.iro.umontreal.ca/labs/lasso/research/mdgverif/mdgverif eng.html. 6 </note>
Reference-contexts: Here we briefly review the MDG operators and the utilities. For more details see <ref> [3, 6] </ref>. * Disjunction (Disj): performs disjunction for a set of MDGs. * Relational product (RelP): performs conjunction, abstraction by existential quantification and renaming operations in one traversal of graphs for a set of MDGs. <p> We are currently in the course of developing a model checking algorithm for a restricted first-order temporal logic. This additional feature would allow us to perform the verification for temporal properties. 5 The MDG home page <ref> [6] </ref> contains a complete list of MDG references, in-cluding algorithms, case studies and the most recent work on the verification of an ATM switch fabric [5].
References-found: 6

