URL: http://www.ai.sri.com/~prs/act-ed.ps
Refering-URL: http://www.ai.sri.com/~prs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: The Act-Editor User's Guide A Manual for Version 2.2  
Author: Karen L. Myers David E. Wilkins 
Address: 333 Ravenswood Ave. Menlo Park, California 94025  
Affiliation: Artificial Intelligence Center SRI International  
Date: September 29, 1997  
Note: Working Document: Revisions as of  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. F. Allen. </author> <title> Maintaining knowledge about temporal intervals. </title> <journal> Communications of the Association for Computing Machinery, </journal> <volume> 26(11):832843, </volume> <year> 1983. </year>
Reference-contexts: The user is free to supply additional properties, as desired. The most interesting property from a representational standpoint is Time-Constraints, which allows specification of any of the 13 Allen relations <ref> [1] </ref>. This property is used to specify time constraints between plot nodes that cannot be represented by ordering arcs, e.g., two actions must end at the same time. The Act-Editor can also represent these constraints as labeled arcs of different color between plot nodes.
Reference: [2] <author> P. Karp, J. Lowrance, T. Strat, and D. Wilkins. </author> <title> The Grasper-CL graph management system. LISP and Symbolic Computation, </title> <address> 7:245282, </address> <year> 1994. </year>
Reference-contexts: Grasper-CL <ref> [2, 3] </ref> is a COMMON LISP system developed at SRI for displaying and manipulating graphs. Grasper-CL supports interactive graph editing and provides a foundation for constructing graphical user interfaces (GUIs) for application programs whose inputs or results can be presented as a graph. <p> Similarly, most commands in the Act-Editorare invoked on the current space and/or graph. Grasper-CL always displays the current space, barring errors and anomalous situations. Further documentation is available for users who are interested in learning more about Grasper-CL. The Grasper-CL User's Guide (in <ref> [2] </ref>) provides a thorough overview of the foundations and use of Grasper-CL. The Grasper-CL Programmer's Manual (also in [2]) provides descriptions of the COM MON LISP application programmer's interface. 4 Chapter 3 Acts and their Representation The Act formalism is briefly summarized here. <p> Grasper-CL always displays the current space, barring errors and anomalous situations. Further documentation is available for users who are interested in learning more about Grasper-CL. The Grasper-CL User's Guide (in <ref> [2] </ref>) provides a thorough overview of the foundations and use of Grasper-CL. The Grasper-CL Programmer's Manual (also in [2]) provides descriptions of the COM MON LISP application programmer's interface. 4 Chapter 3 Acts and their Representation The Act formalism is briefly summarized here.
Reference: [3] <author> P. D. Karp, J. D. Lowrance, and T. M. Strat. </author> <title> The Grasper-CL Documentation Set, Version 1.1. </title> <booktitle> SRI International Artificial Intelligence Center, </booktitle> <address> Menlo Park, CA, </address> <year> 1992. </year>
Reference-contexts: Grasper-CL <ref> [2, 3] </ref> is a COMMON LISP system developed at SRI for displaying and manipulating graphs. Grasper-CL supports interactive graph editing and provides a foundation for constructing graphical user interfaces (GUIs) for application programs whose inputs or results can be presented as a graph. <p> plot node Move plot node middle node Print node name middle background Warp to birds-eye window right background Warp to command menu Table 4.1: Mouse-activated Commands at the Act-Editor Top Level commands; a full overview of the mouse-activated capabilities can be found in Table 4.1 of the Grasper-CL Documentation Set <ref> [3] </ref>. Clicking on the scroll bars will scroll the graph pane in various standard ways.
Reference: [4] <author> K. L. Myers and D. E. Wilkins. </author> <title> The Act Formalism. </title> <booktitle> Artificial Intelligence Center, SRI International, </booktitle> <address> Menlo Park, CA, </address> <note> version 2.1 edition, </note> <month> May </month> <year> 1997. </year>
Reference-contexts: It includes procedures for graph construction, modification, and queries as well as a menu-driven, interactive display package that allows graphs to be constructed, modified, and viewed through direct pictorial manipulation. Acts can be stored either as graphs in Grasper-CL, or as text files using the ASCII representation <ref> [4] </ref>. In the Act-Editor, a graph is nothing more than a file that is comprised on any number of Acts, where the Acts are represented in Grasper-CL's language, which includes information about how to draw them on the screen. <p> The next few chapters describe the commands, customizations, and dictionaries. The final chapter offers guidance on trouble-shooting problems that might arise during use of the Act-Editor. Finally, an appendix explains how to create Acts programmatically. The Act formalism, including a grammar, is described in another document <ref> [4] </ref>. Throughout this document, someone attempting to model a new domain in Act will be referred to as a programmer. Programmers should be familiar with the representational ideas underlying Act [7]. <p> Table 3.1 lists the metapredicates and hints at the syntax of each, with wff standing for a formula composed of first-order predicates and connectives. The syntax is described fully elsewhere <ref> [4] </ref>. If the structure-based editor is used (see Section 7.5), the user does not need to know the detailed syntax since the Act-Editor prompts for lower-level formulas or names and combines them into the correct syntax. The Test metapredicate specifies a formula whose truth value must be ascertained. <p> After selection of the directory, the system presents a menu of all files in the specified directory that end in .graph. The user can click on the graph to be input. Text Input Graph This command reads a disk file containing the ASCII representation <ref> [4] </ref> of a sequence of Acts. Each Act in the file is created as an Act in the current graph. <p> Revert Graph Revert Graph replaces the current graph with the backup copy of the current graph as created by the Backup Graph command. All changes in the memory-resident version of the current graph are lost. Print Graph The Print Graph command writes a file containing the ASCII representation <ref> [4] </ref> for each Act in the current graph. The new file has the same file name as the current graph except the type field of the filename is changed to .text (normally a graph file has a type of .graph). This representation is readable by other programs that support Act. <p> This representation is readable by other programs that support Act. The Acts are written with the task, plan, and action networks syntax used by Act to describe plans at multiple levels of abstraction <ref> [4] </ref>. If no plan and task properities are given in the properties of the Acts, then the tokens unknonw-plan and unknown-task will be used for grouping. <p> The current version of the Act is destroyed. Print Act The Print Act command writes a file containing the ASCII representation <ref> [4] </ref> of the current Act. The name of the file is Act-name.text, and it is in the same directory as the current graph. The Act is written without any surrounding task or plan syntax that describe plans at multiple levels of abstraction [4]; however any plan and task properities will be <p> command writes a file containing the ASCII representation <ref> [4] </ref> of the current Act. The name of the file is Act-name.text, and it is in the same directory as the current graph. The Act is written without any surrounding task or plan syntax that describe plans at multiple levels of abstraction [4]; however any plan and task properities will be written as part of the properites slot. 46 Print-Draw Act This command provides similarly functionality to Print-Draw Graph, but prints or draws only the current Act.
Reference: [5] <author> G. L. Steele. </author> <title> Common LISP the Language. </title> <note> Digital Press, second edition, </note> <year> 1990. </year>
Reference-contexts: The directory name can be either a physical pathname for the local machine (e.g., a UNIX pathname), or a logical pathname that has been defined in COMMON LISP using the function lp:logical-pathname-translations (see <ref> [5, p632] </ref> and the supplied source file logical-pathnames.lisp). After selection of the directory, the system presents a menu of all files in the specified directory that end in .graph. The user can click on the graph to be input. <p> This file name can be either a physical pathname (such as a UNIX pathname) or a logical pathname (see <ref> [5, p628] </ref>). The saved graph can later be read into the Act-Editor using the Input Graph command. Merge Graph This command merges the current graph with another loaded graph that the user selects from a pop-up menu. All Acts in the selected graph are copied into the current graph.
Reference: [6] <author> D. E. Wilkins. </author> <title> Using the SIPE-2 Planning System: A Manual for Version 4.14. </title> <booktitle> SRI International Artificial Intelligence Center, </booktitle> <address> Menlo Park, CA, </address> <month> February </month> <year> 1997. </year>
Reference-contexts: Because of the functionality of the GKB-Editor, this is the preferred method for creating an Object-Types space. SIPE2 has completely automated the process of creating a dictionary for a domain it has loaded (that is assumed correct). This is invoked with SIPE2's -&gt; ACT all command <ref> [6] </ref>, which does the following: * Create a graph with the Act translations of all operators in it * Create another graph and link it as the dictionary of the first graph * Copy the sort hierarchy into the dictionary graph * Run the Verifier on all Acts to automatically build
Reference: [7] <author> D. E. Wilkins and K. L. Myers. </author> <title> A common knowledge representation for plan generation and reactive execution. </title> <journal> Journal of Logic and Computation, </journal> <volume> 5(6):731761, </volume> <month> December </month> <year> 1995. </year> <month> 58 </month>
Reference-contexts: Such integration is difficult, given that generation and execution involve different kinds of knowledge and reasoning capabilities. SRI International has developed the Act formalism <ref> [7] </ref> for representing the knowledge required to support both the generation of complex plans and reactive execution of those plans in dynamic environments. Act is intended to serve as a general-purpose representation language that can be used to share knowledge between many different execution and planning systems. <p> The Act-Editor is a graphical user interface for creating, displaying, and manipulating Acts. This document describes the system and how it can be used to create Acts for either PRS-CL or SIPE2 ap 1 plications, or both. The document presumes some familiarity with the Act formalism, described in <ref> [7] </ref>. The Act-Editor system runs on Sun 1 workstations as well as Symbolics Lisp Machines. This manual focuses on the use of the Act-Editor on Sun workstations. <p> The Act formalism, including a grammar, is described in another document [4]. Throughout this document, someone attempting to model a new domain in Act will be referred to as a programmer. Programmers should be familiar with the representational ideas underlying Act <ref> [7] </ref>. Certain sections of this document labeled as advanced concepts can be skipped by a user; they are intended for the programmer and assume in-depth knowledge. Additional information and publications for the Act language and Act-related systems can be found at the URL http://www.ai.sri.com/act. <p> The slots Cue, Precondition, Setting, and Resources are referred to as the gating slots for an Act because they specify conditions that must be satisfied for the Act to be applicable in a given situation. The gating slots are filled with one or more goal expressions <ref> [7] </ref>. The Properties slot is a list of property/value pairs for the Act.
References-found: 7

