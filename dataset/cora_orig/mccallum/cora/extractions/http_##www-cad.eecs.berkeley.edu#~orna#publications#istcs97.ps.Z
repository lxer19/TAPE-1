URL: http://www-cad.eecs.berkeley.edu/~orna/publications/istcs97.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/~orna/pub.html
Root-URL: 
Email: Email: orna@eecs.berkeley.edu  Email: vardi@cs.rice.edu  
Title: Weak Alternating Automata Are Not That Weak  
Author: Orna Kupferman Moshe Y. Vardi 
Note: Part of this work was done in Bell Laboratories during the DIMACS Special Year on Logic and Algorithms. Supported in part by the ONR YIP award N00014-95-1-0520, by the NSF CAREER award CCR-9501708, by the NSF grant CCR-9504469, by the AFOSR contract F49620-93-1-0056, by the ARO MURI grant DAAH-04-96-1-0341, by the ARPA grant NAG2-892, and by the SRC contract 95-DC-324.036. Supported in part by the NSF grant CCR-9628400.  
Web: URL: http://www.cs.rice.edu/ vardi  
Address: Berkeley CA 94720-1770, U.S.A.  Houston TX 77005-1892, U.S.A.  
Affiliation: EECS Department UC Berkeley  Department of Computer Science Rice University  
Abstract: Automata on infinite words are used for specification and verification of nonterminat-ing programs. Different types of automata induce different levels of expressive power, of succinctness, and of complexity. Alternating automata have both existential and universal branching modes and are particularly suitable for specification of programs. In a weak alternating automaton, the state space is partitioned into partially ordered sets, and the automaton can proceed from a certain set only to smaller sets. Reasoning about weak alternating automata is easier than reasoning about alternating automata with no restricted structure. Known translations of alternating automata to weak alternating automata involve determinization, and therefore involve a double-exponential blow-up. In this paper we describe a quadratic translation, which circumvents the need for determinization, of Buchi and co-Buchi alternating automata to weak alternating automata. Beyond the independent interest of such a translation, it gives rise to a simple complementation algorithm for nondeterministic Buchi automata. 
Abstract-found: 1
Intro-found: 1
Reference: [BL80] <author> J.A. Brzozowski and E. Leiss. </author> <title> Finite automata and sequential networks. </title> <journal> Theoretical Computer Science, </journal> <volume> 10 </volume> <pages> 19-35, </pages> <year> 1980. </year>
Reference-contexts: When A is a universal automaton, it accepts an input word w iff all the runs of A on w are accepting. Alternation was studied in [CKS81] in the context of Turing machines and in <ref> [BL80, CKS81, MH84] </ref> for finite automata. In particular, [MH84] studied alternating automata on infinite words. Alternation enables us to have both existential and universal branching choices.
Reference: [Buc62] <author> J.R. Buchi. </author> <title> On a decision method in restricted second order arithmetic. </title> <booktitle> In Proc. International Congress on Logic, Method and Philos. Sci. </booktitle> <year> 1960, </year> <pages> pages 1-12, </pages> <year> 1962. </year>
Reference-contexts: 1 Introduction Finite automata on infinite objects were first introduced in the 60's. Motivated by decision problems in mathematics and logic, Buchi, Mc-Naughton, and Rabin developed a framework for reasoning about infinite words and infinite trees <ref> [Buc62, McN66, Rab69] </ref>. The framework has proved to be very powerful. Automata, and their tight relation to second-order monadic logics were the key to the solution of several fundamental decision problems in mathematics and logics [Tho90]. Today, automata on infinite objects are used for specification and verification of nonterminating programs. <p> There are many ways to classify an automaton on infinite words. One is the type of its acceptance condition. For example, in Buchi automata, some of the states are designated as accepting states, and a run is accepting iff it visits states from the accepting set infinitely often <ref> [Buc62] </ref>. Dually, in co-Buchi automata, a run is accepting iff it visits states from the accepting set only finitely often. More general are Muller automata. <p> The closure of nondeterministic Buchi automata under complementation plays a crucial role in solving decision problems of second order logics. As a result, many efforts have been put in proving this closure and developing simple complementation algorithms. In <ref> [Buc62] </ref>, Buchi suggested a complementation construction, which indeed solved the problem, yet involved a complicated combinatorial argument and a doubly-exponential blow-up in the state space. Thus, complementing an automaton with n states resulted in an automaton with 2 2 O (n) states.
Reference: [BVW94] <author> O. Bernholtz, M.Y. Vardi, and P. Wolper. </author> <title> An automata-theoretic approach to branching-time model checking. </title> <booktitle> In Proc. 6th CAV, </booktitle> <volume> LNCS 818, </volume> <pages> pages 142-155, </pages> <year> 1994. </year>
Reference-contexts: For example, while the best known complexity for solving the membership problem for Buchi alternating automata is quadratic time, we know how to solve the membership problem for weak alternating automata in linear time <ref> [BVW94] </ref>. Weak alternating automata are a special case of Buchi alternating automata. Indeed, the condition of getting trapped in an accepting set can be replaced by a condition of visiting states of accepting sets infinitely often. The other direction, as it is easy to see, is not true.
Reference: [CDK93] <author> E. M. Clarke, I. A. Draghicescu, and R. P. Kurshan. </author> <title> A unified approach for showing language containment and equivalence between various types of !-automata. </title> <journal> Information Processing Letters 46, </journal> <pages> pages 301-308, </pages> <year> (1993). </year>
Reference-contexts: Due to the lack of a simple complementation construction, verification tools have to restrict the specification automaton or improvise other solutions. For example, in the verification tool COSPAN [Kur94], the specification automaton must be deterministic (it is easy to complement deterministic automata <ref> [CDK93] </ref>). In the verification tool SPIN [Hol91], the user has to complement the automaton by himself; thus, together with the program, SPIN gets as input a nondeterministic Buchi automaton, called the Never-Claim, which accepts exactly all computations that do not satisfy the specification.
Reference: [CKS81] <author> A.K. Chandra, D.C. Kozen, and L.J. Stockmeyer. </author> <title> Alternation. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 28(1) </volume> <pages> 114-133, </pages> <month> January </month> <year> 1981. </year>
Reference-contexts: In the existential mode, the automaton should accept the suffix of the word from one of the states in the set, and in the universal mode, it should accept the suffix from all the states in the set. In an alternating automaton <ref> [CKS81] </ref>, both existential and universal modes are allowed, and the transitions are given as Boolean formulas over the set of states. <p> When A is a universal automaton, it accepts an input word w iff all the runs of A on w are accepting. Alternation was studied in <ref> [CKS81] </ref> in the context of Turing machines and in [BL80, CKS81, MH84] for finite automata. In particular, [MH84] studied alternating automata on infinite words. Alternation enables us to have both existential and universal branching choices. <p> When A is a universal automaton, it accepts an input word w iff all the runs of A on w are accepting. Alternation was studied in [CKS81] in the context of Turing machines and in <ref> [BL80, CKS81, MH84] </ref> for finite automata. In particular, [MH84] studied alternating automata on infinite words. Alternation enables us to have both existential and universal branching choices.
Reference: [DH94] <author> D. Drusinsky and D. Harel. </author> <title> On the power of bounded concurrency I: Finite automata. </title> <journal> Journal of the ACM, </journal> <volume> 41(3) </volume> <pages> 517-539, </pages> <year> 1994. </year>
Reference-contexts: For example, though alternating Buchi automata are as expressive as nondeterministic Buchi automata (both recognize exactly all !-regular languages), alternation makes Buchi automata exponentially more succinct. That is, translating an alternating Buchi automaton to a nondeterministic one might involve an exponential blow-up <ref> [DH94] </ref>. Since the combinatorial structure of alternating automata is rich, translating specifications to alternating automata is much simpler than translating them to nondeterministic automata.
Reference: [EJ91] <author> E.A. Emerson and C. Jutla. </author> <title> Tree automata, mu-calculus and determinacy. </title> <booktitle> In Proc. 32nd FOCS, </booktitle> <pages> pages 368-377, </pages> <year> 1991. </year>
Reference-contexts: In a memoryless run, subtrees of hT r ; ri with similar roots coincide. Thus, same missions are fulfilled in the same way. It turns out that when we consider runs of co-Buchi automata, we can restrict ourselves to memoryless runs. Formally, we have the following theorem. Theorem 3.1 <ref> [EJ91] </ref> If a co-Buchi automaton A accepts a word w, then there exists a memory-less accepting run of A on w. Let jQj = n.
Reference: [Hol91] <author> G. Holzmann. </author> <title> Design and Validation of Computer Protocols. </title> <publisher> Prentice-Hall International Editions, </publisher> <year> 1991. </year>
Reference-contexts: Due to the lack of a simple complementation construction, verification tools have to restrict the specification automaton or improvise other solutions. For example, in the verification tool COSPAN [Kur94], the specification automaton must be deterministic (it is easy to complement deterministic automata [CDK93]). In the verification tool SPIN <ref> [Hol91] </ref>, the user has to complement the automaton by himself; thus, together with the program, SPIN gets as input a nondeterministic Buchi automaton, called the Never-Claim, which accepts exactly all computations that do not satisfy the specification.
Reference: [Kla90] <author> N. Klarlund. </author> <title> Progress Measures and finite arguments for infinite computations. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <year> 1990. </year>
Reference-contexts: In the next section we employ this structured run in order to translate Buchi and co-Buchi alternating automata to weak alternating automata. Progress measures were introduced in <ref> [Kla90] </ref> as a generic concept for quantifying how each step of a program contributes to bringing a computation closer to its specification. Progress measures are used in [Kla91] for reasoning about automata on infinite words.
Reference: [Kla91] <author> N. Klarlund. </author> <title> Progress measures for complementation of !-automata with applications to temporal logic. </title> <booktitle> In Proc. 32nd FOCS, </booktitle> <pages> pages 358-367, </pages> <year> 1991. </year>
Reference-contexts: Only in [Saf88], Safra introduced an optimal determinization construction, which also enabled a 2 O (n log n) complementation construc tion, matching the known lower bound [Mic88]. Another 2 O (n log n) construction was suggested by Klarlund in <ref> [Kla91] </ref>, which circumvented the need for determinization. While being the heart of many complexity results in verification, the optimal constructions in [Saf88, Kla91] are complicated. In particular, the intricacy of the algorithms makes their implementation difficult. <p> Another 2 O (n log n) construction was suggested by Klarlund in [Kla91], which circumvented the need for determinization. While being the heart of many complexity results in verification, the optimal constructions in <ref> [Saf88, Kla91] </ref> are complicated. In particular, the intricacy of the algorithms makes their implementation difficult. We know of no implementation of Klarlund's algorithm, and the implementation of Safra's algorithm [THB95] has to cope with the involved structure of the states in the complementary automaton. <p> The complementing automaton constructed in our procedure here is similar to the one constructed in <ref> [Kla91] </ref>, but as our construction involves alternation, it is simpler and easily implementable. Consider a nondeterministic Buchi automaton B. We can easily complement B by regarding it as a universal co-Buchi automaton. Now, using our construction, we translate this complementary automaton to a weak alternating automaton W. <p> Applying their (exponential yet simple) translation to W, we end up with a nondeterministic Buchi automaton N that complements B. For B with n states, the size of N is 2 O (n log n) , meeting the known lower bound [Mic88] and the complicated constructions suggested in <ref> [Saf88, Kla91] </ref>. 2 Alternating Automata Given an alphabet , an infinite word over is an infinite sequence w = 0 1 2 of letters in . We denote by w l the suffix l l+1 l+2 of w. <p> Progress measures were introduced in [Kla90] as a generic concept for quantifying how each step of a program contributes to bringing a computation closer to its specification. Progress measures are used in <ref> [Kla91] </ref> for reasoning about automata on infinite words. The ranks defined above also measure progress: they indicate how far the automaton is from satisfying its co-Buchi acceptance condition. When we use these ranks, we consider, unlike [Kla91], alternating automata. Consequently, much of the complication in [Kla91] is handled by the rich <p> Progress measures are used in <ref> [Kla91] </ref> for reasoning about automata on infinite words. The ranks defined above also measure progress: they indicate how far the automaton is from satisfying its co-Buchi acceptance condition. When we use these ranks, we consider, unlike [Kla91], alternating automata. Consequently, much of the complication in [Kla91] is handled by the rich structure of the automata. 4 From Buchi and Co-Buchi to Weak Alternating Automata Theorem 4.1 Let A be an alternating co-Buchi automaton. <p> Progress measures are used in <ref> [Kla91] </ref> for reasoning about automata on infinite words. The ranks defined above also measure progress: they indicate how far the automaton is from satisfying its co-Buchi acceptance condition. When we use these ranks, we consider, unlike [Kla91], alternating automata. Consequently, much of the complication in [Kla91] is handled by the rich structure of the automata. 4 From Buchi and Co-Buchi to Weak Alternating Automata Theorem 4.1 Let A be an alternating co-Buchi automaton.
Reference: [Kur94] <author> R.P. Kurshan. </author> <title> Computer Aided Verification of Coordinating Processes. </title> <publisher> Princeton Univ. Press, </publisher> <year> 1994. </year>
Reference-contexts: In the automata-theoretic approach to verification, we reduce questions about programs and their specifications to questions about automata. More specifically, questions such as satisfiability of specifications and correctness of programs with respect to their specifications are reduced to questions such as nonemptiness and language containment <ref> [VW86, Kur94, VW94] </ref>. The automata-theoretic approach separates the logical and the combinatorial aspects of reasoning about programs. The translation of specifications to automata handles the logic and shifts all the combinatorial difficulties to automata-theoretic problems. <p> Due to the lack of a simple complementation construction, verification tools have to restrict the specification automaton or improvise other solutions. For example, in the verification tool COSPAN <ref> [Kur94] </ref>, the specification automaton must be deterministic (it is easy to complement deterministic automata [CDK93]).
Reference: [Lan69] <author> L.H. </author> <title> Landweber. Decision problems for !- automata. </title> <journal> Mathematical Systems Theory, </journal> <volume> 3 </volume> <pages> 376-384, </pages> <year> 1969. </year>
Reference-contexts: It turns out that different types of automata have different expressive power. For example, unlike automata on finite words, where deterministic and nondeterministic (existential) automata have the same expressive power, deterministic Buchi automata are strictly less expressive than nondeterministic Buchi automata <ref> [Lan69] </ref>. That is, there exists a language L over infinite words such that L can be recognized by a nondeterministic Buchi automaton but cannot be recognized by a deterministic Buchi automaton. It also turned out that some types of automata may be more succinct than other types.
Reference: [Lin88] <author> P. Lindsay. </author> <title> On alternating !-automata. </title> <journal> Theoretical computer science, </journal> <volume> 43 </volume> <pages> 107-116, </pages> <year> 1988. </year>
Reference-contexts: The ability of alternating automata to switch between existential and universal branching modes also makes their complementation very easy. For example, in order to complement an alternating Muller automaton on infinite words, one only has to dualize its transition function and acceptance condition <ref> [MH84, Lin88] </ref>. In contrast, complementation is a very challenging problem for nondeterministic automata on infinite words. In particular, complementing a nondeterministic Buchi automaton involves an exponential blowup [Saf88, Mic88]. In [MSS86], Muller et al. introduced weak alternating automata. <p> Nevertheless, when defined on words, weak alternating automata are not less expressive than Buchi alternating automata, and they can recognize all the !-regular languages. To prove this, <ref> [MSS86, Lin88] </ref> suggest a linear translation of deterministic Muller automata to weak alternating automata. Using, however, the constructions in [MSS86, Lin88] in order translate a nondeterministic Buchi or co-Buchi automaton A into a weak alternating automaton, one has no choice but to first translate A into a deterministic Muller automaton. <p> Nevertheless, when defined on words, weak alternating automata are not less expressive than Buchi alternating automata, and they can recognize all the !-regular languages. To prove this, <ref> [MSS86, Lin88] </ref> suggest a linear translation of deterministic Muller automata to weak alternating automata. Using, however, the constructions in [MSS86, Lin88] in order translate a nondeterministic Buchi or co-Buchi automaton A into a weak alternating automaton, one has no choice but to first translate A into a deterministic Muller automaton. Such a determinization involves an exponential blow-up [Saf88].
Reference: [McN66] <author> R. McNaughton. </author> <title> Testing and generating infinite sequences by a finite automaton. </title> <journal> Information and Control, </journal> <volume> 9 </volume> <pages> 521-530, </pages> <year> 1966. </year>
Reference-contexts: 1 Introduction Finite automata on infinite objects were first introduced in the 60's. Motivated by decision problems in mathematics and logic, Buchi, Mc-Naughton, and Rabin developed a framework for reasoning about infinite words and infinite trees <ref> [Buc62, McN66, Rab69] </ref>. The framework has proved to be very powerful. Automata, and their tight relation to second-order monadic logics were the key to the solution of several fundamental decision problems in mathematics and logics [Tho90]. Today, automata on infinite objects are used for specification and verification of nonterminating programs.
Reference: [MH84] <author> S. Miyano and T. Hayashi. </author> <title> Alternating finite automata on !-words. </title> <journal> Theoretical Computer Science, </journal> <volume> 32 </volume> <pages> 321-330, </pages> <year> 1984. </year>
Reference-contexts: The ability of alternating automata to switch between existential and universal branching modes also makes their complementation very easy. For example, in order to complement an alternating Muller automaton on infinite words, one only has to dualize its transition function and acceptance condition <ref> [MH84, Lin88] </ref>. In contrast, complementation is a very challenging problem for nondeterministic automata on infinite words. In particular, complementing a nondeterministic Buchi automaton involves an exponential blowup [Saf88, Mic88]. In [MSS86], Muller et al. introduced weak alternating automata. <p> Consider a nondeterministic Buchi automaton B. We can easily complement B by regarding it as a universal co-Buchi automaton. Now, using our construction, we translate this complementary automaton to a weak alternating automaton W. By <ref> [MH84] </ref>, weak alternating automata can be translated to nondeterministic Buchi automata. Applying their (exponential yet simple) translation to W, we end up with a nondeterministic Buchi automaton N that complements B. <p> When A is a universal automaton, it accepts an input word w iff all the runs of A on w are accepting. Alternation was studied in [CKS81] in the context of Turing machines and in <ref> [BL80, CKS81, MH84] </ref> for finite automata. In particular, [MH84] studied alternating automata on infinite words. Alternation enables us to have both existential and universal branching choices. <p> When A is a universal automaton, it accepts an input word w iff all the runs of A on w are accepting. Alternation was studied in [CKS81] in the context of Turing machines and in [BL80, CKS81, MH84] for finite automata. In particular, <ref> [MH84] </ref> studied alternating automata on infinite words. Alternation enables us to have both existential and universal branching choices. <p> Following Theorem 4.2, all one needs in order to complement a nondeterministic Buchi automaton is some translation of universal co-Buchi automata to nondeterministic Buchi automata. In <ref> [MH84] </ref>, Miyano and Hayashi suggest a translation of alternating Buchi automata to nondeterministic Buchi automata. We present (a simplified version of) their translation in Theorem 5.1 below. Theorem 5.1 [MH84] Let A be an alternating Buchi automaton. <p> In <ref> [MH84] </ref>, Miyano and Hayashi suggest a translation of alternating Buchi automata to nondeterministic Buchi automata. We present (a simplified version of) their translation in Theorem 5.1 below. Theorem 5.1 [MH84] Let A be an alternating Buchi automaton. There is a nondeterministic Buchi automaton A 0 , with exponentially many states, such that L (A 0 ) = L (A). Proof: The automaton A 0 guesses a run of A.
Reference: [Mic88] <author> M. Michel. </author> <title> Complementation is more difficult with automata on infinite words. </title> <address> CNET, Paris, </address> <year> 1988. </year>
Reference-contexts: In contrast, complementation is a very challenging problem for nondeterministic automata on infinite words. In particular, complementing a nondeterministic Buchi automaton involves an exponential blowup <ref> [Saf88, Mic88] </ref>. In [MSS86], Muller et al. introduced weak alternating automata. In a weak alternating automaton, the automaton's set of states is partitioned into partially ordered sets. Each set is classified as accepting or rejecting. <p> In [SVW87], Sistla et al. suggested an improved construction, with only 2 O (n 2 ) states, which is still, however, not optimal. Only in [Saf88], Safra introduced an optimal determinization construction, which also enabled a 2 O (n log n) complementation construc tion, matching the known lower bound <ref> [Mic88] </ref>. Another 2 O (n log n) construction was suggested by Klarlund in [Kla91], which circumvented the need for determinization. While being the heart of many complexity results in verification, the optimal constructions in [Saf88, Kla91] are complicated. In particular, the intricacy of the algorithms makes their implementation difficult. <p> Applying their (exponential yet simple) translation to W, we end up with a nondeterministic Buchi automaton N that complements B. For B with n states, the size of N is 2 O (n log n) , meeting the known lower bound <ref> [Mic88] </ref> and the complicated constructions suggested in [Saf88, Kla91]. 2 Alternating Automata Given an alphabet , an infinite word over is an infinite sequence w = 0 1 2 of letters in . We denote by w l the suffix l l+1 l+2 of w. <p> The automaton N satisfies L (N ) = ! n L (B). If B has n states, then ~ B has n states as well, W has O (n 2 ) states, and N has 2 O (n 2 ) states. By <ref> [Mic88, Saf88] </ref>, however, an optimal complementation construction for nondeterministic Buchi automata results in an automaton N with 2 O (n log n) states.
Reference: [MS87] <author> D.E. Muller and P.E. Schupp. </author> <title> Alternating automata on infinite trees. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 54,:267-276, </address> <year> 1987. </year>
Reference-contexts: Finally, by Lemma 3.6, each infinite path of hT r ; r 0 i gets trapped in a set with an even index, thus hT r ; r 0 i is accepting. As discussed in <ref> [MS87] </ref>, one can complement an alternating automaton by dualizing its transition function and acceptance condition. Formally, given a transition function ffi, let ~ ffi denote the dual function of ffi. <p> The dual of an acceptance condition ff is a condition that accepts exactly all the words in Q ! that are not accepted by ff. In particular, we have the following. Theorem 4.2 <ref> [MS87] </ref> For an alternating Buchi automaton A = h; Q; q in ; ffi; ffi, the alternating co-Buchi automaton ~ A = h; Q; q in ; ~ ffi; ffi satisfies L ( ~ A) = ! n L (A).
Reference: [MSS86] <author> D.E. Muller, A. Saoudi, and P.E. Schupp. </author> <title> Alternating automata, the weak monadic theory of the tree and its complexity. </title> <booktitle> In Proc. 13th ICALP, </booktitle> <year> 1986. </year>
Reference-contexts: In contrast, complementation is a very challenging problem for nondeterministic automata on infinite words. In particular, complementing a nondeterministic Buchi automaton involves an exponential blowup [Saf88, Mic88]. In <ref> [MSS86] </ref>, Muller et al. introduced weak alternating automata. In a weak alternating automaton, the automaton's set of states is partitioned into partially ordered sets. Each set is classified as accepting or rejecting. <p> Indeed, the condition of getting trapped in an accepting set can be replaced by a condition of visiting states of accepting sets infinitely often. The other direction, as it is easy to see, is not true. In fact, it is proven in <ref> [MSS86] </ref>, that, when defined on trees, a language L can be recognized by a weak alternating automaton iff L can be recognized by both Buchi and co-Buchi alternating automata. <p> Nevertheless, when defined on words, weak alternating automata are not less expressive than Buchi alternating automata, and they can recognize all the !-regular languages. To prove this, <ref> [MSS86, Lin88] </ref> suggest a linear translation of deterministic Muller automata to weak alternating automata. Using, however, the constructions in [MSS86, Lin88] in order translate a nondeterministic Buchi or co-Buchi automaton A into a weak alternating automaton, one has no choice but to first translate A into a deterministic Muller automaton. <p> Nevertheless, when defined on words, weak alternating automata are not less expressive than Buchi alternating automata, and they can recognize all the !-regular languages. To prove this, <ref> [MSS86, Lin88] </ref> suggest a linear translation of deterministic Muller automata to weak alternating automata. Using, however, the constructions in [MSS86, Lin88] in order translate a nondeterministic Buchi or co-Buchi automaton A into a weak alternating automaton, one has no choice but to first translate A into a deterministic Muller automaton. Such a determinization involves an exponential blow-up [Saf88]. <p> The language of A, denoted L (A), is the set of infinite words that A accepts. Thus, each word automaton defines a subset of ! . We denote by L (A) the complement language of A, that is the set of all words in ! n L (A). In <ref> [MSS86] </ref>, Muller et al. introduce weak alternating automata (WAAs).
Reference: [Mul63] <author> D.E. Muller. </author> <title> Infinite sequences and finite machines. </title> <booktitle> In Proc. 4th IEEE Symp. on Switching Circuit Theory and Logical design, </booktitle> <pages> pages 3-16, </pages> <year> 1963. </year>
Reference-contexts: More general are Muller automata. Here, the acceptance condition is a set ff of sets of states, and a run is accepting iff the set of states visited infinitely often is a member of ff <ref> [Mul63] </ref>. Another way to classify an automaton on infinite words is by the type of its branching mode. In a deterministic automaton, the transition function ffi maps a pair of a state and a letter into a single state.
Reference: [Rab69] <author> M.O. Rabin. </author> <title> Decidability of second order theories and automata on infinite trees. </title> <journal> Transaction of the AMS, </journal> <volume> 141 </volume> <pages> 1-35, </pages> <year> 1969. </year>
Reference-contexts: 1 Introduction Finite automata on infinite objects were first introduced in the 60's. Motivated by decision problems in mathematics and logic, Buchi, Mc-Naughton, and Rabin developed a framework for reasoning about infinite words and infinite trees <ref> [Buc62, McN66, Rab69] </ref>. The framework has proved to be very powerful. Automata, and their tight relation to second-order monadic logics were the key to the solution of several fundamental decision problems in mathematics and logics [Tho90]. Today, automata on infinite objects are used for specification and verification of nonterminating programs.
Reference: [Saf88] <author> S. Safra. </author> <title> On the complexity of omega-automata. </title> <booktitle> In Proc. 29th FOCS, </booktitle> <pages> pages 319-327, </pages> <year> 1988. </year>
Reference-contexts: In contrast, complementation is a very challenging problem for nondeterministic automata on infinite words. In particular, complementing a nondeterministic Buchi automaton involves an exponential blowup <ref> [Saf88, Mic88] </ref>. In [MSS86], Muller et al. introduced weak alternating automata. In a weak alternating automaton, the automaton's set of states is partitioned into partially ordered sets. Each set is classified as accepting or rejecting. <p> Using, however, the constructions in [MSS86, Lin88] in order translate a nondeterministic Buchi or co-Buchi automaton A into a weak alternating automaton, one has no choice but to first translate A into a deterministic Muller automaton. Such a determinization involves an exponential blow-up <ref> [Saf88] </ref>. Even worse, if A is an alternating automaton, then its determiniza-tion involves a doubly-exponential blow-up, and hence, so does the translation to weak alternating automata. Can these blow-ups be avoided? In this paper we answer this question positively. <p> Thus, complementing an automaton with n states resulted in an automaton with 2 2 O (n) states. In [SVW87], Sistla et al. suggested an improved construction, with only 2 O (n 2 ) states, which is still, however, not optimal. Only in <ref> [Saf88] </ref>, Safra introduced an optimal determinization construction, which also enabled a 2 O (n log n) complementation construc tion, matching the known lower bound [Mic88]. Another 2 O (n log n) construction was suggested by Klarlund in [Kla91], which circumvented the need for determinization. <p> Another 2 O (n log n) construction was suggested by Klarlund in [Kla91], which circumvented the need for determinization. While being the heart of many complexity results in verification, the optimal constructions in <ref> [Saf88, Kla91] </ref> are complicated. In particular, the intricacy of the algorithms makes their implementation difficult. We know of no implementation of Klarlund's algorithm, and the implementation of Safra's algorithm [THB95] has to cope with the involved structure of the states in the complementary automaton. <p> Applying their (exponential yet simple) translation to W, we end up with a nondeterministic Buchi automaton N that complements B. For B with n states, the size of N is 2 O (n log n) , meeting the known lower bound [Mic88] and the complicated constructions suggested in <ref> [Saf88, Kla91] </ref>. 2 Alternating Automata Given an alphabet , an infinite word over is an infinite sequence w = 0 1 2 of letters in . We denote by w l the suffix l l+1 l+2 of w. <p> The automaton N satisfies L (N ) = ! n L (B). If B has n states, then ~ B has n states as well, W has O (n 2 ) states, and N has 2 O (n 2 ) states. By <ref> [Mic88, Saf88] </ref>, however, an optimal complementation construction for nondeterministic Buchi automata results in an automaton N with 2 O (n log n) states.
Reference: [SVW87] <author> A.P. Sistla, M.Y. Vardi, and P. Wolper. </author> <title> The complementation problem for Buchi automata with applications to temporal logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 49 </volume> <pages> 217-237, </pages> <year> 1987. </year>
Reference-contexts: In [Buc62], Buchi suggested a complementation construction, which indeed solved the problem, yet involved a complicated combinatorial argument and a doubly-exponential blow-up in the state space. Thus, complementing an automaton with n states resulted in an automaton with 2 2 O (n) states. In <ref> [SVW87] </ref>, Sistla et al. suggested an improved construction, with only 2 O (n 2 ) states, which is still, however, not optimal. Only in [Saf88], Safra introduced an optimal determinization construction, which also enabled a 2 O (n log n) complementation construc tion, matching the known lower bound [Mic88].
Reference: [THB95] <author> S. Tasiran, R. Hojati, and R.K. Bray-ton. </author> <title> Language containment using nondeterministic omega-automata. </title> <booktitle> In Proc. </booktitle> <volume> CHARME '95, LNCS 987, </volume> <pages> pages 261-277, </pages> <year> 1995. </year>
Reference-contexts: While being the heart of many complexity results in verification, the optimal constructions in [Saf88, Kla91] are complicated. In particular, the intricacy of the algorithms makes their implementation difficult. We know of no implementation of Klarlund's algorithm, and the implementation of Safra's algorithm <ref> [THB95] </ref> has to cope with the involved structure of the states in the complementary automaton. The lack of a simple implementation is not due to a lack of need.
Reference: [Tho90] <author> W. Thomas. </author> <title> Automata on infinite objects. </title> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 165-191, </pages> <year> 1990. </year>
Reference-contexts: The framework has proved to be very powerful. Automata, and their tight relation to second-order monadic logics were the key to the solution of several fundamental decision problems in mathematics and logics <ref> [Tho90] </ref>. Today, automata on infinite objects are used for specification and verification of nonterminating programs.
Reference: [Var96] <author> M.Y. Vardi. </author> <title> An automata-theoretic approach to linear temporal logic. In Logics for Concurrency: Structure versus Automata, </title> <publisher> LNCS 1043, </publisher> <pages> pages 238-266, </pages> <year> 1996. </year>
Reference-contexts: Alternating automata enable a complete partition between the logical and the combinatorial aspects of reasoning about programs, and they give rise to cleaner and simpler verification algorithms <ref> [Var96] </ref>. The ability of alternating automata to switch between existential and universal branching modes also makes their complementation very easy. For example, in order to complement an alternating Muller automaton on infinite words, one only has to dualize its transition function and acceptance condition [MH84, Lin88].
Reference: [VW86] <author> M.Y. Vardi and P. Wolper. </author> <title> An automata-theoretic approach to automatic program verification. </title> <booktitle> In Proc. 1st LICS, </booktitle> <pages> pages 322-331, </pages> <year> 1986. </year>
Reference-contexts: In the automata-theoretic approach to verification, we reduce questions about programs and their specifications to questions about automata. More specifically, questions such as satisfiability of specifications and correctness of programs with respect to their specifications are reduced to questions such as nonemptiness and language containment <ref> [VW86, Kur94, VW94] </ref>. The automata-theoretic approach separates the logical and the combinatorial aspects of reasoning about programs. The translation of specifications to automata handles the logic and shifts all the combinatorial difficulties to automata-theoretic problems.
Reference: [VW94] <author> M.Y. Vardi and P. Wolper. </author> <title> Reasoning about infinite computations. </title> <journal> Information and Computation, </journal> <volume> 115(1) </volume> <pages> 1-37, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: In the automata-theoretic approach to verification, we reduce questions about programs and their specifications to questions about automata. More specifically, questions such as satisfiability of specifications and correctness of programs with respect to their specifications are reduced to questions such as nonemptiness and language containment <ref> [VW86, Kur94, VW94] </ref>. The automata-theoretic approach separates the logical and the combinatorial aspects of reasoning about programs. The translation of specifications to automata handles the logic and shifts all the combinatorial difficulties to automata-theoretic problems.
References-found: 27

