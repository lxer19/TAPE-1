URL: http://www.eecs.umich.edu/techreports/cse/1996/CSE-TR-280-96.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse96.html
Root-URL: http://www.eecs.umich.edu
Email: fashish,atri,kgshing@eecs.umich.edu  
Title: Design and Evaluation of a QoS-Sensitive Communication Subsystem Architecture  
Author: Ashish Mehra Atri Indiresan Kang G. Shin 
Keyword: Key Words Real-time communication, QoS-sensitive protocol processing, traffic enforcement, CPU and link scheduling  
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: Real-time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: There are a growing number of real-time applications (e.g., real-time controls, and audio/video conferencing) that require certain quality of service (QoS) guarantees from the underlying communication subsystem. The communication subsystem (host as well as network) must support real-time communication services that can be used to provide the required QoS of these applications, while providing reasonably good performance for best-effort traffic. In this paper we present and evaluate a QoS-sensitive communication subsystem architecture for end hosts that provides real-time communication support for generic network hardware. This architecture provides various services for managing communication resources for guaranteed-QoS (real-time) connections, such as admission control, traffic enforcement, buffer management, and CPU & link scheduling. The design of the architecture is based on three key goals: maintenance of QoS-guarantees on a per-connection basis, overload protection between established connections, and fairness in delivered performance to best-effort traffic. Using this architecture, we implement real-time channels, a paradigm for real-time communication services in packet-switched networks. The proposed architecture features a process-per-channel model for protocol processing that associates a channel handler with each established channel. The model employed for handler execution is one of "cooperative" preemption, where an executing handler yields the CPU to a waiting higher-priority handler at well-defined preemption points. The architecture provides several configurable policies for CPU scheduling and overload protection. We evaluate the implementation to demonstrate that this architecture maintains QoS guarantees while adhering to the stated design goals. The evaluation also demonstrates convincingly the need for specific features and policies provided in the architecture. The work reported in this paper was supported in part by the National Science Foundation under grant MIP-9203895 and the Office of Naval Research under grants N00014-94-1-0229. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of NSF or ONR. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari, </author> <title> "Real-time communication in multi-hop networks," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 5, no. 10, </volume> <pages> pp. 1044-1056, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Specifically, we propose and evaluate a QoS-sensitive communication subsystem architecture for guaranteed-QoS connections. 1 The proposed architecture is centered around the concept of a real-time channel , a paradigm for real-time communication services in packet-switched networks <ref> [1] </ref>. Our focus is on the run-time traffic management architecture used within the communication subsystem to satisfy the QoS requirements of all channels, while facilitating coexistence of best-effort traffic (for which no QoS guarantees are given) without undue degradation in performance. <p> As part of admission control tests, the resources required to satisfy the application's request are computed based on the specified worst-case traffic, and the request accepted if sufficient resources can be reserved for it. A local bound, called the link delay deadline in <ref> [1] </ref>, which is the worst-case transit delay seen by a packet on this channel plus a certain slack, is also assigned at each node. Once the channel is successfully established, the communication subsystem and the network maintain QoS guarantees via resource management and traffic enforcement policies. <p> If d is the desired end-to-end delay bound for a channel, message m i generated at the source is guaranteed to be delivered at the sink by time `(m i ) + d. More details on the real-time channel model can be found in <ref> [1] </ref>. 2.2 Resource Management There are two related aspects to resource management for guaranteed-QoS communication [2]: admission control and run-time resource scheduling. Real-time channels employ the following admission control procedure and link scheduling policy. Signalling and Admission Control: Admission control for real-time channels is provided by algorithm D order [1], which <p> in <ref> [1] </ref>. 2.2 Resource Management There are two related aspects to resource management for guaranteed-QoS communication [2]: admission control and run-time resource scheduling. Real-time channels employ the following admission control procedure and link scheduling policy. Signalling and Admission Control: Admission control for real-time channels is provided by algorithm D order [1], which uses fixed-priority scheduling for computing the worst-case delay experienced by a channel at a link. <p> At the source host (and intermediate nodes), the link scheduler maintains three packet queues: Q1 (ordered by deadline) for current real-time packets, Q2 (FIFO) for best-effort packets, and Q3 (ordered by logical arrival time) for early real-time packets. Q3 packets are transferred to Q1 as they become current <ref> [1] </ref>. <p> We consider non-work-conserving link scheduling to avoid stressing resources at downstream hosts; in general, real-time channels allow the link to "work ahead" in a limited fashion, as determined by the link horizon <ref> [1] </ref>. Provision of QoS guarantees necessitates bounded delays in obtaining the CPU for protocol processing. Immediate preemption of an executing lower-priority handler can result in significant overheads due to context switches and cache misses. Accordingly, the preemption model employed for handler execution is one of cooperative preemption. <p> Best-effort traffic is also handled by the corresponding channel handlers. The execution priority of a handler can either be derived dynamically from the deadline of the message it processes, or statically from that computed by D order <ref> [1] </ref>. We extended x-kernel's process management and semaphore routines to support handler creation, termination, and synchronization with events such as message insertions and availability of packet buffers after packet transmissions. Each packet of a message must inherit the transmission deadline assigned to the message.
Reference: [2] <author> C. M. Aras, J. F. Kurose, D. S. Reeves, and H. Schulzrinne, </author> <title> "Real-time communication in packet-switched networks," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 82, no. 1, </volume> <pages> pp. 122-139, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: This model of real-time channels is similar to other proposals for guaranteed-QoS connections <ref> [2] </ref>. The proposed architecture features a process-per-channel model for protocol processing on each channel, coordinated by a unique channel handler created on successful establishment of the channel. <p> More details on the real-time channel model can be found in [1]. 2.2 Resource Management There are two related aspects to resource management for guaranteed-QoS communication <ref> [2] </ref>: admission control and run-time resource scheduling. Real-time channels employ the following admission control procedure and link scheduling policy. <p> A detailed survey of the proposed techniques can be found in <ref> [2] </ref>. Similar issues are being examined for provision of integrated services on the Internet [9, 10]. Several classes of service are being considered, including guaranteed service (similar to our work) which provides guaranteed delay, and predictive service [11] which has more relaxed QoS requirements.
Reference: [3] <author> N. C. Hutchinson and L. L. Peterson, </author> <title> "The x-Kernel: An architecture for implementing network protocols," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> vol. 17, no. 1, </volume> <pages> pp. 1-13, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Protocol processing can be work-conserving or non-work-conserving, with best-effort traffic given processing and transmission priority over "work ahead" real-time traffic. We have implemented the proposed architecture using a communication executive derived from x-kernel 3.1 <ref> [3] </ref> that exercises complete control over a Motorola 68040 CPU. This configuration avoids any interference from computation or other operating system activities on the host, allowing us to focus on the communication subsystem. <p> Maintaining Per-Channel QoS Guarantees: In the presence of multiple real-time channels and best-effort traffic, protocol-processing bandwidth must be consumed in a QoS-sensitive fashion, i.e., in an order consistent with the QoS requirements of the active channels. Assuming a process-per-message model <ref> [3] </ref>, first-in-first-out (FIFO) scheduling of protocol threads (or message handlers) 4 does not meet these requirements. QoS-sensitive CPU scheduling of protocol threads, with bounded latency in acquiring the CPU for protocol processing, is necessary to maintain QoS guarantees. <p> C startup includes the cost of setting up any DMA transfer operations, if any. Our experience with adapter design and the implications for packet transmission time are highlighted in [8]. 4 Implementation We have implemented the proposed architecture using a communication executive derived from x-kernel (v3.1) <ref> [3] </ref> that exercises complete control over a 25 MHz Motorola 68040 CPU.
Reference: [4] <author> R. L. Cruz, </author> <title> A Calculus for Network Delay and a Note on Topologies of Interconnection Networks, </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> July </month> <year> 1987. </year> <note> available as technical report UILU-ENG-87-2246. </note>
Reference-contexts: When the application requests that the channel be destroyed, all resources allocated for the channel are released by the network and the communication subsystems at the source and destination hosts. 2.1 Traffic Model and QoS The traffic generation model in real-time channels is based on a linear bounded arrival process <ref> [4, 5] </ref>, which is characterized by three parameters: maximum message size (M max bytes), maximum message rate (R max messages/second), and maximum burst size (B max messages). In any interval of length ffi, the number of messages generated is bounded by B max + ffi R max .
Reference: [5] <author> D. P. Anderson, S. Y. Tzou, R. Wahbe, R. Govindan, and M. Andrews, </author> <title> "Support for continuous media in the DASH system," </title> <booktitle> in Proc. Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pp. 54-61, </pages> <year> 1990. </year>
Reference-contexts: When the application requests that the channel be destroyed, all resources allocated for the channel are released by the network and the communication subsystems at the source and destination hosts. 2.1 Traffic Model and QoS The traffic generation model in real-time channels is based on a linear bounded arrival process <ref> [4, 5] </ref>, which is characterized by three parameters: maximum message size (M max bytes), maximum message rate (R max messages/second), and maximum burst size (B max messages). In any interval of length ffi, the number of messages generated is bounded by B max + ffi R max .
Reference: [6] <author> D. C. Schmidt and T. Suda, </author> <title> "Transport system architecture services for high-performance communications systems," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 11, no. 4, </volume> <pages> pp. 489-506, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: The communication subsystem should facilitate coexistence of best-effort traffic with real-time traffic without significant degradation in performance. 3 Architecture for QoS-Sensitive Protocol Processing In a process-per-message protocol-processing model <ref> [6] </ref>, a process or thread shepherds a message through the protocol stack. Not only does it eliminate extraneous context switches encountered in the process-per-protocol model [6], it also facilitates protocol processing for messages to be scheduled according to a variety of policies, as opposed to the software-interrupt level processing in BSD <p> should facilitate coexistence of best-effort traffic with real-time traffic without significant degradation in performance. 3 Architecture for QoS-Sensitive Protocol Processing In a process-per-message protocol-processing model <ref> [6] </ref>, a process or thread shepherds a message through the protocol stack. Not only does it eliminate extraneous context switches encountered in the process-per-protocol model [6], it also facilitates protocol processing for messages to be scheduled according to a variety of policies, as opposed to the software-interrupt level processing in BSD Unix. While the process-per-message model suffices for best-effort messages, it introduces additional complexity for supporting per-channel QoS guarantees. <p> Since QoS guarantees are specified on a per-channel basis, it suffices to have a single active thread that coordinates access to resources for all messages on a given channel. We employ a process-per-channel model, which is a QoS-sensitive extension of the process-per-connection model <ref> [6] </ref>.
Reference: [7] <author> A. Mehra, A. Indiresan, and K. Shin, </author> <title> "Resource management for real-time communication: Making theory meet practice," </title> <type> Technical Report CSE-TR-281-96, </type> <institution> University of Michigan, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: the absence of best-effort traffic, work-conserving protocol processing can also improve the average QoS delivered to real-time channels, especially if link scheduling is work-conserving. 3.3 Accounting for CPU Preemption Delays and Overheads Preemption overheads effectively reduce usable resource capacity, lowering channel admissibility at the host. 3 In a companion paper <ref> [7] </ref>, we conducted an in-depth study of the tradeoff between usable resource capacity and channel admissibility. Below we present how D order was modified to account for preemption overheads and the window of non-preemptibility in handler execution. <p> As demonstrated in <ref> [7] </ref>, option 1 gives the best performance in terms of throughput and sensitivity of channel admissibility to P and S; accordingly, we focus on option 1 in the discussion below. After inserting a packet into the appropriate link packet queue, channel handlers invoke the scheduler directly as a function call. <p> Selection of P and S is based on the tradeoff between available resource capacity and channel admissibility <ref> [7] </ref>. Table 2 (b) summarizes the system parameter settings. In order for the (simple) model of packet transmission time (presented in Section 3.4) to be useful, C startup and B xfer must be determined for a given network adapter and host architecture.
Reference: [8] <author> A. Indiresan, A. Mehra, and K. Shin, </author> <title> "Design tradeoffs in implementing real-time channels on bus-based multiprocessor hosts," </title> <type> Technical Report CSE-TR-238-95, </type> <institution> University of Michigan, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: C startup includes the cost of setting up any DMA transfer operations, if any. Our experience with adapter design and the implications for packet transmission time are highlighted in <ref> [8] </ref>. 4 Implementation We have implemented the proposed architecture using a communication executive derived from x-kernel (v3.1) [3] that exercises complete control over a 25 MHz Motorola 68040 CPU. <p> Moreover, IP is a connectionless protocol and 5 Implementation of the reception-side architecture is a slight variation of the transmission-side architecture. 11 would have required either modifications to make it connection-oriented or mechanisms to classify incoming and outgoing packets. More details on the protocol stack are provided in <ref> [8] </ref>. 4.2 Realizing Process-Per-Channel Model On successful establishment, a channel is allocated a channel handler and space for its message and packet queues. <p> This in turn involves experimentally determining the latency-throughput characteristics of the adapter. Using our real-time channel implementation, a parameterization of the networking hardware available to us revealed significant performance-related deficiencies such as poor data transfer throughput and high, unpredictable packet transmission time <ref> [8] </ref>. While these deficiences were due to the design of the adapter, they severely limited our ability to demonstrate the capabilities of our architecture and implementation. It suffices to ensure that transmission of a packet of size s takes L xmit (s) time units.
Reference: [9] <author> D. D. Clark, S. Shenker, and L. Zhang, </author> <title> "Supporting real-time applications in an integrated services packet network: Architecture and mechanism," </title> <booktitle> in Proc. of ACM SIGCOMM, </booktitle> <pages> pp. 14-26, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: A detailed survey of the proposed techniques can be found in [2]. Similar issues are being examined for provision of integrated services on the Internet <ref> [9, 10] </ref>. Several classes of service are being considered, including guaranteed service (similar to our work) which provides guaranteed delay, and predictive service [11] which has more relaxed QoS requirements.
Reference: [10] <author> R. Braden, D. Clark, and S. Shenker, </author> <title> "Integrated services in the Internet architecture: An overview," Request for Comments RFC 1633, </title> <month> July </month> <year> 1994. </year> <note> Xerox PARC. 20 </note>
Reference-contexts: A detailed survey of the proposed techniques can be found in [2]. Similar issues are being examined for provision of integrated services on the Internet <ref> [9, 10] </ref>. Several classes of service are being considered, including guaranteed service (similar to our work) which provides guaranteed delay, and predictive service [11] which has more relaxed QoS requirements.
Reference: [11] <author> S. Jamin, P. Danzig, S. Shenker, and L. Zhang, </author> <title> "A measurement-based admission control algorithm for integrated services packet networks," </title> <booktitle> in Proc. of ACM SIGCOMM, </booktitle> <pages> pp. 2-13, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: A detailed survey of the proposed techniques can be found in [2]. Similar issues are being examined for provision of integrated services on the Internet [9, 10]. Several classes of service are being considered, including guaranteed service (similar to our work) which provides guaranteed delay, and predictive service <ref> [11] </ref> which has more relaxed QoS requirements. The expected QoS requirements of applications and issues involved in sharing link bandwidth across multiple classes of traffic are explored in [12, 13].
Reference: [12] <author> S. Shenker, D. Clark, and L. Zhang, </author> <title> "A scheduling service model and a scheduling architecture for an integrated services packet network," </title> <note> Working Paper, August 1993. Xerox PARC. </note>
Reference-contexts: Several classes of service are being considered, including guaranteed service (similar to our work) which provides guaranteed delay, and predictive service [11] which has more relaxed QoS requirements. The expected QoS requirements of applications and issues involved in sharing link bandwidth across multiple classes of traffic are explored in <ref> [12, 13] </ref>. Much support being provided on the Internet is geared towards multicast communication, in contrast with our work on unicast real-time channels.
Reference: [13] <author> S. Floyd and V. Jacobson, </author> <title> "Link-sharing and resource management models for packet networks," </title> <journal> IEEE/ACM Trans. Networking, </journal> <volume> vol. 3, no. 4, </volume> , <month> August </month> <year> 1995. </year>
Reference-contexts: Several classes of service are being considered, including guaranteed service (similar to our work) which provides guaranteed delay, and predictive service [11] which has more relaxed QoS requirements. The expected QoS requirements of applications and issues involved in sharing link bandwidth across multiple classes of traffic are explored in <ref> [12, 13] </ref>. Much support being provided on the Internet is geared towards multicast communication, in contrast with our work on unicast real-time channels.
Reference: [14] <author> L. Zhang, S. Deering, D. Estrin, S. Shenker, and D. Zappala, "RSVP: </author> <title> A new resource ReSerVation Protocol," </title> <journal> IEEE Network, </journal> <pages> pp. 8-18, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Much support being provided on the Internet is geared towards multicast communication, in contrast with our work on unicast real-time channels. The signalling required to set up reservations for application flows can be provided by RSVP <ref> [14] </ref>, which initiates reservation setup at the receiver, or ST-II [15], which initiates reservation setup at the sender; RSVP, in particular, provides special provisions for multicast communication. The issues involved in providing QoS support in IP-over-ATM networks are also being explored [16, 17].
Reference: [15] <author> L. Delgrossi and L. Berger, </author> <title> "Internet stream protocol version 2 (ST-2) protocol specification version ST2+," Request for Comments RFC 1819, </title> <month> August </month> <year> 1995. </year> <institution> ST2 Working Group. </institution>
Reference-contexts: Much support being provided on the Internet is geared towards multicast communication, in contrast with our work on unicast real-time channels. The signalling required to set up reservations for application flows can be provided by RSVP [14], which initiates reservation setup at the receiver, or ST-II <ref> [15] </ref>, which initiates reservation setup at the sender; RSVP, in particular, provides special provisions for multicast communication. The issues involved in providing QoS support in IP-over-ATM networks are also being explored [16, 17].
Reference: [16] <author> M. Borden, E. Crawley, B. Davie, and S. Batsell, </author> <title> "Integration of real-time services in an IP-ATM network architecture," Request for Comments RFC 1821, </title> <month> August </month> <year> 1995. </year> <title> Bay Networks, Bellcore, </title> <publisher> NRL. </publisher>
Reference-contexts: The issues involved in providing QoS support in IP-over-ATM networks are also being explored <ref> [16, 17] </ref>. The Tenet real-time protocol suite [18] is an implementation of real-time communication on wide-area networks (WANs), but it did not consider incorporation of protocol processing overheads into the network-level resource management policies. In particular, it has not addressed the problem of QoS-sensitive protocol processing inside hosts.
Reference: [17] <author> M. Perez, F. Liaw, A. Mankin, E. Hoffman, D. Grossman, and A. Malis, </author> <title> "ATM signaling support for IP over ATM," Request for Comments RFC 1755, </title> <month> February </month> <year> 1995. </year> <note> ISI, Fore, Motoral Codex, Ascom Timeplex. </note>
Reference-contexts: The issues involved in providing QoS support in IP-over-ATM networks are also being explored <ref> [16, 17] </ref>. The Tenet real-time protocol suite [18] is an implementation of real-time communication on wide-area networks (WANs), but it did not consider incorporation of protocol processing overheads into the network-level resource management policies. In particular, it has not addressed the problem of QoS-sensitive protocol processing inside hosts.
Reference: [18] <author> A. Banerjea, D. Ferrari, B. Mah, M. Moran, D. C. Verma, and H. Zhang, </author> <title> "The Tenet real-time protocol suite: Design, implementation, and experiences," </title> <type> Technical Report TR-94-059, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: The issues involved in providing QoS support in IP-over-ATM networks are also being explored [16, 17]. The Tenet real-time protocol suite <ref> [18] </ref> is an implementation of real-time communication on wide-area networks (WANs), but it did not consider incorporation of protocol processing overheads into the network-level resource management policies. In particular, it has not addressed the problem of QoS-sensitive protocol processing inside hosts.
Reference: [19] <author> D. P. Anderson, L. Delgrossi, and R. G. Herrtwich, </author> <title> "Structure and scheduling in real-time protocol implementations," </title> <type> Technical Report TR-90-021, </type> <institution> International Computer Science Institute, Berkeley, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: In particular, it has not addressed the problem of QoS-sensitive protocol processing inside hosts. The need for scheduling protocol processing at priority levels consistent with those of the communicating application was highlighted in <ref> [19] </ref> and some implementation strategies demonstrated in [20].
Reference: [20] <author> R. Govindan and D. P. Anderson, </author> <title> "Scheduling and IPC mechanisms for continuous media," </title> <booktitle> in Proc. ACM Symp. on Operating Systems Principles, </booktitle> <pages> pp. 68-80, </pages> <year> 1991. </year>
Reference-contexts: In particular, it has not addressed the problem of QoS-sensitive protocol processing inside hosts. The need for scheduling protocol processing at priority levels consistent with those of the communicating application was highlighted in [19] and some implementation strategies demonstrated in <ref> [20] </ref>.
Reference: [21] <author> C. W. Mercer, S. Savage, and H. Tokuda, </author> <title> "Processor capacity reserves for multimedia operating systems," </title> <booktitle> in Proceedings of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: In particular, it has not addressed the problem of QoS-sensitive protocol processing inside hosts. The need for scheduling protocol processing at priority levels consistent with those of the communicating application was highlighted in [19] and some implementation strategies demonstrated in [20]. More recently, processor capacity reserves in Real-Time Mach <ref> [21] </ref> have been combined 18 fi fi RT Ch 0 (dropped) ffi ffi RT Ch 0 (late) RT Ch 1 (dropped) fl fl RT Ch 1 (late) RT Ch 2 (dropped) RT Ch 2 (late) BE Ch 3 (dropped) | | | | | | | 1 | 4 | 16 <p> We are currently implementing the proposed architecture, in OSF Mach-RT, a microkernel-based uniprocessor real-time operating system. The analysis presented is directly applicable if a portion of the host processing capacity can be reserved for communication-related activities <ref> [21, 23] </ref>. Within this framework, we are also exploring the issues involved in implementing statistical real-time channels, as opposed to the deterministic real-time channel implementation described in this paper. Statistical QoS guarantees can potentially be useful to a large class of distributed multimedia applications.
Reference: [22] <author> C. Maeda and B. N. Bershad, </author> <title> "Protocol service decomposition for high-performance networking," </title> <booktitle> in Proc. ACM Symp. on Operating Systems Principles, </booktitle> <pages> pp. 244-255, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: | 64 | 256 | 1024 | 4096 | 16384 | | | | | | | | Best-effort load (KB/s) Number of packets late or dropped fi fi fi fi fi fi ffi ffi fl fl fl (a) Non-preemptive best-effort processing (b) Non-preemptive real-time processing with user-level protocol processing <ref> [22] </ref> for predictable protocol processing inside hosts [23]. Our approach decouples the protocol processing priority from that of the application, allowing the for mer to be derived from the QoS requirements, traffic characteristics and run-time communication behavior of the application.
Reference: [23] <author> C. W. Mercer, J. Zelenka, and R. Rajkumar, </author> <title> "On predictable operating system protocol processing," </title> <type> Technical Report CMU-CS-94-165, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: 4096 | 16384 | | | | | | | | Best-effort load (KB/s) Number of packets late or dropped fi fi fi fi fi fi ffi ffi fl fl fl (a) Non-preemptive best-effort processing (b) Non-preemptive real-time processing with user-level protocol processing [22] for predictable protocol processing inside hosts <ref> [23] </ref>. Our approach decouples the protocol processing priority from that of the application, allowing the for mer to be derived from the QoS requirements, traffic characteristics and run-time communication behavior of the application. <p> We are currently implementing the proposed architecture, in OSF Mach-RT, a microkernel-based uniprocessor real-time operating system. The analysis presented is directly applicable if a portion of the host processing capacity can be reserved for communication-related activities <ref> [21, 23] </ref>. Within this framework, we are also exploring the issues involved in implementing statistical real-time channels, as opposed to the deterministic real-time channel implementation described in this paper. Statistical QoS guarantees can potentially be useful to a large class of distributed multimedia applications.
Reference: [24] <author> O. Hagsand and P. Sjodin, </author> <title> "Workstation support for real-time multimedia communication," </title> <booktitle> in Winter USENIX Conference, </booktitle> <pages> pp. 133-142, </pages> <month> January </month> <year> 1994. </year> <note> Second Edition. </note>
Reference-contexts: Our approach decouples the protocol processing priority from that of the application, allowing the for mer to be derived from the QoS requirements, traffic characteristics and run-time communication behavior of the application. Operating system support for multimedia communication is explored in <ref> [24] </ref>, where the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel, and in [25], which also focuses on the scheduling architecture. However, no explicit support is provided for traffic enforcement or decoupling of protocol processing priority from appli cation priority.
Reference: [25] <author> C. Vogt, R. G. Herrtwich, and R. Nagarajan, "HeiRAT: </author> <title> The Heidelberg resource administration technique design philosophy and goals," </title> <institution> Research Report 43.9213, IBM Research Division, IBM European Networking Center, </institution> <address> Heidelberg, Germany, </address> <year> 1992. </year>
Reference-contexts: Operating system support for multimedia communication is explored in [24], where the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel, and in <ref> [25] </ref>, which also focuses on the scheduling architecture. However, no explicit support is provided for traffic enforcement or decoupling of protocol processing priority from appli cation priority.
Reference: [26] <author> F.Travostino, E.Menze, and F.Reynolds, </author> <title> "Paths: Programming with system resources in support of real-time distributed applications," </title> <booktitle> in Proc. IEEE Workshop on Object-Oriented Real-Time Dependable Systems, </booktitle> <month> February </month> <year> 1996. </year> <month> 21 </month>
Reference-contexts: However, no explicit support is provided for traffic enforcement or decoupling of protocol processing priority from appli cation priority. The Path abstraction <ref> [26] </ref> provides a rich framework for development of real-time communication services for distributed applications. 7 Conclusions and Future Work In this paper we have presented and evaluated a QoS-sensitive communication subsystem architec ture for end hosts that supports guaranteed-QoS connections.
References-found: 26

