URL: ftp://ftp.cs.bham.ac.uk/pub/tech-reports/1998/CSRP-98-04.ps.gz
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Why Ants are Hard genetic programming, simulated annealing and hill climbing performance is shown not
Author: W. B. Langdon and R. Poli 
Note: Previously reported  
Address: B15 2TT, UK  
Affiliation: School of Computer Science, The University of Birmingham, Birmingham  
Pubnum: Technical Report: CSRP-98-4  
Email: fW.B.Langdon,R.Polig@cs.bham.ac.uk  
Phone: Tel: +44 (0) 121 414 4791, Fax: +44 (0) 121 414 4281  
Date: January 1998  
Web: http://www.cs.bham.ac.uk/~wbl, ~rmp  
Abstract: The problem of programming an artificial ant to follow the Santa Fe trail is used as an example program search space. Analysis of shorter solutions shows they have many of the characteristics often ascribed to manually coded programs. Enumeration of a small fraction of the total search space and random sampling characterise it as rugged with many multiple plateaus split by deep valleys and many local and global optima. This suggests it is difficult for hill climbing algorithms. Analysis of the program search space in terms of fixed length schema suggests it is highly deceptive and that for the simplest solutions large building blocks must be assembled before they have above average fitness. In some cases we show solutions cannot be assembled using a fixed representation from small building blocks of above average fitness. These suggest the Ant problem is difficult for Genetic Algorithms. Random sampling of the program search space suggests on average the density of global optima changes only slowly with program size but the density of neutral networks linking points of the same fitness grows approximately linearly with program length. This is part of the cause of bloat. 
Abstract-found: 1
Intro-found: 1
Reference: [ Alonso and Schott, 1995 ] <author> Laurent Alonso and Rene Schott. </author> <title> Random Generation of Trees. </title> <publisher> Kulwer Academic Publishers, </publisher> <year> 1995. </year>
Reference-contexts: For each such size between 10,000,000 random programs where generated and tested. The random programs where chosen uniformly from the set of possible programs of the specific length using the bijective random tree creation algorithm described in <ref> [ Alonso and Schott, 1995, Chapter 4 ] </ref> . Where there are multiple different combinations of function arity which give rise to trees of the required size, one was chosen at random in proportion to the number of trees it contains.
Reference: [ Koza, 1992 ] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction There have often been claims that automatic programming is hampered by the nature of program spaces. These are undoubtedly large <ref> [ Koza, 1992, page 2 ] </ref> and, it often claimed, badly behaved with little performance relationship between similar programs [ O'Reilly, 1995, page 8 ] . In this paper we present a systematic exploration of the program space of a commonly used benchmark problem (Sections 2 and 3). <p> Finally in Section 8 we consider why the problem is important and how we can exploit what we have learnt and in Section 9 we give our conclusions. 2 The Artificial Ant Problem The artificial ant problem <ref> [ Koza, 1992, pages 147-155 ] </ref> is a well studied problem often used as a GP benchmark. Briefly the problem is to devise a program which can successfully navigate an artificial ant along a twisting trail on a 32 fi 32 toroidal grid. <p> This is known as "Effort" required, cf. <ref> [ Koza, 1992, page 194 ] </ref> : E = log (1 P ) log * Taking * as 1% we can calculate the number of fitness evaluations E required to find at least one solution (with probability 99%). 4.1 Uniform Random Search Using uniform random search and taking the maximum value <p> with programs of size 50 and 4,900,000 for sizes of 500. (In the ant problem as well as reducing the chance of success, longer random programs also require more machine resources to evaluate). 4.2 Ramped-Half-and-Half Random Search Attempts to solve GP problems using random search have so far been unsuccessful <ref> [ Koza, 1992 ] </ref> . <p> For example in the stack problem [ Langdon, 1998a, page 75 ] the "ramped-half-and-half" method <ref> [ Koza, 1992, page 93 ] </ref> (which is often used to create the initial populations for GP experiments) was used to generate and test more than 49,000,000 programs random and no solutions were found. <p> E.g. only five of the six solutions found are distinct from each other. 4.3 Comparison with Other Methods Table 3 gives E values for various methods of solving the Ant problem. Rows 2-6 are from calculations in the previous sections, row 7 is from <ref> [ Koza, 1992 ] </ref> , while rows 8 onwards have been calculated from 6 Table 3: Effort to Solve Santa Fe Trail Method E=1000 Random (len=18) 450 Random (len=25) 1,200 Random (len=50) 2,700 Random (len=500) 4,900 Ramped-half-and-half 15,000 Koza GP [ Koza, 1992, page 202 ] 450 GP [ Langdon and <p> from calculations in the previous sections, row 7 is from [ Koza, 1992 ] , while rows 8 onwards have been calculated from 6 Table 3: Effort to Solve Santa Fe Trail Method E=1000 Random (len=18) 450 Random (len=25) 1,200 Random (len=50) 2,700 Random (len=500) 4,900 Ramped-half-and-half 15,000 Koza GP <ref> [ Koza, 1992, page 202 ] </ref> 450 GP [ Langdon and Poli, 1997a ] 450 Subtree Mutation [ Langdon and Poli, 1997b ] 426 Simulated Annealing 50%-150% 748 Subtree-sized 435 Hill Climbing 50%-150% 955 Subtree-sized 1,671 Strict Hill Climbing 50%-150% 186 Subtree-sized 738 Population (data for best) 50%-150% 266 Subtree-sized [
Reference: [ Langdon and Poli, 1997a ] <author> W. B. Langdon and R. Poli. </author> <title> Fitness causes bloat. </title> <editor> In P. K. Chawdhry, R. Roy, and R. K. Pan, editors, </editor> <booktitle> Second On-line World Conference on Soft Computing in Engineering Design and Manufacturing. </booktitle> <publisher> Springer-Verlag London, </publisher> <month> 23-27 June </month> <year> 1997. </year>
Reference-contexts: Each time the ant enters a square containing food the ant eats it. The amount of food eaten is used as the fitness measure of the control program. The fitness function, function and terminal sets etc. we use are identical to <ref> [ Langdon and Poli, 1997a ] </ref> cf. Table 1. 3 Size of Program and Solution Space The number of different programs of a specific length is given by the size of the terminal set and the numbers of different functions in the function set of each arity (branching factor). <p> Since the total number of programs rises rapidly, this means the number of programs with a given score also rises rapidly with length. This confirms assumptions in <ref> [ Langdon and Poli, 1997a ] </ref> . With any Monte Carlo technique there will be some stochastic error in the estimates. In the case of rare events (such as finding a solution to the ant problem) this could be large. <p> is from [ Koza, 1992 ] , while rows 8 onwards have been calculated from 6 Table 3: Effort to Solve Santa Fe Trail Method E=1000 Random (len=18) 450 Random (len=25) 1,200 Random (len=50) 2,700 Random (len=500) 4,900 Ramped-half-and-half 15,000 Koza GP [ Koza, 1992, page 202 ] 450 GP <ref> [ Langdon and Poli, 1997a ] </ref> 450 Subtree Mutation [ Langdon and Poli, 1997b ] 426 Simulated Annealing 50%-150% 748 Subtree-sized 435 Hill Climbing 50%-150% 955 Subtree-sized 1,671 Strict Hill Climbing 50%-150% 186 Subtree-sized 738 Population (data for best) 50%-150% 266 Subtree-sized [ Langdon, 1998b ] 390 PDGP 336 runs previously
Reference: [ Langdon and Poli, 1997b ] <author> W. B. Langdon and R. Poli. </author> <title> Fitness causes bloat: Mutation. </title> <editor> In C. Clack, K. Vekaria, and N. Zin, editors, </editor> <booktitle> ET'97 Theory and Application of Evolutionary Computation, </booktitle> <pages> pages 59-77, </pages> <address> University College London, UK, </address> <month> 15 December </month> <year> 1997. </year>
Reference-contexts: 8 onwards have been calculated from 6 Table 3: Effort to Solve Santa Fe Trail Method E=1000 Random (len=18) 450 Random (len=25) 1,200 Random (len=50) 2,700 Random (len=500) 4,900 Ramped-half-and-half 15,000 Koza GP [ Koza, 1992, page 202 ] 450 GP [ Langdon and Poli, 1997a ] 450 Subtree Mutation <ref> [ Langdon and Poli, 1997b ] </ref> 426 Simulated Annealing 50%-150% 748 Subtree-sized 435 Hill Climbing 50%-150% 955 Subtree-sized 1,671 Strict Hill Climbing 50%-150% 186 Subtree-sized 738 Population (data for best) 50%-150% 266 Subtree-sized [ Langdon, 1998b ] 390 PDGP 336 runs previously reported which used three types of varible length subtree
Reference: [ Langdon, 1998a ] <author> W. B. Langdon. </author> <title> Data Structures and Genetic Programming. </title> <address> Kulwer, </address> <year> 1998. </year> <month> Forthcoming. </month>
Reference-contexts: For example in the stack problem <ref> [ Langdon, 1998a, page 75 ] </ref> the "ramped-half-and-half" method [ Koza, 1992, page 93 ] (which is often used to create the initial populations for GP experiments) was used to generate and test more than 49,000,000 programs random and no solutions were found. <p> However the fitness of low order schema may be estimated more reliably (as GA populations can contain many instances of them). Where they are deceptive, this may lead a GA to discard them. (Extinction of complete primitives was seen in the list and stack problems <ref> [ Langdon, 1998a, Chapter 6 and 8 ] </ref> ). If real program spaces have these characteristics (we expect them to do so but be still worse) then it is important to be able to demonstrate scaleable techniques on such problem spaces.
Reference: [ Langdon, 1998b ] <author> W. B. Langdon. </author> <title> Program growth in simulated annealing, hill climbing and populations. </title> <booktitle> In 1998 IEEE International Conference on Evolutionary Computation, </booktitle> <month> 5-9 May </month> <year> 1998. </year> <month> Forthcomming. </month>
Reference-contexts: [ Koza, 1992, page 202 ] 450 GP [ Langdon and Poli, 1997a ] 450 Subtree Mutation [ Langdon and Poli, 1997b ] 426 Simulated Annealing 50%-150% 748 Subtree-sized 435 Hill Climbing 50%-150% 955 Subtree-sized 1,671 Strict Hill Climbing 50%-150% 186 Subtree-sized 738 Population (data for best) 50%-150% 266 Subtree-sized <ref> [ Langdon, 1998b ] </ref> 390 PDGP 336 runs previously reported which used three types of varible length subtree mutation (except the last row using PDGP has not previously been reported). <p> This is the simplest neighbour relationship which means we can avoid the complications inherent in crossover operator such as GP crossover. In the case of small programs (i.e. size 11, 12 and 13) we investigated the neighbourhoods of all the fitter programs, i.e. those with scores above 24 (in <ref> [ Langdon, 1998b ] </ref> in almost all runs the best individual found had a score better than 24). As expected this showed many neighbours are worse or much worse (i.e. score less than 24). <p> I.e. if a hill climber searching programs of length 11 or 12 finds a program scoring more than 36 we know it will never find a solution, without restarting. (Figure 6 shows 50 runs of a variable length representation hill climber <ref> [ Langdon, 1998b ] </ref> most of which became trapped at suboptimal peaks. Similar behaviour is also seen with other search techniques such as GP). There are many more solutions of length 13 and they are structurally and operationally more diverse.
Reference: [ O'Reilly, 1995 ] <author> Una-May O'Reilly. </author> <title> An Analysis of Genetic Programming. </title> <type> PhD thesis, </type> <institution> Carleton University, Ottawa-Carleton Institute for Computer Science, </institution> <address> Ottawa, Ontario, Canada, </address> <month> 22 September </month> <year> 1995. </year>
Reference-contexts: 1 Introduction There have often been claims that automatic programming is hampered by the nature of program spaces. These are undoubtedly large [ Koza, 1992, page 2 ] and, it often claimed, badly behaved with little performance relationship between similar programs <ref> [ O'Reilly, 1995, page 8 ] </ref> . In this paper we present a systematic exploration of the program space of a commonly used benchmark problem (Sections 2 and 3).
Reference: [ Poli and Langdon, 1997 ] <author> Riccardo Poli and W. B. Langdon. </author> <title> A new schema theory for genetic programming with one-point crossover and point mutation. </title> <editor> In John R. Koza et al. editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 278-285, </pages> <address> 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: and for the longest sizes almost all programs of intermediate fitness have a large number of neighbours with the same score. (In the Ant problem a program of length l has approximately 3l=2 neighbours). 6 Fixed Length Schema Analysis In this section we consider the fitness of fixed length schema <ref> [ Poli and Langdon, 1997 ] </ref> within the program space. Unlike conventional schema analysis we define a schema's fitness as the mean score for all programs matching the schema.
Reference: [ Poli, 1997 ] <author> Riccardo Poli. </author> <title> Evolution of graph-like programs with parallel distributed genetic programming. </title> <editor> In Eric Goodman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Seventh International Conference, </booktitle> <address> 19-23 July 1997. </address> <publisher> Morgan Kaufmann. </publisher> <pages> 16 </pages>
References-found: 9

