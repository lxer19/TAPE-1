URL: http://www.cs.man.ac.uk/~banach/some.pubs/Fib.Sem.ETGRS.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~banach/Recent.publications.html
Root-URL: http://www.cs.man.ac.uk
Title: 7 A Fibration Semantics for Extended Term Graph Rewriting  
Author: R. Banach 
Note: c fl1993 John Wiley Sons Ltd  
Date: 7.1 INTRODUCTION  
Abstract: In this chapter, we re-examine the problem of providing a categorical semantics for the core of the general term graph rewriting language DACTL. Partial success in this area has been obtained by describing graph rewrites as certain kinds of pushout. See [Ken87, HP88, HKP88, Ken91]. Nevertheless, none of these constructions successfully describe the whole of the operational models of [BvEG + 87] where term graph rewriting was introduced, or of its generalization in the language DACTL itself [GKSS88, GHK + 88, GKS91, Ken90]. The main stumbling blocks for all of these attempts have been examples such as the I combinator root:I[a] ) a when applied to a circular instance of itself x:I[x]. None of the hitherto proposed categorical formulations of TGR adequately capture the DACTL version of the rewrite (which is, reasonably enough, a null action), nor do they give a convincing story of their own (generally speaking the result of the rewrite is undefined). The aim of this chapter is to describe how these deficiencies may be overcome by using a different approach to the categorical semantics of rewriting. Instead of pushouts, we use a Grothendieck opfibration. Now Grothendieck opfibrations have strong universal properties, too strong to be applicable to all DACTL rewrites. Accordingly, a less universal construction describes the full operational core of DACTL rewriting. It turns out that the circular I example sits in between these two extremes. In outline, the rest of the chapter is as follows. Section 7.2 describes the free rewriting core of the original DACTL model. Section 7.3 describes the categorical construc 
Abstract-found: 1
Intro-found: 0
Reference: [Ban91] <author> R. </author> <title> Banach. DACTL rewriting is categorical. Proc. SemaGraph-91 Vol. II, </title> <type> Nijmegen Tech. Rep. 91-25, </type> <institution> Dept. of Informatics, University of Nijmegen, </institution> <year> 1991. </year>
Reference-contexts: Powerful universality properties that extend the universality properties that hold for pushouts pertain to this situation. We will not stop to describe them. For a little more discussion of these issues, see the preliminary version of this chapter in <ref> [Ban91] </ref>, or the full version in [Ban93]. For a reasonably accessible description of the Grothendieck construction in its abstract form see [BW90]. 7.4 TRUE DACTL REWRITING In section 7.3 we developed a categorical formulation for a sublanguage of DACTL.
Reference: [Ban93] <author> R. </author> <title> Banach. Term graph rewriting and garbage collection using opfibrations. </title> <institution> Theor. Comput. Sci., </institution> <note> to appear. </note>
Reference-contexts: Powerful universality properties that extend the universality properties that hold for pushouts pertain to this situation. We will not stop to describe them. For a little more discussion of these issues, see the preliminary version of this chapter in [Ban91], or the full version in <ref> [Ban93] </ref>. For a reasonably accessible description of the Grothendieck construction in its abstract form see [BW90]. 7.4 TRUE DACTL REWRITING In section 7.3 we developed a categorical formulation for a sublanguage of DACTL.
Reference: [BvEG + 87] <author> H.P. Barendregt, M.C.J.D. van Eekelen, J.R.W. Glauert, J.R Kennaway, M.J. </author> <title> Plasmeijer and M.R. Sleep. Term graph rewriting. </title> <booktitle> Proc. </booktitle> <volume> PARLE-87 Vol. II, LNCS 259, </volume> <pages> pp. 141-158, </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Partial success in this area has been obtained by describing graph rewrites as certain kinds of pushout. See [Ken87, HP88, HKP88, Ken91]. Nevertheless, none of these constructions successfully describe the whole of the operational models of <ref> [BvEG + 87] </ref> where term graph rewriting was introduced, or of its generalization in the language DACTL itself [GKSS88, GHK + 88, GKS91, Ken90].
Reference: [BW90] <author> M. Barr, C. Wells. </author> <title> Category Theory for Computing Science. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: We will not stop to describe them. For a little more discussion of these issues, see the preliminary version of this chapter in [Ban91], or the full version in [Ban93]. For a reasonably accessible description of the Grothendieck construction in its abstract form see <ref> [BW90] </ref>. 7.4 TRUE DACTL REWRITING In section 7.3 we developed a categorical formulation for a sublanguage of DACTL. Readers may legitimately wonder to what extent the full DACTL language shares the properties of DACTL P .
Reference: [GKSS88] <author> J.R.W. Glauert, J.R. Kennaway, </author> <title> M.R. Sleep, G.W. Somner. Final Specification of DACTL. </title> <type> Internal Report SYS-C88-11, </type> <institution> School of Information Systems, University of East Anglia, Norwich, UK. </institution>
Reference-contexts: See [Ken87, HP88, HKP88, Ken91]. Nevertheless, none of these constructions successfully describe the whole of the operational models of [BvEG + 87] where term graph rewriting was introduced, or of its generalization in the language DACTL itself <ref> [GKSS88, GHK + 88, GKS91, Ken90] </ref>. The main stumbling blocks for all of these attempts have been examples such as the I combinator root:I [a] ) a when applied to a circular instance of itself x:I [x].
Reference: [GHK + 88] <author> J.R.W. Glauert, K. Hammond, J.R. Kennaway, G.A. Papdopoulos, </author> <title> M.R. Sleep. DACTL: Some Introductory Papers. </title> <institution> School of Information Systems, University of East Anglia, Norwich, UK. </institution>
Reference-contexts: See [Ken87, HP88, HKP88, Ken91]. Nevertheless, none of these constructions successfully describe the whole of the operational models of [BvEG + 87] where term graph rewriting was introduced, or of its generalization in the language DACTL itself <ref> [GKSS88, GHK + 88, GKS91, Ken90] </ref>. The main stumbling blocks for all of these attempts have been examples such as the I combinator root:I [a] ) a when applied to a circular instance of itself x:I [x].
Reference: [GKS91] <author> J.R.W. Glauert, J.R. Kennaway, </author> <title> M.R. Sleep. DACTL: An experimental graph rewriting language. Graph Grammars and their Application to Computer Science, </title> <publisher> LNCS 532, </publisher> <pages> pp. 378-395, </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: See [Ken87, HP88, HKP88, Ken91]. Nevertheless, none of these constructions successfully describe the whole of the operational models of [BvEG + 87] where term graph rewriting was introduced, or of its generalization in the language DACTL itself <ref> [GKSS88, GHK + 88, GKS91, Ken90] </ref>. The main stumbling blocks for all of these attempts have been examples such as the I combinator root:I [a] ) a when applied to a circular instance of itself x:I [x].
Reference: [HKP88] <author> A. Habel, H-J. Kreowski, D. Plump. </author> <title> Jungle evaluation. </title> <booktitle> Proc. Fifth Workshop on Specification of Abstract Data Types, </booktitle> <volume> LNCS 332, </volume> <pages> pp. 92-112, </pages> <publisher> Springer-Verlag, </publisher> <year> 1988, </year> <note> also Fund. </note> <institution> Inf. </institution> <month> 15, </month> <pages> pp. 37-60, </pages> <year> 1991. </year>
Reference-contexts: 7.1 INTRODUCTION In this chapter, we re-examine the problem of providing a categorical semantics for the core of the general term graph rewriting language DACTL. Partial success in this area has been obtained by describing graph rewrites as certain kinds of pushout. See <ref> [Ken87, HP88, HKP88, Ken91] </ref>. Nevertheless, none of these constructions successfully describe the whole of the operational models of [BvEG + 87] where term graph rewriting was introduced, or of its generalization in the language DACTL itself [GKSS88, GHK + 88, GKS91, Ken90].
Reference: [HP88] <author> B. Hoffmann, D. Plump. </author> <title> Jungle evalulation for efficient term rewriting. </title> <booktitle> Proc. International Workshop on Algebraic and Logic Programming, Mathematical Research 49, </booktitle> <publisher> Akademie-Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference-contexts: 7.1 INTRODUCTION In this chapter, we re-examine the problem of providing a categorical semantics for the core of the general term graph rewriting language DACTL. Partial success in this area has been obtained by describing graph rewrites as certain kinds of pushout. See <ref> [Ken87, HP88, HKP88, Ken91] </ref>. Nevertheless, none of these constructions successfully describe the whole of the operational models of [BvEG + 87] where term graph rewriting was introduced, or of its generalization in the language DACTL itself [GKSS88, GHK + 88, GKS91, Ken90].
Reference: [Ken87] <author> J.R. Kennaway. </author> <title> On "on graph rewritings". </title> <journal> Theor. Comput. Sci. </journal> <volume> 52, </volume> <pages> pp. 37-58. </pages>
Reference-contexts: 7.1 INTRODUCTION In this chapter, we re-examine the problem of providing a categorical semantics for the core of the general term graph rewriting language DACTL. Partial success in this area has been obtained by describing graph rewrites as certain kinds of pushout. See <ref> [Ken87, HP88, HKP88, Ken91] </ref>. Nevertheless, none of these constructions successfully describe the whole of the operational models of [BvEG + 87] where term graph rewriting was introduced, or of its generalization in the language DACTL itself [GKSS88, GHK + 88, GKS91, Ken90].
Reference: [Ken90] <author> J.R. Kennaway. </author> <title> Implementing term rewrite languages in DACTL. </title> <journal> Theor. Com-put. Sci. </journal> <volume> 72, </volume> <pages> pp. 225-250. </pages>
Reference-contexts: See [Ken87, HP88, HKP88, Ken91]. Nevertheless, none of these constructions successfully describe the whole of the operational models of [BvEG + 87] where term graph rewriting was introduced, or of its generalization in the language DACTL itself <ref> [GKSS88, GHK + 88, GKS91, Ken90] </ref>. The main stumbling blocks for all of these attempts have been examples such as the I combinator root:I [a] ) a when applied to a circular instance of itself x:I [x].
Reference: [Ken91] <author> J.R. Kennaway. </author> <title> Graph rewriting in some categories of partial morphisms. Graph Grammars and their Application to Computer Science, </title> <publisher> LNCS 532, </publisher> <pages> pp. 490-504, </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: 7.1 INTRODUCTION In this chapter, we re-examine the problem of providing a categorical semantics for the core of the general term graph rewriting language DACTL. Partial success in this area has been obtained by describing graph rewrites as certain kinds of pushout. See <ref> [Ken87, HP88, HKP88, Ken91] </ref>. Nevertheless, none of these constructions successfully describe the whole of the operational models of [BvEG + 87] where term graph rewriting was introduced, or of its generalization in the language DACTL itself [GKSS88, GHK + 88, GKS91, Ken90].
References-found: 12

