URL: http://www.cs.purdue.edu/homes/yau/cs690y/mobile.ps
Refering-URL: http://www.cs.purdue.edu/homes/yau/cs690y/
Root-URL: http://www.cs.purdue.edu
Title: Network-aware Mobile Programs  
Author: M.Ranganathan, Anurag Acharya, Shamik D. Sharma and Joel Saltz 
Address: College Park, MD 20740  
Affiliation: Department of Computer Science University of Maryland  
Abstract: In this paper, we investigate network-aware mobile programs, programs that can use mobility as a tool to adapt to variations in network characteristics. We present infras-tructural support for mobility and network monitoring and show how adaptalk, a Java-based mobile Internet chat application, can take advantage of this support to dynamically place the chat server so as to minimize response time. Our conclusion was that on-line network monitoring and adaptive placement of shared data-structures can significantly improve performance of distributed applications on the Internet. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Athan and D. Duchamp. </author> <title> Agent-mediated Message Passing for Constrained Environments. </title> <booktitle> In Proceedings of the USENIX Mobile and Location-independent Computing Symposium, </booktitle> <pages> pages 103-7, </pages> <month> Aug </month> <year> 1993. </year>
Reference-contexts: The Odyssey project on mobile information access plans to provide support for application-specific resource monitoring and adaptation. The primary adaptation mechanism under consideration is change in data fidelity [20]. Athan and Duchamp <ref> [1] </ref> propose the use of remote execution for reducing the communication between a mobile machine and the static network. In all these systems, location of the various computation modules is fixed; adaptation is achieved by changing the way in which the network is used.
Reference: [2] <author> K. Bharat and L. Cardelli. </author> <title> Migratory Applications. </title> <booktitle> In Proceedings of the Eighth ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 133-42, </pages> <month> Nov </month> <year> 1995. </year>
Reference-contexts: Remote execution has also been proposed for efficient execution of computation that requires multiple remote accesses [6, 8, 22] and for efficient execution of graphical user interfaces which need to interact closely with the client <ref> [2] </ref>. Both these application scenarios use remote execution as a way to avoid using the network. Most proposed uses of Java [10] also use remote execution to avoid repeated client-server interaction. In these applications, decisions about the placement of computation are hardcoded.
Reference: [3] <author> L. Cardelli. </author> <title> A Language with Distributed Scope. </title> <booktitle> In Proceedings of the 22 nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1995. </year>
Reference-contexts: Our design philosophy for Sumatra was to provide the mechanisms to build adaptive mobile programs. Policy decisions concerning when, where and what to move are left to the application. The main feature that distinguishes Sumatra from previous systems <ref> [3, 11, 13, 23] </ref> that support mobile programs is that all communication and migration happens under application control. Furthermore, combination of distributed objects and thread migration allows applications the flexibility to dynamically choose between moving data or moving computation. <p> In all these systems, location of the various computation modules is fixed; adaptation is achieved by changing the way in which the network is used. Several systems have been built which permit an executing program to move while it is in execution for example Obliq <ref> [3] </ref>, Agent TCL [11], Emerald [13], Telescript [23] and TACOMA [12].The primary distinction between these systems and Sumatra is that in Sumatra, all communication and migration happens under application control.
Reference: [4] <author> R. Carter and M. Crovella. </author> <title> Dynamic Server Selection using Bandwidth Probing in Wide-Area networks. </title> <type> Technical Report BU-CS-96-007, </type> <institution> Boston University, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: This is consistent with our observations that in a time window of reasonable size, the mode value usually dominates and that the mode value changes slowly. Golding [9] and Carter and Crovella <ref> [4] </ref> have studied mechanisms to estimate end-to-end Internet bandwidth. Golding's results indicate that attempts to predict bandwidth using previous observations alone is unlikely to work well. Carter and Crovella propose the use of round trip times for short packets to estimate network congestion.
Reference: [5] <author> J. Casas, D. Clark, R. Konuru, S. Otto, and R. Prouty. MPVM: </author> <title> A Migration Transparent Version of PVM. </title> <journal> Computing Systems, </journal> <volume> 8(2) </volume> <pages> 171-216, </pages> <month> Spring </month> <year> 1995. </year>
Reference-contexts: The advantage of mobility-based strategies is that it allows small groups of users to rapidly set up private communities on-demand without requiring extensive server placement. 7 Related work Process migration and remote execution have been proposed, and have been successfully used, as mechanisms for adapting to changes in host availability <ref> [5, 7, 15, 21, 24] </ref>. Remote execution has also been proposed for efficient execution of computation that requires multiple remote accesses [6, 8, 22] and for efficient execution of graphical user interfaces which need to interact closely with the client [2].
Reference: [6] <author> S. Clamen, L. Leibengood, S. Nettles, and J. Wing. </author> <title> Reliable Distributed Computing with Avalon/Common Lisp. </title> <booktitle> In Proceedings of the International Conference on Computer Languages, </booktitle> <pages> pages 169-79, </pages> <year> 1990. </year>
Reference-contexts: Remote execution has also been proposed for efficient execution of computation that requires multiple remote accesses <ref> [6, 8, 22] </ref> and for efficient execution of graphical user interfaces which need to interact closely with the client [2]. Both these application scenarios use remote execution as a way to avoid using the network. Most proposed uses of Java [10] also use remote execution to avoid repeated client-server interaction.
Reference: [7] <author> F. Douglis and J. Ousterhout. </author> <title> Transparent Process Migration: Design Alternatives and the Sprite Implementation. </title> <journal> Software Practice and Experience, </journal> <volume> 21(8) </volume> <pages> 757-85, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: The advantage of mobility-based strategies is that it allows small groups of users to rapidly set up private communities on-demand without requiring extensive server placement. 7 Related work Process migration and remote execution have been proposed, and have been successfully used, as mechanisms for adapting to changes in host availability <ref> [5, 7, 15, 21, 24] </ref>. Remote execution has also been proposed for efficient execution of computation that requires multiple remote accesses [6, 8, 22] and for efficient execution of graphical user interfaces which need to interact closely with the client [2].
Reference: [8] <author> J. Falcone. </author> <title> A Programmable Interface Language for Heterogeneous Systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(4) </volume> <pages> 330-51, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Remote execution has also been proposed for efficient execution of computation that requires multiple remote accesses <ref> [6, 8, 22] </ref> and for efficient execution of graphical user interfaces which need to interact closely with the client [2]. Both these application scenarios use remote execution as a way to avoid using the network. Most proposed uses of Java [10] also use remote execution to avoid repeated client-server interaction.
Reference: [9] <author> R. Golding. </author> <title> End-to-end performance prediction for the Internet (Work In Progress). </title> <type> Technical Report UCSC-CRL-92-26, </type> <institution> University of California at Santa Cruz, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: Their observations show that while round trip times show significant variability with sharp peaks, there exist dominant low frequency components. This is consistent with our observations that in a time window of reasonable size, the mode value usually dominates and that the mode value changes slowly. Golding <ref> [9] </ref> and Carter and Crovella [4] have studied mechanisms to estimate end-to-end Internet bandwidth. Golding's results indicate that attempts to predict bandwidth using previous observations alone is unlikely to work well. Carter and Crovella propose the use of round trip times for short packets to estimate network congestion.
Reference: [10] <author> J. Gosling and H. McGilton. </author> <title> The Java Language Environment White Paper, </title> <year> 1995. </year>
Reference-contexts: We investigate these issues in the context of Sumatra, an extension of the Java 1 programming environment <ref> [10] </ref> 1 Java is a registered trademark of Sun Microsystems. that provides a flexible substrate for adaptive mobile pro-grams. Since mobile programs are scarce, we developed a mobile chat server for our experiments. <p> Both these application scenarios use remote execution as a way to avoid using the network. Most proposed uses of Java <ref> [10] </ref> also use remote execution to avoid repeated client-server interaction. In these applications, decisions about the placement of computation are hardcoded.
Reference: [11] <author> R. Gray. </author> <title> Agent TCL: A Flexible and Secure Mobile-agent System. </title> <booktitle> In Proceedings of the Fourth Annual Tcl/Tk Workshop (TCL 96), </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: Our design philosophy for Sumatra was to provide the mechanisms to build adaptive mobile programs. Policy decisions concerning when, where and what to move are left to the application. The main feature that distinguishes Sumatra from previous systems <ref> [3, 11, 13, 23] </ref> that support mobile programs is that all communication and migration happens under application control. Furthermore, combination of distributed objects and thread migration allows applications the flexibility to dynamically choose between moving data or moving computation. <p> In all these systems, location of the various computation modules is fixed; adaptation is achieved by changing the way in which the network is used. Several systems have been built which permit an executing program to move while it is in execution for example Obliq [3], Agent TCL <ref> [11] </ref>, Emerald [13], Telescript [23] and TACOMA [12].The primary distinction between these systems and Sumatra is that in Sumatra, all communication and migration happens under application control. Complete application control allows us to easily explore different policy alternatives for resource monitoring and for adapting to variations in resources.
Reference: [12] <author> D. Johansen, R. van Renesse, and F. Schneider. </author> <title> An Introduction to the TACOMA Distributed System Version 1.0. </title> <type> Technical Report 95-23, </type> <institution> University of Tromso, </institution> <year> 1995. </year>
Reference: [13] <author> E. Jul, H. Levy, N. Hutchinson, and A. Black. </author> <title> Fine-Grained Mobility in the Emerald System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(2) </volume> <pages> 109-33, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Our design philosophy for Sumatra was to provide the mechanisms to build adaptive mobile programs. Policy decisions concerning when, where and what to move are left to the application. The main feature that distinguishes Sumatra from previous systems <ref> [3, 11, 13, 23] </ref> that support mobile programs is that all communication and migration happens under application control. Furthermore, combination of distributed objects and thread migration allows applications the flexibility to dynamically choose between moving data or moving computation. <p> Several systems have been built which permit an executing program to move while it is in execution for example Obliq [3], Agent TCL [11], Emerald <ref> [13] </ref>, Telescript [23] and TACOMA [12].The primary distinction between these systems and Sumatra is that in Sumatra, all communication and migration happens under application control. Complete application control allows us to easily explore different policy alternatives for resource monitoring and for adapting to variations in resources.
Reference: [14] <author> R. Katz. </author> <title> The Case for Wireless Overlay Networks. </title> <booktitle> Invited talk at the ACM Federated Computer Science Research Conferences, </booktitle> <address> Philadelphia, </address> <year> 1996. </year>
Reference-contexts: We are currently investigating methods to cheaply estimate Internet bandwidth. In this paper, we have considered Internet hosts that are static. If the platform is mobile and is able to switch between multiple wireless networks <ref> [14] </ref>, the temporal variation in latency could be greater and more abrupt. In these cases, adapting to short-term temporal variations could provide a significant benefit even for latency-sensitive applications. System stability is a potential concern for programs whose components are mobile.
Reference: [15] <author> M. Litzkow and M. Livny. </author> <title> Experiences with the Condor Distributed Batch System. </title> <booktitle> In Proceedings of the IEEE Workshop on Experimental Distributed Systems, </booktitle> <address> Huntsville, Al., </address> <year> 1990. </year>
Reference-contexts: The advantage of mobility-based strategies is that it allows small groups of users to rapidly set up private communities on-demand without requiring extensive server placement. 7 Related work Process migration and remote execution have been proposed, and have been successfully used, as mechanisms for adapting to changes in host availability <ref> [5, 7, 15, 21, 24] </ref>. Remote execution has also been proposed for efficient execution of computation that requires multiple remote accesses [6, 8, 22] and for efficient execution of graphical user interfaces which need to interact closely with the client [2].
Reference: [16] <author> A. Mukherjee. </author> <title> On the dynamics and significance of low frequency components of Internet load. </title> <journal> Internet-working: Research and Experience, </journal> <volume> 5(4) </volume> <pages> 163-205, </pages> <month> Dec </month> <year> 1994. </year>
Reference-contexts: Complete application control allows us to easily explore different policy alternatives for resource monitoring and for adapting to variations in resources. Several studies have been performed to determine end-to-end Internet performance. Sanghi et al [19] and Mukher-jee <ref> [16] </ref> have studied network latency. Their observations show that while round trip times show significant variability with sharp peaks, there exist dominant low frequency components.
Reference: [17] <author> L. Mummert, M. Ebling, and M. Satyanarayanan. </author> <title> Exploiting Weak Connectivity for Mobile File Access. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating System Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Network-awareness is particularly important to applications running on mobile platforms which can see rapid changes in network quality. Various forms of network-awareness have been proposed for such applications. Application-transparent or system-level adaptation to variations in network bandwidth has been successfully used by the designers of the Coda file system <ref> [17] </ref> to improve the performance of applications. The Odyssey project on mobile information access plans to provide support for application-specific resource monitoring and adaptation. The primary adaptation mechanism under consideration is change in data fidelity [20].
Reference: [18] <author> M. Ranganathan, A. Acharya, and J. Saltz. </author> <title> Distributed Resource Monitors for Mobile Objects. </title> <booktitle> In Proceedings of the Fifth International Workshop on Operating System Support for Object Oriented Systems, </booktitle> <pages> pages 19-23, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: At these resolutions, we believe that active monitoring can be achieved at an acceptable cost. This section briefly describes the design and implementation of Komodo. Further details about Komodo are presented in <ref> [18] </ref>. Komodo allows applications to initiate monitoring of network latency between any pair of hosts running the monitor; the application need not be resident on either of the hosts. Komodo is implemented as a user-level daemon that runs on every host participating in the computation.
Reference: [19] <author> D. Sanghi, A.K. Agrawala, O. Gudmundsson, and B.N. Jain. </author> <title> Experimental Assessment of End-to End Behavior on Internet. </title> <type> Technical Report CS-TR-2909, </type> <institution> University of Maryland, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: Complete application control allows us to easily explore different policy alternatives for resource monitoring and for adapting to variations in resources. Several studies have been performed to determine end-to-end Internet performance. Sanghi et al <ref> [19] </ref> and Mukher-jee [16] have studied network latency. Their observations show that while round trip times show significant variability with sharp peaks, there exist dominant low frequency components.
Reference: [20] <author> M. Satyanarayanan, B. Noble, P. Kumar, and M. Price. </author> <title> Application-aware adaptation for mobile computing. </title> <journal> Operating Systems Review, </journal> <volume> 29(1) </volume> <pages> 52-5, </pages> <month> Jan </month> <year> 1995. </year>
Reference-contexts: The Odyssey project on mobile information access plans to provide support for application-specific resource monitoring and adaptation. The primary adaptation mechanism under consideration is change in data fidelity <ref> [20] </ref>. Athan and Duchamp [1] propose the use of remote execution for reducing the communication between a mobile machine and the static network. In all these systems, location of the various computation modules is fixed; adaptation is achieved by changing the way in which the network is used.
Reference: [21] <author> J. Smith. </author> <title> A Survey of Process Migration Mechanisms. </title> <journal> Operating Systems Review, </journal> <volume> 22(3) </volume> <pages> 28-40, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: The advantage of mobility-based strategies is that it allows small groups of users to rapidly set up private communities on-demand without requiring extensive server placement. 7 Related work Process migration and remote execution have been proposed, and have been successfully used, as mechanisms for adapting to changes in host availability <ref> [5, 7, 15, 21, 24] </ref>. Remote execution has also been proposed for efficient execution of computation that requires multiple remote accesses [6, 8, 22] and for efficient execution of graphical user interfaces which need to interact closely with the client [2].
Reference: [22] <author> J. Stamos and D. Glifford. </author> <title> Implementing Remote Evaluation. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(7) </volume> <pages> 710-22, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Remote execution has also been proposed for efficient execution of computation that requires multiple remote accesses <ref> [6, 8, 22] </ref> and for efficient execution of graphical user interfaces which need to interact closely with the client [2]. Both these application scenarios use remote execution as a way to avoid using the network. Most proposed uses of Java [10] also use remote execution to avoid repeated client-server interaction.
Reference: [23] <author> J. White. </author> <title> Telescript Technology: Mobile Agents. </title> <address> http://www.genmagic.com/Telescript/Whitepapers. </address>
Reference-contexts: Our design philosophy for Sumatra was to provide the mechanisms to build adaptive mobile programs. Policy decisions concerning when, where and what to move are left to the application. The main feature that distinguishes Sumatra from previous systems <ref> [3, 11, 13, 23] </ref> that support mobile programs is that all communication and migration happens under application control. Furthermore, combination of distributed objects and thread migration allows applications the flexibility to dynamically choose between moving data or moving computation. <p> Several systems have been built which permit an executing program to move while it is in execution for example Obliq [3], Agent TCL [11], Emerald [13], Telescript <ref> [23] </ref> and TACOMA [12].The primary distinction between these systems and Sumatra is that in Sumatra, all communication and migration happens under application control. Complete application control allows us to easily explore different policy alternatives for resource monitoring and for adapting to variations in resources.
Reference: [24] <author> E. Zayas. </author> <title> Attacking the Process Migration Bottleneck. </title> <booktitle> In Proceedings of the Eleventh ACM Symposium on Operating System Principles, </booktitle> <pages> pages 13-24, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: The advantage of mobility-based strategies is that it allows small groups of users to rapidly set up private communities on-demand without requiring extensive server placement. 7 Related work Process migration and remote execution have been proposed, and have been successfully used, as mechanisms for adapting to changes in host availability <ref> [5, 7, 15, 21, 24] </ref>. Remote execution has also been proposed for efficient execution of computation that requires multiple remote accesses [6, 8, 22] and for efficient execution of graphical user interfaces which need to interact closely with the client [2].
References-found: 24

