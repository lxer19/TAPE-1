URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/project/able/ftp/acme-wr2rap.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/project/able/www/paper_abstracts/acme-wr2rap98.html
Root-URL: http://www.cs.cmu.edu
Title: A Case Study in Software Architecture Interchange  
Author: David Garlan Zhenyu Wang 
Keyword: software architecture, architecture description languages, architectural interchange, Acme, architecture analysis tools  
Address: Pittsburgh, PA 15213 USA  Pittsburgh, PA 15213 USA  
Affiliation: School of Computer Science Carnegie Mellon University  School of Computer Science Carnegie Mellon University  
Note: Draft, Submitted for Publication  
Email: garlan@cs.cmu.edu  zwang@cs.cmu.edu  
Phone: (412) 268-5056  (412) 268-5056  
Abstract: An important issue for the specification and design of software architectures is how to combine the analysis capabilities of multiple architectural definition languages (ADLs) and their supporting toolsets. In this paper, we describe our experience of integrating three ADLs: Wright, Rapide, and Aesop. We discovered that it is possible achieve interoperability in ADL tools for a non-trivial subset of the systems describable by these languages, even though the languages have different views about architectural structure and semantics. To carry out the integration we used the Acme architectural interchange language and its supporting tools. 
Abstract-found: 1
Intro-found: 1
Reference: [AG97] <author> Robert Allen and David Garlan. </author> <title> A formal basis for architectural connection. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <month> July </month> <year> 1997. </year>
Reference-contexts: The particular semantics usually determines what kinds of useful analyses can be carried out on systems described in that ADL. To take a few examples, Rapide [LAK + 95] provides semantics based on posets, and supports analyses based on (among other things) animation and simulation. Wright <ref> [AG97] </ref> provides semantics based on CSP, and supports static analyses of deadlock freedom, and interaction consistency. Dar-win [MDEK95] provides semantics based on the Pi Calculus, and supports description of dynamically reconfigurable distributed systems. <p> Wright Wright models system structures using the abstractions of components, connectors, ports, roles and configurations <ref> [AG97, All97] </ref>. Components represent 1 Here and elsewhere, when we refer to an ADL we will mean that ADL and its associated toolset. processing elements and connectors describe interactions between them. Each component and connector has an associated specification described using a variant of CSP.
Reference: [All97] <author> Robert Allen. </author> <title> A Formal Approach to Software Architecture. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon, School of Computer Science, </institution> <month> January </month> <year> 1997. </year> <note> Issued as CMU Technical Report CMU-CS-97-144. </note>
Reference-contexts: Wright Wright models system structures using the abstractions of components, connectors, ports, roles and configurations <ref> [AG97, All97] </ref>. Components represent 1 Here and elsewhere, when we refer to an ADL we will mean that ADL and its associated toolset. processing elements and connectors describe interactions between them. Each component and connector has an associated specification described using a variant of CSP. <p> Component interfaces are called ports, while connector interfaces are called roles. These interfaces are described by protocol specifications (also in CSP). System descriptions, called configurations are defined by attaching roles of connectors to ports of components. Wright provides a number of useful static analyses of architectural descriptions <ref> [All97] </ref>, including: * Port-component consistency: checks whether a port protocol is a valid projection of the com ponent's internal behavior. * Port-role compatibility: checks whether a port's behavior meets the requirements imposed by a connector to which it is attached. * Connector deadlock-freedom: checks whether a connector represents an interaction that
Reference: [FDR92] <editor> Failures Divergence Refinement: </editor> <title> User Manual and Tutorial. Formal Systems (Europe) Ltd., </title> <publisher> Oxford, </publisher> <address> England, 1.2fi edition, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: These checks (and others) are carried out by the Wright toolset using FDR <ref> [FDR92] </ref>, a commercial model-checker for CSP. Rapide Rapide also describes an architecture as a composition of components [LAK + 95]. Each component (called a module) has a set of interfaces that describe patterns of events that can take place.
Reference: [GAO94] <author> David Garlan, Robert Allen, and John Ockerbloom. </author> <title> Exploiting style in architectural design environments. </title> <booktitle> In Proceedings of SIGSOFT'94: The Second ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <pages> pages 179-185. </pages> <publisher> ACM Press, </publisher> <month> December </month> <year> 1994. </year>
Reference-contexts: Thus Rapide can function as a kind of architecture simulation language: sets of traces (technically, posets) can be examined for satisfaction of desirable ordering relations. Additionally, Rapide provides run-time animation capabilities with its "Raptor" tools. 2 2.1 Aesop Aesop provides a toolkit for describing and enforcing architectural styles <ref> [GAO94] </ref>. An architectural style is a set of component and connector types, together with rules for how they can be legally combined.
Reference: [GMW97] <author> David Garlan, Robert T. Monroe, and David Wile. Acme: </author> <title> An architecture description interchange language. </title> <booktitle> In Proceedings of CASCON'97, </booktitle> <pages> pages 169-183, </pages> <address> Ontario, Canada, </address> <month> November </month> <year> 1997. </year>
Reference-contexts: One proposal to help ameliorate the situation is to use a common architectural interchange language for exchanging architectural descriptions between var 1 ious ADLs. 1 Specifically, a notation called Acme, has been proposed as a candidate interchange language <ref> [GMW97] </ref>. Acme provides a simple, generic vocabulary for describing architectural structures as hierarchical graphs of components and connectors. In addition, Acme has a flexible annotation mechanism that permits each ADL to encode non-structural information (such as types, signatures, protocols, performance and reliability estimates, etc.). <p> Acme As noted earlier, Acme provides a simple structural framework for representing architectures, together with a liberal annotation mechanism <ref> [GMW97] </ref>. Acme does not impose any semantic interpretation of an architectural description, but simply provides a syntactic structure on which to hang semantic descriptions, which can then be interpreted by tools. The Acme language is a simple textual notation, designed for ease of tool manipulation.
Reference: [LAK + 95] <author> David C Luckham, Lary M. Augustin, John J. Kenney, James Veera, Doug Bryan, and Walter Mann. </author> <title> Specification and analysis of system architecture using Rapide. </title> <journal> IEEE Transactions on Software Engineering, Special Issue on Software Architecture, </journal> <volume> 21(4) </volume> <pages> 336-355, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Typically, each of these ADLs supports the description of architectural structure together with some form of associated semantics. The particular semantics usually determines what kinds of useful analyses can be carried out on systems described in that ADL. To take a few examples, Rapide <ref> [LAK + 95] </ref> provides semantics based on posets, and supports analyses based on (among other things) animation and simulation. Wright [AG97] provides semantics based on CSP, and supports static analyses of deadlock freedom, and interaction consistency. <p> These checks (and others) are carried out by the Wright toolset using FDR [FDR92], a commercial model-checker for CSP. Rapide Rapide also describes an architecture as a composition of components <ref> [LAK + 95] </ref>. Each component (called a module) has a set of interfaces that describe patterns of events that can take place. Component behavior is specified in terms of the way outgoing events are produced in response to incoming events.
Reference: [MDEK95] <author> J. Magee, N. Dulay, S. Eisenbach, and J. Kramer. </author> <title> Specifying distributed software architectures. </title> <booktitle> In Proceedings of the Fifth European Software Engineering Conference, </booktitle> <address> ESEC'95, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: To take a few examples, Rapide [LAK + 95] provides semantics based on posets, and supports analyses based on (among other things) animation and simulation. Wright [AG97] provides semantics based on CSP, and supports static analyses of deadlock freedom, and interaction consistency. Dar-win <ref> [MDEK95] </ref> provides semantics based on the Pi Calculus, and supports description of dynamically reconfigurable distributed systems. For any particular system, it may be that the desired analyses are completely covered by those supported by a single ADL. However, in general it is useful to exploit capabilities of multiple ADLs.

References-found: 7

