URL: http://www.csl.sri.com/~lincoln/lmss90.ps.Z
Refering-URL: http://www.csl.sri.com/~lincoln/lincoln-papers.html
Root-URL: 
Phone: 2  3  
Title: Decision Problems for Propositional Linear Logic  
Author: Patrick Lincoln ; John Mitchell Andre Scedrov Natarajan Shankar 
Address: Stanford, CA 94305  Philadelphia, PA 19104  Menlo Park, CA 94025  
Affiliation: 1 Department of Computer Science, Stanford University,  Department of Mathematics, University of Pennsylvania,  Computer Science Laboratory, SRI International,  
Date: September 13, 1994  
Abstract-found: 0
Intro-found: 1
Reference: [AFG90] <author> A. Asperti, G.-L. Ferrari, and R. Gorrieri. </author> <title> Implicative formulae in the `proofs as computations' analogy. </title> <booktitle> In Proc. 17-th ACM Symp. on Principles of Programming Languages, </booktitle> <address> San Francisco, </address> <pages> pages 59-71, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Introduction 5 [Laf88]. Further studies have demonstrated connections with Petri nets <ref> [Asp87, GG89, MOM89, AFG90, GG90] </ref> and other models of concurrency [Laf90, AV90].
Reference: [AP90] <author> J.-M. Andreoli and R. Pareschi. </author> <title> Linear objects: Logical processes with built-in inheritance. </title> <booktitle> In Proc. 7-th International Conference on Logic Programming, </booktitle> <address> Jerusalem, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: Other applications include optimization of copying in lazy functional programming language implementation [GH90] and analyzing the control structure of logic programs <ref> [Cer90, AP90] </ref>. A natural characterization of polynomial time computations can be given in a bounded version of linear logic [GSS90] obtained by limiting reuse to specified bounds, i.e., by bounding the number of references to each datum in memory. Informal introductions to linear logic may be found in [Gir90, Sce90].
Reference: [Asp87] <author> A. Asperti. </author> <title> A logic for concurrency. </title> <type> Technical report, </type> <institution> Dipartimento di Informatica, Universita di Pisa, </institution> <year> 1987. </year>
Reference-contexts: Introduction 5 [Laf88]. Further studies have demonstrated connections with Petri nets <ref> [Asp87, GG89, MOM89, AFG90, GG90] </ref> and other models of concurrency [Laf90, AV90].
Reference: [AV90] <author> S. Abramsky and S. Vickers. Quantales, </author> <title> observational logic, and process semantics. </title> <type> Preprint, </type> <month> January </month> <year> 1990. </year>
Reference-contexts: Introduction 5 [Laf88]. Further studies have demonstrated connections with Petri nets [Asp87, GG89, MOM89, AFG90, GG90] and other models of concurrency <ref> [Laf90, AV90] </ref>. With regard to concurrency, there is a similarity between proof nets, the inherent model of computation associated with cut-elimination in multiplicative linear logic (cf [Gir87a, Gir87b, DR89, Laf90]), and connection graphs, which were designed to model connection machine computation [Baw86].
Reference: [Avr88] <author> A. Avron. </author> <title> The semantics and proof theory of linear logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 57 </volume> <pages> 161-184, </pages> <year> 1988. </year>
Reference-contexts: Like linear logic, relevance logic lacks weakening. However, relevance logic does have unrestricted contraction. In addition, relevance logic has a distributivity axiom, absent from linear logic. Without the dis-tributivity axiom, relevance logic becomes decidable [Mey66]. The system with dis-tributivity also lacks cut-free Gentzen-type formulation. See, for example, <ref> [Avr88] </ref>. Thus both the motivation and technical properties of linear logic are significantly different from relevance logic.
Reference: [Baw86] <author> A. Bawden. </author> <title> Connection graphs. </title> <booktitle> In Proc. ACM Symp. on Lisp and Functional Programming, </booktitle> <pages> pages 258-265, </pages> <year> 1986. </year>
Reference-contexts: With regard to concurrency, there is a similarity between proof nets, the inherent model of computation associated with cut-elimination in multiplicative linear logic (cf [Gir87a, Gir87b, DR89, Laf90]), and connection graphs, which were designed to model connection machine computation <ref> [Baw86] </ref>. Other applications include optimization of copying in lazy functional programming language implementation [GH90] and analyzing the control structure of logic programs [Cer90, AP90].
Reference: [Bel90] <author> G. Bellin. </author> <title> Mechanizing Proof Theory: Resource-Aware Logics and Proof-Transformations to Extract Implicit Information. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1990. </year>
Reference-contexts: The proof rules of mall are all of the rules in the Appendix B that are associated with these connectives and constants. This logic has been studied 7 8 Decision Problems for Propositional Linear Logic by Girard [Gir87a] and Bellin <ref> [Bel90] </ref>. While provability for the classical propositional logic is co-NP-complete, we show below that provability for mall is pspace-complete. An important property of the sequent calculus formulation of mall is cut-elimination. This property follows from the Theorem A.3 of Appendix A. <p> We will call this direct 58 The Multiplicative Fragment 59 logic or dl, as it is similar to the direct logic of [KW84]. dl is also considered in considerable detail in Bellin <ref> [Bel90] </ref>. The rules for this system are the identity and cut rules, the rules for the multiplicatives, constants, and the structural rule W of unrestricted weakening. W ` A; We first demonstrate cut-elimination for dl, yielding consistency, which will facilitate our later proof of NP-completeness. <p> Since deg (u; E) is the number of occurrences of x u in *(E), the sequent ` ; *(E) is provable by Lemma 5.6. Lemma 5.8 states some straightforward properties about weakening, and is given below without proof (see <ref> [Bel90] </ref>, page 138). A formula occurrence is said to be weakened in a proof if it is the principal formula of an application of the weakening rule.
Reference: [Cer90] <author> S. Cerrito. </author> <title> A linear semantics for allowed logic programs. </title> <booktitle> In Proc. 5th IEEE Symp. on Logic in Computer Science, </booktitle> <address> Philadelphia, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: Other applications include optimization of copying in lazy functional programming language implementation [GH90] and analyzing the control structure of logic programs <ref> [Cer90, AP90] </ref>. A natural characterization of polynomial time computations can be given in a bounded version of linear logic [GSS90] obtained by limiting reuse to specified bounds, i.e., by bounding the number of references to each datum in memory. Informal introductions to linear logic may be found in [Gir90, Sce90].
Reference: [CKS81] <author> A.K. Chandra, D. C. Kozen, and L. J. Stockmeyer. </author> <title> Alternation. </title> <journal> Journal of the ACM, </journal> <volume> 28(1) </volume> <pages> 114-133, </pages> <year> 1981. </year>
Reference-contexts: Our "and-branching counter machines" resemble the alternating Turing machines of <ref> [CKS81] </ref>), but lack a basic operation to test for zero. The basic transitions of these machines may be axiomatized using the multiplicative and additive connectives, while the ! operator is needed to allow an instruction to be executed an arbitrary number of times. <p> Therefore, the depth of a cut-free mall proof tree is at most linear in the length of the final sequent of the proof. An alternating Turing machine <ref> [CKS81] </ref> may guess and check a cut-free proof in linear time, using OR-branching to nondeterministically guess a reduction in the cut-free proof, and AND-branching to generate and check the proofs of both premises of a two premise rule in parallel.
Reference: [Clo86] <author> P. Clote. </author> <title> On the finite containment problem for Petri nets. </title> <journal> Theoretical Computer Science, </journal> <volume> 43 </volume> <pages> 99-105, </pages> <year> 1986. </year> <note> 66 Conclusion 67 </note>
Reference-contexts: This follows from conservativity properties established in this paper and previous work relating linear logic and Petri nets. Although reachability is decidable [May81, Kos82], the best known lower bound is expspace [Lip76, MM82]. A likely upper bound on Petri net reachability is primitive recursive in the Ackermann function <ref> [McA84, Clo86] </ref>. We do not know if multiplicative linear logic with ! is decidable. Finally, we show that provability in full propositional linear logic with additive and multiplicative connectives and modal storage operator is undecidable.
Reference: [DR89] <author> V. Danos and L. Regnier. </author> <title> The structure of multiplicatives. </title> <journal> Archive for Mathematical Logic, </journal> <volume> 28 </volume> <pages> 181-203, </pages> <year> 1989. </year>
Reference-contexts: Introduction 5 [Laf88]. Further studies have demonstrated connections with Petri nets [Asp87, GG89, MOM89, AFG90, GG90] and other models of concurrency [Laf90, AV90]. With regard to concurrency, there is a similarity between proof nets, the inherent model of computation associated with cut-elimination in multiplicative linear logic (cf <ref> [Gir87a, Gir87b, DR89, Laf90] </ref>), and connection graphs, which were designed to model connection machine computation [Baw86]. Other applications include optimization of copying in lazy functional programming language implementation [GH90] and analyzing the control structure of logic programs [Cer90, AP90].
Reference: [Gen69] <author> G. </author> <title> Gentzen. Collected Works. Edited by M.E. Szabo. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1969. </year>
Reference: [GG89] <author> C.A. Gunter and V. Gehlot. </author> <title> Nets as tensor theories. </title> <editor> In G. De Michelis, editor, </editor> <booktitle> Proc. 10-th International Conference on Application and Theory of Petri Nets, Bonn, </booktitle> <pages> pages 174-191, </pages> <year> 1989. </year>
Reference-contexts: Introduction 5 [Laf88]. Further studies have demonstrated connections with Petri nets <ref> [Asp87, GG89, MOM89, AFG90, GG90] </ref> and other models of concurrency [Laf90, AV90]. <p> The use of theories described here is an extension of earlier work on multiplicative theories <ref> [GG89, MOM89] </ref>. We define a positive literal to be one of the given propositional symbols p i . A negative literal is one of the p ? i symbols. An atomic formula is any positive or negative literal.
Reference: [GG90] <author> V. Gehlot and C.A. Gunter. </author> <title> Normal process representatives. </title> <booktitle> In Proc. 5-th IEEE Symp. on Logic in Computer Science, </booktitle> <address> Philadelphia, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: Introduction 5 [Laf88]. Further studies have demonstrated connections with Petri nets <ref> [Asp87, GG89, MOM89, AFG90, GG90] </ref> and other models of concurrency [Laf90, AV90].
Reference: [GH90] <author> J.C. Guzman and P. Hudak. </author> <title> Single-threaded polymorphic lambda calculus. </title> <booktitle> In Proc. 5-th IEEE Symp. on Logic in Computer Science, </booktitle> <address> Philadel-phia, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: Other applications include optimization of copying in lazy functional programming language implementation <ref> [GH90] </ref> and analyzing the control structure of logic programs [Cer90, AP90]. A natural characterization of polynomial time computations can be given in a bounded version of linear logic [GSS90] obtained by limiting reuse to specified bounds, i.e., by bounding the number of references to each datum in memory.
Reference: [Gir87a] <author> J.-Y. Girard. </author> <title> Linear logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 50 </volume> <pages> 1-102, </pages> <year> 1987. </year>
Reference-contexts: Introduction 5 [Laf88]. Further studies have demonstrated connections with Petri nets [Asp87, GG89, MOM89, AFG90, GG90] and other models of concurrency [Laf90, AV90]. With regard to concurrency, there is a similarity between proof nets, the inherent model of computation associated with cut-elimination in multiplicative linear logic (cf <ref> [Gir87a, Gir87b, DR89, Laf90] </ref>), and connection graphs, which were designed to model connection machine computation [Baw86]. Other applications include optimization of copying in lazy functional programming language implementation [GH90] and analyzing the control structure of logic programs [Cer90, AP90]. <p> As for the other lower bounds, the bulk of the technical work lies in establishing that the encoding is faithful, i.e., each deduction in linear logic determines some computation. Faithfulness is demonstrated using a detailed examination of cut-elimination in linear logic <ref> [Gir87a] </ref>. This yields a version of the deduction theorem for linear logic and various conservativity results of independent interest. <p> The proof rules of mall are all of the rules in the Appendix B that are associated with these connectives and constants. This logic has been studied 7 8 Decision Problems for Propositional Linear Logic by Girard <ref> [Gir87a] </ref> and Bellin [Bel90]. While provability for the classical propositional logic is co-NP-complete, we show below that provability for mall is pspace-complete. An important property of the sequent calculus formulation of mall is cut-elimination. This property follows from the Theorem A.3 of Appendix A. <p> Also, the crucial cut-standardization step used in this section relies heavily on the cut-elimination procedure for linear logic without nonlogical axioms, first sketched by Girard in <ref> [Gir87a] </ref>. We give a very explicit proof of cut-elimination for full propositional linear logic in Appendix A, which some readers may find helpful to skim before continuing.
Reference: [Gir87b] <author> J.-Y. Girard. Multiplicatives. </author> <title> Rendiconti del Seminario Matematico dell' Universita e Politecnico Torino, </title> <journal> Special Issue on Logic and Computer Science, </journal> <pages> pages 11-33, </pages> <year> 1987. </year>
Reference-contexts: Introduction 5 [Laf88]. Further studies have demonstrated connections with Petri nets [Asp87, GG89, MOM89, AFG90, GG90] and other models of concurrency [Laf90, AV90]. With regard to concurrency, there is a similarity between proof nets, the inherent model of computation associated with cut-elimination in multiplicative linear logic (cf <ref> [Gir87a, Gir87b, DR89, Laf90] </ref>), and connection graphs, which were designed to model connection machine computation [Baw86]. Other applications include optimization of copying in lazy functional programming language implementation [GH90] and analyzing the control structure of logic programs [Cer90, AP90].
Reference: [Gir89] <author> J.-Y. Girard. </author> <title> Towards a geometry of interaction. In: </title> <journal> Contemporary Math. 92, Amer. Math. Soc., </journal> <year> 1989. </year> <pages> 69-108. </pages>
Reference-contexts: In addition, we establish the undecidability of a noncommutative variant of linear logic (even without additive connectives), a system that extends the calculus in [Lam58]; see <ref> [Gir89, Yet90] </ref>. 6 Decision Problems for Propositional Linear Logic Our undecidability proof uses a direct encoding of a form of alternating counter machines. Our "and-branching counter machines" resemble the alternating Turing machines of [CKS81]), but lack a basic operation to test for zero.
Reference: [Gir90] <author> J.-Y. Girard. </author> <title> La logique lineaire. Pour La Science, </title> <journal> Edition Francaise de Scientific American, </journal> <volume> 150 </volume> <pages> 74-85, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: A natural characterization of polynomial time computations can be given in a bounded version of linear logic [GSS90] obtained by limiting reuse to specified bounds, i.e., by bounding the number of references to each datum in memory. Informal introductions to linear logic may be found in <ref> [Gir90, Sce90] </ref>. We now summarize the main results of this paper (which were sketched in [LMSS90]), beginning with the smallest fragment considered. Multiplicative linear logic contains only linear implication, negation, and the multiplicative forms of conjunction and disjunction.
Reference: [GJ79] <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Co., </publisher> <year> 1979. </year>
Reference-contexts: Unlike our other reductions, this does not require the additive connectives. Membership in np for multiplicative linear logic, with or without unrestricted weakening, is based on a polynomial bound on proof-size resulting from cut-elimination. With unrestricted weakening, we show np-completeness by reduction from the vertex cover problem <ref> [GJ79] </ref>. A logic that is superficially related to linear logic is propositional relevance logic, which is proved undecidable in [Urq84]. Like linear logic, relevance logic lacks weakening. However, relevance logic does have unrestricted contraction. In addition, relevance logic has a distributivity axiom, absent from linear logic. <p> Thus the entire proof may be guessed in polynomial time. 5.2 Direct Logic We have been unable to prove the multiplicative fragment of linear logic np-complete. We now believe that this may be difficult, due to the lack of redundancy in this problem statement <ref> [GJ79] </ref>. As part of our investigation of the need to discard arbitrary resources to achieve np-completeness, we studied propositional multiplicative linear logic with unrestricted weakening, but without contraction.
Reference: [GLT89] <author> J.-Y. Girard, Y. Lafont, and P. Taylor. </author> <title> Proofs and Types. </title> <booktitle> Cambrige Tracts in Theoretical Computer Science, </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference: [GSS90] <author> J.-Y. Girard, A. Scedrov, and P.J. Scott. </author> <title> Bounded linear logic: A modular approach to polynomial time computability. </title> <booktitle> In Proc. </booktitle> <institution> Math. Sci. Institute Workshop on Feasible Mathematics, Cornell University, </institution> <month> June, </month> <year> 1988. </year> <pages> Birkhauser, </pages> <year> 1990. </year>
Reference-contexts: Other applications include optimization of copying in lazy functional programming language implementation [GH90] and analyzing the control structure of logic programs [Cer90, AP90]. A natural characterization of polynomial time computations can be given in a bounded version of linear logic <ref> [GSS90] </ref> obtained by limiting reuse to specified bounds, i.e., by bounding the number of references to each datum in memory. Informal introductions to linear logic may be found in [Gir90, Sce90].
Reference: [HS86] <editor> J.R. Hindley and J.P. Seldin. </editor> <title> Introduction to Combinators and Lambda Calculus. London Mathematical Society Student Texts, </title> <publisher> Cambridge University Press, </publisher> <year> 1986. </year> <title> 68 Decision Problems for Propositional Linear Logic </title>
Reference: [HU79] <author> J. Hopcroft and J. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1979. </year>
Reference-contexts: ; hQ j ; A + 1; Bi; g Propositional Linear Logic is Undecidable 33 3.4.1 Two Counter Machines Standard two counter machines have a finite set of states, Q, a finite set of transitions, ffi, a distinguished initial state Q I , and a set of final states F <ref> [Min61, HU79] </ref>. An instantaneous description of the state of a two counter machine is given by a triple hQ i ; A; Bi, which consists of the current state, and the values of two counters, A and B.
Reference: [Kos82] <author> S.R. Kosaraju. </author> <title> Decidability of reachability in vector addition systems. </title> <booktitle> In Proc. 14-th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 267-281, </pages> <year> 1982. </year>
Reference-contexts: This follows from conservativity properties established in this paper and previous work relating linear logic and Petri nets. Although reachability is decidable <ref> [May81, Kos82] </ref>, the best known lower bound is expspace [Lip76, MM82]. A likely upper bound on Petri net reachability is primitive recursive in the Ackermann function [McA84, Clo86]. We do not know if multiplicative linear logic with ! is decidable. <p> This situation is analogous to that for commutative versus noncommutative semi-Thue systems, where the noncommutative version allows the encoding of a zero test leading to undecidability, whereas the commutative version is unable to simulate zero test and has been shown to be decidable <ref> [Kos82] </ref>. In fact, since ncl closely resembles semi-Thue systems, we will demonstrate undecidability of ncl by a reduction from semi-Thue systems. Although the reduction is simple, the proof of its correctness requires some elaborate machinery.
Reference: [KW84] <author> J. Ketonen and R. Weyhrauch. </author> <title> A decidable fragment of predicate calculus. </title> <journal> Theoretical Computer Science, </journal> <volume> 32, </volume> <year> 1984. </year>
Reference-contexts: As part of our investigation of the need to discard arbitrary resources to achieve np-completeness, we studied propositional multiplicative linear logic with unrestricted weakening, but without contraction. We will call this direct 58 The Multiplicative Fragment 59 logic or dl, as it is similar to the direct logic of <ref> [KW84] </ref>. dl is also considered in considerable detail in Bellin [Bel90]. The rules for this system are the identity and cut rules, the rules for the multiplicatives, constants, and the structural rule W of unrestricted weakening.
Reference: [Laf88] <author> Y. Lafont. </author> <title> The linear abstract machine. </title> <journal> Theoretical Computer Science, </journal> <volume> 59 </volume> <pages> 157-180, </pages> <year> 1988. </year>
Reference-contexts: Introduction 5 <ref> [Laf88] </ref>. Further studies have demonstrated connections with Petri nets [Asp87, GG89, MOM89, AFG90, GG90] and other models of concurrency [Laf90, AV90].
Reference: [Laf90] <author> Y. Lafont. </author> <title> Interaction nets. </title> <booktitle> In Proc. 17-th ACM Symp. on Principles of Programming Languages, </booktitle> <address> San Francisco, </address> <pages> pages 95-108, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Introduction 5 [Laf88]. Further studies have demonstrated connections with Petri nets [Asp87, GG89, MOM89, AFG90, GG90] and other models of concurrency <ref> [Laf90, AV90] </ref>. With regard to concurrency, there is a similarity between proof nets, the inherent model of computation associated with cut-elimination in multiplicative linear logic (cf [Gir87a, Gir87b, DR89, Laf90]), and connection graphs, which were designed to model connection machine computation [Baw86]. <p> Introduction 5 [Laf88]. Further studies have demonstrated connections with Petri nets [Asp87, GG89, MOM89, AFG90, GG90] and other models of concurrency [Laf90, AV90]. With regard to concurrency, there is a similarity between proof nets, the inherent model of computation associated with cut-elimination in multiplicative linear logic (cf <ref> [Gir87a, Gir87b, DR89, Laf90] </ref>), and connection graphs, which were designed to model connection machine computation [Baw86]. Other applications include optimization of copying in lazy functional programming language implementation [GH90] and analyzing the control structure of logic programs [Cer90, AP90].
Reference: [Lam58] <author> J. Lambek. </author> <title> The mathematics of sentence structure. </title> <journal> Amer. Math. Monthly, </journal> <volume> 65 </volume> <pages> 154-169, </pages> <year> 1958. </year>
Reference-contexts: In addition, we establish the undecidability of a noncommutative variant of linear logic (even without additive connectives), a system that extends the calculus in <ref> [Lam58] </ref>; see [Gir89, Yet90]. 6 Decision Problems for Propositional Linear Logic Our undecidability proof uses a direct encoding of a form of alternating counter machines. Our "and-branching counter machines" resemble the alternating Turing machines of [CKS81]), but lack a basic operation to test for zero.
Reference: [Lam61] <author> J. Lambek. </author> <title> How to program an infinite abacus. </title> <journal> Canadian Math. Bulletin, </journal> <volume> 4 </volume> <pages> 295-302, </pages> <year> 1961. </year>
Reference-contexts: Proof. Since acm's may simulate zero-test with and-branching, acm's are sufficiently powerful to simulate two counter machines, for which the halting problem is known to be recursively unsolvable <ref> [Min61, Lam61] </ref>. We will give a construction from standard two counter machines to acms, and argue that the construction is sound and faithful. This construction and the proof of its soundness is routine, and its steps should be familiar to anyone versed in automata theory.
Reference: [Lip76] <author> R. Lipton. </author> <title> The reachability problem is exponential-space hard. </title> <type> Technical Report 62, </type> <institution> Department of Computer Science, Yale University, </institution> <month> January </month> <year> 1976. </year>
Reference-contexts: This follows from conservativity properties established in this paper and previous work relating linear logic and Petri nets. Although reachability is decidable [May81, Kos82], the best known lower bound is expspace <ref> [Lip76, MM82] </ref>. A likely upper bound on Petri net reachability is primitive recursive in the Ackermann function [McA84, Clo86]. We do not know if multiplicative linear logic with ! is decidable.
Reference: [LMSS90] <author> P. Lincoln, J.C. Mitchell, A. Scedrov, and N. Shankar. </author> <title> Decision problems for propositional linear logic. </title> <booktitle> In Proc. 31st IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 662-671, </pages> <year> 1990. </year>
Reference-contexts: Informal introductions to linear logic may be found in [Gir90, Sce90]. We now summarize the main results of this paper (which were sketched in <ref> [LMSS90] </ref>), beginning with the smallest fragment considered. Multiplicative linear logic contains only linear implication, negation, and the multiplicative forms of conjunction and disjunction. Recall that these forms require the available resource to be partitioned rather than shared. We show that the decision problem for this fragment is in np.
Reference: [May81] <author> E.W. Mayr. </author> <title> An algorithm for the general Petri net reachability problem. </title> <booktitle> In Proc. 13-th ACM Symp. on Theory of Computing, Milwaukee, </booktitle> <pages> pages 238-246, </pages> <year> 1981. </year>
Reference-contexts: This follows from conservativity properties established in this paper and previous work relating linear logic and Petri nets. Although reachability is decidable <ref> [May81, Kos82] </ref>, the best known lower bound is expspace [Lip76, MM82]. A likely upper bound on Petri net reachability is primitive recursive in the Ackermann function [McA84, Clo86]. We do not know if multiplicative linear logic with ! is decidable.
Reference: [McA84] <author> K. McAloon. </author> <title> Petri nets and large sets. </title> <journal> Theoretical Computer Science, </journal> <volume> 32 </volume> <pages> 173-183, </pages> <year> 1984. </year>
Reference-contexts: This follows from conservativity properties established in this paper and previous work relating linear logic and Petri nets. Although reachability is decidable [May81, Kos82], the best known lower bound is expspace [Lip76, MM82]. A likely upper bound on Petri net reachability is primitive recursive in the Ackermann function <ref> [McA84, Clo86] </ref>. We do not know if multiplicative linear logic with ! is decidable. Finally, we show that provability in full propositional linear logic with additive and multiplicative connectives and modal storage operator is undecidable.
Reference: [Mey66] <author> R.K. Meyer. </author> <title> Topics in Modal and Many-Valued Logic. </title> <type> PhD thesis, </type> <institution> University of Pittsburgh, </institution> <year> 1966. </year>
Reference-contexts: Like linear logic, relevance logic lacks weakening. However, relevance logic does have unrestricted contraction. In addition, relevance logic has a distributivity axiom, absent from linear logic. Without the dis-tributivity axiom, relevance logic becomes decidable <ref> [Mey66] </ref>. The system with dis-tributivity also lacks cut-free Gentzen-type formulation. See, for example, [Avr88]. Thus both the motivation and technical properties of linear logic are significantly different from relevance logic.
Reference: [Min61] <author> M. Minsky. </author> <title> Recursive unsolvability of Post's problem of `tag' and other topics in the theory of Turing machines. </title> <journal> Annals of Mathematics, </journal> <volume> 74:3:437-455, </volume> <year> 1961. </year>
Reference-contexts: ; hQ j ; A + 1; Bi; g Propositional Linear Logic is Undecidable 33 3.4.1 Two Counter Machines Standard two counter machines have a finite set of states, Q, a finite set of transitions, ffi, a distinguished initial state Q I , and a set of final states F <ref> [Min61, HU79] </ref>. An instantaneous description of the state of a two counter machine is given by a triple hQ i ; A; Bi, which consists of the current state, and the values of two counters, A and B. <p> Proof. Since acm's may simulate zero-test with and-branching, acm's are sufficiently powerful to simulate two counter machines, for which the halting problem is known to be recursively unsolvable <ref> [Min61, Lam61] </ref>. We will give a construction from standard two counter machines to acms, and argue that the construction is sound and faithful. This construction and the proof of its soundness is routine, and its steps should be familiar to anyone versed in automata theory.
Reference: [MM82] <author> E. Mayr and A. Meyer. </author> <title> The complexity of the word problems for commutative semigroups and polynomial ideals. </title> <booktitle> Advances in Mathematics, </booktitle> <volume> 46 </volume> <pages> 305-329, </pages> <year> 1982. </year> <note> Conclusion 69 </note>
Reference-contexts: This follows from conservativity properties established in this paper and previous work relating linear logic and Petri nets. Although reachability is decidable [May81, Kos82], the best known lower bound is expspace <ref> [Lip76, MM82] </ref>. A likely upper bound on Petri net reachability is primitive recursive in the Ackermann function [McA84, Clo86]. We do not know if multiplicative linear logic with ! is decidable. <p> It is important that these machines have a Zero-Test instruction since the halting problem becomes decidable otherwise, by obvious reduction to the word problem in commutative semi-Thue systems, which is decidable <ref> [MM82] </ref>. Since Zero-Test is the most difficult to encode in linear logic, we concentrate on a machine with and-branching, which provides a basic mechanism powerful enough to simulate Zero-Test, but which is more easily simulated in linear logic.
Reference: [MOM89] <author> N. Mart i-Oliet and J. Meseguer. </author> <title> From Petri nets to linear logic. In: </title> <publisher> Springer LNCS 389, </publisher> <editor> ed. by D.H. Pitt et al., </editor> <year> 1989. </year> <pages> 313-340. </pages>
Reference-contexts: Introduction 5 [Laf88]. Further studies have demonstrated connections with Petri nets <ref> [Asp87, GG89, MOM89, AFG90, GG90] </ref> and other models of concurrency [Laf90, AV90]. <p> The use of theories described here is an extension of earlier work on multiplicative theories <ref> [GG89, MOM89] </ref>. We define a positive literal to be one of the given propositional symbols p i . A negative literal is one of the p ? i symbols. An atomic formula is any positive or negative literal.
Reference: [Pos47] <author> E.L. Post. </author> <title> Recursive unsolvability of a problem of Thue. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 12 </volume> <pages> 1-11, </pages> <year> 1947. </year>
Reference-contexts: This problem is known to be undecidable <ref> [Pos47] </ref>. The problem remains undecidable if we add the condition that V be a singleton (word of length one) n such that n does not occur in U or in the right hand side of any production, and only appears as a singleton on the left hand side of productions.
Reference: [Sce90] <author> A. Scedrov. </author> <title> A brief guide to linear logic. </title> <journal> Bulletin of the European Assoc. for Theoretical Computer Science, </journal> <volume> 41 </volume> <pages> 154-165, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: A natural characterization of polynomial time computations can be given in a bounded version of linear logic [GSS90] obtained by limiting reuse to specified bounds, i.e., by bounding the number of references to each datum in memory. Informal introductions to linear logic may be found in <ref> [Gir90, Sce90] </ref>. We now summarize the main results of this paper (which were sketched in [LMSS90]), beginning with the smallest fragment considered. Multiplicative linear logic contains only linear implication, negation, and the multiplicative forms of conjunction and disjunction.
Reference: [Urq84] <author> A. Urquhart. </author> <title> The undecidability of entailment and relevant implication. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 49 </volume> <pages> 1059-1073, </pages> <year> 1984. </year>
Reference-contexts: With unrestricted weakening, we show np-completeness by reduction from the vertex cover problem [GJ79]. A logic that is superficially related to linear logic is propositional relevance logic, which is proved undecidable in <ref> [Urq84] </ref>. Like linear logic, relevance logic lacks weakening. However, relevance logic does have unrestricted contraction. In addition, relevance logic has a distributivity axiom, absent from linear logic. Without the dis-tributivity axiom, relevance logic becomes decidable [Mey66]. The system with dis-tributivity also lacks cut-free Gentzen-type formulation. See, for example, [Avr88].
Reference: [Yet90] <author> D.N. Yetter. </author> <title> Quantales and (noncommutative) linear logic. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 55 </volume> <pages> 41-64, </pages> <year> 1990. </year>
Reference-contexts: In addition, we establish the undecidability of a noncommutative variant of linear logic (even without additive connectives), a system that extends the calculus in [Lam58]; see <ref> [Gir89, Yet90] </ref>. 6 Decision Problems for Propositional Linear Logic Our undecidability proof uses a direct encoding of a form of alternating counter machines. Our "and-branching counter machines" resemble the alternating Turing machines of [CKS81]), but lack a basic operation to test for zero. <p> Below we present the detailed proof of undecidability for a particular logic we will call ncl, which is actually the multiplicative and reuse fragment of a member of the noncommutative linear logic family. David Yetter <ref> [Yet90] </ref> has also studied a variant of noncommutative linear logic. In his work, he considered a system with two new modalities, k and K, which are related to ? and !.
References-found: 42

