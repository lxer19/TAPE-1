URL: ftp://ftp.cs.man.ac.uk/pub/IPG/rmg95.ps.Z
Refering-URL: http://www.cs.man.ac.uk/ipg/publications.html
Root-URL: http://www.cs.man.ac.uk
Email: email: markg@cs.man.ac.uk  
Title: Coordination Theory and Software Process Technology  
Author: R. Mark Greenwood 
Address: Manchester M13 9PL, UK  
Affiliation: Department of Computer Science University of Manchester  
Abstract: Coordination theory is an interdisciplinary approach to studying the management of dependencies among activities. By its very nature software process technology deals with coordination. However it often expresses coordination in terms of low level details. An effective coordination theory would give us a better set of coordination abstractions. We illustrate the close relationship between these fields and propose areas where they could learn from each other. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R.F. Bruynooghe, R.M. Greenwood, I. Robertson, J. Sa, R.A. Snowdon, and B.C. Warboys. PADM: </author> <title> Towards a total process modelling system. </title> <editor> In A. Finklestein, J. Kramer, and B. Nuseibeh, editors, </editor> <booktitle> Software Process Modelling and Technology, </booktitle> <pages> pages 293-334. </pages> <publisher> Research Studies Press, </publisher> <year> 1994. </year>
Reference-contexts: In [7] it is emphasised that coordination involves both the temporal and this "spatial" dimension. The "spatial" dimension is the co-locating of the entities needed to do the work and the agent or actor. In PSS <ref> [1, 2] </ref> this would be dealt with by how activities are mapped to PML roles, in Process WEAVER [3] by the work contexts. Another benefit would be a better understanding of the relationships between software process technology and other coordination disciplines.
Reference: 2. <author> R.F. Bruynooghe, J.M. Parker, and J.S. </author> <title> Rowles. PSS: A system for process enactment. </title> <booktitle> In Proceedings of the First International Conference on the Software Process, </booktitle> <pages> pages 142-158, </pages> <address> Redondo Beach, California USA, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: In [7] it is emphasised that coordination involves both the temporal and this "spatial" dimension. The "spatial" dimension is the co-locating of the entities needed to do the work and the agent or actor. In PSS <ref> [1, 2] </ref> this would be dealt with by how activities are mapped to PML roles, in Process WEAVER [3] by the work contexts. Another benefit would be a better understanding of the relationships between software process technology and other coordination disciplines.
Reference: 3. <author> C. Fernstrom. </author> <title> Process WEAVER: Adding process support to UNIX. </title> <booktitle> In Proc of the Second International Conference on the Software Process, </booktitle> <pages> pages 12-26, </pages> <address> Berlin, Germany, </address> <month> February </month> <year> 1993. </year> <institution> IEEE Computer Society Press. sponsored by Rocky Mountain Institute of Software Engineering. </institution>
Reference-contexts: The "spatial" dimension is the co-locating of the entities needed to do the work and the agent or actor. In PSS [1, 2] this would be dealt with by how activities are mapped to PML roles, in Process WEAVER <ref> [3] </ref> by the work contexts. Another benefit would be a better understanding of the relationships between software process technology and other coordination disciplines. This includes other areas of computer science such as Computer Supported Cooperative Working (CSCW) and groupware.
Reference: 4. <author> R.M. Greenwood. </author> <title> Modelling Processes with Constraints. </title> <type> PhD thesis, </type> <institution> University of Southampton, </institution> <year> 1994. </year> <note> in preparation. </note>
Reference-contexts: The simplest way of managing this is to decide that the assembly activities will wait for the completion of the respective component activities. We will formalise this coordination process using a simple process modelling language coPML <ref> [4, 5] </ref>. In coPML a process is modelled in terms of events, a state, and a set of constraints on the state. Our simple model will have 10 events, startX and finishX for each activity X, and the state will have 10 counts, #EV for each event EV .
Reference: 5. <author> R.M. Greenwood. </author> <title> Modelling processes with constraints. In B.C. </title> <editor> Warboys, editor, </editor> <booktitle> Software Process Technology: Third European Workshop, EWSPT'94, </booktitle> <pages> pages 167-170, </pages> <address> Villard de Lans, France, </address> <month> February </month> <year> 1994. </year> <note> Springer-Verlag. Lecture Notes in Computer Science 772. </note>
Reference-contexts: The simplest way of managing this is to decide that the assembly activities will wait for the completion of the respective component activities. We will formalise this coordination process using a simple process modelling language coPML <ref> [4, 5] </ref>. In coPML a process is modelled in terms of events, a state, and a set of constraints on the state. Our simple model will have 10 events, startX and finishX for each activity X, and the state will have 10 counts, #EV for each event EV .
Reference: 6. <author> C. Handy. </author> <title> Understanding Organisations. </title> <publisher> Penguin Books, </publisher> <address> fourth edition, </address> <year> 1993. </year>
Reference-contexts: Process modelling languages provide ways of expressing the coordination processes which manage these dependencies, and process enactment systems provide examples of exploiting the coordination potential of state-of-the-art technology. If SPT has much to contribute, what are the potential benefits? There is nothing so practical as a good theory. <ref> [6] </ref> We currently lack good coordination abstractions. This means that we consider coordination at a low level and prefer coordination processes on the basis that they are easier to implement rather than more appropriate.
Reference: 7. <author> A.W. Holt. Diplans: </author> <title> A new language for the study and implementation of coordination. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 6(2) </volume> <pages> 109-125, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: Shared resources (including task assignments) Producer/consumer relationships Simultaneity constraints - Task/subtask Example coordination processes range from economic markets (a process to allocate scarce resources) to the mutual exclusion techniques of computer science. A number of coordination languages have been proposed: Role Activity Diagrams [8], Diplans <ref> [7] </ref> and Role Interaction Nets [10]. These have been used to model organisational processes. In comparison with most languages applied to the software process, their focus is slightly different. Most software process modelling languages focus mainly on activities and their temporal relationships. <p> Most software process modelling languages focus mainly on activities and their temporal relationships. The coordination languages tend to emphasise the allocation of activities into roles within an organisation, and the corresponding coordination requirements which arise from this allocation. 3 An Example In <ref> [7] </ref> the "3 parts, 2 assemblies" problem is used to introduce Diplans. We will use it to give examples of the dependency types mentioned above. <p> Coordination theory could also help in the comparison of process modelling languages and enactment systems. The small example above illustrates that some dependencies arise from the allocation of activities to actors which is only weakly represented in coPML. In <ref> [7] </ref> it is emphasised that coordination involves both the temporal and this "spatial" dimension. The "spatial" dimension is the co-locating of the entities needed to do the work and the agent or actor.
Reference: 8. <author> A.W. Holt, H.R. Ramsey, and J.D. Grimes. </author> <title> Coordination system technology as the basis for a programming environment. </title> <journal> Electrical Communication, </journal> <volume> 57(4) </volume> <pages> 308-314, </pages> <year> 1983. </year>
Reference-contexts: Shared resources (including task assignments) Producer/consumer relationships Simultaneity constraints - Task/subtask Example coordination processes range from economic markets (a process to allocate scarce resources) to the mutual exclusion techniques of computer science. A number of coordination languages have been proposed: Role Activity Diagrams <ref> [8] </ref>, Diplans [7] and Role Interaction Nets [10]. These have been used to model organisational processes. In comparison with most languages applied to the software process, their focus is slightly different. Most software process modelling languages focus mainly on activities and their temporal relationships.
Reference: 9. <author> T.W. Malone and K. Crowston. </author> <title> The interdisciplinary study of coordination. </title> <journal> ACM Computing Surveys, </journal> <volume> 26(1) </volume> <pages> 87-119, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Coordination theory is the term used by Malone <ref> [9] </ref> to refer to the interdisciplinary study of coordination. It draws on a variety of different disciplines including computer science, organisation theory, management science, and economics. In these disciplines there are a variety of coordination problems and a range of solutions have been evolved to cope with them. <p> This general feel is captured in Singh's definition: "Coordination is the integration and harmonious adjustment of individual work efforts towards the accomplishment of a larger goal" [10]. In <ref> [9] </ref> Malone proposes that: Coordination is managing dependencies between activities. and one way of progressing coordination theory would be to classify different type of dependencies, and identify the coordination processes used to deal with them. The following initial list of dependency types is given [9]. <p> In <ref> [9] </ref> Malone proposes that: Coordination is managing dependencies between activities. and one way of progressing coordination theory would be to classify different type of dependencies, and identify the coordination processes used to deal with them. The following initial list of dependency types is given [9]. Shared resources (including task assignments) Producer/consumer relationships Simultaneity constraints - Task/subtask Example coordination processes range from economic markets (a process to allocate scarce resources) to the mutual exclusion techniques of computer science.
Reference: 10. <author> B. Singh. </author> <title> Interconnected roles (IR): A coordination model. </title> <type> Technical Report CT-084-92, </type> <institution> MCC, </institution> <year> 1992. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: This general feel is captured in Singh's definition: "Coordination is the integration and harmonious adjustment of individual work efforts towards the accomplishment of a larger goal" <ref> [10] </ref>. In [9] Malone proposes that: Coordination is managing dependencies between activities. and one way of progressing coordination theory would be to classify different type of dependencies, and identify the coordination processes used to deal with them. The following initial list of dependency types is given [9]. <p> A number of coordination languages have been proposed: Role Activity Diagrams [8], Diplans [7] and Role Interaction Nets <ref> [10] </ref>. These have been used to model organisational processes. In comparison with most languages applied to the software process, their focus is slightly different. Most software process modelling languages focus mainly on activities and their temporal relationships.
References-found: 10

