URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR408.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Email: fssriniva,gannong@cs.indiana.edu  
Title: Visualizing Distributed Data Structures  
Author: Suresh Srinivas, Dennis Gannon 
Address: Lindley Hall 215,  Bloomington, IN 47405.  
Affiliation: Department of Computer Science,  Indiana University,  
Abstract: A new programming style for large-scale parallel programs centered around distributed data structures has emerged. The current parallel program visualization tools were intended for the old style and do not deal with distributed data structures. We show, with several examples of visualizations and animations developed for large scale pC++ programs, that visualizing and animating distributed data structures is an important part of debugging and performance tuning for the new style parallel programs. Our approach is based on a new methodology for recording execution behavior that uses I/O abstractions and compile time source analysis and instrumentation. We also discuss a new framework for investigating the execution behavior of large-scale parallel programs and show where visualization and animation fit in 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Casavant, </author> <title> editor. </title> <journal> Journal of Parallel and distributed computing, </journal> <volume> volume 18. </volume> <month> June </month> <year> 1993. </year> <title> Special issue on tools and methods for visualization of parallel systems and computation. </title>
Reference: [2] <editor> D. Culler and et. al. </editor> <booktitle> Parallel programming in Split-C. In Proceedings of Supercomputing 93, </booktitle> <month> November </month> <year> 1993. </year> <note> Available by anonymous ftp from ftp.cs.ucb.berkeley:pub/CASTLE. </note>
Reference-contexts: A number of parallel programming languages that support this style are now available. They include pC++[7],HPF [5] and Split-C <ref> [2] </ref>. Developers of these large-scale parallel programs need tools for debugging and performance tuning. But unfortunately tools have not kept up with the changes in style. <p> We believe that animation of the inter- and intra-distributed data structure references can help identify redundant non-local references, and the interaction between distributions and references. Eliminating redundant references or changing distributions to minimize non-local references leads to improved performance (refer to <ref> [2] </ref> for a good discussion about redundant references in a distributed graph and the performance improvement attained by eliminating them). Now we give examples of intra distributed data structure references in the conjugate gradient and bitonic sort programs written in pC++.
Reference: [3] <author> D.Gannon, P.Beckman, F.Bodin, J.Gotwals, S.Narayana, S.Srinivas, and B.Winnika. Sage++: </author> <title> An object oriented toolkit for program transformations. </title> <booktitle> In Proceedings of Oonski 94, </booktitle> <month> April </month> <year> 1994. </year> <note> Available by anonymous ftp from moose.cs.indiana.edu:pub/sage/oonski94.ps. </note>
Reference-contexts: The parallel programming language should allow it's internal representation to be accessible for implementing the above requirements. For example, we have implemented the I/O abstraction and source analysis/instrumentation for pC++ using the powerful C++ library <ref> [3] </ref> which allows source analysis and transformation. 4 Visualization and animation in investigations Recorded execution behavior by itself does not provide much insight. Visualization and animation have been successfully used in the past to view the execution behavior ( [9], [13], [14], etc. ).
Reference: [4] <author> D.Gannon, S.Yang, S.Srinivas, V.Menkov, and P.Bode. </author> <title> Object-oriented methods for parallel execution of astrophysics simulations. </title> <booktitle> In Proceedings of Mardigras94, </booktitle> <month> February </month> <year> 1994. </year> <note> Available from gannon@cs.indiana.edu. </note>
Reference-contexts: The PM 6 code computes long-range gravitational forces in a galaxy or galaxy cluster system by solving the gravitational potential on a mesh. For details about the pC++ implementation refer to <ref> [4] </ref>. 5 These were generated by a tool peewee for astrophysics applications developed in the framework from Section 3.0 6 The original PM code is from the Grand Challenge Cosmology Consortium (GC 3 ) There are two distributed data structures: a one dimensional particle list collection and two dimensional mesh collection.
Reference: [5] <author> D.Loveman. </author> <title> High Performance Fortran. </title> <journal> IEEE Parallel and Distributed Technology, </journal> <volume> 1 </volume> <pages> 25-42, </pages> <year> 1993. </year> <note> Available by anonymous ftp from titan.cs.rice.edu:pub/HPFF. </note>
Reference-contexts: It is then the responsibility of the compiler to handle the message passing in sharp contrast to the old style where the user had to specify all of the message passing explicitly. A number of parallel programming languages that support this style are now available. They include pC++[7],HPF <ref> [5] </ref> and Split-C [2]. Developers of these large-scale parallel programs need tools for debugging and performance tuning. But unfortunately tools have not kept up with the changes in style.
Reference: [6] <author> C. Fineman, P. Hontalas, S. Linstgarten, and J. Yan. </author> <title> A users guide to AIMS-the Ames InstruMentation System. </title> <type> Technical report, NASA Ames Technical Report, </type> <year> 1992. </year> <title> Contact yan@ptolemy.arc.nasa.gov for details. </title>
Reference-contexts: The parallel program is then linked with these instrumented libraries instead of the regular message-passing ones. This instrumented program on execution produces a history of the inter-processor communication ( <ref> [6] </ref>, [9], [13] ). The above method is largely inadequate and cumbersome for the new style parallel programs for the following reasons: * The programmer worries about the lower level machine specific I/O which may not be uniform across architectures.
Reference: [7] <author> D. Gannon, S. X. Yang, and P. Beckman. </author> <title> User Guide for a Portable Parallel C++ Programming System, pC++. </title> <institution> Computer Science Department, Indiana University, </institution> <note> available from moose.cs.indiana.edu:/pub/sage by ftp, </note> <year> 1994. </year>
Reference: [8] <author> J. Gotwals and S. Srinivas. </author> <title> I/O abstractions for pC++. </title> <booktitle> Working notes. </booktitle>
Reference-contexts: I/O abstraction for distributed data structures is a simple and portable way of storing and retrieving whole distributed data structures. It is implemented by special syntax in the programming language or library calls to special I/O routines <ref> [8] </ref>. With I/O abstraction the programmer does not have to worry about the lower level machine specific I/O. Also the I/O abstractions can be implemented to efficiently use the parallel I/O capabilities of the parallel machine.
Reference: [9] <author> M. T. Heath and J. A. Etheridge. </author> <title> Visualizing the performance of parallel programs. </title> <journal> IEEE Software, </journal> <volume> 6(5) </volume> <pages> 29-39, </pages> <month> September </month> <year> 1991. </year> <title> 7 Accessible through the World Wide Web from http://www.cica.indiana.edu/sage/home-page.html </title>
Reference-contexts: The parallel program is then linked with these instrumented libraries instead of the regular message-passing ones. This instrumented program on execution produces a history of the inter-processor communication ( [6], <ref> [9] </ref>, [13] ). The above method is largely inadequate and cumbersome for the new style parallel programs for the following reasons: * The programmer worries about the lower level machine specific I/O which may not be uniform across architectures. <p> Visualization and animation have been successfully used in the past to view the execution behavior ( <ref> [9] </ref>, [13], [14], etc. ). The new style of writing parallel programs with distributed data structures has made the visualizations too low level and ineffective. We solve this problem by basing our visualizations and animations on distributed data structures.
Reference: [10] <author> J. K. Lee and D. Gannon. </author> <title> Object oriented parallel programming: Experiments and results. </title> <booktitle> In Proceedings of Supercomputing 91 (Albuquerque, </booktitle> <month> Nov.), </month> <pages> pages 273-282. </pages> <publisher> IEEE Computer Society and ACM, </publisher> <year> 1991. </year>
Reference-contexts: Conjugate gradient is one of the programs in the pC++ test suite. It solves the equation A fl u = f for u, given f by a conjugate gradient method. The details of the pC++ implementation are described elsewhere <ref> [10] </ref>. The main distributed data structure is the Grid collection that represents the sites in a two dimensional grid. The individual elements at each site of the Grid collection are small 2D array's. Figure 5 shows the distributed data structure references.
Reference: [11] <author> J. May and F. Berman. </author> <title> Creating views for debugging parallel programs. </title> <booktitle> In Proceedings of Scalable High-Performance Computing Conference, SHPCC94, </booktitle> <pages> pages 833-840, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: May and Berman stress the importance of extensibility and creation of new views in the context of a parallel debugger Panorama <ref> [11] </ref>. Both Tau and Panorama have Tcl as their extension language. Our extension language, described in [17, 15] is based on Scheme. 6 Conclusion New style tools have to be built for the emerging new style of parallel programming.
Reference: [12] <author> B. Mohr, D. Brown, and A. Malony. </author> <title> Tau: A portable parallel program analysis environment for pc++. </title> <type> Technical report, </type> <institution> University of Oregon, </institution> <year> 1994. </year> <note> Available as conpar94.ftp.ps from moose.cs.indiana.edu:pub/sage. </note>
Reference-contexts: The University of Oregon is developing performance analysis tools for pC++, called Tau <ref> [12] </ref>, and have similar goals of extensibility and customization that we have described in the framework. May and Berman stress the importance of extensibility and creation of new views in the context of a parallel debugger Panorama [11]. Both Tau and Panorama have Tcl as their extension language.
Reference: [13] <author> D. A. Reed and et. al. </author> <title> The Pablo performance analysis environment. </title> <type> Technical report, </type> <institution> University of Illinois at Urbana-Champaign, Department of Computer Science, </institution> <month> October </month> <year> 1992. </year> <note> Accessible from WWW as http://bugle.cs.uiuc.edu/. </note>
Reference-contexts: The parallel program is then linked with these instrumented libraries instead of the regular message-passing ones. This instrumented program on execution produces a history of the inter-processor communication ( [6], [9], <ref> [13] </ref> ). The above method is largely inadequate and cumbersome for the new style parallel programs for the following reasons: * The programmer worries about the lower level machine specific I/O which may not be uniform across architectures. <p> Visualization and animation have been successfully used in the past to view the execution behavior ( [9], <ref> [13] </ref>, [14], etc. ). The new style of writing parallel programs with distributed data structures has made the visualizations too low level and ineffective. We solve this problem by basing our visualizations and animations on distributed data structures.
Reference: [14] <author> S. R. Sarukkai and D. Gannon. </author> <title> Sieve: A performance debugging environment for parallel programs. </title> <journal> Journal of Parallel and distributed computing, </journal> <volume> 18(2) </volume> <pages> 147-168, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Visualization and animation have been successfully used in the past to view the execution behavior ( [9], [13], <ref> [14] </ref>, etc. ). The new style of writing parallel programs with distributed data structures has made the visualizations too low level and ineffective. We solve this problem by basing our visualizations and animations on distributed data structures.
Reference: [15] <author> S. Srinivas. </author> <title> Towards a framework for tools used in investigation of large-scale parallel programs. </title> <booktitle> Working notes. </booktitle>
Reference-contexts: We sketch an underlying framework for building tools with the above characteristics. The treatment is brief and the main intent here is to show where visualization and animation fits into such a framework. The details can be found in <ref> [15] </ref>. There are two aspects to the framework. A programming language, the metaprogramming language, for making tool extensible and customizable. And the support provided by parallel programming languages for tool builders. <p> May and Berman stress the importance of extensibility and creation of new views in the context of a parallel debugger Panorama [11]. Both Tau and Panorama have Tcl as their extension language. Our extension language, described in <ref> [17, 15] </ref> is based on Scheme. 6 Conclusion New style tools have to be built for the emerging new style of parallel programming. The main contribution of this paper has been to show visualization and animation of distributed data structures will be an important part of such tools.
Reference: [16] <author> S. Srinivas and D. Gannon. </author> <title> Executing object-oriented parallel programs on high performance simulators. </title> <booktitle> In Submitted to International Conference on Simulation 1995. </booktitle>
Reference-contexts: We use an execution driven simulation technique for executing the pC++ program. Details of the technique are beyond the scope of this paper but can be found in <ref> [16] </ref>. In our N-body program (the PM code), the particles in the particle list distributed data structure are sorted periodically to preserve their physical locality i.e particles that are neighbors in the sorted list are closest to the same mesh point. A parallel bitonic sort is used for the sorting.

References-found: 16

