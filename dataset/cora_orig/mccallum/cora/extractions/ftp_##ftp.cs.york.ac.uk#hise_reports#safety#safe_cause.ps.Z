URL: ftp://ftp.cs.york.ac.uk/hise_reports/safety/safe_cause.ps.Z
Refering-URL: http://www.comlab.ox.ac.uk/archive/safety.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email pete@minster.york.ac.uk, jam@minster.york.ac.uk  
Phone: FAX: +44 904 432767  
Title: New Directions In Software Safety: Causal Modelling As An Aid To Integration  
Author: Peter Fenelon and John A McDermid 
Web: Y01 5DD  
Address: Heslington, York  
Affiliation: High Integrity Systems Engineering Group, Department of Computer Science, University of York,  
Abstract: Analysis of software safety can provide us with much interesting data on potential failure modes of individual software components and of the effects of these failures on the system as a whole. In this paper we describe our approach to software safety analysis, based around integrating notations with diverse causal models, and how we believe it can be used as an aid to the design process. We introduce the Failure Propagation and Transformation Notation (FPTN) as a modelling tool which can be used throughout the software lifecycle as an aid to design and implementation of safe systems. This paper expands upon material presented at the November 1992 IEE Colloquium on Hazard Analysis. [Fenelon92] 
Abstract-found: 1
Intro-found: 1
Reference: [Burns93] <author> Burns, D J, Pitblado, </author> <title> R M A Modified HAZOP Methodology For Safety Critical System Assessment in Proceedings Of The First Safety CRitical Systems Symposium, </title> <publisher> Springer-Verlag, </publisher> <year> 1993 </year>
Reference-contexts: These failure modes may extend or replace those supplied as standard by FPTN. Although it is not yet particularly widely applied to electronic systems (its origin is in chemical process industries), some application of HAZOP to software and human factors in computing systems has been made; for example <ref> [Burns93] </ref> and [Earthy92]. We see considerable scope for integrating it into the overall FPTN world view. Each HAZOP guideword characterises a particular class of failure too much, not enough, output when none required and so on.
Reference: [Cha89] <author> Cha, S S, N G Leveson and T J Shimeall, </author> <title> Safety Verification In Murphy Using Fault Tree Analysis, in Software Risk Management (ed. </title> <editor> B. Boehm), </editor> <booktitle> IEEE (1989). </booktitle>
Reference-contexts: The template is instantiated with data derived for the piece of program under consideration; rules exist for composing such instances into complete fault trees. Later papers such as <ref> [Cha89] </ref> attempt, rather less convincingly, to extend the subset of Ada supported by adding templates for the language's complex tasking statements. Figure 3 illustrates an example of Leveson's template approach to software FTA. 3.3.
Reference: [Chelson71] <author> Chelson, </author> <title> P O, Reliability Computation Using Fault Trees, </title> <type> NASA Technical Report (1971). </type>
Reference-contexts: As will be seen later the general model which we have derived is sufficiently flexible to accommodate many other related notations. 3.1. Classical Fault Tree Analysis Fault tree analysis (FTA) has a long history as a method for determining the causes of a given hazardous event <ref> [Chelson71] </ref>. The causal model of FTA is quite simple starting from a known top event (effect), the aim of FTA is to derive one or more sets of potential causes. The model is built from the top down in a deductive fashion.
Reference: [Earthy92] <author> Earthy, J V, </author> <title> Hazard and Operability Studies As An Approach To Software Safety Assessment Proceedings of the IEE Colloquium on Hazard Analysis (11 November 1992) pp.5/1 5/3. </title>
Reference-contexts: Although it is not yet particularly widely applied to electronic systems (its origin is in chemical process industries), some application of HAZOP to software and human factors in computing systems has been made; for example [Burns93] and <ref> [Earthy92] </ref>. We see considerable scope for integrating it into the overall FPTN world view. Each HAZOP guideword characterises a particular class of failure too much, not enough, output when none required and so on.
Reference: [Ezhilchelvan85] <author> Ezhilchelvan, P. D., S. K. Shrivastava, </author> <title> A Characterisation of Faults in Systems, </title> <type> Technical Report, </type> <institution> Computing Laboratory, University of Newcastle Upon Tyne (Sept 85). </institution>
Reference-contexts: These domains of failure are drawn from the work Ezhilchelvan and Shrivastava <ref> [Ezhilchelvan85] </ref> and along with a general infrastructural failure type and a representation of normal conditioning events these form the basis of a simple failure classification inside FPTN.
Reference: [Fenelon92] <author> Fenelon, Peter, John McDermid, </author> <title> Integrated Techniques for Software Safety Analysis, </title> <booktitle> Proceedings of the IEE Colloquium on Hazard Analysis (11 November 1992) pp.2/1 2/16. </booktitle>
Reference: [Fenelon93] <author> Fenelon, Peter, John A McDermid, </author> <title> An Integrated Toolset For Software Safety Analysis, </title> <journal> Journal Of Systems and Software (June 1993). </journal>
Reference-contexts: This fundamental 6 difference between Leveson-style and classical FTA makes the Leveson approach extremely counterintuitive for engineers used to building fault trees from the top down. In SSAP we have tried to combine the best of both approaches <ref> [Fenelon93] </ref>.
Reference: [Leveson83] <author> Leveson, N.G., P.R. Harvey, </author> <title> Software fault tree analysis, </title> <journal> Journal of Systems and Software 3( 2 ) (June 1983) pp.173-81. J. Syst. Softw. (USA). </journal>
Reference-contexts: The approach described in <ref> [Leveson83] </ref> is based around the representation of constructs in the Ada programming language by instances of template fault trees for example, there are characteristic templates for IF statements, WHILE loops, assignments etc.
Reference: [Murdoch92] <author> Murdoch, John, D Pearce and G Ward, </author> <title> Logic Modelling Of Dependable Systems, </title> <booktitle> Proceedings of the IFAC Symposium On Safety Of Computer Control Systems (28-30 October 1992). </booktitle> <volume> 20 [O'Connor91]O'Connor, </volume> <editor> Patrick D. T., </editor> <title> Practical Reliability Engineering (3rd Edition), </title> <editor> J. </editor> <publisher> Wiley (1992). </publisher>
Reference-contexts: We are already aware of a system (the Integrated Fault Management Environment) employing a similar approach <ref> [Murdoch92] </ref>. 16 6.3. Design For Dependability We can also use FPTN as a means of structuring design by specifying restrictions on the output failure modes which we are willing to tolerate we can use FPTN to help shape the design of a system.
Reference: [Raheja90] <author> Raheja, </author> <title> Dev, Software System Failure Mode And Effects Analysis (SSFMEA) A Tool For Reliability Growth, </title> <booktitle> Proc. International Symposium on Reliability and Maintainability, </booktitle> <address> Tokyo (1990), pp.IX-1 - IX-7. </address>
Reference-contexts: The traditionalist attitude has to date rather limited work on FMECA of software, although Raheja <ref> [Raheja90] </ref> has attempted to exploit it as an aid to the development of high-integrity systems with partial success.
Reference: [Taylor82] <author> Taylor, J R, </author> <title> Fault Tree And Cause Analysis For Control Software Validation, </title> <institution> Ris National Laboratory, DK-4000, Roskilde, </institution> <note> Denmark (January 1982). </note>
Reference-contexts: Taylor's approach <ref> [Taylor82] </ref> is very closely linked to techniques used in formal software verification and validation and bears little resemblance to the fault tree notation as used by practising safety engineers; the first widely published application of software FTA was made slightly later by Leveson and her colleagues at Irvine.
Reference: [Tindell92] <author> Tindell, K W, Burns, A and Wellings, </author> <title> A J Allocating Hard Real Time Tasks: An NP-Hard Problem Made Easy, Real Time Systems 4(2) (June 1992) pp. </title> <type> 145-165 </type>
Reference-contexts: The most interesting possibility yet to appear involves the integration of FPTN with simulated annealing technology to achieve a measure of automation in the design and configuration process. 6.4. Automation In The Design Process Current work at York <ref> [Tindell92] </ref> involves the use of simulated annealing (an efficient optimisation technique applicable to systems with large state spaces) as a means of automatically scheduling sets of tasks in hard real time systems.

References-found: 12

