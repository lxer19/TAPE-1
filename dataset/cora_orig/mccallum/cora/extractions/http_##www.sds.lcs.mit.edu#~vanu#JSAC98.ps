URL: http://www.sds.lcs.mit.edu/~vanu/JSAC98.ps
Refering-URL: http://www.sds.lcs.mit.edu/SpectrumWare/home.html
Root-URL: 
Title: Virtual Radios  
Author: Vanu Bose, Mike Ismert, Matt Welborn, John Guttag 
Affiliation: Software Devices and Systems Group Laboratory for Computer Science Massachusetts Institute of Technology  
Note: To appear in JSAC issue on software Radios, 4th Qtr., '98  
Abstract: Conventional software radios take advantage of vastly improved A/D converters and DSP hardware. Our approach, which we refer to as virtual radios, also depends upon high performance A/D converters. However, rather than use DSPs, we have chosen to ride the curve of rapidly improving workstation hardware. We use wideband digitization and then perform all of the digital signal processing in user space on a general purpose workstation. This approach allows us to experiment with new approaches to signal processing that exploit the hardware and software resources of the workstation. Furthermore, it allows us to experiment with different ways of structuring systems in which the radio component of communication devices are integrated with higher-level applications. This paper describes the design and performance of an environment we have constructed that facilitates building virtual radios and of two applications built using that environment. The environment consists of an I/O subsystem that provides high bandwidth low latency user-level access to digitized signals and a programming environment that provides an infrastructure for building applications. The applications, which exemplify some of the benefits of virtual radios, are a software cellular receiver and a novel wireless network interface. 
Abstract-found: 1
Intro-found: 1
Reference: [And95] <author> Eric Anderson. </author> <title> Container Shipping: A Uniform Interface for Fast, Efficient, High-bandwidth I/O. </title> <type> PhD thesis, </type> <institution> University of California, </institution> <address> San Diego, </address> <year> 1995. </year>
Reference-contexts: To avoid the expense of performing the data copy, previous research efforts have relied on different schemes using virtual memory manipulation and/or shared memory <ref> [DP93, CP94, And95, vEBBV95, BS96, Pai97] </ref>. Our solution to this problem was to use background direct memory access (DMA) to stream the samples directly into special buffers in the kernel; these buffers are mapped into the user's address space using virtual memory manipulations with very little overhead.
Reference: [Bai95] <author> Rupert Baines. </author> <title> The DSP bottleneck. </title> <journal> IEEE Communications Magazine, </journal> <volume> 33(5) </volume> <pages> 46-54, </pages> <month> May </month> <year> 1995. </year> <month> 17 </month>
Reference-contexts: The final step is a bandpass filter which removes out-of-band noise from the voice signal. Separating narrowband channels in a wideband receiver is a computationally intensive task that is usually done using special purpose hardware. Figure 6 depicts a typical digital down-converter (DDC) implemented in dedicated hardware <ref> [Bai95] </ref>. The wideband signal is translated to a complex baseband signal by the quadrature multiplier and then lowpass filtered to prevent aliasing due to decimation. <p> Special purpose FIR filters for decimation exist that do this operation very efficiently-which is important since the sample rates for a wideband receiver could be in excess of 30 MSPS. One author estimates <ref> [Bai95] </ref> that a good channel selection filter will require about 100 operations per input sample for a total of 3000 MOPS. It is certainly possible to build software that has the same structure as a hardware DDC. However, on current workstation hardware performance would be far too slow.
Reference: [BS96] <author> Jose C. Brustoloni and Peter Steenkiste. </author> <title> Effects of Buffering Semantics on I/O Performance. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation (OSDI'96), </booktitle> <pages> pages 277-291, </pages> <address> Seattle, WA, </address> <month> October </month> <year> 1996. </year> <booktitle> USENIX. </booktitle>
Reference-contexts: To avoid the expense of performing the data copy, previous research efforts have relied on different schemes using virtual memory manipulation and/or shared memory <ref> [DP93, CP94, And95, vEBBV95, BS96, Pai97] </ref>. Our solution to this problem was to use background direct memory access (DMA) to stream the samples directly into special buffers in the kernel; these buffers are mapped into the user's address space using virtual memory manipulations with very little overhead.
Reference: [BW94] <author> Alison Brown and Barry Wolt. </author> <title> Digital L-Band Receiver Architecture with Direct RF Sampling. </title> <booktitle> In IEEE Postition Location and Navigation Symposium, </booktitle> <pages> pages 209-216, </pages> <month> April 94. </month>
Reference-contexts: These devices are quite different from most software radios, which typically are implemented using either application-specific digital hardware or digital signal processors under software control <ref> [BW94] </ref> [LU95]. The SpectrumWare project is devoted to building infrastructure to support the construction of virtual radios and to building virtual radios that take advantage of the resources available on the workstation to either provide distinctive functionality or to implement traditional functionality in a distinctive way.
Reference: [CHT95] <author> David D. Clark, Henry H. Houh, and David L. </author> <type> Tennenhouse. </type> <institution> Aurora at MIT. Project Aurora Final Report, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: First, workstations lack a high-throughput port into which our frontend can be connected, creating the need to develop custom hardware. Second, the path between a device driver and the application is rather inefficient, requiring modifications to the operating system. For comparison, the VuSystem <ref> [CHT95] </ref> reported sustained throughput of 100 Mbits/sec to the application with an unmodified Digital Unix operating system.
Reference: [CP94] <author> Charles D. Cranor and Gurudatta M. Parulkar. </author> <title> Universal Continuous Media I/O: Design and Implementation. </title> <type> Technical Report TR 94-34, </type> <institution> Washington University Department of Computer Science, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: To avoid the expense of performing the data copy, previous research efforts have relied on different schemes using virtual memory manipulation and/or shared memory <ref> [DP93, CP94, And95, vEBBV95, BS96, Pai97] </ref>. Our solution to this problem was to use background direct memory access (DMA) to stream the samples directly into special buffers in the kernel; these buffers are mapped into the user's address space using virtual memory manipulations with very little overhead.
Reference: [DP93] <author> Peter Druschel and Larry Peterson. Fbufs: </author> <title> A High Bandwidth Cross-Domain Transfer Facility. </title> <booktitle> In Proceedings of the 14th Symposium on Operating Systems Principles, </booktitle> <pages> pages 189-202, </pages> <address> Asheville, NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: To avoid the expense of performing the data copy, previous research efforts have relied on different schemes using virtual memory manipulation and/or shared memory <ref> [DP93, CP94, And95, vEBBV95, BS96, Pai97] </ref>. Our solution to this problem was to use background direct memory access (DMA) to stream the samples directly into special buffers in the kernel; these buffers are mapped into the user's address space using virtual memory manipulations with very little overhead.
Reference: [FJ97] <author> Matteo Frigo and Steven G. Johnson. </author> <title> The fastest Fourier transform in the west. </title> <type> Technical Report MIT-LCS-TR-728, </type> <institution> Laboratory for Computer Science, Massachusettes Institue of Technology, </institution> <year> 1997. </year>
Reference-contexts: The evaluation of different FFT algorithms is based either on an estimate of relative performance or the system can generate test code and actually measure the performance of different algorithms in the current environment <ref> [FJ97] </ref>. This measurement process could also be repeated periodically to see if changes in the system load indicate the use of a different algorithm to compute the FFT. 3.1.2 Discussion This receiver was developed rapidly and requires only 600 lines of code, including the user interface.
Reference: [Ism98] <author> Michael Ismert. </author> <title> The GuPPI: Hardware and Software I/O Support for PC-based Real-time Signal Processing. </title> <booktitle> In Proceedings of IEEE INFOCOM '98, </booktitle> <year> 1998. </year> <note> submitted. </note>
Reference-contexts: To support this functionality, we developed the general purpose 1 Such receivers are currently under development by Rockwell and Hughes Electronics. 3 PCI I/O system described below <ref> [Ism98] </ref>. This interface utilizes the gigabit capacity of the PCI bus, and supports continuous bidirectional I/O streams of up to 32 megasamples/second (MSPS). We have also developed a programming environment for constructing applications.
Reference: [LT96] <author> Christopher J. Lindblad and David L. Tennenhouse. </author> <title> The VuSystem: A Programming System for Compute-Intensive Multimedia. </title> <journal> Journal on Selected Areas of Communication, </journal> <note> 1996. to appear. </note>
Reference-contexts: The design of SPECTRA was heavily influence by our experience building and using the VuSystem <ref> [LT96] </ref>. The VuSystem, which was built to support multimedia applications running over a desk area network, provides considerable support for composing signal processing modules. This made it an excellent environment in which to conduct preliminary experiments with virtual radios.
Reference: [LU95] <author> Raymond J Lackey and Donald W Upmal. Speakeasy: </author> <title> the military software radio. </title> <journal> IEEE Communications Magazine, </journal> <volume> 33(5) </volume> <pages> 56-61, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: These devices are quite different from most software radios, which typically are implemented using either application-specific digital hardware or digital signal processors under software control [BW94] <ref> [LU95] </ref>. The SpectrumWare project is devoted to building infrastructure to support the construction of virtual radios and to building virtual radios that take advantage of the resources available on the workstation to either provide distinctive functionality or to implement traditional functionality in a distinctive way.
Reference: [OK88] <author> Hiroshi Ochi and Noriyoshi Kambayashi. </author> <title> Design of complex coefficient FIR digital filters using weighted approximation. </title> <booktitle> In IEEE International Symposium on Circuits and Systems Proceedings, </booktitle> <pages> pages 43-46, </pages> <year> 1988. </year>
Reference-contexts: For this reason we can take advantage of recent advances in the design of complex-coefficient FIR filters to reduce the required filter order M of the original LPF, relative to a real-valued h [m], without increasing the required computation load for the final composite filter <ref> [OK88] </ref>. This technique also has costs, however. Although the filter requires less computation to perform the required processing steps, it is more complicated to set-up and will potentially use more memory to store filter coefficients.
Reference: [OS89] <author> Alan V. Oppenheim and Ronald W. Schafer. </author> <title> Discrete-Time Signal Processing. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: us to develop and evaluate unconventional solutions to problems. of an FIR filter (versus a lower-order IIR filter) allows us to produce an output that depends only upon the filter input samples, x [n], and therefore to compute only those output samples, y [n], that will be required after decimation <ref> [OS89] </ref>. This lets us greatly reduce the computation load by taking advantage of the large decimation factors that will exist when processing a narrowband signal in a wideband receiver.
Reference: [Pai97] <author> Vivek S. Pai. IO-Lite: </author> <title> A Copy-free UNIX I/O System. </title> <type> Master's thesis, </type> <institution> Rice University, </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: To avoid the expense of performing the data copy, previous research efforts have relied on different schemes using virtual memory manipulation and/or shared memory <ref> [DP93, CP94, And95, vEBBV95, BS96, Pai97] </ref>. Our solution to this problem was to use background direct memory access (DMA) to stream the samples directly into special buffers in the kernel; these buffers are mapped into the user's address space using virtual memory manipulations with very little overhead.
Reference: [Sha97] <author> Alok B. Shah. </author> <title> Software-Based Implementation of a Frequency Hopping Two-Way Radio. </title> <type> Master's thesis, </type> <institution> MIT, </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: Our software system provides all of the processing needed to transform between wideband IF signals and network packets. This section presents an implementation of a software wireless network interface designed to be compatible with a commercial frequency hopping radio operating in the 2.4 GHz ISM band employing FSK modulation <ref> [Sha97] </ref>. 7 Parameters such as the FSK frequency deviation and the spacing of the hopping channels can be 6 The FFTW package was developed at MIT by Matteo Frigo and Steven G. Johnson.
Reference: [Tan88] <author> Andrew S. Tanenbaum. </author> <title> Computer Networks. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ 07632, </address> <note> second edition, </note> <year> 1988. </year>
Reference-contexts: The ability to dynamically modify the channel width, channel spacing and the hopping sequence allows the system to adapt to its environment and provide better noise rejection and immunity from hostile jamming attacks. 3.2.1 Architecture and Implementation The software network interface architecture is a refinement of the OSI layering model <ref> [Tan88] </ref>, which subdivides the existing Link and Physical layers as shown in figure 8. The signal processing involved in these layers can be naturally subdivided into a finer-grained model, but has traditionally been lumped into one layer because of its implementation in dedicated hardware.
Reference: [Tha97] <author> Samir R. Thadani. </author> <title> Software-Based Ultrasound System for Medical Diagnosis. </title> <type> Master's thesis, </type> <institution> MIT, </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: We have, for example, investigated using the technology developed for our virtual radios to implement the signal processing done in medical ultrasound machines with the idea of allowing a number of ultrasound frontends to share the same backend workstation <ref> [Tha97] </ref>. * Improved Functionality Performing all of the signal processing in modular software permits not only the dynamic assignment of channel locations and widths, but also of the modulation and coding used on each channel.
Reference: [vEBBV95] <author> Thorsten von Eicken, Anindya Basu, Vineet Buch, and Werner Vogels. U-Net: </author> <title> A User-Level Network Interface for Parallel and Distributed Computing. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <address> Copper Mountain, CO, </address> <month> December 3-6 </month> <year> 1995. </year> <month> 18 </month>
Reference-contexts: To avoid the expense of performing the data copy, previous research efforts have relied on different schemes using virtual memory manipulation and/or shared memory <ref> [DP93, CP94, And95, vEBBV95, BS96, Pai97] </ref>. Our solution to this problem was to use background direct memory access (DMA) to stream the samples directly into special buffers in the kernel; these buffers are mapped into the user's address space using virtual memory manipulations with very little overhead.
References-found: 18

