URL: http://www-eksl.cs.umass.edu/papers/AtkinIEEE.ps
Refering-URL: http://eksl-www.cs.umass.edu/publications.html
Root-URL: 
Email: atkin@cs.umass.edu  
Title: Learning Monitoring Strategies: A Difficult Genetic Programming Application  
Author: Marc S. Atkin and Paul R. Cohen 
Address: LGRC, Box 34610  Amherst, MA 01003  
Affiliation: Experimental Knowledge Systems Laboratory Department of Computer Science,  University of Massachusetts,  
Abstract: Finding optimal or at least good monitoring strategies is an important consideration when designing an agent. We have applied genetic programming to this task, with mixed results. Since the agent control language was kept purposefully general, the set of monitoring strategies constitutes only a small part of the overall space of possible behaviors. Because of this, it was often difficult for the genetic algorithm to evolve them, even though their performance was superior. These results raise questions as to how easy it will be for genetic programming to scale up as the areas it is applied to become more complex. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Atkin, M.S., </author> <year> 1991. </year> <title> Research Summary: Using a Genetic Algorithm to Monitor Cupcakes, </title> <type> EKSL Memo #24, </type> <institution> Experimental Knowledge Systems Laboratory, University of Mas-sachusetts, Amherst. </institution>
Reference: [2] <author> Atkin, M. & Cohen, P.R., </author> <year> 1993. </year> <title> Genetic Programming to Learn an Agent's Monitoring Strategy, </title> <booktitle> Proceedings of the AAAI 93 Workshop on Learning Action Models, </booktitle> <pages> Pp. 36-41. </pages>
Reference-contexts: 1 The notable exception being a comprehensive experiment we did to compare a particular type of interval reduction, proportional reduction (the time between monitoring events is reduced proportionally as the deadline approaches) to the strategy of periodic monitoring <ref> [2] </ref>. obstacle field. These were the main terms in the robot's fitness function, in addition the robot was charged a small amount for every effector action it took, plus a monitoring cost for each time it actively used a sensor.
Reference: [3] <author> Baluja, S., </author> <year> 1993. </year> <title> The Evolution of Genetic Algorithms: Towards Massive Parallelism, </title> <booktitle> Proceeding of the Tenth International Conference on Machine Learning, </booktitle> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, CA., </address> <pages> Pp. 1-8. </pages>
Reference: [4] <author> Ceci, S.J. & Bronfenbrenner, U., </author> <year> 1985. </year> <title> "Don't forget to take the cupcakes out of the oven": Prospective memory, strategic time-monitoring, and context. Child Development, </title> <journal> Vol. </journal> <volume> 56. </volume> <pages> Pp. 152-164. </pages>
Reference: [5] <author> Goldberg, D.E., </author> <year> 1989. </year> <title> Genetic Algorithms in Search, Optimization & Machine Learning. </title> <publisher> Addison-Wesley. </publisher>
Reference: [6] <author> Goldberg, D.E. & Kalyanmoy, D., </author> <year> 1991. </year> <title> A Comparative Analysis of Selection Schemes Used in Genetic ALgorithms, in Foundations of Genetic Algorithms (Gregory J.E. </title> <editor> Rawlins ed.). </editor> <publisher> Morgan Kaufman, </publisher> <pages> Pp. 69-93. </pages>
Reference: [7] <author> Hansen, E.A., </author> <year> 1992. </year> <note> Note on monitoring cupcakes. EKSL Memo #22. </note> <institution> Experimental Knowledge Systems Laboratory, Computer Science Dept., University of Massachusetts, Amherst. </institution>
Reference: [8] <author> Hansen, E.A. & Cohen, P.R., </author> <year> 1994. </year> <title> Monitoring the execution of robot plans: A survey. </title> <note> Submitted to AI Magazine. </note>
Reference: [9] <author> Koza, J.R., </author> <year> 1992. </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection and Genetics. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference: [10] <author> Koza, J.R. & Rice, J.P., </author> <year> 1992. </year> <title> Automatic Programming of Robots using Genetic Programming. </title> <booktitle> AAAI-92, </booktitle> <pages> Pp. 194-207 </pages>
Reference: [11] <author> Koza, J.R., </author> <year> 1993. </year> <title> Simultaneous Discovery of Reusable Detectors and Subroutines Using Genetic Programming. </title> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, CA., </address> <pages> Pp. 295-302 </pages>
Reference-contexts: Manually having to adapt a general purpose language to the specific task that needs to be solved isn't a satisfying solution, either. A promising way out of this dilemma might be modularization. Some fairly recent work <ref> [11] </ref> focuses on ways of having genetic programming algorithms find potentially useful sub-behaviors and then building more complex behaviors from them.
Reference: [12] <author> Ramsey, C.L. & Grefenstette, J.J., </author> <year> 1993. </year> <title> Case-Based Initialization of Genetic Algorithms. </title> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, CA., </address> <pages> Pp. 84-91 </pages>
Reference-contexts: It also makes the output of the algorithm a lot easier to understand. Another possibility might be to insert already proven strategies into the initial population <ref> [12] </ref>. While it is certainly too early to draw too many far-reaching conclusions, the nature of search spaces is certainly something worth keeping an eye on, or others might be as unpleasantly surprised as we were.
Reference: [13] <editor> Tate, M.T., </editor> <year> 1993. </year> <title> Expected Allele Coverage and the Role of Mutation in Genetic Algorithms, </title> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, CA., </address> <pages> Pp. 31-37 </pages>
Reference-contexts: algorithm of any flavor be used to cope with the type of search spaces we were forced to deal with? Can genetic programming techniques be scaled up to languages that contain hundreds of commands and variety of complex control constructs? As is known from theoretical work on genetic algorithms (e.g. <ref> [13] </ref>), as the complexity of the encoding language increases, larger populations are required to get the same allele coverage. But increasing the population size to incorporate a proportion of the very rare solutions will only work up to a point.
References-found: 13

