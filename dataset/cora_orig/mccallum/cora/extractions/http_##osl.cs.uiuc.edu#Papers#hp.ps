URL: http://osl.cs.uiuc.edu/Papers/hp.ps
Refering-URL: http://osl.cs.uiuc.edu/Papers/Parallel.html
Root-URL: http://www.cs.uiuc.edu
Email: Email: fagha j panwarg@cs.uiuc.edu  
Title: An Actor-Based Framework for Heterogeneous Computing Systems  
Author: Gul Agha and Rajendra Panwar 
Address: 1304 W. Springfield Avenue  Urbana, IL 61801, USA  
Affiliation: Department of Computer Science  University of Illinois at Urbana-Champaign  
Abstract: This paper discusses a framework for supporting heterogeneous computing systems (hcs). hcs are physically distributed, potentially complex and evolving systems. hcs consist of a number of computers and interconnections which may have differing language and system support, and sometimes distinct computational ( architectural ) models. By providing a large number of computational resources to the user, hcs have the potential to allow highly efficient execution of ultra large-scale applications. The paper provides a framework for addressing some of the significant problems in interoperability and resource management which result from the heterogeneity in hcs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Agha. </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: In response, it will compute a new balance which will be used to process the next message. The concept of actors was originally proposed by Hewitt [11]. The actor model was formally characterized by means of power domain semantics [8], by a transition system <ref> [1] </ref>, and by Colored Petri Nets [13]. Complexity measures for actor programs have been studied [6].
Reference: [2] <author> G. Agha. </author> <title> Supporting multiparadigm programming on actor architectures. </title> <booktitle> In Proceedings of Parallel Architectures and Languages Europe, Vol. II: Parallel Languages (PARLE '89), </booktitle> <pages> pages 1-19. </pages> <address> Espirit, </address> <publisher> Springer-Verlag, </publisher> <year> 1989. </year> <note> LNCS 366. </note>
Reference-contexts: The actor model was formally characterized by means of power domain semantics [8], by a transition system [1], and by Colored Petri Nets [13]. Complexity measures for actor programs have been studied [6]. The model has also been proposed as a basis for multiparadigm programming <ref> [2] </ref> and has been used as a programming model for multicomput-ers [5, 9]. 2.2 LINGUISTIC EXPRESSIVENESS FOR INTEROPERABILITY In systems with shared memory, synchronization constructs based on shared variables, such as semaphores and monitors, are used. These constructs allow various processes to synchronize and share information.
Reference: [3] <author> G. Agha. </author> <title> Concurrent object-oriented programming. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 125-141, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: At run time the system should choose a machine based on efficiency criteria and also on availability of machines. Below are some metrics which may enable a resource management system to select a suitable machine for a given algorithm. * Concurrency Index: The Concurrency Index (CI) <ref> [3] </ref> gives a measure of the amount of parallelism available in a given computation. The higher the value of CI, the more is the parallelism available in the computation. * Grain Size: This metric gives the amount of computation performed before a message is sent out.
Reference: [4] <author> G. Agha, C. Houck, and R. Panwar. </author> <title> Distributed execution of actor systems. </title> <booktitle> In Proceedings of Fourth Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Santa Clara, </address> <year> 1991. </year>
Reference-contexts: A high communication to computation ratio indicates a communication intensive job which may not be executed efficiently if a very large number of processors are used. For example, in the Cholesky Decomposition algorithm <ref> [4] </ref> the communication/computation ratio is quite high, indicating that the computation will be slow if run on a machine, such as a one-dimensional array, which has a high latency and low bandwidth. * Scalability Measure: This measure tries to combine the information in the above two measures. <p> Reflection can be used specify the placement issues in a modular fashion and the placement strategies can be changed easily at run time. The example shown below illustrates how placement strategies can be architecture dependent. 5.1 EXAMPLE We consider the example of Cholesky decomposition discussed in <ref> [4] </ref>. The optimal placement strategy for such a problem depends on several factors such as the communication overhead for point-to-point messages on the architecture, the overhead required for a full broadcast of a message, the size of the given matrix, the number of processors available etc.
Reference: [5] <author> W. Athas and C. Seitz. </author> <title> Multicomputers: Message-passing concurrent computers. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 9-23, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Complexity measures for actor programs have been studied [6]. The model has also been proposed as a basis for multiparadigm programming [2] and has been used as a programming model for multicomput-ers <ref> [5, 9] </ref>. 2.2 LINGUISTIC EXPRESSIVENESS FOR INTEROPERABILITY In systems with shared memory, synchronization constructs based on shared variables, such as semaphores and monitors, are used. These constructs allow various processes to synchronize and share information.
Reference: [6] <author> F. Baude and G. </author> <title> Vidal-Naquet. Actors as a parallel programming model. </title> <booktitle> In Proceedings of 8th Symposium on Theoretical Aspects of Computer Science, </booktitle> <year> 1991. </year> <note> LNCS 480. </note>
Reference-contexts: The concept of actors was originally proposed by Hewitt [11]. The actor model was formally characterized by means of power domain semantics [8], by a transition system [1], and by Colored Petri Nets [13]. Complexity measures for actor programs have been studied <ref> [6] </ref>. The model has also been proposed as a basis for multiparadigm programming [2] and has been used as a programming model for multicomput-ers [5, 9]. 2.2 LINGUISTIC EXPRESSIVENESS FOR INTEROPERABILITY In systems with shared memory, synchronization constructs based on shared variables, such as semaphores and monitors, are used.
Reference: [7] <author> V. Chaudhary and J. K. Aggarwal. </author> <title> Parallelism in computer vision: A review. </title> <editor> In V. Kumar, P. S. Gopalakrishnan, and L. N. Kanal, editors, </editor> <booktitle> Parallel Algorithms for Machine Intelligence and Vision, </booktitle> <pages> pages 271-309. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: We describe two such examples: applications in computer vision and preconditioned conjugate gradient method for solving linear systems of equations, a numerical computation. Computer Vision: Processing images and making intelligent decisions based on the data requires different levels of processing: low-level, intermediate-level and high-level <ref> [7] </ref>. <p> For example image data is transformed into information that needs symbolic processing. Such applications may require higher connectivity or shared memory machines for processing although certain specific algorithms have been developed and implemented on the Connection Machine <ref> [7] </ref>. Preconditioned Conjugate Gradient Algorithm: This problem [10] requires various steps that have very different requirements of the architecture.
Reference: [8] <author> W. Clinger. </author> <title> Foundations of actor semantics. </title> <type> AI-TR- 633, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> May </month> <year> 1981. </year>
Reference-contexts: In response, it will compute a new balance which will be used to process the next message. The concept of actors was originally proposed by Hewitt [11]. The actor model was formally characterized by means of power domain semantics <ref> [8] </ref>, by a transition system [1], and by Colored Petri Nets [13]. Complexity measures for actor programs have been studied [6].
Reference: [9] <author> W. Dally. </author> <title> A VLSI Architecture for Concurrent Data Structures. </title> <publisher> Kluwer Academic Press, </publisher> <year> 1986. </year>
Reference-contexts: Complexity measures for actor programs have been studied [6]. The model has also been proposed as a basis for multiparadigm programming [2] and has been used as a programming model for multicomput-ers <ref> [5, 9] </ref>. 2.2 LINGUISTIC EXPRESSIVENESS FOR INTEROPERABILITY In systems with shared memory, synchronization constructs based on shared variables, such as semaphores and monitors, are used. These constructs allow various processes to synchronize and share information.
Reference: [10] <author> G. Golub and C. Van Loan. </author> <title> Matrix Computations. </title> <publisher> The Johns Hopkins University Press, </publisher> <year> 1983. </year>
Reference-contexts: For example image data is transformed into information that needs symbolic processing. Such applications may require higher connectivity or shared memory machines for processing although certain specific algorithms have been developed and implemented on the Connection Machine [7]. Preconditioned Conjugate Gradient Algorithm: This problem <ref> [10] </ref> requires various steps that have very different requirements of the architecture.
Reference: [11] <author> C. Hewitt. </author> <title> Viewing control structures as patterns of passing messages. </title> <journal> Journal of Artificial Intelligence, </journal> <volume> 8(3) </volume> <pages> 323-364, </pages> <year> 1977. </year>
Reference-contexts: For example, suppose a bank account actor accepts a withdrawal request. In response, it will compute a new balance which will be used to process the next message. The concept of actors was originally proposed by Hewitt <ref> [11] </ref>. The actor model was formally characterized by means of power domain semantics [8], by a transition system [1], and by Colored Petri Nets [13]. Complexity measures for actor programs have been studied [6].
Reference: [12] <author> C. A. R. Hoare. </author> <title> Communicating sequential processes. </title> <journal> Communications of the ACM, </journal> <volume> 21(8) </volume> <pages> 666-677, </pages> <month> August </month> <year> 1978. </year>
Reference: [13] <author> Y. Sami and G. </author> <title> Vidal-Naquet. Formalisation of the behaviour of actors by colored petri nets and some applications. </title> <booktitle> In Proceedings of Parallel Architectures and Languages Europe, (PARLE '91), </booktitle> <year> 1991. </year>
Reference-contexts: The concept of actors was originally proposed by Hewitt [11]. The actor model was formally characterized by means of power domain semantics [8], by a transition system [1], and by Colored Petri Nets <ref> [13] </ref>. Complexity measures for actor programs have been studied [6].
Reference: [14] <author> V. Singh, V. Kumar, G. Agha, and C. Tomlinson. </author> <title> Scalability of parallel sorting on mesh multicom-puters. </title> <booktitle> In Proceedings of the International Parallel Processing Symposium, </booktitle> <pages> pages 92-101. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: If the computation size needs to grow as f (p), where p is the number of processors, to maintain an efficiency E, then f (p) is defined to be the isoefficiency function for efficiency E <ref> [14] </ref>. Isoefficiency functions for quick-sort implementations are presented for the two-dimensional mesh architecture in [14]. A naive implementation stores the entire list in one processor; it partitions the list into two sublists, hands out one of the list to a free processor and keeps the other sublist. <p> If the computation size needs to grow as f (p), where p is the number of processors, to maintain an efficiency E, then f (p) is defined to be the isoefficiency function for efficiency E <ref> [14] </ref>. Isoefficiency functions for quick-sort implementations are presented for the two-dimensional mesh architecture in [14]. A naive implementation stores the entire list in one processor; it partitions the list into two sublists, hands out one of the list to a free processor and keeps the other sublist. This process continues recursively until all processors are busy.
References-found: 14

