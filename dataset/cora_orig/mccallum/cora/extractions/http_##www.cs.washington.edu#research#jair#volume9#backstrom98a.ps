URL: http://www.cs.washington.edu/research/jair/volume9/backstrom98a.ps
Refering-URL: http://www.cs.washington.edu/research/jair/contents/v9.html
Root-URL: http://www.cs.washington.edu
Email: cba@ida.liu.se  
Title: Computational Aspects of Reordering Plans  
Author: Christer Backstrom 
Address: Linkopings universitet, S-581 83 Linkoping, Sweden  
Affiliation: Department of Computer and Information Science  
Note: Journal of Artificial Intelligence Research 9 (1998) 99-137 Submitted 10/97; published 9/98  
Abstract: This article studies the problem of modifying the action ordering of a plan in order to optimise the plan according to various criteria. One of these criteria is to make a plan less constrained and the other is to minimize its parallel execution time. Three candidate definitions are proposed for the first of these criteria, constituting a sequence of increasing optimality guarantees. Two of these are based on deordering plans, which means that ordering relations may only be removed, not added, while the third one uses reordering, where arbitrary modifications to the ordering are allowed. It is shown that only the weakest one of the three criteria is tractable to achieve, the other two being NP-hard and even difficult to approximate. Similarly, optimising the parallel execution time of a plan is studied both for deordering and reordering of plans. In the general case, both of these computations are NP-hard. However, it is shown that optimal deorderings can be computed in polynomial time for a class of planning languages based on the notions of producers, consumers and threats, which includes most of the commonly used planning languages. Computing optimal reorderings can potentially lead to even faster parallel executions, but this problem remains NP-hard and difficult to approximate even under quite severe restrictions. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Backstrom, C. </author> <year> (1993). </year> <title> Finding least constrained plans and optimal parallel executions is harder than we thought. </title> <editor> In Backstrom, C., & Sandewall, E. (Eds.), </editor> <booktitle> Current Trends in AI Planning: EWSP'93|2nd European Workshop on Planning, </booktitle> <pages> pp. </pages> <address> 46-59 Vadstena, Sweden. </address> <publisher> IOS Press. </publisher>
Reference-contexts: Q is a minimum-constrained reordering of P wrt. iff (a) Q is a reordering P wrt. and (b) there is no reordering hA; OE 00 iof Q wrt. s.t. j OE 00 j &lt; j OE j; Note that the previous publication <ref> (Backstrom, 1993) </ref> used the terms LC1-minimality for minimal-constrained deordering and LC2-minimality for minimum-constrained reordering. This change in terminology has been done with the hope that more will be gained in clarity than is lost by confusion.
Reference: <author> Backstrom, C. </author> <year> (1994). </year> <title> Executing parallel plans faster by adding actions. </title> <editor> In Cohn, A. G. (Ed.), </editor> <booktitle> Proceedings of the 11th European Conference on Artificial Intelligence (ECAI'94), </booktitle> <pages> pp. </pages> <address> 615-619 Amsterdam, Netherlands. </address> <publisher> Wiley. </publisher>
Reference-contexts: A minimal deordering of P 4 while there is some e 2OE s.t. hA; (OE feg) + i is -valid do 5 remove e from OE 6 return hA; OE + i; In particular, note that plan validation is polynomial for the usual variant of propositional STRIPS without conditional actions <ref> (Nebel & Backstrom, 1994, Theorem 5.9) </ref>. More precisely, this proof pertains to the Common Propositional STRIPS formalism (CPS) and, thus, holds also for the other common variants of propositional STRIPS, like Ground TWEAK (Backstrom, 1995). <p> However, in the case of parallel execution of plans it has been shown that adding actions to a plan can sometimes allow for faster execution <ref> (Backstrom, 1994) </ref>. Finally, if allowing both removal and addition of actions, an even greater potential for optimising plans seems available, but this problems seems not yet studied in the literature. 10.
Reference: <author> Backstrom, C. </author> <year> (1995). </year> <title> Expressive equivalence of planning formalisms. </title> <journal> Artificial Intelligence, </journal> <volume> 76 (1-2), </volume> <pages> 17-34. </pages>
Reference-contexts: This formalism is a variation on propositional STRIPS and it is known to be equivalent under polynomial transformation to most other common variants on propositional STRIPS <ref> (Backstrom, 1995) </ref>. In brief, an action has a precondition and a postcon-dition, both being sets of ground literals. In order to define the GT formalism, the following two definitions are required. <p> More precisely, this proof pertains to the Common Propositional STRIPS formalism (CPS) and, thus, holds also for the other common variants of propositional STRIPS, like Ground TWEAK <ref> (Backstrom, 1995) </ref>. Furthermore, note that in practice it may not be necessary to compute the transitive closure either for the output plan or for validating a plan in the algorithm. While minimum de-/reordering are stronger criteria than minimal deordering, they are also more costly to achieve.
Reference: <author> Backstrom, C., & Klein, I. </author> <year> (1991). </year> <title> Parallel non-binary planning in polynomial time. </title> <editor> In Reiter, R., & Mylopoulos, J. (Eds.), </editor> <booktitle> Proceedings of the 12th International Joint Conference on Artificial Intelligence (IJCAI'91), </booktitle> <pages> pp. </pages> <address> 268-273 Sydney, Australia. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Bellare, M., Goldreich, O., & Sudan, M. </author> <year> (1995). </year> <title> Free bits, PCPs and non-approximability| towards tighter results. </title> <booktitle> In Proceedings of the 36th Annual IEEE Symposium on the Foundations of Computer Science (FOCS'95), </booktitle> <pages> pp. </pages> <address> 422-431 Milwaukee, WI, USA. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: Proof: Suppose there were a polynomial-time algorithm A approximating MmCD within jAj for some " &gt; 0. Then it is immediate from the proof of Theorem 6.4 that also Graph K-Colourability could be approximated within jAj 1=7" , which is impossible unless P=NP <ref> (Bellare, Goldreich, & Sudan, 1995) </ref>. 2 With the same reasoning, this bound can be strengthened to jAj 1" , under the assumption that co-RP6=NP (Feige & Kilian, 1996). 118 Computational Aspects of Reordering Plans 7.
Reference: <author> Blum, A. L., & Furst, M. L. </author> <year> (1997). </year> <title> Fast planning through planning graph analysis. </title> <journal> Artificial Intelligence, </journal> <volume> 90 (1-2), </volume> <pages> 281-300. </pages>
Reference-contexts: is obviously an NP-hard problem since the second phase of the algorithm is polynomial. p q B D q p p r q B Z Z q p r p a) Plan produced by KK b) Minimal deordered version of a 8.3 Planners with Optimality Guarantees The planning algorithm Graphplan <ref> (Blum & Furst, 1997) </ref> has a notion of time steps and tries to pack as many non-interacting actions as possible into one single time step. Furthermore, Graphplan finds the shortest plan, using the number of time steps as the measure.
Reference: <author> Chapman, D. </author> <year> (1987). </year> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32 (3), </volume> <pages> 333-377. </pages>
Reference-contexts: This difference does not affect any of the results presented here. 3.2 The Ground TWEAK Formalism The Ground TWEAK (GT) formalism is the TWEAK language <ref> (Chapman, 1987) </ref> restricted to ground actions. This formalism is a variation on propositional STRIPS and it is known to be equivalent under polynomial transformation to most other common variants on propositional STRIPS (Backstrom, 1995). In brief, an action has a precondition and a postcon-dition, both being sets of ground literals. <p> A p.o. PCT plan is valid iff all topological sortings of it are valid. Chapman's Modal-truth Criterion (MTC) <ref> (Chapman, 1987) </ref> can be abstracted to the PCT formalism and be analogously used for validating p.o. plans.
Reference: <author> Crescenzi, P., & Panconesi, A. </author> <year> (1991). </year> <title> Completeness in approximation classes. </title> <journal> Information and Computation, </journal> <volume> 93 (2), </volume> <pages> 241-262. </pages>
Reference-contexts: Furthermore, MmCD and MmCR are not only hard to solve optimally, but even to approximate. Neither of these problems is in the approximation class APX <ref> (Crescenzi & Panconesi, 1991) </ref>, ie neither problem can be approximated within a constant factor. (Both here and elsewhere in this article the term approximation is used in the constructive sense, that is the results refer to the existence/non-existence of algorithms producing an approximate solution in polynomial time). 112 Computational Aspects of
Reference: <author> Currie, K., & Tate, A. </author> <year> (1991). </year> <title> O-Plan: The open planning architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 52 (1), </volume> <pages> 49-86. </pages>
Reference-contexts: In principle, planning and scheduling follow in sequence such that scheduling can be viewed as a post-processing step to planning|where planning is concerned with causal relations and qualitative temporal relations between actions, while scheduling is concerned with metric constraints on actions. In some planning systems, eg O-Plan <ref> (Currie & Tate, 1991) </ref> and Sipe (Wilkins, 1988), both planning and scheduling are integrated into one single system. Similarly, temporal planners, eg Deviser (Vere, 1983) and IxTeT (Ghallab & Laruelle, 1994), can often reason also about metric constraints. <p> Already for quite small plans, it is very difficult for a human to see whether the ordering constraints are optimal or not, so computer support for such analyses is vital for designing optimal plans. For the same reason, also hierarchical-task-network planners, eg O-Plan <ref> (Currie & Tate, 1991) </ref> and Sipe (Wilkins, 1988), produce plans where reordering actions could lead to better schedules. Such a planner often commits to one of the two possible orderings for a pair of actions based on expert-knowledge rules.
Reference: <author> Feige, U., & Kilian, J. </author> <year> (1996). </year> <title> Zero knowledge and the chromatic number. </title> <booktitle> In 11th Annual IEEE Conference on Computational Compelxity (CCC'96) Philadelphia, </booktitle> <address> PA, USA. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: trivial consequence. 2 If using the number of propositional atoms in the plan as a measure of its size, this bound can be strengthened to (1 ") ln jPj for arbitrary " unless N P 2 DTIME (n log log n ) by substituting such a result for Minimum Cover <ref> (Feige, 1996) </ref> in the proof above. 5. Parallel Plans In order to study the problem of finding a shortest parallel execution of a plan, the formalisms used so far are not quite sufficient. <p> Then it is immediate from the proof of Theorem 6.4 that also Graph K-Colourability could be approximated within jAj 1=7" , which is impossible unless P=NP (Bellare, Goldreich, & Sudan, 1995). 2 With the same reasoning, this bound can be strengthened to jAj 1" , under the assumption that co-RP6=NP <ref> (Feige & Kilian, 1996) </ref>. 118 Computational Aspects of Reordering Plans 7. Restricted Cases Since the problems of computing minimum de-/reorderings are very difficult, and are even difficult to approximate, an alternative way of tackling them could be to study restricted cases.
Reference: <author> Feige, U. </author> <year> (1996). </year> <title> A threshold of ln n for approximating set cover (preliminary version). </title> <booktitle> In Proceedings of 28th Annual ACM Symposium on Theory of Computing (STOC'96), </booktitle> <pages> pp. </pages> <address> 314-318 Philadelphia, PA, USA. </address> <publisher> ACM. </publisher>
Reference-contexts: trivial consequence. 2 If using the number of propositional atoms in the plan as a measure of its size, this bound can be strengthened to (1 ") ln jPj for arbitrary " unless N P 2 DTIME (n log log n ) by substituting such a result for Minimum Cover <ref> (Feige, 1996) </ref> in the proof above. 5. Parallel Plans In order to study the problem of finding a shortest parallel execution of a plan, the formalisms used so far are not quite sufficient. <p> Then it is immediate from the proof of Theorem 6.4 that also Graph K-Colourability could be approximated within jAj 1=7" , which is impossible unless P=NP (Bellare, Goldreich, & Sudan, 1995). 2 With the same reasoning, this bound can be strengthened to jAj 1" , under the assumption that co-RP6=NP <ref> (Feige & Kilian, 1996) </ref>. 118 Computational Aspects of Reordering Plans 7. Restricted Cases Since the problems of computing minimum de-/reorderings are very difficult, and are even difficult to approximate, an alternative way of tackling them could be to study restricted cases.
Reference: <author> Fink, E., & Yang, Q. </author> <year> (1992). </year> <title> Formalizing plan justifications. </title> <booktitle> In Proceedings of the 9th Conference of the Canadian Society for Computational Studies of Intelligence (CSCSI'92), </booktitle> <pages> pp. </pages> <address> 9-14 Vancouver, BC, Canada. </address>
Reference: <author> Garey, M., & Johnson, D. </author> <year> (1979). </year> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <publisher> Freeman, </publisher> <address> New York. 135 B ackstr om Gazen, C., & Knoblock, C. </address> <year> (1997). </year> <title> Combining the expressivity of UCPOP with the efficiency of Graphplan. In Steel, </title> & <booktitle> Alami (1997), </booktitle> <pages> pp. 221-233. </pages>
Reference-contexts: Question: Is there a reordering hA; OEi of P s.t. j OE j k? Theorem 4.8 Minimum-Constrained Deordering is NP-hard. Proof: Proof by reduction from Minimum Cover <ref> (Garey & Johnson, 1979, p. 222) </ref>, which is NP-complete. <p> Question: Does P have a parallel execution of length k or shorter? Theorem 5.8 Parallel Plan Length is NP-hard. Proof: Hardness is proven by transformation from Graph K-Colourability <ref> (Garey & Johnson, 1979, p. 191) </ref>, which is NP-complete. Let G = hV; Ei be an arbitrary undi-rected graph, where V = fv 1 ; : : : ; v n g. Construct, in polynomial time, a GT ppi as follows. <p> Appendix A Theorem 7.10 Minimum Parallel Reordering remains NP-hard even when restricted to total-order GT plans with only toggling unary actions and under the assumption of unit time, simple concurrency and that no actions are redundant. Proof: Proof by reduction from 3SAT <ref> (Garey & Johnson, 1979, p. 259) </ref>.
Reference: <author> Ghallab, M., & Laruelle, H. </author> <year> (1994). </year> <title> Representation and control in IxTeT, a temporal planner. </title> <booktitle> In Hammond (1994), </booktitle> <pages> pp. 61-67. </pages>
Reference-contexts: In some planning systems, eg O-Plan (Currie & Tate, 1991) and Sipe (Wilkins, 1988), both planning and scheduling are integrated into one single system. Similarly, temporal planners, eg Deviser (Vere, 1983) and IxTeT <ref> (Ghallab & Laruelle, 1994) </ref>, can often reason also about metric constraints. This does not make it c fl1998 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.
Reference: <author> Hammond, K. (Ed.). </author> <year> (1994). </year> <booktitle> Proceedings of the 2nd International Conference on Artificial Intelligence Planning Systems (AIPS'94), </booktitle> <address> Chicago, IL, USA. </address> <publisher> AAAI Press. </publisher>
Reference: <author> Jonsson, P., & Backstrom, C. </author> <year> (1998). </year> <title> State-variable planning under structural restrictions: Algorithms and complexity. </title> <journal> Artificial Intelligence, </journal> <volume> 100 (1-2), </volume> <pages> 125-176. </pages>
Reference-contexts: It is also unclear whether the heuristic can handle actions with different duration times. Yet another example is the polynomial-time planner for the SAS + -IAO planning language <ref> (Jonsson & Backstrom, 1998) </ref> which produces plans which are minimum-constrained reordered. That is, for this restricted formalism it is clearly possible to optimise the ordering in polynomial time. 9.
Reference: <author> Kambhampati, S. </author> <year> (1994). </year> <title> Multi-contributor causal structures for planning: A formalization and evaluation. </title> <journal> Artificial Intelligence, </journal> <volume> 69 (1-2), </volume> <pages> 235-278. </pages>
Reference-contexts: It is not only interesting to make t.o. plans partially ordered, but also to make partially ordered plans more partially ordered, that is, to generalise the ordering. An algorithm for this task has been presented in the literature in the context of case-based planning <ref> (Kambhampati & Kedar, 1994) </ref>. Since t.o. plan are just a special case of p.o. plans, this section will study the general problem of making partially ordered plans less constrained. 108 Computational Aspects of Reordering Plans 4.1 Least-constrainment Criteria There is, naturally, an infinitude of possible definitions of least-constrainment. <p> In such cases, the old plan may contain many ordering relations that will be obsolete in the modified/repaired plan. In fact, the KK algorithm <ref> (Kambhampati & Kedar, 1994) </ref> is motivated in the context of case-based planning. It is also important to remember that today, and probably for a long time into the future, very few plans are generated entirely by computer programs.
Reference: <author> Kambhampati, S., & Kedar, S. </author> <year> (1994). </year> <title> A unified framework for explanation-based generalization of partially ordered and partially instantiated plans. </title> <journal> Artificial Intelligence, </journal> <volume> 67 (1), </volume> <pages> 29-70. </pages>
Reference-contexts: It is not only interesting to make t.o. plans partially ordered, but also to make partially ordered plans more partially ordered, that is, to generalise the ordering. An algorithm for this task has been presented in the literature in the context of case-based planning <ref> (Kambhampati & Kedar, 1994) </ref>. Since t.o. plan are just a special case of p.o. plans, this section will study the general problem of making partially ordered plans less constrained. 108 Computational Aspects of Reordering Plans 4.1 Least-constrainment Criteria There is, naturally, an infinitude of possible definitions of least-constrainment. <p> In such cases, the old plan may contain many ordering relations that will be obsolete in the modified/repaired plan. In fact, the KK algorithm <ref> (Kambhampati & Kedar, 1994) </ref> is motivated in the context of case-based planning. It is also important to remember that today, and probably for a long time into the future, very few plans are generated entirely by computer programs.
Reference: <author> Klein, I., Jonsson, P., & Backstrom, C. </author> <year> (1995). </year> <title> Tractable planning for an assembly line. </title>
Reference: <editor> In Ghallab, M., & Milani, A. (Eds.), </editor> <title> New Directions in AI Planning: </title> <booktitle> EWSP'95| 3rd European Workshop on Planning, Frontiers in AI and Applications, </booktitle> <pages> pp. </pages> <address> 313-324 Assisi, Italy. </address> <publisher> IOS Press. </publisher>
Reference: <author> Klein, I., Jonsson, P., & Backstrom, C. </author> <year> (1998). </year> <title> Efficient planning for a miniature assembly line. </title> <journal> Artificial Intelligence in Engineering, </journal> <volume> 13 (1), </volume> <pages> 69-81. </pages>
Reference: <author> Knoblock, C. </author> <year> (1994). </year> <title> Generating parallel execution plans with a partial-order planner. </title> <note> In Hammond (1994). </note>
Reference: <author> Kohler, J., Nebel, B., Hoffman, J., & Dimopoulos, Y. </author> <year> (1997). </year> <title> Extending planning graphs to an ADL subset. In Steel, </title> & <booktitle> Alami (1997), </booktitle> <pages> pp. 273-285. </pages>
Reference: <author> Lund, C., & Yannakakis, M. </author> <year> (1994). </year> <title> On the hardness of approximating minimization problems. </title> <journal> Journal of the ACM, </journal> <volume> 41 (5), </volume> <pages> 960-981. </pages>
Reference-contexts: Since the reduction in the proof of Theorem 4.8 preserves the solutions exactly, also approximations are preserved. Hence, Minimum Cover could be approximated within a constant, but this is impossible unless N P 2 DTIME (n poly log n ) <ref> (Lund & Yannakakis, 1994) </ref>, which contradicts the assumption.
Reference: <author> Nebel, B., & Backstrom, C. </author> <year> (1994). </year> <title> On the computational complexity of temporal projection, planning and plan validation. </title> <journal> Artificial Intelligence, </journal> <volume> 66 (1), </volume> <pages> 125-160. </pages>
Reference-contexts: A minimal deordering of P 4 while there is some e 2OE s.t. hA; (OE feg) + i is -valid do 5 remove e from OE 6 return hA; OE + i; In particular, note that plan validation is polynomial for the usual variant of propositional STRIPS without conditional actions <ref> (Nebel & Backstrom, 1994, Theorem 5.9) </ref>. More precisely, this proof pertains to the Common Propositional STRIPS formalism (CPS) and, thus, holds also for the other common variants of propositional STRIPS, like Ground TWEAK (Backstrom, 1995).
Reference: <author> Pednault, E. P. D. </author> <year> (1986). </year> <title> Formulating multiagent, dynamic-world problems in the classical planning framework. </title> <editor> In Georgeff, M., & Lansky, A. L. (Eds.), </editor> <booktitle> Reasoning about Actions and Plans, Proceedings of the 1986 Workshop, </booktitle> <pages> pp. </pages> <address> 47-82 Timberline, OR, USA. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Regnier, P., & Fade, B. </author> <year> (1991a). </year> <title> Complete determination of parallel actions and temporal optimization in linear plans of action. </title> <editor> In Hertzberg, J. (Ed.), </editor> <booktitle> European Workshop on Planning, Vol. 522 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pp. </pages> <address> 100-111 Sankt Augustin, Germany. Springer. </address> <note> 136 Computational Aspects of Reordering Plans Regnier, </note> <author> P., & Fade, B. </author> <year> (1991b). </year> <title> Determination du parallelisme maximal et optimisation temporelle dans les plans d'actions lineaires. </title> <journal> Revue d'intelligence artificielle, </journal> <volume> 5 (2), </volume> <pages> 67-88. </pages>
Reference: <author> Selman, B., Levesque, H., & Mitchell, D. </author> <year> (1992). </year> <title> A new method for solving hard satisfi-ability problems. </title> <booktitle> In Proceedings of the 10th (US) National Conference on Artificial Intelligence (AAAI'92), </booktitle> <pages> pp. </pages> <address> 440-446 San Jose, CA, USA. </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference-contexts: One could imagine a reordering algorithm which uses either heuristic search or randomized local-search methods a la GSAT <ref> (Selman, Levesque, & Mitchell, 1992) </ref> to find reorderings and then use the scheduler as evaluation function for the proposed reorderings.
Reference: <editor> Steel, S., & Alami, R. (Eds.). </editor> <booktitle> (1997). 4th European Conference on Planning, ECP'97, Vol. 1348 of Lecture Notes in Artificial Intelligence, </booktitle> <address> Toulouse, France. </address> <publisher> Springer. </publisher>
Reference: <author> Stromberg, J.-E. </author> <year> (1991). </year> <institution> Styrning av LEGO-bilfabrik. Andra omarbetade upplagan. Department of Electrical Engineering, Linkoping University. </institution>
Reference: <author> Tate, A. </author> <year> (1975). </year> <title> Interacting goals and their use. </title> <booktitle> In Proceedings of the 4th International Joint Conference on Artificial Intelligence (IJCAI'75), </booktitle> <pages> pp. </pages> <address> 215-218 Tbilisi, USSR. </address> <publisher> IJCAI, William Kaufmann. </publisher>
Reference-contexts: Unfortunately, it is by no means obvious what constitutes an intuitive or good criterion for when a p.o. plan is least constrained and, to some extent, this also depends on the purpose of achieving least-constrainment. The major motivation for producing p.o. plans instead of t.o. plans <ref> (see for instance Tate, 1975) </ref> is that a p.o. plan can be post-processed by a scheduler according to further criteria, such as release times and deadlines or resource limits.
Reference: <author> Veloso, M. M., Perez, M. A., & Carbonell, J. G. </author> <year> (1990). </year> <title> Nonlinear planning with parallel resource allocation. </title> <editor> In Sycara, K. P. (Ed.), </editor> <title> Workshop on Innovative Approaches to Planning, </title> <journal> Scheduling and Control, </journal> <pages> pp. </pages> <address> 207-212 San Diego, CA, USA. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: VPC is a greedy algorithm which constructs an entirely new partial order by analysing the action conditions, using the original total order only to guide the greedy strategy. The algorithm is claimed <ref> (Veloso et al., 1990, p. 207) </ref> to produce a `least-constrained' p.o. plan, although no definition is given of what this means. Veloso 7 has confirmed that the term `least constrained plan' was used in a `loose sense' and no optimality claim was intended.
Reference: <author> Vere, S. A. </author> <year> (1983). </year> <title> Planning in time: Windows and durations for activities and goals. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> PAMI-5 (3), </volume> <pages> 246-267. </pages>
Reference-contexts: In some planning systems, eg O-Plan (Currie & Tate, 1991) and Sipe (Wilkins, 1988), both planning and scheduling are integrated into one single system. Similarly, temporal planners, eg Deviser <ref> (Vere, 1983) </ref> and IxTeT (Ghallab & Laruelle, 1994), can often reason also about metric constraints. This does not make it c fl1998 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.
Reference: <author> Wilkins, D. E. </author> <year> (1988). </year> <title> Practical Planning. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA. </address> <month> 137 </month>
Reference-contexts: In some planning systems, eg O-Plan (Currie & Tate, 1991) and Sipe <ref> (Wilkins, 1988) </ref>, both planning and scheduling are integrated into one single system. Similarly, temporal planners, eg Deviser (Vere, 1983) and IxTeT (Ghallab & Laruelle, 1994), can often reason also about metric constraints. This does not make it c fl1998 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved. <p> Already for quite small plans, it is very difficult for a human to see whether the ordering constraints are optimal or not, so computer support for such analyses is vital for designing optimal plans. For the same reason, also hierarchical-task-network planners, eg O-Plan (Currie & Tate, 1991) and Sipe <ref> (Wilkins, 1988) </ref>, produce plans where reordering actions could lead to better schedules. Such a planner often commits to one of the two possible orderings for a pair of actions based on expert-knowledge rules.
References-found: 34

