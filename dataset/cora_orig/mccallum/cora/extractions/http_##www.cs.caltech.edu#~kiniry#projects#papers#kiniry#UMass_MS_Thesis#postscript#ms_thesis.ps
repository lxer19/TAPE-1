URL: http://www.cs.caltech.edu/~kiniry/projects/papers/kiniry/UMass_MS_Thesis/postscript/ms_thesis.ps
Refering-URL: http://www.cs.caltech.edu/~kiniry/projects/papers/kiniry/UMass_MS_Thesis/index.html
Root-URL: http://www.cs.caltech.edu
Title: A Distributed Enterprising Computing System DECS/OpenGL: A Generic Distributed Graphics Library  
Author: Joseph R. Kiniry Charles Weems Shlomo Zilberstein 
Keyword: distributed, enterprising, heterogeneous, graphics, OpenGL  
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Note: DECS:  or  
Email: email: kiniry@osf.org  kiniry@cs.umass.edu  Readers:  (weems@cs.umass.edu)  (shlomo@cs.umass.edu)  
Date: November, 1994  
Abstract: M.S. Project Report 1 Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [IDL] <institution> IDL Definition. </institution>
Reference-contexts: Ideas borrowed from Express include automated parallelization of serial code, parallel algorithm visualization tools, the provision of a high level communications library and performance analysis tools. Express also provides multiple language bindings similar to both the DECS model and IDL (Interface Definition Language) <ref> [IDL] </ref>. HeNCE is X-based software designed to assist scientists in developing parallel programs. It provides a parallel programming paradigm where application development is described by a graph. This environment provides ideas for future programming environments that support distributed and parallel models. <p> The syntax of the invocation of a distributed function should be no different than that of a local function call. This might be accomplished in the same manner that other distributed systems use today through the use of IDL definitions and an IDL compiler [Shirley 1993] <ref> [IDL] </ref>. * Release bound resources. When a client is finished using resources that are bound to distributed functions it calls client release (). This function sends the RELEASE token followed by the machine identifier of the resource in question. * Signal a protocol error.
Reference: [ARB 1993] <institution> OpenGL(tm) Architecture Review Board. OpenGL Man Pages. Silicon Graphics, Mountain View, CA. </institution> <note> Documents available from anonymous ftp from ftp://sgi.com/opengl/doc/gl.share.Z. </note> <year> 1993. </year>
Reference-contexts: The OpenGL API is currently at Version 1.0 and is completely defined by various publication available from Silicon Graphics, Inc. [Segal 1993] <ref> [ARB 1993] </ref> [ARB 1993] For a product to be called compliant with the OpenGL API, it must have the full functionality of the API and pass conformance tests. This implementation of the OpenGL API is not a validated implementation. It has been written solely for testing the DECS system. <p> The OpenGL API is currently at Version 1.0 and is completely defined by various publication available from Silicon Graphics, Inc. [Segal 1993] <ref> [ARB 1993] </ref> [ARB 1993] For a product to be called compliant with the OpenGL API, it must have the full functionality of the API and pass conformance tests. This implementation of the OpenGL API is not a validated implementation. It has been written solely for testing the DECS system. <p> New sets of OpenGL support commands are provided through a standard system library that uses the core commands but makes a certain aspect of the library easier to use or provides some other new functionality. An example extension is the OpenGL Utility Library (libglu) [Smith 1993] <ref> [ARB 1993, pages 455-9] </ref> which provides functions to support mipmapping texture operations, alternate coordinate transformations, polygon tessellation, error handling routines, and rendering spheres, cylinders, disks, and NURBS curves and surfaces [ARB 1993, pages 443-53]. <p> An example extension is the OpenGL Utility Library (libglu) [Smith 1993] [ARB 1993, pages 455-9] which provides functions to support mipmapping texture operations, alternate coordinate transformations, polygon tessellation, error handling routines, and rendering spheres, cylinders, disks, and NURBS curves and surfaces <ref> [ARB 1993, pages 443-53] </ref>. There is also a library called the OpenGL Programming Guide Auxiliary Library (libaux) [ARB 1993, pages 461-7] that was written to facilitate simple examples for the programming guide. <p> There is also a library called the OpenGL Programming Guide Auxiliary Library (libaux) <ref> [ARB 1993, pages 461-7] </ref> that was written to facilitate simple examples for the programming guide. This library was originally written with yet another support library (libtk) and the GLX extension, but was ported by myself to XView [Heller 1990] for use in this project. <p> This is a render similar to Figure 4 except all the triangles are now smoothly shaded. To change the computational and memory requirements of scene, the following OpenGL functionality can be turned on and off the with the glEnable () and glDisable () functions (see <ref> [ARB 1993] </ref> for details): * The use of additional buffers for rendering operations. If we assume the output window is 512 pixels square, then the color frame buffer uses a total of 256 KB of memory. <p> See Section 7 for the final goals of the DECS system provided by the CRS. 34 6.2 Capabilities of the OpenGL API Implementation The current version of the OpenGL API well on its way to being a fully compliant version but is lacking in the following areas (see <ref> [ARB 1993] </ref> for details on the specified pages): * Some primitive types, namely meshes, evaluators, and general convex polygons [pages 325-350]. * Some accumulation, alpha, and RGBA buffer support [pages 291-323]. * Double-buffering or multi-channel rendering [pages 96]. * Some fragment processing like blending, dithering, fog, and anti-aliasing [pages 195-219]. *
Reference: [ARB 1993] <author> OpenGL(tm) Architecture Review Board with Jackie Neider, Tom David, and Mason Woo. </author> <title> OpenGL Programming Guide. The Official Guide to Learning OpenGL, Release 1. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts. </address> <year> 1993. </year>
Reference-contexts: The OpenGL API is currently at Version 1.0 and is completely defined by various publication available from Silicon Graphics, Inc. [Segal 1993] <ref> [ARB 1993] </ref> [ARB 1993] For a product to be called compliant with the OpenGL API, it must have the full functionality of the API and pass conformance tests. This implementation of the OpenGL API is not a validated implementation. It has been written solely for testing the DECS system. <p> The OpenGL API is currently at Version 1.0 and is completely defined by various publication available from Silicon Graphics, Inc. [Segal 1993] <ref> [ARB 1993] </ref> [ARB 1993] For a product to be called compliant with the OpenGL API, it must have the full functionality of the API and pass conformance tests. This implementation of the OpenGL API is not a validated implementation. It has been written solely for testing the DECS system. <p> New sets of OpenGL support commands are provided through a standard system library that uses the core commands but makes a certain aspect of the library easier to use or provides some other new functionality. An example extension is the OpenGL Utility Library (libglu) [Smith 1993] <ref> [ARB 1993, pages 455-9] </ref> which provides functions to support mipmapping texture operations, alternate coordinate transformations, polygon tessellation, error handling routines, and rendering spheres, cylinders, disks, and NURBS curves and surfaces [ARB 1993, pages 443-53]. <p> An example extension is the OpenGL Utility Library (libglu) [Smith 1993] [ARB 1993, pages 455-9] which provides functions to support mipmapping texture operations, alternate coordinate transformations, polygon tessellation, error handling routines, and rendering spheres, cylinders, disks, and NURBS curves and surfaces <ref> [ARB 1993, pages 443-53] </ref>. There is also a library called the OpenGL Programming Guide Auxiliary Library (libaux) [ARB 1993, pages 461-7] that was written to facilitate simple examples for the programming guide. <p> There is also a library called the OpenGL Programming Guide Auxiliary Library (libaux) <ref> [ARB 1993, pages 461-7] </ref> that was written to facilitate simple examples for the programming guide. This library was originally written with yet another support library (libtk) and the GLX extension, but was ported by myself to XView [Heller 1990] for use in this project. <p> This is a render similar to Figure 4 except all the triangles are now smoothly shaded. To change the computational and memory requirements of scene, the following OpenGL functionality can be turned on and off the with the glEnable () and glDisable () functions (see <ref> [ARB 1993] </ref> for details): * The use of additional buffers for rendering operations. If we assume the output window is 512 pixels square, then the color frame buffer uses a total of 256 KB of memory. <p> See Section 7 for the final goals of the DECS system provided by the CRS. 34 6.2 Capabilities of the OpenGL API Implementation The current version of the OpenGL API well on its way to being a fully compliant version but is lacking in the following areas (see <ref> [ARB 1993] </ref> for details on the specified pages): * Some primitive types, namely meshes, evaluators, and general convex polygons [pages 325-350]. * Some accumulation, alpha, and RGBA buffer support [pages 291-323]. * Double-buffering or multi-channel rendering [pages 96]. * Some fragment processing like blending, dithering, fog, and anti-aliasing [pages 195-219]. *
Reference: [Beguelin 1991] <author> A. Beguelin, J. Dongarra, A. Geist, R. Manchek, K. Moore, and R. Wade. </author> <title> HeNCE A user's guide (Draft). </title> <institution> Oak Ridge National Laboratory. </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: There are also a few other systems with interesting capabilities that are used by more than a single site but do not show promise of gaining widespread acceptance. These systems include Chameleon [Gropp 1992], Cronus [Schantz 1986], Express [Kolawa 1992], HeNCE <ref> [Beguelin 1991] </ref>, and Enterprise [Shaeffer 1992]. Chameleon provides a standardized and extremely low overhead interface to message passing software.
Reference: [Black 1994] <author> David Black. </author> <title> Fast Lightweight IPC: Architecture and Design (whitepaper). Open Software Foundation. </title> <year> 1994. </year>
Reference-contexts: These systems include Chameleon [Gropp 1992], Cronus [Schantz 1986], Express [Kolawa 1992], HeNCE [Beguelin 1991], and Enterprise [Shaeffer 1992]. Chameleon provides a standardized and extremely low overhead interface to message passing software. Since this capability will be provided by future operating systems <ref> [Black 1994] </ref>, the DECS abstracts message passing below the protocol level allowing for the possibility of changing schemes without having to rewrite applications. Cronus was an object-oriented computing environment project at BBN Systems and Technologies that lost its funding in 1993.
Reference: [Burden 1988] <author> Richard Burden, J. Douglas Faires. </author> <title> Numerical Analysis, Fourth Edition. </title> <publisher> PWS-KENT Publishing Company, </publisher> <address> Boston, MA. </address> <year> 1988. </year>
Reference-contexts: To find the mapping that fulfills these requirements, we must find the point in the state space that minimizes the difference between that point and all of the requested ones. This is a multi-dimensional least-squares problem. There are a variety of algorithms that can solve this problem, see <ref> [Burden 1988] </ref> for some of the more popular ones. Clients can provide feedback to the DECS in the form of a performance evaluation of each mapping that the CRS provides.
Reference: [Comer 1991] <author> Douglas E. Comer and David L. Stevens. </author> <title> Internetworking with TCP/IP, Volume I. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ. </address> <year> 1991. </year>
Reference-contexts: Since currently network protocols (i.e. IP) have no concept of multiple routes or link speeds it is unlikely that any distributed environment today will be used across network boundaries <ref> [Comer 1991] </ref>. See Section 7 for speculation on the future of distributed computing, especially in relation to new network designs and protocols. 4.1.4 Node Concept A DECS node is any entity in the DECS that has a CRS running on it.
Reference: [DEC-Microsoft 1994] <institution> Common Object Model Specification, </institution> <note> Draft Version 1.0, </note> <institution> Digital Equipment Corporation and Microsoft Corporation, </institution> <year> 1994. </year> <month> 38 </month>
Reference-contexts: DCE has been adopted as an industry standard but its use is slow in coming. This is because there are few system administrators with DCE expertise, corporate management is not yet ready to move to the new technology, and there are other pseudo-distributed models, such as the COM/OLE <ref> [DEC-Microsoft 1994] </ref> that are being pushed by major vendors (i.e. Microsoft and DEC) that seem to confuse and frighten the marketplace. PVM abstracts machines and their capabilities to a generic Parallel Virtual Machine that is utilized by specific tool sets and libraries. <p> Also, there are a some new standards being developed by major corporations and consortiums which encapsulate many of the functions of the DECS. These interface designs are being finalized now, so few implementations exist today. These systems are CORBA [OMG 1992] and COM/OLE <ref> [DEC-Microsoft 1994] </ref>. An short and accurate summary of these new technologies can be found in [Mowbray 1994]. Basically, CORBA is a design specification that provides for well-defined and designed generic distributed object-oriented services.
Reference: [Eshaghian 1993] <author> Mary M. Eshaghian and Muhammad E. Shaaban. </author> <title> Cluster-M Parallel Programming Paradigm. </title> <journal> International Journal of High Speed Computing. </journal> <year> 1993. </year>
Reference-contexts: Methods of mapping requests by the DECS to components and resources in a multi-processor system are highly dependent upon the operating system's capabilities. Methodologies have been developed to help in this respect but they are primitive and specific to individual cases, see <ref> [Eshaghian 1993] </ref> for details. 4.1.5 Node Information Machine attributes are represented in the protocol (see Section 4.1.6) that is utilized for communication between the processing entities and the CRS.
Reference: [Gilly 1990] <author> Daniel Gilly and Tim O'Reilly. </author> <title> The X Windows System in a Nutshell. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, CA. </address> <year> 1990. </year>
Reference: [Gropp 1992] <author> Bill Gropp and Barry Smith. </author> <title> Chameleon Parallel Programming Tools User's Manual. </title> <institution> Mathematics and Computer Science Division, Argonne National Laboratory. </institution> <year> 1992. </year>
Reference-contexts: There are also a few other systems with interesting capabilities that are used by more than a single site but do not show promise of gaining widespread acceptance. These systems include Chameleon <ref> [Gropp 1992] </ref>, Cronus [Schantz 1986], Express [Kolawa 1992], HeNCE [Beguelin 1991], and Enterprise [Shaeffer 1992]. Chameleon provides a standardized and extremely low overhead interface to message passing software.
Reference: [Heller 1990] <author> Dan Heller. </author> <title> XView Programming Manual. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, CA. </address> <year> 1990. </year>
Reference-contexts: The front end for the graphics is provided by the tk and aux libraries provided by SGI which supply routines to open windows, handle user input, and render high level constructs like cubes and spheres. These libraries in the current version are programmed in XView <ref> [Heller 1990] </ref> and are being ported to Motif [Heller 1994]. The memory and cpu requirements made by the library are variable depending upon the demands of the user. The default configuration of this implementation utilizes color-index graphics that use less memory than true-color graphics, and does not perform Gouraud shading. <p> This library was originally written with yet another support library (libtk) and the GLX extension, but was ported by myself to XView <ref> [Heller 1990] </ref> for use in this project. The code for all of these extensions, both in the pre- and post-porting forms is available in the project build tree.
Reference: [Heller 1994] <author> Dan Heller and Paula Ferguson. </author> <title> Motif Programming Manual for OSF/Motif Release 1.2. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, CA. </address> <year> 1994. </year>
Reference-contexts: These libraries in the current version are programmed in XView [Heller 1990] and are being ported to Motif <ref> [Heller 1994] </ref>. The memory and cpu requirements made by the library are variable depending upon the demands of the user. The default configuration of this implementation utilizes color-index graphics that use less memory than true-color graphics, and does not perform Gouraud shading.
Reference: [IEEE 1988] <author> Technical Committee on Operating Systems: </author> <title> IEEE. IEEE Standard 1003.1-1988 Portable Operating System Interface for Computer Environments. </title> <publisher> IEEE, Inc. </publisher> <address> New York, NY. </address> <year> 1988. </year>
Reference-contexts: All function calls should have their parameters and return values transparently translated and transfered over the network as appropriate. * Operating system transparency. The distributed system should not be dependent on any special features of operating systems. It should be utilize only industry wide operating systems standards like POSIX <ref> [IEEE 1988] </ref> so that tasks can be distributed without regard to operating system. * Task location transparency. The user of the distributed system should not be able to tell whether a program is running on the local node or remotely.
Reference: [Karlton 1993] <author> Phil Karlton. </author> <title> OpenGL(tm) Graphics with the X Window System, </title> <type> Version 1.0. </type> <institution> Silicon Graphics, Mountain View, </institution> <address> CA. </address> <year> 1993. </year>
Reference-contexts: The extensions provided by a particular X server can be listed by running the xdpyinfo program. The core X11R6 distribution server has the following extensions: BIG-REQUESTS, MIT-SHM, MIT-SUNDRY-NONSTANDARD, Multi-Buffering, SHAPE, SYNC, X3D-PEX, XC-MISC, XIE, XKEYBOARD, XTEST, XTestExtension1. The OpenGL extension to the X server is called GLX <ref> [Karlton 1993] </ref>. This extension lets a server communicate 26 OpenGL specific information with local and remote clients. This means that if a system has the GLX extension it can run an OpenGL program on a remote machine and display its output locally. <p> of color support. * Availability of integration library that lets a developer more easily synthesize their window system and OpenGL. * Implementation on every major flavor of UN*X including SunOS, Solaris, Ultrix, HP-UX, and OSF/1 all under Motif. * Complete GLU extension [Smith 1993] to OpenGL. * Complete GLX extension <ref> [Karlton 1993] </ref> for OpenGL support through X-Windows. 7.2 Future Goals The final goal of this research effort is a fundamental change in the software development paradigm. Such concepts of language, files, variable scopes, and explicit function dependencies are out-dated and restrictive.
Reference: [Kernighan 1988] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language, Second Edition. </title> <publisher> Prentice Hall Software Series, </publisher> <address> Englewood Cliffs, NJ. </address> <year> 1988. </year>
Reference: [Kiniry 1993] <author> Joseph Kiniry, Steve Dropsho, and Sharad Singhai. JOSS: </author> <title> A Heterogeneous Computing Environment. </title> <note> Seminar 791R final paper, </note> <institution> Department of Computer Science, University of Massachusetts, </institution> <address> Amherst, MA. </address> <month> Fall </month> <year> 1993. </year>
Reference-contexts: Inc. 2 Ultrix is a registered trademark of Digital Equipment Corporation. 3 UNIX is a registered trademark of Bell Laboratories. 4 OpenGL is a registered trademark of Silicon Graphics, Inc. 5 X-Window System is a registered trademark of Massachusetts Institute of Technology 4 resulting paper, JOSS: A Heterogeneous Computing Environment <ref> [Kiniry 1993] </ref>, details program-ming language extensions and a distributed computing environment that is meant to accomplish the goal of true heterogeneous computing. The design of a system of this complexity needs to take into account both theoretical and engineering factors from a whole host of computer science domains.
Reference: [Knuth 1986] <author> Donald E. Knuth. </author> <title> Th TeXbook. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Mas-sachusetts. </address> <year> 1986. </year>
Reference: [Kolawa 1992] <author> A. Kolawa. </author> <title> Parasoft: a comprehensive approach to parallel and distributed computing. </title> <booktitle> In Proceedings of the Workshop on Cluster Computing, Supercomputing Computations Research Institute, </booktitle> <institution> Florida State University. </institution> <note> Available via anonymous ftp from ftp.scri.fsu.edu in the pub/parallel-workshop.92 directory. </note> <year> 1992. </year>
Reference-contexts: There are also a few other systems with interesting capabilities that are used by more than a single site but do not show promise of gaining widespread acceptance. These systems include Chameleon [Gropp 1992], Cronus [Schantz 1986], Express <ref> [Kolawa 1992] </ref>, HeNCE [Beguelin 1991], and Enterprise [Shaeffer 1992]. Chameleon provides a standardized and extremely low overhead interface to message passing software.
Reference: [Larus 1992] <author> James R. Larus and Brad Richards and Guhan Viswanathan. </author> <title> C**: A Large-Grain, Object-Oriented, Data-Parallel Programming Language. </title> <institution> University of Wisconsin, Madison, WI. </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: The main systems and languages that are available now and have had impact on the market are DCE [OSF 1993], PVM [Sunderam 1992] [Pozo 1992] [Sunderam 1992], C** <ref> [Larus 1992] </ref>, and HPF [Loveman 1993]. DCE is an comprehensive distributed computing environment that guarantees inter-operability and portability across heterogeneous platforms. It provides tools and services that support distributed applications including remote procedure calls, distributed threads, a distributed file system, and services that enforce security, synchronization, and data sharing.
Reference: [Loveman 1993] <author> David B. Loveman. </author> <title> High Performance Fortran. </title> <journal> IEEE Parallel & Distributed Technology, </journal> <volume> Volume 1. </volume> <month> February </month> <year> 1993. </year>
Reference-contexts: The main systems and languages that are available now and have had impact on the market are DCE [OSF 1993], PVM [Sunderam 1992] [Pozo 1992] [Sunderam 1992], C** [Larus 1992], and HPF <ref> [Loveman 1993] </ref>. DCE is an comprehensive distributed computing environment that guarantees inter-operability and portability across heterogeneous platforms. It provides tools and services that support distributed applications including remote procedure calls, distributed threads, a distributed file system, and services that enforce security, synchronization, and data sharing.
Reference: [Mowbray 1994] <author> Mowbray, Thomas J. </author> <title> Choosing between OLE/COM and CORBA. </title> <booktitle> Object Magazine 4(7): </booktitle> <pages> 39-46, </pages> <year> 1994. </year>
Reference-contexts: These interface designs are being finalized now, so few implementations exist today. These systems are CORBA [OMG 1992] and COM/OLE [DEC-Microsoft 1994]. An short and accurate summary of these new technologies can be found in <ref> [Mowbray 1994] </ref>. Basically, CORBA is a design specification that provides for well-defined and designed generic distributed object-oriented services. COM/OLE, on the other hand, is a complicated set of APIs which have little of the functionality and generality of CORBA, yet is being pushed by Microsoft as an industry standard.
Reference: [OMG 1992] <author> Object Management Group. </author> <title> Common Object Request Broker Architecture and Specification, </title> <publisher> John Wiley, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: Also, there are a some new standards being developed by major corporations and consortiums which encapsulate many of the functions of the DECS. These interface designs are being finalized now, so few implementations exist today. These systems are CORBA <ref> [OMG 1992] </ref> and COM/OLE [DEC-Microsoft 1994]. An short and accurate summary of these new technologies can be found in [Mowbray 1994]. Basically, CORBA is a design specification that provides for well-defined and designed generic distributed object-oriented services. <p> Future distributed systems might use an ORB (Object Request Broker) to coordinate distributed objects. If this methodology is adopted by the industry the integration of DECS with ORB technology will be necessary. * CORBA integration. Another distributed standard that is being developed is CORBA <ref> [OMG 1992] </ref>. If this standard is adopted by the industry its functionality needs to be integrated into DECS. * Development environment. Integration of the DECS design paradigm with a development environment to fully generalize the information provision and binding of functionality to resources.
Reference: [OMG 1994] <author> Object Management Group. </author> <title> Common Object Services Specification, Vol I, </title> <publisher> John Wiley, </publisher> <address> New York, </address> <year> 1994. </year>
Reference: [OSF 1993] <author> Open Software Foundation. </author> <title> OSF DCE 1.0.1: Introduction to OSF DCE. Open Software Foundation, </title> <address> Cmabridge, MA. </address> <year> 1993. </year>
Reference-contexts: The computers of the first category are usually file-servers or compute-servers. File-servers are computers devoted to servicing file requests from client machines though network file access technologies like Sun's Network File System [Sun 1990] [Stern 1991], the Open Software Foundation's Distributed Computing Environment Distributed File System <ref> [OSF 1993] </ref>, or Transarc's Andrew File System [Transarc 1993], Compute-servers are machines that are dedicated to processing oriented tasks. Both types of servers are often overloaded with users and processes and are less productive than their price tags indicate. <p> In fact, there exists only a single system that fulfills a significant portion of the goals to which this researcher subscribes. That system is the Distributed Computing Environment of the Open Software Foundation <ref> [OSF 1993] </ref> [Shirley 1993]. The current state of this research is summarized in this paper and is implemented in the DECS through the use of the CRS. The current version of the CRS does not fully encapsulate all of the designs of this paper. <p> The main systems and languages that are available now and have had impact on the market are DCE <ref> [OSF 1993] </ref>, PVM [Sunderam 1992] [Pozo 1992] [Sunderam 1992], C** [Larus 1992], and HPF [Loveman 1993]. DCE is an comprehensive distributed computing environment that guarantees inter-operability and portability across heterogeneous platforms. <p> New distributed file-systems, namely the Andrew File System from Transarc Corporation (AFS) [Transarc 1993] and the Distributed File System of Distributed Computer Environment (DCE-DFS) <ref> [OSF 1993] </ref> help in this regard because they provide a common virtual name-space. For example, in AFS, all distributed file space is a large directory structure from the user and programmer's point of view. Each site using AFS has its entire directory structure rooted at the directory /afs.
Reference: [Pozo 1992] <author> Roldan Pozo. </author> <title> A stream-based interface in C++ for programming heterogeneous systems. </title> <institution> Department of Computer Science, University of Tennessee. </institution> <year> 1992. </year> <month> 39 </month>
Reference-contexts: The main systems and languages that are available now and have had impact on the market are DCE [OSF 1993], PVM [Sunderam 1992] <ref> [Pozo 1992] </ref> [Sunderam 1992], C** [Larus 1992], and HPF [Loveman 1993]. DCE is an comprehensive distributed computing environment that guarantees inter-operability and portability across heterogeneous platforms.
Reference: [Schantz 1986] <author> Richard E. Schantz, Robert H. Thomas, and Girome Bono. </author> <booktitle> The architecture of the Cronus distributed operating system. In Proceedings of the 6th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 250-259. </pages> <publisher> IEEE Computer Society. </publisher> <month> May </month> <year> 1986. </year>
Reference-contexts: There are also a few other systems with interesting capabilities that are used by more than a single site but do not show promise of gaining widespread acceptance. These systems include Chameleon [Gropp 1992], Cronus <ref> [Schantz 1986] </ref>, Express [Kolawa 1992], HeNCE [Beguelin 1991], and Enterprise [Shaeffer 1992]. Chameleon provides a standardized and extremely low overhead interface to message passing software.
Reference: [Segal 1993] <author> Mark Segal and Kurt Akeley. </author> <title> The OpenGL(tm) Graphics System: A Specification, </title> <type> Version 1.0. </type> <institution> Silicon Graphics, Mountain View, </institution> <address> CA. </address> <year> 1993. </year>
Reference-contexts: OpenGL is a scanline renderer based upon the state-machine programming paradigm; the state of the renderer is completely described by a set of variables at any point in time. The OpenGL API is currently at Version 1.0 and is completely defined by various publication available from Silicon Graphics, Inc. <ref> [Segal 1993] </ref> [ARB 1993] [ARB 1993] For a product to be called compliant with the OpenGL API, it must have the full functionality of the API and pass conformance tests. This implementation of the OpenGL API is not a validated implementation.
Reference: [Shaeffer 1992] <author> Jonathan Shaeffer, Greg Lobe, Paul Lu, Stan Melax, Ian Parsons, Carol Smith, and Duane Szafron. </author> <title> The Enterprise Model for Developing Distributed Applications. </title> <type> Technical Report TR 92-20, </type> <institution> Department of Computer Science, The University of Alberta, Edmonton, Alberta, </institution> <address> CA. </address> <month> November </month> <year> 1992. </year>
Reference-contexts: There are also a few other systems with interesting capabilities that are used by more than a single site but do not show promise of gaining widespread acceptance. These systems include Chameleon [Gropp 1992], Cronus [Schantz 1986], Express [Kolawa 1992], HeNCE [Beguelin 1991], and Enterprise <ref> [Shaeffer 1992] </ref>. Chameleon provides a standardized and extremely low overhead interface to message passing software. Since this capability will be provided by future operating systems [Black 1994], the DECS abstracts message passing below the protocol level allowing for the possibility of changing schemes without having to rewrite applications.
Reference: [Shirley 1993] <author> John Shirley. </author> <title> Guide to Writing DCE Applications. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, CA. </address> <year> 1993. </year>
Reference-contexts: In fact, there exists only a single system that fulfills a significant portion of the goals to which this researcher subscribes. That system is the Distributed Computing Environment of the Open Software Foundation [OSF 1993] <ref> [Shirley 1993] </ref>. The current state of this research is summarized in this paper and is implemented in the DECS through the use of the CRS. The current version of the CRS does not fully encapsulate all of the designs of this paper. <p> The syntax of the invocation of a distributed function should be no different than that of a local function call. This might be accomplished in the same manner that other distributed systems use today through the use of IDL definitions and an IDL compiler <ref> [Shirley 1993] </ref> [IDL]. * Release bound resources. When a client is finished using resources that are bound to distributed functions it calls client release (). This function sends the RELEASE token followed by the machine identifier of the resource in question. * Signal a protocol error.
Reference: [Smith 1993] <author> Kevin P. Smith. </author> <title> The OpenGL(tm) Graphics System Utility Library, </title> <type> Version 1.0. </type> <institution> Silicon Graphics, Mountain View, </institution> <address> CA. </address> <year> 1993. </year>
Reference-contexts: New sets of OpenGL support commands are provided through a standard system library that uses the core commands but makes a certain aspect of the library easier to use or provides some other new functionality. An example extension is the OpenGL Utility Library (libglu) <ref> [Smith 1993] </ref> [ARB 1993, pages 455-9] which provides functions to support mipmapping texture operations, alternate coordinate transformations, polygon tessellation, error handling routines, and rendering spheres, cylinders, disks, and NURBS curves and surfaces [ARB 1993, pages 443-53]. <p> exploitation of multiple generic rendering buffers. * Generalization of color support. * Availability of integration library that lets a developer more easily synthesize their window system and OpenGL. * Implementation on every major flavor of UN*X including SunOS, Solaris, Ultrix, HP-UX, and OSF/1 all under Motif. * Complete GLU extension <ref> [Smith 1993] </ref> to OpenGL. * Complete GLX extension [Karlton 1993] for OpenGL support through X-Windows. 7.2 Future Goals The final goal of this research effort is a fundamental change in the software development paradigm. Such concepts of language, files, variable scopes, and explicit function dependencies are out-dated and restrictive.
Reference: [Sun 1990] <author> Sun Microsystems. </author> <title> Network Programming Guide, Revision A, Part Number 800-3850-10. Sun Microsystems, </title> <publisher> Inc. </publisher> <year> 1990. </year>
Reference-contexts: The computers of the first category are usually file-servers or compute-servers. File-servers are computers devoted to servicing file requests from client machines though network file access technologies like Sun's Network File System <ref> [Sun 1990] </ref> [Stern 1991], the Open Software Foundation's Distributed Computing Environment Distributed File System [OSF 1993], or Transarc's Andrew File System [Transarc 1993], Compute-servers are machines that are dedicated to processing oriented tasks.
Reference: [Sun 1990] <author> Sun Microsystems. </author> <title> Network File System. Sun Microsystems, </title> <publisher> Inc. </publisher> <year> 1990. </year>
Reference-contexts: The computers of the first category are usually file-servers or compute-servers. File-servers are computers devoted to servicing file requests from client machines though network file access technologies like Sun's Network File System <ref> [Sun 1990] </ref> [Stern 1991], the Open Software Foundation's Distributed Computing Environment Distributed File System [OSF 1993], or Transarc's Andrew File System [Transarc 1993], Compute-servers are machines that are dedicated to processing oriented tasks.
Reference: [Stern 1991] <author> Hal Stern. </author> <title> Managing NFS and NIS. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, CA. </address> <year> 1991 </year>
Reference-contexts: The computers of the first category are usually file-servers or compute-servers. File-servers are computers devoted to servicing file requests from client machines though network file access technologies like Sun's Network File System [Sun 1990] <ref> [Stern 1991] </ref>, the Open Software Foundation's Distributed Computing Environment Distributed File System [OSF 1993], or Transarc's Andrew File System [Transarc 1993], Compute-servers are machines that are dedicated to processing oriented tasks.
Reference: [Sunderam 1992] <editor> Concurrent computing with PVM. </editor> <booktitle> In Proceedings of the Workshop on Cluster Computing, Supercomputing Computations Research Institute, </booktitle> <institution> Florida State University. </institution> <note> Available via anonymous ftp from ftp.scri.fsu.edu in the pub/parallel-workshop.92 directory. </note> <year> 1992. </year>
Reference-contexts: The main systems and languages that are available now and have had impact on the market are DCE [OSF 1993], PVM <ref> [Sunderam 1992] </ref> [Pozo 1992] [Sunderam 1992], C** [Larus 1992], and HPF [Loveman 1993]. DCE is an comprehensive distributed computing environment that guarantees inter-operability and portability across heterogeneous platforms. <p> The main systems and languages that are available now and have had impact on the market are DCE [OSF 1993], PVM <ref> [Sunderam 1992] </ref> [Pozo 1992] [Sunderam 1992], C** [Larus 1992], and HPF [Loveman 1993]. DCE is an comprehensive distributed computing environment that guarantees inter-operability and portability across heterogeneous platforms.
Reference: [Transarc 1993] <author> Transarc Corporation. </author> <title> The AFS System Administrator's Guide: AFS Release 3.2. </title> <institution> Transarc Corporation. </institution> <year> 1993. </year>
Reference-contexts: File-servers are computers devoted to servicing file requests from client machines though network file access technologies like Sun's Network File System [Sun 1990] [Stern 1991], the Open Software Foundation's Distributed Computing Environment Distributed File System [OSF 1993], or Transarc's Andrew File System <ref> [Transarc 1993] </ref>, Compute-servers are machines that are dedicated to processing oriented tasks. Both types of servers are often overloaded with users and processes and are less productive than their price tags indicate. <p> This way, when a build of a DECS application takes place, the executable can automatically be built for every platform that is part of the DECS. New distributed file-systems, namely the Andrew File System from Transarc Corporation (AFS) <ref> [Transarc 1993] </ref> and the Distributed File System of Distributed Computer Environment (DCE-DFS) [OSF 1993] help in this regard because they provide a common virtual name-space. For example, in AFS, all distributed file space is a large directory structure from the user and programmer's point of view.
Reference: [Turcottte 1993] <author> Louis H. Turcotte. </author> <title> A Survey of Software Environments for Exploiting Networked Computing Resources. </title> <institution> Engineering Research Center for Computational Field Simulation, Missis-sippi State, MS. </institution> <year> 1993. </year>
Reference-contexts: Enterprise has a distributed computing model that takes advantage of free resources. This system influenced the enterprising portion of the DECS, that of providing the run-time system with user knowledge to assist in the distribution of processing. See <ref> [Turcottte 1993] </ref> for a concise summary of most of the distributed computing solutions available mid-1993. Also, there are a some new standards being developed by major corporations and consortiums which encapsulate many of the functions of the DECS. These interface designs are being finalized now, so few implementations exist today.
Reference: [Unknown 19xx] <author> Unknown. </author> <title> Quick and Dirty Primer for UNIX Sockets. Internet document. </title> <month> 19xx. </month>
Reference-contexts: Since all machines need to be able to communicate, a standard method must be used to implement all network programming. Currently, socket technology is utilized <ref> [Unknown 19xx] </ref>, but Sun suggests that TLI methods should be used in the future, but this is not yet widely supported. * Kernel integration of performance data.
Reference: [Wall 1990] <author> Larry Wall and Randal L. Schwartz. </author> <title> Programming perl. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Se-bastopol, CA. </address> <year> 1990. </year>
Reference-contexts: The code for all of these extensions, both in the pre- and post-porting forms is available in the project build tree. This version of the OpenGL API is approximately ten thousand lines of C code with some perl code support <ref> [Wall 1990] </ref>. 5.3 Integration of the DECS and OpenGL API I integrated this implementation of the OpenGL API and the DECS in a few ways to show the system's flexibility and ease-of-use. The main program used in the testing and benchmarking of the system is called scene.
Reference: [Watt 1992] <author> Alan Watt and Mark Watt. </author> <title> Advanced Animation and Rendering Techniques, Theory and Practice. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts. </address> <publisher> ACM Press, </publisher> <address> New York, NY. </address> <year> 1992. </year>
Reference-contexts: The process summarized here is called scanline rendering. Scanline techniques attempt to draw realistic images by using algorithms which approximate what the human eye sees. This contrasts other rendering techniques like ray-tracing and radiosity models which use optics and physics as the foundation of their algorithms. See <ref> [Watt 1992] </ref> for an excellent reference on advanced computer graphics, I find it indispensable. The scanline rendering process consists of the following steps: 1. Geometric Operations. Geometric data is the set of vertices that represent the universe of the rendering system.
Reference: [X Consortium 1994] <author> The X Window System manpage. </author> <title> See man X on any system running X-Windows. </title> <year> 1994. </year>
Reference-contexts: The X server is the program that runs the graphics sub-system of a machine running X-Windows. It is responsible for distributing user input to and accepting output from various client programs through multiple interprocess communication channels <ref> [X Consortium 1994] </ref>. An extension to the X server consists of extra code to handle new additions the the X protocol. The extensions provided by a particular X server can be listed by running the xdpyinfo program.
References-found: 41

