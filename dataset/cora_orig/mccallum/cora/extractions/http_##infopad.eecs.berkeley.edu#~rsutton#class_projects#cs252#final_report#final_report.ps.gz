URL: http://infopad.eecs.berkeley.edu/~rsutton/class_projects/cs252/final_report/final_report.ps.gz
Refering-URL: http://infopad.eecs.berkeley.edu/~rsutton/class_projects/cs252/final_report/
Root-URL: 
Email: smj@math.berkeley.edu  
Title: Hardware/Software Architectures for TCP/IP Acceleration on UNIX WorkstationsDecember Hardware/Software Architectures for TCP/IP Acceleration on UNIX
Author: Sameer M. Jalnapurkar 
Keyword: TCP/IP; Performance Characterisation; Alternative Network Interface Architectures  
Note: rsutton@eecs.berkeley.edu  WWW: http://infopad.eecs.berkeley.edu/~rsutton/class_projects/cs252/  
Date: 1995 1  
Pubnum: 11,  
Abstract: Networks indisputably play a critical role in modern computing. The rapid growth in internet worldwide-web use and its corresponding need to move large data sets increasingly applies pressure on TCP/IP network performance. For systems which provide specific network services such as high capacity gateways and data servers, architectures exists which provide more appropriate architecture for this functions. This is not been the case for general purpose workstations. In this report, we first study a typical current TCP/IP implementation. We present measurements made to evaluate its performance and we discuss the result in terms of the costs involved in TCP/IP processing. We then look at alternative strategies and describe how they could improve network I/O Roy A. Sutton Abstract: This report studies network I/O using the TCP/IP protocol suite. We identify the major components of the cost of TCP/IP processing, and we describe and evaluate the performance of several alternative hardware/software architectures for TCP/IP processing. We make careful performance measurements for TCP/IP on a Sun Sparc 20 machine. We also develop an analytical model using which we can compare the performance of the four different architectures that we have studied. We show that by using innovative architectures for TCP/IP processing, it is possible to achieve a peak throughput over five times that of the typical current implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Clark, David D., Van Jacobson, John Romkey, Howard Salwen, </author> <title> "An Analysis of TCP Process ing Overhead", </title> <journal> IEEE Communications, </journal> <month> June </month> <year> 1989, </year> <month> pp23-29. </month>
Reference-contexts: In Section 2.3, we present the results of the measurements for the Sparc 20. Section 3.0, we discuss alternative strategies and architectures for TCP/IP processing. In Section 3.1 we begin by evaluating the performace of a typical current implimentation. In Section 3.2, we examine an alternative suggested by <ref> [1] </ref> where the DMA controller is removed from the network interface. In Section 3.3 and Section 3.4, we examine alternative network interface architectures which include local protocol processors on which the TCP/IP is executed. A comparison of these strategies can be found in Section 4.0. <p> At each cycle, one word or 4 bytes of data can be read or written. The TCP/IP processing (excluding copies and checksums) takes 500 instructions and the CPI for the protocol processing is 1.5. This estimate of 500 instructions is taken from <ref> [1] </ref>. The software is so organized that there just one intermediate stage between the user space and the network. Thus there need be only two copies - one between the user space and the kernel buffers and the other between the kernel buffers and the network interface. <p> = Hardware/Software Architectures for TCP/IP Acceleration on UNIX WorkstationsDecember 11, 1995 13 4.0 Comparisons and Conclusions Thus we see that the proposal of having a very simple network interface, and using the CPU to fetch data from the network interface instead of using a DMA unit, which was made in <ref> [1] </ref>, actually results in very poor performance, even though we can do checksums while we move data. This is due to the fact that accessing memory in regular mode is so much slower than accessing it in fast page mode.
Reference: [2] <author> Comer, Douglas E. </author> , <title> Internetworking with TCP/IP. volume I: Principles, Protocols, and Architecure, Second Edition. </title> <publisher> Prentince Hall, </publisher> <address> NJ. </address> <year> 1991. </year>
Reference: [3] <author> Comer, Douglas E., David L. Sevens. </author> <title> Internetworking with TCP/IP. volume II: Design, Imple mentation, and Internals, BSD Socket Version. </title> <publisher> Prentince Hall, </publisher> <address> NJ. </address> <year> 1994 </year>
Reference: [4] <author> Comer, Douglas E., David L. Sevens. </author> <title> Internetworking with TCP/IP. volume III: Client-SErver Programming and Applications, Second Edition. </title> <publisher> Prentince Hall, </publisher> <address> NJ. </address> <year> 1993. </year> <note> 0 200000 400000 600000 800000 1e+06 Throughput (Bytes/Second) Payload Size (Bytes) TCP/IP Performance Characteristics (ethernet) S20-S10 </note>
Reference-contexts: These tasks are typically performed by daemon kernel processes. (A detailed discussion may be found in <ref> [4] </ref>.) Once the data has been processed and packaged, it has to be copied from the main memory to the network interface buffers.
References-found: 4

