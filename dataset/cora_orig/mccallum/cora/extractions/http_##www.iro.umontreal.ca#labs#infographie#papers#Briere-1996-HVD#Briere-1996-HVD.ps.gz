URL: http://www.iro.umontreal.ca/labs/infographie/papers/Briere-1996-HVD/Briere-1996-HVD.ps.gz
Refering-URL: http://www.iro.umontreal.ca/labs/infographie/papers/Briere-1996-HVD/
Root-URL: http://www.iro.umontreal.ca
Title: Hierarchical View-dependent Structures for Interactive Scene Manipulation efficiently detect the modified structures by the use
Author: Normand Briere and Pierre Poulin 
Keyword: CR Categories and Subject Descriptors: I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism. Additional Key Words and Phrases: scene editing, interactive system, rendering, image quadtree, color tree, ray tree  
Note: Optimizations are presented to  is done efficiently and accurately and is suitable in an interactive context.  
Address: Montreal  
Affiliation: Departement d'Informatique et de Recherche Operationnelle Universite de  
Abstract: The result of a scene manipulation is usually displayed by re-rendering the entire image even if the change has affected only a small portion of it. This paper presents a system that efficiently detects and recomputes the exact portion of the image that has changed after an arbitrary manipulation of a scene viewed from a fixed camera. The incremental rendering allows for all visual effects produced by ray tracing, including shadows, reflections, refractions, textures, and bump maps. Two structures are maintained to achieve this. A ray tree is associated with each pixel and is used to detect and rebuild only the modified rays after an optical or geometrical change. A color tree represents the complete color expression of a pixel. All changes affecting the color of a pixel without changing the corresponding ray tree require only re-evaluation of the affected portions of the color tree. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> James Arvo. </author> <title> Backward ray tracing. </title> <booktitle> SIGGRAPH 86 Tutorial notes on Developments in Ray Tracing, </booktitle> <month> August </month> <year> 1986. </year>
Reference-contexts: So faster access memory acts then as cache which we could manage accordingly. The structures can also be used for other purposes. The similarity between image formation and light propagation <ref> [1] </ref> suggests to use the ray paths only for light preprocessing in order to handle the high memory requirements to reduce the aliasing effects. The incremental updating for changing scene geometry should avoid much unnecessary lighting re-computations.
Reference: [2] <author> Robert L. Cook. </author> <title> Shade trees. </title> <booktitle> Proceedings of SIGGRAPH 84. In Computer Graphics, </booktitle> <volume> 18, </volume> <month> 3 (July </month> <year> 1984), </year> <pages> pp. 223-231. </pages>
Reference-contexts: Litwinowicz and Miller [12] interactively distort a texture directly on a preprocessed projection of the uv coordinates of the texture parametrization. Instead of rendering the entire scene, other researchers have considered updating only the elements affected by a change. For each surface, Cook <ref> [2] </ref> conserves in a tree structure (shade tree) the symbolic evaluation of the illumination model. If a manipulation does not modify the shape of the tree, then the local illumination may be updated by simply evaluating the shade tree. <p> If a color subtree does not contain any parameter, it is replaced by a constant leaf. One can view our color tree as a union of concepts such as shade trees <ref> [2] </ref>, texture trees [16], and parametrized rays [15]. Indeed, a color tree corresponds to the entire symbolic evaluation of a pixel color without preserving information about the visibility. A color change is the most simple and efficient change to handle.
Reference: [3] <author> Franklin C. Crow. </author> <title> Shadow algorithms for computer graphics. </title> <booktitle> Proceedings of SIGGRAPH 77. In Computer Graphics, </booktitle> <volume> 11, </volume> <month> 2 (July </month> <year> 1977), </year> <pages> pp. 242-248. </pages>
Reference-contexts: The Z-buffer algorithm is quite fast and treats visible-surface determination. It becomes even more competitive by integrating the technique with hierarchical models and treating the image hierarchically [7]. Shading and shadowing for directional and point light sources, as well as textures and filtering can be simulated <ref> [3] </ref> [18] [14], but with a significant impact on performance and memory usage. However, other important visual phenomena such as reflection and refraction can only be approximated by textures, and this with great effort and potential artifacts [5].
Reference: [4] <author> Thomas A. Funkhouser and Carlo H. Sequin. </author> <title> Adaptive display algorithm for interactive frame rates during visualization of complex virtual environments. </title> <booktitle> Proceedings of SIGGRAPH 93. In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <month> August </month> <year> 1993, </year> <pages> pp. 247-254. </pages>
Reference-contexts: For interaction, one can also benefit from re-ordering the rendering with respect to the phenomena being manipulated, or from choosing between different levels of object complexity <ref> [4] </ref>. In specific contexts, some manipulations have been optimized by preprocessing. Hanrahan and Haeberli [10] edit material properties on a preprocessed sphere. Interactivity is obtained but the manipulation is done from a different visual context than the scene itself.
Reference: [5] <author> Ned Greene. </author> <title> Applications of world projections. </title> <booktitle> Proceedings of Graphics Interface 86, </booktitle> <month> (May </month> <year> 1986), </year> <pages> pp. 108-114. </pages>
Reference-contexts: However, other important visual phenomena such as reflection and refraction can only be approximated by textures, and this with great effort and potential artifacts <ref> [5] </ref>. For interaction, one can also benefit from re-ordering the rendering with respect to the phenomena being manipulated, or from choosing between different levels of object complexity [4]. In specific contexts, some manipulations have been optimized by preprocessing. Hanrahan and Haeberli [10] edit material properties on a preprocessed sphere.
Reference: [6] <author> Ned Greene. </author> <title> Detecting intersection of a rectangular solid and a convex polyhedron. </title> <editor> In Paul Heckbert, editor, </editor> <booktitle> Graphics Gems IV, </booktitle> <pages> pages 74-82. </pages> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1994. </year>
Reference-contexts: This is simpler and faster to compute, although if no trivial rejection has occurred, the test proceeds as if there were an intersection. For an exact test between a box and an arbitrary convex polyhedron, see Greene <ref> [6] </ref>. when a geometrical change is applied to the selection (the central sphere). The updated portion of the image is larger than the minimal one in figure 2 b) because the bounding volume of the selection is used for the intersection test.
Reference: [7] <author> Ned Greene and M. Kass. </author> <title> Hierarchical Z-buffer visibility. </title> <booktitle> Proceedings of SIGGRAPH 93. In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <month> August </month> <year> 1993, </year> <pages> pp. 231-240. </pages>
Reference-contexts: Unfortunately, it can only convey information about shape, and complex objects are difficult to interpret. The Z-buffer algorithm is quite fast and treats visible-surface determination. It becomes even more competitive by integrating the technique with hierarchical models and treating the image hierarchically <ref> [7] </ref>. Shading and shadowing for directional and point light sources, as well as textures and filtering can be simulated [3] [18] [14], but with a significant impact on performance and memory usage.
Reference: [8] <author> Brian Guenter, Todd B. Knoblock, and Erik Ruf. Specializing shaders. </author> <booktitle> Proceedings of SIGGRAPH 95. In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <month> August </month> <year> 1995, </year> <pages> pp. 343-350. </pages>
Reference-contexts: By expressing a RenderMan shader by source code instead of a symbolic tree, Guenter et al. <ref> [8] </ref> have defined specialized shaders. In these techniques, the preprocessing is usually applied on the first visible surface. Sequin and Smyrl [15] preserve in a tree the color expressions of all intersections obtained by ray tracing. The image is updated by traversing these color trees with modified parameters. <p> The color trees could be also compressed physically, at the cost of rebuilding them each time another parameter is selected. This is also similar to compressing the shaders in Guenter et al. <ref> [8] </ref>. 3.4 Bounding Ray Trees Testing each ray tree for intersection with the selection becomes prohibitive if our goal is interactive manipulation. In order to greatly speed up ray tests, we use a hierarchy of bounding volumes for the ray trees.
Reference: [9] <author> Eric Haines and John Wallace. </author> <title> Shaft culling for efficient ray-traced radiosity. </title> <booktitle> In Eurographics Workshop on Rendering, </booktitle> <year> 1991. </year>
Reference-contexts: We adopted the shafts introduced by Haines and Wallace <ref> [9] </ref>. A shaft is built using two aligned boxes with each bounding plane passing through a face of a box or through a pair of relevant edges, each of them belonging to a different box.
Reference: [10] <author> Pat Hanrahan and Paul E. Haeberli. </author> <title> Direct WYSIWYG painting and texturing on 3D shapes. </title> <booktitle> Proceedings of SIGGRAPH 90. In Computer Graphics, </booktitle> <volume> 24, </volume> <month> 4 (August </month> <year> 1990), </year> <pages> pp. 215-223. </pages>
Reference-contexts: For interaction, one can also benefit from re-ordering the rendering with respect to the phenomena being manipulated, or from choosing between different levels of object complexity [4]. In specific contexts, some manipulations have been optimized by preprocessing. Hanrahan and Haeberli <ref> [10] </ref> edit material properties on a preprocessed sphere. Interactivity is obtained but the manipulation is done from a different visual context than the scene itself. Litwinowicz and Miller [12] interactively distort a texture directly on a preprocessed projection of the uv coordinates of the texture parametrization.
Reference: [11] <author> David A. Jevans. </author> <title> Object space temporal coherence for ray tracing. </title> <booktitle> Proceedings of Graphics Interface 92, </booktitle> <month> (May </month> <year> 1992), </year> <pages> pp. 176-183. </pages>
Reference-contexts: Increasing the number of voxels reduces this visibility determination, but at the cost of storing many voxels, and also of handling more entries in the hashing table. Jevans <ref> [11] </ref> removed the previous dependency upon image resolution by storing instead in each voxel the identification of limited regions potentially affected by this voxel. However more unaffected rays can thus be wrongly identified as affected, and the visibility is done with respect to the entire scene.
Reference: [12] <author> Peter Litwinowicz and Gavin Miller. </author> <title> Efficient techniques for interactive texture placement. </title> <booktitle> Proceedings of SIGGRAPH 94. In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <month> July </month> <year> 1994, </year> <pages> pp. 119-122. </pages>
Reference-contexts: In specific contexts, some manipulations have been optimized by preprocessing. Hanrahan and Haeberli [10] edit material properties on a preprocessed sphere. Interactivity is obtained but the manipulation is done from a different visual context than the scene itself. Litwinowicz and Miller <ref> [12] </ref> interactively distort a texture directly on a preprocessed projection of the uv coordinates of the texture parametrization. Instead of rendering the entire scene, other researchers have considered updating only the elements affected by a change.
Reference: [13] <author> K. Murakami and K. Hirota. </author> <title> Incremental ray tracing. </title> <booktitle> In Euro-graphics Workshop on Photosimulation, Realism and Physics in Computer Graphics, </booktitle> <month> June </month> <year> 1989, </year> <pages> pp. 17-32. </pages>
Reference-contexts: Systems such as Atlantis from Abvent and IPR from Wavefront extend these color trees by adding a fixed number of extra ray generations to allow a user, for instance, to make reflective a previously non-reflective object. Murakami and Hirota <ref> [13] </ref> extend these previous techniques to handle also changes in visibility for a scene rendered from a static viewpoint. A ray is indexed by the list of regular voxels it traverses. Any change to the scene is associated with its affected voxels, which in turn determine the potentially affected rays. <p> It is similar to Murakami and Hirota's ray set <ref> [13] </ref>, but without information related to voxels. The ray path of a pixel is the ordered list of objects encountered by a ray originating from the eye position through this pixel. The ray tree of a pixel (figure 1 ray tree) is the geometrically-specific information of the ray path.
Reference: [14] <author> Mark Segal, Carl Korobkin, Rolf van Widenfelt, Jim Foran, and Paul E. Haeberli. </author> <title> Fast shadows and lighting effects using texture mapping. </title> <booktitle> Proceedings of SIGGRAPH 92. In Computer Graphics, </booktitle> <volume> 26, </volume> <month> 2 (July </month> <year> 1992), </year> <pages> pp. 249-252. </pages>
Reference-contexts: The Z-buffer algorithm is quite fast and treats visible-surface determination. It becomes even more competitive by integrating the technique with hierarchical models and treating the image hierarchically [7]. Shading and shadowing for directional and point light sources, as well as textures and filtering can be simulated [3] [18] <ref> [14] </ref>, but with a significant impact on performance and memory usage. However, other important visual phenomena such as reflection and refraction can only be approximated by textures, and this with great effort and potential artifacts [5].
Reference: [15] <author> Carlo H. Sequin and Eliot K. Smyrl. </author> <title> Parameterized ray tracing. </title> <booktitle> Proceedings of SIGGRAPH 89. In Computer Graphics, </booktitle> <volume> 23, </volume> <month> 3 (July </month> <year> 1989), </year> <pages> pp. 307-314. </pages>
Reference-contexts: By expressing a RenderMan shader by source code instead of a symbolic tree, Guenter et al. [8] have defined specialized shaders. In these techniques, the preprocessing is usually applied on the first visible surface. Sequin and Smyrl <ref> [15] </ref> preserve in a tree the color expressions of all intersections obtained by ray tracing. The image is updated by traversing these color trees with modified parameters. <p> If a color subtree does not contain any parameter, it is replaced by a constant leaf. One can view our color tree as a union of concepts such as shade trees [2], texture trees [16], and parametrized rays <ref> [15] </ref>. Indeed, a color tree corresponds to the entire symbolic evaluation of a pixel color without preserving information about the visibility. A color change is the most simple and efficient change to handle. It corresponds to a change that does not alter the visibility in the image. <p> In particular, the entire color expression of a pixel independent of the current parameter is temporarily replaced by a constant color value. This occurs when the pixel depends upon the selection but not on the selected shading or texture parameter. This optimization is present in Sequin and Smyrl <ref> [15] </ref> in which a subtree is simply replaced by its value. The color trees could be also compressed physically, at the cost of rebuilding them each time another parameter is selected.
Reference: [16] <author> Alan Watt and Mark Watt. </author> <title> Advanced Animation and Rendering Techniques: Theory and Practice. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1992. </year>
Reference-contexts: If a color subtree does not contain any parameter, it is replaced by a constant leaf. One can view our color tree as a union of concepts such as shade trees [2], texture trees <ref> [16] </ref>, and parametrized rays [15]. Indeed, a color tree corresponds to the entire symbolic evaluation of a pixel color without preserving information about the visibility. A color change is the most simple and efficient change to handle.
Reference: [17] <author> Turner Whitted. </author> <title> An improved illumination model for shaded display. </title> <journal> Communications of the ACM, </journal> <volume> 23(6) </volume> <pages> 343-349, </pages> <month> June </month> <year> 1980. </year>
Reference-contexts: 1 Introduction Computing the image of a 3D synthetic scene is a complex process, especially when shadows, textures, bump maps, reflections, and refractions are desired. A simple yet powerful algorithm producing such effects is ray tracing <ref> [17] </ref>. Unfortunately, its computational requirements are generally too fl C.P. 6128, succ. Centre-Ville, Montreal (Qc) Canada H3C 3J7 f briere j poulin g@iro.umontreal.ca high to be considered suitable to calculate intermediate images resulting from an interactive scene manipulation.
Reference: [18] <author> Lance Williams. </author> <title> Casting curved shadows on curved surfaces. </title> <booktitle> Proceedings of SIGGRAPH 78. In Computer Graphics, </booktitle> <volume> 12, </volume> <month> (August </month> <year> 1978), </year> <pages> pp. 270-274. </pages>
Reference-contexts: The Z-buffer algorithm is quite fast and treats visible-surface determination. It becomes even more competitive by integrating the technique with hierarchical models and treating the image hierarchically [7]. Shading and shadowing for directional and point light sources, as well as textures and filtering can be simulated [3] <ref> [18] </ref> [14], but with a significant impact on performance and memory usage. However, other important visual phenomena such as reflection and refraction can only be approximated by textures, and this with great effort and potential artifacts [5].
References-found: 18

