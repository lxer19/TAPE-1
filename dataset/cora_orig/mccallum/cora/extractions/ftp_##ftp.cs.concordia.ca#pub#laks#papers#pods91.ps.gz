URL: ftp://ftp.cs.concordia.ca/pub/laks/papers/pods91.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/laks/papers.html
Root-URL: http://www.cs.concordia.ca
Title: STRUCTURAL QUERY OPTIMIZATION A UNIFORM FRAMEWORK FOR SEMANTIC QUERY OPTIMIZATION IN DEDUCTIVE DATABASES  
Author: Laks V. S. Lakshmanan yfl and Hector J. Hernandez zy 
Address: Montreal, Quebec  Las Cruces, NM  
Affiliation: Dept. of Computer Science, Concordia University,  Dept. of Computer Science, New Mexico State University,  
Date: May 1991, 102-114.  
Note: Appears in: Proc. ACM SIGART-SIGMOD Symp. on Principles of Database Systems (PODS'91), Denver, CO,  
Abstract-found: 0
Intro-found: 1
Reference: [A] <author> Abiteboul, S. </author> <title> "Boundedness is Undecidable for Datalog Programs with a Single Recursive Rule," </title> <booktitle> Information Processing Letters 32 (1989), </booktitle> <pages> pp. 282-287. </pages>
Reference-contexts: In general, the problem of testing whether a Datalog program is bounded is known to be undecidable even for linear programs with one idb predicate [GMSV]. Some other decidable and undecidable results on boundedness of Datalog programs are presented in <ref> [A, CGKV, K, N1, NS, S, Var] </ref>. For a detailed summary of the present state-of-the-art of this problem see [KA]. None of the positive results above take into account the integrity constraints that may be satisfied by the predicates in the program.
Reference: [AH] <author> Abiteboul, S. and R. Hull. </author> <title> "Data Functions, Datalog and Negation," </title> <booktitle> in Proc. ACM SIGMOD, </booktitle> <year> 1988, </year> <pages> pp. 143-153. </pages>
Reference-contexts: This question is known to be undecidable <ref> [AH] </ref> for general Datalog programs, whereas for linear sirups it is open [H]. be necessary for repeated variables (it is always sufficient). We have left the algorithms general enough to handle repeated variables.
Reference: [CGKV] <author> Cosmadakis, S.S., Gaifman, H., Kanel--lakis, </author> <title> P.C., Vardi, M.Y., "Decidable Optimization Problems for Database Logic Programs," </title> <type> IBM Research Report RJ 6145 (60855), </type> <address> Yorktown Heights, New York, March 22, </address> <year> 1988. </year>
Reference-contexts: If this is the case, then P is said to be bounded <ref> [CGKV, GMSV, I, N1, NS] </ref>. In general, the problem of testing whether a Datalog program is bounded is known to be undecidable even for linear programs with one idb predicate [GMSV]. <p> In general, the problem of testing whether a Datalog program is bounded is known to be undecidable even for linear programs with one idb predicate [GMSV]. Some other decidable and undecidable results on boundedness of Datalog programs are presented in <ref> [A, CGKV, K, N1, NS, S, Var] </ref>. For a detailed summary of the present state-of-the-art of this problem see [KA]. None of the positive results above take into account the integrity constraints that may be satisfied by the predicates in the program.
Reference: [GMSV] <author> Gaifman, H., Mairson, H., Sagiv, Y., Vardi, M.Y., </author> <title> "Undecidable Optimization Problems for Database Logic Programs," </title> <type> IBM Research Report RJ 5583 (56702), </type> <address> Yorktown Heights, New York, </address> <month> April 3, </month> <year> 1987. </year>
Reference-contexts: If this is the case, then P is said to be bounded <ref> [CGKV, GMSV, I, N1, NS] </ref>. In general, the problem of testing whether a Datalog program is bounded is known to be undecidable even for linear programs with one idb predicate [GMSV]. <p> If this is the case, then P is said to be bounded [CGKV, GMSV, I, N1, NS]. In general, the problem of testing whether a Datalog program is bounded is known to be undecidable even for linear programs with one idb predicate <ref> [GMSV] </ref>. Some other decidable and undecidable results on boundedness of Datalog programs are presented in [A, CGKV, K, N1, NS, S, Var]. For a detailed summary of the present state-of-the-art of this problem see [KA].
Reference: [H] <author> Hull, R., </author> <type> Personal Communication, </type> <month> November </month> <year> 1990. </year>
Reference-contexts: This question is known to be undecidable [AH] for general Datalog programs, whereas for linear sirups it is open <ref> [H] </ref>. be necessary for repeated variables (it is always sufficient). We have left the algorithms general enough to handle repeated variables.
Reference: [I] <author> Ioannidis, Y.E., </author> <title> "A time bound on the materialization of some recursively defined views," </title> <booktitle> Proc. VLDB 1985, </booktitle> <pages> pp. 219-226. </pages>
Reference-contexts: If this is the case, then P is said to be bounded <ref> [CGKV, GMSV, I, N1, NS] </ref>. In general, the problem of testing whether a Datalog program is bounded is known to be undecidable even for linear programs with one idb predicate [GMSV].
Reference: [K] <author> Kanellakis, P. </author> <title> "Logic Programming and Parallel Complexity," Foundations of Deductive Databases and Logic Programming," </title> <editor> J. Minker ed., </editor> <publisher> Morgan Kaufmann (1988), </publisher> <pages> 547-586. </pages>
Reference-contexts: In general, the problem of testing whether a Datalog program is bounded is known to be undecidable even for linear programs with one idb predicate [GMSV]. Some other decidable and undecidable results on boundedness of Datalog programs are presented in <ref> [A, CGKV, K, N1, NS, S, Var] </ref>. For a detailed summary of the present state-of-the-art of this problem see [KA]. None of the positive results above take into account the integrity constraints that may be satisfied by the predicates in the program.
Reference: [KA] <author> Kanellakis, P., Abiteboul, S. </author> <title> "Database Theory Column: Deciding Bounded Recursion in Database Logic Programs," </title> <journal> SIGACT News, </journal> <volume> Vol. 20, No. 4, </volume> <pages> pp. 17-23, </pages> <month> Fall </month> <year> 1989. </year>
Reference-contexts: Some other decidable and undecidable results on boundedness of Datalog programs are presented in [A, CGKV, K, N1, NS, S, Var]. For a detailed summary of the present state-of-the-art of this problem see <ref> [KA] </ref>. None of the positive results above take into account the integrity constraints that may be satisfied by the predicates in the program.
Reference: [LH] <author> Lakshmanan V.S. and Hernandez H., </author> <title> "Structural Query Optimization A Uniform Framework For Semantic Query Optimization in Deductive Databases," </title> <type> Tech. Report. </type> <institution> CSD-90-06, Deot. of Comp.Sci. Concordia Univ., Montreal, (NMSU-TR-91-CS-02, Dept. of Computer Sci. New Mexico State Univ., </institution> <address> Las Crucez, NM), </address> <month> Dec. </month> <year> 1990. </year> <editor> [MN] inker, J. and Nicolas, J.M. </editor> <title> "On recursive axioms in relational databases." </title> <journal> Information Systems, </journal> <volume> 8(1), </volume> <pages> pp. 1-13, </pages> <year> 1982. </year>
Reference-contexts: First, we need the following result. Theorem 5.1. There is a polynomial-time algorithm for determining stable argument positions. 2 An elegant algorithm for detecting stable argument positions is presented in <ref> [LH] </ref>. We next develop a simple syntactic characterization of factorability of a subgoal in terms of the structure of its associated "dependency graph". For a linear sirup p :- a 1 ; :::; a k ; p, p :- e, define the subgoal dependency graph G as follows. <p> The advantage of this approach is that it uniformly extends to the case when there are fd's for the predicates of the sirup to satisfy. For nonlinear sirups we indicated the usefulness of the factoring technique with examples, which also illustrated the power of proof tree removability. <ref> [LH] </ref> contains the extension of the factoring technique to nonlinear sirups. We plan to investigate the important reltaed question of characterizing the class of nonlinear sirups for which the factoring technique forms a complete test for detecting branch removability.
Reference: [N1] <author> Naughton, J.F. </author> <title> "Data Independent Recursion in deductive databases," </title> <booktitle> in Proc. ACM PODS, </booktitle> <year> 1986, </year> <pages> pp. 267-279. </pages>
Reference-contexts: If this is the case, then P is said to be bounded <ref> [CGKV, GMSV, I, N1, NS] </ref>. In general, the problem of testing whether a Datalog program is bounded is known to be undecidable even for linear programs with one idb predicate [GMSV]. <p> In general, the problem of testing whether a Datalog program is bounded is known to be undecidable even for linear programs with one idb predicate [GMSV]. Some other decidable and undecidable results on boundedness of Datalog programs are presented in <ref> [A, CGKV, K, N1, NS, S, Var] </ref>. For a detailed summary of the present state-of-the-art of this problem see [KA]. None of the positive results above take into account the integrity constraints that may be satisfied by the predicates in the program. <p> Proof tree removability is thus a notion that generalizes the notion of "recursively redundant" introduced by Naughton <ref> [N1, N2] </ref> in the sense that a subgoal a need not be recursively redundant w.r.t. a predicate and yet its repeated occurrences in certain subtrees of the query predicate may well be redundant. (See Section 9 for examples.) Factoring is one type of proof tree transformation, (e.g. see [RSUV, Sar]), only <p> k are nonredundant. (For convenience we say in this case that no proof tree of p needs more than k occurrences of the subgoal a i .) In other words, for a linear sirup, a subgoal is proof tree removable iff it is "recursively redundant" in the sense of Naughton <ref> [N1, N2] </ref>. <p> In particular, it is noteworthy that a is not recursively redundant in the sense of <ref> [N1, N2] </ref>. Example 9.2.
Reference: [N2] <author> Naughton, J.F. </author> <title> "Redundancy in function free recursive inference rules." </title> <booktitle> in Proc. of the IEEE Symposium on Logic Programming, </booktitle> <year> 1986. </year>
Reference-contexts: Proof tree removability is thus a notion that generalizes the notion of "recursively redundant" introduced by Naughton <ref> [N1, N2] </ref> in the sense that a subgoal a need not be recursively redundant w.r.t. a predicate and yet its repeated occurrences in certain subtrees of the query predicate may well be redundant. (See Section 9 for examples.) Factoring is one type of proof tree transformation, (e.g. see [RSUV, Sar]), only <p> k are nonredundant. (For convenience we say in this case that no proof tree of p needs more than k occurrences of the subgoal a i .) In other words, for a linear sirup, a subgoal is proof tree removable iff it is "recursively redundant" in the sense of Naughton <ref> [N1, N2] </ref>. <p> In particular, it is noteworthy that a is not recursively redundant in the sense of <ref> [N1, N2] </ref>. Example 9.2.
Reference: [NS] <author> Naughton, J.F., Sagiv, Y. </author> <title> "A decidable class of bounded recursions," </title> <booktitle> in Proc. ACM PODS, </booktitle> <year> 1987, </year> <pages> pp. 227-236. </pages>
Reference-contexts: If this is the case, then P is said to be bounded <ref> [CGKV, GMSV, I, N1, NS] </ref>. In general, the problem of testing whether a Datalog program is bounded is known to be undecidable even for linear programs with one idb predicate [GMSV]. <p> In general, the problem of testing whether a Datalog program is bounded is known to be undecidable even for linear programs with one idb predicate [GMSV]. Some other decidable and undecidable results on boundedness of Datalog programs are presented in <ref> [A, CGKV, K, N1, NS, S, Var] </ref>. For a detailed summary of the present state-of-the-art of this problem see [KA]. None of the positive results above take into account the integrity constraints that may be satisfied by the predicates in the program.
Reference: [RSUV] <author> Ramakrishnan, R., Sagiv, Y., Ullman, J.D., Vardi, M. </author> <title> "Proof-tree Transformation Theorems and Their Applications." </title> <booktitle> in Proc. ACM PODS, </booktitle> <year> 1989, </year> <pages> pp. 172-181. </pages>
Reference-contexts: by Naughton [N1, N2] in the sense that a subgoal a need not be recursively redundant w.r.t. a predicate and yet its repeated occurrences in certain subtrees of the query predicate may well be redundant. (See Section 9 for examples.) Factoring is one type of proof tree transformation, (e.g. see <ref> [RSUV, Sar] </ref>), only that it is achieved at the level of rules.
Reference: [S] <author> Sagiv, Y., </author> <title> "On Bounded Database Schemes and Bounded Horn-Clause Programs," </title> <journal> SIAM J. on Computing, </journal> <month> 17:1 </month> <year> (1988), </year> <pages> pp. 1-22. </pages>
Reference-contexts: In general, the problem of testing whether a Datalog program is bounded is known to be undecidable even for linear programs with one idb predicate [GMSV]. Some other decidable and undecidable results on boundedness of Datalog programs are presented in <ref> [A, CGKV, K, N1, NS, S, Var] </ref>. For a detailed summary of the present state-of-the-art of this problem see [KA]. None of the positive results above take into account the integrity constraints that may be satisfied by the predicates in the program.
Reference: [Sar] <author> Saraiya, Y., </author> <title> "Linearizing nonlinear recursions in polynomial-time," </title> <booktitle> in Proc. ACM PODS, </booktitle> <year> 1989, </year> <pages> pp. 182-189. </pages>
Reference-contexts: by Naughton [N1, N2] in the sense that a subgoal a need not be recursively redundant w.r.t. a predicate and yet its repeated occurrences in certain subtrees of the query predicate may well be redundant. (See Section 9 for examples.) Factoring is one type of proof tree transformation, (e.g. see <ref> [RSUV, Sar] </ref>), only that it is achieved at the level of rules.
Reference: [U82] <author> Ullman, J.D., </author> <title> Principles of Database Systems, </title> <publisher> Computer Science Press, </publisher> <year> 1982. </year>
Reference: [U89] <author> Ullman, J.D., </author> <title> Principles of Database and Knowledge-Base Systems, Vol. I,II, </title> <publisher> Computer Science Press, </publisher> <year> 1989. </year>
Reference-contexts: characterizations and toolsextend to the case where there are of "recurring" variables (defined in Section 2) in the sirup, for simplicity and want of space, we only consider sirups without recurring variables in this extended abstract. 2 Basic Definitions For standard terminology of deductive databases, the reader is referred to <ref> [U89] </ref>. In particular, we assume the reader is familiar with proof trees, conjunctive queries, equivalence of programs, sirups, etc. We assume that each program has a query predicate associated with it. For sirups this is obviously the recursive predicate.
Reference: [Var] <author> Vardi, M.Y., </author> <title> "Decidability and Undecidability Results for Boundedness of Linear Recursive Queries," </title> <booktitle> in Proc. ACM PODS, </booktitle> <year> 1988, </year> <pages> pp. 341-351. </pages>
Reference-contexts: In general, the problem of testing whether a Datalog program is bounded is known to be undecidable even for linear programs with one idb predicate [GMSV]. Some other decidable and undecidable results on boundedness of Datalog programs are presented in <ref> [A, CGKV, K, N1, NS, S, Var] </ref>. For a detailed summary of the present state-of-the-art of this problem see [KA]. None of the positive results above take into account the integrity constraints that may be satisfied by the predicates in the program.
References-found: 18

