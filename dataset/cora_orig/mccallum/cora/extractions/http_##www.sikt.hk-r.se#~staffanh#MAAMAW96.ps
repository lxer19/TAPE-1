URL: http://www.sikt.hk-r.se/~staffanh/MAAMAW96.ps
Refering-URL: http://www.sikt.hk-r.se/~staffanh/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Staffan.Hagg@ide.hk-r.se  
Title: Building Fault Tolerant Multi-Agent Systems  
Author: Staffan Hgg 
Keyword: Multi-Agent Systems, Fault Tolerant Systems, Semantic Addressing, Sentinel, Checkpoint. Affirmation  
Web: http://www.pt.hk-r.se/~staffanh  
Address: Karlskrona/Ronneby, Sweden  
Affiliation: Department of Computer Science University of  
Abstract: Multi-Agent Systems (MAS) technology is sometimes criticised for lack of control in applications where a guaranteed behaviour is needed, especially when real-time demands are considered. In the Societies of Computation project at the University of Karlskrona/Ron-neby in Sweden we exploit MAS for computation and communication in complex environments. In a joint ef fort with Sydkraft, a major Swedish power distribution company , technologies for automating the power distribution process are studied. This paper addresses the criticism mentioned above, and it is outlined how an MAS approach in general conforms to basic principles for building fault tolerant systems with traditional approaches. It also shows that adaptation is a principle that is not much exploited in traditional approaches. With a MAS, adaptation is much more natural and can, rightly used, add desirable properties to a fault tolerant system. The paper also presents a method for realizing control in a MAS, introducing the concept of sentinels that guard certain functionality or guard against specific states in the MAS. The sentinels maintain models of other agents. By using semantic addressing (presented elsewhere), they monitor communication, and by interacting with agents they hold checkpoints for fault detection. The sentinels can thereby detect faults before they otherwise had been manifested, and they can detect inconsistencies between agents. This paper contains original and unpublished work. It has not already been accepted by and is not currently under review for a journal or another conference or workshop. Nor will it be submitted for such during the review period of MAAMAW96. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Burns A., and Wellings A., </author> <title> Real-Time Systems and Their Programming Languages, </title> <publisher> Addison-Wesley, </publisher> <year> 1990, </year> <note> ISBN 0-201-17529-0. </note>
Reference-contexts: Vital functionality must be preserved even if parts of the system fail, and time limits must be kept. If we turn to a standard textbook on real-time systems (e.g. Burns and Wellings <ref> [1] </ref>) we find that fault handling is covered at considerable length. We shall here give a brief overview of the most important issues.
Reference: [2] <author> Chen L., and Avizienis A., </author> <title> N-version programming: a fault-tolerance approach to reliability of software operation. </title> <booktitle> In Digest of Papers, The Eight Annual International Conference on Fault-Tolerant Computing, </booktitle> <address> Toulouse, France, </address> <year> 1978. </year>
Reference-contexts: There can also be one or more differing modules taking over functionality from a faulty one, though with loss of performance. A somewhat different approach is the concept of N-version programming, proposed by Chen and Avizienis <ref> [2] </ref>, figure 1. Here, N individuals or groups independently develop a module from the same specification. Then at run-time, all N modules execute in parallel, and the results are compared and the f inal result is voted for. This addresses the fault sources (1) and (2) in section 2.
Reference: [3] <author> Gustavsson, R. et al., </author> <title> Societies of Computation (SoC) - A Framework for Open Distributed Systems, Phase II: </title> <type> 1995-98, </type> <institution> University of Karlskrona/Ron-neby, </institution> <note> Research Report 8/95, ISSN 1103-1581. </note>
Reference-contexts: For a monolithic system there are fewer components that can fail, and there is no semantic problem, having no decentralized components with possibly different appreciations of the state of the system. Societies of Computation (SoC) is a research project at the University of Karl-skrona/Ronneby in Sweden <ref> [3] </ref> where MAS technology is exploited for distributed computing. In a joint effort with Sydkraft, a major Swedish power distribution company, technologies for automating the power distribution process are studied. <p> our application domain there may be agents controlled by different parties, there may be different versions of agents, and the size and configuration of a system may not be discernable at any one point in time. 9 On-Going and Future Activities The SoC project is now in it second phase <ref> [3] </ref>. There are activities going on to prepare for using our results in products. Other activities aim at further studying adaptation and fault tolerance in real-time systems using MAS technology .
Reference: [4] <author> Gruber, T., </author> <title> Toward Principles for the Design of Ontologies Used for Knowledge Sharing, </title> <type> Technical Report KSL-93-04, </type> <institution> Knowledge Systems Laboratory, Stanford University, USA, </institution> <year> 1993. </year>
Reference-contexts: Moreover, realizing checkpoints as indicated here is easily done according to most ideas about agents (without emptying the concept of agenthood). The principle of information hiding is also adopted (and generalized) in many efforts of MAS research. A common ontology for agent communication (Gruber <ref> [4] </ref>) gives in this context not only a tool for mutual understanding of messages, but it firewalls against faults within agents. Global consistency is not guaranteed, but inconsistencies are dealt with as they appear in agent communication. 1.
Reference: [5] <author> Hgg S., and Ygge F., </author> <title> Agent-Oriented Programming in Power Distribution Automation An Architecture, a Language, and their Applicability, Ph.L. </title> <type> Thesis, </type> <institution> LUNFD6/(NFCS-3094)/1-180/(1995), Lund University, Sweden, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Sections 3, 4, and 5 outline three basic principles for realizing fault tolerance: modularity, redundancy, and adaptation, and it is shown that a MAS approach in general conforms to these principles. Section 6 introduces the notion of sentinels as a method for realizing the given principles, used with DA-SoC <ref> [5] </ref>, an agent architecture developed in the SoC project. Section 7 then shows some sample scenarios. 2 Faults and Fault Tolerant Systems Real-time systems, either it is controlling the hardware of a computer , a manufacturing process, or a nuclear power plant, need to handle fault situations. <p> This is not the case with many suggested agent architectures, but there are examples of it, e.g. in Hgg and Ygge <ref> [5] </ref>, and there is nothing in the multi-agent paradigm that contradicts it. <p> The method is illustrated with a robot navigation problem. Although it is not clear how the method will work in the presence of faulty components, it shows how dependence on communication can be minimized. Semantic addressing Hgg and Ygge <ref> [5] </ref> propose an access mechanism called semantic addressing. Agents have an interaction model that filters messages according to their capabilities and the state of their respective world model. <p> The decision on checkpoints can be made as the sentinels are designed, as well as communication between the sentinels and between sentinels and operator terminals. It also means that the control system later can be modified without disturbing the running system. 7 Sample Scenarios Supervising negotiation Hgg and Ygge <ref> [5] </ref> present an example where DA-SoC agents are used for load balancing in power distribution. Distributor and customers operate on a spot market, where power is sold and bought 1 . The goal is to optimize the utilization of distribution lines, reducing load peaks, and avoiding overload in bottlenecks.
Reference: [6] <author> Hgg S., </author> <title> Adaptation in a Multi-Agent System through Semantic Addressing, </title> <booktitle> in Proceedings of the Workshop on Decentralized Intelligent and Multi-Agent Systems (DIMAS95), </booktitle> <address> Krakow, Poland, </address> <publisher> in press. </publisher>
Reference-contexts: When a message is sent, individual goals are set and plans are executed where the message contents is semantically meaningful according to the application def initions (figure 3). The DA-SoC architecture is developed for use in DA/DSM and HA (section 1). Hgg <ref> [6] </ref> shows how semantic addressing lets the society of agents adapt to a number of events.
Reference: [7] <author> Rosenschein J. R., and Zlotkin G., </author> <title> Rules of Encounter: Designing Conventions for Automated Negotiations among Computers , The MIT Press, </title> <note> 1994, ISBN 0-262-18159-2. </note>
Reference-contexts: Here, we shall briey outline three methods for realizing adaptive behaviour in a MAS, and our claim is that using these methods actually adds desirable properties to a fault tolerant system. Negotiation Negotiation schemes (see e.g. Rosenschein and Zlotkin <ref> [7] </ref>) have the advantage of dynamically deciding on the relationship between agents. Not only parameters, such as price and time, can be subject to negotiation, but important factors that in-uence the decision of problem solving methods.
Reference: [8] <author> Sen S., and Sekaran M., </author> <title> Multiagent coordination with learning classifier systems, </title> <booktitle> in Proceedings of the IJCAI95 Workshop on Adaptation and Learning in Multiagent Systems, </booktitle> <address> Montral, Canada, </address> <month> August 21, </month> <year> 1995. </year>
Reference-contexts: Multi-agent learning If negotiation relies heavily on agent communication, which can be both expensive and unreliable, there are learning methods presented that minimize the use of common information and thereby of communication. Sen and Sekaran <ref> [8] </ref> suggest a multi-agent learning method that relies on reinforcement from the environment instead of communication with other agents. The method is illustrated with a robot navigation problem.
References-found: 8

