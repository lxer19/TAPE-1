URL: http://www.cs.utexas.edu/users/ckpoon/thesis.ps
Refering-URL: http://www.cs.utexas.edu/users/ckpoon/
Root-URL: 
Title: On the Complexity of the st-Connectivity Problem  
Author: by Chung Keung Poon 
Degree: A thesis submitted in conformity with the requirements for the degree of Doctor of Philosophy  
Note: c flCopyright by Chung Keung Poon (1996)  
Address: Toronto  
Affiliation: Graduate Department of Computer Science University of  
Abstract-found: 0
Intro-found: 1
Reference: [AHV95] <author> Serge Abiteboul, Richard Hull, and Victor Vianu. </author> <title> Foundations of Databases. </title> <publisher> Addison Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Such a problem is said to be `complete' for the class under this type of reductions. In this respect, stcon has an added importance because it is complete for the complexity class N L under logspace reduction. (See [Jon75, JLL76] for more problems complete for N L; and <ref> [AHV95] </ref> for the relation between N L and relational database theory.) Two major open problems concerning N L are: Q1 0 Is N L = L? and Understanding the space complexity and time-space tradeoff of stcon seems to be the key to answering the above questions.
Reference: [AKL + 79] <author> R. Aleliunas, R. M. Karp, R. J. Lipton, L. Lovasz, and C. Rackoff. </author> <title> Random walks, universal traversal sequences, and the complexity of maze problems. </title> <booktitle> In 20th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 218-223, </pages> <address> San Juan, Puerto Rico, </address> <month> October </month> <year> 1979. </year> <note> IEEE. </note>
Reference: [AN72] <author> K. B. Athreya and P. E. Ney, </author> <title> editors. Branching Processes. </title> <publisher> Springer-verlag, </publisher> <address> Berlin, </address> <year> 1972. </year>
Reference-contexts: We first give an alternative definition of a branching process. For more standard definitions, see Athreya and Ney <ref> [AN72] </ref> for example. In the branching process, there is an infinite complete binary tree in which each edge has probability 1/4 of dying independent of the outcomes of the other edges.
Reference: [BBR + 90] <author> P. Beame, A. Borodin, P. Raghavan, W. L. Ruzzo, and M. Tompa. </author> <title> Time-space tradeoffs for undirected graph connectivity. </title> <booktitle> In 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 429-438, </pages> <address> St. Louis, MO, </address> <month> October </month> <year> 1990. </year> <note> IEEE. Full version submitted for journal publication. </note>
Reference-contexts: This pointer requires log T bits if M runs in 14 time T . If T 2 2 O (S) , each deterministic machine requires only O (S) space. However, if T 2 2 !(S) , then each machine requires !(S) space. For example, Borodin et al. <ref> [BBR + 90] </ref> shows that a deterministic WAG (a JAG whose pebbles are not allowed to jump) with p pebbles and q states satisfying pq 2 O (n) requires infinite time to traverse undirected cycles in the worst case. <p> However, this kind of comparison is not allowed in a JAG. In the next theorem, we show that a nondeterministic NNJAG is nearly as powerful as a nondeterministic Turing machine in solving graph theoretic problems. The inspirations were from Theorem 7 of Borodin et al. <ref> [BBR + 90] </ref> and a discussion with Allan Borodin and Stephen Cook. Note that any graph-theoretic decision problem H on a family of graphs G can be simply defined as a subset of G. Here we are interested in a family G of graphs called s-reachable graphs.
Reference: [BBRS92] <author> Greg Barnes, Jonathan F. Buss, Walter L. Ruzzo, and Baruch Schieber. </author> <title> A sublinear space, polynomial time algorithm for directed s-t connectivity. </title> <booktitle> In Proceedings, Structure in Complexity Theory, Seventh Annual Conference, </booktitle> <pages> pages 27-33, </pages> <address> Boston, MA, </address> <month> June </month> <year> 1992. </year> <note> IEEE. </note>
Reference-contexts: Nevertheless, these two results imply that stcon is in P " Polylogspace. Tompa [Tom82] shows that a certain natural approach, repeated squaring, for computing stcon has no implementation which runs in polynomial time and sub-linear space simultaneously. However, Barnes et al. <ref> [BBRS92] </ref> construct an algorithm which uses only n=2 ( p log n) space (which is sub-linear) while keeping polynomial running time. This shows that the repeated squaring method is too restricted. <p> For example, when S is at most n * for any constant 0 &lt; * &lt; 1, T is at least 2 ( log 2 n . This lower bound also closely matches the upper bound of Barnes et al. <ref> [BBRS92] </ref> which can be implemented on an NNJAG as implied by Chapter 4. The result presented in Chapter 5 is joint work with Edmonds. <p> In particular, S can be as small as n=2 ( p log n) while the running time is still bounded by a polynomial. In the following section, we describe the algorithm that runs on a RAM implied by Barnes et al. <ref> [BBRS92] </ref>. In Sections 4.2 and 4.3, we describe the simulations on the NNJAG model and the JAG model respectively. 4.1 The Barnes et al. algorithm We first define a generalization of stcon as follows. Let U and V be sets of nodes. <p> The Barnes et al. algorithm is constructed by combining a space-efficient breadth-first search and a time-efficient Savitch's algorithm. The latter algorithm solves instances of stcon l with l much smaller than n. As pointed out in <ref> [BBRS92] </ref>, such a problem retains a lot of difficulties that are present in stcon. We shall describe the modified Savitch's algorithm and breadth-first search in Section 4.1.1 and 4.1.2 respectively.
Reference: [BC82] <author> A. Borodin and S. A. Cook. </author> <title> A time-space tradeoff for sorting on a general sequential model of computation. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11(2) </volume> <pages> 287-297, </pages> <month> May </month> <year> 1982. </year> <month> 89 </month>
Reference-contexts: for answering questions (Q1 0 ) and 6 (Q2 0 ) are discussed. 7 Chapter 2 Models of Computation In this chapter, we formally define the JAG model of Cook and Rackoff [CR80], the Node-named JAG (or NNJAG) model and the r-way branching program (BP) model of Borodin and Cook <ref> [BC82] </ref> as they will be used in the following chapters. We also compare them with the well-known models of multitape Turing machines (TM) and Random Access Machines (RAM). We then define the probabilistic and nondeterministic NNJAG models. <p> We then define the probabilistic and nondeterministic NNJAG models. We conclude the chapter by showing that a nondeterministic NNJAG is nearly as powerful as a nondeterministic branching program for solving many graph theoretic problems. 2.1 The branching program model An r-way branching program <ref> [BC82] </ref> is a general model of computation, in fact the most general one among the five models mentioned in this chapter. It is a non-uniform model of computation. <p> Hence Theorem 5.2 follows for some suitably chosen constants c 0 and * 0 . We now prove Lemma 5.8. Proof of Lemma 5.8: (Base Case) The proof follows the same line of argument as introduced in [BFK + 81] and also used in Borodin and Cook <ref> [BC82] </ref>, Beame [Bea91], Borodin et al. [BFMadH + 87] and Yao [Yao88]. Let A be a sectioned branching program with at most T 1 =( 6S log n ) sections derived from some pebble location redundant NNJAG with at most S space.
Reference: [BE93] <author> Greg Barnes and Jeff Edmonds. </author> <title> Time-space lower bounds for di-rected s-t connectivity on JAG models. </title> <booktitle> In 34th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 228-237, </pages> <address> Palo Alto, CA, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: More precisely, they show that any randomized JAG solving stcon with at most 2 log c n time requires at least c 0 log 2 n= log log n space where c 0 is a constant depending on c. For the time-space tradeoff, Barnes and Edmonds <ref> [BE93] </ref> prove a lower bound of T = (n 2 =(S log n)) on the JAG model. <p> In Chapter 5, we give some evidence that stcon is not in SC and thus, that SC ( P " Polylogspace. In particular, we improve the lower bounds of Barnes and Edmonds <ref> [Edm93, BE93] </ref> to T = 2 ( log 2 (n log n=S) fi nS= log n on the probabilistic NNJAG model. This is the first result proved on a probabilistic NNJAG which gives a super-polynomial lower bound on time when S is sufficiently small. <p> Note that the reverse operation of copying an ordinary register to a pebble register is not allowed. There is evidence that the NNJAG model may be strictly stronger than the JAG model. For example, a more precise statement of a result in <ref> [BE93] </ref> is that pT 2 (n 2 = log 2 n) for a JAG that solves stcon with p pebbles. The result holds even if the JAG has an infinite number of states and the input is restricted to a particular class of graphs. <p> Sections 5.8 and 5.9 contains the proof of the two required technical lemmas for proving the Main Lemma. Finally, Section 5.10 extends the result to probabilistic NNJAGs that have 2-sided error. 47 5.1 Layered Graphs A (d; x)-layered graph, first defined in <ref> [BE93] </ref>, is a graph consisting of d layers, each containing x nodes. The layers are numbered from 1 to d. The width x is the number of nodes per layer. The j th node in layer i is denoted by u hi;ji . <p> The j th node in layer i is denoted by u hi;ji . Every node has at most two out-going edges to some (not necessarily distinct) nodes in the next layer. Intuitively, solving stcon for graphs containing a (d; x)-layered graph is difficult. As explained in <ref> [BE93] </ref>, if we connect node s to every node in the top layer of a (d; x)-layered graph, there may be as many as x2 d1 different paths from s to nodes in layer d. <p> Then we have ST = (n 2 = log n). In itself, this is a new result, extending the JAG result in <ref> [BE93] </ref> to probabilistic NNJAGs. The statement H (K), however, gives a stronger lower bound.
Reference: [Bea91] <author> P. Beame. </author> <title> A general time-space tradeoff for finding unique elements. </title> <journal> SIAM Journal on Computing, </journal> <volume> 20(2) </volume> <pages> 270-277, </pages> <year> 1991. </year>
Reference-contexts: Hence Theorem 5.2 follows for some suitably chosen constants c 0 and * 0 . We now prove Lemma 5.8. Proof of Lemma 5.8: (Base Case) The proof follows the same line of argument as introduced in [BFK + 81] and also used in Borodin and Cook [BC82], Beame <ref> [Bea91] </ref>, Borodin et al. [BFMadH + 87] and Yao [Yao88]. Let A be a sectioned branching program with at most T 1 =( 6S log n ) sections derived from some pebble location redundant NNJAG with at most S space.
Reference: [BFK + 81] <author> A. Borodin, M. J. Fischer, D. G. Kirkpatrick, N. A. Lynch, and M. Tompa. </author> <title> A time-space tradeoff for sorting on non-oblivious machines. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 22(3) </volume> <pages> 351-364, </pages> <month> June </month> <year> 1981. </year>
Reference-contexts: Lemma 5.6 (Main Lemma) shows that with high probability, any short subcomputation cannot make much progress. Then setting x 2 fi (n= log n), adding the nodes s and t with the appropriate edge connections and using a standard progress argument as introduced in Borodin et al. <ref> [BFK + 81] </ref>, we can obtain a lower bound of ST = (n 2 = log n). To obtain a larger lower bound, we need to consider layered graphs with height bigger than fi (log n) and develop new techniques. <p> Hence Theorem 5.2 follows for some suitably chosen constants c 0 and * 0 . We now prove Lemma 5.8. Proof of Lemma 5.8: (Base Case) The proof follows the same line of argument as introduced in <ref> [BFK + 81] </ref> and also used in Borodin and Cook [BC82], Beame [Bea91], Borodin et al. [BFMadH + 87] and Yao [Yao88].
Reference: [BFMadH + 87] <author> A. Borodin, F. Fich, F. Meyer auf der Heide, E. Upfal, and A. Wigderson. </author> <title> A time-space tradeoff for element distinctness. </title> <journal> SIAM Journal on Computing, </journal> <volume> 16(1) </volume> <pages> 97-99, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: In order to gain more insight into the problems, different structured models are considered for different problems. For example, comparison-based branching programs have been used to study the time-space tradeoff of the element distinctness problem by Borodin et al. <ref> [BFMadH + 87] </ref> and Yao [Yao88]. (See Borodin [Bor93] for a recent survey on time-space tradeoffs for various problems on various models.) For the st-connectivity problem, Cook and Rackoff [CR80] introduce a natural structured model called the Jumping Automaton for Graphs (JAG). <p> We now prove Lemma 5.8. Proof of Lemma 5.8: (Base Case) The proof follows the same line of argument as introduced in [BFK + 81] and also used in Borodin and Cook [BC82], Beame [Bea91], Borodin et al. <ref> [BFMadH + 87] </ref> and Yao [Yao88]. Let A be a sectioned branching program with at most T 1 =( 6S log n ) sections derived from some pebble location redundant NNJAG with at most S space.
Reference: [Bor93] <author> Allan Borodin. </author> <title> Time-space tradeoffs (getting closer to the barrier?). </title> <address> pages 209-220, </address> <year> 1993. </year> <note> LNCS 762. </note>
Reference-contexts: In order to gain more insight into the problems, different structured models are considered for different problems. For example, comparison-based branching programs have been used to study the time-space tradeoff of the element distinctness problem by Borodin et al. [BFMadH + 87] and Yao [Yao88]. (See Borodin <ref> [Bor93] </ref> for a recent survey on time-space tradeoffs for various problems on various models.) For the st-connectivity problem, Cook and Rackoff [CR80] introduce a natural structured model called the Jumping Automaton for Graphs (JAG).
Reference: [BS83] <author> Piotr Berman and Janos Simon. </author> <title> Lower bounds on graph threading by probabilistic machines. </title> <booktitle> In 24th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 304-311, </pages> <address> Tucson, AZ, </address> <month> November </month> <year> 1983. </year> <note> IEEE. </note>
Reference-contexts: First, Cook and Rackoff [CR80] prove a space lower bound of (log 2 n= log log n) which almost matches the upper bound of O (log 2 n). This result is then extended by Berman and Simon <ref> [BS83] </ref> to a randomized JAG. More precisely, they show that any randomized JAG solving stcon with at most 2 log c n time requires at least c 0 log 2 n= log log n space where c 0 is a constant depending on c. <p> In Chapter 3, we extend the space lower bound of Cook and Rackoff [CR80] on the JAG model, as well as that of Berman and Simon <ref> [BS83] </ref> on the randomized JAG model, to the probabilistic NNJAG model. Thus, we believe we are a step closer towards separating L from N L. Note that the result of Etessami and Immerman [EI94] gives a super-logarithmic space lower bound on a more general computation model. <p> More specifically, it can only perform (=; 6=)-comparisons on the registers in the pebble space. The BP, NNJAG and JAG are all non-uniform models because the transition function need only work for one input size. 2.5 Probabilistic NNJAGs Following <ref> [BS83] </ref> we introduce randomness to an NNJAG J by allowing the machine to access a number of fresh random bits at each step. The transition function ffi is then extended so that it depends on the random bits as well. <p> Following the proof technique of [CR80] and <ref> [BS83] </ref>, we prove Lemma 3.2 by first defining a class of graphs called skinny trees from which the worst case graph for the NNJAG will be chosen. Our graphs are recursively constructed as in [CR80, BS83] and are simpler than those in [BS83]. <p> Following the proof technique of [CR80] and [BS83], we prove Lemma 3.2 by first defining a class of graphs called skinny trees from which the worst case graph for the NNJAG will be chosen. Our graphs are recursively constructed as in <ref> [CR80, BS83] </ref> and are simpler than those in [BS83]. Then we characterize a sub-computation of an NNJAG on this type of graph according to the level of "cooperation" among the pebbles during this subcomputation. <p> Following the proof technique of [CR80] and <ref> [BS83] </ref>, we prove Lemma 3.2 by first defining a class of graphs called skinny trees from which the worst case graph for the NNJAG will be chosen. Our graphs are recursively constructed as in [CR80, BS83] and are simpler than those in [BS83]. Then we characterize a sub-computation of an NNJAG on this type of graph according to the level of "cooperation" among the pebbles during this subcomputation. Finally, we prove an inductive statement on sub-computations of various levels of pebble cooperation from which Lemma 3.2 follows trivially. <p> The smaller the number of blocks is, the higher is the cooperation. This is one of the key ingredients in the proofs of [CR80] and <ref> [BS83] </ref>. 23 3.1.3 k-computations We now consider subcomputations of an NNJAG on a skinny tree with various levels of cooperation among the pebbles. <p> In the following sections, we describe some new thoughts in the first direction and briefly mentioned the second one. 6.1 Variations of JAGs/NNJAGs The main weakness of a JAG or NNJAG is its restricted access to the inputs. As pointed out in [EI94], the space lower bounds of <ref> [CR80, BS83] </ref> and that in Chapter 3, are proved on a tree. However, it is easy for a RAM to solve stcon on trees in O (log n) space. All it needs to do is to walk a "pebble" from node t backward and see if it hits node s.
Reference: [CR80] <author> S. A. Cook and C. W. Rackoff. </author> <title> Space lower bounds for maze threadability on restricted machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 9(3) </volume> <pages> 636-652, </pages> <month> August </month> <year> 1980. </year>
Reference-contexts: example, comparison-based branching programs have been used to study the time-space tradeoff of the element distinctness problem by Borodin et al. [BFMadH + 87] and Yao [Yao88]. (See Borodin [Bor93] for a recent survey on time-space tradeoffs for various problems on various models.) For the st-connectivity problem, Cook and Rackoff <ref> [CR80] </ref> introduce a natural structured model called the Jumping Automaton for Graphs (JAG). Informally, a JAG has a set of pebbles which have the dual purpose of marking the nodes in the input graph and gathering information about the input. <p> For example, depth- and breadth-first search can both be translated directly to JAG algorithms. Cook and Rackoff <ref> [CR80] </ref> show how to simulate Savitch's algorithm using effectively the same time and space resources. There has been much more success in proving lower bounds on this structured model. First, Cook and Rackoff [CR80] prove a space lower bound of (log 2 n= log log n) which almost matches the upper <p> Cook and Rackoff <ref> [CR80] </ref> show how to simulate Savitch's algorithm using effectively the same time and space resources. There has been much more success in proving lower bounds on this structured model. First, Cook and Rackoff [CR80] prove a space lower bound of (log 2 n= log log n) which almost matches the upper bound of O (log 2 n). This result is then extended by Berman and Simon [BS83] to a randomized JAG. <p> Using the same technique, we show that a nondeterministic NNJAG is essentially as powerful as a nondeterministic branching program in solving a large class of graph-theoretic problems. In Chapter 3, we extend the space lower bound of Cook and Rackoff <ref> [CR80] </ref> on the JAG model, as well as that of Berman and Simon [BS83] on the randomized JAG model, to the probabilistic NNJAG model. Thus, we believe we are a step closer towards separating L from N L. <p> Finally, in Chapter 6, some future directions for answering questions (Q1 0 ) and 6 (Q2 0 ) are discussed. 7 Chapter 2 Models of Computation In this chapter, we formally define the JAG model of Cook and Rackoff <ref> [CR80] </ref>, the Node-named JAG (or NNJAG) model and the r-way branching program (BP) model of Borodin and Cook [BC82] as they will be used in the following chapters. We also compare them with the well-known models of multitape Turing machines (TM) and Random Access Machines (RAM). <p> The time used is the number of moves it has made. 2.2.2 The uniform model To motivate the above definition and to provide a model for easier description of JAG algorithms, we define a uniform JAG model called the RAM-JAG model. A 1 In <ref> [CR80] </ref>, the input graph is not labelled. <p> Following the proof technique of <ref> [CR80] </ref> and [BS83], we prove Lemma 3.2 by first defining a class of graphs called skinny trees from which the worst case graph for the NNJAG will be chosen. Our graphs are recursively constructed as in [CR80, BS83] and are simpler than those in [BS83]. <p> Following the proof technique of [CR80] and [BS83], we prove Lemma 3.2 by first defining a class of graphs called skinny trees from which the worst case graph for the NNJAG will be chosen. Our graphs are recursively constructed as in <ref> [CR80, BS83] </ref> and are simpler than those in [BS83]. Then we characterize a sub-computation of an NNJAG on this type of graph according to the level of "cooperation" among the pebbles during this subcomputation. <p> The smaller the number of blocks is, the higher is the cooperation. This is one of the key ingredients in the proofs of <ref> [CR80] </ref> and [BS83]. 23 3.1.3 k-computations We now consider subcomputations of an NNJAG on a skinny tree with various levels of cooperation among the pebbles. <p> In the following sections, we describe some new thoughts in the first direction and briefly mentioned the second one. 6.1 Variations of JAGs/NNJAGs The main weakness of a JAG or NNJAG is its restricted access to the inputs. As pointed out in [EI94], the space lower bounds of <ref> [CR80, BS83] </ref> and that in Chapter 3, are proved on a tree. However, it is easy for a RAM to solve stcon on trees in O (log n) space. All it needs to do is to walk a "pebble" from node t backward and see if it hits node s.
Reference: [Edm93] <author> Jeff Edmonds. </author> <title> Time-Space Lower Bounds for Undirected and Directed ST-Connectivity on JAG Models. </title> <type> PhD thesis, </type> <institution> University of Toronto, </institution> <year> 1993. </year>
Reference-contexts: For the time-space tradeoff, Barnes and Edmonds [BE93] prove a lower bound of T = (n 2 =(S log n)) on the JAG model. On a more general model called the NNJAG 4 model (Node Named JAG), to be defined in the next chapter, Edmonds <ref> [Edm93] </ref> proves a lower bound of T = (n 4=3 =S 1=3 ). However, there is still a big gap between the upper and lower bounds. In particular, the above results do not yield any super-polynomial lower bound on time T no matter how small the space S becomes. <p> In Chapter 5, we give some evidence that stcon is not in SC and thus, that SC ( P " Polylogspace. In particular, we improve the lower bounds of Barnes and Edmonds <ref> [Edm93, BE93] </ref> to T = 2 ( log 2 (n log n=S) fi nS= log n on the probabilistic NNJAG model. This is the first result proved on a probabilistic NNJAG which gives a super-polynomial lower bound on time when S is sufficiently small. <p> By Lemma 14 in Edmonds <ref> [Edm93] </ref>, Pr G2B k w 00 S j G 2 B k (E fl ) 2 log n )(log ( S 2 10S provided b is big enough. <p> This completes 80 the proof of the claim. 5.10 Probabilistic NNJAGs with 2-sided error The above can be extended to 2-sided error but not as straight-forward as in Chapter 3. Here, we use a similar technique as used in Edmonds <ref> [Edm93] </ref>. Theorem 5.10 There is a positive integer n o and positive constants * 1 and c 0 1 such that for any n n 0 and any S *n= log n, there is a distribution 0 on n-node directed graphs G such that 1.
Reference: [EI94] <author> Kousha Etessami and Neil Immerman. </author> <title> Reachability and the power of local ordering. </title> <booktitle> In 11th Annual Symposium on Theoretical Aspects 90 of Computer Science, </booktitle> <pages> pages 123-135, </pages> <month> February </month> <year> 1994. </year> <note> Springer-Verlag LNCS 775. </note>
Reference-contexts: Thus separating N L and L amounts to showing that stcon is not expressible in (FO+DTC) over ordered structures. Gradel and McColm [GM92] show that stcon is not expressible in (FO+DTC) over unordered structures. Recently, Etessami and Immerman <ref> [EI94] </ref> have extended this result to one-way locally ordered structures. 1.4 Contributions and organization of this thesis In this thesis, we take a step further in understanding the space and time-space complexities of stcon. <p> Thus, we believe we are a step closer towards separating L from N L. Note that the result of Etessami and Immerman <ref> [EI94] </ref> gives a super-logarithmic space lower bound on a more general computation model. However, the bound they achieved is only !(log n) which is smaller than (log 2 n= log log n). <p> In the following sections, we describe some new thoughts in the first direction and briefly mentioned the second one. 6.1 Variations of JAGs/NNJAGs The main weakness of a JAG or NNJAG is its restricted access to the inputs. As pointed out in <ref> [EI94] </ref>, the space lower bounds of [CR80, BS83] and that in Chapter 3, are proved on a tree. However, it is easy for a RAM to solve stcon on trees in O (log n) space. <p> Proving lower bounds on this model may still be possible. 6.2 Finite Model Theory As mentioned in Chapter 1, another approach to separating N L and L is to show that stcon is not expressible in (FO+DTC) over ordered structure. Following the recent work by <ref> [EI94] </ref> which extended the result of [GM92] by adding 1-way local 87 ordering to an unordered structure, one can think of ways to add more to a 1-way locally ordered structure and prove a similar result. One natural generalization is the 2-way locally ordered structure.
Reference: [Ete95] <author> Kousha Etessami. </author> <title> Ordering and Descriptive Complexity. </title> <type> PhD thesis, </type> <institution> University of Massachusetts-Amherst, </institution> <year> 1995. </year>
Reference-contexts: Nisan and Ta-Shma's SL-algorithm [NTS95] for solving ustcon also seems to rely on the relative ordering of the input structure. For more about the ordering on input structures, see Etessami's thesis <ref> [Ete95] </ref>. 18 Chapter 3 A Space Lower Bound In this chapter, we prove a space lower bound for stcon on the probabilistic NNJAG model. <p> One natural generalization is the 2-way locally ordered structure. It is interesting to compare it with the 2-way NNJAG. For more details, please see Etessami <ref> [Ete95] </ref>. 88
Reference: [Gil77] <author> J. Gill. </author> <title> Computational complexity of probabilistic Turing machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(4) </volume> <pages> 675-695, </pages> <month> December </month> <year> 1977. </year>
Reference-contexts: For proving space lower bounds, results of Gill <ref> [Gil77] </ref> show that a probabilistic machine with unbounded time can actually have nondeterministic power. For example, given unbounded time, a probabilistic JAG with 1 pebble and n O (1) states can solve (directed) stcon with high probability.
Reference: [GM92] <author> E. Gradel and G. McColm. </author> <title> Deterministic vs. nondeterministic transitive closure logic. </title> <booktitle> In 7th IEEE Conference on Logic in Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: Similarly, L = (FO+DTC) over ordered structures where DTC stands for the Deterministic Transitive Closure operator. Thus separating N L and L amounts to showing that stcon is not expressible in (FO+DTC) over ordered structures. Gradel and McColm <ref> [GM92] </ref> show that stcon is not expressible in (FO+DTC) over unordered structures. Recently, Etessami and Immerman [EI94] have extended this result to one-way locally ordered structures. 1.4 Contributions and organization of this thesis In this thesis, we take a step further in understanding the space and time-space complexities of stcon. <p> Following the recent work by [EI94] which extended the result of <ref> [GM92] </ref> by adding 1-way local 87 ordering to an unordered structure, one can think of ways to add more to a 1-way locally ordered structure and prove a similar result. One natural generalization is the 2-way locally ordered structure. It is interesting to compare it with the 2-way NNJAG.
Reference: [Imm87] <author> Neil Immerman. </author> <title> Languages that capture complexity classes. </title> <journal> SIAM Journal on Computing, </journal> <volume> 16(4) </volume> <pages> 760-778, </pages> <year> 1987. </year>
Reference-contexts: There are also other approaches to answering question (Q1 0 ). It has been shown that there is a significant relationship between complexity theory and finite model theory (also known as descriptive complexity). Many complexity classes can be characterized in terms of logic. (See Immerman <ref> [Imm87] </ref> for example.) In particular, the st-connectivity property of a graph can be expressed as a First-Order logic (FO) sentence containing a Transitive Closure (TC) operator, provided an ordering is imposed on the graph. Conversely, any property expressible in (FO+TC) over ordered structures can be checked in N L.
Reference: [Imm88] <author> Neil Immerman. </author> <title> Nondeterministic space is closed under complementation. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17(5) </volume> <pages> 935-938, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: On the other hand, we show that a nondeterministic NNJAG can solve stcon in O (log n) space by simulating Immerman/Szelepcsenyi's inductive counting technique <ref> [Imm88, Sze88] </ref>. Using the same technique, we show that a nondeterministic NNJAG is essentially as powerful as a nondeterministic branching program in solving a large class of graph-theoretic problems.
Reference: [JLL76] <author> N. D. Jones, Y. E. Lien, and W. T. Laaser. </author> <title> New problems complete for nondeterministic log space. </title> <journal> Mathematical Systems Theory, </journal> <volume> 10 </volume> <pages> 1-17, </pages> <year> 1976. </year>
Reference-contexts: Such a problem is said to be `complete' for the class under this type of reductions. In this respect, stcon has an added importance because it is complete for the complexity class N L under logspace reduction. (See <ref> [Jon75, JLL76] </ref> for more problems complete for N L; and [AHV95] for the relation between N L and relational database theory.) Two major open problems concerning N L are: Q1 0 Is N L = L? and Understanding the space complexity and time-space tradeoff of stcon seems to be the key
Reference: [Joh90] <author> David S. Johnson. </author> <title> A catalog of complexity classes. </title> <editor> In Jan van Leeuwan, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume A: Algorithms and Complexity, chapter 2, </booktitle> <pages> pages 67-161. </pages> <publisher> M.I.T. </publisher> <address> Press/Elsevier, </address> <year> 1990. </year>
Reference-contexts: As is well known, stcon is in P "Polylogspace. 2 Therefore, proving that stcon is not in SC would also prove that SC ( P " Polylogspace, which is another long-standing conjecture in complexity theory <ref> [Joh90] </ref>. 1.2 Previous results on random access machines On a determinstic random access machine, depth- and breadth- first search are well known algorithms that solve stcon in O (n + m) time using O (n log n) space where n and m are the number of nodes and edges respectively.
Reference: [Jon75] <author> N. D. Jones. </author> <title> Space-bounded reducibility among combinatorial problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 11 </volume> <pages> 68-85, </pages> <year> 1975. </year>
Reference-contexts: Such a problem is said to be `complete' for the class under this type of reductions. In this respect, stcon has an added importance because it is complete for the complexity class N L under logspace reduction. (See <ref> [Jon75, JLL76] </ref> for more problems complete for N L; and [AHV95] for the relation between N L and relational database theory.) Two major open problems concerning N L are: Q1 0 Is N L = L? and Understanding the space complexity and time-space tradeoff of stcon seems to be the key
Reference: [NTS95] <author> Noam Nisan and Amnon Ta-Shma. </author> <title> Symmetric logspace is closed under complement. </title> <booktitle> In Proceedings of the Twenty Seventh Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 140-146, </pages> <address> Las Vegas, NV, </address> <month> May </month> <year> 1995. </year> <month> 91 </month>
Reference-contexts: This seems to show that the relative ordering of the input structure is important for solving the stcon problem. Nisan and Ta-Shma's SL-algorithm <ref> [NTS95] </ref> for solving ustcon also seems to rely on the relative ordering of the input structure.
Reference: [Pip92] <author> Nicholas Pippenger. </author> <title> The asymptotic optimality of spider-web net-works. </title> <journal> Discrete Applied Mathematics, </journal> 37/38:437-450, 1992. 
Reference-contexts: The value of p 0 r can be estimated as follows. Let N d be the number of living nodes 70 at layer d in a standard branching process. Lemma 8.1 of Pippenger <ref> [Pip92] </ref> says Pr N d ( 3 fl 9 + O (2 ud ) provided both u and d u tend to infinity. Recall that D = b log n and that the subtree rooted at u i where i 2 [1::2D=3] has height D i + 1 D=3.
Reference: [Poo93] <author> C.K. Poon. </author> <title> Space bounds for graph connectivity problems on node-named JAGs and node-ordered JAGs. </title> <booktitle> In 34th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 218-227, </pages> <address> Palo Alto, CA, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Finally, we prove an inductive statement on sub-computations of various levels of pebble cooperation from which Lemma 3.2 follows trivially. The proof uses a simpler counting argument than that used in <ref> [Poo93] </ref>. 3.1.1 The skinny trees Let d be an integer parameter to be chosen later and let ff 2 f0; 1g d .
Reference: [Sav70] <author> W. J. Savitch. </author> <title> Relationships between nondeterministic and deterministic tape complexities. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 4(2) </volume> <pages> 177-192, </pages> <year> 1970. </year>
Reference-contexts: For example, proving that there is no deterministic O (log n) space algorithm for stcon would separate the classes L and N L. On the other hand, devising such an algorithm would show that N L = L. By a padding argument <ref> [Sav70] </ref>, such an algorithm would in fact imply that DSPACE (f (n)) = NSPACE (f (n)) for any space constructible function f (n) 2 (log n). <p> The running time is optimal because at least (n + m) time is needed to access every edge and every node in the graph. At the other extreme, Savitch's algorithm <ref> [Sav70] </ref> requires only O (log 2 n) space which is currently the smallest space achievable. The main drawback is, however, that it takes 2 O (log 2 n) time. Nevertheless, these two results imply that stcon is in P " Polylogspace.
Reference: [Sav73] <author> W. J. Savitch. </author> <title> Maze recognizing automata and nondeterministic tape complexity. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 7(4) </volume> <pages> 389-403, </pages> <year> 1973. </year>
Reference-contexts: In Chapter 2, we introduce the NNJAG (Node named JAG) model which is a generalization of the JAG model. It follows from <ref> [Sav73] </ref> that if we further allow an NNJAG to perform the strong jumping operations, then the resulting machine is as powerful as a branching program for solving graph theoretic problems. <p> Proof: It is shown in Savitch <ref> [Sav73] </ref> that a nondeterministic JAG with strong jumping can simulate an arbitrary nondeterministic Turing machine efficiently. A strong jump in a JAG is a move of the form: jump pebble P from its current node u, say, to node u + 1modn and assume state Q.
Reference: [Sze88] <author> Robert Szelepcsenyi. </author> <title> The method of forcing for nondeterministic automata. </title> <journal> Acta Informatica, </journal> <volume> 26 </volume> <pages> 279-284, </pages> <year> 1988. </year>
Reference-contexts: On the other hand, we show that a nondeterministic NNJAG can solve stcon in O (log n) space by simulating Immerman/Szelepcsenyi's inductive counting technique <ref> [Imm88, Sze88] </ref>. Using the same technique, we show that a nondeterministic NNJAG is essentially as powerful as a nondeterministic branching program in solving a large class of graph-theoretic problems.
Reference: [Tom82] <author> Martin Tompa. </author> <title> Two familiar transitive closure algorithms which admit no polynomial time, sublinear space implementations. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11(1) </volume> <pages> 130-137, </pages> <month> February </month> <year> 1982. </year>
Reference-contexts: At the other extreme, Savitch's algorithm [Sav70] requires only O (log 2 n) space which is currently the smallest space achievable. The main drawback is, however, that it takes 2 O (log 2 n) time. Nevertheless, these two results imply that stcon is in P " Polylogspace. Tompa <ref> [Tom82] </ref> shows that a certain natural approach, repeated squaring, for computing stcon has no implementation which runs in polynomial time and sub-linear space simultaneously. However, Barnes et al. [BBRS92] construct an algorithm which uses only n=2 ( p log n) space (which is sub-linear) while keeping polynomial running time.
Reference: [Yao77] <author> A. C. Yao. </author> <title> Probabilistic computations: Toward a unified measure of complexity. </title> <booktitle> In 18th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 222-227, </pages> <address> Providence, RI, </address> <month> October </month> <year> 1977. </year> <note> IEEE. </note>
Reference-contexts: By Theorem 1 in Yao <ref> [Yao77] </ref>, there exists ff 1 ; : : : ; ff p such that Pr R [ M p (R; ff 1 ; : : : ; ff p ) ] &lt; 1/2. <p> For all deterministic NNJAG J R and graph G, let r (J R ; G) = 1 if and only if J R rejects G. Theorem 1 of Yao <ref> [Yao77] </ref> implies that for any NNJAG distribution J and any graph distribution G, min X Pr G2G [ G ] r (J R ; G) max X Pr J R 2J [ J R ] r (J R ; G) or equivalently, min Pr G2G [ J R rejects G ]
Reference: [Yao88] <author> A. C. Yao. </author> <title> Near-optimal time-space tradeoff for element distinctness. </title> <booktitle> In 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 91-97, </pages> <address> White Plains, NY, </address> <month> October </month> <year> 1988. </year> <journal> IEEE. </journal> <volume> 92 </volume>
Reference-contexts: In order to gain more insight into the problems, different structured models are considered for different problems. For example, comparison-based branching programs have been used to study the time-space tradeoff of the element distinctness problem by Borodin et al. [BFMadH + 87] and Yao <ref> [Yao88] </ref>. (See Borodin [Bor93] for a recent survey on time-space tradeoffs for various problems on various models.) For the st-connectivity problem, Cook and Rackoff [CR80] introduce a natural structured model called the Jumping Automaton for Graphs (JAG). <p> We now prove Lemma 5.8. Proof of Lemma 5.8: (Base Case) The proof follows the same line of argument as introduced in [BFK + 81] and also used in Borodin and Cook [BC82], Beame [Bea91], Borodin et al. [BFMadH + 87] and Yao <ref> [Yao88] </ref>. Let A be a sectioned branching program with at most T 1 =( 6S log n ) sections derived from some pebble location redundant NNJAG with at most S space.
References-found: 32

