URL: http://www.cs.wisc.edu/~zhao/sigmod97.ps
Refering-URL: http://www.cs.wisc.edu/~zhao/zhao.html
Root-URL: 
Email: zhao@cs.wisc.edu  pmd@cs.wisc.edu  naughton@cs.wisc.edu  
Title: An Array-Based Algorithm for Simultaneous Multidimensional Aggregates  
Author: Yihong Zhao Prasad M. Deshpande Jeffrey F. Naughton 
Affiliation: Computer Sciences Department University of Wisconsin-Madison  Computer Sciences Department University of Wisconsin-Madison  Computer Sciences Department University of Wisconsin-Madison  
Abstract: Computing multiple related group-bys and aggregates is one of the core operations of On-Line Analytical Processing (OLAP) applications. Recently, Gray et al. [GBLP95] proposed the "Cube" operator, which computes group-by aggregations over all possible subsets of the specified dimensions. The rapid acceptance of the importance of this operator has led to a variant of the Cube being proposed for the SQL standard. Several efficient algorithms for Relational OLAP (ROLAP) have been developed to compute the Cube. However, to our knowledge there is nothing in the literature on how to compute the Cube for Multidimensional OLAP (MOLAP) systems, which store their data in sparse arrays rather than in tables. In this paper, we present a MOLAP algorithm to compute the Cube, and compare it to a leading ROLAP algorithm. The comparison between the two is interesting, since although they are computing the same function, one is value-based (the ROLAP algorithm) whereas the other is position-based (the MOLAP algorithm.) Our tests show that, given appropriate compression techniques, the MOLAP algorithm is significantly faster than the RO-LAP algorithm. In fact, the difference is so pronounced that this MOLAP algorithm may be useful for ROLAP systems as well as MOLAP systems, since in many cases, instead of cubing a table directly, it is faster to first convert the table to an array, cube the array, then convert the result back to a table. 
Abstract-found: 1
Intro-found: 1
Reference: [AADN96] <author> S. Agarwal, R. Agrawal, P. Deshpande, J. Naughton, S. Sarawagi and R. Ramakrishnan. </author> <title> "On the Computation of Multidimensional Aggregates". </title> <booktitle> In Proceedings of the 22nd International Conference on Very Large Databases, </booktitle> <address> Mumbai (Bombay), </address> <year> 1996. </year>
Reference-contexts: Returning to our example, a cell of the array might be represented by the tuple (shoes, WestTown, 3-July-96, $34.00). Computing the cube over such a table requires a generalization of standard relational aggregation operators <ref> [AADN96] </ref>. In prior work, three main ideas have been used to make ROLAP computation efficient: 1. Using some sort of grouping operation on the dimension attributes to bring together related tuples (e.g., sorting or hashing), 2. <p> A moment's thought shows that this is a very bad idea; it is far more efficient to compute A from AB than it is to compute A from ABC. This idea has been explored in the ROLAP cube computation literature <ref> [AADN96] </ref>. If we look at an entire cube computation, the aggregates to be computed can be viewed as a lattice, with ABC as the root. ABC has children AB, BC, and AC; AC has children A and C, and so forth. <p> We call these subtrees "incomplete subtrees." We need to use some extra steps to compute the group-bys included in the incomplete subtrees. The problem of allocating memory optimally to the different subtrees is similar to the one described in <ref> [AADN96] </ref> and is likely to be NP-hard. We use a heuristic of allocating memory to subtrees of the root from the right to left order. For example, in Figure 1, the order in which the subtrees are considered is BC, AC and then AB. <p> We used the Overlap method from <ref> [AADN96] </ref> as a benchmark for this comparison. In ROLAP the data is stored as tables. Computing the cube on a table produces a set of result tables representing the group-bys. On the other hand, in MOLAP data is stored as sparse multidimensional arrays.
Reference: [AS] <author> Arbor Software. </author> <title> "The Role of the Multidimensional Database in a Data Warehousing Solution". </title> <type> White Paper, </type> <institution> Arbor Software. </institution> <note> http://www.arborsoft.com/papers/wareTOC.html </note>
Reference-contexts: To compute an aggregate from another aggregate, rather than from the (presumably much larger) base table. By contrast, MOLAP systems (for example, Essbase from Arbor Software <ref> [CCS93, RJ, AS] </ref>, Express from Oracle [OC], and LightShip from Pilot [PSW]) store their data as sparse arrays.
Reference: [CCS93] <author> E.F. Codd, </author> <title> S.B. Codd, and C.T. Salley. "Providing OLAP (On-line Analytical Processing) to User-Analysts: An IT Mandate", </title> <type> White Paper, </type> <institution> E.F. Codd and Associates. </institution> <note> http://www.arborsoft.com/papers/coddTOC.html </note>
Reference-contexts: To compute an aggregate from another aggregate, rather than from the (presumably much larger) base table. By contrast, MOLAP systems (for example, Essbase from Arbor Software <ref> [CCS93, RJ, AS] </ref>, Express from Oracle [OC], and LightShip from Pilot [PSW]) store their data as sparse arrays.
Reference: [DKOS84] <author> D. Dewitt, R. Katz, G. Olken, L. Shapiro, M. Stonebraker, D. Wood. </author> <title> "Implementation Techniques for Main Memory Database Systems". </title> <booktitle> In Proceedings of SIGMOD, </booktitle> <address> Boston, </address> <year> 1984. </year>
Reference-contexts: One optimization is to compute the chunks of the first partition in the first pass. After we allocate each partition a buffer page, we allocate the rest of available memory to the buckets for the first partition. This is similar to techniques used in the Hybrid Hash Join algorithm <ref> [DKOS84] </ref> to keep the "first bucket" in memory. 3 A Basic Array Cubing Algorithm We first introduce an algorithm to compute the cube of a chunked array in multiple passes by using minimum memory.
Reference: [GBLP95] <author> J. Gray, A. Bosworth, A.Layman, and H.Pirahesh. </author> <title> "Data Cube: A relational aggregation operator generalizing group-by, cross-tabs and sub-totals. </title> <type> Technical Report MSR-TR-95-22, </type> <institution> Microsoft Research, Advance Technology Division, Microsoft Corporation, Redmond, </institution> <year> 1995. </year>
Reference-contexts: 1 Introduction Computing multiple related group-bys and aggregates is one of the core operations of On-Line Analytical Processing (OLAP) applications. Recently, Gray et al. <ref> [GBLP95] </ref> proposed the "Cube" operator, which computes group-by aggregations over all possible subsets of the specified dimensions.
Reference: [GC96] <author> G. Colliad. </author> <title> "OLAP, Relational, and Multidimensional Database Systems". </title> <booktitle> SIGMOD Record, </booktitle> <volume> Vol. 25. No. 3, </volume> <month> September </month> <year> 1996. </year>
Reference: [IA] <institution> Information Advantage. </institution> <note> "OLAP Scaling to the Masses". White Paper, Information Advantage. http://www.infoadvan.com/ </note>
Reference-contexts: MOLAP systems present a different sort of challenge in computing the cube than do ROLAP systems. The main reason for this is the fundamental difference in the data structures in which the two systems store their data. RO-LAP systems (for example, MicroStrategy [MS], Informix's Metacube [MC], and Information Advantage <ref> [IA] </ref>) by definition use relational tables as their data structure.
Reference: [MC] <institution> Stanford Technology Group, Inc. "INFORMIX-MetaCube". Product Brochure. </institution> <address> http://www.informix.com/informix/products/ new plo/stgbroch/brochure.html </address>
Reference-contexts: MOLAP systems present a different sort of challenge in computing the cube than do ROLAP systems. The main reason for this is the fundamental difference in the data structures in which the two systems store their data. RO-LAP systems (for example, MicroStrategy [MS], Informix's Metacube <ref> [MC] </ref>, and Information Advantage [IA]) by definition use relational tables as their data structure.
Reference: [MS] <author> MicroStrategy Incorporated. </author> <title> "The Case For Relational OLAP". </title> <type> White Paper, </type> <institution> MicroStrategy Incorporated. </institution> <address> http://www.strategy.com/dwf/wp b al.html </address>
Reference-contexts: MOLAP systems present a different sort of challenge in computing the cube than do ROLAP systems. The main reason for this is the fundamental difference in the data structures in which the two systems store their data. RO-LAP systems (for example, MicroStrategy <ref> [MS] </ref>, Informix's Metacube [MC], and Information Advantage [IA]) by definition use relational tables as their data structure.
Reference: [OC] <author> Oracle Corporation. </author> <title> "Oracle OLAP Products". </title> <type> White Paper, </type> <institution> Oracle Corporation. </institution> <note> http://www.oracle.com/products/collatrl/olapwp.pdf </note>
Reference-contexts: To compute an aggregate from another aggregate, rather than from the (presumably much larger) base table. By contrast, MOLAP systems (for example, Essbase from Arbor Software [CCS93, RJ, AS], Express from Oracle <ref> [OC] </ref>, and LightShip from Pilot [PSW]) store their data as sparse arrays.
Reference: [PSW] <author> Pilot Software. </author> <title> "An Introduction to OLAP". </title> <note> White Paper, Pilot Software. http://www.pilotsw.com/r and t/whtpaper/olap/olap.htm </note>
Reference-contexts: To compute an aggregate from another aggregate, rather than from the (presumably much larger) base table. By contrast, MOLAP systems (for example, Essbase from Arbor Software [CCS93, RJ, AS], Express from Oracle [OC], and LightShip from Pilot <ref> [PSW] </ref>) store their data as sparse arrays.
Reference: [RJ] <author> Arbor Software Corporation, Robert J. Earle, </author> <month> U.S.Patent # 5359724 </month>
Reference-contexts: To compute an aggregate from another aggregate, rather than from the (presumably much larger) base table. By contrast, MOLAP systems (for example, Essbase from Arbor Software <ref> [CCS93, RJ, AS] </ref>, Express from Oracle [OC], and LightShip from Pilot [PSW]) store their data as sparse arrays.
Reference: [SM94] <author> Sunita Sarawagi, Michael Stonebraker, </author> <title> "Efficient Organization of Large Multidimensional Arrays". </title> <booktitle> In Proceedings of the Eleventh International Conference on Data Engineering, </booktitle> <address> Houston, TX, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: The simple row major layout creates an asymmetry among the dimensions, favoring one over the other. This is because data is accessed from disk in units of pages. To have a uniform treatment for all the dimensions, we can chunk the array, as suggested by Sarawagi <ref> [SM94] </ref>. Chunking is a way to divide an n-dimensional array into small size n-dimensional chunks and store each chunk as one object on disk. Each array chunk has n dimensions and will correspond to the blocking size on the disk.
Reference: [Wel84] <author> T. A. Welch. </author> <title> "A Technique for High-Performance Data Compression". </title> <journal> IEEE Computer, </journal> <volume> 17(6), </volume> <year> 1984. </year>
Reference-contexts: Since in this representation chunks will be of variable length, we use some meta data to hold the length of each chunk and store the meta data at the beginning of the data file. We also experimented with compressing the array chunks using a lossless compression algorithm (LZW compression <ref> [Wel84] </ref>) but this was far less effective for a couple of reasons.
Reference: [ZTN] <author> Y.H. Zhao, K. Tufte, and J.F. Naughton. </author> <title> "On the Performance of an Array-Based ADT for OLAP Workloads". </title> <type> Technical Report CS-TR-96-1313, </type> <institution> University of Wisconsin-Madison, CS Department, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: First, as relational database systems provide richer and richer type systems, it is becoming feasible to implement arrays as a storage device for RDBMS data. In another paper <ref> [ZTN] </ref>, we explored the performance implications of such an approach for "consolidation" operations; the study in this paper adds more weight to the conclusion that including array storage in relational systems can significantly enhance RDBMS performance for certain workloads.
References-found: 15

