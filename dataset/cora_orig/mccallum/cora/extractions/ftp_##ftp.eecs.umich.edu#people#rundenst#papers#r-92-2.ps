URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/r-92-2.ps
Refering-URL: http://www.eecs.umich.edu/~rundenst/group/papers.html
Root-URL: http://www.cs.umich.edu
Title: Automatic View Schema Generation in Object-Oriented Databases  
Author: Elke A. Rundensteiner and Lubomir Bic 
Date: January, 1992  92-15  
Affiliation: Department of Information and Computer Science University of California, Irvine  
Pubnum: Technical Report  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Aho, A. V., Hopcroft, J. E., and Jeffrey, D. U., </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley Pub. Company, </publisher> <year> 1974. </year>
Reference-contexts: This algorithm is based on the assumption that we have a directed graph G=(V,E) in which each edge is labeled by an element from a closed semiring (S,+,*,0,1) (e.g., <ref> [1] </ref>, pg. 195-201]). We thus label the edges of the schema graph by the length of the longest paths between two nodes. <p> As discussed above, the Longest-Path procedure is a variation of a well-known algorithm of cost calculations of paths. The proof of correctness for this part of the algorithm can be derived from a standard algorithms book (e.g., <ref> [1] </ref>) and thus is not given here. For the following, we assume that the Longest-Path procedure indeed terminates with each entry of the matrix A (i,j) indicating the length (i.e., the number of is-a edges) of the longest path between the nodes C i and C j . <p> This procedure corresponds to a variation of the well-known transitive closure algorithm. The proof of correctness for this can be derived from a standard algorithms book (e.g., <ref> [1] </ref>) and thus is not given here.
Reference: [2] <author> Banerjee, J., Kim, W., Kim, H. J., and Korth, F., </author> <title> "Semantics and Implementation of Schema Evolution in Object-Oriented Databases", </title> <booktitle> Proc. of ACM SIMOD'87, </booktitle> <month> May </month> <year> 1987, </year> <pages> pp. </pages> <address> 311- 322. </address>
Reference: [3] <author> Date, C. J., </author> <title> An Introduction to Database Systems, Vol. I, Fifth Edition, </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <year> 1990. </year>
Reference-contexts: The Select operator, 3 THE MULTIVIEW METHODOLOGY 12 for instance, similar to the selection operator defined for relational algebra <ref> [3] </ref>, has the following syntax: &lt;virtual-class&gt; := select from (&lt;source-class&gt;) where (&lt;predicate&gt;), with &lt;predicate&gt; being some possibly complex function on the source class and its type description. Its semantics are to return a subset of object instances of the source class based on the evaluation of the associated predicate.
Reference: [4] <author> Gilbert, J. P., </author> <title> "Supporting User Views", </title> <booktitle> OODB Task Group Workshop Proceedings, </booktitle> <address> Ottawa, Canada, </address> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: Consequently, they 7 CONCLUSIONS 42 do not address the derivation of new classes by restricting the membership of a class via a select-like query. Lastly, their approach focuses on one class only, and the effects of multiple interfaces on the class generalization hierarchy are not addressed. Gilbert's proposal <ref> [4] </ref>, similar to [16], is also based on the idea of defining multiple interfaces for a class object. MultiView does not require the extension of the traditional class concept, and thus can be implemented directly with the existing object-oriented database technology, while Gilbert's approach could not. <p> In addition, our work allows for the direct application of the class derivation mechanisms proposed in the literature. The use of general query operators is currently not handled by <ref> [4] </ref>. 7 CONCLUSIONS In this paper, we have defined an object-oriented view to be a virtual, possibly restructured, sub-schema graph of the global schema rather than just one individual virtual class. We have presented a novel approach for supporting these multiple view schemata in OODBs, called MultiView. <p> Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature [5, 7, 15, 11]. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals <ref> [4] </ref>, and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView. Based on this prototype, we want to explore alternative implementation strategies for MultiView.
Reference: [5] <author> Heiler, S., and Zdonik, S. B., </author> <title> Object views: Extending the vision, </title> <booktitle> In Proc. IEEE Data Engineering Conf., </booktitle> <address> Los Angeles, </address> <month> Feb. </month> <year> 1990, </year> <journal> pg. </journal> <volume> 86 - 93. </volume>
Reference-contexts: Other requirements for the validity of a view schema, e.g., type closure, are not directly relevant to our work and therefore are omitted in this paper <ref> [12, 5, 18] </ref>. 3 THE MultiView METHODOLOGY 3.1 The Basic Philosophy In this section, we outline our approach for supporting multiple view schemata in OODBs, called the MultiView paradigm. <p> The first phase supports the virtual customization of existing classes by 3 THE MULTIVIEW METHODOLOGY 10 deriving new virtual classes with a possibly modified type description and membership extent. For this we assume that virtual classes are derived from the global schema using some object-oriented queries (e.g., see <ref> [7, 5, 15] </ref>). This fulfills the first requirement for a view support system listed in Section 1. <p> For this we assume an object-oriented query language that can be used by the view definer to derive arbitrarily complex virtual classes. This part of the MultiView paradigm is in sync with the work presented in the literature <ref> [7, 5, 15] </ref>. Examples of typical operators proposed in the literature are selection, projection, set operations, etc. The result of such a class derivation is a virtual class VC that has a derived type description and a derived membership extent (See Section 2 for definitions of these concepts). <p> For instance, the work by Heiler and Zdonik <ref> [5] </ref> and the work by Scholl et al. [15] fall in this category. MultiView can use any of these proposed class derivation mechanisms to implement the first phase of view schema generation, i.e., the customization of individual classes. It thus is a superset of these approaches. <p> It thus is a superset of these approaches. Most of these approaches do not discuss the integration of derived classes into the global schema. Instead, the derived classes are treated as "stand-alone" objects <ref> [5] </ref>, or they are attached directly as subclasses of the schema root class [7]. Scholl et al.'s recent work [15] is an exception; they discuss the classification of virtual classes derived by a selected subset of the operators of the query language COOL into one schema. <p> MultiView would then enrich these systems by allowing them to support a more powerful notion of views. Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature <ref> [5, 7, 15, 11] </ref>. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals [4], and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView.
Reference: [6] <author> S. N. Khoshafian and G. P. Copeland, </author> <title> "Object Identity," </title> <booktitle> in Proc. OOPSLA'86, ACM, </booktitle> <month> Sep. </month> <year> 1986, </year> <pages> pp. 406-416. </pages>
Reference: [7] <author> Kim, W., </author> <title> A model of queries in object-oriented databases, </title> <booktitle> In Proc. Int. Conf. on Very Large Databases, </booktitle> <pages> pp. 423 - 432, </pages> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: The first phase supports the virtual customization of existing classes by 3 THE MULTIVIEW METHODOLOGY 10 deriving new virtual classes with a possibly modified type description and membership extent. For this we assume that virtual classes are derived from the global schema using some object-oriented queries (e.g., see <ref> [7, 5, 15] </ref>). This fulfills the first requirement for a view support system listed in Section 1. <p> For this we assume an object-oriented query language that can be used by the view definer to derive arbitrarily complex virtual classes. This part of the MultiView paradigm is in sync with the work presented in the literature <ref> [7, 5, 15] </ref>. Examples of typical operators proposed in the literature are selection, projection, set operations, etc. The result of such a class derivation is a virtual class VC that has a derived type description and a derived membership extent (See Section 2 for definitions of these concepts). <p> It thus is a superset of these approaches. Most of these approaches do not discuss the integration of derived classes into the global schema. Instead, the derived classes are treated as "stand-alone" objects [5], or they are attached directly as subclasses of the schema root class <ref> [7] </ref>. Scholl et al.'s recent work [15] is an exception; they discuss the classification of virtual classes derived by a selected subset of the operators of the query language COOL into one schema. <p> MultiView would then enrich these systems by allowing them to support a more powerful notion of views. Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature <ref> [5, 7, 15, 11] </ref>. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals [4], and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView.
Reference: [8] <author> D. Maier, J. Stein, A. Otis, and A. Purdy, </author> <title> "Development of an Object-Oriented DBMS," </title> <booktitle> in Proc. </booktitle> <address> OOPSLA'86, </address> <month> Sep. </month> <year> 1986, </year> <pages> pp. 472-482. </pages>
Reference: [9] <author> J. Mylopoulos, P. A. Bernstein, and H.K.T. Wong. </author> <title> "A Language Facility for Designing Database-Intensive Applications," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 5, issue 2, </volume> <pages> pp. 185-207, </pages> <month> June </month> <year> 1980. </year>
Reference: [10] <author> E. A. Rundensteiner, L. Bic, J. Gilbert, and M. Yin, </author> <title> "Set-Restricted Semantic Groupings," </title> <journal> in IEEE Trans. on Data and Knowledge Engineering, </journal> <note> to appear in April 1993. </note>
Reference: [11] <author> Rundensteiner, E. A., and Bic, L., </author> <title> "Set Operations in Object-Based Data Models", </title> <journal> in IEEE Transaction on Data and Knowledge Engineering, </journal> <note> to appear in June 1992. </note>
Reference-contexts: Other examples are set operators, such as, union, difference and intersect, which modify both the type description and the set membership of their source classes. A detailed analysis of these set operators for OODBs can be found in <ref> [11] </ref>. 3 THE MULTIVIEW METHODOLOGY 13 Name Position Sex Female-Professors Predicates: (Position=Professor) and (Sex=Female) Predicates: (Position&lt;&gt;empty) Predicates: (true) Predicates: (Sex=Female) Women Strings Predicates: (true) Sex Predicates: (true) Jobs Predicates: (true) Name Name Sex Position Name Sex Employees People 3.3 The Integration of Virtual Classes into the Global Schema For reasons explained <p> For instance, Schmolze and Lipkis [14] describe a classifier for `concepts' in the KL-ONE Knowledge Representation System. Scholl et al. [15] sketch the class integration process for a selected subset of the operators of the query language COOL. In <ref> [11] </ref>, we describe the integration of virtual classes derived using set operations into the underlying schema graph. In this paper we sketch an overall approach for the class integration problem. A detailed treatment of this problem is, however, beyond the scope of this paper and can be found in [12]. <p> MultiView would then enrich these systems by allowing them to support a more powerful notion of views. Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature <ref> [5, 7, 15, 11] </ref>. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals [4], and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView.
Reference: [12] <author> Rundensteiner, E. A., </author> <title> "Supporting Multiple View Schemata in Object-Oriented Databases", </title> <institution> Univ. of California, Irvine, </institution> <type> Technical Report #92-07, </type> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: A class is also a container for a set of objects. The collection of objects that belong to a class C is denoted by extent (C) := fo j o 2 Cg with the member-of predicate "2" defined based on the object identities of the object instances <ref> [12] </ref>. We can now define the following relationships between classes. Definition 1. For two classes C1 and C2 2 C, C1 is called a subset of C2, denoted by C1 C2, if and only if (8 o 2 O) ((o2C1) =) (o2C2)). Definition 2. <p> We will maintain the base schema as a view schema, i.e., there will be a view object table (or base table) that lists all base classes and their is-a relationships (See <ref> [12] </ref>). This is important so that users of the data model can see the original data model of the application domain without having to consider derived information. <p> Other requirements for the validity of a view schema, e.g., type closure, are not directly relevant to our work and therefore are omitted in this paper <ref> [12, 5, 18] </ref>. 3 THE MultiView METHODOLOGY 3.1 The Basic Philosophy In this section, we outline our approach for supporting multiple view schemata in OODBs, called the MultiView paradigm. <p> The goal here is not to present a complete treatment of this subject (which is beyond the scope of this paper), but rather to explain the basic concepts. A detailed treatment of these issues can be found in <ref> [12] </ref>. 3.2 The Derivation of Virtual Classes MultiView uses class derivation mechanisms for a number of different purposes, such as, to customize type descriptions, to limit the access to property functions, to collect object instances into groups meaningful for the task at hand, and so on. <p> In this paper we sketch an overall approach for the class integration problem. A detailed treatment of this problem is, however, beyond the scope of this paper and can be found in <ref> [12] </ref>. Class integration is concerned with finding the most appropriate location in the schema graph for a given virtual class. We exploit the subtype, subset and is-a relationships between the virtual class and the classes in the global schema to solve this classification problem. <p> This process can be fine-tuned for each query operator. This would allow us to limit the search to a small portion of the global schema based on the semantics of the operator and the position of the respective source classes <ref> [12] </ref>. Rather than presenting detailed classification algorithms here, we demonstrate this process on an example. Female-Professors Predicates: (Position=Professor) and (Sex=Female) Predicates: (Position&lt;&gt;empty) Predicates: (true) Strings Predicates: (true) Sex Predicates: (true) Jobs Predicates: (true) Name Position Sex Name Name Sex Position Predicates: (Sex=Female) Women Name Sex People Employees Example 5. <p> Once the view definers want to conclude the view definition phase, they issue the SAVE-VIEW command. This command establishes a view table for the view schema which lists all classes that are part of this view <ref> [12] </ref>. In addition, the system determines the set of view is-a arcs that have to be inserted into this view schema and of course also into the view table. This is the topic of Section 5. Lastly, a view definer can remove a view schema with the DELETE-VIEW command. <p> We have shown elsewhere that this is in general true, namely, existing view schemata remain valid after the creation of additional view schemata (<ref> [12] </ref>). We refer to this property of MultiView as the view independence property. The interested reader is referred to [12] for a more detailed discussion on the view definition language and related issues. 5 AUTOMATIC GENERATION OF A VALID VIEW SCHEMA HIERARCHY 5.1 Problem Definition As explained in Section 3, we automate the specification of the view schema class hierarchy rather than requiring manual entry of the view is-a arcs
Reference: [13] <author> Schmolze, J. G., and Lipkis, T. A., </author> <title> Classification in the KL-ONE Knowledge Representation System, </title> <booktitle> The Eigth Int. Joint Conf. on Artificial Intelligence, </booktitle> <address> (IJCAI'83), </address> <month> Aug. </month> <year> 1983, </year> <title> vol.1, </title> <journal> pg. </journal> <volume> 330 - 332. </volume>
Reference: [14] <author> Scholl, M. H., Laasch, C. and Tresch, M., </author> <title> Updatable Views in Object-Oriented Databases, </title> <booktitle> Proc. 2nd DOOD Conf., </booktitle> <address> Muenich, </address> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: Algorithms for special classification subproblems have been proposed in the literature. For instance, Schmolze and Lipkis <ref> [14] </ref> describe a classifier for `concepts' in the KL-ONE Knowledge Representation System. Scholl et al. [15] sketch the class integration process for a selected subset of the operators of the query language COOL.
Reference: [15] <author> Shilling, J. J., and Sweeney, P. F., </author> <title> Three Steps to Views: Extending the Object-Oriented Paradigm, </title> <booktitle> in Proc. of the Int. Conf. on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA'89), </booktitle> <address> New Orleans , Sep. </address> <year> 1989, </year> <pages> 353 - 361. </pages>
Reference-contexts: The first phase supports the virtual customization of existing classes by 3 THE MULTIVIEW METHODOLOGY 10 deriving new virtual classes with a possibly modified type description and membership extent. For this we assume that virtual classes are derived from the global schema using some object-oriented queries (e.g., see <ref> [7, 5, 15] </ref>). This fulfills the first requirement for a view support system listed in Section 1. <p> For this we assume an object-oriented query language that can be used by the view definer to derive arbitrarily complex virtual classes. This part of the MultiView paradigm is in sync with the work presented in the literature <ref> [7, 5, 15] </ref>. Examples of typical operators proposed in the literature are selection, projection, set operations, etc. The result of such a class derivation is a virtual class VC that has a derived type description and a derived membership extent (See Section 2 for definitions of these concepts). <p> Algorithms for special classification subproblems have been proposed in the literature. For instance, Schmolze and Lipkis [14] describe a classifier for `concepts' in the KL-ONE Knowledge Representation System. Scholl et al. <ref> [15] </ref> sketch the class integration process for a selected subset of the operators of the query language COOL. In [11], we describe the integration of virtual classes derived using set operations into the underlying schema graph. In this paper we sketch an overall approach for the class integration problem. <p> For instance, the work by Heiler and Zdonik [5] and the work by Scholl et al. <ref> [15] </ref> fall in this category. MultiView can use any of these proposed class derivation mechanisms to implement the first phase of view schema generation, i.e., the customization of individual classes. It thus is a superset of these approaches. <p> Most of these approaches do not discuss the integration of derived classes into the global schema. Instead, the derived classes are treated as "stand-alone" objects [5], or they are attached directly as subclasses of the schema root class [7]. Scholl et al.'s recent work <ref> [15] </ref> is an exception; they discuss the classification of virtual classes derived by a selected subset of the operators of the query language COOL into one schema. <p> MultiView would then enrich these systems by allowing them to support a more powerful notion of views. Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature <ref> [5, 7, 15, 11] </ref>. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals [4], and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView.
Reference: [16] <author> D. W. Shipman, </author> <title> "The Functional Data Model and the Data Language DAPLEX," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 6, issue 1, </volume> <pages> pp. 140-173, </pages> <month> Mar. </month> <year> 1981. </year>
Reference-contexts: In fact, by breaking the view schemata definition process into a number of distinct phases, we were able to reduce the view definition language to an extremely simple language. In summary, MultiView is a more systematic approach compared to their rather ad-hoc proposal. Shilling and Sweeney <ref> [16] </ref> present an alternative approach for supporting views for object-oriented systems. Namely, they extend the conventional concept of a class object from having one type (one ADT interface) to having multiple interfaces. <p> Lastly, their approach focuses on one class only, and the effects of multiple interfaces on the class generalization hierarchy are not addressed. Gilbert's proposal [4], similar to <ref> [16] </ref>, is also based on the idea of defining multiple interfaces for a class object. MultiView does not require the extension of the traditional class concept, and thus can be implemented directly with the existing object-oriented database technology, while Gilbert's approach could not.
Reference: [17] <author> Tanaka, K., Yoshikawa, M., and Ishihara, K., </author> <title> Schema Virtualization in Object-Oriented Databases, </title> <booktitle> In Proc. IEEE Data Engineering Conf., </booktitle> <month> Feb. </month> <year> 1988, </year> <journal> pg. </journal> <volume> 23 - 30. </volume> <pages> References </pages>
Reference: [1] <author> Aho, A. V., Hopcroft, J. E., and Jeffrey, D. U., </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley Pub. Company, </publisher> <year> 1974. </year>
Reference-contexts: This algorithm is based on the assumption that we have a directed graph G=(V,E) in which each edge is labeled by an element from a closed semiring (S,+,*,0,1) (e.g., <ref> [1] </ref>, pg. 195-201]). We thus label the edges of the schema graph by the length of the longest paths between two nodes. <p> As discussed above, the Longest-Path procedure is a variation of a well-known algorithm of cost calculations of paths. The proof of correctness for this part of the algorithm can be derived from a standard algorithms book (e.g., <ref> [1] </ref>) and thus is not given here. For the following, we assume that the Longest-Path procedure indeed terminates with each entry of the matrix A (i,j) indicating the length (i.e., the number of is-a edges) of the longest path between the nodes C i and C j . <p> This procedure corresponds to a variation of the well-known transitive closure algorithm. The proof of correctness for this can be derived from a standard algorithms book (e.g., <ref> [1] </ref>) and thus is not given here.
Reference: [2] <author> Banerjee, J., Kim, W., Kim, H. J., and Korth, F., </author> <title> "Semantics and Implementation of Schema Evolution in Object-Oriented Databases", </title> <booktitle> Proc. of ACM SIMOD'87, </booktitle> <month> May </month> <year> 1987, </year> <pages> pp. </pages> <address> 311- 322. </address>
Reference: [3] <author> Date, C. J., </author> <title> An Introduction to Database Systems, Vol. I, Fifth Edition, </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <year> 1990. </year>
Reference-contexts: The Select operator, 3 THE MULTIVIEW METHODOLOGY 12 for instance, similar to the selection operator defined for relational algebra <ref> [3] </ref>, has the following syntax: &lt;virtual-class&gt; := select from (&lt;source-class&gt;) where (&lt;predicate&gt;), with &lt;predicate&gt; being some possibly complex function on the source class and its type description. Its semantics are to return a subset of object instances of the source class based on the evaluation of the associated predicate.
Reference: [4] <author> Gilbert, J. P., </author> <title> "Supporting User Views", </title> <booktitle> OODB Task Group Workshop Proceedings, </booktitle> <address> Ottawa, Canada, </address> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: Consequently, they 7 CONCLUSIONS 42 do not address the derivation of new classes by restricting the membership of a class via a select-like query. Lastly, their approach focuses on one class only, and the effects of multiple interfaces on the class generalization hierarchy are not addressed. Gilbert's proposal <ref> [4] </ref>, similar to [16], is also based on the idea of defining multiple interfaces for a class object. MultiView does not require the extension of the traditional class concept, and thus can be implemented directly with the existing object-oriented database technology, while Gilbert's approach could not. <p> In addition, our work allows for the direct application of the class derivation mechanisms proposed in the literature. The use of general query operators is currently not handled by <ref> [4] </ref>. 7 CONCLUSIONS In this paper, we have defined an object-oriented view to be a virtual, possibly restructured, sub-schema graph of the global schema rather than just one individual virtual class. We have presented a novel approach for supporting these multiple view schemata in OODBs, called MultiView. <p> Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature [5, 7, 15, 11]. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals <ref> [4] </ref>, and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView. Based on this prototype, we want to explore alternative implementation strategies for MultiView.
Reference: [5] <author> Heiler, S., and Zdonik, S. B., </author> <title> Object views: Extending the vision, </title> <booktitle> In Proc. IEEE Data Engineering Conf., </booktitle> <address> Los Angeles, </address> <month> Feb. </month> <year> 1990, </year> <journal> pg. </journal> <volume> 86 - 93. </volume>
Reference-contexts: Other requirements for the validity of a view schema, e.g., type closure, are not directly relevant to our work and therefore are omitted in this paper <ref> [12, 5, 18] </ref>. 3 THE MultiView METHODOLOGY 3.1 The Basic Philosophy In this section, we outline our approach for supporting multiple view schemata in OODBs, called the MultiView paradigm. <p> The first phase supports the virtual customization of existing classes by 3 THE MULTIVIEW METHODOLOGY 10 deriving new virtual classes with a possibly modified type description and membership extent. For this we assume that virtual classes are derived from the global schema using some object-oriented queries (e.g., see <ref> [7, 5, 15] </ref>). This fulfills the first requirement for a view support system listed in Section 1. <p> For this we assume an object-oriented query language that can be used by the view definer to derive arbitrarily complex virtual classes. This part of the MultiView paradigm is in sync with the work presented in the literature <ref> [7, 5, 15] </ref>. Examples of typical operators proposed in the literature are selection, projection, set operations, etc. The result of such a class derivation is a virtual class VC that has a derived type description and a derived membership extent (See Section 2 for definitions of these concepts). <p> For instance, the work by Heiler and Zdonik <ref> [5] </ref> and the work by Scholl et al. [15] fall in this category. MultiView can use any of these proposed class derivation mechanisms to implement the first phase of view schema generation, i.e., the customization of individual classes. It thus is a superset of these approaches. <p> It thus is a superset of these approaches. Most of these approaches do not discuss the integration of derived classes into the global schema. Instead, the derived classes are treated as "stand-alone" objects <ref> [5] </ref>, or they are attached directly as subclasses of the schema root class [7]. Scholl et al.'s recent work [15] is an exception; they discuss the classification of virtual classes derived by a selected subset of the operators of the query language COOL into one schema. <p> MultiView would then enrich these systems by allowing them to support a more powerful notion of views. Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature <ref> [5, 7, 15, 11] </ref>. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals [4], and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView.
Reference: [6] <author> S. N. Khoshafian and G. P. Copeland, </author> <title> "Object Identity," </title> <booktitle> in Proc. OOPSLA'86, ACM, </booktitle> <month> Sep. </month> <year> 1986, </year> <pages> pp. 406-416. </pages>
Reference: [7] <author> Kim, W., </author> <title> A model of queries in object-oriented databases, </title> <booktitle> In Proc. Int. Conf. on Very Large Databases, </booktitle> <pages> pp. 423 - 432, </pages> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: The first phase supports the virtual customization of existing classes by 3 THE MULTIVIEW METHODOLOGY 10 deriving new virtual classes with a possibly modified type description and membership extent. For this we assume that virtual classes are derived from the global schema using some object-oriented queries (e.g., see <ref> [7, 5, 15] </ref>). This fulfills the first requirement for a view support system listed in Section 1. <p> For this we assume an object-oriented query language that can be used by the view definer to derive arbitrarily complex virtual classes. This part of the MultiView paradigm is in sync with the work presented in the literature <ref> [7, 5, 15] </ref>. Examples of typical operators proposed in the literature are selection, projection, set operations, etc. The result of such a class derivation is a virtual class VC that has a derived type description and a derived membership extent (See Section 2 for definitions of these concepts). <p> It thus is a superset of these approaches. Most of these approaches do not discuss the integration of derived classes into the global schema. Instead, the derived classes are treated as "stand-alone" objects [5], or they are attached directly as subclasses of the schema root class <ref> [7] </ref>. Scholl et al.'s recent work [15] is an exception; they discuss the classification of virtual classes derived by a selected subset of the operators of the query language COOL into one schema. <p> MultiView would then enrich these systems by allowing them to support a more powerful notion of views. Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature <ref> [5, 7, 15, 11] </ref>. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals [4], and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView.
Reference: [8] <author> D. Maier, J. Stein, A. Otis, and A. Purdy, </author> <title> "Development of an Object-Oriented DBMS," </title> <booktitle> in Proc. </booktitle> <address> OOPSLA'86, </address> <month> Sep. </month> <year> 1986, </year> <pages> pp. 472-482. </pages>
Reference: [9] <author> J. Mylopoulos, P. A. Bernstein, and H.K.T. Wong. </author> <title> "A Language Facility for Designing Database-Intensive Applications," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 5, issue 2, </volume> <pages> pp. 185-207, </pages> <month> June </month> <year> 1980. </year>
Reference: [10] <author> E. A. Rundensteiner, L. Bic, J. Gilbert, and M. Yin, </author> <title> "Set-Restricted Semantic Groupings," </title> <journal> in IEEE Trans. on Data and Knowledge Engineering, </journal> <note> to appear in April 1993. </note>
Reference: [11] <author> Rundensteiner, E. A., and Bic, L., </author> <title> "Set Operations in Object-Based Data Models", </title> <journal> in IEEE Transaction on Data and Knowledge Engineering, </journal> <note> to appear in June 1992. </note>
Reference-contexts: Other examples are set operators, such as, union, difference and intersect, which modify both the type description and the set membership of their source classes. A detailed analysis of these set operators for OODBs can be found in <ref> [11] </ref>. 3 THE MULTIVIEW METHODOLOGY 13 Name Position Sex Female-Professors Predicates: (Position=Professor) and (Sex=Female) Predicates: (Position&lt;&gt;empty) Predicates: (true) Predicates: (Sex=Female) Women Strings Predicates: (true) Sex Predicates: (true) Jobs Predicates: (true) Name Name Sex Position Name Sex Employees People 3.3 The Integration of Virtual Classes into the Global Schema For reasons explained <p> For instance, Schmolze and Lipkis [14] describe a classifier for `concepts' in the KL-ONE Knowledge Representation System. Scholl et al. [15] sketch the class integration process for a selected subset of the operators of the query language COOL. In <ref> [11] </ref>, we describe the integration of virtual classes derived using set operations into the underlying schema graph. In this paper we sketch an overall approach for the class integration problem. A detailed treatment of this problem is, however, beyond the scope of this paper and can be found in [12]. <p> MultiView would then enrich these systems by allowing them to support a more powerful notion of views. Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature <ref> [5, 7, 15, 11] </ref>. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals [4], and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView.
Reference: [12] <author> Rundensteiner, E. A., </author> <title> "Supporting Multiple View Schemata in Object-Oriented Databases", </title> <institution> Univ. of California, Irvine, </institution> <type> Technical Report #92-07, </type> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: A class is also a container for a set of objects. The collection of objects that belong to a class C is denoted by extent (C) := fo j o 2 Cg with the member-of predicate "2" defined based on the object identities of the object instances <ref> [12] </ref>. We can now define the following relationships between classes. Definition 1. For two classes C1 and C2 2 C, C1 is called a subset of C2, denoted by C1 C2, if and only if (8 o 2 O) ((o2C1) =) (o2C2)). Definition 2. <p> We will maintain the base schema as a view schema, i.e., there will be a view object table (or base table) that lists all base classes and their is-a relationships (See <ref> [12] </ref>). This is important so that users of the data model can see the original data model of the application domain without having to consider derived information. <p> Other requirements for the validity of a view schema, e.g., type closure, are not directly relevant to our work and therefore are omitted in this paper <ref> [12, 5, 18] </ref>. 3 THE MultiView METHODOLOGY 3.1 The Basic Philosophy In this section, we outline our approach for supporting multiple view schemata in OODBs, called the MultiView paradigm. <p> The goal here is not to present a complete treatment of this subject (which is beyond the scope of this paper), but rather to explain the basic concepts. A detailed treatment of these issues can be found in <ref> [12] </ref>. 3.2 The Derivation of Virtual Classes MultiView uses class derivation mechanisms for a number of different purposes, such as, to customize type descriptions, to limit the access to property functions, to collect object instances into groups meaningful for the task at hand, and so on. <p> In this paper we sketch an overall approach for the class integration problem. A detailed treatment of this problem is, however, beyond the scope of this paper and can be found in <ref> [12] </ref>. Class integration is concerned with finding the most appropriate location in the schema graph for a given virtual class. We exploit the subtype, subset and is-a relationships between the virtual class and the classes in the global schema to solve this classification problem. <p> This process can be fine-tuned for each query operator. This would allow us to limit the search to a small portion of the global schema based on the semantics of the operator and the position of the respective source classes <ref> [12] </ref>. Rather than presenting detailed classification algorithms here, we demonstrate this process on an example. Female-Professors Predicates: (Position=Professor) and (Sex=Female) Predicates: (Position&lt;&gt;empty) Predicates: (true) Strings Predicates: (true) Sex Predicates: (true) Jobs Predicates: (true) Name Position Sex Name Name Sex Position Predicates: (Sex=Female) Women Name Sex People Employees Example 5. <p> Once the view definers want to conclude the view definition phase, they issue the SAVE-VIEW command. This command establishes a view table for the view schema which lists all classes that are part of this view <ref> [12] </ref>. In addition, the system determines the set of view is-a arcs that have to be inserted into this view schema and of course also into the view table. This is the topic of Section 5. Lastly, a view definer can remove a view schema with the DELETE-VIEW command. <p> We have shown elsewhere that this is in general true, namely, existing view schemata remain valid after the creation of additional view schemata (<ref> [12] </ref>). We refer to this property of MultiView as the view independence property. The interested reader is referred to [12] for a more detailed discussion on the view definition language and related issues. 5 AUTOMATIC GENERATION OF A VALID VIEW SCHEMA HIERARCHY 5.1 Problem Definition As explained in Section 3, we automate the specification of the view schema class hierarchy rather than requiring manual entry of the view is-a arcs
Reference: [13] <author> Rundensteiner, E. A., and Bic, L., </author> <title> "Automatic View Schema Generation in Object-Oriented Databases", </title> <institution> Univ. of California, Irvine, </institution> <type> Technical Report #92-15, </type> <month> Jan. </month> <year> 1992. </year>
Reference: [14] <author> Schmolze, J. G., and Lipkis, T. A., </author> <title> Classification in the KL-ONE Knowledge Representation System, </title> <booktitle> The Eigth Int. Joint Conf. on Artificial Intelligence, </booktitle> <address> (IJCAI'83), </address> <month> Aug. </month> <year> 1983, </year> <title> vol.1, </title> <journal> pg. </journal> <volume> 330 - 332. </volume>
Reference-contexts: Algorithms for special classification subproblems have been proposed in the literature. For instance, Schmolze and Lipkis <ref> [14] </ref> describe a classifier for `concepts' in the KL-ONE Knowledge Representation System. Scholl et al. [15] sketch the class integration process for a selected subset of the operators of the query language COOL.
Reference: [15] <author> Scholl, M. H., Laasch, C. and Tresch, M., </author> <title> Updatable Views in Object-Oriented Databases, </title> <booktitle> Proc. 2nd DOOD Conf., </booktitle> <address> Muenich, </address> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: The first phase supports the virtual customization of existing classes by 3 THE MULTIVIEW METHODOLOGY 10 deriving new virtual classes with a possibly modified type description and membership extent. For this we assume that virtual classes are derived from the global schema using some object-oriented queries (e.g., see <ref> [7, 5, 15] </ref>). This fulfills the first requirement for a view support system listed in Section 1. <p> For this we assume an object-oriented query language that can be used by the view definer to derive arbitrarily complex virtual classes. This part of the MultiView paradigm is in sync with the work presented in the literature <ref> [7, 5, 15] </ref>. Examples of typical operators proposed in the literature are selection, projection, set operations, etc. The result of such a class derivation is a virtual class VC that has a derived type description and a derived membership extent (See Section 2 for definitions of these concepts). <p> Algorithms for special classification subproblems have been proposed in the literature. For instance, Schmolze and Lipkis [14] describe a classifier for `concepts' in the KL-ONE Knowledge Representation System. Scholl et al. <ref> [15] </ref> sketch the class integration process for a selected subset of the operators of the query language COOL. In [11], we describe the integration of virtual classes derived using set operations into the underlying schema graph. In this paper we sketch an overall approach for the class integration problem. <p> For instance, the work by Heiler and Zdonik [5] and the work by Scholl et al. <ref> [15] </ref> fall in this category. MultiView can use any of these proposed class derivation mechanisms to implement the first phase of view schema generation, i.e., the customization of individual classes. It thus is a superset of these approaches. <p> Most of these approaches do not discuss the integration of derived classes into the global schema. Instead, the derived classes are treated as "stand-alone" objects [5], or they are attached directly as subclasses of the schema root class [7]. Scholl et al.'s recent work <ref> [15] </ref> is an exception; they discuss the classification of virtual classes derived by a selected subset of the operators of the query language COOL into one schema. <p> MultiView would then enrich these systems by allowing them to support a more powerful notion of views. Our paradigm builds on existing work in as much as it is independent of the class derivation operators chosen from the set of proposed operators in the literature <ref> [5, 7, 15, 11] </ref>. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals [4], and hence the potential ease in adapting it for existing database systems and in implementing it with existing OODB technology. We are currently implementing a first prototype of MultiView.
Reference: [16] <author> Shilling, J. J., and Sweeney, P. F., </author> <title> Three Steps to Views: Extending the Object-Oriented Paradigm, </title> <booktitle> in Proc. of the Int. Conf. on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA'89), </booktitle> <address> New Orleans , Sep. </address> <year> 1989, </year> <pages> 353 - 361. </pages>
Reference-contexts: In fact, by breaking the view schemata definition process into a number of distinct phases, we were able to reduce the view definition language to an extremely simple language. In summary, MultiView is a more systematic approach compared to their rather ad-hoc proposal. Shilling and Sweeney <ref> [16] </ref> present an alternative approach for supporting views for object-oriented systems. Namely, they extend the conventional concept of a class object from having one type (one ADT interface) to having multiple interfaces. <p> Lastly, their approach focuses on one class only, and the effects of multiple interfaces on the class generalization hierarchy are not addressed. Gilbert's proposal [4], similar to <ref> [16] </ref>, is also based on the idea of defining multiple interfaces for a class object. MultiView does not require the extension of the traditional class concept, and thus can be implemented directly with the existing object-oriented database technology, while Gilbert's approach could not.
Reference: [17] <author> D. W. Shipman, </author> <title> "The Functional Data Model and the Data Language DAPLEX," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 6, issue 1, </volume> <pages> pp. 140-173, </pages> <month> Mar. </month> <year> 1981. </year>
Reference: [18] <author> Tanaka, K., Yoshikawa, M., and Ishihara, K., </author> <title> Schema Virtualization in Object-Oriented Databases, </title> <booktitle> In Proc. IEEE Data Engineering Conf., </booktitle> <month> Feb. </month> <year> 1988, </year> <journal> pg. </journal> <volume> 23 - 30. </volume>
Reference-contexts: A subgraph of the global schema which contains only virtual classes and their is-a relationships is commonly called a virtual schema <ref> [18] </ref>. Definition 7. Given a global schema GS=(V,E), then a view schema (VS), or short, a view, is defined to be a schema VS= (VV,VE) with the following properties: 1. VS has a unique view identifier denoted by &lt; V S &gt;, 2. VV V, and 3. VE transitive-closure (E). <p> Other requirements for the validity of a view schema, e.g., type closure, are not directly relevant to our work and therefore are omitted in this paper <ref> [12, 5, 18] </ref>. 3 THE MultiView METHODOLOGY 3.1 The Basic Philosophy In this section, we outline our approach for supporting multiple view schemata in OODBs, called the MultiView paradigm. <p> They do however not consider the problem of generating multiple view schemata, and hence MultiView can be considered to be a compatible extension of their work. Tanaka et al. present an early work on schema virtualization <ref> [18] </ref>. Their work does not distinguish between the task of integrating derived classes into a common schema and the task of generating view schemata. The interplay between these tasks is not well-defined in their approach.
References-found: 35

