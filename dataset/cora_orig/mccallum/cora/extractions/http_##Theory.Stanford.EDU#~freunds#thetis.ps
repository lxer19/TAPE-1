URL: http://Theory.Stanford.EDU/~freunds/thetis.ps
Refering-URL: http://Theory.Stanford.EDU/~freunds/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Thetis: An ANSI C Programming Environment Designed for Introductory Use  
Author: Stephen N. Freund and Eric S. Roberts 
Affiliation: Department of Computer Science Stanford University  
Abstract: Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. SIGCSE 96 2/95 Philadelphia, PA USA 1996 ACM 0-89791-757-x/96/0002....$3.50 Commercially available compilers, particularly those used for languages like ANSI C that have extensive commercial applicability, are not wellsuited to students in introductory computer science courses because they assume a level of sophistication that beginning students do not possess. To alleviate this problem at Stanford, we have developed the Thetis programming environment designed specifically for student use. The system consists of a C interpreter and associated user interface that provides students with simple and easily understood editing, debugging, and visualization capabilities. Reactions of students and instructors indicate that Thetis fulfills the goals we set out to accomplish and provides a significantly better learning environment for students in CS1/CS2. 
Abstract-found: 1
Intro-found: 1
Reference: [Austing79] <author> Richard Austing, Bruce Barnes, Della Bonnette, Gerald Engel, and Gordon Stokes, </author> <title> Curriculum 78: Recommendations for the undergraduate program in computer science, </title> <journal> Communications of the ACM, </journal> <month> March </month> <year> 1979. </year>
Reference: [Birch95] <editor> Michael R. Birch, et al., DYNALAB: </editor> <title> A dynamic computer science laboratory infrastructure featuring program animation, </title> <journal> SIGCSE Bulletin, </journal> <month> March, </month> <year> 1995. </year>
Reference-contexts: an enumerated type Exiting a non-v function without returning a value Calling a bad function pointer Passing invalid arguments to a function Debugging and visualization tools Previous experience has shown that debuggers do not have the features needed to present a clear conceptual view of a running program to novices <ref> [Birch95] </ref>. By contrast, Thetis is designed to present information about the execution state of a program in a way that is consistent with the novice programmers level of understanding.
Reference: [CenterLine95] <author> CenterLine Corporation, </author> <title> CodeCenter Users Guide, </title> <address> Cambridge, MA, </address> <year> 1995. </year>
Reference-contexts: In the end, we decided to undertake the project for the following reasons: There was no existing system that satisfied both our pedagogical goals and our hardware requirements. Even though it is possible to buy commercial C interpreters, such as CenterLines CodeCenter product <ref> [CenterLine95] </ref>, that offer many of the features we seek, those systems do not run on the hardware available on campus, which is primarily the Apple Macintosh. The introductory CS courses at Stanford enroll over 1200 students per year, making it infeasible to contemplate a change of platform.
Reference: [Goldenstein89] <author> D. R. Goldenstein, </author> <title> The impact of structure editing on introductory computer science education: The results so far, </title> <journal> SIGCSE Bulletin, </journal> <month> September </month> <year> 1989. </year>
Reference-contexts: We also intend to make the following enhancements to Thetis over the next two years: Extend the text editor to provide automatic formatting of the sort found in structure-based editors <ref> [Goldenstein89] </ref> Develop an effective online help system Provide more syntactic, stylistic, and runtime checking Enhance the visualizer to support in-class demonstrations Port Thetis to other platforms Release the system for general use
Reference: [Hamilton42] <author> Edith Hamilton, Mythology, Boston: Little, Brown and Co., </author> <year> 1942. </year>
Reference: [Roberts93] <author> Eric S. Roberts, </author> <title> Using C in CS1: Evaluating the Stanford experience, </title> <journal> SIGCSE Bulletin, </journal> <month> March </month> <year> 1993. </year>
Reference-contexts: The fear, as one lecturer expressed it, was that students would end up spending more of their time debugging and less of their time learning. As we have reported elsewhere <ref> [Roberts93, Roberts95a] </ref>, the change to C has had a positive effect on the computer science program and that we have in fact achieved most of the benefits we anticipated. Even so, it is important to note that the concerns were not without foundation. <p> Our pedagogical approach depends on the use of libraries that are most effective when well integrated within the programming environment. Our success in teaching C depends to a large extent on the use of the cslib libraries <ref> [Roberts93, Roberts95a] </ref>, which temporarily mask much of Cs complexity until students are better prepared to understand the underlying representation. To ensure that students are not confused by conflicting models, it is important for all components of the interpreter to take account of the cslib definitions.
Reference: [Roberts95a] <author> Eric S. Roberts, </author> <title> The Art and Science of C: A Library-Based Approach, </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: The fear, as one lecturer expressed it, was that students would end up spending more of their time debugging and less of their time learning. As we have reported elsewhere <ref> [Roberts93, Roberts95a] </ref>, the change to C has had a positive effect on the computer science program and that we have in fact achieved most of the benefits we anticipated. Even so, it is important to note that the concerns were not without foundation. <p> Our pedagogical approach depends on the use of libraries that are most effective when well integrated within the programming environment. Our success in teaching C depends to a large extent on the use of the cslib libraries <ref> [Roberts93, Roberts95a] </ref>, which temporarily mask much of Cs complexity until students are better prepared to understand the underlying representation. To ensure that students are not confused by conflicting models, it is important for all components of the interpreter to take account of the cslib definitions.
Reference: [Roberts95b] <author> Eric S. Roberts, John Lilly, and Bryan Rollins, </author> <title> Using undergraduates as teaching assistants in introductory programming courses: An update on the Stanford experience, </title> <journal> SIGCSE Bulletin, </journal> <month> March </month> <year> 1995. </year>
Reference-contexts: We had a team of students who were interested in taking on the project. At Stanford, studentseven at the undergraduate levelare more fully integrated into the computer science teaching program than at many institutions <ref> [Roberts95b] </ref>. The idea of building a C interpreter for use in the introductory classes captured their imaginations and enthusiasm more than any other project idea in recent memory. Many students contributed ideas to the project and sought to become more involved.
Reference: [Ruckert93] <author> Martin Ruckert and Richard Halpern, </author> <title> Educational C, </title> <journal> SIGCSE Bulletin, </journal> <month> March </month> <year> 1993. </year>
Reference-contexts: This paper describes the Thetis project and our experiences using it at Stanford. 2. SHORTCOMINGS OF EXISTING COMPILERS The idea that weaknesses in the programming environment complicate the learning process for beginning students is not a new one; such shortcomings have been recognized in earlier papers <ref> [Ruckert93, Schorsch95] </ref>. The underlying problem is that most commercial compilersparticularly for languages like C that cater to a large audience of programmersare designed for experts rather than novices. As a result, most of these compilers are poorly suited to student use. <p> Other examples of constructs likely to be erroneous include using relational operators to compare strings and failing to include function prototypes. The arguments for enhanced syntactic checking in Thetis are similar to those outlined for the syntactic restrictions of Educational C <ref> [Ruckert93] </ref>. When such checking is enabledas it is for the introductory classesstudents make fewer errors and can concentrate on developing better programming skills. Runtime error detection For introductory students, the most frustrating phase of debugging is finding the logic errors that persist after all syntactic errors have been corrected.
Reference: [Schorsch95] <author> Tom Schorsch, </author> <title> CAP: An automated self-assessment tool to check Pascal programs for syntax, logic, and style errors, </title> <journal> SIGCSE Bulletin, </journal> <month> March </month> <year> 1995. </year>
Reference-contexts: This paper describes the Thetis project and our experiences using it at Stanford. 2. SHORTCOMINGS OF EXISTING COMPILERS The idea that weaknesses in the programming environment complicate the learning process for beginning students is not a new one; such shortcomings have been recognized in earlier papers <ref> [Ruckert93, Schorsch95] </ref>. The underlying problem is that most commercial compilersparticularly for languages like C that cater to a large audience of programmersare designed for experts rather than novices. As a result, most of these compilers are poorly suited to student use.
References-found: 10

