URL: http://www.cs.cmu.edu/afs/cs/project/amulet/www/papers/amulethcic95.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs/project/amulet/www/amulet-papers.html
Root-URL: 
Title: The Design for the Amulet User Interface Toolkit  
Author: Brad A. Myers, Rich McDaniel, Andrew Mickish, Alex Klimovitski 
Keyword: User Interface Software, User Interface Management Systems, Toolkits.  
Address: Pittsburgh, PA 15213  
Affiliation: Human Computer Interaction Institute School of Computer Science Carnegie Mellon University  
Phone: (412) 268-5150  
Date: January 1995  
Web: http://www.cs.cmu.edu:8001/Web/Groups/amulet/amulet-home.html  
Abstract: Amulet is a new user interface software environment for C++ to support future user interface software research. This environment, which will be portable across X/11, Microsoft Windows, and the Macintosh, is designed to be very flexible: parts can be replaced and new technologies and widgets can be easily created and evaluated. Built-in support will be provided for direct manipulation, multi-font text editing, gesture recognition, speech recognition, 2-D and 3-D animations, visualizations including maps and large data sets, worldwide-web browsing and editing, and multiple people interacting with the system at the same time (CSCW). Another goal is to be useful for students, which means that Amulet must be easy to learn. Finally, the system will provide sufficient performance, robustness and documentation so it will be useful for general user interface developers. This research was sponsored by NCCOSC under Contract No. N66001-94-C-6037, Arpa Order No. B326. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of NCCOSC or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [Ahlberg 92] <author> C. Ahlberg, C. Williamson and B. Shneiderman. </author> <title> Dynamic Queries for Information Explor ation: An Implementation and Evaluation, </title> <booktitle> Proceedings ACM CHI92 Conference, </booktitle> <year> 1992. </year> <pages> pp. 619-626. </pages>
Reference-contexts: Amulet re-implements all the widgets rather than using the built-in widgets from the various toolkits so that we can provide flexibility and control to programmers who want to investigate new behaviors. This is necessary, for example, to create a scroll bar with two handles <ref> [Ahlberg 92] </ref> or to support multiple people operating with a widget at the same time for a CSCW application. In addition, Amulet supplies other widgets for the insides of application programs.
Reference: [Gleicher 93] <author> Michael Gleicher, </author> <title> A Graphics Toolkit Based on Differential Constraints, </title> <booktitle> Proceedings UIST'93: ACM Symposium on User Interface Software and Technology , Nov, 1993, </booktitle> <address> Atlanta, GA, </address> <pages> pp. 109-120 </pages>
Reference: [Hill 93] <author> Ralph D. Hill, </author> <title> The Rendezvous Constraint Maintenance System, </title> <booktitle> Proceedings UIST'93: ACM Symposium on User Interface Software and Technology, </booktitle> <address> Nov, 1993, Atlanta, GA, </address> <pages> pp. 225-234 </pages>
Reference: [Kosbie 93] <author> David S. Kosbie and Brad A. Myers, </author> <title> A SystemWide Macro Facility Based on Aggregate Events: A Proposal, Watch What I Do: Programming by Demonstration. </title> <editor> Allen Cypher, ed. </editor> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <year> 1993, </year> <pages> pp. 433-444 </pages>
Reference-contexts: At the completion of each interactor or widget, a command object is generated, and its do method is called. The command object is then stored in case the user wants to perform undo. Kosbie introduced the idea of making the command objects hierarchical <ref> [Kosbie 93] </ref>, which means that a low-level command object such as move-object might be part of a higher-level command object such as adjustscroll-bar-indicator. This gives the programmer significant flexibility while still providing built-in undo.
Reference: [Myers 90a] <author> Brad A. Myers, Dario A. Giuse, Roger B. Dannenberg, Brad Vander Zanden, David S. Kosbie, Ed Pervin, Andrew Mickish, and Philippe Marchal. </author> <title> ``Garnet; Comprehensive Support for Graphical, Highly-Interactive User Interfaces,'' </title> <journal> IEEE Computer. </journal> <volume> vol. 23, no. 11. </volume> <month> November, </month> <year> 1990. </year> <pages> pp. 71-85. </pages>
Reference-contexts: Amulet, which stands for Automatic Manufacture of Usable and Learnable Editors and Toolkits , is being implemented in C++. Amulet is based on our groups substantial experience with the Garnet user interface development environment <ref> [Myers 90a] </ref>, which is implemented in Common Lisp. Amulet will bring to C++ the dynamic and rapid user interface design and implementation capabilities that Garnet provided in Lisp, while adding many new capabilities. This paper provides an overview of the goals and the initial design of Amulet.
Reference: [Myers 90b] <author> Brad A. Myers. </author> <title> A New Model for Handling Input,' </title> <journal> ACM Transactions on Information Systems . vol. </journal> <volume> 8, no. 3. </volume> <month> July, </month> <year> 1990. </year> <pages> pp. 289-320. </pages>
Reference-contexts: Interactors Programming interactive behaviors has always been the hardest part of user interface software, especially since most toolkits and window managers only provide a stream of raw input events for each window which the programmer must interpret and manage. Garnet introduced the Interactor model for handling input <ref> [Myers 90b] </ref> which is refined in Amulet. Each Interactor object type implements a particular kind of interactive behavior, such as moving an object with the mouse, or selecting one of a set of objects.
Reference: [Neches 93] <author> R.Neches, J. Foley, P. Szekely, P. Sukaviriya, P. Luo, S. Kovacevic, and S. Hudson, </author> <title> Knowledgable Development Environments Using Shared Design Models, </title> <booktitle> Proceedings of the 1993 ACM International Workshop on Intelligent User Interfaces, </booktitle> <address> Orlando, FL, </address> <publisher> Jan,1993, </publisher> <pages> pp. 63-70 </pages>
Reference-contexts: The intrinsics layer of the toolkit makes it easy to create new kinds of widgets and modify the existing widgets. Finally, hooks are in place to allow integration of new input mechanisms such as speech, gestures and CSCW. The MASTERMIND project at USC/ISI and Georgia Tech <ref> [Neches 93] </ref>, has already started using Amulet as the foundation for their user interface software research, and we hope many others will use Amulet after it is released. Students.
Reference: [Ousterhout 91] <author> John K. Ousterhout, </author> <title> An X11 Toolkit Based on the Tcl Language, </title> <booktitle> USENIX Winter Conference, </booktitle> <year> 1991, </year> <pages> pp. 105-115 </pages>
Reference-contexts: An important issue is how to allow the interactive tools to execute an interface as it is being created. In Garnet, we could simply use the built-in Lisp interpreter. Some commercial tools, such as UIMX incorporate a C interpreter. The success of tcl/tk <ref> [Ousterhout 91] </ref> shows that people are anxious to use an interpretive environment for user interface development.
Reference: [Pausch 91] <author> Randy Pausch, Nathaniel R. Young II, and Robert DeLine, SUIT: </author> <title> The Pascal of User Interface Toolkits, </title> <booktitle> Proceedings UIST'91: ACM SIGGRAPH Symposium on User Interface Software and Technology. </booktitle> <month> Nov, </month> <year> 1991, </year> <title> Hilton Head, </title> <booktitle> SC, </booktitle> <pages> pp. 117-125 </pages>
Reference-contexts: Students. By aiming for Amulet to be useful to students, we will perform the required iterative user testing and refinement to simplify the programming interface of Amulet itself. The success of SUIT <ref> [Pausch 91] </ref> and Microsofts Visual Basic The Design for the Amulet User Interface Toolkit - 3 show that it is possible to provide useful functionality in a way that is easy to learn, but unlike those other systems, Amulet will provide a natural growth path to the complete fully-functional system.
Reference: [Sannella 94] <author> Michael Sannella, SkyBlue: </author> <title> A Multi-Way Local Propagation Constraint Solver for User Interface Construction, </title> <booktitle> Proceedings UIST'94: ACM SIGGRAPH Symposium on User Interface Software and Technology. </booktitle> <month> Nov, </month> <year> 1994, </year> <institution> Marina del Rey, </institution> <address> CA, </address> <pages> pp. 137-146 </pages>
Reference-contexts: Therefore, in addition to the standard solver described above, Amulet is designed to support other constraint systems at the same time. Since two different constraint solvers were made to work together in Garnet <ref> [Sannella 94] </ref>, we believe that this will work, but how to schedule the various sol -vers is an open research issue, especially when multiple solvers want to set the same slot. 3.4.
Reference: [Vander Zanden 92] <author> Brad Vander Zanden, </author> <title> An Active-Value-Spreadsheet Model for Interactive Languages, in Languages for Developing User Interfaces, </title> <editor> Brad A. Myers, ed. </editor> <address> Boston, MA: </address> <publisher> Jones and Bartlett, </publisher> <year> 1992. </year> <pages> pp. 183-209 </pages>
Reference-contexts: This function, in addition to returning the value, also sets up a dependency link so that the constraint will be reevaluated when the other object changes. An important research area in user interface software is creating new kinds of constraint solvers (e.g. <ref> [Vander Zanden 92] </ref>[Hill 93][Gleicher 93]). Therefore, in addition to the standard solver described above, Amulet is designed to support other constraint systems at the same time.
Reference: [Wilson 90] <author> David Wilson. </author> <title> Programming with MacApp. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1990 </year>
Reference-contexts: Our ultimate goal is to allow the user interface designer to simply draw examples of the graphics of the interface, and then demonstrate the interactive behaviors to show how the interface should react to the user. The motivation for this is that whereas todays programming frameworks such as MacApp <ref> [Wilson 90] </ref>, have demonstrated productivity gains of factors of 2 to 5, interactive tools like HyperCard and interface builders like the NeXT Interface Builder have demonstrated productivity gains of factors of 10 to 50. <p> However, sometimes other actions are required. In conventional toolkits, this would be implemented using call-back procedures, but Amulet takes a different approach, based on the design of MacApp The Design for the Amulet User Interface Toolkit - 7 <ref> [Wilson 90] </ref>. At the completion of each interactor or widget, a command object is generated, and its do method is called. The command object is then stored in case the user wants to perform undo.
References-found: 12

