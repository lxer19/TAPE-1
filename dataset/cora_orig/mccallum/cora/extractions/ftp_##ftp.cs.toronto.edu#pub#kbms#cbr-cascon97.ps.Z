URL: ftp://ftp.cs.toronto.edu/pub/kbms/cbr-cascon97.ps.Z
Refering-URL: http://www.cs.utoronto.ca/~juris/myp.html
Root-URL: 
Email: juris@ai.utoronto.ca  
Title: Similarity-Based Retrieval for Diverse Bookshelf Software Repository Users  
Author: Igor Jurisica 
Address: Toronto, Ontario M5S 1A4, Canada,  
Affiliation: Department of Computer Science, University of Toronto  
Abstract: The paper presents a similarity-based retrie - val framework for a software repository that aids the process of maintaining, understan ding, and migrating legacy software systems [12]. Designing a software repository involves three issues: (1) information content; (2) info r-mation representation; and (3) strategies for a c-cessing repository artifacts. Assuming the arch i-tecture presented in [12] we extend the retrieval system to support imprecise queries, iterative browsing, and diverse users. Because of repos i-tory size, complexity of queries and relations among artifacts, we take a performance approach to support a scalable implementation. We propose a retrieval system that uses n u-meric [31] and semantically rich context-based similarity [19]. Efficient iterative browsing is based on an incremental query evaluation alg o-rithm from database management systems [20]. Explicitly defined context supports various r e-trieval strategies and diverse user models. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. J. Belkin, C. Cool, A. Stein and U. Thiel. </author> <title> Cases, scripts, and informationseeking CASCON-97 11 strategies: On the design of interactive info r-mation retrieval systems. </title> <journal> Expert Systems with Applications, </journal> <volume> 9(3): </volume> <pages> 379-395, </pages> <year> 1995. </year>
Reference-contexts: The user may specify an initial query d i-rectly, or using query-by-example. When the answer does not satisfy quantity or quality r e-quirements, query-by-reformulation is initiated. Artifacts similar to the retrieved ones can be e x-plored by modifying the initial query <ref> [1, 24] </ref>. This paper describes a similarity-based r e-trieval system for a software repository that re presents information about legacy software sy stems. We assume the architecture presented in [12], and we focus on retrieving all (and only) relevant repository items even for an imprecise query. <p> Retrieval strategies may change not only between individual sessions but even within a particular one. Users rarely specify their information needs, mainly because conception of information pro b-lems may change in the process. More recently it was observed that information retrieval is an i n-herently interactive process <ref> [1, 24] </ref>. Thus, the retrieval system should deploy an efficient iter a-tive browsing [5, 34], which provides the means for exploring the neighborhood of a repository artifact. Such neighborhood depends on the task, current state of the search, and the repository state. <p> The usefulness of different in formationseeking strategies d e-pends on the users background and the task at hand. Available strategies can be characterized on many dimensions, each with a varied comb i-nation of characteristics <ref> [1] </ref>: Method of intera c-tion (e.g., scanning, searching), goal of intera c-tion (e.g., learning, selecting), mode of retrieval (e.g., recognition, specification), and resource considered (e.g., information, meta-information). Assuming different user models and active tasks, it is possible to estimate a user's goal, and then suggest an appropriate informationseeking strategy [9].
Reference: [2] <author> G. Canfora, A. Cimitile and M. Munro. </author> <title> An improved algorithm for identifying objects in code. </title> <journal> Software-Practice and Experience. </journal> <volume> 26(1): </volume> <pages> 25-48, </pages> <year> 1996. </year>
Reference-contexts: The next section describes context-based similarity, and query transformations. 2.1. Similarity-Based Retrieval Traditionally, information retrieval has been concerned with representation of texts and co m-parison of these representations. Software eng i-neering research contemplated abstracting source code to make the retrieval process easier by pr o-viding extra information <ref> [2, 10, 43] </ref>. In addition, users rarely specify query precisely and/or co m-pletely. As a result, uncertain and imprecise i n-formation must be taken into account when d e-signing retrieval systems. Numerous approaches support imprecise queries, most of which are based on fuzzy logic [38, 45].
Reference: [3] <author> P. Cunningham, A. Bonzano and B. Smyth. </author> <title> An Incremental Case Retrieval Mechanism for Diagnosis, </title> <type> Technical Report TCD-CS-95-01, </type> <institution> Trinity College, </institution> <address> Dublin, </address> <year> 1995. </year>
Reference: [4] <author> P. Constantopoulos, M. Jarke, J. Mylopoulos, and Y. Vassiliou. </author> <title> The software information base: A server for reuse. </title> <journal> VLDB Journal, </journal> <volume> 4, </volume> <year> 1995. </year>
Reference-contexts: They include library cataloging, database classification, query-based retrieval [42], formal specification [37], information retrieval [7], hypertext-based class i-fication and retrieval [17], similarity-based o r-ganization [25, 39], clus tering and browsing [5, 34], case [11, 13] and analogy-based retrieval [30], and hybrid organizations <ref> [4] </ref>. Similarity-based retrieval helps to access re - levant artifacts when the query is not complete and precise by iteratively relaxing or restricting the initial query [15, 34]. This becomes useful when a repository is large, and created by many users over a longer time period. <p> Because the components must be d e-scribed in terms of all features, adding new fe a-tures involves modifying all components that are already stored in the library. IBM CASCON Conference Toronto, November 10-13, 1997 CASCON-97 2 Constantopoulos et al. <ref> [4] </ref> presents a co n-ceptual knowledge base, called SIB, to support software reuse. The Telos language [33] is used to represent requirements, design and code. SIBs query system is based on graphical tr a-versal of semantic links. The use of similarity-based retrieval in dat abases is described in [22].
Reference: [5] <author> C. Carpineto and G. Romano. </author> <title> A lattice co n-ceptual clustering system and its application to browsing retrieval. </title> <booktitle> Machine Learning . 24(2): </booktitle> <pages> 95-122, </pages> <year> 1996. </year>
Reference-contexts: Diverse techniques are used to retrieve sof t-ware artifacts from a repository. They include library cataloging, database classification, query-based retrieval [42], formal specification [37], information retrieval [7], hypertext-based class i-fication and retrieval [17], similarity-based o r-ganization [25, 39], clus tering and browsing <ref> [5, 34] </ref>, case [11, 13] and analogy-based retrieval [30], and hybrid organizations [4]. Similarity-based retrieval helps to access re - levant artifacts when the query is not complete and precise by iteratively relaxing or restricting the initial query [15, 34]. <p> Users rarely specify their information needs, mainly because conception of information pro b-lems may change in the process. More recently it was observed that information retrieval is an i n-herently interactive process [1, 24]. Thus, the retrieval system should deploy an efficient iter a-tive browsing <ref> [5, 34] </ref>, which provides the means for exploring the neighborhood of a repository artifact. Such neighborhood depends on the task, current state of the search, and the repository state. This means that the neighborhood of an artifact is context-dependent. 2.1.1. <p> Third, correspondence would cover relationships of indivi dual software artifacts during migration process. Context-based similarity can be used to solve other problems that are beyond the scope of this paper. A natural application is repository clu s-tering <ref> [5, 8, 34] </ref>. The proposed context-based similarity assessment can also be used to orga n-ize knowledge by clustering the repository co n-tent into equivalence classes, i.e., into classes of artifacts that share similarity with respect to the given context [21].
Reference: [6] <author> W. W. Chu, H. Yang, K. Chiang, M. Minock, G. Chow, C. Larson. CoBase: </author> <title> A scalable and extensible cooperative information system. </title> <journal> Journal of Intelligent Information Systems , (6), </journal> <year> 1996. </year>
Reference-contexts: Browsing is crucial in software library systems [34], and is useful in training usage scenarios, or when a repository is large and created by many users over a longer period of time. This can be used in cooperative retrieval systems, similar to the one described in <ref> [6] </ref>. Similarity-based retrieval deploys concept h i-erarchies of artifacts, and uses virtual links to traverse the repository and to relax or restrict the query. For example, when accessing a variable declaration, the system retrieves all modules and files that include such a declaration.
Reference: [7] <author> R. P. D'iaz and P. Freeman. </author> <title> Classifying sof t-ware for reusability. </title> <journal> IEEE Software, </journal> <volume> 4(16) </volume> <pages> 6-16, </pages> <year> 1987. </year>
Reference-contexts: Thus, retrieval strategies cannot be predefined, and the system should support imprecise queries and iterative browsing. Diverse techniques are used to retrieve sof t-ware artifacts from a repository. They include library cataloging, database classification, query-based retrieval [42], formal specification [37], information retrieval <ref> [7] </ref>, hypertext-based class i-fication and retrieval [17], similarity-based o r-ganization [25, 39], clus tering and browsing [5, 34], case [11, 13] and analogy-based retrieval [30], and hybrid organizations [4].
Reference: [8] <author> K. S. Daudjee and A. A. Toptsis. </author> <title> Automatic organization of reusable software components in a multidimensional space. </title> <booktitle> In WITS-94, </booktitle> <pages> pages 11-20, </pages> <address> Vancouver, BC, </address> <year> 1994. </year>
Reference-contexts: Our claim is that similarity-based retrieval improves precision, and supports iterative browsing. Our previous studies suggest that the claim holds [19, 21]. Here we consider a functional description repository of basic data structures, similar to the one in <ref> [8, 10] </ref>. A functional description is a repository art i-fact described by a set of features and organized into categories. <p> These results are consi s-tent with our previous evaluations [19, 21], but since the repository of functional descriptions is rather small (only 150 data structures) and si m-plistic, we intend to run fullscale studies on a larger and more complex software repository. Performance improvement over results pr e-sented in <ref> [8, 10] </ref> was achieved for two reasons. First, context-based similarity assessment keeps semantic information about distance among art i-facts, which enables better control over relevant CASCON-97 10 and irrelevant artifacts. <p> Third, correspondence would cover relationships of indivi dual software artifacts during migration process. Context-based similarity can be used to solve other problems that are beyond the scope of this paper. A natural application is repository clu s-tering <ref> [5, 8, 34] </ref>. The proposed context-based similarity assessment can also be used to orga n-ize knowledge by clustering the repository co n-tent into equivalence classes, i.e., into classes of artifacts that share similarity with respect to the given context [21].
Reference: [9] <author> B. Errico and I. Jurisica. CaBUMA: </author> <title> A case-based approach to user modeling. </title> <booktitle> In prepar a-tion. </booktitle>
Reference-contexts: Assuming different user models and active tasks, it is possible to estimate a user's goal, and then suggest an appropriate informationseeking strategy <ref> [9] </ref>. For example, a novice user is more likely to get better results using a scanning method of interaction. In contrast, a maintenance software engineer needs an efficient searching method in order to retrieve a specific repository artifact. <p> Thus, each attribute has its own constraint and can be treated in a distinct way during relaxation and restriction. This results in a more flexible version of the m_of_n matching [35], which enables higher precision [19]. Incremental query revisions are computed efficiently [20]. 3 User models can be reused <ref> [9] </ref>. There are several levels of query imprecision. In addition, different representation schemes can be used to store repository artifacts. To cover the spectrum of these problems, we define the fo l-lowing measures used in the similarity-based retrieval module: lexical, semantic, functional, and spatial. <p> Conclusions The work presented here is relevant to other aspects of a software repository: repository a r-chitecture [12], the process of building complex decisionsupport systems [23], and user modeling <ref> [9] </ref>. As a next step, we plan to integrate indivi dual components of a software repository and to conduct a more comprehensive performance evaluation which will include task performance, system scalability and user acceptance. User studies will indicate whether our goal of su p-porting diverse user models has been achieved. <p> The user can manually alter the context at all times. Context-based similarity enables fuzzy qu e-ries and similarity-based retrieval [19]. For r elated work see [11, 13, 40, 39]. Case-based re a-soning can be applied in user modeling <ref> [9] </ref>. It extends traditional approaches by representing users as cases. User profiles, tasks and actions guide similarity-based retrieval. <p> User profiles, tasks and actions guide similarity-based retrieval. We can also use case-based reasoning to evaluate performance, since after we accumulate cases, we can estimate the execution time of the query based on its complexity and also on the network load <ref> [9] </ref>. A contribution of this paper is in extending retrieval capabilities of the Bookshelf repository, by using context-based similarity assessment algorithm.
Reference: [10] <author> M. F ustle, G. Fugini and E. Damiani. </author> <title> R e-trieval of reusable components using fun c-tional similarity. </title> <journal> Software-Practice and E x-prience. </journal> <volume> 26(5): </volume> <pages> 491-530, </pages> <year> 1996. </year>
Reference-contexts: The next section describes context-based similarity, and query transformations. 2.1. Similarity-Based Retrieval Traditionally, information retrieval has been concerned with representation of texts and co m-parison of these representations. Software eng i-neering research contemplated abstracting source code to make the retrieval process easier by pr o-viding extra information <ref> [2, 10, 43] </ref>. In addition, users rarely specify query precisely and/or co m-pletely. As a result, uncertain and imprecise i n-formation must be taken into account when d e-signing retrieval systems. Numerous approaches support imprecise queries, most of which are based on fuzzy logic [38, 45]. <p> Next we describe how semantic and functional similarities are related. 2.3.3. Functional Similarity Functional similarity covers similarity a c 4 Although a phonetic similarity may be used, it would have a limited utility for software engineering. cording to functional description of the artifact. Methods such as described in <ref> [10] </ref> can be used. Our system can use functional similarity once the abstracted description is provided. The similarity is determined between a functional description in the query and functional descriptions found in the repository, taking into account relevance of individual features. <p> The matching process can be tuned up by using information about relevance of individual features. Lexical similarity is used as a flexible approach to wildcards matching <ref> [10] </ref>. It controls the matching process semantically. It also su p-ports incremental query transformations. 2.3.4. Spatial Similarity Spatial similarity is determined based on the spatial relevance, i.e., placement in the same module, file or function, and is determined using a knowledge base [12]. <p> Our claim is that similarity-based retrieval improves precision, and supports iterative browsing. Our previous studies suggest that the claim holds [19, 21]. Here we consider a functional description repository of basic data structures, similar to the one in <ref> [8, 10] </ref>. A functional description is a repository art i-fact described by a set of features and organized into categories. <p> These results are consi s-tent with our previous evaluations [19, 21], but since the repository of functional descriptions is rather small (only 150 data structures) and si m-plistic, we intend to run fullscale studies on a larger and more complex software repository. Performance improvement over results pr e-sented in <ref> [8, 10] </ref> was achieved for two reasons. First, context-based similarity assessment keeps semantic information about distance among art i-facts, which enables better control over relevant CASCON-97 10 and irrelevant artifacts. <p> Second, a combination of the retrieval system with a high recall, and iter a-tive browsing that removes irrelevant artifacts increases precision. The main distinguishing factor, when comparing the proposed context-based similarity to systems such as [34] and <ref> [10] </ref>, is semantic information that is part of the sim i-larity assessment process. Besides task performance, we have also tested scalability of the system, albeit on diffe rent domains so far.
Reference: [11] <author> C. Fernandezchamizo, P. A. Go n-zalezcalero, L. Hernandezyanez and A. Urechbaque. </author> <title> Case-based retrieval of software components. </title> <journal> Expert Systems with Applic a-tions, </journal> <volume> 9(3): </volume> <pages> 397-405, </pages> <year> 1995. </year>
Reference-contexts: Diverse techniques are used to retrieve sof t-ware artifacts from a repository. They include library cataloging, database classification, query-based retrieval [42], formal specification [37], information retrieval [7], hypertext-based class i-fication and retrieval [17], similarity-based o r-ganization [25, 39], clus tering and browsing [5, 34], case <ref> [11, 13] </ref> and analogy-based retrieval [30], and hybrid organizations [4]. Similarity-based retrieval helps to access re - levant artifacts when the query is not complete and precise by iteratively relaxing or restricting the initial query [15, 34]. <p> Similar to retrieval, context can be inferred from either the active user model, or the task being solved. The user can manually alter the context at all times. Context-based similarity enables fuzzy qu e-ries and similarity-based retrieval [19]. For r elated work see <ref> [11, 13, 40, 39] </ref>. Case-based re a-soning can be applied in user modeling [9]. It extends traditional approaches by representing users as cases. User profiles, tasks and actions guide similarity-based retrieval.
Reference: [12] <author> P. Finnigan, R. Holt, I. Kalas, H. Mller, J. Mylopoulos, S. Perelgut, M. Stanley, K. Wong, S. Kerr. </author> <title> The Software Bookshelf. </title> <journal> IBM Systems Journal. </journal> <note> Accepted for publication. </note>
Reference-contexts: The use of similarity-based retrieval in dat abases is described in [22]. Termsinsuwan et al. [43] describes how case-based reasoning facil i-tates reuse of abstract data types. Henninger [18] introduces a case-based decision system for knowledge reuse in software engineering by means of formal domain analysis. Finnigan et al. <ref> [12] </ref> presents a software r e-pository, called Bookshelf, which was designed and developed to help in capturing and analyzing relevant information about legacy systems. Sof t-ware artifacts are represented using Telos [33]. A developer accesses software artifacts in the r e-pository by browsing its content. <p> Artifacts similar to the retrieved ones can be e x-plored by modifying the initial query [1, 24]. This paper describes a similarity-based r e-trieval system for a software repository that re presents information about legacy software sy stems. We assume the architecture presented in <ref> [12] </ref>, and we focus on retrieving all (and only) relevant repository items even for an imprecise query. Our objective is a retrieval system that is flexible enough to support diverse user models. Users have different expectations on Bookshelf, look for diverse information, and use different search patterns. <p> It controls the matching process semantically. It also su p-ports incremental query transformations. 2.3.4. Spatial Similarity Spatial similarity is determined based on the spatial relevance, i.e., placement in the same module, file or function, and is determined using a knowledge base <ref> [12] </ref>. Part-of relationships can be used to assess semantic similarity. For exa m-ple, flow.ss (flow subsystem) is semantically similar to support.ss, because both subsystems are part-of the dead store module. <p> Since the novice users goal is to understand a complex system they need to traverse the r e-pository hierarchically. For these reasons, query-byexample, query-by-reformu lation, and iter a-tive browsing are suitable retrieval strategies for novices. Finnigan et al. <ref> [12] </ref> describe scenarios, where a novice navigates through the repository by following links from a system architecture di a-gram, obtains a subsystem overview, and r e-trieves subsystem details by selecting one of its possible views. <p> Conclusions The work presented here is relevant to other aspects of a software repository: repository a r-chitecture <ref> [12] </ref>, the process of building complex decisionsupport systems [23], and user modeling [9]. As a next step, we plan to integrate indivi dual components of a software repository and to conduct a more comprehensive performance evaluation which will include task performance, system scalability and user acceptance.
Reference: [13] <author> G. Fouque and S. Matwin. </author> <title> Compositional software reuse with case-based reasoning. </title> <booktitle> In CAIA-93, </booktitle> <year> 1993. </year>
Reference-contexts: Diverse techniques are used to retrieve sof t-ware artifacts from a repository. They include library cataloging, database classification, query-based retrieval [42], formal specification [37], information retrieval [7], hypertext-based class i-fication and retrieval [17], similarity-based o r-ganization [25, 39], clus tering and browsing [5, 34], case <ref> [11, 13] </ref> and analogy-based retrieval [30], and hybrid organizations [4]. Similarity-based retrieval helps to access re - levant artifacts when the query is not complete and precise by iteratively relaxing or restricting the initial query [15, 34]. <p> Similar to retrieval, context can be inferred from either the active user model, or the task being solved. The user can manually alter the context at all times. Context-based similarity enables fuzzy qu e-ries and similarity-based retrieval [19]. For r elated work see <ref> [11, 13, 40, 39] </ref>. Case-based re a-soning can be applied in user modeling [9]. It extends traditional approaches by representing users as cases. User profiles, tasks and actions guide similarity-based retrieval.
Reference: [14] <author> T. Gaasterland. </author> <title> Restricting query relaxation through user constraints. </title> <booktitle> In Proc. International Conf. on Intelligent and Cooperative Information Systems, </booktitle> <pages> pages 359-366, </pages> <address> Rotte r-dam, The Netherlands, </address> <year> 1993 </year>
Reference: [15] <author> T. Gaasterland, P. Godfrey and J. Minker. </author> <title> Relaxation as a platform of cooperative a n-swering. </title> <booktitle> In. Proc. International Workshop on Nonstandard Answers and Queries. </booktitle> <address> Tou-louse, France, </address> <year> 1991. </year>
Reference-contexts: Similarity-based retrieval helps to access re - levant artifacts when the query is not complete and precise by iteratively relaxing or restricting the initial query <ref> [15, 34] </ref>. This becomes useful when a repository is large, and created by many users over a longer time period. Generally, it is impossible to decide in advance what needs to be retrieved, when, and in what form. Flexible and iterative similarity-based retrieval diminishes this problem [26].
Reference: [16] <author> M. R. Girardi and B. Ibrahim. </author> <title> A similarity measure for retrieving software artifacts. </title> <type> Technical Report, </type> <institution> Universtiy of Geneva, Centre Universitaire d`Informatique, </institution> <year> 1994. </year>
Reference: [17] <author> P. Garg and W. Scacchi. ISHYS: </author> <title> Designing an intelligent software hypertext system, </title> <journal> IEEE Expert, </journal> <pages> pages 52-82, </pages> <year> 1989. </year>
Reference-contexts: Thus, retrieval strategies cannot be predefined, and the system should support imprecise queries and iterative browsing. Diverse techniques are used to retrieve sof t-ware artifacts from a repository. They include library cataloging, database classification, query-based retrieval [42], formal specification [37], information retrieval [7], hypertext-based class i-fication and retrieval <ref> [17] </ref>, similarity-based o r-ganization [25, 39], clus tering and browsing [5, 34], case [11, 13] and analogy-based retrieval [30], and hybrid organizations [4]. Similarity-based retrieval helps to access re - levant artifacts when the query is not complete and precise by iteratively relaxing or restricting the initial query [15, 34].
Reference: [18] <author> S. Henninger. </author> <title> A case-based approach to developing knowledge for software develo p-ment. </title> <booktitle> In The 3 rd Workshop on AI and Sof t-ware Engineering: Breaking the Mold. IJCAI-95, </booktitle> <address> Montreal, Quebec, </address> <year> 1995. </year>
Reference-contexts: SIBs query system is based on graphical tr a-versal of semantic links. The use of similarity-based retrieval in dat abases is described in [22]. Termsinsuwan et al. [43] describes how case-based reasoning facil i-tates reuse of abstract data types. Henninger <ref> [18] </ref> introduces a case-based decision system for knowledge reuse in software engineering by means of formal domain analysis. Finnigan et al. [12] presents a software r e-pository, called Bookshelf, which was designed and developed to help in capturing and analyzing relevant information about legacy systems.
Reference: [19] <author> I. Jurisica and J. Glasgow. </author> <title> Improving pe r-formance of case-based classification using context-based relevancy. </title> <journal> International Jou r-nal of Artificial Intelligence Tools. </journal> <note> Special Issue of IEEE ITCAI-96 Best Papers. 6(3&4), In Press. </note> <year> 1997. </year>
Reference-contexts: B ecause of repository size, co m-plexity of represented relations and query co m-plexity, the system must be scalable. To achieve this functionality, we adopt an e f-ficient context-based retrieval algorithm from the case-based reasoning system TA3 <ref> [19, 20, 21] </ref>. The algorithm supports imprecise queries, and automatic query transformations that control quantity and relevance of retrieved artifacts. The system's flexibility is accomplished by explicitly stating context in the similarity definition, and by using the Telos [33] representation language. 2. <p> This means that the neighborhood of an artifact is context-dependent. 2.1.1. Context-Based Similarity Similarity-based retrieval supports the r e-trieval of exact and similar matches [22]. Rel e-vant artifacts are retrieved even for an imprecise query. In addition, such retrieval aids in explo ring the neighborhood of a given artifact <ref> [25, 19] </ref>. Explicit context in the query modifies the search pattern and similarity assessment outcome [26]. It is assumed that repository artifacts are represented as structured objects with relations [33]. <p> Using information about usefulness and properties, 1 attributes are grouped into one or more Telos categories [33]. Categories bring additional structure to information represent a-tion. This decreases the impact of irrelevant a t-tributes on system performance <ref> [19, 35] </ref>. For example, dsinit is a function a repos i tory artifact with the following attributes: name: dsinit, formal arguments: (int, float), return type: float, source location: xx_dsini . 1 This information comes from either domain know l edge or via knowledge mining. <p> They are executed either automatically or by the user [26]. Query-by-reformulation and iterative browsing use two transformations: relaxation and restriction. Query relaxation extends the scope of a query and explores the neighborhood of a given artifact [26]. Relaxation is a monotonic transformation <ref> [19, 24] </ref>. It is implemented as either reduction or generalization. <p> More specifically, categories group equally important attributes together. Thus, each attribute has its own constraint and can be treated in a distinct way during relaxation and restriction. This results in a more flexible version of the m_of_n matching [35], which enables higher precision <ref> [19] </ref>. Incremental query revisions are computed efficiently [20]. 3 User models can be reused [9]. There are several levels of query imprecision. In addition, different representation schemes can be used to store repository artifacts. <p> Functional Description Repository This section describes preliminary perfor m-ance evaluation of the proposed similarity-based retrieval system. Our claim is that similarity-based retrieval improves precision, and supports iterative browsing. Our previous studies suggest that the claim holds <ref> [19, 21] </ref>. Here we consider a functional description repository of basic data structures, similar to the one in [8, 10]. A functional description is a repository art i-fact described by a set of features and organized into categories. <p> By selecting reduction, generalization or both, we simulated recall and precision-oriented retrieval, and recall-oriented retrieval with iterative precision improvement. Using the last approach yielded 100% recall rate with perfect precision. These results are consi s-tent with our previous evaluations <ref> [19, 21] </ref>, but since the repository of functional descriptions is rather small (only 150 data structures) and si m-plistic, we intend to run fullscale studies on a larger and more complex software repository. Performance improvement over results pr e-sented in [8, 10] was achieved for two reasons. <p> The results we have obtained show that the incr e-mental approach and context-based similarity are superior to traditional retrieval, both in terms of quality of the retrieved artifacts <ref> [19] </ref> and speed in which the answer is obtained [20]. 4. Conclusions The work presented here is relevant to other aspects of a software repository: repository a r-chitecture [12], the process of building complex decisionsupport systems [23], and user modeling [9]. <p> Similar to retrieval, context can be inferred from either the active user model, or the task being solved. The user can manually alter the context at all times. Context-based similarity enables fuzzy qu e-ries and similarity-based retrieval <ref> [19] </ref>. For r elated work see [11, 13, 40, 39]. Case-based re a-soning can be applied in user modeling [9]. It extends traditional approaches by representing users as cases. User profiles, tasks and actions guide similarity-based retrieval.
Reference: [20] <author> I. Jurisica and J. Glasgow. </author> <title> An efficient a p-proach to iterative browsing and retrieval for case-based reasoning. </title> <note> Submitted. </note> <year> 1997. </year>
Reference-contexts: B ecause of repository size, co m-plexity of represented relations and query co m-plexity, the system must be scalable. To achieve this functionality, we adopt an e f-ficient context-based retrieval algorithm from the case-based reasoning system TA3 <ref> [19, 20, 21] </ref>. The algorithm supports imprecise queries, and automatic query transformations that control quantity and relevance of retrieved artifacts. The system's flexibility is accomplished by explicitly stating context in the similarity definition, and by using the Telos [33] representation language. 2. <p> Small u p-dates to the query generally produce only small changes to the query result. Thus, an incremental approach requires only local changes to the query. Efficiency improvement is more visible during iterative browsing, or when a large and/or complex repository is used <ref> [20] </ref>. 2.2. Retrieval Strategies Maarek et al. [34] define the component r e-trieval scenario as query specification, followed by linear re trieval and browsing. The usefulness of different in formationseeking strategies d e-pends on the users background and the task at hand. <p> Context-based similarity supports iterative browsing by incremental query relaxation and restriction <ref> [20] </ref>. Browsing is crucial in software library systems [34], and is useful in training usage scenarios, or when a repository is large and created by many users over a longer period of time. This can be used in cooperative retrieval systems, similar to the one described in [6]. <p> Thus, each attribute has its own constraint and can be treated in a distinct way during relaxation and restriction. This results in a more flexible version of the m_of_n matching [35], which enables higher precision [19]. Incremental query revisions are computed efficiently <ref> [20] </ref>. 3 User models can be reused [9]. There are several levels of query imprecision. In addition, different representation schemes can be used to store repository artifacts. <p> The results we have obtained show that the incr e-mental approach and context-based similarity are superior to traditional retrieval, both in terms of quality of the retrieved artifacts [19] and speed in which the answer is obtained <ref> [20] </ref>. 4. Conclusions The work presented here is relevant to other aspects of a software repository: repository a r-chitecture [12], the process of building complex decisionsupport systems [23], and user modeling [9].
Reference: [21] <author> I. Jurisica, J. Mylopoulos, J. Glasgow, H. Shapiro, and R. F. Casper. </author> <title> Case-based re a-soning in IVF: Prediction and knowledge mining. </title> <booktitle> AI in Medicine, </booktitle> <year> 1997. </year> <note> In Press. </note>
Reference-contexts: B ecause of repository size, co m-plexity of represented relations and query co m-plexity, the system must be scalable. To achieve this functionality, we adopt an e f-ficient context-based retrieval algorithm from the case-based reasoning system TA3 <ref> [19, 20, 21] </ref>. The algorithm supports imprecise queries, and automatic query transformations that control quantity and relevance of retrieved artifacts. The system's flexibility is accomplished by explicitly stating context in the similarity definition, and by using the Telos [33] representation language. 2. <p> Restriction is analogous to relaxation, it d e-creases in formation overload on a user. Expansion is a transformation opposite to reduction and specialization is converse to generalization <ref> [21] </ref>. To support scalability and efficient query processing we implemented the transformations presented using an incremental view maintenance algorithm from database management systems. The main idea is to reuse partial results of query evaluation during iterative browsing. <p> Functional Description Repository This section describes preliminary perfor m-ance evaluation of the proposed similarity-based retrieval system. Our claim is that similarity-based retrieval improves precision, and supports iterative browsing. Our previous studies suggest that the claim holds <ref> [19, 21] </ref>. Here we consider a functional description repository of basic data structures, similar to the one in [8, 10]. A functional description is a repository art i-fact described by a set of features and organized into categories. <p> By selecting reduction, generalization or both, we simulated recall and precision-oriented retrieval, and recall-oriented retrieval with iterative precision improvement. Using the last approach yielded 100% recall rate with perfect precision. These results are consi s-tent with our previous evaluations <ref> [19, 21] </ref>, but since the repository of functional descriptions is rather small (only 150 data structures) and si m-plistic, we intend to run fullscale studies on a larger and more complex software repository. Performance improvement over results pr e-sented in [8, 10] was achieved for two reasons. <p> A natural application is repository clu s-tering [5, 8, 34]. The proposed context-based similarity assessment can also be used to orga n-ize knowledge by clustering the repository co n-tent into equivalence classes, i.e., into classes of artifacts that share similarity with respect to the given context <ref> [21] </ref>. Similar to retrieval, context can be inferred from either the active user model, or the task being solved. The user can manually alter the context at all times. Context-based similarity enables fuzzy qu e-ries and similarity-based retrieval [19]. For r elated work see [11, 13, 40, 39].
Reference: [22] <author> H. V. Jagadish, A. O. Mendelzon, and T. Milo. </author> <title> Similarity-based queries. </title> <booktitle> PODS, </booktitle> <year> 1995. </year>
Reference-contexts: The Telos language [33] is used to represent requirements, design and code. SIBs query system is based on graphical tr a-versal of semantic links. The use of similarity-based retrieval in dat abases is described in <ref> [22] </ref>. Termsinsuwan et al. [43] describes how case-based reasoning facil i-tates reuse of abstract data types. Henninger [18] introduces a case-based decision system for knowledge reuse in software engineering by means of formal domain analysis. <p> Such neighborhood depends on the task, current state of the search, and the repository state. This means that the neighborhood of an artifact is context-dependent. 2.1.1. Context-Based Similarity Similarity-based retrieval supports the r e-trieval of exact and similar matches <ref> [22] </ref>. Rel e-vant artifacts are retrieved even for an imprecise query. In addition, such retrieval aids in explo ring the neighborhood of a given artifact [25, 19]. Explicit context in the query modifies the search pattern and similarity assessment outcome [26].
Reference: [23] <author> I. Jurisica and B. Nixon. </author> <title> Building quality into case-based reasoning systems. </title> <address> Submi t-ted, </address> <year> 1997. </year>
Reference-contexts: Conclusions The work presented here is relevant to other aspects of a software repository: repository a r-chitecture [12], the process of building complex decisionsupport systems <ref> [23] </ref>, and user modeling [9]. As a next step, we plan to integrate indivi dual components of a software repository and to conduct a more comprehensive performance evaluation which will include task performance, system scalability and user acceptance.
Reference: [24] <author> I. Jurisica. </author> <booktitle> How to retrieve relevant info r-mation? In [Gre94], </booktitle> <pages> pages 101-104, </pages> <year> 1994. </year>
Reference-contexts: The user may specify an initial query d i-rectly, or using query-by-example. When the answer does not satisfy quantity or quality r e-quirements, query-by-reformulation is initiated. Artifacts similar to the retrieved ones can be e x-plored by modifying the initial query <ref> [1, 24] </ref>. This paper describes a similarity-based r e-trieval system for a software repository that re presents information about legacy software sy stems. We assume the architecture presented in [12], and we focus on retrieving all (and only) relevant repository items even for an imprecise query. <p> Retrieval strategies may change not only between individual sessions but even within a particular one. Users rarely specify their information needs, mainly because conception of information pro b-lems may change in the process. More recently it was observed that information retrieval is an i n-herently interactive process <ref> [1, 24] </ref>. Thus, the retrieval system should deploy an efficient iter a-tive browsing [5, 34], which provides the means for exploring the neighborhood of a repository artifact. Such neighborhood depends on the task, current state of the search, and the repository state. <p> They are executed either automatically or by the user [26]. Query-by-reformulation and iterative browsing use two transformations: relaxation and restriction. Query relaxation extends the scope of a query and explores the neighborhood of a given artifact [26]. Relaxation is a monotonic transformation <ref> [19, 24] </ref>. It is implemented as either reduction or generalization.
Reference: [25] <author> I. Jurisica. </author> <title> A similarity-based retrieval tool for software repositories. </title> <booktitle> In The 3 rd Workshop on AI and Software Engineering: CASCON-97 12 Breaking the Mold. IJCAI-95 , Montreal, </booktitle> <address> Quebec, </address> <year> 1995. </year>
Reference-contexts: Diverse techniques are used to retrieve sof t-ware artifacts from a repository. They include library cataloging, database classification, query-based retrieval [42], formal specification [37], information retrieval [7], hypertext-based class i-fication and retrieval [17], similarity-based o r-ganization <ref> [25, 39] </ref>, clus tering and browsing [5, 34], case [11, 13] and analogy-based retrieval [30], and hybrid organizations [4]. Similarity-based retrieval helps to access re - levant artifacts when the query is not complete and precise by iteratively relaxing or restricting the initial query [15, 34]. <p> This means that the neighborhood of an artifact is context-dependent. 2.1.1. Context-Based Similarity Similarity-based retrieval supports the r e-trieval of exact and similar matches [22]. Rel e-vant artifacts are retrieved even for an imprecise query. In addition, such retrieval aids in explo ring the neighborhood of a given artifact <ref> [25, 19] </ref>. Explicit context in the query modifies the search pattern and similarity assessment outcome [26]. It is assumed that repository artifacts are represented as structured objects with relations [33].
Reference: [26] <author> I. Jurisica. </author> <title> Supporting flexibility. A case-based reasoning approach. </title> <booktitle> In The AAAI Fall Symposium. Flexible Computation in Intell i-gent Systems: Results, Issues, and Opport unities, </booktitle> <address> Cambridge, MA, </address> <year> 1996. </year>
Reference-contexts: This becomes useful when a repository is large, and created by many users over a longer time period. Generally, it is impossible to decide in advance what needs to be retrieved, when, and in what form. Flexible and iterative similarity-based retrieval diminishes this problem <ref> [26] </ref>. CAReT is an analogy-based retrieval system applied to software design reuse [30]. It supports incomplete queries, and similarity-based retrieval of software artifacts. Background knowledge and the component design library comprise a know ledge base. The system uses is-a and part-of links to navigate through the library. <p> Rel e-vant artifacts are retrieved even for an imprecise query. In addition, such retrieval aids in explo ring the neighborhood of a given artifact [25, 19]. Explicit context in the query modifies the search pattern and similarity assessment outcome <ref> [26] </ref>. It is assumed that repository artifacts are represented as structured objects with relations [33]. Objects and relations are represented as a set of attributes and their values: A = - a :V , , a :V -, where a i i is an attribute-value pair. <p> Query Transformations Query transformations control the quality and quantity of retrieved artifacts. They are executed either automatically or by the user <ref> [26] </ref>. Query-by-reformulation and iterative browsing use two transformations: relaxation and restriction. Query relaxation extends the scope of a query and explores the neighborhood of a given artifact [26]. Relaxation is a monotonic transformation [19, 24]. It is implemented as either reduction or generalization. <p> Query Transformations Query transformations control the quality and quantity of retrieved artifacts. They are executed either automatically or by the user <ref> [26] </ref>. Query-by-reformulation and iterative browsing use two transformations: relaxation and restriction. Query relaxation extends the scope of a query and explores the neighborhood of a given artifact [26]. Relaxation is a monotonic transformation [19, 24]. It is implemented as either reduction or generalization.
Reference: [27] <author> I. Kalas. </author> <title> Personal communication on boo k-shelf architecture and bookshelf query la n-guage. </title> <institution> IBM Toronto Lab, Centre for A d-vanced Studies, Toronto, </institution> <address> Ontario, </address> <year> 1997. </year>
Reference-contexts: For example, dsinit is a function a repos i tory artifact with the following attributes: name: dsinit, formal arguments: (int, float), return type: float, source location: xx_dsini . 1 This information comes from either domain know l edge or via knowledge mining. These attributes specify a function signature <ref> [27] </ref>. Since not all attributes are equally important for retrieval, they should be placed into different categories. The semantics of these attributes su g-gest three categories: name-, - formal arg u-ments, return type -, and source location -. <p> Our system can use functional similarity once the abstracted description is provided. The similarity is determined between a functional description in the query and functional descriptions found in the repository, taking into account relevance of individual features. The comparison is achieved using pattern matching on function signatures <ref> [27] </ref>. For example, the following signature spec i fies functions of any name, integer return type, parameters of type integer, float and bit value, and that can be in any module: name: D name , formal arguments: (int, float, bit value), return type: integer, source location: D location . <p> This may a f-fect how relevant the variable from a particular module is in a given situation. This can be i m-plemented via signature matching <ref> [27] </ref>, as exe m-plified in Section 3.3. Since many functions, class and variable definitions are defined using inheritance, an o b-vious question is how many levels should be traversed in order to answer the query.
Reference: [28] <author> T. Kokeny. </author> <title> Constraint satisfaction problems with ordersorted domains. </title> <journal> International Journal on Artificial Intelligence Tools, </journal> <volume> 4(1&2): </volume> <pages> 55-72, </pages> <year> 1995. </year>
Reference: [29] <author> D. Lauzon and T. Rose. </author> <title> Task-oriented and similarity-based retrieval. </title> <booktitle> In Conf. on Knowledge-Based Software Engineering, </booktitle> <year> 1994. </year>
Reference: [30] <author> H.Y. Lee and M.T. Harandi. </author> <title> An analogy-based retrieval mechanism for software d e-sign reuse. </title> <booktitle> In Proc. 8 th Knowledge-Based Software Engineering Conf. </booktitle> , <pages> pages 152-159, </pages> <address> Chicago, IL, </address> <year> 1993. </year>
Reference-contexts: They include library cataloging, database classification, query-based retrieval [42], formal specification [37], information retrieval [7], hypertext-based class i-fication and retrieval [17], similarity-based o r-ganization [25, 39], clus tering and browsing [5, 34], case [11, 13] and analogy-based retrieval <ref> [30] </ref>, and hybrid organizations [4]. Similarity-based retrieval helps to access re - levant artifacts when the query is not complete and precise by iteratively relaxing or restricting the initial query [15, 34]. This becomes useful when a repository is large, and created by many users over a longer time period. <p> Generally, it is impossible to decide in advance what needs to be retrieved, when, and in what form. Flexible and iterative similarity-based retrieval diminishes this problem [26]. CAReT is an analogy-based retrieval system applied to software design reuse <ref> [30] </ref>. It supports incomplete queries, and similarity-based retrieval of software artifacts. Background knowledge and the component design library comprise a know ledge base. The system uses is-a and part-of links to navigate through the library. The retrieval mechanism uses a three-phase procedure: locate, evaluate and select.
Reference: [31] <author> X. Li, N.S. Hall and G. W. Humphreys. </author> <title> Discrete distance and similarity measure for pattern candidate selection. </title> <journal> Pattern Recognition, </journal> <volume> 26(6): </volume> <pages> 843-851, </pages> <year> 1993. </year>
Reference: [32] <author> I. McIntosh. </author> <title> Personal communication. Useful tasks for Bookshelf. </title> <institution> IBM Toronto Lab, CAS, Toronto, </institution> <address> Ontario, </address> <year> 1997. </year>
Reference-contexts: User studies have revealed specific patterns followed by experts during information retrieval: usually, experts search for a variable store first and then for fetches <ref> [32] </ref>. This is supported by automatically inferring context from the recently accessed artifact. 2.3.1. Lexical Similarity Lexical similarity includes textual similarity, in particular name matching. There are two po s-sible approaches: a contrast model [44] and n-gram indexing . <p> Since the source code for a large system is usually stored in a hierarchical tree structure, navigation through it may be diff i-cult. It is not uncommon to spend one to three days looking for a definition, only to write one new line of code <ref> [32] </ref>. It was estimated that in about three quarters of a year, one month is spend on searching for information [32]. Another problem with developing a large system is that many developers are involved. This means, that code changes are frequent. <p> It is not uncommon to spend one to three days looking for a definition, only to write one new line of code <ref> [32] </ref>. It was estimated that in about three quarters of a year, one month is spend on searching for information [32]. Another problem with developing a large system is that many developers are involved. This means, that code changes are frequent. On a specific project it was observed that in about 2.5 hours, some 50 files were modified [32]. <p> quarters of a year, one month is spend on searching for information <ref> [32] </ref>. Another problem with developing a large system is that many developers are involved. This means, that code changes are frequent. On a specific project it was observed that in about 2.5 hours, some 50 files were modified [32]. Thus, a desirable retrieval mechanism should allow for imprecise query specification and for similarity-based retrieval. This can help locate relevant artifacts without overloading a user with irrel e-vant information. Due to the frequency of code-change, running a cross-reference utility once a day might not provide sufficient information.
Reference: [33] <author> J. Mylopoulos, A. Borgida, M. Jarke, and M. Koubarakis. </author> <title> Telos: Representing know ledge about information systems. </title> <journal> ACM Trans. Information System, </journal> <volume> 8(4): </volume> <pages> 325-362, </pages> <year> 1990. </year>
Reference-contexts: IBM CASCON Conference Toronto, November 10-13, 1997 CASCON-97 2 Constantopoulos et al. [4] presents a co n-ceptual knowledge base, called SIB, to support software reuse. The Telos language <ref> [33] </ref> is used to represent requirements, design and code. SIBs query system is based on graphical tr a-versal of semantic links. The use of similarity-based retrieval in dat abases is described in [22]. Termsinsuwan et al. [43] describes how case-based reasoning facil i-tates reuse of abstract data types. <p> Finnigan et al. [12] presents a software r e-pository, called Bookshelf, which was designed and developed to help in capturing and analyzing relevant information about legacy systems. Sof t-ware artifacts are represented using Telos <ref> [33] </ref>. A developer accesses software artifacts in the r e-pository by browsing its content. The repository architecture also includes a set of tools that are used to populate the repository and to reverse-engineer software artifacts. Generally, one retrieval strategy is not suff i-cient to cover diverse tasks. <p> The algorithm supports imprecise queries, and automatic query transformations that control quantity and relevance of retrieved artifacts. The system's flexibility is accomplished by explicitly stating context in the similarity definition, and by using the Telos <ref> [33] </ref> representation language. 2. Retrieval in Bookshelf We have identified tasks pertinent to novice and expert software engineers within a specific project. A novice user's main task is familiariz a-tion. The software repository should assist no vices in fast and in-depth learning. <p> In addition, such retrieval aids in explo ring the neighborhood of a given artifact [25, 19]. Explicit context in the query modifies the search pattern and similarity assessment outcome [26]. It is assumed that repository artifacts are represented as structured objects with relations <ref> [33] </ref>. Objects and relations are represented as a set of attributes and their values: A = - a :V , , a :V -, where a i i is an attribute-value pair. <p> Each at - tribute a k has an associated attribute domain D k All values for a given attribute must belong to its domain. Using information about usefulness and properties, 1 attributes are grouped into one or more Telos categories <ref> [33] </ref>. Categories bring additional structure to information represent a-tion. This decreases the impact of irrelevant a t-tributes on system performance [19, 35].
Reference: [34] <author> Y. Maarek, D. Berry, and G. Kaiser. </author> <title> An information retrieval approach to automat i-cally constructing software libraries. </title> <journal> IEEE Tr. on Software Engineering , 17(8) </journal> <pages> 800-813, </pages> <year> 1991. </year>
Reference-contexts: Diverse techniques are used to retrieve sof t-ware artifacts from a repository. They include library cataloging, database classification, query-based retrieval [42], formal specification [37], information retrieval [7], hypertext-based class i-fication and retrieval [17], similarity-based o r-ganization [25, 39], clus tering and browsing <ref> [5, 34] </ref>, case [11, 13] and analogy-based retrieval [30], and hybrid organizations [4]. Similarity-based retrieval helps to access re - levant artifacts when the query is not complete and precise by iteratively relaxing or restricting the initial query [15, 34]. <p> Similarity-based retrieval helps to access re - levant artifacts when the query is not complete and precise by iteratively relaxing or restricting the initial query <ref> [15, 34] </ref>. This becomes useful when a repository is large, and created by many users over a longer time period. Generally, it is impossible to decide in advance what needs to be retrieved, when, and in what form. Flexible and iterative similarity-based retrieval diminishes this problem [26]. <p> Users rarely specify their information needs, mainly because conception of information pro b-lems may change in the process. More recently it was observed that information retrieval is an i n-herently interactive process [1, 24]. Thus, the retrieval system should deploy an efficient iter a-tive browsing <ref> [5, 34] </ref>, which provides the means for exploring the neighborhood of a repository artifact. Such neighborhood depends on the task, current state of the search, and the repository state. This means that the neighborhood of an artifact is context-dependent. 2.1.1. <p> Thus, an incremental approach requires only local changes to the query. Efficiency improvement is more visible during iterative browsing, or when a large and/or complex repository is used [20]. 2.2. Retrieval Strategies Maarek et al. <ref> [34] </ref> define the component r e-trieval scenario as query specification, followed by linear re trieval and browsing. The usefulness of different in formationseeking strategies d e-pends on the users background and the task at hand. <p> Context-based similarity supports iterative browsing by incremental query relaxation and restriction [20]. Browsing is crucial in software library systems <ref> [34] </ref>, and is useful in training usage scenarios, or when a repository is large and created by many users over a longer period of time. This can be used in cooperative retrieval systems, similar to the one described in [6]. <p> Second, a combination of the retrieval system with a high recall, and iter a-tive browsing that removes irrelevant artifacts increases precision. The main distinguishing factor, when comparing the proposed context-based similarity to systems such as <ref> [34] </ref> and [10], is semantic information that is part of the sim i-larity assessment process. Besides task performance, we have also tested scalability of the system, albeit on diffe rent domains so far. <p> Third, correspondence would cover relationships of indivi dual software artifacts during migration process. Context-based similarity can be used to solve other problems that are beyond the scope of this paper. A natural application is repository clu s-tering <ref> [5, 8, 34] </ref>. The proposed context-based similarity assessment can also be used to orga n-ize knowledge by clustering the repository co n-tent into equivalence classes, i.e., into classes of artifacts that share similarity with respect to the given context [21].
Reference: [35] <author> J. Ortega. </author> <title> On the informativeness of the DNA promoter sequences domains theory. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 2: </volume> <pages> 361-367, </pages> <year> 1995. </year>
Reference-contexts: Using information about usefulness and properties, 1 attributes are grouped into one or more Telos categories [33]. Categories bring additional structure to information represent a-tion. This decreases the impact of irrelevant a t-tributes on system performance <ref> [19, 35] </ref>. For example, dsinit is a function a repos i tory artifact with the following attributes: name: dsinit, formal arguments: (int, float), return type: float, source location: xx_dsini . 1 This information comes from either domain know l edge or via knowledge mining. <p> Relaxation is a monotonic transformation [19, 24]. It is implemented as either reduction or generalization. The former removes constraints from the context by reducing the number of a t-tributes required to match: given m_of_n matching <ref> [35] </ref>, the number of attributes is reduced from m to p, where 0 &lt; p &lt; m n. 2 Generalization relaxes the query by enlarging the set of allowed values for an attribute. <p> It should be noted that both contexts mentioned above are satisfiable by the dsinit function. 2 Compared to m_of_n matching <ref> [35] </ref>, additional d e-grees of freedom during matching is achieved by using Telos categories. Restriction is analogous to relaxation, it d e-creases in formation overload on a user. Expansion is a transformation opposite to reduction and specialization is converse to generalization [21]. <p> More specifically, categories group equally important attributes together. Thus, each attribute has its own constraint and can be treated in a distinct way during relaxation and restriction. This results in a more flexible version of the m_of_n matching <ref> [35] </ref>, which enables higher precision [19]. Incremental query revisions are computed efficiently [20]. 3 User models can be reused [9]. There are several levels of query imprecision. In addition, different representation schemes can be used to store repository artifacts.
Reference: [36] <author> E. Ostertag, J. Hendler, R. P. D'iaz, and C. Braun. </author> <title> Computing similarity in a reuse l i-brary system: An AI-based approach . ACM Trans. </title> <journal> on Software Engineering and Met h-odology, </journal> <volume> 3(1) </volume> <pages> 205-228, </pages> <year> 1992. </year>
Reference-contexts: The system uses two levels of matching: object and attribute-based. The first level compares object classes, object types, attribute properties, and their relationships to other object types. The second level compares attribute data types and properties. AIRS is an AI-based library system for sof t-ware reuse <ref> [36] </ref>. It integrates faceted indexing and a hierarchical frame system. Similarity a s-sessment between two components uses their descriptions, and is based either on the closeness or the subsumption relation. The closeness rel a-tion captures the fact that new components can be constructed by modifying existing constructs.
Reference: [37] <author> M. Rittri. </author> <title> Using types as search keys in functional libraries . Journal of Functional Programming, </title> <type> 1(1), </type> <year> 1991. </year>
Reference-contexts: Thus, retrieval strategies cannot be predefined, and the system should support imprecise queries and iterative browsing. Diverse techniques are used to retrieve sof t-ware artifacts from a repository. They include library cataloging, database classification, query-based retrieval [42], formal specification <ref> [37] </ref>, information retrieval [7], hypertext-based class i-fication and retrieval [17], similarity-based o r-ganization [25, 39], clus tering and browsing [5, 34], case [11, 13] and analogy-based retrieval [30], and hybrid organizations [4].
Reference: [38] <author> E. H. Ruspini. </author> <title> Approximate reasoning: Past, present, future. </title> <journal> Information Sciences , 57-58:297-317, </journal> <year> 1991. </year>
Reference-contexts: In addition, users rarely specify query precisely and/or co m-pletely. As a result, uncertain and imprecise i n-formation must be taken into account when d e-signing retrieval systems. Numerous approaches support imprecise queries, most of which are based on fuzzy logic <ref> [38, 45] </ref>. CASCON-97 3 It is expected that a software repository su p-ports diverse information retrieval problems. Thus, different interaction methods and diverse informationseeking strategies must be available. Retrieval strategies may change not only between individual sessions but even within a particular one.
Reference: [39] <author> R. W. Schwanke. </author> <title> An intelligent tool for re-engineering software modularity. </title> <booktitle> In Proc. 14 th Conference on Software Engineering , pages 83-92, </booktitle> <address> Austin, TX, </address> <year> 1991. </year>
Reference-contexts: Diverse techniques are used to retrieve sof t-ware artifacts from a repository. They include library cataloging, database classification, query-based retrieval [42], formal specification [37], information retrieval [7], hypertext-based class i-fication and retrieval [17], similarity-based o r-ganization <ref> [25, 39] </ref>, clus tering and browsing [5, 34], case [11, 13] and analogy-based retrieval [30], and hybrid organizations [4]. Similarity-based retrieval helps to access re - levant artifacts when the query is not complete and precise by iteratively relaxing or restricting the initial query [15, 34]. <p> Similar to retrieval, context can be inferred from either the active user model, or the task being solved. The user can manually alter the context at all times. Context-based similarity enables fuzzy qu e-ries and similarity-based retrieval [19]. For r elated work see <ref> [11, 13, 40, 39] </ref>. Case-based re a-soning can be applied in user modeling [9]. It extends traditional approaches by representing users as cases. User profiles, tasks and actions guide similarity-based retrieval.
Reference: [40] <author> George Spanoudakis and Panos Consta n-topoulos. </author> <title> Similarity for analogical software reuse: A computational model. </title> <booktitle> ECAI, </booktitle> <pages> pages 18-22, </pages> <year> 1994. </year>
Reference-contexts: Similar to retrieval, context can be inferred from either the active user model, or the task being solved. The user can manually alter the context at all times. Context-based similarity enables fuzzy qu e-ries and similarity-based retrieval [19]. For r elated work see <ref> [11, 13, 40, 39] </ref>. Case-based re a-soning can be applied in user modeling [9]. It extends traditional approaches by representing users as cases. User profiles, tasks and actions guide similarity-based retrieval.
Reference: [41] <author> P. R. Thagard, K. J. Holyoak, G. Nelson and D. Gotchfeld. </author> <title> Analog retrieval by constraint satisfaction. </title> <journal> Artificial Intelligence, </journal> <volume> 46: </volume> <pages> 259-310, </pages> <year> 1990. </year>
Reference: [42] <author> M. Tedjini, I. Thomas, G. Benoliel, F. Gallo, and R. Minot. </author> <title> A query service for a software engineering database system. </title> <booktitle> In Proc. 4 th Symposium on Software Develo p-ment Environments, </booktitle> <pages> pages 238-248, </pages> <year> 1990. </year>
Reference-contexts: The repository must support different tasks and d i-verse users efficiently. Thus, retrieval strategies cannot be predefined, and the system should support imprecise queries and iterative browsing. Diverse techniques are used to retrieve sof t-ware artifacts from a repository. They include library cataloging, database classification, query-based retrieval <ref> [42] </ref>, formal specification [37], information retrieval [7], hypertext-based class i-fication and retrieval [17], similarity-based o r-ganization [25, 39], clus tering and browsing [5, 34], case [11, 13] and analogy-based retrieval [30], and hybrid organizations [4].
Reference: [43] <author> P. Termsinsuwan, Z. X. Cheng and N. Shiratori. </author> <title> A new approach to ADT specific a-tion support based on reuse of similar ADT by the application of case-based reasoning. </title> <journal> Information and Software Technology. </journal> <volume> 38(9) </volume> <pages> 555-568, </pages> <year> 1996. </year>
Reference-contexts: The Telos language [33] is used to represent requirements, design and code. SIBs query system is based on graphical tr a-versal of semantic links. The use of similarity-based retrieval in dat abases is described in [22]. Termsinsuwan et al. <ref> [43] </ref> describes how case-based reasoning facil i-tates reuse of abstract data types. Henninger [18] introduces a case-based decision system for knowledge reuse in software engineering by means of formal domain analysis. <p> The next section describes context-based similarity, and query transformations. 2.1. Similarity-Based Retrieval Traditionally, information retrieval has been concerned with representation of texts and co m-parison of these representations. Software eng i-neering research contemplated abstracting source code to make the retrieval process easier by pr o-viding extra information <ref> [2, 10, 43] </ref>. In addition, users rarely specify query precisely and/or co m-pletely. As a result, uncertain and imprecise i n-formation must be taken into account when d e-signing retrieval systems. Numerous approaches support imprecise queries, most of which are based on fuzzy logic [38, 45]. <p> Semantic similarity also enables us to find variables that use similar data structures as r e-turned value or a function parameter. Distance between artifacts is determined using i sa and part-of hierarchies of data types. This approach is similar to <ref> [43] </ref> but context-based similarity controls, which features of the data type descri p-tion are more important for a specific search. This distinction is crucial for both high recall and precision. Next we describe how semantic and functional similarities are related. 2.3.3.
Reference: [44] <author> A. Tversky. </author> <title> Features of similarity. </title> <journal> Psychological Review, </journal> <volume> 84(4): </volume> <pages> 327-352, </pages> <year> 1977. </year>
Reference-contexts: This is supported by automatically inferring context from the recently accessed artifact. 2.3.1. Lexical Similarity Lexical similarity includes textual similarity, in particular name matching. There are two po s-sible approaches: a contrast model <ref> [44] </ref> and n-gram indexing .
Reference: [45] <author> M. A. Vila, J. C. Cubero, J. M. Medina and O. Pons. </author> <title> A conceptual approach for dealing with imprecision and uncertainty in object-based data models. </title> <journal> International Journal of Intelligent Systems. </journal> <volume> 11, </volume> <pages> pages 791-806, </pages> <year> 1996. </year>
Reference-contexts: In addition, users rarely specify query precisely and/or co m-pletely. As a result, uncertain and imprecise i n-formation must be taken into account when d e-signing retrieval systems. Numerous approaches support imprecise queries, most of which are based on fuzzy logic <ref> [38, 45] </ref>. CASCON-97 3 It is expected that a software repository su p-ports diverse information retrieval problems. Thus, different interaction methods and diverse informationseeking strategies must be available. Retrieval strategies may change not only between individual sessions but even within a particular one.
References-found: 45

