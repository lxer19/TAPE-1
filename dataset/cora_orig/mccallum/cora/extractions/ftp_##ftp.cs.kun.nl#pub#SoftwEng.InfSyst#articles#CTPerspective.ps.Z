URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/CTPerspective.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Title: Conceptual Data Modeling from a Categorical Perspective  Conceptual Data Modeling from a Categorical Perspective.  
Author: A.H.M. ter Hofstede, E. Lippe, and P.J.M. Frederiks A.H.M. ter Hofstede, E. Lippe, and P.J.M. Frederiks. 
Keyword: Conceptual Data Modeling, Category Theory, Meta Modeling, ER, IFO, NIAM  
Note: Published as:  Classification: 68P99 (AMS-1991), H.1.0. (CR-1991)  
Address: Toernooiveld 1 NL-6525 ED Nijmegen The Netherlands  Nijmegen, Nijmegen, The Netherlands,  
Affiliation: Department of Information Systems University of Nijmegen  Institute, University of  
Pubnum: Technical Report CSI-R9417, Computing Science  
Email: farthur,ernstl,paulfg@cs.kun.nl  
Date: December 1994.  
Abstract: For successful information systems development, conceptual data modeling is essential. Nowadays many techniques for conceptual data modeling exist. In-depth comparisons of concepts of these techniques are very difficult as the mathematical formalizations of these techniques, if they exist at all, are very different. As such there is a need for a unifying formal framework providing a sufficiently high level of abstraction. In this paper the use of category theory for this purpose is addressed. Well-known conceptual data modeling concepts, such as relationship types, generalization, specialization, collection types, and constraint types, such as the total role constraint and the uniqueness constraint, are discussed from a categorical point of view. An important advantage of this framework is its "configurable semantics". Features such as null values, uncertainty, and temporal behavior can be added by selecting appropriate instance categories. The addition of these features usually requires a complete redesign of the formalization in traditional set-based approaches to semantics. 
Abstract-found: 1
Intro-found: 1
Reference: [AF88] <author> D.E. Avison and G. Fitzgerald. </author> <title> Information Systems Development: Methodologies, Techniques and Tools. </title> <publisher> Blackwell Scientific Publications, Oxford, </publisher> <address> United Kingdom, </address> <year> 1988. </year>
Reference-contexts: This plethora of techniques reflects the general situation in the field of information systems development. In <ref> [AF88] </ref> this situation is described by the term Methodology Jungle. In [Bub86] it is estimated that during the past years, hundreds if not thousands of information system development methods have been introduced. Most organizations and research groups have defined their own methods.
Reference: [AH87] <author> S. Abiteboul and R. Hull. </author> <title> IFO: A Formal Semantic Database Model. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(4) </volume> <pages> 525-565, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: introduction of advanced modeling concepts, such as present in the various forms of Extended ER (see e.g. [TYF86, EGH + 92]), IFO <ref> [AH87] </ref>, and object-role modeling extensions such as FORM [HO92] and PSM [HW93, HPW93]. This plethora of techniques reflects the general situation in the field of information systems development. In [AF88] this situation is described by the term Methodology Jungle. <p> Many conceptual data modeling techniques contain at least one of these relations, although probably under a different name. The concepts of specialization and generalization in this paper correspond to a large extent to specialization and generalization as defined in IFO <ref> [AH87] </ref>. 3.4.1 Specialization Specialization is used when specific facts are to be recorded for specific instances of an object type only. A specialized object type inherits the properties of its supertype (s), but may have additional properties. As such, specialization corresponds to the notion of subtyping in NIAM. <p> A specialized object type inherits the properties of its supertype (s), but may have additional properties. As such, specialization corresponds to the notion of subtyping in NIAM. As an example of specialization consider the IFO schema of figure 9 (adapted from <ref> [AH87] </ref>). In this schema the boxes represent concrete types, the diamonds represent abstract types and the circles represent subtypes. The double arrows denote specialization relations. Therefore, in this diagram STUDENT is a subtype of PERSON . The object type TEACHING-ASSISTANT is a subtype of both STUDENT and EMPLOYEE .
Reference: [AHS90] <author> J. Adamek, H. Herlich, and G.E. Strecker. </author> <title> Abstract and Concrete Categories. Pure and applied mathematics. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, New York, </address> <year> 1990. </year>
Reference-contexts: As pointed out by [Gog91], category theory can provide help with at least the following: * Formulating definitions and theories. In computing science, it is often more difficult to formulate concepts and results than to give a proof. As stated by <ref> [AHS90] </ref>, category theory provides a language with a convenient symbolism that allows for the visualization of quite complex facts by means of diagrams. 3 * Carrying out proofs.
Reference: [BSW94] <author> K. Baclawski, D. Simovici, and W. White. </author> <title> A categorical approach to database semantics. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 4 </volume> <pages> 147-183, </pages> <year> 1994. </year>
Reference-contexts: The use of partial functions allows certain components of a relation to be undefined. In this sense, the approach outlined is more general than approaches as described in <ref> [Tui94, BSW94] </ref> where only specific types of categories, topoi, are possible target categories. The idea of a "configurable semantics" is an essential feature of the unifying framework. <p> Recently, however, it seems that this is changing. Categorical formalizations of (aspects of ) object orientation (see e.g. [ES91, FSMS91, CSS94]), object oriented data models (see e.g. [Sie90, Tui94]), ER (see e.g. [DJM92]), and the Relational Model (see e.g. <ref> [IP94, BSW94] </ref>) have been proposed. In [SFMS89] a categorical framework for the axiomatization of conceptual modeling concepts is described (based on the notion of -institution). <p> This property is also useful for experimenting with these features in traditional data modeling techniques, since the mapping of these techniques into the framework automatically defines a semantics for these features. Compared with other approaches that use category theory <ref> [Tui94, BSW94] </ref> the current framework is simpler as it only uses basic categorical notions. This makes the framework easier 29 to understand. Furthermore, the range of possible instance categories is wider than in those aproaches that are usually limited to topoi or cartesian closed categories.
Reference: [Bub86] <author> J.A. Bubenko. </author> <title> Information System Methodologies A Research View. </title> <editor> In T.W. Olle, H.G. Sol, and A.A. Verrijn-Stuart, editors, </editor> <booktitle> Information Systems Design Methodologies: Improving the Practice, </booktitle> <pages> pages 289-318. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1986. </year>
Reference-contexts: This plethora of techniques reflects the general situation in the field of information systems development. In [AF88] this situation is described by the term Methodology Jungle. In <ref> [Bub86] </ref> it is estimated that during the past years, hundreds if not thousands of information system development methods have been introduced. Most organizations and research groups have defined their own methods. Hardly any of them has a formal syntax, let alone a formal semantics.
Reference: [BW90] <author> M. Barr and C. Wells. </author> <title> Category Theory for Computing Science. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1990. </year>
Reference-contexts: These requirements suggest category theory (see e.g. <ref> [BW90] </ref>) as an excellent candidate. Category theory provides a sound formal basis and abstracts from all representational aspects. Therefore, the framework will be embedded in category theory. <p> For an in-depth treatment of category theory the reader is referred to <ref> [BW90] </ref>. 2.1 Background A brief history of the origin of category theory can be found in [McL92]: Eilenberg and Mac Lane created categories in the 1940s as a way of relating systems of algebraic structures and systems of topological spaces in algebraic topology. <p> Most of these definitions are adapted from <ref> [BW90] </ref>. A directed multigraph is a directed graph where there may be multiple edges with the same direction between two nodes. Definition 2.1 A directed multigraph G consists of a set of nodes G 0 and a set of edges G 1 . <p> The following definition defines what a diagram is. Definition 2.7 Let I and G be graphs. A diagram in G of shape I is a homomorphism D: I ! G of graphs. I is called the shape graph of the diagram D. 2 The following example, taken from <ref> [BW90] </ref>, illustrates some subtleties involving the concept of diagram. Example 2.1 Let G be a graph with objects A, B, and C and arrows f : A ! B, g: B ! C, and h: B ! B. <p> One such property is that sums in Set are disjoint (for a categorical formalization of this notion refer to <ref> [BW90] </ref>). In a disjoint sum the coproduct arrows must be monomorphisms. <p> Secondly, and more seriously, many interesting categories are not topoi. The use of topoi therefore would imply an extra, very restrictive, requirement on the class of instance categories Fund. Another alternative would be the use of sketches in order to allow the general specification of algebraic types <ref> [BW90] </ref>. Unfortunately, it turns out that such a solution also imposes too many restrictions on Fund. The approach adopted in this paper, does not suffer from the problems outlined in the previous paragraph and is based on an alternative treatment of collection types, as presented in [HW94].
Reference: [Che76] <author> P.P. Chen. </author> <title> The Entity-Relationship Model: Toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference: [CSS94] <author> J.F. Costa, A. Sernadas, and C. Sernadas. </author> <title> Object inheritance beyond subtyping. </title> <journal> Acta Informatica, </journal> <volume> 31(1) </volume> <pages> 5-26, </pages> <month> January </month> <year> 1994. </year> <month> 30 </month>
Reference-contexts: Despite the popularity of category theory in some fields of computing science, not many applications in the field of information systems can be found in the literature. Recently, however, it seems that this is changing. Categorical formalizations of (aspects of ) object orientation (see e.g. <ref> [ES91, FSMS91, CSS94] </ref>), object oriented data models (see e.g. [Sie90, Tui94]), ER (see e.g. [DJM92]), and the Relational Model (see e.g. [IP94, BSW94]) have been proposed. In [SFMS89] a categorical framework for the axiomatization of conceptual modeling concepts is described (based on the notion of -institution).
Reference: [DJM92] <author> C.N.G. Dampney, M.S.J. Johnson, </author> <title> and G.P. Monro. An Illustrated Mathematical Foundation for ERA. </title> <editor> In C.M.I. Rattray and R.G. Clark, editors, </editor> <booktitle> The Unified Computation Laboratory, </booktitle> <pages> pages 77-83, </pages> <publisher> Oxford University Press, </publisher> <year> 1992. </year> <journal> The Institute of Mathematics and Its Applications. </journal>
Reference-contexts: Recently, however, it seems that this is changing. Categorical formalizations of (aspects of ) object orientation (see e.g. [ES91, FSMS91, CSS94]), object oriented data models (see e.g. [Sie90, Tui94]), ER (see e.g. <ref> [DJM92] </ref>), and the Relational Model (see e.g. [IP94, BSW94]) have been proposed. In [SFMS89] a categorical framework for the axiomatization of conceptual modeling concepts is described (based on the notion of -institution).
Reference: [EGH + 92] <author> G. Engels, M. Gogolla, U. Hohenstein, K. Hulsmann, P. Lohr-Richter, G. Saake, and H-D. Ehrich. </author> <title> Conceptual modelling of database applications using an extended ER model. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 9(4) </volume> <pages> 157-204, </pages> <year> 1992. </year>
Reference-contexts: introduction of advanced modeling concepts, such as present in the various forms of Extended ER (see e.g. <ref> [TYF86, EGH + 92] </ref>), IFO [AH87], and object-role modeling extensions such as FORM [HO92] and PSM [HW93, HPW93]. This plethora of techniques reflects the general situation in the field of information systems development. In [AF88] this situation is described by the term Methodology Jungle. <p> As sets are identical if and only if they contain the same elements, the instances of a collection type are identified by their elements and do not need external identifications. Collection types correspond to grouping in IFO, association in ECR <ref> [EGH + 92] </ref>, grouping classes in SDM [HM81], and power types in PSM. (S-Code) has-name Name is-name-of Convoy Ship As a simple example of the application of collection types consider the schema of figure 12, which shows a PSM schema of the so-called Convoy Problem of [HM81].
Reference: [ES91] <author> H.-D. Ehrich and A. Sernadas. </author> <title> Object concepts and constructions. </title> <editor> In G. Saake and A. Sernadas, editors, </editor> <booktitle> Proceedings of the IS-CORE Workshop'91 (Informatik-Berichte 91-03), </booktitle> <pages> pages 1-24, </pages> <address> Braunschweig, Germany, </address> <year> 1991. </year> <institution> Technische Universitat Braunschweig. </institution>
Reference-contexts: Despite the popularity of category theory in some fields of computing science, not many applications in the field of information systems can be found in the literature. Recently, however, it seems that this is changing. Categorical formalizations of (aspects of ) object orientation (see e.g. <ref> [ES91, FSMS91, CSS94] </ref>), object oriented data models (see e.g. [Sie90, Tui94]), ER (see e.g. [DJM92]), and the Relational Model (see e.g. [IP94, BSW94]) have been proposed. In [SFMS89] a categorical framework for the axiomatization of conceptual modeling concepts is described (based on the notion of -institution).
Reference: [FSMS91] <author> J. Fiadeiro, C. Sernadas, T. Maibaum, and G. Saake. </author> <title> Proof-theoretic semantics of object-oriented specification constructs. </title> <editor> In R. Meersman, W. Kent, and S. Khosla, editors, </editor> <title> Object-oriented databases: analysis, </title> <booktitle> design and construction, </booktitle> <pages> pages 243-284, </pages> <address> Amsterdam, The Netherlands, 1991. </address> <publisher> North-Holland. </publisher>
Reference-contexts: Despite the popularity of category theory in some fields of computing science, not many applications in the field of information systems can be found in the literature. Recently, however, it seems that this is changing. Categorical formalizations of (aspects of ) object orientation (see e.g. <ref> [ES91, FSMS91, CSS94] </ref>), object oriented data models (see e.g. [Sie90, Tui94]), ER (see e.g. [DJM92]), and the Relational Model (see e.g. [IP94, BSW94]) have been proposed. In [SFMS89] a categorical framework for the axiomatization of conceptual modeling concepts is described (based on the notion of -institution).
Reference: [Gog91] <author> J.A. Goguen. </author> <title> A categorical manifesto. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 1(1) </volume> <pages> 49-67, </pages> <year> 1991. </year>
Reference-contexts: In the seventies and eighties category theory has also found its way into computer science. Applications of category theory can be found in such diverse fields as automata and systems theory, formal specifications and abstract data types, type theory, domain theory, and constructive algorithmics. As pointed out by <ref> [Gog91] </ref>, category theory can provide help with at least the following: * Formulating definitions and theories. In computing science, it is often more difficult to formulate concepts and results than to give a proof.
Reference: [Gri82] <editor> J.J. van Griethuysen, editor. </editor> <title> Concepts and Terminology for the Conceptual Schema and the Information Base. </title> <publisher> Publ. nr. </publisher> <address> ISO/TC97/SC5-N695, </address> <year> 1982. </year>
Reference-contexts: This framework should clarify the precise meaning of fundamental data modeling concepts and offer a sufficient level of abstraction to be able to concentrate on this meaning and avoid distractions of particular mathematical representations (in a sense, the well-known Conceptualization Principle <ref> [Gri82] </ref> can also be applied to mathematical formalizations). These requirements suggest category theory (see e.g. [BW90]) as an excellent candidate. Category theory provides a sound formal basis and abstracts from all representational aspects. Therefore, the framework will be embedded in category theory.
Reference: [HK87] <author> R. Hull and R. King. </author> <title> Semantic Database Modelling: Survey, Applications and Research Issues. </title> <journal> ACM Computing Surveys, </journal> <volume> 19(3) </volume> <pages> 201-260, </pages> <month> September </month> <year> 1987. </year>
Reference: [HM81] <author> M. Hammer and D. McLeod. </author> <title> Database Description with SDM: A Semantic Database Model. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(3) </volume> <pages> 351-386, </pages> <month> Septem-ber </month> <year> 1981. </year>
Reference-contexts: As sets are identical if and only if they contain the same elements, the instances of a collection type are identified by their elements and do not need external identifications. Collection types correspond to grouping in IFO, association in ECR [EGH + 92], grouping classes in SDM <ref> [HM81] </ref>, and power types in PSM. (S-Code) has-name Name is-name-of Convoy Ship As a simple example of the application of collection types consider the schema of figure 12, which shows a PSM schema of the so-called Convoy Problem of [HM81]. <p> IFO, association in ECR [EGH + 92], grouping classes in SDM <ref> [HM81] </ref>, and power types in PSM. (S-Code) has-name Name is-name-of Convoy Ship As a simple example of the application of collection types consider the schema of figure 12, which shows a PSM schema of the so-called Convoy Problem of [HM81]. In this schema the object type Convoy is a collection type with as element type Ship. Ships are identified by a code (S-code), while convoys are identified by their constituent ships. There are several alternatives for a categorical formalization of collection types.
Reference: [HO92] <author> T.A. Halpin and M.E. Orlowska. </author> <title> Fact-oriented modelling for data analysis. </title> <journal> Journal of Information Systems, </journal> <volume> 2(2) </volume> <pages> 97-119, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: introduction of advanced modeling concepts, such as present in the various forms of Extended ER (see e.g. [TYF86, EGH + 92]), IFO [AH87], and object-role modeling extensions such as FORM <ref> [HO92] </ref> and PSM [HW93, HPW93]. This plethora of techniques reflects the general situation in the field of information systems development. In [AF88] this situation is described by the term Methodology Jungle.
Reference: [Hoa89] <author> C.A.R. Hoare. </author> <title> Notes on an Approach to Category Theory for Computer Scientists. </title> <editor> In M. Broy, editor, </editor> <booktitle> Constructive Methods in Computing Science, volume 55 of NATO Advanced Science Institute Series, </booktitle> <pages> pages 245-305. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Category theory offers a number of concepts, and theorems about those concepts, that form an abstraction of many concrete concepts in diverse branches of mathematics. As pointed out by Hoare <ref> [Hoa89] </ref>: "Category theory is quite the most general and abstract branch of pure mathematics". In the seventies and eighties category theory has also found its way into computer science.
Reference: [HPW93] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Formal definition of a conceptual language for the description and manipulation of information models. </title> <journal> Information Systems, </journal> <volume> 18(7) </volume> <pages> 489-523, </pages> <year> 1993. </year>
Reference-contexts: introduction of advanced modeling concepts, such as present in the various forms of Extended ER (see e.g. [TYF86, EGH + 92]), IFO [AH87], and object-role modeling extensions such as FORM [HO92] and PSM <ref> [HW93, HPW93] </ref>. This plethora of techniques reflects the general situation in the field of information systems development. In [AF88] this situation is described by the term Methodology Jungle. In [Bub86] it is estimated that during the past years, hundreds if not thousands of information system development methods have been introduced. <p> Contrary to what its name suggests, generalization is not the inverse of specialization. Specialization and generalization originate from different axioms in set the ory <ref> [HW93, HPW93] </ref>. The population of a generalized object type is the union of the populations of the participating object types, referred to as the specifiers. As an example of generalization consider figure 11.
Reference: [HW93] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in conceptual data modelling. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(1) </volume> <pages> 65-100, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: introduction of advanced modeling concepts, such as present in the various forms of Extended ER (see e.g. [TYF86, EGH + 92]), IFO [AH87], and object-role modeling extensions such as FORM [HO92] and PSM <ref> [HW93, HPW93] </ref>. This plethora of techniques reflects the general situation in the field of information systems development. In [AF88] this situation is described by the term Methodology Jungle. In [Bub86] it is estimated that during the past years, hundreds if not thousands of information system development methods have been introduced. <p> Contrary to what its name suggests, generalization is not the inverse of specialization. Specialization and generalization originate from different axioms in set the ory <ref> [HW93, HPW93] </ref>. The population of a generalized object type is the union of the populations of the participating object types, referred to as the specifiers. As an example of generalization consider figure 11. <p> The population of a generalized object type is the union of the populations of the participating object types, referred to as the specifiers. As an example of generalization consider figure 11. In this schema the graphical conventions of PSM <ref> [HW93] </ref> have been used, the dashed lines represent generalization relations. This PSM schema models the construction of simple formulas: a Formula may be either a Variable or constructed by some function F from simpler formulas. This example demonstrates that generalization can be used for the specification of recursive types.
Reference: [HW94] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Fact Orientation in Complex Object Role Modelling Techniques. In T.A. </title> <editor> Halpin and R. Meersman, editors, </editor> <booktitle> Proceedings of the First International Conference on Object-Role Modelling (ORM-1), </booktitle> <pages> pages 45-59, </pages> <address> Townsville, Australia, </address> <month> July </month> <year> 1994. </year> <month> 31 </month>
Reference-contexts: Unfortunately, it turns out that such a solution also imposes too many restrictions on Fund. The approach adopted in this paper, does not suffer from the problems outlined in the previous paragraph and is based on an alternative treatment of collection types, as presented in <ref> [HW94] </ref>. As pointed out in this paper, collection types become superfluous by the introduction of a new type of constraint, the existensional uniqueness constraint, as well as a new identification scheme. As an example consider figure 13.
Reference: [IP94] <author> A. Islam and W. Phoa. </author> <title> Category Models of Relational Databases I: Fibrational Formulation, Schema Integration. </title> <editor> In M. Hagiya and J.C. Mitchell, editors, </editor> <booktitle> Theoretical Aspects of Computer Software, International Symposium TACS'94, volume 789 of Lecture Notes in Computer Science, </booktitle> <pages> pages 618-641, </pages> <address> Sendai, Japan, April 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Recently, however, it seems that this is changing. Categorical formalizations of (aspects of ) object orientation (see e.g. [ES91, FSMS91, CSS94]), object oriented data models (see e.g. [Sie90, Tui94]), ER (see e.g. [DJM92]), and the Relational Model (see e.g. <ref> [IP94, BSW94] </ref>) have been proposed. In [SFMS89] a categorical framework for the axiomatization of conceptual modeling concepts is described (based on the notion of -institution).
Reference: [KL89] <editor> W. Kim and F.H. Lochovsky, editors. </editor> <title> Object-Oriented Concepts, Databases, and Applications. </title> <publisher> ACM Press, Frontier Series. Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: A description of various category theory constructs and proofs for these categories can be found in [LH94]. Example 3.2 In several object-oriented databases <ref> [KL89, ZM90] </ref>, objects can have multi-valued (or set-valued) attributes. This means that the value of an attribute can be a (possibly empty) set of attribute values. Models in the category Rel can be used to model this behavior. 2 Example 3.3 Models in FuzzySet can be used to model uncertainties.
Reference: [LH94] <author> E. Lippe and A.H.M. ter Hofstede. </author> <title> A Category Theory Approach to Conceptual Data Modeling. </title> <type> Technical Report CSI-R9415, </type> <institution> Computing Science Institute, University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Definition 3.5 The instance universe determined by a set of object types V G 0 in a given type model M , denoted as U V M , is the apex of the universal cocone with as base the subtype diagram dominated by V . 2 In <ref> [LH94] </ref> it is proven that in a category that has disjoint sums the colimit of a diagram consisting of complementable monomorphisms, which is true for the subtype diagram of definition 3.5, always exists. The associated arrows are then also complementable monomorphisms. <p> A description of various category theory constructs and proofs for these categories can be found in <ref> [LH94] </ref>. Example 3.2 In several object-oriented databases [KL89, ZM90], objects can have multi-valued (or set-valued) attributes. This means that the value of an attribute can be a (possibly empty) set of attribute values.
Reference: [Mai88] <author> D. Maier. </author> <title> The Theory of Relational Databases. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1988. </year>
Reference-contexts: A cartesian product imposes an ordering on the various parts of the relation. Consequently, algebraic operators do not have important properties such as commutativity and associativity. This observation has led to the mapping oriented approach <ref> [Mai88] </ref>, where relationship instances are treated as functions from the involved roles to values.
Reference: [McL92] <author> C. McLarty. </author> <title> Elementary Categories, Elementary Toposes, </title> <booktitle> volume 21 of Oxford Logic Guides. </booktitle> <publisher> Clarendon Press, Oxford, </publisher> <address> United Kingdom, </address> <year> 1992. </year>
Reference-contexts: For an in-depth treatment of category theory the reader is referred to [BW90]. 2.1 Background A brief history of the origin of category theory can be found in <ref> [McL92] </ref>: Eilenberg and Mac Lane created categories in the 1940s as a way of relating systems of algebraic structures and systems of topological spaces in algebraic topology.
Reference: [NH89] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Sydney, Australia, </address> <year> 1989. </year>
Reference-contexts: Object types in NIAM are represented as circles, roles as boxes and arrows between circles represent subtype relations (for a complete overview of the graphical conventions of NIAM refer to <ref> [NH89] </ref>). Song recordingwriting Song Instrumental Capability is-recorded-by has-recorded is-written-by has-written has-as-memberis-member-of Band Song Person Band-Membership Death of Instrumentation Composer Musician Instrument plays is-played-by is-dead comprises 3.2 Type models The semantics of a data model is the set of all possible instantiations, also referred to as populations.
Reference: [PM88] <author> J. Peckham and F. Maryanski. </author> <title> Semantic Data Models. </title> <journal> ACM Computing Surveys, </journal> <volume> 20(3) </volume> <pages> 153-189, </pages> <month> September </month> <year> 1988. </year>
Reference: [RB88] <author> D.E. Rydeheard and R.M. Burstall. </author> <title> Computational Category Theory. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1988. </year>
Reference-contexts: X A oo oo x EDGF xffif ** yffif OO The category theoretic equivalent of the set theoretic concept of a bijective function is called an isomorphism. In a mathematical context isomorphism means indistinguishable in form. As remarked in <ref> [RB88] </ref>: 6 Isomorphisms are important in category theory since arrow-theoretic descriptions usually determine an object to within an isomorphism. Thus isomorphisms are the degree of "sameness" that we wish to consider in categories.
Reference: [SFMS89] <author> C. Sernadas, J. Fiadeiro, R. Meersman, and A. Sernadas. </author> <title> Proof-theoretic Conceptual Modelling: the NIAM Case Study. </title> <editor> In E.D. Falkenberg and P. Lindgreen, editors, </editor> <booktitle> Information System Concepts: An In-depth Analysis, </booktitle> <pages> pages 1-30, </pages> <address> Amster-dam, The Netherlands, </address> <year> 1989. </year> <month> North-Holland/IFIP. </month>
Reference-contexts: Recently, however, it seems that this is changing. Categorical formalizations of (aspects of ) object orientation (see e.g. [ES91, FSMS91, CSS94]), object oriented data models (see e.g. [Sie90, Tui94]), ER (see e.g. [DJM92]), and the Relational Model (see e.g. [IP94, BSW94]) have been proposed. In <ref> [SFMS89] </ref> a categorical framework for the axiomatization of conceptual modeling concepts is described (based on the notion of -institution).
Reference: [Shi81] <author> D.W. Shipman. </author> <title> The Functional Data Model and the Data Language DAPLEX. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(1) </volume> <pages> 140-173, </pages> <month> March </month> <year> 1981. </year>
Reference: [Sie90] <author> A. Siebes. </author> <title> On Complex Objects. </title> <type> PhD thesis, </type> <institution> University of Twente, Enschede, </institution> <address> The Netherlands, </address> <year> 1990. </year>
Reference-contexts: Recently, however, it seems that this is changing. Categorical formalizations of (aspects of ) object orientation (see e.g. [ES91, FSMS91, CSS94]), object oriented data models (see e.g. <ref> [Sie90, Tui94] </ref>), ER (see e.g. [DJM92]), and the Relational Model (see e.g. [IP94, BSW94]) have been proposed. In [SFMS89] a categorical framework for the axiomatization of conceptual modeling concepts is described (based on the notion of -institution). <p> After the definition of type models, the various data modeling constructs are given a category theoretic definition. These constructs are defined in terms of restrictions on type models. 3.1 Type graphs Data models can be represented by type graphs (see also <ref> [Sie90] </ref> and [Tui94]). The various object types in the data model correspond to nodes in the graph, while the various constructions can be discerned by labeling the arrows. Relationship types, for example, correspond to nodes.
Reference: [Tui94] <author> C. Tuijn. </author> <title> Data Modeling from a Categorical Perspective. </title> <type> PhD thesis, </type> <institution> University of Antwerpen, </institution> <address> Antwerpen, Belgium, </address> <year> 1994. </year>
Reference-contexts: The use of partial functions allows certain components of a relation to be undefined. In this sense, the approach outlined is more general than approaches as described in <ref> [Tui94, BSW94] </ref> where only specific types of categories, topoi, are possible target categories. The idea of a "configurable semantics" is an essential feature of the unifying framework. <p> Recently, however, it seems that this is changing. Categorical formalizations of (aspects of ) object orientation (see e.g. [ES91, FSMS91, CSS94]), object oriented data models (see e.g. <ref> [Sie90, Tui94] </ref>), ER (see e.g. [DJM92]), and the Relational Model (see e.g. [IP94, BSW94]) have been proposed. In [SFMS89] a categorical framework for the axiomatization of conceptual modeling concepts is described (based on the notion of -institution). <p> In [SFMS89] a categorical framework for the axiomatization of conceptual modeling concepts is described (based on the notion of -institution). In <ref> [Tui94] </ref> it is remarked that the uniformity of category theory provides a basis for interesting generalizations in the context of data modeling and that it not only offers insight in well-known operators but also allows for the definition of new operators, which would be far from trivial in other formalisms. 4 <p> After the definition of type models, the various data modeling constructs are given a category theoretic definition. These constructs are defined in terms of restrictions on type models. 3.1 Type graphs Data models can be represented by type graphs (see also [Sie90] and <ref> [Tui94] </ref>). The various object types in the data model correspond to nodes in the graph, while the various constructions can be discerned by labeling the arrows. Relationship types, for example, correspond to nodes. <p> This property is also useful for experimenting with these features in traditional data modeling techniques, since the mapping of these techniques into the framework automatically defines a semantics for these features. Compared with other approaches that use category theory <ref> [Tui94, BSW94] </ref> the current framework is simpler as it only uses basic categorical notions. This makes the framework easier 29 to understand. Furthermore, the range of possible instance categories is wider than in those aproaches that are usually limited to topoi or cartesian closed categories. <p> The value of this subtype attribute arrow in the type model is the composition of the original attribute arrow with the subtype arrow from the subtype to the supertype. The resulting model is similar to that of <ref> [Tui94] </ref>. Several extensions to the current framework are the topic of our current research. It seems to be possible to define most relational database operators within the current framework. Further it appears straightforward to incorporate other types of constraints such as the exclusion, equality, and subset constraint.
Reference: [TYF86] <author> T.J. Teorey, D. Yang, and J.P. Fry. </author> <title> A logical design methodology for relational databases using the extended entity-relationship model. </title> <journal> ACM Computing Surveys, </journal> <volume> 18(2) </volume> <pages> 197-222, </pages> <year> 1986. </year>
Reference-contexts: introduction of advanced modeling concepts, such as present in the various forms of Extended ER (see e.g. <ref> [TYF86, EGH + 92] </ref>), IFO [AH87], and object-role modeling extensions such as FORM [HO92] and PSM [HW93, HPW93]. This plethora of techniques reflects the general situation in the field of information systems development. In [AF88] this situation is described by the term Methodology Jungle.
Reference: [You89] <author> E. Yourdon. </author> <title> Modern Structured Analysis. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year>
Reference-contexts: A relationship type represents an association between object types and may be n-ary in some data modeling techniques (where n 1), as well as play a role in other relationship types. Yourdon <ref> [You89] </ref> refers to such relationship types as associative object type indicators, while in NIAM relationship types participating in other relationship types are called objectified fact types. A relationship type consists of a number of roles, capturing the way object types participate in that relationship type.
Reference: [ZM90] <editor> S.B. Zdonik and D. Maier, editors. </editor> <booktitle> Readings in Object Oriented Database Systems. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1990. </year> <month> 32 </month>
Reference-contexts: A description of various category theory constructs and proofs for these categories can be found in [LH94]. Example 3.2 In several object-oriented databases <ref> [KL89, ZM90] </ref>, objects can have multi-valued (or set-valued) attributes. This means that the value of an attribute can be a (possibly empty) set of attribute values. Models in the category Rel can be used to model this behavior. 2 Example 3.3 Models in FuzzySet can be used to model uncertainties.
References-found: 36

