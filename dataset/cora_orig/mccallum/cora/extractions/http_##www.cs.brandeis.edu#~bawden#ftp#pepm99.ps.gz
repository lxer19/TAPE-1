URL: http://www.cs.brandeis.edu/~bawden/ftp/pepm99.ps.gz
Refering-URL: http://www.cs.brandeis.edu/~bawden/ftp/
Root-URL: http://www.cs.brandeis.edu
Email: bawden@cs.brandeis.edu  
Title: Quasiquotation in Lisp  
Author: Alan Bawden 
Affiliation: Brandeis University  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Charniak, C. K. Riesbeck, and D. V. Mc-dermott. </author> <booktitle> Artificial Intelligence Programming. </booktitle> <publisher> Lawrence Erlbaum Assoc., </publisher> <address> Hillsdale, NJ, first edition, </address> <year> 1980. </year>
Reference-contexts: Probably inspired by Scheme, which in those days was using just @X to indicate splicing [14], we finally decided on ,@X [15]. 9 Meanwhile McDermott altered the Conniver notation slightly by changing !"X to |"X. In this form it appeared in <ref> [1] </ref> in 1980. As far as I know, the problems of nested splicing didn't get worked out until 1982. In January of that year Guy Steele circulated an example of quasiquo-tations nested three levels deep.
Reference: [2] <author> D. R. Engler, W. C. Hsieh, and M. F. Kaashoek. </author> <title> `C: A language for fast, efficient, high-level dynamic code generation. </title> <booktitle> In Proc. Symposium on Principles of Programming Languages. ACM, </booktitle> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: But in the light of hindsight, we can recognize that Conniver was firmly on the traditional Lisp path, while MDL had stepped off that path and had started in the direction suggested by Smith and Muller. 5.2 Parameterized code The `C language <ref> [2] </ref> adds a backquote operator to ordinary C as a way of specifying dynamically generated code. Their backquoted expressions, while explicitly inspired by Lisp's use of backquote, do not construct ordinary C data structures (such as structures and arrays), they only build dynamic code objects.
Reference: [3] <author> S. W. Galley and G. Pfister. </author> <title> The MDL programming language. </title> <type> TR 293, </type> <institution> MIT LCS, </institution> <month> May </month> <year> 1979. </year>
Reference-contexts: @X and !@X respectively, but the idea was basically the same. (Conniver also had a ,X construct that could be seen as similar to @X, so it is possible that this is how the comma character eventually came to fill its current role.) The Conniver Manual credits the MDL language <ref> [3] </ref> for inspiring some of Conniver's features. MDL's notation for data structure construction is related, but it is sufficiently different that I'm unwilling to call it a direct ancestor of today's quasiquote. I'll have more to say about this issue in section 5.1. <p> So it is interesting that both Smith's 2-LISP and Muller's M-LISP resemble the MDL language <ref> [3] </ref> in that expressions are notationally distinct from constants, and so constants are (in some sense) implicitly quasiquotations. E.g. an expression like &lt;cdr (X &lt;+ 2 3&gt; Z)&gt; returns (5 Z) This is why I would deny MDL's direct ancestry, via Conniver, of modern Lisp quasiquotation.
Reference: [4] <author> R. Kelsey, W. Clinger, and J. Rees. </author> <title> Revised 5 report on the algorithmic language Scheme. </title> <journal> Higher-Order and Symbolic Computation, </journal> <volume> 11(1) </volume> <pages> 7-105, </pages> <year> 1998. </year> <note> Also appears in ACM SIGPLAN Notices 33(9), </note> <month> September </month> <year> 1998. </year>
Reference-contexts: Sometime during the 1980s we started to spell "quasi-quote" without the hyphen. My guess is that this is the result of the adoption of a special form named "quasiquote" into Scheme. By the end of the 1980s, the standards for Common Lisp [13] and Scheme <ref> [4] </ref> had adopted the modern quasiquote notation. 5 Related Ideas Here are three ideas related to quasiquotation that I think the reader might be interested in. 5.1 Alternate views of quotation The backquote notation for quasiquotation (`X) is clearly inspired by Lisp's "forward quote" notation for ordinary quotation ('X).
Reference: [5] <author> J. Lamping. </author> <title> A unified system of parameterization for programming languages. </title> <booktitle> In Proc. Symposium on Lisp and Functional Programming, </booktitle> <pages> pages 316-326. </pages> <publisher> ACM, </publisher> <month> July </month> <year> 1988. </year>
Reference-contexts: I.e., dynamic code objects are also closures. So a `C backquote expression is sort of a cross between a quasiquotation and a -expression. This is similar to Lamping's system of parameterization <ref> [5] </ref>. His data-expressions specify parameterized objects that are sort of cross between a quasiquo-tation and a closure. Lamping was motivated by a desire to manipulate expressions the way that quasiquo-tation would allow, but without disconnecting them from the context that they came from.
Reference: [6] <author> J. McCarthy. </author> <title> LISP 1.5 Programmer's Manual. </title> <publisher> MIT Press, </publisher> <year> 1962. </year>
Reference-contexts: Lisp programmers will have trouble seeing what this does: (cons 'cond (cons (list (list 'eq? var (list 'quote val)) expr) more-clauses)) But even a novice can see what the equivalent quasiquotation does: `(cond ((eq? ,var ',val) ,expr) . ,more-clauses) S-expressions were at the core of McCarthy's origi-nal version of Lisp <ref> [6] </ref>. The ability to manipulate programs as data has always been an important part of what Lisp is all about. But without quasiquotation, actually working with S-expressions can be painful. Quasiquotation corrects an important inadequacy in Lisp's original S-expression toolkit. The benefits flow the other way as well. <p> Quine used quasiquotation to construct expressions from mathematical logic, and just as we would predict from our experience representing expressions from C, he was forced to adopt various conventions and abbreviations involving parentheses. (He should clearly have used S-expressions instead!) McCarthy developed Lisp and S-expressions <ref> [6] </ref> around 1960, but he did not propose any form of S-expression based quasiquotation. 7 7 Given that he was inspired by the -calculus, which has During 1960s and 1970s the artificial intelligence programming community expended a lot of effort learning how to program with S-expressions and list structure. <p> an abbreviation for a (potentially) complex series of calls to various list constructors, the forward quote notation is an abbreviation for a simple quote expression. (I.e., 'X is the same as (quote X).) Mc-Carthy invented quote expressions as a mechanism for representing the constants that appeared in his M-expression language <ref> [6] </ref>. Smith [11] and Muller [8] have both argued that that there is something suspect about McCarthy's quote. Both are worried that quote somehow confuses levels of representation and reference. They 9 When quasiquotation was migrated to MacLisp [9] ,.X was chosen to mean a "destructive" version of splicing.
Reference: [7] <author> D. V. McDermott and G. J. Sussman. </author> <title> The Conniver reference manual. </title> <institution> Memo 259a, MIT AI Lab, </institution> <month> May </month> <year> 1972. </year>
Reference-contexts: In particular, the notion of splicing, described in section 3.1, is clearly descended from those techniques. But nothing from those years resembles today's Lisp quasiquotation notation as closely as the notation in McDermott and Sussman's Conniver language <ref> [7] </ref>.
Reference: [8] <author> R. Muller. </author> <title> M-LISP: A representation-independent dialect of LISP with reduction semantics. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 14(4) </volume> <pages> 589-616, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: Smith [11] and Muller <ref> [8] </ref> have both argued that that there is something suspect about McCarthy's quote. Both are worried that quote somehow confuses levels of representation and reference. They 9 When quasiquotation was migrated to MacLisp [9] ,.X was chosen to mean a "destructive" version of splicing.
Reference: [9] <author> K. M. </author> <title> Pitman. The revised MacLisp manual. </title> <type> TR 295, </type> <institution> MIT LCS, </institution> <month> May </month> <year> 1983. </year>
Reference-contexts: Smith [11] and Muller [8] have both argued that that there is something suspect about McCarthy's quote. Both are worried that quote somehow confuses levels of representation and reference. They 9 When quasiquotation was migrated to MacLisp <ref> [9] </ref> ,.X was chosen to mean a "destructive" version of splicing. They also thought it was a good pun. This notation was also adopted in Common Lisp [13]. would like to replace Lisp's eval function with something more in line with the -calculus notion of normalization.
Reference: [10] <author> W. V. Quine. </author> <title> Mathematical Logic. </title> <publisher> Harvard University Press, </publisher> <address> revised edition, </address> <year> 1981. </year>
Reference-contexts: Making nested splicing work properly in all cases is difficult. The expander in appendix A gets it right, but at the expense of expanding into atrocious code. 4 History The name "Quasi-Quotation" was coined by W. V. Quine <ref> [10] </ref> around 1940. Quine's version of quasiquo-tation was character string based. He had no explicit marker for "unquote", instead any Greek letter was implicitly marked for replacement.
Reference: [11] <author> B. C. Smith. </author> <title> Reflection and semantics in Lisp. </title> <booktitle> In Proc. Symposium on Principles of Programming Languages, </booktitle> <pages> pages 23-35. </pages> <publisher> ACM, </publisher> <month> Jan. </month> <year> 1984. </year>
Reference-contexts: Smith <ref> [11] </ref> and Muller [8] have both argued that that there is something suspect about McCarthy's quote. Both are worried that quote somehow confuses levels of representation and reference. They 9 When quasiquotation was migrated to MacLisp [9] ,.X was chosen to mean a "destructive" version of splicing.
Reference: [12] <author> G. L. Steele Jr., </author> <month> Jan. </month> <year> 1982. </year> <title> Electronic mail message. </title>
Reference-contexts: In January of that year Guy Steele circulated an example of quasiquo-tations nested three levels deep. He remarked that ,',',X was "fairly obvious", but that it took him "a few tries" to get his use of ,,@X right <ref> [12] </ref>. I responded with an analysis of nested splicing in which I observed that in order to get nested splicing correct, an expansion algorithm like the one presented in appendix A was required. A correct semantics and expansion algorithm for quasiquotation based on this observation now appears in [13].
Reference: [13] <author> G. L. Steele Jr. </author> <title> Common LISP: The Language. </title> <note> Digital Press, second edition, </note> <year> 1990. </year>
Reference-contexts: I responded with an analysis of nested splicing in which I observed that in order to get nested splicing correct, an expansion algorithm like the one presented in appendix A was required. A correct semantics and expansion algorithm for quasiquotation based on this observation now appears in <ref> [13] </ref>. Sometime during the 1980s we started to spell "quasi-quote" without the hyphen. My guess is that this is the result of the adoption of a special form named "quasiquote" into Scheme. By the end of the 1980s, the standards for Common Lisp [13] and Scheme [4] had adopted the modern <p> based on this observation now appears in <ref> [13] </ref>. Sometime during the 1980s we started to spell "quasi-quote" without the hyphen. My guess is that this is the result of the adoption of a special form named "quasiquote" into Scheme. By the end of the 1980s, the standards for Common Lisp [13] and Scheme [4] had adopted the modern quasiquote notation. 5 Related Ideas Here are three ideas related to quasiquotation that I think the reader might be interested in. 5.1 Alternate views of quotation The backquote notation for quasiquotation (`X) is clearly inspired by Lisp's "forward quote" notation for ordinary quotation <p> Both are worried that quote somehow confuses levels of representation and reference. They 9 When quasiquotation was migrated to MacLisp [9] ,.X was chosen to mean a "destructive" version of splicing. They also thought it was a good pun. This notation was also adopted in Common Lisp <ref> [13] </ref>. would like to replace Lisp's eval function with something more in line with the -calculus notion of normalization.
Reference: [14] <author> G. L. Steele Jr. and G. J. Sussman. </author> <title> The revised report on SCHEME: A dialect of Lisp. </title> <type> Memo 452, </type> <institution> MIT AI Lab, </institution> <month> Jan. </month> <year> 1978. </year>
Reference-contexts: I thought that this would be a good pun. Other members of the group thought it might be confusing. Probably inspired by Scheme, which in those days was using just @X to indicate splicing <ref> [14] </ref>, we finally decided on ,@X [15]. 9 Meanwhile McDermott altered the Conniver notation slightly by changing !"X to |"X. In this form it appeared in [1] in 1980. As far as I know, the problems of nested splicing didn't get worked out until 1982.
Reference: [15] <author> D. Weinreb and D. Moon. </author> <title> Lisp Machine Manual. </title> <publisher> Symbolics Inc., </publisher> <month> July </month> <year> 1981. </year>
Reference-contexts: I thought that this would be a good pun. Other members of the group thought it might be confusing. Probably inspired by Scheme, which in those days was using just @X to indicate splicing [14], we finally decided on ,@X <ref> [15] </ref>. 9 Meanwhile McDermott altered the Conniver notation slightly by changing !"X to |"X. In this form it appeared in [1] in 1980. As far as I know, the problems of nested splicing didn't get worked out until 1982.
References-found: 15

