URL: http://www.cs.wustl.edu/cs/techreports/1997/wucs-97-44.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: An Introduction to Mobile UNITY  
Phone: 12/1/97  
Author: Gruia-Catalin Roman Peter J. McCann 
Date: 9 October 1997  
Address: IN ST LOUIS  Saint Louis, MO 63130-4899 One Brookings Drive Campus Box 1045  Printed  
Affiliation: WASHINGTON UNIVERSITY  Washington School of Engineering Applied Science  Washington University Department of Computer Science  
Pubnum: WUCS-97-44  
Abstract-found: 0
Intro-found: 1
Reference: <institution> 22 Printed 12/2/97 </institution>
Reference: [1] <author> M. Abadi and L. Lamport, </author> <title> An Old-fashioned Recipe for Real Time, </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 16, no. 5, </volume> <pages> pp. 1543-71, </pages> <year> 1994. </year>
Reference-contexts: Reasoning about the correctness of the above protocol will naturally require assumptions about the value of D. The expression of the real-time constraints here is similar to the MinTime and MaxTime of <ref> [1] </ref>, except that we choose here to deal with discrete, local clocks rather than a continuous, global one.
Reference: [2] <author> B. Alpern and F. B. Schneider, </author> <title> Defining Liveness, </title> <journal> Information Processing Letters, </journal> <volume> vol. 21, no. 4, </volume> <pages> pp. 181-5, </pages> <year> 1985. </year>
Reference-contexts: A pure liveness property is one that can always be satisfied by some infinite extension of any finite execution. Any property (set of allowed behaviors) can be expressed as the intersection of a pure safety and a pure liveness property <ref> [2] </ref>. 5 Printed 12/1/97 Standard UNITY [3] provides proof rules for very basic safety and liveness properties that make direct use of the program text. We choose to express basic safety using the constrains relation of [11], abbreviated as co.
Reference: [3] <author> K. M. Chandy and J. Misra, </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: Important to this task are models and techniques for specification and verification. This paper proposes a new notation and underlying formal model supporting specification of and reasoning about decoupled, location-aware systems. The approach is based on the UNITY <ref> [3] </ref> model of concurrent computation. This work extends the UNITY notation with constructs for expressing both component location and transient interaction among components. In Section 2, we review UNITY and provide the motivation for our later extensions. Section 3 is a succinct introduction to our new notation, called Mobile UNITY. <p> Section 5 discusses the potential use of the new constructs for the semantic definition of novel high-level abstractions of communication and coordination in mobile systems. Conclusions are presented in Section 6. 2. UNITY Review and Critique Chandy and Misra put forth the UNITY model <ref> [3] </ref> as a vehicle for the study of distributed computing. A minimal set of concepts, a simple notation and a restricted form of temporal logic were evaluated against a broad range of traditional distributed computations and software development activities including specification, design, coding, and verification. <p> A pure liveness property is one that can always be satisfied by some infinite extension of any finite execution. Any property (set of allowed behaviors) can be expressed as the intersection of a pure safety and a pure liveness property [2]. 5 Printed 12/1/97 Standard UNITY <ref> [3] </ref> provides proof rules for very basic safety and liveness properties that make direct use of the program text. We choose to express basic safety using the constrains relation of [11], abbreviated as co. <p> This allows for the maintenance of history variables, that do not change the behavior of the underlying program but are needed for certain kinds of proofs, and construction of layered systems, where the underlying layers are not aware of the higher layer variables. A major contribution of <ref> [3] </ref> was the examination of program derivation strategies using union and superposition as basic construction mechanisms.
Reference: [4] <author> E. D. Dijkstra, </author> <title> A Discipline of Programming. </title> <publisher> Prentice-Hall, </publisher> <year> 1976. </year>
Reference-contexts: We can use well known techniques from sequential programming <ref> [4] </ref> to carry out this proof for each statement. Formally, co can be defined as p co q " s :: -p- s -q using Hoare triple [7] notation where s is any statement from the program, p is a precondition, and q is a postcondition.
Reference: [5] <author> G. H. Forman and J. Zahorjan, </author> <title> The Challenges of Mobile Computing, </title> <journal> IEEE Computer, </journal> <volume> vol. 27, no. 4, </volume> <pages> pp. 38-47, </pages> <year> 1994. </year>
Reference-contexts: Disconnections may be unavoidable as when a host moves to a new location, or they may be intentional as when a laptop is powered off to conserve battery life. Also, wireless technologies will always lag behind wired ones in terms of bandwidth due to the added technical difficulties <ref> [5, 8] </ref>. Systems designed to work in this environment must be decoupled and opportunistic. By "decoupled," we mean that applications must be able to run while disconnected from or weakly connected to servers. "Opportunistic" means that interaction can be accomplished only when connectivity is available.
Reference: [6] <author> C. G. Harrison, D. M. Chess, and A. Kershenbaum, </author> <title> Mobile Agents: Are they a good idea?, </title> <institution> IBM T.J. Watson Research Center RC 19887, </institution> <year> 1995. </year>
Reference-contexts: Reconfigurable systems are closely related to notions of executable content and mobile agents, which are motivated by reasons other than host mobility <ref> [6] </ref>. A mobile software agent might have explicit knowledge and control over its location (which may be specified as a host address), and must interact with components with which it is co-located to achieve some goal.
Reference: [7] <author> C. A. R. Hoare, </author> <title> An Axiomatic Basis for Computer Programming, </title> <journal> Communications of the ACM, </journal> <volume> vol. 12, no. 10, </volume> <pages> pp. </pages> <address> 576-580,583, </address> <year> 1969. </year>
Reference-contexts: We can use well known techniques from sequential programming [4] to carry out this proof for each statement. Formally, co can be defined as p co q " s :: -p- s -q using Hoare triple <ref> [7] </ref> notation where s is any statement from the program, p is a precondition, and q is a postcondition. Properties expressed with co should be stuttering invariant, that is, inserting repeated elements into an execution sequence should not change the value of a co relation applied to that execution.
Reference: [8] <author> T. Imielinski and B. R. Badrinath, </author> <title> Wireless Computing: Challenges in Data Management, </title> <journal> Communications of the ACM, </journal> <volume> vol. 37, no. 10, </volume> <pages> pp. 18-28, </pages> <year> 1994. </year>
Reference-contexts: Disconnections may be unavoidable as when a host moves to a new location, or they may be intentional as when a laptop is powered off to conserve battery life. Also, wireless technologies will always lag behind wired ones in terms of bandwidth due to the added technical difficulties <ref> [5, 8] </ref>. Systems designed to work in this environment must be decoupled and opportunistic. By "decoupled," we mean that applications must be able to run while disconnected from or weakly connected to servers. "Opportunistic" means that interaction can be accomplished only when connectivity is available.
Reference: [9] <author> P. J. McCann and G.-C. Roman, </author> <title> Mobile UNITY Coordination Constructs applied to Packet Forwarding for Mobile Hosts, </title> <booktitle> Second International Conference on Coordination Languages and Models, </booktitle> <address> Berlin, </address> <pages> pp. 338-354, </pages> <year> 1997. </year>
Reference-contexts: A more pragmatic dimension of this research is also emerging. Mobile UNITY has been used in an exercise on involving the specification and verification of a network protocol, Mobile IP [13] in <ref> [9] </ref>, and to express various forms of code mobility [14]. Several pairwise high-level interaction constructs (e.g., shared variables and statement synchronization) were presented in [15]. These and other efforts to use Mobile UNITY to verify properties of computations involving mobile components will continue.
Reference: [10] <author> J. Misra, </author> <title> A Logic for Concurrent Programming: Progress, </title> <journal> Journal of Computer and Software Engineering, </journal> <volume> vol. 3, no. 2, </volume> <pages> pp. 273-300, </pages> <year> 1995. </year>
Reference-contexts: a co property, and the existence of an establishing statement can be proven with standard techniques: 6 Printed 12/1/97 p ensures q (pq co pq) $ s :: -pq- s -q We take ensures as a fundamental element of progress specifications, rather than the newer pure liveness p transient operator <ref> [10] </ref> due to ensures linguistic clarity and our familiarity with it. A progress property that the sender program should satisfy is that the counter csend eventually should increase or be reset to zero.
Reference: [11] <author> J. Misra, </author> <title> A Logic for Concurrent Programming: Safety, </title> <journal> Journal of Computer and Software Engineering, </journal> <volume> vol. 3, no. 2, </volume> <pages> pp. 239-72, </pages> <year> 1995. </year>
Reference-contexts: We choose to express basic safety using the constrains relation of <ref> [11] </ref>, abbreviated as co. This is a predicate relation developed in the context of generic action systems and is not specific to UNITY, but has a particularly simple form.
Reference: [12] <author> O. Nierstrasz and T. D. Meijler, </author> <title> Requirements for a Composition Language, </title> <booktitle> Proceedings of the ECOOP '94 Workshop on Models and Languages for Coordination of Parallelism and Distribution, </booktitle> <address> Bologna, Italy; 5 July 1994, </address> <pages> pp. 193, 147-61, </pages> <year> 1995. </year>
Reference-contexts: Open software systems that must interoperate under unanticipated circumstances are another example of situations where a broad range of configurations must be considered during system design and implementation in order to guarantee correct behavior <ref> [12] </ref>. The kinds of weakly connected, context-dependent systems inspired by mobile computing will require new ways of thinking about distributed system design. Important to this task are models and techniques for specification and verification.
Reference: [13] <author> C. Perkins, </author> <title> IP Mobility Support, IETF Network Working Group, </title> <type> Technical Report RFC 2002, </type> <month> October </month> <year> 1996. </year>
Reference-contexts: Not every distributed algorithm should be rewritten from scratch for the mobile setting, and support for location transparent messaging services is desirable. Mobile IP <ref> [13] </ref> attempts to provide this in the context of the Internet. Even if the goal is transparent mobility, the designers of such a protocol must face the issues brought on by mobility. <p> A more pragmatic dimension of this research is also emerging. Mobile UNITY has been used in an exercise on involving the specification and verification of a network protocol, Mobile IP <ref> [13] </ref> in [9], and to express various forms of code mobility [14]. Several pairwise high-level interaction constructs (e.g., shared variables and statement synchronization) were presented in [15]. These and other efforts to use Mobile UNITY to verify properties of computations involving mobile components will continue.
Reference: [14] <author> G. P. Picco, G.-C. Roman, and P. J. McCann, </author> <title> Expressing Code Mobility in Mobile UNITY, </title> <booktitle> Sixth European Software Engineering Conference (ESEC'97), </booktitle> <address> Zurich, </address> <pages> pp. 500-518, </pages> <year> 1997. </year>
Reference-contexts: A more pragmatic dimension of this research is also emerging. Mobile UNITY has been used in an exercise on involving the specification and verification of a network protocol, Mobile IP [13] in [9], and to express various forms of code mobility <ref> [14] </ref>. Several pairwise high-level interaction constructs (e.g., shared variables and statement synchronization) were presented in [15]. These and other efforts to use Mobile UNITY to verify properties of computations involving mobile components will continue. We are also investigating coordination constructs that have effective implementation in the ad-hoc networks setting.
Reference: [15] <author> G.-C. Roman, P. J. McCann, and J. Y. Plun, </author> <title> Mobile UNITY: Reasoning and Specification in Mobile Computing, </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> vol. 6, no. 3, </volume> <pages> pp. 250-282, </pages> <year> 1997. </year>
Reference-contexts: Mobile UNITY has been used in an exercise on involving the specification and verification of a network protocol, Mobile IP [13] in [9], and to express various forms of code mobility [14]. Several pairwise high-level interaction constructs (e.g., shared variables and statement synchronization) were presented in <ref> [15] </ref>. These and other efforts to use Mobile UNITY to verify properties of computations involving mobile components will continue. We are also investigating coordination constructs that have effective implementation in the ad-hoc networks setting.
Reference: [16] <author> M. Satyanarayanan, J. J. Kistler, L. B. Mummert, M. R. Ebling, P. Kumar, and Q. Lu, </author> <title> Experience with Disconnected Operation in a Mobile Computing Environment, </title> <booktitle> Proceedings of the USENIX Symposium on Mobile and Location-Indepedent Computing, </booktitle> <address> Cambridge, MA, </address> <pages> pp. 11-28, </pages> <year> 1993. </year>
Reference-contexts: By "decoupled," we mean that applications must be able to run while disconnected from or weakly connected to servers. "Opportunistic" means that interaction can be accomplished only when connectivity is available. These aspects are already apparent in working systems such as Coda <ref> [16] </ref>, a filesystem supporting disconnected operation, and Bayou [18], a replicated database where updates are propagated by pairwise interaction among servers, without involving any global synchronization. Both systems relax the degree of consistency offered to the application programmer in favor of higher availability.
Reference: [17] <author> B. N. Schilit, N. Adams, and R. </author> <title> Want, </title> <booktitle> Context-Aware Computing Applications, Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <pages> pp. 85-90, </pages> <year> 1994. </year>
Reference-contexts: A simple example is the location dependent World Wide Web browser of Voelker et al [19]. This system allows the user to specify location-dependent queries for information about the current surroundings and the services available. A more general point of view is evidenced in <ref> [17] </ref>, which notes that application behavior might depend on the totality of the current context, including the current location and the nearness of other components, like the identity of the nearest printer or the group of individuals present in a room.
Reference: [18] <author> D. Terry, M. Theimer, K. Petersen, A. Demers, M. Spreitzer, and C. Hauser, </author> <title> Managing Update Conflicts in Bayou, a Weakly Connected Replicated Storage System, </title> <journal> Operating Systems Review, </journal> <volume> vol. 29, no. 5, </volume> <pages> pp. 172-83, </pages> <year> 1995. </year>
Reference-contexts: These aspects are already apparent in working systems such as Coda [16], a filesystem supporting disconnected operation, and Bayou <ref> [18] </ref>, a replicated database where updates are propagated by pairwise interaction among servers, without involving any global synchronization. Both systems relax the degree of consistency offered to the application programmer in favor of higher availability.
Reference: [19] <author> G. M. Voelker and B. N. Bershad, Mobisaic: </author> <title> An Information System for a Mobile Wireless Computing Environment, </title> <booktitle> Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <pages> pp. 185-90, </pages> <year> 1994. </year>
Reference-contexts: In addition to being weakly connected, mobile computers change location frequently, which leads to demand for context dependent services. A simple example is the location dependent World Wide Web browser of Voelker et al <ref> [19] </ref>. This system allows the user to specify location-dependent queries for information about the current surroundings and the services available.
References-found: 20

