URL: ftp://ftp.cs.utexas.edu/pub/boyer/ics-reports/cmp21.ps.Z
Refering-URL: ftp://ftp.cs.utexas.edu/pub/boyer/ics-reports/index.html
Root-URL: 
Phone: (512) 471-1901  
Title: A Mechanical Verification of the Alternating Bit Protocol  
Author: B.L. DiVito 
Address: 2100 Main Building  Austin, Texas 78712  
Affiliation: Institute for Computing Science  The University of Texas at Austin  
Date: #21 June 1981  
Pubnum: Technical Report  
Abstract-found: 0
Intro-found: 1
Reference: [Bartlett, 69] <author> Bartlett, K. A., Scantlebury, R. A. and P. T. Wilkinson, </author> <title> "A Note on Reliable Full Duplex Transmission over Half Duplex Links," </title> <journal> CACM, </journal> <volume> vol. 12, no. 5, </volume> <month> May </month> <year> 1969. </year>
Reference-contexts: A complete listing of the formal model is presented in Appendix I. Further supporting information can be found in the other appendices. Complete transcripts of the proofs and other verifier output have been compiled into a separate (rather lengthy) report [DiVito, 81]. 2. Problem Description The Alternating Bit Protocol <ref> [Bartlett, 69] </ref> is an example used widely to illustrate the application of formal methods to protocols. It is assumed that the reader has some familiarity with this protocol so we will go directly to our particular model of it. The version being used is that described in [Bochmann, 77].
Reference: [Bochmann, 77] <author> Bochmann, G.V. and J. Gecsei, </author> <title> "A Verified Method for the Specification and Verification of Protocols, </title> <booktitle> Proc. IFIP, </booktitle> <year> 1977. </year>
Reference-contexts: It is assumed that the reader has some familiarity with this protocol so we will go directly to our particular model of it. The version being used is that described in <ref> [Bochmann, 77] </ref>. It is concerned with one-way data transfer only. The Gypsy model used here evolved from the one originally presented in [Sunshine, 79b]. 2.1 Model The protocol is viewed as providing a virtual communication medium for reliable data transfer. This virtual medium is modeled as a Gypsy concurrent process.
Reference: [DiVito, 81] <author> DiVito, B. L., </author> <title> "Transcripts for the Proof of the Alternating Bit Protocol," </title> <institution> ICSCA-CMP- , University of Texas at Austin, </institution> <month> May </month> <year> 1981. </year>
Reference-contexts: A complete listing of the formal model is presented in Appendix I. Further supporting information can be found in the other appendices. Complete transcripts of the proofs and other verifier output have been compiled into a separate (rather lengthy) report <ref> [DiVito, 81] </ref>. 2. Problem Description The Alternating Bit Protocol [Bartlett, 69] is an example used widely to illustrate the application of formal methods to protocols. It is assumed that the reader has some familiarity with this protocol so we will go directly to our particular model of it. <p> Mechanical VC generation resulted in the following breakdown of VCs to be proved. ab_protocol sender receiver ---------- ----- -------- Verification conditions 1 9 7 Actually, the receiver yielded 8 VCs but two of them are identical. Transcripts of VC generation are contained in the companion report <ref> [DiVito, 81] </ref>. As is usually the case, the cobegin VC (ab_protocol) is far more difficult to prove than the sequential VCs (sender, receiver). However, the sequential VCs are not easily outdone, and always manage to appear in far greater numbers. 4.
Reference: [Gerhart, 80] <author> Gerhart, S. L., et al, </author> <title> "An Overview of Affirm: A Specification and Verification System," </title> <booktitle> Proc. IFIP, </booktitle> <month> Oct. </month> <year> 1980. </year>
Reference-contexts: A fully mechanical proof of a safety property was obtained. What is perhaps more interesting is that the proof was performed with the combined help of two separate verification systems: the Gypsy system [Good, 77], [Good, 78a] and the Affirm system [Musser, 80], <ref> [Gerhart, 80] </ref>. The modeling and specification effort was a more or less straightforward application of the Gypsy methodology for concurrent programming. In addition, the Alternating Bit Protocol is by now a very well known example problem. Therefore, the following discussion will not dwell on those aspects of the effort.
Reference: [Good, 77] <author> Good, D. I., </author> <title> "Constructing Verified and Reliable Communications Processing Systems," </title> <journal> ACM SIGSOFT Software Eng. Notes, </journal> <volume> vol. 2, no. 5, </volume> <month> Oct. </month> <year> 1977. </year>
Reference-contexts: The protocol was modeled as an abstract program using the Gypsy verification methodology. A fully mechanical proof of a safety property was obtained. What is perhaps more interesting is that the proof was performed with the combined help of two separate verification systems: the Gypsy system <ref> [Good, 77] </ref>, [Good, 78a] and the Affirm system [Musser, 80], [Gerhart, 80]. The modeling and specification effort was a more or less straightforward application of the Gypsy methodology for concurrent programming. In addition, the Alternating Bit Protocol is by now a very well known example problem.
Reference: [Good, 78a] <author> Good, D. I., and R. M. Cohen, </author> <title> "Verifiable Communications Processing in Gypsy," </title> <booktitle> Proc. 17th COMPCON, IEEE, </booktitle> <year> 1978. </year>
Reference-contexts: The protocol was modeled as an abstract program using the Gypsy verification methodology. A fully mechanical proof of a safety property was obtained. What is perhaps more interesting is that the proof was performed with the combined help of two separate verification systems: the Gypsy system [Good, 77], <ref> [Good, 78a] </ref> and the Affirm system [Musser, 80], [Gerhart, 80]. The modeling and specification effort was a more or less straightforward application of the Gypsy methodology for concurrent programming. In addition, the Alternating Bit Protocol is by now a very well known example problem.
Reference: [Good, 78b] <author> Good, D. I., et al, </author> <title> "Report on the Language Gypsy Version 2.0," </title> <institution> ICSCA-CMP-10, University of Texas at Austin, </institution> <month> Sept. </month> <year> 1978. </year>
Reference-contexts: For full information on Gypsy notation 3 consult the language report <ref> [Good, 78b] </ref>. procedure ab_protocol (var source : msg_buf &lt;input&gt;; var sink : msg_buf &lt;output&gt;) = begin block msg_lag (outto (sink, myid), infrom (source, myid),1); exit false; var pkt_send, pkt_rcv, ack_send, ack_rcv : pkt_buf; var clock_in, clock_out : clk_buf; cobegin sender (source, pkt_send, ack_send, clock_in, clock_out); medium (pkt_send, pkt_rcv); medium (ack_rcv, ack_send);
Reference: [Good, 79] <author> Good, D. I., Cohen, R. M. and J. Keeton-Williams, </author> <title> "Principles of Proving Concurrent Programs in Gypsy," </title> <institution> ICSCA-CMP-15, University of Texas at Austin, </institution> <month> Jan. </month> <year> 1979. </year>
Reference-contexts: As the first step toward proving these routines, the verification conditions were generated by the Gypsy verifier. The principles for generating VCs are based on the proof methods described in <ref> [Good, 79] </ref>. Mechanical VC generation resulted in the following breakdown of VCs to be proved. ab_protocol sender receiver ---------- ----- -------- Verification conditions 1 9 7 Actually, the receiver yielded 8 VCs but two of them are identical. Transcripts of VC generation are contained in the companion report [DiVito, 81].
Reference: [Musser, 80] <author> Musser, D. R., </author> <title> "Abstract Data Type Specification in the Affirm System," </title> <journal> IEEE Trans. Software Eng., </journal> <volume> vol. SE-6, no. 1, </volume> <month> Jan </month> <year> 1980. </year>
Reference-contexts: A fully mechanical proof of a safety property was obtained. What is perhaps more interesting is that the proof was performed with the combined help of two separate verification systems: the Gypsy system [Good, 77], [Good, 78a] and the Affirm system <ref> [Musser, 80] </ref>, [Gerhart, 80]. The modeling and specification effort was a more or less straightforward application of the Gypsy methodology for concurrent programming. In addition, the Alternating Bit Protocol is by now a very well known example problem.
Reference: [Sunshine, 79a] <author> Sunshine, C. A., </author> <title> "Formal Techniques for Protocol Specification and Verification," </title> <journal> IEEE Computer, </journal> <volume> vol. 12, no. 9, </volume> <month> Sept. </month> <year> 1979. </year>
Reference-contexts: The buffers which connect to the external environment (higher level protocol) are formal parameters of the parent. In the subsequent discussion, we follow the general architectural model for specifying protocols that is outlined in <ref> [Sunshine, 79a] </ref>. Its basic features include the use of a layered protocol structure as well as the separation of specifications into two classes: service specifications and protocol specifications.
Reference: [Sunshine, 79b] <author> Sunshine, </author> <title> C.A., "Formal Methods for Communication Protocol Specification and Verification," </title> <institution> Rand Research Report N-1429-ARPA/NBS, </institution> <month> Nov. </month> <year> 1979. </year>
Reference-contexts: The version being used is that described in [Bochmann, 77]. It is concerned with one-way data transfer only. The Gypsy model used here evolved from the one originally presented in <ref> [Sunshine, 79b] </ref>. 2.1 Model The protocol is viewed as providing a virtual communication medium for reliable data transfer. This virtual medium is modeled as a Gypsy concurrent process. It is in turn composed of a set of sequential and concurrent processes which communicate through message buffers.
Reference: [Thompson, 81] <author> Thompson, D. H., et al, </author> <title> "The Affirm Reference Library," </title> <booktitle> USC-ISI, 1981 (five volume set). </booktitle> <pages> 11 </pages>
Reference-contexts: Details of the translation of formalisms from Gypsy to Affirm are given in Appendix III. The Affirm type specifications which resulted from this mapping are displayed in Appendix IV. Complete documentation on Affirm notation and the use of the Affirm system is contained in <ref> [Thompson, 81] </ref>. 5. Conclusions The Alternating Bit Protocol has been modeled using the Gypsy methodology for concurrent programming. A comprehensive safety property was stated and the actions of the protocol modules were specified in a procedural manner.
References-found: 12

