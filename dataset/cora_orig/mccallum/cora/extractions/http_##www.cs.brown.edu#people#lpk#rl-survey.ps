URL: http://www.cs.brown.edu/people/lpk/rl-survey.ps
Refering-URL: http://www.cs.brown.edu/research/ai/publications/
Root-URL: http://www.cs.brown.edu
Email: lpk,mlittman@cs.brown.edu  awm@cs.cmu.edu  
Title: Reinforcement Learning: A Survey  
Author: Leslie Pack Kaelbling Michael L. Littman and Andrew W. Moore Smith Hall , 
Date: 1910,  
Address: Box  Providence, RI 02912-1910 USA  5000 Forbes Avenue Pittsburgh, PA 15213 USA  
Affiliation: Computer Science Department,  Brown University  Carnegie Mellon University,  
Note: Journal of Artificial Intelligence Research 4 (1996) 237-285 Submitted 9/95; published 5/96  
Abstract: This paper surveys the field of reinforcement learning from a computer-science perspective. It is written to be accessible to researchers familiar with machine learning. Both the historical basis of the field and a broad selection of current work are summarized. Reinforcement learning is the problem faced by an agent that learns behavior through trial-and-error interactions with a dynamic environment. The work described here has a resemblance to work in psychology, but differs considerably in the details and in the use of the word "reinforcement." The paper discusses central issues of reinforcement learning, including trading off exploration and exploitation, establishing the foundations of the field via Markov decision theory, learning from delayed reinforcement, constructing empirical models to accelerate learning, making use of generalization and hierarchy, and coping with hidden state. It concludes with a survey of some implemented systems and an assessment of the practical utility of current methods for reinforcement learning.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David H. Ackley and Michael L. Littman. </author> <title> Generalization and scaling in reinforcement learning. </title> <editor> In D. S. Touretzky, editor, </editor> <booktitle> Advances in Neural Information Processing Systems 2, </booktitle> <pages> pages 550-557, </pages> <address> San Mateo, CA, 1990. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The reinforcement-learning architectures and algorithms discussed above have included the storage of a variety of mappings, including S ! A (policies), S ! &lt; (value functions), S fi A ! &lt; (Q functions and rewards), S fi A ! S (deterministic transitions), and S fi A fi S ! <ref> [0; 1] </ref> (transition probabilities). Some of these mappings, such as transitions and immediate rewards, can be 255 Kaelbling, Littman, & Moore learned using straightforward supervised learning, and can be handled using any of the wide variety of function-approximation techniques for supervised learning that support noisy training examples. <p> Such algorithms can and have been used in the context of a delayed reinforcement, for instance, as the RL component in the AHC architecture described in Section 4.1. They can also be generalized to real-valued reward through reward comparison methods [114]. CRBP The complementary reinforcement backpropagation algorithm <ref> [1] </ref> (crbp) consists of a feed-forward network mapping an encoding of the state to an encoding of the action.
Reference: [2] <author> J. S. Albus. </author> <title> A new approach to manipulator control: Cerebellar model articulation controller (cmac). </title> <journal> Journal of Dynamic Systems, Measurement and Control, </journal> <volume> 97 </volume> <pages> 220-227, </pages> <year> 1975. </year>
Reference-contexts: In Sutton's comparative experiments with Boyan and Moore's counterexamples, he changes four aspects of the experiments: 1. Small changes to the task specifications. 2. A very different kind of function approximator (CMAC <ref> [2] </ref>) that has weak generalization. 3. A different learning algorithm: SARSA [95] instead of value iteration. 4. A different training regime. Boyan and Moore sampled states uniformly in state space, whereas Sutton's method sampled along empirical trajectories.
Reference: [3] <author> James S. Albus. </author> <title> Brains, Behavior, and Robotics. </title> <publisher> BYTE Books, Subsidiary of McGraw-Hill, </publisher> <address> Peterborough, New Hampshire, </address> <year> 1981. </year>
Reference-contexts: Popular techniques include various neural-network methods [94], fuzzy logic [11, 58]. CMAC <ref> [3] </ref>, and local memory-based methods [84], such as generalizations of nearest neighbor methods.
Reference: [4] <author> Charles W. Anderson. </author> <title> Learning and Problem Solving with Multilayer Connectionist Systems. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <address> Amherst, MA, </address> <year> 1986. </year>
Reference-contexts: The second network is trained in a standard supervised mode to estimate r as a function of the input state s. Variations of this approach have been used in a variety of applications <ref> [4, 9, 61, 114] </ref>. REINFORCE Algorithms Williams [131, 132] studied the problem of choosing actions to maximize immedate reward. He identified a broad class of update rules that perform gradient descent on the expected reward and showed how to integrate these rules with backpropagation.
Reference: [5] <author> Rachita (Ronny) Ashar. </author> <title> Hierarchical learning in stochastic domains. </title> <type> Master's thesis, </type> <institution> Brown University, </institution> <address> Providence, Rhode Island, </address> <year> 1994. </year> <note> 269 Kaelbling, Littman, & Moore </note>
Reference-contexts: The HDG algorithm works by analogy with navigation in a harbor. The environment is partitioned (a priori, but more recent work <ref> [5] </ref> addresses the case of learning the partition) into a set of regions whose centers are known as "landmarks." If the agent is currently in the same region as the goal, then it uses low-level actions to move to the goal.
Reference: [6] <author> Leemon Baird. </author> <title> Residual algorithms: Reinforcement learning with function approximation. </title> <editor> In Armand Prieditis and Stuart Russell, editors, </editor> <booktitle> Proceedings of the Twelfth International Conference on Machine Learning, </booktitle> <pages> pages 30-37, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Several recent results [42, 126] show how the appropriate choice of function approximator can guarantee convergence, though not necessarily to the optimal values. Baird's residual gradient technique <ref> [6] </ref> provides guaranteed convergence to locally optimal solutions. Perhaps the gloominess of these counter-examples is misplaced. Boyan and Moore [18] report that their counter-examples can be made to work with problem-specific hand-tuning despite the unreliability of untuned algorithms that provably converge in discrete domains.
Reference: [7] <author> Leemon C. Baird and A. H. Klopf. </author> <title> Reinforcement learning with high-dimensional, continuous actions. </title> <type> Technical Report WL-TR-93-1147, </type> <institution> Wright-Patterson Air Force Base Ohio: Wright Laboratory, </institution> <year> 1993. </year>
Reference-contexts: Training such a network is not conceptually difficult, but using the network to find the optimal action can be a challenge. One method is to do a local gradient-ascent search on the action in order to find one with high value <ref> [7] </ref>. 259 Kaelbling, Littman, & Moore goal without crossing any of the barrier lines. (b) The path taken by PartiGame during the entire first trial. It begins with intense exploration to find a route out of the almost entirely enclosed start region.
Reference: [8] <author> Andrew G. Barto, S. J. Bradtke, and Satinder P. Singh. </author> <title> Learning to act using real-time dynamic programming. </title> <journal> Artificial Intelligence, </journal> <volume> 72(1) </volume> <pages> 81-138, </pages> <year> 1995. </year>
Reference-contexts: RTDP (real-time dynamic programming) <ref> [8] </ref> is another model-based method that uses Q-learning to concentrate computational effort on the areas of the state-space that the agent is most likely to occupy. It is specific to problems in which the agent is trying to achieve a particular goal state and the reward everywhere else is 0.
Reference: [9] <author> Andrew G. Barto, Richard S. Sutton, and Charles W. Anderson. </author> <title> Neuronlike adaptive elements that can solve difficult learning control problems. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> SMC-13(5):834-846, </volume> <year> 1983. </year>
Reference-contexts: This class of algorithms is known as temporal difference methods [115]. We will consider two different temporal-difference learning strategies for the discounted infinite-horizon model. 4.1 Adaptive Heuristic Critic and TD () The adaptive heuristic critic algorithm is an adaptive version of policy iteration <ref> [9] </ref> in which the value-function computation is no longer implemented by solving a set of linear equations, but is instead computed by an algorithm called T D (0). A block diagram for this approach is given in component (labeled RL). <p> The second network is trained in a standard supervised mode to estimate r as a function of the input state s. Variations of this approach have been used in a variety of applications <ref> [4, 9, 61, 114] </ref>. REINFORCE Algorithms Williams [131, 132] studied the problem of choosing actions to maximize immedate reward. He identified a broad class of update rules that perform gradient descent on the expected reward and showed how to integrate these rules with backpropagation.
Reference: [10] <author> Richard Bellman. </author> <title> Dynamic Programming. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1957. </year>
Reference-contexts: The reward function specifies expected instantaneous reward as a function of the current state and action. The model is Markov if the state transitions are independent of any previous environment states or agent actions. There are many good references to MDP models <ref> [10, 13, 48, 90] </ref>. Although general MDPs may have infinite (even uncountable) state and action spaces, we will only discuss methods for solving finite-state and finite-action problems. <p> We restrict our attention mainly to finding optimal policies for the infinite-horizon discounted model, but most of these algorithms have analogs for the finite-horizon and average-case models as well. We rely on the result that, for the infinite-horizon discounted model, there exists an optimal deterministic stationary policy <ref> [10] </ref>. We will speak of the optimal value of a state|it is the expected infinite discounted sum of reward that the agent will gain if it starts in that state and executes the optimal policy. <p> It can be determined by a simple iterative algorithm called value iteration that can be shown to converge to the correct V fl values <ref> [10, 13] </ref>. initialize V (s) arbitrarily loop until policy good enough loop for s 2 S loop for a 2 A Q (s; a) := R (s; a) + fl s 0 2S T (s; a; s 0 )V (s 0 ) end loop end loop It is not obvious when
Reference: [11] <author> Hamid R. Berenji. </author> <title> Artificial neural networks and approximate reasoning for intelligent control in space. </title> <booktitle> In American Control Conference, </booktitle> <pages> pages 1075-1080, </pages> <year> 1991. </year>
Reference-contexts: Popular techniques include various neural-network methods [94], fuzzy logic <ref> [11, 58] </ref>. CMAC [3], and local memory-based methods [84], such as generalizations of nearest neighbor methods.
Reference: [12] <author> Donald A. Berry and Bert Fristedt. </author> <title> Bandit Problems: Sequential Allocation of Experiments. </title> <publisher> Chapman and Hall, </publisher> <address> London, UK, </address> <year> 1985. </year>
Reference-contexts: A more appropriate measure, then, is the expected decrease in reward gained due to executing the learning algorithm instead of behaving optimally from the very beginning. This measure is known as regret <ref> [12] </ref>. It penalizes mistakes wherever they occur during the run. Unfortunately, results concerning the regret of algorithms are quite hard to obtain. 241 Kaelbling, Littman, & Moore 1.4 Reinforcement Learning and Adaptive Control Adaptive control [19, 112] is also concerned with algorithms for improving a sequence of decisions from experience. <p> The simplest possible reinforcement-learning problem is known as the k-armed bandit problem, which has been the subject of a great deal of study in the statistics and applied mathematics literature <ref> [12] </ref>. The agent is in a room with a collection of k gambling machines (each called a "one-armed bandit" in colloquial English). The agent is permitted a fixed number of pulls, h. Any arm may be pulled on each turn. <p> There is a wide variety of solutions to this problem. We will consider a representative selection of them, but for a deeper discussion and a number of important theoretical results, see the book by Berry and Fristedt <ref> [12] </ref>. We use the term "action" to indicate the agent's choice of arm to pull. This eases the transition into delayed reinforcement models in Section 3. It is very important to note that bandit problems fit our definition of a reinforcement-learning environment with a single state with only self transitions. <p> Although it is instructive, the methods it provides do not scale well to more complex problems. 242 Reinforcement Learning: A Survey 2.1.1 Dynamic-Programming Approach If the agent is going to be acting for a total of h steps, it can use basic Bayesian reasoning to solve for an optimal strategy <ref> [12] </ref>. This requires an assumed prior joint distribution for the parameters fp i g, the most natural of which is that each p i is independently uniformly distributed between 0 and 1. We compute a mapping from belief states (summaries of the agent's experiences during this run) to actions.
Reference: [13] <author> Dimitri P. Bertsekas. </author> <title> Dynamic Programming: Deterministic and Stochastic Models. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1987. </year>
Reference-contexts: The reward function specifies expected instantaneous reward as a function of the current state and action. The model is Markov if the state transitions are independent of any previous environment states or agent actions. There are many good references to MDP models <ref> [10, 13, 48, 90] </ref>. Although general MDPs may have infinite (even uncountable) state and action spaces, we will only discuss methods for solving finite-state and finite-action problems. <p> It can be determined by a simple iterative algorithm called value iteration that can be shown to converge to the correct V fl values <ref> [10, 13] </ref>. initialize V (s) arbitrarily loop until policy good enough loop for s 2 S loop for a 2 A Q (s; a) := R (s; a) + fl s 0 2S T (s; a; s 0 )V (s 0 ) end loop end loop It is not obvious when <p> Puterman [90] discusses another stopping criterion, based on the span semi-norm, which may result in earlier termination. Another important result is that the greedy policy is guaranteed to be optimal in some finite number of steps even though the value function may not have converged <ref> [13] </ref>. And in practice, the greedy policy is often optimal long before the value function has converged. Value iteration is very flexible.
Reference: [14] <author> Dimitri P. Bertsekas. </author> <title> Dynamic Programming and Optimal Control. </title> <publisher> Athena Scientific, </publisher> <address> Belmont, Massachusetts, </address> <year> 1995. </year> <note> Volumes 1 and 2. </note>
Reference-contexts: in which the agent is supposed to take actions that optimize its long-run average reward: lim E ( h t=0 Such a policy is referred to as a gain optimal policy; it can be seen as the limiting case of the infinite-horizon discounted model as the discount factor approaches 1 <ref> [14] </ref>. One problem with this criterion is that there is no way to distinguish between two policies, one of which gains a large amount of reward in the initial phases and the other of which does not. <p> In addition, Bertsekas presents a Q-learning-like algorithm for average-case reward in his new textbook <ref> [14] </ref>. Although this recent work provides a much needed theoretical foundation to this area of reinforcement learning, many important problems remain unsolved. 5.
Reference: [15] <author> Dimitri P. Bertsekas and D. A. Casta~non. </author> <title> Adaptive aggregation for infinite horizon dynamic programming. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 34(6) </volume> <pages> 589-598, </pages> <year> 1989. </year>
Reference-contexts: Multigrid methods can be used to quickly seed a good initial approximation to a high resolution value function by initially performing value iteration at a coarser resolution [93]. State aggregation works by collapsing groups of states to a single meta-state solving the abstracted problem <ref> [15] </ref>. 3.2.4 Computational Complexity Value iteration works by producing successive approximations of the optimal value function. Each iteration can be performed in O (jAjjSj 2 ) steps, or faster if there is sparsity in the transition function.
Reference: [16] <author> Dimitri P. Bertsekas and John N. Tsitsiklis. </author> <title> Parallel and Distributed Computation: Numerical Methods. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1989. </year>
Reference-contexts: Value iteration is very flexible. The assignments to V need not be done in strict order as shown above, but instead can occur asynchronously in parallel provided that the value of every state gets updated infinitely often on an infinite run. These issues are treated extensively by Bertsekas <ref> [16] </ref>, who also proves convergence results. Updates based on Equation 1 are known as full backups since they make use of information from all possible successor states.
Reference: [17] <author> G. E. P. Box and N. R. Draper. </author> <title> Empirical Model-Building and Response Surfaces. </title> <publisher> Wiley, </publisher> <year> 1987. </year>
Reference-contexts: Other payoff distributions can be handled using their associated statistics or with nonparametric methods. The method works very well in empirical trials. It is also related to a certain class of statistical techniques known as experiment design methods <ref> [17] </ref>, which are used for comparing multiple treatments (for example, fertilizers or drugs) to determine which treatment (if any) is best in as small a set of experiments as possible. 2.3 More General Problems When there are multiple states, but reinforcement is still immediate, then any of the above solutions can
Reference: [18] <author> Justin A. Boyan and Andrew W. Moore. </author> <title> Generalization in reinforcement learning: Safely approximating the value function. </title> <editor> In G. Tesauro, D. S. Touretzky, and T. K. Leen, editors, </editor> <booktitle> Advances in Neural Information Processing Systems 7, </booktitle> <address> Cambridge, MA, 1995. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Here, a function approximator is used to represent the value function by mapping a state description to a value. 257 Kaelbling, Littman, & Moore Many reseachers have experimented with this approach: Boyan and Moore <ref> [18] </ref> used local memory-based methods in conjunction with value iteration; Lin [59] used backpropagation networks for Q-learning; Watkins [128] used CMAC for Q-learning; Tesauro [118, 120] used backpropagation for learning the value function in backgammon (described in Section 8.1); Zhang and Dietterich [136] used backpropagation and T D () to learn <p> This guarantee no longer holds when generalization is used. These issues are discussed by Boyan and Moore <ref> [18] </ref>, who give some simple examples of value function errors growing arbitrarily large when generalization is used with value iteration. <p> Several recent results [42, 126] show how the appropriate choice of function approximator can guarantee convergence, though not necessarily to the optimal values. Baird's residual gradient technique [6] provides guaranteed convergence to locally optimal solutions. Perhaps the gloominess of these counter-examples is misplaced. Boyan and Moore <ref> [18] </ref> report that their counter-examples can be made to work with problem-specific hand-tuning despite the unreliability of untuned algorithms that provably converge in discrete domains. Sutton [113] shows how modified versions of Boyan and Moore's examples can converge successfully.
Reference: [19] <author> D. Burghes and A. Graham. </author> <title> Introduction to Control Theory including Optimal Control. </title> <publisher> Ellis Horwood, </publisher> <year> 1980. </year>
Reference-contexts: This measure is known as regret [12]. It penalizes mistakes wherever they occur during the run. Unfortunately, results concerning the regret of algorithms are quite hard to obtain. 241 Kaelbling, Littman, & Moore 1.4 Reinforcement Learning and Adaptive Control Adaptive control <ref> [19, 112] </ref> is also concerned with algorithms for improving a sequence of decisions from experience. Adaptive control is a much more mature discipline that concerns itself with dynamic systems in which states and actions are vectors and system dynamics are smooth: linear or locally linearizable around a desired trajectory.
Reference: [20] <author> Anthony R. Cassandra, Leslie Pack Kaelbling, and Michael L. Littman. </author> <title> Acting optimally in partially observable stochastic domains. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <address> Seattle, WA, </address> <year> 1994. </year>
Reference-contexts: POMDP Approach Another strategy consists of using hidden Markov model (HMM) techniques to learn a model of the environment, including the hidden state, then to use that model to construct a perfect memory controller <ref> [20, 67, 79] </ref>. Chrisman [22] showed how the forward-backward algorithm for learning HMMs could be adapted to learning POMDPs. He, and later McCallum [75], also gave heuristic state-splitting rules to attempt to learn the smallest possible model for a given environment. <p> A standard approach from the operations-research literature is to solve for the optimal policy (or a close approximation thereof) based on its representation as a piecewise-linear and convex function over the belief space. This method is computationally intractable, but may serve as inspiration for methods that make further approximations <ref> [20, 65] </ref>. 8. Reinforcement Learning Applications One reason that reinforcement learning is popular is that is serves as a theoretical tool for studying the principles of agents learning to act.
Reference: [21] <author> David Chapman and Leslie Pack Kaelbling. </author> <title> Input generalization in delayed reinforcement learning: An algorithm and performance comparisons. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence, </booktitle> <address> Sydney, Australia, </address> <year> 1991. </year>
Reference-contexts: Decision Trees In environments that are characterized by a set of boolean or discrete-valued variables, it is possible to learn compact decision trees for representing Q values. The G-learning algorithm <ref> [21] </ref>, works as follows. It starts by assuming that no partitioning is necessary and tries to learn Q values for the entire environment as if it were one state.
Reference: [22] <author> Lonnie Chrisman. </author> <title> Reinforcement learning with perceptual aliasing: The perceptual distinctions approach. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 183-188, </pages> <address> San Jose, CA, </address> <year> 1992. </year> <note> AAAI Press. 270 Reinforcement Learning: A Survey </note>
Reference-contexts: POMDP Approach Another strategy consists of using hidden Markov model (HMM) techniques to learn a model of the environment, including the hidden state, then to use that model to construct a perfect memory controller [20, 67, 79]. Chrisman <ref> [22] </ref> showed how the forward-backward algorithm for learning HMMs could be adapted to learning POMDPs. He, and later McCallum [75], also gave heuristic state-splitting rules to attempt to learn the smallest possible model for a given environment. <p> Now we are left with the problem of finding a policy mapping belief states into action. This problem can be formulated as an MDP, but it is difficult to solve using the techniques described earlier, because the input space is continuous. Chrisman's approach <ref> [22] </ref> does not take into account future uncertainty, but yields a policy after a small amount of computation.
Reference: [23] <author> Lonnie Chrisman and Michael Littman. </author> <title> Hidden state and short-term memory, 1993. Presentation at Reinforcement Learning Workshop, </title> <booktitle> Machine Learning Conference. </booktitle>
Reference-contexts: But how well can it do? The resulting problem is not Markovian, and Q-learning cannot be guaranteed to converge. Small breaches of the Markov requirement are well handled by Q-learning, but it is possible to construct simple environments that cause Q-learning to oscillate <ref> [23] </ref>. It is possible to use a model-based approach, however; act according to some policy and gather statistics about the transitions between observations, then solve for the optimal policy based on those observations.
Reference: [24] <author> Pawel Cichosz and Jan J. Mulawka. </author> <title> Fast and efficient reinforcement learning with truncated temporal differences. </title> <editor> In Armand Prieditis and Stuart Russell, editors, </editor> <booktitle> Proceedings of the Twelfth International Conference on Machine Learning, </booktitle> <pages> pages 99-107, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: It is computationally more expensive to execute the general T D (), though it often converges considerably faster for large [30, 32]. There has been some recent work on making the updates more efficient <ref> [24] </ref> and on changing the definition to make T D () more consistent with the certainty-equivalent method [108], which is discussed in Section 5.1. 4.2 Q-learning The work of the two components of AHC can be accomplished in a unified manner by Watkins' Q-learning algorithm [128, 129].
Reference: [25] <author> W. S. Cleveland and S. J. Delvin. </author> <title> Locally weighted regression: An approach to regression analysis by local fitting. </title> <journal> Journal of the American Statistical Association, </journal> <volume> 83(403) </volume> <pages> 596-610, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: A typical human learning the task requires an order of magnitude more practice to achieve proficiency at mere tens of hits. The juggling robot learned a world model from experience, which was generalized to unvisited states by a function approximation scheme known as locally weighted regression <ref> [25, 82] </ref>. 265 Kaelbling, Littman, & Moore Training Games Hidden Units Results Basic Poor TD 1.0 300,000 80 Lost by 13 points in 51 games TD 2.0 800,000 40 Lost by 7 points in 38 games TD 2.1 1,500,000 80 Lost by 1 point in 40 games Table 2: TD-Gammon's performance
Reference: [26] <author> Dave Cliff and Susi Ross. </author> <title> Adding temporary memory to ZCS. </title> <booktitle> Adaptive Behavior, </booktitle> <volume> 3(2) </volume> <pages> 101-150, </pages> <year> 1994. </year>
Reference-contexts: In spite of some early successes, the original design does not appear to handle partially observed environments robustly. Recently, this approach has been reexamined using insights from the reinforcement-learning literature, with some success. Dorigo did a comparative study of Q-learning and classifier systems [36]. Cliff and Ross <ref> [26] </ref> start with Wilson's zeroth-level classifier system [135] and add one and two-bit memory registers. They find that, although their system can learn to use short-term memory registers effectively, the approach is unlikely to scale to more complex environments.
Reference: [27] <author> Anne Condon. </author> <title> The complexity of stochastic games. </title> <journal> Information and Computation, </journal> <volume> 96(2) </volume> <pages> 203-224, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Each iteration can be performed in O (jAjjSj 2 ) steps, or faster if there is sparsity in the transition function. However, the number of iterations required can grow exponentially in the discount factor <ref> [27] </ref>; as the discount factor approaches 1, the decisions must be based on results that happen farther and farther into the future. In practice, policy iteration converges in fewer iterations than value iteration, although the per-iteration costs of O (jAjjSj 2 + jSj 3 ) can be prohibitive.
Reference: [28] <author> Jonathan Connell and Sridhar Mahadevan. </author> <title> Rapid task learning for real robots. In Robot Learning. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: Most interesting examples of robotic reinforcement learning employ this technique to some extent <ref> [28] </ref>. reflexes: One thing that keeps agents that know nothing from learning anything is that they have a hard time even finding the interesting parts of the space; they wander around at random never getting near the goal, or they are always "killed" immediately.
Reference: [29] <author> R. H. Crites and A. G. Barto. </author> <title> Improving elevator performance using reinforcement learning. </title> <editor> In D. Touretzky, M. Mozer, and M. Hasselmo, editors, </editor> <booktitle> Neural Information Processing Systems 8, </booktitle> <year> 1996. </year>
Reference-contexts: The performance of the Q-learned policies were almost as good as a simple hand-crafted controller for the job. 4. Q-learning has been used in an elevator dispatching task <ref> [29] </ref>. The problem, which has been implemented in simulation only at this stage, involved four elevators servicing ten floors. The objective was to minimize the average squared wait time for passengers, discounted into future time.
Reference: [30] <author> Peter Dayan. </author> <title> The convergence of TD() for general . Machine Learning, </title> <booktitle> 8(3) </booktitle> <pages> 341-362, </pages> <year> 1992. </year>
Reference-contexts: Note that we can update the eligibility online as follows: e (s) := fle (s) + 1 if s = current state fle (s) otherwise . It is computationally more expensive to execute the general T D (), though it often converges considerably faster for large <ref> [30, 32] </ref>.
Reference: [31] <author> Peter Dayan and Geoffrey E. Hinton. </author> <title> Feudal reinforcement learning. </title> <editor> In S. J. Hanson, J. D. Cowan, and C. L. Giles, editors, </editor> <booktitle> Advances in Neural Information Processing Systems 5, </booktitle> <address> San Mateo, CA, 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Lin [60] and Dorigo and Colombetti [38, 37] both used this approach, first training the behaviors and then training the gating function. Many of the other hierarchical learning methods can be cast in this framework. 6.3.1 Feudal Q-learning Feudal Q-learning <ref> [31, 128] </ref> involves a hierarchy of learning modules. In the simplest case, there is a high-level master and a low-level slave. The master receives reinforcement from the external environment. Its actions consist of commands that it can give to the low-level learner.
Reference: [32] <author> Peter Dayan and Terrence J. Sejnowski. </author> <title> TD() converges with probability 1. </title> <journal> Machine Learning, </journal> <volume> 14(3), </volume> <year> 1994. </year>
Reference-contexts: Note that we can update the eligibility online as follows: e (s) := fle (s) + 1 if s = current state fle (s) otherwise . It is computationally more expensive to execute the general T D (), though it often converges considerably faster for large <ref> [30, 32] </ref>.
Reference: [33] <author> Thomas Dean, Leslie Pack Kaelbling, Jak Kirman, and Ann Nicholson. </author> <title> Planning with deadlines in stochastic domains. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <address> Washington, DC, </address> <year> 1993. </year>
Reference-contexts: By taking into account the start state, it can find a short path from the start to the goal, without necessarily visiting the rest of the state space. The Plexus planning system <ref> [33, 55] </ref> exploits a similar intuition. It starts by making an approximate version of the MDP which is much smaller than the original one. The approximate MDP contains a set of states, called the envelope, that includes the agent's current state and the goal state, if there is one.
Reference: [34] <author> F. D'Epenoux. </author> <title> A probabilistic production and inventory problem. </title> <journal> Management Science, </journal> <volume> 10 </volume> <pages> 98-108, </pages> <year> 1963. </year>
Reference-contexts: Modified policy iteration [91] seeks a trade-off between cheap and effective iterations and is preferred by some practictioners [96]. 248 Reinforcement Learning: A Survey Linear programming [105] is an extremely general problem, and MDPs can be solved by general-purpose linear-programming packages <ref> [35, 34, 46] </ref>. An advantage of this approach is that commercial-quality linear-programming packages are available, although the time and space requirements can still be quite high.
Reference: [35] <author> Cyrus Derman. </author> <title> Finite State Markovian Decision Processes. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1970. </year>
Reference-contexts: Modified policy iteration [91] seeks a trade-off between cheap and effective iterations and is preferred by some practictioners [96]. 248 Reinforcement Learning: A Survey Linear programming [105] is an extremely general problem, and MDPs can be solved by general-purpose linear-programming packages <ref> [35, 34, 46] </ref>. An advantage of this approach is that commercial-quality linear-programming packages are available, although the time and space requirements can still be quite high.
Reference: [36] <author> M. Dorigo and H. Bersini. </author> <title> A comparison of q-learning and classifier systems. </title> <booktitle> In From Animals to Animats: Proceedings of the Third International Conference on the Simulation of Adaptive Behavior, </booktitle> <address> Brighton, UK, </address> <year> 1994. </year>
Reference-contexts: In spite of some early successes, the original design does not appear to handle partially observed environments robustly. Recently, this approach has been reexamined using insights from the reinforcement-learning literature, with some success. Dorigo did a comparative study of Q-learning and classifier systems <ref> [36] </ref>. Cliff and Ross [26] start with Wilson's zeroth-level classifier system [135] and add one and two-bit memory registers. They find that, although their system can learn to use short-term memory registers effectively, the approach is unlikely to scale to more complex environments.
Reference: [37] <author> M. Dorigo and M. Colombetti. </author> <title> Robot shaping: Developing autonomous agents through learning. </title> <journal> Artificial Intelligence, </journal> <volume> 71(2) </volume> <pages> 321-370, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: Mahadevan and Connell [72] used the dual approach: they fixed the gating function, and supplied reinforcement functions for the individual behaviors, which were learned. Lin [60] and Dorigo and Colombetti <ref> [38, 37] </ref> both used this approach, first training the behaviors and then training the gating function. Many of the other hierarchical learning methods can be cast in this framework. 6.3.1 Feudal Q-learning Feudal Q-learning [31, 128] involves a hierarchy of learning modules. <p> They find that, although their system can learn to use short-term memory registers effectively, the approach is unlikely to scale to more complex environments. Dorigo and Colombetti applied classifier systems to a moderately complex problem of learning robot behavior from immediate reinforcement <ref> [38, 37] </ref>. Finite-history-window Approach One way to restore the Markov property is to allow decisions to be based on the history of recent observations and perhaps actions. Lin and Mitchell [62] used a fixed-width finite history window to learn a pole balancing task. <p> Shaping has been used in supervised-learning systems, and can be used to train hierarchical reinforcement-learning systems from the bottom up [59], and to alleviate problems of delayed reinforcement by decreasing the delay until the problem is well understood <ref> [37, 38] </ref>. local reinforcement signals: Whenever possible, agents should be given reinforcement signals that are local.
Reference: [38] <editor> Marco Dorigo. </editor> <title> Alecsys and the AutonoMouse: Learning to control a real robot by distributed classifier systems. </title> <journal> Machine Learning, </journal> <volume> 19, </volume> <year> 1995. </year>
Reference-contexts: Mahadevan and Connell [72] used the dual approach: they fixed the gating function, and supplied reinforcement functions for the individual behaviors, which were learned. Lin [60] and Dorigo and Colombetti <ref> [38, 37] </ref> both used this approach, first training the behaviors and then training the gating function. Many of the other hierarchical learning methods can be cast in this framework. 6.3.1 Feudal Q-learning Feudal Q-learning [31, 128] involves a hierarchy of learning modules. <p> They find that, although their system can learn to use short-term memory registers effectively, the approach is unlikely to scale to more complex environments. Dorigo and Colombetti applied classifier systems to a moderately complex problem of learning robot behavior from immediate reinforcement <ref> [38, 37] </ref>. Finite-history-window Approach One way to restore the Markov property is to allow decisions to be based on the history of recent observations and perhaps actions. Lin and Mitchell [62] used a fixed-width finite history window to learn a pole balancing task. <p> Shaping has been used in supervised-learning systems, and can be used to train hierarchical reinforcement-learning systems from the bottom up [59], and to alleviate problems of delayed reinforcement by decreasing the delay until the problem is well understood <ref> [37, 38] </ref>. local reinforcement signals: Whenever possible, agents should be given reinforcement signals that are local.
Reference: [39] <author> Claude-Nicolas Fiechter. </author> <title> Efficient reinforcement learning. </title> <booktitle> In Proceedings of the Seventh Annual ACM Conference on Computational Learning Theory, </booktitle> <pages> pages 88-97. </pages> <institution> Association of Computing Machinery, </institution> <year> 1994. </year> <note> 271 Kaelbling, Littman, & Moore </note>
Reference-contexts: That is usually an inappropriate view for an agent with a long existence in a complex environment. In spite of the mismatch between embedded reinforcement learning and the train/test perspective, Fiechter <ref> [39] </ref> provides a PAC analysis for Q-learning (described in Section 4.2) that sheds some light on the connection between the two views. Measures related to speed of learning have an additional weakness.
Reference: [40] <author> J. C. Gittins. </author> <title> Multi-armed Bandit Allocation Indices. Wiley-Interscience series in systems and optimization. </title> <publisher> Wiley, </publisher> <address> Chichester, NY, </address> <year> 1989. </year>
Reference-contexts: fl values in this way for all attainable belief states is linear in the number of belief states times actions, and thus exponential in the horizon. 2.1.2 Gittins Allocation Indices Gittins gives an "allocation index" method for finding the optimal choice of action at each step in k-armed bandit problems <ref> [40] </ref>. The technique only applies under the discounted expected reward criterion. For each action, consider the number of times it has been chosen, n, versus the number of times it has paid off, w.
Reference: [41] <author> D. Goldberg. </author> <title> Genetic algorithms in search, optimization, and machine learning. </title> <publisher> Addison-Wesley, </publisher> <address> MA, </address> <year> 1989. </year>
Reference-contexts: This approach has been used by a number of researchers [77, 62, 103]. It seems to work effectively on simple problems, but can suffer from convergence to local optima on more complex problems. Classifier Systems Classifier systems <ref> [47, 41] </ref> were explicitly developed to solve problems with delayed reward, including those requiring short-term memory. The internal mechanism typically used to pass reward back through chains of decisions, called the bucket brigade algorithm, bears a close resemblance to Q-learning.
Reference: [42] <author> Geoffrey J. Gordon. </author> <title> Stable function approximation in dynamic programming. </title> <editor> In Armand Prieditis and Stuart Russell, editors, </editor> <booktitle> Proceedings of the Twelfth International Conference on Machine Learning, </booktitle> <pages> pages 261-268, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Thrun and Schwartz [123] theorize that function approximation of value functions is also dangerous because the errors in value functions due to generalization can become compounded by the "max" operator in the definition of the value function. Several recent results <ref> [42, 126] </ref> show how the appropriate choice of function approximator can guarantee convergence, though not necessarily to the optimal values. Baird's residual gradient technique [6] provides guaranteed convergence to locally optimal solutions. Perhaps the gloominess of these counter-examples is misplaced.
Reference: [43] <author> Vijay Gullapalli. </author> <title> A stochastic reinforcement learning algorithm for learning real-valued functions. </title> <booktitle> Neural Networks, </booktitle> <volume> 3 </volume> <pages> 671-692, </pages> <year> 1990. </year>
Reference-contexts: It begins with intense exploration to find a route out of the almost entirely enclosed start region. Having eventually reached a sufficiently high resolution, it discovers the gap and proceeds greedily towards the goal, only to be temporarily blocked by the goal's barrier region. (c) The second trial. Gullapalli <ref> [43, 44] </ref> has developed a "neural" reinforcement-learning unit for use in continuous action spaces. The unit generates actions with a normal distribution; it adjusts the mean and variance based on previous experience.
Reference: [44] <author> Vijay Gullapalli. </author> <title> Reinforcement learning and its application to control. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <address> Amherst, MA, </address> <year> 1992. </year>
Reference-contexts: It begins with intense exploration to find a route out of the almost entirely enclosed start region. Having eventually reached a sufficiently high resolution, it discovers the gap and proceeds greedily towards the goal, only to be temporarily blocked by the goal's barrier region. (c) The second trial. Gullapalli <ref> [43, 44] </ref> has developed a "neural" reinforcement-learning unit for use in continuous action spaces. The unit generates actions with a normal distribution; it adjusts the mean and variance based on previous experience.
Reference: [45] <author> Ernest R. Hilgard and Gordon H. Bower. </author> <title> Theories of Learning. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <note> fourth edition, </note> <year> 1975. </year>
Reference-contexts: The probabilities of taking different actions would be adjusted according to their previous successes and failures. An example, which stands among a set of algorithms independently developed in the mathematical psychology literature <ref> [45] </ref>, is the linear reward-inaction algorithm. Let p i be the agent's probability of taking action i. 243 Kaelbling, Littman, & Moore made when the previous action resulted in a reward of 1; the bottom row shows transitions after a reward of 0. <p> The necessary bias can come in a variety of forms, including the following: shaping: The technique of shaping is used in training animals <ref> [45] </ref>; a teacher presents very simple problems to solve first, then gradually exposes the learner to more complex problems.
Reference: [46] <author> A. J. Hoffman and R. M. Karp. </author> <title> On nonterminating stochastic games. </title> <journal> Management Science, </journal> <volume> 12 </volume> <pages> 359-370, </pages> <year> 1966. </year>
Reference-contexts: Modified policy iteration [91] seeks a trade-off between cheap and effective iterations and is preferred by some practictioners [96]. 248 Reinforcement Learning: A Survey Linear programming [105] is an extremely general problem, and MDPs can be solved by general-purpose linear-programming packages <ref> [35, 34, 46] </ref>. An advantage of this approach is that commercial-quality linear-programming packages are available, although the time and space requirements can still be quite high.
Reference: [47] <author> John H. Holland. </author> <title> Adaptation in Natural and Artificial Systems. </title> <publisher> University of Michigan Press, </publisher> <address> Ann Arbor, MI, </address> <year> 1975. </year>
Reference-contexts: This approach has been used by a number of researchers [77, 62, 103]. It seems to work effectively on simple problems, but can suffer from convergence to local optima on more complex problems. Classifier Systems Classifier systems <ref> [47, 41] </ref> were explicitly developed to solve problems with delayed reward, including those requiring short-term memory. The internal mechanism typically used to pass reward back through chains of decisions, called the bucket brigade algorithm, bears a close resemblance to Q-learning.
Reference: [48] <author> Ronald A. Howard. </author> <title> Dynamic Programming and Markov Processes. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1960. </year>
Reference-contexts: The reward function specifies expected instantaneous reward as a function of the current state and action. The model is Markov if the state transitions are independent of any previous environment states or agent actions. There are many good references to MDP models <ref> [10, 13, 48, 90] </ref>. Although general MDPs may have infinite (even uncountable) state and action spaces, we will only discuss methods for solving finite-state and finite-action problems.
Reference: [49] <author> Tommi Jaakkola, Michael I. Jordan, and Satinder P. Singh. </author> <title> On the convergence of stochastic iterative dynamic programming algorithms. </title> <journal> Neural Computation, </journal> <volume> 6(6), </volume> <month> November </month> <year> 1994. </year>
Reference-contexts: If each action is executed in each state an infinite number of times on an infinite run and ff is decayed appropriately, the Q values will converge with probability 1 to Q fl <ref> [128, 125, 49] </ref>. Q-learning can also be extended to update states that occurred more than one step previously, as in T D () [88].
Reference: [50] <author> Tommi Jaakkola, Satinder Pal Singh, and Michael I. Jordan. </author> <title> Monte-carlo reinforcement learning in non-Markovian decision problems. </title> <editor> In G. Tesauro, D. S. Touretzky, and T. K. Leen, editors, </editor> <booktitle> Advances in Neural Information Processing Systems 7, </booktitle> <address> Cambridge, MA, 1995. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Mahadevan [70] surveyed model-based average-reward algorithms from a reinforcement-learning perspective and found several difficulties with existing algorithms. In particular, he showed that existing reinforcement-learning algorithms for average reward (and some dynamic programming algorithms) do not always produce bias-optimal policies. Jaakkola, Jordan and Singh <ref> [50] </ref> described an average-reward learning algorithm with guaranteed convergence properties. <p> If there is randomness in the agent's actions, it will not get stuck in the hall forever. Jaakkola, Singh, and Jordan <ref> [50] </ref> have developed an algorithm for finding locally-optimal stochastic policies, but finding a globally optimal policy is still NP hard.
Reference: [51] <author> Leslie Pack Kaelbling. </author> <title> Hierarchical learning in stochastic domains: Preliminary results. </title> <booktitle> In Proceedings of the Tenth International Conference on Machine Learning, </booktitle> <address> Amherst, MA, 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Kaelbling's HDG algorithm <ref> [51] </ref> uses a hierarchical approach to solving problems when goals of achievement (the agent should get to a particular state as quickly as possible) are given to an agent dynamically. The HDG algorithm works by analogy with navigation in a harbor.
Reference: [52] <author> Leslie Pack Kaelbling. </author> <title> Learning in Embedded Systems. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1993. </year>
Reference-contexts: This still has a measurable danger of starving an optimal but unlucky action, but the risk of this can be made arbitrarily small. Techniques like this have been used in several reinforcement learning algorithms including the interval exploration method <ref> [52] </ref> (described shortly), the exploration bonus in Dyna [116], curiosity-driven exploration [102], and the exploration mechanism in prioritized sweeping [83]. 244 Reinforcement Learning: A Survey 2.2.2 Randomized Strategies Another simple exploration strategy is to take the action with the best estimated expected reward by default, but with probability p, choose an <p> It may also converge unnecessarily slowly unless the temperature schedule is manually tuned with great care. 2.2.3 Interval-based Techniques Exploration is often more efficient when it is based on second-order information about the certainty or variance of the estimated values of actions. Kaelbling's interval estimation algorithm <ref> [52] </ref> stores statistics for each action a i : w i is the number of successes and n i the number of trials. <p> In general, however, that approach suffers from the problem of very unreliable reinforcement: if a single learner generates an inappropriate output bit, all of the learners receive a low reinforcement value. The cascade method <ref> [52] </ref> allows a collection of learners to be trained collectively to generate appropriate joint outputs; it is considerably more reliable, but can require additional computational effort. 6.1.2 Delayed Reward Another method to allow reinforcement-learning techniques to be applied in large state spaces is modeled on value iteration and Q-learning.
Reference: [53] <author> Leslie Pack Kaelbling. </author> <title> Associative reinforcement learning: A generate and test algorithm. </title> <journal> Machine Learning, </journal> <volume> 15(3), </volume> <year> 1994. </year>
Reference-contexts: Taking inspiration from mainstream machine learning work, Kaelbling developed two algorithms for learning boolean functions from reinforcement: one uses the bias of k-DNF to drive the generalization process [54]; the other searches the space of syntactic descriptions of functions using a simple generate-and-test method <ref> [53] </ref>. The restriction to a single boolean output makes these techniques difficult to apply. In very benign learning situations, it is possible to extend this approach to use a collection of learners to independently learn the individual bits that make up a complex output.
Reference: [54] <author> Leslie Pack Kaelbling. </author> <title> Associative reinforcement learning: Functions in k-DNF. </title> <journal> Machine Learning, </journal> <volume> 15(3), </volume> <year> 1994. </year>
Reference-contexts: A boolean function has a vector of boolean inputs and a single boolean output. Taking inspiration from mainstream machine learning work, Kaelbling developed two algorithms for learning boolean functions from reinforcement: one uses the bias of k-DNF to drive the generalization process <ref> [54] </ref>; the other searches the space of syntactic descriptions of functions using a simple generate-and-test method [53]. The restriction to a single boolean output makes these techniques difficult to apply.
Reference: [55] <author> Jak Kirman. </author> <title> Predicting Real-Time Planner Performance by Domain Characterization. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Brown University, </institution> <year> 1994. </year>
Reference-contexts: By taking into account the start state, it can find a short path from the start to the goal, without necessarily visiting the rest of the state space. The Plexus planning system <ref> [33, 55] </ref> exploits a similar intuition. It starts by making an approximate version of the MDP which is much smaller than the original one. The approximate MDP contains a set of states, called the envelope, that includes the agent's current state and the goal state, if there is one.
Reference: [56] <author> Sven Koenig and Reid G. Simmons. </author> <title> Complexity analysis of real-time reinforcement learning. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 99-105, </pages> <address> Menlo Park, California, 1993. </address> <publisher> AAAI Press/MIT Press. </publisher>
Reference-contexts: the learning phase and the acting phase. * How should it gather data about the environment initially? Random exploration might be dangerous, and in some environments is an immensely inefficient method of gathering data, requiring exponentially more data [130] than a system that interleaves experience gathering with policy-building more tightly <ref> [56] </ref>. See Figure 5 for an example. * The possibility of changes in the environment is also problematic.
Reference: [57] <author> P. R. Kumar and P. P. Varaiya. </author> <title> Stochastic Systems: Estimation, Identification, and Adaptive Control. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1986. </year> <title> 272 Reinforcement Learning: A Survey </title>
Reference-contexts: This method is known as certainty equivlance <ref> [57] </ref>.
Reference: [58] <author> C. C. Lee. </author> <title> A self learning rule-based controller employing approximate reasoning and neural net concepts. </title> <journal> International Journal of Intelligent Systems, </journal> <volume> 6(1) </volume> <pages> 71-93, </pages> <year> 1991. </year>
Reference-contexts: Popular techniques include various neural-network methods [94], fuzzy logic <ref> [11, 58] </ref>. CMAC [3], and local memory-based methods [84], such as generalizations of nearest neighbor methods.
Reference: [59] <author> Long-Ji Lin. </author> <title> Programming robots using reinforcement learning and teaching. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <year> 1991. </year>
Reference-contexts: Here, a function approximator is used to represent the value function by mapping a state description to a value. 257 Kaelbling, Littman, & Moore Many reseachers have experimented with this approach: Boyan and Moore [18] used local memory-based methods in conjunction with value iteration; Lin <ref> [59] </ref> used backpropagation networks for Q-learning; Watkins [128] used CMAC for Q-learning; Tesauro [118, 120] used backpropagation for learning the value function in backgammon (described in Section 8.1); Zhang and Dietterich [136] used backpropagation and T D () to learn good strategies for job-shop scheduling. <p> Shaping has been used in supervised-learning systems, and can be used to train hierarchical reinforcement-learning systems from the bottom up <ref> [59] </ref>, and to alleviate problems of delayed reinforcement by decreasing the delay until the problem is well understood [37, 38]. local reinforcement signals: Whenever possible, agents should be given reinforcement signals that are local. <p> In applications in which it is possible to compute a gradient, rewarding the 268 Reinforcement Learning: A Survey agent for taking steps up the gradient, rather than just for achieving the final goal, can speed learning significantly [73]. imitation: An agent can learn by "watching" another agent perform the task <ref> [59] </ref>. For real robots, this requires perceptual abilities that are not yet available.
Reference: [60] <author> Long-Ji Lin. </author> <title> Hierachical learning of robot skills by reinforcement. </title> <booktitle> In Proceedings of the International Conference on Neural Networks, </booktitle> <year> 1993. </year>
Reference-contexts: Mahadevan and Connell [72] used the dual approach: they fixed the gating function, and supplied reinforcement functions for the individual behaviors, which were learned. Lin <ref> [60] </ref> and Dorigo and Colombetti [38, 37] both used this approach, first training the behaviors and then training the gating function. Many of the other hierarchical learning methods can be cast in this framework. 6.3.1 Feudal Q-learning Feudal Q-learning [31, 128] involves a hierarchy of learning modules.
Reference: [61] <author> Long-Ji Lin. </author> <title> Reinforcement Learning for Robots Using Neural Networks. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1993. </year>
Reference-contexts: The second network is trained in a standard supervised mode to estimate r as a function of the input state s. Variations of this approach have been used in a variety of applications <ref> [4, 9, 61, 114] </ref>. REINFORCE Algorithms Williams [131, 132] studied the problem of choosing actions to maximize immedate reward. He identified a broad class of update rules that perform gradient descent on the expected reward and showed how to integrate these rules with backpropagation.
Reference: [62] <author> Long-Ji Lin and Tom M. Mitchell. </author> <title> Memory approaches to reinforcement learning in non-Markovian domains. </title> <type> Technical Report CMU-CS-92-138, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: The network can be trained using backpropagation through time (or some other suitable technique) and learns to retain "history features" to predict value. This approach has been used by a number of researchers <ref> [77, 62, 103] </ref>. It seems to work effectively on simple problems, but can suffer from convergence to local optima on more complex problems. Classifier Systems Classifier systems [47, 41] were explicitly developed to solve problems with delayed reward, including those requiring short-term memory. <p> Dorigo and Colombetti applied classifier systems to a moderately complex problem of learning robot behavior from immediate reinforcement [38, 37]. Finite-history-window Approach One way to restore the Markov property is to allow decisions to be based on the history of recent observations and perhaps actions. Lin and Mitchell <ref> [62] </ref> used a fixed-width finite history window to learn a pole balancing task. McCallum [76] describes the "utile suffix memory" which learns a variable-width window that serves simultaneously as a model of the environment and a finite-memory policy.
Reference: [63] <author> Michael L. Littman. </author> <title> Markov games as a framework for multi-agent reinforcement learning. </title> <booktitle> In Proceedings of the Eleventh International Conference on Machine Learning, </booktitle> <pages> pages 157-163, </pages> <address> San Francisco, CA, 1994. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Nonetheless, reinforcement-learning algorithms can be adapted to work for a very general class of games <ref> [63] </ref> and many researchers have used reinforcement learning in these environments. One application, spectacularly far ahead of its time, was Samuel's checkers playing system [99].
Reference: [64] <author> Michael L. Littman. </author> <title> Memoryless policies: Theoretical limitations and practical results. </title> <editor> In Dave Cliff, Philip Husbands, Jean-Arcady Meyer, and Stewart W. Wilson, editors, </editor> <booktitle> From Animals to Animats 3: Proceedings of the Third International Conference on Simulation of Adaptive Behavior, </booktitle> <address> Cambridge, MA, 1994. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: This approach may yield plausible results in some cases, but again, there are no guarantees. It is reasonable, though, to ask what the optimal policy (mapping from observations to actions, in this case) is. It is NP-hard <ref> [64] </ref> to find this mapping, and even the best mapping can have very poor performance.
Reference: [65] <author> Michael L. Littman, Anthony Cassandra, and Leslie Pack Kaelbling. </author> <title> Learning policies for partially observable environments: Scaling up. </title> <editor> In Armand Prieditis and Stuart Russell, editors, </editor> <booktitle> Proceedings of the Twelfth International Conference on Machine Learning, </booktitle> <pages> pages 362-370, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: A standard approach from the operations-research literature is to solve for the optimal policy (or a close approximation thereof) based on its representation as a piecewise-linear and convex function over the belief space. This method is computationally intractable, but may serve as inspiration for methods that make further approximations <ref> [20, 65] </ref>. 8. Reinforcement Learning Applications One reason that reinforcement learning is popular is that is serves as a theoretical tool for studying the principles of agents learning to act.
Reference: [66] <author> Michael L. Littman, Thomas L. Dean, and Leslie Pack Kaelbling. </author> <title> On the complexity of solving Markov decision problems. </title> <booktitle> In Proceedings of the Eleventh Annual Conference on Uncertainty in Artificial Intelligence (UAI-95), </booktitle> <address> Montreal, Quebec, Canada, </address> <year> 1995. </year>
Reference-contexts: However, in the worst case the number of iterations grows polynomially in 1=(1 fl), so the convergence rate slows considerably as the discount factor approaches 1 <ref> [66] </ref>. 247 Kaelbling, Littman, & Moore 3.2.2 Policy Iteration The policy iteration algorithm manipulates the policy directly, rather than finding it indirectly via the optimal value function. <p> However, it is an important open question how many iterations policy iteration takes in the worst case. It is known that the running time is pseudopolynomial and that for any fixed discount factor, there is a polynomial bound in the total size of the MDP <ref> [66] </ref>. 3.2.3 Enhancement to Value Iteration and Policy Iteration In practice, value iteration is much faster per iteration, but policy iteration takes fewer iterations. Arguments have been put forth to the effect that each approach is better for large problems. <p> In practice, policy iteration converges in fewer iterations than value iteration, although the per-iteration costs of O (jAjjSj 2 + jSj 3 ) can be prohibitive. There is no known tight worst-case bound available for policy iteration <ref> [66] </ref>. Modified policy iteration [91] seeks a trade-off between cheap and effective iterations and is preferred by some practictioners [96]. 248 Reinforcement Learning: A Survey Linear programming [105] is an extremely general problem, and MDPs can be solved by general-purpose linear-programming packages [35, 34, 46].
Reference: [67] <author> William S. Lovejoy. </author> <title> A survey of algorithmic methods for partially observable Markov decision processes. </title> <journal> Annals of Operations Research, </journal> <volume> 28 </volume> <pages> 47-66, </pages> <year> 1991. </year>
Reference-contexts: POMDP Approach Another strategy consists of using hidden Markov model (HMM) techniques to learn a model of the environment, including the hidden state, then to use that model to construct a perfect memory controller <ref> [20, 67, 79] </ref>. Chrisman [22] showed how the forward-backward algorithm for learning HMMs could be adapted to learning POMDPs. He, and later McCallum [75], also gave heuristic state-splitting rules to attempt to learn the smallest possible model for a given environment.
Reference: [68] <author> Pattie Maes and Rodney A. Brooks. </author> <title> Learning to coordinate behaviors. </title> <booktitle> In Proceedings Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 796-802. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: There is a collection of behaviors that map environment states into low-level actions and a gating function that decides, based on the state of the environment, which behavior's actions should be switched through and actually executed. Maes and Brooks <ref> [68] </ref> used a version of this architecture in which the individual behaviors were fixed a priori and the gating function was learned from reinforcement. Mahadevan and Connell [72] used the dual approach: they fixed the gating function, and supplied reinforcement functions for the individual behaviors, which were learned.
Reference: [69] <author> Sridhar Mahadevan. </author> <title> To discount or not to discount in reinforcement learning: A case study comparing R learning and Q learning. </title> <booktitle> In Proceedings of the Eleventh International Conference on Machine Learning, </booktitle> <pages> pages 164-172, </pages> <address> San Francisco, CA, 1994. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Although his R-learning algorithm seems to exhibit convergence problems for some MDPs, several researchers have found the average-reward criterion closer to the true problem they wish to solve than a discounted criterion and therefore prefer R-learning to Q-learning <ref> [69] </ref>. With that in mind, researchers have studied the problem of learning optimal average-reward policies. Mahadevan [70] surveyed model-based average-reward algorithms from a reinforcement-learning perspective and found several difficulties with existing algorithms.
Reference: [70] <author> Sridhar Mahadevan. </author> <title> Average reward reinforcement learning: Foundations, algorithms, and empirical results. </title> <journal> Machine Learning, </journal> <volume> 22(1), </volume> <year> 1996. </year>
Reference-contexts: With that in mind, researchers have studied the problem of learning optimal average-reward policies. Mahadevan <ref> [70] </ref> surveyed model-based average-reward algorithms from a reinforcement-learning perspective and found several difficulties with existing algorithms. In particular, he showed that existing reinforcement-learning algorithms for average reward (and some dynamic programming algorithms) do not always produce bias-optimal policies.
Reference: [71] <author> Sridhar Mahadevan and Jonathan Connell. </author> <title> Automatic programming of behavior-based robots using reinforcement learning. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <address> Anaheim, CA, </address> <year> 1991. </year>
Reference-contexts: Between each trial, a form of dynamic programming specific to linear control policies and locally linear transitions was used to improve the policy. The form of dynamic programming is known as linear-quadratic-regulator design [97]. 2. Mahadevan and Connell <ref> [71] </ref> discuss a task in which a mobile robot pushes large boxes for extended periods of time. Box-pushing is a well-known difficult robotics problem, characterized by immense uncertainty in the results of actions.
Reference: [72] <author> Sridhar Mahadevan and Jonathan Connell. </author> <title> Scaling reinforcement learning to robotics by exploiting the subsumption architecture. </title> <booktitle> In Proceedings of the Eighth International Workshop on Machine Learning, </booktitle> <pages> pages 328-332, </pages> <year> 1991. </year> <note> 273 Kaelbling, Littman, & Moore </note>
Reference-contexts: Maes and Brooks [68] used a version of this architecture in which the individual behaviors were fixed a priori and the gating function was learned from reinforcement. Mahadevan and Connell <ref> [72] </ref> used the dual approach: they fixed the gating function, and supplied reinforcement functions for the individual behaviors, which were learned. Lin [60] and Dorigo and Colombetti [38, 37] both used this approach, first training the behaviors and then training the gating function.
Reference: [73] <editor> Maja J. Mataric. </editor> <title> Reward functions for accelerated learning. </title> <editor> In W. W. Cohen and H. Hirsh, editors, </editor> <booktitle> Proceedings of the Eleventh International Conference on Machine Learning. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: The robot learned to perform competitively with the performance of a human-programmed solution. Another aspect of this work, mentioned in Section 6.3, was a pre-programmed breakdown of the monolithic task description into a set of lower level tasks to be learned. 266 Reinforcement Learning: A Survey 3. Mataric <ref> [73] </ref> describes a robotics experiment with, from the viewpoint of theoretical reinforcement learning, an unthinkably high dimensional state space, containing many dozens of degrees of freedom. Four mobile robots traveled within an enclosure collecting small disks and transporting them to a destination region. <p> In applications in which it is possible to compute a gradient, rewarding the 268 Reinforcement Learning: A Survey agent for taking steps up the gradient, rather than just for achieving the final goal, can speed learning significantly <ref> [73] </ref>. imitation: An agent can learn by "watching" another agent perform the task [59]. For real robots, this requires perceptual abilities that are not yet available. <p> These problems can be ameliorated by programming a set of "reflexes" that cause the agent to act initially in some way that is reasonable <ref> [73, 107] </ref>. These reflexes can eventually be overridden by more detailed and accurate learned knowledge, but they at least keep the agent alive and pointed in the right direction while it is trying to learn.
Reference: [74] <author> Andrew Kachites McCallum. </author> <title> Reinforcement Learning with Selective Perception and Hidden State. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Rochester, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: This method was able to learn very small representations of the Q function in the presence of an overwhelming number of irrelevant, noisy state attributes. It outperformed Q-learning with backpropagation in a simple video-game environment and was used by McCallum <ref> [74] </ref> (in conjunction with other techniques for dealing with partial observability) to learn behaviors in a complex driving-simulator. It cannot, however, acquire partitions in which attributes are only significant in combination (such as those needed to solve parity problems). <p> McCallum [76] describes the "utile suffix memory" which learns a variable-width window that serves simultaneously as a model of the environment and a finite-memory policy. This system has had excellent results in a very complex driving-simulation domain <ref> [74] </ref>. Ring [92] has a neural-network approach that uses a variable history window, adding history when necessary to disambiguate situations.
Reference: [75] <author> R. Andrew McCallum. </author> <title> Overcoming incomplete perception with utile distinction memory. </title> <booktitle> In Proceedings of the Tenth International Conference on Machine Learning, </booktitle> <pages> pages 190-196, </pages> <address> Amherst, Massachusetts, 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Chrisman [22] showed how the forward-backward algorithm for learning HMMs could be adapted to learning POMDPs. He, and later McCallum <ref> [75] </ref>, also gave heuristic state-splitting rules to attempt to learn the smallest possible model for a given environment.
Reference: [76] <author> R. Andrew McCallum. </author> <title> Instance-based utile distinctions for reinforcement learning with hidden state. </title> <booktitle> In Proceedings of the Twelfth International Conference Machine Learning, </booktitle> <pages> pages 387-395, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Figure 7c shows the second trial, started from a slightly different position. This is a very fast algorithm, learning policies in spaces of up to nine dimensions in less than a minute. The restriction of the current implementation to deterministic environments limits its applicability, however. McCallum <ref> [76] </ref> suggests some related tree-structured methods. 6.2 Generalization over Actions The networks described in Section 6.1.1 generalize over state descriptions presented as inputs. They also produce outputs in a discrete, factored representation and thus could be seen as generalizing over actions as well. <p> Finite-history-window Approach One way to restore the Markov property is to allow decisions to be based on the history of recent observations and perhaps actions. Lin and Mitchell [62] used a fixed-width finite history window to learn a pole balancing task. McCallum <ref> [76] </ref> describes the "utile suffix memory" which learns a variable-width window that serves simultaneously as a model of the environment and a finite-memory policy. This system has had excellent results in a very complex driving-simulation domain [74].
Reference: [77] <author> Lisa Meeden, G. McGraw, and D. Blank. </author> <title> Emergent control and planning in an autonomous vehicle. </title> <editor> In D.S. Touretsky, editor, </editor> <booktitle> Proceedings of the Fifteenth Annual Meeting of the Cognitive Science Society, </booktitle> <pages> pages 735-740. </pages> <publisher> Lawerence Erlbaum Associates, </publisher> <address> Hillsdale, NJ, </address> <year> 1993. </year>
Reference-contexts: The network can be trained using backpropagation through time (or some other suitable technique) and learns to retain "history features" to predict value. This approach has been used by a number of researchers <ref> [77, 62, 103] </ref>. It seems to work effectively on simple problems, but can suffer from convergence to local optima on more complex problems. Classifier Systems Classifier systems [47, 41] were explicitly developed to solve problems with delayed reward, including those requiring short-term memory.
Reference: [78] <author> Jose del R. Millan. </author> <title> Rapid, safe, and incremental learning of navigation strategies. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 26(3), </volume> <year> 1996. </year>
Reference-contexts: These reflexes can eventually be overridden by more detailed and accurate learned knowledge, but they at least keep the agent alive and pointed in the right direction while it is trying to learn. Recent work by Millan <ref> [78] </ref> explores the use of reflexes to make robot learning safer and more efficient. With appropriate biases, supplied by human programmers or teachers, complex reinforcement-learning problems will eventually be solvable.
Reference: [79] <author> George E. Monahan. </author> <title> A survey of partially observable Markov decision processes: Theory, models, and algorithms. </title> <journal> Management Science, </journal> <volume> 28 </volume> <pages> 1-16, </pages> <month> January </month> <year> 1982. </year>
Reference-contexts: POMDP Approach Another strategy consists of using hidden Markov model (HMM) techniques to learn a model of the environment, including the hidden state, then to use that model to construct a perfect memory controller <ref> [20, 67, 79] </ref>. Chrisman [22] showed how the forward-backward algorithm for learning HMMs could be adapted to learning POMDPs. He, and later McCallum [75], also gave heuristic state-splitting rules to attempt to learn the smallest possible model for a given environment.
Reference: [80] <author> Andrew W. Moore. </author> <title> Variable resolution dynamic programming: Efficiently learning action maps in multivariate real-valued spaces. </title> <booktitle> In Proc. Eighth International Machine Learning Workshop, </booktitle> <year> 1991. </year>
Reference-contexts: It cannot, however, acquire partitions in which attributes are only significant in combination (such as those needed to solve parity problems). Variable Resolution Dynamic Programming The VRDP algorithm <ref> [80] </ref> enables conventional dynamic programming to be performed in real-valued multivariate state-spaces where straightforward discretization would fall prey to the curse of dimensionality. A kd-tree (similar to a decision tree) is used to partition state space into coarse regions.
Reference: [81] <author> Andrew W. Moore. </author> <title> The parti-game algorithm for variable resolution reinforcement learning in multidimensional state-spaces. </title> <editor> In J. D. Cowan, G. Tesauro, and J. Alspector, editors, </editor> <booktitle> Advances in Neural Information Processing Systems 6, </booktitle> <pages> pages 711-718, </pages> <address> San Mateo, CA, 1994. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This algorithm proved effective on a number of problems for which full high-resolution arrays would have been impractical. It has the disadvantage of requiring a guess at an initially valid trajectory through state-space. PartiGame Algorithm Moore's PartiGame algorithm <ref> [81] </ref> is another solution to the problem of learning to achieve goal configurations in deterministic high-dimensional continuous spaces by learning an adaptive-resolution model.
Reference: [82] <author> Andrew W. Moore and Christopher G. Atkeson. </author> <title> An investigation of memory-based function approximators for learning control. </title> <type> Technical report, </type> <institution> MIT Artifical Intelligence Laboratory, </institution> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: A typical human learning the task requires an order of magnitude more practice to achieve proficiency at mere tens of hits. The juggling robot learned a world model from experience, which was generalized to unvisited states by a function approximation scheme known as locally weighted regression <ref> [25, 82] </ref>. 265 Kaelbling, Littman, & Moore Training Games Hidden Units Results Basic Poor TD 1.0 300,000 80 Lost by 13 points in 51 games TD 2.0 800,000 40 Lost by 7 points in 38 games TD 2.1 1,500,000 80 Lost by 1 point in 40 games Table 2: TD-Gammon's performance
Reference: [83] <author> Andrew W. Moore and Christopher G. Atkeson. </author> <title> Prioritized sweeping: Reinforcement learning with less data and less real time. </title> <journal> Machine Learning, </journal> <volume> 13, </volume> <year> 1993. </year>
Reference-contexts: Techniques like this have been used in several reinforcement learning algorithms including the interval exploration method [52] (described shortly), the exploration bonus in Dyna [116], curiosity-driven exploration [102], and the exploration mechanism in prioritized sweeping <ref> [83] </ref>. 244 Reinforcement Learning: A Survey 2.2.2 Randomized Strategies Another simple exploration strategy is to take the action with the best estimated expected reward by default, but with probability p, choose an action at random. <p> It is particularly unhelpful when the goal has just been reached or when the agent is stuck in a dead end; it continues to update random state-action pairs, rather than concentrating on the "interesting" parts of the state space. These problems are addressed by prioritized sweeping <ref> [83] </ref> and Queue-Dyna [87], which are two independently-developed but very similar techniques. We will describe prioritized sweeping in some detail.
Reference: [84] <author> Andrew W. Moore, Christopher G. Atkeson, and S. Schaal. </author> <title> Memory-based learning for control. </title> <type> Technical Report CMU-RI-TR-95-18, </type> <institution> CMU Robotics Institute, </institution> <year> 1995. </year>
Reference-contexts: Popular techniques include various neural-network methods [94], fuzzy logic [11, 58]. CMAC [3], and local memory-based methods <ref> [84] </ref>, such as generalizations of nearest neighbor methods. Other mappings, especially the policy mapping, typically need specialized algorithms because training sets of input-output pairs are not available. 6.1 Generalization over Input A reinforcement-learning agent's current state plays a central role in its selection of reward-maximizing actions.
Reference: [85] <author> Kumpati Narendra and M. A. L. Thathachar. </author> <title> Learning Automata: An Introduction. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1989. </year>
Reference-contexts: Unfortunately, no one has yet been able to find an analog of index values for delayed reinforcement problems. 2.1.3 Learning Automata A branch of the theory of adaptive control is devoted to learning automata, surveyed by Narendra and Thathachar <ref> [85] </ref>, which were originally described explicitly as finite state automata. The Tsetlin automaton shown in Figure 3 provides an example that solves a 2-armed bandit arbitrarily near optimally as N approaches infinity.
Reference: [86] <author> Kumpati S. Narendra and M. A. L. Thathachar. </author> <title> Learning automata|a survey. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 4(4) </volume> <pages> 323-334, </pages> <month> July </month> <year> 1974. </year>
Reference-contexts: Unfortunately, it does not always converge to the correct action; but the probability that it converges to the wrong one can be made arbitrarily small by making ff small <ref> [86] </ref>. There is no literature on the regret of this algorithm. 2.2 Ad-Hoc Techniques In reinforcement-learning practice, some simple, ad hoc strategies have been popular.
Reference: [87] <author> Jing Peng and Ronald J. Williams. </author> <title> Efficient learning and planning within the Dyna framework. </title> <booktitle> Adaptive Behavior, </booktitle> <volume> 1(4) </volume> <pages> 437-454, </pages> <year> 1993. </year>
Reference-contexts: It is particularly unhelpful when the goal has just been reached or when the agent is stuck in a dead end; it continues to update random state-action pairs, rather than concentrating on the "interesting" parts of the state space. These problems are addressed by prioritized sweeping [83] and Queue-Dyna <ref> [87] </ref>, which are two independently-developed but very similar techniques. We will describe prioritized sweeping in some detail. The algorithm is similar to Dyna, except that updates are no longer chosen at random and values are now associated with states (as in value iteration) instead of state-action pairs (as in Q-learning).
Reference: [88] <author> Jing Peng and Ronald J. Williams. </author> <title> Incremental multi-step Q-learning. </title> <booktitle> In Proceedings of the Eleventh International Conference on Machine Learning, </booktitle> <pages> pages 226-232, </pages> <address> San Francisco, CA, </address> <year> 1994. </year> <note> Morgan Kaufmann. 274 Reinforcement Learning: A Survey </note>
Reference-contexts: Q-learning can also be extended to update states that occurred more than one step previously, as in T D () <ref> [88] </ref>. When the Q values are nearly converged to their optimal values, it is appropriate for the agent to act greedily, taking, in each situation, the action with the highest Q value. During learning, however, there is a difficult exploitation versus exploration trade-off to be made.
Reference: [89] <author> Dean A. Pomerleau. </author> <title> Neural network perception for mobile robot guidance. </title> <publisher> Kluwer Academic Publishing, </publisher> <year> 1993. </year>
Reference-contexts: For real robots, this requires perceptual abilities that are not yet available. But another strategy is to have a human supply appropriate motor commands to a robot through a joystick or steering wheel <ref> [89] </ref>. problem decomposition: Decomposing a huge learning problem into a collection of smaller ones, and providing useful reinforcement signals for the subproblems is a very powerful technique for biasing learning.
Reference: [90] <author> Martin L. Puterman. </author> <title> Markov Decision Processes|Discrete Stochastic Dynamic Programming. </title> <publisher> John Wiley & Sons, Inc., </publisher> <address> New York, NY, </address> <year> 1994. </year>
Reference-contexts: The reward function specifies expected instantaneous reward as a function of the current state and action. The model is Markov if the state transitions are independent of any previous environment states or agent actions. There are many good references to MDP models <ref> [10, 13, 48, 90] </ref>. Although general MDPs may have infinite (even uncountable) state and action spaces, we will only discuss methods for solving finite-state and finite-action problems. <p> This provides an effective stopping criterion for the algorithm. Puterman <ref> [90] </ref> discusses another stopping criterion, based on the span semi-norm, which may result in earlier termination. Another important result is that the greedy policy is guaranteed to be optimal in some finite number of steps even though the value function may not have converged [13]. <p> When no improvements are possible, then the policy is guaranteed to be optimal. Since there are at most jAj jSj distinct policies, and the sequence of policies improves at each step, this algorithm terminates in at most an exponential number of iterations <ref> [90] </ref>. However, it is an important open question how many iterations policy iteration takes in the worst case.
Reference: [91] <author> Martin L. Puterman and Moon Chirl Shin. </author> <title> Modified policy iteration algorithms for discounted Markov decision processes. </title> <journal> Management Science, </journal> <volume> 24 </volume> <pages> 1127-1137, </pages> <year> 1978. </year>
Reference-contexts: Arguments have been put forth to the effect that each approach is better for large problems. Put-erman's modified policy iteration algorithm <ref> [91] </ref> provides a method for trading iteration time for iteration improvement in a smoother way. The basic idea is that the expensive part of policy iteration is solving for the exact value of V . <p> In practice, policy iteration converges in fewer iterations than value iteration, although the per-iteration costs of O (jAjjSj 2 + jSj 3 ) can be prohibitive. There is no known tight worst-case bound available for policy iteration [66]. Modified policy iteration <ref> [91] </ref> seeks a trade-off between cheap and effective iterations and is preferred by some practictioners [96]. 248 Reinforcement Learning: A Survey Linear programming [105] is an extremely general problem, and MDPs can be solved by general-purpose linear-programming packages [35, 34, 46].
Reference: [92] <author> M. B. </author> <title> Ring. Continual Learning in Reinforcement Environments. </title> <type> PhD thesis, </type> <institution> University of Texas at Austin, Austin, Texas, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: McCallum [76] describes the "utile suffix memory" which learns a variable-width window that serves simultaneously as a model of the environment and a finite-memory policy. This system has had excellent results in a very complex driving-simulation domain [74]. Ring <ref> [92] </ref> has a neural-network approach that uses a variable history window, adding history when necessary to disambiguate situations.
Reference: [93] <author> Ulrich Rude. </author> <title> Mathematical and computational techniques for multilevel adaptive methods. </title> <institution> Society for Industrial and Applied Mathematics, </institution> <address> Philadelphia, Pennsylvania, </address> <year> 1993. </year>
Reference-contexts: Several standard numerical-analysis techniques that speed the convergence of dynamic programming can be used to accelerate value and policy iteration. Multigrid methods can be used to quickly seed a good initial approximation to a high resolution value function by initially performing value iteration at a coarser resolution <ref> [93] </ref>. State aggregation works by collapsing groups of states to a single meta-state solving the abstracted problem [15]. 3.2.4 Computational Complexity Value iteration works by producing successive approximations of the optimal value function.
Reference: [94] <editor> D. E. Rumelhart and J. L. McClelland, editors. </editor> <booktitle> Parallel Distributed Processing: Explorations in the microstructures of cognition. Volume 1: Foundations. </booktitle> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1986. </year>
Reference-contexts: Some of these mappings, such as transitions and immediate rewards, can be 255 Kaelbling, Littman, & Moore learned using straightforward supervised learning, and can be handled using any of the wide variety of function-approximation techniques for supervised learning that support noisy training examples. Popular techniques include various neural-network methods <ref> [94] </ref>, fuzzy logic [11, 58]. CMAC [3], and local memory-based methods [84], such as generalizations of nearest neighbor methods.
Reference: [95] <author> G. A. Rummery and M. Niranjan. </author> <title> On-line Q-learning using connectionist systems. </title> <type> Technical Report CUED/F-INFENG/TR166, </type> <institution> Cambridge University, </institution> <year> 1994. </year>
Reference-contexts: In Sutton's comparative experiments with Boyan and Moore's counterexamples, he changes four aspects of the experiments: 1. Small changes to the task specifications. 2. A very different kind of function approximator (CMAC [2]) that has weak generalization. 3. A different learning algorithm: SARSA <ref> [95] </ref> instead of value iteration. 4. A different training regime. Boyan and Moore sampled states uniformly in state space, whereas Sutton's method sampled along empirical trajectories. There are intuitive reasons to believe that the fourth factor is particularly important, but more careful research is needed.
Reference: [96] <author> John Rust. </author> <title> Numerical dynamic programming in economics. In Handbook of Computational Economics. </title> <publisher> Elsevier, North Holland, </publisher> <year> 1996. </year>
Reference-contexts: There is no known tight worst-case bound available for policy iteration [66]. Modified policy iteration [91] seeks a trade-off between cheap and effective iterations and is preferred by some practictioners <ref> [96] </ref>. 248 Reinforcement Learning: A Survey Linear programming [105] is an extremely general problem, and MDPs can be solved by general-purpose linear-programming packages [35, 34, 46]. An advantage of this approach is that commercial-quality linear-programming packages are available, although the time and space requirements can still be quite high.
Reference: [97] <author> A. P. Sage and C. C. White. </author> <title> Optimum Systems Control. </title> <publisher> Prentice Hall, </publisher> <year> 1977. </year>
Reference-contexts: Between each trial, a form of dynamic programming specific to linear control policies and locally linear transitions was used to improve the policy. The form of dynamic programming is known as linear-quadratic-regulator design <ref> [97] </ref>. 2. Mahadevan and Connell [71] discuss a task in which a mobile robot pushes large boxes for extended periods of time. Box-pushing is a well-known difficult robotics problem, characterized by immense uncertainty in the results of actions.
Reference: [98] <author> Marcos Salganicoff and Lyle H. Ungar. </author> <title> Active exploration and learning in real-valued spaces using multi-armed bandit allocation indices. </title> <editor> In Armand Prieditis and Stuart Russell, editors, </editor> <booktitle> Proceedings of the Twelfth International Conference on Machine Learning, </booktitle> <pages> pages 480-487, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Because of the guarantee of optimal exploration and the simplicity of the technique (given the table of index values), this approach holds a great deal of promise for use in more complex applications. This method proved useful in an application to robotic manipulation with immediate reward <ref> [98] </ref>. Unfortunately, no one has yet been able to find an analog of index values for delayed reinforcement problems. 2.1.3 Learning Automata A branch of the theory of adaptive control is devoted to learning automata, surveyed by Narendra and Thathachar [85], which were originally described explicitly as finite state automata.
Reference: [99] <author> A. L. Samuel. </author> <title> Some studies in machine learning using the game of checkers. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 3 </volume> <pages> 211-229, </pages> <year> 1959. </year> <note> Reprinted in E. </note> <editor> A. Feigenbaum and J. Feldman, editors, </editor> <booktitle> Computers and Thought, </booktitle> <publisher> McGraw-Hill, </publisher> <address> New York 1963. </address>
Reference-contexts: Nonetheless, reinforcement-learning algorithms can be adapted to work for a very general class of games [63] and many researchers have used reinforcement learning in these environments. One application, spectacularly far ahead of its time, was Samuel's checkers playing system <ref> [99] </ref>. This learned a value function represented by a linear function approximator, and employed a training scheme similar to the updates used in value iteration, temporal differences and Q-learning. More recently, Tesauro [118, 119, 120] applied the temporal difference algorithm to backgammon.
Reference: [100] <author> S. Schaal and Christopher Atkeson. </author> <title> Robot juggling: An implementation of memory-based learning. </title> <journal> Control Systems Magazine, </journal> <volume> 14, </volume> <year> 1994. </year>
Reference-contexts: Here we will concentrate on the following four examples, although many other interesting ongoing robotics investigations are underway. 1. Schaal and Atkeson <ref> [100] </ref> constructed a two-armed robot, shown in Figure 11, that learns to juggle a device known as a devil-stick. This is a complex non-linear control task involving a six-dimensional state space and less than 200 msecs per control decision.
Reference: [101] <author> J. Schmidhuber. </author> <title> A general method for multi-agent learning and incremental self-improvement in unrestricted environments. </title> <editor> In X. Yao, editor, </editor> <booktitle> Evolutionary Computation: Theory and Applications. </booktitle> <publisher> Scientific Publ. Co., </publisher> <address> Singapore, </address> <year> 1996. </year>
Reference-contexts: The first is to search in the space of behaviors in order to find one that performs well in the environment. This approach has been taken by work in genetic algorithms and genetic programming, as well as some more novel search techniques <ref> [101] </ref>. The second is to use statistical techniques and dynamic programming methods to estimate the utility of taking actions in states of the world.
Reference: [102] <author> J. H. Schmidhuber. </author> <booktitle> Curious model-building control systems. In Proc. International Joint Conference on Neural Networks, Singapore, </booktitle> <volume> volume 2, </volume> <pages> pages 1458-1463. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: Techniques like this have been used in several reinforcement learning algorithms including the interval exploration method [52] (described shortly), the exploration bonus in Dyna [116], curiosity-driven exploration <ref> [102] </ref>, and the exploration mechanism in prioritized sweeping [83]. 244 Reinforcement Learning: A Survey 2.2.2 Randomized Strategies Another simple exploration strategy is to take the action with the best estimated expected reward by default, but with probability p, choose an action at random.
Reference: [103] <author> Jurgen H. Schmidhuber. </author> <title> Reinforcement learning in Markovian and non-Markovian environments. </title> <editor> In D. S. Lippman, J. E. Moody, and D. S. Touretzky, editors, </editor> <booktitle> Advances in Neural Information Processing Systems 3, </booktitle> <pages> pages 500-506, </pages> <address> San Mateo, CA, 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The network can be trained using backpropagation through time (or some other suitable technique) and learns to retain "history features" to predict value. This approach has been used by a number of researchers <ref> [77, 62, 103] </ref>. It seems to work effectively on simple problems, but can suffer from convergence to local optima on more complex problems. Classifier Systems Classifier systems [47, 41] were explicitly developed to solve problems with delayed reward, including those requiring short-term memory.
Reference: [104] <author> Nicol N. Schraudolph, Peter Dayan, and Terrence J. Sejnowski. </author> <title> Temporal difference learning of position evaluation in the game of Go. </title> <editor> In J. D. Cowan, G. Tesauro, and J. Alspector, editors, </editor> <booktitle> Advances in Neural Information Processing Systems 6, </booktitle> <pages> pages 817-824, </pages> <address> San Mateo, CA, 1994. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Basic TD-Gammon played respectably, but not at a professional standard. Although experiments with other games have in some cases produced interesting learning behavior, no success close to that of TD-Gammon has been repeated. Other games that have been studied include Go <ref> [104] </ref> and Chess [122]. It is still an open question as to if and how the success of TD-Gammon can be repeated in other domains. 8.2 Robotics and Control In recent years there have been many robotics and control applications that have used reinforcement learning.
Reference: [105] <author> Alexander Schrijver. </author> <title> Theory of Linear and Integer Programming. </title> <publisher> Wiley-Interscience, </publisher> <address> New York, NY, </address> <year> 1986. </year> <note> 275 Kaelbling, Littman, & Moore </note>
Reference-contexts: There is no known tight worst-case bound available for policy iteration [66]. Modified policy iteration [91] seeks a trade-off between cheap and effective iterations and is preferred by some practictioners [96]. 248 Reinforcement Learning: A Survey Linear programming <ref> [105] </ref> is an extremely general problem, and MDPs can be solved by general-purpose linear-programming packages [35, 34, 46]. An advantage of this approach is that commercial-quality linear-programming packages are available, although the time and space requirements can still be quite high.
Reference: [106] <author> Anton Schwartz. </author> <title> A reinforcement learning method for maximizing undiscounted rewards. </title> <booktitle> In Proceedings of the Tenth International Conference on Machine Learning, </booktitle> <pages> pages 298-305, </pages> <address> Amherst, Massachusetts, 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: It can also be applied to undiscounted problems as long as the optimal policy is guaranteed to reach a reward-free absorbing state and the state is periodically reset. Schwartz <ref> [106] </ref> examined the problem of adapting Q-learning to an average-reward framework. Although his R-learning algorithm seems to exhibit convergence problems for some MDPs, several researchers have found the average-reward criterion closer to the true problem they wish to solve than a discounted criterion and therefore prefer R-learning to Q-learning [69].
Reference: [107] <author> Satinder P. Singh, Andrew G. Barto, Roderic Grupen, and Christopher Connolly. </author> <title> Robust reinforcement learning in motion planning. </title> <editor> In J. D. Cowan, G. Tesauro, and J. Alspector, editors, </editor> <booktitle> Advances in Neural Information Processing Systems 6, </booktitle> <pages> pages 655-662, </pages> <address> San Mateo, CA, 1994. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: These problems can be ameliorated by programming a set of "reflexes" that cause the agent to act initially in some way that is reasonable <ref> [73, 107] </ref>. These reflexes can eventually be overridden by more detailed and accurate learned knowledge, but they at least keep the agent alive and pointed in the right direction while it is trying to learn.
Reference: [108] <author> Satinder P. Singh and Richard S. Sutton. </author> <title> Reinforcement learning with replacing eligibility traces. </title> <journal> Machine Learning, </journal> <volume> 22(1), </volume> <year> 1996. </year>
Reference-contexts: There has been some recent work on making the updates more efficient [24] and on changing the definition to make T D () more consistent with the certainty-equivalent method <ref> [108] </ref>, which is discussed in Section 5.1. 4.2 Q-learning The work of the two components of AHC can be accomplished in a unified manner by Watkins' Q-learning algorithm [128, 129]. Q-learning is typically easier to implement.
Reference: [109] <author> Satinder Pal Singh. </author> <title> Reinforcement learning with a hierarchy of abstract models. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 202-207, </pages> <address> San Jose, CA, 1992. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: The reinforcement functions for the individual behaviors (commands) are given, but learning takes place simultaneously at both the high and low levels. 6.3.2 Compositional Q-learning Singh's compositional Q-learning <ref> [110, 109] </ref> (C-QL) consists of a hierarchy based on the temporal sequencing of subgoals. The elemental tasks are behaviors that achieve some recognizable condition. The high-level goal of the system is to achieve some set of conditions in sequential order.
Reference: [110] <author> Satinder Pal Singh. </author> <title> Transfer of learning by composing solutions of elemental sequential tasks. </title> <journal> Machine Learning, </journal> <volume> 8(3) </volume> <pages> 323-340, </pages> <year> 1992. </year>
Reference-contexts: The reinforcement functions for the individual behaviors (commands) are given, but learning takes place simultaneously at both the high and low levels. 6.3.2 Compositional Q-learning Singh's compositional Q-learning <ref> [110, 109] </ref> (C-QL) consists of a hierarchy based on the temporal sequencing of subgoals. The elemental tasks are behaviors that achieve some recognizable condition. The high-level goal of the system is to achieve some set of conditions in sequential order.
Reference: [111] <author> Satinder Pal Singh. </author> <title> Learning to Solve Markovian Decision Processes. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Massachusetts, </institution> <year> 1993. </year> <note> Also, CMPSCI Technical Report 93-77. </note>
Reference-contexts: This type of sample backup <ref> [111] </ref> is critical to the operation of the model-free methods discussed in the next section. The computational complexity of the value-iteration algorithm with full backups, per iteration, is quadratic in the number of states and linear in the number of actions.
Reference: [112] <author> Robert F. Stengel. </author> <title> Stochastic Optimal Control. </title> <publisher> John Wiley and Sons, </publisher> <year> 1986. </year>
Reference-contexts: This measure is known as regret [12]. It penalizes mistakes wherever they occur during the run. Unfortunately, results concerning the regret of algorithms are quite hard to obtain. 241 Kaelbling, Littman, & Moore 1.4 Reinforcement Learning and Adaptive Control Adaptive control <ref> [19, 112] </ref> is also concerned with algorithms for improving a sequence of decisions from experience. Adaptive control is a much more mature discipline that concerns itself with dynamic systems in which states and actions are vectors and system dynamics are smooth: linear or locally linearizable around a desired trajectory.
Reference: [113] <author> R. S. Sutton. </author> <title> Generalization in Reinforcement Learning: Successful Examples Using Sparse Coarse Coding. </title> <editor> In D. Touretzky, M. Mozer, and M. Hasselmo, editors, </editor> <booktitle> Neural Information Processing Systems 8, </booktitle> <year> 1996. </year>
Reference-contexts: Baird's residual gradient technique [6] provides guaranteed convergence to locally optimal solutions. Perhaps the gloominess of these counter-examples is misplaced. Boyan and Moore [18] report that their counter-examples can be made to work with problem-specific hand-tuning despite the unreliability of untuned algorithms that provably converge in discrete domains. Sutton <ref> [113] </ref> shows how modified versions of Boyan and Moore's examples can converge successfully. An open question is whether general principles, ideally supported by theory, can help us understand when value function approximation will succeed.
Reference: [114] <author> Richard S. Sutton. </author> <title> Temporal Credit Assignment in Reinforcement Learning. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <address> Amherst, MA, </address> <year> 1984. </year>
Reference-contexts: Such algorithms can and have been used in the context of a delayed reinforcement, for instance, as the RL component in the AHC architecture described in Section 4.1. They can also be generalized to real-valued reward through reward comparison methods <ref> [114] </ref>. CRBP The complementary reinforcement backpropagation algorithm [1] (crbp) consists of a feed-forward network mapping an encoding of the state to an encoding of the action. <p> The hope is that the random distribution will generate an action that works better, and then that action will be reinforced. ARC The associative reinforcement comparison (arc) algorithm <ref> [114] </ref> is an instance of the ahc architecture for the case of boolean actions, consisting of two feed-forward networks. One learns the value of situations, the other learns a policy. These can be simple linear networks or can have hidden units. <p> The second network is trained in a standard supervised mode to estimate r as a function of the input state s. Variations of this approach have been used in a variety of applications <ref> [4, 9, 61, 114] </ref>. REINFORCE Algorithms Williams [131, 132] studied the problem of choosing actions to maximize immedate reward. He identified a broad class of update rules that perform gradient descent on the expected reward and showed how to integrate these rules with backpropagation.
Reference: [115] <author> Richard S. Sutton. </author> <title> Learning to predict by the method of temporal differences. </title> <journal> Machine Learning, </journal> <volume> 3(1) </volume> <pages> 9-44, </pages> <year> 1988. </year>
Reference-contexts: Instead, we will use insights from value iteration to adjust the estimated value of a state based on the immediate reward and the estimated value of the next state. This class of algorithms is known as temporal difference methods <ref> [115] </ref>. <p> Here s is the agent's state before the transition, a is its choice of action, r the instantaneous reward it receives, and s 0 its resulting state. The value of a policy is learned using Sutton's T D (0) algorithm <ref> [115] </ref> which uses the update rule V (s) := V (s) + ff (r + flV (s 0 ) V (s)) : Whenever a state s is visited, its estimated value is updated to be closer to r + flV (s 0 ), since r is the instantaneous reward received and
Reference: [116] <author> Richard S. Sutton. </author> <title> Integrated architectures for learning, planning, and reacting based on approximating dynamic programming. </title> <booktitle> In Proceedings of the Seventh International Conference on Machine Learning, </booktitle> <address> Austin, TX, 1990. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This still has a measurable danger of starving an optimal but unlucky action, but the risk of this can be made arbitrarily small. Techniques like this have been used in several reinforcement learning algorithms including the interval exploration method [52] (described shortly), the exploration bonus in Dyna <ref> [116] </ref>, curiosity-driven exploration [102], and the exploration mechanism in prioritized sweeping [83]. 244 Reinforcement Learning: A Survey 2.2.2 Randomized Strategies Another simple exploration strategy is to take the action with the best estimated expected reward by default, but with probability p, choose an action at random. <p> Q-learning used its optimal learning rate parameter for a deterministic maze: ff = 1. Dyna and prioritized sweeping were permitted to take k = 200 backups per transition. For prioritized sweeping, the priority queue often emptied before all backups were used. 5.2 Dyna Sutton's Dyna architecture <ref> [116, 117] </ref> exploits a middle ground, yielding strategies that are both more effective than model-free learning and more computationally efficient than the certainty-equivalence approach.
Reference: [117] <author> Richard S. Sutton. </author> <title> Planning by incremental dynamic programming. </title> <booktitle> In Proceedings of the Eighth International Workshop on Machine Learning, </booktitle> <pages> pages 353-357. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: Q-learning used its optimal learning rate parameter for a deterministic maze: ff = 1. Dyna and prioritized sweeping were permitted to take k = 200 backups per transition. For prioritized sweeping, the priority queue often emptied before all backups were used. 5.2 Dyna Sutton's Dyna architecture <ref> [116, 117] </ref> exploits a middle ground, yielding strategies that are both more effective than model-free learning and more computationally efficient than the certainty-equivalence approach.
Reference: [118] <author> Gerald Tesauro. </author> <title> Practical issues in temporal difference learning. </title> <journal> Machine Learning, </journal> <volume> 8 </volume> <pages> 257-277, </pages> <year> 1992. </year>
Reference-contexts: the value function by mapping a state description to a value. 257 Kaelbling, Littman, & Moore Many reseachers have experimented with this approach: Boyan and Moore [18] used local memory-based methods in conjunction with value iteration; Lin [59] used backpropagation networks for Q-learning; Watkins [128] used CMAC for Q-learning; Tesauro <ref> [118, 120] </ref> used backpropagation for learning the value function in backgammon (described in Section 8.1); Zhang and Dietterich [136] used backpropagation and T D () to learn good strategies for job-shop scheduling. <p> One application, spectacularly far ahead of its time, was Samuel's checkers playing system [99]. This learned a value function represented by a linear function approximator, and employed a training scheme similar to the updates used in value iteration, temporal differences and Q-learning. More recently, Tesauro <ref> [118, 119, 120] </ref> applied the temporal difference algorithm to backgammon. Backgammon has approximately 10 20 states, making table-based reinforcement learning impossible.
Reference: [119] <author> Gerald Tesauro. </author> <title> TD-Gammon, a self-teaching backgammon program, achieves master-level play. </title> <journal> Neural Computation, </journal> <volume> 6(2) </volume> <pages> 215-219, </pages> <year> 1994. </year>
Reference-contexts: One application, spectacularly far ahead of its time, was Samuel's checkers playing system [99]. This learned a value function represented by a linear function approximator, and employed a training scheme similar to the updates used in value iteration, temporal differences and Q-learning. More recently, Tesauro <ref> [118, 119, 120] </ref> applied the temporal difference algorithm to backgammon. Backgammon has approximately 10 20 states, making table-based reinforcement learning impossible.
Reference: [120] <author> Gerald Tesauro. </author> <title> Temporal difference learning and TD-Gammon. </title> <journal> Communications of the ACM, </journal> <volume> 38(3) </volume> <pages> 58-67, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: the value function by mapping a state description to a value. 257 Kaelbling, Littman, & Moore Many reseachers have experimented with this approach: Boyan and Moore [18] used local memory-based methods in conjunction with value iteration; Lin [59] used backpropagation networks for Q-learning; Watkins [128] used CMAC for Q-learning; Tesauro <ref> [118, 120] </ref> used backpropagation for learning the value function in backgammon (described in Section 8.1); Zhang and Dietterich [136] used backpropagation and T D () to learn good strategies for job-shop scheduling. <p> One application, spectacularly far ahead of its time, was Samuel's checkers playing system [99]. This learned a value function represented by a linear function approximator, and employed a training scheme similar to the updates used in value iteration, temporal differences and Q-learning. More recently, Tesauro <ref> [118, 119, 120] </ref> applied the temporal difference algorithm to backgammon. Backgammon has approximately 10 20 states, making table-based reinforcement learning impossible.
Reference: [121] <author> C-K. Tham and R. W. Prager. </author> <title> A modular q-learning architecture for manipulator task decomposition. </title> <booktitle> In Proceedings of the Eleventh International Conference on Machine Learning, </booktitle> <address> San Francisco, CA, </address> <year> 1994. </year> <note> Morgan Kaufmann. 276 Reinforcement Learning: A Survey </note>
Reference-contexts: The achievement of the conditions provides reinforcement for the elemental tasks, which are trained first to achieve individual subgoals. Then, the gating function learns to switch the elemental tasks in order to achieve the appropriate high-level sequential goal. This method was used by Tham and Prager <ref> [121] </ref> to learn to control a simulated multi-link robot arm. 6.3.3 Hierarchical Distance to Goal Especially if we consider reinforcement learning modules to be part of larger agent architectures, it is important to consider problems in which goals are dynamically input to the learner.
Reference: [122] <author> Sebastian Thrun. </author> <title> Learning to play the game of chess. </title> <editor> In G. Tesauro, D. S. Touretzky, and T. K. Leen, editors, </editor> <booktitle> Advances in Neural Information Processing Systems 7, </booktitle> <address> Cambridge, MA, 1995. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Basic TD-Gammon played respectably, but not at a professional standard. Although experiments with other games have in some cases produced interesting learning behavior, no success close to that of TD-Gammon has been repeated. Other games that have been studied include Go [104] and Chess <ref> [122] </ref>. It is still an open question as to if and how the success of TD-Gammon can be repeated in other domains. 8.2 Robotics and Control In recent years there have been many robotics and control applications that have used reinforcement learning.
Reference: [123] <author> Sebastian Thrun and Anton Schwartz. </author> <title> Issues in using function approximation for reinforcement learning. </title> <editor> In M. Mozer, P. Smolensky, D. Touretzky, J. Elman, and A. Weigend, editors, </editor> <booktitle> Proceedings of the 1993 Connectionist Models Summer School, </booktitle> <address> Hillsdale, NJ, 1993. </address> <publisher> Lawrence Erlbaum. </publisher>
Reference-contexts: Their solution to this, applicable only to certain classes of problems, discourages such divergence by only permitting updates whose estimated values can be shown to be near-optimal via a battery of Monte-Carlo experiments. Thrun and Schwartz <ref> [123] </ref> theorize that function approximation of value functions is also dangerous because the errors in value functions due to generalization can become compounded by the "max" operator in the definition of the value function.
Reference: [124] <author> Sebastian B. Thrun. </author> <title> The role of exploration in learning control. </title> <editor> In David A. White and Donald A. Sofge, editors, </editor> <title> Handbook of Intelligent Control: Neural, Fuzzy, and Adaptive Approaches. </title> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, NY, </address> <year> 1992. </year>
Reference-contexts: They are rarely, if ever, the best choice for the models of optimality we have used, but they may be viewed as reasonable, computationally tractable, heuristics. Thrun <ref> [124] </ref> has surveyed a variety of these techniques. 2.2.1 Greedy Strategies The first strategy that comes to mind is to always choose the action with the highest estimated payoff.
Reference: [125] <author> John N. Tsitsiklis. </author> <title> Asynchronous stochastic approximation and Q-learning. </title> <journal> Machine Learning, </journal> <volume> 16(3), </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: If each action is executed in each state an infinite number of times on an infinite run and ff is decayed appropriately, the Q values will converge with probability 1 to Q fl <ref> [128, 125, 49] </ref>. Q-learning can also be extended to update states that occurred more than one step previously, as in T D () [88].
Reference: [126] <author> John N. Tsitsiklis and Ben Van Roy. </author> <title> Feature-based methods for large scale dynamic programming. </title> <journal> Machine Learning, </journal> <volume> 22(1), </volume> <year> 1996. </year>
Reference-contexts: Thrun and Schwartz [123] theorize that function approximation of value functions is also dangerous because the errors in value functions due to generalization can become compounded by the "max" operator in the definition of the value function. Several recent results <ref> [42, 126] </ref> show how the appropriate choice of function approximator can guarantee convergence, though not necessarily to the optimal values. Baird's residual gradient technique [6] provides guaranteed convergence to locally optimal solutions. Perhaps the gloominess of these counter-examples is misplaced.
Reference: [127] <author> L. G. Valiant. </author> <title> A theory of the learnable. </title> <journal> Communications of the ACM, </journal> <volume> 27(11) </volume> <pages> 1134-1142, </pages> <month> November </month> <year> 1984. </year>
Reference-contexts: It should be noted that here we have another difference between reinforcement learning and conventional supervised learning. In the latter, expected future predictive accuracy or statistical efficiency are the prime concerns. For example, in the well-known PAC framework <ref> [127] </ref>, there is a learning period during which mistakes do not count, then a performance period during which they do. The framework provides bounds on the necessary length of the learning period in order to have a probabilistic guarantee on the subsequent performance.
Reference: [128] <author> Christopher J. C. H. Watkins. </author> <title> Learning from Delayed Rewards. </title> <type> PhD thesis, </type> <institution> King's College, </institution> <address> Cambridge, UK, </address> <year> 1989. </year>
Reference-contexts: making the updates more efficient [24] and on changing the definition to make T D () more consistent with the certainty-equivalent method [108], which is discussed in Section 5.1. 4.2 Q-learning The work of the two components of AHC can be accomplished in a unified manner by Watkins' Q-learning algorithm <ref> [128, 129] </ref>. Q-learning is typically easier to implement. In order to understand 250 Reinforcement Learning: A Survey Q-learning, we have to develop some additional notation. Let Q fl (s; a) be the expected discounted reinforcement of taking action a in state s, then continuing by choosing actions optimally. <p> If each action is executed in each state an infinite number of times on an infinite run and ff is decayed appropriately, the Q values will converge with probability 1 to Q fl <ref> [128, 125, 49] </ref>. Q-learning can also be extended to update states that occurred more than one step previously, as in T D () [88]. <p> function approximator is used to represent the value function by mapping a state description to a value. 257 Kaelbling, Littman, & Moore Many reseachers have experimented with this approach: Boyan and Moore [18] used local memory-based methods in conjunction with value iteration; Lin [59] used backpropagation networks for Q-learning; Watkins <ref> [128] </ref> used CMAC for Q-learning; Tesauro [118, 120] used backpropagation for learning the value function in backgammon (described in Section 8.1); Zhang and Dietterich [136] used backpropagation and T D () to learn good strategies for job-shop scheduling. <p> Lin [60] and Dorigo and Colombetti [38, 37] both used this approach, first training the behaviors and then training the gating function. Many of the other hierarchical learning methods can be cast in this framework. 6.3.1 Feudal Q-learning Feudal Q-learning <ref> [31, 128] </ref> involves a hierarchy of learning modules. In the simplest case, there is a high-level master and a low-level slave. The master receives reinforcement from the external environment. Its actions consist of commands that it can give to the low-level learner.
Reference: [129] <author> Christopher J. C. H. Watkins and Peter Dayan. </author> <title> Q-learning. </title> <journal> Machine Learning, </journal> <volume> 8(3) </volume> <pages> 279-292, </pages> <year> 1992. </year>
Reference-contexts: We would also like to be able to evaluate the quality of learning itself. There are several incompatible measures in use. * Eventual convergence to optimal. Many algorithms come with a provable guarantee of asymptotic convergence to optimal behavior <ref> [129] </ref>. This is reassuring, but useless in practical terms. An agent that quickly reaches a plateau at 99% of optimality may, in many applications, be preferable to an agent that has a guarantee of eventual optimality but a sluggish early learning rate. * Speed of convergence to optimality. <p> making the updates more efficient [24] and on changing the definition to make T D () more consistent with the certainty-equivalent method [108], which is discussed in Section 5.1. 4.2 Q-learning The work of the two components of AHC can be accomplished in a unified manner by Watkins' Q-learning algorithm <ref> [128, 129] </ref>. Q-learning is typically easier to implement. In order to understand 250 Reinforcement Learning: A Survey Q-learning, we have to develop some additional notation. Let Q fl (s; a) be the expected discounted reinforcement of taking action a in state s, then continuing by choosing actions optimally.
Reference: [130] <author> Steven D. Whitehead. </author> <title> Complexity and cooperation in Q-learning. </title> <booktitle> In Proceedings of the Eighth International Workshop on Machine Learning, </booktitle> <address> Evanston, IL, 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: serious objections to this method: * It makes an arbitrary division between the learning phase and the acting phase. * How should it gather data about the environment initially? Random exploration might be dangerous, and in some environments is an immensely inefficient method of gathering data, requiring exponentially more data <ref> [130] </ref> than a system that interleaves experience gathering with policy-building more tightly [56]. See Figure 5 for an example. * The possibility of changes in the environment is also problematic.
Reference: [131] <author> Ronald J. Williams. </author> <title> A class of gradient-estimating algorithms for reinforcement learning in neural networks. </title> <booktitle> In Proceedings of the IEEE First International Conference on Neural Networks, </booktitle> <address> San Diego, CA, </address> <year> 1987. </year>
Reference-contexts: The second network is trained in a standard supervised mode to estimate r as a function of the input state s. Variations of this approach have been used in a variety of applications [4, 9, 61, 114]. REINFORCE Algorithms Williams <ref> [131, 132] </ref> studied the problem of choosing actions to maximize immedate reward. He identified a broad class of update rules that perform gradient descent on the expected reward and showed how to integrate these rules with backpropagation.
Reference: [132] <author> Ronald J. Williams. </author> <title> Simple statistical gradient-following algorithms for connectionist reinforcement learning. </title> <journal> Machine Learning, </journal> <volume> 8(3) </volume> <pages> 229-256, </pages> <year> 1992. </year>
Reference-contexts: The second network is trained in a standard supervised mode to estimate r as a function of the input state s. Variations of this approach have been used in a variety of applications [4, 9, 61, 114]. REINFORCE Algorithms Williams <ref> [131, 132] </ref> studied the problem of choosing actions to maximize immedate reward. He identified a broad class of update rules that perform gradient descent on the expected reward and showed how to integrate these rules with backpropagation.
Reference: [133] <author> Ronald J. Williams and Leemon C. Baird, III. </author> <title> Analysis of some incremental variants of policy iteration: First steps toward understanding actor-critic learning systems. </title> <type> Technical Report NU-CCS-93-11, </type> <institution> Northeastern University, College of Computer Science, </institution> <address> Boston, MA, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: In most implementations, however, both components operate simultaneously. Only the alternating implementation can be guaranteed to converge to the optimal policy, under appropriate conditions. Williams and Baird explored the convergence properties of a class of AHC-related algorithms they call "incremental variants of policy iteration" <ref> [133] </ref>. 249 Kaelbling, Littman, & Moore It remains to explain how the critic can learn the value of a policy. We define hs; a; r; s 0 i to be an experience tuple summarizing a single transition in the environment.
Reference: [134] <author> Ronald J. Williams and Leemon C. Baird, III. </author> <title> Tight performance bounds on greedy policies based on imperfect value functions. </title> <type> Technical Report NU-CCS-93-14, </type> <institution> Northeastern University, College of Computer Science, </institution> <address> Boston, MA, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: One important result bounds the performance of the current greedy policy as a function of the Bellman residual of the current value function <ref> [134] </ref>.
Reference: [135] <author> Stewart Wilson. </author> <title> Classifier fitness based on accuracy. </title> <journal> Evolutionary Computation, </journal> <volume> 3(2) </volume> <pages> 147-173, </pages> <year> 1995. </year>
Reference-contexts: Recently, this approach has been reexamined using insights from the reinforcement-learning literature, with some success. Dorigo did a comparative study of Q-learning and classifier systems [36]. Cliff and Ross [26] start with Wilson's zeroth-level classifier system <ref> [135] </ref> and add one and two-bit memory registers. They find that, although their system can learn to use short-term memory registers effectively, the approach is unlikely to scale to more complex environments.
Reference: [136] <author> W. Zhang and T. G. Dietterich. </author> <title> A reinforcement learning approach to job-shop scheduling. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intellience, </booktitle> <year> 1995. </year> <month> 277 </month>
Reference-contexts: have experimented with this approach: Boyan and Moore [18] used local memory-based methods in conjunction with value iteration; Lin [59] used backpropagation networks for Q-learning; Watkins [128] used CMAC for Q-learning; Tesauro [118, 120] used backpropagation for learning the value function in backgammon (described in Section 8.1); Zhang and Dietterich <ref> [136] </ref> used backpropagation and T D () to learn good strategies for job-shop scheduling. Although there have been some positive examples, in general there are unfortunate interactions between function approximation and the learning rules.
References-found: 136

