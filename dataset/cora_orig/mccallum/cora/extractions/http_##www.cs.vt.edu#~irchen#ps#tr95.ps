URL: http://www.cs.vt.edu/~irchen/ps/tr95.ps
Refering-URL: http://www.cs.vt.edu/~irchen/
Root-URL: http://www.cs.vt.edu
Title: A Reliability Model for Real-Time Rule-Based Expert Systems  
Author: Ing-Ray Chen, Member IEEE Tawei Tsao 
Keyword: Key Words: Rule-based expert systems, Reliability model, Real-time, Simulation, Petri nets, Markovian process. Reader Aids  
Note: Summary Conclusions  
Address: University  
Affiliation: University of Mississippi, University  University of Mississippi,  
Abstract: Purpose: Present a reliability model of expert systems Special math needed for explanations: Petri net concepts Special math needed to use results: None Results useful to: Expert system designers and reliability analysts This paper utilizes two modeling tools to analyze the reliability of real-time expert systems: a stochastic Petri net (SPN) for computing the conditional response time distribution given that a fixed number of expert system Match-Select-Act cycles are executed, and a simulation search tree for 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bagchi and A.K. Sen, </author> <title> "Average-case analysis of heuristic search," </title> <booktitle> Search in Artificial Intelligence, </booktitle> <editor> (L. Kanal & V. Kumar, eds), </editor> <year> 1988, </year> <pages> pp 131-165; Springer-Verlag. </pages>
Reference-contexts: Another related research area focuses on obtaining the average number of nodes expanded (and thus the average number of cycles executed) by a heuristic-based, conflict-resolution algorithm such as A fl <ref> [1, 27] </ref>, assuming that the time required to expand a node in an expert system inference tree or graph is constant. The assumption that the cycle time less the time for the select phase (i.e., the time for matching and acting) is constant is not appropriate for expert systems. <p> A fl <ref> [1, 27, 29] </ref> is used as the conflict-resolution algorithm in the select phase with a goal of finding a cost-effective solution path.
Reference: [2] <author> R.E. Barlow, F. Proschan, </author> <title> Statistical Theory of Reliability and Life Testing, </title> <publisher> 1975; Holt, Rinehart and Winston, Inc., </publisher> <address> New York. </address>
Reference-contexts: Later, we will use a reward SPN model to compute F (t p ). Other than F (t p ), Equation (2) also requires the parameterization of h and P C (t p ). While the assessment of h (the hardware reliability) is subject to standard techniques <ref> [2] </ref>, P C (t p ) depends on whether the conflict-resolution algorithm used in the select phase has any fundamental limitations.
Reference: [3] <author> F.B. Bastani and I.R. Chen, </author> <title> "The reliability of embedded AI systems," </title> <journal> IEEE Expert, </journal> <volume> vol 8, </volume> <year> 1993 </year> <month> Apr, </month> <pages> pp. 72-78. </pages>
Reference-contexts: This fault type can cause the following failures to occur. 1. Fuzzy-output failures <ref> [3, 4] </ref>: The output solution found by an expert system program may not be correct all the time.
Reference: [4] <author> F.B. Bastani, I.R. Chen, and T. Tsao, </author> <title> "Reliability of systems with a fuzzy correctness criterion," </title> <booktitle> Annual Reliability and Maintainability Symposium, </booktitle> <year> 1994. </year>
Reference-contexts: We consider hard real-time environments where a violation of real-time deadline is considered a system failure. The notion of "soft" timing failures where the accumulation of a series of "soft" timing failures can cause a system failure <ref> [4] </ref> is not considered in this paper. Two types of faults are considered in our reliability definition. The first type is due to software residual faults, commonly called program bugs, which, 8 when executed under particular conditions, can cause a software failure. <p> This fault type can cause the following failures to occur. 1. Fuzzy-output failures <ref> [3, 4] </ref>: The output solution found by an expert system program may not be correct all the time.
Reference: [5] <author> G. Ciardo, J. Muppala, and K. Trivedi, "SPNP: </author> <title> Stochastic Petri Net Package", </title> <booktitle> Proc. 3rd Int'l Workshop Petri Nets and Performance Models, </booktitle> <year> 1989, </year> <note> pp 142-151; CS Press. </note>
Reference-contexts: To simplify the analysis, the firing times of other transitions are exponentially distributed, thus rendering the Petri net stochastic in nature and susceptible to solution techniques provided by a software tool called the Stochastic Petri Net Package (SPNP) <ref> [5, 22] </ref>. The approach described here can be easily extended to Extended Stochastic Petri Net (ESPN) [9] models in which firing times are general distributions.
Reference: [6] <author> A. Cruise, et al., "Yes/L1: </author> <title> Integrated rule-based procedural and real-time programming for industrial applications," </title> <booktitle> Proc. 3rd Conf. Artificial Intelligence Applications, </booktitle> <year> 1987, </year> <pages> pp 134-139. </pages>
Reference-contexts: research area is aimed at reducing the number of expert system cycles for reaching a decision by using a heuristic-based 3 algorithm to resolve conflicts regarding which rule or group of rules should be fired, typically by modifying an existing conflict-resolution strategy of an expert system shell such as OPS5 <ref> [6, 17] </ref> or AF [8, 13].
Reference: [7] <author> I.R. Chen and F.B. </author> <title> Bastani, </title> <journal> "Effect of Artificial Intelligence planning-procedures on system reliability," IEEE Trans. Reliability, </journal> <volume> vol 40, </volume> <year> 1991 </year> <month> Aug, </month> <pages> pp 364-369. 32 </pages>
Reference-contexts: Authors" at the rear of each issue. 2.2 Definitions The system reliability of an expert system can be defined as the probability that, for a problem-solving request (or mission) issued from the environment, the system can successfully plan and execute a response without causing a hardware, software or timing failure <ref> [7] </ref>.
Reference: [8] <author> I.R. Chen and B. Poole, </author> <title> "Performance of rule grouping on a real-time expert system architecture," </title> <journal> to appear in IEEE Trans. Knowledge and Data Eng. </journal>
Reference-contexts: at reducing the number of expert system cycles for reaching a decision by using a heuristic-based 3 algorithm to resolve conflicts regarding which rule or group of rules should be fired, typically by modifying an existing conflict-resolution strategy of an expert system shell such as OPS5 [6, 17] or AF <ref> [8, 13] </ref>.
Reference: [9] <editor> J.B. Dugan et al., </editor> <title> "Extended stochastic Petri nets: applications and analysis," Performance 84, </title> <editor> (E. Gelenbe, ed.), </editor> <year> 1984, </year> <note> pp 507-519; Elsevier Science Publishers. </note>
Reference-contexts: The approach described here can be easily extended to Extended Stochastic Petri Net (ESPN) <ref> [9] </ref> models in which firing times are general distributions.
Reference: [10] <author> C.L. Forgy, </author> <note> OPS5 User's Manual, CS-81-135, 1981; Carnegie-Mellon University. </note>
Reference-contexts: Expert system compilers based on these matching algorithms have been implemented for OPS5 production system programs <ref> [10, 15, 21] </ref>. These studies focused on the (sequential or parallel) speed-up of the match phase [21] without considering the select phase or simply assumed that a static conflict-resolution policy has been used (e.g., the salience feature in CLIPS [12] or the top-rule first policy [14]).
Reference: [11] <author> C.L. Forgy, </author> <title> "Rete: a fast algorithm for the many pattern/many object pattern match problem," </title> <journal> Artificial Intelligence, </journal> <year> 1982, </year> <pages> pp 17-37. </pages>
Reference-contexts: Previous studies regarding the Match-Select-Act cycle have been centered around the performance analysis of each separate phase. Furthermore, these studies are conducted independently. For the match phase, the emphasis is on the performance improvement due to the employment of certain matching algorithms [21, 24, 28], such as the Rete <ref> [11] </ref> and Treat [20] algorithms. <p> place tmatch ( tmatch ): tmatch is the rate at which the matching algorithm can process a fact change, a parameter which may be determined by analyzing the run-time characteristics of 23 the expert system (e.g., as that performed in [15]), depending on the specific matching algorithm (e.g., the Rete <ref> [11] </ref> or Treat [20] algorithm) employed in the match phase. In general, this rate may be obtained by first measuring the average numbers of tests on constant-nodes, ff-memory-nodes, fi-memory-nodes, and-nodes, and or-nodes per fact change; and then multiplying these numbers with their corresponding times needed to perform the tests. 6.
Reference: [12] <author> J.C. Giarratano, </author> <title> CLIPS User's Guide, 1988; Lyndon B. </title> <institution> Johnson Space Center. </institution>
Reference-contexts: These studies focused on the (sequential or parallel) speed-up of the match phase [21] without considering the select phase or simply assumed that a static conflict-resolution policy has been used (e.g., the salience feature in CLIPS <ref> [12] </ref> or the top-rule first policy [14]). <p> However, this may result in performance degradation because rules are selected statically (e.g. the static priority policy in CLIPS <ref> [12] </ref>) without considering the possibility of selecting rules heuristically may lead the system to reach a decision more quickly.
Reference: [13] <author> P.E. Green, </author> <title> "AF: A framework for real-time distributed cooperative problem solving," </title> <booktitle> Distributed Artificial Intelligence, </booktitle> <editor> (M. N. Huhns, ed.) </editor> <year> 1987, </year> <pages> pp 153-176; Morgan Kaufman. </pages>
Reference-contexts: at reducing the number of expert system cycles for reaching a decision by using a heuristic-based 3 algorithm to resolve conflicts regarding which rule or group of rules should be fired, typically by modifying an existing conflict-resolution strategy of an expert system shell such as OPS5 [6, 17] or AF <ref> [8, 13] </ref>.
Reference: [14] <author> P.E. Green, </author> <title> A data driven mechanism for the execution of production rules in real-time computer based systems, </title> <booktitle> 1991; The Real-Time Intelligent Systems Cooperation. </booktitle>
Reference-contexts: These studies focused on the (sequential or parallel) speed-up of the match phase [21] without considering the select phase or simply assumed that a static conflict-resolution policy has been used (e.g., the salience feature in CLIPS [12] or the top-rule first policy <ref> [14] </ref>).
Reference: [15] <author> A. Gupta, </author> <title> Parallelism in Production Systems, </title> <publisher> 1987; Morgan Kaufman. </publisher> <pages> 33 </pages>
Reference-contexts: Expert system compilers based on these matching algorithms have been implemented for OPS5 production system programs <ref> [10, 15, 21] </ref>. These studies focused on the (sequential or parallel) speed-up of the match phase [21] without considering the select phase or simply assumed that a static conflict-resolution policy has been used (e.g., the salience feature in CLIPS [12] or the top-rule first policy [14]). <p> Also, the average time complexity analysis is not useful for system reliability assessment because it cannot account for the variation of the system response time. For the act phase, studies have been conducted to investigate the performance gain due to parallel rule firing <ref> [15, 16] </ref>. The basic idea is to reduce the number of Match-Select-Act cycles by applying an interference detection algorithm in the select phase to choose as many non-interfering rule instanti-ations as possible [16]. These non-interfering rule instantiations are then fired simultaneously in the act phase. <p> This distribution function may be obtained by parsing the expert system rule set (e.g., as that performed in <ref> [15] </ref>). On the other hand, m ftr can be associated with a multiplicity function that will generate a random number characterizing the average number of rule instantiations per fact, which may be obtained by analyzing the run-time characteristics of the expert system (e.g., as that performed in [15]). <p> that performed in <ref> [15] </ref>). On the other hand, m ftr can be associated with a multiplicity function that will generate a random number characterizing the average number of rule instantiations per fact, which may be obtained by analyzing the run-time characteristics of the expert system (e.g., as that performed in [15]). It should be noted that although the number of rules instantiated per fact change can be determined this way, the matching algorithm only handles one fact change at a time since the arc multiplicity of the input arc from place new-facts to transition tmatch is 1. <p> A rule firing will result in an average of b p positive and b n negative rule instantiations to the conflict set. (This condition applies to several expert systems described in <ref> [15] </ref> where the average number of changes made to the conflict set per production rule firing as well as the average size of the conflict set may be statistically measured.) Further, b p &gt; b n , and therefore the search space for formulating a decision (or finding a solution path) <p> The transition rate of place tmatch ( tmatch ): tmatch is the rate at which the matching algorithm can process a fact change, a parameter which may be determined by analyzing the run-time characteristics of 23 the expert system (e.g., as that performed in <ref> [15] </ref>), depending on the specific matching algorithm (e.g., the Rete [11] or Treat [20] algorithm) employed in the match phase.
Reference: [16] <author> T. Ishida, </author> <title> "Parallel rule firing in production systems," </title> <journal> IEEE Trans. Knowledge and Data Eng., </journal> <volume> vol 3, </volume> <year> 1991 </year> <month> Mar, </month> <pages> pp 11-17. </pages>
Reference-contexts: Also, the average time complexity analysis is not useful for system reliability assessment because it cannot account for the variation of the system response time. For the act phase, studies have been conducted to investigate the performance gain due to parallel rule firing <ref> [15, 16] </ref>. The basic idea is to reduce the number of Match-Select-Act cycles by applying an interference detection algorithm in the select phase to choose as many non-interfering rule instanti-ations as possible [16]. These non-interfering rule instantiations are then fired simultaneously in the act phase. <p> The basic idea is to reduce the number of Match-Select-Act cycles by applying an interference detection algorithm in the select phase to choose as many non-interfering rule instanti-ations as possible <ref> [16] </ref>. These non-interfering rule instantiations are then fired simultaneously in the act phase. Since all non-interfering rules can be fired in every cycle assuming infinite processing elements are available, there is no need to use any conflict-resolution algorithm in the select phase. These studies (for example, [16]) do not include the <p> rule instanti-ations as possible <ref> [16] </ref>. These non-interfering rule instantiations are then fired simultaneously in the act phase. Since all non-interfering rules can be fired in every cycle assuming infinite processing elements are available, there is no need to use any conflict-resolution algorithm in the select phase. These studies (for example, [16]) do not include the effect of matching. Furthermore, similar to the studies conducted in other phases, the performance evaluation 4 only concentrates on the average time behavior of the system. We propose a model that ties in all three phases of the Match-Select-Act cycle.
Reference: [17] <author> M. Karnaugh et al., </author> <title> "A computer operator's expert system," </title> <booktitle> Proc. 7th Inter. Conf. Computer Communications, </booktitle> <year> 1985, </year> <pages> pp 810-815. </pages>
Reference-contexts: research area is aimed at reducing the number of expert system cycles for reaching a decision by using a heuristic-based 3 algorithm to resolve conflicts regarding which rule or group of rules should be fired, typically by modifying an existing conflict-resolution strategy of an expert system shell such as OPS5 <ref> [6, 17] </ref> or AF [8, 13].
Reference: [18] <author> M.A. Marsan, G. Conte, and G. </author> <title> Balbo, "A class of generalized stochastic Petri nets for the performance evaluation of multiprocessor systems," </title> <journal> ACM Trans. Computing Systems, </journal> <volume> vol 2, </volume> <year> 1984 </year> <month> May, </month> <pages> pp 93-122. </pages>
Reference-contexts: In doing so, an equation for system reliability of expert systems is first derived. Then, by utilizing a reward SPN <ref> [18] </ref> describing the intrinsic Match-Select-Act cycle of expert systems to account for the response time variation in all three phases, the parameters identified by the equation are parameterized (i.e., computed using analytical or statistical means), allowing the system reliability to be computed. 2 Notation, Definitions & Assumptions 2.1 Notation R system
Reference: [19] <author> W. Mettrey, </author> <title> "A comparative evaluation of expert system tools," </title> <booktitle> IEEE Computer, </booktitle> <year> 1991 </year> <month> Feb, </month> <pages> pp 19-31. </pages>
Reference-contexts: The performance 12 of the system may be improved by using heuristic-based conflict-resolution algorithms in the select phase (such as the Means-Ends-Analysis algorithm in OPS5 based on recency and specificity <ref> [19] </ref> or A fl ). However, to avoid compromising system reliability, some admissibility conditions may have to be satisfied to guarantee P C (t p ) = 1.
Reference: [20] <author> D.P Miranker, </author> <title> Treat: a new and efficient match algorithm for AI production systems, </title> <year> 1989; </year> <month> Pittman/Morgan-Kaufman. </month>
Reference-contexts: Furthermore, these studies are conducted independently. For the match phase, the emphasis is on the performance improvement due to the employment of certain matching algorithms [21, 24, 28], such as the Rete [11] and Treat <ref> [20] </ref> algorithms. <p> tmatch ): tmatch is the rate at which the matching algorithm can process a fact change, a parameter which may be determined by analyzing the run-time characteristics of 23 the expert system (e.g., as that performed in [15]), depending on the specific matching algorithm (e.g., the Rete [11] or Treat <ref> [20] </ref> algorithm) employed in the match phase. In general, this rate may be obtained by first measuring the average numbers of tests on constant-nodes, ff-memory-nodes, fi-memory-nodes, and-nodes, and or-nodes per fact change; and then multiplying these numbers with their corresponding times needed to perform the tests. 6.
Reference: [21] <author> D.P Miranker, and B.J. Lofaso, </author> <title> "The organization and performance of a TREAT-based production system compiler", </title> <journal> IEEE Trans. Knowledge and Data Eng., </journal> <volume> vol 3, </volume> <year> 1991 </year> <month> Mar, </month> <pages> pp 3-10. </pages>
Reference-contexts: Previous studies regarding the Match-Select-Act cycle have been centered around the performance analysis of each separate phase. Furthermore, these studies are conducted independently. For the match phase, the emphasis is on the performance improvement due to the employment of certain matching algorithms <ref> [21, 24, 28] </ref>, such as the Rete [11] and Treat [20] algorithms. <p> Expert system compilers based on these matching algorithms have been implemented for OPS5 production system programs <ref> [10, 15, 21] </ref>. These studies focused on the (sequential or parallel) speed-up of the match phase [21] without considering the select phase or simply assumed that a static conflict-resolution policy has been used (e.g., the salience feature in CLIPS [12] or the top-rule first policy [14]). <p> Expert system compilers based on these matching algorithms have been implemented for OPS5 production system programs [10, 15, 21]. These studies focused on the (sequential or parallel) speed-up of the match phase <ref> [21] </ref> without considering the select phase or simply assumed that a static conflict-resolution policy has been used (e.g., the salience feature in CLIPS [12] or the top-rule first policy [14]).
Reference: [22] <author> J.K. Muppala, </author> <title> S.P. Woolet and K.S. Trivedi, "Real-time systems performance in the presence of failures", </title> <booktitle> IEEE Computer, </booktitle> <year> 1991 </year> <month> May, </month> <pages> pp 37-47. </pages>
Reference-contexts: To simplify the analysis, the firing times of other transitions are exponentially distributed, thus rendering the Petri net stochastic in nature and susceptible to solution techniques provided by a software tool called the Stochastic Petri Net Package (SPNP) <ref> [5, 22] </ref>. The approach described here can be easily extended to Extended Stochastic Petri Net (ESPN) [9] models in which firing times are general distributions.
Reference: [23] <author> J.D. Musa, A. Iannino, and K. Okumoto, </author> <title> Software Reliability: Measurement, Prediction, and Application, </title> <publisher> 1987; McGraw-Hill. </publisher> <pages> 34 </pages>
Reference-contexts: Two types of faults are considered in our reliability definition. The first type is due to software residual faults, commonly called program bugs, which, 8 when executed under particular conditions, can cause a software failure. For this type of fault, existing software reliability models <ref> [23] </ref> are applicable for estimating the software-failure rate. In general, this software-failure rate decreases as more time is spent in testing and debugging the program.
Reference: [24] <author> P. Nayak, A. Gupta and P. Rosenbloom, </author> <title> "Comparison of the Rete and Treat production matchers for SOAR", </title> <booktitle> Proc. 6th Nat. Conf. Artificial Intelligence, </booktitle> <year> 1988, </year> <pages> pp 693-698. </pages>
Reference-contexts: Previous studies regarding the Match-Select-Act cycle have been centered around the performance analysis of each separate phase. Furthermore, these studies are conducted independently. For the match phase, the emphasis is on the performance improvement due to the employment of certain matching algorithms <ref> [21, 24, 28] </ref>, such as the Rete [11] and Treat [20] algorithms.
Reference: [25] <author> W.R. Nelson, </author> <title> "REACTOR: an expert system for diagnosis and treatment of nuclear reactor accidents," </title> <booktitle> Proc. 2nd Inter. Conf. Artificial Intelligence, </booktitle> <year> 1982, </year> <pages> pp 296-301. </pages>
Reference-contexts: fi Real T ime Constraint (t R ) Reliability (R system ) ? * = 0:1 + * = 0:5 fi * = 0:9 4.3 Computation of System Reliability As a specific example of the utility of our expert system model, consider a system like the REACTOR monitoring expert system <ref> [25, 26] </ref> embedded in a nuclear power plant for recommending an appropriate strategy for core cooling safety during an emergency. The function of the system is to select the most efficient path out of all available paths which can be used to provide core cooling under a real-time constraint.
Reference: [26] <author> W.R. Nelson, </author> <title> Response Trees and Expert Systems for Nuclear Reactor Operations, 1984 Feb; EG&G Idaho, </title> <publisher> Inc. </publisher>
Reference-contexts: Naturally, N max X P (N ) = 1 An extreme case is P (N max ) = 1 with all leaf nodes at depth N max being solution nodes, e.g., the response trees for nuclear reactor operations <ref> [26] </ref>. <p> solution node (and thus the optimal solution node) that is to be found by A fl is located at depth N , but other nonoptimal solution nodes may exist at the same or other depths of the tree if that information is given, e.g., all leaf nodes are solution nodes <ref> [26] </ref>. A simulation run for computing f cycle (jjN ) consists of a sufficient number of replication runs such that the confidence level is 95%. <p> fi Real T ime Constraint (t R ) Reliability (R system ) ? * = 0:1 + * = 0:5 fi * = 0:9 4.3 Computation of System Reliability As a specific example of the utility of our expert system model, consider a system like the REACTOR monitoring expert system <ref> [25, 26] </ref> embedded in a nuclear power plant for recommending an appropriate strategy for core cooling safety during an emergency. The function of the system is to select the most efficient path out of all available paths which can be used to provide core cooling under a real-time constraint.
Reference: [27] <author> J. Pearl, </author> <title> Heuristics, </title> <publisher> 1984; Addison-Wesley. </publisher>
Reference-contexts: Another related research area focuses on obtaining the average number of nodes expanded (and thus the average number of cycles executed) by a heuristic-based, conflict-resolution algorithm such as A fl <ref> [1, 27] </ref>, assuming that the time required to expand a node in an expert system inference tree or graph is constant. The assumption that the cycle time less the time for the select phase (i.e., the time for matching and acting) is constant is not appropriate for expert systems. <p> that the heuristic estimate of any rule instantiation in the conflict set, that is, the estimate of the distance in terms of the execution cost from a rule in the conflict set to the nearest rule leading to termination, must be not greater than the actual distance of that rule <ref> [27] </ref>. When this condition is violated, A fl may lead to occasional failures. Assumption 5. The admissibility requirement of the conflict-resolution algorithm is satisfied by the design so that P C (t p ) = 1. <p> A fl <ref> [1, 27, 29] </ref> is used as the conflict-resolution algorithm in the select phase with a goal of finding a cost-effective solution path. <p> Furthermore, to guarantee P C (t p ) = 1, the admissibility condition 0 h (n) h fl (n) is satisfied, thus guaranteeing that A fl will always find a solution path with the cheapest cost <ref> [27] </ref>. 3. The error of the heuristic estimates, h fl (n) h (n), is of relative type [27], and the error function Y (n) = h fl (n) is uniformly distributed over the interval [0; *], 0 * 1, with * characterizing the degree to which h (n) deviates from h <p> P C (t p ) = 1, the admissibility condition 0 h (n) h fl (n) is satisfied, thus guaranteeing that A fl will always find a solution path with the cheapest cost <ref> [27] </ref>. 3. The error of the heuristic estimates, h fl (n) h (n), is of relative type [27], and the error function Y (n) = h fl (n) is uniformly distributed over the interval [0; *], 0 * 1, with * characterizing the degree to which h (n) deviates from h fl (n) and thus the complexity of the A fl algorithm. <p> To see this, it is instructive to refer to the equation derived in <ref> [27] </ref> for the average number of nodes (or rule instantiations) expanded by A fl in a b-ary tree, E (Z), assuming that the depth of the solution path is N : E (Z) = N + 1 + b j=1 d=1 d Y q j;k where q j;k represents the probability
Reference: [28] <author> M.I. Schor, et al. </author> <title> "Advances in Rete pattern matching," </title> <booktitle> Proc. 4th Nat. Conf. Artificial Intelligence, </booktitle> <year> 1986, </year> <pages> pp 226-232. </pages>
Reference-contexts: Previous studies regarding the Match-Select-Act cycle have been centered around the performance analysis of each separate phase. Furthermore, these studies are conducted independently. For the match phase, the emphasis is on the performance improvement due to the employment of certain matching algorithms <ref> [21, 24, 28] </ref>, such as the Rete [11] and Treat [20] algorithms.

References-found: 28

