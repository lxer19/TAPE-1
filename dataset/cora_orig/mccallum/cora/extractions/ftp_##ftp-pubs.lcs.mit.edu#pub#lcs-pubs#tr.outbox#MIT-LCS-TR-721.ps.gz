URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/tr.outbox/MIT-LCS-TR-721.ps.gz
Refering-URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/listings/tr700.html
Root-URL: 
Title: Message-Driven Dynamics  
Author: by Richard Anton Lethin William J. Dally Dr. Arthur C. Smith 
Degree: SUBMITTED TO THE DEPARTMENT IN PARTIAL FULFILLMENT OF THE REQUIREMENTS OF THE DEGREE OF DOCTOR OF PHILOSOPHY IN ELECTRICAL ENGINEERING AND COMPUTER SCIENCE at the  c fl1997 Richard A. Lethin. All rights reserved. The author hereby grants MIT permission to reproduce and distribute publicly paper and electronic copies of this thesis document in whole or in part. Signature of Author  Certified by  Professor of Electrical Engineering and Computer Science Thesis Supervisor Accepted by  Chairman, Departmental Committee on Graduate Students  
Date: (1985)  MARCH 1997  March 18, 1997  
Address: (1991) B.S., Yale College  
Affiliation: M.S., Massachusetts Institute of Technology  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: <institution> 250 Bibliography </institution>
Reference: [AC94] <author> Kazuhiro Aoyama and Andrew A. Chien. </author> <title> The cost of adaptivity and virtual lanes in a wormhole router. </title> <journal> Journal of VLSI Design, </journal> <year> 1994. </year>
Reference-contexts: The J-Machine network provides in-order delivery and reliable transmission (though not fault-tolerant). However, it does not provide adequate flow control mechanisms. Karamcheti and Chien report [KC94] that providing these properties in software (rather than in the network) can be expensive. Aoyama and Chien <ref> [AC94] </ref> report the cost of implementing these features in hardware. Kim, Liu and Chien propose [KLC94] that a good solution to this problem is "Compression-less Routing" away to speculatively inject wormhole messages, but with clean flow control feedback from the network and still allowing adaptivity.
Reference: [Adv95] <author> Vikram S. Adve. </author> <title> Private communication solver source code, </title> <month> August </month> <year> 1995. </year>
Reference-contexts: So, the research for this thesis required re-implementing their model, making the following changes: * An implementation choice to abstract the network topology and routing from the model. It is not apparent from [AV94], but the AV solver code had hard-coded the topology into distinct solvers <ref> [Adv95] </ref>.
Reference: [Aky88] <author> Ian F. Akyildiz. </author> <title> On the exact and approximate throughput analysis of closed queueing networks with blocking. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(1) </volume> <pages> 62-70, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: This is not a condemnation of the skill of the researchers producing this literature, more an acknowledgment of the difficulty of the problem and idealism of the goal. In one paper of note: Akyildiz <ref> [Aky88] </ref> considers BAS networks which meet the deadlock-freedom criterion (fewer customers than the capacity of the smallest blocking cycle) and notes that the throughput can be estimated for solving specially constructed smaller nonblocking 38 networks which have comparable state spaces (though different structure).
Reference: [AV91] <author> Vikram S. Adve and Mary K. Vernon. </author> <title> Performance analysis of multiprocessor mesh interconnection networks with wormhole routing. </title> <type> Technical Report 1001, </type> <institution> Computer Sciences Department, University of Wisconsin-Madison, </institution> <month> February </month> <year> 1991. </year>
Reference-contexts: The design is based upon the routing used in the J-Machine [Dal90a]; however, the T3D network has a torus topology so that it requires the extra deadlock-breaking virtual 33 channels that Dally invented [DS87]. To fight the isomorphism-loss (noted by Adve and Vernon <ref> [AV91, AV94] </ref>) that the deadlock-breaking virtual channels cause, Scott and Thor-son [ST94] demonstrate using simulated annealing to optimize the virtual channel routing assignments to balance channel traffic. <p> The techniques for analyzing blocking networks did not prove to be as useful for this thesis as did the Adve and Vernon analysis <ref> [AV91] </ref>; much of the technique in the literature appears to provide only small equivalences or solutions for small networks. This is not a condemnation of the skill of the researchers producing this literature, more an acknowledgment of the difficulty of the problem and idealism of the goal. <p> The chapter shows that when running a heavy uniform and random workload, the equilibrium average queue size on processors near the center of the J-Machine mesh is much larger than on processors near the edges. This J-Machine model is an adaptation of one by Adve and Vernon (AV) <ref> [AV91, AV94] </ref>. Their model incorporates wormhole routing into a closed queueing network that can be solved with Approximate Mean Value Analysis (AMVA). The chapter adapts their model for the J-Machine topology, the unfairness of the J-Machine router, and the Snakes workload. <p> This would suggest using a more homogeneous topology, like a torus. Looking into the network, each processor in a toroidal machine sees the same view as every other. There is a problem with toroidal wormhole networks, because non-homogeneity is introduced by the extra virtual channels that prevent network deadlock <ref> [AV91] </ref>. Still, this probably doesn't make that much of a difference in the size of the accumulation. It would be easy to test this hypothesis at another time. <p> computation that stems from this research, and with the increasingly prevalent integration of DRAM and logic, now is the time to design the next smart-memory message driven processor. 225 Appendix A Adve and Vernon Wormhole Model This appendix reviews the Adve and Vernon model (AV) for closed deterministic wormhole networks <ref> [AV91, AV94] </ref>. The appendix modifies this model for the J-Machine, with the goal being to show how the equilibrium mean queue size of the processors changes under different load conditions. The results of this model for the J-Machine are presented in Section 5.2. <p> This waiting time for other virtual channels on the same virtual channel 9 <ref> [AV91] </ref> used u link; c directly as w link;c . This is a good estimate of Equation (A.13) if u link; c is small.
Reference: [AV94] <author> Vikram S. Adve and Mary K. Vernon. </author> <title> Performance analysis of mesh interconnection networks with deterministic routing. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 5(3) </volume> <pages> 225-246, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: The design is based upon the routing used in the J-Machine [Dal90a]; however, the T3D network has a torus topology so that it requires the extra deadlock-breaking virtual 33 channels that Dally invented [DS87]. To fight the isomorphism-loss (noted by Adve and Vernon <ref> [AV91, AV94] </ref>) that the deadlock-breaking virtual channels cause, Scott and Thor-son [ST94] demonstrate using simulated annealing to optimize the virtual channel routing assignments to balance channel traffic. <p> A simple torus is homogeneous, and although the network design contributed by Dally in [DS87] breaks this homogeneity (a result noted by Adve and Vernon <ref> [AV94] </ref>), the deadlock-broken inhomogeneous torus would still have imparted less imbalance than the mesh. 52 the cube for connecting I/O devices [Nut]. Had the machine been built as a torus, with wrap-around connections, adding I/O devices to the machine would have required splicing special channels in. <p> The chapter shows that when running a heavy uniform and random workload, the equilibrium average queue size on processors near the center of the J-Machine mesh is much larger than on processors near the edges. This J-Machine model is an adaptation of one by Adve and Vernon (AV) <ref> [AV91, AV94] </ref>. Their model incorporates wormhole routing into a closed queueing network that can be solved with Approximate Mean Value Analysis (AMVA). The chapter adapts their model for the J-Machine topology, the unfairness of the J-Machine router, and the Snakes workload. <p> computation that stems from this research, and with the increasingly prevalent integration of DRAM and logic, now is the time to design the next smart-memory message driven processor. 225 Appendix A Adve and Vernon Wormhole Model This appendix reviews the Adve and Vernon model (AV) for closed deterministic wormhole networks <ref> [AV91, AV94] </ref>. The appendix modifies this model for the J-Machine, with the goal being to show how the equilibrium mean queue size of the processors changes under different load conditions. The results of this model for the J-Machine are presented in Section 5.2. <p> Section 5.4.1 makes modifications to the AV model largely pruning AV's support for multiple classes used to model Request/Reply to model the Snakes workload. The AV model is very long. This appendix uses the notation and tabulation, occasionally verbatim, from Adve and Vernon's exposition of the model <ref> [AV94] </ref>. It is because this model is so long, and because of the importance of making clear my debt to their work, that this section is segregated in an appendix. Still, there are original contributions here. These include: corrections to the original model and improvements to handle heavy workloads. <p> The goal of this work here is less to predict processor efficiency than it is to predict the expected processor queue size. Expected queue size is a parameter of the AV model but measurements of it were not reported in <ref> [AV94] </ref>. Furthermore, AV includes some architectural assumptions that differ from the J-Machine's. So, the research for this thesis required re-implementing their model, making the following changes: * An implementation choice to abstract the network topology and routing from the model. It is not apparent from [AV94], but the AV solver code <p> it were not reported in <ref> [AV94] </ref>. Furthermore, AV includes some architectural assumptions that differ from the J-Machine's. So, the research for this thesis required re-implementing their model, making the following changes: * An implementation choice to abstract the network topology and routing from the model. It is not apparent from [AV94], but the AV solver code had hard-coded the topology into distinct solvers [Adv95].
Reference: [BCL + 95] <author> Eric A. Brewer, Frederick T. Chong, Lok T. Liu, Shamik D. Sharma, and John D. Kubiatowicz. </author> <title> Remote queues: Exposing message queues for optimization and atomicity. </title> <booktitle> In Symposium on Parallel Algorithms and Architecture (SPAA), </booktitle> <year> 1995. </year>
Reference-contexts: Within this context, the problem of deadlock formation is strictly within the network (rather than involving the processors or the application). They report that deadlocks actually occur infrequently. Developing an analytical reasoning behind this observation would be interesting. 35 Others Brewer et. al. propose <ref> [BCL + 95] </ref> moving the management of the queueing to the application, proposing an application-network interface called RQ for "Remote Queues." This is in contrast to the J-Machine, which fixes queue and communication policy in hardware.
Reference: [BCMP75] <author> Forest Basket, K. Mani Chandi, Richard R. Muntz, and Fernando G. Palacios. </author> <title> Open, closed, and mixed networks of queues with different classes. </title> <journal> Journal of the ACM, </journal> <volume> 22(2) </volume> <pages> 248-260, </pages> <month> April </month> <year> 1975. </year>
Reference-contexts: Basket et. al. <ref> [BCMP75] </ref> extended this work to a general solution for a more (though not fully) general set of service distributions. <p> Not only does the system not have a product form solution, but it also is not ergodic. BCMP <ref> [BCMP75] </ref>, the "power tool" of product form queuing network solutions, handles a number of different service time distributions, but it does not handle the deterministic service distribution. BCMP handles service distributions that have a property that tends to de-correlate the traffic within the network, called the M!M property [Mun72]. <p> After a class c customer completes service at server i, it moves to server j as a class d customer with probability r i;c:j;d . Because the network is closed, 1 = j=1::N;d=1::C r i;c:j;d . This multiple class network has a product form solution <ref> [BCMP75] </ref>. <p> As Basket et. al. <ref> [BCMP75] </ref> note, the product form solution is ideal for getting marginal distributions (i.e. excluding so much state information) because one can simplify the g i () terms independently. However, a strategy for simplifying Equation (3.99) proved resistant to analysis. <p> However, Snakes demonstrates that one of the most general workloads (simple random tasks walking the machine) is prone to cause queue overflows. 14 Note that this period 4 return to sender could be captured by the BCMP <ref> [BCMP75] </ref> (see Section 3.5.3) but requires 4 classes per processor. 149 Although the queueing analysis in Chapter 3 suggests that the J-Machine's queues are ad-equate, this is only the case for small messages and for light loads. <p> Each class c can have a distinct routing matrix, with elements r ij;c . Multi-class closed Poisson queueing networks have a product form solution <ref> [BCMP75] </ref>. This solution can be obtained by using a multiple-class version of MVA, as follows.
Reference: [BG87] <author> Dimitri Bertsekas and Robert Gallager. </author> <title> Data Networks. </title> <publisher> Prentice Hal, </publisher> <year> 1987. </year> <month> 251 </month>
Reference-contexts: Transmission of the returned messages is done through an alternate virtual network. If the destination queues are not full, they accept the message and a short acknowledgment is sent back to the sender. RTS is a variation on the window flow control algorithm <ref> [BG87, p.117] </ref> and ensures that there is room for the diverted message at the sending processor. This is necessary to prevent a situation in which the message cannot be returned to the sender, because the sender's incoming message queue was full.
Reference: [BGT95] <author> Dimitris Bertsimas, David Gamarnik, and John N. Tsitsiklis. </author> <title> Stability condi-tions for multiclass fluid queueing networks. </title> <institution> Sloan School of Management and Operations Research Center, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: Stability of this sort is trivial to determine in a classic exponential server 37 network [Kle75] but in the context of routing and blocking decision processes is a subject of active research; see, for example Bertsekas et. al. <ref> [BGT95] </ref> or Dai and Weiss [DW94]. Coffman et. al. study [JGG + 95] the asymptotic stability of first and higher moments for a rotating ring in an open-network context; the effort required for this result is impressive. <p> Algorithms for determining the stability of queuing networks with varied service disciplines are an active area of operations research <ref> [BGT95, JGG + 95, DW94] </ref>, and they are not addressed in this thesis.
Reference: [BJK + 95] <author> Robert D. Blumofe, Chistopher F. Joerg, Bradley C. Kuszmaul, Charles E. Leiserson, Keith H. Randall, and Yuli Zhou. Cilk: </author> <title> An efficient multithreaded runtime system. </title> <booktitle> In Proceedings of the Fifth SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <month> July </month> <year> 1995. </year>
Reference-contexts: This thesis applies in the sense that for larger DASH-style machines which might saturate the bisection and have heavier and larger network traffic loads, one might ask how the queue sizes and possibilities of deadlock arise. The thesis provides some answers. Cilk (CM-5) Blumofe et. al.'s Cilk programming system <ref> [BJK + 95] </ref> is more aggressive about using the two virtual networks that the CM-5 provides. This stems from a sophisticated approach to scheduling; see Blumofe's work [BL93] on scheduling multithreaded computations.
Reference: [BK94] <author> Eric A. Brewer and Bradley C. Kuzmaul. </author> <title> How to get good performance from the CM-5 data network. </title> <booktitle> In Proceedings of the 8th international parallel processing symposium (IPPS 94), </booktitle> <pages> pages 858-867, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Cilk (CM-5) Blumofe et. al.'s Cilk programming system [BJK + 95] is more aggressive about using the two virtual networks that the CM-5 provides. This stems from a sophisticated approach to scheduling; see Blumofe's work [BL93] on scheduling multithreaded computations. Brewer and Kuszmaul also show <ref> [BK94] </ref> how to improve Cilk's substrate Strata, observing the formation of bad patterns of traffic and showing how to get good throughput on high-volume all-to-all types of communication patterns. Cray T3D Kessler and Schwarzmeier report [KS93] that the Cray T3D (and T3E) uses wormhole routing.
Reference: [BL93] <author> Robert D. Blumofe and Charles E. Leiserson. </author> <title> Space-efficient scheduling of multithreaded computations. </title> <booktitle> In Proceedings of the Twenty-Fifth Annual ACM Symposium on the Theory of Computing (STOC), </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: This sharp increase in latency occurs at the point when the network saturates. Ideally, the performance would level off as the machine approached saturation. But this is not the case on the J-Machine. Why is this sharp performance loss occurring? 6 See Blumofe and Leiserson <ref> [BL93] </ref> for more about the size problem. 27 processor board in the J-Machine after many runs of the synthetic workload. All of the overflows occur in the center processors. <p> The thesis provides some answers. Cilk (CM-5) Blumofe et. al.'s Cilk programming system [BJK + 95] is more aggressive about using the two virtual networks that the CM-5 provides. This stems from a sophisticated approach to scheduling; see Blumofe's work <ref> [BL93] </ref> on scheduling multithreaded computations. Brewer and Kuszmaul also show [BK94] how to improve Cilk's substrate Strata, observing the formation of bad patterns of traffic and showing how to get good throughput on high-volume all-to-all types of communication patterns.
Reference: [Buz72] <author> Jeffrey P. Buzen. </author> <title> Queueing Network Models of Multiprogramming. </title> <type> PhD thesis, </type> <institution> Harvard University, </institution> <address> Cambridge, MA, </address> <month> August </month> <year> 1972. </year>
Reference-contexts: Chapter 3 primarily requires only the simpler Gordon and Newell solution for the closed queueing network and give ways, based upon that solution, to estimate overflow rates as functions of the number of customers and queue size. The challenge is in overcoming an intractably-large state-space distribution; Buzen <ref> [Buz72, Buz73] </ref> provided some recurrences which help in this problem. Section 3.5.3 does use Basket et. al.'s solution (called BCMP) to attempt to study why the Request/Reply pattern of communication is so much more stable than the unconstrained "Snakes" traffic.
Reference: [Buz73] <author> Jeffrey P. Buzen. </author> <title> Computational algorithms for closed queueing networks with exponential servers. </title> <journal> Communications of the ACM, </journal> <volume> 16(9) </volume> <pages> 527-531, </pages> <year> 1973. </year>
Reference-contexts: Chapter 3 primarily requires only the simpler Gordon and Newell solution for the closed queueing network and give ways, based upon that solution, to estimate overflow rates as functions of the number of customers and queue size. The challenge is in overcoming an intractably-large state-space distribution; Buzen <ref> [Buz72, Buz73] </ref> provided some recurrences which help in this problem. Section 3.5.3 does use Basket et. al.'s solution (called BCMP) to attempt to study why the Request/Reply pattern of communication is so much more stable than the unconstrained "Snakes" traffic. <p> Expected properties of the system can be computed using a sum of that property weighted by the equilibrium probability distribution (Equation (3.6)). Buzen developed techniques for efficiently computing the expected mean values of queue size, throughput, and waiting time <ref> [Buz73] </ref>. However, queue overflow is a dynamic event. <p> For 11 <ref> [Buz73] </ref> gives a simple algorithm for computing this. 93 in a closed network of 512 exponential servers, versus the number of customers per server K=N . <p> With this assumption, estimating the probability that the system is overflowed becomes the problem of estimating the probability that the bottleneck server is overflowed. From Buzen <ref> [Buz73] </ref>: P (k 1 Q) = x 1 G (K Q) ): (3:87) The value G (K Q) is the normalization constant (Equation (3.7)) that one would obtain for the same system of servers, but with only K Q customers. versus the number of customers per server. <p> This simplification is similar to my estimate for the uniform load case. Equation (3.90) is an algebraic simplification that results in the use of a value, P (k 1 = Q) which can be calculated using <ref> [Buz73] </ref>. Therefore, Overflow from Figure 3-2. As with a balanced load, the rate of overflows with an imbalanced load does not increase indefinitely with load, but instead reaches a peak and drops. <p> Chapter 3 avoided the impractical sum by exploiting solution symmetry for uniform workloads and by using Buzen's algorithm <ref> [Buz73] </ref> for imbalanced workloads.
Reference: [CA96] <author> Frederick T. Chong and Anant Agarwal. </author> <title> Shared memory versus message passing for iterative solution of sparse, irregular problems. </title> <type> Technical Report MIT/LCS/TR-697, </type> <institution> Laboratory for Computer Science Massachusetts Institute of Technology, Cambridge, Massachusetts, </institution> <month> October </month> <year> 1996. </year>
Reference-contexts: Second, the Alewife group has concentrated on actual application benchmarks, while in this thesis the focus has been on synthetic benchmarks that try to characterize the J-Machine's overflow problem. Third, the Alewife machine mostly runs shared memory types of applications (though there are some exceptions, notably Chong's work <ref> [CA96] </ref> that contrast shared memory and message passing implementations of applications); as I report in Sections 3.5.3, 4.10, and 5.4.1, the request/reply sort of traffic is substantially more stable with respect to queue sizes than is the synthetic message passing workload (which I call "Snakes").
Reference: [CD88a] <author> Andrew Chien and William J. Dally. </author> <title> CST: An object-oriented concurrent language. </title> <booktitle> In Object-Based Concurrent Programming Workshop, </booktitle> <pages> pages 28-31. </pages> <booktitle> OOPSLA '88, </booktitle> <month> September </month> <year> 1988. </year> <title> Conference held at San Diego, CA. </title> <journal> SIGPLAN Notices, </journal> <month> February </month> <year> 1989. </year>
Reference-contexts: In the case of message queues, one could (really, should) design them so that their overflows smoothly flow into other nearby processors, so that capacity constraints do not impose such stark performance penalties. 21 MOS [HTD], and created the compiler for Concurrent Smalltalk (CST) <ref> [CD88a, CD88b, Hor89, HCD89] </ref>, the system's programming language. Consistent with the philosophy of the machine, CST offered a programming abstraction far from the details of the machine, 4 focused principally on letting the programmer express fine-grained object oriented programs. The effort was extremely successful.
Reference: [CD88b] <author> Andrew Chien and William J. Dally. </author> <title> Object-oriented concurrent programming in CST. </title> <booktitle> In Proceedings of the Third Conference on Hypercube Computers, </booktitle> <pages> pages 434-439. </pages> <note> SIAM, January 1988. Conference held at Pasadena, CA; VLSI memo 88-450. </note>
Reference-contexts: In the case of message queues, one could (really, should) design them so that their overflows smoothly flow into other nearby processors, so that capacity constraints do not impose such stark performance penalties. 21 MOS [HTD], and created the compiler for Concurrent Smalltalk (CST) <ref> [CD88a, CD88b, Hor89, HCD89] </ref>, the system's programming language. Consistent with the philosophy of the machine, CST offered a programming abstraction far from the details of the machine, 4 focused principally on letting the programmer express fine-grained object oriented programs. The effort was extremely successful.
Reference: [Cha87] <author> Linda Chao. </author> <title> Architectural features of a message-driven processor. </title> <type> SB Thesis, </type> <month> May </month> <year> 1987. </year>
Reference: [CKP93] <author> Andrew A. Chien, Vijay Karamcheti, and John Plevyak. </author> <title> The concert system compiler and runtime support for efficient, fine-grained concurrent object-oriented programs. </title> <institution> Department of Computer Science, 1034 W. </institution> <address> Springfield Avenue, Urbana, IL 61801, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Chien's CONCERT Chien, one of the early J-Machine team members, has published a number of excellent papers closely examining interaction of network design and programming. This work comes from his implementation, with Karamcheti and Plevyak, of the Concert programming system <ref> [CKP93] </ref>. With Karamcheti, he highlights [KC94] the effect of network design decisions on end-to-end properties that programmers find valuable: flow control, in-order delivery, and reliable transmission. The J-Machine network provides in-order delivery and reliable transmission (though not fault-tolerant). However, it does not provide adequate flow control mechanisms.
Reference: [CLR90] <author> Thomas H. Cormen, Charles E. Leiserson, and Ronald Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: I have not had much luck getting one from Equation (3.27). 7 An algorithm text such as Cormen, Leiserson, and Rivest's <ref> [CLR90] </ref> gives methods for obtaining asymptotic bounds for one-parameter recurrences, but the recurrence of interest here is over two parameters.
Reference: [CN82] <author> K. Mani Chandy and Doug Neuse. Linearizer: </author> <title> A heuristic algorithm for queueing network models of computer systems. </title> <journal> Communications of the ACM, </journal> <volume> 25(2) </volume> <pages> 126-134, </pages> <month> February </month> <year> 1982. </year>
Reference-contexts: The best-known is the Schweitzer approximation (mentioned in <ref> [CN82] </ref>): q i;c ( ~ K ~e c 0 ) = q i;c ( ~ K) if c 6= c 0 k c q i;c ( ~ K) if c = c 0 (5:14) The Schweitzer approximation is based on an assumption that the system is behaving "rea sonably" in the
Reference: [Dal87] <author> William J. Dally. </author> <title> A VLSI Architecture for Concurrent Data Structures. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Norwood, Massachusetts, </address> <year> 1987. </year>
Reference-contexts: Fine Grained Software The intended software model for the J-Machine is also fine-grained. Tasks running on the machine would be quickly handled and quickly retired, perhaps taking as few as 10-100 cycles <ref> [Dal87, p.135] </ref>. The logic behind this short task model is that dividing an application into many small tasks exposes as much parallelism as possible. Furthermore, many algorithms can easily be structured into these small tasks. <p> This drove the decision to use a 17 3D topology for the network: one indicative characteristic of this network is the fact that messages traveling from one place in the machine to another never need to "double-back" in space: they can travel by the shortest distance to their destination <ref> [Dal87] </ref>. <p> The processors are different from conventional processors: they are Message-Driven Processors (MDPs) <ref> [Dal87, p.183] </ref>. The difference is in the way that tasks are initiated. <p> A good general overview of the MDP is in [DFK + 92]. The early rationale for the architecture of the J-Machine is in Dally's thesis <ref> [Dal87] </ref>. 2 The term "method" is interchangeable with "procedure." 44 of messages over the processors. The J-Machine's sole reliance on the asynchronous remote method invocation for communication distinguishes it from other parallel computers. <p> Finally, Section 4.11 discusses the results and closes the chapter. 4.1 Snakes This chapter evaluates how the J-Machine runs a program called Snakes that creates a heavy closed message passing workload. The name alludes to wormhole routing <ref> [Dal87] </ref>, the algorithm in the J-Machine that delivers the messages between processors.
Reference: [Dal90a] <author> William J. Dally. </author> <title> The J-Machine system. </title> <editor> In Patrick Winston with Sarah A. Shellard, editor, </editor> <booktitle> Artificial Intelligence at MIT: Expanding Frontiers, chapter 21, </booktitle> <pages> pages 536-569. </pages> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Consequentially, a parallel computer built from these "jellybeans" should be cheap and therefore more likely to be cost-effective <ref> [Dal90a] </ref>. Fine Grained Software The intended software model for the J-Machine is also fine-grained. Tasks running on the machine would be quickly handled and quickly retired, perhaps taking as few as 10-100 cycles [Dal87, p.135]. <p> Cray T3D Kessler and Schwarzmeier report [KS93] that the Cray T3D (and T3E) uses wormhole routing. The design is based upon the routing used in the J-Machine <ref> [Dal90a] </ref>; however, the T3D network has a torus topology so that it requires the extra deadlock-breaking virtual 33 channels that Dally invented [DS87].
Reference: [Dal90b] <author> William J. Dally. </author> <title> Network and processor architecture for message-driven computers. </title> <editor> In Suaya and Birtwhistle, editors, </editor> <booktitle> VLSI and Parallel Computation. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference: [Dal90c] <author> William J. Dally. </author> <title> Performance analysis of k-ary n-cube interconnection networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(6), </volume> <month> June </month> <year> 1990. </year>
Reference-contexts: It is a wormhole network with excellent load vs. latency characteristics, as demonstrated analytically and with simulation, running various random and other traffic flows <ref> [Dal90c] </ref>. The routers are simple with little multiplexing and buffering. This makes them fast and cheap. Dally showed that wormhole routers guarantee progress (freedom from deadlock and live-lock) because the link-level blocking within the network cannot form cycles.
Reference: [Dal90d] <author> William J. Dally. </author> <title> Virtual-channel flow control. </title> <booktitle> In Proceedings of the 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 60-68, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Actually, there's evidence that the processor ought to allow preemption in this situation. See [WHJ + 95]. 206 6.2.4 Virtual Channel Flow Control Dally's <ref> [Dal90d] </ref> virtual channel flow control (VCFC) adds a degree of adaptivity within the network, rather than within the processors. With this adaptivity, there are multiple virtual channels within the network. <p> In the next variation, the hardware has two independent alternate virtual networks. In this case, the two alternate virtual networks are prioritized: if a Priority 1 message and a Priority 7 Dally's experiments demonstrated that VCFC conveys a benefit in terms of higher effective maximum network throughput <ref> [Dal90d] </ref>. 207 0 message are contending for the same physical wire, the Priority 1 message is given the wire. This means that traffic applied to Priority 1 will consume network bandwidth completely at the expense of Priority 0 when there is any contention between the two for physical wires.
Reference: [Dal92] <author> William J. Dally. </author> <title> The J-Machine: System support for actors. </title> <editor> In Carl Hewitt and Gul Agha, editors, </editor> <title> Towards Open Information Science. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year> <note> VLSI memo 88-491. </note>
Reference-contexts: The J-Machine hardware was designed to send messages quickly with high throughput and thereby effectively run parallel objected oriented workloads of unstructured and arbitrary traffic. Target applications for this sort of machine might be an AI application of agents or actors <ref> [Dal92] </ref> communicating among themselves, or a virtual reality model with concurrent world modeling and rendering, or a speculative concurrent distributed discrete event simulation.
Reference: [Dal93] <author> William J. Dally. </author> <type> Personal Communication, </type> <year> 1993. </year> <month> 253 </month>
Reference-contexts: With imbalanced loads, however, this may not be sufficient. Dally reports <ref> [Dal93] </ref> that the T3D network implements the return-to-sender algorithm (RTS) that Chapter 6 finds to be ineffective in balancing the load. RTS may be effective for load-imbalance due to burstier traffic. Demonstrating this would be an interesting result.
Reference: [DCF + 89] <author> William J. Dally, Andrew Chien, Stuart Fiske, Waldemar Horwat, John Keen, Michael Larivee, Richard Lethin, Peter Nuth, Scott Wills, Paul Carrick, and Greg Fyler. </author> <title> The J-Machine: A fine-grain concurrent computer. </title> <editor> In G.X. Rit-ter, editor, </editor> <booktitle> Proceedings of the IFIP Congress, </booktitle> <pages> pages 1147-1153. </pages> <publisher> North-Holland, </publisher> <month> August </month> <year> 1989. </year>
Reference: [DDH + 94] <author> William J. Dally, Larry R. Dennison, David Harris, Kinhong Kan, and Thucy-dides Xanthopoulos. </author> <title> The reliable router: A reliable and high-performance communication substrate for parallel computers. </title> <booktitle> In Proceedings of Parallel Computers Routing and Communication Workshop, </booktitle> <year> 1994. </year>
Reference-contexts: But as earlier chapter demonstrated, the consumption assumption is not always true. 4 See <ref> [DDH + 94] </ref> for a way to increase the reliability of wires. 204 This difference in RTS exploits the reliable message delivery in the parallel computer to reduce the amount of memory bandwidth required at the sender.
Reference: [DFK + 92] <author> William J. Dally, J.A. Stuart Fiske, John S. Keen, Richard A. Lethin, Michael D. Noakes, Peter R. Nuth, Roy E. Davison, and Gregory A. Fyler. </author> <title> The Message-Driven Processor: A multicomputer processing node with efficient mechanisms. </title> <journal> IEEE Micro, </journal> <volume> 12(2) </volume> <pages> 23-39, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: This thesis will show that in the J-Machine, this additional burden becomes the most critical performance issue. J-Machine The J-Machine was built by a team of MIT graduate students and staff working with In-tel Corporation engineers to produce the MDP chip <ref> [DFK + 92] </ref>. This team completed a 1024-node machine at MIT in 1992 and brought up the system's micro-kernel, called COS 2 Fine-grained software by our definition involves applications made up of short (10-100 cycles) tasks. <p> For another more substantial example, see Wallach's [NWD93] implementation of a barrier with a coordinated butterfly 1 For a comprehensive description of the MDP, see the Programmer's Manual by Noakes [Noa91]. A good general overview of the MDP is in <ref> [DFK + 92] </ref>. The early rationale for the architecture of the J-Machine is in Dally's thesis [Dal87]. 2 The term "method" is interchangeable with "procedure." 44 of messages over the processors. The J-Machine's sole reliance on the asynchronous remote method invocation for communication distinguishes it from other parallel computers.
Reference: [DK85] <author> William J. Dally and James T. Kajiya. </author> <title> An object oriented architecture. </title> <booktitle> In Proceedings of the 12th International Symposium on Computer Architecture, </booktitle> <pages> pages 154-161, </pages> <address> Boston, MA, </address> <month> June </month> <year> 1985. </year>
Reference: [DKN93] <author> William J. Dally, John S. Keen, and Michael D. Noakes. </author> <title> The J-machine multi-computer: Architecture and evaluation. </title> <booktitle> In Compcon Spring 93, </booktitle> <pages> pages 183-188. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> February </month> <year> 1993. </year>
Reference: [DS87] <author> William J. Dally and Charles L. Seitz. </author> <title> Deadlock-free message routing in multiprocessor interconnection networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(5):547-53, </volume> <month> May </month> <year> 1987. </year>
Reference-contexts: Cray T3D Kessler and Schwarzmeier report [KS93] that the Cray T3D (and T3E) uses wormhole routing. The design is based upon the routing used in the J-Machine [Dal90a]; however, the T3D network has a torus topology so that it requires the extra deadlock-breaking virtual 33 channels that Dally invented <ref> [DS87] </ref>. To fight the isomorphism-loss (noted by Adve and Vernon [AV91, AV94]) that the deadlock-breaking virtual channels cause, Scott and Thor-son [ST94] demonstrate using simulated annealing to optimize the virtual channel routing assignments to balance channel traffic. <p> inhomogeneity being inherently problematic, why was the J-Machine built as a mesh? The reason is that the mesh topology provides "dangling" network connections on the edge of 8 In his work that led to the J-Machine's architecture, Dally contributed a now well-known solution for building networks with a torus topology <ref> [DS87] </ref>. However, the torus topology is not used in the J-Machine: the J-Machine is a mesh because the mesh provides the edge-channels for connecting I/O devices. A simple torus is homogeneous, and although the network design contributed by Dally in [DS87] breaks this homogeneity (a result noted by Adve and Vernon <p> now well-known solution for building networks with a torus topology <ref> [DS87] </ref>. However, the torus topology is not used in the J-Machine: the J-Machine is a mesh because the mesh provides the edge-channels for connecting I/O devices. A simple torus is homogeneous, and although the network design contributed by Dally in [DS87] breaks this homogeneity (a result noted by Adve and Vernon [AV94]), the deadlock-broken inhomogeneous torus would still have imparted less imbalance than the mesh. 52 the cube for connecting I/O devices [Nut]. <p> Had the machine been built as a torus, with wrap-around connections, adding I/O devices to the machine would have required splicing special channels in. Furthermore, making the network toroidal would probably have necessitated adding additional deadlock-breaking virtual channels to the routers (Dally's result <ref> [DS87] </ref>), doubling their silicon area. Because the routers take up a substantial portion of the MDP area, doubling their size would have significantly increased the cost of the MDP chip. <p> Dropping between dimensions in the tiered router structure also takes one clock cycle. 10 See <ref> [DS87] </ref> for a more detailed description of wormhole networks. 11 The word flit means flow control unit. <p> If there is contention for the wires, the ownership is switched between the two directions on a cycle by cycle basis. Multiple Priorities Although the use of extra virtual channels to break deadlock in interconnection networks was popularized in the context of wormhole networks <ref> [DS87] </ref>, the MDP routers do not have multiple virtual channels to break deadlock. Extra virtual channels are unnecessary because the e-cube routing on the J-Machine mesh is, by itself, deadlock-free. <p> Their primary metric was the processor efficiency and they examined torus, rather than mesh networks. One surprising result was that non-isomorphism introduced by using virtual channels to break deadlock in torus networks (an architectural solution invented by Dally and Seitz <ref> [DS87] </ref>) resulted in nonuniform distribution of processor efficiency over the processors in the machine, even for a balanced workload. The goal of this work here is less to predict processor efficiency than it is to predict the expected processor queue size.
Reference: [dSeSLM84] <author> E. de Souza e Silva, S. S. Lavenberg, and R. R. Muntz. </author> <title> A perspective on iterative methods for the approximate analysis of closed queueing networks. Mathematical Computer Performance and Reliability, </title> <year> 1984. </year>
Reference-contexts: Using q i;c ( ~ K ~e c 0 ) from the previous step, compute new values for q i;c ( ~ K) and substitute them for the current value. 4. Repeat steps 2 and 3 until the q i;c ( ~ K) converge adequately. Silva et. al. <ref> [dSeSLM84] </ref> proved that there is one unique meaningful solution to a multiclass AMVA model, which the iterative procedure is guaranteed to find. 8 5.1.5 Blocking To this point, the chapter has described only the basic exact and approximate mean value algorithms.
Reference: [DW94] <author> J. G. Dai and G. Weiss. </author> <title> Stability and instability of fluid models for certain re-entrant lines. </title> <institution> Georgia Institute of Technology, </institution> <month> February </month> <year> 1994. </year> <month> 254 </month>
Reference-contexts: Stability of this sort is trivial to determine in a classic exponential server 37 network [Kle75] but in the context of routing and blocking decision processes is a subject of active research; see, for example Bertsekas et. al. [BGT95] or Dai and Weiss <ref> [DW94] </ref>. Coffman et. al. study [JGG + 95] the asymptotic stability of first and higher moments for a rotating ring in an open-network context; the effort required for this result is impressive. <p> Algorithms for determining the stability of queuing networks with varied service disciplines are an active area of operations research <ref> [BGT95, JGG + 95, DW94] </ref>, and they are not addressed in this thesis.
Reference: [Fat92] <author> Jerko Fatovic. </author> <title> A ray tracer for the J-Machine. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: For the most part, these synthetic benchmarks were hand-written, occasionally the result of the programmer working strenuously to overcome the MDP's hard FIFO coding model. Two applications were written in CST: a ray tracer <ref> [Fat92] </ref>, and a traveling-salesman-problem search [Kan93]. The Caltech research group produced a C compiler for the J-machine that includes message-driven language extensions, called Message-Driven C (MDC) [Mas94, MZT93, MT93] and ported a number of applications to the machine.
Reference: [FKD + 95] <author> Marco Fillo, Stephen W. Keckler, William J. Dally, Nicholas P. Carter, Andrew Chang, Yevgeny Gurevich, and Whay S. Lee. </author> <title> The M-Machine Multicomputer. </title> <booktitle> In Proceedings of the 28th International Symposium on Microarchitecture, </booktitle> <pages> pages 146-156, </pages> <address> Ann Arbor, MI, </address> <month> December </month> <year> 1995. </year> <note> ACM. </note>
Reference-contexts: the speed/distance tradeoffs in a 18 The religious debate between the shared memory advocates and the message-passing advocates has subsided somewhat; both camps have adopted the others' technologies: shared memory machines that can also perform message-passing (Alewife [KJA + 93]), and message-passing machines that can also provide shared memory (M-Machine <ref> [Gur94, FKD + 95] </ref>). 194 large-memory versus a memory hierarchy, it is simple and gets the job done particularly since most modern parallel computers use relatively coarse-grained hardware where the extra cost of additional memory is a small fraction of the total node cost. 5.5.3 More Extensive Validation Needed Although the
Reference: [Gal94] <author> Robert G. Gallager. </author> <title> Discrete stochastic processes. </title> <publisher> Notes for M.I.T. </publisher> <address> Subject 6.262, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: A consequence of this is that the longer runs show a smaller percentage variation. The problem here differs from a common barrier crossing problem <ref> [Gal94, Chapter 7] </ref> because it involves multiple processes (the queue sizes on each processor) which are dependent, with each facing its own barriers. 140 the 8x8x8 J-machine after running Snakes 4820 times at the load point m = 5, L = 1000, h = 45, Q = 512.
Reference: [GJ91] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractibility, A Guide to the Theory of NP-Completeness. </title> <publisher> W.H Freeman and Company, </publisher> <year> 1991. </year>
Reference-contexts: And this runs into the fact that the general problem here is one of performing on-line resource- and precedence-constrained job scheduling. And this is a very hard problem <ref> [GJ91] </ref>. The problems inherent in this combined system of network and processors are the fundamental problem of parallel computer architecture. Because the problem is so hard, it's tempting to have the programmer shoulder the responsibility for this load balancing.
Reference: [GKP94] <author> Ronald L. Graham, Donald E. Knuth, and Oren Patashnik. </author> <title> Concrete Mathematics. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> second edition, </address> <year> 1994. </year>
Reference-contexts: Rearranging Equation (3.23) yields: S (y; z) = 1 y z We can convert this back and forth between the generating function and the closed form using standard generating function transformations <ref> [GKP94, pages 334-335] </ref>.
Reference: [Gur94] <author> Yevgeny Gurevich. </author> <title> An assembler and linker system for the M-machine software project, </title> <month> April </month> <year> 1994. </year> <note> Bachelor's Thesis. </note>
Reference-contexts: the speed/distance tradeoffs in a 18 The religious debate between the shared memory advocates and the message-passing advocates has subsided somewhat; both camps have adopted the others' technologies: shared memory machines that can also perform message-passing (Alewife [KJA + 93]), and message-passing machines that can also provide shared memory (M-Machine <ref> [Gur94, FKD + 95] </ref>). 194 large-memory versus a memory hierarchy, it is simple and gets the job done particularly since most modern parallel computers use relatively coarse-grained hardware where the extra cost of additional memory is a small fraction of the total node cost. 5.5.3 More Extensive Validation Needed Although the
Reference: [HB93] <author> Mor Harchol and Paul E. Black. </author> <title> Queueing theory analysis of greedy routing on square arrays. </title> <type> Technical Report UCB/CSD 93/756, </type> <institution> Computer Science Division, University of California, Berkeley, California, </institution> <year> 1993. </year>
Reference-contexts: When these classic networks are applied to study the J-Machine in Chapter 3, the blocking and routing effects are being ignored. Others make similar assumptions; see, for example, Harchol and Black's application of queueing theory to study routing on square arrays <ref> [HB93] </ref>. There is a moderate sized literature on the incorporation of blocking models into queueing networks. Perros [Per94] provides a text for this topic, and Onvural provides a survey [Onv90] for closed networks.
Reference: [HBW95] <author> Mor Harchol-Balter and David Wolfe. </author> <title> Bounding delays in packet-routing networks. </title> <booktitle> In Proceedings of the 27th ACM Symposium on Theory of Computing, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: In fact, it tends to correlate traffic actively. Balanced Traffic Harchol-Balter and Wolfe proved that the waiting time in a network of exponential servers is an upper bound, though not tight, on the waiting time on a network of deterministic servers <ref> [HBW95] </ref>. The key to their proof was the observation that the deterministic network does not form "clumps" of traffic as the exponential network does. Their proof was for an open queueing network. Less is known about deterministic servers in a closed network.
Reference: [HCD89] <author> Waldemar Horwat, Andrew Chien, and William J. Dally. </author> <title> Experience with CST:programming and implementation. </title> <booktitle> In Proceedings of the ACM SIGPLAN 89 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 101-109, </pages> <year> 1989. </year>
Reference-contexts: In the case of message queues, one could (really, should) design them so that their overflows smoothly flow into other nearby processors, so that capacity constraints do not impose such stark performance penalties. 21 MOS [HTD], and created the compiler for Concurrent Smalltalk (CST) <ref> [CD88a, CD88b, Hor89, HCD89] </ref>, the system's programming language. Consistent with the philosophy of the machine, CST offered a programming abstraction far from the details of the machine, 4 focused principally on letting the programmer express fine-grained object oriented programs. The effort was extremely successful.
Reference: [HN93] <author> J. Michael Harrison and Vien Nguyen. </author> <title> Brownian models of multiclass queueing networks: Current status and open problems. </title> <journal> Queueing Systems, </journal> <volume> 13 </volume> <pages> 5-40, </pages> <year> 1993. </year> <month> 255 </month>
Reference-contexts: Still, the connection with physical reasoning is attractive, if for nothing other than aesthetics. Some literature analyzing blocking networks also uses thermodynamic analogies, for example, the entropy-maximization techniques proposed by Kouvatsos and Denazis [KD93]; also, Harrison and Nguyen <ref> [HN93] </ref> review Brownian approximations for heavy-load queueing networks. Perhaps some of these methods may apply to the characterization of parallel computers this is left for others to pursue as future work.
Reference: [Hor89] <author> Waldemar Horwat. </author> <title> Concurrent smalltalk on the message-driven processor. </title> <type> Mas--ter's thesis, </type> <institution> MIT, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: In the case of message queues, one could (really, should) design them so that their overflows smoothly flow into other nearby processors, so that capacity constraints do not impose such stark performance penalties. 21 MOS [HTD], and created the compiler for Concurrent Smalltalk (CST) <ref> [CD88a, CD88b, Hor89, HCD89] </ref>, the system's programming language. Consistent with the philosophy of the machine, CST offered a programming abstraction far from the details of the machine, 4 focused principally on letting the programmer express fine-grained object oriented programs. The effort was extremely successful. <p> Based on this ratio, he concluded that when the size of the J-Machine exceeded 300 processors (the "Horwat Limit" for the J-Machine), the amount of communication traffic produced by the machine would exceed the capacity of the J-Machine's bisection <ref> [Hor89, p.110] </ref>. That such a limit exists makes sense because with the parallel computer being cube-shaped, the bisection of the machine grows only as N 2 3 , slower than the number of processors N . <p> handler might locate and dispatch to to an application method. 6 The last instruction in every method is a SUSPEND; when executed, it deallocates the storage for the message from the queue and allows the hardware to dispatch to the next message's handler. 6 For more details, see Horwat's thesis <ref> [Hor89] </ref> which describes the CST implementation. 50 2.1.2 Network The J-Machine communication network is implemented with routing logic blocks ("the routers") which are located on the MDP chip and the wires that connect them.
Reference: [HP93] <author> Peter G. Harrison and Naresh M. Patel. </author> <title> Performance Modelling of Communication Networks and Computer Architecture. </title> <publisher> Addison Wesley, </publisher> <year> 1993. </year>
Reference-contexts: The base case that terminates the recurrence is with 0 customers and mean values that are 0. The Arrival Theorem holds only for certain ideal networks, such as closed product form queueing networks. For non-ideal networks, it often works well as a good approximation. 4 See <ref> [HP93, p.241] </ref> for a proof of the Arrival Theorem and a more detailed exposition of algorithms for determining mean values in queueing models. 156 server to another (the black dot in the queueing network on the left) is the same as the probability distribution for the same system with one fewer
Reference: [HTD] <author> Waldemar Horwat, Brian Totty, and William J. Dally. Cosmos: </author> <title> An operating system for a fine-grain concurrent computer. </title> <note> submitted for publication. </note>
Reference-contexts: In the case of message queues, one could (really, should) design them so that their overflows smoothly flow into other nearby processors, so that capacity constraints do not impose such stark performance penalties. 21 MOS <ref> [HTD] </ref>, and created the compiler for Concurrent Smalltalk (CST) [CD88a, CD88b, Hor89, HCD89], the system's programming language. Consistent with the philosophy of the machine, CST offered a programming abstraction far from the details of the machine, 4 focused principally on letting the programmer express fine-grained object oriented programs.
Reference: [JGG + 95] <author> E. G. Coffman Jr., E. N. Gilbert, A. G. Greenberg, F. T. Leighton, Philippe Robert, and A. L. Stolyar. </author> <title> Queues served by a rotating ring. </title> <type> Unpublished Manuscript, </type> <month> May </month> <year> 1995. </year>
Reference-contexts: Stability of this sort is trivial to determine in a classic exponential server 37 network [Kle75] but in the context of routing and blocking decision processes is a subject of active research; see, for example Bertsekas et. al. [BGT95] or Dai and Weiss [DW94]. Coffman et. al. study <ref> [JGG + 95] </ref> the asymptotic stability of first and higher moments for a rotating ring in an open-network context; the effort required for this result is impressive. Queueing Networks with Blocking Classic queueing networks (those solved by Jackson, Gordon and Newell or BCMP) do not allow for blocking effects. <p> Algorithms for determining the stability of queuing networks with varied service disciplines are an active area of operations research <ref> [BGT95, JGG + 95, DW94] </ref>, and they are not addressed in this thesis.
Reference: [JK88] <author> Van Jacobson and Mike Karels. </author> <title> Congestion avoidance and control. </title> <booktitle> In SIG-COMM, </booktitle> <pages> pages 314-328, </pages> <year> 1988. </year>
Reference-contexts: The volume of congestion forms at the input to the network. The input to the network is near the MDP, so it can stop sending as soon as congestion forms. One of the most widely deployed congestion control algorithms is Jacobson's algorithm used in the Internet's TCP <ref> [JK88] </ref>. When the TCP algorithm detects congestion, the window size of the end-to-end connection is halved, and then as further packets are sent down the channel the window size is very slowly increased to probe for any additional available bandwidth.
Reference: [Kan93] <author> Shaun Yoshie Kaneshiro. </author> <title> Branch and bound search on the J-Machine. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, </institution> <year> 1993. </year>
Reference-contexts: For the most part, these synthetic benchmarks were hand-written, occasionally the result of the programmer working strenuously to overcome the MDP's hard FIFO coding model. Two applications were written in CST: a ray tracer [Fat92], and a traveling-salesman-problem search <ref> [Kan93] </ref>. The Caltech research group produced a C compiler for the J-machine that includes message-driven language extensions, called Message-Driven C (MDC) [Mas94, MZT93, MT93] and ported a number of applications to the machine.
Reference: [KC94] <author> Vijay Karamcheti and Andrew A. Chien. </author> <title> Software overhead in messaging layers: </title> <booktitle> Where does the time go? In Sixth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS VI). ACM, </booktitle> <year> 1994. </year>
Reference-contexts: Probably, with only a small modification, this can work as a seamless solution to dealing with queue overflows: a true fine-grained approach. Study of this network is likely to be fruitful, and the analytical modeling process aesthetically rewarding. As Karamcheti and Chien point out <ref> [KC94] </ref>, one downside of the Chaos approach (and any adaptive network solution) is the loss of guarantees of message order arrival, but asking for this if the primary metric of quality is seamless overflow handling may be asking too much. 34 EM-X Kodama et. al. report [KSS + 95] that the <p> Chien's CONCERT Chien, one of the early J-Machine team members, has published a number of excellent papers closely examining interaction of network design and programming. This work comes from his implementation, with Karamcheti and Plevyak, of the Concert programming system [CKP93]. With Karamcheti, he highlights <ref> [KC94] </ref> the effect of network design decisions on end-to-end properties that programmers find valuable: flow control, in-order delivery, and reliable transmission. The J-Machine network provides in-order delivery and reliable transmission (though not fault-tolerant). However, it does not provide adequate flow control mechanisms. Karamcheti and Chien report [KC94] that providing these properties <p> With Karamcheti, he highlights <ref> [KC94] </ref> the effect of network design decisions on end-to-end properties that programmers find valuable: flow control, in-order delivery, and reliable transmission. The J-Machine network provides in-order delivery and reliable transmission (though not fault-tolerant). However, it does not provide adequate flow control mechanisms. Karamcheti and Chien report [KC94] that providing these properties in software (rather than in the network) can be expensive. Aoyama and Chien [AC94] report the cost of implementing these features in hardware.
Reference: [KD93] <author> Demetres D. Kouvatsos and Spiros G. Denazis. </author> <title> Entropy maximized queueing networks with blocking and multiple job classes. Performance Evaluation, </title> <booktitle> 17 </booktitle> <pages> 189-205, </pages> <year> 1993. </year>
Reference-contexts: Still, the connection with physical reasoning is attractive, if for nothing other than aesthetics. Some literature analyzing blocking networks also uses thermodynamic analogies, for example, the entropy-maximization techniques proposed by Kouvatsos and Denazis <ref> [KD93] </ref>; also, Harrison and Nguyen [HN93] review Brownian approximations for heavy-load queueing networks. Perhaps some of these methods may apply to the characterization of parallel computers this is left for others to pursue as future work.
Reference: [KJA + 93] <author> David Kranz, Kirk Johnson, Anant Agarwal, John Kubiatowicz, and Ben-Hong Lim. </author> <title> Integrating message-passing and shared-memory: Early experiences. </title> <booktitle> In PPOPP, </booktitle> <year> 1993. </year>
Reference-contexts: the heavy-load traffic domain, simulation shows that this technique is some times effective in preventing queue overflows. 1.3 Related Research 1.3.1 Other Architectures Alewife Alewife uses a single network and faces the possibility of deadlock due to the protocol's backward-coupling of blocking from the network inputs to the network outputs <ref> [KJA + 93] </ref>. Alewife prevents deadlock by using a countdown timer on each processor that resets any time the network output at a processor makes progress. If the counter reaches zero, the processor takes an interrupt and manually drains all arriving network traffic into memory, breaking deadlock. <p> For example, the Active Messages [vECGS92] software library running on a CM-5 provides a higher-level abstraction for remote method invocation. As another example, the protocol underneath Alewife's shared memory communicates with in-terprocessor messages which invoke hardware methods a correspondence to a lower level of abstraction <ref> [KJA + 93] </ref>. 3 This correspondence between the communication method in the MDP and in other architectures imparts generality to the results in this thesis. <p> Although it runs against the fine-grained hardware philosophy, and ignores the speed/distance tradeoffs in a 18 The religious debate between the shared memory advocates and the message-passing advocates has subsided somewhat; both camps have adopted the others' technologies: shared memory machines that can also perform message-passing (Alewife <ref> [KJA + 93] </ref>), and message-passing machines that can also provide shared memory (M-Machine [Gur94, FKD + 95]). 194 large-memory versus a memory hierarchy, it is simple and gets the job done particularly since most modern parallel computers use relatively coarse-grained hardware where the extra cost of additional memory is a small
Reference: [KLC94] <author> Jae H. Kim, Ziqiang Liu, and Andrew A. Chien. </author> <title> Compressionless routing: A framework for adaptive and fault-tolerant routing. </title> <booktitle> In 21st International Symposium on Computer Architecture, </booktitle> <address> Urbana, IL, </address> <year> 1994. </year> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign. </institution> <month> 256 </month>
Reference-contexts: However, it does not provide adequate flow control mechanisms. Karamcheti and Chien report [KC94] that providing these properties in software (rather than in the network) can be expensive. Aoyama and Chien [AC94] report the cost of implementing these features in hardware. Kim, Liu and Chien propose <ref> [KLC94] </ref> that a good solution to this problem is "Compression-less Routing" away to speculatively inject wormhole messages, but with clean flow control feedback from the network and still allowing adaptivity.
Reference: [Kle64] <author> Leonard Kleinrock. </author> <title> Communication nets; stochastic message flow and delay. </title> <publisher> McGraw-Hill, </publisher> <year> 1964. </year>
Reference-contexts: Second, the blocking model (Section 5.1.5) is based on independence assumptions which are only partially true; they work in practice; overall model conclusions are only empirically justified. Using independence assumptions of this sort has a long tradition in the application of Queueing Theory <ref> [Kle64] </ref>. 3 One can construct time processes where the moving the mean toward a threshold by adding a constant has no effect on the rate of threshold crossing.
Reference: [Kle75] <author> Leonard Kleinrock. </author> <title> Queueing Systems, Volume 1: Theory. </title> <publisher> Wiley, </publisher> <year> 1975. </year>
Reference-contexts: One can't be all things. 1.3.2 Queueing Models Most queueing theory is based upon continuous time, discrete state Markov models; Klein-rock provides <ref> [Kle75] </ref> the classic introductory text. The tools for queueing networks is based up early work by Jackson and Gordon and Newell [Kle75] who gave now well-known product form solutions to equilibrium probability distributions for expected latency, queue size, and 7 Things can get pretty bad: suppose the chip doesn't work! 36 <p> One can't be all things. 1.3.2 Queueing Models Most queueing theory is based upon continuous time, discrete state Markov models; Klein-rock provides <ref> [Kle75] </ref> the classic introductory text. The tools for queueing networks is based up early work by Jackson and Gordon and Newell [Kle75] who gave now well-known product form solutions to equilibrium probability distributions for expected latency, queue size, and 7 Things can get pretty bad: suppose the chip doesn't work! 36 throughput at the nodes of a network given exponential random service time distributions and random routing decisions. <p> In the context of open networks, stability refers to the long-term behavior of the queue size process, whether the achieved average service rate of all nodes is higher than the rate of incident traffic. Stability of this sort is trivial to determine in a classic exponential server 37 network <ref> [Kle75] </ref> but in the context of routing and blocking decision processes is a subject of active research; see, for example Bertsekas et. al. [BGT95] or Dai and Weiss [DW94]. <p> Because this Markov chain is ergodic 2 , a limiting probability distribution P ( ~ k) exists: P ( ~ k) = lim P ( ~ k; t): (3:3) This probability distribution has a simple form, first given by Gordon and Newell and simplified here from Kleinrock's text <ref> [Kle75, p.150] </ref>. <p> How do the dynamics of the imbalanced load differ from the balanced load? The values x j can have a substantial effect on the equilibrium probability distribution for customer configurations. As the number of customers increases, states in which the "bottleneck server" are filled have a dominant probability. Kleinrock <ref> [Kle75, p.152] </ref> formulates the well-known known behavior as follows: with some particular server number l having x l &gt; x i for all i 6= l, in the limit as K ! 1, the probability P ( ~ k) ! 0 for any state in which k l 6= 1. 92 <p> Formulating the model as an open network, with customer arrivals and departures, gives straightforward expressions for the probability that any given server's queue will exceed a threshold <ref> [Kle75] </ref>. Although this formulation cannot be used for the Snakes benchmark (the benchmark that is run on the J-Machine and measured in the next chapter), for other applications to which it can be applied the calculations are simpler. <p> Again, all service distributions and external arrival distributions are exponential. The 104 routing matrix elements r ij and external arrival rate determine an arrival rate at each server i = flr 0i + j=1 Jackson's theorem <ref> [Kle75] </ref> says that the probability distribution for the configurations of customers over servers (now an infinite space, for the number of customers in the system is unbounded) is the product of individual distributions for each server, where each server acts like a simple M/M/1 server with arrival rate i and the
Reference: [KS91] <author> S. Konstantinidou and L. Snyder. </author> <title> Chaos router: architecture and performance. </title> <booktitle> In 18th Annual Symposium on Computer Architecture, </booktitle> <pages> pages 212-221, </pages> <year> 1991. </year>
Reference-contexts: Demonstrating this would be an interesting result. Chapter 6 suggests that the RTS algorithm needs to be combined with some sort of backoff and flow control, but leaves the design of such a backoff scheme as further work. Chaos Router Konstantinidou and Snyder's Chaos Router <ref> [KS91] </ref> uses adaptive routing with random mis-routes that is provably free of livelock and deadlock. Note, though, that their network analysis, like the ones for the J-Machine's network, is for an open network; that is, they study the network in a context where the consumption assumption is made. <p> There are many more variants which might have better overflow behavior. Using a torus network with wraparounds reduces the amount of mesh-induced inhomogeneity and can reduce the number of overflows. But this does not help with the problem of workloads 217 that are by themselves imbalanced. The Chaos Router <ref> [KS91] </ref> uses random misroutes to prevent deadlock and to adaptively route around traffic. It's possible that this algorithm could work well. This requires integrating the processor queues into the general chaos-routing protocol; in the original papers, the processor queues are attached to the network using specialized connections. <p> The network architecture in this thesis is the one used in the J-Machine, but there are other network architectures which are of interest. It would be interesting to study the message-driven dynamics of a system using a chaos router <ref> [KS91] </ref>, perhaps extending their architecture to permit misrouting not only within the network, but also when processor queues overflow. In other words, the chaos router in the literature performs some flow control and load balancing with regard to the network links; this study would include load imbalance over processors.
Reference: [KS93] <author> R. E. Kessler and J. L. Schwarzmeier. </author> <title> CRAY T3D: A New Dimension for Cray Research. </title> <booktitle> In COMPCON, </booktitle> <year> 1993. </year>
Reference-contexts: Brewer and Kuszmaul also show [BK94] how to improve Cilk's substrate Strata, observing the formation of bad patterns of traffic and showing how to get good throughput on high-volume all-to-all types of communication patterns. Cray T3D Kessler and Schwarzmeier report <ref> [KS93] </ref> that the Cray T3D (and T3E) uses wormhole routing. The design is based upon the routing used in the J-Machine [Dal90a]; however, the T3D network has a torus topology so that it requires the extra deadlock-breaking virtual 33 channels that Dally invented [DS87].
Reference: [KSS + 95] <author> Yuetsu Kodama, Hirohumi Sakane, Mitsuhisa Sato, Hayato Yamana, Shuichi Sakai, and Yoshinori Yamaguchi. </author> <title> The EM-X parallel computer: Architecture and basic performance. </title> <booktitle> In Proceedings of the 22nd International Symposium On Computer Architecture (ISCA), </booktitle> <pages> pages 14-23, </pages> <address> Santa Margherita Ligure Italy, </address> <year> 1995. </year>
Reference-contexts: and Chien point out [KC94], one downside of the Chaos approach (and any adaptive network solution) is the loss of guarantees of message order arrival, but asking for this if the primary metric of quality is seamless overflow handling may be asking too much. 34 EM-X Kodama et. al. report <ref> [KSS + 95] </ref> that the EM-X parallel computer has transparent concurrent spilling and restoring of the network output buffer to and from an off-chip message buffer.
Reference: [Kub95] <author> John Kubiatowicz. </author> <type> Personal Communication, </type> <year> 1995. </year>
Reference-contexts: A solution with more detection precision might be a timer that resets any time the input or the output makes progress. Kubiatowicz has reported that the Alewife team did not find these deadman timeouts to be problematic <ref> [Kub95] </ref>. This is probably a result of a combination of factors. First, the Alewife machines that have been actually constructed have been small - 32 to 128 nodes; in contrast, the J-Machine prototype has 512 to 1024 nodes. This means Alewife is unlikely to saturate its network.
Reference: [L + 92] <author> Charles E. Leiserson et al. </author> <title> The network architecture of the connection machine CM-5. </title> <booktitle> In Symposium on Parallel Architectures and Algorithms, </booktitle> <pages> pages 272-285, </pages> <address> San Diego, California, </address> <month> June </month> <year> 1992. </year> <note> ACM. </note>
Reference-contexts: Note that there are other networks with provably efficient space-mapping (but don't have the no-doubling-back property) but can provide isomorphic interfaces (e.g., Leiserson's Fat Tree <ref> [Lei85, L + 92] </ref>). 18 flows would be too burdensome. As a consequence, we tried to build a machine that would be able to run an unstructured workload well. 1.2.2 Hardware Wormhole Network The network of the J-Machine was designed to support the philosophical goals.
Reference: [Lei85] <author> Charles E. Leiserson. Fat-trees: </author> <title> Universal networks for hardware-efficient supercomputing. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-34(10):892-901, </volume> <month> October </month> <year> 1985. </year>
Reference-contexts: Note that there are other networks with provably efficient space-mapping (but don't have the no-doubling-back property) but can provide isomorphic interfaces (e.g., Leiserson's Fat Tree <ref> [Lei85, L + 92] </ref>). 18 flows would be too burdensome. As a consequence, we tried to build a machine that would be able to run an unstructured workload well. 1.2.2 Hardware Wormhole Network The network of the J-Machine was designed to support the philosophical goals.
Reference: [Lei97] <author> F. Thomson Leighton. </author> <type> Personal Communication, </type> <month> January </month> <year> 1997. </year>
Reference-contexts: As m increases, the graph starts to break away from 1 at m = 6 when Q = 64 and m = 12 when Q = 128. This suggests a simple linear relationship. 3.3.4 Leighton's Method Leighton <ref> [Lei97] </ref> has suggested another approach for estimating P (A nov ), based on the white stone and black stone analogy mentioned in Section 3.1. Reiterating that analogy here: the states ~ k 2 A correspond to the arrangements of K white stones and N 1 black stones along a line.
Reference: [Len89] <author> Arjen K. Lenstra. </author> <title> Long integer package. Computer Program, 1989. Bell Labs, also part of the rsa129 project source. </title>
Reference-contexts: A nested loop over n and k gives the result in O (n 2 k) time, using O (qn) space. The numbers are large, necessitating care to avoid limitations of common floating point number representations; but this is easy to do, using an efficient large integer <ref> [Len89] </ref> or extended range floating point package. Computing t (512; 512; 64) requires approximately a minute on a contemporary SPARC workstation. 3.3.3 Balanced Workload Overflow Residency Q 2 f64; 128g.
Reference: [Liu68] <author> C. L. Liu. </author> <title> Introduction to Combinatorial Mathematics. </title> <publisher> MacGraw-Hill Book Company, </publisher> <year> 1968. </year>
Reference-contexts: The number of these states, s (N; K), is: s (N; K) = N + K 1 ! This can be derived by choosing one of the N servers for each of the K customers with repetitions allowed <ref> [Liu68, p.13] </ref>. Another way of thinking of this is in terms of K white stones and N 1 black stones placed in some order along a line.
Reference: [LLJ + 92] <author> Daniel Lenoski, James Laudon, Truman Joe, David Nakahira, Luis Stevens, Anoop Gupta, and John Hennessy. </author> <title> The DASH prototype: Implementation 257 and performance. </title> <booktitle> In Proceedings of 19th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 92-103. </pages> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference-contexts: Despite this, for shared 32 memory machines this thesis work is relevant (and the equations in Section 3.5.3 should be considered), particularly if they are large in size and definitely if they also support message-passing. DASH The architects of the DASH machine <ref> [LLJ + 92] </ref> also recognized the potential for deadlock, and so partitioned their protocol into requests and replies, onto two decoupled virtual networks a solution also used by von Eicken et. al. in Active Messages on the CM-5 [vECGS92].
Reference: [Mas94] <author> Daniel Maskit. </author> <title> A message-driven programming system for fine-grain multicom-puters. </title> <type> Master's thesis, </type> <institution> Computer Science Department, California Institute of Technology, Pasadena, California, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: Two applications were written in CST: a ray tracer [Fat92], and a traveling-salesman-problem search [Kan93]. The Caltech research group produced a C compiler for the J-machine that includes message-driven language extensions, called Message-Driven C (MDC) <ref> [Mas94, MZT93, MT93] </ref> and ported a number of applications to the machine. All these applications were coarse-grained, in contrast with the initial goals of the project to build a machine for fine-grained software.
Reference: [MM84] <author> J. McKenna and Debasis Mitra. </author> <title> Asymptotic expansions and integral representations of moments of queue lengths in closed Markovian networks. </title> <journal> Journal of the ACM, </journal> <volume> 31(2) </volume> <pages> 346-360, </pages> <month> April </month> <year> 1984. </year>
Reference-contexts: Determining the rate of queue overflow is essentially one of determining higher moments of the queue size random variable. McKenna and Mitra introduced <ref> [MM84] </ref> a method involving an integral representation of the BCMP solution that yields estimates of the higher moments. <p> The analysis of this difference using queueing theory in Chapter 3 is incomplete. It may be that using McKenna and Mitra's <ref> [MM84] </ref> integral representation may shed some light on this difference. This representation may also be useful in determining expressions for higher moments of the overflow process and ultimately a better cost model for overflows using this passive dispersive flow control.
Reference: [MM94] <author> Debasis Mitra and Isi Mitrani. </author> <title> Efficient window flow control for high speed data networks with small buffers. </title> <journal> Annals of Operations Research, </journal> <volume> 49 </volume> <pages> 1-24, </pages> <year> 1994. </year>
Reference-contexts: This does not remove all significance of MVA model results. Because queue buffer overflows are so costly on the J-Machine, the 1 Section 3.2 defines residency and rate. 2 See, for example, <ref> [MM94] </ref> which gives the moments of queue size in a simple windowing flow control scheme. 153 occurrence of even a single overflow causes substantial loss of performance, and in many cases, the mean queue sizes predicted by the MVA models are are many times larger than the buffer capacity threshold.
Reference: [MT93] <author> Daniel Maskit and Stephen Taylor. </author> <title> Experiences in programming the J-machine. </title> <type> Technical Report Caltech-CS-TR-93-11, </type> <institution> California Institute of Technology, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: Two applications were written in CST: a ray tracer [Fat92], and a traveling-salesman-problem search [Kan93]. The Caltech research group produced a C compiler for the J-machine that includes message-driven language extensions, called Message-Driven C (MDC) <ref> [Mas94, MZT93, MT93] </ref> and ported a number of applications to the machine. All these applications were coarse-grained, in contrast with the initial goals of the project to build a machine for fine-grained software. <p> For the MDC applications, Maskit observed that using the J-Machine, the overhead for communication in the network was an insignificant component of application run time <ref> [MT93] </ref>. Partly, this was because the MDC tasks were so heavy-weight that it was impossible to use the network heavily. But also, this was because the overhead for injecting and receiving a message on the MDP actually was low, as the J-Machine designers had intended.
Reference: [Mun72] <author> Richard R. Muntz. </author> <title> Poisson departure processes and queueing networks. </title> <type> Technical Report RC-4145, </type> <institution> IBM Research, </institution> <month> December </month> <year> 1972. </year>
Reference-contexts: BCMP [BCMP75], the "power tool" of product form queuing network solutions, handles a number of different service time distributions, but it does not handle the deterministic service distribution. BCMP handles service distributions that have a property that tends to de-correlate the traffic within the network, called the M!M property <ref> [Mun72] </ref>. The deterministic service time distribution does not have this property. In fact, it tends to correlate traffic actively.
Reference: [MZT93] <author> Daniel Maskit, Yair Zadik, and Stephen Taylor. </author> <title> System tools for the J-machine. </title> <type> Technical Report Caltech-CS-TR-93-12, </type> <institution> California Institute of Technology, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: Two applications were written in CST: a ray tracer [Fat92], and a traveling-salesman-problem search [Kan93]. The Caltech research group produced a C compiler for the J-machine that includes message-driven language extensions, called Message-Driven C (MDC) <ref> [Mas94, MZT93, MT93] </ref> and ported a number of applications to the machine. All these applications were coarse-grained, in contrast with the initial goals of the project to build a machine for fine-grained software.
Reference: [ND90] <author> Michael Noakes and William J. Dally. </author> <title> System design of the J-Machine. </title> <editor> In William J. Dally, editor, </editor> <booktitle> Sixth MIT Conference of Advanced Research in VLSI, </booktitle> <pages> pages 179-194, </pages> <address> Cambridge, MA 02139, 1990. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: This is great, because replacing a processor in the center of the J-Machine is as tedious (and unpleasant) as simultaneously replacing the head gaskets of eight automobiles <ref> [ND90] </ref>. 22 the applications took to execute might be measured in the hundreds, rather than tens. The applications tended to use the network lightly. For the CST applications, it was surprising that the programmers chose to try to make the applications as MIMD-like as possible, trying to minimize communication.
Reference: [ND92] <author> Peter R. Nuth and William J. Dally. </author> <title> The J-machine network. </title> <booktitle> In Proceedings of the International Conference on Computer Design: VLSI in Computers and Processors, </booktitle> <pages> pages 420-423. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: In contrast, when each processor node in a torus network 7 For more details about the J-Machine network, see Nuth's paper <ref> [ND92] </ref>. 51 "looks" into the network, it sees a view that is identical to the view seen by every other processor node in that torus network the torus is a homogeneous network.
Reference: [Noa91] <author> Michael Noakes. </author> <title> MDP programmer's manual. Concurrent VLSI Architecture Memo 40, </title> <institution> Massachusetts Institute of Technology, Artificial Intelligence Laboratory, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: For another more substantial example, see Wallach's [NWD93] implementation of a barrier with a coordinated butterfly 1 For a comprehensive description of the MDP, see the Programmer's Manual by Noakes <ref> [Noa91] </ref>. A good general overview of the MDP is in [DFK + 92]. The early rationale for the architecture of the J-Machine is in Dally's thesis [Dal87]. 2 The term "method" is interchangeable with "procedure." 44 of messages over the processors. <p> Support for Dynamic Workload A complete enumeration of the MDP's instruction set can be found in the Programmer's Manual <ref> [Noa91] </ref>. Here, it is appropriate to point out a few of the distinctive features of the instruction set: * The MDP has extensive support for type tags. Every word of data in the machine includes a four-bit type tag theword size of the MDP is 36 bits. <p> This can aid in method or object lookup. The details of these features (available in Noakes <ref> [Noa91] </ref>) are not of interest here. What is of interest is that these features reflect the intention of the J-Machine architects to design a machine to run an unstructured, object oriented workload that unfolds dynamically at run time.
Reference: [Nut] <author> Peter Nuth. </author> <type> Personal Communications. 258 </type>
Reference-contexts: A simple torus is homogeneous, and although the network design contributed by Dally in [DS87] breaks this homogeneity (a result noted by Adve and Vernon [AV94]), the deadlock-broken inhomogeneous torus would still have imparted less imbalance than the mesh. 52 the cube for connecting I/O devices <ref> [Nut] </ref>. Had the machine been built as a torus, with wrap-around connections, adding I/O devices to the machine would have required splicing special channels in. Furthermore, making the network toroidal would probably have necessitated adding additional deadlock-breaking virtual channels to the routers (Dally's result [DS87]), doubling their silicon area. <p> At one time, I expected to always have a cycle of idle time between packets on a dimension, so starvation would not occur. When that assumption changed, I thought about building a fairer priority scheme, but never bothered to build it <ref> [Nut] </ref>. This is reasonable. We designers never simulated a whole 512-processor J-Machine with routers (not enough simulation horsepower).
Reference: [NWD93] <author> Michael D. Noakes, Deborah A. Wallach, and William J. Dally. </author> <title> The J-Machine multicomputer: An architectural evaluation. </title> <booktitle> In Proceedings of the 20th International Symposium on Computer Architecture, </booktitle> <pages> pages 224-235, </pages> <address> San Diego, California, </address> <month> May </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: A number of synthetic benchmarks tested the throughput of the network, the agility of message passing, the ability to perform sorting, and the speed of barrier synchronization <ref> [NWD93] </ref>. For the most part, these synthetic benchmarks were hand-written, occasionally the result of the programmer working strenuously to overcome the MDP's hard FIFO coding model. Two applications were written in CST: a ray tracer [Fat92], and a traveling-salesman-problem search [Kan93]. <p> For example, a fetch of a remote memory location can be built with a method that reads the desired location and then sends a second method invocation back to store the data. For another more substantial example, see Wallach's <ref> [NWD93] </ref> implementation of a barrier with a coordinated butterfly 1 For a comprehensive description of the MDP, see the Programmer's Manual by Noakes [Noa91]. A good general overview of the MDP is in [DFK + 92]. <p> The arrows represent messages sent on the hardware to move the snake from processor to processor. Many snakes run in parallel, with their creation and destruction (after each snake has managed to make a particular number of hops) bracketed by the barrier subroutines written by Wallach and documented in <ref> [NWD93] </ref>. The larger picture is in Figure 4-2. 4.1.1 Workload Parameters Snakes is not a single workload. The parameters given in Table 4.1 select a particular load point for a run. Furthermore, each individual run of the workload is different because the snakes' paths are random. <p> (1 + p)u processor h The maximum throughput rate of the bisection is cN 3 : (4:6) Dividing Equation (4.5) by Equation (4.6) gives the expected processor-limited bisection utilization in terms of the handler duration: u bisection = N 3 (1 + p)u processor h Transition to network-limited domain Noakes <ref> [NWD93, Figure 3] </ref> showed that the J-machine's network bisection saturated at some utilization u saturation of about 0.4. The results below also show saturation at this level; the limit seems to be related to the high penalty that the processor incurs when it takes SEND faults. <p> This analysis is done for both balanced and imbalanced workloads. For balanced workloads, working rules herein and methods herein can help choose hardware queue size. For imbalanced workloads, the 223 analysis derives a threshold of imbalance beyond which queue size on bottleneck processors grow very large. Other researchers (e.g. <ref> [NWD93, S + 93] </ref>) have published papers reporting the good performance of the J-Machine; I present some of the problems, which are more interesting from a research perspective. With heavy fine-grained workloads, the J-Machine performs poorly, because processor message queues overflow and reduce the hardware to servicing overflow traps.
Reference: [Onv90] <author> Raif O. Onvural. </author> <title> Survey of closed queuing networks with blocking. </title> <journal> Computing Surveys, </journal> <volume> 22 </volume> <pages> 83-121, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Others make similar assumptions; see, for example, Harchol and Black's application of queueing theory to study routing on square arrays [HB93]. There is a moderate sized literature on the incorporation of blocking models into queueing networks. Perros [Per94] provides a text for this topic, and Onvural provides a survey <ref> [Onv90] </ref> for closed networks. One of the items of note in Onvural's survey is a taxonomy of blocking mechanisms; the behavior of a queueing network varies a great deal with the mechanism. <p> This is an inescapable consequence of choosing a non-adaptive network with fixed capacity buffers that block after service, where the total volume of outstanding traffic can exceed the capacity of cycles in the blocking-dependency graph <ref> [Onv90] </ref>. * As a result, it is necessary to implement an "escape." Instead of a deadman timer as in Alewife, the J-Machine implements the escape with a queue overflow trap: when the finite size input buffer to the processor fills, the processor traps and empties the buffer.
Reference: [Per94] <author> Harry G. Perros. </author> <title> Queueing Networks with Blocking. </title> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: Others make similar assumptions; see, for example, Harchol and Black's application of queueing theory to study routing on square arrays [HB93]. There is a moderate sized literature on the incorporation of blocking models into queueing networks. Perros <ref> [Per94] </ref> provides a text for this topic, and Onvural provides a survey [Onv90] for closed networks. One of the items of note in Onvural's survey is a taxonomy of blocking mechanisms; the behavior of a queueing network varies a great deal with the mechanism.
Reference: [Rei65] <author> F. Reif. </author> <title> Fundamentals of statistical and thermal physics. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1965. </year>
Reference-contexts: The result noted in Chapter 3 that all states have equivalent probabilities with a balanced workload resembles one of the working axioms of thermodynamics: that in a physical process all states that are accessible have equal probabilities <ref> [Rei65] </ref>. Furthermore, the reasoning that the chapter uses to conclude that overflows will be rare comparing the relative size of state spaces resembles reasoning in thermodynamics. This connection with thermodynamics breaks down with imbalanced or request/reply workloads because the state probabilities are no longer all equal.
Reference: [RL80] <author> M. Reiser and S.S Lavenberg. </author> <title> Mean-value analysis of closed multichain queuing networks. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 27(2) </volume> <pages> 313-322, </pages> <month> April </month> <year> 1980. </year>
Reference-contexts: Adve and Vernon's model uses a technique called Mean Value Analysis (MVA) (which was invented by Reiser and Lavenberg <ref> [RL80] </ref>) to solve for the first moments (i.e., mean or av 39 erage) of queue length, throughput, and waiting time within the network. The beginning of Chapter 5 reviews the fundamental equations within MVA. <p> In Snakes, all customers are equivalent and fall into a single class. The simplified model shows that this workload is significantly less well-behaved than a Request/Reply workload. Section 5.5 discusses the results and limitations of the model, and summarizes the chapter. 155 5.1 Mean Value Analysis Review MVA <ref> [RL80] </ref> is an algorithm that computes expected equilibrium mean queue size, mean throughput, and mean waiting time for the servers of a closed Poisson queueing network: N exponential servers each with service rate i , fixed K identical customers, transition probabilities r ij .
Reference: [S + 93] <author> Ellen Spertus et al. </author> <title> Evaluation of mechanisms for fine-grained parallel programs in the J-machine and the cm-5. </title> <booktitle> In Proceedings of the International Symposium on Computer Architecture, </booktitle> <pages> pages 302-313, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Furthermore, the J-Machine architecture, by hard-wiring queueing and interface policy, is resistant to being used as a platform for normative research (Though Spertus <ref> [SD, S + 93, SD95] </ref> obtained some results). But the exclusion from the ability to do normative research is not just a question of hardwired policy, this is also a general downside of doing computer architecture research by building hardware. 7 Sigh. <p> This analysis is done for both balanced and imbalanced workloads. For balanced workloads, working rules herein and methods herein can help choose hardware queue size. For imbalanced workloads, the 223 analysis derives a threshold of imbalance beyond which queue size on bottleneck processors grow very large. Other researchers (e.g. <ref> [NWD93, S + 93] </ref>) have published papers reporting the good performance of the J-Machine; I present some of the problems, which are more interesting from a research perspective. With heavy fine-grained workloads, the J-Machine performs poorly, because processor message queues overflow and reduce the hardware to servicing overflow traps.
Reference: [SD] <author> Ellen Spertus and William J. Dally. </author> <title> Trading off control and data locality in fine-grained computing. </title> <booktitle> Submitted to Sixth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <year> 1994. </year> <note> (Not published). </note>
Reference-contexts: Furthermore, the J-Machine architecture, by hard-wiring queueing and interface policy, is resistant to being used as a platform for normative research (Though Spertus <ref> [SD, S + 93, SD95] </ref> obtained some results). But the exclusion from the ability to do normative research is not just a question of hardwired policy, this is also a general downside of doing computer architecture research by building hardware. 7 Sigh.
Reference: [SD95] <author> Ellen Spertus and William J. Dally. </author> <title> Evaluating the locality benefits of active messages. </title> <booktitle> In Proceedings of the Conference on Principles and Practice of Parallel Programming (PPOPP), </booktitle> <year> 1995. </year>
Reference-contexts: Furthermore, the J-Machine architecture, by hard-wiring queueing and interface policy, is resistant to being used as a platform for normative research (Though Spertus <ref> [SD, S + 93, SD95] </ref> obtained some results). But the exclusion from the ability to do normative research is not just a question of hardwired policy, this is also a general downside of doing computer architecture research by building hardware. 7 Sigh.
Reference: [ST94] <author> Steve Scott and Greg Thorson. </author> <title> Optimized routing in the Cray T3D. </title> <booktitle> Lecture notes in computer science, </booktitle> <volume> (953), </volume> <year> 1994. </year> <title> Parallel Computer Router and Communication. </title>
Reference-contexts: To fight the isomorphism-loss (noted by Adve and Vernon [AV91, AV94]) that the deadlock-breaking virtual channels cause, Scott and Thor-son <ref> [ST94] </ref> demonstrate using simulated annealing to optimize the virtual channel routing assignments to balance channel traffic.
Reference: [vECGS92] <author> Thorsten von Eicken, David Culler, Seth Goldstein, and Klaus Schauser. </author> <title> Active messages: A mechanism for integrated communication and computation. </title> <booktitle> 259 In Proceedings of 19th Annual International Symposium on Computer Archi--tecture, </booktitle> <pages> pages 256-266. </pages> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference-contexts: DASH The architects of the DASH machine [LLJ + 92] also recognized the potential for deadlock, and so partitioned their protocol into requests and replies, onto two decoupled virtual networks a solution also used by von Eicken et. al. in Active Messages on the CM-5 <ref> [vECGS92] </ref>. In DASH, the protocol does allow for "request" messages to spawn other "request" messages which then creates the possibility of deadlock. <p> The J-Machine's sole reliance on the asynchronous remote method invocation for communication distinguishes it from other parallel computers. However, this mechanism corresponds directly to communication mechanisms in other parallel computer architectures, though at different levels of abstraction. For example, the Active Messages <ref> [vECGS92] </ref> software library running on a CM-5 provides a higher-level abstraction for remote method invocation.
Reference: [Whi97] <author> Jacob White. </author> <type> Personal Communication, </type> <year> 1997. </year>
Reference-contexts: One way to simulate larger machines is to investigate ways of speeding the rate of convergence so that the model requires fewer iterations. Jacob White has suggested that various numerical techniques, like using Newton's method, might speed convergence <ref> [Whi97] </ref>. Another way of looking at the model for larger machines would be to simplify the model. If the flit-by-flit tracking of utilization or residency could be removed, the model would be much faster.
Reference: [WHJ + 95] <author> Deborah A. Wallach, Wilson C. Hsieh, Kirk Johnson, M. Frans Kaashoek, and William E. Weihl. </author> <title> Optimistic active messages: A mechanism for scheduling communication and computation. </title> <booktitle> In Proceedings of the 5th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPoPP), </booktitle> <year> 1995. </year>
Reference-contexts: Given that general universal flow control solutions are elusive, allowing the application more control with clean interfaces is a good approach. Wallach et. al. <ref> [WHJ + 95] </ref> propose another clean interface to the network called Optimistic Active Messages (OAM). In their scheme, the processor optimistically tries to send messages, but if network backpressure is encountered, the message is sent to memory. <p> Actually, there's evidence that the processor ought to allow preemption in this situation. See <ref> [WHJ + 95] </ref>. 206 6.2.4 Virtual Channel Flow Control Dally's [Dal90d] virtual channel flow control (VCFC) adds a degree of adaptivity within the network, rather than within the processors. With this adaptivity, there are multiple virtual channels within the network.
References-found: 91

