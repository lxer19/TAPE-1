URL: http://ballade.cs.ucla.edu/~cong/papers/fpga96_rasp.ps
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Title: RASP: A General Logic Synthesis System for SRAM-based FPGAs  
Author: Jason Cong and John Peck Yuzheng Ding 
Address: Los Angeles, CA 90024  Murray Hill, NJ 07974  
Affiliation: Department of Computer Science University of California,  AT&T Bell Laboratories,  
Abstract: In this paper, we present a general synthesis system for SRAM-based FPGAs named RASP. RASP consists of a core with a set of synthesis and optimization algorithms for technology independent logic synthesis and technology mapping for generating generic lookup tables (LUTs), together with a set of architecturespecific technology mapping routines to map the generic LUT network to programmable logic blocks (PLBs) for various SRAM-based FPGA architectures. Via a set of design representation converter routines, these architecture-independent and dependent synthesis algorithms are easily linked, and the entire system is seamlessly integrated into the design flow of commercial FPGA design systems. As a result, RASP can produce highly optimized designs for various SRAM-based FPGA architectures, and can be quickly adapted for new SRAM-based FPGA architectures. We compare RASP performance with that of several commercial synthesis systems on the MCNC logic synthesis benchmarks and a video compressor/decompressor. For almost all cases, RASP produces mapping solutions with significantly smaller critical path delay after place and route than current commercial synthesis systems. 
Abstract-found: 1
Intro-found: 1
Reference: [Al95] <author> Altera, </author> <title> Flex 8000 and Flex 10000 Programmable Logic Device Family Data Sheets. </title> <address> San Jose, CA: </address> <month> Altera </month> <year> 1995. </year>
Reference-contexts: There are several SRAM-based FPGA vendors, who introduce multiple new FPGA architectures each year. The existing SRAM-based FPGA products include the Xilinx XC3000, XC4000, and XC5000 families [Xi94a], the Altera FLEX8000 and FLEX10000 families <ref> [Al95] </ref>, AT&T 3000, ORCA1C, and ORCA2C families [AT&T95]. Many new architectures are always under development. The programmable logic blocks (PLBs) in various FPGA architectures are often different, in terms of the number of LUTs, their sizes, their connection patterns, and other glue logic in each type of PLB.
Reference: [AT&T95] <author> AT&T Microelectronics, </author> <title> Optimized Reconfigurable Cell Array (ORCA) Series FPGAs. </title> <institution> Allentown, PA: AT&T Microelectronics 1995. </institution>
Reference-contexts: There are several SRAM-based FPGA vendors, who introduce multiple new FPGA architectures each year. The existing SRAM-based FPGA products include the Xilinx XC3000, XC4000, and XC5000 families [Xi94a], the Altera FLEX8000 and FLEX10000 families [Al95], AT&T 3000, ORCA1C, and ORCA2C families <ref> [AT&T95] </ref>. Many new architectures are always under development. The programmable logic blocks (PLBs) in various FPGA architectures are often different, in terms of the number of LUTs, their sizes, their connection patterns, and other glue logic in each type of PLB.
Reference: [ChCD92] <author> Chen, K. C., J. Cong, Y. Ding, A. B. Kahng, and P. Trajmar, "DAG-Map: </author> <title> Graph-based FPGA technology mapping for delay optimization," </title> <journal> IEEE Design and Test of Comput., </journal> <pages> pp. 7-20, </pages> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: strong need for a general synthesis system for SRAM-based FPGAs which can be easily and effectively adapted to various FPGA architectures. (2) Much work has been done on architecture independent LUT-based synthesis and mapping for particular optimization objectives, such as area minimization [FrRC90, MuNS90, Ka91a, Wo91a, LaPV93, SaTh92], delay minimization <ref> [FrRV91b, MuSB91b, ChCD92, CoDi94a] </ref>, routability [ScKC92], or a combination of several objectives [CoDi94b, CoHw95a]. Although many of these algorithms have reported very encouraging results in terms of optimizing the LUT networks, most of them have not been tested on various real FPGA architectures.
Reference: [CoDi92a] <author> Cong, J. and Y. Ding, </author> <title> "An optimal technology mapping for delay optimization in lookup-table based FPGA designs," </title> <booktitle> Proc. IEEE Int. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 48-53, </pages> <month> Nov. </month> <year> 1992. </year>
Reference: [CoDi93b] <author> Cong, J. and Y. Ding, </author> <title> "Beyond the Combinatorial Limit in Depth Minimization for LUT-Based FPGA Designs," </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 110-114, </pages> <year> 1993. </year>
Reference-contexts: RASP also provides the flexibility for experimentation at each substep of the synthesis and mapping process, which is useful in tuning the optimization for a particular set of objectives. We have successfully incorporated several FPGA synthesis and technology mapping algorithms, including FlowMap [CoDi94a], FlowMap-R [CoDi94b], FlowSYN <ref> [CoDi93b] </ref>, and CutMap [CoHw95a], into RASP as the LUT mapping engines; we have also developed heuristics for PLB mapping, including ones for the Xilinx XC3000 and XC4000 FPGA families. <p> To generate a set of mapping solutions, the depth bound is gradually increased and mapping is carried out for each depth bound. This algorithm is particularly suitable for RASP since it provides flexibility for meeting optimization objectives. FlowSYN: The FlowSYN <ref> [CoDi93b] </ref> algorithm inherits the combinatorial optimization techniques from FlowMap. In addition, it uses global structural information obtained during combinatorial optimization to selectively resynthesize parts of the given network using Boolean logic operations for further depth and area optimization.
Reference: [CoDi94a] <author> Cong, J. and Y. Ding, "FlowMap: </author> <title> An Optimal Technology Mapping Algorithm for Delay Optimization in Lookup-Table Based FPGA Designs," </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> Vol. </volume> <pages> 13(1) pp. 1-12, </pages> <year> 1994. </year>
Reference-contexts: strong need for a general synthesis system for SRAM-based FPGAs which can be easily and effectively adapted to various FPGA architectures. (2) Much work has been done on architecture independent LUT-based synthesis and mapping for particular optimization objectives, such as area minimization [FrRC90, MuNS90, Ka91a, Wo91a, LaPV93, SaTh92], delay minimization <ref> [FrRV91b, MuSB91b, ChCD92, CoDi94a] </ref>, routability [ScKC92], or a combination of several objectives [CoDi94b, CoHw95a]. Although many of these algorithms have reported very encouraging results in terms of optimizing the LUT networks, most of them have not been tested on various real FPGA architectures. <p> RASP also provides the flexibility for experimentation at each substep of the synthesis and mapping process, which is useful in tuning the optimization for a particular set of objectives. We have successfully incorporated several FPGA synthesis and technology mapping algorithms, including FlowMap <ref> [CoDi94a] </ref>, FlowMap-R [CoDi94b], FlowSYN [CoDi93b], and CutMap [CoHw95a], into RASP as the LUT mapping engines; we have also developed heuristics for PLB mapping, including ones for the Xilinx XC3000 and XC4000 FPGA families. <p> RASP incorporates a wide range of LUT-based FPGA synthesis and technology mapping algorithms with different objectives. Currently it consists of the following algorithms. FlowMap: FlowMap <ref> [CoDi94a] </ref> is a LUT-based FPGA technology mapper that produces depth-optimal mapping solutions for general Boolean networks. The basic idea of the FlowMap algorithm is to find a depth-optimal mapping for each node in the network, according to the topological order starting from the PI nodes. <p> It was shown that such a cut can be computed in polynomial time. FlowMap-R: The FlowMap-R [CoDi94b] algorithm uses depth relaxation and remapping to generate a set of mapping solutions with depth/area tradeoffs. It first uses FlowMap <ref> [CoDi94a] </ref> algorithm to compute a depth-optimal mapping solution as a starting point for depth relaxation.
Reference: [CoDi94b] <author> Cong, J. and Y. Ding, </author> <title> "On Area/Depth Tradeoff in LUT-Based FPGA Technology Mapping," </title> <journal> IEEE Trans. on VLSI Systems, </journal> <volume> Vol. 2, </volume> <month> June </month> <year> 1994. </year>
Reference-contexts: be easily and effectively adapted to various FPGA architectures. (2) Much work has been done on architecture independent LUT-based synthesis and mapping for particular optimization objectives, such as area minimization [FrRC90, MuNS90, Ka91a, Wo91a, LaPV93, SaTh92], delay minimization [FrRV91b, MuSB91b, ChCD92, CoDi94a], routability [ScKC92], or a combination of several objectives <ref> [CoDi94b, CoHw95a] </ref>. Although many of these algorithms have reported very encouraging results in terms of optimizing the LUT networks, most of them have not been tested on various real FPGA architectures. It would be interesting to know how effective these algorithms are when applied to each specific FPGA architecture. <p> RASP also provides the flexibility for experimentation at each substep of the synthesis and mapping process, which is useful in tuning the optimization for a particular set of objectives. We have successfully incorporated several FPGA synthesis and technology mapping algorithms, including FlowMap [CoDi94a], FlowMap-R <ref> [CoDi94b] </ref>, FlowSYN [CoDi93b], and CutMap [CoHw95a], into RASP as the LUT mapping engines; we have also developed heuristics for PLB mapping, including ones for the Xilinx XC3000 and XC4000 FPGA families. <p> Redundant logic trimming is also performed during the extraction. Next, the Boolean network is passed to the LUT mapping routine, which can be any implemented algorithm that recognizes BLIF or EQN input and produces output in these formats. For example, the FlowMap-R algorithm <ref> [CoDi94b] </ref> can be used. In the next section we shall introduce several algorithms which RASP supports. Optionally, technology independent logic synthesis can be performed prior to the mapping by using SIS commands. <p> The depth-optimal mapping of each node is achieved by computing a minimum height K-feasible cut (X, X) in the fanin cone of the node. It was shown that such a cut can be computed in polynomial time. FlowMap-R: The FlowMap-R <ref> [CoDi94b] </ref> algorithm uses depth relaxation and remapping to generate a set of mapping solutions with depth/area tradeoffs. It first uses FlowMap [CoDi94a] algorithm to compute a depth-optimal mapping solution as a starting point for depth relaxation.
Reference: [CoHw95a] <author> Cong, J. and Y. Hwang, </author> <title> "Simultaneous Depth and Area Minimization in LUT-based FPGA Mapping," </title> <booktitle> Proc. ACM/SIGDA International Symposium on FPGAs, </booktitle> <year> 1995. </year>
Reference-contexts: be easily and effectively adapted to various FPGA architectures. (2) Much work has been done on architecture independent LUT-based synthesis and mapping for particular optimization objectives, such as area minimization [FrRC90, MuNS90, Ka91a, Wo91a, LaPV93, SaTh92], delay minimization [FrRV91b, MuSB91b, ChCD92, CoDi94a], routability [ScKC92], or a combination of several objectives <ref> [CoDi94b, CoHw95a] </ref>. Although many of these algorithms have reported very encouraging results in terms of optimizing the LUT networks, most of them have not been tested on various real FPGA architectures. It would be interesting to know how effective these algorithms are when applied to each specific FPGA architecture. <p> RASP also provides the flexibility for experimentation at each substep of the synthesis and mapping process, which is useful in tuning the optimization for a particular set of objectives. We have successfully incorporated several FPGA synthesis and technology mapping algorithms, including FlowMap [CoDi94a], FlowMap-R [CoDi94b], FlowSYN [CoDi93b], and CutMap <ref> [CoHw95a] </ref>, into RASP as the LUT mapping engines; we have also developed heuristics for PLB mapping, including ones for the Xilinx XC3000 and XC4000 FPGA families. <p> The FlowSYN algorithm follows the FlowMap control flow by computing a mapping solution at each node in the topological ordering. Resynthesis using BDD-based functional decomposition is applied where combinatorial optimization fails to produce a good result. CutMap: The CutMap <ref> [CoHw95a] </ref> algorithm also improves FlowMap by performing area minimization under depth constraint, but uses an approach different than that used in FlowMap-R: it first computes the minimum depth to which each node can be mapped, then implements the LUTs not according to the minimum-height K-feasible cut, but according to the minimum-cost
Reference: [FrRC90] <author> Francis, R. J., J. Rose, and K. Chung, "Chortle: </author> <title> A Technology Mapping Program for Lookup Table-Based Field Programmable Gate Arrays," </title> <booktitle> Proc. 27th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 613-619, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: There is a strong need for a general synthesis system for SRAM-based FPGAs which can be easily and effectively adapted to various FPGA architectures. (2) Much work has been done on architecture independent LUT-based synthesis and mapping for particular optimization objectives, such as area minimization <ref> [FrRC90, MuNS90, Ka91a, Wo91a, LaPV93, SaTh92] </ref>, delay minimization [FrRV91b, MuSB91b, ChCD92, CoDi94a], routability [ScKC92], or a combination of several objectives [CoDi94b, CoHw95a].
Reference: [FrRV91b] <author> Francis, R. J., J. Rose, and Z. Vranesic, </author> <title> "Technology Mapping for Delay Optimization of Lookup Table-Based FPGAs," </title> <booktitle> MCNC Logic Synthesis Workshop, </booktitle> <year> 1991. </year>
Reference-contexts: strong need for a general synthesis system for SRAM-based FPGAs which can be easily and effectively adapted to various FPGA architectures. (2) Much work has been done on architecture independent LUT-based synthesis and mapping for particular optimization objectives, such as area minimization [FrRC90, MuNS90, Ka91a, Wo91a, LaPV93, SaTh92], delay minimization <ref> [FrRV91b, MuSB91b, ChCD92, CoDi94a] </ref>, routability [ScKC92], or a combination of several objectives [CoDi94b, CoHw95a]. Although many of these algorithms have reported very encouraging results in terms of optimizing the LUT networks, most of them have not been tested on various real FPGA architectures.
Reference: [Ka91a] <author> Karplus, K., "XMap: </author> <title> A Technology Mapper for Table-lookup Field-Programmable Gate Arrays," </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 240-243, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: There is a strong need for a general synthesis system for SRAM-based FPGAs which can be easily and effectively adapted to various FPGA architectures. (2) Much work has been done on architecture independent LUT-based synthesis and mapping for particular optimization objectives, such as area minimization <ref> [FrRC90, MuNS90, Ka91a, Wo91a, LaPV93, SaTh92] </ref>, delay minimization [FrRV91b, MuSB91b, ChCD92, CoDi94a], routability [ScKC92], or a combination of several objectives [CoDi94b, CoHw95a].
Reference: [LaPV93] <author> Lai, Y.-T., M. Pedram, and S. Vrudhula, </author> <title> "BDD Based Decomposition of Logic Functions with Application to FPGA Synthesis," </title> <booktitle> Proc. 30th ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 642-647, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: There is a strong need for a general synthesis system for SRAM-based FPGAs which can be easily and effectively adapted to various FPGA architectures. (2) Much work has been done on architecture independent LUT-based synthesis and mapping for particular optimization objectives, such as area minimization <ref> [FrRC90, MuNS90, Ka91a, Wo91a, LaPV93, SaTh92] </ref>, delay minimization [FrRV91b, MuSB91b, ChCD92, CoDi94a], routability [ScKC92], or a combination of several objectives [CoDi94b, CoHw95a].
Reference: [MuNS90] <author> Murgai, R., Y. Nishizaki, N. Shenoy, R. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> "Logic Synthesis Algorithms for Programmable Gate Arrays," </title> <booktitle> Proc. 27th ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 620-625, </pages> <year> 1990. </year>
Reference-contexts: There is a strong need for a general synthesis system for SRAM-based FPGAs which can be easily and effectively adapted to various FPGA architectures. (2) Much work has been done on architecture independent LUT-based synthesis and mapping for particular optimization objectives, such as area minimization <ref> [FrRC90, MuNS90, Ka91a, Wo91a, LaPV93, SaTh92] </ref>, delay minimization [FrRV91b, MuSB91b, ChCD92, CoDi94a], routability [ScKC92], or a combination of several objectives [CoDi94b, CoHw95a].
Reference: [MuSB91a] <author> Murgai, R., N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> Improved Logic Synthesis Algorithms for Table Look Up Architectures, </title> <booktitle> Proc. IEEE Intl Conf. on Computer-Aided Design, </booktitle> <pages> pp. 564-567, </pages> <address> Santa Clara, CA, </address> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: Clearly, v and w can be merged by putting LUT v and LUT w into the F and H 1 A similar approach for XC3000 CLB generation has been used by, for example, <ref> [MuSB91a] </ref>. function generators of v. We compute a maximum weighted matching with the depth of LUT w as preference weight and large enough nominal weight to guarantee a maximum cardinality. The use of depth as preferred weight is to encourage the packing of LUTs of large depth first.
Reference: [MuSB91b] <author> Murgai, R., Y. Nishizaki, N. Shenoy, R. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> "Performance Directed Synthesis for Table Look Up Programmable Gate Arrays," </title> <booktitle> Proc. IEEE Intl'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 572-575, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: strong need for a general synthesis system for SRAM-based FPGAs which can be easily and effectively adapted to various FPGA architectures. (2) Much work has been done on architecture independent LUT-based synthesis and mapping for particular optimization objectives, such as area minimization [FrRC90, MuNS90, Ka91a, Wo91a, LaPV93, SaTh92], delay minimization <ref> [FrRV91b, MuSB91b, ChCD92, CoDi94a] </ref>, routability [ScKC92], or a combination of several objectives [CoDi94b, CoHw95a]. Although many of these algorithms have reported very encouraging results in terms of optimizing the LUT networks, most of them have not been tested on various real FPGA architectures.
Reference: [SaTh92] <author> Sawkar, P., D. Thomas, </author> <title> Technology Mapping for Table-Look-Up Based Field Programmable Gate Arrays, </title> <booktitle> ACM/SIGDA Workshop on Field Programmable Gate Arrays, </booktitle> <pages> pp. 82-88, </pages> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: There is a strong need for a general synthesis system for SRAM-based FPGAs which can be easily and effectively adapted to various FPGA architectures. (2) Much work has been done on architecture independent LUT-based synthesis and mapping for particular optimization objectives, such as area minimization <ref> [FrRC90, MuNS90, Ka91a, Wo91a, LaPV93, SaTh92] </ref>, delay minimization [FrRV91b, MuSB91b, ChCD92, CoDi94a], routability [ScKC92], or a combination of several objectives [CoDi94b, CoHw95a].
Reference: [ScKC92] <author> Schlag, M., J. Kong, and P. K. Chan, </author> <title> "Routability-Driven Technology Mapping for Lookup Table-Based FPGAs," </title> <booktitle> Proc. 1992 IEEE International Conference on Computer Design, </booktitle> <pages> pp. 86-90, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: synthesis system for SRAM-based FPGAs which can be easily and effectively adapted to various FPGA architectures. (2) Much work has been done on architecture independent LUT-based synthesis and mapping for particular optimization objectives, such as area minimization [FrRC90, MuNS90, Ka91a, Wo91a, LaPV93, SaTh92], delay minimization [FrRV91b, MuSB91b, ChCD92, CoDi94a], routability <ref> [ScKC92] </ref>, or a combination of several objectives [CoDi94b, CoHw95a]. Although many of these algorithms have reported very encouraging results in terms of optimizing the LUT networks, most of them have not been tested on various real FPGA architectures.
Reference: [ScVMJ95] <author> B. Schoner, J. Villasenor, S. Molloy, and R. Jain, </author> <title> "Techniques for FPGA Implementation of Video Compression Systems," </title> <booktitle> Proc. ACM/SIGDA International Symposium on FPGAs , 1995. </booktitle>
Reference-contexts: Fig 7: Families of solutions generated using RASP/FlowMap-R and XC4000 LUT to CLB matching heuristic. Fig 7 shows the RASP solutions for the MCNC logic synthesis benchmarks and a reconfigurable FPGA based real-time video compressor/decompressor design <ref> [ScVMJ95] </ref>. The r column indicates the relaxation value used during the generation of the solution. The XNF netlist for the video compressor circuit consists of 1281 simple gates, 234 registers and 79 I/Os. The video decompressor consists of 1205 simple gates, 249 registers, and 75 I/Os.
Reference: [SeSL92] <author> Sentovich, E., K. Singh, L. Lavagno, C. Moon, R. Murgai, A. Saldanha, H. Savoj, P. Stephen, R. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> SIS: A System for Sequential Circuit Synthesis, </title> <institution> U.C. Berkeley Technical Report UCB/ERL M92/41, </institution> <month> May, </month> <year> 1992. </year>
Reference-contexts: Then, the BLIF network representing the random logic portion of the design is processed for sequential logic optimization. RASP uses the SIS logic synthesis system <ref> [SeSL92] </ref> to perform such optimization, which gives the user a rich variety of algorithm choices for state extraction, state minimization and state assignment.
Reference: [Xi94a] <author> Xilinx, </author> <title> The Programmable Logic Data Book. </title> <address> San Jose, CA: </address> <month> Xilinx </month> <year> 1994. </year>
Reference-contexts: There are several SRAM-based FPGA vendors, who introduce multiple new FPGA architectures each year. The existing SRAM-based FPGA products include the Xilinx XC3000, XC4000, and XC5000 families <ref> [Xi94a] </ref>, the Altera FLEX8000 and FLEX10000 families [Al95], AT&T 3000, ORCA1C, and ORCA2C families [AT&T95]. Many new architectures are always under development.
Reference: [Wo91a] <author> Woo, N.S. </author> <title> A Heuristic Method for FPGA Technology Mapping Based on the Edge Visibility, </title> <booktitle> Proc. ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 248-251, </pages> <address> San Francisco, CA, </address> <month> Jun. </month> <year> 1991. </year>
Reference-contexts: There is a strong need for a general synthesis system for SRAM-based FPGAs which can be easily and effectively adapted to various FPGA architectures. (2) Much work has been done on architecture independent LUT-based synthesis and mapping for particular optimization objectives, such as area minimization <ref> [FrRC90, MuNS90, Ka91a, Wo91a, LaPV93, SaTh92] </ref>, delay minimization [FrRV91b, MuSB91b, ChCD92, CoDi94a], routability [ScKC92], or a combination of several objectives [CoDi94b, CoHw95a].
References-found: 21

