URL: http://www.cs.purdue.edu/homes/park/ice98.ps.Z
Refering-URL: http://www.cs.purdue.edu/homes/park/publ_regular.html
Root-URL: http://www.cs.purdue.edu
Email: fpark,sitharam,chensgg@cs.purdue.edu  
Title: Quality of Service Provision in Noncooperative Networks: Heterogenous Preferences, Multi-Dimensional QoS Vectors, and Burstiness  
Author: Kihong Park Meera Sitharam Shaogang Chen 
Note: Supported in part by NSF grants ANI-9714707, ESS-9806741, and grants from PRF and Sprint. Supported in part by NSF grant CCR-9409809. Present address:  
Address: West Lafayette, IN 47907  Gainesville, FL 32611.  
Affiliation: Department of Computer Sciences Purdue University  Dept. of Computer and Information Science and Engineer ing, University of Florida,  
Abstract: This paper studies the quality of service (QoS) provision problem in noncooperative networks where applications or users are selfish and routers implement generalized processor sharing (GPS)-based packet scheduling. First, we formulate a model of QoS provision in noncooperative networks where users are given the freedom to choose both the service classes and traffic volume allocated, and heterogenous QoS preferences are captured by individual utility functions. We present a comprehensive analysis of the noncooperative multi-class QoS provision game, giving a complete characterization of Nash equilibria and their existence criteria, and show under what conditions they are Pareto and system optimal. We show that, in general, Nash equilibria need not exist, and when they do exist, they need not be Pareto nor system optimal. However, we show that for certain "resource-plentiful" systems, the world indeed can be nice with Nash equilibria, Pareto optima, and system optima collapsing into a single class. Second, we study the problem of facilitating effective QoS in systems with multi-dimensional QoS vectors containing z Supported in part by NSF grant ANI-9714707. both mean- and burstiness-related QoS measures. We extend the game-theoretic analysis to multi-dimensional QoS vector games and show under what conditions the aforementioned results carry over. Motivated by the same context, we study the impact of burstiness under multiple QoS measures on the properties of the induced QoS levels rendered by the service classes in the system. We show that under bursty traffic conditions, it is, in general, impossible for a service class to deliver quality of service superior in both mean- and burstiness-related QoS measures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Basar and G. J. Olsder. </author> <title> Dynamic Noncooperative Game Theory. </title> <publisher> Academic Press, </publisher> <address> second edition, </address> <year> 1995. </year>
Reference-contexts: The formal network QoS provision game is defined in Section 2. We are given n applications or users and m service classes where each user i 2 <ref> [1; n] </ref> has a traffic demand given by its mean data rate i . <p> The QoS achieved in service class j 2 <ref> [1; m] </ref> is determined by a QoS function c j (e.g., packet loss rate), and c j is monotone in q j where q j = P i ij . The generalization to multi-dimensional QoS vectors is shown in Section 4.1. <p> A collection of papers covering a broad range of topics can be found in [6]. A brief survey of some of the literature is provided in [14]. Some standard references to game theory and microeconomics include <ref> [1, 17, 42, 45, 46] </ref>. Many of the earlier papers including some recent ones [16, 15, 26, 31, 43] have espounded a cooperative game theory framework to model user interactions and derive results based on Pareto optimality. <p> In our model, there is no a priori fixed 1-1 correspondence of players to service classes. Indeed, the very essence of the QoS provision problem is to give each player i 2 <ref> [1; n] </ref> the freedom to choose where she wants to send her traffic, from service class 1 all the way to service class m. Hence, our QoS provision model is fundamentally different from the flow control models, being more complex and producing equilibria structures that are different from [22], [44]. <p> Phrased in our language, the set of parallel links correspond to the service classes j 2 <ref> [1; m] </ref>, and a user i's average throughput demand i is assigned to the m routes given by the assignment vector fl i = ( i1 ; i2 ; : : : ; im ). <p> The service rate of the system is given by and we will assume that the switch implements a form of GPS packet scheduling with service weights ff 1 ; ff 2 ; : : : ; ff m where ff j 0, j 2 <ref> [1; m] </ref>, and P m j=1 ff j = 1. Here, m denotes the number of service classes. The total service rate is split between the two traffic classes = R + NR . <p> The video application, on the other hand, can only tolerate much smaller loss rates, and its utility is concentrated toward 0. Selfishness Selfishness, in our context, will mean that each application i 2 <ref> [1; n] </ref> will try to take actions so as to maximize its individual utility U i . <p> We arrive at a resource allocation problem in the following way. Let ij 0, i 2 <ref> [1; n] </ref>, j 2 [1; m], denote the traffic volume of the i'th application assigned to service class j. Thus, i = P m j=1 ij . That is, application i is given the freedom to choose which service classes to assign her traffic to and how much. <p> We arrive at a resource allocation problem in the following way. Let ij 0, i 2 [1; n], j 2 <ref> [1; m] </ref>, denote the traffic volume of the i'th application assigned to service class j. Thus, i = P m j=1 ij . That is, application i is given the freedom to choose which service classes to assign her traffic to and how much. <p> That is, application i is given the freedom to choose which service classes to assign her traffic to and how much. We also consider the special case when traffic assignments are restricted to be "all in one bag," i.e., ij 2 f i ; 0g, for all j 2 <ref> [1; m] </ref>. Let fl = ( ij : i; j) denote the resource assignment matrix, and let c 1 ; c 2 ; : : : ; c m be the packet loss rates of the m service classes. <p> That is, L i (fl) is the set of all unilateral strategies for player i. An assignment fl fl is a Nash equilibrium if 8i 2 <ref> [1; n] </ref>, 8fl 2 L i (fl fl ), That is, in a Nash equilibrium, player i cannot improve its individual utility U i by unilaterally changing its strategy. <p> From a resource allocation perspective, we would also like to know under what con ditions Nash equilibria are Pareto and system optimal 7 . Simplifying Assumption To make the analysis tractable, we will work with (unit) step utility functions where for each player i 2 <ref> [1; n] </ref>, U i (c) = 1; if c i , 0; otherwise. Here i 0 is a threshold that represents the i'th application's preference. <p> Here i 0 is a threshold that represents the i'th application's preference. Since c j = c j (q j ), j 2 <ref> [1; m] </ref>, there exist b ij 0 such that U i (c j (q j )) = 1; if q j b ij , 0; otherwise. <p> Following is a simple but often used fact on the induced ordering of the traffic volume thresholds b ij . It is a consequence of the total ordering of i and the monotonicity of c j . Proposition 3.1 8i 2 <ref> [1; n 1] </ref>, 8j 2 [1; m], b ij b i+1j . Next, we define certain subsets of service classes| parameterized by user i|that come into play when characterizing Nash equilibria. <p> Following is a simple but often used fact on the induced ordering of the traffic volume thresholds b ij . It is a consequence of the total ordering of i and the monotonicity of c j . Proposition 3.1 8i 2 [1; n 1], 8j 2 <ref> [1; m] </ref>, b ij b i+1j . Next, we define certain subsets of service classes| parameterized by user i|that come into play when characterizing Nash equilibria. Let I + i = f j 2 [1; m] : i = f j 2 [1; m] : q j &lt; b ij g, <p> Proposition 3.1 8i 2 [1; n 1], 8j 2 <ref> [1; m] </ref>, b ij b i+1j . Next, we define certain subsets of service classes| parameterized by user i|that come into play when characterizing Nash equilibria. Let I + i = f j 2 [1; m] : i = f j 2 [1; m] : q j &lt; b ij g, and i = f j 2 [1; m] : q j = b ij g. <p> 3.1 8i 2 [1; n 1], 8j 2 <ref> [1; m] </ref>, b ij b i+1j . Next, we define certain subsets of service classes| parameterized by user i|that come into play when characterizing Nash equilibria. Let I + i = f j 2 [1; m] : i = f j 2 [1; m] : q j &lt; b ij g, and i = f j 2 [1; m] : q j = b ij g. <p> Let I + i = f j 2 <ref> [1; m] </ref> : i = f j 2 [1; m] : q j &lt; b ij g, and i = f j 2 [1; m] : q j = b ij g. That is, I + i denotes the set of service class indices where player i has assigned a positive flow and the total traffic volume allocated exceeds player i's threshold. Thus user i attains 0 utility in these service classes. <p> Let q i j = k6=i kj . That is, q i j is the traffic volume assigned to service class j not counting player i's contribution (if any). Hence q j = ij + q i j . i = f j 2 <ref> [1; m] </ref> : q i i = f j 2 j &lt; b ij g. Hence J + i is the set of service classes where, irrespective of player i's actions, player i cannot garner any utility. Let J fl i = f j 2 [1; m] : b ij q <p> i = f j 2 <ref> [1; m] </ref> : q i i = f j 2 j &lt; b ij g. Hence J + i is the set of service classes where, irrespective of player i's actions, player i cannot garner any utility. Let J fl i = f j 2 [1; m] : b ij q i min k2J b ik q i i is the subset of service classes of J i where the positive utility achievable by user i is minimal. <p> Recall that the latter is denoted by L i (fl) where fl is any configuration. Proposition 3.2 Given fl, i 2 <ref> [1; n] </ref>, let v i = P j2J b ij q i j . Then 8fl 0 2 L i (fl); U i (fl 0 ) v i : Proposition 3.3 Given fl, i 2 [1; n], let i &gt; v i and J + i = ;. <p> Proposition 3.2 Given fl, i 2 <ref> [1; n] </ref>, let v i = P j2J b ij q i j . Then 8fl 0 2 L i (fl); U i (fl 0 ) v i : Proposition 3.3 Given fl, i 2 [1; n], let i &gt; v i and J + i = ;. <p> Theorem 3.4 (Nash Characterization) fl is a Nash equilibrium iff 8i 2 <ref> [1; n] </ref> either (a) I + (b) I i 6= ;, J i , or i = ;, J + i such that J i nfj fl g I 0 In words, for each player i, one of three conditions must hold: a user either achieves full individual util ity i <p> Moreover, for each user i there is an infinite sequence of time steps t i 1 &lt; t i 2 &lt; where i is allowed to perform an update (including a "no move" update). Theorem 3.13 (Resource-Plentiful System) For all i 2 <ref> [1; n] </ref>, let j=1 m X b ij : (3.14) Then fl is a Nash equilibrium if and only if fl is a system optimum if and only if fl is a Pareto optimum. <p> Let x = (x 1 ; x 2 ; : : : ; x s ) T , and let x j = j j s ) T denote the quality of service rendered to service class j 2 <ref> [1; m] </ref>. As before, we make the mono tonicity assumption dx j r =dq j 0, r 2 [1; s], j 2 [1; m], which is satisfied by most packet scheduling policies of interest including weighted fair queueing. <p> As before, we make the mono tonicity assumption dx j r =dq j 0, r 2 <ref> [1; s] </ref>, j 2 [1; m], which is satisfied by most packet scheduling policies of interest including weighted fair queueing. Each player's utility function U i (x), i 2 [1; n], has the form U i (x) = 1; if 8r 2 [1; s], x r i 0; otherwise, where i <p> : ; x s ) T , and let x j = j j s ) T denote the quality of service rendered to service class j 2 <ref> [1; m] </ref>. As before, we make the mono tonicity assumption dx j r =dq j 0, r 2 [1; s], j 2 [1; m], which is satisfied by most packet scheduling policies of interest including weighted fair queueing. <p> As before, we make the mono tonicity assumption dx j r =dq j 0, r 2 [1; s], j 2 [1; m], which is satisfied by most packet scheduling policies of interest including weighted fair queueing. Each player's utility function U i (x), i 2 <ref> [1; n] </ref>, has the form U i (x) = 1; if 8r 2 [1; s], x r i 0; otherwise, where i = ( i 1 ; i s ) T 0 is the multi dimensional threshold vector that represents the i'th application's preference. <p> dx j r =dq j 0, r 2 <ref> [1; s] </ref>, j 2 [1; m], which is satisfied by most packet scheduling policies of interest including weighted fair queueing. Each player's utility function U i (x), i 2 [1; n], has the form U i (x) = 1; if 8r 2 [1; s], x r i 0; otherwise, where i = ( i 1 ; i s ) T 0 is the multi dimensional threshold vector that represents the i'th application's preference. <p> In order to deal with the multi-dimensional QoS vec tors and thresholds uniformly, we henceforth make one of two uniformity assumptions: either assume that the thresholds i r can be ordered such that the ordering is uniform over r, i.e., 8r 2 <ref> [1; s] </ref>; 8i 2 [1; n] : i r ; (4.1) or we assume that the functional forms x j r are uniform over r for each j, i.e., 8j 2 [1; m] : x 1 = x 2 = = x j By isolatedness, x j r = x j <p> In order to deal with the multi-dimensional QoS vec tors and thresholds uniformly, we henceforth make one of two uniformity assumptions: either assume that the thresholds i r can be ordered such that the ordering is uniform over r, i.e., 8r 2 [1; s]; 8i 2 <ref> [1; n] </ref> : i r ; (4.1) or we assume that the functional forms x j r are uniform over r for each j, i.e., 8j 2 [1; m] : x 1 = x 2 = = x j By isolatedness, x j r = x j just as in Proposition <p> that the thresholds i r can be ordered such that the ordering is uniform over r, i.e., 8r 2 [1; s]; 8i 2 [1; n] : i r ; (4.1) or we assume that the functional forms x j r are uniform over r for each j, i.e., 8j 2 <ref> [1; m] </ref> : x 1 = x 2 = = x j By isolatedness, x j r = x j just as in Proposition 3.1, the condition x j r (q j ) i now be stated as q j b r ij using the definition b r r ) 1 <p> We can now rephrase U i (x j ) as U i (x j ) = 1; q j b ij , 0; otherwise. Moreover, under the assumption that the functional forms x j r are uniform over r for each j where x j isfies 8j 2 <ref> [1; m] </ref>, 8r 2 [1; s], x j r = x fl , and using the monotonicity of x j fl , it can be observed that the follow ing identity holds: b ij = min (x j r ) = (x j r2 [1;s] r ): (4.3) That is, the <p> Moreover, under the assumption that the functional forms x j r are uniform over r for each j where x j isfies 8j 2 [1; m], 8r 2 <ref> [1; s] </ref>, x j r = x fl , and using the monotonicity of x j fl , it can be observed that the follow ing identity holds: b ij = min (x j r ) = (x j r2 [1;s] r ): (4.3) That is, the min operator commutes with <p> Proposition 4.4 For the multi-dimensional QoS vector model with assumption (4.1) or (4.2), there exists an ordering of the players i 2 <ref> [1; n] </ref> such that 8i 2 [1; n 1], 8j 2 [1; m], Proposition 4.5 The game-theoretic results of Section 3 hold for the multi-dimensional QoS vector model with assumption (4.1) or (4.2). The proof structure of our game-theoretic results rely on Proposition 3.1 to order application QoS preferences. <p> Proposition 4.4 For the multi-dimensional QoS vector model with assumption (4.1) or (4.2), there exists an ordering of the players i 2 [1; n] such that 8i 2 <ref> [1; n 1] </ref>, 8j 2 [1; m], Proposition 4.5 The game-theoretic results of Section 3 hold for the multi-dimensional QoS vector model with assumption (4.1) or (4.2). The proof structure of our game-theoretic results rely on Proposition 3.1 to order application QoS preferences. <p> Proposition 4.4 For the multi-dimensional QoS vector model with assumption (4.1) or (4.2), there exists an ordering of the players i 2 [1; n] such that 8i 2 [1; n 1], 8j 2 <ref> [1; m] </ref>, Proposition 4.5 The game-theoretic results of Section 3 hold for the multi-dimensional QoS vector model with assumption (4.1) or (4.2). The proof structure of our game-theoretic results rely on Proposition 3.1 to order application QoS preferences. <p> linearly ordered by the bounds on their packet loss rate, i i 0 () i i 0 , in the vector QoS case, this is no longer the case and only a partial order can be imposed on the set of QoS requirements fi = f i : i 2 <ref> [1; n] </ref> g where i = ( i 1 ; i s ) T . <p> Given that the QoS rendered by a service class j 2 <ref> [1; m] </ref> is an induced phenomenon depending on the to tal traffic influx q j to class j, the question arises how well the induced QoS levels match the needs of the constituent application QoS requirements. <p> As part of the general problem, we are interested in answering a very basic but fundamental question: If uniformity holds and fi is totally ordered, can QoS be rendered at the m service classes such that the performance QoS vector set X = f x j : j 2 <ref> [1; m] </ref> g, x j = (x 1 ; x 2 ; : : : ; x j s ) T , is also linearly or dered? Of course, to maintain comparability, we will assume that the n input processes are i.i.d.
Reference: [2] <author> A. Bovopoulous and A. Lazar. </author> <title> Decentralized algorithms for optimal flow control. </title> <booktitle> In Proc. 25th Allerton Conference on Communication, Control and Computing, </booktitle> <year> 1987. </year>
Reference-contexts: The noncooperative framework can be traced as far back as '81 to a paper by Yemini [51] who has since been more strongly associated with the cooperative approach. The noncooperative network resource allocation approach has been actively pursued by Lazar and his co-workers beginning in the late '80s <ref> [20, 2] </ref> with more recent work carried out jointly with Korilis and Orda [21, 22, 23, 24, 34]. Their main work has revolved around an optimal flow control problem, and the development of techniques needed to show the existence of Nash equilibria [22].
Reference: [3] <author> A. Campbell, C. Aurrecoechea, and L. Hauw. </author> <title> A review of QoS architectures. </title> <note> To appear in ACM Multimedia Systems Journal, </note> <year> 1996. </year>
Reference-contexts: 1 Introduction 1.1 Background With the increased deployment of high-speed local- and wide-area networks carrying a multitude of information from e-mail to bulk data to voice, audio, and video, provisioning adequate quality of service (QoS) to the diverse application base has become an important problem <ref> [3, 13, 27, 33] </ref>. This paper describes a QoS provision architecture suited for best-effort environments, based on ideas from microeconomics and noncooperative game theory.
Reference: [4] <author> S. Chen and K. Park. </author> <title> An architecture for noncooperative QoS provision in many-switch systems. </title> <type> Technical Report CSD-TR-98-013, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1998. </year>
Reference-contexts: Many-Switch Systems In <ref> [4, 5] </ref>, we describe an architecture for noncooperative multi-class QoS provision in many-switch systems 4 . Motivated by the analytical (and simulation) results and insights of this paper, we use the single-switch model as a building block in constructing a scalable architecture for multi-class QoS provision in WAN environments. <p> In the latter, the interaction among switches or routers introduces couplings that give rise to new complexities and a slew of challenging distributed control problems. An architecture for noncooperative multi-class QoS provision in many-switch systems can be found in <ref> [4, 5] </ref>. Acknowledgments The proofs of our results in the paper have been omitted due to space constraints. All proofs can be found in [38]. They are also available on-line as http://www.cs.purdue.edu/homes/park/ noncoop qos tech new.ps.Z.
Reference: [5] <author> S. Chen and K. Park. </author> <title> A distributed protocol for multi-class QoS provision in noncooperative many-switch systems. </title> <booktitle> To appear in Proc. International Conference on Network Protocols, </booktitle> <year> 1998. </year>
Reference-contexts: Many-Switch Systems In <ref> [4, 5] </ref>, we describe an architecture for noncooperative multi-class QoS provision in many-switch systems 4 . Motivated by the analytical (and simulation) results and insights of this paper, we use the single-switch model as a building block in constructing a scalable architecture for multi-class QoS provision in WAN environments. <p> In the latter, the interaction among switches or routers introduces couplings that give rise to new complexities and a slew of challenging distributed control problems. An architecture for noncooperative multi-class QoS provision in many-switch systems can be found in <ref> [4, 5] </ref>. Acknowledgments The proofs of our results in the paper have been omitted due to space constraints. All proofs can be found in [38]. They are also available on-line as http://www.cs.purdue.edu/homes/park/ noncoop qos tech new.ps.Z.
Reference: [6] <editor> Scott Clearwater, editor. </editor> <booktitle> Market-Based Control: </booktitle>
Reference-contexts: A collection of papers covering a broad range of topics can be found in <ref> [6] </ref>. A brief survey of some of the literature is provided in [14]. Some standard references to game theory and microeconomics include [1, 17, 42, 45, 46].
References-found: 6

