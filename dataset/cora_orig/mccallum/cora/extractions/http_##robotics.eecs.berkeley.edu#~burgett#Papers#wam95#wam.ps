URL: http://robotics.eecs.berkeley.edu/~burgett/Papers/wam95/wam.ps
Refering-URL: http://robotics.eecs.berkeley.edu/~burgett/pubs.html
Root-URL: 
Title: SHAPE SYNTHESIS FROM SPARSE, FEATURE-BASED INPUT  
Author: Steve R. Burgett Roger T. Bush S. Shankar Sastry Carlo H. Sequin 
Keyword: Concurrent Design, Shape Synthesis, Computer Aided Design, Design Automation.  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California, Berkeley  
Date: November 1995  
Address: San Francisco, CA,  Berkeley, California USA  
Note: To appear in Proceedings, ASME Winter Annual Meeting,  
Abstract: We are researching a new paradigm for cad which aims to support the early stages of mechanical design well enough that designers are motivated to use the workstation as a conceptual design tool. At the heart of our approach is shape synthesis, the computer generation of part designs. The need for such design automation arises from the fact that many mechanical parts can be defined by two kinds of geometry: features that are critical to its function (application features), and the material that merely fleshes out the rest of the part (bulk shape). Application features are most often associated with contact surfaces of the part, for example, a bore for a bearing or a mounting surface for a motor. They are the high-level entities in terms of which the designer reasons about the design. Bulk shape must obey certain constraints, such as noninterference with other parts, minimum allowable thickness of the part, etc., but is somewhat arbitrary. We are developing a system wherein the designer inputs the application features, along with topological constraints, degrees of freedom, and boundary volumes, then the bulk shapes of the parts are synthesized automatically. Overall economy is enhanced by reducing the amount of input necessary from the designer, by providing for more complete exploration of the design space, and by enhancing manufac-turability and assemblability of the component parts. This paper presents the functional requirements of such a system, and discusses preliminary results. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Smithers, </author> <title> "AI-based design versus geometry based design, or why design cannot be supported by geometry alone," </title> <booktitle> Computer Aided Design, </booktitle> <volume> vol. 21, </volume> <pages> pp. 141-150, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: However, a cad application that relies on explicit geometric input is not well matched to the design process and thus is usually relegated to the task of design documentation rather than a true aid to designers <ref> [1] </ref>. In the early stages of design, only a fraction of the geometric elements are known, yet solid mod-elling software requires models to have physically realizable shapes, even for simple visualization. <p> Several authors have made this observation <ref> [1, 4, 5] </ref>. Shapiro and Voelker [6] introduce a new view to interpret mechanical function in terms of energy exchanges and to consider some key portions of geometry as energy ports. These are the discrete subsets of a system's physical boundary through which it interacts with its environment.
Reference: [2] <author> J. J. Cunningham and J. R. Dixon, </author> <title> "Designing with features: The origin of features," </title> <booktitle> in Intl. Computers In Engineering Conference, </booktitle> <pages> pp. 237-243, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: Not only is it time consuming to edit explicit geometry, it has been noted that geometry alone is incomplete as a design specification language <ref> [2] </ref>. After a design is complete, much valuable information is not represented. It is difficult to decide what can be changed, what parts of the design are crucial, and why certain decisions were made in the first place.
Reference: [3] <author> J. J. Shah, </author> <title> "Assessment of features technology," </title> <booktitle> Computer Aided Design, </booktitle> <volume> vol. 23, </volume> <pages> pp. 331-343, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: It is difficult to decide what can be changed, what parts of the design are crucial, and why certain decisions were made in the first place. In fact, a major impetus for feature recognition research is the inference of knowledge lost during the design process <ref> [3] </ref>. A method of specification that facilitates the design process and is richer in information is necessary as a foundation for future mechanical cad systems.
Reference: [4] <author> J. J. Shah, S. Sen, and S. Ghosh, </author> <title> "An intelligent cad environment for routine mechanical design," </title> <booktitle> in Intl. Computers In Engineering Conference, </booktitle> <pages> pp. 111-117, </pages> <publisher> American Society of Mechanical Engineers, </publisher> <year> 1991. </year>
Reference-contexts: They include constraint satisfaction systems and knowledge-based systems. These methods tend to be domain dependent (e.g. for designing helical gears), and do not handle the geometric design well, if at all <ref> [4] </ref>. For example, an AI system might determine the required size of a bearing, or select an appropriate motor, but rarely is consideration given to designing appropriately shaped parts to hold that bearing or motor in place. <p> Several authors have made this observation <ref> [1, 4, 5] </ref>. Shapiro and Voelker [6] introduce a new view to interpret mechanical function in terms of energy exchanges and to consider some key portions of geometry as energy ports. These are the discrete subsets of a system's physical boundary through which it interacts with its environment.
Reference: [5] <author> M. R. Cutkosky, D. R. Brown, and J. M. Tenenbaum, </author> <title> "Working with partially specified designs in concurrent product and process design," </title> <type> Tech. Rep. </type> <institution> 19891214, Center for Design Research, Stanford University, </institution> <address> Stan-ford, CA, </address> <year> 1989. </year>
Reference-contexts: Several authors have made this observation <ref> [1, 4, 5] </ref>. Shapiro and Voelker [6] introduce a new view to interpret mechanical function in terms of energy exchanges and to consider some key portions of geometry as energy ports. These are the discrete subsets of a system's physical boundary through which it interacts with its environment.
Reference: [6] <author> V. Shapiro and H. Voelker, </author> <title> "On the role of geometry in mechanical design," </title> <booktitle> Research in Engineering Design, </booktitle> <volume> vol. 1, no. 1, </volume> <pages> pp. 69-73, </pages> <year> 1989. </year>
Reference-contexts: Several authors have made this observation [1, 4, 5]. Shapiro and Voelker <ref> [6] </ref> introduce a new view to interpret mechanical function in terms of energy exchanges and to consider some key portions of geometry as energy ports. These are the discrete subsets of a system's physical boundary through which it interacts with its environment. <p> The refinement of this design depends on the relative impor tance of manufacturing costs, part performance, etc. The first observation, as Shapiro and Voelker <ref> [6] </ref> point out, is that in a typical design cycle the geometries of the application features are known by the designer before that of the bulk shape. In other words, during conceptual design exploration, only certain details of each part are interesting| the application features. <p> That is followed by a material synthesis step which fleshes out the actual shape of the part using the skeleton as a guide. This is identical to the procedure of Shimada and Gossard [9], who apply the term skeleton to the energy paths of Shapiro and Voelker <ref> [6] </ref>. We also observe that the skeleton is analogous to the sticks diagram [11] used in cad for integrated circuit design. There are alternatives to this two step approach. For example, Duffey and Dixon [7] use recursive application of topological operators to generate designs for extrusions.
Reference: [7] <author> M. R. Duffey and J. R. Dixon, </author> <title> "Automating extrusion design: A case study in geometric and topological reasoning for mechanical design," </title> <booktitle> Computer Aided Design, </booktitle> <volume> vol. 20, </volume> <pages> pp. 589-596, </pages> <month> Dec. </month> <year> 1988. </year>
Reference-contexts: Since a part's function is determined by its application features, it is possible to automate the synthesis of the bulk shape, using the application features as a design specification. A few authors have begun to explore shape synthesis on these terms. Duffey and Dixon <ref> [7] </ref> automate the design of cross sections for extruded beams given load and support points and forbidden areas. Graham and Ul-rich [8] automate the design of 2-D bending patterns for sheet metal parts using path planning and iterative refinement. <p> We also observe that the skeleton is analogous to the sticks diagram [11] used in cad for integrated circuit design. There are alternatives to this two step approach. For example, Duffey and Dixon <ref> [7] </ref> use recursive application of topological operators to generate designs for extrusions. In figures 2 and 6, there are examples which could be synthesized in a single step. Design 2 (b) is a modification of a rectilinear bounding box.
Reference: [8] <author> P. V. Graham and K. T. Ulrich, </author> <title> "Structural synthesis of sheet metal parts: An analogy to path planning using manufacturability as a guide," </title> <booktitle> in Advances in Design Automation, </booktitle> <pages> pp. 289-294, </pages> <booktitle> Vol. 1, American Society of Mechanical Engineers, </booktitle> <month> Sept. </month> <year> 1989. </year>
Reference-contexts: A few authors have begun to explore shape synthesis on these terms. Duffey and Dixon [7] automate the design of cross sections for extruded beams given load and support points and forbidden areas. Graham and Ul-rich <ref> [8] </ref> automate the design of 2-D bending patterns for sheet metal parts using path planning and iterative refinement. Given application features and paths, Shimada and Gossard [9] generate skinning boundaries by solving for the shape of a deformable curve in a potential energy field. <p> In its simplest form, the problem is analogous to finding a path for a mobile robot through a roomful of obstacles, and we can borrow the algorithms used to solve those problems. This technique was investigated by Graham and Ulrich <ref> [8] </ref>. Most techniques account for the size of the robot by transforming the problem to configuration space (cspace) [20, 14]. In the case of a circular robot moving through a two-dimensional field of obstacles, cspace is parameterized by the coordinates of the center of the robot.
Reference: [9] <author> K. Shimada and D. Gossard, </author> <title> "Automated shape generation of components in mechanical assemblies," </title> <booktitle> in Advances in Design Automation, </booktitle> <pages> pp. 51-58, </pages> <booktitle> Vol. 1, American Society of Mechanical Engineers, </booktitle> <year> 1992. </year>
Reference-contexts: Graham and Ul-rich [8] automate the design of 2-D bending patterns for sheet metal parts using path planning and iterative refinement. Given application features and paths, Shimada and Gossard <ref> [9] </ref> generate skinning boundaries by solving for the shape of a deformable curve in a potential energy field. In this paper we present a paradigm for integrating shape synthesis into the design environment. <p> By changing parameters to the shape synthesizer, the designer can examine various solutions that satisfy the functional specification. This description could equally well be applied to the system developed by Shimada and Gossard <ref> [9] </ref>. Our goal is to expand on those ideas to present the user with a selection of shape styles. A basic tenet of our research is that the cad system and the user should work in concert, and the link between them should be a highly interactive interface. <p> In the first step we will generate a skeleton which abstracts the structure of the part. That is followed by a material synthesis step which fleshes out the actual shape of the part using the skeleton as a guide. This is identical to the procedure of Shimada and Gossard <ref> [9] </ref>, who apply the term skeleton to the energy paths of Shapiro and Voelker [6]. We also observe that the skeleton is analogous to the sticks diagram [11] used in cad for integrated circuit design. There are alternatives to this two step approach. <p> The material synthesizer must guarantee that the finished shape completely contains the skeleton, and that no portion violates any design rules or illegal regions. The output of the material synthesizer is the actual part design. Shimada's and Gossard's <ref> [9] </ref> elegant method of generating skinning boundaries by placing a de-formable curve in a potential field represents one possible material synthesis style.
Reference: [10] <author> F. Arbab, </author> <title> Requirements and Architecture of CAM oriented CAD systems for Design and Manufacture of Mechanical Parts. </title> <type> PhD thesis, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <year> 1982. </year>
Reference-contexts: If geometric operations that correspond to actual machine steps are used (e.g. drill hole, angled cut), a construction plan is implicitly generated with the part. This simulates the destructive solid geometry approach <ref> [10] </ref> without requiring the designer to work in terms of these low-level primitives.
Reference: [11] <author> J. D. Williams, </author> <title> "STICKS|a new approach to LSI design," </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1977. </year>
Reference-contexts: This is identical to the procedure of Shimada and Gossard [9], who apply the term skeleton to the energy paths of Shapiro and Voelker [6]. We also observe that the skeleton is analogous to the sticks diagram <ref> [11] </ref> used in cad for integrated circuit design. There are alternatives to this two step approach. For example, Duffey and Dixon [7] use recursive application of topological operators to generate designs for extrusions. In figures 2 and 6, there are examples which could be synthesized in a single step.
Reference: [12] <author> H. L. Johannesson, </author> <title> "Computer aided part design based on standard component interface geometry," </title> <booktitle> in Advances in Design Automation, </booktitle> <pages> pp. 347-352, </pages> <publisher> American Society of Mechanical Engineers, </publisher> <year> 1991. </year>
Reference-contexts: The program would extract the necessary mounting surfaces, threaded holes, etc., from each model, and synthesize a part that has these features. The addition of "interface geometry" to part databases has been proposed by Johannesson <ref> [12] </ref>. In figure 3, the information yielded by the input process includes application feature descriptions for each part, general illegal regions, part positions, and motion descriptions.
Reference: [13] <author> J. J. Craig, </author> <title> Introduction to Robotics. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <editor> second ed., </editor> <year> 1989. </year>
Reference-contexts: If a part has multiple degrees of freedom relative to the target part, it must be swept recursively, starting with the axis most distal from the target part along the kinematic chain. The process is similar to the computation of the work envelope of a robot <ref> [13, 14] </ref>. An example is shown in figure 5. At (a) the target part, a clamp, is shown as a set of desired features. It is to have one revolute degree of freedom relative to the base plate, with joint limits at +45 and 30 degrees.
Reference: [14] <author> J.-C. Latombe, </author> <title> Robot Motion Planning. </title> <publisher> Norwell, </publisher> <address> MA: </address> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: If a part has multiple degrees of freedom relative to the target part, it must be swept recursively, starting with the axis most distal from the target part along the kinematic chain. The process is similar to the computation of the work envelope of a robot <ref> [13, 14] </ref>. An example is shown in figure 5. At (a) the target part, a clamp, is shown as a set of desired features. It is to have one revolute degree of freedom relative to the base plate, with joint limits at +45 and 30 degrees. <p> This technique was investigated by Graham and Ulrich [8]. Most techniques account for the size of the robot by transforming the problem to configuration space (cspace) <ref> [20, 14] </ref>. In the case of a circular robot moving through a two-dimensional field of obstacles, cspace is parameterized by the coordinates of the center of the robot. For skeleton synthesis, cspace is parameterized by the coordinates of a point on the skeleton. <p> A connectivity graph is computed without regard for illegal regions, then a path is planned around them for each edge in the graph. This planning is done by computing cspace (illegal regions are grown by half the spar width plus the clearance), and its visibility graph <ref> [14] </ref>. Dijkstra's algorithm [22] is then used to find the shortest path for each connectivity edge.
Reference: [15] <author> Z.-K. Ling and T. R. Chase, </author> <title> "A technique for the design of an interference free complex planar mechanism," </title> <booktitle> in Advances in Design Automation, </booktitle> <pages> pp. 433-441, </pages> <booktitle> American Society of Mechanical Engineers, 1991. Burgett, Bush, Sastry, Sequin 11 University of California, Berkeley To appear in Proceedings, ASME Winter Annual Meeting, </booktitle> <address> San Francisco, CA, </address> <month> November </month> <year> 1995 </year>
Reference-contexts: This guarantees that no software error can ever cause a physical machine crash. We also note that linkages do not represent dependent degrees of freedom between their links, just complex degrees of freedom. Computation of the swept areas of planar links has been studied by Ling and Chase <ref> [15] </ref>. 3.4 Skeleton Synthesis As mentioned earlier, the heart of our system is shape synthesis, which we divide into skeleton synthesis and material synthesis. We represent a skeleton as a graph plus a Euclidean embedding, where the embedding may have non-straight edges.
Reference: [16] <author> F. Hwang and D. Richards, </author> <title> "Steiner tree problems," </title> <journal> Networks, </journal> <volume> vol. 22, </volume> <pages> pp. 55-89, </pages> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: For example, some heuristics for approximating the Steiner minimum spanning tree start this way, then choose sites for additional nodes, and finally drive the graph to a (local) minimum weight by moving these new nodes <ref> [16] </ref>. 3.5 Material Synthesis The material synthesizer has the responsibility of generating the final shape of the part. As it does so, it follows design rules relating to minimum material width, manufacturing methods, assemblability, etc.
Reference: [17] <author> I. Althofer, G. Das, D. Dobkin, D. Joseph, and J. Soares, </author> <title> "On sparse spanners of weighted graphs," </title> <journal> Discrete & Computational Geometry, </journal> <volume> vol. 9, no. 1, </volume> <pages> pp. 81-100, </pages> <year> 1993. </year>
Reference-contexts: We currently support a single application feature (holes) and several skeleton synthesis algorithms (Delaunay Triangulation [19], and t-spanners <ref> [17, 18] </ref>). A connectivity graph is computed without regard for illegal regions, then a path is planned around them for each edge in the graph. This planning is done by computing cspace (illegal regions are grown by half the spar width plus the clearance), and its visibility graph [14].
Reference: [18] <author> J. S. Salowe, </author> <title> "Constructing multidimensional spanner graphs," </title> <journal> International Journal of Computational Geometry & Applications, </journal> <volume> vol. 1, </volume> <pages> pp. 99-107, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: We currently support a single application feature (holes) and several skeleton synthesis algorithms (Delaunay Triangulation [19], and t-spanners <ref> [17, 18] </ref>). A connectivity graph is computed without regard for illegal regions, then a path is planned around them for each edge in the graph. This planning is done by computing cspace (illegal regions are grown by half the spar width plus the clearance), and its visibility graph [14].
Reference: [19] <author> F. Preparata and M. Shamos, </author> <title> Computational Geometry. </title> <publisher> Springer Verlag, </publisher> <editor> second ed., </editor> <year> 1989. </year>
Reference-contexts: Many such graphs are treated in the literature, including the Euclidean minimum spanning tree, Steiner minimum spanning tree,[16] t-spanners,[17, 18] and Delaunay triangulations <ref> [19] </ref>. The differences between these are the nature of the cost function that the graph must satisfy, and whether the algorithm can add nodes. <p> The algorithms are currently fast enough to resynthesize a reasonably complex part several times per second, thus when the user interactively drags a feature or edits an illegal region, the part appears to stretch. We currently support a single application feature (holes) and several skeleton synthesis algorithms (Delaunay Triangulation <ref> [19] </ref>, and t-spanners [17, 18]). A connectivity graph is computed without regard for illegal regions, then a path is planned around them for each edge in the graph.
Reference: [20] <author> T. Lozano-Perez and M. A. Wesley, </author> <title> "An algorithm for planning collision-free paths among polyhedral obstacles," </title> <journal> Communications of the ACM, </journal> <volume> vol. 22, no. 10, </volume> <pages> pp. 560-570, </pages> <year> 1979. </year>
Reference-contexts: This technique was investigated by Graham and Ulrich [8]. Most techniques account for the size of the robot by transforming the problem to configuration space (cspace) <ref> [20, 14] </ref>. In the case of a circular robot moving through a two-dimensional field of obstacles, cspace is parameterized by the coordinates of the center of the robot. For skeleton synthesis, cspace is parameterized by the coordinates of a point on the skeleton.
Reference: [21] <institution> Parametric Technology Corporation, 128 Technology Drive, </institution> <address> Waltham, MA 02154, </address> <note> Pro/ENGINEER Modeling User's Guide, </note> <year> 1993. </year>
Reference-contexts: More sophisticated material synthesis will add more knowledge about the selected manufacturing process. We 1 It is worth noting that the parts illustrated in fig 6 took over 30 hours to model interactively in Pro/ENGINEER <ref> [21] </ref>. This highlights the difficulty of using solid modellers to explore design space.
Reference: [22] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest, </author> <title> Introduction to Algorithms. </title> <address> Cambridge, Mass.: </address> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: A connectivity graph is computed without regard for illegal regions, then a path is planned around them for each edge in the graph. This planning is done by computing cspace (illegal regions are grown by half the spar width plus the clearance), and its visibility graph [14]. Dijkstra's algorithm <ref> [22] </ref> is then used to find the shortest path for each connectivity edge. The software is implemented entirely in C++, with the exception of the Forms [23] and Numerical Recipes [24] C source code libraries. 5 RESEARCH ISSUES Numerous research topics have been discussed in the preceding text.
Reference: [23] <author> M. Overmars, </author> <title> "The forms library: a package for building graphical interfaces on silicon graphics computers." Public Domain Software Library, </title> <address> ftp://sol.cs.ruu.nl/pub/SGI/FORMS/forms2.3.tar.Z, </address> <year> 1995. </year>
Reference-contexts: Dijkstra's algorithm [22] is then used to find the shortest path for each connectivity edge. The software is implemented entirely in C++, with the exception of the Forms <ref> [23] </ref> and Numerical Recipes [24] C source code libraries. 5 RESEARCH ISSUES Numerous research topics have been discussed in the preceding text. We summarize them here, along with a few not previously mentioned.
Reference: [24] <author> W. H. Press, B. P. Flannery, S. A. Teukolsky, and W. T. Vetterling, </author> <title> Numerical Recipes in C: </title> <booktitle> The Art of Scientific Computing. </booktitle> <address> New York, NY: </address> <publisher> Cambridge University Press, </publisher> <address> 1 st ed., </address> <year> 1988. </year> <title> Burgett, </title> <type> Bush, Sastry, </type> <institution> Sequin 12 University of California, Berkeley </institution>
Reference-contexts: Dijkstra's algorithm [22] is then used to find the shortest path for each connectivity edge. The software is implemented entirely in C++, with the exception of the Forms [23] and Numerical Recipes <ref> [24] </ref> C source code libraries. 5 RESEARCH ISSUES Numerous research topics have been discussed in the preceding text. We summarize them here, along with a few not previously mentioned. First, there are a number of data structures, algorithms and heuristics from computational geometry that will be important for skeleton synthesis.
References-found: 24

