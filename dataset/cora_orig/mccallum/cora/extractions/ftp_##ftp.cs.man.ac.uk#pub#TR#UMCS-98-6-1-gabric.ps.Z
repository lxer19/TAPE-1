URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-98-6-1-gabric.ps.Z
Refering-URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-98-6-1.html
Root-URL: http://www.cs.man.ac.uk
Email: gabric@cs.mu.oz.au, harald@cs.mu.oz.au  
Title: Strictness Analysis as Finite-Domain Constraint Solving  
Author: Tihomir Gabric and Harald Sondergaard 
Address: Parkville Vic. 3052, Australia  
Affiliation: Dept. of Computer Science The University of Melbourne  
Abstract: It has become popular to express dataflow analyses in "logical form". We are interested in the possibility of a uniform approach based on either inference of constrained types or on synthesis of constraint logic programs. In this paper we sketch how the language Toupie, originally designed with logic program analysis as one objective, lends itself also to sophisticated strictness analysis. Strictness analysis is straightforward in the simplest case, that of analysing a first-order functional language using just two strictness values, divergence and "don't know". Mycroft's classical translation immediately yields perfectly valid Boolean constraint logic programs, which, when run, provide the desired strictness information. However, more sophisticated analysis requires more complex domains of strictness values. We recast Wadler's classical analysis over a 2n-point domain as finite-domain constraint solving. This allows us to leverage from established constraint-solving technology. Moreover, unlike Wadler's method, it allows us to translate a recursive function definition into a single constraint program clause, in a manner which extends Mycroft's translation for the 2-point case, while maintaining the precision of Wadler's method. In fact, a higher precision is gained, since a constraint logic programming approach naturally leads to disjunctive analysis. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.-M. Corsini, K. Musumbu, A. Rauzy, and B. Le Charlier. </author> <title> Efficient bottom-up abstract interpretation of Prolog by means of constraint solving over symbolic finite domains. </title> <editor> In M. Bruynooghe and J. Penjam, editors, </editor> <booktitle> Programming Language Implementation and Logic Programming, </booktitle> <volume> LNCS 714, </volume> <pages> pages 75-91. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [2] <author> P. Cousot and R. Cousot. </author> <title> Higher-order abstract interpretation (and application to comportment analysis generalizing strictness, termination, projection and PER analysis of functional languages. </title> <booktitle> In Proc. 1994 Int. Conf. Computer Languages, </booktitle> <pages> pages 95-112. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1994. </year>
Reference: [3] <author> F. Henglein. </author> <title> Efficient type inference for higher-order binding-time analysis. </title> <editor> In J. Hughes, editor, </editor> <booktitle> Functional Programming Languages and Computer Architecture, </booktitle> <volume> LNCS 523, </volume> <pages> pages 448-472. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [4] <author> T. P. Jensen. </author> <title> Disjunctive strictness analysis. </title> <booktitle> In Proc. Seventh Ann. IEEE Symp. Logic in Computer Science, </booktitle> <pages> pages 174-185, </pages> <year> 1992. </year>
Reference: [5] <author> A. Mycroft. </author> <title> Abstract Interpretation and Optimising Transformations for Applicative Programs. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <address> Scotland, </address> <year> 1981. </year>
Reference: [6] <author> R. Sekar and I. V. Ramakrishnan. </author> <title> Fast strictness analysis based on demand propagation. </title> <journal> ACM Trans. Programming Languages and Systems, </journal> <volume> 17(6) </volume> <pages> 896-937, </pages> <year> 1995. </year>
Reference: [7] <author> Martin Sulzmann, Martin Odersky, and Martin Wehr. </author> <title> Type inference with constrained types (extended abstract). </title> <editor> In B. Pierce, editor, </editor> <booktitle> Proc. Fourth Int. Workshop Foundations of Object-Oriented Languages, </booktitle> <year> 1997. </year> <note> http://www.cs.indiana.edu/hyplan/pierce/fool. </note>
Reference: [8] <author> P. Wadler. </author> <title> Strictness analysis on non-flat domains (by abstract interpretation over finite domains). </title> <editor> In S. Abramsky and C. Hankin, editors, </editor> <booktitle> Abstract Interpretation of Declarative Languages, </booktitle> <pages> pages 266-275. </pages> <publisher> Ellis Horwood, </publisher> <year> 1987. </year>
Reference: [9] <author> D. A. Wright. </author> <title> Linear, strictness and usage logics. </title> <editor> In M. Houle and P. Eades, editors, </editor> <booktitle> Proc. CATS'96, Australian Computer Science Communications 18 (3), </booktitle> <pages> pages 73-80, </pages> <year> 1996. </year> <month> 10 </month>
References-found: 9

