URL: http://www.cs.wustl.edu/~schmidt/HPDC-92.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/resume.html
Root-URL: 
Title: ADAPTIVE A Flexible and Adaptive Transport System Architecture to Support Lightweight Protocols for Multimedia Applications
Author: Douglas C. Schmidt, Donald F. Box, and Tatsuya Suda 
Address: Irvine, California 92717 1  
Affiliation: Department of Information and Computer Science University of California,  
Abstract: Transport systems integrate operating system services such as memory and process management together with communication protocols that utilize these OS services to support distributed applications running on local and wide area networks. Existing transport systems do not customize their services to meet the quality-of-service requirements of distributed applications. This often forces developers into the procrustean framework offered by transport systems and protocols that were designed before the advent of multimedia applications and high-performance networks. Flexible and adaptive transport systems, on the other hand, dynamically configure lightweight protocols that meet application requirements more precisely. This paper describes a high-performance transport system architecture called ADAPTIVE, A Dynamically Assembled Protocol Transformation, Integration, and Validation Environment. We are developing ADAPTIVE to support multimedia applications running on high-performance networks. ADAPTIVE is a transformational system that provides policies and mechanisms to automatically specify and synthesize a flexible, lightweight, and adaptive transport system configuration. In addition, it provides a controlled prototyping environment for monitoring, analyzing, and experimenting with the performance effects of alternative transport system designs and implementations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. F. L. Porta and M. Schwartz, </author> <title> Architectures, Features, and Implementation of High-Speed Transport Protocols, </title> <journal> IEEE Network Magazine, </journal> <pages> pp. 1422, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: To handle these changes, transport systems must become more flexible, lightweight, and adaptive <ref> [1] </ref>. However, existing transport systems typically offer only a small number of monolithic protocols. Moreover, these protocols do not adequately meet the communication requirements of next-generation distributed applications [2]. <p> Moreover, many fields in the TCP header are not word-aligned multicast support, (4) security, (5) synchronized multimedia streams or (6) quality-of-service parameters such as prioritized real-time guarantees involving bounded delay/jitter and application-selectable levels of loss-tolerance <ref> [1, 21] </ref>. Moreover, most existing transport systems do not export multimedia services like isochronous and synchronous delivery guarantees from the underlying network to the application. In addition, standard protocol suites were designed for low-speed, unreliable, congestion-prone datagram networks, rather than high-speed, congestion-controlled virtual-circuit networks such as ATM [22]. <p> policies may switch a session's retransmission mechanism from go-back-n to selective repeat in the event that (1) the application's requirements change from multicast to unicast or (2) the congestion in the network increases beyond a specified threshold (resulting in greater packet loss due to queue overflows at intermediate switching nodes) <ref> [1, 3] </ref>. <p> To support implicit negotiation, remote MANTTS entities must supply reasonable values for default configurations. Longer-duration applications may also choose implicit negotiation, since eliminating the multiple round-trip handshake overhead is beneficial for sessions running over long-delay links <ref> [1] </ref>. If necessary, it is possible to reconfigure an active session dynamically at a later point, using the renegotiation mechanisms described in Section 4.1.2 below. 2.
Reference: [2] <author> S. W. O'Malley and L. L. Peterson, </author> <title> A Dynamic Network Architecture, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 10, </volume> <pages> pp. 110143, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: To handle these changes, transport systems must become more flexible, lightweight, and adaptive [1]. However, existing transport systems typically offer only a small number of monolithic protocols. Moreover, these protocols do not adequately meet the communication requirements of next-generation distributed applications <ref> [2] </ref>. We are developing the ADAPTIVE system to provide a flexible architecture for developing and experimenting with lightweight and adaptive transport system protocols. <p> These environments include (1) low-utilization, low-latency LANs (e.g., Ethernet), (2) congestion-prone, high latency WANs (e.g., the current Internet), and (3) high-bandwidth, high latency WANs (e.g., ATM-based B-ISDN public access networks) <ref> [2] </ref>. Handling this diversity and dynamism requires determining appropriate end-to-end congestion and error protection schemes. <p> as well as from storing and retrieving register windows and invalidating translation-lookaside buffers. (B) Inflexible and Non-Adaptive Transport System Architectures: Existing transport systems are also unable to meet the diverse and dynamic demands of applications and networks since they typically provide only a fixed, statically configured suite of protocol services <ref> [2] </ref>. For instance, most general-purpose protocols are not capable of dynamically tailoring their services to take advantage of specific application requirements or network characteristics [10]. Moreover, communication software tends to be inflexible and difficult to modify [2], and is often tightly coupled to a particular transport system environment such as TCP/IP <p> networks since they typically provide only a fixed, statically configured suite of protocol services <ref> [2] </ref>. For instance, most general-purpose protocols are not capable of dynamically tailoring their services to take advantage of specific application requirements or network characteristics [10]. Moreover, communication software tends to be inflexible and difficult to modify [2], and is often tightly coupled to a particular transport system environment such as TCP/IP on BSD UNIX [7, 11]. All these factors increase the difficulty of maintaining, extending, and adapting the software to support the increased diversity in networks and applications. <p> These resources include available buffer space, CPU load, available communication ports and virtual circuits, and network congestion level. Only a handful of transport systems provide any support for configuration of their protocol suites at connection establishment time <ref> [2, 17, 18] </ref>. Furthermore, this support typically involves activities on only the local hosts, i.e., network and remote host characteristics and conditions are typically not considered during the configuration process. <p> In addition to the research described in this section, other projects focusing on various aspects of flexible, lightweight, and adaptive transport systems and protocols include [3, 18, 20, 21, 24, 25, 26, 27]. The ADAPTIVE system is influenced by the Programmable Network Prototyping System (PNPS) [28], the x-kernel/Avoca projects <ref> [2, 7] </ref>, the Function-based Communication SubSystem (F-CSS) [6], and the Multi-Stream Protocol (MSP) [19]. PNPS is an environment for prototyping and experimenting with hardware implementations of MAC-layer protocols. ADAPTIVE, on the other hand, focuses on prototyping and experimenting with software architectures for middle- and higher-layer protocols. <p> Experience indicates that it is very difficult to specify one protocol that is optimal for all application/transport system/network combinations [29]. Therefore, instead of developing a single highly-complex, all-encompassing protocol, ADAPTIVE provides a transport system architecture that permits fine-grain selection and configuration of precisely specified protocol mechanisms <ref> [2] </ref>. ADAPTIVE also supports run-time adaptive reconfiguration that adapts to feedback from changes in applications requirements, transport system resources, and network characteristics. Adaptivity is important since applications and networks are dynamically changing entities, which are not necessarily served most effectively by static solutions. <p> system architectures based on (a) vertical process architectures [7, 37], (b) parallel processing of protocol functions [3, 4, 19], (c) flexible protocol stacks that require fewer layers and/or are dynamically assembled [6, 25, 26, 30], and (d) modular and extensible transport system software that sup ports these flexible protocol stacks <ref> [2, 18, 38] </ref>. The ADAPTIVE architecture we are developing extends prior research on flexible transport system architectures.
Reference: [3] <author> Z. Haas, </author> <title> A Protocol Structure for High-Speed Communication Over Broadband ISDN, </title> <journal> IEEE Network Magazine, </journal> <pages> pp. 6470, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: section defines three important research problems involving transport systems, describes how existing systems do not adequately solve these problems, and compares ADAPTIVE with other related work. 2.1 Research Problems Our research is investigating solutions to the following three problems involving transport systems: (A) The Throughput Preservation Problem: As noted by <ref> [3, 4] </ref>, only a limited amount of the available bandwidth in high-performance networks is being delivered to applications. This situation results both from poorly layered architectures [5] and from transport system overhead such as memory-to-memory copying and process management operations like process/context switching and scheduling. <p> There are several explanations for this behavior: (1) networks have increased by 5 or 6 orders of magnitude (from kbps to Gbps), whereas CPU speeds have only increased by 2 or 3 orders of magnitude (from 1 MIP up to 100 MIPS) <ref> [3] </ref>, (2) existing transport systems are written largely in software, (3) network host interfaces typically generate interrupts for every transmitted and received packet, leading to increased CPU context/process switching overhead [3, 9], and (4) despite increasing total MIPS, RISC architectures often penalize interrupt-driven network communication by exhibiting high context/process switching overhead. <p> whereas CPU speeds have only increased by 2 or 3 orders of magnitude (from 1 MIP up to 100 MIPS) [3], (2) existing transport systems are written largely in software, (3) network host interfaces typically generate interrupts for every transmitted and received packet, leading to increased CPU context/process switching overhead <ref> [3, 9] </ref>, and (4) despite increasing total MIPS, RISC architectures often penalize interrupt-driven network communication by exhibiting high context/process switching overhead. <p> In addition to the research described in this section, other projects focusing on various aspects of flexible, lightweight, and adaptive transport systems and protocols include <ref> [3, 18, 20, 21, 24, 25, 26, 27] </ref>. The ADAPTIVE system is influenced by the Programmable Network Prototyping System (PNPS) [28], the x-kernel/Avoca projects [2, 7], the Function-based Communication SubSystem (F-CSS) [6], and the Multi-Stream Protocol (MSP) [19]. <p> Other related work on transport systems typically emphasizes either diverse application requirements [6, 25, 30] or network characteristics <ref> [3, 19] </ref>. <p> Design new lightweight and adaptive protocols that are tailored for high-speed, low error, and low delay net work environments [19, 20, 34, 35, 36]. 6. Develop alternative transport system architectures based on (a) vertical process architectures [7, 37], (b) parallel processing of protocol functions <ref> [3, 4, 19] </ref>, (c) flexible protocol stacks that require fewer layers and/or are dynamically assembled [6, 25, 26, 30], and (d) modular and extensible transport system software that sup ports these flexible protocol stacks [2, 18, 38]. <p> policies may switch a session's retransmission mechanism from go-back-n to selective repeat in the event that (1) the application's requirements change from multicast to unicast or (2) the congestion in the network increases beyond a specified threshold (resulting in greater packet loss due to queue overflows at intermediate switching nodes) <ref> [1, 3] </ref>.
Reference: [4] <author> M. Zitterbart, </author> <title> High-Speed Protocol Implementations Based on a Multiprocessor-Architecture, </title> <booktitle> in Proceedings of the 1st International Workshop on High-Speed Networks, </booktitle> <pages> pp. 151 163, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: section defines three important research problems involving transport systems, describes how existing systems do not adequately solve these problems, and compares ADAPTIVE with other related work. 2.1 Research Problems Our research is investigating solutions to the following three problems involving transport systems: (A) The Throughput Preservation Problem: As noted by <ref> [3, 4] </ref>, only a limited amount of the available bandwidth in high-performance networks is being delivered to applications. This situation results both from poorly layered architectures [5] and from transport system overhead such as memory-to-memory copying and process management operations like process/context switching and scheduling. <p> Moreover, many protocol suites are implemented with improperly layered process architectures that increase protocol processing overhead [8]. Due to this overhead, the bandwidth available in a high-performance network is reduced by 1 to 2 orders of magnitude by the time it is actually delivered to applications <ref> [4] </ref>. Moreover, this throughput preservation problem persists despite an increase in CPU speeds. <p> Design new lightweight and adaptive protocols that are tailored for high-speed, low error, and low delay net work environments [19, 20, 34, 35, 36]. 6. Develop alternative transport system architectures based on (a) vertical process architectures [7, 37], (b) parallel processing of protocol functions <ref> [3, 4, 19] </ref>, (c) flexible protocol stacks that require fewer layers and/or are dynamically assembled [6, 25, 26, 30], and (d) modular and extensible transport system software that sup ports these flexible protocol stacks [2, 18, 38].
Reference: [5] <author> J. Crowcroft, I. Wakeman, Z. Wang, and D. Sirovica, </author> <title> Is Layering Harmful?, </title> <journal> IEEE Network Magazine, </journal> <month> January </month> <year> 1992. </year>
Reference-contexts: This situation results both from poorly layered architectures <ref> [5] </ref> and from transport system overhead such as memory-to-memory copying and process management operations like process/context switching and scheduling.
Reference: [6] <author> M. Zitterbart, B. Stiller, and A. Tantawy, </author> <title> A Model for Flexible High-Performance Communication Subsystems, </title> <type> Tech. Rep. TC 17801 (78023), </type> <institution> IBM Research Division, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: In addition, application requirements may change dynamically during a session (e.g., a tele-conferencing application may switch between unicast and multicast as participants join and leave the conversation). Table 1 illustrates the diversity of transport requirements for several representative classes of distributed applications <ref> [6] </ref>. High-Performance Networks: Network diversity involves both the static architecture and dynamic state of the underlying network. <p> An even more dynamic approach permits reconfiguration during the data-transfer phase, thereby accommodating dynamic changes in application requirements, transport system resources, and network characteristics. Very few transport systems provide support for adaptive reconfiguration, and those that do are experimental research projects <ref> [6, 19] </ref>. Given the increasing diversity of application requirements and network characteristics (combined with the fact that both may change dynamically), it appears that dynamically configured transport systems may support a wider range of application/network pairings more effectively than statically configured systems. <p> The ADAPTIVE system is influenced by the Programmable Network Prototyping System (PNPS) [28], the x-kernel/Avoca projects [2, 7], the Function-based Communication SubSystem (F-CSS) <ref> [6] </ref>, and the Multi-Stream Protocol (MSP) [19]. PNPS is an environment for prototyping and experimenting with hardware implementations of MAC-layer protocols. ADAPTIVE, on the other hand, focuses on prototyping and experimenting with software architectures for middle- and higher-layer protocols. <p> The following paragraphs discuss these points in detail: (A) Support for Both Multimedia Application Requirements and Network Characteristics: ADAPTIVE configures transport system sessions based upon the network characteristics and the QoS requirements of applications. Other related work on transport systems typically emphasizes either diverse application requirements <ref> [6, 25, 30] </ref> or network characteristics [3, 19]. <p> Develop alternative transport system architectures based on (a) vertical process architectures [7, 37], (b) parallel processing of protocol functions [3, 4, 19], (c) flexible protocol stacks that require fewer layers and/or are dynamically assembled <ref> [6, 25, 26, 30] </ref>, and (d) modular and extensible transport system software that sup ports these flexible protocol stacks [2, 18, 38]. The ADAPTIVE architecture we are developing extends prior research on flexible transport system architectures. <p> For example, [19] describes several adaptive mechanisms that support on-the-fly protocol reconfigurations. However, most existing research places less emphasis on the policies that determine when to adaptively reconfigure transport system mechanisms and what mechanisms the subsequent reconfigura-tions should contain. Conversely, related work that does address policies <ref> [6, 25, 30] </ref> is less specific with respect to the mechanisms that actually enforce these policies. For example, adequately supporting QoS requirements such as bounded delay and jitter involves complicated interactions between the network and the transport systems on both local and remote hosts. <p> As shown in Table 1, TSCs represent general classes of application requirements such as interactive isochronous traffic (e.g., voice conversation), distributional isochronous traffic (e.g., full-motion HDTV), non-isochronous real-time traffic (e.g., robotics and manufacturing control), and non-isochronous, non-real-time traffic (e.g., file transfer, remote login, and RPC) <ref> [6] </ref>. Each TSC embodies a set of related policy decisions that satisfy the application's QoS requests. Applications may explicitly select a TSC to help simplify the subsequent transport system session configuration process.
Reference: [7] <author> N. C. Hutchinson and L. L. Peterson, </author> <title> The x-kernel: An Architecture for Implementing Network Protocols, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 17, </volume> <pages> pp. 6476, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: However, most general-purpose operating systems do not provide adequate support for transport system activities such as real-time process scheduling, interrupt handling and context switching, message buffer management, layer-to-layer flow control, and multiplexing and demultiplexing <ref> [7] </ref>. Moreover, many protocol suites are implemented with improperly layered process architectures that increase protocol processing overhead [8]. Due to this overhead, the bandwidth available in a high-performance network is reduced by 1 to 2 orders of magnitude by the time it is actually delivered to applications [4]. <p> Moreover, communication software tends to be inflexible and difficult to modify [2], and is often tightly coupled to a particular transport system environment such as TCP/IP on BSD UNIX <ref> [7, 11] </ref>. All these factors increase the difficulty of maintaining, extending, and adapting the software to support the increased diversity in networks and applications. For example, it is difficult to select an existing transport system configuration that is neither too overweight nor too underweight to satisfy the QoS requirements. <p> In addition to the research described in this section, other projects focusing on various aspects of flexible, lightweight, and adaptive transport systems and protocols include [3, 18, 20, 21, 24, 25, 26, 27]. The ADAPTIVE system is influenced by the Programmable Network Prototyping System (PNPS) [28], the x-kernel/Avoca projects <ref> [2, 7] </ref>, the Function-based Communication SubSystem (F-CSS) [6], and the Multi-Stream Protocol (MSP) [19]. PNPS is an environment for prototyping and experimenting with hardware implementations of MAC-layer protocols. ADAPTIVE, on the other hand, focuses on prototyping and experimenting with software architectures for middle- and higher-layer protocols. <p> Design new lightweight and adaptive protocols that are tailored for high-speed, low error, and low delay net work environments [19, 20, 34, 35, 36]. 6. Develop alternative transport system architectures based on (a) vertical process architectures <ref> [7, 37] </ref>, (b) parallel processing of protocol functions [3, 4, 19], (c) flexible protocol stacks that require fewer layers and/or are dynamically assembled [6, 25, 26, 30], and (d) modular and extensible transport system software that sup ports these flexible protocol stacks [2, 18, 38]. <p> The ADAPTIVE TKO protocol architecture design is influenced by the x-kernel <ref> [7] </ref> and Conduit [18] communication systems. The TKO protocol architecture classes provide uniform interfaces for accessing protocol support services such as timers, message buffering, and protocol graph operations that insert, delete, and/or alter protocol objects.
Reference: [8] <author> D. C. Schmidt and T. Suda, </author> <title> Transport System Architecture Services for High-Performance Communications Systems, </title> <journal> IEEE Journal on Selected Areas in Communication, </journal> <volume> vol. 11, </volume> <pages> pp. 489506, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Moreover, many protocol suites are implemented with improperly layered process architectures that increase protocol processing overhead <ref> [8] </ref>. Due to this overhead, the bandwidth available in a high-performance network is reduced by 1 to 2 orders of magnitude by the time it is actually delivered to applications [4]. Moreover, this throughput preservation problem persists despite an increase in CPU speeds. <p> data applications such as bulk text file transfer and/or (2) traditional local area network environments such as Ethernet or Token Ring. (B) Reduction in Transport System Overhead: A large body of research exists on both network protocols (see [31] for a survey) and the transport systems that support them (see <ref> [8] </ref> for our survey). Techniques for reducing transport system overhead involve various combinations of the following: 1. Utilize faster hardware for CPUs, busses, network con trollers, and memory hierarchies. 2. Implement selected functions (e.g., checksum calculations, message buffering, and demultiplexing) in special-purpose hardware. 3.
Reference: [9] <author> H. Kanakia and D. R. Cheriton, </author> <title> The VMP Network Adapter Board (NAB): High-Performance Network Communication for Multiprocessors, </title> <booktitle> in Proceedings of the Symposium on Communications Architectures and Protocols (SIGCOMM), </booktitle> <address> (Stanford, CA), </address> <pages> pp. 175187, </pages> <publisher> ACM, </publisher> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: whereas CPU speeds have only increased by 2 or 3 orders of magnitude (from 1 MIP up to 100 MIPS) [3], (2) existing transport systems are written largely in software, (3) network host interfaces typically generate interrupts for every transmitted and received packet, leading to increased CPU context/process switching overhead <ref> [3, 9] </ref>, and (4) despite increasing total MIPS, RISC architectures often penalize interrupt-driven network communication by exhibiting high context/process switching overhead. <p> Utilize faster hardware for CPUs, busses, network con trollers, and memory hierarchies. 2. Implement selected functions (e.g., checksum calculations, message buffering, and demultiplexing) in special-purpose hardware. 3. Migrate some or all of the protocol processing activities to off-board processors <ref> [9, 20, 32] </ref> to reduce CPU interrupts and operating system context/process switch ing on the host computer. 4.
Reference: [10] <author> R. W. Watson and S. A. Mamrak, </author> <title> Gaining Efficiency in Transport Services by Appropriate Design and Implementation Choices, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 5, </volume> <pages> pp. 97120, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: For instance, most general-purpose protocols are not capable of dynamically tailoring their services to take advantage of specific application requirements or network characteristics <ref> [10] </ref>. Moreover, communication software tends to be inflexible and difficult to modify [2], and is often tightly coupled to a particular transport system environment such as TCP/IP on BSD UNIX [7, 11]. <p> Implement existing protocols more efficiently by (1) shortening the instruction paths executed for each packet and (2) improving the implementation of standard transport system support services such as message management and demultiplexing <ref> [10, 11, 33] </ref>. 5. Design new lightweight and adaptive protocols that are tailored for high-speed, low error, and low delay net work environments [19, 20, 34, 35, 36]. 6. <p> know how to implement the mechanisms efficiently. (D) Support for Controlled, Empirical Experimentation via Performance Monitoring and Measurement: It is difficult to empirically evaluate the advantages and disadvantages of different transport system designs without (1) a controlled implementation environment and (2) systematic methods for monitoring and measuring distributed application performance <ref> [10] </ref>. However, most transport systems are designed for performance rather than for experimentation. This makes it difficult to replace selected mechanisms (e.g., acknowledgment or retransmission schemes) and measure the performance impact precisely.
Reference: [11] <author> D. D. Clark, </author> <title> Modularity and Efficiency in Protocol Implementation, Network Information Center RFC 817, </title> <journal> pp. </journal> <volume> 126, </volume> <month> July </month> <year> 1982. </year>
Reference-contexts: Moreover, communication software tends to be inflexible and difficult to modify [2], and is often tightly coupled to a particular transport system environment such as TCP/IP on BSD UNIX <ref> [7, 11] </ref>. All these factors increase the difficulty of maintaining, extending, and adapting the software to support the increased diversity in networks and applications. For example, it is difficult to select an existing transport system configuration that is neither too overweight nor too underweight to satisfy the QoS requirements. <p> Implement existing protocols more efficiently by (1) shortening the instruction paths executed for each packet and (2) improving the implementation of standard transport system support services such as message management and demultiplexing <ref> [10, 11, 33] </ref>. 5. Design new lightweight and adaptive protocols that are tailored for high-speed, low error, and low delay net work environments [19, 20, 34, 35, 36]. 6.
Reference: [12] <author> S. J. Leffler, M. McKusick, M. Karels, and J. Quarterman, </author> <title> The Design and Implementation of the 4.3BSD UNIX Operating System. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: In this case, the transport system often provides protocol support based only upon general usage assumptions such as unreliable datagram service (e.g., UDP) versus reliable byte stream service (e.g., TCP). Many well-known transport systems belong to this category <ref> [12, 13, 14, 15, 16] </ref>. * Dynamic Transport Systems: postpone complete configuration until either connection establishment time or during data transfer. In both cases, these transport systems may be configured by negotiating with (1) local and remote hosts and (2) intermediate switching nodes in the network.
Reference: [13] <author> D. R. Cheriton, </author> <title> The V Distributed System, </title> <journal> Communications of the ACM, </journal> <volume> vol. 31, </volume> <month> March </month> <year> 1988. </year>
Reference-contexts: In this case, the transport system often provides protocol support based only upon general usage assumptions such as unreliable datagram service (e.g., UDP) versus reliable byte stream service (e.g., TCP). Many well-known transport systems belong to this category <ref> [12, 13, 14, 15, 16] </ref>. * Dynamic Transport Systems: postpone complete configuration until either connection establishment time or during data transfer. In both cases, these transport systems may be configured by negotiating with (1) local and remote hosts and (2) intermediate switching nodes in the network.
Reference: [14] <author> R. V. Renesse, H. V. Staveren, and A. S. Tanenbaum, </author> <title> Performance of the Amoeba Distributed Operating System, </title> <journal> Software Practice and Experience, </journal> <volume> vol. 19, </volume> <pages> pp. 223234, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: In this case, the transport system often provides protocol support based only upon general usage assumptions such as unreliable datagram service (e.g., UDP) versus reliable byte stream service (e.g., TCP). Many well-known transport systems belong to this category <ref> [12, 13, 14, 15, 16] </ref>. * Dynamic Transport Systems: postpone complete configuration until either connection establishment time or during data transfer. In both cases, these transport systems may be configured by negotiating with (1) local and remote hosts and (2) intermediate switching nodes in the network.
Reference: [15] <author> M. N. </author> <title> Group, Network Server Design, </title> <type> Tech. Rep. </type> <institution> CMS-CS-89-31, Carnegie Mellon University, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: In this case, the transport system often provides protocol support based only upon general usage assumptions such as unreliable datagram service (e.g., UDP) versus reliable byte stream service (e.g., TCP). Many well-known transport systems belong to this category <ref> [12, 13, 14, 15, 16] </ref>. * Dynamic Transport Systems: postpone complete configuration until either connection establishment time or during data transfer. In both cases, these transport systems may be configured by negotiating with (1) local and remote hosts and (2) intermediate switching nodes in the network.
Reference: [16] <author> B. B. Welch, </author> <title> The Sprite Remote Procedure Call System, </title> <type> Tech. Rep. </type> <institution> UCB/CSD 86/302, Computer Science Division (EECS), University of California, Berkeley, </institution> <address> CA 94720, </address> <month> June </month> <year> 1986. </year>
Reference-contexts: In this case, the transport system often provides protocol support based only upon general usage assumptions such as unreliable datagram service (e.g., UDP) versus reliable byte stream service (e.g., TCP). Many well-known transport systems belong to this category <ref> [12, 13, 14, 15, 16] </ref>. * Dynamic Transport Systems: postpone complete configuration until either connection establishment time or during data transfer. In both cases, these transport systems may be configured by negotiating with (1) local and remote hosts and (2) intermediate switching nodes in the network.
Reference: [17] <author> UNIX Software Operations, </author> <title> UNIX System V Release 4 Programmer's Guide: STREAMS. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: These resources include available buffer space, CPU load, available communication ports and virtual circuits, and network congestion level. Only a handful of transport systems provide any support for configuration of their protocol suites at connection establishment time <ref> [2, 17, 18] </ref>. Furthermore, this support typically involves activities on only the local hosts, i.e., network and remote host characteristics and conditions are typically not considered during the configuration process.
Reference: [18] <author> J. M. Zweig, </author> <title> The Conduit: a Communication Abstraction in C++, </title> <booktitle> in Proceedings of the 2 nd USENIX C++ Conference, </booktitle> <pages> pp. </pages> <address> 191203, </address> <publisher> USENIX Association, </publisher> <month> April </month> <year> 1990. </year>
Reference-contexts: These resources include available buffer space, CPU load, available communication ports and virtual circuits, and network congestion level. Only a handful of transport systems provide any support for configuration of their protocol suites at connection establishment time <ref> [2, 17, 18] </ref>. Furthermore, this support typically involves activities on only the local hosts, i.e., network and remote host characteristics and conditions are typically not considered during the configuration process. <p> In addition to the research described in this section, other projects focusing on various aspects of flexible, lightweight, and adaptive transport systems and protocols include <ref> [3, 18, 20, 21, 24, 25, 26, 27] </ref>. The ADAPTIVE system is influenced by the Programmable Network Prototyping System (PNPS) [28], the x-kernel/Avoca projects [2, 7], the Function-based Communication SubSystem (F-CSS) [6], and the Multi-Stream Protocol (MSP) [19]. <p> system architectures based on (a) vertical process architectures [7, 37], (b) parallel processing of protocol functions [3, 4, 19], (c) flexible protocol stacks that require fewer layers and/or are dynamically assembled [6, 25, 26, 30], and (d) modular and extensible transport system software that sup ports these flexible protocol stacks <ref> [2, 18, 38] </ref>. The ADAPTIVE architecture we are developing extends prior research on flexible transport system architectures. <p> The ADAPTIVE TKO protocol architecture design is influenced by the x-kernel [7] and Conduit <ref> [18] </ref> communication systems. The TKO protocol architecture classes provide uniform interfaces for accessing protocol support services such as timers, message buffering, and protocol graph operations that insert, delete, and/or alter protocol objects.
Reference: [19] <author> T. F. L. Porta and M. Schwartz, </author> <title> Design, Verification, and Analysis of a High Speed Protocol Parallel Implementation Architecture, </title> <booktitle> in Proceedings of the First IEEE Workshop on the Architecture and Implementation of High Performance Communication Subsystems, </booktitle> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: An even more dynamic approach permits reconfiguration during the data-transfer phase, thereby accommodating dynamic changes in application requirements, transport system resources, and network characteristics. Very few transport systems provide support for adaptive reconfiguration, and those that do are experimental research projects <ref> [6, 19] </ref>. Given the increasing diversity of application requirements and network characteristics (combined with the fact that both may change dynamically), it appears that dynamically configured transport systems may support a wider range of application/network pairings more effectively than statically configured systems. <p> The ADAPTIVE system is influenced by the Programmable Network Prototyping System (PNPS) [28], the x-kernel/Avoca projects [2, 7], the Function-based Communication SubSystem (F-CSS) [6], and the Multi-Stream Protocol (MSP) <ref> [19] </ref>. PNPS is an environment for prototyping and experimenting with hardware implementations of MAC-layer protocols. ADAPTIVE, on the other hand, focuses on prototyping and experimenting with software architectures for middle- and higher-layer protocols. The x-kernel is a communications-oriented environment that supports protocol development and experimentation. <p> Other related work on transport systems typically emphasizes either diverse application requirements [6, 25, 30] or network characteristics <ref> [3, 19] </ref>. <p> Design new lightweight and adaptive protocols that are tailored for high-speed, low error, and low delay net work environments <ref> [19, 20, 34, 35, 36] </ref>. 6. <p> Design new lightweight and adaptive protocols that are tailored for high-speed, low error, and low delay net work environments [19, 20, 34, 35, 36]. 6. Develop alternative transport system architectures based on (a) vertical process architectures [7, 37], (b) parallel processing of protocol functions <ref> [3, 4, 19] </ref>, (c) flexible protocol stacks that require fewer layers and/or are dynamically assembled [6, 25, 26, 30], and (d) modular and extensible transport system software that sup ports these flexible protocol stacks [2, 18, 38]. <p> For example, <ref> [19] </ref> describes several adaptive mechanisms that support on-the-fly protocol reconfigurations. However, most existing research places less emphasis on the policies that determine when to adaptively reconfigure transport system mechanisms and what mechanisms the subsequent reconfigura-tions should contain.
Reference: [20] <author> G. Chesson, </author> <title> XTP/PE Design Considerations, </title> <booktitle> in Proceedings of the 1st International Workshop on High-Speed Networks, </booktitle> <month> May </month> <year> 1989. </year>
Reference-contexts: cases the ISO TP [0-4] transport protocols) may prove inadequate for modern multimedia applications, since they do not incorporate (1) efficient control formats, 2 (2) fast connection establishment, (3) 2 For example, neither TCP nor TP4 place their checksum in the packet trailer, thereby precluding simultaneous transmission and checksum computation <ref> [20] </ref>. Moreover, many fields in the TCP header are not word-aligned multicast support, (4) security, (5) synchronized multimedia streams or (6) quality-of-service parameters such as prioritized real-time guarantees involving bounded delay/jitter and application-selectable levels of loss-tolerance [1, 21]. <p> In addition to the research described in this section, other projects focusing on various aspects of flexible, lightweight, and adaptive transport systems and protocols include <ref> [3, 18, 20, 21, 24, 25, 26, 27] </ref>. The ADAPTIVE system is influenced by the Programmable Network Prototyping System (PNPS) [28], the x-kernel/Avoca projects [2, 7], the Function-based Communication SubSystem (F-CSS) [6], and the Multi-Stream Protocol (MSP) [19]. <p> Utilize faster hardware for CPUs, busses, network con trollers, and memory hierarchies. 2. Implement selected functions (e.g., checksum calculations, message buffering, and demultiplexing) in special-purpose hardware. 3. Migrate some or all of the protocol processing activities to off-board processors <ref> [9, 20, 32] </ref> to reduce CPU interrupts and operating system context/process switch ing on the host computer. 4. <p> Design new lightweight and adaptive protocols that are tailored for high-speed, low error, and low delay net work environments <ref> [19, 20, 34, 35, 36] </ref>. 6.
Reference: [21] <author> D. R. Cheriton, VMTP: </author> <title> Versatile Message Transaction Protocol Specification, Network Information Center RFC 1045, </title> <journal> pp. </journal> <volume> 1123, </volume> <month> Feb. </month> <year> 1988. </year>
Reference-contexts: Moreover, many fields in the TCP header are not word-aligned multicast support, (4) security, (5) synchronized multimedia streams or (6) quality-of-service parameters such as prioritized real-time guarantees involving bounded delay/jitter and application-selectable levels of loss-tolerance <ref> [1, 21] </ref>. Moreover, most existing transport systems do not export multimedia services like isochronous and synchronous delivery guarantees from the underlying network to the application. In addition, standard protocol suites were designed for low-speed, unreliable, congestion-prone datagram networks, rather than high-speed, congestion-controlled virtual-circuit networks such as ATM [22]. <p> In addition to the research described in this section, other projects focusing on various aspects of flexible, lightweight, and adaptive transport systems and protocols include <ref> [3, 18, 20, 21, 24, 25, 26, 27] </ref>. The ADAPTIVE system is influenced by the Programmable Network Prototyping System (PNPS) [28], the x-kernel/Avoca projects [2, 7], the Function-based Communication SubSystem (F-CSS) [6], and the Multi-Stream Protocol (MSP) [19].
Reference: [22] <author> D. F. Box, D. C. Schmidt, and T. Suda, </author> <title> Alternative Ap--proaches to ATM/Internet Interoperation, </title> <address> (Tucson, Arizona), </address> <pages> pp. 15, </pages> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference-contexts: Moreover, most existing transport systems do not export multimedia services like isochronous and synchronous delivery guarantees from the underlying network to the application. In addition, standard protocol suites were designed for low-speed, unreliable, congestion-prone datagram networks, rather than high-speed, congestion-controlled virtual-circuit networks such as ATM <ref> [22] </ref>.
Reference: [23] <author> V. Jacobson, R. Braden, and L. Zhang, </author> <title> TCP Extensions for High-Speed Paths, Network Information Center RFC 1185, </title> <journal> pp. </journal> <volume> 121, </volume> <month> October </month> <year> 1990. </year>
Reference-contexts: Although extensions to TCP and IP have been proposed that address these limitations <ref> [23] </ref>, these proposals are not yet been integrated into the base standards requirements. 2.3 Related Work A growing number of projects address high-performance transport systems that are constructed out of flexible components that support lightweight and adaptive protocols.
Reference: [24] <author> G. Blair, G. Coulson, F. Garcia, D. Hutchinson, and D. Shepherd, </author> <title> Towards New Transport Services to Support Distributed Multimedia Applications, </title> <booktitle> in 4th IEEE Com-Soc International Workshop on Multimedia Communications, </booktitle> <address> (Monterey, California), </address> <pages> pp. 250259, </pages> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference-contexts: In addition to the research described in this section, other projects focusing on various aspects of flexible, lightweight, and adaptive transport systems and protocols include <ref> [3, 18, 20, 21, 24, 25, 26, 27] </ref>. The ADAPTIVE system is influenced by the Programmable Network Prototyping System (PNPS) [28], the x-kernel/Avoca projects [2, 7], the Function-based Communication SubSystem (F-CSS) [6], and the Multi-Stream Protocol (MSP) [19].
Reference: [25] <author> T. Plagemann, B. Plattner, M. Vogt, and T. Walter, </author> <title> A Model for Dynamic Configuration of Light-Weight Protocols, </title> <booktitle> in IEEE Third Workshop on Future Trends of Distributed Systems, </booktitle> <pages> pp. 19, </pages> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference-contexts: In addition to the research described in this section, other projects focusing on various aspects of flexible, lightweight, and adaptive transport systems and protocols include <ref> [3, 18, 20, 21, 24, 25, 26, 27] </ref>. The ADAPTIVE system is influenced by the Programmable Network Prototyping System (PNPS) [28], the x-kernel/Avoca projects [2, 7], the Function-based Communication SubSystem (F-CSS) [6], and the Multi-Stream Protocol (MSP) [19]. <p> The following paragraphs discuss these points in detail: (A) Support for Both Multimedia Application Requirements and Network Characteristics: ADAPTIVE configures transport system sessions based upon the network characteristics and the QoS requirements of applications. Other related work on transport systems typically emphasizes either diverse application requirements <ref> [6, 25, 30] </ref> or network characteristics [3, 19]. <p> Develop alternative transport system architectures based on (a) vertical process architectures [7, 37], (b) parallel processing of protocol functions [3, 4, 19], (c) flexible protocol stacks that require fewer layers and/or are dynamically assembled <ref> [6, 25, 26, 30] </ref>, and (d) modular and extensible transport system software that sup ports these flexible protocol stacks [2, 18, 38]. The ADAPTIVE architecture we are developing extends prior research on flexible transport system architectures. <p> For example, [19] describes several adaptive mechanisms that support on-the-fly protocol reconfigurations. However, most existing research places less emphasis on the policies that determine when to adaptively reconfigure transport system mechanisms and what mechanisms the subsequent reconfigura-tions should contain. Conversely, related work that does address policies <ref> [6, 25, 30] </ref> is less specific with respect to the mechanisms that actually enforce these policies. For example, adequately supporting QoS requirements such as bounded delay and jitter involves complicated interactions between the network and the transport systems on both local and remote hosts.
Reference: [26] <author> B. Heinrichs, </author> <title> Versatile Protocol Processing for Multimedia Communications, </title> <booktitle> in 4th IEEE ComSoc International Workshop on Multimedia Communications, </booktitle> <address> (Monterey, California), </address> <pages> pp. 160169, </pages> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference-contexts: In addition to the research described in this section, other projects focusing on various aspects of flexible, lightweight, and adaptive transport systems and protocols include <ref> [3, 18, 20, 21, 24, 25, 26, 27] </ref>. The ADAPTIVE system is influenced by the Programmable Network Prototyping System (PNPS) [28], the x-kernel/Avoca projects [2, 7], the Function-based Communication SubSystem (F-CSS) [6], and the Multi-Stream Protocol (MSP) [19]. <p> Develop alternative transport system architectures based on (a) vertical process architectures [7, 37], (b) parallel processing of protocol functions [3, 4, 19], (c) flexible protocol stacks that require fewer layers and/or are dynamically assembled <ref> [6, 25, 26, 30] </ref>, and (d) modular and extensible transport system software that sup ports these flexible protocol stacks [2, 18, 38]. The ADAPTIVE architecture we are developing extends prior research on flexible transport system architectures.
Reference: [27] <author> G. Parulkar and J. Turner, </author> <title> Towards a Framework for High Speed Communication in a Heterogeneous Networking Environment, </title> <journal> IEEE Network, </journal> <month> March </month> <year> 1990. </year>
Reference-contexts: In addition to the research described in this section, other projects focusing on various aspects of flexible, lightweight, and adaptive transport systems and protocols include <ref> [3, 18, 20, 21, 24, 25, 26, 27] </ref>. The ADAPTIVE system is influenced by the Programmable Network Prototyping System (PNPS) [28], the x-kernel/Avoca projects [2, 7], the Function-based Communication SubSystem (F-CSS) [6], and the Multi-Stream Protocol (MSP) [19].
Reference: [28] <author> R. C. Albert Li, A. Fawaz, S. Sachs, P. Varaiya, and J. Wal-rand, </author> <title> The Programmable Network Prototyping System, </title> <journal> IEEE Computer, </journal> <volume> vol. 22, </volume> <pages> pp. 6776, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: In addition to the research described in this section, other projects focusing on various aspects of flexible, lightweight, and adaptive transport systems and protocols include [3, 18, 20, 21, 24, 25, 26, 27]. The ADAPTIVE system is influenced by the Programmable Network Prototyping System (PNPS) <ref> [28] </ref>, the x-kernel/Avoca projects [2, 7], the Function-based Communication SubSystem (F-CSS) [6], and the Multi-Stream Protocol (MSP) [19]. PNPS is an environment for prototyping and experimenting with hardware implementations of MAC-layer protocols. ADAPTIVE, on the other hand, focuses on prototyping and experimenting with software architectures for middle- and higher-layer protocols. <p> Monitoring and measuring the performance of different transport system configurations provides feedback on the consequences of selecting between alternative policies and mechanisms <ref> [28] </ref>. In addition, certain metric information (e.g., packet loss and round-trip delay, CPU load, and memory utilization) may be used at run-time to determine when to reconfigure the transport system mechanisms. <p> As illustrated in Figure 6, the UNITES Metric Repository stores the collected metric information in a database. A repository is necessary when many active connections are instrumented and monitored, since too much data is generated to collect and process in real-time <ref> [28] </ref>. Users can access this information in various ways, including interactive graphic displays or standard network management protocols such as SNMP or CMIP. This metric data is presented in either a systemwide, per-host, or per-connection manner. UNITES monitors transport system sessions in two primary ways: 1.
Reference: [29] <author> L. Peterson and S. O'Malley, </author> <title> TCP Extensions Considered Harmful, Network Information Center RFC 1263, </title> <journal> pp. </journal> <volume> 119, </volume> <year> 1991. </year>
Reference-contexts: These mechanisms include buffer and event managers, connection management, transmission control, and reliability management. A flexible transport system architectural design is essential for supporting prototyping, experimentation, and diversity. Experience indicates that it is very difficult to specify one protocol that is optimal for all application/transport system/network combinations <ref> [29] </ref>. Therefore, instead of developing a single highly-complex, all-encompassing protocol, ADAPTIVE provides a transport system architecture that permits fine-grain selection and configuration of precisely specified protocol mechanisms [2]. ADAPTIVE also supports run-time adaptive reconfiguration that adapts to feedback from changes in applications requirements, transport system resources, and network characteristics.
Reference: [30] <author> C. Tschudin, </author> <title> Flexible Protocol Stacks, </title> <booktitle> in Proceedings of the Symposium on Communications Architectures and Protocols (SIGCOMM), </booktitle> <address> (Zurich Switzerland), </address> <pages> pp. </pages> <address> 197205, </address> <publisher> ACM, </publisher> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: The following paragraphs discuss these points in detail: (A) Support for Both Multimedia Application Requirements and Network Characteristics: ADAPTIVE configures transport system sessions based upon the network characteristics and the QoS requirements of applications. Other related work on transport systems typically emphasizes either diverse application requirements <ref> [6, 25, 30] </ref> or network characteristics [3, 19]. <p> Develop alternative transport system architectures based on (a) vertical process architectures [7, 37], (b) parallel processing of protocol functions [3, 4, 19], (c) flexible protocol stacks that require fewer layers and/or are dynamically assembled <ref> [6, 25, 26, 30] </ref>, and (d) modular and extensible transport system software that sup ports these flexible protocol stacks [2, 18, 38]. The ADAPTIVE architecture we are developing extends prior research on flexible transport system architectures. <p> For example, [19] describes several adaptive mechanisms that support on-the-fly protocol reconfigurations. However, most existing research places less emphasis on the policies that determine when to adaptively reconfigure transport system mechanisms and what mechanisms the subsequent reconfigura-tions should contain. Conversely, related work that does address policies <ref> [6, 25, 30] </ref> is less specific with respect to the mechanisms that actually enforce these policies. For example, adequately supporting QoS requirements such as bounded delay and jitter involves complicated interactions between the network and the transport systems on both local and remote hosts.
Reference: [31] <author> W. Doeringer, D. Dykeman, M. Kaiserswerth, B. Meister, H. Rudin, and R. Williamson, </author> <title> A Survey of Light-Weight Transport Protocols for High-Speed Networks, </title> <journal> IEEE Transactions on Communication, </journal> <volume> vol. 38, </volume> <pages> pp. </pages> <address> 20252039, </address> <month> Novem-ber </month> <year> 1990. </year>
Reference-contexts: existing implementations of transport systems tend to focus more on (1) traditional data applications such as bulk text file transfer and/or (2) traditional local area network environments such as Ethernet or Token Ring. (B) Reduction in Transport System Overhead: A large body of research exists on both network protocols (see <ref> [31] </ref> for a survey) and the transport systems that support them (see [8] for our survey). Techniques for reducing transport system overhead involve various combinations of the following: 1. Utilize faster hardware for CPUs, busses, network con trollers, and memory hierarchies. 2. <p> Out-of-band signaling helps to optimize the main data transfer path, since this path does not interpret packets containing control information <ref> [31] </ref>. by signaling and data units during the negotiation process and subsequent data transfer. The additional time spent negotiating QoS should improve the overall performance for longer-duration, high-bandwidth connections, since the resulting configurations more accurately reflect the application requirements and network characteristics [31]. <p> path does not interpret packets containing control information <ref> [31] </ref>. by signaling and data units during the negotiation process and subsequent data transfer. The additional time spent negotiating QoS should improve the overall performance for longer-duration, high-bandwidth connections, since the resulting configurations more accurately reflect the application requirements and network characteristics [31]. Moreover, the negotiation process may be combined with explicit connection management that occurs during the initial 2-way or 3-way handshake. This allows local configuration activities to proceed in parallel with remote negotiation activities.
Reference: [32] <author> E. C. Cooper, P. A. Steenkiste, R. D. Sansom, and B. D. Zill, </author> <title> Protocol Implementation on the Nectar Communication Processor, </title> <booktitle> in Proceedings of the Symposium on Communications Architectures and Protocols (SIGCOMM), </booktitle> <address> (Philadelphia, PA), </address> <pages> pp. 135144, </pages> <publisher> ACM, </publisher> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: Utilize faster hardware for CPUs, busses, network con trollers, and memory hierarchies. 2. Implement selected functions (e.g., checksum calculations, message buffering, and demultiplexing) in special-purpose hardware. 3. Migrate some or all of the protocol processing activities to off-board processors <ref> [9, 20, 32] </ref> to reduce CPU interrupts and operating system context/process switch ing on the host computer. 4.
Reference: [33] <author> D. D. Clark, V. Jacobson, J. Romkey, and H. Salwen, </author> <title> An Analysis of TCP Processing Overhead, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 27, </volume> <pages> pp. 2329, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Implement existing protocols more efficiently by (1) shortening the instruction paths executed for each packet and (2) improving the implementation of standard transport system support services such as message management and demultiplexing <ref> [10, 11, 33] </ref>. 5. Design new lightweight and adaptive protocols that are tailored for high-speed, low error, and low delay net work environments [19, 20, 34, 35, 36]. 6.
Reference: [34] <author> D. D. Clark, M. L. Lambert, and L. Zhang, NETBLT: </author> <title> A Bulk Data Transfer Protocol, Network Information Center RFC 998, </title> <journal> pp. </journal> <volume> 121, </volume> <month> Mar. </month> <year> 1987. </year>
Reference-contexts: Design new lightweight and adaptive protocols that are tailored for high-speed, low error, and low delay net work environments <ref> [19, 20, 34, 35, 36] </ref>. 6.
Reference: [35] <author> R. W. Watson, </author> <title> The Delta-t Transport Protocol: Features and Experience, </title> <booktitle> in Proceedings of the 1st International Workshop on High-Speed Networks, </booktitle> <month> May </month> <year> 1989. </year>
Reference-contexts: Design new lightweight and adaptive protocols that are tailored for high-speed, low error, and low delay net work environments <ref> [19, 20, 34, 35, 36] </ref>. 6.
Reference: [36] <author> D. R. Cheriton and C. L. Williamson, </author> <title> VMTP as the Transport Layer for High-Performance Distributed Systems, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 27, </volume> <pages> pp. 3744, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Design new lightweight and adaptive protocols that are tailored for high-speed, low error, and low delay net work environments <ref> [19, 20, 34, 35, 36] </ref>. 6.
Reference: [37] <author> J. Jain, M. Schwartz, and T. Bashkow, </author> <title> Transport Protocol Processing at GBPS Rates, </title> <booktitle> in Proceedings of the Symposium on Communications Architectures and Protocols (SIG-COMM), </booktitle> <address> (Philadelphia, PA), </address> <pages> pp. 188199, </pages> <publisher> ACM, </publisher> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: Design new lightweight and adaptive protocols that are tailored for high-speed, low error, and low delay net work environments [19, 20, 34, 35, 36]. 6. Develop alternative transport system architectures based on (a) vertical process architectures <ref> [7, 37] </ref>, (b) parallel processing of protocol functions [3, 4, 19], (c) flexible protocol stacks that require fewer layers and/or are dynamically assembled [6, 25, 26, 30], and (d) modular and extensible transport system software that sup ports these flexible protocol stacks [2, 18, 38].
Reference: [38] <author> D. D. Clark, </author> <title> The Structuring of Systems Using Upcalls, </title> <booktitle> in Proceedings of the 10 th Symposium on Operating System Principles, (Shark Is., </booktitle> <address> WA), </address> <year> 1985. </year>
Reference-contexts: system architectures based on (a) vertical process architectures [7, 37], (b) parallel processing of protocol functions [3, 4, 19], (c) flexible protocol stacks that require fewer layers and/or are dynamically assembled [6, 25, 26, 30], and (d) modular and extensible transport system software that sup ports these flexible protocol stacks <ref> [2, 18, 38] </ref>. The ADAPTIVE architecture we are developing extends prior research on flexible transport system architectures.
Reference: [39] <author> P. Gunningberg, M. Bjorkman, E. Nordmark, S. Pink, P. Sjodin, and J.-E. Stromquist, </author> <title> Application Protocols and Performance Benchmarks, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 27, </volume> <pages> pp. 3036, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Other met-rics for monitoring and measuring transport systems include throughput, response time, jitter, connection establishment time, and number of packet retransmissions <ref> [39] </ref>. Section 4.3 describes measurement issues in greater detail. 4 Design of the ADAPTIVE System This section describes the architecture of the ADAPTIVE system and examines its major subsystems in detail. <p> The TKO subsystem then selectively instruments the synthesized configurations and the metrics are automatically collected by UNITES at run-time. 2. To support experimentation, metrics also may be requested using either a graphics-based or language-based interface. Sjodin et al.'s work is an example of a language-based approach <ref> [39] </ref>. They define a specification language that indicates what measurements to collect and what traffic to generate.
Reference: [40] <author> V. Jacobson and R. Braden, </author> <title> TCP Extensions for Long-Delay Paths, Network Information Center RFC 1072, </title> <journal> pp. </journal> <volume> 116, </volume> <month> Oct. </month> <year> 1988. </year>
Reference-contexts: Local and remote MANTTS entities negotiate three basic categories: (1) parameters (e.g., buffer space, initial window advertisements and scaling factors <ref> [40] </ref>, segment size and maximum transmission unit (MTU) size, priorities for message delivery and scheduling, and timer settings for delayed acknowledgments and retransmissions), (2) mechanisms (e.g., reliability management and transmission management mechanisms), and (3) representations (e.g., fixed-size vs. variable-sized buffer management).
Reference: [41] <author> J. C. Pasquale, G. C. Polyzos, E. W. Anderson, K. R. Fall, J. S. Kay, V. P. Kompella, S. R. McMullan, and D. Ranganathan, </author> <title> Network and Operating System Support for Multimedia Applications, </title> <type> Tech. Rep. </type> <institution> CS-91-186, University of California, </institution> <address> San Diego, </address> <year> 1990. </year>
Reference-contexts: Participant addresses indicate certain characteristics of intermediate switching nodes and remote end systems such as available bandwidth, MTU, latency, and bit error rates. Knowledge of these characteristics enables MANTTS to determine more appropriate policies and mechanisms. Duration is an important quantitative QoS parameter for digital continuous media (DCM) sessions <ref> [41] </ref>. It is an essential configuration parameter for ADAPTIVE, since it is not generally useful to dynamically reconfigure sessions that have very low duration.
Reference: [42] <author> A. N. Netravali, W. D. Roome, and K. Sabnani, </author> <title> Design and Implementation of a High Speed Transport Protocol, </title> <journal> IEEE Transactions on Communications, </journal> <year> 1990. </year>
Reference-contexts: There are four fundamental TKO protocol architecture classes: TKO Event, TKO Message, TKO Protocol and TKO Session: * TKO Event: Many protocols must respond to temporal events such as retransmission timer expiration or periodic update requests <ref> [42] </ref>. The TKO Event class provides event management operations such as TKO Event::schedule, TKO Event::expire, and TKO Event::cancel.
Reference: [43] <author> D. D. Clark and D. L. Tennenhouse, </author> <title> Architectural Considerations for a New Generation of Protocols, </title> <booktitle> in Proceedings of the Symposium on Communications Architectures and Protocols (SIGCOMM), </booktitle> <address> (Philadelphia, PA), </address> <pages> pp. </pages> <address> 200208, </address> <publisher> ACM, </publisher> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: Event objects schedule themselves to expire one or more times (i.e., they are one-shot or periodic), they may be cancelled, and they are triggered to expire asynchronously by the operating system's timer facility. * TKO Message: Performance measurements indicate that memory-to-memory copying is a significant source of transport system overhead <ref> [43] </ref>. Therefore, some form of buffer management is required to avoid unnecessary copying when (1) moving messages between protocol layers and (2) when adding or deleting message headers and trailers. The TKO Message class provides uniform interfaces for services that create, copy, prepend, and split messages.
Reference: [44] <author> Bjarne Stroustrup and Margret Ellis, </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: In the BSD scheme, all sessions associated with a particular protocol object use the same bindings, which are fixed at link-time and do not change. TKO session architecture flexibility is supported by the C++ virtual function dynamic binding mechanism <ref> [44] </ref>. Although dynamic binding enhances flexibility (and thereby facilitates prototyping and experimentation), it increases processing overhead somewhat due to the extra level of indirection required to dispatch C++ virtual functions.
Reference: [45] <author> C. Chambers and D. Ungar, </author> <title> Customization: optimizing compiler technology for SELF (a dynamically-typed object-oriented language), </title> <booktitle> in Proc. SIGPLAN, ACM, </booktitle> <year> 1989. </year>
Reference-contexts: Although dynamic binding enhances flexibility (and thereby facilitates prototyping and experimentation), it increases processing overhead somewhat due to the extra level of indirection required to dispatch C++ virtual functions. To reduce this overhead, TKO employs a technique known as customization <ref> [45] </ref>, which generates non-dynamically bound configurations for circumstances where performance is more important than flexibility. Customization incurs a time-space tradeoff, however, since inline expansion of many customized kernel objects may lead to excessive code bloat (see [46] for a discussion of a similar problem with the Synthesis Kernel).
Reference: [46] <author> C. Pu, H. Massalin, and J. Ioannidis, </author> <title> The Synthesis kernel, </title> <journal> Computing Systems, </journal> <volume> vol. 1, </volume> <pages> pp. 1132, </pages> <month> Winter </month> <year> 1988. </year>
Reference-contexts: To reduce this overhead, TKO employs a technique known as customization [45], which generates non-dynamically bound configurations for circumstances where performance is more important than flexibility. Customization incurs a time-space tradeoff, however, since inline expansion of many customized kernel objects may lead to excessive code bloat (see <ref> [46] </ref> for a discussion of a similar problem with the Synthesis Kernel). In addition, the TKO session architecture maintains a cache of customized TKO Templates that further optimize the instantiation process. TKO Templates provide default transport system session configurations for commonly requested SCSs. <p> If a pre-assembled TKO Template does not exist to match an SCS request, TKO session architecture is responsible for dynamically synthesizing one <ref> [46] </ref>. 4.3 UNITES The UNITES (Uniform Transport and Evaluation Subsystem) subsystem facilitates transport system protocol experimentation by coordinating metric specification, metric collection, metric analysis, and metric presentation. A fundamental goal of ADAPTIVE is to provide a framework that supports controlled hypothesis testing of different transport system session configurations.
Reference: [47] <author> H. K. Huang, T. Suda, and Y. Noguchi, </author> <title> LAN With Collision Avoidance: Switch Implementation and Simulation Study, </title> <booktitle> in Proceedings of the 15th Conference on Local Computer Networks, </booktitle> <year> 1990. </year>
Reference-contexts: This prototype is written in C++, and is hosted on both the x-kernel and System V release 4 STREAMS. We are using the prototype to experiment with different transport system configurations that support multimedia applications (e.g., network voice and video) running on several different networks (e.g., Ethernet, Tree Network <ref> [47] </ref>, DQDB, and FDDI). Acknowledgments We would like to thank Hung Huang, Unmesh Rathi, and Girish Kotmire for their help in designing the ADAPTIVE system and for proof-reading earlier drafts of this paper.
References-found: 47

