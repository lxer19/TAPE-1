URL: http://www.isi.edu/~marcu/papers/agentprog.ps
Refering-URL: http://www.isi.edu/~marcu/papers.html
Root-URL: http://www.isi.edu
Email: lesperan@yorku.ca  -hector,,marcu,reiter-@ai.toronto.edu  scherl@vienna.njit.edu  
Title: Foundations of a Logical Approach to Agent Programming  
Author: M. Wooldridge, J. P. Muller, and M. Tambe, Yves Lesperance a Hector J. Levesque b Fangzhen Lin b Daniel Marcu b Raymond Reiter b and Richard B. Scherl c 
Address: 2275 Bayview Ave., Toronto, ON, Canada M4N 3M6  Toronto, ON, Canada M5S 1A4  Heights, Newark, NJ 07102 USA  
Affiliation: a Department of Computer Science, Glendon College, York University,  b Department of Computer Science, University of Toronto  c Department of Computer and Information Science, New Jersey Institute of Technology, University  
Note: To appear in  editors, Intelligent Agents Volume II Proceedings of the 1995 Workshop on Agent Theories, Architectures, and Languages (ATAL-95), pp. 331-346, Springer Verlag, Lecture Notes in Artificial Intelligence, 1996.  
Abstract: This paper describes a novel approach to high-level agent programming based on a highly developed logical theory of action. The user provides a specification of the agents' basic actions (preconditions and effects) as well as of relevant aspects of the environment, in an extended version of the situation calculus. He can then specify behaviors for the agents in terms of these actions in a programming language where one can refer to conditions in effect in the environment. When an implementation of the basic actions is provided, the programs can be executed in a real environment; otherwise, a simulated execution is still possible. The interpreter automatically maintains the world model required to execute programs based on the specification. The theoretical framework includes a solution to the frame problem, allows agents to have incomplete knowledge of their environment, and handles perceptual actions. The theory can also be used to prove programs correct. A simple meeting scheduling application is used to present the approach. Ongoing work on implementing the approach and handling outstanding problems is also described.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Philip R. Cohen and Hector J. Levesque. </author> <title> Communicative actions for artificial agents. </title> <editor> In Victor Lesser and Les Gasser, editors, </editor> <booktitle> Proceedings of the First International Conference on Multiagent Systems, </booktitle> <address> San Francisco, CA, June 1995. </address> <publisher> AAAI Press/MIT Press. </publisher>
Reference-contexts: A popular choice is the KQML communication language [2] and its associated tools. However according to Cohen and Levesque <ref> [1] </ref>, the KQML definition has many deficiencies, in particular the lack of a formal semantics. One of our objectives is to show that CONGOLOG is suitable for various implementation tasks, so here we chose to define our own simple communication tools.
Reference: [2] <institution> ARPA Knowledge Sharing Initiative External Interfaces Working Group. </institution> <note> Specification of the KQML agent-communication language. Working Paper, </note> <month> June </month> <year> 1993. </year>
Reference-contexts: This follows the situated automata view of Rosenschein and Kaelbling [19], which allows knowledge to be attributed to agents without any commitment to a symbolic architecture. 4 Communication in CONGOLOG Most multi-agent applications require some kind of agent communication facility. A popular choice is the KQML communication language <ref> [2] </ref> and its associated tools. However according to Cohen and Levesque [1], the KQML definition has many deficiencies, in particular the lack of a formal semantics.
Reference: [3] <author> M. Fisher. </author> <title> A survey of Concurrent METATEM the language and its applications. </title> <editor> In D. M. Gabbay and H. J. Ohlbach, editors, </editor> <booktitle> Temporal Logic Proceedings of the First International Conference (LNAI Volume 827), </booktitle> <pages> pages 480-505. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1994. </year>
Reference-contexts: Another agent language based on a logic is Concurrent MetateM <ref> [3] </ref>. Here, each agent's behavior is specified in a subset of temporal logic. The specifications are executed using iterative model generation techniques. A limitation of the approach is that neither the interactions between agents nor their mental 6 states are modeled within the logic.
Reference: [4] <author> Robert Goldblatt. </author> <title> Logics of Time and Computation. CSLI Lecture Notes No. 7. Center for the Study of Language and Information, </title> <institution> Stanford University, Stanford, </institution> <address> CA, 2nd. edition, </address> <year> 1987. </year>
Reference-contexts: In [8], we give a more complex version that solves this problem. This formalization draws somewhat from the standard treatment of concurrency in dynamic logic <ref> [4] </ref>. Conditionals and while-loops can be defined in terms of the above constructs as follows: if then ffi 1 else ffi 2 endIf def while do ffi endWhile def Procedures and recursion can also be handled.
Reference: [5] <author> Andrew R. Haas. </author> <title> The case for domain-specific frame axioms. In F.M. </title> <editor> Brown, editor, </editor> <booktitle> The Frame Problem in Artificial Intelligence: Proceedings of the 1987 Workshop, </booktitle> <pages> pages 343-348, </pages> <publisher> Lawrence, KA, </publisher> <address> April 1987. </address> <publisher> Morgan Kaufmann Publishing. </publisher>
Reference-contexts: Our approach incorporates a treatment of the frame problem due to Reiter [17] (who extends previous proposals by Pednault [16], Schubert [22] and Haas <ref> [5] </ref>). The basic idea behind this is to collect all effect axioms about a given fluent and assume that they specify all the ways the value of the fluent may change.
Reference: [6] <author> Yves Lesperance, Hector J. Levesque, F. Lin, Daniel Marcu, Raymond Reiter, and Richard B. Scherl. </author> <title> A logical approach to high-level robot programming a progress report. In Benjamin Kuipers, editor, Control of the Physical World by Intelligent Agents, </title> <booktitle> Papers from the 1994 AAAI Fall Symposium, </booktitle> <pages> pages 109-119, </pages> <address> New Orleans, LA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: It is relatively straightforward to provide an inductive definition of Do (ffi; s; s 0 ) when ffi does not involve concurrent actions <ref> [9, 6] </ref>; but this simple approach will not work with concurrency. Here, we will develop a different account that handles concurrent action by interleaving. <p> The most advanced involves a robotics application mail delivery in an office environment <ref> [6] </ref>. The high-level controller of the robot programmed in GOLOG is interfaced to a robotics software package that support path planning and local navigation. The system currently works in simulation mode; experiments with a real robot are planned. Two versions of the CONGOLOG interpreter are also being implemented.
Reference: [7] <author> Yves Lesperance, Hector J. Levesque, Fangzhen Lin, and Richard B. Scherl. </author> <title> Ability and knowing how in the situation calculus. </title> <note> In preparation, 1995. 12 </note>
Reference-contexts: We are working on a formal specification of the CONGOLOG interpretation process for multi-agent programs. This will facilitate the evaluation of different implementations. The specification will draw on our account of when an agent knows how to execute a program (i.e., of the knowledge preconditions of actions) <ref> [7] </ref>. 7 Implementation and Experimentation A prototype GOLOG interpreter [9] has been implemented in PROLOG and experiments are under way with various types of applications. The most advanced involves a robotics application mail delivery in an office environment [6]. <p> It also supports an abstract view of communication acts as action that affect other agents' mental states as opposed to mere message passing. We have started extending our framework to model goals, intentions, ability, and rational choice <ref> [23, 7] </ref>, and considering possible implementation mechanisms.
Reference: [8] <author> Hector J. Levesque. </author> <title> Concurrency in the situation calculus. </title> <note> In preparation, </note> <year> 1995. </year>
Reference-contexts: In <ref> [8] </ref>, we give a more complex version that solves this problem. This formalization draws somewhat from the standard treatment of concurrency in dynamic logic [4].
Reference: [9] <author> Hector J. Levesque, Raymond Reiter, Yves Lesperance, Fangzhen Lin, and Richard B. Scherl. GOLOG: </author> <title> A logic programming language for dynamic domains. </title> <note> Submitted to the Journal of Logic Programming, special issue on Reasoning about Action and Change, </note> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: It is relatively straightforward to provide an inductive definition of Do (ffi; s; s 0 ) when ffi does not involve concurrent actions <ref> [9, 6] </ref>; but this simple approach will not work with concurrency. Here, we will develop a different account that handles concurrent action by interleaving. <p> For example, the plan while 9b ONTABLE (b) do b REMOVE (b) leaves it to the CONGOLOG interpreter to find a legal sequence of actions that clears the table. For a more thorough discussion of the sequential portion of our language and its implementation, see <ref> [9] </ref>. One project that is closely related to ours is work on the AGENT-0 programming language [24]. But it is hard to do a systematic comparison between CONGOLOG and AGENT-0 as there are numerous differences. <p> This will facilitate the evaluation of different implementations. The specification will draw on our account of when an agent knows how to execute a program (i.e., of the knowledge preconditions of actions) [7]. 7 Implementation and Experimentation A prototype GOLOG interpreter <ref> [9] </ref> has been implemented in PROLOG and experiments are under way with various types of applications. The most advanced involves a robotics application mail delivery in an office environment [6].
Reference: [10] <author> Fangzhen Lin and Raymond Reiter. </author> <title> How to progress a database (and why) I. logical foundations. </title> <editor> In Jon Doyle, Erik Sandewall, and Pietro Torasso, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fourth International Conference, </booktitle> <pages> pages 425-436, </pages> <address> Bonn, Germany, 1994. </address> <publisher> Morgan Kaufmann Publishing. </publisher>
Reference-contexts: One problem with the regression approach is that its cost increases with the number of actions performed. It is clear that in general, we need to roll the agent's knowledge forward in time as actions are performed. But as Lin and Reiter <ref> [10, 12] </ref> have shown, the progression of a knowledge base (KB) need not be first-order representable.
Reference: [11] <author> Fangzhen Lin and Raymond Reiter. </author> <title> State constraints revisited. </title> <journal> Journal of Logic and Computation, </journal> <volume> 4(5) </volume> <pages> 655-678, </pages> <year> 1994. </year>
Reference-contexts: (agt; SENSEMSG; s) KWhether (agt; EMPTY (MSGQ (agt)); do (agt; SENSEMSG; s)) ^ [:EMPTY (MSGQ (agt; s)) 9mKnow (agt; FIRST (MSGQ (agt)) = m; do (agt; SENSEMSG; s))] 1 This discussion ignores the ramification and qualification problems; a treatment compatible with our approach has been proposed by Lin and Reiter <ref> [11] </ref>. 3 Know (agt; ; s) is an abbreviation which is defined below. KWhether (agt; ; s) is also an abbreviation that stands for Know (agt; ; s) _ Know (agt; :; s).
Reference: [12] <author> Fangzhen Lin and Raymond Reiter. </author> <title> How to progress a database II: The STRIPS connection. </title> <editor> In Chris S. Mellish, editor, </editor> <booktitle> Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 2001-2007, </pages> <address> Montreal, August 1995. </address> <publisher> Morgan Kaufmann Publishing. </publisher>
Reference-contexts: One problem with the regression approach is that its cost increases with the number of actions performed. It is clear that in general, we need to roll the agent's knowledge forward in time as actions are performed. But as Lin and Reiter <ref> [10, 12] </ref> have shown, the progression of a knowledge base (KB) need not be first-order representable.
Reference: [13] <author> D. Marcu, Y. Lesperance, H. Levesque, F. Lin, R. Reiter, and R. Scherl. </author> <title> Distributed software agents and communication in the situation calculus. </title> <booktitle> In Proceedings of the International Workshop on Intelligent Computer Communication, </booktitle> <pages> pages 69-78, </pages> <address> Cluj-Napoca, Romania, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Two versions of the CONGOLOG interpreter are also being implemented. A monolithic version supports the concurrent execution of agents on a single processor. Another version supports the truly distributed execution of agents, with the communication between agent being implemented using TCP/IP tools <ref> [13] </ref>. An application involving tools for home banking [20] has been implemented; it includes a number of software agents that handle various parts of the banking process (responding to buttons on an ATM terminal, managing the accounts at a bank, monitoring account levels for a user etc.).
Reference: [14] <author> John McCarthy and Patrick Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence, </booktitle> <volume> volume 4, </volume> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, Edinburgh, </publisher> <address> UK, </address> <year> 1979. </year>
Reference-contexts: We conclude by summarizing the main features of our approach and discussing the problems that remain. 2 A Theory of Action Our approach is based on an extended version of the situation calculus <ref> [14] </ref>, a predicate calculus dialect for representing dynamically changing worlds. The world is taken to be in a certain state (or situation). 2 That state can only change as a result of an agent performing an action. <p> It is usually necessary to add frame axioms that specify when fluents remain unchanged by actions. The frame problem <ref> [14] </ref> arises because the number of these frame axioms is of the order of the product of the number of fluents and the number of actions.
Reference: [15] <author> Robert C. Moore. </author> <title> A formal theory of knowledge and action. </title> <editor> In J. R. Hobbs and Robert C. Moore, editors, </editor> <booktitle> Formal Theories of the Common Sense World, </booktitle> <pages> pages 319-358. </pages> <publisher> Ablex Publishing, </publisher> <address> Norwood, NJ, </address> <year> 1985. </year>
Reference-contexts: KWhether (agt; ; s) is also an abbreviation that stands for Know (agt; ; s) _ Know (agt; :; s). We represent knowledge by adapting the possible world model to the situation calculus (as first done by Moore <ref> [15] </ref>). K (agt; s 0 ; s) represents the fact that in state s, the agent agt thinks the state of the world could be s 0 . Know (agt; ; s) is an abbreviation for the formula 8s 0 (K (agt; s 0 ; s) (s 0 )).
Reference: [16] <author> E. P. D. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <editor> In R.J. Brachman, H.J. Levesque, and R. Reiter, editors, </editor> <booktitle> Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 324-332, </pages> <address> Toronto, ON, May 1989. </address> <publisher> Morgan Kaufmann Publishing. </publisher>
Reference-contexts: The frame problem [14] arises because the number of these frame axioms is of the order of the product of the number of fluents and the number of actions. Our approach incorporates a treatment of the frame problem due to Reiter [17] (who extends previous proposals by Pednault <ref> [16] </ref>, Schubert [22] and Haas [5]). The basic idea behind this is to collect all effect axioms about a given fluent and assume that they specify all the ways the value of the fluent may change.
Reference: [17] <author> Raymond Reiter. </author> <title> The frame problem in the situation calculus: A simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Vladimir Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 359-380. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: The frame problem [14] arises because the number of these frame axioms is of the order of the product of the number of fluents and the number of actions. Our approach incorporates a treatment of the frame problem due to Reiter <ref> [17] </ref> (who extends previous proposals by Pednault [16], Schubert [22] and Haas [5]). The basic idea behind this is to collect all effect axioms about a given fluent and assume that they specify all the ways the value of the fluent may change. <p> Aspects of the agents' environment may also have to be modeled, for instance, if one is doing a simulated execution. In previous work, we have identified various useful techniques for performing this reasoning. In <ref> [17, 21] </ref>, we propose a method for reasoning about whether a condition holds after a sequence of actions. It uses a form of regression to reduce the given query to one involving only the initial state; the resulting query can then be handled with an ordinary atemporal theorem proving method.
Reference: [18] <editor> D. Riecken (editor). </editor> <booktitle> Communications of the ACM 37 (7), special issue on intelligent agents, </booktitle> <month> July </month> <year> 1994. </year>
Reference-contexts: 1 Introduction The notion of computational agents has become very fashionable lately <ref> [18, 26] </ref>. Building such agents seems to be a good way of congenially providing services to users in networked computer systems.
Reference: [19] <author> Stanley J. Rosenschein and Leslie P. Kaelbling. </author> <title> A situated view of representation and control. </title> <journal> Artificial Intelligence, </journal> <volume> 73 </volume> <pages> 149-173, </pages> <year> 1995. </year>
Reference-contexts: In [25], Wooldridge proposes a richer logical language where an agent's knowledge and choices could be specified; he also sketches how model generation techniques could be used to synthesize automata satisfying the specifications. This follows the situated automata view of Rosenschein and Kaelbling <ref> [19] </ref>, which allows knowledge to be attributed to agents without any commitment to a symbolic architecture. 4 Communication in CONGOLOG Most multi-agent applications require some kind of agent communication facility. A popular choice is the KQML communication language [2] and its associated tools.
Reference: [20] <author> Shane Ruman. </author> <title> GOLOG as an agent-programming language: Experiments in developing banking applications. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Toronto, Toronto, </institution> <note> ON, 1995. In preparation. </note>
Reference-contexts: A monolithic version supports the concurrent execution of agents on a single processor. Another version supports the truly distributed execution of agents, with the communication between agent being implemented using TCP/IP tools [13]. An application involving tools for home banking <ref> [20] </ref> has been implemented; it includes a number of software agents that handle various parts of the banking process (responding to buttons on an ATM terminal, managing the accounts at a bank, monitoring account levels for a user etc.).
Reference: [21] <author> Richard B. Scherl and Hector J. Levesque. </author> <title> The frame problem and knowledge-producing actions. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 689-695, </pages> <address> Washington, DC, July 1993. </address> <publisher> AAAI Press/The MIT Press. </publisher>
Reference-contexts: This treatment avoids the proliferation of axioms, as it only requires a single successor state axiom per fluent and a single precondition axiom per action. 1 Scherl and Levesque <ref> [21] </ref> have generalized this account to handle knowledge-producing actions. Such actions affect the mental state of the agent rather than the state of the external world. <p> Aspects of the agents' environment may also have to be modeled, for instance, if one is doing a simulated execution. In previous work, we have identified various useful techniques for performing this reasoning. In <ref> [17, 21] </ref>, we propose a method for reasoning about whether a condition holds after a sequence of actions. It uses a form of regression to reduce the given query to one involving only the initial state; the resulting query can then be handled with an ordinary atemporal theorem proving method.
Reference: [22] <author> L.K. Schubert. </author> <title> Monotonic solution to the frame problem in the situation calculus: An efficient method for worlds with fully specified actions. In H.E. </title> <editor> Kyberg, R.P. Loui, and G.N. Carlson, editors, </editor> <booktitle> Knowledge Representation and Defeasible Reasoning, </booktitle> <pages> pages 23-67. </pages> <publisher> Kluwer Academic Press, </publisher> <address> Boston, MA, </address> <year> 1990. </year> <month> 13 </month>
Reference-contexts: Our approach incorporates a treatment of the frame problem due to Reiter [17] (who extends previous proposals by Pednault [16], Schubert <ref> [22] </ref> and Haas [5]). The basic idea behind this is to collect all effect axioms about a given fluent and assume that they specify all the ways the value of the fluent may change.
Reference: [23] <author> Steven Shapiro, Yves Lesperance, and Hector J. Levesque. </author> <title> Goals and rational action in the situation calculus a preliminary report. </title> <booktitle> In Working Notes of the AAAI Fall Symposium on Rational Agency: Concepts, Theories, Models, and Applications, </booktitle> <address> Cambridge, MA, </address> <month> November </month> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: We plan to remedy this in future work (see <ref> [23] </ref> for some preliminary results). In the next section, we show that the simple communication tools specified above are sufficient for developing interesting applications. We are in the process of refining the specification and extending it to handle other types of communicative acts. <p> It also supports an abstract view of communication acts as action that affect other agents' mental states as opposed to mere message passing. We have started extending our framework to model goals, intentions, ability, and rational choice <ref> [23, 7] </ref>, and considering possible implementation mechanisms.
Reference: [24] <author> Yoav Shoham. </author> <title> Agent-oriented programming. </title> <journal> Artificial Intelligence, </journal> <volume> 60(1) </volume> <pages> 51-92, </pages> <year> 1993. </year>
Reference-contexts: Moreover, we will focus on the approach to building applications that involves designing a system as a collection of interacting agents. Agent programming <ref> [24] </ref> can be viewed as a generalization of object-oriented programming. But the notion of an agent is much more complex than that of an object. Because of this, it is crucial that tools for modeling and designing agents be based on solid theoretical foundations. <p> For a more thorough discussion of the sequential portion of our language and its implementation, see [9]. One project that is closely related to ours is work on the AGENT-0 programming language <ref> [24] </ref>. But it is hard to do a systematic comparison between CONGOLOG and AGENT-0 as there are numerous differences.
Reference: [25] <author> M. J. Wooldridge. </author> <title> Time, knowledge, and choice. </title> <editor> In M. Wooldridge, J. P. Muller, and M. Tambe, editors, </editor> <booktitle> Intelligent Agents Volume II Proceedings of the 1995 Workshop on Agent Theories, Architectures, and Languages (ATAL-95), Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <note> (In this volume). </note>
Reference-contexts: Here, each agent's behavior is specified in a subset of temporal logic. The specifications are executed using iterative model generation techniques. A limitation of the approach is that neither the interactions between agents nor their mental 6 states are modeled within the logic. In <ref> [25] </ref>, Wooldridge proposes a richer logical language where an agent's knowledge and choices could be specified; he also sketches how model generation techniques could be used to synthesize automata satisfying the specifications.
Reference: [26] <author> M.J. Wooldridge and N.R. Jennings. </author> <title> Intelligent agents: </title> <journal> Theory and practice. Knowledge Engineering Review, </journal> <volume> 10(2), </volume> <year> 1995. </year> <note> To appear. 14 </note>
Reference-contexts: 1 Introduction The notion of computational agents has become very fashionable lately <ref> [18, 26] </ref>. Building such agents seems to be a good way of congenially providing services to users in networked computer systems.
References-found: 26

