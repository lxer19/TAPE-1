URL: http://www.std.sri.com/public/ftp/ACE/Papers/CE-CALS92.ps.Z
Refering-URL: http://www.std.sri.com/public/ftp/ACE/Papers/
Root-URL: 
Title: Initiative in Concurrent Engineering (DICE). ENVIRONMENTS TO ENABLE  
Author: INFORMALCOLLABORATIVEDESIGNPROCESSES Earl Craighill, Ruth Lang, and Jose Joaquin Garcia-Luna 
Address: Menlo Park, CA 94025  
Affiliation: SRI International,  
Note: 1 This work was supported by the Defense Advanced Research Projects Agency (DARPA), Defense Science Office, under ARPA Order No. 8363/03 issued by DARPA/CMO under Contract MDA972-92-C-0023, for DARPA  
Abstract: The Collaborative Environment for Concurrent Engineering Design (CECED) encompasses new methods to aid collaboration in redesign activities by facilitating effective communication and capturing the history of the informal phase of the specification and design process. Our focus is on time-critical applications such as retrofitting new functionality, which facilitate critical knowledge access and reuse. CECED is designed to support rapid interactions between team members and appropriate experts, which can significantly shorten the specification and initial design phase. Selective capture of the design history during this critical phase can save time in subsequent design and fabrication phases by allowing knowledge reuse. We describe a collaborative environment that would be suitable for concurrent engineering (CE) and characterize the different usage modes for informal design interaction, define an architecture and design for a prototype system CECED, and discuss other related approaches that have been developed for CE and other application areas. 
Abstract-found: 1
Intro-found: 1
Reference: [BAKE-87] <author> W. Baker, J. Burns, S. Chow, D. Harrison, M. Igusa, C. Kring, T. Laidig, B. Lin, P. Moore, J. Reed, R. Rudell, C. Sechen, R. Segal, R. Spickelmier, A. Wang, A.R. Newton, and A. Sangiovanni-Vincentelli, </author> <title> "OCT-Tools Distribution 2.0," </title> <type> Tech. Rep., </type> <institution> University of California at Berkeley, Electron. Res. Lab, </institution> <month> November </month> <year> 1987. </year>
Reference-contexts: STANDARDIZED REPRESENTATIONS STANDARDIZED REPRESENTATIONS PROCESS HISTORY PROCESS HISTORY Design Design Expert Designer Fabrication Fabrication Fab Engineer Specification Specification Customer/ Analyst Novice Designer Collaborative Environment The University of California at Berkeleys (UCB) LAGER [SHUN-91] system is an integrated CAD system that uses the OCT database system <ref> [BAKE-87] </ref> and a specific subset of the OCT tool set. LAGER was chosen to provide the example concurrent engineering redesign environment because it: 1.
Reference: [CASS-90] <author> A. Cassoto, R. Newton, and A. Sangiovani Vincentelly, </author> <title> Design Management Based on Design Traces, </title> <booktitle> 27th Design Automation Conference, </booktitle> <address> Orlando, Florida, </address> <month> June </month> <year> 1990. </year> <month> 15 </month>
Reference: [CERC-92] <institution> Concurrent Engineering Research Center, Concept of Operations for the Communications Manager of DICE, Concurrent Engineering Research Center, West Virginia University, Morgantown, West Virginia, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: to many receivers (multicasting) and the ability to address the receivers as a group Access and permission management, that is, ownership and right to use (including security constraints) Transmission of multimedia data introduces constraints that require extensions to typical transport services such as the Communication Manager (CM) package from CERC <ref> [CERC-92] </ref>. CM provides a platform-independent interface, but only supports a clientserver model and the TCP/IP and RPC protocols. In order to accommodate this extended set of requirements, we define a more general type of connection. A Multimedia Multicast Connection (MMC) is a one-to-many composite transport connection.
Reference: [CROW-90] <author> T. Crowley, P. Milazzo, E. Baker, H. Forsdick, and R. Tomlinson, MMConf: </author> <title> An Infrastructure for Building Shared Multimedia Applications, </title> <booktitle> CSCW90 Conference Proceedings, </booktitle> <address> Los Angeles, CA, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Terminal linking was introduced in the NLS and AUGMENT systems [ENGE-75]; it allowed one user's screen to be displayed on other "linked" terminals. Conference-aware applications are special-purpose, or have been modified, to support real-time conferencing among two or more users sharing the application. MMConf <ref> [CROW-90] </ref> is an example of this approach. It employs a replicated architecture that restricts itself to the distribution of application input events and thus avoids having to deal with hardware-dependent remapping (cf., MONET and HPs SharedX). Another example is the Cooperate system [PELA-90], developed under the DICE program.
Reference: [DANC-87] <editor> J.R. Dance, et al., </editor> <title> The RunTime Structure of UIMS-Supported Applications, </title> <journal> Computer Graphics, </journal> <volume> Vol. 21, No. 2, </volume> <month> April </month> <year> 1987, </year> <pages> pp. 97-101. </pages>
Reference-contexts: Dialogue control refers to the provision of a higher level of abstraction for 8 interaction services <ref> [DANC-87] </ref>, such as consistency of information presentation across applications, or user preferences in the presentation of information. The presentation manager and the dialogue manager deal with presentation control and dialogue control, respectively.
Reference: [DANI-89] <author> J. Daniell and S.W. </author> <title> Director, An Object Oriented Approach to CAD Tool Control, </title> <booktitle> 26th Design Automation Conference, </booktitle> <month> June </month> <year> 1989. </year>
Reference: [DEER-88] <author> Deering, S., </author> <title> Host Extensions for IP Multicasting, </title> <type> RFC 1054, </type> <month> May, </month> <year> 1988. </year>
Reference-contexts: For CECED, MMCs will be implemented through the use of experimental protocols and/or implementation of features in CMAs. Potential implementation directions may include: 12 Multicasting provided through the use of experimental protocols <ref> [DEER-88] </ref> or by emulation (a transport-level function sets up connections with all other participants and transmits the same packet to each). Flow control and resource allocation to meet TOS requirements provided through use of the Internet Stream protocol [TOPO-90].
Reference: [ENGE-75] <author> D.C. Engelbart, </author> <title> "NLS Teleconferencing Features: The Journal And Shared - Screen Telephoning," </title> <booktitle> in Fall COMPCON '75, Digest of Papers, </booktitle> <pages> pp. 173-177, </pages> <month> September </month> <year> 1975. </year>
Reference-contexts: Terminal linking was introduced in the NLS and AUGMENT systems <ref> [ENGE-75] </ref>; it allowed one user's screen to be displayed on other "linked" terminals. Conference-aware applications are special-purpose, or have been modified, to support real-time conferencing among two or more users sharing the application. MMConf [CROW-90] is an example of this approach.
Reference: [GARF-91] <author> D. Garfinkel, and R. Branson, </author> <title> A Comparison of Application Sharing Architectures in the X. Environment, </title> <booktitle> Proceedings of Xhibition 91, </booktitle> <address> Boston, MA, </address> <month> December </month> <year> 1991. </year>
Reference-contexts: It provides a means for multiple individuals to exchange typed group or private messages, and share text and graphics files. Application sharing consists of tapping the communication between an application (client) and the server of a window system such as X. SharedX, developed at Hewlett-Packard <ref> [GARF-91] </ref>, and MONET developed under the DICE program [SRIN-92] are examples of this approach. Typically, a multiplexor is placed between the application and multiple window servers located both locally and remotely. The multiplexor captures both the user input and the output sides of the conference.
Reference: [GARC-88] <author> J. J. Garcia-Luna-Aceves, E. J, Craighill, and R. </author> <booktitle> Lang,Floor Management and Control for Multimedia Computer Conferencing Proceedings of MULTIMEDIA 89 , 2nd IEE Comsoc International Multimedia Communications Workshop, </booktitle> <address> Ottawa, Ontario, Canada, </address> <month> April </month> <year> 1989. </year>
Reference-contexts: COMET was derived from an earlier system called EMCE [GARC-89] by SRI. FUNCTIONAL ARCHITECTURE The system architecture of CECED has evolved from the Multimedia Open System for Augmented Interactive Collaboration (MOSAIC) architecture <ref> [GARC-88] </ref>, and differentiates three functional areas of collaborative environments, namely: Workspace support, which entails the mechanisms for the integrated storage and representation of information and the applications or processes that create and manipulate this information; workspaces are much more than just information storage and management systems, and include the computer-based tools
Reference: [GARC-89] <author> J. J. Garcia-Luna-Aceves, E. J. Craighill, and R. </author> <booktitle> Lang,Floor Management and Control for Multimedia Computer Conferencing Proceedings of MULTIMEDIA 89 , 2nd IEE Comsoc International Multimedia Communications Workshop, </booktitle> <address> Ottawa, Ontario, Canada, </address> <month> April </month> <year> 1989. </year>
Reference-contexts: CECED relies on a distributed contention resolution algorithm called COMET (COllaborative Multimedia Technology) to coordinate multiuser access to and control of voice, pointer, and applications. COMET was derived from an earlier system called EMCE <ref> [GARC-89] </ref> by SRI.
Reference: [GENE-91] <author> General Electric Company, </author> <title> Users Guide to the Formal Electronic Design Notebook, General Electric Company Schenectady, </title> <address> NY, </address> <year> 1991. </year>
Reference-contexts: Supporting the shared output mode is done similarly by coupling output from design tools running in each peer users private workspace to shared windows. Comparison of presentations allows peer designers to resolve necessary related parts of their individual designs. A common collaborative Electronic Design Notebook <ref> [GENE-91] </ref> could also be a shared tool to collect notes concerning the interaction. Finally, the customer-designer interactions can be supported by a combination of the shared tool and shared output modes.
Reference: [LANT-87] <author> K.A. Lantz, P.P. Tanner, C. Binding, K. Huang, A. Dwelly, </author> <title> Reference Models, Window Systems, </title> <journal> and Concurrency," Computer Graphics, </journal> <volume> Vol. 21, No. 2, </volume> <month> April </month> <year> 1987, </year> <pages> pp. 87-97. </pages>
Reference-contexts: The presentation manager and the dialogue manager deal with presentation control and dialogue control, respectively. The presentation manager is responsible for managing the workstations I/O devices, multiplexing them among applications, and providing a device-independent, media-dependent <ref> [LANT-87] </ref> I/O interface to the rest of the system. A basic assumption in CECED is that the presentation manager will not have any knowledge of the semantics of the application information. <p> The end user may be engaged in many simultaneous user-application dialogues. The objective of the workstation manager is to support this functionality, that is, to provide control for the sharing of multiple devices (e.g., windows) and invoking and specifying applications referred to as the metadialogue <ref> [LANT-87] </ref> established between user and system for control of multiple applications. This metadialogue includes such requests as create a new virtual device (e.g., a window). The workstation manager interacts with the user through the presentation manager to determine which applications should be run.
Reference: [LANT-90] <author> K. A. Lantz, </author> <title> An Experiment in Integrated Multimedia Conferencing, Computer-Supported Cooperative Work: A Book of Readings (Irene Grief, </title> <booktitle> editor), </booktitle> <pages> pp. 533-552, </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: Various centralized (queue requests to talk) policies can be implemented on top of the basic distributed floor control. Similarly, the Shared Tool-Events CMA allocates and controls tool I/O for multiple users. Tools can be replicated or centralized <ref> [LANT-90] </ref>, depending on available bandwidth. In addition, tool input or output can be shared, depending on the specific mode that is supported. These different configurations can be provided based on the same common control policies.
Reference: [FRAL-90] <author> J. Fraley, and R. Kannan, </author> <type> Communication Services/LCM, </type> <institution> Concurrent Engineering Research Center, West Virginia University, Morgantown, West Virginia, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: Connection support , which provides end-to-end connections between portions of the distributed system; connections normally would be considered part of conversational support , but we have shown it separately here since there are several proposals [SCHO-92b], <ref> [FRAL-90] </ref> for modularizing it and treating it separately. User collaboration is supported in CECED through Collaboration Management Agents (CMAs)application processes whose function is to implement the algorithms required for workspace sharing among users, which involves workspace and conversation support.
Reference: [PELA-90] <author> B. Pelakh, "Cooperate/CSCW," </author> <title> DICE Architecture Team User Manual, </title> <institution> Section 11.1, Concurrent Engineering Research Center, West Virginia University, Morgantown, West Virginia, </institution> <month> July </month> <year> 1990. </year> <month> 16 </month>
Reference-contexts: MMConf [CROW-90] is an example of this approach. It employs a replicated architecture that restricts itself to the distribution of application input events and thus avoids having to deal with hardware-dependent remapping (cf., MONET and HPs SharedX). Another example is the Cooperate system <ref> [PELA-90] </ref>, developed under the DICE program. It provides a means for multiple individuals to exchange typed group or private messages, and share text and graphics files. Application sharing consists of tapping the communication between an application (client) and the server of a window system such as X.
Reference: [SCHO-92a] <author> E. Schooler, </author> <title> The Connection Control Protocol: Specification, </title> <institution> USC/Information Sciences Institute, Marina del Rey, </institution> <address> CA, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: The Connection Manager CMA provides this common functionality to all tools and service to other CMAs. The architecture described by Schooler [SCHO-92b] and the corresponding connection control protocol specification <ref> [SCHO-92a] </ref> closely matches CECEDs requirements and will provide the basis for design and development of the Connection Manager CMA of CECED. <p> Our experience with COMET has shown that conference control can be fully distributed and, as such, significantly reduces response time. Hence, a peer-to-peer model is wellsuited to CECEDs requirements. The connection control protocol <ref> [SCHO-92a] </ref> that defines the means for communication among connection managers is a reliable transaction-oriented protocol that bypasses limitations of protocols such as TCP/IP, which is connection oriented, and Suns RPC, which strictly follows the clientserver model.
Reference: [SCHO-92b] <author> E. Schooler, </author> <title> The Connection Control Protocol: Architecture Overview, </title> <institution> USC/Information Sciences Institute, Marina del Rey, </institution> <address> CA, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: Connection support , which provides end-to-end connections between portions of the distributed system; connections normally would be considered part of conversational support , but we have shown it separately here since there are several proposals <ref> [SCHO-92b] </ref>, [FRAL-90] for modularizing it and treating it separately. User collaboration is supported in CECED through Collaboration Management Agents (CMAs)application processes whose function is to implement the algorithms required for workspace sharing among users, which involves workspace and conversation support. <p> The Connection Manager CMA provides this common functionality to all tools and service to other CMAs. The architecture described by Schooler <ref> [SCHO-92b] </ref> and the corresponding connection control protocol specification [SCHO-92a] closely matches CECEDs requirements and will provide the basis for design and development of the Connection Manager CMA of CECED.
Reference: [SHUN-91] <author> C.B. Shung, R. Jain, K. Rimey, E. Wang, M.B. Srivastava, B.C. Richards, E. Lettang, S.K. Azim, L. Thon, P.N. Hilfinger, J.M. Rabaey, and R.W. Brodersen, </author> <title> An Integrated CAD System for AlgorithmSpecific IC Design, </title> <journal> IEEE Transactions on Computer-Aided Design , Vol. </journal> <volume> 10, No. 4, </volume> <month> April </month> <year> 1991. </year>
Reference-contexts: STANDARDIZED REPRESENTATIONS STANDARDIZED REPRESENTATIONS PROCESS HISTORY PROCESS HISTORY Design Design Expert Designer Fabrication Fabrication Fab Engineer Specification Specification Customer/ Analyst Novice Designer Collaborative Environment The University of California at Berkeleys (UCB) LAGER <ref> [SHUN-91] </ref> system is an integrated CAD system that uses the OCT database system [BAKE-87] and a specific subset of the OCT tool set. LAGER was chosen to provide the example concurrent engineering redesign environment because it: 1.
Reference: [SRIN-92] <author> K. Srinivas, R. Reddy, A. Babadi, S. Kamana, V. Kumar, and Z. Dai, </author> <month> MONET: </month>
Reference-contexts: Application sharing consists of tapping the communication between an application (client) and the server of a window system such as X. SharedX, developed at Hewlett-Packard [GARF-91], and MONET developed under the DICE program <ref> [SRIN-92] </ref> are examples of this approach. Typically, a multiplexor is placed between the application and multiple window servers located both locally and remotely. The multiplexor captures both the user input and the output sides of the conference.
References-found: 20

