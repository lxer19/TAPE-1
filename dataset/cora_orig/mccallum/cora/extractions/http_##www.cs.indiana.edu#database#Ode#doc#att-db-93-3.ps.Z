URL: http://www.cs.indiana.edu/database/Ode/doc/att-db-93-3.ps.Z
Refering-URL: http://www.cs.indiana.edu/database/Ode/doc/
Root-URL: http://www.cs.indiana.edu
Title: OdeFS: A File System Interface to an Object-Oriented Database  
Author: N. Gehani H. V. Jagadish W. D. Roome 
Address: Murray Hill, New Jersey 07974  
Affiliation: AT&T Bell Laboratories  
Abstract: OdeFS is a file-like interface to the Ode object-oriented database. Database objects are accessed and manipulated like files in a traditional file system using standard UNIX commands. For example, the ls command can be used to list the objects in a directory and the cat command can be used to display the contents of an object. Editors such as vi and emacs can be used to update objects. OdeFS is implemented as a network file server, using the NFS protocol. OdeFS commands are translated into calls to the underlying UNIX file systems (to manipulate files or directories) or the Ode object manager (to manipulate persistent objects). OdeFS requires no storage of its own. In consequence, OdeFS is object-compatible with the other Ode interfaces: O++ (C++ interface), CQL++ (SQL interface), and OdeView (graphical interface). Objects created with one interface can be manipulated with the other interfaces. In this paper, we describe OdeFS, its user interface, and its implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal and N. H. Gehani, </author> <title> ``Ode (Object Database and Environment): The Language and the Data Model'', </title> <booktitle> Proc. ACM-SIGMOD 1989 Int'l Conf. Management of Data, </booktitle> <address> Portland, Oregon, </address> <month> May-June </month> <year> 1989, </year> <pages> 36-45. </pages>
Reference-contexts: 1. INTRODUCTION Ode <ref> [1] </ref> is an object-oriented database based on the C++ object model. The programming interface to Ode is the O++ database programming language, which extends C++ with facilities for creating and manipulating persistent objects, querying the database, specifying constraints and triggers, and running transactions. <p> Without OdeFS, we would have to rewrite it, turning file references into O++ operationsand then maintain the rewritten version. Besides OdeFS, the Ode object database provides several object-compatible interfaces to Ode that are targeted to different kinds of users: 1. O++ <ref> [1, 2, 4, 8, 9] </ref>: A programming interface for programmers, especially C++ programmers. 2. CQL++ [7]: An interactive SQL-like interface for the relational database user. 3.
Reference: [2] <author> R. Agrawal and N. H. Gehani, </author> <title> ``Rationale for the Design of Persistence and Query Processing Facilities in the Database Programming Language O++'', </title> <booktitle> 2nd Int'l Workshop on Database Programming Languages, </booktitle> <address> Portland, OR, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: Without OdeFS, we would have to rewrite it, turning file references into O++ operationsand then maintain the rewritten version. Besides OdeFS, the Ode object database provides several object-compatible interfaces to Ode that are targeted to different kinds of users: 1. O++ <ref> [1, 2, 4, 8, 9] </ref>: A programming interface for programmers, especially C++ programmers. 2. CQL++ [7]: An interactive SQL-like interface for the relational database user. 3.
Reference: [3] <author> R. Agrawal, N. H. Gehani and J. Srinivasan, </author> <title> ``OdeView: The Graphical Interface to Ode'', </title> <booktitle> Proc. ACM-SIGMOD 1990 Int'l Conf. on Management of Data, </booktitle> <year> 1990, </year> <pages> 34-43. </pages>
Reference-contexts: Besides OdeFS, the Ode object database provides several object-compatible interfaces to Ode that are targeted to different kinds of users: 1. O++ [1, 2, 4, 8, 9]: A programming interface for programmers, especially C++ programmers. 2. CQL++ [7]: An interactive SQL-like interface for the relational database user. 3. OdeView <ref> [3, 6] </ref>: A user-friendly graphical interface for the non programmer. - 3 - An additional goal is that OdeFS should be object-compatible with these other Ode interfaces. It should be possible to create objects with one interface, and manipulate them with other interfaces.
Reference: [4] <author> R. Agrawal, S. J. Buroff, N. H. Gehani and D. Shasha, </author> <title> ``Object Versioning in Ode'', </title> <booktitle> Proc. IEEE 7th Int'l Conf. Data Engineering, </booktitle> <address> Tokyo, Japan, </address> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: Without OdeFS, we would have to rewrite it, turning file references into O++ operationsand then maintain the rewritten version. Besides OdeFS, the Ode object database provides several object-compatible interfaces to Ode that are targeted to different kinds of users: 1. O++ <ref> [1, 2, 4, 8, 9] </ref>: A programming interface for programmers, especially C++ programmers. 2. CQL++ [7]: An interactive SQL-like interface for the relational database user. 3.
Reference: [5] <author> S. R. </author> <title> Bourne, </title> <publisher> Addison-Wesley, 1982.. </publisher>
Reference-contexts: Because no code modification or recompilation is required, proprietary applications can also access Ode objects. In this paper, we describe OdeFS, its design goals and the implementation. We assume that the reader is familiar with C++ [11] and the UNIX operating system <ref> [5] </ref>. __________________ UNIX is a registered trademark of USL. - 2 - 2. DESIGN GOALS AND DECISIONS 2.1 Goals The fundamental goal of OdeFS is to allow existing file manipulation programs to manipulate objects.
Reference: [6] <author> S. Dar, N. H. Gehani, H. V. Jagadish and J. Srinivasan, </author> <title> ``Queries in an Object-Oriented Graphical Interface'', </title> <institution> AT&T Bell Labs Technical Memorandum, </institution> <year> 1991. </year>
Reference-contexts: Besides OdeFS, the Ode object database provides several object-compatible interfaces to Ode that are targeted to different kinds of users: 1. O++ [1, 2, 4, 8, 9]: A programming interface for programmers, especially C++ programmers. 2. CQL++ [7]: An interactive SQL-like interface for the relational database user. 3. OdeView <ref> [3, 6] </ref>: A user-friendly graphical interface for the non programmer. - 3 - An additional goal is that OdeFS should be object-compatible with these other Ode interfaces. It should be possible to create objects with one interface, and manipulate them with other interfaces.
Reference: [7] <author> S. Dar, N. H. Gehani and H. V. Jagadish, ``CQL++: </author> <title> An SQL for a C++ Based Object-Oriented DBMS'', </title> <booktitle> Proc. of Int'l Conf. on Extending Database Technology, </booktitle> <address> Vienna, Austria, </address> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: Besides OdeFS, the Ode object database provides several object-compatible interfaces to Ode that are targeted to different kinds of users: 1. O++ [1, 2, 4, 8, 9]: A programming interface for programmers, especially C++ programmers. 2. CQL++ <ref> [7] </ref>: An interactive SQL-like interface for the relational database user. 3. OdeView [3, 6]: A user-friendly graphical interface for the non programmer. - 3 - An additional goal is that OdeFS should be object-compatible with these other Ode interfaces. <p> For example: The user can ask OdeFS to populate an odir with ofiles for the objects that match a CQL++ query <ref> [7] </ref>. The query is entered into a .query file in an empty odir. The query is then applied by touching the .query.b file. OdeFS executes the query. If successful, it creates ofiles corresponding to the objects that satisfy the query and a zero-length .query.e file.
Reference: [8] <author> S. Dar, R. Agrawal and N. H. Gehani, </author> <title> ``The O++ Database Programming Language: Implementation and Experience'', </title> <booktitle> Proc. IEEE 9th Int'l Conf. Data Engineering, </booktitle> <address> Vienna, Austria, </address> <year> 1993. </year>
Reference-contexts: Without OdeFS, we would have to rewrite it, turning file references into O++ operationsand then maintain the rewritten version. Besides OdeFS, the Ode object database provides several object-compatible interfaces to Ode that are targeted to different kinds of users: 1. O++ <ref> [1, 2, 4, 8, 9] </ref>: A programming interface for programmers, especially C++ programmers. 2. CQL++ [7]: An interactive SQL-like interface for the relational database user. 3.
Reference: [9] <author> N. H. Gehani and H. V. Jagadish, </author> <title> ``Ode as an Active Database: Constraints and Triggers'', </title> <booktitle> Proc. 17th Int'l Conf. Very Large Data Bases, </booktitle> <address> Barcelona, Spain, </address> <year> 1991, </year> <pages> 327-336. </pages>
Reference-contexts: Without OdeFS, we would have to rewrite it, turning file references into O++ operationsand then maintain the rewritten version. Besides OdeFS, the Ode object database provides several object-compatible interfaces to Ode that are targeted to different kinds of users: 1. O++ <ref> [1, 2, 4, 8, 9] </ref>: A programming interface for programmers, especially C++ programmers. 2. CQL++ [7]: An interactive SQL-like interface for the relational database user. 3.
Reference: [10] <author> N. NFS, </author> <title> Network File System: Version 2 Protocol Specification, Sun Microsystems, </title> <publisher> Inc., </publisher> <address> Mountain View, California, </address> <year> 1988. </year>
Reference-contexts: As for efficiency, our goal is that OdeFS should ``feel like a file system'' to an interactive user. 2.2 NFS We decided to implement OdeFS as a network file server, using the NFS protocol <ref> [10] </ref>. As in Figure 3, client computers treat OdeFS just like any other NFS server. The kernel in a client computer translates system calls on OdeFS files into NFS requests to the OdeFS server. user program kernel read/write open/close/... Client user program kernel read/write open/close/...
Reference: [11] <author> B. Stroustrup, </author> <title> The C++ Programming Language (2nd Ed.), </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year> <month> - 18 </month> - 
Reference-contexts: A file-oriented Graphical User Interface (GUI) can display and select Ode objects. Because no code modification or recompilation is required, proprietary applications can also access Ode objects. In this paper, we describe OdeFS, its design goals and the implementation. We assume that the reader is familiar with C++ <ref> [11] </ref> and the UNIX operating system [5]. __________________ UNIX is a registered trademark of USL. - 2 - 2. DESIGN GOALS AND DECISIONS 2.1 Goals The fundamental goal of OdeFS is to allow existing file manipulation programs to manipulate objects.
References-found: 11

