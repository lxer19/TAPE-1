URL: http://www.isi.edu/~blythe/papers/postscript/rasputin.ps
Refering-URL: http://www.isi.edu/~blythe/papers/rasputin.html
Root-URL: http://www.isi.edu
Title: rasputin: A Complete Bidirectional Planner Content areas: planning, search, problem solving. Tracking Number: A581.  
Abstract: We show that prodigy is not complete and discuss the advantages and drawbacks of its incompleteness. We then develop a complete bidirectional planner, called rasputin, and compare it experimentally with prodigy. We demonstrate that the new planner is almost as efficient as prodigy and can solve more problems.
Abstract-found: 1
Intro-found: 1
Reference: [ Anon, 1997 ] <institution> The authors are omitted for the blind review. </institution> <note> From prodigy1 to rasputin: Illustrated story of bidirectional planners. Technical Report CMU-CS-97-102, </note> <institution> Department of Computer Science, Carnegie Mellon University, </institution> <year> 1997. </year>
Reference-contexts: We omit the methods for handling disjunctive and quantified preconditions, which are described elsewhere <ref> [ Anon, 1997 ] </ref> . All prodigy planners are based on the algorithm describe here; however, they differ from each other in the decision points, used for backtracking, and in the general heuristics for guiding the search. <p> We present the proof of completeness in the full paper <ref> [ Anon, 1997 ] </ref> . We implemented a complete bidirectional planner, called rasputin. We experimentally compare rasputin's efficiency with that of prodigy4 and demonstrate that rasputin solves more problems. We first give results in the prodigy Logistics Transpo-ration Domain [ Veloso, 1994 ] .
Reference: [ Barrett and Weld, 1994 ] <author> Anthony Barrett and Dan Weld. </author> <title> Partial order planning: Evaluating possible efficiency gains. </title> <journal> Aritificial Intelligence, </journal> <volume> 67(1) </volume> <pages> 71-112, </pages> <year> 1994. </year>
Reference: [ Chapman, 1987 ] <author> David Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 333-377, </pages> <year> 1987. </year>
Reference-contexts: The authors of later planning systems [ Fikes and Nilsson, 1971; Tate, 1977 ] gradually abandoned the search from the initial state and began to rely exclusively on backward chaining. Researchers discovered that least commitment improves the efficiency of backward chainers, which gave rise to tweak <ref> [ Chapman, 1987 ] </ref> , snlp [ McAllester and Rosenblitt, 1991 ] , ucpop [ Penberthy and Weld, 1992 ] , and other least-commitment planners.
Reference: [ Fikes and Nilsson, 1971 ] <author> Richard E. Fikes and Nils J. Nilsson. </author> <title> strips: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year>
Reference-contexts: 1 Introduction Newell and Simon invented means-ends analysis during their work on General Problem Solver (gps), back in the early days of AI. Their technique combined goal-directed reasoning with forward chaining from the initial state [ Newell and Simon, 1961 ] . The authors of later planning systems <ref> [ Fikes and Nilsson, 1971; Tate, 1977 ] </ref> gradually abandoned the search from the initial state and began to rely exclusively on backward chaining.
Reference: [ Gil, 1991 ] <author> Yolanda Gil. </author> <title> A specification of process planning for prodigy. </title> <type> Technical Report CMU-CS-91-179, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1991. </year>
Reference-contexts: Since prodigy wins on all problems, all pluses are above the diagonal. The ratio of rasputin's to prodigy's time varies from 1.20 to 1.97; the mean of this ratio is 1.45. We ran a similar experiment on fifty problems in the prodigy Machine Shop Domain <ref> [ Gil, 1991 ] </ref> , which also does not require protection or anycase subgoals. The ratio of rasputin's to prodigy's time was between 1.22 and 1.89, with the mean at 1.39. We next show results in an extended version of our Trucking Domain.
Reference: [ McAllester and Rosenblitt, 1991 ] <author> David McAllester and David Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 634-639, </pages> <year> 1991. </year>
Reference-contexts: Researchers discovered that least commitment improves the efficiency of backward chainers, which gave rise to tweak [ Chapman, 1987 ] , snlp <ref> [ McAllester and Rosenblitt, 1991 ] </ref> , ucpop [ Penberthy and Weld, 1992 ] , and other least-commitment planners.
Reference: [ Minton, 1988 ] <author> Steven Minton. </author> <title> Learning Effective Search Control Knowledge: An Explanation-Based Approach. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1988. </year> <note> Technical Report CMU-CS-88-133. </note>
Reference-contexts: Meanwhile, prodigy researchers extended means-ends analysis and developed a family of planners based on the combination of goal-directed backward chaining with simulation of plan execution [ Veloso et al., 1995 ] . We call them bidirectional planners, which include prodigy2 <ref> [ Minton, 1988 ] </ref> , nolimit [ Veloso, 1994 ] , prodigy4 [ Veloso et al., 1995 ] , and flecs [ Veloso and Stone, 1995 ] .
Reference: [ Newell and Simon, 1961 ] <author> Allen Newell and Herbert A. Simon. </author> <title> GPS, a program that simulates human thought. </title> <editor> In H. Billing, editor, </editor> <booktitle> Lernende Automaten, </booktitle> <pages> pages 109-124. </pages> <editor> R. </editor> <publisher> Oldenbourg, </publisher> <address> Munich, Germany, </address> <year> 1961. </year>
Reference-contexts: 1 Introduction Newell and Simon invented means-ends analysis during their work on General Problem Solver (gps), back in the early days of AI. Their technique combined goal-directed reasoning with forward chaining from the initial state <ref> [ Newell and Simon, 1961 ] </ref> . The authors of later planning systems [ Fikes and Nilsson, 1971; Tate, 1977 ] gradually abandoned the search from the initial state and began to rely exclusively on backward chaining.
Reference: [ Penberthy and Weld, 1992 ] <author> J. Scott Penberthy and Daniel S. Weld. ucpop: </author> <title> A sound, complete, partial-order planner for ADL. </title> <booktitle> In Proceedings of the Third International Conference on Knowledge Representation in Reasoning, </booktitle> <pages> pages 103-114, </pages> <year> 1992. </year>
Reference-contexts: Researchers discovered that least commitment improves the efficiency of backward chainers, which gave rise to tweak [ Chapman, 1987 ] , snlp [ McAllester and Rosenblitt, 1991 ] , ucpop <ref> [ Penberthy and Weld, 1992 ] </ref> , and other least-commitment planners. Meanwhile, prodigy researchers extended means-ends analysis and developed a family of planners based on the combination of goal-directed backward chaining with simulation of plan execution [ Veloso et al., 1995 ] .
Reference: [ Stone et al., 1994 ] <author> Peter Stone, Manuela M. Veloso, and Jim Blythe. </author> <title> The need for different domain-independent heuristics. </title> <booktitle> In Proceedings of the Second International Conference on AI Planning Systems, </booktitle> <pages> pages 164-169, </pages> <year> 1994. </year>
Reference-contexts: Least commitment proved inefficient for bidirectional search, and Veloso developed a casual-commitment strategy, based on instantiating all variables as early as possible [ Veloso, 1994 ] . Experiments have demonstrated that bidirectional search is an efficient technique, a fair match to other modern planners <ref> [ Stone et al., 1994 ] </ref> . Experiments revealed that prodigy and least-commitment backward chainers perform well in different domains.
Reference: [ Tate, 1977 ] <author> Austin Tate. </author> <title> Generating project networks. </title> <booktitle> In Proceedings of the Second International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 888-900, </pages> <year> 1977. </year>
Reference-contexts: 1 Introduction Newell and Simon invented means-ends analysis during their work on General Problem Solver (gps), back in the early days of AI. Their technique combined goal-directed reasoning with forward chaining from the initial state [ Newell and Simon, 1961 ] . The authors of later planning systems <ref> [ Fikes and Nilsson, 1971; Tate, 1977 ] </ref> gradually abandoned the search from the initial state and began to rely exclusively on backward chaining.
Reference: [ Veloso and Blythe, 1994 ] <author> Manuela M. Veloso and Jim Blythe. Linkability: </author> <title> Examining casual link commitments in partial-order planning. </title> <booktitle> In Proceedings of the Second International Conference on AI Planning Systems, </booktitle> <pages> pages 170-175, </pages> <year> 1994. </year>
Reference-contexts: Experiments have demonstrated that bidirectional search is an efficient technique, a fair match to other modern planners [ Stone et al., 1994 ] . Experiments revealed that prodigy and least-commitment backward chainers perform well in different domains. Some problems are more suitable for casual-commitment bidirectional search <ref> [ Veloso and Blythe, 1994 ] </ref> , whereas others require backward chaining with least commitment [ Bar-rett and Weld, 1994 ] .
Reference: [ Veloso and Stone, 1995 ] <author> Manuela M. Veloso and Peter Stone. flecs: </author> <title> Planning with a flexible commitment strategy. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 3 </volume> <pages> 25-52, </pages> <year> 1995. </year>
Reference-contexts: We call them bidirectional planners, which include prodigy2 [ Minton, 1988 ] , nolimit [ Veloso, 1994 ] , prodigy4 [ Veloso et al., 1995 ] , and flecs <ref> [ Veloso and Stone, 1995 ] </ref> . Least commitment proved inefficient for bidirectional search, and Veloso developed a casual-commitment strategy, based on instantiating all variables as early as possible [ Veloso, 1994 ] . <p> Veloso and Stone proved the completeness of flecs using several simplifying assumptions <ref> [ Veloso and Stone, 1995 ] </ref> , but their assumptions hold only for a limited class of domains. The incompleteness of prodigy is not a major handicap. <p> Such literals are called anycase subgoals. The challenge is to identify anycase subgoals among the preconditions of the tail-plan operators. A simple method is to view all preconditions and top-level goals as anycase subgoals. Veloso and Stone considered this approach to building a complete version of their flecs planner <ref> [ Veloso and Stone, 1995 ] </ref> ; however, it proved to cause an explosion in the number of subgoals, leading to a gross inefficiency. A more effective solution is based on the use of information learned in failed branches of the search space. Let us look again at Figure 6.
Reference: [ Veloso et al., 1995 ] <author> Manuela M. Veloso, Jaime G. Car-bonell, M. Alicia Perez, Daniel Borrajo, Eugene Fink, and Jim Blythe. </author> <title> Integrating planning and learning: The prodigy architecture. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 7(1) </volume> <pages> 81-120, </pages> <year> 1995. </year>
Reference-contexts: Meanwhile, prodigy researchers extended means-ends analysis and developed a family of planners based on the combination of goal-directed backward chaining with simulation of plan execution <ref> [ Veloso et al., 1995 ] </ref> . We call them bidirectional planners, which include prodigy2 [ Minton, 1988 ] , nolimit [ Veloso, 1994 ] , prodigy4 [ Veloso et al., 1995 ] , and flecs [ Veloso and Stone, 1995 ] . <p> researchers extended means-ends analysis and developed a family of planners based on the combination of goal-directed backward chaining with simulation of plan execution <ref> [ Veloso et al., 1995 ] </ref> . We call them bidirectional planners, which include prodigy2 [ Minton, 1988 ] , nolimit [ Veloso, 1994 ] , prodigy4 [ Veloso et al., 1995 ] , and flecs [ Veloso and Stone, 1995 ] . Least commitment proved inefficient for bidirectional search, and Veloso developed a casual-commitment strategy, based on instantiating all variables as early as possible [ Veloso, 1994 ] . <p> We give an example of a problem in Figure 2. We may solve it by the following plan: "load (pack-1, town-1), load (pack-2, town-1), leave-town (town-1, town-2), unload (pack-1, town-2), unload (pack-2, town-2)." 3 Foundations of bidirectional planning We now give basics of bidirectional planning <ref> [ Veloso et al., 1995 ] </ref> . We omit the methods for handling disjunctive and quantified preconditions, which are described elsewhere [ Anon, 1997 ] .
Reference: [ Veloso, 1994 ] <author> Manuela M. Veloso. </author> <title> Planning and Learning by Analogical Reasoning. </title> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Meanwhile, prodigy researchers extended means-ends analysis and developed a family of planners based on the combination of goal-directed backward chaining with simulation of plan execution [ Veloso et al., 1995 ] . We call them bidirectional planners, which include prodigy2 [ Minton, 1988 ] , nolimit <ref> [ Veloso, 1994 ] </ref> , prodigy4 [ Veloso et al., 1995 ] , and flecs [ Veloso and Stone, 1995 ] . Least commitment proved inefficient for bidirectional search, and Veloso developed a casual-commitment strategy, based on instantiating all variables as early as possible [ Veloso, 1994 ] . <p> [ Minton, 1988 ] , nolimit <ref> [ Veloso, 1994 ] </ref> , prodigy4 [ Veloso et al., 1995 ] , and flecs [ Veloso and Stone, 1995 ] . Least commitment proved inefficient for bidirectional search, and Veloso developed a casual-commitment strategy, based on instantiating all variables as early as possible [ Veloso, 1994 ] . Experiments have demonstrated that bidirectional search is an efficient technique, a fair match to other modern planners [ Stone et al., 1994 ] . Experiments revealed that prodigy and least-commitment backward chainers perform well in different domains. <p> We present the proof of completeness in the full paper [ Anon, 1997 ] . We implemented a complete bidirectional planner, called rasputin. We experimentally compare rasputin's efficiency with that of prodigy4 and demonstrate that rasputin solves more problems. We first give results in the prodigy Logistics Transpo-ration Domain <ref> [ Veloso, 1994 ] </ref> . This domain has no conditional effects and does not give rise to situations that require planning for anycase subgoals; thus, prodigy performs better than rasputin. We ran both planners on fifty problems of various complexity.
References-found: 15

