URL: ftp://rtcl.eecs.umich.edu/outgoing/atri/structuring.ps.Z
Refering-URL: http://www.eecs.umich.edu/~atri/
Root-URL: http://www.cs.umich.edu
Email: fashish,atri,kgshing@eecs.umich.edu  
Title: Structuring Communication Software for Quality-of-Service Guarantees  
Author: Ashish Mehra, Atri Indiresan and Kang G. Shin 
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: Real-Time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: In this paper, we propose architectural mechanisms for structuring host communication software to provide QoS guarantees. In particular, we present and evaluate a QoS-sensitive communication subsystem architecture for end hosts that provides real-time communication support for generic network hardware. This architecture provides services for managing communication resources for guaranteed-QoS (real-time) connections, such as admission control, traffic enforcement, buffer management, and CPU & link scheduling. The design of the architecture is based on three key goals: maintenance of QoS-guarantees on a per-connection basis, overload protection between established connections, and fairness in delivered performance to best-effort traffic. Using this architecture we implement real-time channels, a paradigm for real-time communication services in packet-switched networks. We evaluate the implementation to demonstrate the efficacy with which the architecture maintains QoS guarantees while adhering to the stated design goals. The evaluation also demonstrates the need for specific features and policies provided in the architecture. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. P. Anderson, L. Delgrossi, and R. G. Herrtwich. </author> <title> Structure and scheduling in real-time protocol implementations. Tech (a) Non-preemptive best-effort processing (b) Non-preemptive real-time processing nical Report TR-90-021, </title> <booktitle> International Computer Science In stitute, </booktitle> <address> Berkeley, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: In particular, it does not provide QoS-sensitive protocol processing inside end hosts. The need for scheduling protocol processing at priority levels consistent with the communicating application was highlighted in <ref> [1] </ref> and some implementation strategies demonstrated in [12]. Processor capacity reserves in Real-Time Mach [21] have been combined with user-level protocol processing [18] for predictable protocol processing inside hosts [17]. Operating system support for multimedia communication is explored in [25, 13].
Reference: [2] <author> D. P. Anderson, S. Y. Tzou, R. Wahbe, R. Govindan, and M. Andrews. </author> <title> Support for continuous media in the DASH sys tem. </title> <booktitle> In Proc. Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pages 54-61, </pages> <year> 1990. </year>
Reference-contexts: It therefore conforms to the connection semantics mentioned earlier. Traffic and QoS Specification: Traffic generation on real-time channels is based on a linear bounded arrival process <ref> [8, 2] </ref> characterized by three parameters: maximum message size (M max bytes), maximum message rate (R max messages/second), and maximum burst size (B max messages). The notion of logical arrival time is used to enforce a minimum separation I min = 1 R max between messages on a real-time channel.
Reference: [3] <author> C. M. Aras, J. F. Kurose, D. S. Reeves, and H. Schulzrinne. </author> <title> Real-time communication in packet-switched networks. </title> <journal> Proc. of the IEEE, </journal> <volume> 82(1) </volume> <pages> 122-139, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Our focus is on the architectural mechanisms used within the communication subsystem to satisfy the QoS requirements of all connections, without undue degradation in performance of best-effort traffic (with no QoS guarantees). While the proposed architecture is applicable to other proposals for guaranteed-QoS connections <ref> [3] </ref>, we focus on real-time channels, a paradigm for guaranteed-QoS communication services in packet-switched networks [16]. The architecture features a process-per-channel model for protocol processing, coordinated by a unique channel handler created on successful channel establishment. <p> Section 3 presents a QoS-sensitive communication subsystem architecture realizing these requirements, and Section 4 describes its implementation. Section 5 experimentally evaluates the efficacy of the proposed architecture. Section 6 discusses related work and Section 7 concludes the paper. 2. Architectural requirements for guaranteed QoS communication For guaranteed-QoS communication <ref> [3] </ref>, we consider unidirectional data transfer, from source to sink via intermediate nodes, with data being delivered at the sink in the order in which it is generated at the source. <p> It should not be unduly penalized by non-conformant real-time traffic, especially under work-conserving processing. 2.2. Real-time channels Several models have been proposed for guaranteed-QoS communication in packet-switched networks <ref> [3] </ref>. While the architectural mechanisms proposed in this paper are applicable to most of the proposed models, we focus on real-time channels [9, 16]. A real-time channel is a simplex, fixed-route, virtual connection between a source and destination host, with sequenced messages and associated performance guarantees on message delivery. <p> Related work While we have focused on host communication subsystem design to implement real-time channels, our implementation methodology is applicable to other proposals for providing QoS guarantees in packet-switched networks. A detailed survey of the proposed techniques can be found in <ref> [3] </ref>. Similar issues are being examined for provision of integrated services on the Internet [7, 6]. The expected QoS requirements of applications and issues involved in sharing link bandwidth across multiple classes of traffic are explored in [24, 10].
Reference: [4] <author> A. Banerjea, D. Ferrari, B. Mah, M. Moran, D. C. Verma, and H. Zhang. </author> <title> The Tenet real-time protocol suite: Design, im plementation, and experiences. </title> <type> Technical Report TR-94-059, ICSI, </type> <institution> Berkeley, </institution> <address> CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: The expected QoS requirements of applications and issues involved in sharing link bandwidth across multiple classes of traffic are explored in [24, 10]. The issues involved in providing QoS support in IP-over-ATM networks are also being explored [5, 22]. The Tenet protocol suite <ref> [4] </ref> provides real-time communication on wide-area networks (WANs), but does not incorporate protocol processing overheads into their network-level resource management policies. In particular, it does not provide QoS-sensitive protocol processing inside end hosts.
Reference: [5] <author> M. Borden, E. Crawley, B. Davie, and S. Batsell. </author> <title> Integration of real-time services in an IP-ATM network architecture. Re quest for Comments RFC 1821, </title> <month> August </month> <year> 1995. </year>
Reference-contexts: The expected QoS requirements of applications and issues involved in sharing link bandwidth across multiple classes of traffic are explored in [24, 10]. The issues involved in providing QoS support in IP-over-ATM networks are also being explored <ref> [5, 22] </ref>. The Tenet protocol suite [4] provides real-time communication on wide-area networks (WANs), but does not incorporate protocol processing overheads into their network-level resource management policies. In particular, it does not provide QoS-sensitive protocol processing inside end hosts.
Reference: [6] <author> R. Braden, D. Clark, and S. Shenker. </author> <title> Integrated services in the Internet architecture: An overview. Request for Com ments RFC 1633, </title> <month> July </month> <year> 1994. </year>
Reference-contexts: A detailed survey of the proposed techniques can be found in [3]. Similar issues are being examined for provision of integrated services on the Internet <ref> [7, 6] </ref>. The expected QoS requirements of applications and issues involved in sharing link bandwidth across multiple classes of traffic are explored in [24, 10]. The issues involved in providing QoS support in IP-over-ATM networks are also being explored [5, 22].
Reference: [7] <author> D. D. Clark, S. Shenker, and L. Zhang. </author> <title> Supporting real-time applications in an integrated services packet network: Archi tecture and mechanism. </title> <booktitle> In Proc. of ACM SIGCOMM, </booktitle> <pages> pages 14-26, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: A detailed survey of the proposed techniques can be found in [3]. Similar issues are being examined for provision of integrated services on the Internet <ref> [7, 6] </ref>. The expected QoS requirements of applications and issues involved in sharing link bandwidth across multiple classes of traffic are explored in [24, 10]. The issues involved in providing QoS support in IP-over-ATM networks are also being explored [5, 22].
Reference: [8] <author> R. L. Cruz. </author> <title> A Calculus for Network Delay and a Note on Topologies of Interconnection Networks. </title> <type> PhD thesis, </type> <institution> Univer sity of Illinois at Urbana-Champaign, </institution> <month> July </month> <year> 1987. </year>
Reference-contexts: It therefore conforms to the connection semantics mentioned earlier. Traffic and QoS Specification: Traffic generation on real-time channels is based on a linear bounded arrival process <ref> [8, 2] </ref> characterized by three parameters: maximum message size (M max bytes), maximum message rate (R max messages/second), and maximum burst size (B max messages). The notion of logical arrival time is used to enforce a minimum separation I min = 1 R max between messages on a real-time channel.
Reference: [9] <author> D. Ferrari and D. C. Verma. </author> <title> A scheme for real-time channel establishment in wide-area networks. </title> <journal> IEEE Journal on Se lected Areas in Communications, </journal> <volume> SAC-8(3):368-379, </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: Real-time channels Several models have been proposed for guaranteed-QoS communication in packet-switched networks [3]. While the architectural mechanisms proposed in this paper are applicable to most of the proposed models, we focus on real-time channels <ref> [9, 16] </ref>. A real-time channel is a simplex, fixed-route, virtual connection between a source and destination host, with sequenced messages and associated performance guarantees on message delivery. It therefore conforms to the connection semantics mentioned earlier.
Reference: [10] <author> S. Floyd and V. Jacobson. </author> <title> Link-sharing and resource man agement models for packet networks. </title> <journal> IEEE/ACM Trans. Net working, </journal> <volume> 3(4), </volume> <month> August </month> <year> 1995. </year>
Reference-contexts: A detailed survey of the proposed techniques can be found in [3]. Similar issues are being examined for provision of integrated services on the Internet [7, 6]. The expected QoS requirements of applications and issues involved in sharing link bandwidth across multiple classes of traffic are explored in <ref> [24, 10] </ref>. The issues involved in providing QoS support in IP-over-ATM networks are also being explored [5, 22]. The Tenet protocol suite [4] provides real-time communication on wide-area networks (WANs), but does not incorporate protocol processing overheads into their network-level resource management policies.
Reference: [11] <author> F.Travostino, E.Menze, and F.Reynolds. </author> <title> Paths: Program ming with system resources in support of real-time dis tributed applications. </title> <booktitle> In Proc. IEEE Workshop on Object Oriented Real-Time Dependable Systems, </booktitle> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: Operating system support for multimedia communication is explored in [25, 13]. However, no explicit support is provided for traffic enforcement or decoupling of protocol processing priority from application priority. The Path abstraction <ref> [11] </ref> provides a rich framework for development of real-time communication services. 7. Conclusions and future work We have proposed and evaluated a QoS-sensitive communication subsystem architecture for end hosts that supports guaranteed-QoS connections.
Reference: [12] <author> R. Govindan and D. P. Anderson. </author> <title> Scheduling and IPC mech anisms for continuous media. </title> <booktitle> In Proc. ACM Symp. on Oper. Sys. Principles, </booktitle> <pages> pages 68-80, </pages> <year> 1991. </year>
Reference-contexts: In particular, it does not provide QoS-sensitive protocol processing inside end hosts. The need for scheduling protocol processing at priority levels consistent with the communicating application was highlighted in [1] and some implementation strategies demonstrated in <ref> [12] </ref>. Processor capacity reserves in Real-Time Mach [21] have been combined with user-level protocol processing [18] for predictable protocol processing inside hosts [17]. Operating system support for multimedia communication is explored in [25, 13].
Reference: [13] <author> O. Hagsand and P. Sjodin. </author> <title> Workstation support for real-time multimedia communication. </title> <booktitle> In Winter USENIX Conference, </booktitle> <pages> pages 133-142, </pages> <month> January </month> <year> 1994. </year> <note> Second Edition. </note>
Reference-contexts: Processor capacity reserves in Real-Time Mach [21] have been combined with user-level protocol processing [18] for predictable protocol processing inside hosts [17]. Operating system support for multimedia communication is explored in <ref> [25, 13] </ref>. However, no explicit support is provided for traffic enforcement or decoupling of protocol processing priority from application priority. The Path abstraction [11] provides a rich framework for development of real-time communication services. 7.
Reference: [14] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-Kernel: An ar chitecture for implementing network protocols. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 17(1) </volume> <pages> 1-13, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Traffic isolation between channels is facilitated via per-channel traffic enforcement and interaction between the CPU and link schedulers. (a) Overall architecture (b) Protocol processing We have implemented this architecture using a modified x-kernel 3.1 <ref> [14] </ref> communication executive exercising complete control over a Motorola 68040 CPU. This configuration avoids any interference from computation or other operating system activities on the host, allowing us to focus on the communication subsystem. <p> C x includes the cost of setting up DMA transfer operations, if any. 4. Implementation We have implemented the proposed architecture using a modified x-kernel 3.1 communication executive <ref> [14] </ref> that exercises complete control over a 25 MHz Motorola 68040 CPU.
Reference: [15] <author> A. Indiresan, A. Mehra, and K. Shin. </author> <title> Design tradeoffs in implementing real-time channels on bus-based multiproces sor hosts. </title> <type> Technical Report CSE-TR-238-95, </type> <institution> University of Michigan, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: The network layer protocol is connection-oriented and provides network-level encapsulation for data transport across a point-to-point communication network. The link access layer provides link scheduling and includes the network device driver. More details on the protocol stack are provided in <ref> [15] </ref>. 4.2. Realizing a QoS-sensitive architecture Process-per-channel model: On successful establishment, a channel is allocated a channel handler, space for its message and packet queues, and the message and packet queue semaphores. If work-conserving protocol processing is desired, a channel proxy is also allocated to the channel. <p> The packet transmission time model presented in Section 3.3 requires that C x and B x be determined for a given network adapter and host architecture. An evaluation of the available networking hardware revealed significant performance-related deficiencies (poor data transfer throughput; high and unpredictable packet transmission time) <ref> [15] </ref>. These deficiences in the adapter design severely limited our ability to demonstrate the capabilities of our architecture. Given our focus on unidirectional data transfer, it suffices to ensure that transmission of a packet of size s takes L x (s) time units.
Reference: [16] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari. </author> <title> Real-time com munication in multi-hop networks. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 5(10) </volume> <pages> 1044-1056, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: While the proposed architecture is applicable to other proposals for guaranteed-QoS connections [3], we focus on real-time channels, a paradigm for guaranteed-QoS communication services in packet-switched networks <ref> [16] </ref>. The architecture features a process-per-channel model for protocol processing, coordinated by a unique channel handler created on successful channel establishment. While the service within a channel is FIFO, QoS guarantees on multiple channels are provided via appropriate CPU scheduling of channel handlers and link scheduling of packet transmissions. <p> Real-time channels Several models have been proposed for guaranteed-QoS communication in packet-switched networks [3]. While the architectural mechanisms proposed in this paper are applicable to most of the proposed models, we focus on real-time channels <ref> [9, 16] </ref>. A real-time channel is a simplex, fixed-route, virtual connection between a source and destination host, with sequenced messages and associated performance guarantees on message delivery. It therefore conforms to the connection semantics mentioned earlier. <p> This ensures that a channel does not use more resources than it reserved at the expense of other channels. The QoS on a real-time channel is specified as the desired deterministic, worst-case bound on the end-to-end delay experienced by a message. See <ref> [16] </ref> for more details. Resource Management: Admission control for real-time channels is provided by Algorithm D order [16], which uses fixed-priority scheduling for computing the worst-case delay experienced by a channel at a link. <p> The QoS on a real-time channel is specified as the desired deterministic, worst-case bound on the end-to-end delay experienced by a message. See <ref> [16] </ref> for more details. Resource Management: Admission control for real-time channels is provided by Algorithm D order [16], which uses fixed-priority scheduling for computing the worst-case delay experienced by a channel at a link. Run-time link scheduling, on the other hand, is governed by a multi-class variation of the earliest-deadline-first (EDF) policy. 2.3. <p> Link bandwidth is managed via multi-class non-preemptive EDF scheduling with link packet queues organized similar to CPU run queues. Link scheduling is non-work-conserving to avoid stressing resources at downstream hosts; in general, the link is allowed to work ahead in a limited fashion, as per the link horizon <ref> [16] </ref>. Overload protection: Per-channel traffic enforcement is performed when new messages are inserted into the message queue, and again when packets are inserted into the link packet queues.
Reference: [17] <author> C. Lee, K. Yoshida, C. Mercer, and R. Rajkumar. </author> <title> Predictable communication protocol processing in Real-Time Mach. </title> <booktitle> In Proc. of 2nd Real-Time Tech. and Appl. Symp., </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: For end-to-end guarantees, resource management within the communication subsystem must be integrated with that for applications. The proposed architecture is directly applicable if a portion of the host processing capacity can be reserved for communication-related activities <ref> [21, 17] </ref>. The proposed architectural extensions can be realized as a server with appropriate capacity reserves and/or execution priority. Our implementation is indeed such a server executing in a standalone configuration. More importantly, our approach decouples protocol processing priority from that of the application. <p> The need for scheduling protocol processing at priority levels consistent with the communicating application was highlighted in [1] and some implementation strategies demonstrated in [12]. Processor capacity reserves in Real-Time Mach [21] have been combined with user-level protocol processing [18] for predictable protocol processing inside hosts <ref> [17] </ref>. Operating system support for multimedia communication is explored in [25, 13]. However, no explicit support is provided for traffic enforcement or decoupling of protocol processing priority from application priority. The Path abstraction [11] provides a rich framework for development of real-time communication services. 7.
Reference: [18] <author> C. Maeda and B. N. Bershad. </author> <title> Protocol service decomposition for high-performance networking. </title> <booktitle> In Proc. ACM Symp. on Oper. Sys. Principles, </booktitle> <pages> pages 244-255, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: The need for scheduling protocol processing at priority levels consistent with the communicating application was highlighted in [1] and some implementation strategies demonstrated in [12]. Processor capacity reserves in Real-Time Mach [21] have been combined with user-level protocol processing <ref> [18] </ref> for predictable protocol processing inside hosts [17]. Operating system support for multimedia communication is explored in [25, 13]. However, no explicit support is provided for traffic enforcement or decoupling of protocol processing priority from application priority.
Reference: [19] <author> A. Mehra, A. Indiresan, and K. Shin. </author> <title> Resource management for real-time communication: Making theory meet practice. </title> <booktitle> In Proc. of 2nd Real-Time Tech. and Appl. Symp., </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: In addition to processing costs and implementation overheads, factors that affect admissibility include the relative bandwidths of the CPU and link and any coupling between CPU and link bandwidth allocation. In a recent paper <ref> [19] </ref>, we have studied the extent to which these factors affect admissibility in the context of real-time channels. 3. A QoS-sensitive communication architecture In the process-per-message model [23], a process or thread shepherds a message through the protocol stack. <p> The relative priority assignment for handler run queues is such that on-time real-time traffic gets the highest protocol processing priority, followed by best-effort traffic and early real-time traffic in that order. Provision of QoS guarantees necessitates bounded delays in obtaining the CPU for protocol processing. As shown in <ref> [19] </ref>, immediate preemption of an executing lower-priority handler results in expensive context switches and cache misses; channel admissibility is significantly improved if preemption overheads are amortized over the processing of several packets. <p> In addition, it must account for the overlap between CPU processing and link transmission, and hence the relative bandwidths of the CPU and link. In a companion paper <ref> [19] </ref>, we presented extensions to D order to account for the above-mentioned factors. Table 1 lists the important system parameters used in the extensions. 3.3. <p> Table 1 lists the important system parameters used in the extensions. 3.3. Determination of P, S, and L x P and S determine the granularity at which the CPU and link, respectively, are multiplexed between channels, and thus determine channel admissibility at the host <ref> [19] </ref>. Selection of P is governed by the architectural characteristics of the host CPU (Table 1). For a given host architecture, P is selected such that channel admissibility is maximized while delivering reasonable data transfer throughput. S is selected either using end-to-end transport protocol performance or host/adapter design characteristics. <p> As demonstrated in <ref> [19] </ref>, option 1 gives the best performance in terms of throughput and sensitivity of channel admissibility to P and S; we focus on option 1 below. <p> Table 2 summarizes the available policies and options. 4.3. System parameterization Table 1 lists the system parameters for our implementation. Selection of P and S is based on the tradeoff between available resources and channel admissibility <ref> [19] </ref>. The packet transmission time model presented in Section 3.3 requires that C x and B x be determined for a given network adapter and host architecture. An evaluation of the available networking hardware revealed significant performance-related deficiencies (poor data transfer throughput; high and unpredictable packet transmission time) [15]. <p> This can be achieved by emulating a network adapter by consuming L x (s) time units for each packet being transmitted. We have implemented such a device emulator, the null device <ref> [19] </ref>, that can be configured to emulate a desired packet transmission time. We have used it to study a variety of tradeoffs,such as the effects of the relationship between CPU and link processing bandwidth, in the context of QoS-sensitive protocol processing [19]. We experimentally determined C x to be 40s. <p> have implemented such a device emulator, the null device <ref> [19] </ref>, that can be configured to emulate a desired packet transmission time. We have used it to study a variety of tradeoffs,such as the effects of the relationship between CPU and link processing bandwidth, in the context of QoS-sensitive protocol processing [19]. We experimentally determined C x to be 40s. For the experiments we select min (B l ; B x ) to correspond to a link (and data transfer) speed of 50 ns per byte, for an effective packet transmission bandwidth (for 4KB packets) of 16 MB/s. 5.
Reference: [20] <author> A. Mehra and K. Shin. </author> <title> QoS-sensitive protocol processing in shared-memory multiprocessor multimedia servers. </title> <booktitle> In Proc. of 3rd IEEE Workshop on Arch. and Impl. of High-Perf. Comm. Subsystems, </booktitle> <pages> pages 163-169, </pages> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: For true end-to-end QoS guarantees, scheduling of channel handlers must be integrated with application scheduling. We are currently implementing the proposed architecture in OSF Mach-RT, a microkernel-based uniprocessor real-time operating system. Finally, we have extended this architecture to shared-memory multiprocessor multimedia servers <ref> [20] </ref>.
Reference: [21] <author> C. W. Mercer, S. Savage, and H. Tokuda. </author> <title> Processor capacity reserves for multimedia operating systems. </title> <booktitle> In Proc. of IEEE Intl. Conf. on Multimedia Comp. and Systems, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: For end-to-end guarantees, resource management within the communication subsystem must be integrated with that for applications. The proposed architecture is directly applicable if a portion of the host processing capacity can be reserved for communication-related activities <ref> [21, 17] </ref>. The proposed architectural extensions can be realized as a server with appropriate capacity reserves and/or execution priority. Our implementation is indeed such a server executing in a standalone configuration. More importantly, our approach decouples protocol processing priority from that of the application. <p> In particular, it does not provide QoS-sensitive protocol processing inside end hosts. The need for scheduling protocol processing at priority levels consistent with the communicating application was highlighted in [1] and some implementation strategies demonstrated in [12]. Processor capacity reserves in Real-Time Mach <ref> [21] </ref> have been combined with user-level protocol processing [18] for predictable protocol processing inside hosts [17]. Operating system support for multimedia communication is explored in [25, 13]. However, no explicit support is provided for traffic enforcement or decoupling of protocol processing priority from application priority.
Reference: [22] <author> M. Perez, F. Liaw, A. Mankin, E. Hoffman, D. Grossman, and A. Malis. </author> <title> ATM signaling support for IP over ATM. Request for Comments RFC 1755, </title> <month> February </month> <year> 1995. </year>
Reference-contexts: The expected QoS requirements of applications and issues involved in sharing link bandwidth across multiple classes of traffic are explored in [24, 10]. The issues involved in providing QoS support in IP-over-ATM networks are also being explored <ref> [5, 22] </ref>. The Tenet protocol suite [4] provides real-time communication on wide-area networks (WANs), but does not incorporate protocol processing overheads into their network-level resource management policies. In particular, it does not provide QoS-sensitive protocol processing inside end hosts.
Reference: [23] <author> D. C. Schmidt and T. Suda. </author> <title> Transport system architecture ser vices for high-performance communications systems. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 11(4):489 506, </volume> <month> May </month> <year> 1993. </year>
Reference-contexts: In a recent paper [19], we have studied the extent to which these factors affect admissibility in the context of real-time channels. 3. A QoS-sensitive communication architecture In the process-per-message model <ref> [23] </ref>, a process or thread shepherds a message through the protocol stack. Besides eliminating extraneous context switches encountered in the process-per-protocol model [23], it also facilitates protocol processing to be scheduled according to a variety of policies, as opposed to the software-interrupt level processing in BSD Unix. <p> A QoS-sensitive communication architecture In the process-per-message model <ref> [23] </ref>, a process or thread shepherds a message through the protocol stack. Besides eliminating extraneous context switches encountered in the process-per-protocol model [23], it also facilitates protocol processing to be scheduled according to a variety of policies, as opposed to the software-interrupt level processing in BSD Unix. However, the process-per-message model introduces additional complexity for supporting QoS guarantees. <p> Since QoS guarantees are specified on a per-channel basis, it suffices to have a single thread coordinate access to resources for all messages on a given channel. We employ a process-per-channel model, which is a QoS-sensitive extension of the process-per-connection model <ref> [23] </ref>. In the process-per-channel model, protocol processing on each channel is coordinated by a unique channel handler, a lightweight thread created on successful establishment of the channel.
Reference: [24] <author> S. Shenker, D. Clark, and L. Zhang. </author> <title> A scheduling service model and a scheduling architecture for an integrated services packet network. </title> <note> Working Paper, August 1993. Xerox PARC. </note>
Reference-contexts: A detailed survey of the proposed techniques can be found in [3]. Similar issues are being examined for provision of integrated services on the Internet [7, 6]. The expected QoS requirements of applications and issues involved in sharing link bandwidth across multiple classes of traffic are explored in <ref> [24, 10] </ref>. The issues involved in providing QoS support in IP-over-ATM networks are also being explored [5, 22]. The Tenet protocol suite [4] provides real-time communication on wide-area networks (WANs), but does not incorporate protocol processing overheads into their network-level resource management policies.
Reference: [25] <author> C. Vogt, R. G. Herrtwich, and R. Nagarajan. HeiRAT: </author> <title> The Heidelberg resource administration technique design philos ophy and goals. </title> <institution> Research Report 43.9213, IBM European Networking Center, </institution> <address> Heidelberg, Germany, </address> <year> 1992. </year>
Reference-contexts: Processor capacity reserves in Real-Time Mach [21] have been combined with user-level protocol processing [18] for predictable protocol processing inside hosts [17]. Operating system support for multimedia communication is explored in <ref> [25, 13] </ref>. However, no explicit support is provided for traffic enforcement or decoupling of protocol processing priority from application priority. The Path abstraction [11] provides a rich framework for development of real-time communication services. 7.
References-found: 25

