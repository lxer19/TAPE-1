URL: http://ptolemy.eecs.berkeley.edu/papers/interfaceSynthesis/interfaceSynthesis.ps.gz
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/interfaceSynthesis/
Root-URL: 
Email: pino,cameron,eal-@EECS.Berkeley.EDU  
Title: INTERFACE SYNTHESIS IN HETEROGENEOUS SYSTEM-LEVEL DSP DESIGN TOOLS  
Author: Jos Luis Pino, Michael C. Williamson and Edward A. Lee 
Web: http://ptolemy.eecs.berkeley.edu/~-pino,cameron,eal  
Address: Berkeley, CA 94720  
Affiliation: Department of Electrical Engineering and Computer Science University of California  
Abstract: In this paper we describe a framework that constructs interfaces between simulation tools and real-time prototyping hardware in a high-level DSP synthesis environment. A goal of this work is to abstract the concept of the interface so that customized links are not required between each simulation and hardware engine. To support a new engine, the DSP system designer must define two pairs of communication primitives between the new tool and host workstation. The interface construction mechanism provides incremental compilation of subsystems in a system specification into the high-level DSP synthesis environment. We illustrate this framework with practical examples that have been constructed in Ptolemy. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. A. Lee and D. G. Messerschmitt, </author> <title> Synchronous data flow, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 75, no. 9, </volume> <pages> pp. 1235-1245, </pages> <year> 1987. </year>
Reference: [2] <author> J. Buck, S. Ha, E. A. Lee, and D. G. Messerschmitt, Ptolemy: </author> <title> A framework for simulating and prototyping heterogeneous systems, International Journal of Computer S i m u l a t i o n , s p e c i a l i s s u e o n S i m u l a t i o n S o f t w a r e Development, </title> <journal> vol. </journal> <volume> 4, </volume> <pages> pp. 155-182, </pages> <year> 1994. </year> <note> http://ptolemy.eecs.berkeley.edu/papers/JEurSim </note>
Reference-contexts: 1. INTRODUCTION In this paper we describe a framework for automatic interface construction between prototyping and simulation engines (hardware or software) in high-level DSP synthesis tools. The techniques described here have been tested using the synchronous dataow (SDF)[1] model of computation in Ptolemy <ref> [2] </ref> and can be extended to other models of computation. The framework described in this paper provides incremental compilation, interfaces to foreign simulators, and interfaces between code generation domains. These interfaces serve a similar purpose to discrete-event simulation backplanes found elsewhere [3, 4]. <p> One of its strengths is that it exposes parallelism by expressing only the actual data dependencies that exist in an algorithm. Applications are specified by a dataow graph in which the nodes represent computational actors, and data tokens ow between them along the arcs of the graph. Ptolemy <ref> [2] </ref> is a framework that supports dataow programming (as well as other computational models, such as discrete-event). There are several forms of dataow defined in Ptolemy. In synchronous dataow (SDF) [4], the number of tokens produced or consumed in one firing of an actor is constant.
Reference: [3] <author> D. Becker, R. K. Singh, and S. G. </author> <title> Tell, An engineering environm ent f or ha rdware/soft ware c o-simulat ion., </title> <booktitle> Proceedings of the 29th ACM/IEEE Design Automation Conference, </booktitle> <address> Anaheim, CA, USA, </address> <pages> pp. 129-134, </pages> <year> 1992. </year>
Reference-contexts: The framework described in this paper provides incremental compilation, interfaces to foreign simulators, and interfaces between code generation domains. These interfaces serve a similar purpose to discrete-event simulation backplanes found elsewhere <ref> [3, 4] </ref>. However, the interface mechanism that we are using is more restrictive. In our model, the application specification semantics are limited to a form of dataow known as SDF. Through use, SDF has proven to be an appropriate model for describing multirate signal processing applications.
Reference: [4] <author> R. K. Gupta, C. N. Coelho, Jr., and G. De Micheli, </author> <title> Synthesis and simulation of digital systems containing interacting hardware and software components, </title> <booktitle> Proceedings of the 29th ACM/IEEE Design Automation Conference, </booktitle> <address> Anaheim, CA, USA, </address> <pages> pp. 225-30, </pages> <year> 1992. </year>
Reference-contexts: The framework described in this paper provides incremental compilation, interfaces to foreign simulators, and interfaces between code generation domains. These interfaces serve a similar purpose to discrete-event simulation backplanes found elsewhere <ref> [3, 4] </ref>. However, the interface mechanism that we are using is more restrictive. In our model, the application specification semantics are limited to a form of dataow known as SDF. Through use, SDF has proven to be an appropriate model for describing multirate signal processing applications. <p> Ptolemy [2] is a framework that supports dataow programming (as well as other computational models, such as discrete-event). There are several forms of dataow defined in Ptolemy. In synchronous dataow (SDF) <ref> [4] </ref>, the number of tokens produced or consumed in one firing of an actor is constant. This property makes it possible to determine execution order (schedule) and memory requirements at compile time.
Reference: [5] <author> M. Pankert, S. Ritz, and H. Meyr, </author> <title> Integration of digital signal processing hardware into a system level simulation environment, </title> <booktitle> Proceedings of the European Simulation Multiconference, </booktitle> <address> York, U.K., </address> <pages> pp. 147-151, </pages> <year> 1992. </year>
Reference: [6] <author> J. L. Pino, T. M. Parks, and E. A. Lee, </author> <title> Automatic code generation for heterogeneous multiprocessors, </title> <booktitle> Proceedings of the IEEE International Conference on Acoustics, Speech, and Signal Processing, Adelaide, South Australia, </booktitle> <volume> vol. 2, </volume> <pages> pp. 445-448, </pages> <year> 1994. </year> <note> http://ptolemy.eecs.berkeley.edu/papers/autoMultiCodeGen </note>
Reference-contexts: To enable the framework to construct interfaces to a new tool (either hardware or software), C communication actors must be defined. In this section, we detail the communication actors needed to construct the interface between different code generation domains and the incremental compilation interface. 3.1 Communications Actors As in <ref> [6] </ref>, we use send and receive communication actors to construct the interface among the various tools.
Reference: [7] <author> J . Ree kie and M. </author> <title> Meyer , The h ost-en gine so ftware a r c h i t e c t u r e f o r p a r al l el d i g i t a l s i g n a l p r o c e s s i n g , Proceedings of the Australian Workshop on Parallel and Real-Time Systems, </title> <address> Melbourne, Australia, </address> <year> 1994. </year>
Reference: [8] <editor> J . L . P i n o , S . S . B h a t t a c h a r y y a , a n d E . A . L e e , A Hierarchical Multiprocessor Scheduling Framework for Synchronous Dataflow Graphs, </editor> <address> UC Berkeley UCB/ERL M95/36, </address> <year> 1995. </year> <note> http://ptolemy.eecs.berkeley.edu/papers/erl-95-36 </note>
Reference-contexts: A fundamental problem is that dataow systems cannot always be incrementally compiled. The problem lies in the fact that dataow systems lack the composition property. Thus subsystems of dataow actors in an application specification do not necessarily have the same semantics as an individual actor (see <ref> [8] </ref> for more details). This problem only arises when incrementally compiling a code generation subsystem into a monolithic actor. For the first type of interface, we avoid introducing artificial boundaries between the various SDF code generation domains by making use of multiprocessor SDF schedulers. 2.
Reference: [9] <author> J. Buck, S. Ha, E. A. Lee, and D. G. Messerschmitt, </author> <title> Multirate signal processing in Ptolemy, </title> <booktitle> Proceedings of the IEEE International Conference on Acoustics, Speech, and Signal Processing, Toronto, Ont., Canada, </booktitle> <volume> vol. 2, </volume> <pages> pp. 1245-1248, </pages> <year> 1991. </year>
Reference-contexts: Thus these systems do not have the overhead of runtime scheduling (in contrast to dynamic dataow) and have very predictable runtime behavior. The production/ consumption property on the arcs also provides a natural representation of multirate signal processing actors <ref> [9] </ref>. 3. INTERFACE CONSTRUCTION The interface between the various software and hardware engines is done through the C programming language. To enable the framework to construct interfaces to a new tool (either hardware or software), C communication actors must be defined.
Reference: [10] <author> J. L. Pino, S. Ha, E. A. Lee, and J. T. Buck, </author> <title> Software synthesis for DSP using Ptolemy, </title> <journal> Journal of VLSI Signal Processing, </journal> <volume> vol. 9, no. </volume> <pages> 1-2, pp. 7-21, </pages> <year> 1995. </year> <note> http://ptolemy.eecs.berkeley.edu/papers/jvsp_codegen </note>
Reference-contexts: Then we detail how we use the same communication primitives to allow us to incorporate these external engines into high-level DSP synthesis tools. To build the various interfaces, we use send and receive actors as has previously been described for multiprocessor SDF code generation in <ref> [10] </ref>. These actors provide the synchronization between the prototyping and simulation engines. This is accomplished by having blocking reads and writes over the communication channels.
Reference: [11] <institution> IEEE Standard VHDL Language Reference Manual, IEEE ANSI/IEEE Std 1076-1993, </institution> <year> 1994. </year>
Reference-contexts: Each token may have a unique variable identifier, or variable names may be shared assuming that no token variable is overwritten until all references to that variable have been completed. The ANSI/IEEE Std 1076-1993 version of the VHDL language <ref> [11] </ref> provides for the use of foreign subprograms or architectures within a VHDL description. Such foreign subprogram calls or component architectures may be used, where supported in C, to realize the send and receive actors in the dataow graph which handle interprocess communication through CGC.
Reference: [12] <editor> VSS Expert Interfaces V3.2b, Synopsys, </editor> <publisher> Inc., </publisher> <address> 700 East Middlefield Rd., Mountain View, CA 94043 Document Order Number 1US01-10062, </address> <year> 1995. </year> <title> The subsystem is run on a DSP card installed in the workstation and the Synopsys VSS Expert VHDL simulator. The top-level description is run using the SDF simulation domain. Analysis S-56X Top level application specification Synthesis VHDLC </title>
Reference-contexts: In one vendor's implementation of VHDL simulation, the VSS Expert package from Synopsys, the use of foreign component architectures is supported. The CLanguage Interface (CLI) of VSS Expert <ref> [12] </ref> supports VHDL components which are entirely implemented in C. Within such CLI components, calls to communication routines realize the send and receive actions between the VHDL-simulated subsystem and the remaining code-generated subsystem.
References-found: 12

