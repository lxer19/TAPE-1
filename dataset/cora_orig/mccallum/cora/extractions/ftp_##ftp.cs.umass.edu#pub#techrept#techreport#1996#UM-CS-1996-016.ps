URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1996/UM-CS-1996-016.ps
Refering-URL: http://www.cs.umass.edu/~potter/LC/spring96.doc.html
Root-URL: 
Email: nhg@research.att.com  fkrithi,shang@cs.umass.edu  oshmu@cs.technion.ac.il  
Title: Accessing Extra Database Information: Concurrency Control and Correctness  
Author: Narain Gehani Krithi Ramamritham Jayavel Shanmugasundaram Oded Shmueli 
Date: February 1996  
Affiliation: AT&T Bell Laboratories  University of Massachusetts  Technion Israel Institute of Technology  
Abstract: Traditional concurrency control theory views transactions in terms of read and write operations on database items. Thus, the effects of accessing non-database entities, such as the system clock or the log, on a transaction's behavior are not explicitly considered. In this paper, we are motivated by a desire to include accesses to such extra-data items within the purview of transaction and database correctness. We provide a formal treatment of con-currency control when transactions are allowed access to extra data by discussing the inter-transaction dependencies that are induced when transactions access extra data. We also develop a spectrum of correctness criteria that apply when such transactions are considered. Furthermore, we show that allowing databases to view data which has been traditionally kept hidden from users increases the database functionality and in many cases can lead to improved performance. fl partially supported by the National Science Foundation under grant IRI-9314376.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. A. Bernstein, V. Hadzilacos and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: Further, we have to ensure that the C relationships induced between transactions due to the axioms in K form an acyclic relation. This correctness criterion assures view serializability <ref> [1] </ref> (though not necessarily conflict serializability) of the conventional transactions which are equivalent to the transactions which access extra data.
Reference: [2] <author> P. K. Chrysanthis and K. Ramamritham. </author> <title> A Formalism for Extended Transaction Models. </title> <booktitle> In Proceedings of the seventeenth International Conference on Very Large Databases, </booktitle> <pages> pages 103-112, </pages> <year> 1991. </year>
Reference-contexts: Thus new mechanisms for concurrency control should be devised to deal with such properties of extra data. These issues are treated in detail in subsequent sections. 3 Preliminaries and Definitions In this section we introduce a simple formalism based on the ACTA transaction framework <ref> [2] </ref>. We also define some of the terms used in the rest of the paper and give formal definitions of certain correctness properties involved when transactions access extra data. <p> Suppose t j has done a write on an object and then t i does a read on the same object. Then, (t j C t i ). Also, if we desire failure atomicity, then if t j aborts then t i must also abort. Thus, abort dependencies <ref> [2] </ref> between transactions may also form due to conflicting operations. However, when we extend the notion of serializability to the extended database, we have to take into account the fact that the execution of a transaction may not be atomic over the extended database.
Reference: [3] <author> D. Georgakopoulos, M. Rusinkiewicz and A. Sheth. </author> <title> On Serializability of Multidatabase Transactions through Forced Local Conflicts. </title> <booktitle> In Proceedings of the IEEE Seventh International Conference on Data Engineering, </booktitle> <year> 1991. </year>
Reference-contexts: The queues allow the transaction components to synchronize their activities so as to achieve the desired functionality. 5.1.2 Serializability in Multi-databases Another example of extra-data independent transactions occurs in the multi-database con-currency control scheme proposed in <ref> [3] </ref>. Here, to ensure the serializability of transactions that access multiple (autonomous) database sites, the following scheme is used. Every site has a special "ticket" that all global transactions that visit the database at that site are expected to read and write.
Reference: [4] <author> N. Gehani and O. Shmueli. </author> <title> The LOG as Part of the Database. </title> <institution> Bell Laboratories Technical Memorandum, </institution> <year> 1992. </year>
Reference-contexts: For concreteness, we consider the database log as an example of extra data which can be accessed by transactions in the course of their execution <ref> [4] </ref>. Both committing and aborting transactions write log records. Transactions can also read the log to perform queries. We require serializability of all the data items in the extended database, in this case, the database plus the log.
Reference: [5] <author> N. Gehani, K. Ramamritham, J. Shanmugasundaram and O. Shmueli. </author> <title> Accessing Extra Database Information: Concurrency Control and Correctness. </title> <type> Technical Report 1996-016, </type> <institution> University of Massachusetts, Amherst, Massachusetts, </institution> <year> 1996. </year>
Reference-contexts: In other cases, the extra data item may also be modified by entities outside the transaction management system. Thus, it is possible that certain operations on extra data items are committed even when the invoking transaction aborts. This notion is defined formally in <ref> [5] </ref>. 3.4 Serializability In traditional databases, serializability and, in particular, conflict serializability, is the well-accepted criterion for correctness. We first define serializability formally since it forms the basis for the correctness notions discussed here. <p> These proclamation data items can be treated as extra data items with the required 13 correctness criterion being the extra data independence of transactions. Further details of this example appear in <ref> [5] </ref>. 5.2 Serializable Accesses to the Extended Database Here we remove the extra-data independence requirement imposed on transactions, but require that the transactions be serializable with respect to the extended database. <p> The proof of the fact that the liveness of transactions is indeed ensured in this case appears in <ref> [5] </ref>. When other extra-data objects are accessed by transactions and serializability remains the correctness criterion, the semantics of these other objects should be specified just as we dealt with the log and then we must show that safety and liveness properties of transactions are kept intact. <p> We require the acyclicity of the relation involving these C relationships on the committed operations as our correctness criterion. Liveness of transactions with this correctness criterion can be shown <ref> [5] </ref>. 5.4.2 The System Clock Suppose transaction t i accesses the system maintained current time. A subsequent update of the current time by the system clock will not affect t i if degree-2 isolation is in effect.
Reference: [6] <author> J.N. Gray and A. Reuter. </author> <title> Transaction Processing: Techniques and Concepts. </title> <address> Morgan-Kaufman, </address> <year> 1992. </year>
Reference-contexts: Since relaxing correctness requirements is one way to achieve this, serious consideration must be given to it. Let us now consider some weakened isolation requirements <ref> [6] </ref> that have been suggested and adopted in practice for transactions accessing the database. In the context of read/write objects, degree-2 isolation ignores conflicts resulting from a read followed by a write. Such a requirement leads to lack of repeatable reads.
Reference: [7] <author> H.V. Jagadish and O. Shmueli. </author> <title> A Proclamation-Based Model for Cooperating Transactions. </title> <booktitle> In Proceedings of the eighteenth International Conference on Very Large Databases, </booktitle> <pages> pages 265-276, </pages> <year> 1992. </year>
Reference-contexts: However, suppose t 0 gives t (or any other transaction) an indication of what the possible values it might write are, then t might be able to proceed with its computations using this information, thus increasing the degree of concurrency. This is the idea underlying proclamations <ref> [7] </ref>. t 0 proclaims the set of possible values that may be written so that transactions such as t may be able to proceed without waiting. These proclamation data items can be treated as extra data items with the required 13 correctness criterion being the extra data independence of transactions.
Reference: [8] <author> H. F. Korth and G. Speegle. </author> <title> Formal Models of Correctness without Serializability. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 379-386, </pages> <year> 1988. </year>
Reference-contexts: One extends and elaborates the structure of data items, viewing them as abstract data type objects, thus exploiting the semantics of the operations for better concurrency control. Another relaxes the serializability correctness criterion by imposing instead specific constraints on acceptable schedules <ref> [8] </ref>. The work reported herein bears resemblance to these extensions 19 in that, technically, we also view extra data as objects with arbitrary operations defined on them and impose some restrictions on acceptable schedules.
Reference: [9] <author> C. Mohan and D. Haderle. </author> <title> Algorithms for Flexible Space Management in Transaction Systems Supporting Fine-Granularity Locking. </title> <booktitle> In Proc. 4th International Conference on Extending Database Technology, </booktitle> <pages> pages 1 - 13, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: While the failure recovery semantics of extra data items accessed by transactions are usually comparable to that of database items (for example, updates to the page space map tables, which are extra data items, are normally logged <ref> [9] </ref>, see Section 5.4.3), the recovery of extra data items in the event of transaction aborts may 1 H (ob) = p 1 ffi p 2 ffi ::: ffi p n ; indicates both the order of execution of the operations, (p i precedes p i+1 ), as well as the <p> This can be achieved by examining the wait-for-graph. Under degree-1 isolation, a transaction will be allowed to access the wait-for-graph without forming any additional C relationships. 5.4.3 Page Space Map Tables Page space map tables <ref> [9] </ref> are commonly used in databases to indicate the location of free space in pages. These tables are normally accessed by transactions, though they are not considered as database items and brought within the scope of correctness and concurrency control. <p> However, in order to provide for transaction roll back (in case of transaction abort), we may need to specify that a transaction can reclaim the space it freed (in the event of it aborting) so that its changes can be undone easily <ref> [9] </ref>. Thus, we require that if a transaction t i uses up the space freed by transaction t j , then t i should abort whenever t j aborts (so that the space freed by t j is now free). <p> In normal implementations of the page space map tables, a transaction t j can use the space freed by a transaction t i only if t i has committed <ref> [9] </ref>. Thus, this induced abort dependency is taken care of and only serializability over accesses to the database items need be ensured. 6 Discussion Recently, there have been many extensions to the classical work on concurrency control.
Reference: [10] <author> Ramamritham, K. and Chrysanthis, P. K. </author> <title> "A Taxonomy of Correctness Criteria in Database Applications", </title> <booktitle> VLDB (Very Large Data Bases) Journal, </booktitle> <volume> Vol. 5, No. 1, </volume> <month> Jan, </month> <year> 1996, </year> <pages> pp. 85-97. </pages>
Reference-contexts: The definition of serializability remains the same, where acyclicity is ensured with respect to this C relation. 6 As mentioned earlier, an application may desire correctness properties that are weaker than serializability when an extended database is used. A discussion of such correctness properties can be found in <ref> [10] </ref>. For the purposes of this paper, given an extended database, we can consider (1) serial-izability of accesses to data items in the extended database (2) serializability of accesses to data items in the database.
Reference: [11] <author> K. Ramamritham. </author> <title> Real-Time Databases. </title> <journal> International Journal of Distributed and Parallel Databases, </journal> <volume> Vol. 1, No 2, </volume> <year> 1993, </year> <pages> pp. </pages> <address> 199- 226. </address>
Reference-contexts: However, this criterion is weaker than serializability in the sense that we allow for non-repeatable reads to the clock. Another example in which clocks are accessed as extra data items occurs in the context of real-time databases <ref> [11] </ref>. In this case, transactions have a correctness requirement which is stronger than traditional serializability in the sense that we have the additional requirement that if a transaction t i commits, it should commit before its deadline, deadline (t i ).
Reference: [12] <author> M. R. Stonebraker. </author> <title> Hypothetical Data Bases as Views. </title> <booktitle> Proc. ACM-SIGMOD 1981 Int'l Conf. on Management of Data, </booktitle> <pages> pp 224-229, </pages> <month> May </month> <year> 1981. </year> <month> 21 </month>
References-found: 12

