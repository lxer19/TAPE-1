URL: http://www.cs.utexas.edu/users/plaxton/ps/1996/algorithmica.ps
Refering-URL: http://www.cs.utexas.edu/users/plaxton/html/abc.html
Root-URL: 
Title: Proportionate Progress: A Notion of Fairness in Resource Allocation  
Author: S. K. Baruah N. K. Cohen C. G. Plaxton D. A. Varvel 
Keyword: Euclid's algorithm, fairness, network flow, periodic scheduling, re source allocation.  
Note: This research was supported by NSF Research Initiation Award CCR-9111591, and Texas Advanced Research Program (TARP) Award #003658480. Contact author: Prof. Greg Plaxton,  
Address: Austin  Austin, Taylor Hall 2.124, Austin, Texas  
Affiliation: Department of Computer Science University of Texas at  Department of Computer Science, University of Texas at  
Email: Email: plaxton@cs.utexas.edu.  
Phone: 78712-1188. Telephone: (512) 471-9751. FAX: (512) 471-8885.  
Date: September 5, 1994  
Abstract: Given a set of n tasks and m resources, where each task x has a rational weight x:w = x:e=x:p; 0 &lt; x:w &lt; 1, a periodic schedule is one that allocates a resource to a task x for exactly x:e time units in each interval [x:p k; x:p (k + 1)) for all k 2 N. We define a notion of proportionate progress, called P-fairness, and use it to design an efficient algorithm which solves the periodic scheduling problem. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. K. Baruah, R. R. Howell, and L. E. Rosier. </author> <title> Algorithms and complexity concerning the preemptive scheduling of periodic, real-time tasks on one processor. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 2 </volume> <pages> 301-324, </pages> <year> 1990. </year>
Reference-contexts: The decision problem has an efficient solution. Clearly systems in which P n1 cannot be scheduled. If resource sharing is allowed, those in which P n1 scheduled by the resource sharing algorithm mentioned above. Baruah, Howell, and Rosier <ref> [1] </ref> used this fact, the network reduction of Horn [7], and the Ford-Fulkerson algorithm [4] to show that there are solutions to the periodic scheduling problem. Thus, the decision problem for such a periodic task system reduces to checking that P n1 x=0 x:w m.
Reference: [2] <author> M. Blum, R. W. Floyd, V. R. Pratt, R. L. Rivest, and R. E. Tarjan. </author> <title> Time bounds for selection. </title> <journal> JCSS, </journal> <volume> 7 </volume> <pages> 448-461, </pages> <year> 1973. </year>
Reference-contexts: A single call to subroutine Compare can be used to determine the relative priority of any two contending tasks. Thus, by applying subroutine Compare within any optimal comparison-based selection algorithm (e.g., <ref> [2] </ref>), we can obtain an implementation of Algorithm PF that makes O (n) calls to subroutine Compare to decide which m-subset of the n tasks to schedule in any given slot. This simple approach yields a polynomial-time scheduling algorithm, but unfortunately does not yield the desired linear-time bound.
Reference: [3] <author> X. Deng. </author> <title> Mathematical Programming: Complexity and Applications. </title> <type> PhD thesis, </type> <institution> Department of Operations Research, Stanford University, Stanford, </institution> <address> CA, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: as to various algorithms that have been proposed for 2-ILP, that is, integer linear programming with two variables [6, 8, 13, 14]. (ILP is NP-complete in general, but can be solved in polynomial-time for any fixed number of variables [9].) Deng has extensively studied the relationship between GCD and 2-ILP <ref> [3] </ref>. Our P-fair scheduling algorithm produces schedules with a large number of preemptions. It would be interesting to investigate algorithms for solving the periodic scheduling problem which minimize the number of preemptions. 8 Acknowledgments We would like to thank A. K. Mok and C. L.
Reference: [4] <author> L. R. Ford, Jr. and D. R. Fulkerson. </author> <title> Flows in Networks. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1962. </year>
Reference-contexts: Clearly systems in which P n1 cannot be scheduled. If resource sharing is allowed, those in which P n1 scheduled by the resource sharing algorithm mentioned above. Baruah, Howell, and Rosier [1] used this fact, the network reduction of Horn [7], and the Ford-Fulkerson algorithm <ref> [4] </ref> to show that there are solutions to the periodic scheduling problem. Thus, the decision problem for such a periodic task system reduces to checking that P n1 x=0 x:w m. A method similar to that of Baruah, Howell, and Rosier will be used in Section 3. <p> Proof of Theorem 1: Since all edges of the graph have integral capacity, if there is a fractional flow of size m L in the graph then there is an integral flow of that size <ref> [4] </ref>. It remains to be shown that such a fractional flow exists.
Reference: [5] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <publisher> Freeman, </publisher> <address> NY, </address> <year> 1979. </year>
Reference-contexts: Many sets of constraints result in an intractable decision problem <ref> [5] </ref>. The periodic scheduling problem was first discussed by Liu in 1969 [11].
Reference: [6] <author> D. S. Hirschberg and C. K. Wong. </author> <title> A polynomial-time algorithm for the knapsack problem with two variables. </title> <journal> JACM, </journal> <volume> 23 </volume> <pages> 147-154, </pages> <year> 1976. </year>
Reference-contexts: The Compare subroutine appears to be closely related to Euclid's GCD algorithm, as 23 well as to various algorithms that have been proposed for 2-ILP, that is, integer linear programming with two variables <ref> [6, 8, 13, 14] </ref>. (ILP is NP-complete in general, but can be solved in polynomial-time for any fixed number of variables [9].) Deng has extensively studied the relationship between GCD and 2-ILP [3]. Our P-fair scheduling algorithm produces schedules with a large number of preemptions.
Reference: [7] <author> W. A. Horn. </author> <title> Some simple scheduling algorithms. </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> 21 </volume> <pages> 177-185, </pages> <year> 1974. </year>
Reference-contexts: The decision problem has an efficient solution. Clearly systems in which P n1 cannot be scheduled. If resource sharing is allowed, those in which P n1 scheduled by the resource sharing algorithm mentioned above. Baruah, Howell, and Rosier [1] used this fact, the network reduction of Horn <ref> [7] </ref>, and the Ford-Fulkerson algorithm [4] to show that there are solutions to the periodic scheduling problem. Thus, the decision problem for such a periodic task system reduces to checking that P n1 x=0 x:w m.
Reference: [8] <author> R. Kannan. </author> <title> A polynomial algorithm for the two-variable integer programming problem. </title> <journal> JACM, </journal> <volume> 27 </volume> <pages> 118-122, </pages> <year> 1980. </year>
Reference-contexts: The Compare subroutine appears to be closely related to Euclid's GCD algorithm, as 23 well as to various algorithms that have been proposed for 2-ILP, that is, integer linear programming with two variables <ref> [6, 8, 13, 14] </ref>. (ILP is NP-complete in general, but can be solved in polynomial-time for any fixed number of variables [9].) Deng has extensively studied the relationship between GCD and 2-ILP [3]. Our P-fair scheduling algorithm produces schedules with a large number of preemptions.
Reference: [9] <author> H. W. Lenstra, Jr. </author> <title> Integer programming with a fixed number of variables. </title> <journal> Mathematics of Operations Research, </journal> <volume> 8 </volume> <pages> 538-548, </pages> <year> 1983. </year> <month> 24 </month>
Reference-contexts: to be closely related to Euclid's GCD algorithm, as 23 well as to various algorithms that have been proposed for 2-ILP, that is, integer linear programming with two variables [6, 8, 13, 14]. (ILP is NP-complete in general, but can be solved in polynomial-time for any fixed number of variables <ref> [9] </ref>.) Deng has extensively studied the relationship between GCD and 2-ILP [3]. Our P-fair scheduling algorithm produces schedules with a large number of preemptions.
Reference: [10] <author> J. Y.-T. Leung. </author> <title> A new algorithm for scheduling periodic, real-time tasks. </title> <journal> Algorithmica, </journal> <volume> 4 </volume> <pages> 209-219, </pages> <year> 1989. </year>
Reference-contexts: Here, a task x must receive exactly x:e units of the resource in the time interval [x:s + x:p k; x:s + x:p k + x:d) for all k 2 N. Leung's application of the Least Slack algorithm to this problem represents a recent improvement on Earliest Deadline <ref> [10] </ref>, for the case where scheduling decisions are not required to occur at integer time instants. Leung was able to show that Least Slack schedules all instances that can be scheduled by Earliest Deadline, as well as some instances that Earliest Deadline cannot schedule.
Reference: [11] <author> C. L. Liu. </author> <title> Scheduling algorithms for multiprocessors in a hard-real-time environment. JPL Space Programs Summary 37-60, vol. II, </title> <institution> Jet Propulsion Laboratory, California Institute of Technology, Pasadena, </institution> <address> CA, </address> <pages> pages 28-37, </pages> <month> November </month> <year> 1969. </year>
Reference-contexts: Many sets of constraints result in an intractable decision problem [5]. The periodic scheduling problem was first discussed by Liu in 1969 <ref> [11] </ref>. <p> None of them extends directly to multiple resources. As Liu pointed out, "the simple fact that a task can use only one [resource] even when several [resources] are free at the same time adds a surprising amount of difficulty" to the scheduling of multiple resources <ref> [11] </ref>. The decision problem has an efficient solution. Clearly systems in which P n1 cannot be scheduled. If resource sharing is allowed, those in which P n1 scheduled by the resource sharing algorithm mentioned above.
Reference: [12] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard-real-time environment. </title> <journal> JACM, </journal> <volume> 20 </volume> <pages> 46-61, </pages> <year> 1973. </year>
Reference-contexts: In this version, multiple-resource scheduling is easily reduced to single-resource scheduling. There are several optimal single-resource scheduling algorithms for the periodic scheduling problem. The Earliest Deadline algorithm of Liu and Layland is one example <ref> [12] </ref>. None of them extends directly to multiple resources. As Liu pointed out, "the simple fact that a task can use only one [resource] even when several [resources] are free at the same time adds a surprising amount of difficulty" to the scheduling of multiple resources [11].
Reference: [13] <author> H. E. Scarf. </author> <title> Production sets with indivisibilities, Part I: </title> <journal> Generalities. Econometrica, </journal> <volume> 49 </volume> <pages> 1-32, </pages> <year> 1981. </year>
Reference-contexts: The Compare subroutine appears to be closely related to Euclid's GCD algorithm, as 23 well as to various algorithms that have been proposed for 2-ILP, that is, integer linear programming with two variables <ref> [6, 8, 13, 14] </ref>. (ILP is NP-complete in general, but can be solved in polynomial-time for any fixed number of variables [9].) Deng has extensively studied the relationship between GCD and 2-ILP [3]. Our P-fair scheduling algorithm produces schedules with a large number of preemptions.
Reference: [14] <author> H. E. Scarf. </author> <title> Production sets with indivisibilities, Part II: The case of two activities. </title> <journal> Econometrica, </journal> <volume> 49 </volume> <pages> 395-423, </pages> <year> 1981. </year> <month> 25 </month>
Reference-contexts: The Compare subroutine appears to be closely related to Euclid's GCD algorithm, as 23 well as to various algorithms that have been proposed for 2-ILP, that is, integer linear programming with two variables <ref> [6, 8, 13, 14] </ref>. (ILP is NP-complete in general, but can be solved in polynomial-time for any fixed number of variables [9].) Deng has extensively studied the relationship between GCD and 2-ILP [3]. Our P-fair scheduling algorithm produces schedules with a large number of preemptions.
References-found: 14

