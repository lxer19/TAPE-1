URL: http://www.eecs.umich.edu/~davidvc/publications/gc.ps
Refering-URL: http://www.eecs.umich.edu/~davidvc/publications.html
Root-URL: http://www.cs.umich.edu
Title: by Timing Analysis of Digital Systems with Gated Clocks  
Author: David Van Campenhout and Trevor Mudge 
Date: August 1995  
Pubnum: CSE-TR-257-95  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> K. Sakallah, T. Mudge, O. Olukotun, checkTc and minTc: </author> <title> Timing verification and optimal clocking of synchronous digital circuits, </title> <booktitle> in ICCAD-90 Digest of Technical Papers, </booktitle> <pages> pp. 552-555, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: Static timing analyzers are also more restrictive in the variety of circuits that can be analyzed. Early static timing analysers were limited to fully synchronous circuits without any clock skew. A comprehensive model for analyzing synchronous systems was proposed by Sakallah, Mudge and Okulotun <ref> [1] </ref>. The model has been extended to handle clock skew. But, the model assumes that all synchronizers are clocked by a mul-tiphase clocking system in which all clocks have the same periodicity.
Reference: [2] <author> T. Szymanski, </author> <title> Computing optimal clock schedules, </title> <booktitle> in Proc. of the 29th Design Automation Conference, </booktitle> <pages> pp. 399-404, </pages> <year> 1992. </year>
Reference-contexts: The relationship between these variables combined with the setup and hold constraints of the latches constitute a set of constraints that can be relaxed to linear constraints. The verification problem can be solved by constraint relaxation. The optimization problem was originally tackled by linear programming. However, Szymanski <ref> [2] </ref> proposed a more efficient approach. First the minimum cycle time set by the loops is computed. Subsequently all relevant constraints with respect to that cycle time are generated.
Reference: [3] <author> A. Ishii, </author> <title> Retiming gated-clocks and precharged circuit structures, </title> <booktitle> in ICCAD-93 Digest of Technical Papers, </booktitle> <pages> pp. 300-307, </pages> <year> 1993 </year>
Reference-contexts: The presence of such paths would be normally reported as violations in the SMO model. In this report we propose a method to deal correctly with gated clocks and multi-cycle paths. 2 Previous work Ishii <ref> [3] </ref> describes methods for retiming systems that contain precharged circuit structures and/or gated clock signals. He derives a set of constraints which all take the form of inequalities between the delay of a path and the length of a time interval which is bounded by a pair of clock edges.
Reference: [4] <author> M. Kawarabayashi, N. Shenoy and A. Sangiovanni-Vincentelli, </author> <title> A verification technique for gated clock, </title> <booktitle> in Proc. of the 30th Design Automation Conference, </booktitle> <pages> pp. 123-127, </pages> <year> 1993. </year>
Reference-contexts: He notes that these inequatities are not significantly different from those obtained during the analysis of regular purely synchronous systems. This analysis does not consider multi-cycle paths, and circuits exhibiting multi-cycle paths do not comply with Ishiis definition of proper operation. No functional analysis is performed. Kawarabayashi et al. <ref> [4] </ref> consider CPU-like circuits which are partitioned into a datapath and a controller. A rather restrictive datapath model is used. The combinational logic between the latches is partitioned in subblocks interconnected by multiplexors. These multiplexors, as well as the signals gating the clocks are steered by the controller. <p> High-level design knowledge is used to partition the circuit into a datapath and a controller section. Combinational datapath sections are analyzed using an approach similar to [8]. Our datapath model is more general than the multiplexer-based datapath model used in <ref> [4] </ref>. The controller is transformed into a classical synchronous machine without any gated clocks. Symbolic state traversal techniques, following the approach of [12], are used to verify the conditions governing the validity of multi-cycle paths. This paper is organized as follows. <p> Then, for a positive (negative) level sensitive latch clocked by , either y f f q,( )= f f y f f 0= CSE-TR-CSE-TR-257-95: Timing Analysis of Digital Systems with Gated Clocks 5 ( ), or ( ). In <ref> [4] </ref> the same functional constraint is imposed on secondary clocks, but the dual for neg ative level sensitive latches was omitted. Moreover, that paper doesnt mention the topological constraint that there be only a single path from the secondary clock to the primary clock. <p> Similarly, the second set contains minimum delays. This model is more exible and can handle a wider variety of circuits than the simple mux-model described in <ref> [4] </ref>. 4.2 Transformations on the Controller: The Mux Transform For functional analysis, as described in the next section, it is necessary to extract the finite state machine underlying the circuit.
Reference: [5] <author> A. Gupta and D. Siewiorek, </author> <title> Automated multi-cycle symbolic timing verification of microprocessor-based designs, </title> <booktitle> in Proc. of the 31st Design Automation Conference, </booktitle> <pages> pp. 113-119, </pages> <year> 1994. </year>
Reference-contexts: The controller does not contain any gated clocks. A state transition graph of the controller is extracted directly from the netlist. The state transition graph is traced to determine the number of clock cycles available for datapath signals to propagate along paths between two consecutive latches. Gupta et al. <ref> [5] </ref> consider the problem of multi-cycle paths in microprocessor-based designs. They construct a composite state-transition graph (CSTG). The circuit state is defined by output signal values on each synchronizer at any time.
Reference: [6] <author> R. Bryant, </author> <title> Graph-based Algorithms for Boolean Function Manipulation, </title> <journal> IEEE Trans. Computer, </journal> <volume> Vol. C-35, No. 8, </volume> <month> August </month> <year> 1986, </year> <pages> pp. 677-691. </pages>
Reference-contexts: The manipulation of subsets can then be reduced to the manipulation of boolean functions. For instance, the characteristic function of the intersection of two subsets is given by the logical AND of the characteristic functions corresponding to those two subsets. Using binary decision diagrams <ref> [6] </ref> to represent the boolean functions, these operations can be performed fairly efficiently. For the purpose of this work, we compute the set of all reachable states in the state transition graph corresponding to a certain finite state machine. A generic algorithm is shown in Figure 2.
Reference: [7] <author> T. Burks, K. Sakallah and T. Mudge, </author> <title> Critical paths in circuits with level-sensitive latches, </title> <journal> IEEE Trans. VLSI Systems, </journal> <volume> Vol. 3, No. 2, </volume> <pages> pp. 273-291, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Note that arcs corresponding to multi-cycle paths are labeled with a # followed by the number of cycles available. 6. Verification using constraint relaxation. Constraints corresponding to the network shown in Figure 6 are generated, and the network is verified using constraint relaxation <ref> [7] </ref>. 6 Conclusion We proposed a methodology for verifying the temporal behavior of synchronous circuits containing gated clocks. The circuit is partitioned in a datapath and controller sections.
Reference: [8] <author> H. Yalcin, J. Hayes, </author> <title> Hierarchical timing analysis using conditional delays, </title> <note> in ICCAD-95 Digest of Technical Papers, to appear, </note> <year> 1995. </year>
Reference-contexts: The approach is limited to circuits with a relatively small CSTG. Our work begins with the assumption that high-level design information is available. High-level design knowledge is used to partition the circuit into a datapath and a controller section. Combinational datapath sections are analyzed using an approach similar to <ref> [8] </ref>. Our datapath model is more general than the multiplexer-based datapath model used in [4]. The controller is transformed into a classical synchronous machine without any gated clocks. Symbolic state traversal techniques, following the approach of [12], are used to verify the conditions governing the validity of multi-cycle paths. <p> The activation of the functional units is orchestrated by the controller. High level information is used to indicate the appropriate control signals. The delay through the combinational block is expressed as a function of these control signals. This approach is very similar to the hierarchical timing analyzer described in <ref> [8] </ref>. For each pair of connected synchronizers, two sets of tuples are computed. Each tuple in the first set gives the maximum delay from the first synchronizer to the other, and under which settings of the control signals that maximum delay is exhibited. Similarly, the second set contains minimum delays. <p> Specification of the circuit. The latches are partitioned into datapath and control latches. Latches belong to the datapath partition; latches are part of the control partition. The signal is marked as a control signal of interest. 2. Abstraction of the circuit. Using a delay calculator based on conditional arithmetic <ref> [8] </ref>, the minimum and maximum delays through the combinational blocks are computed. The delays are expressed as a function of the control signals of interest, i.e. . Note that when , the longest path through the combinational logic is 24, whereas it is only 5 when .
Reference: [9] <author> P. McGeer, R. Brayton, </author> <title> Integrating Functional and Temporal Domains in Logic Design, </title> <publisher> Kluwer Academic, </publisher> <year> 1991. </year>
Reference: [10] <author> A. Ghosh, </author> <title> Sequential Logic Testing and Verification, </title> <publisher> Kluwer Academic 1992. </publisher>
Reference-contexts: For example, in formal verification, temporal properties of sequential machines are checked [11]. In another example, some approaches to test pattern generation for sequential machines <ref> [10] </ref> rely on the computation of the set of all reachable states from the reset state. In early work, the state transition graph of the machine was built explicitly. However, as the number of synchronizers increases, the size of the state transition graph increases drastically.
Reference: [11] <author> J. Burch, et al., </author> <title> Sequential circuit verification using symbolic model checking, </title> <booktitle> in Proc. of the 27th Design Automation Conference, </booktitle> <pages> pp. 46-51, </pages> <year> 1990. </year>
Reference-contexts: For example, in formal verification, temporal properties of sequential machines are checked <ref> [11] </ref>. In another example, some approaches to test pattern generation for sequential machines [10] rely on the computation of the set of all reachable states from the reset state. In early work, the state transition graph of the machine was built explicitly.

References-found: 11

