URL: http://elysium.cs.ucdavis.edu/~benson/publications/sr-lcr95.ps
Refering-URL: http://elysium.cs.ucdavis.edu/~benson/publications/publications.html
Root-URL: http://www.cs.ucdavis.edu
Abstract: THE DESIGN OF MICROKERNEL SUPPORT FOR THE SR CONCURRENT PROGRAMMING LANGUAGE y Gregory D. Benson and Ronald A. Olsson Department of Computer Science University of California, Davis, California 95616 fbenson,olssong@cs.ucdavis.edu ABSTRACT In general, networked and distributed operating systems are still programmed using a sequential language like C, even though the underlying programming model is that of multithreaded programs that communicate using some form of message passing. In a distributed environment it is more natural to program using a distributed programming language. In addition, distributed languages do not map well to traditional operating systems. The new, minimal kernel, or microkernel, operating systems provide an opportunity to efficiently support distributed languages. This paper explores different ways to provide support for the SR concurrent programming language on the Mach microkernel. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Accetta et al. </author> <title> A new kernel foundation for UNIX development. </title> <booktitle> In Proceedings of the Summer 1986 USENIX Conference, </booktitle> <pages> pages 93-112, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: Unlike traditional operating systems, microkernels support only a few key abstractions, including multithreaded processes, communication, and memory management. Our effort toward reaching our goal is based on an experimental implementation called SRMach, in which SR [4, 3] will be implemented on top of the Mach microkernel <ref> [1] </ref>. We have designed several RTS (run-time support) systems that take advantage of the Mach primitives, and we are currently implementing one of them. We intend to quantitatively evaluate each design to assess the efficiency of our RTS algorithms.
Reference: [2] <author> G. R. Andrews. </author> <title> Concurrent Programming: </title> <booktitle> Principles and Practice. </booktitle> <address> Ben-jamin/Cummings, </address> <year> 1991. </year>
Reference-contexts: Distributed programs are characterized by processes that communicate through message passing, while parallel programs are characterized by processes that communicate through shared memory <ref> [2] </ref>. Often, parallel programs have small grain sizes as found in many numerical and scientific applications fl . This paper focuses on distributed programs.
Reference: [3] <author> G. R. Andrews and R. A. Olsson. </author> <title> The SR Programming Language: Concur-rency in Practice. </title> <publisher> The Benjamin/Cummings Publishing Co., </publisher> <address> Redwood City, California, </address> <year> 1993. </year>
Reference-contexts: Unlike traditional operating systems, microkernels support only a few key abstractions, including multithreaded processes, communication, and memory management. Our effort toward reaching our goal is based on an experimental implementation called SRMach, in which SR <ref> [4, 3] </ref> will be implemented on top of the Mach microkernel [1]. We have designed several RTS (run-time support) systems that take advantage of the Mach primitives, and we are currently implementing one of them. We intend to quantitatively evaluate each design to assess the efficiency of our RTS algorithms.
Reference: [4] <author> G. R. Andrews, R. A. Olsson, M. Coffin, I. Elshoff, K. Nilsen, T. Purdin, and G. Townsend. </author> <title> An overview of the SR language and implementation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(1) </volume> <pages> 51-86, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: Unlike traditional operating systems, microkernels support only a few key abstractions, including multithreaded processes, communication, and memory management. Our effort toward reaching our goal is based on an experimental implementation called SRMach, in which SR <ref> [4, 3] </ref> will be implemented on top of the Mach microkernel [1]. We have designed several RTS (run-time support) systems that take advantage of the Mach primitives, and we are currently implementing one of them. We intend to quantitatively evaluate each design to assess the efficiency of our RTS algorithms.
Reference: [5] <author> M. S. Atkins and R. A. Olsson. </author> <title> Performance of multi-tasking and synchronization mechanisms in the programming language SR. </title> <journal> Software Practice and Experience, </journal> <volume> 18(9) </volume> <pages> 879-895, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: Two types of benchmarks will be used: micro-benchmarks and macro-benchmarks. Micro-benchmarks only test individual mechanisms, thus they are easier to define. Unfortunately, macro-benchmarks are more difficult to develop. The micro-benchmarks used for SRMach can be derived from previous work in performance analysis of SR's communication and synchronization mechanisms <ref> [5] </ref>. Efforts to benchmark Mach-based programs and the Mach micro-kernel will also be used to devise micro-benchmarks [9]. In addition, micro-benchmarks originally written in C and intended for UNIX [13] can be reformulated as SR programs.
Reference: [6] <author> K. Bala, M. F. Kaashoek, and W. E. Weihl. </author> <title> Software prefetching and caching for translation lookaside buffers. </title> <booktitle> In Operating Systems Design and Implementation, </booktitle> <pages> pages 243-253, </pages> <address> Monterey, California, </address> <month> November </month> <year> 1994. </year> <booktitle> USENIX. </booktitle>
Reference-contexts: For example, Mach is the basis of the NeXTStep operating system, OSF/1, and the GNU Hurd operating system. Mach has been well studied and also used a platform form for several micro-kernel research projects, such as [11], [12], [16], and <ref> [6] </ref>, just to name a few. Another useful property of both SR and Mach is that they are both freely available. Thus, the source for the SR compiler, linker, and RTS can be modified as needed. The same applies to the Mach microkernel.
Reference: [7] <author> G. D. Benson. </author> <title> Microkernel support for distributed programming languages: Issues in design and implementation. </title> <type> Technical Report CSE-95-3, </type> <institution> University of California, Davis, Department of Computer Science, </institution> <month> February </month> <year> 1995. </year>
Reference-contexts: Given these assumptions, this section focuses on the main issues surrounding mi-crokernel support for distributed programming languages. For an in depth discussion of the design issues presented in this section see <ref> [7] </ref>. 2.1 Programming Views Microkernels present a significant change in structure from traditional operating system kernels. Most notably, microkernels redefine the kernel/user boundary and facilitate both multiprocessing and distributed computing.
Reference: [8] <author> J. Boykin, D. Kirschen, A. Langerman, and S. LoVerso. </author> <title> Programming under Mach. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1993. </year>
Reference-contexts: However, the apparent relationship between language objects and kernel objects could be deceptive. It is hoped that the minimal nature of the Mach microkernel will obviate this problem. The Mach microkernel is well established in the research community and has also made its way into industry <ref> [8] </ref>. For example, Mach is the basis of the NeXTStep operating system, OSF/1, and the GNU Hurd operating system. Mach has been well studied and also used a platform form for several micro-kernel research projects, such as [11], [12], [16], and [6], just to name a few.
Reference: [9] <author> D. Golub, R. Dean, A. Forin, and R. Rashid. </author> <title> UNIX as an application program. </title> <booktitle> In Proceedings of the Summer 1990 USENIX Conference, </booktitle> <pages> pages 87-95, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Unfortunately, macro-benchmarks are more difficult to develop. The micro-benchmarks used for SRMach can be derived from previous work in performance analysis of SR's communication and synchronization mechanisms [5]. Efforts to benchmark Mach-based programs and the Mach micro-kernel will also be used to devise micro-benchmarks <ref> [9] </ref>. In addition, micro-benchmarks originally written in C and intended for UNIX [13] can be reformulated as SR programs. Macro-benchmarks should represent the types of programs used by the language and microkernel (i.e., SRMach). As described in Section 2, this research primarily targets system-level programming, and secondarily, user-level programming.
Reference: [10] <author> E. Lazowska, H. Levy, G. Almes, M. Fischer, R. Fowler, and S. Vsetal. </author> <title> The architecture of the Eden system. </title> <booktitle> In Proceedings of the 8th ACM Symposium on Operating System Principles, </booktitle> <pages> pages 148-159, </pages> <month> December </month> <year> 1981. </year>
Reference-contexts: As previously mentioned, microkernels are much less restrictive, therefore offer a very flexible platform for designing run-time support. Our work explores the wide spectrum of design possibilities for run-time support on microkernel-based systems. 2.3 Design Feedback As discovered in systems such as Cedar [15] and Eden <ref> [10] </ref>, the cooperative development of an operating system and the supported programming language Microkernel Support for SR 5 is beneficial to both components. Our research is concerned with distributed programming languages and microkernels. As such, the implementation process will provide insight into both distributed language and microkernel design.
Reference: [11] <author> NSA INFOSEC Research and Technology. </author> <title> Synergy: A Distributed, </title> <booktitle> Microkernel-based Security Architecture, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: For example, Mach is the basis of the NeXTStep operating system, OSF/1, and the GNU Hurd operating system. Mach has been well studied and also used a platform form for several micro-kernel research projects, such as <ref> [11] </ref>, [12], [16], and [6], just to name a few. Another useful property of both SR and Mach is that they are both freely available. Thus, the source for the SR compiler, linker, and RTS can be modified as needed. The same applies to the Mach microkernel.
Reference: [12] <author> H. Orman, E. Menze III, S. O'Malley, and L. Peterson. </author> <title> A fast and general implementation of Mach IPC in a network. </title> <booktitle> In Mach III Symposium, </booktitle> <pages> pages 75-88, </pages> <address> Santa Fe, New Mexico, </address> <month> April </month> <year> 1993. </year> <booktitle> USENIX. </booktitle>
Reference-contexts: For example, Mach is the basis of the NeXTStep operating system, OSF/1, and the GNU Hurd operating system. Mach has been well studied and also used a platform form for several micro-kernel research projects, such as [11], <ref> [12] </ref>, [16], and [6], just to name a few. Another useful property of both SR and Mach is that they are both freely available. Thus, the source for the SR compiler, linker, and RTS can be modified as needed. The same applies to the Mach microkernel.
Reference: [13] <author> J. K. Ousterhout. </author> <booktitle> Why aren't operating systems getting faster as fast as hardware? In Proceedings of the Summer USENIX Conference, </booktitle> <pages> pages 247-256, </pages> <address> Ana-heim, California, </address> <month> June </month> <year> 1990. </year> <title> Microkernel Support for SR 15 </title>
Reference-contexts: The micro-benchmarks used for SRMach can be derived from previous work in performance analysis of SR's communication and synchronization mechanisms [5]. Efforts to benchmark Mach-based programs and the Mach micro-kernel will also be used to devise micro-benchmarks [9]. In addition, micro-benchmarks originally written in C and intended for UNIX <ref> [13] </ref> can be reformulated as SR programs. Macro-benchmarks should represent the types of programs used by the language and microkernel (i.e., SRMach). As described in Section 2, this research primarily targets system-level programming, and secondarily, user-level programming. A logical approach is to reimplement established Mach servers in SR.
Reference: [14] <author> M. L. Scott. </author> <title> The interface between distributed operating system and high-level programming language. </title> <booktitle> In Proceedings of the 1986 International Conference on Parallel Processing, </booktitle> <month> August </month> <year> 1986. </year>
Reference-contexts: Although such languages are well-suited for these tasks, the performance of their implementations is hampered by a mismatch between their needs and the primitives provided by the underlying operating systems <ref> [14] </ref>. Efficient support for distributed programming languages would make it easier to write distributed operating system services (e.g., files systems) and higher-level programming models such as distributed shared memory.
Reference: [15] <author> D. C. Swinehart, P. T. Zellweger, R. J. Beach, and R. B. Hagmann. </author> <title> A structural view of the Cedar programming environment. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(4) </volume> <pages> 419-490, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: As previously mentioned, microkernels are much less restrictive, therefore offer a very flexible platform for designing run-time support. Our work explores the wide spectrum of design possibilities for run-time support on microkernel-based systems. 2.3 Design Feedback As discovered in systems such as Cedar <ref> [15] </ref> and Eden [10], the cooperative development of an operating system and the supported programming language Microkernel Support for SR 5 is beneficial to both components. Our research is concerned with distributed programming languages and microkernels.
Reference: [16] <author> C. A. Waldspurger and W. E. Weihl. </author> <title> Lottery scheduling: Flexible proportion-share resource management. </title> <booktitle> In Operating Systems Design and Implementation, </booktitle> <pages> pages 1-11, </pages> <address> Monterey, California, </address> <month> November </month> <year> 1994. </year> <booktitle> USENIX. </booktitle>
Reference-contexts: For example, Mach is the basis of the NeXTStep operating system, OSF/1, and the GNU Hurd operating system. Mach has been well studied and also used a platform form for several micro-kernel research projects, such as [11], [12], <ref> [16] </ref>, and [6], just to name a few. Another useful property of both SR and Mach is that they are both freely available. Thus, the source for the SR compiler, linker, and RTS can be modified as needed. The same applies to the Mach microkernel.
References-found: 16

