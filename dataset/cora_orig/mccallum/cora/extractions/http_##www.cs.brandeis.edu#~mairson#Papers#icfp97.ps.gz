URL: http://www.cs.brandeis.edu/~mairson/Papers/icfp97.ps.gz
Refering-URL: http://www.cs.brandeis.edu/~mairson/
Root-URL: http://www.cs.brandeis.edu
Title: On global dynamics of optimal graph reduction  
Author: Julia L. Lawall Harry G. Mairson 
Address: 35042 Rennes Cedex France  Waltham, Massachusetts 02254  
Affiliation: IRISA Campus Universitaire de Beaulieu  Computer Science Department Brandeis University  
Abstract: Optimal graph reduction technology for the -calculus, as developed by Lamping, with modifications by Asperti, Gonthier, Abadi, and Levy, has a well-understood local dynamics based on a standard menagerie of reduction rules, as well as a global context semantics based on Girard's geometry of interaction. However, the global dynamics of graph reduction has not been subject to careful investigation. In particular, graphs lose their structural resemblence to -terms after only a few graph reduction steps, and little is known about graph reduction strategies that maintain efficiency or structure. While the context semantics provides global information about the computation, its use as part of a reduction strategy seems computationally infeasible. We propose a tractable graph reduction strategy that preserves computationally relevant global structure, and allows us to efficiently bound the computational resources needed to implement optimal reduction. A simple canonical representation for graphs is introduced that we call fan-normal form. This normal form allows us to reduce graphs based on efficient identification of fi-redexes, rather than being guided by lower-level search for interacting nodes. In addition and perhaps more important, the fan-normal form facilitates a complexity analysis of graph reductions, showing that the number of fan interactions is essentially bounded by a polynomial in the number of unique Levy labels generated during a labelled reduction. This global analysis of the finitary dynamics of optimal reduction is the first demonstration that a reasonable implementation-independent cost model for the -calculus is in fact realized by Lamping's abstract algorithm. It remains to be seen whether similar claims can be made about so-called bookkeeping for fan interactions.
Abstract-found: 1
Intro-found: 1
Reference: [Asp94] <author> Andrea Asperti. </author> <title> Linear logic, comonads, and optimal reductions. </title> <note> Fundamenta Informaticae 22:1, </note> <year> 1994. </year>
Reference: [Asp95] <author> Andrea Asperti. </author> <title> Paths, computations, and labels in the -calculus. </title> <note> Theoretical Computer Science 142:2 (May, </note> <year> 1995), </year> <pages> pp. 277-297. 12 </pages>
Reference-contexts: A labelled -term thus codes the reduction history that led to its derivation; labels can also be interpreted in terms of context semantics [GAL92] as coding information flow in the graph representation between functions and arguments. This insight is developed in considerable detail by Asperti <ref> [Asp95] </ref>. The label on the -abstraction in a fi-redex is called the family index of the redex, because the same label may appear on the function position of a family of distinct redexes that should be reduced as one.
Reference: [Asp96] <author> Andrea Asperti. </author> <title> On the complexity of beta-reduction. </title> <booktitle> 1996 ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 110-118. </pages>
Reference: [Bar84] <author> Hendrik Barendregt. </author> <title> The Lambda Calculus: Its Syntax and Semantics. </title> <publisher> North Holland, </publisher> <year> 1984. </year>
Reference: [vEB90] <author> Peter van Emde Boas. </author> <title> Machine models and simulation. </title> <booktitle> Handbook of Theoretical Computer Science, volume A, </booktitle> <pages> pp. 1-66. </pages> <publisher> North Holland, </publisher> <year> 1990. </year>
Reference: [Chu41] <author> Alonzo Church. </author> <title> The Calculi of Lambda-conversion. </title> <publisher> Princeton University Press, </publisher> <year> 1941. </year>
Reference: [Fie90] <author> John Field. </author> <title> On laziness and optimality in lambda interpreters: tools for specification and analysis. </title> <booktitle> 1990 ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 1-15. </pages>
Reference-contexts: It is a simple observation that an edge between two nodes connects a value port with an environment port: continuations need values, and vice versa. 2.2 Levy labels There are a variety of flavors of Levy labels; in this paper, we have relied on the version in <ref> [Fie90] </ref>. The set of labels is made up of a countably infinite set of atomic labels (such as integers), and closed under the operations of concatenation and underlining. Briefly, each subterm of the initial -term is initially annotated with a unique label.
Reference: [FS91] <author> Gudmund S. Frandsen and Carl Sturtivant. </author> <title> What is an efficient implementation of the -calculus? 1991 ACM Conference on Functional Programming and Computer Architecture (J. </title> <editor> Hughes, ed.), </editor> <volume> LNCS 523, </volume> <pages> pp. 289-312. </pages>
Reference: [GAL92] <author> Georges Gonthier, Martin Abadi, and Jean-Jacques Levy. </author> <title> The geometry of optimal lambda reduction. </title> <booktitle> 1992 ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 15-26. </pages>
Reference-contexts: As reduction occurs, labels are concatenated and underlined, according to arcane rules, so that the labels encode the history of the computation. A labelled -term thus codes the reduction history that led to its derivation; labels can also be interpreted in terms of context semantics <ref> [GAL92] </ref> as coding information flow in the graph representation between functions and arguments. This insight is developed in considerable detail by Asperti [Asp95].
Reference: [Gue95] <author> Stefano Guerrini. Sharing-graphs, sharing-morphisms, </author> <title> and (optimal) -graph reductions (draft). </title> <type> Unpublished manuscript. </type> <month> June 16, </month> <year> 1995. </year>
Reference: [Kat90] <author> Vinod Kathail. </author> <title> Optimal interpreters for lambda-calculus based functional languages. </title> <type> Ph.D. Thesis, </type> <institution> MIT, </institution> <month> May </month> <year> 1990. </year>
Reference: [Lam90] <author> John Lamping. </author> <title> An algorithm for optimal lambda calculus reduction. </title> <booktitle> 1990 ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 16-30. </pages>
Reference-contexts: These rules, shown in Figure 6, preserve the fidelity of representation and of readback. 6 ) ) 3 An invariant on intermediate graphs As observed by Lamping <ref> [Lam90] </ref>, it is not the case that every link in the graph is associated with a unique Levy label. We can state an invariant, however, relating Levy labels to intermediate graphs. This invariant will be essential in accounting for the cost of reductions. <p> In this latter case, we need only make precise what is an unsharable pair of applications or abstractions in a labelled term, e.g., using Lamping's idea of prerequisite chains <ref> [Lam90] </ref>. We account for the cost of fan interaction and related parallel fi-reduction by charging individual fan interactions to tuples made up of a family index and up to three path identifiers. Let n be the sum of the above parameters. The number of family indices is clearly O (n).
Reference: [LM96] <author> Julia L. Lawall and Harry G. Mairson. </author> <title> Optimality and inefficiency: </title> <booktitle> what isn't a cost model of the lambda calculus? 1996 ACM International Conference on Functional Programming, </booktitle> <pages> pp. 92-101. </pages>
Reference-contexts: introduction to the abstract algorithm is presented in <ref> [LM96] </ref>. In the rest of the paper, we use the following terminology to describe the structure of graphs. Definition 2.1 A primary node in a graph is either a node or an @ node. <p> We remark that without the fan-normal form, paths from an @ node to a node, as directed by the context semantics, can have exponential length, due to multiple entries and exits from sharing nodes along the path; see <ref> [LM96] </ref> for details.
Reference: [Levy78] <author> Jean-Jacques Levy. </author> <title> Reductions correctes et optimales dans le lambda-calcul. </title> <address> These d'Etat, Univer-site Paris 7, </address> <year> 1978. </year>
Reference: [Levy80] <author> Jean-Jacques Levy. </author> <title> Optimal reductions in the lambda-calculus. To H. B. Curry: Essays in Combinatory Logic, Lambda Calculus and Formalism, </title> <editor> (Jonathan P. Seldin and J. Roger Hindley, </editor> <booktitle> editors), </booktitle> <pages> pp. 159-191. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference: [Mac95] <author> Ian Mackie. </author> <title> The geometry of interaction machine. </title> <booktitle> 1995 ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 198-208. </pages>
Reference: [Wad71] <author> Christopher Wadsworth. </author> <title> Semantics and pragmatics of the -calculus. </title> <editor> Ph. D. </editor> <booktitle> Thesis, Programming Research Group, </booktitle> <publisher> Oxford University. </publisher> <pages> 13 </pages>
References-found: 17

