URL: ftp://ftp.cs.cmu.edu/project/mach/doc/unpublished/exception.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/project/mach/public/www/doc/publications.html
Root-URL: 
Title: The Mach Exception Handling Facility  
Author: David L. Black, David B. Golub, Karl Hauth Avadis Tevanian and Richard Sanzi 
Address: Pittsburgh, PA 15213  
Affiliation: Computer Science Department Carnegie Mellon University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Accetta, M.J., Baron, R.V., Bolosky, W., Golub, D.B., Rashid, R.F., Tevanian, A., and Young, M.W. </author> <title> Mach: A New Kernel Foundation for UNIX Development. </title> <booktitle> In Proceedings of Summer Usenix. </booktitle> <month> July, </month> <year> 1986. </year>
Reference-contexts: This paper concerns the design and implementation of exception handling facilities that perform this exporting for general purpose operating systems. We discuss both the overall design principles for these facilities and the specific design and implementation of an exception handling facility for the Mach <ref> [1] </ref> operating system. We also discuss the support provided to applications that use exceptions (e.g. debuggers) by this facility and other Mach kernel facilities. Mach supports debuggers via a combination of independent kernel facilities instead of concentrating debugger support in a single kernel component (e.g. ptrace).
Reference: [2] <institution> American National Standard Reference Manual for the Ada Programming Language ANSI, </institution> <address> New York, NY, 1983. ANSI/MIL-STD 1815A-1983. </address>
Reference-contexts: Certain applications handle their own exceptions (particularly arithmetic) under some circumstances. For example, a handler could substitute zero for the result of a floating underflow and continue execution. Error handlers are often required by high-level 3 languages (e.g. Ada <ref> [2] </ref>). Emulation. Virtually all modern machines generate exceptions upon encountering operation codes that cannot be executed by the hardware. Emulators can be built to execute the desired operation in software.
Reference: [3] <author> Bach, M. J. </author> <title> The Design of the Unix Operating System. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1986. </year>
Reference-contexts: Core dumps. In the absence of a debugger, a fatal exception can cause the execution state 2 of a program to be saved (in a file) for later examination. Unix systems refer to these files as `core dumps' for historical reasons. <ref> [3] </ref> Error handling. Certain applications handle their own exceptions (particularly arithmetic) under some circumstances. For example, a handler could substitute zero for the result of a floating underflow and continue execution. Error handlers are often required by high-level 3 languages (e.g. Ada [2]). Emulation. <p> The original Unix signal mechanism wasn't even adequate for detecting and responding to external events; signals were viewed as almost always fatal <ref> [3] </ref>. 5. A Model for Exception Handling The Mach exception handling facility is based on a general model that describes the use of exceptions. This model is derived from the requirements of applications that use exceptions.
Reference: [4] <institution> VAX Architecture Handbook DEC, </institution> <address> Marlboro, MA, </address> <year> 1981. </year>
Reference-contexts: VAX <ref> [4] </ref>). The operating system distinguishes system calls from other hardware exceptions; system calls are requests for 2 Unix is a trademark of AT&T Bell Laboratories 3 Ada is a registered trademark of the U.S.
Reference: [5] <author> Dobberpuhl, D.W., Supnik, R.M., and Witek, </author> <title> R.T. The MicroVAX 78032 Chip, A 32-Bit Microprocessor. </title> <journal> Digital Technical Journal </journal> (2):12-23, March, 1986. 
Reference-contexts: Emulators can be built to execute the desired operation in software. Such emulators serve to extend the instruction set of the underlying machine by performing instructions that are not present in the hardware (e.g. the 4 Microvax II relies on software "macrocode" to implement infrequently used instructions <ref> [5] </ref>) Many computers regard system calls as another form of exception at the hardware level; system calls 5 cause the hardware to suspend execution and trap into the operating system (e.g. VAX [4]).
Reference: [6] <author> Ousterhout, J.K. </author> <title> Partitioning and cooperation in a Distributed Multiprocessor Operating System: Medusa. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1980. </year>
Reference-contexts: The Accent operating system [7], a predecessor of Mach, used a message-based facility for debugger invocation upon exception occurrence. This debugger was often the kernel debugger which had limited utility for debugging user programs. In contrast, the Medusa operating system for Cm* <ref> [6] </ref> provided almost half a dozen different options for handling exceptions. Medusa introduced the idea of stopping a thread/task/process when an exception occurred and invoking a separate "buddy" entity to deal with the exception.
Reference: [7] <author> Rashid, R.F., and Robertson, G. </author> <title> Accent: A Communication Oriented Network Operating System Kernel. </title> <booktitle> In Proceedings of the Eighth Symposium on Operating System Principles, </booktitle> <pages> pages 64-75. </pages> <address> Decem-ber, </address> <year> 1981. </year>
Reference-contexts: This places system calls beyond the scope of any exception handling facility. 4. Existing Approaches Operating systems designers have approached the area of exceptions in a variety of ways. The Accent operating system <ref> [7] </ref>, a predecessor of Mach, used a message-based facility for debugger invocation upon exception occurrence. This debugger was often the kernel debugger which had limited utility for debugging user programs. In contrast, the Medusa operating system for Cm* [6] provided almost half a dozen different options for handling exceptions.
Reference: [8] <author> Siewiorek, D.P., Bell, C. G., and Newell, A. </author> <title> Computer Structures: Principles and Examples. </title> <publisher> McGraw-Hill Book Company, </publisher> <address> New York, NY, </address> <year> 1982. </year>
Reference-contexts: Government, Ada Joint Program Office 4 Microvax and Microvax II are trademarks of Digital Equipment Corporation 5 VAX is a trademark of Digital Equipment Corporation services from the operating system, and are better viewed as extracodes or meta-instructions im-plemented by the operating system <ref> [8] </ref>. This places system calls beyond the scope of any exception handling facility. 4. Existing Approaches Operating systems designers have approached the area of exceptions in a variety of ways. The Accent operating system [7], a predecessor of Mach, used a message-based facility for debugger invocation upon exception occurrence.
Reference: [9] <author> Richard M. Stallman. </author> <title> GDB Manual: The GNU source-Level Debugger First edition, Free Software Foundation, 1987. [10] Sun Operating System Version 3.2. Operating System Kernel Source Code. i Table of Contents 1. Introduction 2. The Mach System 3. Exceptions and their Uses 4. Existing Approaches 5. A Model for Exception Handling 6. Design of the Mach Exception Handling Facility 6.1. Exception Ports 6.2. User Extensibility 7. Implementing Error Handlers 8. Implementing Debuggers 9. Communication Properties and Extended Functionality 9.1. Debugger Attachment 10. Parallel and Distributed Debugging 11. Gdb Enhancements 12. </title> <publisher> Conclusion </publisher>
Reference-contexts: Gdb Enhancements As part of this work we have used the Mach exception handling facility and other Mach kernel primitives to enhance Gdb (the Gnu Debugger) <ref> [9] </ref> for debugging multi-threaded tasks. This enhanced version of gdb operates at the task level (i.e. any exception causes it to suspend the entire task).
References-found: 9

