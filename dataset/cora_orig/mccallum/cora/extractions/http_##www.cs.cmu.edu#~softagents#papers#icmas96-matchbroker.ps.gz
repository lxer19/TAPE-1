URL: http://www.cs.cmu.edu/~softagents/papers/icmas96-matchbroker.ps.gz
Refering-URL: http://www.cs.cmu.edu/~softagents/publications_old.html
Root-URL: 
Email: (decker,mikew,sycara)@cs.cmu.edu  
Title: Matchmaking and Brokering  
Author: Keith Decker, Mike Williamson, and Katia Sycara 
Keyword: Topic Areas: Organization and Social Structures, Communication Issues and Pro tocols Word Count: 4993  
Date: May 16, 1996  
Address: 5000 Forbes Ave, Pittsburgh, PA 15213  
Affiliation: The Robotics Institute, Carnegie Mellon University  
Abstract: In this paper we define the notions of agent matchmaking and brokering behaviors that are used while processing requests among initially unacquainted sets of agents. These behaviors are basic components of common organizational roles and thus must be understood by computational agents. Broker-ing and matchmaking behaviors can be used to construct organizational forms such as centralized or distributed markets, ad hoc teams, and bureaucratic functional or product hierarchies. Each behavior brings with it certain performance characteristicscost, robustness, and adaptiveness qualitiesthat are related to characteristics of the external environment and of the agents themselves. For example, while brokered systems are more vulnerable to certain failures, they are also able to cope more quickly with a rapidly fluctuating agent workforce. We present several agent design constraints and related models, which are experimentally validated using the WARREN multi-agent portfolio management system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Philip R. Cohen and Hector J. Levesque. </author> <title> Intention is choice with commitment. </title> <journal> Artificial Intelligence, </journal> <volume> 42(3) </volume> <pages> 213-261, </pages> <year> 1990. </year>
Reference-contexts: In particular, we do not require at this point (before communicating with the matchmaker) that the requester has made an internal commitment to the objective (in the Cohen & Levesque sense <ref> [1, 2] </ref>). This is a fairly important assumption, as it simplifies the reasoning that can be expected at the matchmakersince agents may ask questions about services without any formal intention of using those services.
Reference: [2] <author> P.R. Cohen and H.J. Levesque. </author> <title> Communicative actions for artificial agents. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 65-72, </pages> <address> San Francisco, June 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Sections 2 through 4 will define these behaviors; rather than define them in terms of new classes of communicative acts, we will define them in terms of simpler request actions. This has two benefits: first, the semantics of requests are well-understood <ref> [11, 2] </ref>, and second, such a definition allows us to build simpler agents that can work in a open environment with hybrid behaviors (both matchmaking and brokering). <p> We 2 will assume that useful, shared domain ontologies exist and are being used by enough agents to provide basic domain services. Another assumption that we will make is that agents are sincere in their communications to one another <ref> [2] </ref>. 2 Approach We have chosen to define matchmaking and brokering behaviors so that they use requesting speech acts (in KQML, ASK, ASK-ALL, STREAM-ALL, etc.) and avoid using the additional special KQML performatives RECRUIT, BROKER, and RECOMMEND for several reasons: 1. Requests are fairly well defined and understood. <p> Requests are fairly well defined and understood. Although no complete formal semantics for KQML exists yet, several definitions exist for simple requests <ref> [11, 2] </ref>. This previous work allows us to understand more clearly what is going on with respect to matchmaking and brokering 2. <p> In particular, we do not require at this point (before communicating with the matchmaker) that the requester has made an internal commitment to the objective (in the Cohen & Levesque sense <ref> [1, 2] </ref>). This is a fairly important assumption, as it simplifies the reasoning that can be expected at the matchmakersince agents may ask questions about services without any formal intention of using those services.
Reference: [3] <author> C. Collet, M.N. Huhns, and W. Shen. </author> <title> Resource integration using a large knowledge base in Carnot. </title> <booktitle> Computer, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: Experimental results are reported in Section 5, using our implementation of the WARREN multi-agent portfolio management system. Another problem faced by open multi-agent system designers is the ontological mismatch problemwe will not address this problem in this paper (c.f. <ref> [3] </ref>). We 2 will assume that useful, shared domain ontologies exist and are being used by enough agents to provide basic domain services.
Reference: [4] <author> R. Davis and R. G. Smith. </author> <title> Negotiation as a metaphor for distributed problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 20(1) </volume> <pages> 63-109, </pages> <month> January </month> <year> 1983. </year>
Reference: [5] <author> K. Decker, M. Williamson, and K. Sycara. </author> <title> Modeling information agents: Advertisements, organizational roles, and dynamic behavior. </title> <booktitle> In Proceedings of the AAAI-96 Workshop on Agent Modeling, </booktitle> <year> 1996. </year>
Reference-contexts: Thus the matchmaker should not limit the potential names returned in any way unrelated to the query itself. To construct the matchmaker query, we are developing an agent service ontology <ref> [5] </ref>. Agents in a server role advertise their services using this ontology (committing to certain future classes of action under specified conditions) and requesters can query such advertising assertions. The advertisement serves as a model of another agent's general capabilities. <p> This declaration is called an advertisement, and it is communicated to the matchmaker. The advertisement contains both a specification of the agent's capabilities with respect to the type of requests it can accept, and both general and service-specific constraints on those future requests (see <ref> [5] </ref>). It is possible in an advertisement to express that some request constraints cannot be determined in advance of a specific request. For example, the price of a service may not be fixed beforehand, but need to be quoted (and perhaps negotiated) on a case-by-case basis.
Reference: [6] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Designing a family of coordination algorithms. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 73-80, </pages> <address> San Francisco, </address> <month> June </month> <year> 1995. </year> <note> AAAI Press. Longer version available as UMass CS-TR 94-14. 18 </note>
Reference-contexts: These requests might contain conditions such as deadlines, but the server role is still an extremely basic one. In particular, a server does not enter into a shared plan [9] or communicate with the requester about its internal objectives <ref> [6] </ref>. Our most carefully worked out and empirically validated server role behaviors center on answering queries. We have created a class of agents called information agents that can answer one-shot and periodic queries, or monitor for conditions, on external information sources.
Reference: [7] <author> T. Finin, R. Fritzson, D. McKay, and R. McEntire. </author> <title> KQML as an agent com-munication language. </title> <booktitle> In Proceedings of the Third International Conference on Information and Knowledge Management CIKM'94. </booktitle> <publisher> ACM Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: The solutions that have been proposed rely instead on well-known agents and some basic interactions with them: matchmaking and brokering [8, 10]. Standard agent communication languages (i.e., KQML <ref> [7] </ref>) even define specific `performatives' (RECRUIT, BROKER, FORWARD) for these behaviors. These behaviors are also common in human open systems as well. <p> We will not discuss multi-matchmaker organizations further in this paper; one possible organizational structure often mentioned might mirror Internet domain name resolution systems <ref> [7] </ref>. 4 Brokering In general, the process of brokering involves how one agent with an objective comes to have that objective achieved by another agent. We intentionally and clearly define brokering behavior as separate and different from matchmaking (agent-name-finding) behavior.
Reference: [8] <author> M.R. Genesereth and S.P. Katchpel. </author> <title> Software agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) 48-53,147, </volume> <year> 1994. </year>
Reference-contexts: The fact that the system is open (participants may enter and exit at any time) and distributed over the entire Internet precludes broadcast communication solutions. The solutions that have been proposed rely instead on well-known agents and some basic interactions with them: matchmaking and brokering <ref> [8, 10] </ref>. Standard agent communication languages (i.e., KQML [7]) even define specific `performatives' (RECRUIT, BROKER, FORWARD) for these behaviors. These behaviors are also common in human open systems as well. <p> In a purely brokered system there are no matchmakers, so a requester must rely on knowledge of who the brokers are. In the limit, such as facilitator systems <ref> [8] </ref>, an agent goes through a single broker for everything, so the necessary pre-compiled knowledge at an agent differs little from a matchmaker system.
Reference: [9] <author> B. Grosz and S. Kraus. </author> <title> Collaborative plans for group activities. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Chambery, France, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: These requests might contain conditions such as deadlines, but the server role is still an extremely basic one. In particular, a server does not enter into a shared plan <ref> [9] </ref> or communicate with the requester about its internal objectives [6]. Our most carefully worked out and empirically validated server role behaviors center on answering queries.
Reference: [10] <author> D. Kuokka and L. Harada. </author> <title> On using KQML for matchmaking. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 239-245, </pages> <address> San Francisco, June 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: The fact that the system is open (participants may enter and exit at any time) and distributed over the entire Internet precludes broadcast communication solutions. The solutions that have been proposed rely instead on well-known agents and some basic interactions with them: matchmaking and brokering <ref> [8, 10] </ref>. Standard agent communication languages (i.e., KQML [7]) even define specific `performatives' (RECRUIT, BROKER, FORWARD) for these behaviors. These behaviors are also common in human open systems as well. <p> In our implementation, a matchmaker agent is a type of information agent. Any information agent can handle queries stated so that the requester is kept informed if the results of this query change (i.e. new agents enter the system, agents leave the system, etc.). 2 2 Kuokka <ref> [10] </ref> cites several other justifications for this useful behavior. 5 3.1.1 Querying the Matchmaker The point of a matchmade system is to keep the decision-making responsibility at the requester (compare this to the brokered system, were the broker takes on much of this responsibility).
Reference: [11] <author> Y. Labrou and T. Finin. </author> <title> A semantics approach for KQML. </title> <booktitle> In Proceedings of the Third International Conference on Information and Knowledge Management CIKM'94. </booktitle> <publisher> ACM Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: Sections 2 through 4 will define these behaviors; rather than define them in terms of new classes of communicative acts, we will define them in terms of simpler request actions. This has two benefits: first, the semantics of requests are well-understood <ref> [11, 2] </ref>, and second, such a definition allows us to build simpler agents that can work in a open environment with hybrid behaviors (both matchmaking and brokering). <p> Requests are fairly well defined and understood. Although no complete formal semantics for KQML exists yet, several definitions exist for simple requests <ref> [11, 2] </ref>. This previous work allows us to understand more clearly what is going on with respect to matchmaking and brokering 2.
Reference: [12] <author> E.D. Lazowska, J. Zahorjan, G.S. Graham, and K.C. Sevcik. </author> <title> Quantitative System Performance: Computer System Analysis Using Queueing Network Models. </title> <publisher> Prentice Hall, </publisher> <year> 1984. </year>
Reference-contexts: This is a function of the request generation period, P , and of the number of servers, N . Our system can be roughly described by a queuing network model <ref> [12] </ref>. According to queuing network theory, the total elapsed time to fulfill a request is R = D+Q, where D is total computational demand of the request (in our case, D = T + F ).
Reference: [13] <author> J. S. Rosenschein and G. Zlotkin. </author> <title> Designing conventions for automated ne-gotition. </title> <journal> AI Magazine, </journal> <pages> pages 29-46, </pages> <month> Fall </month> <year> 1994. </year>
Reference-contexts: An objective is a generalization of a simple goal. While a goal is either achieved or not, an objective may be partially achieved to some level of quality (in a worth-oriented environment <ref> [13] </ref>). An agent R taking the role of a requester has some objective that either: 4 1. R believes it cannot achieve on its own, or 2.
Reference: [14] <author> J. A. Stankovic. </author> <title> Simulations of three adaptive, decentralized controlled, job scheduling algorithms. </title> <journal> Computer Networks, </journal> <volume> 8 </volume> <pages> 199-217, </pages> <year> 1984. </year> <month> 19 </month>
Reference-contexts: There 11 do exist more complex load balancing algorithms that do not require this constraint (e.g., where the load at the remote agent is reverified when the request is made <ref> [14] </ref>), but they are also applicable at the requester in a pure matchmaker system.
References-found: 14

