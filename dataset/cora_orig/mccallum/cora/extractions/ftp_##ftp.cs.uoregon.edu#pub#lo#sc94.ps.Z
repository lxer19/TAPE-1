URL: ftp://ftp.cs.uoregon.edu/pub/lo/sc94.ps.Z
Refering-URL: http://www.cs.uoregon.edu/research/DistributedComputing/archive.html
Root-URL: http://www.cs.uoregon.edu
Email: Email: wliu, lo, kurtw@cs.uoregon.edu Email: nitzberg@nas.nasa.gov  
Title: Non-contiguous Processor Allocation Algorithms for Distributed Memory Multicomputers  
Author: Wanqian Liu, Virginia Lo, Bill Nitzberg and Kurt Windisch 
Address: Eugene, OR 97403 Moffett Field, CA 94035  
Affiliation: Dept. of Computer and Information Science NAS Systems Division University of Oregon NASA Ames Research Center  
Abstract: Current processor allocation techniques for highly parallel systems have thus far been restricted to contiguous allocation strategies for which performance suffers significantly due to the inherent problem of fragmentation. We are investigating processor allocation algorithms which lift the restriction on contiguity of processors in order to address the problem of fragmentation. Three non-contiguous processor allocation strategies: Naive, Random and the Multiple Buddy Strategy (MBS) are proposed and studied in this paper. Simulations compare the performance of the non-contiguous strategies with that of several well-known contiguous algorithms. We show that noncontiguous allocation algorithms perform better overall than the contiguous ones, even when message-passing contention is considered. We also present the results of experiments on an Intel Paragon XP/S-15 with 208 nodes that show non-contiguous allocation is feasible with current technologies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David H. Bailey, Eric Barszcz, Leonardo Dagum, and Horst D. Simon. </author> <title> NAS Parallel Benchmark Results 3-94. </title> <type> Technical Report Technical Report RNR-94-006, </type> <institution> NASA Ames Research Center, Moffett Field, </institution> <address> CA 94035-1000, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: One would expect message contention to have a noticeable impact on performance; however, we were unable to measure any performance degradation on real applications due to contention. We ran two, four, and six copies of selected NAS Parallel Benchmarks <ref> [1] </ref> simultaneously and found no measurable performance difference compared with running the benchmarks one at a time on a dedicated system.
Reference: [2] <author> Sourav Bhattacharya, Lionel M. Ni, and Wei-Tek Tsai. </author> <title> Lookahead Processor Allocation in Mesh-Connected Massively Parallel Computers. </title> <type> Technical report, </type> <institution> University of Minnesota Dept. of Computer Science, </institution> <year> 1993. </year>
Reference-contexts: Although no statistics have been compiled for mesh systems, we believe the same trend will be exhibited under the assumption of contiguity. Thus, improved performance requires exploration of other alternatives, including scheduling policies <ref> [2] </ref> [8] [11] and the approach we propose: non-contiguous allocation. 3 Contention on Real Systems The potential increased message contention caused by non-contiguous allocation could greatly reduce performance.
Reference: [3] <author> Po-Jen Chuang and Nian-Feng Tzeng. </author> <title> An Efficient Submesh Allocation Strategy for Mesh Computer Systems. </title> <booktitle> In 1991 International Conference on Distributed Computer Systems, </booktitle> <pages> pages 256-263, </pages> <year> 1991. </year>
Reference-contexts: The Intel Paragon uses an extension to the 2-D buddy strategy which is applicable to non-square meshes and allows allocation across more than one size buddy. [9] Chuang and Tzeng proposed an improved strategy called the frame sliding strategy <ref> [3] </ref>. It is applicable to any mesh system and any shape of submesh request, thus it has no internal fragmentation. <p> The pur pose of these experiments is to carefully examine the message contention introduced by non-contiguity. 5.1 Fragmentation Experiments The first set of experiments, studying the effects of fragmentation on system utilization and job response time, is modeled after the simulation experiments conducted in previous allocation strategy research [13] <ref> [3] </ref> [5]. In these experiments, jobs arrive, delay for an amount of time taken from an exponential distribution, and then depart. Message-passing is not modeled. The contiguous allocation strategies simulated in these experiments are First Fit, Best Fit [13], and Frame Sliding [3]. <p> experiments conducted in previous allocation strategy research [13] <ref> [3] </ref> [5]. In these experiments, jobs arrive, delay for an amount of time taken from an exponential distribution, and then depart. Message-passing is not modeled. The contiguous allocation strategies simulated in these experiments are First Fit, Best Fit [13], and Frame Sliding [3]. From the non-contiguous strategies, we only present the results for Multiple Buddy Strategy, which performs identically to Random and Naive with respect to system fragmentation. The job request streams were modeled taking the submesh request sizes from the uniform, exponential, increasing, and decreasing distributions.
Reference: [4] <author> R. Covington, S. Dwarkadas, J. Jump, J. Sinclair, and S. Madala. </author> <title> The efficient simulation of parallel computer system. </title> <journal> International Journal in Computer Simulations, </journal> <volume> 1 </volume> <pages> 31-58, </pages> <year> 1991. </year>
Reference-contexts: Our discrete event simulator was implemented in C using the Rice Parallel Processing Testbed Tools YACSIM, a general simulation library, and NETSIM, a library of network simulation extensions <ref> [4] </ref>. The fragmentation experiments model the arrival, service, and departure of a stream of jobs in a mesh-connected system using first-come, first-serve scheduling (FCFS). These high-level experiments focus on the effects of system fragmentation (both internal and external).
Reference: [5] <author> Phillip Krueger, Ten-Hwang Lai, and Vibha A. Dixit-Radiya. </author> <title> Job scheduling is more important than processor allocation for hypercube computers. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 5(5) </volume> <pages> 488-497, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: External fragmentation exists when a sufficient number of processors are available to satisfy a request, but they cannot be allocated contiguously. Experimental evidence has shown that little improvement in performance can be realized by refinements of contiguous allocation algorithms <ref> [5] </ref>. As a result, recent research efforts have focused on the choice of scheduling policies and their impact on contiguous allocation schemes. Our research takes a different approach to overcoming the limitations of contiguous allocation. <p> Section 6 summarizes our results and discusses future work. 2 Previous Research Work The Multiple Buddy Strategy proposed in this paper is an extension of the 2-D Buddy Strategy. Our simulations compare the performance of MBS with Frame Sliding, First Fit and Best Fit. The Kreuger paper <ref> [5] </ref> describes the performance limitations of all contiguous allocation schemes and thus motivates our investigation of non-contiguous approaches. The two-dimensional buddy strategy, a generalization of the one-dimensional binary buddy system for memory management, is proposed by Li and Cheng [6] for a mesh connected system. <p> These bit arrays can then be searched for the first available submesh (first fit) or submesh that best fits the request (best fit). Both strategies suffer from significant external fragmentation. These algorithms both have allocation and deallocation overhead of O (n). Krueger et. al have shown in <ref> [5] </ref> that increasingly sophisticated processor allocation algorithms do not significantly influence the performance of hypercube systems. Their simulations of four well-known hypercube allocation strategies realized limited improvements despite the differing abilities of these algorithms to reduce fragmentation and recognize available sub-cubes. <p> The pur pose of these experiments is to carefully examine the message contention introduced by non-contiguity. 5.1 Fragmentation Experiments The first set of experiments, studying the effects of fragmentation on system utilization and job response time, is modeled after the simulation experiments conducted in previous allocation strategy research [13] [3] <ref> [5] </ref>. In these experiments, jobs arrive, delay for an amount of time taken from an exponential distribution, and then depart. Message-passing is not modeled. The contiguous allocation strategies simulated in these experiments are First Fit, Best Fit [13], and Frame Sliding [3].
Reference: [6] <author> Keqin Li and Kam-Hoi Cheng. </author> <title> A Two-Dimensional Buddy System for Dynamic Resource Allocation in a Partitionable Mesh Connected System. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 12 </volume> <pages> 79-83, </pages> <year> 1991. </year>
Reference-contexts: The Kreuger paper [5] describes the performance limitations of all contiguous allocation schemes and thus motivates our investigation of non-contiguous approaches. The two-dimensional buddy strategy, a generalization of the one-dimensional binary buddy system for memory management, is proposed by Li and Cheng <ref> [6] </ref> for a mesh connected system. Under this strategy, all incoming jobs are given square submeshes of size n 0 fi n 0 and the system itself is a square mesh of size n fi n, where both n 0 and n are exact powers of 2. <p> The complexity of the allocation and deallocation algorithms for both of these strategies is O (k). 4.2 Multiple Buddy Strategy In the following, we introduce another noncontiguous allocation strategy, which we call the Multiple Buddy Strategy (MBS). It is an extension of the 2-D buddy strategy <ref> [6] </ref>, which has both internal and external fragmentation problems. MBS eliminates fragmentation by applying the non-contiguous model to the mesh system, while still maintaining contiguity within individual blocks. A more detailed and formal discussion of MBS may be found in [7].
Reference: [7] <author> Wanqian Liu, Virginia Lo, and Kurt Windisch. </author> <title> Noncontiguous processor allocation algorithms for distributed memory multicomputers. </title> <type> Technical Report CIS-TR-94-11, </type> <institution> University of Oregon, </institution> <year> 1994. </year>
Reference-contexts: It is an extension of the 2-D buddy strategy [6], which has both internal and external fragmentation problems. MBS eliminates fragmentation by applying the non-contiguous model to the mesh system, while still maintaining contiguity within individual blocks. A more detailed and formal discussion of MBS may be found in <ref> [7] </ref>. The following scenarios show the problems exhibited by the 2-D buddy strategy and how they are resolved by the MBS strategy. <p> For example, under a system load of 1.0, jobs arrive as fast as the are serviced, on the average, and under a system load of 2.0, jobs arrive twice as fast as they can be serviced. See <ref> [7] </ref> for more simulation details. <p> Experimental results are presented for Multiple Buddy Strategy, Random, Naive, and First Fit allocation. First Fit was chosen as a representative of contiguous allocation strategies since it has been shown to perform as well as the others [13]. See <ref> [7] </ref> for more simulation details. From each simulation run, we measure: * Finish Time the time required for completion of all the jobs. Finish time is a good measure of overall performance. * Service Time the time from when a job begins execution until the time it completes.
Reference: [8] <author> Prasant Mohapatra, Chansu Yu, Chita R. Das, and Jong Kim. </author> <title> A lazy scheduling scheme for improving hypercube performance. </title> <booktitle> In International Conference on Parallel Processing, </booktitle> <pages> pages 110-117, </pages> <year> 1993. </year>
Reference-contexts: Although no statistics have been compiled for mesh systems, we believe the same trend will be exhibited under the assumption of contiguity. Thus, improved performance requires exploration of other alternatives, including scheduling policies [2] <ref> [8] </ref> [11] and the approach we propose: non-contiguous allocation. 3 Contention on Real Systems The potential increased message contention caused by non-contiguous allocation could greatly reduce performance.
Reference: [9] <author> Reagon Moore. </author> <title> Intel Paragon Allocation Algorithms. San Diego Supercomputing Center. </title> <type> Personal Communication, </type> <year> 1994. </year>
Reference-contexts: The Intel Paragon uses an extension to the 2-D buddy strategy which is applicable to non-square meshes and allows allocation across more than one size buddy. <ref> [9] </ref> Chuang and Tzeng proposed an improved strategy called the frame sliding strategy [3]. It is applicable to any mesh system and any shape of submesh request, thus it has no internal fragmentation.
Reference: [10] <author> Vijay K. Naik, Sanjeev K. Setia, and Mark S. Squil-lante. </author> <title> Performance Analysis of Job Scheduling Policies in Parallel Supercomputing Environments. </title> <booktitle> In Proceedings Supercomputing '93, </booktitle> <pages> pages 824-833, </pages> <year> 1993. </year>
Reference-contexts: As we shall show, non-contiguous allocation offers several significant advantages over contiguous schemes: elimination of internal and external fragmentation; low allocation and deallocation overheads; compatibility with adaptive processor allocation schemes <ref> [10] </ref> in which a job may increase or decrease its allocation at runtime; and straightforward extensions for fault tolerance. Current communication technologies like wormhole routing enable us to consider non-contiguous allocation, since the delay due to the number of hops between processors is known to be negligible.
Reference: [11] <author> B. Narahari and R. Krishnamurti. </author> <title> Scheduling independent tasks on partitionable hypercube multiprocessors. </title> <booktitle> In Proceedings of the International Parallel Processing Symposium, </booktitle> <pages> pages 118-122, </pages> <year> 1993. </year>
Reference-contexts: Although no statistics have been compiled for mesh systems, we believe the same trend will be exhibited under the assumption of contiguity. Thus, improved performance requires exploration of other alternatives, including scheduling policies [2] [8] <ref> [11] </ref> and the approach we propose: non-contiguous allocation. 3 Contention on Real Systems The potential increased message contention caused by non-contiguous allocation could greatly reduce performance.
Reference: [12] <author> Brian VanVoorst, Steven Seidel, and Eric Barszcz. </author> <title> Profiling the Communication Workload of an iPSC/860. </title> <booktitle> In Scalable High Performance Computing Conference, </booktitle> <month> May </month> <year> 1994. </year> <note> to appear. </note>
Reference-contexts: The poor operating system performance will likely be corrected in future releases of the Paragon OS, but the contention effects of small messages will likely remain. VanVoorst, et. al. <ref> [12] </ref>, measured the workload of the Intel iPSC/860 system at NAS for ten days, and found that 87% of all messages are, in fact, one kilobyte or less. So, at least for a class of scientific applications, large messages may not be a significant issue.
Reference: [13] <author> Yahui Zhu. </author> <title> Efficient Processor Allocation Strategies for Mesh-Connected Parallel Computers. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 16 </volume> <pages> 328-337, </pages> <year> 1992. </year>
Reference-contexts: This strategy has better performance than the 2-D buddy strategy. However, it has higher allocation overhead O (n), it suffers from large external fragmentation, and it cannot recognize all possible free submeshes. In <ref> [13] </ref>, Zhu proposed the first fit and best fit strategies, which can be applied for contiguous submesh requests of arbitrary sizes and have the ability to recognize all free submeshes in a system. <p> The pur pose of these experiments is to carefully examine the message contention introduced by non-contiguity. 5.1 Fragmentation Experiments The first set of experiments, studying the effects of fragmentation on system utilization and job response time, is modeled after the simulation experiments conducted in previous allocation strategy research <ref> [13] </ref> [3] [5]. In these experiments, jobs arrive, delay for an amount of time taken from an exponential distribution, and then depart. Message-passing is not modeled. The contiguous allocation strategies simulated in these experiments are First Fit, Best Fit [13], and Frame Sliding [3]. <p> modeled after the simulation experiments conducted in previous allocation strategy research <ref> [13] </ref> [3] [5]. In these experiments, jobs arrive, delay for an amount of time taken from an exponential distribution, and then depart. Message-passing is not modeled. The contiguous allocation strategies simulated in these experiments are First Fit, Best Fit [13], and Frame Sliding [3]. From the non-contiguous strategies, we only present the results for Multiple Buddy Strategy, which performs identically to Random and Naive with respect to system fragmentation. The job request streams were modeled taking the submesh request sizes from the uniform, exponential, increasing, and decreasing distributions. <p> It shows that MBS can accommodate a much higher system load before becoming overloaded, and that the system utilization at this point is much higher. The results for contiguous allocation measured in these experiments are all consistent with those reported by Zhu in <ref> [13] </ref>. These fragmentation experiments indicate that non-contiguous allocation is far superior to contiguous in terms of its ability to utilize the processors. Because non-contiguous allocation can always allocate a job if there are enough processors available, eliminating external fragmentation, it is shown to achieve higher system utilization. <p> Experimental results are presented for Multiple Buddy Strategy, Random, Naive, and First Fit allocation. First Fit was chosen as a representative of contiguous allocation strategies since it has been shown to perform as well as the others <ref> [13] </ref>. See [7] for more simulation details. From each simulation run, we measure: * Finish Time the time required for completion of all the jobs. Finish time is a good measure of overall performance. * Service Time the time from when a job begins execution until the time it completes.
References-found: 13

