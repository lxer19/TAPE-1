URL: http://www.pdos.lcs.mit.edu/~engler/ash-osdi.ps
Refering-URL: http://www.pdos.lcs.mit.edu/~engler/
Root-URL: 
Email: fengler, kerr, kaashoekg@lcs.mit.edu  
Title: Design and Implementation of a Modular, Flexible, and Fast System for Dynamic Protocol Composition  
Author: D. R. Engler, D. A. Wallach, and M. F. Kaashoek 
Address: Cambridge, MA 02139, U.S.A  
Affiliation: M.I.T. Laboratory for Computer Science  
Abstract: Distributed systems must communicate. To communicate at all requires high-level protocols be built with manageable complexity. To communicate well requires protocols efficient both in design and implementation. The ASH system provides mechanisms to address both of these needs. To manage complexity, it provides a simple interface that allows protocols to be dynamically composed in a modular manner. As a result, the complexity of building a high-level messaging service is reduced since it can be built from multiple, independent pieces at runtime. To provide efficiency, the ASH interface is designed so that the message processing steps of each protocol (such as checksumming, byteswapping, encryption, etc.) can be dynamically integrated into a single specialized loop that touches each byte of the message at most once. The ASH system is the first to dynamically integrate the data processing elements of each protocol. This ability is crucial since without it dynamic protocol composition cannot be efficient. This paper presents the design and implementation of the ASH system. It is interesting because it uses modern compilation techniques to eliminate the runtime overhead of modularity. To make the system efficient we have had to solve problems ranging from theoretical graph algorithms, to language design, to determining the most efficient way to access unaligned memory, and designing efficient and portable methods of generating executable code at runtime. As a result of careful design and the the use of dynamic code generation to specialize data processing paths, the ASH system provides performance that is comparable to (and in some situations significantly better than) hand-coded, hard-wired protocol implementations. The ASH system has been integrated into the Aegis operating system, and runs on both Ethernet and DEC AN2 networks. A standalone version of the ASH system runs on SPARC, MIPS, and Alpha processors. The system itself will be publically released in the near future. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. B. Abbott and L. L. Peterson. </author> <title> Increasing network through-put by integrating protocol layers. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(5) </volume> <pages> 600-610, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: ASH uses two- phase message processing to handle this problem: phase one propagates the message up the protocol stack, phase two either commits or aborts. This model has similarities to that of Abbott and Peterson <ref> [1] </ref>; the main difference is that it is simpler. <p> As in Abbott and Peterson <ref> [1] </ref>, each protocol layer negotiation step for data manipulation is written as a transfer from register to register, and is organized as a pipe manipulating data as it streams through. This methodology is similar to Ab- bott and Peterson [1] with the important distinction that our system allows dynamic protocol composition, <p> As in Abbott and Peterson <ref> [1] </ref>, each protocol layer negotiation step for data manipulation is written as a transfer from register to register, and is organized as a pipe manipulating data as it streams through. This methodology is similar to Ab- bott and Peterson [1] with the important distinction that our system allows dynamic protocol composition, whereas theirs is done statically. To allow modular coupling, each pipe has an input and output gauge associated with it (e.g., 8 bits, 32 bits, etc.). <p> There is also quite a bit of work on protocol composition [8, 14, 9, 2, 13]. The system to provide an automatic modular mechanism for ILP is Abbott and Peterson <ref> [1] </ref>. They describe an ILP system that composes macros into integrated loops at compile time, eliminating multiple data traversals. Each macro is written with initialization and finalization code and a main body that takes in word-sized input and emits word-sized output.
Reference: [2] <author> N.T. Bhatti and R.D. Schlichting. </author> <title> A system for constructing configurable high-level protocols. </title> <booktitle> In Proc. SIGCOMM 1995, </booktitle> <pages> pages 138-150, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: A number of more recent experiments measured on top of the Exokernel system will appear in [15]. 7 Related work There have been many instances of ad hoc ILP, for example, in many networking kernels [4]. There is also quite a bit of work on protocol composition <ref> [8, 14, 9, 2, 13] </ref>. The system to provide an automatic modular mechanism for ILP is Abbott and Peterson [1]. They describe an ILP system that composes macros into integrated loops at compile time, eliminating multiple data traversals.
Reference: [3] <author> D. D. Clark and D. L. Tennenhouse. </author> <title> Architectural considera-tions for a new generation of protocols. </title> <booktitle> In ACM Communication Architectures, Protocols, and Applications (SIGCOMM) 1990, </booktitle> <month> September </month> <year> 1990. </year>
Reference-contexts: Since deliver and augment are always coupled, we have simplified the interface by unifying them into a single function. The central efficiency problem with modular protocol design is that separation of protocol levels prevents integration of each protocol's data manipulations <ref> [3] </ref>. For example, consider a two-layer stack consisting of TCP and an RPC protocol that guarantees correct byte order. <p> Many of our experiments are influenced by Clark and Tennenhouse <ref> [3] </ref>. We use micro-benchmarks to measure the base performance of individual ASH operations.
Reference: [4] <author> David D. Clark, Van Jacobson, John Romkey, and Howard Salwen. </author> <title> An analysis of TCP processing overhead. </title> <journal> IEEE Communications Magazine, </journal> <volume> 27(6), </volume> <year> 1989. </year>
Reference-contexts: A number of more recent experiments measured on top of the Exokernel system will appear in [15]. 7 Related work There have been many instances of ad hoc ILP, for example, in many networking kernels <ref> [4] </ref>. There is also quite a bit of work on protocol composition [8, 14, 9, 2, 13]. The system to provide an automatic modular mechanism for ILP is Abbott and Peterson [1]. They describe an ILP system that composes macros into integrated loops at compile time, eliminating multiple data traversals.
Reference: [5] <author> P. Druschel, L. L. Peterson, and B. S. Davie. </author> <title> Experiences with a high-speed network adaptor: A software perspective. </title> <booktitle> In ACM Communication Architectures, Protocols, and Applications (SIGCOMM) 1994, </booktitle> <pages> pages 2-13, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: To process messages efficiently requires that messages be sent and received with a single copy between application data structures and network buffers (or, if message buffers can be mapped into user-space <ref> [5] </ref>, with a single touch of the data). This goal presents a problem in that while messages are processed with only local information (i.e., incomplete knowledge of the entire message), many protocol decisions require global information.
Reference: [6] <author> D. R. Engler. </author> <title> VCODE: a retargetable, extensible, very fast dy-namic code generation system. </title> <booktitle> In Proceedings of the SIGPLAN '96 Conference on Programming Language Design and Implementation, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: The composed functions are compiled by our system into a tightly integrated streaming engine which is encoded into a specialized data copying loop. The pipes for ASHs are written in a variant of VCODE <ref> [6] </ref>, which is a low-level extension language designed to be simple to implement and efficient both in terms of the cost of code generation and in terms of the computational performance of its generated code. The VCODE system was built based on our early experience with the ASH system.
Reference: [7] <author> D. R. Engler, M. F. Kaashoek, and J. O'Toole Jr. Exokernel: </author> <title> an operating system architecture for application-specific resource management. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: The first version of the system was developed to download message handlers into an operating system kernel where they could efficiently direct message placement (eliminating intermediate copies), perform integrated operations on the message as it was being placed in memory, and even initiate messages from the interrupt handler <ref> [7] </ref>. We are in the process of reintegrating the current ASH system into the Exokernel operating system on which the original was built. As the following experiment shows (taken from [7]) the use of ASH's allowed us to achieve performance beyond that of even hard-coded in-kernel message routines. <p> integrated operations on the message as it was being placed in memory, and even initiate messages from the interrupt handler <ref> [7] </ref>. We are in the process of reintegrating the current ASH system into the Exokernel operating system on which the original was built. As the following experiment shows (taken from [7]) the use of ASH's allowed us to achieve performance beyond that of even hard-coded in-kernel message routines.
Reference: [8] <author> Robert Harper and Peter Lee. </author> <title> Advanced languages for systems software: The Fox project in 1994. </title> <type> Technical Report CMUSC-94-104, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: A number of more recent experiments measured on top of the Exokernel system will appear in [15]. 7 Related work There have been many instances of ad hoc ILP, for example, in many networking kernels [4]. There is also quite a bit of work on protocol composition <ref> [8, 14, 9, 2, 13] </ref>. The system to provide an automatic modular mechanism for ILP is Abbott and Peterson [1]. They describe an ILP system that composes macros into integrated loops at compile time, eliminating multiple data traversals.
Reference: [9] <author> N.C. Hutchinson and L.L. Peterson. </author> <title> The x-kernel: an architecture for implementing network protocols. </title> <journal> IEEE Trans. on Soft. Eng., </journal> <volume> 17(1), </volume> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: A number of more recent experiments measured on top of the Exokernel system will appear in [15]. 7 Related work There have been many instances of ad hoc ILP, for example, in many networking kernels [4]. There is also quite a bit of work on protocol composition <ref> [8, 14, 9, 2, 13] </ref>. The system to provide an automatic modular mechanism for ILP is Abbott and Peterson [1]. They describe an ILP system that composes macros into integrated loops at compile time, eliminating multiple data traversals.
Reference: [10] <author> J. Postel. </author> <title> Transmission control protocol. </title> <type> RFC 793, </type> <institution> USC/Information Sciences Institute, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: Second, it manages the high complexity of modern high-performance protocols by building up services from individual existing protocols via composition rather than reimplementation. This concern is not academic: implementation of most network protocols is complex and error-prone (e.g., the specification of TCP is more than eighty pages long <ref> [10] </ref>). Without composition the creation of high-level network protocols becomes an ambitious endeavor rather than a handful of function calls.
Reference: [11] <author> T.A. Proebsting and S.A. Watterson. </author> <title> Filter fusion. </title> <booktitle> In Proc. POPL, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: Given the richness of possible data manipulations, however, disallowing application-specific operations can carry a significant cost. For example, even a single re-traversal of the data can halve available bandwidth. Proebsting and Watterson describe a new algorithm for static ILP using filter fusion <ref> [11] </ref>. Static composition requires that all desired compositions be known and performed at compilation time. There are two main drawbacks to such an approach. The first is the exponential code growth inherent in it.
Reference: [12] <author> C. A. Thekkath and H. M. Levy. </author> <title> Limits to low-latency communi-cation on high-speed networks. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 11(2) </volume> <pages> 179-203, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: As the following experiment shows (taken from [7]) the use of ASH's allowed us to achieve performance beyond that of even hard-coded in-kernel message routines. Table 5 shows the roundtrip latency over Ethernet of ASH- based network messaging and compares it to ExOS without ASHs, Ultrix, and FRPC <ref> [12] </ref> (the fastest RPC in the literature on comparable hardware). <p> UDP/IP packet 4096 times between two processes in user- space on DECstation5000/125s. The FRPC numbers are taken from the literature <ref> [12] </ref>. They were measured on a DECsta- tion5000/200, which is approximately 1.2 times faster than a DECstation5000/125 on SPECint92. <p> In comparison to a complete application-level implementation, ASHs save 61 microseconds. Despite being measured on a slower machine, ExOS/ASH is 81 microseconds faster than a high-performance implementation of RPC for Ultrix (FRPC) running on DECsta- tion5000/200s and using a specialized transport protocol <ref> [12] </ref>. In fact, ExOS/ASH is only 6 microseconds slower than the lower bound for cross-machine communication on Ethernet, measured on DECstation5000/200s [12]. <p> measured on a slower machine, ExOS/ASH is 81 microseconds faster than a high-performance implementation of RPC for Ultrix (FRPC) running on DECsta- tion5000/200s and using a specialized transport protocol <ref> [12] </ref>. In fact, ExOS/ASH is only 6 microseconds slower than the lower bound for cross-machine communication on Ethernet, measured on DECstation5000/200s [12]. A number of more recent experiments measured on top of the Exokernel system will appear in [15]. 7 Related work There have been many instances of ad hoc ILP, for example, in many networking kernels [4].
Reference: [13] <author> C. Tschudin. </author> <title> Flexible protocol stacks. </title> <booktitle> In Proc. SIGCOMM 1991, </booktitle> <pages> pages 197-204, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: A number of more recent experiments measured on top of the Exokernel system will appear in [15]. 7 Related work There have been many instances of ad hoc ILP, for example, in many networking kernels [4]. There is also quite a bit of work on protocol composition <ref> [8, 14, 9, 2, 13] </ref>. The system to provide an automatic modular mechanism for ILP is Abbott and Peterson [1]. They describe an ILP system that composes macros into integrated loops at compile time, eliminating multiple data traversals.
Reference: [14] <author> R. van Renesse, K.P. Birman, Roy Friedman, Mark Hayden, and David Karr. </author> <title> A framework for protocol composition in horus. </title> <booktitle> In Proc. Principles of Distributed Computing, </booktitle> <pages> pages 138-150, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: A number of more recent experiments measured on top of the Exokernel system will appear in [15]. 7 Related work There have been many instances of ad hoc ILP, for example, in many networking kernels [4]. There is also quite a bit of work on protocol composition <ref> [8, 14, 9, 2, 13] </ref>. The system to provide an automatic modular mechanism for ILP is Abbott and Peterson [1]. They describe an ILP system that composes macros into integrated loops at compile time, eliminating multiple data traversals.
Reference: [15] <author> Deborah A. Wallach, Dawson R. Engler, and M. Frans Kaashoek. ASHs: </author> <title> Application-specific handlers for high-performance mes-saging. In ACM Communication Architectures, Protocols, </title> <note> and Applications (SIGCOMM '96) (to appear), </note> <institution> Stanford, California, </institution> <month> August </month> <year> 1996. </year>
Reference-contexts: As a result, we have been able to achieve performance beyond what is obtainable from current implementations of C. This paper describes the design and implementation issues of the ASH system in detail. We are publishing a complementary paper on the use of ASHs <ref> [15] </ref>. Section 2 gives an overview of the ASH interface. Section 3 discusses challenges in the ASH implementation, and Section 4 gives details in how processing layers are dynamically integrated. The ASH operating system interface is described in Section 5 and experiments are presented in Section 6. <p> In fact, ExOS/ASH is only 6 microseconds slower than the lower bound for cross-machine communication on Ethernet, measured on DECstation5000/200s [12]. A number of more recent experiments measured on top of the Exokernel system will appear in <ref> [15] </ref>. 7 Related work There have been many instances of ad hoc ILP, for example, in many networking kernels [4]. There is also quite a bit of work on protocol composition [8, 14, 9, 2, 13].
References-found: 15

