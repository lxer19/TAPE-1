URL: http://www.cs.jhu.edu/~goodrich/pubs/match.ps
Refering-URL: http://www.cs.jhu.edu/~goodrich/pubs/index.html
Root-URL: http://www.cs.jhu.edu
Title: Geometric Pattern Matching under Euclidean Motion model-based computer vision, when the sets A and B
Author: L. Paul Chew Michael T. Goodrich Daniel P. Huttenlocher Klara Kedem ; Jon M. Kleinberg and Dina Kravets 
Note: of this subproblem in  
Abstract: Given two planar sets A and B, we examine the problem of determining the smallest " such that distance " of some member of B. We establish upper bounds on the combinatorial complexity line segments, or (filled-in) polygons. We also show how to use our methods to substantially there is a Euclidean motion (rotation and translation) of A that brings each member of A within
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P.K. Agarwal, M. Sharir, and S. Toledo, </author> <title> "Applications of parametric searching in geometric optimization," </title> <booktitle> Proc. 3rd ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1992, </year> <pages> 72-82. </pages>
Reference-contexts: So, instead, we design a special parallel algorithm to determine a good set of candidate values of " at which to probe. This technique is known as parametric searching <ref> [23, 12, 13, 14, 1, 10] </ref> and, using a pipelining technique of Cole [12, 13], our application of it to the one-way minimum Hausdorff distance requires only O (log mn) probes, giving the claimed bounds. In the next section we give some notation and background. <p> We sketch how this labeling is maintained below. First we build the arrangement of W for = 0 and determine coverage for each region of this arrangement in time O (m 2 n 2 log mn) (see <ref> [1] </ref>). We assume that each region of the arrangement has a counter indicating its depth of coverage. As changes, the arrangement changes. Updates on coverage information are needed whenever a region in the arrangement 8 is created or destroyed. <p> The Minimization Problem Having provided methods for solving Hausdorff decision problems under Euclidean motion, we now return to the minimization problem. Here, we apply the parametric searching technique <ref> [23, 12, 13, 14, 1, 10] </ref>, a powerful tool for efficiently solving a variety of optimization problems. This tool has been applied successfully to several problems in computational geometry [1, 10]. See [23, 1, 10] for a discussion of parametric search and the details of how it is applied. <p> Here, we apply the parametric searching technique [23, 12, 13, 14, 1, 10], a powerful tool for efficiently solving a variety of optimization problems. This tool has been applied successfully to several problems in computational geometry <ref> [1, 10] </ref>. See [23, 1, 10] for a discussion of parametric search and the details of how it is applied. Parametric search applies to problems that are parameterized by some real parameter ". <p> Here, we apply the parametric searching technique [23, 12, 13, 14, 1, 10], a powerful tool for efficiently solving a variety of optimization problems. This tool has been applied successfully to several problems in computational geometry [1, 10]. See <ref> [23, 1, 10] </ref> for a discussion of parametric search and the details of how it is applied. Parametric search applies to problems that are parameterized by some real parameter ".
Reference: [2] <author> H. Alt, B. Behrends, and J. Blomer, </author> <title> "Measuring the resemblance of polygonal shapes," </title> <booktitle> Proc. 7th ACM Symp. on Comp. Geom., </booktitle> <year> 1991, </year> <pages> 186-193. </pages>
Reference-contexts: This improves the previous algorithm of Huttenlocher, Kedem, and Kleinberg [20] for point sets by nearly a linear factor (as their method runs in O ((m + n) 6 log mn) time), 2 and it improves the previous algorithm of Alt, Behrends, and Blomer <ref> [2] </ref> for line segments by nearly a cubic factor (as their method runs in O (m 4 n 4 (m + n) log mn) time). <p> Proof. In order to solve this decision problem we must determine whether or not the set S () is uniformly empty or not for all 2 <ref> [0; 2] </ref>; that is, we are looking for a at which all the sets B " i () intersect, if such a exists. It is possible that S (0) is non-empty, but this can be determined by the cubic-time algorithm of [21] for computing the minimum Hausdorff distance under translation. <p> So 6 it is enough to maintain the depths of the vertices of the dynamically changing arrangement, and halt when any of them reach the value m. If it does not happen then S () is uniformly empty for all 2 <ref> [0; 2] </ref>. We maintain the depths as follows. Initially, we compute the depth information for all vertices of all the sets B " i () at = 0.
Reference: [3] <author> H. Alt and M. Godau, </author> <title> "Measuring the resemblance of polygonal curves," </title> <booktitle> Proc. 8th ACM Symp. on Comp. Geom., </booktitle> <year> 1992, </year> <pages> 102-109. </pages>
Reference: [4] <author> H. Alt, K. Mehlhorn, H. Wagener and E. Welzl, </author> <title> "Congruence, similarity and symmetries of geometric objects," </title> <journal> Disc. and Comp. Geom., </journal> <volume> 3, </volume> <year> 1988, </year> <pages> 237-256. </pages>
Reference: [5] <author> H. Aonuma, H. Imai, K. Imai and T. Tokuyama, </author> <title> "Maximin location of convex objects in a polygon and related dynamic Voronoi diagrams," </title> <booktitle> Proc. 6th ACM Symp. on Comp. Geom., </booktitle> <year> 1990, </year> <pages> 225-234. </pages>
Reference: [6] <author> E.M. Arkin, L.P. Chew, D.P. Huttenlocher, K. Kedem, and J.S.B. Mitchell, </author> <title> "An efficiently computable metric for comparing polygonal shapes," </title> <journal> IEEE Trans. on Pattern Analysis and Machine Intelligence, </journal> <volume> vol. 13, no. 3, </volume> <year> 1991, </year> <pages> pp. 209-216. </pages>
Reference: [7] <author> E.M. Arkin, K. Kedem, J.S.B. Mitchell, J. Sprinzak and M. Werman, </author> <title> "Matching points into noise regions: combinatorial bounds and algorithms," </title> <journal> ORSA Journal of Computing, </journal> <volume> 4(4)(1992), </volume> <pages> pp. 375-386. </pages>
Reference: [8] <author> F. Avnaim and J.-D. Boissonnat, </author> <title> "Polygon placement under translation and rotation," </title> <booktitle> Proc. 5th Symp. Theoret. Aspects Comput. Sci., Lecture Notes in Computer Science, </booktitle> <volume> 294, </volume> <publisher> Springer-Verlag, </publisher> <year> 1988, </year> <pages> 322-333. </pages>
Reference-contexts: Recall that our goal is to determine if there is a Euclidean motion g such that g (A) lies entirely within B " . The well-versed reader may suspect that we could use a result of Avnaim and Boissonnat <ref> [8] </ref> to solve this problem, but this does not seem possible. They solve the problem of placing a general polygonal shape P with m sides and corners, in another general polygonal shape Q, with n sides and corners, when P is allowed to translate and rotate. <p> Let us call Q the environment. Avnaim and Boissonnat show that all placements of P where P does not intersect the environment can be found in time O (m 3 n 3 log mn). (See <ref> [8] </ref> for more details.) There are two main differences between our problem and the problem solved in [8], however. First, our environment B " consists not only of straight line segments but also of circular arcs. Nevertheless, an extension of the work in [8] to include circular arcs does not appear <p> Avnaim and Boissonnat show that all placements of P where P does not intersect the environment can be found in time O (m 3 n 3 log mn). (See <ref> [8] </ref> for more details.) There are two main differences between our problem and the problem solved in [8], however. First, our environment B " consists not only of straight line segments but also of circular arcs. Nevertheless, an extension of the work in [8] to include circular arcs does not appear too difficult. The more important difference is that the placement problem solved in [8] is placement that <p> (m 3 n 3 log mn). (See <ref> [8] </ref> for more details.) There are two main differences between our problem and the problem solved in [8], however. First, our environment B " consists not only of straight line segments but also of circular arcs. Nevertheless, an extension of the work in [8] to include circular arcs does not appear too difficult. The more important difference is that the placement problem solved in [8] is placement that simply avoids intersection with the environment, while we need to ensure that A is really within B " . 7 i and B " i itself <p> problem solved in <ref> [8] </ref>, however. First, our environment B " consists not only of straight line segments but also of circular arcs. Nevertheless, an extension of the work in [8] to include circular arcs does not appear too difficult. The more important difference is that the placement problem solved in [8] is placement that simply avoids intersection with the environment, while we need to ensure that A is really within B " . 7 i and B " i itself (shown shaded). (To be precise, [8] also show how to determine whether P is within Q, for the case when both <p> The more important difference is that the placement problem solved in <ref> [8] </ref> is placement that simply avoids intersection with the environment, while we need to ensure that A is really within B " . 7 i and B " i itself (shown shaded). (To be precise, [8] also show how to determine whether P is within Q, for the case when both P and Q are simple polygons.) Conceptually, we would like to maintain the arrangement of B " i 's as changes, as in the previous section.
Reference: [9] <author> B. Chazelle, </author> <title> "Triangulating a simple polygon in linear time," </title> <journal> Disc. and Comp. Geom., </journal> <volume> 6, </volume> <year> 1991, </year> <pages> 485-524. </pages>
Reference-contexts: Moreover, once we can solve the problem for filled-in triangles, we can solve it for arbitrary polygons by simply triangulating each polygon in A and B as a preprocessing step, by say the method of Chazelle <ref> [9] </ref> or Garey et al. [17]. 5. The Minimization Problem Having provided methods for solving Hausdorff decision problems under Euclidean motion, we now return to the minimization problem.
Reference: [10] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir, </author> <title> "Diameter, width, closest line pair, and parametric searching," </title> <booktitle> Proc. 8th ACM Symp. on Comp. Geom., </booktitle> <year> 1992, </year> <pages> 120-129. </pages>
Reference-contexts: So, instead, we design a special parallel algorithm to determine a good set of candidate values of " at which to probe. This technique is known as parametric searching <ref> [23, 12, 13, 14, 1, 10] </ref> and, using a pipelining technique of Cole [12, 13], our application of it to the one-way minimum Hausdorff distance requires only O (log mn) probes, giving the claimed bounds. In the next section we give some notation and background. <p> The Minimization Problem Having provided methods for solving Hausdorff decision problems under Euclidean motion, we now return to the minimization problem. Here, we apply the parametric searching technique <ref> [23, 12, 13, 14, 1, 10] </ref>, a powerful tool for efficiently solving a variety of optimization problems. This tool has been applied successfully to several problems in computational geometry [1, 10]. See [23, 1, 10] for a discussion of parametric search and the details of how it is applied. <p> Here, we apply the parametric searching technique [23, 12, 13, 14, 1, 10], a powerful tool for efficiently solving a variety of optimization problems. This tool has been applied successfully to several problems in computational geometry <ref> [1, 10] </ref>. See [23, 1, 10] for a discussion of parametric search and the details of how it is applied. Parametric search applies to problems that are parameterized by some real parameter ". <p> Here, we apply the parametric searching technique [23, 12, 13, 14, 1, 10], a powerful tool for efficiently solving a variety of optimization problems. This tool has been applied successfully to several problems in computational geometry [1, 10]. See <ref> [23, 1, 10] </ref> for a discussion of parametric search and the details of how it is applied. Parametric search applies to problems that are parameterized by some real parameter ".
Reference: [11] <author> L.P. Chew and K. Kedem, </author> <title> "Improvements on approximate pattern matching problems," </title> <booktitle> 3rd Scandinavian Workshop on Algorithm Theory, Lecture Notes in Computer Science, </booktitle> <volume> 621, </volume> <publisher> Springer-Verlag, </publisher> <year> 1992, </year> <pages> 318-325. </pages>
Reference-contexts: Note though that it may be possible to solve a minimum Hausdorff distance problem without finding all such motions (see, for instance, <ref> [11] </ref>). All our methods share the same general approach. We first design a decision procedure that determines if there exists a good Euclidean transformation from A to B for a given value of " &gt; 0 (and we output such a transformation if one exists). <p> Note that even though the number of combinatorially distinct possible matches for the problem of points under translation is (n 3 ) with the L 1 metric, Chew and Kedem <ref> [11] </ref> show a way to get around this bound, solving this problem in time O (n 2 log 2 n). Their method uses a technique that avoids examining the entire set of combinatorially distinct possible matches, however it appears to depend critically on the L 1 metric.
Reference: [12] <author> R. Cole, </author> <title> "Slowing down sorting networks to obtain faster sorting algorithms," </title> <journal> J. ACM, </journal> <volume> 34(1), </volume> <year> 1987, </year> <pages> 200-208. </pages>
Reference-contexts: So, instead, we design a special parallel algorithm to determine a good set of candidate values of " at which to probe. This technique is known as parametric searching <ref> [23, 12, 13, 14, 1, 10] </ref> and, using a pipelining technique of Cole [12, 13], our application of it to the one-way minimum Hausdorff distance requires only O (log mn) probes, giving the claimed bounds. In the next section we give some notation and background. <p> So, instead, we design a special parallel algorithm to determine a good set of candidate values of " at which to probe. This technique is known as parametric searching [23, 12, 13, 14, 1, 10] and, using a pipelining technique of Cole <ref> [12, 13] </ref>, our application of it to the one-way minimum Hausdorff distance requires only O (log mn) probes, giving the claimed bounds. In the next section we give some notation and background. <p> The Minimization Problem Having provided methods for solving Hausdorff decision problems under Euclidean motion, we now return to the minimization problem. Here, we apply the parametric searching technique <ref> [23, 12, 13, 14, 1, 10] </ref>, a powerful tool for efficiently solving a variety of optimization problems. This tool has been applied successfully to several problems in computational geometry [1, 10]. See [23, 1, 10] for a discussion of parametric search and the details of how it is applied. <p> In our case, however, we can do even better than this. In particular, if the parallel algorithm A p can be designed for the weaker EREW PRAM 6 so as to run in T p steps using P processors and O (P ) memory cells, then Cole <ref> [12, 13] </ref> shows how one can implement this simulation in O (T p P + T s (T p + log P )) time.
Reference: [13] <author> R. Cole, </author> <title> "Parallel merge sort," </title> <journal> SIAM J. Comput., </journal> <volume> 17(4), </volume> <year> 1988, </year> <pages> 770-785. </pages>
Reference-contexts: So, instead, we design a special parallel algorithm to determine a good set of candidate values of " at which to probe. This technique is known as parametric searching <ref> [23, 12, 13, 14, 1, 10] </ref> and, using a pipelining technique of Cole [12, 13], our application of it to the one-way minimum Hausdorff distance requires only O (log mn) probes, giving the claimed bounds. In the next section we give some notation and background. <p> So, instead, we design a special parallel algorithm to determine a good set of candidate values of " at which to probe. This technique is known as parametric searching [23, 12, 13, 14, 1, 10] and, using a pipelining technique of Cole <ref> [12, 13] </ref>, our application of it to the one-way minimum Hausdorff distance requires only O (log mn) probes, giving the claimed bounds. In the next section we give some notation and background. <p> The Minimization Problem Having provided methods for solving Hausdorff decision problems under Euclidean motion, we now return to the minimization problem. Here, we apply the parametric searching technique <ref> [23, 12, 13, 14, 1, 10] </ref>, a powerful tool for efficiently solving a variety of optimization problems. This tool has been applied successfully to several problems in computational geometry [1, 10]. See [23, 1, 10] for a discussion of parametric search and the details of how it is applied. <p> Suppose, in addition to A s , we have a parallel comparison-based sorting method A p that is parameterized by " and runs in O (log P ) steps using P processors <ref> [13] </ref>. In our case, since we wish to sort all the double and triple events, a "comparison" involves testing if a given (double or triple) event (that is parametrized by ") comes before or after (in terms of the sweep) another event. <p> In our case, however, we can do even better than this. In particular, if the parallel algorithm A p can be designed for the weaker EREW PRAM 6 so as to run in T p steps using P processors and O (P ) memory cells, then Cole <ref> [12, 13] </ref> shows how one can implement this simulation in O (T p P + T s (T p + log P )) time. <p> Since we can use Cole's sorting algorithm to order the double and triple events in the EREW PRAM model <ref> [13] </ref>, we therefore derive the following: Theorem 7 Given point sets A and B as above, the minimum one-way Hausdorff problem under Euclidean motion can be solved in time O (m 3 n 2 log 2 mn); the minimum (bidirectional) Hausdorff problem under Euclidean motion can be solved in time O
Reference: [14] <author> R. Cole, J. Salowe, W. Steiger, and E. Szemeredi, </author> <title> "An Optimal-Time Algorithm for Slope Selection," </title> <journal> SIAM J. Comput., </journal> <volume> 18, </volume> <year> 1989, </year> <pages> 792-810. </pages>
Reference-contexts: So, instead, we design a special parallel algorithm to determine a good set of candidate values of " at which to probe. This technique is known as parametric searching <ref> [23, 12, 13, 14, 1, 10] </ref> and, using a pipelining technique of Cole [12, 13], our application of it to the one-way minimum Hausdorff distance requires only O (log mn) probes, giving the claimed bounds. In the next section we give some notation and background. <p> The Minimization Problem Having provided methods for solving Hausdorff decision problems under Euclidean motion, we now return to the minimization problem. Here, we apply the parametric searching technique <ref> [23, 12, 13, 14, 1, 10] </ref>, a powerful tool for efficiently solving a variety of optimization problems. This tool has been applied successfully to several problems in computational geometry [1, 10]. See [23, 1, 10] for a discussion of parametric search and the details of how it is applied.
Reference: [15] <author> T.H. Cormen, C.E. Leiserson, and R.L. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> MIT Press (Cambridge, </publisher> <address> Mass.: </address> <year> 1990). </year>
Reference-contexts: As mentioned above, this can be found by keeping track of the depth of vertices in the dynamically-changing arrangement A (). We therefore will store all the vertices of the current A () in a dynamic dictionary V , implemented, say, using a red-black tree <ref> [15, 18, 26] </ref>. Each vertex v 2 V is labeled with the pair (i; j) such that v is defined by the intersection of circle i and j.
Reference: [16] <author> H. Edelsbrunner, </author> <title> Algorithms in Combinatorial Geometry, </title> <publisher> Springer-Verlag, </publisher> <address> NY, </address> <year> 1987. </year>
Reference-contexts: For a fixed , S () is therefore simply an intersection of a finite number of unions of discs of radius ". Thus, S () is either ; or the boundary of S () consists of arcs of circles of radius ". Define A () to be the arrangement <ref> [16] </ref> formed by overlaying all the boundaries of the sets B " i () on each other. In addition, define the depth of a point p to be the number of B " i () sets that contain p (where containment includes points on the boundary). <p> The intersection point of the three arcs is by definition equidistant from p, q, and r and therefore corresponds to a vertex in the Voronoi diagram <ref> [16, 24] </ref> of the union of the three sets S l () at this .
Reference: [17] <author> M.R. Garey, D.S. Johnson, F.P. Preparata, and R.E. Tarjan, </author> <title> "Triangulating a simple polygon," </title> <journal> Information Processing Letters, </journal> <volume> 7(4), </volume> <year> 1978, </year> <pages> 175-179. </pages>
Reference-contexts: Moreover, once we can solve the problem for filled-in triangles, we can solve it for arbitrary polygons by simply triangulating each polygon in A and B as a preprocessing step, by say the method of Chazelle [9] or Garey et al. <ref> [17] </ref>. 5. The Minimization Problem Having provided methods for solving Hausdorff decision problems under Euclidean motion, we now return to the minimization problem. Here, we apply the parametric searching technique [23, 12, 13, 14, 1, 10], a powerful tool for efficiently solving a variety of optimization problems.
Reference: [18] <author> L.J. Guibas and R. Sedgewick, </author> <title> "A dichromatic framework for balanced trees," </title> <booktitle> Proc. 19th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1978, </year> <pages> 8-21. </pages>
Reference-contexts: As mentioned above, this can be found by keeping track of the depth of vertices in the dynamically-changing arrangement A (). We therefore will store all the vertices of the current A () in a dynamic dictionary V , implemented, say, using a red-black tree <ref> [15, 18, 26] </ref>. Each vertex v 2 V is labeled with the pair (i; j) such that v is defined by the intersection of circle i and j.
Reference: [19] <author> P.J. Heffernan and S. Schirra, </author> <title> "Approximate decision algorithms for point set congruence," </title> <booktitle> Proc. 8th ACM Symp. on Comp. Geom., </booktitle> <year> 1992, </year> <type> 93-101. Unpublished manuscript, </type> <year> 1991. </year>
Reference: [20] <author> D.P. Huttenlocher, K. Kedem, and J. Kleinberg, </author> <title> "On dynamic Voronoi diagrams and the minimum Hausdorff distance for point sets under Euclidean motion in the plane" Proc. </title> <booktitle> 8th ACM Symp. on Comp. Geom., </booktitle> <year> 1992, </year> <pages> 110-119. </pages>
Reference-contexts: This improves the previous algorithm of Huttenlocher, Kedem, and Kleinberg <ref> [20] </ref> for point sets by nearly a linear factor (as their method runs in O ((m + n) 6 log mn) time), 2 and it improves the previous algorithm of Alt, Behrends, and Blomer [2] for line segments by nearly a cubic factor (as their method runs in O (m 4 <p> The intersection point of the three arcs is by definition equidistant from p, q, and r and therefore corresponds to a vertex in the Voronoi diagram [16, 24] of the union of the three sets S l () at this . Huttenlocher et al. <ref> [20] </ref> show that if one has k sets of n points moving rigidly in the plane, then there are at most O (n 2 k 2 log fl k) changes in the Voronoi diagram of all the points.
Reference: [21] <author> D.P. Huttenlocher, K. Kedem, and M. Sharir, </author> <title> "The upper envelope of Voronoi surfaces and its applications," </title> <journal> Disc. and Comp. Geom., </journal> <volume> vol. 9, no. 3, </volume> <pages> pp. 267-291. </pages>
Reference-contexts: The minimum Hausdorff distance under Euclidean motion is then defined as D (A; B) = min H (g (A); B); where E 2 is the group of planar Euclidean motions and g (A) is the motion applied to A. By simple arguments similar to those in <ref> [21] </ref>, one can show that D (A; B) is a metric. 3 Using this notation, the decision problem for the one-way Hausdorff distance can be restated as, "Given A and B in the plane and an error bound " &gt; 0, is there a transformation g 2 E 2 such that <p> It is possible that S (0) is non-empty, but this can be determined by the cubic-time algorithm of <ref> [21] </ref> for computing the minimum Hausdorff distance under translation. Otherwise, if S () is ever to become non-empty, it will be at a combinatorial change to the arrangement A (). <p> There are lower bound constructions showing that the number of combinatorially distinct possible matches for these problems are (n 3 ), (n 4 ), (n 5 ), and (n 6 ), repectively (the first lower bound was shown originally in <ref> [21] </ref>; constructions for all the lower bounds appear in [25]).
Reference: [22] <author> K. Imai, S. Sumino, and H. Imai, </author> <title> "Minimax geometric fitting of two corresponding sets of points," </title> <booktitle> Proc. 5th ACM Symp. on Comp. Geom., </booktitle> <year> 1989, </year> <pages> 266-275. </pages>
Reference: [23] <author> N. Megiddo, </author> <title> "Applying parallel computation algorithms in the design of serial algorithms," </title> <journal> J. ACM, </journal> <volume> 30(4), </volume> <year> 1983, </year> <pages> 852-866. </pages>
Reference-contexts: So, instead, we design a special parallel algorithm to determine a good set of candidate values of " at which to probe. This technique is known as parametric searching <ref> [23, 12, 13, 14, 1, 10] </ref> and, using a pipelining technique of Cole [12, 13], our application of it to the one-way minimum Hausdorff distance requires only O (log mn) probes, giving the claimed bounds. In the next section we give some notation and background. <p> The Minimization Problem Having provided methods for solving Hausdorff decision problems under Euclidean motion, we now return to the minimization problem. Here, we apply the parametric searching technique <ref> [23, 12, 13, 14, 1, 10] </ref>, a powerful tool for efficiently solving a variety of optimization problems. This tool has been applied successfully to several problems in computational geometry [1, 10]. See [23, 1, 10] for a discussion of parametric search and the details of how it is applied. <p> Here, we apply the parametric searching technique [23, 12, 13, 14, 1, 10], a powerful tool for efficiently solving a variety of optimization problems. This tool has been applied successfully to several problems in computational geometry [1, 10]. See <ref> [23, 1, 10] </ref> for a discussion of parametric search and the details of how it is applied. Parametric search applies to problems that are parameterized by some real parameter ".
Reference: [24] <author> F.P. Preparata and M.I. Shamos, </author> <title> Computational Geometry: An Introduction, </title> <publisher> Springer-Verlag, </publisher> <address> NY, </address> <year> 1985. </year>
Reference-contexts: The intersection point of the three arcs is by definition equidistant from p, q, and r and therefore corresponds to a vertex in the Voronoi diagram <ref> [16, 24] </ref> of the union of the three sets S l () at this .
Reference: [25] <author> W.J. Rucklidge, </author> <title> "Lower bounds for the complexity of the Hausdorff distance," </title> <booktitle> to appear in Proc. 5th Canadian Conf. on Comp. Geom., </booktitle> <year> 1993. </year>
Reference-contexts: Recent work by Rucklidge <ref> [25] </ref> shows that our bounds for the one-way minimum Hausdorff distance are nearly tight (i.e. within log factors) among those algorithms that find all motions bringing A to within " of B. <p> There are lower bound constructions showing that the number of combinatorially distinct possible matches for these problems are (n 3 ), (n 4 ), (n 5 ), and (n 6 ), repectively (the first lower bound was shown originally in [21]; constructions for all the lower bounds appear in <ref> [25] </ref>).
Reference: [26] <author> R.E. Tarjan, </author> <title> Data Structures and Network Algorithms, </title> <publisher> SIAM, </publisher> <address> Philadelphia, PA 1983. </address> <month> 12 </month>
Reference-contexts: As mentioned above, this can be found by keeping track of the depth of vertices in the dynamically-changing arrangement A (). We therefore will store all the vertices of the current A () in a dynamic dictionary V , implemented, say, using a red-black tree <ref> [15, 18, 26] </ref>. Each vertex v 2 V is labeled with the pair (i; j) such that v is defined by the intersection of circle i and j.
References-found: 26

