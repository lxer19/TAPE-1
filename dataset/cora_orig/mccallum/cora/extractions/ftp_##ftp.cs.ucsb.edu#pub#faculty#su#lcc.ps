URL: ftp://ftp.cs.ucsb.edu/pub/faculty/su/lcc.ps
Refering-URL: ftp://ftp.cs.ucsb.edu/pub/faculty/su/index.html
Root-URL: http://www.cs.ucsb.edu
Title: Linear Constraint Query Languages Expressive Power and Complexity  
Author: Stephane Grumbach and Jianwen Su and Christophe Tollu 
Address: 3 Universite Paris-Nord, Villetaneuse k  
Affiliation: 1 University of Toronto and INRIA 2 University of California at Santa Barbara  
Abstract: We give an AC 0 upper bound on the complexity of first-oder queries over (infinite) databases defined by restricted linear constraints. This result enables us to deduce the non-expressibility of various usual queries, such as the parity of the cardinality of a set or the connectivity of a graph in first-order logic with linear constraints.
Abstract-found: 1
Intro-found: 1
Reference: [AHV94] <author> S. Abiteboul, R. Hull, and V. Vianu. </author> <title> Foundations of Databases. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The proof (which is omitted) is quite similar to that of the equivalence of the classical relational algebra and calculus over finite structures (see <ref> [AHV94] </ref>). Theorem 4.1 FO L = ALG L . We illustrate the above result with the following example. <p> Theorem 5.2 extends the now classical result that the relational algebra has AC 0 data complexity over finite structures. Before presenting the proof of Theorem 5.2, we briefly review the proof in the case of the relational algebra over finite structures as it is sketched in <ref> [AHV94] </ref>. In the case of finite relations, the circuits are constructed uniformly as follows.
Reference: [Ban78] <author> F. Bancilhon. </author> <title> On the completeness of query languages for relational data bases. </title> <booktitle> In Proc. 7th Symp. on Mathematical Foundations of Computer Science, Lecture Notes in Computer Science, </booktitle> <pages> pages 112-123. </pages> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference-contexts: Consequently, they define a drastically restricted subclass of recursive databases, called "highly symmetric", whose behavior with respect to completeness (a version of Chandra and Harel's QL [CH80]) and BP-completeness <ref> [Ban78, Par78] </ref> (first-order logic) resemble the class of finite databases.
Reference: [Bea76] <author> D. R. Bean. </author> <title> Recursive Euler and Hamilton paths. </title> <journal> In Proc. American Mathematical Society, </journal> <volume> volume 55, </volume> <pages> pages 385-394, </pages> <year> 1976. </year>
Reference-contexts: Indeed, it has been proved that switching from finite graphs to recursive ones can tremendously increase the data complexity of usual problems. For instance, the existence of a Euler path (which can be decided in polynomial time in the finite case) becomes 0 3 -complete, thus undecidable <ref> [Bea76] </ref>, while Hamiltonicity (a well-known NP-complete problem for finite graphs) becomes 1 1 -complete, thus even not in the arithmetical hierarchy [Har91]. More recently, Hirst and Harel [HH93] studied the recursive structures from a database point of view. Some of their results are worth mentioning.
Reference: [BKR86] <author> M. Ben-Or, D. Kozen, and J. Reif. </author> <title> The complexity of elementary algebra and geometry. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 32(2) </volume> <pages> 251-264, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: It was shown in [KKR90] that first-order queries with polynomial constraints (over the real numbers) have NC data complexity. This result follows from techniques, first introduced in <ref> [BKR86] </ref>, showing that the theory of real closed fields of fixed dimension (number of variables) can be decided in NC. The same upper bound of course holds in the case of linear constraints. Theorem 5.1 [BKR86, KKR90] FO L is in NC over the class of linear constraint inputs. <p> This result follows from techniques, first introduced in [BKR86], showing that the theory of real closed fields of fixed dimension (number of variables) can be decided in NC. The same upper bound of course holds in the case of linear constraints. Theorem 5.1 <ref> [BKR86, KKR90] </ref> FO L is in NC over the class of linear constraint inputs. We next present the main theorem of this section which applies to a restricted class of inputs that is of practical interest, namely, k-bounded linear constraint inputs.
Reference: [CH80] <author> A. K. Chandra and D. Harel. </author> <title> Computable queries for relational data bases. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 21(2) </volume> <pages> 156-78, </pages> <year> 1980. </year>
Reference-contexts: Consequently, they define a drastically restricted subclass of recursive databases, called "highly symmetric", whose behavior with respect to completeness (a version of Chandra and Harel's QL <ref> [CH80] </ref>) and BP-completeness [Ban78, Par78] (first-order logic) resemble the class of finite databases.
Reference: [Cod70] <author> E.F. Codd. </author> <title> A relational model of data for large shared data banks. </title> <journal> Communications of ACM, </journal> <volume> 13:6:377-387, </volume> <year> 1970. </year>
Reference-contexts: 1 Introduction Since its inception in the early 70's, Codd's relational model of data <ref> [Cod70] </ref> has been the standard framework of much work on relational databases and query languages. The almost contemporary renewal of "finite model theory" (which dates back to the Ph.D. dissertation of Ron Fagin in 1973) has offered a logical counterpart to this development. <p> We introduce in this section an algebra ALG L for finitely representable databases, and prove its equivalence with FO L . This algebra is similar to Codd's algebra for finite relations <ref> [Cod70] </ref>, but the operators apply to finite representations of possibly infinite sets. The algebra consists of the following operations: cartesian product, fi, selections ( = , &lt; , and + ), projection, , set operations (union, [, intersection, ", and set difference, ), and rename, .
Reference: [Col75] <author> G. E. Collins. </author> <title> Quantifier elimination for real closed fields by cylindric decompositions. </title> <booktitle> In Proc. 2nd GI Conf. Automata Theory and Formal Languages, volume 35 of Lecture Notes in Computer Science, </booktitle> <pages> pages 134-83. </pages> <publisher> Springer-Verlag, </publisher> <year> 1975. </year>
Reference-contexts: The proof of this result is based on a canonical encoding of dense order instances into finite instances. This is possible since dense order instances admit very simple geometrical decompositions in terms of atomic "cells" <ref> [Col75] </ref> of sim-ple shapes. Note that the encoding itself is not in AC 0 . <p> In particular, k 0 = k+2 X j : (When r &lt; k, k 0 6 O (k r ).) Therefore each cell (in the sense of <ref> [Col75] </ref>) can be defined by a tuple with no more than 2k 0 constraints. Assume that R is defined with ` 6 n different constraints. <p> There are 3` possibilities for each constraint, thus it leads to at most (3`) 2k 0 possible cells. The number of cells is therefore bounded by a polynomial function in n (see also <ref> [Col75] </ref>), and the complement can easily be computed in AC 0 (using only operations in ALG L as shown in Example 4.2). ffi We are now ready to prove Theorem 5.2. Proof of Theorem 5.2: The proof is by induction on the structure of the formula expressing the query.
Reference: [FSS84] <author> M. Furst, J. B. Saxe, and M. Sipser. </author> <title> Parity, circuits, and the polynomial-time hierarchy. </title> <journal> Math. Syst. Theory, </journal> <volume> 17 </volume> <pages> 13-27, </pages> <year> 1984. </year>
Reference-contexts: The boolean query [] (R) 6= ? is true iff a fi b 0 = b. The size of relation R is essentially the size of the three numbers a; b, and b 0 . Multiplication of numbers in binary notation is not in AC 0 <ref> [FSS84] </ref>. We can therefore conclude that first-order logic over linear constraint databases is not in AC 0 . Theorem 5.2 extends the now classical result that the relational algebra has AC 0 data complexity over finite structures. <p> The proof of these results uses the AC 0 upper bound on data complexity (Theorem 5.2) and first order reductions from boolean functions, such as parity which is known to be outside AC 0 <ref> [FSS84] </ref>. Let = fRg be a signature where R is a unary relation symbol. For a database instance I of , the parity query answers "yes" if I (R) is finite and has an even cardinality.
Reference: [GS94] <author> S. Grumbach and J. Su. </author> <title> Finitely representable databases (extended abstract). </title> <booktitle> In Proc. 13th ACM Symp. on Principles of Database Systems, </booktitle> <year> 1994. </year>
Reference-contexts: The expressive power and the complexity of first-order logic over finitely representable databases is still far from being clearly understood. Nonetheless, a series of complexity and/or expressibility bounds have been exhibited in <ref> [KKR90, KG94, GS94, GS95] </ref>. <p> The latter result, combined with lower bounds on the complexity of queries like Parity and Connectivity immediately yields non-expressibility corollaries <ref> [GS94] </ref>. It seems highly probable that similar non-expressibility results still hold when the language of constraints is enriched with addition and even multiplication. In the present paper, we aim to make one step forward in this direction by considering linear constraint (expressed in f=; 6; +g) instead of dense-order ones. <p> We distinguish between logical predicates (e.g., =; 6) in L and relations in . We next introduce a restricted definition of finitely representable structures <ref> [GS94] </ref>. We consider expansions of D to . Intuitively, the relations in constitute a database in the context of D. Definition 3.1 Let S D k be some k-ary relation. <p> Note that when k = 0, K 0 is exactly the set of dense order constraints which were studied in <ref> [KKR90, KG94, GS94] </ref>.
Reference: [GS95] <author> S. Grumbach and J. Su. </author> <note> Finitely representable databases, 1995. Full version of [GS94], invited to JCSS (Special Issue of PODS '94). </note>
Reference-contexts: The expressive power and the complexity of first-order logic over finitely representable databases is still far from being clearly understood. Nonetheless, a series of complexity and/or expressibility bounds have been exhibited in <ref> [KKR90, KG94, GS94, GS95] </ref>. <p> It is easy to verify that parity on I answers "yes" iff J (G) is connected. Finally, for region connectivity in dimension k &gt; 2, it is shown in <ref> [GS95] </ref> that it is not in AC 0 , by a reduction from the boolean function majority. ffi The previous result can be generalized to various contexts.
Reference: [Har91] <author> D. Harel. </author> <title> Hamiltonian paths in infinite graphs. </title> <journal> Israel Journal of Mathematics, </journal> <volume> 76 </volume> <pages> 317-336, </pages> <year> 1991. </year>
Reference-contexts: For instance, the existence of a Euler path (which can be decided in polynomial time in the finite case) becomes 0 3 -complete, thus undecidable [Bea76], while Hamiltonicity (a well-known NP-complete problem for finite graphs) becomes 1 1 -complete, thus even not in the arithmetical hierarchy <ref> [Har91] </ref>. More recently, Hirst and Harel [HH93] studied the recursive structures from a database point of view. Some of their results are worth mentioning.
Reference: [HH93] <author> T. Hirst and D. Harel. </author> <title> Completeness results for recursive data bases. </title> <booktitle> In Proc. 12th ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 244-252, </pages> <year> 1993. </year>
Reference-contexts: Recursive structures (i.e. relational structures over a countable domain, say the set of natural numbers, where every relation is a recursive set of tuples) have been presented by Hirst and Harel <ref> [HH93] </ref> as a good alternative to finite structures. They have come up with an important trade-off between the class of structures taken as semantics and the class of admissible queries, which poses the challenging problem of exhibiting interesting classes that lie between the recursive and the highly symmetric ones. <p> More recently, Hirst and Harel <ref> [HH93] </ref> studied the recursive structures from a database point of view. Some of their results are worth mentioning.
Reference: [HH94] <author> T. Hirst and D. Harel. </author> <title> Recursive model theory, 1994. </title> <type> Draft. </type>
Reference-contexts: Seemingly, the constraint database model offers a framework for the definition of such classes. In their notes on recursive model theory <ref> [HH94] </ref>, Hirst and Harel prove that the compactness theorem fails for the class of all countable recursive structures. Their argument does not lend itself naturally to arbitrary subclasses of countable structures. J.
Reference: [Joh90] <author> D. Johnson. </author> <title> A catalog of complexity classes. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume A, </booktitle> <address> Elsevier-North Hol-land, </address> <year> 1990. </year>
Reference-contexts: For more details on complexity classes, we refer to <ref> [Joh90] </ref>. 2 Restricted Classes of Models In this section, we emphasize some logical consequences of the decision to work with subclasses of countable models. In particular, we investigate conditions under which the compactness or the completeness theorem do not hold.
Reference: [KG94] <author> P. C. Kanellakis and D. Q. Goldin. </author> <title> Constraint programming and database query languages. </title> <booktitle> In Proc. 2nd Conference on Theoretical Aspects of Computer Software (TACS), </booktitle> <month> April </month> <year> 1994. </year> <note> (To appear in a LNCS volume, Springer-Verlag). </note>
Reference-contexts: The constraint database model, introduced by Kanellakis, Kuper and Revesz in their seminal paper [KKR90] and convincingly advocated in <ref> [KG94] </ref>, is another powerful generalization of Codd's relational model. In this new paradigm, instead of tuples, queries act on "generalized tuples" expressed as quantifier-free first-order constraints in a decidable theory adequate to definite purposes. <p> The expressive power and the complexity of first-order logic over finitely representable databases is still far from being clearly understood. Nonetheless, a series of complexity and/or expressibility bounds have been exhibited in <ref> [KKR90, KG94, GS94, GS95] </ref>. <p> Note that when k = 0, K 0 is exactly the set of dense order constraints which were studied in <ref> [KKR90, KG94, GS94] </ref>. <p> Note that when k = 0, K 0 is exactly the set of dense order constraints which were studied in [KKR90, KG94, GS94]. For this class of constraints, an upper bound on the complexity of the first-order queries expressed in the language f6g [ Q is known: Theorem 3.1 <ref> [KG94] </ref> The data complexity of first order logic in the language f6g [ Q over the family K 0 of dense order instances is in AC 0 . The proof of this result is based on a canonical encoding of dense order instances into finite instances. <p> This is possible since dense order instances admit very simple geometrical decompositions in terms of atomic "cells" [Col75] of sim-ple shapes. Note that the encoding itself is not in AC 0 . A specific algebra working on finite structures is introduced in <ref> [KG94] </ref>, which simulates the manipulation of dense order instances. 4 First-order Query Languages We define FO L as first-order logic with linear constraints, i.e. over the language L = f6; +g [Q . <p> The algebra operations are performed on sets of generalized tuples, i.e. on quantifier-free formulas in DNF. But unlike Kanellakis and Goldin <ref> [KG94] </ref>, we do not assume special encoding for relations and generalized tuples. On the other hand, our algebra can also be viewed as a simplified sublanguage of the algebra of Paredaens, Van den Bussche and Van Gucht [PVV94] (which also includes multiplication).
Reference: [KG95] <author> P. C. Kanellakis and D. Q. </author> <title> Goldin. </title> <type> Personal communication, </type> <year> 1995. </year>
Reference-contexts: We can therefore conclude that the data complexity of first-order queries over linear constraint databases is not in AC 0 in general. Kanellakis and Goldin <ref> [KG95] </ref> suggested to study the data complexity of first-order queries over linear constraint databases in the case where integers are encoded in unary. We prove that under the latter encoding assumption, the AC 0 upper-bound holds in the general case. <p> Indeed, they result in the definition of new constraints, with new parameters obtained from old parameters by addition, or iterated addition. It follows from Lemmas 5.4 and 5.5, that the two operations can be computed in uniform AC 0 . ffi Kanellakis and Goldin <ref> [KG95] </ref> suggested to study the data complexity of first-order queries over linear constraint databases in the case where integers are encoded in unary. In the remainder of the section, we briefly discuss the data complexity of FO L for arbitrary linear constraint databases, i.e. without the restriction of being k-bounded.
Reference: [KKR90] <author> P. Kanellakis, G. Kuper, and P. Revesz. </author> <title> Constraint query languages. </title> <booktitle> In Proc. 9th ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 299-313, </pages> <address> Nashville, </address> <year> 1990. </year>
Reference-contexts: The constraint database model, introduced by Kanellakis, Kuper and Revesz in their seminal paper <ref> [KKR90] </ref> and convincingly advocated in [KG94], is another powerful generalization of Codd's relational model. In this new paradigm, instead of tuples, queries act on "generalized tuples" expressed as quantifier-free first-order constraints in a decidable theory adequate to definite purposes. <p> The expressive power and the complexity of first-order logic over finitely representable databases is still far from being clearly understood. Nonetheless, a series of complexity and/or expressibility bounds have been exhibited in <ref> [KKR90, KG94, GS94, GS95] </ref>. <p> The structure A is finitely representable (over D) if for every relation symbol R in , R A is L-representable (over D). Kanellakis, Kuper, and Revesz <ref> [KKR90] </ref> introduced the concept of a k-ary generalized tuple, which is a constraint expressed as a conjunction of atomic formulas in L over k variables. A k-ary finitely representable relation (or generalized relation in [KKR90]) is then a finite set of k-ary generalized tuples. <p> Kanellakis, Kuper, and Revesz <ref> [KKR90] </ref> introduced the concept of a k-ary generalized tuple, which is a constraint expressed as a conjunction of atomic formulas in L over k variables. A k-ary finitely representable relation (or generalized relation in [KKR90]) is then a finite set of k-ary generalized tuples. In the remainder of the paper, we focus on the language L = f6; +g [ Q and the L-structure D = hQ; 6; +; (q) q2Q i. <p> Note that when k = 0, K 0 is exactly the set of dense order constraints which were studied in <ref> [KKR90, KG94, GS94] </ref>. <p> We present two results: (i) a known NC bound <ref> [KKR90] </ref> in the general case, and (ii) a new AC 0 bound for a restricted class of inputs, namely k-bounded instances for a fixed k. The proof of this last result relies on the algebra introduced in the previous section. <p> It was shown in <ref> [KKR90] </ref> that first-order queries with polynomial constraints (over the real numbers) have NC data complexity. This result follows from techniques, first introduced in [BKR86], showing that the theory of real closed fields of fixed dimension (number of variables) can be decided in NC. <p> This result follows from techniques, first introduced in [BKR86], showing that the theory of real closed fields of fixed dimension (number of variables) can be decided in NC. The same upper bound of course holds in the case of linear constraints. Theorem 5.1 <ref> [BKR86, KKR90] </ref> FO L is in NC over the class of linear constraint inputs. We next present the main theorem of this section which applies to a restricted class of inputs that is of practical interest, namely, k-bounded linear constraint inputs.
Reference: [Mos57] <author> A. Mostowski. </author> <title> On recursive models of formalized arithmetics. </title> <journal> Bulletin de l'Academie Polonaise des Sciences, </journal> <volume> III, 5 </volume> <pages> 705-710, </pages> <year> 1957. </year>
Reference-contexts: The following theorem, due to Mostowski <ref> [Mos57] </ref> and Vaught [Vau60], establishes that, for any reasonable class of "constructive structures", the completeness theorem fails: Theorem 2.1 (Mostowski [Mos57] and Vaught [Vau60]) Let V be a set of - sentences. If V r:e: V V fin , then V is not recursively enumerable. <p> The following theorem, due to Mostowski <ref> [Mos57] </ref> and Vaught [Vau60], establishes that, for any reasonable class of "constructive structures", the completeness theorem fails: Theorem 2.1 (Mostowski [Mos57] and Vaught [Vau60]) Let V be a set of - sentences. If V r:e: V V fin , then V is not recursively enumerable. Moreover, if V r:e: V V p:r: , then V is not arithmetical. Let us now consider with more details the class Str rec .
Reference: [Par78] <author> J. Paredaens. </author> <title> On the expressive power of the relational algebra. </title> <journal> Information Processing Letters, </journal> <volume> 7(2) </volume> <pages> 107-111, </pages> <month> February </month> <year> 1978. </year>
Reference-contexts: Consequently, they define a drastically restricted subclass of recursive databases, called "highly symmetric", whose behavior with respect to completeness (a version of Chandra and Harel's QL [CH80]) and BP-completeness <ref> [Ban78, Par78] </ref> (first-order logic) resemble the class of finite databases.
Reference: [PVV94] <author> J. Paredaens, J. Van den Bussche, and D. Van Gucht. </author> <title> Towards a theory of spatial database queries. </title> <booktitle> In Proc. 13th ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 279-88, </pages> <year> 1994. </year>
Reference-contexts: But unlike Kanellakis and Goldin [KG94], we do not assume special encoding for relations and generalized tuples. On the other hand, our algebra can also be viewed as a simplified sublanguage of the algebra of Paredaens, Van den Bussche and Van Gucht <ref> [PVV94] </ref> (which also includes multiplication). The algebra will serve as a mere technical tool for the proof of the main theorem. We should note that it has no important preservation property with respect to the size of (the representation of) a database or k-boundedness.
Reference: [PVV95] <author> J. Paredaens, J. Van den Bussche, and D. Van Gucht. </author> <title> First-order Queries on Finite Structures over the Reals. </title> <booktitle> In Proc. 10th IEEE Symp. on Logic in Computer Science, to appear. </booktitle>
Reference-contexts: As a consequence, we get the following corollary. Theorem 6.1 Parity, graph connectivity, and region connectivity are not first-order definable with linear constraints. Note that the first-order undefinability of parity and graph connectivity has been obtained independently by Paredaens, Van den Bussche and Van Gucht <ref> [PVV95] </ref>. The main theorem (Theorem 5.2) does not carry over in presence of multiplication. Nevertheless, we conjecture that its corollary (Theorem 6.1) holds for polynomial constraints. Proofs in this paper are made in the case of the rational numbers.
Reference: [Sch86] <author> A. Schrijver. </author> <title> Theory of Linear and Integer Programming. </title> <publisher> Wiley, </publisher> <address> Chichester, </address> <year> 1986. </year>
Reference-contexts: We apply the well-known Fourier-Motzkin Elimination method <ref> [Sch86] </ref> (see below) to eliminate one by one all existentially quantified variables x C 1 ; ; x C nk in each of the formulas 9x C 1 9x C nk t i . Each tuple t i then results in t 0 i . <p> If e = A!B e 1 , then e (I) = e 1 (I)[x A =x B ] (all occurrences of x A are replaced by x B ). The Fourier-Motzkin elimination method (see for instance <ref> [Sch86] </ref>, pp. 155-157) works as follows.
Reference: [Va94] <author> J. Vaananen. </author> <type> Personal communication. </type>
Reference-contexts: In their notes on recursive model theory [HH94], Hirst and Harel prove that the compactness theorem fails for the class of all countable recursive structures. Their argument does not lend itself naturally to arbitrary subclasses of countable structures. J. Vaananen <ref> [Va94] </ref> suggested that the compactness theorem should fail for any subclass of countable structures containing all finite structures and no infinite countable structure elementary equivalent to a fixed (infinite) locally finite structure (a structure is locally finite if every sentence of its theory has a finite model). 3 Linear Constraint Databases
Reference: [Vau60] <author> R. L. Vaught. </author> <title> Sentences true in all constructive models. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 25(1) </volume> <pages> 39-53, </pages> <month> March </month> <year> 1960. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: The following theorem, due to Mostowski [Mos57] and Vaught <ref> [Vau60] </ref>, establishes that, for any reasonable class of "constructive structures", the completeness theorem fails: Theorem 2.1 (Mostowski [Mos57] and Vaught [Vau60]) Let V be a set of - sentences. If V r:e: V V fin , then V is not recursively enumerable. <p> The following theorem, due to Mostowski [Mos57] and Vaught <ref> [Vau60] </ref>, establishes that, for any reasonable class of "constructive structures", the completeness theorem fails: Theorem 2.1 (Mostowski [Mos57] and Vaught [Vau60]) Let V be a set of - sentences. If V r:e: V V fin , then V is not recursively enumerable. Moreover, if V r:e: V V p:r: , then V is not arithmetical. Let us now consider with more details the class Str rec .
References-found: 24

