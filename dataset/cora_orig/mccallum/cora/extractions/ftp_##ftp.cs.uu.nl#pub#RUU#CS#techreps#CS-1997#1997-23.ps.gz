URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1997/1997-23.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: deFluiter@cqm.nl  e-mail: hansb@cs.ruu.nl  
Title: Parallel Algorithms for Treewidth Two  
Author: Babette de Fluiter Hans L. Bodlaender 
Address: P.O. Box 414, 5600 AK Eindhoven, the Netherlands  P.O. Box 80.089, 3508 TB Utrecht, the Netherlands  
Affiliation: Centre for Quantitative Methods  Department of Computer Science, Utrecht University  
Abstract: In this paper we present a parallel algorithm that decides whether a graph G has treewidth at most two, and if so, construct a tree decomposition or path decomposition of minimum width of G. The algorithm uses O(n) operations and O(log n log fl n) time on an EREW PRAM, or O(log n) time on a CRCW PRAM. The algorithm makes use of the resemblance between series parallel graphs and partial two-trees. It is a (non-trivial) extension of the parallel algorithm for series parallel graphs that is presented in [8]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. R. Abrahamson, N. Dadoun, D. G. Kirkpatrick, and T. Przytycka. </author> <title> A simple parallel tree contraction algorithm. </title> <editor> J. </editor> <booktitle> Algorithms, </booktitle> <address> 10:287302, </address> <year> 1989. </year>
Reference-contexts: A connected simple graph has treewidth one if and only if it is a tree, and a tree can be recognized by using a tree contraction algorithm. This takes O (log n) time with O (n) operations on an EREW PRAM <ref> [1] </ref>. One can easily construct a tree decomposition of a tree in O (1) time with O (n) operations on an EREW PRAM. The algorithm can be modified such that it can be used on input graphs which are not necessarily connected (see also Section 4).
Reference: [2] <author> S. Arnborg, B. Courcelle, A. Proskurowski, and D. Seese. </author> <title> An algebraic theory of graph reduction. </title> <journal> J. ACM, </journal> <volume> 40:11341164, </volume> <year> 1993. </year>
Reference-contexts: These algorithms run in the same time and resource bounds as the algorithms for treewidth two. A central technique in this paper is graph reduction, introduced in <ref> [2] </ref>. In [7] and [9] it is shown how the technique can be used to obtain parallel algorithms for graphs of bounded treewidth.
Reference: [3] <author> S. Arnborg, J. Lagergren, and D. Seese. </author> <title> Easy problems for tree-decomposable graphs. </title> <editor> J. </editor> <booktitle> Algorithms, </booktitle> <address> 12:308340, </address> <year> 1991. </year>
Reference-contexts: A large number of interesting and important graph problems can be dealt in this way, including CHROMATIC NUMBER, MAX IMUM CLIQUE, MAXIMUM INDEPENDENT SET, HAMILTONIAN CIRCUIT, STEINER TREE, LONGEST PATH, etc. See <ref> [3, 10, 9] </ref>. With the results of this paper, this implies that we can solve the problems described above on graphs of treewidth at most two with the same resource bounds as the algorithm for finding a tree decomposition of width two.
Reference: [4] <author> S. Arnborg and A. Proskurowski. </author> <title> Characterization and recognition of partial 3-trees. </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 7:305314, </volume> <year> 1986. </year>
Reference-contexts: Sequentially, there exist linear time algorithms for each fixed k that, when given a graph G, decide whether the treewidth of G is at most k, and if so, build a tree decomposition of minimum width for G. Practical algorithms exist for k = 1, 2, 3, and 4 <ref> [4, 16, 17] </ref>; in [6], linear time algorithms are given for each fixed k. fl This research was carried out while the second author was working in the Department of Computer Science at Utrecht University. <p> and show how a tree decomposition of width at most two is constructed. (Also, the counting arguments needed for showing the time bounds for this algorithm are different from those of the algorithm in [8].) It is interesting to note that the sequential algorithm to recognize graphs of treewidth two <ref> [4, 16] </ref> is also based upon a (much smaller) set of graph reductions. This paper is organized as follows. In Section 2 we start with definitions and preliminary results.
Reference: [5] <author> H. L. Bodlaender. </author> <title> NC-algorithms for graphs with small treewidth. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Proceedings 14th International Workshop on Graph-Theoretic Concepts in Computer Science WG'88, </booktitle> <pages> pages 110. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 344, </volume> <year> 1988. </year>
Reference-contexts: Given a tree decomposition of bounded width of a graph, many (even NP-hard) problems can be solved sequentially in linear time, and in parallel in O (log n) time with O (n) operations on an EREW PRAM, where n denotes the number of vertices of the graph (see e.g. <ref> [5, 9] </ref>) (the number of operations that an algorithm uses is the product of the number of processors and the time it uses). Therefore, the problem of finding a tree decomposition of bounded width of a graph is well studied.
Reference: [6] <author> H. L. Bodlaender. </author> <title> A linear time algorithm for finding tree-decompositions of small treewidth. </title> <journal> SIAM J. Comput., </journal> <volume> 25:13051317, </volume> <year> 1996. </year>
Reference-contexts: Practical algorithms exist for k = 1, 2, 3, and 4 [4, 16, 17]; in <ref> [6] </ref>, linear time algorithms are given for each fixed k. fl This research was carried out while the second author was working in the Department of Computer Science at Utrecht University.
Reference: [7] <author> H. L. Bodlaender and B. de Fluiter. </author> <title> Reduction algorithms for constructing solutions in graphs with small treewidth. </title> <editor> In J.-Y. Cai and C. K. Wong, editors, </editor> <booktitle> Proceedings 2nd Annual International Conference on Computing and Combinatorics, COCOON'96, pages 199208. Springer Verlag, Lecture Notes in Computer Science, </booktitle> <volume> vol. 1090, </volume> <year> 1996. </year>
Reference-contexts: These algorithms run in the same time and resource bounds as the algorithms for treewidth two. A central technique in this paper is graph reduction, introduced in [2]. In <ref> [7] </ref> and [9] it is shown how the technique can be used to obtain parallel algorithms for graphs of bounded treewidth. In [8] this technique is used for checking whether a given graph is series parallel, and if so, finding a decomposition of the graph in series and parallel compositions.
Reference: [8] <author> H. L. Bodlaender and B. de Fluiter. </author> <title> Parallel algorithms for series parallel graphs. </title> <type> Technical Report UU-CS-1997-21, </type> <institution> Dept. of Computer Science, Utrecht University, </institution> <address> Utrecht, the Netherlands, </address> <year> 1997. </year>
Reference-contexts: A central technique in this paper is graph reduction, introduced in [2]. In [7] and [9] it is shown how the technique can be used to obtain parallel algorithms for graphs of bounded treewidth. In <ref> [8] </ref> this technique is used for checking whether a given graph is series parallel, and if so, finding a decomposition of the graph in series and parallel compositions. <p> Our algorithm for treewidth two uses the resemblance between series parallel graphs and graphs of treewidth two: we show that a graph has treewidth at most two if and only if its biconnected components are series parallel. We modify the reduction algorithm that is presented in <ref> [8] </ref> for recognizing series parallel graphs in order to obtain an algorithm for graphs of treewidth at most two: we add extra reduction rules and show how a tree decomposition of width at most two is constructed. (Also, the counting arguments needed for showing the time bounds for this algorithm are <p> to obtain an algorithm for graphs of treewidth at most two: we add extra reduction rules and show how a tree decomposition of width at most two is constructed. (Also, the counting arguments needed for showing the time bounds for this algorithm are different from those of the algorithm in <ref> [8] </ref>.) It is interesting to note that the sequential algorithm to recognize graphs of treewidth two [4, 16] is also based upon a (much smaller) set of graph reductions. This paper is organized as follows. In Section 2 we start with definitions and preliminary results. <p> Furthermore, G 00 is biconnected. By the induction hypothesis, G 00 is a series parallel graph, and thus G 0 is also series parallel. Now suppose each block of G is series parallel. By Lemma 3.4 of <ref> [8] </ref>, each block of G has treewidth at most two, and hence the treewidth of G is at most two. 2 We briefly describe the notion of terminal graphs and reduction rules here. For a more detailed description, see Section 2 of [8]. <p> By Lemma 3.4 of <ref> [8] </ref>, each block of G has treewidth at most two, and hence the treewidth of G is at most two. 2 We briefly describe the notion of terminal graphs and reduction rules here. For a more detailed description, see Section 2 of [8]. A terminal graph G is a triple (V; E; X ) with (V; E) a graph, and X V a subset of l 0 vertices. Vertices in X are called terminals, and they are numbered from 1 to l. Vertices in V X are called inner vertices. <p> In Section 4 it is shown how this algorithm can be used for graphs which may be unconnected or for simple graphs. The structure of the algorithm for connected B-labeled graphs is the same as the algorithm for series parallel graphs as presented in Section 4 of <ref> [8] </ref>: it is a constructive reduction algorithm. The algorithm consists of two phases: the first phase is the reduction phase, in which the input graph is reduced to a graph consisting of one vertex, if it has treewidth at most two. <p> The algorithm uses a set R tw of reduction rules, which we define later. We briefly describe the basic idea of the two phases (for more details, see Section 4 of <ref> [8] </ref>). Suppose a B-labeled graph G is given. 5 Phase 1. The first phase consists of a number of reduction rounds. In each reduction round, a number of applications of rules from R tw is carried out simultaneously. <p> In each reduction round, W (jE (G)j) reductions are applied, if the graph has treewidth at most two. These reductions must be non-interfering: no inner vertex of a subgraph that is rewritten may occur in another subgraph that is rewritten (see also Section 4 of <ref> [8] </ref>). Finding the W (jE (G)j) non-interfering matches is done as follows. First, a set of W (jE (G)j) matches is found. Next a subset of W (jE (G)j) non-interfering reductions is selected from this set. This is done similar as in [8] with a technique from [9]. <p> that is rewritten (see also Section 4 of <ref> [8] </ref>). Finding the W (jE (G)j) non-interfering matches is done as follows. First, a set of W (jE (G)j) matches is found. Next a subset of W (jE (G)j) non-interfering reductions is selected from this set. This is done similar as in [8] with a technique from [9]. Finally, these non-interfering reductions are carried out simultaneously. The second and third step are done in the same way as for series parallel graphs (see also [9]): each reduction in the third round is carried out by a single processor in O (1) time. <p> This is shown in Section 3.3. Phase one can be carried out in O (log m log fl m) time on an EREW PRAM and in O (log m) time on a CRCW PRAM, both with O (m) operations (see <ref> [8] </ref> and [9] for more details). Phase 2. In the second phase, all reductions are undone in reversed order in the construction rounds. During the undoing of the reductions, a tree decomposition of width at most two of the current graph is maintained. <p> Phase two can be carried out in O (log m) time with O (m) operations on a CRCW or EREW PRAM. Together with the results of Sections 3.1 3.4 and the results described in Section 4 of <ref> [8] </ref>, we obtain the following theorem. 6 Theorem 3.1. <p> It is an extension of the set of reduction rules for series parallel graphs that is presented in <ref> [8] </ref> (Section 4.1): rules 1a and 2 18 form the set of rules for series parallel graphs. <p> It also makes the presence of rule 19 necessary: without rule 19, a large star-like graph can not be reduced. Note that, in rules 3 18, we pose degree constraints on the edges between terminals (see Section 4.1 of <ref> [8] </ref>). The following lemma was first proved by Duffin [12], although not precisely in this form. Lemma 3.1. A graph is series parallel if and only if it can be reduced to a single edge by applying any sequence of reductions by rule 1a and 2. <p> This shows safeness of rules 1a and 2 for series parallel graphs. In <ref> [8] </ref>, it was shown that rules 3 18 are safe for series parallel graphs. <p> Note that G has at least jD 2 j=2 matches to rule 19, and hence jD 2 j 2jMj. 10 Consider block B. As B is series parallel and has at least two edges, it contains at least jE (B)j=139 matches to rules 1 18 (Lemma 4.4 in <ref> [8] </ref>). Consider the set M sp of all these matches. Let H 2 M sp . Either H is a match in G or not. If H is not a match in G, we call H a disturbed match. <p> This is done in the same way as for series parallel graphs in Section 4.3 of <ref> [8] </ref>; only rule 19 gives extra complications. The finding of the rules is done as follows. <p> Edge e proposes an application of rule 2 if one of the edges it found also has end points u and v (see also <ref> [8] </ref>). For rule 19, every edge e = fu; vg of which end point u has degree one searches in the adjacency list of v for all edges which have distance at most ten to e in this list. <p> We now show that W (jEj) reductions are enabled. The proof is similar to, but more complicated than the proof for series parallel graphs. Let G be a B-labeled graph G = (V; E) given by some adjacency list representation. Recall from <ref> [8] </ref> that an edge e is bad if it has a parallel edge, but all its parallel edges have distance at least 21 in the adjacency lists of the end points of e. <p> Lemma 3.9. Let G = (V; E) be a B-labeled graph of treewidth at most two, given by some adjacency list representation. The graph G has at most jEj=5 bad edges and at most jEj=10 bad dangling edges. Proof. For the bound on the bad edges, see <ref> [8] </ref>, Lemma 4.6. Consider the bad dangling edges. Let v 2 V (G). If the adjacency list of v has length at most 20, then v does not have any bad dangling edges. <p> There is a constant c 0 &gt; 0 for which each connected B-labeled graph G of treewidth at most two with at least one edge has at least c 0 jE (G)j enabled matches. Proof. We use the same idea as in the proof of Lemma 4.7 of <ref> [8] </ref>. Let G = (V; E) be a B-labeled graph with at least one edge. Let n = jV j and let m = jEj. <p> If the input graph G = (V; E) is simple, then we can use the same preprocessing step as described in <ref> [8] </ref> (Section 5) for series parallel graphs. This results in the following. Theorem 4.2. There is a parallel algorithm which checks whether a given simple graph G has treewidth at most two, and if so, returns a tree decomposition of width at most two of G.
Reference: [9] <author> H. L. Bodlaender and T. Hagerup. </author> <title> Parallel algorithms with optimal speedup for bounded treewidth. </title> <editor> In Z. F ul op and F. Gecseg, editors, </editor> <booktitle> Proceedings 22nd International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 268279, </pages> <address> Berlin, </address> <year> 1995. </year> <note> Springer-Verlag, Lecture Notes in Computer Science 944. To appear in SIAM J. Computing, </note> <year> 1997. </year>
Reference-contexts: Given a tree decomposition of bounded width of a graph, many (even NP-hard) problems can be solved sequentially in linear time, and in parallel in O (log n) time with O (n) operations on an EREW PRAM, where n denotes the number of vertices of the graph (see e.g. <ref> [5, 9] </ref>) (the number of operations that an algorithm uses is the product of the number of processors and the time it uses). Therefore, the problem of finding a tree decomposition of bounded width of a graph is well studied. <p> Foundation for Computer Science (S.I.O.N) of the Nether-lands Organization for Scientific Research (N.W.O.) and by ESPRIT Long Term Research Project 20244 (project ALCOM IT: Algorithms and Complexity in Information Technology). 1 The best known parallel algorithm for recognizing graphs of treewidth at most k was found by Bodlaender and Hagerup <ref> [9] </ref>. It uses O (n) operations, with O (log n) time on a CRCW PRAM or O (log n log fl n) time on an EREW PRAM. <p> Related, earlier results can be found e.g. in [14, 15]. For treewidth one there is a more efficient algorithm than the one of <ref> [9] </ref>. A connected simple graph has treewidth one if and only if it is a tree, and a tree can be recognized by using a tree contraction algorithm. This takes O (log n) time with O (n) operations on an EREW PRAM [1]. <p> The algorithm can be modified such that it can be used on input graphs which are not necessarily connected (see also Section 4). In this paper, we improve on the algorithm of <ref> [9] </ref> for treewidth two. Our algorithm constructs a tree decomposition of width at most two of a graph, if the graph has treewidth at most two. <p> From these results and a result from <ref> [9] </ref> we immediately obtain parallel algorithms for the problem of finding a path decomposition of width at most two of a graph, if it has pathwidth at most two, both for the case of simple graphs and multigraphs. <p> These algorithms run in the same time and resource bounds as the algorithms for treewidth two. A central technique in this paper is graph reduction, introduced in [2]. In [7] and <ref> [9] </ref> it is shown how the technique can be used to obtain parallel algorithms for graphs of bounded treewidth. In [8] this technique is used for checking whether a given graph is series parallel, and if so, finding a decomposition of the graph in series and parallel compositions. <p> Finding the W (jE (G)j) non-interfering matches is done as follows. First, a set of W (jE (G)j) matches is found. Next a subset of W (jE (G)j) non-interfering reductions is selected from this set. This is done similar as in [8] with a technique from <ref> [9] </ref>. Finally, these non-interfering reductions are carried out simultaneously. The second and third step are done in the same way as for series parallel graphs (see also [9]): each reduction in the third round is carried out by a single processor in O (1) time. <p> This is done similar as in [8] with a technique from <ref> [9] </ref>. Finally, these non-interfering reductions are carried out simultaneously. The second and third step are done in the same way as for series parallel graphs (see also [9]): each reduction in the third round is carried out by a single processor in O (1) time. <p> This is shown in Section 3.3. Phase one can be carried out in O (log m log fl m) time on an EREW PRAM and in O (log m) time on a CRCW PRAM, both with O (m) operations (see [8] and <ref> [9] </ref> for more details). Phase 2. In the second phase, all reductions are undone in reversed order in the construction rounds. During the undoing of the reductions, a tree decomposition of width at most two of the current graph is maintained. <p> To this end, we use a technique of <ref> [9] </ref>: from each connected component of the graph we select one vertex. Then we add a new dummy vertex to the graph, and make all selected vertices adjacent to this dummy vertex. <p> After that, we remove the dummy vertex from all nodes it occurs in, and the resulting tree decomposition is a tree decomposition of width at most two of the input graph. For more details, see <ref> [9] </ref>. Theorem 4.1. There is a parallel algorithm which checks whether a given (B-labeled) graph G has treewidth at most two, and if so, returns a tree decomposition of width at most two of G. <p> A large number of interesting and important graph problems can be dealt in this way, including CHROMATIC NUMBER, MAX IMUM CLIQUE, MAXIMUM INDEPENDENT SET, HAMILTONIAN CIRCUIT, STEINER TREE, LONGEST PATH, etc. See <ref> [3, 10, 9] </ref>. With the results of this paper, this implies that we can solve the problems described above on graphs of treewidth at most two with the same resource bounds as the algorithm for finding a tree decomposition of width two. <p> solved if a tree decomposition of bounded width of the input graph is given, is the pathwidth problem: given a graph G and an integer constant k, check whether G has pathwidth at most k, and if so, find a path decomposition of width at most k of the graph <ref> [9] </ref>. Hence we have the following result. Theorem 4.3. Let k 1 be an integer constant.
Reference: [10] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs I: Recognizable sets of finite graphs. Information and Computation, </title> <address> 85:1275, </address> <year> 1990. </year>
Reference-contexts: A large number of interesting and important graph problems can be dealt in this way, including CHROMATIC NUMBER, MAX IMUM CLIQUE, MAXIMUM INDEPENDENT SET, HAMILTONIAN CIRCUIT, STEINER TREE, LONGEST PATH, etc. See <ref> [3, 10, 9] </ref>. With the results of this paper, this implies that we can solve the problems described above on graphs of treewidth at most two with the same resource bounds as the algorithm for finding a tree decomposition of width two.
Reference: [11] <author> B. de Fluiter. </author> <title> Algorithms for Graphs of Small Treewidth. </title> <type> PhD thesis, </type> <institution> Utrecht University, </institution> <year> 1997. </year>
Reference-contexts: The complete proof consists of a long and tedious case analysis, which we omit here (see <ref> [11] </ref> for the complete proof). 2 Next consider the pseudo blocks in P B t t 2 . If PB contains a non-disturbed match, then the disturbed matches can be accounted to this match and we are done. Suppose PB contains no non-disturbed match. <p> We do not give the full details here; they can be found in <ref> [11] </ref>. Degree 3 pseudo blocks. Let d 3 and let PB be a degree d pseudo block. Note that the underlying block B of PB is non-trivial. By Lemma 3.5, there are at most d k disturbed matches in PB.
Reference: [12] <author> R. J. Duffin. </author> <title> Topology of series-parallel graphs. </title> <journal> J. Math. Anal. Appl., </journal> <volume> 10:303318, </volume> <year> 1965. </year>
Reference-contexts: It also makes the presence of rule 19 necessary: without rule 19, a large star-like graph can not be reduced. Note that, in rules 3 18, we pose degree constraints on the edges between terminals (see Section 4.1 of [8]). The following lemma was first proved by Duffin <ref> [12] </ref>, although not precisely in this form. Lemma 3.1. A graph is series parallel if and only if it can be reduced to a single edge by applying any sequence of reductions by rule 1a and 2.
Reference: [13] <author> D. Eppstein. </author> <title> Parallel recognition of series parallel graphs. Information and Computation, </title> <address> 98:4155, </address> <year> 1992. </year>
Reference-contexts: This match is not disturbed by x, so jM nd PB j 1. Suppose the underlying block B of PB is non-trivial. Note that x 2 V (B). Let y be a neighbor of x in B. By Lemma 9 from <ref> [13] </ref>, (B; x; y) is series parallel and hence it has at least one match to rules 1 or 2 which does not have x or y as inner vertex.
Reference: [14] <author> D. Granot and D. Skorin-Kapov. </author> <title> NC algorithms for recognizing partial 2-trees and 3--trees. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 4(3):342354, </volume> <year> 1991. </year>
Reference-contexts: They also gave a parallel algorithm for building a tree decomposition of width at most k, which uses O (n) operations and O (log 2 n) time on a CRCW or EREW PRAM. Related, earlier results can be found e.g. in <ref> [14, 15] </ref>. For treewidth one there is a more efficient algorithm than the one of [9]. A connected simple graph has treewidth one if and only if it is a tree, and a tree can be recognized by using a tree contraction algorithm.
Reference: [15] <author> J. Lagergren. </author> <title> Efficient parallel algorithms for graphs of bounded tree-width. </title> <editor> J. </editor> <booktitle> Algorithms, </booktitle> <address> 20:2044, </address> <year> 1996. </year>
Reference-contexts: They also gave a parallel algorithm for building a tree decomposition of width at most k, which uses O (n) operations and O (log 2 n) time on a CRCW or EREW PRAM. Related, earlier results can be found e.g. in <ref> [14, 15] </ref>. For treewidth one there is a more efficient algorithm than the one of [9]. A connected simple graph has treewidth one if and only if it is a tree, and a tree can be recognized by using a tree contraction algorithm.
Reference: [16] <author> J. Matouffsek and R. Thomas. </author> <title> Algorithms finding tree-decompositions of graphs. </title> <editor> J. </editor> <booktitle> Algorithms, </booktitle> <address> 12:122, </address> <year> 1991. </year>
Reference-contexts: Sequentially, there exist linear time algorithms for each fixed k that, when given a graph G, decide whether the treewidth of G is at most k, and if so, build a tree decomposition of minimum width for G. Practical algorithms exist for k = 1, 2, 3, and 4 <ref> [4, 16, 17] </ref>; in [6], linear time algorithms are given for each fixed k. fl This research was carried out while the second author was working in the Department of Computer Science at Utrecht University. <p> and show how a tree decomposition of width at most two is constructed. (Also, the counting arguments needed for showing the time bounds for this algorithm are different from those of the algorithm in [8].) It is interesting to note that the sequential algorithm to recognize graphs of treewidth two <ref> [4, 16] </ref> is also based upon a (much smaller) set of graph reductions. This paper is organized as follows. In Section 2 we start with definitions and preliminary results.
Reference: [17] <author> D. P. Sanders. </author> <title> On linear recognition of tree-width at most four. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 9(1):101117, </volume> <year> 1996. </year>
Reference-contexts: Sequentially, there exist linear time algorithms for each fixed k that, when given a graph G, decide whether the treewidth of G is at most k, and if so, build a tree decomposition of minimum width for G. Practical algorithms exist for k = 1, 2, 3, and 4 <ref> [4, 16, 17] </ref>; in [6], linear time algorithms are given for each fixed k. fl This research was carried out while the second author was working in the Department of Computer Science at Utrecht University.
References-found: 17

