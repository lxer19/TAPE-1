URL: http://www.cs.wisc.edu/wpis/papers/fse97.ps
Refering-URL: http://www.cs.wisc.edu/~reps/
Root-URL: 
Title: The Use of Program Profiling for Software Maintenance with Applications to the Year 2000 Problem  
Author: Thomas Reps, Thomas Ball, Manuvir Das, and James Larus 
Abstract: This paper describes new techniques to help with testing and debugging, using information obtained from path profiling. A path profiler instruments a program so that the number of times each different loop-free path executes is accumulated during an execution run. With such an instrumented program, each run of the program generates a path spectrum for the executiona distribution of the paths that were executed during that run. A path spectrum is a finite, easily obtainable characterization of a program's execution on a dataset, and provides a behavior signature for a run of the program. Our techniques are based on the idea of comparing path spectra from different runs of the program. When different runs produce different spectra, the spectral differences can be used to identify paths in the program along which control diverges in the two runs. By choosing input datasets to hold all factors constant except one, the divergence can be attributed to this factor. The point of divergence itself may not be the cause of the underlying problem, but provides a starting place for a programmer to begin his exploration. One application of this technique is in the Year 2000 Problem (i.e., the problem of fixing computer systems that use only 2-digit year fields in date-valued data). In this context, path-spectrum comparison provides a heuristic for identifying paths in a program that are good candidates for being date-dependent computations. The application of path-spectrum comparison to a number of other software-maintenance issues is also discussed. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Abramson, D., Foster, I., Michalakes, J., and Sosic, R., </author> <title> Relative debugging: A new methodology for debugging scientific applications, </title> <journal> Commun. of the ACM 39(11) pp. </journal> <month> 68-77 (Nov. </month> <year> 1996). </year>
Reference-contexts: There is a distant relationship between some of the techniques proposed in Section 6 and previous work on testing and debugging: g Relative debugging allows programmers to compare the execution behaviors of multiple instances of the same program <ref> [1] </ref>. The setting for relative debugging is the porting of code (usually Fortran) from one platform (hardware/OS) to another. Because of differences in hardware and/or numerical libraries, the same program may exhibit different behaviors on different platforms.
Reference: 2. <author> Bala, V., </author> <title> Low overhead path profiling, </title> <type> Tech. Rep., </type> <institution> Hewlett-Packard Labs (1996). </institution>
Reference-contexts: of the elements of the path displayed in a third special color. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh cal (m, y, p, w) char *p; - register d, i; register char *s; int foo = 0; d = jan1 (y); mon [9] = 30; switch ((jan1 (y+1)+7-d)%7) - case 1: /* non-leap year */ mon <ref> [2] </ref> = 28; break; default: /* 1752 */ mon [9] = 19; break; case 2: /* leap year */ foo = foo + 1; /* Statement added so that something in the leap-year case */ break; /* could be highlighted */ - d += mon [i]; s += 3*d; . .
Reference: 3. <author> Ball, T., </author> <title> Efficiently counting program events with support for on-line queries, </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <pages> 16(5) pp. </pages> <month> 1399-1410 (Sept. </month> <year> 1994). </year>
Reference: 4. <author> Ball, T. and Larus, J., </author> <title> Efficient path profiling, </title> <booktitle> in Proc. of MICRO-29, </booktitle> <month> (Dec. </month> <year> 1996). </year>
Reference-contexts: Proceedings of ESEC/FSE 97: Lec. Notes in Comp. Sci., Springer-Verlag, New York, NY, 1997 ence <ref> [4] </ref> for more discussion of this issue.) For purposes of this example, assume that years are represented with only two digits and that no person recorded in the database who is younger than fifteen years old possesses a college degree. <p> In particular, Ball and Larus report that execution-time overheads on the order of only 30-40% can be achieved with their method for collecting path profiles <ref> [4] </ref>. Their work relies on a particular method for numbering the paths in the program, the main points of which are described in Section 4.1. <p> The published results of Ball and Larus suggest that the answer to this question is no. They report that some of the SPEC benchmarks had approximately 10 9 - 10 11 paths, of which only 10 4 were ever executed on a given run <ref> [4] </ref>. Although not all of the possible paths are necessarily feasible, it could be necessary to run 10 5 - 10 7 tests (and probably far more) to achieve a high degree of coverage.
Reference: 5. <author> Benedusi, P., Benvenuto, V., and Tomacelli, L., </author> <title> The role of testing and dynamic analysis in program comprehension supports, pp. </title> <booktitle> 149-158 in Proc. of the Second IEEE Workshop on Program Comprehension, </booktitle> <month> (July 8-9, </month> <year> 1993, </year> <title> Capri, Italy), </title> <editor> ed. B. Fadini and V. </editor> <booktitle> Rajlich,IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <address> Wash., DC (July 1993). </address>
Reference-contexts: The Docket project has explored ways to use information obtained from testing and dynamic analysis, including information about paths traversed during execution, in tools to support program comprehension <ref> [5] </ref>.
Reference: 6. <author> Chen, Y.-F., Rosenblum, D.S., and Vo, K.-P., TestTube: </author> <title> A system for selective regression testing, </title> <booktitle> in Proc. of the Sixteenth Int. Conf. on Softw. </booktitle> <address> Eng., </address> <month> (May 16-21, </month> <year> 1994, </year> <title> Sorrento, Italy), </title> <booktitle> IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <address> Wash., DC (1994). </address>
Reference-contexts: Relative debugging also supports runtime comparison of a modified program to an older reference program. g Dependences between tests and program entities have been used to implement selective regression testing in the TestTube system <ref> [6] </ref>. In this case, there are two different versions of a program, and dependence information gathered from previous tests is used to deter mine whether a test needs to be rerun on the new version. Proceedings of ESEC/FSE 97: Lec. Notes in Comp.
Reference: 7. <author> Clarke, L.A., Podgurski, A., Richardson, D.J., and Zeil, S.J., </author> <title> A comparison of data flow path selection criteria, pp. </title> <booktitle> 244-251 in Proc. of the Eighth Int. Conf. on Softw. Eng., IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <address> Wash., DC (1985). </address>
Reference: 8. <author> Gartner Group, </author> <title> Year 2000 Problem Gains National Attention, Gartner Group, Stamford, </title> <address> CT (April 1996). </address> <note> (See URL http://www.gartner.com/aboutgg/pressrel/pry2000.html.) </note>
Reference-contexts: Cost estimates for correcting the various date problems run as high as $600 billion world-wide <ref> [8] </ref>, $300 billion in the U.S., $30 billion for the Federal government, and $10 billion for the Department of Defensenot to mention an estimated $1 trillion in legal fees in the aftermath.
Reference: 9. <author> Horwitz, S., Reps, T., and Binkley, D., </author> <title> Interprocedural slicing using dependence graphs, </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <pages> 12(1) pp. </pages> <month> 26-60 (Jan. </month> <year> 1990). </year>
Reference-contexts: of the shortest distinguishing prefix displayed in a second special color, and the rest of the elements of the path displayed in a third special color. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh cal (m, y, p, w) char *p; - register d, i; register char *s; int foo = 0; d = jan1 (y); mon <ref> [9] </ref> = 30; switch ((jan1 (y+1)+7-d)%7) - case 1: /* non-leap year */ mon [2] = 28; break; default: /* 1752 */ mon [9] = 19; break; case 2: /* leap year */ foo = foo + 1; /* Statement added so that something in the leap-year case */ break; /* <p> third special color. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh cal (m, y, p, w) char *p; - register d, i; register char *s; int foo = 0; d = jan1 (y); mon <ref> [9] </ref> = 30; switch ((jan1 (y+1)+7-d)%7) - case 1: /* non-leap year */ mon [2] = 28; break; default: /* 1752 */ mon [9] = 19; break; case 2: /* leap year */ foo = foo + 1; /* Statement added so that something in the leap-year case */ break; /* could be highlighted */ - d += mon [i]; s += 3*d; . . . hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh input cal 2 1997.
Reference: 10. <author> Johnson, </author> <title> S.C., Postloading for fun and profit, pp. </title> <booktitle> 325-330 in Proc. of the Winter 1990 USENIX Conf., </booktitle> <month> (Jan. </month> <year> 1990). </year>
Reference: 11. <author> Larus, J.R. and Schnarr, E., EEL: </author> <title> Machine-independent executable editing, </title> <booktitle> Proc. of the ACM SIG-PLAN 95 Conf. on Programming Language Design and Implementation, </booktitle> <address> (La Jolla, CA, </address> <month> June 18-21, </month> <year> 1995), </year> <journal> ACM SIGPLAN Notices 30(6) pp. </journal> <month> 291-300 (June </month> <year> 1995). </year>
Reference: 12. <author> Ottenstein, K.J. and Ottenstein, L.M., </author> <title> The program dependence graph in a software development environment, </title> <booktitle> Proc. of the ACM SIGSOFT/SIGPLAN Softw. Eng. Symp. on Practical Software Development Environments, </booktitle> <address> (Pittsburgh, PA, </address> <month> Apr. </month> <pages> 23-25, </pages> <year> 1984), </year> <journal> ACM SIGPLAN Notices 19(5) pp. </journal> <month> 177-184 (May </month> <year> 1984). </year>
Reference: 13. <author> Rapps, S. and Weyuker, E.J., </author> <title> Selecting software test data using data flow information, </title> <journal> IEEE Trans. on Softw. Eng. SE-11(4) pp. </journal> <month> 367-375 (Apr. </month> <year> 1985). </year>
Reference: 14. <author> Reps, T., Horwitz, S., Sagiv, M., and Rosay, G., </author> <title> Speeding up slicing, </title> <booktitle> SIGSOFT 94: Proc. of the Second ACM SIGSOFT Symp. on the Found. of Softw. </booktitle> <address> Eng., (New Orleans, LA, </address> <month> Dec. </month> <pages> 7-9, </pages> <year> 1994), </year> <journal> ACM SIGSOFT Softw. Eng. </journal> <note> Notes 19(5) pp. 11-20 (Dec. </note> <year> 1994). </year>
Reference: 15. <author> Roper, M., </author> <title> Software Testing, </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY (1994). </address>
Reference: 16. <author> Sedgewick, R., </author> <title> Algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA (1983). </address>
Reference-contexts: the post-2000 run? Again, the programmer is led to the statement that computes age as a function of current_year (). ` One can find the shortest prefix of a path p that is not a prefix of any executed path in a spectrum S using a trie structure on S <ref> [16] </ref>: The first edge of p that deviates from the trie identifies the edge at which p veers into unknown territory, and the prefix of p, up to and including this edge, is the shortest prefix of p that distinguishes p from S. Example. <p> Let IsRangeEmpty (S,a,b) be an operation that returns true if S does not contain any values in the range [a .. b ], inclusive. (Standard data structures can be used to implement IsRangeEmpty (S,a,b ) efficiently, i.e., in time logarithmic in the size of S. For instance, see <ref> [16] </ref>, pp. 373-374.) Now consider a path from Start to Exit that has prefix pre, where pre ends at node W, and suppose that the sum of the labels on the edges of pre is c, as shown below: Start c W num_paths_from (W) = # Exit pre All such paths
Reference: 17. <author> Sneed, H.M. and Ritsch, H., </author> <title> Reverse engineering programs via dynamic analysis, pp. </title> <booktitle> 192-201 in Proc. of the IEEE Working Conf. on Reverse Engineering, </booktitle> <address> (May 21-23, 1993, Baltimore, MD), </address> <publisher> IEEE Comp. Soc. Press, </publisher> <address> Wash., DC (May 1993). </address>
Reference: 18. <author> Sneed, H.M. and Erdos, K., </author> <title> Extracting business rules from source code, pp. </title> <booktitle> 240-247 in Proc. of the Fourth IEEE Workshop on Program Comprehension, </booktitle> <month> (Mar. </month> <pages> 29-31, </pages> <address> 1996, Berlin, Germany), </address> <note> ed. </note> <author> V. Rajlich, A. Cimitile, and H.A. </author> <title> Mueller,IEEE Comp. </title> <publisher> Soc. Press, </publisher> <address> Wash., DC (Mar. </address> <year> 1996). </year>
Reference-contexts: the problem of extracting business rules from programs [17]i.e., high-level requirements on how input data is to be processed, expressed in terms of the application domain (e.g., to be billed after delivery the customer must have a credit rating of at least satisfactory, otherwise, the customer must pay on delivery <ref> [18] </ref>). Information about an input/output value pair, the types of the input and output values, and the path through the program that was executed is used to generate several candidate assertions (viz. possible business rules) that characterize the I/O transformation.
Reference: 19. <author> Srivastava, A. and Eustace, A., </author> <title> ATOM: A system for building customized program analysis tools, </title> <booktitle> Proc. of the ACM SIGPLAN 94 Conf. on Programming Language Design and Implementation, </booktitle> <address> (Orlando, FL, </address> <month> June 22-24, </month> <year> 1994), </year> <journal> ACM SIGPLAN Notices 29(6) pp. </journal> <month> 196-205 (June </month> <year> 1994). </year>
Reference: 20. <author> Weiser, M., </author> <title> Program slicing, </title> <journal> IEEE Trans. on Softw. Eng. SE-10(4) pp. </journal> <month> 352-357 (July </month> <year> 1984). </year>
Reference: 21. <author> Woodward, M.R., Hedley, D., and Hennell, M.A., </author> <title> Experience with path analysis and testing of programs, </title> <journal> IEEE Trans. on Softw. Eng. SE-6(3) pp. </journal> <month> 278-286 (May </month> <year> 1980). </year> <booktitle> Proceedings of ESEC/FSE 97: Lec. Notes in Comp. </booktitle> <publisher> Sci., Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1997 </year>
References-found: 21

