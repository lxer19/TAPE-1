URL: http://www.cs.utexas.edu/users/dmcl/papers/ps/NOSSDAV95.ps
Refering-URL: http://www.cs.utexas.edu/users/dmcl/allpapers.html
Root-URL: http://www.cs.utexas.edu
Email: E-mail: fpawang,lam,ving@cs.utexas.edu,  
Phone: Telephone: (512) 471-9732, Fax: (512) 471-8885  
Title: Determining End-to-End Delay Bounds In Heterogeneous Networks  
Author: Pawan Goyal, Simon S. Lam and Harrick M. Vin 
Address: Taylor Hall 2.124, Austin, Texas 78712-1188, USA  
Affiliation: Department of Computer Sciences, University of Texas at Austin  
Abstract: We define a class of Guaranteed Rate (GR) scheduling algorithms. The GR class includes Virtual Clock, Packet-by-Packet Generalized Processor Sharing and Self Clocked Fair Queuing. For networks that employ scheduling algorithms belonging to GR, we present a method for determining an upper bound on end-to-end delay. The method facilitates determination of end-to-end delay bounds for a variety of sources. We illustrate the method by determining end-to-end delay bounds for sources conforming to Leaky Bucket and Exponentially Bounded Burstiness. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.D. Clark, S. Shenker, and L. Zhang. </author> <title> Supporting Real-Time Applications in an Integrated Services Packet Network. </title> <booktitle> In Proceedings of ACM SIG-COMM, </booktitle> <pages> pages 14-26, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: We coin a new term for the virtual clock concept to avoid any confusion between the general concept of virtual clock and as it relates to the Virtual Clock scheduling algorithm. to be a very desirable property of scheduling algorithms, especially in large heterogeneous networks where sources may be malicious <ref> [1, 4, 9, 11] </ref>. This property is the basis for development of a conceptually simple method for determining end-to-end delay bounds in section 3.
Reference: [2] <author> R.L. Cruz. </author> <title> A Calculus for Network Delay, Part I : Network Elements in Isolation. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 37 </volume> <pages> 114-131, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: The problem of determining an upper bound on end-to-end delay has also received considerable attention <ref> [2, 3, 9, 10, 13] </ref>. However, most of the techniques determine end-to-end delay by considering a specific source traffic specification and scheduling algorithm. In an integrated network supporting audio, video and data services, the sources have widely varying characteristics. <p> from the proof steps. 3 Determining End-to-End De lay Bounds 3.1 Method A simple method for determining a bound on end-to-end packet delays is to consider each server in isolation, and compute the summation of the maximum delay at each server along the path from the source to the destination <ref> [2, 3] </ref>. Though this may be the only feasible approach for many scheduling algorithms, it has the following drawbacks: * Due to the variability in the delay experienced by packets at a server, the shape of the traffic gets distorted as it traverses through the network.
Reference: [3] <author> R.L. Cruz. </author> <title> A Calculus for Network Delay, Part II : Network Analysis. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 37 </volume> <pages> 132-141, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: The problem of determining an upper bound on end-to-end delay has also received considerable attention <ref> [2, 3, 9, 10, 13] </ref>. However, most of the techniques determine end-to-end delay by considering a specific source traffic specification and scheduling algorithm. In an integrated network supporting audio, video and data services, the sources have widely varying characteristics. <p> from the proof steps. 3 Determining End-to-End De lay Bounds 3.1 Method A simple method for determining a bound on end-to-end packet delays is to consider each server in isolation, and compute the summation of the maximum delay at each server along the path from the source to the destination <ref> [2, 3] </ref>. Though this may be the only feasible approach for many scheduling algorithms, it has the following drawbacks: * Due to the variability in the delay experienced by packets at a server, the shape of the traffic gets distorted as it traverses through the network.
Reference: [4] <author> A. Demers, S. Keshav, and S. Shenker. </author> <title> Analysis and Simulation of a Fair Queueing Algorithm. </title> <booktitle> In Proceedings of ACM SIGCOMM, </booktitle> <pages> pages 1-12, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: We coin a new term for the virtual clock concept to avoid any confusion between the general concept of virtual clock and as it relates to the Virtual Clock scheduling algorithm. to be a very desirable property of scheduling algorithms, especially in large heterogeneous networks where sources may be malicious <ref> [1, 4, 9, 11] </ref>. This property is the basis for development of a conceptually simple method for determining end-to-end delay bounds in section 3.
Reference: [5] <author> D. Ferrari and D. C. Verma. </author> <title> A Scheme for Real-Time Channel Establishment in Wide-Area Networks. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 8(3) </volume> <pages> 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: The end-to-end delay of a packet depends on the source traffic characteristics and the scheduling algorithm at the network switches. In the recent past, several source specifications including Leaky Bucket [10], Exponentially Bounded Burstiness (EBB) [13], Flow Specification [9] and the Tenet model <ref> [5] </ref> have been studied. The scheduling algorithms that have been proposed include Stop and Go Queuing [6], Delay EDD [15], Jitter EDD [15], Hierarchical Round Robin [8], Rate Control Static Priority Queuing [14], Self Clocked Fair Queuing (SCFQ) [7], Virtual Clock [16] and Packet-by-Packet Generalized Processor Sharing (PGPS) [10].
Reference: [6] <author> S.J. Golestani. </author> <title> A Framing Strategy for Congestion Management. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <pages> pages 1064-1077, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: In the recent past, several source specifications including Leaky Bucket [10], Exponentially Bounded Burstiness (EBB) [13], Flow Specification [9] and the Tenet model [5] have been studied. The scheduling algorithms that have been proposed include Stop and Go Queuing <ref> [6] </ref>, Delay EDD [15], Jitter EDD [15], Hierarchical Round Robin [8], Rate Control Static Priority Queuing [14], Self Clocked Fair Queuing (SCFQ) [7], Virtual Clock [16] and Packet-by-Packet Generalized Processor Sharing (PGPS) [10].
Reference: [7] <author> S.J. Golestani. </author> <title> A Self-Clocked Fair Queueing Scheme for High Speed Applications. </title> <booktitle> In Proceedings of INFOCOM'94, </booktitle> <year> 1994. </year>
Reference-contexts: The scheduling algorithms that have been proposed include Stop and Go Queuing [6], Delay EDD [15], Jitter EDD [15], Hierarchical Round Robin [8], Rate Control Static Priority Queuing [14], Self Clocked Fair Queuing (SCFQ) <ref> [7] </ref>, Virtual Clock [16] and Packet-by-Packet Generalized Processor Sharing (PGPS) [10]. The problem of determining an upper bound on end-to-end delay has also received considerable attention [2, 3, 9, 10, 13]. However, most of the techniques determine end-to-end delay by considering a specific source traffic specification and scheduling algorithm. <p> l i C i j 1 (9) Hence if rate r f is assigned to flow f at server i , then the PGPS scheduling algorithm belongs to GR for flow f with fi i = max 2.3 Self Clocked Fair Queuing The Self Clocked Fair Queuing scheme, proposed in <ref> [7] </ref>, was designed to facilitate the implementation of a fair queu ing scheme in broadband networks. The scheme is defined as follows. 1.
Reference: [8] <author> C.R. Kalmanek, H. Kanakia, and S. Keshav. </author> <title> Rate Controlled Servers for Very High-Speed Networks. </title> <booktitle> In Proceedings of IEEE GLOBECOM'90, </booktitle> <address> San Diego, CA, pages 300.3.1-300.3.9, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: In the recent past, several source specifications including Leaky Bucket [10], Exponentially Bounded Burstiness (EBB) [13], Flow Specification [9] and the Tenet model [5] have been studied. The scheduling algorithms that have been proposed include Stop and Go Queuing [6], Delay EDD [15], Jitter EDD [15], Hierarchical Round Robin <ref> [8] </ref>, Rate Control Static Priority Queuing [14], Self Clocked Fair Queuing (SCFQ) [7], Virtual Clock [16] and Packet-by-Packet Generalized Processor Sharing (PGPS) [10]. The problem of determining an upper bound on end-to-end delay has also received considerable attention [2, 3, 9, 10, 13].
Reference: [9] <author> S.S. Lam and G.G. Xie. </author> <title> Burst Scheduling: Architecture and Algorithm for Switching Packet Video. </title> <booktitle> In Proceedings of INFOCOM'95, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: The end-to-end delay of a packet depends on the source traffic characteristics and the scheduling algorithm at the network switches. In the recent past, several source specifications including Leaky Bucket [10], Exponentially Bounded Burstiness (EBB) [13], Flow Specification <ref> [9] </ref> and the Tenet model [5] have been studied. <p> The problem of determining an upper bound on end-to-end delay has also received considerable attention <ref> [2, 3, 9, 10, 13] </ref>. However, most of the techniques determine end-to-end delay by considering a specific source traffic specification and scheduling algorithm. In an integrated network supporting audio, video and data services, the sources have widely varying characteristics. <p> The concept of delay guarantee to a packet based on its expected arrival time was introduced in <ref> [9, 12] </ref>. As is evident from the definition (also observed in [9]), a key property of the class of GR scheduling algorithms is that they provide a delay guarantee for a source independent of the behavior of other sources in the network, and hence isolate the sources. <p> The concept of delay guarantee to a packet based on its expected arrival time was introduced in [9, 12]. As is evident from the definition (also observed in <ref> [9] </ref>), a key property of the class of GR scheduling algorithms is that they provide a delay guarantee for a source independent of the behavior of other sources in the network, and hence isolate the sources. <p> We coin a new term for the virtual clock concept to avoid any confusion between the general concept of virtual clock and as it relates to the Virtual Clock scheduling algorithm. to be a very desirable property of scheduling algorithms, especially in large heterogeneous networks where sources may be malicious <ref> [1, 4, 9, 11] </ref>. This property is the basis for development of a conceptually simple method for determining end-to-end delay bounds in section 3. <p> If the scheduling algorithm at each of the server on the path of the flow belongs to GR, then the delay guarantee of the algorithm can be exploited to determine end-to-end delay bound. This was illustrated in <ref> [9] </ref> for the Virtual Clock scheduling algorithm in Burst Scheduling networks for a particular source specification. Our key insight is that by deriving a delay guarantee for a network of servers, the problem of determining end-to-end delay can be reduced to the problem of determining delay at a single server.
Reference: [10] <author> A.K. Parekh. </author> <title> A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networks. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, MIT, </institution> <year> 1992. </year>
Reference-contexts: Techniques for determining an upper bound on end-to-end delay in a network is the subject matter of this paper. The end-to-end delay of a packet depends on the source traffic characteristics and the scheduling algorithm at the network switches. In the recent past, several source specifications including Leaky Bucket <ref> [10] </ref>, Exponentially Bounded Burstiness (EBB) [13], Flow Specification [9] and the Tenet model [5] have been studied. <p> The scheduling algorithms that have been proposed include Stop and Go Queuing [6], Delay EDD [15], Jitter EDD [15], Hierarchical Round Robin [8], Rate Control Static Priority Queuing [14], Self Clocked Fair Queuing (SCFQ) [7], Virtual Clock [16] and Packet-by-Packet Generalized Processor Sharing (PGPS) <ref> [10] </ref>. The problem of determining an upper bound on end-to-end delay has also received considerable attention [2, 3, 9, 10, 13]. However, most of the techniques determine end-to-end delay by considering a specific source traffic specification and scheduling algorithm. <p> The problem of determining an upper bound on end-to-end delay has also received considerable attention <ref> [2, 3, 9, 10, 13] </ref>. However, most of the techniques determine end-to-end delay by considering a specific source traffic specification and scheduling algorithm. In an integrated network supporting audio, video and data services, the sources have widely varying characteristics. <p> is assigned to flow f , then the Virtual Clock scheduling algorithm belongs to GR for flow f with fi i = l i C i . 2.2 Packet-by-Packet Generalized Processor Sharing The Packet-by-Packet Generalized Processor Sharing scheduling algorithm is a practical realization of Generalized Processor Sharing (GPS) service discipline <ref> [10] </ref>. <p> P GP S (p f ) and L i j f ) are the times at which packet p j f leaves server i employing the PGPS scheduling algorithm and the GPS service discipline, respectively, and l i max is the maximum length of the packet served by server i <ref> [10] </ref>. Hence, to show that PGPS belongs to the class of GR scheduling algorithms, we establish a relationship between L i j j In GPS, each flow f is associated with a constant i f at server i. <p> r f Using theorem 2 and (39), we will now determine deterministic end-to-end delay bound for Leaky Bucket sources (a deterministic source characterization) and upper bound on the tail distribution of the delay for EBB sources ( a stochastic characterization). 3.2.1 Leaky Bucket A flow f conforms to Leaky Bucket <ref> [10] </ref> with parameters ( f ; r f ) if Theorem 3 If flow f conforms to a Leaky Bucket with parameters ( f ; r f ) and the scheduling algorithm at each of the server on the path of a flow belongs to GR for the flow, then the <p> We note that the if the scheduling algorithm used at each of the servers is either of Virtual Clock and PGPS , then bound in (41) is as tight as bound in <ref> [10] </ref> for Rate Proportional Processor Sharing (RPPS) rate assignment of PGPS networks when the sources conform to Leaky Bucket. 3.2.2 Exponentially Bounded Burstiness A flow f conforms to an Exponentially Bounded Burstiness (EBB) [13] process with parameters (r f ; fl f ; fl f ) , if P r AP <p> The method derives it's simplicity from the constraint placed on the rate assignments in the scheduling algorithms. Note that the constraint we have placed on rate assignments for PGPS so that it belongs to GR is similar to Rate Proportional Processor Sharing (RPPS) <ref> [10] </ref>. Such constraints allow each flow to be considered in isolation and hence facilitate the determination of delay bounds for each flow independently.
Reference: [11] <author> S. Shenker. </author> <title> Making Greed Work in Networks: A Game-Theoretic Analysis of Switch Service Disciplines. </title> <booktitle> In Proceedings of ACM SIGCOMM'94, </booktitle> <pages> pages 47-57, </pages> <year> 1994. </year>
Reference-contexts: We coin a new term for the virtual clock concept to avoid any confusion between the general concept of virtual clock and as it relates to the Virtual Clock scheduling algorithm. to be a very desirable property of scheduling algorithms, especially in large heterogeneous networks where sources may be malicious <ref> [1, 4, 9, 11] </ref>. This property is the basis for development of a conceptually simple method for determining end-to-end delay bounds in section 3. <p> In such scenarios, however, the QoS guarantees provided to each flow may be conditional since sources may be greedy and not conform to the specifi cations <ref> [11] </ref>. Moreover, if hardware traffic enforcement mechanisms are used, the probability of failure of one of the numerous pieces of enforcement hardware may not be negligible, thereby weakening the guarantees.
Reference: [12] <author> G.G. Xie and S.S. Lam. </author> <title> Delay Guarantee of Virtual Clock Server. </title> <type> Technical Report TR-94-24, </type> <institution> Dept. of Computer Sciences, UT-Austin, </institution> <month> Octo-ber </month> <year> 1994. </year> <booktitle> Presented at 9th IEEE Workshop on Computer Communications, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: The concept of delay guarantee to a packet based on its expected arrival time was introduced in <ref> [9, 12] </ref>. As is evident from the definition (also observed in [9]), a key property of the class of GR scheduling algorithms is that they provide a delay guarantee for a source independent of the behavior of other sources in the network, and hence isolate the sources. <p> packet p j f of flow f at server i, denoted by V C i (p j computed as follows [16]: V C i (p 0 V C i (p f ) = maxfA i (p j j1 l f j 1 (4) The following delay guarantee was presented in <ref> [12] </ref>. Define a flow to be active at time t if V C i (p j f ) t where p f is the last packet of flow f that has arrived before time t.
Reference: [13] <author> O. Yaron and M. Sidi. </author> <title> Generalized Processor Sharing Networks with Exponentially Bounded Burstiness Arrivals. </title> <booktitle> In Proceedings of INFO-COM'94, </booktitle> <year> 1994. </year>
Reference-contexts: The end-to-end delay of a packet depends on the source traffic characteristics and the scheduling algorithm at the network switches. In the recent past, several source specifications including Leaky Bucket [10], Exponentially Bounded Burstiness (EBB) <ref> [13] </ref>, Flow Specification [9] and the Tenet model [5] have been studied. <p> The problem of determining an upper bound on end-to-end delay has also received considerable attention <ref> [2, 3, 9, 10, 13] </ref>. However, most of the techniques determine end-to-end delay by considering a specific source traffic specification and scheduling algorithm. In an integrated network supporting audio, video and data services, the sources have widely varying characteristics. <p> either of Virtual Clock and PGPS , then bound in (41) is as tight as bound in [10] for Rate Proportional Processor Sharing (RPPS) rate assignment of PGPS networks when the sources conform to Leaky Bucket. 3.2.2 Exponentially Bounded Burstiness A flow f conforms to an Exponentially Bounded Burstiness (EBB) <ref> [13] </ref> process with parameters (r f ; fl f ; fl f ) , if P r AP i fl f e fl f x x 0 t 1 t 2 (45) Theorem 4 If flow f conforms to EBB with parameters (r f ; fl f ; fl f )
Reference: [14] <author> H. Zhang and D. Ferrari. </author> <title> Rate Controlled Static Priority Queueing. </title> <booktitle> In Proceedings of INFO-COM'93, </booktitle> <volume> volume 2, </volume> <pages> pages 227-236, </pages> <year> 1993. </year>
Reference-contexts: The scheduling algorithms that have been proposed include Stop and Go Queuing [6], Delay EDD [15], Jitter EDD [15], Hierarchical Round Robin [8], Rate Control Static Priority Queuing <ref> [14] </ref>, Self Clocked Fair Queuing (SCFQ) [7], Virtual Clock [16] and Packet-by-Packet Generalized Processor Sharing (PGPS) [10]. The problem of determining an upper bound on end-to-end delay has also received considerable attention [2, 3, 9, 10, 13].
Reference: [15] <author> H. Zhang and S. Keshav. </author> <title> Comparison of Rate-Based Service Disciplines. </title> <booktitle> In Proceedings of ACM SIGCOMM, </booktitle> <pages> pages 113-121, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: In the recent past, several source specifications including Leaky Bucket [10], Exponentially Bounded Burstiness (EBB) [13], Flow Specification [9] and the Tenet model [5] have been studied. The scheduling algorithms that have been proposed include Stop and Go Queuing [6], Delay EDD <ref> [15] </ref>, Jitter EDD [15], Hierarchical Round Robin [8], Rate Control Static Priority Queuing [14], Self Clocked Fair Queuing (SCFQ) [7], Virtual Clock [16] and Packet-by-Packet Generalized Processor Sharing (PGPS) [10]. The problem of determining an upper bound on end-to-end delay has also received considerable attention [2, 3, 9, 10, 13]. <p> In the recent past, several source specifications including Leaky Bucket [10], Exponentially Bounded Burstiness (EBB) [13], Flow Specification [9] and the Tenet model [5] have been studied. The scheduling algorithms that have been proposed include Stop and Go Queuing [6], Delay EDD <ref> [15] </ref>, Jitter EDD [15], Hierarchical Round Robin [8], Rate Control Static Priority Queuing [14], Self Clocked Fair Queuing (SCFQ) [7], Virtual Clock [16] and Packet-by-Packet Generalized Processor Sharing (PGPS) [10]. The problem of determining an upper bound on end-to-end delay has also received considerable attention [2, 3, 9, 10, 13].
Reference: [16] <author> L. Zhang. VirtualClock: </author> <title> A New Traffic Control Algorithm for Packet Switching Networks. </title> <booktitle> In Proceedings of ACM SIGCOMM'90, </booktitle> <pages> pages 19-29, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: The scheduling algorithms that have been proposed include Stop and Go Queuing [6], Delay EDD [15], Jitter EDD [15], Hierarchical Round Robin [8], Rate Control Static Priority Queuing [14], Self Clocked Fair Queuing (SCFQ) [7], Virtual Clock <ref> [16] </ref> and Packet-by-Packet Generalized Processor Sharing (PGPS) [10]. The problem of determining an upper bound on end-to-end delay has also received considerable attention [2, 3, 9, 10, 13]. However, most of the techniques determine end-to-end delay by considering a specific source traffic specification and scheduling algorithm. <p> We refer to the sequence of packets transmitted by a source as a flow <ref> [16] </ref>. Each packet within a flow is serviced by a sequence of servers (switching elements) along the path from the source to the destination in the network. To provide guaranteed performance, the servers reserve a rate for a flow and employ a rate-based scheduling algorithm. <p> Isolation of sources has been considered 1 The concept of guaranteed rate clock is the same as the concept of virtual clock in <ref> [16] </ref>. <p> If flow f is assigned rate r f at server i, then the virtual clock value for packet p j f of flow f at server i, denoted by V C i (p j computed as follows <ref> [16] </ref>: V C i (p 0 V C i (p f ) = maxfA i (p j j1 l f j 1 (4) The following delay guarantee was presented in [12].
References-found: 16

