URL: http://www.cs.purdue.edu/homes/palsberg/paper/gp98.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/palsberg/publications.html
Root-URL: http://www.cs.purdue.edu
Email: Email: lucier@math.purdue.edu.  Email: sudhakar@ecn.purdue.edu  Email: palsberg@cs.purdue.edu.  
Phone: Phone: (765) 4941979.  Phone: (765) 4941196  Phone: (765) 4946012  
Title: Program Optimization for Faster Genetic Programming  
Author: Bradley J. Lucier Sudhakar Mamillapalli Jens Palsberg 
Address: Building W Lafayette, IN 47907  W Lafayette, IN 47907  W Lafayette, IN 47907  
Affiliation: Purdue University 1395 Mathematical Sciences  Purdue University Dept of Agricultural Engineering  Purdue University Dept of Computer Science  
Abstract: We have used genetic programming to develop efficient image processing software. The ultimate goal of our work is to detect certain signs of breast cancer that cannot be detected with current segmentation and classification methods. Traditional techniques do a relatively good job of segmenting and classifying small-scale features of mammo-grams, such as micro-calcification clusters. Our strongly-typed genetic programs work on a multi-resolution representation of the mammogram, and they are aimed at handling features at medium and large scales, such as stel-lated lesions and architectural distortions. The main problem is efficiency. We employ program optimizations that speed up the evolution process by more than a factor of ten. In this paper we present our genetic programming system, and we describe our optimization techniques.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alfred V. Aho, Ravi I. Sethi, and Jeffrey D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <note> second edition, </note> <year> 1986. </year>
Reference-contexts: In our setting, a genetic program maps a pixel index to a boolean value, indicating whether the pixel is an edge pixel or not. We use four well-known source-to-source optimizations <ref> [1] </ref> that together speed up the evolution process by at least a factor of ten.
Reference: [2] <author> Luca Cardelli. </author> <title> Type systems. </title> <booktitle> In CRC Handbook of Computer Science and Engineering, chapter 103. </booktitle> <publisher> CRC Press, </publisher> <year> 1997. </year>
Reference-contexts: It is possible that an evolving genetic programming system will choose the order of representation that is best for a particular problem (e.g., first order for edge detection, second order for curvature analysis, etc.). We only work with genetic programs that type check <ref> [2] </ref>. For example, the initialization process and the genetic operators generate only programs that type check. This approach to genetic programming was pioneered by Montana [15], see also [12].
Reference: [3] <author> A. Chambole, R. A. DeVore, N.-Y Lee, and B. J. Lucier. </author> <title> Nonlinear wavelet image processing: Variational problems, compression, and noise removal through wavelet shrinkage. </title> <journal> IEEE Trans. Image Processing, </journal> <volume> 7:319335, </volume> <year> 1998. </year>
Reference-contexts: His paper presents a particular set of restrictions together with some experimental data. Still, his paper does not evaluate whether the chosen restrictions actually give an advantage over working in an unrestricted setting. In this paper we study edge detection in 512 fi 512 images with a multi-resolution representation <ref> [3] </ref>. Edge detection is a long-studied problem with many classical solutions [10]. We use strongly-typed genetic programs with (1) unbounded size, (2) unbounded integers, and (3) unrestricted access to all pixels.
Reference: [4] <editor> William Clinger and Jonanthan Rees (editors). </editor> <title> Revised 4 report on the algortihmic language Scheme. </title> <month> November </month> <year> 1991. </year>
Reference-contexts: They happen with the probabilities (1) 1/3, (2) 1/6, (3) 1/6, and (4) 1/3 out of the 5% chance that a mutation will happen. Our genetic programming system is implemented in Scheme <ref> [4] </ref> (a dialect of LISP) using Gambit-C [9], a version of the Gambit system that generates portable C code, and Meroon [18], which implements an object system on top of Scheme. Gambit-C is used to convert the generated programs into C.
Reference: [5] <author> Jason M. Daida, Tommaso F. Bersano-Begey, Steven J. Ross, and John F. Vesecky. </author> <title> Computer-assisted design of image classification algorithms: Dynamic and static fitness evaluations in a scaffolded genetic programming environment. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 279284, </pages> <address> Stanford University, CA, USA, 2831 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: 1 Introduction Genetic programming [14] has been applied widely in image processing <ref> [20, 16, 6, 5] </ref>. For example, Harris and Bux-ton [11] applied genetic programming techniques to derive high performance edge detectors for one-dimensional signals. The resulting programs often compared favorably with handwritten edge detectors.
Reference: [6] <author> Jason M. Daida, Jonathan D. Hommes, Tommaso F. Bersano-Begey, Steven J. Ross, and John F. Vesecky. </author> <title> Algorithm discovery using the genetic programming paradigm: Extracting low-contrast curvilinear features from SAR images of arctic ice. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 21, </booktitle> <pages> pages 417442. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: 1 Introduction Genetic programming [14] has been applied widely in image processing <ref> [20, 16, 6, 5] </ref>. For example, Harris and Bux-ton [11] applied genetic programming techniques to derive high performance edge detectors for one-dimensional signals. The resulting programs often compared favorably with handwritten edge detectors.
Reference: [7] <author> I. Daubechies. </author> <title> Ten lectures on wavelets. </title> <booktitle> In CBMS-NSF Regional Conference Series in Applied Mathematics, </booktitle> <volume> volume 91. </volume> <publisher> SIAM, </publisher> <year> 1992. </year>
Reference-contexts: Depth 0 Depth 1 Our language of genetic programs is sufficient to generate any one of the family of biorthogonal wavelets <ref> [7, p.272] </ref>. These wavelets have arbitrarily high approximation power even though they are constructed using knowledge only of the averages of pixels on dyadic squares; thus, they can form a general framework for multi-resolution data representation.
Reference: [8] <author> R. A. DeVore, B. J. Lucier, and Z. Yang. </author> <title> Feature extraction in digital mammography. </title> <editor> In A. Aldroubi and M. Unser, editors, </editor> <booktitle> Wavelets in Medicine and Biology, </booktitle> <pages> pages 145161. </pages> <publisher> CRC Press, </publisher> <address> Boca Raton, </address> <year> 1996. </year>
Reference-contexts: The ultimate goal of our work is to detect certain signs of breast cancer that cannot be detected with current methods. Traditional techniques do a relatively good job of segmenting and classifying small-scale features of mammograms, such as micro-calcification clusters <ref> [8] </ref>. We want to handle features at fl To appear in Proc. GP'98, Genetic Programming, Madison, Wisconsin, July 1998. medium and large scales, such as stellated lesions and architectural distortions [19].
Reference: [9] <author> Marc Feeley. Gambit-C, </author> <note> version 2.6. </note> <institution> University of Mon-treal, </institution> <address> Canada, 2.6 edition, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: They happen with the probabilities (1) 1/3, (2) 1/6, (3) 1/6, and (4) 1/3 out of the 5% chance that a mutation will happen. Our genetic programming system is implemented in Scheme [4] (a dialect of LISP) using Gambit-C <ref> [9] </ref>, a version of the Gambit system that generates portable C code, and Meroon [18], which implements an object system on top of Scheme. Gambit-C is used to convert the generated programs into C. We use gcc with compiler optimization setting -O1 to compile the generated C code.
Reference: [10] <author> R. C. Gonzalez and R. E. Woods. </author> <title> Digital Image Processing. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Still, his paper does not evaluate whether the chosen restrictions actually give an advantage over working in an unrestricted setting. In this paper we study edge detection in 512 fi 512 images with a multi-resolution representation [3]. Edge detection is a long-studied problem with many classical solutions <ref> [10] </ref>. We use strongly-typed genetic programs with (1) unbounded size, (2) unbounded integers, and (3) unrestricted access to all pixels. We show that a good edge detector can be evolved in a reasonable amount of time provided that aggressive program optimizations are employed.
Reference: [11] <author> Christopher Harris and Bernard Buxton. </author> <title> Evolving edge detectors. Research Note RN/96/3, </title> <publisher> UCL, </publisher> <address> Gower Street, London, WC1E 6BT, UK, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Genetic programming [14] has been applied widely in image processing [20, 16, 6, 5]. For example, Harris and Bux-ton <ref> [11] </ref> applied genetic programming techniques to derive high performance edge detectors for one-dimensional signals. The resulting programs often compared favorably with handwritten edge detectors. The ultimate goal of our work is to detect certain signs of breast cancer that cannot be detected with current methods.
Reference: [12] <author> T. Haynes, R. Wainwright, S. Sen, and D. Schoenfeld. </author> <title> Strongly typed genetic programming in evolving cooperation strategies. </title> <booktitle> In Proc. Sixth Int. Conference on Genetic Algorithms, </booktitle> <year> 1995. </year>
Reference-contexts: We only work with genetic programs that type check [2]. For example, the initialization process and the genetic operators generate only programs that type check. This approach to genetic programming was pioneered by Montana [15], see also <ref> [12] </ref>. Early genetic programming systems worked with the simplifying assumption, known as closure, that all variables, constants, arguments for functions, and values returned from these functions must be of the same data type.
Reference: [13] <author> Neil D. Jones, Carsten K. Gomard, and Peter Sestoft. </author> <title> Partial Evaluation and Automatic Program Generation. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1993. </year>
Reference-contexts: Particularly useful is the property that the value operation always returns an integer between 0 and 255. In essence, this optimization is a restricted form of partial evaluation <ref> [13] </ref>. Our static analysis is based on integer interval arithmetic.
Reference: [14] <author> John R. Koza. </author> <title> Genetic Programming : On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge Massachusetts, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction Genetic programming <ref> [14] </ref> has been applied widely in image processing [20, 16, 6, 5]. For example, Harris and Bux-ton [11] applied genetic programming techniques to derive high performance edge detectors for one-dimensional signals. The resulting programs often compared favorably with handwritten edge detectors.
Reference: [15] <author> David J. Montana. </author> <title> Strongly typed genetic programming. </title> <type> BBN Technical Report #7866, </type> <institution> Bolt Beranek and New-man, Inc., </institution> <address> 10 Moulton Street, Cambridge, MA 02138, USA, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: We only work with genetic programs that type check [2]. For example, the initialization process and the genetic operators generate only programs that type check. This approach to genetic programming was pioneered by Montana <ref> [15] </ref>, see also [12]. Early genetic programming systems worked with the simplifying assumption, known as closure, that all variables, constants, arguments for functions, and values returned from these functions must be of the same data type.
Reference: [16] <author> Thang Nguyen and Thomas Huang. </author> <title> Evolvable 3D modeling for model-based object recognition systems. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 22, </booktitle> <pages> pages 459475. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Genetic programming [14] has been applied widely in image processing <ref> [20, 16, 6, 5] </ref>. For example, Harris and Bux-ton [11] applied genetic programming techniques to derive high performance edge detectors for one-dimensional signals. The resulting programs often compared favorably with handwritten edge detectors.
Reference: [17] <author> Riccardo Poli. </author> <title> Genetic programming for image analysis. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Proc. Genetic Programming 1996, </booktitle> <pages> pages 363368. </pages> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: We want to handle features at fl To appear in Proc. GP'98, Genetic Programming, Madison, Wisconsin, July 1998. medium and large scales, such as stellated lesions and architectural distortions [19]. Poli <ref> [17] </ref> discussed genetic programming for image analysis, and he noted that without restrictions on which pixels can be accessed, the search space becomes huge. His paper presents a particular set of restrictions together with some experimental data.
Reference: [18] <author> Christian Queinnec. </author> <title> Meroon V3, A Small, Efficient and Enhanced Object System. </title> <institution> Ecole Polytechnique and INRIA-Rocquencourt, </institution> <address> 91128 Palaiseau Cedex, France, </address> <year> 1993. </year>
Reference-contexts: Our genetic programming system is implemented in Scheme [4] (a dialect of LISP) using Gambit-C [9], a version of the Gambit system that generates portable C code, and Meroon <ref> [18] </ref>, which implements an object system on top of Scheme. Gambit-C is used to convert the generated programs into C. We use gcc with compiler optimization setting -O1 to compile the generated C code.
Reference: [19] <author> L. Tabar and P. B. Dean. </author> <title> Teaching Atlas of Mammography. </title> <publisher> Thieme, Inc., </publisher> <year> 1985. </year>
Reference-contexts: Traditional techniques do a relatively good job of segmenting and classifying small-scale features of mammograms, such as micro-calcification clusters [8]. We want to handle features at fl To appear in Proc. GP'98, Genetic Programming, Madison, Wisconsin, July 1998. medium and large scales, such as stellated lesions and architectural distortions <ref> [19] </ref>. Poli [17] discussed genetic programming for image analysis, and he noted that without restrictions on which pixels can be accessed, the search space becomes huge. His paper presents a particular set of restrictions together with some experimental data.
Reference: [20] <author> Walter Alden Tackett. </author> <title> Genetic programming for feature discovery and image discrimination. </title> <editor> In Stephanie For-rest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 303309, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: 1 Introduction Genetic programming [14] has been applied widely in image processing <ref> [20, 16, 6, 5] </ref>. For example, Harris and Bux-ton [11] applied genetic programming techniques to derive high performance edge detectors for one-dimensional signals. The resulting programs often compared favorably with handwritten edge detectors.
References-found: 20

