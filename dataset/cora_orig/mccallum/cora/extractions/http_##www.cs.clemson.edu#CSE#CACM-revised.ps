URL: http://www.cs.clemson.edu/CSE/CACM-revised.ps
Refering-URL: http://www.cs.clemson.edu/CSE/index.html
Root-URL: http://www.cs.clemson.edu
Email: steve@cs.clemson.edu  
Author: D. E. Stevenson 
Keyword: education, computational science.  
Date: August 16, 1993  
Address: Crossroads  Clemson, SC 29634-1906 (803) 656-5880 or  
Affiliation: Science, Computational Science and Computer Science: At a  Department of Computer Science Clemson University  
Abstract: We describe computational science as an interdisciplinary approach to doing science on computers. Our purpose is to introduce computational science as a legitimate interest of computer scientists. We present a foundation for computational science based on the need to incorporate computation at the scientific level; i.e., computational aspects must be considered when a model is formulated. We next present some obstacles to computer scientists' participation in computational science, including a cultural bias in computer science that inhibits participation. Finally, we look at some areas of conventional computer science and indicate areas of mutual interest between computational science and computer science. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> O. Aberth. </author> <title> Constructible Analysis. </title> <publisher> McGraw-Hill, </publisher> <year> 1980. </year>
Reference-contexts: The basic point, however, is that most computer scientists are introduced to formalistic mathematics and not constructive mathematics. The latter, with its emphasis on objects is, much more likely to appeal to an algorithmic view <ref> [1, 7, 17, 18, 22, 24, 28] </ref>. There are many intriguing questions which are of the mathematical/computational nature. If we pick up on Bishop's program [9], we might say that Bishop did not go far enough for computational science purposes.
Reference: [2] <institution> ACM. </institution> <note> ACM Guide to Computing Literature. ACM, </note> <year> 1990. </year>
Reference: [3] <author> David H. Bailey. </author> <title> Automatic translation of fortran programs to multiprecision. </title> <type> Technical report, </type> <institution> NAS Applied Research Branch, NASA Ames Research Center, Moffett Field, </institution> <address> CA 94035, </address> <month> April 17, </month> <year> 1992. </year>
Reference-contexts: There are many intriguing questions which are of the mathematical/computational nature. If we pick up on Bishop's program [9], we might say that Bishop did not go far enough for computational science purposes. While we can have large numbers of digits (say in a multiprecision package <ref> [3] </ref>), the numbers are still finite and bounded. We propose the following program: to develop a sound theoretical basis for deriving computer programs by taking the computational real formulation as the specification.
Reference: [4] <author> H. P. Barendregt. </author> <title> Lambda Calculus: Syntax and Semantics, </title> <booktitle> volume 103 of Studies in Logic and the Foundations of Mathematics. </booktitle> <publisher> North Holland, </publisher> <year> 1981. </year>
Reference-contexts: The development of a sound understanding of the number systems starts with Wilkinson [36, 37]. The concept of the Wilkinson set fits very nicely with the ideas of denotational semantics <ref> [4, 6, 25, 29, 31] </ref>. This development should be primarily algebraic in nature, adding a level to the traditional algebraic hierarchy. The constructive program might also shift in emphasis in development of numerical mathematics. For example, we can achieve some results by replacing limits with extrapolations.
Reference: [5] <author> Enrico G. Beltrametti and Bas C. van Fraassen. </author> <booktitle> Current Issues in Quantum Logic. </booktitle> <publisher> Plenum Press, </publisher> <year> 1981. </year>
Reference-contexts: The computer now allows the use of non-linear methods where non-physical assumptions were required before (see Section 2.2). A simple example of Aristotle. Science in the 17th century was oriented towards "reasoning" but not "experimental verification." 2 Except for some areas like quantum logic. See <ref> [5] </ref>. in every sophomore physics book is the pendulum: if we do not make the "small angle assumption", the resultant differential equation usually makes use of elliptic functions for its solution.
Reference: [6] <author> E. W. Beth. </author> <title> Semantic construction of intuition-istic logic,. Kon. Ned. Ak. </title> <journal> Wet., </journal> <volume> 19 </volume> <pages> 257-388, </pages> <year> 1956. </year> <note> Crossroads August 16, 1993 15 </note>
Reference-contexts: The development of a sound understanding of the number systems starts with Wilkinson [36, 37]. The concept of the Wilkinson set fits very nicely with the ideas of denotational semantics <ref> [4, 6, 25, 29, 31] </ref>. This development should be primarily algebraic in nature, adding a level to the traditional algebraic hierarchy. The constructive program might also shift in emphasis in development of numerical mathematics. For example, we can achieve some results by replacing limits with extrapolations.
Reference: [7] <author> Errett A. Bishop. </author> <title> Foundations of Constructive Analysis. </title> <publisher> McGraw-Hill, </publisher> <year> 1967. </year>
Reference-contexts: The basic point, however, is that most computer scientists are introduced to formalistic mathematics and not constructive mathematics. The latter, with its emphasis on objects is, much more likely to appeal to an algorithmic view <ref> [1, 7, 17, 18, 22, 24, 28] </ref>. There are many intriguing questions which are of the mathematical/computational nature. If we pick up on Bishop's program [9], we might say that Bishop did not go far enough for computational science purposes.
Reference: [8] <author> Errett E. Bishop. </author> <title> The crisis in contemporary mathematics. </title> <journal> Historia Mathematica, </journal> <volume> 2 </volume> <pages> 507-517, </pages> <year> 1975. </year>
Reference-contexts: The richness of calculus, for example, is in its applications. Even with the current reform underway in undergraduate mathematics, we are unlikely to see Bishop's criticisms <ref> [8] </ref> answered. The upshot is that undergraduate mathematics is not computationally oriented and hence inappropriate for computational science. We are also exploring the possibilities of including aspects in high school mathematics and science.
Reference: [9] <author> Errett J. Bishop and Douglas Bridges. </author> <title> Constructive Analysis. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: The reliance on computation in computational science opens a very important question: How much of ordinary mathematics is usable in the computational world? This question has been addressed <ref> [9, 11, 18, 22, 24, 28, 27] </ref> but the results are not generally practiced. As an illustration as to why this question is important, take the recent "discovery" of chaos. <p> The latter, with its emphasis on objects is, much more likely to appeal to an algorithmic view [1, 7, 17, 18, 22, 24, 28]. There are many intriguing questions which are of the mathematical/computational nature. If we pick up on Bishop's program <ref> [9] </ref>, we might say that Bishop did not go far enough for computational science purposes. While we can have large numbers of digits (say in a multiprecision package [3]), the numbers are still finite and bounded.
Reference: [10] <author> G. J. Chaitin. </author> <title> Algorithmic Information Theory. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1987. </year>
Reference-contexts: However, a more important criticism can be leveled: the current scheme does not address how fast the algorithms approach their asymptotic speeds. This criticism can also be leveled against the devel opment of numerical codes. New methods and ideas are available and should be explored <ref> [35, 10] </ref>. 4.2.2 Practical Development Support While foundations have a place in supporting computational science, computer science can address issues in the development tools and techniques for the implementation of models in the heterogeneous environment. In this section, we allude to some concrete suggestions for research.
Reference: [11] <author> J. P. Cleave. </author> <title> The primitive recursive analysis of ordinary differential equations and the complexity of their solutions. </title> <journal> J. Comp. Sys. Sci., </journal> <volume> 3 </volume> <pages> 447-455, </pages> <year> 1969. </year>
Reference-contexts: The reliance on computation in computational science opens a very important question: How much of ordinary mathematics is usable in the computational world? This question has been addressed <ref> [9, 11, 18, 22, 24, 28, 27] </ref> but the results are not generally practiced. As an illustration as to why this question is important, take the recent "discovery" of chaos.
Reference: [12] <author> Harold T. Davis. </author> <title> Introduction to Nonlinear Differential and Integeral Equations. </title> <publisher> Dover, </publisher> <year> 1960. </year>
Reference-contexts: The equations of motion are given by mL dt 2 = mg sin : (1) This differential equation does not have an analytic solution ( although it does have an elliptic solution <ref> [12] </ref>). The next assumption is non-physical: since for small , sin , we can rewrite the equation of motion to mL dt 2 = mg: (2) This latter equation is solvable by analytic methods, leading to the well-known sinusoidal solution. <p> In our terminology, we would say that Equation (2) is "physically approximate but mathematically exact" while Equation (1) is more "physically exact but mathematically approximate". It is mathematically approximate because elliptic integrals are solvable only by computation of series <ref> [12] </ref>. Since we see computational science as an interdisciplinary endeavor, there is a need to merge the methods and viewpoints from the individual disciplines involved. Under the current methodologies of science, mathematics plays a role as a tool.
Reference: [13] <author> J. J. Dongarra et al. </author> <title> LINPACK: users' guide. </title> <institution> Soc. for Indust. and Appl. Math., </institution> <year> 1979. </year>
Reference-contexts: The problems of designing, documenting, debugging, and supporting a large library of scientific routines have been hinted at in the literature. There is also a problem with an exploding number of versions: often differing only in architectural details. For example, consider the development of the so-called Level 3 BLAS <ref> [13] </ref>. When LINPACK was originally conceived, the only model of computation was the von Neumann model. The Basic Linear Algebra Subprograms|BLAS as they came to be known|were motivated by vector operations.
Reference: [14] <institution> Federal Coordinating Council for Science, Engineering and Technology. Grand Challenges 1993: High Performance Computing and Communications. NSF, National Science Foundation, Computer and Information Science and Engineering Directorate, </institution> <address> 1800 G Street N.W., Washington, DC 20550, </address> <year> 1993. </year> <note> May be obtained via e-mail through pubs@note.nsf.gov. </note>
Reference-contexts: The Grand Challenges are engineering and scientific problems considered vital to the economic well-being of the United States. Many of these problems, such as drug design and global climate modeling, have worldwide impact. The exact goals of the HPCC are published in a pamphlet and updated yearly <ref> [14] </ref>. The science and engineering components of the HPCC require an interdisciplinary approach to solving very difficult problems. The solutions require the concerted actions of physical scientists, engineers, mathematical scientists, and computer scientists. Computational science embraces this collaborative effort among many diverse disciplines.
Reference: [15] <author> E. Gallopoulos, E. Houstis, and J. R. Rice. </author> <title> Future research directions in problem solving environments for computational science. </title> <type> Technical report, </type> <institution> Center for Supercomputing Research and Development, University of Illinois, </institution> <year> 1991. </year> <title> Report of a Workshop on Research Directions in Integrating Numerical Analysis, Symbolic Computing, Computational Geometry, and Aritificial Intelligence for Computational Science, partially supported by NSF Grant CCR-90-24549. </title>
Reference-contexts: The scientist must believe and be able to verify that the output of the computer model faithfully reflects the intended model. Too often, the programming aspect is considered as an independent activity separate from the rigorous rules of science and mathematics. For a discussion of these areas, see <ref> [15] </ref>. 3 Is Computer Science Out of Step? In this section, we focus on computer science and its place in computational science. At first blush, one would think that computer science is well-positioned to make important contributions to computational science. <p> In this section, we allude to some concrete suggestions for research. This material is a very short version of [34]. Some areas, such as architecture, operating systems, and graphics, have applications to computer science as well as computational science. We have alluded to the need for problem-solving environments <ref> [15] </ref> that make use of areas such as computational geometry and artificial intelligence. Even an area such as database management|which we associate more with business systems than scientific systems|has important applications in managing the large volume of data generated in many types of scientific experiments.
Reference: [16] <author> W. Edward Gettys, Frederick J. Keller, and Mal-colm J. Skove. </author> <title> Classical and Modern Physics. </title> <publisher> McGraw-Hill, </publisher> <year> 1988. </year>
Reference-contexts: Unfortunately, these newer models have no closed form and generally are very hard to solve numerically. The lines between physically exact and inexact may be blurred, but the distinction is useful. For example, consider the model of a pendulum such as one might find in an undergraduate physics book <ref> [16] </ref>. There is a point mass m at the end of a rigid, massless bar of length L. The pendulum swings in an arc measured by the angle . At , the restoring force is mg sin , ignoring friction.
Reference: [17] <author> R. L. Goodstein. </author> <title> Recursive Analysis. </title> <publisher> North Hol-land, </publisher> <year> 1961. </year>
Reference-contexts: The basic point, however, is that most computer scientists are introduced to formalistic mathematics and not constructive mathematics. The latter, with its emphasis on objects is, much more likely to appeal to an algorithmic view <ref> [1, 7, 17, 18, 22, 24, 28] </ref>. There are many intriguing questions which are of the mathematical/computational nature. If we pick up on Bishop's program [9], we might say that Bishop did not go far enough for computational science purposes.
Reference: [18] <author> A. Grzegorczyk. </author> <title> Some approaches to constructive analysis. </title> <editor> In A. Heyting, editor, </editor> <title> Construc-tivity in Math., </title> <journal> Stud. Logic Found. Math., </journal> <pages> pages 43-61. </pages> <publisher> North Holland, </publisher> <year> 1959. </year>
Reference-contexts: The reliance on computation in computational science opens a very important question: How much of ordinary mathematics is usable in the computational world? This question has been addressed <ref> [9, 11, 18, 22, 24, 28, 27] </ref> but the results are not generally practiced. As an illustration as to why this question is important, take the recent "discovery" of chaos. <p> The basic point, however, is that most computer scientists are introduced to formalistic mathematics and not constructive mathematics. The latter, with its emphasis on objects is, much more likely to appeal to an algorithmic view <ref> [1, 7, 17, 18, 22, 24, 28] </ref>. There are many intriguing questions which are of the mathematical/computational nature. If we pick up on Bishop's program [9], we might say that Bishop did not go far enough for computational science purposes.
Reference: [19] <author> Richard H. </author> <title> Hamming. Numerical Methods for Scientists and Engineers. </title> <publisher> McGraw-Hill, </publisher> <year> 1962. </year>
Reference-contexts: Calculating the wrong answer quickly is not any help. Programs are not the object of science, knowledge is. Those old, antiquated programs are well-tested and jive with the empirical relations observed in the real world. We, computer science, are forgetting the Hamming dictum <ref> [19] </ref>: The purpose of programming is insight, not numbers. The language debate, if indeed it is a debate, just will not go away.
Reference: [20] <author> Rom Harre. </author> <title> The Principles of Scientific Thinking. </title> <publisher> The University of Chicago Press, </publisher> <year> 1970. </year>
Reference: [21] <author> Morris Kline. </author> <title> Mathematics: The Loss of Certainty. </title> <publisher> Oxford University Press, </publisher> <year> 1980. </year>
Reference-contexts: Mathematics has not been a bone of contention 2 . However, there are problems with differences between some areas of classical mathematics and mathematics needed for computation <ref> [21] </ref>. The standard model of scientific enquiry must be altered to include computer models. A simplified version of the new (proposed) process: 1. A model M is derived from physical or engineering principles. M may contain submodels previ ously developed. 2. <p> Since we see computational science as an interdisciplinary endeavor, there is a need to merge the methods and viewpoints from the individual disciplines involved. Under the current methodologies of science, mathematics plays a role as a tool. For the outsider, certain questions about the basis of mathematics are ignored <ref> [21] </ref>. The most important question for the present discussion is the question of computability. Ordinary calculus, as taught to freshmen and sophomores, assumes certain things about existence, leading to impredicative assumptions that are inherently non-computational in nature [21]. <p> For the outsider, certain questions about the basis of mathematics are ignored <ref> [21] </ref>. The most important question for the present discussion is the question of computability. Ordinary calculus, as taught to freshmen and sophomores, assumes certain things about existence, leading to impredicative assumptions that are inherently non-computational in nature [21]. The reliance on computation in computational science opens a very important question: How much of ordinary mathematics is usable in the computational world? This question has been addressed [9, 11, 18, 22, 24, 28, 27] but the results are not generally practiced. <p> Crossroads August 16, 1993 13 4.2.1 Foundational Issues One of the problems for computer scientists who are not also mathematicians is the the role of mathematics in computer science. For those not familiar with the history of mathematics, Kline <ref> [21] </ref> is heartily recommended, if not required, reading. The basic point, however, is that most computer scientists are introduced to formalistic mathematics and not constructive mathematics. The latter, with its emphasis on objects is, much more likely to appeal to an algorithmic view [1, 7, 17, 18, 22, 24, 28].
Reference: [22] <author> C. Kreitz and K. Weihrauch. </author> <title> A unified approach to constructive and recursive analysis. </title> <editor> In E. Borger, W. Oberschelp, M. M. Richter, B. Schinzel, and W. Thomas, editors, </editor> <booktitle> Computation and Proof Theory, Logic Colloq. </booktitle> <address> Aachen 2, 1983., LNM 1104. </address> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: The reliance on computation in computational science opens a very important question: How much of ordinary mathematics is usable in the computational world? This question has been addressed <ref> [9, 11, 18, 22, 24, 28, 27] </ref> but the results are not generally practiced. As an illustration as to why this question is important, take the recent "discovery" of chaos. <p> The basic point, however, is that most computer scientists are introduced to formalistic mathematics and not constructive mathematics. The latter, with its emphasis on objects is, much more likely to appeal to an algorithmic view <ref> [1, 7, 17, 18, 22, 24, 28] </ref>. There are many intriguing questions which are of the mathematical/computational nature. If we pick up on Bishop's program [9], we might say that Bishop did not go far enough for computational science purposes.
Reference: [23] <author> John Krommes. </author> <title> FWEB User's Guide. </title> <institution> Princeton University, </institution> <year> 1991. </year>
Reference-contexts: In our syllabus development work, we are employing literate programming techniques pioneered by D. E. Knuth [33]. We are using the FWEB program written by John Krommes at Princeton <ref> [23] </ref>. This approach has proven viable. 4.1.3 The Graduate Program For the graduate student who does not have a background commensurate with the outline above, most schools would be able to add sufficient courses to fill the gap, assuming that the students a sufficient science background.
Reference: [24] <author> S. Mazur. </author> <title> Computable Analysis. </title> <publisher> PWN, </publisher> <year> 1963. </year>
Reference-contexts: The reliance on computation in computational science opens a very important question: How much of ordinary mathematics is usable in the computational world? This question has been addressed <ref> [9, 11, 18, 22, 24, 28, 27] </ref> but the results are not generally practiced. As an illustration as to why this question is important, take the recent "discovery" of chaos. <p> The basic point, however, is that most computer scientists are introduced to formalistic mathematics and not constructive mathematics. The latter, with its emphasis on objects is, much more likely to appeal to an algorithmic view <ref> [1, 7, 17, 18, 22, 24, 28] </ref>. There are many intriguing questions which are of the mathematical/computational nature. If we pick up on Bishop's program [9], we might say that Bishop did not go far enough for computational science purposes.
Reference: [25] <author> P. D. Mosses. </author> <title> Abstract semantic algebras. </title> <editor> In D. Bjorner, editor, </editor> <title> Formal Descriptions of Programming Concepts II. </title> <publisher> North-Holland, </publisher> <year> 1983. </year>
Reference-contexts: The development of a sound understanding of the number systems starts with Wilkinson [36, 37]. The concept of the Wilkinson set fits very nicely with the ideas of denotational semantics <ref> [4, 6, 25, 29, 31] </ref>. This development should be primarily algebraic in nature, adding a level to the traditional algebraic hierarchy. The constructive program might also shift in emphasis in development of numerical mathematics. For example, we can achieve some results by replacing limits with extrapolations.
Reference: [26] <author> C. M. Pancake. </author> <title> Software support for parallel computing: Where are we headed? CACM, </title> <booktitle> 34(11) </booktitle> <pages> 53-64, </pages> <year> 1991. </year>
Reference-contexts: The argument was that programs in this newer language would be, oh, so much better because of the work in vectorizing. The scientists counter|and I am afraid that we are not hearing this argument well <ref> [26] </ref>| is that those old, empirically validated programs are the purpose of programming. Calculating the wrong answer quickly is not any help. Programs are not the object of science, knowledge is. Those old, antiquated programs are well-tested and jive with the empirical relations observed in the real world. <p> We, computer science, are forgetting the Hamming dictum [19]: The purpose of programming is insight, not numbers. The language debate, if indeed it is a debate, just will not go away. But are we asking the right questions <ref> [26] </ref>? If we continue with an attitude [26] that the world is waiting with bated breath for the next program|or programming language|we will not endure as a discipline. <p> We, computer science, are forgetting the Hamming dictum [19]: The purpose of programming is insight, not numbers. The language debate, if indeed it is a debate, just will not go away. But are we asking the right questions <ref> [26] </ref>? If we continue with an attitude [26] that the world is waiting with bated breath for the next program|or programming language|we will not endure as a discipline. If we continue imbuing our students with this attitude, we will continue to see declining enrollments as the sciences and engineering disciplines draw the best and the brightest.
Reference: [27] <author> Marian B. Pour-El and J. Ian Richards. </author> <title> Non-computability in analysis and physics: a complete determination of the class of non-computable linear operators. </title> <journal> Adv. Math., </journal> <volume> 48 </volume> <pages> 44-74, </pages> <year> 1983. </year>
Reference-contexts: The reliance on computation in computational science opens a very important question: How much of ordinary mathematics is usable in the computational world? This question has been addressed <ref> [9, 11, 18, 22, 24, 28, 27] </ref> but the results are not generally practiced. As an illustration as to why this question is important, take the recent "discovery" of chaos.
Reference: [28] <author> Marian B. Pour-El and J. Ian Richards. </author> <title> Computability in Analysis and Physics. Perspectives in Mathematical Logic. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: The reliance on computation in computational science opens a very important question: How much of ordinary mathematics is usable in the computational world? This question has been addressed <ref> [9, 11, 18, 22, 24, 28, 27] </ref> but the results are not generally practiced. As an illustration as to why this question is important, take the recent "discovery" of chaos. <p> The basic point, however, is that most computer scientists are introduced to formalistic mathematics and not constructive mathematics. The latter, with its emphasis on objects is, much more likely to appeal to an algorithmic view <ref> [1, 7, 17, 18, 22, 24, 28] </ref>. There are many intriguing questions which are of the mathematical/computational nature. If we pick up on Bishop's program [9], we might say that Bishop did not go far enough for computational science purposes.
Reference: [29] <author> D. A. Schmidt. </author> <title> Denotational Semantics. </title> <publisher> Allyn and Bacon, </publisher> <year> 1986. </year>
Reference-contexts: The development of a sound understanding of the number systems starts with Wilkinson [36, 37]. The concept of the Wilkinson set fits very nicely with the ideas of denotational semantics <ref> [4, 6, 25, 29, 31] </ref>. This development should be primarily algebraic in nature, adding a level to the traditional algebraic hierarchy. The constructive program might also shift in emphasis in development of numerical mathematics. For example, we can achieve some results by replacing limits with extrapolations.
Reference: [30] <institution> Computer Science and National Research Council Telecommunications Board. Computing the Future: A broader agenda for computer science and engineering. National Academy Press, </institution> <address> Washington, DC, </address> <year> 1992. </year>
Reference-contexts: We present evidence for point 3 and we propose some remedies. We hasten to add that all the constituent disciplines may be in similar situations; see, for example, comments adapted from Robert Pike in Computing the Future <ref> [30, page 126] </ref>. We further point out the obvious changes at the foundations of the scientific method as evidence for these intra-disciplinary changes. In Section 2 we present the Clemson view of computational science and describe the role of various disciplines.
Reference: [31] <author> D. S. Scott. </author> <title> Domains for denotational semantics. </title> <booktitle> Proc. 9th ICALP, </booktitle> <volume> 140 </volume> <pages> 577-613, </pages> <year> 1982. </year>
Reference-contexts: The development of a sound understanding of the number systems starts with Wilkinson [36, 37]. The concept of the Wilkinson set fits very nicely with the ideas of denotational semantics <ref> [4, 6, 25, 29, 31] </ref>. This development should be primarily algebraic in nature, adding a level to the traditional algebraic hierarchy. The constructive program might also shift in emphasis in development of numerical mathematics. For example, we can achieve some results by replacing limits with extrapolations.
Reference: [32] <institution> SIAM. </institution> <note> LAPACK Users' Guide, </note> <month> May </month> <year> 1992. </year>
Reference-contexts: The BLAS, which were originally considered absolutely primitive, have been redesigned several times as , first, vector processors and, then, distributed processors became available. Designing and tuning such a project as LINPACK, or its follow-on LAPACK <ref> [32] </ref>, for a large number of incompatible architectures will be daunting, to say the least. LINPACK also points out the difference between mathematics as practiced by the computation-alist and the non-computationalist.
Reference: [33] <author> Lisa M. C. Smith and Mansur H. Samadzadeh. </author> <title> An annotated bibliography of literate programming. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 26(1), </volume> <month> January </month> <year> 1991. </year>
Reference-contexts: In our syllabus development work, we are employing literate programming techniques pioneered by D. E. Knuth <ref> [33] </ref>. We are using the FWEB program written by John Krommes at Princeton [23].
Reference: [34] <author> D. E. Stevenson and R. M. Panoff. </author> <title> Experiences in building the Clemson computational science program. </title> <booktitle> In Proceedings of Supercomputing '90. ACM, </booktitle> <year> 1990. </year> <note> Crossroads August 16, 1993 16 </note>
Reference-contexts: In this section, we allude to some concrete suggestions for research. This material is a very short version of <ref> [34] </ref>. Some areas, such as architecture, operating systems, and graphics, have applications to computer science as well as computational science. We have alluded to the need for problem-solving environments [15] that make use of areas such as computational geometry and artificial intelligence.
Reference: [35] <author> J. F. Traub, G. W. Wasilkowski, and H. Wozniakowski. </author> <title> Information Based Complexity. </title> <publisher> Academic Press, </publisher> <year> 1988. </year> <note> LC QA267 .T73 1988. </note>
Reference-contexts: However, a more important criticism can be leveled: the current scheme does not address how fast the algorithms approach their asymptotic speeds. This criticism can also be leveled against the devel opment of numerical codes. New methods and ideas are available and should be explored <ref> [35, 10] </ref>. 4.2.2 Practical Development Support While foundations have a place in supporting computational science, computer science can address issues in the development tools and techniques for the implementation of models in the heterogeneous environment. In this section, we allude to some concrete suggestions for research.
Reference: [36] <author> J. H. Wilkinson. </author> <title> Error analysis of floating-point computation. </title> <journal> Numer. Math, </journal> <volume> 2 </volume> <pages> 219-340, </pages> <year> 1960. </year>
Reference-contexts: Such a program would replace the "finite but not a priori bounded" numbers of the computational reals by the "finite and a priori bounded" numbers of the machine. The development of a sound understanding of the number systems starts with Wilkinson <ref> [36, 37] </ref>. The concept of the Wilkinson set fits very nicely with the ideas of denotational semantics [4, 6, 25, 29, 31]. This development should be primarily algebraic in nature, adding a level to the traditional algebraic hierarchy.
Reference: [37] <author> J. H. Wilkinson. </author> <title> Rounding Errors in Algebraic Processes. </title> <publisher> Wiley, </publisher> <year> 1963. </year>
Reference-contexts: Such a program would replace the "finite but not a priori bounded" numbers of the computational reals by the "finite and a priori bounded" numbers of the machine. The development of a sound understanding of the number systems starts with Wilkinson <ref> [36, 37] </ref>. The concept of the Wilkinson set fits very nicely with the ideas of denotational semantics [4, 6, 25, 29, 31]. This development should be primarily algebraic in nature, adding a level to the traditional algebraic hierarchy.
References-found: 37

