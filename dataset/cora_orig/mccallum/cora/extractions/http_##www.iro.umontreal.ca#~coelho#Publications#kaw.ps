URL: http://www.iro.umontreal.ca/~coelho/Publications/kaw.ps
Refering-URL: http://www.iro.umontreal.ca/~coelho/
Root-URL: http://www.iro.umontreal.ca
Email: email: fcoelho,lapalmeg@iro.umontreal.ca  
Title: Describing Reusable Problem-Solving Methods with a Method Ontology  
Author: Eliana Coelho and Guy Lapalme 
Address: C.P. 6128 Succ. Centre-Ville, Montreal, Quebec, Canada, H3C 3J7  
Affiliation: Departement d'Informatique et de Recherche Operationnelle, Universite de Montreal  
Abstract: To reuse a problem-solving method, a knowledge engineer must know the assumptions about the structure of the knowledge roles inherent to the method. We construct a method ontology in order to formalize these assumptions. This ontology defines the roles played by the knowledge in the inference process, and serves as an interface for the knowledge engineer to evaluate if an application domain conforms to the structure of knowledge used by the method. In addition, we define the inferences of the problem-solving method according to its method ontology. This definition is declarative and abstracts from the implementation details. We illustrate our approach using the problem-solving method Propose&Revise. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Aben, M. </author> <year> (1995). </year> <title> Formal Methods in Knowledge Engineering. </title> <type> PhD thesis, </type> <institution> SWI, University of Amsterdam. </institution>
Reference-contexts: In this paper, we propose an approach for specifying reusable problem-solving methods that first describes the knowledge roles, and then, describes the inferences. In this respect, we agree with Aben <ref> (Aben, 1995) </ref>, who considers that inferences operates over an ontology, and consequently, the ontology should be defined first. To define the knowledge roles, we construct a method ontology (Musen et al., 1994), which represents formally the knowledge in terms of concepts and relations between them. <p> In our future work, we intend to extend our approach for indexing PSMs by using the other kinds of assumptions proposed by (Benjamins and Pierret-Golbreich, 1996) such as teleological and pragmatical assumptions. The KADS methodology proposes a library of inferences <ref> (Aben, 1995) </ref>, in which the generic and reusable inferences are characterized in terms of operations on the base ontology. The base ontology abstracts from specific domains and provides a set of primitives to model more specific ontologies.
Reference: <author> Benjamins, R., , Fensel, D., and Straatman, R. </author> <year> (1996). </year> <title> Assumptions of Problem-Solving Methods and their Role in Knowledge Engineering. </title> <booktitle> In 12th European Conference on Artificial Intelligence (ECAI-96). </booktitle>
Reference-contexts: Choosing a method from a library has a previous phase in which the PSM is selected by its functionality. The functionality is described by a functional specification, which describes the PSM in terms of its input-output behavior and defines what can be achieved by the PSM <ref> (Benjamins et al., 1996) </ref>. Thus, before selecting a shell, a knowledge engineer will verify which methods accomplish the desired functionality of the application task. Then, she will choose among the selected methods one in which the ontology of roles matches the new application domain. <p> Our method ontology is not a complete description of the assumptions, but it is a starting point to understand and to reuse the method. Another work concerning the problem of specifying PSMs is the conceptual organization of assumptions proposed by <ref> (Benjamins and Pierret-Golbreich, 1996) </ref>. According to this proposition, the method ontology corresponds to the epistemological assumptions, which refer to the knowledge required by the PSM. In our future work, we intend to extend our approach for indexing PSMs by using the other kinds of assumptions proposed by (Benjamins and Pierret-Golbreich, 1996) <p> assumptions proposed by <ref> (Benjamins and Pierret-Golbreich, 1996) </ref>. According to this proposition, the method ontology corresponds to the epistemological assumptions, which refer to the knowledge required by the PSM. In our future work, we intend to extend our approach for indexing PSMs by using the other kinds of assumptions proposed by (Benjamins and Pierret-Golbreich, 1996) such as teleological and pragmatical assumptions. The KADS methodology proposes a library of inferences (Aben, 1995), in which the generic and reusable inferences are characterized in terms of operations on the base ontology.
Reference: <author> Benjamins, R. and Pierret-Golbreich, C. </author> <year> (1996). </year> <title> Assumptions of Problem-Solving Methods. </title> <booktitle> In 6th Workshop on Knowledge Engineering: Methods & Languages. </booktitle>
Reference-contexts: Choosing a method from a library has a previous phase in which the PSM is selected by its functionality. The functionality is described by a functional specification, which describes the PSM in terms of its input-output behavior and defines what can be achieved by the PSM <ref> (Benjamins et al., 1996) </ref>. Thus, before selecting a shell, a knowledge engineer will verify which methods accomplish the desired functionality of the application task. Then, she will choose among the selected methods one in which the ontology of roles matches the new application domain. <p> Our method ontology is not a complete description of the assumptions, but it is a starting point to understand and to reuse the method. Another work concerning the problem of specifying PSMs is the conceptual organization of assumptions proposed by <ref> (Benjamins and Pierret-Golbreich, 1996) </ref>. According to this proposition, the method ontology corresponds to the epistemological assumptions, which refer to the knowledge required by the PSM. In our future work, we intend to extend our approach for indexing PSMs by using the other kinds of assumptions proposed by (Benjamins and Pierret-Golbreich, 1996) <p> assumptions proposed by <ref> (Benjamins and Pierret-Golbreich, 1996) </ref>. According to this proposition, the method ontology corresponds to the epistemological assumptions, which refer to the knowledge required by the PSM. In our future work, we intend to extend our approach for indexing PSMs by using the other kinds of assumptions proposed by (Benjamins and Pierret-Golbreich, 1996) such as teleological and pragmatical assumptions. The KADS methodology proposes a library of inferences (Aben, 1995), in which the generic and reusable inferences are characterized in terms of operations on the base ontology.
Reference: <author> Brachman, R. and Schmolze, J. </author> <year> (1985). </year> <title> An overview of the KL-ONE knowledge representation system. </title> <journal> Cognitive Science, </journal> <volume> 9(2) </volume> <pages> 171-216. </pages>
Reference-contexts: The base ontology abstracts from specific domains and provides a set of primitives to model more specific ontologies. The KADS base ontology contains the epistemological primitives of KL-ONE language <ref> (Brachman and Schmolze, 1985) </ref>, such as concepts, instances, attributes, and so on. KADS's level of description makes the inferences more generic and reusable. In our work, we use the same idea of describing the inferences in terms of an ontology previously defined, but we adopted another perspective.
Reference: <author> Breuker, J. and Van de Velde, W. e. </author> <year> (1994). </year> <title> The Common KADS Library. </title> <type> Technical report, </type> <institution> University of Amsterdam and Free University of Brussels. </institution>
Reference: <author> Brill, D. </author> <year> (1993). </year> <note> Loom Reference Manual, Version 2.0. </note> <institution> University of Southern California. </institution>
Reference-contexts: We can make an analogy with conventional programming by comparing the method ontology with the formal parameter definitions in the head of functions. The difference is that the ontology permits more powerful and expressive definitions. Up to now, we have developed shells in Loom <ref> (Brill, 1993) </ref> for Cover&Differentiate and for Propose&Revise. The paper is organized in six sections. In the next section we present the KADS conceptual model, whose inference structure is used as the starting point for the description of PSMs. In the third section we present the architecture of our approach. <p> Each method ontology uncovers the underlying organization and assumptions about the knowledge used by the inferences of the PSM. The method ontology has the purpose of being an interface for using the corresponding shell, which is implemented in Loom <ref> (Brill, 1993) </ref>. Presently, we have developed shells for the methods Cover&Differentiate and for Propose&Revise. Different domains may fulfill the knowledge roles of the PSM, if the domain knowledge can be adapted to the structure of the knowledge roles.
Reference: <author> Chandrasekaran, B. </author> <year> (1983). </year> <title> Towards a Taxonomy of Problem Solving Types. </title> <journal> AI Magazine, </journal> <volume> 4(1) </volume> <pages> 9-17. </pages>
Reference: <author> Clancey, W. </author> <year> (1985). </year> <title> Heuristic Classification. </title> <journal> Artificial Intelligence, </journal> <volume> 1(27) </volume> <pages> 289-350. </pages>
Reference: <author> Clancey, W. </author> <year> (1992). </year> <title> Model Construction Operators. </title> <journal> Artificial Intelligence, </journal> <volume> 7(53) </volume> <pages> 1-115. </pages>
Reference-contexts: the conclusion of the paper with perspectives for future work. 2 KADS CONCEPTUAL MODEL KADS is a methodology for constructing knowledge-based systems based on two main principles: (1) the knowledge level principle (Newell, 1982), which claims an implementation independent description of the system; and (2) the separation of knowledge principle <ref> (Clancey, 1992) </ref>, which establishes that the domain knowledge must be represented separately from control knowledge. Domain knowledge is the set of concepts and their relations that corresponds to the conceptualization of a specific domain. Control knowledge is the set of operations over the domain knowledge to accomplish a task.
Reference: <author> Coelho, E. and Lapalme, G. (Montreal, </author> <month> August, </month> <year> 1995). </year> <title> Extending Ontolingua for Representing Control Knowledge. In IJCAI Workshop on Basic Ontological Issues in Knowledge Sharing. </title>
Reference-contexts: For more details about KIF and frame ontology see (Genesereth and Fikes, 1992; Gruber, 1993a). The inferences specify the basic inference capability of the problem-solving method. However, Ontolingua does not cope with the representation of the inferences. In a previous work <ref> (Coelho and Lapalme, 1995) </ref>, we proposed an extension to Ontolingua to represent control knowledge. There, we proposed a new Ontolingua form to represent the inference rules of a method by means of a KIF rule.
Reference: <author> Coelho, E., Lapalme, G., and Patel, V. </author> <year> (1996). </year> <title> From KADS Models to Operational Problem-Solving Methods: Perspectives in the Domain View. </title> <booktitle> In 6th Workshop on Knowledge Engineering: Methods & Languages. </booktitle>
Reference-contexts: Different domains may fulfill the knowledge roles of the PSM, if the domain knowledge can be adapted to the structure of the knowledge roles. Recent works in knowledge engineering emphasize the importance of the mapping among ontologies (Gennari et al., 1993). In a previous work <ref> (Coelho et al., 1996) </ref>, we defined a set of mapping operators that can be offered to a knowledge engineer to adapt the application domain to an existent PSM. When it is impossible to establish a mapping, the method will be rejected.
Reference: <author> Eshelman, L. </author> <year> (1988). </year> <title> MOLE: A Knowledge-Acquisition Tool for Cover-and-Differentiate Systems. </title> <editor> In Marcus, S., editor, </editor> <title> Automating Knowledge Acquisition for Expert Systems, </title> <booktitle> chapter 3, </booktitle> <pages> pages 37-79. </pages> <address> Boston: </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: One advantage of identifying the knowledge roles is to provide more guidance in the knowledge acquisition process, because only the necessary knowledge is acquired. Another advantage is that the knowledge roles serve as placeholders for different domains. For example, Cover&Differentiate <ref> (Eshelman, 1988) </ref> is a method for solving a diagnostic task, where the knowledge roles are identified by "symptoms" and "disorders". These roles can be fulfilled by different domains such as medical or electronic domains. <p> However, the description of existing problem-solving methods are either at an abstract level or at an implementation level. These two levels of description do not unveil the actual structure of the knowledge roles, thus limiting the comprehension and reusability of the methods. Mole <ref> (Eshelman, 1988) </ref>, for example, is a knowledge-acquisition tool that generates fl Supported by a scholarship from Conselho Nacional de Pesquisa e Desenvolvimento Tecnologico (CNPq) of the Brazilian Government. Cover&Differentiate systems.
Reference: <author> Fensel, D. </author> <year> (1995). </year> <title> A Case Study: Assumptions and Limitations of a Problem-Solving Method. </title> <booktitle> Proceedings of the 9th Banff Knowledge Acquisition for Knowledge-Based System Workshop (KAW'95). </booktitle>
Reference-contexts: However, unlike our approach, the OCML's data do not represent the assumptions about the knowledge roles of P&R, such as the restrictions on the nonexistence of cycles in the parameter dependency relations, the cardinality of the relations and so on. Fensel <ref> (Fensel, 1995) </ref> also copes with the problem of clarifying the assumptions of PSMs. He analyzes how differences in the assumptions about P&R can generate differences in the results and in the efficiency of the problem-solving method. There, the assumptions identified are described in an informal language.
Reference: <author> Genesereth, M. and Fikes, R. </author> <year> (1992). </year> <title> Knowledge Interchange Format, </title> <type> Version 3.0, </type> <institution> Computer Science Department, Stanford University edition. </institution>
Reference: <author> Gennari, J., Tu, S. W., Rothenfluh, T. E., and Musen, M. A. </author> <year> (1993). </year> <title> Mapping domains to methods in support of reuse. </title> <booktitle> In Proceedings of the 8th Banff Knowledge Acquisition for Knowledge-Based Workshop. </booktitle>
Reference-contexts: Presently, we have developed shells for the methods Cover&Differentiate and for Propose&Revise. Different domains may fulfill the knowledge roles of the PSM, if the domain knowledge can be adapted to the structure of the knowledge roles. Recent works in knowledge engineering emphasize the importance of the mapping among ontologies <ref> (Gennari et al., 1993) </ref>. In a previous work (Coelho et al., 1996), we defined a set of mapping operators that can be offered to a knowledge engineer to adapt the application domain to an existent PSM. When it is impossible to establish a mapping, the method will be rejected. <p> Another work whose research's goals are in line with ours is the Protege-II system (Musen et al., 1994), which defines a complete environment for modeling knowledge-based systems from reusable components. Our ontology is similar to Protege-II method ontology <ref> (Gennari et al., 1993) </ref>, which specifies the data requirements for a particular method. The significant advantage of Protege-II is the automatic generation of knowledge acquisition tools specific for each PSM. Our approach differs in that our method ontology allows to define declaratively the inferences of the method.
Reference: <author> Gruber, T. </author> <year> (1992). </year> <title> Ontolingua: A mechanism to support portable ontologies. </title> <type> Technical re-port, Technical Report KSL91-66, </type> <institution> Stanford University, Knowledge Systems Laboratory. </institution>
Reference-contexts: We depict the knowledge roles of the inference structure of P&R, thus making explicit the assumptions about the knowledge used by the method. We formalize the knowledge roles, and then, we define the inferences according to the knowledge roles defined. Ontolingua <ref> (Gruber, 1992) </ref> is a tool for building libraries of reusable knowledge bases represented according to the knowledge level. Ontolingua uses a set of definitions to define classes and relations. The body of these definitions are KIF sentences that express the semantics of the terms.
Reference: <author> Gruber, T. </author> <year> (1993a). </year> <title> Towards principles for the design of ontologies used for knowledge sharing. </title> <type> Technical report, Technical Report KSL93-04, </type> <institution> Stanford University, Knowledge Systems Laboratory. </institution>
Reference-contexts: Moreover, the method ontology allows a declarative definition of the inferences. Our goal is to make explicit the ontological commitments of the method <ref> (Gruber, 1993a) </ref>, without specifying the computational realization of the inferences. The basic idea of our approach is illustrated in Figure 4. The library of PSMs provides implemented shells whose interface is the method ontology. <p> Ontolingua is used originally for constructing ontologies that minimize the ontological commitments and are task-independent. To minimize the ontological commitments, an ontology should make as few claims as possible about the world being modeled <ref> (Gruber, 1993a) </ref>. Following this principle, the VT Ontology (Gruber et al., 1994) represented in Ontolingua does not model all the needed knowledge roles used by the method. Motta (Motta and Zdrahal, 1995) shows that the VT task ontology of Ontolingua lacks and misinterprets the knowledge used by P&R.
Reference: <author> Gruber, T. </author> <year> (1993b). </year> <title> A translation approach to portable ontology specifications. </title> <journal> Knowledge Acquisition, </journal> <volume> 2(5) </volume> <pages> 199-220. </pages>
Reference-contexts: The inferences are defined declaratively and abstracted from the implementation details. We use the inference structure of KADS as a starting point for describing a problem-solving method. To formalize the ontology of roles we use Ontolingua <ref> (Gruber, 1993b) </ref>. As Ontolin-gua does not represent control knowledge, we propose an extension of Ontolingua to define the inferences. The approach is illustrated with the method Propose&Revise (Marcus, 1988) applied to the VT task (Yost, 1994), which configures an elevator system.
Reference: <author> Gruber, T., Runkel, J. T., and Olsen, G. </author> <year> (1994). </year> <title> VT Domain Ontology. </title> <note> Available in ftp://ksl.stanford.edu/pub/knowledge-sharing/ontologies/. </note>
Reference-contexts: Ontolingua is used originally for constructing ontologies that minimize the ontological commitments and are task-independent. To minimize the ontological commitments, an ontology should make as few claims as possible about the world being modeled (Gruber, 1993a). Following this principle, the VT Ontology <ref> (Gruber et al., 1994) </ref> represented in Ontolingua does not model all the needed knowledge roles used by the method. Motta (Motta and Zdrahal, 1995) shows that the VT task ontology of Ontolingua lacks and misinterprets the knowledge used by P&R. Thus, VT Ontolingua makes the method less reusable.
Reference: <author> Guarino, N. </author> <year> (1995). </year> <title> Formal ontology, conceptual analysis and knowledge representation. </title> <journal> International Journal Human-Computer Studies, </journal> <volume> 43(5) </volume> <pages> 625-640. </pages>
Reference-contexts: The term comes from philosophy, where Ontology is a discipline that deals with the nature and organization of reality <ref> (Guarino, 1995) </ref>. Recent research in knowledge engineering (Neches et al., 1991) is exploring the problem of representing ontologies that are independent of the application programs. Consequently, large bodies of knowledge can be used for different purposes.
Reference: <author> Marcus, S. </author> <year> (1988). </year> <title> SALT: A Knowledge-Acquisition Tool for Propose-and-Revise Systems. </title> <editor> In Marcus, S., editor, </editor> <booktitle> Automating Knowledge Acquisition for Expert Systems, </booktitle> <pages> pages 81-123. </pages> <address> Boston: </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: To formalize the ontology of roles we use Ontolingua (Gruber, 1993b). As Ontolin-gua does not represent control knowledge, we propose an extension of Ontolingua to define the inferences. The approach is illustrated with the method Propose&Revise <ref> (Marcus, 1988) </ref> applied to the VT task (Yost, 1994), which configures an elevator system. Our goal is to construct a library of implemented and reusable PSMs, in which the method ontology serves as an interface for using existent methods. <p> P&R was originally implemented by Salt, a knowledge-acquisition tool that generates P&R systems <ref> (Marcus, 1988) </ref>. We modeled P&R for the VT (vertical transportation) task, based on the description made by Yost (Yost, 1994). The VT task defines the design problem in which the goal is to configure an elevator. Figure 3 illustrates the inference structure for P&R abstracted from the VT domain.
Reference: <author> McDermott, J. </author> <year> (1988). </year> <title> Preliminary steps toward a taxonomy of problem-solving methods. </title> <editor> In Marcus, S., editor, </editor> <title> Automating Knowledge Acquisition for Expert Systems, </title> <booktitle> chapter 8, </booktitle> <pages> pages 225-256. </pages> <address> Boston: </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: 1 INTRODUCTION Many approaches in knowledge engineering cope with the problem of constructing a library of reusable problem-solving methods (PSMs) (Chandrasekaran, 1983; Clancey, 1985; Steels, 1990; Musen et al., 1994; Breuker and Van de Velde, 1994). Here, we consider "problem-solving methods" in the sense defined by McDermott <ref> (McDermott, 1988) </ref>, in which a PSM is a strong method with a constrained control structure. These methods are called role limiting methods because their force is in defining precisely the roles played by the knowledge in the solution of the problem.
Reference: <author> Motta, E., O'Hara, K., Shadbolt, N., Stutt, A., and Zdrahal, Z. </author> <year> (1994). </year> <title> A VITAL Solution to the Sisyphus II Elevator Design Problem . 8th Banff Knowledge Acquisition for Knowledge-Based System Workshop (KAW'94). </title>
Reference-contexts: To validate our approach, we implemented it in Loom. Our system generated results similar to the test case presented in Yost's document. For representing VT in our system, we reused the ontology of Motta <ref> (Motta et al., 1994) </ref> represented in OCML, which is a knowledge-level modeling language used for the Vital methodology.
Reference: <author> Motta, E. and Zdrahal, Z. </author> <year> (1995). </year> <title> The Problem with What: Issues in method-independent task specifications. 9th Banff Knowledge Acquisition for Knowledge-Based System Workshop (KAW'95). </title>
Reference-contexts: To minimize the ontological commitments, an ontology should make as few claims as possible about the world being modeled (Gruber, 1993a). Following this principle, the VT Ontology (Gruber et al., 1994) represented in Ontolingua does not model all the needed knowledge roles used by the method. Motta <ref> (Motta and Zdrahal, 1995) </ref> shows that the VT task ontology of Ontolingua lacks and misinterprets the knowledge used by P&R. Thus, VT Ontolingua makes the method less reusable. In contrast, we are interested in developing ontologies that unveil as much as possible about the knowledge used by the method.
Reference: <author> Musen, M., Gennari, J., Eriksson, H., Tu, S., and Puerta, A. </author> <year> (1994). </year> <title> PROT EG E-II: Computer Support for Development of Intelligent Systems From Libraries of Components (Tech. </title> <type> Rep. Nr. KSL-94-60). Technical report, </type> <institution> Stanford University, Knowledge Systems Laboratory. </institution>
Reference-contexts: In this respect, we agree with Aben (Aben, 1995), who considers that inferences operates over an ontology, and consequently, the ontology should be defined first. To define the knowledge roles, we construct a method ontology <ref> (Musen et al., 1994) </ref>, which represents formally the knowledge in terms of concepts and relations between them. To define the operations over the knowledge roles, we define the inferences, which refer to the ontology previously defined. The method ontology clarifies the assumptions about the knowledge used by a method. <p> If so, the knowledge engineer must rearrange the application domain to conform to the knowledge roles using mapping operations. Our work adopts another orientation. We want to define ontologies that are specific for problem-solving methods. We call these specific ontologies method ontologies, as in Protege-II approach <ref> (Musen et al., 1994) </ref>, because they express the structure of the knowledge roles used by a PSM. Moreover, the method ontology allows a declarative definition of the inferences. Our goal is to make explicit the ontological commitments of the method (Gruber, 1993a), without specifying the computational realization of the inferences. <p> Our method ontologies are specific, but they are useful to understand a method and can contribute to its reusability. Another work whose research's goals are in line with ours is the Protege-II system <ref> (Musen et al., 1994) </ref>, which defines a complete environment for modeling knowledge-based systems from reusable components. Our ontology is similar to Protege-II method ontology (Gennari et al., 1993), which specifies the data requirements for a particular method.
Reference: <author> Neches, R., Fikes, R., Finin, T., Gruber, T., Patil, R., Senator, T., and Swartout, W. R. </author> <year> (1991). </year> <title> Enabling technology for knowledge sharing. </title> <journal> AI Magazine, </journal> <volume> 12(3) </volume> <pages> 16-36. </pages>
Reference-contexts: The term comes from philosophy, where Ontology is a discipline that deals with the nature and organization of reality (Guarino, 1995). Recent research in knowledge engineering <ref> (Neches et al., 1991) </ref> is exploring the problem of representing ontologies that are independent of the application programs. Consequently, large bodies of knowledge can be used for different purposes.
Reference: <author> Newell, A. </author> <year> (1982). </year> <title> The Knowledge Level. </title> <journal> Artificial Intelligence, </journal> <volume> 1(18) </volume> <pages> 87-127. </pages>
Reference-contexts: In the fifth section, we relate our work with similar researches. Section six presents the conclusion of the paper with perspectives for future work. 2 KADS CONCEPTUAL MODEL KADS is a methodology for constructing knowledge-based systems based on two main principles: (1) the knowledge level principle <ref> (Newell, 1982) </ref>, which claims an implementation independent description of the system; and (2) the separation of knowledge principle (Clancey, 1992), which establishes that the domain knowledge must be represented separately from control knowledge.
Reference: <author> Steels, L. </author> <year> (1990). </year> <title> Components of expertise. </title> <journal> AI Magazine, </journal> <volume> 11(2) </volume> <pages> 28-49. </pages>
Reference: <author> Yost, G. R. </author> <year> (1994). </year> <title> Configuring Elevator Systems. </title> <type> Technical report, </type> <institution> Knowledge Systems Laboratory, Stanford University. Edited and changed by T. </institution> <note> E. Rothenfluh in http://camis.stanford.edu/projects/protege/sisyphus-2/s2-0.html. </note>
Reference-contexts: To formalize the ontology of roles we use Ontolingua (Gruber, 1993b). As Ontolin-gua does not represent control knowledge, we propose an extension of Ontolingua to define the inferences. The approach is illustrated with the method Propose&Revise (Marcus, 1988) applied to the VT task <ref> (Yost, 1994) </ref>, which configures an elevator system. Our goal is to construct a library of implemented and reusable PSMs, in which the method ontology serves as an interface for using existent methods. <p> P&R was originally implemented by Salt, a knowledge-acquisition tool that generates P&R systems (Marcus, 1988). We modeled P&R for the VT (vertical transportation) task, based on the description made by Yost <ref> (Yost, 1994) </ref>. The VT task defines the design problem in which the goal is to configure an elevator. Figure 3 illustrates the inference structure for P&R abstracted from the VT domain.
References-found: 29

