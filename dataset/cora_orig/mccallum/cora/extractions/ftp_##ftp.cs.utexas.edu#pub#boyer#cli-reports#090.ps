URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/090.ps
Refering-URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/index.html
Root-URL: 
Title: Testing the FM9001 Microprocessor  
Author: Kenneth L. Albin, Bishop C. Brock, Warren A. Hunt, Jr., Lawrence M. Smith 
Note: Copyright c 1995 Computational Logic, Inc.  
Address: 1717 West Sixth Street, Suite 290 Austin, Texas 78703-4776  
Affiliation: Computational Logic, Inc.  
Pubnum: Technical Report  
Email: EMAIL: hunt@cli.com  
Phone: TEL: +1 512 322 9951  
Date: 90 January 6, 1995  
Abstract: This work was supported in part at Computational Logic, Inc. and by the Defense Advanced Research Projects Agency, ARPA Orders 6082 and 9151. The views and conclusions contained in this document are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Kenneth L. Albin and Lawrence M. Smith. </author> <title> FM9001 Model Validation. Internal Report 298, </title> <booktitle> Computational Logic, </booktitle> <year> 1994. </year>
Reference: [2] <author> Kenneth L. Albin. </author> <title> The FM9001 Single-Board Computer. Internal Note 303, </title> <booktitle> Computational Logic, </booktitle> <year> 1994. </year>
Reference-contexts: Altogether, information for approximately several thousand clock cycles was gathered CLI Technical Report 90 9 CLI Technical Report 90 10 and compared in this fashion. Further details concerning the construction of the single-board computer may be found in Ken Albin's report <ref> [2] </ref>, which includes the schematic wiring diagram, the monitor program, and the workstation-to-monitor interface program. Subsequently, for work on real-time software verification, the board has been adapted to include a simple switch and a light, both of which are memory mapped.
Reference: [3] <author> Bhaskar Bose. </author> <title> DDD|A Transformation System for Digital Design Derivation. </title> <type> Technical Report 331, </type> <institution> Computer Science Department, Indiana University, </institution> <month> May, </month> <year> 1991. </year>
Reference-contexts: Model Validation on the LV500 Logic Verifier" [16]. 6 Independent Testing at Indiana University Bhaskar Bose of Indiana University, working under the supervision of Steven John-son, studied the FM9001 design with an eye towards attempting to automatically synthesize an FM9001 design from its behavioral specification using the DDD synthesis tool <ref> [3, 4] </ref>. As a part of the preparation for this synthesis project, William Hunt (Warren's brother) of the VLSI laboratory of the Computer Science Department at Indiana University interfaced a fabricated FM9001 to the Indiana University Logic Engine.
Reference: [4] <author> Bhaskar Bose. DDD|FM9001: </author> <title> Derivation of a Verified Microprocessor. </title> <publisher> Ph. </publisher> <address> D. </address> <institution> Dissertation, Indiana University, </institution> <year> 1994. </year>
Reference-contexts: Model Validation on the LV500 Logic Verifier" [16]. 6 Independent Testing at Indiana University Bhaskar Bose of Indiana University, working under the supervision of Steven John-son, studied the FM9001 design with an eye towards attempting to automatically synthesize an FM9001 design from its behavioral specification using the DDD synthesis tool <ref> [3, 4] </ref>. As a part of the preparation for this synthesis project, William Hunt (Warren's brother) of the VLSI laboratory of the Computer Science Department at Indiana University interfaced a fabricated FM9001 to the Indiana University Logic Engine.
Reference: [5] <author> R.S. Boyer and J S. Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction The FM9001 is a general purpose CMOS, 32-bit microprocessor that was fabricated for us by LSI Logic in 1991. Prior to fabrication, the netlist design of the FM9001 that we later supplied to LSI Logic was formally proven, using the mechanical theorem prover Nqthm <ref> [7, 5] </ref>, to implement its user-level, i.e., machine-code level, specification. (See the report "The FM9001 Microprocessor Proof" [7] for the details of this formal proof effort.) In the present report, we describe a series of post-fabrication physical tests that have increased our confidence that the manufactured device does indeed meet its
Reference: [6] <author> Bishop C. Brock, Warren A. Hunt, Jr., and William D. Young. </author> <title> Introduction to a Formally Defined Hardware Description Language. Theorem Provers in Circuit Design, </title> <editor> V. Stavridou, T. Melham, and R. Boute, eds., </editor> <publisher> North-Holland, </publisher> <pages> pp. 3-35, </pages> <year> 1992. </year>
Reference-contexts: Some additional testing of the FM9001 has been performed at Indiana University at Bloomington. See Section 6. Testing is an important component of our CLI stack. It provides assurance that our formalization of the netlist of the FM9001 (in the DUAL-EVAL formal hardware description language <ref> [6] </ref>) is a good clock-cycle by clock-cycle model of the operation of the FM9001. Testing is always required because the manufacturing process can introduce physical flaws. The testing we have performed here is primarily aimed at checking the translation process from DUAL-EVAL netlists into LSI Logic's design environment. <p> We actually produced the test vectors using our DUAL-EVAL simulator and a parallel-fault simulator we developed. We produced test vectors that satisfied our fault simulator before we translated both the netlist and the test vectors into a LSI Logic compatible format. Our DUAL-EVAL hardware description language <ref> [9, 6] </ref> was designed in such a way that it was extremely simple to translate designs into the NDL. In fact, NDL was based upon TEGAS, a simulation control language that Bishop Brock helped develop.
Reference: [7] <author> Bishop C. Brock, Warren A. Hunt, Jr., and Matt Kaufmann. </author> <title> The FM9001 Microprocessor Proof. </title> <type> Technical Report 86, </type> <institution> Computational Logic, </institution> <month> December, </month> <year> 1994. </year>
Reference-contexts: 1 Introduction The FM9001 is a general purpose CMOS, 32-bit microprocessor that was fabricated for us by LSI Logic in 1991. Prior to fabrication, the netlist design of the FM9001 that we later supplied to LSI Logic was formally proven, using the mechanical theorem prover Nqthm <ref> [7, 5] </ref>, to implement its user-level, i.e., machine-code level, specification. (See the report "The FM9001 Microprocessor Proof" [7] for the details of this formal proof effort.) In the present report, we describe a series of post-fabrication physical tests that have increased our confidence that the manufactured device does indeed meet its <p> Prior to fabrication, the netlist design of the FM9001 that we later supplied to LSI Logic was formally proven, using the mechanical theorem prover Nqthm [7, 5], to implement its user-level, i.e., machine-code level, specification. (See the report "The FM9001 Microprocessor Proof" <ref> [7] </ref> for the details of this formal proof effort.) In the present report, we describe a series of post-fabrication physical tests that have increased our confidence that the manufactured device does indeed meet its netlist specification.
Reference: [8] <author> Arthur D. Flatau. </author> <title> A Verified Implementation of an Applicative language with Dynamic Storage Allocation. </title> <publisher> Ph. </publisher> <address> D. </address> <institution> Dissertation, The University of Texas at Austin, </institution> <month> December, </month> <year> 1992. </year> <note> Also available (minus certain appendices) from Computational Logic as CLI Technical Report 83. </note>
Reference-contexts: Finally, we wanted to validate our effort in producing a verified hardware and software computing platform. The CLI "short stack" [15] includes the FM9001 microprocessor as a base, upon which the Piton assembler [13, 14], the Micro-Gypsy compiler [22, 21, 23], and the Micro-Nqthm compiler <ref> [8] </ref> have been proven to operate correctly. We find that our having actually completed this verification exercise to be compelling evidence [12] that we do not have to settle for hardware and software validated only with the conventional test-oriented approaches.
Reference: [9] <author> Warren A. Hunt, Jr. and Bishop Brock. </author> <title> A Formal HDL and Its Use in the FM9001 Verification. In C.A.R. </title> <editor> Hoare and M.J.C. Gordon, editors, </editor> <booktitle> Mechanized Reasoning and Hardware Design, </booktitle> <pages> pages 35-48. </pages> <booktitle> Prentice-Hall International Series in Computer Science, </booktitle> <address> Englewood Cliffs, N.J., </address> <year> 1992. </year>
Reference-contexts: We actually produced the test vectors using our DUAL-EVAL simulator and a parallel-fault simulator we developed. We produced test vectors that satisfied our fault simulator before we translated both the netlist and the test vectors into a LSI Logic compatible format. Our DUAL-EVAL hardware description language <ref> [9, 6] </ref> was designed in such a way that it was extremely simple to translate designs into the NDL. In fact, NDL was based upon TEGAS, a simulation control language that Bishop Brock helped develop.
Reference: [10] <author> IEEE. </author> <title> Standard VHDL Language Reference Manual, </title> <address> ANSI/IEEE Std 1076-1993. </address> <publisher> IEEE, </publisher> <address> 345 East 47th St., NY, NY, </address> <month> June 6, </month> <year> 1994. </year>
Reference-contexts: Finally, before we proceed to describe the physical testing that we performed, it is perhaps worth noting that it is also straightforward to translate DUAL-EVAL netlists into VHDL <ref> [10] </ref>, and we have in fact also, post-fabrication, simulated a VHDL version of the FM9001 netlist under the Vantage VHDL simulator, using LSI-Logic-supplied VHDL models of LSI Logic's primitives.
Reference: [11] <institution> LSI LOGIC. 1.5-Micron Array-Based Products Databook. LSI Logic Corporation, Milpitas, </institution> <address> CA. </address> <year> 1990. </year>
Reference-contexts: Our lowest level formal model was one that defined such LSI Logic primitives as an AND gate and a one-bit latch. Even though LSI Logic provides a databook <ref> [11] </ref> of gate-level primitives, their actual gate array devices are composed of columns of N-type and P-type transistors. It was important to us to discover whether the translation process from our gate-level model to LSI Logic's Network Description Language (NDL) and then on to transistors all worked as we expected.
Reference: [12] <author> John McCarthy. </author> <title> It's Past Time for Practical Computer Checked Proofs of Program Correctness. </title> <booktitle> Computational Logic, Symposium Proceedings, Brussels, Esprit Basic Research Series, DG XIII, Commission of the European Communities, </booktitle> <publisher> Springer-Verlag, </publisher> <month> November </month> <year> 1990. </year> <type> CLI Technical Report 90 16 </type>
Reference-contexts: We find that our having actually completed this verification exercise to be compelling evidence <ref> [12] </ref> that we do not have to settle for hardware and software validated only with the conventional test-oriented approaches. Upon first receiving the fabricated FM9001 integrated circuits we evaluated CLI Technical Report 90 2 the timing of the various control signals by stimulating the FM9001 with a fixed instruction.
Reference: [13] <author> J Strother Moore. PITON: </author> <title> A Verified Assembly Level Language. </title> <type> Technical Report 22, </type> <note> Computational Logic, 1988. To appear as a book in the Kluwer's series on automated reasoning under the title Piton: A Mechanically Verified Assembly-Level Language. </note>
Reference-contexts: Finally, we wanted to validate our effort in producing a verified hardware and software computing platform. The CLI "short stack" [15] includes the FM9001 microprocessor as a base, upon which the Piton assembler <ref> [13, 14] </ref>, the Micro-Gypsy compiler [22, 21, 23], and the Micro-Nqthm compiler [8] have been proven to operate correctly. <p> The single-board computer has been used to execute the following example programs: * various utility programs and the ROM-based monitor program; * a Piton program that adds multi-word integers <ref> [13] </ref>; * a Piton program that plays the game Nim, proved to win if possible [19]; * a factorial program; * a program [18] that computes the Takeuchi function, which is commonly used to benchmark Lisp systems; and * a real-time program that senses a switch and turns on a light
Reference: [14] <author> J Strother Moore. </author> <title> A Mechanically Verified Language Implementation. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 5(4) </volume> <pages> 493-518, </pages> <month> December </month> <year> 1989. </year> <note> Also published as CLI Technical Report 30. </note>
Reference-contexts: Finally, we wanted to validate our effort in producing a verified hardware and software computing platform. The CLI "short stack" [15] includes the FM9001 microprocessor as a base, upon which the Piton assembler <ref> [13, 14] </ref>, the Micro-Gypsy compiler [22, 21, 23], and the Micro-Nqthm compiler [8] have been proven to operate correctly.
Reference: [15] <author> J Strother Moore, et al. </author> <title> Special Issue on System Verification. </title> <journal> Journal of Automated Reasoning, </journal> <volume> Vol. 5, No. 4, </volume> <pages> pp. 409-530, </pages> <year> 1989. </year>
Reference-contexts: Finally, we wanted to validate our effort in producing a verified hardware and software computing platform. The CLI "short stack" <ref> [15] </ref> includes the FM9001 microprocessor as a base, upon which the Piton assembler [13, 14], the Micro-Gypsy compiler [22, 21, 23], and the Micro-Nqthm compiler [8] have been proven to operate correctly.
Reference: [16] <author> Lawrence M. Smith. </author> <title> FM9001 Model Validation on the LV500 Logic Verifier. Internal Report 299, </title> <booktitle> Computational Logic, </booktitle> <year> 1994. </year>
Reference-contexts: Given a formal model for a VHDL-like language one could verify such low-level timing properties. Extensive details of the LV500 testing work may be found in Lawrence M. Smith's report "FM9001 Model Validation on the LV500 Logic Verifier" <ref> [16] </ref>. 6 Independent Testing at Indiana University Bhaskar Bose of Indiana University, working under the supervision of Steven John-son, studied the FM9001 design with an eye towards attempting to automatically synthesize an FM9001 design from its behavioral specification using the DDD synthesis tool [3, 4].
Reference: [17] <institution> Tektronix, Inc. LV500/SE Operator's Manual. Tektronix, Inc. Walker Road Industrial Park, Beaverton, </institution> <address> OR 97076. </address> <year> 1992. </year>
Reference-contexts: Using this single-board computer we have run a number of pieces of software. See Section 4. To obtain pin-level control and testing of the FM9001, we also connected the FM9001 to a Tektronix LV500 <ref> [17] </ref>, which is an industrial "stand-alone verification tester for ASICs." See Section 5. Some additional testing of the FM9001 has been performed at Indiana University at Bloomington. See Section 6. Testing is an important component of our CLI stack.
Reference: [18] <author> Matthew Wilding. </author> <title> Using the Fabricated FM9001. Internal Note 260, </title> <booktitle> Computational Logic, </booktitle> <month> August, </month> <year> 1993. </year>
Reference-contexts: computer has been used to execute the following example programs: * various utility programs and the ROM-based monitor program; * a Piton program that adds multi-word integers [13]; * a Piton program that plays the game Nim, proved to win if possible [19]; * a factorial program; * a program <ref> [18] </ref> that computes the Takeuchi function, which is commonly used to benchmark Lisp systems; and * a real-time program that senses a switch and turns on a light when the switch is depressed [20]. In all these cases, the FM9001 microprocessor worked as expected.
Reference: [19] <author> Matthew Wilding. </author> <title> A Mechanically Verified Application for a Mechanically Verified Environment. </title> <booktitle> Fifth Conference on Computer-Aided Verification, Lecture Notes in Computer Science, </booktitle> <volume> LNCS 697, </volume> <pages> pp. 268-279, </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> Also available as Technical Report 78, Computational Logic, </note> <year> 1994. </year>
Reference-contexts: The single-board computer has been used to execute the following example programs: * various utility programs and the ROM-based monitor program; * a Piton program that adds multi-word integers [13]; * a Piton program that plays the game Nim, proved to win if possible <ref> [19] </ref>; * a factorial program; * a program [18] that computes the Takeuchi function, which is commonly used to benchmark Lisp systems; and * a real-time program that senses a switch and turns on a light when the switch is depressed [20].
Reference: [20] <author> Matthew Wilding. </author> <title> A Real-time Programmer's Model of the FM9001. Internal Note 302, </title> <booktitle> Computational Logic, </booktitle> <month> December, </month> <year> 1994. </year>
Reference-contexts: plays the game Nim, proved to win if possible [19]; * a factorial program; * a program [18] that computes the Takeuchi function, which is commonly used to benchmark Lisp systems; and * a real-time program that senses a switch and turns on a light when the switch is depressed <ref> [20] </ref>. In all these cases, the FM9001 microprocessor worked as expected. Perhaps the most satisfying of these software tests is the Nim game-playing program.
Reference: [21] <author> William D. Young. </author> <title> A Mechanically Verified Code Generator. </title> <journal> Journal of Automated Reasoning, </journal> <volume> Vol. 5, Number 4, </volume> <month> (December, </month> <year> 1989), </year> <pages> pp. 493-518. </pages> <note> Also available from Computational Logic as Technical Report 37. </note>
Reference-contexts: Finally, we wanted to validate our effort in producing a verified hardware and software computing platform. The CLI "short stack" [15] includes the FM9001 microprocessor as a base, upon which the Piton assembler [13, 14], the Micro-Gypsy compiler <ref> [22, 21, 23] </ref>, and the Micro-Nqthm compiler [8] have been proven to operate correctly. We find that our having actually completed this verification exercise to be compelling evidence [12] that we do not have to settle for hardware and software validated only with the conventional test-oriented approaches.
Reference: [22] <author> William D. Young. </author> <title> A Verified Code Generator for a Subset of Gypsy. </title> <publisher> Ph. </publisher> <address> D. </address> <institution> Dissertation, University of Texas at Austin, </institution> <year> 1988. </year>
Reference-contexts: Finally, we wanted to validate our effort in producing a verified hardware and software computing platform. The CLI "short stack" [15] includes the FM9001 microprocessor as a base, upon which the Piton assembler [13, 14], the Micro-Gypsy compiler <ref> [22, 21, 23] </ref>, and the Micro-Nqthm compiler [8] have been proven to operate correctly. We find that our having actually completed this verification exercise to be compelling evidence [12] that we do not have to settle for hardware and software validated only with the conventional test-oriented approaches.
Reference: [23] <author> William D. Young. </author> <title> Verified Compilation in Micro-Gypsy. </title> <booktitle> Proceedings of the Software Testing, Analysis and Verification Symposium, </booktitle> <address> Key West Florida, </address> <month> December, </month> <year> 1989, </year> <pages> pp. 20-26. </pages>
Reference-contexts: Finally, we wanted to validate our effort in producing a verified hardware and software computing platform. The CLI "short stack" [15] includes the FM9001 microprocessor as a base, upon which the Piton assembler [13, 14], the Micro-Gypsy compiler <ref> [22, 21, 23] </ref>, and the Micro-Nqthm compiler [8] have been proven to operate correctly. We find that our having actually completed this verification exercise to be compelling evidence [12] that we do not have to settle for hardware and software validated only with the conventional test-oriented approaches.
References-found: 23

