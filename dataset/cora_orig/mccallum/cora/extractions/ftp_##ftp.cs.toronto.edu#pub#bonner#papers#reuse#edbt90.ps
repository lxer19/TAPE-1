URL: ftp://ftp.cs.toronto.edu/pub/bonner/papers/reuse/edbt90.ps
Refering-URL: http://www.cs.toronto.edu/DB/people/bonner/papers.html
Root-URL: 
Title: The Reuse and Modification of Rulebases by Predicate Substitution  
Author: Anthony J. Bonner Tomasz Imielinski 
Date: March, 1990  
Note: United States  
Address: New Brunswick, NJ 08903  
Affiliation: Rutgers University Department of Computer Science  
Abstract: We propose a method for reusing and modifying a deductive database. The need for such techniques occurs when new rulebased applications differ only slightly from existing ones or when an application is to be incrementally updated. Such techniques are particularly important when reprogramming is expensive or unreliable. In order to facilitate reuse we extend deductive database systems by the concept of predicate substitution. In this way, during query evaluation, not only variables, but also predicates can be substituted. Substitution increases the expressive power of Datalog. Not only does data complexity increase from P T IM E to EXP T IM E, but substitution also allows large sets of Datalog rules to be succinctly expressed. The paper provides a proof and model theory for this language, including a fixpoint semantics. fl This paper appears in the Proceedings of the International Conference on Extending Database Technology (EDBT), pages 437-451. Lecture Notes in Computer Science, volume 416. Springer Verlag. Conference held March 26-30 1990 in Venice, Italy. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K.R. Apt and M.H. Van Emden. </author> <title> Contributions to the Theory of Logic Programming. </title> <journal> Journal of the ACM, </journal> <volume> 29(3) </volume> <pages> 841-862, </pages> <year> 1982. </year>
Reference-contexts: This captures, in a model-theoretic way, the view of this paper: that rulebases with substitution are a short-hand notation for rulebases without. The inference system for substitution is shown to be sound and complete with respect to this semantics. As in the theory of Horn logic <ref> [8, 1] </ref>, we complement the model-theoretic semantics with a fix-point semantics. We define a monotonic "T-operator" which can be applied to a rulebase in a bottom-up fashion, generating the minimal model (or least fixpoint) piece-by-piece. <p> We thus get the following corollary. Corollary 2 If S fl [ DB ` c fi then S; DB j= fi. Soundness follows by definition 4. 4 Fixpoint Semantics As in the theory of Horn logic <ref> [8, 1] </ref>, we complement the model-theoretic semantics with a fix-point semantics. In particular, we define a monotonic "T-operator" which can be applied to a rulebase in a bottom-up fashion, generating the minimal model (or least fixpoint) piece-by-piece.
Reference: [2] <author> C. Beeri, S. Naqvi, and R. Ramakrishnan. </author> <title> Sets and Negation in a Logic Database Language (LDL). </title> <booktitle> In Proceedings of the ACM Symposium on the Principles of Database Systems (PODS), </booktitle> <address> San Diego, CA, </address> <year> 1987. </year>
Reference-contexts: In this paper, we studied the complexity and expressive power of Datalog with substitution; but we plan to investigate the effect of substitution on other languages, such as the various extensions of Datalog with complex objects <ref> [4, 7, 2] </ref>, as well as extensions of Datalog which allow re stricted use of function symbols, as in [3]. 17
Reference: [3] <author> J. Chomicki and T. Imielinski. </author> <title> Relational Specification of Infinite Query Answers. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Portland, Oregon, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: the complexity and expressive power of Datalog with substitution; but we plan to investigate the effect of substitution on other languages, such as the various extensions of Datalog with complex objects [4, 7, 2], as well as extensions of Datalog which allow re stricted use of function symbols, as in <ref> [3] </ref>. 17
Reference: [4] <author> G.M. Kuper. </author> <title> Logic Programming with Sets. </title> <booktitle> In Proceedings of the ACM Symposium on the Principles of Database Systems (PODS), </booktitle> <address> San Diego, CA, </address> <year> 1987. </year>
Reference-contexts: In this paper, we studied the complexity and expressive power of Datalog with substitution; but we plan to investigate the effect of substitution on other languages, such as the various extensions of Datalog with complex objects <ref> [4, 7, 2] </ref>, as well as extensions of Datalog which allow re stricted use of function symbols, as in [3]. 17
Reference: [5] <author> L.T. McCarty and N.S. Sridharan. </author> <title> The Representation of an Evolving System of Legal Concepts. II. Prototypes and Deformations. </title> <booktitle> In Proceedings of the Seventh IJCAI, </booktitle> <pages> pages 246-253, </pages> <year> 1981. </year>
Reference-contexts: Such systems have a variety of applications, such as computer-based medical and legal consultation systems. Kowalski and Sergot, for instance, have encoded the British Nationality Act in Prolog, and McCarty and Sridha-ran have developed expert systems for reasoning about contract law and corporate tax law <ref> [5] </ref>. As laws are amended, such systems have to be updated. For instance, sections of the income tax act could be amended to treat residents as citizens. In this case, every occurrence of "citizen" could be replaced by a new predicate meaning "citizen or resident".
Reference: [6] <author> A. Tarski. </author> <title> A Lattice-Theoretical Fixpoint Theorem and its Applications. </title> <journal> Pacific Journal of Mathematics, </journal> <volume> 5 </volume> <pages> 285-309, </pages> <year> 1955. </year>
Reference-contexts: Formally, the set of Horn rulebases (i.e., the interpretations of rulebases with substitution) is viewed as a lattice, and the T-operator maps one element of this lattice onto another element. The operator is then shown to be monotone and continuous, and the Tarski fixpoint theorem <ref> [6] </ref> is applied in the usual way. A precise statement of definitions and results is provided. Several examples are given of the application of the T-operator to actual rulebases, illustrating the way in which each application of the operator "unfolds" rules with substitution to produce equivalent Horn rules.
Reference: [7] <author> S. Tsur and C. Zaniolo. </author> <title> LDL: A Logic-Based Data-Language. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases (VLDB), </booktitle> <address> Kyoto, Japan, </address> <year> 1986. </year>
Reference-contexts: In this paper, we studied the complexity and expressive power of Datalog with substitution; but we plan to investigate the effect of substitution on other languages, such as the various extensions of Datalog with complex objects <ref> [4, 7, 2] </ref>, as well as extensions of Datalog which allow re stricted use of function symbols, as in [3]. 17
Reference: [8] <author> M.H. Van Emden and R.A. Kowalski. </author> <title> The Semantics of Predicate Logic as a Programming Language. </title> <journal> Journal of the ACM, </journal> <volume> 23(4) </volume> <pages> 733-742, </pages> <year> 1976. </year>
Reference-contexts: This captures, in a model-theoretic way, the view of this paper: that rulebases with substitution are a short-hand notation for rulebases without. The inference system for substitution is shown to be sound and complete with respect to this semantics. As in the theory of Horn logic <ref> [8, 1] </ref>, we complement the model-theoretic semantics with a fix-point semantics. We define a monotonic "T-operator" which can be applied to a rulebase in a bottom-up fashion, generating the minimal model (or least fixpoint) piece-by-piece. <p> We thus get the following corollary. Corollary 2 If S fl [ DB ` c fi then S; DB j= fi. Soundness follows by definition 4. 4 Fixpoint Semantics As in the theory of Horn logic <ref> [8, 1] </ref>, we complement the model-theoretic semantics with a fix-point semantics. In particular, we define a monotonic "T-operator" which can be applied to a rulebase in a bottom-up fashion, generating the minimal model (or least fixpoint) piece-by-piece.
References-found: 8

