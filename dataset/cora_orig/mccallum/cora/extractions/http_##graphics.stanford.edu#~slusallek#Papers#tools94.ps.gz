URL: http://graphics.stanford.edu/~slusallek/Papers/tools94.ps.gz
Refering-URL: http://graphics.stanford.edu/~slusallek/cv.html
Root-URL: http://www.cs.stanford.edu
Title: Using C++ Class Libraries from an Interpreted Language  
Author: Wolfgang Heidrich Philipp Slusallek Hans-Peter Seidel 
Date: March 11, 1994  
Affiliation: University of Erlangen  
Abstract: The use of object-oriented programming, and C++ in particular, to build reusable class libraries has proven to be a very successful programming technique. However, the flexible composition of class libraries to create application programs has received little focus. In this paper we present a tool, that automatically maps a C++ class hierarchy to an equivalent hierarchy in an interpreted language. Using an interpreted language offers the programmer more flexibility when composing applications from existing class libraries.
Abstract-found: 1
Intro-found: 1
Reference: [Elis and Stroustrup, 1990] <author> Elis, M. A. and Stroustrup, B. </author> <year> (1990). </year> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison Wesley. </publisher>
Reference-contexts: 1 Introduction For quite some time object-oriented design and programming have received great attention for the development of large scale applications. One of the most important features is the ability to reuse software, once it has been implemented in well structured class libraries. C++ <ref> [Elis and Stroustrup, 1990] </ref> has established itself as one of the major programming languages in this field. Today, a wide range of class libraries is available for C++.
Reference: [Gorlen, 1990] <author> Gorlen, K. E. </author> <year> (1990). </year> <title> Data Abstaraction and Object-Oriented Programming in C++. </title> <publisher> Teubner. </publisher>
Reference-contexts: C++ [Elis and Stroustrup, 1990] has established itself as one of the major programming languages in this field. Today, a wide range of class libraries is available for C++. Most of them come from a research background (for example InterViews [Linton et al., 1989], NIHCL <ref> [Gorlen, 1990] </ref>, LEDA [Naher, 1990], Motif++, Fresco,...), but more and more commercial software is being developed in C++ and is available in form of class libraries (Rogue Wave [Keffer, 1992], Booch Components, Inventor [Strauss and Carey, 1992], C++/Views, USL, ImageVision [Neider and Tillmann, 1992], ...).
Reference: [Keffer, 1992] <author> Keffer, T. </author> <year> (1992). </year> <title> Tools.h++. Rogue Wave Software. </title>
Reference-contexts: Most of them come from a research background (for example InterViews [Linton et al., 1989], NIHCL [Gorlen, 1990], LEDA [Naher, 1990], Motif++, Fresco,...), but more and more commercial software is being developed in C++ and is available in form of class libraries (Rogue Wave <ref> [Keffer, 1992] </ref>, Booch Components, Inventor [Strauss and Carey, 1992], C++/Views, USL, ImageVision [Neider and Tillmann, 1992], ...).
Reference: [Linton et al., 1989] <author> Linton, M. A., Vlissides, J. M., and R.Calder, P. </author> <year> (1989). </year> <title> Composing user interfaces with interviews. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 8-22. </pages>
Reference-contexts: C++ [Elis and Stroustrup, 1990] has established itself as one of the major programming languages in this field. Today, a wide range of class libraries is available for C++. Most of them come from a research background (for example InterViews <ref> [Linton et al., 1989] </ref>, NIHCL [Gorlen, 1990], LEDA [Naher, 1990], Motif++, Fresco,...), but more and more commercial software is being developed in C++ and is available in form of class libraries (Rogue Wave [Keffer, 1992], Booch Components, Inventor [Strauss and Carey, 1992], C++/Views, USL, ImageVision [Neider and Tillmann, 1992], ...).
Reference: [McLennan, 1993] <author> McLennan, M. J. </author> <year> (1993). </year> <title> [incr Tcl]: Object Oriented Programming in Tcl. </title> <booktitle> In Proc: Tcl/Tk Workshop, </booktitle> <institution> University of California at Berkeley, </institution> <year> 1993. </year>
Reference-contexts: We decided to use the Tool Command Language (Tcl) [Ousterhout, 1990] and its object-oriented extension [incr Tcl] <ref> [McLennan, 1993] </ref> as the base for our implementation, because it has found wide spread interest and was designed with a powerful C API. The [incr Tcl] extension is very similar to C++, which allows for a simple mapping of C++ to [incr Tcl]. <p> In [incr Tcl], classes and objects are implemented by special commands that instantiate the required scope, and then execute, for example, member functions in this scope. The names of the classes and objects act as names for these special functions. An introduction to [incr Tcl] can be found in <ref> [McLennan, 1993] </ref>. 3 Mapping a C++ class hierarchy to [incr Tcl] 3.1 Basic Concepts The major problem which arises when trying to attach existing C or C++ functions to Tcl, is that they do not normally receive their arguments by the argc/argv mechanism mentioned 3 above.
Reference: [Naher, 1990] <author> Naher, S. </author> <year> (1990). </year> <title> LEDA 2.0 User Manual. </title> <institution> Universitat des Saarlandes, Saarbrucken. </institution>
Reference-contexts: C++ [Elis and Stroustrup, 1990] has established itself as one of the major programming languages in this field. Today, a wide range of class libraries is available for C++. Most of them come from a research background (for example InterViews [Linton et al., 1989], NIHCL [Gorlen, 1990], LEDA <ref> [Naher, 1990] </ref>, Motif++, Fresco,...), but more and more commercial software is being developed in C++ and is available in form of class libraries (Rogue Wave [Keffer, 1992], Booch Components, Inventor [Strauss and Carey, 1992], C++/Views, USL, ImageVision [Neider and Tillmann, 1992], ...).
Reference: [Neider and Tillmann, 1992] <author> Neider, J. and Tillmann, C. </author> <year> (1992). </year> <title> ImageVision Library C Programming Guide. Silicon Graphics Computers. </title>
Reference-contexts: research background (for example InterViews [Linton et al., 1989], NIHCL [Gorlen, 1990], LEDA [Naher, 1990], Motif++, Fresco,...), but more and more commercial software is being developed in C++ and is available in form of class libraries (Rogue Wave [Keffer, 1992], Booch Components, Inventor [Strauss and Carey, 1992], C++/Views, USL, ImageVision <ref> [Neider and Tillmann, 1992] </ref>, ...). In this paper we present a tool called Itcl++, which allows the mapping of a C++ class hierarchy onto an equivalent class hierarchy in an object-oriented, interpreted language ([incr Tcl], pronounced and alternately written as Itcl).
Reference: [Neumann and Nusser, 1993] <author> Neumann, G. and Nusser, S. </author> <year> (1993). </year> <title> Wafe | an X Toolkit Based Frontend for Application Programs in Various Programming Languages. </title> <booktitle> In Proc: Usenix Winter Conference, </booktitle> <year> 1993. </year>
Reference-contexts: The approach has been demonstrated using examples from a rendering class library and a commercial graphics library. 8 Acknowledgments We would like to thank Gustav Neumann and Stefan Nusser, who implemented a specification syntax and a related code generator for the Wafe program <ref> [Neumann and Nusser, 1993] </ref>. We used their Perl implementation as a starting point for Itcl++. Gustav Neumann also made some suggestions concerning the syntax of our specification files.
Reference: [Ousterhout, 1990] <author> Ousterhout, J. K. </author> <year> (1990). </year> <title> Tcl: an Embedded Command Language. </title> <booktitle> In Proc: Usenix Winter Conference, </booktitle> <year> 1990. </year>
Reference-contexts: Most of them, however, were not designed as an embedded language, and the majority lack a decent API from C or even better C++, or are not suitable for mapping C++ class hierarchies to it. We decided to use the Tool Command Language (Tcl) <ref> [Ousterhout, 1990] </ref> and its object-oriented extension [incr Tcl] [McLennan, 1993] as the base for our implementation, because it has found wide spread interest and was designed with a powerful C API.
Reference: [Ousterhout, 1994] <author> Ousterhout, J. K. </author> <year> (1994). </year> <title> An Introduction to Tcl and Tk. To be published. </title> <publisher> Addison Wesley. </publisher>
Reference-contexts: Tcl also implements an exception handling mechanism, which is a subset of the C++ mechanism. A detailed description of Tcl and Tk (a Motif like widget library based on Tcl) and the interaction between Tcl/Tk and C/C++ can be found in <ref> [Ousterhout, 1994] </ref>. 2 2.2 [incr Tcl] [incr Tcl] extends Tcl in much the way C++ extends C. This is also indicated by the name, which means "increment Tcl" in Tcl notation.
Reference: [Strauss and Carey, 1992] <author> Strauss, P. S. and Carey, R. </author> <year> (1992). </year> <title> An Object-Oriented 3D Graphics Toolkit. </title> <booktitle> In ACM Computer Graphics. SIGGRAPH '92 Conference Proceedings. </booktitle> <editor> [van Rossum, 1994] van Rossum, G. </editor> <year> (1994). </year> <title> Python Reference Manual. </title>
Reference-contexts: Most of them come from a research background (for example InterViews [Linton et al., 1989], NIHCL [Gorlen, 1990], LEDA [Naher, 1990], Motif++, Fresco,...), but more and more commercial software is being developed in C++ and is available in form of class libraries (Rogue Wave [Keffer, 1992], Booch Components, Inventor <ref> [Strauss and Carey, 1992] </ref>, C++/Views, USL, ImageVision [Neider and Tillmann, 1992], ...). In this paper we present a tool called Itcl++, which allows the mapping of a C++ class hierarchy onto an equivalent class hierarchy in an object-oriented, interpreted language ([incr Tcl], pronounced and alternately written as Itcl). <p> We now use the [incr Tcl] interface to do initialization and configuration of our application, to describe scenes for our rendering system, and to test and debug new classes. 5.2 Use of Itcl++ with the Iris Inventor Class Library We tested Itcl++ with the commercial Iris Inventor class library <ref> [Strauss and Carey, 1992] </ref> from Silicon Graphics. Iris Inventor is an object oriented 3-D toolkit, which provides means to display and interactively manipulate complex scenes, using the Graphics Library (GL) from Silicon Graphics. For our testing purposes we chose 32 classes with 190 member functions, mainly geometric objects and manipulators.
Reference: [Wernecke, 1992] <author> Wernecke, J. </author> <year> (1992). </year> <title> Iris Inventor Programming Guide. Silicon Graphics. </title> <type> 13 </type>
References-found: 12

