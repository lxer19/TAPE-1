URL: http://theory.stanford.edu/~dabo/papers/bits_of_d.ps.gz
Refering-URL: http://theory.stanford.edu/~dabo/publications.html
Root-URL: 
Email: dabo@cs.stanford.edu gdurf@cs.stanford.edu yfrankel@cs.columbia.edu  
Title: An Attack On RSA Given a Small Fraction of the Private Key Bits (Extended Abstract)  
Author: Dan Boneh Glenn Durfee Yair Frankel 
Address: Certco  
Affiliation: Stanford University Stanford University  
Abstract: We show that for low public exponent rsa, given a quarter of the bits of the private key an adversary can recover the entire private key. Similar results (though not as strong) are obtained for larger values of e. For instance, when e is a prime in the range [N 1=4 ; N 1=2 ], half the bits of the private key suffice to reconstruct the entire private key. Our results point out the danger of partial key exposure in the rsa public key system.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Coppersmith, </author> <title> "Finding a small root of a univariate modular equation", </title> <booktitle> Proc. of Eurocrypt '96, </booktitle> <pages> pp. 155-165. </pages>
Reference-contexts: This result does not apply to our problem: Wiener's continued fractions approach does not work when the most significant bits of d are given to the adversary, but they are non-zero. Instead, we derive our results using powerful tools due to Coppersmith <ref> [1] </ref>. Let N = pq be an n-bit rsa modulus. Throughout the paper we view the private exponent d as 1 an n-bit string. When referring to the t most significant bits of d we refer to the t left most bits of d when viewed as an n-bit string. <p> Using the lattice basis reduction algorithm of Lenstra, Lenstra, and Lovasz [4], Coppersmith <ref> [1] </ref> shows how to find small solutions (x 0 ; y 0 ) to a bivariate polynomial f (x; y), provided appropriate bounds on x 0 and y 0 are known in advance. Theorem 2.1 (Coppersmith [1]) Let f (x; y) be a polynomial in two variables over Z, of maximum <p> Using the lattice basis reduction algorithm of Lenstra, Lenstra, and Lovasz [4], Coppersmith <ref> [1] </ref> shows how to find small solutions (x 0 ; y 0 ) to a bivariate polynomial f (x; y), provided appropriate bounds on x 0 and y 0 are known in advance. Theorem 2.1 (Coppersmith [1]) Let f (x; y) be a polynomial in two variables over Z, of maximum degree ffi in each variable separately, and assume the coefficients of f are relatively prime as a set. Let X, Y be bounds on the desired solutions x 0 , y 0 . <p> We make use of an immediate consequence of this theorem, which is a slight generalization of a result in <ref> [1] </ref>. Corollary 2.2 Let N = pq be an n-bit rsa modulus. Let r 2 n=4 be given and suppose p 0 := p mod r is known. Then it is possible to factor N in time polynomial in n. <p> When e is close to N 1=2 the theorem produces results similar to the previous section. Theorem 4.5 can only be applied when k &gt; * e. Intuitively k behaves roughly as a random integer in the range <ref> [1; e] </ref>. As such, we should have k &gt; e=10 for about 90% of the e 2 [2 t ; 2 t+1 ]. <p> We conclude with the following general result which holds for for all e &lt; 2 n=2 . Unfortunately, the result requires non-consecutive bits of d. Theorem 4.6 With the notation as in Section 1.2, let t be an integer in <ref> [1; n 2 ] </ref> and e in [2 t : : : 2 t+1 ]. Suppose we are given the t most significant bits of d and the n 4 least significant bits of d. Then in polynomial time we can factor N .
Reference: [2] <author> T. ElGamal, </author> <title> "A public key cryptosystem and a signature scheme based on the discrete logarithm", </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 31(4) </volume> <pages> 469-472, </pages> <year> 1985. </year> <month> 8 </month>
Reference-contexts: Once these bits are revealed the adversary can efficiently compute all of d. It is natural to ask the analogous question in the context of discrete log schemes. For instance, given a fraction of the bits of the private key in the ElGamal public key system <ref> [2] </ref>, can one efficiently recover the entire key? There is no known method for doing so. Furthermore, the common belief is that no such efficient algorithm exists. This resistance to partial key exposure is an interesting distinction between rsa and discrete log schemes.
Reference: [3] <author> P. Kocher, </author> <title> "Timing attacks on implementations of Diffie-Hellman, RSA, DSS, and other sys-tems", </title> <booktitle> Proc. of Cyrpto 96, </booktitle> <pages> pp. 104-113. </pages>
Reference-contexts: To motivate this problem consider a computer system which has an rsa private key stored on it. An adversary may attempt to attack the system in a variety of ways in order to obtain the private key. Some attacks (e.g. a timing attack <ref> [3] </ref>) are able to reveal some bits of the key, but may fail to reveal the entire key [5]. Our results show that attacks such as the timing attack on rsa need only be carried out until a quarter of the least significant bits of d are exposed.
Reference: [4] <author> A. K. Lenstra, H. W. Lenstra, L. Lovasz, </author> <title> "Factoring Polynomials with Rational Coefficients", </title> <journal> Mathematische Annalen, </journal> <volume> vol. 261, no. 4, </volume> <year> 1982, </year> <pages> pp. 515-534. </pages>
Reference-contexts: Using the lattice basis reduction algorithm of Lenstra, Lenstra, and Lovasz <ref> [4] </ref>, Coppersmith [1] shows how to find small solutions (x 0 ; y 0 ) to a bivariate polynomial f (x; y), provided appropriate bounds on x 0 and y 0 are known in advance.
Reference: [5] <author> J.J. Quisquater, </author> <title> private communications. </title>
Reference-contexts: An adversary may attempt to attack the system in a variety of ways in order to obtain the private key. Some attacks (e.g. a timing attack [3]) are able to reveal some bits of the key, but may fail to reveal the entire key <ref> [5] </ref>. Our results show that attacks such as the timing attack on rsa need only be carried out until a quarter of the least significant bits of d are exposed. Once these bits are revealed the adversary can efficiently compute all of d.
Reference: [6] <author> R. L. Rivest, A. Shamir, and L. Adleman. </author> <title> "A method for obtaining digital signatures and public-key cryptosystems." </title> <journal> Communications of the ACM 21(2) </journal> <pages> 120-126, </pages> <month> Feb. </month> <year> 1978. </year>
Reference: [7] <author> M. Wiener, </author> <title> "Cryptanalysis of short RSA secret exponents", </title> <journal> IEEE Transactions on Info. Th., </journal> <volume> Vol. 36, No. 3, </volume> <year> 1990, </year> <pages> pp. 553-558. 9 </pages>
Reference-contexts: Furthermore, the common belief is that no such efficient algorithm exists. This resistance to partial key exposure is an interesting distinction between rsa and discrete log schemes. We note that Wiener <ref> [7] </ref> showed that rsa is insecure whenever the private exponent d is less than N 1=4 . In other words, given that the 3=4 most significant bits of d are zero an adversary can efficiently recover the remaining quarter.
References-found: 7

