URL: ftp://ftp.cs.bham.ac.uk/pub/authors/W.B.Langdon/papers/WBL.wcci98_bloat.ps.gz
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: W.B.Langdon@cs.bham.ac.uk  
Title: The Evolution of Size in Variable Length Representations  
Author: W. B. Langdon 
Web: http://www.cs.bham.ac.uk/~wbl  
Address: B15 2TT, UK  
Affiliation: School of Computer Science, The University of Birmingham, Birmingham  
Note: ICEC '98 1998 IEEE International Conference on Evolutionary Computation  
Abstract: In many cases programs length's increase (known as bloat, fluff and increasing structural complexity) during artificial evolution. We show bloat is not specific to genetic programming and suggest it is inherent in search techniques with discrete variable length representations using simple static evaluation functions. We investigate the bloating characteristics of three non-population and one population based search techniques using a novel mutation operator. An artificial ant following the Santa Fe trail problem is solved by simulated annealing, hill climbing, strict hill climbing and population based search using two variants of the the new subtree based mutation operator. As predicted bloat is observed when using unbiased mutation and is absent in simulated annealing and both hill climbers when using the length neutral mutation however bloat occurs with both mutations when using a population. We conclude that there are two causes of bloat 1) search operators with no length bias tend to sample bigger trees and 2) competition within populations favours longer programs as they can usually reproduce more accurately. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Laurent Alonso and Rene Schott. </author> <title> Random Generation of Trees. </title> <publisher> Kul-wer Academic Publishers, </publisher> <year> 1995. </year>
Reference: [2] <author> Lee Altenberg. </author> <title> The evolution of evolvability in genetic programming. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 3, </booktitle> <pages> pages 4774. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: I.e. fitness causes bloat. The evolution of evolvability view states that the population evolves to be more evolvable, i.e. more able to produce offspring that are fitter than their parents <ref> [2] </ref>. However in cases of bloat the population does not change over time to increase its chances of finding improved solutions but instead it changes over time to reduce the chance of finding worse solutions. Bloated populations tend to have little chance of improvement. C.
Reference: [3] <author> Peter John Angeline. </author> <title> Genetic programming and emergent intelligence. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 4, </booktitle> <pages> pages 7598. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [4] <author> Tobias Blickle and Lothar Thiele. </author> <title> Genetic programming and redundancy. </title> <editor> In J. Hopf, editor, </editor> <booktitle> Genetic Algorithms within the Framework of Evolutionary Computation (Workshop at KI-94, Saarbrucken), </booktitle> <pages> pages 3338, </pages> <address> Im Stadtwald, Building 44, D-66123 Saarbrucken, Ger-many, </address> <year> 1994. </year> <institution> Max-Planck-Institut fur Informatik (MPI-I-94-241). </institution>
Reference-contexts: C. Introns The principal explanation advanced for bloat has been the growth of introns or redundancy, i.e. code which has no effect on the operation of the program which contains it. Such introns are said to protect the program containing them from crossover <ref> [4] </ref>, [12], [14], [15].
Reference: [5] <editor> Hitoshi Iba. </editor> <title> Random tree generation for genetic programming. </title> <type> Technical Report ETL-TR-95-35, </type> <institution> ElectroTechnical Laboratory (ETL), </institution> <address> 1-1-4 Umezono, Tsukuba-city, Ibaraki, 305, Japan, </address> <month> 14 November </month> <year> 1995. </year>
Reference: [6] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference: [7] <author> W. B. Langdon. </author> <title> Evolving data structures using genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 295302, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [8] <author> W. B. Langdon. </author> <title> Fitness causes bloat: Simulated annealing, hill climbing and populations. </title> <type> Technical Report CSRP-97-22, </type> <institution> University of Birmingham, School of Computer Science, </institution> <month> 2 September </month> <year> 1997. </year>
Reference: [9] <author> W. B. Langdon and R. Poli. </author> <title> Fitness causes bloat. </title> <editor> In P. K. Chawdhry, R. Roy, and R. K. Pan, editors, </editor> <booktitle> Second On-line World Conference on Soft Computing in Engineering Design and Manufacturing. </booktitle> <publisher> Springer-Verlag London, </publisher> <month> 23-27 June </month> <year> 1997. </year>
Reference-contexts: This predicts in general bloat with any unbiased search operator. We have shown this is true for a particular problem with five different types of search. V. CONCLUSIONS In previous work <ref> [9] </ref> we advanced a general explanation for bloat which should apply generally to any discrete variable length representation and generally to any progressive search technique.
Reference: [10] <author> W. B. Langdon and R. Poli. </author> <title> Fitness causes bloat: Mutation. </title> <editor> In John Koza, editor, </editor> <booktitle> Late Breaking Papers at the GP-97 Conference, </booktitle> <pages> pages 132140, </pages> <address> Stanford, CA, USA, 13-16 July 1997. </address> <publisher> Stanford Bookstore. </publisher>
Reference-contexts: That is bloat is not specific to genetic programming applied to trees and tree based crossover but should also be found with other genetic operators and non-population based stochastic search techniques such as simulated annealing and stochastic iterated hill climbing. In <ref> [10] </ref> we demonstrated bloat can occur when crossover is replaced by mutation and in this paper we have demonstrated it can indeed occur with simulated annealing and hill climbing although strict hill climbing stifles evolution after it reaches a local optima and in the process cuts off further bloat.
Reference: [11] <author> W. B. Langdon and R. Poli. </author> <title> Why ants are hard. </title> <type> Technical Report CSRP-98-4, </type> <institution> University of Birmingham, School of Computer Science, </institution> <month> January </month> <year> 1998. </year>
Reference: [12] <author> Nicholas Freitag McPhee and Justin Darwin Miller. </author> <title> Accurate replication in genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 303309, </pages> <address> 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: C. Introns The principal explanation advanced for bloat has been the growth of introns or redundancy, i.e. code which has no effect on the operation of the program which contains it. Such introns are said to protect the program containing them from crossover [4], <ref> [12] </ref>, [14], [15].
Reference: [13] <author> Peter Nordin and Wolfgang Banzhaf. </author> <title> Complexity compression and evolution. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 310317, </pages> <address> 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [14] <author> Peter Nordin, Frank Francone, and Wolfgang Banzhaf. </author> <title> Explicitly defined introns and destructive crossover in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 6, </booktitle> <pages> pages 111134. </pages> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: C. Introns The principal explanation advanced for bloat has been the growth of introns or redundancy, i.e. code which has no effect on the operation of the program which contains it. Such introns are said to protect the program containing them from crossover [4], [12], <ref> [14] </ref>, [15]. Whilst not disagreeing with this explanation (indeed in Section III-B.2 we showed bloat with our length neutral (i.e. implicit parsimony bias) mutation operator can be explained by non-executable code, i.e. by introns) we have sought a more general one in terms of the general characteristics of search spaces.
Reference: [15] <author> Justinian P. Rosca. </author> <title> Analysis of complexity drift in genetic programming. </title> <editor> In John R. Koza et al., editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 286294, </pages> <address> 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: C. Introns The principal explanation advanced for bloat has been the growth of introns or redundancy, i.e. code which has no effect on the operation of the program which contains it. Such introns are said to protect the program containing them from crossover [4], [12], [14], <ref> [15] </ref>. Whilst not disagreeing with this explanation (indeed in Section III-B.2 we showed bloat with our length neutral (i.e. implicit parsimony bias) mutation operator can be explained by non-executable code, i.e. by introns) we have sought a more general one in terms of the general characteristics of search spaces.
Reference: [16] <author> Terence Soule, James A. Foster, and John Dickinson. </author> <title> Code growth in genetic programming. </title> <editor> In John R. Koza et al. editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 215223, </pages> <address> 2831 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [17] <author> Walter Alden Tackett. </author> <title> Genetic programming for feature discovery and image discrimination. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 303309, </pages> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
References-found: 17

