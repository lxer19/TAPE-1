URL: http://st-www.cs.uiuc.edu/~hanmer/PLoP-97/Proceedings.ps/BrownMeszarosV3.ps
Refering-URL: http://st-www.cs.uiuc.edu/~hanmer/PLoP-97/Workshops.html
Root-URL: http://www.cs.uiuc.edu
Email: email: gerard.meszaros@acm.org  email: kbrown@ksccary.com  
Phone: Phone: 1-403-210-2967  
Title: 12Aug97 Workflow Patterns  A Pattern Language for Workflow Systems Authors:  
Author: Gerard Meszaros and Kyle Brown Gerard Meszaros Kyle Brown 
Address: 87 Connaught Drive NW, Calgary, Alberta, Canada T2K 1V9  4001 Weston Parkway, Cary NC 27513  
Affiliation: Object Systems Group  Knowledge Systems Corporation  
Note: Page 1 Copyright 1997,  Permission granted to copy for PLoP '97 Conference. All other rights reserved.  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [Booch 94] <author> Grady Booch, </author> <title> ObjectOriented Analysis and Design With Applications , Addison-Wesley, </title> <address> Reading, MA, </address> <year> 1994 </year>
Reference-contexts: The key transformation step is to transform the arcs in the previous diagram to be nodes and the nodes to be arcs. In essence what is involved in transforming the state machine from a Mealy model to a Moore model. In our example we will use the notation from <ref> [Booch 94] </ref> Consider the following transformation of the previous diagram: 12Aug97 Workflow Patterns Page 7 Copyright 1997, Gerard Meszaros and Kyle Brown Permission granted to copy for PLoP '97 Conference. All other rights reserved.
Reference: [Brown 96] <author> Kyle Brown, </author> <title> Experiencing Patterns at the Design Level", </title> <note> Object Magazine , January 1996, 5(9) p. 44-52 </note>
Reference: [Gamma 95] <author> Erich Gamma, Richard Helms, Ralph Johnson, </author> <title> John Vlissides , Design Patterns: Elements of Reusable ObjectOriented Software , Addison-Wesley, </title> <address> Reading, MA, </address> <year> 1995 </year>
Reference-contexts: In this case, the composite acts a point of contact (or Facade) onto a subsystem of supporting objects, while the composite object manages the routing for the objects held within itself. Despite its name, this object is usually not a Composite as in <ref> [Gamma 95] </ref>, since there is usually not a need for the recursiveness of the Composite pattern. 3.2.2 TransformedWorkProduct States Context: Workflow requirements are usually phrased in terms of the processes that are involved. <p> All other rights reserved. New Validated Rejected Billed Priced Pricing Validation Billing This transformation results in a description of the states of the Workflow Product, which can then be implemented using a tabledriven approach, or the State Pattern from <ref> [Gamma 95] </ref>. These states are crucial to understanding the response of the WorkProduct objects to the different messages that may be sent to them through their lifecycle. <p> Code which is all in one place is easier to understand. Code which is factored into smaller pieces is easier to modify and especially to extend. Solution Use the State Pattern <ref> [Gamma 95] </ref> to take the previously defined state machine and turn it into classes. Two benefits are drawn from this: The workproduct now has a single, unique state that can be tested directly. This eliminates a great deal of conditionalcode that would otherwise be coded into the workproduct.
Reference: [Meszaros97] <author> Gerard Meszaros, Archi-Patterns: </author> <title> A Process Pattern Language for Defining Architectures , proceedings of PLoP97 </title>
Reference-contexts: Examples: Many commercially available workflow systems (whether Object Oriented or otherwise) implement this architectural Pattern. Microsoft Office components include the capability to route a document to a number of users via electronic mail. 3.2 Workflow Business Architecture This is an example of the pattern Business Architecture in <ref> [Meszaros97] </ref>. 3.2.1 " Central WorkProduct (s)" Context One of the things that is sometimes lost in an objectoriented design is a sense of location of an object. In a workflow system the knowledge of what objects are where is absolutely crucial to the functioning of the system as a whole. <p> It is an example of the pattern Technical Architecture in <ref> [Meszaros97] </ref>. 12Aug97 Workflow Patterns Page 8 Copyright 1997, Gerard Meszaros and Kyle Brown Permission granted to copy for PLoP '97 Conference. All other rights reserved. 3.3.1 Push Workflow Architecture Context You have determined the states of the central workproduct and the subsystems to which the workproduct should be routed.
Reference: [Ryan 97] <author> Patrick Ryan, </author> <title> Handling Exceptional Behavior with State Objects , The Smalltalk Report , June 1997, </title> <type> 6 (8), </type> <pages> pp. 16-19 </pages>
Reference-contexts: This eliminates a great deal of conditionalcode that would otherwise be coded into the workproduct. Many of the statedependent behaviors of the workproduct may be deferred to the state classes themselves. This will reduce the size and complexity of the workproduct implementation. <ref> [Ryan 97] </ref> and [Brown 95] describe uses of this pattern for implementing state-based behavior. Resulting Context The implementation of the workproduct using the state pattern can be easily extended by adding more state classes or by changing the interface of the state classes to add additional behavior.
Reference: [Yourdon 89] <author> Edward Yourdon, </author> <title> Modern Structured Analysis , Prentice-Hall, </title> <address> Englewood Cliffs, NJ, </address> <year> 1989 </year>
Reference-contexts: Arriving at a maintainable design representation of the analysis artifacts The overall structure of the final design should be easily understood and extended. Solution: Begin by taking the dataflow representation of the process, or by drawing one if one has not yet been prepared. In a standard dataflow diagram <ref> [ Yourdon 89] </ref>, the processes are represented by circles (nodes) while the data flowing between the processes are represented by arrows (arcs).
References-found: 6

