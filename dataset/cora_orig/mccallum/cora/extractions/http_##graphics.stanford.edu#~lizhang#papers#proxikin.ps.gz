URL: http://graphics.stanford.edu/~lizhang/papers/proxikin.ps.gz
Refering-URL: http://graphics.stanford.edu/~lizhang/interests.html
Root-URL: http://www.cs.stanford.edu
Email: fjbasch,guibas,lizhangg@cs.stanford.edu  
Title: Proximity Problems on Moving Points  
Author: Julien Basch Leonidas J. Guibas Li Zhang 
Address: Stanford, CA94305  
Affiliation: Computer Science Department Stanford University  
Abstract: A kinetic data structure for the maintenance of a multidimensional range search tree is introduced. This structure is used as a building block to obtain kinetic data structures for two classical geometric proximity problems in arbitrary dimensions: the first structure maintains the closest pair of a set of continuously moving points, and is provably efficient. The second structure maintains a spanning tree of the moving points whose cost remains within some prescribed factor of the minimum spanning tree. 
Abstract-found: 1
Intro-found: 1
Reference: [AMS92] <author> Pankaj K. Agarwal, J. Matousek, and S. Suri. </author> <title> Farthest neighbors, maximum spanning trees and related problems in higher dimensions. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 1(4) </volume> <pages> 189-201, </pages> <year> 1992. </year>
Reference-contexts: This idea, which was also used by Vaidya [Vai84], is the basis of our method for approximating the Euclidean distance by a certain polyhedral metric and thus the EMST by a polyhedral MST. Similar constructions were employed in <ref> [AMS92] </ref> for the maximum spanning tree problem. However, the technical development given here is different. In the following, for a point p 2 R d , we denote ~p to be the vector from the origin to p.
Reference: [AS89] <author> C. Aragon and R. Seidel. </author> <title> Randomized search trees. </title> <booktitle> In Proc. 30th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 540-545, </pages> <year> 1989. </year>
Reference-contexts: Another way to dynamize T is to do some local and global rebuilding after every few operations, which gives an amortized bound of O (t f log k n) per operation [Meh84, Ove83], or to use randomized search trees <ref> [AS89] </ref> and obtain the same bounds in expectation. 2.2 Kinetizing the tree T We now assume that we are given a set S of points whose positions and weights are continuous functions of time; we wish to maintain their MDRS tree T as time goes on.
Reference: [BDIZ] <author> J. Basch, H. Devarajan, P. Indyk, and L. Zhang. </author> <title> Probabilistic analysis for combinatorial functions of moving points. This volume. </title>
Reference-contexts: We showed how to maintain a multidimensional range search tree, and how to use it to maintain the closest pair and an approximation of the minimum spanning tree of moving points. In <ref> [BDIZ] </ref>, an alternate probabilistic setting for judging the efficiency of kinetic data structures was proposed. In this setting, one computes the expected number of events processed when a kinetic data structure is run on points drawn independently at random from some prescribed distribution.
Reference: [BGH97] <author> J. Basch, L.J. Guibas, and J. Hershberger. </author> <title> Data structures for mobile data. </title> <note> In Proc. 8th ACM-SIAM Sym-pos. Discrete Algorithms, page to appear, </note> <year> 1997. </year>
Reference-contexts: In this paper we present algorithms which explicitly take advantage of the continuity or coherence in the motion of the points to gain efficiency. These new algorithms are kinetic | they are instances of kinetic data structures (KDSs for short), as introduced by Basch, Guibas, and Hershberger <ref> [BGH97] </ref>. In the kinetic setting, a set of objects is assumed to be continuously changing, or moving. Each object follows a posted flight plan, but a plan which can change at any moment through a flight plan update. <p> A kinetic structure which is responsive, efficient, compact, and local is worst-case nearly optimal for the problem at hand. For precise definitions of these concepts the reader is referred to <ref> [BGH97] </ref>. The results of this paper are based on kinetizing (i.e., maintaining under continuous point motion) a certain type of multidimensional range search tree (MDRS tree) [Meh84] used to query the value of some specified function on subsets of the points [BS80]. <p> Though the structures we propose are fully on-line and work for arbitrary motions, the bounds we give assume that the motions of the points are algebraic of fixed degree, or that they satisfy certain Davenport-Schinzel type conditions. In <ref> [BGH97] </ref> an efficient, compact, responsive and local 1 kinetic data structure is given for the closest pair in R 2 . Another event-based algorithm for detecting the collision of moving balls was proposed in [KGS]. <p> Hence, there are at most 2 2d pairs in total involving p. 2 3.2 Kinetic data structure for the closest pair We now show how to maintain the candidate pairs with several kinetized MDRS trees. With the addition of a kinetic tournament <ref> [BGH97] </ref> on the distances defined by these pairs, we will have a KDS for the closest pair. <p> Note that a event happens at the same time that takes care of the -orthant in the same way. By the above algorithm, we have shown how to maintain the candidate pairs. We just need to build a kinetic tournament on the distances between each candidate pair of points <ref> [BGH97] </ref>. Note that the number of all the candidate pairs which can ever appear is at most O (n 2 ). At any time, there is at most a linear number of candidate pairs. The following lemma follows from the results in [BGH97]. <p> the distances between each candidate pair of points <ref> [BGH97] </ref>. Note that the number of all the candidate pairs which can ever appear is at most O (n 2 ). At any time, there is at most a linear number of candidate pairs. The following lemma follows from the results in [BGH97]. Lemma 4 If each point follows a degree s algebraic trajectory in R d , the total number of events in the tournament tree is O (n 2s+2 (n) log n), where 2s+2 (n) is the maximum length of a Davenport-Schinzel sequence with parameter 2s + 2 1 . <p> Thus our structure is not as efficient as possible even in this case. 5 Conclusion and open problems In this paper, we solved a number of classical proximity problems in the new kinetic setting of <ref> [BGH97] </ref>. We showed how to maintain a multidimensional range search tree, and how to use it to maintain the closest pair and an approximation of the minimum spanning tree of moving points. In [BDIZ], an alternate probabilistic setting for judging the efficiency of kinetic data structures was proposed.
Reference: [BS80] <author> J. L. Bentley and J. B. Saxe. </author> <title> Decomposable searching problems I: Static-to-dynamic transformation. </title> <journal> J. Algorithms, </journal> <volume> 1 </volume> <pages> 301-358, </pages> <year> 1980. </year>
Reference-contexts: The results of this paper are based on kinetizing (i.e., maintaining under continuous point motion) a certain type of multidimensional range search tree (MDRS tree) [Meh84] used to query the value of some specified function on subsets of the points <ref> [BS80] </ref>. We apply this MDRS tree to obtain kinetic data structures for the closest pair among n moving points in R d , the closest pair among a collection of n moving balls, and approximate and exact MSTs for n moving points.
Reference: [GGST86] <author> H. N. Gabow, Z. Galil, T. Spencer, and R. E. Tar-jan. </author> <title> Efficient algorithms for finding minimum spanning trees in undirected and directed graphs. </title> <journal> Combi-natorica, </journal> <volume> 6 </volume> <pages> 109-122, </pages> <year> 1986. </year>
Reference: [KGS] <author> Dong-Jin Kim, Leonidas J. Guibas, and Sung-Yong Shin. </author> <title> Fast collision detection among multiple moving spheres. This volume. </title>
Reference-contexts: In [BGH97] an efficient, compact, responsive and local 1 kinetic data structure is given for the closest pair in R 2 . Another event-based algorithm for detecting the collision of moving balls was proposed in <ref> [KGS] </ref>. For arbitrary dimensions the performance of the algorithms given in this paper is nearly optimal as a function of n (the number of points or balls), but not of d (the dimension | the `hidden' constant in our bounds is 2 2d ).
Reference: [KKT95] <author> D. Karger, P. N. Klein, and R. E. Tarjan. </author> <title> A randomized linear-time algorithm to find minimum spanning trees. </title> <journal> J. ACM, </journal> <volume> 42 </volume> <pages> 321-328, </pages> <year> 1995. </year>
Reference: [KTI95] <author> N. Katoh, T. Tokuyama, and K. Iwano. </author> <title> On minimum and maximum spanning trees of linearly moving points. </title> <journal> Discrete Comput. Geom., </journal> <volume> 13 </volume> <pages> 161-176, </pages> <year> 1995. </year>
Reference-contexts: Here, the sparse graph we are going to use is a variation on the nearest geographic neighbor graph [Yao82], also called the local nearest neighbor graph (LNNG) <ref> [KTI95] </ref>. As in the case of the closest pair, we say that, for a given v 2 V d * , point q is a v-candidate point of p if q is the point of smallest v-ordinate in the Voronoi cone of v translated to have its apex at p. <p> The number of events of the first and second type is O (* (d1)=2 n 2 ), because we have O (* (d1)=2 ) linear orderings. To bound the number of events of the second type, as in <ref> [KTI95] </ref>, we divide the MST history into O (n) stages with each stage having O (* (d1)=2 n) insertions and deletions of edges. Thus, within each stage, there are at most O (* (d1)=2 n) edges which ever appear. <p> As mentioned in the introduction, we do not know if the above KDS for the MST is efficient. In any fixed dimension, it is known that the actual number of combinatorial changes to the real EMST for linearly moving points is O (n 3 2 ff (n) ) <ref> [KTI95] </ref>, but it is not known whether this bound is tight. Since the (1 + *)-EMST is not uniquely defined, the number of combinatorial changes it undergoes has not been studied. <p> The kinetic data structure shown here can also be used to maintain exact MSTs under polyhedral metrics (for example, L 1 or L 1 ). It is known that for linear motions the L 1 and L 1 -MSTs undergo O (n 5=2 ff (n)) changes <ref> [KTI95] </ref>. Thus our structure is not as efficient as possible even in this case. 5 Conclusion and open problems In this paper, we solved a number of classical proximity problems in the new kinetic setting of [BGH97].
Reference: [Meh84] <author> K. Mehlhorn. </author> <title> Data Structures and Algorithms 3: Multi-dimensional Searching and Computational Geometry, </title> <booktitle> volume 3 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1984. </year>
Reference-contexts: For precise definitions of these concepts the reader is referred to [BGH97]. The results of this paper are based on kinetizing (i.e., maintaining under continuous point motion) a certain type of multidimensional range search tree (MDRS tree) <ref> [Meh84] </ref> used to query the value of some specified function on subsets of the points [BS80]. <p> This version of the range searching problem has received extensive treatment in the literature both in the static and in the dynamic case <ref> [Meh84, Mul94] </ref>. We focus here on a specific version of this problem that will be well suited for the applications to the closest pair and the MST. <p> For a static set S and a weight function f , repeated median partitioning along the range orderings can be used to recursively construct a multidimensional range search (MDRS) tree T storing the elements of S with the following properties <ref> [Meh84] </ref>: * The tree T can be built in time O (n log k n); it has size O (n log k1 n) and depth O (log n). * Each node in T , stores f (T - ), where T - , called the span of is the set of <p> Another way to dynamize T is to do some local and global rebuilding after every few operations, which gives an amortized bound of O (t f log k n) per operation <ref> [Meh84, Ove83] </ref>, or to use randomized search trees [AS89] and obtain the same bounds in expectation. 2.2 Kinetizing the tree T We now assume that we are given a set S of points whose positions and weights are continuous functions of time; we wish to maintain their MDRS tree T as
Reference: [Mul94] <author> K. Mulmuley. </author> <title> Computational Geometry: An Introduction Through Randomized Algorithms. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1994. </year>
Reference-contexts: This version of the range searching problem has received extensive treatment in the literature both in the static and in the dynamic case <ref> [Meh84, Mul94] </ref>. We focus here on a specific version of this problem that will be well suited for the applications to the closest pair and the MST.
Reference: [Ove83] <author> M. H. Overmars. </author> <title> The Design of Dynamic Data Structures, </title> <booktitle> volume 156 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1983. </year>
Reference-contexts: Another way to dynamize T is to do some local and global rebuilding after every few operations, which gives an amortized bound of O (t f log k n) per operation <ref> [Meh84, Ove83] </ref>, or to use randomized search trees [AS89] and obtain the same bounds in expectation. 2.2 Kinetizing the tree T We now assume that we are given a set S of points whose positions and weights are continuous functions of time; we wish to maintain their MDRS tree T as
Reference: [Smi92] <author> M. Smid. </author> <title> Maintaining the minimal distance of a point set in polylogarithmic time. </title> <journal> Discrete Comput. Geom., </journal> <volume> 7 </volume> <pages> 415-431, </pages> <year> 1992. </year>
Reference-contexts: Such `quadrant-tilings' have also been previously used for dynamic closest-pair algorithms <ref> [Smi92] </ref>. What is surprising here is that our rank functions, which are all based on ordering the points along certain fixed directions, can be used to find an exact (not approximate) L 2 closest pair.
Reference: [ST83] <author> D. D. Sleator and R. E. Tarjan. </author> <title> A data structure for dynamic trees. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 26(3) </volume> <pages> 362-381, </pages> <year> 1983. </year>
Reference-contexts: This last condition can be detected 6 and maintained within O (log n) time per operation using the link-cut tree data structure of <ref> [ST83] </ref>. Thus, we have a kinetic data structure to maintain the (1 + *)-EMST. The performance of this data structure is analyzed and summarized as follows. Number of internal events There are two types of events.
Reference: [Vai84] <author> P. M. Vaidya. </author> <title> A fast approximation for minimum spanning trees in k-dimensional space. </title> <booktitle> In Proc. 25th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 403-407, </pages> <year> 1984. </year>
Reference-contexts: If we choose sufficiently many and `well-spaced' lines, we can make such an approximation arbitrarily good, as stated in the following lemma. This idea, which was also used by Vaidya <ref> [Vai84] </ref>, is the basis of our method for approximating the Euclidean distance by a certain polyhedral metric and thus the EMST by a polyhedral MST. Similar constructions were employed in [AMS92] for the maximum spanning tree problem. However, the technical development given here is different.
Reference: [WL85] <author> D. E. Willard and G. S. Lueker. </author> <title> Adding range restriction capability to dynamic data structures. </title> <journal> J. ACM, </journal> <volume> 32 </volume> <pages> 597-617, </pages> <year> 1985. </year>
Reference-contexts: point and then reinserting it with a new weight) By relaxing the equal-sized partitioning in the recursive definition of T to a balanced partitioning and using a careful rotation scheme, the above structure can be maintained and queried within O (t f log k n) worst case time per operation <ref> [WL85] </ref>.
Reference: [Yao82] <author> A. C. Yao. </author> <title> On constructing minimum spanning trees in k-dimensional spaces and related problems. </title> <journal> SIAM J. Comput., </journal> <volume> 11 </volume> <pages> 721-736, </pages> <year> 1982. </year> <month> 8 </month>
Reference-contexts: Here, the sparse graph we are going to use is a variation on the nearest geographic neighbor graph <ref> [Yao82] </ref>, also called the local nearest neighbor graph (LNNG) [KTI95]. <p> Two points p; q form a candidate pair if they are candidate points of each other for some vectors in V d * . We define our LNNG to be the set of candidate pairs. With an argument similar to that in <ref> [Yao82] </ref>, we have: Lemma 9 The ffi * -MST of S is a subgraph of the LNNG. The latter has O (* (d1)=2 n) edges. Proof. (By contradiction) Suppose T is the ffi * -MST of S and edge pq is in T but not in LNNG. <p> By fact 3 of Lemma 11, the complexity of each Voronoi cone is bounded by a constant. Therefore, Property 2 follows also. Property 3 is ensured by the fact that each cone is narrow enough, as argued in <ref> [Yao82] </ref>. Thus, for any given ff, we can construct a well spaced vector set in three dimensions.
References-found: 17

