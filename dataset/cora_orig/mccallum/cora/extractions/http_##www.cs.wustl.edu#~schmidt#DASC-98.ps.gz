URL: http://www.cs.wustl.edu/~schmidt/DASC-98.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/resume.html
Root-URL: http://www.cs.wustl.edu
Email: flevine,cdgill,schmidtg@cs.wustl.edu  
Title: DYNAMIC SCHEDULING STRATEGIES FOR AVIONICS MISSION COMPUTING  
Author: David L. Levine, Christopher D. Gill, and Douglas C. Schmidt 
Date: 31 October 6 November, 1998.  
Note: To be presented at the 17th IEEE/AIAA Digital Avionics Systems Conference, Seattle, Washington,  
Address: St. Louis, MO 63130, USA  
Affiliation: Department of Computer Science, Washington University,  
Abstract: Avionics mission computing systems have traditionally been scheduled statically. Static scheduling provides assurance of schedulability prior to run-time and can be implemented with low run-time overhead. However, static scheduling handles non-periodic processing inefficiently, and treats invocation-to-invocation variations in resource requirements inflexibly. As a consequence, processing resources are underutilized and the resulting systems are hard to adapt to meet worst-case processing requirements. Dynamic scheduling has the potential to offer relief from some of the restrictions imposed by strict static scheduling approaches. Potential benefits of dynamic scheduling include better tolerance for variations in activities, more flexible prioritization, and better CPU utilization in the presence of non-periodic activities. However, the cost of these benefits is expected to be higher run-time scheduling overhead and additional application development complexity. This report reviews the implications of these tradeoffs for avionics mission computing systems and presents experimental results obtained using the Maximum Urgency First dynamic scheduling algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. H. Harrison, D. L. Levine, and D. C. Schmidt, </author> <title> The Design and Performance of a Real-time CORBA Event Service, </title> <booktitle> in Proceedings of OOPSLA '97, </booktitle> <address> (Atlanta, GA), </address> <publisher> ACM, </publisher> <month> October </month> <year> 1997. </year>
Reference: [2] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 2.2 ed., </editor> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: real-time requirements is desirable for tasks such as built-in-test and low-priority display queues, which can tolerate minor fluctuations in scheduling and reliability guarantees, but nonetheless require QoS support. 1.2 Design and Implementation Challenges OO middleware components and services based on the Object Management Group's Common Object Request Broker Architecture (CORBA) <ref> [2] </ref>.
Reference: [3] <author> S. Vinoski, </author> <title> CORBA: Integrating Diverse Applications Within Distributed Heterogeneous Environments, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 14, </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: 3:3:PUSH PUSH ((EVENTSEVENTS)) 1:1: SENSORS SENSORS GENERATEGENERATE DATADATA EVENTEVENT CHANNELCHANNEL (ORBs) allow clients to invoke operations on target object implementations without concern for where the object resides, what language the object is written in, the OS/hardware platform, or the type of communication protocols and networks used to interconnect distributed objects <ref> [3] </ref>. To achieve these benefits for avionics applications, however, requires the resolution of the following design and implementation challenges: Scheduling assurance prior to run-time: In avionics applications, the consequences of missing a critical deadline at run-time can be catastrophic.
Reference: [4] <author> J. R. </author> <title> Newport, Avionics Systems Design. </title> <address> Boca Raton, Florida: </address> <publisher> CRC Press, </publisher> <year> 1994. </year>
Reference-contexts: Likewise, the allocation of operations to processors should be flexible, e.g., it should be transparent whether a given operation resides on the same processor as the client that invokes it. Testability: Avionics software is complex, critical, and long-lived. Maintenance is particularly problematic and expensive <ref> [4] </ref>. A large percentage of software maintenance involves testing. Current scheduling approaches are validated by extensive testing, which is tedious and non-comprehensive. Thus, analytical assurance is essential to help reduce validation costs by focusing the requisite testing on the most strategic system components.
Reference: [5] <author> D. B. Stewart, D. E. Schmitz, and P. K. Khosla, </author> <title> Implementing Real-Time Robotic Systems using CHIMERA II, </title> <booktitle> in Proceedings of 1990 IEEE International Conference on Robotics and Automation, </booktitle> <address> (Cincin-natti, OH), </address> <year> 1992. </year>
Reference-contexts: The remainder of this paper is organized as follows: Section 2 reviews the drawbacks of off-line, static scheduling and introduces the dynamic scheduling strategy we are evaluating, Maximum Urgency First (MUF) <ref> [5] </ref>. Section 3 presents experimental results showing the cost of dynamic scheduling. Section 4 presents concluding remarks. 2 Dynamic Scheduling Strategies This section describes the limitations of purely static scheduling and outlines the potential benefits of applying dynamic scheduling. We also evaluate the limitations of purely dynamic scheduling strategies.
Reference: [6] <author> D. C. Schmidt, D. L. Levine, and S. Mungee, </author> <title> The Design and Performance of Real-Time Object Request Brokers, </title> <journal> Computer Communications, </journal> <volume> vol. 21, </volume> <pages> pp. 294324, </pages> <month> Apr. </month> <year> 1998. </year>
Reference-contexts: We also evaluate the limitations of purely dynamic scheduling strategies. This evaluation motivates the hybrid static/dynamic MUF scheduling approach for CORBA operations used by TAO's real-time scheduling service (described in <ref> [6] </ref>). 2.1 Limitations of Static Scheduling Many hard real-time systems have traditionally been scheduled statically using rate monotonic scheduling (RMS). Static scheduling provides schedulability assurance prior to run-time and can be implemented with low run-time overhead [6]. <p> MUF scheduling approach for CORBA operations used by TAO's real-time scheduling service (described in <ref> [6] </ref>). 2.1 Limitations of Static Scheduling Many hard real-time systems have traditionally been scheduled statically using rate monotonic scheduling (RMS). Static scheduling provides schedulability assurance prior to run-time and can be implemented with low run-time overhead [6]. However, static scheduling has these disadvantages: Inefficient handling of non-periodic processing: Static scheduling treats aperiodic processing as if it was periodic, i.e., occurring at its maximum possible rate. Resources are allocated to aperiodic operations either directly or through a sporadic server 1 to reduce latency. <p> RT Operation and RT Info: In TAO, an RT Operation is a scheduled CORBA operation <ref> [6] </ref>. In this paper, we use operation interchangeably with RT Operation. An RT Info struct is associated with each operation and contains its QoS parameters. The RT Info structure contains the following operation characteristics described in [6]: * Criticality: Criticality is an application-supplied value that indicates the significance of a CORBA <p> Operation and RT Info: In TAO, an RT Operation is a scheduled CORBA operation <ref> [6] </ref>. In this paper, we use operation interchangeably with RT Operation. An RT Info struct is associated with each operation and contains its QoS parameters. The RT Info structure contains the following operation characteristics described in [6]: * Criticality: Criticality is an application-supplied value that indicates the significance of a CORBA operation's completion prior to its deadline. Higher criticality should be assigned to operations that incur greater cost to the application if they fail to complete execution before their deadlines. <p> This in turn improves the reliability and testability of the system. The variant of MUF used in TAO's strategized scheduling service enforces a complete dispatching ordering by providing an importance field in the TAO RT Info CORBA operation QoS description struct <ref> [6] </ref>. TAO's scheduling service uses importance, as well as a topological ordering of operations, to assign a unique static subpriority for each operation within a given criticality level. 2.3.3 Hybrid Approaches Hybrid static and dynamic approaches may be used to combine the benefits of both.
Reference: [7] <author> J. P. Lehoczky, L. Sha, and J. K. Strosnider, </author> <title> Enhanced Aperiodic Scheduling in Hard Real-Time Environments, </title> <booktitle> in Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year>
Reference-contexts: In addition, static scheduling compromises resource utilization in order to guarantee access to resources at run-time. To overcome the limitations of static scheduling, therefore, we are investigating the use of dynamic strategies to schedule CORBA operations for applications with real-time QoS requirements. 1 A sporadic server <ref> [7] </ref> reserves a portion of the schedule to allocate to aperiodic events when they arrive. 2 Priorities can be changed via mode changes, but that is too coarse to capture invocation-to-invocation variations in the resource requirements of com plex applications. 2 struct RT_Info - criticality_; wc_exec_time_; period_; importance_; dependencies_; -; STATIC
Reference: [8] <author> D. B. Stewart and P. K. Khosla, </author> <title> Real-Time Scheduling of Sensor-Based Control Systems, in Real-Time Programming (W. </title> <editor> Halang and K. Ra-mamritham, eds.), Tarrytown, </editor> <address> NY: </address> <publisher> Pergamon Press, </publisher> <year> 1992. </year>
Reference-contexts: The key elements of this transformation performed by the scheduling strategy, which is shown in Figure 2, are as follows: * Urgency: Urgency <ref> [8] </ref> is an ordered tuple consisting of (1) static priority, (2) dynamic subpriority, and (3) static subpriority. Static priority is the highest ranking priority component in the urgency tuple, then dynamic subpriority, and last static subpriority. <p> If the result of the operation is only useful to the application prior to the deadline, then the entire time consumed by the operation is essentially wasted. Minimum Laxity First (MLF): MLF <ref> [8] </ref> refines the EDF strategy by taking into account operation execution time. It dispatches the operation whose laxity is least. Laxity is defined as the time-to-deadline minus the remaining execution time. <p> Thus, they can produce schedules that are optimal in terms of CPU utilization [9]. Moreover, both EDF and MLF can dispatch operations within a single static priority level and do not prioritize operations by rate <ref> [9, 8] </ref>. * Disadvantages: Purely dynamic scheduling approaches like MLF and EDF potentially relieve the utilization limitations of the static RMS approach. However, they have a higher cost to evaluate the scheduling algorithm at run-time. <p> As operations are added to the schedule to achieve higher utilization, the margin of safety 4 for all operations decreases. Therefore, the risk of missing a deadline increases for every operation as the system become overloaded. 2.3.2 Maximum Urgency First The Maximum Urgency First (MUF) <ref> [8] </ref> scheduling algorithm supports both the deterministic rigor of the static RMS scheduling approach and the flexibility of dynamic scheduling approaches such as EDF and MLF. RMS assigns all priority components statically and EDF/MLF assign all priority components dynamically. In contrast, MUF can assign both static and dynamic priority components. <p> Moreover, MUF can apply various types of error handling policies when deadlines are missed <ref> [8] </ref>. For example, if an operation has negative laxity prior to being dispatched, it can be demoted in the priority queue, so an operation that can still meet its deadline can be dispatched instead. Static Subpriority: In MUF, static subpriority is a static, application-specific, optional priority.
Reference: [9] <author> C. Liu and J. Layland, </author> <title> Scheduling Algorithms for Multiprogramming in a Hard-Real-Time Environment, </title> <journal> JACM, </journal> <volume> vol. 20, </volume> <pages> pp. 4661, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: The remainder of this section reviews several strategies for dynamic and hybrid static/dynamic scheduling. These include purely dynamic strategies such as EDF and MLF, and hybrid approachs such as MUF and two-level scheduling. 2.3.1 Purely Dynamic Scheduling Strategies Earliest Deadline First (EDF): EDF <ref> [9, 10] </ref> is a dynamic scheduling algorithm that orders dispatches 4 of operations based on time-to-deadline. Operation executions with closer deadlines are dispatched before those with more distant deadlines. <p> They handle harmonic and non-harmonic periods comparably, and respond flexibly to invocation-to-invocation variations in resource requirements, allowing CPU time one operation does not use to be reallocated to other operations. Thus, they can produce schedules that are optimal in terms of CPU utilization <ref> [9] </ref>. Moreover, both EDF and MLF can dispatch operations within a single static priority level and do not prioritize operations by rate [9, 8]. * Disadvantages: Purely dynamic scheduling approaches like MLF and EDF potentially relieve the utilization limitations of the static RMS approach. <p> Thus, they can produce schedules that are optimal in terms of CPU utilization [9]. Moreover, both EDF and MLF can dispatch operations within a single static priority level and do not prioritize operations by rate <ref> [9, 8] </ref>. * Disadvantages: Purely dynamic scheduling approaches like MLF and EDF potentially relieve the utilization limitations of the static RMS approach. However, they have a higher cost to evaluate the scheduling algorithm at run-time.
Reference: [10] <author> M. H. Klein, T. Ralya, B. Pollak, R. Obenza, and M. G. Harbour, </author> <title> A Practitioner's Handbook for Real-Time Analysis: Guide to Rate Monotonic Analysis for Real-Time Systems. </title> <publisher> Norwell, </publisher> <address> Massachusetts: </address> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: The remainder of this section reviews several strategies for dynamic and hybrid static/dynamic scheduling. These include purely dynamic strategies such as EDF and MLF, and hybrid approachs such as MUF and two-level scheduling. 2.3.1 Purely Dynamic Scheduling Strategies Earliest Deadline First (EDF): EDF <ref> [9, 10] </ref> is a dynamic scheduling algorithm that orders dispatches 4 of operations based on time-to-deadline. Operation executions with closer deadlines are dispatched before those with more distant deadlines.
Reference: [11] <author> Z. Deng and J. W.-S. Liu, </author> <title> Scheduling Real-Time Applications in an Open Environment, </title> <booktitle> in Proceedings of the 18th IEEE Real-Time Systems Symposium, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> Dec. </month> <year> 1997. </year>
Reference-contexts: Multi-level scheduling integrates different approaches at different scheduling levels. One example is two-level hierarchical scheduling, which allows real-time applications to coexist with non-real-time applications in an open OS environment <ref> [11] </ref>. Another is standardized in the ARINC Avionics Application Software Standard Interface (APEX) for Integrated Modular Avionics (IMA) [12]. One level consists of partitions, which are executed cyclically and scheduled statically and off-line. Within each partition, application processes are scheduled using potentially more flexible approaches.
Reference: [12] <institution> ARINC Incorporated, Annapolis, Maryland, USA, </institution> <note> Document No. 653: Avionics Application Software Standard Inteface (Draft 15), </note> <month> Jan. </month> <year> 1997. </year>
Reference-contexts: Multi-level scheduling integrates different approaches at different scheduling levels. One example is two-level hierarchical scheduling, which allows real-time applications to coexist with non-real-time applications in an open OS environment [11]. Another is standardized in the ARINC Avionics Application Software Standard Interface (APEX) for Integrated Modular Avionics (IMA) <ref> [12] </ref>. One level consists of partitions, which are executed cyclically and scheduled statically and off-line. Within each partition, application processes are scheduled using potentially more flexible approaches. Each task in a partition is characterized statically by period (for periodic tasks), deadline within the period, and worst-case execution time.
Reference: [13] <author> N. Audsley and A. Wellings, </author> <title> Analysing APEX Applications, </title> <booktitle> in Proceedings of the 16th Real-Time Systems Symposium, </booktitle> <pages> pp. 3944, </pages> <month> Dec. </month> <year> 1996. </year>
Reference-contexts: Each task in a partition is characterized statically by period (for periodic tasks), deadline within the period, and worst-case execution time. Aperiodic tasks are supported; Auds-ley and Wellings offer an analysis approach assuming minimum arrival time for aperiodic task periods <ref> [13] </ref>. TAO used this same approach initially to handle aperiodic tasks with rate monotonic scheduling and analysis. APEX Partitions are scheduled cyclically. Each partition is characterized statically by parameters including criti-cality level, period, and duration. Therefore, a straightforward static scheduling approach can be used. <p> In particular, it is not clear how APEX can appreciably improve resource utilization when compared to conventional static scheduling approaches. For instance, jitter may be high when the the period of a task is not a multiple of its partition's period <ref> [13] </ref>.
Reference: [14] <author> T. H. Harrison, C. O'Ryan, D. Levine, and D. C. Schmidt, </author> <title> The Design and Performance of a Real-time CORBA Event Service, </title> <note> submitted to the Journal on Selected Areas in Communications special issue on Service Enabling Platforms for Networked Multimedia Systems, 1998. 6 </note>
Reference-contexts: In that case, the task could become ready to run at a time when another partition was executing, and therefore would have to wait for its partition's activation. 3 Dynamic Scheduling Overhead To assess the run-time cost of dynamic scheduling, we used an experimental setup based on TAO's Event Channel <ref> [14] </ref>. It consisted of a single high-priority supplier/consumer pair, and a varied number of low-priority event 5 suppliers and consumers. We measured the latency in event delivery between the high-priority supplier and consumer.
References-found: 14

