URL: ftp://ftp.cs.uoregon.edu/pub/lo/procsim_man.ps.gz
Refering-URL: http://www.cs.uoregon.edu/research/DistributedComputing/Software.html
Root-URL: http://www.cs.uoregon.edu
Email: Email: kurtw@cs.uoregon.edu  
Title: ProcSimity v4.3 User's Manual  
Date: May 17, 1996  
Affiliation: University of Oregon  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Al-Dhelaan and B. Bose. </author> <title> A new strategy for processors allocation in an n-cube multiprocessor. </title> <booktitle> In Proceedings of the International Phoenix Conference on Computers and Communication, </booktitle> <pages> pages 114-118, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: Buddy Searches a k-ary, statically partitioned subcube tree for a free R dimensional subcube. [8] Extended Grey Code Searches a k-ary, grey-coded subcube tree for k adjacent (R1)-dimensional subcubes. [8] Partner Searches a k-ary subcube tree for k dispersed (in the tree), but contiguous (in the network) (R 1)-dimensional subcubes. <ref> [1] </ref> Non-contiguous k-ary n-cube Allocation Strategies (requests for number of processors needed) Random Randomly selects processors from the set of free processors to satisfy the request.
Reference: [2] <author> D. H. Bailey, E. Barszcz, L. Dagum, and H. D. Simon. </author> <title> NAS Parallel Benchmark Results 3-94. </title> <type> Technical Report RNR-94-006, </type> <institution> NASA Ames Research Center, Moffett Field, </institution> <address> CA, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: If the job stream is read from a file, it is possible to specify a different communication pattern for each job. Implemented communication patterns include random communication, all-to-all and one-to-all broadcast, Fast Fourier Transform (FFT), divide-and-conquer binomial tree, and several of the NAS Parallel Benchmarks <ref> [2] </ref>. 4.1.4 Implementation Performance information is provided to ProcSimity's visualization tool through trace files generated by its discrete event simulator, modeling a distributed memory multi-computer in a multiple-user environment. The simulator is implemented in C, using the process-oriented, discrete event simulation toolkit YACSIM, a general simulation library [5].
Reference: [3] <author> B. Bose, B. Broeg, Y. Kwon, and Y. Ashir. </author> <title> Lee distance and topological properties of k-ary n-cubes. </title> <type> Technical Report 93-60-11, </type> <institution> Oregon State University, Corvallis, </institution> <address> OR, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: ProcSimity currently supports both the mesh interconnection topology and the general k-ary n-cube topologies, including both torus and hypercube. Both the mesh and k-ary n-cube topologies use dimension order routing, that is, XY routing [12] and Lee distance routing <ref> [3] </ref>, respectively. Virtual channels are used in k-ary n-cube routers to avoid deadlock [6].
Reference: [4] <author> P. Chuang and N. Tzeng. </author> <title> An efficient submesh allocation strategy for mesh computer systems. </title> <booktitle> In 1991 International Conference on Distributed Computer Systems, </booktitle> <pages> pages 256-263, </pages> <year> 1991. </year>
Reference-contexts: independent of 7 Contiguous Mesh Allocation Strategies (requests for rectangular submeshes) Frame Sliding Examines the first candidate "frame" from the lowest leftmost available processor and slides the candidate frame horizontally or vertically by the stride of width or height of the requested submesh respectively, until an available frame is found. <ref> [4] </ref> First Fit Scans the mesh for a free rectangular submesh large enough for the re quested submesh, and allocates from the first one found. [13] Best Fit Scans the mesh for free rectangular submeshes large enough for the requested submesh, and allocates from the one closest in size to the
Reference: [5] <author> R. Covington, S. Dwarkadas, J. Jump, J. Sinclair, and S. Madala. </author> <title> The efficient simulation of parallel computer system. </title> <journal> International Journal in Computer Simulations, </journal> <volume> 1 </volume> <pages> 31-58, </pages> <year> 1991. </year>
Reference-contexts: The simulator is implemented in C, using the process-oriented, discrete event simulation toolkit YACSIM, a general simulation library <ref> [5] </ref>.
Reference: [6] <author> William J. Dally and Charles L. Seitz. </author> <title> The torus routing chip. </title> <booktitle> Distributed Computing, </booktitle> <year> 1986. </year>
Reference-contexts: Both the mesh and k-ary n-cube topologies use dimension order routing, that is, XY routing [12] and Lee distance routing [3], respectively. Virtual channels are used in k-ary n-cube routers to avoid deadlock <ref> [6] </ref>.
Reference: [7] <author> M. L. Fulgham and L. Snyder. </author> <title> Performance of Chaos and oblivious routers under non-uniform traffic. </title> <type> Technical Report UW-CSE-93-06-01, </type> <institution> University of Washington, </institution> <address> Seattle WA, </address> <year> 1993. </year>
Reference-contexts: We conducted experiments comparing our simulator, without job communication, to Zhu's allocation simulator [13], which simulates jobs according to the same probabilistic service delay scheme used by ProcSimity. We also conducted experiments comparing our simulator, with job communication patterns, to the Chaos Simulator <ref> [7] </ref>, which we modified to execute independent jobs and Proc-Simity's communication patterns. In both comparisons, nearly identical normalized results were obtained, differing by no more than 7% in the worst case.
Reference: [8] <author> V. Gautam and V. Chaudhary. </author> <title> Subcube allocation strategies in a k-ary n-cube. </title> <booktitle> In Proceedings of the Sixth International Conference on Parallel and Distributed Computing Systems, </booktitle> <pages> pages 141-146, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: [10] Multiple Buddy Allocates multiple square blocks, whose side lengths are powers of two, until the job has received exactly the number of processors requested. [10] Contiguous k-ary n-cube Allocation Strategies (requests for k-ary R-cube) Extended Buddy Searches a k-ary, statically partitioned subcube tree for a free R dimensional subcube. <ref> [8] </ref> Extended Grey Code Searches a k-ary, grey-coded subcube tree for k adjacent (R1)-dimensional subcubes. [8] Partner Searches a k-ary subcube tree for k dispersed (in the tree), but contiguous (in the network) (R 1)-dimensional subcubes. [1] Non-contiguous k-ary n-cube Allocation Strategies (requests for number of processors needed) Random Randomly selects <p> the job has received exactly the number of processors requested. [10] Contiguous k-ary n-cube Allocation Strategies (requests for k-ary R-cube) Extended Buddy Searches a k-ary, statically partitioned subcube tree for a free R dimensional subcube. <ref> [8] </ref> Extended Grey Code Searches a k-ary, grey-coded subcube tree for k adjacent (R1)-dimensional subcubes. [8] Partner Searches a k-ary subcube tree for k dispersed (in the tree), but contiguous (in the network) (R 1)-dimensional subcubes. [1] Non-contiguous k-ary n-cube Allocation Strategies (requests for number of processors needed) Random Randomly selects processors from the set of free processors to satisfy the request.
Reference: [9] <author> P. Krueger, T. Lai, and V. A. Radiya. </author> <title> Job scheduling is more important than processor allocation for hypercube computers. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 5(5) </volume> <pages> 488-497, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Shortest (Longest) Service Demand The job with the shortest (longest) service demand, the estimated service time multiplied by the number of processors needed, is scheduled first. <ref> [9] </ref> Shortest (Longest) Hold Time The job with the shortest (longest) hold time, the estimated service time, is scheduled first. [9] Smallest (Largest) Job The job needing the smallest (largest) number of processors is scheduled first. [9] Scan Up Separate queues are maintained for each size request. <p> Shortest (Longest) Service Demand The job with the shortest (longest) service demand, the estimated service time multiplied by the number of processors needed, is scheduled first. <ref> [9] </ref> Shortest (Longest) Hold Time The job with the shortest (longest) hold time, the estimated service time, is scheduled first. [9] Smallest (Largest) Job The job needing the smallest (largest) number of processors is scheduled first. [9] Scan Up Separate queues are maintained for each size request. Each queue is, in turn, copied and serviced exclusively (in FCFS order) until empty. [9] Table 1: Scheduling strategies provided by the simulator utilization. <p> the estimated service time multiplied by the number of processors needed, is scheduled first. <ref> [9] </ref> Shortest (Longest) Hold Time The job with the shortest (longest) hold time, the estimated service time, is scheduled first. [9] Smallest (Largest) Job The job needing the smallest (largest) number of processors is scheduled first. [9] Scan Up Separate queues are maintained for each size request. Each queue is, in turn, copied and serviced exclusively (in FCFS order) until empty. [9] Table 1: Scheduling strategies provided by the simulator utilization. <p> hold time, the estimated service time, is scheduled first. <ref> [9] </ref> Smallest (Largest) Job The job needing the smallest (largest) number of processors is scheduled first. [9] Scan Up Separate queues are maintained for each size request. Each queue is, in turn, copied and serviced exclusively (in FCFS order) until empty. [9] Table 1: Scheduling strategies provided by the simulator utilization. This is because non-contiguous jobs tend to be dispersed, to some degree, around the network of processors, resulting in greater message path length and contention between messages belonging to different jobs.
Reference: [10] <author> W. Liu, V. M. Lo, K. Windisch, and B. Nitzberg. </author> <title> Non-contiguous processor allocation algorithms for distributed memory multicomputers. </title> <booktitle> In Proceedings Supercomputing '94, </booktitle> <pages> pages 227-236, </pages> <year> 1994. </year>
Reference-contexts: Fit Scans the mesh for free rectangular submeshes large enough for the requested submesh, and allocates from the one closest in size to the request. [13] Non-contiguous Mesh Allocation Strategies (requests for number of processors needed) Random Randomly selects processors from the set of free processors to satisfy the request. <ref> [10] </ref> Paging (i) Based on a static partitioning of the mesh into pages of size 2 i fi 2 i , repeatedly allocates pages to the job, in row-major order, until enough processors have been allocated to satisfy the request. Variations of paging use scan patterns other than row-major. [10] Multiple <p> request. <ref> [10] </ref> Paging (i) Based on a static partitioning of the mesh into pages of size 2 i fi 2 i , repeatedly allocates pages to the job, in row-major order, until enough processors have been allocated to satisfy the request. Variations of paging use scan patterns other than row-major. [10] Multiple Buddy Allocates multiple square blocks, whose side lengths are powers of two, until the job has received exactly the number of processors requested. [10] Contiguous k-ary n-cube Allocation Strategies (requests for k-ary R-cube) Extended Buddy Searches a k-ary, statically partitioned subcube tree for a free R dimensional subcube. [8] <p> Variations of paging use scan patterns other than row-major. <ref> [10] </ref> Multiple Buddy Allocates multiple square blocks, whose side lengths are powers of two, until the job has received exactly the number of processors requested. [10] Contiguous k-ary n-cube Allocation Strategies (requests for k-ary R-cube) Extended Buddy Searches a k-ary, statically partitioned subcube tree for a free R dimensional subcube. [8] Extended Grey Code Searches a k-ary, grey-coded subcube tree for k adjacent (R1)-dimensional subcubes. [8] Partner Searches a k-ary subcube tree for k dispersed (in
Reference: [11] <author> V. M. Lo, K. Windisch, and B. Bose. </author> <title> Processor allocation algorithms for k-ary n-cubes. </title> <booktitle> In 1995 International Conference on Parallel Processing, </booktitle> <year> 1995. </year>
Reference-contexts: Paging (i) Based on a static partitioning of the k-ary n-cube into k-ary i-cube pages, repeatedly allocates pages to the job until enough processors have been allocated to satisfy the request. <ref> [11] </ref> Multiple Buddy Factors the request into multiple k-ary subcubes which are then obtained by searching a k-ary statically partitioned subcube tree. [11] Multiple Partner Factors the request into multiple k-ary subcubes which are then obtained by the Partner method described above. [11] Table 2: Allocation strategies provided by the simulator. <p> on a static partitioning of the k-ary n-cube into k-ary i-cube pages, repeatedly allocates pages to the job until enough processors have been allocated to satisfy the request. <ref> [11] </ref> Multiple Buddy Factors the request into multiple k-ary subcubes which are then obtained by searching a k-ary statically partitioned subcube tree. [11] Multiple Partner Factors the request into multiple k-ary subcubes which are then obtained by the Partner method described above. [11] Table 2: Allocation strategies provided by the simulator. 8 its size or placement in the architecture. <p> processors have been allocated to satisfy the request. <ref> [11] </ref> Multiple Buddy Factors the request into multiple k-ary subcubes which are then obtained by searching a k-ary statically partitioned subcube tree. [11] Multiple Partner Factors the request into multiple k-ary subcubes which are then obtained by the Partner method described above. [11] Table 2: Allocation strategies provided by the simulator. 8 its size or placement in the architecture. This allows us to test and isolate the effects of different combinations of scheduling and allocation algorithms on system fragmentation alone, without simulating specific applications.
Reference: [12] <author> L. M. Ni and P. K. McKinley. </author> <title> A survey of wormhole routing techniques in direct networks. </title> <journal> IEEE Computer, </journal> <volume> 26(2) </volume> <pages> 62-75, </pages> <year> 1993. </year>
Reference-contexts: Adjacent nodes are connected by two uni-directional channels, and messages may be routed by either store-and-forward, virtual cut-through, or wormhole <ref> [12] </ref> flow control. ProcSimity currently supports both the mesh interconnection topology and the general k-ary n-cube topologies, including both torus and hypercube. Both the mesh and k-ary n-cube topologies use dimension order routing, that is, XY routing [12] and Lee distance routing [3], respectively. <p> channels, and messages may be routed by either store-and-forward, virtual cut-through, or wormhole <ref> [12] </ref> flow control. ProcSimity currently supports both the mesh interconnection topology and the general k-ary n-cube topologies, including both torus and hypercube. Both the mesh and k-ary n-cube topologies use dimension order routing, that is, XY routing [12] and Lee distance routing [3], respectively. Virtual channels are used in k-ary n-cube routers to avoid deadlock [6].
Reference: [13] <author> Y. Zhu. </author> <title> Efficient processor allocation strategies for mesh-connected parallel computers. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 16 </volume> <pages> 328-337, </pages> <year> 1992. </year> <month> 29 </month>
Reference-contexts: slides the candidate frame horizontally or vertically by the stride of width or height of the requested submesh respectively, until an available frame is found. [4] First Fit Scans the mesh for a free rectangular submesh large enough for the re quested submesh, and allocates from the first one found. <ref> [13] </ref> Best Fit Scans the mesh for free rectangular submeshes large enough for the requested submesh, and allocates from the one closest in size to the request. [13] Non-contiguous Mesh Allocation Strategies (requests for number of processors needed) Random Randomly selects processors from the set of free processors to satisfy the <p> Fit Scans the mesh for a free rectangular submesh large enough for the re quested submesh, and allocates from the first one found. <ref> [13] </ref> Best Fit Scans the mesh for free rectangular submeshes large enough for the requested submesh, and allocates from the one closest in size to the request. [13] Non-contiguous Mesh Allocation Strategies (requests for number of processors needed) Random Randomly selects processors from the set of free processors to satisfy the request. [10] Paging (i) Based on a static partitioning of the mesh into pages of size 2 i fi 2 i , repeatedly allocates pages to the <p> Further, we validated our simulator by comparing its results to other independently developed simulations of similar systems. We conducted experiments comparing our simulator, without job communication, to Zhu's allocation simulator <ref> [13] </ref>, which simulates jobs according to the same probabilistic service delay scheme used by ProcSimity. We also conducted experiments comparing our simulator, with job communication patterns, to the Chaos Simulator [7], which we modified to execute independent jobs and Proc-Simity's communication patterns.
References-found: 13

