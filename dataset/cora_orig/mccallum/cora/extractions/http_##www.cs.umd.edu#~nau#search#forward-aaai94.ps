URL: http://www.cs.umd.edu/~nau/search/forward-aaai94.ps
Refering-URL: http://www.cs.umd.edu/~nau/publications.html
Root-URL: 
Email: nau@cs.umd.edu  
Title: An Analysis of Forward Pruning  
Author: Stephen J. J. Smith Dana S. Nau 
Address: College Park, MD 20742  sjsmith@cs.umd.edu College Park, MD 20742  
Affiliation: Department of Computer Science Department of Computer Science, and University of Maryland Institute for Systems Research  University of Maryland  
Note: Proc. AAAI-94, to appear.  
Abstract: Several early game-playing computer programs used forward pruning (i.e., the practice of deliberately ignoring nodes that are believed unlikely to affect a game tree's minimax value), but this technique did not seem to result in good decision-making. The poor performance of forward pruning presents a major puzzle for AI research on game playing, because some version of forward pruning seems to be "what people do," and the best chess-playing programs still do not play as well as the best humans. As a step toward deeper understanding of forward pruning, we have set up models of forward pruning on two different kinds of game trees, and used these models to investigate how forward pruning affects the probability of choosing the correct move. In our studies, forward pruning did better than minimaxing when there was a high correlation among the minimax values of sibling nodes in a game tree. This result suggests that forward pruning may possibly be a useful decision-making technique in certain kinds of games. In particular, we believe that bridge may be such a game. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Baudet, G. M. </author> <year> 1978. </year> <title> On the branching factor of the alpha-beta pruning algorithm. </title> <journal> Artif. Intel. </journal> <volume> 10 </volume> <pages> 173-199. </pages>
Reference-contexts: the set f0; 1g, with probability p P of choosing 1. (For the rest of this paper, we will set p P = 0:68233, in order to guarantee that in the limit, there is still a nonzero probability that each player will have a forced win in the game tree <ref> [1, 11, 9] </ref>.) Because u's value does not depend on the path from the root to u, there is no need for RVA nodes.
Reference: [2] <author> Berliner, H. J. </author> <year> 1979. </year> <title> The B* tree search algorithm: A best-first proof procedure. </title> <journal> Artif. Intel. </journal> <volume> 12 </volume> <pages> 23-40. </pages>
Reference-contexts: To further decrease the number of nodes examined, game-tree-search procedures have been developed such as alpha-beta [5], B* <ref> [2] </ref>, or SSS* [21]. These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). This approach has worked well in games such as chess [3, 7], checkers [15, 14], and othello [6].
Reference: [3] <author> Berliner, H. J.; Goetsch, G.; Campbell, M. S.; and Ebeling, C. </author> <year> 1990. </year> <title> Measuring the performance potential of chess programs. </title> <journal> Artif. Intel. </journal> <volume> 43 </volume> <pages> 7-20. </pages>
Reference-contexts: These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). This approach has worked well in games such as chess <ref> [3, 7] </ref>, checkers [15, 14], and othello [6]. A more aggressive approach is forward pruning, in which the procedure deliberately ignores v if it believes v is unlikely to affect mm (u), even if there is no proof that v will not affect mm (u).
Reference: [4] <author> Biermann, A. W. </author> <year> 1978. </year> <title> Theoretical issues related to computer game playing programs. </title> <type> Personal Computing 86-88. </type>
Reference-contexts: On perfect-information zero-sum games such as chess, forward pruning has not worked as well as approaches that do not use forward pruning <ref> [4, 24] </ref>. This presents a major puzzle for AI research on game playing, because some version of forward pruning seems to be "what people do," and the best chess-playing programs still do not play as well as the best humans. <p> Although several early computer chess programs used forward pruning, it is no longer widely used, because chess programs that used it did less well than those that did not <ref> [4, 24] </ref>. Our Model of Forward Pruning In the game trees investigated in this paper, the value of each leaf node is either 1, representing a win for Max, or 0, representing a win for Min. Our model of a forward-pruning algorithm works as follows.
Reference: [5] <author> Knuth, D. E. and Moore, R. W. </author> <year> 1975. </year> <title> An analysis of alpha-beta pruning. </title> <journal> Artif. Intel. </journal> <volume> 6 </volume> <pages> 293-326. </pages>
Reference-contexts: To further decrease the number of nodes examined, game-tree-search procedures have been developed such as alpha-beta <ref> [5] </ref>, B* [2], or SSS* [21]. These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). This approach has worked well in games such as chess [3, 7], checkers [15, 14], and othello [6].
Reference: [6] <author> Lee, K.-F. and Mahajan, S. </author> <year> 1990. </year> <title> The development of a world class othello program. </title> <journal> Artif. Intel. </journal> <volume> 43 </volume> <pages> 21-36. </pages>
Reference-contexts: These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). This approach has worked well in games such as chess [3, 7], checkers [15, 14], and othello <ref> [6] </ref>. A more aggressive approach is forward pruning, in which the procedure deliberately ignores v if it believes v is unlikely to affect mm (u), even if there is no proof that v will not affect mm (u).
Reference: [7] <author> Levy, D. and Newborn, M. </author> <year> 1982. </year> <title> All About Chess and Computers. </title> <publisher> Computer Science Press. </publisher>
Reference-contexts: These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). This approach has worked well in games such as chess <ref> [3, 7] </ref>, checkers [15, 14], and othello [6]. A more aggressive approach is forward pruning, in which the procedure deliberately ignores v if it believes v is unlikely to affect mm (u), even if there is no proof that v will not affect mm (u).
Reference: [8] <author> Nau, D. S. </author> <year> 1982. </year> <title> The last player theorem. </title> <journal> Artif. Intel., </journal> <volume> 18 </volume> <pages> 53-65. </pages>
Reference-contexts: Thus, the next question is whether minimax with forward 4 The probability of correct decision for N-game-like trees exhibits a "manic-depressive" behavior similar to that observed in <ref> [8] </ref>, that is, it is higher for odd Max-heights than it is for even Max-heights. We believe this is because our RVA nodes are only put below Min nodes.
Reference: [9] <author> Nau, D. S. </author> <year> 1982. </year> <title> An investigation of the causes of pathology in games. </title> <journal> Artif. Intel. </journal> <volume> 19 </volume> <pages> 257-278. </pages>
Reference-contexts: If the strength of a leaf node is nonnegative, it is classified as a win; otherwise, it is classified as a loss. An N-game tree, as defined in <ref> [9, 10] </ref>, is similar to the N-game-like trees defined above, except that N-game trees have no RVA nodes. Instead, a value of 1 or -1 is randomly assigned to each arc, with a probability of 0.5 of choosing 1. <p> P-Game Trees A P-game tree <ref> [9, 10, 12] </ref> is a complete tree that contains the following types of nodes (an example appears in Fig. 2): 1. Max nodes, where it is Max's move. <p> the set f0; 1g, with probability p P of choosing 1. (For the rest of this paper, we will set p P = 0:68233, in order to guarantee that in the limit, there is still a nonzero probability that each player will have a forced win in the game tree <ref> [1, 11, 9] </ref>.) Because u's value does not depend on the path from the root to u, there is no need for RVA nodes. <p> Statistical Studies The results in the "Mathematical Derivations" section suggest that minimax with forward pruning does better when there is a high correlation among the minimax values of sibling nodes in a game tree. Previous studies <ref> [9, 10] </ref> have shown that ordinary minimaxing also does better when there is a high correlation among the minimax values of sibling nodes in a game tree. <p> For each tree T , we did a depth d minimax search of T , 5 using the same evaluation function used in <ref> [9, 10] </ref>: eval (u) = winning leaf-descendants of u all leaf-descendants of u : We did this for d = 1; : : : ; 2h 2. 6 To get a statistical approximation of the probability of correct decision, we averaged the following over all 5000 N-game trees or P-game trees:
Reference: [10] <author> Nau, D. S. </author> <year> 1983. </year> <title> Pathology on game trees revisited, and an alternative to minimaxing. </title> <journal> Artif. Intel. </journal> <volume> 21(1, </volume> 2):221-244. 
Reference-contexts: If the strength of a leaf node is nonnegative, it is classified as a win; otherwise, it is classified as a loss. An N-game tree, as defined in <ref> [9, 10] </ref>, is similar to the N-game-like trees defined above, except that N-game trees have no RVA nodes. Instead, a value of 1 or -1 is randomly assigned to each arc, with a probability of 0.5 of choosing 1. <p> P-Game Trees A P-game tree <ref> [9, 10, 12] </ref> is a complete tree that contains the following types of nodes (an example appears in Fig. 2): 1. Max nodes, where it is Max's move. <p> Statistical Studies The results in the "Mathematical Derivations" section suggest that minimax with forward pruning does better when there is a high correlation among the minimax values of sibling nodes in a game tree. Previous studies <ref> [9, 10] </ref> have shown that ordinary minimaxing also does better when there is a high correlation among the minimax values of sibling nodes in a game tree. <p> For each tree T , we did a depth d minimax search of T , 5 using the same evaluation function used in <ref> [9, 10] </ref>: eval (u) = winning leaf-descendants of u all leaf-descendants of u : We did this for d = 1; : : : ; 2h 2. 6 To get a statistical approximation of the probability of correct decision, we averaged the following over all 5000 N-game trees or P-game trees:
Reference: [11] <author> Pearl, J. </author> <year> 1980. </year> <title> Asymptotic properties of minimax trees and game-searching procedures. </title> <journal> Artif. Intel. </journal> <volume> 14 </volume> <pages> 113-138. </pages>
Reference-contexts: the set f0; 1g, with probability p P of choosing 1. (For the rest of this paper, we will set p P = 0:68233, in order to guarantee that in the limit, there is still a nonzero probability that each player will have a forced win in the game tree <ref> [1, 11, 9] </ref>.) Because u's value does not depend on the path from the root to u, there is no need for RVA nodes.
Reference: [12] <author> Pearl, J. </author> <year> 1984. </year> <title> Heuristics. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. </address>
Reference-contexts: P-Game Trees A P-game tree <ref> [9, 10, 12] </ref> is a complete tree that contains the following types of nodes (an example appears in Fig. 2): 1. Max nodes, where it is Max's move.
Reference: [13] <author> Sacerdoti, E. D. </author> <year> 1977. </year> <title> A Structure for Plans and Behavior. </title> <publisher> American Elsevier Publishing Company. </publisher>
Reference-contexts: A more sophisticated version of this is quiescence search: mark a non-terminal 1 In particular, we are developing a forward-pruning search technique for the game of bridge [17, 18], by extending task-network planning techniques <ref> [22, 23, 13, 20] </ref> to represent multi-agency and uncertainty. node u as terminal if and only if u's depth exceeds d and u is "quiet" (i.e., there is reason to believe that e (u) will be reasonably accurate at u).
Reference: [14] <author> Samuel, A. L. </author> <year> 1967. </year> <title> Some studies in machine learning using the game of checkers. </title> <journal> ii-recent progress. IBM Journal of Research and Development 2 </journal> <pages> 601-617. </pages>
Reference-contexts: These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). This approach has worked well in games such as chess [3, 7], checkers <ref> [15, 14] </ref>, and othello [6]. A more aggressive approach is forward pruning, in which the procedure deliberately ignores v if it believes v is unlikely to affect mm (u), even if there is no proof that v will not affect mm (u).
Reference: [15] <author> Schaeffer, J.; Culberson, J.; Treloar, N.; Knight, B.; Lu, P.; and Szafron, D. </author> <year> 1992. </year> <title> A world championship caliber checkers program. </title> <journal> Artif. Intel. </journal> <volume> 53 </volume> <pages> 273-290. </pages>
Reference-contexts: These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). This approach has worked well in games such as chess [3, 7], checkers <ref> [15, 14] </ref>, and othello [6]. A more aggressive approach is forward pruning, in which the procedure deliberately ignores v if it believes v is unlikely to affect mm (u), even if there is no proof that v will not affect mm (u).
Reference: [16] <author> Shannon, C. </author> <year> 1950. </year> <title> Programming a computer for playing chess. </title> <journal> Philosophical Magazine 7(14) </journal> <pages> 256-275. </pages>
Reference-contexts: For this reason, game-playing programs usually mark some non-terminal nodes as terminal, and evaluate them using some static evaluation function e (u). The simplest version of this approach is what Shannon <ref> [16] </ref> called "Type A" pruning: choose some arbitrary cutoff depth d, and mark a non-terminal node u as terminal if and only if u's depth exceeds d.
Reference: [17] <author> Smith, S. J. J.; Nau, D. S.; and Throop, T. </author> <year> 1992. </year> <title> A hierarchical approach to strategic planning with non-cooperating agents under conditions of uncertainty. </title> <booktitle> In Proc. First Internat. Conf. AI Planning Systems. </booktitle> <pages> 299-300. </pages>
Reference-contexts: A more sophisticated version of this is quiescence search: mark a non-terminal 1 In particular, we are developing a forward-pruning search technique for the game of bridge <ref> [17, 18] </ref>, by extending task-network planning techniques [22, 23, 13, 20] to represent multi-agency and uncertainty. node u as terminal if and only if u's depth exceeds d and u is "quiet" (i.e., there is reason to believe that e (u) will be reasonably accurate at u). <p> well in bridge, because they have no chance of searching any significant portion of the game tree. * Our preliminary studies on the game of bridge show that by using forward-pruning techniques based on task-network planning, we can produce search trees of only about 1300 nodes in the worst case <ref> [17] </ref>. Thus, forward pruning will allow us to search all the way to the end of the game.
Reference: [18] <author> Smith, S. J. J. and Nau, D. S. </author> <year> 1993. </year> <title> Strategic planning for imperfect-information games. </title> <booktitle> In AAAI Fall Symposium on Games: Planning and Learning. </booktitle>
Reference-contexts: A more sophisticated version of this is quiescence search: mark a non-terminal 1 In particular, we are developing a forward-pruning search technique for the game of bridge <ref> [17, 18] </ref>, by extending task-network planning techniques [22, 23, 13, 20] to represent multi-agency and uncertainty. node u as terminal if and only if u's depth exceeds d and u is "quiet" (i.e., there is reason to believe that e (u) will be reasonably accurate at u).
Reference: [19] <author> Smith, S. J. J.; Nau, D. S. </author> <title> Formal and statistical analysis of forward pruning. </title> <publisher> Forthcoming. </publisher>
Reference-contexts: The recurrence for f h;x;y is f h;x;y = p N e h;x1;y1 + (1 p N )e h;x+1;y+1 : The recurrences for g h;x;y and e h+1;x;y are too complicated to include here; see <ref> [19] </ref>. <p> The base case is e 0;x;y = p P if x = 1 and y = 1; (1p P ) if x = 0 and y = 0; and 0 otherwise. As shown in <ref> [19] </ref>, the recurrence for g 0 h;x;y is identical to that for f h;x;y , except that each occurrence of e h;m;n is replaced by e 0 h;m;n . <p> We have computed D h and D 0 h for trees of height h = 1; 2; : : : ; 15. The results are shown in Fig. 3, along with the probability 3 We have also investigated the probability of correct de cision among three alternatives; the formulas <ref> [19] </ref> are too complicated to present here, but the results are similar. h versus h for various values of p. of correct decision by random guess, included for comparison purposes. Our interpretation of these results is as follows: 4 1.
Reference: [20] <author> Stefik, M. </author> <year> 1981. </year> <title> Planning with constraints (MOL-GEN: Part 1). </title> <journal> Artif. Intel. </journal> <volume> 16 </volume> <pages> 111-140. </pages>
Reference-contexts: A more sophisticated version of this is quiescence search: mark a non-terminal 1 In particular, we are developing a forward-pruning search technique for the game of bridge [17, 18], by extending task-network planning techniques <ref> [22, 23, 13, 20] </ref> to represent multi-agency and uncertainty. node u as terminal if and only if u's depth exceeds d and u is "quiet" (i.e., there is reason to believe that e (u) will be reasonably accurate at u).
Reference: [21] <author> Stockman, G. C. </author> <year> 1979. </year> <title> A minimax algorithm better than alpha-beta? Artif. </title> <journal> Intel. </journal> <volume> 12 </volume> <pages> 179-196. </pages>
Reference-contexts: To further decrease the number of nodes examined, game-tree-search procedures have been developed such as alpha-beta [5], B* [2], or SSS* <ref> [21] </ref>. These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). This approach has worked well in games such as chess [3, 7], checkers [15, 14], and othello [6].
Reference: [22] <author> Tate, A. </author> <year> 1976. </year> <title> Project planning using a hierarchic non-linear planner. </title> <type> Technical Report 25, </type> <institution> Department of Artif. Intel., University of Edinburgh. </institution>
Reference-contexts: A more sophisticated version of this is quiescence search: mark a non-terminal 1 In particular, we are developing a forward-pruning search technique for the game of bridge [17, 18], by extending task-network planning techniques <ref> [22, 23, 13, 20] </ref> to represent multi-agency and uncertainty. node u as terminal if and only if u's depth exceeds d and u is "quiet" (i.e., there is reason to believe that e (u) will be reasonably accurate at u).
Reference: [23] <author> Tate, A. </author> <year> 1977. </year> <title> Generating project networks. </title> <booktitle> In Proc. 5th IJCAI. </booktitle>
Reference-contexts: A more sophisticated version of this is quiescence search: mark a non-terminal 1 In particular, we are developing a forward-pruning search technique for the game of bridge [17, 18], by extending task-network planning techniques <ref> [22, 23, 13, 20] </ref> to represent multi-agency and uncertainty. node u as terminal if and only if u's depth exceeds d and u is "quiet" (i.e., there is reason to believe that e (u) will be reasonably accurate at u).
Reference: [24] <author> Truscott, T. R. </author> <year> 1981. </year> <title> Techniques used in minimax game-playing programs. </title> <type> Master's thesis, </type> <institution> Duke University, Durham, NC. </institution>
Reference-contexts: On perfect-information zero-sum games such as chess, forward pruning has not worked as well as approaches that do not use forward pruning <ref> [4, 24] </ref>. This presents a major puzzle for AI research on game playing, because some version of forward pruning seems to be "what people do," and the best chess-playing programs still do not play as well as the best humans. <p> Although several early computer chess programs used forward pruning, it is no longer widely used, because chess programs that used it did less well than those that did not <ref> [4, 24] </ref>. Our Model of Forward Pruning In the game trees investigated in this paper, the value of each leaf node is either 1, representing a win for Max, or 0, representing a win for Min. Our model of a forward-pruning algorithm works as follows.
References-found: 24

