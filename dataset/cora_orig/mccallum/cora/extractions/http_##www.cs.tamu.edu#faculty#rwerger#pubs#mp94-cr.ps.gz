URL: http://www.cs.tamu.edu/faculty/rwerger/pubs/mp94-cr.ps.gz
Refering-URL: http://www.cs.tamu.edu/faculty/rwerger/pubs/
Root-URL: http://www.cs.tamu.edu
Title: RUN-TIME METHODS FOR PARALLELIZING DO LOOPS  
Author: LAWRENCE RAUCHWERGER and DAVID A. PADUA 
Address: 1308 West Main Street, Urbana, IL 61801, USA  1308 West Main Street, Urbana, IL 61801, USA  
Affiliation: Center for Supercomputing Research Development, University of Illinois  Center for Supercomputing Research Development, University of Illinois  
Abstract: Current parallelizing compilers cannot extract a significant fraction of the available parallelism in a loop if it has a complex and/or statically insufficiently defined access pattern. This is an important issue because a large class of complex simulations used in industry today have irregular domains and/or dynamically changing interactions. To handle these types of problems methods capable of automatically extracting parallelism at run-time are needed. For this reason, we have developed the Privatizing DOALL test a technique for identifying fully parallel loops at run-time, and dynamically privatizing scalars and arrays. The test is fully parallel, requires no synchronization, is easily automatable, and can be applied to any loop, regardless of its access pattern. We show that the expected speedup for fully parallel loops is significant, and the cost of a failed test (a not fully parallel loop) is minimal. We present experimental results on loops from the PERFECT Benchmarks which confirm our conclusion that this test can lead to significant speedups. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> Alliant Computer Systems Corporation, 42 Nagog Park, Acton, Massachusetts 01720, FX/Series Architecture Manual, </institution> <year> 1986, </year> <title> Part Number: </title> <publisher> 300-00001-B. </publisher>
Reference-contexts: used to transform the loop into a DOALL, then there are two choices: privatize the entire shared variable, or only privatize the shared memory locations (e.g., elements of the array) that are fl any returns the "OR" of its vector operand's elements, i.e., any (v [1 : n]) = (v <ref> [1] </ref> _ v [2] _ : : : _ v [n]). Fig. 3. Allocating the private variables; privatized elements are shaded. written in the loop. If it is decided to privatize only the elements that are written, then the private variables can be allocated as follows.
Reference: 2. <institution> Alliant Computers Systems Corporation. Alliant FX/2800 Series System Description, </institution> <year> 1991. </year>
Reference-contexts: the loop into a DOALL, then there are two choices: privatize the entire shared variable, or only privatize the shared memory locations (e.g., elements of the array) that are fl any returns the "OR" of its vector operand's elements, i.e., any (v [1 : n]) = (v [1] _ v <ref> [2] </ref> _ : : : _ v [n]). Fig. 3. Allocating the private variables; privatized elements are shaded. written in the loop. If it is decided to privatize only the elements that are written, then the private variables can be allocated as follows.
Reference: 3. <author> U. Banerjee, </author> <title> Dependence Analysis for Supercomputing, </title> <publisher> Kluwer, </publisher> <address> Boston, MA., </address> <year> 1988. </year>
Reference: 4. <author> M. Berry, D. Chen, P. Koss, D. Kuck, S. Lo, Y. Pang, R. Roloff, A. Sameh, E. Clementi, S. Chin, D. Schneider, G. Fox, P. Messina, D. Walker, C. Hsiung, J. Schwarzmeier, K. Lue, S. Orzag, F. Seidl, O. Johnson, G. Swanson, R. Goodrum, and J. Martin, </author> <title> The PERFECT club benchmarks: Effective performance evaluation of supercomputers, </title> <type> Tech. Rep. </type> <institution> CSRD-827, Center for Supercomputing Research and Development, University of Illinois, Urbana, IL, </institution> <year> 1989. </year>
Reference-contexts: We can determine the positions of the privatized elements of A in P A from the prefix sums of A w [1 : 12], e.g., the private version of A [5] is contained in P A <ref> [4] </ref> since the prefix sum value of A w [5] = 4 (see Figure 3). In general, on each access to a shared array element A [k], it must be determined whether or not A [k] has been privatized, e.g., by checking A w [k].
Reference: 5. <author> W. Blume and R. Eigenmann. </author> <title> Performance Analysis of Parallelizing Compilers on the Perfect Benchmarks T M Programs, </title> <journal> IEEE Trans. Parall. Dist. Sys., </journal> <volume> 3(6) </volume> <pages> 643-656, </pages> <year> 1992. </year>
Reference-contexts: We can determine the positions of the privatized elements of A in P A from the prefix sums of A w [1 : 12], e.g., the private version of A <ref> [5] </ref> is contained in P A [4] since the prefix sum value of A w [5] = 4 (see Figure 3). <p> We can determine the positions of the privatized elements of A in P A from the prefix sums of A w [1 : 12], e.g., the private version of A <ref> [5] </ref> is contained in P A [4] since the prefix sum value of A w [5] = 4 (see Figure 3). In general, on each access to a shared array element A [k], it must be determined whether or not A [k] has been privatized, e.g., by checking A w [k].
Reference: 6. <author> M. Burke, R. Cytron, J. Ferrante, and W. Hsieh, </author> <title> Automatic generation of nested, fork-join parallelism, </title> <editor> J. </editor> <booktitle> Supercomputing, </booktitle> <pages> pages 71-88, </pages> <year> 1989. </year>
Reference: 7. <author> W. J. Camp, S. J. Plimpton, B. A. Hendrickson, and R. W. Leland, </author> <title> Massively parallel methods for engineering and science problems, </title> <journal> Comm. ACM, </journal> <volume> 37(4) </volume> <pages> 31-41, </pages> <year> 1994. </year>
Reference: 8. <author> D. K. Chen, P. C. Yew, and J. Torrellas, </author> <title> An efficient algorithm for the run-time parallelization of doacross loops, </title> <type> manuscript, </type> <year> 1994. </year>
Reference: 9. <author> R. Eigenmann and W. Blume, </author> <title> An effectiveness study of parallelizing compiler techniques, </title> <booktitle> In Proc. 1991 Int'l. Conf. Parall. Proc., </booktitle> <pages> pages 17-25, </pages> <year> 1991. </year>
Reference: 10. <author> P. A. Emrath, S. Ghosh, and D. A. Padua, </author> <title> Detecting nondeterminacy in parallel programs, </title> <journal> IEEE Soft., </journal> <pages> pages 69-77, </pages> <year> 1992. </year>
Reference: 11. <author> M. Guzzi, D. Padua, J. Hoeflinger, and D. Lawrie, </author> <title> Cedar fortran and other vector and parallel fortran dialects, </title> <journal> J. Supercomputing, </journal> <volume> 4(1) </volume> <pages> 37-62, </pages> <year> 1990. </year>
Reference: 12. <author> V. Krothapalli and P. Sadayappan. </author> <title> An approach to synchronization of parallel computing, </title> <booktitle> In ACM Int'l. Conf. Supercomput., </booktitle> <pages> pages 573-581, </pages> <year> 1988. </year>
Reference: 13. <author> D. J. Kuck, R. H. Kuhn, D. A. Padua, B. Leasure, and M. Wolfe, </author> <title> Dependence graphs and compiler optimizations, </title> <booktitle> In Proc. 8th ACM Symp. Prin. Prog. Lang., </booktitle> <pages> pages 207-218, </pages> <year> 1981. </year>
Reference: 14. <author> F. Thomson Leighton, </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees, </title> <publisher> Hy-percubes, Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference: 15. <author> S. Leung and J. Zahorjan, </author> <title> Improving the performance of runtime parallelization, </title> <booktitle> In Proc. 4th ACM SigPlan Symp. Prin. Pract. Parall. Prog., </booktitle> <pages> pages 83-91, </pages> <year> 1993. </year>
Reference: 16. <author> Zhiyuan Li, </author> <title> Array privatization for parallel execution of loops, </title> <booktitle> In Proc. 19th Int'l. Symp. Comput. Arch., </booktitle> <pages> pages 313-322, </pages> <year> 1992. </year>
Reference: 17. <author> D. E. Maydan, S. P. Amarasinghe, and M. S. Lam, </author> <title> Data dependence and data-flow analysis of arrays, </title> <booktitle> In Proc. 5th Wk. </booktitle> <institution> Prog. Lang. Compil. Parall. Comput., </institution> <year> 1992. </year>
Reference: 18. <author> S. Midkiff and D. Padua, </author> <title> Compiler algorithms for synchronization, </title> <journal> IEEE Trans. Comput., </journal> <volume> 36(12) </volume> <pages> 1485-1495, </pages> <year> 1987. </year>
Reference: 19. <author> D. A. Padua and M. J. Wolfe, </author> <title> Advanced compiler optimizations for supercomputers, </title> <journal> Commun. ACM, </journal> <volume> 29 </volume> <pages> 1184-1201, </pages> <year> 1986. </year>
Reference: 20. <author> C. Polychronopoulos, </author> <title> Compiler Optimizations for Enhancing Parallelism and Their Impact on Architecture Design, </title> <journal> IEEE Trans. Comput., </journal> <volume> 37(8) </volume> <pages> 991-1004, </pages> <year> 1988. </year>
Reference: 21. <author> J. Saltz and R. Mirchandaney, </author> <title> The preprocessed doacross loop, </title> <booktitle> In Proc. 1991 Int'l. Conf. on Parall. Proc., </booktitle> <pages> pages 174-178, </pages> <year> 1991. </year>
Reference: 22. <author> J. Saltz, R. Mirchandaney, and K. Crowley, </author> <title> Run-time parallelization and scheduling of loops, </title> <journal> IEEE Trans. Comput., </journal> <volume> 40(5) </volume> <pages> 603-611, </pages> <year> 1991. </year>
Reference: 23. <author> E. Schonberg, </author> <title> On-the-fly detection of access anomalies, </title> <booktitle> In Proc. SigPlan Conf. Prog. Lang. Design and Implemen., </booktitle> <pages> pages 285-297, </pages> <year> 1989. </year>
Reference: 24. <author> J. E. Thornton, </author> <title> Design of a Computer: The Control Data 6600, </title> <type> Scott, </type> <institution> Foresman, Glenview, Illinois, </institution> <year> 1971. </year>
Reference: 25. <author> R. M. Tomasulo, </author> <title> An efficient algorithm for exploiting multiple arithmetic units, </title> <journal> IBM J. Res. Dev., </journal> <volume> 11 </volume> <pages> 25-33, </pages> <year> 1967. </year>
Reference: 26. <author> P. Tu and D. Padua, </author> <title> Array privatization for shared and distributed memory machines, </title> <booktitle> In Proc. 2nd Wk. Lang., Compil., Run-Time Envir. Distr. Mem. Mach., </booktitle> <year> 1992. </year>
Reference: 27. <author> P. Tu and D. Padua. </author> <title> Automatic array privatization, </title> <booktitle> In Proc. 6th Ann. </booktitle> <institution> Wk. Lang. Compil. Parall. Comput., </institution> <year> 1992. </year>
Reference: 28. <author> M. Wolfe, </author> <title> Optimizing Compilers for Supercomputers, </title> <publisher> The MIT Press, </publisher> <address> Boston, MA, </address> <year> 1989. </year>
Reference: 29. <author> C. Zhu and P. Yew, </author> <title> A scheme to enforce data dependence on large multiprocessor systems, </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 13(6) </volume> <pages> 726-739, </pages> <year> 1987. </year>
Reference: 30. <author> H. Zima, </author> <title> Supercompilers for Parallel and Vector Computers, </title> <publisher> ACM Press, </publisher> <address> New York, New York, </address> <year> 1991. </year> <journal> Fig. </journal> <volume> 5. Fig. 6. Fig. 7. Fig. 8. Fig. </volume> <pages> 9. </pages>
References-found: 30

