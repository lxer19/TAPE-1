URL: http://theory.lcs.mit.edu/~sivan/frontiers95.ps.gz
Refering-URL: http://theory.lcs.mit.edu/~sivan/papers.html
Root-URL: 
Address: McLean, VA, 1995.  
Affiliation: Computation,  
Note: To appear in the Proceedings of the 5th Symposium on the Frontiers of Massively Parallel  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D. Atapattu and D. Gannon. </author> <title> Building analytical models into an interactive performance prediction tool. </title> <booktitle> In Supercomputing '89, </booktitle> <pages> pages 521-530, </pages> <year> 1989. </year>
Reference-contexts: Our experience shows that a rather complex machine model is necessary for accurately predicting program performance on current parallel computers. * PERFSIM is an automatic profiling tool geared toward program tuning. While some researchers have used performance modeling for profiling (Atapattu and Gan-non <ref> [1] </ref> developed an interactive performance prediction tool for the Alliant FX/8), most have used it to guide data layouts decisions (Balasundaram et al. [2], Fahringer and Zima [5]), and for automatic selection of subroutine out of a set of subroutines with the same functionality (e.g. sorting) [4].
Reference: [2] <author> V. Balasundaram, G. Fox, K. Kennedy, and U. Kremer. </author> <title> A static performance estimator to guide partitioning decisions. </title> <booktitle> In Proceedings of the 3rd ACM Symposium on Principles and Practice of Parallel Programming, </booktitle> <pages> pages 213-223, </pages> <year> 1991. </year>
Reference-contexts: Much of the related research in performance modeling was done using simple machine models that proved sufficient on machines such as the Intel iPSC/860 [5] or the NCUBE <ref> [2] </ref>. Our experience shows that a rather complex machine model is necessary for accurately predicting program performance on current parallel computers. * PERFSIM is an automatic profiling tool geared toward program tuning. <p> While some researchers have used performance modeling for profiling (Atapattu and Gan-non [1] developed an interactive performance prediction tool for the Alliant FX/8), most have used it to guide data layouts decisions (Balasundaram et al. <ref> [2] </ref>, Fahringer and Zima [5]), and for automatic selection of subroutine out of a set of subroutines with the same functionality (e.g. sorting) [4]. Performance models have also been used for manual, rather than automatic, performance prediction [6, 8, 11].
Reference: [3] <author> G. E. Blelloch. </author> <title> Scan primitives and parallel vector models. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: We conclude the paper in Section 9 with a discussion of our results and of related work. 2 Analyzing Communication Operations This section describes our solution to the problem of estimating the running time of communication operations. There are several classes of communication operations in data-parallel languages <ref> [3] </ref> such as CM Fortran. Arrays can be permuted. They can be shifted along one of their axes. They can also be reduced to scalars as in summations. Finally, scans, or parallel prefix operations, can be computed.
Reference: [4] <author> E. A. Brewer. </author> <title> Portable high-performance supercomputing: High-level architecture-dependent optimization. </title> <type> PhD thesis proposal, </type> <institution> MIT, </institution> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: profiling (Atapattu and Gan-non [1] developed an interactive performance prediction tool for the Alliant FX/8), most have used it to guide data layouts decisions (Balasundaram et al. [2], Fahringer and Zima [5]), and for automatic selection of subroutine out of a set of subroutines with the same functionality (e.g. sorting) <ref> [4] </ref>. Performance models have also been used for manual, rather than automatic, performance prediction [6, 8, 11]. Acknowledgments Many people helped in this project, and I would like to thank them. Charles E.
Reference: [5] <author> T. Fahringer and H. P. Zima. </author> <title> A static parameter based performance prediction tool for parallel programs. </title> <booktitle> In Proceedings of the 7th ACM International Conference on Supercomputing, </booktitle> <month> July </month> <year> 1993. </year>
Reference-contexts: This approach is made possible by the separation of the control structure and the vector operations in the data-parallel programming model. Other performance analysis tools, especially those modeling Fortran 77 programs, are typically much more complex. Fahringer and Zima's PPPT <ref> [5] </ref> for example, which analyzes the entire program including its control structure, comprises of 25,000 lines of code, about ten times the number of source lines in PERFSIM. * PERFSIM uses a robust performance model, based on the hardware architecture and the system software's performance. <p> Much of the related research in performance modeling was done using simple machine models that proved sufficient on machines such as the Intel iPSC/860 <ref> [5] </ref> or the NCUBE [2]. Our experience shows that a rather complex machine model is necessary for accurately predicting program performance on current parallel computers. * PERFSIM is an automatic profiling tool geared toward program tuning. <p> While some researchers have used performance modeling for profiling (Atapattu and Gan-non [1] developed an interactive performance prediction tool for the Alliant FX/8), most have used it to guide data layouts decisions (Balasundaram et al. [2], Fahringer and Zima <ref> [5] </ref>), and for automatic selection of subroutine out of a set of subroutines with the same functionality (e.g. sorting) [4]. Performance models have also been used for manual, rather than automatic, performance prediction [6, 8, 11]. Acknowledgments Many people helped in this project, and I would like to thank them.
Reference: [6] <author> A. R. Hainline, S. R. Thompson, and L. L. Halcomb. </author> <title> Vector performance estimation for CRAY X-MP/Y-MP supercomputers. </title> <journal> Journal of Supercomputing, </journal> <volume> 6 </volume> <pages> 49-70, </pages> <year> 1992. </year>
Reference-contexts: Performance models have also been used for manual, rather than automatic, performance prediction <ref> [6, 8, 11] </ref>. Acknowledgments Many people helped in this project, and I would like to thank them. Charles E. Leiserson suggested that I implement PERFSIM and offered many suggestions about its operation, its user interface, and about this paper.
Reference: [7] <author> C. E. Leiserson et al. </author> <title> The network architecture of the Connection Machine CM-5. </title> <booktitle> In Proceedings of the 4th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 272-285, </pages> <year> 1992. </year>
Reference-contexts: bank attached to the same vector unit chip (two memory banks are attached to each vector unit chip). * Data transfer from one memory bank to another attached to another vector unit chip on the same node. * Data transfer from one node to another using the CM-5's data network <ref> [7] </ref>. * Data transfer from one node to another using the CM-5's control network. The control network supports specialized communication patterns such as reductions and broadcasts. The topology of the data network is a 4-ary tree, in which links at different levels of the tree have different capacities.
Reference: [8] <author> C. E. Leiserson and S. Toledo. </author> <title> Performance estimates for iterative relaxation algorithms on an enhanced CM-5. </title> <type> Manuscript, </type> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: Performance models have also been used for manual, rather than automatic, performance prediction <ref> [6, 8, 11] </ref>. Acknowledgments Many people helped in this project, and I would like to thank them. Charles E. Leiserson suggested that I implement PERFSIM and offered many suggestions about its operation, its user interface, and about this paper.
Reference: [9] <institution> Thinking Machines Corporation, </institution> <address> Cambridge, MA. </address> <note> CM Fortran Reference Manual, </note> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: Tuning a scientific program for large data sizes uses substantial supercomputer time when the actual results of the computation are of no interest. Moreover, it is just plain slow. This paper proposes a solution to this problem. We have written a tool, called PERFSIM, that analyzes CM Fortran 1 <ref> [9] </ref> fl This research was supported in part by the Advanced Research Projects Agency under Grants N00014-91-J-1698 and N00014-94-1-0985, and by Project SCOUT under ARPA contract MDA972-92-J-1032. 1 The current version of PERFSIM works with CM Fortran version 2.1 beta programs running on the Connection Machine CM-5 [10].
Reference: [10] <institution> Thinking Machines Corporation, </institution> <address> Cambridge, MA. </address> <booktitle> The Connection Machine CM-5 Technical Summary, </booktitle> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: CM Fortran 1 [9] fl This research was supported in part by the Advanced Research Projects Agency under Grants N00014-91-J-1698 and N00014-94-1-0985, and by Project SCOUT under ARPA contract MDA972-92-J-1032. 1 The current version of PERFSIM works with CM Fortran version 2.1 beta programs running on the Connection Machine CM-5 <ref> [10] </ref>. By combining execution of some parts of the program and analysis of other parts, PERFSIM can execute a program on a workstation and in seconds, generate performance data that would take several minutes or more to generate by running the program on an actual CM-5 2 .
Reference: [11] <author> S. R. Thompson, A. R. Hainline, and L. L. Halcomb. </author> <title> Vector performance estimation for CRAY X-MP/Y-MP supercomputers, part 2. </title> <journal> Journal of Supercomputing, </journal> <volume> 7 </volume> <pages> 437-467, </pages> <year> 1993. </year>
Reference-contexts: Performance models have also been used for manual, rather than automatic, performance prediction <ref> [6, 8, 11] </ref>. Acknowledgments Many people helped in this project, and I would like to thank them. Charles E. Leiserson suggested that I implement PERFSIM and offered many suggestions about its operation, its user interface, and about this paper.
References-found: 11

