URL: http://www.cs.brandeis.edu/~marty/dcc96.ps
Refering-URL: http://www.cs.brandeis.edu/~marty/
Root-URL: http://www.cs.brandeis.edu
Title: Parsing with Suffix and Prefix Dictionaries  
Author: Martin Cohn and Roger Khazan 
Address: Waltham, MA 02254, USA  
Affiliation: Computer Science Department Brandeis University  
Abstract: We show that greedy left-to-right (right-to-left) parsing is optimal w.r.t. a suffix (prefix) dictionary. To exploit this observation, we show how to construct a static suffix dictionary that supports on-line, linear-time optimal parsing. From this we derive an adaptive on-line method that yields com pression comparing favorably to LZW.
Abstract-found: 1
Intro-found: 1
Reference: [AhoC'75] <author> A.V. Aho and M.J. Corasick, </author> <title> "Efficient String Matching: an Aid to Bibliographic Search", </title> <journal> Comm. ACM 18(6) (1975) pp. </journal> <pages> 333-340. </pages>
Reference-contexts: It also facilitates the insertion of just the suffix of the new entry that is lacking in the dictionary. These properties are vital to ensure linear-time parsing. Our structure extends classical string-matching techniques <ref> [AhoC'75, KnuthMP'77] </ref>. The parsing algorithm differs from these classical string matching techniques in its use of dynamic insertion and in its application to parsing.
Reference: [De Agostino'94] <author> S. De Agostino, </author> <title> "Sub-Linear Algorithms and Complexity Issues for Lossless Data Compression", </title> <type> Master's Thesis, </type> <institution> Brandeis University, </institution> <month> (May </month> <year> 1994) </year>
Reference-contexts: For example, let the prefix dictionary D = f0; 1; 101g f10 i j1 i ng, and the input string 1010 n . Optimal parsing is 10; 10 n , while greedy parsing is 101; 0; 0; : : : ; 0. <ref> [De Agostino'94] </ref> This example is certainly contrived to behave badly; in our comparisons we use dictionaries generated by "more natural" means, namely LZ-family parsings.
Reference: [HartmanR'85] <author> A. Hartman and M. </author> <title> Rodeh "Optimal Parsing of Strings", Combinatorial Algorithms on Words, </title> <editor> Springer-Verlag (A. Apostolico and Z. Galil, editors), </editor> <month> 155-167. </month>
Reference: [KnuthMP'77] <author> D.E. Knuth, J.H. Morris, and V.R. Pratt, </author> <title> "Fast Pattern Matching in Strings", </title> <note> SIAM J. on Computing 6(2) (1977) pp. 323-350. </note>
Reference-contexts: It also facilitates the insertion of just the suffix of the new entry that is lacking in the dictionary. These properties are vital to ensure linear-time parsing. Our structure extends classical string-matching techniques <ref> [AhoC'75, KnuthMP'77] </ref>. The parsing algorithm differs from these classical string matching techniques in its use of dynamic insertion and in its application to parsing.
Reference: [LempelZ'76] <author> A. Lempel and J. </author> <title> Ziv "On the Complexity of Finite Sequences", </title> <journal> IEEE Transactions on Information Theory 22:1, </journal> <pages> 75-81. </pages>
Reference: [SeeryZ'77] <author> J. B. Seery and J. Ziv, </author> <title> "A Universal Data Compression Algorithm: Description and Preliminary Results", </title> <institution> 77-1212-6, Bell Laboratories, </institution> <address> Murray Hill, N.J. </address>
Reference-contexts: Unfortunately, this doesn't work, as can be seen from the input 010101..01. The dictionary begins with 0 and 1; it gains 01 and 101, but never anything else. The algorithm lacks "guaranteed progress" <ref> [SeeryZ'77] </ref> whereby a new dictionary entry is guaranteed at every parse. Here is a new algorithm that does guarantee progress and compares favorably with LZW: We assume that D contains all the symbols of .
Reference: [Wagner'73] <author> R. A. Wagner, </author> <title> "Common Phrases and Minimum-Space Text Storage", </title> <journal> Communications of the ACM 16:3, </journal> <pages> 148-152. </pages>
Reference-contexts: To put the following results in context, recall that optimal parsings relative to an arbitrary fixed dictionary can be found in time O (jxj 2 ) via dynamic programming, as first proposed in <ref> [Wagner'73] </ref>. It is an off-line algorithm that requires the entire input before beginning; it is the best, known result.
Reference: [Welch'84] <author> T. A. Welch, </author> <title> "A Technique for High-Performance Data Compression", </title> <booktitle> IEEE Computer 17:6, </booktitle> <pages> 8-19. </pages>
Reference-contexts: Greedy left-to-right parsing relative to D (which is not the same as the LZ parsing) consists of the five phrases 00; 1; 1; 011; 00: Greedy right-to-left parsing yields 0; 011; 011; 00; with four phrases. 3.2 LZW Dictionary A modified parsing and encoding was proposed by Welch <ref> [Welch'84] </ref> and forms the basis of UNIX compress, a constituent of pkzip and other compression packages.
Reference: [ZivL'78] <author> J. Ziv and A. Lempel, </author> <title> "Compression of Individual Sequences Via Variable-Rate Coding", </title> <journal> IEEE Transactions on Information Theory 24:5, </journal> <pages> 530-536. </pages>
References-found: 9

