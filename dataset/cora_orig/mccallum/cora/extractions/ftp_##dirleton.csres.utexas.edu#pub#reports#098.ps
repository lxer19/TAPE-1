URL: ftp://dirleton.csres.utexas.edu/pub/reports/098.ps
Refering-URL: http://www.cli.com/reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Formalization of a Subset of VHDL  
Author: David M. Russinoff 
Address: 1717 West Sixth Street, Suite 290 Austin, Texas 78703-4776  
Affiliation: Computational Logic, Inc.  
Pubnum: Technical Report  
Email: EMAIL: russ@cli.com  
Phone: TEL: +1 512 322 9951  
Date: 98 May 10, 1994  
Abstract: This work was sponsored in part at Computational Logic, Inc. by National Aeronautics and Space Administration Langley Research Center (NAS1-18878). The views and conclusions contained in this document are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc., NASA Langley Research Center or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Boyer, R. S. and Moore, J, </author> <title> A Computational Logic Handbook, </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: The design of our language is based on S-expressions, the data objects of LISP, which are defined in Section 2. This choice was motivated by our desire to support its analysis with the use of the Nqthm system of Boyer and Moore <ref> [1] </ref>. Nqthm is based on a constructive formal logic for which the intended model is the domain of S-expressions. Thus, there is a correspondence between the formulas of this logic and informal propositions about S-expressions. <p> All of the functions involved in the construction of our language, which we shall describe informally, meet the computability requirement for encoding as Nqthm definitions <ref> [1] </ref>. In fact, we have developed an Nqthm theory that formalizes these functions, including the module recognizers that form the syntax of the language, the interpreter that constitutes its semantics, and various procedures for deriving behavioral specifications of its programs.
Reference: [2] <institution> Institute of Electrical and Electronic Engineers, </institution> <note> Draft Standard VHDL Language Reference Manual, </note> <year> 1993. </year>
Reference-contexts: 1 Introduction The VHSIC Hardware Description Language <ref> [2] </ref> (VHDL) has gained wide acceptance as a tool for hardware design and simulation. However, the limitations of simulation as a method of design validation are well known. A formal verification system based on VHDL would therefore have clear practical value. <p> Since we are not concerned with syntactic issues, our language definition is based on an abstract syntax that is more amenable to direct formal analysis than that described in <ref> [2] </ref>. The correspondence between the two is given by a translator from our language to VHDL, which is described elsewhere [3]. Here, we concentrate on a mathematical treatment of the abstract language. <p> One further observation is warranted, however, in support of the claim that our language definition adheres to the VHDL standard <ref> [2] </ref>. There is an apparent discrepancy between the definition of sim and the standard: in our language, each output waveform of a behavioral module is updated whenever there is a change in any input value.
Reference: [3] <author> Kaufmann, M., </author> <title> A Translator from an HDL of David Russinoff to VHDL, Internal Note 278, Computational Logic, </title> <publisher> Inc., </publisher> <month> July </month> <year> 1993. </year>
Reference-contexts: Since we are not concerned with syntactic issues, our language definition is based on an abstract syntax that is more amenable to direct formal analysis than that described in [2]. The correspondence between the two is given by a translator from our language to VHDL, which is described elsewhere <ref> [3] </ref>. Here, we concentrate on a mathematical treatment of the abstract language. This begins in Section 3, where we present the notions of time and waveform, on which the semantics of the language are based. <p> At the time of this writing, significant progress has been made toward this objective; its completion remains a goal of our research. Another benefit of the Nqthm formalization is that it provides a basis for a LISP implementation of the translator from our language to VHDL <ref> [3] </ref>. This potentially allows commercial VHDL synthesis tools to be used to implement our programs in silicon. As another application of more immediate interest, we have actually executed the translations of many of our programs using the Vantage VHDL simulator.
Reference: [4] <author> Russinoff, D., </author> <title> Specification and Verification of Gate-Level VHDL Models of Synchronous and Asynchronous Circuits, </title> <type> forthcoming technical report, </type> <institution> Computational Logic, Inc. </institution>
Reference-contexts: In the simulation displayed in Figure 4, for example, the input is constant over the interval [20000; 40000), and hence the computed value of L is valid on the interval [32000; 44000). The generalization of this proposition to to arbitrary combinational circuits is straightforward <ref> [4] </ref>. Similar reasoning may be applied to state-holding (i.e., cyclic) circuits. An analysis of an interesting class of such circuits, based on the flip-flop dff of Section 5, may be found in [4]. Here we consider only the basic flip-flop itself. <p> The generalization of this proposition to to arbitrary combinational circuits is straightforward <ref> [4] </ref>. Similar reasoning may be applied to state-holding (i.e., cyclic) circuits. An analysis of an interesting class of such circuits, based on the flip-flop dff of Section 5, may be found in [4]. Here we consider only the basic flip-flop itself.
Reference: [5] <author> Taub, H. and Schilling, D., </author> <title> Digital Integrated Electronics, </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: Finally, as applications of these results, we derive behavioral specifications of several modules. Our proof methodology may be seen as a precise formulation of the informal reasoning that is commonly employed by hardware engineers in the analysis of circuits <ref> [5] </ref>. One consequence of our commitment to adhere to the VHDL standard is a faithful implementation of the "delta delay" mechanism, which provides for the 2 simulation of zero-delay devices. We note, however, that our exposition could be shortened significantly if we were to require all delays to be positive. <p> The behavior becomes erratic again during the cycle following the rising edge at 60 ns, because a change in D occurs too close to the edge. A precise specification of dff is given by the following. Its proof is an elaboration of the informal argument found in <ref> [5] </ref>: Proposition 7.2 Let p = (w CLK w D ) be an input packet for dff.
References-found: 5

