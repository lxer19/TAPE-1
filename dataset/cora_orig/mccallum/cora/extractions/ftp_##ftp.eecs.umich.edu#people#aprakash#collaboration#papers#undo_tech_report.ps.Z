URL: ftp://ftp.eecs.umich.edu/people/aprakash/collaboration/papers/undo_tech_report.ps.Z
Refering-URL: http://www.eecs.umich.edu/~aprakash/publications.html
Root-URL: http://www.cs.umich.edu
Title: Nothing relevant. nothing relevant  
Abstract-found: 0
Intro-found: 1
Reference: [CSMIL89,91] <institution> Cognitive Science and Machine Intelligence Laboratory, </institution> <month> "ShrEdit, </month> <title> A Multi-user Shared Text Editor: User Manual," </title> <booktitle> The University of Michi-gan, 1989 and 1991. </booktitle> <pages> 13 </pages>
Reference-contexts: This ability is particularly valuable in collaborative applications, but it is technically much more difficult to implement than in a single-user system. Numerous collaborative editors and other group applications have been constructed, such as GROVE [Elli90], ShrEdit <ref> [CSMIL89,91] </ref>, and DistEdit [Knis90], but most lack undo capabilities. Those which provide undo generally provide only a global undo, in which the last change made by anyone to a document is undone, rather than allowing users to individually reverse their own changes.
Reference: [Elli89] <author> C.A. Ellis and S.J. Gibbs, </author> <title> "Concurrency Con--trol in Groupware Systems", </title> <booktitle> Proceedings of the ACM SIGMOD '89 Conference on the Management of Data, </booktitle> <address> Seattle, Washington, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: As we will see, operation A will usually be identical to A 0 , and B to B 0 , except that the position data may be different. Our notion of transpose is similar to the one described in <ref> [Elli89] </ref>. However, we require transpose function to be defined only when the operations do not conflict. 4.3.3 Some useful properties As stated earlier, an Inverse (Operation) function must also be supplied by the application. Inverse returns a new operation which can nullify the effects of its argument. <p> The collection of operations that are used to undo need to be treated as a high-level operation. 3. Do-undo pointers need to go between corresponding operations, which could be high-level. Transaction processing may lead to inefficiencies in a group environment because it hinders tight interactions 12 between users <ref> [Elli91, Elli89] </ref>. However, for a multi--operation undo, it is highly desirable to ensure atomic-ity, perhaps through use of locks, so that an undo has a predictable effect.
Reference: [Elli90] <author> C.A. Ellis, S.J. Gibbs, and G.L. Rein, </author> <title> "Design and Use of a Group Editor," in Engineering for Human-Computer Interaction, </title> <editor> G. Cockton, Ed., </editor> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990, </year> <pages> pp. 13-25. </pages>
Reference-contexts: This ability is particularly valuable in collaborative applications, but it is technically much more difficult to implement than in a single-user system. Numerous collaborative editors and other group applications have been constructed, such as GROVE <ref> [Elli90] </ref>, ShrEdit [CSMIL89,91], and DistEdit [Knis90], but most lack undo capabilities. Those which provide undo generally provide only a global undo, in which the last change made by anyone to a document is undone, rather than allowing users to individually reverse their own changes.
Reference: [Elli91] <author> C.A. Ellis, S.J. Gibbs, and G.L. Rein, "Group-ware: </author> <title> Some Issues and Experiences", </title> <journal> Communications of the ACM, </journal> <month> January </month> <year> 1991, </year> <pages> pp. 38-58. </pages>
Reference-contexts: The collection of operations that are used to undo need to be treated as a high-level operation. 3. Do-undo pointers need to go between corresponding operations, which could be high-level. Transaction processing may lead to inefficiencies in a group environment because it hinders tight interactions 12 between users <ref> [Elli91, Elli89] </ref>. However, for a multi--operation undo, it is highly desirable to ensure atomic-ity, perhaps through use of locks, so that an undo has a predictable effect. <p> When a program replicates data, it must provide a means of concurrency control which ensures that all copies of the document are the same (or nearly so, within some bounds). This generally involves broadcasting operations to all users in combination with some form of locking or re-sequencing. <ref> [Elli91] </ref> discusses various approaches to concurrency control which vary in their response time, flexibility, and consistency guarantees.
Reference: [FSF85] <author> R. Stallman, </author> <title> GNU Emacs Manual, </title> <year> 1985. </year>
Reference-contexts: Also, neither model addresses the problem of conflicts that redoing some operations may not semantically make sense if an earlier operation is skipped. 2.3 History undo In the history undo scheme, one can undo any number (to some limit) of past actions in a row. The GNU Emacs editor <ref> [FSF85] </ref> supports history undo. Once a user stops undoing his work (by doing something other than an undo, e.g., inserting a character), the undone actions become like any other actions they can be subsequently undone if desired.
Reference: [Knis90] <author> M. Knister and A. Prakash, "DistEdit: </author> <title> A Distributed Toolkit for Supporting Multiple Group Editors", </title> <booktitle> Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <address> Los Ange-les, California, </address> <month> October </month> <year> 1990, </year> <pages> pp. 343-355. </pages>
Reference-contexts: This ability is particularly valuable in collaborative applications, but it is technically much more difficult to implement than in a single-user system. Numerous collaborative editors and other group applications have been constructed, such as GROVE [Elli90], ShrEdit [CSMIL89,91], and DistEdit <ref> [Knis90] </ref>, but most lack undo capabilities. Those which provide undo generally provide only a global undo, in which the last change made by anyone to a document is undone, rather than allowing users to individually reverse their own changes. <p> The techniques proposed in this paper are presently being implemented in DistEdit toolkit <ref> [Knis90] </ref>. Hopefully, the framework and prototype will lead to behavioral science work exploring the right interfaces for carrying out undo operations in collaborative applications.
Reference: [Teit78] <author> W. Teitelman, </author> <title> Interlisp Reference Manual, </title> <institution> Xe-rox Palo Alto Research Center, </institution> <year> 1978. </year>
Reference-contexts: Usually redo of last undo is also allowed (often implemented as an undo of the last undo) so that, in the above example, E can be redone. 2.2 Linear undo model and US&R model The Interlisp system <ref> [Teit78] </ref>, one of the early systems to provide undo, used the linear undo model. The linear undo model allows undoing of a sequence of operations and keeps a pointer which tracks the last operation undone. Operations can then be redone, after possibly doing some new operations.
Reference: [Vitt84] <author> J.S. Vitter, "US&R: </author> <title> A New Framework for Redoing", </title> <journal> IEEE Software, </journal> <month> October </month> <year> 1984, </year> <pages> pp. 39-52. 14 </pages>
Reference-contexts: So, if one wants to back to the original sequence without the F , it is not possible. One could undo F , but then D and E must be done manually. The Undo, Skip, Redo (US&R) model <ref> [Vitt84] </ref> supports redo like the linear undo model, but also allows a more user-friendly skipping of some operations during the redo.
References-found: 8

