URL: http://www.cs.wisc.edu/~suan/Projects/DIRT/proposal.ps.gz
Refering-URL: http://www.cs.wisc.edu/~suan/Projects/DIRT/
Root-URL: 
Title: Proposal: Distributed Requests for Tuples (DIRT) in Linda  
Author: Douglas Thain Suan Yong 
Date: February 26, 1998  
Abstract: We propose an algorithm for a scalable Linda system on an internet. A tree topology encourages locality. Tuples reside where they are created, while requests are widely replicated. Many schemes for relocating tuples to enhance performance are considered.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Carriero and D. Gelernter: </author> <title> The S/Net's Linda Kernel, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 4 No. </volume> <month> 2 (May </month> <year> 1986), </year> <pages> pp. 110-129. </pages>
Reference-contexts: 1 Introduction Early implementations of Linda systems <ref> [1] </ref> copy all new tuples to every node in the system. This is effective for a local bus or a small broadcast network, but requires per-node storage to grow linearly with the number of tuples in a system.
Reference: [2] <author> O. Thomas: </author> <title> A Linda Kernel for Unix Networks, Linda-Like Systems and Their Implementation, Edinburgh Parallel Computing Centre, </title> <type> Technical Report 91-13, </type> <year> 1991. </year>
Reference-contexts: While development will be on the Solaris platform, the goal is to write code that is portable. We will express the Linda primitives in ANSI C <ref> [2] </ref>, so no special compiler will be necessary. To concentrate on aspects of distribution, we will 3 only support fundamental types and arrays. For testing purposes, the CS instructional SPARCs (sol and vega) will be used.
Reference: [3] <author> C. Callsen, I. Cheng, P. Hagen: </author> <title> The AUC C++ Linda System, Edinburgh Parallel Computing Centre, </title> <type> Technical Report 91-13, </type> <year> 1991. </year> <month> 5 </month>
Reference-contexts: Some applications of Linda, such as parallel matrix computations, create large numbers of tuples with the same name. Other applications, such as file servers, could create many tuples with unique names. Because of this dichotomy, we reject tuple names as a method for distributing load. <ref> [3] </ref> If many nodes create tuples, the data is automatically widely distributed.
References-found: 3

