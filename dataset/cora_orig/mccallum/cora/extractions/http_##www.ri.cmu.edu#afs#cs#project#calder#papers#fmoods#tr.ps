URL: http://www.ri.cmu.edu/afs/cs/project/calder/papers/fmoods/tr.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs/project/calder/www/fmoods.html
Root-URL: 
Title: Subtyping for Distributed Object Stores (Extended Abstract)  Formal Methods for Open Object-based Distributed Systems  
Author: Jeannette M. Wing 
Note: This extended abstract will appear in the Proceedings of the Second IFIP International Workshop on  
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: April 1997  July 1997.  
Pubnum: CMU-CS-97-121  (FMOODS),  
Abstract: I review the Liskov and Wing subtype definition that takes into consideration the problem of subtyping in the presence of mutable objects. I then show how this notion of subtyping is relevant to the design of the TOM object repository whose main application today is a data type conversion service accesssible through the Web. This research is sponsored in part by the Defense Advanced Research Projects Agency and the Wright Laboratory, Aeronautical Systems Center, Air Force Materiel Command, USAF, F33615-93-1-1330, and Rome Laboratory, Air Force Materiel Command, USAF, under agreement number F30602-97-2-0031 and in part by the National Science Foundation under Grant No. CCR-9523972. The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright annotation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the Defense Advanced Research Projects Agency Rome Laboratory or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Pierre America. </author> <title> A parallel object-oriented language with inheritance and subtyping. </title> <journal> SIGPLAN, </journal> <volume> 25(10) </volume> <pages> 161-168, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: The inclusion of the type constraint is what distinguishes the Liskov and Wing work from all others (e.g., America <ref> [1] </ref>, Cusack [3], Leavens [4, 7]) that also include some kind of behavioral information. To foreshadow what is coming in the next section: Not only must a supertype's type invariant and methods be preserved by the subtype's, but so must its type constraint.
Reference: [2] <author> Luca Cardelli. </author> <title> A semantics of multiple inheritance. </title> <journal> Information and Computation, </journal> <volume> 76 </volume> <pages> 138-164, </pages> <year> 1988. </year>
Reference-contexts: none are shown in Fig. 2.) The inclusion of pre- and post-conditions in the specification of a type's methods allows us to relate the two types' behaviors; this is the main difference between the Liskov and Wing definition of subtyping and those that rely on just signature information (e.g., Cardelli <ref> [2] </ref>). For example, two methods with the same signature (e.g., get and card for bags) may have dramatically different behavior.
Reference: [3] <author> Elspeth Cusack. </author> <title> Inheritance in object oriented Z. </title> <booktitle> In Proceedings of ECOOP '91. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The inclusion of the type constraint is what distinguishes the Liskov and Wing work from all others (e.g., America [1], Cusack <ref> [3] </ref>, Leavens [4, 7]) that also include some kind of behavioral information. To foreshadow what is coming in the next section: Not only must a supertype's type invariant and methods be preserved by the subtype's, but so must its type constraint.
Reference: [4] <author> Krishna Kishore Dhara and Gary T. Leavens. </author> <title> Subtyping for mutable types in object-oriented programming languages. </title> <type> Technical Report 92-36, </type> <institution> Department of Computer Science, Iowa State University, Ames, Iowa, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: The inclusion of the type constraint is what distinguishes the Liskov and Wing work from all others (e.g., America [1], Cusack [3], Leavens <ref> [4, 7] </ref>) that also include some kind of behavioral information. To foreshadow what is coming in the next section: Not only must a supertype's type invariant and methods be preserved by the subtype's, but so must its type constraint.
Reference: [5] <author> S.J. Garland and J.V. Guttag. </author> <title> An overview of LP, the Larch Prover. </title> <booktitle> In Proceedings of the Third International Conference on Rewriting Techniques and Applications, </booktitle> <pages> pages 137-151, </pages> <address> Chapel Hill, NC, </address> <month> April </month> <year> 1989. </year> <note> Lecture Notes in Computer Science 355. 8 </note>
Reference-contexts: To the spirit of the theme of this workshop, I give formal specifications, written in the style of Larch [6], but I could just as easily have written informal specifications. Since these specifications are formal we can do formal proofs, possibly with machine assistance like with the Larch Prover <ref> [5] </ref>, to show that a subtype relation holds [10]. The BBag Larch Shared Language trait and the invariant clause together describe the set of values over which bag objects can range. The requires, modifies, and ensures clauses specify the methods' pre- and post-conditions. The constraint clause specifies the type constraint.
Reference: [6] <author> J.J. Horning, J.V. with S.J. Garland Guttag, K.D. Jones, A. Modet, and J.M. Wing. </author> <title> Larch : Languages and Tools for Formal Specification. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: Its behavior in terms of pre-conditions and post-conditions. * A type constraint. Fig. 2 gives an example of a type specification for bounded bags. To the spirit of the theme of this workshop, I give formal specifications, written in the style of Larch <ref> [6] </ref>, but I could just as easily have written informal specifications. Since these specifications are formal we can do formal proofs, possibly with machine assistance like with the Larch Prover [5], to show that a subtype relation holds [10].
Reference: [7] <author> Gary T. Leavens and Krishna Kishore Dhara. </author> <title> A foundation for the model theory of abstract data types with mutation and aliasing (preliminary version). </title> <type> Technical Report 92-35, </type> <institution> Department of Computer Science, Iowa State University, Ames, Iowa, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: The inclusion of the type constraint is what distinguishes the Liskov and Wing work from all others (e.g., America [1], Cusack [3], Leavens <ref> [4, 7] </ref>) that also include some kind of behavioral information. To foreshadow what is coming in the next section: Not only must a supertype's type invariant and methods be preserved by the subtype's, but so must its type constraint.
Reference: [8] <author> Barbara Liskov and Jeannette M. Wing. </author> <title> A behavioral notion of subtyping. </title> <journal> ACM TOPLAS, </journal> <volume> 16(6) </volume> <pages> 1811-1841, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: The property users rely on for fat sets is that they only grow and never shrink in size; the property users rely on for plain elephants is that their color is always gray. In their 1994 TOPLAS paper "A Behavioral Notion of Subtyping" Liskov and Wing <ref> [8] </ref> addressed the problem of what subtyping means, especially in the presence of shared mutable objects. They provide two alternative definitions in their paper. In this extended abstract, I summarize only one of these definitions, to highlight their main points.
Reference: [9] <author> John Ockerbloom. </author> <title> Exploiting structured data in wide-area information systems. </title> <type> Technical Report CMU-CS-95-184, </type> <institution> Carnegie Mellon Computer Science Department, </institution> <address> Pittsburgh, PA, </address> <year> 1995. </year>
Reference-contexts: Before I explain these seemingly inconsistent statements, I describe the object repository's functionality. As part of his Ph.D. thesis, John Ockerbloom invented a Typed Object Model <ref> [9] </ref>, a data model involving objects, types, and their associated metadata. He implemented an instance of this model, a TOM server, which currently supports the ability for users in a distributed environment to store data types and data conversion functions, to register new ones, and to find existing ones.
Reference: [10] <author> Amy M. Zaremski. </author> <title> Signature and specification matching. </title> <type> Technical Report CS-CMU-96-103, </type> <institution> CMU Computer Science Department, </institution> <month> January </month> <year> 1996. </year> <type> Ph.D. thesis. 9 </type>
Reference-contexts: Since these specifications are formal we can do formal proofs, possibly with machine assistance like with the Larch Prover [5], to show that a subtype relation holds <ref> [10] </ref>. The BBag Larch Shared Language trait and the invariant clause together describe the set of values over which bag objects can range. The requires, modifies, and ensures clauses specify the methods' pre- and post-conditions. The constraint clause specifies the type constraint.
References-found: 10

