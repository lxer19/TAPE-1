URL: http://ptolemy.eecs.berkeley.edu/papers/C++atWork.ps.Z
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/publications.html/pubs_1991.html
Root-URL: 
Title: Ptolemy: A Mixed-Paradigm Simulation/Prototyping Platform in C++  
Author: Joseph Buck, Soonhoi Ha, Edward A. Lee, and David G. Messerschmitt 
Address: Berkeley, CA 94720  
Affiliation: Dept. of Electrical Engineering and Computer Science University of California  
Date: September 6, 1991  
Abstract: Ptolemy is a flexible and extensible platform for simulations, rapid prototyping, and other software systems. It is our third generation software environment, building on our experience with Blosim, a signal processing simulation system, and Gabriel, a prototyping environment for real-time signal processing. Unlike its predecessors, Ptolemy does not enforce a single simulation or execution model; it supports mixed hardware and software designs, mixed-mode system descriptions, and mixed prototyping methodologies. The objectives, design, current status, and future directions of the Ptolemy project are summarized in this paper. The use of certain features of the C++ language to make it easier to design a flexible, extensible system is discussed. We also describe our experiences in developing a 150K line (and growing) system in C++, discussing what worked well, what didn't and lessons learned. 
Abstract-found: 1
Intro-found: 1
Reference: [Car91] <author> T. A. Cargill, </author> <title> "Controversy: The Case Against Multiple Inheritance in C++", </title> <journal> Computing Systems, </journal> <volume> vol 4, #1, </volume> <month> Winter </month> <year> 1991. </year>
Reference-contexts: COMMENTS ON OUR EXPERIENCE WITH C++ In this section we discuss our experience with the C++ language and how we dealt with several issues that are controversial in the C++ community (as judged primarily be discussion in the Usenet newsgroup comp.lang.c++ and in papers such as <ref> [Car91] </ref>). When the Ptolemy project began, none of us had any experience with an object-oriented programming language. <p> The other uses of pointer casts in Ptolemy are primarily in container classes; we anticipate rewriting such classes to use templates when they become more commonly available. We have done our best to use multiple inheritance as little as possible. We do not take a position as extreme as <ref> [Car91] </ref>; however, our early attempts to use multiple inheritance with virtual base classes convinced us that virtual base classes, at least, are to be avoided where possible, and, at least in our code, it has always been possible to do so.
Reference: [Dor90] <author> S. M. Dorward, R. Sethi, J. E. Shapiro, </author> <title> "Adding New Code to a Running C++ Program", </title> <booktitle> Usenix C++ Conference Proceedings, </booktitle> <month> Apr. </month> <year> 1990. </year>
Reference-contexts: This scheme is similar to the system described in <ref> [Dor90] </ref>, though it was developed independently. The exact code required to call the global constructors in an object file is implementation-specific, but the general procedure is almost identical in, for example, g++ and compilers derived from AT&T's cfront.
Reference: [Ell90] <author> M. A. Ellis, B. Stroustrup, </author> <title> The Annotated C++ Reference Manual, </title> <publisher> Addison Wesley, </publisher> <year> 1990. </year>
Reference-contexts: This has been invaluable in producing an accurate, up-to-date manual for the system. Still, we were disappointed that the template proposal of <ref> [Ell90] </ref> is not powerful enough to generate the clone method as discussed above. Because objects are created by a method that returns nothing but a pointer to Block, and because entirely new classes can be created by incremental linking, it is clearly not possible to do all type-checking at runtime.
Reference: [Fab] <author> L. James Faber, </author> <month> "Capsim", </month> <institution> ECE Dept., North Carolina State University, </institution> <address> Raleigh, NC 27695. </address>
Reference-contexts: The MQ domain is another experimental domain under development targeted at software control applications, such as telephone switching call-processing software. In addition to these general-purpose domains, the capability to create domains out of previously-existing simulation systems has been demonstrated with the Capsim domain (incorporating the Capsim signal processing system <ref> [Fab] </ref> that is based on Blosim) and the Thor domain (incorporating the Thor hardware timing simulator [Thor]). 1.3. Design Goals Ptolemy is motivated by the increasingly important role of high-level system design, the increasing proliferation of simulation platforms and computational models, and the increasing need to combine these computational models.
Reference: [Har89] <author> D. Harrison, </author> <title> "VEM Graphics Environment for Oct Designs", in Oct Tools Distribution 3.0, </title> <institution> (R. Spickelmier, ed.), Electronics Research Laboratory, UC Berkeley, </institution> <year> 1989. </year>
Reference-contexts: Ptolemy provides two very different user interfaces, a text-based interpreter that accepts a Lisp-like language, and a graphical interface based on VEM, the graphic editor that is part of Berkeley's Octtools CAD system <ref> [Har89] </ref>. The interpreter is implemented as a class and is clean enough to embed in other programs. The graphic interface, on the other hand, was ported from the Gabriel system [Lee89] and is quite a bit harder to maintain.
Reference: [Lee87a] <author> E. A. Lee and D. G. Messerschmitt, </author> <title> "Static Scheduling of Synchronous Data Flow Programs for Digital Signal Processing", </title> <journal> IEEE Trans. on Computers, </journal> <month> January </month> <year> 1987, </year> <month> C-36(2). </month>
Reference-contexts: In DDF, blocks consume generate data sporadically in data-dependent fashion, and the order of block invocation is in accordance with data precedence relationships. The DDF does not attempt to model the relative timing relationship of block invoca tions. g Synchronous dataflow (SDF) <ref> [Lee87a] </ref> is an appropriate model for signal processing systems with rationally-related sampling rates throughout, and is the model used exclusively in the predecessor system Gabriel [Lee89a]. In SDF, blocks consume and generate a static and known number of data tokens on each invocation.
Reference: [Lee89a] <author> E. A. Lee, W.-H. Ho, E. Goei, J. Bier, and S. Bhattacharyya, "Gabriel: </author> <title> A Design Environment for DSP", </title> <journal> IEEE Trans. on Acoustics, Speech, and Signal Processing, </journal> <month> Nov., </month> <year> 1989. </year>
Reference-contexts: The DDF does not attempt to model the relative timing relationship of block invoca tions. g Synchronous dataflow (SDF) [Lee87a] is an appropriate model for signal processing systems with rationally-related sampling rates throughout, and is the model used exclusively in the predecessor system Gabriel <ref> [Lee89a] </ref>. In SDF, blocks consume and generate a static and known number of data tokens on each invocation.
Reference: [Mes84a] <author> D.G. Messerschmitt, </author> <title> "A Tool for Structured Functional Simulation", </title> <journal> IEEE Transactions on Selected Areas in Communications, </journal> <month> Jan. </month> <year> 1984. </year>
Reference: [Mes84b] <author> D. G. Messerschmitt, </author> <title> "Structured Interconnection of Signal Processing Programs" Proceedings of Globecom 84, </title> <address> Atlanta, GA, </address> <month> Dec., </month> <year> 1984. </year>
Reference: [Str86] <author> B. Stroustrup, </author> <title> The C++ Programming Language, </title> <publisher> Addison Wesley, </publisher> <year> 1986. </year>
Reference-contexts: In fact, C++, or ``C with classes'', as the first 2 version of the language was called, was first used in discrete-event simulation <ref> [Str86] </ref>. While a language such as Smalltalk or an object-oriented Lisp could have been used, we were interested in computational efficiency and also in the clean integration of signal processing algorithms and other code written in C, so these considerations narrowed down the choice of languages to C++ and Objective-C.
Reference: [Str91] <author> B. Stroustrup, </author> <title> The C++ Programming Language, Second Edition, </title> <publisher> Addison Wesley, </publisher> <year> 1991. </year> <title> [Thor] "Thor User's Guide", </title> <publisher> XCAD Corporation, </publisher> <year> 1989. </year>
Reference-contexts: We therefore welcome Stroustrup's proposal for ptr_cast and ref_cast in section 13.5 of <ref> [Str91] </ref>, which, if accepted by the C++ community, provides a safer way of solving this problem. The other uses of pointer casts in Ptolemy are primarily in container classes; we anticipate rewriting such classes to use templates when they become more commonly available.
References-found: 11

