URL: ftp://ftp.mcs.anl.gov/pub/nexus/reports/hpdc97_mds.ps.Z
Refering-URL: http://www.cs.washington.edu/homes/tom/590AT.html
Root-URL: 
Email: http://www.globus.org/  
Title: A Directory Service for Configuring High-Performance Distributed Computations  
Author: Steven Fitzgerald, Ian Foster, Carl Kesselman, Gregor von Laszewski, Warren Smith, Steven Tuecke 
Abstract: High-performance execution in distributed computing environments often requires careful selection and configuration not only of computers, networks, and other resources but also of the protocols and algorithms used by applications. Selection and configuration in turn require access to accurate, up-to-date information on the structure and state of available resources. Unfortunately, no standard mechanism exists for organizing or accessing such information. Consequently, different tools and applications adopt ad hoc mechanisms, or they compromise their portability and performance by using default configurations. We propose a solution to this problem: a Metacomputing Directory Service that provides efficient and scalable access to diverse, dynamic, and distributed information about resource structure and state. We define an extensible data model to represent the information required for distributed computing, and we present a scalable, high-performance, distributed implementation. The data representation and application programming interface are adopted from the Lightweight Directory Access Protocol; the data model and implementation are new. We use the example of the Globus distributed computing toolkit to illustrate how the availability of such a directory service enables the development of more flexible and efficient distributed computing services and applications.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Abramson, R. Sosic, J. Giddy, and B. Hall. Nimrod: </author> <title> A tool for performing parameterised simulations using distributed workstations. </title> <booktitle> In Proc. 4th IEEE Symp. on High Performance Distributed Computing. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: We expect these techniques to be equally useful in other systems that support computing in distributed environments, such as Legion [11], NetSolve [4], Condor [15], Nimrod <ref> [1] </ref>, PRM [16], AppLeS [2], and heterogeneous implementations of MPI [12].
Reference: [2] <author> F. Berman, R. Wolski, S. Figueira, J. Schopf, and G. Shao. </author> <title> Application-level scheduling on distributed heterogeneous networks. </title> <booktitle> In Proceedings of Supercomputing '96. </booktitle> <publisher> ACM Press, </publisher> <year> 1996. </year>
Reference-contexts: We expect these techniques to be equally useful in other systems that support computing in distributed environments, such as Legion [11], NetSolve [4], Condor [15], Nimrod [1], PRM [16], AppLeS <ref> [2] </ref>, and heterogeneous implementations of MPI [12].
Reference: [3] <author> R. Butler and E. Lusk. </author> <title> Monitors, message, and clusters: The p4 parallel programming system. </title> <journal> Parallel Computing, </journal> <volume> 20 </volume> <pages> 547-564, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Furthermore, SNMP does not define an API, thus preventing its use as a component within other software architectures. High-performance computing systems such as PVM [10], p4 <ref> [3] </ref>, and MPICH [12] provide rapid access to configuration data by placing this data (e.g., machine names, network interfaces) into files maintained by the programmer, called "hostfiles." However, lack of support for remote access means that hostfiles must be replicated at each host, complicating maintenance and dynamic update.
Reference: [4] <author> Henri Casanova and Jack Dongarra. Netsolve: </author> <title> A network server for solving computational science problems. </title> <type> Technical Report CS-95-313, </type> <institution> University of Tennessee, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: Finally, we use examples from the Globus distributed computing toolkit [8] to show how MDS data can be used to guide configuration decisions with realistic settings. We expect these techniques to be equally useful in other systems that support computing in distributed environments, such as Legion [11], NetSolve <ref> [4] </ref>, Condor [15], Nimrod [1], PRM [16], AppLeS [2], and heterogeneous implementations of MPI [12].
Reference: [5] <author> T. DeFanti, I. Foster, M. Papka, R. Stevens, and T. Kuhfuss. </author> <title> Overview of the I-WAY: Wide area visual supercomputing. </title> <journal> International Journal of Supercomputer Applications, </journal> <volume> 10(2) </volume> <pages> 123-130, </pages> <year> 1996. </year>
Reference-contexts: An example from the I-WAY networking experiment illustrates some of the difficulties associated with the configuration of high-performance distributed systems. The I-WAY was composed of massively parallel computers, workstations, archival storage systems, and visualization devices <ref> [5] </ref>. These fl Information Sciences Institute, University of Southern California, Marina del Rey, CA 90292 y Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, IL 60439 1 resources were interconnected by both the Internet and a dedicated 155 Mb/sec IP over ATM net-work.
Reference: [6] <author> I. Foster, J. Geisler, C. Kesselman, and S. Tuecke. </author> <title> Managing multiple communication methods in high-performance networked computing systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <note> 1997. To appear. 14 </note>
Reference-contexts: At run-time, the Nexus implementation configures a communication structure for the application, selecting for each communication link (a Nexus construct) the communication method that is to be used for communications over that link <ref> [6] </ref>. In making this selection for a particular pair of processors, Nexus first uses MDS information to determine which low-level mechanisms are available between the processors.
Reference: [7] <author> I. Foster, J. Geisler, W. Nickless, W. Smith, and S. Tuecke. </author> <title> Software infrastructure for the I--WAY high-performance distributed computing experiment. </title> <booktitle> In Proc. 5th IEEE Symp. on High Performance Distributed Computing, </booktitle> <pages> pages 562-571. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: on a virtual machine connecting IBM SP and SGI Challenge computers with both ATM and Internet networks, Nexus used three different protocols (IBM proprietary MPL on the SP, shared-memory on the Challenge, and TCP/IP or AAL5 between computers) and selected either ATM or Internet network interfaces, depending on network status <ref> [7] </ref>. Another application for MDS information that we are investigating is resource location [20]. A "resource broker" is basically a process that supports specialized searches against MDS information.
Reference: [8] <author> I. Foster and C. Kesselman. Globus: </author> <title> A metacomputing infrastructure toolkit. </title> <journal> International Journal of Supercomputer Applications, </journal> <note> 1997. to appear. </note>
Reference-contexts: We also present novel implementation techniques for this service that address the unique requirements of high-performance applications. Finally, we use examples from the Globus distributed computing toolkit <ref> [8] </ref> to show how MDS data can be used to guide configuration decisions with realistic settings. <p> We focus on applications within Globus, an infrastructure toolkit providing a suite of low-level mechanisms designed to be used to implement a range of higher-level services <ref> [8] </ref>. These mechanisms include communication, authentication, resource location, resource allocation, process management, and (in the form of MDS) information infrastructure. The Globus toolkit is designed with the configuration problem in mind.
Reference: [9] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> The Nexus approach to integrating multithreading and communication. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 37 </volume> <pages> 70-82, </pages> <year> 1996. </year>
Reference-contexts: As an example, we consider the problem referred to earlier of selecting network interfaces and communication protocols when executing communication code within a heterogeneous network. The Globus communication module (a library called Nexus <ref> [9] </ref>) allows a user to specify an application's communication operations by using a single notation, regardless of the target platform: either the Nexus API or some library or language layered on top of that API.
Reference: [10] <author> A. Geist, A. Beguelin, J. Dongarra, W. Jiang, B. Manchek, and V. Sunderam. </author> <title> PVM: Parallel Virtual Machine|A User's Guide and Tutorial for Network Parallel Computing. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Furthermore, SNMP does not define an API, thus preventing its use as a component within other software architectures. High-performance computing systems such as PVM <ref> [10] </ref>, p4 [3], and MPICH [12] provide rapid access to configuration data by placing this data (e.g., machine names, network interfaces) into files maintained by the programmer, called "hostfiles." However, lack of support for remote access means that hostfiles must be replicated at each host, complicating maintenance and dynamic update.
Reference: [11] <author> A. Grimshaw, J. Weissman, E. West, and E. Lyot, Jr. Metasystems: </author> <title> An approach combining parallel processing and heterogeneous distributed computing systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 21(3) </volume> <pages> 257-270, </pages> <year> 1994. </year>
Reference-contexts: Finally, we use examples from the Globus distributed computing toolkit [8] to show how MDS data can be used to guide configuration decisions with realistic settings. We expect these techniques to be equally useful in other systems that support computing in distributed environments, such as Legion <ref> [11] </ref>, NetSolve [4], Condor [15], Nimrod [1], PRM [16], AppLeS [2], and heterogeneous implementations of MPI [12].
Reference: [12] <author> W. Gropp, E. Lusk, N. Doss, and A. Skjellum. </author> <title> A high-performance, portable implementation of the MPI message passing interface standard. </title> <journal> Parallel Computing, </journal> <volume> 22 </volume> <pages> 789-828, </pages> <year> 1996. </year>
Reference-contexts: We expect these techniques to be equally useful in other systems that support computing in distributed environments, such as Legion [11], NetSolve [4], Condor [15], Nimrod [1], PRM [16], AppLeS [2], and heterogeneous implementations of MPI <ref> [12] </ref>. <p> Furthermore, SNMP does not define an API, thus preventing its use as a component within other software architectures. High-performance computing systems such as PVM [10], p4 [3], and MPICH <ref> [12] </ref> provide rapid access to configuration data by placing this data (e.g., machine names, network interfaces) into files maintained by the programmer, called "hostfiles." However, lack of support for remote access means that hostfiles must be replicated at each host, complicating maintenance and dynamic update.
Reference: [13] <author> S. Heker, J. Reynolds, and C. Weider. </author> <title> Technical overview of directory services using the x.500 protocol. RFC 1309, </title> <journal> FY14, </journal> <volume> 03/12 92. </volume>
Reference-contexts: The Domain Name Service (DNS) provides a highly distributed, scalable service for resolving Internet addresses to values (e.g., IP addresses) but is not, in general, extensible. Furthermore, its update strategies are designed to support values that change relatively rarely. The X.500 standard <ref> [18, 13] </ref> defines a directory service that can be used to provide extensible distributed directory services within a wide area environment. A directory service is a service that provides read-optimized access to general data about entities, such as people, corporations, and computers.
Reference: [14] <author> T. Howes and M. Smith. </author> <title> The ldap application program interface. </title> <type> RFC 1823, 08/09 95. </type>
Reference-contexts: It removes the requirement for an ISO protocol stack, defining a standard wire protocol based on the IP protocol suite. It also simplifies the data encoding and command set of X.500 and defines a standard API for directory access <ref> [14] </ref>. LDAP is seeing wide-scale deployment as the directory service of choice for the World Wide Web. Disadvantages include its only moderate performance (see Section 5), limited access to external data sources, and rigid approach to distributing data across servers.
Reference: [15] <author> M. Litzkow, M. Livney, and M. </author> <title> Mutka. Condor ahunter of idle workstations. </title> <booktitle> In Proc. 8th Intl Conf. on Distributed Computing Systems, </booktitle> <pages> pages 104-111, </pages> <year> 1988. </year>
Reference-contexts: We expect these techniques to be equally useful in other systems that support computing in distributed environments, such as Legion [11], NetSolve [4], Condor <ref> [15] </ref>, Nimrod [1], PRM [16], AppLeS [2], and heterogeneous implementations of MPI [12].
Reference: [16] <author> B. Clifford Neumann and Santosh Rao. </author> <title> The Prospero resource manager: A scalable framework for processor allocation in distributed systems. </title> <journal> Concurrency: Practice & Experience, </journal> <volume> 6(4) </volume> <pages> 339-355, </pages> <year> 1994. </year>
Reference-contexts: We expect these techniques to be equally useful in other systems that support computing in distributed environments, such as Legion [11], NetSolve [4], Condor [15], Nimrod [1], PRM <ref> [16] </ref>, AppLeS [2], and heterogeneous implementations of MPI [12].
Reference: [17] <author> D. Reed, C. Elford, T. Madhyastha, E. Smirni, and S. </author> <title> Lamm. The Next Frontier: Interactive and Closed Loop Performance Steering. </title> <booktitle> In Proceedings of the 1996 ICPP Workshop on Challenges for Parallel Processing, </booktitle> <pages> pages 20-31, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Defaults often do not result in acceptable performance, and manual configuration requires low-level knowledge of remote systems that an average programmer does not possess. We need an information-rich approach to configuration, in which decisions are made (whether at compile-time, link-time, or run-time <ref> [17] </ref>) based upon information about the structure and state of the system in which a program is to run. An example from the I-WAY networking experiment illustrates some of the difficulties associated with the configuration of high-performance distributed systems.
Reference: [18] <author> J. Reynolds and C. Weider. </author> <title> Executive introduction to directory services using the x.500 protocol. RFC 1308, </title> <journal> FYI 13, </journal> <volume> 03/12 92. </volume>
Reference-contexts: The Domain Name Service (DNS) provides a highly distributed, scalable service for resolving Internet addresses to values (e.g., IP addresses) but is not, in general, extensible. Furthermore, its update strategies are designed to support values that change relatively rarely. The X.500 standard <ref> [18, 13] </ref> defines a directory service that can be used to provide extensible distributed directory services within a wide area environment. A directory service is a service that provides read-optimized access to general data about entities, such as people, corporations, and computers.
Reference: [19] <author> M. Rose. </author> <title> The Simple Book. </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: Operating system commands such as uname and sysinfo can provide important information about a particular machine but do not support remote access. SNMP <ref> [19] </ref> and the Network Information Service (NIS) both permit remote access but are defined within the context of the IP protocol suite, which can add significant overhead to a high-performance computing environment. Furthermore, SNMP does not define an API, thus preventing its use as a component within other software architectures.
Reference: [20] <author> Gregor von Laszewski. </author> <title> A Parallel Data Assimilation System and Its Implications on a Metacom-puting Environment. </title> <type> PhD thesis, </type> <institution> Syracuse University, </institution> <month> December </month> <year> 1996. </year>
Reference-contexts: Another application for MDS information that we are investigating is resource location <ref> [20] </ref>. A "resource broker" is basically a process that supports specialized searches against MDS information.
Reference: [21] <author> Richard Wolski. </author> <title> Dynamically forecasting network performance using the network weather service. </title> <type> Technical Report TR-CS96-494, </type> <institution> U.C. </institution> <address> San Diego, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: For example, the IP address associated with a network interface image can be provided by a system call, while the network bandwidth available through that interface is provided by a service such as the Network Weather Service (NWS) <ref> [21] </ref>. * Client/server architecture. The LDAP implementation requires at least one round-trip network communication for each LDAP access. Frequent access to the MDS thus becomes prohibitively expensive. We need a mechanism by which MDS data can be cached locally for a timely response. * Scope of Data.
Reference: [22] <author> W. Yeong, T. Howes, and S. Kille. </author> <title> Lightweight directory access protocol. </title> <type> RFC 1777, 03/28 95. Draft Standard. 15 </type>
Reference-contexts: However, it is complex and requires ISO protocols and the heavyweight ASN.1 encodings of data. For these and other reasons, it is not widely used. The Lightweight Directory Access Protocol <ref> [22] </ref> is a streamlined version of the X.500 directory service. It removes the requirement for an ISO protocol stack, defining a standard wire protocol based on the IP protocol suite. It also simplifies the data encoding and command set of X.500 and defines a standard API for directory access [14].
References-found: 22

