URL: ftp://ftp.cs.unc.edu/pub/users/manocha/PAPERS/INTERSECT/pruning.ps.gz
Refering-URL: http://www.cs.unc.edu/Research/graphics/pubs.html
Root-URL: http://www.cs.unc.edu
Email: manocha@cs.unc.edu  krishnas@cs.unc.edu  
Title: Algebraic Pruning: A Fast Technique for Curve and Surface Intersection  
Author: Dinesh Manocha Shankar Krishnan 
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science, University of North Carolina,  
Abstract: Computing the intersection of parametric and algebraic curves and surfaces is a fundamental problem in computer graphics and geometric modeling. This problem has been extensively studied in the literature and different techniques based on subdivision, interval analysis and algebraic formulation are known. For low degree curves and surfaces algebraic methods are considered to be the fastest, whereas techniques based on subdivision and Bezier clipping perform better for higher degree intersections. In this paper, we introduce a new technique of algebraic pruning based on the algebraic approaches and eigenvalue formulation of the problem. The resulting algorithm corresponds to computing only selected eigenvalues in the domain of intersection. This is based on matrix formulation of the intersection problem, power iterations and geometric properties of Bezier curves and surfaces. The algorithm prunes the domain and converges to the solutions rapidly. It has been applied to intersection of parametric and algebraic curves, ray tracing and curve-surface intersections. The resulting algorithm compares favorably with earlier methods in terms of performance and accuracy. Keywords: Intersection, curves, surfaces, ray-tracing, resultants, eigendecomposition, solid modeling 
Abstract-found: 1
Intro-found: 1
Reference: [ABB + 92] <author> E. Anderson, Z. Bai, C. Bischof, J. Demmel, J. Dongarra, J. Du Croz, A. Greenbaum, S. Hammarling, and D. Sorensen. </author> <note> LAPACK User's Guide, Release 1.0. SIAM, Philadel-phia, 1992. 18 </note>
Reference-contexts: Q (u; v) thus obtained is the intersection point on the patch. 5 Performance and Comparison We have implemented the algorithm using LAPACK routines <ref> [ABB + 92] </ref>. The overall algorithm has been applied to many cases of parametric curve intersection, algebraic curve intersection, intersection of a ray with a parametric surface and curve-surface intersections. In each case, the problem is reduced to an eigenvalue problem and we compute the eigenvalues in a domain.
Reference: [Dix08] <author> A.L. Dixon. </author> <title> The Eliminant of Three Quantics in Two Independent Variables. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 6 </volume> <pages> 49-69, 209-236, </pages> <year> 1908. </year>
Reference-contexts: In intersection problems, we obtain systems consisting of two or three algebraic equations. For two equations corresponding to curve-curve intersection and ray-tracing we use Bezout's formulation of Cayley resultant or Sylvester resultant [Sal85]. For curve-surface intersections, we use Dixon's formulation <ref> [Dix08] </ref>. In either case the resultant can be expressed as a matrix determinant and the entries of the matrix are univariate polynomials. Instead of symbolically expanding the determinant, we reduce the problem to an 5 eigenvalue formulation [Man92].
Reference: [EC90] <author> G. Elber and E. Cohen. </author> <title> Hidden Curve Removal for Free Form Surfaces. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 95-104, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction The problems of computing the intersection of curves and surfaces are fundamental in computer graphics and geometric modeling. Common applications include computation of boundary representation from a CSG model, ray-tracing surfaces, hidden-curve removal and visibility applications <ref> [Hof89, EC90, NSK90, SP86] </ref>.
Reference: [Far90] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design: A Practical Guide. </title> <publisher> Academic Press Inc., </publisher> <year> 1990. </year>
Reference-contexts: Finally, we discuss its implementation and performance in Section 5. 2 Curve and Surface Intersections In this paper, we only consider the intersections of rational parametric and algebraic curves and surfaces. These include Bezier curves and surfaces, NURBS, quadric patches etc. A rational Bezier plane curve is represented as <ref> [Far90] </ref>: P (t) = (X (t); Y (t)) = i=0 w i P i B i;n (t) i=0 w i B i;n (t) where P i = (X i ; Y i ) are the coordinates of a control point, w i is the weight of the control point and B <p> are the coordinates of a control point, w i is the weight of the control point and B i;n (t) corresponds to the Bernstein polynomial B i;n (t) = n ! Other rational formulations like B-splines can be converted into a series of rational Bezier curves by knot insertion algorithms <ref> [Far90] </ref>. Algebraic plane curves (of degree n) are generally expressed in standard power basis: F (x; y) = i+jn c ij x i y j = 0: They can also be represented in Bernstein basis. <p> The problem of intersection corresponds to computing the common points on such curves in a particular domain. The parametric surfaces may correspond to tensor product Bezier patches or triangular Bezier patches. Tensor product patches are represented in homogeneous coordinates as <ref> [Far90] </ref>: F (s; t) = (X (s; t); Y (s; t); Z (s; t); W (s; t)) = ( i=0 j=0 where V ij = (x ij ; y ij ; z ij ; w ij ). <p> The domain of the surface is restricted to s 2 [0; 1]; t 2 [0; 1]. The triangular Bezier patches are represented as <ref> [Far90] </ref>: F (s; t) = (X (s; t); Y (s; t); Z (s; t); W (s; t)) = ( i=0 j=0 i;j (s; t)); where V ij = (x ij ; y ij ; z ij ; w ij ) and B n i; j s i t j (1 s
Reference: [FR87] <author> R.T. Farouki and V.T. Rajan. </author> <title> On the Numerical Condition of Polynomials in Bernstein Form. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 4 </volume> <pages> 191-216, </pages> <year> 1987. </year>
Reference-contexts: Converting from Bernstein to power basis involves a linear transformation. However, this transformation can introduce numerical problems <ref> [FR87] </ref>. To circumvent this problem we perform a reparametrization of the form s = g (s) = (1 s) t ; for tensor product surfaces.
Reference: [GL89] <author> G.H. Golub and C.F. Van Loan. </author> <title> Matrix Computations. </title> <publisher> John Hopkins Press, </publisher> <address> Baltimore, </address> <year> 1989. </year>
Reference-contexts: To circumvent these problems, [Man92, MD94] have proposed methods combining elimination theory with matrix computations. The resulting problem is reduced to computing the eigenvalues of a matrix as opposed to roots of a polynomial. Eigenvalue algorithms like the QR algorithm <ref> [GL89] </ref> are backward stable and as a result the intersections can be computed accurately and efficiently for high degree curves and surfaces. However, the QR algorithm computes all the eigenvalues of the matrix. <p> Standard algorithms for computing eigenvalues like the QR algorithm for the standard eigenvalue problem and QZ algorithm for the generalized eigenvalue problem are based on orthogonal similarity transformations <ref> [GL89] </ref>. However, they compute all the eigenvalues and it is difficult to restrict them to eigenvalues in the given domain. <p> Moreover the convergence is a function of the ratio j 1 j=j 2 j. 1 is the dominant eigenvalue of A. Power method is described in detail in <ref> [GL89, Wil65] </ref>. In case, A is not diagonalizable or the corresponding eigenvector is ill-conditioned, the accuracy and convergence of the method is discussed in [Wil65] as well.
Reference: [Hof89] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, Califor-nia, </address> <year> 1989. </year>
Reference-contexts: 1 Introduction The problems of computing the intersection of curves and surfaces are fundamental in computer graphics and geometric modeling. Common applications include computation of boundary representation from a CSG model, ray-tracing surfaces, hidden-curve removal and visibility applications <ref> [Hof89, EC90, NSK90, SP86] </ref>.
Reference: [Hof90] <author> C.M. Hoffmann. </author> <title> A Dimensionality Paradigm for Surface Interrogations. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 7 </volume> <pages> 517-532, </pages> <year> 1990. </year>
Reference-contexts: However, the problem of finding roots of higher degree polynomials can be numerically unstable [Wil59]. Therefore, the overall algorithm for intersection may not be accurate. Moreover, the symbolic expansion of determinants to compute resultants can be computationally expensive as well <ref> [Hof90] </ref>. To circumvent these problems, [Man92, MD94] have proposed methods combining elimination theory with matrix computations. The resulting problem is reduced to computing the eigenvalues of a matrix as opposed to roots of a polynomial.
Reference: [Kaj82] <author> J. Kajiya. </author> <title> Ray Tracing Parametric Patches. </title> <journal> Computer Graphics, </journal> <volume> 16(3) </volume> <pages> 245-254, </pages> <year> 1982. </year>
Reference-contexts: Algebraic methods formulate the intersection problem in terms of solutions of a system of algebraic equations. Given the equations, the variables are eliminated using techniques from elimination theory [Sal85] and the problem is reduced to finding roots of a univariate polynomial. This approach was applied to ray-tracing by Kajiya <ref> [Kaj82] </ref> and to curve intersections by Sederberg [Sed83]. For lower degree curve intersection (up to degree three or four), implicitization approach results in the fastest algorithms. However, the problem of finding roots of higher degree polynomials can be numerically unstable [Wil59].
Reference: [KM83] <author> P.A. Koparkar and S. P. Mudur. </author> <title> A New Class of Algorithms for the Processing of Parametric Curves. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 15(1) </volume> <pages> 41-45, </pages> <year> 1983. </year>
Reference-contexts: Its convergence is improved using Bezier clipping in [SWZ89, Sed89, NSK90]. Bezier clipping makes use the convex hull property in a powerful way, by determining parameter ranges which are guaranteed not to include points of intersection. The interval arithmetic approach is similar to subdivision <ref> [KM83] </ref>. The curves are divided into intervals using vertical and horizontal tangents and thereby computing rectangular bounding boxes. The subdivision amounts to evaluating the coordinate of the midpoint of the interval and defining the resulting rectangles.
Reference: [LR80] <author> J.M. Lane and R.F. Riesenfeld. </author> <title> A Theoretical Development for the Computer Generation and Display of Piecewise Polynomial Surfaces. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 2(1) </volume> <pages> 150-159, </pages> <year> 1980. </year>
Reference-contexts: Subdivision based approaches use the geometric properties of curve and surface representations <ref> [LR80] </ref>. Given two Bezier curves, the intersection algorithm proceeds by comparing the convex hulls of their control polytopes. If they do not overlap, the curves or surfaces do not intersect. Otherwise the curves are subdivided and the resulting convex hulls are checked for intersection.
Reference: [Man92] <author> D. Manocha. </author> <title> Algebraic and Numeric Techniques for Modeling and Robotics. </title> <type> PhD thesis, </type> <institution> Computer Science Division, Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: However, the problem of finding roots of higher degree polynomials can be numerically unstable [Wil59]. Therefore, the overall algorithm for intersection may not be accurate. Moreover, the symbolic expansion of determinants to compute resultants can be computationally expensive as well [Hof90]. To circumvent these problems, <ref> [Man92, MD94] </ref> have proposed methods combining elimination theory with matrix computations. The resulting problem is reduced to computing the eigenvalues of a matrix as opposed to roots of a polynomial. <p> For curve-surface intersections, we use Dixon's formulation [Dix08]. In either case the resultant can be expressed as a matrix determinant and the entries of the matrix are univariate polynomials. Instead of symbolically expanding the determinant, we reduce the problem to an 5 eigenvalue formulation <ref> [Man92] </ref>. <p> They are computed by reducing to an eigenvalue problem in the following manner <ref> [Man92] </ref>: Theorem 2.1 Given the matrix polynomial, L (u) the roots of the polynomial corresponding to its determinant are the eigenvalues of the generalized system C 1 u + C 2 , where C 1 = 6 6 6 6 I m 0 0 : : : 0 . . .
Reference: [MD94] <author> D. Manocha and J. Demmel. </author> <title> Algorithms for Intersecting Parametric and Algebraic Curves. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 13(1): </volume> <pages> 73-100, </pages> <year> 1994. </year>
Reference-contexts: However, the problem of finding roots of higher degree polynomials can be numerically unstable [Wil59]. Therefore, the overall algorithm for intersection may not be accurate. Moreover, the symbolic expansion of determinants to compute resultants can be computationally expensive as well [Hof90]. To circumvent these problems, <ref> [Man92, MD94] </ref> have proposed methods combining elimination theory with matrix computations. The resulting problem is reduced to computing the eigenvalues of a matrix as opposed to roots of a polynomial. <p> In case the actual number of intersections between the original pair of control polytopes is high, we use the earlier algorithm based on QR iterations for computing all the eigenvalues <ref> [MD94] </ref>. 12 The technique of algebraic pruning works best when there are relatively few intersections. Let k correspond to the number of intersections between the control polytopes. <p> In each case, the problem is reduced to an eigenvalue problem and we compute the eigenvalues in a domain. We have performed some preliminary comparisons with the algorithm based on QR iterations in <ref> [MD94] </ref> and an implementation of implicitization based algorithm described in [SP86] and Bezier clipping described in [SWZ89]. Over the course of implementation, we realized that the actual timings obtained can be greatly improved by careful programming and making use of the structure of the problem. <p> If a given pair of curves or a curve and a surface have very few intersections, the technique based on algebraic pruning gives almost an order of magnitude improvement over the algorithm presented in <ref> [MD94] </ref>. This is mainly due to the fact that we are only computing the relevant solutions in the domain of interest as opposed to computing all the solutions.
Reference: [NSK90] <author> T. Nishita, T.W. Sederberg, and M. Kakimoto. </author> <title> Ray Tracing Trimmed Rational Surface Patches. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 337-345, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction The problems of computing the intersection of curves and surfaces are fundamental in computer graphics and geometric modeling. Common applications include computation of boundary representation from a CSG model, ray-tracing surfaces, hidden-curve removal and visibility applications <ref> [Hof89, EC90, NSK90, SP86] </ref>. <p> Eventually, the curve segments are approximated by straight lines up to certain tolerance, their intersection point is accepted as the intersection of two curves. Simple subdivision algorithm has linear convergence in the domain. Its convergence is improved using Bezier clipping in <ref> [SWZ89, Sed89, NSK90] </ref>. Bezier clipping makes use the convex hull property in a powerful way, by determining parameter ranges which are guaranteed not to include points of intersection. The interval arithmetic approach is similar to subdivision [KM83].
Reference: [Sal85] <author> G. Salmon. </author> <title> Lessons Introductory to the Modern Higher Algebra. G.E. </title> <publisher> Stechert & Co., </publisher> <address> New York, </address> <month> 1885. </month>
Reference-contexts: The subdivision amounts to evaluating the coordinate of the midpoint of the interval and defining the resulting rectangles. Algebraic methods formulate the intersection problem in terms of solutions of a system of algebraic equations. Given the equations, the variables are eliminated using techniques from elimination theory <ref> [Sal85] </ref> and the problem is reduced to finding roots of a univariate polynomial. This approach was applied to ray-tracing by Kajiya [Kaj82] and to curve intersections by Sederberg [Sed83]. For lower degree curve intersection (up to degree three or four), implicitization approach results in the fastest algorithms. <p> In intersection problems, we obtain systems consisting of two or three algebraic equations. For two equations corresponding to curve-curve intersection and ray-tracing we use Bezout's formulation of Cayley resultant or Sylvester resultant <ref> [Sal85] </ref>. For curve-surface intersections, we use Dixon's formulation [Dix08]. In either case the resultant can be expressed as a matrix determinant and the entries of the matrix are univariate polynomials. Instead of symbolically expanding the determinant, we reduce the problem to an 5 eigenvalue formulation [Man92].
Reference: [Sed83] <author> T.W. </author> <title> Sederberg. Implicit and Parametric Curves and Surfaces. </title> <type> PhD thesis, </type> <institution> Purdue University, </institution> <year> 1983. </year>
Reference-contexts: Given the equations, the variables are eliminated using techniques from elimination theory [Sal85] and the problem is reduced to finding roots of a univariate polynomial. This approach was applied to ray-tracing by Kajiya [Kaj82] and to curve intersections by Sederberg <ref> [Sed83] </ref>. For lower degree curve intersection (up to degree three or four), implicitization approach results in the fastest algorithms. However, the problem of finding roots of higher degree polynomials can be numerically unstable [Wil59]. Therefore, the overall algorithm for intersection may not be accurate. <p> The QR algorithm has a comparable performance if the number of intersections in the domain is at least equal to 2 p Compared to the implicitization based approach highlighted in <ref> [Sed83] </ref>, algebraic pruning has almost the same order of magnitude (on low degree curves of degree three or four). The impliciti 17 zation based approach involves expansion of the symbolic determinant and computing all the roots in the domain of interest of the resulting polynomial.
Reference: [Sed89] <author> T.W. </author> <title> Sederberg. Algorithms for Algebraic Curve Intersection. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 21(9) </volume> <pages> 547-555, </pages> <year> 1989. </year>
Reference-contexts: Eventually, the curve segments are approximated by straight lines up to certain tolerance, their intersection point is accepted as the intersection of two curves. Simple subdivision algorithm has linear convergence in the domain. Its convergence is improved using Bezier clipping in <ref> [SWZ89, Sed89, NSK90] </ref>. Bezier clipping makes use the convex hull property in a powerful way, by determining parameter ranges which are guaranteed not to include points of intersection. The interval arithmetic approach is similar to subdivision [KM83]. <p> In particular, we assume that each curve and surface is associated with a corresponding control polytope. For Bezier curves and surfaces such control polytopes are formed by their control points. Similar geometric representations are known for algebraic curves and surfaces as well <ref> [Sed89] </ref>. The simplest algorithm for intersection is based on the version of algebraic pruning highlighted earlier in Section 4. In particular, we start with the middle point of the domain, find the closest eigenvalue using power iterations and prune the domain.
Reference: [Sei90] <author> R. Seidel. </author> <title> Linear Programming and Convex Hulls made Easy. </title> <booktitle> In Proc. 6th Ann. ACM Conf. on Computational Geometry, </booktitle> <pages> pages 211-215, </pages> <address> Berkeley, California, </address> <year> 1990. </year>
Reference-contexts: To start with we use linear programming <ref> [Sei90] </ref> to check if the control 8 polytopes of the pairs of curves (or a curve and a surface) have a separating line (or plane) between them. If they do, then the given pair does not intersect. <p> This is reduced to a linear programming problem, whose complexity is linear in the number of constraints. In this case, each control points contributes a constraint. Good randomized algorithms for linear programming are described in <ref> [Sei90] </ref> and they work very well in practice. 4.4.2 Curve-Surface Intersection The control points of the curve in homogeneous coordinates is given by: P (s) = ((85:0; 0:0; 150:0; 1:6); (104:0; 50:0; 50:0; 1:6); (90:0; 50:0; 50:0; 1:4); (120:0; 0:0; 150:0; 1:3)): The control points of the surface is given by
Reference: [SP86] <author> T.W. Sederberg and S.R. Parry. </author> <title> Comparison of Three Curve Intersection Algorithms. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 18(1) </volume> <pages> 58-63, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction The problems of computing the intersection of curves and surfaces are fundamental in computer graphics and geometric modeling. Common applications include computation of boundary representation from a CSG model, ray-tracing surfaces, hidden-curve removal and visibility applications <ref> [Hof89, EC90, NSK90, SP86] </ref>. <p> In each case, the problem is reduced to an eigenvalue problem and we compute the eigenvalues in a domain. We have performed some preliminary comparisons with the algorithm based on QR iterations in [MD94] and an implementation of implicitization based algorithm described in <ref> [SP86] </ref> and Bezier clipping described in [SWZ89]. Over the course of implementation, we realized that the actual timings obtained can be greatly improved by careful programming and making use of the structure of the problem. <p> As a result, if we implement algorithms as part of a generic package or specialize to particular cases (like intersection of cubic Bezier curves), we can see a considerable difference in their running time. A similar analysis holds for the implementation of implicitization based algorithm described in <ref> [SP86] </ref>. Thus, it is rather difficult to perform an exact comparison between two algorithms and in this section we will analyze them more in terms of convergence per iteration and the total number of iterations required on various examples. <p> On the other hand algebraic pruning reduces it to an eigenvalue problem and does not involve symbolic expansion. After running it on few examples, we have observed that the algorithm to find all the roots in the given domain of a polynomial <ref> [SP86] </ref> is slightly faster than computation of eigenvalues in the given domain. For most applications on degree three and degree four curves, both algorithms take about 5 to 7 milliseconds on the DEC 5000/25. <p> However, on degree five curves consisting of at most two or three intersections, algebraic pruning performed better by a couple of milliseconds. We would again like to highlight the fact that these are the performance figures corresponding to our implementation and an earlier implementation of implicitization based intersection algorithm <ref> [SP86] </ref>. Other implementations may result in a different set of timings. Finally, we compared our algorithm to Bezier clipping [SWZ89]. This comparison has been performed only for curve intersections. <p> Given a good starting guess, inverse power iterations converges in a very few iterations only. As a result, the inverse iteration combines very well with spatial and temporal coherence. 6 Acknowledgements The authors are grateful to Tom Sederberg for an earlier implementation of intersection algorithms presented in <ref> [SP86, SWZ89] </ref>.
Reference: [SWZ89] <author> T.W. Sederberg, S. White, and A. Zundel. </author> <title> Fat Arcs: A Bounding Region with Cubic Convergence. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 6 </volume> <pages> 205-218, </pages> <year> 1989. </year>
Reference-contexts: Eventually, the curve segments are approximated by straight lines up to certain tolerance, their intersection point is accepted as the intersection of two curves. Simple subdivision algorithm has linear convergence in the domain. Its convergence is improved using Bezier clipping in <ref> [SWZ89, Sed89, NSK90] </ref>. Bezier clipping makes use the convex hull property in a powerful way, by determining parameter ranges which are guaranteed not to include points of intersection. The interval arithmetic approach is similar to subdivision [KM83]. <p> In each case, the problem is reduced to an eigenvalue problem and we compute the eigenvalues in a domain. We have performed some preliminary comparisons with the algorithm based on QR iterations in [MD94] and an implementation of implicitization based algorithm described in [SP86] and Bezier clipping described in <ref> [SWZ89] </ref>. Over the course of implementation, we realized that the actual timings obtained can be greatly improved by careful programming and making use of the structure of the problem. For example, the technique applied to intersection of parametric curves results in a matrix polynomial with symmetric matrices. <p> We would again like to highlight the fact that these are the performance figures corresponding to our implementation and an earlier implementation of implicitization based intersection algorithm [SP86]. Other implementations may result in a different set of timings. Finally, we compared our algorithm to Bezier clipping <ref> [SWZ89] </ref>. This comparison has been performed only for curve intersections. The actual performance of the algorithm is actually a function of the geometry of the curves and the number of intersections in the given domain. <p> Given a good starting guess, inverse power iterations converges in a very few iterations only. As a result, the inverse iteration combines very well with spatial and temporal coherence. 6 Acknowledgements The authors are grateful to Tom Sederberg for an earlier implementation of intersection algorithms presented in <ref> [SP86, SWZ89] </ref>.
Reference: [Wil59] <author> J.H. Wilkinson. </author> <title> The Evaluation of the Zeros of Ill-conditioned Polynomials. parts i and ii. </title> <journal> Numer. Math., </journal> <volume> 1 </volume> <pages> 150-166 and 167-180, </pages> <year> 1959. </year>
Reference-contexts: This approach was applied to ray-tracing by Kajiya [Kaj82] and to curve intersections by Sederberg [Sed83]. For lower degree curve intersection (up to degree three or four), implicitization approach results in the fastest algorithms. However, the problem of finding roots of higher degree polynomials can be numerically unstable <ref> [Wil59] </ref>. Therefore, the overall algorithm for intersection may not be accurate. Moreover, the symbolic expansion of determinants to compute resultants can be computationally expensive as well [Hof90]. To circumvent these problems, [Man92, MD94] have proposed methods combining elimination theory with matrix computations.
Reference: [Wil65] <author> J.H. Wilkinson. </author> <title> The Algebraic Eigenvalue Problem. </title> <publisher> Oxford University Press, Oxford, </publisher> <year> 1965. </year>
Reference-contexts: Moreover the convergence is a function of the ratio j 1 j=j 2 j. 1 is the dominant eigenvalue of A. Power method is described in detail in <ref> [GL89, Wil65] </ref>. In case, A is not diagonalizable or the corresponding eigenvector is ill-conditioned, the accuracy and convergence of the method is discussed in [Wil65] as well. <p> Power method is described in detail in [GL89, Wil65]. In case, A is not diagonalizable or the corresponding eigenvector is ill-conditioned, the accuracy and convergence of the method is discussed in <ref> [Wil65] </ref> as well. In our applications, we use power iterations to compute the smallest eigenvalues of matrix pencils of the form, C 1 s 0 + C 2 . <p> and u 0 ): for k = 1; 2; : : : Solve (C 1 s 0 Solve (C 1 s 0 q k = z k = k z k k 1 s k = (u T k C 1 q k ) This process is locally cubically convergent <ref> [Wil65] </ref>. Many other techniques for improving the ac curacy and convergence of the algorithm in the presence of higher multiplicity eigenvalues, closely spaced eigenvalues are presented in [Wil65]. 4 Algebraic Pruning We have shown earlier how the intersection problem can be reduced to finding eigenvalues of the matrix pencil, C 1 <p> = k z k k 1 s k = (u T k C 1 q k ) This process is locally cubically convergent <ref> [Wil65] </ref>. Many other techniques for improving the ac curacy and convergence of the algorithm in the presence of higher multiplicity eigenvalues, closely spaced eigenvalues are presented in [Wil65]. 4 Algebraic Pruning We have shown earlier how the intersection problem can be reduced to finding eigenvalues of the matrix pencil, C 1 s + C 2 . <p> Let i be the closest eigenvalue to s 0 with corresponding eigenvector x i . If u 0 has a very small component of x i then rounding errors may prevent these components from being enriched and the algorithm may not converge. However, according to <ref> [Wil65] </ref>, this possibility is extremely rare if u 0 is chosen at random. If a given pair of curves or a curve and a surface have very few intersections, the technique based on algebraic pruning gives almost an order of magnitude improvement over the algorithm presented in [MD94].
References-found: 22

