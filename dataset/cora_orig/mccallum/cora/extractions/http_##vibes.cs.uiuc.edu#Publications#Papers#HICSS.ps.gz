URL: http://vibes.cs.uiuc.edu/Publications/Papers/HICSS.ps.gz
Refering-URL: http://vibes.cs.uiuc.edu/Publications/publications.htm
Root-URL: http://www.cs.uiuc.edu
Title: A Performance Study of An Object-Oriented, Parallel Operating System  
Author: David R. Kohr, Jr. Xingbin Zhang Daniel A. Reed Mustafizur Rahman 
Address: Urbana, Illinois 61801 Amherst, Massachusetts 01003  
Affiliation: Department of Computer Science Department of Computer Science University of Illinois University of Massachusetts  
Abstract: The nascent and rapidly evolving state of parallel systems often leaves parallel application developers at the mercy of inefficient, inflexible operating system software. To assess the feasibility of performance tuning via malleable system software and to understand the performance penalties for detailed operating system performance data capture, we describe a set of performance experiments with Choices, an experimental, object-oriented operating system designed for use with parallel systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Campbell, R., and Islam, N. </author> <title> "A Parallel Object-Oriented Operating System". In Research Directions in Concurrent Object-Oriented Programming (1992), </title> <editor> G. Agha, P. Wegner, and A. Yonezawa, Eds., </editor> <publisher> MIT Press. </publisher>
Reference-contexts: Two requirements are implicit in this approach: detailed performance data and malleable operating system infrastructure. Detailed performance data is a prerequisite for informed performance optimization. The second, flexible operating system infrastructure, provides the mechanism for experimentation. In this paper, we describe a set of performance experiments with Choices <ref> [1] </ref>, an experimental, object fl Supported in part by the National Science Foundation under grants NSF CCR87-06653 and NSF CDA87-22836. oriented operating system designed for use with parallel systems. <p> Choices <ref> [1] </ref> is an experimental operating system, designed to promote experimentation with both new operating system design mechanisms and new resource management policies. By separating mechanism and policy, Choices encourages experimentation with both. Mechanisms permit reconfiguration of operating system components to support new parallel architectures and applications.
Reference: [2] <author> Campbell, R. H., Islam, N., Johnson, R., Kou-giouris, P., and Madany, P. </author> <title> Choices, Frameworks and Refinement. </title> <booktitle> In Object-Orientation in Operating Systems (Palo Alto, </booktitle> <address> CA, </address> <month> Oct. </month> <year> 1991), </year> <editor> Luis-Felipe Cabrera and Vincent Russo, and Marc Shapiro, Ed., </editor> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 9-15. </pages>
Reference-contexts: The object-oriented application interface has a name server that implements inheritance and polymorphism and provides access to system services, local and remote servers, and persistent objects. In the Choices design, a conceptual framework subsumes the conventional organization of an operating system as a group of layers <ref> [7, 2] </ref>. The framework for the system provides generalized components and constraints to which the specialized subframeworks must conform. 2.2 Current Implementations Choices is most properly viewed as an operating system schema whose instantiations contain varying fractions of the code base.
Reference: [3] <author> Campbell, R. H., Islam, N., and Madany, P. </author> <title> Choices, Frameworks and Refinement. </title> <booktitle> Computing Systems 5, 3 (1992), </booktitle> <pages> 217-257. </pages>
Reference-contexts: By separating mechanism and policy, Choices encourages experimentation with both. Mechanisms permit reconfiguration of operating system components to support new parallel architectures and applications. For policy experiments, Choices supports a set of components that can be combined to support different models of parallel programming <ref> [3] </ref>. 2.1 Design Philosophy Choices has, as its kernel, a dynamic collection of C++ objects [5]. System resources, mechanisms, and policies are represented as objects that belong to a class hierarchy [7].
Reference: [4] <author> Lehr, T., Black, D., Segall, Z., and Vrsalovic, D. </author> <title> Visualizing Context-Switches of Parallel Programs Using PIE and the Mach Kernel Monitor. </title> <booktitle> In Proceedings of the 1990 International Conference on Parallel Processing (Aug. </booktitle> <year> 1990), </year> <pages> pp. 298-299. </pages>
Reference-contexts: All experiments used a Berkeley file system that is Umax compatible (i.e., files written by Choices are readable by Umax). 4.2 Instrumentation and Data Collection Given constraints on the number of possible operating system instrumentation points, context switch instrumentation provides the most information <ref> [4] </ref> | it exposes not only the decisions of the task scheduler, but also the interactions of application tasks and the execution patterns of service daemons.
Reference: [5] <author> Madany, P., Islam, N., Kougiouris, P., and Campbell, R. H. </author> <title> "Practical Examples of Reifica-tion and Reflection in C++". </title> <booktitle> In International Workshop on Reflection and MetaLevel Architecture (Nov. </booktitle> <year> 1992), </year> <pages> pp. 76-82. </pages>
Reference-contexts: Mechanisms permit reconfiguration of operating system components to support new parallel architectures and applications. For policy experiments, Choices supports a set of components that can be combined to support different models of parallel programming [3]. 2.1 Design Philosophy Choices has, as its kernel, a dynamic collection of C++ objects <ref> [5] </ref>. System resources, mechanisms, and policies are represented as objects that belong to a class hierarchy [7]. The object-oriented application interface has a name server that implements inheritance and polymorphism and provides access to system services, local and remote servers, and persistent objects.
Reference: [6] <author> Reed, D. A., Olson, R. D., Aydt, R. A., Mad-hyastha, T. M., Birkett, T., Jensen, D. W., Nazief, B. A. A., and Totty, B. K. </author> <title> Scalable Performance Environments for Parallel Systems. </title> <booktitle> In Proceedings of the Sixth Distributed Memory Computing Conference (Apr. 1991), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 562-569. </pages>
Reference-contexts: Although resource limitations did not allow us to conduct experiments with larger numbers of processors, we are confident that this approach scales to substantial numbers of processors. The belief is based on our implementation of similar instrumentation on systems with tens to hundreds of processors <ref> [6] </ref>. 6 Experimental Data Analysis The high dimensionality of the experimental space (i.e., two operating systems, a variety of potential operating system configuration options, and multiple programs from the SPLASH benchmark set), together with the time required to conduct an experiment and the large volume of performance data obtained from 3
Reference: [7] <author> Russo, V. F. </author> <title> An Object-Oriented Operating System. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, Department of Computer Science, </institution> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: System resources, mechanisms, and policies are represented as objects that belong to a class hierarchy <ref> [7] </ref>. The object-oriented application interface has a name server that implements inheritance and polymorphism and provides access to system services, local and remote servers, and persistent objects. In the Choices design, a conceptual framework subsumes the conventional organization of an operating system as a group of layers [7, 2]. <p> The object-oriented application interface has a name server that implements inheritance and polymorphism and provides access to system services, local and remote servers, and persistent objects. In the Choices design, a conceptual framework subsumes the conventional organization of an operating system as a group of layers <ref> [7, 2] </ref>. The framework for the system provides generalized components and constraints to which the specialized subframeworks must conform. 2.2 Current Implementations Choices is most properly viewed as an operating system schema whose instantiations contain varying fractions of the code base. <p> First, the Choices application programming interface does not support system calls in the traditional sense; instead, the system supports requests for operating system services via proxies <ref> [7, 9] </ref>, C++ interfaces to the system software that allow interaction with objects that are not in the same protection domain. <p> Except for performance penalties attributable to process emulation or untuned system services (e.g., disk input/output), the performance of applications on Choices is competitive with Unix. This is a system-level confirmation of the micro-scale measurements reported earlier <ref> [7] </ref>. 5 In fairness, the Choices Unix compatibility library was created to ease code porting, not to provide a parallel programming model. 7 Operating System Malleability The last of our research goals was to assess the feasibility of application performance tuning by adapting the operating system resource management policies to better
Reference: [8] <author> Russo, V. F., Madany, P. W., and Campbell, R. H. </author> <title> C++ and Operating Systems Performance: </title>
Reference-contexts: Fourth, dumping the instrumentation buffers is completely synchronous. Hence, the perturbation induced on each processor is identical, and there is no skewing of the tasks on different processors. 4 Performance Analysis Methodology Earlier Choices performance measurements <ref> [8] </ref> showed that the performance penalties for an object-oriented design need not be prohibitive, but they did not explore the interactions of operating system components.
References-found: 8

