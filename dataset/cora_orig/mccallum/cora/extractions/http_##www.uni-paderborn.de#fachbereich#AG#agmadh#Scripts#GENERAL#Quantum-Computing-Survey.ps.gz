URL: http://www.uni-paderborn.de/fachbereich/AG/agmadh/Scripts/GENERAL/Quantum-Computing-Survey.ps.gz
Refering-URL: http://www.uni-paderborn.de/fachbereich/AG/agmadh/WWW/english/scripts.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Quantum Computation "Because nature isn't classical, dammit..."  
Author: Richard P. Feynman Andre Berthiaume 
Note: This is page 1 Printer: Opaque this  
Abstract: Historically, Turing machines have been the paradigm by which we defined computability and efficiency. This is based on Church's thesis that everything effectively computable can also be computed on a Turing machine. But since our world behaves quantum mechanically, it seems reasonable to also consider computing models that make use of quantum mechanical properties. First stated by Benioff [Ben82] and Feynman [Fey82], this idea was formalized by Deutsch [Deu85] when he introduced his quantum computer and, later on, quantum gate arrays. This paper gives an introduction to quantum computing and briefly looks at a few results in quantum computation, not the least of which is Shor's polynomial time factoring algorithm ([Sho94] and [Sho95]).
Abstract-found: 1
Intro-found: 1
Reference: [Adl94] <author> L. M. Adleman. </author> <title> Algorithmic number theory | the complexity contribution. </title> <booktitle> In Proceedings of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 88-113, </pages> <year> 1994. </year>
Reference-contexts: However, finding this decomposition when n is large is a difficult computational problem. All known classical methods are resolutely inefficient (see <ref> [Adl94] </ref>) and even the best known classical algorithm, the number field sieve (see [LLMP90], [LL93]) requires time O (e c (log n) 1=3 (log log n) 2=3 ), which is exponential in the size (the number of digits, i.e., log n) of n.
Reference: [BB92a] <editor> A. Berthiaume and G. Brassard. </editor> <booktitle> Oracle quantum computing. In Proceedings of the Workshop on Physics and Computation - Physcomp '92, </booktitle> <pages> pages 195-199. </pages> <publisher> IEEE Press, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: The original Deutsch-Jozsa problem dealt with strings rather than functions and was the first example of a problem which could be solved exponentially faster on a quantum computer than on a Turing machine [DJ92]. By recasting the original problem in the context of promise-problems, Berthi-aume and Brassard in [BB94], <ref> [BB92a] </ref> and [BB92b] proved some early results in relativized quantum complexity theory. These results were improved upon first by Bernstein and Vazirani [BV93] and then by Simon [Sim94] who proved the following theorem.
Reference: [BB92b] <author> A. Berthiaume and G. Brassard. </author> <title> The quantum challenge to structural complexity. </title> <booktitle> In Proceedings of the 7th Annual IEEE Conference on Structure in Complexity, </booktitle> <pages> pages 132-137, </pages> <year> 1992. </year>
Reference-contexts: By recasting the original problem in the context of promise-problems, Berthi-aume and Brassard in [BB94], [BB92a] and <ref> [BB92b] </ref> proved some early results in relativized quantum complexity theory. These results were improved upon first by Bernstein and Vazirani [BV93] and then by Simon [Sim94] who proved the following theorem.
Reference: [BB94] <author> A. Berthiaume and G. Brassard. </author> <title> Oracle quantum computing. </title> <journal> Journal of Modern Optics, </journal> <volume> 41(12) </volume> <pages> 2521-2535, </pages> <year> 1994. </year>
Reference-contexts: The original Deutsch-Jozsa problem dealt with strings rather than functions and was the first example of a problem which could be solved exponentially faster on a quantum computer than on a Turing machine [DJ92]. By recasting the original problem in the context of promise-problems, Berthi-aume and Brassard in <ref> [BB94] </ref>, [BB92a] and [BB92b] proved some early results in relativized quantum complexity theory. These results were improved upon first by Bernstein and Vazirani [BV93] and then by Simon [Sim94] who proved the following theorem.
Reference: [BBB + 92] <author> C. H. Bennett, F. Bessette, G. Brassard, L. Salvail, and J. Smolin. </author> <title> Experimental quantum cryptography. </title> <journal> Journal of Cryptology, </journal> <volume> 5(1) </volume> <pages> 3-28, </pages> <year> 1992. </year>
Reference-contexts: Similar arguments hold for each case of table 1.1. To learn more about the importance of this situation, see <ref> [BBB + 92] </ref>, [BBE92] and [Bra93]. The point of this digression was to demonstrate that the information of a quantum state is a function of the observable used.
Reference: [BBC + 95] <author> A. Barenco, C. H. Bennett, R. Cleve, D.P. DiVincenzo, N. Mar-golus, P. Shor, T. Sleator, J. Smolin, and H. Weinfurter. </author> <title> Elementary gates for quantum computation. </title> <journal> Physical Review Letters A, </journal> <year> 1995. </year>
Reference-contexts: The above matrix performs the operation called controlled-not on two qubits. As such, it is the first example of a quantum computation introduced here. For the importance of the controlled-not operation, see <ref> [BBC + 95] </ref>. It is a simple matter to generalize what has been presented in this section to represent the state of an n-qubit register. <p> This makes the use of one or the other a matter of taste. There exists a quantum equivalent to uniform circuit families: quantum gate arrays. They were introduced by Deutsch ([Deu89]) and studied extensively by many authors (see <ref> [BBC + 95] </ref> for a detailed review of quantum gate arrays). Yao [Yao93] has shown that acyclic quantum gate arrays could simulate quantum Turing machines, thus making the use of one or the other a matter of choice. <p> However, since quantum gate arrays allow a more natural way to introduce unitarity in computation, they are emerging as the standard quantum computing model. In what follows, the diagrams and gate array notation are as in <ref> [BBC + 95] </ref>. 3.1 Quantum Gate Arrays The diagram below represents a general quantum gate array. The initial (basis) state of the register is on the left and time flows from left to right. One might think of the particles composing the register as travelling through the different gates. <p> For the purpose of this paper, it is sufficient to consider any quantum gate acting on only one or two qubits to be such an elementary step. The reader is encouraged to consult <ref> [BBC + 95] </ref> for more details on the notion of elementary quantum gates. Also, in our gate arrays, we will not always specify all the elementary gates: in some cases we will simply convince ourselves that the necessary elementary gates could be written down.
Reference: [BBE92] <editor> C. H. Bennett, G. Brassard, and A Ekert. </editor> <booktitle> Quantum cryptography. Scientific American, </booktitle> <pages> pages 50-57, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Similar arguments hold for each case of table 1.1. To learn more about the importance of this situation, see [BBB + 92], <ref> [BBE92] </ref> and [Bra93]. The point of this digression was to demonstrate that the information of a quantum state is a function of the observable used.
Reference: [BDJ94] <author> A. Berthiaume, D. Deutsch, and R. Jozsa. </author> <booktitle> The stabilisation of quantum computations. In Proceedings of the Workshop on Physics and Computation - Physcomp '94, </booktitle> <pages> pages 60 - 62, </pages> <year> 1994. </year>
Reference-contexts: An alternative approach proposed by Deutsch could allow computation on a less than perfect quantum state through a stabilizing scheme (the scheme is outlined in <ref> [BDJ94] </ref> and a preliminary analysis is given in [Ber95]). In view of this, it seems unlikely that a general purpose quantum computer will be available in the near future. But technological advances in this field are appearing at an increasing rate.
Reference: [Ben73] <author> C. H. Bennett. </author> <title> Logical reversibility of computations. </title> <journal> IBM Journal of Res. Develop., </journal> <volume> 17 </volume> <pages> 525-532, </pages> <year> 1973. </year>
Reference-contexts: Just how simple need be these steps? Ideally, they should be broken down to what we defined as elementary gates, but in some cases, this will be unnecessary. The following theorem (Lecerf [Lec63] and Bennett <ref> [Ben73] </ref>) greatly simplifies quantum thinking: 16 Andre Berthiaume Theorem 3.2 (Lecerf-Bennett) For any Turing machine T computing a function f there exists a reversible Turing machine T 0 computing hx; f (x)i on input x and whose running time is within a constant factor of the running time of T .
Reference: [Ben82] <author> P. A. Benioff. </author> <title> Quantum mechanical hamiltonian models of tur-ing machines. </title> <journal> Journal of Statistical Physics, </journal> <volume> 29(3) </volume> <pages> 515-546, </pages> <year> 1982. </year>
Reference-contexts: This is based on Church's thesis that everything effectively computable can also be computed on a Turing machine. But since our world behaves quantum mechanically, it seems reasonable to also consider computing models that make use of quantum mechanical properties. First stated by Benioff <ref> [Ben82] </ref> and Feynman [Fey82], this idea was formalized by Deutsch [Deu85] when he defined the first quantum computing model that made full use ofn quantum superposition. <p> These tape cells are referred collectively as the workspace. Reversible Turing machines are such that at any point in the computation, two operations are possible: continue the computation forward one step or undo the previous step. For a more precise definition, see [Lan61] or the review in [BL85]. Benioff <ref> [Ben82] </ref> and Deutsch [Deu85] have shown that quantum Turing machines can directly simulate reversible Turing machines.
Reference: [Ben96] <author> P. A. Benioff. </author> <title> Review of quantum computation. To appear in Trends in Statistical Physics by Council of Scientific Information, </title> <address> Trivandrum, India, </address> <year> 1996. </year>
Reference-contexts: Where possible, we will give references for more detailed accounts. For a more exhaustive review of the history of quantum computation (dating back almost 50 years), the reader should consult <ref> [Ben96] </ref>. 2 Basic Principles of Quantum Mechanics We now introduce the basic rules of quantum mechanics through a series of principles. Young's celebrated two-slit experiment will serve as a background to illustrate these principles. FIGURE 1. Young's two-slits experiment.
Reference: [Ber95] <author> A. Berthiaume. L'ordinateur quantique: complexite et stabil-isation des calculs. </author> <type> PhD thesis, </type> <institution> Dept. d'informatique et de recherche operationelle, Universite de Montreal, </institution> <year> 1995. </year>
Reference-contexts: An alternative approach proposed by Deutsch could allow computation on a less than perfect quantum state through a stabilizing scheme (the scheme is outlined in [BDJ94] and a preliminary analysis is given in <ref> [Ber95] </ref>). In view of this, it seems unlikely that a general purpose quantum computer will be available in the near future. But technological advances in this field are appearing at an increasing rate.
Reference: [BL85] <author> C. H. Bennett and R. Landauer. </author> <title> Physical limits of computation. </title> <publisher> Scientific American, </publisher> <pages> page 48, </pages> <month> July </month> <year> 1985. </year> <note> 30 Andre Berthiaume </note>
Reference-contexts: These tape cells are referred collectively as the workspace. Reversible Turing machines are such that at any point in the computation, two operations are possible: continue the computation forward one step or undo the previous step. For a more precise definition, see [Lan61] or the review in <ref> [BL85] </ref>. Benioff [Ben82] and Deutsch [Deu85] have shown that quantum Turing machines can directly simulate reversible Turing machines.
Reference: [Bra93] <author> G. Brassard. </author> <title> Cryptology column | quantum cryptography: A bibliography. </title> <journal> Sigact News, </journal> <volume> 24(3) </volume> <pages> 16-20, </pages> <year> 1993. </year>
Reference-contexts: Similar arguments hold for each case of table 1.1. To learn more about the importance of this situation, see [BBB + 92], [BBE92] and <ref> [Bra93] </ref>. The point of this digression was to demonstrate that the information of a quantum state is a function of the observable used.
Reference: [BV93] <author> E. Berstein and U. Vazirani. </author> <title> Quantum complexity theory. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on the Theory of Computation, </booktitle> <pages> pages 11-20, </pages> <year> 1993. </year>
Reference-contexts: Verifying that a given transition function corresponds to a unitary evolution is non-trivial. Bernstein and Vazirani give three rules for verifying that a transition function performs its computation in a unitary fashion <ref> [BV93] </ref>, but even using this method still requires unnatural programming skills. In classical complexity theory, uniform circuit families are also commonly used as a computing model. <p> By recasting the original problem in the context of promise-problems, Berthi-aume and Brassard in [BB94], [BB92a] and [BB92b] proved some early results in relativized quantum complexity theory. These results were improved upon first by Bernstein and Vazirani <ref> [BV93] </ref> and then by Simon [Sim94] who proved the following theorem. <p> This E x n gate is shown below. a 0 m n a x a (mod n) We only need one more quantum operation. Shor refined the S n transformation used by <ref> [BV93] </ref> and [Sim94] in the following way: instead of using phases that were 1= p 2 m , we now make use of the full spectrum of com plex amplitudes.
Reference: [Cop94] <author> D. Coppersmith. </author> <title> An approximate fourier transform useful in quantum computing. </title> <type> Technical report, </type> <institution> IBM Research Division, </institution> <year> 1994. </year>
Reference-contexts: The fact that one can efficiently implement such a quantum gate is not immediately clear, if only for the fact that the amplitudes seem to require increasing precision as m grows large. However, Deutsch and Coppersmith <ref> [Cop94] </ref> independently found an efficient solution based on the Fast Fourier Transform algorithm [Knu81], which only requires O (m 2 ) elementary quantum gates.
Reference: [CY94] <author> I. Chuang and Y. Yamamoto. </author> <title> A simple quantum computer, </title> <note> 1994. Submitted to Physical Review A. </note>
Reference-contexts: The faster the operations can be performed, the less time there is to perform them! Yet hope still remains. Shor's discovery attracted enough attention that more and more breakthroughs are coming from experimental physics. Many proposals for constructing a quantum computer already exist, such as [Fey86],[SW94], <ref> [CY94] </ref>, [Llo93] or [DiV95]. Currently, a proposal by Pel-lizzari, Gardener, Cirac and Zoller using trapped ions technology appears very promising [PGCZ95] and the authors even suggest a way to control to a certain extent the decoherence in their implementation.
Reference: [Deu85] <author> D. Deutsch. </author> <booktitle> Quantum theory, the Church-Turing principle and the universal quantum computer. Proceedings of the Royal Society, </booktitle> <address> London, A400:97-117, </address> <year> 1985. </year>
Reference-contexts: But since our world behaves quantum mechanically, it seems reasonable to also consider computing models that make use of quantum mechanical properties. First stated by Benioff [Ben82] and Feynman [Fey82], this idea was formalized by Deutsch <ref> [Deu85] </ref> when he defined the first quantum computing model that made full use ofn quantum superposition. This paper gives an introduction to Deutsch's quantum computing model and briefly looks at a few results in quantum computation, not the least of which is Shor's polynomial time factoring algorithm. <p> Reversible Turing machines are such that at any point in the computation, two operations are possible: continue the computation forward one step or undo the previous step. For a more precise definition, see [Lan61] or the review in [BL85]. Benioff [Ben82] and Deutsch <ref> [Deu85] </ref> have shown that quantum Turing machines can directly simulate reversible Turing machines. <p> To obtain all values of f in this fashion would require (on average) an exponential number of such runs. This could have been done just as easily using a probabilistic Turing machine by choosing x randomly and computing f (x). Deutsch <ref> [Deu85] </ref> proved that quantum parallelism used in this simplistic way cannot produce that values of f any faster than classical machines. To get some form of benefit from superpositions, a more subtle use of quantum parallelism is needed.
Reference: [Deu89] <author> D. Deutsch. </author> <title> Quantum computational network. </title> <booktitle> Proceedings of the Royal Society, </booktitle> <address> London, A425:73-90, </address> <year> 1989. </year>
Reference: [DiV95] <author> D. P. DiVincenzo. </author> <title> Two-bit gates are universal for quantum computation. </title> <journal> Physical Review Letters A, </journal> <volume> 50(1015), </volume> <year> 1995. </year>
Reference-contexts: The time needed to perform an operation also depends on the medium used for a qubit and the conditions under which it operates. Unfortunately, the quick-action qubits are precisely those that interact easily with the environment, i.e. those having the shortest coherence time (see <ref> [DiV95] </ref>). The faster the operations can be performed, the less time there is to perform them! Yet hope still remains. Shor's discovery attracted enough attention that more and more breakthroughs are coming from experimental physics. Many proposals for constructing a quantum computer already exist, such as [Fey86],[SW94], [CY94], [Llo93] or [DiV95]. <p> <ref> [DiV95] </ref>). The faster the operations can be performed, the less time there is to perform them! Yet hope still remains. Shor's discovery attracted enough attention that more and more breakthroughs are coming from experimental physics. Many proposals for constructing a quantum computer already exist, such as [Fey86],[SW94], [CY94], [Llo93] or [DiV95]. Currently, a proposal by Pel-lizzari, Gardener, Cirac and Zoller using trapped ions technology appears very promising [PGCZ95] and the authors even suggest a way to control to a certain extent the decoherence in their implementation.
Reference: [DJ92] <author> D. Deutsch and R. Jozsa. </author> <title> Rapid solutions of problems by quantum computation. </title> <journal> In Proceedings of the Royal Society, London, </journal> <volume> volume A439, </volume> <pages> pages 553-558, </pages> <year> 1992. </year>
Reference-contexts: This procedure is analogous to writing pseudo-code for classical Turing machine and will provide a better intuitive approach. To illustrate the programming of quantum gate arrays, we will use a variation of the Deutsch-Jozsa Problem <ref> [DJ92] </ref>. First, we define two properties of functions from f0; 1g n to f0; 1g: Definition 3.1 A function f : f0; 1g n ! f0; 1g is non-balanced if one of the two values of f has majority. 1. <p> The original Deutsch-Jozsa problem dealt with strings rather than functions and was the first example of a problem which could be solved exponentially faster on a quantum computer than on a Turing machine <ref> [DJ92] </ref>. By recasting the original problem in the context of promise-problems, Berthi-aume and Brassard in [BB94], [BB92a] and [BB92b] proved some early results in relativized quantum complexity theory. These results were improved upon first by Bernstein and Vazirani [BV93] and then by Simon [Sim94] who proved the following theorem.
Reference: [EJ96] <author> A. Ekert and R. Jozsa. </author> <title> Shor's quantum algorithme for factoris-ing numbers. </title> <journal> Review of Modern Physics, </journal> <note> 1996. to appear. </note>
Reference-contexts: This produces the r we needed. For a more detailed study of Shor's algorithm including the necessary number theory which was left out here, see [Sho95] and <ref> [EJ96] </ref>. Shor's algorithm and Simon's theorem are two of the most important results in quantum complexity theory. Both are strong arguments in favor of the superiority of quantum computing models over classical ones.
Reference: [Fey82] <author> R. P. </author> <title> Feynman. Simulating physics with computers. </title> <journal> International Journal of Theoretical Physics, </journal> 21(6/7):467-488, 1982. 
Reference-contexts: This is based on Church's thesis that everything effectively computable can also be computed on a Turing machine. But since our world behaves quantum mechanically, it seems reasonable to also consider computing models that make use of quantum mechanical properties. First stated by Benioff [Ben82] and Feynman <ref> [Fey82] </ref>, this idea was formalized by Deutsch [Deu85] when he defined the first quantum computing model that made full use ofn quantum superposition.
Reference: [Fey86] <author> R. P. </author> <title> Feynman. </title> <booktitle> Quantum mecanical computers. Foundation of Physics, </booktitle> <volume> 16(6) </volume> <pages> 507-531, </pages> <year> 1986. </year>
Reference: [FLS64] <author> R. P. Feynman, R. B. Leighton, and M. </author> <title> Sands. </title> <journal> The Feynman Lectures on Physics, </journal> <volume> volume 3. </volume> <publisher> Addison-Wesley, </publisher> <year> 1964. </year>
Reference-contexts: The purpose of this section is not to explain why such strange behavior appears at the quantum level but merely to state the rules for these behaviors. Following Feynman's example <ref> [FLS64] </ref>, these rules are presented as the principles of quantum mechanics. Definition 2.1 For a given experiment, an event is a set of initial and final conditions. For example, an event in Young's experiment is "a photon leaves the source s and arrives in the detector at position x".
Reference: [Knu81] <author> D. E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> volume 2. </volume> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference-contexts: r is odd or x r=2 1 (mod n) then fail else return gcd (x r=2 1; n) Choosing a random number in the range f0; : : : ; ng, doing the modular exponentiation and finding the gcd (greatest common divisor) can all be done in polynomial time (see <ref> [Knu81] </ref>). Let k be the number of odd prime factors of n. One can prove that, provided n is odd and non-prime, the above algorithm will return a prime factor of n with probability at least 1 1=2 k1 . <p> The fact that one can efficiently implement such a quantum gate is not immediately clear, if only for the fact that the amplitudes seem to require increasing precision as m grows large. However, Deutsch and Coppersmith [Cop94] independently found an efficient solution based on the Fast Fourier Transform algorithm <ref> [Knu81] </ref>, which only requires O (m 2 ) elementary quantum gates. <p> The algorithm for finding that fraction d=r from c=2 m is the post-processing we referred to earlier and can be done efficiently by continued fraction expansion (see <ref> [Knu81] </ref>). This produces the r we needed. For a more detailed study of Shor's algorithm including the necessary number theory which was left out here, see [Sho95] and [EJ96]. Shor's algorithm and Simon's theorem are two of the most important results in quantum complexity theory.
Reference: [Lan61] <author> R. Landauer. </author> <title> Irreversability and heat generation in the computing process. </title> <journal> IBM Journal of Research Development, </journal> <volume> 5(183), </volume> <year> 1961. </year>
Reference-contexts: These tape cells are referred collectively as the workspace. Reversible Turing machines are such that at any point in the computation, two operations are possible: continue the computation forward one step or undo the previous step. For a more precise definition, see <ref> [Lan61] </ref> or the review in [BL85]. Benioff [Ben82] and Deutsch [Deu85] have shown that quantum Turing machines can directly simulate reversible Turing machines.
Reference: [Lec63] <author> Y. Lecerf. </author> <title> Machines de Turing reversibles. Recursive insolubilite en n 2 N de l'equation u = n ou est un isomorphisme de codes. </title> <journal> In Comptes rendus de l'Academie fran~caise des sciences, </journal> <volume> volume 257, </volume> <pages> pages 2597 - 2600, </pages> <year> 1963. </year> <title> 1. </title> <booktitle> Quantum Computation 31 </booktitle>
Reference-contexts: Just how simple need be these steps? Ideally, they should be broken down to what we defined as elementary gates, but in some cases, this will be unnecessary. The following theorem (Lecerf <ref> [Lec63] </ref> and Bennett [Ben73]) greatly simplifies quantum thinking: 16 Andre Berthiaume Theorem 3.2 (Lecerf-Bennett) For any Turing machine T computing a function f there exists a reversible Turing machine T 0 computing hx; f (x)i on input x and whose running time is within a constant factor of the running time
Reference: [LL93] <author> A. K. Lenstra and H. W. Lenstra, Jr. </author> <title> The devellopment of the number field sieve. </title> <booktitle> Springer-Verlag's Lecture Notes in Mathematics, </booktitle> <volume> (1554), </volume> <year> 1993. </year>
Reference-contexts: However, finding this decomposition when n is large is a difficult computational problem. All known classical methods are resolutely inefficient (see [Adl94]) and even the best known classical algorithm, the number field sieve (see [LLMP90], <ref> [LL93] </ref>) requires time O (e c (log n) 1=3 (log log n) 2=3 ), which is exponential in the size (the number of digits, i.e., log n) of n. Whether the factoring problem is polynomial or not (classically) is still unknown.
Reference: [LLMP90] <author> A. K. Lenstra, H. W. Lenstra, Jr., M. S. Manasse, and J. M. Pollard. </author> <title> The number field sieve. </title> <booktitle> In Proceedings of the 22nd Annual ACM Symposium on the Theory of Computation, </booktitle> <pages> pages 564-572, </pages> <year> 1990. </year>
Reference-contexts: However, finding this decomposition when n is large is a difficult computational problem. All known classical methods are resolutely inefficient (see [Adl94]) and even the best known classical algorithm, the number field sieve (see <ref> [LLMP90] </ref>, [LL93]) requires time O (e c (log n) 1=3 (log log n) 2=3 ), which is exponential in the size (the number of digits, i.e., log n) of n. Whether the factoring problem is polynomial or not (classically) is still unknown.
Reference: [Llo93] <author> S. Lloyd. </author> <title> A potentially realizable quantum computer. </title> <journal> Science, </journal> <volume> 261:1569 - 1571, </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: The faster the operations can be performed, the less time there is to perform them! Yet hope still remains. Shor's discovery attracted enough attention that more and more breakthroughs are coming from experimental physics. Many proposals for constructing a quantum computer already exist, such as [Fey86],[SW94], [CY94], <ref> [Llo93] </ref> or [DiV95]. Currently, a proposal by Pel-lizzari, Gardener, Cirac and Zoller using trapped ions technology appears very promising [PGCZ95] and the authors even suggest a way to control to a certain extent the decoherence in their implementation.
Reference: [Mil76] <author> G. L. Miller. </author> <title> Riemann's hypothesis and tests for primality. </title> <journal> Journal of Computer Science, </journal> <volume> 13 </volume> <pages> 300-317, </pages> <year> 1976. </year>
Reference-contexts: Given x and n, find r (called the order) such that x r 1 (mod n). As with the factoring problem, no efficient algorithm is known for solving this problem. But while these problems appear very different, they are closely related. Miller <ref> [Mil76] </ref> has shown that, using randomization, one could solve the factoring problem if one had access to an oracle for finding the order of an element. His reduction works as follows: first, make sure that n is odd and not a prime (there are efficient primality testing algorithms).
Reference: [MSE95] <author> Palma G. M., K.-A. Suominen, and A. Ekert. </author> <title> Decoherence in quantum registers, 1995. </title> <type> preprint. </type>
Reference-contexts: And these figures are for a single qubit only; some decoherence models show the decoherence time dropping exponentially as the number of qubits increases (see [Unr95] 28 Andre Berthiaume and <ref> [MSE95] </ref>). But keeping a qubit in quantum superposition is only part of the problem. A quantum computer will have to perform operations on that qubit. The time needed to perform an operation also depends on the medium used for a qubit and the conditions under which it operates.
Reference: [PGCZ95] <author> T. Pellizzari, S. A. Gardiner, J. I. Cirac, and P. Zoller. Decoher-ence, </author> <title> continuous observation and quantum computing: A cavity QED model, </title> <note> 1995. Submitted to Physical Review Letters. </note>
Reference-contexts: Shor's discovery attracted enough attention that more and more breakthroughs are coming from experimental physics. Many proposals for constructing a quantum computer already exist, such as [Fey86],[SW94], [CY94], [Llo93] or [DiV95]. Currently, a proposal by Pel-lizzari, Gardener, Cirac and Zoller using trapped ions technology appears very promising <ref> [PGCZ95] </ref> and the authors even suggest a way to control to a certain extent the decoherence in their implementation.
Reference: [Sch95] <author> B. Schumacher. </author> <title> On quantum coding. </title> <journal> Physical Review Letters A, </journal> <note> 1995. (in press to appear). </note>
Reference-contexts: However, for the sake of clarity, we will limit our attention to systems of interest for quantum computation, namely qubits and quantum registers. We begin by defining a qubit, the quantum version of bit, as defined by Schumacher <ref> [Sch95] </ref>. Definition 2.3 A qubit is a quantum state j'i of the form j'i = ffj0i + fij1i where ff; fi 2 C and kffk 2 + kfik 2 The above definition leaves the actual medium of a qubit completely undefined.
Reference: [Sho94] <author> P. W. Shor. </author> <title> Algorithms for quantum computation: Discrete log and factoring. </title> <booktitle> In Proceedings of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 20-22, </pages> <year> 1994. </year>
Reference: [Sho95] <author> P. W. Shor. </author> <title> Polynomial-time algorithms for prime factorisation and discrete laogarithms on a quantum computer. </title> <note> Submitted to SIAM Journal of Computing, </note> <year> 1995. </year>
Reference-contexts: This produces the r we needed. For a more detailed study of Shor's algorithm including the necessary number theory which was left out here, see <ref> [Sho95] </ref> and [EJ96]. Shor's algorithm and Simon's theorem are two of the most important results in quantum complexity theory. Both are strong arguments in favor of the superiority of quantum computing models over classical ones.
Reference: [Sim94] <editor> D. Simon. </editor> <booktitle> On the power of quantum computation. In Proceedings of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 116-123, </pages> <year> 1994. </year>
Reference-contexts: By recasting the original problem in the context of promise-problems, Berthi-aume and Brassard in [BB94], [BB92a] and [BB92b] proved some early results in relativized quantum complexity theory. These results were improved upon first by Bernstein and Vazirani [BV93] and then by Simon <ref> [Sim94] </ref> who proved the following theorem. <p> We now show how Simon <ref> [Sim94] </ref> used this transformation to prove theorem 3.1. Assume we have a computable function f : f0; 1g n ! f0; 1g m , where m n. <p> Shor's factoring algorithm uses the same trick, but with a refined version of S n , called the quantum discrete Fourier transform, and more number theory. The next section will go over the quantum component of the factoring algorithm; the reader may consult <ref> [Sim94] </ref> to see how the relativized version of the above problem is used to prove Simon's theorem. 24 Andre Berthiaume 5 Shor's Factoring Algorithm Every integer n has a unique decomposition in prime factors. However, finding this decomposition when n is large is a difficult computational problem. <p> This E x n gate is shown below. a 0 m n a x a (mod n) We only need one more quantum operation. Shor refined the S n transformation used by [BV93] and <ref> [Sim94] </ref> in the following way: instead of using phases that were 1= p 2 m , we now make use of the full spectrum of com plex amplitudes.
Reference: [SW94] <author> T. Sleator and H. Weinfurther. </author> <title> Realizable universal quantum logic gates, 1994. </title> <type> preprint. </type>
Reference: [Unr95] <author> W. G. Unruh. </author> <title> Maintaining coherence in quantum computers. </title> <journal> Physical Review Letters A, </journal> <volume> 51 </volume> <pages> 992-997, </pages> <year> 1995. </year>
Reference-contexts: In the best cases, coherence is kept for some 10 4 seconds and in the worst cases, hardly 10 10 seconds. And these figures are for a single qubit only; some decoherence models show the decoherence time dropping exponentially as the number of qubits increases (see <ref> [Unr95] </ref> 28 Andre Berthiaume and [MSE95]). But keeping a qubit in quantum superposition is only part of the problem. A quantum computer will have to perform operations on that qubit.

References-found: 40

