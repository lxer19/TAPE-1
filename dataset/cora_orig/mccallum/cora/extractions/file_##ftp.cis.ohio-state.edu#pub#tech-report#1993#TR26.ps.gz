URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1993/TR26.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Title: Resilient and Flexible Ring Embedding in an Injured Hypercube log n) faulty nodes and may
Author: Yu-Chee Tseng and Ten-Hwang Lai 
Keyword: Key Words: graph embedding, hypercube, ring, linear path, fault-tolerance.  
Note: n  at most two.  This research was supported by National Science Foundation under Grant CCR-9010589.  
Address: Columbus, Ohio 43210  
Affiliation: Department of Computer and Information Science The Ohio State University  
Email: E-mail: ftseng, laig@cis.ohio-state.edu  
Phone: Tel: (614)292-5813, Fax: (614)292-9021  
Abstract: This paper presents an algorithm for embedding a ring in a damaged n-cube that improves over existing algorithms in both the degree of fault tolerance and the dilation incurred. Existing algorithms are able to tolerate only up to 2n fi( 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Berman and L. Snyder, </author> <title> "On Mapping Parallel Algorithms into Parallel Architectures," </title> <journal> J. of Parallel and Distrib. Comput., </journal> <volume> 4 (1987), </volume> <pages> pp. 439-458. </pages>
Reference-contexts: 1 Introduction Embedding a source graph in a host graph has long been used to model the problem of processor allocation in parallel and distributed computing, where a source graph represents a parallel or distributed algorithm and a host graph does a network of processors <ref> [1, 3] </ref>.
Reference: [2] <author> S. N. Bhatt, F. R. K. Chung, F. T. Leighton, and A. L. Rosenberg, </author> <title> "Efficient Embedding of Trees in Hypercubes," </title> <journal> SIAM J. Comput., </journal> <volume> Vol. 21, No. 1, </volume> <pages> pp. 151-162, </pages> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: The hypercube has emerged as one of the most important network architectures for large-scale concurrent computers and, as a result, embedding in hypercubes has received intensive studies for various source graphs, such as rings [18], trees <ref> [2, 22, 23] </ref>, meshes [7], pyramids [12, 15], arbitrary graphs [14], and even multiple graphs [10, 19]. As technology advances and a hypercube computer contains more and more nodes, the possibility of there existing one or more faulty nodes in the system becomes ineligible.
Reference: [3] <author> S. Bokhari, </author> <title> "On the Mapping Problem," </title> <journal> IEEE Trans. on Comput., </journal> <volume> C-30 (1981), </volume> <pages> pp. 207-214. </pages>
Reference-contexts: 1 Introduction Embedding a source graph in a host graph has long been used to model the problem of processor allocation in parallel and distributed computing, where a source graph represents a parallel or distributed algorithm and a host graph does a network of processors <ref> [1, 3] </ref>.
Reference: [4] <author> J. Bruck, R. Cypher and D. Soroker, </author> <title> "Tolerating Faults in Hypercubes using Subcube Partitioning," </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. 41, No. 5, </volume> <month> May </month> <year> 1992, </year> <pages> pp. 599-605. </pages>
Reference-contexts: As technology advances and a hypercube computer contains more and more nodes, the possibility of there existing one or more faulty nodes in the system becomes ineligible. Should any node fail, it is desirable that the rest of the hypercube continues to operate in spite of the faulty nodes <ref> [4, 11, 17] </ref>. The problem of embedding a graph in an injured hypercube has thus become an important issue. Indeed, there are techniques available in the literatures for embedding rings [5, 16, 21, 25], trees [6, 20], meshes [24] in injured hypercubes. <p> Proof. Let D be any subset of [n] with cardinality jDj = 2k. Q (D) is an (n 2k)-dimensional supercube containing 2 (n2k) supernodes (2k-nodes) of which at most bf =2 k c n 2k 1 are damaged. It has been proved in <ref> [4, 17] </ref> that for any m-cube Q m with m 1 faulty nodes there exists a template ~ D [m] such that j ~ Dj = 2 and none of the 2-nodes in Q ( ~ D) contains more than one faulty node.
Reference: [5] <author> M. Y. Chan and S.-J. Lee, </author> <title> "Distributed Fault-Tolerant Embeddings of Rings in Hypercubes," </title> <journal> J. of Parallel and Distrib. Comput. </journal> <volume> 11, </volume> <pages> pp. </pages> <month> 63-71 </month> <year> (1991). </year>
Reference-contexts: The problem of embedding a graph in an injured hypercube has thus become an important issue. Indeed, there are techniques available in the literatures for embedding rings <ref> [5, 16, 21, 25] </ref>, trees [6, 20], meshes [24] in injured hypercubes. Of these results we are particularly interested in the ones for rings, noting that many parallel and distributed algorithms are structured as rings (e.g., [8, 9, 13]). <p> Assuming that nodes may fail, Provost and Melhem [16] developed an algorithm that is able to find a ring of length 3 fi 2 n2 in an n-cube with a single faulty node, or a ring of length 2 n1 if there are two faulty nodes. Chan and Lee <ref> [5] </ref> showed that if the number of faulty nodes, f , is no more than b (n + 1)=2c, then a ring containing at least 2 n 2f nodes can always be constructed. <p> Using penalty factor as a measure, the algorithm in <ref> [5] </ref> incurs p w (f ) = 2, where f is no larger than b (n + 1)=2c. The algorithm proposed by [25] retains p w (f ) = 2 but improves f to as large as 3n=2.
Reference: [6] <author> M. Y. Chan and S.-J. Lee, </author> <title> "Fault-Tolerant Embeddings of Complete Binary Trees in Hypercubes," </title> <journal> IEEE Trans. on Parallel and Distrib. Sys., </journal> <volume> Vol. 4, No. 3, </volume> <month> March </month> <year> 1993, </year> <pages> pp. </pages> <month> 277-288. </month> <title> (a) (b) f vs. the penalty factor. 19 (a) (b) f vs. the penalty factor. </title> <type> 20 </type>
Reference-contexts: The problem of embedding a graph in an injured hypercube has thus become an important issue. Indeed, there are techniques available in the literatures for embedding rings [5, 16, 21, 25], trees <ref> [6, 20] </ref>, meshes [24] in injured hypercubes. Of these results we are particularly interested in the ones for rings, noting that many parallel and distributed algorithms are structured as rings (e.g., [8, 9, 13]).
Reference: [7] <author> T. F. Chan and Y. Saad, </author> <title> "Multigrid Algorithms on the Hypercube Multiproces--sor," </title> <journal> IEEE Trans. on Comput., </journal> <volume> C-35(11), </volume> <month> Nov. </month> <year> 1986, </year> <pages> pp. 969-977. </pages>
Reference-contexts: The hypercube has emerged as one of the most important network architectures for large-scale concurrent computers and, as a result, embedding in hypercubes has received intensive studies for various source graphs, such as rings [18], trees [2, 22, 23], meshes <ref> [7] </ref>, pyramids [12, 15], arbitrary graphs [14], and even multiple graphs [10, 19]. As technology advances and a hypercube computer contains more and more nodes, the possibility of there existing one or more faulty nodes in the system becomes ineligible.
Reference: [8] <author> E. W. Dijkstra, W. H. J. Feijen and A. J. M. van Gasteren, </author> <title> "Derivation of a Termination Algorithm for Distributed Computations," Info. Process. </title> <journal> Lett., V. </journal> <volume> 16, </volume> <year> 1983, </year> <pages> pp. 217-219. </pages>
Reference-contexts: Indeed, there are techniques available in the literatures for embedding rings [5, 16, 21, 25], trees [6, 20], meshes [24] in injured hypercubes. Of these results we are particularly interested in the ones for rings, noting that many parallel and distributed algorithms are structured as rings (e.g., <ref> [8, 9, 13] </ref>). The fault-tolerant ring embedding problem can be formulated as follows: Given a ring of length , an n-cube, and a set of f faulty nodes in the cube, find a fault-free embedding of the ring in the injured cube.
Reference: [9] <author> D. Dolev, M. Klawe and M. Rodeh, </author> <title> "An O(n log n) Unidirectional Distributed Algorithm for Extrema-finding in a Circle," </title> <journal> J. </journal> <note> Algorithms 3 (1982) 245-260. </note>
Reference-contexts: Indeed, there are techniques available in the literatures for embedding rings [5, 16, 21, 25], trees [6, 20], meshes [24] in injured hypercubes. Of these results we are particularly interested in the ones for rings, noting that many parallel and distributed algorithms are structured as rings (e.g., <ref> [8, 9, 13] </ref>). The fault-tolerant ring embedding problem can be formulated as follows: Given a ring of length , an n-cube, and a set of f faulty nodes in the cube, find a fault-free embedding of the ring in the injured cube.
Reference: [10] <author> A. K. Gupta and S. E. Hambrusch, </author> <title> "Multiple Network Embeddings into Hyper-cubes," </title> <booktitle> Proc. of 5th Distributed Memory Computing Conference, 1990, </booktitle> <volume> Vol. II, </volume> <pages> pp. 1384-1392. </pages>
Reference-contexts: hypercube has emerged as one of the most important network architectures for large-scale concurrent computers and, as a result, embedding in hypercubes has received intensive studies for various source graphs, such as rings [18], trees [2, 22, 23], meshes [7], pyramids [12, 15], arbitrary graphs [14], and even multiple graphs <ref> [10, 19] </ref>. As technology advances and a hypercube computer contains more and more nodes, the possibility of there existing one or more faulty nodes in the system becomes ineligible.
Reference: [11] <author> J. Hastad, T. Leighton and M. Newman, </author> <title> "Reconfiguring a Hypercube in the Presence of Faults," </title> <booktitle> 9-th Annual ACM Symp. on Theory of Computing, </booktitle> <year> 1987, </year> <pages> pp. 274-284. </pages>
Reference-contexts: As technology advances and a hypercube computer contains more and more nodes, the possibility of there existing one or more faulty nodes in the system becomes ineligible. Should any node fail, it is desirable that the rest of the hypercube continues to operate in spite of the faulty nodes <ref> [4, 11, 17] </ref>. The problem of embedding a graph in an injured hypercube has thus become an important issue. Indeed, there are techniques available in the literatures for embedding rings [5, 16, 21, 25], trees [6, 20], meshes [24] in injured hypercubes.
Reference: [12] <author> C. T. Ho and S. L. Johnsson, </author> <title> "Embedding Hyper-pyramids into Hypercubes," </title> <institution> Yale University Tech. </institution> <type> Rep. </type> <institution> TR-667, </institution> <month> Dec. </month> <year> 1988. </year>
Reference-contexts: The hypercube has emerged as one of the most important network architectures for large-scale concurrent computers and, as a result, embedding in hypercubes has received intensive studies for various source graphs, such as rings [18], trees [2, 22, 23], meshes [7], pyramids <ref> [12, 15] </ref>, arbitrary graphs [14], and even multiple graphs [10, 19]. As technology advances and a hypercube computer contains more and more nodes, the possibility of there existing one or more faulty nodes in the system becomes ineligible.
Reference: [13] <author> J. JaJa, </author> <title> An Introduction of Parallel Algorithms, </title> <publisher> Addison Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Indeed, there are techniques available in the literatures for embedding rings [5, 16, 21, 25], trees [6, 20], meshes [24] in injured hypercubes. Of these results we are particularly interested in the ones for rings, noting that many parallel and distributed algorithms are structured as rings (e.g., <ref> [8, 9, 13] </ref>). The fault-tolerant ring embedding problem can be formulated as follows: Given a ring of length , an n-cube, and a set of f faulty nodes in the cube, find a fault-free embedding of the ring in the injured cube.
Reference: [14] <author> Y. M. Kim and T.-H. Lai, </author> <title> "The Complexity of Congestion-1 Embedding in a Hypercube," </title> <journal> J. of Algorithms, </journal> <volume> 12, </volume> <pages> pp. </pages> <month> 146-180 </month> <year> (1991). </year>
Reference-contexts: The hypercube has emerged as one of the most important network architectures for large-scale concurrent computers and, as a result, embedding in hypercubes has received intensive studies for various source graphs, such as rings [18], trees [2, 22, 23], meshes [7], pyramids [12, 15], arbitrary graphs <ref> [14] </ref>, and even multiple graphs [10, 19]. As technology advances and a hypercube computer contains more and more nodes, the possibility of there existing one or more faulty nodes in the system becomes ineligible.
Reference: [15] <author> T.-H. Lai and W. White, </author> <title> "Mapping Pyramid Algorithms into Hypercubes,," </title> <journal> J. of Parallel and Distrib. Comput. </journal> <volume> 9, </volume> <pages> pp. </pages> <month> 42-54 </month> <year> (1990). </year>
Reference-contexts: The hypercube has emerged as one of the most important network architectures for large-scale concurrent computers and, as a result, embedding in hypercubes has received intensive studies for various source graphs, such as rings [18], trees [2, 22, 23], meshes [7], pyramids <ref> [12, 15] </ref>, arbitrary graphs [14], and even multiple graphs [10, 19]. As technology advances and a hypercube computer contains more and more nodes, the possibility of there existing one or more faulty nodes in the system becomes ineligible.
Reference: [16] <author> F. J. Provost and R. Melhem, </author> <title> "Distributed Fault Tolerant Embedding of Binary Trees and Rings in Hypercubes," </title> <booktitle> Proc. Int'l Workshop on Defect and Fault Tolerance in VLSI Systems, </booktitle> <year> 1988. </year>
Reference-contexts: The problem of embedding a graph in an injured hypercube has thus become an important issue. Indeed, there are techniques available in the literatures for embedding rings <ref> [5, 16, 21, 25] </ref>, trees [6, 20], meshes [24] in injured hypercubes. Of these results we are particularly interested in the ones for rings, noting that many parallel and distributed algorithms are structured as rings (e.g., [8, 9, 13]). <p> It measures how efficiently the processes of a parallel/distributed algorithm may communicate by message passing on the host computer; the closer the dilation is to one, the more efficient the interprocess communications. Assuming that nodes may fail, Provost and Melhem <ref> [16] </ref> developed an algorithm that is able to find a ring of length 3 fi 2 n2 in an n-cube with a single faulty node, or a ring of length 2 n1 if there are two faulty nodes.
Reference: [17] <author> C. S. Raghavendra, P.-J. Yang and S.-B. Tien, </author> <title> "Free Dimensions An Efficient Approach to Achieving Fault Tolerance in Hypercubes," </title> <booktitle> Fault-Tolerant Computing Symp., </booktitle> <year> 1992, </year> <pages> pp. 170-177. </pages>
Reference-contexts: As technology advances and a hypercube computer contains more and more nodes, the possibility of there existing one or more faulty nodes in the system becomes ineligible. Should any node fail, it is desirable that the rest of the hypercube continues to operate in spite of the faulty nodes <ref> [4, 11, 17] </ref>. The problem of embedding a graph in an injured hypercube has thus become an important issue. Indeed, there are techniques available in the literatures for embedding rings [5, 16, 21, 25], trees [6, 20], meshes [24] in injured hypercubes. <p> Chan and Lee [5] showed that if the number of faulty nodes, f , is no more than b (n + 1)=2c, then a ring containing at least 2 n 2f nodes can always be constructed. Yang et al. [25] and Raghavendra et al. <ref> [17] </ref> later improved the bound on f to f d3 (n 2)=2e, while retaining the ring length to be 2 n 2f . <p> Proof. Let D be any subset of [n] with cardinality jDj = 2k. Q (D) is an (n 2k)-dimensional supercube containing 2 (n2k) supernodes (2k-nodes) of which at most bf =2 k c n 2k 1 are damaged. It has been proved in <ref> [4, 17] </ref> that for any m-cube Q m with m 1 faulty nodes there exists a template ~ D [m] such that j ~ Dj = 2 and none of the 2-nodes in Q ( ~ D) contains more than one faulty node.
Reference: [18] <author> Y. Saad and M. H. Schultz, </author> <title> "Topological Properties of Hypercubes," </title> <journal> IEEE Trans. on Comput., </journal> <volume> Vol. 37, No. 7, </volume> <month> July </month> <year> 1988, </year> <pages> pp. 867-872. </pages>
Reference-contexts: The hypercube has emerged as one of the most important network architectures for large-scale concurrent computers and, as a result, embedding in hypercubes has received intensive studies for various source graphs, such as rings <ref> [18] </ref>, trees [2, 22, 23], meshes [7], pyramids [12, 15], arbitrary graphs [14], and even multiple graphs [10, 19]. As technology advances and a hypercube computer contains more and more nodes, the possibility of there existing one or more faulty nodes in the system becomes ineligible. <p> Let D 0 be the union D [ ~ D. It is well known that the nodes of a hypercube can be arranged as a ring using a Gray code <ref> [18] </ref>. Applying this result to Q (D 0 ) yields a 2 (k + 1)-ring of length 2 n2 (k+1) . 2 The following corollary is a variant of the above lemma and will be used in the next section. <p> Proof. There are many Gray codes. It is easy to find a binary-reflected Gray code such that a particular address is in the beginning of the code. The reader is referred to <ref> [18, 19] </ref> for details. The length-2r ring also results from the property of binary-reflected Gray codes. 2 Consider the supercubes Q (D) and Q (D 0 ) in Lemma 3.
Reference: [19] <author> Y.-C. Tseng, T.-H. Lai and L.-F. Wu, </author> <title> "Matrix Representation of Graph Embedding in a Hypercube," </title> <note> to appear in J. of Parallel and Distrib. Comput. 21 </note>
Reference-contexts: hypercube has emerged as one of the most important network architectures for large-scale concurrent computers and, as a result, embedding in hypercubes has received intensive studies for various source graphs, such as rings [18], trees [2, 22, 23], meshes [7], pyramids [12, 15], arbitrary graphs [14], and even multiple graphs <ref> [10, 19] </ref>. As technology advances and a hypercube computer contains more and more nodes, the possibility of there existing one or more faulty nodes in the system becomes ineligible. <p> Proof. There are many Gray codes. It is easy to find a binary-reflected Gray code such that a particular address is in the beginning of the code. The reader is referred to <ref> [18, 19] </ref> for details. The length-2r ring also results from the property of binary-reflected Gray codes. 2 Consider the supercubes Q (D) and Q (D 0 ) in Lemma 3.
Reference: [20] <author> A. Wang, R. Cypher and E. Mayr, </author> <title> "Embedding Complete Binary Trees in Faulty Hypercubes," </title> <booktitle> 3-th IEEE Symp. on Parallel and Distributed Processing, </booktitle> <year> 1991, </year> <pages> pp. 112-119. </pages>
Reference-contexts: The problem of embedding a graph in an injured hypercube has thus become an important issue. Indeed, there are techniques available in the literatures for embedding rings [5, 16, 21, 25], trees <ref> [6, 20] </ref>, meshes [24] in injured hypercubes. Of these results we are particularly interested in the ones for rings, noting that many parallel and distributed algorithms are structured as rings (e.g., [8, 9, 13]).
Reference: [21] <author> A. Wang and R. Cypher, </author> <title> "Fault-tolerant Embeddings of Rings, Meshes, and Tori in Hypercubes," </title> <booktitle> 4-th IEEE Symp. on Parallel and Distributed Processing, </booktitle> <year> 1992, </year> <pages> pp. 20-29. </pages>
Reference-contexts: The problem of embedding a graph in an injured hypercube has thus become an important issue. Indeed, there are techniques available in the literatures for embedding rings <ref> [5, 16, 21, 25] </ref>, trees [6, 20], meshes [24] in injured hypercubes. Of these results we are particularly interested in the ones for rings, noting that many parallel and distributed algorithms are structured as rings (e.g., [8, 9, 13]). <p> Yang et al. [25] and Raghavendra et al. [17] later improved the bound on f to f d3 (n 2)=2e, while retaining the ring length to be 2 n 2f . Recently, Wang and Cypher <ref> [21] </ref> showed how to find a ring of size 2 n 2 maxff odd ; f even g, where f odd and f even , both assumed to be n fi ( p are respectively the number of odd and the number of even faulty nodes in the cube (an odd/even <p> The algorithm proposed by [25] retains p w (f ) = 2 but improves f to as large as 3n=2. The algorithm in <ref> [21] </ref> always has a minimal p (R; F ) provided that the cube has no more than n fi ( p p even nodes. 12 Given any f , it is always possible to use Theorem 1 to obtain a lower bound on jR 0 j, and thus an upper bound
Reference: [22] <author> A. S. Wanger, </author> <title> "Embedding Arbitrary Binary Trees in a Hypercube," </title> <journal> J. of Parallel and Distrib. Comput., </journal> <month> June </month> <year> 1989, </year> <pages> pp. 503-520. </pages>
Reference-contexts: The hypercube has emerged as one of the most important network architectures for large-scale concurrent computers and, as a result, embedding in hypercubes has received intensive studies for various source graphs, such as rings [18], trees <ref> [2, 22, 23] </ref>, meshes [7], pyramids [12, 15], arbitrary graphs [14], and even multiple graphs [10, 19]. As technology advances and a hypercube computer contains more and more nodes, the possibility of there existing one or more faulty nodes in the system becomes ineligible.
Reference: [23] <author> A. Y. Wu, </author> <title> "Embedding of Tree Networks into Hypercubes," </title> <journal> J. Parallel and Distrib. Comput., </journal> <volume> 2 (1985), </volume> <pages> pp. 238-249. </pages>
Reference-contexts: The hypercube has emerged as one of the most important network architectures for large-scale concurrent computers and, as a result, embedding in hypercubes has received intensive studies for various source graphs, such as rings [18], trees <ref> [2, 22, 23] </ref>, meshes [7], pyramids [12, 15], arbitrary graphs [14], and even multiple graphs [10, 19]. As technology advances and a hypercube computer contains more and more nodes, the possibility of there existing one or more faulty nodes in the system becomes ineligible.
Reference: [24] <author> P.-J. Yang, S.-B. Tien and C. S. Raghavendra, </author> <title> "Embedding of Multidimensional Meshes on to Faulty Hypercubes," </title> <booktitle> Int'l Conf. on Parallel Processing, 1991, </booktitle> <volume> Vol. I, </volume> <pages> pp. </pages> <month> 571-574. </month> <title> [25] ||, "Embedding of Rings and Meshes on to Faulty Hypercubes," </title> <type> Tech. </type> <institution> Rept., Dept. of Elec. Eng., Univ. of Southern California, </institution> <year> 1991. </year> <month> 22 </month>
Reference-contexts: The problem of embedding a graph in an injured hypercube has thus become an important issue. Indeed, there are techniques available in the literatures for embedding rings [5, 16, 21, 25], trees [6, 20], meshes <ref> [24] </ref> in injured hypercubes. Of these results we are particularly interested in the ones for rings, noting that many parallel and distributed algorithms are structured as rings (e.g., [8, 9, 13]).
References-found: 24

