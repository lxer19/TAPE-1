URL: http://www.cms.dmu.ac.uk/~drs/public_fp/papers/domains-for-projections.ps
Refering-URL: http://www.cms.dmu.ac.uk/~drs/public_fp/papers/
Root-URL: 
Email: email: davismk@dcs.glasgow.ac.uk  
Title: A Note on the Choice of Domains for Projection-Based Program Analysis  
Author: Kei Davis 
Address: Glasgow G12 8QQ, UK  
Affiliation: Department of Computing Science University of Glasgow  
Abstract: Various nonstandard interpretations of functional programs have been proposed in which the basic nonstandard values are projections. We show that every stable function is completely determined by an appropriate abstract value in the backward analysis, and that every continuous function is completely determined by an appropriate value in the forward analysis.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Wray, S. </author> <title> "A new strictness detection algorithm." </title> <booktitle> In Proceedings of the Workshop in Implementation of Functional Languages (Aspenas, Sweden). </booktitle> <editor> L. Augustsson et. al., eds. </editor> <title> Report 17, Programming Methodology Group, </title> <institution> Department of Computer Sciences, Chalmers University of Technology and University of Goteborg, Goteborg, Sweden. </institution>
Reference-contexts: 1 Introduction Strictness analysis by abstract (or non-standard) interpretation is an important part of several compilers for lazy functional languages <ref> [ 1, 2 ] </ref> , and a wide variety of strictness analysis techniques have been proposed.
Reference: 2. <author> Augustsson, L. and Johnson, T. </author> <title> "The Chalmers Lazy ML Compiler." </title> <institution> Department of Computer Science, Chalmers University of Technology, Goteborg, Sweden, </institution> <year> 1988. </year>
Reference-contexts: 1 Introduction Strictness analysis by abstract (or non-standard) interpretation is an important part of several compilers for lazy functional languages <ref> [ 1, 2 ] </ref> , and a wide variety of strictness analysis techniques have been proposed.
Reference: 3. <author> Abramsky, S. and Hankin, C. </author> <title> "An introduction to abstract interpretation." Ch. 1 of Abstract Interpretation of Declarative Languages. </title> <editor> Abramsky, S. and Hankin, C. (eds.). </editor> <publisher> Ellis-Horwood, </publisher> <year> 1987. </year>
Reference-contexts: The development of backward strictness analysis was motivated in part by the need for a method that could detect certain forms of data structure strictness such as head strictness, since a forward technique was not forthcoming, and suspected to be impossible by any forward analysis BHA framework <ref> [ 3 ] </ref> . A projection may be used to specify upper and lower bounds of the definedness of values (a semantic interpretation), or upper and lower bounds on evaluation (an operational interpretation); see e.g. [ 4 ] .
Reference: 4. <author> Burn, G.L. </author> <title> "Using projection analysis in compiling lazy functional programs." </title> <booktitle> In Proceedings of the ACM Conference on Lisp and Functional Programming (Nice, </booktitle> <month> June </month> <year> 1990). </year>
Reference-contexts: A projection may be used to specify upper and lower bounds of the definedness of values (a semantic interpretation), or upper and lower bounds on evaluation (an operational interpretation); see e.g. <ref> [ 4 ] </ref> . In particular, projections can usefully encode head strictness as well as ordinary strictness [ 5 ] .
Reference: 5. <author> Wadler, P., and Hughes, J. </author> <title> Projections for Strictness Analysis. </title> <type> Report 35, </type> <institution> Programming Methodology Group, Department of Computer Sciences, Chalmers University of Technology and University of Goteborg, Goteborg, Sweden, </institution> <year> 1987. </year>
Reference-contexts: A projection may be used to specify upper and lower bounds of the definedness of values (a semantic interpretation), or upper and lower bounds on evaluation (an operational interpretation); see e.g. [ 4 ] . In particular, projections can usefully encode head strictness as well as ordinary strictness <ref> [ 5 ] </ref> . Program analysis techniques based on the use of projections include backward strictness analysis techniques [ 5, 6, 7, 8 ] ,, and a forward analysis technique for use in partial evaluation [ 9 ] . <p> In particular, projections can usefully encode head strictness as well as ordinary strictness [ 5 ] . Program analysis techniques based on the use of projections include backward strictness analysis techniques <ref> [ 5, 6, 7, 8 ] </ref> ,, and a forward analysis technique for use in partial evaluation [ 9 ] . A domain projection is a continuous, idempotent function that approximates the identity. <p> Next we show that even simple strictness (i.e. that f ? = ?) is not determined by the least backward abstraction of a stable function. We give a remedy first described in <ref> [ 5 ] </ref> : stable function f is transformed to a function f ? such that the least backward abstraction of f ? determines simple strictness in f . <p> The least backward abstractions of bot and top are the same, the function that maps both ID and BOT to BOT , though bot is strict and top is not. The least backward abstraction of id is the identity. As shown in <ref> [ 5 ] </ref> , by mapping a function f : V ! W to f ? : V ? ! W ? , such that f ? ? = ? and f ? (lift x ) = lift (f x), and defining the projection STR by STR ? = ?; STR <p> So, as is usual in abstract interpretation, the goal is to find as good an abstraction as possible. Importantly, such approximations to abstractions of j f ? j defined on finite abstract domains of projections can still reveal head strictness and ordinary strictness. These practical issues are addressed in <ref> [ 5 ] </ref> . The mapping from stable functions to their least backward abstractions is not monotonic. <p> This mapping is not monotonic even when the ordering on bot , id , and top is the stable ordering. 4 Conclusion As mentioned, the purpose of the transformation of function f to f ? in <ref> [ 5 ] </ref> is to enable determination of simple strictness with a backward abstraction. We have shown that this transformation is also sufficient for the same purpose for forward abstraction, and in both cases determines not just simple strictness in the function, but completely determines the function. <p> Head strictness is determined by both least backward and greatest forward abstractions. An argument presented in [ 12 ] suggests that any projection-based forward program analysis will not be able to detect head strictness, unlike the backward analysis of <ref> [ 5 ] </ref> . We conjecture that every continuous (as opposed to stable) function is determined by the set of all of its (continuous) backward abstractions, and that every continuous function from a finite domains to a finite domain is determined by its minimal (monotonic) backward abstractions.
Reference: 6. <author> Davis, K. and Wadler, P. </author> <title> "Strictness analysis: Proved and improved." </title> <booktitle> In Functional Programming, Glasgow 1989: Proceedings of the 1989 Glasgow Workshop on Functional Programming, </booktitle> <month> 21-23 August </month> <year> 1989, </year> <editor> Fraserburgh, Scotland. K. Davis and J. Hughes, eds. </editor> <publisher> Springer Workshops in Computing. Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: In particular, projections can usefully encode head strictness as well as ordinary strictness [ 5 ] . Program analysis techniques based on the use of projections include backward strictness analysis techniques <ref> [ 5, 6, 7, 8 ] </ref> ,, and a forward analysis technique for use in partial evaluation [ 9 ] . A domain projection is a continuous, idempotent function that approximates the identity.
Reference: 7. <author> Hughes, R.J.M. and Launchbury, J. </author> <title> Projections for polymorphic strictness analysis. </title> <type> CS Report Series CSC 90/R33, </type> <institution> Department of Computing Science, University of Glasgow, </institution> <year> 1990. </year>
Reference-contexts: In particular, projections can usefully encode head strictness as well as ordinary strictness [ 5 ] . Program analysis techniques based on the use of projections include backward strictness analysis techniques <ref> [ 5, 6, 7, 8 ] </ref> ,, and a forward analysis technique for use in partial evaluation [ 9 ] . A domain projection is a continuous, idempotent function that approximates the identity.
Reference: 8. <author> Davis, K. and Wadler, P. </author> <title> "Strictness analysis in 4D." </title> <booktitle> In Functional Programming, Glasgow 1990: Proceedings of the 1990 Glasgow Workshop on Functional Programming, </booktitle> <month> 13-15 August </month> <year> 1990, </year> <editor> Ullapool, Scotland. Simon L. Peyton Jones et al., eds. </editor> <publisher> Springer Workshops in Computing. Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: In particular, projections can usefully encode head strictness as well as ordinary strictness [ 5 ] . Program analysis techniques based on the use of projections include backward strictness analysis techniques <ref> [ 5, 6, 7, 8 ] </ref> ,, and a forward analysis technique for use in partial evaluation [ 9 ] . A domain projection is a continuous, idempotent function that approximates the identity.
Reference: 9. <author> Launchbury, J. </author> <title> Projection Factorisation in Partial Evaluation. </title> <type> Ph.D. thesis, </type> <institution> Department of Computing Science, University of Glasgow, </institution> <year> 1990. </year>
Reference-contexts: In particular, projections can usefully encode head strictness as well as ordinary strictness [ 5 ] . Program analysis techniques based on the use of projections include backward strictness analysis techniques [ 5, 6, 7, 8 ] ,, and a forward analysis technique for use in partial evaluation <ref> [ 9 ] </ref> . A domain projection is a continuous, idempotent function that approximates the identity.
Reference: 10. <author> Hunt, S. </author> <title> Projection analysis and stable functions. </title> <type> Unfinished manuscript. </type>
Reference-contexts: Starting with backward analysis, a simple example|the parallel-or function|demonstrates that a continuous function may not have a least backward abstraction. However, there is a useful set of functions for which least backward abstractions do exist: the stable functions. Hunt states but does not prove this fact <ref> [ 10 ] </ref> ; we provide the proof here. Roughly speaking, the stable functions include the sequential functions; another example shows that the converse is not true. <p> For example, for bot , id , and top be as previously defined we have bot &lt; id &lt; top in the usual domain ordering, but j bot j = j top j and j bot j &lt; j id j. However, as Hunt states <ref> [ 10 ] </ref> the mapping is monotonic when the ordering on the argument domain is the stable ordering v s , where for stable f and g we have f v s g if f v g and for all x, y, if y v f x then M (f; x;
Reference: 11. <author> Berry, G. </author> <title> "Stable models of typed lambda-calculi." </title> <booktitle> In Proceedings of the 5th ICALP pp 375-387, </booktitle> <publisher> LNCS 62. Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1978. </year>
Reference-contexts: However, least backward abstractions do exist for the stable functions. The theory of stability was developed by Berry <ref> [ 11 ] </ref> in an attempt to extend the characterisation of sequential functions to include higher order functions. At first order the stable functions are a superset of the sequential functions, and this is hypothesised to be the case at higher order. Definition.
Reference: 12. <author> Hughes, R.J.M. and Launchbury, J. </author> <title> "Towards relating forwards and backwards analysis." </title> <booktitle> In Functional Programming, Glasgow 1990: Proceedings of the 1990 Glasgow Workshop on Functional Programming, </booktitle> <month> 13-15 August </month> <year> 1990, </year> <editor> Ullapool, Scotland. Simon L. Peyton Jones et al., eds. </editor> <publisher> Springer Workshops in Computing. Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: We have shown that this transformation is also sufficient for the same purpose for forward abstraction, and in both cases determines not just simple strictness in the function, but completely determines the function. Head strictness is determined by both least backward and greatest forward abstractions. An argument presented in <ref> [ 12 ] </ref> suggests that any projection-based forward program analysis will not be able to detect head strictness, unlike the backward analysis of [ 5 ] .
References-found: 12

